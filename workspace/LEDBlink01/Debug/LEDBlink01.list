
LEDBlink01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081d4  080002ac  080002ac  000102ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08008480  08008480  00018480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080084b8  080084b8  000184b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080084c0  080084c0  000184c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080084c4  080084c4  000184c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  080084c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000003bc  24000010  080084d8  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240003cc  080084d8  000203cc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002d11c  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000040d2  00000000  00000000  0004d15a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001688  00000000  00000000  00051230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001550  00000000  00000000  000528b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00034e32  00000000  00000000  00053e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001de8c  00000000  00000000  00088c3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00154ddf  00000000  00000000  000a6ac6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001fb8a5  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006088  00000000  00000000  001fb8f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	; (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000010 	.word	0x24000010
 80002c8:	00000000 	.word	0x00000000
 80002cc:	08008468 	.word	0x08008468

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	; (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	; (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000014 	.word	0x24000014
 80002e8:	08008468 	.word	0x08008468

080002ec <__aeabi_uldivmod>:
 80002ec:	b953      	cbnz	r3, 8000304 <__aeabi_uldivmod+0x18>
 80002ee:	b94a      	cbnz	r2, 8000304 <__aeabi_uldivmod+0x18>
 80002f0:	2900      	cmp	r1, #0
 80002f2:	bf08      	it	eq
 80002f4:	2800      	cmpeq	r0, #0
 80002f6:	bf1c      	itt	ne
 80002f8:	f04f 31ff 	movne.w	r1, #4294967295
 80002fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000300:	f000 b96e 	b.w	80005e0 <__aeabi_idiv0>
 8000304:	f1ad 0c08 	sub.w	ip, sp, #8
 8000308:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030c:	f000 f806 	bl	800031c <__udivmoddi4>
 8000310:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000318:	b004      	add	sp, #16
 800031a:	4770      	bx	lr

0800031c <__udivmoddi4>:
 800031c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000320:	9d08      	ldr	r5, [sp, #32]
 8000322:	4604      	mov	r4, r0
 8000324:	468c      	mov	ip, r1
 8000326:	2b00      	cmp	r3, #0
 8000328:	f040 8083 	bne.w	8000432 <__udivmoddi4+0x116>
 800032c:	428a      	cmp	r2, r1
 800032e:	4617      	mov	r7, r2
 8000330:	d947      	bls.n	80003c2 <__udivmoddi4+0xa6>
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	b142      	cbz	r2, 800034a <__udivmoddi4+0x2e>
 8000338:	f1c2 0020 	rsb	r0, r2, #32
 800033c:	fa24 f000 	lsr.w	r0, r4, r0
 8000340:	4091      	lsls	r1, r2
 8000342:	4097      	lsls	r7, r2
 8000344:	ea40 0c01 	orr.w	ip, r0, r1
 8000348:	4094      	lsls	r4, r2
 800034a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800034e:	0c23      	lsrs	r3, r4, #16
 8000350:	fbbc f6f8 	udiv	r6, ip, r8
 8000354:	fa1f fe87 	uxth.w	lr, r7
 8000358:	fb08 c116 	mls	r1, r8, r6, ip
 800035c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000360:	fb06 f10e 	mul.w	r1, r6, lr
 8000364:	4299      	cmp	r1, r3
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x60>
 8000368:	18fb      	adds	r3, r7, r3
 800036a:	f106 30ff 	add.w	r0, r6, #4294967295
 800036e:	f080 8119 	bcs.w	80005a4 <__udivmoddi4+0x288>
 8000372:	4299      	cmp	r1, r3
 8000374:	f240 8116 	bls.w	80005a4 <__udivmoddi4+0x288>
 8000378:	3e02      	subs	r6, #2
 800037a:	443b      	add	r3, r7
 800037c:	1a5b      	subs	r3, r3, r1
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb3 f0f8 	udiv	r0, r3, r8
 8000384:	fb08 3310 	mls	r3, r8, r0, r3
 8000388:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800038c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000390:	45a6      	cmp	lr, r4
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x8c>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f100 33ff 	add.w	r3, r0, #4294967295
 800039a:	f080 8105 	bcs.w	80005a8 <__udivmoddi4+0x28c>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f240 8102 	bls.w	80005a8 <__udivmoddi4+0x28c>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ac:	eba4 040e 	sub.w	r4, r4, lr
 80003b0:	2600      	movs	r6, #0
 80003b2:	b11d      	cbz	r5, 80003bc <__udivmoddi4+0xa0>
 80003b4:	40d4      	lsrs	r4, r2
 80003b6:	2300      	movs	r3, #0
 80003b8:	e9c5 4300 	strd	r4, r3, [r5]
 80003bc:	4631      	mov	r1, r6
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xaa>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f282 	clz	r2, r2
 80003ca:	2a00      	cmp	r2, #0
 80003cc:	d150      	bne.n	8000470 <__udivmoddi4+0x154>
 80003ce:	1bcb      	subs	r3, r1, r7
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	fa1f f887 	uxth.w	r8, r7
 80003d8:	2601      	movs	r6, #1
 80003da:	fbb3 fcfe 	udiv	ip, r3, lr
 80003de:	0c21      	lsrs	r1, r4, #16
 80003e0:	fb0e 331c 	mls	r3, lr, ip, r3
 80003e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e8:	fb08 f30c 	mul.w	r3, r8, ip
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d907      	bls.n	8000400 <__udivmoddi4+0xe4>
 80003f0:	1879      	adds	r1, r7, r1
 80003f2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003f6:	d202      	bcs.n	80003fe <__udivmoddi4+0xe2>
 80003f8:	428b      	cmp	r3, r1
 80003fa:	f200 80e9 	bhi.w	80005d0 <__udivmoddi4+0x2b4>
 80003fe:	4684      	mov	ip, r0
 8000400:	1ac9      	subs	r1, r1, r3
 8000402:	b2a3      	uxth	r3, r4
 8000404:	fbb1 f0fe 	udiv	r0, r1, lr
 8000408:	fb0e 1110 	mls	r1, lr, r0, r1
 800040c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000410:	fb08 f800 	mul.w	r8, r8, r0
 8000414:	45a0      	cmp	r8, r4
 8000416:	d907      	bls.n	8000428 <__udivmoddi4+0x10c>
 8000418:	193c      	adds	r4, r7, r4
 800041a:	f100 33ff 	add.w	r3, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x10a>
 8000420:	45a0      	cmp	r8, r4
 8000422:	f200 80d9 	bhi.w	80005d8 <__udivmoddi4+0x2bc>
 8000426:	4618      	mov	r0, r3
 8000428:	eba4 0408 	sub.w	r4, r4, r8
 800042c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000430:	e7bf      	b.n	80003b2 <__udivmoddi4+0x96>
 8000432:	428b      	cmp	r3, r1
 8000434:	d909      	bls.n	800044a <__udivmoddi4+0x12e>
 8000436:	2d00      	cmp	r5, #0
 8000438:	f000 80b1 	beq.w	800059e <__udivmoddi4+0x282>
 800043c:	2600      	movs	r6, #0
 800043e:	e9c5 0100 	strd	r0, r1, [r5]
 8000442:	4630      	mov	r0, r6
 8000444:	4631      	mov	r1, r6
 8000446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044a:	fab3 f683 	clz	r6, r3
 800044e:	2e00      	cmp	r6, #0
 8000450:	d14a      	bne.n	80004e8 <__udivmoddi4+0x1cc>
 8000452:	428b      	cmp	r3, r1
 8000454:	d302      	bcc.n	800045c <__udivmoddi4+0x140>
 8000456:	4282      	cmp	r2, r0
 8000458:	f200 80b8 	bhi.w	80005cc <__udivmoddi4+0x2b0>
 800045c:	1a84      	subs	r4, r0, r2
 800045e:	eb61 0103 	sbc.w	r1, r1, r3
 8000462:	2001      	movs	r0, #1
 8000464:	468c      	mov	ip, r1
 8000466:	2d00      	cmp	r5, #0
 8000468:	d0a8      	beq.n	80003bc <__udivmoddi4+0xa0>
 800046a:	e9c5 4c00 	strd	r4, ip, [r5]
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0xa0>
 8000470:	f1c2 0320 	rsb	r3, r2, #32
 8000474:	fa20 f603 	lsr.w	r6, r0, r3
 8000478:	4097      	lsls	r7, r2
 800047a:	fa01 f002 	lsl.w	r0, r1, r2
 800047e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000482:	40d9      	lsrs	r1, r3
 8000484:	4330      	orrs	r0, r6
 8000486:	0c03      	lsrs	r3, r0, #16
 8000488:	fbb1 f6fe 	udiv	r6, r1, lr
 800048c:	fa1f f887 	uxth.w	r8, r7
 8000490:	fb0e 1116 	mls	r1, lr, r6, r1
 8000494:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000498:	fb06 f108 	mul.w	r1, r6, r8
 800049c:	4299      	cmp	r1, r3
 800049e:	fa04 f402 	lsl.w	r4, r4, r2
 80004a2:	d909      	bls.n	80004b8 <__udivmoddi4+0x19c>
 80004a4:	18fb      	adds	r3, r7, r3
 80004a6:	f106 3cff 	add.w	ip, r6, #4294967295
 80004aa:	f080 808d 	bcs.w	80005c8 <__udivmoddi4+0x2ac>
 80004ae:	4299      	cmp	r1, r3
 80004b0:	f240 808a 	bls.w	80005c8 <__udivmoddi4+0x2ac>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	443b      	add	r3, r7
 80004b8:	1a5b      	subs	r3, r3, r1
 80004ba:	b281      	uxth	r1, r0
 80004bc:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c0:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004c8:	fb00 f308 	mul.w	r3, r0, r8
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d907      	bls.n	80004e0 <__udivmoddi4+0x1c4>
 80004d0:	1879      	adds	r1, r7, r1
 80004d2:	f100 3cff 	add.w	ip, r0, #4294967295
 80004d6:	d273      	bcs.n	80005c0 <__udivmoddi4+0x2a4>
 80004d8:	428b      	cmp	r3, r1
 80004da:	d971      	bls.n	80005c0 <__udivmoddi4+0x2a4>
 80004dc:	3802      	subs	r0, #2
 80004de:	4439      	add	r1, r7
 80004e0:	1acb      	subs	r3, r1, r3
 80004e2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004e6:	e778      	b.n	80003da <__udivmoddi4+0xbe>
 80004e8:	f1c6 0c20 	rsb	ip, r6, #32
 80004ec:	fa03 f406 	lsl.w	r4, r3, r6
 80004f0:	fa22 f30c 	lsr.w	r3, r2, ip
 80004f4:	431c      	orrs	r4, r3
 80004f6:	fa20 f70c 	lsr.w	r7, r0, ip
 80004fa:	fa01 f306 	lsl.w	r3, r1, r6
 80004fe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000502:	fa21 f10c 	lsr.w	r1, r1, ip
 8000506:	431f      	orrs	r7, r3
 8000508:	0c3b      	lsrs	r3, r7, #16
 800050a:	fbb1 f9fe 	udiv	r9, r1, lr
 800050e:	fa1f f884 	uxth.w	r8, r4
 8000512:	fb0e 1119 	mls	r1, lr, r9, r1
 8000516:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800051a:	fb09 fa08 	mul.w	sl, r9, r8
 800051e:	458a      	cmp	sl, r1
 8000520:	fa02 f206 	lsl.w	r2, r2, r6
 8000524:	fa00 f306 	lsl.w	r3, r0, r6
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x220>
 800052a:	1861      	adds	r1, r4, r1
 800052c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000530:	d248      	bcs.n	80005c4 <__udivmoddi4+0x2a8>
 8000532:	458a      	cmp	sl, r1
 8000534:	d946      	bls.n	80005c4 <__udivmoddi4+0x2a8>
 8000536:	f1a9 0902 	sub.w	r9, r9, #2
 800053a:	4421      	add	r1, r4
 800053c:	eba1 010a 	sub.w	r1, r1, sl
 8000540:	b2bf      	uxth	r7, r7
 8000542:	fbb1 f0fe 	udiv	r0, r1, lr
 8000546:	fb0e 1110 	mls	r1, lr, r0, r1
 800054a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800054e:	fb00 f808 	mul.w	r8, r0, r8
 8000552:	45b8      	cmp	r8, r7
 8000554:	d907      	bls.n	8000566 <__udivmoddi4+0x24a>
 8000556:	19e7      	adds	r7, r4, r7
 8000558:	f100 31ff 	add.w	r1, r0, #4294967295
 800055c:	d22e      	bcs.n	80005bc <__udivmoddi4+0x2a0>
 800055e:	45b8      	cmp	r8, r7
 8000560:	d92c      	bls.n	80005bc <__udivmoddi4+0x2a0>
 8000562:	3802      	subs	r0, #2
 8000564:	4427      	add	r7, r4
 8000566:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800056a:	eba7 0708 	sub.w	r7, r7, r8
 800056e:	fba0 8902 	umull	r8, r9, r0, r2
 8000572:	454f      	cmp	r7, r9
 8000574:	46c6      	mov	lr, r8
 8000576:	4649      	mov	r1, r9
 8000578:	d31a      	bcc.n	80005b0 <__udivmoddi4+0x294>
 800057a:	d017      	beq.n	80005ac <__udivmoddi4+0x290>
 800057c:	b15d      	cbz	r5, 8000596 <__udivmoddi4+0x27a>
 800057e:	ebb3 020e 	subs.w	r2, r3, lr
 8000582:	eb67 0701 	sbc.w	r7, r7, r1
 8000586:	fa07 fc0c 	lsl.w	ip, r7, ip
 800058a:	40f2      	lsrs	r2, r6
 800058c:	ea4c 0202 	orr.w	r2, ip, r2
 8000590:	40f7      	lsrs	r7, r6
 8000592:	e9c5 2700 	strd	r2, r7, [r5]
 8000596:	2600      	movs	r6, #0
 8000598:	4631      	mov	r1, r6
 800059a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800059e:	462e      	mov	r6, r5
 80005a0:	4628      	mov	r0, r5
 80005a2:	e70b      	b.n	80003bc <__udivmoddi4+0xa0>
 80005a4:	4606      	mov	r6, r0
 80005a6:	e6e9      	b.n	800037c <__udivmoddi4+0x60>
 80005a8:	4618      	mov	r0, r3
 80005aa:	e6fd      	b.n	80003a8 <__udivmoddi4+0x8c>
 80005ac:	4543      	cmp	r3, r8
 80005ae:	d2e5      	bcs.n	800057c <__udivmoddi4+0x260>
 80005b0:	ebb8 0e02 	subs.w	lr, r8, r2
 80005b4:	eb69 0104 	sbc.w	r1, r9, r4
 80005b8:	3801      	subs	r0, #1
 80005ba:	e7df      	b.n	800057c <__udivmoddi4+0x260>
 80005bc:	4608      	mov	r0, r1
 80005be:	e7d2      	b.n	8000566 <__udivmoddi4+0x24a>
 80005c0:	4660      	mov	r0, ip
 80005c2:	e78d      	b.n	80004e0 <__udivmoddi4+0x1c4>
 80005c4:	4681      	mov	r9, r0
 80005c6:	e7b9      	b.n	800053c <__udivmoddi4+0x220>
 80005c8:	4666      	mov	r6, ip
 80005ca:	e775      	b.n	80004b8 <__udivmoddi4+0x19c>
 80005cc:	4630      	mov	r0, r6
 80005ce:	e74a      	b.n	8000466 <__udivmoddi4+0x14a>
 80005d0:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d4:	4439      	add	r1, r7
 80005d6:	e713      	b.n	8000400 <__udivmoddi4+0xe4>
 80005d8:	3802      	subs	r0, #2
 80005da:	443c      	add	r4, r7
 80005dc:	e724      	b.n	8000428 <__udivmoddi4+0x10c>
 80005de:	bf00      	nop

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e8:	f001 fa14 	bl	8001a14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ec:	f000 f820 	bl	8000630 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80005f0:	f000 f8ac 	bl	800074c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f4:	f000 fb84 	bl	8000d00 <MX_GPIO_Init>
  MX_FMC_Init();
 80005f8:	f000 fb34 	bl	8000c64 <MX_FMC_Init>
  MX_I2C4_Init();
 80005fc:	f000 f8da 	bl	80007b4 <MX_I2C4_Init>
  MX_I2S6_Init();
 8000600:	f000 f918 	bl	8000834 <MX_I2S6_Init>
  MX_LTDC_Init();
 8000604:	f000 f94a 	bl	800089c <MX_LTDC_Init>
  MX_OCTOSPI1_Init();
 8000608:	f000 f9fa 	bl	8000a00 <MX_OCTOSPI1_Init>
  MX_RTC_Init();
 800060c:	f000 fa5e 	bl	8000acc <MX_RTC_Init>
//  MX_SDMMC1_SD_Init();
  MX_SPI2_Init();
 8000610:	f000 fa86 	bl	8000b20 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8000614:	f000 fada 	bl	8000bcc <MX_USART1_UART_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  //Toggle USER_LED1
	  HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_11);
 8000618:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800061c:	4803      	ldr	r0, [pc, #12]	; (800062c <main+0x48>)
 800061e:	f001 fd5c 	bl	80020da <HAL_GPIO_TogglePin>
	  //Delay for 1sec
	  HAL_Delay(1000);
 8000622:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000626:	f001 fa87 	bl	8001b38 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_11);
 800062a:	e7f5      	b.n	8000618 <main+0x34>
 800062c:	58021800 	.word	0x58021800

08000630 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b09c      	sub	sp, #112	; 0x70
 8000634:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000636:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800063a:	224c      	movs	r2, #76	; 0x4c
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f007 ff0a 	bl	8008458 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000644:	1d3b      	adds	r3, r7, #4
 8000646:	2220      	movs	r2, #32
 8000648:	2100      	movs	r1, #0
 800064a:	4618      	mov	r0, r3
 800064c:	f007 ff04 	bl	8008458 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000650:	2004      	movs	r0, #4
 8000652:	f003 f93f 	bl	80038d4 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000656:	2300      	movs	r3, #0
 8000658:	603b      	str	r3, [r7, #0]
 800065a:	4b3a      	ldr	r3, [pc, #232]	; (8000744 <SystemClock_Config+0x114>)
 800065c:	699b      	ldr	r3, [r3, #24]
 800065e:	4a39      	ldr	r2, [pc, #228]	; (8000744 <SystemClock_Config+0x114>)
 8000660:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000664:	6193      	str	r3, [r2, #24]
 8000666:	4b37      	ldr	r3, [pc, #220]	; (8000744 <SystemClock_Config+0x114>)
 8000668:	699b      	ldr	r3, [r3, #24]
 800066a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800066e:	603b      	str	r3, [r7, #0]
 8000670:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000672:	bf00      	nop
 8000674:	4b33      	ldr	r3, [pc, #204]	; (8000744 <SystemClock_Config+0x114>)
 8000676:	699b      	ldr	r3, [r3, #24]
 8000678:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800067c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000680:	d1f8      	bne.n	8000674 <SystemClock_Config+0x44>
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000682:	f003 f917 	bl	80038b4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000686:	4b30      	ldr	r3, [pc, #192]	; (8000748 <SystemClock_Config+0x118>)
 8000688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800068a:	4a2f      	ldr	r2, [pc, #188]	; (8000748 <SystemClock_Config+0x118>)
 800068c:	f023 0318 	bic.w	r3, r3, #24
 8000690:	6713      	str	r3, [r2, #112]	; 0x70
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000692:	4b2d      	ldr	r3, [pc, #180]	; (8000748 <SystemClock_Config+0x118>)
 8000694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000696:	f023 0303 	bic.w	r3, r3, #3
 800069a:	4a2b      	ldr	r2, [pc, #172]	; (8000748 <SystemClock_Config+0x118>)
 800069c:	f043 0302 	orr.w	r3, r3, #2
 80006a0:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 80006a2:	2307      	movs	r3, #7
 80006a4:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006aa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006ac:	2301      	movs	r3, #1
 80006ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80006b0:	2301      	movs	r3, #1
 80006b2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b4:	2340      	movs	r3, #64	; 0x40
 80006b6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b8:	2302      	movs	r3, #2
 80006ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006bc:	2302      	movs	r3, #2
 80006be:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80006c0:	230c      	movs	r3, #12
 80006c2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 280;
 80006c4:	f44f 738c 	mov.w	r3, #280	; 0x118
 80006c8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006ca:	2302      	movs	r3, #2
 80006cc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80006ce:	2303      	movs	r3, #3
 80006d0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 4;
 80006d2:	2304      	movs	r3, #4
 80006d4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 80006d6:	2304      	movs	r3, #4
 80006d8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006da:	2300      	movs	r3, #0
 80006dc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006de:	2300      	movs	r3, #0
 80006e0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006e6:	4618      	mov	r0, r3
 80006e8:	f003 f94e 	bl	8003988 <HAL_RCC_OscConfig>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006f2:	f000 fc53 	bl	8000f9c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f6:	233f      	movs	r3, #63	; 0x3f
 80006f8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006fa:	2303      	movs	r3, #3
 80006fc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006fe:	2300      	movs	r3, #0
 8000700:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000702:	2308      	movs	r3, #8
 8000704:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000706:	2340      	movs	r3, #64	; 0x40
 8000708:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800070a:	2340      	movs	r3, #64	; 0x40
 800070c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800070e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000712:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000714:	2340      	movs	r3, #64	; 0x40
 8000716:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000718:	1d3b      	adds	r3, r7, #4
 800071a:	2103      	movs	r1, #3
 800071c:	4618      	mov	r0, r3
 800071e:	f003 fd37 	bl	8004190 <HAL_RCC_ClockConfig>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8000728:	f000 fc38 	bl	8000f9c <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1);
 800072c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000730:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 8000734:	2000      	movs	r0, #0
 8000736:	f003 fee1 	bl	80044fc <HAL_RCC_MCOConfig>
}
 800073a:	bf00      	nop
 800073c:	3770      	adds	r7, #112	; 0x70
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	58024800 	.word	0x58024800
 8000748:	58024400 	.word	0x58024400

0800074c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b0ae      	sub	sp, #184	; 0xb8
 8000750:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000752:	463b      	mov	r3, r7
 8000754:	22b8      	movs	r2, #184	; 0xb8
 8000756:	2100      	movs	r1, #0
 8000758:	4618      	mov	r0, r3
 800075a:	f007 fe7d 	bl	8008458 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC|RCC_PERIPHCLK_OSPI
 800075e:	4b14      	ldr	r3, [pc, #80]	; (80007b0 <PeriphCommonClock_Config+0x64>)
 8000760:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_CKPER;
  PeriphClkInitStruct.PLL2.PLL2M = 12;
 8000762:	230c      	movs	r3, #12
 8000764:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 200;
 8000766:	23c8      	movs	r3, #200	; 0xc8
 8000768:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 800076a:	2302      	movs	r3, #2
 800076c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800076e:	2302      	movs	r3, #2
 8000770:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 4;
 8000772:	2304      	movs	r3, #4
 8000774:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 8000776:	2340      	movs	r3, #64	; 0x40
 8000778:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800077a:	2300      	movs	r3, #0
 800077c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800077e:	2300      	movs	r3, #0
 8000780:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_PLL2;
 8000782:	2302      	movs	r3, #2
 8000784:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_PLL2;
 8000786:	2320      	movs	r3, #32
 8000788:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 800078a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800078e:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 8000790:	2300      	movs	r3, #0
 8000792:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000794:	463b      	mov	r3, r7
 8000796:	4618      	mov	r0, r3
 8000798:	f004 f8f0 	bl	800497c <HAL_RCCEx_PeriphCLKConfig>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <PeriphCommonClock_Config+0x5a>
  {
    Error_Handler();
 80007a2:	f000 fbfb 	bl	8000f9c <Error_Handler>
  }
}
 80007a6:	bf00      	nop
 80007a8:	37b8      	adds	r7, #184	; 0xb8
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	83010000 	.word	0x83010000

080007b4 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80007b8:	4b1b      	ldr	r3, [pc, #108]	; (8000828 <MX_I2C4_Init+0x74>)
 80007ba:	4a1c      	ldr	r2, [pc, #112]	; (800082c <MX_I2C4_Init+0x78>)
 80007bc:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0xC010151E;
 80007be:	4b1a      	ldr	r3, [pc, #104]	; (8000828 <MX_I2C4_Init+0x74>)
 80007c0:	4a1b      	ldr	r2, [pc, #108]	; (8000830 <MX_I2C4_Init+0x7c>)
 80007c2:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80007c4:	4b18      	ldr	r3, [pc, #96]	; (8000828 <MX_I2C4_Init+0x74>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007ca:	4b17      	ldr	r3, [pc, #92]	; (8000828 <MX_I2C4_Init+0x74>)
 80007cc:	2201      	movs	r2, #1
 80007ce:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007d0:	4b15      	ldr	r3, [pc, #84]	; (8000828 <MX_I2C4_Init+0x74>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80007d6:	4b14      	ldr	r3, [pc, #80]	; (8000828 <MX_I2C4_Init+0x74>)
 80007d8:	2200      	movs	r2, #0
 80007da:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007dc:	4b12      	ldr	r3, [pc, #72]	; (8000828 <MX_I2C4_Init+0x74>)
 80007de:	2200      	movs	r2, #0
 80007e0:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007e2:	4b11      	ldr	r3, [pc, #68]	; (8000828 <MX_I2C4_Init+0x74>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007e8:	4b0f      	ldr	r3, [pc, #60]	; (8000828 <MX_I2C4_Init+0x74>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80007ee:	480e      	ldr	r0, [pc, #56]	; (8000828 <MX_I2C4_Init+0x74>)
 80007f0:	f001 fc8e 	bl	8002110 <HAL_I2C_Init>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 80007fa:	f000 fbcf 	bl	8000f9c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007fe:	2100      	movs	r1, #0
 8000800:	4809      	ldr	r0, [pc, #36]	; (8000828 <MX_I2C4_Init+0x74>)
 8000802:	f001 fd15 	bl	8002230 <HAL_I2CEx_ConfigAnalogFilter>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 800080c:	f000 fbc6 	bl	8000f9c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000810:	2100      	movs	r1, #0
 8000812:	4805      	ldr	r0, [pc, #20]	; (8000828 <MX_I2C4_Init+0x74>)
 8000814:	f001 fd57 	bl	80022c6 <HAL_I2CEx_ConfigDigitalFilter>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 800081e:	f000 fbbd 	bl	8000f9c <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	24000030 	.word	0x24000030
 800082c:	58001c00 	.word	0x58001c00
 8000830:	c010151e 	.word	0xc010151e

08000834 <MX_I2S6_Init>:
  * @brief I2S6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S6_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE END I2S6_Init 0 */

  /* USER CODE BEGIN I2S6_Init 1 */

  /* USER CODE END I2S6_Init 1 */
  hi2s6.Instance = SPI6;
 8000838:	4b16      	ldr	r3, [pc, #88]	; (8000894 <MX_I2S6_Init+0x60>)
 800083a:	4a17      	ldr	r2, [pc, #92]	; (8000898 <MX_I2S6_Init+0x64>)
 800083c:	601a      	str	r2, [r3, #0]
  hi2s6.Init.Mode = I2S_MODE_MASTER_FULLDUPLEX;
 800083e:	4b15      	ldr	r3, [pc, #84]	; (8000894 <MX_I2S6_Init+0x60>)
 8000840:	220a      	movs	r2, #10
 8000842:	605a      	str	r2, [r3, #4]
  hi2s6.Init.Standard = I2S_STANDARD_PHILIPS;
 8000844:	4b13      	ldr	r3, [pc, #76]	; (8000894 <MX_I2S6_Init+0x60>)
 8000846:	2200      	movs	r2, #0
 8000848:	609a      	str	r2, [r3, #8]
  hi2s6.Init.DataFormat = I2S_DATAFORMAT_16B;
 800084a:	4b12      	ldr	r3, [pc, #72]	; (8000894 <MX_I2S6_Init+0x60>)
 800084c:	2200      	movs	r2, #0
 800084e:	60da      	str	r2, [r3, #12]
  hi2s6.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000850:	4b10      	ldr	r3, [pc, #64]	; (8000894 <MX_I2S6_Init+0x60>)
 8000852:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000856:	611a      	str	r2, [r3, #16]
  hi2s6.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8000858:	4b0e      	ldr	r3, [pc, #56]	; (8000894 <MX_I2S6_Init+0x60>)
 800085a:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800085e:	615a      	str	r2, [r3, #20]
  hi2s6.Init.CPOL = I2S_CPOL_LOW;
 8000860:	4b0c      	ldr	r3, [pc, #48]	; (8000894 <MX_I2S6_Init+0x60>)
 8000862:	2200      	movs	r2, #0
 8000864:	619a      	str	r2, [r3, #24]
  hi2s6.Init.FirstBit = I2S_FIRSTBIT_MSB;
 8000866:	4b0b      	ldr	r3, [pc, #44]	; (8000894 <MX_I2S6_Init+0x60>)
 8000868:	2200      	movs	r2, #0
 800086a:	61da      	str	r2, [r3, #28]
  hi2s6.Init.WSInversion = I2S_WS_INVERSION_DISABLE;
 800086c:	4b09      	ldr	r3, [pc, #36]	; (8000894 <MX_I2S6_Init+0x60>)
 800086e:	2200      	movs	r2, #0
 8000870:	621a      	str	r2, [r3, #32]
  hi2s6.Init.Data24BitAlignment = I2S_DATA_24BIT_ALIGNMENT_RIGHT;
 8000872:	4b08      	ldr	r3, [pc, #32]	; (8000894 <MX_I2S6_Init+0x60>)
 8000874:	2200      	movs	r2, #0
 8000876:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s6.Init.MasterKeepIOState = I2S_MASTER_KEEP_IO_STATE_DISABLE;
 8000878:	4b06      	ldr	r3, [pc, #24]	; (8000894 <MX_I2S6_Init+0x60>)
 800087a:	2200      	movs	r2, #0
 800087c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_I2S_Init(&hi2s6) != HAL_OK)
 800087e:	4805      	ldr	r0, [pc, #20]	; (8000894 <MX_I2S6_Init+0x60>)
 8000880:	f001 fd6e 	bl	8002360 <HAL_I2S_Init>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_I2S6_Init+0x5a>
  {
    Error_Handler();
 800088a:	f000 fb87 	bl	8000f9c <Error_Handler>
  }
  /* USER CODE BEGIN I2S6_Init 2 */

  /* USER CODE END I2S6_Init 2 */

}
 800088e:	bf00      	nop
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	24000104 	.word	0x24000104
 8000898:	58001400 	.word	0x58001400

0800089c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b09a      	sub	sp, #104	; 0x68
 80008a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80008a2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80008a6:	2234      	movs	r2, #52	; 0x34
 80008a8:	2100      	movs	r1, #0
 80008aa:	4618      	mov	r0, r3
 80008ac:	f007 fdd4 	bl	8008458 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 80008b0:	463b      	mov	r3, r7
 80008b2:	2234      	movs	r2, #52	; 0x34
 80008b4:	2100      	movs	r1, #0
 80008b6:	4618      	mov	r0, r3
 80008b8:	f007 fdce 	bl	8008458 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80008bc:	4b4e      	ldr	r3, [pc, #312]	; (80009f8 <MX_LTDC_Init+0x15c>)
 80008be:	4a4f      	ldr	r2, [pc, #316]	; (80009fc <MX_LTDC_Init+0x160>)
 80008c0:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80008c2:	4b4d      	ldr	r3, [pc, #308]	; (80009f8 <MX_LTDC_Init+0x15c>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80008c8:	4b4b      	ldr	r3, [pc, #300]	; (80009f8 <MX_LTDC_Init+0x15c>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80008ce:	4b4a      	ldr	r3, [pc, #296]	; (80009f8 <MX_LTDC_Init+0x15c>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80008d4:	4b48      	ldr	r3, [pc, #288]	; (80009f8 <MX_LTDC_Init+0x15c>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 0;
 80008da:	4b47      	ldr	r3, [pc, #284]	; (80009f8 <MX_LTDC_Init+0x15c>)
 80008dc:	2200      	movs	r2, #0
 80008de:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 80008e0:	4b45      	ldr	r3, [pc, #276]	; (80009f8 <MX_LTDC_Init+0x15c>)
 80008e2:	2209      	movs	r2, #9
 80008e4:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 43;
 80008e6:	4b44      	ldr	r3, [pc, #272]	; (80009f8 <MX_LTDC_Init+0x15c>)
 80008e8:	222b      	movs	r2, #43	; 0x2b
 80008ea:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 21;
 80008ec:	4b42      	ldr	r3, [pc, #264]	; (80009f8 <MX_LTDC_Init+0x15c>)
 80008ee:	2215      	movs	r2, #21
 80008f0:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 523;
 80008f2:	4b41      	ldr	r3, [pc, #260]	; (80009f8 <MX_LTDC_Init+0x15c>)
 80008f4:	f240 220b 	movw	r2, #523	; 0x20b
 80008f8:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 293;
 80008fa:	4b3f      	ldr	r3, [pc, #252]	; (80009f8 <MX_LTDC_Init+0x15c>)
 80008fc:	f240 1225 	movw	r2, #293	; 0x125
 8000900:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 531;
 8000902:	4b3d      	ldr	r3, [pc, #244]	; (80009f8 <MX_LTDC_Init+0x15c>)
 8000904:	f240 2213 	movw	r2, #531	; 0x213
 8000908:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 297;
 800090a:	4b3b      	ldr	r3, [pc, #236]	; (80009f8 <MX_LTDC_Init+0x15c>)
 800090c:	f240 1229 	movw	r2, #297	; 0x129
 8000910:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000912:	4b39      	ldr	r3, [pc, #228]	; (80009f8 <MX_LTDC_Init+0x15c>)
 8000914:	2200      	movs	r2, #0
 8000916:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800091a:	4b37      	ldr	r3, [pc, #220]	; (80009f8 <MX_LTDC_Init+0x15c>)
 800091c:	2200      	movs	r2, #0
 800091e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000922:	4b35      	ldr	r3, [pc, #212]	; (80009f8 <MX_LTDC_Init+0x15c>)
 8000924:	2200      	movs	r2, #0
 8000926:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800092a:	4833      	ldr	r0, [pc, #204]	; (80009f8 <MX_LTDC_Init+0x15c>)
 800092c:	f001 fe44 	bl	80025b8 <HAL_LTDC_Init>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8000936:	f000 fb31 	bl	8000f9c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800093a:	2300      	movs	r3, #0
 800093c:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 800093e:	2300      	movs	r3, #0
 8000940:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8000942:	2300      	movs	r3, #0
 8000944:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 8000946:	2300      	movs	r3, #0
 8000948:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800094a:	2300      	movs	r3, #0
 800094c:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 800094e:	2300      	movs	r3, #0
 8000950:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8000952:	2300      	movs	r3, #0
 8000954:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000956:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800095a:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800095c:	2305      	movs	r3, #5
 800095e:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 8000960:	2300      	movs	r3, #0
 8000962:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 8000964:	2300      	movs	r3, #0
 8000966:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 8000968:	2300      	movs	r3, #0
 800096a:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 800096c:	2300      	movs	r3, #0
 800096e:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8000972:	2300      	movs	r3, #0
 8000974:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8000978:	2300      	movs	r3, #0
 800097a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800097e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000982:	2200      	movs	r2, #0
 8000984:	4619      	mov	r1, r3
 8000986:	481c      	ldr	r0, [pc, #112]	; (80009f8 <MX_LTDC_Init+0x15c>)
 8000988:	f001 fee6 	bl	8002758 <HAL_LTDC_ConfigLayer>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 8000992:	f000 fb03 	bl	8000f9c <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8000996:	2300      	movs	r3, #0
 8000998:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 800099a:	2300      	movs	r3, #0
 800099c:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 800099e:	2300      	movs	r3, #0
 80009a0:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 80009a2:	2300      	movs	r3, #0
 80009a4:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80009a6:	2300      	movs	r3, #0
 80009a8:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 80009aa:	2300      	movs	r3, #0
 80009ac:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 80009ae:	2300      	movs	r3, #0
 80009b0:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80009b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009b6:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80009b8:	2305      	movs	r3, #5
 80009ba:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 80009bc:	2300      	movs	r3, #0
 80009be:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 80009c0:	2300      	movs	r3, #0
 80009c2:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 80009c4:	2300      	movs	r3, #0
 80009c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 80009c8:	2300      	movs	r3, #0
 80009ca:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 80009ce:	2300      	movs	r3, #0
 80009d0:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 80009d4:	2300      	movs	r3, #0
 80009d6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 80009da:	463b      	mov	r3, r7
 80009dc:	2201      	movs	r2, #1
 80009de:	4619      	mov	r1, r3
 80009e0:	4805      	ldr	r0, [pc, #20]	; (80009f8 <MX_LTDC_Init+0x15c>)
 80009e2:	f001 feb9 	bl	8002758 <HAL_LTDC_ConfigLayer>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 80009ec:	f000 fad6 	bl	8000f9c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80009f0:	bf00      	nop
 80009f2:	3768      	adds	r7, #104	; 0x68
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	24000234 	.word	0x24000234
 80009fc:	50001000 	.word	0x50001000

08000a00 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b086      	sub	sp, #24
 8000a04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 8000a06:	463b      	mov	r3, r7
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]
 8000a0c:	605a      	str	r2, [r3, #4]
 8000a0e:	609a      	str	r2, [r3, #8]
 8000a10:	60da      	str	r2, [r3, #12]
 8000a12:	611a      	str	r2, [r3, #16]
 8000a14:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 8000a16:	4b2a      	ldr	r3, [pc, #168]	; (8000ac0 <MX_OCTOSPI1_Init+0xc0>)
 8000a18:	4a2a      	ldr	r2, [pc, #168]	; (8000ac4 <MX_OCTOSPI1_Init+0xc4>)
 8000a1a:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 8000a1c:	4b28      	ldr	r3, [pc, #160]	; (8000ac0 <MX_OCTOSPI1_Init+0xc0>)
 8000a1e:	2201      	movs	r2, #1
 8000a20:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8000a22:	4b27      	ldr	r3, [pc, #156]	; (8000ac0 <MX_OCTOSPI1_Init+0xc0>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 8000a28:	4b25      	ldr	r3, [pc, #148]	; (8000ac0 <MX_OCTOSPI1_Init+0xc0>)
 8000a2a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000a2e:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 8000a30:	4b23      	ldr	r3, [pc, #140]	; (8000ac0 <MX_OCTOSPI1_Init+0xc0>)
 8000a32:	2220      	movs	r2, #32
 8000a34:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 8000a36:	4b22      	ldr	r3, [pc, #136]	; (8000ac0 <MX_OCTOSPI1_Init+0xc0>)
 8000a38:	2201      	movs	r2, #1
 8000a3a:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8000a3c:	4b20      	ldr	r3, [pc, #128]	; (8000ac0 <MX_OCTOSPI1_Init+0xc0>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8000a42:	4b1f      	ldr	r3, [pc, #124]	; (8000ac0 <MX_OCTOSPI1_Init+0xc0>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8000a48:	4b1d      	ldr	r3, [pc, #116]	; (8000ac0 <MX_OCTOSPI1_Init+0xc0>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 1;
 8000a4e:	4b1c      	ldr	r3, [pc, #112]	; (8000ac0 <MX_OCTOSPI1_Init+0xc0>)
 8000a50:	2201      	movs	r2, #1
 8000a52:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8000a54:	4b1a      	ldr	r3, [pc, #104]	; (8000ac0 <MX_OCTOSPI1_Init+0xc0>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8000a5a:	4b19      	ldr	r3, [pc, #100]	; (8000ac0 <MX_OCTOSPI1_Init+0xc0>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 8000a60:	4b17      	ldr	r3, [pc, #92]	; (8000ac0 <MX_OCTOSPI1_Init+0xc0>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	631a      	str	r2, [r3, #48]	; 0x30
  hospi1.Init.ClkChipSelectHighTime = 0;
 8000a66:	4b16      	ldr	r3, [pc, #88]	; (8000ac0 <MX_OCTOSPI1_Init+0xc0>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	635a      	str	r2, [r3, #52]	; 0x34
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8000a6c:	4b14      	ldr	r3, [pc, #80]	; (8000ac0 <MX_OCTOSPI1_Init+0xc0>)
 8000a6e:	2208      	movs	r2, #8
 8000a70:	639a      	str	r2, [r3, #56]	; 0x38
  hospi1.Init.MaxTran = 0;
 8000a72:	4b13      	ldr	r3, [pc, #76]	; (8000ac0 <MX_OCTOSPI1_Init+0xc0>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	63da      	str	r2, [r3, #60]	; 0x3c
  hospi1.Init.Refresh = 0;
 8000a78:	4b11      	ldr	r3, [pc, #68]	; (8000ac0 <MX_OCTOSPI1_Init+0xc0>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8000a7e:	4810      	ldr	r0, [pc, #64]	; (8000ac0 <MX_OCTOSPI1_Init+0xc0>)
 8000a80:	f002 f842 	bl	8002b08 <HAL_OSPI_Init>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <MX_OCTOSPI1_Init+0x8e>
  {
    Error_Handler();
 8000a8a:	f000 fa87 	bl	8000f9c <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 1;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	603b      	str	r3, [r7, #0]
  sOspiManagerCfg.DQSPort = 1;
 8000a92:	2301      	movs	r3, #1
 8000a94:	607b      	str	r3, [r7, #4]
  sOspiManagerCfg.NCSPort = 1;
 8000a96:	2301      	movs	r3, #1
 8000a98:	60bb      	str	r3, [r7, #8]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_HIGH;
 8000a9a:	4b0b      	ldr	r3, [pc, #44]	; (8000ac8 <MX_OCTOSPI1_Init+0xc8>)
 8000a9c:	60fb      	str	r3, [r7, #12]
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000a9e:	463b      	mov	r3, r7
 8000aa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4806      	ldr	r0, [pc, #24]	; (8000ac0 <MX_OCTOSPI1_Init+0xc0>)
 8000aa8:	f002 f8fc 	bl	8002ca4 <HAL_OSPIM_Config>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <MX_OCTOSPI1_Init+0xb6>
  {
    Error_Handler();
 8000ab2:	f000 fa73 	bl	8000f9c <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8000ab6:	bf00      	nop
 8000ab8:	3718      	adds	r7, #24
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	24000158 	.word	0x24000158
 8000ac4:	52005000 	.word	0x52005000
 8000ac8:	01000001 	.word	0x01000001

08000acc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000ad0:	4b11      	ldr	r3, [pc, #68]	; (8000b18 <MX_RTC_Init+0x4c>)
 8000ad2:	4a12      	ldr	r2, [pc, #72]	; (8000b1c <MX_RTC_Init+0x50>)
 8000ad4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000ad6:	4b10      	ldr	r3, [pc, #64]	; (8000b18 <MX_RTC_Init+0x4c>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000adc:	4b0e      	ldr	r3, [pc, #56]	; (8000b18 <MX_RTC_Init+0x4c>)
 8000ade:	227f      	movs	r2, #127	; 0x7f
 8000ae0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000ae2:	4b0d      	ldr	r3, [pc, #52]	; (8000b18 <MX_RTC_Init+0x4c>)
 8000ae4:	22ff      	movs	r2, #255	; 0xff
 8000ae6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000ae8:	4b0b      	ldr	r3, [pc, #44]	; (8000b18 <MX_RTC_Init+0x4c>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000aee:	4b0a      	ldr	r3, [pc, #40]	; (8000b18 <MX_RTC_Init+0x4c>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000af4:	4b08      	ldr	r3, [pc, #32]	; (8000b18 <MX_RTC_Init+0x4c>)
 8000af6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000afa:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000afc:	4b06      	ldr	r3, [pc, #24]	; (8000b18 <MX_RTC_Init+0x4c>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000b02:	4805      	ldr	r0, [pc, #20]	; (8000b18 <MX_RTC_Init+0x4c>)
 8000b04:	f005 ffe4 	bl	8006ad0 <HAL_RTC_Init>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8000b0e:	f000 fa45 	bl	8000f9c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000b12:	bf00      	nop
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	2400036c 	.word	0x2400036c
 8000b1c:	58004000 	.word	0x58004000

08000b20 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000b24:	4b27      	ldr	r3, [pc, #156]	; (8000bc4 <MX_SPI2_Init+0xa4>)
 8000b26:	4a28      	ldr	r2, [pc, #160]	; (8000bc8 <MX_SPI2_Init+0xa8>)
 8000b28:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000b2a:	4b26      	ldr	r3, [pc, #152]	; (8000bc4 <MX_SPI2_Init+0xa4>)
 8000b2c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000b30:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000b32:	4b24      	ldr	r3, [pc, #144]	; (8000bc4 <MX_SPI2_Init+0xa4>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000b38:	4b22      	ldr	r3, [pc, #136]	; (8000bc4 <MX_SPI2_Init+0xa4>)
 8000b3a:	2203      	movs	r2, #3
 8000b3c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b3e:	4b21      	ldr	r3, [pc, #132]	; (8000bc4 <MX_SPI2_Init+0xa4>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b44:	4b1f      	ldr	r3, [pc, #124]	; (8000bc4 <MX_SPI2_Init+0xa4>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000b4a:	4b1e      	ldr	r3, [pc, #120]	; (8000bc4 <MX_SPI2_Init+0xa4>)
 8000b4c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000b50:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b52:	4b1c      	ldr	r3, [pc, #112]	; (8000bc4 <MX_SPI2_Init+0xa4>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b58:	4b1a      	ldr	r3, [pc, #104]	; (8000bc4 <MX_SPI2_Init+0xa4>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b5e:	4b19      	ldr	r3, [pc, #100]	; (8000bc4 <MX_SPI2_Init+0xa4>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b64:	4b17      	ldr	r3, [pc, #92]	; (8000bc4 <MX_SPI2_Init+0xa4>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000b6a:	4b16      	ldr	r3, [pc, #88]	; (8000bc4 <MX_SPI2_Init+0xa4>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b70:	4b14      	ldr	r3, [pc, #80]	; (8000bc4 <MX_SPI2_Init+0xa4>)
 8000b72:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b76:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000b78:	4b12      	ldr	r3, [pc, #72]	; (8000bc4 <MX_SPI2_Init+0xa4>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000b7e:	4b11      	ldr	r3, [pc, #68]	; (8000bc4 <MX_SPI2_Init+0xa4>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000b84:	4b0f      	ldr	r3, [pc, #60]	; (8000bc4 <MX_SPI2_Init+0xa4>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000b8a:	4b0e      	ldr	r3, [pc, #56]	; (8000bc4 <MX_SPI2_Init+0xa4>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000b90:	4b0c      	ldr	r3, [pc, #48]	; (8000bc4 <MX_SPI2_Init+0xa4>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000b96:	4b0b      	ldr	r3, [pc, #44]	; (8000bc4 <MX_SPI2_Init+0xa4>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000b9c:	4b09      	ldr	r3, [pc, #36]	; (8000bc4 <MX_SPI2_Init+0xa4>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000ba2:	4b08      	ldr	r3, [pc, #32]	; (8000bc4 <MX_SPI2_Init+0xa4>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000ba8:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <MX_SPI2_Init+0xa4>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000bae:	4805      	ldr	r0, [pc, #20]	; (8000bc4 <MX_SPI2_Init+0xa4>)
 8000bb0:	f006 f8e0 	bl	8006d74 <HAL_SPI_Init>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 8000bba:	f000 f9ef 	bl	8000f9c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000bbe:	bf00      	nop
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	2400007c 	.word	0x2400007c
 8000bc8:	40003800 	.word	0x40003800

08000bcc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000bd0:	4b22      	ldr	r3, [pc, #136]	; (8000c5c <MX_USART1_UART_Init+0x90>)
 8000bd2:	4a23      	ldr	r2, [pc, #140]	; (8000c60 <MX_USART1_UART_Init+0x94>)
 8000bd4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000bd6:	4b21      	ldr	r3, [pc, #132]	; (8000c5c <MX_USART1_UART_Init+0x90>)
 8000bd8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bdc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bde:	4b1f      	ldr	r3, [pc, #124]	; (8000c5c <MX_USART1_UART_Init+0x90>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000be4:	4b1d      	ldr	r3, [pc, #116]	; (8000c5c <MX_USART1_UART_Init+0x90>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bea:	4b1c      	ldr	r3, [pc, #112]	; (8000c5c <MX_USART1_UART_Init+0x90>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bf0:	4b1a      	ldr	r3, [pc, #104]	; (8000c5c <MX_USART1_UART_Init+0x90>)
 8000bf2:	220c      	movs	r2, #12
 8000bf4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bf6:	4b19      	ldr	r3, [pc, #100]	; (8000c5c <MX_USART1_UART_Init+0x90>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bfc:	4b17      	ldr	r3, [pc, #92]	; (8000c5c <MX_USART1_UART_Init+0x90>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c02:	4b16      	ldr	r3, [pc, #88]	; (8000c5c <MX_USART1_UART_Init+0x90>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c08:	4b14      	ldr	r3, [pc, #80]	; (8000c5c <MX_USART1_UART_Init+0x90>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c0e:	4b13      	ldr	r3, [pc, #76]	; (8000c5c <MX_USART1_UART_Init+0x90>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c14:	4811      	ldr	r0, [pc, #68]	; (8000c5c <MX_USART1_UART_Init+0x90>)
 8000c16:	f006 f9ce 	bl	8006fb6 <HAL_UART_Init>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000c20:	f000 f9bc 	bl	8000f9c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c24:	2100      	movs	r1, #0
 8000c26:	480d      	ldr	r0, [pc, #52]	; (8000c5c <MX_USART1_UART_Init+0x90>)
 8000c28:	f007 fa62 	bl	80080f0 <HAL_UARTEx_SetTxFifoThreshold>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000c32:	f000 f9b3 	bl	8000f9c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c36:	2100      	movs	r1, #0
 8000c38:	4808      	ldr	r0, [pc, #32]	; (8000c5c <MX_USART1_UART_Init+0x90>)
 8000c3a:	f007 fa97 	bl	800816c <HAL_UARTEx_SetRxFifoThreshold>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000c44:	f000 f9aa 	bl	8000f9c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000c48:	4804      	ldr	r0, [pc, #16]	; (8000c5c <MX_USART1_UART_Init+0x90>)
 8000c4a:	f007 fa18 	bl	800807e <HAL_UARTEx_DisableFifoMode>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000c54:	f000 f9a2 	bl	8000f9c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c58:	bf00      	nop
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	240002dc 	.word	0x240002dc
 8000c60:	40011000 	.word	0x40011000

08000c64 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b088      	sub	sp, #32
 8000c68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000c6a:	1d3b      	adds	r3, r7, #4
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]
 8000c70:	605a      	str	r2, [r3, #4]
 8000c72:	609a      	str	r2, [r3, #8]
 8000c74:	60da      	str	r2, [r3, #12]
 8000c76:	611a      	str	r2, [r3, #16]
 8000c78:	615a      	str	r2, [r3, #20]
 8000c7a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000c7c:	4b1e      	ldr	r3, [pc, #120]	; (8000cf8 <MX_FMC_Init+0x94>)
 8000c7e:	4a1f      	ldr	r2, [pc, #124]	; (8000cfc <MX_FMC_Init+0x98>)
 8000c80:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000c82:	4b1d      	ldr	r3, [pc, #116]	; (8000cf8 <MX_FMC_Init+0x94>)
 8000c84:	2201      	movs	r2, #1
 8000c86:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000c88:	4b1b      	ldr	r3, [pc, #108]	; (8000cf8 <MX_FMC_Init+0x94>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000c8e:	4b1a      	ldr	r3, [pc, #104]	; (8000cf8 <MX_FMC_Init+0x94>)
 8000c90:	2204      	movs	r2, #4
 8000c92:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000c94:	4b18      	ldr	r3, [pc, #96]	; (8000cf8 <MX_FMC_Init+0x94>)
 8000c96:	2210      	movs	r2, #16
 8000c98:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000c9a:	4b17      	ldr	r3, [pc, #92]	; (8000cf8 <MX_FMC_Init+0x94>)
 8000c9c:	2240      	movs	r2, #64	; 0x40
 8000c9e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8000ca0:	4b15      	ldr	r3, [pc, #84]	; (8000cf8 <MX_FMC_Init+0x94>)
 8000ca2:	2280      	movs	r2, #128	; 0x80
 8000ca4:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000ca6:	4b14      	ldr	r3, [pc, #80]	; (8000cf8 <MX_FMC_Init+0x94>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8000cac:	4b12      	ldr	r3, [pc, #72]	; (8000cf8 <MX_FMC_Init+0x94>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000cb2:	4b11      	ldr	r3, [pc, #68]	; (8000cf8 <MX_FMC_Init+0x94>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000cb8:	4b0f      	ldr	r3, [pc, #60]	; (8000cf8 <MX_FMC_Init+0x94>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8000cbe:	2310      	movs	r3, #16
 8000cc0:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8000cc2:	2310      	movs	r3, #16
 8000cc4:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 8000cc6:	2310      	movs	r3, #16
 8000cc8:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 8000cca:	2310      	movs	r3, #16
 8000ccc:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8000cce:	2310      	movs	r3, #16
 8000cd0:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 8000cd2:	2310      	movs	r3, #16
 8000cd4:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 8000cd6:	2310      	movs	r3, #16
 8000cd8:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000cda:	1d3b      	adds	r3, r7, #4
 8000cdc:	4619      	mov	r1, r3
 8000cde:	4806      	ldr	r0, [pc, #24]	; (8000cf8 <MX_FMC_Init+0x94>)
 8000ce0:	f006 f80c 	bl	8006cfc <HAL_SDRAM_Init>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 8000cea:	f000 f957 	bl	8000f9c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000cee:	bf00      	nop
 8000cf0:	3720      	adds	r7, #32
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	24000394 	.word	0x24000394
 8000cfc:	52004140 	.word	0x52004140

08000d00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b090      	sub	sp, #64	; 0x40
 8000d04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	601a      	str	r2, [r3, #0]
 8000d0e:	605a      	str	r2, [r3, #4]
 8000d10:	609a      	str	r2, [r3, #8]
 8000d12:	60da      	str	r2, [r3, #12]
 8000d14:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000d16:	4b9b      	ldr	r3, [pc, #620]	; (8000f84 <MX_GPIO_Init+0x284>)
 8000d18:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d1c:	4a99      	ldr	r2, [pc, #612]	; (8000f84 <MX_GPIO_Init+0x284>)
 8000d1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d22:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000d26:	4b97      	ldr	r3, [pc, #604]	; (8000f84 <MX_GPIO_Init+0x284>)
 8000d28:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d30:	62bb      	str	r3, [r7, #40]	; 0x28
 8000d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d34:	4b93      	ldr	r3, [pc, #588]	; (8000f84 <MX_GPIO_Init+0x284>)
 8000d36:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d3a:	4a92      	ldr	r2, [pc, #584]	; (8000f84 <MX_GPIO_Init+0x284>)
 8000d3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d40:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000d44:	4b8f      	ldr	r3, [pc, #572]	; (8000f84 <MX_GPIO_Init+0x284>)
 8000d46:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d4e:	627b      	str	r3, [r7, #36]	; 0x24
 8000d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000d52:	4b8c      	ldr	r3, [pc, #560]	; (8000f84 <MX_GPIO_Init+0x284>)
 8000d54:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d58:	4a8a      	ldr	r2, [pc, #552]	; (8000f84 <MX_GPIO_Init+0x284>)
 8000d5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d5e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000d62:	4b88      	ldr	r3, [pc, #544]	; (8000f84 <MX_GPIO_Init+0x284>)
 8000d64:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d6c:	623b      	str	r3, [r7, #32]
 8000d6e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d70:	4b84      	ldr	r3, [pc, #528]	; (8000f84 <MX_GPIO_Init+0x284>)
 8000d72:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d76:	4a83      	ldr	r2, [pc, #524]	; (8000f84 <MX_GPIO_Init+0x284>)
 8000d78:	f043 0308 	orr.w	r3, r3, #8
 8000d7c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000d80:	4b80      	ldr	r3, [pc, #512]	; (8000f84 <MX_GPIO_Init+0x284>)
 8000d82:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d86:	f003 0308 	and.w	r3, r3, #8
 8000d8a:	61fb      	str	r3, [r7, #28]
 8000d8c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d8e:	4b7d      	ldr	r3, [pc, #500]	; (8000f84 <MX_GPIO_Init+0x284>)
 8000d90:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d94:	4a7b      	ldr	r2, [pc, #492]	; (8000f84 <MX_GPIO_Init+0x284>)
 8000d96:	f043 0304 	orr.w	r3, r3, #4
 8000d9a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000d9e:	4b79      	ldr	r3, [pc, #484]	; (8000f84 <MX_GPIO_Init+0x284>)
 8000da0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000da4:	f003 0304 	and.w	r3, r3, #4
 8000da8:	61bb      	str	r3, [r7, #24]
 8000daa:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dac:	4b75      	ldr	r3, [pc, #468]	; (8000f84 <MX_GPIO_Init+0x284>)
 8000dae:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000db2:	4a74      	ldr	r2, [pc, #464]	; (8000f84 <MX_GPIO_Init+0x284>)
 8000db4:	f043 0310 	orr.w	r3, r3, #16
 8000db8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000dbc:	4b71      	ldr	r3, [pc, #452]	; (8000f84 <MX_GPIO_Init+0x284>)
 8000dbe:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000dc2:	f003 0310 	and.w	r3, r3, #16
 8000dc6:	617b      	str	r3, [r7, #20]
 8000dc8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dca:	4b6e      	ldr	r3, [pc, #440]	; (8000f84 <MX_GPIO_Init+0x284>)
 8000dcc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000dd0:	4a6c      	ldr	r2, [pc, #432]	; (8000f84 <MX_GPIO_Init+0x284>)
 8000dd2:	f043 0302 	orr.w	r3, r3, #2
 8000dd6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000dda:	4b6a      	ldr	r3, [pc, #424]	; (8000f84 <MX_GPIO_Init+0x284>)
 8000ddc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000de0:	f003 0302 	and.w	r3, r3, #2
 8000de4:	613b      	str	r3, [r7, #16]
 8000de6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000de8:	4b66      	ldr	r3, [pc, #408]	; (8000f84 <MX_GPIO_Init+0x284>)
 8000dea:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000dee:	4a65      	ldr	r2, [pc, #404]	; (8000f84 <MX_GPIO_Init+0x284>)
 8000df0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000df4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000df8:	4b62      	ldr	r3, [pc, #392]	; (8000f84 <MX_GPIO_Init+0x284>)
 8000dfa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000dfe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e02:	60fb      	str	r3, [r7, #12]
 8000e04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e06:	4b5f      	ldr	r3, [pc, #380]	; (8000f84 <MX_GPIO_Init+0x284>)
 8000e08:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e0c:	4a5d      	ldr	r2, [pc, #372]	; (8000f84 <MX_GPIO_Init+0x284>)
 8000e0e:	f043 0301 	orr.w	r3, r3, #1
 8000e12:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e16:	4b5b      	ldr	r3, [pc, #364]	; (8000f84 <MX_GPIO_Init+0x284>)
 8000e18:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e1c:	f003 0301 	and.w	r3, r3, #1
 8000e20:	60bb      	str	r3, [r7, #8]
 8000e22:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e24:	4b57      	ldr	r3, [pc, #348]	; (8000f84 <MX_GPIO_Init+0x284>)
 8000e26:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e2a:	4a56      	ldr	r2, [pc, #344]	; (8000f84 <MX_GPIO_Init+0x284>)
 8000e2c:	f043 0320 	orr.w	r3, r3, #32
 8000e30:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e34:	4b53      	ldr	r3, [pc, #332]	; (8000f84 <MX_GPIO_Init+0x284>)
 8000e36:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e3a:	f003 0320 	and.w	r3, r3, #32
 8000e3e:	607b      	str	r3, [r7, #4]
 8000e40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e42:	4b50      	ldr	r3, [pc, #320]	; (8000f84 <MX_GPIO_Init+0x284>)
 8000e44:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e48:	4a4e      	ldr	r2, [pc, #312]	; (8000f84 <MX_GPIO_Init+0x284>)
 8000e4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e4e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e52:	4b4c      	ldr	r3, [pc, #304]	; (8000f84 <MX_GPIO_Init+0x284>)
 8000e54:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e5c:	603b      	str	r3, [r7, #0]
 8000e5e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, WIFI_BOOT_Pin|WIFI_WKUP_Pin|WIFI_RST_Pin, GPIO_PIN_RESET);
 8000e60:	2200      	movs	r2, #0
 8000e62:	210e      	movs	r1, #14
 8000e64:	4848      	ldr	r0, [pc, #288]	; (8000f88 <MX_GPIO_Init+0x288>)
 8000e66:	f001 f91f 	bl	80020a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USER_LED1_Pin|USER_LED2_Pin, GPIO_PIN_RESET);
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	f640 0104 	movw	r1, #2052	; 0x804
 8000e70:	4846      	ldr	r0, [pc, #280]	; (8000f8c <MX_GPIO_Init+0x28c>)
 8000e72:	f001 f919 	bl	80020a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8000e76:	2200      	movs	r2, #0
 8000e78:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e7c:	4844      	ldr	r0, [pc, #272]	; (8000f90 <MX_GPIO_Init+0x290>)
 8000e7e:	f001 f913 	bl	80020a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AUDIO_NRST_GPIO_Port, AUDIO_NRST_Pin, GPIO_PIN_SET);
 8000e82:	2201      	movs	r2, #1
 8000e84:	2108      	movs	r1, #8
 8000e86:	4841      	ldr	r0, [pc, #260]	; (8000f8c <MX_GPIO_Init+0x28c>)
 8000e88:	f001 f90e 	bl	80020a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_BL_CTRL_Pin|LCD_ON_OFF_Pin, GPIO_PIN_SET);
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	2106      	movs	r1, #6
 8000e90:	483f      	ldr	r0, [pc, #252]	; (8000f90 <MX_GPIO_Init+0x290>)
 8000e92:	f001 f909 	bl	80020a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : WIFI_GPIO_Pin WIFI_DATRDY_Pin */
  GPIO_InitStruct.Pin = WIFI_GPIO_Pin|WIFI_DATRDY_Pin;
 8000e96:	2330      	movs	r3, #48	; 0x30
 8000e98:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e9a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e9e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000ea4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	4837      	ldr	r0, [pc, #220]	; (8000f88 <MX_GPIO_Init+0x288>)
 8000eac:	f000 ff4c 	bl	8001d48 <HAL_GPIO_Init>

  /*Configure GPIO pins : WIFI_BOOT_Pin WIFI_WKUP_Pin WIFI_RST_Pin */
  GPIO_InitStruct.Pin = WIFI_BOOT_Pin|WIFI_WKUP_Pin|WIFI_RST_Pin;
 8000eb0:	230e      	movs	r3, #14
 8000eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000ec0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	4830      	ldr	r0, [pc, #192]	; (8000f88 <MX_GPIO_Init+0x288>)
 8000ec8:	f000 ff3e 	bl	8001d48 <HAL_GPIO_Init>

  /*Configure GPIO pins : USER_LED1_Pin AUDIO_NRST_Pin USER_LED2_Pin */
  GPIO_InitStruct.Pin = USER_LED1_Pin|AUDIO_NRST_Pin|USER_LED2_Pin;
 8000ecc:	f640 030c 	movw	r3, #2060	; 0x80c
 8000ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eda:	2300      	movs	r3, #0
 8000edc:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ede:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4829      	ldr	r0, [pc, #164]	; (8000f8c <MX_GPIO_Init+0x28c>)
 8000ee6:	f000 ff2f 	bl	8001d48 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000eea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000eee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ef0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ef4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000efa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000efe:	4619      	mov	r1, r3
 8000f00:	4821      	ldr	r0, [pc, #132]	; (8000f88 <MX_GPIO_Init+0x288>)
 8000f02:	f000 ff21 	bl	8001d48 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_NSS_Pin LCD_BL_CTRL_Pin LCD_ON_OFF_Pin */
  GPIO_InitStruct.Pin = SPI2_NSS_Pin|LCD_BL_CTRL_Pin|LCD_ON_OFF_Pin;
 8000f06:	f640 0306 	movw	r3, #2054	; 0x806
 8000f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f10:	2300      	movs	r3, #0
 8000f12:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f14:	2300      	movs	r3, #0
 8000f16:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	481c      	ldr	r0, [pc, #112]	; (8000f90 <MX_GPIO_Init+0x290>)
 8000f20:	f000 ff12 	bl	8001d48 <HAL_GPIO_Init>

  /*Configure GPIO pin : WAKEUP_Pin */
  GPIO_InitStruct.Pin = WAKEUP_Pin;
 8000f24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f28:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f2a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f2e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f30:	2300      	movs	r3, #0
 8000f32:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(WAKEUP_GPIO_Port, &GPIO_InitStruct);
 8000f34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f38:	4619      	mov	r1, r3
 8000f3a:	4816      	ldr	r0, [pc, #88]	; (8000f94 <MX_GPIO_Init+0x294>)
 8000f3c:	f000 ff04 	bl	8001d48 <HAL_GPIO_Init>

  /*Configure GPIO pin : MCO_Pin */
  GPIO_InitStruct.Pin = MCO_Pin;
 8000f40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f44:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f46:	2302      	movs	r3, #2
 8000f48:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000f52:	2300      	movs	r3, #0
 8000f54:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(MCO_GPIO_Port, &GPIO_InitStruct);
 8000f56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	480c      	ldr	r0, [pc, #48]	; (8000f90 <MX_GPIO_Init+0x290>)
 8000f5e:	f000 fef3 	bl	8001d48 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000f62:	2304      	movs	r3, #4
 8000f64:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f66:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f6a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000f70:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f74:	4619      	mov	r1, r3
 8000f76:	4808      	ldr	r0, [pc, #32]	; (8000f98 <MX_GPIO_Init+0x298>)
 8000f78:	f000 fee6 	bl	8001d48 <HAL_GPIO_Init>

}
 8000f7c:	bf00      	nop
 8000f7e:	3740      	adds	r7, #64	; 0x40
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	58024400 	.word	0x58024400
 8000f88:	58022000 	.word	0x58022000
 8000f8c:	58021800 	.word	0x58021800
 8000f90:	58020000 	.word	0x58020000
 8000f94:	58020800 	.word	0x58020800
 8000f98:	58021c00 	.word	0x58021c00

08000f9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fa0:	b672      	cpsid	i
}
 8000fa2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fa4:	e7fe      	b.n	8000fa4 <Error_Handler+0x8>
	...

08000fa8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fae:	4b0a      	ldr	r3, [pc, #40]	; (8000fd8 <HAL_MspInit+0x30>)
 8000fb0:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000fb4:	4a08      	ldr	r2, [pc, #32]	; (8000fd8 <HAL_MspInit+0x30>)
 8000fb6:	f043 0302 	orr.w	r3, r3, #2
 8000fba:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000fbe:	4b06      	ldr	r3, [pc, #24]	; (8000fd8 <HAL_MspInit+0x30>)
 8000fc0:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000fc4:	f003 0302 	and.w	r3, r3, #2
 8000fc8:	607b      	str	r3, [r7, #4]
 8000fca:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fcc:	bf00      	nop
 8000fce:	370c      	adds	r7, #12
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr
 8000fd8:	58024400 	.word	0x58024400

08000fdc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b0b8      	sub	sp, #224	; 0xe0
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
 8000fec:	605a      	str	r2, [r3, #4]
 8000fee:	609a      	str	r2, [r3, #8]
 8000ff0:	60da      	str	r2, [r3, #12]
 8000ff2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ff4:	f107 0314 	add.w	r3, r7, #20
 8000ff8:	22b8      	movs	r2, #184	; 0xb8
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f007 fa2b 	bl	8008458 <memset>
  if(hi2c->Instance==I2C4)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a25      	ldr	r2, [pc, #148]	; (800109c <HAL_I2C_MspInit+0xc0>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d142      	bne.n	8001092 <HAL_I2C_MspInit+0xb6>
  /* USER CODE BEGIN I2C4_MspInit 0 */

  /* USER CODE END I2C4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 800100c:	2310      	movs	r3, #16
 800100e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8001010:	2300      	movs	r3, #0
 8001012:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001016:	f107 0314 	add.w	r3, r7, #20
 800101a:	4618      	mov	r0, r3
 800101c:	f003 fcae 	bl	800497c <HAL_RCCEx_PeriphCLKConfig>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001026:	f7ff ffb9 	bl	8000f9c <Error_Handler>
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800102a:	4b1d      	ldr	r3, [pc, #116]	; (80010a0 <HAL_I2C_MspInit+0xc4>)
 800102c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001030:	4a1b      	ldr	r2, [pc, #108]	; (80010a0 <HAL_I2C_MspInit+0xc4>)
 8001032:	f043 0308 	orr.w	r3, r3, #8
 8001036:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800103a:	4b19      	ldr	r3, [pc, #100]	; (80010a0 <HAL_I2C_MspInit+0xc4>)
 800103c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001040:	f003 0308 	and.w	r3, r3, #8
 8001044:	613b      	str	r3, [r7, #16]
 8001046:	693b      	ldr	r3, [r7, #16]
    /**I2C4 GPIO Configuration
    PD13     ------> I2C4_SDA
    PD12     ------> I2C4_SCL
    */
    GPIO_InitStruct.Pin = I2C4_SDA_Pin|I2C4_SCL_Pin;
 8001048:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800104c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001050:	2312      	movs	r3, #18
 8001052:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001056:	2301      	movs	r3, #1
 8001058:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105c:	2300      	movs	r3, #0
 800105e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001062:	2304      	movs	r3, #4
 8001064:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001068:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800106c:	4619      	mov	r1, r3
 800106e:	480d      	ldr	r0, [pc, #52]	; (80010a4 <HAL_I2C_MspInit+0xc8>)
 8001070:	f000 fe6a 	bl	8001d48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001074:	4b0a      	ldr	r3, [pc, #40]	; (80010a0 <HAL_I2C_MspInit+0xc4>)
 8001076:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800107a:	4a09      	ldr	r2, [pc, #36]	; (80010a0 <HAL_I2C_MspInit+0xc4>)
 800107c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001080:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8001084:	4b06      	ldr	r3, [pc, #24]	; (80010a0 <HAL_I2C_MspInit+0xc4>)
 8001086:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800108a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800108e:	60fb      	str	r3, [r7, #12]
 8001090:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8001092:	bf00      	nop
 8001094:	37e0      	adds	r7, #224	; 0xe0
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	58001c00 	.word	0x58001c00
 80010a0:	58024400 	.word	0x58024400
 80010a4:	58020c00 	.word	0x58020c00

080010a8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b0b8      	sub	sp, #224	; 0xe0
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	605a      	str	r2, [r3, #4]
 80010ba:	609a      	str	r2, [r3, #8]
 80010bc:	60da      	str	r2, [r3, #12]
 80010be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010c0:	f107 0314 	add.w	r3, r7, #20
 80010c4:	22b8      	movs	r2, #184	; 0xb8
 80010c6:	2100      	movs	r1, #0
 80010c8:	4618      	mov	r0, r3
 80010ca:	f007 f9c5 	bl	8008458 <memset>
  if(hi2s->Instance==SPI6)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a37      	ldr	r2, [pc, #220]	; (80011b0 <HAL_I2S_MspInit+0x108>)
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d167      	bne.n	80011a8 <HAL_I2S_MspInit+0x100>
  /* USER CODE BEGIN SPI6_MspInit 0 */

  /* USER CODE END SPI6_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI6;
 80010d8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80010dc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Spi6ClockSelection = RCC_SPI6CLKSOURCE_D3PCLK1;
 80010de:	2300      	movs	r3, #0
 80010e0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010e4:	f107 0314 	add.w	r3, r7, #20
 80010e8:	4618      	mov	r0, r3
 80010ea:	f003 fc47 	bl	800497c <HAL_RCCEx_PeriphCLKConfig>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 80010f4:	f7ff ff52 	bl	8000f9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI6_CLK_ENABLE();
 80010f8:	4b2e      	ldr	r3, [pc, #184]	; (80011b4 <HAL_I2S_MspInit+0x10c>)
 80010fa:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80010fe:	4a2d      	ldr	r2, [pc, #180]	; (80011b4 <HAL_I2S_MspInit+0x10c>)
 8001100:	f043 0320 	orr.w	r3, r3, #32
 8001104:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8001108:	4b2a      	ldr	r3, [pc, #168]	; (80011b4 <HAL_I2S_MspInit+0x10c>)
 800110a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800110e:	f003 0320 	and.w	r3, r3, #32
 8001112:	613b      	str	r3, [r7, #16]
 8001114:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001116:	4b27      	ldr	r3, [pc, #156]	; (80011b4 <HAL_I2S_MspInit+0x10c>)
 8001118:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800111c:	4a25      	ldr	r2, [pc, #148]	; (80011b4 <HAL_I2S_MspInit+0x10c>)
 800111e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001122:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001126:	4b23      	ldr	r3, [pc, #140]	; (80011b4 <HAL_I2S_MspInit+0x10c>)
 8001128:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800112c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001130:	60fb      	str	r3, [r7, #12]
 8001132:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001134:	4b1f      	ldr	r3, [pc, #124]	; (80011b4 <HAL_I2S_MspInit+0x10c>)
 8001136:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800113a:	4a1e      	ldr	r2, [pc, #120]	; (80011b4 <HAL_I2S_MspInit+0x10c>)
 800113c:	f043 0301 	orr.w	r3, r3, #1
 8001140:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001144:	4b1b      	ldr	r3, [pc, #108]	; (80011b4 <HAL_I2S_MspInit+0x10c>)
 8001146:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800114a:	f003 0301 	and.w	r3, r3, #1
 800114e:	60bb      	str	r3, [r7, #8]
 8001150:	68bb      	ldr	r3, [r7, #8]
    PG12     ------> I2S6_SDI
    PG13     ------> I2S6_CK
    PA0     ------> I2S6_WS
    PA3     ------> I2S6_MCK
    */
    GPIO_InitStruct.Pin = I2S6_SDO_Pin|I2S6_SDI_Pin|I2S6_CK_Pin;
 8001152:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001156:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115a:	2302      	movs	r3, #2
 800115c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001160:	2300      	movs	r3, #0
 8001162:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001166:	2300      	movs	r3, #0
 8001168:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
 800116c:	2305      	movs	r3, #5
 800116e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001172:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001176:	4619      	mov	r1, r3
 8001178:	480f      	ldr	r0, [pc, #60]	; (80011b8 <HAL_I2S_MspInit+0x110>)
 800117a:	f000 fde5 	bl	8001d48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S6_WS_Pin|I2S6_MCK_Pin;
 800117e:	2309      	movs	r3, #9
 8001180:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001184:	2302      	movs	r3, #2
 8001186:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118a:	2300      	movs	r3, #0
 800118c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001190:	2300      	movs	r3, #0
 8001192:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
 8001196:	2305      	movs	r3, #5
 8001198:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800119c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80011a0:	4619      	mov	r1, r3
 80011a2:	4806      	ldr	r0, [pc, #24]	; (80011bc <HAL_I2S_MspInit+0x114>)
 80011a4:	f000 fdd0 	bl	8001d48 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI6_MspInit 1 */

  /* USER CODE END SPI6_MspInit 1 */
  }

}
 80011a8:	bf00      	nop
 80011aa:	37e0      	adds	r7, #224	; 0xe0
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	58001400 	.word	0x58001400
 80011b4:	58024400 	.word	0x58024400
 80011b8:	58021800 	.word	0x58021800
 80011bc:	58020000 	.word	0x58020000

080011c0 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b0ba      	sub	sp, #232	; 0xe8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	605a      	str	r2, [r3, #4]
 80011d2:	609a      	str	r2, [r3, #8]
 80011d4:	60da      	str	r2, [r3, #12]
 80011d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011d8:	f107 031c 	add.w	r3, r7, #28
 80011dc:	22b8      	movs	r2, #184	; 0xb8
 80011de:	2100      	movs	r1, #0
 80011e0:	4618      	mov	r0, r3
 80011e2:	f007 f939 	bl	8008458 <memset>
  if(hltdc->Instance==LTDC)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a51      	ldr	r2, [pc, #324]	; (8001330 <HAL_LTDC_MspInit+0x170>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	f040 809b 	bne.w	8001328 <HAL_LTDC_MspInit+0x168>
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80011f2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80011f6:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL3.PLL3M = 24;
 80011f8:	2318      	movs	r3, #24
 80011fa:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3N = 192;
 80011fc:	23c0      	movs	r3, #192	; 0xc0
 80011fe:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3P = 17;
 8001200:	2311      	movs	r3, #17
 8001202:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8001204:	2302      	movs	r3, #2
 8001206:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8001208:	2302      	movs	r3, #2
 800120a:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 800120c:	2300      	movs	r3, #0
 800120e:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8001210:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001214:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8001216:	2300      	movs	r3, #0
 8001218:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800121a:	f107 031c 	add.w	r3, r7, #28
 800121e:	4618      	mov	r0, r3
 8001220:	f003 fbac 	bl	800497c <HAL_RCCEx_PeriphCLKConfig>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <HAL_LTDC_MspInit+0x6e>
    {
      Error_Handler();
 800122a:	f7ff feb7 	bl	8000f9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800122e:	4b41      	ldr	r3, [pc, #260]	; (8001334 <HAL_LTDC_MspInit+0x174>)
 8001230:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8001234:	4a3f      	ldr	r2, [pc, #252]	; (8001334 <HAL_LTDC_MspInit+0x174>)
 8001236:	f043 0308 	orr.w	r3, r3, #8
 800123a:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144
 800123e:	4b3d      	ldr	r3, [pc, #244]	; (8001334 <HAL_LTDC_MspInit+0x174>)
 8001240:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8001244:	f003 0308 	and.w	r3, r3, #8
 8001248:	61bb      	str	r3, [r7, #24]
 800124a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 800124c:	4b39      	ldr	r3, [pc, #228]	; (8001334 <HAL_LTDC_MspInit+0x174>)
 800124e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001252:	4a38      	ldr	r2, [pc, #224]	; (8001334 <HAL_LTDC_MspInit+0x174>)
 8001254:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001258:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800125c:	4b35      	ldr	r3, [pc, #212]	; (8001334 <HAL_LTDC_MspInit+0x174>)
 800125e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001262:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001266:	617b      	str	r3, [r7, #20]
 8001268:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800126a:	4b32      	ldr	r3, [pc, #200]	; (8001334 <HAL_LTDC_MspInit+0x174>)
 800126c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001270:	4a30      	ldr	r2, [pc, #192]	; (8001334 <HAL_LTDC_MspInit+0x174>)
 8001272:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001276:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800127a:	4b2e      	ldr	r3, [pc, #184]	; (8001334 <HAL_LTDC_MspInit+0x174>)
 800127c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001280:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001284:	613b      	str	r3, [r7, #16]
 8001286:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001288:	4b2a      	ldr	r3, [pc, #168]	; (8001334 <HAL_LTDC_MspInit+0x174>)
 800128a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800128e:	4a29      	ldr	r2, [pc, #164]	; (8001334 <HAL_LTDC_MspInit+0x174>)
 8001290:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001294:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001298:	4b26      	ldr	r3, [pc, #152]	; (8001334 <HAL_LTDC_MspInit+0x174>)
 800129a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800129e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012a2:	60fb      	str	r3, [r7, #12]
 80012a4:	68fb      	ldr	r3, [r7, #12]
    PJ1     ------> LTDC_R2
    PJ4     ------> LTDC_R5
    PJ2     ------> LTDC_R3
    PJ3     ------> LTDC_R4
    */
    GPIO_InitStruct.Pin = LCD_B6_Pin|LCD_B7_Pin|LCD_B4_Pin|LCD_B5_Pin
 80012a6:	23ff      	movs	r3, #255	; 0xff
 80012a8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                          |LCD_DE_Pin|LCD_G7_Pin|LCD_G6_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ac:	2302      	movs	r3, #2
 80012ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b2:	2300      	movs	r3, #0
 80012b4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b8:	2300      	movs	r3, #0
 80012ba:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80012be:	230e      	movs	r3, #14
 80012c0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80012c4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80012c8:	4619      	mov	r1, r3
 80012ca:	481b      	ldr	r0, [pc, #108]	; (8001338 <HAL_LTDC_MspInit+0x178>)
 80012cc:	f000 fd3c 	bl	8001d48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B3_Pin|LCD_B2_Pin|LCD_B1_Pin|LCD_B0_Pin
 80012d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012d4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                          |LCD_G4_Pin|LCD_G3_Pin|LCD_G2_Pin|LCD_G1_Pin
                          |LCD_R7_Pin|LCD_G0_Pin|LCD_R1_Pin|LCD_R6_Pin
                          |LCD_R2_Pin|LCD_R5_Pin|LCD_R3_Pin|LCD_R4_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d8:	2302      	movs	r3, #2
 80012da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012de:	2300      	movs	r3, #0
 80012e0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e4:	2300      	movs	r3, #0
 80012e6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80012ea:	230e      	movs	r3, #14
 80012ec:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80012f0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80012f4:	4619      	mov	r1, r3
 80012f6:	4811      	ldr	r0, [pc, #68]	; (800133c <HAL_LTDC_MspInit+0x17c>)
 80012f8:	f000 fd26 	bl	8001d48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_CLK_Pin|LCD_VSYNC_Pin|LCD_R0_Pin;
 80012fc:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001300:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001304:	2302      	movs	r3, #2
 8001306:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130a:	2300      	movs	r3, #0
 800130c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001310:	2300      	movs	r3, #0
 8001312:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001316:	230e      	movs	r3, #14
 8001318:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800131c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001320:	4619      	mov	r1, r3
 8001322:	4807      	ldr	r0, [pc, #28]	; (8001340 <HAL_LTDC_MspInit+0x180>)
 8001324:	f000 fd10 	bl	8001d48 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001328:	bf00      	nop
 800132a:	37e8      	adds	r7, #232	; 0xe8
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	50001000 	.word	0x50001000
 8001334:	58024400 	.word	0x58024400
 8001338:	58022800 	.word	0x58022800
 800133c:	58022400 	.word	0x58022400
 8001340:	58022000 	.word	0x58022000

08001344 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b08e      	sub	sp, #56	; 0x38
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800134c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	605a      	str	r2, [r3, #4]
 8001356:	609a      	str	r2, [r3, #8]
 8001358:	60da      	str	r2, [r3, #12]
 800135a:	611a      	str	r2, [r3, #16]
  if(hospi->Instance==OCTOSPI1)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a68      	ldr	r2, [pc, #416]	; (8001504 <HAL_OSPI_MspInit+0x1c0>)
 8001362:	4293      	cmp	r3, r2
 8001364:	f040 80ca 	bne.w	80014fc <HAL_OSPI_MspInit+0x1b8>
  {
  /* USER CODE BEGIN OCTOSPI1_MspInit 0 */

  /* USER CODE END OCTOSPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 8001368:	4b67      	ldr	r3, [pc, #412]	; (8001508 <HAL_OSPI_MspInit+0x1c4>)
 800136a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800136e:	4a66      	ldr	r2, [pc, #408]	; (8001508 <HAL_OSPI_MspInit+0x1c4>)
 8001370:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001374:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 8001378:	4b63      	ldr	r3, [pc, #396]	; (8001508 <HAL_OSPI_MspInit+0x1c4>)
 800137a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800137e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001382:	623b      	str	r3, [r7, #32]
 8001384:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8001386:	4b60      	ldr	r3, [pc, #384]	; (8001508 <HAL_OSPI_MspInit+0x1c4>)
 8001388:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800138c:	4a5e      	ldr	r2, [pc, #376]	; (8001508 <HAL_OSPI_MspInit+0x1c4>)
 800138e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001392:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 8001396:	4b5c      	ldr	r3, [pc, #368]	; (8001508 <HAL_OSPI_MspInit+0x1c4>)
 8001398:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800139c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013a0:	61fb      	str	r3, [r7, #28]
 80013a2:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80013a4:	4b58      	ldr	r3, [pc, #352]	; (8001508 <HAL_OSPI_MspInit+0x1c4>)
 80013a6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80013aa:	4a57      	ldr	r2, [pc, #348]	; (8001508 <HAL_OSPI_MspInit+0x1c4>)
 80013ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013b0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80013b4:	4b54      	ldr	r3, [pc, #336]	; (8001508 <HAL_OSPI_MspInit+0x1c4>)
 80013b6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80013ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013be:	61bb      	str	r3, [r7, #24]
 80013c0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013c2:	4b51      	ldr	r3, [pc, #324]	; (8001508 <HAL_OSPI_MspInit+0x1c4>)
 80013c4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80013c8:	4a4f      	ldr	r2, [pc, #316]	; (8001508 <HAL_OSPI_MspInit+0x1c4>)
 80013ca:	f043 0308 	orr.w	r3, r3, #8
 80013ce:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80013d2:	4b4d      	ldr	r3, [pc, #308]	; (8001508 <HAL_OSPI_MspInit+0x1c4>)
 80013d4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80013d8:	f003 0308 	and.w	r3, r3, #8
 80013dc:	617b      	str	r3, [r7, #20]
 80013de:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013e0:	4b49      	ldr	r3, [pc, #292]	; (8001508 <HAL_OSPI_MspInit+0x1c4>)
 80013e2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80013e6:	4a48      	ldr	r2, [pc, #288]	; (8001508 <HAL_OSPI_MspInit+0x1c4>)
 80013e8:	f043 0304 	orr.w	r3, r3, #4
 80013ec:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80013f0:	4b45      	ldr	r3, [pc, #276]	; (8001508 <HAL_OSPI_MspInit+0x1c4>)
 80013f2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80013f6:	f003 0304 	and.w	r3, r3, #4
 80013fa:	613b      	str	r3, [r7, #16]
 80013fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80013fe:	4b42      	ldr	r3, [pc, #264]	; (8001508 <HAL_OSPI_MspInit+0x1c4>)
 8001400:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001404:	4a40      	ldr	r2, [pc, #256]	; (8001508 <HAL_OSPI_MspInit+0x1c4>)
 8001406:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800140a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800140e:	4b3e      	ldr	r3, [pc, #248]	; (8001508 <HAL_OSPI_MspInit+0x1c4>)
 8001410:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001414:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001418:	60fb      	str	r3, [r7, #12]
 800141a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800141c:	4b3a      	ldr	r3, [pc, #232]	; (8001508 <HAL_OSPI_MspInit+0x1c4>)
 800141e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001422:	4a39      	ldr	r2, [pc, #228]	; (8001508 <HAL_OSPI_MspInit+0x1c4>)
 8001424:	f043 0302 	orr.w	r3, r3, #2
 8001428:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800142c:	4b36      	ldr	r3, [pc, #216]	; (8001508 <HAL_OSPI_MspInit+0x1c4>)
 800142e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001432:	f003 0302 	and.w	r3, r3, #2
 8001436:	60bb      	str	r3, [r7, #8]
 8001438:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> OCTOSPIM_P1_IO4
    PH3     ------> OCTOSPIM_P1_IO5
    PC5     ------> OCTOSPIM_P1_DQS
    PB2     ------> OCTOSPIM_P1_CLK
    */
    GPIO_InitStruct.Pin = OCSPI1_IO6_Pin;
 800143a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800143e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001440:	2302      	movs	r3, #2
 8001442:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001444:	2300      	movs	r3, #0
 8001446:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001448:	2303      	movs	r3, #3
 800144a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 800144c:	2309      	movs	r3, #9
 800144e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(OCSPI1_IO6_GPIO_Port, &GPIO_InitStruct);
 8001450:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001454:	4619      	mov	r1, r3
 8001456:	482d      	ldr	r0, [pc, #180]	; (800150c <HAL_OSPI_MspInit+0x1c8>)
 8001458:	f000 fc76 	bl	8001d48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCSPI1_IO7_Pin;
 800145c:	2380      	movs	r3, #128	; 0x80
 800145e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001460:	2302      	movs	r3, #2
 8001462:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001464:	2300      	movs	r3, #0
 8001466:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001468:	2303      	movs	r3, #3
 800146a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 800146c:	230a      	movs	r3, #10
 800146e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(OCSPI1_IO7_GPIO_Port, &GPIO_InitStruct);
 8001470:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001474:	4619      	mov	r1, r3
 8001476:	4826      	ldr	r0, [pc, #152]	; (8001510 <HAL_OSPI_MspInit+0x1cc>)
 8001478:	f000 fc66 	bl	8001d48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCSPI1_NCS_Pin;
 800147c:	2340      	movs	r3, #64	; 0x40
 800147e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001480:	2302      	movs	r3, #2
 8001482:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001484:	2300      	movs	r3, #0
 8001486:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001488:	2303      	movs	r3, #3
 800148a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 800148c:	230a      	movs	r3, #10
 800148e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(OCSPI1_NCS_GPIO_Port, &GPIO_InitStruct);
 8001490:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001494:	4619      	mov	r1, r3
 8001496:	481d      	ldr	r0, [pc, #116]	; (800150c <HAL_OSPI_MspInit+0x1c8>)
 8001498:	f000 fc56 	bl	8001d48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCSPI1_IO4_Pin|OCSPI1_DQS_Pin;
 800149c:	2322      	movs	r3, #34	; 0x22
 800149e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a0:	2302      	movs	r3, #2
 80014a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a4:	2300      	movs	r3, #0
 80014a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014a8:	2303      	movs	r3, #3
 80014aa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 80014ac:	230a      	movs	r3, #10
 80014ae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014b4:	4619      	mov	r1, r3
 80014b6:	4817      	ldr	r0, [pc, #92]	; (8001514 <HAL_OSPI_MspInit+0x1d0>)
 80014b8:	f000 fc46 	bl	8001d48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCSPI1_IO5_Pin;
 80014bc:	2308      	movs	r3, #8
 80014be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c0:	2302      	movs	r3, #2
 80014c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c4:	2300      	movs	r3, #0
 80014c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c8:	2303      	movs	r3, #3
 80014ca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 80014cc:	2309      	movs	r3, #9
 80014ce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(OCSPI1_IO5_GPIO_Port, &GPIO_InitStruct);
 80014d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014d4:	4619      	mov	r1, r3
 80014d6:	4810      	ldr	r0, [pc, #64]	; (8001518 <HAL_OSPI_MspInit+0x1d4>)
 80014d8:	f000 fc36 	bl	8001d48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCSPI1_CLK_Pin;
 80014dc:	2304      	movs	r3, #4
 80014de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e0:	2302      	movs	r3, #2
 80014e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e4:	2300      	movs	r3, #0
 80014e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e8:	2303      	movs	r3, #3
 80014ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 80014ec:	2309      	movs	r3, #9
 80014ee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(OCSPI1_CLK_GPIO_Port, &GPIO_InitStruct);
 80014f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014f4:	4619      	mov	r1, r3
 80014f6:	4809      	ldr	r0, [pc, #36]	; (800151c <HAL_OSPI_MspInit+0x1d8>)
 80014f8:	f000 fc26 	bl	8001d48 <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 80014fc:	bf00      	nop
 80014fe:	3738      	adds	r7, #56	; 0x38
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	52005000 	.word	0x52005000
 8001508:	58024400 	.word	0x58024400
 800150c:	58021800 	.word	0x58021800
 8001510:	58020c00 	.word	0x58020c00
 8001514:	58020800 	.word	0x58020800
 8001518:	58021c00 	.word	0x58021c00
 800151c:	58020400 	.word	0x58020400

08001520 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b0b0      	sub	sp, #192	; 0xc0
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001528:	f107 0308 	add.w	r3, r7, #8
 800152c:	22b8      	movs	r2, #184	; 0xb8
 800152e:	2100      	movs	r1, #0
 8001530:	4618      	mov	r0, r3
 8001532:	f006 ff91 	bl	8008458 <memset>
  if(hrtc->Instance==RTC)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a0f      	ldr	r2, [pc, #60]	; (8001578 <HAL_RTC_MspInit+0x58>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d116      	bne.n	800156e <HAL_RTC_MspInit+0x4e>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001540:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001544:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001546:	f44f 7380 	mov.w	r3, #256	; 0x100
 800154a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800154e:	f107 0308 	add.w	r3, r7, #8
 8001552:	4618      	mov	r0, r3
 8001554:	f003 fa12 	bl	800497c <HAL_RCCEx_PeriphCLKConfig>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800155e:	f7ff fd1d 	bl	8000f9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001562:	4b06      	ldr	r3, [pc, #24]	; (800157c <HAL_RTC_MspInit+0x5c>)
 8001564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001566:	4a05      	ldr	r2, [pc, #20]	; (800157c <HAL_RTC_MspInit+0x5c>)
 8001568:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800156c:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800156e:	bf00      	nop
 8001570:	37c0      	adds	r7, #192	; 0xc0
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	58004000 	.word	0x58004000
 800157c:	58024400 	.word	0x58024400

08001580 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b0b8      	sub	sp, #224	; 0xe0
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001588:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]
 8001590:	605a      	str	r2, [r3, #4]
 8001592:	609a      	str	r2, [r3, #8]
 8001594:	60da      	str	r2, [r3, #12]
 8001596:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001598:	f107 0314 	add.w	r3, r7, #20
 800159c:	22b8      	movs	r2, #184	; 0xb8
 800159e:	2100      	movs	r1, #0
 80015a0:	4618      	mov	r0, r3
 80015a2:	f006 ff59 	bl	8008458 <memset>
  if(hspi->Instance==SPI2)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a37      	ldr	r2, [pc, #220]	; (8001688 <HAL_SPI_MspInit+0x108>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d167      	bne.n	8001680 <HAL_SPI_MspInit+0x100>
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80015b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015b4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 80015b6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80015ba:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015bc:	f107 0314 	add.w	r3, r7, #20
 80015c0:	4618      	mov	r0, r3
 80015c2:	f003 f9db 	bl	800497c <HAL_RCCEx_PeriphCLKConfig>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 80015cc:	f7ff fce6 	bl	8000f9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80015d0:	4b2e      	ldr	r3, [pc, #184]	; (800168c <HAL_SPI_MspInit+0x10c>)
 80015d2:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80015d6:	4a2d      	ldr	r2, [pc, #180]	; (800168c <HAL_SPI_MspInit+0x10c>)
 80015d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015dc:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80015e0:	4b2a      	ldr	r3, [pc, #168]	; (800168c <HAL_SPI_MspInit+0x10c>)
 80015e2:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80015e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015ea:	613b      	str	r3, [r7, #16]
 80015ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ee:	4b27      	ldr	r3, [pc, #156]	; (800168c <HAL_SPI_MspInit+0x10c>)
 80015f0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80015f4:	4a25      	ldr	r2, [pc, #148]	; (800168c <HAL_SPI_MspInit+0x10c>)
 80015f6:	f043 0301 	orr.w	r3, r3, #1
 80015fa:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80015fe:	4b23      	ldr	r3, [pc, #140]	; (800168c <HAL_SPI_MspInit+0x10c>)
 8001600:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001604:	f003 0301 	and.w	r3, r3, #1
 8001608:	60fb      	str	r3, [r7, #12]
 800160a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800160c:	4b1f      	ldr	r3, [pc, #124]	; (800168c <HAL_SPI_MspInit+0x10c>)
 800160e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001612:	4a1e      	ldr	r2, [pc, #120]	; (800168c <HAL_SPI_MspInit+0x10c>)
 8001614:	f043 0304 	orr.w	r3, r3, #4
 8001618:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800161c:	4b1b      	ldr	r3, [pc, #108]	; (800168c <HAL_SPI_MspInit+0x10c>)
 800161e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001622:	f003 0304 	and.w	r3, r3, #4
 8001626:	60bb      	str	r3, [r7, #8]
 8001628:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PA12     ------> SPI2_SCK
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = SPI2_SCK_Pin;
 800162a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800162e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001632:	2302      	movs	r3, #2
 8001634:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001638:	2300      	movs	r3, #0
 800163a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800163e:	2300      	movs	r3, #0
 8001640:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001644:	2305      	movs	r3, #5
 8001646:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 800164a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800164e:	4619      	mov	r1, r3
 8001650:	480f      	ldr	r0, [pc, #60]	; (8001690 <HAL_SPI_MspInit+0x110>)
 8001652:	f000 fb79 	bl	8001d48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI2_MISO_Pin|SPI2_MOSI_Pin;
 8001656:	230c      	movs	r3, #12
 8001658:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800165c:	2302      	movs	r3, #2
 800165e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001662:	2300      	movs	r3, #0
 8001664:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001668:	2300      	movs	r3, #0
 800166a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800166e:	2305      	movs	r3, #5
 8001670:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001674:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001678:	4619      	mov	r1, r3
 800167a:	4806      	ldr	r0, [pc, #24]	; (8001694 <HAL_SPI_MspInit+0x114>)
 800167c:	f000 fb64 	bl	8001d48 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001680:	bf00      	nop
 8001682:	37e0      	adds	r7, #224	; 0xe0
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	40003800 	.word	0x40003800
 800168c:	58024400 	.word	0x58024400
 8001690:	58020000 	.word	0x58020000
 8001694:	58020800 	.word	0x58020800

08001698 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b0b8      	sub	sp, #224	; 0xe0
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	605a      	str	r2, [r3, #4]
 80016aa:	609a      	str	r2, [r3, #8]
 80016ac:	60da      	str	r2, [r3, #12]
 80016ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016b0:	f107 0314 	add.w	r3, r7, #20
 80016b4:	22b8      	movs	r2, #184	; 0xb8
 80016b6:	2100      	movs	r1, #0
 80016b8:	4618      	mov	r0, r3
 80016ba:	f006 fecd 	bl	8008458 <memset>
  if(huart->Instance==USART1)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a25      	ldr	r2, [pc, #148]	; (8001758 <HAL_UART_MspInit+0xc0>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d142      	bne.n	800174e <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80016c8:	2301      	movs	r3, #1
 80016ca:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80016cc:	2300      	movs	r3, #0
 80016ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016d2:	f107 0314 	add.w	r3, r7, #20
 80016d6:	4618      	mov	r0, r3
 80016d8:	f003 f950 	bl	800497c <HAL_RCCEx_PeriphCLKConfig>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80016e2:	f7ff fc5b 	bl	8000f9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80016e6:	4b1d      	ldr	r3, [pc, #116]	; (800175c <HAL_UART_MspInit+0xc4>)
 80016e8:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80016ec:	4a1b      	ldr	r2, [pc, #108]	; (800175c <HAL_UART_MspInit+0xc4>)
 80016ee:	f043 0310 	orr.w	r3, r3, #16
 80016f2:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 80016f6:	4b19      	ldr	r3, [pc, #100]	; (800175c <HAL_UART_MspInit+0xc4>)
 80016f8:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80016fc:	f003 0310 	and.w	r3, r3, #16
 8001700:	613b      	str	r3, [r7, #16]
 8001702:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001704:	4b15      	ldr	r3, [pc, #84]	; (800175c <HAL_UART_MspInit+0xc4>)
 8001706:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800170a:	4a14      	ldr	r2, [pc, #80]	; (800175c <HAL_UART_MspInit+0xc4>)
 800170c:	f043 0301 	orr.w	r3, r3, #1
 8001710:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001714:	4b11      	ldr	r3, [pc, #68]	; (800175c <HAL_UART_MspInit+0xc4>)
 8001716:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800171a:	f003 0301 	and.w	r3, r3, #1
 800171e:	60fb      	str	r3, [r7, #12]
 8001720:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin|VCP_TX_Pin;
 8001722:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001726:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172a:	2302      	movs	r3, #2
 800172c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001730:	2300      	movs	r3, #0
 8001732:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001736:	2300      	movs	r3, #0
 8001738:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800173c:	2307      	movs	r3, #7
 800173e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001742:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001746:	4619      	mov	r1, r3
 8001748:	4805      	ldr	r0, [pc, #20]	; (8001760 <HAL_UART_MspInit+0xc8>)
 800174a:	f000 fafd 	bl	8001d48 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800174e:	bf00      	nop
 8001750:	37e0      	adds	r7, #224	; 0xe0
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	40011000 	.word	0x40011000
 800175c:	58024400 	.word	0x58024400
 8001760:	58020000 	.word	0x58020000

08001764 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001764:	b580      	push	{r7, lr}
 8001766:	b086      	sub	sp, #24
 8001768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800176a:	1d3b      	adds	r3, r7, #4
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	605a      	str	r2, [r3, #4]
 8001772:	609a      	str	r2, [r3, #8]
 8001774:	60da      	str	r2, [r3, #12]
 8001776:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001778:	4b34      	ldr	r3, [pc, #208]	; (800184c <HAL_FMC_MspInit+0xe8>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d161      	bne.n	8001844 <HAL_FMC_MspInit+0xe0>
    return;
  }
  FMC_Initialized = 1;
 8001780:	4b32      	ldr	r3, [pc, #200]	; (800184c <HAL_FMC_MspInit+0xe8>)
 8001782:	2201      	movs	r2, #1
 8001784:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001786:	4b32      	ldr	r3, [pc, #200]	; (8001850 <HAL_FMC_MspInit+0xec>)
 8001788:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800178c:	4a30      	ldr	r2, [pc, #192]	; (8001850 <HAL_FMC_MspInit+0xec>)
 800178e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001792:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 8001796:	4b2e      	ldr	r3, [pc, #184]	; (8001850 <HAL_FMC_MspInit+0xec>)
 8001798:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800179c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017a0:	603b      	str	r3, [r7, #0]
 80017a2:	683b      	ldr	r3, [r7, #0]
  PG0   ------> FMC_A10
  PE8   ------> FMC_D5
  PE11   ------> FMC_D8
  PH7   ------> FMC_SDCKE1
  */
  GPIO_InitStruct.Pin = SDNCAS_Pin|SDCLK_Pin|A15_Pin|A14_Pin
 80017a4:	f248 1333 	movw	r3, #33075	; 0x8133
 80017a8:	607b      	str	r3, [r7, #4]
                          |A11_Pin|A10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017aa:	2302      	movs	r3, #2
 80017ac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ae:	2300      	movs	r3, #0
 80017b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017b2:	2303      	movs	r3, #3
 80017b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80017b6:	230c      	movs	r3, #12
 80017b8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017ba:	1d3b      	adds	r3, r7, #4
 80017bc:	4619      	mov	r1, r3
 80017be:	4825      	ldr	r0, [pc, #148]	; (8001854 <HAL_FMC_MspInit+0xf0>)
 80017c0:	f000 fac2 	bl	8001d48 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D3_Pin|D2_Pin|D0_Pin|D1_Pin
 80017c4:	f24c 7303 	movw	r3, #50947	; 0xc703
 80017c8:	607b      	str	r3, [r7, #4]
                          |D13_Pin|D15_Pin|D14_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ca:	2302      	movs	r3, #2
 80017cc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ce:	2300      	movs	r3, #0
 80017d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017d2:	2303      	movs	r3, #3
 80017d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80017d6:	230c      	movs	r3, #12
 80017d8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017da:	1d3b      	adds	r3, r7, #4
 80017dc:	4619      	mov	r1, r3
 80017de:	481e      	ldr	r0, [pc, #120]	; (8001858 <HAL_FMC_MspInit+0xf4>)
 80017e0:	f000 fab2 	bl	8001d48 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_NBL0_Pin|FMC_NBL1_Pin|D9_Pin|D4_Pin
 80017e4:	f64f 7383 	movw	r3, #65411	; 0xff83
 80017e8:	607b      	str	r3, [r7, #4]
                          |D10_Pin|D11_Pin|D7_Pin|D6_Pin
                          |D12_Pin|D5_Pin|D8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ea:	2302      	movs	r3, #2
 80017ec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ee:	2300      	movs	r3, #0
 80017f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017f2:	2303      	movs	r3, #3
 80017f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80017f6:	230c      	movs	r3, #12
 80017f8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017fa:	1d3b      	adds	r3, r7, #4
 80017fc:	4619      	mov	r1, r3
 80017fe:	4817      	ldr	r0, [pc, #92]	; (800185c <HAL_FMC_MspInit+0xf8>)
 8001800:	f000 faa2 	bl	8001d48 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A1_Pin|A0_Pin|A2_Pin|A4_Pin
 8001804:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001808:	607b      	str	r3, [r7, #4]
                          |A3_Pin|A5_Pin|A7_Pin|SDNRAS_Pin
                          |A9_Pin|A8_Pin|A6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800180a:	2302      	movs	r3, #2
 800180c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180e:	2300      	movs	r3, #0
 8001810:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001812:	2303      	movs	r3, #3
 8001814:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001816:	230c      	movs	r3, #12
 8001818:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800181a:	1d3b      	adds	r3, r7, #4
 800181c:	4619      	mov	r1, r3
 800181e:	4810      	ldr	r0, [pc, #64]	; (8001860 <HAL_FMC_MspInit+0xfc>)
 8001820:	f000 fa92 	bl	8001d48 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNE1_Pin|SDNWE_Pin|SDCKE1_Pin;
 8001824:	23e0      	movs	r3, #224	; 0xe0
 8001826:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001828:	2302      	movs	r3, #2
 800182a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182c:	2300      	movs	r3, #0
 800182e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001830:	2303      	movs	r3, #3
 8001832:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001834:	230c      	movs	r3, #12
 8001836:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001838:	1d3b      	adds	r3, r7, #4
 800183a:	4619      	mov	r1, r3
 800183c:	4809      	ldr	r0, [pc, #36]	; (8001864 <HAL_FMC_MspInit+0x100>)
 800183e:	f000 fa83 	bl	8001d48 <HAL_GPIO_Init>
 8001842:	e000      	b.n	8001846 <HAL_FMC_MspInit+0xe2>
    return;
 8001844:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001846:	3718      	adds	r7, #24
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	2400002c 	.word	0x2400002c
 8001850:	58024400 	.word	0x58024400
 8001854:	58021800 	.word	0x58021800
 8001858:	58020c00 	.word	0x58020c00
 800185c:	58021000 	.word	0x58021000
 8001860:	58021400 	.word	0x58021400
 8001864:	58021c00 	.word	0x58021c00

08001868 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001870:	f7ff ff78 	bl	8001764 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001874:	bf00      	nop
 8001876:	3708      	adds	r7, #8
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}

0800187c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001880:	e7fe      	b.n	8001880 <NMI_Handler+0x4>

08001882 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001882:	b480      	push	{r7}
 8001884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001886:	e7fe      	b.n	8001886 <HardFault_Handler+0x4>

08001888 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800188c:	e7fe      	b.n	800188c <MemManage_Handler+0x4>

0800188e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800188e:	b480      	push	{r7}
 8001890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001892:	e7fe      	b.n	8001892 <BusFault_Handler+0x4>

08001894 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001898:	e7fe      	b.n	8001898 <UsageFault_Handler+0x4>

0800189a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800189a:	b480      	push	{r7}
 800189c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800189e:	bf00      	nop
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr

080018a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018ac:	bf00      	nop
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr

080018b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018b6:	b480      	push	{r7}
 80018b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018ba:	bf00      	nop
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr

080018c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018c8:	f000 f916 	bl	8001af8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018cc:	bf00      	nop
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80018d4:	4b32      	ldr	r3, [pc, #200]	; (80019a0 <SystemInit+0xd0>)
 80018d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018da:	4a31      	ldr	r2, [pc, #196]	; (80019a0 <SystemInit+0xd0>)
 80018dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80018e4:	4b2f      	ldr	r3, [pc, #188]	; (80019a4 <SystemInit+0xd4>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 030f 	and.w	r3, r3, #15
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	d807      	bhi.n	8001900 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80018f0:	4b2c      	ldr	r3, [pc, #176]	; (80019a4 <SystemInit+0xd4>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f023 030f 	bic.w	r3, r3, #15
 80018f8:	4a2a      	ldr	r2, [pc, #168]	; (80019a4 <SystemInit+0xd4>)
 80018fa:	f043 0303 	orr.w	r3, r3, #3
 80018fe:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001900:	4b29      	ldr	r3, [pc, #164]	; (80019a8 <SystemInit+0xd8>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a28      	ldr	r2, [pc, #160]	; (80019a8 <SystemInit+0xd8>)
 8001906:	f043 0301 	orr.w	r3, r3, #1
 800190a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800190c:	4b26      	ldr	r3, [pc, #152]	; (80019a8 <SystemInit+0xd8>)
 800190e:	2200      	movs	r2, #0
 8001910:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001912:	4b25      	ldr	r3, [pc, #148]	; (80019a8 <SystemInit+0xd8>)
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	4924      	ldr	r1, [pc, #144]	; (80019a8 <SystemInit+0xd8>)
 8001918:	4b24      	ldr	r3, [pc, #144]	; (80019ac <SystemInit+0xdc>)
 800191a:	4013      	ands	r3, r2
 800191c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800191e:	4b21      	ldr	r3, [pc, #132]	; (80019a4 <SystemInit+0xd4>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 030c 	and.w	r3, r3, #12
 8001926:	2b00      	cmp	r3, #0
 8001928:	d007      	beq.n	800193a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800192a:	4b1e      	ldr	r3, [pc, #120]	; (80019a4 <SystemInit+0xd4>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f023 030f 	bic.w	r3, r3, #15
 8001932:	4a1c      	ldr	r2, [pc, #112]	; (80019a4 <SystemInit+0xd4>)
 8001934:	f043 0303 	orr.w	r3, r3, #3
 8001938:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 800193a:	4b1b      	ldr	r3, [pc, #108]	; (80019a8 <SystemInit+0xd8>)
 800193c:	2200      	movs	r2, #0
 800193e:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001940:	4b19      	ldr	r3, [pc, #100]	; (80019a8 <SystemInit+0xd8>)
 8001942:	2200      	movs	r2, #0
 8001944:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8001946:	4b18      	ldr	r3, [pc, #96]	; (80019a8 <SystemInit+0xd8>)
 8001948:	2200      	movs	r2, #0
 800194a:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800194c:	4b16      	ldr	r3, [pc, #88]	; (80019a8 <SystemInit+0xd8>)
 800194e:	4a18      	ldr	r2, [pc, #96]	; (80019b0 <SystemInit+0xe0>)
 8001950:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001952:	4b15      	ldr	r3, [pc, #84]	; (80019a8 <SystemInit+0xd8>)
 8001954:	4a17      	ldr	r2, [pc, #92]	; (80019b4 <SystemInit+0xe4>)
 8001956:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001958:	4b13      	ldr	r3, [pc, #76]	; (80019a8 <SystemInit+0xd8>)
 800195a:	4a17      	ldr	r2, [pc, #92]	; (80019b8 <SystemInit+0xe8>)
 800195c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800195e:	4b12      	ldr	r3, [pc, #72]	; (80019a8 <SystemInit+0xd8>)
 8001960:	2200      	movs	r2, #0
 8001962:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001964:	4b10      	ldr	r3, [pc, #64]	; (80019a8 <SystemInit+0xd8>)
 8001966:	4a14      	ldr	r2, [pc, #80]	; (80019b8 <SystemInit+0xe8>)
 8001968:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800196a:	4b0f      	ldr	r3, [pc, #60]	; (80019a8 <SystemInit+0xd8>)
 800196c:	2200      	movs	r2, #0
 800196e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001970:	4b0d      	ldr	r3, [pc, #52]	; (80019a8 <SystemInit+0xd8>)
 8001972:	4a11      	ldr	r2, [pc, #68]	; (80019b8 <SystemInit+0xe8>)
 8001974:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001976:	4b0c      	ldr	r3, [pc, #48]	; (80019a8 <SystemInit+0xd8>)
 8001978:	2200      	movs	r2, #0
 800197a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800197c:	4b0a      	ldr	r3, [pc, #40]	; (80019a8 <SystemInit+0xd8>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a09      	ldr	r2, [pc, #36]	; (80019a8 <SystemInit+0xd8>)
 8001982:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001986:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001988:	4b07      	ldr	r3, [pc, #28]	; (80019a8 <SystemInit+0xd8>)
 800198a:	2200      	movs	r2, #0
 800198c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800198e:	4b0b      	ldr	r3, [pc, #44]	; (80019bc <SystemInit+0xec>)
 8001990:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001994:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001996:	bf00      	nop
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr
 80019a0:	e000ed00 	.word	0xe000ed00
 80019a4:	52002000 	.word	0x52002000
 80019a8:	58024400 	.word	0x58024400
 80019ac:	eaf6ed7f 	.word	0xeaf6ed7f
 80019b0:	02020200 	.word	0x02020200
 80019b4:	01ff0000 	.word	0x01ff0000
 80019b8:	01010280 	.word	0x01010280
 80019bc:	52004000 	.word	0x52004000

080019c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80019c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019f8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80019c4:	f7ff ff84 	bl	80018d0 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019c8:	480c      	ldr	r0, [pc, #48]	; (80019fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80019ca:	490d      	ldr	r1, [pc, #52]	; (8001a00 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80019cc:	4a0d      	ldr	r2, [pc, #52]	; (8001a04 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80019ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019d0:	e002      	b.n	80019d8 <LoopCopyDataInit>

080019d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019d6:	3304      	adds	r3, #4

080019d8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 80019d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019dc:	d3f9      	bcc.n	80019d2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019de:	4a0a      	ldr	r2, [pc, #40]	; (8001a08 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80019e0:	4c0a      	ldr	r4, [pc, #40]	; (8001a0c <LoopFillZerobss+0x22>)
  movs r3, #0
 80019e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019e4:	e001      	b.n	80019ea <LoopFillZerobss>

080019e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019e8:	3204      	adds	r2, #4

080019ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019ec:	d3fb      	bcc.n	80019e6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80019ee:	f006 fd0f 	bl	8008410 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019f2:	f7fe fdf7 	bl	80005e4 <main>
  bx  lr
 80019f6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80019f8:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 80019fc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001a00:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001a04:	080084c8 	.word	0x080084c8
  ldr r2, =_sbss
 8001a08:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8001a0c:	240003cc 	.word	0x240003cc

08001a10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a10:	e7fe      	b.n	8001a10 <ADC_IRQHandler>
	...

08001a14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a1a:	2003      	movs	r0, #3
 8001a1c:	f000 f962 	bl	8001ce4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001a20:	f002 fdd6 	bl	80045d0 <HAL_RCC_GetSysClockFreq>
 8001a24:	4602      	mov	r2, r0
 8001a26:	4b15      	ldr	r3, [pc, #84]	; (8001a7c <HAL_Init+0x68>)
 8001a28:	699b      	ldr	r3, [r3, #24]
 8001a2a:	0a1b      	lsrs	r3, r3, #8
 8001a2c:	f003 030f 	and.w	r3, r3, #15
 8001a30:	4913      	ldr	r1, [pc, #76]	; (8001a80 <HAL_Init+0x6c>)
 8001a32:	5ccb      	ldrb	r3, [r1, r3]
 8001a34:	f003 031f 	and.w	r3, r3, #31
 8001a38:	fa22 f303 	lsr.w	r3, r2, r3
 8001a3c:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001a3e:	4b0f      	ldr	r3, [pc, #60]	; (8001a7c <HAL_Init+0x68>)
 8001a40:	699b      	ldr	r3, [r3, #24]
 8001a42:	f003 030f 	and.w	r3, r3, #15
 8001a46:	4a0e      	ldr	r2, [pc, #56]	; (8001a80 <HAL_Init+0x6c>)
 8001a48:	5cd3      	ldrb	r3, [r2, r3]
 8001a4a:	f003 031f 	and.w	r3, r3, #31
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	fa22 f303 	lsr.w	r3, r2, r3
 8001a54:	4a0b      	ldr	r2, [pc, #44]	; (8001a84 <HAL_Init+0x70>)
 8001a56:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001a58:	4a0b      	ldr	r2, [pc, #44]	; (8001a88 <HAL_Init+0x74>)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a5e:	2000      	movs	r0, #0
 8001a60:	f000 f814 	bl	8001a8c <HAL_InitTick>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e002      	b.n	8001a74 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001a6e:	f7ff fa9b 	bl	8000fa8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a72:	2300      	movs	r3, #0
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3708      	adds	r7, #8
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	58024400 	.word	0x58024400
 8001a80:	08008480 	.word	0x08008480
 8001a84:	24000004 	.word	0x24000004
 8001a88:	24000000 	.word	0x24000000

08001a8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001a94:	4b15      	ldr	r3, [pc, #84]	; (8001aec <HAL_InitTick+0x60>)
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d101      	bne.n	8001aa0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e021      	b.n	8001ae4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001aa0:	4b13      	ldr	r3, [pc, #76]	; (8001af0 <HAL_InitTick+0x64>)
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	4b11      	ldr	r3, [pc, #68]	; (8001aec <HAL_InitTick+0x60>)
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001aae:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ab2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f000 f939 	bl	8001d2e <HAL_SYSTICK_Config>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e00e      	b.n	8001ae4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2b0f      	cmp	r3, #15
 8001aca:	d80a      	bhi.n	8001ae2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001acc:	2200      	movs	r2, #0
 8001ace:	6879      	ldr	r1, [r7, #4]
 8001ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ad4:	f000 f911 	bl	8001cfa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ad8:	4a06      	ldr	r2, [pc, #24]	; (8001af4 <HAL_InitTick+0x68>)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	e000      	b.n	8001ae4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3708      	adds	r7, #8
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	2400000c 	.word	0x2400000c
 8001af0:	24000000 	.word	0x24000000
 8001af4:	24000008 	.word	0x24000008

08001af8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001afc:	4b06      	ldr	r3, [pc, #24]	; (8001b18 <HAL_IncTick+0x20>)
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	461a      	mov	r2, r3
 8001b02:	4b06      	ldr	r3, [pc, #24]	; (8001b1c <HAL_IncTick+0x24>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4413      	add	r3, r2
 8001b08:	4a04      	ldr	r2, [pc, #16]	; (8001b1c <HAL_IncTick+0x24>)
 8001b0a:	6013      	str	r3, [r2, #0]
}
 8001b0c:	bf00      	nop
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	2400000c 	.word	0x2400000c
 8001b1c:	240003c8 	.word	0x240003c8

08001b20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  return uwTick;
 8001b24:	4b03      	ldr	r3, [pc, #12]	; (8001b34 <HAL_GetTick+0x14>)
 8001b26:	681b      	ldr	r3, [r3, #0]
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	240003c8 	.word	0x240003c8

08001b38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b084      	sub	sp, #16
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b40:	f7ff ffee 	bl	8001b20 <HAL_GetTick>
 8001b44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b50:	d005      	beq.n	8001b5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b52:	4b0a      	ldr	r3, [pc, #40]	; (8001b7c <HAL_Delay+0x44>)
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	461a      	mov	r2, r3
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	4413      	add	r3, r2
 8001b5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b5e:	bf00      	nop
 8001b60:	f7ff ffde 	bl	8001b20 <HAL_GetTick>
 8001b64:	4602      	mov	r2, r0
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	68fa      	ldr	r2, [r7, #12]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d8f7      	bhi.n	8001b60 <HAL_Delay+0x28>
  {
  }
}
 8001b70:	bf00      	nop
 8001b72:	bf00      	nop
 8001b74:	3710      	adds	r7, #16
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	2400000c 	.word	0x2400000c

08001b80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b085      	sub	sp, #20
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	f003 0307 	and.w	r3, r3, #7
 8001b8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b90:	4b0b      	ldr	r3, [pc, #44]	; (8001bc0 <__NVIC_SetPriorityGrouping+0x40>)
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b96:	68ba      	ldr	r2, [r7, #8]
 8001b98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001ba8:	4b06      	ldr	r3, [pc, #24]	; (8001bc4 <__NVIC_SetPriorityGrouping+0x44>)
 8001baa:	4313      	orrs	r3, r2
 8001bac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bae:	4a04      	ldr	r2, [pc, #16]	; (8001bc0 <__NVIC_SetPriorityGrouping+0x40>)
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	60d3      	str	r3, [r2, #12]
}
 8001bb4:	bf00      	nop
 8001bb6:	3714      	adds	r7, #20
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr
 8001bc0:	e000ed00 	.word	0xe000ed00
 8001bc4:	05fa0000 	.word	0x05fa0000

08001bc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bcc:	4b04      	ldr	r3, [pc, #16]	; (8001be0 <__NVIC_GetPriorityGrouping+0x18>)
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	0a1b      	lsrs	r3, r3, #8
 8001bd2:	f003 0307 	and.w	r3, r3, #7
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr
 8001be0:	e000ed00 	.word	0xe000ed00

08001be4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	4603      	mov	r3, r0
 8001bec:	6039      	str	r1, [r7, #0]
 8001bee:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001bf0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	db0a      	blt.n	8001c0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	b2da      	uxtb	r2, r3
 8001bfc:	490c      	ldr	r1, [pc, #48]	; (8001c30 <__NVIC_SetPriority+0x4c>)
 8001bfe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c02:	0112      	lsls	r2, r2, #4
 8001c04:	b2d2      	uxtb	r2, r2
 8001c06:	440b      	add	r3, r1
 8001c08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c0c:	e00a      	b.n	8001c24 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	b2da      	uxtb	r2, r3
 8001c12:	4908      	ldr	r1, [pc, #32]	; (8001c34 <__NVIC_SetPriority+0x50>)
 8001c14:	88fb      	ldrh	r3, [r7, #6]
 8001c16:	f003 030f 	and.w	r3, r3, #15
 8001c1a:	3b04      	subs	r3, #4
 8001c1c:	0112      	lsls	r2, r2, #4
 8001c1e:	b2d2      	uxtb	r2, r2
 8001c20:	440b      	add	r3, r1
 8001c22:	761a      	strb	r2, [r3, #24]
}
 8001c24:	bf00      	nop
 8001c26:	370c      	adds	r7, #12
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr
 8001c30:	e000e100 	.word	0xe000e100
 8001c34:	e000ed00 	.word	0xe000ed00

08001c38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b089      	sub	sp, #36	; 0x24
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	60f8      	str	r0, [r7, #12]
 8001c40:	60b9      	str	r1, [r7, #8]
 8001c42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	f003 0307 	and.w	r3, r3, #7
 8001c4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c4c:	69fb      	ldr	r3, [r7, #28]
 8001c4e:	f1c3 0307 	rsb	r3, r3, #7
 8001c52:	2b04      	cmp	r3, #4
 8001c54:	bf28      	it	cs
 8001c56:	2304      	movcs	r3, #4
 8001c58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	3304      	adds	r3, #4
 8001c5e:	2b06      	cmp	r3, #6
 8001c60:	d902      	bls.n	8001c68 <NVIC_EncodePriority+0x30>
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	3b03      	subs	r3, #3
 8001c66:	e000      	b.n	8001c6a <NVIC_EncodePriority+0x32>
 8001c68:	2300      	movs	r3, #0
 8001c6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c6c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c70:	69bb      	ldr	r3, [r7, #24]
 8001c72:	fa02 f303 	lsl.w	r3, r2, r3
 8001c76:	43da      	mvns	r2, r3
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	401a      	ands	r2, r3
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c80:	f04f 31ff 	mov.w	r1, #4294967295
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	fa01 f303 	lsl.w	r3, r1, r3
 8001c8a:	43d9      	mvns	r1, r3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c90:	4313      	orrs	r3, r2
         );
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3724      	adds	r7, #36	; 0x24
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
	...

08001ca0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	3b01      	subs	r3, #1
 8001cac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cb0:	d301      	bcc.n	8001cb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e00f      	b.n	8001cd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cb6:	4a0a      	ldr	r2, [pc, #40]	; (8001ce0 <SysTick_Config+0x40>)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	3b01      	subs	r3, #1
 8001cbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cbe:	210f      	movs	r1, #15
 8001cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8001cc4:	f7ff ff8e 	bl	8001be4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cc8:	4b05      	ldr	r3, [pc, #20]	; (8001ce0 <SysTick_Config+0x40>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cce:	4b04      	ldr	r3, [pc, #16]	; (8001ce0 <SysTick_Config+0x40>)
 8001cd0:	2207      	movs	r2, #7
 8001cd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cd4:	2300      	movs	r3, #0
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3708      	adds	r7, #8
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	e000e010 	.word	0xe000e010

08001ce4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f7ff ff47 	bl	8001b80 <__NVIC_SetPriorityGrouping>
}
 8001cf2:	bf00      	nop
 8001cf4:	3708      	adds	r7, #8
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}

08001cfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	b086      	sub	sp, #24
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	4603      	mov	r3, r0
 8001d02:	60b9      	str	r1, [r7, #8]
 8001d04:	607a      	str	r2, [r7, #4]
 8001d06:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d08:	f7ff ff5e 	bl	8001bc8 <__NVIC_GetPriorityGrouping>
 8001d0c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	68b9      	ldr	r1, [r7, #8]
 8001d12:	6978      	ldr	r0, [r7, #20]
 8001d14:	f7ff ff90 	bl	8001c38 <NVIC_EncodePriority>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001d1e:	4611      	mov	r1, r2
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7ff ff5f 	bl	8001be4 <__NVIC_SetPriority>
}
 8001d26:	bf00      	nop
 8001d28:	3718      	adds	r7, #24
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b082      	sub	sp, #8
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f7ff ffb2 	bl	8001ca0 <SysTick_Config>
 8001d3c:	4603      	mov	r3, r0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
	...

08001d48 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b089      	sub	sp, #36	; 0x24
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001d52:	2300      	movs	r3, #0
 8001d54:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001d56:	4b89      	ldr	r3, [pc, #548]	; (8001f7c <HAL_GPIO_Init+0x234>)
 8001d58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001d5a:	e194      	b.n	8002086 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	2101      	movs	r1, #1
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	fa01 f303 	lsl.w	r3, r1, r3
 8001d68:	4013      	ands	r3, r2
 8001d6a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	f000 8186 	beq.w	8002080 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f003 0303 	and.w	r3, r3, #3
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d005      	beq.n	8001d8c <HAL_GPIO_Init+0x44>
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f003 0303 	and.w	r3, r3, #3
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d130      	bne.n	8001dee <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	005b      	lsls	r3, r3, #1
 8001d96:	2203      	movs	r2, #3
 8001d98:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9c:	43db      	mvns	r3, r3
 8001d9e:	69ba      	ldr	r2, [r7, #24]
 8001da0:	4013      	ands	r3, r2
 8001da2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	68da      	ldr	r2, [r3, #12]
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	fa02 f303 	lsl.w	r3, r2, r3
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dca:	43db      	mvns	r3, r3
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	4013      	ands	r3, r2
 8001dd0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	091b      	lsrs	r3, r3, #4
 8001dd8:	f003 0201 	and.w	r2, r3, #1
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	fa02 f303 	lsl.w	r3, r2, r3
 8001de2:	69ba      	ldr	r2, [r7, #24]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	69ba      	ldr	r2, [r7, #24]
 8001dec:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f003 0303 	and.w	r3, r3, #3
 8001df6:	2b03      	cmp	r3, #3
 8001df8:	d017      	beq.n	8001e2a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	68db      	ldr	r3, [r3, #12]
 8001dfe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	005b      	lsls	r3, r3, #1
 8001e04:	2203      	movs	r2, #3
 8001e06:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0a:	43db      	mvns	r3, r3
 8001e0c:	69ba      	ldr	r2, [r7, #24]
 8001e0e:	4013      	ands	r3, r2
 8001e10:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	689a      	ldr	r2, [r3, #8]
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	005b      	lsls	r3, r3, #1
 8001e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1e:	69ba      	ldr	r2, [r7, #24]
 8001e20:	4313      	orrs	r3, r2
 8001e22:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	69ba      	ldr	r2, [r7, #24]
 8001e28:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	f003 0303 	and.w	r3, r3, #3
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d123      	bne.n	8001e7e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	08da      	lsrs	r2, r3, #3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	3208      	adds	r2, #8
 8001e3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	f003 0307 	and.w	r3, r3, #7
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	220f      	movs	r2, #15
 8001e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e52:	43db      	mvns	r3, r3
 8001e54:	69ba      	ldr	r2, [r7, #24]
 8001e56:	4013      	ands	r3, r2
 8001e58:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	691a      	ldr	r2, [r3, #16]
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	f003 0307 	and.w	r3, r3, #7
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6a:	69ba      	ldr	r2, [r7, #24]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	08da      	lsrs	r2, r3, #3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	3208      	adds	r2, #8
 8001e78:	69b9      	ldr	r1, [r7, #24]
 8001e7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	005b      	lsls	r3, r3, #1
 8001e88:	2203      	movs	r2, #3
 8001e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8e:	43db      	mvns	r3, r3
 8001e90:	69ba      	ldr	r2, [r7, #24]
 8001e92:	4013      	ands	r3, r2
 8001e94:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f003 0203 	and.w	r2, r3, #3
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	005b      	lsls	r3, r3, #1
 8001ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea6:	69ba      	ldr	r2, [r7, #24]
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	69ba      	ldr	r2, [r7, #24]
 8001eb0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	f000 80e0 	beq.w	8002080 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ec0:	4b2f      	ldr	r3, [pc, #188]	; (8001f80 <HAL_GPIO_Init+0x238>)
 8001ec2:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001ec6:	4a2e      	ldr	r2, [pc, #184]	; (8001f80 <HAL_GPIO_Init+0x238>)
 8001ec8:	f043 0302 	orr.w	r3, r3, #2
 8001ecc:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8001ed0:	4b2b      	ldr	r3, [pc, #172]	; (8001f80 <HAL_GPIO_Init+0x238>)
 8001ed2:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001ed6:	f003 0302 	and.w	r3, r3, #2
 8001eda:	60fb      	str	r3, [r7, #12]
 8001edc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ede:	4a29      	ldr	r2, [pc, #164]	; (8001f84 <HAL_GPIO_Init+0x23c>)
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	089b      	lsrs	r3, r3, #2
 8001ee4:	3302      	adds	r3, #2
 8001ee6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	f003 0303 	and.w	r3, r3, #3
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	220f      	movs	r2, #15
 8001ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8001efa:	43db      	mvns	r3, r3
 8001efc:	69ba      	ldr	r2, [r7, #24]
 8001efe:	4013      	ands	r3, r2
 8001f00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a20      	ldr	r2, [pc, #128]	; (8001f88 <HAL_GPIO_Init+0x240>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d052      	beq.n	8001fb0 <HAL_GPIO_Init+0x268>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4a1f      	ldr	r2, [pc, #124]	; (8001f8c <HAL_GPIO_Init+0x244>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d031      	beq.n	8001f76 <HAL_GPIO_Init+0x22e>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a1e      	ldr	r2, [pc, #120]	; (8001f90 <HAL_GPIO_Init+0x248>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d02b      	beq.n	8001f72 <HAL_GPIO_Init+0x22a>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a1d      	ldr	r2, [pc, #116]	; (8001f94 <HAL_GPIO_Init+0x24c>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d025      	beq.n	8001f6e <HAL_GPIO_Init+0x226>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a1c      	ldr	r2, [pc, #112]	; (8001f98 <HAL_GPIO_Init+0x250>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d01f      	beq.n	8001f6a <HAL_GPIO_Init+0x222>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a1b      	ldr	r2, [pc, #108]	; (8001f9c <HAL_GPIO_Init+0x254>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d019      	beq.n	8001f66 <HAL_GPIO_Init+0x21e>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a1a      	ldr	r2, [pc, #104]	; (8001fa0 <HAL_GPIO_Init+0x258>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d013      	beq.n	8001f62 <HAL_GPIO_Init+0x21a>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a19      	ldr	r2, [pc, #100]	; (8001fa4 <HAL_GPIO_Init+0x25c>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d00d      	beq.n	8001f5e <HAL_GPIO_Init+0x216>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a18      	ldr	r2, [pc, #96]	; (8001fa8 <HAL_GPIO_Init+0x260>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d007      	beq.n	8001f5a <HAL_GPIO_Init+0x212>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a17      	ldr	r2, [pc, #92]	; (8001fac <HAL_GPIO_Init+0x264>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d101      	bne.n	8001f56 <HAL_GPIO_Init+0x20e>
 8001f52:	2309      	movs	r3, #9
 8001f54:	e02d      	b.n	8001fb2 <HAL_GPIO_Init+0x26a>
 8001f56:	230a      	movs	r3, #10
 8001f58:	e02b      	b.n	8001fb2 <HAL_GPIO_Init+0x26a>
 8001f5a:	2308      	movs	r3, #8
 8001f5c:	e029      	b.n	8001fb2 <HAL_GPIO_Init+0x26a>
 8001f5e:	2307      	movs	r3, #7
 8001f60:	e027      	b.n	8001fb2 <HAL_GPIO_Init+0x26a>
 8001f62:	2306      	movs	r3, #6
 8001f64:	e025      	b.n	8001fb2 <HAL_GPIO_Init+0x26a>
 8001f66:	2305      	movs	r3, #5
 8001f68:	e023      	b.n	8001fb2 <HAL_GPIO_Init+0x26a>
 8001f6a:	2304      	movs	r3, #4
 8001f6c:	e021      	b.n	8001fb2 <HAL_GPIO_Init+0x26a>
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e01f      	b.n	8001fb2 <HAL_GPIO_Init+0x26a>
 8001f72:	2302      	movs	r3, #2
 8001f74:	e01d      	b.n	8001fb2 <HAL_GPIO_Init+0x26a>
 8001f76:	2301      	movs	r3, #1
 8001f78:	e01b      	b.n	8001fb2 <HAL_GPIO_Init+0x26a>
 8001f7a:	bf00      	nop
 8001f7c:	58000080 	.word	0x58000080
 8001f80:	58024400 	.word	0x58024400
 8001f84:	58000400 	.word	0x58000400
 8001f88:	58020000 	.word	0x58020000
 8001f8c:	58020400 	.word	0x58020400
 8001f90:	58020800 	.word	0x58020800
 8001f94:	58020c00 	.word	0x58020c00
 8001f98:	58021000 	.word	0x58021000
 8001f9c:	58021400 	.word	0x58021400
 8001fa0:	58021800 	.word	0x58021800
 8001fa4:	58021c00 	.word	0x58021c00
 8001fa8:	58022000 	.word	0x58022000
 8001fac:	58022400 	.word	0x58022400
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	69fa      	ldr	r2, [r7, #28]
 8001fb4:	f002 0203 	and.w	r2, r2, #3
 8001fb8:	0092      	lsls	r2, r2, #2
 8001fba:	4093      	lsls	r3, r2
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fc2:	4938      	ldr	r1, [pc, #224]	; (80020a4 <HAL_GPIO_Init+0x35c>)
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	089b      	lsrs	r3, r3, #2
 8001fc8:	3302      	adds	r3, #2
 8001fca:	69ba      	ldr	r2, [r7, #24]
 8001fcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001fd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	43db      	mvns	r3, r3
 8001fdc:	69ba      	ldr	r2, [r7, #24]
 8001fde:	4013      	ands	r3, r2
 8001fe0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d003      	beq.n	8001ff6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001fee:	69ba      	ldr	r2, [r7, #24]
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001ff6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ffa:	69bb      	ldr	r3, [r7, #24]
 8001ffc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001ffe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	43db      	mvns	r3, r3
 800200a:	69ba      	ldr	r2, [r7, #24]
 800200c:	4013      	ands	r3, r2
 800200e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002018:	2b00      	cmp	r3, #0
 800201a:	d003      	beq.n	8002024 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	4313      	orrs	r3, r2
 8002022:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002024:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002028:	69bb      	ldr	r3, [r7, #24]
 800202a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	43db      	mvns	r3, r3
 8002036:	69ba      	ldr	r2, [r7, #24]
 8002038:	4013      	ands	r3, r2
 800203a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002044:	2b00      	cmp	r3, #0
 8002046:	d003      	beq.n	8002050 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002048:	69ba      	ldr	r2, [r7, #24]
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	4313      	orrs	r3, r2
 800204e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	69ba      	ldr	r2, [r7, #24]
 8002054:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	43db      	mvns	r3, r3
 8002060:	69ba      	ldr	r2, [r7, #24]
 8002062:	4013      	ands	r3, r2
 8002064:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d003      	beq.n	800207a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002072:	69ba      	ldr	r2, [r7, #24]
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	4313      	orrs	r3, r2
 8002078:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	3301      	adds	r3, #1
 8002084:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	fa22 f303 	lsr.w	r3, r2, r3
 8002090:	2b00      	cmp	r3, #0
 8002092:	f47f ae63 	bne.w	8001d5c <HAL_GPIO_Init+0x14>
  }
}
 8002096:	bf00      	nop
 8002098:	bf00      	nop
 800209a:	3724      	adds	r7, #36	; 0x24
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr
 80020a4:	58000400 	.word	0x58000400

080020a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	460b      	mov	r3, r1
 80020b2:	807b      	strh	r3, [r7, #2]
 80020b4:	4613      	mov	r3, r2
 80020b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020b8:	787b      	ldrb	r3, [r7, #1]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d003      	beq.n	80020c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020be:	887a      	ldrh	r2, [r7, #2]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80020c4:	e003      	b.n	80020ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80020c6:	887b      	ldrh	r3, [r7, #2]
 80020c8:	041a      	lsls	r2, r3, #16
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	619a      	str	r2, [r3, #24]
}
 80020ce:	bf00      	nop
 80020d0:	370c      	adds	r7, #12
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr

080020da <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80020da:	b480      	push	{r7}
 80020dc:	b085      	sub	sp, #20
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
 80020e2:	460b      	mov	r3, r1
 80020e4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	695b      	ldr	r3, [r3, #20]
 80020ea:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80020ec:	887a      	ldrh	r2, [r7, #2]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	4013      	ands	r3, r2
 80020f2:	041a      	lsls	r2, r3, #16
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	43d9      	mvns	r1, r3
 80020f8:	887b      	ldrh	r3, [r7, #2]
 80020fa:	400b      	ands	r3, r1
 80020fc:	431a      	orrs	r2, r3
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	619a      	str	r2, [r3, #24]
}
 8002102:	bf00      	nop
 8002104:	3714      	adds	r7, #20
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr
	...

08002110 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d101      	bne.n	8002122 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e07f      	b.n	8002222 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002128:	b2db      	uxtb	r3, r3
 800212a:	2b00      	cmp	r3, #0
 800212c:	d106      	bne.n	800213c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2200      	movs	r2, #0
 8002132:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f7fe ff50 	bl	8000fdc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2224      	movs	r2, #36	; 0x24
 8002140:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f022 0201 	bic.w	r2, r2, #1
 8002152:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	685a      	ldr	r2, [r3, #4]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002160:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	689a      	ldr	r2, [r3, #8]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002170:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	68db      	ldr	r3, [r3, #12]
 8002176:	2b01      	cmp	r3, #1
 8002178:	d107      	bne.n	800218a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	689a      	ldr	r2, [r3, #8]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002186:	609a      	str	r2, [r3, #8]
 8002188:	e006      	b.n	8002198 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	689a      	ldr	r2, [r3, #8]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002196:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	2b02      	cmp	r3, #2
 800219e:	d104      	bne.n	80021aa <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80021a8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	6859      	ldr	r1, [r3, #4]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	4b1d      	ldr	r3, [pc, #116]	; (800222c <HAL_I2C_Init+0x11c>)
 80021b6:	430b      	orrs	r3, r1
 80021b8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	68da      	ldr	r2, [r3, #12]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021c8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	691a      	ldr	r2, [r3, #16]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	695b      	ldr	r3, [r3, #20]
 80021d2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	699b      	ldr	r3, [r3, #24]
 80021da:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	430a      	orrs	r2, r1
 80021e2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	69d9      	ldr	r1, [r3, #28]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6a1a      	ldr	r2, [r3, #32]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	430a      	orrs	r2, r1
 80021f2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f042 0201 	orr.w	r2, r2, #1
 8002202:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2200      	movs	r2, #0
 8002208:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2220      	movs	r2, #32
 800220e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2200      	movs	r2, #0
 8002216:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2200      	movs	r2, #0
 800221c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002220:	2300      	movs	r3, #0
}
 8002222:	4618      	mov	r0, r3
 8002224:	3708      	adds	r7, #8
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	02008000 	.word	0x02008000

08002230 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002240:	b2db      	uxtb	r3, r3
 8002242:	2b20      	cmp	r3, #32
 8002244:	d138      	bne.n	80022b8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800224c:	2b01      	cmp	r3, #1
 800224e:	d101      	bne.n	8002254 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002250:	2302      	movs	r3, #2
 8002252:	e032      	b.n	80022ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2201      	movs	r2, #1
 8002258:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2224      	movs	r2, #36	; 0x24
 8002260:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f022 0201 	bic.w	r2, r2, #1
 8002272:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002282:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	6819      	ldr	r1, [r3, #0]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	683a      	ldr	r2, [r7, #0]
 8002290:	430a      	orrs	r2, r1
 8002292:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f042 0201 	orr.w	r2, r2, #1
 80022a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2220      	movs	r2, #32
 80022a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2200      	movs	r2, #0
 80022b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80022b4:	2300      	movs	r3, #0
 80022b6:	e000      	b.n	80022ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80022b8:	2302      	movs	r3, #2
  }
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	370c      	adds	r7, #12
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr

080022c6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80022c6:	b480      	push	{r7}
 80022c8:	b085      	sub	sp, #20
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	6078      	str	r0, [r7, #4]
 80022ce:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	2b20      	cmp	r3, #32
 80022da:	d139      	bne.n	8002350 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d101      	bne.n	80022ea <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80022e6:	2302      	movs	r3, #2
 80022e8:	e033      	b.n	8002352 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2201      	movs	r2, #1
 80022ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2224      	movs	r2, #36	; 0x24
 80022f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f022 0201 	bic.w	r2, r2, #1
 8002308:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002318:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	021b      	lsls	r3, r3, #8
 800231e:	68fa      	ldr	r2, [r7, #12]
 8002320:	4313      	orrs	r3, r2
 8002322:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	68fa      	ldr	r2, [r7, #12]
 800232a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f042 0201 	orr.w	r2, r2, #1
 800233a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2220      	movs	r2, #32
 8002340:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2200      	movs	r2, #0
 8002348:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800234c:	2300      	movs	r3, #0
 800234e:	e000      	b.n	8002352 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002350:	2302      	movs	r3, #2
  }
}
 8002352:	4618      	mov	r0, r3
 8002354:	3714      	adds	r7, #20
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
	...

08002360 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b088      	sub	sp, #32
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t i2sclk;
  uint32_t ispcm;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d101      	bne.n	8002372 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e116      	b.n	80025a0 <HAL_I2S_Init+0x240>
  assert_param(IS_I2S_FIRST_BIT(hi2s->Init.FirstBit));
  assert_param(IS_I2S_WS_INVERSION(hi2s->Init.WSInversion));
  assert_param(IS_I2S_DATA_24BIT_ALIGNMENT(hi2s->Init.Data24BitAlignment));
  assert_param(IS_I2S_MASTER_KEEP_IO_STATE(hi2s->Init.MasterKeepIOState));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8002378:	b2db      	uxtb	r3, r3
 800237a:	2b00      	cmp	r3, #0
 800237c:	d106      	bne.n	800238c <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2200      	movs	r2, #0
 8002382:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f7fe fe8e 	bl	80010a8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2202      	movs	r2, #2
 8002390:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Disable the selected I2S peripheral */
  if ((hi2s->Instance->CR1 & SPI_CR1_SPE) == SPI_CR1_SPE)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0301 	and.w	r3, r3, #1
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d107      	bne.n	80023b2 <HAL_I2S_Init+0x52>
  {
    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f022 0201 	bic.w	r2, r2, #1
 80023b0:	601a      	str	r2, [r3, #0]
  }

  /* Clear I2S configuration register */
  CLEAR_REG(hi2s->Instance->I2SCFGR);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	2200      	movs	r2, #0
 80023b8:	651a      	str	r2, [r3, #80]	; 0x50

  if (IS_I2S_MASTER(hi2s->Init.Mode))
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	2b04      	cmp	r3, #4
 80023c0:	d008      	beq.n	80023d4 <HAL_I2S_Init+0x74>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	2b06      	cmp	r3, #6
 80023c8:	d004      	beq.n	80023d4 <HAL_I2S_Init+0x74>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	2b0a      	cmp	r3, #10
 80023d0:	f040 8090 	bne.w	80024f4 <HAL_I2S_Init+0x194>
  {
    /*------------------------- I2SDIV and ODD Calculation ---------------------*/
    /* If the requested audio frequency is not the default, compute the prescaler */
    if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	695b      	ldr	r3, [r3, #20]
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d063      	beq.n	80024a4 <HAL_I2S_Init+0x144>
    {
      /* Check the frame length (For the Prescaler computing) ********************/
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d002      	beq.n	80023ea <HAL_I2S_Init+0x8a>
      {
        /* Channel length is 32 bits */
        packetlength = 2UL;
 80023e4:	2302      	movs	r3, #2
 80023e6:	617b      	str	r3, [r7, #20]
 80023e8:	e001      	b.n	80023ee <HAL_I2S_Init+0x8e>
      }
      else
      {
        /* Channel length is 16 bits */
        packetlength = 1UL;
 80023ea:	2301      	movs	r3, #1
 80023ec:	617b      	str	r3, [r7, #20]
      }

      /* Check if PCM standard is used */
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	2b30      	cmp	r3, #48	; 0x30
 80023f4:	d003      	beq.n	80023fe <HAL_I2S_Init+0x9e>
          (hi2s->Init.Standard == I2S_STANDARD_PCM_LONG))
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	689b      	ldr	r3, [r3, #8]
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 80023fa:	2bb0      	cmp	r3, #176	; 0xb0
 80023fc:	d102      	bne.n	8002404 <HAL_I2S_Init+0xa4>
      {
        ispcm = 1UL;
 80023fe:	2301      	movs	r3, #1
 8002400:	60bb      	str	r3, [r7, #8]
 8002402:	e001      	b.n	8002408 <HAL_I2S_Init+0xa8>
      }
      else
      {
        ispcm = 0UL;
 8002404:	2300      	movs	r3, #0
 8002406:	60bb      	str	r3, [r7, #8]
      }

      /* Get the source clock value: based on System Clock value */
#if defined (SPI_SPI6I2S_SUPPORT)
      if (hi2s->Instance == SPI6)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a66      	ldr	r2, [pc, #408]	; (80025a8 <HAL_I2S_Init+0x248>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d105      	bne.n	800241e <HAL_I2S_Init+0xbe>
      {
        /* SPI6 source clock */
        i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI6);
 8002412:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002416:	f003 f9bd 	bl	8005794 <HAL_RCCEx_GetPeriphCLKFreq>
 800241a:	60f8      	str	r0, [r7, #12]
 800241c:	e004      	b.n	8002428 <HAL_I2S_Init+0xc8>
      }
      else
      {
        /* SPI1,SPI2 and SPI3 share the same source clock */
        i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
 800241e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002422:	f003 f9b7 	bl	8005794 <HAL_RCCEx_GetPeriphCLKFreq>
 8002426:	60f8      	str	r0, [r7, #12]
      /* SPI1,SPI2 and SPI3 share the same source clock */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
#endif  /* SPI_SPI6I2S_SUPPORT */

      /* Compute the Real divider depending on the MCLK output state, with a floating point */
      if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	691b      	ldr	r3, [r3, #16]
 800242c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002430:	d113      	bne.n	800245a <HAL_I2S_Init+0xfa>
      {
        /* MCLK output is enabled */
        tmp = (uint32_t)((((i2sclk / (256UL >> ispcm)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 8002432:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	fa22 f303 	lsr.w	r3, r2, r3
 800243c:	68fa      	ldr	r2, [r7, #12]
 800243e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002442:	4613      	mov	r3, r2
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	4413      	add	r3, r2
 8002448:	005b      	lsls	r3, r3, #1
 800244a:	461a      	mov	r2, r3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	695b      	ldr	r3, [r3, #20]
 8002450:	fbb2 f3f3 	udiv	r3, r2, r3
 8002454:	3305      	adds	r3, #5
 8002456:	613b      	str	r3, [r7, #16]
 8002458:	e014      	b.n	8002484 <HAL_I2S_Init+0x124>
      }
      else
      {
        /* MCLK output is disabled */
        tmp = (uint32_t)((((i2sclk / ((32UL >> ispcm) * packetlength)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 800245a:	2220      	movs	r2, #32
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	fa22 f303 	lsr.w	r3, r2, r3
 8002462:	697a      	ldr	r2, [r7, #20]
 8002464:	fb02 f303 	mul.w	r3, r2, r3
 8002468:	68fa      	ldr	r2, [r7, #12]
 800246a:	fbb2 f2f3 	udiv	r2, r2, r3
 800246e:	4613      	mov	r3, r2
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	4413      	add	r3, r2
 8002474:	005b      	lsls	r3, r3, #1
 8002476:	461a      	mov	r2, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	695b      	ldr	r3, [r3, #20]
 800247c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002480:	3305      	adds	r3, #5
 8002482:	613b      	str	r3, [r7, #16]
      }

      /* Remove the flatting point */
      tmp = tmp / 10UL;
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	4a49      	ldr	r2, [pc, #292]	; (80025ac <HAL_I2S_Init+0x24c>)
 8002488:	fba2 2303 	umull	r2, r3, r2, r3
 800248c:	08db      	lsrs	r3, r3, #3
 800248e:	613b      	str	r3, [r7, #16]

      /* Check the parity of the divider */
      i2sodd = (uint32_t)(tmp & (uint32_t)1UL);
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	f003 0301 	and.w	r3, r3, #1
 8002496:	61bb      	str	r3, [r7, #24]

      /* Compute the i2sdiv prescaler */
      i2sdiv = (uint32_t)((tmp - i2sodd) / 2UL);
 8002498:	693a      	ldr	r2, [r7, #16]
 800249a:	69bb      	ldr	r3, [r7, #24]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	085b      	lsrs	r3, r3, #1
 80024a0:	61fb      	str	r3, [r7, #28]
 80024a2:	e003      	b.n	80024ac <HAL_I2S_Init+0x14c>
    }
    else
    {
      /* Set the default values */
      i2sdiv = 2UL;
 80024a4:	2302      	movs	r3, #2
 80024a6:	61fb      	str	r3, [r7, #28]
      i2sodd = 0UL;
 80024a8:	2300      	movs	r3, #0
 80024aa:	61bb      	str	r3, [r7, #24]
    }

    /* Test if the obtain values are forbidden or out of range */
    if (((i2sodd == 1UL) && (i2sdiv == 1UL)) || (i2sdiv > 0xFFUL))
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d102      	bne.n	80024b8 <HAL_I2S_Init+0x158>
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d002      	beq.n	80024be <HAL_I2S_Init+0x15e>
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	2bff      	cmp	r3, #255	; 0xff
 80024bc:	d907      	bls.n	80024ce <HAL_I2S_Init+0x16e>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024c2:	f043 0210 	orr.w	r2, r3, #16
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	651a      	str	r2, [r3, #80]	; 0x50
      return  HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e068      	b.n	80025a0 <HAL_I2S_Init+0x240>
    }

    /* Force i2smod to 1 just to be sure that (2xi2sdiv + i2sodd) is always higher than 0 */
    if (i2sdiv == 0UL)
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d101      	bne.n	80024d8 <HAL_I2S_Init+0x178>
    {
      i2sodd = 1UL;
 80024d4:	2301      	movs	r3, #1
 80024d6:	61bb      	str	r3, [r7, #24]
    }

    MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SDIV                 | SPI_I2SCFGR_ODD),
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80024de:	4b34      	ldr	r3, [pc, #208]	; (80025b0 <HAL_I2S_Init+0x250>)
 80024e0:	4013      	ands	r3, r2
 80024e2:	69fa      	ldr	r2, [r7, #28]
 80024e4:	0411      	lsls	r1, r2, #16
 80024e6:	69ba      	ldr	r2, [r7, #24]
 80024e8:	0612      	lsls	r2, r2, #24
 80024ea:	4311      	orrs	r1, r2
 80024ec:	687a      	ldr	r2, [r7, #4]
 80024ee:	6812      	ldr	r2, [r2, #0]
 80024f0:	430b      	orrs	r3, r1
 80024f2:	6513      	str	r3, [r2, #80]	; 0x50
  }

  /*-------------------------- I2Sx I2SCFGR Configuration --------------------*/
  /* Configure I2SMOD, I2SCFG, I2SSTD, PCMSYNC, DATLEN ,CHLEN ,CKPOL, WSINV, DATAFMT, I2SDIV, ODD and MCKOE bits bits */
  /* And configure the I2S with the I2S_InitStruct values */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SMOD   | SPI_I2SCFGR_I2SCFG     | \
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80024fa:	4b2e      	ldr	r3, [pc, #184]	; (80025b4 <HAL_I2S_Init+0x254>)
 80024fc:	4013      	ands	r3, r2
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	6851      	ldr	r1, [r2, #4]
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	6892      	ldr	r2, [r2, #8]
 8002506:	4311      	orrs	r1, r2
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	68d2      	ldr	r2, [r2, #12]
 800250c:	4311      	orrs	r1, r2
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	6992      	ldr	r2, [r2, #24]
 8002512:	4311      	orrs	r1, r2
 8002514:	687a      	ldr	r2, [r7, #4]
 8002516:	6a12      	ldr	r2, [r2, #32]
 8002518:	4311      	orrs	r1, r2
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800251e:	4311      	orrs	r1, r2
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	6912      	ldr	r2, [r2, #16]
 8002524:	430a      	orrs	r2, r1
 8002526:	431a      	orrs	r2, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f042 0201 	orr.w	r2, r2, #1
 8002530:	651a      	str	r2, [r3, #80]	; 0x50
             (SPI_I2SCFGR_I2SMOD   | hi2s->Init.Mode        | \
              hi2s->Init.Standard  | hi2s->Init.DataFormat  | \
              hi2s->Init.CPOL      | hi2s->Init.WSInversion | \
              hi2s->Init.Data24BitAlignment | hi2s->Init.MCLKOutput));
  /*Clear status register*/
  WRITE_REG(hi2s->Instance->IFCR, 0x0FF8);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f640 72f8 	movw	r2, #4088	; 0xff8
 800253a:	619a      	str	r2, [r3, #24]

  /*---------------------------- I2Sx CFG2 Configuration ----------------------*/

  /* Unlock the AF configuration to configure CFG2 register*/
  CLEAR_BIT(hi2s->Instance->CR1, SPI_CR1_IOLOCK);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800254a:	601a      	str	r2, [r3, #0]

  MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_LSBFRST, hi2s->Init.FirstBit);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	68db      	ldr	r3, [r3, #12]
 8002552:	f423 0100 	bic.w	r1, r3, #8388608	; 0x800000
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	69da      	ldr	r2, [r3, #28]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	430a      	orrs	r2, r1
 8002560:	60da      	str	r2, [r3, #12]

  /* Insure that AFCNTR is managed only by Master */
  if (IS_I2S_MASTER(hi2s->Init.Mode))
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	2b04      	cmp	r3, #4
 8002568:	d007      	beq.n	800257a <HAL_I2S_Init+0x21a>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	2b06      	cmp	r3, #6
 8002570:	d003      	beq.n	800257a <HAL_I2S_Init+0x21a>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	2b0a      	cmp	r3, #10
 8002578:	d10a      	bne.n	8002590 <HAL_I2S_Init+0x230>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_AFCNTR, (hi2s->Init.MasterKeepIOState));
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	430a      	orrs	r2, r1
 800258e:	60da      	str	r2, [r3, #12]
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2200      	movs	r2, #0
 8002594:	651a      	str	r2, [r3, #80]	; 0x50
  hi2s->State     = HAL_I2S_STATE_READY;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2201      	movs	r2, #1
 800259a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  return HAL_OK;
 800259e:	2300      	movs	r3, #0
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3720      	adds	r7, #32
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	58001400 	.word	0x58001400
 80025ac:	cccccccd 	.word	0xcccccccd
 80025b0:	fe00ffff 	.word	0xfe00ffff
 80025b4:	fdff9040 	.word	0xfdff9040

080025b8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b084      	sub	sp, #16
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d101      	bne.n	80025ca <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e0bf      	b.n	800274a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d106      	bne.n	80025e4 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f7fe fdee 	bl	80011c0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2202      	movs	r2, #2
 80025e8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	699a      	ldr	r2, [r3, #24]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80025fa:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	6999      	ldr	r1, [r3, #24]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	685a      	ldr	r2, [r3, #4]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002610:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	691b      	ldr	r3, [r3, #16]
 8002616:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	430a      	orrs	r2, r1
 800261e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	6899      	ldr	r1, [r3, #8]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	4b4a      	ldr	r3, [pc, #296]	; (8002754 <HAL_LTDC_Init+0x19c>)
 800262c:	400b      	ands	r3, r1
 800262e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	695b      	ldr	r3, [r3, #20]
 8002634:	041b      	lsls	r3, r3, #16
 8002636:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	6899      	ldr	r1, [r3, #8]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	699a      	ldr	r2, [r3, #24]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	431a      	orrs	r2, r3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	430a      	orrs	r2, r1
 800264c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	68d9      	ldr	r1, [r3, #12]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	4b3e      	ldr	r3, [pc, #248]	; (8002754 <HAL_LTDC_Init+0x19c>)
 800265a:	400b      	ands	r3, r1
 800265c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	69db      	ldr	r3, [r3, #28]
 8002662:	041b      	lsls	r3, r3, #16
 8002664:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	68d9      	ldr	r1, [r3, #12]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6a1a      	ldr	r2, [r3, #32]
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	431a      	orrs	r2, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	430a      	orrs	r2, r1
 800267a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	6919      	ldr	r1, [r3, #16]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	4b33      	ldr	r3, [pc, #204]	; (8002754 <HAL_LTDC_Init+0x19c>)
 8002688:	400b      	ands	r3, r1
 800268a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002690:	041b      	lsls	r3, r3, #16
 8002692:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	6919      	ldr	r1, [r3, #16]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	431a      	orrs	r2, r3
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	430a      	orrs	r2, r1
 80026a8:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	6959      	ldr	r1, [r3, #20]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	4b27      	ldr	r3, [pc, #156]	; (8002754 <HAL_LTDC_Init+0x19c>)
 80026b6:	400b      	ands	r3, r1
 80026b8:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026be:	041b      	lsls	r3, r3, #16
 80026c0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	6959      	ldr	r1, [r3, #20]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	431a      	orrs	r2, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	430a      	orrs	r2, r1
 80026d6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026de:	021b      	lsls	r3, r3, #8
 80026e0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80026e8:	041b      	lsls	r3, r3, #16
 80026ea:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80026fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002702:	68ba      	ldr	r2, [r7, #8]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	4313      	orrs	r3, r2
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800270e:	431a      	orrs	r2, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	430a      	orrs	r2, r1
 8002716:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f042 0206 	orr.w	r2, r2, #6
 8002726:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	699a      	ldr	r2, [r3, #24]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f042 0201 	orr.w	r2, r2, #1
 8002736:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2200      	movs	r2, #0
 800273c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2201      	movs	r2, #1
 8002744:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8002748:	2300      	movs	r3, #0
}
 800274a:	4618      	mov	r0, r3
 800274c:	3710      	adds	r7, #16
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	f000f800 	.word	0xf000f800

08002758 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002758:	b5b0      	push	{r4, r5, r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af00      	add	r7, sp, #0
 800275e:	60f8      	str	r0, [r7, #12]
 8002760:	60b9      	str	r1, [r7, #8]
 8002762:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800276a:	2b01      	cmp	r3, #1
 800276c:	d101      	bne.n	8002772 <HAL_LTDC_ConfigLayer+0x1a>
 800276e:	2302      	movs	r3, #2
 8002770:	e02c      	b.n	80027cc <HAL_LTDC_ConfigLayer+0x74>
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2201      	movs	r2, #1
 8002776:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2202      	movs	r2, #2
 800277e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8002782:	68fa      	ldr	r2, [r7, #12]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2134      	movs	r1, #52	; 0x34
 8002788:	fb01 f303 	mul.w	r3, r1, r3
 800278c:	4413      	add	r3, r2
 800278e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	4614      	mov	r4, r2
 8002796:	461d      	mov	r5, r3
 8002798:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800279a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800279c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800279e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027a4:	682b      	ldr	r3, [r5, #0]
 80027a6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80027a8:	687a      	ldr	r2, [r7, #4]
 80027aa:	68b9      	ldr	r1, [r7, #8]
 80027ac:	68f8      	ldr	r0, [r7, #12]
 80027ae:	f000 f811 	bl	80027d4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	2201      	movs	r2, #1
 80027b8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2201      	movs	r2, #1
 80027be:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2200      	movs	r2, #0
 80027c6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80027ca:	2300      	movs	r3, #0
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3710      	adds	r7, #16
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bdb0      	pop	{r4, r5, r7, pc}

080027d4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b089      	sub	sp, #36	; 0x24
 80027d8:	af00      	add	r7, sp, #0
 80027da:	60f8      	str	r0, [r7, #12]
 80027dc:	60b9      	str	r1, [r7, #8]
 80027de:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	685a      	ldr	r2, [r3, #4]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	68db      	ldr	r3, [r3, #12]
 80027ea:	0c1b      	lsrs	r3, r3, #16
 80027ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027f0:	4413      	add	r3, r2
 80027f2:	041b      	lsls	r3, r3, #16
 80027f4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	461a      	mov	r2, r3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	01db      	lsls	r3, r3, #7
 8002800:	4413      	add	r3, r2
 8002802:	3384      	adds	r3, #132	; 0x84
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	68fa      	ldr	r2, [r7, #12]
 8002808:	6812      	ldr	r2, [r2, #0]
 800280a:	4611      	mov	r1, r2
 800280c:	687a      	ldr	r2, [r7, #4]
 800280e:	01d2      	lsls	r2, r2, #7
 8002810:	440a      	add	r2, r1
 8002812:	3284      	adds	r2, #132	; 0x84
 8002814:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8002818:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	0c1b      	lsrs	r3, r3, #16
 8002826:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800282a:	4413      	add	r3, r2
 800282c:	1c5a      	adds	r2, r3, #1
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4619      	mov	r1, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	01db      	lsls	r3, r3, #7
 8002838:	440b      	add	r3, r1
 800283a:	3384      	adds	r3, #132	; 0x84
 800283c:	4619      	mov	r1, r3
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	4313      	orrs	r3, r2
 8002842:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	68da      	ldr	r2, [r3, #12]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	68db      	ldr	r3, [r3, #12]
 800284e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002852:	4413      	add	r3, r2
 8002854:	041b      	lsls	r3, r3, #16
 8002856:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	461a      	mov	r2, r3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	01db      	lsls	r3, r3, #7
 8002862:	4413      	add	r3, r2
 8002864:	3384      	adds	r3, #132	; 0x84
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	68fa      	ldr	r2, [r7, #12]
 800286a:	6812      	ldr	r2, [r2, #0]
 800286c:	4611      	mov	r1, r2
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	01d2      	lsls	r2, r2, #7
 8002872:	440a      	add	r2, r1
 8002874:	3284      	adds	r2, #132	; 0x84
 8002876:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800287a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	689a      	ldr	r2, [r3, #8]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	68db      	ldr	r3, [r3, #12]
 8002886:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800288a:	4413      	add	r3, r2
 800288c:	1c5a      	adds	r2, r3, #1
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4619      	mov	r1, r3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	01db      	lsls	r3, r3, #7
 8002898:	440b      	add	r3, r1
 800289a:	3384      	adds	r3, #132	; 0x84
 800289c:	4619      	mov	r1, r3
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	461a      	mov	r2, r3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	01db      	lsls	r3, r3, #7
 80028ae:	4413      	add	r3, r2
 80028b0:	3384      	adds	r3, #132	; 0x84
 80028b2:	691b      	ldr	r3, [r3, #16]
 80028b4:	68fa      	ldr	r2, [r7, #12]
 80028b6:	6812      	ldr	r2, [r2, #0]
 80028b8:	4611      	mov	r1, r2
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	01d2      	lsls	r2, r2, #7
 80028be:	440a      	add	r2, r1
 80028c0:	3284      	adds	r2, #132	; 0x84
 80028c2:	f023 0307 	bic.w	r3, r3, #7
 80028c6:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	461a      	mov	r2, r3
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	01db      	lsls	r3, r3, #7
 80028d2:	4413      	add	r3, r2
 80028d4:	3384      	adds	r3, #132	; 0x84
 80028d6:	461a      	mov	r2, r3
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	691b      	ldr	r3, [r3, #16]
 80028dc:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80028e4:	021b      	lsls	r3, r3, #8
 80028e6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80028ee:	041b      	lsls	r3, r3, #16
 80028f0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	699b      	ldr	r3, [r3, #24]
 80028f6:	061b      	lsls	r3, r3, #24
 80028f8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	461a      	mov	r2, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	01db      	lsls	r3, r3, #7
 8002904:	4413      	add	r3, r2
 8002906:	3384      	adds	r3, #132	; 0x84
 8002908:	699b      	ldr	r3, [r3, #24]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	461a      	mov	r2, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	01db      	lsls	r3, r3, #7
 8002914:	4413      	add	r3, r2
 8002916:	3384      	adds	r3, #132	; 0x84
 8002918:	461a      	mov	r2, r3
 800291a:	2300      	movs	r3, #0
 800291c:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002924:	461a      	mov	r2, r3
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	431a      	orrs	r2, r3
 800292a:	69bb      	ldr	r3, [r7, #24]
 800292c:	431a      	orrs	r2, r3
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4619      	mov	r1, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	01db      	lsls	r3, r3, #7
 8002938:	440b      	add	r3, r1
 800293a:	3384      	adds	r3, #132	; 0x84
 800293c:	4619      	mov	r1, r3
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	4313      	orrs	r3, r2
 8002942:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	461a      	mov	r2, r3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	01db      	lsls	r3, r3, #7
 800294e:	4413      	add	r3, r2
 8002950:	3384      	adds	r3, #132	; 0x84
 8002952:	695b      	ldr	r3, [r3, #20]
 8002954:	68fa      	ldr	r2, [r7, #12]
 8002956:	6812      	ldr	r2, [r2, #0]
 8002958:	4611      	mov	r1, r2
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	01d2      	lsls	r2, r2, #7
 800295e:	440a      	add	r2, r1
 8002960:	3284      	adds	r2, #132	; 0x84
 8002962:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002966:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	461a      	mov	r2, r3
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	01db      	lsls	r3, r3, #7
 8002972:	4413      	add	r3, r2
 8002974:	3384      	adds	r3, #132	; 0x84
 8002976:	461a      	mov	r2, r3
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	695b      	ldr	r3, [r3, #20]
 800297c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	461a      	mov	r2, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	01db      	lsls	r3, r3, #7
 8002988:	4413      	add	r3, r2
 800298a:	3384      	adds	r3, #132	; 0x84
 800298c:	69da      	ldr	r2, [r3, #28]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4619      	mov	r1, r3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	01db      	lsls	r3, r3, #7
 8002998:	440b      	add	r3, r1
 800299a:	3384      	adds	r3, #132	; 0x84
 800299c:	4619      	mov	r1, r3
 800299e:	4b58      	ldr	r3, [pc, #352]	; (8002b00 <LTDC_SetConfig+0x32c>)
 80029a0:	4013      	ands	r3, r2
 80029a2:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	69da      	ldr	r2, [r3, #28]
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	6a1b      	ldr	r3, [r3, #32]
 80029ac:	68f9      	ldr	r1, [r7, #12]
 80029ae:	6809      	ldr	r1, [r1, #0]
 80029b0:	4608      	mov	r0, r1
 80029b2:	6879      	ldr	r1, [r7, #4]
 80029b4:	01c9      	lsls	r1, r1, #7
 80029b6:	4401      	add	r1, r0
 80029b8:	3184      	adds	r1, #132	; 0x84
 80029ba:	4313      	orrs	r3, r2
 80029bc:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	461a      	mov	r2, r3
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	01db      	lsls	r3, r3, #7
 80029c8:	4413      	add	r3, r2
 80029ca:	3384      	adds	r3, #132	; 0x84
 80029cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	461a      	mov	r2, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	01db      	lsls	r3, r3, #7
 80029d8:	4413      	add	r3, r2
 80029da:	3384      	adds	r3, #132	; 0x84
 80029dc:	461a      	mov	r2, r3
 80029de:	2300      	movs	r3, #0
 80029e0:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	461a      	mov	r2, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	01db      	lsls	r3, r3, #7
 80029ec:	4413      	add	r3, r2
 80029ee:	3384      	adds	r3, #132	; 0x84
 80029f0:	461a      	mov	r2, r3
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f6:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	691b      	ldr	r3, [r3, #16]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d102      	bne.n	8002a06 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8002a00:	2304      	movs	r3, #4
 8002a02:	61fb      	str	r3, [r7, #28]
 8002a04:	e01b      	b.n	8002a3e <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	691b      	ldr	r3, [r3, #16]
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d102      	bne.n	8002a14 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	61fb      	str	r3, [r7, #28]
 8002a12:	e014      	b.n	8002a3e <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	691b      	ldr	r3, [r3, #16]
 8002a18:	2b04      	cmp	r3, #4
 8002a1a:	d00b      	beq.n	8002a34 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d007      	beq.n	8002a34 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8002a28:	2b03      	cmp	r3, #3
 8002a2a:	d003      	beq.n	8002a34 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002a30:	2b07      	cmp	r3, #7
 8002a32:	d102      	bne.n	8002a3a <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8002a34:	2302      	movs	r3, #2
 8002a36:	61fb      	str	r3, [r7, #28]
 8002a38:	e001      	b.n	8002a3e <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	461a      	mov	r2, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	01db      	lsls	r3, r3, #7
 8002a48:	4413      	add	r3, r2
 8002a4a:	3384      	adds	r3, #132	; 0x84
 8002a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a4e:	68fa      	ldr	r2, [r7, #12]
 8002a50:	6812      	ldr	r2, [r2, #0]
 8002a52:	4611      	mov	r1, r2
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	01d2      	lsls	r2, r2, #7
 8002a58:	440a      	add	r2, r1
 8002a5a:	3284      	adds	r2, #132	; 0x84
 8002a5c:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8002a60:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a66:	69fa      	ldr	r2, [r7, #28]
 8002a68:	fb02 f303 	mul.w	r3, r2, r3
 8002a6c:	041a      	lsls	r2, r3, #16
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	6859      	ldr	r1, [r3, #4]
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	1acb      	subs	r3, r1, r3
 8002a78:	69f9      	ldr	r1, [r7, #28]
 8002a7a:	fb01 f303 	mul.w	r3, r1, r3
 8002a7e:	3307      	adds	r3, #7
 8002a80:	68f9      	ldr	r1, [r7, #12]
 8002a82:	6809      	ldr	r1, [r1, #0]
 8002a84:	4608      	mov	r0, r1
 8002a86:	6879      	ldr	r1, [r7, #4]
 8002a88:	01c9      	lsls	r1, r1, #7
 8002a8a:	4401      	add	r1, r0
 8002a8c:	3184      	adds	r1, #132	; 0x84
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	461a      	mov	r2, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	01db      	lsls	r3, r3, #7
 8002a9c:	4413      	add	r3, r2
 8002a9e:	3384      	adds	r3, #132	; 0x84
 8002aa0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	01db      	lsls	r3, r3, #7
 8002aac:	440b      	add	r3, r1
 8002aae:	3384      	adds	r3, #132	; 0x84
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	4b14      	ldr	r3, [pc, #80]	; (8002b04 <LTDC_SetConfig+0x330>)
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	461a      	mov	r2, r3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	01db      	lsls	r3, r3, #7
 8002ac2:	4413      	add	r3, r2
 8002ac4:	3384      	adds	r3, #132	; 0x84
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002acc:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	01db      	lsls	r3, r3, #7
 8002ad8:	4413      	add	r3, r2
 8002ada:	3384      	adds	r3, #132	; 0x84
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	68fa      	ldr	r2, [r7, #12]
 8002ae0:	6812      	ldr	r2, [r2, #0]
 8002ae2:	4611      	mov	r1, r2
 8002ae4:	687a      	ldr	r2, [r7, #4]
 8002ae6:	01d2      	lsls	r2, r2, #7
 8002ae8:	440a      	add	r2, r1
 8002aea:	3284      	adds	r2, #132	; 0x84
 8002aec:	f043 0301 	orr.w	r3, r3, #1
 8002af0:	6013      	str	r3, [r2, #0]
}
 8002af2:	bf00      	nop
 8002af4:	3724      	adds	r7, #36	; 0x24
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop
 8002b00:	fffff8f8 	.word	0xfffff8f8
 8002b04:	fffff800 	.word	0xfffff800

08002b08 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init (OSPI_HandleTypeDef *hospi)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b086      	sub	sp, #24
 8002b0c:	af02      	add	r7, sp, #8
 8002b0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b10:	2300      	movs	r3, #0
 8002b12:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8002b14:	f7ff f804 	bl	8001b20 <HAL_GetTick>
 8002b18:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d102      	bne.n	8002b26 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	73fb      	strb	r3, [r7, #15]
 8002b24:	e0a6      	b.n	8002c74 <HAL_OSPI_Init+0x16c>
    assert_param(IS_OSPI_CS_BOUNDARY    (hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_CKCSHT         (hospi->Init.ClkChipSelectHighTime));
    assert_param(IS_OSPI_MAXTRAN        (hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	f040 809f 	bne.w	8002c74 <HAL_OSPI_Init+0x16c>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f7fe fc04 	bl	8001344 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8002b3c:	f241 3188 	movw	r1, #5000	; 0x1388
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f000 f89f 	bl	8002c84 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, clocked chip select high time, free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	689a      	ldr	r2, [r3, #8]
 8002b4c:	4b4c      	ldr	r3, [pc, #304]	; (8002c80 <HAL_OSPI_Init+0x178>)
 8002b4e:	4013      	ands	r3, r2
 8002b50:	687a      	ldr	r2, [r7, #4]
 8002b52:	68d1      	ldr	r1, [r2, #12]
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	6912      	ldr	r2, [r2, #16]
 8002b58:	3a01      	subs	r2, #1
 8002b5a:	0412      	lsls	r2, r2, #16
 8002b5c:	4311      	orrs	r1, r2
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	6952      	ldr	r2, [r2, #20]
 8002b62:	3a01      	subs	r2, #1
 8002b64:	0212      	lsls	r2, r2, #8
 8002b66:	4311      	orrs	r1, r2
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002b6c:	0112      	lsls	r2, r2, #4
 8002b6e:	4311      	orrs	r1, r2
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	69d2      	ldr	r2, [r2, #28]
 8002b74:	4311      	orrs	r1, r2
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	6812      	ldr	r2, [r2, #0]
 8002b7a:	430b      	orrs	r3, r1
 8002b7c:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  (hospi->Init.ClkChipSelectHighTime << OCTOSPI_DCR1_CKCSHT_Pos) | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6a1a      	ldr	r2, [r3, #32]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	430a      	orrs	r2, r1
 8002b92:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b98:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	430a      	orrs	r2, r1
 8002ba4:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002bae:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	3b01      	subs	r3, #1
 8002bc0:	021a      	lsls	r2, r3, #8
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	430a      	orrs	r2, r1
 8002bc8:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bce:	9300      	str	r3, [sp, #0]
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	2120      	movs	r1, #32
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f000 fd7a 	bl	80036d0 <OSPI_WaitFlagStateUntilTimeout>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8002be0:	7bfb      	ldrb	r3, [r7, #15]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d146      	bne.n	8002c74 <HAL_OSPI_Init+0x16c>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf4:	1e5a      	subs	r2, r3, #1
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	430a      	orrs	r2, r1
 8002bfc:	60da      	str	r2, [r3, #12]
                  ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	689a      	ldr	r2, [r3, #8]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	430a      	orrs	r2, r1
 8002c12:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002c1c:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c28:	431a      	orrs	r2, r3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	430a      	orrs	r2, r1
 8002c30:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                  (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f042 0201 	orr.w	r2, r2, #1
 8002c42:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	699b      	ldr	r3, [r3, #24]
 8002c48:	2b02      	cmp	r3, #2
 8002c4a:	d107      	bne.n	8002c5c <HAL_OSPI_Init+0x154>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	689a      	ldr	r2, [r3, #8]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f042 0202 	orr.w	r2, r2, #2
 8002c5a:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c64:	d103      	bne.n	8002c6e <HAL_OSPI_Init+0x166>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2201      	movs	r2, #1
 8002c6a:	655a      	str	r2, [r3, #84]	; 0x54
 8002c6c:	e002      	b.n	8002c74 <HAL_OSPI_Init+0x16c>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2202      	movs	r2, #2
 8002c72:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
  }

  /* Return function status */
  return status;
 8002c74:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3710      	adds	r7, #16
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	f8e0f88c 	.word	0xf8e0f88c

08002c84 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	683a      	ldr	r2, [r7, #0]
 8002c92:	65da      	str	r2, [r3, #92]	; 0x5c
  return HAL_OK;
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	370c      	adds	r7, #12
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr
	...

08002ca4 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b094      	sub	sp, #80	; 0x50
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	60f8      	str	r0, [r7, #12]
 8002cac:	60b9      	str	r1, [r7, #8]
 8002cae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  assert_param(IS_OSPIM_PORT(cfg->NCSPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOLowPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));

  if (hospi->Instance == OCTOSPI1)
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4aa3      	ldr	r2, [pc, #652]	; (8002f50 <HAL_OSPIM_Config+0x2ac>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d105      	bne.n	8002cd2 <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 1U;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8002cd0:	e004      	b.n	8002cdc <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 0U;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8002cdc:	2300      	movs	r3, #0
 8002cde:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8002ce2:	e01d      	b.n	8002d20 <HAL_OSPIM_Config+0x7c>
  {
    if (OSPIM_GetConfig(index+1U, &(IOM_cfg[index])) != HAL_OK)
 8002ce4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002ce8:	3301      	adds	r3, #1
 8002cea:	b2d8      	uxtb	r0, r3
 8002cec:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8002cf0:	f107 0114 	add.w	r1, r7, #20
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	005b      	lsls	r3, r3, #1
 8002cf8:	4413      	add	r3, r2
 8002cfa:	00db      	lsls	r3, r3, #3
 8002cfc:	440b      	add	r3, r1
 8002cfe:	4619      	mov	r1, r3
 8002d00:	f000 fd1e 	bl	8003740 <OSPIM_GetConfig>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d005      	beq.n	8002d16 <HAL_OSPIM_Config+0x72>
    {
      status = HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2208      	movs	r2, #8
 8002d14:	659a      	str	r2, [r3, #88]	; 0x58
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8002d16:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002d1a:	3301      	adds	r3, #1
 8002d1c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8002d20:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d9dd      	bls.n	8002ce4 <HAL_OSPIM_Config+0x40>
    }
  }

  if (status == HAL_OK)
 8002d28:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	f040 84c3 	bne.w	80036b8 <HAL_OSPIM_Config+0xa14>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8002d32:	4b87      	ldr	r3, [pc, #540]	; (8002f50 <HAL_OSPIM_Config+0x2ac>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0301 	and.w	r3, r3, #1
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d00b      	beq.n	8002d56 <HAL_OSPIM_Config+0xb2>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8002d3e:	4b84      	ldr	r3, [pc, #528]	; (8002f50 <HAL_OSPIM_Config+0x2ac>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a83      	ldr	r2, [pc, #524]	; (8002f50 <HAL_OSPIM_Config+0x2ac>)
 8002d44:	f023 0301 	bic.w	r3, r3, #1
 8002d48:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8002d4a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002d4e:	f043 0301 	orr.w	r3, r3, #1
 8002d52:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8002d56:	4b7f      	ldr	r3, [pc, #508]	; (8002f54 <HAL_OSPIM_Config+0x2b0>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0301 	and.w	r3, r3, #1
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d00b      	beq.n	8002d7a <HAL_OSPIM_Config+0xd6>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8002d62:	4b7c      	ldr	r3, [pc, #496]	; (8002f54 <HAL_OSPIM_Config+0x2b0>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a7b      	ldr	r2, [pc, #492]	; (8002f54 <HAL_OSPIM_Config+0x2b0>)
 8002d68:	f023 0301 	bic.w	r3, r3, #1
 8002d6c:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 8002d6e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002d72:	f043 0302 	orr.w	r3, r3, #2
 8002d76:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8002d7a:	4977      	ldr	r1, [pc, #476]	; (8002f58 <HAL_OSPIM_Config+0x2b4>)
 8002d7c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002d7e:	4613      	mov	r3, r2
 8002d80:	005b      	lsls	r3, r3, #1
 8002d82:	4413      	add	r3, r2
 8002d84:	00db      	lsls	r3, r3, #3
 8002d86:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002d8a:	4413      	add	r3, r2
 8002d8c:	3b34      	subs	r3, #52	; 0x34
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	3b01      	subs	r3, #1
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	440b      	add	r3, r1
 8002d96:	6859      	ldr	r1, [r3, #4]
 8002d98:	486f      	ldr	r0, [pc, #444]	; (8002f58 <HAL_OSPIM_Config+0x2b4>)
 8002d9a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	005b      	lsls	r3, r3, #1
 8002da0:	4413      	add	r3, r2
 8002da2:	00db      	lsls	r3, r3, #3
 8002da4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002da8:	4413      	add	r3, r2
 8002daa:	3b34      	subs	r3, #52	; 0x34
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	3b01      	subs	r3, #1
 8002db0:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	4403      	add	r3, r0
 8002db8:	605a      	str	r2, [r3, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8002dba:	4b67      	ldr	r3, [pc, #412]	; (8002f58 <HAL_OSPIM_Config+0x2b4>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0301 	and.w	r3, r3, #1
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	f000 80ca 	beq.w	8002f5c <HAL_OSPIM_Config+0x2b8>
    {
      /* De-multiplexing should be performed */
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8002dc8:	4b63      	ldr	r3, [pc, #396]	; (8002f58 <HAL_OSPIM_Config+0x2b4>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a62      	ldr	r2, [pc, #392]	; (8002f58 <HAL_OSPIM_Config+0x2b4>)
 8002dce:	f023 0301 	bic.w	r3, r3, #1
 8002dd2:	6013      	str	r3, [r2, #0]

      if (other_instance == 1U)
 8002dd4:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	f040 8178 	bne.w	80030ce <HAL_OSPIM_Config+0x42a>
      {
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKSRC);
 8002dde:	495e      	ldr	r1, [pc, #376]	; (8002f58 <HAL_OSPIM_Config+0x2b4>)
 8002de0:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002de4:	4613      	mov	r3, r2
 8002de6:	005b      	lsls	r3, r3, #1
 8002de8:	4413      	add	r3, r2
 8002dea:	00db      	lsls	r3, r3, #3
 8002dec:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002df0:	4413      	add	r3, r2
 8002df2:	3b3c      	subs	r3, #60	; 0x3c
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	3b01      	subs	r3, #1
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	440b      	add	r3, r1
 8002dfc:	6859      	ldr	r1, [r3, #4]
 8002dfe:	4856      	ldr	r0, [pc, #344]	; (8002f58 <HAL_OSPIM_Config+0x2b4>)
 8002e00:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002e04:	4613      	mov	r3, r2
 8002e06:	005b      	lsls	r3, r3, #1
 8002e08:	4413      	add	r3, r2
 8002e0a:	00db      	lsls	r3, r3, #3
 8002e0c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002e10:	4413      	add	r3, r2
 8002e12:	3b3c      	subs	r3, #60	; 0x3c
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	3b01      	subs	r3, #1
 8002e18:	f041 0202 	orr.w	r2, r1, #2
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	4403      	add	r3, r0
 8002e20:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8002e22:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002e26:	4613      	mov	r3, r2
 8002e28:	005b      	lsls	r3, r3, #1
 8002e2a:	4413      	add	r3, r2
 8002e2c:	00db      	lsls	r3, r3, #3
 8002e2e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002e32:	4413      	add	r3, r2
 8002e34:	3b38      	subs	r3, #56	; 0x38
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d021      	beq.n	8002e80 <HAL_OSPIM_Config+0x1dc>
        {
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSSRC);
 8002e3c:	4946      	ldr	r1, [pc, #280]	; (8002f58 <HAL_OSPIM_Config+0x2b4>)
 8002e3e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002e42:	4613      	mov	r3, r2
 8002e44:	005b      	lsls	r3, r3, #1
 8002e46:	4413      	add	r3, r2
 8002e48:	00db      	lsls	r3, r3, #3
 8002e4a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002e4e:	4413      	add	r3, r2
 8002e50:	3b38      	subs	r3, #56	; 0x38
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	3b01      	subs	r3, #1
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	440b      	add	r3, r1
 8002e5a:	6859      	ldr	r1, [r3, #4]
 8002e5c:	483e      	ldr	r0, [pc, #248]	; (8002f58 <HAL_OSPIM_Config+0x2b4>)
 8002e5e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002e62:	4613      	mov	r3, r2
 8002e64:	005b      	lsls	r3, r3, #1
 8002e66:	4413      	add	r3, r2
 8002e68:	00db      	lsls	r3, r3, #3
 8002e6a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002e6e:	4413      	add	r3, r2
 8002e70:	3b38      	subs	r3, #56	; 0x38
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	3b01      	subs	r3, #1
 8002e76:	f041 0220 	orr.w	r2, r1, #32
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	4403      	add	r3, r0
 8002e7e:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8002e80:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002e84:	4613      	mov	r3, r2
 8002e86:	005b      	lsls	r3, r3, #1
 8002e88:	4413      	add	r3, r2
 8002e8a:	00db      	lsls	r3, r3, #3
 8002e8c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002e90:	4413      	add	r3, r2
 8002e92:	3b30      	subs	r3, #48	; 0x30
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d025      	beq.n	8002ee6 <HAL_OSPIM_Config+0x242>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLSRC_1);
 8002e9a:	492f      	ldr	r1, [pc, #188]	; (8002f58 <HAL_OSPIM_Config+0x2b4>)
 8002e9c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	005b      	lsls	r3, r3, #1
 8002ea4:	4413      	add	r3, r2
 8002ea6:	00db      	lsls	r3, r3, #3
 8002ea8:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002eac:	4413      	add	r3, r2
 8002eae:	3b30      	subs	r3, #48	; 0x30
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	3b01      	subs	r3, #1
 8002eb4:	f003 0301 	and.w	r3, r3, #1
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	440b      	add	r3, r1
 8002ebc:	6859      	ldr	r1, [r3, #4]
 8002ebe:	4826      	ldr	r0, [pc, #152]	; (8002f58 <HAL_OSPIM_Config+0x2b4>)
 8002ec0:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	005b      	lsls	r3, r3, #1
 8002ec8:	4413      	add	r3, r2
 8002eca:	00db      	lsls	r3, r3, #3
 8002ecc:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002ed0:	4413      	add	r3, r2
 8002ed2:	3b30      	subs	r3, #48	; 0x30
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	3b01      	subs	r3, #1
 8002ed8:	f003 0301 	and.w	r3, r3, #1
 8002edc:	f441 2280 	orr.w	r2, r1, #262144	; 0x40000
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	4403      	add	r3, r0
 8002ee4:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8002ee6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002eea:	4613      	mov	r3, r2
 8002eec:	005b      	lsls	r3, r3, #1
 8002eee:	4413      	add	r3, r2
 8002ef0:	00db      	lsls	r3, r3, #3
 8002ef2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002ef6:	4413      	add	r3, r2
 8002ef8:	3b2c      	subs	r3, #44	; 0x2c
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	f000 80e6 	beq.w	80030ce <HAL_OSPIM_Config+0x42a>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHSRC_1);
 8002f02:	4915      	ldr	r1, [pc, #84]	; (8002f58 <HAL_OSPIM_Config+0x2b4>)
 8002f04:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002f08:	4613      	mov	r3, r2
 8002f0a:	005b      	lsls	r3, r3, #1
 8002f0c:	4413      	add	r3, r2
 8002f0e:	00db      	lsls	r3, r3, #3
 8002f10:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002f14:	4413      	add	r3, r2
 8002f16:	3b2c      	subs	r3, #44	; 0x2c
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	3b01      	subs	r3, #1
 8002f1c:	f003 0301 	and.w	r3, r3, #1
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	440b      	add	r3, r1
 8002f24:	6859      	ldr	r1, [r3, #4]
 8002f26:	480c      	ldr	r0, [pc, #48]	; (8002f58 <HAL_OSPIM_Config+0x2b4>)
 8002f28:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	005b      	lsls	r3, r3, #1
 8002f30:	4413      	add	r3, r2
 8002f32:	00db      	lsls	r3, r3, #3
 8002f34:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002f38:	4413      	add	r3, r2
 8002f3a:	3b2c      	subs	r3, #44	; 0x2c
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	3b01      	subs	r3, #1
 8002f40:	f003 0301 	and.w	r3, r3, #1
 8002f44:	f041 6280 	orr.w	r2, r1, #67108864	; 0x4000000
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	4403      	add	r3, r0
 8002f4c:	605a      	str	r2, [r3, #4]
 8002f4e:	e0be      	b.n	80030ce <HAL_OSPIM_Config+0x42a>
 8002f50:	52005000 	.word	0x52005000
 8002f54:	5200a000 	.word	0x5200a000
 8002f58:	5200b400 	.word	0x5200b400
        }
      }
    }
    else
    {
      if (IOM_cfg[instance].ClkPort != 0U)
 8002f5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f5e:	4613      	mov	r3, r2
 8002f60:	005b      	lsls	r3, r3, #1
 8002f62:	4413      	add	r3, r2
 8002f64:	00db      	lsls	r3, r3, #3
 8002f66:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002f6a:	4413      	add	r3, r2
 8002f6c:	3b3c      	subs	r3, #60	; 0x3c
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	f000 80ac 	beq.w	80030ce <HAL_OSPIM_Config+0x42a>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 8002f76:	499d      	ldr	r1, [pc, #628]	; (80031ec <HAL_OSPIM_Config+0x548>)
 8002f78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f7a:	4613      	mov	r3, r2
 8002f7c:	005b      	lsls	r3, r3, #1
 8002f7e:	4413      	add	r3, r2
 8002f80:	00db      	lsls	r3, r3, #3
 8002f82:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002f86:	4413      	add	r3, r2
 8002f88:	3b3c      	subs	r3, #60	; 0x3c
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	3b01      	subs	r3, #1
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	440b      	add	r3, r1
 8002f92:	6859      	ldr	r1, [r3, #4]
 8002f94:	4895      	ldr	r0, [pc, #596]	; (80031ec <HAL_OSPIM_Config+0x548>)
 8002f96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f98:	4613      	mov	r3, r2
 8002f9a:	005b      	lsls	r3, r3, #1
 8002f9c:	4413      	add	r3, r2
 8002f9e:	00db      	lsls	r3, r3, #3
 8002fa0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002fa4:	4413      	add	r3, r2
 8002fa6:	3b3c      	subs	r3, #60	; 0x3c
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	3b01      	subs	r3, #1
 8002fac:	f021 0201 	bic.w	r2, r1, #1
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	4403      	add	r3, r0
 8002fb4:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8002fb6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002fb8:	4613      	mov	r3, r2
 8002fba:	005b      	lsls	r3, r3, #1
 8002fbc:	4413      	add	r3, r2
 8002fbe:	00db      	lsls	r3, r3, #3
 8002fc0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002fc4:	4413      	add	r3, r2
 8002fc6:	3b38      	subs	r3, #56	; 0x38
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d01f      	beq.n	800300e <HAL_OSPIM_Config+0x36a>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 8002fce:	4987      	ldr	r1, [pc, #540]	; (80031ec <HAL_OSPIM_Config+0x548>)
 8002fd0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002fd2:	4613      	mov	r3, r2
 8002fd4:	005b      	lsls	r3, r3, #1
 8002fd6:	4413      	add	r3, r2
 8002fd8:	00db      	lsls	r3, r3, #3
 8002fda:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002fde:	4413      	add	r3, r2
 8002fe0:	3b38      	subs	r3, #56	; 0x38
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	3b01      	subs	r3, #1
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	440b      	add	r3, r1
 8002fea:	6859      	ldr	r1, [r3, #4]
 8002fec:	487f      	ldr	r0, [pc, #508]	; (80031ec <HAL_OSPIM_Config+0x548>)
 8002fee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	005b      	lsls	r3, r3, #1
 8002ff4:	4413      	add	r3, r2
 8002ff6:	00db      	lsls	r3, r3, #3
 8002ff8:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002ffc:	4413      	add	r3, r2
 8002ffe:	3b38      	subs	r3, #56	; 0x38
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	3b01      	subs	r3, #1
 8003004:	f021 0210 	bic.w	r2, r1, #16
 8003008:	009b      	lsls	r3, r3, #2
 800300a:	4403      	add	r3, r0
 800300c:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800300e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003010:	4613      	mov	r3, r2
 8003012:	005b      	lsls	r3, r3, #1
 8003014:	4413      	add	r3, r2
 8003016:	00db      	lsls	r3, r3, #3
 8003018:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800301c:	4413      	add	r3, r2
 800301e:	3b30      	subs	r3, #48	; 0x30
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d023      	beq.n	800306e <HAL_OSPIM_Config+0x3ca>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8003026:	4971      	ldr	r1, [pc, #452]	; (80031ec <HAL_OSPIM_Config+0x548>)
 8003028:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800302a:	4613      	mov	r3, r2
 800302c:	005b      	lsls	r3, r3, #1
 800302e:	4413      	add	r3, r2
 8003030:	00db      	lsls	r3, r3, #3
 8003032:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003036:	4413      	add	r3, r2
 8003038:	3b30      	subs	r3, #48	; 0x30
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	3b01      	subs	r3, #1
 800303e:	f003 0301 	and.w	r3, r3, #1
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	440b      	add	r3, r1
 8003046:	6859      	ldr	r1, [r3, #4]
 8003048:	4868      	ldr	r0, [pc, #416]	; (80031ec <HAL_OSPIM_Config+0x548>)
 800304a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800304c:	4613      	mov	r3, r2
 800304e:	005b      	lsls	r3, r3, #1
 8003050:	4413      	add	r3, r2
 8003052:	00db      	lsls	r3, r3, #3
 8003054:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003058:	4413      	add	r3, r2
 800305a:	3b30      	subs	r3, #48	; 0x30
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	3b01      	subs	r3, #1
 8003060:	f003 0301 	and.w	r3, r3, #1
 8003064:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	4403      	add	r3, r0
 800306c:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800306e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003070:	4613      	mov	r3, r2
 8003072:	005b      	lsls	r3, r3, #1
 8003074:	4413      	add	r3, r2
 8003076:	00db      	lsls	r3, r3, #3
 8003078:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800307c:	4413      	add	r3, r2
 800307e:	3b2c      	subs	r3, #44	; 0x2c
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d023      	beq.n	80030ce <HAL_OSPIM_Config+0x42a>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8003086:	4959      	ldr	r1, [pc, #356]	; (80031ec <HAL_OSPIM_Config+0x548>)
 8003088:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800308a:	4613      	mov	r3, r2
 800308c:	005b      	lsls	r3, r3, #1
 800308e:	4413      	add	r3, r2
 8003090:	00db      	lsls	r3, r3, #3
 8003092:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003096:	4413      	add	r3, r2
 8003098:	3b2c      	subs	r3, #44	; 0x2c
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	3b01      	subs	r3, #1
 800309e:	f003 0301 	and.w	r3, r3, #1
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	440b      	add	r3, r1
 80030a6:	6859      	ldr	r1, [r3, #4]
 80030a8:	4850      	ldr	r0, [pc, #320]	; (80031ec <HAL_OSPIM_Config+0x548>)
 80030aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80030ac:	4613      	mov	r3, r2
 80030ae:	005b      	lsls	r3, r3, #1
 80030b0:	4413      	add	r3, r2
 80030b2:	00db      	lsls	r3, r3, #3
 80030b4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80030b8:	4413      	add	r3, r2
 80030ba:	3b2c      	subs	r3, #44	; 0x2c
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	3b01      	subs	r3, #1
 80030c0:	f003 0301 	and.w	r3, r3, #1
 80030c4:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	4403      	add	r3, r0
 80030cc:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	6819      	ldr	r1, [r3, #0]
 80030d2:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80030d6:	4613      	mov	r3, r2
 80030d8:	005b      	lsls	r3, r3, #1
 80030da:	4413      	add	r3, r2
 80030dc:	00db      	lsls	r3, r3, #3
 80030de:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80030e2:	4413      	add	r3, r2
 80030e4:	3b3c      	subs	r3, #60	; 0x3c
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4299      	cmp	r1, r3
 80030ea:	d03c      	beq.n	8003166 <HAL_OSPIM_Config+0x4c2>
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	6859      	ldr	r1, [r3, #4]
 80030f0:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80030f4:	4613      	mov	r3, r2
 80030f6:	005b      	lsls	r3, r3, #1
 80030f8:	4413      	add	r3, r2
 80030fa:	00db      	lsls	r3, r3, #3
 80030fc:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003100:	4413      	add	r3, r2
 8003102:	3b38      	subs	r3, #56	; 0x38
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4299      	cmp	r1, r3
 8003108:	d02d      	beq.n	8003166 <HAL_OSPIM_Config+0x4c2>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	6899      	ldr	r1, [r3, #8]
 800310e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003112:	4613      	mov	r3, r2
 8003114:	005b      	lsls	r3, r3, #1
 8003116:	4413      	add	r3, r2
 8003118:	00db      	lsls	r3, r3, #3
 800311a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800311e:	4413      	add	r3, r2
 8003120:	3b34      	subs	r3, #52	; 0x34
 8003122:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8003124:	4299      	cmp	r1, r3
 8003126:	d01e      	beq.n	8003166 <HAL_OSPIM_Config+0x4c2>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	68d9      	ldr	r1, [r3, #12]
 800312c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003130:	4613      	mov	r3, r2
 8003132:	005b      	lsls	r3, r3, #1
 8003134:	4413      	add	r3, r2
 8003136:	00db      	lsls	r3, r3, #3
 8003138:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800313c:	4413      	add	r3, r2
 800313e:	3b30      	subs	r3, #48	; 0x30
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4299      	cmp	r1, r3
 8003144:	d00f      	beq.n	8003166 <HAL_OSPIM_Config+0x4c2>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	6919      	ldr	r1, [r3, #16]
 800314a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800314e:	4613      	mov	r3, r2
 8003150:	005b      	lsls	r3, r3, #1
 8003152:	4413      	add	r3, r2
 8003154:	00db      	lsls	r3, r3, #3
 8003156:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800315a:	4413      	add	r3, r2
 800315c:	3b2c      	subs	r3, #44	; 0x2c
 800315e:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8003160:	4299      	cmp	r1, r3
 8003162:	f040 811e 	bne.w	80033a2 <HAL_OSPIM_Config+0x6fe>
    {
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	6819      	ldr	r1, [r3, #0]
 800316a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800316e:	4613      	mov	r3, r2
 8003170:	005b      	lsls	r3, r3, #1
 8003172:	4413      	add	r3, r2
 8003174:	00db      	lsls	r3, r3, #3
 8003176:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800317a:	4413      	add	r3, r2
 800317c:	3b3c      	subs	r3, #60	; 0x3c
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4299      	cmp	r1, r3
 8003182:	d135      	bne.n	80031f0 <HAL_OSPIM_Config+0x54c>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	6859      	ldr	r1, [r3, #4]
 8003188:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800318c:	4613      	mov	r3, r2
 800318e:	005b      	lsls	r3, r3, #1
 8003190:	4413      	add	r3, r2
 8003192:	00db      	lsls	r3, r3, #3
 8003194:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003198:	4413      	add	r3, r2
 800319a:	3b38      	subs	r3, #56	; 0x38
 800319c:	681b      	ldr	r3, [r3, #0]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 800319e:	4299      	cmp	r1, r3
 80031a0:	d126      	bne.n	80031f0 <HAL_OSPIM_Config+0x54c>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	68d9      	ldr	r1, [r3, #12]
 80031a6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80031aa:	4613      	mov	r3, r2
 80031ac:	005b      	lsls	r3, r3, #1
 80031ae:	4413      	add	r3, r2
 80031b0:	00db      	lsls	r3, r3, #3
 80031b2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80031b6:	4413      	add	r3, r2
 80031b8:	3b30      	subs	r3, #48	; 0x30
 80031ba:	681b      	ldr	r3, [r3, #0]
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 80031bc:	4299      	cmp	r1, r3
 80031be:	d117      	bne.n	80031f0 <HAL_OSPIM_Config+0x54c>
          (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	6919      	ldr	r1, [r3, #16]
 80031c4:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80031c8:	4613      	mov	r3, r2
 80031ca:	005b      	lsls	r3, r3, #1
 80031cc:	4413      	add	r3, r2
 80031ce:	00db      	lsls	r3, r3, #3
 80031d0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80031d4:	4413      	add	r3, r2
 80031d6:	3b2c      	subs	r3, #44	; 0x2c
 80031d8:	681b      	ldr	r3, [r3, #0]
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 80031da:	4299      	cmp	r1, r3
 80031dc:	d108      	bne.n	80031f0 <HAL_OSPIM_Config+0x54c>
      {
        /* Multiplexing should be performed */
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 80031de:	4b03      	ldr	r3, [pc, #12]	; (80031ec <HAL_OSPIM_Config+0x548>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a02      	ldr	r2, [pc, #8]	; (80031ec <HAL_OSPIM_Config+0x548>)
 80031e4:	f043 0301 	orr.w	r3, r3, #1
 80031e8:	6013      	str	r3, [r2, #0]
 80031ea:	e0da      	b.n	80033a2 <HAL_OSPIM_Config+0x6fe>
 80031ec:	5200b400 	.word	0x5200b400
      }
      else
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 80031f0:	49c2      	ldr	r1, [pc, #776]	; (80034fc <HAL_OSPIM_Config+0x858>)
 80031f2:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80031f6:	4613      	mov	r3, r2
 80031f8:	005b      	lsls	r3, r3, #1
 80031fa:	4413      	add	r3, r2
 80031fc:	00db      	lsls	r3, r3, #3
 80031fe:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003202:	4413      	add	r3, r2
 8003204:	3b3c      	subs	r3, #60	; 0x3c
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	3b01      	subs	r3, #1
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	440b      	add	r3, r1
 800320e:	6859      	ldr	r1, [r3, #4]
 8003210:	48ba      	ldr	r0, [pc, #744]	; (80034fc <HAL_OSPIM_Config+0x858>)
 8003212:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003216:	4613      	mov	r3, r2
 8003218:	005b      	lsls	r3, r3, #1
 800321a:	4413      	add	r3, r2
 800321c:	00db      	lsls	r3, r3, #3
 800321e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003222:	4413      	add	r3, r2
 8003224:	3b3c      	subs	r3, #60	; 0x3c
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	3b01      	subs	r3, #1
 800322a:	f021 0201 	bic.w	r2, r1, #1
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	4403      	add	r3, r0
 8003232:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8003234:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003238:	4613      	mov	r3, r2
 800323a:	005b      	lsls	r3, r3, #1
 800323c:	4413      	add	r3, r2
 800323e:	00db      	lsls	r3, r3, #3
 8003240:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003244:	4413      	add	r3, r2
 8003246:	3b38      	subs	r3, #56	; 0x38
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d021      	beq.n	8003292 <HAL_OSPIM_Config+0x5ee>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 800324e:	49ab      	ldr	r1, [pc, #684]	; (80034fc <HAL_OSPIM_Config+0x858>)
 8003250:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003254:	4613      	mov	r3, r2
 8003256:	005b      	lsls	r3, r3, #1
 8003258:	4413      	add	r3, r2
 800325a:	00db      	lsls	r3, r3, #3
 800325c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003260:	4413      	add	r3, r2
 8003262:	3b38      	subs	r3, #56	; 0x38
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	3b01      	subs	r3, #1
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	440b      	add	r3, r1
 800326c:	6859      	ldr	r1, [r3, #4]
 800326e:	48a3      	ldr	r0, [pc, #652]	; (80034fc <HAL_OSPIM_Config+0x858>)
 8003270:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003274:	4613      	mov	r3, r2
 8003276:	005b      	lsls	r3, r3, #1
 8003278:	4413      	add	r3, r2
 800327a:	00db      	lsls	r3, r3, #3
 800327c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003280:	4413      	add	r3, r2
 8003282:	3b38      	subs	r3, #56	; 0x38
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	3b01      	subs	r3, #1
 8003288:	f021 0210 	bic.w	r2, r1, #16
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	4403      	add	r3, r0
 8003290:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8003292:	499a      	ldr	r1, [pc, #616]	; (80034fc <HAL_OSPIM_Config+0x858>)
 8003294:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003298:	4613      	mov	r3, r2
 800329a:	005b      	lsls	r3, r3, #1
 800329c:	4413      	add	r3, r2
 800329e:	00db      	lsls	r3, r3, #3
 80032a0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80032a4:	4413      	add	r3, r2
 80032a6:	3b34      	subs	r3, #52	; 0x34
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	3b01      	subs	r3, #1
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	440b      	add	r3, r1
 80032b0:	6859      	ldr	r1, [r3, #4]
 80032b2:	4892      	ldr	r0, [pc, #584]	; (80034fc <HAL_OSPIM_Config+0x858>)
 80032b4:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80032b8:	4613      	mov	r3, r2
 80032ba:	005b      	lsls	r3, r3, #1
 80032bc:	4413      	add	r3, r2
 80032be:	00db      	lsls	r3, r3, #3
 80032c0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80032c4:	4413      	add	r3, r2
 80032c6:	3b34      	subs	r3, #52	; 0x34
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	3b01      	subs	r3, #1
 80032cc:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	4403      	add	r3, r0
 80032d4:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80032d6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80032da:	4613      	mov	r3, r2
 80032dc:	005b      	lsls	r3, r3, #1
 80032de:	4413      	add	r3, r2
 80032e0:	00db      	lsls	r3, r3, #3
 80032e2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80032e6:	4413      	add	r3, r2
 80032e8:	3b30      	subs	r3, #48	; 0x30
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d025      	beq.n	800333c <HAL_OSPIM_Config+0x698>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 80032f0:	4982      	ldr	r1, [pc, #520]	; (80034fc <HAL_OSPIM_Config+0x858>)
 80032f2:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80032f6:	4613      	mov	r3, r2
 80032f8:	005b      	lsls	r3, r3, #1
 80032fa:	4413      	add	r3, r2
 80032fc:	00db      	lsls	r3, r3, #3
 80032fe:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003302:	4413      	add	r3, r2
 8003304:	3b30      	subs	r3, #48	; 0x30
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	3b01      	subs	r3, #1
 800330a:	f003 0301 	and.w	r3, r3, #1
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	440b      	add	r3, r1
 8003312:	6859      	ldr	r1, [r3, #4]
 8003314:	4879      	ldr	r0, [pc, #484]	; (80034fc <HAL_OSPIM_Config+0x858>)
 8003316:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800331a:	4613      	mov	r3, r2
 800331c:	005b      	lsls	r3, r3, #1
 800331e:	4413      	add	r3, r2
 8003320:	00db      	lsls	r3, r3, #3
 8003322:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003326:	4413      	add	r3, r2
 8003328:	3b30      	subs	r3, #48	; 0x30
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	3b01      	subs	r3, #1
 800332e:	f003 0301 	and.w	r3, r3, #1
 8003332:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	4403      	add	r3, r0
 800333a:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800333c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003340:	4613      	mov	r3, r2
 8003342:	005b      	lsls	r3, r3, #1
 8003344:	4413      	add	r3, r2
 8003346:	00db      	lsls	r3, r3, #3
 8003348:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800334c:	4413      	add	r3, r2
 800334e:	3b2c      	subs	r3, #44	; 0x2c
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d025      	beq.n	80033a2 <HAL_OSPIM_Config+0x6fe>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8003356:	4969      	ldr	r1, [pc, #420]	; (80034fc <HAL_OSPIM_Config+0x858>)
 8003358:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800335c:	4613      	mov	r3, r2
 800335e:	005b      	lsls	r3, r3, #1
 8003360:	4413      	add	r3, r2
 8003362:	00db      	lsls	r3, r3, #3
 8003364:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003368:	4413      	add	r3, r2
 800336a:	3b2c      	subs	r3, #44	; 0x2c
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	3b01      	subs	r3, #1
 8003370:	f003 0301 	and.w	r3, r3, #1
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	440b      	add	r3, r1
 8003378:	6859      	ldr	r1, [r3, #4]
 800337a:	4860      	ldr	r0, [pc, #384]	; (80034fc <HAL_OSPIM_Config+0x858>)
 800337c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003380:	4613      	mov	r3, r2
 8003382:	005b      	lsls	r3, r3, #1
 8003384:	4413      	add	r3, r2
 8003386:	00db      	lsls	r3, r3, #3
 8003388:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800338c:	4413      	add	r3, r2
 800338e:	3b2c      	subs	r3, #44	; 0x2c
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	3b01      	subs	r3, #1
 8003394:	f003 0301 	and.w	r3, r3, #1
 8003398:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	4403      	add	r3, r0
 80033a0:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /******************** Activation of new configuration *********************/
        MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 80033a2:	4a56      	ldr	r2, [pc, #344]	; (80034fc <HAL_OSPIM_Config+0x858>)
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	3b01      	subs	r3, #1
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	4413      	add	r3, r2
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033b6:	025b      	lsls	r3, r3, #9
 80033b8:	431a      	orrs	r2, r3
 80033ba:	4950      	ldr	r1, [pc, #320]	; (80034fc <HAL_OSPIM_Config+0x858>)
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	3b01      	subs	r3, #1
 80033c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	440b      	add	r3, r1
 80033ca:	605a      	str	r2, [r3, #4]
                  (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));

    if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	695b      	ldr	r3, [r3, #20]
 80033d0:	1e5a      	subs	r2, r3, #1
 80033d2:	4b4a      	ldr	r3, [pc, #296]	; (80034fc <HAL_OSPIM_Config+0x858>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	0c1b      	lsrs	r3, r3, #16
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	429a      	cmp	r2, r3
 80033dc:	d90a      	bls.n	80033f4 <HAL_OSPIM_Config+0x750>
    {
      MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 80033de:	4b47      	ldr	r3, [pc, #284]	; (80034fc <HAL_OSPIM_Config+0x858>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	695b      	ldr	r3, [r3, #20]
 80033ea:	3b01      	subs	r3, #1
 80033ec:	041b      	lsls	r3, r3, #16
 80033ee:	4943      	ldr	r1, [pc, #268]	; (80034fc <HAL_OSPIM_Config+0x858>)
 80033f0:	4313      	orrs	r3, r2
 80033f2:	600b      	str	r3, [r1, #0]
    }

    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 80033f4:	4b41      	ldr	r3, [pc, #260]	; (80034fc <HAL_OSPIM_Config+0x858>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 0301 	and.w	r3, r3, #1
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	f000 809b 	beq.w	8003538 <HAL_OSPIM_Config+0x894>
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 8003402:	4a3e      	ldr	r2, [pc, #248]	; (80034fc <HAL_OSPIM_Config+0x858>)
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	3b01      	subs	r3, #1
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	4413      	add	r3, r2
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	f023 0203 	bic.w	r2, r3, #3
 8003414:	4939      	ldr	r1, [pc, #228]	; (80034fc <HAL_OSPIM_Config+0x858>)
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	3b01      	subs	r3, #1
 800341c:	f042 0201 	orr.w	r2, r2, #1
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	440b      	add	r3, r1
 8003424:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d011      	beq.n	8003452 <HAL_OSPIM_Config+0x7ae>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 800342e:	4a33      	ldr	r2, [pc, #204]	; (80034fc <HAL_OSPIM_Config+0x858>)
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	3b01      	subs	r3, #1
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	4413      	add	r3, r2
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003440:	492e      	ldr	r1, [pc, #184]	; (80034fc <HAL_OSPIM_Config+0x858>)
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	3b01      	subs	r3, #1
 8003448:	f042 0210 	orr.w	r2, r2, #16
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	440b      	add	r3, r1
 8003450:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	68db      	ldr	r3, [r3, #12]
 8003456:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d016      	beq.n	800348c <HAL_OSPIM_Config+0x7e8>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 800345e:	4a27      	ldr	r2, [pc, #156]	; (80034fc <HAL_OSPIM_Config+0x858>)
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	3b01      	subs	r3, #1
 8003466:	f003 0301 	and.w	r3, r3, #1
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	4413      	add	r3, r2
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003474:	4921      	ldr	r1, [pc, #132]	; (80034fc <HAL_OSPIM_Config+0x858>)
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	3b01      	subs	r3, #1
 800347c:	f003 0301 	and.w	r3, r3, #1
 8003480:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	440b      	add	r3, r1
 8003488:	605a      	str	r2, [r3, #4]
 800348a:	e019      	b.n	80034c0 <HAL_OSPIM_Config+0x81c>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), OCTOSPIM_PCR_IOLEN);
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d015      	beq.n	80034c0 <HAL_OSPIM_Config+0x81c>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8003494:	4a19      	ldr	r2, [pc, #100]	; (80034fc <HAL_OSPIM_Config+0x858>)
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	68db      	ldr	r3, [r3, #12]
 800349a:	3b01      	subs	r3, #1
 800349c:	f003 0301 	and.w	r3, r3, #1
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	4413      	add	r3, r2
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80034aa:	4914      	ldr	r1, [pc, #80]	; (80034fc <HAL_OSPIM_Config+0x858>)
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	3b01      	subs	r3, #1
 80034b2:	f003 0301 	and.w	r3, r3, #1
 80034b6:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	440b      	add	r3, r1
 80034be:	605a      	str	r2, [r3, #4]
      else
      {
         /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	691b      	ldr	r3, [r3, #16]
 80034c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d019      	beq.n	8003500 <HAL_OSPIM_Config+0x85c>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 80034cc:	4a0b      	ldr	r2, [pc, #44]	; (80034fc <HAL_OSPIM_Config+0x858>)
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	691b      	ldr	r3, [r3, #16]
 80034d2:	3b01      	subs	r3, #1
 80034d4:	f003 0301 	and.w	r3, r3, #1
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	4413      	add	r3, r2
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80034e2:	4906      	ldr	r1, [pc, #24]	; (80034fc <HAL_OSPIM_Config+0x858>)
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	691b      	ldr	r3, [r3, #16]
 80034e8:	3b01      	subs	r3, #1
 80034ea:	f003 0301 	and.w	r3, r3, #1
 80034ee:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	440b      	add	r3, r1
 80034f6:	605a      	str	r2, [r3, #4]
 80034f8:	e0c6      	b.n	8003688 <HAL_OSPIM_Config+0x9e4>
 80034fa:	bf00      	nop
 80034fc:	5200b400 	.word	0x5200b400
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	691b      	ldr	r3, [r3, #16]
 8003504:	2b00      	cmp	r3, #0
 8003506:	f000 80bf 	beq.w	8003688 <HAL_OSPIM_Config+0x9e4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 800350a:	4a6e      	ldr	r2, [pc, #440]	; (80036c4 <HAL_OSPIM_Config+0xa20>)
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	691b      	ldr	r3, [r3, #16]
 8003510:	3b01      	subs	r3, #1
 8003512:	f003 0301 	and.w	r3, r3, #1
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	4413      	add	r3, r2
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003520:	4968      	ldr	r1, [pc, #416]	; (80036c4 <HAL_OSPIM_Config+0xa20>)
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	691b      	ldr	r3, [r3, #16]
 8003526:	3b01      	subs	r3, #1
 8003528:	f003 0301 	and.w	r3, r3, #1
 800352c:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	440b      	add	r3, r1
 8003534:	605a      	str	r2, [r3, #4]
 8003536:	e0a7      	b.n	8003688 <HAL_OSPIM_Config+0x9e4>
         /* Nothing to do */
      }
    }
    else
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 8003538:	4a62      	ldr	r2, [pc, #392]	; (80036c4 <HAL_OSPIM_Config+0xa20>)
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	3b01      	subs	r3, #1
 8003540:	009b      	lsls	r3, r3, #2
 8003542:	4413      	add	r3, r2
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	f023 0203 	bic.w	r2, r3, #3
 800354a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800354c:	005b      	lsls	r3, r3, #1
 800354e:	431a      	orrs	r2, r3
 8003550:	495c      	ldr	r1, [pc, #368]	; (80036c4 <HAL_OSPIM_Config+0xa20>)
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	3b01      	subs	r3, #1
 8003558:	f042 0201 	orr.w	r2, r2, #1
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	440b      	add	r3, r1
 8003560:	605a      	str	r2, [r3, #4]
                (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d014      	beq.n	8003594 <HAL_OSPIM_Config+0x8f0>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 800356a:	4a56      	ldr	r2, [pc, #344]	; (80036c4 <HAL_OSPIM_Config+0xa20>)
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	3b01      	subs	r3, #1
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	4413      	add	r3, r2
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800357c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800357e:	015b      	lsls	r3, r3, #5
 8003580:	431a      	orrs	r2, r3
 8003582:	4950      	ldr	r1, [pc, #320]	; (80036c4 <HAL_OSPIM_Config+0xa20>)
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	3b01      	subs	r3, #1
 800358a:	f042 0210 	orr.w	r2, r2, #16
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	440b      	add	r3, r1
 8003592:	605a      	str	r2, [r3, #4]
                  (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800359c:	2b00      	cmp	r3, #0
 800359e:	d019      	beq.n	80035d4 <HAL_OSPIM_Config+0x930>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 80035a0:	4a48      	ldr	r2, [pc, #288]	; (80036c4 <HAL_OSPIM_Config+0xa20>)
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	68db      	ldr	r3, [r3, #12]
 80035a6:	3b01      	subs	r3, #1
 80035a8:	f003 0301 	and.w	r3, r3, #1
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	4413      	add	r3, r2
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80035b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035b8:	049b      	lsls	r3, r3, #18
 80035ba:	431a      	orrs	r2, r3
 80035bc:	4941      	ldr	r1, [pc, #260]	; (80036c4 <HAL_OSPIM_Config+0xa20>)
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	68db      	ldr	r3, [r3, #12]
 80035c2:	3b01      	subs	r3, #1
 80035c4:	f003 0301 	and.w	r3, r3, #1
 80035c8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	440b      	add	r3, r1
 80035d0:	605a      	str	r2, [r3, #4]
 80035d2:	e01c      	b.n	800360e <HAL_OSPIM_Config+0x96a>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d018      	beq.n	800360e <HAL_OSPIM_Config+0x96a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 80035dc:	4a39      	ldr	r2, [pc, #228]	; (80036c4 <HAL_OSPIM_Config+0xa20>)
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	3b01      	subs	r3, #1
 80035e4:	f003 0301 	and.w	r3, r3, #1
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	4413      	add	r3, r2
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80035f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035f4:	069b      	lsls	r3, r3, #26
 80035f6:	431a      	orrs	r2, r3
 80035f8:	4932      	ldr	r1, [pc, #200]	; (80036c4 <HAL_OSPIM_Config+0xa20>)
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	68db      	ldr	r3, [r3, #12]
 80035fe:	3b01      	subs	r3, #1
 8003600:	f003 0301 	and.w	r3, r3, #1
 8003604:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	440b      	add	r3, r1
 800360c:	605a      	str	r2, [r3, #4]
      else
      {
         /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	691b      	ldr	r3, [r3, #16]
 8003612:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d019      	beq.n	800364e <HAL_OSPIM_Config+0x9aa>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 800361a:	4a2a      	ldr	r2, [pc, #168]	; (80036c4 <HAL_OSPIM_Config+0xa20>)
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	691b      	ldr	r3, [r3, #16]
 8003620:	3b01      	subs	r3, #1
 8003622:	f003 0301 	and.w	r3, r3, #1
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	4413      	add	r3, r2
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003630:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003632:	049b      	lsls	r3, r3, #18
 8003634:	431a      	orrs	r2, r3
 8003636:	4923      	ldr	r1, [pc, #140]	; (80036c4 <HAL_OSPIM_Config+0xa20>)
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	691b      	ldr	r3, [r3, #16]
 800363c:	3b01      	subs	r3, #1
 800363e:	f003 0301 	and.w	r3, r3, #1
 8003642:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	440b      	add	r3, r1
 800364a:	605a      	str	r2, [r3, #4]
 800364c:	e01c      	b.n	8003688 <HAL_OSPIM_Config+0x9e4>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	691b      	ldr	r3, [r3, #16]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d018      	beq.n	8003688 <HAL_OSPIM_Config+0x9e4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8003656:	4a1b      	ldr	r2, [pc, #108]	; (80036c4 <HAL_OSPIM_Config+0xa20>)
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	691b      	ldr	r3, [r3, #16]
 800365c:	3b01      	subs	r3, #1
 800365e:	f003 0301 	and.w	r3, r3, #1
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	4413      	add	r3, r2
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800366c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800366e:	069b      	lsls	r3, r3, #26
 8003670:	431a      	orrs	r2, r3
 8003672:	4914      	ldr	r1, [pc, #80]	; (80036c4 <HAL_OSPIM_Config+0xa20>)
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	691b      	ldr	r3, [r3, #16]
 8003678:	3b01      	subs	r3, #1
 800367a:	f003 0301 	and.w	r3, r3, #1
 800367e:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	440b      	add	r3, r1
 8003686:	605a      	str	r2, [r3, #4]
         /* Nothing to do */
      }
    }

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8003688:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800368c:	f003 0301 	and.w	r3, r3, #1
 8003690:	2b00      	cmp	r3, #0
 8003692:	d005      	beq.n	80036a0 <HAL_OSPIM_Config+0x9fc>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8003694:	4b0c      	ldr	r3, [pc, #48]	; (80036c8 <HAL_OSPIM_Config+0xa24>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a0b      	ldr	r2, [pc, #44]	; (80036c8 <HAL_OSPIM_Config+0xa24>)
 800369a:	f043 0301 	orr.w	r3, r3, #1
 800369e:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 80036a0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80036a4:	f003 0302 	and.w	r3, r3, #2
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d005      	beq.n	80036b8 <HAL_OSPIM_Config+0xa14>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 80036ac:	4b07      	ldr	r3, [pc, #28]	; (80036cc <HAL_OSPIM_Config+0xa28>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a06      	ldr	r2, [pc, #24]	; (80036cc <HAL_OSPIM_Config+0xa28>)
 80036b2:	f043 0301 	orr.w	r3, r3, #1
 80036b6:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 80036b8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3750      	adds	r7, #80	; 0x50
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	5200b400 	.word	0x5200b400
 80036c8:	52005000 	.word	0x52005000
 80036cc:	5200a000 	.word	0x5200a000

080036d0 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b084      	sub	sp, #16
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	60f8      	str	r0, [r7, #12]
 80036d8:	60b9      	str	r1, [r7, #8]
 80036da:	603b      	str	r3, [r7, #0]
 80036dc:	4613      	mov	r3, r2
 80036de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 80036e0:	e01a      	b.n	8003718 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036e2:	69bb      	ldr	r3, [r7, #24]
 80036e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036e8:	d016      	beq.n	8003718 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036ea:	f7fe fa19 	bl	8001b20 <HAL_GetTick>
 80036ee:	4602      	mov	r2, r0
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	1ad3      	subs	r3, r2, r3
 80036f4:	69ba      	ldr	r2, [r7, #24]
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d302      	bcc.n	8003700 <OSPI_WaitFlagStateUntilTimeout+0x30>
 80036fa:	69bb      	ldr	r3, [r7, #24]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d10b      	bne.n	8003718 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003706:	655a      	str	r2, [r3, #84]	; 0x54
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800370c:	f043 0201 	orr.w	r2, r3, #1
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	e00e      	b.n	8003736 <OSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	6a1a      	ldr	r2, [r3, #32]
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	4013      	ands	r3, r2
 8003722:	2b00      	cmp	r3, #0
 8003724:	bf14      	ite	ne
 8003726:	2301      	movne	r3, #1
 8003728:	2300      	moveq	r3, #0
 800372a:	b2db      	uxtb	r3, r3
 800372c:	461a      	mov	r2, r3
 800372e:	79fb      	ldrb	r3, [r7, #7]
 8003730:	429a      	cmp	r2, r3
 8003732:	d1d6      	bne.n	80036e2 <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003734:	2300      	movs	r3, #0
}
 8003736:	4618      	mov	r0, r3
 8003738:	3710      	adds	r7, #16
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
	...

08003740 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8003740:	b480      	push	{r7}
 8003742:	b087      	sub	sp, #28
 8003744:	af00      	add	r7, sp, #0
 8003746:	4603      	mov	r3, r0
 8003748:	6039      	str	r1, [r7, #0]
 800374a:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 800374c:	2300      	movs	r3, #0
 800374e:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8003750:	2300      	movs	r3, #0
 8003752:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8003754:	79fb      	ldrb	r3, [r7, #7]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d005      	beq.n	8003766 <OSPIM_GetConfig+0x26>
 800375a:	79fb      	ldrb	r3, [r7, #7]
 800375c:	2b02      	cmp	r3, #2
 800375e:	d802      	bhi.n	8003766 <OSPIM_GetConfig+0x26>
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d102      	bne.n	800376c <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	75fb      	strb	r3, [r7, #23]
 800376a:	e098      	b.n	800389e <OSPIM_GetConfig+0x15e>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	2200      	movs	r2, #0
 8003770:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	2200      	movs	r2, #0
 8003776:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	2200      	movs	r2, #0
 800377c:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	2200      	movs	r2, #0
 8003782:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	2200      	movs	r2, #0
 8003788:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 800378a:	79fb      	ldrb	r3, [r7, #7]
 800378c:	2b02      	cmp	r3, #2
 800378e:	d10b      	bne.n	80037a8 <OSPIM_GetConfig+0x68>
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 8003790:	4b46      	ldr	r3, [pc, #280]	; (80038ac <OSPIM_GetConfig+0x16c>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 0301 	and.w	r3, r3, #1
 8003798:	2b00      	cmp	r3, #0
 800379a:	d102      	bne.n	80037a2 <OSPIM_GetConfig+0x62>
      {
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 800379c:	4b44      	ldr	r3, [pc, #272]	; (80038b0 <OSPIM_GetConfig+0x170>)
 800379e:	613b      	str	r3, [r7, #16]
 80037a0:	e002      	b.n	80037a8 <OSPIM_GetConfig+0x68>
               | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
 80037a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80037a6:	613b      	str	r3, [r7, #16]
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 80037a8:	2300      	movs	r3, #0
 80037aa:	60fb      	str	r3, [r7, #12]
 80037ac:	e074      	b.n	8003898 <OSPIM_GetConfig+0x158>
    {
      reg = OCTOSPIM->PCR[index];
 80037ae:	4a3f      	ldr	r2, [pc, #252]	; (80038ac <OSPIM_GetConfig+0x16c>)
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	4413      	add	r3, r2
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	f003 0301 	and.w	r3, r3, #1
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d00a      	beq.n	80037da <OSPIM_GetConfig+0x9a>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 80037c4:	68ba      	ldr	r2, [r7, #8]
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	4053      	eors	r3, r2
 80037ca:	f003 0302 	and.w	r3, r3, #2
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d103      	bne.n	80037da <OSPIM_GetConfig+0x9a>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index+1U;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	1c5a      	adds	r2, r3, #1
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	f003 0310 	and.w	r3, r3, #16
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d00a      	beq.n	80037fa <OSPIM_GetConfig+0xba>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 80037e4:	68ba      	ldr	r2, [r7, #8]
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	4053      	eors	r3, r2
 80037ea:	f003 0320 	and.w	r3, r3, #32
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d103      	bne.n	80037fa <OSPIM_GetConfig+0xba>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index+1U;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	1c5a      	adds	r2, r3, #1
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003800:	2b00      	cmp	r3, #0
 8003802:	d00a      	beq.n	800381a <OSPIM_GetConfig+0xda>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8003804:	68ba      	ldr	r2, [r7, #8]
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	4053      	eors	r3, r2
 800380a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800380e:	2b00      	cmp	r3, #0
 8003810:	d103      	bne.n	800381a <OSPIM_GetConfig+0xda>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index+1U;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	1c5a      	adds	r2, r3, #1
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003820:	2b00      	cmp	r3, #0
 8003822:	d018      	beq.n	8003856 <OSPIM_GetConfig+0x116>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8003824:	68ba      	ldr	r2, [r7, #8]
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	4053      	eors	r3, r2
 800382a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d111      	bne.n	8003856 <OSPIM_GetConfig+0x116>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003838:	2b00      	cmp	r3, #0
 800383a:	d106      	bne.n	800384a <OSPIM_GetConfig+0x10a>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	3301      	adds	r3, #1
 8003840:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	60da      	str	r2, [r3, #12]
 8003848:	e005      	b.n	8003856 <OSPIM_GetConfig+0x116>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	3301      	adds	r3, #1
 800384e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800385c:	2b00      	cmp	r3, #0
 800385e:	d018      	beq.n	8003892 <OSPIM_GetConfig+0x152>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8003860:	68ba      	ldr	r2, [r7, #8]
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	4053      	eors	r3, r2
 8003866:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d111      	bne.n	8003892 <OSPIM_GetConfig+0x152>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003874:	2b00      	cmp	r3, #0
 8003876:	d106      	bne.n	8003886 <OSPIM_GetConfig+0x146>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	3301      	adds	r3, #1
 800387c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	611a      	str	r2, [r3, #16]
 8003884:	e005      	b.n	8003892 <OSPIM_GetConfig+0x152>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	3301      	adds	r3, #1
 800388a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	3301      	adds	r3, #1
 8003896:	60fb      	str	r3, [r7, #12]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2b01      	cmp	r3, #1
 800389c:	d987      	bls.n	80037ae <OSPIM_GetConfig+0x6e>
      }
    }
  }

  /* Return function status */
  return status;
 800389e:	7dfb      	ldrb	r3, [r7, #23]
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	371c      	adds	r7, #28
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr
 80038ac:	5200b400 	.word	0x5200b400
 80038b0:	04040222 	.word	0x04040222

080038b4 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 80038b4:	b480      	push	{r7}
 80038b6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 80038b8:	4b05      	ldr	r3, [pc, #20]	; (80038d0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a04      	ldr	r2, [pc, #16]	; (80038d0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80038be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038c2:	6013      	str	r3, [r2, #0]
}
 80038c4:	bf00      	nop
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr
 80038ce:	bf00      	nop
 80038d0:	58024800 	.word	0x58024800

080038d4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b084      	sub	sp, #16
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80038dc:	4b29      	ldr	r3, [pc, #164]	; (8003984 <HAL_PWREx_ConfigSupply+0xb0>)
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	f003 0307 	and.w	r3, r3, #7
 80038e4:	2b06      	cmp	r3, #6
 80038e6:	d00a      	beq.n	80038fe <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80038e8:	4b26      	ldr	r3, [pc, #152]	; (8003984 <HAL_PWREx_ConfigSupply+0xb0>)
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d001      	beq.n	80038fa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e040      	b.n	800397c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80038fa:	2300      	movs	r3, #0
 80038fc:	e03e      	b.n	800397c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80038fe:	4b21      	ldr	r3, [pc, #132]	; (8003984 <HAL_PWREx_ConfigSupply+0xb0>)
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003906:	491f      	ldr	r1, [pc, #124]	; (8003984 <HAL_PWREx_ConfigSupply+0xb0>)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	4313      	orrs	r3, r2
 800390c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800390e:	f7fe f907 	bl	8001b20 <HAL_GetTick>
 8003912:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003914:	e009      	b.n	800392a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003916:	f7fe f903 	bl	8001b20 <HAL_GetTick>
 800391a:	4602      	mov	r2, r0
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	1ad3      	subs	r3, r2, r3
 8003920:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003924:	d901      	bls.n	800392a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e028      	b.n	800397c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800392a:	4b16      	ldr	r3, [pc, #88]	; (8003984 <HAL_PWREx_ConfigSupply+0xb0>)
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003932:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003936:	d1ee      	bne.n	8003916 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2b1e      	cmp	r3, #30
 800393c:	d008      	beq.n	8003950 <HAL_PWREx_ConfigSupply+0x7c>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2b2e      	cmp	r3, #46	; 0x2e
 8003942:	d005      	beq.n	8003950 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2b1d      	cmp	r3, #29
 8003948:	d002      	beq.n	8003950 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2b2d      	cmp	r3, #45	; 0x2d
 800394e:	d114      	bne.n	800397a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003950:	f7fe f8e6 	bl	8001b20 <HAL_GetTick>
 8003954:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003956:	e009      	b.n	800396c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003958:	f7fe f8e2 	bl	8001b20 <HAL_GetTick>
 800395c:	4602      	mov	r2, r0
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003966:	d901      	bls.n	800396c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	e007      	b.n	800397c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800396c:	4b05      	ldr	r3, [pc, #20]	; (8003984 <HAL_PWREx_ConfigSupply+0xb0>)
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003974:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003978:	d1ee      	bne.n	8003958 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800397a:	2300      	movs	r3, #0
}
 800397c:	4618      	mov	r0, r3
 800397e:	3710      	adds	r7, #16
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}
 8003984:	58024800 	.word	0x58024800

08003988 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b08c      	sub	sp, #48	; 0x30
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d101      	bne.n	800399a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e3f3      	b.n	8004182 <HAL_RCC_OscConfig+0x7fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 0301 	and.w	r3, r3, #1
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	f000 80b3 	beq.w	8003b0e <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039a8:	4b9e      	ldr	r3, [pc, #632]	; (8003c24 <HAL_RCC_OscConfig+0x29c>)
 80039aa:	691b      	ldr	r3, [r3, #16]
 80039ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80039b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80039b2:	4b9c      	ldr	r3, [pc, #624]	; (8003c24 <HAL_RCC_OscConfig+0x29c>)
 80039b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b6:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80039b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ba:	2b10      	cmp	r3, #16
 80039bc:	d007      	beq.n	80039ce <HAL_RCC_OscConfig+0x46>
 80039be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039c0:	2b18      	cmp	r3, #24
 80039c2:	d112      	bne.n	80039ea <HAL_RCC_OscConfig+0x62>
 80039c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039c6:	f003 0303 	and.w	r3, r3, #3
 80039ca:	2b02      	cmp	r3, #2
 80039cc:	d10d      	bne.n	80039ea <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039ce:	4b95      	ldr	r3, [pc, #596]	; (8003c24 <HAL_RCC_OscConfig+0x29c>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	f000 8098 	beq.w	8003b0c <HAL_RCC_OscConfig+0x184>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	f040 8093 	bne.w	8003b0c <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e3cb      	b.n	8004182 <HAL_RCC_OscConfig+0x7fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039f2:	d106      	bne.n	8003a02 <HAL_RCC_OscConfig+0x7a>
 80039f4:	4b8b      	ldr	r3, [pc, #556]	; (8003c24 <HAL_RCC_OscConfig+0x29c>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a8a      	ldr	r2, [pc, #552]	; (8003c24 <HAL_RCC_OscConfig+0x29c>)
 80039fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039fe:	6013      	str	r3, [r2, #0]
 8003a00:	e058      	b.n	8003ab4 <HAL_RCC_OscConfig+0x12c>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d112      	bne.n	8003a30 <HAL_RCC_OscConfig+0xa8>
 8003a0a:	4b86      	ldr	r3, [pc, #536]	; (8003c24 <HAL_RCC_OscConfig+0x29c>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a85      	ldr	r2, [pc, #532]	; (8003c24 <HAL_RCC_OscConfig+0x29c>)
 8003a10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a14:	6013      	str	r3, [r2, #0]
 8003a16:	4b83      	ldr	r3, [pc, #524]	; (8003c24 <HAL_RCC_OscConfig+0x29c>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a82      	ldr	r2, [pc, #520]	; (8003c24 <HAL_RCC_OscConfig+0x29c>)
 8003a1c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003a20:	6013      	str	r3, [r2, #0]
 8003a22:	4b80      	ldr	r3, [pc, #512]	; (8003c24 <HAL_RCC_OscConfig+0x29c>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a7f      	ldr	r2, [pc, #508]	; (8003c24 <HAL_RCC_OscConfig+0x29c>)
 8003a28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a2c:	6013      	str	r3, [r2, #0]
 8003a2e:	e041      	b.n	8003ab4 <HAL_RCC_OscConfig+0x12c>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a38:	d112      	bne.n	8003a60 <HAL_RCC_OscConfig+0xd8>
 8003a3a:	4b7a      	ldr	r3, [pc, #488]	; (8003c24 <HAL_RCC_OscConfig+0x29c>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a79      	ldr	r2, [pc, #484]	; (8003c24 <HAL_RCC_OscConfig+0x29c>)
 8003a40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a44:	6013      	str	r3, [r2, #0]
 8003a46:	4b77      	ldr	r3, [pc, #476]	; (8003c24 <HAL_RCC_OscConfig+0x29c>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a76      	ldr	r2, [pc, #472]	; (8003c24 <HAL_RCC_OscConfig+0x29c>)
 8003a4c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003a50:	6013      	str	r3, [r2, #0]
 8003a52:	4b74      	ldr	r3, [pc, #464]	; (8003c24 <HAL_RCC_OscConfig+0x29c>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a73      	ldr	r2, [pc, #460]	; (8003c24 <HAL_RCC_OscConfig+0x29c>)
 8003a58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a5c:	6013      	str	r3, [r2, #0]
 8003a5e:	e029      	b.n	8003ab4 <HAL_RCC_OscConfig+0x12c>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8003a68:	d112      	bne.n	8003a90 <HAL_RCC_OscConfig+0x108>
 8003a6a:	4b6e      	ldr	r3, [pc, #440]	; (8003c24 <HAL_RCC_OscConfig+0x29c>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a6d      	ldr	r2, [pc, #436]	; (8003c24 <HAL_RCC_OscConfig+0x29c>)
 8003a70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a74:	6013      	str	r3, [r2, #0]
 8003a76:	4b6b      	ldr	r3, [pc, #428]	; (8003c24 <HAL_RCC_OscConfig+0x29c>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a6a      	ldr	r2, [pc, #424]	; (8003c24 <HAL_RCC_OscConfig+0x29c>)
 8003a7c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a80:	6013      	str	r3, [r2, #0]
 8003a82:	4b68      	ldr	r3, [pc, #416]	; (8003c24 <HAL_RCC_OscConfig+0x29c>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a67      	ldr	r2, [pc, #412]	; (8003c24 <HAL_RCC_OscConfig+0x29c>)
 8003a88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a8c:	6013      	str	r3, [r2, #0]
 8003a8e:	e011      	b.n	8003ab4 <HAL_RCC_OscConfig+0x12c>
 8003a90:	4b64      	ldr	r3, [pc, #400]	; (8003c24 <HAL_RCC_OscConfig+0x29c>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a63      	ldr	r2, [pc, #396]	; (8003c24 <HAL_RCC_OscConfig+0x29c>)
 8003a96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a9a:	6013      	str	r3, [r2, #0]
 8003a9c:	4b61      	ldr	r3, [pc, #388]	; (8003c24 <HAL_RCC_OscConfig+0x29c>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a60      	ldr	r2, [pc, #384]	; (8003c24 <HAL_RCC_OscConfig+0x29c>)
 8003aa2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003aa6:	6013      	str	r3, [r2, #0]
 8003aa8:	4b5e      	ldr	r3, [pc, #376]	; (8003c24 <HAL_RCC_OscConfig+0x29c>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a5d      	ldr	r2, [pc, #372]	; (8003c24 <HAL_RCC_OscConfig+0x29c>)
 8003aae:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003ab2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d013      	beq.n	8003ae4 <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003abc:	f7fe f830 	bl	8001b20 <HAL_GetTick>
 8003ac0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003ac2:	e008      	b.n	8003ad6 <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ac4:	f7fe f82c 	bl	8001b20 <HAL_GetTick>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	2b64      	cmp	r3, #100	; 0x64
 8003ad0:	d901      	bls.n	8003ad6 <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	e355      	b.n	8004182 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003ad6:	4b53      	ldr	r3, [pc, #332]	; (8003c24 <HAL_RCC_OscConfig+0x29c>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d0f0      	beq.n	8003ac4 <HAL_RCC_OscConfig+0x13c>
 8003ae2:	e014      	b.n	8003b0e <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ae4:	f7fe f81c 	bl	8001b20 <HAL_GetTick>
 8003ae8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003aea:	e008      	b.n	8003afe <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003aec:	f7fe f818 	bl	8001b20 <HAL_GetTick>
 8003af0:	4602      	mov	r2, r0
 8003af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	2b64      	cmp	r3, #100	; 0x64
 8003af8:	d901      	bls.n	8003afe <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e341      	b.n	8004182 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003afe:	4b49      	ldr	r3, [pc, #292]	; (8003c24 <HAL_RCC_OscConfig+0x29c>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d1f0      	bne.n	8003aec <HAL_RCC_OscConfig+0x164>
 8003b0a:	e000      	b.n	8003b0e <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 0302 	and.w	r3, r3, #2
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	f000 808c 	beq.w	8003c34 <HAL_RCC_OscConfig+0x2ac>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b1c:	4b41      	ldr	r3, [pc, #260]	; (8003c24 <HAL_RCC_OscConfig+0x29c>)
 8003b1e:	691b      	ldr	r3, [r3, #16]
 8003b20:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b24:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003b26:	4b3f      	ldr	r3, [pc, #252]	; (8003c24 <HAL_RCC_OscConfig+0x29c>)
 8003b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b2a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003b2c:	6a3b      	ldr	r3, [r7, #32]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d007      	beq.n	8003b42 <HAL_RCC_OscConfig+0x1ba>
 8003b32:	6a3b      	ldr	r3, [r7, #32]
 8003b34:	2b18      	cmp	r3, #24
 8003b36:	d137      	bne.n	8003ba8 <HAL_RCC_OscConfig+0x220>
 8003b38:	69fb      	ldr	r3, [r7, #28]
 8003b3a:	f003 0303 	and.w	r3, r3, #3
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d132      	bne.n	8003ba8 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b42:	4b38      	ldr	r3, [pc, #224]	; (8003c24 <HAL_RCC_OscConfig+0x29c>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 0304 	and.w	r3, r3, #4
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d005      	beq.n	8003b5a <HAL_RCC_OscConfig+0x1d2>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d101      	bne.n	8003b5a <HAL_RCC_OscConfig+0x1d2>
      {
        return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e313      	b.n	8004182 <HAL_RCC_OscConfig+0x7fa>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003b5a:	4b32      	ldr	r3, [pc, #200]	; (8003c24 <HAL_RCC_OscConfig+0x29c>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f023 0219 	bic.w	r2, r3, #25
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	68db      	ldr	r3, [r3, #12]
 8003b66:	492f      	ldr	r1, [pc, #188]	; (8003c24 <HAL_RCC_OscConfig+0x29c>)
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003b6c:	f7fd ffd8 	bl	8001b20 <HAL_GetTick>
 8003b70:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b72:	e008      	b.n	8003b86 <HAL_RCC_OscConfig+0x1fe>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b74:	f7fd ffd4 	bl	8001b20 <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	2b02      	cmp	r3, #2
 8003b80:	d901      	bls.n	8003b86 <HAL_RCC_OscConfig+0x1fe>
            {
              return HAL_TIMEOUT;
 8003b82:	2303      	movs	r3, #3
 8003b84:	e2fd      	b.n	8004182 <HAL_RCC_OscConfig+0x7fa>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b86:	4b27      	ldr	r3, [pc, #156]	; (8003c24 <HAL_RCC_OscConfig+0x29c>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 0304 	and.w	r3, r3, #4
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d0f0      	beq.n	8003b74 <HAL_RCC_OscConfig+0x1ec>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b92:	4b24      	ldr	r3, [pc, #144]	; (8003c24 <HAL_RCC_OscConfig+0x29c>)
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	691b      	ldr	r3, [r3, #16]
 8003b9e:	061b      	lsls	r3, r3, #24
 8003ba0:	4920      	ldr	r1, [pc, #128]	; (8003c24 <HAL_RCC_OscConfig+0x29c>)
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ba6:	e045      	b.n	8003c34 <HAL_RCC_OscConfig+0x2ac>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d026      	beq.n	8003bfe <HAL_RCC_OscConfig+0x276>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003bb0:	4b1c      	ldr	r3, [pc, #112]	; (8003c24 <HAL_RCC_OscConfig+0x29c>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f023 0219 	bic.w	r2, r3, #25
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	4919      	ldr	r1, [pc, #100]	; (8003c24 <HAL_RCC_OscConfig+0x29c>)
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bc2:	f7fd ffad 	bl	8001b20 <HAL_GetTick>
 8003bc6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003bc8:	e008      	b.n	8003bdc <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bca:	f7fd ffa9 	bl	8001b20 <HAL_GetTick>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd2:	1ad3      	subs	r3, r2, r3
 8003bd4:	2b02      	cmp	r3, #2
 8003bd6:	d901      	bls.n	8003bdc <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8003bd8:	2303      	movs	r3, #3
 8003bda:	e2d2      	b.n	8004182 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003bdc:	4b11      	ldr	r3, [pc, #68]	; (8003c24 <HAL_RCC_OscConfig+0x29c>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 0304 	and.w	r3, r3, #4
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d0f0      	beq.n	8003bca <HAL_RCC_OscConfig+0x242>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003be8:	4b0e      	ldr	r3, [pc, #56]	; (8003c24 <HAL_RCC_OscConfig+0x29c>)
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	691b      	ldr	r3, [r3, #16]
 8003bf4:	061b      	lsls	r3, r3, #24
 8003bf6:	490b      	ldr	r1, [pc, #44]	; (8003c24 <HAL_RCC_OscConfig+0x29c>)
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	604b      	str	r3, [r1, #4]
 8003bfc:	e01a      	b.n	8003c34 <HAL_RCC_OscConfig+0x2ac>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bfe:	4b09      	ldr	r3, [pc, #36]	; (8003c24 <HAL_RCC_OscConfig+0x29c>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a08      	ldr	r2, [pc, #32]	; (8003c24 <HAL_RCC_OscConfig+0x29c>)
 8003c04:	f023 0301 	bic.w	r3, r3, #1
 8003c08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c0a:	f7fd ff89 	bl	8001b20 <HAL_GetTick>
 8003c0e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003c10:	e00a      	b.n	8003c28 <HAL_RCC_OscConfig+0x2a0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c12:	f7fd ff85 	bl	8001b20 <HAL_GetTick>
 8003c16:	4602      	mov	r2, r0
 8003c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1a:	1ad3      	subs	r3, r2, r3
 8003c1c:	2b02      	cmp	r3, #2
 8003c1e:	d903      	bls.n	8003c28 <HAL_RCC_OscConfig+0x2a0>
          {
            return HAL_TIMEOUT;
 8003c20:	2303      	movs	r3, #3
 8003c22:	e2ae      	b.n	8004182 <HAL_RCC_OscConfig+0x7fa>
 8003c24:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003c28:	4b99      	ldr	r3, [pc, #612]	; (8003e90 <HAL_RCC_OscConfig+0x508>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 0304 	and.w	r3, r3, #4
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d1ee      	bne.n	8003c12 <HAL_RCC_OscConfig+0x28a>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 0310 	and.w	r3, r3, #16
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d06a      	beq.n	8003d16 <HAL_RCC_OscConfig+0x38e>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c40:	4b93      	ldr	r3, [pc, #588]	; (8003e90 <HAL_RCC_OscConfig+0x508>)
 8003c42:	691b      	ldr	r3, [r3, #16]
 8003c44:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c48:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003c4a:	4b91      	ldr	r3, [pc, #580]	; (8003e90 <HAL_RCC_OscConfig+0x508>)
 8003c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c4e:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003c50:	69bb      	ldr	r3, [r7, #24]
 8003c52:	2b08      	cmp	r3, #8
 8003c54:	d007      	beq.n	8003c66 <HAL_RCC_OscConfig+0x2de>
 8003c56:	69bb      	ldr	r3, [r7, #24]
 8003c58:	2b18      	cmp	r3, #24
 8003c5a:	d11b      	bne.n	8003c94 <HAL_RCC_OscConfig+0x30c>
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	f003 0303 	and.w	r3, r3, #3
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d116      	bne.n	8003c94 <HAL_RCC_OscConfig+0x30c>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003c66:	4b8a      	ldr	r3, [pc, #552]	; (8003e90 <HAL_RCC_OscConfig+0x508>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d005      	beq.n	8003c7e <HAL_RCC_OscConfig+0x2f6>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	69db      	ldr	r3, [r3, #28]
 8003c76:	2b80      	cmp	r3, #128	; 0x80
 8003c78:	d001      	beq.n	8003c7e <HAL_RCC_OscConfig+0x2f6>
      {
        return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e281      	b.n	8004182 <HAL_RCC_OscConfig+0x7fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003c7e:	4b84      	ldr	r3, [pc, #528]	; (8003e90 <HAL_RCC_OscConfig+0x508>)
 8003c80:	68db      	ldr	r3, [r3, #12]
 8003c82:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6a1b      	ldr	r3, [r3, #32]
 8003c8a:	061b      	lsls	r3, r3, #24
 8003c8c:	4980      	ldr	r1, [pc, #512]	; (8003e90 <HAL_RCC_OscConfig+0x508>)
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003c92:	e040      	b.n	8003d16 <HAL_RCC_OscConfig+0x38e>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	69db      	ldr	r3, [r3, #28]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d023      	beq.n	8003ce4 <HAL_RCC_OscConfig+0x35c>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003c9c:	4b7c      	ldr	r3, [pc, #496]	; (8003e90 <HAL_RCC_OscConfig+0x508>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a7b      	ldr	r2, [pc, #492]	; (8003e90 <HAL_RCC_OscConfig+0x508>)
 8003ca2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ca6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ca8:	f7fd ff3a 	bl	8001b20 <HAL_GetTick>
 8003cac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003cae:	e008      	b.n	8003cc2 <HAL_RCC_OscConfig+0x33a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003cb0:	f7fd ff36 	bl	8001b20 <HAL_GetTick>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	2b02      	cmp	r3, #2
 8003cbc:	d901      	bls.n	8003cc2 <HAL_RCC_OscConfig+0x33a>
          {
            return HAL_TIMEOUT;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	e25f      	b.n	8004182 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003cc2:	4b73      	ldr	r3, [pc, #460]	; (8003e90 <HAL_RCC_OscConfig+0x508>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d0f0      	beq.n	8003cb0 <HAL_RCC_OscConfig+0x328>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003cce:	4b70      	ldr	r3, [pc, #448]	; (8003e90 <HAL_RCC_OscConfig+0x508>)
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6a1b      	ldr	r3, [r3, #32]
 8003cda:	061b      	lsls	r3, r3, #24
 8003cdc:	496c      	ldr	r1, [pc, #432]	; (8003e90 <HAL_RCC_OscConfig+0x508>)
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	60cb      	str	r3, [r1, #12]
 8003ce2:	e018      	b.n	8003d16 <HAL_RCC_OscConfig+0x38e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003ce4:	4b6a      	ldr	r3, [pc, #424]	; (8003e90 <HAL_RCC_OscConfig+0x508>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a69      	ldr	r2, [pc, #420]	; (8003e90 <HAL_RCC_OscConfig+0x508>)
 8003cea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cf0:	f7fd ff16 	bl	8001b20 <HAL_GetTick>
 8003cf4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003cf6:	e008      	b.n	8003d0a <HAL_RCC_OscConfig+0x382>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003cf8:	f7fd ff12 	bl	8001b20 <HAL_GetTick>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	2b02      	cmp	r3, #2
 8003d04:	d901      	bls.n	8003d0a <HAL_RCC_OscConfig+0x382>
          {
            return HAL_TIMEOUT;
 8003d06:	2303      	movs	r3, #3
 8003d08:	e23b      	b.n	8004182 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003d0a:	4b61      	ldr	r3, [pc, #388]	; (8003e90 <HAL_RCC_OscConfig+0x508>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d1f0      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x370>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 0308 	and.w	r3, r3, #8
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d036      	beq.n	8003d90 <HAL_RCC_OscConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	695b      	ldr	r3, [r3, #20]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d019      	beq.n	8003d5e <HAL_RCC_OscConfig+0x3d6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d2a:	4b59      	ldr	r3, [pc, #356]	; (8003e90 <HAL_RCC_OscConfig+0x508>)
 8003d2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d2e:	4a58      	ldr	r2, [pc, #352]	; (8003e90 <HAL_RCC_OscConfig+0x508>)
 8003d30:	f043 0301 	orr.w	r3, r3, #1
 8003d34:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d36:	f7fd fef3 	bl	8001b20 <HAL_GetTick>
 8003d3a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003d3c:	e008      	b.n	8003d50 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d3e:	f7fd feef 	bl	8001b20 <HAL_GetTick>
 8003d42:	4602      	mov	r2, r0
 8003d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d46:	1ad3      	subs	r3, r2, r3
 8003d48:	2b02      	cmp	r3, #2
 8003d4a:	d901      	bls.n	8003d50 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003d4c:	2303      	movs	r3, #3
 8003d4e:	e218      	b.n	8004182 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003d50:	4b4f      	ldr	r3, [pc, #316]	; (8003e90 <HAL_RCC_OscConfig+0x508>)
 8003d52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d54:	f003 0302 	and.w	r3, r3, #2
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d0f0      	beq.n	8003d3e <HAL_RCC_OscConfig+0x3b6>
 8003d5c:	e018      	b.n	8003d90 <HAL_RCC_OscConfig+0x408>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d5e:	4b4c      	ldr	r3, [pc, #304]	; (8003e90 <HAL_RCC_OscConfig+0x508>)
 8003d60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d62:	4a4b      	ldr	r2, [pc, #300]	; (8003e90 <HAL_RCC_OscConfig+0x508>)
 8003d64:	f023 0301 	bic.w	r3, r3, #1
 8003d68:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d6a:	f7fd fed9 	bl	8001b20 <HAL_GetTick>
 8003d6e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003d70:	e008      	b.n	8003d84 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d72:	f7fd fed5 	bl	8001b20 <HAL_GetTick>
 8003d76:	4602      	mov	r2, r0
 8003d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7a:	1ad3      	subs	r3, r2, r3
 8003d7c:	2b02      	cmp	r3, #2
 8003d7e:	d901      	bls.n	8003d84 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8003d80:	2303      	movs	r3, #3
 8003d82:	e1fe      	b.n	8004182 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003d84:	4b42      	ldr	r3, [pc, #264]	; (8003e90 <HAL_RCC_OscConfig+0x508>)
 8003d86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d88:	f003 0302 	and.w	r3, r3, #2
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d1f0      	bne.n	8003d72 <HAL_RCC_OscConfig+0x3ea>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 0320 	and.w	r3, r3, #32
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d036      	beq.n	8003e0a <HAL_RCC_OscConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	699b      	ldr	r3, [r3, #24]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d019      	beq.n	8003dd8 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003da4:	4b3a      	ldr	r3, [pc, #232]	; (8003e90 <HAL_RCC_OscConfig+0x508>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a39      	ldr	r2, [pc, #228]	; (8003e90 <HAL_RCC_OscConfig+0x508>)
 8003daa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003dae:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003db0:	f7fd feb6 	bl	8001b20 <HAL_GetTick>
 8003db4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003db6:	e008      	b.n	8003dca <HAL_RCC_OscConfig+0x442>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003db8:	f7fd feb2 	bl	8001b20 <HAL_GetTick>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc0:	1ad3      	subs	r3, r2, r3
 8003dc2:	2b02      	cmp	r3, #2
 8003dc4:	d901      	bls.n	8003dca <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	e1db      	b.n	8004182 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003dca:	4b31      	ldr	r3, [pc, #196]	; (8003e90 <HAL_RCC_OscConfig+0x508>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d0f0      	beq.n	8003db8 <HAL_RCC_OscConfig+0x430>
 8003dd6:	e018      	b.n	8003e0a <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003dd8:	4b2d      	ldr	r3, [pc, #180]	; (8003e90 <HAL_RCC_OscConfig+0x508>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a2c      	ldr	r2, [pc, #176]	; (8003e90 <HAL_RCC_OscConfig+0x508>)
 8003dde:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003de2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003de4:	f7fd fe9c 	bl	8001b20 <HAL_GetTick>
 8003de8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003dea:	e008      	b.n	8003dfe <HAL_RCC_OscConfig+0x476>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003dec:	f7fd fe98 	bl	8001b20 <HAL_GetTick>
 8003df0:	4602      	mov	r2, r0
 8003df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	2b02      	cmp	r3, #2
 8003df8:	d901      	bls.n	8003dfe <HAL_RCC_OscConfig+0x476>
        {
          return HAL_TIMEOUT;
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	e1c1      	b.n	8004182 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003dfe:	4b24      	ldr	r3, [pc, #144]	; (8003e90 <HAL_RCC_OscConfig+0x508>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d1f0      	bne.n	8003dec <HAL_RCC_OscConfig+0x464>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 0304 	and.w	r3, r3, #4
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	f000 80af 	beq.w	8003f76 <HAL_RCC_OscConfig+0x5ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003e18:	4b1e      	ldr	r3, [pc, #120]	; (8003e94 <HAL_RCC_OscConfig+0x50c>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a1d      	ldr	r2, [pc, #116]	; (8003e94 <HAL_RCC_OscConfig+0x50c>)
 8003e1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e22:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e24:	f7fd fe7c 	bl	8001b20 <HAL_GetTick>
 8003e28:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e2a:	e008      	b.n	8003e3e <HAL_RCC_OscConfig+0x4b6>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003e2c:	f7fd fe78 	bl	8001b20 <HAL_GetTick>
 8003e30:	4602      	mov	r2, r0
 8003e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e34:	1ad3      	subs	r3, r2, r3
 8003e36:	2b64      	cmp	r3, #100	; 0x64
 8003e38:	d901      	bls.n	8003e3e <HAL_RCC_OscConfig+0x4b6>
      {
        return HAL_TIMEOUT;
 8003e3a:	2303      	movs	r3, #3
 8003e3c:	e1a1      	b.n	8004182 <HAL_RCC_OscConfig+0x7fa>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e3e:	4b15      	ldr	r3, [pc, #84]	; (8003e94 <HAL_RCC_OscConfig+0x50c>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d0f0      	beq.n	8003e2c <HAL_RCC_OscConfig+0x4a4>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d106      	bne.n	8003e60 <HAL_RCC_OscConfig+0x4d8>
 8003e52:	4b0f      	ldr	r3, [pc, #60]	; (8003e90 <HAL_RCC_OscConfig+0x508>)
 8003e54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e56:	4a0e      	ldr	r2, [pc, #56]	; (8003e90 <HAL_RCC_OscConfig+0x508>)
 8003e58:	f043 0301 	orr.w	r3, r3, #1
 8003e5c:	6713      	str	r3, [r2, #112]	; 0x70
 8003e5e:	e05b      	b.n	8003f18 <HAL_RCC_OscConfig+0x590>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d117      	bne.n	8003e98 <HAL_RCC_OscConfig+0x510>
 8003e68:	4b09      	ldr	r3, [pc, #36]	; (8003e90 <HAL_RCC_OscConfig+0x508>)
 8003e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e6c:	4a08      	ldr	r2, [pc, #32]	; (8003e90 <HAL_RCC_OscConfig+0x508>)
 8003e6e:	f023 0301 	bic.w	r3, r3, #1
 8003e72:	6713      	str	r3, [r2, #112]	; 0x70
 8003e74:	4b06      	ldr	r3, [pc, #24]	; (8003e90 <HAL_RCC_OscConfig+0x508>)
 8003e76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e78:	4a05      	ldr	r2, [pc, #20]	; (8003e90 <HAL_RCC_OscConfig+0x508>)
 8003e7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e7e:	6713      	str	r3, [r2, #112]	; 0x70
 8003e80:	4b03      	ldr	r3, [pc, #12]	; (8003e90 <HAL_RCC_OscConfig+0x508>)
 8003e82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e84:	4a02      	ldr	r2, [pc, #8]	; (8003e90 <HAL_RCC_OscConfig+0x508>)
 8003e86:	f023 0304 	bic.w	r3, r3, #4
 8003e8a:	6713      	str	r3, [r2, #112]	; 0x70
 8003e8c:	e044      	b.n	8003f18 <HAL_RCC_OscConfig+0x590>
 8003e8e:	bf00      	nop
 8003e90:	58024400 	.word	0x58024400
 8003e94:	58024800 	.word	0x58024800
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	2b05      	cmp	r3, #5
 8003e9e:	d112      	bne.n	8003ec6 <HAL_RCC_OscConfig+0x53e>
 8003ea0:	4b95      	ldr	r3, [pc, #596]	; (80040f8 <HAL_RCC_OscConfig+0x770>)
 8003ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ea4:	4a94      	ldr	r2, [pc, #592]	; (80040f8 <HAL_RCC_OscConfig+0x770>)
 8003ea6:	f043 0304 	orr.w	r3, r3, #4
 8003eaa:	6713      	str	r3, [r2, #112]	; 0x70
 8003eac:	4b92      	ldr	r3, [pc, #584]	; (80040f8 <HAL_RCC_OscConfig+0x770>)
 8003eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eb0:	4a91      	ldr	r2, [pc, #580]	; (80040f8 <HAL_RCC_OscConfig+0x770>)
 8003eb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003eb6:	6713      	str	r3, [r2, #112]	; 0x70
 8003eb8:	4b8f      	ldr	r3, [pc, #572]	; (80040f8 <HAL_RCC_OscConfig+0x770>)
 8003eba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ebc:	4a8e      	ldr	r2, [pc, #568]	; (80040f8 <HAL_RCC_OscConfig+0x770>)
 8003ebe:	f043 0301 	orr.w	r3, r3, #1
 8003ec2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ec4:	e028      	b.n	8003f18 <HAL_RCC_OscConfig+0x590>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	2b85      	cmp	r3, #133	; 0x85
 8003ecc:	d112      	bne.n	8003ef4 <HAL_RCC_OscConfig+0x56c>
 8003ece:	4b8a      	ldr	r3, [pc, #552]	; (80040f8 <HAL_RCC_OscConfig+0x770>)
 8003ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ed2:	4a89      	ldr	r2, [pc, #548]	; (80040f8 <HAL_RCC_OscConfig+0x770>)
 8003ed4:	f043 0304 	orr.w	r3, r3, #4
 8003ed8:	6713      	str	r3, [r2, #112]	; 0x70
 8003eda:	4b87      	ldr	r3, [pc, #540]	; (80040f8 <HAL_RCC_OscConfig+0x770>)
 8003edc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ede:	4a86      	ldr	r2, [pc, #536]	; (80040f8 <HAL_RCC_OscConfig+0x770>)
 8003ee0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ee4:	6713      	str	r3, [r2, #112]	; 0x70
 8003ee6:	4b84      	ldr	r3, [pc, #528]	; (80040f8 <HAL_RCC_OscConfig+0x770>)
 8003ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eea:	4a83      	ldr	r2, [pc, #524]	; (80040f8 <HAL_RCC_OscConfig+0x770>)
 8003eec:	f043 0301 	orr.w	r3, r3, #1
 8003ef0:	6713      	str	r3, [r2, #112]	; 0x70
 8003ef2:	e011      	b.n	8003f18 <HAL_RCC_OscConfig+0x590>
 8003ef4:	4b80      	ldr	r3, [pc, #512]	; (80040f8 <HAL_RCC_OscConfig+0x770>)
 8003ef6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ef8:	4a7f      	ldr	r2, [pc, #508]	; (80040f8 <HAL_RCC_OscConfig+0x770>)
 8003efa:	f023 0301 	bic.w	r3, r3, #1
 8003efe:	6713      	str	r3, [r2, #112]	; 0x70
 8003f00:	4b7d      	ldr	r3, [pc, #500]	; (80040f8 <HAL_RCC_OscConfig+0x770>)
 8003f02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f04:	4a7c      	ldr	r2, [pc, #496]	; (80040f8 <HAL_RCC_OscConfig+0x770>)
 8003f06:	f023 0304 	bic.w	r3, r3, #4
 8003f0a:	6713      	str	r3, [r2, #112]	; 0x70
 8003f0c:	4b7a      	ldr	r3, [pc, #488]	; (80040f8 <HAL_RCC_OscConfig+0x770>)
 8003f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f10:	4a79      	ldr	r2, [pc, #484]	; (80040f8 <HAL_RCC_OscConfig+0x770>)
 8003f12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f16:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d015      	beq.n	8003f4c <HAL_RCC_OscConfig+0x5c4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f20:	f7fd fdfe 	bl	8001b20 <HAL_GetTick>
 8003f24:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003f26:	e00a      	b.n	8003f3e <HAL_RCC_OscConfig+0x5b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f28:	f7fd fdfa 	bl	8001b20 <HAL_GetTick>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d901      	bls.n	8003f3e <HAL_RCC_OscConfig+0x5b6>
        {
          return HAL_TIMEOUT;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	e121      	b.n	8004182 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003f3e:	4b6e      	ldr	r3, [pc, #440]	; (80040f8 <HAL_RCC_OscConfig+0x770>)
 8003f40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f42:	f003 0302 	and.w	r3, r3, #2
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d0ee      	beq.n	8003f28 <HAL_RCC_OscConfig+0x5a0>
 8003f4a:	e014      	b.n	8003f76 <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f4c:	f7fd fde8 	bl	8001b20 <HAL_GetTick>
 8003f50:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003f52:	e00a      	b.n	8003f6a <HAL_RCC_OscConfig+0x5e2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f54:	f7fd fde4 	bl	8001b20 <HAL_GetTick>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d901      	bls.n	8003f6a <HAL_RCC_OscConfig+0x5e2>
        {
          return HAL_TIMEOUT;
 8003f66:	2303      	movs	r3, #3
 8003f68:	e10b      	b.n	8004182 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003f6a:	4b63      	ldr	r3, [pc, #396]	; (80040f8 <HAL_RCC_OscConfig+0x770>)
 8003f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f6e:	f003 0302 	and.w	r3, r3, #2
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d1ee      	bne.n	8003f54 <HAL_RCC_OscConfig+0x5cc>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	f000 8100 	beq.w	8004180 <HAL_RCC_OscConfig+0x7f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003f80:	4b5d      	ldr	r3, [pc, #372]	; (80040f8 <HAL_RCC_OscConfig+0x770>)
 8003f82:	691b      	ldr	r3, [r3, #16]
 8003f84:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f88:	2b18      	cmp	r3, #24
 8003f8a:	f000 80bb 	beq.w	8004104 <HAL_RCC_OscConfig+0x77c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f92:	2b02      	cmp	r3, #2
 8003f94:	f040 8095 	bne.w	80040c2 <HAL_RCC_OscConfig+0x73a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f98:	4b57      	ldr	r3, [pc, #348]	; (80040f8 <HAL_RCC_OscConfig+0x770>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a56      	ldr	r2, [pc, #344]	; (80040f8 <HAL_RCC_OscConfig+0x770>)
 8003f9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003fa2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fa4:	f7fd fdbc 	bl	8001b20 <HAL_GetTick>
 8003fa8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003faa:	e008      	b.n	8003fbe <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fac:	f7fd fdb8 	bl	8001b20 <HAL_GetTick>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb4:	1ad3      	subs	r3, r2, r3
 8003fb6:	2b02      	cmp	r3, #2
 8003fb8:	d901      	bls.n	8003fbe <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 8003fba:	2303      	movs	r3, #3
 8003fbc:	e0e1      	b.n	8004182 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003fbe:	4b4e      	ldr	r3, [pc, #312]	; (80040f8 <HAL_RCC_OscConfig+0x770>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d1f0      	bne.n	8003fac <HAL_RCC_OscConfig+0x624>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fca:	4b4b      	ldr	r3, [pc, #300]	; (80040f8 <HAL_RCC_OscConfig+0x770>)
 8003fcc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003fce:	4b4b      	ldr	r3, [pc, #300]	; (80040fc <HAL_RCC_OscConfig+0x774>)
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003fd6:	687a      	ldr	r2, [r7, #4]
 8003fd8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003fda:	0112      	lsls	r2, r2, #4
 8003fdc:	430a      	orrs	r2, r1
 8003fde:	4946      	ldr	r1, [pc, #280]	; (80040f8 <HAL_RCC_OscConfig+0x770>)
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	628b      	str	r3, [r1, #40]	; 0x28
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fe8:	3b01      	subs	r3, #1
 8003fea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ff2:	3b01      	subs	r3, #1
 8003ff4:	025b      	lsls	r3, r3, #9
 8003ff6:	b29b      	uxth	r3, r3
 8003ff8:	431a      	orrs	r2, r3
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ffe:	3b01      	subs	r3, #1
 8004000:	041b      	lsls	r3, r3, #16
 8004002:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004006:	431a      	orrs	r2, r3
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800400c:	3b01      	subs	r3, #1
 800400e:	061b      	lsls	r3, r3, #24
 8004010:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004014:	4938      	ldr	r1, [pc, #224]	; (80040f8 <HAL_RCC_OscConfig+0x770>)
 8004016:	4313      	orrs	r3, r2
 8004018:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800401a:	4b37      	ldr	r3, [pc, #220]	; (80040f8 <HAL_RCC_OscConfig+0x770>)
 800401c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800401e:	4a36      	ldr	r2, [pc, #216]	; (80040f8 <HAL_RCC_OscConfig+0x770>)
 8004020:	f023 0301 	bic.w	r3, r3, #1
 8004024:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004026:	4b34      	ldr	r3, [pc, #208]	; (80040f8 <HAL_RCC_OscConfig+0x770>)
 8004028:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800402a:	4b35      	ldr	r3, [pc, #212]	; (8004100 <HAL_RCC_OscConfig+0x778>)
 800402c:	4013      	ands	r3, r2
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004032:	00d2      	lsls	r2, r2, #3
 8004034:	4930      	ldr	r1, [pc, #192]	; (80040f8 <HAL_RCC_OscConfig+0x770>)
 8004036:	4313      	orrs	r3, r2
 8004038:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800403a:	4b2f      	ldr	r3, [pc, #188]	; (80040f8 <HAL_RCC_OscConfig+0x770>)
 800403c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800403e:	f023 020c 	bic.w	r2, r3, #12
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004046:	492c      	ldr	r1, [pc, #176]	; (80040f8 <HAL_RCC_OscConfig+0x770>)
 8004048:	4313      	orrs	r3, r2
 800404a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800404c:	4b2a      	ldr	r3, [pc, #168]	; (80040f8 <HAL_RCC_OscConfig+0x770>)
 800404e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004050:	f023 0202 	bic.w	r2, r3, #2
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004058:	4927      	ldr	r1, [pc, #156]	; (80040f8 <HAL_RCC_OscConfig+0x770>)
 800405a:	4313      	orrs	r3, r2
 800405c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800405e:	4b26      	ldr	r3, [pc, #152]	; (80040f8 <HAL_RCC_OscConfig+0x770>)
 8004060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004062:	4a25      	ldr	r2, [pc, #148]	; (80040f8 <HAL_RCC_OscConfig+0x770>)
 8004064:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004068:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800406a:	4b23      	ldr	r3, [pc, #140]	; (80040f8 <HAL_RCC_OscConfig+0x770>)
 800406c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800406e:	4a22      	ldr	r2, [pc, #136]	; (80040f8 <HAL_RCC_OscConfig+0x770>)
 8004070:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004074:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004076:	4b20      	ldr	r3, [pc, #128]	; (80040f8 <HAL_RCC_OscConfig+0x770>)
 8004078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800407a:	4a1f      	ldr	r2, [pc, #124]	; (80040f8 <HAL_RCC_OscConfig+0x770>)
 800407c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004080:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004082:	4b1d      	ldr	r3, [pc, #116]	; (80040f8 <HAL_RCC_OscConfig+0x770>)
 8004084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004086:	4a1c      	ldr	r2, [pc, #112]	; (80040f8 <HAL_RCC_OscConfig+0x770>)
 8004088:	f043 0301 	orr.w	r3, r3, #1
 800408c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800408e:	4b1a      	ldr	r3, [pc, #104]	; (80040f8 <HAL_RCC_OscConfig+0x770>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a19      	ldr	r2, [pc, #100]	; (80040f8 <HAL_RCC_OscConfig+0x770>)
 8004094:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004098:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800409a:	f7fd fd41 	bl	8001b20 <HAL_GetTick>
 800409e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80040a0:	e008      	b.n	80040b4 <HAL_RCC_OscConfig+0x72c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040a2:	f7fd fd3d 	bl	8001b20 <HAL_GetTick>
 80040a6:	4602      	mov	r2, r0
 80040a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040aa:	1ad3      	subs	r3, r2, r3
 80040ac:	2b02      	cmp	r3, #2
 80040ae:	d901      	bls.n	80040b4 <HAL_RCC_OscConfig+0x72c>
          {
            return HAL_TIMEOUT;
 80040b0:	2303      	movs	r3, #3
 80040b2:	e066      	b.n	8004182 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80040b4:	4b10      	ldr	r3, [pc, #64]	; (80040f8 <HAL_RCC_OscConfig+0x770>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d0f0      	beq.n	80040a2 <HAL_RCC_OscConfig+0x71a>
 80040c0:	e05e      	b.n	8004180 <HAL_RCC_OscConfig+0x7f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040c2:	4b0d      	ldr	r3, [pc, #52]	; (80040f8 <HAL_RCC_OscConfig+0x770>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a0c      	ldr	r2, [pc, #48]	; (80040f8 <HAL_RCC_OscConfig+0x770>)
 80040c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ce:	f7fd fd27 	bl	8001b20 <HAL_GetTick>
 80040d2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80040d4:	e008      	b.n	80040e8 <HAL_RCC_OscConfig+0x760>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040d6:	f7fd fd23 	bl	8001b20 <HAL_GetTick>
 80040da:	4602      	mov	r2, r0
 80040dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040de:	1ad3      	subs	r3, r2, r3
 80040e0:	2b02      	cmp	r3, #2
 80040e2:	d901      	bls.n	80040e8 <HAL_RCC_OscConfig+0x760>
          {
            return HAL_TIMEOUT;
 80040e4:	2303      	movs	r3, #3
 80040e6:	e04c      	b.n	8004182 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80040e8:	4b03      	ldr	r3, [pc, #12]	; (80040f8 <HAL_RCC_OscConfig+0x770>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d1f0      	bne.n	80040d6 <HAL_RCC_OscConfig+0x74e>
 80040f4:	e044      	b.n	8004180 <HAL_RCC_OscConfig+0x7f8>
 80040f6:	bf00      	nop
 80040f8:	58024400 	.word	0x58024400
 80040fc:	fffffc0c 	.word	0xfffffc0c
 8004100:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004104:	4b21      	ldr	r3, [pc, #132]	; (800418c <HAL_RCC_OscConfig+0x804>)
 8004106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004108:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800410a:	4b20      	ldr	r3, [pc, #128]	; (800418c <HAL_RCC_OscConfig+0x804>)
 800410c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800410e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004114:	2b01      	cmp	r3, #1
 8004116:	d031      	beq.n	800417c <HAL_RCC_OscConfig+0x7f4>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	f003 0203 	and.w	r2, r3, #3
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004122:	429a      	cmp	r2, r3
 8004124:	d12a      	bne.n	800417c <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	091b      	lsrs	r3, r3, #4
 800412a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004132:	429a      	cmp	r2, r3
 8004134:	d122      	bne.n	800417c <HAL_RCC_OscConfig+0x7f4>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004140:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004142:	429a      	cmp	r2, r3
 8004144:	d11a      	bne.n	800417c <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	0a5b      	lsrs	r3, r3, #9
 800414a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004152:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004154:	429a      	cmp	r2, r3
 8004156:	d111      	bne.n	800417c <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	0c1b      	lsrs	r3, r3, #16
 800415c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004164:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004166:	429a      	cmp	r2, r3
 8004168:	d108      	bne.n	800417c <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	0e1b      	lsrs	r3, r3, #24
 800416e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004176:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004178:	429a      	cmp	r2, r3
 800417a:	d001      	beq.n	8004180 <HAL_RCC_OscConfig+0x7f8>
      {
        return HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	e000      	b.n	8004182 <HAL_RCC_OscConfig+0x7fa>
      }
    }
  }
  return HAL_OK;
 8004180:	2300      	movs	r3, #0
}
 8004182:	4618      	mov	r0, r3
 8004184:	3730      	adds	r7, #48	; 0x30
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}
 800418a:	bf00      	nop
 800418c:	58024400 	.word	0x58024400

08004190 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b086      	sub	sp, #24
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d101      	bne.n	80041a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	e19c      	b.n	80044de <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80041a4:	4b8a      	ldr	r3, [pc, #552]	; (80043d0 <HAL_RCC_ClockConfig+0x240>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 030f 	and.w	r3, r3, #15
 80041ac:	683a      	ldr	r2, [r7, #0]
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d910      	bls.n	80041d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041b2:	4b87      	ldr	r3, [pc, #540]	; (80043d0 <HAL_RCC_ClockConfig+0x240>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f023 020f 	bic.w	r2, r3, #15
 80041ba:	4985      	ldr	r1, [pc, #532]	; (80043d0 <HAL_RCC_ClockConfig+0x240>)
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	4313      	orrs	r3, r2
 80041c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041c2:	4b83      	ldr	r3, [pc, #524]	; (80043d0 <HAL_RCC_ClockConfig+0x240>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 030f 	and.w	r3, r3, #15
 80041ca:	683a      	ldr	r2, [r7, #0]
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d001      	beq.n	80041d4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	e184      	b.n	80044de <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 0304 	and.w	r3, r3, #4
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d010      	beq.n	8004202 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	691a      	ldr	r2, [r3, #16]
 80041e4:	4b7b      	ldr	r3, [pc, #492]	; (80043d4 <HAL_RCC_ClockConfig+0x244>)
 80041e6:	699b      	ldr	r3, [r3, #24]
 80041e8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d908      	bls.n	8004202 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80041f0:	4b78      	ldr	r3, [pc, #480]	; (80043d4 <HAL_RCC_ClockConfig+0x244>)
 80041f2:	699b      	ldr	r3, [r3, #24]
 80041f4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	691b      	ldr	r3, [r3, #16]
 80041fc:	4975      	ldr	r1, [pc, #468]	; (80043d4 <HAL_RCC_ClockConfig+0x244>)
 80041fe:	4313      	orrs	r3, r2
 8004200:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 0308 	and.w	r3, r3, #8
 800420a:	2b00      	cmp	r3, #0
 800420c:	d010      	beq.n	8004230 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	695a      	ldr	r2, [r3, #20]
 8004212:	4b70      	ldr	r3, [pc, #448]	; (80043d4 <HAL_RCC_ClockConfig+0x244>)
 8004214:	69db      	ldr	r3, [r3, #28]
 8004216:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800421a:	429a      	cmp	r2, r3
 800421c:	d908      	bls.n	8004230 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800421e:	4b6d      	ldr	r3, [pc, #436]	; (80043d4 <HAL_RCC_ClockConfig+0x244>)
 8004220:	69db      	ldr	r3, [r3, #28]
 8004222:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	695b      	ldr	r3, [r3, #20]
 800422a:	496a      	ldr	r1, [pc, #424]	; (80043d4 <HAL_RCC_ClockConfig+0x244>)
 800422c:	4313      	orrs	r3, r2
 800422e:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 0310 	and.w	r3, r3, #16
 8004238:	2b00      	cmp	r3, #0
 800423a:	d010      	beq.n	800425e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	699a      	ldr	r2, [r3, #24]
 8004240:	4b64      	ldr	r3, [pc, #400]	; (80043d4 <HAL_RCC_ClockConfig+0x244>)
 8004242:	69db      	ldr	r3, [r3, #28]
 8004244:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004248:	429a      	cmp	r2, r3
 800424a:	d908      	bls.n	800425e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800424c:	4b61      	ldr	r3, [pc, #388]	; (80043d4 <HAL_RCC_ClockConfig+0x244>)
 800424e:	69db      	ldr	r3, [r3, #28]
 8004250:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	699b      	ldr	r3, [r3, #24]
 8004258:	495e      	ldr	r1, [pc, #376]	; (80043d4 <HAL_RCC_ClockConfig+0x244>)
 800425a:	4313      	orrs	r3, r2
 800425c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 0320 	and.w	r3, r3, #32
 8004266:	2b00      	cmp	r3, #0
 8004268:	d010      	beq.n	800428c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	69da      	ldr	r2, [r3, #28]
 800426e:	4b59      	ldr	r3, [pc, #356]	; (80043d4 <HAL_RCC_ClockConfig+0x244>)
 8004270:	6a1b      	ldr	r3, [r3, #32]
 8004272:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004276:	429a      	cmp	r2, r3
 8004278:	d908      	bls.n	800428c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800427a:	4b56      	ldr	r3, [pc, #344]	; (80043d4 <HAL_RCC_ClockConfig+0x244>)
 800427c:	6a1b      	ldr	r3, [r3, #32]
 800427e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	69db      	ldr	r3, [r3, #28]
 8004286:	4953      	ldr	r1, [pc, #332]	; (80043d4 <HAL_RCC_ClockConfig+0x244>)
 8004288:	4313      	orrs	r3, r2
 800428a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 0302 	and.w	r3, r3, #2
 8004294:	2b00      	cmp	r3, #0
 8004296:	d010      	beq.n	80042ba <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	68da      	ldr	r2, [r3, #12]
 800429c:	4b4d      	ldr	r3, [pc, #308]	; (80043d4 <HAL_RCC_ClockConfig+0x244>)
 800429e:	699b      	ldr	r3, [r3, #24]
 80042a0:	f003 030f 	and.w	r3, r3, #15
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d908      	bls.n	80042ba <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042a8:	4b4a      	ldr	r3, [pc, #296]	; (80043d4 <HAL_RCC_ClockConfig+0x244>)
 80042aa:	699b      	ldr	r3, [r3, #24]
 80042ac:	f023 020f 	bic.w	r2, r3, #15
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	4947      	ldr	r1, [pc, #284]	; (80043d4 <HAL_RCC_ClockConfig+0x244>)
 80042b6:	4313      	orrs	r3, r2
 80042b8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 0301 	and.w	r3, r3, #1
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d055      	beq.n	8004372 <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80042c6:	4b43      	ldr	r3, [pc, #268]	; (80043d4 <HAL_RCC_ClockConfig+0x244>)
 80042c8:	699b      	ldr	r3, [r3, #24]
 80042ca:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	4940      	ldr	r1, [pc, #256]	; (80043d4 <HAL_RCC_ClockConfig+0x244>)
 80042d4:	4313      	orrs	r3, r2
 80042d6:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	2b02      	cmp	r3, #2
 80042de:	d107      	bne.n	80042f0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80042e0:	4b3c      	ldr	r3, [pc, #240]	; (80043d4 <HAL_RCC_ClockConfig+0x244>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d121      	bne.n	8004330 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	e0f6      	b.n	80044de <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	2b03      	cmp	r3, #3
 80042f6:	d107      	bne.n	8004308 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80042f8:	4b36      	ldr	r3, [pc, #216]	; (80043d4 <HAL_RCC_ClockConfig+0x244>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004300:	2b00      	cmp	r3, #0
 8004302:	d115      	bne.n	8004330 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	e0ea      	b.n	80044de <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	2b01      	cmp	r3, #1
 800430e:	d107      	bne.n	8004320 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004310:	4b30      	ldr	r3, [pc, #192]	; (80043d4 <HAL_RCC_ClockConfig+0x244>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004318:	2b00      	cmp	r3, #0
 800431a:	d109      	bne.n	8004330 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	e0de      	b.n	80044de <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004320:	4b2c      	ldr	r3, [pc, #176]	; (80043d4 <HAL_RCC_ClockConfig+0x244>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 0304 	and.w	r3, r3, #4
 8004328:	2b00      	cmp	r3, #0
 800432a:	d101      	bne.n	8004330 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	e0d6      	b.n	80044de <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004330:	4b28      	ldr	r3, [pc, #160]	; (80043d4 <HAL_RCC_ClockConfig+0x244>)
 8004332:	691b      	ldr	r3, [r3, #16]
 8004334:	f023 0207 	bic.w	r2, r3, #7
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	4925      	ldr	r1, [pc, #148]	; (80043d4 <HAL_RCC_ClockConfig+0x244>)
 800433e:	4313      	orrs	r3, r2
 8004340:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004342:	f7fd fbed 	bl	8001b20 <HAL_GetTick>
 8004346:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004348:	e00a      	b.n	8004360 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800434a:	f7fd fbe9 	bl	8001b20 <HAL_GetTick>
 800434e:	4602      	mov	r2, r0
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	1ad3      	subs	r3, r2, r3
 8004354:	f241 3288 	movw	r2, #5000	; 0x1388
 8004358:	4293      	cmp	r3, r2
 800435a:	d901      	bls.n	8004360 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800435c:	2303      	movs	r3, #3
 800435e:	e0be      	b.n	80044de <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004360:	4b1c      	ldr	r3, [pc, #112]	; (80043d4 <HAL_RCC_ClockConfig+0x244>)
 8004362:	691b      	ldr	r3, [r3, #16]
 8004364:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	00db      	lsls	r3, r3, #3
 800436e:	429a      	cmp	r2, r3
 8004370:	d1eb      	bne.n	800434a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 0302 	and.w	r3, r3, #2
 800437a:	2b00      	cmp	r3, #0
 800437c:	d010      	beq.n	80043a0 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	68da      	ldr	r2, [r3, #12]
 8004382:	4b14      	ldr	r3, [pc, #80]	; (80043d4 <HAL_RCC_ClockConfig+0x244>)
 8004384:	699b      	ldr	r3, [r3, #24]
 8004386:	f003 030f 	and.w	r3, r3, #15
 800438a:	429a      	cmp	r2, r3
 800438c:	d208      	bcs.n	80043a0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800438e:	4b11      	ldr	r3, [pc, #68]	; (80043d4 <HAL_RCC_ClockConfig+0x244>)
 8004390:	699b      	ldr	r3, [r3, #24]
 8004392:	f023 020f 	bic.w	r2, r3, #15
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	490e      	ldr	r1, [pc, #56]	; (80043d4 <HAL_RCC_ClockConfig+0x244>)
 800439c:	4313      	orrs	r3, r2
 800439e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80043a0:	4b0b      	ldr	r3, [pc, #44]	; (80043d0 <HAL_RCC_ClockConfig+0x240>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 030f 	and.w	r3, r3, #15
 80043a8:	683a      	ldr	r2, [r7, #0]
 80043aa:	429a      	cmp	r2, r3
 80043ac:	d214      	bcs.n	80043d8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043ae:	4b08      	ldr	r3, [pc, #32]	; (80043d0 <HAL_RCC_ClockConfig+0x240>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f023 020f 	bic.w	r2, r3, #15
 80043b6:	4906      	ldr	r1, [pc, #24]	; (80043d0 <HAL_RCC_ClockConfig+0x240>)
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	4313      	orrs	r3, r2
 80043bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043be:	4b04      	ldr	r3, [pc, #16]	; (80043d0 <HAL_RCC_ClockConfig+0x240>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 030f 	and.w	r3, r3, #15
 80043c6:	683a      	ldr	r2, [r7, #0]
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d005      	beq.n	80043d8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	e086      	b.n	80044de <HAL_RCC_ClockConfig+0x34e>
 80043d0:	52002000 	.word	0x52002000
 80043d4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 0304 	and.w	r3, r3, #4
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d010      	beq.n	8004406 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	691a      	ldr	r2, [r3, #16]
 80043e8:	4b3f      	ldr	r3, [pc, #252]	; (80044e8 <HAL_RCC_ClockConfig+0x358>)
 80043ea:	699b      	ldr	r3, [r3, #24]
 80043ec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d208      	bcs.n	8004406 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80043f4:	4b3c      	ldr	r3, [pc, #240]	; (80044e8 <HAL_RCC_ClockConfig+0x358>)
 80043f6:	699b      	ldr	r3, [r3, #24]
 80043f8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	691b      	ldr	r3, [r3, #16]
 8004400:	4939      	ldr	r1, [pc, #228]	; (80044e8 <HAL_RCC_ClockConfig+0x358>)
 8004402:	4313      	orrs	r3, r2
 8004404:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 0308 	and.w	r3, r3, #8
 800440e:	2b00      	cmp	r3, #0
 8004410:	d010      	beq.n	8004434 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	695a      	ldr	r2, [r3, #20]
 8004416:	4b34      	ldr	r3, [pc, #208]	; (80044e8 <HAL_RCC_ClockConfig+0x358>)
 8004418:	69db      	ldr	r3, [r3, #28]
 800441a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800441e:	429a      	cmp	r2, r3
 8004420:	d208      	bcs.n	8004434 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004422:	4b31      	ldr	r3, [pc, #196]	; (80044e8 <HAL_RCC_ClockConfig+0x358>)
 8004424:	69db      	ldr	r3, [r3, #28]
 8004426:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	695b      	ldr	r3, [r3, #20]
 800442e:	492e      	ldr	r1, [pc, #184]	; (80044e8 <HAL_RCC_ClockConfig+0x358>)
 8004430:	4313      	orrs	r3, r2
 8004432:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f003 0310 	and.w	r3, r3, #16
 800443c:	2b00      	cmp	r3, #0
 800443e:	d010      	beq.n	8004462 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	699a      	ldr	r2, [r3, #24]
 8004444:	4b28      	ldr	r3, [pc, #160]	; (80044e8 <HAL_RCC_ClockConfig+0x358>)
 8004446:	69db      	ldr	r3, [r3, #28]
 8004448:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800444c:	429a      	cmp	r2, r3
 800444e:	d208      	bcs.n	8004462 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004450:	4b25      	ldr	r3, [pc, #148]	; (80044e8 <HAL_RCC_ClockConfig+0x358>)
 8004452:	69db      	ldr	r3, [r3, #28]
 8004454:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	699b      	ldr	r3, [r3, #24]
 800445c:	4922      	ldr	r1, [pc, #136]	; (80044e8 <HAL_RCC_ClockConfig+0x358>)
 800445e:	4313      	orrs	r3, r2
 8004460:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 0320 	and.w	r3, r3, #32
 800446a:	2b00      	cmp	r3, #0
 800446c:	d010      	beq.n	8004490 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	69da      	ldr	r2, [r3, #28]
 8004472:	4b1d      	ldr	r3, [pc, #116]	; (80044e8 <HAL_RCC_ClockConfig+0x358>)
 8004474:	6a1b      	ldr	r3, [r3, #32]
 8004476:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800447a:	429a      	cmp	r2, r3
 800447c:	d208      	bcs.n	8004490 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800447e:	4b1a      	ldr	r3, [pc, #104]	; (80044e8 <HAL_RCC_ClockConfig+0x358>)
 8004480:	6a1b      	ldr	r3, [r3, #32]
 8004482:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	69db      	ldr	r3, [r3, #28]
 800448a:	4917      	ldr	r1, [pc, #92]	; (80044e8 <HAL_RCC_ClockConfig+0x358>)
 800448c:	4313      	orrs	r3, r2
 800448e:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8004490:	f000 f89e 	bl	80045d0 <HAL_RCC_GetSysClockFreq>
 8004494:	4602      	mov	r2, r0
 8004496:	4b14      	ldr	r3, [pc, #80]	; (80044e8 <HAL_RCC_ClockConfig+0x358>)
 8004498:	699b      	ldr	r3, [r3, #24]
 800449a:	0a1b      	lsrs	r3, r3, #8
 800449c:	f003 030f 	and.w	r3, r3, #15
 80044a0:	4912      	ldr	r1, [pc, #72]	; (80044ec <HAL_RCC_ClockConfig+0x35c>)
 80044a2:	5ccb      	ldrb	r3, [r1, r3]
 80044a4:	f003 031f 	and.w	r3, r3, #31
 80044a8:	fa22 f303 	lsr.w	r3, r2, r3
 80044ac:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80044ae:	4b0e      	ldr	r3, [pc, #56]	; (80044e8 <HAL_RCC_ClockConfig+0x358>)
 80044b0:	699b      	ldr	r3, [r3, #24]
 80044b2:	f003 030f 	and.w	r3, r3, #15
 80044b6:	4a0d      	ldr	r2, [pc, #52]	; (80044ec <HAL_RCC_ClockConfig+0x35c>)
 80044b8:	5cd3      	ldrb	r3, [r2, r3]
 80044ba:	f003 031f 	and.w	r3, r3, #31
 80044be:	693a      	ldr	r2, [r7, #16]
 80044c0:	fa22 f303 	lsr.w	r3, r2, r3
 80044c4:	4a0a      	ldr	r2, [pc, #40]	; (80044f0 <HAL_RCC_ClockConfig+0x360>)
 80044c6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80044c8:	4a0a      	ldr	r2, [pc, #40]	; (80044f4 <HAL_RCC_ClockConfig+0x364>)
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80044ce:	4b0a      	ldr	r3, [pc, #40]	; (80044f8 <HAL_RCC_ClockConfig+0x368>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4618      	mov	r0, r3
 80044d4:	f7fd fada 	bl	8001a8c <HAL_InitTick>
 80044d8:	4603      	mov	r3, r0
 80044da:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80044dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3718      	adds	r7, #24
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	bf00      	nop
 80044e8:	58024400 	.word	0x58024400
 80044ec:	08008480 	.word	0x08008480
 80044f0:	24000004 	.word	0x24000004
 80044f4:	24000000 	.word	0x24000000
 80044f8:	24000008 	.word	0x24000008

080044fc <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b08c      	sub	sp, #48	; 0x30
 8004500:	af00      	add	r7, sp, #0
 8004502:	60f8      	str	r0, [r7, #12]
 8004504:	60b9      	str	r1, [r7, #8]
 8004506:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d12a      	bne.n	8004564 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800450e:	4b2d      	ldr	r3, [pc, #180]	; (80045c4 <HAL_RCC_MCOConfig+0xc8>)
 8004510:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004514:	4a2b      	ldr	r2, [pc, #172]	; (80045c4 <HAL_RCC_MCOConfig+0xc8>)
 8004516:	f043 0301 	orr.w	r3, r3, #1
 800451a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800451e:	4b29      	ldr	r3, [pc, #164]	; (80045c4 <HAL_RCC_MCOConfig+0xc8>)
 8004520:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004524:	f003 0301 	and.w	r3, r3, #1
 8004528:	61bb      	str	r3, [r7, #24]
 800452a:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800452c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004530:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004532:	2302      	movs	r3, #2
 8004534:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004536:	2303      	movs	r3, #3
 8004538:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800453a:	2300      	movs	r3, #0
 800453c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800453e:	2300      	movs	r3, #0
 8004540:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8004542:	f107 031c 	add.w	r3, r7, #28
 8004546:	4619      	mov	r1, r3
 8004548:	481f      	ldr	r0, [pc, #124]	; (80045c8 <HAL_RCC_MCOConfig+0xcc>)
 800454a:	f7fd fbfd 	bl	8001d48 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800454e:	4b1d      	ldr	r3, [pc, #116]	; (80045c4 <HAL_RCC_MCOConfig+0xc8>)
 8004550:	691b      	ldr	r3, [r3, #16]
 8004552:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 8004556:	68b9      	ldr	r1, [r7, #8]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	430b      	orrs	r3, r1
 800455c:	4919      	ldr	r1, [pc, #100]	; (80045c4 <HAL_RCC_MCOConfig+0xc8>)
 800455e:	4313      	orrs	r3, r2
 8004560:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8004562:	e02a      	b.n	80045ba <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8004564:	4b17      	ldr	r3, [pc, #92]	; (80045c4 <HAL_RCC_MCOConfig+0xc8>)
 8004566:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800456a:	4a16      	ldr	r2, [pc, #88]	; (80045c4 <HAL_RCC_MCOConfig+0xc8>)
 800456c:	f043 0304 	orr.w	r3, r3, #4
 8004570:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8004574:	4b13      	ldr	r3, [pc, #76]	; (80045c4 <HAL_RCC_MCOConfig+0xc8>)
 8004576:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800457a:	f003 0304 	and.w	r3, r3, #4
 800457e:	617b      	str	r3, [r7, #20]
 8004580:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8004582:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004586:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004588:	2302      	movs	r3, #2
 800458a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800458c:	2303      	movs	r3, #3
 800458e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004590:	2300      	movs	r3, #0
 8004592:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8004594:	2300      	movs	r3, #0
 8004596:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8004598:	f107 031c 	add.w	r3, r7, #28
 800459c:	4619      	mov	r1, r3
 800459e:	480b      	ldr	r0, [pc, #44]	; (80045cc <HAL_RCC_MCOConfig+0xd0>)
 80045a0:	f7fd fbd2 	bl	8001d48 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 80045a4:	4b07      	ldr	r3, [pc, #28]	; (80045c4 <HAL_RCC_MCOConfig+0xc8>)
 80045a6:	691b      	ldr	r3, [r3, #16]
 80045a8:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	01d9      	lsls	r1, r3, #7
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	430b      	orrs	r3, r1
 80045b4:	4903      	ldr	r1, [pc, #12]	; (80045c4 <HAL_RCC_MCOConfig+0xc8>)
 80045b6:	4313      	orrs	r3, r2
 80045b8:	610b      	str	r3, [r1, #16]
}
 80045ba:	bf00      	nop
 80045bc:	3730      	adds	r7, #48	; 0x30
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	bf00      	nop
 80045c4:	58024400 	.word	0x58024400
 80045c8:	58020000 	.word	0x58020000
 80045cc:	58020800 	.word	0x58020800

080045d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b089      	sub	sp, #36	; 0x24
 80045d4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80045d6:	4bb3      	ldr	r3, [pc, #716]	; (80048a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045d8:	691b      	ldr	r3, [r3, #16]
 80045da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80045de:	2b18      	cmp	r3, #24
 80045e0:	f200 8155 	bhi.w	800488e <HAL_RCC_GetSysClockFreq+0x2be>
 80045e4:	a201      	add	r2, pc, #4	; (adr r2, 80045ec <HAL_RCC_GetSysClockFreq+0x1c>)
 80045e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ea:	bf00      	nop
 80045ec:	08004651 	.word	0x08004651
 80045f0:	0800488f 	.word	0x0800488f
 80045f4:	0800488f 	.word	0x0800488f
 80045f8:	0800488f 	.word	0x0800488f
 80045fc:	0800488f 	.word	0x0800488f
 8004600:	0800488f 	.word	0x0800488f
 8004604:	0800488f 	.word	0x0800488f
 8004608:	0800488f 	.word	0x0800488f
 800460c:	08004677 	.word	0x08004677
 8004610:	0800488f 	.word	0x0800488f
 8004614:	0800488f 	.word	0x0800488f
 8004618:	0800488f 	.word	0x0800488f
 800461c:	0800488f 	.word	0x0800488f
 8004620:	0800488f 	.word	0x0800488f
 8004624:	0800488f 	.word	0x0800488f
 8004628:	0800488f 	.word	0x0800488f
 800462c:	0800467d 	.word	0x0800467d
 8004630:	0800488f 	.word	0x0800488f
 8004634:	0800488f 	.word	0x0800488f
 8004638:	0800488f 	.word	0x0800488f
 800463c:	0800488f 	.word	0x0800488f
 8004640:	0800488f 	.word	0x0800488f
 8004644:	0800488f 	.word	0x0800488f
 8004648:	0800488f 	.word	0x0800488f
 800464c:	08004683 	.word	0x08004683
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004650:	4b94      	ldr	r3, [pc, #592]	; (80048a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 0320 	and.w	r3, r3, #32
 8004658:	2b00      	cmp	r3, #0
 800465a:	d009      	beq.n	8004670 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800465c:	4b91      	ldr	r3, [pc, #580]	; (80048a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	08db      	lsrs	r3, r3, #3
 8004662:	f003 0303 	and.w	r3, r3, #3
 8004666:	4a90      	ldr	r2, [pc, #576]	; (80048a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004668:	fa22 f303 	lsr.w	r3, r2, r3
 800466c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800466e:	e111      	b.n	8004894 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004670:	4b8d      	ldr	r3, [pc, #564]	; (80048a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004672:	61bb      	str	r3, [r7, #24]
    break;
 8004674:	e10e      	b.n	8004894 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004676:	4b8d      	ldr	r3, [pc, #564]	; (80048ac <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004678:	61bb      	str	r3, [r7, #24]
    break;
 800467a:	e10b      	b.n	8004894 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800467c:	4b8c      	ldr	r3, [pc, #560]	; (80048b0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800467e:	61bb      	str	r3, [r7, #24]
    break;
 8004680:	e108      	b.n	8004894 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004682:	4b88      	ldr	r3, [pc, #544]	; (80048a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004686:	f003 0303 	and.w	r3, r3, #3
 800468a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800468c:	4b85      	ldr	r3, [pc, #532]	; (80048a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800468e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004690:	091b      	lsrs	r3, r3, #4
 8004692:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004696:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004698:	4b82      	ldr	r3, [pc, #520]	; (80048a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800469a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800469c:	f003 0301 	and.w	r3, r3, #1
 80046a0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80046a2:	4b80      	ldr	r3, [pc, #512]	; (80048a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046a6:	08db      	lsrs	r3, r3, #3
 80046a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80046ac:	68fa      	ldr	r2, [r7, #12]
 80046ae:	fb02 f303 	mul.w	r3, r2, r3
 80046b2:	ee07 3a90 	vmov	s15, r3
 80046b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046ba:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	f000 80e1 	beq.w	8004888 <HAL_RCC_GetSysClockFreq+0x2b8>
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	2b02      	cmp	r3, #2
 80046ca:	f000 8083 	beq.w	80047d4 <HAL_RCC_GetSysClockFreq+0x204>
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	2b02      	cmp	r3, #2
 80046d2:	f200 80a1 	bhi.w	8004818 <HAL_RCC_GetSysClockFreq+0x248>
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d003      	beq.n	80046e4 <HAL_RCC_GetSysClockFreq+0x114>
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d056      	beq.n	8004790 <HAL_RCC_GetSysClockFreq+0x1c0>
 80046e2:	e099      	b.n	8004818 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80046e4:	4b6f      	ldr	r3, [pc, #444]	; (80048a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 0320 	and.w	r3, r3, #32
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d02d      	beq.n	800474c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80046f0:	4b6c      	ldr	r3, [pc, #432]	; (80048a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	08db      	lsrs	r3, r3, #3
 80046f6:	f003 0303 	and.w	r3, r3, #3
 80046fa:	4a6b      	ldr	r2, [pc, #428]	; (80048a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80046fc:	fa22 f303 	lsr.w	r3, r2, r3
 8004700:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	ee07 3a90 	vmov	s15, r3
 8004708:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	ee07 3a90 	vmov	s15, r3
 8004712:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004716:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800471a:	4b62      	ldr	r3, [pc, #392]	; (80048a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800471c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800471e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004722:	ee07 3a90 	vmov	s15, r3
 8004726:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800472a:	ed97 6a02 	vldr	s12, [r7, #8]
 800472e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80048b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004732:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004736:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800473a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800473e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004742:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004746:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800474a:	e087      	b.n	800485c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	ee07 3a90 	vmov	s15, r3
 8004752:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004756:	eddf 6a58 	vldr	s13, [pc, #352]	; 80048b8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800475a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800475e:	4b51      	ldr	r3, [pc, #324]	; (80048a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004762:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004766:	ee07 3a90 	vmov	s15, r3
 800476a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800476e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004772:	eddf 5a50 	vldr	s11, [pc, #320]	; 80048b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004776:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800477a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800477e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004782:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004786:	ee67 7a27 	vmul.f32	s15, s14, s15
 800478a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800478e:	e065      	b.n	800485c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	ee07 3a90 	vmov	s15, r3
 8004796:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800479a:	eddf 6a48 	vldr	s13, [pc, #288]	; 80048bc <HAL_RCC_GetSysClockFreq+0x2ec>
 800479e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047a2:	4b40      	ldr	r3, [pc, #256]	; (80048a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047aa:	ee07 3a90 	vmov	s15, r3
 80047ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80047b6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80048b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80047ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80047d2:	e043      	b.n	800485c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	ee07 3a90 	vmov	s15, r3
 80047da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047de:	eddf 6a38 	vldr	s13, [pc, #224]	; 80048c0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80047e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047e6:	4b2f      	ldr	r3, [pc, #188]	; (80048a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047ee:	ee07 3a90 	vmov	s15, r3
 80047f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80047fa:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80048b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80047fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004802:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004806:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800480a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800480e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004812:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004816:	e021      	b.n	800485c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	ee07 3a90 	vmov	s15, r3
 800481e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004822:	eddf 6a26 	vldr	s13, [pc, #152]	; 80048bc <HAL_RCC_GetSysClockFreq+0x2ec>
 8004826:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800482a:	4b1e      	ldr	r3, [pc, #120]	; (80048a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800482c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800482e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004832:	ee07 3a90 	vmov	s15, r3
 8004836:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800483a:	ed97 6a02 	vldr	s12, [r7, #8]
 800483e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80048b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004842:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004846:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800484a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800484e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004852:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004856:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800485a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800485c:	4b11      	ldr	r3, [pc, #68]	; (80048a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800485e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004860:	0a5b      	lsrs	r3, r3, #9
 8004862:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004866:	3301      	adds	r3, #1
 8004868:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	ee07 3a90 	vmov	s15, r3
 8004870:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004874:	edd7 6a07 	vldr	s13, [r7, #28]
 8004878:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800487c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004880:	ee17 3a90 	vmov	r3, s15
 8004884:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004886:	e005      	b.n	8004894 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8004888:	2300      	movs	r3, #0
 800488a:	61bb      	str	r3, [r7, #24]
    break;
 800488c:	e002      	b.n	8004894 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800488e:	4b07      	ldr	r3, [pc, #28]	; (80048ac <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004890:	61bb      	str	r3, [r7, #24]
    break;
 8004892:	bf00      	nop
  }

  return sysclockfreq;
 8004894:	69bb      	ldr	r3, [r7, #24]
}
 8004896:	4618      	mov	r0, r3
 8004898:	3724      	adds	r7, #36	; 0x24
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr
 80048a2:	bf00      	nop
 80048a4:	58024400 	.word	0x58024400
 80048a8:	03d09000 	.word	0x03d09000
 80048ac:	003d0900 	.word	0x003d0900
 80048b0:	016e3600 	.word	0x016e3600
 80048b4:	46000000 	.word	0x46000000
 80048b8:	4c742400 	.word	0x4c742400
 80048bc:	4a742400 	.word	0x4a742400
 80048c0:	4bb71b00 	.word	0x4bb71b00

080048c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b082      	sub	sp, #8
 80048c8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80048ca:	f7ff fe81 	bl	80045d0 <HAL_RCC_GetSysClockFreq>
 80048ce:	4602      	mov	r2, r0
 80048d0:	4b10      	ldr	r3, [pc, #64]	; (8004914 <HAL_RCC_GetHCLKFreq+0x50>)
 80048d2:	699b      	ldr	r3, [r3, #24]
 80048d4:	0a1b      	lsrs	r3, r3, #8
 80048d6:	f003 030f 	and.w	r3, r3, #15
 80048da:	490f      	ldr	r1, [pc, #60]	; (8004918 <HAL_RCC_GetHCLKFreq+0x54>)
 80048dc:	5ccb      	ldrb	r3, [r1, r3]
 80048de:	f003 031f 	and.w	r3, r3, #31
 80048e2:	fa22 f303 	lsr.w	r3, r2, r3
 80048e6:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80048e8:	4b0a      	ldr	r3, [pc, #40]	; (8004914 <HAL_RCC_GetHCLKFreq+0x50>)
 80048ea:	699b      	ldr	r3, [r3, #24]
 80048ec:	f003 030f 	and.w	r3, r3, #15
 80048f0:	4a09      	ldr	r2, [pc, #36]	; (8004918 <HAL_RCC_GetHCLKFreq+0x54>)
 80048f2:	5cd3      	ldrb	r3, [r2, r3]
 80048f4:	f003 031f 	and.w	r3, r3, #31
 80048f8:	687a      	ldr	r2, [r7, #4]
 80048fa:	fa22 f303 	lsr.w	r3, r2, r3
 80048fe:	4a07      	ldr	r2, [pc, #28]	; (800491c <HAL_RCC_GetHCLKFreq+0x58>)
 8004900:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004902:	4a07      	ldr	r2, [pc, #28]	; (8004920 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004908:	4b04      	ldr	r3, [pc, #16]	; (800491c <HAL_RCC_GetHCLKFreq+0x58>)
 800490a:	681b      	ldr	r3, [r3, #0]
}
 800490c:	4618      	mov	r0, r3
 800490e:	3708      	adds	r7, #8
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}
 8004914:	58024400 	.word	0x58024400
 8004918:	08008480 	.word	0x08008480
 800491c:	24000004 	.word	0x24000004
 8004920:	24000000 	.word	0x24000000

08004924 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8004928:	f7ff ffcc 	bl	80048c4 <HAL_RCC_GetHCLKFreq>
 800492c:	4602      	mov	r2, r0
 800492e:	4b06      	ldr	r3, [pc, #24]	; (8004948 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004930:	69db      	ldr	r3, [r3, #28]
 8004932:	091b      	lsrs	r3, r3, #4
 8004934:	f003 0307 	and.w	r3, r3, #7
 8004938:	4904      	ldr	r1, [pc, #16]	; (800494c <HAL_RCC_GetPCLK1Freq+0x28>)
 800493a:	5ccb      	ldrb	r3, [r1, r3]
 800493c:	f003 031f 	and.w	r3, r3, #31
 8004940:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8004944:	4618      	mov	r0, r3
 8004946:	bd80      	pop	{r7, pc}
 8004948:	58024400 	.word	0x58024400
 800494c:	08008480 	.word	0x08008480

08004950 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8004954:	f7ff ffb6 	bl	80048c4 <HAL_RCC_GetHCLKFreq>
 8004958:	4602      	mov	r2, r0
 800495a:	4b06      	ldr	r3, [pc, #24]	; (8004974 <HAL_RCC_GetPCLK2Freq+0x24>)
 800495c:	69db      	ldr	r3, [r3, #28]
 800495e:	0a1b      	lsrs	r3, r3, #8
 8004960:	f003 0307 	and.w	r3, r3, #7
 8004964:	4904      	ldr	r1, [pc, #16]	; (8004978 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004966:	5ccb      	ldrb	r3, [r1, r3]
 8004968:	f003 031f 	and.w	r3, r3, #31
 800496c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8004970:	4618      	mov	r0, r3
 8004972:	bd80      	pop	{r7, pc}
 8004974:	58024400 	.word	0x58024400
 8004978:	08008480 	.word	0x08008480

0800497c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b086      	sub	sp, #24
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004984:	2300      	movs	r3, #0
 8004986:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004988:	2300      	movs	r3, #0
 800498a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004994:	2b00      	cmp	r3, #0
 8004996:	d03f      	beq.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800499c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80049a0:	d02a      	beq.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80049a2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80049a6:	d824      	bhi.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80049a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80049ac:	d018      	beq.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80049ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80049b2:	d81e      	bhi.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d003      	beq.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80049b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049bc:	d007      	beq.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x52>
 80049be:	e018      	b.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049c0:	4ba6      	ldr	r3, [pc, #664]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80049c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049c4:	4aa5      	ldr	r2, [pc, #660]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80049c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049ca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80049cc:	e015      	b.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	3304      	adds	r3, #4
 80049d2:	2102      	movs	r1, #2
 80049d4:	4618      	mov	r0, r3
 80049d6:	f001 ff17 	bl	8006808 <RCCEx_PLL2_Config>
 80049da:	4603      	mov	r3, r0
 80049dc:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80049de:	e00c      	b.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	3324      	adds	r3, #36	; 0x24
 80049e4:	2102      	movs	r1, #2
 80049e6:	4618      	mov	r0, r3
 80049e8:	f001 ffc0 	bl	800696c <RCCEx_PLL3_Config>
 80049ec:	4603      	mov	r3, r0
 80049ee:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80049f0:	e003      	b.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	75fb      	strb	r3, [r7, #23]
      break;
 80049f6:	e000      	b.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80049f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049fa:	7dfb      	ldrb	r3, [r7, #23]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d109      	bne.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004a00:	4b96      	ldr	r3, [pc, #600]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004a02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a04:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a0c:	4993      	ldr	r1, [pc, #588]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	650b      	str	r3, [r1, #80]	; 0x50
 8004a12:	e001      	b.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a14:	7dfb      	ldrb	r3, [r7, #23]
 8004a16:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d03d      	beq.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a28:	2b04      	cmp	r3, #4
 8004a2a:	d826      	bhi.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004a2c:	a201      	add	r2, pc, #4	; (adr r2, 8004a34 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8004a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a32:	bf00      	nop
 8004a34:	08004a49 	.word	0x08004a49
 8004a38:	08004a57 	.word	0x08004a57
 8004a3c:	08004a69 	.word	0x08004a69
 8004a40:	08004a81 	.word	0x08004a81
 8004a44:	08004a81 	.word	0x08004a81
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a48:	4b84      	ldr	r3, [pc, #528]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a4c:	4a83      	ldr	r2, [pc, #524]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004a4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a52:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004a54:	e015      	b.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	3304      	adds	r3, #4
 8004a5a:	2100      	movs	r1, #0
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f001 fed3 	bl	8006808 <RCCEx_PLL2_Config>
 8004a62:	4603      	mov	r3, r0
 8004a64:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004a66:	e00c      	b.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	3324      	adds	r3, #36	; 0x24
 8004a6c:	2100      	movs	r1, #0
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f001 ff7c 	bl	800696c <RCCEx_PLL3_Config>
 8004a74:	4603      	mov	r3, r0
 8004a76:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004a78:	e003      	b.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	75fb      	strb	r3, [r7, #23]
      break;
 8004a7e:	e000      	b.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004a80:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a82:	7dfb      	ldrb	r3, [r7, #23]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d109      	bne.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a88:	4b74      	ldr	r3, [pc, #464]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004a8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a8c:	f023 0207 	bic.w	r2, r3, #7
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a94:	4971      	ldr	r1, [pc, #452]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004a96:	4313      	orrs	r3, r2
 8004a98:	650b      	str	r3, [r1, #80]	; 0x50
 8004a9a:	e001      	b.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a9c:	7dfb      	ldrb	r3, [r7, #23]
 8004a9e:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d04a      	beq.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ab0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8004ab4:	d031      	beq.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x19e>
 8004ab6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8004aba:	d82b      	bhi.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8004abc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ac0:	d02d      	beq.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8004ac2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ac6:	d825      	bhi.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8004ac8:	2bc0      	cmp	r3, #192	; 0xc0
 8004aca:	d02a      	beq.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004acc:	2bc0      	cmp	r3, #192	; 0xc0
 8004ace:	d821      	bhi.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8004ad0:	2b80      	cmp	r3, #128	; 0x80
 8004ad2:	d016      	beq.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8004ad4:	2b80      	cmp	r3, #128	; 0x80
 8004ad6:	d81d      	bhi.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d002      	beq.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004adc:	2b40      	cmp	r3, #64	; 0x40
 8004ade:	d007      	beq.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8004ae0:	e018      	b.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ae2:	4b5e      	ldr	r3, [pc, #376]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae6:	4a5d      	ldr	r2, [pc, #372]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004ae8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004aec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8004aee:	e019      	b.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	3304      	adds	r3, #4
 8004af4:	2100      	movs	r1, #0
 8004af6:	4618      	mov	r0, r3
 8004af8:	f001 fe86 	bl	8006808 <RCCEx_PLL2_Config>
 8004afc:	4603      	mov	r3, r0
 8004afe:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8004b00:	e010      	b.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	3324      	adds	r3, #36	; 0x24
 8004b06:	2100      	movs	r1, #0
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f001 ff2f 	bl	800696c <RCCEx_PLL3_Config>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8004b12:	e007      	b.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	75fb      	strb	r3, [r7, #23]
      break;
 8004b18:	e004      	b.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8004b1a:	bf00      	nop
 8004b1c:	e002      	b.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8004b1e:	bf00      	nop
 8004b20:	e000      	b.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8004b22:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b24:	7dfb      	ldrb	r3, [r7, #23]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d109      	bne.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8004b2a:	4b4c      	ldr	r3, [pc, #304]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004b2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b2e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b36:	4949      	ldr	r1, [pc, #292]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	650b      	str	r3, [r1, #80]	; 0x50
 8004b3c:	e001      	b.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b3e:	7dfb      	ldrb	r3, [r7, #23]
 8004b40:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d04f      	beq.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b52:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8004b56:	d036      	beq.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8004b58:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8004b5c:	d830      	bhi.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8004b5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b62:	d032      	beq.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x24e>
 8004b64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b68:	d82a      	bhi.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8004b6a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004b6e:	d02e      	beq.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x252>
 8004b70:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004b74:	d824      	bhi.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8004b76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b7a:	d018      	beq.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x232>
 8004b7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b80:	d81e      	bhi.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d003      	beq.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x212>
 8004b86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b8a:	d007      	beq.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x220>
 8004b8c:	e018      	b.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b8e:	4b33      	ldr	r3, [pc, #204]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b92:	4a32      	ldr	r2, [pc, #200]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004b94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b98:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8004b9a:	e019      	b.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	3304      	adds	r3, #4
 8004ba0:	2100      	movs	r1, #0
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f001 fe30 	bl	8006808 <RCCEx_PLL2_Config>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8004bac:	e010      	b.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	3324      	adds	r3, #36	; 0x24
 8004bb2:	2100      	movs	r1, #0
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f001 fed9 	bl	800696c <RCCEx_PLL3_Config>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8004bbe:	e007      	b.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	75fb      	strb	r3, [r7, #23]
      break;
 8004bc4:	e004      	b.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8004bc6:	bf00      	nop
 8004bc8:	e002      	b.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8004bca:	bf00      	nop
 8004bcc:	e000      	b.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8004bce:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004bd0:	7dfb      	ldrb	r3, [r7, #23]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d109      	bne.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8004bd6:	4b21      	ldr	r3, [pc, #132]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004bd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bda:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004be2:	491e      	ldr	r1, [pc, #120]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004be4:	4313      	orrs	r3, r2
 8004be6:	650b      	str	r3, [r1, #80]	; 0x50
 8004be8:	e001      	b.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bea:	7dfb      	ldrb	r3, [r7, #23]
 8004bec:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d034      	beq.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bfe:	2b30      	cmp	r3, #48	; 0x30
 8004c00:	d01c      	beq.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8004c02:	2b30      	cmp	r3, #48	; 0x30
 8004c04:	d817      	bhi.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8004c06:	2b20      	cmp	r3, #32
 8004c08:	d00c      	beq.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004c0a:	2b20      	cmp	r3, #32
 8004c0c:	d813      	bhi.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d016      	beq.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
 8004c12:	2b10      	cmp	r3, #16
 8004c14:	d10f      	bne.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c16:	4b11      	ldr	r3, [pc, #68]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c1a:	4a10      	ldr	r2, [pc, #64]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004c1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c20:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8004c22:	e00e      	b.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x2c6>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	3304      	adds	r3, #4
 8004c28:	2102      	movs	r1, #2
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f001 fdec 	bl	8006808 <RCCEx_PLL2_Config>
 8004c30:	4603      	mov	r3, r0
 8004c32:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8004c34:	e005      	b.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	75fb      	strb	r3, [r7, #23]
      break;
 8004c3a:	e002      	b.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 8004c3c:	bf00      	nop
 8004c3e:	e000      	b.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 8004c40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c42:	7dfb      	ldrb	r3, [r7, #23]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d10b      	bne.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004c48:	4b04      	ldr	r3, [pc, #16]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004c4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c4c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c54:	4901      	ldr	r1, [pc, #4]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004c56:	4313      	orrs	r3, r2
 8004c58:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004c5a:	e003      	b.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8004c5c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c60:	7dfb      	ldrb	r3, [r7, #23]
 8004c62:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d047      	beq.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c78:	d030      	beq.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004c7a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c7e:	d82a      	bhi.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8004c80:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004c84:	d02c      	beq.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x364>
 8004c86:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004c8a:	d824      	bhi.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8004c8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c90:	d018      	beq.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8004c92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c96:	d81e      	bhi.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d003      	beq.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x328>
 8004c9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ca0:	d007      	beq.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8004ca2:	e018      	b.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ca4:	4bb0      	ldr	r3, [pc, #704]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8004ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca8:	4aaf      	ldr	r2, [pc, #700]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8004caa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004cb0:	e017      	b.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	3304      	adds	r3, #4
 8004cb6:	2100      	movs	r1, #0
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f001 fda5 	bl	8006808 <RCCEx_PLL2_Config>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004cc2:	e00e      	b.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	3324      	adds	r3, #36	; 0x24
 8004cc8:	2100      	movs	r1, #0
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f001 fe4e 	bl	800696c <RCCEx_PLL3_Config>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004cd4:	e005      	b.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	75fb      	strb	r3, [r7, #23]
      break;
 8004cda:	e002      	b.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8004cdc:	bf00      	nop
 8004cde:	e000      	b.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8004ce0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ce2:	7dfb      	ldrb	r3, [r7, #23]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d109      	bne.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004ce8:	4b9f      	ldr	r3, [pc, #636]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8004cea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cec:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cf4:	499c      	ldr	r1, [pc, #624]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	650b      	str	r3, [r1, #80]	; 0x50
 8004cfa:	e001      	b.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cfc:	7dfb      	ldrb	r3, [r7, #23]
 8004cfe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d049      	beq.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d14:	d02e      	beq.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8004d16:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d1a:	d828      	bhi.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8004d1c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004d20:	d02a      	beq.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8004d22:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004d26:	d822      	bhi.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8004d28:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004d2c:	d026      	beq.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x400>
 8004d2e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004d32:	d81c      	bhi.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8004d34:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d38:	d010      	beq.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004d3a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d3e:	d816      	bhi.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d01d      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8004d44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d48:	d111      	bne.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	3304      	adds	r3, #4
 8004d4e:	2101      	movs	r1, #1
 8004d50:	4618      	mov	r0, r3
 8004d52:	f001 fd59 	bl	8006808 <RCCEx_PLL2_Config>
 8004d56:	4603      	mov	r3, r0
 8004d58:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004d5a:	e012      	b.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	3324      	adds	r3, #36	; 0x24
 8004d60:	2101      	movs	r1, #1
 8004d62:	4618      	mov	r0, r3
 8004d64:	f001 fe02 	bl	800696c <RCCEx_PLL3_Config>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004d6c:	e009      	b.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	75fb      	strb	r3, [r7, #23]
      break;
 8004d72:	e006      	b.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8004d74:	bf00      	nop
 8004d76:	e004      	b.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8004d78:	bf00      	nop
 8004d7a:	e002      	b.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8004d7c:	bf00      	nop
 8004d7e:	e000      	b.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8004d80:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d82:	7dfb      	ldrb	r3, [r7, #23]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d109      	bne.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004d88:	4b77      	ldr	r3, [pc, #476]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8004d8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d8c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d94:	4974      	ldr	r1, [pc, #464]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8004d96:	4313      	orrs	r3, r2
 8004d98:	650b      	str	r3, [r1, #80]	; 0x50
 8004d9a:	e001      	b.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d9c:	7dfb      	ldrb	r3, [r7, #23]
 8004d9e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d053      	beq.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004db2:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8004db6:	d034      	beq.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8004db8:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8004dbc:	d82e      	bhi.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8004dbe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004dc2:	d030      	beq.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8004dc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004dc8:	d828      	bhi.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8004dca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dce:	d02c      	beq.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8004dd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dd4:	d822      	bhi.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8004dd6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004dda:	d028      	beq.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8004ddc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004de0:	d81c      	bhi.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8004de2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004de6:	d010      	beq.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x48e>
 8004de8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004dec:	d816      	bhi.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d01f      	beq.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8004df2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004df6:	d111      	bne.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	3304      	adds	r3, #4
 8004dfc:	2101      	movs	r1, #1
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f001 fd02 	bl	8006808 <RCCEx_PLL2_Config>
 8004e04:	4603      	mov	r3, r0
 8004e06:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004e08:	e014      	b.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	3324      	adds	r3, #36	; 0x24
 8004e0e:	2101      	movs	r1, #1
 8004e10:	4618      	mov	r0, r3
 8004e12:	f001 fdab 	bl	800696c <RCCEx_PLL3_Config>
 8004e16:	4603      	mov	r3, r0
 8004e18:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004e1a:	e00b      	b.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	75fb      	strb	r3, [r7, #23]
      break;
 8004e20:	e008      	b.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8004e22:	bf00      	nop
 8004e24:	e006      	b.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8004e26:	bf00      	nop
 8004e28:	e004      	b.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8004e2a:	bf00      	nop
 8004e2c:	e002      	b.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8004e2e:	bf00      	nop
 8004e30:	e000      	b.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8004e32:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e34:	7dfb      	ldrb	r3, [r7, #23]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d10a      	bne.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004e3a:	4b4b      	ldr	r3, [pc, #300]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8004e3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e3e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004e48:	4947      	ldr	r1, [pc, #284]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	658b      	str	r3, [r1, #88]	; 0x58
 8004e4e:	e001      	b.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e50:	7dfb      	ldrb	r3, [r7, #23]
 8004e52:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d02f      	beq.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x544>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e68:	d00e      	beq.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8004e6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e6e:	d814      	bhi.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d015      	beq.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004e74:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e78:	d10f      	bne.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e7a:	4b3b      	ldr	r3, [pc, #236]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8004e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e7e:	4a3a      	ldr	r2, [pc, #232]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8004e80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e84:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004e86:	e00c      	b.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	3304      	adds	r3, #4
 8004e8c:	2101      	movs	r1, #1
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f001 fcba 	bl	8006808 <RCCEx_PLL2_Config>
 8004e94:	4603      	mov	r3, r0
 8004e96:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004e98:	e003      	b.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	75fb      	strb	r3, [r7, #23]
      break;
 8004e9e:	e000      	b.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 8004ea0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ea2:	7dfb      	ldrb	r3, [r7, #23]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d109      	bne.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x540>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004ea8:	4b2f      	ldr	r3, [pc, #188]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8004eaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004eac:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004eb4:	492c      	ldr	r1, [pc, #176]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	650b      	str	r3, [r1, #80]	; 0x50
 8004eba:	e001      	b.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x544>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ebc:	7dfb      	ldrb	r3, [r7, #23]
 8004ebe:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d032      	beq.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ed0:	2b03      	cmp	r3, #3
 8004ed2:	d81b      	bhi.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x590>
 8004ed4:	a201      	add	r2, pc, #4	; (adr r2, 8004edc <HAL_RCCEx_PeriphCLKConfig+0x560>)
 8004ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eda:	bf00      	nop
 8004edc:	08004f13 	.word	0x08004f13
 8004ee0:	08004eed 	.word	0x08004eed
 8004ee4:	08004efb 	.word	0x08004efb
 8004ee8:	08004f13 	.word	0x08004f13
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004eec:	4b1e      	ldr	r3, [pc, #120]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8004eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef0:	4a1d      	ldr	r2, [pc, #116]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8004ef2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ef6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004ef8:	e00c      	b.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x598>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	3304      	adds	r3, #4
 8004efe:	2102      	movs	r1, #2
 8004f00:	4618      	mov	r0, r3
 8004f02:	f001 fc81 	bl	8006808 <RCCEx_PLL2_Config>
 8004f06:	4603      	mov	r3, r0
 8004f08:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004f0a:	e003      	b.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x598>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	75fb      	strb	r3, [r7, #23]
      break;
 8004f10:	e000      	b.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x598>
      break;
 8004f12:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f14:	7dfb      	ldrb	r3, [r7, #23]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d109      	bne.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x5b2>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004f1a:	4b13      	ldr	r3, [pc, #76]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8004f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f1e:	f023 0203 	bic.w	r2, r3, #3
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f26:	4910      	ldr	r1, [pc, #64]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004f2c:	e001      	b.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f2e:	7dfb      	ldrb	r3, [r7, #23]
 8004f30:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	f000 808a 	beq.w	8005054 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f40:	4b0a      	ldr	r3, [pc, #40]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a09      	ldr	r2, [pc, #36]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004f46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f4a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004f4c:	f7fc fde8 	bl	8001b20 <HAL_GetTick>
 8004f50:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f52:	e00d      	b.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f54:	f7fc fde4 	bl	8001b20 <HAL_GetTick>
 8004f58:	4602      	mov	r2, r0
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	1ad3      	subs	r3, r2, r3
 8004f5e:	2b64      	cmp	r3, #100	; 0x64
 8004f60:	d906      	bls.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 8004f62:	2303      	movs	r3, #3
 8004f64:	75fb      	strb	r3, [r7, #23]
        break;
 8004f66:	e009      	b.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x600>
 8004f68:	58024400 	.word	0x58024400
 8004f6c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f70:	4bba      	ldr	r3, [pc, #744]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d0eb      	beq.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x5d8>
      }
    }

    if(ret == HAL_OK)
 8004f7c:	7dfb      	ldrb	r3, [r7, #23]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d166      	bne.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004f82:	4bb7      	ldr	r3, [pc, #732]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004f84:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004f8c:	4053      	eors	r3, r2
 8004f8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d013      	beq.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004f96:	4bb2      	ldr	r3, [pc, #712]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f9e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004fa0:	4baf      	ldr	r3, [pc, #700]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004fa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fa4:	4aae      	ldr	r2, [pc, #696]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004fa6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004faa:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004fac:	4bac      	ldr	r3, [pc, #688]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fb0:	4aab      	ldr	r2, [pc, #684]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004fb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fb6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004fb8:	4aa9      	ldr	r2, [pc, #676]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004fc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fc8:	d115      	bne.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fca:	f7fc fda9 	bl	8001b20 <HAL_GetTick>
 8004fce:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004fd0:	e00b      	b.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fd2:	f7fc fda5 	bl	8001b20 <HAL_GetTick>
 8004fd6:	4602      	mov	r2, r0
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	1ad3      	subs	r3, r2, r3
 8004fdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d902      	bls.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 8004fe4:	2303      	movs	r3, #3
 8004fe6:	75fb      	strb	r3, [r7, #23]
            break;
 8004fe8:	e005      	b.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004fea:	4b9d      	ldr	r3, [pc, #628]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fee:	f003 0302 	and.w	r3, r3, #2
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d0ed      	beq.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 8004ff6:	7dfb      	ldrb	r3, [r7, #23]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d126      	bne.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005002:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005006:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800500a:	d10d      	bne.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 800500c:	4b94      	ldr	r3, [pc, #592]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800500e:	691b      	ldr	r3, [r3, #16]
 8005010:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800501a:	0919      	lsrs	r1, r3, #4
 800501c:	4b91      	ldr	r3, [pc, #580]	; (8005264 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800501e:	400b      	ands	r3, r1
 8005020:	498f      	ldr	r1, [pc, #572]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005022:	4313      	orrs	r3, r2
 8005024:	610b      	str	r3, [r1, #16]
 8005026:	e005      	b.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8005028:	4b8d      	ldr	r3, [pc, #564]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800502a:	691b      	ldr	r3, [r3, #16]
 800502c:	4a8c      	ldr	r2, [pc, #560]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800502e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005032:	6113      	str	r3, [r2, #16]
 8005034:	4b8a      	ldr	r3, [pc, #552]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005036:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800503e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005042:	4987      	ldr	r1, [pc, #540]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005044:	4313      	orrs	r3, r2
 8005046:	670b      	str	r3, [r1, #112]	; 0x70
 8005048:	e004      	b.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800504a:	7dfb      	ldrb	r3, [r7, #23]
 800504c:	75bb      	strb	r3, [r7, #22]
 800504e:	e001      	b.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005050:	7dfb      	ldrb	r3, [r7, #23]
 8005052:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 0301 	and.w	r3, r3, #1
 800505c:	2b00      	cmp	r3, #0
 800505e:	d07f      	beq.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005066:	2b28      	cmp	r3, #40	; 0x28
 8005068:	d866      	bhi.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 800506a:	a201      	add	r2, pc, #4	; (adr r2, 8005070 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 800506c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005070:	0800513f 	.word	0x0800513f
 8005074:	08005139 	.word	0x08005139
 8005078:	08005139 	.word	0x08005139
 800507c:	08005139 	.word	0x08005139
 8005080:	08005139 	.word	0x08005139
 8005084:	08005139 	.word	0x08005139
 8005088:	08005139 	.word	0x08005139
 800508c:	08005139 	.word	0x08005139
 8005090:	08005115 	.word	0x08005115
 8005094:	08005139 	.word	0x08005139
 8005098:	08005139 	.word	0x08005139
 800509c:	08005139 	.word	0x08005139
 80050a0:	08005139 	.word	0x08005139
 80050a4:	08005139 	.word	0x08005139
 80050a8:	08005139 	.word	0x08005139
 80050ac:	08005139 	.word	0x08005139
 80050b0:	08005127 	.word	0x08005127
 80050b4:	08005139 	.word	0x08005139
 80050b8:	08005139 	.word	0x08005139
 80050bc:	08005139 	.word	0x08005139
 80050c0:	08005139 	.word	0x08005139
 80050c4:	08005139 	.word	0x08005139
 80050c8:	08005139 	.word	0x08005139
 80050cc:	08005139 	.word	0x08005139
 80050d0:	0800513f 	.word	0x0800513f
 80050d4:	08005139 	.word	0x08005139
 80050d8:	08005139 	.word	0x08005139
 80050dc:	08005139 	.word	0x08005139
 80050e0:	08005139 	.word	0x08005139
 80050e4:	08005139 	.word	0x08005139
 80050e8:	08005139 	.word	0x08005139
 80050ec:	08005139 	.word	0x08005139
 80050f0:	0800513f 	.word	0x0800513f
 80050f4:	08005139 	.word	0x08005139
 80050f8:	08005139 	.word	0x08005139
 80050fc:	08005139 	.word	0x08005139
 8005100:	08005139 	.word	0x08005139
 8005104:	08005139 	.word	0x08005139
 8005108:	08005139 	.word	0x08005139
 800510c:	08005139 	.word	0x08005139
 8005110:	0800513f 	.word	0x0800513f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	3304      	adds	r3, #4
 8005118:	2101      	movs	r1, #1
 800511a:	4618      	mov	r0, r3
 800511c:	f001 fb74 	bl	8006808 <RCCEx_PLL2_Config>
 8005120:	4603      	mov	r3, r0
 8005122:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005124:	e00c      	b.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	3324      	adds	r3, #36	; 0x24
 800512a:	2101      	movs	r1, #1
 800512c:	4618      	mov	r0, r3
 800512e:	f001 fc1d 	bl	800696c <RCCEx_PLL3_Config>
 8005132:	4603      	mov	r3, r0
 8005134:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005136:	e003      	b.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005138:	2301      	movs	r3, #1
 800513a:	75fb      	strb	r3, [r7, #23]
      break;
 800513c:	e000      	b.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 800513e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005140:	7dfb      	ldrb	r3, [r7, #23]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d10a      	bne.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005146:	4b46      	ldr	r3, [pc, #280]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005148:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800514a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005154:	4942      	ldr	r1, [pc, #264]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005156:	4313      	orrs	r3, r2
 8005158:	654b      	str	r3, [r1, #84]	; 0x54
 800515a:	e001      	b.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800515c:	7dfb      	ldrb	r3, [r7, #23]
 800515e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f003 0302 	and.w	r3, r3, #2
 8005168:	2b00      	cmp	r3, #0
 800516a:	d038      	beq.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005170:	2b05      	cmp	r3, #5
 8005172:	d821      	bhi.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8005174:	a201      	add	r2, pc, #4	; (adr r2, 800517c <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8005176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800517a:	bf00      	nop
 800517c:	080051bf 	.word	0x080051bf
 8005180:	08005195 	.word	0x08005195
 8005184:	080051a7 	.word	0x080051a7
 8005188:	080051bf 	.word	0x080051bf
 800518c:	080051bf 	.word	0x080051bf
 8005190:	080051bf 	.word	0x080051bf
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	3304      	adds	r3, #4
 8005198:	2101      	movs	r1, #1
 800519a:	4618      	mov	r0, r3
 800519c:	f001 fb34 	bl	8006808 <RCCEx_PLL2_Config>
 80051a0:	4603      	mov	r3, r0
 80051a2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80051a4:	e00c      	b.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	3324      	adds	r3, #36	; 0x24
 80051aa:	2101      	movs	r1, #1
 80051ac:	4618      	mov	r0, r3
 80051ae:	f001 fbdd 	bl	800696c <RCCEx_PLL3_Config>
 80051b2:	4603      	mov	r3, r0
 80051b4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80051b6:	e003      	b.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	75fb      	strb	r3, [r7, #23]
      break;
 80051bc:	e000      	b.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 80051be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051c0:	7dfb      	ldrb	r3, [r7, #23]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d109      	bne.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80051c6:	4b26      	ldr	r3, [pc, #152]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80051c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051ca:	f023 0207 	bic.w	r2, r3, #7
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051d2:	4923      	ldr	r1, [pc, #140]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80051d4:	4313      	orrs	r3, r2
 80051d6:	654b      	str	r3, [r1, #84]	; 0x54
 80051d8:	e001      	b.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051da:	7dfb      	ldrb	r3, [r7, #23]
 80051dc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f003 0304 	and.w	r3, r3, #4
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d040      	beq.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80051f0:	2b05      	cmp	r3, #5
 80051f2:	d821      	bhi.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 80051f4:	a201      	add	r2, pc, #4	; (adr r2, 80051fc <HAL_RCCEx_PeriphCLKConfig+0x880>)
 80051f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051fa:	bf00      	nop
 80051fc:	0800523f 	.word	0x0800523f
 8005200:	08005215 	.word	0x08005215
 8005204:	08005227 	.word	0x08005227
 8005208:	0800523f 	.word	0x0800523f
 800520c:	0800523f 	.word	0x0800523f
 8005210:	0800523f 	.word	0x0800523f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	3304      	adds	r3, #4
 8005218:	2101      	movs	r1, #1
 800521a:	4618      	mov	r0, r3
 800521c:	f001 faf4 	bl	8006808 <RCCEx_PLL2_Config>
 8005220:	4603      	mov	r3, r0
 8005222:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005224:	e00c      	b.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	3324      	adds	r3, #36	; 0x24
 800522a:	2101      	movs	r1, #1
 800522c:	4618      	mov	r0, r3
 800522e:	f001 fb9d 	bl	800696c <RCCEx_PLL3_Config>
 8005232:	4603      	mov	r3, r0
 8005234:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005236:	e003      	b.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	75fb      	strb	r3, [r7, #23]
      break;
 800523c:	e000      	b.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 800523e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005240:	7dfb      	ldrb	r3, [r7, #23]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d110      	bne.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005246:	4b06      	ldr	r3, [pc, #24]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005248:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800524a:	f023 0207 	bic.w	r2, r3, #7
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005254:	4902      	ldr	r1, [pc, #8]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005256:	4313      	orrs	r3, r2
 8005258:	658b      	str	r3, [r1, #88]	; 0x58
 800525a:	e007      	b.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 800525c:	58024800 	.word	0x58024800
 8005260:	58024400 	.word	0x58024400
 8005264:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005268:	7dfb      	ldrb	r3, [r7, #23]
 800526a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 0320 	and.w	r3, r3, #32
 8005274:	2b00      	cmp	r3, #0
 8005276:	d04b      	beq.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800527e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005282:	d02e      	beq.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x966>
 8005284:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005288:	d828      	bhi.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x960>
 800528a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800528e:	d02a      	beq.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8005290:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005294:	d822      	bhi.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x960>
 8005296:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800529a:	d026      	beq.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800529c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80052a0:	d81c      	bhi.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x960>
 80052a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052a6:	d010      	beq.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0x94e>
 80052a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052ac:	d816      	bhi.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x960>
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d01d      	beq.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0x972>
 80052b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80052b6:	d111      	bne.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	3304      	adds	r3, #4
 80052bc:	2100      	movs	r1, #0
 80052be:	4618      	mov	r0, r3
 80052c0:	f001 faa2 	bl	8006808 <RCCEx_PLL2_Config>
 80052c4:	4603      	mov	r3, r0
 80052c6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80052c8:	e012      	b.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	3324      	adds	r3, #36	; 0x24
 80052ce:	2102      	movs	r1, #2
 80052d0:	4618      	mov	r0, r3
 80052d2:	f001 fb4b 	bl	800696c <RCCEx_PLL3_Config>
 80052d6:	4603      	mov	r3, r0
 80052d8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80052da:	e009      	b.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80052dc:	2301      	movs	r3, #1
 80052de:	75fb      	strb	r3, [r7, #23]
      break;
 80052e0:	e006      	b.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80052e2:	bf00      	nop
 80052e4:	e004      	b.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80052e6:	bf00      	nop
 80052e8:	e002      	b.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80052ea:	bf00      	nop
 80052ec:	e000      	b.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80052ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80052f0:	7dfb      	ldrb	r3, [r7, #23]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d10a      	bne.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80052f6:	4bb3      	ldr	r3, [pc, #716]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80052f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052fa:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005304:	49af      	ldr	r1, [pc, #700]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8005306:	4313      	orrs	r3, r2
 8005308:	654b      	str	r3, [r1, #84]	; 0x54
 800530a:	e001      	b.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800530c:	7dfb      	ldrb	r3, [r7, #23]
 800530e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005318:	2b00      	cmp	r3, #0
 800531a:	d04b      	beq.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005322:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005326:	d02e      	beq.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8005328:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800532c:	d828      	bhi.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800532e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005332:	d02a      	beq.n	800538a <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8005334:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005338:	d822      	bhi.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800533a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800533e:	d026      	beq.n	800538e <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8005340:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005344:	d81c      	bhi.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8005346:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800534a:	d010      	beq.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 800534c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005350:	d816      	bhi.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8005352:	2b00      	cmp	r3, #0
 8005354:	d01d      	beq.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8005356:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800535a:	d111      	bne.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	3304      	adds	r3, #4
 8005360:	2100      	movs	r1, #0
 8005362:	4618      	mov	r0, r3
 8005364:	f001 fa50 	bl	8006808 <RCCEx_PLL2_Config>
 8005368:	4603      	mov	r3, r0
 800536a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800536c:	e012      	b.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	3324      	adds	r3, #36	; 0x24
 8005372:	2102      	movs	r1, #2
 8005374:	4618      	mov	r0, r3
 8005376:	f001 faf9 	bl	800696c <RCCEx_PLL3_Config>
 800537a:	4603      	mov	r3, r0
 800537c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800537e:	e009      	b.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005380:	2301      	movs	r3, #1
 8005382:	75fb      	strb	r3, [r7, #23]
      break;
 8005384:	e006      	b.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8005386:	bf00      	nop
 8005388:	e004      	b.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800538a:	bf00      	nop
 800538c:	e002      	b.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800538e:	bf00      	nop
 8005390:	e000      	b.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8005392:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005394:	7dfb      	ldrb	r3, [r7, #23]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d10a      	bne.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800539a:	4b8a      	ldr	r3, [pc, #552]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800539c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800539e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80053a8:	4986      	ldr	r1, [pc, #536]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80053aa:	4313      	orrs	r3, r2
 80053ac:	658b      	str	r3, [r1, #88]	; 0x58
 80053ae:	e001      	b.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053b0:	7dfb      	ldrb	r3, [r7, #23]
 80053b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d04b      	beq.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80053c6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80053ca:	d02e      	beq.n	800542a <HAL_RCCEx_PeriphCLKConfig+0xaae>
 80053cc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80053d0:	d828      	bhi.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80053d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053d6:	d02a      	beq.n	800542e <HAL_RCCEx_PeriphCLKConfig+0xab2>
 80053d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053dc:	d822      	bhi.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80053de:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80053e2:	d026      	beq.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 80053e4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80053e8:	d81c      	bhi.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80053ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80053ee:	d010      	beq.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0xa96>
 80053f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80053f4:	d816      	bhi.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d01d      	beq.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0xaba>
 80053fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053fe:	d111      	bne.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	3304      	adds	r3, #4
 8005404:	2100      	movs	r1, #0
 8005406:	4618      	mov	r0, r3
 8005408:	f001 f9fe 	bl	8006808 <RCCEx_PLL2_Config>
 800540c:	4603      	mov	r3, r0
 800540e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005410:	e012      	b.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	3324      	adds	r3, #36	; 0x24
 8005416:	2102      	movs	r1, #2
 8005418:	4618      	mov	r0, r3
 800541a:	f001 faa7 	bl	800696c <RCCEx_PLL3_Config>
 800541e:	4603      	mov	r3, r0
 8005420:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005422:	e009      	b.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	75fb      	strb	r3, [r7, #23]
      break;
 8005428:	e006      	b.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800542a:	bf00      	nop
 800542c:	e004      	b.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800542e:	bf00      	nop
 8005430:	e002      	b.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8005432:	bf00      	nop
 8005434:	e000      	b.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8005436:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005438:	7dfb      	ldrb	r3, [r7, #23]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d10a      	bne.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800543e:	4b61      	ldr	r3, [pc, #388]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8005440:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005442:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800544c:	495d      	ldr	r1, [pc, #372]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800544e:	4313      	orrs	r3, r2
 8005450:	658b      	str	r3, [r1, #88]	; 0x58
 8005452:	e001      	b.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005454:	7dfb      	ldrb	r3, [r7, #23]
 8005456:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f003 0308 	and.w	r3, r3, #8
 8005460:	2b00      	cmp	r3, #0
 8005462:	d01a      	beq.n	800549a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800546a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800546e:	d10a      	bne.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	3324      	adds	r3, #36	; 0x24
 8005474:	2102      	movs	r1, #2
 8005476:	4618      	mov	r0, r3
 8005478:	f001 fa78 	bl	800696c <RCCEx_PLL3_Config>
 800547c:	4603      	mov	r3, r0
 800547e:	2b00      	cmp	r3, #0
 8005480:	d001      	beq.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 8005482:	2301      	movs	r3, #1
 8005484:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005486:	4b4f      	ldr	r3, [pc, #316]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8005488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800548a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005494:	494b      	ldr	r1, [pc, #300]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8005496:	4313      	orrs	r3, r2
 8005498:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f003 0310 	and.w	r3, r3, #16
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d01a      	beq.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80054ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054b0:	d10a      	bne.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	3324      	adds	r3, #36	; 0x24
 80054b6:	2102      	movs	r1, #2
 80054b8:	4618      	mov	r0, r3
 80054ba:	f001 fa57 	bl	800696c <RCCEx_PLL3_Config>
 80054be:	4603      	mov	r3, r0
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d001      	beq.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80054c8:	4b3e      	ldr	r3, [pc, #248]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80054ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80054d6:	493b      	ldr	r1, [pc, #236]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80054d8:	4313      	orrs	r3, r2
 80054da:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d034      	beq.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80054ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80054f2:	d01d      	beq.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 80054f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80054f8:	d817      	bhi.n	800552a <HAL_RCCEx_PeriphCLKConfig+0xbae>
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d003      	beq.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 80054fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005502:	d009      	beq.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8005504:	e011      	b.n	800552a <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	3304      	adds	r3, #4
 800550a:	2100      	movs	r1, #0
 800550c:	4618      	mov	r0, r3
 800550e:	f001 f97b 	bl	8006808 <RCCEx_PLL2_Config>
 8005512:	4603      	mov	r3, r0
 8005514:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005516:	e00c      	b.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	3324      	adds	r3, #36	; 0x24
 800551c:	2102      	movs	r1, #2
 800551e:	4618      	mov	r0, r3
 8005520:	f001 fa24 	bl	800696c <RCCEx_PLL3_Config>
 8005524:	4603      	mov	r3, r0
 8005526:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005528:	e003      	b.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	75fb      	strb	r3, [r7, #23]
      break;
 800552e:	e000      	b.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 8005530:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005532:	7dfb      	ldrb	r3, [r7, #23]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d10a      	bne.n	800554e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005538:	4b22      	ldr	r3, [pc, #136]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800553a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800553c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005546:	491f      	ldr	r1, [pc, #124]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8005548:	4313      	orrs	r3, r2
 800554a:	658b      	str	r3, [r1, #88]	; 0x58
 800554c:	e001      	b.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800554e:	7dfb      	ldrb	r3, [r7, #23]
 8005550:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800555a:	2b00      	cmp	r3, #0
 800555c:	d036      	beq.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0xc50>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005564:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005568:	d01c      	beq.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800556a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800556e:	d816      	bhi.n	800559e <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8005570:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005574:	d003      	beq.n	800557e <HAL_RCCEx_PeriphCLKConfig+0xc02>
 8005576:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800557a:	d007      	beq.n	800558c <HAL_RCCEx_PeriphCLKConfig+0xc10>
 800557c:	e00f      	b.n	800559e <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800557e:	4b11      	ldr	r3, [pc, #68]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8005580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005582:	4a10      	ldr	r2, [pc, #64]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8005584:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005588:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800558a:	e00c      	b.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	3324      	adds	r3, #36	; 0x24
 8005590:	2101      	movs	r1, #1
 8005592:	4618      	mov	r0, r3
 8005594:	f001 f9ea 	bl	800696c <RCCEx_PLL3_Config>
 8005598:	4603      	mov	r3, r0
 800559a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800559c:	e003      	b.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	75fb      	strb	r3, [r7, #23]
      break;
 80055a2:	e000      	b.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 80055a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80055a6:	7dfb      	ldrb	r3, [r7, #23]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d10d      	bne.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80055ac:	4b05      	ldr	r3, [pc, #20]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80055ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055ba:	4902      	ldr	r1, [pc, #8]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80055bc:	4313      	orrs	r3, r2
 80055be:	654b      	str	r3, [r1, #84]	; 0x54
 80055c0:	e004      	b.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0xc50>
 80055c2:	bf00      	nop
 80055c4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055c8:	7dfb      	ldrb	r3, [r7, #23]
 80055ca:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d029      	beq.n	800562c <HAL_RCCEx_PeriphCLKConfig+0xcb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d003      	beq.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80055e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055e4:	d007      	beq.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
 80055e6:	e00f      	b.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0xc8c>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055e8:	4b69      	ldr	r3, [pc, #420]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80055ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ec:	4a68      	ldr	r2, [pc, #416]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80055ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80055f4:	e00b      	b.n	800560e <HAL_RCCEx_PeriphCLKConfig+0xc92>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	3304      	adds	r3, #4
 80055fa:	2102      	movs	r1, #2
 80055fc:	4618      	mov	r0, r3
 80055fe:	f001 f903 	bl	8006808 <RCCEx_PLL2_Config>
 8005602:	4603      	mov	r3, r0
 8005604:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005606:	e002      	b.n	800560e <HAL_RCCEx_PeriphCLKConfig+0xc92>

    default:
      ret = HAL_ERROR;
 8005608:	2301      	movs	r3, #1
 800560a:	75fb      	strb	r3, [r7, #23]
      break;
 800560c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800560e:	7dfb      	ldrb	r3, [r7, #23]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d109      	bne.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005614:	4b5e      	ldr	r3, [pc, #376]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005616:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005618:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005620:	495b      	ldr	r1, [pc, #364]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005622:	4313      	orrs	r3, r2
 8005624:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005626:	e001      	b.n	800562c <HAL_RCCEx_PeriphCLKConfig+0xcb0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005628:	7dfb      	ldrb	r3, [r7, #23]
 800562a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005634:	2b00      	cmp	r3, #0
 8005636:	d00a      	beq.n	800564e <HAL_RCCEx_PeriphCLKConfig+0xcd2>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	3324      	adds	r3, #36	; 0x24
 800563c:	2102      	movs	r1, #2
 800563e:	4618      	mov	r0, r3
 8005640:	f001 f994 	bl	800696c <RCCEx_PLL3_Config>
 8005644:	4603      	mov	r3, r0
 8005646:	2b00      	cmp	r3, #0
 8005648:	d001      	beq.n	800564e <HAL_RCCEx_PeriphCLKConfig+0xcd2>
    {
      status=HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005656:	2b00      	cmp	r3, #0
 8005658:	d032      	beq.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005660:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005664:	d017      	beq.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
 8005666:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800566a:	d811      	bhi.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800566c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005670:	d013      	beq.n	800569a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
 8005672:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005676:	d80b      	bhi.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8005678:	2b00      	cmp	r3, #0
 800567a:	d010      	beq.n	800569e <HAL_RCCEx_PeriphCLKConfig+0xd22>
 800567c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005680:	d106      	bne.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0xd14>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005682:	4b43      	ldr	r3, [pc, #268]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005686:	4a42      	ldr	r2, [pc, #264]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005688:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800568c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800568e:	e007      	b.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005690:	2301      	movs	r3, #1
 8005692:	75fb      	strb	r3, [r7, #23]
      break;
 8005694:	e004      	b.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 8005696:	bf00      	nop
 8005698:	e002      	b.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 800569a:	bf00      	nop
 800569c:	e000      	b.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 800569e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056a0:	7dfb      	ldrb	r3, [r7, #23]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d10a      	bne.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80056a6:	4b3a      	ldr	r3, [pc, #232]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80056a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056aa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056b4:	4936      	ldr	r1, [pc, #216]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80056b6:	4313      	orrs	r3, r2
 80056b8:	654b      	str	r3, [r1, #84]	; 0x54
 80056ba:	e001      	b.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056bc:	7dfb      	ldrb	r3, [r7, #23]
 80056be:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d008      	beq.n	80056de <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80056cc:	4b30      	ldr	r3, [pc, #192]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80056ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056d0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80056d8:	492d      	ldr	r1, [pc, #180]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80056da:	4313      	orrs	r3, r2
 80056dc:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d008      	beq.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80056ea:	4b29      	ldr	r3, [pc, #164]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80056ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056ee:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056f6:	4926      	ldr	r1, [pc, #152]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80056f8:	4313      	orrs	r3, r2
 80056fa:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005704:	2b00      	cmp	r3, #0
 8005706:	d008      	beq.n	800571a <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8005708:	4b21      	ldr	r3, [pc, #132]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800570a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800570c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005714:	491e      	ldr	r1, [pc, #120]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005716:	4313      	orrs	r3, r2
 8005718:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005722:	2b00      	cmp	r3, #0
 8005724:	d00d      	beq.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005726:	4b1a      	ldr	r3, [pc, #104]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005728:	691b      	ldr	r3, [r3, #16]
 800572a:	4a19      	ldr	r2, [pc, #100]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800572c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005730:	6113      	str	r3, [r2, #16]
 8005732:	4b17      	ldr	r3, [pc, #92]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005734:	691a      	ldr	r2, [r3, #16]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800573c:	4914      	ldr	r1, [pc, #80]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800573e:	4313      	orrs	r3, r2
 8005740:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	2b00      	cmp	r3, #0
 8005748:	da08      	bge.n	800575c <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800574a:	4b11      	ldr	r3, [pc, #68]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800574c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800574e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005756:	490e      	ldr	r1, [pc, #56]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005758:	4313      	orrs	r3, r2
 800575a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005764:	2b00      	cmp	r3, #0
 8005766:	d009      	beq.n	800577c <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005768:	4b09      	ldr	r3, [pc, #36]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800576a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800576c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005776:	4906      	ldr	r1, [pc, #24]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005778:	4313      	orrs	r3, r2
 800577a:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800577c:	7dbb      	ldrb	r3, [r7, #22]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d101      	bne.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 8005782:	2300      	movs	r3, #0
 8005784:	e000      	b.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 8005786:	2301      	movs	r3, #1
}
 8005788:	4618      	mov	r0, r3
 800578a:	3718      	adds	r7, #24
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}
 8005790:	58024400 	.word	0x58024400

08005794 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b090      	sub	sp, #64	; 0x40
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057a2:	f040 8089 	bne.w	80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80057a6:	4ba8      	ldr	r3, [pc, #672]	; (8005a48 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80057a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057aa:	f003 0307 	and.w	r3, r3, #7
 80057ae:	633b      	str	r3, [r7, #48]	; 0x30
 80057b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057b2:	2b04      	cmp	r3, #4
 80057b4:	d87d      	bhi.n	80058b2 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 80057b6:	a201      	add	r2, pc, #4	; (adr r2, 80057bc <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 80057b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057bc:	080057d1 	.word	0x080057d1
 80057c0:	080057f5 	.word	0x080057f5
 80057c4:	08005819 	.word	0x08005819
 80057c8:	080058ad 	.word	0x080058ad
 80057cc:	0800583d 	.word	0x0800583d

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80057d0:	4b9d      	ldr	r3, [pc, #628]	; (8005a48 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80057dc:	d107      	bne.n	80057ee <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80057de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057e2:	4618      	mov	r0, r3
 80057e4:	f000 febe 	bl	8006564 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 80057e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ea:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80057ec:	e3f5      	b.n	8005fda <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 80057ee:	2300      	movs	r3, #0
 80057f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80057f2:	e3f2      	b.n	8005fda <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80057f4:	4b94      	ldr	r3, [pc, #592]	; (8005a48 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005800:	d107      	bne.n	8005812 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005802:	f107 0318 	add.w	r3, r7, #24
 8005806:	4618      	mov	r0, r3
 8005808:	f000 fc04 	bl	8006014 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800580c:	69bb      	ldr	r3, [r7, #24]
 800580e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005810:	e3e3      	b.n	8005fda <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8005812:	2300      	movs	r3, #0
 8005814:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005816:	e3e0      	b.n	8005fda <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005818:	4b8b      	ldr	r3, [pc, #556]	; (8005a48 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005820:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005824:	d107      	bne.n	8005836 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005826:	f107 030c 	add.w	r3, r7, #12
 800582a:	4618      	mov	r0, r3
 800582c:	f000 fd46 	bl	80062bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005834:	e3d1      	b.n	8005fda <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8005836:	2300      	movs	r3, #0
 8005838:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800583a:	e3ce      	b.n	8005fda <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800583c:	4b82      	ldr	r3, [pc, #520]	; (8005a48 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800583e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005840:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005844:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005846:	4b80      	ldr	r3, [pc, #512]	; (8005a48 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f003 0304 	and.w	r3, r3, #4
 800584e:	2b04      	cmp	r3, #4
 8005850:	d10c      	bne.n	800586c <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8005852:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005854:	2b00      	cmp	r3, #0
 8005856:	d109      	bne.n	800586c <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005858:	4b7b      	ldr	r3, [pc, #492]	; (8005a48 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	08db      	lsrs	r3, r3, #3
 800585e:	f003 0303 	and.w	r3, r3, #3
 8005862:	4a7a      	ldr	r2, [pc, #488]	; (8005a4c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005864:	fa22 f303 	lsr.w	r3, r2, r3
 8005868:	63fb      	str	r3, [r7, #60]	; 0x3c
 800586a:	e01e      	b.n	80058aa <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800586c:	4b76      	ldr	r3, [pc, #472]	; (8005a48 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005874:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005878:	d106      	bne.n	8005888 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800587a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800587c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005880:	d102      	bne.n	8005888 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005882:	4b73      	ldr	r3, [pc, #460]	; (8005a50 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005884:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005886:	e010      	b.n	80058aa <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005888:	4b6f      	ldr	r3, [pc, #444]	; (8005a48 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005890:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005894:	d106      	bne.n	80058a4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8005896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005898:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800589c:	d102      	bne.n	80058a4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800589e:	4b6d      	ldr	r3, [pc, #436]	; (8005a54 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80058a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058a2:	e002      	b.n	80058aa <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80058a4:	2300      	movs	r3, #0
 80058a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80058a8:	e397      	b.n	8005fda <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 80058aa:	e396      	b.n	8005fda <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80058ac:	4b6a      	ldr	r3, [pc, #424]	; (8005a58 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80058ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80058b0:	e393      	b.n	8005fda <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      default :
        {
          frequency = 0;
 80058b2:	2300      	movs	r3, #0
 80058b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80058b6:	e390      	b.n	8005fda <HAL_RCCEx_GetPeriphCLKFreq+0x846>
    }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

    else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058be:	f040 8095 	bne.w	80059ec <HAL_RCCEx_GetPeriphCLKFreq+0x258>
    {
      saiclocksource= __HAL_RCC_GET_SAI2A_SOURCE();
 80058c2:	4b61      	ldr	r3, [pc, #388]	; (8005a48 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80058c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058c6:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80058ca:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80058cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058d2:	d04d      	beq.n	8005970 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
 80058d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058da:	f200 8084 	bhi.w	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 80058de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e0:	2bc0      	cmp	r3, #192	; 0xc0
 80058e2:	d07d      	beq.n	80059e0 <HAL_RCCEx_GetPeriphCLKFreq+0x24c>
 80058e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e6:	2bc0      	cmp	r3, #192	; 0xc0
 80058e8:	d87d      	bhi.n	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 80058ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ec:	2b80      	cmp	r3, #128	; 0x80
 80058ee:	d02d      	beq.n	800594c <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>
 80058f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f2:	2b80      	cmp	r3, #128	; 0x80
 80058f4:	d877      	bhi.n	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 80058f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d003      	beq.n	8005904 <HAL_RCCEx_GetPeriphCLKFreq+0x170>
 80058fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058fe:	2b40      	cmp	r3, #64	; 0x40
 8005900:	d012      	beq.n	8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 8005902:	e070      	b.n	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
      {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005904:	4b50      	ldr	r3, [pc, #320]	; (8005a48 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800590c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005910:	d107      	bne.n	8005922 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005912:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005916:	4618      	mov	r0, r3
 8005918:	f000 fe24 	bl	8006564 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800591c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800591e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005920:	e35b      	b.n	8005fda <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8005922:	2300      	movs	r3, #0
 8005924:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005926:	e358      	b.n	8005fda <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005928:	4b47      	ldr	r3, [pc, #284]	; (8005a48 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005930:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005934:	d107      	bne.n	8005946 <HAL_RCCEx_GetPeriphCLKFreq+0x1b2>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005936:	f107 0318 	add.w	r3, r7, #24
 800593a:	4618      	mov	r0, r3
 800593c:	f000 fb6a 	bl	8006014 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005940:	69bb      	ldr	r3, [r7, #24]
 8005942:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005944:	e349      	b.n	8005fda <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8005946:	2300      	movs	r3, #0
 8005948:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800594a:	e346      	b.n	8005fda <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800594c:	4b3e      	ldr	r3, [pc, #248]	; (8005a48 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005954:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005958:	d107      	bne.n	800596a <HAL_RCCEx_GetPeriphCLKFreq+0x1d6>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800595a:	f107 030c 	add.w	r3, r7, #12
 800595e:	4618      	mov	r0, r3
 8005960:	f000 fcac 	bl	80062bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005968:	e337      	b.n	8005fda <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 800596a:	2300      	movs	r3, #0
 800596c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800596e:	e334      	b.n	8005fda <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005970:	4b35      	ldr	r3, [pc, #212]	; (8005a48 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005972:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005974:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005978:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800597a:	4b33      	ldr	r3, [pc, #204]	; (8005a48 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f003 0304 	and.w	r3, r3, #4
 8005982:	2b04      	cmp	r3, #4
 8005984:	d10c      	bne.n	80059a0 <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
 8005986:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005988:	2b00      	cmp	r3, #0
 800598a:	d109      	bne.n	80059a0 <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800598c:	4b2e      	ldr	r3, [pc, #184]	; (8005a48 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	08db      	lsrs	r3, r3, #3
 8005992:	f003 0303 	and.w	r3, r3, #3
 8005996:	4a2d      	ldr	r2, [pc, #180]	; (8005a4c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005998:	fa22 f303 	lsr.w	r3, r2, r3
 800599c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800599e:	e01e      	b.n	80059de <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80059a0:	4b29      	ldr	r3, [pc, #164]	; (8005a48 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059ac:	d106      	bne.n	80059bc <HAL_RCCEx_GetPeriphCLKFreq+0x228>
 80059ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80059b4:	d102      	bne.n	80059bc <HAL_RCCEx_GetPeriphCLKFreq+0x228>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80059b6:	4b26      	ldr	r3, [pc, #152]	; (8005a50 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80059b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059ba:	e010      	b.n	80059de <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80059bc:	4b22      	ldr	r3, [pc, #136]	; (8005a48 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80059c8:	d106      	bne.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 80059ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059d0:	d102      	bne.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80059d2:	4b20      	ldr	r3, [pc, #128]	; (8005a54 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80059d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059d6:	e002      	b.n	80059de <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80059d8:	2300      	movs	r3, #0
 80059da:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80059dc:	e2fd      	b.n	8005fda <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 80059de:	e2fc      	b.n	8005fda <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80059e0:	4b1d      	ldr	r3, [pc, #116]	; (8005a58 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80059e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80059e4:	e2f9      	b.n	8005fda <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      default :
        {
          frequency = 0;
 80059e6:	2300      	movs	r3, #0
 80059e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80059ea:	e2f6      	b.n	8005fda <HAL_RCCEx_GetPeriphCLKFreq+0x846>

    }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059f2:	f040 80a7 	bne.w	8005b44 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
    {

      saiclocksource= __HAL_RCC_GET_SAI2B_SOURCE();
 80059f6:	4b14      	ldr	r3, [pc, #80]	; (8005a48 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80059f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059fa:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 80059fe:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a06:	d05f      	beq.n	8005ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x334>
 8005a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a0e:	f200 8096 	bhi.w	8005b3e <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8005a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a14:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005a18:	f000 808e 	beq.w	8005b38 <HAL_RCCEx_GetPeriphCLKFreq+0x3a4>
 8005a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a1e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005a22:	f200 808c 	bhi.w	8005b3e <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8005a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a2c:	d03a      	beq.n	8005aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
 8005a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a34:	f200 8083 	bhi.w	8005b3e <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8005a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d00e      	beq.n	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
 8005a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a44:	d01c      	beq.n	8005a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>
 8005a46:	e07a      	b.n	8005b3e <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8005a48:	58024400 	.word	0x58024400
 8005a4c:	03d09000 	.word	0x03d09000
 8005a50:	003d0900 	.word	0x003d0900
 8005a54:	016e3600 	.word	0x016e3600
 8005a58:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005a5c:	4ba8      	ldr	r3, [pc, #672]	; (8005d00 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a64:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005a68:	d107      	bne.n	8005a7a <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005a6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f000 fd78 	bl	8006564 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a76:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005a78:	e2af      	b.n	8005fda <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a7e:	e2ac      	b.n	8005fda <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005a80:	4b9f      	ldr	r3, [pc, #636]	; (8005d00 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a88:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a8c:	d107      	bne.n	8005a9e <HAL_RCCEx_GetPeriphCLKFreq+0x30a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a8e:	f107 0318 	add.w	r3, r7, #24
 8005a92:	4618      	mov	r0, r3
 8005a94:	f000 fabe 	bl	8006014 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005a98:	69bb      	ldr	r3, [r7, #24]
 8005a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005a9c:	e29d      	b.n	8005fda <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005aa2:	e29a      	b.n	8005fda <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005aa4:	4b96      	ldr	r3, [pc, #600]	; (8005d00 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005aac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ab0:	d107      	bne.n	8005ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x32e>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005ab2:	f107 030c 	add.w	r3, r7, #12
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f000 fc00 	bl	80062bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005ac0:	e28b      	b.n	8005fda <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ac6:	e288      	b.n	8005fda <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005ac8:	4b8d      	ldr	r3, [pc, #564]	; (8005d00 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8005aca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005acc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005ad0:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005ad2:	4b8b      	ldr	r3, [pc, #556]	; (8005d00 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f003 0304 	and.w	r3, r3, #4
 8005ada:	2b04      	cmp	r3, #4
 8005adc:	d10c      	bne.n	8005af8 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
 8005ade:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d109      	bne.n	8005af8 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005ae4:	4b86      	ldr	r3, [pc, #536]	; (8005d00 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	08db      	lsrs	r3, r3, #3
 8005aea:	f003 0303 	and.w	r3, r3, #3
 8005aee:	4a85      	ldr	r2, [pc, #532]	; (8005d04 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8005af0:	fa22 f303 	lsr.w	r3, r2, r3
 8005af4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005af6:	e01e      	b.n	8005b36 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005af8:	4b81      	ldr	r3, [pc, #516]	; (8005d00 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b04:	d106      	bne.n	8005b14 <HAL_RCCEx_GetPeriphCLKFreq+0x380>
 8005b06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b08:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b0c:	d102      	bne.n	8005b14 <HAL_RCCEx_GetPeriphCLKFreq+0x380>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005b0e:	4b7e      	ldr	r3, [pc, #504]	; (8005d08 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8005b10:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b12:	e010      	b.n	8005b36 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005b14:	4b7a      	ldr	r3, [pc, #488]	; (8005d00 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b1c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b20:	d106      	bne.n	8005b30 <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
 8005b22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b28:	d102      	bne.n	8005b30 <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005b2a:	4b78      	ldr	r3, [pc, #480]	; (8005d0c <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8005b2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b2e:	e002      	b.n	8005b36 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005b30:	2300      	movs	r3, #0
 8005b32:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
          break;
 8005b34:	e251      	b.n	8005fda <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 8005b36:	e250      	b.n	8005fda <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005b38:	4b75      	ldr	r3, [pc, #468]	; (8005d10 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8005b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b3c:	e24d      	b.n	8005fda <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      default :
        {
          frequency = 0;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b42:	e24a      	b.n	8005fda <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          break;
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b4a:	f040 809c 	bne.w	8005c86 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8005b4e:	4b6c      	ldr	r3, [pc, #432]	; (8005d00 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8005b50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b52:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8005b56:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b5e:	d054      	beq.n	8005c0a <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8005b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b62:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b66:	f200 808b 	bhi.w	8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8005b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b6c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005b70:	f000 8083 	beq.w	8005c7a <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
 8005b74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b76:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005b7a:	f200 8081 	bhi.w	8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8005b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b84:	d02f      	beq.n	8005be6 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 8005b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b8c:	d878      	bhi.n	8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8005b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d004      	beq.n	8005b9e <HAL_RCCEx_GetPeriphCLKFreq+0x40a>
 8005b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b9a:	d012      	beq.n	8005bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
 8005b9c:	e070      	b.n	8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005b9e:	4b58      	ldr	r3, [pc, #352]	; (8005d00 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ba6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005baa:	d107      	bne.n	8005bbc <HAL_RCCEx_GetPeriphCLKFreq+0x428>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005bac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	f000 fcd7 	bl	8006564 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bb8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005bba:	e20e      	b.n	8005fda <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005bc0:	e20b      	b.n	8005fda <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005bc2:	4b4f      	ldr	r3, [pc, #316]	; (8005d00 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005bca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005bce:	d107      	bne.n	8005be0 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005bd0:	f107 0318 	add.w	r3, r7, #24
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f000 fa1d 	bl	8006014 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005bda:	69bb      	ldr	r3, [r7, #24]
 8005bdc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005bde:	e1fc      	b.n	8005fda <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8005be0:	2300      	movs	r3, #0
 8005be2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005be4:	e1f9      	b.n	8005fda <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005be6:	4b46      	ldr	r3, [pc, #280]	; (8005d00 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005bee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005bf2:	d107      	bne.n	8005c04 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005bf4:	f107 030c 	add.w	r3, r7, #12
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f000 fb5f 	bl	80062bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005c02:	e1ea      	b.n	8005fda <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8005c04:	2300      	movs	r3, #0
 8005c06:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005c08:	e1e7      	b.n	8005fda <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005c0a:	4b3d      	ldr	r3, [pc, #244]	; (8005d00 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8005c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c0e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005c12:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005c14:	4b3a      	ldr	r3, [pc, #232]	; (8005d00 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f003 0304 	and.w	r3, r3, #4
 8005c1c:	2b04      	cmp	r3, #4
 8005c1e:	d10c      	bne.n	8005c3a <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
 8005c20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d109      	bne.n	8005c3a <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005c26:	4b36      	ldr	r3, [pc, #216]	; (8005d00 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	08db      	lsrs	r3, r3, #3
 8005c2c:	f003 0303 	and.w	r3, r3, #3
 8005c30:	4a34      	ldr	r2, [pc, #208]	; (8005d04 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8005c32:	fa22 f303 	lsr.w	r3, r2, r3
 8005c36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c38:	e01e      	b.n	8005c78 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005c3a:	4b31      	ldr	r3, [pc, #196]	; (8005d00 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c46:	d106      	bne.n	8005c56 <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
 8005c48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c4a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c4e:	d102      	bne.n	8005c56 <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005c50:	4b2d      	ldr	r3, [pc, #180]	; (8005d08 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8005c52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c54:	e010      	b.n	8005c78 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005c56:	4b2a      	ldr	r3, [pc, #168]	; (8005d00 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c5e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c62:	d106      	bne.n	8005c72 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8005c64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c6a:	d102      	bne.n	8005c72 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005c6c:	4b27      	ldr	r3, [pc, #156]	; (8005d0c <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8005c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c70:	e002      	b.n	8005c78 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005c72:	2300      	movs	r3, #0
 8005c74:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005c76:	e1b0      	b.n	8005fda <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 8005c78:	e1af      	b.n	8005fda <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005c7a:	4b25      	ldr	r3, [pc, #148]	; (8005d10 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8005c7c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005c7e:	e1ac      	b.n	8005fda <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      default :
        {
          frequency = 0;
 8005c80:	2300      	movs	r3, #0
 8005c82:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005c84:	e1a9      	b.n	8005fda <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005c8c:	d17d      	bne.n	8005d8a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8005c8e:	4b1c      	ldr	r3, [pc, #112]	; (8005d00 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8005c90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c92:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005c96:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c9a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c9e:	d039      	beq.n	8005d14 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
 8005ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ca2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ca6:	d86d      	bhi.n	8005d84 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8005ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d004      	beq.n	8005cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>
 8005cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cb4:	d012      	beq.n	8005cdc <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 8005cb6:	e065      	b.n	8005d84 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005cb8:	4b11      	ldr	r3, [pc, #68]	; (8005d00 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005cc0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005cc4:	d107      	bne.n	8005cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x542>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005cc6:	f107 0318 	add.w	r3, r7, #24
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f000 f9a2 	bl	8006014 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005cd0:	69bb      	ldr	r3, [r7, #24]
 8005cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005cd4:	e181      	b.n	8005fda <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005cda:	e17e      	b.n	8005fda <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005cdc:	4b08      	ldr	r3, [pc, #32]	; (8005d00 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005ce4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ce8:	d107      	bne.n	8005cfa <HAL_RCCEx_GetPeriphCLKFreq+0x566>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005cea:	f107 030c 	add.w	r3, r7, #12
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f000 fae4 	bl	80062bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005cf8:	e16f      	b.n	8005fda <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005cfe:	e16c      	b.n	8005fda <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 8005d00:	58024400 	.word	0x58024400
 8005d04:	03d09000 	.word	0x03d09000
 8005d08:	003d0900 	.word	0x003d0900
 8005d0c:	016e3600 	.word	0x016e3600
 8005d10:	00bb8000 	.word	0x00bb8000
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005d14:	4ba0      	ldr	r3, [pc, #640]	; (8005f98 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8005d16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d18:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005d1c:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005d1e:	4b9e      	ldr	r3, [pc, #632]	; (8005f98 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f003 0304 	and.w	r3, r3, #4
 8005d26:	2b04      	cmp	r3, #4
 8005d28:	d10c      	bne.n	8005d44 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
 8005d2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d109      	bne.n	8005d44 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005d30:	4b99      	ldr	r3, [pc, #612]	; (8005f98 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	08db      	lsrs	r3, r3, #3
 8005d36:	f003 0303 	and.w	r3, r3, #3
 8005d3a:	4a98      	ldr	r2, [pc, #608]	; (8005f9c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8005d3c:	fa22 f303 	lsr.w	r3, r2, r3
 8005d40:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d42:	e01e      	b.n	8005d82 <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005d44:	4b94      	ldr	r3, [pc, #592]	; (8005f98 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d50:	d106      	bne.n	8005d60 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8005d52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d54:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d58:	d102      	bne.n	8005d60 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005d5a:	4b91      	ldr	r3, [pc, #580]	; (8005fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8005d5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d5e:	e010      	b.n	8005d82 <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005d60:	4b8d      	ldr	r3, [pc, #564]	; (8005f98 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d68:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d6c:	d106      	bne.n	8005d7c <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 8005d6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d74:	d102      	bne.n	8005d7c <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005d76:	4b8b      	ldr	r3, [pc, #556]	; (8005fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 8005d78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d7a:	e002      	b.n	8005d82 <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005d80:	e12b      	b.n	8005fda <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 8005d82:	e12a      	b.n	8005fda <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      default :
        {
          frequency = 0;
 8005d84:	2300      	movs	r3, #0
 8005d86:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005d88:	e127      	b.n	8005fda <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d90:	d133      	bne.n	8005dfa <HAL_RCCEx_GetPeriphCLKFreq+0x666>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8005d92:	4b81      	ldr	r3, [pc, #516]	; (8005f98 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8005d94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d9a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d004      	beq.n	8005dac <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 8005da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005da4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005da8:	d012      	beq.n	8005dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 8005daa:	e023      	b.n	8005df4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005dac:	4b7a      	ldr	r3, [pc, #488]	; (8005f98 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005db4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005db8:	d107      	bne.n	8005dca <HAL_RCCEx_GetPeriphCLKFreq+0x636>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005dba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f000 fbd0 	bl	8006564 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dc6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005dc8:	e107      	b.n	8005fda <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005dce:	e104      	b.n	8005fda <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005dd0:	4b71      	ldr	r3, [pc, #452]	; (8005f98 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005dd8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ddc:	d107      	bne.n	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005dde:	f107 0318 	add.w	r3, r7, #24
 8005de2:	4618      	mov	r0, r3
 8005de4:	f000 f916 	bl	8006014 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005de8:	6a3b      	ldr	r3, [r7, #32]
 8005dea:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005dec:	e0f5      	b.n	8005fda <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8005dee:	2300      	movs	r3, #0
 8005df0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005df2:	e0f2      	b.n	8005fda <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      default :
        {
          frequency = 0;
 8005df4:	2300      	movs	r3, #0
 8005df6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005df8:	e0ef      	b.n	8005fda <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e00:	f040 8091 	bne.w	8005f26 <HAL_RCCEx_GetPeriphCLKFreq+0x792>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8005e04:	4b64      	ldr	r3, [pc, #400]	; (8005f98 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8005e06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e08:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8005e0c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e10:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8005e14:	f000 8081 	beq.w	8005f1a <HAL_RCCEx_GetPeriphCLKFreq+0x786>
 8005e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e1a:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8005e1e:	d87f      	bhi.n	8005f20 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 8005e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e22:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005e26:	d06b      	beq.n	8005f00 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 8005e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005e2e:	d877      	bhi.n	8005f20 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 8005e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e36:	d056      	beq.n	8005ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x752>
 8005e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e3e:	d86f      	bhi.n	8005f20 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 8005e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e42:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005e46:	d03b      	beq.n	8005ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 8005e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e4a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005e4e:	d867      	bhi.n	8005f20 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 8005e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e56:	d021      	beq.n	8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0x708>
 8005e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e5e:	d85f      	bhi.n	8005f20 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 8005e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d004      	beq.n	8005e70 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
 8005e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e68:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e6c:	d004      	beq.n	8005e78 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
 8005e6e:	e057      	b.n	8005f20 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8005e70:	f000 f8ba 	bl	8005fe8 <HAL_RCCEx_GetD3PCLK1Freq>
 8005e74:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8005e76:	e0b0      	b.n	8005fda <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005e78:	4b47      	ldr	r3, [pc, #284]	; (8005f98 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e80:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e84:	d107      	bne.n	8005e96 <HAL_RCCEx_GetPeriphCLKFreq+0x702>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e86:	f107 0318 	add.w	r3, r7, #24
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f000 f8c2 	bl	8006014 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005e90:	69fb      	ldr	r3, [r7, #28]
 8005e92:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005e94:	e0a1      	b.n	8005fda <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8005e96:	2300      	movs	r3, #0
 8005e98:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005e9a:	e09e      	b.n	8005fda <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005e9c:	4b3e      	ldr	r3, [pc, #248]	; (8005f98 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005ea4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ea8:	d107      	bne.n	8005eba <HAL_RCCEx_GetPeriphCLKFreq+0x726>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005eaa:	f107 030c 	add.w	r3, r7, #12
 8005eae:	4618      	mov	r0, r3
 8005eb0:	f000 fa04 	bl	80062bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005eb8:	e08f      	b.n	8005fda <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ebe:	e08c      	b.n	8005fda <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005ec0:	4b35      	ldr	r3, [pc, #212]	; (8005f98 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f003 0304 	and.w	r3, r3, #4
 8005ec8:	2b04      	cmp	r3, #4
 8005eca:	d109      	bne.n	8005ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005ecc:	4b32      	ldr	r3, [pc, #200]	; (8005f98 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	08db      	lsrs	r3, r3, #3
 8005ed2:	f003 0303 	and.w	r3, r3, #3
 8005ed6:	4a31      	ldr	r2, [pc, #196]	; (8005f9c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8005ed8:	fa22 f303 	lsr.w	r3, r2, r3
 8005edc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005ede:	e07c      	b.n	8005fda <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ee4:	e079      	b.n	8005fda <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005ee6:	4b2c      	ldr	r3, [pc, #176]	; (8005f98 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ef2:	d102      	bne.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x766>
         {
          frequency = CSI_VALUE;
 8005ef4:	4b2a      	ldr	r3, [pc, #168]	; (8005fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8005ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005ef8:	e06f      	b.n	8005fda <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8005efa:	2300      	movs	r3, #0
 8005efc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005efe:	e06c      	b.n	8005fda <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005f00:	4b25      	ldr	r3, [pc, #148]	; (8005f98 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f0c:	d102      	bne.n	8005f14 <HAL_RCCEx_GetPeriphCLKFreq+0x780>
         {
          frequency = HSE_VALUE;
 8005f0e:	4b25      	ldr	r3, [pc, #148]	; (8005fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 8005f10:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005f12:	e062      	b.n	8005fda <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8005f14:	2300      	movs	r3, #0
 8005f16:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005f18:	e05f      	b.n	8005fda <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005f1a:	4b23      	ldr	r3, [pc, #140]	; (8005fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x814>)
 8005f1c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005f1e:	e05c      	b.n	8005fda <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8005f20:	2300      	movs	r3, #0
 8005f22:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005f24:	e059      	b.n	8005fda <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f2c:	d153      	bne.n	8005fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8005f2e:	4b1a      	ldr	r3, [pc, #104]	; (8005f98 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8005f30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f32:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005f36:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f3e:	d035      	beq.n	8005fac <HAL_RCCEx_GetPeriphCLKFreq+0x818>
 8005f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f46:	d843      	bhi.n	8005fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>
 8005f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d004      	beq.n	8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
 8005f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f50:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f54:	d00d      	beq.n	8005f72 <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
 8005f56:	e03b      	b.n	8005fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005f58:	4b0f      	ldr	r3, [pc, #60]	; (8005f98 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f60:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f64:	d102      	bne.n	8005f6c <HAL_RCCEx_GetPeriphCLKFreq+0x7d8>
         {
          frequency = HSE_VALUE;
 8005f66:	4b0f      	ldr	r3, [pc, #60]	; (8005fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 8005f68:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005f6a:	e036      	b.n	8005fda <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005f70:	e033      	b.n	8005fda <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005f72:	4b09      	ldr	r3, [pc, #36]	; (8005f98 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f7a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005f7e:	d107      	bne.n	8005f90 <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005f80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f84:	4618      	mov	r0, r3
 8005f86:	f000 faed 	bl	8006564 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f8c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005f8e:	e024      	b.n	8005fda <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8005f90:	2300      	movs	r3, #0
 8005f92:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005f94:	e021      	b.n	8005fda <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 8005f96:	bf00      	nop
 8005f98:	58024400 	.word	0x58024400
 8005f9c:	03d09000 	.word	0x03d09000
 8005fa0:	003d0900 	.word	0x003d0900
 8005fa4:	016e3600 	.word	0x016e3600
 8005fa8:	00bb8000 	.word	0x00bb8000
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005fac:	4b0d      	ldr	r3, [pc, #52]	; (8005fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005fb4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005fb8:	d107      	bne.n	8005fca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005fba:	f107 0318 	add.w	r3, r7, #24
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f000 f828 	bl	8006014 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005fc4:	69fb      	ldr	r3, [r7, #28]
 8005fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005fc8:	e007      	b.n	8005fda <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005fce:	e004      	b.n	8005fda <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      default :
        {
          frequency = 0;
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005fd4:	e001      	b.n	8005fda <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      }
    }
  else
    {
      frequency = 0;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8005fda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	3740      	adds	r7, #64	; 0x40
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}
 8005fe4:	58024400 	.word	0x58024400

08005fe8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8005fec:	f7fe fc6a 	bl	80048c4 <HAL_RCC_GetHCLKFreq>
 8005ff0:	4602      	mov	r2, r0
 8005ff2:	4b06      	ldr	r3, [pc, #24]	; (800600c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005ff4:	6a1b      	ldr	r3, [r3, #32]
 8005ff6:	091b      	lsrs	r3, r3, #4
 8005ff8:	f003 0307 	and.w	r3, r3, #7
 8005ffc:	4904      	ldr	r1, [pc, #16]	; (8006010 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005ffe:	5ccb      	ldrb	r3, [r1, r3]
 8006000:	f003 031f 	and.w	r3, r3, #31
 8006004:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8006008:	4618      	mov	r0, r3
 800600a:	bd80      	pop	{r7, pc}
 800600c:	58024400 	.word	0x58024400
 8006010:	08008480 	.word	0x08008480

08006014 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8006014:	b480      	push	{r7}
 8006016:	b089      	sub	sp, #36	; 0x24
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800601c:	4ba1      	ldr	r3, [pc, #644]	; (80062a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800601e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006020:	f003 0303 	and.w	r3, r3, #3
 8006024:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8006026:	4b9f      	ldr	r3, [pc, #636]	; (80062a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800602a:	0b1b      	lsrs	r3, r3, #12
 800602c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006030:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006032:	4b9c      	ldr	r3, [pc, #624]	; (80062a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006036:	091b      	lsrs	r3, r3, #4
 8006038:	f003 0301 	and.w	r3, r3, #1
 800603c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800603e:	4b99      	ldr	r3, [pc, #612]	; (80062a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006040:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006042:	08db      	lsrs	r3, r3, #3
 8006044:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006048:	693a      	ldr	r2, [r7, #16]
 800604a:	fb02 f303 	mul.w	r3, r2, r3
 800604e:	ee07 3a90 	vmov	s15, r3
 8006052:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006056:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	2b00      	cmp	r3, #0
 800605e:	f000 8111 	beq.w	8006284 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006062:	69bb      	ldr	r3, [r7, #24]
 8006064:	2b02      	cmp	r3, #2
 8006066:	f000 8083 	beq.w	8006170 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800606a:	69bb      	ldr	r3, [r7, #24]
 800606c:	2b02      	cmp	r3, #2
 800606e:	f200 80a1 	bhi.w	80061b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006072:	69bb      	ldr	r3, [r7, #24]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d003      	beq.n	8006080 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006078:	69bb      	ldr	r3, [r7, #24]
 800607a:	2b01      	cmp	r3, #1
 800607c:	d056      	beq.n	800612c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800607e:	e099      	b.n	80061b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006080:	4b88      	ldr	r3, [pc, #544]	; (80062a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f003 0320 	and.w	r3, r3, #32
 8006088:	2b00      	cmp	r3, #0
 800608a:	d02d      	beq.n	80060e8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800608c:	4b85      	ldr	r3, [pc, #532]	; (80062a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	08db      	lsrs	r3, r3, #3
 8006092:	f003 0303 	and.w	r3, r3, #3
 8006096:	4a84      	ldr	r2, [pc, #528]	; (80062a8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006098:	fa22 f303 	lsr.w	r3, r2, r3
 800609c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	ee07 3a90 	vmov	s15, r3
 80060a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	ee07 3a90 	vmov	s15, r3
 80060ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060b6:	4b7b      	ldr	r3, [pc, #492]	; (80062a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80060b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060be:	ee07 3a90 	vmov	s15, r3
 80060c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80060ca:	eddf 5a78 	vldr	s11, [pc, #480]	; 80062ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80060ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060e2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80060e6:	e087      	b.n	80061f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	ee07 3a90 	vmov	s15, r3
 80060ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060f2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80062b0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80060f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060fa:	4b6a      	ldr	r3, [pc, #424]	; (80062a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80060fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006102:	ee07 3a90 	vmov	s15, r3
 8006106:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800610a:	ed97 6a03 	vldr	s12, [r7, #12]
 800610e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80062ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006112:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006116:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800611a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800611e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006122:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006126:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800612a:	e065      	b.n	80061f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	ee07 3a90 	vmov	s15, r3
 8006132:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006136:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80062b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800613a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800613e:	4b59      	ldr	r3, [pc, #356]	; (80062a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006142:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006146:	ee07 3a90 	vmov	s15, r3
 800614a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800614e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006152:	eddf 5a56 	vldr	s11, [pc, #344]	; 80062ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006156:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800615a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800615e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006162:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006166:	ee67 7a27 	vmul.f32	s15, s14, s15
 800616a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800616e:	e043      	b.n	80061f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	ee07 3a90 	vmov	s15, r3
 8006176:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800617a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80062b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800617e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006182:	4b48      	ldr	r3, [pc, #288]	; (80062a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006186:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800618a:	ee07 3a90 	vmov	s15, r3
 800618e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006192:	ed97 6a03 	vldr	s12, [r7, #12]
 8006196:	eddf 5a45 	vldr	s11, [pc, #276]	; 80062ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800619a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800619e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80061a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80061b2:	e021      	b.n	80061f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	ee07 3a90 	vmov	s15, r3
 80061ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061be:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80062b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80061c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061c6:	4b37      	ldr	r3, [pc, #220]	; (80062a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80061c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061ce:	ee07 3a90 	vmov	s15, r3
 80061d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80061da:	eddf 5a34 	vldr	s11, [pc, #208]	; 80062ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80061de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80061ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061f2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80061f6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80061f8:	4b2a      	ldr	r3, [pc, #168]	; (80062a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80061fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061fc:	0a5b      	lsrs	r3, r3, #9
 80061fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006202:	ee07 3a90 	vmov	s15, r3
 8006206:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800620a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800620e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006212:	edd7 6a07 	vldr	s13, [r7, #28]
 8006216:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800621a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800621e:	ee17 2a90 	vmov	r2, s15
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8006226:	4b1f      	ldr	r3, [pc, #124]	; (80062a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800622a:	0c1b      	lsrs	r3, r3, #16
 800622c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006230:	ee07 3a90 	vmov	s15, r3
 8006234:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006238:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800623c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006240:	edd7 6a07 	vldr	s13, [r7, #28]
 8006244:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006248:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800624c:	ee17 2a90 	vmov	r2, s15
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8006254:	4b13      	ldr	r3, [pc, #76]	; (80062a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006258:	0e1b      	lsrs	r3, r3, #24
 800625a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800625e:	ee07 3a90 	vmov	s15, r3
 8006262:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006266:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800626a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800626e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006272:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006276:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800627a:	ee17 2a90 	vmov	r2, s15
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006282:	e008      	b.n	8006296 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2200      	movs	r2, #0
 8006288:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2200      	movs	r2, #0
 800628e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2200      	movs	r2, #0
 8006294:	609a      	str	r2, [r3, #8]
}
 8006296:	bf00      	nop
 8006298:	3724      	adds	r7, #36	; 0x24
 800629a:	46bd      	mov	sp, r7
 800629c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a0:	4770      	bx	lr
 80062a2:	bf00      	nop
 80062a4:	58024400 	.word	0x58024400
 80062a8:	03d09000 	.word	0x03d09000
 80062ac:	46000000 	.word	0x46000000
 80062b0:	4c742400 	.word	0x4c742400
 80062b4:	4a742400 	.word	0x4a742400
 80062b8:	4bb71b00 	.word	0x4bb71b00

080062bc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80062bc:	b480      	push	{r7}
 80062be:	b089      	sub	sp, #36	; 0x24
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80062c4:	4ba1      	ldr	r3, [pc, #644]	; (800654c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80062c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062c8:	f003 0303 	and.w	r3, r3, #3
 80062cc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80062ce:	4b9f      	ldr	r3, [pc, #636]	; (800654c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80062d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062d2:	0d1b      	lsrs	r3, r3, #20
 80062d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80062d8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80062da:	4b9c      	ldr	r3, [pc, #624]	; (800654c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80062dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062de:	0a1b      	lsrs	r3, r3, #8
 80062e0:	f003 0301 	and.w	r3, r3, #1
 80062e4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80062e6:	4b99      	ldr	r3, [pc, #612]	; (800654c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80062e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062ea:	08db      	lsrs	r3, r3, #3
 80062ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80062f0:	693a      	ldr	r2, [r7, #16]
 80062f2:	fb02 f303 	mul.w	r3, r2, r3
 80062f6:	ee07 3a90 	vmov	s15, r3
 80062fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062fe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	2b00      	cmp	r3, #0
 8006306:	f000 8111 	beq.w	800652c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800630a:	69bb      	ldr	r3, [r7, #24]
 800630c:	2b02      	cmp	r3, #2
 800630e:	f000 8083 	beq.w	8006418 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006312:	69bb      	ldr	r3, [r7, #24]
 8006314:	2b02      	cmp	r3, #2
 8006316:	f200 80a1 	bhi.w	800645c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800631a:	69bb      	ldr	r3, [r7, #24]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d003      	beq.n	8006328 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006320:	69bb      	ldr	r3, [r7, #24]
 8006322:	2b01      	cmp	r3, #1
 8006324:	d056      	beq.n	80063d4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006326:	e099      	b.n	800645c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006328:	4b88      	ldr	r3, [pc, #544]	; (800654c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f003 0320 	and.w	r3, r3, #32
 8006330:	2b00      	cmp	r3, #0
 8006332:	d02d      	beq.n	8006390 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006334:	4b85      	ldr	r3, [pc, #532]	; (800654c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	08db      	lsrs	r3, r3, #3
 800633a:	f003 0303 	and.w	r3, r3, #3
 800633e:	4a84      	ldr	r2, [pc, #528]	; (8006550 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006340:	fa22 f303 	lsr.w	r3, r2, r3
 8006344:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	ee07 3a90 	vmov	s15, r3
 800634c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	ee07 3a90 	vmov	s15, r3
 8006356:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800635a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800635e:	4b7b      	ldr	r3, [pc, #492]	; (800654c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006362:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006366:	ee07 3a90 	vmov	s15, r3
 800636a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800636e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006372:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006554 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006376:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800637a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800637e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006382:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006386:	ee67 7a27 	vmul.f32	s15, s14, s15
 800638a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800638e:	e087      	b.n	80064a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	ee07 3a90 	vmov	s15, r3
 8006396:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800639a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006558 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800639e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063a2:	4b6a      	ldr	r3, [pc, #424]	; (800654c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80063a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063aa:	ee07 3a90 	vmov	s15, r3
 80063ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80063b6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006554 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80063ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80063c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063ce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80063d2:	e065      	b.n	80064a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	ee07 3a90 	vmov	s15, r3
 80063da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063de:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800655c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80063e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063e6:	4b59      	ldr	r3, [pc, #356]	; (800654c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80063e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063ee:	ee07 3a90 	vmov	s15, r3
 80063f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80063fa:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006554 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80063fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006402:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006406:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800640a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800640e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006412:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006416:	e043      	b.n	80064a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	ee07 3a90 	vmov	s15, r3
 800641e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006422:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006560 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006426:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800642a:	4b48      	ldr	r3, [pc, #288]	; (800654c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800642c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800642e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006432:	ee07 3a90 	vmov	s15, r3
 8006436:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800643a:	ed97 6a03 	vldr	s12, [r7, #12]
 800643e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006554 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006442:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006446:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800644a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800644e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006452:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006456:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800645a:	e021      	b.n	80064a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800645c:	697b      	ldr	r3, [r7, #20]
 800645e:	ee07 3a90 	vmov	s15, r3
 8006462:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006466:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800655c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800646a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800646e:	4b37      	ldr	r3, [pc, #220]	; (800654c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006472:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006476:	ee07 3a90 	vmov	s15, r3
 800647a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800647e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006482:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006554 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006486:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800648a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800648e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006492:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006496:	ee67 7a27 	vmul.f32	s15, s14, s15
 800649a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800649e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80064a0:	4b2a      	ldr	r3, [pc, #168]	; (800654c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80064a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064a4:	0a5b      	lsrs	r3, r3, #9
 80064a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064aa:	ee07 3a90 	vmov	s15, r3
 80064ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80064b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80064ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80064be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80064c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80064c6:	ee17 2a90 	vmov	r2, s15
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80064ce:	4b1f      	ldr	r3, [pc, #124]	; (800654c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80064d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064d2:	0c1b      	lsrs	r3, r3, #16
 80064d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064d8:	ee07 3a90 	vmov	s15, r3
 80064dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80064e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80064e8:	edd7 6a07 	vldr	s13, [r7, #28]
 80064ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80064f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80064f4:	ee17 2a90 	vmov	r2, s15
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80064fc:	4b13      	ldr	r3, [pc, #76]	; (800654c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80064fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006500:	0e1b      	lsrs	r3, r3, #24
 8006502:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006506:	ee07 3a90 	vmov	s15, r3
 800650a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800650e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006512:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006516:	edd7 6a07 	vldr	s13, [r7, #28]
 800651a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800651e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006522:	ee17 2a90 	vmov	r2, s15
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800652a:	e008      	b.n	800653e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2200      	movs	r2, #0
 8006530:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2200      	movs	r2, #0
 8006536:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2200      	movs	r2, #0
 800653c:	609a      	str	r2, [r3, #8]
}
 800653e:	bf00      	nop
 8006540:	3724      	adds	r7, #36	; 0x24
 8006542:	46bd      	mov	sp, r7
 8006544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006548:	4770      	bx	lr
 800654a:	bf00      	nop
 800654c:	58024400 	.word	0x58024400
 8006550:	03d09000 	.word	0x03d09000
 8006554:	46000000 	.word	0x46000000
 8006558:	4c742400 	.word	0x4c742400
 800655c:	4a742400 	.word	0x4a742400
 8006560:	4bb71b00 	.word	0x4bb71b00

08006564 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8006564:	b480      	push	{r7}
 8006566:	b089      	sub	sp, #36	; 0x24
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800656c:	4ba0      	ldr	r3, [pc, #640]	; (80067f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800656e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006570:	f003 0303 	and.w	r3, r3, #3
 8006574:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8006576:	4b9e      	ldr	r3, [pc, #632]	; (80067f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800657a:	091b      	lsrs	r3, r3, #4
 800657c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006580:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8006582:	4b9b      	ldr	r3, [pc, #620]	; (80067f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006586:	f003 0301 	and.w	r3, r3, #1
 800658a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800658c:	4b98      	ldr	r3, [pc, #608]	; (80067f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800658e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006590:	08db      	lsrs	r3, r3, #3
 8006592:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006596:	693a      	ldr	r2, [r7, #16]
 8006598:	fb02 f303 	mul.w	r3, r2, r3
 800659c:	ee07 3a90 	vmov	s15, r3
 80065a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065a4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	f000 8111 	beq.w	80067d2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80065b0:	69bb      	ldr	r3, [r7, #24]
 80065b2:	2b02      	cmp	r3, #2
 80065b4:	f000 8083 	beq.w	80066be <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80065b8:	69bb      	ldr	r3, [r7, #24]
 80065ba:	2b02      	cmp	r3, #2
 80065bc:	f200 80a1 	bhi.w	8006702 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80065c0:	69bb      	ldr	r3, [r7, #24]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d003      	beq.n	80065ce <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80065c6:	69bb      	ldr	r3, [r7, #24]
 80065c8:	2b01      	cmp	r3, #1
 80065ca:	d056      	beq.n	800667a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80065cc:	e099      	b.n	8006702 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80065ce:	4b88      	ldr	r3, [pc, #544]	; (80067f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f003 0320 	and.w	r3, r3, #32
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d02d      	beq.n	8006636 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80065da:	4b85      	ldr	r3, [pc, #532]	; (80067f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	08db      	lsrs	r3, r3, #3
 80065e0:	f003 0303 	and.w	r3, r3, #3
 80065e4:	4a83      	ldr	r2, [pc, #524]	; (80067f4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80065e6:	fa22 f303 	lsr.w	r3, r2, r3
 80065ea:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	ee07 3a90 	vmov	s15, r3
 80065f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	ee07 3a90 	vmov	s15, r3
 80065fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006600:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006604:	4b7a      	ldr	r3, [pc, #488]	; (80067f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006608:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800660c:	ee07 3a90 	vmov	s15, r3
 8006610:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006614:	ed97 6a03 	vldr	s12, [r7, #12]
 8006618:	eddf 5a77 	vldr	s11, [pc, #476]	; 80067f8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800661c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006620:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006624:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006628:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800662c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006630:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006634:	e087      	b.n	8006746 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	ee07 3a90 	vmov	s15, r3
 800663c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006640:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80067fc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006644:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006648:	4b69      	ldr	r3, [pc, #420]	; (80067f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800664a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800664c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006650:	ee07 3a90 	vmov	s15, r3
 8006654:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006658:	ed97 6a03 	vldr	s12, [r7, #12]
 800665c:	eddf 5a66 	vldr	s11, [pc, #408]	; 80067f8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006660:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006664:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006668:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800666c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006670:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006674:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006678:	e065      	b.n	8006746 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	ee07 3a90 	vmov	s15, r3
 8006680:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006684:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8006800 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8006688:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800668c:	4b58      	ldr	r3, [pc, #352]	; (80067f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800668e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006690:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006694:	ee07 3a90 	vmov	s15, r3
 8006698:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800669c:	ed97 6a03 	vldr	s12, [r7, #12]
 80066a0:	eddf 5a55 	vldr	s11, [pc, #340]	; 80067f8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80066a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80066b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066b8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80066bc:	e043      	b.n	8006746 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80066be:	697b      	ldr	r3, [r7, #20]
 80066c0:	ee07 3a90 	vmov	s15, r3
 80066c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066c8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8006804 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80066cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066d0:	4b47      	ldr	r3, [pc, #284]	; (80067f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80066d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066d8:	ee07 3a90 	vmov	s15, r3
 80066dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066e0:	ed97 6a03 	vldr	s12, [r7, #12]
 80066e4:	eddf 5a44 	vldr	s11, [pc, #272]	; 80067f8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80066e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80066f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066fc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006700:	e021      	b.n	8006746 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	ee07 3a90 	vmov	s15, r3
 8006708:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800670c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80067fc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006710:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006714:	4b36      	ldr	r3, [pc, #216]	; (80067f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006718:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800671c:	ee07 3a90 	vmov	s15, r3
 8006720:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006724:	ed97 6a03 	vldr	s12, [r7, #12]
 8006728:	eddf 5a33 	vldr	s11, [pc, #204]	; 80067f8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800672c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006730:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006734:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006738:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800673c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006740:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006744:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8006746:	4b2a      	ldr	r3, [pc, #168]	; (80067f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800674a:	0a5b      	lsrs	r3, r3, #9
 800674c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006750:	ee07 3a90 	vmov	s15, r3
 8006754:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006758:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800675c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006760:	edd7 6a07 	vldr	s13, [r7, #28]
 8006764:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006768:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800676c:	ee17 2a90 	vmov	r2, s15
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8006774:	4b1e      	ldr	r3, [pc, #120]	; (80067f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006778:	0c1b      	lsrs	r3, r3, #16
 800677a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800677e:	ee07 3a90 	vmov	s15, r3
 8006782:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006786:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800678a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800678e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006792:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006796:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800679a:	ee17 2a90 	vmov	r2, s15
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 80067a2:	4b13      	ldr	r3, [pc, #76]	; (80067f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80067a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067a6:	0e1b      	lsrs	r3, r3, #24
 80067a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067ac:	ee07 3a90 	vmov	s15, r3
 80067b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80067b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80067bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80067c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80067c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80067c8:	ee17 2a90 	vmov	r2, s15
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80067d0:	e008      	b.n	80067e4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2200      	movs	r2, #0
 80067d6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2200      	movs	r2, #0
 80067dc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2200      	movs	r2, #0
 80067e2:	609a      	str	r2, [r3, #8]
}
 80067e4:	bf00      	nop
 80067e6:	3724      	adds	r7, #36	; 0x24
 80067e8:	46bd      	mov	sp, r7
 80067ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ee:	4770      	bx	lr
 80067f0:	58024400 	.word	0x58024400
 80067f4:	03d09000 	.word	0x03d09000
 80067f8:	46000000 	.word	0x46000000
 80067fc:	4c742400 	.word	0x4c742400
 8006800:	4a742400 	.word	0x4a742400
 8006804:	4bb71b00 	.word	0x4bb71b00

08006808 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b084      	sub	sp, #16
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
 8006810:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006812:	2300      	movs	r3, #0
 8006814:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006816:	4b53      	ldr	r3, [pc, #332]	; (8006964 <RCCEx_PLL2_Config+0x15c>)
 8006818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800681a:	f003 0303 	and.w	r3, r3, #3
 800681e:	2b03      	cmp	r3, #3
 8006820:	d101      	bne.n	8006826 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006822:	2301      	movs	r3, #1
 8006824:	e099      	b.n	800695a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006826:	4b4f      	ldr	r3, [pc, #316]	; (8006964 <RCCEx_PLL2_Config+0x15c>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a4e      	ldr	r2, [pc, #312]	; (8006964 <RCCEx_PLL2_Config+0x15c>)
 800682c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006830:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006832:	f7fb f975 	bl	8001b20 <HAL_GetTick>
 8006836:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006838:	e008      	b.n	800684c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800683a:	f7fb f971 	bl	8001b20 <HAL_GetTick>
 800683e:	4602      	mov	r2, r0
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	1ad3      	subs	r3, r2, r3
 8006844:	2b02      	cmp	r3, #2
 8006846:	d901      	bls.n	800684c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006848:	2303      	movs	r3, #3
 800684a:	e086      	b.n	800695a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800684c:	4b45      	ldr	r3, [pc, #276]	; (8006964 <RCCEx_PLL2_Config+0x15c>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006854:	2b00      	cmp	r3, #0
 8006856:	d1f0      	bne.n	800683a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006858:	4b42      	ldr	r3, [pc, #264]	; (8006964 <RCCEx_PLL2_Config+0x15c>)
 800685a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800685c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	031b      	lsls	r3, r3, #12
 8006866:	493f      	ldr	r1, [pc, #252]	; (8006964 <RCCEx_PLL2_Config+0x15c>)
 8006868:	4313      	orrs	r3, r2
 800686a:	628b      	str	r3, [r1, #40]	; 0x28
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	3b01      	subs	r3, #1
 8006872:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	689b      	ldr	r3, [r3, #8]
 800687a:	3b01      	subs	r3, #1
 800687c:	025b      	lsls	r3, r3, #9
 800687e:	b29b      	uxth	r3, r3
 8006880:	431a      	orrs	r2, r3
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	68db      	ldr	r3, [r3, #12]
 8006886:	3b01      	subs	r3, #1
 8006888:	041b      	lsls	r3, r3, #16
 800688a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800688e:	431a      	orrs	r2, r3
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	691b      	ldr	r3, [r3, #16]
 8006894:	3b01      	subs	r3, #1
 8006896:	061b      	lsls	r3, r3, #24
 8006898:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800689c:	4931      	ldr	r1, [pc, #196]	; (8006964 <RCCEx_PLL2_Config+0x15c>)
 800689e:	4313      	orrs	r3, r2
 80068a0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80068a2:	4b30      	ldr	r3, [pc, #192]	; (8006964 <RCCEx_PLL2_Config+0x15c>)
 80068a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068a6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	695b      	ldr	r3, [r3, #20]
 80068ae:	492d      	ldr	r1, [pc, #180]	; (8006964 <RCCEx_PLL2_Config+0x15c>)
 80068b0:	4313      	orrs	r3, r2
 80068b2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80068b4:	4b2b      	ldr	r3, [pc, #172]	; (8006964 <RCCEx_PLL2_Config+0x15c>)
 80068b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068b8:	f023 0220 	bic.w	r2, r3, #32
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	699b      	ldr	r3, [r3, #24]
 80068c0:	4928      	ldr	r1, [pc, #160]	; (8006964 <RCCEx_PLL2_Config+0x15c>)
 80068c2:	4313      	orrs	r3, r2
 80068c4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80068c6:	4b27      	ldr	r3, [pc, #156]	; (8006964 <RCCEx_PLL2_Config+0x15c>)
 80068c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068ca:	4a26      	ldr	r2, [pc, #152]	; (8006964 <RCCEx_PLL2_Config+0x15c>)
 80068cc:	f023 0310 	bic.w	r3, r3, #16
 80068d0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80068d2:	4b24      	ldr	r3, [pc, #144]	; (8006964 <RCCEx_PLL2_Config+0x15c>)
 80068d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80068d6:	4b24      	ldr	r3, [pc, #144]	; (8006968 <RCCEx_PLL2_Config+0x160>)
 80068d8:	4013      	ands	r3, r2
 80068da:	687a      	ldr	r2, [r7, #4]
 80068dc:	69d2      	ldr	r2, [r2, #28]
 80068de:	00d2      	lsls	r2, r2, #3
 80068e0:	4920      	ldr	r1, [pc, #128]	; (8006964 <RCCEx_PLL2_Config+0x15c>)
 80068e2:	4313      	orrs	r3, r2
 80068e4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80068e6:	4b1f      	ldr	r3, [pc, #124]	; (8006964 <RCCEx_PLL2_Config+0x15c>)
 80068e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068ea:	4a1e      	ldr	r2, [pc, #120]	; (8006964 <RCCEx_PLL2_Config+0x15c>)
 80068ec:	f043 0310 	orr.w	r3, r3, #16
 80068f0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d106      	bne.n	8006906 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80068f8:	4b1a      	ldr	r3, [pc, #104]	; (8006964 <RCCEx_PLL2_Config+0x15c>)
 80068fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068fc:	4a19      	ldr	r2, [pc, #100]	; (8006964 <RCCEx_PLL2_Config+0x15c>)
 80068fe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006902:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006904:	e00f      	b.n	8006926 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	2b01      	cmp	r3, #1
 800690a:	d106      	bne.n	800691a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800690c:	4b15      	ldr	r3, [pc, #84]	; (8006964 <RCCEx_PLL2_Config+0x15c>)
 800690e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006910:	4a14      	ldr	r2, [pc, #80]	; (8006964 <RCCEx_PLL2_Config+0x15c>)
 8006912:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006916:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006918:	e005      	b.n	8006926 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800691a:	4b12      	ldr	r3, [pc, #72]	; (8006964 <RCCEx_PLL2_Config+0x15c>)
 800691c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800691e:	4a11      	ldr	r2, [pc, #68]	; (8006964 <RCCEx_PLL2_Config+0x15c>)
 8006920:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006924:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006926:	4b0f      	ldr	r3, [pc, #60]	; (8006964 <RCCEx_PLL2_Config+0x15c>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a0e      	ldr	r2, [pc, #56]	; (8006964 <RCCEx_PLL2_Config+0x15c>)
 800692c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006930:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006932:	f7fb f8f5 	bl	8001b20 <HAL_GetTick>
 8006936:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006938:	e008      	b.n	800694c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800693a:	f7fb f8f1 	bl	8001b20 <HAL_GetTick>
 800693e:	4602      	mov	r2, r0
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	1ad3      	subs	r3, r2, r3
 8006944:	2b02      	cmp	r3, #2
 8006946:	d901      	bls.n	800694c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006948:	2303      	movs	r3, #3
 800694a:	e006      	b.n	800695a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800694c:	4b05      	ldr	r3, [pc, #20]	; (8006964 <RCCEx_PLL2_Config+0x15c>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006954:	2b00      	cmp	r3, #0
 8006956:	d0f0      	beq.n	800693a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006958:	7bfb      	ldrb	r3, [r7, #15]
}
 800695a:	4618      	mov	r0, r3
 800695c:	3710      	adds	r7, #16
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}
 8006962:	bf00      	nop
 8006964:	58024400 	.word	0x58024400
 8006968:	ffff0007 	.word	0xffff0007

0800696c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b084      	sub	sp, #16
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
 8006974:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006976:	2300      	movs	r3, #0
 8006978:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800697a:	4b53      	ldr	r3, [pc, #332]	; (8006ac8 <RCCEx_PLL3_Config+0x15c>)
 800697c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800697e:	f003 0303 	and.w	r3, r3, #3
 8006982:	2b03      	cmp	r3, #3
 8006984:	d101      	bne.n	800698a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006986:	2301      	movs	r3, #1
 8006988:	e099      	b.n	8006abe <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800698a:	4b4f      	ldr	r3, [pc, #316]	; (8006ac8 <RCCEx_PLL3_Config+0x15c>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4a4e      	ldr	r2, [pc, #312]	; (8006ac8 <RCCEx_PLL3_Config+0x15c>)
 8006990:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006994:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006996:	f7fb f8c3 	bl	8001b20 <HAL_GetTick>
 800699a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800699c:	e008      	b.n	80069b0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800699e:	f7fb f8bf 	bl	8001b20 <HAL_GetTick>
 80069a2:	4602      	mov	r2, r0
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	1ad3      	subs	r3, r2, r3
 80069a8:	2b02      	cmp	r3, #2
 80069aa:	d901      	bls.n	80069b0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80069ac:	2303      	movs	r3, #3
 80069ae:	e086      	b.n	8006abe <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80069b0:	4b45      	ldr	r3, [pc, #276]	; (8006ac8 <RCCEx_PLL3_Config+0x15c>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d1f0      	bne.n	800699e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80069bc:	4b42      	ldr	r3, [pc, #264]	; (8006ac8 <RCCEx_PLL3_Config+0x15c>)
 80069be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069c0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	051b      	lsls	r3, r3, #20
 80069ca:	493f      	ldr	r1, [pc, #252]	; (8006ac8 <RCCEx_PLL3_Config+0x15c>)
 80069cc:	4313      	orrs	r3, r2
 80069ce:	628b      	str	r3, [r1, #40]	; 0x28
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	685b      	ldr	r3, [r3, #4]
 80069d4:	3b01      	subs	r3, #1
 80069d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	689b      	ldr	r3, [r3, #8]
 80069de:	3b01      	subs	r3, #1
 80069e0:	025b      	lsls	r3, r3, #9
 80069e2:	b29b      	uxth	r3, r3
 80069e4:	431a      	orrs	r2, r3
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	68db      	ldr	r3, [r3, #12]
 80069ea:	3b01      	subs	r3, #1
 80069ec:	041b      	lsls	r3, r3, #16
 80069ee:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80069f2:	431a      	orrs	r2, r3
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	691b      	ldr	r3, [r3, #16]
 80069f8:	3b01      	subs	r3, #1
 80069fa:	061b      	lsls	r3, r3, #24
 80069fc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006a00:	4931      	ldr	r1, [pc, #196]	; (8006ac8 <RCCEx_PLL3_Config+0x15c>)
 8006a02:	4313      	orrs	r3, r2
 8006a04:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006a06:	4b30      	ldr	r3, [pc, #192]	; (8006ac8 <RCCEx_PLL3_Config+0x15c>)
 8006a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a0a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	695b      	ldr	r3, [r3, #20]
 8006a12:	492d      	ldr	r1, [pc, #180]	; (8006ac8 <RCCEx_PLL3_Config+0x15c>)
 8006a14:	4313      	orrs	r3, r2
 8006a16:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006a18:	4b2b      	ldr	r3, [pc, #172]	; (8006ac8 <RCCEx_PLL3_Config+0x15c>)
 8006a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a1c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	699b      	ldr	r3, [r3, #24]
 8006a24:	4928      	ldr	r1, [pc, #160]	; (8006ac8 <RCCEx_PLL3_Config+0x15c>)
 8006a26:	4313      	orrs	r3, r2
 8006a28:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006a2a:	4b27      	ldr	r3, [pc, #156]	; (8006ac8 <RCCEx_PLL3_Config+0x15c>)
 8006a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a2e:	4a26      	ldr	r2, [pc, #152]	; (8006ac8 <RCCEx_PLL3_Config+0x15c>)
 8006a30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a34:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006a36:	4b24      	ldr	r3, [pc, #144]	; (8006ac8 <RCCEx_PLL3_Config+0x15c>)
 8006a38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a3a:	4b24      	ldr	r3, [pc, #144]	; (8006acc <RCCEx_PLL3_Config+0x160>)
 8006a3c:	4013      	ands	r3, r2
 8006a3e:	687a      	ldr	r2, [r7, #4]
 8006a40:	69d2      	ldr	r2, [r2, #28]
 8006a42:	00d2      	lsls	r2, r2, #3
 8006a44:	4920      	ldr	r1, [pc, #128]	; (8006ac8 <RCCEx_PLL3_Config+0x15c>)
 8006a46:	4313      	orrs	r3, r2
 8006a48:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006a4a:	4b1f      	ldr	r3, [pc, #124]	; (8006ac8 <RCCEx_PLL3_Config+0x15c>)
 8006a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a4e:	4a1e      	ldr	r2, [pc, #120]	; (8006ac8 <RCCEx_PLL3_Config+0x15c>)
 8006a50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a54:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d106      	bne.n	8006a6a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006a5c:	4b1a      	ldr	r3, [pc, #104]	; (8006ac8 <RCCEx_PLL3_Config+0x15c>)
 8006a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a60:	4a19      	ldr	r2, [pc, #100]	; (8006ac8 <RCCEx_PLL3_Config+0x15c>)
 8006a62:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006a66:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006a68:	e00f      	b.n	8006a8a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	2b01      	cmp	r3, #1
 8006a6e:	d106      	bne.n	8006a7e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006a70:	4b15      	ldr	r3, [pc, #84]	; (8006ac8 <RCCEx_PLL3_Config+0x15c>)
 8006a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a74:	4a14      	ldr	r2, [pc, #80]	; (8006ac8 <RCCEx_PLL3_Config+0x15c>)
 8006a76:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006a7a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006a7c:	e005      	b.n	8006a8a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006a7e:	4b12      	ldr	r3, [pc, #72]	; (8006ac8 <RCCEx_PLL3_Config+0x15c>)
 8006a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a82:	4a11      	ldr	r2, [pc, #68]	; (8006ac8 <RCCEx_PLL3_Config+0x15c>)
 8006a84:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006a88:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006a8a:	4b0f      	ldr	r3, [pc, #60]	; (8006ac8 <RCCEx_PLL3_Config+0x15c>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a0e      	ldr	r2, [pc, #56]	; (8006ac8 <RCCEx_PLL3_Config+0x15c>)
 8006a90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a94:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a96:	f7fb f843 	bl	8001b20 <HAL_GetTick>
 8006a9a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006a9c:	e008      	b.n	8006ab0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006a9e:	f7fb f83f 	bl	8001b20 <HAL_GetTick>
 8006aa2:	4602      	mov	r2, r0
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	1ad3      	subs	r3, r2, r3
 8006aa8:	2b02      	cmp	r3, #2
 8006aaa:	d901      	bls.n	8006ab0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006aac:	2303      	movs	r3, #3
 8006aae:	e006      	b.n	8006abe <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006ab0:	4b05      	ldr	r3, [pc, #20]	; (8006ac8 <RCCEx_PLL3_Config+0x15c>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d0f0      	beq.n	8006a9e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006abc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006abe:	4618      	mov	r0, r3
 8006ac0:	3710      	adds	r7, #16
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}
 8006ac6:	bf00      	nop
 8006ac8:	58024400 	.word	0x58024400
 8006acc:	ffff0007 	.word	0xffff0007

08006ad0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b084      	sub	sp, #16
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006ad8:	2301      	movs	r3, #1
 8006ada:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d06a      	beq.n	8006bb8 <HAL_RTC_Init+0xe8>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006ae8:	b2db      	uxtb	r3, r3
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d106      	bne.n	8006afc <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2200      	movs	r2, #0
 8006af2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f7fa fd12 	bl	8001520 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2202      	movs	r2, #2
 8006b00:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	22ca      	movs	r2, #202	; 0xca
 8006b0a:	625a      	str	r2, [r3, #36]	; 0x24
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	2253      	movs	r2, #83	; 0x53
 8006b12:	625a      	str	r2, [r3, #36]	; 0x24

   /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	f000 f87d 	bl	8006c14 <RTC_EnterInitMode>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 8006b1e:	7bfb      	ldrb	r3, [r7, #15]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d13e      	bne.n	8006ba2 <HAL_RTC_Init+0xd2>
    {
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	6999      	ldr	r1, [r3, #24]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681a      	ldr	r2, [r3, #0]
 8006b2e:	4b25      	ldr	r3, [pc, #148]	; (8006bc4 <HAL_RTC_Init+0xf4>)
 8006b30:	400b      	ands	r3, r1
 8006b32:	6193      	str	r3, [r2, #24]
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	6999      	ldr	r1, [r3, #24]
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	685a      	ldr	r2, [r3, #4]
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	691b      	ldr	r3, [r3, #16]
 8006b42:	431a      	orrs	r2, r3
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	699b      	ldr	r3, [r3, #24]
 8006b48:	431a      	orrs	r2, r3
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	430a      	orrs	r2, r1
 8006b50:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	689b      	ldr	r3, [r3, #8]
 8006b56:	0419      	lsls	r1, r3, #16
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	68da      	ldr	r2, [r3, #12]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	430a      	orrs	r2, r1
 8006b62:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f000 f88b 	bl	8006c80 <RTC_ExitInitMode>
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	73fb      	strb	r3, [r7, #15]

      if(status == HAL_OK)
 8006b6e:	7bfb      	ldrb	r3, [r7, #15]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d116      	bne.n	8006ba2 <HAL_RTC_Init+0xd2>
      {
#if defined(RTC_CR_TAMPALRM_PU) && defined(RTC_CR_TAMPALRM_TYPE) && defined(RTC_CR_OUT2EN)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	699a      	ldr	r2, [r3, #24]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 8006b82:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	6999      	ldr	r1, [r3, #24]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6a1a      	ldr	r2, [r3, #32]
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	69db      	ldr	r3, [r3, #28]
 8006b92:	431a      	orrs	r2, r3
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	695b      	ldr	r3, [r3, #20]
 8006b98:	431a      	orrs	r2, r3
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	430a      	orrs	r2, r1
 8006ba0:	619a      	str	r2, [r3, #24]
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */
      }
    }
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	22ff      	movs	r2, #255	; 0xff
 8006ba8:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8006baa:	7bfb      	ldrb	r3, [r7, #15]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d103      	bne.n	8006bb8 <HAL_RTC_Init+0xe8>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  /* return status */
  return status;
 8006bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bba:	4618      	mov	r0, r3
 8006bbc:	3710      	adds	r7, #16
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}
 8006bc2:	bf00      	nop
 8006bc4:	fb8fffbf 	.word	0xfb8fffbf

08006bc8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b084      	sub	sp, #16
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	68da      	ldr	r2, [r3, #12]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006bde:	60da      	str	r2, [r3, #12]
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 8006be0:	f7fa ff9e 	bl	8001b20 <HAL_GetTick>
 8006be4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8006be6:	e009      	b.n	8006bfc <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006be8:	f7fa ff9a 	bl	8001b20 <HAL_GetTick>
 8006bec:	4602      	mov	r2, r0
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	1ad3      	subs	r3, r2, r3
 8006bf2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006bf6:	d901      	bls.n	8006bfc <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 8006bf8:	2303      	movs	r3, #3
 8006bfa:	e007      	b.n	8006c0c <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	68db      	ldr	r3, [r3, #12]
 8006c02:	f003 0320 	and.w	r3, r3, #32
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d0ee      	beq.n	8006be8 <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 8006c0a:	2300      	movs	r3, #0
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	3710      	adds	r7, #16
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bd80      	pop	{r7, pc}

08006c14 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b084      	sub	sp, #16
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	73fb      	strb	r3, [r7, #15]
  /* Check if the Initialization mode is set */
#if defined(RTC_ICSR_INITF)
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	68db      	ldr	r3, [r3, #12]
 8006c26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d123      	bne.n	8006c76 <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	68da      	ldr	r2, [r3, #12]
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006c3c:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006c3e:	f7fa ff6f 	bl	8001b20 <HAL_GetTick>
 8006c42:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006c44:	e00d      	b.n	8006c62 <RTC_EnterInitMode+0x4e>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006c46:	f7fa ff6b 	bl	8001b20 <HAL_GetTick>
 8006c4a:	4602      	mov	r2, r0
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	1ad3      	subs	r3, r2, r3
 8006c50:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006c54:	d905      	bls.n	8006c62 <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 8006c56:	2303      	movs	r3, #3
 8006c58:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2203      	movs	r2, #3
 8006c5e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	68db      	ldr	r3, [r3, #12]
 8006c68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d102      	bne.n	8006c76 <RTC_EnterInitMode+0x62>
 8006c70:	7bfb      	ldrb	r3, [r7, #15]
 8006c72:	2b03      	cmp	r3, #3
 8006c74:	d1e7      	bne.n	8006c46 <RTC_EnterInitMode+0x32>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return status;
 8006c76:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	3710      	adds	r7, #16
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd80      	pop	{r7, pc}

08006c80 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b084      	sub	sp, #16
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c88:	2300      	movs	r3, #0
 8006c8a:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
#if defined(RTC_ICSR_INITF)

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006c8c:	4b1a      	ldr	r3, [pc, #104]	; (8006cf8 <RTC_ExitInitMode+0x78>)
 8006c8e:	68db      	ldr	r3, [r3, #12]
 8006c90:	4a19      	ldr	r2, [pc, #100]	; (8006cf8 <RTC_ExitInitMode+0x78>)
 8006c92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c96:	60d3      	str	r3, [r2, #12]
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);

#endif /* RTC_ISR_INITF */
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8006c98:	4b17      	ldr	r3, [pc, #92]	; (8006cf8 <RTC_ExitInitMode+0x78>)
 8006c9a:	699b      	ldr	r3, [r3, #24]
 8006c9c:	f003 0320 	and.w	r3, r3, #32
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d10c      	bne.n	8006cbe <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	f7ff ff8f 	bl	8006bc8 <HAL_RTC_WaitForSynchro>
 8006caa:	4603      	mov	r3, r0
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d01e      	beq.n	8006cee <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2203      	movs	r2, #3
 8006cb4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8006cb8:	2303      	movs	r3, #3
 8006cba:	73fb      	strb	r3, [r7, #15]
 8006cbc:	e017      	b.n	8006cee <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006cbe:	4b0e      	ldr	r3, [pc, #56]	; (8006cf8 <RTC_ExitInitMode+0x78>)
 8006cc0:	699b      	ldr	r3, [r3, #24]
 8006cc2:	4a0d      	ldr	r2, [pc, #52]	; (8006cf8 <RTC_ExitInitMode+0x78>)
 8006cc4:	f023 0320 	bic.w	r3, r3, #32
 8006cc8:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f7ff ff7c 	bl	8006bc8 <HAL_RTC_WaitForSynchro>
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d005      	beq.n	8006ce2 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2203      	movs	r2, #3
 8006cda:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8006cde:	2303      	movs	r3, #3
 8006ce0:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006ce2:	4b05      	ldr	r3, [pc, #20]	; (8006cf8 <RTC_ExitInitMode+0x78>)
 8006ce4:	699b      	ldr	r3, [r3, #24]
 8006ce6:	4a04      	ldr	r2, [pc, #16]	; (8006cf8 <RTC_ExitInitMode+0x78>)
 8006ce8:	f043 0320 	orr.w	r3, r3, #32
 8006cec:	6193      	str	r3, [r2, #24]
  }

  return status;
 8006cee:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	3710      	adds	r7, #16
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}
 8006cf8:	58004000 	.word	0x58004000

08006cfc <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b082      	sub	sp, #8
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
 8006d04:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d101      	bne.n	8006d10 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	e02b      	b.n	8006d68 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006d16:	b2db      	uxtb	r3, r3
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d106      	bne.n	8006d2a <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f7fa fd9f 	bl	8001868 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2202      	movs	r2, #2
 8006d2e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681a      	ldr	r2, [r3, #0]
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	3304      	adds	r3, #4
 8006d3a:	4619      	mov	r1, r3
 8006d3c:	4610      	mov	r0, r2
 8006d3e:	f001 faa1 	bl	8008284 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6818      	ldr	r0, [r3, #0]
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	685b      	ldr	r3, [r3, #4]
 8006d4a:	461a      	mov	r2, r3
 8006d4c:	6839      	ldr	r1, [r7, #0]
 8006d4e:	f001 faf5 	bl	800833c <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8006d52:	4b07      	ldr	r3, [pc, #28]	; (8006d70 <HAL_SDRAM_Init+0x74>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a06      	ldr	r2, [pc, #24]	; (8006d70 <HAL_SDRAM_Init+0x74>)
 8006d58:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006d5c:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2201      	movs	r2, #1
 8006d62:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006d66:	2300      	movs	r3, #0
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	3708      	adds	r7, #8
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bd80      	pop	{r7, pc}
 8006d70:	52004000 	.word	0x52004000

08006d74 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b084      	sub	sp, #16
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d101      	bne.n	8006d86 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006d82:	2301      	movs	r3, #1
 8006d84:	e0f1      	b.n	8006f6a <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4a78      	ldr	r2, [pc, #480]	; (8006f74 <HAL_SPI_Init+0x200>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d00f      	beq.n	8006db6 <HAL_SPI_Init+0x42>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4a77      	ldr	r2, [pc, #476]	; (8006f78 <HAL_SPI_Init+0x204>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d00a      	beq.n	8006db6 <HAL_SPI_Init+0x42>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a75      	ldr	r2, [pc, #468]	; (8006f7c <HAL_SPI_Init+0x208>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d005      	beq.n	8006db6 <HAL_SPI_Init+0x42>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	68db      	ldr	r3, [r3, #12]
 8006dae:	2b0f      	cmp	r3, #15
 8006db0:	d901      	bls.n	8006db6 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8006db2:	2301      	movs	r3, #1
 8006db4:	e0d9      	b.n	8006f6a <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f000 f8e2 	bl	8006f80 <SPI_GetPacketSize>
 8006dbc:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4a6c      	ldr	r2, [pc, #432]	; (8006f74 <HAL_SPI_Init+0x200>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d00c      	beq.n	8006de2 <HAL_SPI_Init+0x6e>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a6a      	ldr	r2, [pc, #424]	; (8006f78 <HAL_SPI_Init+0x204>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d007      	beq.n	8006de2 <HAL_SPI_Init+0x6e>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a69      	ldr	r2, [pc, #420]	; (8006f7c <HAL_SPI_Init+0x208>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d002      	beq.n	8006de2 <HAL_SPI_Init+0x6e>
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	2b08      	cmp	r3, #8
 8006de0:	d811      	bhi.n	8006e06 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006de6:	4a63      	ldr	r2, [pc, #396]	; (8006f74 <HAL_SPI_Init+0x200>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d009      	beq.n	8006e00 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a61      	ldr	r2, [pc, #388]	; (8006f78 <HAL_SPI_Init+0x204>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d004      	beq.n	8006e00 <HAL_SPI_Init+0x8c>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a60      	ldr	r2, [pc, #384]	; (8006f7c <HAL_SPI_Init+0x208>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d104      	bne.n	8006e0a <HAL_SPI_Init+0x96>
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	2b10      	cmp	r3, #16
 8006e04:	d901      	bls.n	8006e0a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8006e06:	2301      	movs	r3, #1
 8006e08:	e0af      	b.n	8006f6a <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006e10:	b2db      	uxtb	r3, r3
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d106      	bne.n	8006e24 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f7fa fbae 	bl	8001580 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2202      	movs	r2, #2
 8006e28:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	681a      	ldr	r2, [r3, #0]
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f022 0201 	bic.w	r2, r2, #1
 8006e3a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	689b      	ldr	r3, [r3, #8]
 8006e42:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8006e46:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	699b      	ldr	r3, [r3, #24]
 8006e4c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006e50:	d119      	bne.n	8006e86 <HAL_SPI_Init+0x112>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	685b      	ldr	r3, [r3, #4]
 8006e56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006e5a:	d103      	bne.n	8006e64 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d008      	beq.n	8006e76 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d10c      	bne.n	8006e86 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006e70:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006e74:	d107      	bne.n	8006e86 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	681a      	ldr	r2, [r3, #0]
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006e84:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	69da      	ldr	r2, [r3, #28]
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e8e:	431a      	orrs	r2, r3
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	431a      	orrs	r2, r3
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e98:	ea42 0103 	orr.w	r1, r2, r3
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	68da      	ldr	r2, [r3, #12]
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	430a      	orrs	r2, r1
 8006ea6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eb0:	431a      	orrs	r2, r3
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eb6:	431a      	orrs	r2, r3
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	699b      	ldr	r3, [r3, #24]
 8006ebc:	431a      	orrs	r2, r3
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	691b      	ldr	r3, [r3, #16]
 8006ec2:	431a      	orrs	r2, r3
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	695b      	ldr	r3, [r3, #20]
 8006ec8:	431a      	orrs	r2, r3
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6a1b      	ldr	r3, [r3, #32]
 8006ece:	431a      	orrs	r2, r3
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	685b      	ldr	r3, [r3, #4]
 8006ed4:	431a      	orrs	r2, r3
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006eda:	431a      	orrs	r2, r3
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	689b      	ldr	r3, [r3, #8]
 8006ee0:	431a      	orrs	r2, r3
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ee6:	ea42 0103 	orr.w	r1, r2, r3
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	430a      	orrs	r2, r1
 8006ef4:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	685b      	ldr	r3, [r3, #4]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d113      	bne.n	8006f26 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	689b      	ldr	r3, [r3, #8]
 8006f04:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006f10:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	689b      	ldr	r3, [r3, #8]
 8006f18:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006f24:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f022 0201 	bic.w	r2, r2, #1
 8006f34:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	685b      	ldr	r3, [r3, #4]
 8006f3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d00a      	beq.n	8006f58 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	68db      	ldr	r3, [r3, #12]
 8006f48:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	430a      	orrs	r2, r1
 8006f56:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2201      	movs	r2, #1
 8006f64:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8006f68:	2300      	movs	r3, #0
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	3710      	adds	r7, #16
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}
 8006f72:	bf00      	nop
 8006f74:	40013000 	.word	0x40013000
 8006f78:	40003800 	.word	0x40003800
 8006f7c:	40003c00 	.word	0x40003c00

08006f80 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8006f80:	b480      	push	{r7}
 8006f82:	b085      	sub	sp, #20
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f8c:	095b      	lsrs	r3, r3, #5
 8006f8e:	3301      	adds	r3, #1
 8006f90:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	68db      	ldr	r3, [r3, #12]
 8006f96:	3301      	adds	r3, #1
 8006f98:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8006f9a:	68bb      	ldr	r3, [r7, #8]
 8006f9c:	3307      	adds	r3, #7
 8006f9e:	08db      	lsrs	r3, r3, #3
 8006fa0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	68fa      	ldr	r2, [r7, #12]
 8006fa6:	fb02 f303 	mul.w	r3, r2, r3
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	3714      	adds	r7, #20
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb4:	4770      	bx	lr

08006fb6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006fb6:	b580      	push	{r7, lr}
 8006fb8:	b082      	sub	sp, #8
 8006fba:	af00      	add	r7, sp, #0
 8006fbc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d101      	bne.n	8006fc8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	e042      	b.n	800704e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d106      	bne.n	8006fe0 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f7fa fb5c 	bl	8001698 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2224      	movs	r2, #36	; 0x24
 8006fe4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	681a      	ldr	r2, [r3, #0]
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f022 0201 	bic.w	r2, r2, #1
 8006ff6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f000 f82d 	bl	8007058 <UART_SetConfig>
 8006ffe:	4603      	mov	r3, r0
 8007000:	2b01      	cmp	r3, #1
 8007002:	d101      	bne.n	8007008 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007004:	2301      	movs	r3, #1
 8007006:	e022      	b.n	800704e <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800700c:	2b00      	cmp	r3, #0
 800700e:	d002      	beq.n	8007016 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f000 fe7f 	bl	8007d14 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	685a      	ldr	r2, [r3, #4]
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007024:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	689a      	ldr	r2, [r3, #8]
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007034:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	681a      	ldr	r2, [r3, #0]
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f042 0201 	orr.w	r2, r2, #1
 8007044:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f000 ff06 	bl	8007e58 <UART_CheckIdleState>
 800704c:	4603      	mov	r3, r0
}
 800704e:	4618      	mov	r0, r3
 8007050:	3708      	adds	r7, #8
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}
	...

08007058 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007058:	b5b0      	push	{r4, r5, r7, lr}
 800705a:	b08e      	sub	sp, #56	; 0x38
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007060:	2300      	movs	r3, #0
 8007062:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	689a      	ldr	r2, [r3, #8]
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	691b      	ldr	r3, [r3, #16]
 800706e:	431a      	orrs	r2, r3
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	695b      	ldr	r3, [r3, #20]
 8007074:	431a      	orrs	r2, r3
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	69db      	ldr	r3, [r3, #28]
 800707a:	4313      	orrs	r3, r2
 800707c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	681a      	ldr	r2, [r3, #0]
 8007084:	4bbf      	ldr	r3, [pc, #764]	; (8007384 <UART_SetConfig+0x32c>)
 8007086:	4013      	ands	r3, r2
 8007088:	687a      	ldr	r2, [r7, #4]
 800708a:	6812      	ldr	r2, [r2, #0]
 800708c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800708e:	430b      	orrs	r3, r1
 8007090:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	685b      	ldr	r3, [r3, #4]
 8007098:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	68da      	ldr	r2, [r3, #12]
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	430a      	orrs	r2, r1
 80070a6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	699b      	ldr	r3, [r3, #24]
 80070ac:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	4ab5      	ldr	r2, [pc, #724]	; (8007388 <UART_SetConfig+0x330>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d004      	beq.n	80070c2 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6a1b      	ldr	r3, [r3, #32]
 80070bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80070be:	4313      	orrs	r3, r2
 80070c0:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	689a      	ldr	r2, [r3, #8]
 80070c8:	4bb0      	ldr	r3, [pc, #704]	; (800738c <UART_SetConfig+0x334>)
 80070ca:	4013      	ands	r3, r2
 80070cc:	687a      	ldr	r2, [r7, #4]
 80070ce:	6812      	ldr	r2, [r2, #0]
 80070d0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80070d2:	430b      	orrs	r3, r1
 80070d4:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070dc:	f023 010f 	bic.w	r1, r3, #15
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	430a      	orrs	r2, r1
 80070ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4aa7      	ldr	r2, [pc, #668]	; (8007390 <UART_SetConfig+0x338>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d176      	bne.n	80071e4 <UART_SetConfig+0x18c>
 80070f6:	4ba7      	ldr	r3, [pc, #668]	; (8007394 <UART_SetConfig+0x33c>)
 80070f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80070fe:	2b28      	cmp	r3, #40	; 0x28
 8007100:	d86c      	bhi.n	80071dc <UART_SetConfig+0x184>
 8007102:	a201      	add	r2, pc, #4	; (adr r2, 8007108 <UART_SetConfig+0xb0>)
 8007104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007108:	080071ad 	.word	0x080071ad
 800710c:	080071dd 	.word	0x080071dd
 8007110:	080071dd 	.word	0x080071dd
 8007114:	080071dd 	.word	0x080071dd
 8007118:	080071dd 	.word	0x080071dd
 800711c:	080071dd 	.word	0x080071dd
 8007120:	080071dd 	.word	0x080071dd
 8007124:	080071dd 	.word	0x080071dd
 8007128:	080071b5 	.word	0x080071b5
 800712c:	080071dd 	.word	0x080071dd
 8007130:	080071dd 	.word	0x080071dd
 8007134:	080071dd 	.word	0x080071dd
 8007138:	080071dd 	.word	0x080071dd
 800713c:	080071dd 	.word	0x080071dd
 8007140:	080071dd 	.word	0x080071dd
 8007144:	080071dd 	.word	0x080071dd
 8007148:	080071bd 	.word	0x080071bd
 800714c:	080071dd 	.word	0x080071dd
 8007150:	080071dd 	.word	0x080071dd
 8007154:	080071dd 	.word	0x080071dd
 8007158:	080071dd 	.word	0x080071dd
 800715c:	080071dd 	.word	0x080071dd
 8007160:	080071dd 	.word	0x080071dd
 8007164:	080071dd 	.word	0x080071dd
 8007168:	080071c5 	.word	0x080071c5
 800716c:	080071dd 	.word	0x080071dd
 8007170:	080071dd 	.word	0x080071dd
 8007174:	080071dd 	.word	0x080071dd
 8007178:	080071dd 	.word	0x080071dd
 800717c:	080071dd 	.word	0x080071dd
 8007180:	080071dd 	.word	0x080071dd
 8007184:	080071dd 	.word	0x080071dd
 8007188:	080071cd 	.word	0x080071cd
 800718c:	080071dd 	.word	0x080071dd
 8007190:	080071dd 	.word	0x080071dd
 8007194:	080071dd 	.word	0x080071dd
 8007198:	080071dd 	.word	0x080071dd
 800719c:	080071dd 	.word	0x080071dd
 80071a0:	080071dd 	.word	0x080071dd
 80071a4:	080071dd 	.word	0x080071dd
 80071a8:	080071d5 	.word	0x080071d5
 80071ac:	2301      	movs	r3, #1
 80071ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80071b2:	e326      	b.n	8007802 <UART_SetConfig+0x7aa>
 80071b4:	2304      	movs	r3, #4
 80071b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80071ba:	e322      	b.n	8007802 <UART_SetConfig+0x7aa>
 80071bc:	2308      	movs	r3, #8
 80071be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80071c2:	e31e      	b.n	8007802 <UART_SetConfig+0x7aa>
 80071c4:	2310      	movs	r3, #16
 80071c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80071ca:	e31a      	b.n	8007802 <UART_SetConfig+0x7aa>
 80071cc:	2320      	movs	r3, #32
 80071ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80071d2:	e316      	b.n	8007802 <UART_SetConfig+0x7aa>
 80071d4:	2340      	movs	r3, #64	; 0x40
 80071d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80071da:	e312      	b.n	8007802 <UART_SetConfig+0x7aa>
 80071dc:	2380      	movs	r3, #128	; 0x80
 80071de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80071e2:	e30e      	b.n	8007802 <UART_SetConfig+0x7aa>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4a6b      	ldr	r2, [pc, #428]	; (8007398 <UART_SetConfig+0x340>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d130      	bne.n	8007250 <UART_SetConfig+0x1f8>
 80071ee:	4b69      	ldr	r3, [pc, #420]	; (8007394 <UART_SetConfig+0x33c>)
 80071f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071f2:	f003 0307 	and.w	r3, r3, #7
 80071f6:	2b05      	cmp	r3, #5
 80071f8:	d826      	bhi.n	8007248 <UART_SetConfig+0x1f0>
 80071fa:	a201      	add	r2, pc, #4	; (adr r2, 8007200 <UART_SetConfig+0x1a8>)
 80071fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007200:	08007219 	.word	0x08007219
 8007204:	08007221 	.word	0x08007221
 8007208:	08007229 	.word	0x08007229
 800720c:	08007231 	.word	0x08007231
 8007210:	08007239 	.word	0x08007239
 8007214:	08007241 	.word	0x08007241
 8007218:	2300      	movs	r3, #0
 800721a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800721e:	e2f0      	b.n	8007802 <UART_SetConfig+0x7aa>
 8007220:	2304      	movs	r3, #4
 8007222:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007226:	e2ec      	b.n	8007802 <UART_SetConfig+0x7aa>
 8007228:	2308      	movs	r3, #8
 800722a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800722e:	e2e8      	b.n	8007802 <UART_SetConfig+0x7aa>
 8007230:	2310      	movs	r3, #16
 8007232:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007236:	e2e4      	b.n	8007802 <UART_SetConfig+0x7aa>
 8007238:	2320      	movs	r3, #32
 800723a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800723e:	e2e0      	b.n	8007802 <UART_SetConfig+0x7aa>
 8007240:	2340      	movs	r3, #64	; 0x40
 8007242:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007246:	e2dc      	b.n	8007802 <UART_SetConfig+0x7aa>
 8007248:	2380      	movs	r3, #128	; 0x80
 800724a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800724e:	e2d8      	b.n	8007802 <UART_SetConfig+0x7aa>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a51      	ldr	r2, [pc, #324]	; (800739c <UART_SetConfig+0x344>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d130      	bne.n	80072bc <UART_SetConfig+0x264>
 800725a:	4b4e      	ldr	r3, [pc, #312]	; (8007394 <UART_SetConfig+0x33c>)
 800725c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800725e:	f003 0307 	and.w	r3, r3, #7
 8007262:	2b05      	cmp	r3, #5
 8007264:	d826      	bhi.n	80072b4 <UART_SetConfig+0x25c>
 8007266:	a201      	add	r2, pc, #4	; (adr r2, 800726c <UART_SetConfig+0x214>)
 8007268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800726c:	08007285 	.word	0x08007285
 8007270:	0800728d 	.word	0x0800728d
 8007274:	08007295 	.word	0x08007295
 8007278:	0800729d 	.word	0x0800729d
 800727c:	080072a5 	.word	0x080072a5
 8007280:	080072ad 	.word	0x080072ad
 8007284:	2300      	movs	r3, #0
 8007286:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800728a:	e2ba      	b.n	8007802 <UART_SetConfig+0x7aa>
 800728c:	2304      	movs	r3, #4
 800728e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007292:	e2b6      	b.n	8007802 <UART_SetConfig+0x7aa>
 8007294:	2308      	movs	r3, #8
 8007296:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800729a:	e2b2      	b.n	8007802 <UART_SetConfig+0x7aa>
 800729c:	2310      	movs	r3, #16
 800729e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80072a2:	e2ae      	b.n	8007802 <UART_SetConfig+0x7aa>
 80072a4:	2320      	movs	r3, #32
 80072a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80072aa:	e2aa      	b.n	8007802 <UART_SetConfig+0x7aa>
 80072ac:	2340      	movs	r3, #64	; 0x40
 80072ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80072b2:	e2a6      	b.n	8007802 <UART_SetConfig+0x7aa>
 80072b4:	2380      	movs	r3, #128	; 0x80
 80072b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80072ba:	e2a2      	b.n	8007802 <UART_SetConfig+0x7aa>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4a37      	ldr	r2, [pc, #220]	; (80073a0 <UART_SetConfig+0x348>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d130      	bne.n	8007328 <UART_SetConfig+0x2d0>
 80072c6:	4b33      	ldr	r3, [pc, #204]	; (8007394 <UART_SetConfig+0x33c>)
 80072c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072ca:	f003 0307 	and.w	r3, r3, #7
 80072ce:	2b05      	cmp	r3, #5
 80072d0:	d826      	bhi.n	8007320 <UART_SetConfig+0x2c8>
 80072d2:	a201      	add	r2, pc, #4	; (adr r2, 80072d8 <UART_SetConfig+0x280>)
 80072d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072d8:	080072f1 	.word	0x080072f1
 80072dc:	080072f9 	.word	0x080072f9
 80072e0:	08007301 	.word	0x08007301
 80072e4:	08007309 	.word	0x08007309
 80072e8:	08007311 	.word	0x08007311
 80072ec:	08007319 	.word	0x08007319
 80072f0:	2300      	movs	r3, #0
 80072f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80072f6:	e284      	b.n	8007802 <UART_SetConfig+0x7aa>
 80072f8:	2304      	movs	r3, #4
 80072fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80072fe:	e280      	b.n	8007802 <UART_SetConfig+0x7aa>
 8007300:	2308      	movs	r3, #8
 8007302:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007306:	e27c      	b.n	8007802 <UART_SetConfig+0x7aa>
 8007308:	2310      	movs	r3, #16
 800730a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800730e:	e278      	b.n	8007802 <UART_SetConfig+0x7aa>
 8007310:	2320      	movs	r3, #32
 8007312:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007316:	e274      	b.n	8007802 <UART_SetConfig+0x7aa>
 8007318:	2340      	movs	r3, #64	; 0x40
 800731a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800731e:	e270      	b.n	8007802 <UART_SetConfig+0x7aa>
 8007320:	2380      	movs	r3, #128	; 0x80
 8007322:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007326:	e26c      	b.n	8007802 <UART_SetConfig+0x7aa>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a1d      	ldr	r2, [pc, #116]	; (80073a4 <UART_SetConfig+0x34c>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d142      	bne.n	80073b8 <UART_SetConfig+0x360>
 8007332:	4b18      	ldr	r3, [pc, #96]	; (8007394 <UART_SetConfig+0x33c>)
 8007334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007336:	f003 0307 	and.w	r3, r3, #7
 800733a:	2b05      	cmp	r3, #5
 800733c:	d838      	bhi.n	80073b0 <UART_SetConfig+0x358>
 800733e:	a201      	add	r2, pc, #4	; (adr r2, 8007344 <UART_SetConfig+0x2ec>)
 8007340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007344:	0800735d 	.word	0x0800735d
 8007348:	08007365 	.word	0x08007365
 800734c:	0800736d 	.word	0x0800736d
 8007350:	08007375 	.word	0x08007375
 8007354:	0800737d 	.word	0x0800737d
 8007358:	080073a9 	.word	0x080073a9
 800735c:	2300      	movs	r3, #0
 800735e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007362:	e24e      	b.n	8007802 <UART_SetConfig+0x7aa>
 8007364:	2304      	movs	r3, #4
 8007366:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800736a:	e24a      	b.n	8007802 <UART_SetConfig+0x7aa>
 800736c:	2308      	movs	r3, #8
 800736e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007372:	e246      	b.n	8007802 <UART_SetConfig+0x7aa>
 8007374:	2310      	movs	r3, #16
 8007376:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800737a:	e242      	b.n	8007802 <UART_SetConfig+0x7aa>
 800737c:	2320      	movs	r3, #32
 800737e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007382:	e23e      	b.n	8007802 <UART_SetConfig+0x7aa>
 8007384:	cfff69f3 	.word	0xcfff69f3
 8007388:	58000c00 	.word	0x58000c00
 800738c:	11fff4ff 	.word	0x11fff4ff
 8007390:	40011000 	.word	0x40011000
 8007394:	58024400 	.word	0x58024400
 8007398:	40004400 	.word	0x40004400
 800739c:	40004800 	.word	0x40004800
 80073a0:	40004c00 	.word	0x40004c00
 80073a4:	40005000 	.word	0x40005000
 80073a8:	2340      	movs	r3, #64	; 0x40
 80073aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80073ae:	e228      	b.n	8007802 <UART_SetConfig+0x7aa>
 80073b0:	2380      	movs	r3, #128	; 0x80
 80073b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80073b6:	e224      	b.n	8007802 <UART_SetConfig+0x7aa>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4ab1      	ldr	r2, [pc, #708]	; (8007684 <UART_SetConfig+0x62c>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d176      	bne.n	80074b0 <UART_SetConfig+0x458>
 80073c2:	4bb1      	ldr	r3, [pc, #708]	; (8007688 <UART_SetConfig+0x630>)
 80073c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80073ca:	2b28      	cmp	r3, #40	; 0x28
 80073cc:	d86c      	bhi.n	80074a8 <UART_SetConfig+0x450>
 80073ce:	a201      	add	r2, pc, #4	; (adr r2, 80073d4 <UART_SetConfig+0x37c>)
 80073d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073d4:	08007479 	.word	0x08007479
 80073d8:	080074a9 	.word	0x080074a9
 80073dc:	080074a9 	.word	0x080074a9
 80073e0:	080074a9 	.word	0x080074a9
 80073e4:	080074a9 	.word	0x080074a9
 80073e8:	080074a9 	.word	0x080074a9
 80073ec:	080074a9 	.word	0x080074a9
 80073f0:	080074a9 	.word	0x080074a9
 80073f4:	08007481 	.word	0x08007481
 80073f8:	080074a9 	.word	0x080074a9
 80073fc:	080074a9 	.word	0x080074a9
 8007400:	080074a9 	.word	0x080074a9
 8007404:	080074a9 	.word	0x080074a9
 8007408:	080074a9 	.word	0x080074a9
 800740c:	080074a9 	.word	0x080074a9
 8007410:	080074a9 	.word	0x080074a9
 8007414:	08007489 	.word	0x08007489
 8007418:	080074a9 	.word	0x080074a9
 800741c:	080074a9 	.word	0x080074a9
 8007420:	080074a9 	.word	0x080074a9
 8007424:	080074a9 	.word	0x080074a9
 8007428:	080074a9 	.word	0x080074a9
 800742c:	080074a9 	.word	0x080074a9
 8007430:	080074a9 	.word	0x080074a9
 8007434:	08007491 	.word	0x08007491
 8007438:	080074a9 	.word	0x080074a9
 800743c:	080074a9 	.word	0x080074a9
 8007440:	080074a9 	.word	0x080074a9
 8007444:	080074a9 	.word	0x080074a9
 8007448:	080074a9 	.word	0x080074a9
 800744c:	080074a9 	.word	0x080074a9
 8007450:	080074a9 	.word	0x080074a9
 8007454:	08007499 	.word	0x08007499
 8007458:	080074a9 	.word	0x080074a9
 800745c:	080074a9 	.word	0x080074a9
 8007460:	080074a9 	.word	0x080074a9
 8007464:	080074a9 	.word	0x080074a9
 8007468:	080074a9 	.word	0x080074a9
 800746c:	080074a9 	.word	0x080074a9
 8007470:	080074a9 	.word	0x080074a9
 8007474:	080074a1 	.word	0x080074a1
 8007478:	2301      	movs	r3, #1
 800747a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800747e:	e1c0      	b.n	8007802 <UART_SetConfig+0x7aa>
 8007480:	2304      	movs	r3, #4
 8007482:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007486:	e1bc      	b.n	8007802 <UART_SetConfig+0x7aa>
 8007488:	2308      	movs	r3, #8
 800748a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800748e:	e1b8      	b.n	8007802 <UART_SetConfig+0x7aa>
 8007490:	2310      	movs	r3, #16
 8007492:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007496:	e1b4      	b.n	8007802 <UART_SetConfig+0x7aa>
 8007498:	2320      	movs	r3, #32
 800749a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800749e:	e1b0      	b.n	8007802 <UART_SetConfig+0x7aa>
 80074a0:	2340      	movs	r3, #64	; 0x40
 80074a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074a6:	e1ac      	b.n	8007802 <UART_SetConfig+0x7aa>
 80074a8:	2380      	movs	r3, #128	; 0x80
 80074aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074ae:	e1a8      	b.n	8007802 <UART_SetConfig+0x7aa>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4a75      	ldr	r2, [pc, #468]	; (800768c <UART_SetConfig+0x634>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d130      	bne.n	800751c <UART_SetConfig+0x4c4>
 80074ba:	4b73      	ldr	r3, [pc, #460]	; (8007688 <UART_SetConfig+0x630>)
 80074bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074be:	f003 0307 	and.w	r3, r3, #7
 80074c2:	2b05      	cmp	r3, #5
 80074c4:	d826      	bhi.n	8007514 <UART_SetConfig+0x4bc>
 80074c6:	a201      	add	r2, pc, #4	; (adr r2, 80074cc <UART_SetConfig+0x474>)
 80074c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074cc:	080074e5 	.word	0x080074e5
 80074d0:	080074ed 	.word	0x080074ed
 80074d4:	080074f5 	.word	0x080074f5
 80074d8:	080074fd 	.word	0x080074fd
 80074dc:	08007505 	.word	0x08007505
 80074e0:	0800750d 	.word	0x0800750d
 80074e4:	2300      	movs	r3, #0
 80074e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074ea:	e18a      	b.n	8007802 <UART_SetConfig+0x7aa>
 80074ec:	2304      	movs	r3, #4
 80074ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074f2:	e186      	b.n	8007802 <UART_SetConfig+0x7aa>
 80074f4:	2308      	movs	r3, #8
 80074f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074fa:	e182      	b.n	8007802 <UART_SetConfig+0x7aa>
 80074fc:	2310      	movs	r3, #16
 80074fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007502:	e17e      	b.n	8007802 <UART_SetConfig+0x7aa>
 8007504:	2320      	movs	r3, #32
 8007506:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800750a:	e17a      	b.n	8007802 <UART_SetConfig+0x7aa>
 800750c:	2340      	movs	r3, #64	; 0x40
 800750e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007512:	e176      	b.n	8007802 <UART_SetConfig+0x7aa>
 8007514:	2380      	movs	r3, #128	; 0x80
 8007516:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800751a:	e172      	b.n	8007802 <UART_SetConfig+0x7aa>
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	4a5b      	ldr	r2, [pc, #364]	; (8007690 <UART_SetConfig+0x638>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d130      	bne.n	8007588 <UART_SetConfig+0x530>
 8007526:	4b58      	ldr	r3, [pc, #352]	; (8007688 <UART_SetConfig+0x630>)
 8007528:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800752a:	f003 0307 	and.w	r3, r3, #7
 800752e:	2b05      	cmp	r3, #5
 8007530:	d826      	bhi.n	8007580 <UART_SetConfig+0x528>
 8007532:	a201      	add	r2, pc, #4	; (adr r2, 8007538 <UART_SetConfig+0x4e0>)
 8007534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007538:	08007551 	.word	0x08007551
 800753c:	08007559 	.word	0x08007559
 8007540:	08007561 	.word	0x08007561
 8007544:	08007569 	.word	0x08007569
 8007548:	08007571 	.word	0x08007571
 800754c:	08007579 	.word	0x08007579
 8007550:	2300      	movs	r3, #0
 8007552:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007556:	e154      	b.n	8007802 <UART_SetConfig+0x7aa>
 8007558:	2304      	movs	r3, #4
 800755a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800755e:	e150      	b.n	8007802 <UART_SetConfig+0x7aa>
 8007560:	2308      	movs	r3, #8
 8007562:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007566:	e14c      	b.n	8007802 <UART_SetConfig+0x7aa>
 8007568:	2310      	movs	r3, #16
 800756a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800756e:	e148      	b.n	8007802 <UART_SetConfig+0x7aa>
 8007570:	2320      	movs	r3, #32
 8007572:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007576:	e144      	b.n	8007802 <UART_SetConfig+0x7aa>
 8007578:	2340      	movs	r3, #64	; 0x40
 800757a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800757e:	e140      	b.n	8007802 <UART_SetConfig+0x7aa>
 8007580:	2380      	movs	r3, #128	; 0x80
 8007582:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007586:	e13c      	b.n	8007802 <UART_SetConfig+0x7aa>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	4a41      	ldr	r2, [pc, #260]	; (8007694 <UART_SetConfig+0x63c>)
 800758e:	4293      	cmp	r3, r2
 8007590:	f040 8082 	bne.w	8007698 <UART_SetConfig+0x640>
 8007594:	4b3c      	ldr	r3, [pc, #240]	; (8007688 <UART_SetConfig+0x630>)
 8007596:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007598:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800759c:	2b28      	cmp	r3, #40	; 0x28
 800759e:	d86d      	bhi.n	800767c <UART_SetConfig+0x624>
 80075a0:	a201      	add	r2, pc, #4	; (adr r2, 80075a8 <UART_SetConfig+0x550>)
 80075a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075a6:	bf00      	nop
 80075a8:	0800764d 	.word	0x0800764d
 80075ac:	0800767d 	.word	0x0800767d
 80075b0:	0800767d 	.word	0x0800767d
 80075b4:	0800767d 	.word	0x0800767d
 80075b8:	0800767d 	.word	0x0800767d
 80075bc:	0800767d 	.word	0x0800767d
 80075c0:	0800767d 	.word	0x0800767d
 80075c4:	0800767d 	.word	0x0800767d
 80075c8:	08007655 	.word	0x08007655
 80075cc:	0800767d 	.word	0x0800767d
 80075d0:	0800767d 	.word	0x0800767d
 80075d4:	0800767d 	.word	0x0800767d
 80075d8:	0800767d 	.word	0x0800767d
 80075dc:	0800767d 	.word	0x0800767d
 80075e0:	0800767d 	.word	0x0800767d
 80075e4:	0800767d 	.word	0x0800767d
 80075e8:	0800765d 	.word	0x0800765d
 80075ec:	0800767d 	.word	0x0800767d
 80075f0:	0800767d 	.word	0x0800767d
 80075f4:	0800767d 	.word	0x0800767d
 80075f8:	0800767d 	.word	0x0800767d
 80075fc:	0800767d 	.word	0x0800767d
 8007600:	0800767d 	.word	0x0800767d
 8007604:	0800767d 	.word	0x0800767d
 8007608:	08007665 	.word	0x08007665
 800760c:	0800767d 	.word	0x0800767d
 8007610:	0800767d 	.word	0x0800767d
 8007614:	0800767d 	.word	0x0800767d
 8007618:	0800767d 	.word	0x0800767d
 800761c:	0800767d 	.word	0x0800767d
 8007620:	0800767d 	.word	0x0800767d
 8007624:	0800767d 	.word	0x0800767d
 8007628:	0800766d 	.word	0x0800766d
 800762c:	0800767d 	.word	0x0800767d
 8007630:	0800767d 	.word	0x0800767d
 8007634:	0800767d 	.word	0x0800767d
 8007638:	0800767d 	.word	0x0800767d
 800763c:	0800767d 	.word	0x0800767d
 8007640:	0800767d 	.word	0x0800767d
 8007644:	0800767d 	.word	0x0800767d
 8007648:	08007675 	.word	0x08007675
 800764c:	2301      	movs	r3, #1
 800764e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007652:	e0d6      	b.n	8007802 <UART_SetConfig+0x7aa>
 8007654:	2304      	movs	r3, #4
 8007656:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800765a:	e0d2      	b.n	8007802 <UART_SetConfig+0x7aa>
 800765c:	2308      	movs	r3, #8
 800765e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007662:	e0ce      	b.n	8007802 <UART_SetConfig+0x7aa>
 8007664:	2310      	movs	r3, #16
 8007666:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800766a:	e0ca      	b.n	8007802 <UART_SetConfig+0x7aa>
 800766c:	2320      	movs	r3, #32
 800766e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007672:	e0c6      	b.n	8007802 <UART_SetConfig+0x7aa>
 8007674:	2340      	movs	r3, #64	; 0x40
 8007676:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800767a:	e0c2      	b.n	8007802 <UART_SetConfig+0x7aa>
 800767c:	2380      	movs	r3, #128	; 0x80
 800767e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007682:	e0be      	b.n	8007802 <UART_SetConfig+0x7aa>
 8007684:	40011400 	.word	0x40011400
 8007688:	58024400 	.word	0x58024400
 800768c:	40007800 	.word	0x40007800
 8007690:	40007c00 	.word	0x40007c00
 8007694:	40011800 	.word	0x40011800
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4aad      	ldr	r2, [pc, #692]	; (8007954 <UART_SetConfig+0x8fc>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d176      	bne.n	8007790 <UART_SetConfig+0x738>
 80076a2:	4bad      	ldr	r3, [pc, #692]	; (8007958 <UART_SetConfig+0x900>)
 80076a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80076aa:	2b28      	cmp	r3, #40	; 0x28
 80076ac:	d86c      	bhi.n	8007788 <UART_SetConfig+0x730>
 80076ae:	a201      	add	r2, pc, #4	; (adr r2, 80076b4 <UART_SetConfig+0x65c>)
 80076b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076b4:	08007759 	.word	0x08007759
 80076b8:	08007789 	.word	0x08007789
 80076bc:	08007789 	.word	0x08007789
 80076c0:	08007789 	.word	0x08007789
 80076c4:	08007789 	.word	0x08007789
 80076c8:	08007789 	.word	0x08007789
 80076cc:	08007789 	.word	0x08007789
 80076d0:	08007789 	.word	0x08007789
 80076d4:	08007761 	.word	0x08007761
 80076d8:	08007789 	.word	0x08007789
 80076dc:	08007789 	.word	0x08007789
 80076e0:	08007789 	.word	0x08007789
 80076e4:	08007789 	.word	0x08007789
 80076e8:	08007789 	.word	0x08007789
 80076ec:	08007789 	.word	0x08007789
 80076f0:	08007789 	.word	0x08007789
 80076f4:	08007769 	.word	0x08007769
 80076f8:	08007789 	.word	0x08007789
 80076fc:	08007789 	.word	0x08007789
 8007700:	08007789 	.word	0x08007789
 8007704:	08007789 	.word	0x08007789
 8007708:	08007789 	.word	0x08007789
 800770c:	08007789 	.word	0x08007789
 8007710:	08007789 	.word	0x08007789
 8007714:	08007771 	.word	0x08007771
 8007718:	08007789 	.word	0x08007789
 800771c:	08007789 	.word	0x08007789
 8007720:	08007789 	.word	0x08007789
 8007724:	08007789 	.word	0x08007789
 8007728:	08007789 	.word	0x08007789
 800772c:	08007789 	.word	0x08007789
 8007730:	08007789 	.word	0x08007789
 8007734:	08007779 	.word	0x08007779
 8007738:	08007789 	.word	0x08007789
 800773c:	08007789 	.word	0x08007789
 8007740:	08007789 	.word	0x08007789
 8007744:	08007789 	.word	0x08007789
 8007748:	08007789 	.word	0x08007789
 800774c:	08007789 	.word	0x08007789
 8007750:	08007789 	.word	0x08007789
 8007754:	08007781 	.word	0x08007781
 8007758:	2301      	movs	r3, #1
 800775a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800775e:	e050      	b.n	8007802 <UART_SetConfig+0x7aa>
 8007760:	2304      	movs	r3, #4
 8007762:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007766:	e04c      	b.n	8007802 <UART_SetConfig+0x7aa>
 8007768:	2308      	movs	r3, #8
 800776a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800776e:	e048      	b.n	8007802 <UART_SetConfig+0x7aa>
 8007770:	2310      	movs	r3, #16
 8007772:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007776:	e044      	b.n	8007802 <UART_SetConfig+0x7aa>
 8007778:	2320      	movs	r3, #32
 800777a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800777e:	e040      	b.n	8007802 <UART_SetConfig+0x7aa>
 8007780:	2340      	movs	r3, #64	; 0x40
 8007782:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007786:	e03c      	b.n	8007802 <UART_SetConfig+0x7aa>
 8007788:	2380      	movs	r3, #128	; 0x80
 800778a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800778e:	e038      	b.n	8007802 <UART_SetConfig+0x7aa>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4a71      	ldr	r2, [pc, #452]	; (800795c <UART_SetConfig+0x904>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d130      	bne.n	80077fc <UART_SetConfig+0x7a4>
 800779a:	4b6f      	ldr	r3, [pc, #444]	; (8007958 <UART_SetConfig+0x900>)
 800779c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800779e:	f003 0307 	and.w	r3, r3, #7
 80077a2:	2b05      	cmp	r3, #5
 80077a4:	d826      	bhi.n	80077f4 <UART_SetConfig+0x79c>
 80077a6:	a201      	add	r2, pc, #4	; (adr r2, 80077ac <UART_SetConfig+0x754>)
 80077a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077ac:	080077c5 	.word	0x080077c5
 80077b0:	080077cd 	.word	0x080077cd
 80077b4:	080077d5 	.word	0x080077d5
 80077b8:	080077dd 	.word	0x080077dd
 80077bc:	080077e5 	.word	0x080077e5
 80077c0:	080077ed 	.word	0x080077ed
 80077c4:	2302      	movs	r3, #2
 80077c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077ca:	e01a      	b.n	8007802 <UART_SetConfig+0x7aa>
 80077cc:	2304      	movs	r3, #4
 80077ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077d2:	e016      	b.n	8007802 <UART_SetConfig+0x7aa>
 80077d4:	2308      	movs	r3, #8
 80077d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077da:	e012      	b.n	8007802 <UART_SetConfig+0x7aa>
 80077dc:	2310      	movs	r3, #16
 80077de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077e2:	e00e      	b.n	8007802 <UART_SetConfig+0x7aa>
 80077e4:	2320      	movs	r3, #32
 80077e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077ea:	e00a      	b.n	8007802 <UART_SetConfig+0x7aa>
 80077ec:	2340      	movs	r3, #64	; 0x40
 80077ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077f2:	e006      	b.n	8007802 <UART_SetConfig+0x7aa>
 80077f4:	2380      	movs	r3, #128	; 0x80
 80077f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077fa:	e002      	b.n	8007802 <UART_SetConfig+0x7aa>
 80077fc:	2380      	movs	r3, #128	; 0x80
 80077fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	4a55      	ldr	r2, [pc, #340]	; (800795c <UART_SetConfig+0x904>)
 8007808:	4293      	cmp	r3, r2
 800780a:	f040 80f0 	bne.w	80079ee <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800780e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007812:	2b20      	cmp	r3, #32
 8007814:	dc46      	bgt.n	80078a4 <UART_SetConfig+0x84c>
 8007816:	2b02      	cmp	r3, #2
 8007818:	db75      	blt.n	8007906 <UART_SetConfig+0x8ae>
 800781a:	3b02      	subs	r3, #2
 800781c:	2b1e      	cmp	r3, #30
 800781e:	d872      	bhi.n	8007906 <UART_SetConfig+0x8ae>
 8007820:	a201      	add	r2, pc, #4	; (adr r2, 8007828 <UART_SetConfig+0x7d0>)
 8007822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007826:	bf00      	nop
 8007828:	080078ab 	.word	0x080078ab
 800782c:	08007907 	.word	0x08007907
 8007830:	080078b3 	.word	0x080078b3
 8007834:	08007907 	.word	0x08007907
 8007838:	08007907 	.word	0x08007907
 800783c:	08007907 	.word	0x08007907
 8007840:	080078c3 	.word	0x080078c3
 8007844:	08007907 	.word	0x08007907
 8007848:	08007907 	.word	0x08007907
 800784c:	08007907 	.word	0x08007907
 8007850:	08007907 	.word	0x08007907
 8007854:	08007907 	.word	0x08007907
 8007858:	08007907 	.word	0x08007907
 800785c:	08007907 	.word	0x08007907
 8007860:	080078d3 	.word	0x080078d3
 8007864:	08007907 	.word	0x08007907
 8007868:	08007907 	.word	0x08007907
 800786c:	08007907 	.word	0x08007907
 8007870:	08007907 	.word	0x08007907
 8007874:	08007907 	.word	0x08007907
 8007878:	08007907 	.word	0x08007907
 800787c:	08007907 	.word	0x08007907
 8007880:	08007907 	.word	0x08007907
 8007884:	08007907 	.word	0x08007907
 8007888:	08007907 	.word	0x08007907
 800788c:	08007907 	.word	0x08007907
 8007890:	08007907 	.word	0x08007907
 8007894:	08007907 	.word	0x08007907
 8007898:	08007907 	.word	0x08007907
 800789c:	08007907 	.word	0x08007907
 80078a0:	080078f9 	.word	0x080078f9
 80078a4:	2b40      	cmp	r3, #64	; 0x40
 80078a6:	d02a      	beq.n	80078fe <UART_SetConfig+0x8a6>
 80078a8:	e02d      	b.n	8007906 <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80078aa:	f7fe fb9d 	bl	8005fe8 <HAL_RCCEx_GetD3PCLK1Freq>
 80078ae:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80078b0:	e02f      	b.n	8007912 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80078b2:	f107 0314 	add.w	r3, r7, #20
 80078b6:	4618      	mov	r0, r3
 80078b8:	f7fe fbac 	bl	8006014 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80078bc:	69bb      	ldr	r3, [r7, #24]
 80078be:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80078c0:	e027      	b.n	8007912 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80078c2:	f107 0308 	add.w	r3, r7, #8
 80078c6:	4618      	mov	r0, r3
 80078c8:	f7fe fcf8 	bl	80062bc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80078d0:	e01f      	b.n	8007912 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80078d2:	4b21      	ldr	r3, [pc, #132]	; (8007958 <UART_SetConfig+0x900>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f003 0320 	and.w	r3, r3, #32
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d009      	beq.n	80078f2 <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80078de:	4b1e      	ldr	r3, [pc, #120]	; (8007958 <UART_SetConfig+0x900>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	08db      	lsrs	r3, r3, #3
 80078e4:	f003 0303 	and.w	r3, r3, #3
 80078e8:	4a1d      	ldr	r2, [pc, #116]	; (8007960 <UART_SetConfig+0x908>)
 80078ea:	fa22 f303 	lsr.w	r3, r2, r3
 80078ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80078f0:	e00f      	b.n	8007912 <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 80078f2:	4b1b      	ldr	r3, [pc, #108]	; (8007960 <UART_SetConfig+0x908>)
 80078f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80078f6:	e00c      	b.n	8007912 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80078f8:	4b1a      	ldr	r3, [pc, #104]	; (8007964 <UART_SetConfig+0x90c>)
 80078fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80078fc:	e009      	b.n	8007912 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80078fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007902:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007904:	e005      	b.n	8007912 <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 8007906:	2300      	movs	r3, #0
 8007908:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800790a:	2301      	movs	r3, #1
 800790c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8007910:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007914:	2b00      	cmp	r3, #0
 8007916:	f000 81e6 	beq.w	8007ce6 <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800791e:	4a12      	ldr	r2, [pc, #72]	; (8007968 <UART_SetConfig+0x910>)
 8007920:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007924:	461a      	mov	r2, r3
 8007926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007928:	fbb3 f3f2 	udiv	r3, r3, r2
 800792c:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	685a      	ldr	r2, [r3, #4]
 8007932:	4613      	mov	r3, r2
 8007934:	005b      	lsls	r3, r3, #1
 8007936:	4413      	add	r3, r2
 8007938:	6a3a      	ldr	r2, [r7, #32]
 800793a:	429a      	cmp	r2, r3
 800793c:	d305      	bcc.n	800794a <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	685b      	ldr	r3, [r3, #4]
 8007942:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007944:	6a3a      	ldr	r2, [r7, #32]
 8007946:	429a      	cmp	r2, r3
 8007948:	d910      	bls.n	800796c <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 800794a:	2301      	movs	r3, #1
 800794c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8007950:	e1c9      	b.n	8007ce6 <UART_SetConfig+0xc8e>
 8007952:	bf00      	nop
 8007954:	40011c00 	.word	0x40011c00
 8007958:	58024400 	.word	0x58024400
 800795c:	58000c00 	.word	0x58000c00
 8007960:	03d09000 	.word	0x03d09000
 8007964:	003d0900 	.word	0x003d0900
 8007968:	08008490 	.word	0x08008490
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800796c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800796e:	4618      	mov	r0, r3
 8007970:	f04f 0100 	mov.w	r1, #0
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007978:	4ac1      	ldr	r2, [pc, #772]	; (8007c80 <UART_SetConfig+0xc28>)
 800797a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800797e:	b29a      	uxth	r2, r3
 8007980:	f04f 0300 	mov.w	r3, #0
 8007984:	f7f8 fcb2 	bl	80002ec <__aeabi_uldivmod>
 8007988:	4602      	mov	r2, r0
 800798a:	460b      	mov	r3, r1
 800798c:	4610      	mov	r0, r2
 800798e:	4619      	mov	r1, r3
 8007990:	f04f 0200 	mov.w	r2, #0
 8007994:	f04f 0300 	mov.w	r3, #0
 8007998:	020b      	lsls	r3, r1, #8
 800799a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800799e:	0202      	lsls	r2, r0, #8
 80079a0:	6879      	ldr	r1, [r7, #4]
 80079a2:	6849      	ldr	r1, [r1, #4]
 80079a4:	0849      	lsrs	r1, r1, #1
 80079a6:	4608      	mov	r0, r1
 80079a8:	f04f 0100 	mov.w	r1, #0
 80079ac:	1814      	adds	r4, r2, r0
 80079ae:	eb43 0501 	adc.w	r5, r3, r1
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	685b      	ldr	r3, [r3, #4]
 80079b6:	461a      	mov	r2, r3
 80079b8:	f04f 0300 	mov.w	r3, #0
 80079bc:	4620      	mov	r0, r4
 80079be:	4629      	mov	r1, r5
 80079c0:	f7f8 fc94 	bl	80002ec <__aeabi_uldivmod>
 80079c4:	4602      	mov	r2, r0
 80079c6:	460b      	mov	r3, r1
 80079c8:	4613      	mov	r3, r2
 80079ca:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80079cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80079d2:	d308      	bcc.n	80079e6 <UART_SetConfig+0x98e>
 80079d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80079da:	d204      	bcs.n	80079e6 <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80079e2:	60da      	str	r2, [r3, #12]
 80079e4:	e17f      	b.n	8007ce6 <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 80079e6:	2301      	movs	r3, #1
 80079e8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80079ec:	e17b      	b.n	8007ce6 <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	69db      	ldr	r3, [r3, #28]
 80079f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079f6:	f040 80bd 	bne.w	8007b74 <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 80079fa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80079fe:	2b20      	cmp	r3, #32
 8007a00:	dc48      	bgt.n	8007a94 <UART_SetConfig+0xa3c>
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	db7b      	blt.n	8007afe <UART_SetConfig+0xaa6>
 8007a06:	2b20      	cmp	r3, #32
 8007a08:	d879      	bhi.n	8007afe <UART_SetConfig+0xaa6>
 8007a0a:	a201      	add	r2, pc, #4	; (adr r2, 8007a10 <UART_SetConfig+0x9b8>)
 8007a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a10:	08007a9b 	.word	0x08007a9b
 8007a14:	08007aa3 	.word	0x08007aa3
 8007a18:	08007aff 	.word	0x08007aff
 8007a1c:	08007aff 	.word	0x08007aff
 8007a20:	08007aab 	.word	0x08007aab
 8007a24:	08007aff 	.word	0x08007aff
 8007a28:	08007aff 	.word	0x08007aff
 8007a2c:	08007aff 	.word	0x08007aff
 8007a30:	08007abb 	.word	0x08007abb
 8007a34:	08007aff 	.word	0x08007aff
 8007a38:	08007aff 	.word	0x08007aff
 8007a3c:	08007aff 	.word	0x08007aff
 8007a40:	08007aff 	.word	0x08007aff
 8007a44:	08007aff 	.word	0x08007aff
 8007a48:	08007aff 	.word	0x08007aff
 8007a4c:	08007aff 	.word	0x08007aff
 8007a50:	08007acb 	.word	0x08007acb
 8007a54:	08007aff 	.word	0x08007aff
 8007a58:	08007aff 	.word	0x08007aff
 8007a5c:	08007aff 	.word	0x08007aff
 8007a60:	08007aff 	.word	0x08007aff
 8007a64:	08007aff 	.word	0x08007aff
 8007a68:	08007aff 	.word	0x08007aff
 8007a6c:	08007aff 	.word	0x08007aff
 8007a70:	08007aff 	.word	0x08007aff
 8007a74:	08007aff 	.word	0x08007aff
 8007a78:	08007aff 	.word	0x08007aff
 8007a7c:	08007aff 	.word	0x08007aff
 8007a80:	08007aff 	.word	0x08007aff
 8007a84:	08007aff 	.word	0x08007aff
 8007a88:	08007aff 	.word	0x08007aff
 8007a8c:	08007aff 	.word	0x08007aff
 8007a90:	08007af1 	.word	0x08007af1
 8007a94:	2b40      	cmp	r3, #64	; 0x40
 8007a96:	d02e      	beq.n	8007af6 <UART_SetConfig+0xa9e>
 8007a98:	e031      	b.n	8007afe <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a9a:	f7fc ff43 	bl	8004924 <HAL_RCC_GetPCLK1Freq>
 8007a9e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007aa0:	e033      	b.n	8007b0a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007aa2:	f7fc ff55 	bl	8004950 <HAL_RCC_GetPCLK2Freq>
 8007aa6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007aa8:	e02f      	b.n	8007b0a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007aaa:	f107 0314 	add.w	r3, r7, #20
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f7fe fab0 	bl	8006014 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007ab4:	69bb      	ldr	r3, [r7, #24]
 8007ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007ab8:	e027      	b.n	8007b0a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007aba:	f107 0308 	add.w	r3, r7, #8
 8007abe:	4618      	mov	r0, r3
 8007ac0:	f7fe fbfc 	bl	80062bc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007ac8:	e01f      	b.n	8007b0a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007aca:	4b6e      	ldr	r3, [pc, #440]	; (8007c84 <UART_SetConfig+0xc2c>)
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f003 0320 	and.w	r3, r3, #32
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d009      	beq.n	8007aea <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007ad6:	4b6b      	ldr	r3, [pc, #428]	; (8007c84 <UART_SetConfig+0xc2c>)
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	08db      	lsrs	r3, r3, #3
 8007adc:	f003 0303 	and.w	r3, r3, #3
 8007ae0:	4a69      	ldr	r2, [pc, #420]	; (8007c88 <UART_SetConfig+0xc30>)
 8007ae2:	fa22 f303 	lsr.w	r3, r2, r3
 8007ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007ae8:	e00f      	b.n	8007b0a <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 8007aea:	4b67      	ldr	r3, [pc, #412]	; (8007c88 <UART_SetConfig+0xc30>)
 8007aec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007aee:	e00c      	b.n	8007b0a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007af0:	4b66      	ldr	r3, [pc, #408]	; (8007c8c <UART_SetConfig+0xc34>)
 8007af2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007af4:	e009      	b.n	8007b0a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007af6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007afa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007afc:	e005      	b.n	8007b0a <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 8007afe:	2300      	movs	r3, #0
 8007b00:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007b02:	2301      	movs	r3, #1
 8007b04:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8007b08:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	f000 80ea 	beq.w	8007ce6 <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b16:	4a5a      	ldr	r2, [pc, #360]	; (8007c80 <UART_SetConfig+0xc28>)
 8007b18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b1c:	461a      	mov	r2, r3
 8007b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b20:	fbb3 f3f2 	udiv	r3, r3, r2
 8007b24:	005a      	lsls	r2, r3, #1
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	685b      	ldr	r3, [r3, #4]
 8007b2a:	085b      	lsrs	r3, r3, #1
 8007b2c:	441a      	add	r2, r3
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	685b      	ldr	r3, [r3, #4]
 8007b32:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b36:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b3a:	2b0f      	cmp	r3, #15
 8007b3c:	d916      	bls.n	8007b6c <UART_SetConfig+0xb14>
 8007b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b44:	d212      	bcs.n	8007b6c <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b48:	b29b      	uxth	r3, r3
 8007b4a:	f023 030f 	bic.w	r3, r3, #15
 8007b4e:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b52:	085b      	lsrs	r3, r3, #1
 8007b54:	b29b      	uxth	r3, r3
 8007b56:	f003 0307 	and.w	r3, r3, #7
 8007b5a:	b29a      	uxth	r2, r3
 8007b5c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007b5e:	4313      	orrs	r3, r2
 8007b60:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007b68:	60da      	str	r2, [r3, #12]
 8007b6a:	e0bc      	b.n	8007ce6 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8007b72:	e0b8      	b.n	8007ce6 <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007b74:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007b78:	2b20      	cmp	r3, #32
 8007b7a:	dc4b      	bgt.n	8007c14 <UART_SetConfig+0xbbc>
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	f2c0 8087 	blt.w	8007c90 <UART_SetConfig+0xc38>
 8007b82:	2b20      	cmp	r3, #32
 8007b84:	f200 8084 	bhi.w	8007c90 <UART_SetConfig+0xc38>
 8007b88:	a201      	add	r2, pc, #4	; (adr r2, 8007b90 <UART_SetConfig+0xb38>)
 8007b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b8e:	bf00      	nop
 8007b90:	08007c1b 	.word	0x08007c1b
 8007b94:	08007c23 	.word	0x08007c23
 8007b98:	08007c91 	.word	0x08007c91
 8007b9c:	08007c91 	.word	0x08007c91
 8007ba0:	08007c2b 	.word	0x08007c2b
 8007ba4:	08007c91 	.word	0x08007c91
 8007ba8:	08007c91 	.word	0x08007c91
 8007bac:	08007c91 	.word	0x08007c91
 8007bb0:	08007c3b 	.word	0x08007c3b
 8007bb4:	08007c91 	.word	0x08007c91
 8007bb8:	08007c91 	.word	0x08007c91
 8007bbc:	08007c91 	.word	0x08007c91
 8007bc0:	08007c91 	.word	0x08007c91
 8007bc4:	08007c91 	.word	0x08007c91
 8007bc8:	08007c91 	.word	0x08007c91
 8007bcc:	08007c91 	.word	0x08007c91
 8007bd0:	08007c4b 	.word	0x08007c4b
 8007bd4:	08007c91 	.word	0x08007c91
 8007bd8:	08007c91 	.word	0x08007c91
 8007bdc:	08007c91 	.word	0x08007c91
 8007be0:	08007c91 	.word	0x08007c91
 8007be4:	08007c91 	.word	0x08007c91
 8007be8:	08007c91 	.word	0x08007c91
 8007bec:	08007c91 	.word	0x08007c91
 8007bf0:	08007c91 	.word	0x08007c91
 8007bf4:	08007c91 	.word	0x08007c91
 8007bf8:	08007c91 	.word	0x08007c91
 8007bfc:	08007c91 	.word	0x08007c91
 8007c00:	08007c91 	.word	0x08007c91
 8007c04:	08007c91 	.word	0x08007c91
 8007c08:	08007c91 	.word	0x08007c91
 8007c0c:	08007c91 	.word	0x08007c91
 8007c10:	08007c71 	.word	0x08007c71
 8007c14:	2b40      	cmp	r3, #64	; 0x40
 8007c16:	d02e      	beq.n	8007c76 <UART_SetConfig+0xc1e>
 8007c18:	e03a      	b.n	8007c90 <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c1a:	f7fc fe83 	bl	8004924 <HAL_RCC_GetPCLK1Freq>
 8007c1e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007c20:	e03c      	b.n	8007c9c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c22:	f7fc fe95 	bl	8004950 <HAL_RCC_GetPCLK2Freq>
 8007c26:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007c28:	e038      	b.n	8007c9c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c2a:	f107 0314 	add.w	r3, r7, #20
 8007c2e:	4618      	mov	r0, r3
 8007c30:	f7fe f9f0 	bl	8006014 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007c34:	69bb      	ldr	r3, [r7, #24]
 8007c36:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007c38:	e030      	b.n	8007c9c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c3a:	f107 0308 	add.w	r3, r7, #8
 8007c3e:	4618      	mov	r0, r3
 8007c40:	f7fe fb3c 	bl	80062bc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007c48:	e028      	b.n	8007c9c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c4a:	4b0e      	ldr	r3, [pc, #56]	; (8007c84 <UART_SetConfig+0xc2c>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f003 0320 	and.w	r3, r3, #32
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d009      	beq.n	8007c6a <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007c56:	4b0b      	ldr	r3, [pc, #44]	; (8007c84 <UART_SetConfig+0xc2c>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	08db      	lsrs	r3, r3, #3
 8007c5c:	f003 0303 	and.w	r3, r3, #3
 8007c60:	4a09      	ldr	r2, [pc, #36]	; (8007c88 <UART_SetConfig+0xc30>)
 8007c62:	fa22 f303 	lsr.w	r3, r2, r3
 8007c66:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007c68:	e018      	b.n	8007c9c <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 8007c6a:	4b07      	ldr	r3, [pc, #28]	; (8007c88 <UART_SetConfig+0xc30>)
 8007c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007c6e:	e015      	b.n	8007c9c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007c70:	4b06      	ldr	r3, [pc, #24]	; (8007c8c <UART_SetConfig+0xc34>)
 8007c72:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007c74:	e012      	b.n	8007c9c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007c7c:	e00e      	b.n	8007c9c <UART_SetConfig+0xc44>
 8007c7e:	bf00      	nop
 8007c80:	08008490 	.word	0x08008490
 8007c84:	58024400 	.word	0x58024400
 8007c88:	03d09000 	.word	0x03d09000
 8007c8c:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8007c90:	2300      	movs	r3, #0
 8007c92:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007c94:	2301      	movs	r3, #1
 8007c96:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8007c9a:	bf00      	nop
    }

    if (pclk != 0U)
 8007c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d021      	beq.n	8007ce6 <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ca6:	4a1a      	ldr	r2, [pc, #104]	; (8007d10 <UART_SetConfig+0xcb8>)
 8007ca8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007cac:	461a      	mov	r2, r3
 8007cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cb0:	fbb3 f2f2 	udiv	r2, r3, r2
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	685b      	ldr	r3, [r3, #4]
 8007cb8:	085b      	lsrs	r3, r3, #1
 8007cba:	441a      	add	r2, r3
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	685b      	ldr	r3, [r3, #4]
 8007cc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cc4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cc8:	2b0f      	cmp	r3, #15
 8007cca:	d909      	bls.n	8007ce0 <UART_SetConfig+0xc88>
 8007ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007cd2:	d205      	bcs.n	8007ce0 <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cd6:	b29a      	uxth	r2, r3
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	60da      	str	r2, [r3, #12]
 8007cde:	e002      	b.n	8007ce6 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2201      	movs	r2, #1
 8007cea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2201      	movs	r2, #1
 8007cf2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007d02:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8007d06:	4618      	mov	r0, r3
 8007d08:	3738      	adds	r7, #56	; 0x38
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bdb0      	pop	{r4, r5, r7, pc}
 8007d0e:	bf00      	nop
 8007d10:	08008490 	.word	0x08008490

08007d14 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007d14:	b480      	push	{r7}
 8007d16:	b083      	sub	sp, #12
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d20:	f003 0301 	and.w	r3, r3, #1
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d00a      	beq.n	8007d3e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	685b      	ldr	r3, [r3, #4]
 8007d2e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	430a      	orrs	r2, r1
 8007d3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d42:	f003 0302 	and.w	r3, r3, #2
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d00a      	beq.n	8007d60 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	685b      	ldr	r3, [r3, #4]
 8007d50:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	430a      	orrs	r2, r1
 8007d5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d64:	f003 0304 	and.w	r3, r3, #4
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d00a      	beq.n	8007d82 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	685b      	ldr	r3, [r3, #4]
 8007d72:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	430a      	orrs	r2, r1
 8007d80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d86:	f003 0308 	and.w	r3, r3, #8
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d00a      	beq.n	8007da4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	685b      	ldr	r3, [r3, #4]
 8007d94:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	430a      	orrs	r2, r1
 8007da2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007da8:	f003 0310 	and.w	r3, r3, #16
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d00a      	beq.n	8007dc6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	689b      	ldr	r3, [r3, #8]
 8007db6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	430a      	orrs	r2, r1
 8007dc4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dca:	f003 0320 	and.w	r3, r3, #32
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d00a      	beq.n	8007de8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	689b      	ldr	r3, [r3, #8]
 8007dd8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	430a      	orrs	r2, r1
 8007de6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d01a      	beq.n	8007e2a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	685b      	ldr	r3, [r3, #4]
 8007dfa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	430a      	orrs	r2, r1
 8007e08:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e12:	d10a      	bne.n	8007e2a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	685b      	ldr	r3, [r3, #4]
 8007e1a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	430a      	orrs	r2, r1
 8007e28:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d00a      	beq.n	8007e4c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	685b      	ldr	r3, [r3, #4]
 8007e3c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	430a      	orrs	r2, r1
 8007e4a:	605a      	str	r2, [r3, #4]
  }
}
 8007e4c:	bf00      	nop
 8007e4e:	370c      	adds	r7, #12
 8007e50:	46bd      	mov	sp, r7
 8007e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e56:	4770      	bx	lr

08007e58 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b086      	sub	sp, #24
 8007e5c:	af02      	add	r7, sp, #8
 8007e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2200      	movs	r2, #0
 8007e64:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007e68:	f7f9 fe5a 	bl	8001b20 <HAL_GetTick>
 8007e6c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f003 0308 	and.w	r3, r3, #8
 8007e78:	2b08      	cmp	r3, #8
 8007e7a:	d10e      	bne.n	8007e9a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e7c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007e80:	9300      	str	r3, [sp, #0]
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	2200      	movs	r2, #0
 8007e86:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f000 f82f 	bl	8007eee <UART_WaitOnFlagUntilTimeout>
 8007e90:	4603      	mov	r3, r0
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d001      	beq.n	8007e9a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e96:	2303      	movs	r3, #3
 8007e98:	e025      	b.n	8007ee6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f003 0304 	and.w	r3, r3, #4
 8007ea4:	2b04      	cmp	r3, #4
 8007ea6:	d10e      	bne.n	8007ec6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ea8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007eac:	9300      	str	r3, [sp, #0]
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f000 f819 	bl	8007eee <UART_WaitOnFlagUntilTimeout>
 8007ebc:	4603      	mov	r3, r0
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d001      	beq.n	8007ec6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007ec2:	2303      	movs	r3, #3
 8007ec4:	e00f      	b.n	8007ee6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2220      	movs	r2, #32
 8007eca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2220      	movs	r2, #32
 8007ed2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2200      	movs	r2, #0
 8007eda:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2200      	movs	r2, #0
 8007ee0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007ee4:	2300      	movs	r3, #0
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	3710      	adds	r7, #16
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}

08007eee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007eee:	b580      	push	{r7, lr}
 8007ef0:	b09c      	sub	sp, #112	; 0x70
 8007ef2:	af00      	add	r7, sp, #0
 8007ef4:	60f8      	str	r0, [r7, #12]
 8007ef6:	60b9      	str	r1, [r7, #8]
 8007ef8:	603b      	str	r3, [r7, #0]
 8007efa:	4613      	mov	r3, r2
 8007efc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007efe:	e0a9      	b.n	8008054 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007f02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f06:	f000 80a5 	beq.w	8008054 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f0a:	f7f9 fe09 	bl	8001b20 <HAL_GetTick>
 8007f0e:	4602      	mov	r2, r0
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	1ad3      	subs	r3, r2, r3
 8007f14:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007f16:	429a      	cmp	r2, r3
 8007f18:	d302      	bcc.n	8007f20 <UART_WaitOnFlagUntilTimeout+0x32>
 8007f1a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d140      	bne.n	8007fa2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f28:	e853 3f00 	ldrex	r3, [r3]
 8007f2c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007f2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f30:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007f34:	667b      	str	r3, [r7, #100]	; 0x64
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	461a      	mov	r2, r3
 8007f3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f3e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007f40:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f42:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007f44:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007f46:	e841 2300 	strex	r3, r2, [r1]
 8007f4a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007f4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d1e6      	bne.n	8007f20 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	3308      	adds	r3, #8
 8007f58:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f5c:	e853 3f00 	ldrex	r3, [r3]
 8007f60:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f64:	f023 0301 	bic.w	r3, r3, #1
 8007f68:	663b      	str	r3, [r7, #96]	; 0x60
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	3308      	adds	r3, #8
 8007f70:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007f72:	64ba      	str	r2, [r7, #72]	; 0x48
 8007f74:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f76:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007f78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f7a:	e841 2300 	strex	r3, r2, [r1]
 8007f7e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007f80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d1e5      	bne.n	8007f52 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	2220      	movs	r2, #32
 8007f8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	2220      	movs	r2, #32
 8007f92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	2200      	movs	r2, #0
 8007f9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007f9e:	2303      	movs	r3, #3
 8007fa0:	e069      	b.n	8008076 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f003 0304 	and.w	r3, r3, #4
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d051      	beq.n	8008054 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	69db      	ldr	r3, [r3, #28]
 8007fb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007fba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007fbe:	d149      	bne.n	8008054 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007fc8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fd2:	e853 3f00 	ldrex	r3, [r3]
 8007fd6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fda:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007fde:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	461a      	mov	r2, r3
 8007fe6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fe8:	637b      	str	r3, [r7, #52]	; 0x34
 8007fea:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007fee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ff0:	e841 2300 	strex	r3, r2, [r1]
 8007ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d1e6      	bne.n	8007fca <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	3308      	adds	r3, #8
 8008002:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008004:	697b      	ldr	r3, [r7, #20]
 8008006:	e853 3f00 	ldrex	r3, [r3]
 800800a:	613b      	str	r3, [r7, #16]
   return(result);
 800800c:	693b      	ldr	r3, [r7, #16]
 800800e:	f023 0301 	bic.w	r3, r3, #1
 8008012:	66bb      	str	r3, [r7, #104]	; 0x68
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	3308      	adds	r3, #8
 800801a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800801c:	623a      	str	r2, [r7, #32]
 800801e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008020:	69f9      	ldr	r1, [r7, #28]
 8008022:	6a3a      	ldr	r2, [r7, #32]
 8008024:	e841 2300 	strex	r3, r2, [r1]
 8008028:	61bb      	str	r3, [r7, #24]
   return(result);
 800802a:	69bb      	ldr	r3, [r7, #24]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d1e5      	bne.n	8007ffc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	2220      	movs	r2, #32
 8008034:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	2220      	movs	r2, #32
 800803c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	2220      	movs	r2, #32
 8008044:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	2200      	movs	r2, #0
 800804c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008050:	2303      	movs	r3, #3
 8008052:	e010      	b.n	8008076 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	69da      	ldr	r2, [r3, #28]
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	4013      	ands	r3, r2
 800805e:	68ba      	ldr	r2, [r7, #8]
 8008060:	429a      	cmp	r2, r3
 8008062:	bf0c      	ite	eq
 8008064:	2301      	moveq	r3, #1
 8008066:	2300      	movne	r3, #0
 8008068:	b2db      	uxtb	r3, r3
 800806a:	461a      	mov	r2, r3
 800806c:	79fb      	ldrb	r3, [r7, #7]
 800806e:	429a      	cmp	r2, r3
 8008070:	f43f af46 	beq.w	8007f00 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008074:	2300      	movs	r3, #0
}
 8008076:	4618      	mov	r0, r3
 8008078:	3770      	adds	r7, #112	; 0x70
 800807a:	46bd      	mov	sp, r7
 800807c:	bd80      	pop	{r7, pc}

0800807e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800807e:	b480      	push	{r7}
 8008080:	b085      	sub	sp, #20
 8008082:	af00      	add	r7, sp, #0
 8008084:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800808c:	2b01      	cmp	r3, #1
 800808e:	d101      	bne.n	8008094 <HAL_UARTEx_DisableFifoMode+0x16>
 8008090:	2302      	movs	r3, #2
 8008092:	e027      	b.n	80080e4 <HAL_UARTEx_DisableFifoMode+0x66>
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2201      	movs	r2, #1
 8008098:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2224      	movs	r2, #36	; 0x24
 80080a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	681a      	ldr	r2, [r3, #0]
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f022 0201 	bic.w	r2, r2, #1
 80080ba:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80080c2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2200      	movs	r2, #0
 80080c8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	68fa      	ldr	r2, [r7, #12]
 80080d0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2220      	movs	r2, #32
 80080d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2200      	movs	r2, #0
 80080de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80080e2:	2300      	movs	r3, #0
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	3714      	adds	r7, #20
 80080e8:	46bd      	mov	sp, r7
 80080ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ee:	4770      	bx	lr

080080f0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b084      	sub	sp, #16
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
 80080f8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008100:	2b01      	cmp	r3, #1
 8008102:	d101      	bne.n	8008108 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008104:	2302      	movs	r3, #2
 8008106:	e02d      	b.n	8008164 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2201      	movs	r2, #1
 800810c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2224      	movs	r2, #36	; 0x24
 8008114:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	681a      	ldr	r2, [r3, #0]
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f022 0201 	bic.w	r2, r2, #1
 800812e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	689b      	ldr	r3, [r3, #8]
 8008136:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	683a      	ldr	r2, [r7, #0]
 8008140:	430a      	orrs	r2, r1
 8008142:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	f000 f84f 	bl	80081e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	68fa      	ldr	r2, [r7, #12]
 8008150:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2220      	movs	r2, #32
 8008156:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2200      	movs	r2, #0
 800815e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008162:	2300      	movs	r3, #0
}
 8008164:	4618      	mov	r0, r3
 8008166:	3710      	adds	r7, #16
 8008168:	46bd      	mov	sp, r7
 800816a:	bd80      	pop	{r7, pc}

0800816c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b084      	sub	sp, #16
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
 8008174:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800817c:	2b01      	cmp	r3, #1
 800817e:	d101      	bne.n	8008184 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008180:	2302      	movs	r3, #2
 8008182:	e02d      	b.n	80081e0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2201      	movs	r2, #1
 8008188:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2224      	movs	r2, #36	; 0x24
 8008190:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	681a      	ldr	r2, [r3, #0]
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f022 0201 	bic.w	r2, r2, #1
 80081aa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	689b      	ldr	r3, [r3, #8]
 80081b2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	683a      	ldr	r2, [r7, #0]
 80081bc:	430a      	orrs	r2, r1
 80081be:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f000 f811 	bl	80081e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	68fa      	ldr	r2, [r7, #12]
 80081cc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2220      	movs	r2, #32
 80081d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2200      	movs	r2, #0
 80081da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80081de:	2300      	movs	r3, #0
}
 80081e0:	4618      	mov	r0, r3
 80081e2:	3710      	adds	r7, #16
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bd80      	pop	{r7, pc}

080081e8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80081e8:	b480      	push	{r7}
 80081ea:	b085      	sub	sp, #20
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d108      	bne.n	800820a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2201      	movs	r2, #1
 80081fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2201      	movs	r2, #1
 8008204:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008208:	e031      	b.n	800826e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800820a:	2310      	movs	r3, #16
 800820c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800820e:	2310      	movs	r3, #16
 8008210:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	689b      	ldr	r3, [r3, #8]
 8008218:	0e5b      	lsrs	r3, r3, #25
 800821a:	b2db      	uxtb	r3, r3
 800821c:	f003 0307 	and.w	r3, r3, #7
 8008220:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	689b      	ldr	r3, [r3, #8]
 8008228:	0f5b      	lsrs	r3, r3, #29
 800822a:	b2db      	uxtb	r3, r3
 800822c:	f003 0307 	and.w	r3, r3, #7
 8008230:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008232:	7bbb      	ldrb	r3, [r7, #14]
 8008234:	7b3a      	ldrb	r2, [r7, #12]
 8008236:	4911      	ldr	r1, [pc, #68]	; (800827c <UARTEx_SetNbDataToProcess+0x94>)
 8008238:	5c8a      	ldrb	r2, [r1, r2]
 800823a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800823e:	7b3a      	ldrb	r2, [r7, #12]
 8008240:	490f      	ldr	r1, [pc, #60]	; (8008280 <UARTEx_SetNbDataToProcess+0x98>)
 8008242:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008244:	fb93 f3f2 	sdiv	r3, r3, r2
 8008248:	b29a      	uxth	r2, r3
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008250:	7bfb      	ldrb	r3, [r7, #15]
 8008252:	7b7a      	ldrb	r2, [r7, #13]
 8008254:	4909      	ldr	r1, [pc, #36]	; (800827c <UARTEx_SetNbDataToProcess+0x94>)
 8008256:	5c8a      	ldrb	r2, [r1, r2]
 8008258:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800825c:	7b7a      	ldrb	r2, [r7, #13]
 800825e:	4908      	ldr	r1, [pc, #32]	; (8008280 <UARTEx_SetNbDataToProcess+0x98>)
 8008260:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008262:	fb93 f3f2 	sdiv	r3, r3, r2
 8008266:	b29a      	uxth	r2, r3
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800826e:	bf00      	nop
 8008270:	3714      	adds	r7, #20
 8008272:	46bd      	mov	sp, r7
 8008274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008278:	4770      	bx	lr
 800827a:	bf00      	nop
 800827c:	080084a8 	.word	0x080084a8
 8008280:	080084b0 	.word	0x080084b0

08008284 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8008284:	b480      	push	{r7}
 8008286:	b083      	sub	sp, #12
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
 800828c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d121      	bne.n	80082da <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681a      	ldr	r2, [r3, #0]
 800829a:	4b27      	ldr	r3, [pc, #156]	; (8008338 <FMC_SDRAM_Init+0xb4>)
 800829c:	4013      	ands	r3, r2
 800829e:	683a      	ldr	r2, [r7, #0]
 80082a0:	6851      	ldr	r1, [r2, #4]
 80082a2:	683a      	ldr	r2, [r7, #0]
 80082a4:	6892      	ldr	r2, [r2, #8]
 80082a6:	4311      	orrs	r1, r2
 80082a8:	683a      	ldr	r2, [r7, #0]
 80082aa:	68d2      	ldr	r2, [r2, #12]
 80082ac:	4311      	orrs	r1, r2
 80082ae:	683a      	ldr	r2, [r7, #0]
 80082b0:	6912      	ldr	r2, [r2, #16]
 80082b2:	4311      	orrs	r1, r2
 80082b4:	683a      	ldr	r2, [r7, #0]
 80082b6:	6952      	ldr	r2, [r2, #20]
 80082b8:	4311      	orrs	r1, r2
 80082ba:	683a      	ldr	r2, [r7, #0]
 80082bc:	6992      	ldr	r2, [r2, #24]
 80082be:	4311      	orrs	r1, r2
 80082c0:	683a      	ldr	r2, [r7, #0]
 80082c2:	69d2      	ldr	r2, [r2, #28]
 80082c4:	4311      	orrs	r1, r2
 80082c6:	683a      	ldr	r2, [r7, #0]
 80082c8:	6a12      	ldr	r2, [r2, #32]
 80082ca:	4311      	orrs	r1, r2
 80082cc:	683a      	ldr	r2, [r7, #0]
 80082ce:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80082d0:	430a      	orrs	r2, r1
 80082d2:	431a      	orrs	r2, r3
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	601a      	str	r2, [r3, #0]
 80082d8:	e026      	b.n	8008328 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	69d9      	ldr	r1, [r3, #28]
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	6a1b      	ldr	r3, [r3, #32]
 80082ea:	4319      	orrs	r1, r3
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082f0:	430b      	orrs	r3, r1
 80082f2:	431a      	orrs	r2, r3
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	685a      	ldr	r2, [r3, #4]
 80082fc:	4b0e      	ldr	r3, [pc, #56]	; (8008338 <FMC_SDRAM_Init+0xb4>)
 80082fe:	4013      	ands	r3, r2
 8008300:	683a      	ldr	r2, [r7, #0]
 8008302:	6851      	ldr	r1, [r2, #4]
 8008304:	683a      	ldr	r2, [r7, #0]
 8008306:	6892      	ldr	r2, [r2, #8]
 8008308:	4311      	orrs	r1, r2
 800830a:	683a      	ldr	r2, [r7, #0]
 800830c:	68d2      	ldr	r2, [r2, #12]
 800830e:	4311      	orrs	r1, r2
 8008310:	683a      	ldr	r2, [r7, #0]
 8008312:	6912      	ldr	r2, [r2, #16]
 8008314:	4311      	orrs	r1, r2
 8008316:	683a      	ldr	r2, [r7, #0]
 8008318:	6952      	ldr	r2, [r2, #20]
 800831a:	4311      	orrs	r1, r2
 800831c:	683a      	ldr	r2, [r7, #0]
 800831e:	6992      	ldr	r2, [r2, #24]
 8008320:	430a      	orrs	r2, r1
 8008322:	431a      	orrs	r2, r3
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8008328:	2300      	movs	r3, #0
}
 800832a:	4618      	mov	r0, r3
 800832c:	370c      	adds	r7, #12
 800832e:	46bd      	mov	sp, r7
 8008330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008334:	4770      	bx	lr
 8008336:	bf00      	nop
 8008338:	ffff8000 	.word	0xffff8000

0800833c <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800833c:	b480      	push	{r7}
 800833e:	b085      	sub	sp, #20
 8008340:	af00      	add	r7, sp, #0
 8008342:	60f8      	str	r0, [r7, #12]
 8008344:	60b9      	str	r1, [r7, #8]
 8008346:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d128      	bne.n	80083a0 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	689b      	ldr	r3, [r3, #8]
 8008352:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8008356:	68bb      	ldr	r3, [r7, #8]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	1e59      	subs	r1, r3, #1
 800835c:	68bb      	ldr	r3, [r7, #8]
 800835e:	685b      	ldr	r3, [r3, #4]
 8008360:	3b01      	subs	r3, #1
 8008362:	011b      	lsls	r3, r3, #4
 8008364:	4319      	orrs	r1, r3
 8008366:	68bb      	ldr	r3, [r7, #8]
 8008368:	689b      	ldr	r3, [r3, #8]
 800836a:	3b01      	subs	r3, #1
 800836c:	021b      	lsls	r3, r3, #8
 800836e:	4319      	orrs	r1, r3
 8008370:	68bb      	ldr	r3, [r7, #8]
 8008372:	68db      	ldr	r3, [r3, #12]
 8008374:	3b01      	subs	r3, #1
 8008376:	031b      	lsls	r3, r3, #12
 8008378:	4319      	orrs	r1, r3
 800837a:	68bb      	ldr	r3, [r7, #8]
 800837c:	691b      	ldr	r3, [r3, #16]
 800837e:	3b01      	subs	r3, #1
 8008380:	041b      	lsls	r3, r3, #16
 8008382:	4319      	orrs	r1, r3
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	695b      	ldr	r3, [r3, #20]
 8008388:	3b01      	subs	r3, #1
 800838a:	051b      	lsls	r3, r3, #20
 800838c:	4319      	orrs	r1, r3
 800838e:	68bb      	ldr	r3, [r7, #8]
 8008390:	699b      	ldr	r3, [r3, #24]
 8008392:	3b01      	subs	r3, #1
 8008394:	061b      	lsls	r3, r3, #24
 8008396:	430b      	orrs	r3, r1
 8008398:	431a      	orrs	r2, r3
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	609a      	str	r2, [r3, #8]
 800839e:	e02d      	b.n	80083fc <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	689a      	ldr	r2, [r3, #8]
 80083a4:	4b19      	ldr	r3, [pc, #100]	; (800840c <FMC_SDRAM_Timing_Init+0xd0>)
 80083a6:	4013      	ands	r3, r2
 80083a8:	68ba      	ldr	r2, [r7, #8]
 80083aa:	68d2      	ldr	r2, [r2, #12]
 80083ac:	3a01      	subs	r2, #1
 80083ae:	0311      	lsls	r1, r2, #12
 80083b0:	68ba      	ldr	r2, [r7, #8]
 80083b2:	6952      	ldr	r2, [r2, #20]
 80083b4:	3a01      	subs	r2, #1
 80083b6:	0512      	lsls	r2, r2, #20
 80083b8:	430a      	orrs	r2, r1
 80083ba:	431a      	orrs	r2, r3
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	68db      	ldr	r3, [r3, #12]
 80083c4:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80083c8:	68bb      	ldr	r3, [r7, #8]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	1e59      	subs	r1, r3, #1
 80083ce:	68bb      	ldr	r3, [r7, #8]
 80083d0:	685b      	ldr	r3, [r3, #4]
 80083d2:	3b01      	subs	r3, #1
 80083d4:	011b      	lsls	r3, r3, #4
 80083d6:	4319      	orrs	r1, r3
 80083d8:	68bb      	ldr	r3, [r7, #8]
 80083da:	689b      	ldr	r3, [r3, #8]
 80083dc:	3b01      	subs	r3, #1
 80083de:	021b      	lsls	r3, r3, #8
 80083e0:	4319      	orrs	r1, r3
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	691b      	ldr	r3, [r3, #16]
 80083e6:	3b01      	subs	r3, #1
 80083e8:	041b      	lsls	r3, r3, #16
 80083ea:	4319      	orrs	r1, r3
 80083ec:	68bb      	ldr	r3, [r7, #8]
 80083ee:	699b      	ldr	r3, [r3, #24]
 80083f0:	3b01      	subs	r3, #1
 80083f2:	061b      	lsls	r3, r3, #24
 80083f4:	430b      	orrs	r3, r1
 80083f6:	431a      	orrs	r2, r3
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 80083fc:	2300      	movs	r3, #0
}
 80083fe:	4618      	mov	r0, r3
 8008400:	3714      	adds	r7, #20
 8008402:	46bd      	mov	sp, r7
 8008404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008408:	4770      	bx	lr
 800840a:	bf00      	nop
 800840c:	ff0f0fff 	.word	0xff0f0fff

08008410 <__libc_init_array>:
 8008410:	b570      	push	{r4, r5, r6, lr}
 8008412:	4d0d      	ldr	r5, [pc, #52]	; (8008448 <__libc_init_array+0x38>)
 8008414:	4c0d      	ldr	r4, [pc, #52]	; (800844c <__libc_init_array+0x3c>)
 8008416:	1b64      	subs	r4, r4, r5
 8008418:	10a4      	asrs	r4, r4, #2
 800841a:	2600      	movs	r6, #0
 800841c:	42a6      	cmp	r6, r4
 800841e:	d109      	bne.n	8008434 <__libc_init_array+0x24>
 8008420:	4d0b      	ldr	r5, [pc, #44]	; (8008450 <__libc_init_array+0x40>)
 8008422:	4c0c      	ldr	r4, [pc, #48]	; (8008454 <__libc_init_array+0x44>)
 8008424:	f000 f820 	bl	8008468 <_init>
 8008428:	1b64      	subs	r4, r4, r5
 800842a:	10a4      	asrs	r4, r4, #2
 800842c:	2600      	movs	r6, #0
 800842e:	42a6      	cmp	r6, r4
 8008430:	d105      	bne.n	800843e <__libc_init_array+0x2e>
 8008432:	bd70      	pop	{r4, r5, r6, pc}
 8008434:	f855 3b04 	ldr.w	r3, [r5], #4
 8008438:	4798      	blx	r3
 800843a:	3601      	adds	r6, #1
 800843c:	e7ee      	b.n	800841c <__libc_init_array+0xc>
 800843e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008442:	4798      	blx	r3
 8008444:	3601      	adds	r6, #1
 8008446:	e7f2      	b.n	800842e <__libc_init_array+0x1e>
 8008448:	080084c0 	.word	0x080084c0
 800844c:	080084c0 	.word	0x080084c0
 8008450:	080084c0 	.word	0x080084c0
 8008454:	080084c4 	.word	0x080084c4

08008458 <memset>:
 8008458:	4402      	add	r2, r0
 800845a:	4603      	mov	r3, r0
 800845c:	4293      	cmp	r3, r2
 800845e:	d100      	bne.n	8008462 <memset+0xa>
 8008460:	4770      	bx	lr
 8008462:	f803 1b01 	strb.w	r1, [r3], #1
 8008466:	e7f9      	b.n	800845c <memset+0x4>

08008468 <_init>:
 8008468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800846a:	bf00      	nop
 800846c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800846e:	bc08      	pop	{r3}
 8008470:	469e      	mov	lr, r3
 8008472:	4770      	bx	lr

08008474 <_fini>:
 8008474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008476:	bf00      	nop
 8008478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800847a:	bc08      	pop	{r3}
 800847c:	469e      	mov	lr, r3
 800847e:	4770      	bx	lr
