
LEDBlink01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081a8  080002ac  080002ac  000102ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08008454  08008454  00018454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800848c  0800848c  0001848c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008494  08008494  00018494  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08008498  08008498  00018498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  0800849c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000340  24000010  080084ac  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000350  080084ac  00020350  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001f2a9  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000318e  00000000  00000000  0003f2e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001688  00000000  00000000  00042478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001550  00000000  00000000  00043b00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00034e02  00000000  00000000  00045050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001ddd8  00000000  00000000  00079e52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00154920  00000000  00000000  00097c2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001ec54a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006090  00000000  00000000  001ec59c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	; (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000010 	.word	0x24000010
 80002c8:	00000000 	.word	0x00000000
 80002cc:	0800843c 	.word	0x0800843c

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	; (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	; (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000014 	.word	0x24000014
 80002e8:	0800843c 	.word	0x0800843c

080002ec <__aeabi_uldivmod>:
 80002ec:	b953      	cbnz	r3, 8000304 <__aeabi_uldivmod+0x18>
 80002ee:	b94a      	cbnz	r2, 8000304 <__aeabi_uldivmod+0x18>
 80002f0:	2900      	cmp	r1, #0
 80002f2:	bf08      	it	eq
 80002f4:	2800      	cmpeq	r0, #0
 80002f6:	bf1c      	itt	ne
 80002f8:	f04f 31ff 	movne.w	r1, #4294967295
 80002fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000300:	f000 b974 	b.w	80005ec <__aeabi_idiv0>
 8000304:	f1ad 0c08 	sub.w	ip, sp, #8
 8000308:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030c:	f000 f806 	bl	800031c <__udivmoddi4>
 8000310:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000318:	b004      	add	sp, #16
 800031a:	4770      	bx	lr

0800031c <__udivmoddi4>:
 800031c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000320:	9d08      	ldr	r5, [sp, #32]
 8000322:	4604      	mov	r4, r0
 8000324:	468e      	mov	lr, r1
 8000326:	2b00      	cmp	r3, #0
 8000328:	d14d      	bne.n	80003c6 <__udivmoddi4+0xaa>
 800032a:	428a      	cmp	r2, r1
 800032c:	4694      	mov	ip, r2
 800032e:	d969      	bls.n	8000404 <__udivmoddi4+0xe8>
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	b152      	cbz	r2, 800034c <__udivmoddi4+0x30>
 8000336:	fa01 f302 	lsl.w	r3, r1, r2
 800033a:	f1c2 0120 	rsb	r1, r2, #32
 800033e:	fa20 f101 	lsr.w	r1, r0, r1
 8000342:	fa0c fc02 	lsl.w	ip, ip, r2
 8000346:	ea41 0e03 	orr.w	lr, r1, r3
 800034a:	4094      	lsls	r4, r2
 800034c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000350:	0c21      	lsrs	r1, r4, #16
 8000352:	fbbe f6f8 	udiv	r6, lr, r8
 8000356:	fa1f f78c 	uxth.w	r7, ip
 800035a:	fb08 e316 	mls	r3, r8, r6, lr
 800035e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000362:	fb06 f107 	mul.w	r1, r6, r7
 8000366:	4299      	cmp	r1, r3
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x64>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000372:	f080 811f 	bcs.w	80005b4 <__udivmoddi4+0x298>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 811c 	bls.w	80005b4 <__udivmoddi4+0x298>
 800037c:	3e02      	subs	r6, #2
 800037e:	4463      	add	r3, ip
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 f707 	mul.w	r7, r0, r7
 8000394:	42a7      	cmp	r7, r4
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x92>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a0:	f080 810a 	bcs.w	80005b8 <__udivmoddi4+0x29c>
 80003a4:	42a7      	cmp	r7, r4
 80003a6:	f240 8107 	bls.w	80005b8 <__udivmoddi4+0x29c>
 80003aa:	4464      	add	r4, ip
 80003ac:	3802      	subs	r0, #2
 80003ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b2:	1be4      	subs	r4, r4, r7
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa4>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xc2>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80ef 	beq.w	80005ae <__udivmoddi4+0x292>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x160>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd4>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80f9 	bhi.w	80005e2 <__udivmoddi4+0x2c6>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	469e      	mov	lr, r3
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa4>
 80003fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa4>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xec>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 8092 	bne.w	8000536 <__udivmoddi4+0x21a>
 8000412:	eba1 010c 	sub.w	r1, r1, ip
 8000416:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	2601      	movs	r6, #1
 8000420:	0c20      	lsrs	r0, r4, #16
 8000422:	fbb1 f3f7 	udiv	r3, r1, r7
 8000426:	fb07 1113 	mls	r1, r7, r3, r1
 800042a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800042e:	fb0e f003 	mul.w	r0, lr, r3
 8000432:	4288      	cmp	r0, r1
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x12c>
 8000436:	eb1c 0101 	adds.w	r1, ip, r1
 800043a:	f103 38ff 	add.w	r8, r3, #4294967295
 800043e:	d202      	bcs.n	8000446 <__udivmoddi4+0x12a>
 8000440:	4288      	cmp	r0, r1
 8000442:	f200 80cb 	bhi.w	80005dc <__udivmoddi4+0x2c0>
 8000446:	4643      	mov	r3, r8
 8000448:	1a09      	subs	r1, r1, r0
 800044a:	b2a4      	uxth	r4, r4
 800044c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000450:	fb07 1110 	mls	r1, r7, r0, r1
 8000454:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000458:	fb0e fe00 	mul.w	lr, lr, r0
 800045c:	45a6      	cmp	lr, r4
 800045e:	d908      	bls.n	8000472 <__udivmoddi4+0x156>
 8000460:	eb1c 0404 	adds.w	r4, ip, r4
 8000464:	f100 31ff 	add.w	r1, r0, #4294967295
 8000468:	d202      	bcs.n	8000470 <__udivmoddi4+0x154>
 800046a:	45a6      	cmp	lr, r4
 800046c:	f200 80bb 	bhi.w	80005e6 <__udivmoddi4+0x2ca>
 8000470:	4608      	mov	r0, r1
 8000472:	eba4 040e 	sub.w	r4, r4, lr
 8000476:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047a:	e79c      	b.n	80003b6 <__udivmoddi4+0x9a>
 800047c:	f1c6 0720 	rsb	r7, r6, #32
 8000480:	40b3      	lsls	r3, r6
 8000482:	fa22 fc07 	lsr.w	ip, r2, r7
 8000486:	ea4c 0c03 	orr.w	ip, ip, r3
 800048a:	fa20 f407 	lsr.w	r4, r0, r7
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	431c      	orrs	r4, r3
 8000494:	40f9      	lsrs	r1, r7
 8000496:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049a:	fa00 f306 	lsl.w	r3, r0, r6
 800049e:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a2:	0c20      	lsrs	r0, r4, #16
 80004a4:	fa1f fe8c 	uxth.w	lr, ip
 80004a8:	fb09 1118 	mls	r1, r9, r8, r1
 80004ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b0:	fb08 f00e 	mul.w	r0, r8, lr
 80004b4:	4288      	cmp	r0, r1
 80004b6:	fa02 f206 	lsl.w	r2, r2, r6
 80004ba:	d90b      	bls.n	80004d4 <__udivmoddi4+0x1b8>
 80004bc:	eb1c 0101 	adds.w	r1, ip, r1
 80004c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c4:	f080 8088 	bcs.w	80005d8 <__udivmoddi4+0x2bc>
 80004c8:	4288      	cmp	r0, r1
 80004ca:	f240 8085 	bls.w	80005d8 <__udivmoddi4+0x2bc>
 80004ce:	f1a8 0802 	sub.w	r8, r8, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	1a09      	subs	r1, r1, r0
 80004d6:	b2a4      	uxth	r4, r4
 80004d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80004dc:	fb09 1110 	mls	r1, r9, r0, r1
 80004e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80004e8:	458e      	cmp	lr, r1
 80004ea:	d908      	bls.n	80004fe <__udivmoddi4+0x1e2>
 80004ec:	eb1c 0101 	adds.w	r1, ip, r1
 80004f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f4:	d26c      	bcs.n	80005d0 <__udivmoddi4+0x2b4>
 80004f6:	458e      	cmp	lr, r1
 80004f8:	d96a      	bls.n	80005d0 <__udivmoddi4+0x2b4>
 80004fa:	3802      	subs	r0, #2
 80004fc:	4461      	add	r1, ip
 80004fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000502:	fba0 9402 	umull	r9, r4, r0, r2
 8000506:	eba1 010e 	sub.w	r1, r1, lr
 800050a:	42a1      	cmp	r1, r4
 800050c:	46c8      	mov	r8, r9
 800050e:	46a6      	mov	lr, r4
 8000510:	d356      	bcc.n	80005c0 <__udivmoddi4+0x2a4>
 8000512:	d053      	beq.n	80005bc <__udivmoddi4+0x2a0>
 8000514:	b15d      	cbz	r5, 800052e <__udivmoddi4+0x212>
 8000516:	ebb3 0208 	subs.w	r2, r3, r8
 800051a:	eb61 010e 	sbc.w	r1, r1, lr
 800051e:	fa01 f707 	lsl.w	r7, r1, r7
 8000522:	fa22 f306 	lsr.w	r3, r2, r6
 8000526:	40f1      	lsrs	r1, r6
 8000528:	431f      	orrs	r7, r3
 800052a:	e9c5 7100 	strd	r7, r1, [r5]
 800052e:	2600      	movs	r6, #0
 8000530:	4631      	mov	r1, r6
 8000532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000536:	f1c2 0320 	rsb	r3, r2, #32
 800053a:	40d8      	lsrs	r0, r3
 800053c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000540:	fa21 f303 	lsr.w	r3, r1, r3
 8000544:	4091      	lsls	r1, r2
 8000546:	4301      	orrs	r1, r0
 8000548:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800054c:	fa1f fe8c 	uxth.w	lr, ip
 8000550:	fbb3 f0f7 	udiv	r0, r3, r7
 8000554:	fb07 3610 	mls	r6, r7, r0, r3
 8000558:	0c0b      	lsrs	r3, r1, #16
 800055a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800055e:	fb00 f60e 	mul.w	r6, r0, lr
 8000562:	429e      	cmp	r6, r3
 8000564:	fa04 f402 	lsl.w	r4, r4, r2
 8000568:	d908      	bls.n	800057c <__udivmoddi4+0x260>
 800056a:	eb1c 0303 	adds.w	r3, ip, r3
 800056e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000572:	d22f      	bcs.n	80005d4 <__udivmoddi4+0x2b8>
 8000574:	429e      	cmp	r6, r3
 8000576:	d92d      	bls.n	80005d4 <__udivmoddi4+0x2b8>
 8000578:	3802      	subs	r0, #2
 800057a:	4463      	add	r3, ip
 800057c:	1b9b      	subs	r3, r3, r6
 800057e:	b289      	uxth	r1, r1
 8000580:	fbb3 f6f7 	udiv	r6, r3, r7
 8000584:	fb07 3316 	mls	r3, r7, r6, r3
 8000588:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800058c:	fb06 f30e 	mul.w	r3, r6, lr
 8000590:	428b      	cmp	r3, r1
 8000592:	d908      	bls.n	80005a6 <__udivmoddi4+0x28a>
 8000594:	eb1c 0101 	adds.w	r1, ip, r1
 8000598:	f106 38ff 	add.w	r8, r6, #4294967295
 800059c:	d216      	bcs.n	80005cc <__udivmoddi4+0x2b0>
 800059e:	428b      	cmp	r3, r1
 80005a0:	d914      	bls.n	80005cc <__udivmoddi4+0x2b0>
 80005a2:	3e02      	subs	r6, #2
 80005a4:	4461      	add	r1, ip
 80005a6:	1ac9      	subs	r1, r1, r3
 80005a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005ac:	e738      	b.n	8000420 <__udivmoddi4+0x104>
 80005ae:	462e      	mov	r6, r5
 80005b0:	4628      	mov	r0, r5
 80005b2:	e705      	b.n	80003c0 <__udivmoddi4+0xa4>
 80005b4:	4606      	mov	r6, r0
 80005b6:	e6e3      	b.n	8000380 <__udivmoddi4+0x64>
 80005b8:	4618      	mov	r0, r3
 80005ba:	e6f8      	b.n	80003ae <__udivmoddi4+0x92>
 80005bc:	454b      	cmp	r3, r9
 80005be:	d2a9      	bcs.n	8000514 <__udivmoddi4+0x1f8>
 80005c0:	ebb9 0802 	subs.w	r8, r9, r2
 80005c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005c8:	3801      	subs	r0, #1
 80005ca:	e7a3      	b.n	8000514 <__udivmoddi4+0x1f8>
 80005cc:	4646      	mov	r6, r8
 80005ce:	e7ea      	b.n	80005a6 <__udivmoddi4+0x28a>
 80005d0:	4620      	mov	r0, r4
 80005d2:	e794      	b.n	80004fe <__udivmoddi4+0x1e2>
 80005d4:	4640      	mov	r0, r8
 80005d6:	e7d1      	b.n	800057c <__udivmoddi4+0x260>
 80005d8:	46d0      	mov	r8, sl
 80005da:	e77b      	b.n	80004d4 <__udivmoddi4+0x1b8>
 80005dc:	3b02      	subs	r3, #2
 80005de:	4461      	add	r1, ip
 80005e0:	e732      	b.n	8000448 <__udivmoddi4+0x12c>
 80005e2:	4630      	mov	r0, r6
 80005e4:	e709      	b.n	80003fa <__udivmoddi4+0xde>
 80005e6:	4464      	add	r4, ip
 80005e8:	3802      	subs	r0, #2
 80005ea:	e742      	b.n	8000472 <__udivmoddi4+0x156>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f4:	f001 fa14 	bl	8001a20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f8:	f000 f820 	bl	800063c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80005fc:	f000 f8ac 	bl	8000758 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000600:	f000 fb84 	bl	8000d0c <MX_GPIO_Init>
  MX_FMC_Init();
 8000604:	f000 fb34 	bl	8000c70 <MX_FMC_Init>
  MX_I2C4_Init();
 8000608:	f000 f8da 	bl	80007c0 <MX_I2C4_Init>
  MX_I2S6_Init();
 800060c:	f000 f918 	bl	8000840 <MX_I2S6_Init>
  MX_LTDC_Init();
 8000610:	f000 f94a 	bl	80008a8 <MX_LTDC_Init>
  MX_OCTOSPI1_Init();
 8000614:	f000 f9fa 	bl	8000a0c <MX_OCTOSPI1_Init>
  MX_RTC_Init();
 8000618:	f000 fa5e 	bl	8000ad8 <MX_RTC_Init>
//  MX_SDMMC1_SD_Init();
  MX_SPI2_Init();
 800061c:	f000 fa86 	bl	8000b2c <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8000620:	f000 fada 	bl	8000bd8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  //Toggle USER_LED1
	  HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_11);
 8000624:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000628:	4803      	ldr	r0, [pc, #12]	; (8000638 <main+0x48>)
 800062a:	f001 fd5c 	bl	80020e6 <HAL_GPIO_TogglePin>
	  //Delay for 1sec
	  HAL_Delay(1000);
 800062e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000632:	f001 fa87 	bl	8001b44 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_11);
 8000636:	e7f5      	b.n	8000624 <main+0x34>
 8000638:	58021800 	.word	0x58021800

0800063c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b09c      	sub	sp, #112	; 0x70
 8000640:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000642:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000646:	224c      	movs	r2, #76	; 0x4c
 8000648:	2100      	movs	r1, #0
 800064a:	4618      	mov	r0, r3
 800064c:	f007 feee 	bl	800842c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000650:	1d3b      	adds	r3, r7, #4
 8000652:	2220      	movs	r2, #32
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f007 fee8 	bl	800842c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800065c:	2004      	movs	r0, #4
 800065e:	f003 f911 	bl	8003884 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000662:	2300      	movs	r3, #0
 8000664:	603b      	str	r3, [r7, #0]
 8000666:	4b3a      	ldr	r3, [pc, #232]	; (8000750 <SystemClock_Config+0x114>)
 8000668:	699b      	ldr	r3, [r3, #24]
 800066a:	4a39      	ldr	r2, [pc, #228]	; (8000750 <SystemClock_Config+0x114>)
 800066c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000670:	6193      	str	r3, [r2, #24]
 8000672:	4b37      	ldr	r3, [pc, #220]	; (8000750 <SystemClock_Config+0x114>)
 8000674:	699b      	ldr	r3, [r3, #24]
 8000676:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800067a:	603b      	str	r3, [r7, #0]
 800067c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800067e:	bf00      	nop
 8000680:	4b33      	ldr	r3, [pc, #204]	; (8000750 <SystemClock_Config+0x114>)
 8000682:	699b      	ldr	r3, [r3, #24]
 8000684:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000688:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800068c:	d1f8      	bne.n	8000680 <SystemClock_Config+0x44>
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800068e:	f003 f8e9 	bl	8003864 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000692:	4b30      	ldr	r3, [pc, #192]	; (8000754 <SystemClock_Config+0x118>)
 8000694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000696:	4a2f      	ldr	r2, [pc, #188]	; (8000754 <SystemClock_Config+0x118>)
 8000698:	f023 0318 	bic.w	r3, r3, #24
 800069c:	6713      	str	r3, [r2, #112]	; 0x70
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800069e:	4b2d      	ldr	r3, [pc, #180]	; (8000754 <SystemClock_Config+0x118>)
 80006a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006a2:	f023 0303 	bic.w	r3, r3, #3
 80006a6:	4a2b      	ldr	r2, [pc, #172]	; (8000754 <SystemClock_Config+0x118>)
 80006a8:	f043 0302 	orr.w	r3, r3, #2
 80006ac:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 80006ae:	2307      	movs	r3, #7
 80006b0:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006b6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006b8:	2301      	movs	r3, #1
 80006ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80006bc:	2301      	movs	r3, #1
 80006be:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006c0:	2340      	movs	r3, #64	; 0x40
 80006c2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c4:	2302      	movs	r3, #2
 80006c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006c8:	2302      	movs	r3, #2
 80006ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80006cc:	230c      	movs	r3, #12
 80006ce:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 280;
 80006d0:	f44f 738c 	mov.w	r3, #280	; 0x118
 80006d4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006d6:	2302      	movs	r3, #2
 80006d8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80006da:	2303      	movs	r3, #3
 80006dc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 4;
 80006de:	2304      	movs	r3, #4
 80006e0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 80006e2:	2304      	movs	r3, #4
 80006e4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006e6:	2300      	movs	r3, #0
 80006e8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006ea:	2300      	movs	r3, #0
 80006ec:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006f2:	4618      	mov	r0, r3
 80006f4:	f003 f920 	bl	8003938 <HAL_RCC_OscConfig>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006fe:	f000 fc53 	bl	8000fa8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000702:	233f      	movs	r3, #63	; 0x3f
 8000704:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000706:	2303      	movs	r3, #3
 8000708:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800070a:	2300      	movs	r3, #0
 800070c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800070e:	2308      	movs	r3, #8
 8000710:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000712:	2340      	movs	r3, #64	; 0x40
 8000714:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000716:	2340      	movs	r3, #64	; 0x40
 8000718:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800071a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800071e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000720:	2340      	movs	r3, #64	; 0x40
 8000722:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000724:	1d3b      	adds	r3, r7, #4
 8000726:	2103      	movs	r1, #3
 8000728:	4618      	mov	r0, r3
 800072a:	f003 fd09 	bl	8004140 <HAL_RCC_ClockConfig>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8000734:	f000 fc38 	bl	8000fa8 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1);
 8000738:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800073c:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 8000740:	2000      	movs	r0, #0
 8000742:	f003 feb3 	bl	80044ac <HAL_RCC_MCOConfig>
}
 8000746:	bf00      	nop
 8000748:	3770      	adds	r7, #112	; 0x70
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	58024800 	.word	0x58024800
 8000754:	58024400 	.word	0x58024400

08000758 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b0ae      	sub	sp, #184	; 0xb8
 800075c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800075e:	463b      	mov	r3, r7
 8000760:	22b8      	movs	r2, #184	; 0xb8
 8000762:	2100      	movs	r1, #0
 8000764:	4618      	mov	r0, r3
 8000766:	f007 fe61 	bl	800842c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC|RCC_PERIPHCLK_OSPI
 800076a:	4b14      	ldr	r3, [pc, #80]	; (80007bc <PeriphCommonClock_Config+0x64>)
 800076c:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_CKPER;
  PeriphClkInitStruct.PLL2.PLL2M = 12;
 800076e:	230c      	movs	r3, #12
 8000770:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 200;
 8000772:	23c8      	movs	r3, #200	; 0xc8
 8000774:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000776:	2302      	movs	r3, #2
 8000778:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800077a:	2302      	movs	r3, #2
 800077c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 4;
 800077e:	2304      	movs	r3, #4
 8000780:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 8000782:	2340      	movs	r3, #64	; 0x40
 8000784:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000786:	2300      	movs	r3, #0
 8000788:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800078a:	2300      	movs	r3, #0
 800078c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_PLL2;
 800078e:	2302      	movs	r3, #2
 8000790:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_PLL2;
 8000792:	2320      	movs	r3, #32
 8000794:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8000796:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800079a:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 800079c:	2300      	movs	r3, #0
 800079e:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007a0:	463b      	mov	r3, r7
 80007a2:	4618      	mov	r0, r3
 80007a4:	f004 f8c2 	bl	800492c <HAL_RCCEx_PeriphCLKConfig>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <PeriphCommonClock_Config+0x5a>
  {
    Error_Handler();
 80007ae:	f000 fbfb 	bl	8000fa8 <Error_Handler>
  }
}
 80007b2:	bf00      	nop
 80007b4:	37b8      	adds	r7, #184	; 0xb8
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	83010000 	.word	0x83010000

080007c0 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80007c4:	4b1b      	ldr	r3, [pc, #108]	; (8000834 <MX_I2C4_Init+0x74>)
 80007c6:	4a1c      	ldr	r2, [pc, #112]	; (8000838 <MX_I2C4_Init+0x78>)
 80007c8:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0xC010151E;
 80007ca:	4b1a      	ldr	r3, [pc, #104]	; (8000834 <MX_I2C4_Init+0x74>)
 80007cc:	4a1b      	ldr	r2, [pc, #108]	; (800083c <MX_I2C4_Init+0x7c>)
 80007ce:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80007d0:	4b18      	ldr	r3, [pc, #96]	; (8000834 <MX_I2C4_Init+0x74>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007d6:	4b17      	ldr	r3, [pc, #92]	; (8000834 <MX_I2C4_Init+0x74>)
 80007d8:	2201      	movs	r2, #1
 80007da:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007dc:	4b15      	ldr	r3, [pc, #84]	; (8000834 <MX_I2C4_Init+0x74>)
 80007de:	2200      	movs	r2, #0
 80007e0:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80007e2:	4b14      	ldr	r3, [pc, #80]	; (8000834 <MX_I2C4_Init+0x74>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007e8:	4b12      	ldr	r3, [pc, #72]	; (8000834 <MX_I2C4_Init+0x74>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007ee:	4b11      	ldr	r3, [pc, #68]	; (8000834 <MX_I2C4_Init+0x74>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007f4:	4b0f      	ldr	r3, [pc, #60]	; (8000834 <MX_I2C4_Init+0x74>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80007fa:	480e      	ldr	r0, [pc, #56]	; (8000834 <MX_I2C4_Init+0x74>)
 80007fc:	f001 fc8e 	bl	800211c <HAL_I2C_Init>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000806:	f000 fbcf 	bl	8000fa8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800080a:	2100      	movs	r1, #0
 800080c:	4809      	ldr	r0, [pc, #36]	; (8000834 <MX_I2C4_Init+0x74>)
 800080e:	f001 fd15 	bl	800223c <HAL_I2CEx_ConfigAnalogFilter>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000818:	f000 fbc6 	bl	8000fa8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 800081c:	2100      	movs	r1, #0
 800081e:	4805      	ldr	r0, [pc, #20]	; (8000834 <MX_I2C4_Init+0x74>)
 8000820:	f001 fd57 	bl	80022d2 <HAL_I2CEx_ConfigDigitalFilter>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 800082a:	f000 fbbd 	bl	8000fa8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 800082e:	bf00      	nop
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	2400002c 	.word	0x2400002c
 8000838:	58001c00 	.word	0x58001c00
 800083c:	c010151e 	.word	0xc010151e

08000840 <MX_I2S6_Init>:
  * @brief I2S6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S6_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE END I2S6_Init 0 */

  /* USER CODE BEGIN I2S6_Init 1 */

  /* USER CODE END I2S6_Init 1 */
  hi2s6.Instance = SPI6;
 8000844:	4b16      	ldr	r3, [pc, #88]	; (80008a0 <MX_I2S6_Init+0x60>)
 8000846:	4a17      	ldr	r2, [pc, #92]	; (80008a4 <MX_I2S6_Init+0x64>)
 8000848:	601a      	str	r2, [r3, #0]
  hi2s6.Init.Mode = I2S_MODE_MASTER_FULLDUPLEX;
 800084a:	4b15      	ldr	r3, [pc, #84]	; (80008a0 <MX_I2S6_Init+0x60>)
 800084c:	220a      	movs	r2, #10
 800084e:	605a      	str	r2, [r3, #4]
  hi2s6.Init.Standard = I2S_STANDARD_PHILIPS;
 8000850:	4b13      	ldr	r3, [pc, #76]	; (80008a0 <MX_I2S6_Init+0x60>)
 8000852:	2200      	movs	r2, #0
 8000854:	609a      	str	r2, [r3, #8]
  hi2s6.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000856:	4b12      	ldr	r3, [pc, #72]	; (80008a0 <MX_I2S6_Init+0x60>)
 8000858:	2200      	movs	r2, #0
 800085a:	60da      	str	r2, [r3, #12]
  hi2s6.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800085c:	4b10      	ldr	r3, [pc, #64]	; (80008a0 <MX_I2S6_Init+0x60>)
 800085e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000862:	611a      	str	r2, [r3, #16]
  hi2s6.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8000864:	4b0e      	ldr	r3, [pc, #56]	; (80008a0 <MX_I2S6_Init+0x60>)
 8000866:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800086a:	615a      	str	r2, [r3, #20]
  hi2s6.Init.CPOL = I2S_CPOL_LOW;
 800086c:	4b0c      	ldr	r3, [pc, #48]	; (80008a0 <MX_I2S6_Init+0x60>)
 800086e:	2200      	movs	r2, #0
 8000870:	619a      	str	r2, [r3, #24]
  hi2s6.Init.FirstBit = I2S_FIRSTBIT_MSB;
 8000872:	4b0b      	ldr	r3, [pc, #44]	; (80008a0 <MX_I2S6_Init+0x60>)
 8000874:	2200      	movs	r2, #0
 8000876:	61da      	str	r2, [r3, #28]
  hi2s6.Init.WSInversion = I2S_WS_INVERSION_DISABLE;
 8000878:	4b09      	ldr	r3, [pc, #36]	; (80008a0 <MX_I2S6_Init+0x60>)
 800087a:	2200      	movs	r2, #0
 800087c:	621a      	str	r2, [r3, #32]
  hi2s6.Init.Data24BitAlignment = I2S_DATA_24BIT_ALIGNMENT_RIGHT;
 800087e:	4b08      	ldr	r3, [pc, #32]	; (80008a0 <MX_I2S6_Init+0x60>)
 8000880:	2200      	movs	r2, #0
 8000882:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s6.Init.MasterKeepIOState = I2S_MASTER_KEEP_IO_STATE_DISABLE;
 8000884:	4b06      	ldr	r3, [pc, #24]	; (80008a0 <MX_I2S6_Init+0x60>)
 8000886:	2200      	movs	r2, #0
 8000888:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_I2S_Init(&hi2s6) != HAL_OK)
 800088a:	4805      	ldr	r0, [pc, #20]	; (80008a0 <MX_I2S6_Init+0x60>)
 800088c:	f001 fd6e 	bl	800236c <HAL_I2S_Init>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_I2S6_Init+0x5a>
  {
    Error_Handler();
 8000896:	f000 fb87 	bl	8000fa8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S6_Init 2 */

  /* USER CODE END I2S6_Init 2 */

}
 800089a:	bf00      	nop
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	24000078 	.word	0x24000078
 80008a4:	58001400 	.word	0x58001400

080008a8 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b09a      	sub	sp, #104	; 0x68
 80008ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80008ae:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80008b2:	2234      	movs	r2, #52	; 0x34
 80008b4:	2100      	movs	r1, #0
 80008b6:	4618      	mov	r0, r3
 80008b8:	f007 fdb8 	bl	800842c <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 80008bc:	463b      	mov	r3, r7
 80008be:	2234      	movs	r2, #52	; 0x34
 80008c0:	2100      	movs	r1, #0
 80008c2:	4618      	mov	r0, r3
 80008c4:	f007 fdb2 	bl	800842c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80008c8:	4b4e      	ldr	r3, [pc, #312]	; (8000a04 <MX_LTDC_Init+0x15c>)
 80008ca:	4a4f      	ldr	r2, [pc, #316]	; (8000a08 <MX_LTDC_Init+0x160>)
 80008cc:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80008ce:	4b4d      	ldr	r3, [pc, #308]	; (8000a04 <MX_LTDC_Init+0x15c>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80008d4:	4b4b      	ldr	r3, [pc, #300]	; (8000a04 <MX_LTDC_Init+0x15c>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80008da:	4b4a      	ldr	r3, [pc, #296]	; (8000a04 <MX_LTDC_Init+0x15c>)
 80008dc:	2200      	movs	r2, #0
 80008de:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80008e0:	4b48      	ldr	r3, [pc, #288]	; (8000a04 <MX_LTDC_Init+0x15c>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 0;
 80008e6:	4b47      	ldr	r3, [pc, #284]	; (8000a04 <MX_LTDC_Init+0x15c>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 80008ec:	4b45      	ldr	r3, [pc, #276]	; (8000a04 <MX_LTDC_Init+0x15c>)
 80008ee:	2209      	movs	r2, #9
 80008f0:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 43;
 80008f2:	4b44      	ldr	r3, [pc, #272]	; (8000a04 <MX_LTDC_Init+0x15c>)
 80008f4:	222b      	movs	r2, #43	; 0x2b
 80008f6:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 21;
 80008f8:	4b42      	ldr	r3, [pc, #264]	; (8000a04 <MX_LTDC_Init+0x15c>)
 80008fa:	2215      	movs	r2, #21
 80008fc:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 523;
 80008fe:	4b41      	ldr	r3, [pc, #260]	; (8000a04 <MX_LTDC_Init+0x15c>)
 8000900:	f240 220b 	movw	r2, #523	; 0x20b
 8000904:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 293;
 8000906:	4b3f      	ldr	r3, [pc, #252]	; (8000a04 <MX_LTDC_Init+0x15c>)
 8000908:	f240 1225 	movw	r2, #293	; 0x125
 800090c:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 531;
 800090e:	4b3d      	ldr	r3, [pc, #244]	; (8000a04 <MX_LTDC_Init+0x15c>)
 8000910:	f240 2213 	movw	r2, #531	; 0x213
 8000914:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 297;
 8000916:	4b3b      	ldr	r3, [pc, #236]	; (8000a04 <MX_LTDC_Init+0x15c>)
 8000918:	f240 1229 	movw	r2, #297	; 0x129
 800091c:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800091e:	4b39      	ldr	r3, [pc, #228]	; (8000a04 <MX_LTDC_Init+0x15c>)
 8000920:	2200      	movs	r2, #0
 8000922:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000926:	4b37      	ldr	r3, [pc, #220]	; (8000a04 <MX_LTDC_Init+0x15c>)
 8000928:	2200      	movs	r2, #0
 800092a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800092e:	4b35      	ldr	r3, [pc, #212]	; (8000a04 <MX_LTDC_Init+0x15c>)
 8000930:	2200      	movs	r2, #0
 8000932:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000936:	4833      	ldr	r0, [pc, #204]	; (8000a04 <MX_LTDC_Init+0x15c>)
 8000938:	f001 fe44 	bl	80025c4 <HAL_LTDC_Init>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8000942:	f000 fb31 	bl	8000fa8 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000946:	2300      	movs	r3, #0
 8000948:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 800094a:	2300      	movs	r3, #0
 800094c:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 800094e:	2300      	movs	r3, #0
 8000950:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 8000952:	2300      	movs	r3, #0
 8000954:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000956:	2300      	movs	r3, #0
 8000958:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 800095a:	2300      	movs	r3, #0
 800095c:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 800095e:	2300      	movs	r3, #0
 8000960:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000962:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000966:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000968:	2305      	movs	r3, #5
 800096a:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 800096c:	2300      	movs	r3, #0
 800096e:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 8000970:	2300      	movs	r3, #0
 8000972:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 8000974:	2300      	movs	r3, #0
 8000976:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8000978:	2300      	movs	r3, #0
 800097a:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 800097e:	2300      	movs	r3, #0
 8000980:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8000984:	2300      	movs	r3, #0
 8000986:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800098a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800098e:	2200      	movs	r2, #0
 8000990:	4619      	mov	r1, r3
 8000992:	481c      	ldr	r0, [pc, #112]	; (8000a04 <MX_LTDC_Init+0x15c>)
 8000994:	f001 fee6 	bl	8002764 <HAL_LTDC_ConfigLayer>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 800099e:	f000 fb03 	bl	8000fa8 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 80009a2:	2300      	movs	r3, #0
 80009a4:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 80009a6:	2300      	movs	r3, #0
 80009a8:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 80009aa:	2300      	movs	r3, #0
 80009ac:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 80009ae:	2300      	movs	r3, #0
 80009b0:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80009b2:	2300      	movs	r3, #0
 80009b4:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 80009b6:	2300      	movs	r3, #0
 80009b8:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 80009ba:	2300      	movs	r3, #0
 80009bc:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80009be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009c2:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80009c4:	2305      	movs	r3, #5
 80009c6:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 80009c8:	2300      	movs	r3, #0
 80009ca:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 80009cc:	2300      	movs	r3, #0
 80009ce:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 80009d0:	2300      	movs	r3, #0
 80009d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 80009d4:	2300      	movs	r3, #0
 80009d6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 80009da:	2300      	movs	r3, #0
 80009dc:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 80009e0:	2300      	movs	r3, #0
 80009e2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 80009e6:	463b      	mov	r3, r7
 80009e8:	2201      	movs	r2, #1
 80009ea:	4619      	mov	r1, r3
 80009ec:	4805      	ldr	r0, [pc, #20]	; (8000a04 <MX_LTDC_Init+0x15c>)
 80009ee:	f001 feb9 	bl	8002764 <HAL_LTDC_ConfigLayer>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 80009f8:	f000 fad6 	bl	8000fa8 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80009fc:	bf00      	nop
 80009fe:	3768      	adds	r7, #104	; 0x68
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	240000cc 	.word	0x240000cc
 8000a08:	50001000 	.word	0x50001000

08000a0c <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b086      	sub	sp, #24
 8000a10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 8000a12:	463b      	mov	r3, r7
 8000a14:	2200      	movs	r2, #0
 8000a16:	601a      	str	r2, [r3, #0]
 8000a18:	605a      	str	r2, [r3, #4]
 8000a1a:	609a      	str	r2, [r3, #8]
 8000a1c:	60da      	str	r2, [r3, #12]
 8000a1e:	611a      	str	r2, [r3, #16]
 8000a20:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 8000a22:	4b2a      	ldr	r3, [pc, #168]	; (8000acc <MX_OCTOSPI1_Init+0xc0>)
 8000a24:	4a2a      	ldr	r2, [pc, #168]	; (8000ad0 <MX_OCTOSPI1_Init+0xc4>)
 8000a26:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 8000a28:	4b28      	ldr	r3, [pc, #160]	; (8000acc <MX_OCTOSPI1_Init+0xc0>)
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8000a2e:	4b27      	ldr	r3, [pc, #156]	; (8000acc <MX_OCTOSPI1_Init+0xc0>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 8000a34:	4b25      	ldr	r3, [pc, #148]	; (8000acc <MX_OCTOSPI1_Init+0xc0>)
 8000a36:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000a3a:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 8000a3c:	4b23      	ldr	r3, [pc, #140]	; (8000acc <MX_OCTOSPI1_Init+0xc0>)
 8000a3e:	2220      	movs	r2, #32
 8000a40:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 8000a42:	4b22      	ldr	r3, [pc, #136]	; (8000acc <MX_OCTOSPI1_Init+0xc0>)
 8000a44:	2201      	movs	r2, #1
 8000a46:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8000a48:	4b20      	ldr	r3, [pc, #128]	; (8000acc <MX_OCTOSPI1_Init+0xc0>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8000a4e:	4b1f      	ldr	r3, [pc, #124]	; (8000acc <MX_OCTOSPI1_Init+0xc0>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8000a54:	4b1d      	ldr	r3, [pc, #116]	; (8000acc <MX_OCTOSPI1_Init+0xc0>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 1;
 8000a5a:	4b1c      	ldr	r3, [pc, #112]	; (8000acc <MX_OCTOSPI1_Init+0xc0>)
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8000a60:	4b1a      	ldr	r3, [pc, #104]	; (8000acc <MX_OCTOSPI1_Init+0xc0>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8000a66:	4b19      	ldr	r3, [pc, #100]	; (8000acc <MX_OCTOSPI1_Init+0xc0>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 8000a6c:	4b17      	ldr	r3, [pc, #92]	; (8000acc <MX_OCTOSPI1_Init+0xc0>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	631a      	str	r2, [r3, #48]	; 0x30
  hospi1.Init.ClkChipSelectHighTime = 0;
 8000a72:	4b16      	ldr	r3, [pc, #88]	; (8000acc <MX_OCTOSPI1_Init+0xc0>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	635a      	str	r2, [r3, #52]	; 0x34
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8000a78:	4b14      	ldr	r3, [pc, #80]	; (8000acc <MX_OCTOSPI1_Init+0xc0>)
 8000a7a:	2208      	movs	r2, #8
 8000a7c:	639a      	str	r2, [r3, #56]	; 0x38
  hospi1.Init.MaxTran = 0;
 8000a7e:	4b13      	ldr	r3, [pc, #76]	; (8000acc <MX_OCTOSPI1_Init+0xc0>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	63da      	str	r2, [r3, #60]	; 0x3c
  hospi1.Init.Refresh = 0;
 8000a84:	4b11      	ldr	r3, [pc, #68]	; (8000acc <MX_OCTOSPI1_Init+0xc0>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8000a8a:	4810      	ldr	r0, [pc, #64]	; (8000acc <MX_OCTOSPI1_Init+0xc0>)
 8000a8c:	f002 f842 	bl	8002b14 <HAL_OSPI_Init>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <MX_OCTOSPI1_Init+0x8e>
  {
    Error_Handler();
 8000a96:	f000 fa87 	bl	8000fa8 <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 1;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	603b      	str	r3, [r7, #0]
  sOspiManagerCfg.DQSPort = 1;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	607b      	str	r3, [r7, #4]
  sOspiManagerCfg.NCSPort = 1;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	60bb      	str	r3, [r7, #8]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_HIGH;
 8000aa6:	4b0b      	ldr	r3, [pc, #44]	; (8000ad4 <MX_OCTOSPI1_Init+0xc8>)
 8000aa8:	60fb      	str	r3, [r7, #12]
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000aaa:	463b      	mov	r3, r7
 8000aac:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4806      	ldr	r0, [pc, #24]	; (8000acc <MX_OCTOSPI1_Init+0xc0>)
 8000ab4:	f002 f8fc 	bl	8002cb0 <HAL_OSPIM_Config>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_OCTOSPI1_Init+0xb6>
  {
    Error_Handler();
 8000abe:	f000 fa73 	bl	8000fa8 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8000ac2:	bf00      	nop
 8000ac4:	3718      	adds	r7, #24
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	24000174 	.word	0x24000174
 8000ad0:	52005000 	.word	0x52005000
 8000ad4:	01000001 	.word	0x01000001

08000ad8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000adc:	4b11      	ldr	r3, [pc, #68]	; (8000b24 <MX_RTC_Init+0x4c>)
 8000ade:	4a12      	ldr	r2, [pc, #72]	; (8000b28 <MX_RTC_Init+0x50>)
 8000ae0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000ae2:	4b10      	ldr	r3, [pc, #64]	; (8000b24 <MX_RTC_Init+0x4c>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000ae8:	4b0e      	ldr	r3, [pc, #56]	; (8000b24 <MX_RTC_Init+0x4c>)
 8000aea:	227f      	movs	r2, #127	; 0x7f
 8000aec:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000aee:	4b0d      	ldr	r3, [pc, #52]	; (8000b24 <MX_RTC_Init+0x4c>)
 8000af0:	22ff      	movs	r2, #255	; 0xff
 8000af2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000af4:	4b0b      	ldr	r3, [pc, #44]	; (8000b24 <MX_RTC_Init+0x4c>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000afa:	4b0a      	ldr	r3, [pc, #40]	; (8000b24 <MX_RTC_Init+0x4c>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000b00:	4b08      	ldr	r3, [pc, #32]	; (8000b24 <MX_RTC_Init+0x4c>)
 8000b02:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b06:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000b08:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <MX_RTC_Init+0x4c>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000b0e:	4805      	ldr	r0, [pc, #20]	; (8000b24 <MX_RTC_Init+0x4c>)
 8000b10:	f005 ffba 	bl	8006a88 <HAL_RTC_Init>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8000b1a:	f000 fa45 	bl	8000fa8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000b1e:	bf00      	nop
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	240001d4 	.word	0x240001d4
 8000b28:	58004000 	.word	0x58004000

08000b2c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000b30:	4b27      	ldr	r3, [pc, #156]	; (8000bd0 <MX_SPI2_Init+0xa4>)
 8000b32:	4a28      	ldr	r2, [pc, #160]	; (8000bd4 <MX_SPI2_Init+0xa8>)
 8000b34:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000b36:	4b26      	ldr	r3, [pc, #152]	; (8000bd0 <MX_SPI2_Init+0xa4>)
 8000b38:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000b3c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000b3e:	4b24      	ldr	r3, [pc, #144]	; (8000bd0 <MX_SPI2_Init+0xa4>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000b44:	4b22      	ldr	r3, [pc, #136]	; (8000bd0 <MX_SPI2_Init+0xa4>)
 8000b46:	2203      	movs	r2, #3
 8000b48:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b4a:	4b21      	ldr	r3, [pc, #132]	; (8000bd0 <MX_SPI2_Init+0xa4>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b50:	4b1f      	ldr	r3, [pc, #124]	; (8000bd0 <MX_SPI2_Init+0xa4>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000b56:	4b1e      	ldr	r3, [pc, #120]	; (8000bd0 <MX_SPI2_Init+0xa4>)
 8000b58:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000b5c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b5e:	4b1c      	ldr	r3, [pc, #112]	; (8000bd0 <MX_SPI2_Init+0xa4>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b64:	4b1a      	ldr	r3, [pc, #104]	; (8000bd0 <MX_SPI2_Init+0xa4>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b6a:	4b19      	ldr	r3, [pc, #100]	; (8000bd0 <MX_SPI2_Init+0xa4>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b70:	4b17      	ldr	r3, [pc, #92]	; (8000bd0 <MX_SPI2_Init+0xa4>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000b76:	4b16      	ldr	r3, [pc, #88]	; (8000bd0 <MX_SPI2_Init+0xa4>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b7c:	4b14      	ldr	r3, [pc, #80]	; (8000bd0 <MX_SPI2_Init+0xa4>)
 8000b7e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b82:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000b84:	4b12      	ldr	r3, [pc, #72]	; (8000bd0 <MX_SPI2_Init+0xa4>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000b8a:	4b11      	ldr	r3, [pc, #68]	; (8000bd0 <MX_SPI2_Init+0xa4>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000b90:	4b0f      	ldr	r3, [pc, #60]	; (8000bd0 <MX_SPI2_Init+0xa4>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000b96:	4b0e      	ldr	r3, [pc, #56]	; (8000bd0 <MX_SPI2_Init+0xa4>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000b9c:	4b0c      	ldr	r3, [pc, #48]	; (8000bd0 <MX_SPI2_Init+0xa4>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000ba2:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <MX_SPI2_Init+0xa4>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000ba8:	4b09      	ldr	r3, [pc, #36]	; (8000bd0 <MX_SPI2_Init+0xa4>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000bae:	4b08      	ldr	r3, [pc, #32]	; (8000bd0 <MX_SPI2_Init+0xa4>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000bb4:	4b06      	ldr	r3, [pc, #24]	; (8000bd0 <MX_SPI2_Init+0xa4>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000bba:	4805      	ldr	r0, [pc, #20]	; (8000bd0 <MX_SPI2_Init+0xa4>)
 8000bbc:	f006 f8b6 	bl	8006d2c <HAL_SPI_Init>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 8000bc6:	f000 f9ef 	bl	8000fa8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000bca:	bf00      	nop
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	240001fc 	.word	0x240001fc
 8000bd4:	40003800 	.word	0x40003800

08000bd8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000bdc:	4b22      	ldr	r3, [pc, #136]	; (8000c68 <MX_USART1_UART_Init+0x90>)
 8000bde:	4a23      	ldr	r2, [pc, #140]	; (8000c6c <MX_USART1_UART_Init+0x94>)
 8000be0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000be2:	4b21      	ldr	r3, [pc, #132]	; (8000c68 <MX_USART1_UART_Init+0x90>)
 8000be4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000be8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bea:	4b1f      	ldr	r3, [pc, #124]	; (8000c68 <MX_USART1_UART_Init+0x90>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bf0:	4b1d      	ldr	r3, [pc, #116]	; (8000c68 <MX_USART1_UART_Init+0x90>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bf6:	4b1c      	ldr	r3, [pc, #112]	; (8000c68 <MX_USART1_UART_Init+0x90>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bfc:	4b1a      	ldr	r3, [pc, #104]	; (8000c68 <MX_USART1_UART_Init+0x90>)
 8000bfe:	220c      	movs	r2, #12
 8000c00:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c02:	4b19      	ldr	r3, [pc, #100]	; (8000c68 <MX_USART1_UART_Init+0x90>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c08:	4b17      	ldr	r3, [pc, #92]	; (8000c68 <MX_USART1_UART_Init+0x90>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c0e:	4b16      	ldr	r3, [pc, #88]	; (8000c68 <MX_USART1_UART_Init+0x90>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c14:	4b14      	ldr	r3, [pc, #80]	; (8000c68 <MX_USART1_UART_Init+0x90>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c1a:	4b13      	ldr	r3, [pc, #76]	; (8000c68 <MX_USART1_UART_Init+0x90>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c20:	4811      	ldr	r0, [pc, #68]	; (8000c68 <MX_USART1_UART_Init+0x90>)
 8000c22:	f006 f9a4 	bl	8006f6e <HAL_UART_Init>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000c2c:	f000 f9bc 	bl	8000fa8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c30:	2100      	movs	r1, #0
 8000c32:	480d      	ldr	r0, [pc, #52]	; (8000c68 <MX_USART1_UART_Init+0x90>)
 8000c34:	f007 fa46 	bl	80080c4 <HAL_UARTEx_SetTxFifoThreshold>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000c3e:	f000 f9b3 	bl	8000fa8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c42:	2100      	movs	r1, #0
 8000c44:	4808      	ldr	r0, [pc, #32]	; (8000c68 <MX_USART1_UART_Init+0x90>)
 8000c46:	f007 fa7b 	bl	8008140 <HAL_UARTEx_SetRxFifoThreshold>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000c50:	f000 f9aa 	bl	8000fa8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000c54:	4804      	ldr	r0, [pc, #16]	; (8000c68 <MX_USART1_UART_Init+0x90>)
 8000c56:	f007 f9fc 	bl	8008052 <HAL_UARTEx_DisableFifoMode>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000c60:	f000 f9a2 	bl	8000fa8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c64:	bf00      	nop
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	24000284 	.word	0x24000284
 8000c6c:	40011000 	.word	0x40011000

08000c70 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b088      	sub	sp, #32
 8000c74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000c76:	1d3b      	adds	r3, r7, #4
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]
 8000c7c:	605a      	str	r2, [r3, #4]
 8000c7e:	609a      	str	r2, [r3, #8]
 8000c80:	60da      	str	r2, [r3, #12]
 8000c82:	611a      	str	r2, [r3, #16]
 8000c84:	615a      	str	r2, [r3, #20]
 8000c86:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000c88:	4b1e      	ldr	r3, [pc, #120]	; (8000d04 <MX_FMC_Init+0x94>)
 8000c8a:	4a1f      	ldr	r2, [pc, #124]	; (8000d08 <MX_FMC_Init+0x98>)
 8000c8c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000c8e:	4b1d      	ldr	r3, [pc, #116]	; (8000d04 <MX_FMC_Init+0x94>)
 8000c90:	2201      	movs	r2, #1
 8000c92:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000c94:	4b1b      	ldr	r3, [pc, #108]	; (8000d04 <MX_FMC_Init+0x94>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000c9a:	4b1a      	ldr	r3, [pc, #104]	; (8000d04 <MX_FMC_Init+0x94>)
 8000c9c:	2204      	movs	r2, #4
 8000c9e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000ca0:	4b18      	ldr	r3, [pc, #96]	; (8000d04 <MX_FMC_Init+0x94>)
 8000ca2:	2210      	movs	r2, #16
 8000ca4:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000ca6:	4b17      	ldr	r3, [pc, #92]	; (8000d04 <MX_FMC_Init+0x94>)
 8000ca8:	2240      	movs	r2, #64	; 0x40
 8000caa:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8000cac:	4b15      	ldr	r3, [pc, #84]	; (8000d04 <MX_FMC_Init+0x94>)
 8000cae:	2280      	movs	r2, #128	; 0x80
 8000cb0:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000cb2:	4b14      	ldr	r3, [pc, #80]	; (8000d04 <MX_FMC_Init+0x94>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8000cb8:	4b12      	ldr	r3, [pc, #72]	; (8000d04 <MX_FMC_Init+0x94>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000cbe:	4b11      	ldr	r3, [pc, #68]	; (8000d04 <MX_FMC_Init+0x94>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000cc4:	4b0f      	ldr	r3, [pc, #60]	; (8000d04 <MX_FMC_Init+0x94>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8000cca:	2310      	movs	r3, #16
 8000ccc:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8000cce:	2310      	movs	r3, #16
 8000cd0:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 8000cd2:	2310      	movs	r3, #16
 8000cd4:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 8000cd6:	2310      	movs	r3, #16
 8000cd8:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8000cda:	2310      	movs	r3, #16
 8000cdc:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 8000cde:	2310      	movs	r3, #16
 8000ce0:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 8000ce2:	2310      	movs	r3, #16
 8000ce4:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000ce6:	1d3b      	adds	r3, r7, #4
 8000ce8:	4619      	mov	r1, r3
 8000cea:	4806      	ldr	r0, [pc, #24]	; (8000d04 <MX_FMC_Init+0x94>)
 8000cec:	f005 ffe2 	bl	8006cb4 <HAL_SDRAM_Init>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 8000cf6:	f000 f957 	bl	8000fa8 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000cfa:	bf00      	nop
 8000cfc:	3720      	adds	r7, #32
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	24000314 	.word	0x24000314
 8000d08:	52004140 	.word	0x52004140

08000d0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b090      	sub	sp, #64	; 0x40
 8000d10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d16:	2200      	movs	r2, #0
 8000d18:	601a      	str	r2, [r3, #0]
 8000d1a:	605a      	str	r2, [r3, #4]
 8000d1c:	609a      	str	r2, [r3, #8]
 8000d1e:	60da      	str	r2, [r3, #12]
 8000d20:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000d22:	4b9b      	ldr	r3, [pc, #620]	; (8000f90 <MX_GPIO_Init+0x284>)
 8000d24:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d28:	4a99      	ldr	r2, [pc, #612]	; (8000f90 <MX_GPIO_Init+0x284>)
 8000d2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d2e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000d32:	4b97      	ldr	r3, [pc, #604]	; (8000f90 <MX_GPIO_Init+0x284>)
 8000d34:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8000d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d40:	4b93      	ldr	r3, [pc, #588]	; (8000f90 <MX_GPIO_Init+0x284>)
 8000d42:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d46:	4a92      	ldr	r2, [pc, #584]	; (8000f90 <MX_GPIO_Init+0x284>)
 8000d48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d4c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000d50:	4b8f      	ldr	r3, [pc, #572]	; (8000f90 <MX_GPIO_Init+0x284>)
 8000d52:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d5a:	627b      	str	r3, [r7, #36]	; 0x24
 8000d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000d5e:	4b8c      	ldr	r3, [pc, #560]	; (8000f90 <MX_GPIO_Init+0x284>)
 8000d60:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d64:	4a8a      	ldr	r2, [pc, #552]	; (8000f90 <MX_GPIO_Init+0x284>)
 8000d66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d6a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000d6e:	4b88      	ldr	r3, [pc, #544]	; (8000f90 <MX_GPIO_Init+0x284>)
 8000d70:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d78:	623b      	str	r3, [r7, #32]
 8000d7a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d7c:	4b84      	ldr	r3, [pc, #528]	; (8000f90 <MX_GPIO_Init+0x284>)
 8000d7e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d82:	4a83      	ldr	r2, [pc, #524]	; (8000f90 <MX_GPIO_Init+0x284>)
 8000d84:	f043 0308 	orr.w	r3, r3, #8
 8000d88:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000d8c:	4b80      	ldr	r3, [pc, #512]	; (8000f90 <MX_GPIO_Init+0x284>)
 8000d8e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d92:	f003 0308 	and.w	r3, r3, #8
 8000d96:	61fb      	str	r3, [r7, #28]
 8000d98:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d9a:	4b7d      	ldr	r3, [pc, #500]	; (8000f90 <MX_GPIO_Init+0x284>)
 8000d9c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000da0:	4a7b      	ldr	r2, [pc, #492]	; (8000f90 <MX_GPIO_Init+0x284>)
 8000da2:	f043 0304 	orr.w	r3, r3, #4
 8000da6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000daa:	4b79      	ldr	r3, [pc, #484]	; (8000f90 <MX_GPIO_Init+0x284>)
 8000dac:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000db0:	f003 0304 	and.w	r3, r3, #4
 8000db4:	61bb      	str	r3, [r7, #24]
 8000db6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000db8:	4b75      	ldr	r3, [pc, #468]	; (8000f90 <MX_GPIO_Init+0x284>)
 8000dba:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000dbe:	4a74      	ldr	r2, [pc, #464]	; (8000f90 <MX_GPIO_Init+0x284>)
 8000dc0:	f043 0310 	orr.w	r3, r3, #16
 8000dc4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000dc8:	4b71      	ldr	r3, [pc, #452]	; (8000f90 <MX_GPIO_Init+0x284>)
 8000dca:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000dce:	f003 0310 	and.w	r3, r3, #16
 8000dd2:	617b      	str	r3, [r7, #20]
 8000dd4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd6:	4b6e      	ldr	r3, [pc, #440]	; (8000f90 <MX_GPIO_Init+0x284>)
 8000dd8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ddc:	4a6c      	ldr	r2, [pc, #432]	; (8000f90 <MX_GPIO_Init+0x284>)
 8000dde:	f043 0302 	orr.w	r3, r3, #2
 8000de2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000de6:	4b6a      	ldr	r3, [pc, #424]	; (8000f90 <MX_GPIO_Init+0x284>)
 8000de8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000dec:	f003 0302 	and.w	r3, r3, #2
 8000df0:	613b      	str	r3, [r7, #16]
 8000df2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000df4:	4b66      	ldr	r3, [pc, #408]	; (8000f90 <MX_GPIO_Init+0x284>)
 8000df6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000dfa:	4a65      	ldr	r2, [pc, #404]	; (8000f90 <MX_GPIO_Init+0x284>)
 8000dfc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e00:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e04:	4b62      	ldr	r3, [pc, #392]	; (8000f90 <MX_GPIO_Init+0x284>)
 8000e06:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e0e:	60fb      	str	r3, [r7, #12]
 8000e10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e12:	4b5f      	ldr	r3, [pc, #380]	; (8000f90 <MX_GPIO_Init+0x284>)
 8000e14:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e18:	4a5d      	ldr	r2, [pc, #372]	; (8000f90 <MX_GPIO_Init+0x284>)
 8000e1a:	f043 0301 	orr.w	r3, r3, #1
 8000e1e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e22:	4b5b      	ldr	r3, [pc, #364]	; (8000f90 <MX_GPIO_Init+0x284>)
 8000e24:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e28:	f003 0301 	and.w	r3, r3, #1
 8000e2c:	60bb      	str	r3, [r7, #8]
 8000e2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e30:	4b57      	ldr	r3, [pc, #348]	; (8000f90 <MX_GPIO_Init+0x284>)
 8000e32:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e36:	4a56      	ldr	r2, [pc, #344]	; (8000f90 <MX_GPIO_Init+0x284>)
 8000e38:	f043 0320 	orr.w	r3, r3, #32
 8000e3c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e40:	4b53      	ldr	r3, [pc, #332]	; (8000f90 <MX_GPIO_Init+0x284>)
 8000e42:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e46:	f003 0320 	and.w	r3, r3, #32
 8000e4a:	607b      	str	r3, [r7, #4]
 8000e4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e4e:	4b50      	ldr	r3, [pc, #320]	; (8000f90 <MX_GPIO_Init+0x284>)
 8000e50:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e54:	4a4e      	ldr	r2, [pc, #312]	; (8000f90 <MX_GPIO_Init+0x284>)
 8000e56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e5a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e5e:	4b4c      	ldr	r3, [pc, #304]	; (8000f90 <MX_GPIO_Init+0x284>)
 8000e60:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e68:	603b      	str	r3, [r7, #0]
 8000e6a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, WIFI_BOOT_Pin|WIFI_WKUP_Pin|WIFI_RST_Pin, GPIO_PIN_RESET);
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	210e      	movs	r1, #14
 8000e70:	4848      	ldr	r0, [pc, #288]	; (8000f94 <MX_GPIO_Init+0x288>)
 8000e72:	f001 f91f 	bl	80020b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USER_LED1_Pin|USER_LED2_Pin, GPIO_PIN_RESET);
 8000e76:	2200      	movs	r2, #0
 8000e78:	f640 0104 	movw	r1, #2052	; 0x804
 8000e7c:	4846      	ldr	r0, [pc, #280]	; (8000f98 <MX_GPIO_Init+0x28c>)
 8000e7e:	f001 f919 	bl	80020b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8000e82:	2200      	movs	r2, #0
 8000e84:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e88:	4844      	ldr	r0, [pc, #272]	; (8000f9c <MX_GPIO_Init+0x290>)
 8000e8a:	f001 f913 	bl	80020b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AUDIO_NRST_GPIO_Port, AUDIO_NRST_Pin, GPIO_PIN_SET);
 8000e8e:	2201      	movs	r2, #1
 8000e90:	2108      	movs	r1, #8
 8000e92:	4841      	ldr	r0, [pc, #260]	; (8000f98 <MX_GPIO_Init+0x28c>)
 8000e94:	f001 f90e 	bl	80020b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_BL_CTRL_Pin|LCD_ON_OFF_Pin, GPIO_PIN_SET);
 8000e98:	2201      	movs	r2, #1
 8000e9a:	2106      	movs	r1, #6
 8000e9c:	483f      	ldr	r0, [pc, #252]	; (8000f9c <MX_GPIO_Init+0x290>)
 8000e9e:	f001 f909 	bl	80020b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : WIFI_GPIO_Pin WIFI_DATRDY_Pin */
  GPIO_InitStruct.Pin = WIFI_GPIO_Pin|WIFI_DATRDY_Pin;
 8000ea2:	2330      	movs	r3, #48	; 0x30
 8000ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ea6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000eaa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eac:	2300      	movs	r3, #0
 8000eae:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000eb0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	4837      	ldr	r0, [pc, #220]	; (8000f94 <MX_GPIO_Init+0x288>)
 8000eb8:	f000 ff4c 	bl	8001d54 <HAL_GPIO_Init>

  /*Configure GPIO pins : WIFI_BOOT_Pin WIFI_WKUP_Pin WIFI_RST_Pin */
  GPIO_InitStruct.Pin = WIFI_BOOT_Pin|WIFI_WKUP_Pin|WIFI_RST_Pin;
 8000ebc:	230e      	movs	r3, #14
 8000ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000ecc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	4830      	ldr	r0, [pc, #192]	; (8000f94 <MX_GPIO_Init+0x288>)
 8000ed4:	f000 ff3e 	bl	8001d54 <HAL_GPIO_Init>

  /*Configure GPIO pins : USER_LED1_Pin AUDIO_NRST_Pin USER_LED2_Pin */
  GPIO_InitStruct.Pin = USER_LED1_Pin|AUDIO_NRST_Pin|USER_LED2_Pin;
 8000ed8:	f640 030c 	movw	r3, #2060	; 0x80c
 8000edc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000eea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000eee:	4619      	mov	r1, r3
 8000ef0:	4829      	ldr	r0, [pc, #164]	; (8000f98 <MX_GPIO_Init+0x28c>)
 8000ef2:	f000 ff2f 	bl	8001d54 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000ef6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000efa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000efc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f00:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f02:	2301      	movs	r3, #1
 8000f04:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000f06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4821      	ldr	r0, [pc, #132]	; (8000f94 <MX_GPIO_Init+0x288>)
 8000f0e:	f000 ff21 	bl	8001d54 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_NSS_Pin LCD_BL_CTRL_Pin LCD_ON_OFF_Pin */
  GPIO_InitStruct.Pin = SPI2_NSS_Pin|LCD_BL_CTRL_Pin|LCD_ON_OFF_Pin;
 8000f12:	f640 0306 	movw	r3, #2054	; 0x806
 8000f16:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f20:	2300      	movs	r3, #0
 8000f22:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f24:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f28:	4619      	mov	r1, r3
 8000f2a:	481c      	ldr	r0, [pc, #112]	; (8000f9c <MX_GPIO_Init+0x290>)
 8000f2c:	f000 ff12 	bl	8001d54 <HAL_GPIO_Init>

  /*Configure GPIO pin : WAKEUP_Pin */
  GPIO_InitStruct.Pin = WAKEUP_Pin;
 8000f30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f34:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f36:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f3a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(WAKEUP_GPIO_Port, &GPIO_InitStruct);
 8000f40:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f44:	4619      	mov	r1, r3
 8000f46:	4816      	ldr	r0, [pc, #88]	; (8000fa0 <MX_GPIO_Init+0x294>)
 8000f48:	f000 ff04 	bl	8001d54 <HAL_GPIO_Init>

  /*Configure GPIO pin : MCO_Pin */
  GPIO_InitStruct.Pin = MCO_Pin;
 8000f4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f50:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f52:	2302      	movs	r3, #2
 8000f54:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f56:	2300      	movs	r3, #0
 8000f58:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(MCO_GPIO_Port, &GPIO_InitStruct);
 8000f62:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f66:	4619      	mov	r1, r3
 8000f68:	480c      	ldr	r0, [pc, #48]	; (8000f9c <MX_GPIO_Init+0x290>)
 8000f6a:	f000 fef3 	bl	8001d54 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000f6e:	2304      	movs	r3, #4
 8000f70:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f72:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f76:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000f7c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f80:	4619      	mov	r1, r3
 8000f82:	4808      	ldr	r0, [pc, #32]	; (8000fa4 <MX_GPIO_Init+0x298>)
 8000f84:	f000 fee6 	bl	8001d54 <HAL_GPIO_Init>

}
 8000f88:	bf00      	nop
 8000f8a:	3740      	adds	r7, #64	; 0x40
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	58024400 	.word	0x58024400
 8000f94:	58022000 	.word	0x58022000
 8000f98:	58021800 	.word	0x58021800
 8000f9c:	58020000 	.word	0x58020000
 8000fa0:	58020800 	.word	0x58020800
 8000fa4:	58021c00 	.word	0x58021c00

08000fa8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fac:	b672      	cpsid	i
}
 8000fae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fb0:	e7fe      	b.n	8000fb0 <Error_Handler+0x8>
	...

08000fb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fba:	4b0a      	ldr	r3, [pc, #40]	; (8000fe4 <HAL_MspInit+0x30>)
 8000fbc:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000fc0:	4a08      	ldr	r2, [pc, #32]	; (8000fe4 <HAL_MspInit+0x30>)
 8000fc2:	f043 0302 	orr.w	r3, r3, #2
 8000fc6:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000fca:	4b06      	ldr	r3, [pc, #24]	; (8000fe4 <HAL_MspInit+0x30>)
 8000fcc:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000fd0:	f003 0302 	and.w	r3, r3, #2
 8000fd4:	607b      	str	r3, [r7, #4]
 8000fd6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fd8:	bf00      	nop
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr
 8000fe4:	58024400 	.word	0x58024400

08000fe8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b0b8      	sub	sp, #224	; 0xe0
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
 8000ffc:	60da      	str	r2, [r3, #12]
 8000ffe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001000:	f107 0314 	add.w	r3, r7, #20
 8001004:	22b8      	movs	r2, #184	; 0xb8
 8001006:	2100      	movs	r1, #0
 8001008:	4618      	mov	r0, r3
 800100a:	f007 fa0f 	bl	800842c <memset>
  if(hi2c->Instance==I2C4)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a25      	ldr	r2, [pc, #148]	; (80010a8 <HAL_I2C_MspInit+0xc0>)
 8001014:	4293      	cmp	r3, r2
 8001016:	d142      	bne.n	800109e <HAL_I2C_MspInit+0xb6>
  /* USER CODE BEGIN I2C4_MspInit 0 */

  /* USER CODE END I2C4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001018:	2310      	movs	r3, #16
 800101a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 800101c:	2300      	movs	r3, #0
 800101e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001022:	f107 0314 	add.w	r3, r7, #20
 8001026:	4618      	mov	r0, r3
 8001028:	f003 fc80 	bl	800492c <HAL_RCCEx_PeriphCLKConfig>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001032:	f7ff ffb9 	bl	8000fa8 <Error_Handler>
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001036:	4b1d      	ldr	r3, [pc, #116]	; (80010ac <HAL_I2C_MspInit+0xc4>)
 8001038:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800103c:	4a1b      	ldr	r2, [pc, #108]	; (80010ac <HAL_I2C_MspInit+0xc4>)
 800103e:	f043 0308 	orr.w	r3, r3, #8
 8001042:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001046:	4b19      	ldr	r3, [pc, #100]	; (80010ac <HAL_I2C_MspInit+0xc4>)
 8001048:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800104c:	f003 0308 	and.w	r3, r3, #8
 8001050:	613b      	str	r3, [r7, #16]
 8001052:	693b      	ldr	r3, [r7, #16]
    /**I2C4 GPIO Configuration
    PD13     ------> I2C4_SDA
    PD12     ------> I2C4_SCL
    */
    GPIO_InitStruct.Pin = I2C4_SDA_Pin|I2C4_SCL_Pin;
 8001054:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001058:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800105c:	2312      	movs	r3, #18
 800105e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001062:	2301      	movs	r3, #1
 8001064:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001068:	2300      	movs	r3, #0
 800106a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 800106e:	2304      	movs	r3, #4
 8001070:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001074:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001078:	4619      	mov	r1, r3
 800107a:	480d      	ldr	r0, [pc, #52]	; (80010b0 <HAL_I2C_MspInit+0xc8>)
 800107c:	f000 fe6a 	bl	8001d54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001080:	4b0a      	ldr	r3, [pc, #40]	; (80010ac <HAL_I2C_MspInit+0xc4>)
 8001082:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001086:	4a09      	ldr	r2, [pc, #36]	; (80010ac <HAL_I2C_MspInit+0xc4>)
 8001088:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800108c:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8001090:	4b06      	ldr	r3, [pc, #24]	; (80010ac <HAL_I2C_MspInit+0xc4>)
 8001092:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001096:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 800109e:	bf00      	nop
 80010a0:	37e0      	adds	r7, #224	; 0xe0
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	58001c00 	.word	0x58001c00
 80010ac:	58024400 	.word	0x58024400
 80010b0:	58020c00 	.word	0x58020c00

080010b4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b0b8      	sub	sp, #224	; 0xe0
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010bc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	605a      	str	r2, [r3, #4]
 80010c6:	609a      	str	r2, [r3, #8]
 80010c8:	60da      	str	r2, [r3, #12]
 80010ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010cc:	f107 0314 	add.w	r3, r7, #20
 80010d0:	22b8      	movs	r2, #184	; 0xb8
 80010d2:	2100      	movs	r1, #0
 80010d4:	4618      	mov	r0, r3
 80010d6:	f007 f9a9 	bl	800842c <memset>
  if(hi2s->Instance==SPI6)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a37      	ldr	r2, [pc, #220]	; (80011bc <HAL_I2S_MspInit+0x108>)
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d167      	bne.n	80011b4 <HAL_I2S_MspInit+0x100>
  /* USER CODE BEGIN SPI6_MspInit 0 */

  /* USER CODE END SPI6_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI6;
 80010e4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80010e8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Spi6ClockSelection = RCC_SPI6CLKSOURCE_D3PCLK1;
 80010ea:	2300      	movs	r3, #0
 80010ec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010f0:	f107 0314 	add.w	r3, r7, #20
 80010f4:	4618      	mov	r0, r3
 80010f6:	f003 fc19 	bl	800492c <HAL_RCCEx_PeriphCLKConfig>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8001100:	f7ff ff52 	bl	8000fa8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI6_CLK_ENABLE();
 8001104:	4b2e      	ldr	r3, [pc, #184]	; (80011c0 <HAL_I2S_MspInit+0x10c>)
 8001106:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800110a:	4a2d      	ldr	r2, [pc, #180]	; (80011c0 <HAL_I2S_MspInit+0x10c>)
 800110c:	f043 0320 	orr.w	r3, r3, #32
 8001110:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8001114:	4b2a      	ldr	r3, [pc, #168]	; (80011c0 <HAL_I2S_MspInit+0x10c>)
 8001116:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800111a:	f003 0320 	and.w	r3, r3, #32
 800111e:	613b      	str	r3, [r7, #16]
 8001120:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001122:	4b27      	ldr	r3, [pc, #156]	; (80011c0 <HAL_I2S_MspInit+0x10c>)
 8001124:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001128:	4a25      	ldr	r2, [pc, #148]	; (80011c0 <HAL_I2S_MspInit+0x10c>)
 800112a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800112e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001132:	4b23      	ldr	r3, [pc, #140]	; (80011c0 <HAL_I2S_MspInit+0x10c>)
 8001134:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001138:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800113c:	60fb      	str	r3, [r7, #12]
 800113e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001140:	4b1f      	ldr	r3, [pc, #124]	; (80011c0 <HAL_I2S_MspInit+0x10c>)
 8001142:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001146:	4a1e      	ldr	r2, [pc, #120]	; (80011c0 <HAL_I2S_MspInit+0x10c>)
 8001148:	f043 0301 	orr.w	r3, r3, #1
 800114c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001150:	4b1b      	ldr	r3, [pc, #108]	; (80011c0 <HAL_I2S_MspInit+0x10c>)
 8001152:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001156:	f003 0301 	and.w	r3, r3, #1
 800115a:	60bb      	str	r3, [r7, #8]
 800115c:	68bb      	ldr	r3, [r7, #8]
    PG12     ------> I2S6_SDI
    PG13     ------> I2S6_CK
    PA0     ------> I2S6_WS
    PA3     ------> I2S6_MCK
    */
    GPIO_InitStruct.Pin = I2S6_SDO_Pin|I2S6_SDI_Pin|I2S6_CK_Pin;
 800115e:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001162:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001166:	2302      	movs	r3, #2
 8001168:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116c:	2300      	movs	r3, #0
 800116e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001172:	2300      	movs	r3, #0
 8001174:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
 8001178:	2305      	movs	r3, #5
 800117a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800117e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001182:	4619      	mov	r1, r3
 8001184:	480f      	ldr	r0, [pc, #60]	; (80011c4 <HAL_I2S_MspInit+0x110>)
 8001186:	f000 fde5 	bl	8001d54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S6_WS_Pin|I2S6_MCK_Pin;
 800118a:	2309      	movs	r3, #9
 800118c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001190:	2302      	movs	r3, #2
 8001192:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001196:	2300      	movs	r3, #0
 8001198:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119c:	2300      	movs	r3, #0
 800119e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
 80011a2:	2305      	movs	r3, #5
 80011a4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80011ac:	4619      	mov	r1, r3
 80011ae:	4806      	ldr	r0, [pc, #24]	; (80011c8 <HAL_I2S_MspInit+0x114>)
 80011b0:	f000 fdd0 	bl	8001d54 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI6_MspInit 1 */

  /* USER CODE END SPI6_MspInit 1 */
  }

}
 80011b4:	bf00      	nop
 80011b6:	37e0      	adds	r7, #224	; 0xe0
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	58001400 	.word	0x58001400
 80011c0:	58024400 	.word	0x58024400
 80011c4:	58021800 	.word	0x58021800
 80011c8:	58020000 	.word	0x58020000

080011cc <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b0ba      	sub	sp, #232	; 0xe8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	605a      	str	r2, [r3, #4]
 80011de:	609a      	str	r2, [r3, #8]
 80011e0:	60da      	str	r2, [r3, #12]
 80011e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011e4:	f107 031c 	add.w	r3, r7, #28
 80011e8:	22b8      	movs	r2, #184	; 0xb8
 80011ea:	2100      	movs	r1, #0
 80011ec:	4618      	mov	r0, r3
 80011ee:	f007 f91d 	bl	800842c <memset>
  if(hltdc->Instance==LTDC)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4a51      	ldr	r2, [pc, #324]	; (800133c <HAL_LTDC_MspInit+0x170>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	f040 809b 	bne.w	8001334 <HAL_LTDC_MspInit+0x168>
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80011fe:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001202:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL3.PLL3M = 24;
 8001204:	2318      	movs	r3, #24
 8001206:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3N = 192;
 8001208:	23c0      	movs	r3, #192	; 0xc0
 800120a:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3P = 17;
 800120c:	2311      	movs	r3, #17
 800120e:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8001210:	2302      	movs	r3, #2
 8001212:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8001214:	2302      	movs	r3, #2
 8001216:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 8001218:	2300      	movs	r3, #0
 800121a:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 800121c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001220:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8001222:	2300      	movs	r3, #0
 8001224:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001226:	f107 031c 	add.w	r3, r7, #28
 800122a:	4618      	mov	r0, r3
 800122c:	f003 fb7e 	bl	800492c <HAL_RCCEx_PeriphCLKConfig>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <HAL_LTDC_MspInit+0x6e>
    {
      Error_Handler();
 8001236:	f7ff feb7 	bl	8000fa8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800123a:	4b41      	ldr	r3, [pc, #260]	; (8001340 <HAL_LTDC_MspInit+0x174>)
 800123c:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8001240:	4a3f      	ldr	r2, [pc, #252]	; (8001340 <HAL_LTDC_MspInit+0x174>)
 8001242:	f043 0308 	orr.w	r3, r3, #8
 8001246:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144
 800124a:	4b3d      	ldr	r3, [pc, #244]	; (8001340 <HAL_LTDC_MspInit+0x174>)
 800124c:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8001250:	f003 0308 	and.w	r3, r3, #8
 8001254:	61bb      	str	r3, [r7, #24]
 8001256:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 8001258:	4b39      	ldr	r3, [pc, #228]	; (8001340 <HAL_LTDC_MspInit+0x174>)
 800125a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800125e:	4a38      	ldr	r2, [pc, #224]	; (8001340 <HAL_LTDC_MspInit+0x174>)
 8001260:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001264:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001268:	4b35      	ldr	r3, [pc, #212]	; (8001340 <HAL_LTDC_MspInit+0x174>)
 800126a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800126e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001272:	617b      	str	r3, [r7, #20]
 8001274:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001276:	4b32      	ldr	r3, [pc, #200]	; (8001340 <HAL_LTDC_MspInit+0x174>)
 8001278:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800127c:	4a30      	ldr	r2, [pc, #192]	; (8001340 <HAL_LTDC_MspInit+0x174>)
 800127e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001282:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001286:	4b2e      	ldr	r3, [pc, #184]	; (8001340 <HAL_LTDC_MspInit+0x174>)
 8001288:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800128c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001290:	613b      	str	r3, [r7, #16]
 8001292:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001294:	4b2a      	ldr	r3, [pc, #168]	; (8001340 <HAL_LTDC_MspInit+0x174>)
 8001296:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800129a:	4a29      	ldr	r2, [pc, #164]	; (8001340 <HAL_LTDC_MspInit+0x174>)
 800129c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012a0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80012a4:	4b26      	ldr	r3, [pc, #152]	; (8001340 <HAL_LTDC_MspInit+0x174>)
 80012a6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80012aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012ae:	60fb      	str	r3, [r7, #12]
 80012b0:	68fb      	ldr	r3, [r7, #12]
    PJ1     ------> LTDC_R2
    PJ4     ------> LTDC_R5
    PJ2     ------> LTDC_R3
    PJ3     ------> LTDC_R4
    */
    GPIO_InitStruct.Pin = LCD_B6_Pin|LCD_B7_Pin|LCD_B4_Pin|LCD_B5_Pin
 80012b2:	23ff      	movs	r3, #255	; 0xff
 80012b4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                          |LCD_DE_Pin|LCD_G7_Pin|LCD_G6_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b8:	2302      	movs	r3, #2
 80012ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012be:	2300      	movs	r3, #0
 80012c0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c4:	2300      	movs	r3, #0
 80012c6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80012ca:	230e      	movs	r3, #14
 80012cc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80012d0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80012d4:	4619      	mov	r1, r3
 80012d6:	481b      	ldr	r0, [pc, #108]	; (8001344 <HAL_LTDC_MspInit+0x178>)
 80012d8:	f000 fd3c 	bl	8001d54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B3_Pin|LCD_B2_Pin|LCD_B1_Pin|LCD_B0_Pin
 80012dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012e0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                          |LCD_G4_Pin|LCD_G3_Pin|LCD_G2_Pin|LCD_G1_Pin
                          |LCD_R7_Pin|LCD_G0_Pin|LCD_R1_Pin|LCD_R6_Pin
                          |LCD_R2_Pin|LCD_R5_Pin|LCD_R3_Pin|LCD_R4_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e4:	2302      	movs	r3, #2
 80012e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ea:	2300      	movs	r3, #0
 80012ec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f0:	2300      	movs	r3, #0
 80012f2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80012f6:	230e      	movs	r3, #14
 80012f8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80012fc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001300:	4619      	mov	r1, r3
 8001302:	4811      	ldr	r0, [pc, #68]	; (8001348 <HAL_LTDC_MspInit+0x17c>)
 8001304:	f000 fd26 	bl	8001d54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_CLK_Pin|LCD_VSYNC_Pin|LCD_R0_Pin;
 8001308:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800130c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001310:	2302      	movs	r3, #2
 8001312:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001316:	2300      	movs	r3, #0
 8001318:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131c:	2300      	movs	r3, #0
 800131e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001322:	230e      	movs	r3, #14
 8001324:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001328:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800132c:	4619      	mov	r1, r3
 800132e:	4807      	ldr	r0, [pc, #28]	; (800134c <HAL_LTDC_MspInit+0x180>)
 8001330:	f000 fd10 	bl	8001d54 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001334:	bf00      	nop
 8001336:	37e8      	adds	r7, #232	; 0xe8
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	50001000 	.word	0x50001000
 8001340:	58024400 	.word	0x58024400
 8001344:	58022800 	.word	0x58022800
 8001348:	58022400 	.word	0x58022400
 800134c:	58022000 	.word	0x58022000

08001350 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b08e      	sub	sp, #56	; 0x38
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001358:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	605a      	str	r2, [r3, #4]
 8001362:	609a      	str	r2, [r3, #8]
 8001364:	60da      	str	r2, [r3, #12]
 8001366:	611a      	str	r2, [r3, #16]
  if(hospi->Instance==OCTOSPI1)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a68      	ldr	r2, [pc, #416]	; (8001510 <HAL_OSPI_MspInit+0x1c0>)
 800136e:	4293      	cmp	r3, r2
 8001370:	f040 80ca 	bne.w	8001508 <HAL_OSPI_MspInit+0x1b8>
  {
  /* USER CODE BEGIN OCTOSPI1_MspInit 0 */

  /* USER CODE END OCTOSPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 8001374:	4b67      	ldr	r3, [pc, #412]	; (8001514 <HAL_OSPI_MspInit+0x1c4>)
 8001376:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800137a:	4a66      	ldr	r2, [pc, #408]	; (8001514 <HAL_OSPI_MspInit+0x1c4>)
 800137c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001380:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 8001384:	4b63      	ldr	r3, [pc, #396]	; (8001514 <HAL_OSPI_MspInit+0x1c4>)
 8001386:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800138a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800138e:	623b      	str	r3, [r7, #32]
 8001390:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8001392:	4b60      	ldr	r3, [pc, #384]	; (8001514 <HAL_OSPI_MspInit+0x1c4>)
 8001394:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001398:	4a5e      	ldr	r2, [pc, #376]	; (8001514 <HAL_OSPI_MspInit+0x1c4>)
 800139a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800139e:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 80013a2:	4b5c      	ldr	r3, [pc, #368]	; (8001514 <HAL_OSPI_MspInit+0x1c4>)
 80013a4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80013a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013ac:	61fb      	str	r3, [r7, #28]
 80013ae:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80013b0:	4b58      	ldr	r3, [pc, #352]	; (8001514 <HAL_OSPI_MspInit+0x1c4>)
 80013b2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80013b6:	4a57      	ldr	r2, [pc, #348]	; (8001514 <HAL_OSPI_MspInit+0x1c4>)
 80013b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013bc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80013c0:	4b54      	ldr	r3, [pc, #336]	; (8001514 <HAL_OSPI_MspInit+0x1c4>)
 80013c2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80013c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013ca:	61bb      	str	r3, [r7, #24]
 80013cc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013ce:	4b51      	ldr	r3, [pc, #324]	; (8001514 <HAL_OSPI_MspInit+0x1c4>)
 80013d0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80013d4:	4a4f      	ldr	r2, [pc, #316]	; (8001514 <HAL_OSPI_MspInit+0x1c4>)
 80013d6:	f043 0308 	orr.w	r3, r3, #8
 80013da:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80013de:	4b4d      	ldr	r3, [pc, #308]	; (8001514 <HAL_OSPI_MspInit+0x1c4>)
 80013e0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80013e4:	f003 0308 	and.w	r3, r3, #8
 80013e8:	617b      	str	r3, [r7, #20]
 80013ea:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ec:	4b49      	ldr	r3, [pc, #292]	; (8001514 <HAL_OSPI_MspInit+0x1c4>)
 80013ee:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80013f2:	4a48      	ldr	r2, [pc, #288]	; (8001514 <HAL_OSPI_MspInit+0x1c4>)
 80013f4:	f043 0304 	orr.w	r3, r3, #4
 80013f8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80013fc:	4b45      	ldr	r3, [pc, #276]	; (8001514 <HAL_OSPI_MspInit+0x1c4>)
 80013fe:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001402:	f003 0304 	and.w	r3, r3, #4
 8001406:	613b      	str	r3, [r7, #16]
 8001408:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800140a:	4b42      	ldr	r3, [pc, #264]	; (8001514 <HAL_OSPI_MspInit+0x1c4>)
 800140c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001410:	4a40      	ldr	r2, [pc, #256]	; (8001514 <HAL_OSPI_MspInit+0x1c4>)
 8001412:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001416:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800141a:	4b3e      	ldr	r3, [pc, #248]	; (8001514 <HAL_OSPI_MspInit+0x1c4>)
 800141c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001420:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001424:	60fb      	str	r3, [r7, #12]
 8001426:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001428:	4b3a      	ldr	r3, [pc, #232]	; (8001514 <HAL_OSPI_MspInit+0x1c4>)
 800142a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800142e:	4a39      	ldr	r2, [pc, #228]	; (8001514 <HAL_OSPI_MspInit+0x1c4>)
 8001430:	f043 0302 	orr.w	r3, r3, #2
 8001434:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001438:	4b36      	ldr	r3, [pc, #216]	; (8001514 <HAL_OSPI_MspInit+0x1c4>)
 800143a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800143e:	f003 0302 	and.w	r3, r3, #2
 8001442:	60bb      	str	r3, [r7, #8]
 8001444:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> OCTOSPIM_P1_IO4
    PH3     ------> OCTOSPIM_P1_IO5
    PC5     ------> OCTOSPIM_P1_DQS
    PB2     ------> OCTOSPIM_P1_CLK
    */
    GPIO_InitStruct.Pin = OCSPI1_IO6_Pin;
 8001446:	f44f 7300 	mov.w	r3, #512	; 0x200
 800144a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144c:	2302      	movs	r3, #2
 800144e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001450:	2300      	movs	r3, #0
 8001452:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001454:	2303      	movs	r3, #3
 8001456:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8001458:	2309      	movs	r3, #9
 800145a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(OCSPI1_IO6_GPIO_Port, &GPIO_InitStruct);
 800145c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001460:	4619      	mov	r1, r3
 8001462:	482d      	ldr	r0, [pc, #180]	; (8001518 <HAL_OSPI_MspInit+0x1c8>)
 8001464:	f000 fc76 	bl	8001d54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCSPI1_IO7_Pin;
 8001468:	2380      	movs	r3, #128	; 0x80
 800146a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146c:	2302      	movs	r3, #2
 800146e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001470:	2300      	movs	r3, #0
 8001472:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001474:	2303      	movs	r3, #3
 8001476:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8001478:	230a      	movs	r3, #10
 800147a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(OCSPI1_IO7_GPIO_Port, &GPIO_InitStruct);
 800147c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001480:	4619      	mov	r1, r3
 8001482:	4826      	ldr	r0, [pc, #152]	; (800151c <HAL_OSPI_MspInit+0x1cc>)
 8001484:	f000 fc66 	bl	8001d54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCSPI1_NCS_Pin;
 8001488:	2340      	movs	r3, #64	; 0x40
 800148a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148c:	2302      	movs	r3, #2
 800148e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001490:	2300      	movs	r3, #0
 8001492:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001494:	2303      	movs	r3, #3
 8001496:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8001498:	230a      	movs	r3, #10
 800149a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(OCSPI1_NCS_GPIO_Port, &GPIO_InitStruct);
 800149c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014a0:	4619      	mov	r1, r3
 80014a2:	481d      	ldr	r0, [pc, #116]	; (8001518 <HAL_OSPI_MspInit+0x1c8>)
 80014a4:	f000 fc56 	bl	8001d54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCSPI1_IO4_Pin|OCSPI1_DQS_Pin;
 80014a8:	2322      	movs	r3, #34	; 0x22
 80014aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ac:	2302      	movs	r3, #2
 80014ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b0:	2300      	movs	r3, #0
 80014b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014b4:	2303      	movs	r3, #3
 80014b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 80014b8:	230a      	movs	r3, #10
 80014ba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014c0:	4619      	mov	r1, r3
 80014c2:	4817      	ldr	r0, [pc, #92]	; (8001520 <HAL_OSPI_MspInit+0x1d0>)
 80014c4:	f000 fc46 	bl	8001d54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCSPI1_IO5_Pin;
 80014c8:	2308      	movs	r3, #8
 80014ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014cc:	2302      	movs	r3, #2
 80014ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d0:	2300      	movs	r3, #0
 80014d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014d4:	2303      	movs	r3, #3
 80014d6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 80014d8:	2309      	movs	r3, #9
 80014da:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(OCSPI1_IO5_GPIO_Port, &GPIO_InitStruct);
 80014dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014e0:	4619      	mov	r1, r3
 80014e2:	4810      	ldr	r0, [pc, #64]	; (8001524 <HAL_OSPI_MspInit+0x1d4>)
 80014e4:	f000 fc36 	bl	8001d54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCSPI1_CLK_Pin;
 80014e8:	2304      	movs	r3, #4
 80014ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ec:	2302      	movs	r3, #2
 80014ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f0:	2300      	movs	r3, #0
 80014f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f4:	2303      	movs	r3, #3
 80014f6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 80014f8:	2309      	movs	r3, #9
 80014fa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(OCSPI1_CLK_GPIO_Port, &GPIO_InitStruct);
 80014fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001500:	4619      	mov	r1, r3
 8001502:	4809      	ldr	r0, [pc, #36]	; (8001528 <HAL_OSPI_MspInit+0x1d8>)
 8001504:	f000 fc26 	bl	8001d54 <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 8001508:	bf00      	nop
 800150a:	3738      	adds	r7, #56	; 0x38
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	52005000 	.word	0x52005000
 8001514:	58024400 	.word	0x58024400
 8001518:	58021800 	.word	0x58021800
 800151c:	58020c00 	.word	0x58020c00
 8001520:	58020800 	.word	0x58020800
 8001524:	58021c00 	.word	0x58021c00
 8001528:	58020400 	.word	0x58020400

0800152c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b0b0      	sub	sp, #192	; 0xc0
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001534:	f107 0308 	add.w	r3, r7, #8
 8001538:	22b8      	movs	r2, #184	; 0xb8
 800153a:	2100      	movs	r1, #0
 800153c:	4618      	mov	r0, r3
 800153e:	f006 ff75 	bl	800842c <memset>
  if(hrtc->Instance==RTC)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a0f      	ldr	r2, [pc, #60]	; (8001584 <HAL_RTC_MspInit+0x58>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d116      	bne.n	800157a <HAL_RTC_MspInit+0x4e>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800154c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001550:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001552:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001556:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800155a:	f107 0308 	add.w	r3, r7, #8
 800155e:	4618      	mov	r0, r3
 8001560:	f003 f9e4 	bl	800492c <HAL_RCCEx_PeriphCLKConfig>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800156a:	f7ff fd1d 	bl	8000fa8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800156e:	4b06      	ldr	r3, [pc, #24]	; (8001588 <HAL_RTC_MspInit+0x5c>)
 8001570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001572:	4a05      	ldr	r2, [pc, #20]	; (8001588 <HAL_RTC_MspInit+0x5c>)
 8001574:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001578:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800157a:	bf00      	nop
 800157c:	37c0      	adds	r7, #192	; 0xc0
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	58004000 	.word	0x58004000
 8001588:	58024400 	.word	0x58024400

0800158c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b0b8      	sub	sp, #224	; 0xe0
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001594:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001598:	2200      	movs	r2, #0
 800159a:	601a      	str	r2, [r3, #0]
 800159c:	605a      	str	r2, [r3, #4]
 800159e:	609a      	str	r2, [r3, #8]
 80015a0:	60da      	str	r2, [r3, #12]
 80015a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015a4:	f107 0314 	add.w	r3, r7, #20
 80015a8:	22b8      	movs	r2, #184	; 0xb8
 80015aa:	2100      	movs	r1, #0
 80015ac:	4618      	mov	r0, r3
 80015ae:	f006 ff3d 	bl	800842c <memset>
  if(hspi->Instance==SPI2)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a37      	ldr	r2, [pc, #220]	; (8001694 <HAL_SPI_MspInit+0x108>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d167      	bne.n	800168c <HAL_SPI_MspInit+0x100>
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80015bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015c0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 80015c2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80015c6:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015c8:	f107 0314 	add.w	r3, r7, #20
 80015cc:	4618      	mov	r0, r3
 80015ce:	f003 f9ad 	bl	800492c <HAL_RCCEx_PeriphCLKConfig>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 80015d8:	f7ff fce6 	bl	8000fa8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80015dc:	4b2e      	ldr	r3, [pc, #184]	; (8001698 <HAL_SPI_MspInit+0x10c>)
 80015de:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80015e2:	4a2d      	ldr	r2, [pc, #180]	; (8001698 <HAL_SPI_MspInit+0x10c>)
 80015e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015e8:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80015ec:	4b2a      	ldr	r3, [pc, #168]	; (8001698 <HAL_SPI_MspInit+0x10c>)
 80015ee:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80015f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015f6:	613b      	str	r3, [r7, #16]
 80015f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015fa:	4b27      	ldr	r3, [pc, #156]	; (8001698 <HAL_SPI_MspInit+0x10c>)
 80015fc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001600:	4a25      	ldr	r2, [pc, #148]	; (8001698 <HAL_SPI_MspInit+0x10c>)
 8001602:	f043 0301 	orr.w	r3, r3, #1
 8001606:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800160a:	4b23      	ldr	r3, [pc, #140]	; (8001698 <HAL_SPI_MspInit+0x10c>)
 800160c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001610:	f003 0301 	and.w	r3, r3, #1
 8001614:	60fb      	str	r3, [r7, #12]
 8001616:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001618:	4b1f      	ldr	r3, [pc, #124]	; (8001698 <HAL_SPI_MspInit+0x10c>)
 800161a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800161e:	4a1e      	ldr	r2, [pc, #120]	; (8001698 <HAL_SPI_MspInit+0x10c>)
 8001620:	f043 0304 	orr.w	r3, r3, #4
 8001624:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001628:	4b1b      	ldr	r3, [pc, #108]	; (8001698 <HAL_SPI_MspInit+0x10c>)
 800162a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800162e:	f003 0304 	and.w	r3, r3, #4
 8001632:	60bb      	str	r3, [r7, #8]
 8001634:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PA12     ------> SPI2_SCK
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = SPI2_SCK_Pin;
 8001636:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800163a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800163e:	2302      	movs	r3, #2
 8001640:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001644:	2300      	movs	r3, #0
 8001646:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800164a:	2300      	movs	r3, #0
 800164c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001650:	2305      	movs	r3, #5
 8001652:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8001656:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800165a:	4619      	mov	r1, r3
 800165c:	480f      	ldr	r0, [pc, #60]	; (800169c <HAL_SPI_MspInit+0x110>)
 800165e:	f000 fb79 	bl	8001d54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI2_MISO_Pin|SPI2_MOSI_Pin;
 8001662:	230c      	movs	r3, #12
 8001664:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001668:	2302      	movs	r3, #2
 800166a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166e:	2300      	movs	r3, #0
 8001670:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001674:	2300      	movs	r3, #0
 8001676:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800167a:	2305      	movs	r3, #5
 800167c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001680:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001684:	4619      	mov	r1, r3
 8001686:	4806      	ldr	r0, [pc, #24]	; (80016a0 <HAL_SPI_MspInit+0x114>)
 8001688:	f000 fb64 	bl	8001d54 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800168c:	bf00      	nop
 800168e:	37e0      	adds	r7, #224	; 0xe0
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	40003800 	.word	0x40003800
 8001698:	58024400 	.word	0x58024400
 800169c:	58020000 	.word	0x58020000
 80016a0:	58020800 	.word	0x58020800

080016a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b0b8      	sub	sp, #224	; 0xe0
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ac:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80016b0:	2200      	movs	r2, #0
 80016b2:	601a      	str	r2, [r3, #0]
 80016b4:	605a      	str	r2, [r3, #4]
 80016b6:	609a      	str	r2, [r3, #8]
 80016b8:	60da      	str	r2, [r3, #12]
 80016ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016bc:	f107 0314 	add.w	r3, r7, #20
 80016c0:	22b8      	movs	r2, #184	; 0xb8
 80016c2:	2100      	movs	r1, #0
 80016c4:	4618      	mov	r0, r3
 80016c6:	f006 feb1 	bl	800842c <memset>
  if(huart->Instance==USART1)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a25      	ldr	r2, [pc, #148]	; (8001764 <HAL_UART_MspInit+0xc0>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d142      	bne.n	800175a <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80016d4:	2301      	movs	r3, #1
 80016d6:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80016d8:	2300      	movs	r3, #0
 80016da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016de:	f107 0314 	add.w	r3, r7, #20
 80016e2:	4618      	mov	r0, r3
 80016e4:	f003 f922 	bl	800492c <HAL_RCCEx_PeriphCLKConfig>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80016ee:	f7ff fc5b 	bl	8000fa8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80016f2:	4b1d      	ldr	r3, [pc, #116]	; (8001768 <HAL_UART_MspInit+0xc4>)
 80016f4:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80016f8:	4a1b      	ldr	r2, [pc, #108]	; (8001768 <HAL_UART_MspInit+0xc4>)
 80016fa:	f043 0310 	orr.w	r3, r3, #16
 80016fe:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 8001702:	4b19      	ldr	r3, [pc, #100]	; (8001768 <HAL_UART_MspInit+0xc4>)
 8001704:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8001708:	f003 0310 	and.w	r3, r3, #16
 800170c:	613b      	str	r3, [r7, #16]
 800170e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001710:	4b15      	ldr	r3, [pc, #84]	; (8001768 <HAL_UART_MspInit+0xc4>)
 8001712:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001716:	4a14      	ldr	r2, [pc, #80]	; (8001768 <HAL_UART_MspInit+0xc4>)
 8001718:	f043 0301 	orr.w	r3, r3, #1
 800171c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001720:	4b11      	ldr	r3, [pc, #68]	; (8001768 <HAL_UART_MspInit+0xc4>)
 8001722:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001726:	f003 0301 	and.w	r3, r3, #1
 800172a:	60fb      	str	r3, [r7, #12]
 800172c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin|VCP_TX_Pin;
 800172e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001732:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001736:	2302      	movs	r3, #2
 8001738:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173c:	2300      	movs	r3, #0
 800173e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001742:	2300      	movs	r3, #0
 8001744:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001748:	2307      	movs	r3, #7
 800174a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800174e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001752:	4619      	mov	r1, r3
 8001754:	4805      	ldr	r0, [pc, #20]	; (800176c <HAL_UART_MspInit+0xc8>)
 8001756:	f000 fafd 	bl	8001d54 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800175a:	bf00      	nop
 800175c:	37e0      	adds	r7, #224	; 0xe0
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	40011000 	.word	0x40011000
 8001768:	58024400 	.word	0x58024400
 800176c:	58020000 	.word	0x58020000

08001770 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001770:	b580      	push	{r7, lr}
 8001772:	b086      	sub	sp, #24
 8001774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001776:	1d3b      	adds	r3, r7, #4
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]
 800177c:	605a      	str	r2, [r3, #4]
 800177e:	609a      	str	r2, [r3, #8]
 8001780:	60da      	str	r2, [r3, #12]
 8001782:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001784:	4b34      	ldr	r3, [pc, #208]	; (8001858 <HAL_FMC_MspInit+0xe8>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d161      	bne.n	8001850 <HAL_FMC_MspInit+0xe0>
    return;
  }
  FMC_Initialized = 1;
 800178c:	4b32      	ldr	r3, [pc, #200]	; (8001858 <HAL_FMC_MspInit+0xe8>)
 800178e:	2201      	movs	r2, #1
 8001790:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001792:	4b32      	ldr	r3, [pc, #200]	; (800185c <HAL_FMC_MspInit+0xec>)
 8001794:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001798:	4a30      	ldr	r2, [pc, #192]	; (800185c <HAL_FMC_MspInit+0xec>)
 800179a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800179e:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 80017a2:	4b2e      	ldr	r3, [pc, #184]	; (800185c <HAL_FMC_MspInit+0xec>)
 80017a4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80017a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017ac:	603b      	str	r3, [r7, #0]
 80017ae:	683b      	ldr	r3, [r7, #0]
  PG0   ------> FMC_A10
  PE8   ------> FMC_D5
  PE11   ------> FMC_D8
  PH7   ------> FMC_SDCKE1
  */
  GPIO_InitStruct.Pin = SDNCAS_Pin|SDCLK_Pin|A15_Pin|A14_Pin
 80017b0:	f248 1333 	movw	r3, #33075	; 0x8133
 80017b4:	607b      	str	r3, [r7, #4]
                          |A11_Pin|A10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b6:	2302      	movs	r3, #2
 80017b8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ba:	2300      	movs	r3, #0
 80017bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017be:	2303      	movs	r3, #3
 80017c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80017c2:	230c      	movs	r3, #12
 80017c4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017c6:	1d3b      	adds	r3, r7, #4
 80017c8:	4619      	mov	r1, r3
 80017ca:	4825      	ldr	r0, [pc, #148]	; (8001860 <HAL_FMC_MspInit+0xf0>)
 80017cc:	f000 fac2 	bl	8001d54 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D3_Pin|D2_Pin|D0_Pin|D1_Pin
 80017d0:	f24c 7303 	movw	r3, #50947	; 0xc703
 80017d4:	607b      	str	r3, [r7, #4]
                          |D13_Pin|D15_Pin|D14_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d6:	2302      	movs	r3, #2
 80017d8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017da:	2300      	movs	r3, #0
 80017dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017de:	2303      	movs	r3, #3
 80017e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80017e2:	230c      	movs	r3, #12
 80017e4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017e6:	1d3b      	adds	r3, r7, #4
 80017e8:	4619      	mov	r1, r3
 80017ea:	481e      	ldr	r0, [pc, #120]	; (8001864 <HAL_FMC_MspInit+0xf4>)
 80017ec:	f000 fab2 	bl	8001d54 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_NBL0_Pin|FMC_NBL1_Pin|D9_Pin|D4_Pin
 80017f0:	f64f 7383 	movw	r3, #65411	; 0xff83
 80017f4:	607b      	str	r3, [r7, #4]
                          |D10_Pin|D11_Pin|D7_Pin|D6_Pin
                          |D12_Pin|D5_Pin|D8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f6:	2302      	movs	r3, #2
 80017f8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fa:	2300      	movs	r3, #0
 80017fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017fe:	2303      	movs	r3, #3
 8001800:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001802:	230c      	movs	r3, #12
 8001804:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001806:	1d3b      	adds	r3, r7, #4
 8001808:	4619      	mov	r1, r3
 800180a:	4817      	ldr	r0, [pc, #92]	; (8001868 <HAL_FMC_MspInit+0xf8>)
 800180c:	f000 faa2 	bl	8001d54 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A1_Pin|A0_Pin|A2_Pin|A4_Pin
 8001810:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001814:	607b      	str	r3, [r7, #4]
                          |A3_Pin|A5_Pin|A7_Pin|SDNRAS_Pin
                          |A9_Pin|A8_Pin|A6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001816:	2302      	movs	r3, #2
 8001818:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181a:	2300      	movs	r3, #0
 800181c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800181e:	2303      	movs	r3, #3
 8001820:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001822:	230c      	movs	r3, #12
 8001824:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001826:	1d3b      	adds	r3, r7, #4
 8001828:	4619      	mov	r1, r3
 800182a:	4810      	ldr	r0, [pc, #64]	; (800186c <HAL_FMC_MspInit+0xfc>)
 800182c:	f000 fa92 	bl	8001d54 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNE1_Pin|SDNWE_Pin|SDCKE1_Pin;
 8001830:	23e0      	movs	r3, #224	; 0xe0
 8001832:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001834:	2302      	movs	r3, #2
 8001836:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001838:	2300      	movs	r3, #0
 800183a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800183c:	2303      	movs	r3, #3
 800183e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001840:	230c      	movs	r3, #12
 8001842:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001844:	1d3b      	adds	r3, r7, #4
 8001846:	4619      	mov	r1, r3
 8001848:	4809      	ldr	r0, [pc, #36]	; (8001870 <HAL_FMC_MspInit+0x100>)
 800184a:	f000 fa83 	bl	8001d54 <HAL_GPIO_Init>
 800184e:	e000      	b.n	8001852 <HAL_FMC_MspInit+0xe2>
    return;
 8001850:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001852:	3718      	adds	r7, #24
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	24000348 	.word	0x24000348
 800185c:	58024400 	.word	0x58024400
 8001860:	58021800 	.word	0x58021800
 8001864:	58020c00 	.word	0x58020c00
 8001868:	58021000 	.word	0x58021000
 800186c:	58021400 	.word	0x58021400
 8001870:	58021c00 	.word	0x58021c00

08001874 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800187c:	f7ff ff78 	bl	8001770 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001880:	bf00      	nop
 8001882:	3708      	adds	r7, #8
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}

08001888 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800188c:	e7fe      	b.n	800188c <NMI_Handler+0x4>

0800188e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800188e:	b480      	push	{r7}
 8001890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001892:	e7fe      	b.n	8001892 <HardFault_Handler+0x4>

08001894 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001898:	e7fe      	b.n	8001898 <MemManage_Handler+0x4>

0800189a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800189a:	b480      	push	{r7}
 800189c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800189e:	e7fe      	b.n	800189e <BusFault_Handler+0x4>

080018a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018a4:	e7fe      	b.n	80018a4 <UsageFault_Handler+0x4>

080018a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018a6:	b480      	push	{r7}
 80018a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018aa:	bf00      	nop
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr

080018b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018b8:	bf00      	nop
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr

080018c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018c2:	b480      	push	{r7}
 80018c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018c6:	bf00      	nop
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr

080018d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018d4:	f000 f916 	bl	8001b04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018d8:	bf00      	nop
 80018da:	bd80      	pop	{r7, pc}

080018dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80018e0:	4b32      	ldr	r3, [pc, #200]	; (80019ac <SystemInit+0xd0>)
 80018e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018e6:	4a31      	ldr	r2, [pc, #196]	; (80019ac <SystemInit+0xd0>)
 80018e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80018f0:	4b2f      	ldr	r3, [pc, #188]	; (80019b0 <SystemInit+0xd4>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 030f 	and.w	r3, r3, #15
 80018f8:	2b02      	cmp	r3, #2
 80018fa:	d807      	bhi.n	800190c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80018fc:	4b2c      	ldr	r3, [pc, #176]	; (80019b0 <SystemInit+0xd4>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f023 030f 	bic.w	r3, r3, #15
 8001904:	4a2a      	ldr	r2, [pc, #168]	; (80019b0 <SystemInit+0xd4>)
 8001906:	f043 0303 	orr.w	r3, r3, #3
 800190a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800190c:	4b29      	ldr	r3, [pc, #164]	; (80019b4 <SystemInit+0xd8>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a28      	ldr	r2, [pc, #160]	; (80019b4 <SystemInit+0xd8>)
 8001912:	f043 0301 	orr.w	r3, r3, #1
 8001916:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001918:	4b26      	ldr	r3, [pc, #152]	; (80019b4 <SystemInit+0xd8>)
 800191a:	2200      	movs	r2, #0
 800191c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800191e:	4b25      	ldr	r3, [pc, #148]	; (80019b4 <SystemInit+0xd8>)
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	4924      	ldr	r1, [pc, #144]	; (80019b4 <SystemInit+0xd8>)
 8001924:	4b24      	ldr	r3, [pc, #144]	; (80019b8 <SystemInit+0xdc>)
 8001926:	4013      	ands	r3, r2
 8001928:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800192a:	4b21      	ldr	r3, [pc, #132]	; (80019b0 <SystemInit+0xd4>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 030c 	and.w	r3, r3, #12
 8001932:	2b00      	cmp	r3, #0
 8001934:	d007      	beq.n	8001946 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001936:	4b1e      	ldr	r3, [pc, #120]	; (80019b0 <SystemInit+0xd4>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f023 030f 	bic.w	r3, r3, #15
 800193e:	4a1c      	ldr	r2, [pc, #112]	; (80019b0 <SystemInit+0xd4>)
 8001940:	f043 0303 	orr.w	r3, r3, #3
 8001944:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8001946:	4b1b      	ldr	r3, [pc, #108]	; (80019b4 <SystemInit+0xd8>)
 8001948:	2200      	movs	r2, #0
 800194a:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 800194c:	4b19      	ldr	r3, [pc, #100]	; (80019b4 <SystemInit+0xd8>)
 800194e:	2200      	movs	r2, #0
 8001950:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8001952:	4b18      	ldr	r3, [pc, #96]	; (80019b4 <SystemInit+0xd8>)
 8001954:	2200      	movs	r2, #0
 8001956:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001958:	4b16      	ldr	r3, [pc, #88]	; (80019b4 <SystemInit+0xd8>)
 800195a:	4a18      	ldr	r2, [pc, #96]	; (80019bc <SystemInit+0xe0>)
 800195c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800195e:	4b15      	ldr	r3, [pc, #84]	; (80019b4 <SystemInit+0xd8>)
 8001960:	4a17      	ldr	r2, [pc, #92]	; (80019c0 <SystemInit+0xe4>)
 8001962:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001964:	4b13      	ldr	r3, [pc, #76]	; (80019b4 <SystemInit+0xd8>)
 8001966:	4a17      	ldr	r2, [pc, #92]	; (80019c4 <SystemInit+0xe8>)
 8001968:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800196a:	4b12      	ldr	r3, [pc, #72]	; (80019b4 <SystemInit+0xd8>)
 800196c:	2200      	movs	r2, #0
 800196e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001970:	4b10      	ldr	r3, [pc, #64]	; (80019b4 <SystemInit+0xd8>)
 8001972:	4a14      	ldr	r2, [pc, #80]	; (80019c4 <SystemInit+0xe8>)
 8001974:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001976:	4b0f      	ldr	r3, [pc, #60]	; (80019b4 <SystemInit+0xd8>)
 8001978:	2200      	movs	r2, #0
 800197a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800197c:	4b0d      	ldr	r3, [pc, #52]	; (80019b4 <SystemInit+0xd8>)
 800197e:	4a11      	ldr	r2, [pc, #68]	; (80019c4 <SystemInit+0xe8>)
 8001980:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001982:	4b0c      	ldr	r3, [pc, #48]	; (80019b4 <SystemInit+0xd8>)
 8001984:	2200      	movs	r2, #0
 8001986:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001988:	4b0a      	ldr	r3, [pc, #40]	; (80019b4 <SystemInit+0xd8>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a09      	ldr	r2, [pc, #36]	; (80019b4 <SystemInit+0xd8>)
 800198e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001992:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001994:	4b07      	ldr	r3, [pc, #28]	; (80019b4 <SystemInit+0xd8>)
 8001996:	2200      	movs	r2, #0
 8001998:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800199a:	4b0b      	ldr	r3, [pc, #44]	; (80019c8 <SystemInit+0xec>)
 800199c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80019a0:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 80019a2:	bf00      	nop
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr
 80019ac:	e000ed00 	.word	0xe000ed00
 80019b0:	52002000 	.word	0x52002000
 80019b4:	58024400 	.word	0x58024400
 80019b8:	eaf6ed7f 	.word	0xeaf6ed7f
 80019bc:	02020200 	.word	0x02020200
 80019c0:	01ff0000 	.word	0x01ff0000
 80019c4:	01010280 	.word	0x01010280
 80019c8:	52004000 	.word	0x52004000

080019cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80019cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a04 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80019d0:	f7ff ff84 	bl	80018dc <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019d4:	480c      	ldr	r0, [pc, #48]	; (8001a08 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80019d6:	490d      	ldr	r1, [pc, #52]	; (8001a0c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80019d8:	4a0d      	ldr	r2, [pc, #52]	; (8001a10 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80019da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019dc:	e002      	b.n	80019e4 <LoopCopyDataInit>

080019de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019e2:	3304      	adds	r3, #4

080019e4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 80019e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019e8:	d3f9      	bcc.n	80019de <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019ea:	4a0a      	ldr	r2, [pc, #40]	; (8001a14 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80019ec:	4c0a      	ldr	r4, [pc, #40]	; (8001a18 <LoopFillZerobss+0x22>)
  movs r3, #0
 80019ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019f0:	e001      	b.n	80019f6 <LoopFillZerobss>

080019f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019f4:	3204      	adds	r2, #4

080019f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019f8:	d3fb      	bcc.n	80019f2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80019fa:	f006 fcf3 	bl	80083e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019fe:	f7fe fdf7 	bl	80005f0 <main>
  bx  lr
 8001a02:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a04:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001a08:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001a0c:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001a10:	0800849c 	.word	0x0800849c
  ldr r2, =_sbss
 8001a14:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8001a18:	24000350 	.word	0x24000350

08001a1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a1c:	e7fe      	b.n	8001a1c <ADC_IRQHandler>
	...

08001a20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a26:	2003      	movs	r0, #3
 8001a28:	f000 f962 	bl	8001cf0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001a2c:	f002 fda8 	bl	8004580 <HAL_RCC_GetSysClockFreq>
 8001a30:	4602      	mov	r2, r0
 8001a32:	4b15      	ldr	r3, [pc, #84]	; (8001a88 <HAL_Init+0x68>)
 8001a34:	699b      	ldr	r3, [r3, #24]
 8001a36:	0a1b      	lsrs	r3, r3, #8
 8001a38:	f003 030f 	and.w	r3, r3, #15
 8001a3c:	4913      	ldr	r1, [pc, #76]	; (8001a8c <HAL_Init+0x6c>)
 8001a3e:	5ccb      	ldrb	r3, [r1, r3]
 8001a40:	f003 031f 	and.w	r3, r3, #31
 8001a44:	fa22 f303 	lsr.w	r3, r2, r3
 8001a48:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001a4a:	4b0f      	ldr	r3, [pc, #60]	; (8001a88 <HAL_Init+0x68>)
 8001a4c:	699b      	ldr	r3, [r3, #24]
 8001a4e:	f003 030f 	and.w	r3, r3, #15
 8001a52:	4a0e      	ldr	r2, [pc, #56]	; (8001a8c <HAL_Init+0x6c>)
 8001a54:	5cd3      	ldrb	r3, [r2, r3]
 8001a56:	f003 031f 	and.w	r3, r3, #31
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	fa22 f303 	lsr.w	r3, r2, r3
 8001a60:	4a0b      	ldr	r2, [pc, #44]	; (8001a90 <HAL_Init+0x70>)
 8001a62:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001a64:	4a0b      	ldr	r2, [pc, #44]	; (8001a94 <HAL_Init+0x74>)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a6a:	2000      	movs	r0, #0
 8001a6c:	f000 f814 	bl	8001a98 <HAL_InitTick>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e002      	b.n	8001a80 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001a7a:	f7ff fa9b 	bl	8000fb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a7e:	2300      	movs	r3, #0
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3708      	adds	r7, #8
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	58024400 	.word	0x58024400
 8001a8c:	08008454 	.word	0x08008454
 8001a90:	24000004 	.word	0x24000004
 8001a94:	24000000 	.word	0x24000000

08001a98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001aa0:	4b15      	ldr	r3, [pc, #84]	; (8001af8 <HAL_InitTick+0x60>)
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d101      	bne.n	8001aac <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e021      	b.n	8001af0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001aac:	4b13      	ldr	r3, [pc, #76]	; (8001afc <HAL_InitTick+0x64>)
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	4b11      	ldr	r3, [pc, #68]	; (8001af8 <HAL_InitTick+0x60>)
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001aba:	fbb3 f3f1 	udiv	r3, r3, r1
 8001abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f000 f939 	bl	8001d3a <HAL_SYSTICK_Config>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e00e      	b.n	8001af0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2b0f      	cmp	r3, #15
 8001ad6:	d80a      	bhi.n	8001aee <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ad8:	2200      	movs	r2, #0
 8001ada:	6879      	ldr	r1, [r7, #4]
 8001adc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ae0:	f000 f911 	bl	8001d06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ae4:	4a06      	ldr	r2, [pc, #24]	; (8001b00 <HAL_InitTick+0x68>)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001aea:	2300      	movs	r3, #0
 8001aec:	e000      	b.n	8001af0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3708      	adds	r7, #8
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	2400000c 	.word	0x2400000c
 8001afc:	24000000 	.word	0x24000000
 8001b00:	24000008 	.word	0x24000008

08001b04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b08:	4b06      	ldr	r3, [pc, #24]	; (8001b24 <HAL_IncTick+0x20>)
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	4b06      	ldr	r3, [pc, #24]	; (8001b28 <HAL_IncTick+0x24>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4413      	add	r3, r2
 8001b14:	4a04      	ldr	r2, [pc, #16]	; (8001b28 <HAL_IncTick+0x24>)
 8001b16:	6013      	str	r3, [r2, #0]
}
 8001b18:	bf00      	nop
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	2400000c 	.word	0x2400000c
 8001b28:	2400034c 	.word	0x2400034c

08001b2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b30:	4b03      	ldr	r3, [pc, #12]	; (8001b40 <HAL_GetTick+0x14>)
 8001b32:	681b      	ldr	r3, [r3, #0]
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	2400034c 	.word	0x2400034c

08001b44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b084      	sub	sp, #16
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b4c:	f7ff ffee 	bl	8001b2c <HAL_GetTick>
 8001b50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b5c:	d005      	beq.n	8001b6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b5e:	4b0a      	ldr	r3, [pc, #40]	; (8001b88 <HAL_Delay+0x44>)
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	461a      	mov	r2, r3
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	4413      	add	r3, r2
 8001b68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b6a:	bf00      	nop
 8001b6c:	f7ff ffde 	bl	8001b2c <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	68fa      	ldr	r2, [r7, #12]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d8f7      	bhi.n	8001b6c <HAL_Delay+0x28>
  {
  }
}
 8001b7c:	bf00      	nop
 8001b7e:	bf00      	nop
 8001b80:	3710      	adds	r7, #16
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	2400000c 	.word	0x2400000c

08001b8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b085      	sub	sp, #20
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f003 0307 	and.w	r3, r3, #7
 8001b9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b9c:	4b0b      	ldr	r3, [pc, #44]	; (8001bcc <__NVIC_SetPriorityGrouping+0x40>)
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ba2:	68ba      	ldr	r2, [r7, #8]
 8001ba4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ba8:	4013      	ands	r3, r2
 8001baa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001bb4:	4b06      	ldr	r3, [pc, #24]	; (8001bd0 <__NVIC_SetPriorityGrouping+0x44>)
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bba:	4a04      	ldr	r2, [pc, #16]	; (8001bcc <__NVIC_SetPriorityGrouping+0x40>)
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	60d3      	str	r3, [r2, #12]
}
 8001bc0:	bf00      	nop
 8001bc2:	3714      	adds	r7, #20
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr
 8001bcc:	e000ed00 	.word	0xe000ed00
 8001bd0:	05fa0000 	.word	0x05fa0000

08001bd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bd8:	4b04      	ldr	r3, [pc, #16]	; (8001bec <__NVIC_GetPriorityGrouping+0x18>)
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	0a1b      	lsrs	r3, r3, #8
 8001bde:	f003 0307 	and.w	r3, r3, #7
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr
 8001bec:	e000ed00 	.word	0xe000ed00

08001bf0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	6039      	str	r1, [r7, #0]
 8001bfa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001bfc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	db0a      	blt.n	8001c1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	b2da      	uxtb	r2, r3
 8001c08:	490c      	ldr	r1, [pc, #48]	; (8001c3c <__NVIC_SetPriority+0x4c>)
 8001c0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c0e:	0112      	lsls	r2, r2, #4
 8001c10:	b2d2      	uxtb	r2, r2
 8001c12:	440b      	add	r3, r1
 8001c14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c18:	e00a      	b.n	8001c30 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	b2da      	uxtb	r2, r3
 8001c1e:	4908      	ldr	r1, [pc, #32]	; (8001c40 <__NVIC_SetPriority+0x50>)
 8001c20:	88fb      	ldrh	r3, [r7, #6]
 8001c22:	f003 030f 	and.w	r3, r3, #15
 8001c26:	3b04      	subs	r3, #4
 8001c28:	0112      	lsls	r2, r2, #4
 8001c2a:	b2d2      	uxtb	r2, r2
 8001c2c:	440b      	add	r3, r1
 8001c2e:	761a      	strb	r2, [r3, #24]
}
 8001c30:	bf00      	nop
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr
 8001c3c:	e000e100 	.word	0xe000e100
 8001c40:	e000ed00 	.word	0xe000ed00

08001c44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b089      	sub	sp, #36	; 0x24
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	60f8      	str	r0, [r7, #12]
 8001c4c:	60b9      	str	r1, [r7, #8]
 8001c4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	f003 0307 	and.w	r3, r3, #7
 8001c56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	f1c3 0307 	rsb	r3, r3, #7
 8001c5e:	2b04      	cmp	r3, #4
 8001c60:	bf28      	it	cs
 8001c62:	2304      	movcs	r3, #4
 8001c64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	3304      	adds	r3, #4
 8001c6a:	2b06      	cmp	r3, #6
 8001c6c:	d902      	bls.n	8001c74 <NVIC_EncodePriority+0x30>
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	3b03      	subs	r3, #3
 8001c72:	e000      	b.n	8001c76 <NVIC_EncodePriority+0x32>
 8001c74:	2300      	movs	r3, #0
 8001c76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c78:	f04f 32ff 	mov.w	r2, #4294967295
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c82:	43da      	mvns	r2, r3
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	401a      	ands	r2, r3
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c8c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	fa01 f303 	lsl.w	r3, r1, r3
 8001c96:	43d9      	mvns	r1, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c9c:	4313      	orrs	r3, r2
         );
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3724      	adds	r7, #36	; 0x24
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
	...

08001cac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	3b01      	subs	r3, #1
 8001cb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cbc:	d301      	bcc.n	8001cc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e00f      	b.n	8001ce2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cc2:	4a0a      	ldr	r2, [pc, #40]	; (8001cec <SysTick_Config+0x40>)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	3b01      	subs	r3, #1
 8001cc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cca:	210f      	movs	r1, #15
 8001ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8001cd0:	f7ff ff8e 	bl	8001bf0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cd4:	4b05      	ldr	r3, [pc, #20]	; (8001cec <SysTick_Config+0x40>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cda:	4b04      	ldr	r3, [pc, #16]	; (8001cec <SysTick_Config+0x40>)
 8001cdc:	2207      	movs	r2, #7
 8001cde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ce0:	2300      	movs	r3, #0
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	e000e010 	.word	0xe000e010

08001cf0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f7ff ff47 	bl	8001b8c <__NVIC_SetPriorityGrouping>
}
 8001cfe:	bf00      	nop
 8001d00:	3708      	adds	r7, #8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}

08001d06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d06:	b580      	push	{r7, lr}
 8001d08:	b086      	sub	sp, #24
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	60b9      	str	r1, [r7, #8]
 8001d10:	607a      	str	r2, [r7, #4]
 8001d12:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d14:	f7ff ff5e 	bl	8001bd4 <__NVIC_GetPriorityGrouping>
 8001d18:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d1a:	687a      	ldr	r2, [r7, #4]
 8001d1c:	68b9      	ldr	r1, [r7, #8]
 8001d1e:	6978      	ldr	r0, [r7, #20]
 8001d20:	f7ff ff90 	bl	8001c44 <NVIC_EncodePriority>
 8001d24:	4602      	mov	r2, r0
 8001d26:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001d2a:	4611      	mov	r1, r2
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f7ff ff5f 	bl	8001bf0 <__NVIC_SetPriority>
}
 8001d32:	bf00      	nop
 8001d34:	3718      	adds	r7, #24
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}

08001d3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d3a:	b580      	push	{r7, lr}
 8001d3c:	b082      	sub	sp, #8
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f7ff ffb2 	bl	8001cac <SysTick_Config>
 8001d48:	4603      	mov	r3, r0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3708      	adds	r7, #8
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
	...

08001d54 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b089      	sub	sp, #36	; 0x24
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001d62:	4b89      	ldr	r3, [pc, #548]	; (8001f88 <HAL_GPIO_Init+0x234>)
 8001d64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001d66:	e194      	b.n	8002092 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	2101      	movs	r1, #1
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	fa01 f303 	lsl.w	r3, r1, r3
 8001d74:	4013      	ands	r3, r2
 8001d76:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	f000 8186 	beq.w	800208c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f003 0303 	and.w	r3, r3, #3
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d005      	beq.n	8001d98 <HAL_GPIO_Init+0x44>
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f003 0303 	and.w	r3, r3, #3
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	d130      	bne.n	8001dfa <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	005b      	lsls	r3, r3, #1
 8001da2:	2203      	movs	r2, #3
 8001da4:	fa02 f303 	lsl.w	r3, r2, r3
 8001da8:	43db      	mvns	r3, r3
 8001daa:	69ba      	ldr	r2, [r7, #24]
 8001dac:	4013      	ands	r3, r2
 8001dae:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	68da      	ldr	r2, [r3, #12]
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	005b      	lsls	r3, r3, #1
 8001db8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbc:	69ba      	ldr	r2, [r7, #24]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	69ba      	ldr	r2, [r7, #24]
 8001dc6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001dce:	2201      	movs	r2, #1
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd6:	43db      	mvns	r3, r3
 8001dd8:	69ba      	ldr	r2, [r7, #24]
 8001dda:	4013      	ands	r3, r2
 8001ddc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	091b      	lsrs	r3, r3, #4
 8001de4:	f003 0201 	and.w	r2, r3, #1
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	fa02 f303 	lsl.w	r3, r2, r3
 8001dee:	69ba      	ldr	r2, [r7, #24]
 8001df0:	4313      	orrs	r3, r2
 8001df2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	69ba      	ldr	r2, [r7, #24]
 8001df8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	f003 0303 	and.w	r3, r3, #3
 8001e02:	2b03      	cmp	r3, #3
 8001e04:	d017      	beq.n	8001e36 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	005b      	lsls	r3, r3, #1
 8001e10:	2203      	movs	r2, #3
 8001e12:	fa02 f303 	lsl.w	r3, r2, r3
 8001e16:	43db      	mvns	r3, r3
 8001e18:	69ba      	ldr	r2, [r7, #24]
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	689a      	ldr	r2, [r3, #8]
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2a:	69ba      	ldr	r2, [r7, #24]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	69ba      	ldr	r2, [r7, #24]
 8001e34:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	f003 0303 	and.w	r3, r3, #3
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d123      	bne.n	8001e8a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	08da      	lsrs	r2, r3, #3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	3208      	adds	r2, #8
 8001e4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	f003 0307 	and.w	r3, r3, #7
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	220f      	movs	r2, #15
 8001e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5e:	43db      	mvns	r3, r3
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	4013      	ands	r3, r2
 8001e64:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	691a      	ldr	r2, [r3, #16]
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	f003 0307 	and.w	r3, r3, #7
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	fa02 f303 	lsl.w	r3, r2, r3
 8001e76:	69ba      	ldr	r2, [r7, #24]
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	08da      	lsrs	r2, r3, #3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	3208      	adds	r2, #8
 8001e84:	69b9      	ldr	r1, [r7, #24]
 8001e86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	005b      	lsls	r3, r3, #1
 8001e94:	2203      	movs	r2, #3
 8001e96:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9a:	43db      	mvns	r3, r3
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	f003 0203 	and.w	r2, r3, #3
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	005b      	lsls	r3, r3, #1
 8001eae:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb2:	69ba      	ldr	r2, [r7, #24]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	69ba      	ldr	r2, [r7, #24]
 8001ebc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	f000 80e0 	beq.w	800208c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ecc:	4b2f      	ldr	r3, [pc, #188]	; (8001f8c <HAL_GPIO_Init+0x238>)
 8001ece:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001ed2:	4a2e      	ldr	r2, [pc, #184]	; (8001f8c <HAL_GPIO_Init+0x238>)
 8001ed4:	f043 0302 	orr.w	r3, r3, #2
 8001ed8:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8001edc:	4b2b      	ldr	r3, [pc, #172]	; (8001f8c <HAL_GPIO_Init+0x238>)
 8001ede:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001ee2:	f003 0302 	and.w	r3, r3, #2
 8001ee6:	60fb      	str	r3, [r7, #12]
 8001ee8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001eea:	4a29      	ldr	r2, [pc, #164]	; (8001f90 <HAL_GPIO_Init+0x23c>)
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	089b      	lsrs	r3, r3, #2
 8001ef0:	3302      	adds	r3, #2
 8001ef2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	f003 0303 	and.w	r3, r3, #3
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	220f      	movs	r2, #15
 8001f02:	fa02 f303 	lsl.w	r3, r2, r3
 8001f06:	43db      	mvns	r3, r3
 8001f08:	69ba      	ldr	r2, [r7, #24]
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a20      	ldr	r2, [pc, #128]	; (8001f94 <HAL_GPIO_Init+0x240>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d052      	beq.n	8001fbc <HAL_GPIO_Init+0x268>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a1f      	ldr	r2, [pc, #124]	; (8001f98 <HAL_GPIO_Init+0x244>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d031      	beq.n	8001f82 <HAL_GPIO_Init+0x22e>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a1e      	ldr	r2, [pc, #120]	; (8001f9c <HAL_GPIO_Init+0x248>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d02b      	beq.n	8001f7e <HAL_GPIO_Init+0x22a>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a1d      	ldr	r2, [pc, #116]	; (8001fa0 <HAL_GPIO_Init+0x24c>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d025      	beq.n	8001f7a <HAL_GPIO_Init+0x226>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a1c      	ldr	r2, [pc, #112]	; (8001fa4 <HAL_GPIO_Init+0x250>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d01f      	beq.n	8001f76 <HAL_GPIO_Init+0x222>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a1b      	ldr	r2, [pc, #108]	; (8001fa8 <HAL_GPIO_Init+0x254>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d019      	beq.n	8001f72 <HAL_GPIO_Init+0x21e>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4a1a      	ldr	r2, [pc, #104]	; (8001fac <HAL_GPIO_Init+0x258>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d013      	beq.n	8001f6e <HAL_GPIO_Init+0x21a>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a19      	ldr	r2, [pc, #100]	; (8001fb0 <HAL_GPIO_Init+0x25c>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d00d      	beq.n	8001f6a <HAL_GPIO_Init+0x216>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a18      	ldr	r2, [pc, #96]	; (8001fb4 <HAL_GPIO_Init+0x260>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d007      	beq.n	8001f66 <HAL_GPIO_Init+0x212>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a17      	ldr	r2, [pc, #92]	; (8001fb8 <HAL_GPIO_Init+0x264>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d101      	bne.n	8001f62 <HAL_GPIO_Init+0x20e>
 8001f5e:	2309      	movs	r3, #9
 8001f60:	e02d      	b.n	8001fbe <HAL_GPIO_Init+0x26a>
 8001f62:	230a      	movs	r3, #10
 8001f64:	e02b      	b.n	8001fbe <HAL_GPIO_Init+0x26a>
 8001f66:	2308      	movs	r3, #8
 8001f68:	e029      	b.n	8001fbe <HAL_GPIO_Init+0x26a>
 8001f6a:	2307      	movs	r3, #7
 8001f6c:	e027      	b.n	8001fbe <HAL_GPIO_Init+0x26a>
 8001f6e:	2306      	movs	r3, #6
 8001f70:	e025      	b.n	8001fbe <HAL_GPIO_Init+0x26a>
 8001f72:	2305      	movs	r3, #5
 8001f74:	e023      	b.n	8001fbe <HAL_GPIO_Init+0x26a>
 8001f76:	2304      	movs	r3, #4
 8001f78:	e021      	b.n	8001fbe <HAL_GPIO_Init+0x26a>
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e01f      	b.n	8001fbe <HAL_GPIO_Init+0x26a>
 8001f7e:	2302      	movs	r3, #2
 8001f80:	e01d      	b.n	8001fbe <HAL_GPIO_Init+0x26a>
 8001f82:	2301      	movs	r3, #1
 8001f84:	e01b      	b.n	8001fbe <HAL_GPIO_Init+0x26a>
 8001f86:	bf00      	nop
 8001f88:	58000080 	.word	0x58000080
 8001f8c:	58024400 	.word	0x58024400
 8001f90:	58000400 	.word	0x58000400
 8001f94:	58020000 	.word	0x58020000
 8001f98:	58020400 	.word	0x58020400
 8001f9c:	58020800 	.word	0x58020800
 8001fa0:	58020c00 	.word	0x58020c00
 8001fa4:	58021000 	.word	0x58021000
 8001fa8:	58021400 	.word	0x58021400
 8001fac:	58021800 	.word	0x58021800
 8001fb0:	58021c00 	.word	0x58021c00
 8001fb4:	58022000 	.word	0x58022000
 8001fb8:	58022400 	.word	0x58022400
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	69fa      	ldr	r2, [r7, #28]
 8001fc0:	f002 0203 	and.w	r2, r2, #3
 8001fc4:	0092      	lsls	r2, r2, #2
 8001fc6:	4093      	lsls	r3, r2
 8001fc8:	69ba      	ldr	r2, [r7, #24]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fce:	4938      	ldr	r1, [pc, #224]	; (80020b0 <HAL_GPIO_Init+0x35c>)
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	089b      	lsrs	r3, r3, #2
 8001fd4:	3302      	adds	r3, #2
 8001fd6:	69ba      	ldr	r2, [r7, #24]
 8001fd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001fdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	43db      	mvns	r3, r3
 8001fe8:	69ba      	ldr	r2, [r7, #24]
 8001fea:	4013      	ands	r3, r2
 8001fec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d003      	beq.n	8002002 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001ffa:	69ba      	ldr	r2, [r7, #24]
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002002:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002006:	69bb      	ldr	r3, [r7, #24]
 8002008:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800200a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	43db      	mvns	r3, r3
 8002016:	69ba      	ldr	r2, [r7, #24]
 8002018:	4013      	ands	r3, r2
 800201a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002024:	2b00      	cmp	r3, #0
 8002026:	d003      	beq.n	8002030 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002028:	69ba      	ldr	r2, [r7, #24]
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	4313      	orrs	r3, r2
 800202e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002030:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002034:	69bb      	ldr	r3, [r7, #24]
 8002036:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	43db      	mvns	r3, r3
 8002042:	69ba      	ldr	r2, [r7, #24]
 8002044:	4013      	ands	r3, r2
 8002046:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002050:	2b00      	cmp	r3, #0
 8002052:	d003      	beq.n	800205c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002054:	69ba      	ldr	r2, [r7, #24]
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	4313      	orrs	r3, r2
 800205a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	69ba      	ldr	r2, [r7, #24]
 8002060:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	43db      	mvns	r3, r3
 800206c:	69ba      	ldr	r2, [r7, #24]
 800206e:	4013      	ands	r3, r2
 8002070:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d003      	beq.n	8002086 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800207e:	69ba      	ldr	r2, [r7, #24]
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	4313      	orrs	r3, r2
 8002084:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	69ba      	ldr	r2, [r7, #24]
 800208a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	3301      	adds	r3, #1
 8002090:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	fa22 f303 	lsr.w	r3, r2, r3
 800209c:	2b00      	cmp	r3, #0
 800209e:	f47f ae63 	bne.w	8001d68 <HAL_GPIO_Init+0x14>
  }
}
 80020a2:	bf00      	nop
 80020a4:	bf00      	nop
 80020a6:	3724      	adds	r7, #36	; 0x24
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr
 80020b0:	58000400 	.word	0x58000400

080020b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	460b      	mov	r3, r1
 80020be:	807b      	strh	r3, [r7, #2]
 80020c0:	4613      	mov	r3, r2
 80020c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020c4:	787b      	ldrb	r3, [r7, #1]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d003      	beq.n	80020d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020ca:	887a      	ldrh	r2, [r7, #2]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80020d0:	e003      	b.n	80020da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80020d2:	887b      	ldrh	r3, [r7, #2]
 80020d4:	041a      	lsls	r2, r3, #16
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	619a      	str	r2, [r3, #24]
}
 80020da:	bf00      	nop
 80020dc:	370c      	adds	r7, #12
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr

080020e6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80020e6:	b480      	push	{r7}
 80020e8:	b085      	sub	sp, #20
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	6078      	str	r0, [r7, #4]
 80020ee:	460b      	mov	r3, r1
 80020f0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	695b      	ldr	r3, [r3, #20]
 80020f6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80020f8:	887a      	ldrh	r2, [r7, #2]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	4013      	ands	r3, r2
 80020fe:	041a      	lsls	r2, r3, #16
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	43d9      	mvns	r1, r3
 8002104:	887b      	ldrh	r3, [r7, #2]
 8002106:	400b      	ands	r3, r1
 8002108:	431a      	orrs	r2, r3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	619a      	str	r2, [r3, #24]
}
 800210e:	bf00      	nop
 8002110:	3714      	adds	r7, #20
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
	...

0800211c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d101      	bne.n	800212e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e07f      	b.n	800222e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002134:	b2db      	uxtb	r3, r3
 8002136:	2b00      	cmp	r3, #0
 8002138:	d106      	bne.n	8002148 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f7fe ff50 	bl	8000fe8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2224      	movs	r2, #36	; 0x24
 800214c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f022 0201 	bic.w	r2, r2, #1
 800215e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	685a      	ldr	r2, [r3, #4]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800216c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	689a      	ldr	r2, [r3, #8]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800217c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	68db      	ldr	r3, [r3, #12]
 8002182:	2b01      	cmp	r3, #1
 8002184:	d107      	bne.n	8002196 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	689a      	ldr	r2, [r3, #8]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002192:	609a      	str	r2, [r3, #8]
 8002194:	e006      	b.n	80021a4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	689a      	ldr	r2, [r3, #8]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80021a2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	2b02      	cmp	r3, #2
 80021aa:	d104      	bne.n	80021b6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80021b4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	6859      	ldr	r1, [r3, #4]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	4b1d      	ldr	r3, [pc, #116]	; (8002238 <HAL_I2C_Init+0x11c>)
 80021c2:	430b      	orrs	r3, r1
 80021c4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	68da      	ldr	r2, [r3, #12]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021d4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	691a      	ldr	r2, [r3, #16]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	695b      	ldr	r3, [r3, #20]
 80021de:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	699b      	ldr	r3, [r3, #24]
 80021e6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	430a      	orrs	r2, r1
 80021ee:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	69d9      	ldr	r1, [r3, #28]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6a1a      	ldr	r2, [r3, #32]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	430a      	orrs	r2, r1
 80021fe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f042 0201 	orr.w	r2, r2, #1
 800220e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2200      	movs	r2, #0
 8002214:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2220      	movs	r2, #32
 800221a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2200      	movs	r2, #0
 8002228:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800222c:	2300      	movs	r3, #0
}
 800222e:	4618      	mov	r0, r3
 8002230:	3708      	adds	r7, #8
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	02008000 	.word	0x02008000

0800223c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800224c:	b2db      	uxtb	r3, r3
 800224e:	2b20      	cmp	r3, #32
 8002250:	d138      	bne.n	80022c4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002258:	2b01      	cmp	r3, #1
 800225a:	d101      	bne.n	8002260 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800225c:	2302      	movs	r3, #2
 800225e:	e032      	b.n	80022c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2201      	movs	r2, #1
 8002264:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2224      	movs	r2, #36	; 0x24
 800226c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f022 0201 	bic.w	r2, r2, #1
 800227e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800228e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	6819      	ldr	r1, [r3, #0]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	683a      	ldr	r2, [r7, #0]
 800229c:	430a      	orrs	r2, r1
 800229e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f042 0201 	orr.w	r2, r2, #1
 80022ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2220      	movs	r2, #32
 80022b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2200      	movs	r2, #0
 80022bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80022c0:	2300      	movs	r3, #0
 80022c2:	e000      	b.n	80022c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80022c4:	2302      	movs	r3, #2
  }
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	370c      	adds	r7, #12
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr

080022d2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80022d2:	b480      	push	{r7}
 80022d4:	b085      	sub	sp, #20
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	6078      	str	r0, [r7, #4]
 80022da:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	2b20      	cmp	r3, #32
 80022e6:	d139      	bne.n	800235c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d101      	bne.n	80022f6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80022f2:	2302      	movs	r3, #2
 80022f4:	e033      	b.n	800235e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2201      	movs	r2, #1
 80022fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2224      	movs	r2, #36	; 0x24
 8002302:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f022 0201 	bic.w	r2, r2, #1
 8002314:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002324:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	021b      	lsls	r3, r3, #8
 800232a:	68fa      	ldr	r2, [r7, #12]
 800232c:	4313      	orrs	r3, r2
 800232e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	68fa      	ldr	r2, [r7, #12]
 8002336:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f042 0201 	orr.w	r2, r2, #1
 8002346:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2220      	movs	r2, #32
 800234c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2200      	movs	r2, #0
 8002354:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002358:	2300      	movs	r3, #0
 800235a:	e000      	b.n	800235e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800235c:	2302      	movs	r3, #2
  }
}
 800235e:	4618      	mov	r0, r3
 8002360:	3714      	adds	r7, #20
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
	...

0800236c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b088      	sub	sp, #32
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t i2sclk;
  uint32_t ispcm;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d101      	bne.n	800237e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e116      	b.n	80025ac <HAL_I2S_Init+0x240>
  assert_param(IS_I2S_FIRST_BIT(hi2s->Init.FirstBit));
  assert_param(IS_I2S_WS_INVERSION(hi2s->Init.WSInversion));
  assert_param(IS_I2S_DATA_24BIT_ALIGNMENT(hi2s->Init.Data24BitAlignment));
  assert_param(IS_I2S_MASTER_KEEP_IO_STATE(hi2s->Init.MasterKeepIOState));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8002384:	b2db      	uxtb	r3, r3
 8002386:	2b00      	cmp	r3, #0
 8002388:	d106      	bne.n	8002398 <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2200      	movs	r2, #0
 800238e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f7fe fe8e 	bl	80010b4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2202      	movs	r2, #2
 800239c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Disable the selected I2S peripheral */
  if ((hi2s->Instance->CR1 & SPI_CR1_SPE) == SPI_CR1_SPE)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0301 	and.w	r3, r3, #1
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d107      	bne.n	80023be <HAL_I2S_Init+0x52>
  {
    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f022 0201 	bic.w	r2, r2, #1
 80023bc:	601a      	str	r2, [r3, #0]
  }

  /* Clear I2S configuration register */
  CLEAR_REG(hi2s->Instance->I2SCFGR);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	2200      	movs	r2, #0
 80023c4:	651a      	str	r2, [r3, #80]	; 0x50

  if (IS_I2S_MASTER(hi2s->Init.Mode))
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	2b04      	cmp	r3, #4
 80023cc:	d008      	beq.n	80023e0 <HAL_I2S_Init+0x74>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	2b06      	cmp	r3, #6
 80023d4:	d004      	beq.n	80023e0 <HAL_I2S_Init+0x74>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	2b0a      	cmp	r3, #10
 80023dc:	f040 8090 	bne.w	8002500 <HAL_I2S_Init+0x194>
  {
    /*------------------------- I2SDIV and ODD Calculation ---------------------*/
    /* If the requested audio frequency is not the default, compute the prescaler */
    if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	695b      	ldr	r3, [r3, #20]
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	d063      	beq.n	80024b0 <HAL_I2S_Init+0x144>
    {
      /* Check the frame length (For the Prescaler computing) ********************/
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d002      	beq.n	80023f6 <HAL_I2S_Init+0x8a>
      {
        /* Channel length is 32 bits */
        packetlength = 2UL;
 80023f0:	2302      	movs	r3, #2
 80023f2:	617b      	str	r3, [r7, #20]
 80023f4:	e001      	b.n	80023fa <HAL_I2S_Init+0x8e>
      }
      else
      {
        /* Channel length is 16 bits */
        packetlength = 1UL;
 80023f6:	2301      	movs	r3, #1
 80023f8:	617b      	str	r3, [r7, #20]
      }

      /* Check if PCM standard is used */
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	2b30      	cmp	r3, #48	; 0x30
 8002400:	d003      	beq.n	800240a <HAL_I2S_Init+0x9e>
          (hi2s->Init.Standard == I2S_STANDARD_PCM_LONG))
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	689b      	ldr	r3, [r3, #8]
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 8002406:	2bb0      	cmp	r3, #176	; 0xb0
 8002408:	d102      	bne.n	8002410 <HAL_I2S_Init+0xa4>
      {
        ispcm = 1UL;
 800240a:	2301      	movs	r3, #1
 800240c:	60bb      	str	r3, [r7, #8]
 800240e:	e001      	b.n	8002414 <HAL_I2S_Init+0xa8>
      }
      else
      {
        ispcm = 0UL;
 8002410:	2300      	movs	r3, #0
 8002412:	60bb      	str	r3, [r7, #8]
      }

      /* Get the source clock value: based on System Clock value */
#if defined (SPI_SPI6I2S_SUPPORT)
      if (hi2s->Instance == SPI6)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a66      	ldr	r2, [pc, #408]	; (80025b4 <HAL_I2S_Init+0x248>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d105      	bne.n	800242a <HAL_I2S_Init+0xbe>
      {
        /* SPI6 source clock */
        i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI6);
 800241e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002422:	f003 f98f 	bl	8005744 <HAL_RCCEx_GetPeriphCLKFreq>
 8002426:	60f8      	str	r0, [r7, #12]
 8002428:	e004      	b.n	8002434 <HAL_I2S_Init+0xc8>
      }
      else
      {
        /* SPI1,SPI2 and SPI3 share the same source clock */
        i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
 800242a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800242e:	f003 f989 	bl	8005744 <HAL_RCCEx_GetPeriphCLKFreq>
 8002432:	60f8      	str	r0, [r7, #12]
      /* SPI1,SPI2 and SPI3 share the same source clock */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
#endif  /* SPI_SPI6I2S_SUPPORT */

      /* Compute the Real divider depending on the MCLK output state, with a floating point */
      if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	691b      	ldr	r3, [r3, #16]
 8002438:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800243c:	d113      	bne.n	8002466 <HAL_I2S_Init+0xfa>
      {
        /* MCLK output is enabled */
        tmp = (uint32_t)((((i2sclk / (256UL >> ispcm)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 800243e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	fa22 f303 	lsr.w	r3, r2, r3
 8002448:	68fa      	ldr	r2, [r7, #12]
 800244a:	fbb2 f2f3 	udiv	r2, r2, r3
 800244e:	4613      	mov	r3, r2
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	4413      	add	r3, r2
 8002454:	005b      	lsls	r3, r3, #1
 8002456:	461a      	mov	r2, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	695b      	ldr	r3, [r3, #20]
 800245c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002460:	3305      	adds	r3, #5
 8002462:	613b      	str	r3, [r7, #16]
 8002464:	e014      	b.n	8002490 <HAL_I2S_Init+0x124>
      }
      else
      {
        /* MCLK output is disabled */
        tmp = (uint32_t)((((i2sclk / ((32UL >> ispcm) * packetlength)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 8002466:	2220      	movs	r2, #32
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	fa22 f303 	lsr.w	r3, r2, r3
 800246e:	697a      	ldr	r2, [r7, #20]
 8002470:	fb02 f303 	mul.w	r3, r2, r3
 8002474:	68fa      	ldr	r2, [r7, #12]
 8002476:	fbb2 f2f3 	udiv	r2, r2, r3
 800247a:	4613      	mov	r3, r2
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	4413      	add	r3, r2
 8002480:	005b      	lsls	r3, r3, #1
 8002482:	461a      	mov	r2, r3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	695b      	ldr	r3, [r3, #20]
 8002488:	fbb2 f3f3 	udiv	r3, r2, r3
 800248c:	3305      	adds	r3, #5
 800248e:	613b      	str	r3, [r7, #16]
      }

      /* Remove the flatting point */
      tmp = tmp / 10UL;
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	4a49      	ldr	r2, [pc, #292]	; (80025b8 <HAL_I2S_Init+0x24c>)
 8002494:	fba2 2303 	umull	r2, r3, r2, r3
 8002498:	08db      	lsrs	r3, r3, #3
 800249a:	613b      	str	r3, [r7, #16]

      /* Check the parity of the divider */
      i2sodd = (uint32_t)(tmp & (uint32_t)1UL);
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	f003 0301 	and.w	r3, r3, #1
 80024a2:	61bb      	str	r3, [r7, #24]

      /* Compute the i2sdiv prescaler */
      i2sdiv = (uint32_t)((tmp - i2sodd) / 2UL);
 80024a4:	693a      	ldr	r2, [r7, #16]
 80024a6:	69bb      	ldr	r3, [r7, #24]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	085b      	lsrs	r3, r3, #1
 80024ac:	61fb      	str	r3, [r7, #28]
 80024ae:	e003      	b.n	80024b8 <HAL_I2S_Init+0x14c>
    }
    else
    {
      /* Set the default values */
      i2sdiv = 2UL;
 80024b0:	2302      	movs	r3, #2
 80024b2:	61fb      	str	r3, [r7, #28]
      i2sodd = 0UL;
 80024b4:	2300      	movs	r3, #0
 80024b6:	61bb      	str	r3, [r7, #24]
    }

    /* Test if the obtain values are forbidden or out of range */
    if (((i2sodd == 1UL) && (i2sdiv == 1UL)) || (i2sdiv > 0xFFUL))
 80024b8:	69bb      	ldr	r3, [r7, #24]
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d102      	bne.n	80024c4 <HAL_I2S_Init+0x158>
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d002      	beq.n	80024ca <HAL_I2S_Init+0x15e>
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	2bff      	cmp	r3, #255	; 0xff
 80024c8:	d907      	bls.n	80024da <HAL_I2S_Init+0x16e>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024ce:	f043 0210 	orr.w	r2, r3, #16
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	651a      	str	r2, [r3, #80]	; 0x50
      return  HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e068      	b.n	80025ac <HAL_I2S_Init+0x240>
    }

    /* Force i2smod to 1 just to be sure that (2xi2sdiv + i2sodd) is always higher than 0 */
    if (i2sdiv == 0UL)
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d101      	bne.n	80024e4 <HAL_I2S_Init+0x178>
    {
      i2sodd = 1UL;
 80024e0:	2301      	movs	r3, #1
 80024e2:	61bb      	str	r3, [r7, #24]
    }

    MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SDIV                 | SPI_I2SCFGR_ODD),
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80024ea:	4b34      	ldr	r3, [pc, #208]	; (80025bc <HAL_I2S_Init+0x250>)
 80024ec:	4013      	ands	r3, r2
 80024ee:	69fa      	ldr	r2, [r7, #28]
 80024f0:	0411      	lsls	r1, r2, #16
 80024f2:	69ba      	ldr	r2, [r7, #24]
 80024f4:	0612      	lsls	r2, r2, #24
 80024f6:	4311      	orrs	r1, r2
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	6812      	ldr	r2, [r2, #0]
 80024fc:	430b      	orrs	r3, r1
 80024fe:	6513      	str	r3, [r2, #80]	; 0x50
  }

  /*-------------------------- I2Sx I2SCFGR Configuration --------------------*/
  /* Configure I2SMOD, I2SCFG, I2SSTD, PCMSYNC, DATLEN ,CHLEN ,CKPOL, WSINV, DATAFMT, I2SDIV, ODD and MCKOE bits bits */
  /* And configure the I2S with the I2S_InitStruct values */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SMOD   | SPI_I2SCFGR_I2SCFG     | \
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002506:	4b2e      	ldr	r3, [pc, #184]	; (80025c0 <HAL_I2S_Init+0x254>)
 8002508:	4013      	ands	r3, r2
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	6851      	ldr	r1, [r2, #4]
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	6892      	ldr	r2, [r2, #8]
 8002512:	4311      	orrs	r1, r2
 8002514:	687a      	ldr	r2, [r7, #4]
 8002516:	68d2      	ldr	r2, [r2, #12]
 8002518:	4311      	orrs	r1, r2
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	6992      	ldr	r2, [r2, #24]
 800251e:	4311      	orrs	r1, r2
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	6a12      	ldr	r2, [r2, #32]
 8002524:	4311      	orrs	r1, r2
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800252a:	4311      	orrs	r1, r2
 800252c:	687a      	ldr	r2, [r7, #4]
 800252e:	6912      	ldr	r2, [r2, #16]
 8002530:	430a      	orrs	r2, r1
 8002532:	431a      	orrs	r2, r3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f042 0201 	orr.w	r2, r2, #1
 800253c:	651a      	str	r2, [r3, #80]	; 0x50
             (SPI_I2SCFGR_I2SMOD   | hi2s->Init.Mode        | \
              hi2s->Init.Standard  | hi2s->Init.DataFormat  | \
              hi2s->Init.CPOL      | hi2s->Init.WSInversion | \
              hi2s->Init.Data24BitAlignment | hi2s->Init.MCLKOutput));
  /*Clear status register*/
  WRITE_REG(hi2s->Instance->IFCR, 0x0FF8);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f640 72f8 	movw	r2, #4088	; 0xff8
 8002546:	619a      	str	r2, [r3, #24]

  /*---------------------------- I2Sx CFG2 Configuration ----------------------*/

  /* Unlock the AF configuration to configure CFG2 register*/
  CLEAR_BIT(hi2s->Instance->CR1, SPI_CR1_IOLOCK);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002556:	601a      	str	r2, [r3, #0]

  MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_LSBFRST, hi2s->Init.FirstBit);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	f423 0100 	bic.w	r1, r3, #8388608	; 0x800000
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	69da      	ldr	r2, [r3, #28]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	430a      	orrs	r2, r1
 800256c:	60da      	str	r2, [r3, #12]

  /* Insure that AFCNTR is managed only by Master */
  if (IS_I2S_MASTER(hi2s->Init.Mode))
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	2b04      	cmp	r3, #4
 8002574:	d007      	beq.n	8002586 <HAL_I2S_Init+0x21a>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	2b06      	cmp	r3, #6
 800257c:	d003      	beq.n	8002586 <HAL_I2S_Init+0x21a>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	2b0a      	cmp	r3, #10
 8002584:	d10a      	bne.n	800259c <HAL_I2S_Init+0x230>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_AFCNTR, (hi2s->Init.MasterKeepIOState));
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	430a      	orrs	r2, r1
 800259a:	60da      	str	r2, [r3, #12]
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2200      	movs	r2, #0
 80025a0:	651a      	str	r2, [r3, #80]	; 0x50
  hi2s->State     = HAL_I2S_STATE_READY;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2201      	movs	r2, #1
 80025a6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  return HAL_OK;
 80025aa:	2300      	movs	r3, #0
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3720      	adds	r7, #32
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	58001400 	.word	0x58001400
 80025b8:	cccccccd 	.word	0xcccccccd
 80025bc:	fe00ffff 	.word	0xfe00ffff
 80025c0:	fdff9040 	.word	0xfdff9040

080025c4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d101      	bne.n	80025d6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e0bf      	b.n	8002756 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d106      	bne.n	80025f0 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2200      	movs	r2, #0
 80025e6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f7fe fdee 	bl	80011cc <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2202      	movs	r2, #2
 80025f4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	699a      	ldr	r2, [r3, #24]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8002606:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	6999      	ldr	r1, [r3, #24]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685a      	ldr	r2, [r3, #4]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800261c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	691b      	ldr	r3, [r3, #16]
 8002622:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	430a      	orrs	r2, r1
 800262a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	6899      	ldr	r1, [r3, #8]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	4b4a      	ldr	r3, [pc, #296]	; (8002760 <HAL_LTDC_Init+0x19c>)
 8002638:	400b      	ands	r3, r1
 800263a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	695b      	ldr	r3, [r3, #20]
 8002640:	041b      	lsls	r3, r3, #16
 8002642:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	6899      	ldr	r1, [r3, #8]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	699a      	ldr	r2, [r3, #24]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	431a      	orrs	r2, r3
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	430a      	orrs	r2, r1
 8002658:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	68d9      	ldr	r1, [r3, #12]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	4b3e      	ldr	r3, [pc, #248]	; (8002760 <HAL_LTDC_Init+0x19c>)
 8002666:	400b      	ands	r3, r1
 8002668:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	69db      	ldr	r3, [r3, #28]
 800266e:	041b      	lsls	r3, r3, #16
 8002670:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	68d9      	ldr	r1, [r3, #12]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6a1a      	ldr	r2, [r3, #32]
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	431a      	orrs	r2, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	430a      	orrs	r2, r1
 8002686:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	6919      	ldr	r1, [r3, #16]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	4b33      	ldr	r3, [pc, #204]	; (8002760 <HAL_LTDC_Init+0x19c>)
 8002694:	400b      	ands	r3, r1
 8002696:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800269c:	041b      	lsls	r3, r3, #16
 800269e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	6919      	ldr	r1, [r3, #16]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	431a      	orrs	r2, r3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	430a      	orrs	r2, r1
 80026b4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	6959      	ldr	r1, [r3, #20]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	4b27      	ldr	r3, [pc, #156]	; (8002760 <HAL_LTDC_Init+0x19c>)
 80026c2:	400b      	ands	r3, r1
 80026c4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ca:	041b      	lsls	r3, r3, #16
 80026cc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	6959      	ldr	r1, [r3, #20]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	431a      	orrs	r2, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	430a      	orrs	r2, r1
 80026e2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026ea:	021b      	lsls	r3, r3, #8
 80026ec:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80026f4:	041b      	lsls	r3, r3, #16
 80026f6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8002706:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800270e:	68ba      	ldr	r2, [r7, #8]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	4313      	orrs	r3, r2
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800271a:	431a      	orrs	r2, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	430a      	orrs	r2, r1
 8002722:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f042 0206 	orr.w	r2, r2, #6
 8002732:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	699a      	ldr	r2, [r3, #24]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f042 0201 	orr.w	r2, r2, #1
 8002742:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2200      	movs	r2, #0
 8002748:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2201      	movs	r2, #1
 8002750:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8002754:	2300      	movs	r3, #0
}
 8002756:	4618      	mov	r0, r3
 8002758:	3710      	adds	r7, #16
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	f000f800 	.word	0xf000f800

08002764 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002764:	b5b0      	push	{r4, r5, r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af00      	add	r7, sp, #0
 800276a:	60f8      	str	r0, [r7, #12]
 800276c:	60b9      	str	r1, [r7, #8]
 800276e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002776:	2b01      	cmp	r3, #1
 8002778:	d101      	bne.n	800277e <HAL_LTDC_ConfigLayer+0x1a>
 800277a:	2302      	movs	r3, #2
 800277c:	e02c      	b.n	80027d8 <HAL_LTDC_ConfigLayer+0x74>
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2201      	movs	r2, #1
 8002782:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2202      	movs	r2, #2
 800278a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800278e:	68fa      	ldr	r2, [r7, #12]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2134      	movs	r1, #52	; 0x34
 8002794:	fb01 f303 	mul.w	r3, r1, r3
 8002798:	4413      	add	r3, r2
 800279a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	4614      	mov	r4, r2
 80027a2:	461d      	mov	r5, r3
 80027a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027b0:	682b      	ldr	r3, [r5, #0]
 80027b2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	68b9      	ldr	r1, [r7, #8]
 80027b8:	68f8      	ldr	r0, [r7, #12]
 80027ba:	f000 f811 	bl	80027e0 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	2201      	movs	r2, #1
 80027c4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2201      	movs	r2, #1
 80027ca:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2200      	movs	r2, #0
 80027d2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80027d6:	2300      	movs	r3, #0
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3710      	adds	r7, #16
 80027dc:	46bd      	mov	sp, r7
 80027de:	bdb0      	pop	{r4, r5, r7, pc}

080027e0 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b089      	sub	sp, #36	; 0x24
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	60f8      	str	r0, [r7, #12]
 80027e8:	60b9      	str	r1, [r7, #8]
 80027ea:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	685a      	ldr	r2, [r3, #4]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	0c1b      	lsrs	r3, r3, #16
 80027f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027fc:	4413      	add	r3, r2
 80027fe:	041b      	lsls	r3, r3, #16
 8002800:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	461a      	mov	r2, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	01db      	lsls	r3, r3, #7
 800280c:	4413      	add	r3, r2
 800280e:	3384      	adds	r3, #132	; 0x84
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	68fa      	ldr	r2, [r7, #12]
 8002814:	6812      	ldr	r2, [r2, #0]
 8002816:	4611      	mov	r1, r2
 8002818:	687a      	ldr	r2, [r7, #4]
 800281a:	01d2      	lsls	r2, r2, #7
 800281c:	440a      	add	r2, r1
 800281e:	3284      	adds	r2, #132	; 0x84
 8002820:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8002824:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	0c1b      	lsrs	r3, r3, #16
 8002832:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002836:	4413      	add	r3, r2
 8002838:	1c5a      	adds	r2, r3, #1
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4619      	mov	r1, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	01db      	lsls	r3, r3, #7
 8002844:	440b      	add	r3, r1
 8002846:	3384      	adds	r3, #132	; 0x84
 8002848:	4619      	mov	r1, r3
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	4313      	orrs	r3, r2
 800284e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	68da      	ldr	r2, [r3, #12]
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	68db      	ldr	r3, [r3, #12]
 800285a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800285e:	4413      	add	r3, r2
 8002860:	041b      	lsls	r3, r3, #16
 8002862:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	461a      	mov	r2, r3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	01db      	lsls	r3, r3, #7
 800286e:	4413      	add	r3, r2
 8002870:	3384      	adds	r3, #132	; 0x84
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	68fa      	ldr	r2, [r7, #12]
 8002876:	6812      	ldr	r2, [r2, #0]
 8002878:	4611      	mov	r1, r2
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	01d2      	lsls	r2, r2, #7
 800287e:	440a      	add	r2, r1
 8002880:	3284      	adds	r2, #132	; 0x84
 8002882:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8002886:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	689a      	ldr	r2, [r3, #8]
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	68db      	ldr	r3, [r3, #12]
 8002892:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002896:	4413      	add	r3, r2
 8002898:	1c5a      	adds	r2, r3, #1
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4619      	mov	r1, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	01db      	lsls	r3, r3, #7
 80028a4:	440b      	add	r3, r1
 80028a6:	3384      	adds	r3, #132	; 0x84
 80028a8:	4619      	mov	r1, r3
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	4313      	orrs	r3, r2
 80028ae:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	461a      	mov	r2, r3
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	01db      	lsls	r3, r3, #7
 80028ba:	4413      	add	r3, r2
 80028bc:	3384      	adds	r3, #132	; 0x84
 80028be:	691b      	ldr	r3, [r3, #16]
 80028c0:	68fa      	ldr	r2, [r7, #12]
 80028c2:	6812      	ldr	r2, [r2, #0]
 80028c4:	4611      	mov	r1, r2
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	01d2      	lsls	r2, r2, #7
 80028ca:	440a      	add	r2, r1
 80028cc:	3284      	adds	r2, #132	; 0x84
 80028ce:	f023 0307 	bic.w	r3, r3, #7
 80028d2:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	461a      	mov	r2, r3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	01db      	lsls	r3, r3, #7
 80028de:	4413      	add	r3, r2
 80028e0:	3384      	adds	r3, #132	; 0x84
 80028e2:	461a      	mov	r2, r3
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	691b      	ldr	r3, [r3, #16]
 80028e8:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80028f0:	021b      	lsls	r3, r3, #8
 80028f2:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80028fa:	041b      	lsls	r3, r3, #16
 80028fc:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	699b      	ldr	r3, [r3, #24]
 8002902:	061b      	lsls	r3, r3, #24
 8002904:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	461a      	mov	r2, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	01db      	lsls	r3, r3, #7
 8002910:	4413      	add	r3, r2
 8002912:	3384      	adds	r3, #132	; 0x84
 8002914:	699b      	ldr	r3, [r3, #24]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	461a      	mov	r2, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	01db      	lsls	r3, r3, #7
 8002920:	4413      	add	r3, r2
 8002922:	3384      	adds	r3, #132	; 0x84
 8002924:	461a      	mov	r2, r3
 8002926:	2300      	movs	r3, #0
 8002928:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002930:	461a      	mov	r2, r3
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	431a      	orrs	r2, r3
 8002936:	69bb      	ldr	r3, [r7, #24]
 8002938:	431a      	orrs	r2, r3
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4619      	mov	r1, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	01db      	lsls	r3, r3, #7
 8002944:	440b      	add	r3, r1
 8002946:	3384      	adds	r3, #132	; 0x84
 8002948:	4619      	mov	r1, r3
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	4313      	orrs	r3, r2
 800294e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	461a      	mov	r2, r3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	01db      	lsls	r3, r3, #7
 800295a:	4413      	add	r3, r2
 800295c:	3384      	adds	r3, #132	; 0x84
 800295e:	695b      	ldr	r3, [r3, #20]
 8002960:	68fa      	ldr	r2, [r7, #12]
 8002962:	6812      	ldr	r2, [r2, #0]
 8002964:	4611      	mov	r1, r2
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	01d2      	lsls	r2, r2, #7
 800296a:	440a      	add	r2, r1
 800296c:	3284      	adds	r2, #132	; 0x84
 800296e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002972:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	461a      	mov	r2, r3
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	01db      	lsls	r3, r3, #7
 800297e:	4413      	add	r3, r2
 8002980:	3384      	adds	r3, #132	; 0x84
 8002982:	461a      	mov	r2, r3
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	695b      	ldr	r3, [r3, #20]
 8002988:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	461a      	mov	r2, r3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	01db      	lsls	r3, r3, #7
 8002994:	4413      	add	r3, r2
 8002996:	3384      	adds	r3, #132	; 0x84
 8002998:	69da      	ldr	r2, [r3, #28]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4619      	mov	r1, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	01db      	lsls	r3, r3, #7
 80029a4:	440b      	add	r3, r1
 80029a6:	3384      	adds	r3, #132	; 0x84
 80029a8:	4619      	mov	r1, r3
 80029aa:	4b58      	ldr	r3, [pc, #352]	; (8002b0c <LTDC_SetConfig+0x32c>)
 80029ac:	4013      	ands	r3, r2
 80029ae:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	69da      	ldr	r2, [r3, #28]
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	6a1b      	ldr	r3, [r3, #32]
 80029b8:	68f9      	ldr	r1, [r7, #12]
 80029ba:	6809      	ldr	r1, [r1, #0]
 80029bc:	4608      	mov	r0, r1
 80029be:	6879      	ldr	r1, [r7, #4]
 80029c0:	01c9      	lsls	r1, r1, #7
 80029c2:	4401      	add	r1, r0
 80029c4:	3184      	adds	r1, #132	; 0x84
 80029c6:	4313      	orrs	r3, r2
 80029c8:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	461a      	mov	r2, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	01db      	lsls	r3, r3, #7
 80029d4:	4413      	add	r3, r2
 80029d6:	3384      	adds	r3, #132	; 0x84
 80029d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	461a      	mov	r2, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	01db      	lsls	r3, r3, #7
 80029e4:	4413      	add	r3, r2
 80029e6:	3384      	adds	r3, #132	; 0x84
 80029e8:	461a      	mov	r2, r3
 80029ea:	2300      	movs	r3, #0
 80029ec:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	461a      	mov	r2, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	01db      	lsls	r3, r3, #7
 80029f8:	4413      	add	r3, r2
 80029fa:	3384      	adds	r3, #132	; 0x84
 80029fc:	461a      	mov	r2, r3
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a02:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	691b      	ldr	r3, [r3, #16]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d102      	bne.n	8002a12 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8002a0c:	2304      	movs	r3, #4
 8002a0e:	61fb      	str	r3, [r7, #28]
 8002a10:	e01b      	b.n	8002a4a <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	691b      	ldr	r3, [r3, #16]
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d102      	bne.n	8002a20 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	61fb      	str	r3, [r7, #28]
 8002a1e:	e014      	b.n	8002a4a <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	691b      	ldr	r3, [r3, #16]
 8002a24:	2b04      	cmp	r3, #4
 8002a26:	d00b      	beq.n	8002a40 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d007      	beq.n	8002a40 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8002a34:	2b03      	cmp	r3, #3
 8002a36:	d003      	beq.n	8002a40 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002a3c:	2b07      	cmp	r3, #7
 8002a3e:	d102      	bne.n	8002a46 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8002a40:	2302      	movs	r3, #2
 8002a42:	61fb      	str	r3, [r7, #28]
 8002a44:	e001      	b.n	8002a4a <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8002a46:	2301      	movs	r3, #1
 8002a48:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	461a      	mov	r2, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	01db      	lsls	r3, r3, #7
 8002a54:	4413      	add	r3, r2
 8002a56:	3384      	adds	r3, #132	; 0x84
 8002a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a5a:	68fa      	ldr	r2, [r7, #12]
 8002a5c:	6812      	ldr	r2, [r2, #0]
 8002a5e:	4611      	mov	r1, r2
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	01d2      	lsls	r2, r2, #7
 8002a64:	440a      	add	r2, r1
 8002a66:	3284      	adds	r2, #132	; 0x84
 8002a68:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8002a6c:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a72:	69fa      	ldr	r2, [r7, #28]
 8002a74:	fb02 f303 	mul.w	r3, r2, r3
 8002a78:	041a      	lsls	r2, r3, #16
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	6859      	ldr	r1, [r3, #4]
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	1acb      	subs	r3, r1, r3
 8002a84:	69f9      	ldr	r1, [r7, #28]
 8002a86:	fb01 f303 	mul.w	r3, r1, r3
 8002a8a:	3307      	adds	r3, #7
 8002a8c:	68f9      	ldr	r1, [r7, #12]
 8002a8e:	6809      	ldr	r1, [r1, #0]
 8002a90:	4608      	mov	r0, r1
 8002a92:	6879      	ldr	r1, [r7, #4]
 8002a94:	01c9      	lsls	r1, r1, #7
 8002a96:	4401      	add	r1, r0
 8002a98:	3184      	adds	r1, #132	; 0x84
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	461a      	mov	r2, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	01db      	lsls	r3, r3, #7
 8002aa8:	4413      	add	r3, r2
 8002aaa:	3384      	adds	r3, #132	; 0x84
 8002aac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	01db      	lsls	r3, r3, #7
 8002ab8:	440b      	add	r3, r1
 8002aba:	3384      	adds	r3, #132	; 0x84
 8002abc:	4619      	mov	r1, r3
 8002abe:	4b14      	ldr	r3, [pc, #80]	; (8002b10 <LTDC_SetConfig+0x330>)
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	461a      	mov	r2, r3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	01db      	lsls	r3, r3, #7
 8002ace:	4413      	add	r3, r2
 8002ad0:	3384      	adds	r3, #132	; 0x84
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad8:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	461a      	mov	r2, r3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	01db      	lsls	r3, r3, #7
 8002ae4:	4413      	add	r3, r2
 8002ae6:	3384      	adds	r3, #132	; 0x84
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	68fa      	ldr	r2, [r7, #12]
 8002aec:	6812      	ldr	r2, [r2, #0]
 8002aee:	4611      	mov	r1, r2
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	01d2      	lsls	r2, r2, #7
 8002af4:	440a      	add	r2, r1
 8002af6:	3284      	adds	r2, #132	; 0x84
 8002af8:	f043 0301 	orr.w	r3, r3, #1
 8002afc:	6013      	str	r3, [r2, #0]
}
 8002afe:	bf00      	nop
 8002b00:	3724      	adds	r7, #36	; 0x24
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr
 8002b0a:	bf00      	nop
 8002b0c:	fffff8f8 	.word	0xfffff8f8
 8002b10:	fffff800 	.word	0xfffff800

08002b14 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init (OSPI_HandleTypeDef *hospi)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b086      	sub	sp, #24
 8002b18:	af02      	add	r7, sp, #8
 8002b1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8002b20:	f7ff f804 	bl	8001b2c <HAL_GetTick>
 8002b24:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d102      	bne.n	8002b32 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	73fb      	strb	r3, [r7, #15]
 8002b30:	e0a6      	b.n	8002c80 <HAL_OSPI_Init+0x16c>
    assert_param(IS_OSPI_CS_BOUNDARY    (hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_CKCSHT         (hospi->Init.ClkChipSelectHighTime));
    assert_param(IS_OSPI_MAXTRAN        (hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2200      	movs	r2, #0
 8002b36:	659a      	str	r2, [r3, #88]	; 0x58

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	f040 809f 	bne.w	8002c80 <HAL_OSPI_Init+0x16c>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f7fe fc04 	bl	8001350 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8002b48:	f241 3188 	movw	r1, #5000	; 0x1388
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	f000 f89f 	bl	8002c90 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, clocked chip select high time, free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	689a      	ldr	r2, [r3, #8]
 8002b58:	4b4c      	ldr	r3, [pc, #304]	; (8002c8c <HAL_OSPI_Init+0x178>)
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	68d1      	ldr	r1, [r2, #12]
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	6912      	ldr	r2, [r2, #16]
 8002b64:	3a01      	subs	r2, #1
 8002b66:	0412      	lsls	r2, r2, #16
 8002b68:	4311      	orrs	r1, r2
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	6952      	ldr	r2, [r2, #20]
 8002b6e:	3a01      	subs	r2, #1
 8002b70:	0212      	lsls	r2, r2, #8
 8002b72:	4311      	orrs	r1, r2
 8002b74:	687a      	ldr	r2, [r7, #4]
 8002b76:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002b78:	0112      	lsls	r2, r2, #4
 8002b7a:	4311      	orrs	r1, r2
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	69d2      	ldr	r2, [r2, #28]
 8002b80:	4311      	orrs	r1, r2
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	6812      	ldr	r2, [r2, #0]
 8002b86:	430b      	orrs	r3, r1
 8002b88:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  (hospi->Init.ClkChipSelectHighTime << OCTOSPI_DCR1_CKCSHT_Pos) | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6a1a      	ldr	r2, [r3, #32]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	430a      	orrs	r2, r1
 8002b9e:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba4:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	430a      	orrs	r2, r1
 8002bb0:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002bba:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	3b01      	subs	r3, #1
 8002bcc:	021a      	lsls	r2, r3, #8
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	430a      	orrs	r2, r1
 8002bd4:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bda:	9300      	str	r3, [sp, #0]
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	2200      	movs	r2, #0
 8002be0:	2120      	movs	r1, #32
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f000 fd4c 	bl	8003680 <OSPI_WaitFlagStateUntilTimeout>
 8002be8:	4603      	mov	r3, r0
 8002bea:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8002bec:	7bfb      	ldrb	r3, [r7, #15]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d146      	bne.n	8002c80 <HAL_OSPI_Init+0x16c>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c00:	1e5a      	subs	r2, r3, #1
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	430a      	orrs	r2, r1
 8002c08:	60da      	str	r2, [r3, #12]
                  ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	689a      	ldr	r2, [r3, #8]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	430a      	orrs	r2, r1
 8002c1e:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002c28:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c34:	431a      	orrs	r2, r3
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	430a      	orrs	r2, r1
 8002c3c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                  (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f042 0201 	orr.w	r2, r2, #1
 8002c4e:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	699b      	ldr	r3, [r3, #24]
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	d107      	bne.n	8002c68 <HAL_OSPI_Init+0x154>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	689a      	ldr	r2, [r3, #8]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f042 0202 	orr.w	r2, r2, #2
 8002c66:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c70:	d103      	bne.n	8002c7a <HAL_OSPI_Init+0x166>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2201      	movs	r2, #1
 8002c76:	655a      	str	r2, [r3, #84]	; 0x54
 8002c78:	e002      	b.n	8002c80 <HAL_OSPI_Init+0x16c>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2202      	movs	r2, #2
 8002c7e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
  }

  /* Return function status */
  return status;
 8002c80:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3710      	adds	r7, #16
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	f8e0f88c 	.word	0xf8e0f88c

08002c90 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	683a      	ldr	r2, [r7, #0]
 8002c9e:	65da      	str	r2, [r3, #92]	; 0x5c
  return HAL_OK;
 8002ca0:	2300      	movs	r3, #0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	370c      	adds	r7, #12
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
	...

08002cb0 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b094      	sub	sp, #80	; 0x50
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	60f8      	str	r0, [r7, #12]
 8002cb8:	60b9      	str	r1, [r7, #8]
 8002cba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  assert_param(IS_OSPIM_PORT(cfg->NCSPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOLowPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));

  if (hospi->Instance == OCTOSPI1)
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a9d      	ldr	r2, [pc, #628]	; (8002f44 <HAL_OSPIM_Config+0x294>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d105      	bne.n	8002cde <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 1U;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8002cdc:	e004      	b.n	8002ce8 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 0U;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8002ce8:	2300      	movs	r3, #0
 8002cea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8002cee:	e01d      	b.n	8002d2c <HAL_OSPIM_Config+0x7c>
  {
    if (OSPIM_GetConfig(index+1U, &(IOM_cfg[index])) != HAL_OK)
 8002cf0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002cf4:	3301      	adds	r3, #1
 8002cf6:	b2d8      	uxtb	r0, r3
 8002cf8:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8002cfc:	f107 0114 	add.w	r1, r7, #20
 8002d00:	4613      	mov	r3, r2
 8002d02:	005b      	lsls	r3, r3, #1
 8002d04:	4413      	add	r3, r2
 8002d06:	00db      	lsls	r3, r3, #3
 8002d08:	440b      	add	r3, r1
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	f000 fcf0 	bl	80036f0 <OSPIM_GetConfig>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d005      	beq.n	8002d22 <HAL_OSPIM_Config+0x72>
    {
      status = HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2208      	movs	r2, #8
 8002d20:	659a      	str	r2, [r3, #88]	; 0x58
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8002d22:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002d26:	3301      	adds	r3, #1
 8002d28:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8002d2c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d9dd      	bls.n	8002cf0 <HAL_OSPIM_Config+0x40>
    }
  }

  if (status == HAL_OK)
 8002d34:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	f040 8495 	bne.w	8003668 <HAL_OSPIM_Config+0x9b8>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8002d3e:	4b81      	ldr	r3, [pc, #516]	; (8002f44 <HAL_OSPIM_Config+0x294>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0301 	and.w	r3, r3, #1
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d00b      	beq.n	8002d62 <HAL_OSPIM_Config+0xb2>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8002d4a:	4b7e      	ldr	r3, [pc, #504]	; (8002f44 <HAL_OSPIM_Config+0x294>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a7d      	ldr	r2, [pc, #500]	; (8002f44 <HAL_OSPIM_Config+0x294>)
 8002d50:	f023 0301 	bic.w	r3, r3, #1
 8002d54:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8002d56:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002d5a:	f043 0301 	orr.w	r3, r3, #1
 8002d5e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8002d62:	4b79      	ldr	r3, [pc, #484]	; (8002f48 <HAL_OSPIM_Config+0x298>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0301 	and.w	r3, r3, #1
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d00b      	beq.n	8002d86 <HAL_OSPIM_Config+0xd6>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8002d6e:	4b76      	ldr	r3, [pc, #472]	; (8002f48 <HAL_OSPIM_Config+0x298>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a75      	ldr	r2, [pc, #468]	; (8002f48 <HAL_OSPIM_Config+0x298>)
 8002d74:	f023 0301 	bic.w	r3, r3, #1
 8002d78:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 8002d7a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002d7e:	f043 0302 	orr.w	r3, r3, #2
 8002d82:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8002d86:	4971      	ldr	r1, [pc, #452]	; (8002f4c <HAL_OSPIM_Config+0x29c>)
 8002d88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002d8a:	4613      	mov	r3, r2
 8002d8c:	005b      	lsls	r3, r3, #1
 8002d8e:	4413      	add	r3, r2
 8002d90:	00db      	lsls	r3, r3, #3
 8002d92:	3350      	adds	r3, #80	; 0x50
 8002d94:	443b      	add	r3, r7
 8002d96:	3b34      	subs	r3, #52	; 0x34
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	3b01      	subs	r3, #1
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	440b      	add	r3, r1
 8002da0:	6859      	ldr	r1, [r3, #4]
 8002da2:	486a      	ldr	r0, [pc, #424]	; (8002f4c <HAL_OSPIM_Config+0x29c>)
 8002da4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002da6:	4613      	mov	r3, r2
 8002da8:	005b      	lsls	r3, r3, #1
 8002daa:	4413      	add	r3, r2
 8002dac:	00db      	lsls	r3, r3, #3
 8002dae:	3350      	adds	r3, #80	; 0x50
 8002db0:	443b      	add	r3, r7
 8002db2:	3b34      	subs	r3, #52	; 0x34
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	3b01      	subs	r3, #1
 8002db8:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	4403      	add	r3, r0
 8002dc0:	605a      	str	r2, [r3, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8002dc2:	4b62      	ldr	r3, [pc, #392]	; (8002f4c <HAL_OSPIM_Config+0x29c>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 0301 	and.w	r3, r3, #1
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	f000 80c0 	beq.w	8002f50 <HAL_OSPIM_Config+0x2a0>
    {
      /* De-multiplexing should be performed */
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8002dd0:	4b5e      	ldr	r3, [pc, #376]	; (8002f4c <HAL_OSPIM_Config+0x29c>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a5d      	ldr	r2, [pc, #372]	; (8002f4c <HAL_OSPIM_Config+0x29c>)
 8002dd6:	f023 0301 	bic.w	r3, r3, #1
 8002dda:	6013      	str	r3, [r2, #0]

      if (other_instance == 1U)
 8002ddc:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	f040 8162 	bne.w	80030aa <HAL_OSPIM_Config+0x3fa>
      {
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKSRC);
 8002de6:	4959      	ldr	r1, [pc, #356]	; (8002f4c <HAL_OSPIM_Config+0x29c>)
 8002de8:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002dec:	4613      	mov	r3, r2
 8002dee:	005b      	lsls	r3, r3, #1
 8002df0:	4413      	add	r3, r2
 8002df2:	00db      	lsls	r3, r3, #3
 8002df4:	3350      	adds	r3, #80	; 0x50
 8002df6:	443b      	add	r3, r7
 8002df8:	3b3c      	subs	r3, #60	; 0x3c
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	3b01      	subs	r3, #1
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	440b      	add	r3, r1
 8002e02:	6859      	ldr	r1, [r3, #4]
 8002e04:	4851      	ldr	r0, [pc, #324]	; (8002f4c <HAL_OSPIM_Config+0x29c>)
 8002e06:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002e0a:	4613      	mov	r3, r2
 8002e0c:	005b      	lsls	r3, r3, #1
 8002e0e:	4413      	add	r3, r2
 8002e10:	00db      	lsls	r3, r3, #3
 8002e12:	3350      	adds	r3, #80	; 0x50
 8002e14:	443b      	add	r3, r7
 8002e16:	3b3c      	subs	r3, #60	; 0x3c
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	3b01      	subs	r3, #1
 8002e1c:	f041 0202 	orr.w	r2, r1, #2
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	4403      	add	r3, r0
 8002e24:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8002e26:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	005b      	lsls	r3, r3, #1
 8002e2e:	4413      	add	r3, r2
 8002e30:	00db      	lsls	r3, r3, #3
 8002e32:	3350      	adds	r3, #80	; 0x50
 8002e34:	443b      	add	r3, r7
 8002e36:	3b38      	subs	r3, #56	; 0x38
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d01f      	beq.n	8002e7e <HAL_OSPIM_Config+0x1ce>
        {
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSSRC);
 8002e3e:	4943      	ldr	r1, [pc, #268]	; (8002f4c <HAL_OSPIM_Config+0x29c>)
 8002e40:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002e44:	4613      	mov	r3, r2
 8002e46:	005b      	lsls	r3, r3, #1
 8002e48:	4413      	add	r3, r2
 8002e4a:	00db      	lsls	r3, r3, #3
 8002e4c:	3350      	adds	r3, #80	; 0x50
 8002e4e:	443b      	add	r3, r7
 8002e50:	3b38      	subs	r3, #56	; 0x38
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	3b01      	subs	r3, #1
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	440b      	add	r3, r1
 8002e5a:	6859      	ldr	r1, [r3, #4]
 8002e5c:	483b      	ldr	r0, [pc, #236]	; (8002f4c <HAL_OSPIM_Config+0x29c>)
 8002e5e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002e62:	4613      	mov	r3, r2
 8002e64:	005b      	lsls	r3, r3, #1
 8002e66:	4413      	add	r3, r2
 8002e68:	00db      	lsls	r3, r3, #3
 8002e6a:	3350      	adds	r3, #80	; 0x50
 8002e6c:	443b      	add	r3, r7
 8002e6e:	3b38      	subs	r3, #56	; 0x38
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	3b01      	subs	r3, #1
 8002e74:	f041 0220 	orr.w	r2, r1, #32
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	4403      	add	r3, r0
 8002e7c:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8002e7e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002e82:	4613      	mov	r3, r2
 8002e84:	005b      	lsls	r3, r3, #1
 8002e86:	4413      	add	r3, r2
 8002e88:	00db      	lsls	r3, r3, #3
 8002e8a:	3350      	adds	r3, #80	; 0x50
 8002e8c:	443b      	add	r3, r7
 8002e8e:	3b30      	subs	r3, #48	; 0x30
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d023      	beq.n	8002ede <HAL_OSPIM_Config+0x22e>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLSRC_1);
 8002e96:	492d      	ldr	r1, [pc, #180]	; (8002f4c <HAL_OSPIM_Config+0x29c>)
 8002e98:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	005b      	lsls	r3, r3, #1
 8002ea0:	4413      	add	r3, r2
 8002ea2:	00db      	lsls	r3, r3, #3
 8002ea4:	3350      	adds	r3, #80	; 0x50
 8002ea6:	443b      	add	r3, r7
 8002ea8:	3b30      	subs	r3, #48	; 0x30
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	3b01      	subs	r3, #1
 8002eae:	f003 0301 	and.w	r3, r3, #1
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	440b      	add	r3, r1
 8002eb6:	6859      	ldr	r1, [r3, #4]
 8002eb8:	4824      	ldr	r0, [pc, #144]	; (8002f4c <HAL_OSPIM_Config+0x29c>)
 8002eba:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002ebe:	4613      	mov	r3, r2
 8002ec0:	005b      	lsls	r3, r3, #1
 8002ec2:	4413      	add	r3, r2
 8002ec4:	00db      	lsls	r3, r3, #3
 8002ec6:	3350      	adds	r3, #80	; 0x50
 8002ec8:	443b      	add	r3, r7
 8002eca:	3b30      	subs	r3, #48	; 0x30
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	3b01      	subs	r3, #1
 8002ed0:	f003 0301 	and.w	r3, r3, #1
 8002ed4:	f441 2280 	orr.w	r2, r1, #262144	; 0x40000
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	4403      	add	r3, r0
 8002edc:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8002ede:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	005b      	lsls	r3, r3, #1
 8002ee6:	4413      	add	r3, r2
 8002ee8:	00db      	lsls	r3, r3, #3
 8002eea:	3350      	adds	r3, #80	; 0x50
 8002eec:	443b      	add	r3, r7
 8002eee:	3b2c      	subs	r3, #44	; 0x2c
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	f000 80d9 	beq.w	80030aa <HAL_OSPIM_Config+0x3fa>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHSRC_1);
 8002ef8:	4914      	ldr	r1, [pc, #80]	; (8002f4c <HAL_OSPIM_Config+0x29c>)
 8002efa:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002efe:	4613      	mov	r3, r2
 8002f00:	005b      	lsls	r3, r3, #1
 8002f02:	4413      	add	r3, r2
 8002f04:	00db      	lsls	r3, r3, #3
 8002f06:	3350      	adds	r3, #80	; 0x50
 8002f08:	443b      	add	r3, r7
 8002f0a:	3b2c      	subs	r3, #44	; 0x2c
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	3b01      	subs	r3, #1
 8002f10:	f003 0301 	and.w	r3, r3, #1
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	440b      	add	r3, r1
 8002f18:	6859      	ldr	r1, [r3, #4]
 8002f1a:	480c      	ldr	r0, [pc, #48]	; (8002f4c <HAL_OSPIM_Config+0x29c>)
 8002f1c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002f20:	4613      	mov	r3, r2
 8002f22:	005b      	lsls	r3, r3, #1
 8002f24:	4413      	add	r3, r2
 8002f26:	00db      	lsls	r3, r3, #3
 8002f28:	3350      	adds	r3, #80	; 0x50
 8002f2a:	443b      	add	r3, r7
 8002f2c:	3b2c      	subs	r3, #44	; 0x2c
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	3b01      	subs	r3, #1
 8002f32:	f003 0301 	and.w	r3, r3, #1
 8002f36:	f041 6280 	orr.w	r2, r1, #67108864	; 0x4000000
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	4403      	add	r3, r0
 8002f3e:	605a      	str	r2, [r3, #4]
 8002f40:	e0b3      	b.n	80030aa <HAL_OSPIM_Config+0x3fa>
 8002f42:	bf00      	nop
 8002f44:	52005000 	.word	0x52005000
 8002f48:	5200a000 	.word	0x5200a000
 8002f4c:	5200b400 	.word	0x5200b400
        }
      }
    }
    else
    {
      if (IOM_cfg[instance].ClkPort != 0U)
 8002f50:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f52:	4613      	mov	r3, r2
 8002f54:	005b      	lsls	r3, r3, #1
 8002f56:	4413      	add	r3, r2
 8002f58:	00db      	lsls	r3, r3, #3
 8002f5a:	3350      	adds	r3, #80	; 0x50
 8002f5c:	443b      	add	r3, r7
 8002f5e:	3b3c      	subs	r3, #60	; 0x3c
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	f000 80a1 	beq.w	80030aa <HAL_OSPIM_Config+0x3fa>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 8002f68:	4993      	ldr	r1, [pc, #588]	; (80031b8 <HAL_OSPIM_Config+0x508>)
 8002f6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	005b      	lsls	r3, r3, #1
 8002f70:	4413      	add	r3, r2
 8002f72:	00db      	lsls	r3, r3, #3
 8002f74:	3350      	adds	r3, #80	; 0x50
 8002f76:	443b      	add	r3, r7
 8002f78:	3b3c      	subs	r3, #60	; 0x3c
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	3b01      	subs	r3, #1
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	440b      	add	r3, r1
 8002f82:	6859      	ldr	r1, [r3, #4]
 8002f84:	488c      	ldr	r0, [pc, #560]	; (80031b8 <HAL_OSPIM_Config+0x508>)
 8002f86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f88:	4613      	mov	r3, r2
 8002f8a:	005b      	lsls	r3, r3, #1
 8002f8c:	4413      	add	r3, r2
 8002f8e:	00db      	lsls	r3, r3, #3
 8002f90:	3350      	adds	r3, #80	; 0x50
 8002f92:	443b      	add	r3, r7
 8002f94:	3b3c      	subs	r3, #60	; 0x3c
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	3b01      	subs	r3, #1
 8002f9a:	f021 0201 	bic.w	r2, r1, #1
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	4403      	add	r3, r0
 8002fa2:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8002fa4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002fa6:	4613      	mov	r3, r2
 8002fa8:	005b      	lsls	r3, r3, #1
 8002faa:	4413      	add	r3, r2
 8002fac:	00db      	lsls	r3, r3, #3
 8002fae:	3350      	adds	r3, #80	; 0x50
 8002fb0:	443b      	add	r3, r7
 8002fb2:	3b38      	subs	r3, #56	; 0x38
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d01d      	beq.n	8002ff6 <HAL_OSPIM_Config+0x346>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 8002fba:	497f      	ldr	r1, [pc, #508]	; (80031b8 <HAL_OSPIM_Config+0x508>)
 8002fbc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002fbe:	4613      	mov	r3, r2
 8002fc0:	005b      	lsls	r3, r3, #1
 8002fc2:	4413      	add	r3, r2
 8002fc4:	00db      	lsls	r3, r3, #3
 8002fc6:	3350      	adds	r3, #80	; 0x50
 8002fc8:	443b      	add	r3, r7
 8002fca:	3b38      	subs	r3, #56	; 0x38
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	3b01      	subs	r3, #1
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	440b      	add	r3, r1
 8002fd4:	6859      	ldr	r1, [r3, #4]
 8002fd6:	4878      	ldr	r0, [pc, #480]	; (80031b8 <HAL_OSPIM_Config+0x508>)
 8002fd8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002fda:	4613      	mov	r3, r2
 8002fdc:	005b      	lsls	r3, r3, #1
 8002fde:	4413      	add	r3, r2
 8002fe0:	00db      	lsls	r3, r3, #3
 8002fe2:	3350      	adds	r3, #80	; 0x50
 8002fe4:	443b      	add	r3, r7
 8002fe6:	3b38      	subs	r3, #56	; 0x38
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	3b01      	subs	r3, #1
 8002fec:	f021 0210 	bic.w	r2, r1, #16
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	4403      	add	r3, r0
 8002ff4:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8002ff6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	005b      	lsls	r3, r3, #1
 8002ffc:	4413      	add	r3, r2
 8002ffe:	00db      	lsls	r3, r3, #3
 8003000:	3350      	adds	r3, #80	; 0x50
 8003002:	443b      	add	r3, r7
 8003004:	3b30      	subs	r3, #48	; 0x30
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d021      	beq.n	8003050 <HAL_OSPIM_Config+0x3a0>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 800300c:	496a      	ldr	r1, [pc, #424]	; (80031b8 <HAL_OSPIM_Config+0x508>)
 800300e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003010:	4613      	mov	r3, r2
 8003012:	005b      	lsls	r3, r3, #1
 8003014:	4413      	add	r3, r2
 8003016:	00db      	lsls	r3, r3, #3
 8003018:	3350      	adds	r3, #80	; 0x50
 800301a:	443b      	add	r3, r7
 800301c:	3b30      	subs	r3, #48	; 0x30
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	3b01      	subs	r3, #1
 8003022:	f003 0301 	and.w	r3, r3, #1
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	440b      	add	r3, r1
 800302a:	6859      	ldr	r1, [r3, #4]
 800302c:	4862      	ldr	r0, [pc, #392]	; (80031b8 <HAL_OSPIM_Config+0x508>)
 800302e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003030:	4613      	mov	r3, r2
 8003032:	005b      	lsls	r3, r3, #1
 8003034:	4413      	add	r3, r2
 8003036:	00db      	lsls	r3, r3, #3
 8003038:	3350      	adds	r3, #80	; 0x50
 800303a:	443b      	add	r3, r7
 800303c:	3b30      	subs	r3, #48	; 0x30
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	3b01      	subs	r3, #1
 8003042:	f003 0301 	and.w	r3, r3, #1
 8003046:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	4403      	add	r3, r0
 800304e:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8003050:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003052:	4613      	mov	r3, r2
 8003054:	005b      	lsls	r3, r3, #1
 8003056:	4413      	add	r3, r2
 8003058:	00db      	lsls	r3, r3, #3
 800305a:	3350      	adds	r3, #80	; 0x50
 800305c:	443b      	add	r3, r7
 800305e:	3b2c      	subs	r3, #44	; 0x2c
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d021      	beq.n	80030aa <HAL_OSPIM_Config+0x3fa>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8003066:	4954      	ldr	r1, [pc, #336]	; (80031b8 <HAL_OSPIM_Config+0x508>)
 8003068:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800306a:	4613      	mov	r3, r2
 800306c:	005b      	lsls	r3, r3, #1
 800306e:	4413      	add	r3, r2
 8003070:	00db      	lsls	r3, r3, #3
 8003072:	3350      	adds	r3, #80	; 0x50
 8003074:	443b      	add	r3, r7
 8003076:	3b2c      	subs	r3, #44	; 0x2c
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	3b01      	subs	r3, #1
 800307c:	f003 0301 	and.w	r3, r3, #1
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	440b      	add	r3, r1
 8003084:	6859      	ldr	r1, [r3, #4]
 8003086:	484c      	ldr	r0, [pc, #304]	; (80031b8 <HAL_OSPIM_Config+0x508>)
 8003088:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800308a:	4613      	mov	r3, r2
 800308c:	005b      	lsls	r3, r3, #1
 800308e:	4413      	add	r3, r2
 8003090:	00db      	lsls	r3, r3, #3
 8003092:	3350      	adds	r3, #80	; 0x50
 8003094:	443b      	add	r3, r7
 8003096:	3b2c      	subs	r3, #44	; 0x2c
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	3b01      	subs	r3, #1
 800309c:	f003 0301 	and.w	r3, r3, #1
 80030a0:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	4403      	add	r3, r0
 80030a8:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	6819      	ldr	r1, [r3, #0]
 80030ae:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80030b2:	4613      	mov	r3, r2
 80030b4:	005b      	lsls	r3, r3, #1
 80030b6:	4413      	add	r3, r2
 80030b8:	00db      	lsls	r3, r3, #3
 80030ba:	3350      	adds	r3, #80	; 0x50
 80030bc:	443b      	add	r3, r7
 80030be:	3b3c      	subs	r3, #60	; 0x3c
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4299      	cmp	r1, r3
 80030c4:	d038      	beq.n	8003138 <HAL_OSPIM_Config+0x488>
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	6859      	ldr	r1, [r3, #4]
 80030ca:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80030ce:	4613      	mov	r3, r2
 80030d0:	005b      	lsls	r3, r3, #1
 80030d2:	4413      	add	r3, r2
 80030d4:	00db      	lsls	r3, r3, #3
 80030d6:	3350      	adds	r3, #80	; 0x50
 80030d8:	443b      	add	r3, r7
 80030da:	3b38      	subs	r3, #56	; 0x38
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4299      	cmp	r1, r3
 80030e0:	d02a      	beq.n	8003138 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	6899      	ldr	r1, [r3, #8]
 80030e6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80030ea:	4613      	mov	r3, r2
 80030ec:	005b      	lsls	r3, r3, #1
 80030ee:	4413      	add	r3, r2
 80030f0:	00db      	lsls	r3, r3, #3
 80030f2:	3350      	adds	r3, #80	; 0x50
 80030f4:	443b      	add	r3, r7
 80030f6:	3b34      	subs	r3, #52	; 0x34
 80030f8:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 80030fa:	4299      	cmp	r1, r3
 80030fc:	d01c      	beq.n	8003138 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	68d9      	ldr	r1, [r3, #12]
 8003102:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003106:	4613      	mov	r3, r2
 8003108:	005b      	lsls	r3, r3, #1
 800310a:	4413      	add	r3, r2
 800310c:	00db      	lsls	r3, r3, #3
 800310e:	3350      	adds	r3, #80	; 0x50
 8003110:	443b      	add	r3, r7
 8003112:	3b30      	subs	r3, #48	; 0x30
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4299      	cmp	r1, r3
 8003118:	d00e      	beq.n	8003138 <HAL_OSPIM_Config+0x488>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	6919      	ldr	r1, [r3, #16]
 800311e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003122:	4613      	mov	r3, r2
 8003124:	005b      	lsls	r3, r3, #1
 8003126:	4413      	add	r3, r2
 8003128:	00db      	lsls	r3, r3, #3
 800312a:	3350      	adds	r3, #80	; 0x50
 800312c:	443b      	add	r3, r7
 800312e:	3b2c      	subs	r3, #44	; 0x2c
 8003130:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8003132:	4299      	cmp	r1, r3
 8003134:	f040 810e 	bne.w	8003354 <HAL_OSPIM_Config+0x6a4>
    {
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	6819      	ldr	r1, [r3, #0]
 800313c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003140:	4613      	mov	r3, r2
 8003142:	005b      	lsls	r3, r3, #1
 8003144:	4413      	add	r3, r2
 8003146:	00db      	lsls	r3, r3, #3
 8003148:	3350      	adds	r3, #80	; 0x50
 800314a:	443b      	add	r3, r7
 800314c:	3b3c      	subs	r3, #60	; 0x3c
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4299      	cmp	r1, r3
 8003152:	d133      	bne.n	80031bc <HAL_OSPIM_Config+0x50c>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	6859      	ldr	r1, [r3, #4]
 8003158:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800315c:	4613      	mov	r3, r2
 800315e:	005b      	lsls	r3, r3, #1
 8003160:	4413      	add	r3, r2
 8003162:	00db      	lsls	r3, r3, #3
 8003164:	3350      	adds	r3, #80	; 0x50
 8003166:	443b      	add	r3, r7
 8003168:	3b38      	subs	r3, #56	; 0x38
 800316a:	681b      	ldr	r3, [r3, #0]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 800316c:	4299      	cmp	r1, r3
 800316e:	d125      	bne.n	80031bc <HAL_OSPIM_Config+0x50c>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	68d9      	ldr	r1, [r3, #12]
 8003174:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003178:	4613      	mov	r3, r2
 800317a:	005b      	lsls	r3, r3, #1
 800317c:	4413      	add	r3, r2
 800317e:	00db      	lsls	r3, r3, #3
 8003180:	3350      	adds	r3, #80	; 0x50
 8003182:	443b      	add	r3, r7
 8003184:	3b30      	subs	r3, #48	; 0x30
 8003186:	681b      	ldr	r3, [r3, #0]
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8003188:	4299      	cmp	r1, r3
 800318a:	d117      	bne.n	80031bc <HAL_OSPIM_Config+0x50c>
          (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	6919      	ldr	r1, [r3, #16]
 8003190:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003194:	4613      	mov	r3, r2
 8003196:	005b      	lsls	r3, r3, #1
 8003198:	4413      	add	r3, r2
 800319a:	00db      	lsls	r3, r3, #3
 800319c:	3350      	adds	r3, #80	; 0x50
 800319e:	443b      	add	r3, r7
 80031a0:	3b2c      	subs	r3, #44	; 0x2c
 80031a2:	681b      	ldr	r3, [r3, #0]
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 80031a4:	4299      	cmp	r1, r3
 80031a6:	d109      	bne.n	80031bc <HAL_OSPIM_Config+0x50c>
      {
        /* Multiplexing should be performed */
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 80031a8:	4b03      	ldr	r3, [pc, #12]	; (80031b8 <HAL_OSPIM_Config+0x508>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a02      	ldr	r2, [pc, #8]	; (80031b8 <HAL_OSPIM_Config+0x508>)
 80031ae:	f043 0301 	orr.w	r3, r3, #1
 80031b2:	6013      	str	r3, [r2, #0]
 80031b4:	e0ce      	b.n	8003354 <HAL_OSPIM_Config+0x6a4>
 80031b6:	bf00      	nop
 80031b8:	5200b400 	.word	0x5200b400
      }
      else
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 80031bc:	49bb      	ldr	r1, [pc, #748]	; (80034ac <HAL_OSPIM_Config+0x7fc>)
 80031be:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80031c2:	4613      	mov	r3, r2
 80031c4:	005b      	lsls	r3, r3, #1
 80031c6:	4413      	add	r3, r2
 80031c8:	00db      	lsls	r3, r3, #3
 80031ca:	3350      	adds	r3, #80	; 0x50
 80031cc:	443b      	add	r3, r7
 80031ce:	3b3c      	subs	r3, #60	; 0x3c
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	3b01      	subs	r3, #1
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	440b      	add	r3, r1
 80031d8:	6859      	ldr	r1, [r3, #4]
 80031da:	48b4      	ldr	r0, [pc, #720]	; (80034ac <HAL_OSPIM_Config+0x7fc>)
 80031dc:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80031e0:	4613      	mov	r3, r2
 80031e2:	005b      	lsls	r3, r3, #1
 80031e4:	4413      	add	r3, r2
 80031e6:	00db      	lsls	r3, r3, #3
 80031e8:	3350      	adds	r3, #80	; 0x50
 80031ea:	443b      	add	r3, r7
 80031ec:	3b3c      	subs	r3, #60	; 0x3c
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	3b01      	subs	r3, #1
 80031f2:	f021 0201 	bic.w	r2, r1, #1
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	4403      	add	r3, r0
 80031fa:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 80031fc:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003200:	4613      	mov	r3, r2
 8003202:	005b      	lsls	r3, r3, #1
 8003204:	4413      	add	r3, r2
 8003206:	00db      	lsls	r3, r3, #3
 8003208:	3350      	adds	r3, #80	; 0x50
 800320a:	443b      	add	r3, r7
 800320c:	3b38      	subs	r3, #56	; 0x38
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d01f      	beq.n	8003254 <HAL_OSPIM_Config+0x5a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 8003214:	49a5      	ldr	r1, [pc, #660]	; (80034ac <HAL_OSPIM_Config+0x7fc>)
 8003216:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800321a:	4613      	mov	r3, r2
 800321c:	005b      	lsls	r3, r3, #1
 800321e:	4413      	add	r3, r2
 8003220:	00db      	lsls	r3, r3, #3
 8003222:	3350      	adds	r3, #80	; 0x50
 8003224:	443b      	add	r3, r7
 8003226:	3b38      	subs	r3, #56	; 0x38
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	3b01      	subs	r3, #1
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	440b      	add	r3, r1
 8003230:	6859      	ldr	r1, [r3, #4]
 8003232:	489e      	ldr	r0, [pc, #632]	; (80034ac <HAL_OSPIM_Config+0x7fc>)
 8003234:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003238:	4613      	mov	r3, r2
 800323a:	005b      	lsls	r3, r3, #1
 800323c:	4413      	add	r3, r2
 800323e:	00db      	lsls	r3, r3, #3
 8003240:	3350      	adds	r3, #80	; 0x50
 8003242:	443b      	add	r3, r7
 8003244:	3b38      	subs	r3, #56	; 0x38
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	3b01      	subs	r3, #1
 800324a:	f021 0210 	bic.w	r2, r1, #16
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	4403      	add	r3, r0
 8003252:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8003254:	4995      	ldr	r1, [pc, #596]	; (80034ac <HAL_OSPIM_Config+0x7fc>)
 8003256:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800325a:	4613      	mov	r3, r2
 800325c:	005b      	lsls	r3, r3, #1
 800325e:	4413      	add	r3, r2
 8003260:	00db      	lsls	r3, r3, #3
 8003262:	3350      	adds	r3, #80	; 0x50
 8003264:	443b      	add	r3, r7
 8003266:	3b34      	subs	r3, #52	; 0x34
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	3b01      	subs	r3, #1
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	440b      	add	r3, r1
 8003270:	6859      	ldr	r1, [r3, #4]
 8003272:	488e      	ldr	r0, [pc, #568]	; (80034ac <HAL_OSPIM_Config+0x7fc>)
 8003274:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003278:	4613      	mov	r3, r2
 800327a:	005b      	lsls	r3, r3, #1
 800327c:	4413      	add	r3, r2
 800327e:	00db      	lsls	r3, r3, #3
 8003280:	3350      	adds	r3, #80	; 0x50
 8003282:	443b      	add	r3, r7
 8003284:	3b34      	subs	r3, #52	; 0x34
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	3b01      	subs	r3, #1
 800328a:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	4403      	add	r3, r0
 8003292:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8003294:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003298:	4613      	mov	r3, r2
 800329a:	005b      	lsls	r3, r3, #1
 800329c:	4413      	add	r3, r2
 800329e:	00db      	lsls	r3, r3, #3
 80032a0:	3350      	adds	r3, #80	; 0x50
 80032a2:	443b      	add	r3, r7
 80032a4:	3b30      	subs	r3, #48	; 0x30
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d023      	beq.n	80032f4 <HAL_OSPIM_Config+0x644>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 80032ac:	497f      	ldr	r1, [pc, #508]	; (80034ac <HAL_OSPIM_Config+0x7fc>)
 80032ae:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80032b2:	4613      	mov	r3, r2
 80032b4:	005b      	lsls	r3, r3, #1
 80032b6:	4413      	add	r3, r2
 80032b8:	00db      	lsls	r3, r3, #3
 80032ba:	3350      	adds	r3, #80	; 0x50
 80032bc:	443b      	add	r3, r7
 80032be:	3b30      	subs	r3, #48	; 0x30
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	3b01      	subs	r3, #1
 80032c4:	f003 0301 	and.w	r3, r3, #1
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	440b      	add	r3, r1
 80032cc:	6859      	ldr	r1, [r3, #4]
 80032ce:	4877      	ldr	r0, [pc, #476]	; (80034ac <HAL_OSPIM_Config+0x7fc>)
 80032d0:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80032d4:	4613      	mov	r3, r2
 80032d6:	005b      	lsls	r3, r3, #1
 80032d8:	4413      	add	r3, r2
 80032da:	00db      	lsls	r3, r3, #3
 80032dc:	3350      	adds	r3, #80	; 0x50
 80032de:	443b      	add	r3, r7
 80032e0:	3b30      	subs	r3, #48	; 0x30
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	3b01      	subs	r3, #1
 80032e6:	f003 0301 	and.w	r3, r3, #1
 80032ea:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	4403      	add	r3, r0
 80032f2:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80032f4:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80032f8:	4613      	mov	r3, r2
 80032fa:	005b      	lsls	r3, r3, #1
 80032fc:	4413      	add	r3, r2
 80032fe:	00db      	lsls	r3, r3, #3
 8003300:	3350      	adds	r3, #80	; 0x50
 8003302:	443b      	add	r3, r7
 8003304:	3b2c      	subs	r3, #44	; 0x2c
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d023      	beq.n	8003354 <HAL_OSPIM_Config+0x6a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 800330c:	4967      	ldr	r1, [pc, #412]	; (80034ac <HAL_OSPIM_Config+0x7fc>)
 800330e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003312:	4613      	mov	r3, r2
 8003314:	005b      	lsls	r3, r3, #1
 8003316:	4413      	add	r3, r2
 8003318:	00db      	lsls	r3, r3, #3
 800331a:	3350      	adds	r3, #80	; 0x50
 800331c:	443b      	add	r3, r7
 800331e:	3b2c      	subs	r3, #44	; 0x2c
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	3b01      	subs	r3, #1
 8003324:	f003 0301 	and.w	r3, r3, #1
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	440b      	add	r3, r1
 800332c:	6859      	ldr	r1, [r3, #4]
 800332e:	485f      	ldr	r0, [pc, #380]	; (80034ac <HAL_OSPIM_Config+0x7fc>)
 8003330:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003334:	4613      	mov	r3, r2
 8003336:	005b      	lsls	r3, r3, #1
 8003338:	4413      	add	r3, r2
 800333a:	00db      	lsls	r3, r3, #3
 800333c:	3350      	adds	r3, #80	; 0x50
 800333e:	443b      	add	r3, r7
 8003340:	3b2c      	subs	r3, #44	; 0x2c
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	3b01      	subs	r3, #1
 8003346:	f003 0301 	and.w	r3, r3, #1
 800334a:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	4403      	add	r3, r0
 8003352:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /******************** Activation of new configuration *********************/
        MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8003354:	4a55      	ldr	r2, [pc, #340]	; (80034ac <HAL_OSPIM_Config+0x7fc>)
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	3b01      	subs	r3, #1
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	4413      	add	r3, r2
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003366:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003368:	025b      	lsls	r3, r3, #9
 800336a:	431a      	orrs	r2, r3
 800336c:	494f      	ldr	r1, [pc, #316]	; (80034ac <HAL_OSPIM_Config+0x7fc>)
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	3b01      	subs	r3, #1
 8003374:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	440b      	add	r3, r1
 800337c:	605a      	str	r2, [r3, #4]
                  (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));

    if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	695b      	ldr	r3, [r3, #20]
 8003382:	1e5a      	subs	r2, r3, #1
 8003384:	4b49      	ldr	r3, [pc, #292]	; (80034ac <HAL_OSPIM_Config+0x7fc>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	0c1b      	lsrs	r3, r3, #16
 800338a:	b2db      	uxtb	r3, r3
 800338c:	429a      	cmp	r2, r3
 800338e:	d90a      	bls.n	80033a6 <HAL_OSPIM_Config+0x6f6>
    {
      MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 8003390:	4b46      	ldr	r3, [pc, #280]	; (80034ac <HAL_OSPIM_Config+0x7fc>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	695b      	ldr	r3, [r3, #20]
 800339c:	3b01      	subs	r3, #1
 800339e:	041b      	lsls	r3, r3, #16
 80033a0:	4942      	ldr	r1, [pc, #264]	; (80034ac <HAL_OSPIM_Config+0x7fc>)
 80033a2:	4313      	orrs	r3, r2
 80033a4:	600b      	str	r3, [r1, #0]
    }

    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 80033a6:	4b41      	ldr	r3, [pc, #260]	; (80034ac <HAL_OSPIM_Config+0x7fc>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 0301 	and.w	r3, r3, #1
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	f000 809a 	beq.w	80034e8 <HAL_OSPIM_Config+0x838>
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 80033b4:	4a3d      	ldr	r2, [pc, #244]	; (80034ac <HAL_OSPIM_Config+0x7fc>)
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	3b01      	subs	r3, #1
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	4413      	add	r3, r2
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	f023 0203 	bic.w	r2, r3, #3
 80033c6:	4939      	ldr	r1, [pc, #228]	; (80034ac <HAL_OSPIM_Config+0x7fc>)
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	3b01      	subs	r3, #1
 80033ce:	f042 0201 	orr.w	r2, r2, #1
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	440b      	add	r3, r1
 80033d6:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d011      	beq.n	8003404 <HAL_OSPIM_Config+0x754>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 80033e0:	4a32      	ldr	r2, [pc, #200]	; (80034ac <HAL_OSPIM_Config+0x7fc>)
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	3b01      	subs	r3, #1
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	4413      	add	r3, r2
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80033f2:	492e      	ldr	r1, [pc, #184]	; (80034ac <HAL_OSPIM_Config+0x7fc>)
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	3b01      	subs	r3, #1
 80033fa:	f042 0210 	orr.w	r2, r2, #16
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	440b      	add	r3, r1
 8003402:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800340c:	2b00      	cmp	r3, #0
 800340e:	d016      	beq.n	800343e <HAL_OSPIM_Config+0x78e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8003410:	4a26      	ldr	r2, [pc, #152]	; (80034ac <HAL_OSPIM_Config+0x7fc>)
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	68db      	ldr	r3, [r3, #12]
 8003416:	3b01      	subs	r3, #1
 8003418:	f003 0301 	and.w	r3, r3, #1
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	4413      	add	r3, r2
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003426:	4921      	ldr	r1, [pc, #132]	; (80034ac <HAL_OSPIM_Config+0x7fc>)
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	3b01      	subs	r3, #1
 800342e:	f003 0301 	and.w	r3, r3, #1
 8003432:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	440b      	add	r3, r1
 800343a:	605a      	str	r2, [r3, #4]
 800343c:	e019      	b.n	8003472 <HAL_OSPIM_Config+0x7c2>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), OCTOSPIM_PCR_IOLEN);
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	68db      	ldr	r3, [r3, #12]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d015      	beq.n	8003472 <HAL_OSPIM_Config+0x7c2>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8003446:	4a19      	ldr	r2, [pc, #100]	; (80034ac <HAL_OSPIM_Config+0x7fc>)
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	3b01      	subs	r3, #1
 800344e:	f003 0301 	and.w	r3, r3, #1
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	4413      	add	r3, r2
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800345c:	4913      	ldr	r1, [pc, #76]	; (80034ac <HAL_OSPIM_Config+0x7fc>)
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	3b01      	subs	r3, #1
 8003464:	f003 0301 	and.w	r3, r3, #1
 8003468:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	440b      	add	r3, r1
 8003470:	605a      	str	r2, [r3, #4]
      else
      {
         /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	691b      	ldr	r3, [r3, #16]
 8003476:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d018      	beq.n	80034b0 <HAL_OSPIM_Config+0x800>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 800347e:	4a0b      	ldr	r2, [pc, #44]	; (80034ac <HAL_OSPIM_Config+0x7fc>)
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	691b      	ldr	r3, [r3, #16]
 8003484:	3b01      	subs	r3, #1
 8003486:	f003 0301 	and.w	r3, r3, #1
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	4413      	add	r3, r2
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003494:	4905      	ldr	r1, [pc, #20]	; (80034ac <HAL_OSPIM_Config+0x7fc>)
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	691b      	ldr	r3, [r3, #16]
 800349a:	3b01      	subs	r3, #1
 800349c:	f003 0301 	and.w	r3, r3, #1
 80034a0:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	440b      	add	r3, r1
 80034a8:	605a      	str	r2, [r3, #4]
 80034aa:	e0c5      	b.n	8003638 <HAL_OSPIM_Config+0x988>
 80034ac:	5200b400 	.word	0x5200b400
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	691b      	ldr	r3, [r3, #16]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	f000 80bf 	beq.w	8003638 <HAL_OSPIM_Config+0x988>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 80034ba:	4a6e      	ldr	r2, [pc, #440]	; (8003674 <HAL_OSPIM_Config+0x9c4>)
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	691b      	ldr	r3, [r3, #16]
 80034c0:	3b01      	subs	r3, #1
 80034c2:	f003 0301 	and.w	r3, r3, #1
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	4413      	add	r3, r2
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80034d0:	4968      	ldr	r1, [pc, #416]	; (8003674 <HAL_OSPIM_Config+0x9c4>)
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	691b      	ldr	r3, [r3, #16]
 80034d6:	3b01      	subs	r3, #1
 80034d8:	f003 0301 	and.w	r3, r3, #1
 80034dc:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	440b      	add	r3, r1
 80034e4:	605a      	str	r2, [r3, #4]
 80034e6:	e0a7      	b.n	8003638 <HAL_OSPIM_Config+0x988>
         /* Nothing to do */
      }
    }
    else
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 80034e8:	4a62      	ldr	r2, [pc, #392]	; (8003674 <HAL_OSPIM_Config+0x9c4>)
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	3b01      	subs	r3, #1
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	4413      	add	r3, r2
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	f023 0203 	bic.w	r2, r3, #3
 80034fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034fc:	005b      	lsls	r3, r3, #1
 80034fe:	431a      	orrs	r2, r3
 8003500:	495c      	ldr	r1, [pc, #368]	; (8003674 <HAL_OSPIM_Config+0x9c4>)
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	3b01      	subs	r3, #1
 8003508:	f042 0201 	orr.w	r2, r2, #1
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	440b      	add	r3, r1
 8003510:	605a      	str	r2, [r3, #4]
                (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d014      	beq.n	8003544 <HAL_OSPIM_Config+0x894>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 800351a:	4a56      	ldr	r2, [pc, #344]	; (8003674 <HAL_OSPIM_Config+0x9c4>)
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	3b01      	subs	r3, #1
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	4413      	add	r3, r2
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800352c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800352e:	015b      	lsls	r3, r3, #5
 8003530:	431a      	orrs	r2, r3
 8003532:	4950      	ldr	r1, [pc, #320]	; (8003674 <HAL_OSPIM_Config+0x9c4>)
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	3b01      	subs	r3, #1
 800353a:	f042 0210 	orr.w	r2, r2, #16
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	440b      	add	r3, r1
 8003542:	605a      	str	r2, [r3, #4]
                  (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800354c:	2b00      	cmp	r3, #0
 800354e:	d019      	beq.n	8003584 <HAL_OSPIM_Config+0x8d4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8003550:	4a48      	ldr	r2, [pc, #288]	; (8003674 <HAL_OSPIM_Config+0x9c4>)
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	68db      	ldr	r3, [r3, #12]
 8003556:	3b01      	subs	r3, #1
 8003558:	f003 0301 	and.w	r3, r3, #1
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	4413      	add	r3, r2
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003566:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003568:	049b      	lsls	r3, r3, #18
 800356a:	431a      	orrs	r2, r3
 800356c:	4941      	ldr	r1, [pc, #260]	; (8003674 <HAL_OSPIM_Config+0x9c4>)
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	3b01      	subs	r3, #1
 8003574:	f003 0301 	and.w	r3, r3, #1
 8003578:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	440b      	add	r3, r1
 8003580:	605a      	str	r2, [r3, #4]
 8003582:	e01c      	b.n	80035be <HAL_OSPIM_Config+0x90e>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d018      	beq.n	80035be <HAL_OSPIM_Config+0x90e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 800358c:	4a39      	ldr	r2, [pc, #228]	; (8003674 <HAL_OSPIM_Config+0x9c4>)
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	3b01      	subs	r3, #1
 8003594:	f003 0301 	and.w	r3, r3, #1
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	4413      	add	r3, r2
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80035a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035a4:	069b      	lsls	r3, r3, #26
 80035a6:	431a      	orrs	r2, r3
 80035a8:	4932      	ldr	r1, [pc, #200]	; (8003674 <HAL_OSPIM_Config+0x9c4>)
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	68db      	ldr	r3, [r3, #12]
 80035ae:	3b01      	subs	r3, #1
 80035b0:	f003 0301 	and.w	r3, r3, #1
 80035b4:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	440b      	add	r3, r1
 80035bc:	605a      	str	r2, [r3, #4]
      else
      {
         /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	691b      	ldr	r3, [r3, #16]
 80035c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d019      	beq.n	80035fe <HAL_OSPIM_Config+0x94e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 80035ca:	4a2a      	ldr	r2, [pc, #168]	; (8003674 <HAL_OSPIM_Config+0x9c4>)
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	691b      	ldr	r3, [r3, #16]
 80035d0:	3b01      	subs	r3, #1
 80035d2:	f003 0301 	and.w	r3, r3, #1
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	4413      	add	r3, r2
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80035e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035e2:	049b      	lsls	r3, r3, #18
 80035e4:	431a      	orrs	r2, r3
 80035e6:	4923      	ldr	r1, [pc, #140]	; (8003674 <HAL_OSPIM_Config+0x9c4>)
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	691b      	ldr	r3, [r3, #16]
 80035ec:	3b01      	subs	r3, #1
 80035ee:	f003 0301 	and.w	r3, r3, #1
 80035f2:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	440b      	add	r3, r1
 80035fa:	605a      	str	r2, [r3, #4]
 80035fc:	e01c      	b.n	8003638 <HAL_OSPIM_Config+0x988>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	691b      	ldr	r3, [r3, #16]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d018      	beq.n	8003638 <HAL_OSPIM_Config+0x988>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8003606:	4a1b      	ldr	r2, [pc, #108]	; (8003674 <HAL_OSPIM_Config+0x9c4>)
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	691b      	ldr	r3, [r3, #16]
 800360c:	3b01      	subs	r3, #1
 800360e:	f003 0301 	and.w	r3, r3, #1
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	4413      	add	r3, r2
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800361c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800361e:	069b      	lsls	r3, r3, #26
 8003620:	431a      	orrs	r2, r3
 8003622:	4914      	ldr	r1, [pc, #80]	; (8003674 <HAL_OSPIM_Config+0x9c4>)
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	691b      	ldr	r3, [r3, #16]
 8003628:	3b01      	subs	r3, #1
 800362a:	f003 0301 	and.w	r3, r3, #1
 800362e:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	440b      	add	r3, r1
 8003636:	605a      	str	r2, [r3, #4]
         /* Nothing to do */
      }
    }

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8003638:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800363c:	f003 0301 	and.w	r3, r3, #1
 8003640:	2b00      	cmp	r3, #0
 8003642:	d005      	beq.n	8003650 <HAL_OSPIM_Config+0x9a0>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8003644:	4b0c      	ldr	r3, [pc, #48]	; (8003678 <HAL_OSPIM_Config+0x9c8>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a0b      	ldr	r2, [pc, #44]	; (8003678 <HAL_OSPIM_Config+0x9c8>)
 800364a:	f043 0301 	orr.w	r3, r3, #1
 800364e:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8003650:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003654:	f003 0302 	and.w	r3, r3, #2
 8003658:	2b00      	cmp	r3, #0
 800365a:	d005      	beq.n	8003668 <HAL_OSPIM_Config+0x9b8>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 800365c:	4b07      	ldr	r3, [pc, #28]	; (800367c <HAL_OSPIM_Config+0x9cc>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a06      	ldr	r2, [pc, #24]	; (800367c <HAL_OSPIM_Config+0x9cc>)
 8003662:	f043 0301 	orr.w	r3, r3, #1
 8003666:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8003668:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800366c:	4618      	mov	r0, r3
 800366e:	3750      	adds	r7, #80	; 0x50
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}
 8003674:	5200b400 	.word	0x5200b400
 8003678:	52005000 	.word	0x52005000
 800367c:	5200a000 	.word	0x5200a000

08003680 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b084      	sub	sp, #16
 8003684:	af00      	add	r7, sp, #0
 8003686:	60f8      	str	r0, [r7, #12]
 8003688:	60b9      	str	r1, [r7, #8]
 800368a:	603b      	str	r3, [r7, #0]
 800368c:	4613      	mov	r3, r2
 800368e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8003690:	e01a      	b.n	80036c8 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003692:	69bb      	ldr	r3, [r7, #24]
 8003694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003698:	d016      	beq.n	80036c8 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800369a:	f7fe fa47 	bl	8001b2c <HAL_GetTick>
 800369e:	4602      	mov	r2, r0
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	1ad3      	subs	r3, r2, r3
 80036a4:	69ba      	ldr	r2, [r7, #24]
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d302      	bcc.n	80036b0 <OSPI_WaitFlagStateUntilTimeout+0x30>
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d10b      	bne.n	80036c8 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036b6:	655a      	str	r2, [r3, #84]	; 0x54
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036bc:	f043 0201 	orr.w	r2, r3, #1
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e00e      	b.n	80036e6 <OSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	6a1a      	ldr	r2, [r3, #32]
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	4013      	ands	r3, r2
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	bf14      	ite	ne
 80036d6:	2301      	movne	r3, #1
 80036d8:	2300      	moveq	r3, #0
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	461a      	mov	r2, r3
 80036de:	79fb      	ldrb	r3, [r7, #7]
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d1d6      	bne.n	8003692 <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80036e4:	2300      	movs	r3, #0
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3710      	adds	r7, #16
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
	...

080036f0 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b087      	sub	sp, #28
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	4603      	mov	r3, r0
 80036f8:	6039      	str	r1, [r7, #0]
 80036fa:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 80036fc:	2300      	movs	r3, #0
 80036fe:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8003700:	2300      	movs	r3, #0
 8003702:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8003704:	79fb      	ldrb	r3, [r7, #7]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d005      	beq.n	8003716 <OSPIM_GetConfig+0x26>
 800370a:	79fb      	ldrb	r3, [r7, #7]
 800370c:	2b02      	cmp	r3, #2
 800370e:	d802      	bhi.n	8003716 <OSPIM_GetConfig+0x26>
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d102      	bne.n	800371c <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	75fb      	strb	r3, [r7, #23]
 800371a:	e098      	b.n	800384e <OSPIM_GetConfig+0x15e>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	2200      	movs	r2, #0
 8003720:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	2200      	movs	r2, #0
 8003726:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	2200      	movs	r2, #0
 800372c:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	2200      	movs	r2, #0
 8003732:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	2200      	movs	r2, #0
 8003738:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 800373a:	79fb      	ldrb	r3, [r7, #7]
 800373c:	2b02      	cmp	r3, #2
 800373e:	d10b      	bne.n	8003758 <OSPIM_GetConfig+0x68>
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 8003740:	4b46      	ldr	r3, [pc, #280]	; (800385c <OSPIM_GetConfig+0x16c>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 0301 	and.w	r3, r3, #1
 8003748:	2b00      	cmp	r3, #0
 800374a:	d102      	bne.n	8003752 <OSPIM_GetConfig+0x62>
      {
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 800374c:	4b44      	ldr	r3, [pc, #272]	; (8003860 <OSPIM_GetConfig+0x170>)
 800374e:	613b      	str	r3, [r7, #16]
 8003750:	e002      	b.n	8003758 <OSPIM_GetConfig+0x68>
               | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
 8003752:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003756:	613b      	str	r3, [r7, #16]
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8003758:	2300      	movs	r3, #0
 800375a:	60fb      	str	r3, [r7, #12]
 800375c:	e074      	b.n	8003848 <OSPIM_GetConfig+0x158>
    {
      reg = OCTOSPIM->PCR[index];
 800375e:	4a3f      	ldr	r2, [pc, #252]	; (800385c <OSPIM_GetConfig+0x16c>)
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	4413      	add	r3, r2
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	f003 0301 	and.w	r3, r3, #1
 8003770:	2b00      	cmp	r3, #0
 8003772:	d00a      	beq.n	800378a <OSPIM_GetConfig+0x9a>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8003774:	68ba      	ldr	r2, [r7, #8]
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	4053      	eors	r3, r2
 800377a:	f003 0302 	and.w	r3, r3, #2
 800377e:	2b00      	cmp	r3, #0
 8003780:	d103      	bne.n	800378a <OSPIM_GetConfig+0x9a>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index+1U;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	1c5a      	adds	r2, r3, #1
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	f003 0310 	and.w	r3, r3, #16
 8003790:	2b00      	cmp	r3, #0
 8003792:	d00a      	beq.n	80037aa <OSPIM_GetConfig+0xba>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8003794:	68ba      	ldr	r2, [r7, #8]
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	4053      	eors	r3, r2
 800379a:	f003 0320 	and.w	r3, r3, #32
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d103      	bne.n	80037aa <OSPIM_GetConfig+0xba>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index+1U;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	1c5a      	adds	r2, r3, #1
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d00a      	beq.n	80037ca <OSPIM_GetConfig+0xda>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 80037b4:	68ba      	ldr	r2, [r7, #8]
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	4053      	eors	r3, r2
 80037ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d103      	bne.n	80037ca <OSPIM_GetConfig+0xda>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index+1U;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	1c5a      	adds	r2, r3, #1
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d018      	beq.n	8003806 <OSPIM_GetConfig+0x116>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 80037d4:	68ba      	ldr	r2, [r7, #8]
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	4053      	eors	r3, r2
 80037da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d111      	bne.n	8003806 <OSPIM_GetConfig+0x116>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d106      	bne.n	80037fa <OSPIM_GetConfig+0x10a>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	3301      	adds	r3, #1
 80037f0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	60da      	str	r2, [r3, #12]
 80037f8:	e005      	b.n	8003806 <OSPIM_GetConfig+0x116>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	3301      	adds	r3, #1
 80037fe:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800380c:	2b00      	cmp	r3, #0
 800380e:	d018      	beq.n	8003842 <OSPIM_GetConfig+0x152>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8003810:	68ba      	ldr	r2, [r7, #8]
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	4053      	eors	r3, r2
 8003816:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800381a:	2b00      	cmp	r3, #0
 800381c:	d111      	bne.n	8003842 <OSPIM_GetConfig+0x152>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003824:	2b00      	cmp	r3, #0
 8003826:	d106      	bne.n	8003836 <OSPIM_GetConfig+0x146>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	3301      	adds	r3, #1
 800382c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	611a      	str	r2, [r3, #16]
 8003834:	e005      	b.n	8003842 <OSPIM_GetConfig+0x152>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	3301      	adds	r3, #1
 800383a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	3301      	adds	r3, #1
 8003846:	60fb      	str	r3, [r7, #12]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2b01      	cmp	r3, #1
 800384c:	d987      	bls.n	800375e <OSPIM_GetConfig+0x6e>
      }
    }
  }

  /* Return function status */
  return status;
 800384e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003850:	4618      	mov	r0, r3
 8003852:	371c      	adds	r7, #28
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr
 800385c:	5200b400 	.word	0x5200b400
 8003860:	04040222 	.word	0x04040222

08003864 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 8003864:	b480      	push	{r7}
 8003866:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 8003868:	4b05      	ldr	r3, [pc, #20]	; (8003880 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a04      	ldr	r2, [pc, #16]	; (8003880 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800386e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003872:	6013      	str	r3, [r2, #0]
}
 8003874:	bf00      	nop
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr
 800387e:	bf00      	nop
 8003880:	58024800 	.word	0x58024800

08003884 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b084      	sub	sp, #16
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800388c:	4b29      	ldr	r3, [pc, #164]	; (8003934 <HAL_PWREx_ConfigSupply+0xb0>)
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	f003 0307 	and.w	r3, r3, #7
 8003894:	2b06      	cmp	r3, #6
 8003896:	d00a      	beq.n	80038ae <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003898:	4b26      	ldr	r3, [pc, #152]	; (8003934 <HAL_PWREx_ConfigSupply+0xb0>)
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d001      	beq.n	80038aa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e040      	b.n	800392c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80038aa:	2300      	movs	r3, #0
 80038ac:	e03e      	b.n	800392c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80038ae:	4b21      	ldr	r3, [pc, #132]	; (8003934 <HAL_PWREx_ConfigSupply+0xb0>)
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80038b6:	491f      	ldr	r1, [pc, #124]	; (8003934 <HAL_PWREx_ConfigSupply+0xb0>)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	4313      	orrs	r3, r2
 80038bc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80038be:	f7fe f935 	bl	8001b2c <HAL_GetTick>
 80038c2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80038c4:	e009      	b.n	80038da <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80038c6:	f7fe f931 	bl	8001b2c <HAL_GetTick>
 80038ca:	4602      	mov	r2, r0
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80038d4:	d901      	bls.n	80038da <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e028      	b.n	800392c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80038da:	4b16      	ldr	r3, [pc, #88]	; (8003934 <HAL_PWREx_ConfigSupply+0xb0>)
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038e6:	d1ee      	bne.n	80038c6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2b1e      	cmp	r3, #30
 80038ec:	d008      	beq.n	8003900 <HAL_PWREx_ConfigSupply+0x7c>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2b2e      	cmp	r3, #46	; 0x2e
 80038f2:	d005      	beq.n	8003900 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2b1d      	cmp	r3, #29
 80038f8:	d002      	beq.n	8003900 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2b2d      	cmp	r3, #45	; 0x2d
 80038fe:	d114      	bne.n	800392a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003900:	f7fe f914 	bl	8001b2c <HAL_GetTick>
 8003904:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003906:	e009      	b.n	800391c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003908:	f7fe f910 	bl	8001b2c <HAL_GetTick>
 800390c:	4602      	mov	r2, r0
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003916:	d901      	bls.n	800391c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e007      	b.n	800392c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800391c:	4b05      	ldr	r3, [pc, #20]	; (8003934 <HAL_PWREx_ConfigSupply+0xb0>)
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003924:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003928:	d1ee      	bne.n	8003908 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800392a:	2300      	movs	r3, #0
}
 800392c:	4618      	mov	r0, r3
 800392e:	3710      	adds	r7, #16
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}
 8003934:	58024800 	.word	0x58024800

08003938 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b08c      	sub	sp, #48	; 0x30
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d101      	bne.n	800394a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e3f4      	b.n	8004134 <HAL_RCC_OscConfig+0x7fc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 0301 	and.w	r3, r3, #1
 8003952:	2b00      	cmp	r3, #0
 8003954:	f000 80b3 	beq.w	8003abe <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003958:	4b95      	ldr	r3, [pc, #596]	; (8003bb0 <HAL_RCC_OscConfig+0x278>)
 800395a:	691b      	ldr	r3, [r3, #16]
 800395c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003960:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003962:	4b93      	ldr	r3, [pc, #588]	; (8003bb0 <HAL_RCC_OscConfig+0x278>)
 8003964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003966:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800396a:	2b10      	cmp	r3, #16
 800396c:	d007      	beq.n	800397e <HAL_RCC_OscConfig+0x46>
 800396e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003970:	2b18      	cmp	r3, #24
 8003972:	d112      	bne.n	800399a <HAL_RCC_OscConfig+0x62>
 8003974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003976:	f003 0303 	and.w	r3, r3, #3
 800397a:	2b02      	cmp	r3, #2
 800397c:	d10d      	bne.n	800399a <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800397e:	4b8c      	ldr	r3, [pc, #560]	; (8003bb0 <HAL_RCC_OscConfig+0x278>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003986:	2b00      	cmp	r3, #0
 8003988:	f000 8098 	beq.w	8003abc <HAL_RCC_OscConfig+0x184>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	2b00      	cmp	r3, #0
 8003992:	f040 8093 	bne.w	8003abc <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e3cc      	b.n	8004134 <HAL_RCC_OscConfig+0x7fc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039a2:	d106      	bne.n	80039b2 <HAL_RCC_OscConfig+0x7a>
 80039a4:	4b82      	ldr	r3, [pc, #520]	; (8003bb0 <HAL_RCC_OscConfig+0x278>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a81      	ldr	r2, [pc, #516]	; (8003bb0 <HAL_RCC_OscConfig+0x278>)
 80039aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039ae:	6013      	str	r3, [r2, #0]
 80039b0:	e058      	b.n	8003a64 <HAL_RCC_OscConfig+0x12c>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d112      	bne.n	80039e0 <HAL_RCC_OscConfig+0xa8>
 80039ba:	4b7d      	ldr	r3, [pc, #500]	; (8003bb0 <HAL_RCC_OscConfig+0x278>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a7c      	ldr	r2, [pc, #496]	; (8003bb0 <HAL_RCC_OscConfig+0x278>)
 80039c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039c4:	6013      	str	r3, [r2, #0]
 80039c6:	4b7a      	ldr	r3, [pc, #488]	; (8003bb0 <HAL_RCC_OscConfig+0x278>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a79      	ldr	r2, [pc, #484]	; (8003bb0 <HAL_RCC_OscConfig+0x278>)
 80039cc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80039d0:	6013      	str	r3, [r2, #0]
 80039d2:	4b77      	ldr	r3, [pc, #476]	; (8003bb0 <HAL_RCC_OscConfig+0x278>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a76      	ldr	r2, [pc, #472]	; (8003bb0 <HAL_RCC_OscConfig+0x278>)
 80039d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039dc:	6013      	str	r3, [r2, #0]
 80039de:	e041      	b.n	8003a64 <HAL_RCC_OscConfig+0x12c>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039e8:	d112      	bne.n	8003a10 <HAL_RCC_OscConfig+0xd8>
 80039ea:	4b71      	ldr	r3, [pc, #452]	; (8003bb0 <HAL_RCC_OscConfig+0x278>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a70      	ldr	r2, [pc, #448]	; (8003bb0 <HAL_RCC_OscConfig+0x278>)
 80039f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039f4:	6013      	str	r3, [r2, #0]
 80039f6:	4b6e      	ldr	r3, [pc, #440]	; (8003bb0 <HAL_RCC_OscConfig+0x278>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a6d      	ldr	r2, [pc, #436]	; (8003bb0 <HAL_RCC_OscConfig+0x278>)
 80039fc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003a00:	6013      	str	r3, [r2, #0]
 8003a02:	4b6b      	ldr	r3, [pc, #428]	; (8003bb0 <HAL_RCC_OscConfig+0x278>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a6a      	ldr	r2, [pc, #424]	; (8003bb0 <HAL_RCC_OscConfig+0x278>)
 8003a08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a0c:	6013      	str	r3, [r2, #0]
 8003a0e:	e029      	b.n	8003a64 <HAL_RCC_OscConfig+0x12c>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8003a18:	d112      	bne.n	8003a40 <HAL_RCC_OscConfig+0x108>
 8003a1a:	4b65      	ldr	r3, [pc, #404]	; (8003bb0 <HAL_RCC_OscConfig+0x278>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a64      	ldr	r2, [pc, #400]	; (8003bb0 <HAL_RCC_OscConfig+0x278>)
 8003a20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a24:	6013      	str	r3, [r2, #0]
 8003a26:	4b62      	ldr	r3, [pc, #392]	; (8003bb0 <HAL_RCC_OscConfig+0x278>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a61      	ldr	r2, [pc, #388]	; (8003bb0 <HAL_RCC_OscConfig+0x278>)
 8003a2c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a30:	6013      	str	r3, [r2, #0]
 8003a32:	4b5f      	ldr	r3, [pc, #380]	; (8003bb0 <HAL_RCC_OscConfig+0x278>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a5e      	ldr	r2, [pc, #376]	; (8003bb0 <HAL_RCC_OscConfig+0x278>)
 8003a38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a3c:	6013      	str	r3, [r2, #0]
 8003a3e:	e011      	b.n	8003a64 <HAL_RCC_OscConfig+0x12c>
 8003a40:	4b5b      	ldr	r3, [pc, #364]	; (8003bb0 <HAL_RCC_OscConfig+0x278>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a5a      	ldr	r2, [pc, #360]	; (8003bb0 <HAL_RCC_OscConfig+0x278>)
 8003a46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a4a:	6013      	str	r3, [r2, #0]
 8003a4c:	4b58      	ldr	r3, [pc, #352]	; (8003bb0 <HAL_RCC_OscConfig+0x278>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a57      	ldr	r2, [pc, #348]	; (8003bb0 <HAL_RCC_OscConfig+0x278>)
 8003a52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a56:	6013      	str	r3, [r2, #0]
 8003a58:	4b55      	ldr	r3, [pc, #340]	; (8003bb0 <HAL_RCC_OscConfig+0x278>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a54      	ldr	r2, [pc, #336]	; (8003bb0 <HAL_RCC_OscConfig+0x278>)
 8003a5e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003a62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d013      	beq.n	8003a94 <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a6c:	f7fe f85e 	bl	8001b2c <HAL_GetTick>
 8003a70:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003a72:	e008      	b.n	8003a86 <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a74:	f7fe f85a 	bl	8001b2c <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	2b64      	cmp	r3, #100	; 0x64
 8003a80:	d901      	bls.n	8003a86 <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	e356      	b.n	8004134 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003a86:	4b4a      	ldr	r3, [pc, #296]	; (8003bb0 <HAL_RCC_OscConfig+0x278>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d0f0      	beq.n	8003a74 <HAL_RCC_OscConfig+0x13c>
 8003a92:	e014      	b.n	8003abe <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a94:	f7fe f84a 	bl	8001b2c <HAL_GetTick>
 8003a98:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003a9a:	e008      	b.n	8003aae <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a9c:	f7fe f846 	bl	8001b2c <HAL_GetTick>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa4:	1ad3      	subs	r3, r2, r3
 8003aa6:	2b64      	cmp	r3, #100	; 0x64
 8003aa8:	d901      	bls.n	8003aae <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	e342      	b.n	8004134 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003aae:	4b40      	ldr	r3, [pc, #256]	; (8003bb0 <HAL_RCC_OscConfig+0x278>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d1f0      	bne.n	8003a9c <HAL_RCC_OscConfig+0x164>
 8003aba:	e000      	b.n	8003abe <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003abc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 0302 	and.w	r3, r3, #2
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	f000 808d 	beq.w	8003be6 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003acc:	4b38      	ldr	r3, [pc, #224]	; (8003bb0 <HAL_RCC_OscConfig+0x278>)
 8003ace:	691b      	ldr	r3, [r3, #16]
 8003ad0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ad4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003ad6:	4b36      	ldr	r3, [pc, #216]	; (8003bb0 <HAL_RCC_OscConfig+0x278>)
 8003ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ada:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003adc:	6a3b      	ldr	r3, [r7, #32]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d007      	beq.n	8003af2 <HAL_RCC_OscConfig+0x1ba>
 8003ae2:	6a3b      	ldr	r3, [r7, #32]
 8003ae4:	2b18      	cmp	r3, #24
 8003ae6:	d137      	bne.n	8003b58 <HAL_RCC_OscConfig+0x220>
 8003ae8:	69fb      	ldr	r3, [r7, #28]
 8003aea:	f003 0303 	and.w	r3, r3, #3
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d132      	bne.n	8003b58 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003af2:	4b2f      	ldr	r3, [pc, #188]	; (8003bb0 <HAL_RCC_OscConfig+0x278>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 0304 	and.w	r3, r3, #4
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d005      	beq.n	8003b0a <HAL_RCC_OscConfig+0x1d2>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	68db      	ldr	r3, [r3, #12]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d101      	bne.n	8003b0a <HAL_RCC_OscConfig+0x1d2>
      {
        return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e314      	b.n	8004134 <HAL_RCC_OscConfig+0x7fc>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003b0a:	4b29      	ldr	r3, [pc, #164]	; (8003bb0 <HAL_RCC_OscConfig+0x278>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f023 0219 	bic.w	r2, r3, #25
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	4926      	ldr	r1, [pc, #152]	; (8003bb0 <HAL_RCC_OscConfig+0x278>)
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003b1c:	f7fe f806 	bl	8001b2c <HAL_GetTick>
 8003b20:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b22:	e008      	b.n	8003b36 <HAL_RCC_OscConfig+0x1fe>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b24:	f7fe f802 	bl	8001b2c <HAL_GetTick>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	2b02      	cmp	r3, #2
 8003b30:	d901      	bls.n	8003b36 <HAL_RCC_OscConfig+0x1fe>
            {
              return HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	e2fe      	b.n	8004134 <HAL_RCC_OscConfig+0x7fc>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b36:	4b1e      	ldr	r3, [pc, #120]	; (8003bb0 <HAL_RCC_OscConfig+0x278>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 0304 	and.w	r3, r3, #4
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d0f0      	beq.n	8003b24 <HAL_RCC_OscConfig+0x1ec>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b42:	4b1b      	ldr	r3, [pc, #108]	; (8003bb0 <HAL_RCC_OscConfig+0x278>)
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	691b      	ldr	r3, [r3, #16]
 8003b4e:	061b      	lsls	r3, r3, #24
 8003b50:	4917      	ldr	r1, [pc, #92]	; (8003bb0 <HAL_RCC_OscConfig+0x278>)
 8003b52:	4313      	orrs	r3, r2
 8003b54:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b56:	e046      	b.n	8003be6 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d029      	beq.n	8003bb4 <HAL_RCC_OscConfig+0x27c>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003b60:	4b13      	ldr	r3, [pc, #76]	; (8003bb0 <HAL_RCC_OscConfig+0x278>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f023 0219 	bic.w	r2, r3, #25
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	4910      	ldr	r1, [pc, #64]	; (8003bb0 <HAL_RCC_OscConfig+0x278>)
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b72:	f7fd ffdb 	bl	8001b2c <HAL_GetTick>
 8003b76:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b78:	e008      	b.n	8003b8c <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b7a:	f7fd ffd7 	bl	8001b2c <HAL_GetTick>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b82:	1ad3      	subs	r3, r2, r3
 8003b84:	2b02      	cmp	r3, #2
 8003b86:	d901      	bls.n	8003b8c <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8003b88:	2303      	movs	r3, #3
 8003b8a:	e2d3      	b.n	8004134 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b8c:	4b08      	ldr	r3, [pc, #32]	; (8003bb0 <HAL_RCC_OscConfig+0x278>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 0304 	and.w	r3, r3, #4
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d0f0      	beq.n	8003b7a <HAL_RCC_OscConfig+0x242>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b98:	4b05      	ldr	r3, [pc, #20]	; (8003bb0 <HAL_RCC_OscConfig+0x278>)
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	691b      	ldr	r3, [r3, #16]
 8003ba4:	061b      	lsls	r3, r3, #24
 8003ba6:	4902      	ldr	r1, [pc, #8]	; (8003bb0 <HAL_RCC_OscConfig+0x278>)
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	604b      	str	r3, [r1, #4]
 8003bac:	e01b      	b.n	8003be6 <HAL_RCC_OscConfig+0x2ae>
 8003bae:	bf00      	nop
 8003bb0:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bb4:	4b97      	ldr	r3, [pc, #604]	; (8003e14 <HAL_RCC_OscConfig+0x4dc>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a96      	ldr	r2, [pc, #600]	; (8003e14 <HAL_RCC_OscConfig+0x4dc>)
 8003bba:	f023 0301 	bic.w	r3, r3, #1
 8003bbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bc0:	f7fd ffb4 	bl	8001b2c <HAL_GetTick>
 8003bc4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003bc6:	e008      	b.n	8003bda <HAL_RCC_OscConfig+0x2a2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bc8:	f7fd ffb0 	bl	8001b2c <HAL_GetTick>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd0:	1ad3      	subs	r3, r2, r3
 8003bd2:	2b02      	cmp	r3, #2
 8003bd4:	d901      	bls.n	8003bda <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8003bd6:	2303      	movs	r3, #3
 8003bd8:	e2ac      	b.n	8004134 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003bda:	4b8e      	ldr	r3, [pc, #568]	; (8003e14 <HAL_RCC_OscConfig+0x4dc>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 0304 	and.w	r3, r3, #4
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d1f0      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 0310 	and.w	r3, r3, #16
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d06a      	beq.n	8003cc8 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bf2:	4b88      	ldr	r3, [pc, #544]	; (8003e14 <HAL_RCC_OscConfig+0x4dc>)
 8003bf4:	691b      	ldr	r3, [r3, #16]
 8003bf6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003bfa:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003bfc:	4b85      	ldr	r3, [pc, #532]	; (8003e14 <HAL_RCC_OscConfig+0x4dc>)
 8003bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c00:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003c02:	69bb      	ldr	r3, [r7, #24]
 8003c04:	2b08      	cmp	r3, #8
 8003c06:	d007      	beq.n	8003c18 <HAL_RCC_OscConfig+0x2e0>
 8003c08:	69bb      	ldr	r3, [r7, #24]
 8003c0a:	2b18      	cmp	r3, #24
 8003c0c:	d11b      	bne.n	8003c46 <HAL_RCC_OscConfig+0x30e>
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	f003 0303 	and.w	r3, r3, #3
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d116      	bne.n	8003c46 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003c18:	4b7e      	ldr	r3, [pc, #504]	; (8003e14 <HAL_RCC_OscConfig+0x4dc>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d005      	beq.n	8003c30 <HAL_RCC_OscConfig+0x2f8>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	69db      	ldr	r3, [r3, #28]
 8003c28:	2b80      	cmp	r3, #128	; 0x80
 8003c2a:	d001      	beq.n	8003c30 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e281      	b.n	8004134 <HAL_RCC_OscConfig+0x7fc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003c30:	4b78      	ldr	r3, [pc, #480]	; (8003e14 <HAL_RCC_OscConfig+0x4dc>)
 8003c32:	68db      	ldr	r3, [r3, #12]
 8003c34:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6a1b      	ldr	r3, [r3, #32]
 8003c3c:	061b      	lsls	r3, r3, #24
 8003c3e:	4975      	ldr	r1, [pc, #468]	; (8003e14 <HAL_RCC_OscConfig+0x4dc>)
 8003c40:	4313      	orrs	r3, r2
 8003c42:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003c44:	e040      	b.n	8003cc8 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	69db      	ldr	r3, [r3, #28]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d023      	beq.n	8003c96 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003c4e:	4b71      	ldr	r3, [pc, #452]	; (8003e14 <HAL_RCC_OscConfig+0x4dc>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a70      	ldr	r2, [pc, #448]	; (8003e14 <HAL_RCC_OscConfig+0x4dc>)
 8003c54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c5a:	f7fd ff67 	bl	8001b2c <HAL_GetTick>
 8003c5e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003c60:	e008      	b.n	8003c74 <HAL_RCC_OscConfig+0x33c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003c62:	f7fd ff63 	bl	8001b2c <HAL_GetTick>
 8003c66:	4602      	mov	r2, r0
 8003c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6a:	1ad3      	subs	r3, r2, r3
 8003c6c:	2b02      	cmp	r3, #2
 8003c6e:	d901      	bls.n	8003c74 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8003c70:	2303      	movs	r3, #3
 8003c72:	e25f      	b.n	8004134 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003c74:	4b67      	ldr	r3, [pc, #412]	; (8003e14 <HAL_RCC_OscConfig+0x4dc>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d0f0      	beq.n	8003c62 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003c80:	4b64      	ldr	r3, [pc, #400]	; (8003e14 <HAL_RCC_OscConfig+0x4dc>)
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6a1b      	ldr	r3, [r3, #32]
 8003c8c:	061b      	lsls	r3, r3, #24
 8003c8e:	4961      	ldr	r1, [pc, #388]	; (8003e14 <HAL_RCC_OscConfig+0x4dc>)
 8003c90:	4313      	orrs	r3, r2
 8003c92:	60cb      	str	r3, [r1, #12]
 8003c94:	e018      	b.n	8003cc8 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003c96:	4b5f      	ldr	r3, [pc, #380]	; (8003e14 <HAL_RCC_OscConfig+0x4dc>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a5e      	ldr	r2, [pc, #376]	; (8003e14 <HAL_RCC_OscConfig+0x4dc>)
 8003c9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ca0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ca2:	f7fd ff43 	bl	8001b2c <HAL_GetTick>
 8003ca6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003ca8:	e008      	b.n	8003cbc <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003caa:	f7fd ff3f 	bl	8001b2c <HAL_GetTick>
 8003cae:	4602      	mov	r2, r0
 8003cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb2:	1ad3      	subs	r3, r2, r3
 8003cb4:	2b02      	cmp	r3, #2
 8003cb6:	d901      	bls.n	8003cbc <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8003cb8:	2303      	movs	r3, #3
 8003cba:	e23b      	b.n	8004134 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003cbc:	4b55      	ldr	r3, [pc, #340]	; (8003e14 <HAL_RCC_OscConfig+0x4dc>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d1f0      	bne.n	8003caa <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 0308 	and.w	r3, r3, #8
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d036      	beq.n	8003d42 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	695b      	ldr	r3, [r3, #20]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d019      	beq.n	8003d10 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cdc:	4b4d      	ldr	r3, [pc, #308]	; (8003e14 <HAL_RCC_OscConfig+0x4dc>)
 8003cde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ce0:	4a4c      	ldr	r2, [pc, #304]	; (8003e14 <HAL_RCC_OscConfig+0x4dc>)
 8003ce2:	f043 0301 	orr.w	r3, r3, #1
 8003ce6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ce8:	f7fd ff20 	bl	8001b2c <HAL_GetTick>
 8003cec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003cee:	e008      	b.n	8003d02 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003cf0:	f7fd ff1c 	bl	8001b2c <HAL_GetTick>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	2b02      	cmp	r3, #2
 8003cfc:	d901      	bls.n	8003d02 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8003cfe:	2303      	movs	r3, #3
 8003d00:	e218      	b.n	8004134 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003d02:	4b44      	ldr	r3, [pc, #272]	; (8003e14 <HAL_RCC_OscConfig+0x4dc>)
 8003d04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d06:	f003 0302 	and.w	r3, r3, #2
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d0f0      	beq.n	8003cf0 <HAL_RCC_OscConfig+0x3b8>
 8003d0e:	e018      	b.n	8003d42 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d10:	4b40      	ldr	r3, [pc, #256]	; (8003e14 <HAL_RCC_OscConfig+0x4dc>)
 8003d12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d14:	4a3f      	ldr	r2, [pc, #252]	; (8003e14 <HAL_RCC_OscConfig+0x4dc>)
 8003d16:	f023 0301 	bic.w	r3, r3, #1
 8003d1a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d1c:	f7fd ff06 	bl	8001b2c <HAL_GetTick>
 8003d20:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003d22:	e008      	b.n	8003d36 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d24:	f7fd ff02 	bl	8001b2c <HAL_GetTick>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	2b02      	cmp	r3, #2
 8003d30:	d901      	bls.n	8003d36 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003d32:	2303      	movs	r3, #3
 8003d34:	e1fe      	b.n	8004134 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003d36:	4b37      	ldr	r3, [pc, #220]	; (8003e14 <HAL_RCC_OscConfig+0x4dc>)
 8003d38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d3a:	f003 0302 	and.w	r3, r3, #2
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d1f0      	bne.n	8003d24 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0320 	and.w	r3, r3, #32
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d036      	beq.n	8003dbc <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	699b      	ldr	r3, [r3, #24]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d019      	beq.n	8003d8a <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003d56:	4b2f      	ldr	r3, [pc, #188]	; (8003e14 <HAL_RCC_OscConfig+0x4dc>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a2e      	ldr	r2, [pc, #184]	; (8003e14 <HAL_RCC_OscConfig+0x4dc>)
 8003d5c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003d60:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003d62:	f7fd fee3 	bl	8001b2c <HAL_GetTick>
 8003d66:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003d68:	e008      	b.n	8003d7c <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003d6a:	f7fd fedf 	bl	8001b2c <HAL_GetTick>
 8003d6e:	4602      	mov	r2, r0
 8003d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d72:	1ad3      	subs	r3, r2, r3
 8003d74:	2b02      	cmp	r3, #2
 8003d76:	d901      	bls.n	8003d7c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8003d78:	2303      	movs	r3, #3
 8003d7a:	e1db      	b.n	8004134 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003d7c:	4b25      	ldr	r3, [pc, #148]	; (8003e14 <HAL_RCC_OscConfig+0x4dc>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d0f0      	beq.n	8003d6a <HAL_RCC_OscConfig+0x432>
 8003d88:	e018      	b.n	8003dbc <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003d8a:	4b22      	ldr	r3, [pc, #136]	; (8003e14 <HAL_RCC_OscConfig+0x4dc>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a21      	ldr	r2, [pc, #132]	; (8003e14 <HAL_RCC_OscConfig+0x4dc>)
 8003d90:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d94:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003d96:	f7fd fec9 	bl	8001b2c <HAL_GetTick>
 8003d9a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003d9c:	e008      	b.n	8003db0 <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003d9e:	f7fd fec5 	bl	8001b2c <HAL_GetTick>
 8003da2:	4602      	mov	r2, r0
 8003da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da6:	1ad3      	subs	r3, r2, r3
 8003da8:	2b02      	cmp	r3, #2
 8003daa:	d901      	bls.n	8003db0 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8003dac:	2303      	movs	r3, #3
 8003dae:	e1c1      	b.n	8004134 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003db0:	4b18      	ldr	r3, [pc, #96]	; (8003e14 <HAL_RCC_OscConfig+0x4dc>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d1f0      	bne.n	8003d9e <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 0304 	and.w	r3, r3, #4
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	f000 80af 	beq.w	8003f28 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003dca:	4b13      	ldr	r3, [pc, #76]	; (8003e18 <HAL_RCC_OscConfig+0x4e0>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a12      	ldr	r2, [pc, #72]	; (8003e18 <HAL_RCC_OscConfig+0x4e0>)
 8003dd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dd4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003dd6:	f7fd fea9 	bl	8001b2c <HAL_GetTick>
 8003dda:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ddc:	e008      	b.n	8003df0 <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003dde:	f7fd fea5 	bl	8001b2c <HAL_GetTick>
 8003de2:	4602      	mov	r2, r0
 8003de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de6:	1ad3      	subs	r3, r2, r3
 8003de8:	2b64      	cmp	r3, #100	; 0x64
 8003dea:	d901      	bls.n	8003df0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8003dec:	2303      	movs	r3, #3
 8003dee:	e1a1      	b.n	8004134 <HAL_RCC_OscConfig+0x7fc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003df0:	4b09      	ldr	r3, [pc, #36]	; (8003e18 <HAL_RCC_OscConfig+0x4e0>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d0f0      	beq.n	8003dde <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d10b      	bne.n	8003e1c <HAL_RCC_OscConfig+0x4e4>
 8003e04:	4b03      	ldr	r3, [pc, #12]	; (8003e14 <HAL_RCC_OscConfig+0x4dc>)
 8003e06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e08:	4a02      	ldr	r2, [pc, #8]	; (8003e14 <HAL_RCC_OscConfig+0x4dc>)
 8003e0a:	f043 0301 	orr.w	r3, r3, #1
 8003e0e:	6713      	str	r3, [r2, #112]	; 0x70
 8003e10:	e05b      	b.n	8003eca <HAL_RCC_OscConfig+0x592>
 8003e12:	bf00      	nop
 8003e14:	58024400 	.word	0x58024400
 8003e18:	58024800 	.word	0x58024800
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d112      	bne.n	8003e4a <HAL_RCC_OscConfig+0x512>
 8003e24:	4b9d      	ldr	r3, [pc, #628]	; (800409c <HAL_RCC_OscConfig+0x764>)
 8003e26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e28:	4a9c      	ldr	r2, [pc, #624]	; (800409c <HAL_RCC_OscConfig+0x764>)
 8003e2a:	f023 0301 	bic.w	r3, r3, #1
 8003e2e:	6713      	str	r3, [r2, #112]	; 0x70
 8003e30:	4b9a      	ldr	r3, [pc, #616]	; (800409c <HAL_RCC_OscConfig+0x764>)
 8003e32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e34:	4a99      	ldr	r2, [pc, #612]	; (800409c <HAL_RCC_OscConfig+0x764>)
 8003e36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e3a:	6713      	str	r3, [r2, #112]	; 0x70
 8003e3c:	4b97      	ldr	r3, [pc, #604]	; (800409c <HAL_RCC_OscConfig+0x764>)
 8003e3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e40:	4a96      	ldr	r2, [pc, #600]	; (800409c <HAL_RCC_OscConfig+0x764>)
 8003e42:	f023 0304 	bic.w	r3, r3, #4
 8003e46:	6713      	str	r3, [r2, #112]	; 0x70
 8003e48:	e03f      	b.n	8003eca <HAL_RCC_OscConfig+0x592>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	2b05      	cmp	r3, #5
 8003e50:	d112      	bne.n	8003e78 <HAL_RCC_OscConfig+0x540>
 8003e52:	4b92      	ldr	r3, [pc, #584]	; (800409c <HAL_RCC_OscConfig+0x764>)
 8003e54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e56:	4a91      	ldr	r2, [pc, #580]	; (800409c <HAL_RCC_OscConfig+0x764>)
 8003e58:	f043 0304 	orr.w	r3, r3, #4
 8003e5c:	6713      	str	r3, [r2, #112]	; 0x70
 8003e5e:	4b8f      	ldr	r3, [pc, #572]	; (800409c <HAL_RCC_OscConfig+0x764>)
 8003e60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e62:	4a8e      	ldr	r2, [pc, #568]	; (800409c <HAL_RCC_OscConfig+0x764>)
 8003e64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e68:	6713      	str	r3, [r2, #112]	; 0x70
 8003e6a:	4b8c      	ldr	r3, [pc, #560]	; (800409c <HAL_RCC_OscConfig+0x764>)
 8003e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e6e:	4a8b      	ldr	r2, [pc, #556]	; (800409c <HAL_RCC_OscConfig+0x764>)
 8003e70:	f043 0301 	orr.w	r3, r3, #1
 8003e74:	6713      	str	r3, [r2, #112]	; 0x70
 8003e76:	e028      	b.n	8003eca <HAL_RCC_OscConfig+0x592>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	2b85      	cmp	r3, #133	; 0x85
 8003e7e:	d112      	bne.n	8003ea6 <HAL_RCC_OscConfig+0x56e>
 8003e80:	4b86      	ldr	r3, [pc, #536]	; (800409c <HAL_RCC_OscConfig+0x764>)
 8003e82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e84:	4a85      	ldr	r2, [pc, #532]	; (800409c <HAL_RCC_OscConfig+0x764>)
 8003e86:	f043 0304 	orr.w	r3, r3, #4
 8003e8a:	6713      	str	r3, [r2, #112]	; 0x70
 8003e8c:	4b83      	ldr	r3, [pc, #524]	; (800409c <HAL_RCC_OscConfig+0x764>)
 8003e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e90:	4a82      	ldr	r2, [pc, #520]	; (800409c <HAL_RCC_OscConfig+0x764>)
 8003e92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e96:	6713      	str	r3, [r2, #112]	; 0x70
 8003e98:	4b80      	ldr	r3, [pc, #512]	; (800409c <HAL_RCC_OscConfig+0x764>)
 8003e9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e9c:	4a7f      	ldr	r2, [pc, #508]	; (800409c <HAL_RCC_OscConfig+0x764>)
 8003e9e:	f043 0301 	orr.w	r3, r3, #1
 8003ea2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ea4:	e011      	b.n	8003eca <HAL_RCC_OscConfig+0x592>
 8003ea6:	4b7d      	ldr	r3, [pc, #500]	; (800409c <HAL_RCC_OscConfig+0x764>)
 8003ea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eaa:	4a7c      	ldr	r2, [pc, #496]	; (800409c <HAL_RCC_OscConfig+0x764>)
 8003eac:	f023 0301 	bic.w	r3, r3, #1
 8003eb0:	6713      	str	r3, [r2, #112]	; 0x70
 8003eb2:	4b7a      	ldr	r3, [pc, #488]	; (800409c <HAL_RCC_OscConfig+0x764>)
 8003eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eb6:	4a79      	ldr	r2, [pc, #484]	; (800409c <HAL_RCC_OscConfig+0x764>)
 8003eb8:	f023 0304 	bic.w	r3, r3, #4
 8003ebc:	6713      	str	r3, [r2, #112]	; 0x70
 8003ebe:	4b77      	ldr	r3, [pc, #476]	; (800409c <HAL_RCC_OscConfig+0x764>)
 8003ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ec2:	4a76      	ldr	r2, [pc, #472]	; (800409c <HAL_RCC_OscConfig+0x764>)
 8003ec4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ec8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d015      	beq.n	8003efe <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ed2:	f7fd fe2b 	bl	8001b2c <HAL_GetTick>
 8003ed6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ed8:	e00a      	b.n	8003ef0 <HAL_RCC_OscConfig+0x5b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003eda:	f7fd fe27 	bl	8001b2c <HAL_GetTick>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee2:	1ad3      	subs	r3, r2, r3
 8003ee4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d901      	bls.n	8003ef0 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8003eec:	2303      	movs	r3, #3
 8003eee:	e121      	b.n	8004134 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ef0:	4b6a      	ldr	r3, [pc, #424]	; (800409c <HAL_RCC_OscConfig+0x764>)
 8003ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ef4:	f003 0302 	and.w	r3, r3, #2
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d0ee      	beq.n	8003eda <HAL_RCC_OscConfig+0x5a2>
 8003efc:	e014      	b.n	8003f28 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003efe:	f7fd fe15 	bl	8001b2c <HAL_GetTick>
 8003f02:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003f04:	e00a      	b.n	8003f1c <HAL_RCC_OscConfig+0x5e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f06:	f7fd fe11 	bl	8001b2c <HAL_GetTick>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0e:	1ad3      	subs	r3, r2, r3
 8003f10:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d901      	bls.n	8003f1c <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8003f18:	2303      	movs	r3, #3
 8003f1a:	e10b      	b.n	8004134 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003f1c:	4b5f      	ldr	r3, [pc, #380]	; (800409c <HAL_RCC_OscConfig+0x764>)
 8003f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f20:	f003 0302 	and.w	r3, r3, #2
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d1ee      	bne.n	8003f06 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	f000 8100 	beq.w	8004132 <HAL_RCC_OscConfig+0x7fa>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003f32:	4b5a      	ldr	r3, [pc, #360]	; (800409c <HAL_RCC_OscConfig+0x764>)
 8003f34:	691b      	ldr	r3, [r3, #16]
 8003f36:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f3a:	2b18      	cmp	r3, #24
 8003f3c:	f000 80bb 	beq.w	80040b6 <HAL_RCC_OscConfig+0x77e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f44:	2b02      	cmp	r3, #2
 8003f46:	f040 8095 	bne.w	8004074 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f4a:	4b54      	ldr	r3, [pc, #336]	; (800409c <HAL_RCC_OscConfig+0x764>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a53      	ldr	r2, [pc, #332]	; (800409c <HAL_RCC_OscConfig+0x764>)
 8003f50:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f56:	f7fd fde9 	bl	8001b2c <HAL_GetTick>
 8003f5a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f5c:	e008      	b.n	8003f70 <HAL_RCC_OscConfig+0x638>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f5e:	f7fd fde5 	bl	8001b2c <HAL_GetTick>
 8003f62:	4602      	mov	r2, r0
 8003f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f66:	1ad3      	subs	r3, r2, r3
 8003f68:	2b02      	cmp	r3, #2
 8003f6a:	d901      	bls.n	8003f70 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8003f6c:	2303      	movs	r3, #3
 8003f6e:	e0e1      	b.n	8004134 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f70:	4b4a      	ldr	r3, [pc, #296]	; (800409c <HAL_RCC_OscConfig+0x764>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d1f0      	bne.n	8003f5e <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f7c:	4b47      	ldr	r3, [pc, #284]	; (800409c <HAL_RCC_OscConfig+0x764>)
 8003f7e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f80:	4b47      	ldr	r3, [pc, #284]	; (80040a0 <HAL_RCC_OscConfig+0x768>)
 8003f82:	4013      	ands	r3, r2
 8003f84:	687a      	ldr	r2, [r7, #4]
 8003f86:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003f88:	687a      	ldr	r2, [r7, #4]
 8003f8a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003f8c:	0112      	lsls	r2, r2, #4
 8003f8e:	430a      	orrs	r2, r1
 8003f90:	4942      	ldr	r1, [pc, #264]	; (800409c <HAL_RCC_OscConfig+0x764>)
 8003f92:	4313      	orrs	r3, r2
 8003f94:	628b      	str	r3, [r1, #40]	; 0x28
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f9a:	3b01      	subs	r3, #1
 8003f9c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fa4:	3b01      	subs	r3, #1
 8003fa6:	025b      	lsls	r3, r3, #9
 8003fa8:	b29b      	uxth	r3, r3
 8003faa:	431a      	orrs	r2, r3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fb0:	3b01      	subs	r3, #1
 8003fb2:	041b      	lsls	r3, r3, #16
 8003fb4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003fb8:	431a      	orrs	r2, r3
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fbe:	3b01      	subs	r3, #1
 8003fc0:	061b      	lsls	r3, r3, #24
 8003fc2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003fc6:	4935      	ldr	r1, [pc, #212]	; (800409c <HAL_RCC_OscConfig+0x764>)
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003fcc:	4b33      	ldr	r3, [pc, #204]	; (800409c <HAL_RCC_OscConfig+0x764>)
 8003fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd0:	4a32      	ldr	r2, [pc, #200]	; (800409c <HAL_RCC_OscConfig+0x764>)
 8003fd2:	f023 0301 	bic.w	r3, r3, #1
 8003fd6:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003fd8:	4b30      	ldr	r3, [pc, #192]	; (800409c <HAL_RCC_OscConfig+0x764>)
 8003fda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fdc:	4b31      	ldr	r3, [pc, #196]	; (80040a4 <HAL_RCC_OscConfig+0x76c>)
 8003fde:	4013      	ands	r3, r2
 8003fe0:	687a      	ldr	r2, [r7, #4]
 8003fe2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003fe4:	00d2      	lsls	r2, r2, #3
 8003fe6:	492d      	ldr	r1, [pc, #180]	; (800409c <HAL_RCC_OscConfig+0x764>)
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003fec:	4b2b      	ldr	r3, [pc, #172]	; (800409c <HAL_RCC_OscConfig+0x764>)
 8003fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff0:	f023 020c 	bic.w	r2, r3, #12
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff8:	4928      	ldr	r1, [pc, #160]	; (800409c <HAL_RCC_OscConfig+0x764>)
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003ffe:	4b27      	ldr	r3, [pc, #156]	; (800409c <HAL_RCC_OscConfig+0x764>)
 8004000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004002:	f023 0202 	bic.w	r2, r3, #2
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800400a:	4924      	ldr	r1, [pc, #144]	; (800409c <HAL_RCC_OscConfig+0x764>)
 800400c:	4313      	orrs	r3, r2
 800400e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004010:	4b22      	ldr	r3, [pc, #136]	; (800409c <HAL_RCC_OscConfig+0x764>)
 8004012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004014:	4a21      	ldr	r2, [pc, #132]	; (800409c <HAL_RCC_OscConfig+0x764>)
 8004016:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800401a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800401c:	4b1f      	ldr	r3, [pc, #124]	; (800409c <HAL_RCC_OscConfig+0x764>)
 800401e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004020:	4a1e      	ldr	r2, [pc, #120]	; (800409c <HAL_RCC_OscConfig+0x764>)
 8004022:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004026:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004028:	4b1c      	ldr	r3, [pc, #112]	; (800409c <HAL_RCC_OscConfig+0x764>)
 800402a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800402c:	4a1b      	ldr	r2, [pc, #108]	; (800409c <HAL_RCC_OscConfig+0x764>)
 800402e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004032:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004034:	4b19      	ldr	r3, [pc, #100]	; (800409c <HAL_RCC_OscConfig+0x764>)
 8004036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004038:	4a18      	ldr	r2, [pc, #96]	; (800409c <HAL_RCC_OscConfig+0x764>)
 800403a:	f043 0301 	orr.w	r3, r3, #1
 800403e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004040:	4b16      	ldr	r3, [pc, #88]	; (800409c <HAL_RCC_OscConfig+0x764>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a15      	ldr	r2, [pc, #84]	; (800409c <HAL_RCC_OscConfig+0x764>)
 8004046:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800404a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800404c:	f7fd fd6e 	bl	8001b2c <HAL_GetTick>
 8004050:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004052:	e008      	b.n	8004066 <HAL_RCC_OscConfig+0x72e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004054:	f7fd fd6a 	bl	8001b2c <HAL_GetTick>
 8004058:	4602      	mov	r2, r0
 800405a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	2b02      	cmp	r3, #2
 8004060:	d901      	bls.n	8004066 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8004062:	2303      	movs	r3, #3
 8004064:	e066      	b.n	8004134 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004066:	4b0d      	ldr	r3, [pc, #52]	; (800409c <HAL_RCC_OscConfig+0x764>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800406e:	2b00      	cmp	r3, #0
 8004070:	d0f0      	beq.n	8004054 <HAL_RCC_OscConfig+0x71c>
 8004072:	e05e      	b.n	8004132 <HAL_RCC_OscConfig+0x7fa>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004074:	4b09      	ldr	r3, [pc, #36]	; (800409c <HAL_RCC_OscConfig+0x764>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a08      	ldr	r2, [pc, #32]	; (800409c <HAL_RCC_OscConfig+0x764>)
 800407a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800407e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004080:	f7fd fd54 	bl	8001b2c <HAL_GetTick>
 8004084:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004086:	e00f      	b.n	80040a8 <HAL_RCC_OscConfig+0x770>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004088:	f7fd fd50 	bl	8001b2c <HAL_GetTick>
 800408c:	4602      	mov	r2, r0
 800408e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004090:	1ad3      	subs	r3, r2, r3
 8004092:	2b02      	cmp	r3, #2
 8004094:	d908      	bls.n	80040a8 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8004096:	2303      	movs	r3, #3
 8004098:	e04c      	b.n	8004134 <HAL_RCC_OscConfig+0x7fc>
 800409a:	bf00      	nop
 800409c:	58024400 	.word	0x58024400
 80040a0:	fffffc0c 	.word	0xfffffc0c
 80040a4:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80040a8:	4b24      	ldr	r3, [pc, #144]	; (800413c <HAL_RCC_OscConfig+0x804>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d1e9      	bne.n	8004088 <HAL_RCC_OscConfig+0x750>
 80040b4:	e03d      	b.n	8004132 <HAL_RCC_OscConfig+0x7fa>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80040b6:	4b21      	ldr	r3, [pc, #132]	; (800413c <HAL_RCC_OscConfig+0x804>)
 80040b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ba:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80040bc:	4b1f      	ldr	r3, [pc, #124]	; (800413c <HAL_RCC_OscConfig+0x804>)
 80040be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c0:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d031      	beq.n	800412e <HAL_RCC_OscConfig+0x7f6>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	f003 0203 	and.w	r2, r3, #3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d12a      	bne.n	800412e <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	091b      	lsrs	r3, r3, #4
 80040dc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d122      	bne.n	800412e <HAL_RCC_OscConfig+0x7f6>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f2:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d11a      	bne.n	800412e <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	0a5b      	lsrs	r3, r3, #9
 80040fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004104:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004106:	429a      	cmp	r2, r3
 8004108:	d111      	bne.n	800412e <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	0c1b      	lsrs	r3, r3, #16
 800410e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004116:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004118:	429a      	cmp	r2, r3
 800411a:	d108      	bne.n	800412e <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	0e1b      	lsrs	r3, r3, #24
 8004120:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004128:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800412a:	429a      	cmp	r2, r3
 800412c:	d001      	beq.n	8004132 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e000      	b.n	8004134 <HAL_RCC_OscConfig+0x7fc>
      }
    }
  }
  return HAL_OK;
 8004132:	2300      	movs	r3, #0
}
 8004134:	4618      	mov	r0, r3
 8004136:	3730      	adds	r7, #48	; 0x30
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}
 800413c:	58024400 	.word	0x58024400

08004140 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b086      	sub	sp, #24
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
 8004148:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d101      	bne.n	8004154 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	e19c      	b.n	800448e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004154:	4b8a      	ldr	r3, [pc, #552]	; (8004380 <HAL_RCC_ClockConfig+0x240>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 030f 	and.w	r3, r3, #15
 800415c:	683a      	ldr	r2, [r7, #0]
 800415e:	429a      	cmp	r2, r3
 8004160:	d910      	bls.n	8004184 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004162:	4b87      	ldr	r3, [pc, #540]	; (8004380 <HAL_RCC_ClockConfig+0x240>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f023 020f 	bic.w	r2, r3, #15
 800416a:	4985      	ldr	r1, [pc, #532]	; (8004380 <HAL_RCC_ClockConfig+0x240>)
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	4313      	orrs	r3, r2
 8004170:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004172:	4b83      	ldr	r3, [pc, #524]	; (8004380 <HAL_RCC_ClockConfig+0x240>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 030f 	and.w	r3, r3, #15
 800417a:	683a      	ldr	r2, [r7, #0]
 800417c:	429a      	cmp	r2, r3
 800417e:	d001      	beq.n	8004184 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	e184      	b.n	800448e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f003 0304 	and.w	r3, r3, #4
 800418c:	2b00      	cmp	r3, #0
 800418e:	d010      	beq.n	80041b2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	691a      	ldr	r2, [r3, #16]
 8004194:	4b7b      	ldr	r3, [pc, #492]	; (8004384 <HAL_RCC_ClockConfig+0x244>)
 8004196:	699b      	ldr	r3, [r3, #24]
 8004198:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800419c:	429a      	cmp	r2, r3
 800419e:	d908      	bls.n	80041b2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80041a0:	4b78      	ldr	r3, [pc, #480]	; (8004384 <HAL_RCC_ClockConfig+0x244>)
 80041a2:	699b      	ldr	r3, [r3, #24]
 80041a4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	691b      	ldr	r3, [r3, #16]
 80041ac:	4975      	ldr	r1, [pc, #468]	; (8004384 <HAL_RCC_ClockConfig+0x244>)
 80041ae:	4313      	orrs	r3, r2
 80041b0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 0308 	and.w	r3, r3, #8
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d010      	beq.n	80041e0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	695a      	ldr	r2, [r3, #20]
 80041c2:	4b70      	ldr	r3, [pc, #448]	; (8004384 <HAL_RCC_ClockConfig+0x244>)
 80041c4:	69db      	ldr	r3, [r3, #28]
 80041c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80041ca:	429a      	cmp	r2, r3
 80041cc:	d908      	bls.n	80041e0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80041ce:	4b6d      	ldr	r3, [pc, #436]	; (8004384 <HAL_RCC_ClockConfig+0x244>)
 80041d0:	69db      	ldr	r3, [r3, #28]
 80041d2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	695b      	ldr	r3, [r3, #20]
 80041da:	496a      	ldr	r1, [pc, #424]	; (8004384 <HAL_RCC_ClockConfig+0x244>)
 80041dc:	4313      	orrs	r3, r2
 80041de:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 0310 	and.w	r3, r3, #16
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d010      	beq.n	800420e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	699a      	ldr	r2, [r3, #24]
 80041f0:	4b64      	ldr	r3, [pc, #400]	; (8004384 <HAL_RCC_ClockConfig+0x244>)
 80041f2:	69db      	ldr	r3, [r3, #28]
 80041f4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d908      	bls.n	800420e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80041fc:	4b61      	ldr	r3, [pc, #388]	; (8004384 <HAL_RCC_ClockConfig+0x244>)
 80041fe:	69db      	ldr	r3, [r3, #28]
 8004200:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	699b      	ldr	r3, [r3, #24]
 8004208:	495e      	ldr	r1, [pc, #376]	; (8004384 <HAL_RCC_ClockConfig+0x244>)
 800420a:	4313      	orrs	r3, r2
 800420c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 0320 	and.w	r3, r3, #32
 8004216:	2b00      	cmp	r3, #0
 8004218:	d010      	beq.n	800423c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	69da      	ldr	r2, [r3, #28]
 800421e:	4b59      	ldr	r3, [pc, #356]	; (8004384 <HAL_RCC_ClockConfig+0x244>)
 8004220:	6a1b      	ldr	r3, [r3, #32]
 8004222:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004226:	429a      	cmp	r2, r3
 8004228:	d908      	bls.n	800423c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800422a:	4b56      	ldr	r3, [pc, #344]	; (8004384 <HAL_RCC_ClockConfig+0x244>)
 800422c:	6a1b      	ldr	r3, [r3, #32]
 800422e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	69db      	ldr	r3, [r3, #28]
 8004236:	4953      	ldr	r1, [pc, #332]	; (8004384 <HAL_RCC_ClockConfig+0x244>)
 8004238:	4313      	orrs	r3, r2
 800423a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 0302 	and.w	r3, r3, #2
 8004244:	2b00      	cmp	r3, #0
 8004246:	d010      	beq.n	800426a <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	68da      	ldr	r2, [r3, #12]
 800424c:	4b4d      	ldr	r3, [pc, #308]	; (8004384 <HAL_RCC_ClockConfig+0x244>)
 800424e:	699b      	ldr	r3, [r3, #24]
 8004250:	f003 030f 	and.w	r3, r3, #15
 8004254:	429a      	cmp	r2, r3
 8004256:	d908      	bls.n	800426a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004258:	4b4a      	ldr	r3, [pc, #296]	; (8004384 <HAL_RCC_ClockConfig+0x244>)
 800425a:	699b      	ldr	r3, [r3, #24]
 800425c:	f023 020f 	bic.w	r2, r3, #15
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	4947      	ldr	r1, [pc, #284]	; (8004384 <HAL_RCC_ClockConfig+0x244>)
 8004266:	4313      	orrs	r3, r2
 8004268:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 0301 	and.w	r3, r3, #1
 8004272:	2b00      	cmp	r3, #0
 8004274:	d055      	beq.n	8004322 <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004276:	4b43      	ldr	r3, [pc, #268]	; (8004384 <HAL_RCC_ClockConfig+0x244>)
 8004278:	699b      	ldr	r3, [r3, #24]
 800427a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	4940      	ldr	r1, [pc, #256]	; (8004384 <HAL_RCC_ClockConfig+0x244>)
 8004284:	4313      	orrs	r3, r2
 8004286:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	2b02      	cmp	r3, #2
 800428e:	d107      	bne.n	80042a0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004290:	4b3c      	ldr	r3, [pc, #240]	; (8004384 <HAL_RCC_ClockConfig+0x244>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004298:	2b00      	cmp	r3, #0
 800429a:	d121      	bne.n	80042e0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	e0f6      	b.n	800448e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	2b03      	cmp	r3, #3
 80042a6:	d107      	bne.n	80042b8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80042a8:	4b36      	ldr	r3, [pc, #216]	; (8004384 <HAL_RCC_ClockConfig+0x244>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d115      	bne.n	80042e0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	e0ea      	b.n	800448e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d107      	bne.n	80042d0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80042c0:	4b30      	ldr	r3, [pc, #192]	; (8004384 <HAL_RCC_ClockConfig+0x244>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d109      	bne.n	80042e0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	e0de      	b.n	800448e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80042d0:	4b2c      	ldr	r3, [pc, #176]	; (8004384 <HAL_RCC_ClockConfig+0x244>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f003 0304 	and.w	r3, r3, #4
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d101      	bne.n	80042e0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e0d6      	b.n	800448e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80042e0:	4b28      	ldr	r3, [pc, #160]	; (8004384 <HAL_RCC_ClockConfig+0x244>)
 80042e2:	691b      	ldr	r3, [r3, #16]
 80042e4:	f023 0207 	bic.w	r2, r3, #7
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	4925      	ldr	r1, [pc, #148]	; (8004384 <HAL_RCC_ClockConfig+0x244>)
 80042ee:	4313      	orrs	r3, r2
 80042f0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042f2:	f7fd fc1b 	bl	8001b2c <HAL_GetTick>
 80042f6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042f8:	e00a      	b.n	8004310 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042fa:	f7fd fc17 	bl	8001b2c <HAL_GetTick>
 80042fe:	4602      	mov	r2, r0
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	1ad3      	subs	r3, r2, r3
 8004304:	f241 3288 	movw	r2, #5000	; 0x1388
 8004308:	4293      	cmp	r3, r2
 800430a:	d901      	bls.n	8004310 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800430c:	2303      	movs	r3, #3
 800430e:	e0be      	b.n	800448e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004310:	4b1c      	ldr	r3, [pc, #112]	; (8004384 <HAL_RCC_ClockConfig+0x244>)
 8004312:	691b      	ldr	r3, [r3, #16]
 8004314:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	00db      	lsls	r3, r3, #3
 800431e:	429a      	cmp	r2, r3
 8004320:	d1eb      	bne.n	80042fa <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 0302 	and.w	r3, r3, #2
 800432a:	2b00      	cmp	r3, #0
 800432c:	d010      	beq.n	8004350 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	68da      	ldr	r2, [r3, #12]
 8004332:	4b14      	ldr	r3, [pc, #80]	; (8004384 <HAL_RCC_ClockConfig+0x244>)
 8004334:	699b      	ldr	r3, [r3, #24]
 8004336:	f003 030f 	and.w	r3, r3, #15
 800433a:	429a      	cmp	r2, r3
 800433c:	d208      	bcs.n	8004350 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800433e:	4b11      	ldr	r3, [pc, #68]	; (8004384 <HAL_RCC_ClockConfig+0x244>)
 8004340:	699b      	ldr	r3, [r3, #24]
 8004342:	f023 020f 	bic.w	r2, r3, #15
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	68db      	ldr	r3, [r3, #12]
 800434a:	490e      	ldr	r1, [pc, #56]	; (8004384 <HAL_RCC_ClockConfig+0x244>)
 800434c:	4313      	orrs	r3, r2
 800434e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004350:	4b0b      	ldr	r3, [pc, #44]	; (8004380 <HAL_RCC_ClockConfig+0x240>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 030f 	and.w	r3, r3, #15
 8004358:	683a      	ldr	r2, [r7, #0]
 800435a:	429a      	cmp	r2, r3
 800435c:	d214      	bcs.n	8004388 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800435e:	4b08      	ldr	r3, [pc, #32]	; (8004380 <HAL_RCC_ClockConfig+0x240>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f023 020f 	bic.w	r2, r3, #15
 8004366:	4906      	ldr	r1, [pc, #24]	; (8004380 <HAL_RCC_ClockConfig+0x240>)
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	4313      	orrs	r3, r2
 800436c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800436e:	4b04      	ldr	r3, [pc, #16]	; (8004380 <HAL_RCC_ClockConfig+0x240>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 030f 	and.w	r3, r3, #15
 8004376:	683a      	ldr	r2, [r7, #0]
 8004378:	429a      	cmp	r2, r3
 800437a:	d005      	beq.n	8004388 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	e086      	b.n	800448e <HAL_RCC_ClockConfig+0x34e>
 8004380:	52002000 	.word	0x52002000
 8004384:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f003 0304 	and.w	r3, r3, #4
 8004390:	2b00      	cmp	r3, #0
 8004392:	d010      	beq.n	80043b6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	691a      	ldr	r2, [r3, #16]
 8004398:	4b3f      	ldr	r3, [pc, #252]	; (8004498 <HAL_RCC_ClockConfig+0x358>)
 800439a:	699b      	ldr	r3, [r3, #24]
 800439c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d208      	bcs.n	80043b6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80043a4:	4b3c      	ldr	r3, [pc, #240]	; (8004498 <HAL_RCC_ClockConfig+0x358>)
 80043a6:	699b      	ldr	r3, [r3, #24]
 80043a8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	691b      	ldr	r3, [r3, #16]
 80043b0:	4939      	ldr	r1, [pc, #228]	; (8004498 <HAL_RCC_ClockConfig+0x358>)
 80043b2:	4313      	orrs	r3, r2
 80043b4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 0308 	and.w	r3, r3, #8
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d010      	beq.n	80043e4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	695a      	ldr	r2, [r3, #20]
 80043c6:	4b34      	ldr	r3, [pc, #208]	; (8004498 <HAL_RCC_ClockConfig+0x358>)
 80043c8:	69db      	ldr	r3, [r3, #28]
 80043ca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d208      	bcs.n	80043e4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80043d2:	4b31      	ldr	r3, [pc, #196]	; (8004498 <HAL_RCC_ClockConfig+0x358>)
 80043d4:	69db      	ldr	r3, [r3, #28]
 80043d6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	695b      	ldr	r3, [r3, #20]
 80043de:	492e      	ldr	r1, [pc, #184]	; (8004498 <HAL_RCC_ClockConfig+0x358>)
 80043e0:	4313      	orrs	r3, r2
 80043e2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f003 0310 	and.w	r3, r3, #16
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d010      	beq.n	8004412 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	699a      	ldr	r2, [r3, #24]
 80043f4:	4b28      	ldr	r3, [pc, #160]	; (8004498 <HAL_RCC_ClockConfig+0x358>)
 80043f6:	69db      	ldr	r3, [r3, #28]
 80043f8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80043fc:	429a      	cmp	r2, r3
 80043fe:	d208      	bcs.n	8004412 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004400:	4b25      	ldr	r3, [pc, #148]	; (8004498 <HAL_RCC_ClockConfig+0x358>)
 8004402:	69db      	ldr	r3, [r3, #28]
 8004404:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	699b      	ldr	r3, [r3, #24]
 800440c:	4922      	ldr	r1, [pc, #136]	; (8004498 <HAL_RCC_ClockConfig+0x358>)
 800440e:	4313      	orrs	r3, r2
 8004410:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 0320 	and.w	r3, r3, #32
 800441a:	2b00      	cmp	r3, #0
 800441c:	d010      	beq.n	8004440 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	69da      	ldr	r2, [r3, #28]
 8004422:	4b1d      	ldr	r3, [pc, #116]	; (8004498 <HAL_RCC_ClockConfig+0x358>)
 8004424:	6a1b      	ldr	r3, [r3, #32]
 8004426:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800442a:	429a      	cmp	r2, r3
 800442c:	d208      	bcs.n	8004440 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800442e:	4b1a      	ldr	r3, [pc, #104]	; (8004498 <HAL_RCC_ClockConfig+0x358>)
 8004430:	6a1b      	ldr	r3, [r3, #32]
 8004432:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	69db      	ldr	r3, [r3, #28]
 800443a:	4917      	ldr	r1, [pc, #92]	; (8004498 <HAL_RCC_ClockConfig+0x358>)
 800443c:	4313      	orrs	r3, r2
 800443e:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8004440:	f000 f89e 	bl	8004580 <HAL_RCC_GetSysClockFreq>
 8004444:	4602      	mov	r2, r0
 8004446:	4b14      	ldr	r3, [pc, #80]	; (8004498 <HAL_RCC_ClockConfig+0x358>)
 8004448:	699b      	ldr	r3, [r3, #24]
 800444a:	0a1b      	lsrs	r3, r3, #8
 800444c:	f003 030f 	and.w	r3, r3, #15
 8004450:	4912      	ldr	r1, [pc, #72]	; (800449c <HAL_RCC_ClockConfig+0x35c>)
 8004452:	5ccb      	ldrb	r3, [r1, r3]
 8004454:	f003 031f 	and.w	r3, r3, #31
 8004458:	fa22 f303 	lsr.w	r3, r2, r3
 800445c:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800445e:	4b0e      	ldr	r3, [pc, #56]	; (8004498 <HAL_RCC_ClockConfig+0x358>)
 8004460:	699b      	ldr	r3, [r3, #24]
 8004462:	f003 030f 	and.w	r3, r3, #15
 8004466:	4a0d      	ldr	r2, [pc, #52]	; (800449c <HAL_RCC_ClockConfig+0x35c>)
 8004468:	5cd3      	ldrb	r3, [r2, r3]
 800446a:	f003 031f 	and.w	r3, r3, #31
 800446e:	693a      	ldr	r2, [r7, #16]
 8004470:	fa22 f303 	lsr.w	r3, r2, r3
 8004474:	4a0a      	ldr	r2, [pc, #40]	; (80044a0 <HAL_RCC_ClockConfig+0x360>)
 8004476:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004478:	4a0a      	ldr	r2, [pc, #40]	; (80044a4 <HAL_RCC_ClockConfig+0x364>)
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800447e:	4b0a      	ldr	r3, [pc, #40]	; (80044a8 <HAL_RCC_ClockConfig+0x368>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4618      	mov	r0, r3
 8004484:	f7fd fb08 	bl	8001a98 <HAL_InitTick>
 8004488:	4603      	mov	r3, r0
 800448a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800448c:	7bfb      	ldrb	r3, [r7, #15]
}
 800448e:	4618      	mov	r0, r3
 8004490:	3718      	adds	r7, #24
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}
 8004496:	bf00      	nop
 8004498:	58024400 	.word	0x58024400
 800449c:	08008454 	.word	0x08008454
 80044a0:	24000004 	.word	0x24000004
 80044a4:	24000000 	.word	0x24000000
 80044a8:	24000008 	.word	0x24000008

080044ac <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b08c      	sub	sp, #48	; 0x30
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	60f8      	str	r0, [r7, #12]
 80044b4:	60b9      	str	r1, [r7, #8]
 80044b6:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d12a      	bne.n	8004514 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 80044be:	4b2d      	ldr	r3, [pc, #180]	; (8004574 <HAL_RCC_MCOConfig+0xc8>)
 80044c0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80044c4:	4a2b      	ldr	r2, [pc, #172]	; (8004574 <HAL_RCC_MCOConfig+0xc8>)
 80044c6:	f043 0301 	orr.w	r3, r3, #1
 80044ca:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80044ce:	4b29      	ldr	r3, [pc, #164]	; (8004574 <HAL_RCC_MCOConfig+0xc8>)
 80044d0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80044d4:	f003 0301 	and.w	r3, r3, #1
 80044d8:	61bb      	str	r3, [r7, #24]
 80044da:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 80044dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80044e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044e2:	2302      	movs	r3, #2
 80044e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044e6:	2303      	movs	r3, #3
 80044e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044ea:	2300      	movs	r3, #0
 80044ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80044ee:	2300      	movs	r3, #0
 80044f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80044f2:	f107 031c 	add.w	r3, r7, #28
 80044f6:	4619      	mov	r1, r3
 80044f8:	481f      	ldr	r0, [pc, #124]	; (8004578 <HAL_RCC_MCOConfig+0xcc>)
 80044fa:	f7fd fc2b 	bl	8001d54 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 80044fe:	4b1d      	ldr	r3, [pc, #116]	; (8004574 <HAL_RCC_MCOConfig+0xc8>)
 8004500:	691b      	ldr	r3, [r3, #16]
 8004502:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 8004506:	68b9      	ldr	r1, [r7, #8]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	430b      	orrs	r3, r1
 800450c:	4919      	ldr	r1, [pc, #100]	; (8004574 <HAL_RCC_MCOConfig+0xc8>)
 800450e:	4313      	orrs	r3, r2
 8004510:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8004512:	e02a      	b.n	800456a <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8004514:	4b17      	ldr	r3, [pc, #92]	; (8004574 <HAL_RCC_MCOConfig+0xc8>)
 8004516:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800451a:	4a16      	ldr	r2, [pc, #88]	; (8004574 <HAL_RCC_MCOConfig+0xc8>)
 800451c:	f043 0304 	orr.w	r3, r3, #4
 8004520:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8004524:	4b13      	ldr	r3, [pc, #76]	; (8004574 <HAL_RCC_MCOConfig+0xc8>)
 8004526:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800452a:	f003 0304 	and.w	r3, r3, #4
 800452e:	617b      	str	r3, [r7, #20]
 8004530:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8004532:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004536:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004538:	2302      	movs	r3, #2
 800453a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800453c:	2303      	movs	r3, #3
 800453e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004540:	2300      	movs	r3, #0
 8004542:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8004544:	2300      	movs	r3, #0
 8004546:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8004548:	f107 031c 	add.w	r3, r7, #28
 800454c:	4619      	mov	r1, r3
 800454e:	480b      	ldr	r0, [pc, #44]	; (800457c <HAL_RCC_MCOConfig+0xd0>)
 8004550:	f7fd fc00 	bl	8001d54 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8004554:	4b07      	ldr	r3, [pc, #28]	; (8004574 <HAL_RCC_MCOConfig+0xc8>)
 8004556:	691b      	ldr	r3, [r3, #16]
 8004558:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	01d9      	lsls	r1, r3, #7
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	430b      	orrs	r3, r1
 8004564:	4903      	ldr	r1, [pc, #12]	; (8004574 <HAL_RCC_MCOConfig+0xc8>)
 8004566:	4313      	orrs	r3, r2
 8004568:	610b      	str	r3, [r1, #16]
}
 800456a:	bf00      	nop
 800456c:	3730      	adds	r7, #48	; 0x30
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
 8004572:	bf00      	nop
 8004574:	58024400 	.word	0x58024400
 8004578:	58020000 	.word	0x58020000
 800457c:	58020800 	.word	0x58020800

08004580 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004580:	b480      	push	{r7}
 8004582:	b089      	sub	sp, #36	; 0x24
 8004584:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004586:	4bb3      	ldr	r3, [pc, #716]	; (8004854 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004588:	691b      	ldr	r3, [r3, #16]
 800458a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800458e:	2b18      	cmp	r3, #24
 8004590:	f200 8155 	bhi.w	800483e <HAL_RCC_GetSysClockFreq+0x2be>
 8004594:	a201      	add	r2, pc, #4	; (adr r2, 800459c <HAL_RCC_GetSysClockFreq+0x1c>)
 8004596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800459a:	bf00      	nop
 800459c:	08004601 	.word	0x08004601
 80045a0:	0800483f 	.word	0x0800483f
 80045a4:	0800483f 	.word	0x0800483f
 80045a8:	0800483f 	.word	0x0800483f
 80045ac:	0800483f 	.word	0x0800483f
 80045b0:	0800483f 	.word	0x0800483f
 80045b4:	0800483f 	.word	0x0800483f
 80045b8:	0800483f 	.word	0x0800483f
 80045bc:	08004627 	.word	0x08004627
 80045c0:	0800483f 	.word	0x0800483f
 80045c4:	0800483f 	.word	0x0800483f
 80045c8:	0800483f 	.word	0x0800483f
 80045cc:	0800483f 	.word	0x0800483f
 80045d0:	0800483f 	.word	0x0800483f
 80045d4:	0800483f 	.word	0x0800483f
 80045d8:	0800483f 	.word	0x0800483f
 80045dc:	0800462d 	.word	0x0800462d
 80045e0:	0800483f 	.word	0x0800483f
 80045e4:	0800483f 	.word	0x0800483f
 80045e8:	0800483f 	.word	0x0800483f
 80045ec:	0800483f 	.word	0x0800483f
 80045f0:	0800483f 	.word	0x0800483f
 80045f4:	0800483f 	.word	0x0800483f
 80045f8:	0800483f 	.word	0x0800483f
 80045fc:	08004633 	.word	0x08004633
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004600:	4b94      	ldr	r3, [pc, #592]	; (8004854 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 0320 	and.w	r3, r3, #32
 8004608:	2b00      	cmp	r3, #0
 800460a:	d009      	beq.n	8004620 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800460c:	4b91      	ldr	r3, [pc, #580]	; (8004854 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	08db      	lsrs	r3, r3, #3
 8004612:	f003 0303 	and.w	r3, r3, #3
 8004616:	4a90      	ldr	r2, [pc, #576]	; (8004858 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004618:	fa22 f303 	lsr.w	r3, r2, r3
 800461c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800461e:	e111      	b.n	8004844 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004620:	4b8d      	ldr	r3, [pc, #564]	; (8004858 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004622:	61bb      	str	r3, [r7, #24]
    break;
 8004624:	e10e      	b.n	8004844 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004626:	4b8d      	ldr	r3, [pc, #564]	; (800485c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004628:	61bb      	str	r3, [r7, #24]
    break;
 800462a:	e10b      	b.n	8004844 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800462c:	4b8c      	ldr	r3, [pc, #560]	; (8004860 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800462e:	61bb      	str	r3, [r7, #24]
    break;
 8004630:	e108      	b.n	8004844 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004632:	4b88      	ldr	r3, [pc, #544]	; (8004854 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004636:	f003 0303 	and.w	r3, r3, #3
 800463a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800463c:	4b85      	ldr	r3, [pc, #532]	; (8004854 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800463e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004640:	091b      	lsrs	r3, r3, #4
 8004642:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004646:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004648:	4b82      	ldr	r3, [pc, #520]	; (8004854 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800464a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800464c:	f003 0301 	and.w	r3, r3, #1
 8004650:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004652:	4b80      	ldr	r3, [pc, #512]	; (8004854 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004654:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004656:	08db      	lsrs	r3, r3, #3
 8004658:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800465c:	68fa      	ldr	r2, [r7, #12]
 800465e:	fb02 f303 	mul.w	r3, r2, r3
 8004662:	ee07 3a90 	vmov	s15, r3
 8004666:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800466a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	2b00      	cmp	r3, #0
 8004672:	f000 80e1 	beq.w	8004838 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	2b02      	cmp	r3, #2
 800467a:	f000 8083 	beq.w	8004784 <HAL_RCC_GetSysClockFreq+0x204>
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	2b02      	cmp	r3, #2
 8004682:	f200 80a1 	bhi.w	80047c8 <HAL_RCC_GetSysClockFreq+0x248>
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d003      	beq.n	8004694 <HAL_RCC_GetSysClockFreq+0x114>
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	2b01      	cmp	r3, #1
 8004690:	d056      	beq.n	8004740 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004692:	e099      	b.n	80047c8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004694:	4b6f      	ldr	r3, [pc, #444]	; (8004854 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 0320 	and.w	r3, r3, #32
 800469c:	2b00      	cmp	r3, #0
 800469e:	d02d      	beq.n	80046fc <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80046a0:	4b6c      	ldr	r3, [pc, #432]	; (8004854 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	08db      	lsrs	r3, r3, #3
 80046a6:	f003 0303 	and.w	r3, r3, #3
 80046aa:	4a6b      	ldr	r2, [pc, #428]	; (8004858 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80046ac:	fa22 f303 	lsr.w	r3, r2, r3
 80046b0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	ee07 3a90 	vmov	s15, r3
 80046b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	ee07 3a90 	vmov	s15, r3
 80046c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046ca:	4b62      	ldr	r3, [pc, #392]	; (8004854 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046d2:	ee07 3a90 	vmov	s15, r3
 80046d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046da:	ed97 6a02 	vldr	s12, [r7, #8]
 80046de:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004864 <HAL_RCC_GetSysClockFreq+0x2e4>
 80046e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046f6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80046fa:	e087      	b.n	800480c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	ee07 3a90 	vmov	s15, r3
 8004702:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004706:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004868 <HAL_RCC_GetSysClockFreq+0x2e8>
 800470a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800470e:	4b51      	ldr	r3, [pc, #324]	; (8004854 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004712:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004716:	ee07 3a90 	vmov	s15, r3
 800471a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800471e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004722:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004864 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004726:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800472a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800472e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004732:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004736:	ee67 7a27 	vmul.f32	s15, s14, s15
 800473a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800473e:	e065      	b.n	800480c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	ee07 3a90 	vmov	s15, r3
 8004746:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800474a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800486c <HAL_RCC_GetSysClockFreq+0x2ec>
 800474e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004752:	4b40      	ldr	r3, [pc, #256]	; (8004854 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004756:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800475a:	ee07 3a90 	vmov	s15, r3
 800475e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004762:	ed97 6a02 	vldr	s12, [r7, #8]
 8004766:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004864 <HAL_RCC_GetSysClockFreq+0x2e4>
 800476a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800476e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004772:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004776:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800477a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800477e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004782:	e043      	b.n	800480c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	ee07 3a90 	vmov	s15, r3
 800478a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800478e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004870 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004792:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004796:	4b2f      	ldr	r3, [pc, #188]	; (8004854 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800479a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800479e:	ee07 3a90 	vmov	s15, r3
 80047a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80047aa:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004864 <HAL_RCC_GetSysClockFreq+0x2e4>
 80047ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80047c6:	e021      	b.n	800480c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	ee07 3a90 	vmov	s15, r3
 80047ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047d2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800486c <HAL_RCC_GetSysClockFreq+0x2ec>
 80047d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047da:	4b1e      	ldr	r3, [pc, #120]	; (8004854 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047e2:	ee07 3a90 	vmov	s15, r3
 80047e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80047ee:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004864 <HAL_RCC_GetSysClockFreq+0x2e4>
 80047f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004802:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004806:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800480a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800480c:	4b11      	ldr	r3, [pc, #68]	; (8004854 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800480e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004810:	0a5b      	lsrs	r3, r3, #9
 8004812:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004816:	3301      	adds	r3, #1
 8004818:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	ee07 3a90 	vmov	s15, r3
 8004820:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004824:	edd7 6a07 	vldr	s13, [r7, #28]
 8004828:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800482c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004830:	ee17 3a90 	vmov	r3, s15
 8004834:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004836:	e005      	b.n	8004844 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8004838:	2300      	movs	r3, #0
 800483a:	61bb      	str	r3, [r7, #24]
    break;
 800483c:	e002      	b.n	8004844 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800483e:	4b07      	ldr	r3, [pc, #28]	; (800485c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004840:	61bb      	str	r3, [r7, #24]
    break;
 8004842:	bf00      	nop
  }

  return sysclockfreq;
 8004844:	69bb      	ldr	r3, [r7, #24]
}
 8004846:	4618      	mov	r0, r3
 8004848:	3724      	adds	r7, #36	; 0x24
 800484a:	46bd      	mov	sp, r7
 800484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004850:	4770      	bx	lr
 8004852:	bf00      	nop
 8004854:	58024400 	.word	0x58024400
 8004858:	03d09000 	.word	0x03d09000
 800485c:	003d0900 	.word	0x003d0900
 8004860:	016e3600 	.word	0x016e3600
 8004864:	46000000 	.word	0x46000000
 8004868:	4c742400 	.word	0x4c742400
 800486c:	4a742400 	.word	0x4a742400
 8004870:	4bb71b00 	.word	0x4bb71b00

08004874 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b082      	sub	sp, #8
 8004878:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800487a:	f7ff fe81 	bl	8004580 <HAL_RCC_GetSysClockFreq>
 800487e:	4602      	mov	r2, r0
 8004880:	4b10      	ldr	r3, [pc, #64]	; (80048c4 <HAL_RCC_GetHCLKFreq+0x50>)
 8004882:	699b      	ldr	r3, [r3, #24]
 8004884:	0a1b      	lsrs	r3, r3, #8
 8004886:	f003 030f 	and.w	r3, r3, #15
 800488a:	490f      	ldr	r1, [pc, #60]	; (80048c8 <HAL_RCC_GetHCLKFreq+0x54>)
 800488c:	5ccb      	ldrb	r3, [r1, r3]
 800488e:	f003 031f 	and.w	r3, r3, #31
 8004892:	fa22 f303 	lsr.w	r3, r2, r3
 8004896:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8004898:	4b0a      	ldr	r3, [pc, #40]	; (80048c4 <HAL_RCC_GetHCLKFreq+0x50>)
 800489a:	699b      	ldr	r3, [r3, #24]
 800489c:	f003 030f 	and.w	r3, r3, #15
 80048a0:	4a09      	ldr	r2, [pc, #36]	; (80048c8 <HAL_RCC_GetHCLKFreq+0x54>)
 80048a2:	5cd3      	ldrb	r3, [r2, r3]
 80048a4:	f003 031f 	and.w	r3, r3, #31
 80048a8:	687a      	ldr	r2, [r7, #4]
 80048aa:	fa22 f303 	lsr.w	r3, r2, r3
 80048ae:	4a07      	ldr	r2, [pc, #28]	; (80048cc <HAL_RCC_GetHCLKFreq+0x58>)
 80048b0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80048b2:	4a07      	ldr	r2, [pc, #28]	; (80048d0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80048b8:	4b04      	ldr	r3, [pc, #16]	; (80048cc <HAL_RCC_GetHCLKFreq+0x58>)
 80048ba:	681b      	ldr	r3, [r3, #0]
}
 80048bc:	4618      	mov	r0, r3
 80048be:	3708      	adds	r7, #8
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}
 80048c4:	58024400 	.word	0x58024400
 80048c8:	08008454 	.word	0x08008454
 80048cc:	24000004 	.word	0x24000004
 80048d0:	24000000 	.word	0x24000000

080048d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 80048d8:	f7ff ffcc 	bl	8004874 <HAL_RCC_GetHCLKFreq>
 80048dc:	4602      	mov	r2, r0
 80048de:	4b06      	ldr	r3, [pc, #24]	; (80048f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80048e0:	69db      	ldr	r3, [r3, #28]
 80048e2:	091b      	lsrs	r3, r3, #4
 80048e4:	f003 0307 	and.w	r3, r3, #7
 80048e8:	4904      	ldr	r1, [pc, #16]	; (80048fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80048ea:	5ccb      	ldrb	r3, [r1, r3]
 80048ec:	f003 031f 	and.w	r3, r3, #31
 80048f0:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	bd80      	pop	{r7, pc}
 80048f8:	58024400 	.word	0x58024400
 80048fc:	08008454 	.word	0x08008454

08004900 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8004904:	f7ff ffb6 	bl	8004874 <HAL_RCC_GetHCLKFreq>
 8004908:	4602      	mov	r2, r0
 800490a:	4b06      	ldr	r3, [pc, #24]	; (8004924 <HAL_RCC_GetPCLK2Freq+0x24>)
 800490c:	69db      	ldr	r3, [r3, #28]
 800490e:	0a1b      	lsrs	r3, r3, #8
 8004910:	f003 0307 	and.w	r3, r3, #7
 8004914:	4904      	ldr	r1, [pc, #16]	; (8004928 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004916:	5ccb      	ldrb	r3, [r1, r3]
 8004918:	f003 031f 	and.w	r3, r3, #31
 800491c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8004920:	4618      	mov	r0, r3
 8004922:	bd80      	pop	{r7, pc}
 8004924:	58024400 	.word	0x58024400
 8004928:	08008454 	.word	0x08008454

0800492c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b086      	sub	sp, #24
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004934:	2300      	movs	r3, #0
 8004936:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004938:	2300      	movs	r3, #0
 800493a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004944:	2b00      	cmp	r3, #0
 8004946:	d03f      	beq.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800494c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004950:	d02a      	beq.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004952:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004956:	d824      	bhi.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004958:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800495c:	d018      	beq.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800495e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004962:	d81e      	bhi.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004964:	2b00      	cmp	r3, #0
 8004966:	d003      	beq.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004968:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800496c:	d007      	beq.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x52>
 800496e:	e018      	b.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004970:	4b9f      	ldr	r3, [pc, #636]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004974:	4a9e      	ldr	r2, [pc, #632]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004976:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800497a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800497c:	e015      	b.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	3304      	adds	r3, #4
 8004982:	2102      	movs	r1, #2
 8004984:	4618      	mov	r0, r3
 8004986:	f001 ff1b 	bl	80067c0 <RCCEx_PLL2_Config>
 800498a:	4603      	mov	r3, r0
 800498c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800498e:	e00c      	b.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	3324      	adds	r3, #36	; 0x24
 8004994:	2102      	movs	r1, #2
 8004996:	4618      	mov	r0, r3
 8004998:	f001 ffc4 	bl	8006924 <RCCEx_PLL3_Config>
 800499c:	4603      	mov	r3, r0
 800499e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80049a0:	e003      	b.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	75fb      	strb	r3, [r7, #23]
      break;
 80049a6:	e000      	b.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80049a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049aa:	7dfb      	ldrb	r3, [r7, #23]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d109      	bne.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80049b0:	4b8f      	ldr	r3, [pc, #572]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80049b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80049bc:	498c      	ldr	r1, [pc, #560]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80049be:	4313      	orrs	r3, r2
 80049c0:	650b      	str	r3, [r1, #80]	; 0x50
 80049c2:	e001      	b.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049c4:	7dfb      	ldrb	r3, [r7, #23]
 80049c6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d03d      	beq.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049d8:	2b04      	cmp	r3, #4
 80049da:	d826      	bhi.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80049dc:	a201      	add	r2, pc, #4	; (adr r2, 80049e4 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80049de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049e2:	bf00      	nop
 80049e4:	080049f9 	.word	0x080049f9
 80049e8:	08004a07 	.word	0x08004a07
 80049ec:	08004a19 	.word	0x08004a19
 80049f0:	08004a31 	.word	0x08004a31
 80049f4:	08004a31 	.word	0x08004a31
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049f8:	4b7d      	ldr	r3, [pc, #500]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80049fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049fc:	4a7c      	ldr	r2, [pc, #496]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80049fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a02:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004a04:	e015      	b.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	3304      	adds	r3, #4
 8004a0a:	2100      	movs	r1, #0
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f001 fed7 	bl	80067c0 <RCCEx_PLL2_Config>
 8004a12:	4603      	mov	r3, r0
 8004a14:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004a16:	e00c      	b.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	3324      	adds	r3, #36	; 0x24
 8004a1c:	2100      	movs	r1, #0
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f001 ff80 	bl	8006924 <RCCEx_PLL3_Config>
 8004a24:	4603      	mov	r3, r0
 8004a26:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004a28:	e003      	b.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	75fb      	strb	r3, [r7, #23]
      break;
 8004a2e:	e000      	b.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004a30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a32:	7dfb      	ldrb	r3, [r7, #23]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d109      	bne.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a38:	4b6d      	ldr	r3, [pc, #436]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004a3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a3c:	f023 0207 	bic.w	r2, r3, #7
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a44:	496a      	ldr	r1, [pc, #424]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004a46:	4313      	orrs	r3, r2
 8004a48:	650b      	str	r3, [r1, #80]	; 0x50
 8004a4a:	e001      	b.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a4c:	7dfb      	ldrb	r3, [r7, #23]
 8004a4e:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d04a      	beq.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a60:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8004a64:	d031      	beq.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x19e>
 8004a66:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8004a6a:	d82b      	bhi.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8004a6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a70:	d02d      	beq.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8004a72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a76:	d825      	bhi.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8004a78:	2bc0      	cmp	r3, #192	; 0xc0
 8004a7a:	d02a      	beq.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004a7c:	2bc0      	cmp	r3, #192	; 0xc0
 8004a7e:	d821      	bhi.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8004a80:	2b80      	cmp	r3, #128	; 0x80
 8004a82:	d016      	beq.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8004a84:	2b80      	cmp	r3, #128	; 0x80
 8004a86:	d81d      	bhi.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d002      	beq.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004a8c:	2b40      	cmp	r3, #64	; 0x40
 8004a8e:	d007      	beq.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8004a90:	e018      	b.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a92:	4b57      	ldr	r3, [pc, #348]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a96:	4a56      	ldr	r2, [pc, #344]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004a98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a9c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8004a9e:	e019      	b.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	3304      	adds	r3, #4
 8004aa4:	2100      	movs	r1, #0
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f001 fe8a 	bl	80067c0 <RCCEx_PLL2_Config>
 8004aac:	4603      	mov	r3, r0
 8004aae:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8004ab0:	e010      	b.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	3324      	adds	r3, #36	; 0x24
 8004ab6:	2100      	movs	r1, #0
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f001 ff33 	bl	8006924 <RCCEx_PLL3_Config>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8004ac2:	e007      	b.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	75fb      	strb	r3, [r7, #23]
      break;
 8004ac8:	e004      	b.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8004aca:	bf00      	nop
 8004acc:	e002      	b.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8004ace:	bf00      	nop
 8004ad0:	e000      	b.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8004ad2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ad4:	7dfb      	ldrb	r3, [r7, #23]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d109      	bne.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8004ada:	4b45      	ldr	r3, [pc, #276]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004adc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ade:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ae6:	4942      	ldr	r1, [pc, #264]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	650b      	str	r3, [r1, #80]	; 0x50
 8004aec:	e001      	b.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004aee:	7dfb      	ldrb	r3, [r7, #23]
 8004af0:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d04f      	beq.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b02:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8004b06:	d036      	beq.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8004b08:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8004b0c:	d830      	bhi.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8004b0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b12:	d032      	beq.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x24e>
 8004b14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b18:	d82a      	bhi.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8004b1a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004b1e:	d02e      	beq.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x252>
 8004b20:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004b24:	d824      	bhi.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8004b26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b2a:	d018      	beq.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x232>
 8004b2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b30:	d81e      	bhi.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d003      	beq.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x212>
 8004b36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b3a:	d007      	beq.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x220>
 8004b3c:	e018      	b.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b3e:	4b2c      	ldr	r3, [pc, #176]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b42:	4a2b      	ldr	r2, [pc, #172]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004b44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b48:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8004b4a:	e019      	b.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	3304      	adds	r3, #4
 8004b50:	2100      	movs	r1, #0
 8004b52:	4618      	mov	r0, r3
 8004b54:	f001 fe34 	bl	80067c0 <RCCEx_PLL2_Config>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8004b5c:	e010      	b.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	3324      	adds	r3, #36	; 0x24
 8004b62:	2100      	movs	r1, #0
 8004b64:	4618      	mov	r0, r3
 8004b66:	f001 fedd 	bl	8006924 <RCCEx_PLL3_Config>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8004b6e:	e007      	b.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	75fb      	strb	r3, [r7, #23]
      break;
 8004b74:	e004      	b.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8004b76:	bf00      	nop
 8004b78:	e002      	b.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8004b7a:	bf00      	nop
 8004b7c:	e000      	b.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8004b7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b80:	7dfb      	ldrb	r3, [r7, #23]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d109      	bne.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8004b86:	4b1a      	ldr	r3, [pc, #104]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004b88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b8a:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b92:	4917      	ldr	r1, [pc, #92]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004b94:	4313      	orrs	r3, r2
 8004b96:	650b      	str	r3, [r1, #80]	; 0x50
 8004b98:	e001      	b.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b9a:	7dfb      	ldrb	r3, [r7, #23]
 8004b9c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d034      	beq.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bae:	2b30      	cmp	r3, #48	; 0x30
 8004bb0:	d01c      	beq.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8004bb2:	2b30      	cmp	r3, #48	; 0x30
 8004bb4:	d817      	bhi.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8004bb6:	2b20      	cmp	r3, #32
 8004bb8:	d00c      	beq.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004bba:	2b20      	cmp	r3, #32
 8004bbc:	d813      	bhi.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d018      	beq.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 8004bc2:	2b10      	cmp	r3, #16
 8004bc4:	d10f      	bne.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bc6:	4b0a      	ldr	r3, [pc, #40]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bca:	4a09      	ldr	r2, [pc, #36]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004bcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bd0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8004bd2:	e010      	b.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	3304      	adds	r3, #4
 8004bd8:	2102      	movs	r1, #2
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f001 fdf0 	bl	80067c0 <RCCEx_PLL2_Config>
 8004be0:	4603      	mov	r3, r0
 8004be2:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8004be4:	e007      	b.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	75fb      	strb	r3, [r7, #23]
      break;
 8004bea:	e004      	b.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
      break;
 8004bec:	bf00      	nop
 8004bee:	e002      	b.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004bf0:	58024400 	.word	0x58024400
      break;
 8004bf4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004bf6:	7dfb      	ldrb	r3, [r7, #23]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d109      	bne.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004bfc:	4b9b      	ldr	r3, [pc, #620]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004bfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c00:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c08:	4998      	ldr	r1, [pc, #608]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004c0e:	e001      	b.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c10:	7dfb      	ldrb	r3, [r7, #23]
 8004c12:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d047      	beq.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c28:	d030      	beq.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004c2a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c2e:	d82a      	bhi.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8004c30:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004c34:	d02c      	beq.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x364>
 8004c36:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004c3a:	d824      	bhi.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8004c3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c40:	d018      	beq.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8004c42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c46:	d81e      	bhi.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d003      	beq.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x328>
 8004c4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c50:	d007      	beq.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8004c52:	e018      	b.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c54:	4b85      	ldr	r3, [pc, #532]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c58:	4a84      	ldr	r2, [pc, #528]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004c5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c5e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004c60:	e017      	b.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	3304      	adds	r3, #4
 8004c66:	2100      	movs	r1, #0
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f001 fda9 	bl	80067c0 <RCCEx_PLL2_Config>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004c72:	e00e      	b.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	3324      	adds	r3, #36	; 0x24
 8004c78:	2100      	movs	r1, #0
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f001 fe52 	bl	8006924 <RCCEx_PLL3_Config>
 8004c80:	4603      	mov	r3, r0
 8004c82:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004c84:	e005      	b.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	75fb      	strb	r3, [r7, #23]
      break;
 8004c8a:	e002      	b.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8004c8c:	bf00      	nop
 8004c8e:	e000      	b.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8004c90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c92:	7dfb      	ldrb	r3, [r7, #23]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d109      	bne.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004c98:	4b74      	ldr	r3, [pc, #464]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004c9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c9c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ca4:	4971      	ldr	r1, [pc, #452]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	650b      	str	r3, [r1, #80]	; 0x50
 8004caa:	e001      	b.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cac:	7dfb      	ldrb	r3, [r7, #23]
 8004cae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d049      	beq.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004cc0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004cc4:	d02e      	beq.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8004cc6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004cca:	d828      	bhi.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8004ccc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004cd0:	d02a      	beq.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8004cd2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004cd6:	d822      	bhi.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8004cd8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004cdc:	d026      	beq.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x400>
 8004cde:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004ce2:	d81c      	bhi.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8004ce4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ce8:	d010      	beq.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004cea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004cee:	d816      	bhi.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d01d      	beq.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8004cf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cf8:	d111      	bne.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	3304      	adds	r3, #4
 8004cfe:	2101      	movs	r1, #1
 8004d00:	4618      	mov	r0, r3
 8004d02:	f001 fd5d 	bl	80067c0 <RCCEx_PLL2_Config>
 8004d06:	4603      	mov	r3, r0
 8004d08:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004d0a:	e012      	b.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	3324      	adds	r3, #36	; 0x24
 8004d10:	2101      	movs	r1, #1
 8004d12:	4618      	mov	r0, r3
 8004d14:	f001 fe06 	bl	8006924 <RCCEx_PLL3_Config>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004d1c:	e009      	b.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	75fb      	strb	r3, [r7, #23]
      break;
 8004d22:	e006      	b.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8004d24:	bf00      	nop
 8004d26:	e004      	b.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8004d28:	bf00      	nop
 8004d2a:	e002      	b.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8004d2c:	bf00      	nop
 8004d2e:	e000      	b.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8004d30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d32:	7dfb      	ldrb	r3, [r7, #23]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d109      	bne.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004d38:	4b4c      	ldr	r3, [pc, #304]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004d3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d3c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d44:	4949      	ldr	r1, [pc, #292]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004d46:	4313      	orrs	r3, r2
 8004d48:	650b      	str	r3, [r1, #80]	; 0x50
 8004d4a:	e001      	b.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d4c:	7dfb      	ldrb	r3, [r7, #23]
 8004d4e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d053      	beq.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004d62:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8004d66:	d034      	beq.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8004d68:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8004d6c:	d82e      	bhi.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8004d6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004d72:	d030      	beq.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8004d74:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004d78:	d828      	bhi.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8004d7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d7e:	d02c      	beq.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8004d80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d84:	d822      	bhi.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8004d86:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004d8a:	d028      	beq.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8004d8c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004d90:	d81c      	bhi.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8004d92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d96:	d010      	beq.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x48e>
 8004d98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d9c:	d816      	bhi.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d01f      	beq.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8004da2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004da6:	d111      	bne.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	3304      	adds	r3, #4
 8004dac:	2101      	movs	r1, #1
 8004dae:	4618      	mov	r0, r3
 8004db0:	f001 fd06 	bl	80067c0 <RCCEx_PLL2_Config>
 8004db4:	4603      	mov	r3, r0
 8004db6:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004db8:	e014      	b.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	3324      	adds	r3, #36	; 0x24
 8004dbe:	2101      	movs	r1, #1
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f001 fdaf 	bl	8006924 <RCCEx_PLL3_Config>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004dca:	e00b      	b.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	75fb      	strb	r3, [r7, #23]
      break;
 8004dd0:	e008      	b.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8004dd2:	bf00      	nop
 8004dd4:	e006      	b.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8004dd6:	bf00      	nop
 8004dd8:	e004      	b.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8004dda:	bf00      	nop
 8004ddc:	e002      	b.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8004dde:	bf00      	nop
 8004de0:	e000      	b.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8004de2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004de4:	7dfb      	ldrb	r3, [r7, #23]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d10a      	bne.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004dea:	4b20      	ldr	r3, [pc, #128]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004dec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dee:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004df8:	491c      	ldr	r1, [pc, #112]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	658b      	str	r3, [r1, #88]	; 0x58
 8004dfe:	e001      	b.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e00:	7dfb      	ldrb	r3, [r7, #23]
 8004e02:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d031      	beq.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e18:	d00e      	beq.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8004e1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e1e:	d814      	bhi.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d015      	beq.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004e24:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e28:	d10f      	bne.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e2a:	4b10      	ldr	r3, [pc, #64]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e2e:	4a0f      	ldr	r2, [pc, #60]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004e30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e34:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004e36:	e00c      	b.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	3304      	adds	r3, #4
 8004e3c:	2101      	movs	r1, #1
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f001 fcbe 	bl	80067c0 <RCCEx_PLL2_Config>
 8004e44:	4603      	mov	r3, r0
 8004e46:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004e48:	e003      	b.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	75fb      	strb	r3, [r7, #23]
      break;
 8004e4e:	e000      	b.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 8004e50:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e52:	7dfb      	ldrb	r3, [r7, #23]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d10b      	bne.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004e58:	4b04      	ldr	r3, [pc, #16]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004e5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e5c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e64:	4901      	ldr	r1, [pc, #4]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004e66:	4313      	orrs	r3, r2
 8004e68:	650b      	str	r3, [r1, #80]	; 0x50
 8004e6a:	e003      	b.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x548>
 8004e6c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e70:	7dfb      	ldrb	r3, [r7, #23]
 8004e72:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d032      	beq.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e84:	2b03      	cmp	r3, #3
 8004e86:	d81b      	bhi.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8004e88:	a201      	add	r2, pc, #4	; (adr r2, 8004e90 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8004e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e8e:	bf00      	nop
 8004e90:	08004ec7 	.word	0x08004ec7
 8004e94:	08004ea1 	.word	0x08004ea1
 8004e98:	08004eaf 	.word	0x08004eaf
 8004e9c:	08004ec7 	.word	0x08004ec7
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ea0:	4bb2      	ldr	r3, [pc, #712]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ea4:	4ab1      	ldr	r2, [pc, #708]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004ea6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004eaa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004eac:	e00c      	b.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	3304      	adds	r3, #4
 8004eb2:	2102      	movs	r1, #2
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f001 fc83 	bl	80067c0 <RCCEx_PLL2_Config>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004ebe:	e003      	b.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	75fb      	strb	r3, [r7, #23]
      break;
 8004ec4:	e000      	b.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8004ec6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ec8:	7dfb      	ldrb	r3, [r7, #23]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d109      	bne.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004ece:	4ba7      	ldr	r3, [pc, #668]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ed2:	f023 0203 	bic.w	r2, r3, #3
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eda:	49a4      	ldr	r1, [pc, #656]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004edc:	4313      	orrs	r3, r2
 8004ede:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004ee0:	e001      	b.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ee2:	7dfb      	ldrb	r3, [r7, #23]
 8004ee4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	f000 8086 	beq.w	8005000 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ef4:	4b9e      	ldr	r3, [pc, #632]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a9d      	ldr	r2, [pc, #628]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8004efa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004efe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004f00:	f7fc fe14 	bl	8001b2c <HAL_GetTick>
 8004f04:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f06:	e009      	b.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f08:	f7fc fe10 	bl	8001b2c <HAL_GetTick>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	1ad3      	subs	r3, r2, r3
 8004f12:	2b64      	cmp	r3, #100	; 0x64
 8004f14:	d902      	bls.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      {
        ret = HAL_TIMEOUT;
 8004f16:	2303      	movs	r3, #3
 8004f18:	75fb      	strb	r3, [r7, #23]
        break;
 8004f1a:	e005      	b.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f1c:	4b94      	ldr	r3, [pc, #592]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d0ef      	beq.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 8004f28:	7dfb      	ldrb	r3, [r7, #23]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d166      	bne.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004f2e:	4b8f      	ldr	r3, [pc, #572]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004f30:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004f38:	4053      	eors	r3, r2
 8004f3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d013      	beq.n	8004f6a <HAL_RCCEx_PeriphCLKConfig+0x63e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004f42:	4b8a      	ldr	r3, [pc, #552]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f4a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004f4c:	4b87      	ldr	r3, [pc, #540]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004f4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f50:	4a86      	ldr	r2, [pc, #536]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004f52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f56:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004f58:	4b84      	ldr	r3, [pc, #528]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004f5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f5c:	4a83      	ldr	r2, [pc, #524]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004f5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f62:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004f64:	4a81      	ldr	r2, [pc, #516]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004f70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f74:	d115      	bne.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f76:	f7fc fdd9 	bl	8001b2c <HAL_GetTick>
 8004f7a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004f7c:	e00b      	b.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x66a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f7e:	f7fc fdd5 	bl	8001b2c <HAL_GetTick>
 8004f82:	4602      	mov	r2, r0
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	1ad3      	subs	r3, r2, r3
 8004f88:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d902      	bls.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x66a>
          {
            ret = HAL_TIMEOUT;
 8004f90:	2303      	movs	r3, #3
 8004f92:	75fb      	strb	r3, [r7, #23]
            break;
 8004f94:	e005      	b.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x676>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004f96:	4b75      	ldr	r3, [pc, #468]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f9a:	f003 0302 	and.w	r3, r3, #2
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d0ed      	beq.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0x652>
          }
        }
      }

      if(ret == HAL_OK)
 8004fa2:	7dfb      	ldrb	r3, [r7, #23]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d126      	bne.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x6ca>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004fae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fb2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004fb6:	d10d      	bne.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x6a8>
 8004fb8:	4b6c      	ldr	r3, [pc, #432]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004fba:	691b      	ldr	r3, [r3, #16]
 8004fbc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004fc6:	0919      	lsrs	r1, r3, #4
 8004fc8:	4b6a      	ldr	r3, [pc, #424]	; (8005174 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004fca:	400b      	ands	r3, r1
 8004fcc:	4967      	ldr	r1, [pc, #412]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	610b      	str	r3, [r1, #16]
 8004fd2:	e005      	b.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x6b4>
 8004fd4:	4b65      	ldr	r3, [pc, #404]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004fd6:	691b      	ldr	r3, [r3, #16]
 8004fd8:	4a64      	ldr	r2, [pc, #400]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004fda:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004fde:	6113      	str	r3, [r2, #16]
 8004fe0:	4b62      	ldr	r3, [pc, #392]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004fe2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004fea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fee:	495f      	ldr	r1, [pc, #380]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	670b      	str	r3, [r1, #112]	; 0x70
 8004ff4:	e004      	b.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004ff6:	7dfb      	ldrb	r3, [r7, #23]
 8004ff8:	75bb      	strb	r3, [r7, #22]
 8004ffa:	e001      	b.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ffc:	7dfb      	ldrb	r3, [r7, #23]
 8004ffe:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f003 0301 	and.w	r3, r3, #1
 8005008:	2b00      	cmp	r3, #0
 800500a:	d07f      	beq.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x7e0>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005012:	2b28      	cmp	r3, #40	; 0x28
 8005014:	d866      	bhi.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
 8005016:	a201      	add	r2, pc, #4	; (adr r2, 800501c <HAL_RCCEx_PeriphCLKConfig+0x6f0>)
 8005018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800501c:	080050eb 	.word	0x080050eb
 8005020:	080050e5 	.word	0x080050e5
 8005024:	080050e5 	.word	0x080050e5
 8005028:	080050e5 	.word	0x080050e5
 800502c:	080050e5 	.word	0x080050e5
 8005030:	080050e5 	.word	0x080050e5
 8005034:	080050e5 	.word	0x080050e5
 8005038:	080050e5 	.word	0x080050e5
 800503c:	080050c1 	.word	0x080050c1
 8005040:	080050e5 	.word	0x080050e5
 8005044:	080050e5 	.word	0x080050e5
 8005048:	080050e5 	.word	0x080050e5
 800504c:	080050e5 	.word	0x080050e5
 8005050:	080050e5 	.word	0x080050e5
 8005054:	080050e5 	.word	0x080050e5
 8005058:	080050e5 	.word	0x080050e5
 800505c:	080050d3 	.word	0x080050d3
 8005060:	080050e5 	.word	0x080050e5
 8005064:	080050e5 	.word	0x080050e5
 8005068:	080050e5 	.word	0x080050e5
 800506c:	080050e5 	.word	0x080050e5
 8005070:	080050e5 	.word	0x080050e5
 8005074:	080050e5 	.word	0x080050e5
 8005078:	080050e5 	.word	0x080050e5
 800507c:	080050eb 	.word	0x080050eb
 8005080:	080050e5 	.word	0x080050e5
 8005084:	080050e5 	.word	0x080050e5
 8005088:	080050e5 	.word	0x080050e5
 800508c:	080050e5 	.word	0x080050e5
 8005090:	080050e5 	.word	0x080050e5
 8005094:	080050e5 	.word	0x080050e5
 8005098:	080050e5 	.word	0x080050e5
 800509c:	080050eb 	.word	0x080050eb
 80050a0:	080050e5 	.word	0x080050e5
 80050a4:	080050e5 	.word	0x080050e5
 80050a8:	080050e5 	.word	0x080050e5
 80050ac:	080050e5 	.word	0x080050e5
 80050b0:	080050e5 	.word	0x080050e5
 80050b4:	080050e5 	.word	0x080050e5
 80050b8:	080050e5 	.word	0x080050e5
 80050bc:	080050eb 	.word	0x080050eb
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	3304      	adds	r3, #4
 80050c4:	2101      	movs	r1, #1
 80050c6:	4618      	mov	r0, r3
 80050c8:	f001 fb7a 	bl	80067c0 <RCCEx_PLL2_Config>
 80050cc:	4603      	mov	r3, r0
 80050ce:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80050d0:	e00c      	b.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x7c0>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	3324      	adds	r3, #36	; 0x24
 80050d6:	2101      	movs	r1, #1
 80050d8:	4618      	mov	r0, r3
 80050da:	f001 fc23 	bl	8006924 <RCCEx_PLL3_Config>
 80050de:	4603      	mov	r3, r0
 80050e0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80050e2:	e003      	b.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80050e4:	2301      	movs	r3, #1
 80050e6:	75fb      	strb	r3, [r7, #23]
      break;
 80050e8:	e000      	b.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      break;
 80050ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050ec:	7dfb      	ldrb	r3, [r7, #23]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d10a      	bne.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x7dc>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80050f2:	4b1e      	ldr	r3, [pc, #120]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80050f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050f6:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005100:	491a      	ldr	r1, [pc, #104]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005102:	4313      	orrs	r3, r2
 8005104:	654b      	str	r3, [r1, #84]	; 0x54
 8005106:	e001      	b.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005108:	7dfb      	ldrb	r3, [r7, #23]
 800510a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f003 0302 	and.w	r3, r3, #2
 8005114:	2b00      	cmp	r3, #0
 8005116:	d03f      	beq.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800511c:	2b05      	cmp	r3, #5
 800511e:	d821      	bhi.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x838>
 8005120:	a201      	add	r2, pc, #4	; (adr r2, 8005128 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8005122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005126:	bf00      	nop
 8005128:	08005179 	.word	0x08005179
 800512c:	08005141 	.word	0x08005141
 8005130:	08005153 	.word	0x08005153
 8005134:	08005179 	.word	0x08005179
 8005138:	08005179 	.word	0x08005179
 800513c:	08005179 	.word	0x08005179
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	3304      	adds	r3, #4
 8005144:	2101      	movs	r1, #1
 8005146:	4618      	mov	r0, r3
 8005148:	f001 fb3a 	bl	80067c0 <RCCEx_PLL2_Config>
 800514c:	4603      	mov	r3, r0
 800514e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005150:	e013      	b.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	3324      	adds	r3, #36	; 0x24
 8005156:	2101      	movs	r1, #1
 8005158:	4618      	mov	r0, r3
 800515a:	f001 fbe3 	bl	8006924 <RCCEx_PLL3_Config>
 800515e:	4603      	mov	r3, r0
 8005160:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005162:	e00a      	b.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005164:	2301      	movs	r3, #1
 8005166:	75fb      	strb	r3, [r7, #23]
      break;
 8005168:	e007      	b.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x84e>
 800516a:	bf00      	nop
 800516c:	58024400 	.word	0x58024400
 8005170:	58024800 	.word	0x58024800
 8005174:	00ffffcf 	.word	0x00ffffcf
      break;
 8005178:	bf00      	nop
    }

    if(ret == HAL_OK)
 800517a:	7dfb      	ldrb	r3, [r7, #23]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d109      	bne.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005180:	4b9f      	ldr	r3, [pc, #636]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8005182:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005184:	f023 0207 	bic.w	r2, r3, #7
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800518c:	499c      	ldr	r1, [pc, #624]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800518e:	4313      	orrs	r3, r2
 8005190:	654b      	str	r3, [r1, #84]	; 0x54
 8005192:	e001      	b.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005194:	7dfb      	ldrb	r3, [r7, #23]
 8005196:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f003 0304 	and.w	r3, r3, #4
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d039      	beq.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80051aa:	2b05      	cmp	r3, #5
 80051ac:	d820      	bhi.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 80051ae:	a201      	add	r2, pc, #4	; (adr r2, 80051b4 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 80051b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051b4:	080051f7 	.word	0x080051f7
 80051b8:	080051cd 	.word	0x080051cd
 80051bc:	080051df 	.word	0x080051df
 80051c0:	080051f7 	.word	0x080051f7
 80051c4:	080051f7 	.word	0x080051f7
 80051c8:	080051f7 	.word	0x080051f7
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	3304      	adds	r3, #4
 80051d0:	2101      	movs	r1, #1
 80051d2:	4618      	mov	r0, r3
 80051d4:	f001 faf4 	bl	80067c0 <RCCEx_PLL2_Config>
 80051d8:	4603      	mov	r3, r0
 80051da:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80051dc:	e00c      	b.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	3324      	adds	r3, #36	; 0x24
 80051e2:	2101      	movs	r1, #1
 80051e4:	4618      	mov	r0, r3
 80051e6:	f001 fb9d 	bl	8006924 <RCCEx_PLL3_Config>
 80051ea:	4603      	mov	r3, r0
 80051ec:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80051ee:	e003      	b.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80051f0:	2301      	movs	r3, #1
 80051f2:	75fb      	strb	r3, [r7, #23]
      break;
 80051f4:	e000      	b.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 80051f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051f8:	7dfb      	ldrb	r3, [r7, #23]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d10a      	bne.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80051fe:	4b80      	ldr	r3, [pc, #512]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8005200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005202:	f023 0207 	bic.w	r2, r3, #7
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800520c:	497c      	ldr	r1, [pc, #496]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800520e:	4313      	orrs	r3, r2
 8005210:	658b      	str	r3, [r1, #88]	; 0x58
 8005212:	e001      	b.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005214:	7dfb      	ldrb	r3, [r7, #23]
 8005216:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f003 0320 	and.w	r3, r3, #32
 8005220:	2b00      	cmp	r3, #0
 8005222:	d04b      	beq.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800522a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800522e:	d02e      	beq.n	800528e <HAL_RCCEx_PeriphCLKConfig+0x962>
 8005230:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005234:	d828      	bhi.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8005236:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800523a:	d02a      	beq.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x966>
 800523c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005240:	d822      	bhi.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8005242:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005246:	d026      	beq.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8005248:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800524c:	d81c      	bhi.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800524e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005252:	d010      	beq.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0x94a>
 8005254:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005258:	d816      	bhi.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800525a:	2b00      	cmp	r3, #0
 800525c:	d01d      	beq.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800525e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005262:	d111      	bne.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	3304      	adds	r3, #4
 8005268:	2100      	movs	r1, #0
 800526a:	4618      	mov	r0, r3
 800526c:	f001 faa8 	bl	80067c0 <RCCEx_PLL2_Config>
 8005270:	4603      	mov	r3, r0
 8005272:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005274:	e012      	b.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	3324      	adds	r3, #36	; 0x24
 800527a:	2102      	movs	r1, #2
 800527c:	4618      	mov	r0, r3
 800527e:	f001 fb51 	bl	8006924 <RCCEx_PLL3_Config>
 8005282:	4603      	mov	r3, r0
 8005284:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005286:	e009      	b.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005288:	2301      	movs	r3, #1
 800528a:	75fb      	strb	r3, [r7, #23]
      break;
 800528c:	e006      	b.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800528e:	bf00      	nop
 8005290:	e004      	b.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8005292:	bf00      	nop
 8005294:	e002      	b.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8005296:	bf00      	nop
 8005298:	e000      	b.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800529a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800529c:	7dfb      	ldrb	r3, [r7, #23]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d10a      	bne.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80052a2:	4b57      	ldr	r3, [pc, #348]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80052a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052a6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052b0:	4953      	ldr	r1, [pc, #332]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80052b2:	4313      	orrs	r3, r2
 80052b4:	654b      	str	r3, [r1, #84]	; 0x54
 80052b6:	e001      	b.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052b8:	7dfb      	ldrb	r3, [r7, #23]
 80052ba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d04b      	beq.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80052ce:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80052d2:	d02e      	beq.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0xa06>
 80052d4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80052d8:	d828      	bhi.n	800532c <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80052da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052de:	d02a      	beq.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 80052e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052e4:	d822      	bhi.n	800532c <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80052e6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80052ea:	d026      	beq.n	800533a <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 80052ec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80052f0:	d81c      	bhi.n	800532c <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80052f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052f6:	d010      	beq.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 80052f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052fc:	d816      	bhi.n	800532c <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d01d      	beq.n	800533e <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8005302:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005306:	d111      	bne.n	800532c <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	3304      	adds	r3, #4
 800530c:	2100      	movs	r1, #0
 800530e:	4618      	mov	r0, r3
 8005310:	f001 fa56 	bl	80067c0 <RCCEx_PLL2_Config>
 8005314:	4603      	mov	r3, r0
 8005316:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005318:	e012      	b.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	3324      	adds	r3, #36	; 0x24
 800531e:	2102      	movs	r1, #2
 8005320:	4618      	mov	r0, r3
 8005322:	f001 faff 	bl	8006924 <RCCEx_PLL3_Config>
 8005326:	4603      	mov	r3, r0
 8005328:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800532a:	e009      	b.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800532c:	2301      	movs	r3, #1
 800532e:	75fb      	strb	r3, [r7, #23]
      break;
 8005330:	e006      	b.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8005332:	bf00      	nop
 8005334:	e004      	b.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8005336:	bf00      	nop
 8005338:	e002      	b.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800533a:	bf00      	nop
 800533c:	e000      	b.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800533e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005340:	7dfb      	ldrb	r3, [r7, #23]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d10a      	bne.n	800535c <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005346:	4b2e      	ldr	r3, [pc, #184]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8005348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800534a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005354:	492a      	ldr	r1, [pc, #168]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8005356:	4313      	orrs	r3, r2
 8005358:	658b      	str	r3, [r1, #88]	; 0x58
 800535a:	e001      	b.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800535c:	7dfb      	ldrb	r3, [r7, #23]
 800535e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005368:	2b00      	cmp	r3, #0
 800536a:	d04d      	beq.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005372:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005376:	d02e      	beq.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 8005378:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800537c:	d828      	bhi.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800537e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005382:	d02a      	beq.n	80053da <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8005384:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005388:	d822      	bhi.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800538a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800538e:	d026      	beq.n	80053de <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8005390:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005394:	d81c      	bhi.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8005396:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800539a:	d010      	beq.n	80053be <HAL_RCCEx_PeriphCLKConfig+0xa92>
 800539c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80053a0:	d816      	bhi.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d01d      	beq.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 80053a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053aa:	d111      	bne.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	3304      	adds	r3, #4
 80053b0:	2100      	movs	r1, #0
 80053b2:	4618      	mov	r0, r3
 80053b4:	f001 fa04 	bl	80067c0 <RCCEx_PLL2_Config>
 80053b8:	4603      	mov	r3, r0
 80053ba:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80053bc:	e012      	b.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	3324      	adds	r3, #36	; 0x24
 80053c2:	2102      	movs	r1, #2
 80053c4:	4618      	mov	r0, r3
 80053c6:	f001 faad 	bl	8006924 <RCCEx_PLL3_Config>
 80053ca:	4603      	mov	r3, r0
 80053cc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80053ce:	e009      	b.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80053d0:	2301      	movs	r3, #1
 80053d2:	75fb      	strb	r3, [r7, #23]
      break;
 80053d4:	e006      	b.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80053d6:	bf00      	nop
 80053d8:	e004      	b.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80053da:	bf00      	nop
 80053dc:	e002      	b.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80053de:	bf00      	nop
 80053e0:	e000      	b.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80053e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80053e4:	7dfb      	ldrb	r3, [r7, #23]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d10c      	bne.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80053ea:	4b05      	ldr	r3, [pc, #20]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80053ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80053f8:	4901      	ldr	r1, [pc, #4]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80053fa:	4313      	orrs	r3, r2
 80053fc:	658b      	str	r3, [r1, #88]	; 0x58
 80053fe:	e003      	b.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8005400:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005404:	7dfb      	ldrb	r3, [r7, #23]
 8005406:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f003 0308 	and.w	r3, r3, #8
 8005410:	2b00      	cmp	r3, #0
 8005412:	d01a      	beq.n	800544a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800541a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800541e:	d10a      	bne.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	3324      	adds	r3, #36	; 0x24
 8005424:	2102      	movs	r1, #2
 8005426:	4618      	mov	r0, r3
 8005428:	f001 fa7c 	bl	8006924 <RCCEx_PLL3_Config>
 800542c:	4603      	mov	r3, r0
 800542e:	2b00      	cmp	r3, #0
 8005430:	d001      	beq.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005436:	4b8c      	ldr	r3, [pc, #560]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800543a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005444:	4988      	ldr	r1, [pc, #544]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005446:	4313      	orrs	r3, r2
 8005448:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f003 0310 	and.w	r3, r3, #16
 8005452:	2b00      	cmp	r3, #0
 8005454:	d01a      	beq.n	800548c <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800545c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005460:	d10a      	bne.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	3324      	adds	r3, #36	; 0x24
 8005466:	2102      	movs	r1, #2
 8005468:	4618      	mov	r0, r3
 800546a:	f001 fa5b 	bl	8006924 <RCCEx_PLL3_Config>
 800546e:	4603      	mov	r3, r0
 8005470:	2b00      	cmp	r3, #0
 8005472:	d001      	beq.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 8005474:	2301      	movs	r3, #1
 8005476:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005478:	4b7b      	ldr	r3, [pc, #492]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800547a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800547c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005486:	4978      	ldr	r1, [pc, #480]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005488:	4313      	orrs	r3, r2
 800548a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005494:	2b00      	cmp	r3, #0
 8005496:	d034      	beq.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800549e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80054a2:	d01d      	beq.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 80054a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80054a8:	d817      	bhi.n	80054da <HAL_RCCEx_PeriphCLKConfig+0xbae>
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d003      	beq.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 80054ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054b2:	d009      	beq.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80054b4:	e011      	b.n	80054da <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	3304      	adds	r3, #4
 80054ba:	2100      	movs	r1, #0
 80054bc:	4618      	mov	r0, r3
 80054be:	f001 f97f 	bl	80067c0 <RCCEx_PLL2_Config>
 80054c2:	4603      	mov	r3, r0
 80054c4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80054c6:	e00c      	b.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	3324      	adds	r3, #36	; 0x24
 80054cc:	2102      	movs	r1, #2
 80054ce:	4618      	mov	r0, r3
 80054d0:	f001 fa28 	bl	8006924 <RCCEx_PLL3_Config>
 80054d4:	4603      	mov	r3, r0
 80054d6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80054d8:	e003      	b.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	75fb      	strb	r3, [r7, #23]
      break;
 80054de:	e000      	b.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 80054e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054e2:	7dfb      	ldrb	r3, [r7, #23]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d10a      	bne.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80054e8:	4b5f      	ldr	r3, [pc, #380]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80054ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80054f6:	495c      	ldr	r1, [pc, #368]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80054f8:	4313      	orrs	r3, r2
 80054fa:	658b      	str	r3, [r1, #88]	; 0x58
 80054fc:	e001      	b.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054fe:	7dfb      	ldrb	r3, [r7, #23]
 8005500:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800550a:	2b00      	cmp	r3, #0
 800550c:	d033      	beq.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005514:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005518:	d01c      	beq.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800551a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800551e:	d816      	bhi.n	800554e <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8005520:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005524:	d003      	beq.n	800552e <HAL_RCCEx_PeriphCLKConfig+0xc02>
 8005526:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800552a:	d007      	beq.n	800553c <HAL_RCCEx_PeriphCLKConfig+0xc10>
 800552c:	e00f      	b.n	800554e <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800552e:	4b4e      	ldr	r3, [pc, #312]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005532:	4a4d      	ldr	r2, [pc, #308]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005534:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005538:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800553a:	e00c      	b.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	3324      	adds	r3, #36	; 0x24
 8005540:	2101      	movs	r1, #1
 8005542:	4618      	mov	r0, r3
 8005544:	f001 f9ee 	bl	8006924 <RCCEx_PLL3_Config>
 8005548:	4603      	mov	r3, r0
 800554a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800554c:	e003      	b.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	75fb      	strb	r3, [r7, #23]
      break;
 8005552:	e000      	b.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8005554:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005556:	7dfb      	ldrb	r3, [r7, #23]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d10a      	bne.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800555c:	4b42      	ldr	r3, [pc, #264]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800555e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005560:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800556a:	493f      	ldr	r1, [pc, #252]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800556c:	4313      	orrs	r3, r2
 800556e:	654b      	str	r3, [r1, #84]	; 0x54
 8005570:	e001      	b.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005572:	7dfb      	ldrb	r3, [r7, #23]
 8005574:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800557e:	2b00      	cmp	r3, #0
 8005580:	d029      	beq.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0xcaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005586:	2b00      	cmp	r3, #0
 8005588:	d003      	beq.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0xc66>
 800558a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800558e:	d007      	beq.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8005590:	e00f      	b.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0xc86>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005592:	4b35      	ldr	r3, [pc, #212]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005596:	4a34      	ldr	r2, [pc, #208]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005598:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800559c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800559e:	e00b      	b.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	3304      	adds	r3, #4
 80055a4:	2102      	movs	r1, #2
 80055a6:	4618      	mov	r0, r3
 80055a8:	f001 f90a 	bl	80067c0 <RCCEx_PLL2_Config>
 80055ac:	4603      	mov	r3, r0
 80055ae:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80055b0:	e002      	b.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    default:
      ret = HAL_ERROR;
 80055b2:	2301      	movs	r3, #1
 80055b4:	75fb      	strb	r3, [r7, #23]
      break;
 80055b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80055b8:	7dfb      	ldrb	r3, [r7, #23]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d109      	bne.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0xca6>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80055be:	4b2a      	ldr	r3, [pc, #168]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80055c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055c2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055ca:	4927      	ldr	r1, [pc, #156]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80055cc:	4313      	orrs	r3, r2
 80055ce:	64cb      	str	r3, [r1, #76]	; 0x4c
 80055d0:	e001      	b.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0xcaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055d2:	7dfb      	ldrb	r3, [r7, #23]
 80055d4:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d00a      	beq.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0xccc>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	3324      	adds	r3, #36	; 0x24
 80055e6:	2102      	movs	r1, #2
 80055e8:	4618      	mov	r0, r3
 80055ea:	f001 f99b 	bl	8006924 <RCCEx_PLL3_Config>
 80055ee:	4603      	mov	r3, r0
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d001      	beq.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0xccc>
    {
      status=HAL_ERROR;
 80055f4:	2301      	movs	r3, #1
 80055f6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005600:	2b00      	cmp	r3, #0
 8005602:	d035      	beq.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800560a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800560e:	d017      	beq.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8005610:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005614:	d811      	bhi.n	800563a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8005616:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800561a:	d013      	beq.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 800561c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005620:	d80b      	bhi.n	800563a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8005622:	2b00      	cmp	r3, #0
 8005624:	d010      	beq.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 8005626:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800562a:	d106      	bne.n	800563a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800562c:	4b0e      	ldr	r3, [pc, #56]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800562e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005630:	4a0d      	ldr	r2, [pc, #52]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005632:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005636:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8005638:	e007      	b.n	800564a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800563a:	2301      	movs	r3, #1
 800563c:	75fb      	strb	r3, [r7, #23]
      break;
 800563e:	e004      	b.n	800564a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8005640:	bf00      	nop
 8005642:	e002      	b.n	800564a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8005644:	bf00      	nop
 8005646:	e000      	b.n	800564a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8005648:	bf00      	nop
    }

    if(ret == HAL_OK)
 800564a:	7dfb      	ldrb	r3, [r7, #23]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d10d      	bne.n	800566c <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005650:	4b05      	ldr	r3, [pc, #20]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005652:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005654:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800565e:	4902      	ldr	r1, [pc, #8]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005660:	4313      	orrs	r3, r2
 8005662:	654b      	str	r3, [r1, #84]	; 0x54
 8005664:	e004      	b.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8005666:	bf00      	nop
 8005668:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800566c:	7dfb      	ldrb	r3, [r7, #23]
 800566e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005678:	2b00      	cmp	r3, #0
 800567a:	d008      	beq.n	800568e <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800567c:	4b30      	ldr	r3, [pc, #192]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800567e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005680:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005688:	492d      	ldr	r1, [pc, #180]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800568a:	4313      	orrs	r3, r2
 800568c:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005696:	2b00      	cmp	r3, #0
 8005698:	d008      	beq.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800569a:	4b29      	ldr	r3, [pc, #164]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800569c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800569e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056a6:	4926      	ldr	r1, [pc, #152]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80056a8:	4313      	orrs	r3, r2
 80056aa:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d008      	beq.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80056b8:	4b21      	ldr	r3, [pc, #132]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80056ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056bc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056c4:	491e      	ldr	r1, [pc, #120]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80056c6:	4313      	orrs	r3, r2
 80056c8:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d00d      	beq.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80056d6:	4b1a      	ldr	r3, [pc, #104]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80056d8:	691b      	ldr	r3, [r3, #16]
 80056da:	4a19      	ldr	r2, [pc, #100]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80056dc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80056e0:	6113      	str	r3, [r2, #16]
 80056e2:	4b17      	ldr	r3, [pc, #92]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80056e4:	691a      	ldr	r2, [r3, #16]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80056ec:	4914      	ldr	r1, [pc, #80]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80056ee:	4313      	orrs	r3, r2
 80056f0:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	da08      	bge.n	800570c <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80056fa:	4b11      	ldr	r3, [pc, #68]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80056fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056fe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005706:	490e      	ldr	r1, [pc, #56]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005708:	4313      	orrs	r3, r2
 800570a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005714:	2b00      	cmp	r3, #0
 8005716:	d009      	beq.n	800572c <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005718:	4b09      	ldr	r3, [pc, #36]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800571a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800571c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005726:	4906      	ldr	r1, [pc, #24]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005728:	4313      	orrs	r3, r2
 800572a:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800572c:	7dbb      	ldrb	r3, [r7, #22]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d101      	bne.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 8005732:	2300      	movs	r3, #0
 8005734:	e000      	b.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 8005736:	2301      	movs	r3, #1
}
 8005738:	4618      	mov	r0, r3
 800573a:	3718      	adds	r7, #24
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}
 8005740:	58024400 	.word	0x58024400

08005744 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b090      	sub	sp, #64	; 0x40
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005752:	f040 8089 	bne.w	8005868 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8005756:	4b91      	ldr	r3, [pc, #580]	; (800599c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005758:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800575a:	f003 0307 	and.w	r3, r3, #7
 800575e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005762:	2b04      	cmp	r3, #4
 8005764:	d87d      	bhi.n	8005862 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 8005766:	a201      	add	r2, pc, #4	; (adr r2, 800576c <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8005768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800576c:	08005781 	.word	0x08005781
 8005770:	080057a5 	.word	0x080057a5
 8005774:	080057c9 	.word	0x080057c9
 8005778:	0800585d 	.word	0x0800585d
 800577c:	080057ed 	.word	0x080057ed
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005780:	4b86      	ldr	r3, [pc, #536]	; (800599c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005788:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800578c:	d107      	bne.n	800579e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800578e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005792:	4618      	mov	r0, r3
 8005794:	f000 fec2 	bl	800651c <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8005798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800579a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800579c:	e3f4      	b.n	8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 800579e:	2300      	movs	r3, #0
 80057a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80057a2:	e3f1      	b.n	8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80057a4:	4b7d      	ldr	r3, [pc, #500]	; (800599c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80057b0:	d107      	bne.n	80057c2 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80057b2:	f107 0318 	add.w	r3, r7, #24
 80057b6:	4618      	mov	r0, r3
 80057b8:	f000 fc08 	bl	8005fcc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80057bc:	69bb      	ldr	r3, [r7, #24]
 80057be:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80057c0:	e3e2      	b.n	8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 80057c2:	2300      	movs	r3, #0
 80057c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80057c6:	e3df      	b.n	8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80057c8:	4b74      	ldr	r3, [pc, #464]	; (800599c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80057d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057d4:	d107      	bne.n	80057e6 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80057d6:	f107 030c 	add.w	r3, r7, #12
 80057da:	4618      	mov	r0, r3
 80057dc:	f000 fd4a 	bl	8006274 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80057e4:	e3d0      	b.n	8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 80057e6:	2300      	movs	r3, #0
 80057e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80057ea:	e3cd      	b.n	8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80057ec:	4b6b      	ldr	r3, [pc, #428]	; (800599c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80057ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057f0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80057f4:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80057f6:	4b69      	ldr	r3, [pc, #420]	; (800599c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f003 0304 	and.w	r3, r3, #4
 80057fe:	2b04      	cmp	r3, #4
 8005800:	d10c      	bne.n	800581c <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8005802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005804:	2b00      	cmp	r3, #0
 8005806:	d109      	bne.n	800581c <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005808:	4b64      	ldr	r3, [pc, #400]	; (800599c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	08db      	lsrs	r3, r3, #3
 800580e:	f003 0303 	and.w	r3, r3, #3
 8005812:	4a63      	ldr	r2, [pc, #396]	; (80059a0 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8005814:	fa22 f303 	lsr.w	r3, r2, r3
 8005818:	63fb      	str	r3, [r7, #60]	; 0x3c
 800581a:	e01e      	b.n	800585a <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800581c:	4b5f      	ldr	r3, [pc, #380]	; (800599c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005824:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005828:	d106      	bne.n	8005838 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800582a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800582c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005830:	d102      	bne.n	8005838 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005832:	4b5c      	ldr	r3, [pc, #368]	; (80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8005834:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005836:	e010      	b.n	800585a <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005838:	4b58      	ldr	r3, [pc, #352]	; (800599c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005840:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005844:	d106      	bne.n	8005854 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8005846:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005848:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800584c:	d102      	bne.n	8005854 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800584e:	4b56      	ldr	r3, [pc, #344]	; (80059a8 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8005850:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005852:	e002      	b.n	800585a <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005854:	2300      	movs	r3, #0
 8005856:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005858:	e396      	b.n	8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 800585a:	e395      	b.n	8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800585c:	4b53      	ldr	r3, [pc, #332]	; (80059ac <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800585e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005860:	e392      	b.n	8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      default :
        {
          frequency = 0;
 8005862:	2300      	movs	r3, #0
 8005864:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005866:	e38f      	b.n	8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
    }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

    else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800586e:	f040 809f 	bne.w	80059b0 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
    {
      saiclocksource= __HAL_RCC_GET_SAI2A_SOURCE();
 8005872:	4b4a      	ldr	r3, [pc, #296]	; (800599c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005874:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005876:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800587a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800587c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800587e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005882:	d04d      	beq.n	8005920 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
 8005884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005886:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800588a:	f200 8084 	bhi.w	8005996 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 800588e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005890:	2bc0      	cmp	r3, #192	; 0xc0
 8005892:	d07d      	beq.n	8005990 <HAL_RCCEx_GetPeriphCLKFreq+0x24c>
 8005894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005896:	2bc0      	cmp	r3, #192	; 0xc0
 8005898:	d87d      	bhi.n	8005996 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 800589a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800589c:	2b80      	cmp	r3, #128	; 0x80
 800589e:	d02d      	beq.n	80058fc <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>
 80058a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a2:	2b80      	cmp	r3, #128	; 0x80
 80058a4:	d877      	bhi.n	8005996 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 80058a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d003      	beq.n	80058b4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>
 80058ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ae:	2b40      	cmp	r3, #64	; 0x40
 80058b0:	d012      	beq.n	80058d8 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 80058b2:	e070      	b.n	8005996 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
      {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80058b4:	4b39      	ldr	r3, [pc, #228]	; (800599c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058bc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80058c0:	d107      	bne.n	80058d2 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80058c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80058c6:	4618      	mov	r0, r3
 80058c8:	f000 fe28 	bl	800651c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80058cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ce:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80058d0:	e35a      	b.n	8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 80058d2:	2300      	movs	r3, #0
 80058d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80058d6:	e357      	b.n	8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80058d8:	4b30      	ldr	r3, [pc, #192]	; (800599c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80058e4:	d107      	bne.n	80058f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b2>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80058e6:	f107 0318 	add.w	r3, r7, #24
 80058ea:	4618      	mov	r0, r3
 80058ec:	f000 fb6e 	bl	8005fcc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80058f0:	69bb      	ldr	r3, [r7, #24]
 80058f2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80058f4:	e348      	b.n	8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 80058f6:	2300      	movs	r3, #0
 80058f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80058fa:	e345      	b.n	8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80058fc:	4b27      	ldr	r3, [pc, #156]	; (800599c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005904:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005908:	d107      	bne.n	800591a <HAL_RCCEx_GetPeriphCLKFreq+0x1d6>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800590a:	f107 030c 	add.w	r3, r7, #12
 800590e:	4618      	mov	r0, r3
 8005910:	f000 fcb0 	bl	8006274 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005918:	e336      	b.n	8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 800591a:	2300      	movs	r3, #0
 800591c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800591e:	e333      	b.n	8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005920:	4b1e      	ldr	r3, [pc, #120]	; (800599c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005922:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005924:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005928:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800592a:	4b1c      	ldr	r3, [pc, #112]	; (800599c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f003 0304 	and.w	r3, r3, #4
 8005932:	2b04      	cmp	r3, #4
 8005934:	d10c      	bne.n	8005950 <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
 8005936:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005938:	2b00      	cmp	r3, #0
 800593a:	d109      	bne.n	8005950 <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800593c:	4b17      	ldr	r3, [pc, #92]	; (800599c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	08db      	lsrs	r3, r3, #3
 8005942:	f003 0303 	and.w	r3, r3, #3
 8005946:	4a16      	ldr	r2, [pc, #88]	; (80059a0 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8005948:	fa22 f303 	lsr.w	r3, r2, r3
 800594c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800594e:	e01e      	b.n	800598e <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005950:	4b12      	ldr	r3, [pc, #72]	; (800599c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005958:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800595c:	d106      	bne.n	800596c <HAL_RCCEx_GetPeriphCLKFreq+0x228>
 800595e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005960:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005964:	d102      	bne.n	800596c <HAL_RCCEx_GetPeriphCLKFreq+0x228>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005966:	4b0f      	ldr	r3, [pc, #60]	; (80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8005968:	63fb      	str	r3, [r7, #60]	; 0x3c
 800596a:	e010      	b.n	800598e <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800596c:	4b0b      	ldr	r3, [pc, #44]	; (800599c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005974:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005978:	d106      	bne.n	8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800597a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800597c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005980:	d102      	bne.n	8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005982:	4b09      	ldr	r3, [pc, #36]	; (80059a8 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8005984:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005986:	e002      	b.n	800598e <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005988:	2300      	movs	r3, #0
 800598a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800598c:	e2fc      	b.n	8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 800598e:	e2fb      	b.n	8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005990:	4b06      	ldr	r3, [pc, #24]	; (80059ac <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8005992:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005994:	e2f8      	b.n	8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 8005996:	2300      	movs	r3, #0
 8005998:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800599a:	e2f5      	b.n	8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 800599c:	58024400 	.word	0x58024400
 80059a0:	03d09000 	.word	0x03d09000
 80059a4:	003d0900 	.word	0x003d0900
 80059a8:	016e3600 	.word	0x016e3600
 80059ac:	00bb8000 	.word	0x00bb8000

    }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059b6:	f040 809c 	bne.w	8005af2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
    {

      saiclocksource= __HAL_RCC_GET_SAI2B_SOURCE();
 80059ba:	4b9d      	ldr	r3, [pc, #628]	; (8005c30 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80059bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059be:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 80059c2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80059c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059ca:	d054      	beq.n	8005a76 <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 80059cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059d2:	f200 808b 	bhi.w	8005aec <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
 80059d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80059dc:	f000 8083 	beq.w	8005ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80059e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059e2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80059e6:	f200 8081 	bhi.w	8005aec <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
 80059ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059f0:	d02f      	beq.n	8005a52 <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 80059f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059f8:	d878      	bhi.n	8005aec <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
 80059fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d004      	beq.n	8005a0a <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 8005a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a06:	d012      	beq.n	8005a2e <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 8005a08:	e070      	b.n	8005aec <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
      {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005a0a:	4b89      	ldr	r3, [pc, #548]	; (8005c30 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a12:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005a16:	d107      	bne.n	8005a28 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005a18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f000 fd7d 	bl	800651c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a24:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005a26:	e2af      	b.n	8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8005a28:	2300      	movs	r3, #0
 8005a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a2c:	e2ac      	b.n	8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005a2e:	4b80      	ldr	r3, [pc, #512]	; (8005c30 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a36:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a3a:	d107      	bne.n	8005a4c <HAL_RCCEx_GetPeriphCLKFreq+0x308>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a3c:	f107 0318 	add.w	r3, r7, #24
 8005a40:	4618      	mov	r0, r3
 8005a42:	f000 fac3 	bl	8005fcc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005a46:	69bb      	ldr	r3, [r7, #24]
 8005a48:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005a4a:	e29d      	b.n	8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a50:	e29a      	b.n	8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005a52:	4b77      	ldr	r3, [pc, #476]	; (8005c30 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a5e:	d107      	bne.n	8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005a60:	f107 030c 	add.w	r3, r7, #12
 8005a64:	4618      	mov	r0, r3
 8005a66:	f000 fc05 	bl	8006274 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005a6e:	e28b      	b.n	8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8005a70:	2300      	movs	r3, #0
 8005a72:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a74:	e288      	b.n	8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005a76:	4b6e      	ldr	r3, [pc, #440]	; (8005c30 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8005a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a7a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005a7e:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005a80:	4b6b      	ldr	r3, [pc, #428]	; (8005c30 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f003 0304 	and.w	r3, r3, #4
 8005a88:	2b04      	cmp	r3, #4
 8005a8a:	d10c      	bne.n	8005aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x362>
 8005a8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d109      	bne.n	8005aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x362>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005a92:	4b67      	ldr	r3, [pc, #412]	; (8005c30 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	08db      	lsrs	r3, r3, #3
 8005a98:	f003 0303 	and.w	r3, r3, #3
 8005a9c:	4a65      	ldr	r2, [pc, #404]	; (8005c34 <HAL_RCCEx_GetPeriphCLKFreq+0x4f0>)
 8005a9e:	fa22 f303 	lsr.w	r3, r2, r3
 8005aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005aa4:	e01e      	b.n	8005ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005aa6:	4b62      	ldr	r3, [pc, #392]	; (8005c30 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005aae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ab2:	d106      	bne.n	8005ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 8005ab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ab6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005aba:	d102      	bne.n	8005ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005abc:	4b5e      	ldr	r3, [pc, #376]	; (8005c38 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 8005abe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ac0:	e010      	b.n	8005ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005ac2:	4b5b      	ldr	r3, [pc, #364]	; (8005c30 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005aca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ace:	d106      	bne.n	8005ade <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 8005ad0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ad2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ad6:	d102      	bne.n	8005ade <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005ad8:	4b58      	ldr	r3, [pc, #352]	; (8005c3c <HAL_RCCEx_GetPeriphCLKFreq+0x4f8>)
 8005ada:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005adc:	e002      	b.n	8005ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
          break;
 8005ae2:	e251      	b.n	8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8005ae4:	e250      	b.n	8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005ae6:	4b56      	ldr	r3, [pc, #344]	; (8005c40 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8005ae8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005aea:	e24d      	b.n	8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 8005aec:	2300      	movs	r3, #0
 8005aee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005af0:	e24a      	b.n	8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          break;
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005af8:	f040 80a7 	bne.w	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8005afc:	4b4c      	ldr	r3, [pc, #304]	; (8005c30 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8005afe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b00:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8005b04:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b0c:	d055      	beq.n	8005bba <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8005b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b10:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b14:	f200 8096 	bhi.w	8005c44 <HAL_RCCEx_GetPeriphCLKFreq+0x500>
 8005b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b1a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005b1e:	f000 8084 	beq.w	8005c2a <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
 8005b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b24:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005b28:	f200 808c 	bhi.w	8005c44 <HAL_RCCEx_GetPeriphCLKFreq+0x500>
 8005b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b32:	d030      	beq.n	8005b96 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 8005b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b3a:	f200 8083 	bhi.w	8005c44 <HAL_RCCEx_GetPeriphCLKFreq+0x500>
 8005b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d004      	beq.n	8005b4e <HAL_RCCEx_GetPeriphCLKFreq+0x40a>
 8005b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b4a:	d012      	beq.n	8005b72 <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
 8005b4c:	e07a      	b.n	8005c44 <HAL_RCCEx_GetPeriphCLKFreq+0x500>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005b4e:	4b38      	ldr	r3, [pc, #224]	; (8005c30 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b56:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b5a:	d107      	bne.n	8005b6c <HAL_RCCEx_GetPeriphCLKFreq+0x428>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005b5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005b60:	4618      	mov	r0, r3
 8005b62:	f000 fcdb 	bl	800651c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b68:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005b6a:	e20d      	b.n	8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b70:	e20a      	b.n	8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005b72:	4b2f      	ldr	r3, [pc, #188]	; (8005c30 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b7a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b7e:	d107      	bne.n	8005b90 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b80:	f107 0318 	add.w	r3, r7, #24
 8005b84:	4618      	mov	r0, r3
 8005b86:	f000 fa21 	bl	8005fcc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005b8a:	69bb      	ldr	r3, [r7, #24]
 8005b8c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005b8e:	e1fb      	b.n	8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8005b90:	2300      	movs	r3, #0
 8005b92:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b94:	e1f8      	b.n	8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005b96:	4b26      	ldr	r3, [pc, #152]	; (8005c30 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ba2:	d107      	bne.n	8005bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005ba4:	f107 030c 	add.w	r3, r7, #12
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f000 fb63 	bl	8006274 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005bb2:	e1e9      	b.n	8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005bb8:	e1e6      	b.n	8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005bba:	4b1d      	ldr	r3, [pc, #116]	; (8005c30 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8005bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bbe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005bc2:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005bc4:	4b1a      	ldr	r3, [pc, #104]	; (8005c30 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f003 0304 	and.w	r3, r3, #4
 8005bcc:	2b04      	cmp	r3, #4
 8005bce:	d10c      	bne.n	8005bea <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
 8005bd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d109      	bne.n	8005bea <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005bd6:	4b16      	ldr	r3, [pc, #88]	; (8005c30 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	08db      	lsrs	r3, r3, #3
 8005bdc:	f003 0303 	and.w	r3, r3, #3
 8005be0:	4a14      	ldr	r2, [pc, #80]	; (8005c34 <HAL_RCCEx_GetPeriphCLKFreq+0x4f0>)
 8005be2:	fa22 f303 	lsr.w	r3, r2, r3
 8005be6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005be8:	e01e      	b.n	8005c28 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005bea:	4b11      	ldr	r3, [pc, #68]	; (8005c30 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bf2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bf6:	d106      	bne.n	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
 8005bf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bfa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005bfe:	d102      	bne.n	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005c00:	4b0d      	ldr	r3, [pc, #52]	; (8005c38 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 8005c02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c04:	e010      	b.n	8005c28 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005c06:	4b0a      	ldr	r3, [pc, #40]	; (8005c30 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c0e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c12:	d106      	bne.n	8005c22 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8005c14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c1a:	d102      	bne.n	8005c22 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005c1c:	4b07      	ldr	r3, [pc, #28]	; (8005c3c <HAL_RCCEx_GetPeriphCLKFreq+0x4f8>)
 8005c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c20:	e002      	b.n	8005c28 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005c22:	2300      	movs	r3, #0
 8005c24:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005c26:	e1af      	b.n	8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8005c28:	e1ae      	b.n	8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005c2a:	4b05      	ldr	r3, [pc, #20]	; (8005c40 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8005c2c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005c2e:	e1ab      	b.n	8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8005c30:	58024400 	.word	0x58024400
 8005c34:	03d09000 	.word	0x03d09000
 8005c38:	003d0900 	.word	0x003d0900
 8005c3c:	016e3600 	.word	0x016e3600
 8005c40:	00bb8000 	.word	0x00bb8000
        }
      default :
        {
          frequency = 0;
 8005c44:	2300      	movs	r3, #0
 8005c46:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005c48:	e19e      	b.n	8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005c50:	d173      	bne.n	8005d3a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8005c52:	4b9d      	ldr	r3, [pc, #628]	; (8005ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8005c54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c56:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005c5a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c5e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c62:	d02f      	beq.n	8005cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
 8005c64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c66:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c6a:	d863      	bhi.n	8005d34 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8005c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d004      	beq.n	8005c7c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8005c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c78:	d012      	beq.n	8005ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
 8005c7a:	e05b      	b.n	8005d34 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005c7c:	4b92      	ldr	r3, [pc, #584]	; (8005ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c84:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c88:	d107      	bne.n	8005c9a <HAL_RCCEx_GetPeriphCLKFreq+0x556>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c8a:	f107 0318 	add.w	r3, r7, #24
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f000 f99c 	bl	8005fcc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005c94:	69bb      	ldr	r3, [r7, #24]
 8005c96:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005c98:	e176      	b.n	8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005c9e:	e173      	b.n	8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005ca0:	4b89      	ldr	r3, [pc, #548]	; (8005ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005ca8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005cac:	d107      	bne.n	8005cbe <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005cae:	f107 030c 	add.w	r3, r7, #12
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f000 fade 	bl	8006274 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005cbc:	e164      	b.n	8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005cc2:	e161      	b.n	8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005cc4:	4b80      	ldr	r3, [pc, #512]	; (8005ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8005cc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cc8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005ccc:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005cce:	4b7e      	ldr	r3, [pc, #504]	; (8005ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f003 0304 	and.w	r3, r3, #4
 8005cd6:	2b04      	cmp	r3, #4
 8005cd8:	d10c      	bne.n	8005cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
 8005cda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d109      	bne.n	8005cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005ce0:	4b79      	ldr	r3, [pc, #484]	; (8005ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	08db      	lsrs	r3, r3, #3
 8005ce6:	f003 0303 	and.w	r3, r3, #3
 8005cea:	4a78      	ldr	r2, [pc, #480]	; (8005ecc <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005cec:	fa22 f303 	lsr.w	r3, r2, r3
 8005cf0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cf2:	e01e      	b.n	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005cf4:	4b74      	ldr	r3, [pc, #464]	; (8005ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d00:	d106      	bne.n	8005d10 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8005d02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d04:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d08:	d102      	bne.n	8005d10 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005d0a:	4b71      	ldr	r3, [pc, #452]	; (8005ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8005d0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d0e:	e010      	b.n	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005d10:	4b6d      	ldr	r3, [pc, #436]	; (8005ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d1c:	d106      	bne.n	8005d2c <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 8005d1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d24:	d102      	bne.n	8005d2c <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005d26:	4b6b      	ldr	r3, [pc, #428]	; (8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8005d28:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d2a:	e002      	b.n	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005d30:	e12a      	b.n	8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8005d32:	e129      	b.n	8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 8005d34:	2300      	movs	r3, #0
 8005d36:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005d38:	e126      	b.n	8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d40:	d133      	bne.n	8005daa <HAL_RCCEx_GetPeriphCLKFreq+0x666>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8005d42:	4b61      	ldr	r3, [pc, #388]	; (8005ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8005d44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d4a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d004      	beq.n	8005d5c <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 8005d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d58:	d012      	beq.n	8005d80 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 8005d5a:	e023      	b.n	8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005d5c:	4b5a      	ldr	r3, [pc, #360]	; (8005ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d64:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005d68:	d107      	bne.n	8005d7a <HAL_RCCEx_GetPeriphCLKFreq+0x636>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005d6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f000 fbd4 	bl	800651c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d76:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005d78:	e106      	b.n	8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005d7e:	e103      	b.n	8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005d80:	4b51      	ldr	r3, [pc, #324]	; (8005ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d88:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005d8c:	d107      	bne.n	8005d9e <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d8e:	f107 0318 	add.w	r3, r7, #24
 8005d92:	4618      	mov	r0, r3
 8005d94:	f000 f91a 	bl	8005fcc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005d98:	6a3b      	ldr	r3, [r7, #32]
 8005d9a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005d9c:	e0f4      	b.n	8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005da2:	e0f1      	b.n	8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 8005da4:	2300      	movs	r3, #0
 8005da6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005da8:	e0ee      	b.n	8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005db0:	f040 809b 	bne.w	8005eea <HAL_RCCEx_GetPeriphCLKFreq+0x7a6>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8005db4:	4b44      	ldr	r3, [pc, #272]	; (8005ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8005db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005db8:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8005dbc:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dc0:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8005dc4:	f000 808b 	beq.w	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8005dc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dca:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8005dce:	f200 8089 	bhi.w	8005ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8005dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dd4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005dd8:	d06c      	beq.n	8005eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8005dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ddc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005de0:	f200 8080 	bhi.w	8005ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8005de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005de6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dea:	d056      	beq.n	8005e9a <HAL_RCCEx_GetPeriphCLKFreq+0x756>
 8005dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005df2:	d877      	bhi.n	8005ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8005df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005df6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005dfa:	d03b      	beq.n	8005e74 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
 8005dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dfe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005e02:	d86f      	bhi.n	8005ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8005e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e0a:	d021      	beq.n	8005e50 <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
 8005e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e12:	d867      	bhi.n	8005ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8005e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d004      	beq.n	8005e24 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 8005e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e1c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e20:	d004      	beq.n	8005e2c <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>
 8005e22:	e05f      	b.n	8005ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8005e24:	f000 f8bc 	bl	8005fa0 <HAL_RCCEx_GetD3PCLK1Freq>
 8005e28:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8005e2a:	e0ad      	b.n	8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005e2c:	4b26      	ldr	r3, [pc, #152]	; (8005ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e34:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e38:	d107      	bne.n	8005e4a <HAL_RCCEx_GetPeriphCLKFreq+0x706>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e3a:	f107 0318 	add.w	r3, r7, #24
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f000 f8c4 	bl	8005fcc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005e44:	69fb      	ldr	r3, [r7, #28]
 8005e46:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005e48:	e09e      	b.n	8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005e4e:	e09b      	b.n	8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005e50:	4b1d      	ldr	r3, [pc, #116]	; (8005ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e5c:	d107      	bne.n	8005e6e <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005e5e:	f107 030c 	add.w	r3, r7, #12
 8005e62:	4618      	mov	r0, r3
 8005e64:	f000 fa06 	bl	8006274 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005e6c:	e08c      	b.n	8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005e72:	e089      	b.n	8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005e74:	4b14      	ldr	r3, [pc, #80]	; (8005ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f003 0304 	and.w	r3, r3, #4
 8005e7c:	2b04      	cmp	r3, #4
 8005e7e:	d109      	bne.n	8005e94 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005e80:	4b11      	ldr	r3, [pc, #68]	; (8005ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	08db      	lsrs	r3, r3, #3
 8005e86:	f003 0303 	and.w	r3, r3, #3
 8005e8a:	4a10      	ldr	r2, [pc, #64]	; (8005ecc <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005e8c:	fa22 f303 	lsr.w	r3, r2, r3
 8005e90:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005e92:	e079      	b.n	8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8005e94:	2300      	movs	r3, #0
 8005e96:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005e98:	e076      	b.n	8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005e9a:	4b0b      	ldr	r3, [pc, #44]	; (8005ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ea2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ea6:	d102      	bne.n	8005eae <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
         {
          frequency = CSI_VALUE;
 8005ea8:	4b09      	ldr	r3, [pc, #36]	; (8005ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8005eaa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005eac:	e06c      	b.n	8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005eb2:	e069      	b.n	8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005eb4:	4b04      	ldr	r3, [pc, #16]	; (8005ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ebc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ec0:	d10a      	bne.n	8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          frequency = HSE_VALUE;
 8005ec2:	4b04      	ldr	r3, [pc, #16]	; (8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8005ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005ec6:	e05f      	b.n	8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8005ec8:	58024400 	.word	0x58024400
 8005ecc:	03d09000 	.word	0x03d09000
 8005ed0:	003d0900 	.word	0x003d0900
 8005ed4:	016e3600 	.word	0x016e3600
          frequency = 0;
 8005ed8:	2300      	movs	r3, #0
 8005eda:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005edc:	e054      	b.n	8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005ede:	4b2d      	ldr	r3, [pc, #180]	; (8005f94 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8005ee0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ee2:	e051      	b.n	8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ee8:	e04e      	b.n	8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ef0:	d148      	bne.n	8005f84 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8005ef2:	4b29      	ldr	r3, [pc, #164]	; (8005f98 <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 8005ef4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ef6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005efa:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005efe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f02:	d02a      	beq.n	8005f5a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8005f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f0a:	d838      	bhi.n	8005f7e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8005f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d004      	beq.n	8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0x7d8>
 8005f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f14:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f18:	d00d      	beq.n	8005f36 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8005f1a:	e030      	b.n	8005f7e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005f1c:	4b1e      	ldr	r3, [pc, #120]	; (8005f98 <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f28:	d102      	bne.n	8005f30 <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
         {
          frequency = HSE_VALUE;
 8005f2a:	4b1c      	ldr	r3, [pc, #112]	; (8005f9c <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8005f2c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005f2e:	e02b      	b.n	8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8005f30:	2300      	movs	r3, #0
 8005f32:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005f34:	e028      	b.n	8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005f36:	4b18      	ldr	r3, [pc, #96]	; (8005f98 <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f3e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005f42:	d107      	bne.n	8005f54 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005f44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f48:	4618      	mov	r0, r3
 8005f4a:	f000 fae7 	bl	800651c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f50:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005f52:	e019      	b.n	8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8005f54:	2300      	movs	r3, #0
 8005f56:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005f58:	e016      	b.n	8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005f5a:	4b0f      	ldr	r3, [pc, #60]	; (8005f98 <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f62:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f66:	d107      	bne.n	8005f78 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f68:	f107 0318 	add.w	r3, r7, #24
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	f000 f82d 	bl	8005fcc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005f72:	69fb      	ldr	r3, [r7, #28]
 8005f74:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005f76:	e007      	b.n	8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8005f78:	2300      	movs	r3, #0
 8005f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005f7c:	e004      	b.n	8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      default :
        {
          frequency = 0;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005f82:	e001      	b.n	8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else
    {
      frequency = 0;
 8005f84:	2300      	movs	r3, #0
 8005f86:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8005f88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3740      	adds	r7, #64	; 0x40
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}
 8005f92:	bf00      	nop
 8005f94:	00bb8000 	.word	0x00bb8000
 8005f98:	58024400 	.word	0x58024400
 8005f9c:	016e3600 	.word	0x016e3600

08005fa0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8005fa4:	f7fe fc66 	bl	8004874 <HAL_RCC_GetHCLKFreq>
 8005fa8:	4602      	mov	r2, r0
 8005faa:	4b06      	ldr	r3, [pc, #24]	; (8005fc4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005fac:	6a1b      	ldr	r3, [r3, #32]
 8005fae:	091b      	lsrs	r3, r3, #4
 8005fb0:	f003 0307 	and.w	r3, r3, #7
 8005fb4:	4904      	ldr	r1, [pc, #16]	; (8005fc8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005fb6:	5ccb      	ldrb	r3, [r1, r3]
 8005fb8:	f003 031f 	and.w	r3, r3, #31
 8005fbc:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	bd80      	pop	{r7, pc}
 8005fc4:	58024400 	.word	0x58024400
 8005fc8:	08008454 	.word	0x08008454

08005fcc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b089      	sub	sp, #36	; 0x24
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005fd4:	4ba1      	ldr	r3, [pc, #644]	; (800625c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fd8:	f003 0303 	and.w	r3, r3, #3
 8005fdc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8005fde:	4b9f      	ldr	r3, [pc, #636]	; (800625c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fe2:	0b1b      	lsrs	r3, r3, #12
 8005fe4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005fe8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005fea:	4b9c      	ldr	r3, [pc, #624]	; (800625c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fee:	091b      	lsrs	r3, r3, #4
 8005ff0:	f003 0301 	and.w	r3, r3, #1
 8005ff4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005ff6:	4b99      	ldr	r3, [pc, #612]	; (800625c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ffa:	08db      	lsrs	r3, r3, #3
 8005ffc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006000:	693a      	ldr	r2, [r7, #16]
 8006002:	fb02 f303 	mul.w	r3, r2, r3
 8006006:	ee07 3a90 	vmov	s15, r3
 800600a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800600e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	2b00      	cmp	r3, #0
 8006016:	f000 8111 	beq.w	800623c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800601a:	69bb      	ldr	r3, [r7, #24]
 800601c:	2b02      	cmp	r3, #2
 800601e:	f000 8083 	beq.w	8006128 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006022:	69bb      	ldr	r3, [r7, #24]
 8006024:	2b02      	cmp	r3, #2
 8006026:	f200 80a1 	bhi.w	800616c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800602a:	69bb      	ldr	r3, [r7, #24]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d003      	beq.n	8006038 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006030:	69bb      	ldr	r3, [r7, #24]
 8006032:	2b01      	cmp	r3, #1
 8006034:	d056      	beq.n	80060e4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006036:	e099      	b.n	800616c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006038:	4b88      	ldr	r3, [pc, #544]	; (800625c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f003 0320 	and.w	r3, r3, #32
 8006040:	2b00      	cmp	r3, #0
 8006042:	d02d      	beq.n	80060a0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006044:	4b85      	ldr	r3, [pc, #532]	; (800625c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	08db      	lsrs	r3, r3, #3
 800604a:	f003 0303 	and.w	r3, r3, #3
 800604e:	4a84      	ldr	r2, [pc, #528]	; (8006260 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006050:	fa22 f303 	lsr.w	r3, r2, r3
 8006054:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	ee07 3a90 	vmov	s15, r3
 800605c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	ee07 3a90 	vmov	s15, r3
 8006066:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800606a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800606e:	4b7b      	ldr	r3, [pc, #492]	; (800625c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006072:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006076:	ee07 3a90 	vmov	s15, r3
 800607a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800607e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006082:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006264 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006086:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800608a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800608e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006092:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006096:	ee67 7a27 	vmul.f32	s15, s14, s15
 800609a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800609e:	e087      	b.n	80061b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	ee07 3a90 	vmov	s15, r3
 80060a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060aa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006268 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80060ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060b2:	4b6a      	ldr	r3, [pc, #424]	; (800625c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80060b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060ba:	ee07 3a90 	vmov	s15, r3
 80060be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80060c6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006264 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80060ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060de:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80060e2:	e065      	b.n	80061b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	ee07 3a90 	vmov	s15, r3
 80060ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060ee:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800626c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80060f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060f6:	4b59      	ldr	r3, [pc, #356]	; (800625c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80060f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060fe:	ee07 3a90 	vmov	s15, r3
 8006102:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006106:	ed97 6a03 	vldr	s12, [r7, #12]
 800610a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006264 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800610e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006112:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006116:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800611a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800611e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006122:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006126:	e043      	b.n	80061b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	ee07 3a90 	vmov	s15, r3
 800612e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006132:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006270 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006136:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800613a:	4b48      	ldr	r3, [pc, #288]	; (800625c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800613c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800613e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006142:	ee07 3a90 	vmov	s15, r3
 8006146:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800614a:	ed97 6a03 	vldr	s12, [r7, #12]
 800614e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006264 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006152:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006156:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800615a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800615e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006162:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006166:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800616a:	e021      	b.n	80061b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	ee07 3a90 	vmov	s15, r3
 8006172:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006176:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800626c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800617a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800617e:	4b37      	ldr	r3, [pc, #220]	; (800625c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006182:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006186:	ee07 3a90 	vmov	s15, r3
 800618a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800618e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006192:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006264 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006196:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800619a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800619e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80061a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061aa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80061ae:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80061b0:	4b2a      	ldr	r3, [pc, #168]	; (800625c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80061b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061b4:	0a5b      	lsrs	r3, r3, #9
 80061b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061ba:	ee07 3a90 	vmov	s15, r3
 80061be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80061c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80061ca:	edd7 6a07 	vldr	s13, [r7, #28]
 80061ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061d6:	ee17 2a90 	vmov	r2, s15
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80061de:	4b1f      	ldr	r3, [pc, #124]	; (800625c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80061e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061e2:	0c1b      	lsrs	r3, r3, #16
 80061e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061e8:	ee07 3a90 	vmov	s15, r3
 80061ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80061f4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80061f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80061fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006200:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006204:	ee17 2a90 	vmov	r2, s15
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800620c:	4b13      	ldr	r3, [pc, #76]	; (800625c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800620e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006210:	0e1b      	lsrs	r3, r3, #24
 8006212:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006216:	ee07 3a90 	vmov	s15, r3
 800621a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800621e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006222:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006226:	edd7 6a07 	vldr	s13, [r7, #28]
 800622a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800622e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006232:	ee17 2a90 	vmov	r2, s15
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800623a:	e008      	b.n	800624e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2200      	movs	r2, #0
 8006240:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2200      	movs	r2, #0
 8006246:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2200      	movs	r2, #0
 800624c:	609a      	str	r2, [r3, #8]
}
 800624e:	bf00      	nop
 8006250:	3724      	adds	r7, #36	; 0x24
 8006252:	46bd      	mov	sp, r7
 8006254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006258:	4770      	bx	lr
 800625a:	bf00      	nop
 800625c:	58024400 	.word	0x58024400
 8006260:	03d09000 	.word	0x03d09000
 8006264:	46000000 	.word	0x46000000
 8006268:	4c742400 	.word	0x4c742400
 800626c:	4a742400 	.word	0x4a742400
 8006270:	4bb71b00 	.word	0x4bb71b00

08006274 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8006274:	b480      	push	{r7}
 8006276:	b089      	sub	sp, #36	; 0x24
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800627c:	4ba1      	ldr	r3, [pc, #644]	; (8006504 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800627e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006280:	f003 0303 	and.w	r3, r3, #3
 8006284:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8006286:	4b9f      	ldr	r3, [pc, #636]	; (8006504 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800628a:	0d1b      	lsrs	r3, r3, #20
 800628c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006290:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006292:	4b9c      	ldr	r3, [pc, #624]	; (8006504 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006296:	0a1b      	lsrs	r3, r3, #8
 8006298:	f003 0301 	and.w	r3, r3, #1
 800629c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800629e:	4b99      	ldr	r3, [pc, #612]	; (8006504 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80062a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062a2:	08db      	lsrs	r3, r3, #3
 80062a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80062a8:	693a      	ldr	r2, [r7, #16]
 80062aa:	fb02 f303 	mul.w	r3, r2, r3
 80062ae:	ee07 3a90 	vmov	s15, r3
 80062b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062b6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	f000 8111 	beq.w	80064e4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80062c2:	69bb      	ldr	r3, [r7, #24]
 80062c4:	2b02      	cmp	r3, #2
 80062c6:	f000 8083 	beq.w	80063d0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80062ca:	69bb      	ldr	r3, [r7, #24]
 80062cc:	2b02      	cmp	r3, #2
 80062ce:	f200 80a1 	bhi.w	8006414 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80062d2:	69bb      	ldr	r3, [r7, #24]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d003      	beq.n	80062e0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80062d8:	69bb      	ldr	r3, [r7, #24]
 80062da:	2b01      	cmp	r3, #1
 80062dc:	d056      	beq.n	800638c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80062de:	e099      	b.n	8006414 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80062e0:	4b88      	ldr	r3, [pc, #544]	; (8006504 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f003 0320 	and.w	r3, r3, #32
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d02d      	beq.n	8006348 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80062ec:	4b85      	ldr	r3, [pc, #532]	; (8006504 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	08db      	lsrs	r3, r3, #3
 80062f2:	f003 0303 	and.w	r3, r3, #3
 80062f6:	4a84      	ldr	r2, [pc, #528]	; (8006508 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80062f8:	fa22 f303 	lsr.w	r3, r2, r3
 80062fc:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	ee07 3a90 	vmov	s15, r3
 8006304:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	ee07 3a90 	vmov	s15, r3
 800630e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006312:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006316:	4b7b      	ldr	r3, [pc, #492]	; (8006504 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800631a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800631e:	ee07 3a90 	vmov	s15, r3
 8006322:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006326:	ed97 6a03 	vldr	s12, [r7, #12]
 800632a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800650c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800632e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006332:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006336:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800633a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800633e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006342:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006346:	e087      	b.n	8006458 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	ee07 3a90 	vmov	s15, r3
 800634e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006352:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006510 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006356:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800635a:	4b6a      	ldr	r3, [pc, #424]	; (8006504 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800635c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800635e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006362:	ee07 3a90 	vmov	s15, r3
 8006366:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800636a:	ed97 6a03 	vldr	s12, [r7, #12]
 800636e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800650c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006372:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006376:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800637a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800637e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006382:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006386:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800638a:	e065      	b.n	8006458 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	ee07 3a90 	vmov	s15, r3
 8006392:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006396:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006514 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800639a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800639e:	4b59      	ldr	r3, [pc, #356]	; (8006504 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80063a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063a6:	ee07 3a90 	vmov	s15, r3
 80063aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80063b2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800650c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80063b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80063c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063ca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80063ce:	e043      	b.n	8006458 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	ee07 3a90 	vmov	s15, r3
 80063d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063da:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006518 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80063de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063e2:	4b48      	ldr	r3, [pc, #288]	; (8006504 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80063e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063ea:	ee07 3a90 	vmov	s15, r3
 80063ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80063f6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800650c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80063fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006402:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006406:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800640a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800640e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006412:	e021      	b.n	8006458 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	ee07 3a90 	vmov	s15, r3
 800641a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800641e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006514 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006422:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006426:	4b37      	ldr	r3, [pc, #220]	; (8006504 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800642a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800642e:	ee07 3a90 	vmov	s15, r3
 8006432:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006436:	ed97 6a03 	vldr	s12, [r7, #12]
 800643a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800650c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800643e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006442:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006446:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800644a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800644e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006452:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006456:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8006458:	4b2a      	ldr	r3, [pc, #168]	; (8006504 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800645a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800645c:	0a5b      	lsrs	r3, r3, #9
 800645e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006462:	ee07 3a90 	vmov	s15, r3
 8006466:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800646a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800646e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006472:	edd7 6a07 	vldr	s13, [r7, #28]
 8006476:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800647a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800647e:	ee17 2a90 	vmov	r2, s15
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8006486:	4b1f      	ldr	r3, [pc, #124]	; (8006504 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800648a:	0c1b      	lsrs	r3, r3, #16
 800648c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006490:	ee07 3a90 	vmov	s15, r3
 8006494:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006498:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800649c:	ee37 7a87 	vadd.f32	s14, s15, s14
 80064a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80064a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80064a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80064ac:	ee17 2a90 	vmov	r2, s15
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80064b4:	4b13      	ldr	r3, [pc, #76]	; (8006504 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80064b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064b8:	0e1b      	lsrs	r3, r3, #24
 80064ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064be:	ee07 3a90 	vmov	s15, r3
 80064c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80064ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 80064ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80064d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80064d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80064da:	ee17 2a90 	vmov	r2, s15
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80064e2:	e008      	b.n	80064f6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2200      	movs	r2, #0
 80064e8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2200      	movs	r2, #0
 80064ee:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2200      	movs	r2, #0
 80064f4:	609a      	str	r2, [r3, #8]
}
 80064f6:	bf00      	nop
 80064f8:	3724      	adds	r7, #36	; 0x24
 80064fa:	46bd      	mov	sp, r7
 80064fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006500:	4770      	bx	lr
 8006502:	bf00      	nop
 8006504:	58024400 	.word	0x58024400
 8006508:	03d09000 	.word	0x03d09000
 800650c:	46000000 	.word	0x46000000
 8006510:	4c742400 	.word	0x4c742400
 8006514:	4a742400 	.word	0x4a742400
 8006518:	4bb71b00 	.word	0x4bb71b00

0800651c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800651c:	b480      	push	{r7}
 800651e:	b089      	sub	sp, #36	; 0x24
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006524:	4ba0      	ldr	r3, [pc, #640]	; (80067a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006528:	f003 0303 	and.w	r3, r3, #3
 800652c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800652e:	4b9e      	ldr	r3, [pc, #632]	; (80067a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006532:	091b      	lsrs	r3, r3, #4
 8006534:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006538:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800653a:	4b9b      	ldr	r3, [pc, #620]	; (80067a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800653c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800653e:	f003 0301 	and.w	r3, r3, #1
 8006542:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006544:	4b98      	ldr	r3, [pc, #608]	; (80067a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006548:	08db      	lsrs	r3, r3, #3
 800654a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800654e:	693a      	ldr	r2, [r7, #16]
 8006550:	fb02 f303 	mul.w	r3, r2, r3
 8006554:	ee07 3a90 	vmov	s15, r3
 8006558:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800655c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	2b00      	cmp	r3, #0
 8006564:	f000 8111 	beq.w	800678a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8006568:	69bb      	ldr	r3, [r7, #24]
 800656a:	2b02      	cmp	r3, #2
 800656c:	f000 8083 	beq.w	8006676 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8006570:	69bb      	ldr	r3, [r7, #24]
 8006572:	2b02      	cmp	r3, #2
 8006574:	f200 80a1 	bhi.w	80066ba <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8006578:	69bb      	ldr	r3, [r7, #24]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d003      	beq.n	8006586 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800657e:	69bb      	ldr	r3, [r7, #24]
 8006580:	2b01      	cmp	r3, #1
 8006582:	d056      	beq.n	8006632 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8006584:	e099      	b.n	80066ba <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006586:	4b88      	ldr	r3, [pc, #544]	; (80067a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f003 0320 	and.w	r3, r3, #32
 800658e:	2b00      	cmp	r3, #0
 8006590:	d02d      	beq.n	80065ee <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006592:	4b85      	ldr	r3, [pc, #532]	; (80067a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	08db      	lsrs	r3, r3, #3
 8006598:	f003 0303 	and.w	r3, r3, #3
 800659c:	4a83      	ldr	r2, [pc, #524]	; (80067ac <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800659e:	fa22 f303 	lsr.w	r3, r2, r3
 80065a2:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	ee07 3a90 	vmov	s15, r3
 80065aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	ee07 3a90 	vmov	s15, r3
 80065b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065bc:	4b7a      	ldr	r3, [pc, #488]	; (80067a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80065be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065c4:	ee07 3a90 	vmov	s15, r3
 80065c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065cc:	ed97 6a03 	vldr	s12, [r7, #12]
 80065d0:	eddf 5a77 	vldr	s11, [pc, #476]	; 80067b0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80065d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80065e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065e8:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80065ec:	e087      	b.n	80066fe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	ee07 3a90 	vmov	s15, r3
 80065f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065f8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80067b4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80065fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006600:	4b69      	ldr	r3, [pc, #420]	; (80067a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006604:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006608:	ee07 3a90 	vmov	s15, r3
 800660c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006610:	ed97 6a03 	vldr	s12, [r7, #12]
 8006614:	eddf 5a66 	vldr	s11, [pc, #408]	; 80067b0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006618:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800661c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006620:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006624:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006628:	ee67 7a27 	vmul.f32	s15, s14, s15
 800662c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006630:	e065      	b.n	80066fe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	ee07 3a90 	vmov	s15, r3
 8006638:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800663c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80067b8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8006640:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006644:	4b58      	ldr	r3, [pc, #352]	; (80067a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006648:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800664c:	ee07 3a90 	vmov	s15, r3
 8006650:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006654:	ed97 6a03 	vldr	s12, [r7, #12]
 8006658:	eddf 5a55 	vldr	s11, [pc, #340]	; 80067b0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800665c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006660:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006664:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006668:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800666c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006670:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006674:	e043      	b.n	80066fe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	ee07 3a90 	vmov	s15, r3
 800667c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006680:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80067bc <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8006684:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006688:	4b47      	ldr	r3, [pc, #284]	; (80067a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800668a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800668c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006690:	ee07 3a90 	vmov	s15, r3
 8006694:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006698:	ed97 6a03 	vldr	s12, [r7, #12]
 800669c:	eddf 5a44 	vldr	s11, [pc, #272]	; 80067b0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80066a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80066ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066b4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80066b8:	e021      	b.n	80066fe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	ee07 3a90 	vmov	s15, r3
 80066c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066c4:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80067b4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80066c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066cc:	4b36      	ldr	r3, [pc, #216]	; (80067a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80066ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066d4:	ee07 3a90 	vmov	s15, r3
 80066d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066dc:	ed97 6a03 	vldr	s12, [r7, #12]
 80066e0:	eddf 5a33 	vldr	s11, [pc, #204]	; 80067b0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80066e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80066f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066f8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80066fc:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 80066fe:	4b2a      	ldr	r3, [pc, #168]	; (80067a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006702:	0a5b      	lsrs	r3, r3, #9
 8006704:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006708:	ee07 3a90 	vmov	s15, r3
 800670c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006710:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006714:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006718:	edd7 6a07 	vldr	s13, [r7, #28]
 800671c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006720:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006724:	ee17 2a90 	vmov	r2, s15
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800672c:	4b1e      	ldr	r3, [pc, #120]	; (80067a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800672e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006730:	0c1b      	lsrs	r3, r3, #16
 8006732:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006736:	ee07 3a90 	vmov	s15, r3
 800673a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800673e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006742:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006746:	edd7 6a07 	vldr	s13, [r7, #28]
 800674a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800674e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006752:	ee17 2a90 	vmov	r2, s15
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800675a:	4b13      	ldr	r3, [pc, #76]	; (80067a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800675c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800675e:	0e1b      	lsrs	r3, r3, #24
 8006760:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006764:	ee07 3a90 	vmov	s15, r3
 8006768:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800676c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006770:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006774:	edd7 6a07 	vldr	s13, [r7, #28]
 8006778:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800677c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006780:	ee17 2a90 	vmov	r2, s15
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006788:	e008      	b.n	800679c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2200      	movs	r2, #0
 800678e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2200      	movs	r2, #0
 8006794:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2200      	movs	r2, #0
 800679a:	609a      	str	r2, [r3, #8]
}
 800679c:	bf00      	nop
 800679e:	3724      	adds	r7, #36	; 0x24
 80067a0:	46bd      	mov	sp, r7
 80067a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a6:	4770      	bx	lr
 80067a8:	58024400 	.word	0x58024400
 80067ac:	03d09000 	.word	0x03d09000
 80067b0:	46000000 	.word	0x46000000
 80067b4:	4c742400 	.word	0x4c742400
 80067b8:	4a742400 	.word	0x4a742400
 80067bc:	4bb71b00 	.word	0x4bb71b00

080067c0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b084      	sub	sp, #16
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
 80067c8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80067ca:	2300      	movs	r3, #0
 80067cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80067ce:	4b53      	ldr	r3, [pc, #332]	; (800691c <RCCEx_PLL2_Config+0x15c>)
 80067d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067d2:	f003 0303 	and.w	r3, r3, #3
 80067d6:	2b03      	cmp	r3, #3
 80067d8:	d101      	bne.n	80067de <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80067da:	2301      	movs	r3, #1
 80067dc:	e099      	b.n	8006912 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80067de:	4b4f      	ldr	r3, [pc, #316]	; (800691c <RCCEx_PLL2_Config+0x15c>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a4e      	ldr	r2, [pc, #312]	; (800691c <RCCEx_PLL2_Config+0x15c>)
 80067e4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80067e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067ea:	f7fb f99f 	bl	8001b2c <HAL_GetTick>
 80067ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80067f0:	e008      	b.n	8006804 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80067f2:	f7fb f99b 	bl	8001b2c <HAL_GetTick>
 80067f6:	4602      	mov	r2, r0
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	1ad3      	subs	r3, r2, r3
 80067fc:	2b02      	cmp	r3, #2
 80067fe:	d901      	bls.n	8006804 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006800:	2303      	movs	r3, #3
 8006802:	e086      	b.n	8006912 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006804:	4b45      	ldr	r3, [pc, #276]	; (800691c <RCCEx_PLL2_Config+0x15c>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800680c:	2b00      	cmp	r3, #0
 800680e:	d1f0      	bne.n	80067f2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006810:	4b42      	ldr	r3, [pc, #264]	; (800691c <RCCEx_PLL2_Config+0x15c>)
 8006812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006814:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	031b      	lsls	r3, r3, #12
 800681e:	493f      	ldr	r1, [pc, #252]	; (800691c <RCCEx_PLL2_Config+0x15c>)
 8006820:	4313      	orrs	r3, r2
 8006822:	628b      	str	r3, [r1, #40]	; 0x28
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	685b      	ldr	r3, [r3, #4]
 8006828:	3b01      	subs	r3, #1
 800682a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	689b      	ldr	r3, [r3, #8]
 8006832:	3b01      	subs	r3, #1
 8006834:	025b      	lsls	r3, r3, #9
 8006836:	b29b      	uxth	r3, r3
 8006838:	431a      	orrs	r2, r3
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	68db      	ldr	r3, [r3, #12]
 800683e:	3b01      	subs	r3, #1
 8006840:	041b      	lsls	r3, r3, #16
 8006842:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006846:	431a      	orrs	r2, r3
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	691b      	ldr	r3, [r3, #16]
 800684c:	3b01      	subs	r3, #1
 800684e:	061b      	lsls	r3, r3, #24
 8006850:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006854:	4931      	ldr	r1, [pc, #196]	; (800691c <RCCEx_PLL2_Config+0x15c>)
 8006856:	4313      	orrs	r3, r2
 8006858:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800685a:	4b30      	ldr	r3, [pc, #192]	; (800691c <RCCEx_PLL2_Config+0x15c>)
 800685c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800685e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	695b      	ldr	r3, [r3, #20]
 8006866:	492d      	ldr	r1, [pc, #180]	; (800691c <RCCEx_PLL2_Config+0x15c>)
 8006868:	4313      	orrs	r3, r2
 800686a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800686c:	4b2b      	ldr	r3, [pc, #172]	; (800691c <RCCEx_PLL2_Config+0x15c>)
 800686e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006870:	f023 0220 	bic.w	r2, r3, #32
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	699b      	ldr	r3, [r3, #24]
 8006878:	4928      	ldr	r1, [pc, #160]	; (800691c <RCCEx_PLL2_Config+0x15c>)
 800687a:	4313      	orrs	r3, r2
 800687c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800687e:	4b27      	ldr	r3, [pc, #156]	; (800691c <RCCEx_PLL2_Config+0x15c>)
 8006880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006882:	4a26      	ldr	r2, [pc, #152]	; (800691c <RCCEx_PLL2_Config+0x15c>)
 8006884:	f023 0310 	bic.w	r3, r3, #16
 8006888:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800688a:	4b24      	ldr	r3, [pc, #144]	; (800691c <RCCEx_PLL2_Config+0x15c>)
 800688c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800688e:	4b24      	ldr	r3, [pc, #144]	; (8006920 <RCCEx_PLL2_Config+0x160>)
 8006890:	4013      	ands	r3, r2
 8006892:	687a      	ldr	r2, [r7, #4]
 8006894:	69d2      	ldr	r2, [r2, #28]
 8006896:	00d2      	lsls	r2, r2, #3
 8006898:	4920      	ldr	r1, [pc, #128]	; (800691c <RCCEx_PLL2_Config+0x15c>)
 800689a:	4313      	orrs	r3, r2
 800689c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800689e:	4b1f      	ldr	r3, [pc, #124]	; (800691c <RCCEx_PLL2_Config+0x15c>)
 80068a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068a2:	4a1e      	ldr	r2, [pc, #120]	; (800691c <RCCEx_PLL2_Config+0x15c>)
 80068a4:	f043 0310 	orr.w	r3, r3, #16
 80068a8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d106      	bne.n	80068be <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80068b0:	4b1a      	ldr	r3, [pc, #104]	; (800691c <RCCEx_PLL2_Config+0x15c>)
 80068b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068b4:	4a19      	ldr	r2, [pc, #100]	; (800691c <RCCEx_PLL2_Config+0x15c>)
 80068b6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80068ba:	62d3      	str	r3, [r2, #44]	; 0x2c
 80068bc:	e00f      	b.n	80068de <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	2b01      	cmp	r3, #1
 80068c2:	d106      	bne.n	80068d2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80068c4:	4b15      	ldr	r3, [pc, #84]	; (800691c <RCCEx_PLL2_Config+0x15c>)
 80068c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068c8:	4a14      	ldr	r2, [pc, #80]	; (800691c <RCCEx_PLL2_Config+0x15c>)
 80068ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80068ce:	62d3      	str	r3, [r2, #44]	; 0x2c
 80068d0:	e005      	b.n	80068de <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80068d2:	4b12      	ldr	r3, [pc, #72]	; (800691c <RCCEx_PLL2_Config+0x15c>)
 80068d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068d6:	4a11      	ldr	r2, [pc, #68]	; (800691c <RCCEx_PLL2_Config+0x15c>)
 80068d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80068dc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80068de:	4b0f      	ldr	r3, [pc, #60]	; (800691c <RCCEx_PLL2_Config+0x15c>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4a0e      	ldr	r2, [pc, #56]	; (800691c <RCCEx_PLL2_Config+0x15c>)
 80068e4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80068e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80068ea:	f7fb f91f 	bl	8001b2c <HAL_GetTick>
 80068ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80068f0:	e008      	b.n	8006904 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80068f2:	f7fb f91b 	bl	8001b2c <HAL_GetTick>
 80068f6:	4602      	mov	r2, r0
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	1ad3      	subs	r3, r2, r3
 80068fc:	2b02      	cmp	r3, #2
 80068fe:	d901      	bls.n	8006904 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006900:	2303      	movs	r3, #3
 8006902:	e006      	b.n	8006912 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006904:	4b05      	ldr	r3, [pc, #20]	; (800691c <RCCEx_PLL2_Config+0x15c>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800690c:	2b00      	cmp	r3, #0
 800690e:	d0f0      	beq.n	80068f2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006910:	7bfb      	ldrb	r3, [r7, #15]
}
 8006912:	4618      	mov	r0, r3
 8006914:	3710      	adds	r7, #16
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}
 800691a:	bf00      	nop
 800691c:	58024400 	.word	0x58024400
 8006920:	ffff0007 	.word	0xffff0007

08006924 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b084      	sub	sp, #16
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
 800692c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800692e:	2300      	movs	r3, #0
 8006930:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006932:	4b53      	ldr	r3, [pc, #332]	; (8006a80 <RCCEx_PLL3_Config+0x15c>)
 8006934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006936:	f003 0303 	and.w	r3, r3, #3
 800693a:	2b03      	cmp	r3, #3
 800693c:	d101      	bne.n	8006942 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800693e:	2301      	movs	r3, #1
 8006940:	e099      	b.n	8006a76 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006942:	4b4f      	ldr	r3, [pc, #316]	; (8006a80 <RCCEx_PLL3_Config+0x15c>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a4e      	ldr	r2, [pc, #312]	; (8006a80 <RCCEx_PLL3_Config+0x15c>)
 8006948:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800694c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800694e:	f7fb f8ed 	bl	8001b2c <HAL_GetTick>
 8006952:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006954:	e008      	b.n	8006968 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006956:	f7fb f8e9 	bl	8001b2c <HAL_GetTick>
 800695a:	4602      	mov	r2, r0
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	1ad3      	subs	r3, r2, r3
 8006960:	2b02      	cmp	r3, #2
 8006962:	d901      	bls.n	8006968 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006964:	2303      	movs	r3, #3
 8006966:	e086      	b.n	8006a76 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006968:	4b45      	ldr	r3, [pc, #276]	; (8006a80 <RCCEx_PLL3_Config+0x15c>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006970:	2b00      	cmp	r3, #0
 8006972:	d1f0      	bne.n	8006956 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006974:	4b42      	ldr	r3, [pc, #264]	; (8006a80 <RCCEx_PLL3_Config+0x15c>)
 8006976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006978:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	051b      	lsls	r3, r3, #20
 8006982:	493f      	ldr	r1, [pc, #252]	; (8006a80 <RCCEx_PLL3_Config+0x15c>)
 8006984:	4313      	orrs	r3, r2
 8006986:	628b      	str	r3, [r1, #40]	; 0x28
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	3b01      	subs	r3, #1
 800698e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	689b      	ldr	r3, [r3, #8]
 8006996:	3b01      	subs	r3, #1
 8006998:	025b      	lsls	r3, r3, #9
 800699a:	b29b      	uxth	r3, r3
 800699c:	431a      	orrs	r2, r3
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	68db      	ldr	r3, [r3, #12]
 80069a2:	3b01      	subs	r3, #1
 80069a4:	041b      	lsls	r3, r3, #16
 80069a6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80069aa:	431a      	orrs	r2, r3
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	691b      	ldr	r3, [r3, #16]
 80069b0:	3b01      	subs	r3, #1
 80069b2:	061b      	lsls	r3, r3, #24
 80069b4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80069b8:	4931      	ldr	r1, [pc, #196]	; (8006a80 <RCCEx_PLL3_Config+0x15c>)
 80069ba:	4313      	orrs	r3, r2
 80069bc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80069be:	4b30      	ldr	r3, [pc, #192]	; (8006a80 <RCCEx_PLL3_Config+0x15c>)
 80069c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069c2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	695b      	ldr	r3, [r3, #20]
 80069ca:	492d      	ldr	r1, [pc, #180]	; (8006a80 <RCCEx_PLL3_Config+0x15c>)
 80069cc:	4313      	orrs	r3, r2
 80069ce:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80069d0:	4b2b      	ldr	r3, [pc, #172]	; (8006a80 <RCCEx_PLL3_Config+0x15c>)
 80069d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069d4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	699b      	ldr	r3, [r3, #24]
 80069dc:	4928      	ldr	r1, [pc, #160]	; (8006a80 <RCCEx_PLL3_Config+0x15c>)
 80069de:	4313      	orrs	r3, r2
 80069e0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80069e2:	4b27      	ldr	r3, [pc, #156]	; (8006a80 <RCCEx_PLL3_Config+0x15c>)
 80069e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069e6:	4a26      	ldr	r2, [pc, #152]	; (8006a80 <RCCEx_PLL3_Config+0x15c>)
 80069e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80069ec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80069ee:	4b24      	ldr	r3, [pc, #144]	; (8006a80 <RCCEx_PLL3_Config+0x15c>)
 80069f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80069f2:	4b24      	ldr	r3, [pc, #144]	; (8006a84 <RCCEx_PLL3_Config+0x160>)
 80069f4:	4013      	ands	r3, r2
 80069f6:	687a      	ldr	r2, [r7, #4]
 80069f8:	69d2      	ldr	r2, [r2, #28]
 80069fa:	00d2      	lsls	r2, r2, #3
 80069fc:	4920      	ldr	r1, [pc, #128]	; (8006a80 <RCCEx_PLL3_Config+0x15c>)
 80069fe:	4313      	orrs	r3, r2
 8006a00:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006a02:	4b1f      	ldr	r3, [pc, #124]	; (8006a80 <RCCEx_PLL3_Config+0x15c>)
 8006a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a06:	4a1e      	ldr	r2, [pc, #120]	; (8006a80 <RCCEx_PLL3_Config+0x15c>)
 8006a08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a0c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d106      	bne.n	8006a22 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006a14:	4b1a      	ldr	r3, [pc, #104]	; (8006a80 <RCCEx_PLL3_Config+0x15c>)
 8006a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a18:	4a19      	ldr	r2, [pc, #100]	; (8006a80 <RCCEx_PLL3_Config+0x15c>)
 8006a1a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006a1e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006a20:	e00f      	b.n	8006a42 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	2b01      	cmp	r3, #1
 8006a26:	d106      	bne.n	8006a36 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006a28:	4b15      	ldr	r3, [pc, #84]	; (8006a80 <RCCEx_PLL3_Config+0x15c>)
 8006a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a2c:	4a14      	ldr	r2, [pc, #80]	; (8006a80 <RCCEx_PLL3_Config+0x15c>)
 8006a2e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006a32:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006a34:	e005      	b.n	8006a42 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006a36:	4b12      	ldr	r3, [pc, #72]	; (8006a80 <RCCEx_PLL3_Config+0x15c>)
 8006a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a3a:	4a11      	ldr	r2, [pc, #68]	; (8006a80 <RCCEx_PLL3_Config+0x15c>)
 8006a3c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006a40:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006a42:	4b0f      	ldr	r3, [pc, #60]	; (8006a80 <RCCEx_PLL3_Config+0x15c>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a0e      	ldr	r2, [pc, #56]	; (8006a80 <RCCEx_PLL3_Config+0x15c>)
 8006a48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a4e:	f7fb f86d 	bl	8001b2c <HAL_GetTick>
 8006a52:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006a54:	e008      	b.n	8006a68 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006a56:	f7fb f869 	bl	8001b2c <HAL_GetTick>
 8006a5a:	4602      	mov	r2, r0
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	1ad3      	subs	r3, r2, r3
 8006a60:	2b02      	cmp	r3, #2
 8006a62:	d901      	bls.n	8006a68 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006a64:	2303      	movs	r3, #3
 8006a66:	e006      	b.n	8006a76 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006a68:	4b05      	ldr	r3, [pc, #20]	; (8006a80 <RCCEx_PLL3_Config+0x15c>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d0f0      	beq.n	8006a56 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	3710      	adds	r7, #16
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}
 8006a7e:	bf00      	nop
 8006a80:	58024400 	.word	0x58024400
 8006a84:	ffff0007 	.word	0xffff0007

08006a88 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b084      	sub	sp, #16
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006a90:	2301      	movs	r3, #1
 8006a92:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d06a      	beq.n	8006b70 <HAL_RTC_Init+0xe8>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006aa0:	b2db      	uxtb	r3, r3
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d106      	bne.n	8006ab4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f7fa fd3c 	bl	800152c <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2202      	movs	r2, #2
 8006ab8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	22ca      	movs	r2, #202	; 0xca
 8006ac2:	625a      	str	r2, [r3, #36]	; 0x24
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	2253      	movs	r2, #83	; 0x53
 8006aca:	625a      	str	r2, [r3, #36]	; 0x24

   /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f000 f87d 	bl	8006bcc <RTC_EnterInitMode>
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 8006ad6:	7bfb      	ldrb	r3, [r7, #15]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d13e      	bne.n	8006b5a <HAL_RTC_Init+0xd2>
    {
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	6999      	ldr	r1, [r3, #24]
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681a      	ldr	r2, [r3, #0]
 8006ae6:	4b25      	ldr	r3, [pc, #148]	; (8006b7c <HAL_RTC_Init+0xf4>)
 8006ae8:	400b      	ands	r3, r1
 8006aea:	6193      	str	r3, [r2, #24]
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	6999      	ldr	r1, [r3, #24]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	685a      	ldr	r2, [r3, #4]
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	691b      	ldr	r3, [r3, #16]
 8006afa:	431a      	orrs	r2, r3
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	699b      	ldr	r3, [r3, #24]
 8006b00:	431a      	orrs	r2, r3
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	430a      	orrs	r2, r1
 8006b08:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	689b      	ldr	r3, [r3, #8]
 8006b0e:	0419      	lsls	r1, r3, #16
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	68da      	ldr	r2, [r3, #12]
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	430a      	orrs	r2, r1
 8006b1a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f000 f88b 	bl	8006c38 <RTC_ExitInitMode>
 8006b22:	4603      	mov	r3, r0
 8006b24:	73fb      	strb	r3, [r7, #15]

      if(status == HAL_OK)
 8006b26:	7bfb      	ldrb	r3, [r7, #15]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d116      	bne.n	8006b5a <HAL_RTC_Init+0xd2>
      {
#if defined(RTC_CR_TAMPALRM_PU) && defined(RTC_CR_TAMPALRM_TYPE) && defined(RTC_CR_OUT2EN)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	699a      	ldr	r2, [r3, #24]
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 8006b3a:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	6999      	ldr	r1, [r3, #24]
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6a1a      	ldr	r2, [r3, #32]
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	69db      	ldr	r3, [r3, #28]
 8006b4a:	431a      	orrs	r2, r3
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	695b      	ldr	r3, [r3, #20]
 8006b50:	431a      	orrs	r2, r3
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	430a      	orrs	r2, r1
 8006b58:	619a      	str	r2, [r3, #24]
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */
      }
    }
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	22ff      	movs	r2, #255	; 0xff
 8006b60:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8006b62:	7bfb      	ldrb	r3, [r7, #15]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d103      	bne.n	8006b70 <HAL_RTC_Init+0xe8>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2201      	movs	r2, #1
 8006b6c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  /* return status */
  return status;
 8006b70:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	3710      	adds	r7, #16
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}
 8006b7a:	bf00      	nop
 8006b7c:	fb8fffbf 	.word	0xfb8fffbf

08006b80 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b084      	sub	sp, #16
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	68da      	ldr	r2, [r3, #12]
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006b96:	60da      	str	r2, [r3, #12]
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 8006b98:	f7fa ffc8 	bl	8001b2c <HAL_GetTick>
 8006b9c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8006b9e:	e009      	b.n	8006bb4 <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006ba0:	f7fa ffc4 	bl	8001b2c <HAL_GetTick>
 8006ba4:	4602      	mov	r2, r0
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	1ad3      	subs	r3, r2, r3
 8006baa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006bae:	d901      	bls.n	8006bb4 <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 8006bb0:	2303      	movs	r3, #3
 8006bb2:	e007      	b.n	8006bc4 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	68db      	ldr	r3, [r3, #12]
 8006bba:	f003 0320 	and.w	r3, r3, #32
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d0ee      	beq.n	8006ba0 <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 8006bc2:	2300      	movs	r3, #0
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	3710      	adds	r7, #16
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd80      	pop	{r7, pc}

08006bcc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b084      	sub	sp, #16
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	73fb      	strb	r3, [r7, #15]
  /* Check if the Initialization mode is set */
#if defined(RTC_ICSR_INITF)
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	68db      	ldr	r3, [r3, #12]
 8006bde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d123      	bne.n	8006c2e <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	68da      	ldr	r2, [r3, #12]
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006bf4:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006bf6:	f7fa ff99 	bl	8001b2c <HAL_GetTick>
 8006bfa:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006bfc:	e00d      	b.n	8006c1a <RTC_EnterInitMode+0x4e>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006bfe:	f7fa ff95 	bl	8001b2c <HAL_GetTick>
 8006c02:	4602      	mov	r2, r0
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	1ad3      	subs	r3, r2, r3
 8006c08:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006c0c:	d905      	bls.n	8006c1a <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 8006c0e:	2303      	movs	r3, #3
 8006c10:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2203      	movs	r2, #3
 8006c16:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	68db      	ldr	r3, [r3, #12]
 8006c20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d102      	bne.n	8006c2e <RTC_EnterInitMode+0x62>
 8006c28:	7bfb      	ldrb	r3, [r7, #15]
 8006c2a:	2b03      	cmp	r3, #3
 8006c2c:	d1e7      	bne.n	8006bfe <RTC_EnterInitMode+0x32>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return status;
 8006c2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	3710      	adds	r7, #16
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}

08006c38 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b084      	sub	sp, #16
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c40:	2300      	movs	r3, #0
 8006c42:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
#if defined(RTC_ICSR_INITF)

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006c44:	4b1a      	ldr	r3, [pc, #104]	; (8006cb0 <RTC_ExitInitMode+0x78>)
 8006c46:	68db      	ldr	r3, [r3, #12]
 8006c48:	4a19      	ldr	r2, [pc, #100]	; (8006cb0 <RTC_ExitInitMode+0x78>)
 8006c4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c4e:	60d3      	str	r3, [r2, #12]
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);

#endif /* RTC_ISR_INITF */
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8006c50:	4b17      	ldr	r3, [pc, #92]	; (8006cb0 <RTC_ExitInitMode+0x78>)
 8006c52:	699b      	ldr	r3, [r3, #24]
 8006c54:	f003 0320 	and.w	r3, r3, #32
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d10c      	bne.n	8006c76 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f7ff ff8f 	bl	8006b80 <HAL_RTC_WaitForSynchro>
 8006c62:	4603      	mov	r3, r0
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d01e      	beq.n	8006ca6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2203      	movs	r2, #3
 8006c6c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8006c70:	2303      	movs	r3, #3
 8006c72:	73fb      	strb	r3, [r7, #15]
 8006c74:	e017      	b.n	8006ca6 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006c76:	4b0e      	ldr	r3, [pc, #56]	; (8006cb0 <RTC_ExitInitMode+0x78>)
 8006c78:	699b      	ldr	r3, [r3, #24]
 8006c7a:	4a0d      	ldr	r2, [pc, #52]	; (8006cb0 <RTC_ExitInitMode+0x78>)
 8006c7c:	f023 0320 	bic.w	r3, r3, #32
 8006c80:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f7ff ff7c 	bl	8006b80 <HAL_RTC_WaitForSynchro>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d005      	beq.n	8006c9a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2203      	movs	r2, #3
 8006c92:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8006c96:	2303      	movs	r3, #3
 8006c98:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006c9a:	4b05      	ldr	r3, [pc, #20]	; (8006cb0 <RTC_ExitInitMode+0x78>)
 8006c9c:	699b      	ldr	r3, [r3, #24]
 8006c9e:	4a04      	ldr	r2, [pc, #16]	; (8006cb0 <RTC_ExitInitMode+0x78>)
 8006ca0:	f043 0320 	orr.w	r3, r3, #32
 8006ca4:	6193      	str	r3, [r2, #24]
  }

  return status;
 8006ca6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	3710      	adds	r7, #16
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bd80      	pop	{r7, pc}
 8006cb0:	58004000 	.word	0x58004000

08006cb4 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b082      	sub	sp, #8
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
 8006cbc:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d101      	bne.n	8006cc8 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	e02b      	b.n	8006d20 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006cce:	b2db      	uxtb	r3, r3
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d106      	bne.n	8006ce2 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f7fa fdc9 	bl	8001874 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2202      	movs	r2, #2
 8006ce6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681a      	ldr	r2, [r3, #0]
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	3304      	adds	r3, #4
 8006cf2:	4619      	mov	r1, r3
 8006cf4:	4610      	mov	r0, r2
 8006cf6:	f001 faaf 	bl	8008258 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6818      	ldr	r0, [r3, #0]
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	685b      	ldr	r3, [r3, #4]
 8006d02:	461a      	mov	r2, r3
 8006d04:	6839      	ldr	r1, [r7, #0]
 8006d06:	f001 fb03 	bl	8008310 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8006d0a:	4b07      	ldr	r3, [pc, #28]	; (8006d28 <HAL_SDRAM_Init+0x74>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4a06      	ldr	r2, [pc, #24]	; (8006d28 <HAL_SDRAM_Init+0x74>)
 8006d10:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006d14:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2201      	movs	r2, #1
 8006d1a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006d1e:	2300      	movs	r3, #0
}
 8006d20:	4618      	mov	r0, r3
 8006d22:	3708      	adds	r7, #8
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}
 8006d28:	52004000 	.word	0x52004000

08006d2c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b084      	sub	sp, #16
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d101      	bne.n	8006d3e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	e0f1      	b.n	8006f22 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2200      	movs	r2, #0
 8006d42:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4a78      	ldr	r2, [pc, #480]	; (8006f2c <HAL_SPI_Init+0x200>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d00f      	beq.n	8006d6e <HAL_SPI_Init+0x42>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4a77      	ldr	r2, [pc, #476]	; (8006f30 <HAL_SPI_Init+0x204>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d00a      	beq.n	8006d6e <HAL_SPI_Init+0x42>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	4a75      	ldr	r2, [pc, #468]	; (8006f34 <HAL_SPI_Init+0x208>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d005      	beq.n	8006d6e <HAL_SPI_Init+0x42>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	68db      	ldr	r3, [r3, #12]
 8006d66:	2b0f      	cmp	r3, #15
 8006d68:	d901      	bls.n	8006d6e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	e0d9      	b.n	8006f22 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f000 f8e2 	bl	8006f38 <SPI_GetPacketSize>
 8006d74:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4a6c      	ldr	r2, [pc, #432]	; (8006f2c <HAL_SPI_Init+0x200>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d00c      	beq.n	8006d9a <HAL_SPI_Init+0x6e>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4a6a      	ldr	r2, [pc, #424]	; (8006f30 <HAL_SPI_Init+0x204>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d007      	beq.n	8006d9a <HAL_SPI_Init+0x6e>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4a69      	ldr	r2, [pc, #420]	; (8006f34 <HAL_SPI_Init+0x208>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d002      	beq.n	8006d9a <HAL_SPI_Init+0x6e>
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	2b08      	cmp	r3, #8
 8006d98:	d811      	bhi.n	8006dbe <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006d9e:	4a63      	ldr	r2, [pc, #396]	; (8006f2c <HAL_SPI_Init+0x200>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d009      	beq.n	8006db8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4a61      	ldr	r2, [pc, #388]	; (8006f30 <HAL_SPI_Init+0x204>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d004      	beq.n	8006db8 <HAL_SPI_Init+0x8c>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	4a60      	ldr	r2, [pc, #384]	; (8006f34 <HAL_SPI_Init+0x208>)
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d104      	bne.n	8006dc2 <HAL_SPI_Init+0x96>
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	2b10      	cmp	r3, #16
 8006dbc:	d901      	bls.n	8006dc2 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	e0af      	b.n	8006f22 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006dc8:	b2db      	uxtb	r3, r3
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d106      	bne.n	8006ddc <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f7fa fbd8 	bl	800158c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2202      	movs	r2, #2
 8006de0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	681a      	ldr	r2, [r3, #0]
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f022 0201 	bic.w	r2, r2, #1
 8006df2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	689b      	ldr	r3, [r3, #8]
 8006dfa:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8006dfe:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	699b      	ldr	r3, [r3, #24]
 8006e04:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006e08:	d119      	bne.n	8006e3e <HAL_SPI_Init+0x112>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	685b      	ldr	r3, [r3, #4]
 8006e0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006e12:	d103      	bne.n	8006e1c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d008      	beq.n	8006e2e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d10c      	bne.n	8006e3e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006e28:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006e2c:	d107      	bne.n	8006e3e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	681a      	ldr	r2, [r3, #0]
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006e3c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	69da      	ldr	r2, [r3, #28]
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e46:	431a      	orrs	r2, r3
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	431a      	orrs	r2, r3
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e50:	ea42 0103 	orr.w	r1, r2, r3
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	68da      	ldr	r2, [r3, #12]
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	430a      	orrs	r2, r1
 8006e5e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e68:	431a      	orrs	r2, r3
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e6e:	431a      	orrs	r2, r3
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	699b      	ldr	r3, [r3, #24]
 8006e74:	431a      	orrs	r2, r3
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	691b      	ldr	r3, [r3, #16]
 8006e7a:	431a      	orrs	r2, r3
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	695b      	ldr	r3, [r3, #20]
 8006e80:	431a      	orrs	r2, r3
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6a1b      	ldr	r3, [r3, #32]
 8006e86:	431a      	orrs	r2, r3
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	685b      	ldr	r3, [r3, #4]
 8006e8c:	431a      	orrs	r2, r3
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e92:	431a      	orrs	r2, r3
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	689b      	ldr	r3, [r3, #8]
 8006e98:	431a      	orrs	r2, r3
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e9e:	ea42 0103 	orr.w	r1, r2, r3
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	430a      	orrs	r2, r1
 8006eac:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	685b      	ldr	r3, [r3, #4]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d113      	bne.n	8006ede <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	689b      	ldr	r3, [r3, #8]
 8006ebc:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ec8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	689b      	ldr	r3, [r3, #8]
 8006ed0:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006edc:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f022 0201 	bic.w	r2, r2, #1
 8006eec:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	685b      	ldr	r3, [r3, #4]
 8006ef2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d00a      	beq.n	8006f10 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	68db      	ldr	r3, [r3, #12]
 8006f00:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	430a      	orrs	r2, r1
 8006f0e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2200      	movs	r2, #0
 8006f14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2201      	movs	r2, #1
 8006f1c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8006f20:	2300      	movs	r3, #0
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	3710      	adds	r7, #16
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bd80      	pop	{r7, pc}
 8006f2a:	bf00      	nop
 8006f2c:	40013000 	.word	0x40013000
 8006f30:	40003800 	.word	0x40003800
 8006f34:	40003c00 	.word	0x40003c00

08006f38 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b085      	sub	sp, #20
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f44:	095b      	lsrs	r3, r3, #5
 8006f46:	3301      	adds	r3, #1
 8006f48:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	68db      	ldr	r3, [r3, #12]
 8006f4e:	3301      	adds	r3, #1
 8006f50:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	3307      	adds	r3, #7
 8006f56:	08db      	lsrs	r3, r3, #3
 8006f58:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	68fa      	ldr	r2, [r7, #12]
 8006f5e:	fb02 f303 	mul.w	r3, r2, r3
}
 8006f62:	4618      	mov	r0, r3
 8006f64:	3714      	adds	r7, #20
 8006f66:	46bd      	mov	sp, r7
 8006f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6c:	4770      	bx	lr

08006f6e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f6e:	b580      	push	{r7, lr}
 8006f70:	b082      	sub	sp, #8
 8006f72:	af00      	add	r7, sp, #0
 8006f74:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d101      	bne.n	8006f80 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	e042      	b.n	8007006 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d106      	bne.n	8006f98 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f7fa fb86 	bl	80016a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2224      	movs	r2, #36	; 0x24
 8006f9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	681a      	ldr	r2, [r3, #0]
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f022 0201 	bic.w	r2, r2, #1
 8006fae:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	f000 f82d 	bl	8007010 <UART_SetConfig>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	2b01      	cmp	r3, #1
 8006fba:	d101      	bne.n	8006fc0 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	e022      	b.n	8007006 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d002      	beq.n	8006fce <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f000 fe8d 	bl	8007ce8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	685a      	ldr	r2, [r3, #4]
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006fdc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	689a      	ldr	r2, [r3, #8]
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006fec:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	681a      	ldr	r2, [r3, #0]
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f042 0201 	orr.w	r2, r2, #1
 8006ffc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f000 ff14 	bl	8007e2c <UART_CheckIdleState>
 8007004:	4603      	mov	r3, r0
}
 8007006:	4618      	mov	r0, r3
 8007008:	3708      	adds	r7, #8
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}
	...

08007010 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007010:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007014:	b092      	sub	sp, #72	; 0x48
 8007016:	af00      	add	r7, sp, #0
 8007018:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800701a:	2300      	movs	r3, #0
 800701c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007020:	697b      	ldr	r3, [r7, #20]
 8007022:	689a      	ldr	r2, [r3, #8]
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	691b      	ldr	r3, [r3, #16]
 8007028:	431a      	orrs	r2, r3
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	695b      	ldr	r3, [r3, #20]
 800702e:	431a      	orrs	r2, r3
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	69db      	ldr	r3, [r3, #28]
 8007034:	4313      	orrs	r3, r2
 8007036:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	681a      	ldr	r2, [r3, #0]
 800703e:	4bbe      	ldr	r3, [pc, #760]	; (8007338 <UART_SetConfig+0x328>)
 8007040:	4013      	ands	r3, r2
 8007042:	697a      	ldr	r2, [r7, #20]
 8007044:	6812      	ldr	r2, [r2, #0]
 8007046:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007048:	430b      	orrs	r3, r1
 800704a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	685b      	ldr	r3, [r3, #4]
 8007052:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	68da      	ldr	r2, [r3, #12]
 800705a:	697b      	ldr	r3, [r7, #20]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	430a      	orrs	r2, r1
 8007060:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	699b      	ldr	r3, [r3, #24]
 8007066:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4ab3      	ldr	r2, [pc, #716]	; (800733c <UART_SetConfig+0x32c>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d004      	beq.n	800707c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	6a1b      	ldr	r3, [r3, #32]
 8007076:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007078:	4313      	orrs	r3, r2
 800707a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	689a      	ldr	r2, [r3, #8]
 8007082:	4baf      	ldr	r3, [pc, #700]	; (8007340 <UART_SetConfig+0x330>)
 8007084:	4013      	ands	r3, r2
 8007086:	697a      	ldr	r2, [r7, #20]
 8007088:	6812      	ldr	r2, [r2, #0]
 800708a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800708c:	430b      	orrs	r3, r1
 800708e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007096:	f023 010f 	bic.w	r1, r3, #15
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800709e:	697b      	ldr	r3, [r7, #20]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	430a      	orrs	r2, r1
 80070a4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	4aa6      	ldr	r2, [pc, #664]	; (8007344 <UART_SetConfig+0x334>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d177      	bne.n	80071a0 <UART_SetConfig+0x190>
 80070b0:	4ba5      	ldr	r3, [pc, #660]	; (8007348 <UART_SetConfig+0x338>)
 80070b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070b4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80070b8:	2b28      	cmp	r3, #40	; 0x28
 80070ba:	d86d      	bhi.n	8007198 <UART_SetConfig+0x188>
 80070bc:	a201      	add	r2, pc, #4	; (adr r2, 80070c4 <UART_SetConfig+0xb4>)
 80070be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070c2:	bf00      	nop
 80070c4:	08007169 	.word	0x08007169
 80070c8:	08007199 	.word	0x08007199
 80070cc:	08007199 	.word	0x08007199
 80070d0:	08007199 	.word	0x08007199
 80070d4:	08007199 	.word	0x08007199
 80070d8:	08007199 	.word	0x08007199
 80070dc:	08007199 	.word	0x08007199
 80070e0:	08007199 	.word	0x08007199
 80070e4:	08007171 	.word	0x08007171
 80070e8:	08007199 	.word	0x08007199
 80070ec:	08007199 	.word	0x08007199
 80070f0:	08007199 	.word	0x08007199
 80070f4:	08007199 	.word	0x08007199
 80070f8:	08007199 	.word	0x08007199
 80070fc:	08007199 	.word	0x08007199
 8007100:	08007199 	.word	0x08007199
 8007104:	08007179 	.word	0x08007179
 8007108:	08007199 	.word	0x08007199
 800710c:	08007199 	.word	0x08007199
 8007110:	08007199 	.word	0x08007199
 8007114:	08007199 	.word	0x08007199
 8007118:	08007199 	.word	0x08007199
 800711c:	08007199 	.word	0x08007199
 8007120:	08007199 	.word	0x08007199
 8007124:	08007181 	.word	0x08007181
 8007128:	08007199 	.word	0x08007199
 800712c:	08007199 	.word	0x08007199
 8007130:	08007199 	.word	0x08007199
 8007134:	08007199 	.word	0x08007199
 8007138:	08007199 	.word	0x08007199
 800713c:	08007199 	.word	0x08007199
 8007140:	08007199 	.word	0x08007199
 8007144:	08007189 	.word	0x08007189
 8007148:	08007199 	.word	0x08007199
 800714c:	08007199 	.word	0x08007199
 8007150:	08007199 	.word	0x08007199
 8007154:	08007199 	.word	0x08007199
 8007158:	08007199 	.word	0x08007199
 800715c:	08007199 	.word	0x08007199
 8007160:	08007199 	.word	0x08007199
 8007164:	08007191 	.word	0x08007191
 8007168:	2301      	movs	r3, #1
 800716a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800716e:	e326      	b.n	80077be <UART_SetConfig+0x7ae>
 8007170:	2304      	movs	r3, #4
 8007172:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007176:	e322      	b.n	80077be <UART_SetConfig+0x7ae>
 8007178:	2308      	movs	r3, #8
 800717a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800717e:	e31e      	b.n	80077be <UART_SetConfig+0x7ae>
 8007180:	2310      	movs	r3, #16
 8007182:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007186:	e31a      	b.n	80077be <UART_SetConfig+0x7ae>
 8007188:	2320      	movs	r3, #32
 800718a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800718e:	e316      	b.n	80077be <UART_SetConfig+0x7ae>
 8007190:	2340      	movs	r3, #64	; 0x40
 8007192:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007196:	e312      	b.n	80077be <UART_SetConfig+0x7ae>
 8007198:	2380      	movs	r3, #128	; 0x80
 800719a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800719e:	e30e      	b.n	80077be <UART_SetConfig+0x7ae>
 80071a0:	697b      	ldr	r3, [r7, #20]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4a69      	ldr	r2, [pc, #420]	; (800734c <UART_SetConfig+0x33c>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d130      	bne.n	800720c <UART_SetConfig+0x1fc>
 80071aa:	4b67      	ldr	r3, [pc, #412]	; (8007348 <UART_SetConfig+0x338>)
 80071ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071ae:	f003 0307 	and.w	r3, r3, #7
 80071b2:	2b05      	cmp	r3, #5
 80071b4:	d826      	bhi.n	8007204 <UART_SetConfig+0x1f4>
 80071b6:	a201      	add	r2, pc, #4	; (adr r2, 80071bc <UART_SetConfig+0x1ac>)
 80071b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071bc:	080071d5 	.word	0x080071d5
 80071c0:	080071dd 	.word	0x080071dd
 80071c4:	080071e5 	.word	0x080071e5
 80071c8:	080071ed 	.word	0x080071ed
 80071cc:	080071f5 	.word	0x080071f5
 80071d0:	080071fd 	.word	0x080071fd
 80071d4:	2300      	movs	r3, #0
 80071d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071da:	e2f0      	b.n	80077be <UART_SetConfig+0x7ae>
 80071dc:	2304      	movs	r3, #4
 80071de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071e2:	e2ec      	b.n	80077be <UART_SetConfig+0x7ae>
 80071e4:	2308      	movs	r3, #8
 80071e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071ea:	e2e8      	b.n	80077be <UART_SetConfig+0x7ae>
 80071ec:	2310      	movs	r3, #16
 80071ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071f2:	e2e4      	b.n	80077be <UART_SetConfig+0x7ae>
 80071f4:	2320      	movs	r3, #32
 80071f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071fa:	e2e0      	b.n	80077be <UART_SetConfig+0x7ae>
 80071fc:	2340      	movs	r3, #64	; 0x40
 80071fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007202:	e2dc      	b.n	80077be <UART_SetConfig+0x7ae>
 8007204:	2380      	movs	r3, #128	; 0x80
 8007206:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800720a:	e2d8      	b.n	80077be <UART_SetConfig+0x7ae>
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4a4f      	ldr	r2, [pc, #316]	; (8007350 <UART_SetConfig+0x340>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d130      	bne.n	8007278 <UART_SetConfig+0x268>
 8007216:	4b4c      	ldr	r3, [pc, #304]	; (8007348 <UART_SetConfig+0x338>)
 8007218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800721a:	f003 0307 	and.w	r3, r3, #7
 800721e:	2b05      	cmp	r3, #5
 8007220:	d826      	bhi.n	8007270 <UART_SetConfig+0x260>
 8007222:	a201      	add	r2, pc, #4	; (adr r2, 8007228 <UART_SetConfig+0x218>)
 8007224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007228:	08007241 	.word	0x08007241
 800722c:	08007249 	.word	0x08007249
 8007230:	08007251 	.word	0x08007251
 8007234:	08007259 	.word	0x08007259
 8007238:	08007261 	.word	0x08007261
 800723c:	08007269 	.word	0x08007269
 8007240:	2300      	movs	r3, #0
 8007242:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007246:	e2ba      	b.n	80077be <UART_SetConfig+0x7ae>
 8007248:	2304      	movs	r3, #4
 800724a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800724e:	e2b6      	b.n	80077be <UART_SetConfig+0x7ae>
 8007250:	2308      	movs	r3, #8
 8007252:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007256:	e2b2      	b.n	80077be <UART_SetConfig+0x7ae>
 8007258:	2310      	movs	r3, #16
 800725a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800725e:	e2ae      	b.n	80077be <UART_SetConfig+0x7ae>
 8007260:	2320      	movs	r3, #32
 8007262:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007266:	e2aa      	b.n	80077be <UART_SetConfig+0x7ae>
 8007268:	2340      	movs	r3, #64	; 0x40
 800726a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800726e:	e2a6      	b.n	80077be <UART_SetConfig+0x7ae>
 8007270:	2380      	movs	r3, #128	; 0x80
 8007272:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007276:	e2a2      	b.n	80077be <UART_SetConfig+0x7ae>
 8007278:	697b      	ldr	r3, [r7, #20]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a35      	ldr	r2, [pc, #212]	; (8007354 <UART_SetConfig+0x344>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d130      	bne.n	80072e4 <UART_SetConfig+0x2d4>
 8007282:	4b31      	ldr	r3, [pc, #196]	; (8007348 <UART_SetConfig+0x338>)
 8007284:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007286:	f003 0307 	and.w	r3, r3, #7
 800728a:	2b05      	cmp	r3, #5
 800728c:	d826      	bhi.n	80072dc <UART_SetConfig+0x2cc>
 800728e:	a201      	add	r2, pc, #4	; (adr r2, 8007294 <UART_SetConfig+0x284>)
 8007290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007294:	080072ad 	.word	0x080072ad
 8007298:	080072b5 	.word	0x080072b5
 800729c:	080072bd 	.word	0x080072bd
 80072a0:	080072c5 	.word	0x080072c5
 80072a4:	080072cd 	.word	0x080072cd
 80072a8:	080072d5 	.word	0x080072d5
 80072ac:	2300      	movs	r3, #0
 80072ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072b2:	e284      	b.n	80077be <UART_SetConfig+0x7ae>
 80072b4:	2304      	movs	r3, #4
 80072b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072ba:	e280      	b.n	80077be <UART_SetConfig+0x7ae>
 80072bc:	2308      	movs	r3, #8
 80072be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072c2:	e27c      	b.n	80077be <UART_SetConfig+0x7ae>
 80072c4:	2310      	movs	r3, #16
 80072c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072ca:	e278      	b.n	80077be <UART_SetConfig+0x7ae>
 80072cc:	2320      	movs	r3, #32
 80072ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072d2:	e274      	b.n	80077be <UART_SetConfig+0x7ae>
 80072d4:	2340      	movs	r3, #64	; 0x40
 80072d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072da:	e270      	b.n	80077be <UART_SetConfig+0x7ae>
 80072dc:	2380      	movs	r3, #128	; 0x80
 80072de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072e2:	e26c      	b.n	80077be <UART_SetConfig+0x7ae>
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4a1b      	ldr	r2, [pc, #108]	; (8007358 <UART_SetConfig+0x348>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d142      	bne.n	8007374 <UART_SetConfig+0x364>
 80072ee:	4b16      	ldr	r3, [pc, #88]	; (8007348 <UART_SetConfig+0x338>)
 80072f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072f2:	f003 0307 	and.w	r3, r3, #7
 80072f6:	2b05      	cmp	r3, #5
 80072f8:	d838      	bhi.n	800736c <UART_SetConfig+0x35c>
 80072fa:	a201      	add	r2, pc, #4	; (adr r2, 8007300 <UART_SetConfig+0x2f0>)
 80072fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007300:	08007319 	.word	0x08007319
 8007304:	08007321 	.word	0x08007321
 8007308:	08007329 	.word	0x08007329
 800730c:	08007331 	.word	0x08007331
 8007310:	0800735d 	.word	0x0800735d
 8007314:	08007365 	.word	0x08007365
 8007318:	2300      	movs	r3, #0
 800731a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800731e:	e24e      	b.n	80077be <UART_SetConfig+0x7ae>
 8007320:	2304      	movs	r3, #4
 8007322:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007326:	e24a      	b.n	80077be <UART_SetConfig+0x7ae>
 8007328:	2308      	movs	r3, #8
 800732a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800732e:	e246      	b.n	80077be <UART_SetConfig+0x7ae>
 8007330:	2310      	movs	r3, #16
 8007332:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007336:	e242      	b.n	80077be <UART_SetConfig+0x7ae>
 8007338:	cfff69f3 	.word	0xcfff69f3
 800733c:	58000c00 	.word	0x58000c00
 8007340:	11fff4ff 	.word	0x11fff4ff
 8007344:	40011000 	.word	0x40011000
 8007348:	58024400 	.word	0x58024400
 800734c:	40004400 	.word	0x40004400
 8007350:	40004800 	.word	0x40004800
 8007354:	40004c00 	.word	0x40004c00
 8007358:	40005000 	.word	0x40005000
 800735c:	2320      	movs	r3, #32
 800735e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007362:	e22c      	b.n	80077be <UART_SetConfig+0x7ae>
 8007364:	2340      	movs	r3, #64	; 0x40
 8007366:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800736a:	e228      	b.n	80077be <UART_SetConfig+0x7ae>
 800736c:	2380      	movs	r3, #128	; 0x80
 800736e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007372:	e224      	b.n	80077be <UART_SetConfig+0x7ae>
 8007374:	697b      	ldr	r3, [r7, #20]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4ab1      	ldr	r2, [pc, #708]	; (8007640 <UART_SetConfig+0x630>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d176      	bne.n	800746c <UART_SetConfig+0x45c>
 800737e:	4bb1      	ldr	r3, [pc, #708]	; (8007644 <UART_SetConfig+0x634>)
 8007380:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007382:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007386:	2b28      	cmp	r3, #40	; 0x28
 8007388:	d86c      	bhi.n	8007464 <UART_SetConfig+0x454>
 800738a:	a201      	add	r2, pc, #4	; (adr r2, 8007390 <UART_SetConfig+0x380>)
 800738c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007390:	08007435 	.word	0x08007435
 8007394:	08007465 	.word	0x08007465
 8007398:	08007465 	.word	0x08007465
 800739c:	08007465 	.word	0x08007465
 80073a0:	08007465 	.word	0x08007465
 80073a4:	08007465 	.word	0x08007465
 80073a8:	08007465 	.word	0x08007465
 80073ac:	08007465 	.word	0x08007465
 80073b0:	0800743d 	.word	0x0800743d
 80073b4:	08007465 	.word	0x08007465
 80073b8:	08007465 	.word	0x08007465
 80073bc:	08007465 	.word	0x08007465
 80073c0:	08007465 	.word	0x08007465
 80073c4:	08007465 	.word	0x08007465
 80073c8:	08007465 	.word	0x08007465
 80073cc:	08007465 	.word	0x08007465
 80073d0:	08007445 	.word	0x08007445
 80073d4:	08007465 	.word	0x08007465
 80073d8:	08007465 	.word	0x08007465
 80073dc:	08007465 	.word	0x08007465
 80073e0:	08007465 	.word	0x08007465
 80073e4:	08007465 	.word	0x08007465
 80073e8:	08007465 	.word	0x08007465
 80073ec:	08007465 	.word	0x08007465
 80073f0:	0800744d 	.word	0x0800744d
 80073f4:	08007465 	.word	0x08007465
 80073f8:	08007465 	.word	0x08007465
 80073fc:	08007465 	.word	0x08007465
 8007400:	08007465 	.word	0x08007465
 8007404:	08007465 	.word	0x08007465
 8007408:	08007465 	.word	0x08007465
 800740c:	08007465 	.word	0x08007465
 8007410:	08007455 	.word	0x08007455
 8007414:	08007465 	.word	0x08007465
 8007418:	08007465 	.word	0x08007465
 800741c:	08007465 	.word	0x08007465
 8007420:	08007465 	.word	0x08007465
 8007424:	08007465 	.word	0x08007465
 8007428:	08007465 	.word	0x08007465
 800742c:	08007465 	.word	0x08007465
 8007430:	0800745d 	.word	0x0800745d
 8007434:	2301      	movs	r3, #1
 8007436:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800743a:	e1c0      	b.n	80077be <UART_SetConfig+0x7ae>
 800743c:	2304      	movs	r3, #4
 800743e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007442:	e1bc      	b.n	80077be <UART_SetConfig+0x7ae>
 8007444:	2308      	movs	r3, #8
 8007446:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800744a:	e1b8      	b.n	80077be <UART_SetConfig+0x7ae>
 800744c:	2310      	movs	r3, #16
 800744e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007452:	e1b4      	b.n	80077be <UART_SetConfig+0x7ae>
 8007454:	2320      	movs	r3, #32
 8007456:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800745a:	e1b0      	b.n	80077be <UART_SetConfig+0x7ae>
 800745c:	2340      	movs	r3, #64	; 0x40
 800745e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007462:	e1ac      	b.n	80077be <UART_SetConfig+0x7ae>
 8007464:	2380      	movs	r3, #128	; 0x80
 8007466:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800746a:	e1a8      	b.n	80077be <UART_SetConfig+0x7ae>
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4a75      	ldr	r2, [pc, #468]	; (8007648 <UART_SetConfig+0x638>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d130      	bne.n	80074d8 <UART_SetConfig+0x4c8>
 8007476:	4b73      	ldr	r3, [pc, #460]	; (8007644 <UART_SetConfig+0x634>)
 8007478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800747a:	f003 0307 	and.w	r3, r3, #7
 800747e:	2b05      	cmp	r3, #5
 8007480:	d826      	bhi.n	80074d0 <UART_SetConfig+0x4c0>
 8007482:	a201      	add	r2, pc, #4	; (adr r2, 8007488 <UART_SetConfig+0x478>)
 8007484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007488:	080074a1 	.word	0x080074a1
 800748c:	080074a9 	.word	0x080074a9
 8007490:	080074b1 	.word	0x080074b1
 8007494:	080074b9 	.word	0x080074b9
 8007498:	080074c1 	.word	0x080074c1
 800749c:	080074c9 	.word	0x080074c9
 80074a0:	2300      	movs	r3, #0
 80074a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074a6:	e18a      	b.n	80077be <UART_SetConfig+0x7ae>
 80074a8:	2304      	movs	r3, #4
 80074aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074ae:	e186      	b.n	80077be <UART_SetConfig+0x7ae>
 80074b0:	2308      	movs	r3, #8
 80074b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074b6:	e182      	b.n	80077be <UART_SetConfig+0x7ae>
 80074b8:	2310      	movs	r3, #16
 80074ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074be:	e17e      	b.n	80077be <UART_SetConfig+0x7ae>
 80074c0:	2320      	movs	r3, #32
 80074c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074c6:	e17a      	b.n	80077be <UART_SetConfig+0x7ae>
 80074c8:	2340      	movs	r3, #64	; 0x40
 80074ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074ce:	e176      	b.n	80077be <UART_SetConfig+0x7ae>
 80074d0:	2380      	movs	r3, #128	; 0x80
 80074d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074d6:	e172      	b.n	80077be <UART_SetConfig+0x7ae>
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	4a5b      	ldr	r2, [pc, #364]	; (800764c <UART_SetConfig+0x63c>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d130      	bne.n	8007544 <UART_SetConfig+0x534>
 80074e2:	4b58      	ldr	r3, [pc, #352]	; (8007644 <UART_SetConfig+0x634>)
 80074e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074e6:	f003 0307 	and.w	r3, r3, #7
 80074ea:	2b05      	cmp	r3, #5
 80074ec:	d826      	bhi.n	800753c <UART_SetConfig+0x52c>
 80074ee:	a201      	add	r2, pc, #4	; (adr r2, 80074f4 <UART_SetConfig+0x4e4>)
 80074f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074f4:	0800750d 	.word	0x0800750d
 80074f8:	08007515 	.word	0x08007515
 80074fc:	0800751d 	.word	0x0800751d
 8007500:	08007525 	.word	0x08007525
 8007504:	0800752d 	.word	0x0800752d
 8007508:	08007535 	.word	0x08007535
 800750c:	2300      	movs	r3, #0
 800750e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007512:	e154      	b.n	80077be <UART_SetConfig+0x7ae>
 8007514:	2304      	movs	r3, #4
 8007516:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800751a:	e150      	b.n	80077be <UART_SetConfig+0x7ae>
 800751c:	2308      	movs	r3, #8
 800751e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007522:	e14c      	b.n	80077be <UART_SetConfig+0x7ae>
 8007524:	2310      	movs	r3, #16
 8007526:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800752a:	e148      	b.n	80077be <UART_SetConfig+0x7ae>
 800752c:	2320      	movs	r3, #32
 800752e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007532:	e144      	b.n	80077be <UART_SetConfig+0x7ae>
 8007534:	2340      	movs	r3, #64	; 0x40
 8007536:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800753a:	e140      	b.n	80077be <UART_SetConfig+0x7ae>
 800753c:	2380      	movs	r3, #128	; 0x80
 800753e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007542:	e13c      	b.n	80077be <UART_SetConfig+0x7ae>
 8007544:	697b      	ldr	r3, [r7, #20]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	4a41      	ldr	r2, [pc, #260]	; (8007650 <UART_SetConfig+0x640>)
 800754a:	4293      	cmp	r3, r2
 800754c:	f040 8082 	bne.w	8007654 <UART_SetConfig+0x644>
 8007550:	4b3c      	ldr	r3, [pc, #240]	; (8007644 <UART_SetConfig+0x634>)
 8007552:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007554:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007558:	2b28      	cmp	r3, #40	; 0x28
 800755a:	d86d      	bhi.n	8007638 <UART_SetConfig+0x628>
 800755c:	a201      	add	r2, pc, #4	; (adr r2, 8007564 <UART_SetConfig+0x554>)
 800755e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007562:	bf00      	nop
 8007564:	08007609 	.word	0x08007609
 8007568:	08007639 	.word	0x08007639
 800756c:	08007639 	.word	0x08007639
 8007570:	08007639 	.word	0x08007639
 8007574:	08007639 	.word	0x08007639
 8007578:	08007639 	.word	0x08007639
 800757c:	08007639 	.word	0x08007639
 8007580:	08007639 	.word	0x08007639
 8007584:	08007611 	.word	0x08007611
 8007588:	08007639 	.word	0x08007639
 800758c:	08007639 	.word	0x08007639
 8007590:	08007639 	.word	0x08007639
 8007594:	08007639 	.word	0x08007639
 8007598:	08007639 	.word	0x08007639
 800759c:	08007639 	.word	0x08007639
 80075a0:	08007639 	.word	0x08007639
 80075a4:	08007619 	.word	0x08007619
 80075a8:	08007639 	.word	0x08007639
 80075ac:	08007639 	.word	0x08007639
 80075b0:	08007639 	.word	0x08007639
 80075b4:	08007639 	.word	0x08007639
 80075b8:	08007639 	.word	0x08007639
 80075bc:	08007639 	.word	0x08007639
 80075c0:	08007639 	.word	0x08007639
 80075c4:	08007621 	.word	0x08007621
 80075c8:	08007639 	.word	0x08007639
 80075cc:	08007639 	.word	0x08007639
 80075d0:	08007639 	.word	0x08007639
 80075d4:	08007639 	.word	0x08007639
 80075d8:	08007639 	.word	0x08007639
 80075dc:	08007639 	.word	0x08007639
 80075e0:	08007639 	.word	0x08007639
 80075e4:	08007629 	.word	0x08007629
 80075e8:	08007639 	.word	0x08007639
 80075ec:	08007639 	.word	0x08007639
 80075f0:	08007639 	.word	0x08007639
 80075f4:	08007639 	.word	0x08007639
 80075f8:	08007639 	.word	0x08007639
 80075fc:	08007639 	.word	0x08007639
 8007600:	08007639 	.word	0x08007639
 8007604:	08007631 	.word	0x08007631
 8007608:	2301      	movs	r3, #1
 800760a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800760e:	e0d6      	b.n	80077be <UART_SetConfig+0x7ae>
 8007610:	2304      	movs	r3, #4
 8007612:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007616:	e0d2      	b.n	80077be <UART_SetConfig+0x7ae>
 8007618:	2308      	movs	r3, #8
 800761a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800761e:	e0ce      	b.n	80077be <UART_SetConfig+0x7ae>
 8007620:	2310      	movs	r3, #16
 8007622:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007626:	e0ca      	b.n	80077be <UART_SetConfig+0x7ae>
 8007628:	2320      	movs	r3, #32
 800762a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800762e:	e0c6      	b.n	80077be <UART_SetConfig+0x7ae>
 8007630:	2340      	movs	r3, #64	; 0x40
 8007632:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007636:	e0c2      	b.n	80077be <UART_SetConfig+0x7ae>
 8007638:	2380      	movs	r3, #128	; 0x80
 800763a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800763e:	e0be      	b.n	80077be <UART_SetConfig+0x7ae>
 8007640:	40011400 	.word	0x40011400
 8007644:	58024400 	.word	0x58024400
 8007648:	40007800 	.word	0x40007800
 800764c:	40007c00 	.word	0x40007c00
 8007650:	40011800 	.word	0x40011800
 8007654:	697b      	ldr	r3, [r7, #20]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4aad      	ldr	r2, [pc, #692]	; (8007910 <UART_SetConfig+0x900>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d176      	bne.n	800774c <UART_SetConfig+0x73c>
 800765e:	4bad      	ldr	r3, [pc, #692]	; (8007914 <UART_SetConfig+0x904>)
 8007660:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007662:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007666:	2b28      	cmp	r3, #40	; 0x28
 8007668:	d86c      	bhi.n	8007744 <UART_SetConfig+0x734>
 800766a:	a201      	add	r2, pc, #4	; (adr r2, 8007670 <UART_SetConfig+0x660>)
 800766c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007670:	08007715 	.word	0x08007715
 8007674:	08007745 	.word	0x08007745
 8007678:	08007745 	.word	0x08007745
 800767c:	08007745 	.word	0x08007745
 8007680:	08007745 	.word	0x08007745
 8007684:	08007745 	.word	0x08007745
 8007688:	08007745 	.word	0x08007745
 800768c:	08007745 	.word	0x08007745
 8007690:	0800771d 	.word	0x0800771d
 8007694:	08007745 	.word	0x08007745
 8007698:	08007745 	.word	0x08007745
 800769c:	08007745 	.word	0x08007745
 80076a0:	08007745 	.word	0x08007745
 80076a4:	08007745 	.word	0x08007745
 80076a8:	08007745 	.word	0x08007745
 80076ac:	08007745 	.word	0x08007745
 80076b0:	08007725 	.word	0x08007725
 80076b4:	08007745 	.word	0x08007745
 80076b8:	08007745 	.word	0x08007745
 80076bc:	08007745 	.word	0x08007745
 80076c0:	08007745 	.word	0x08007745
 80076c4:	08007745 	.word	0x08007745
 80076c8:	08007745 	.word	0x08007745
 80076cc:	08007745 	.word	0x08007745
 80076d0:	0800772d 	.word	0x0800772d
 80076d4:	08007745 	.word	0x08007745
 80076d8:	08007745 	.word	0x08007745
 80076dc:	08007745 	.word	0x08007745
 80076e0:	08007745 	.word	0x08007745
 80076e4:	08007745 	.word	0x08007745
 80076e8:	08007745 	.word	0x08007745
 80076ec:	08007745 	.word	0x08007745
 80076f0:	08007735 	.word	0x08007735
 80076f4:	08007745 	.word	0x08007745
 80076f8:	08007745 	.word	0x08007745
 80076fc:	08007745 	.word	0x08007745
 8007700:	08007745 	.word	0x08007745
 8007704:	08007745 	.word	0x08007745
 8007708:	08007745 	.word	0x08007745
 800770c:	08007745 	.word	0x08007745
 8007710:	0800773d 	.word	0x0800773d
 8007714:	2301      	movs	r3, #1
 8007716:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800771a:	e050      	b.n	80077be <UART_SetConfig+0x7ae>
 800771c:	2304      	movs	r3, #4
 800771e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007722:	e04c      	b.n	80077be <UART_SetConfig+0x7ae>
 8007724:	2308      	movs	r3, #8
 8007726:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800772a:	e048      	b.n	80077be <UART_SetConfig+0x7ae>
 800772c:	2310      	movs	r3, #16
 800772e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007732:	e044      	b.n	80077be <UART_SetConfig+0x7ae>
 8007734:	2320      	movs	r3, #32
 8007736:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800773a:	e040      	b.n	80077be <UART_SetConfig+0x7ae>
 800773c:	2340      	movs	r3, #64	; 0x40
 800773e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007742:	e03c      	b.n	80077be <UART_SetConfig+0x7ae>
 8007744:	2380      	movs	r3, #128	; 0x80
 8007746:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800774a:	e038      	b.n	80077be <UART_SetConfig+0x7ae>
 800774c:	697b      	ldr	r3, [r7, #20]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4a71      	ldr	r2, [pc, #452]	; (8007918 <UART_SetConfig+0x908>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d130      	bne.n	80077b8 <UART_SetConfig+0x7a8>
 8007756:	4b6f      	ldr	r3, [pc, #444]	; (8007914 <UART_SetConfig+0x904>)
 8007758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800775a:	f003 0307 	and.w	r3, r3, #7
 800775e:	2b05      	cmp	r3, #5
 8007760:	d826      	bhi.n	80077b0 <UART_SetConfig+0x7a0>
 8007762:	a201      	add	r2, pc, #4	; (adr r2, 8007768 <UART_SetConfig+0x758>)
 8007764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007768:	08007781 	.word	0x08007781
 800776c:	08007789 	.word	0x08007789
 8007770:	08007791 	.word	0x08007791
 8007774:	08007799 	.word	0x08007799
 8007778:	080077a1 	.word	0x080077a1
 800777c:	080077a9 	.word	0x080077a9
 8007780:	2302      	movs	r3, #2
 8007782:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007786:	e01a      	b.n	80077be <UART_SetConfig+0x7ae>
 8007788:	2304      	movs	r3, #4
 800778a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800778e:	e016      	b.n	80077be <UART_SetConfig+0x7ae>
 8007790:	2308      	movs	r3, #8
 8007792:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007796:	e012      	b.n	80077be <UART_SetConfig+0x7ae>
 8007798:	2310      	movs	r3, #16
 800779a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800779e:	e00e      	b.n	80077be <UART_SetConfig+0x7ae>
 80077a0:	2320      	movs	r3, #32
 80077a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077a6:	e00a      	b.n	80077be <UART_SetConfig+0x7ae>
 80077a8:	2340      	movs	r3, #64	; 0x40
 80077aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077ae:	e006      	b.n	80077be <UART_SetConfig+0x7ae>
 80077b0:	2380      	movs	r3, #128	; 0x80
 80077b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077b6:	e002      	b.n	80077be <UART_SetConfig+0x7ae>
 80077b8:	2380      	movs	r3, #128	; 0x80
 80077ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	4a55      	ldr	r2, [pc, #340]	; (8007918 <UART_SetConfig+0x908>)
 80077c4:	4293      	cmp	r3, r2
 80077c6:	f040 80f8 	bne.w	80079ba <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80077ca:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80077ce:	2b20      	cmp	r3, #32
 80077d0:	dc46      	bgt.n	8007860 <UART_SetConfig+0x850>
 80077d2:	2b02      	cmp	r3, #2
 80077d4:	db75      	blt.n	80078c2 <UART_SetConfig+0x8b2>
 80077d6:	3b02      	subs	r3, #2
 80077d8:	2b1e      	cmp	r3, #30
 80077da:	d872      	bhi.n	80078c2 <UART_SetConfig+0x8b2>
 80077dc:	a201      	add	r2, pc, #4	; (adr r2, 80077e4 <UART_SetConfig+0x7d4>)
 80077de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077e2:	bf00      	nop
 80077e4:	08007867 	.word	0x08007867
 80077e8:	080078c3 	.word	0x080078c3
 80077ec:	0800786f 	.word	0x0800786f
 80077f0:	080078c3 	.word	0x080078c3
 80077f4:	080078c3 	.word	0x080078c3
 80077f8:	080078c3 	.word	0x080078c3
 80077fc:	0800787f 	.word	0x0800787f
 8007800:	080078c3 	.word	0x080078c3
 8007804:	080078c3 	.word	0x080078c3
 8007808:	080078c3 	.word	0x080078c3
 800780c:	080078c3 	.word	0x080078c3
 8007810:	080078c3 	.word	0x080078c3
 8007814:	080078c3 	.word	0x080078c3
 8007818:	080078c3 	.word	0x080078c3
 800781c:	0800788f 	.word	0x0800788f
 8007820:	080078c3 	.word	0x080078c3
 8007824:	080078c3 	.word	0x080078c3
 8007828:	080078c3 	.word	0x080078c3
 800782c:	080078c3 	.word	0x080078c3
 8007830:	080078c3 	.word	0x080078c3
 8007834:	080078c3 	.word	0x080078c3
 8007838:	080078c3 	.word	0x080078c3
 800783c:	080078c3 	.word	0x080078c3
 8007840:	080078c3 	.word	0x080078c3
 8007844:	080078c3 	.word	0x080078c3
 8007848:	080078c3 	.word	0x080078c3
 800784c:	080078c3 	.word	0x080078c3
 8007850:	080078c3 	.word	0x080078c3
 8007854:	080078c3 	.word	0x080078c3
 8007858:	080078c3 	.word	0x080078c3
 800785c:	080078b5 	.word	0x080078b5
 8007860:	2b40      	cmp	r3, #64	; 0x40
 8007862:	d02a      	beq.n	80078ba <UART_SetConfig+0x8aa>
 8007864:	e02d      	b.n	80078c2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007866:	f7fe fb9b 	bl	8005fa0 <HAL_RCCEx_GetD3PCLK1Freq>
 800786a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800786c:	e02f      	b.n	80078ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800786e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007872:	4618      	mov	r0, r3
 8007874:	f7fe fbaa 	bl	8005fcc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800787a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800787c:	e027      	b.n	80078ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800787e:	f107 0318 	add.w	r3, r7, #24
 8007882:	4618      	mov	r0, r3
 8007884:	f7fe fcf6 	bl	8006274 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007888:	69fb      	ldr	r3, [r7, #28]
 800788a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800788c:	e01f      	b.n	80078ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800788e:	4b21      	ldr	r3, [pc, #132]	; (8007914 <UART_SetConfig+0x904>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f003 0320 	and.w	r3, r3, #32
 8007896:	2b00      	cmp	r3, #0
 8007898:	d009      	beq.n	80078ae <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800789a:	4b1e      	ldr	r3, [pc, #120]	; (8007914 <UART_SetConfig+0x904>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	08db      	lsrs	r3, r3, #3
 80078a0:	f003 0303 	and.w	r3, r3, #3
 80078a4:	4a1d      	ldr	r2, [pc, #116]	; (800791c <UART_SetConfig+0x90c>)
 80078a6:	fa22 f303 	lsr.w	r3, r2, r3
 80078aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80078ac:	e00f      	b.n	80078ce <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80078ae:	4b1b      	ldr	r3, [pc, #108]	; (800791c <UART_SetConfig+0x90c>)
 80078b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80078b2:	e00c      	b.n	80078ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80078b4:	4b1a      	ldr	r3, [pc, #104]	; (8007920 <UART_SetConfig+0x910>)
 80078b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80078b8:	e009      	b.n	80078ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80078ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80078be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80078c0:	e005      	b.n	80078ce <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80078c2:	2300      	movs	r3, #0
 80078c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80078c6:	2301      	movs	r3, #1
 80078c8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80078cc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80078ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	f000 81ee 	beq.w	8007cb2 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80078d6:	697b      	ldr	r3, [r7, #20]
 80078d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078da:	4a12      	ldr	r2, [pc, #72]	; (8007924 <UART_SetConfig+0x914>)
 80078dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80078e0:	461a      	mov	r2, r3
 80078e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80078e8:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80078ea:	697b      	ldr	r3, [r7, #20]
 80078ec:	685a      	ldr	r2, [r3, #4]
 80078ee:	4613      	mov	r3, r2
 80078f0:	005b      	lsls	r3, r3, #1
 80078f2:	4413      	add	r3, r2
 80078f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078f6:	429a      	cmp	r2, r3
 80078f8:	d305      	bcc.n	8007906 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80078fa:	697b      	ldr	r3, [r7, #20]
 80078fc:	685b      	ldr	r3, [r3, #4]
 80078fe:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007900:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007902:	429a      	cmp	r2, r3
 8007904:	d910      	bls.n	8007928 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8007906:	2301      	movs	r3, #1
 8007908:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800790c:	e1d1      	b.n	8007cb2 <UART_SetConfig+0xca2>
 800790e:	bf00      	nop
 8007910:	40011c00 	.word	0x40011c00
 8007914:	58024400 	.word	0x58024400
 8007918:	58000c00 	.word	0x58000c00
 800791c:	03d09000 	.word	0x03d09000
 8007920:	003d0900 	.word	0x003d0900
 8007924:	08008464 	.word	0x08008464
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007928:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800792a:	2200      	movs	r2, #0
 800792c:	60bb      	str	r3, [r7, #8]
 800792e:	60fa      	str	r2, [r7, #12]
 8007930:	697b      	ldr	r3, [r7, #20]
 8007932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007934:	4ac0      	ldr	r2, [pc, #768]	; (8007c38 <UART_SetConfig+0xc28>)
 8007936:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800793a:	b29b      	uxth	r3, r3
 800793c:	2200      	movs	r2, #0
 800793e:	603b      	str	r3, [r7, #0]
 8007940:	607a      	str	r2, [r7, #4]
 8007942:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007946:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800794a:	f7f8 fccf 	bl	80002ec <__aeabi_uldivmod>
 800794e:	4602      	mov	r2, r0
 8007950:	460b      	mov	r3, r1
 8007952:	4610      	mov	r0, r2
 8007954:	4619      	mov	r1, r3
 8007956:	f04f 0200 	mov.w	r2, #0
 800795a:	f04f 0300 	mov.w	r3, #0
 800795e:	020b      	lsls	r3, r1, #8
 8007960:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007964:	0202      	lsls	r2, r0, #8
 8007966:	6979      	ldr	r1, [r7, #20]
 8007968:	6849      	ldr	r1, [r1, #4]
 800796a:	0849      	lsrs	r1, r1, #1
 800796c:	2000      	movs	r0, #0
 800796e:	460c      	mov	r4, r1
 8007970:	4605      	mov	r5, r0
 8007972:	eb12 0804 	adds.w	r8, r2, r4
 8007976:	eb43 0905 	adc.w	r9, r3, r5
 800797a:	697b      	ldr	r3, [r7, #20]
 800797c:	685b      	ldr	r3, [r3, #4]
 800797e:	2200      	movs	r2, #0
 8007980:	469a      	mov	sl, r3
 8007982:	4693      	mov	fp, r2
 8007984:	4652      	mov	r2, sl
 8007986:	465b      	mov	r3, fp
 8007988:	4640      	mov	r0, r8
 800798a:	4649      	mov	r1, r9
 800798c:	f7f8 fcae 	bl	80002ec <__aeabi_uldivmod>
 8007990:	4602      	mov	r2, r0
 8007992:	460b      	mov	r3, r1
 8007994:	4613      	mov	r3, r2
 8007996:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800799a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800799e:	d308      	bcc.n	80079b2 <UART_SetConfig+0x9a2>
 80079a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80079a6:	d204      	bcs.n	80079b2 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80079a8:	697b      	ldr	r3, [r7, #20]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80079ae:	60da      	str	r2, [r3, #12]
 80079b0:	e17f      	b.n	8007cb2 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 80079b2:	2301      	movs	r3, #1
 80079b4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80079b8:	e17b      	b.n	8007cb2 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80079ba:	697b      	ldr	r3, [r7, #20]
 80079bc:	69db      	ldr	r3, [r3, #28]
 80079be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079c2:	f040 80bd 	bne.w	8007b40 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 80079c6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80079ca:	2b20      	cmp	r3, #32
 80079cc:	dc48      	bgt.n	8007a60 <UART_SetConfig+0xa50>
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	db7b      	blt.n	8007aca <UART_SetConfig+0xaba>
 80079d2:	2b20      	cmp	r3, #32
 80079d4:	d879      	bhi.n	8007aca <UART_SetConfig+0xaba>
 80079d6:	a201      	add	r2, pc, #4	; (adr r2, 80079dc <UART_SetConfig+0x9cc>)
 80079d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079dc:	08007a67 	.word	0x08007a67
 80079e0:	08007a6f 	.word	0x08007a6f
 80079e4:	08007acb 	.word	0x08007acb
 80079e8:	08007acb 	.word	0x08007acb
 80079ec:	08007a77 	.word	0x08007a77
 80079f0:	08007acb 	.word	0x08007acb
 80079f4:	08007acb 	.word	0x08007acb
 80079f8:	08007acb 	.word	0x08007acb
 80079fc:	08007a87 	.word	0x08007a87
 8007a00:	08007acb 	.word	0x08007acb
 8007a04:	08007acb 	.word	0x08007acb
 8007a08:	08007acb 	.word	0x08007acb
 8007a0c:	08007acb 	.word	0x08007acb
 8007a10:	08007acb 	.word	0x08007acb
 8007a14:	08007acb 	.word	0x08007acb
 8007a18:	08007acb 	.word	0x08007acb
 8007a1c:	08007a97 	.word	0x08007a97
 8007a20:	08007acb 	.word	0x08007acb
 8007a24:	08007acb 	.word	0x08007acb
 8007a28:	08007acb 	.word	0x08007acb
 8007a2c:	08007acb 	.word	0x08007acb
 8007a30:	08007acb 	.word	0x08007acb
 8007a34:	08007acb 	.word	0x08007acb
 8007a38:	08007acb 	.word	0x08007acb
 8007a3c:	08007acb 	.word	0x08007acb
 8007a40:	08007acb 	.word	0x08007acb
 8007a44:	08007acb 	.word	0x08007acb
 8007a48:	08007acb 	.word	0x08007acb
 8007a4c:	08007acb 	.word	0x08007acb
 8007a50:	08007acb 	.word	0x08007acb
 8007a54:	08007acb 	.word	0x08007acb
 8007a58:	08007acb 	.word	0x08007acb
 8007a5c:	08007abd 	.word	0x08007abd
 8007a60:	2b40      	cmp	r3, #64	; 0x40
 8007a62:	d02e      	beq.n	8007ac2 <UART_SetConfig+0xab2>
 8007a64:	e031      	b.n	8007aca <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a66:	f7fc ff35 	bl	80048d4 <HAL_RCC_GetPCLK1Freq>
 8007a6a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007a6c:	e033      	b.n	8007ad6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a6e:	f7fc ff47 	bl	8004900 <HAL_RCC_GetPCLK2Freq>
 8007a72:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007a74:	e02f      	b.n	8007ad6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f7fe faa6 	bl	8005fcc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a84:	e027      	b.n	8007ad6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a86:	f107 0318 	add.w	r3, r7, #24
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	f7fe fbf2 	bl	8006274 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007a90:	69fb      	ldr	r3, [r7, #28]
 8007a92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a94:	e01f      	b.n	8007ad6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007a96:	4b69      	ldr	r3, [pc, #420]	; (8007c3c <UART_SetConfig+0xc2c>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f003 0320 	and.w	r3, r3, #32
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d009      	beq.n	8007ab6 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007aa2:	4b66      	ldr	r3, [pc, #408]	; (8007c3c <UART_SetConfig+0xc2c>)
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	08db      	lsrs	r3, r3, #3
 8007aa8:	f003 0303 	and.w	r3, r3, #3
 8007aac:	4a64      	ldr	r2, [pc, #400]	; (8007c40 <UART_SetConfig+0xc30>)
 8007aae:	fa22 f303 	lsr.w	r3, r2, r3
 8007ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007ab4:	e00f      	b.n	8007ad6 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8007ab6:	4b62      	ldr	r3, [pc, #392]	; (8007c40 <UART_SetConfig+0xc30>)
 8007ab8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007aba:	e00c      	b.n	8007ad6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007abc:	4b61      	ldr	r3, [pc, #388]	; (8007c44 <UART_SetConfig+0xc34>)
 8007abe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ac0:	e009      	b.n	8007ad6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ac2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ac8:	e005      	b.n	8007ad6 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8007aca:	2300      	movs	r3, #0
 8007acc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007ace:	2301      	movs	r3, #1
 8007ad0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007ad4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007ad6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	f000 80ea 	beq.w	8007cb2 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ade:	697b      	ldr	r3, [r7, #20]
 8007ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ae2:	4a55      	ldr	r2, [pc, #340]	; (8007c38 <UART_SetConfig+0xc28>)
 8007ae4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ae8:	461a      	mov	r2, r3
 8007aea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007aec:	fbb3 f3f2 	udiv	r3, r3, r2
 8007af0:	005a      	lsls	r2, r3, #1
 8007af2:	697b      	ldr	r3, [r7, #20]
 8007af4:	685b      	ldr	r3, [r3, #4]
 8007af6:	085b      	lsrs	r3, r3, #1
 8007af8:	441a      	add	r2, r3
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	685b      	ldr	r3, [r3, #4]
 8007afe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b02:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b06:	2b0f      	cmp	r3, #15
 8007b08:	d916      	bls.n	8007b38 <UART_SetConfig+0xb28>
 8007b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b10:	d212      	bcs.n	8007b38 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b14:	b29b      	uxth	r3, r3
 8007b16:	f023 030f 	bic.w	r3, r3, #15
 8007b1a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b1e:	085b      	lsrs	r3, r3, #1
 8007b20:	b29b      	uxth	r3, r3
 8007b22:	f003 0307 	and.w	r3, r3, #7
 8007b26:	b29a      	uxth	r2, r3
 8007b28:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007b2a:	4313      	orrs	r3, r2
 8007b2c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8007b2e:	697b      	ldr	r3, [r7, #20]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8007b34:	60da      	str	r2, [r3, #12]
 8007b36:	e0bc      	b.n	8007cb2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8007b38:	2301      	movs	r3, #1
 8007b3a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007b3e:	e0b8      	b.n	8007cb2 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007b40:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007b44:	2b20      	cmp	r3, #32
 8007b46:	dc4b      	bgt.n	8007be0 <UART_SetConfig+0xbd0>
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	f2c0 8087 	blt.w	8007c5c <UART_SetConfig+0xc4c>
 8007b4e:	2b20      	cmp	r3, #32
 8007b50:	f200 8084 	bhi.w	8007c5c <UART_SetConfig+0xc4c>
 8007b54:	a201      	add	r2, pc, #4	; (adr r2, 8007b5c <UART_SetConfig+0xb4c>)
 8007b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b5a:	bf00      	nop
 8007b5c:	08007be7 	.word	0x08007be7
 8007b60:	08007bef 	.word	0x08007bef
 8007b64:	08007c5d 	.word	0x08007c5d
 8007b68:	08007c5d 	.word	0x08007c5d
 8007b6c:	08007bf7 	.word	0x08007bf7
 8007b70:	08007c5d 	.word	0x08007c5d
 8007b74:	08007c5d 	.word	0x08007c5d
 8007b78:	08007c5d 	.word	0x08007c5d
 8007b7c:	08007c07 	.word	0x08007c07
 8007b80:	08007c5d 	.word	0x08007c5d
 8007b84:	08007c5d 	.word	0x08007c5d
 8007b88:	08007c5d 	.word	0x08007c5d
 8007b8c:	08007c5d 	.word	0x08007c5d
 8007b90:	08007c5d 	.word	0x08007c5d
 8007b94:	08007c5d 	.word	0x08007c5d
 8007b98:	08007c5d 	.word	0x08007c5d
 8007b9c:	08007c17 	.word	0x08007c17
 8007ba0:	08007c5d 	.word	0x08007c5d
 8007ba4:	08007c5d 	.word	0x08007c5d
 8007ba8:	08007c5d 	.word	0x08007c5d
 8007bac:	08007c5d 	.word	0x08007c5d
 8007bb0:	08007c5d 	.word	0x08007c5d
 8007bb4:	08007c5d 	.word	0x08007c5d
 8007bb8:	08007c5d 	.word	0x08007c5d
 8007bbc:	08007c5d 	.word	0x08007c5d
 8007bc0:	08007c5d 	.word	0x08007c5d
 8007bc4:	08007c5d 	.word	0x08007c5d
 8007bc8:	08007c5d 	.word	0x08007c5d
 8007bcc:	08007c5d 	.word	0x08007c5d
 8007bd0:	08007c5d 	.word	0x08007c5d
 8007bd4:	08007c5d 	.word	0x08007c5d
 8007bd8:	08007c5d 	.word	0x08007c5d
 8007bdc:	08007c4f 	.word	0x08007c4f
 8007be0:	2b40      	cmp	r3, #64	; 0x40
 8007be2:	d037      	beq.n	8007c54 <UART_SetConfig+0xc44>
 8007be4:	e03a      	b.n	8007c5c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007be6:	f7fc fe75 	bl	80048d4 <HAL_RCC_GetPCLK1Freq>
 8007bea:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007bec:	e03c      	b.n	8007c68 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007bee:	f7fc fe87 	bl	8004900 <HAL_RCC_GetPCLK2Freq>
 8007bf2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007bf4:	e038      	b.n	8007c68 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007bf6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	f7fe f9e6 	bl	8005fcc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c04:	e030      	b.n	8007c68 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c06:	f107 0318 	add.w	r3, r7, #24
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	f7fe fb32 	bl	8006274 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007c10:	69fb      	ldr	r3, [r7, #28]
 8007c12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c14:	e028      	b.n	8007c68 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c16:	4b09      	ldr	r3, [pc, #36]	; (8007c3c <UART_SetConfig+0xc2c>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f003 0320 	and.w	r3, r3, #32
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d012      	beq.n	8007c48 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007c22:	4b06      	ldr	r3, [pc, #24]	; (8007c3c <UART_SetConfig+0xc2c>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	08db      	lsrs	r3, r3, #3
 8007c28:	f003 0303 	and.w	r3, r3, #3
 8007c2c:	4a04      	ldr	r2, [pc, #16]	; (8007c40 <UART_SetConfig+0xc30>)
 8007c2e:	fa22 f303 	lsr.w	r3, r2, r3
 8007c32:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007c34:	e018      	b.n	8007c68 <UART_SetConfig+0xc58>
 8007c36:	bf00      	nop
 8007c38:	08008464 	.word	0x08008464
 8007c3c:	58024400 	.word	0x58024400
 8007c40:	03d09000 	.word	0x03d09000
 8007c44:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8007c48:	4b24      	ldr	r3, [pc, #144]	; (8007cdc <UART_SetConfig+0xccc>)
 8007c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c4c:	e00c      	b.n	8007c68 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007c4e:	4b24      	ldr	r3, [pc, #144]	; (8007ce0 <UART_SetConfig+0xcd0>)
 8007c50:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c52:	e009      	b.n	8007c68 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c54:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c58:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c5a:	e005      	b.n	8007c68 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007c60:	2301      	movs	r3, #1
 8007c62:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007c66:	bf00      	nop
    }

    if (pclk != 0U)
 8007c68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d021      	beq.n	8007cb2 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007c6e:	697b      	ldr	r3, [r7, #20]
 8007c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c72:	4a1c      	ldr	r2, [pc, #112]	; (8007ce4 <UART_SetConfig+0xcd4>)
 8007c74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c78:	461a      	mov	r2, r3
 8007c7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c7c:	fbb3 f2f2 	udiv	r2, r3, r2
 8007c80:	697b      	ldr	r3, [r7, #20]
 8007c82:	685b      	ldr	r3, [r3, #4]
 8007c84:	085b      	lsrs	r3, r3, #1
 8007c86:	441a      	add	r2, r3
 8007c88:	697b      	ldr	r3, [r7, #20]
 8007c8a:	685b      	ldr	r3, [r3, #4]
 8007c8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c90:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c94:	2b0f      	cmp	r3, #15
 8007c96:	d909      	bls.n	8007cac <UART_SetConfig+0xc9c>
 8007c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c9e:	d205      	bcs.n	8007cac <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ca2:	b29a      	uxth	r2, r3
 8007ca4:	697b      	ldr	r3, [r7, #20]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	60da      	str	r2, [r3, #12]
 8007caa:	e002      	b.n	8007cb2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8007cac:	2301      	movs	r3, #1
 8007cae:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007cb2:	697b      	ldr	r3, [r7, #20]
 8007cb4:	2201      	movs	r2, #1
 8007cb6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007cba:	697b      	ldr	r3, [r7, #20]
 8007cbc:	2201      	movs	r2, #1
 8007cbe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007cc2:	697b      	ldr	r3, [r7, #20]
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007cc8:	697b      	ldr	r3, [r7, #20]
 8007cca:	2200      	movs	r2, #0
 8007ccc:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007cce:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	3748      	adds	r7, #72	; 0x48
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007cdc:	03d09000 	.word	0x03d09000
 8007ce0:	003d0900 	.word	0x003d0900
 8007ce4:	08008464 	.word	0x08008464

08007ce8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007ce8:	b480      	push	{r7}
 8007cea:	b083      	sub	sp, #12
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cf4:	f003 0301 	and.w	r3, r3, #1
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d00a      	beq.n	8007d12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	685b      	ldr	r3, [r3, #4]
 8007d02:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	430a      	orrs	r2, r1
 8007d10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d16:	f003 0302 	and.w	r3, r3, #2
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d00a      	beq.n	8007d34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	685b      	ldr	r3, [r3, #4]
 8007d24:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	430a      	orrs	r2, r1
 8007d32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d38:	f003 0304 	and.w	r3, r3, #4
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d00a      	beq.n	8007d56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	685b      	ldr	r3, [r3, #4]
 8007d46:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	430a      	orrs	r2, r1
 8007d54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d5a:	f003 0308 	and.w	r3, r3, #8
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d00a      	beq.n	8007d78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	685b      	ldr	r3, [r3, #4]
 8007d68:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	430a      	orrs	r2, r1
 8007d76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d7c:	f003 0310 	and.w	r3, r3, #16
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d00a      	beq.n	8007d9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	689b      	ldr	r3, [r3, #8]
 8007d8a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	430a      	orrs	r2, r1
 8007d98:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d9e:	f003 0320 	and.w	r3, r3, #32
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d00a      	beq.n	8007dbc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	689b      	ldr	r3, [r3, #8]
 8007dac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	430a      	orrs	r2, r1
 8007dba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d01a      	beq.n	8007dfe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	685b      	ldr	r3, [r3, #4]
 8007dce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	430a      	orrs	r2, r1
 8007ddc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007de2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007de6:	d10a      	bne.n	8007dfe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	685b      	ldr	r3, [r3, #4]
 8007dee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	430a      	orrs	r2, r1
 8007dfc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d00a      	beq.n	8007e20 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	685b      	ldr	r3, [r3, #4]
 8007e10:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	430a      	orrs	r2, r1
 8007e1e:	605a      	str	r2, [r3, #4]
  }
}
 8007e20:	bf00      	nop
 8007e22:	370c      	adds	r7, #12
 8007e24:	46bd      	mov	sp, r7
 8007e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2a:	4770      	bx	lr

08007e2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b086      	sub	sp, #24
 8007e30:	af02      	add	r7, sp, #8
 8007e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2200      	movs	r2, #0
 8007e38:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007e3c:	f7f9 fe76 	bl	8001b2c <HAL_GetTick>
 8007e40:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f003 0308 	and.w	r3, r3, #8
 8007e4c:	2b08      	cmp	r3, #8
 8007e4e:	d10e      	bne.n	8007e6e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e50:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007e54:	9300      	str	r3, [sp, #0]
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	2200      	movs	r2, #0
 8007e5a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f000 f82f 	bl	8007ec2 <UART_WaitOnFlagUntilTimeout>
 8007e64:	4603      	mov	r3, r0
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d001      	beq.n	8007e6e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e6a:	2303      	movs	r3, #3
 8007e6c:	e025      	b.n	8007eba <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f003 0304 	and.w	r3, r3, #4
 8007e78:	2b04      	cmp	r3, #4
 8007e7a:	d10e      	bne.n	8007e9a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e7c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007e80:	9300      	str	r3, [sp, #0]
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	2200      	movs	r2, #0
 8007e86:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f000 f819 	bl	8007ec2 <UART_WaitOnFlagUntilTimeout>
 8007e90:	4603      	mov	r3, r0
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d001      	beq.n	8007e9a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e96:	2303      	movs	r3, #3
 8007e98:	e00f      	b.n	8007eba <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2220      	movs	r2, #32
 8007e9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2220      	movs	r2, #32
 8007ea6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2200      	movs	r2, #0
 8007eae:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007eb8:	2300      	movs	r3, #0
}
 8007eba:	4618      	mov	r0, r3
 8007ebc:	3710      	adds	r7, #16
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bd80      	pop	{r7, pc}

08007ec2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007ec2:	b580      	push	{r7, lr}
 8007ec4:	b09c      	sub	sp, #112	; 0x70
 8007ec6:	af00      	add	r7, sp, #0
 8007ec8:	60f8      	str	r0, [r7, #12]
 8007eca:	60b9      	str	r1, [r7, #8]
 8007ecc:	603b      	str	r3, [r7, #0]
 8007ece:	4613      	mov	r3, r2
 8007ed0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ed2:	e0a9      	b.n	8008028 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ed4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007ed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007eda:	f000 80a5 	beq.w	8008028 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ede:	f7f9 fe25 	bl	8001b2c <HAL_GetTick>
 8007ee2:	4602      	mov	r2, r0
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	1ad3      	subs	r3, r2, r3
 8007ee8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007eea:	429a      	cmp	r2, r3
 8007eec:	d302      	bcc.n	8007ef4 <UART_WaitOnFlagUntilTimeout+0x32>
 8007eee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d140      	bne.n	8007f76 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007efa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007efc:	e853 3f00 	ldrex	r3, [r3]
 8007f00:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007f02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f04:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007f08:	667b      	str	r3, [r7, #100]	; 0x64
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	461a      	mov	r2, r3
 8007f10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f12:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007f14:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f16:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007f18:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007f1a:	e841 2300 	strex	r3, r2, [r1]
 8007f1e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007f20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d1e6      	bne.n	8007ef4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	3308      	adds	r3, #8
 8007f2c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f30:	e853 3f00 	ldrex	r3, [r3]
 8007f34:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f38:	f023 0301 	bic.w	r3, r3, #1
 8007f3c:	663b      	str	r3, [r7, #96]	; 0x60
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	3308      	adds	r3, #8
 8007f44:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007f46:	64ba      	str	r2, [r7, #72]	; 0x48
 8007f48:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f4a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007f4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f4e:	e841 2300 	strex	r3, r2, [r1]
 8007f52:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007f54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d1e5      	bne.n	8007f26 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	2220      	movs	r2, #32
 8007f5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	2220      	movs	r2, #32
 8007f66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007f72:	2303      	movs	r3, #3
 8007f74:	e069      	b.n	800804a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f003 0304 	and.w	r3, r3, #4
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d051      	beq.n	8008028 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	69db      	ldr	r3, [r3, #28]
 8007f8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f92:	d149      	bne.n	8008028 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007f9c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fa6:	e853 3f00 	ldrex	r3, [r3]
 8007faa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fae:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007fb2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	461a      	mov	r2, r3
 8007fba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fbc:	637b      	str	r3, [r7, #52]	; 0x34
 8007fbe:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fc0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007fc2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007fc4:	e841 2300 	strex	r3, r2, [r1]
 8007fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d1e6      	bne.n	8007f9e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	3308      	adds	r3, #8
 8007fd6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fd8:	697b      	ldr	r3, [r7, #20]
 8007fda:	e853 3f00 	ldrex	r3, [r3]
 8007fde:	613b      	str	r3, [r7, #16]
   return(result);
 8007fe0:	693b      	ldr	r3, [r7, #16]
 8007fe2:	f023 0301 	bic.w	r3, r3, #1
 8007fe6:	66bb      	str	r3, [r7, #104]	; 0x68
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	3308      	adds	r3, #8
 8007fee:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007ff0:	623a      	str	r2, [r7, #32]
 8007ff2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ff4:	69f9      	ldr	r1, [r7, #28]
 8007ff6:	6a3a      	ldr	r2, [r7, #32]
 8007ff8:	e841 2300 	strex	r3, r2, [r1]
 8007ffc:	61bb      	str	r3, [r7, #24]
   return(result);
 8007ffe:	69bb      	ldr	r3, [r7, #24]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d1e5      	bne.n	8007fd0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	2220      	movs	r2, #32
 8008008:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	2220      	movs	r2, #32
 8008010:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	2220      	movs	r2, #32
 8008018:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	2200      	movs	r2, #0
 8008020:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008024:	2303      	movs	r3, #3
 8008026:	e010      	b.n	800804a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	69da      	ldr	r2, [r3, #28]
 800802e:	68bb      	ldr	r3, [r7, #8]
 8008030:	4013      	ands	r3, r2
 8008032:	68ba      	ldr	r2, [r7, #8]
 8008034:	429a      	cmp	r2, r3
 8008036:	bf0c      	ite	eq
 8008038:	2301      	moveq	r3, #1
 800803a:	2300      	movne	r3, #0
 800803c:	b2db      	uxtb	r3, r3
 800803e:	461a      	mov	r2, r3
 8008040:	79fb      	ldrb	r3, [r7, #7]
 8008042:	429a      	cmp	r2, r3
 8008044:	f43f af46 	beq.w	8007ed4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008048:	2300      	movs	r3, #0
}
 800804a:	4618      	mov	r0, r3
 800804c:	3770      	adds	r7, #112	; 0x70
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}

08008052 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008052:	b480      	push	{r7}
 8008054:	b085      	sub	sp, #20
 8008056:	af00      	add	r7, sp, #0
 8008058:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008060:	2b01      	cmp	r3, #1
 8008062:	d101      	bne.n	8008068 <HAL_UARTEx_DisableFifoMode+0x16>
 8008064:	2302      	movs	r3, #2
 8008066:	e027      	b.n	80080b8 <HAL_UARTEx_DisableFifoMode+0x66>
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2201      	movs	r2, #1
 800806c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2224      	movs	r2, #36	; 0x24
 8008074:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	681a      	ldr	r2, [r3, #0]
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f022 0201 	bic.w	r2, r2, #1
 800808e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008096:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2200      	movs	r2, #0
 800809c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	68fa      	ldr	r2, [r7, #12]
 80080a4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2220      	movs	r2, #32
 80080aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2200      	movs	r2, #0
 80080b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80080b6:	2300      	movs	r3, #0
}
 80080b8:	4618      	mov	r0, r3
 80080ba:	3714      	adds	r7, #20
 80080bc:	46bd      	mov	sp, r7
 80080be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c2:	4770      	bx	lr

080080c4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b084      	sub	sp, #16
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
 80080cc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80080d4:	2b01      	cmp	r3, #1
 80080d6:	d101      	bne.n	80080dc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80080d8:	2302      	movs	r3, #2
 80080da:	e02d      	b.n	8008138 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2201      	movs	r2, #1
 80080e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2224      	movs	r2, #36	; 0x24
 80080e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	681a      	ldr	r2, [r3, #0]
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f022 0201 	bic.w	r2, r2, #1
 8008102:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	689b      	ldr	r3, [r3, #8]
 800810a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	683a      	ldr	r2, [r7, #0]
 8008114:	430a      	orrs	r2, r1
 8008116:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f000 f84f 	bl	80081bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	68fa      	ldr	r2, [r7, #12]
 8008124:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2220      	movs	r2, #32
 800812a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2200      	movs	r2, #0
 8008132:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008136:	2300      	movs	r3, #0
}
 8008138:	4618      	mov	r0, r3
 800813a:	3710      	adds	r7, #16
 800813c:	46bd      	mov	sp, r7
 800813e:	bd80      	pop	{r7, pc}

08008140 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b084      	sub	sp, #16
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
 8008148:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008150:	2b01      	cmp	r3, #1
 8008152:	d101      	bne.n	8008158 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008154:	2302      	movs	r3, #2
 8008156:	e02d      	b.n	80081b4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2201      	movs	r2, #1
 800815c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2224      	movs	r2, #36	; 0x24
 8008164:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	681a      	ldr	r2, [r3, #0]
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f022 0201 	bic.w	r2, r2, #1
 800817e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	689b      	ldr	r3, [r3, #8]
 8008186:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	683a      	ldr	r2, [r7, #0]
 8008190:	430a      	orrs	r2, r1
 8008192:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008194:	6878      	ldr	r0, [r7, #4]
 8008196:	f000 f811 	bl	80081bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	68fa      	ldr	r2, [r7, #12]
 80081a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2220      	movs	r2, #32
 80081a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2200      	movs	r2, #0
 80081ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80081b2:	2300      	movs	r3, #0
}
 80081b4:	4618      	mov	r0, r3
 80081b6:	3710      	adds	r7, #16
 80081b8:	46bd      	mov	sp, r7
 80081ba:	bd80      	pop	{r7, pc}

080081bc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80081bc:	b480      	push	{r7}
 80081be:	b085      	sub	sp, #20
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d108      	bne.n	80081de <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2201      	movs	r2, #1
 80081d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2201      	movs	r2, #1
 80081d8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80081dc:	e031      	b.n	8008242 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80081de:	2310      	movs	r3, #16
 80081e0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80081e2:	2310      	movs	r3, #16
 80081e4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	689b      	ldr	r3, [r3, #8]
 80081ec:	0e5b      	lsrs	r3, r3, #25
 80081ee:	b2db      	uxtb	r3, r3
 80081f0:	f003 0307 	and.w	r3, r3, #7
 80081f4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	689b      	ldr	r3, [r3, #8]
 80081fc:	0f5b      	lsrs	r3, r3, #29
 80081fe:	b2db      	uxtb	r3, r3
 8008200:	f003 0307 	and.w	r3, r3, #7
 8008204:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008206:	7bbb      	ldrb	r3, [r7, #14]
 8008208:	7b3a      	ldrb	r2, [r7, #12]
 800820a:	4911      	ldr	r1, [pc, #68]	; (8008250 <UARTEx_SetNbDataToProcess+0x94>)
 800820c:	5c8a      	ldrb	r2, [r1, r2]
 800820e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008212:	7b3a      	ldrb	r2, [r7, #12]
 8008214:	490f      	ldr	r1, [pc, #60]	; (8008254 <UARTEx_SetNbDataToProcess+0x98>)
 8008216:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008218:	fb93 f3f2 	sdiv	r3, r3, r2
 800821c:	b29a      	uxth	r2, r3
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008224:	7bfb      	ldrb	r3, [r7, #15]
 8008226:	7b7a      	ldrb	r2, [r7, #13]
 8008228:	4909      	ldr	r1, [pc, #36]	; (8008250 <UARTEx_SetNbDataToProcess+0x94>)
 800822a:	5c8a      	ldrb	r2, [r1, r2]
 800822c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008230:	7b7a      	ldrb	r2, [r7, #13]
 8008232:	4908      	ldr	r1, [pc, #32]	; (8008254 <UARTEx_SetNbDataToProcess+0x98>)
 8008234:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008236:	fb93 f3f2 	sdiv	r3, r3, r2
 800823a:	b29a      	uxth	r2, r3
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008242:	bf00      	nop
 8008244:	3714      	adds	r7, #20
 8008246:	46bd      	mov	sp, r7
 8008248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824c:	4770      	bx	lr
 800824e:	bf00      	nop
 8008250:	0800847c 	.word	0x0800847c
 8008254:	08008484 	.word	0x08008484

08008258 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8008258:	b480      	push	{r7}
 800825a:	b083      	sub	sp, #12
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
 8008260:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d121      	bne.n	80082ae <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681a      	ldr	r2, [r3, #0]
 800826e:	4b27      	ldr	r3, [pc, #156]	; (800830c <FMC_SDRAM_Init+0xb4>)
 8008270:	4013      	ands	r3, r2
 8008272:	683a      	ldr	r2, [r7, #0]
 8008274:	6851      	ldr	r1, [r2, #4]
 8008276:	683a      	ldr	r2, [r7, #0]
 8008278:	6892      	ldr	r2, [r2, #8]
 800827a:	4311      	orrs	r1, r2
 800827c:	683a      	ldr	r2, [r7, #0]
 800827e:	68d2      	ldr	r2, [r2, #12]
 8008280:	4311      	orrs	r1, r2
 8008282:	683a      	ldr	r2, [r7, #0]
 8008284:	6912      	ldr	r2, [r2, #16]
 8008286:	4311      	orrs	r1, r2
 8008288:	683a      	ldr	r2, [r7, #0]
 800828a:	6952      	ldr	r2, [r2, #20]
 800828c:	4311      	orrs	r1, r2
 800828e:	683a      	ldr	r2, [r7, #0]
 8008290:	6992      	ldr	r2, [r2, #24]
 8008292:	4311      	orrs	r1, r2
 8008294:	683a      	ldr	r2, [r7, #0]
 8008296:	69d2      	ldr	r2, [r2, #28]
 8008298:	4311      	orrs	r1, r2
 800829a:	683a      	ldr	r2, [r7, #0]
 800829c:	6a12      	ldr	r2, [r2, #32]
 800829e:	4311      	orrs	r1, r2
 80082a0:	683a      	ldr	r2, [r7, #0]
 80082a2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80082a4:	430a      	orrs	r2, r1
 80082a6:	431a      	orrs	r2, r3
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	601a      	str	r2, [r3, #0]
 80082ac:	e026      	b.n	80082fc <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	69d9      	ldr	r1, [r3, #28]
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	6a1b      	ldr	r3, [r3, #32]
 80082be:	4319      	orrs	r1, r3
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082c4:	430b      	orrs	r3, r1
 80082c6:	431a      	orrs	r2, r3
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	685a      	ldr	r2, [r3, #4]
 80082d0:	4b0e      	ldr	r3, [pc, #56]	; (800830c <FMC_SDRAM_Init+0xb4>)
 80082d2:	4013      	ands	r3, r2
 80082d4:	683a      	ldr	r2, [r7, #0]
 80082d6:	6851      	ldr	r1, [r2, #4]
 80082d8:	683a      	ldr	r2, [r7, #0]
 80082da:	6892      	ldr	r2, [r2, #8]
 80082dc:	4311      	orrs	r1, r2
 80082de:	683a      	ldr	r2, [r7, #0]
 80082e0:	68d2      	ldr	r2, [r2, #12]
 80082e2:	4311      	orrs	r1, r2
 80082e4:	683a      	ldr	r2, [r7, #0]
 80082e6:	6912      	ldr	r2, [r2, #16]
 80082e8:	4311      	orrs	r1, r2
 80082ea:	683a      	ldr	r2, [r7, #0]
 80082ec:	6952      	ldr	r2, [r2, #20]
 80082ee:	4311      	orrs	r1, r2
 80082f0:	683a      	ldr	r2, [r7, #0]
 80082f2:	6992      	ldr	r2, [r2, #24]
 80082f4:	430a      	orrs	r2, r1
 80082f6:	431a      	orrs	r2, r3
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 80082fc:	2300      	movs	r3, #0
}
 80082fe:	4618      	mov	r0, r3
 8008300:	370c      	adds	r7, #12
 8008302:	46bd      	mov	sp, r7
 8008304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008308:	4770      	bx	lr
 800830a:	bf00      	nop
 800830c:	ffff8000 	.word	0xffff8000

08008310 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008310:	b480      	push	{r7}
 8008312:	b085      	sub	sp, #20
 8008314:	af00      	add	r7, sp, #0
 8008316:	60f8      	str	r0, [r7, #12]
 8008318:	60b9      	str	r1, [r7, #8]
 800831a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d128      	bne.n	8008374 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	689b      	ldr	r3, [r3, #8]
 8008326:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	1e59      	subs	r1, r3, #1
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	685b      	ldr	r3, [r3, #4]
 8008334:	3b01      	subs	r3, #1
 8008336:	011b      	lsls	r3, r3, #4
 8008338:	4319      	orrs	r1, r3
 800833a:	68bb      	ldr	r3, [r7, #8]
 800833c:	689b      	ldr	r3, [r3, #8]
 800833e:	3b01      	subs	r3, #1
 8008340:	021b      	lsls	r3, r3, #8
 8008342:	4319      	orrs	r1, r3
 8008344:	68bb      	ldr	r3, [r7, #8]
 8008346:	68db      	ldr	r3, [r3, #12]
 8008348:	3b01      	subs	r3, #1
 800834a:	031b      	lsls	r3, r3, #12
 800834c:	4319      	orrs	r1, r3
 800834e:	68bb      	ldr	r3, [r7, #8]
 8008350:	691b      	ldr	r3, [r3, #16]
 8008352:	3b01      	subs	r3, #1
 8008354:	041b      	lsls	r3, r3, #16
 8008356:	4319      	orrs	r1, r3
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	695b      	ldr	r3, [r3, #20]
 800835c:	3b01      	subs	r3, #1
 800835e:	051b      	lsls	r3, r3, #20
 8008360:	4319      	orrs	r1, r3
 8008362:	68bb      	ldr	r3, [r7, #8]
 8008364:	699b      	ldr	r3, [r3, #24]
 8008366:	3b01      	subs	r3, #1
 8008368:	061b      	lsls	r3, r3, #24
 800836a:	430b      	orrs	r3, r1
 800836c:	431a      	orrs	r2, r3
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	609a      	str	r2, [r3, #8]
 8008372:	e02d      	b.n	80083d0 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	689a      	ldr	r2, [r3, #8]
 8008378:	4b19      	ldr	r3, [pc, #100]	; (80083e0 <FMC_SDRAM_Timing_Init+0xd0>)
 800837a:	4013      	ands	r3, r2
 800837c:	68ba      	ldr	r2, [r7, #8]
 800837e:	68d2      	ldr	r2, [r2, #12]
 8008380:	3a01      	subs	r2, #1
 8008382:	0311      	lsls	r1, r2, #12
 8008384:	68ba      	ldr	r2, [r7, #8]
 8008386:	6952      	ldr	r2, [r2, #20]
 8008388:	3a01      	subs	r2, #1
 800838a:	0512      	lsls	r2, r2, #20
 800838c:	430a      	orrs	r2, r1
 800838e:	431a      	orrs	r2, r3
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	68db      	ldr	r3, [r3, #12]
 8008398:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	1e59      	subs	r1, r3, #1
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	685b      	ldr	r3, [r3, #4]
 80083a6:	3b01      	subs	r3, #1
 80083a8:	011b      	lsls	r3, r3, #4
 80083aa:	4319      	orrs	r1, r3
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	689b      	ldr	r3, [r3, #8]
 80083b0:	3b01      	subs	r3, #1
 80083b2:	021b      	lsls	r3, r3, #8
 80083b4:	4319      	orrs	r1, r3
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	691b      	ldr	r3, [r3, #16]
 80083ba:	3b01      	subs	r3, #1
 80083bc:	041b      	lsls	r3, r3, #16
 80083be:	4319      	orrs	r1, r3
 80083c0:	68bb      	ldr	r3, [r7, #8]
 80083c2:	699b      	ldr	r3, [r3, #24]
 80083c4:	3b01      	subs	r3, #1
 80083c6:	061b      	lsls	r3, r3, #24
 80083c8:	430b      	orrs	r3, r1
 80083ca:	431a      	orrs	r2, r3
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 80083d0:	2300      	movs	r3, #0
}
 80083d2:	4618      	mov	r0, r3
 80083d4:	3714      	adds	r7, #20
 80083d6:	46bd      	mov	sp, r7
 80083d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083dc:	4770      	bx	lr
 80083de:	bf00      	nop
 80083e0:	ff0f0fff 	.word	0xff0f0fff

080083e4 <__libc_init_array>:
 80083e4:	b570      	push	{r4, r5, r6, lr}
 80083e6:	4d0d      	ldr	r5, [pc, #52]	; (800841c <__libc_init_array+0x38>)
 80083e8:	4c0d      	ldr	r4, [pc, #52]	; (8008420 <__libc_init_array+0x3c>)
 80083ea:	1b64      	subs	r4, r4, r5
 80083ec:	10a4      	asrs	r4, r4, #2
 80083ee:	2600      	movs	r6, #0
 80083f0:	42a6      	cmp	r6, r4
 80083f2:	d109      	bne.n	8008408 <__libc_init_array+0x24>
 80083f4:	4d0b      	ldr	r5, [pc, #44]	; (8008424 <__libc_init_array+0x40>)
 80083f6:	4c0c      	ldr	r4, [pc, #48]	; (8008428 <__libc_init_array+0x44>)
 80083f8:	f000 f820 	bl	800843c <_init>
 80083fc:	1b64      	subs	r4, r4, r5
 80083fe:	10a4      	asrs	r4, r4, #2
 8008400:	2600      	movs	r6, #0
 8008402:	42a6      	cmp	r6, r4
 8008404:	d105      	bne.n	8008412 <__libc_init_array+0x2e>
 8008406:	bd70      	pop	{r4, r5, r6, pc}
 8008408:	f855 3b04 	ldr.w	r3, [r5], #4
 800840c:	4798      	blx	r3
 800840e:	3601      	adds	r6, #1
 8008410:	e7ee      	b.n	80083f0 <__libc_init_array+0xc>
 8008412:	f855 3b04 	ldr.w	r3, [r5], #4
 8008416:	4798      	blx	r3
 8008418:	3601      	adds	r6, #1
 800841a:	e7f2      	b.n	8008402 <__libc_init_array+0x1e>
 800841c:	08008494 	.word	0x08008494
 8008420:	08008494 	.word	0x08008494
 8008424:	08008494 	.word	0x08008494
 8008428:	08008498 	.word	0x08008498

0800842c <memset>:
 800842c:	4402      	add	r2, r0
 800842e:	4603      	mov	r3, r0
 8008430:	4293      	cmp	r3, r2
 8008432:	d100      	bne.n	8008436 <memset+0xa>
 8008434:	4770      	bx	lr
 8008436:	f803 1b01 	strb.w	r1, [r3], #1
 800843a:	e7f9      	b.n	8008430 <memset+0x4>

0800843c <_init>:
 800843c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800843e:	bf00      	nop
 8008440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008442:	bc08      	pop	{r3}
 8008444:	469e      	mov	lr, r3
 8008446:	4770      	bx	lr

08008448 <_fini>:
 8008448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800844a:	bf00      	nop
 800844c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800844e:	bc08      	pop	{r3}
 8008450:	469e      	mov	lr, r3
 8008452:	4770      	bx	lr
