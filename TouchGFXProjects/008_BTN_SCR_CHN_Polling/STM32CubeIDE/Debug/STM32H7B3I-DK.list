
STM32H7B3I-DK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00029780  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004058  08029a30  08029a30  00039a30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontSearchFlashSection 00000018  0802da88  0802da88  0003da88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0802daa0  0802daa0  0046a9f8  2**0
                  CONTENTS
  5 .ARM          00000000  0802daa0  0802daa0  0046a9f8  2**0
                  CONTENTS
  6 .preinit_array 00000000  0802daa0  0802daa0  0046a9f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000020  0802daa0  0802daa0  0003daa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000010  0802dac0  0802dac0  0003dac0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000128  24000000  0802dad0  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 CCMRAM        00005a00  24000128  0802dbf8  00040128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0002099c  24005b28  080335f8  00045b28  2**2
                  ALLOC
 12 ._user_heap_stack 00002004  240264c4  080335f8  000464c4  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0046a9f8  2**0
                  CONTENTS, READONLY
 14 FramebufferSection 000bf400  24040000  24040000  00050000  2**2
                  ALLOC
 15 FontFlashSection 00000954  90000000  90000000  00050000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 TextFlashSection 000000a4  90000954  90000954  00050954  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 17 ExtFlashSection 0041a000  900009f8  900009f8  000509f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 18 Video_RGB_Buffer 0005fa00  d0000000  d0000000  00470000  2**2
                  ALLOC
 19 .debug_line   00058d1f  00000000  00000000  0046aa26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_info   000bea60  00000000  00000000  004c3745  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_abbrev 00014579  00000000  00000000  005821a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_aranges 000048d8  00000000  00000000  00596720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    0017e104  00000000  00000000  0059aff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_ranges 000043e0  00000000  00000000  00719100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_macro  0004406a  00000000  00000000  0071d4e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .comment      000000cf  00000000  00000000  0076154a  2**0
                  CONTENTS, READONLY
 27 .debug_frame  00013f90  00000000  00000000  0076161c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24005b28 	.word	0x24005b28
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08029a18 	.word	0x08029a18

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24005b2c 	.word	0x24005b2c
 80002ec:	08029a18 	.word	0x08029a18

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000390:	f8df d034 	ldr.w	sp, [pc, #52]	; 80003c8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8000394:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000396:	e003      	b.n	80003a0 <LoopCopyDataInit>

08000398 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000398:	4b0c      	ldr	r3, [pc, #48]	; (80003cc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800039a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800039c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800039e:	3104      	adds	r1, #4

080003a0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80003a0:	480b      	ldr	r0, [pc, #44]	; (80003d0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80003a2:	4b0c      	ldr	r3, [pc, #48]	; (80003d4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80003a4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80003a6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80003a8:	d3f6      	bcc.n	8000398 <CopyDataInit>
  ldr  r2, =_sbss
 80003aa:	4a0b      	ldr	r2, [pc, #44]	; (80003d8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80003ac:	e002      	b.n	80003b4 <LoopFillZerobss>

080003ae <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80003ae:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80003b0:	f842 3b04 	str.w	r3, [r2], #4

080003b4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80003b4:	4b09      	ldr	r3, [pc, #36]	; (80003dc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80003b6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80003b8:	d3f9      	bcc.n	80003ae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80003ba:	f00c fd6f 	bl	800ce9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80003be:	f028 fab1 	bl	8028924 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80003c2:	f000 f8a3 	bl	800050c <main>
  bx  lr
 80003c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80003c8:	24040000 	.word	0x24040000
  ldr  r3, =_sidata
 80003cc:	0802dad0 	.word	0x0802dad0
  ldr  r0, =_sdata
 80003d0:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 80003d4:	24000128 	.word	0x24000128
  ldr  r2, =_sbss
 80003d8:	24005b28 	.word	0x24005b28
  ldr  r3, = _ebss
 80003dc:	240264c4 	.word	0x240264c4

080003e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80003e0:	e7fe      	b.n	80003e0 <ADC_IRQHandler>

080003e2 <MX_LIBJPEG_Init>:
/* USER CODE BEGIN 2 */
/* USER CODE END 2 */

/* LIBJPEG init function */
void MX_LIBJPEG_Init(void)
{
 80003e2:	b480      	push	{r7}
 80003e4:	af00      	add	r7, sp, #0
  */

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 80003e6:	bf00      	nop
 80003e8:	46bd      	mov	sp, r7
 80003ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ee:	4770      	bx	lr

080003f0 <_ZN8touchgfx16ButtonControllerD1Ev>:
/** Interface for sampling external key events. */
class ButtonController
{
public:
    /** Finalizes an instance of the ButtonController class. */
    virtual ~ButtonController()
 80003f0:	b480      	push	{r7}
 80003f2:	b083      	sub	sp, #12
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]
    {
 80003f8:	4a04      	ldr	r2, [pc, #16]	; (800040c <_ZN8touchgfx16ButtonControllerD1Ev+0x1c>)
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	601a      	str	r2, [r3, #0]
    }
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	4618      	mov	r0, r3
 8000402:	370c      	adds	r7, #12
 8000404:	46bd      	mov	sp, r7
 8000406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040a:	4770      	bx	lr
 800040c:	0802bea4 	.word	0x0802bea4

08000410 <_ZN8touchgfx16ButtonControllerD0Ev>:
    virtual ~ButtonController()
 8000410:	b580      	push	{r7, lr}
 8000412:	b082      	sub	sp, #8
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
    }
 8000418:	6878      	ldr	r0, [r7, #4]
 800041a:	f7ff ffe9 	bl	80003f0 <_ZN8touchgfx16ButtonControllerD1Ev>
 800041e:	2104      	movs	r1, #4
 8000420:	6878      	ldr	r0, [r7, #4]
 8000422:	f028 fa06 	bl	8028832 <_ZdlPvj>
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	4618      	mov	r0, r3
 800042a:	3708      	adds	r7, #8
 800042c:	46bd      	mov	sp, r7
 800042e:	bd80      	pop	{r7, pc}

08000430 <_ZN8touchgfx16ButtonController5resetEv>:
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sample(uint8_t& key) = 0;

    /** Resets button controller. Does nothing in the default implementation. */
    virtual void reset()
 8000430:	b480      	push	{r7}
 8000432:	b083      	sub	sp, #12
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
    {
    }
 8000438:	bf00      	nop
 800043a:	370c      	adds	r7, #12
 800043c:	46bd      	mov	sp, r7
 800043e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000442:	4770      	bx	lr

08000444 <_ZN18MyButtonController4initEv>:
 *
 * This function sets the `previousState` to 0xFF, indicating that no button press
 * has been detected initially.
 */
void MyButtonController::init()
{
 8000444:	b480      	push	{r7}
 8000446:	b083      	sub	sp, #12
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
    previousState = 0xFF;  // Default to no press detected
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	22ff      	movs	r2, #255	; 0xff
 8000450:	711a      	strb	r2, [r3, #4]
}
 8000452:	bf00      	nop
 8000454:	370c      	adds	r7, #12
 8000456:	46bd      	mov	sp, r7
 8000458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045c:	4770      	bx	lr
	...

08000460 <_ZN18MyButtonController6sampleERh>:
 *
 * @param[out] key Reference to store the detected key press (if any).
 * @return true if a button press is detected, false otherwise.
 */
bool MyButtonController::sample(uint8_t &key)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b082      	sub	sp, #8
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
 8000468:	6039      	str	r1, [r7, #0]
    // Read the button state (active high: GPIO_PIN_SET when pressed)
    if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET)
 800046a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800046e:	4810      	ldr	r0, [pc, #64]	; (80004b0 <_ZN18MyButtonController6sampleERh+0x50>)
 8000470:	f00d fd52 	bl	800df18 <HAL_GPIO_ReadPin>
 8000474:	4603      	mov	r3, r0
 8000476:	2b01      	cmp	r3, #1
 8000478:	bf0c      	ite	eq
 800047a:	2301      	moveq	r3, #1
 800047c:	2300      	movne	r3, #0
 800047e:	b2db      	uxtb	r3, r3
 8000480:	2b00      	cmp	r3, #0
 8000482:	d00d      	beq.n	80004a0 <_ZN18MyButtonController6sampleERh+0x40>
    {
        // Check if this is a new press (previous state was unpressed)
        if (previousState == 0xFF)
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	791b      	ldrb	r3, [r3, #4]
 8000488:	2bff      	cmp	r3, #255	; 0xff
 800048a:	d107      	bne.n	800049c <_ZN18MyButtonController6sampleERh+0x3c>
        {
            previousState = 0x00;  // Mark as pressed
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	2200      	movs	r2, #0
 8000490:	711a      	strb	r2, [r3, #4]
            key = 1;  // Assign a key value (TouchGFX interaction gets triggered)
 8000492:	683b      	ldr	r3, [r7, #0]
 8000494:	2201      	movs	r2, #1
 8000496:	701a      	strb	r2, [r3, #0]
            return true;  // Indicate a valid key press
 8000498:	2301      	movs	r3, #1
 800049a:	e005      	b.n	80004a8 <_ZN18MyButtonController6sampleERh+0x48>
        }
        // Button is still pressed; do not register another press immediately
        return false;
 800049c:	2300      	movs	r3, #0
 800049e:	e003      	b.n	80004a8 <_ZN18MyButtonController6sampleERh+0x48>
    }

    // Reset state when button is released
    previousState = 0xFF;
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	22ff      	movs	r2, #255	; 0xff
 80004a4:	711a      	strb	r2, [r3, #4]
    return false;
 80004a6:	2300      	movs	r3, #0
}
 80004a8:	4618      	mov	r0, r3
 80004aa:	3708      	adds	r7, #8
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bd80      	pop	{r7, pc}
 80004b0:	58020800 	.word	0x58020800

080004b4 <_ZN18MyButtonControllerD1Ev>:
#ifndef MyBUTTONCONTROLLER_HPP_
#define MyBUTTONCONTROLLER_HPP_

#include <platform/driver/button/ButtonController.hpp>

class MyButtonController : public touchgfx::ButtonController
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b082      	sub	sp, #8
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
 80004bc:	4a05      	ldr	r2, [pc, #20]	; (80004d4 <_ZN18MyButtonControllerD1Ev+0x20>)
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	601a      	str	r2, [r3, #0]
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	4618      	mov	r0, r3
 80004c6:	f7ff ff93 	bl	80003f0 <_ZN8touchgfx16ButtonControllerD1Ev>
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	4618      	mov	r0, r3
 80004ce:	3708      	adds	r7, #8
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	0802be88 	.word	0x0802be88

080004d8 <_ZN18MyButtonControllerD0Ev>:
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
 80004e0:	6878      	ldr	r0, [r7, #4]
 80004e2:	f7ff ffe7 	bl	80004b4 <_ZN18MyButtonControllerD1Ev>
 80004e6:	2108      	movs	r1, #8
 80004e8:	6878      	ldr	r0, [r7, #4]
 80004ea:	f028 f9a2 	bl	8028832 <_ZdlPvj>
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	4618      	mov	r0, r3
 80004f2:	3708      	adds	r7, #8
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bd80      	pop	{r7, pc}

080004f8 <vApplicationIdleHook>:
/* Hook prototypes */
void vApplicationIdleHook(void);

/* USER CODE BEGIN 2 */
void vApplicationIdleHook(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
    vTaskDelete() API function (as this demo application does) then it is also
    important that vApplicationIdleHook() is permitted to return to its calling
    function, because it is the responsibility of the idle task to clean up
    memory allocated by the kernel to any task that has since been deleted. */

    vTaskSetApplicationTaskTag(NULL, IdleTaskHook);
 80004fc:	4902      	ldr	r1, [pc, #8]	; (8000508 <vApplicationIdleHook+0x10>)
 80004fe:	2000      	movs	r0, #0
 8000500:	f018 f862 	bl	80185c8 <vTaskSetApplicationTaskTag>
}
 8000504:	bf00      	nop
 8000506:	bd80      	pop	{r7, pc}
 8000508:	08002605 	.word	0x08002605

0800050c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b084      	sub	sp, #16
 8000510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000512:	f000 fccf 	bl	8000eb4 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000516:	4b52      	ldr	r3, [pc, #328]	; (8000660 <main+0x154>)
 8000518:	695b      	ldr	r3, [r3, #20]
 800051a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800051e:	2b00      	cmp	r3, #0
 8000520:	d11b      	bne.n	800055a <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000522:	f3bf 8f4f 	dsb	sy
}
 8000526:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000528:	f3bf 8f6f 	isb	sy
}
 800052c:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800052e:	4b4c      	ldr	r3, [pc, #304]	; (8000660 <main+0x154>)
 8000530:	2200      	movs	r2, #0
 8000532:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000536:	f3bf 8f4f 	dsb	sy
}
 800053a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800053c:	f3bf 8f6f 	isb	sy
}
 8000540:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000542:	4b47      	ldr	r3, [pc, #284]	; (8000660 <main+0x154>)
 8000544:	695b      	ldr	r3, [r3, #20]
 8000546:	4a46      	ldr	r2, [pc, #280]	; (8000660 <main+0x154>)
 8000548:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800054c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800054e:	f3bf 8f4f 	dsb	sy
}
 8000552:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000554:	f3bf 8f6f 	isb	sy
}
 8000558:	e000      	b.n	800055c <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800055a:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800055c:	4b40      	ldr	r3, [pc, #256]	; (8000660 <main+0x154>)
 800055e:	695b      	ldr	r3, [r3, #20]
 8000560:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000564:	2b00      	cmp	r3, #0
 8000566:	d138      	bne.n	80005da <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000568:	4b3d      	ldr	r3, [pc, #244]	; (8000660 <main+0x154>)
 800056a:	2200      	movs	r2, #0
 800056c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000570:	f3bf 8f4f 	dsb	sy
}
 8000574:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000576:	4b3a      	ldr	r3, [pc, #232]	; (8000660 <main+0x154>)
 8000578:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800057c:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800057e:	68fb      	ldr	r3, [r7, #12]
 8000580:	0b5b      	lsrs	r3, r3, #13
 8000582:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000586:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	08db      	lsrs	r3, r3, #3
 800058c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000590:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000592:	68bb      	ldr	r3, [r7, #8]
 8000594:	015a      	lsls	r2, r3, #5
 8000596:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800059a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800059c:	687a      	ldr	r2, [r7, #4]
 800059e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80005a0:	492f      	ldr	r1, [pc, #188]	; (8000660 <main+0x154>)
 80005a2:	4313      	orrs	r3, r2
 80005a4:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	1e5a      	subs	r2, r3, #1
 80005ac:	607a      	str	r2, [r7, #4]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d1ef      	bne.n	8000592 <main+0x86>
    } while(sets-- != 0U);
 80005b2:	68bb      	ldr	r3, [r7, #8]
 80005b4:	1e5a      	subs	r2, r3, #1
 80005b6:	60ba      	str	r2, [r7, #8]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d1e5      	bne.n	8000588 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 80005bc:	f3bf 8f4f 	dsb	sy
}
 80005c0:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80005c2:	4b27      	ldr	r3, [pc, #156]	; (8000660 <main+0x154>)
 80005c4:	695b      	ldr	r3, [r3, #20]
 80005c6:	4a26      	ldr	r2, [pc, #152]	; (8000660 <main+0x154>)
 80005c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005cc:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80005ce:	f3bf 8f4f 	dsb	sy
}
 80005d2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005d4:	f3bf 8f6f 	isb	sy
}
 80005d8:	e000      	b.n	80005dc <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80005da:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005dc:	f00c fcc0 	bl	800cf60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e0:	f000 f858 	bl	8000694 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e4:	f000 facc 	bl	8000b80 <MX_GPIO_Init>
  MX_MDMA_Init();
 80005e8:	f000 fa58 	bl	8000a9c <MX_MDMA_Init>
  MX_DMA2D_Init();
 80005ec:	f000 f8e8 	bl	80007c0 <MX_DMA2D_Init>
  MX_LTDC_Init();
 80005f0:	f000 f974 	bl	80008dc <MX_LTDC_Init>
  MX_I2C4_Init();
 80005f4:	f000 f91e 	bl	8000834 <MX_I2C4_Init>
  MX_OCTOSPI1_Init();
 80005f8:	f000 f9f2 	bl	80009e0 <MX_OCTOSPI1_Init>
  MX_FMC_Init();
 80005fc:	f000 fa6e 	bl	8000adc <MX_FMC_Init>
  MX_CRC_Init();
 8000600:	f000 f8bc 	bl	800077c <MX_CRC_Init>
  MX_JPEG_Init();
 8000604:	f000 f956 	bl	80008b4 <MX_JPEG_Init>
  MX_LIBJPEG_Init();
 8000608:	f7ff feeb 	bl	80003e2 <MX_LIBJPEG_Init>
  MX_TouchGFX_Init();
 800060c:	f001 fa1f 	bl	8001a4e <MX_TouchGFX_Init>
  /* Call PreOsInit function */
  MX_TouchGFX_PreOSInit();
 8000610:	f001 fa16 	bl	8001a40 <MX_TouchGFX_PreOSInit>
  /* USER CODE BEGIN 2 */
  SDRAM_Initialization_Sequence(&hsdram1, &command);
 8000614:	4913      	ldr	r1, [pc, #76]	; (8000664 <main+0x158>)
 8000616:	4814      	ldr	r0, [pc, #80]	; (8000668 <main+0x15c>)
 8000618:	f000 fbe6 	bl	8000de8 <SDRAM_Initialization_Sequence>
  
  *(__IO uint32_t*)(0xD0000000) = 0x11111122;
 800061c:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8000620:	4a12      	ldr	r2, [pc, #72]	; (800066c <main+0x160>)
 8000622:	601a      	str	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000624:	f015 f9da 	bl	80159dc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000628:	4a11      	ldr	r2, [pc, #68]	; (8000670 <main+0x164>)
 800062a:	2100      	movs	r1, #0
 800062c:	4811      	ldr	r0, [pc, #68]	; (8000674 <main+0x168>)
 800062e:	f015 fa1f 	bl	8015a70 <osThreadNew>
 8000632:	4603      	mov	r3, r0
 8000634:	4a10      	ldr	r2, [pc, #64]	; (8000678 <main+0x16c>)
 8000636:	6013      	str	r3, [r2, #0]

  /* creation of GUI_Task */
  GUI_TaskHandle = osThreadNew(TouchGFX_Task, NULL, &GUI_Task_attributes);
 8000638:	4a10      	ldr	r2, [pc, #64]	; (800067c <main+0x170>)
 800063a:	2100      	movs	r1, #0
 800063c:	4810      	ldr	r0, [pc, #64]	; (8000680 <main+0x174>)
 800063e:	f015 fa17 	bl	8015a70 <osThreadNew>
 8000642:	4603      	mov	r3, r0
 8000644:	4a0f      	ldr	r2, [pc, #60]	; (8000684 <main+0x178>)
 8000646:	6013      	str	r3, [r2, #0]

  /* creation of videoTask */
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
 8000648:	4a0f      	ldr	r2, [pc, #60]	; (8000688 <main+0x17c>)
 800064a:	2100      	movs	r1, #0
 800064c:	480f      	ldr	r0, [pc, #60]	; (800068c <main+0x180>)
 800064e:	f015 fa0f 	bl	8015a70 <osThreadNew>
 8000652:	4603      	mov	r3, r0
 8000654:	4a0e      	ldr	r2, [pc, #56]	; (8000690 <main+0x184>)
 8000656:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000658:	f015 f9e4 	bl	8015a24 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800065c:	e7fe      	b.n	800065c <main+0x150>
 800065e:	bf00      	nop
 8000660:	e000ed00 	.word	0xe000ed00
 8000664:	24005e98 	.word	0x24005e98
 8000668:	24005e58 	.word	0x24005e58
 800066c:	11111122 	.word	0x11111122
 8000670:	0802beb8 	.word	0x0802beb8
 8000674:	08000ea5 	.word	0x08000ea5
 8000678:	24005e8c 	.word	0x24005e8c
 800067c:	0802bedc 	.word	0x0802bedc
 8000680:	08001a5f 	.word	0x08001a5f
 8000684:	24005e90 	.word	0x24005e90
 8000688:	0802bf00 	.word	0x0802bf00
 800068c:	08005c2d 	.word	0x08005c2d
 8000690:	24005e94 	.word	0x24005e94

08000694 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b09c      	sub	sp, #112	; 0x70
 8000698:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800069e:	224c      	movs	r2, #76	; 0x4c
 80006a0:	2100      	movs	r1, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f028 f984 	bl	80289b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a8:	1d3b      	adds	r3, r7, #4
 80006aa:	2220      	movs	r2, #32
 80006ac:	2100      	movs	r1, #0
 80006ae:	4618      	mov	r0, r3
 80006b0:	f028 f97e 	bl	80289b0 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 80006b4:	4b2f      	ldr	r3, [pc, #188]	; (8000774 <SystemClock_Config+0xe0>)
 80006b6:	f04f 32ff 	mov.w	r2, #4294967295
 80006ba:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80006be:	2004      	movs	r0, #4
 80006c0:	f012 f958 	bl	8012974 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80006c4:	2300      	movs	r3, #0
 80006c6:	603b      	str	r3, [r7, #0]
 80006c8:	4b2b      	ldr	r3, [pc, #172]	; (8000778 <SystemClock_Config+0xe4>)
 80006ca:	699b      	ldr	r3, [r3, #24]
 80006cc:	4a2a      	ldr	r2, [pc, #168]	; (8000778 <SystemClock_Config+0xe4>)
 80006ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006d2:	6193      	str	r3, [r2, #24]
 80006d4:	4b28      	ldr	r3, [pc, #160]	; (8000778 <SystemClock_Config+0xe4>)
 80006d6:	699b      	ldr	r3, [r3, #24]
 80006d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006dc:	603b      	str	r3, [r7, #0]
 80006de:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006e0:	bf00      	nop
 80006e2:	4b25      	ldr	r3, [pc, #148]	; (8000778 <SystemClock_Config+0xe4>)
 80006e4:	699b      	ldr	r3, [r3, #24]
 80006e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80006ee:	d1f8      	bne.n	80006e2 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006f0:	2301      	movs	r3, #1
 80006f2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006f8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006fa:	2302      	movs	r3, #2
 80006fc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006fe:	2302      	movs	r3, #2
 8000700:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8000702:	230c      	movs	r3, #12
 8000704:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 280;
 8000706:	f44f 738c 	mov.w	r3, #280	; 0x118
 800070a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800070c:	2302      	movs	r3, #2
 800070e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000710:	2302      	movs	r3, #2
 8000712:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000714:	2302      	movs	r3, #2
 8000716:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000718:	2304      	movs	r3, #4
 800071a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800071c:	2300      	movs	r3, #0
 800071e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000720:	2300      	movs	r3, #0
 8000722:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000724:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000728:	4618      	mov	r0, r3
 800072a:	f012 f97d 	bl	8012a28 <HAL_RCC_OscConfig>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000734:	f000 fc1e 	bl	8000f74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000738:	233f      	movs	r3, #63	; 0x3f
 800073a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800073c:	2303      	movs	r3, #3
 800073e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000740:	2300      	movs	r3, #0
 8000742:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000744:	2308      	movs	r3, #8
 8000746:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000748:	2300      	movs	r3, #0
 800074a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800074c:	2300      	movs	r3, #0
 800074e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000750:	2300      	movs	r3, #0
 8000752:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000754:	2300      	movs	r3, #0
 8000756:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000758:	1d3b      	adds	r3, r7, #4
 800075a:	2103      	movs	r1, #3
 800075c:	4618      	mov	r0, r3
 800075e:	f012 fd95 	bl	801328c <HAL_RCC_ClockConfig>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8000768:	f000 fc04 	bl	8000f74 <Error_Handler>
  }
}
 800076c:	bf00      	nop
 800076e:	3770      	adds	r7, #112	; 0x70
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	58024400 	.word	0x58024400
 8000778:	58024800 	.word	0x58024800

0800077c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000780:	4b0d      	ldr	r3, [pc, #52]	; (80007b8 <MX_CRC_Init+0x3c>)
 8000782:	4a0e      	ldr	r2, [pc, #56]	; (80007bc <MX_CRC_Init+0x40>)
 8000784:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000786:	4b0c      	ldr	r3, [pc, #48]	; (80007b8 <MX_CRC_Init+0x3c>)
 8000788:	2200      	movs	r2, #0
 800078a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800078c:	4b0a      	ldr	r3, [pc, #40]	; (80007b8 <MX_CRC_Init+0x3c>)
 800078e:	2200      	movs	r2, #0
 8000790:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000792:	4b09      	ldr	r3, [pc, #36]	; (80007b8 <MX_CRC_Init+0x3c>)
 8000794:	2200      	movs	r2, #0
 8000796:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000798:	4b07      	ldr	r3, [pc, #28]	; (80007b8 <MX_CRC_Init+0x3c>)
 800079a:	2200      	movs	r2, #0
 800079c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800079e:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <MX_CRC_Init+0x3c>)
 80007a0:	2201      	movs	r2, #1
 80007a2:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80007a4:	4804      	ldr	r0, [pc, #16]	; (80007b8 <MX_CRC_Init+0x3c>)
 80007a6:	f00c fde9 	bl	800d37c <HAL_CRC_Init>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80007b0:	f000 fbe0 	bl	8000f74 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80007b4:	bf00      	nop
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	24005b44 	.word	0x24005b44
 80007bc:	40023000 	.word	0x40023000

080007c0 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80007c4:	4b19      	ldr	r3, [pc, #100]	; (800082c <MX_DMA2D_Init+0x6c>)
 80007c6:	4a1a      	ldr	r2, [pc, #104]	; (8000830 <MX_DMA2D_Init+0x70>)
 80007c8:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80007ca:	4b18      	ldr	r3, [pc, #96]	; (800082c <MX_DMA2D_Init+0x6c>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 80007d0:	4b16      	ldr	r3, [pc, #88]	; (800082c <MX_DMA2D_Init+0x6c>)
 80007d2:	2202      	movs	r2, #2
 80007d4:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80007d6:	4b15      	ldr	r3, [pc, #84]	; (800082c <MX_DMA2D_Init+0x6c>)
 80007d8:	2200      	movs	r2, #0
 80007da:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80007dc:	4b13      	ldr	r3, [pc, #76]	; (800082c <MX_DMA2D_Init+0x6c>)
 80007de:	2200      	movs	r2, #0
 80007e0:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 80007e2:	4b12      	ldr	r3, [pc, #72]	; (800082c <MX_DMA2D_Init+0x6c>)
 80007e4:	2202      	movs	r2, #2
 80007e6:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80007e8:	4b10      	ldr	r3, [pc, #64]	; (800082c <MX_DMA2D_Init+0x6c>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80007ee:	4b0f      	ldr	r3, [pc, #60]	; (800082c <MX_DMA2D_Init+0x6c>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	651a      	str	r2, [r3, #80]	; 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 80007f4:	4b0d      	ldr	r3, [pc, #52]	; (800082c <MX_DMA2D_Init+0x6c>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	655a      	str	r2, [r3, #84]	; 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 80007fa:	4b0c      	ldr	r3, [pc, #48]	; (800082c <MX_DMA2D_Init+0x6c>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	659a      	str	r2, [r3, #88]	; 0x58
  hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
 8000800:	4b0a      	ldr	r3, [pc, #40]	; (800082c <MX_DMA2D_Init+0x6c>)
 8000802:	2200      	movs	r2, #0
 8000804:	65da      	str	r2, [r3, #92]	; 0x5c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000806:	4809      	ldr	r0, [pc, #36]	; (800082c <MX_DMA2D_Init+0x6c>)
 8000808:	f00c feaa 	bl	800d560 <HAL_DMA2D_Init>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000812:	f000 fbaf 	bl	8000f74 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000816:	2101      	movs	r1, #1
 8000818:	4804      	ldr	r0, [pc, #16]	; (800082c <MX_DMA2D_Init+0x6c>)
 800081a:	f00d f815 	bl	800d848 <HAL_DMA2D_ConfigLayer>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_DMA2D_Init+0x68>
  {
    Error_Handler();
 8000824:	f000 fba6 	bl	8000f74 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000828:	bf00      	nop
 800082a:	bd80      	pop	{r7, pc}
 800082c:	24005b68 	.word	0x24005b68
 8000830:	52001000 	.word	0x52001000

08000834 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000838:	4b1b      	ldr	r3, [pc, #108]	; (80008a8 <MX_I2C4_Init+0x74>)
 800083a:	4a1c      	ldr	r2, [pc, #112]	; (80008ac <MX_I2C4_Init+0x78>)
 800083c:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x30808BD0;
 800083e:	4b1a      	ldr	r3, [pc, #104]	; (80008a8 <MX_I2C4_Init+0x74>)
 8000840:	4a1b      	ldr	r2, [pc, #108]	; (80008b0 <MX_I2C4_Init+0x7c>)
 8000842:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000844:	4b18      	ldr	r3, [pc, #96]	; (80008a8 <MX_I2C4_Init+0x74>)
 8000846:	2200      	movs	r2, #0
 8000848:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800084a:	4b17      	ldr	r3, [pc, #92]	; (80008a8 <MX_I2C4_Init+0x74>)
 800084c:	2201      	movs	r2, #1
 800084e:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000850:	4b15      	ldr	r3, [pc, #84]	; (80008a8 <MX_I2C4_Init+0x74>)
 8000852:	2200      	movs	r2, #0
 8000854:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000856:	4b14      	ldr	r3, [pc, #80]	; (80008a8 <MX_I2C4_Init+0x74>)
 8000858:	2200      	movs	r2, #0
 800085a:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800085c:	4b12      	ldr	r3, [pc, #72]	; (80008a8 <MX_I2C4_Init+0x74>)
 800085e:	2200      	movs	r2, #0
 8000860:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000862:	4b11      	ldr	r3, [pc, #68]	; (80008a8 <MX_I2C4_Init+0x74>)
 8000864:	2200      	movs	r2, #0
 8000866:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000868:	4b0f      	ldr	r3, [pc, #60]	; (80008a8 <MX_I2C4_Init+0x74>)
 800086a:	2200      	movs	r2, #0
 800086c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 800086e:	480e      	ldr	r0, [pc, #56]	; (80008a8 <MX_I2C4_Init+0x74>)
 8000870:	f00d fbc2 	bl	800dff8 <HAL_I2C_Init>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 800087a:	f000 fb7b 	bl	8000f74 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 800087e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000882:	4809      	ldr	r0, [pc, #36]	; (80008a8 <MX_I2C4_Init+0x74>)
 8000884:	f00e f978 	bl	800eb78 <HAL_I2CEx_ConfigAnalogFilter>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_I2C4_Init+0x5e>
  {
    Error_Handler();
 800088e:	f000 fb71 	bl	8000f74 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000892:	2100      	movs	r1, #0
 8000894:	4804      	ldr	r0, [pc, #16]	; (80008a8 <MX_I2C4_Init+0x74>)
 8000896:	f00e f9ba 	bl	800ec0e <HAL_I2CEx_ConfigDigitalFilter>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_I2C4_Init+0x70>
  {
    Error_Handler();
 80008a0:	f000 fb68 	bl	8000f74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 80008a4:	bf00      	nop
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	24005bd0 	.word	0x24005bd0
 80008ac:	58001c00 	.word	0x58001c00
 80008b0:	30808bd0 	.word	0x30808bd0

080008b4 <MX_JPEG_Init>:
  * @brief JPEG Initialization Function
  * @param None
  * @retval None
  */
static void MX_JPEG_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE END JPEG_Init 0 */

  /* USER CODE BEGIN JPEG_Init 1 */

  /* USER CODE END JPEG_Init 1 */
  hjpeg.Instance = JPEG;
 80008b8:	4b06      	ldr	r3, [pc, #24]	; (80008d4 <MX_JPEG_Init+0x20>)
 80008ba:	4a07      	ldr	r2, [pc, #28]	; (80008d8 <MX_JPEG_Init+0x24>)
 80008bc:	601a      	str	r2, [r3, #0]
  if (HAL_JPEG_Init(&hjpeg) != HAL_OK)
 80008be:	4805      	ldr	r0, [pc, #20]	; (80008d4 <MX_JPEG_Init+0x20>)
 80008c0:	f00e f9f2 	bl	800eca8 <HAL_JPEG_Init>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_JPEG_Init+0x1a>
  {
    Error_Handler();
 80008ca:	f000 fb53 	bl	8000f74 <Error_Handler>
  }
  /* USER CODE BEGIN JPEG_Init 2 */

  /* USER CODE END JPEG_Init 2 */

}
 80008ce:	bf00      	nop
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	24005c24 	.word	0x24005c24
 80008d8:	52003000 	.word	0x52003000

080008dc <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b08e      	sub	sp, #56	; 0x38
 80008e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80008e2:	1d3b      	adds	r3, r7, #4
 80008e4:	2234      	movs	r2, #52	; 0x34
 80008e6:	2100      	movs	r1, #0
 80008e8:	4618      	mov	r0, r3
 80008ea:	f028 f861 	bl	80289b0 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80008ee:	4b3a      	ldr	r3, [pc, #232]	; (80009d8 <MX_LTDC_Init+0xfc>)
 80008f0:	4a3a      	ldr	r2, [pc, #232]	; (80009dc <MX_LTDC_Init+0x100>)
 80008f2:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80008f4:	4b38      	ldr	r3, [pc, #224]	; (80009d8 <MX_LTDC_Init+0xfc>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80008fa:	4b37      	ldr	r3, [pc, #220]	; (80009d8 <MX_LTDC_Init+0xfc>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000900:	4b35      	ldr	r3, [pc, #212]	; (80009d8 <MX_LTDC_Init+0xfc>)
 8000902:	2200      	movs	r2, #0
 8000904:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000906:	4b34      	ldr	r3, [pc, #208]	; (80009d8 <MX_LTDC_Init+0xfc>)
 8000908:	2200      	movs	r2, #0
 800090a:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 800090c:	4b32      	ldr	r3, [pc, #200]	; (80009d8 <MX_LTDC_Init+0xfc>)
 800090e:	2228      	movs	r2, #40	; 0x28
 8000910:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8000912:	4b31      	ldr	r3, [pc, #196]	; (80009d8 <MX_LTDC_Init+0xfc>)
 8000914:	2209      	movs	r2, #9
 8000916:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 42;
 8000918:	4b2f      	ldr	r3, [pc, #188]	; (80009d8 <MX_LTDC_Init+0xfc>)
 800091a:	222a      	movs	r2, #42	; 0x2a
 800091c:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 800091e:	4b2e      	ldr	r3, [pc, #184]	; (80009d8 <MX_LTDC_Init+0xfc>)
 8000920:	220b      	movs	r2, #11
 8000922:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 522;
 8000924:	4b2c      	ldr	r3, [pc, #176]	; (80009d8 <MX_LTDC_Init+0xfc>)
 8000926:	f240 220a 	movw	r2, #522	; 0x20a
 800092a:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 800092c:	4b2a      	ldr	r3, [pc, #168]	; (80009d8 <MX_LTDC_Init+0xfc>)
 800092e:	f240 121b 	movw	r2, #283	; 0x11b
 8000932:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 554;
 8000934:	4b28      	ldr	r3, [pc, #160]	; (80009d8 <MX_LTDC_Init+0xfc>)
 8000936:	f240 222a 	movw	r2, #554	; 0x22a
 800093a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 800093c:	4b26      	ldr	r3, [pc, #152]	; (80009d8 <MX_LTDC_Init+0xfc>)
 800093e:	f240 121d 	movw	r2, #285	; 0x11d
 8000942:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000944:	4b24      	ldr	r3, [pc, #144]	; (80009d8 <MX_LTDC_Init+0xfc>)
 8000946:	2200      	movs	r2, #0
 8000948:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800094c:	4b22      	ldr	r3, [pc, #136]	; (80009d8 <MX_LTDC_Init+0xfc>)
 800094e:	2200      	movs	r2, #0
 8000950:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000954:	4b20      	ldr	r3, [pc, #128]	; (80009d8 <MX_LTDC_Init+0xfc>)
 8000956:	2200      	movs	r2, #0
 8000958:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800095c:	481e      	ldr	r0, [pc, #120]	; (80009d8 <MX_LTDC_Init+0xfc>)
 800095e:	f010 f913 	bl	8010b88 <HAL_LTDC_Init>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000968:	f000 fb04 	bl	8000f74 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800096c:	2300      	movs	r3, #0
 800096e:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8000970:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000974:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000976:	2300      	movs	r3, #0
 8000978:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 800097a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800097e:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8000980:	2301      	movs	r3, #1
 8000982:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000984:	23ff      	movs	r3, #255	; 0xff
 8000986:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000988:	2300      	movs	r3, #0
 800098a:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800098c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000990:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000992:	2305      	movs	r3, #5
 8000994:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8000996:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 800099a:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 800099c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80009a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 80009a2:	f44f 7388 	mov.w	r3, #272	; 0x110
 80009a6:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 255;
 80009a8:	23ff      	movs	r3, #255	; 0xff
 80009aa:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 80009ae:	2300      	movs	r3, #0
 80009b0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 80009b4:	2300      	movs	r3, #0
 80009b6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80009ba:	1d3b      	adds	r3, r7, #4
 80009bc:	2200      	movs	r2, #0
 80009be:	4619      	mov	r1, r3
 80009c0:	4805      	ldr	r0, [pc, #20]	; (80009d8 <MX_LTDC_Init+0xfc>)
 80009c2:	f010 fa69 	bl	8010e98 <HAL_LTDC_ConfigLayer>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 80009cc:	f000 fad2 	bl	8000f74 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80009d0:	bf00      	nop
 80009d2:	3738      	adds	r7, #56	; 0x38
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	24005d54 	.word	0x24005d54
 80009dc:	50001000 	.word	0x50001000

080009e0 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 80009e6:	4b2b      	ldr	r3, [pc, #172]	; (8000a94 <MX_OCTOSPI1_Init+0xb4>)
 80009e8:	4a2b      	ldr	r2, [pc, #172]	; (8000a98 <MX_OCTOSPI1_Init+0xb8>)
 80009ea:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 80009ec:	4b29      	ldr	r3, [pc, #164]	; (8000a94 <MX_OCTOSPI1_Init+0xb4>)
 80009ee:	2201      	movs	r2, #1
 80009f0:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 80009f2:	4b28      	ldr	r3, [pc, #160]	; (8000a94 <MX_OCTOSPI1_Init+0xb4>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MICRON;
 80009f8:	4b26      	ldr	r3, [pc, #152]	; (8000a94 <MX_OCTOSPI1_Init+0xb4>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 26;
 80009fe:	4b25      	ldr	r3, [pc, #148]	; (8000a94 <MX_OCTOSPI1_Init+0xb4>)
 8000a00:	221a      	movs	r2, #26
 8000a02:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 2;
 8000a04:	4b23      	ldr	r3, [pc, #140]	; (8000a94 <MX_OCTOSPI1_Init+0xb4>)
 8000a06:	2202      	movs	r2, #2
 8000a08:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8000a0a:	4b22      	ldr	r3, [pc, #136]	; (8000a94 <MX_OCTOSPI1_Init+0xb4>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8000a10:	4b20      	ldr	r3, [pc, #128]	; (8000a94 <MX_OCTOSPI1_Init+0xb4>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8000a16:	4b1f      	ldr	r3, [pc, #124]	; (8000a94 <MX_OCTOSPI1_Init+0xb4>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 3;
 8000a1c:	4b1d      	ldr	r3, [pc, #116]	; (8000a94 <MX_OCTOSPI1_Init+0xb4>)
 8000a1e:	2203      	movs	r2, #3
 8000a20:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8000a22:	4b1c      	ldr	r3, [pc, #112]	; (8000a94 <MX_OCTOSPI1_Init+0xb4>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8000a28:	4b1a      	ldr	r3, [pc, #104]	; (8000a94 <MX_OCTOSPI1_Init+0xb4>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 8000a2e:	4b19      	ldr	r3, [pc, #100]	; (8000a94 <MX_OCTOSPI1_Init+0xb4>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	631a      	str	r2, [r3, #48]	; 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8000a34:	4b17      	ldr	r3, [pc, #92]	; (8000a94 <MX_OCTOSPI1_Init+0xb4>)
 8000a36:	2208      	movs	r2, #8
 8000a38:	635a      	str	r2, [r3, #52]	; 0x34
  hospi1.Init.MaxTran = 0;
 8000a3a:	4b16      	ldr	r3, [pc, #88]	; (8000a94 <MX_OCTOSPI1_Init+0xb4>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	639a      	str	r2, [r3, #56]	; 0x38
  hospi1.Init.Refresh = 0;
 8000a40:	4b14      	ldr	r3, [pc, #80]	; (8000a94 <MX_OCTOSPI1_Init+0xb4>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8000a46:	4813      	ldr	r0, [pc, #76]	; (8000a94 <MX_OCTOSPI1_Init+0xb4>)
 8000a48:	f011 f834 	bl	8011ab4 <HAL_OSPI_Init>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <MX_OCTOSPI1_Init+0x76>
  {
    Error_Handler();
 8000a52:	f000 fa8f 	bl	8000f74 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */
  BSP_OSPI_NOR_Init_t Flash;
  Flash.InterfaceMode = BSP_OSPI_NOR_OPI_MODE;
 8000a56:	2301      	movs	r3, #1
 8000a58:	703b      	strb	r3, [r7, #0]
  Flash.TransferRate  = BSP_OSPI_NOR_DTR_TRANSFER;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	707b      	strb	r3, [r7, #1]
  BSP_OSPI_NOR_DeInit(0);
 8000a5e:	2000      	movs	r0, #0
 8000a60:	f00b fa0a 	bl	800be78 <BSP_OSPI_NOR_DeInit>
  int32_t RetVal = BSP_OSPI_NOR_Init(0, &Flash);
 8000a64:	463b      	mov	r3, r7
 8000a66:	4619      	mov	r1, r3
 8000a68:	2000      	movs	r0, #0
 8000a6a:	f00b f97b 	bl	800bd64 <BSP_OSPI_NOR_Init>
 8000a6e:	6078      	str	r0, [r7, #4]
  if(RetVal != BSP_ERROR_NONE)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_OCTOSPI1_Init+0x9a>
  {
    Error_Handler();
 8000a76:	f000 fa7d 	bl	8000f74 <Error_Handler>
  }
  RetVal = BSP_OSPI_NOR_EnableMemoryMappedMode(0);
 8000a7a:	2000      	movs	r0, #0
 8000a7c:	f00b fa98 	bl	800bfb0 <BSP_OSPI_NOR_EnableMemoryMappedMode>
 8000a80:	6078      	str	r0, [r7, #4]
  if(RetVal != BSP_ERROR_NONE)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_OCTOSPI1_Init+0xac>
  {
    Error_Handler();
 8000a88:	f000 fa74 	bl	8000f74 <Error_Handler>
  }
  /* USER CODE END OCTOSPI1_Init 2 */

}
 8000a8c:	bf00      	nop
 8000a8e:	3708      	adds	r7, #8
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	24005dfc 	.word	0x24005dfc
 8000a98:	52005000 	.word	0x52005000

08000a9c <MX_MDMA_Init>:

/**
  * Enable MDMA controller clock
  */
static void MX_MDMA_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0

  /* MDMA controller clock enable */
  __HAL_RCC_MDMA_CLK_ENABLE();
 8000aa2:	4b0d      	ldr	r3, [pc, #52]	; (8000ad8 <MX_MDMA_Init+0x3c>)
 8000aa4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8000aa8:	4a0b      	ldr	r2, [pc, #44]	; (8000ad8 <MX_MDMA_Init+0x3c>)
 8000aaa:	f043 0301 	orr.w	r3, r3, #1
 8000aae:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 8000ab2:	4b09      	ldr	r3, [pc, #36]	; (8000ad8 <MX_MDMA_Init+0x3c>)
 8000ab4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8000ab8:	f003 0301 	and.w	r3, r3, #1
 8000abc:	607b      	str	r3, [r7, #4]
 8000abe:	687b      	ldr	r3, [r7, #4]
  /* Local variables */

  /* MDMA interrupt initialization */
  /* MDMA_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	2105      	movs	r1, #5
 8000ac4:	207a      	movs	r0, #122	; 0x7a
 8000ac6:	f00c fba7 	bl	800d218 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 8000aca:	207a      	movs	r0, #122	; 0x7a
 8000acc:	f00c fbbe 	bl	800d24c <HAL_NVIC_EnableIRQ>

}
 8000ad0:	bf00      	nop
 8000ad2:	3708      	adds	r7, #8
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	58024400 	.word	0x58024400

08000adc <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b088      	sub	sp, #32
 8000ae0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000ae2:	1d3b      	adds	r3, r7, #4
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	605a      	str	r2, [r3, #4]
 8000aea:	609a      	str	r2, [r3, #8]
 8000aec:	60da      	str	r2, [r3, #12]
 8000aee:	611a      	str	r2, [r3, #16]
 8000af0:	615a      	str	r2, [r3, #20]
 8000af2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000af4:	4b20      	ldr	r3, [pc, #128]	; (8000b78 <MX_FMC_Init+0x9c>)
 8000af6:	4a21      	ldr	r2, [pc, #132]	; (8000b7c <MX_FMC_Init+0xa0>)
 8000af8:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000afa:	4b1f      	ldr	r3, [pc, #124]	; (8000b78 <MX_FMC_Init+0x9c>)
 8000afc:	2201      	movs	r2, #1
 8000afe:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8000b00:	4b1d      	ldr	r3, [pc, #116]	; (8000b78 <MX_FMC_Init+0x9c>)
 8000b02:	2201      	movs	r2, #1
 8000b04:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000b06:	4b1c      	ldr	r3, [pc, #112]	; (8000b78 <MX_FMC_Init+0x9c>)
 8000b08:	2204      	movs	r2, #4
 8000b0a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000b0c:	4b1a      	ldr	r3, [pc, #104]	; (8000b78 <MX_FMC_Init+0x9c>)
 8000b0e:	2210      	movs	r2, #16
 8000b10:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000b12:	4b19      	ldr	r3, [pc, #100]	; (8000b78 <MX_FMC_Init+0x9c>)
 8000b14:	2240      	movs	r2, #64	; 0x40
 8000b16:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8000b18:	4b17      	ldr	r3, [pc, #92]	; (8000b78 <MX_FMC_Init+0x9c>)
 8000b1a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b1e:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000b20:	4b15      	ldr	r3, [pc, #84]	; (8000b78 <MX_FMC_Init+0x9c>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_3;
 8000b26:	4b14      	ldr	r3, [pc, #80]	; (8000b78 <MX_FMC_Init+0x9c>)
 8000b28:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8000b2c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000b2e:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <MX_FMC_Init+0x9c>)
 8000b30:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b34:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_2;
 8000b36:	4b10      	ldr	r3, [pc, #64]	; (8000b78 <MX_FMC_Init+0x9c>)
 8000b38:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b3c:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000b42:	2307      	movs	r3, #7
 8000b44:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000b46:	2304      	movs	r3, #4
 8000b48:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000b4a:	2307      	movs	r3, #7
 8000b4c:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000b4e:	2303      	movs	r3, #3
 8000b50:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000b52:	2302      	movs	r3, #2
 8000b54:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000b56:	2302      	movs	r3, #2
 8000b58:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000b5a:	1d3b      	adds	r3, r7, #4
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	4806      	ldr	r0, [pc, #24]	; (8000b78 <MX_FMC_Init+0x9c>)
 8000b60:	f014 fa84 	bl	801506c <HAL_SDRAM_Init>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <MX_FMC_Init+0x92>
  {
    Error_Handler( );
 8000b6a:	f000 fa03 	bl	8000f74 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000b6e:	bf00      	nop
 8000b70:	3720      	adds	r7, #32
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	24005e58 	.word	0x24005e58
 8000b7c:	52004140 	.word	0x52004140

08000b80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b090      	sub	sp, #64	; 0x40
 8000b84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	601a      	str	r2, [r3, #0]
 8000b8e:	605a      	str	r2, [r3, #4]
 8000b90:	609a      	str	r2, [r3, #8]
 8000b92:	60da      	str	r2, [r3, #12]
 8000b94:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b96:	4b8e      	ldr	r3, [pc, #568]	; (8000dd0 <MX_GPIO_Init+0x250>)
 8000b98:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b9c:	4a8c      	ldr	r2, [pc, #560]	; (8000dd0 <MX_GPIO_Init+0x250>)
 8000b9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ba2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000ba6:	4b8a      	ldr	r3, [pc, #552]	; (8000dd0 <MX_GPIO_Init+0x250>)
 8000ba8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bb0:	62bb      	str	r3, [r7, #40]	; 0x28
 8000bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000bb4:	4b86      	ldr	r3, [pc, #536]	; (8000dd0 <MX_GPIO_Init+0x250>)
 8000bb6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bba:	4a85      	ldr	r2, [pc, #532]	; (8000dd0 <MX_GPIO_Init+0x250>)
 8000bbc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bc0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000bc4:	4b82      	ldr	r3, [pc, #520]	; (8000dd0 <MX_GPIO_Init+0x250>)
 8000bc6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000bce:	627b      	str	r3, [r7, #36]	; 0x24
 8000bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bd2:	4b7f      	ldr	r3, [pc, #508]	; (8000dd0 <MX_GPIO_Init+0x250>)
 8000bd4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bd8:	4a7d      	ldr	r2, [pc, #500]	; (8000dd0 <MX_GPIO_Init+0x250>)
 8000bda:	f043 0308 	orr.w	r3, r3, #8
 8000bde:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000be2:	4b7b      	ldr	r3, [pc, #492]	; (8000dd0 <MX_GPIO_Init+0x250>)
 8000be4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000be8:	f003 0308 	and.w	r3, r3, #8
 8000bec:	623b      	str	r3, [r7, #32]
 8000bee:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bf0:	4b77      	ldr	r3, [pc, #476]	; (8000dd0 <MX_GPIO_Init+0x250>)
 8000bf2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bf6:	4a76      	ldr	r2, [pc, #472]	; (8000dd0 <MX_GPIO_Init+0x250>)
 8000bf8:	f043 0310 	orr.w	r3, r3, #16
 8000bfc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000c00:	4b73      	ldr	r3, [pc, #460]	; (8000dd0 <MX_GPIO_Init+0x250>)
 8000c02:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c06:	f003 0310 	and.w	r3, r3, #16
 8000c0a:	61fb      	str	r3, [r7, #28]
 8000c0c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000c0e:	4b70      	ldr	r3, [pc, #448]	; (8000dd0 <MX_GPIO_Init+0x250>)
 8000c10:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c14:	4a6e      	ldr	r2, [pc, #440]	; (8000dd0 <MX_GPIO_Init+0x250>)
 8000c16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c1a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000c1e:	4b6c      	ldr	r3, [pc, #432]	; (8000dd0 <MX_GPIO_Init+0x250>)
 8000c20:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c28:	61bb      	str	r3, [r7, #24]
 8000c2a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c2c:	4b68      	ldr	r3, [pc, #416]	; (8000dd0 <MX_GPIO_Init+0x250>)
 8000c2e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c32:	4a67      	ldr	r2, [pc, #412]	; (8000dd0 <MX_GPIO_Init+0x250>)
 8000c34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c38:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000c3c:	4b64      	ldr	r3, [pc, #400]	; (8000dd0 <MX_GPIO_Init+0x250>)
 8000c3e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c46:	617b      	str	r3, [r7, #20]
 8000c48:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000c4a:	4b61      	ldr	r3, [pc, #388]	; (8000dd0 <MX_GPIO_Init+0x250>)
 8000c4c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c50:	4a5f      	ldr	r2, [pc, #380]	; (8000dd0 <MX_GPIO_Init+0x250>)
 8000c52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c56:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000c5a:	4b5d      	ldr	r3, [pc, #372]	; (8000dd0 <MX_GPIO_Init+0x250>)
 8000c5c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c64:	613b      	str	r3, [r7, #16]
 8000c66:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c68:	4b59      	ldr	r3, [pc, #356]	; (8000dd0 <MX_GPIO_Init+0x250>)
 8000c6a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c6e:	4a58      	ldr	r2, [pc, #352]	; (8000dd0 <MX_GPIO_Init+0x250>)
 8000c70:	f043 0304 	orr.w	r3, r3, #4
 8000c74:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000c78:	4b55      	ldr	r3, [pc, #340]	; (8000dd0 <MX_GPIO_Init+0x250>)
 8000c7a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c7e:	f003 0304 	and.w	r3, r3, #4
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c86:	4b52      	ldr	r3, [pc, #328]	; (8000dd0 <MX_GPIO_Init+0x250>)
 8000c88:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c8c:	4a50      	ldr	r2, [pc, #320]	; (8000dd0 <MX_GPIO_Init+0x250>)
 8000c8e:	f043 0320 	orr.w	r3, r3, #32
 8000c92:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000c96:	4b4e      	ldr	r3, [pc, #312]	; (8000dd0 <MX_GPIO_Init+0x250>)
 8000c98:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c9c:	f003 0320 	and.w	r3, r3, #32
 8000ca0:	60bb      	str	r3, [r7, #8]
 8000ca2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca4:	4b4a      	ldr	r3, [pc, #296]	; (8000dd0 <MX_GPIO_Init+0x250>)
 8000ca6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000caa:	4a49      	ldr	r2, [pc, #292]	; (8000dd0 <MX_GPIO_Init+0x250>)
 8000cac:	f043 0301 	orr.w	r3, r3, #1
 8000cb0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000cb4:	4b46      	ldr	r3, [pc, #280]	; (8000dd0 <MX_GPIO_Init+0x250>)
 8000cb6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000cba:	f003 0301 	and.w	r3, r3, #1
 8000cbe:	607b      	str	r3, [r7, #4]
 8000cc0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LED3_Pin|LED2_Pin, GPIO_PIN_SET);
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	f640 0104 	movw	r1, #2052	; 0x804
 8000cc8:	4842      	ldr	r0, [pc, #264]	; (8000dd4 <MX_GPIO_Init+0x254>)
 8000cca:	f00d f93d 	bl	800df48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, VSYNC_FREQ_Pin|RENDER_TIME_Pin|MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 8000cce:	2200      	movs	r2, #0
 8000cd0:	f44f 41c4 	mov.w	r1, #25088	; 0x6200
 8000cd4:	4840      	ldr	r0, [pc, #256]	; (8000dd8 <MX_GPIO_Init+0x258>)
 8000cd6:	f00d f937 	bl	800df48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, GPIO_PIN_RESET);
 8000cda:	2200      	movs	r2, #0
 8000cdc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ce0:	483e      	ldr	r0, [pc, #248]	; (8000ddc <MX_GPIO_Init+0x25c>)
 8000ce2:	f00d f931 	bl	800df48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_BL_CTRL_Pin|LCD_ON_OFF_Pin, GPIO_PIN_RESET);
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	2106      	movs	r1, #6
 8000cea:	483d      	ldr	r0, [pc, #244]	; (8000de0 <MX_GPIO_Init+0x260>)
 8000cec:	f00d f92c 	bl	800df48 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED3_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin;
 8000cf0:	f640 0304 	movw	r3, #2052	; 0x804
 8000cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d06:	4619      	mov	r1, r3
 8000d08:	4832      	ldr	r0, [pc, #200]	; (8000dd4 <MX_GPIO_Init+0x254>)
 8000d0a:	f00c fe4b 	bl	800d9a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : VSYNC_FREQ_Pin RENDER_TIME_Pin MCU_ACTIVE_Pin */
  GPIO_InitStruct.Pin = VSYNC_FREQ_Pin|RENDER_TIME_Pin|MCU_ACTIVE_Pin;
 8000d0e:	f44f 43c4 	mov.w	r3, #25088	; 0x6200
 8000d12:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d14:	2301      	movs	r3, #1
 8000d16:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d1c:	2303      	movs	r3, #3
 8000d1e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000d20:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d24:	4619      	mov	r1, r3
 8000d26:	482c      	ldr	r0, [pc, #176]	; (8000dd8 <MX_GPIO_Init+0x258>)
 8000d28:	f00c fe3c 	bl	800d9a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : FRAME_RATE_Pin */
  GPIO_InitStruct.Pin = FRAME_RATE_Pin;
 8000d2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d30:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d32:	2301      	movs	r3, #1
 8000d34:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d36:	2300      	movs	r3, #0
 8000d38:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d3a:	2303      	movs	r3, #3
 8000d3c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(FRAME_RATE_GPIO_Port, &GPIO_InitStruct);
 8000d3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d42:	4619      	mov	r1, r3
 8000d44:	4825      	ldr	r0, [pc, #148]	; (8000ddc <MX_GPIO_Init+0x25c>)
 8000d46:	f00c fe2d 	bl	800d9a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_USER_Pin */
  GPIO_InitStruct.Pin = BTN_USER_Pin;
 8000d4a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d50:	2300      	movs	r3, #0
 8000d52:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d54:	2302      	movs	r3, #2
 8000d56:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(BTN_USER_GPIO_Port, &GPIO_InitStruct);
 8000d58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	4821      	ldr	r0, [pc, #132]	; (8000de4 <MX_GPIO_Init+0x264>)
 8000d60:	f00c fe20 	bl	800d9a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000d64:	2304      	movs	r3, #4
 8000d66:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d68:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d6c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000d72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d76:	4619      	mov	r1, r3
 8000d78:	4817      	ldr	r0, [pc, #92]	; (8000dd8 <MX_GPIO_Init+0x258>)
 8000d7a:	f00c fe13 	bl	800d9a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8000d7e:	2302      	movs	r3, #2
 8000d80:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d82:	2301      	movs	r3, #1
 8000d84:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d86:	2300      	movs	r3, #0
 8000d88:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000d8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d92:	4619      	mov	r1, r3
 8000d94:	4812      	ldr	r0, [pc, #72]	; (8000de0 <MX_GPIO_Init+0x260>)
 8000d96:	f00c fe05 	bl	800d9a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_ON_OFF_Pin */
  GPIO_InitStruct.Pin = LCD_ON_OFF_Pin;
 8000d9a:	2304      	movs	r3, #4
 8000d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000da2:	2301      	movs	r3, #1
 8000da4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da6:	2300      	movs	r3, #0
 8000da8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_ON_OFF_GPIO_Port, &GPIO_InitStruct);
 8000daa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dae:	4619      	mov	r1, r3
 8000db0:	480b      	ldr	r0, [pc, #44]	; (8000de0 <MX_GPIO_Init+0x260>)
 8000db2:	f00c fdf7 	bl	800d9a4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8000db6:	2200      	movs	r2, #0
 8000db8:	2105      	movs	r1, #5
 8000dba:	2008      	movs	r0, #8
 8000dbc:	f00c fa2c 	bl	800d218 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000dc0:	2008      	movs	r0, #8
 8000dc2:	f00c fa43 	bl	800d24c <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000dc6:	bf00      	nop
 8000dc8:	3740      	adds	r7, #64	; 0x40
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	58024400 	.word	0x58024400
 8000dd4:	58021800 	.word	0x58021800
 8000dd8:	58021c00 	.word	0x58021c00
 8000ddc:	58022000 	.word	0x58022000
 8000de0:	58020000 	.word	0x58020000
 8000de4:	58020800 	.word	0x58020800

08000de8 <SDRAM_Initialization_Sequence>:

/* USER CODE BEGIN 4 */
static void SDRAM_Initialization_Sequence(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
 8000df0:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmpmrd =0;
 8000df2:	2300      	movs	r3, #0
 8000df4:	60fb      	str	r3, [r7, #12]
  /* Step 1:  Configure a clock configuration enable command */
  Command->CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	2201      	movs	r2, #1
 8000dfa:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	2208      	movs	r2, #8
 8000e00:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 1;
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	2201      	movs	r2, #1
 8000e06:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = 0;
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8000e0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e12:	6839      	ldr	r1, [r7, #0]
 8000e14:	6878      	ldr	r0, [r7, #4]
 8000e16:	f014 f965 	bl	80150e4 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8000e1a:	2001      	movs	r0, #1
 8000e1c:	f00c f8fc 	bl	800d018 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */
  Command->CommandMode = FMC_SDRAM_CMD_PALL;
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	2202      	movs	r2, #2
 8000e24:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	2208      	movs	r2, #8
 8000e2a:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 1;
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	2201      	movs	r2, #1
 8000e30:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = 0;
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	2200      	movs	r2, #0
 8000e36:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8000e38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e3c:	6839      	ldr	r1, [r7, #0]
 8000e3e:	6878      	ldr	r0, [r7, #4]
 8000e40:	f014 f950 	bl	80150e4 <HAL_SDRAM_SendCommand>

  /* Step 4 : Configure a Auto-Refresh command */
  Command->CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	2203      	movs	r2, #3
 8000e48:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	2208      	movs	r2, #8
 8000e4e:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 8;
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	2208      	movs	r2, #8
 8000e54:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = 0;
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	2200      	movs	r2, #0
 8000e5a:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8000e5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e60:	6839      	ldr	r1, [r7, #0]
 8000e62:	6878      	ldr	r0, [r7, #4]
 8000e64:	f014 f93e 	bl	80150e4 <HAL_SDRAM_SendCommand>

  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8000e68:	f44f 7308 	mov.w	r3, #544	; 0x220
 8000e6c:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_2           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command->CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	2204      	movs	r2, #4
 8000e72:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	2208      	movs	r2, #8
 8000e78:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 1;
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = tmpmrd;
 8000e80:	68fa      	ldr	r2, [r7, #12]
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8000e86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e8a:	6839      	ldr	r1, [r7, #0]
 8000e8c:	6878      	ldr	r0, [r7, #4]
 8000e8e:	f014 f929 	bl	80150e4 <HAL_SDRAM_SendCommand>

  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(hsdram, REFRESH_COUNT); 
 8000e92:	f240 6103 	movw	r1, #1539	; 0x603
 8000e96:	6878      	ldr	r0, [r7, #4]
 8000e98:	f014 f959 	bl	801514e <HAL_SDRAM_ProgramRefreshRate>

}
 8000e9c:	bf00      	nop
 8000e9e:	3710      	adds	r7, #16
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}

08000ea4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
 8000eac:	2064      	movs	r0, #100	; 0x64
 8000eae:	f014 fe71 	bl	8015b94 <osDelay>
 8000eb2:	e7fb      	b.n	8000eac <StartDefaultTask+0x8>

08000eb4 <MPU_Config>:
}

/* MPU Configuration */

void MPU_Config(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b084      	sub	sp, #16
 8000eb8:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000eba:	463b      	mov	r3, r7
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
 8000ec4:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000ec6:	f00c f9dd 	bl	800d284 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x90000000;
 8000ed2:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 8000ed6:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 8000ed8:	231b      	movs	r3, #27
 8000eda:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000edc:	2300      	movs	r3, #0
 8000ede:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000eec:	2300      	movs	r3, #0
 8000eee:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000ef8:	463b      	mov	r3, r7
 8000efa:	4618      	mov	r0, r3
 8000efc:	f00c f9fa 	bl	800d2f4 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000f00:	2301      	movs	r3, #1
 8000f02:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
 8000f04:	2319      	movs	r3, #25
 8000f06:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000f08:	2303      	movs	r3, #3
 8000f0a:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	73bb      	strb	r3, [r7, #14]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000f10:	463b      	mov	r3, r7
 8000f12:	4618      	mov	r0, r3
 8000f14:	f00c f9ee 	bl	800d2f4 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000f18:	2302      	movs	r3, #2
 8000f1a:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x24000000;
 8000f1c:	f04f 5310 	mov.w	r3, #603979776	; 0x24000000
 8000f20:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_1MB;
 8000f22:	2313      	movs	r3, #19
 8000f24:	723b      	strb	r3, [r7, #8]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000f26:	463b      	mov	r3, r7
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f00c f9e3 	bl	800d2f4 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8000f2e:	2303      	movs	r3, #3
 8000f30:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 8000f32:	2311      	movs	r3, #17
 8000f34:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000f36:	2301      	movs	r3, #1
 8000f38:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000f3a:	463b      	mov	r3, r7
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f00c f9d9 	bl	800d2f4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000f42:	2004      	movs	r0, #4
 8000f44:	f00c f9b6 	bl	800d2b4 <HAL_MPU_Enable>

}
 8000f48:	bf00      	nop
 8000f4a:	3710      	adds	r7, #16
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a04      	ldr	r2, [pc, #16]	; (8000f70 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d101      	bne.n	8000f66 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f62:	f00c f839 	bl	800cfd8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f66:	bf00      	nop
 8000f68:	3708      	adds	r7, #8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	40001000 	.word	0x40001000

08000f74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000f78:	bf00      	nop
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
	...

08000f84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f8a:	4b0c      	ldr	r3, [pc, #48]	; (8000fbc <HAL_MspInit+0x38>)
 8000f8c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000f90:	4a0a      	ldr	r2, [pc, #40]	; (8000fbc <HAL_MspInit+0x38>)
 8000f92:	f043 0302 	orr.w	r3, r3, #2
 8000f96:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000f9a:	4b08      	ldr	r3, [pc, #32]	; (8000fbc <HAL_MspInit+0x38>)
 8000f9c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000fa0:	f003 0302 	and.w	r3, r3, #2
 8000fa4:	607b      	str	r3, [r7, #4]
 8000fa6:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000fa8:	2200      	movs	r2, #0
 8000faa:	210f      	movs	r1, #15
 8000fac:	f06f 0001 	mvn.w	r0, #1
 8000fb0:	f00c f932 	bl	800d218 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fb4:	bf00      	nop
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	58024400 	.word	0x58024400

08000fc0 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b085      	sub	sp, #20
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a0b      	ldr	r2, [pc, #44]	; (8000ffc <HAL_CRC_MspInit+0x3c>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d10e      	bne.n	8000ff0 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000fd2:	4b0b      	ldr	r3, [pc, #44]	; (8001000 <HAL_CRC_MspInit+0x40>)
 8000fd4:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000fd8:	4a09      	ldr	r2, [pc, #36]	; (8001000 <HAL_CRC_MspInit+0x40>)
 8000fda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fde:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8000fe2:	4b07      	ldr	r3, [pc, #28]	; (8001000 <HAL_CRC_MspInit+0x40>)
 8000fe4:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000fe8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000fec:	60fb      	str	r3, [r7, #12]
 8000fee:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000ff0:	bf00      	nop
 8000ff2:	3714      	adds	r7, #20
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr
 8000ffc:	40023000 	.word	0x40023000
 8001000:	58024400 	.word	0x58024400

08001004 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a0e      	ldr	r2, [pc, #56]	; (800104c <HAL_DMA2D_MspInit+0x48>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d116      	bne.n	8001044 <HAL_DMA2D_MspInit+0x40>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001016:	4b0e      	ldr	r3, [pc, #56]	; (8001050 <HAL_DMA2D_MspInit+0x4c>)
 8001018:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800101c:	4a0c      	ldr	r2, [pc, #48]	; (8001050 <HAL_DMA2D_MspInit+0x4c>)
 800101e:	f043 0310 	orr.w	r3, r3, #16
 8001022:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 8001026:	4b0a      	ldr	r3, [pc, #40]	; (8001050 <HAL_DMA2D_MspInit+0x4c>)
 8001028:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800102c:	f003 0310 	and.w	r3, r3, #16
 8001030:	60fb      	str	r3, [r7, #12]
 8001032:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8001034:	2200      	movs	r2, #0
 8001036:	2105      	movs	r1, #5
 8001038:	205a      	movs	r0, #90	; 0x5a
 800103a:	f00c f8ed 	bl	800d218 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800103e:	205a      	movs	r0, #90	; 0x5a
 8001040:	f00c f904 	bl	800d24c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001044:	bf00      	nop
 8001046:	3710      	adds	r7, #16
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	52001000 	.word	0x52001000
 8001050:	58024400 	.word	0x58024400

08001054 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b0ba      	sub	sp, #232	; 0xe8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800105c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	605a      	str	r2, [r3, #4]
 8001066:	609a      	str	r2, [r3, #8]
 8001068:	60da      	str	r2, [r3, #12]
 800106a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800106c:	f107 0310 	add.w	r3, r7, #16
 8001070:	22c0      	movs	r2, #192	; 0xc0
 8001072:	2100      	movs	r1, #0
 8001074:	4618      	mov	r0, r3
 8001076:	f027 fc9b 	bl	80289b0 <memset>
  if(hi2c->Instance==I2C4)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a27      	ldr	r2, [pc, #156]	; (800111c <HAL_I2C_MspInit+0xc8>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d146      	bne.n	8001112 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001084:	f04f 0210 	mov.w	r2, #16
 8001088:	f04f 0300 	mov.w	r3, #0
 800108c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8001090:	2300      	movs	r3, #0
 8001092:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001096:	f107 0310 	add.w	r3, r7, #16
 800109a:	4618      	mov	r0, r3
 800109c:	f012 fcc4 	bl	8013a28 <HAL_RCCEx_PeriphCLKConfig>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80010a6:	f7ff ff65 	bl	8000f74 <Error_Handler>
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010aa:	4b1d      	ldr	r3, [pc, #116]	; (8001120 <HAL_I2C_MspInit+0xcc>)
 80010ac:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80010b0:	4a1b      	ldr	r2, [pc, #108]	; (8001120 <HAL_I2C_MspInit+0xcc>)
 80010b2:	f043 0308 	orr.w	r3, r3, #8
 80010b6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80010ba:	4b19      	ldr	r3, [pc, #100]	; (8001120 <HAL_I2C_MspInit+0xcc>)
 80010bc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80010c0:	f003 0308 	and.w	r3, r3, #8
 80010c4:	60fb      	str	r3, [r7, #12]
 80010c6:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PD13     ------> I2C4_SDA
    PD12     ------> I2C4_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12;
 80010c8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80010cc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010d0:	2312      	movs	r3, #18
 80010d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010d6:	2301      	movs	r3, #1
 80010d8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010dc:	2302      	movs	r3, #2
 80010de:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80010e2:	2304      	movs	r3, #4
 80010e4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010e8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80010ec:	4619      	mov	r1, r3
 80010ee:	480d      	ldr	r0, [pc, #52]	; (8001124 <HAL_I2C_MspInit+0xd0>)
 80010f0:	f00c fc58 	bl	800d9a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 80010f4:	4b0a      	ldr	r3, [pc, #40]	; (8001120 <HAL_I2C_MspInit+0xcc>)
 80010f6:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80010fa:	4a09      	ldr	r2, [pc, #36]	; (8001120 <HAL_I2C_MspInit+0xcc>)
 80010fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001100:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8001104:	4b06      	ldr	r3, [pc, #24]	; (8001120 <HAL_I2C_MspInit+0xcc>)
 8001106:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800110a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800110e:	60bb      	str	r3, [r7, #8]
 8001110:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8001112:	bf00      	nop
 8001114:	37e8      	adds	r7, #232	; 0xe8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	58001c00 	.word	0x58001c00
 8001120:	58024400 	.word	0x58024400
 8001124:	58020c00 	.word	0x58020c00

08001128 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C4)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a0c      	ldr	r2, [pc, #48]	; (8001168 <HAL_I2C_MspDeInit+0x40>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d111      	bne.n	800115e <HAL_I2C_MspDeInit+0x36>
  {
  /* USER CODE BEGIN I2C4_MspDeInit 0 */

  /* USER CODE END I2C4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C4_CLK_DISABLE();
 800113a:	4b0c      	ldr	r3, [pc, #48]	; (800116c <HAL_I2C_MspDeInit+0x44>)
 800113c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001140:	4a0a      	ldr	r2, [pc, #40]	; (800116c <HAL_I2C_MspDeInit+0x44>)
 8001142:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001146:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154

    /**I2C4 GPIO Configuration
    PD13     ------> I2C4_SDA
    PD12     ------> I2C4_SCL
    */
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_13);
 800114a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800114e:	4808      	ldr	r0, [pc, #32]	; (8001170 <HAL_I2C_MspDeInit+0x48>)
 8001150:	f00c fdd8 	bl	800dd04 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_12);
 8001154:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001158:	4805      	ldr	r0, [pc, #20]	; (8001170 <HAL_I2C_MspDeInit+0x48>)
 800115a:	f00c fdd3 	bl	800dd04 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C4_MspDeInit 1 */

  /* USER CODE END I2C4_MspDeInit 1 */
  }

}
 800115e:	bf00      	nop
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	58001c00 	.word	0x58001c00
 800116c:	58024400 	.word	0x58024400
 8001170:	58020c00 	.word	0x58020c00

08001174 <HAL_JPEG_MspInit>:
* This function configures the hardware resources used in this example
* @param hjpeg: JPEG handle pointer
* @retval None
*/
void HAL_JPEG_MspInit(JPEG_HandleTypeDef* hjpeg)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  if(hjpeg->Instance==JPEG)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a57      	ldr	r2, [pc, #348]	; (80012e0 <HAL_JPEG_MspInit+0x16c>)
 8001182:	4293      	cmp	r3, r2
 8001184:	f040 80a7 	bne.w	80012d6 <HAL_JPEG_MspInit+0x162>
  {
  /* USER CODE BEGIN JPEG_MspInit 0 */

  /* USER CODE END JPEG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
 8001188:	4b56      	ldr	r3, [pc, #344]	; (80012e4 <HAL_JPEG_MspInit+0x170>)
 800118a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800118e:	4a55      	ldr	r2, [pc, #340]	; (80012e4 <HAL_JPEG_MspInit+0x170>)
 8001190:	f043 0320 	orr.w	r3, r3, #32
 8001194:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 8001198:	4b52      	ldr	r3, [pc, #328]	; (80012e4 <HAL_JPEG_MspInit+0x170>)
 800119a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800119e:	f003 0320 	and.w	r3, r3, #32
 80011a2:	60fb      	str	r3, [r7, #12]
 80011a4:	68fb      	ldr	r3, [r7, #12]

    /* JPEG MDMA Init */
    /* JPEG_INFIFO_TH Init */
    hmdma_jpeg_infifo_th.Instance = MDMA_Channel7;
 80011a6:	4b50      	ldr	r3, [pc, #320]	; (80012e8 <HAL_JPEG_MspInit+0x174>)
 80011a8:	4a50      	ldr	r2, [pc, #320]	; (80012ec <HAL_JPEG_MspInit+0x178>)
 80011aa:	601a      	str	r2, [r3, #0]
    hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
 80011ac:	4b4e      	ldr	r3, [pc, #312]	; (80012e8 <HAL_JPEG_MspInit+0x174>)
 80011ae:	2211      	movs	r2, #17
 80011b0:	605a      	str	r2, [r3, #4]
    hmdma_jpeg_infifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 80011b2:	4b4d      	ldr	r3, [pc, #308]	; (80012e8 <HAL_JPEG_MspInit+0x174>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	609a      	str	r2, [r3, #8]
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_HIGH;
 80011b8:	4b4b      	ldr	r3, [pc, #300]	; (80012e8 <HAL_JPEG_MspInit+0x174>)
 80011ba:	2280      	movs	r2, #128	; 0x80
 80011bc:	60da      	str	r2, [r3, #12]
    hmdma_jpeg_infifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 80011be:	4b4a      	ldr	r3, [pc, #296]	; (80012e8 <HAL_JPEG_MspInit+0x174>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	611a      	str	r2, [r3, #16]
    hmdma_jpeg_infifo_th.Init.SourceInc = MDMA_SRC_INC_BYTE;
 80011c4:	4b48      	ldr	r3, [pc, #288]	; (80012e8 <HAL_JPEG_MspInit+0x174>)
 80011c6:	2202      	movs	r2, #2
 80011c8:	615a      	str	r2, [r3, #20]
    hmdma_jpeg_infifo_th.Init.DestinationInc = MDMA_DEST_INC_DISABLE;
 80011ca:	4b47      	ldr	r3, [pc, #284]	; (80012e8 <HAL_JPEG_MspInit+0x174>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	619a      	str	r2, [r3, #24]
    hmdma_jpeg_infifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_BYTE;
 80011d0:	4b45      	ldr	r3, [pc, #276]	; (80012e8 <HAL_JPEG_MspInit+0x174>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	61da      	str	r2, [r3, #28]
    hmdma_jpeg_infifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
 80011d6:	4b44      	ldr	r3, [pc, #272]	; (80012e8 <HAL_JPEG_MspInit+0x174>)
 80011d8:	2280      	movs	r2, #128	; 0x80
 80011da:	621a      	str	r2, [r3, #32]
    hmdma_jpeg_infifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 80011dc:	4b42      	ldr	r3, [pc, #264]	; (80012e8 <HAL_JPEG_MspInit+0x174>)
 80011de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80011e2:	625a      	str	r2, [r3, #36]	; 0x24
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
 80011e4:	4b40      	ldr	r3, [pc, #256]	; (80012e8 <HAL_JPEG_MspInit+0x174>)
 80011e6:	2220      	movs	r2, #32
 80011e8:	629a      	str	r2, [r3, #40]	; 0x28
    hmdma_jpeg_infifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_32BEATS;
 80011ea:	4b3f      	ldr	r3, [pc, #252]	; (80012e8 <HAL_JPEG_MspInit+0x174>)
 80011ec:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 80011f0:	62da      	str	r2, [r3, #44]	; 0x2c
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_16BEATS;
 80011f2:	4b3d      	ldr	r3, [pc, #244]	; (80012e8 <HAL_JPEG_MspInit+0x174>)
 80011f4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80011f8:	631a      	str	r2, [r3, #48]	; 0x30
    hmdma_jpeg_infifo_th.Init.SourceBlockAddressOffset = 0;
 80011fa:	4b3b      	ldr	r3, [pc, #236]	; (80012e8 <HAL_JPEG_MspInit+0x174>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	635a      	str	r2, [r3, #52]	; 0x34
    hmdma_jpeg_infifo_th.Init.DestBlockAddressOffset = 0;
 8001200:	4b39      	ldr	r3, [pc, #228]	; (80012e8 <HAL_JPEG_MspInit+0x174>)
 8001202:	2200      	movs	r2, #0
 8001204:	639a      	str	r2, [r3, #56]	; 0x38
    if (HAL_MDMA_Init(&hmdma_jpeg_infifo_th) != HAL_OK)
 8001206:	4838      	ldr	r0, [pc, #224]	; (80012e8 <HAL_JPEG_MspInit+0x174>)
 8001208:	f010 f856 	bl	80112b8 <HAL_MDMA_Init>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <HAL_JPEG_MspInit+0xa2>
    {
      Error_Handler();
 8001212:	f7ff feaf 	bl	8000f74 <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_infifo_th, 0, 0) != HAL_OK)
 8001216:	2200      	movs	r2, #0
 8001218:	2100      	movs	r1, #0
 800121a:	4833      	ldr	r0, [pc, #204]	; (80012e8 <HAL_JPEG_MspInit+0x174>)
 800121c:	f010 f898 	bl	8011350 <HAL_MDMA_ConfigPostRequestMask>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <HAL_JPEG_MspInit+0xb6>
    {
      Error_Handler();
 8001226:	f7ff fea5 	bl	8000f74 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmain,hmdma_jpeg_infifo_th);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a2e      	ldr	r2, [pc, #184]	; (80012e8 <HAL_JPEG_MspInit+0x174>)
 800122e:	631a      	str	r2, [r3, #48]	; 0x30
 8001230:	4a2d      	ldr	r2, [pc, #180]	; (80012e8 <HAL_JPEG_MspInit+0x174>)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6413      	str	r3, [r2, #64]	; 0x40

    /* JPEG_OUTFIFO_TH Init */
    hmdma_jpeg_outfifo_th.Instance = MDMA_Channel6;
 8001236:	4b2e      	ldr	r3, [pc, #184]	; (80012f0 <HAL_JPEG_MspInit+0x17c>)
 8001238:	4a2e      	ldr	r2, [pc, #184]	; (80012f4 <HAL_JPEG_MspInit+0x180>)
 800123a:	601a      	str	r2, [r3, #0]
    hmdma_jpeg_outfifo_th.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_TH;
 800123c:	4b2c      	ldr	r3, [pc, #176]	; (80012f0 <HAL_JPEG_MspInit+0x17c>)
 800123e:	2213      	movs	r2, #19
 8001240:	605a      	str	r2, [r3, #4]
    hmdma_jpeg_outfifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 8001242:	4b2b      	ldr	r3, [pc, #172]	; (80012f0 <HAL_JPEG_MspInit+0x17c>)
 8001244:	2200      	movs	r2, #0
 8001246:	609a      	str	r2, [r3, #8]
    hmdma_jpeg_outfifo_th.Init.Priority = MDMA_PRIORITY_VERY_HIGH;
 8001248:	4b29      	ldr	r3, [pc, #164]	; (80012f0 <HAL_JPEG_MspInit+0x17c>)
 800124a:	22c0      	movs	r2, #192	; 0xc0
 800124c:	60da      	str	r2, [r3, #12]
    hmdma_jpeg_outfifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 800124e:	4b28      	ldr	r3, [pc, #160]	; (80012f0 <HAL_JPEG_MspInit+0x17c>)
 8001250:	2200      	movs	r2, #0
 8001252:	611a      	str	r2, [r3, #16]
    hmdma_jpeg_outfifo_th.Init.SourceInc = MDMA_SRC_INC_DISABLE;
 8001254:	4b26      	ldr	r3, [pc, #152]	; (80012f0 <HAL_JPEG_MspInit+0x17c>)
 8001256:	2200      	movs	r2, #0
 8001258:	615a      	str	r2, [r3, #20]
    hmdma_jpeg_outfifo_th.Init.DestinationInc = MDMA_DEST_INC_BYTE;
 800125a:	4b25      	ldr	r3, [pc, #148]	; (80012f0 <HAL_JPEG_MspInit+0x17c>)
 800125c:	2208      	movs	r2, #8
 800125e:	619a      	str	r2, [r3, #24]
    hmdma_jpeg_outfifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 8001260:	4b23      	ldr	r3, [pc, #140]	; (80012f0 <HAL_JPEG_MspInit+0x17c>)
 8001262:	2220      	movs	r2, #32
 8001264:	61da      	str	r2, [r3, #28]
    hmdma_jpeg_outfifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
 8001266:	4b22      	ldr	r3, [pc, #136]	; (80012f0 <HAL_JPEG_MspInit+0x17c>)
 8001268:	2200      	movs	r2, #0
 800126a:	621a      	str	r2, [r3, #32]
    hmdma_jpeg_outfifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 800126c:	4b20      	ldr	r3, [pc, #128]	; (80012f0 <HAL_JPEG_MspInit+0x17c>)
 800126e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001272:	625a      	str	r2, [r3, #36]	; 0x24
    hmdma_jpeg_outfifo_th.Init.BufferTransferLength = 32;
 8001274:	4b1e      	ldr	r3, [pc, #120]	; (80012f0 <HAL_JPEG_MspInit+0x17c>)
 8001276:	2220      	movs	r2, #32
 8001278:	629a      	str	r2, [r3, #40]	; 0x28
    hmdma_jpeg_outfifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_32BEATS;
 800127a:	4b1d      	ldr	r3, [pc, #116]	; (80012f0 <HAL_JPEG_MspInit+0x17c>)
 800127c:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 8001280:	62da      	str	r2, [r3, #44]	; 0x2c
    hmdma_jpeg_outfifo_th.Init.DestBurst = MDMA_DEST_BURST_32BEATS;
 8001282:	4b1b      	ldr	r3, [pc, #108]	; (80012f0 <HAL_JPEG_MspInit+0x17c>)
 8001284:	f44f 3220 	mov.w	r2, #163840	; 0x28000
 8001288:	631a      	str	r2, [r3, #48]	; 0x30
    hmdma_jpeg_outfifo_th.Init.SourceBlockAddressOffset = 0;
 800128a:	4b19      	ldr	r3, [pc, #100]	; (80012f0 <HAL_JPEG_MspInit+0x17c>)
 800128c:	2200      	movs	r2, #0
 800128e:	635a      	str	r2, [r3, #52]	; 0x34
    hmdma_jpeg_outfifo_th.Init.DestBlockAddressOffset = 0;
 8001290:	4b17      	ldr	r3, [pc, #92]	; (80012f0 <HAL_JPEG_MspInit+0x17c>)
 8001292:	2200      	movs	r2, #0
 8001294:	639a      	str	r2, [r3, #56]	; 0x38
    if (HAL_MDMA_Init(&hmdma_jpeg_outfifo_th) != HAL_OK)
 8001296:	4816      	ldr	r0, [pc, #88]	; (80012f0 <HAL_JPEG_MspInit+0x17c>)
 8001298:	f010 f80e 	bl	80112b8 <HAL_MDMA_Init>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <HAL_JPEG_MspInit+0x132>
    {
      Error_Handler();
 80012a2:	f7ff fe67 	bl	8000f74 <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_outfifo_th, 0, 0) != HAL_OK)
 80012a6:	2200      	movs	r2, #0
 80012a8:	2100      	movs	r1, #0
 80012aa:	4811      	ldr	r0, [pc, #68]	; (80012f0 <HAL_JPEG_MspInit+0x17c>)
 80012ac:	f010 f850 	bl	8011350 <HAL_MDMA_ConfigPostRequestMask>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <HAL_JPEG_MspInit+0x146>
    {
      Error_Handler();
 80012b6:	f7ff fe5d 	bl	8000f74 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmaout,hmdma_jpeg_outfifo_th);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4a0c      	ldr	r2, [pc, #48]	; (80012f0 <HAL_JPEG_MspInit+0x17c>)
 80012be:	635a      	str	r2, [r3, #52]	; 0x34
 80012c0:	4a0b      	ldr	r2, [pc, #44]	; (80012f0 <HAL_JPEG_MspInit+0x17c>)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6413      	str	r3, [r2, #64]	; 0x40

    /* JPEG interrupt Init */
    HAL_NVIC_SetPriority(JPEG_IRQn, 5, 0);
 80012c6:	2200      	movs	r2, #0
 80012c8:	2105      	movs	r1, #5
 80012ca:	2079      	movs	r0, #121	; 0x79
 80012cc:	f00b ffa4 	bl	800d218 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
 80012d0:	2079      	movs	r0, #121	; 0x79
 80012d2:	f00b ffbb 	bl	800d24c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN JPEG_MspInit 1 */

  /* USER CODE END JPEG_MspInit 1 */
  }

}
 80012d6:	bf00      	nop
 80012d8:	3710      	adds	r7, #16
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	52003000 	.word	0x52003000
 80012e4:	58024400 	.word	0x58024400
 80012e8:	24005c7c 	.word	0x24005c7c
 80012ec:	52000200 	.word	0x52000200
 80012f0:	24005ce8 	.word	0x24005ce8
 80012f4:	520001c0 	.word	0x520001c0

080012f8 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b0bc      	sub	sp, #240	; 0xf0
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001300:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	605a      	str	r2, [r3, #4]
 800130a:	609a      	str	r2, [r3, #8]
 800130c:	60da      	str	r2, [r3, #12]
 800130e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001310:	f107 0318 	add.w	r3, r7, #24
 8001314:	22c0      	movs	r2, #192	; 0xc0
 8001316:	2100      	movs	r1, #0
 8001318:	4618      	mov	r0, r3
 800131a:	f027 fb49 	bl	80289b0 <memset>
  if(hltdc->Instance==LTDC)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a57      	ldr	r2, [pc, #348]	; (8001480 <HAL_LTDC_MspInit+0x188>)
 8001324:	4293      	cmp	r3, r2
 8001326:	f040 80a6 	bne.w	8001476 <HAL_LTDC_MspInit+0x17e>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800132a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800132e:	f04f 0300 	mov.w	r3, #0
 8001332:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL3.PLL3M = 24;
 8001336:	2318      	movs	r3, #24
 8001338:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3N = 201;
 800133a:	23c9      	movs	r3, #201	; 0xc9
 800133c:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 800133e:	2302      	movs	r3, #2
 8001340:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8001342:	2302      	movs	r3, #2
 8001344:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3R = 21;
 8001346:	2315      	movs	r3, #21
 8001348:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 800134a:	2300      	movs	r3, #0
 800134c:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 800134e:	2300      	movs	r3, #0
 8001350:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3FRACN = 5462;
 8001352:	f241 5356 	movw	r3, #5462	; 0x1556
 8001356:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001358:	f107 0318 	add.w	r3, r7, #24
 800135c:	4618      	mov	r0, r3
 800135e:	f012 fb63 	bl	8013a28 <HAL_RCCEx_PeriphCLKConfig>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <HAL_LTDC_MspInit+0x74>
    {
      Error_Handler();
 8001368:	f7ff fe04 	bl	8000f74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800136c:	4b45      	ldr	r3, [pc, #276]	; (8001484 <HAL_LTDC_MspInit+0x18c>)
 800136e:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8001372:	4a44      	ldr	r2, [pc, #272]	; (8001484 <HAL_LTDC_MspInit+0x18c>)
 8001374:	f043 0308 	orr.w	r3, r3, #8
 8001378:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144
 800137c:	4b41      	ldr	r3, [pc, #260]	; (8001484 <HAL_LTDC_MspInit+0x18c>)
 800137e:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8001382:	f003 0308 	and.w	r3, r3, #8
 8001386:	617b      	str	r3, [r7, #20]
 8001388:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 800138a:	4b3e      	ldr	r3, [pc, #248]	; (8001484 <HAL_LTDC_MspInit+0x18c>)
 800138c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001390:	4a3c      	ldr	r2, [pc, #240]	; (8001484 <HAL_LTDC_MspInit+0x18c>)
 8001392:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001396:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800139a:	4b3a      	ldr	r3, [pc, #232]	; (8001484 <HAL_LTDC_MspInit+0x18c>)
 800139c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80013a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013a4:	613b      	str	r3, [r7, #16]
 80013a6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80013a8:	4b36      	ldr	r3, [pc, #216]	; (8001484 <HAL_LTDC_MspInit+0x18c>)
 80013aa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80013ae:	4a35      	ldr	r2, [pc, #212]	; (8001484 <HAL_LTDC_MspInit+0x18c>)
 80013b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013b4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80013b8:	4b32      	ldr	r3, [pc, #200]	; (8001484 <HAL_LTDC_MspInit+0x18c>)
 80013ba:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80013be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013c2:	60fb      	str	r3, [r7, #12]
 80013c4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80013c6:	4b2f      	ldr	r3, [pc, #188]	; (8001484 <HAL_LTDC_MspInit+0x18c>)
 80013c8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80013cc:	4a2d      	ldr	r2, [pc, #180]	; (8001484 <HAL_LTDC_MspInit+0x18c>)
 80013ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013d2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80013d6:	4b2b      	ldr	r3, [pc, #172]	; (8001484 <HAL_LTDC_MspInit+0x18c>)
 80013d8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80013dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013e0:	60bb      	str	r3, [r7, #8]
 80013e2:	68bb      	ldr	r3, [r7, #8]
    PJ1     ------> LTDC_R2
    PJ4     ------> LTDC_R5
    PJ2     ------> LTDC_R3
    PJ3     ------> LTDC_R4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_3|GPIO_PIN_4
 80013e4:	23ff      	movs	r3, #255	; 0xff
 80013e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_7|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ea:	2302      	movs	r3, #2
 80013ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f0:	2300      	movs	r3, #0
 80013f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f6:	2300      	movs	r3, #0
 80013f8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80013fc:	230e      	movs	r3, #14
 80013fe:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001402:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001406:	4619      	mov	r1, r3
 8001408:	481f      	ldr	r0, [pc, #124]	; (8001488 <HAL_LTDC_MspInit+0x190>)
 800140a:	f00c facb 	bl	800d9a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12
 800140e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001412:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_0|GPIO_PIN_5
                          |GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001416:	2302      	movs	r3, #2
 8001418:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141c:	2300      	movs	r3, #0
 800141e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001422:	2300      	movs	r3, #0
 8001424:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001428:	230e      	movs	r3, #14
 800142a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800142e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001432:	4619      	mov	r1, r3
 8001434:	4815      	ldr	r0, [pc, #84]	; (800148c <HAL_LTDC_MspInit+0x194>)
 8001436:	f00c fab5 	bl	800d9a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_15;
 800143a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800143e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001442:	2302      	movs	r3, #2
 8001444:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001448:	2300      	movs	r3, #0
 800144a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144e:	2300      	movs	r3, #0
 8001450:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001454:	230e      	movs	r3, #14
 8001456:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800145a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800145e:	4619      	mov	r1, r3
 8001460:	480b      	ldr	r0, [pc, #44]	; (8001490 <HAL_LTDC_MspInit+0x198>)
 8001462:	f00c fa9f 	bl	800d9a4 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8001466:	2200      	movs	r2, #0
 8001468:	2105      	movs	r1, #5
 800146a:	2058      	movs	r0, #88	; 0x58
 800146c:	f00b fed4 	bl	800d218 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001470:	2058      	movs	r0, #88	; 0x58
 8001472:	f00b feeb 	bl	800d24c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001476:	bf00      	nop
 8001478:	37f0      	adds	r7, #240	; 0xf0
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	50001000 	.word	0x50001000
 8001484:	58024400 	.word	0x58024400
 8001488:	58022800 	.word	0x58022800
 800148c:	58022400 	.word	0x58022400
 8001490:	58022000 	.word	0x58022000

08001494 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b0b4      	sub	sp, #208	; 0xd0
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800149c:	f107 0310 	add.w	r3, r7, #16
 80014a0:	22c0      	movs	r2, #192	; 0xc0
 80014a2:	2100      	movs	r1, #0
 80014a4:	4618      	mov	r0, r3
 80014a6:	f027 fa83 	bl	80289b0 <memset>
  if(hospi->Instance==OCTOSPI1)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a28      	ldr	r2, [pc, #160]	; (8001550 <HAL_OSPI_MspInit+0xbc>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d148      	bne.n	8001546 <HAL_OSPI_MspInit+0xb2>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 80014b4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80014b8:	f04f 0300 	mov.w	r3, #0
 80014bc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 24;
 80014c0:	2318      	movs	r3, #24
 80014c2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 266;
 80014c4:	f44f 7385 	mov.w	r3, #266	; 0x10a
 80014c8:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 80014ca:	2302      	movs	r3, #2
 80014cc:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80014ce:	2302      	movs	r3, #2
 80014d0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80014d2:	2302      	movs	r3, #2
 80014d4:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 80014d6:	2300      	movs	r3, #0
 80014d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80014da:	2300      	movs	r3, #0
 80014dc:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80014de:	2300      	movs	r3, #0
 80014e0:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_PLL2;
 80014e2:	2320      	movs	r3, #32
 80014e4:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014e6:	f107 0310 	add.w	r3, r7, #16
 80014ea:	4618      	mov	r0, r3
 80014ec:	f012 fa9c 	bl	8013a28 <HAL_RCCEx_PeriphCLKConfig>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <HAL_OSPI_MspInit+0x66>
    {
      Error_Handler();
 80014f6:	f7ff fd3d 	bl	8000f74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 80014fa:	4b16      	ldr	r3, [pc, #88]	; (8001554 <HAL_OSPI_MspInit+0xc0>)
 80014fc:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001500:	4a14      	ldr	r2, [pc, #80]	; (8001554 <HAL_OSPI_MspInit+0xc0>)
 8001502:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001506:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 800150a:	4b12      	ldr	r3, [pc, #72]	; (8001554 <HAL_OSPI_MspInit+0xc0>)
 800150c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001510:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001514:	60fb      	str	r3, [r7, #12]
 8001516:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8001518:	4b0e      	ldr	r3, [pc, #56]	; (8001554 <HAL_OSPI_MspInit+0xc0>)
 800151a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800151e:	4a0d      	ldr	r2, [pc, #52]	; (8001554 <HAL_OSPI_MspInit+0xc0>)
 8001520:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001524:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 8001528:	4b0a      	ldr	r3, [pc, #40]	; (8001554 <HAL_OSPI_MspInit+0xc0>)
 800152a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800152e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001532:	60bb      	str	r3, [r7, #8]
 8001534:	68bb      	ldr	r3, [r7, #8]
    /* OCTOSPI1 interrupt Init */
    HAL_NVIC_SetPriority(OCTOSPI1_IRQn, 5, 0);
 8001536:	2200      	movs	r2, #0
 8001538:	2105      	movs	r1, #5
 800153a:	205c      	movs	r0, #92	; 0x5c
 800153c:	f00b fe6c 	bl	800d218 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OCTOSPI1_IRQn);
 8001540:	205c      	movs	r0, #92	; 0x5c
 8001542:	f00b fe83 	bl	800d24c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 8001546:	bf00      	nop
 8001548:	37d0      	adds	r7, #208	; 0xd0
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	52005000 	.word	0x52005000
 8001554:	58024400 	.word	0x58024400

08001558 <HAL_OSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspDeInit(OSPI_HandleTypeDef* hospi)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  if(hospi->Instance==OCTOSPI1)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a0c      	ldr	r2, [pc, #48]	; (8001598 <HAL_OSPI_MspDeInit+0x40>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d112      	bne.n	8001590 <HAL_OSPI_MspDeInit+0x38>
  {
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 0 */

  /* USER CODE END OCTOSPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_OCTOSPIM_CLK_DISABLE();
 800156a:	4b0c      	ldr	r3, [pc, #48]	; (800159c <HAL_OSPI_MspDeInit+0x44>)
 800156c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001570:	4a0a      	ldr	r2, [pc, #40]	; (800159c <HAL_OSPI_MspDeInit+0x44>)
 8001572:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001576:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
    __HAL_RCC_OSPI1_CLK_DISABLE();
 800157a:	4b08      	ldr	r3, [pc, #32]	; (800159c <HAL_OSPI_MspDeInit+0x44>)
 800157c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001580:	4a06      	ldr	r2, [pc, #24]	; (800159c <HAL_OSPI_MspDeInit+0x44>)
 8001582:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001586:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134

    /* OCTOSPI1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(OCTOSPI1_IRQn);
 800158a:	205c      	movs	r0, #92	; 0x5c
 800158c:	f00b fe6c 	bl	800d268 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 1 */

  /* USER CODE END OCTOSPI1_MspDeInit 1 */
  }

}
 8001590:	bf00      	nop
 8001592:	3708      	adds	r7, #8
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	52005000 	.word	0x52005000
 800159c:	58024400 	.word	0x58024400

080015a0 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b0b8      	sub	sp, #224	; 0xe0
 80015a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80015a6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80015aa:	2200      	movs	r2, #0
 80015ac:	601a      	str	r2, [r3, #0]
 80015ae:	605a      	str	r2, [r3, #4]
 80015b0:	609a      	str	r2, [r3, #8]
 80015b2:	60da      	str	r2, [r3, #12]
 80015b4:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80015b6:	4b51      	ldr	r3, [pc, #324]	; (80016fc <HAL_FMC_MspInit+0x15c>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	f040 8099 	bne.w	80016f2 <HAL_FMC_MspInit+0x152>
    return;
  }
  FMC_Initialized = 1;
 80015c0:	4b4e      	ldr	r3, [pc, #312]	; (80016fc <HAL_FMC_MspInit+0x15c>)
 80015c2:	2201      	movs	r2, #1
 80015c4:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015c6:	f107 0308 	add.w	r3, r7, #8
 80015ca:	22c0      	movs	r2, #192	; 0xc0
 80015cc:	2100      	movs	r1, #0
 80015ce:	4618      	mov	r0, r3
 80015d0:	f027 f9ee 	bl	80289b0 <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 80015d4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80015d8:	f04f 0300 	mov.w	r3, #0
 80015dc:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 80015e0:	2300      	movs	r3, #0
 80015e2:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015e4:	f107 0308 	add.w	r3, r7, #8
 80015e8:	4618      	mov	r0, r3
 80015ea:	f012 fa1d 	bl	8013a28 <HAL_RCCEx_PeriphCLKConfig>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <HAL_FMC_MspInit+0x58>
    {
      Error_Handler();
 80015f4:	f7ff fcbe 	bl	8000f74 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80015f8:	4b41      	ldr	r3, [pc, #260]	; (8001700 <HAL_FMC_MspInit+0x160>)
 80015fa:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80015fe:	4a40      	ldr	r2, [pc, #256]	; (8001700 <HAL_FMC_MspInit+0x160>)
 8001600:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001604:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 8001608:	4b3d      	ldr	r3, [pc, #244]	; (8001700 <HAL_FMC_MspInit+0x160>)
 800160a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800160e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001612:	607b      	str	r3, [r7, #4]
 8001614:	687b      	ldr	r3, [r7, #4]
  PG0   ------> FMC_A10
  PE8   ------> FMC_D5
  PE11   ------> FMC_D8
  PH7   ------> FMC_SDCKE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 8001616:	f248 1333 	movw	r3, #33075	; 0x8133
 800161a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_1|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161e:	2302      	movs	r3, #2
 8001620:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001624:	2300      	movs	r3, #0
 8001626:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800162a:	2303      	movs	r3, #3
 800162c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001630:	230c      	movs	r3, #12
 8001632:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001636:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800163a:	4619      	mov	r1, r3
 800163c:	4831      	ldr	r0, [pc, #196]	; (8001704 <HAL_FMC_MspInit+0x164>)
 800163e:	f00c f9b1 	bl	800d9a4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_15
 8001642:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001646:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800164a:	2302      	movs	r3, #2
 800164c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001650:	2300      	movs	r3, #0
 8001652:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001656:	2303      	movs	r3, #3
 8001658:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800165c:	230c      	movs	r3, #12
 800165e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001662:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001666:	4619      	mov	r1, r3
 8001668:	4827      	ldr	r0, [pc, #156]	; (8001708 <HAL_FMC_MspInit+0x168>)
 800166a:	f00c f99b 	bl	800d9a4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_12|GPIO_PIN_7
 800166e:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001672:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_10|GPIO_PIN_9
                          |GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001676:	2302      	movs	r3, #2
 8001678:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167c:	2300      	movs	r3, #0
 800167e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001682:	2303      	movs	r3, #3
 8001684:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001688:	230c      	movs	r3, #12
 800168a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800168e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001692:	4619      	mov	r1, r3
 8001694:	481d      	ldr	r0, [pc, #116]	; (800170c <HAL_FMC_MspInit+0x16c>)
 8001696:	f00c f985 	bl	800d9a4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_4
 800169a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800169e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_13|GPIO_PIN_11
                          |GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a2:	2302      	movs	r3, #2
 80016a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a8:	2300      	movs	r3, #0
 80016aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ae:	2303      	movs	r3, #3
 80016b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80016b4:	230c      	movs	r3, #12
 80016b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80016ba:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80016be:	4619      	mov	r1, r3
 80016c0:	4813      	ldr	r0, [pc, #76]	; (8001710 <HAL_FMC_MspInit+0x170>)
 80016c2:	f00c f96f 	bl	800d9a4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_7;
 80016c6:	23e0      	movs	r3, #224	; 0xe0
 80016c8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016cc:	2302      	movs	r3, #2
 80016ce:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d2:	2300      	movs	r3, #0
 80016d4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016d8:	2303      	movs	r3, #3
 80016da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80016de:	230c      	movs	r3, #12
 80016e0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80016e4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80016e8:	4619      	mov	r1, r3
 80016ea:	480a      	ldr	r0, [pc, #40]	; (8001714 <HAL_FMC_MspInit+0x174>)
 80016ec:	f00c f95a 	bl	800d9a4 <HAL_GPIO_Init>
 80016f0:	e000      	b.n	80016f4 <HAL_FMC_MspInit+0x154>
    return;
 80016f2:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80016f4:	37e0      	adds	r7, #224	; 0xe0
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	24005ea8 	.word	0x24005ea8
 8001700:	58024400 	.word	0x58024400
 8001704:	58021800 	.word	0x58021800
 8001708:	58020c00 	.word	0x58020c00
 800170c:	58021000 	.word	0x58021000
 8001710:	58021400 	.word	0x58021400
 8001714:	58021c00 	.word	0x58021c00

08001718 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001720:	f7ff ff3e 	bl	80015a0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001724:	bf00      	nop
 8001726:	3708      	adds	r7, #8
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}

0800172c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b090      	sub	sp, #64	; 0x40
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2b0f      	cmp	r3, #15
 8001738:	d827      	bhi.n	800178a <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 800173a:	2200      	movs	r2, #0
 800173c:	6879      	ldr	r1, [r7, #4]
 800173e:	2036      	movs	r0, #54	; 0x36
 8001740:	f00b fd6a 	bl	800d218 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001744:	2036      	movs	r0, #54	; 0x36
 8001746:	f00b fd81 	bl	800d24c <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 800174a:	4a29      	ldr	r2, [pc, #164]	; (80017f0 <HAL_InitTick+0xc4>)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001750:	4b28      	ldr	r3, [pc, #160]	; (80017f4 <HAL_InitTick+0xc8>)
 8001752:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001756:	4a27      	ldr	r2, [pc, #156]	; (80017f4 <HAL_InitTick+0xc8>)
 8001758:	f043 0310 	orr.w	r3, r3, #16
 800175c:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001760:	4b24      	ldr	r3, [pc, #144]	; (80017f4 <HAL_InitTick+0xc8>)
 8001762:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001766:	f003 0310 	and.w	r3, r3, #16
 800176a:	60fb      	str	r3, [r7, #12]
 800176c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800176e:	f107 0210 	add.w	r2, r7, #16
 8001772:	f107 0314 	add.w	r3, r7, #20
 8001776:	4611      	mov	r1, r2
 8001778:	4618      	mov	r0, r3
 800177a:	f012 f913 	bl	80139a4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800177e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001780:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001784:	2b00      	cmp	r3, #0
 8001786:	d106      	bne.n	8001796 <HAL_InitTick+0x6a>
 8001788:	e001      	b.n	800178e <HAL_InitTick+0x62>
    return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e02b      	b.n	80017e6 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800178e:	f012 f8dd 	bl	801394c <HAL_RCC_GetPCLK1Freq>
 8001792:	63f8      	str	r0, [r7, #60]	; 0x3c
 8001794:	e004      	b.n	80017a0 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001796:	f012 f8d9 	bl	801394c <HAL_RCC_GetPCLK1Freq>
 800179a:	4603      	mov	r3, r0
 800179c:	005b      	lsls	r3, r3, #1
 800179e:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80017a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017a2:	4a15      	ldr	r2, [pc, #84]	; (80017f8 <HAL_InitTick+0xcc>)
 80017a4:	fba2 2303 	umull	r2, r3, r2, r3
 80017a8:	0c9b      	lsrs	r3, r3, #18
 80017aa:	3b01      	subs	r3, #1
 80017ac:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80017ae:	4b13      	ldr	r3, [pc, #76]	; (80017fc <HAL_InitTick+0xd0>)
 80017b0:	4a13      	ldr	r2, [pc, #76]	; (8001800 <HAL_InitTick+0xd4>)
 80017b2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80017b4:	4b11      	ldr	r3, [pc, #68]	; (80017fc <HAL_InitTick+0xd0>)
 80017b6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80017ba:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80017bc:	4a0f      	ldr	r2, [pc, #60]	; (80017fc <HAL_InitTick+0xd0>)
 80017be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017c0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80017c2:	4b0e      	ldr	r3, [pc, #56]	; (80017fc <HAL_InitTick+0xd0>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017c8:	4b0c      	ldr	r3, [pc, #48]	; (80017fc <HAL_InitTick+0xd0>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80017ce:	480b      	ldr	r0, [pc, #44]	; (80017fc <HAL_InitTick+0xd0>)
 80017d0:	f013 fce5 	bl	801519e <HAL_TIM_Base_Init>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d104      	bne.n	80017e4 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80017da:	4808      	ldr	r0, [pc, #32]	; (80017fc <HAL_InitTick+0xd0>)
 80017dc:	f013 fd40 	bl	8015260 <HAL_TIM_Base_Start_IT>
 80017e0:	4603      	mov	r3, r0
 80017e2:	e000      	b.n	80017e6 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3740      	adds	r7, #64	; 0x40
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	2400005c 	.word	0x2400005c
 80017f4:	58024400 	.word	0x58024400
 80017f8:	431bde83 	.word	0x431bde83
 80017fc:	24005eac 	.word	0x24005eac
 8001800:	40001000 	.word	0x40001000

08001804 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001808:	bf00      	nop
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr

08001812 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001812:	b480      	push	{r7}
 8001814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001816:	e7fe      	b.n	8001816 <HardFault_Handler+0x4>

08001818 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800181c:	e7fe      	b.n	800181c <MemManage_Handler+0x4>

0800181e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800181e:	b480      	push	{r7}
 8001820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001822:	e7fe      	b.n	8001822 <BusFault_Handler+0x4>

08001824 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001828:	e7fe      	b.n	8001828 <UsageFault_Handler+0x4>

0800182a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800182a:	b480      	push	{r7}
 800182c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800182e:	bf00      	nop
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr

08001838 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LCD_INT_Pin);
 800183c:	2004      	movs	r0, #4
 800183e:	f00c fbb6 	bl	800dfae <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001842:	bf00      	nop
 8001844:	bd80      	pop	{r7, pc}
	...

08001848 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800184c:	4802      	ldr	r0, [pc, #8]	; (8001858 <TIM6_DAC_IRQHandler+0x10>)
 800184e:	f013 fd7f 	bl	8015350 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001852:	bf00      	nop
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	24005eac 	.word	0x24005eac

0800185c <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001860:	4802      	ldr	r0, [pc, #8]	; (800186c <LTDC_IRQHandler+0x10>)
 8001862:	f00f fa61 	bl	8010d28 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8001866:	bf00      	nop
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	24005d54 	.word	0x24005d54

08001870 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001874:	4802      	ldr	r0, [pc, #8]	; (8001880 <DMA2D_IRQHandler+0x10>)
 8001876:	f00b fed7 	bl	800d628 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800187a:	bf00      	nop
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	24005b68 	.word	0x24005b68

08001884 <OCTOSPI1_IRQHandler>:

/**
  * @brief This function handles OCTOSPI1 global interrupt.
  */
void OCTOSPI1_IRQHandler(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OCTOSPI1_IRQn 0 */

  /* USER CODE END OCTOSPI1_IRQn 0 */
  HAL_OSPI_IRQHandler(&hospi1);
 8001888:	4802      	ldr	r0, [pc, #8]	; (8001894 <OCTOSPI1_IRQHandler+0x10>)
 800188a:	f010 f9f7 	bl	8011c7c <HAL_OSPI_IRQHandler>
  /* USER CODE BEGIN OCTOSPI1_IRQn 1 */

  /* USER CODE END OCTOSPI1_IRQn 1 */
}
 800188e:	bf00      	nop
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	24005dfc 	.word	0x24005dfc

08001898 <JPEG_IRQHandler>:

/**
  * @brief This function handles JPEG global interrupt.
  */
void JPEG_IRQHandler(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN JPEG_IRQn 0 */

  /* USER CODE END JPEG_IRQn 0 */
  HAL_JPEG_IRQHandler(&hjpeg);
 800189c:	4802      	ldr	r0, [pc, #8]	; (80018a8 <JPEG_IRQHandler+0x10>)
 800189e:	f00d fcee 	bl	800f27e <HAL_JPEG_IRQHandler>
  /* USER CODE BEGIN JPEG_IRQn 1 */

  /* USER CODE END JPEG_IRQn 1 */
}
 80018a2:	bf00      	nop
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	24005c24 	.word	0x24005c24

080018ac <MDMA_IRQHandler>:

/**
  * @brief This function handles MDMA global interrupt.
  */
void MDMA_IRQHandler(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MDMA_IRQn 0 */

  /* USER CODE END MDMA_IRQn 0 */
  HAL_MDMA_IRQHandler(&hmdma_jpeg_outfifo_th);
 80018b0:	4803      	ldr	r0, [pc, #12]	; (80018c0 <MDMA_IRQHandler+0x14>)
 80018b2:	f00f fea3 	bl	80115fc <HAL_MDMA_IRQHandler>
  HAL_MDMA_IRQHandler(&hmdma_jpeg_infifo_th);
 80018b6:	4803      	ldr	r0, [pc, #12]	; (80018c4 <MDMA_IRQHandler+0x18>)
 80018b8:	f00f fea0 	bl	80115fc <HAL_MDMA_IRQHandler>
  /* USER CODE BEGIN MDMA_IRQn 1 */

  /* USER CODE END MDMA_IRQn 1 */
}
 80018bc:	bf00      	nop
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	24005ce8 	.word	0x24005ce8
 80018c4:	24005c7c 	.word	0x24005c7c

080018c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
	return 1;
 80018cc:	2301      	movs	r3, #1
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr

080018d8 <_kill>:

int _kill(int pid, int sig)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80018e2:	f027 f807 	bl	80288f4 <__errno>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2216      	movs	r2, #22
 80018ea:	601a      	str	r2, [r3, #0]
	return -1;
 80018ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3708      	adds	r7, #8
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}

080018f8 <_exit>:

void _exit (int status)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001900:	f04f 31ff 	mov.w	r1, #4294967295
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f7ff ffe7 	bl	80018d8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800190a:	e7fe      	b.n	800190a <_exit+0x12>

0800190c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b086      	sub	sp, #24
 8001910:	af00      	add	r7, sp, #0
 8001912:	60f8      	str	r0, [r7, #12]
 8001914:	60b9      	str	r1, [r7, #8]
 8001916:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001918:	2300      	movs	r3, #0
 800191a:	617b      	str	r3, [r7, #20]
 800191c:	e00a      	b.n	8001934 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800191e:	f3af 8000 	nop.w
 8001922:	4601      	mov	r1, r0
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	1c5a      	adds	r2, r3, #1
 8001928:	60ba      	str	r2, [r7, #8]
 800192a:	b2ca      	uxtb	r2, r1
 800192c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	3301      	adds	r3, #1
 8001932:	617b      	str	r3, [r7, #20]
 8001934:	697a      	ldr	r2, [r7, #20]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	429a      	cmp	r2, r3
 800193a:	dbf0      	blt.n	800191e <_read+0x12>
	}

return len;
 800193c:	687b      	ldr	r3, [r7, #4]
}
 800193e:	4618      	mov	r0, r3
 8001940:	3718      	adds	r7, #24
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}

08001946 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001946:	b580      	push	{r7, lr}
 8001948:	b086      	sub	sp, #24
 800194a:	af00      	add	r7, sp, #0
 800194c:	60f8      	str	r0, [r7, #12]
 800194e:	60b9      	str	r1, [r7, #8]
 8001950:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001952:	2300      	movs	r3, #0
 8001954:	617b      	str	r3, [r7, #20]
 8001956:	e009      	b.n	800196c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	1c5a      	adds	r2, r3, #1
 800195c:	60ba      	str	r2, [r7, #8]
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	4618      	mov	r0, r3
 8001962:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	3301      	adds	r3, #1
 800196a:	617b      	str	r3, [r7, #20]
 800196c:	697a      	ldr	r2, [r7, #20]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	429a      	cmp	r2, r3
 8001972:	dbf1      	blt.n	8001958 <_write+0x12>
	}
	return len;
 8001974:	687b      	ldr	r3, [r7, #4]
}
 8001976:	4618      	mov	r0, r3
 8001978:	3718      	adds	r7, #24
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}

0800197e <_close>:

int _close(int file)
{
 800197e:	b480      	push	{r7}
 8001980:	b083      	sub	sp, #12
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
	return -1;
 8001986:	f04f 33ff 	mov.w	r3, #4294967295
}
 800198a:	4618      	mov	r0, r3
 800198c:	370c      	adds	r7, #12
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr

08001996 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001996:	b480      	push	{r7}
 8001998:	b083      	sub	sp, #12
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
 800199e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019a6:	605a      	str	r2, [r3, #4]
	return 0;
 80019a8:	2300      	movs	r3, #0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	370c      	adds	r7, #12
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr

080019b6 <_isatty>:

int _isatty(int file)
{
 80019b6:	b480      	push	{r7}
 80019b8:	b083      	sub	sp, #12
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
	return 1;
 80019be:	2301      	movs	r3, #1
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b085      	sub	sp, #20
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	60f8      	str	r0, [r7, #12]
 80019d4:	60b9      	str	r1, [r7, #8]
 80019d6:	607a      	str	r2, [r7, #4]
	return 0;
 80019d8:	2300      	movs	r3, #0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3714      	adds	r7, #20
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
	...

080019e8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80019f0:	4b11      	ldr	r3, [pc, #68]	; (8001a38 <_sbrk+0x50>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d102      	bne.n	80019fe <_sbrk+0x16>
		heap_end = &end;
 80019f8:	4b0f      	ldr	r3, [pc, #60]	; (8001a38 <_sbrk+0x50>)
 80019fa:	4a10      	ldr	r2, [pc, #64]	; (8001a3c <_sbrk+0x54>)
 80019fc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80019fe:	4b0e      	ldr	r3, [pc, #56]	; (8001a38 <_sbrk+0x50>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001a04:	4b0c      	ldr	r3, [pc, #48]	; (8001a38 <_sbrk+0x50>)
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	4413      	add	r3, r2
 8001a0c:	466a      	mov	r2, sp
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d907      	bls.n	8001a22 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001a12:	f026 ff6f 	bl	80288f4 <__errno>
 8001a16:	4603      	mov	r3, r0
 8001a18:	220c      	movs	r2, #12
 8001a1a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8001a1c:	f04f 33ff 	mov.w	r3, #4294967295
 8001a20:	e006      	b.n	8001a30 <_sbrk+0x48>
	}

	heap_end += incr;
 8001a22:	4b05      	ldr	r3, [pc, #20]	; (8001a38 <_sbrk+0x50>)
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4413      	add	r3, r2
 8001a2a:	4a03      	ldr	r2, [pc, #12]	; (8001a38 <_sbrk+0x50>)
 8001a2c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3710      	adds	r7, #16
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	24005ef8 	.word	0x24005ef8
 8001a3c:	240264c8 	.word	0x240264c8

08001a40 <MX_TouchGFX_PreOSInit>:

/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
}
 8001a44:	bf00      	nop
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr

08001a4e <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 8001a4e:	b580      	push	{r7, lr}
 8001a50:	af00      	add	r7, sp, #0
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_components_init();
 8001a52:	f003 fa3b 	bl	8004ecc <touchgfx_components_init>
  touchgfx_init();
 8001a56:	f003 fa0f 	bl	8004e78 <touchgfx_init>
}
 8001a5a:	bf00      	nop
 8001a5c:	bd80      	pop	{r7, pc}

08001a5e <TouchGFX_Task>:

/**
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	b082      	sub	sp, #8
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 8001a66:	f003 fa39 	bl	8004edc <touchgfx_taskEntry>
}
 8001a6a:	bf00      	nop
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
	...

08001a74 <_ZN8touchgfx18MCUInstrumentationD1Ev>:

    /** Initialize. */
    virtual void init() = 0;

    /** Finalizes an instance of the MCUInstrumentation class. */
    virtual ~MCUInstrumentation()
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
    {
 8001a7c:	4a04      	ldr	r2, [pc, #16]	; (8001a90 <_ZN8touchgfx18MCUInstrumentationD1Ev+0x1c>)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	601a      	str	r2, [r3, #0]
    }
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4618      	mov	r0, r3
 8001a86:	370c      	adds	r7, #12
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr
 8001a90:	0802bf54 	.word	0x0802bf54

08001a94 <_ZN8touchgfx18MCUInstrumentationD0Ev>:
    virtual ~MCUInstrumentation()
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
    }
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	f7ff ffe9 	bl	8001a74 <_ZN8touchgfx18MCUInstrumentationD1Ev>
 8001aa2:	210c      	movs	r1, #12
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f026 fec4 	bl	8028832 <_ZdlPvj>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4618      	mov	r0, r3
 8001aae:	3708      	adds	r7, #8
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <_ZN8touchgfx18MCUInstrumentation12setMCUActiveEb>:
    /**
     * Sets MCU activity high.
     *
     * @param  active if True, inactive otherwise.
     */
    virtual void setMCUActive(bool active)
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	460b      	mov	r3, r1
 8001abe:	70fb      	strb	r3, [r7, #3]
    {
        if (active) // Idle task sched out
 8001ac0:	78fb      	ldrb	r3, [r7, #3]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d011      	beq.n	8001aea <_ZN8touchgfx18MCUInstrumentation12setMCUActiveEb+0x36>
        {
            uint32_t cc_temp = getCPUCycles() - cc_in;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	3310      	adds	r3, #16
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	4798      	blx	r3
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	60fb      	str	r3, [r7, #12]
            cc_consumed += cc_temp;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	685a      	ldr	r2, [r3, #4]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	441a      	add	r2, r3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	605a      	str	r2, [r3, #4]
        }
        else // Idle task sched in
        {
            cc_in = getCPUCycles();
        }
    }
 8001ae8:	e008      	b.n	8001afc <_ZN8touchgfx18MCUInstrumentation12setMCUActiveEb+0x48>
            cc_in = getCPUCycles();
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	3310      	adds	r3, #16
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	4798      	blx	r3
 8001af6:	4602      	mov	r2, r0
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	609a      	str	r2, [r3, #8]
    }
 8001afc:	bf00      	nop
 8001afe:	3710      	adds	r7, #16
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
    /**
     * Gets number of consumed clock cycles.
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
    {
        return cc_consumed;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	685b      	ldr	r3, [r3, #4]
    }
 8001b10:	4618      	mov	r0, r3
 8001b12:	370c      	adds	r7, #12
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr

08001b1c <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
    /**
     * Sets number of consumed clock cycles.
     *
     * @param  val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
 8001b24:	6039      	str	r1, [r7, #0]
    {
        cc_consumed = val;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	683a      	ldr	r2, [r7, #0]
 8001b2a:	605a      	str	r2, [r3, #4]
    }
 8001b2c:	bf00      	nop
 8001b2e:	370c      	adds	r7, #12
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr

08001b38 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>:
#include <touchgfx/hal/HAL.hpp>

namespace touchgfx
{
void CortexMMCUInstrumentation::init()
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
    //                                    Embedded Trace Macrocell (ETM)
    //                                    Trace Port Interface Unit (TPIU).
    //                                    This enables control of power usage unless tracing is required. The application can enable this, for ITM use, or use by a debugger.

    // Enable Debug Exception and Monitor Control Register
    *((volatile unsigned int*)0xE000EDFC) |= 0x01000000;
 8001b40:	4b0b      	ldr	r3, [pc, #44]	; (8001b70 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x38>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a0a      	ldr	r2, [pc, #40]	; (8001b70 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x38>)
 8001b46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b4a:	6013      	str	r3, [r2, #0]
    // Enable Lock Access Register
    *((volatile unsigned int*)0xE0001FB0) |= 0xC5ACCE55;
 8001b4c:	4b09      	ldr	r3, [pc, #36]	; (8001b74 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x3c>)
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	4908      	ldr	r1, [pc, #32]	; (8001b74 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x3c>)
 8001b52:	4b09      	ldr	r3, [pc, #36]	; (8001b78 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x40>)
 8001b54:	4313      	orrs	r3, r2
 8001b56:	600b      	str	r3, [r1, #0]
    // Enable Data Watchpoint and Trace Control Register
    *((volatile unsigned int*)0xE0001000) |= 1;
 8001b58:	4b08      	ldr	r3, [pc, #32]	; (8001b7c <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x44>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a07      	ldr	r2, [pc, #28]	; (8001b7c <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x44>)
 8001b5e:	f043 0301 	orr.w	r3, r3, #1
 8001b62:	6013      	str	r3, [r2, #0]
}
 8001b64:	bf00      	nop
 8001b66:	370c      	adds	r7, #12
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr
 8001b70:	e000edfc 	.word	0xe000edfc
 8001b74:	e0001fb0 	.word	0xe0001fb0
 8001b78:	c5acce55 	.word	0xc5acce55
 8001b7c:	e0001000 	.word	0xe0001000

08001b80 <_ZN8touchgfx25CortexMMCUInstrumentation12getElapsedUSEjjj>:

//Board specific clockfrequency
unsigned int CortexMMCUInstrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b085      	sub	sp, #20
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	60f8      	str	r0, [r7, #12]
 8001b88:	60b9      	str	r1, [r7, #8]
 8001b8a:	607a      	str	r2, [r7, #4]
 8001b8c:	603b      	str	r3, [r7, #0]
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
 8001b8e:	687a      	ldr	r2, [r7, #4]
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	1ad2      	subs	r2, r2, r3
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	085b      	lsrs	r3, r3, #1
 8001b98:	441a      	add	r2, r3
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3714      	adds	r7, #20
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr

08001bac <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv>:

unsigned int CortexMMCUInstrumentation::getCPUCycles()
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
    return *((volatile unsigned int*)0xE0001004);
 8001bb4:	4b03      	ldr	r3, [pc, #12]	; (8001bc4 <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv+0x18>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	370c      	adds	r7, #12
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr
 8001bc4:	e0001004 	.word	0xe0001004

08001bc8 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb>:

void CortexMMCUInstrumentation::setMCUActive(bool active)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	70fb      	strb	r3, [r7, #3]
    if (active) //idle task sched out
 8001bd4:	78fb      	ldrb	r3, [r7, #3]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d011      	beq.n	8001bfe <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x36>
    {
        uint32_t cc_temp = getCPUCycles() - cc_in;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	3310      	adds	r3, #16
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	4798      	blx	r3
 8001be6:	4602      	mov	r2, r0
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	60fb      	str	r3, [r7, #12]
        cc_consumed += cc_temp;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	685a      	ldr	r2, [r3, #4]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	441a      	add	r2, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	605a      	str	r2, [r3, #4]
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
    }
}
 8001bfc:	e008      	b.n	8001c10 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x48>
        cc_in = getCPUCycles();
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	3310      	adds	r3, #16
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	4798      	blx	r3
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	609a      	str	r2, [r3, #8]
}
 8001c10:	bf00      	nop
 8001c12:	3710      	adds	r7, #16
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}

08001c18 <_ZN8touchgfx25CortexMMCUInstrumentationD1Ev>:
 *        Interface for instrumenting Cortex-M processors to measure MCU load via measured CPU
 *        cycles.
 *
 * @sa MCUInstrumentation
 */
class CortexMMCUInstrumentation : public MCUInstrumentation
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	4a05      	ldr	r2, [pc, #20]	; (8001c38 <_ZN8touchgfx25CortexMMCUInstrumentationD1Ev+0x20>)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	601a      	str	r2, [r3, #0]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7ff ff23 	bl	8001a74 <_ZN8touchgfx18MCUInstrumentationD1Ev>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4618      	mov	r0, r3
 8001c32:	3708      	adds	r7, #8
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	0802bf2c 	.word	0x0802bf2c

08001c3c <_ZN8touchgfx25CortexMMCUInstrumentationD0Ev>:
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f7ff ffe7 	bl	8001c18 <_ZN8touchgfx25CortexMMCUInstrumentationD1Ev>
 8001c4a:	210c      	movs	r1, #12
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f026 fdf0 	bl	8028832 <_ZdlPvj>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4618      	mov	r0, r3
 8001c56:	3708      	adds	r7, #8
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
    {
 8001c64:	4a04      	ldr	r2, [pc, #16]	; (8001c78 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	601a      	str	r2, [r3, #0]
    }
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	370c      	adds	r7, #12
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr
 8001c78:	0802bf94 	.word	0x0802bf94

08001c7c <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
    }
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f7ff ffe9 	bl	8001c5c <_ZN8touchgfx15TouchControllerD1Ev>
 8001c8a:	2104      	movs	r1, #4
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f026 fdd0 	bl	8028832 <_ZdlPvj>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4618      	mov	r0, r3
 8001c96:	3708      	adds	r7, #8
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}

08001c9c <_ZN20STM32TouchController4initEv>:
#include <stm32h7b3i_discovery_ts.h>
#include <TouchGFXHAL.hpp>
#include <cmsis_os.h>

void STM32TouchController::init()
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b086      	sub	sp, #24
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
    TS_Init_t hTS;

    hTS.Orientation = TS_SWAP_XY;
 8001ca4:	2308      	movs	r3, #8
 8001ca6:	613b      	str	r3, [r7, #16]
    hTS.Accuracy = 0;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	617b      	str	r3, [r7, #20]
    hTS.Width = touchgfx::HAL::FRAME_BUFFER_WIDTH;
 8001cac:	4b07      	ldr	r3, [pc, #28]	; (8001ccc <_ZN20STM32TouchController4initEv+0x30>)
 8001cae:	881b      	ldrh	r3, [r3, #0]
 8001cb0:	60bb      	str	r3, [r7, #8]
    hTS.Height = touchgfx::HAL::FRAME_BUFFER_HEIGHT;
 8001cb2:	4b07      	ldr	r3, [pc, #28]	; (8001cd0 <_ZN20STM32TouchController4initEv+0x34>)
 8001cb4:	881b      	ldrh	r3, [r3, #0]
 8001cb6:	60fb      	str	r3, [r7, #12]
    BSP_TS_Init(0, &hTS);
 8001cb8:	f107 0308 	add.w	r3, r7, #8
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	2000      	movs	r0, #0
 8001cc0:	f00a fece 	bl	800ca60 <BSP_TS_Init>
}
 8001cc4:	bf00      	nop
 8001cc6:	3718      	adds	r7, #24
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	2402623a 	.word	0x2402623a
 8001cd0:	2402623c 	.word	0x2402623c

08001cd4 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b088      	sub	sp, #32
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	60f8      	str	r0, [r7, #12]
 8001cdc:	60b9      	str	r1, [r7, #8]
 8001cde:	607a      	str	r2, [r7, #4]
    TS_State_t TS_State = { 0 };
 8001ce0:	f107 0310 	add.w	r3, r7, #16
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	601a      	str	r2, [r3, #0]
 8001ce8:	605a      	str	r2, [r3, #4]
 8001cea:	609a      	str	r2, [r3, #8]

    /* This should never fail !! */
    if (BSP_TS_GetState(0, &TS_State) != BSP_ERROR_NONE)
 8001cec:	f107 0310 	add.w	r3, r7, #16
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	2000      	movs	r0, #0
 8001cf4:	f00a ff5a 	bl	800cbac <BSP_TS_GetState>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	bf14      	ite	ne
 8001cfe:	2301      	movne	r3, #1
 8001d00:	2300      	moveq	r3, #0
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d00a      	beq.n	8001d1e <_ZN20STM32TouchController11sampleTouchERlS0_+0x4a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d0c:	f383 8811 	msr	BASEPRI, r3
 8001d10:	f3bf 8f6f 	isb	sy
 8001d14:	f3bf 8f4f 	dsb	sy
 8001d18:	61fb      	str	r3, [r7, #28]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001d1a:	bf00      	nop
    {
        configASSERT(0);
 8001d1c:	e7fe      	b.n	8001d1c <_ZN20STM32TouchController11sampleTouchERlS0_+0x48>
    }

    if (TS_State.TouchDetected)
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d009      	beq.n	8001d38 <_ZN20STM32TouchController11sampleTouchERlS0_+0x64>
    {
        x = TS_State.TouchX;
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	461a      	mov	r2, r3
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	601a      	str	r2, [r3, #0]
        y = TS_State.TouchY;
 8001d2c:	69bb      	ldr	r3, [r7, #24]
 8001d2e:	461a      	mov	r2, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	601a      	str	r2, [r3, #0]

        return true;
 8001d34:	2301      	movs	r3, #1
 8001d36:	e000      	b.n	8001d3a <_ZN20STM32TouchController11sampleTouchERlS0_+0x66>
    }

    return false;
 8001d38:	2300      	movs	r3, #0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3720      	adds	r7, #32
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
	...

08001d44 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	4a05      	ldr	r2, [pc, #20]	; (8001d64 <_ZN20STM32TouchControllerD1Ev+0x20>)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	601a      	str	r2, [r3, #0]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7ff ff81 	bl	8001c5c <_ZN8touchgfx15TouchControllerD1Ev>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3708      	adds	r7, #8
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	0802bf7c 	.word	0x0802bf7c

08001d68 <_ZN20STM32TouchControllerD0Ev>:
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f7ff ffe7 	bl	8001d44 <_ZN20STM32TouchControllerD1Ev>
 8001d76:	2104      	movs	r1, #4
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	f026 fd5a 	bl	8028832 <_ZdlPvj>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4618      	mov	r0, r3
 8001d82:	3708      	adds	r7, #8
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <_ZN8touchgfx4GPIO4initEv>:

/*
 * Perform configuration of IO pins.
 */
void GPIO::init()
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
    for (int id = 0; id <= 4; id++)
 8001d8e:	2300      	movs	r3, #0
 8001d90:	607b      	str	r3, [r7, #4]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2b04      	cmp	r3, #4
 8001d96:	dc16      	bgt.n	8001dc6 <_ZN8touchgfx4GPIO4initEv+0x3e>
    {
        if (GPIO::get(static_cast<GPIO_ID>(id)))
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f000 f909 	bl	8001fb4 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d00a      	beq.n	8001dbe <_ZN8touchgfx4GPIO4initEv+0x36>
        {
            if (GPIO_InvertedLevels[id] != 1)
 8001da8:	4a09      	ldr	r2, [pc, #36]	; (8001dd0 <_ZN8touchgfx4GPIO4initEv+0x48>)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d004      	beq.n	8001dbe <_ZN8touchgfx4GPIO4initEv+0x36>
            {
                GPIO_InvertedLevels[id] = 1;
 8001db4:	4a06      	ldr	r2, [pc, #24]	; (8001dd0 <_ZN8touchgfx4GPIO4initEv+0x48>)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2101      	movs	r1, #1
 8001dba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int id = 0; id <= 4; id++)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	607b      	str	r3, [r7, #4]
 8001dc4:	e7e5      	b.n	8001d92 <_ZN8touchgfx4GPIO4initEv+0xa>
            }
        }
    }
}
 8001dc6:	bf00      	nop
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	24005efc 	.word	0x24005efc

08001dd4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	4603      	mov	r3, r0
 8001ddc:	71fb      	strb	r3, [r7, #7]
    switch (id)
 8001dde:	79fb      	ldrb	r3, [r7, #7]
 8001de0:	2b03      	cmp	r3, #3
 8001de2:	d84b      	bhi.n	8001e7c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xa8>
 8001de4:	a201      	add	r2, pc, #4	; (adr r2, 8001dec <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>)
 8001de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dea:	bf00      	nop
 8001dec:	08001dfd 	.word	0x08001dfd
 8001df0:	08001e1d 	.word	0x08001e1d
 8001df4:	08001e3d 	.word	0x08001e3d
 8001df8:	08001e5d 	.word	0x08001e5d
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
 8001dfc:	79fb      	ldrb	r3, [r7, #7]
 8001dfe:	4a21      	ldr	r2, [pc, #132]	; (8001e84 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xb0>)
 8001e00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	bf0c      	ite	eq
 8001e08:	2301      	moveq	r3, #1
 8001e0a:	2300      	movne	r3, #0
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	461a      	mov	r2, r3
 8001e10:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001e14:	481c      	ldr	r0, [pc, #112]	; (8001e88 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xb4>)
 8001e16:	f00c f897 	bl	800df48 <HAL_GPIO_WritePin>
#endif
        break;
 8001e1a:	e02f      	b.n	8001e7c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xa8>
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 8001e1c:	79fb      	ldrb	r3, [r7, #7]
 8001e1e:	4a19      	ldr	r2, [pc, #100]	; (8001e84 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xb0>)
 8001e20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	bf0c      	ite	eq
 8001e28:	2301      	moveq	r3, #1
 8001e2a:	2300      	movne	r3, #0
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	461a      	mov	r2, r3
 8001e30:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e34:	4814      	ldr	r0, [pc, #80]	; (8001e88 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xb4>)
 8001e36:	f00c f887 	bl	800df48 <HAL_GPIO_WritePin>
#endif
        break;
 8001e3a:	e01f      	b.n	8001e7c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xa8>
    case GPIO::FRAME_RATE:
#if defined(FRAME_RATE_GPIO_Port) && defined(FRAME_RATE_Pin)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
 8001e3c:	79fb      	ldrb	r3, [r7, #7]
 8001e3e:	4a11      	ldr	r2, [pc, #68]	; (8001e84 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xb0>)
 8001e40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	bf0c      	ite	eq
 8001e48:	2301      	moveq	r3, #1
 8001e4a:	2300      	movne	r3, #0
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	461a      	mov	r2, r3
 8001e50:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e54:	480d      	ldr	r0, [pc, #52]	; (8001e8c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xb8>)
 8001e56:	f00c f877 	bl	800df48 <HAL_GPIO_WritePin>
#endif
        break;
 8001e5a:	e00f      	b.n	8001e7c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xa8>
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 8001e5c:	79fb      	ldrb	r3, [r7, #7]
 8001e5e:	4a09      	ldr	r2, [pc, #36]	; (8001e84 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xb0>)
 8001e60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	bf0c      	ite	eq
 8001e68:	2301      	moveq	r3, #1
 8001e6a:	2300      	movne	r3, #0
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	461a      	mov	r2, r3
 8001e70:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e74:	4804      	ldr	r0, [pc, #16]	; (8001e88 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xb4>)
 8001e76:	f00c f867 	bl	800df48 <HAL_GPIO_WritePin>
#endif
        break;
 8001e7a:	bf00      	nop
    }
}
 8001e7c:	bf00      	nop
 8001e7e:	3708      	adds	r7, #8
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	24005efc 	.word	0x24005efc
 8001e88:	58021c00 	.word	0x58021c00
 8001e8c:	58022000 	.word	0x58022000

08001e90 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	4603      	mov	r3, r0
 8001e98:	71fb      	strb	r3, [r7, #7]
    switch (id)
 8001e9a:	79fb      	ldrb	r3, [r7, #7]
 8001e9c:	2b03      	cmp	r3, #3
 8001e9e:	d84b      	bhi.n	8001f38 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xa8>
 8001ea0:	a201      	add	r2, pc, #4	; (adr r2, 8001ea8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>)
 8001ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ea6:	bf00      	nop
 8001ea8:	08001eb9 	.word	0x08001eb9
 8001eac:	08001ed9 	.word	0x08001ed9
 8001eb0:	08001ef9 	.word	0x08001ef9
 8001eb4:	08001f19 	.word	0x08001f19
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
 8001eb8:	79fb      	ldrb	r3, [r7, #7]
 8001eba:	4a21      	ldr	r2, [pc, #132]	; (8001f40 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xb0>)
 8001ebc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d001      	beq.n	8001ec8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x38>
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e000      	b.n	8001eca <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x3a>
 8001ec8:	2300      	movs	r3, #0
 8001eca:	461a      	mov	r2, r3
 8001ecc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ed0:	481c      	ldr	r0, [pc, #112]	; (8001f44 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xb4>)
 8001ed2:	f00c f839 	bl	800df48 <HAL_GPIO_WritePin>
#endif
        break;
 8001ed6:	e02f      	b.n	8001f38 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xa8>
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 8001ed8:	79fb      	ldrb	r3, [r7, #7]
 8001eda:	4a19      	ldr	r2, [pc, #100]	; (8001f40 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xb0>)
 8001edc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d001      	beq.n	8001ee8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e000      	b.n	8001eea <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x5a>
 8001ee8:	2300      	movs	r3, #0
 8001eea:	461a      	mov	r2, r3
 8001eec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ef0:	4814      	ldr	r0, [pc, #80]	; (8001f44 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xb4>)
 8001ef2:	f00c f829 	bl	800df48 <HAL_GPIO_WritePin>
#endif
        break;
 8001ef6:	e01f      	b.n	8001f38 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xa8>
    case GPIO::FRAME_RATE:
#if defined(FRAME_RATE_GPIO_Port) && defined(FRAME_RATE_Pin)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
 8001ef8:	79fb      	ldrb	r3, [r7, #7]
 8001efa:	4a11      	ldr	r2, [pc, #68]	; (8001f40 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xb0>)
 8001efc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d001      	beq.n	8001f08 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x78>
 8001f04:	2301      	movs	r3, #1
 8001f06:	e000      	b.n	8001f0a <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x7a>
 8001f08:	2300      	movs	r3, #0
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f10:	480d      	ldr	r0, [pc, #52]	; (8001f48 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xb8>)
 8001f12:	f00c f819 	bl	800df48 <HAL_GPIO_WritePin>
#endif
        break;
 8001f16:	e00f      	b.n	8001f38 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xa8>
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 8001f18:	79fb      	ldrb	r3, [r7, #7]
 8001f1a:	4a09      	ldr	r2, [pc, #36]	; (8001f40 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xb0>)
 8001f1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d001      	beq.n	8001f28 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x98>
 8001f24:	2301      	movs	r3, #1
 8001f26:	e000      	b.n	8001f2a <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x9a>
 8001f28:	2300      	movs	r3, #0
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f30:	4804      	ldr	r0, [pc, #16]	; (8001f44 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xb4>)
 8001f32:	f00c f809 	bl	800df48 <HAL_GPIO_WritePin>
#endif
        break;
 8001f36:	bf00      	nop
    }
}
 8001f38:	bf00      	nop
 8001f3a:	3708      	adds	r7, #8
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	24005efc 	.word	0x24005efc
 8001f44:	58021c00 	.word	0x58021c00
 8001f48:	58022000 	.word	0x58022000

08001f4c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	4603      	mov	r3, r0
 8001f54:	71fb      	strb	r3, [r7, #7]
    switch (id)
 8001f56:	79fb      	ldrb	r3, [r7, #7]
 8001f58:	2b03      	cmp	r3, #3
 8001f5a:	d823      	bhi.n	8001fa4 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x58>
 8001f5c:	a201      	add	r2, pc, #4	; (adr r2, 8001f64 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>)
 8001f5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f62:	bf00      	nop
 8001f64:	08001f75 	.word	0x08001f75
 8001f68:	08001f81 	.word	0x08001f81
 8001f6c:	08001f8d 	.word	0x08001f8d
 8001f70:	08001f99 	.word	0x08001f99
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8001f74:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f78:	480c      	ldr	r0, [pc, #48]	; (8001fac <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x60>)
 8001f7a:	f00b fffe 	bl	800df7a <HAL_GPIO_TogglePin>
#endif
        break;
 8001f7e:	e011      	b.n	8001fa4 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x58>
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8001f80:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f84:	4809      	ldr	r0, [pc, #36]	; (8001fac <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x60>)
 8001f86:	f00b fff8 	bl	800df7a <HAL_GPIO_TogglePin>
#endif
        break;
 8001f8a:	e00b      	b.n	8001fa4 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x58>
    case GPIO::FRAME_RATE:
#if defined(FRAME_RATE_GPIO_Port) && defined(FRAME_RATE_Pin)
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8001f8c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f90:	4807      	ldr	r0, [pc, #28]	; (8001fb0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x64>)
 8001f92:	f00b fff2 	bl	800df7a <HAL_GPIO_TogglePin>
#endif
        break;
 8001f96:	e005      	b.n	8001fa4 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x58>
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001f98:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f9c:	4803      	ldr	r0, [pc, #12]	; (8001fac <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x60>)
 8001f9e:	f00b ffec 	bl	800df7a <HAL_GPIO_TogglePin>
#endif
        break;
 8001fa2:	bf00      	nop
    }
}
 8001fa4:	bf00      	nop
 8001fa6:	3708      	adds	r7, #8
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	58021c00 	.word	0x58021c00
 8001fb0:	58022000 	.word	0x58022000

08001fb4 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>:

/*
 * Gets the state of a pin.
 */
bool GPIO::get(GPIO_ID id)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	4603      	mov	r3, r0
 8001fbc:	71fb      	strb	r3, [r7, #7]
    GPIO_PinState bitstatus = GPIO_PIN_RESET;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	73fb      	strb	r3, [r7, #15]
    switch (id)
 8001fc2:	79fb      	ldrb	r3, [r7, #7]
 8001fc4:	2b03      	cmp	r3, #3
 8001fc6:	d82b      	bhi.n	8002020 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x6c>
 8001fc8:	a201      	add	r2, pc, #4	; (adr r2, 8001fd0 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x1c>)
 8001fca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fce:	bf00      	nop
 8001fd0:	08001fe1 	.word	0x08001fe1
 8001fd4:	08001ff1 	.word	0x08001ff1
 8001fd8:	08002001 	.word	0x08002001
 8001fdc:	08002011 	.word	0x08002011
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        bitstatus = HAL_GPIO_ReadPin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8001fe0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001fe4:	4813      	ldr	r0, [pc, #76]	; (8002034 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x80>)
 8001fe6:	f00b ff97 	bl	800df18 <HAL_GPIO_ReadPin>
 8001fea:	4603      	mov	r3, r0
 8001fec:	73fb      	strb	r3, [r7, #15]
#endif
        break;
 8001fee:	e017      	b.n	8002020 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x6c>
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8001ff0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ff4:	480f      	ldr	r0, [pc, #60]	; (8002034 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x80>)
 8001ff6:	f00b ff8f 	bl	800df18 <HAL_GPIO_ReadPin>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	73fb      	strb	r3, [r7, #15]
#endif
        break;
 8001ffe:	e00f      	b.n	8002020 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x6c>
    case GPIO::FRAME_RATE:
#if defined(FRAME_RATE_GPIO_Port) && defined(FRAME_RATE_Pin)
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8002000:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002004:	480c      	ldr	r0, [pc, #48]	; (8002038 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x84>)
 8002006:	f00b ff87 	bl	800df18 <HAL_GPIO_ReadPin>
 800200a:	4603      	mov	r3, r0
 800200c:	73fb      	strb	r3, [r7, #15]
#endif
        break;
 800200e:	e007      	b.n	8002020 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x6c>
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8002010:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002014:	4807      	ldr	r0, [pc, #28]	; (8002034 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x80>)
 8002016:	f00b ff7f 	bl	800df18 <HAL_GPIO_ReadPin>
 800201a:	4603      	mov	r3, r0
 800201c:	73fb      	strb	r3, [r7, #15]
#endif
        break;
 800201e:	bf00      	nop
    }
    return (bitstatus == GPIO_PIN_SET);
 8002020:	7bfb      	ldrb	r3, [r7, #15]
 8002022:	2b01      	cmp	r3, #1
 8002024:	bf0c      	ite	eq
 8002026:	2301      	moveq	r3, #1
 8002028:	2300      	movne	r3, #0
 800202a:	b2db      	uxtb	r3, r3
}
 800202c:	4618      	mov	r0, r3
 800202e:	3710      	adds	r7, #16
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	58021c00 	.word	0x58021c00
 8002038:	58022000 	.word	0x58022000

0800203c <_ZN8touchgfx3HALD1Ev>:
        DISPLAY_ROTATION = rotate0;
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
    }

    /** Finalizes an instance of the HAL class. */
    virtual ~HAL()
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
    {
 8002044:	4a04      	ldr	r2, [pc, #16]	; (8002058 <_ZN8touchgfx3HALD1Ev+0x1c>)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	601a      	str	r2, [r3, #0]
    }
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4618      	mov	r0, r3
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr
 8002058:	0802d2d0 	.word	0x0802d2d0

0800205c <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
    }
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f7ff ffe9 	bl	800203c <_ZN8touchgfx3HALD1Ev>
 800206a:	217c      	movs	r1, #124	; 0x7c
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	f026 fbe0 	bl	8028832 <_ZdlPvj>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4618      	mov	r0, r3
 8002076:	3708      	adds	r7, #8
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}

0800207c <_ZN8touchgfx3HAL11getInstanceEv>:
    /**
     * Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
    {
        return instance;
 8002080:	4b03      	ldr	r3, [pc, #12]	; (8002090 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 8002082:	681b      	ldr	r3, [r3, #0]
    }
 8002084:	4618      	mov	r0, r3
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	24026240 	.word	0x24026240

08002094 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     *
     * @param  orientation The desired display orientation.
     *
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	460b      	mov	r3, r1
 800209e:	70fb      	strb	r3, [r7, #3]
    {
        requestedOrientation = orientation;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	78fa      	ldrb	r2, [r7, #3]
 80020a4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2201      	movs	r2, #1
 80020ac:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 80020b0:	bf00      	nop
 80020b2:	370c      	adds	r7, #12
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr

080020bc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
     * @param   width   The width of the framebuffer.
     * @param   height  The height of the framebuffer.
     *
     * @see touchgfx_generic_init
     */
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	460b      	mov	r3, r1
 80020c6:	807b      	strh	r3, [r7, #2]
 80020c8:	4613      	mov	r3, r2
 80020ca:	803b      	strh	r3, [r7, #0]
    {
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 80020cc:	4b0c      	ldr	r3, [pc, #48]	; (8002100 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x44>)
 80020ce:	881b      	ldrh	r3, [r3, #0]
 80020d0:	887a      	ldrh	r2, [r7, #2]
 80020d2:	429a      	cmp	r2, r3
 80020d4:	d304      	bcc.n	80020e0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x24>
 80020d6:	4b0b      	ldr	r3, [pc, #44]	; (8002104 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x48>)
 80020d8:	881b      	ldrh	r3, [r3, #0]
 80020da:	883a      	ldrh	r2, [r7, #0]
 80020dc:	429a      	cmp	r2, r3
 80020de:	d205      	bcs.n	80020ec <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>
 80020e0:	4b09      	ldr	r3, [pc, #36]	; (8002108 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x4c>)
 80020e2:	4a0a      	ldr	r2, [pc, #40]	; (800210c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x50>)
 80020e4:	219e      	movs	r1, #158	; 0x9e
 80020e6:	480a      	ldr	r0, [pc, #40]	; (8002110 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x54>)
 80020e8:	f026 fbd2 	bl	8028890 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 80020ec:	4a09      	ldr	r2, [pc, #36]	; (8002114 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x58>)
 80020ee:	887b      	ldrh	r3, [r7, #2]
 80020f0:	8013      	strh	r3, [r2, #0]
        FRAME_BUFFER_HEIGHT = height;
 80020f2:	4a09      	ldr	r2, [pc, #36]	; (8002118 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x5c>)
 80020f4:	883b      	ldrh	r3, [r7, #0]
 80020f6:	8013      	strh	r3, [r2, #0]
    }
 80020f8:	bf00      	nop
 80020fa:	3708      	adds	r7, #8
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	24026234 	.word	0x24026234
 8002104:	24026236 	.word	0x24026236
 8002108:	08029a54 	.word	0x08029a54
 800210c:	08029ab8 	.word	0x08029ab8
 8002110:	08029afc 	.word	0x08029afc
 8002114:	2402623a 	.word	0x2402623a
 8002118:	2402623c 	.word	0x2402623c

0800211c <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
    {
        if (useDMAAcceleration)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 800212a:	2b00      	cmp	r3, #0
 800212c:	d009      	beq.n	8002142 <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
        {
            return dma.getBlitCaps();
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	685a      	ldr	r2, [r3, #4]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4610      	mov	r0, r2
 800213c:	4798      	blx	r3
 800213e:	4603      	mov	r3, r0
 8002140:	e000      	b.n	8002144 <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        }
        return static_cast<BlitOperations>(0);
 8002142:	2300      	movs	r3, #0
    }
 8002144:	4618      	mov	r0, r3
 8002146:	3708      	adds	r7, #8
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}

0800214c <_ZN8touchgfx3HAL15backPorchExitedEv>:
    /**
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     */
    virtual void backPorchExited()
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f018 ffb5 	bl	801b0c4 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	33ac      	adds	r3, #172	; 0xac
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	4798      	blx	r3
    }
 8002166:	bf00      	nop
 8002168:	3708      	adds	r7, #8
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 800216e:	b480      	push	{r7}
 8002170:	b083      	sub	sp, #12
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]
 8002176:	6039      	str	r1, [r7, #0]
    {
        (void)key; // Unused variable
        return false;
 8002178:	2300      	movs	r3, #0
    }
 800217a:	4618      	mov	r0, r3
 800217c:	370c      	adds	r7, #12
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
	...

08002188 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     *
     * @see setAnimationStorage
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8002188:	b580      	push	{r7, lr}
 800218a:	b084      	sub	sp, #16
 800218c:	af00      	add	r7, sp, #0
 800218e:	60f8      	str	r0, [r7, #12]
 8002190:	60b9      	str	r1, [r7, #8]
 8002192:	607a      	str	r2, [r7, #4]
 8002194:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d106      	bne.n	80021aa <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 800219c:	4b0f      	ldr	r3, [pc, #60]	; (80021dc <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x54>)
 800219e:	4a10      	ldr	r2, [pc, #64]	; (80021e0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x58>)
 80021a0:	f240 21d2 	movw	r1, #722	; 0x2d2
 80021a4:	480f      	ldr	r0, [pc, #60]	; (80021e4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 80021a6:	f026 fb73 	bl	8028890 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	68ba      	ldr	r2, [r7, #8]
 80021ae:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	641a      	str	r2, [r3, #64]	; 0x40
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	bf14      	ite	ne
 80021bc:	2301      	movne	r3, #1
 80021be:	2300      	moveq	r3, #0
 80021c0:	b2da      	uxtb	r2, r3
 80021c2:	4b09      	ldr	r3, [pc, #36]	; (80021e8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 80021c4:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	338c      	adds	r3, #140	; 0x8c
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	6839      	ldr	r1, [r7, #0]
 80021d0:	68f8      	ldr	r0, [r7, #12]
 80021d2:	4798      	blx	r3
    }
 80021d4:	bf00      	nop
 80021d6:	3710      	adds	r7, #16
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	08029b44 	.word	0x08029b44
 80021e0:	08029b7c 	.word	0x08029b7c
 80021e4:	08029afc 	.word	0x08029afc
 80021e8:	2402623e 	.word	0x2402623e

080021ec <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	6039      	str	r1, [r7, #0]
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	683a      	ldr	r2, [r7, #0]
 80021fa:	645a      	str	r2, [r3, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	bf14      	ite	ne
 8002202:	2301      	movne	r3, #1
 8002204:	2300      	moveq	r3, #0
 8002206:	b2da      	uxtb	r2, r3
 8002208:	4b03      	ldr	r3, [pc, #12]	; (8002218 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x2c>)
 800220a:	701a      	strb	r2, [r3, #0]
    }
 800220c:	bf00      	nop
 800220e:	370c      	adds	r7, #12
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr
 8002218:	2402623f 	.word	0x2402623f

0800221c <_ZN8touchgfx3HAL21setMCUInstrumentationEPNS_18MCUInstrumentationE>:
    /**
     * Stores a pointer to an instance of an MCU specific instrumentation class.
     *
     * @param [in] mcuInstr pointer to MCU instrumentation.
     */
    void setMCUInstrumentation(MCUInstrumentation* mcuInstr)
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	6039      	str	r1, [r7, #0]
    {
        mcuInstrumentation = mcuInstr;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	683a      	ldr	r2, [r7, #0]
 800222a:	611a      	str	r2, [r3, #16]
    }
 800222c:	bf00      	nop
 800222e:	370c      	adds	r7, #12
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr

08002238 <_ZN8touchgfx3HAL24enableMCULoadCalculationEb>:
     * This method sets a flag that determines if generic HAL should calculate MCU load
     * based on concrete MCU instrumentation.
     *
     * @param  enabled If true, set flag to update MCU load.
     */
    void enableMCULoadCalculation(bool enabled)
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	460b      	mov	r3, r1
 8002242:	70fb      	strb	r3, [r7, #3]
    {
        updateMCULoad = enabled;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	78fa      	ldrb	r2, [r7, #3]
 8002248:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
    }
 800224c:	bf00      	nop
 800224e:	370c      	adds	r7, #12
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <_ZN8touchgfx3HAL19setButtonControllerEPNS_16ButtonControllerE>:
    /**
     * Stores a pointer to an instance of a specific implementation of a ButtonController.
     *
     * @param [in] btnCtrl pointer to button controller.
     */
    void setButtonController(ButtonController* btnCtrl)
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	6039      	str	r1, [r7, #0]
    {
        buttonController = btnCtrl;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	683a      	ldr	r2, [r7, #0]
 8002266:	615a      	str	r2, [r3, #20]
    }
 8002268:	bf00      	nop
 800226a:	370c      	adds	r7, #12
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr

08002274 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * Gets the flash data reader. This method must be implemented in
     * subclasses that uses a FlashDataReader object.
     *
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800227c:	2300      	movs	r3, #0
    }
 800227e:	4618      	mov	r0, r3
 8002280:	370c      	adds	r7, #12
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr

0800228a <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 800228a:	b580      	push	{r7, lr}
 800228c:	b082      	sub	sp, #8
 800228e:	af00      	add	r7, sp, #0
 8002290:	6078      	str	r0, [r7, #4]
 8002292:	460b      	mov	r3, r1
 8002294:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800229a:	2b00      	cmp	r3, #0
 800229c:	d004      	beq.n	80022a8 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022a2:	887a      	ldrh	r2, [r7, #2]
 80022a4:	4610      	mov	r0, r2
 80022a6:	4798      	blx	r3
        }
    }
 80022a8:	bf00      	nop
 80022aa:	3708      	adds	r7, #8
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}

080022b0 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     * getTFTCurrentLine function is never called and can be disregarded.
     *
     * @return In this default implementation, 0xFFFF is returned to signify "not
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
    {
        return 0xFFFFu;
 80022b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
    }
 80022bc:	4618      	mov	r0, r3
 80022be:	370c      	adds	r7, #12
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr

080022c8 <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	685a      	ldr	r2, [r3, #4]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	3318      	adds	r3, #24
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4610      	mov	r0, r2
 80022e0:	4798      	blx	r3
 80022e2:	4603      	mov	r3, r0
    }
 80022e4:	4618      	mov	r0, r3
 80022e6:	3708      	adds	r7, #8
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}

080022ec <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 80022ec:	b480      	push	{r7}
 80022ee:	b085      	sub	sp, #20
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002300:	429a      	cmp	r2, r3
 8002302:	d011      	beq.n	8002328 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>
        {
            if (DISPLAY_ROTATION == rotate0)
 8002304:	4b14      	ldr	r3, [pc, #80]	; (8002358 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d11e      	bne.n	800234a <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 800230c:	4b13      	ldr	r3, [pc, #76]	; (800235c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 800230e:	881b      	ldrh	r3, [r3, #0]
 8002310:	81bb      	strh	r3, [r7, #12]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8002312:	4b13      	ldr	r3, [pc, #76]	; (8002360 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8002314:	881a      	ldrh	r2, [r3, #0]
 8002316:	4b11      	ldr	r3, [pc, #68]	; (800235c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8002318:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = tmp;
 800231a:	4a11      	ldr	r2, [pc, #68]	; (8002360 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 800231c:	89bb      	ldrh	r3, [r7, #12]
 800231e:	8013      	strh	r3, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 8002320:	4b0d      	ldr	r3, [pc, #52]	; (8002358 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8002322:	2201      	movs	r2, #1
 8002324:	701a      	strb	r2, [r3, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
        }
    }
 8002326:	e010      	b.n	800234a <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
        else if (DISPLAY_ROTATION != rotate0)
 8002328:	4b0b      	ldr	r3, [pc, #44]	; (8002358 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d00c      	beq.n	800234a <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            const uint16_t tmp = DISPLAY_HEIGHT;
 8002330:	4b0a      	ldr	r3, [pc, #40]	; (800235c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8002332:	881b      	ldrh	r3, [r3, #0]
 8002334:	81fb      	strh	r3, [r7, #14]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8002336:	4b0a      	ldr	r3, [pc, #40]	; (8002360 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8002338:	881a      	ldrh	r2, [r3, #0]
 800233a:	4b08      	ldr	r3, [pc, #32]	; (800235c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 800233c:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = tmp;
 800233e:	4a08      	ldr	r2, [pc, #32]	; (8002360 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8002340:	89fb      	ldrh	r3, [r7, #14]
 8002342:	8013      	strh	r3, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 8002344:	4b04      	ldr	r3, [pc, #16]	; (8002358 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8002346:	2200      	movs	r2, #0
 8002348:	701a      	strb	r2, [r3, #0]
    }
 800234a:	bf00      	nop
 800234c:	3714      	adds	r7, #20
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
 8002356:	bf00      	nop
 8002358:	24026238 	.word	0x24026238
 800235c:	24026236 	.word	0x24026236
 8002360:	24026234 	.word	0x24026234

08002364 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	4618      	mov	r0, r3
 8002370:	f018 f90c 	bl	801a58c <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 8002374:	bf00      	nop
 8002376:	3708      	adds	r7, #8
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}

0800237c <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	4a05      	ldr	r2, [pc, #20]	; (800239c <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	601a      	str	r2, [r3, #0]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4618      	mov	r0, r3
 800238e:	f7ff fe55 	bl	800203c <_ZN8touchgfx3HALD1Ev>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4618      	mov	r0, r3
 8002396:	3708      	adds	r7, #8
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	0802c484 	.word	0x0802c484

080023a0 <_ZN20TouchGFXGeneratedHALD0Ev>:
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f7ff ffe7 	bl	800237c <_ZN20TouchGFXGeneratedHALD1Ev>
 80023ae:	217c      	movs	r1, #124	; 0x7c
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f026 fa3e 	bl	8028832 <_ZdlPvj>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4618      	mov	r0, r3
 80023ba:	3708      	adds	r7, #8
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}

080023c0 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	4618      	mov	r0, r3
 80023cc:	f7ff ffca 	bl	8002364 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 80023d0:	bf00      	nop
 80023d2:	3708      	adds	r7, #8
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}

080023d8 <_ZN8touchgfx16ButtonControllerC1Ev>:
class ButtonController
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	4a04      	ldr	r2, [pc, #16]	; (80023f4 <_ZN8touchgfx16ButtonControllerC1Ev+0x1c>)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	601a      	str	r2, [r3, #0]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4618      	mov	r0, r3
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr
 80023f4:	0802bea4 	.word	0x0802bea4

080023f8 <_ZN18MyButtonControllerC1Ev>:
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b082      	sub	sp, #8
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	4618      	mov	r0, r3
 8002404:	f7ff ffe8 	bl	80023d8 <_ZN8touchgfx16ButtonControllerC1Ev>
 8002408:	4a03      	ldr	r2, [pc, #12]	; (8002418 <_ZN18MyButtonControllerC1Ev+0x20>)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	601a      	str	r2, [r3, #0]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4618      	mov	r0, r3
 8002412:	3708      	adds	r7, #8
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	0802be88 	.word	0x0802be88

0800241c <_ZN11TouchGFXHAL10initializeEv>:
/* @Balaji303 - Modification end */

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	4618      	mov	r0, r3
 8002428:	f003 fa54 	bl	80058d4 <_ZN20TouchGFXGeneratedHAL10initializeEv>
    /* @Balaji303 - Modification start */
    setButtonController(&ButtonControl);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	490c      	ldr	r1, [pc, #48]	; (8002460 <_ZN11TouchGFXHAL10initializeEv+0x44>)
 8002430:	4618      	mov	r0, r3
 8002432:	f7ff ff11 	bl	8002258 <_ZN8touchgfx3HAL19setButtonControllerEPNS_16ButtonControllerE>
    /* @Balaji303 - Modification end */
    instrumentation.init();
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	337c      	adds	r3, #124	; 0x7c
 800243a:	4618      	mov	r0, r3
 800243c:	f7ff fb7c 	bl	8001b38 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>
    setMCUInstrumentation(&instrumentation);
 8002440:	687a      	ldr	r2, [r7, #4]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	337c      	adds	r3, #124	; 0x7c
 8002446:	4619      	mov	r1, r3
 8002448:	4610      	mov	r0, r2
 800244a:	f7ff fee7 	bl	800221c <_ZN8touchgfx3HAL21setMCUInstrumentationEPNS_18MCUInstrumentationE>
    enableMCULoadCalculation(true);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2101      	movs	r1, #1
 8002452:	4618      	mov	r0, r3
 8002454:	f7ff fef0 	bl	8002238 <_ZN8touchgfx3HAL24enableMCULoadCalculationEb>
}
 8002458:	bf00      	nop
 800245a:	3708      	adds	r7, #8
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	24005f0c 	.word	0x24005f0c

08002464 <_ZN11TouchGFXHAL9taskEntryEv>:

void TouchGFXHAL::taskEntry()
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
    enableLCDControllerInterrupt();
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	3380      	adds	r3, #128	; 0x80
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	4798      	blx	r3
    enableInterrupts();
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	3378      	adds	r3, #120	; 0x78
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	4798      	blx	r3

    OSWrappers::waitForVSync();
 8002484:	f001 fb0e 	bl	8003aa4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	3370      	adds	r3, #112	; 0x70
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4610      	mov	r0, r2
 8002494:	4798      	blx	r3

    // Turning on display after first frame is rendered
    HAL_GPIO_WritePin(GPIOK, GPIO_PIN_7, GPIO_PIN_RESET);
 8002496:	2200      	movs	r2, #0
 8002498:	2180      	movs	r1, #128	; 0x80
 800249a:	480b      	ldr	r0, [pc, #44]	; (80024c8 <_ZN11TouchGFXHAL9taskEntryEv+0x64>)
 800249c:	f00b fd54 	bl	800df48 <HAL_GPIO_WritePin>
    /* Assert display enable LCD_DISP_CTRL pin */
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 80024a0:	2201      	movs	r2, #1
 80024a2:	2104      	movs	r1, #4
 80024a4:	4809      	ldr	r0, [pc, #36]	; (80024cc <_ZN11TouchGFXHAL9taskEntryEv+0x68>)
 80024a6:	f00b fd4f 	bl	800df48 <HAL_GPIO_WritePin>
    /* Assert back light LCD_BL_CTRL pin */
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 80024aa:	2201      	movs	r2, #1
 80024ac:	2102      	movs	r1, #2
 80024ae:	4807      	ldr	r0, [pc, #28]	; (80024cc <_ZN11TouchGFXHAL9taskEntryEv+0x68>)
 80024b0:	f00b fd4a 	bl	800df48 <HAL_GPIO_WritePin>

    for (;;)
    {
        OSWrappers::waitForVSync();
 80024b4:	f001 faf6 	bl	8003aa4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	3370      	adds	r3, #112	; 0x70
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4610      	mov	r0, r2
 80024c4:	4798      	blx	r3
        OSWrappers::waitForVSync();
 80024c6:	e7f5      	b.n	80024b4 <_ZN11TouchGFXHAL9taskEntryEv+0x50>
 80024c8:	58022800 	.word	0x58022800
 80024cc:	58020000 	.word	0x58020000

080024d0 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	4618      	mov	r0, r3
 80024dc:	f003 faba 	bl	8005a54 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 80024e0:	4603      	mov	r3, r0
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3708      	adds	r7, #8
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}

080024ea <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 80024ea:	b580      	push	{r7, lr}
 80024ec:	b082      	sub	sp, #8
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	6078      	str	r0, [r7, #4]
 80024f2:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6839      	ldr	r1, [r7, #0]
 80024f8:	4618      	mov	r0, r3
 80024fa:	f003 fab9 	bl	8005a70 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 80024fe:	bf00      	nop
 8002500:	3708      	adds	r7, #8
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
	...

08002508 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b086      	sub	sp, #24
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	6039      	str	r1, [r7, #0]
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6839      	ldr	r1, [r7, #0]
 8002516:	4618      	mov	r0, r3
 8002518:	f003 fac0 	bl	8005a9c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800251c:	4b20      	ldr	r3, [pc, #128]	; (80025a0 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x98>)
 800251e:	2200      	movs	r2, #0
 8002520:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8002524:	f3bf 8f4f 	dsb	sy
}
 8002528:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800252a:	4b1d      	ldr	r3, [pc, #116]	; (80025a0 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x98>)
 800252c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002530:	617b      	str	r3, [r7, #20]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	0b5b      	lsrs	r3, r3, #13
 8002536:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800253a:	613b      	str	r3, [r7, #16]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	08db      	lsrs	r3, r3, #3
 8002540:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002544:	60fb      	str	r3, [r7, #12]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	015a      	lsls	r2, r3, #5
 800254a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800254e:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8002550:	68fa      	ldr	r2, [r7, #12]
 8002552:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002554:	4912      	ldr	r1, [pc, #72]	; (80025a0 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x98>)
 8002556:	4313      	orrs	r3, r2
 8002558:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	1e5a      	subs	r2, r3, #1
 8002560:	60fa      	str	r2, [r7, #12]
 8002562:	2b00      	cmp	r3, #0
 8002564:	bf14      	ite	ne
 8002566:	2301      	movne	r3, #1
 8002568:	2300      	moveq	r3, #0
 800256a:	b2db      	uxtb	r3, r3
 800256c:	2b00      	cmp	r3, #0
 800256e:	d000      	beq.n	8002572 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x6a>
      do {
 8002570:	e7e9      	b.n	8002546 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x3e>
    } while(sets-- != 0U);
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	1e5a      	subs	r2, r3, #1
 8002576:	613a      	str	r2, [r7, #16]
 8002578:	2b00      	cmp	r3, #0
 800257a:	bf14      	ite	ne
 800257c:	2301      	movne	r3, #1
 800257e:	2300      	moveq	r3, #0
 8002580:	b2db      	uxtb	r3, r3
 8002582:	2b00      	cmp	r3, #0
 8002584:	d000      	beq.n	8002588 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x80>
    do {
 8002586:	e7d9      	b.n	800253c <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x34>
  __ASM volatile ("dsb 0xF":::"memory");
 8002588:	f3bf 8f4f 	dsb	sy
}
 800258c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800258e:	f3bf 8f6f 	isb	sy
}
 8002592:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8002594:	bf00      	nop
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache to make sure framebuffer is correct in RAM. That's done
    // using SCB_CleanInvalidateDCache().

    SCB_CleanInvalidateDCache();
}
 8002596:	bf00      	nop
 8002598:	3718      	adds	r7, #24
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	e000ed00 	.word	0xe000ed00

080025a4 <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	4618      	mov	r0, r3
 80025b0:	f003 f9cc 	bl	800594c <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 80025b4:	bf00      	nop
 80025b6:	3708      	adds	r7, #8
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}

080025bc <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	4618      	mov	r0, r3
 80025c8:	f003 f9d0 	bl	800596c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 80025cc:	bf00      	nop
 80025ce:	3708      	adds	r7, #8
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}

080025d4 <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	4618      	mov	r0, r3
 80025e0:	f003 f9d2 	bl	8005988 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 80025e4:	bf00      	nop
 80025e6:	3708      	adds	r7, #8
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}

080025ec <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	4618      	mov	r0, r3
 80025f8:	f003 f9d4 	bl	80059a4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 80025fc:	bf00      	nop
 80025fe:	3708      	adds	r7, #8
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}

08002604 <IdleTaskHook>:

/* USER CODE BEGIN extern C functions */
extern "C"
{
    portBASE_TYPE IdleTaskHook(void* p)
    {
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
        if ((int)p) //idle task sched out
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d007      	beq.n	8002622 <IdleTaskHook+0x1e>
        {
            touchgfx::HAL::getInstance()->setMCUActive(true);
 8002612:	f7ff fd33 	bl	800207c <_ZN8touchgfx3HAL11getInstanceEv>
 8002616:	4603      	mov	r3, r0
 8002618:	2101      	movs	r1, #1
 800261a:	4618      	mov	r0, r3
 800261c:	f018 fd6c 	bl	801b0f8 <_ZN8touchgfx3HAL12setMCUActiveEb>
 8002620:	e006      	b.n	8002630 <IdleTaskHook+0x2c>
        }
        else //idle task sched in
        {
            touchgfx::HAL::getInstance()->setMCUActive(false);
 8002622:	f7ff fd2b 	bl	800207c <_ZN8touchgfx3HAL11getInstanceEv>
 8002626:	4603      	mov	r3, r0
 8002628:	2100      	movs	r1, #0
 800262a:	4618      	mov	r0, r3
 800262c:	f018 fd64 	bl	801b0f8 <_ZN8touchgfx3HAL12setMCUActiveEb>
        }
        return pdTRUE;
 8002630:	2301      	movs	r3, #1
    }
 8002632:	4618      	mov	r0, r3
 8002634:	3708      	adds	r7, #8
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
	...

0800263c <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	4a08      	ldr	r2, [pc, #32]	; (8002668 <_ZN11TouchGFXHALD1Ev+0x2c>)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	601a      	str	r2, [r3, #0]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	337c      	adds	r3, #124	; 0x7c
 800264e:	4618      	mov	r0, r3
 8002650:	f7ff fae2 	bl	8001c18 <_ZN8touchgfx25CortexMMCUInstrumentationD1Ev>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	4618      	mov	r0, r3
 8002658:	f7ff fe90 	bl	800237c <_ZN20TouchGFXGeneratedHALD1Ev>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	4618      	mov	r0, r3
 8002660:	3708      	adds	r7, #8
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	0802bfac 	.word	0x0802bfac

0800266c <_ZN11TouchGFXHALD0Ev>:
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f7ff ffe1 	bl	800263c <_ZN11TouchGFXHALD1Ev>
 800267a:	2188      	movs	r1, #136	; 0x88
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f026 f8d8 	bl	8028832 <_ZdlPvj>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4618      	mov	r0, r3
 8002686:	3708      	adds	r7, #8
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}

0800268c <_Z41__static_initialization_and_destruction_0ii>:
}
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	6039      	str	r1, [r7, #0]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2b01      	cmp	r3, #1
 800269a:	d107      	bne.n	80026ac <_Z41__static_initialization_and_destruction_0ii+0x20>
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d102      	bne.n	80026ac <_Z41__static_initialization_and_destruction_0ii+0x20>
MyButtonController ButtonControl;
 80026a6:	4809      	ldr	r0, [pc, #36]	; (80026cc <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80026a8:	f7ff fea6 	bl	80023f8 <_ZN18MyButtonControllerC1Ev>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d107      	bne.n	80026c2 <_Z41__static_initialization_and_destruction_0ii+0x36>
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d102      	bne.n	80026c2 <_Z41__static_initialization_and_destruction_0ii+0x36>
 80026bc:	4803      	ldr	r0, [pc, #12]	; (80026cc <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80026be:	f7fd fef9 	bl	80004b4 <_ZN18MyButtonControllerD1Ev>
}
 80026c2:	bf00      	nop
 80026c4:	3708      	adds	r7, #8
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	24005f0c 	.word	0x24005f0c

080026d0 <_GLOBAL__sub_I_ButtonControl>:
 80026d0:	b580      	push	{r7, lr}
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80026d8:	2001      	movs	r0, #1
 80026da:	f7ff ffd7 	bl	800268c <_Z41__static_initialization_and_destruction_0ii>
 80026de:	bd80      	pop	{r7, pc}

080026e0 <_GLOBAL__sub_D_ButtonControl>:
 80026e0:	b580      	push	{r7, lr}
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80026e8:	2000      	movs	r0, #0
 80026ea:	f7ff ffcf 	bl	800268c <_Z41__static_initialization_and_destruction_0ii>
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <_ZN12MJPEGDecoderD1Ev>:
#include <touchgfx/hal/VideoController.hpp>

class MJPEGDecoder
{
public:
    virtual ~MJPEGDecoder()
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
    {
 80026f8:	4a04      	ldr	r2, [pc, #16]	; (800270c <_ZN12MJPEGDecoderD1Ev+0x1c>)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	601a      	str	r2, [r3, #0]
    }
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4618      	mov	r0, r3
 8002702:	370c      	adds	r7, #12
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr
 800270c:	0802c0c8 	.word	0x0802c0c8

08002710 <_ZN12MJPEGDecoderD0Ev>:
    virtual ~MJPEGDecoder()
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
    }
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f7ff ffe9 	bl	80026f0 <_ZN12MJPEGDecoderD1Ev>
 800271e:	2104      	movs	r1, #4
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	f026 f886 	bl	8028832 <_ZdlPvj>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4618      	mov	r0, r3
 800272a:	3708      	adds	r7, #8
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}

08002730 <_ZNK20HardwareMJPEGDecoder21getCurrentFrameNumberEv>:
    virtual bool gotoNextFrame();
    //Decode part of the current frame
    virtual bool decodeFrame(const touchgfx::Rect& area, uint8_t* frameBuffer, uint32_t framebuffer_width);
    virtual bool decodeThumbnail(uint32_t frameno, uint8_t* buffer, uint16_t width, uint16_t height);
    virtual void gotoFrame(uint32_t frameno);
    virtual uint32_t getCurrentFrameNumber() const { return frameNumber; }
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	695b      	ldr	r3, [r3, #20]
 800273c:	4618      	mov	r0, r3
 800273e:	370c      	adds	r7, #12
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr

08002748 <_ZN20HardwareMJPEGDecoder12getLastErrorEv>:
    virtual void setRepeatVideo(bool repeat);
    virtual void getVideoInfo(touchgfx::VideoInformation* data);

    void setAVIFileBuffer(uint8_t* buffer, uint32_t size) { aviBuffer = buffer, aviBufferLength = size; }

    virtual AVIErrors getLastError() { return lastError; }
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002756:	4618      	mov	r0, r3
 8002758:	370c      	adds	r7, #12
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr
	...

08002764 <_ZN12MJPEGDecoderC1Ev>:
class MJPEGDecoder
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	4a04      	ldr	r2, [pc, #16]	; (8002780 <_ZN12MJPEGDecoderC1Ev+0x1c>)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	601a      	str	r2, [r3, #0]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4618      	mov	r0, r3
 8002776:	370c      	adds	r7, #12
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr
 8002780:	0802c0c8 	.word	0x0802c0c8

08002784 <_ZN20HardwareMJPEGDecoderC1Ev>:
  uint32_t LastLineHeight;
  uint32_t MCU_pr_line;
  uint32_t bytes_pr_pixel;
} JPEG_ConvertorParams;

HardwareMJPEGDecoder::HardwareMJPEGDecoder()
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
    : frameNumber(0), currentMovieOffset(0), indexOffset(0), firstFrameOffset(0), lastFrameEnd(0), movieLength(0), movieData(0),
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	4618      	mov	r0, r3
 8002790:	f7ff ffe8 	bl	8002764 <_ZN12MJPEGDecoderC1Ev>
 8002794:	4a21      	ldr	r2, [pc, #132]	; (800281c <_ZN20HardwareMJPEGDecoderC1Ev+0x98>)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	601a      	str	r2, [r3, #0]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2200      	movs	r2, #0
 800279e:	615a      	str	r2, [r3, #20]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2200      	movs	r2, #0
 80027a4:	619a      	str	r2, [r3, #24]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	61da      	str	r2, [r3, #28]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2200      	movs	r2, #0
 80027b0:	621a      	str	r2, [r3, #32]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	625a      	str	r2, [r3, #36]	; 0x24
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	629a      	str	r2, [r3, #40]	; 0x28
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	62da      	str	r2, [r3, #44]	; 0x2c
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2200      	movs	r2, #0
 80027c8:	631a      	str	r2, [r3, #48]	; 0x30
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2200      	movs	r2, #0
 80027ce:	635a      	str	r2, [r3, #52]	; 0x34
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	639a      	str	r2, [r3, #56]	; 0x38
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	63da      	str	r2, [r3, #60]	; 0x3c
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2200      	movs	r2, #0
 80027e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
{
    //Clear video info
    videoInfo.frame_height = 0;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2200      	movs	r2, #0
 80027e8:	611a      	str	r2, [r3, #16]
    videoInfo.frame_width = 0;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2200      	movs	r2, #0
 80027ee:	60da      	str	r2, [r3, #12]
    videoInfo.ms_between_frames = 0;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2200      	movs	r2, #0
 80027f4:	605a      	str	r2, [r3, #4]
    videoInfo.number_of_frames = 0;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2200      	movs	r2, #0
 80027fa:	609a      	str	r2, [r3, #8]

    //Init color tables
    TGFX_JPEG_InitColorTables();
 80027fc:	f004 fd30 	bl	8007260 <TGFX_JPEG_InitColorTables>

    //Create decoding semaphore
    semDecodingDone = SEM_CREATE();
 8002800:	2200      	movs	r2, #0
 8002802:	2100      	movs	r1, #0
 8002804:	2001      	movs	r0, #1
 8002806:	f013 faee 	bl	8015de6 <osSemaphoreNew>
 800280a:	4603      	mov	r3, r0
 800280c:	4a04      	ldr	r2, [pc, #16]	; (8002820 <_ZN20HardwareMJPEGDecoderC1Ev+0x9c>)
 800280e:	6013      	str	r3, [r2, #0]
}
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	4618      	mov	r0, r3
 8002814:	3708      	adds	r7, #8
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	0802c084 	.word	0x0802c084
 8002820:	24005f4c 	.word	0x24005f4c

08002824 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>:

int HardwareMJPEGDecoder::compare(const uint32_t offset, const char* str, uint32_t num)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b086      	sub	sp, #24
 8002828:	af00      	add	r7, sp, #0
 800282a:	60f8      	str	r0, [r7, #12]
 800282c:	60b9      	str	r1, [r7, #8]
 800282e:	607a      	str	r2, [r7, #4]
 8002830:	603b      	str	r3, [r7, #0]
    const char* src;
    if (reader != 0)
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002836:	2b00      	cmp	r3, #0
 8002838:	d008      	beq.n	800284c <_ZN20HardwareMJPEGDecoder7compareEmPKcm+0x28>
    {
        // Assuming data is in buffer!
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002842:	68b9      	ldr	r1, [r7, #8]
 8002844:	1acb      	subs	r3, r1, r3
 8002846:	4413      	add	r3, r2
 8002848:	617b      	str	r3, [r7, #20]
 800284a:	e004      	b.n	8002856 <_ZN20HardwareMJPEGDecoder7compareEmPKcm+0x32>
    }
    else
    {
        src = (const char*)movieData + offset;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	4413      	add	r3, r2
 8002854:	617b      	str	r3, [r7, #20]
    }
    return strncmp(src, str, num);
 8002856:	683a      	ldr	r2, [r7, #0]
 8002858:	6879      	ldr	r1, [r7, #4]
 800285a:	6978      	ldr	r0, [r7, #20]
 800285c:	f026 fcd2 	bl	8029204 <strncmp>
 8002860:	4603      	mov	r3, r0
}
 8002862:	4618      	mov	r0, r3
 8002864:	3718      	adds	r7, #24
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}

0800286a <_ZN20HardwareMJPEGDecoder6getU32Em>:

inline uint32_t HardwareMJPEGDecoder::getU32(const uint32_t offset)
{
 800286a:	b480      	push	{r7}
 800286c:	b085      	sub	sp, #20
 800286e:	af00      	add	r7, sp, #0
 8002870:	6078      	str	r0, [r7, #4]
 8002872:	6039      	str	r1, [r7, #0]
    if (reader != 0)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002878:	2b00      	cmp	r3, #0
 800287a:	d024      	beq.n	80028c6 <_ZN20HardwareMJPEGDecoder6getU32Em+0x5c>
    {
        // Assuming data is in buffer!
        const uint32_t index = offset - aviBufferStartOffset;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002880:	683a      	ldr	r2, [r7, #0]
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	60bb      	str	r3, [r7, #8]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	4413      	add	r3, r2
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	4619      	mov	r1, r3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	3301      	adds	r3, #1
 800289a:	4413      	add	r3, r2
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	021b      	lsls	r3, r3, #8
 80028a0:	ea41 0203 	orr.w	r2, r1, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	3302      	adds	r3, #2
 80028ac:	440b      	add	r3, r1
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	041b      	lsls	r3, r3, #16
 80028b2:	431a      	orrs	r2, r3
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	3303      	adds	r3, #3
 80028bc:	440b      	add	r3, r1
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	061b      	lsls	r3, r3, #24
 80028c2:	4313      	orrs	r3, r2
 80028c4:	e016      	b.n	80028f4 <_ZN20HardwareMJPEGDecoder6getU32Em+0x8a>
    }
    else
    {
        const uint8_t* const d = movieData + offset;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	4413      	add	r3, r2
 80028ce:	60fb      	str	r3, [r7, #12]
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	461a      	mov	r2, r3
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	3301      	adds	r3, #1
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	021b      	lsls	r3, r3, #8
 80028de:	431a      	orrs	r2, r3
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	3302      	adds	r3, #2
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	041b      	lsls	r3, r3, #16
 80028e8:	431a      	orrs	r2, r3
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	3303      	adds	r3, #3
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	061b      	lsls	r3, r3, #24
 80028f2:	4313      	orrs	r3, r2
    }
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3714      	adds	r7, #20
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr

08002900 <_ZN20HardwareMJPEGDecoder6getU16Em>:

inline uint32_t HardwareMJPEGDecoder::getU16(const uint32_t offset)
{
 8002900:	b480      	push	{r7}
 8002902:	b085      	sub	sp, #20
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	6039      	str	r1, [r7, #0]
    if (reader != 0)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290e:	2b00      	cmp	r3, #0
 8002910:	d013      	beq.n	800293a <_ZN20HardwareMJPEGDecoder6getU16Em+0x3a>
    {
        // Assuming data is in buffer!
        const uint32_t index = offset - aviBufferStartOffset;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002916:	683a      	ldr	r2, [r7, #0]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	60bb      	str	r3, [r7, #8]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	4413      	add	r3, r2
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	4619      	mov	r1, r3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	3301      	adds	r3, #1
 8002930:	4413      	add	r3, r2
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	021b      	lsls	r3, r3, #8
 8002936:	430b      	orrs	r3, r1
 8002938:	e00c      	b.n	8002954 <_ZN20HardwareMJPEGDecoder6getU16Em+0x54>
    }
    else
    {
        const uint8_t* const d = movieData + offset;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	4413      	add	r3, r2
 8002942:	60fb      	str	r3, [r7, #12]
        return d[0] | (d[1] << 8);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	461a      	mov	r2, r3
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	3301      	adds	r3, #1
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	021b      	lsls	r3, r3, #8
 8002952:	4313      	orrs	r3, r2
    }
}
 8002954:	4618      	mov	r0, r3
 8002956:	3714      	adds	r7, #20
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr

08002960 <_ZN20HardwareMJPEGDecoder8readDataEmm>:

const uint8_t* HardwareMJPEGDecoder::readData(uint32_t offset, uint32_t length)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b084      	sub	sp, #16
 8002964:	af00      	add	r7, sp, #0
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	60b9      	str	r1, [r7, #8]
 800296a:	607a      	str	r2, [r7, #4]
    if (reader != 0)
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002970:	2b00      	cmp	r3, #0
 8002972:	d033      	beq.n	80029dc <_ZN20HardwareMJPEGDecoder8readDataEmm+0x7c>
    {
        if (length > aviBufferLength)
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002978:	687a      	ldr	r2, [r7, #4]
 800297a:	429a      	cmp	r2, r3
 800297c:	d909      	bls.n	8002992 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x32>
        {
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2209      	movs	r2, #9
 8002982:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            assert(!"Buffer to small");
 8002986:	4b19      	ldr	r3, [pc, #100]	; (80029ec <_ZN20HardwareMJPEGDecoder8readDataEmm+0x8c>)
 8002988:	4a19      	ldr	r2, [pc, #100]	; (80029f0 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x90>)
 800298a:	21a6      	movs	r1, #166	; 0xa6
 800298c:	4819      	ldr	r0, [pc, #100]	; (80029f4 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x94>)
 800298e:	f025 ff7f 	bl	8028890 <__assert_func>
        }

        reader->seek(offset);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	330c      	adds	r3, #12
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	68b9      	ldr	r1, [r7, #8]
 80029a2:	4610      	mov	r0, r2
 80029a4:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	3310      	adds	r3, #16
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	68fa      	ldr	r2, [r7, #12]
 80029b6:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	4798      	blx	r3
 80029bc:	4603      	mov	r3, r0
 80029be:	f083 0301 	eor.w	r3, r3, #1
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d003      	beq.n	80029d0 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x70>
        {
            lastError = AVI_ERROR_EOF_REACHED;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	220d      	movs	r2, #13
 80029cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        }

        aviBufferStartOffset = offset;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	68ba      	ldr	r2, [r7, #8]
 80029d4:	63da      	str	r2, [r3, #60]	; 0x3c
        return aviBuffer;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029da:	e003      	b.n	80029e4 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x84>
    }

    return movieData + offset;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	4413      	add	r3, r2
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3710      	adds	r7, #16
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	08029bcc 	.word	0x08029bcc
 80029f0:	08029be0 	.word	0x08029be0
 80029f4:	08029c24 	.word	0x08029c24

080029f8 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm>:

bool HardwareMJPEGDecoder::decodeNextFrame(uint8_t* buffer, uint16_t buffer_width, uint16_t buffer_height, uint32_t buffer_stride)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b08e      	sub	sp, #56	; 0x38
 80029fc:	af04      	add	r7, sp, #16
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	60b9      	str	r1, [r7, #8]
 8002a02:	4611      	mov	r1, r2
 8002a04:	461a      	mov	r2, r3
 8002a06:	460b      	mov	r3, r1
 8002a08:	80fb      	strh	r3, [r7, #6]
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	80bb      	strh	r3, [r7, #4]
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	695b      	ldr	r3, [r3, #20]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d105      	bne.n	8002a22 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x2a>
 8002a16:	4b4e      	ldr	r3, [pc, #312]	; (8002b50 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x158>)
 8002a18:	4a4e      	ldr	r2, [pc, #312]	; (8002b54 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x15c>)
 8002a1a:	21b8      	movs	r1, #184	; 0xb8
 8002a1c:	484e      	ldr	r0, [pc, #312]	; (8002b58 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x160>)
 8002a1e:	f025 ff37 	bl	8028890 <__assert_func>

    //find next frame and decode it
    readData(currentMovieOffset, 8);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	699b      	ldr	r3, [r3, #24]
 8002a26:	2208      	movs	r2, #8
 8002a28:	4619      	mov	r1, r3
 8002a2a:	68f8      	ldr	r0, [r7, #12]
 8002a2c:	f7ff ff98 	bl	8002960 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    uint32_t streamNo  = getU16(currentMovieOffset);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	699b      	ldr	r3, [r3, #24]
 8002a34:	4619      	mov	r1, r3
 8002a36:	68f8      	ldr	r0, [r7, #12]
 8002a38:	f7ff ff62 	bl	8002900 <_ZN20HardwareMJPEGDecoder6getU16Em>
 8002a3c:	6238      	str	r0, [r7, #32]
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	699b      	ldr	r3, [r3, #24]
 8002a42:	3302      	adds	r3, #2
 8002a44:	4619      	mov	r1, r3
 8002a46:	68f8      	ldr	r0, [r7, #12]
 8002a48:	f7ff ff5a 	bl	8002900 <_ZN20HardwareMJPEGDecoder6getU16Em>
 8002a4c:	61f8      	str	r0, [r7, #28]
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	699b      	ldr	r3, [r3, #24]
 8002a52:	3304      	adds	r3, #4
 8002a54:	4619      	mov	r1, r3
 8002a56:	68f8      	ldr	r0, [r7, #12]
 8002a58:	f7ff ff07 	bl	800286a <_ZN20HardwareMJPEGDecoder6getU32Em>
 8002a5c:	61b8      	str	r0, [r7, #24]

    const uint16_t STREAM0 = 0x3030;
 8002a5e:	f243 0330 	movw	r3, #12336	; 0x3030
 8002a62:	82fb      	strh	r3, [r7, #22]
    const uint16_t TYPEDC  = 0x6364;
 8002a64:	f246 3364 	movw	r3, #25444	; 0x6364
 8002a68:	82bb      	strh	r3, [r7, #20]

    bool isCurrentFrameLast;
    //play frame if we have it all
    if (currentMovieOffset + 8 + chunkSize < movieLength)
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	699a      	ldr	r2, [r3, #24]
 8002a6e:	69bb      	ldr	r3, [r7, #24]
 8002a70:	4413      	add	r3, r2
 8002a72:	f103 0208 	add.w	r2, r3, #8
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d255      	bcs.n	8002b2a <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x132>
    {
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 8002a7e:	6a3b      	ldr	r3, [r7, #32]
 8002a80:	f243 0230 	movw	r2, #12336	; 0x3030
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d126      	bne.n	8002ad6 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xde>
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	f246 3264 	movw	r2, #25444	; 0x6364
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d121      	bne.n	8002ad6 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xde>
 8002a92:	69bb      	ldr	r3, [r7, #24]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d01e      	beq.n	8002ad6 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xde>
        {
            currentMovieOffset += 8;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	699b      	ldr	r3, [r3, #24]
 8002a9c:	f103 0208 	add.w	r2, r3, #8
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	619a      	str	r2, [r3, #24]
            //decode frame
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	699b      	ldr	r3, [r3, #24]
 8002aa8:	69ba      	ldr	r2, [r7, #24]
 8002aaa:	4619      	mov	r1, r3
 8002aac:	68f8      	ldr	r0, [r7, #12]
 8002aae:	f7ff ff57 	bl	8002960 <_ZN20HardwareMJPEGDecoder8readDataEmm>
 8002ab2:	6138      	str	r0, [r7, #16]
            decodeMJPEGFrame(chunk, chunkSize, buffer, buffer_width, buffer_height, buffer_stride);
 8002ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ab6:	9302      	str	r3, [sp, #8]
 8002ab8:	88bb      	ldrh	r3, [r7, #4]
 8002aba:	9301      	str	r3, [sp, #4]
 8002abc:	88fb      	ldrh	r3, [r7, #6]
 8002abe:	9300      	str	r3, [sp, #0]
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	69ba      	ldr	r2, [r7, #24]
 8002ac4:	6939      	ldr	r1, [r7, #16]
 8002ac6:	68f8      	ldr	r0, [r7, #12]
 8002ac8:	f000 fa8e 	bl	8002fe8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>
            frameNumber++;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	695b      	ldr	r3, [r3, #20]
 8002ad0:	1c5a      	adds	r2, r3, #1
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	615a      	str	r2, [r3, #20]
        }

        isCurrentFrameLast = false;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        // Advance to next frame
        currentMovieOffset += chunkSize;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	699a      	ldr	r2, [r3, #24]
 8002ae0:	69bb      	ldr	r3, [r7, #24]
 8002ae2:	441a      	add	r2, r3
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	619a      	str	r2, [r3, #24]
        if (chunkSize == 0) // Empty frame - Skip
 8002ae8:	69bb      	ldr	r3, [r7, #24]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d105      	bne.n	8002afa <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x102>
        {
          currentMovieOffset += 8;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	699b      	ldr	r3, [r3, #24]
 8002af2:	f103 0208 	add.w	r2, r3, #8
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	619a      	str	r2, [r3, #24]
        }
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	699b      	ldr	r3, [r3, #24]
 8002afe:	3301      	adds	r3, #1
 8002b00:	f023 0201 	bic.w	r2, r3, #1
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	619a      	str	r2, [r3, #24]

        if (currentMovieOffset == lastFrameEnd)
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	699a      	ldr	r2, [r3, #24]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d114      	bne.n	8002b3e <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x146>
        {
            frameNumber = 1;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2201      	movs	r2, #1
 8002b18:	615a      	str	r2, [r3, #20]
            currentMovieOffset = firstFrameOffset; //start over
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	6a1a      	ldr	r2, [r3, #32]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	619a      	str	r2, [r3, #24]
            isCurrentFrameLast = true;
 8002b22:	2301      	movs	r3, #1
 8002b24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002b28:	e009      	b.n	8002b3e <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x146>
        }
    }
    else
    {
        frameNumber = 1;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	615a      	str	r2, [r3, #20]
        currentMovieOffset = firstFrameOffset; //start over
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	6a1a      	ldr	r2, [r3, #32]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	619a      	str	r2, [r3, #24]
        isCurrentFrameLast = true;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    return !isCurrentFrameLast;
 8002b3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002b42:	f083 0301 	eor.w	r3, r3, #1
 8002b46:	b2db      	uxtb	r3, r3
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3728      	adds	r7, #40	; 0x28
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	08029c98 	.word	0x08029c98
 8002b54:	08029ce4 	.word	0x08029ce4
 8002b58:	08029c24 	.word	0x08029c24

08002b5c <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv>:

bool HardwareMJPEGDecoder::gotoNextFrame()
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b086      	sub	sp, #24
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	695b      	ldr	r3, [r3, #20]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d105      	bne.n	8002b78 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x1c>
 8002b6c:	4b37      	ldr	r3, [pc, #220]	; (8002c4c <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0xf0>)
 8002b6e:	4a38      	ldr	r2, [pc, #224]	; (8002c50 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0xf4>)
 8002b70:	21ec      	movs	r1, #236	; 0xec
 8002b72:	4838      	ldr	r0, [pc, #224]	; (8002c54 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0xf8>)
 8002b74:	f025 fe8c 	bl	8028890 <__assert_func>

    readData(currentMovieOffset, 8);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	699b      	ldr	r3, [r3, #24]
 8002b7c:	2208      	movs	r2, #8
 8002b7e:	4619      	mov	r1, r3
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f7ff feed 	bl	8002960 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	699b      	ldr	r3, [r3, #24]
 8002b8a:	3304      	adds	r3, #4
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f7ff fe6b 	bl	800286a <_ZN20HardwareMJPEGDecoder6getU32Em>
 8002b94:	6178      	str	r0, [r7, #20]

    //increment until next video frame
    while (currentMovieOffset + 8 + chunkSize < movieLength)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	699a      	ldr	r2, [r3, #24]
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	4413      	add	r3, r2
 8002b9e:	f103 0208 	add.w	r2, r3, #8
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d243      	bcs.n	8002c32 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0xd6>
    {
        //increment one frame
        currentMovieOffset += chunkSize + 8;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	699a      	ldr	r2, [r3, #24]
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	4413      	add	r3, r2
 8002bb2:	f103 0208 	add.w	r2, r3, #8
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	619a      	str	r2, [r3, #24]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	699b      	ldr	r3, [r3, #24]
 8002bbe:	3301      	adds	r3, #1
 8002bc0:	f023 0201 	bic.w	r2, r3, #1
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	619a      	str	r2, [r3, #24]
        frameNumber++;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	695b      	ldr	r3, [r3, #20]
 8002bcc:	1c5a      	adds	r2, r3, #1
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	615a      	str	r2, [r3, #20]

        //next chunk
        readData(currentMovieOffset, 8);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	699b      	ldr	r3, [r3, #24]
 8002bd6:	2208      	movs	r2, #8
 8002bd8:	4619      	mov	r1, r3
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f7ff fec0 	bl	8002960 <_ZN20HardwareMJPEGDecoder8readDataEmm>
        //check it is a video frame
        uint32_t streamNo  = getU16(currentMovieOffset);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	699b      	ldr	r3, [r3, #24]
 8002be4:	4619      	mov	r1, r3
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f7ff fe8a 	bl	8002900 <_ZN20HardwareMJPEGDecoder6getU16Em>
 8002bec:	6138      	str	r0, [r7, #16]
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	699b      	ldr	r3, [r3, #24]
 8002bf2:	3302      	adds	r3, #2
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f7ff fe82 	bl	8002900 <_ZN20HardwareMJPEGDecoder6getU16Em>
 8002bfc:	60f8      	str	r0, [r7, #12]
        chunkSize = getU32(currentMovieOffset + 4);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	699b      	ldr	r3, [r3, #24]
 8002c02:	3304      	adds	r3, #4
 8002c04:	4619      	mov	r1, r3
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f7ff fe2f 	bl	800286a <_ZN20HardwareMJPEGDecoder6getU32Em>
 8002c0c:	6178      	str	r0, [r7, #20]
        const uint16_t STREAM0 = 0x3030;
 8002c0e:	f243 0330 	movw	r3, #12336	; 0x3030
 8002c12:	817b      	strh	r3, [r7, #10]
        const uint16_t TYPEDC  = 0x6364;
 8002c14:	f246 3364 	movw	r3, #25444	; 0x6364
 8002c18:	813b      	strh	r3, [r7, #8]

        if (streamNo == STREAM0 && chunkType == TYPEDC)
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	f243 0230 	movw	r2, #12336	; 0x3030
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d1b8      	bne.n	8002b96 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x3a>
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f246 3264 	movw	r2, #25444	; 0x6364
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d1b3      	bne.n	8002b96 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x3a>
        {
            // Found next frame
            return true;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e007      	b.n	8002c42 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0xe6>
        }
    }

    //skip back to first frame
    frameNumber = 1;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2201      	movs	r2, #1
 8002c36:	615a      	str	r2, [r3, #20]
    currentMovieOffset = firstFrameOffset; //start over
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6a1a      	ldr	r2, [r3, #32]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	619a      	str	r2, [r3, #24]
    return false;
 8002c40:	2300      	movs	r3, #0
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3718      	adds	r7, #24
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	08029c98 	.word	0x08029c98
 8002c50:	08029d40 	.word	0x08029d40
 8002c54:	08029c24 	.word	0x08029c24

08002c58 <_ZN20HardwareMJPEGDecoder12setVideoDataEPKhm>:

void HardwareMJPEGDecoder::setVideoData(const uint8_t* movie, const uint32_t length)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b084      	sub	sp, #16
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	60f8      	str	r0, [r7, #12]
 8002c60:	60b9      	str	r1, [r7, #8]
 8002c62:	607a      	str	r2, [r7, #4]
    movieData = movie;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	68ba      	ldr	r2, [r7, #8]
 8002c68:	62da      	str	r2, [r3, #44]	; 0x2c
    movieLength = length;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	687a      	ldr	r2, [r7, #4]
 8002c6e:	629a      	str	r2, [r3, #40]	; 0x28
    reader = 0; //not using reader
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2200      	movs	r2, #0
 8002c74:	631a      	str	r2, [r3, #48]	; 0x30

    readVideoHeader();
 8002c76:	68f8      	ldr	r0, [r7, #12]
 8002c78:	f000 f834 	bl	8002ce4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>
}
 8002c7c:	bf00      	nop
 8002c7e:	3710      	adds	r7, #16
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}

08002c84 <_ZN20HardwareMJPEGDecoder12setVideoDataERN8touchgfx15VideoDataReaderE>:

void HardwareMJPEGDecoder::setVideoData(touchgfx::VideoDataReader& reader)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	6039      	str	r1, [r7, #0]
    this->reader = &reader;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	683a      	ldr	r2, [r7, #0]
 8002c92:	631a      	str	r2, [r3, #48]	; 0x30
    movieData = 0;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2200      	movs	r2, #0
 8002c98:	62da      	str	r2, [r3, #44]	; 0x2c
    movieLength = reader.getDataLength();
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	3308      	adds	r3, #8
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	6838      	ldr	r0, [r7, #0]
 8002ca4:	4798      	blx	r3
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	629a      	str	r2, [r3, #40]	; 0x28

    readVideoHeader();
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f000 f819 	bl	8002ce4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>
}
 8002cb2:	bf00      	nop
 8002cb4:	3708      	adds	r7, #8
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}

08002cba <_ZN20HardwareMJPEGDecoder8hasVideoEv>:

bool HardwareMJPEGDecoder::hasVideo()
{
 8002cba:	b480      	push	{r7}
 8002cbc:	b083      	sub	sp, #12
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	6078      	str	r0, [r7, #4]
    return (reader != 0) || (movieData != 0);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d103      	bne.n	8002cd2 <_ZN20HardwareMJPEGDecoder8hasVideoEv+0x18>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d001      	beq.n	8002cd6 <_ZN20HardwareMJPEGDecoder8hasVideoEv+0x1c>
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e000      	b.n	8002cd8 <_ZN20HardwareMJPEGDecoder8hasVideoEv+0x1e>
 8002cd6:	2300      	movs	r3, #0
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	370c      	adds	r7, #12
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr

08002ce4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>:

void HardwareMJPEGDecoder::readVideoHeader()
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b08a      	sub	sp, #40	; 0x28
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
    // Start from the start
    currentMovieOffset = 0;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	619a      	str	r2, [r3, #24]
    lastError = AVI_NO_ERROR;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    // Make header available in buffer
    readData(0, 72);
 8002cfa:	2248      	movs	r2, #72	; 0x48
 8002cfc:	2100      	movs	r1, #0
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f7ff fe2e 	bl	8002960 <_ZN20HardwareMJPEGDecoder8readDataEmm>

    // Decode the movie header to find first frame
    // Must be RIFF file
    if (compare(currentMovieOffset, "RIFF", 4))
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6999      	ldr	r1, [r3, #24]
 8002d08:	2304      	movs	r3, #4
 8002d0a:	4aa5      	ldr	r2, [pc, #660]	; (8002fa0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2bc>)
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f7ff fd89 	bl	8002824 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	bf14      	ite	ne
 8002d18:	2301      	movne	r3, #1
 8002d1a:	2300      	moveq	r3, #0
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d00a      	beq.n	8002d38 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x54>
    {
        lastError = AVI_ERROR_NOT_RIFF;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2203      	movs	r2, #3
 8002d26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        assert(!"RIFF header not found");
 8002d2a:	4b9e      	ldr	r3, [pc, #632]	; (8002fa4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c0>)
 8002d2c:	4a9e      	ldr	r2, [pc, #632]	; (8002fa8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c4>)
 8002d2e:	f44f 719a 	mov.w	r1, #308	; 0x134
 8002d32:	489e      	ldr	r0, [pc, #632]	; (8002fac <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c8>)
 8002d34:	f025 fdac 	bl	8028890 <__assert_func>
    }

    //skip fourcc and length
    currentMovieOffset += 8;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	699b      	ldr	r3, [r3, #24]
 8002d3c:	f103 0208 	add.w	r2, r3, #8
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	619a      	str	r2, [r3, #24]
    if (compare(currentMovieOffset, "AVI ", 4))
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6999      	ldr	r1, [r3, #24]
 8002d48:	2304      	movs	r3, #4
 8002d4a:	4a99      	ldr	r2, [pc, #612]	; (8002fb0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2cc>)
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	f7ff fd69 	bl	8002824 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	bf14      	ite	ne
 8002d58:	2301      	movne	r3, #1
 8002d5a:	2300      	moveq	r3, #0
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d00a      	beq.n	8002d78 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x94>
    {
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2204      	movs	r2, #4
 8002d66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        assert(!"AVI header not found");
 8002d6a:	4b92      	ldr	r3, [pc, #584]	; (8002fb4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2d0>)
 8002d6c:	4a8e      	ldr	r2, [pc, #568]	; (8002fa8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c4>)
 8002d6e:	f44f 719e 	mov.w	r1, #316	; 0x13c
 8002d72:	488e      	ldr	r0, [pc, #568]	; (8002fac <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c8>)
 8002d74:	f025 fd8c 	bl	8028890 <__assert_func>
    }

    currentMovieOffset += 4;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	699b      	ldr	r3, [r3, #24]
 8002d7c:	1d1a      	adds	r2, r3, #4
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	619a      	str	r2, [r3, #24]
    if (compare(currentMovieOffset, "LIST", 4))
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6999      	ldr	r1, [r3, #24]
 8002d86:	2304      	movs	r3, #4
 8002d88:	4a8b      	ldr	r2, [pc, #556]	; (8002fb8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2d4>)
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f7ff fd4a 	bl	8002824 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	bf14      	ite	ne
 8002d96:	2301      	movne	r3, #1
 8002d98:	2300      	moveq	r3, #0
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d00a      	beq.n	8002db6 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xd2>
    {
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2205      	movs	r2, #5
 8002da4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        assert(!"AVI LIST not found");
 8002da8:	4b84      	ldr	r3, [pc, #528]	; (8002fbc <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2d8>)
 8002daa:	4a7f      	ldr	r2, [pc, #508]	; (8002fa8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c4>)
 8002dac:	f240 1143 	movw	r1, #323	; 0x143
 8002db0:	487e      	ldr	r0, [pc, #504]	; (8002fac <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c8>)
 8002db2:	f025 fd6d 	bl	8028890 <__assert_func>
    }

    //save AVI List info
    const uint32_t aviListSize = getU32(currentMovieOffset + 4);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	699b      	ldr	r3, [r3, #24]
 8002dba:	3304      	adds	r3, #4
 8002dbc:	4619      	mov	r1, r3
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f7ff fd53 	bl	800286a <_ZN20HardwareMJPEGDecoder6getU32Em>
 8002dc4:	61f8      	str	r0, [r7, #28]
    const uint32_t aviListOffset = currentMovieOffset;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	699b      	ldr	r3, [r3, #24]
 8002dca:	61bb      	str	r3, [r7, #24]
    assert(aviListSize);
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d106      	bne.n	8002de0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xfc>
 8002dd2:	4b7b      	ldr	r3, [pc, #492]	; (8002fc0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2dc>)
 8002dd4:	4a74      	ldr	r2, [pc, #464]	; (8002fa8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c4>)
 8002dd6:	f240 1149 	movw	r1, #329	; 0x149
 8002dda:	4874      	ldr	r0, [pc, #464]	; (8002fac <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c8>)
 8002ddc:	f025 fd58 	bl	8028890 <__assert_func>

    //look into header to find frame rate
    bool foundFrame = true;
 8002de0:	2301      	movs	r3, #1
 8002de2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint32_t offset =  currentMovieOffset + 8;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	699b      	ldr	r3, [r3, #24]
 8002dea:	3308      	adds	r3, #8
 8002dec:	617b      	str	r3, [r7, #20]
    if (compare(offset, "hdrl", 4))
 8002dee:	2304      	movs	r3, #4
 8002df0:	4a74      	ldr	r2, [pc, #464]	; (8002fc4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2e0>)
 8002df2:	6979      	ldr	r1, [r7, #20]
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f7ff fd15 	bl	8002824 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	bf14      	ite	ne
 8002e00:	2301      	movne	r3, #1
 8002e02:	2300      	moveq	r3, #0
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d006      	beq.n	8002e18 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x134>
    {
        lastError = AVI_ERROR_AVI_HDRL_NOT_FOUND;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2206      	movs	r2, #6
 8002e0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        foundFrame = false;
 8002e12:	2300      	movs	r3, #0
 8002e14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    offset += 4;
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	3304      	adds	r3, #4
 8002e1c:	617b      	str	r3, [r7, #20]
    if (compare(offset, "avih", 4))
 8002e1e:	2304      	movs	r3, #4
 8002e20:	4a69      	ldr	r2, [pc, #420]	; (8002fc8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2e4>)
 8002e22:	6979      	ldr	r1, [r7, #20]
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	f7ff fcfd 	bl	8002824 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	bf14      	ite	ne
 8002e30:	2301      	movne	r3, #1
 8002e32:	2300      	moveq	r3, #0
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d006      	beq.n	8002e48 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x164>
    {
        lastError = AVI_ERROR_AVI_AVIH_NOT_FOUND;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2207      	movs	r2, #7
 8002e3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        foundFrame = false;
 8002e42:	2300      	movs	r3, #0
 8002e44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if (foundFrame)
 8002e48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d028      	beq.n	8002ea2 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1be>
    {
        offset += 8; //skip fourcc and cb in AVIMAINHEADER
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	3308      	adds	r3, #8
 8002e54:	617b      	str	r3, [r7, #20]
        videoInfo.ms_between_frames = getU32(offset)/1000;
 8002e56:	6979      	ldr	r1, [r7, #20]
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f7ff fd06 	bl	800286a <_ZN20HardwareMJPEGDecoder6getU32Em>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	4a5a      	ldr	r2, [pc, #360]	; (8002fcc <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2e8>)
 8002e62:	fba2 2303 	umull	r2, r3, r2, r3
 8002e66:	099a      	lsrs	r2, r3, #6
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	605a      	str	r2, [r3, #4]
        videoInfo.number_of_frames = getU32(offset + 16);
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	3310      	adds	r3, #16
 8002e70:	4619      	mov	r1, r3
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f7ff fcf9 	bl	800286a <_ZN20HardwareMJPEGDecoder6getU32Em>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	609a      	str	r2, [r3, #8]
        videoInfo.frame_width = getU32(offset + 32);
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	3320      	adds	r3, #32
 8002e82:	4619      	mov	r1, r3
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	f7ff fcf0 	bl	800286a <_ZN20HardwareMJPEGDecoder6getU32Em>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	60da      	str	r2, [r3, #12]
        videoInfo.frame_height = getU32(offset + 36);
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	3324      	adds	r3, #36	; 0x24
 8002e94:	4619      	mov	r1, r3
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f7ff fce7 	bl	800286a <_ZN20HardwareMJPEGDecoder6getU32Em>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	611a      	str	r2, [r3, #16]
    }
    //skip rest of AVI header, start from end of AVI List

    //look for list with 'movi' header
    uint32_t listOffset = aviListOffset + aviListSize + 8;
 8002ea2:	69ba      	ldr	r2, [r7, #24]
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	4413      	add	r3, r2
 8002ea8:	3308      	adds	r3, #8
 8002eaa:	623b      	str	r3, [r7, #32]
    readData(listOffset, 12);
 8002eac:	220c      	movs	r2, #12
 8002eae:	6a39      	ldr	r1, [r7, #32]
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f7ff fd55 	bl	8002960 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 8002eb6:	6a3b      	ldr	r3, [r7, #32]
 8002eb8:	f103 0108 	add.w	r1, r3, #8
 8002ebc:	2304      	movs	r3, #4
 8002ebe:	4a44      	ldr	r2, [pc, #272]	; (8002fd0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2ec>)
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f7ff fcaf 	bl	8002824 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d00b      	beq.n	8002ee4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x200>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d106      	bne.n	8002ee4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x200>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eda:	6a3a      	ldr	r2, [r7, #32]
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d201      	bcs.n	8002ee4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x200>
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e000      	b.n	8002ee6 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x202>
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d012      	beq.n	8002f10 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x22c>
    {
        const uint32_t listSize = getU32(listOffset + 4) + 8;
 8002eea:	6a3b      	ldr	r3, [r7, #32]
 8002eec:	3304      	adds	r3, #4
 8002eee:	4619      	mov	r1, r3
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f7ff fcba 	bl	800286a <_ZN20HardwareMJPEGDecoder6getU32Em>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	3308      	adds	r3, #8
 8002efa:	60fb      	str	r3, [r7, #12]
        listOffset += listSize;
 8002efc:	6a3a      	ldr	r2, [r7, #32]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	4413      	add	r3, r2
 8002f02:	623b      	str	r3, [r7, #32]
        readData(listOffset, 12);
 8002f04:	220c      	movs	r2, #12
 8002f06:	6a39      	ldr	r1, [r7, #32]
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f7ff fd29 	bl	8002960 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 8002f0e:	e7d2      	b.n	8002eb6 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d2>
    }

    if (lastError != AVI_NO_ERROR)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d004      	beq.n	8002f24 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x240>
    {
        lastError = AVI_ERROR_MOVI_NOT_FOUND;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	220a      	movs	r2, #10
 8002f1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return;
 8002f22:	e05e      	b.n	8002fe2 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2fe>
    }

    //save first frame and end of last frame
    currentMovieOffset = listOffset + 8 + 4; //skip LIST and 'movi'
 8002f24:	6a3b      	ldr	r3, [r7, #32]
 8002f26:	f103 020c 	add.w	r2, r3, #12
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	619a      	str	r2, [r3, #24]
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 8002f2e:	6a3b      	ldr	r3, [r7, #32]
 8002f30:	3304      	adds	r3, #4
 8002f32:	4619      	mov	r1, r3
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	f7ff fc98 	bl	800286a <_ZN20HardwareMJPEGDecoder6getU32Em>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	6a3b      	ldr	r3, [r7, #32]
 8002f3e:	4413      	add	r3, r2
 8002f40:	f103 0208 	add.w	r2, r3, #8
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	625a      	str	r2, [r3, #36]	; 0x24

    //find idx
    const uint32_t listSize = getU32(listOffset+4)+8;
 8002f48:	6a3b      	ldr	r3, [r7, #32]
 8002f4a:	3304      	adds	r3, #4
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f7ff fc8b 	bl	800286a <_ZN20HardwareMJPEGDecoder6getU32Em>
 8002f54:	4603      	mov	r3, r0
 8002f56:	3308      	adds	r3, #8
 8002f58:	613b      	str	r3, [r7, #16]
    listOffset += listSize;
 8002f5a:	6a3a      	ldr	r2, [r7, #32]
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	4413      	add	r3, r2
 8002f60:	623b      	str	r3, [r7, #32]
    readData(listOffset, 4);
 8002f62:	2204      	movs	r2, #4
 8002f64:	6a39      	ldr	r1, [r7, #32]
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f7ff fcfa 	bl	8002960 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    if (!compare(listOffset, "idx1", 4))
 8002f6c:	2304      	movs	r3, #4
 8002f6e:	4a19      	ldr	r2, [pc, #100]	; (8002fd4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2f0>)
 8002f70:	6a39      	ldr	r1, [r7, #32]
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f7ff fc56 	bl	8002824 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	bf0c      	ite	eq
 8002f7e:	2301      	moveq	r3, #1
 8002f80:	2300      	movne	r3, #0
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d027      	beq.n	8002fd8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2f4>
    {
        indexOffset = listOffset;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6a3a      	ldr	r2, [r7, #32]
 8002f8c:	61da      	str	r2, [r3, #28]
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
        return;
    }

    //start on first frame
    frameNumber = 1; //next frame number is 1
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2201      	movs	r2, #1
 8002f92:	615a      	str	r2, [r3, #20]
    firstFrameOffset = currentMovieOffset;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	699a      	ldr	r2, [r3, #24]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	621a      	str	r2, [r3, #32]
 8002f9c:	e021      	b.n	8002fe2 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2fe>
 8002f9e:	bf00      	nop
 8002fa0:	08029d74 	.word	0x08029d74
 8002fa4:	08029d7c 	.word	0x08029d7c
 8002fa8:	08029d98 	.word	0x08029d98
 8002fac:	08029c24 	.word	0x08029c24
 8002fb0:	08029dc8 	.word	0x08029dc8
 8002fb4:	08029dd0 	.word	0x08029dd0
 8002fb8:	08029de8 	.word	0x08029de8
 8002fbc:	08029df0 	.word	0x08029df0
 8002fc0:	08029e08 	.word	0x08029e08
 8002fc4:	08029e14 	.word	0x08029e14
 8002fc8:	08029e1c 	.word	0x08029e1c
 8002fcc:	10624dd3 	.word	0x10624dd3
 8002fd0:	08029e24 	.word	0x08029e24
 8002fd4:	08029e2c 	.word	0x08029e2c
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	220b      	movs	r2, #11
 8002fdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return;
 8002fe0:	bf00      	nop
}
 8002fe2:	3728      	adds	r7, #40	; 0x28
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>:

void HardwareMJPEGDecoder::decodeMJPEGFrame(const uint8_t* const mjpgdata, const uint32_t length, uint8_t* outputBuffer, uint16_t bufferWidth, uint16_t bufferHeight, uint32_t bufferStride)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b084      	sub	sp, #16
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	60b9      	str	r1, [r7, #8]
 8002ff2:	607a      	str	r2, [r7, #4]
 8002ff4:	603b      	str	r3, [r7, #0]
    if (length == 0)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d05f      	beq.n	80030bc <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xd4>
    {
        return;
    }

    if (outputBuffer) //only decode if buffers are assigned.
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d05d      	beq.n	80030be <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xd6>
    {
      // Update JPEG conversion parameters
      JPEG_ConvertorParams.bytes_pr_pixel = 3;
 8003002:	4b30      	ldr	r3, [pc, #192]	; (80030c4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xdc>)
 8003004:	2203      	movs	r2, #3
 8003006:	611a      	str	r2, [r3, #16]
      JPEG_ConvertorParams.WidthExtend = videoInfo.frame_width;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	4a2d      	ldr	r2, [pc, #180]	; (80030c4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xdc>)
 800300e:	6013      	str	r3, [r2, #0]
      if((JPEG_ConvertorParams.WidthExtend % 16) != 0)
 8003010:	4b2c      	ldr	r3, [pc, #176]	; (80030c4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xdc>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 030f 	and.w	r3, r3, #15
 8003018:	2b00      	cmp	r3, #0
 800301a:	d006      	beq.n	800302a <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x42>
      {
          JPEG_ConvertorParams.WidthExtend += 16 - (JPEG_ConvertorParams.WidthExtend % 16);
 800301c:	4b29      	ldr	r3, [pc, #164]	; (80030c4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xdc>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f023 030f 	bic.w	r3, r3, #15
 8003024:	3310      	adds	r3, #16
 8003026:	4a27      	ldr	r2, [pc, #156]	; (80030c4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xdc>)
 8003028:	6013      	str	r3, [r2, #0]
      }
      JPEG_ConvertorParams.ScaledWidth = 480 * JPEG_ConvertorParams.bytes_pr_pixel;
 800302a:	4b26      	ldr	r3, [pc, #152]	; (80030c4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xdc>)
 800302c:	691a      	ldr	r2, [r3, #16]
 800302e:	4613      	mov	r3, r2
 8003030:	011b      	lsls	r3, r3, #4
 8003032:	1a9b      	subs	r3, r3, r2
 8003034:	015b      	lsls	r3, r3, #5
 8003036:	461a      	mov	r2, r3
 8003038:	4b22      	ldr	r3, [pc, #136]	; (80030c4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xdc>)
 800303a:	605a      	str	r2, [r3, #4]
      JPEG_ConvertorParams.MCU_pr_line = JPEG_ConvertorParams.WidthExtend / MCU_WIDTH_PIXELS;
 800303c:	4b21      	ldr	r3, [pc, #132]	; (80030c4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xdc>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	091b      	lsrs	r3, r3, #4
 8003042:	4a20      	ldr	r2, [pc, #128]	; (80030c4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xdc>)
 8003044:	60d3      	str	r3, [r2, #12]
      JPEG_ConvertorParams.LastLineHeight = 16 - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	691b      	ldr	r3, [r3, #16]
 800304a:	f003 030f 	and.w	r3, r3, #15
 800304e:	f1c3 0310 	rsb	r3, r3, #16
 8003052:	4a1c      	ldr	r2, [pc, #112]	; (80030c4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xdc>)
 8003054:	6093      	str	r3, [r2, #8]

      JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, outputBuffer);
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	68b9      	ldr	r1, [r7, #8]
 800305c:	481a      	ldr	r0, [pc, #104]	; (80030c8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xe0>)
 800305e:	f000 f901 	bl	8003264 <JPEG_Decode_DMA>
      do
      {
        JpegProcessing_End = JPEG_OutputHandler(&hjpeg, *pDma);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003066:	4619      	mov	r1, r3
 8003068:	4817      	ldr	r0, [pc, #92]	; (80030c8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xe0>)
 800306a:	f000 fab5 	bl	80035d8 <JPEG_OutputHandler>
 800306e:	4603      	mov	r3, r0
 8003070:	4a16      	ldr	r2, [pc, #88]	; (80030cc <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xe4>)
 8003072:	6013      	str	r3, [r2, #0]

        //If nothing to do, allow other tasks
        if (JpegProcessing_End == 2)
 8003074:	4b15      	ldr	r3, [pc, #84]	; (80030cc <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xe4>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	2b02      	cmp	r3, #2
 800307a:	bf0c      	ite	eq
 800307c:	2301      	moveq	r3, #1
 800307e:	2300      	movne	r3, #0
 8003080:	b2db      	uxtb	r3, r3
 8003082:	2b00      	cmp	r3, #0
 8003084:	d006      	beq.n	8003094 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xac>
        {
          SEM_WAIT(semDecodingDone);
 8003086:	4b12      	ldr	r3, [pc, #72]	; (80030d0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xe8>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f04f 31ff 	mov.w	r1, #4294967295
 800308e:	4618      	mov	r0, r3
 8003090:	f012 ff32 	bl	8015ef8 <osSemaphoreAcquire>
        }
      }
      while(JpegProcessing_End != 1);
 8003094:	4b0d      	ldr	r3, [pc, #52]	; (80030cc <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xe4>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	2b01      	cmp	r3, #1
 800309a:	bf14      	ite	ne
 800309c:	2301      	movne	r3, #1
 800309e:	2300      	moveq	r3, #0
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d000      	beq.n	80030a8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xc0>
      do
 80030a6:	e7dc      	b.n	8003062 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x7a>

      // reset job queue and flags after frame is decoded
      external_queue.reset();
 80030a8:	480a      	ldr	r0, [pc, #40]	; (80030d4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xec>)
 80030aa:	f000 fc07 	bl	80038bc <_ZN20ExternalDMAJob_QueueILm2EE5resetEv>
      Jpeg_HWDecodingEnd = 0;
 80030ae:	4b0a      	ldr	r3, [pc, #40]	; (80030d8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xf0>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	601a      	str	r2, [r3, #0]
      DMA2D_CopyBufferEnd = 0;
 80030b4:	4b09      	ldr	r3, [pc, #36]	; (80030dc <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xf4>)
 80030b6:	2200      	movs	r2, #0
 80030b8:	601a      	str	r2, [r3, #0]
 80030ba:	e000      	b.n	80030be <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xd6>
        return;
 80030bc:	bf00      	nop
    }
}
 80030be:	3710      	adds	r7, #16
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	24005f70 	.word	0x24005f70
 80030c8:	24005c24 	.word	0x24005c24
 80030cc:	24005f3c 	.word	0x24005f3c
 80030d0:	24005f4c 	.word	0x24005f4c
 80030d4:	24005f50 	.word	0x24005f50
 80030d8:	24005f24 	.word	0x24005f24
 80030dc:	24005f34 	.word	0x24005f34

080030e0 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm>:

bool HardwareMJPEGDecoder::decodeFrame(const touchgfx::Rect& area, uint8_t* frameBuffer, uint32_t framebuffer_width)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b086      	sub	sp, #24
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	60f8      	str	r0, [r7, #12]
 80030e8:	60b9      	str	r1, [r7, #8]
 80030ea:	607a      	str	r2, [r7, #4]
 80030ec:	603b      	str	r3, [r7, #0]
     // Assuming that chunk is available and streamNo and chunkType is correct.
    // Check by gotoNextFrame

    readData(currentMovieOffset, 8);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	699b      	ldr	r3, [r3, #24]
 80030f2:	2208      	movs	r2, #8
 80030f4:	4619      	mov	r1, r3
 80030f6:	68f8      	ldr	r0, [r7, #12]
 80030f8:	f7ff fc32 	bl	8002960 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    const uint32_t length = getU32(currentMovieOffset + 4);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	699b      	ldr	r3, [r3, #24]
 8003100:	3304      	adds	r3, #4
 8003102:	4619      	mov	r1, r3
 8003104:	68f8      	ldr	r0, [r7, #12]
 8003106:	f7ff fbb0 	bl	800286a <_ZN20HardwareMJPEGDecoder6getU32Em>
 800310a:	6178      	str	r0, [r7, #20]

    // Ensure whole frame is read
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	699b      	ldr	r3, [r3, #24]
 8003110:	3308      	adds	r3, #8
 8003112:	697a      	ldr	r2, [r7, #20]
 8003114:	4619      	mov	r1, r3
 8003116:	68f8      	ldr	r0, [r7, #12]
 8003118:	f7ff fc22 	bl	8002960 <_ZN20HardwareMJPEGDecoder8readDataEmm>
 800311c:	6138      	str	r0, [r7, #16]

    if (frameBuffer) //only decode if buffers are assigned.
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d018      	beq.n	8003156 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x76>
    {
      JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, frameBuffer);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	697a      	ldr	r2, [r7, #20]
 8003128:	6939      	ldr	r1, [r7, #16]
 800312a:	480d      	ldr	r0, [pc, #52]	; (8003160 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x80>)
 800312c:	f000 f89a 	bl	8003264 <JPEG_Decode_DMA>

      do
      {
        JpegProcessing_End = JPEG_OutputHandler(&hjpeg, *pDma);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003134:	4619      	mov	r1, r3
 8003136:	480a      	ldr	r0, [pc, #40]	; (8003160 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x80>)
 8003138:	f000 fa4e 	bl	80035d8 <JPEG_OutputHandler>
 800313c:	4603      	mov	r3, r0
 800313e:	4a09      	ldr	r2, [pc, #36]	; (8003164 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x84>)
 8003140:	6013      	str	r3, [r2, #0]
      }
      while(JpegProcessing_End == 0);
 8003142:	4b08      	ldr	r3, [pc, #32]	; (8003164 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x84>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	2b00      	cmp	r3, #0
 8003148:	bf0c      	ite	eq
 800314a:	2301      	moveq	r3, #1
 800314c:	2300      	movne	r3, #0
 800314e:	b2db      	uxtb	r3, r3
 8003150:	2b00      	cmp	r3, #0
 8003152:	d000      	beq.n	8003156 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x76>
      do
 8003154:	e7ec      	b.n	8003130 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x50>

    }
    return true;
 8003156:	2301      	movs	r3, #1
}
 8003158:	4618      	mov	r0, r3
 800315a:	3718      	adds	r7, #24
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}
 8003160:	24005c24 	.word	0x24005c24
 8003164:	24005f3c 	.word	0x24005f3c

08003168 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt>:

bool HardwareMJPEGDecoder::decodeThumbnail(uint32_t frameno, uint8_t* buffer, uint16_t width, uint16_t height)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b084      	sub	sp, #16
 800316c:	af00      	add	r7, sp, #0
 800316e:	60f8      	str	r0, [r7, #12]
 8003170:	60b9      	str	r1, [r7, #8]
 8003172:	607a      	str	r2, [r7, #4]
 8003174:	807b      	strh	r3, [r7, #2]
    assert(0);
 8003176:	4b03      	ldr	r3, [pc, #12]	; (8003184 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x1c>)
 8003178:	4a03      	ldr	r2, [pc, #12]	; (8003188 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x20>)
 800317a:	f240 11cf 	movw	r1, #463	; 0x1cf
 800317e:	4803      	ldr	r0, [pc, #12]	; (800318c <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x24>)
 8003180:	f025 fb86 	bl	8028890 <__assert_func>
 8003184:	08029e34 	.word	0x08029e34
 8003188:	08029e38 	.word	0x08029e38
 800318c:	08029c24 	.word	0x08029c24

08003190 <_ZN20HardwareMJPEGDecoder9gotoFrameEm>:
    return false;
}

void HardwareMJPEGDecoder::gotoFrame(uint32_t frameNumber)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b084      	sub	sp, #16
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
 8003198:	6039      	str	r1, [r7, #0]
    if (frameNumber==0)
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d101      	bne.n	80031a4 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x14>
    {
        frameNumber = 1;
 80031a0:	2301      	movs	r3, #1
 80031a2:	603b      	str	r3, [r7, #0]
    }

    if (frameNumber > getNumberOfFrames())
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	332c      	adds	r3, #44	; 0x2c
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	4798      	blx	r3
 80031b0:	4602      	mov	r2, r0
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	4293      	cmp	r3, r2
 80031b6:	bf8c      	ite	hi
 80031b8:	2301      	movhi	r3, #1
 80031ba:	2300      	movls	r3, #0
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d006      	beq.n	80031d0 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x40>
    {
        frameNumber = getNumberOfFrames();
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	332c      	adds	r3, #44	; 0x2c
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	4798      	blx	r3
 80031ce:	6038      	str	r0, [r7, #0]
    }

    uint32_t offset = indexOffset + 8 + (frameNumber-1)*16;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	69da      	ldr	r2, [r3, #28]
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	3b01      	subs	r3, #1
 80031d8:	011b      	lsls	r3, r3, #4
 80031da:	4413      	add	r3, r2
 80031dc:	3308      	adds	r3, #8
 80031de:	60fb      	str	r3, [r7, #12]

    readData(offset, 16);
 80031e0:	2210      	movs	r2, #16
 80031e2:	68f9      	ldr	r1, [r7, #12]
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f7ff fbbb 	bl	8002960 <_ZN20HardwareMJPEGDecoder8readDataEmm>

    currentMovieOffset = getU32(offset + 8) + firstFrameOffset - 4;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	3308      	adds	r3, #8
 80031ee:	4619      	mov	r1, r3
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	f7ff fb3a 	bl	800286a <_ZN20HardwareMJPEGDecoder6getU32Em>
 80031f6:	4602      	mov	r2, r0
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6a1b      	ldr	r3, [r3, #32]
 80031fc:	4413      	add	r3, r2
 80031fe:	1f1a      	subs	r2, r3, #4
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	619a      	str	r2, [r3, #24]
    this->frameNumber = frameNumber;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	683a      	ldr	r2, [r7, #0]
 8003208:	615a      	str	r2, [r3, #20]
}
 800320a:	bf00      	nop
 800320c:	3710      	adds	r7, #16
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}

08003212 <_ZN20HardwareMJPEGDecoder17getNumberOfFramesEv>:

uint32_t HardwareMJPEGDecoder::getNumberOfFrames()
{
 8003212:	b480      	push	{r7}
 8003214:	b083      	sub	sp, #12
 8003216:	af00      	add	r7, sp, #0
 8003218:	6078      	str	r0, [r7, #4]
    return videoInfo.number_of_frames;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	689b      	ldr	r3, [r3, #8]
}
 800321e:	4618      	mov	r0, r3
 8003220:	370c      	adds	r7, #12
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr

0800322a <_ZN20HardwareMJPEGDecoder14setRepeatVideoEb>:

void HardwareMJPEGDecoder::setRepeatVideo(bool repeat)
{
 800322a:	b480      	push	{r7}
 800322c:	b083      	sub	sp, #12
 800322e:	af00      	add	r7, sp, #0
 8003230:	6078      	str	r0, [r7, #4]
 8003232:	460b      	mov	r3, r1
 8003234:	70fb      	strb	r3, [r7, #3]

}
 8003236:	bf00      	nop
 8003238:	370c      	adds	r7, #12
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr

08003242 <_ZN20HardwareMJPEGDecoder12getVideoInfoEPN8touchgfx16VideoInformationE>:

void HardwareMJPEGDecoder::getVideoInfo(touchgfx::VideoInformation* data)
{
 8003242:	b490      	push	{r4, r7}
 8003244:	b082      	sub	sp, #8
 8003246:	af00      	add	r7, sp, #0
 8003248:	6078      	str	r0, [r7, #4]
 800324a:	6039      	str	r1, [r7, #0]
    *data = videoInfo;
 800324c:	683a      	ldr	r2, [r7, #0]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	4614      	mov	r4, r2
 8003252:	3304      	adds	r3, #4
 8003254:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003256:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800325a:	bf00      	nop
 800325c:	3708      	adds	r7, #8
 800325e:	46bd      	mov	sp, r7
 8003260:	bc90      	pop	{r4, r7}
 8003262:	4770      	bx	lr

08003264 <JPEG_Decode_DMA>:
  * @param  JPEGImageSize_Bytes    : jpg image size in bytes.
  * @param  DestAddress : ARGB8888 destination Frame Buffer Address.
  * @retval None
  */
uint32_t JPEG_Decode_DMA(JPEG_HandleTypeDef *hjpeg, uint8_t* input, uint32_t chunkSizeIn /* length */, uint8_t* output)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b088      	sub	sp, #32
 8003268:	af02      	add	r7, sp, #8
 800326a:	60f8      	str	r0, [r7, #12]
 800326c:	60b9      	str	r1, [r7, #8]
 800326e:	607a      	str	r2, [r7, #4]
 8003270:	603b      	str	r3, [r7, #0]
    FrameBufferAddress = output;
 8003272:	4a2a      	ldr	r2, [pc, #168]	; (800331c <JPEG_Decode_DMA+0xb8>)
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	6013      	str	r3, [r2, #0]
    Output_Is_Paused = 0;
 8003278:	4b29      	ldr	r3, [pc, #164]	; (8003320 <JPEG_Decode_DMA+0xbc>)
 800327a:	2200      	movs	r2, #0
 800327c:	601a      	str	r2, [r3, #0]
    JPEG_OUT_Read_BufferIndex = 0;
 800327e:	4b29      	ldr	r3, [pc, #164]	; (8003324 <JPEG_Decode_DMA+0xc0>)
 8003280:	2200      	movs	r2, #0
 8003282:	601a      	str	r2, [r3, #0]
    JPEG_OUT_Write_BufferIndex = 0;
 8003284:	4b28      	ldr	r3, [pc, #160]	; (8003328 <JPEG_Decode_DMA+0xc4>)
 8003286:	2200      	movs	r2, #0
 8003288:	601a      	str	r2, [r3, #0]
    JPEG_InputImageIndex = 0;
 800328a:	4b28      	ldr	r3, [pc, #160]	; (800332c <JPEG_Decode_DMA+0xc8>)
 800328c:	2200      	movs	r2, #0
 800328e:	601a      	str	r2, [r3, #0]
    JPEG_InputImageAddress = (uint32_t)input;
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	4a27      	ldr	r2, [pc, #156]	; (8003330 <JPEG_Decode_DMA+0xcc>)
 8003294:	6013      	str	r3, [r2, #0]
    JPEG_InputImageSize_Bytes = chunkSizeIn;
 8003296:	4a27      	ldr	r2, [pc, #156]	; (8003334 <JPEG_Decode_DMA+0xd0>)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6013      	str	r3, [r2, #0]
    MCU_BlockIndex = 0;
 800329c:	4b26      	ldr	r3, [pc, #152]	; (8003338 <JPEG_Decode_DMA+0xd4>)
 800329e:	2200      	movs	r2, #0
 80032a0:	601a      	str	r2, [r3, #0]
    DMA2D_output_Is_Paused = 1;
 80032a2:	4b26      	ldr	r3, [pc, #152]	; (800333c <JPEG_Decode_DMA+0xd8>)
 80032a4:	2201      	movs	r2, #1
 80032a6:	601a      	str	r2, [r3, #0]

    //Init buffers
    for(uint32_t i = 0; i < NB_OUTPUT_DATA_BUFFERS; ++i)
 80032a8:	2300      	movs	r3, #0
 80032aa:	617b      	str	r3, [r7, #20]
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d816      	bhi.n	80032e0 <JPEG_Decode_DMA+0x7c>
    {
      Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
 80032b2:	4923      	ldr	r1, [pc, #140]	; (8003340 <JPEG_Decode_DMA+0xdc>)
 80032b4:	697a      	ldr	r2, [r7, #20]
 80032b6:	4613      	mov	r3, r2
 80032b8:	005b      	lsls	r3, r3, #1
 80032ba:	4413      	add	r3, r2
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	440b      	add	r3, r1
 80032c0:	2200      	movs	r2, #0
 80032c2:	701a      	strb	r2, [r3, #0]
      Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
 80032c4:	491e      	ldr	r1, [pc, #120]	; (8003340 <JPEG_Decode_DMA+0xdc>)
 80032c6:	697a      	ldr	r2, [r7, #20]
 80032c8:	4613      	mov	r3, r2
 80032ca:	005b      	lsls	r3, r3, #1
 80032cc:	4413      	add	r3, r2
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	440b      	add	r3, r1
 80032d2:	3308      	adds	r3, #8
 80032d4:	2200      	movs	r2, #0
 80032d6:	601a      	str	r2, [r3, #0]
    for(uint32_t i = 0; i < NB_OUTPUT_DATA_BUFFERS; ++i)
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	3301      	adds	r3, #1
 80032dc:	617b      	str	r3, [r7, #20]
 80032de:	e7e5      	b.n	80032ac <JPEG_Decode_DMA+0x48>
    }

    //Do not return from this function until done with decoding all chunks.
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 80032e0:	4b11      	ldr	r3, [pc, #68]	; (8003328 <JPEG_Decode_DMA+0xc4>)
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	4916      	ldr	r1, [pc, #88]	; (8003340 <JPEG_Decode_DMA+0xdc>)
 80032e6:	4613      	mov	r3, r2
 80032e8:	005b      	lsls	r3, r3, #1
 80032ea:	4413      	add	r3, r2
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	440b      	add	r3, r1
 80032f0:	3304      	adds	r3, #4
 80032f2:	6819      	ldr	r1, [r3, #0]
 80032f4:	4b13      	ldr	r3, [pc, #76]	; (8003344 <JPEG_Decode_DMA+0xe0>)
 80032f6:	68da      	ldr	r2, [r3, #12]
 80032f8:	4613      	mov	r3, r2
 80032fa:	005b      	lsls	r3, r3, #1
 80032fc:	4413      	add	r3, r2
 80032fe:	01db      	lsls	r3, r3, #7
 8003300:	9300      	str	r3, [sp, #0]
 8003302:	460b      	mov	r3, r1
 8003304:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003308:	68b9      	ldr	r1, [r7, #8]
 800330a:	68f8      	ldr	r0, [r7, #12]
 800330c:	f00b fde3 	bl	800eed6 <HAL_JPEG_Decode_DMA>

    return 0;
 8003310:	2300      	movs	r3, #0
}
 8003312:	4618      	mov	r0, r3
 8003314:	3718      	adds	r7, #24
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	24005f14 	.word	0x24005f14
 8003320:	24005f30 	.word	0x24005f30
 8003324:	24005f28 	.word	0x24005f28
 8003328:	24005f2c 	.word	0x24005f2c
 800332c:	24005f18 	.word	0x24005f18
 8003330:	24005f20 	.word	0x24005f20
 8003334:	24005f1c 	.word	0x24005f1c
 8003338:	24005f48 	.word	0x24005f48
 800333c:	24005f38 	.word	0x24005f38
 8003340:	24000004 	.word	0x24000004
 8003344:	24005f70 	.word	0x24005f70

08003348 <HAL_JPEG_InfoReadyCallback>:
  * @param hjpeg: JPEG handle pointer
  * @param pInfo: JPEG Info Struct pointer
  * @retval None
  */
void HAL_JPEG_InfoReadyCallback(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b084      	sub	sp, #16
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	6039      	str	r1, [r7, #0]
  if(pInfo->ChromaSubsampling == JPEG_420_SUBSAMPLING)
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	2b01      	cmp	r3, #1
 8003358:	d12f      	bne.n	80033ba <HAL_JPEG_InfoReadyCallback+0x72>
  {
    if((pInfo->ImageWidth % 16) != 0)
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	68db      	ldr	r3, [r3, #12]
 800335e:	f003 030f 	and.w	r3, r3, #15
 8003362:	2b00      	cmp	r3, #0
 8003364:	d007      	beq.n	8003376 <HAL_JPEG_InfoReadyCallback+0x2e>
      pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	f023 030f 	bic.w	r3, r3, #15
 800336e:	f103 0210 	add.w	r2, r3, #16
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	60da      	str	r2, [r3, #12]

    if((pInfo->ImageHeight % 16) != 0)
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	f003 030f 	and.w	r3, r3, #15
 800337e:	2b00      	cmp	r3, #0
 8003380:	d007      	beq.n	8003392 <HAL_JPEG_InfoReadyCallback+0x4a>
      pInfo->ImageHeight += (16 - (pInfo->ImageHeight % 16));
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	f023 030f 	bic.w	r3, r3, #15
 800338a:	f103 0210 	add.w	r2, r3, #16
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	609a      	str	r2, [r3, #8]

    HAL_StatusTypeDef status = TGFX_JPEG_GetDecodeColorConvertFunc(pInfo, &pConvert_Function, &MCU_TotalNb);
 8003392:	4a36      	ldr	r2, [pc, #216]	; (800346c <HAL_JPEG_InfoReadyCallback+0x124>)
 8003394:	4936      	ldr	r1, [pc, #216]	; (8003470 <HAL_JPEG_InfoReadyCallback+0x128>)
 8003396:	6838      	ldr	r0, [r7, #0]
 8003398:	f003 fe08 	bl	8006fac <TGFX_JPEG_GetDecodeColorConvertFunc>
 800339c:	4603      	mov	r3, r0
 800339e:	73bb      	strb	r3, [r7, #14]
    if(status != HAL_OK)
 80033a0:	7bbb      	ldrb	r3, [r7, #14]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d05d      	beq.n	8003462 <HAL_JPEG_InfoReadyCallback+0x11a>
    {
      assert(status == HAL_OK);
 80033a6:	7bbb      	ldrb	r3, [r7, #14]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d05a      	beq.n	8003462 <HAL_JPEG_InfoReadyCallback+0x11a>
 80033ac:	4b31      	ldr	r3, [pc, #196]	; (8003474 <HAL_JPEG_InfoReadyCallback+0x12c>)
 80033ae:	4a32      	ldr	r2, [pc, #200]	; (8003478 <HAL_JPEG_InfoReadyCallback+0x130>)
 80033b0:	f240 212e 	movw	r1, #558	; 0x22e
 80033b4:	4831      	ldr	r0, [pc, #196]	; (800347c <HAL_JPEG_InfoReadyCallback+0x134>)
 80033b6:	f025 fa6b 	bl	8028890 <__assert_func>
    }
  }
  else
  {
    if(pInfo->ChromaSubsampling == JPEG_422_SUBSAMPLING)
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	2b02      	cmp	r3, #2
 80033c0:	d11b      	bne.n	80033fa <HAL_JPEG_InfoReadyCallback+0xb2>
    {
      if((pInfo->ImageWidth % 16) != 0)
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	68db      	ldr	r3, [r3, #12]
 80033c6:	f003 030f 	and.w	r3, r3, #15
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d007      	beq.n	80033de <HAL_JPEG_InfoReadyCallback+0x96>
        pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	68db      	ldr	r3, [r3, #12]
 80033d2:	f023 030f 	bic.w	r3, r3, #15
 80033d6:	f103 0210 	add.w	r2, r3, #16
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	60da      	str	r2, [r3, #12]

      if((pInfo->ImageHeight % 8) != 0)
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	f003 0307 	and.w	r3, r3, #7
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d007      	beq.n	80033fa <HAL_JPEG_InfoReadyCallback+0xb2>
        pInfo->ImageHeight += (8 - (pInfo->ImageHeight % 8));
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	f023 0307 	bic.w	r3, r3, #7
 80033f2:	f103 0208 	add.w	r2, r3, #8
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	609a      	str	r2, [r3, #8]
    }

    if(pInfo->ChromaSubsampling == JPEG_444_SUBSAMPLING)
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d11b      	bne.n	800343a <HAL_JPEG_InfoReadyCallback+0xf2>
    {
      if((pInfo->ImageWidth % 8) != 0)
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	68db      	ldr	r3, [r3, #12]
 8003406:	f003 0307 	and.w	r3, r3, #7
 800340a:	2b00      	cmp	r3, #0
 800340c:	d007      	beq.n	800341e <HAL_JPEG_InfoReadyCallback+0xd6>
        pInfo->ImageWidth += (8 - (pInfo->ImageWidth % 8));
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	68db      	ldr	r3, [r3, #12]
 8003412:	f023 0307 	bic.w	r3, r3, #7
 8003416:	f103 0208 	add.w	r2, r3, #8
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	60da      	str	r2, [r3, #12]

      if((pInfo->ImageHeight % 8) != 0)
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f003 0307 	and.w	r3, r3, #7
 8003426:	2b00      	cmp	r3, #0
 8003428:	d007      	beq.n	800343a <HAL_JPEG_InfoReadyCallback+0xf2>
        pInfo->ImageHeight += (8 - (pInfo->ImageHeight % 8));
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	f023 0307 	bic.w	r3, r3, #7
 8003432:	f103 0208 	add.w	r2, r3, #8
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	609a      	str	r2, [r3, #8]
    }

    HAL_StatusTypeDef status = JPEG_GetDecodeColorConvertFunc(pInfo, &pConvert_Function, &MCU_TotalNb);
 800343a:	4a0c      	ldr	r2, [pc, #48]	; (800346c <HAL_JPEG_InfoReadyCallback+0x124>)
 800343c:	490c      	ldr	r1, [pc, #48]	; (8003470 <HAL_JPEG_InfoReadyCallback+0x128>)
 800343e:	6838      	ldr	r0, [r7, #0]
 8003440:	f016 fcd0 	bl	8019de4 <JPEG_GetDecodeColorConvertFunc>
 8003444:	4603      	mov	r3, r0
 8003446:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK)
 8003448:	7bfb      	ldrb	r3, [r7, #15]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d009      	beq.n	8003462 <HAL_JPEG_InfoReadyCallback+0x11a>
    {
      assert(status == HAL_OK);
 800344e:	7bfb      	ldrb	r3, [r7, #15]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d006      	beq.n	8003462 <HAL_JPEG_InfoReadyCallback+0x11a>
 8003454:	4b07      	ldr	r3, [pc, #28]	; (8003474 <HAL_JPEG_InfoReadyCallback+0x12c>)
 8003456:	4a08      	ldr	r2, [pc, #32]	; (8003478 <HAL_JPEG_InfoReadyCallback+0x130>)
 8003458:	f44f 7112 	mov.w	r1, #584	; 0x248
 800345c:	4807      	ldr	r0, [pc, #28]	; (800347c <HAL_JPEG_InfoReadyCallback+0x134>)
 800345e:	f025 fa17 	bl	8028890 <__assert_func>
    }
  }
}
 8003462:	bf00      	nop
 8003464:	3710      	adds	r7, #16
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	24005f40 	.word	0x24005f40
 8003470:	24005f44 	.word	0x24005f44
 8003474:	08029e94 	.word	0x08029e94
 8003478:	08029ea8 	.word	0x08029ea8
 800347c:	08029c24 	.word	0x08029c24

08003480 <HAL_JPEG_GetDataCallback>:
  * @param hjpeg: JPEG handle pointer
  * @param NbDecodedData: Number of decoded (consummed) bytes from input buffer
  * @retval None
  */
void HAL_JPEG_GetDataCallback(JPEG_HandleTypeDef *hjpeg, uint32_t NbDecodedData)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b084      	sub	sp, #16
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
 8003488:	6039      	str	r1, [r7, #0]
  //Input buffer has been consumed by the peripheral and to ask for a new data chunk if the operation (encoding/decoding) has not been complete yet.
  JPEG_InputImageIndex += NbDecodedData;
 800348a:	4b14      	ldr	r3, [pc, #80]	; (80034dc <HAL_JPEG_GetDataCallback+0x5c>)
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	4413      	add	r3, r2
 8003492:	4a12      	ldr	r2, [pc, #72]	; (80034dc <HAL_JPEG_GetDataCallback+0x5c>)
 8003494:	6013      	str	r3, [r2, #0]
  if(JPEG_InputImageIndex < JPEG_InputImageSize_Bytes)
 8003496:	4b11      	ldr	r3, [pc, #68]	; (80034dc <HAL_JPEG_GetDataCallback+0x5c>)
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	4b11      	ldr	r3, [pc, #68]	; (80034e0 <HAL_JPEG_GetDataCallback+0x60>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	429a      	cmp	r2, r3
 80034a0:	d218      	bcs.n	80034d4 <HAL_JPEG_GetDataCallback+0x54>
  {
    JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 80034a2:	4b10      	ldr	r3, [pc, #64]	; (80034e4 <HAL_JPEG_GetDataCallback+0x64>)
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	4413      	add	r3, r2
 80034aa:	4a0e      	ldr	r2, [pc, #56]	; (80034e4 <HAL_JPEG_GetDataCallback+0x64>)
 80034ac:	6013      	str	r3, [r2, #0]
    uint32_t inDataLength = JPEG_InputImageSize_Bytes - JPEG_InputImageIndex;
 80034ae:	4b0c      	ldr	r3, [pc, #48]	; (80034e0 <HAL_JPEG_GetDataCallback+0x60>)
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	4b0a      	ldr	r3, [pc, #40]	; (80034dc <HAL_JPEG_GetDataCallback+0x5c>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	1ad3      	subs	r3, r2, r3
 80034b8:	60fb      	str	r3, [r7, #12]
    HAL_JPEG_ConfigInputBuffer(hjpeg,(uint8_t *)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 80034ba:	4b0a      	ldr	r3, [pc, #40]	; (80034e4 <HAL_JPEG_GetDataCallback+0x64>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4619      	mov	r1, r3
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034c6:	bf28      	it	cs
 80034c8:	f44f 3380 	movcs.w	r3, #65536	; 0x10000
 80034cc:	461a      	mov	r2, r3
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f00b fea7 	bl	800f222 <HAL_JPEG_ConfigInputBuffer>
  }
}
 80034d4:	bf00      	nop
 80034d6:	3710      	adds	r7, #16
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	24005f18 	.word	0x24005f18
 80034e0:	24005f1c 	.word	0x24005f1c
 80034e4:	24005f20 	.word	0x24005f20

080034e8 <HAL_JPEG_DataReadyCallback>:
  * @param pDataOut: pointer to the output data buffer
  * @param OutDataLength: length of output buffer in bytes
  * @retval None
  */
void HAL_JPEG_DataReadyCallback (JPEG_HandleTypeDef *hjpeg, uint8_t *pDataOut, uint32_t OutDataLength)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b084      	sub	sp, #16
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	60f8      	str	r0, [r7, #12]
 80034f0:	60b9      	str	r1, [r7, #8]
 80034f2:	607a      	str	r2, [r7, #4]
    Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
 80034f4:	4b27      	ldr	r3, [pc, #156]	; (8003594 <HAL_JPEG_DataReadyCallback+0xac>)
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	4927      	ldr	r1, [pc, #156]	; (8003598 <HAL_JPEG_DataReadyCallback+0xb0>)
 80034fa:	4613      	mov	r3, r2
 80034fc:	005b      	lsls	r3, r3, #1
 80034fe:	4413      	add	r3, r2
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	440b      	add	r3, r1
 8003504:	2201      	movs	r2, #1
 8003506:	701a      	strb	r2, [r3, #0]
    Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBufferSize = OutDataLength;
 8003508:	4b22      	ldr	r3, [pc, #136]	; (8003594 <HAL_JPEG_DataReadyCallback+0xac>)
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	4922      	ldr	r1, [pc, #136]	; (8003598 <HAL_JPEG_DataReadyCallback+0xb0>)
 800350e:	4613      	mov	r3, r2
 8003510:	005b      	lsls	r3, r3, #1
 8003512:	4413      	add	r3, r2
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	440b      	add	r3, r1
 8003518:	3308      	adds	r3, #8
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	601a      	str	r2, [r3, #0]

    JPEG_OUT_Write_BufferIndex++;
 800351e:	4b1d      	ldr	r3, [pc, #116]	; (8003594 <HAL_JPEG_DataReadyCallback+0xac>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	3301      	adds	r3, #1
 8003524:	4a1b      	ldr	r2, [pc, #108]	; (8003594 <HAL_JPEG_DataReadyCallback+0xac>)
 8003526:	6013      	str	r3, [r2, #0]
    if(JPEG_OUT_Write_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
 8003528:	4b1a      	ldr	r3, [pc, #104]	; (8003594 <HAL_JPEG_DataReadyCallback+0xac>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	2b01      	cmp	r3, #1
 800352e:	d902      	bls.n	8003536 <HAL_JPEG_DataReadyCallback+0x4e>
    {
      JPEG_OUT_Write_BufferIndex = 0;
 8003530:	4b18      	ldr	r3, [pc, #96]	; (8003594 <HAL_JPEG_DataReadyCallback+0xac>)
 8003532:	2200      	movs	r2, #0
 8003534:	601a      	str	r2, [r3, #0]
    }

    //if the other buffer is full, then ui thread might be converting it
    if(Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State != JPEG_BUFFER_EMPTY)
 8003536:	4b17      	ldr	r3, [pc, #92]	; (8003594 <HAL_JPEG_DataReadyCallback+0xac>)
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	4917      	ldr	r1, [pc, #92]	; (8003598 <HAL_JPEG_DataReadyCallback+0xb0>)
 800353c:	4613      	mov	r3, r2
 800353e:	005b      	lsls	r3, r3, #1
 8003540:	4413      	add	r3, r2
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	440b      	add	r3, r1
 8003546:	781b      	ldrb	r3, [r3, #0]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d006      	beq.n	800355a <HAL_JPEG_DataReadyCallback+0x72>
    {
      HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 800354c:	2102      	movs	r1, #2
 800354e:	68f8      	ldr	r0, [r7, #12]
 8003550:	f00b fd24 	bl	800ef9c <HAL_JPEG_Pause>
      Output_Is_Paused = 1;
 8003554:	4b11      	ldr	r3, [pc, #68]	; (800359c <HAL_JPEG_DataReadyCallback+0xb4>)
 8003556:	2201      	movs	r2, #1
 8003558:	601a      	str	r2, [r3, #0]
    }
    HAL_JPEG_ConfigOutputBuffer(hjpeg, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 800355a:	4b0e      	ldr	r3, [pc, #56]	; (8003594 <HAL_JPEG_DataReadyCallback+0xac>)
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	490e      	ldr	r1, [pc, #56]	; (8003598 <HAL_JPEG_DataReadyCallback+0xb0>)
 8003560:	4613      	mov	r3, r2
 8003562:	005b      	lsls	r3, r3, #1
 8003564:	4413      	add	r3, r2
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	440b      	add	r3, r1
 800356a:	3304      	adds	r3, #4
 800356c:	6819      	ldr	r1, [r3, #0]
 800356e:	4b0c      	ldr	r3, [pc, #48]	; (80035a0 <HAL_JPEG_DataReadyCallback+0xb8>)
 8003570:	68da      	ldr	r2, [r3, #12]
 8003572:	4613      	mov	r3, r2
 8003574:	005b      	lsls	r3, r3, #1
 8003576:	4413      	add	r3, r2
 8003578:	01db      	lsls	r3, r3, #7
 800357a:	461a      	mov	r2, r3
 800357c:	68f8      	ldr	r0, [r7, #12]
 800357e:	f00b fe62 	bl	800f246 <HAL_JPEG_ConfigOutputBuffer>

    // Signal Hardware Decoding to wake up
    SEM_POST(semDecodingDone);
 8003582:	4b08      	ldr	r3, [pc, #32]	; (80035a4 <HAL_JPEG_DataReadyCallback+0xbc>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4618      	mov	r0, r3
 8003588:	f012 fd08 	bl	8015f9c <osSemaphoreRelease>
}
 800358c:	bf00      	nop
 800358e:	3710      	adds	r7, #16
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}
 8003594:	24005f2c 	.word	0x24005f2c
 8003598:	24000004 	.word	0x24000004
 800359c:	24005f30 	.word	0x24005f30
 80035a0:	24005f70 	.word	0x24005f70
 80035a4:	24005f4c 	.word	0x24005f4c

080035a8 <HAL_JPEG_ErrorCallback>:
  * @brief  JPEG Error callback
  * @param hjpeg: JPEG handle pointer
  * @retval None
  */
void HAL_JPEG_ErrorCallback(JPEG_HandleTypeDef *hjpeg)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 80035b0:	b672      	cpsid	i
}
 80035b2:	bf00      	nop
  __disable_irq();
  while (1)
 80035b4:	e7fe      	b.n	80035b4 <HAL_JPEG_ErrorCallback+0xc>
	...

080035b8 <HAL_JPEG_DecodeCpltCallback>:
  * @brief  JPEG Decode complete callback
  * @param hjpeg: JPEG handle pointer
  * @retval None
  */
void HAL_JPEG_DecodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b083      	sub	sp, #12
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  Jpeg_HWDecodingEnd = 1;
 80035c0:	4b04      	ldr	r3, [pc, #16]	; (80035d4 <HAL_JPEG_DecodeCpltCallback+0x1c>)
 80035c2:	2201      	movs	r2, #1
 80035c4:	601a      	str	r2, [r3, #0]
}
 80035c6:	bf00      	nop
 80035c8:	370c      	adds	r7, #12
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr
 80035d2:	bf00      	nop
 80035d4:	24005f24 	.word	0x24005f24

080035d8 <JPEG_OutputHandler>:
  * @param hjpeg: JPEG handle pointer
  * @param dma: DMA2D reference
  * @retval 1 : if JPEG processing has finished, 0 : if JPEG processing still ongoing
  */
uint32_t JPEG_OutputHandler(JPEG_HandleTypeDef *hjpeg, touchgfx::DMA_Interface& dma)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b084      	sub	sp, #16
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	6039      	str	r1, [r7, #0]
  if(Jpeg_HWDecodingEnd && DMA2D_CopyBufferEnd) // decode completed
 80035e2:	4b45      	ldr	r3, [pc, #276]	; (80036f8 <JPEG_OutputHandler+0x120>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d005      	beq.n	80035f6 <JPEG_OutputHandler+0x1e>
 80035ea:	4b44      	ldr	r3, [pc, #272]	; (80036fc <JPEG_OutputHandler+0x124>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d001      	beq.n	80035f6 <JPEG_OutputHandler+0x1e>
 80035f2:	2301      	movs	r3, #1
 80035f4:	e000      	b.n	80035f8 <JPEG_OutputHandler+0x20>
 80035f6:	2300      	movs	r3, #0
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d001      	beq.n	8003600 <JPEG_OutputHandler+0x28>
  {
      return 1;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e077      	b.n	80036f0 <JPEG_OutputHandler+0x118>
  }

  // Add job to DMA2D if ready and JPEG buffer is full
  if((Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && (DMA2D_output_Is_Paused == 1))
 8003600:	4b3f      	ldr	r3, [pc, #252]	; (8003700 <JPEG_OutputHandler+0x128>)
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	493f      	ldr	r1, [pc, #252]	; (8003704 <JPEG_OutputHandler+0x12c>)
 8003606:	4613      	mov	r3, r2
 8003608:	005b      	lsls	r3, r3, #1
 800360a:	4413      	add	r3, r2
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	440b      	add	r3, r1
 8003610:	781b      	ldrb	r3, [r3, #0]
 8003612:	2b01      	cmp	r3, #1
 8003614:	d105      	bne.n	8003622 <JPEG_OutputHandler+0x4a>
 8003616:	4b3c      	ldr	r3, [pc, #240]	; (8003708 <JPEG_OutputHandler+0x130>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	2b01      	cmp	r3, #1
 800361c:	d101      	bne.n	8003622 <JPEG_OutputHandler+0x4a>
 800361e:	2301      	movs	r3, #1
 8003620:	e000      	b.n	8003624 <JPEG_OutputHandler+0x4c>
 8003622:	2300      	movs	r3, #0
 8003624:	2b00      	cmp	r3, #0
 8003626:	d02d      	beq.n	8003684 <JPEG_OutputHandler+0xac>
  {
      External_DMA2D_JobTypeDef new_job = {
          MCU_BlockIndex,
          &Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]
      };
 8003628:	4b38      	ldr	r3, [pc, #224]	; (800370c <JPEG_OutputHandler+0x134>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	60bb      	str	r3, [r7, #8]
          &Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]
 800362e:	4b34      	ldr	r3, [pc, #208]	; (8003700 <JPEG_OutputHandler+0x128>)
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	4613      	mov	r3, r2
 8003634:	005b      	lsls	r3, r3, #1
 8003636:	4413      	add	r3, r2
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	4a32      	ldr	r2, [pc, #200]	; (8003704 <JPEG_OutputHandler+0x12c>)
 800363c:	4413      	add	r3, r2
      };
 800363e:	60fb      	str	r3, [r7, #12]

      external_queue.push(new_job);
 8003640:	f107 0308 	add.w	r3, r7, #8
 8003644:	4619      	mov	r1, r3
 8003646:	4832      	ldr	r0, [pc, #200]	; (8003710 <JPEG_OutputHandler+0x138>)
 8003648:	f000 f94d 	bl	80038e6 <_ZN20ExternalDMAJob_QueueILm2EE4pushERK25External_DMA2D_JobTypeDef>

      MCU_BlockIndex += JPEG_ConvertorParams.MCU_pr_line;
 800364c:	4b31      	ldr	r3, [pc, #196]	; (8003714 <JPEG_OutputHandler+0x13c>)
 800364e:	68da      	ldr	r2, [r3, #12]
 8003650:	4b2e      	ldr	r3, [pc, #184]	; (800370c <JPEG_OutputHandler+0x134>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4413      	add	r3, r2
 8003656:	4a2d      	ldr	r2, [pc, #180]	; (800370c <JPEG_OutputHandler+0x134>)
 8003658:	6013      	str	r3, [r2, #0]

      JPEG_OUT_Read_BufferIndex++;
 800365a:	4b29      	ldr	r3, [pc, #164]	; (8003700 <JPEG_OutputHandler+0x128>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	3301      	adds	r3, #1
 8003660:	4a27      	ldr	r2, [pc, #156]	; (8003700 <JPEG_OutputHandler+0x128>)
 8003662:	6013      	str	r3, [r2, #0]
      if(JPEG_OUT_Read_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
 8003664:	4b26      	ldr	r3, [pc, #152]	; (8003700 <JPEG_OutputHandler+0x128>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	2b01      	cmp	r3, #1
 800366a:	d902      	bls.n	8003672 <JPEG_OutputHandler+0x9a>
      {
        JPEG_OUT_Read_BufferIndex = 0;
 800366c:	4b24      	ldr	r3, [pc, #144]	; (8003700 <JPEG_OutputHandler+0x128>)
 800366e:	2200      	movs	r2, #0
 8003670:	601a      	str	r2, [r3, #0]
      }

      DMA2D_output_Is_Paused = 0;
 8003672:	4b25      	ldr	r3, [pc, #148]	; (8003708 <JPEG_OutputHandler+0x130>)
 8003674:	2200      	movs	r2, #0
 8003676:	601a      	str	r2, [r3, #0]

      // Try to start DMA2D
      dma.start();
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	3310      	adds	r3, #16
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	6838      	ldr	r0, [r7, #0]
 8003682:	4798      	blx	r3
  }

  // Start JPEG IP if paused and next buffer is empty
  if((Output_Is_Paused == 1) && \
 8003684:	4b24      	ldr	r3, [pc, #144]	; (8003718 <JPEG_OutputHandler+0x140>)
 8003686:	681b      	ldr	r3, [r3, #0]
          (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) &&\
 8003688:	2b01      	cmp	r3, #1
 800368a:	d117      	bne.n	80036bc <JPEG_OutputHandler+0xe4>
 800368c:	4b23      	ldr	r3, [pc, #140]	; (800371c <JPEG_OutputHandler+0x144>)
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	491c      	ldr	r1, [pc, #112]	; (8003704 <JPEG_OutputHandler+0x12c>)
 8003692:	4613      	mov	r3, r2
 8003694:	005b      	lsls	r3, r3, #1
 8003696:	4413      	add	r3, r2
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	440b      	add	r3, r1
 800369c:	781b      	ldrb	r3, [r3, #0]
  if((Output_Is_Paused == 1) && \
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d10c      	bne.n	80036bc <JPEG_OutputHandler+0xe4>
          (Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_EMPTY))
 80036a2:	4b17      	ldr	r3, [pc, #92]	; (8003700 <JPEG_OutputHandler+0x128>)
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	4917      	ldr	r1, [pc, #92]	; (8003704 <JPEG_OutputHandler+0x12c>)
 80036a8:	4613      	mov	r3, r2
 80036aa:	005b      	lsls	r3, r3, #1
 80036ac:	4413      	add	r3, r2
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	440b      	add	r3, r1
 80036b2:	781b      	ldrb	r3, [r3, #0]
          (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) &&\
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d101      	bne.n	80036bc <JPEG_OutputHandler+0xe4>
 80036b8:	2301      	movs	r3, #1
 80036ba:	e000      	b.n	80036be <JPEG_OutputHandler+0xe6>
 80036bc:	2300      	movs	r3, #0
  if((Output_Is_Paused == 1) && \
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d006      	beq.n	80036d0 <JPEG_OutputHandler+0xf8>
  {
      Output_Is_Paused = 0;
 80036c2:	4b15      	ldr	r3, [pc, #84]	; (8003718 <JPEG_OutputHandler+0x140>)
 80036c4:	2200      	movs	r2, #0
 80036c6:	601a      	str	r2, [r3, #0]
      HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 80036c8:	2102      	movs	r1, #2
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f00b fcbe 	bl	800f04c <HAL_JPEG_Resume>
  }

  if ((Output_Is_Paused == 0) && (DMA2D_output_Is_Paused == 0))
 80036d0:	4b11      	ldr	r3, [pc, #68]	; (8003718 <JPEG_OutputHandler+0x140>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d105      	bne.n	80036e4 <JPEG_OutputHandler+0x10c>
 80036d8:	4b0b      	ldr	r3, [pc, #44]	; (8003708 <JPEG_OutputHandler+0x130>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d101      	bne.n	80036e4 <JPEG_OutputHandler+0x10c>
 80036e0:	2301      	movs	r3, #1
 80036e2:	e000      	b.n	80036e6 <JPEG_OutputHandler+0x10e>
 80036e4:	2300      	movs	r3, #0
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d001      	beq.n	80036ee <JPEG_OutputHandler+0x116>
  {
      return 2;
 80036ea:	2302      	movs	r3, #2
 80036ec:	e000      	b.n	80036f0 <JPEG_OutputHandler+0x118>
  }

  return 0;
 80036ee:	2300      	movs	r3, #0
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3710      	adds	r7, #16
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}
 80036f8:	24005f24 	.word	0x24005f24
 80036fc:	24005f34 	.word	0x24005f34
 8003700:	24005f28 	.word	0x24005f28
 8003704:	24000004 	.word	0x24000004
 8003708:	24005f38 	.word	0x24005f38
 800370c:	24005f48 	.word	0x24005f48
 8003710:	24005f50 	.word	0x24005f50
 8003714:	24005f70 	.word	0x24005f70
 8003718:	24005f30 	.word	0x24005f30
 800371c:	24005f2c 	.word	0x24005f2c

08003720 <DMA2D_CopyBuffer>:
  * @brief  Configures external DMA2D job to copy YCbCr data to RGB buffer(s)
  * @param job: External job reference
  * @retval None
  */
void DMA2D_CopyBuffer(External_DMA2D_JobTypeDef& job)
{
 8003720:	b480      	push	{r7}
 8003722:	b087      	sub	sp, #28
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  uint32_t xRef, yRef, refline;

  xRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	011a      	lsls	r2, r3, #4
 800372e:	4b2e      	ldr	r3, [pc, #184]	; (80037e8 <DMA2D_CopyBuffer+0xc8>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	fbb2 f3f3 	udiv	r3, r2, r3
 8003736:	011b      	lsls	r3, r3, #4
 8003738:	617b      	str	r3, [r7, #20]
  yRef = ((job.MCU_index * MCU_WIDTH_PIXELS) % JPEG_ConvertorParams.WidthExtend);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	011b      	lsls	r3, r3, #4
 8003740:	4a29      	ldr	r2, [pc, #164]	; (80037e8 <DMA2D_CopyBuffer+0xc8>)
 8003742:	6812      	ldr	r2, [r2, #0]
 8003744:	fbb3 f1f2 	udiv	r1, r3, r2
 8003748:	fb01 f202 	mul.w	r2, r1, r2
 800374c:	1a9b      	subs	r3, r3, r2
 800374e:	613b      	str	r3, [r7, #16]

  refline = (JPEG_ConvertorParams.ScaledWidth) * xRef + (JPEG_ConvertorParams.bytes_pr_pixel * yRef);
 8003750:	4b25      	ldr	r3, [pc, #148]	; (80037e8 <DMA2D_CopyBuffer+0xc8>)
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	697a      	ldr	r2, [r7, #20]
 8003756:	fb03 f202 	mul.w	r2, r3, r2
 800375a:	4b23      	ldr	r3, [pc, #140]	; (80037e8 <DMA2D_CopyBuffer+0xc8>)
 800375c:	691b      	ldr	r3, [r3, #16]
 800375e:	6939      	ldr	r1, [r7, #16]
 8003760:	fb01 f303 	mul.w	r3, r1, r3
 8003764:	4413      	add	r3, r2
 8003766:	60fb      	str	r3, [r7, #12]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8003768:	4b20      	ldr	r3, [pc, #128]	; (80037ec <DMA2D_CopyBuffer+0xcc>)
 800376a:	2201      	movs	r2, #1
 800376c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Configure DMA2D data size */
  if(job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  // Last line of frame
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	4b1f      	ldr	r3, [pc, #124]	; (80037f0 <DMA2D_CopyBuffer+0xd0>)
 8003774:	6819      	ldr	r1, [r3, #0]
 8003776:	4b1c      	ldr	r3, [pc, #112]	; (80037e8 <DMA2D_CopyBuffer+0xc8>)
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	1acb      	subs	r3, r1, r3
 800377c:	429a      	cmp	r2, r3
 800377e:	d309      	bcc.n	8003794 <DMA2D_CopyBuffer+0x74>
  {
      WRITE_REG(DMA2D->NLR, (JPEG_ConvertorParams.LastLineHeight | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
 8003780:	4b19      	ldr	r3, [pc, #100]	; (80037e8 <DMA2D_CopyBuffer+0xc8>)
 8003782:	689a      	ldr	r2, [r3, #8]
 8003784:	4b18      	ldr	r3, [pc, #96]	; (80037e8 <DMA2D_CopyBuffer+0xc8>)
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	011b      	lsls	r3, r3, #4
 800378a:	041b      	lsls	r3, r3, #16
 800378c:	4917      	ldr	r1, [pc, #92]	; (80037ec <DMA2D_CopyBuffer+0xcc>)
 800378e:	4313      	orrs	r3, r2
 8003790:	644b      	str	r3, [r1, #68]	; 0x44
 8003792:	e007      	b.n	80037a4 <DMA2D_CopyBuffer+0x84>
  }
  else
  {
      WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
 8003794:	4b14      	ldr	r3, [pc, #80]	; (80037e8 <DMA2D_CopyBuffer+0xc8>)
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	011b      	lsls	r3, r3, #4
 800379a:	041b      	lsls	r3, r3, #16
 800379c:	4a13      	ldr	r2, [pc, #76]	; (80037ec <DMA2D_CopyBuffer+0xcc>)
 800379e:	f043 0310 	orr.w	r3, r3, #16
 80037a2:	6453      	str	r3, [r2, #68]	; 0x44
  }

  /* Configure DMA2D destination address */
  WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress) + refline));
 80037a4:	4b13      	ldr	r3, [pc, #76]	; (80037f4 <DMA2D_CopyBuffer+0xd4>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4619      	mov	r1, r3
 80037aa:	4a10      	ldr	r2, [pc, #64]	; (80037ec <DMA2D_CopyBuffer+0xcc>)
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	440b      	add	r3, r1
 80037b0:	63d3      	str	r3, [r2, #60]	; 0x3c

  /* DMA2D OOR register configuration ------------------------------------------*/
  WRITE_REG(DMA2D->OOR, 480 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
 80037b2:	4b0d      	ldr	r3, [pc, #52]	; (80037e8 <DMA2D_CopyBuffer+0xc8>)
 80037b4:	68db      	ldr	r3, [r3, #12]
 80037b6:	f1c3 031e 	rsb	r3, r3, #30
 80037ba:	4a0c      	ldr	r2, [pc, #48]	; (80037ec <DMA2D_CopyBuffer+0xcc>)
 80037bc:	011b      	lsls	r3, r3, #4
 80037be:	6413      	str	r3, [r2, #64]	; 0x40

  /* DMA2D FGOR register configuration -------------------------------------*/
  WRITE_REG(DMA2D->FGOR, 0);
 80037c0:	4b0a      	ldr	r3, [pc, #40]	; (80037ec <DMA2D_CopyBuffer+0xcc>)
 80037c2:	2200      	movs	r2, #0
 80037c4:	611a      	str	r2, [r3, #16]

  /* DMA2D FGPFCCR register configuration -------------------------------------*/
  WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_YCBCR | (DMA2D_CSS_420 << DMA2D_FGPFCCR_CSS_Pos) | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (0xFFU << DMA2D_FGPFCCR_ALPHA_Pos));
 80037c6:	4b09      	ldr	r3, [pc, #36]	; (80037ec <DMA2D_CopyBuffer+0xcc>)
 80037c8:	4a0b      	ldr	r2, [pc, #44]	; (80037f8 <DMA2D_CopyBuffer+0xd8>)
 80037ca:	61da      	str	r2, [r3, #28]

  /* Configure DMA2D source address */
  WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(job.jpeg_buffer->DataBuffer));
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	685a      	ldr	r2, [r3, #4]
 80037d2:	4b06      	ldr	r3, [pc, #24]	; (80037ec <DMA2D_CopyBuffer+0xcc>)
 80037d4:	60da      	str	r2, [r3, #12]

  /* Configure DMA2D contol register */
  WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 80037d6:	4b05      	ldr	r3, [pc, #20]	; (80037ec <DMA2D_CopyBuffer+0xcc>)
 80037d8:	4a08      	ldr	r2, [pc, #32]	; (80037fc <DMA2D_CopyBuffer+0xdc>)
 80037da:	601a      	str	r2, [r3, #0]
}
 80037dc:	bf00      	nop
 80037de:	371c      	adds	r7, #28
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr
 80037e8:	24005f70 	.word	0x24005f70
 80037ec:	52001000 	.word	0x52001000
 80037f0:	24005f40 	.word	0x24005f40
 80037f4:	24005f14 	.word	0x24005f14
 80037f8:	ff09000b 	.word	0xff09000b
 80037fc:	00010201 	.word	0x00010201

08003800 <DMA2D_ExternalJobCompleted>:
  * @brief  External DMA2D job complete callback
  * @param job: External job reference
  * @retval None
  */
void DMA2D_ExternalJobCompleted(External_DMA2D_JobTypeDef& job)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b082      	sub	sp, #8
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  // Mark ycbcr empty
  job.jpeg_buffer->State = JPEG_BUFFER_EMPTY;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	701a      	strb	r2, [r3, #0]
  job.jpeg_buffer->DataBufferSize = 0;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	609a      	str	r2, [r3, #8]

  // Mark dma paused if queue is empty
  if(external_queue.is_empty())
 8003818:	480e      	ldr	r0, [pc, #56]	; (8003854 <DMA2D_ExternalJobCompleted+0x54>)
 800381a:	f000 f827 	bl	800386c <_ZN20ExternalDMAJob_QueueILm2EE8is_emptyEv>
 800381e:	4603      	mov	r3, r0
 8003820:	2b00      	cmp	r3, #0
 8003822:	d002      	beq.n	800382a <DMA2D_ExternalJobCompleted+0x2a>
  {
      DMA2D_output_Is_Paused = 1;
 8003824:	4b0c      	ldr	r3, [pc, #48]	; (8003858 <DMA2D_ExternalJobCompleted+0x58>)
 8003826:	2201      	movs	r2, #1
 8003828:	601a      	str	r2, [r3, #0]
  }

  // Check if last line
  if(job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	4b0b      	ldr	r3, [pc, #44]	; (800385c <DMA2D_ExternalJobCompleted+0x5c>)
 8003830:	6819      	ldr	r1, [r3, #0]
 8003832:	4b0b      	ldr	r3, [pc, #44]	; (8003860 <DMA2D_ExternalJobCompleted+0x60>)
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	1acb      	subs	r3, r1, r3
 8003838:	429a      	cmp	r2, r3
 800383a:	d302      	bcc.n	8003842 <DMA2D_ExternalJobCompleted+0x42>
  {
      DMA2D_CopyBufferEnd = 1;
 800383c:	4b09      	ldr	r3, [pc, #36]	; (8003864 <DMA2D_ExternalJobCompleted+0x64>)
 800383e:	2201      	movs	r2, #1
 8003840:	601a      	str	r2, [r3, #0]
  }

  // Signal Hardware Decoding to wake up
  SEM_POST(semDecodingDone);
 8003842:	4b09      	ldr	r3, [pc, #36]	; (8003868 <DMA2D_ExternalJobCompleted+0x68>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4618      	mov	r0, r3
 8003848:	f012 fba8 	bl	8015f9c <osSemaphoreRelease>
}
 800384c:	bf00      	nop
 800384e:	3708      	adds	r7, #8
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}
 8003854:	24005f50 	.word	0x24005f50
 8003858:	24005f38 	.word	0x24005f38
 800385c:	24005f40 	.word	0x24005f40
 8003860:	24005f70 	.word	0x24005f70
 8003864:	24005f34 	.word	0x24005f34
 8003868:	24005f4c 	.word	0x24005f4c

0800386c <_ZN20ExternalDMAJob_QueueILm2EE8is_emptyEv>:
  }
  External_DMA2D_JobTypeDef& front()
  {
      return buffer_[head_];
  }
  bool is_empty()
 800386c:	b480      	push	{r7}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  {
      return count_ == 0;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	2b00      	cmp	r3, #0
 800387a:	bf0c      	ite	eq
 800387c:	2301      	moveq	r3, #1
 800387e:	2300      	movne	r3, #0
 8003880:	b2db      	uxtb	r3, r3
  }
 8003882:	4618      	mov	r0, r3
 8003884:	370c      	adds	r7, #12
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr

0800388e <_ZN20ExternalDMAJob_QueueILm2EEC1Ev>:
  ExternalDMAJob_Queue()
 800388e:	b480      	push	{r7}
 8003890:	b083      	sub	sp, #12
 8003892:	af00      	add	r7, sp, #0
 8003894:	6078      	str	r0, [r7, #4]
      : max_size_(Size), head_(0), tail_(0), count_(0)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2202      	movs	r2, #2
 800389a:	601a      	str	r2, [r3, #0]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	605a      	str	r2, [r3, #4]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	609a      	str	r2, [r3, #8]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2200      	movs	r2, #0
 80038ac:	60da      	str	r2, [r3, #12]
  {}
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4618      	mov	r0, r3
 80038b2:	370c      	adds	r7, #12
 80038b4:	46bd      	mov	sp, r7
 80038b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ba:	4770      	bx	lr

080038bc <_ZN20ExternalDMAJob_QueueILm2EE5resetEv>:
  bool is_full()
  {
      return count_ == max_size_;
  }
  void reset()
 80038bc:	b480      	push	{r7}
 80038be:	b083      	sub	sp, #12
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  {
      head_ = tail_ = count_ = 0;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2200      	movs	r2, #0
 80038c8:	60da      	str	r2, [r3, #12]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	68da      	ldr	r2, [r3, #12]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	609a      	str	r2, [r3, #8]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	689a      	ldr	r2, [r3, #8]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	605a      	str	r2, [r3, #4]
  }
 80038da:	bf00      	nop
 80038dc:	370c      	adds	r7, #12
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr

080038e6 <_ZN20ExternalDMAJob_QueueILm2EE4pushERK25External_DMA2D_JobTypeDef>:
  void push(const External_DMA2D_JobTypeDef& job)
 80038e6:	b480      	push	{r7}
 80038e8:	b083      	sub	sp, #12
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	6078      	str	r0, [r7, #4]
 80038ee:	6039      	str	r1, [r7, #0]
      buffer_[tail_] = job;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	687a      	ldr	r2, [r7, #4]
 80038f6:	3302      	adds	r3, #2
 80038f8:	6839      	ldr	r1, [r7, #0]
 80038fa:	00db      	lsls	r3, r3, #3
 80038fc:	4413      	add	r3, r2
 80038fe:	460a      	mov	r2, r1
 8003900:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003904:	e883 0003 	stmia.w	r3, {r0, r1}
      tail_ = (tail_ + 1) % max_size_;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	3301      	adds	r3, #1
 800390e:	687a      	ldr	r2, [r7, #4]
 8003910:	6812      	ldr	r2, [r2, #0]
 8003912:	fbb3 f1f2 	udiv	r1, r3, r2
 8003916:	fb01 f202 	mul.w	r2, r1, r2
 800391a:	1a9a      	subs	r2, r3, r2
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	609a      	str	r2, [r3, #8]
      count_++;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	1c5a      	adds	r2, r3, #1
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	60da      	str	r2, [r3, #12]
  }
 800392a:	bf00      	nop
 800392c:	370c      	adds	r7, #12
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr
	...

08003938 <_ZN20HardwareMJPEGDecoderD1Ev>:
class HardwareMJPEGDecoder : public MJPEGDecoder
 8003938:	b580      	push	{r7, lr}
 800393a:	b082      	sub	sp, #8
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	4a05      	ldr	r2, [pc, #20]	; (8003958 <_ZN20HardwareMJPEGDecoderD1Ev+0x20>)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	601a      	str	r2, [r3, #0]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4618      	mov	r0, r3
 800394a:	f7fe fed1 	bl	80026f0 <_ZN12MJPEGDecoderD1Ev>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4618      	mov	r0, r3
 8003952:	3708      	adds	r7, #8
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}
 8003958:	0802c084 	.word	0x0802c084

0800395c <_ZN20HardwareMJPEGDecoderD0Ev>:
 800395c:	b580      	push	{r7, lr}
 800395e:	b082      	sub	sp, #8
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f7ff ffe7 	bl	8003938 <_ZN20HardwareMJPEGDecoderD1Ev>
 800396a:	2148      	movs	r1, #72	; 0x48
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f024 ff60 	bl	8028832 <_ZdlPvj>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	4618      	mov	r0, r3
 8003976:	3708      	adds	r7, #8
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}

0800397c <_Z41__static_initialization_and_destruction_0ii>:
 800397c:	b580      	push	{r7, lr}
 800397e:	b082      	sub	sp, #8
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	6039      	str	r1, [r7, #0]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2b01      	cmp	r3, #1
 800398a:	d107      	bne.n	800399c <_Z41__static_initialization_and_destruction_0ii+0x20>
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003992:	4293      	cmp	r3, r2
 8003994:	d102      	bne.n	800399c <_Z41__static_initialization_and_destruction_0ii+0x20>
ExternalDMAJob_Queue<EXT_DMA2D_QUEUE_SIZE> external_queue;
 8003996:	4803      	ldr	r0, [pc, #12]	; (80039a4 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8003998:	f7ff ff79 	bl	800388e <_ZN20ExternalDMAJob_QueueILm2EEC1Ev>
}
 800399c:	bf00      	nop
 800399e:	3708      	adds	r7, #8
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}
 80039a4:	24005f50 	.word	0x24005f50

080039a8 <_GLOBAL__sub_I_FrameBufferAddress>:
 80039a8:	b580      	push	{r7, lr}
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80039b0:	2001      	movs	r0, #1
 80039b2:	f7ff ffe3 	bl	800397c <_Z41__static_initialization_and_destruction_0ii>
 80039b6:	bd80      	pop	{r7, pc}

080039b8 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	af00      	add	r7, sp, #0
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 80039bc:	2200      	movs	r2, #0
 80039be:	2101      	movs	r1, #1
 80039c0:	2001      	movs	r0, #1
 80039c2:	f012 fa10 	bl	8015de6 <osSemaphoreNew>
 80039c6:	4603      	mov	r3, r0
 80039c8:	4a0f      	ldr	r2, [pc, #60]	; (8003a08 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 80039ca:	6013      	str	r3, [r2, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 80039cc:	4b0e      	ldr	r3, [pc, #56]	; (8003a08 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d105      	bne.n	80039e0 <_ZN8touchgfx10OSWrappers10initializeEv+0x28>
 80039d4:	4b0d      	ldr	r3, [pc, #52]	; (8003a0c <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 80039d6:	4a0e      	ldr	r2, [pc, #56]	; (8003a10 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 80039d8:	2128      	movs	r1, #40	; 0x28
 80039da:	480e      	ldr	r0, [pc, #56]	; (8003a14 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 80039dc:	f024 ff58 	bl	8028890 <__assert_func>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 80039e0:	2200      	movs	r2, #0
 80039e2:	2104      	movs	r1, #4
 80039e4:	2001      	movs	r0, #1
 80039e6:	f012 fb1d 	bl	8016024 <osMessageQueueNew>
 80039ea:	4603      	mov	r3, r0
 80039ec:	4a0a      	ldr	r2, [pc, #40]	; (8003a18 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 80039ee:	6013      	str	r3, [r2, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 80039f0:	4b09      	ldr	r3, [pc, #36]	; (8003a18 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d105      	bne.n	8003a04 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>
 80039f8:	4b08      	ldr	r3, [pc, #32]	; (8003a1c <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 80039fa:	4a05      	ldr	r2, [pc, #20]	; (8003a10 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 80039fc:	212c      	movs	r1, #44	; 0x2c
 80039fe:	4805      	ldr	r0, [pc, #20]	; (8003a14 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8003a00:	f024 ff46 	bl	8028890 <__assert_func>
}
 8003a04:	bf00      	nop
 8003a06:	bd80      	pop	{r7, pc}
 8003a08:	24005f84 	.word	0x24005f84
 8003a0c:	08029ef0 	.word	0x08029ef0
 8003a10:	08029f3c 	.word	0x08029f3c
 8003a14:	08029f6c 	.word	0x08029f6c
 8003a18:	24005f88 	.word	0x24005f88
 8003a1c:	08029fd8 	.word	0x08029fd8

08003a20 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8003a24:	4b04      	ldr	r3, [pc, #16]	; (8003a38 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f04f 31ff 	mov.w	r1, #4294967295
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f012 fa63 	bl	8015ef8 <osSemaphoreAcquire>
}
 8003a32:	bf00      	nop
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	24005f84 	.word	0x24005f84

08003a3c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8003a40:	4b03      	ldr	r3, [pc, #12]	; (8003a50 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4618      	mov	r0, r3
 8003a46:	f012 faa9 	bl	8015f9c <osSemaphoreRelease>
}
 8003a4a:	bf00      	nop
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	bf00      	nop
 8003a50:	24005f84 	.word	0x24005f84

08003a54 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8003a58:	4b03      	ldr	r3, [pc, #12]	; (8003a68 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	2100      	movs	r1, #0
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f012 fa4a 	bl	8015ef8 <osSemaphoreAcquire>
}
 8003a64:	bf00      	nop
 8003a66:	bd80      	pop	{r7, pc}
 8003a68:	24005f84 	.word	0x24005f84

08003a6c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8003a70:	4b03      	ldr	r3, [pc, #12]	; (8003a80 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4618      	mov	r0, r3
 8003a76:	f012 fa91 	bl	8015f9c <osSemaphoreRelease>
}
 8003a7a:	bf00      	nop
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	24005f84 	.word	0x24005f84

08003a84 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	af00      	add	r7, sp, #0
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8003a88:	4b04      	ldr	r3, [pc, #16]	; (8003a9c <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x18>)
 8003a8a:	6818      	ldr	r0, [r3, #0]
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	2200      	movs	r2, #0
 8003a90:	4903      	ldr	r1, [pc, #12]	; (8003aa0 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x1c>)
 8003a92:	f012 fb3b 	bl	801610c <osMessageQueuePut>
}
 8003a96:	bf00      	nop
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop
 8003a9c:	24005f88 	.word	0x24005f88
 8003aa0:	2400001c 	.word	0x2400001c

08003aa4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b082      	sub	sp, #8
 8003aa8:	af00      	add	r7, sp, #0
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8003aaa:	4b09      	ldr	r3, [pc, #36]	; (8003ad0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8003aac:	6818      	ldr	r0, [r3, #0]
 8003aae:	1d39      	adds	r1, r7, #4
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	f012 fb8a 	bl	80161cc <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8003ab8:	4b05      	ldr	r3, [pc, #20]	; (8003ad0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8003aba:	6818      	ldr	r0, [r3, #0]
 8003abc:	1d39      	adds	r1, r7, #4
 8003abe:	f04f 33ff 	mov.w	r3, #4294967295
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	f012 fb82 	bl	80161cc <osMessageQueueGet>
}
 8003ac8:	bf00      	nop
 8003aca:	3708      	adds	r7, #8
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	24005f88 	.word	0x24005f88

08003ad4 <__NVIC_EnableIRQ>:
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b083      	sub	sp, #12
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	4603      	mov	r3, r0
 8003adc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003ade:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	db0b      	blt.n	8003afe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ae6:	88fb      	ldrh	r3, [r7, #6]
 8003ae8:	f003 021f 	and.w	r2, r3, #31
 8003aec:	4907      	ldr	r1, [pc, #28]	; (8003b0c <__NVIC_EnableIRQ+0x38>)
 8003aee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003af2:	095b      	lsrs	r3, r3, #5
 8003af4:	2001      	movs	r0, #1
 8003af6:	fa00 f202 	lsl.w	r2, r0, r2
 8003afa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003afe:	bf00      	nop
 8003b00:	370c      	adds	r7, #12
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr
 8003b0a:	bf00      	nop
 8003b0c:	e000e100 	.word	0xe000e100

08003b10 <__NVIC_DisableIRQ>:
{
 8003b10:	b480      	push	{r7}
 8003b12:	b083      	sub	sp, #12
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	4603      	mov	r3, r0
 8003b18:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003b1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	db12      	blt.n	8003b48 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b22:	88fb      	ldrh	r3, [r7, #6]
 8003b24:	f003 021f 	and.w	r2, r3, #31
 8003b28:	490a      	ldr	r1, [pc, #40]	; (8003b54 <__NVIC_DisableIRQ+0x44>)
 8003b2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003b2e:	095b      	lsrs	r3, r3, #5
 8003b30:	2001      	movs	r0, #1
 8003b32:	fa00 f202 	lsl.w	r2, r0, r2
 8003b36:	3320      	adds	r3, #32
 8003b38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003b3c:	f3bf 8f4f 	dsb	sy
}
 8003b40:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003b42:	f3bf 8f6f 	isb	sy
}
 8003b46:	bf00      	nop
}
 8003b48:	bf00      	nop
 8003b4a:	370c      	adds	r7, #12
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr
 8003b54:	e000e100 	.word	0xe000e100

08003b58 <_ZN8touchgfx9colortypeC1Ev>:
 * extract a 24/32-bit color from this type, use the getColor32 function.
 */
struct colortype
{
    /** Default constructor. Creates a black (0) color. */
    colortype()
 8003b58:	b480      	push	{r7}
 8003b5a:	b083      	sub	sp, #12
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
        : color(0)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2200      	movs	r2, #0
 8003b64:	601a      	str	r2, [r3, #0]
    {
    }
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	4618      	mov	r0, r3
 8003b6a:	370c      	adds	r7, #12
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr

08003b74 <_ZNK8touchgfx9colortypecvmEv>:
    /**
     * Cast that converts the given colortype to an uint32_t.
     *
     * @return The result of the operation.
     */
    operator uint32_t() const
 8003b74:	b480      	push	{r7}
 8003b76:	b083      	sub	sp, #12
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
    {
        return color;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
    }
 8003b80:	4618      	mov	r0, r3
 8003b82:	370c      	adds	r7, #12
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr

08003b8c <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 8003b8c:	b480      	push	{r7}
 8003b8e:	b083      	sub	sp, #12
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
    {
 8003b94:	4a04      	ldr	r2, [pc, #16]	; (8003ba8 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	601a      	str	r2, [r3, #0]
    }
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	370c      	adds	r7, #12
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr
 8003ba8:	0802c158 	.word	0x0802c158

08003bac <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b082      	sub	sp, #8
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
    }
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	f7ff ffe9 	bl	8003b8c <_ZN8touchgfx9DMA_QueueD1Ev>
 8003bba:	2104      	movs	r1, #4
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f024 fe38 	bl	8028832 <_ZdlPvj>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3708      	adds	r7, #8
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}

08003bcc <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b082      	sub	sp, #8
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	3344      	adds	r3, #68	; 0x44
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	4798      	blx	r3
    }
 8003be0:	bf00      	nop
 8003be2:	3708      	adds	r7, #8
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}

08003be8 <_ZN8touchgfx13DMA_InterfaceD1Ev>:
    {
        return DMA_TYPE_GENERIC;
    }

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 8003be8:	b480      	push	{r7}
 8003bea:	b083      	sub	sp, #12
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
    {
 8003bf0:	4a04      	ldr	r2, [pc, #16]	; (8003c04 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	601a      	str	r2, [r3, #0]
    }
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	370c      	adds	r7, #12
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr
 8003c04:	0802d3a8 	.word	0x0802d3a8

08003c08 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b082      	sub	sp, #8
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
    }
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f7ff ffe9 	bl	8003be8 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 8003c16:	210c      	movs	r1, #12
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	f024 fe0a 	bl	8028832 <_ZdlPvj>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4618      	mov	r0, r3
 8003c22:	3708      	adds	r7, #8
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}

08003c28 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8003c32:	4a09      	ldr	r2, [pc, #36]	; (8003c58 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	601a      	str	r2, [r3, #0]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	683a      	ldr	r2, [r7, #0]
 8003c3c:	605a      	str	r2, [r3, #4]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	721a      	strb	r2, [r3, #8]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2200      	movs	r2, #0
 8003c48:	725a      	strb	r2, [r3, #9]
    {
    }
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	370c      	adds	r7, #12
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr
 8003c58:	0802d3a8 	.word	0x0802d3a8

08003c5c <_ZN8STM32DMA10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_CHROMART type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
 8003c5c:	b480      	push	{r7}
 8003c5e:	b083      	sub	sp, #12
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
    {
        return touchgfx::DMA_TYPE_CHROMART;
 8003c64:	2301      	movs	r3, #1
    }
 8003c66:	4618      	mov	r0, r3
 8003c68:	370c      	adds	r7, #12
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr
	...

08003c74 <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b082      	sub	sp, #8
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
    {
        if(started_by_external_job)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f893 3da0 	ldrb.w	r3, [r3, #3488]	; 0xda0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d003      	beq.n	8003c8e <_ZN8STM32DMA18signalDMAInterruptEv+0x1a>
        {
            externalJobCompleted();
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f000 f88a 	bl	8003da0 <_ZN8STM32DMA20externalJobCompletedEv>
            {
                started_by_external_job = true;
                externalJobExecute();
            }
        }
    }
 8003c8c:	e022      	b.n	8003cd4 <_ZN8STM32DMA18signalDMAInterruptEv+0x60>
            executeCompleted();
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	3328      	adds	r3, #40	; 0x28
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4610      	mov	r0, r2
 8003c9a:	4798      	blx	r3
            if(!external_queue.is_empty() && !isRunning)
 8003c9c:	480f      	ldr	r0, [pc, #60]	; (8003cdc <_ZN8STM32DMA18signalDMAInterruptEv+0x68>)
 8003c9e:	f7ff fde5 	bl	800386c <_ZN20ExternalDMAJob_QueueILm2EE8is_emptyEv>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	f083 0301 	eor.w	r3, r3, #1
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d008      	beq.n	8003cc0 <_ZN8STM32DMA18signalDMAInterruptEv+0x4c>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	7a1b      	ldrb	r3, [r3, #8]
 8003cb2:	f083 0301 	eor.w	r3, r3, #1
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d001      	beq.n	8003cc0 <_ZN8STM32DMA18signalDMAInterruptEv+0x4c>
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e000      	b.n	8003cc2 <_ZN8STM32DMA18signalDMAInterruptEv+0x4e>
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d006      	beq.n	8003cd4 <_ZN8STM32DMA18signalDMAInterruptEv+0x60>
                started_by_external_job = true;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2201      	movs	r2, #1
 8003cca:	f883 2da0 	strb.w	r2, [r3, #3488]	; 0xda0
                externalJobExecute();
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f000 f890 	bl	8003df4 <_ZN8STM32DMA18externalJobExecuteEv>
    }
 8003cd4:	bf00      	nop
 8003cd6:	3708      	adds	r7, #8
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	24005f50 	.word	0x24005f50

08003ce0 <_ZN8STM32DMA5startEv>:

    virtual void start()
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b082      	sub	sp, #8
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
    {
        MUTEX_LOCK(mutexIsRunning);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f8d3 3da4 	ldr.w	r3, [r3, #3492]	; 0xda4
 8003cee:	f04f 31ff 	mov.w	r1, #4294967295
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f011 ffef 	bl	8015cd6 <osMutexAcquire>
        if (!queue.isEmpty() && isAllowed && !isRunning)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	685a      	ldr	r2, [r3, #4]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4610      	mov	r0, r2
 8003d06:	4798      	blx	r3
 8003d08:	4603      	mov	r3, r0
 8003d0a:	f083 0301 	eor.w	r3, r3, #1
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d00d      	beq.n	8003d30 <_ZN8STM32DMA5startEv+0x50>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	7a5b      	ldrb	r3, [r3, #9]
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d008      	beq.n	8003d30 <_ZN8STM32DMA5startEv+0x50>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	7a1b      	ldrb	r3, [r3, #8]
 8003d22:	f083 0301 	eor.w	r3, r3, #1
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d001      	beq.n	8003d30 <_ZN8STM32DMA5startEv+0x50>
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e000      	b.n	8003d32 <_ZN8STM32DMA5startEv+0x52>
 8003d30:	2300      	movs	r3, #0
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d00b      	beq.n	8003d4e <_ZN8STM32DMA5startEv+0x6e>
        {
            started_by_external_job = false;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f883 2da0 	strb.w	r2, [r3, #3488]	; 0xda0
            execute();
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	3324      	adds	r3, #36	; 0x24
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4610      	mov	r0, r2
 8003d4a:	4798      	blx	r3
 8003d4c:	e01b      	b.n	8003d86 <_ZN8STM32DMA5startEv+0xa6>
        }
        else if(!external_queue.is_empty() && !isRunning)
 8003d4e:	4813      	ldr	r0, [pc, #76]	; (8003d9c <_ZN8STM32DMA5startEv+0xbc>)
 8003d50:	f7ff fd8c 	bl	800386c <_ZN20ExternalDMAJob_QueueILm2EE8is_emptyEv>
 8003d54:	4603      	mov	r3, r0
 8003d56:	f083 0301 	eor.w	r3, r3, #1
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d008      	beq.n	8003d72 <_ZN8STM32DMA5startEv+0x92>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	7a1b      	ldrb	r3, [r3, #8]
 8003d64:	f083 0301 	eor.w	r3, r3, #1
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d001      	beq.n	8003d72 <_ZN8STM32DMA5startEv+0x92>
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e000      	b.n	8003d74 <_ZN8STM32DMA5startEv+0x94>
 8003d72:	2300      	movs	r3, #0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d006      	beq.n	8003d86 <_ZN8STM32DMA5startEv+0xa6>
        {
            started_by_external_job = true;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 2da0 	strb.w	r2, [r3, #3488]	; 0xda0
            externalJobExecute();
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f000 f837 	bl	8003df4 <_ZN8STM32DMA18externalJobExecuteEv>
        }
        MUTEX_UNLOCK(mutexIsRunning);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	f8d3 3da4 	ldr.w	r3, [r3, #3492]	; 0xda4
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f011 ffed 	bl	8015d6c <osMutexRelease>
    }
 8003d92:	bf00      	nop
 8003d94:	3708      	adds	r7, #8
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
 8003d9a:	bf00      	nop
 8003d9c:	24005f50 	.word	0x24005f50

08003da0 <_ZN8STM32DMA20externalJobCompletedEv>:
     *
     * @brief Handle DMA2D when an external job has been executed
     *
     * @param None
     */
    void externalJobCompleted()
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b084      	sub	sp, #16
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
    {
        if(!external_queue.is_empty() && isRunning)
 8003da8:	4811      	ldr	r0, [pc, #68]	; (8003df0 <_ZN8STM32DMA20externalJobCompletedEv+0x50>)
 8003daa:	f7ff fd5f 	bl	800386c <_ZN20ExternalDMAJob_QueueILm2EE8is_emptyEv>
 8003dae:	4603      	mov	r3, r0
 8003db0:	f083 0301 	eor.w	r3, r3, #1
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d005      	beq.n	8003dc6 <_ZN8STM32DMA20externalJobCompletedEv+0x26>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	7a1b      	ldrb	r3, [r3, #8]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d001      	beq.n	8003dc6 <_ZN8STM32DMA20externalJobCompletedEv+0x26>
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e000      	b.n	8003dc8 <_ZN8STM32DMA20externalJobCompletedEv+0x28>
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d00c      	beq.n	8003de6 <_ZN8STM32DMA20externalJobCompletedEv+0x46>
        {
            isRunning = false;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	721a      	strb	r2, [r3, #8]
            External_DMA2D_JobTypeDef& completed_job = external_queue.front();
 8003dd2:	4807      	ldr	r0, [pc, #28]	; (8003df0 <_ZN8STM32DMA20externalJobCompletedEv+0x50>)
 8003dd4:	f000 fb4c 	bl	8004470 <_ZN20ExternalDMAJob_QueueILm2EE5frontEv>
 8003dd8:	60f8      	str	r0, [r7, #12]
            external_queue.pop();
 8003dda:	4805      	ldr	r0, [pc, #20]	; (8003df0 <_ZN8STM32DMA20externalJobCompletedEv+0x50>)
 8003ddc:	f000 fb58 	bl	8004490 <_ZN20ExternalDMAJob_QueueILm2EE3popEv>
            DMA2D_ExternalJobCompleted(completed_job);
 8003de0:	68f8      	ldr	r0, [r7, #12]
 8003de2:	f7ff fd0d 	bl	8003800 <DMA2D_ExternalJobCompleted>
        }
    }
 8003de6:	bf00      	nop
 8003de8:	3710      	adds	r7, #16
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	bf00      	nop
 8003df0:	24005f50 	.word	0x24005f50

08003df4 <_ZN8STM32DMA18externalJobExecuteEv>:
     *
     * @brief Executes an external DMA2D job
     *
     * @param None
     */
    void externalJobExecute()
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b084      	sub	sp, #16
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
    {
        isRunning = true;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	721a      	strb	r2, [r3, #8]
        External_DMA2D_JobTypeDef& job = external_queue.front();
 8003e02:	4805      	ldr	r0, [pc, #20]	; (8003e18 <_ZN8STM32DMA18externalJobExecuteEv+0x24>)
 8003e04:	f000 fb34 	bl	8004470 <_ZN20ExternalDMAJob_QueueILm2EE5frontEv>
 8003e08:	60f8      	str	r0, [r7, #12]
        DMA2D_CopyBuffer(job);
 8003e0a:	68f8      	ldr	r0, [r7, #12]
 8003e0c:	f7ff fc88 	bl	8003720 <DMA2D_CopyBuffer>
    }
 8003e10:	bf00      	nop
 8003e12:	3710      	adds	r7, #16
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}
 8003e18:	24005f50 	.word	0x24005f50

08003e1c <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b082      	sub	sp, #8
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	685a      	ldr	r2, [r3, #4]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	3314      	adds	r3, #20
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4610      	mov	r0, r2
 8003e34:	4798      	blx	r3
    }
 8003e36:	bf00      	nop
 8003e38:	3708      	adds	r7, #8
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}

08003e3e <DMA2D_XferCpltCallback>:

extern "C" DMA2D_HandleTypeDef hdma2d;

extern "C" {
    static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
    {
 8003e3e:	b580      	push	{r7, lr}
 8003e40:	b082      	sub	sp, #8
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	6078      	str	r0, [r7, #4]
        (void)handle; // Unused argument
        HAL::getInstance()->signalDMAInterrupt();
 8003e46:	f7fe f919 	bl	800207c <_ZN8touchgfx3HAL11getInstanceEv>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f7ff ffe5 	bl	8003e1c <_ZN8touchgfx3HAL18signalDMAInterruptEv>
    }
 8003e52:	bf00      	nop
 8003e54:	3708      	adds	r7, #8
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}

08003e5a <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 8003e5a:	b580      	push	{r7, lr}
 8003e5c:	b082      	sub	sp, #8
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	6078      	str	r0, [r7, #4]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	330c      	adds	r3, #12
 8003e66:	4618      	mov	r0, r3
 8003e68:	f7ff fe76 	bl	8003b58 <_ZN8touchgfx9colortypeC1Ev>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3708      	adds	r7, #8
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}
	...

08003e78 <_ZN8STM32DMAC1Ev>:
}

STM32DMA::STM32DMA()
 8003e78:	b5b0      	push	{r4, r5, r7, lr}
 8003e7a:	b082      	sub	sp, #8
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0])), started_by_external_job(false), mutexIsRunning(0)
 8003e80:	687a      	ldr	r2, [r7, #4]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	330c      	adds	r3, #12
 8003e86:	4619      	mov	r1, r3
 8003e88:	4610      	mov	r0, r2
 8003e8a:	f7ff fecd 	bl	8003c28 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 8003e8e:	4a16      	ldr	r2, [pc, #88]	; (8003ee8 <_ZN8STM32DMAC1Ev+0x70>)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	601a      	str	r2, [r3, #0]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f103 000c 	add.w	r0, r3, #12
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	3320      	adds	r3, #32
 8003e9e:	2260      	movs	r2, #96	; 0x60
 8003ea0:	4619      	mov	r1, r3
 8003ea2:	f017 fa61 	bl	801b368 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	3320      	adds	r3, #32
 8003eaa:	245f      	movs	r4, #95	; 0x5f
 8003eac:	461d      	mov	r5, r3
 8003eae:	2c00      	cmp	r4, #0
 8003eb0:	db05      	blt.n	8003ebe <_ZN8STM32DMAC1Ev+0x46>
 8003eb2:	4628      	mov	r0, r5
 8003eb4:	f7ff ffd1 	bl	8003e5a <_ZN8touchgfx6BlitOpC1Ev>
 8003eb8:	3524      	adds	r5, #36	; 0x24
 8003eba:	3c01      	subs	r4, #1
 8003ebc:	e7f7      	b.n	8003eae <_ZN8STM32DMAC1Ev+0x36>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	f883 2da0 	strb.w	r2, [r3, #3488]	; 0xda0
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f8c3 2da4 	str.w	r2, [r3, #3492]	; 0xda4
{
    mutexIsRunning = MUTEX_CREATE();
 8003ece:	2000      	movs	r0, #0
 8003ed0:	f011 fe7b 	bl	8015bca <osMutexNew>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	f8c3 2da4 	str.w	r2, [r3, #3492]	; 0xda4
}
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3708      	adds	r7, #8
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bdb0      	pop	{r4, r5, r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	0802c108 	.word	0x0802c108

08003eec <_ZN8STM32DMAD1Ev>:

STM32DMA::~STM32DMA()
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b082      	sub	sp, #8
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
 8003ef4:	4a09      	ldr	r2, [pc, #36]	; (8003f1c <_ZN8STM32DMAD1Ev+0x30>)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	601a      	str	r2, [r3, #0]
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
 8003efa:	205a      	movs	r0, #90	; 0x5a
 8003efc:	f7ff fe08 	bl	8003b10 <__NVIC_DisableIRQ>
STM32DMA::~STM32DMA()
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	330c      	adds	r3, #12
 8003f04:	4618      	mov	r0, r3
 8003f06:	f000 fadf 	bl	80044c8 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f7ff fe6b 	bl	8003be8 <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4618      	mov	r0, r3
 8003f16:	3708      	adds	r7, #8
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}
 8003f1c:	0802c108 	.word	0x0802c108

08003f20 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b082      	sub	sp, #8
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
}
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f7ff ffdf 	bl	8003eec <_ZN8STM32DMAD1Ev>
 8003f2e:	f640 51a8 	movw	r1, #3496	; 0xda8
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f024 fc7d 	bl	8028832 <_ZdlPvj>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3708      	adds	r7, #8
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}
	...

08003f44 <_ZN8STM32DMA10initializeEv>:

void STM32DMA::initialize()
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b084      	sub	sp, #16
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8003f4c:	4b12      	ldr	r3, [pc, #72]	; (8003f98 <_ZN8STM32DMA10initializeEv+0x54>)
 8003f4e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8003f52:	4a11      	ldr	r2, [pc, #68]	; (8003f98 <_ZN8STM32DMA10initializeEv+0x54>)
 8003f54:	f043 0310 	orr.w	r3, r3, #16
 8003f58:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 8003f5c:	4b0e      	ldr	r3, [pc, #56]	; (8003f98 <_ZN8STM32DMA10initializeEv+0x54>)
 8003f5e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8003f62:	f003 0310 	and.w	r3, r3, #16
 8003f66:	60fb      	str	r3, [r7, #12]
 8003f68:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8003f6a:	4b0b      	ldr	r3, [pc, #44]	; (8003f98 <_ZN8STM32DMA10initializeEv+0x54>)
 8003f6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f6e:	4a0a      	ldr	r2, [pc, #40]	; (8003f98 <_ZN8STM32DMA10initializeEv+0x54>)
 8003f70:	f043 0310 	orr.w	r3, r3, #16
 8003f74:	67d3      	str	r3, [r2, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8003f76:	4b08      	ldr	r3, [pc, #32]	; (8003f98 <_ZN8STM32DMA10initializeEv+0x54>)
 8003f78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f7a:	4a07      	ldr	r2, [pc, #28]	; (8003f98 <_ZN8STM32DMA10initializeEv+0x54>)
 8003f7c:	f023 0310 	bic.w	r3, r3, #16
 8003f80:	67d3      	str	r3, [r2, #124]	; 0x7c

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8003f82:	4b06      	ldr	r3, [pc, #24]	; (8003f9c <_ZN8STM32DMA10initializeEv+0x58>)
 8003f84:	4a06      	ldr	r2, [pc, #24]	; (8003fa0 <_ZN8STM32DMA10initializeEv+0x5c>)
 8003f86:	621a      	str	r2, [r3, #32]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
 8003f88:	205a      	movs	r0, #90	; 0x5a
 8003f8a:	f7ff fda3 	bl	8003ad4 <__NVIC_EnableIRQ>
}
 8003f8e:	bf00      	nop
 8003f90:	3710      	adds	r7, #16
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	58024400 	.word	0x58024400
 8003f9c:	24005b68 	.word	0x24005b68
 8003fa0:	08003e3f 	.word	0x08003e3f

08003fa4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b084      	sub	sp, #16
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	460b      	mov	r3, r1
 8003fae:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	60fb      	str	r3, [r7, #12]

    switch (format)
 8003fb4:	78fb      	ldrb	r3, [r7, #3]
 8003fb6:	2b0b      	cmp	r3, #11
 8003fb8:	d826      	bhi.n	8004008 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x64>
 8003fba:	a201      	add	r2, pc, #4	; (adr r2, 8003fc0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 8003fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fc0:	08003ffd 	.word	0x08003ffd
 8003fc4:	08003ff7 	.word	0x08003ff7
 8003fc8:	08003ff1 	.word	0x08003ff1
 8003fcc:	08004009 	.word	0x08004009
 8003fd0:	08004009 	.word	0x08004009
 8003fd4:	08004009 	.word	0x08004009
 8003fd8:	08004009 	.word	0x08004009
 8003fdc:	08004003 	.word	0x08004003
 8003fe0:	08004003 	.word	0x08004003
 8003fe4:	08004003 	.word	0x08004003
 8003fe8:	08004003 	.word	0x08004003
 8003fec:	08004003 	.word	0x08004003
    {
    case Bitmap::ARGB8888: /* DMA2D input mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	60fb      	str	r3, [r7, #12]
        break;
 8003ff4:	e00e      	b.n	8004014 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB888: /* DMA2D input mode set to 24bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB888;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	60fb      	str	r3, [r7, #12]
        break;
 8003ffa:	e00b      	b.n	8004014 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB565: /* DMA2D input mode set to 16bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8003ffc:	2302      	movs	r3, #2
 8003ffe:	60fb      	str	r3, [r7, #12]
        break;
 8004000:	e008      	b.n	8004014 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* Fall through */
    case Bitmap::L8:       /* DMA2D input mode set to 8bit Color Look up table*/
        dma2dColorMode = DMA2D_INPUT_L8;
 8004002:	2305      	movs	r3, #5
 8004004:	60fb      	str	r3, [r7, #12]
        break;
 8004006:	e005      	b.n	8004014 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported input format for DMA2D */
        assert(0 && "Unsupported Format!");
 8004008:	4b05      	ldr	r3, [pc, #20]	; (8004020 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x7c>)
 800400a:	4a06      	ldr	r2, [pc, #24]	; (8004024 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x80>)
 800400c:	2167      	movs	r1, #103	; 0x67
 800400e:	4806      	ldr	r0, [pc, #24]	; (8004028 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x84>)
 8004010:	f024 fc3e 	bl	8028890 <__assert_func>
        break;
    }

    return dma2dColorMode;
 8004014:	68fb      	ldr	r3, [r7, #12]
}
 8004016:	4618      	mov	r0, r3
 8004018:	3710      	adds	r7, #16
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
 800401e:	bf00      	nop
 8004020:	0802a01c 	.word	0x0802a01c
 8004024:	0802a038 	.word	0x0802a038
 8004028:	0802a084 	.word	0x0802a084

0800402c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b084      	sub	sp, #16
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	460b      	mov	r3, r1
 8004036:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8004038:	2300      	movs	r3, #0
 800403a:	60fb      	str	r3, [r7, #12]

    switch (format)
 800403c:	78fb      	ldrb	r3, [r7, #3]
 800403e:	2b0a      	cmp	r3, #10
 8004040:	d821      	bhi.n	8004086 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x5a>
 8004042:	a201      	add	r2, pc, #4	; (adr r2, 8004048 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 8004044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004048:	08004081 	.word	0x08004081
 800404c:	0800407b 	.word	0x0800407b
 8004050:	08004075 	.word	0x08004075
 8004054:	08004087 	.word	0x08004087
 8004058:	08004087 	.word	0x08004087
 800405c:	08004087 	.word	0x08004087
 8004060:	08004087 	.word	0x08004087
 8004064:	0800407b 	.word	0x0800407b
 8004068:	0800407b 	.word	0x0800407b
 800406c:	0800407b 	.word	0x0800407b
 8004070:	0800407b 	.word	0x0800407b
    {
    case Bitmap::ARGB8888: /* DMA2D output mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8004074:	2300      	movs	r3, #0
 8004076:	60fb      	str	r3, [r7, #12]
        break;
 8004078:	e00b      	b.n	8004092 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB888:   /* Fall through */
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* DMA2D output mode set to 24bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 800407a:	2301      	movs	r3, #1
 800407c:	60fb      	str	r3, [r7, #12]
        break;
 800407e:	e008      	b.n	8004092 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB565: /* DMA2D output mode set to 16bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8004080:	2302      	movs	r3, #2
 8004082:	60fb      	str	r3, [r7, #12]
        break;
 8004084:	e005      	b.n	8004092 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported output format for DMA2D */
        assert(0 && "Unsupported Format!");
 8004086:	4b05      	ldr	r3, [pc, #20]	; (800409c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>)
 8004088:	4a05      	ldr	r2, [pc, #20]	; (80040a0 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x74>)
 800408a:	2188      	movs	r1, #136	; 0x88
 800408c:	4805      	ldr	r0, [pc, #20]	; (80040a4 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x78>)
 800408e:	f024 fbff 	bl	8028890 <__assert_func>
        break;
    }

    return dma2dColorMode;
 8004092:	68fb      	ldr	r3, [r7, #12]
}
 8004094:	4618      	mov	r0, r3
 8004096:	3710      	adds	r7, #16
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}
 800409c:	0802a01c 	.word	0x0802a01c
 80040a0:	0802a0ec 	.word	0x0802a0ec
 80040a4:	0802a084 	.word	0x0802a084

080040a8 <_ZN8STM32DMA11getBlitCapsEv>:

BlitOperations STM32DMA::getBlitCaps()
{
 80040a8:	b480      	push	{r7}
 80040aa:	b083      	sub	sp, #12
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
                                       | BLIT_OP_COPY_L8
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
 80040b0:	f240 33ef 	movw	r3, #1007	; 0x3ef
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	370c      	adds	r7, #12
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr

080040c0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 80040c0:	b590      	push	{r4, r7, lr}
 80040c2:	b089      	sub	sp, #36	; 0x24
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	6039      	str	r1, [r7, #0]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	7f5b      	ldrb	r3, [r3, #29]
 80040ce:	4619      	mov	r1, r3
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	f7ff ff67 	bl	8003fa4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 80040d6:	61b8      	str	r0, [r7, #24]
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	7f9b      	ldrb	r3, [r3, #30]
 80040dc:	4619      	mov	r1, r3
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f7ff ff60 	bl	8003fa4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 80040e4:	6178      	str	r0, [r7, #20]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	7f9b      	ldrb	r3, [r3, #30]
 80040ea:	4619      	mov	r1, r3
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f7ff ff9d 	bl	800402c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 80040f2:	6138      	str	r0, [r7, #16]

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	8b5b      	ldrh	r3, [r3, #26]
 80040f8:	461a      	mov	r2, r3
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	8a9b      	ldrh	r3, [r3, #20]
 80040fe:	1ad2      	subs	r2, r2, r3
 8004100:	4b92      	ldr	r3, [pc, #584]	; (800434c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8004102:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration */
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	8b5b      	ldrh	r3, [r3, #26]
 8004108:	461a      	mov	r2, r3
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	8a9b      	ldrh	r3, [r3, #20]
 800410e:	1ad2      	subs	r2, r2, r3
 8004110:	4b8e      	ldr	r3, [pc, #568]	; (800434c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8004112:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration */
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	8b1b      	ldrh	r3, [r3, #24]
 8004118:	461a      	mov	r2, r3
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	8a9b      	ldrh	r3, [r3, #20]
 800411e:	1ad2      	subs	r2, r2, r3
 8004120:	4b8a      	ldr	r3, [pc, #552]	; (800434c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8004122:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8004124:	4a89      	ldr	r2, [pc, #548]	; (800434c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	8adb      	ldrh	r3, [r3, #22]
 800412e:	461a      	mov	r2, r3
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	8a9b      	ldrh	r3, [r3, #20]
 8004134:	041b      	lsls	r3, r3, #16
 8004136:	431a      	orrs	r2, r3
 8004138:	4b84      	ldr	r3, [pc, #528]	; (800434c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800413a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	691a      	ldr	r2, [r3, #16]
 8004140:	4b82      	ldr	r3, [pc, #520]	; (800434c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8004142:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	685a      	ldr	r2, [r3, #4]
 8004148:	4b80      	ldr	r3, [pc, #512]	; (800434c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800414a:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004154:	d037      	beq.n	80041c6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
 8004156:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800415a:	f200 80e3 	bhi.w	8004324 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x264>
 800415e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004162:	d015      	beq.n	8004190 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 8004164:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004168:	f200 80dc 	bhi.w	8004324 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x264>
 800416c:	2b80      	cmp	r3, #128	; 0x80
 800416e:	d045      	beq.n	80041fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13c>
 8004170:	2b80      	cmp	r3, #128	; 0x80
 8004172:	f200 80d7 	bhi.w	8004324 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x264>
 8004176:	2b40      	cmp	r3, #64	; 0x40
 8004178:	f000 80bf 	beq.w	80042fa <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x23a>
 800417c:	2b40      	cmp	r3, #64	; 0x40
 800417e:	f200 80d1 	bhi.w	8004324 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x264>
 8004182:	2b04      	cmp	r3, #4
 8004184:	f000 80a4 	beq.w	80042d0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x210>
 8004188:	2b20      	cmp	r3, #32
 800418a:	f000 80b6 	beq.w	80042fa <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x23a>
 800418e:	e0c9      	b.n	8004324 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x264>
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	7f1b      	ldrb	r3, [r3, #28]
 8004194:	061b      	lsls	r3, r3, #24
 8004196:	4619      	mov	r1, r3
 8004198:	4a6c      	ldr	r2, [pc, #432]	; (800434c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800419a:	4b6d      	ldr	r3, [pc, #436]	; (8004350 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 800419c:	430b      	orrs	r3, r1
 800419e:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	330c      	adds	r3, #12
 80041a4:	4c69      	ldr	r4, [pc, #420]	; (800434c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80041a6:	4618      	mov	r0, r3
 80041a8:	f7ff fce4 	bl	8003b74 <_ZNK8touchgfx9colortypecvmEv>
 80041ac:	4603      	mov	r3, r0
 80041ae:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80041b0:	4a66      	ldr	r2, [pc, #408]	; (800434c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	691a      	ldr	r2, [r3, #16]
 80041ba:	4b64      	ldr	r3, [pc, #400]	; (800434c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80041bc:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 80041be:	4b63      	ldr	r3, [pc, #396]	; (800434c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80041c0:	4a64      	ldr	r2, [pc, #400]	; (8004354 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 80041c2:	601a      	str	r2, [r3, #0]
        break;
 80041c4:	e0d9      	b.n	800437a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_A8:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	7f1b      	ldrb	r3, [r3, #28]
 80041ca:	061b      	lsls	r3, r3, #24
 80041cc:	4619      	mov	r1, r3
 80041ce:	4a5f      	ldr	r2, [pc, #380]	; (800434c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80041d0:	4b61      	ldr	r3, [pc, #388]	; (8004358 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80041d2:	430b      	orrs	r3, r1
 80041d4:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	330c      	adds	r3, #12
 80041da:	4c5c      	ldr	r4, [pc, #368]	; (800434c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80041dc:	4618      	mov	r0, r3
 80041de:	f7ff fcc9 	bl	8003b74 <_ZNK8touchgfx9colortypecvmEv>
 80041e2:	4603      	mov	r3, r0
 80041e4:	6223      	str	r3, [r4, #32]
        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80041e6:	4a59      	ldr	r2, [pc, #356]	; (800434c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	691a      	ldr	r2, [r3, #16]
 80041f0:	4b56      	ldr	r3, [pc, #344]	; (800434c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80041f2:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 80041f4:	4b55      	ldr	r3, [pc, #340]	; (800434c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80041f6:	4a57      	ldr	r2, [pc, #348]	; (8004354 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 80041f8:	601a      	str	r2, [r3, #0]
        break;
 80041fa:	e0be      	b.n	800437a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_L8:
        {
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	60fb      	str	r3, [r7, #12]
            bool blend = true;
 8004202:	2301      	movs	r3, #1
 8004204:	77fb      	strb	r3, [r7, #31]

            /* Set DMA2D color mode and alpha mode */
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	7f1b      	ldrb	r3, [r3, #28]
 800420a:	061b      	lsls	r3, r3, #24
 800420c:	461a      	mov	r2, r3
 800420e:	69bb      	ldr	r3, [r7, #24]
 8004210:	4313      	orrs	r3, r2
 8004212:	4a4e      	ldr	r2, [pc, #312]	; (800434c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8004214:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004218:	61d3      	str	r3, [r2, #28]

            /* Write DMA2D BGPFCCR register */
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800421a:	4a4c      	ldr	r2, [pc, #304]	; (800434c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	6253      	str	r3, [r2, #36]	; 0x24

            /* Configure DMA2D Stream source2 address */
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	691a      	ldr	r2, [r3, #16]
 8004224:	4b49      	ldr	r3, [pc, #292]	; (800434c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8004226:	615a      	str	r2, [r3, #20]

            /* Write foreground CLUT memory address */
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	1d1a      	adds	r2, r3, #4
 800422c:	4b47      	ldr	r3, [pc, #284]	; (800434c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800422e:	62da      	str	r2, [r3, #44]	; 0x2c

            switch ((Bitmap::ClutFormat)palette->format)
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	881b      	ldrh	r3, [r3, #0]
 8004234:	b2db      	uxtb	r3, r3
 8004236:	2b00      	cmp	r3, #0
 8004238:	d002      	beq.n	8004240 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x180>
 800423a:	2b01      	cmp	r3, #1
 800423c:	d00d      	beq.n	800425a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x19a>
 800423e:	e020      	b.n	8004282 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c2>
            {
            case Bitmap::CLUT_FORMAT_L8_ARGB8888:
                /* Write foreground CLUT size and CLUT color mode */
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8004240:	4b42      	ldr	r3, [pc, #264]	; (800434c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8004242:	69da      	ldr	r2, [r3, #28]
 8004244:	4b45      	ldr	r3, [pc, #276]	; (800435c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8004246:	4013      	ands	r3, r2
 8004248:	68fa      	ldr	r2, [r7, #12]
 800424a:	8852      	ldrh	r2, [r2, #2]
 800424c:	3a01      	subs	r2, #1
 800424e:	0212      	lsls	r2, r2, #8
 8004250:	4611      	mov	r1, r2
 8004252:	4a3e      	ldr	r2, [pc, #248]	; (800434c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8004254:	430b      	orrs	r3, r1
 8004256:	61d3      	str	r3, [r2, #28]
                break;
 8004258:	e01a      	b.n	8004290 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d0>
            case Bitmap::CLUT_FORMAT_L8_RGB888:
                if(blitOp.alpha == 255)
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	7f1b      	ldrb	r3, [r3, #28]
 800425e:	2bff      	cmp	r3, #255	; 0xff
 8004260:	d101      	bne.n	8004266 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a6>
                {
                    blend = false;
 8004262:	2300      	movs	r3, #0
 8004264:	77fb      	strb	r3, [r7, #31]
                }
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8004266:	4b39      	ldr	r3, [pc, #228]	; (800434c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8004268:	69da      	ldr	r2, [r3, #28]
 800426a:	4b3c      	ldr	r3, [pc, #240]	; (800435c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800426c:	4013      	ands	r3, r2
 800426e:	68fa      	ldr	r2, [r7, #12]
 8004270:	8852      	ldrh	r2, [r2, #2]
 8004272:	3a01      	subs	r2, #1
 8004274:	0212      	lsls	r2, r2, #8
 8004276:	4313      	orrs	r3, r2
 8004278:	4a34      	ldr	r2, [pc, #208]	; (800434c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800427a:	f043 0310 	orr.w	r3, r3, #16
 800427e:	61d3      	str	r3, [r2, #28]
                break;
 8004280:	e006      	b.n	8004290 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d0>
            case Bitmap::CLUT_FORMAT_L8_RGB565:
            default:
                assert(0 && "Unsupported format");
 8004282:	4b37      	ldr	r3, [pc, #220]	; (8004360 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8004284:	4a37      	ldr	r2, [pc, #220]	; (8004364 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8004286:	f44f 7181 	mov.w	r1, #258	; 0x102
 800428a:	4837      	ldr	r0, [pc, #220]	; (8004368 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 800428c:	f024 fb00 	bl	8028890 <__assert_func>
                break;
            }

            /* Enable the CLUT loading for the foreground */
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8004290:	4b2e      	ldr	r3, [pc, #184]	; (800434c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8004292:	69db      	ldr	r3, [r3, #28]
 8004294:	4a2d      	ldr	r2, [pc, #180]	; (800434c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8004296:	f043 0320 	orr.w	r3, r3, #32
 800429a:	61d3      	str	r3, [r2, #28]

            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 800429c:	4b2b      	ldr	r3, [pc, #172]	; (800434c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800429e:	69db      	ldr	r3, [r3, #28]
 80042a0:	f003 0320 	and.w	r3, r3, #32
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	bf14      	ite	ne
 80042a8:	2301      	movne	r3, #1
 80042aa:	2300      	moveq	r3, #0
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d000      	beq.n	80042b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f4>
 80042b2:	e7f3      	b.n	800429c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1dc>
            {
            }
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 80042b4:	4b25      	ldr	r3, [pc, #148]	; (800434c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80042b6:	2210      	movs	r2, #16
 80042b8:	609a      	str	r2, [r3, #8]

            /* Set DMA2D mode */
            if(blend)
 80042ba:	7ffb      	ldrb	r3, [r7, #31]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d003      	beq.n	80042c8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x208>
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 80042c0:	4b22      	ldr	r3, [pc, #136]	; (800434c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80042c2:	4a24      	ldr	r2, [pc, #144]	; (8004354 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 80042c4:	601a      	str	r2, [r3, #0]
            else
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
            }
        }
        break;
 80042c6:	e058      	b.n	800437a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 80042c8:	4b20      	ldr	r3, [pc, #128]	; (800434c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80042ca:	4a28      	ldr	r2, [pc, #160]	; (800436c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 80042cc:	601a      	str	r2, [r3, #0]
        break;
 80042ce:	e054      	b.n	800437a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	7f1b      	ldrb	r3, [r3, #28]
 80042d4:	061b      	lsls	r3, r3, #24
 80042d6:	461a      	mov	r2, r3
 80042d8:	69bb      	ldr	r3, [r7, #24]
 80042da:	4313      	orrs	r3, r2
 80042dc:	4a1b      	ldr	r2, [pc, #108]	; (800434c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80042de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042e2:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80042e4:	4a19      	ldr	r2, [pc, #100]	; (800434c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	691a      	ldr	r2, [r3, #16]
 80042ee:	4b17      	ldr	r3, [pc, #92]	; (800434c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80042f0:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 80042f2:	4b16      	ldr	r3, [pc, #88]	; (800434c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80042f4:	4a17      	ldr	r2, [pc, #92]	; (8004354 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 80042f6:	601a      	str	r2, [r3, #0]
        break;
 80042f8:	e03f      	b.n	800437a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	7f1b      	ldrb	r3, [r3, #28]
 80042fe:	061b      	lsls	r3, r3, #24
 8004300:	461a      	mov	r2, r3
 8004302:	69bb      	ldr	r3, [r7, #24]
 8004304:	4313      	orrs	r3, r2
 8004306:	4a11      	ldr	r2, [pc, #68]	; (800434c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8004308:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800430c:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800430e:	4a0f      	ldr	r2, [pc, #60]	; (800434c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	691a      	ldr	r2, [r3, #16]
 8004318:	4b0c      	ldr	r3, [pc, #48]	; (800434c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800431a:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 800431c:	4b0b      	ldr	r3, [pc, #44]	; (800434c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800431e:	4a0d      	ldr	r2, [pc, #52]	; (8004354 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8004320:	601a      	str	r2, [r3, #0]
        break;
 8004322:	e02a      	b.n	800437a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	7f1b      	ldrb	r3, [r3, #28]
 8004328:	061b      	lsls	r3, r3, #24
 800432a:	461a      	mov	r2, r3
 800432c:	69bb      	ldr	r3, [r7, #24]
 800432e:	4313      	orrs	r3, r2
 8004330:	4a06      	ldr	r2, [pc, #24]	; (800434c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8004332:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004336:	61d3      	str	r3, [r2, #28]

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	7f5a      	ldrb	r2, [r3, #29]
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	7f9b      	ldrb	r3, [r3, #30]
 8004340:	429a      	cmp	r2, r3
 8004342:	d015      	beq.n	8004370 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b0>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8004344:	4b01      	ldr	r3, [pc, #4]	; (800434c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8004346:	4a09      	ldr	r2, [pc, #36]	; (800436c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 8004348:	601a      	str	r2, [r3, #0]
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
        }

        break;
 800434a:	e015      	b.n	8004378 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b8>
 800434c:	52001000 	.word	0x52001000
 8004350:	0002000a 	.word	0x0002000a
 8004354:	00020201 	.word	0x00020201
 8004358:	00020009 	.word	0x00020009
 800435c:	ffff00ef 	.word	0xffff00ef
 8004360:	0802a138 	.word	0x0802a138
 8004364:	0802a154 	.word	0x0802a154
 8004368:	0802a084 	.word	0x0802a084
 800436c:	00010201 	.word	0x00010201
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8004370:	4b04      	ldr	r3, [pc, #16]	; (8004384 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c4>)
 8004372:	f240 2201 	movw	r2, #513	; 0x201
 8004376:	601a      	str	r2, [r3, #0]
        break;
 8004378:	bf00      	nop
    }
}
 800437a:	bf00      	nop
 800437c:	3724      	adds	r7, #36	; 0x24
 800437e:	46bd      	mov	sp, r7
 8004380:	bd90      	pop	{r4, r7, pc}
 8004382:	bf00      	nop
 8004384:	52001000 	.word	0x52001000

08004388 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8004388:	b590      	push	{r4, r7, lr}
 800438a:	b085      	sub	sp, #20
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	6039      	str	r1, [r7, #0]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	7f9b      	ldrb	r3, [r3, #30]
 8004396:	4619      	mov	r1, r3
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	f7ff fe47 	bl	800402c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 800439e:	60f8      	str	r0, [r7, #12]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 80043a0:	4a2f      	ldr	r2, [pc, #188]	; (8004460 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	8adb      	ldrh	r3, [r3, #22]
 80043aa:	461a      	mov	r2, r3
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	8a9b      	ldrh	r3, [r3, #20]
 80043b0:	041b      	lsls	r3, r3, #16
 80043b2:	431a      	orrs	r2, r3
 80043b4:	4b2a      	ldr	r3, [pc, #168]	; (8004460 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 80043b6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	691a      	ldr	r2, [r3, #16]
 80043bc:	4b28      	ldr	r3, [pc, #160]	; (8004460 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 80043be:	63da      	str	r2, [r3, #60]	; 0x3c

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	8b5b      	ldrh	r3, [r3, #26]
 80043c4:	461a      	mov	r2, r3
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	8a9b      	ldrh	r3, [r3, #20]
 80043ca:	1ad2      	subs	r2, r2, r3
 80043cc:	4b24      	ldr	r3, [pc, #144]	; (8004460 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 80043ce:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	2b08      	cmp	r3, #8
 80043d6:	d12e      	bne.n	8004436 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xae>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	8b5b      	ldrh	r3, [r3, #26]
 80043dc:	461a      	mov	r2, r3
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	8a9b      	ldrh	r3, [r3, #20]
 80043e2:	1ad2      	subs	r2, r2, r3
 80043e4:	4b1e      	ldr	r3, [pc, #120]	; (8004460 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 80043e6:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	8b5b      	ldrh	r3, [r3, #26]
 80043ec:	461a      	mov	r2, r3
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	8a9b      	ldrh	r3, [r3, #20]
 80043f2:	1ad2      	subs	r2, r2, r3
 80043f4:	4b1a      	ldr	r3, [pc, #104]	; (8004460 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 80043f6:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80043f8:	4a19      	ldr	r2, [pc, #100]	; (8004460 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	6253      	str	r3, [r2, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	7f1b      	ldrb	r3, [r3, #28]
 8004402:	061b      	lsls	r3, r3, #24
 8004404:	4619      	mov	r1, r3
 8004406:	4a16      	ldr	r2, [pc, #88]	; (8004460 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8004408:	4b16      	ldr	r3, [pc, #88]	; (8004464 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xdc>)
 800440a:	430b      	orrs	r3, r1
 800440c:	61d3      	str	r3, [r2, #28]

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	330c      	adds	r3, #12
 8004412:	4c13      	ldr	r4, [pc, #76]	; (8004460 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8004414:	4618      	mov	r0, r3
 8004416:	f7ff fbad 	bl	8003b74 <_ZNK8touchgfx9colortypecvmEv>
 800441a:	4603      	mov	r3, r0
 800441c:	6223      	str	r3, [r4, #32]

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	691a      	ldr	r2, [r3, #16]
 8004422:	4b0f      	ldr	r3, [pc, #60]	; (8004460 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8004424:	615a      	str	r2, [r3, #20]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	691a      	ldr	r2, [r3, #16]
 800442a:	4b0d      	ldr	r3, [pc, #52]	; (8004460 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800442c:	60da      	str	r2, [r3, #12]

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 800442e:	4b0c      	ldr	r3, [pc, #48]	; (8004460 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8004430:	4a0d      	ldr	r2, [pc, #52]	; (8004468 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe0>)
 8004432:	601a      	str	r2, [r3, #0]
        WRITE_REG(DMA2D->OCOLR, blitOp.color);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
    }
}
 8004434:	e010      	b.n	8004458 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd0>
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8004436:	4a0a      	ldr	r2, [pc, #40]	; (8004460 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 800443c:	4b08      	ldr	r3, [pc, #32]	; (8004460 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800443e:	2200      	movs	r2, #0
 8004440:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->OCOLR, blitOp.color);
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	330c      	adds	r3, #12
 8004446:	4c06      	ldr	r4, [pc, #24]	; (8004460 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8004448:	4618      	mov	r0, r3
 800444a:	f7ff fb93 	bl	8003b74 <_ZNK8touchgfx9colortypecvmEv>
 800444e:	4603      	mov	r3, r0
 8004450:	63a3      	str	r3, [r4, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8004452:	4b03      	ldr	r3, [pc, #12]	; (8004460 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8004454:	4a05      	ldr	r2, [pc, #20]	; (800446c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe4>)
 8004456:	601a      	str	r2, [r3, #0]
}
 8004458:	bf00      	nop
 800445a:	3714      	adds	r7, #20
 800445c:	46bd      	mov	sp, r7
 800445e:	bd90      	pop	{r4, r7, pc}
 8004460:	52001000 	.word	0x52001000
 8004464:	00010009 	.word	0x00010009
 8004468:	00020201 	.word	0x00020201
 800446c:	00030201 	.word	0x00030201

08004470 <_ZN20ExternalDMAJob_QueueILm2EE5frontEv>:
  External_DMA2D_JobTypeDef& front()
 8004470:	b480      	push	{r7}
 8004472:	b083      	sub	sp, #12
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
      return buffer_[head_];
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	3302      	adds	r3, #2
 800447e:	00db      	lsls	r3, r3, #3
 8004480:	687a      	ldr	r2, [r7, #4]
 8004482:	4413      	add	r3, r2
  }
 8004484:	4618      	mov	r0, r3
 8004486:	370c      	adds	r7, #12
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr

08004490 <_ZN20ExternalDMAJob_QueueILm2EE3popEv>:
  void pop()
 8004490:	b480      	push	{r7}
 8004492:	b083      	sub	sp, #12
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
      head_ = (head_ + 1) % max_size_;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	3301      	adds	r3, #1
 800449e:	687a      	ldr	r2, [r7, #4]
 80044a0:	6812      	ldr	r2, [r2, #0]
 80044a2:	fbb3 f1f2 	udiv	r1, r3, r2
 80044a6:	fb01 f202 	mul.w	r2, r1, r2
 80044aa:	1a9a      	subs	r2, r3, r2
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	605a      	str	r2, [r3, #4]
      count_--;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	68db      	ldr	r3, [r3, #12]
 80044b4:	1e5a      	subs	r2, r3, #1
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	60da      	str	r2, [r3, #12]
  }
 80044ba:	bf00      	nop
 80044bc:	370c      	adds	r7, #12
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr
	...

080044c8 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b082      	sub	sp, #8
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	4a05      	ldr	r2, [pc, #20]	; (80044e8 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	601a      	str	r2, [r3, #0]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	4618      	mov	r0, r3
 80044da:	f7ff fb57 	bl	8003b8c <_ZN8touchgfx9DMA_QueueD1Ev>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	4618      	mov	r0, r3
 80044e2:	3708      	adds	r7, #8
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}
 80044e8:	0802d3f8 	.word	0x0802d3f8

080044ec <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b082      	sub	sp, #8
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f7ff ffe7 	bl	80044c8 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 80044fa:	2114      	movs	r1, #20
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	f024 f998 	bl	8028832 <_ZdlPvj>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4618      	mov	r0, r3
 8004506:	3708      	adds	r7, #8
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}

0800450c <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 800450c:	b480      	push	{r7}
 800450e:	b083      	sub	sp, #12
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
        : x(0), y(0), width(0), height(0)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2200      	movs	r2, #0
 8004518:	801a      	strh	r2, [r3, #0]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2200      	movs	r2, #0
 800451e:	805a      	strh	r2, [r3, #2]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2200      	movs	r2, #0
 8004524:	809a      	strh	r2, [r3, #4]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2200      	movs	r2, #0
 800452a:	80da      	strh	r2, [r3, #6]
    {
    }
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	4618      	mov	r0, r3
 8004530:	370c      	adds	r7, #12
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr
	...

0800453c <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
     * Registers an array of texts. This function is called automatically from
     * touchgfx_generic_init(). Should not be called under normal circumstances.
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
 800453c:	b480      	push	{r7}
 800453e:	b083      	sub	sp, #12
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
    {
        texts = t;
 8004544:	4a04      	ldr	r2, [pc, #16]	; (8004558 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6013      	str	r3, [r2, #0]
    }
 800454a:	bf00      	nop
 800454c:	370c      	adds	r7, #12
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr
 8004556:	bf00      	nop
 8004558:	2402629c 	.word	0x2402629c

0800455c <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 800455c:	b480      	push	{r7}
 800455e:	b083      	sub	sp, #12
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
    {
 8004564:	4a04      	ldr	r2, [pc, #16]	; (8004578 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	601a      	str	r2, [r3, #0]
    }
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	4618      	mov	r0, r3
 800456e:	370c      	adds	r7, #12
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr
 8004578:	0802c38c 	.word	0x0802c38c

0800457c <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 800457c:	b580      	push	{r7, lr}
 800457e:	b082      	sub	sp, #8
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
    }
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f7ff ffe9 	bl	800455c <_ZN8touchgfx12FontProviderD1Ev>
 800458a:	2104      	movs	r1, #4
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	f024 f950 	bl	8028832 <_ZdlPvj>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	4618      	mov	r0, r3
 8004596:	3708      	adds	r7, #8
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}

0800459c <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 800459c:	b480      	push	{r7}
 800459e:	b085      	sub	sp, #20
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	60f8      	str	r0, [r7, #12]
 80045a4:	60b9      	str	r1, [r7, #8]
 80045a6:	607a      	str	r2, [r7, #4]
 80045a8:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 80045aa:	4a0b      	ldr	r2, [pc, #44]	; (80045d8 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	601a      	str	r2, [r3, #0]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	68ba      	ldr	r2, [r7, #8]
 80045b4:	605a      	str	r2, [r3, #4]
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	687a      	ldr	r2, [r7, #4]
 80045ba:	609a      	str	r2, [r3, #8]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	683a      	ldr	r2, [r7, #0]
 80045c0:	60da      	str	r2, [r3, #12]
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	69ba      	ldr	r2, [r7, #24]
 80045c6:	611a      	str	r2, [r3, #16]
    {
    }
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	4618      	mov	r0, r3
 80045cc:	3714      	adds	r7, #20
 80045ce:	46bd      	mov	sp, r7
 80045d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d4:	4770      	bx	lr
 80045d6:	bf00      	nop
 80045d8:	0802c37c 	.word	0x0802c37c

080045dc <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 80045dc:	b480      	push	{r7}
 80045de:	b083      	sub	sp, #12
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
    {
 80045e4:	4a04      	ldr	r2, [pc, #16]	; (80045f8 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	601a      	str	r2, [r3, #0]
    }
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	4618      	mov	r0, r3
 80045ee:	370c      	adds	r7, #12
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr
 80045f8:	0802c37c 	.word	0x0802c37c

080045fc <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b082      	sub	sp, #8
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
    }
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	f7ff ffe9 	bl	80045dc <_ZN8touchgfx7MVPHeapD1Ev>
 800460a:	2114      	movs	r1, #20
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	f024 f910 	bl	8028832 <_ZdlPvj>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	4618      	mov	r0, r3
 8004616:	3708      	adds	r7, #8
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}

0800461c <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800461c:	b480      	push	{r7}
 800461e:	b083      	sub	sp, #12
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8004626:	bf00      	nop
 8004628:	370c      	adds	r7, #12
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr

08004632 <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 8004632:	b480      	push	{r7}
 8004634:	b083      	sub	sp, #12
 8004636:	af00      	add	r7, sp, #0
 8004638:	6078      	str	r0, [r7, #4]
 800463a:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800463c:	bf00      	nop
 800463e:	370c      	adds	r7, #12
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr

08004648 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 8004648:	b480      	push	{r7}
 800464a:	b083      	sub	sp, #12
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8004652:	bf00      	nop
 8004654:	370c      	adds	r7, #12
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr

0800465e <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 800465e:	b480      	push	{r7}
 8004660:	b083      	sub	sp, #12
 8004662:	af00      	add	r7, sp, #0
 8004664:	6078      	str	r0, [r7, #4]
 8004666:	460b      	mov	r3, r1
 8004668:	70fb      	strb	r3, [r7, #3]
    {
        (void)c; // Unused variable
    }
 800466a:	bf00      	nop
 800466c:	370c      	adds	r7, #12
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr

08004676 <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 8004676:	b480      	push	{r7}
 8004678:	b083      	sub	sp, #12
 800467a:	af00      	add	r7, sp, #0
 800467c:	6078      	str	r0, [r7, #4]
    {
    }
 800467e:	bf00      	nop
 8004680:	370c      	adds	r7, #12
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr

0800468a <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 800468a:	b480      	push	{r7}
 800468c:	b083      	sub	sp, #12
 800468e:	af00      	add	r7, sp, #0
 8004690:	6078      	str	r0, [r7, #4]
    {
    }
 8004692:	bf00      	nop
 8004694:	370c      	adds	r7, #12
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr
	...

080046a0 <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 80046a0:	b480      	push	{r7}
 80046a2:	b083      	sub	sp, #12
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
    {
 80046a8:	4a04      	ldr	r2, [pc, #16]	; (80046bc <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	601a      	str	r2, [r3, #0]
    }
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	4618      	mov	r0, r3
 80046b2:	370c      	adds	r7, #12
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr
 80046bc:	0802c354 	.word	0x0802c354

080046c0 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b082      	sub	sp, #8
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
    }
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f7ff ffe9 	bl	80046a0 <_ZN8touchgfx15UIEventListenerD1Ev>
 80046ce:	2104      	movs	r1, #4
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	f024 f8ae 	bl	8028832 <_ZdlPvj>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	4618      	mov	r0, r3
 80046da:	3708      	adds	r7, #8
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}

080046e0 <_ZN8touchgfx3LCDD1Ev>:
        : textureMapperClass(0)
    {
    }

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 80046e0:	b480      	push	{r7}
 80046e2:	b083      	sub	sp, #12
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
    {
 80046e8:	4a04      	ldr	r2, [pc, #16]	; (80046fc <_ZN8touchgfx3LCDD1Ev+0x1c>)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	601a      	str	r2, [r3, #0]
    }
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4618      	mov	r0, r3
 80046f2:	370c      	adds	r7, #12
 80046f4:	46bd      	mov	sp, r7
 80046f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fa:	4770      	bx	lr
 80046fc:	0802d5f4 	.word	0x0802d5f4

08004700 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 8004700:	b580      	push	{r7, lr}
 8004702:	b082      	sub	sp, #8
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
    }
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f7ff ffe9 	bl	80046e0 <_ZN8touchgfx3LCDD1Ev>
 800470e:	2108      	movs	r1, #8
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f024 f88e 	bl	8028832 <_ZdlPvj>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	4618      	mov	r0, r3
 800471a:	3708      	adds	r7, #8
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}

08004720 <_ZN8touchgfx11Application19changeToStartScreenEv>:
     * @note The application will not make a complete restart - if
     *       your Model contains data, this will not be reset, unless
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
 8004720:	b480      	push	{r7}
 8004722:	b083      	sub	sp, #12
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
    {
    }
 8004728:	bf00      	nop
 800472a:	370c      	adds	r7, #12
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr

08004734 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 8004734:	b480      	push	{r7}
 8004736:	b083      	sub	sp, #12
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	460b      	mov	r3, r1
 800473e:	70fb      	strb	r3, [r7, #3]
    {
        (void)screenId; // Unused variable
    }
 8004740:	bf00      	nop
 8004742:	370c      	adds	r7, #12
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr

0800474c <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 800474c:	b480      	push	{r7}
 800474e:	b083      	sub	sp, #12
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
 8004754:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	683a      	ldr	r2, [r7, #0]
 800475a:	f503 7398 	add.w	r3, r3, #304	; 0x130
 800475e:	6810      	ldr	r0, [r2, #0]
 8004760:	6851      	ldr	r1, [r2, #4]
 8004762:	c303      	stmia	r3!, {r0, r1}
    }
 8004764:	bf00      	nop
 8004766:	370c      	adds	r7, #12
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr

08004770 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 8004770:	b480      	push	{r7}
 8004772:	b083      	sub	sp, #12
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
    {
 8004778:	4a04      	ldr	r2, [pc, #16]	; (800478c <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	601a      	str	r2, [r3, #0]
    }
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	4618      	mov	r0, r3
 8004782:	370c      	adds	r7, #12
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr
 800478c:	0802c33c 	.word	0x0802c33c

08004790 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 8004790:	b580      	push	{r7, lr}
 8004792:	b082      	sub	sp, #8
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
    }
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f7ff ffe9 	bl	8004770 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800479e:	2104      	movs	r1, #4
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	f024 f846 	bl	8028832 <_ZdlPvj>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	4618      	mov	r0, r3
 80047aa:	3708      	adds	r7, #8
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}

080047b0 <_ZN8touchgfx18MCUInstrumentationC1Ev>:
    MCUInstrumentation()
 80047b0:	b480      	push	{r7}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
          cc_in(0)
 80047b8:	4a07      	ldr	r2, [pc, #28]	; (80047d8 <_ZN8touchgfx18MCUInstrumentationC1Ev+0x28>)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	601a      	str	r2, [r3, #0]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2200      	movs	r2, #0
 80047c2:	605a      	str	r2, [r3, #4]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2200      	movs	r2, #0
 80047c8:	609a      	str	r2, [r3, #8]
    }
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	4618      	mov	r0, r3
 80047ce:	370c      	adds	r7, #12
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr
 80047d8:	0802bf54 	.word	0x0802bf54

080047dc <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 80047dc:	b480      	push	{r7}
 80047de:	b083      	sub	sp, #12
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2200      	movs	r2, #0
 80047e8:	801a      	strh	r2, [r3, #0]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2200      	movs	r2, #0
 80047ee:	805a      	strh	r2, [r3, #2]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2200      	movs	r2, #0
 80047f4:	809a      	strh	r2, [r3, #4]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	80da      	strh	r2, [r3, #6]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2200      	movs	r2, #0
 8004800:	811a      	strh	r2, [r3, #8]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2200      	movs	r2, #0
 8004806:	815a      	strh	r2, [r3, #10]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2200      	movs	r2, #0
 800480c:	819a      	strh	r2, [r3, #12]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2200      	movs	r2, #0
 8004812:	739a      	strb	r2, [r3, #14]
        {
        }
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	4618      	mov	r0, r3
 8004818:	370c      	adds	r7, #12
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr

08004822 <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 8004822:	b580      	push	{r7, lr}
 8004824:	b082      	sub	sp, #8
 8004826:	af00      	add	r7, sp, #0
 8004828:	6078      	str	r0, [r7, #4]
        : drag(), listener(0), dragThresholdValue(0)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	4618      	mov	r0, r3
 800482e:	f7ff ffd5 	bl	80047dc <_ZN8touchgfx8Gestures9DragStateC1Ev>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2200      	movs	r2, #0
 8004836:	611a      	str	r2, [r3, #16]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2200      	movs	r2, #0
 800483c:	829a      	strh	r2, [r3, #20]
    {
    }
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	4618      	mov	r0, r3
 8004842:	3708      	adds	r7, #8
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}

08004848 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 8004848:	b580      	push	{r7, lr}
 800484a:	b084      	sub	sp, #16
 800484c:	af00      	add	r7, sp, #0
 800484e:	60f8      	str	r0, [r7, #12]
 8004850:	60b9      	str	r1, [r7, #8]
 8004852:	607a      	str	r2, [r7, #4]
 8004854:	603b      	str	r3, [r7, #0]
          lastRenderMethod(HARDWARE)
 8004856:	4a55      	ldr	r2, [pc, #340]	; (80049ac <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x164>)
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	601a      	str	r2, [r3, #0]
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	68ba      	ldr	r2, [r7, #8]
 8004860:	605a      	str	r2, [r3, #4]
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	687a      	ldr	r2, [r7, #4]
 8004866:	609a      	str	r2, [r3, #8]
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	683a      	ldr	r2, [r7, #0]
 800486c:	60da      	str	r2, [r3, #12]
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2200      	movs	r2, #0
 8004872:	611a      	str	r2, [r3, #16]
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2200      	movs	r2, #0
 8004878:	615a      	str	r2, [r3, #20]
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2200      	movs	r2, #0
 800487e:	619a      	str	r2, [r3, #24]
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	331c      	adds	r3, #28
 8004884:	4618      	mov	r0, r3
 8004886:	f7ff ffcc 	bl	8004822 <_ZN8touchgfx8GesturesC1Ev>
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2200      	movs	r2, #0
 800488e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2200      	movs	r2, #0
 8004896:	639a      	str	r2, [r3, #56]	; 0x38
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2200      	movs	r2, #0
 800489c:	63da      	str	r2, [r3, #60]	; 0x3c
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2200      	movs	r2, #0
 80048a2:	641a      	str	r2, [r3, #64]	; 0x40
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2200      	movs	r2, #0
 80048a8:	645a      	str	r2, [r3, #68]	; 0x44
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2200      	movs	r2, #0
 80048ae:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2201      	movs	r2, #1
 80048b6:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2200      	movs	r2, #0
 80048be:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2200      	movs	r2, #0
 80048c6:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2200      	movs	r2, #0
 80048ce:	64da      	str	r2, [r3, #76]	; 0x4c
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	3350      	adds	r3, #80	; 0x50
 80048d4:	4618      	mov	r0, r3
 80048d6:	f7ff fe19 	bl	800450c <_ZN8touchgfx4RectC1Ev>
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2200      	movs	r2, #0
 80048de:	659a      	str	r2, [r3, #88]	; 0x58
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2200      	movs	r2, #0
 80048e4:	65da      	str	r2, [r3, #92]	; 0x5c
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2200      	movs	r2, #0
 80048ea:	661a      	str	r2, [r3, #96]	; 0x60
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2201      	movs	r2, #1
 80048f0:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2200      	movs	r2, #0
 80048f8:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2200      	movs	r2, #0
 8004900:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2201      	movs	r2, #1
 8004908:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2200      	movs	r2, #0
 8004910:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2200      	movs	r2, #0
 8004918:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2200      	movs	r2, #0
 8004920:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2200      	movs	r2, #0
 8004928:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2200      	movs	r2, #0
 8004930:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2200      	movs	r2, #0
 8004938:	671a      	str	r2, [r3, #112]	; 0x70
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2200      	movs	r2, #0
 800493e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2200      	movs	r2, #0
 8004946:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2200      	movs	r2, #0
 800494e:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2201      	movs	r2, #1
 8004956:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2201      	movs	r2, #1
 800495e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        instance = this;
 8004962:	4a13      	ldr	r2, [pc, #76]	; (80049b0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x168>)
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	6013      	str	r3, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8004968:	4a12      	ldr	r2, [pc, #72]	; (80049b4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 800496a:	8b3b      	ldrh	r3, [r7, #24]
 800496c:	8013      	strh	r3, [r2, #0]
 800496e:	4b11      	ldr	r3, [pc, #68]	; (80049b4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 8004970:	881a      	ldrh	r2, [r3, #0]
 8004972:	4b11      	ldr	r3, [pc, #68]	; (80049b8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x170>)
 8004974:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8004976:	4a11      	ldr	r2, [pc, #68]	; (80049bc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 8004978:	8bbb      	ldrh	r3, [r7, #28]
 800497a:	8013      	strh	r3, [r2, #0]
 800497c:	4b0f      	ldr	r3, [pc, #60]	; (80049bc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 800497e:	881a      	ldrh	r2, [r3, #0]
 8004980:	4b0f      	ldr	r3, [pc, #60]	; (80049c0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x178>)
 8004982:	801a      	strh	r2, [r3, #0]
        DISPLAY_ROTATION = rotate0;
 8004984:	4b0f      	ldr	r3, [pc, #60]	; (80049c4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x17c>)
 8004986:	2200      	movs	r2, #0
 8004988:	701a      	strb	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 800498a:	8b3a      	ldrh	r2, [r7, #24]
 800498c:	8bbb      	ldrh	r3, [r7, #28]
 800498e:	429a      	cmp	r2, r3
 8004990:	bf34      	ite	cc
 8004992:	2301      	movcc	r3, #1
 8004994:	2300      	movcs	r3, #0
 8004996:	b2db      	uxtb	r3, r3
 8004998:	461a      	mov	r2, r3
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	4618      	mov	r0, r3
 80049a4:	3710      	adds	r7, #16
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}
 80049aa:	bf00      	nop
 80049ac:	0802d2d0 	.word	0x0802d2d0
 80049b0:	24026240 	.word	0x24026240
 80049b4:	24026234 	.word	0x24026234
 80049b8:	2402623a 	.word	0x2402623a
 80049bc:	24026236 	.word	0x24026236
 80049c0:	2402623c 	.word	0x2402623c
 80049c4:	24026238 	.word	0x24026238

080049c8 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b082      	sub	sp, #8
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
 80049d0:	4a05      	ldr	r2, [pc, #20]	; (80049e8 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	601a      	str	r2, [r3, #0]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	4618      	mov	r0, r3
 80049da:	f7ff fe61 	bl	80046a0 <_ZN8touchgfx15UIEventListenerD1Ev>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	4618      	mov	r0, r3
 80049e2:	3708      	adds	r7, #8
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}
 80049e8:	0802d64c 	.word	0x0802d64c

080049ec <_ZN8touchgfx11ApplicationD0Ev>:
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b082      	sub	sp, #8
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f7ff ffe7 	bl	80049c8 <_ZN8touchgfx11ApplicationD1Ev>
 80049fa:	f44f 719e 	mov.w	r1, #316	; 0x13c
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f023 ff17 	bl	8028832 <_ZdlPvj>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	4618      	mov	r0, r3
 8004a08:	3708      	adds	r7, #8
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}

08004a0e <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8004a0e:	b580      	push	{r7, lr}
 8004a10:	b082      	sub	sp, #8
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f000 f804 	bl	8004a24 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 8004a1c:	bf00      	nop
 8004a1e:	3708      	adds	r7, #8
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}

08004a24 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b082      	sub	sp, #8
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d00f      	beq.n	8004a56 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	330c      	adds	r3, #12
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4610      	mov	r0, r2
 8004a4a:	4798      	blx	r3
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d001      	beq.n	8004a56 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8004a52:	2301      	movs	r3, #1
 8004a54:	e000      	b.n	8004a58 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 8004a56:	2300      	movs	r3, #0
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d00e      	beq.n	8004a7a <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	3308      	adds	r3, #8
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4610      	mov	r0, r2
 8004a70:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
        }
    }
 8004a7a:	bf00      	nop
 8004a7c:	3708      	adds	r7, #8
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}
	...

08004a84 <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b082      	sub	sp, #8
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
 8004a8c:	4a05      	ldr	r2, [pc, #20]	; (8004aa4 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	601a      	str	r2, [r3, #0]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	4618      	mov	r0, r3
 8004a96:	f7ff ff97 	bl	80049c8 <_ZN8touchgfx11ApplicationD1Ev>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3708      	adds	r7, #8
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}
 8004aa4:	0802c2f0 	.word	0x0802c2f0

08004aa8 <_ZN8touchgfx14MVPApplicationD0Ev>:
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b082      	sub	sp, #8
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	f7ff ffe7 	bl	8004a84 <_ZN8touchgfx14MVPApplicationD1Ev>
 8004ab6:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f023 feb9 	bl	8028832 <_ZdlPvj>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3708      	adds	r7, #8
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}
	...

08004acc <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b082      	sub	sp, #8
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
 8004ad4:	4a08      	ldr	r2, [pc, #32]	; (8004af8 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	601a      	str	r2, [r3, #0]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f000 fb33 	bl	800514c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f7ff ffcb 	bl	8004a84 <_ZN8touchgfx14MVPApplicationD1Ev>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	4618      	mov	r0, r3
 8004af2:	3708      	adds	r7, #8
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}
 8004af8:	0802c28c 	.word	0x0802c28c

08004afc <_ZN23FrontendApplicationBaseD0Ev>:
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b082      	sub	sp, #8
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f7ff ffe1 	bl	8004acc <_ZN23FrontendApplicationBaseD1Ev>
 8004b0a:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f023 fe8f 	bl	8028832 <_ZdlPvj>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	4618      	mov	r0, r3
 8004b18:	3708      	adds	r7, #8
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}

08004b1e <_ZN23FrontendApplicationBase19changeToStartScreenEv>:

    virtual void changeToStartScreen()
 8004b1e:	b580      	push	{r7, lr}
 8004b20:	b082      	sub	sp, #8
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	6078      	str	r0, [r7, #4]
    {
        gotoScreen1ScreenNoTransition();
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f003 f968 	bl	8007dfc <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
    }
 8004b2c:	bf00      	nop
 8004b2e:	3708      	adds	r7, #8
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}

08004b34 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b082      	sub	sp, #8
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
 8004b3c:	4a05      	ldr	r2, [pc, #20]	; (8004b54 <_ZN19FrontendApplicationD1Ev+0x20>)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	601a      	str	r2, [r3, #0]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	4618      	mov	r0, r3
 8004b46:	f7ff ffc1 	bl	8004acc <_ZN23FrontendApplicationBaseD1Ev>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3708      	adds	r7, #8
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}
 8004b54:	0802c240 	.word	0x0802c240

08004b58 <_ZN19FrontendApplicationD0Ev>:
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b082      	sub	sp, #8
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f7ff ffe7 	bl	8004b34 <_ZN19FrontendApplicationD1Ev>
 8004b66:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f023 fe61 	bl	8028832 <_ZdlPvj>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	4618      	mov	r0, r3
 8004b74:	3708      	adds	r7, #8
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}

08004b7a <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8004b7a:	b580      	push	{r7, lr}
 8004b7c:	b082      	sub	sp, #8
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f005 faa7 	bl	800a0dc <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	4618      	mov	r0, r3
 8004b92:	f019 f819 	bl	801dbc8 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 8004b96:	bf00      	nop
 8004b98:	3708      	adds	r7, #8
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}

08004b9e <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 8004b9e:	b580      	push	{r7, lr}
 8004ba0:	b082      	sub	sp, #8
 8004ba2:	af00      	add	r7, sp, #0
 8004ba4:	6078      	str	r0, [r7, #4]
 8004ba6:	6039      	str	r1, [r7, #0]
    {
        app.gotoScreen1ScreenNoTransition();
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	4618      	mov	r0, r3
 8004bac:	f003 f926 	bl	8007dfc <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
    }
 8004bb0:	bf00      	nop
 8004bb2:	3708      	adds	r7, #8
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}

08004bb8 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b086      	sub	sp, #24
 8004bbc:	af02      	add	r7, sp, #8
 8004bbe:	60f8      	str	r0, [r7, #12]
 8004bc0:	60b9      	str	r1, [r7, #8]
 8004bc2:	607a      	str	r2, [r7, #4]
 8004bc4:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 8004bc6:	68f8      	ldr	r0, [r7, #12]
 8004bc8:	69bb      	ldr	r3, [r7, #24]
 8004bca:	9300      	str	r3, [sp, #0]
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	68b9      	ldr	r1, [r7, #8]
 8004bd2:	f7ff fce3 	bl	800459c <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 8004bd6:	4a04      	ldr	r2, [pc, #16]	; (8004be8 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	601a      	str	r2, [r3, #0]
    {

    }
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	4618      	mov	r0, r3
 8004be0:	3710      	adds	r7, #16
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}
 8004be6:	bf00      	nop
 8004be8:	0802c22c 	.word	0x0802c22c

08004bec <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8004bec:	b580      	push	{r7, lr}
 8004bee:	af00      	add	r7, sp, #0
 8004bf0:	4801      	ldr	r0, [pc, #4]	; (8004bf8 <__tcf_0+0xc>)
 8004bf2:	f000 f97d 	bl	8004ef0 <_ZN12FrontendHeapD1Ev>
 8004bf6:	bd80      	pop	{r7, pc}
 8004bf8:	24005f8c 	.word	0x24005f8c

08004bfc <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 8004c00:	4b12      	ldr	r3, [pc, #72]	; (8004c4c <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8004c02:	781b      	ldrb	r3, [r3, #0]
 8004c04:	f3bf 8f5b 	dmb	ish
 8004c08:	b2db      	uxtb	r3, r3
 8004c0a:	f003 0301 	and.w	r3, r3, #1
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	bf0c      	ite	eq
 8004c12:	2301      	moveq	r3, #1
 8004c14:	2300      	movne	r3, #0
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d013      	beq.n	8004c44 <_ZN12FrontendHeap11getInstanceEv+0x48>
 8004c1c:	480b      	ldr	r0, [pc, #44]	; (8004c4c <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8004c1e:	f023 fe0a 	bl	8028836 <__cxa_guard_acquire>
 8004c22:	4603      	mov	r3, r0
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	bf14      	ite	ne
 8004c28:	2301      	movne	r3, #1
 8004c2a:	2300      	moveq	r3, #0
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d008      	beq.n	8004c44 <_ZN12FrontendHeap11getInstanceEv+0x48>
 8004c32:	4807      	ldr	r0, [pc, #28]	; (8004c50 <_ZN12FrontendHeap11getInstanceEv+0x54>)
 8004c34:	f000 f868 	bl	8004d08 <_ZN12FrontendHeapC1Ev>
 8004c38:	4806      	ldr	r0, [pc, #24]	; (8004c54 <_ZN12FrontendHeap11getInstanceEv+0x58>)
 8004c3a:	f023 fe47 	bl	80288cc <atexit>
 8004c3e:	4803      	ldr	r0, [pc, #12]	; (8004c4c <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8004c40:	f023 fe05 	bl	802884e <__cxa_guard_release>
        return instance;
 8004c44:	4b02      	ldr	r3, [pc, #8]	; (8004c50 <_ZN12FrontendHeap11getInstanceEv+0x54>)
    }
 8004c46:	4618      	mov	r0, r3
 8004c48:	bd80      	pop	{r7, pc}
 8004c4a:	bf00      	nop
 8004c4c:	240062d0 	.word	0x240062d0
 8004c50:	24005f8c 	.word	0x24005f8c
 8004c54:	08004bed 	.word	0x08004bed

08004c58 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b082      	sub	sp, #8
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
 8004c60:	4a05      	ldr	r2, [pc, #20]	; (8004c78 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	601a      	str	r2, [r3, #0]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f7ff fcb7 	bl	80045dc <_ZN8touchgfx7MVPHeapD1Ev>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	4618      	mov	r0, r3
 8004c72:	3708      	adds	r7, #8
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}
 8004c78:	0802c22c 	.word	0x0802c22c

08004c7c <_ZN16FrontendHeapBaseD0Ev>:
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b082      	sub	sp, #8
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	f7ff ffe7 	bl	8004c58 <_ZN16FrontendHeapBaseD1Ev>
 8004c8a:	2114      	movs	r1, #20
 8004c8c:	6878      	ldr	r0, [r7, #4]
 8004c8e:	f023 fdd0 	bl	8028832 <_ZdlPvj>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	4618      	mov	r0, r3
 8004c96:	3708      	adds	r7, #8
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}

08004c9c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b082      	sub	sp, #8
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f015 f9ce 	bl	801a048 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8004cac:	4a03      	ldr	r2, [pc, #12]	; (8004cbc <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	601a      	str	r2, [r3, #0]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3708      	adds	r7, #8
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}
 8004cbc:	0802c1f8 	.word	0x0802c1f8

08004cc0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b082      	sub	sp, #8
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f015 f9bc 	bl	801a048 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8004cd0:	4a03      	ldr	r2, [pc, #12]	; (8004ce0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	601a      	str	r2, [r3, #0]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3708      	adds	r7, #8
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}
 8004ce0:	0802c1c4 	.word	0x0802c1c4

08004ce4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EEC1Ev>:
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b082      	sub	sp, #8
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f015 f9aa 	bl	801a048 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8004cf4:	4a03      	ldr	r2, [pc, #12]	; (8004d04 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EEC1Ev+0x20>)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	601a      	str	r2, [r3, #0]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3708      	adds	r7, #8
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}
 8004d04:	0802c190 	.word	0x0802c190

08004d08 <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8004d08:	b590      	push	{r4, r7, lr}
 8004d0a:	b085      	sub	sp, #20
 8004d0c:	af02      	add	r7, sp, #8
 8004d0e:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	f103 0114 	add.w	r1, r3, #20
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f503 74d2 	add.w	r4, r3, #420	; 0x1a4
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
                     app(model, *this)
 8004d2a:	9300      	str	r3, [sp, #0]
 8004d2c:	4623      	mov	r3, r4
 8004d2e:	f7ff ff43 	bl	8004bb8 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 8004d32:	4a18      	ldr	r2, [pc, #96]	; (8004d94 <_ZN12FrontendHeapC1Ev+0x8c>)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	601a      	str	r2, [r3, #0]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	3314      	adds	r3, #20
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f7ff ffad 	bl	8004c9c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	332c      	adds	r3, #44	; 0x2c
 8004d46:	4618      	mov	r0, r3
 8004d48:	f7ff ffba 	bl	8004cc0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8004d52:	4618      	mov	r0, r3
 8004d54:	f7ff ffc6 	bl	8004ce4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EEC1Ev>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f005 f9ae 	bl	800a0c0 <_ZN5ModelC1Ev>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	f503 70f4 	add.w	r0, r3, #488	; 0x1e8
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8004d70:	687a      	ldr	r2, [r7, #4]
 8004d72:	4619      	mov	r1, r3
 8004d74:	f005 f98e 	bl	800a094 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
    {
        gotoStartScreen(app);
 8004d78:	687a      	ldr	r2, [r7, #4]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8004d80:	4619      	mov	r1, r3
 8004d82:	4610      	mov	r0, r2
 8004d84:	f7ff ff0b 	bl	8004b9e <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	370c      	adds	r7, #12
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd90      	pop	{r4, r7, pc}
 8004d92:	bf00      	nop
 8004d94:	0802c17c 	.word	0x0802c17c

08004d98 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b086      	sub	sp, #24
 8004d9c:	af02      	add	r7, sp, #8
 8004d9e:	60f8      	str	r0, [r7, #12]
 8004da0:	60b9      	str	r1, [r7, #8]
 8004da2:	607a      	str	r2, [r7, #4]
 8004da4:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 8004da6:	68f8      	ldr	r0, [r7, #12]
 8004da8:	8bbb      	ldrh	r3, [r7, #28]
 8004daa:	9301      	str	r3, [sp, #4]
 8004dac:	8b3b      	ldrh	r3, [r7, #24]
 8004dae:	9300      	str	r3, [sp, #0]
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	687a      	ldr	r2, [r7, #4]
 8004db4:	68b9      	ldr	r1, [r7, #8]
 8004db6:	f7ff fd47 	bl	8004848 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 8004dba:	4a04      	ldr	r2, [pc, #16]	; (8004dcc <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	601a      	str	r2, [r3, #0]
    }
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3710      	adds	r7, #16
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}
 8004dca:	bf00      	nop
 8004dcc:	0802c484 	.word	0x0802c484

08004dd0 <_ZN8touchgfx25CortexMMCUInstrumentationC1Ev>:
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b082      	sub	sp, #8
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f7ff fce8 	bl	80047b0 <_ZN8touchgfx18MCUInstrumentationC1Ev>
 8004de0:	4a03      	ldr	r2, [pc, #12]	; (8004df0 <_ZN8touchgfx25CortexMMCUInstrumentationC1Ev+0x20>)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	601a      	str	r2, [r3, #0]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	4618      	mov	r0, r3
 8004dea:	3708      	adds	r7, #8
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}
 8004df0:	0802bf2c 	.word	0x0802bf2c

08004df4 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b086      	sub	sp, #24
 8004df8:	af02      	add	r7, sp, #8
 8004dfa:	60f8      	str	r0, [r7, #12]
 8004dfc:	60b9      	str	r1, [r7, #8]
 8004dfe:	607a      	str	r2, [r7, #4]
 8004e00:	603b      	str	r3, [r7, #0]
 8004e02:	68f8      	ldr	r0, [r7, #12]
 8004e04:	8bbb      	ldrh	r3, [r7, #28]
 8004e06:	9301      	str	r3, [sp, #4]
 8004e08:	8b3b      	ldrh	r3, [r7, #24]
 8004e0a:	9300      	str	r3, [sp, #0]
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	68b9      	ldr	r1, [r7, #8]
 8004e12:	f7ff ffc1 	bl	8004d98 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8004e16:	4a06      	ldr	r2, [pc, #24]	; (8004e30 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x3c>)
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	601a      	str	r2, [r3, #0]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	337c      	adds	r3, #124	; 0x7c
 8004e20:	4618      	mov	r0, r3
 8004e22:	f7ff ffd5 	bl	8004dd0 <_ZN8touchgfx25CortexMMCUInstrumentationC1Ev>
    }
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	4618      	mov	r0, r3
 8004e2a:	3710      	adds	r7, #16
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}
 8004e30:	0802bfac 	.word	0x0802bfac

08004e34 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 8004e34:	b480      	push	{r7}
 8004e36:	b083      	sub	sp, #12
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
 8004e3c:	4a04      	ldr	r2, [pc, #16]	; (8004e50 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	601a      	str	r2, [r3, #0]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	4618      	mov	r0, r3
 8004e46:	370c      	adds	r7, #12
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4e:	4770      	bx	lr
 8004e50:	0802bf94 	.word	0x0802bf94

08004e54 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b082      	sub	sp, #8
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f7ff ffe8 	bl	8004e34 <_ZN8touchgfx15TouchControllerC1Ev>
 8004e64:	4a03      	ldr	r2, [pc, #12]	; (8004e74 <_ZN20STM32TouchControllerC1Ev+0x20>)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	601a      	str	r2, [r3, #0]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3708      	adds	r7, #8
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}
 8004e74:	0802bf7c 	.word	0x0802bf7c

08004e78 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 8004e78:	b590      	push	{r4, r7, lr}
 8004e7a:	b085      	sub	sp, #20
 8004e7c:	af02      	add	r7, sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8004e7e:	f002 fbad 	bl	80075dc <_ZN14BitmapDatabase11getInstanceEv>
 8004e82:	4604      	mov	r4, r0
 8004e84:	f002 fbb4 	bl	80075f0 <_ZN14BitmapDatabase15getInstanceSizeEv>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	4619      	mov	r1, r3
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	9300      	str	r3, [sp, #0]
 8004e90:	2300      	movs	r3, #0
 8004e92:	2200      	movs	r2, #0
 8004e94:	4620      	mov	r0, r4
 8004e96:	f01b fbaf 	bl	80205f8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
    TypedText::registerTexts(&texts);
 8004e9a:	4809      	ldr	r0, [pc, #36]	; (8004ec0 <touchgfx_init+0x48>)
 8004e9c:	f7ff fb4e 	bl	800453c <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
    Texts::setLanguage(0);
 8004ea0:	2000      	movs	r0, #0
 8004ea2:	f005 f84b 	bl	8009f3c <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 8004ea6:	4807      	ldr	r0, [pc, #28]	; (8004ec4 <touchgfx_init+0x4c>)
 8004ea8:	f01b fa5e 	bl	8020368 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

    FrontendHeap& heap = FrontendHeap::getInstance();
 8004eac:	f7ff fea6 	bl	8004bfc <_ZN12FrontendHeap11getInstanceEv>
 8004eb0:	6078      	str	r0, [r7, #4]
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 8004eb2:	4805      	ldr	r0, [pc, #20]	; (8004ec8 <touchgfx_init+0x50>)
 8004eb4:	f7fd fab2 	bl	800241c <_ZN11TouchGFXHAL10initializeEv>
}
 8004eb8:	bf00      	nop
 8004eba:	370c      	adds	r7, #12
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd90      	pop	{r4, r7, pc}
 8004ec0:	240070d8 	.word	0x240070d8
 8004ec4:	24000020 	.word	0x24000020
 8004ec8:	240070dc 	.word	0x240070dc

08004ecc <touchgfx_components_init>:

void touchgfx_components_init()
{
 8004ecc:	b480      	push	{r7}
 8004ece:	af00      	add	r7, sp, #0
}
 8004ed0:	bf00      	nop
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr
	...

08004edc <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	af00      	add	r7, sp, #0
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 8004ee0:	4802      	ldr	r0, [pc, #8]	; (8004eec <touchgfx_taskEntry+0x10>)
 8004ee2:	f7fd fabf 	bl	8002464 <_ZN11TouchGFXHAL9taskEntryEv>
}
 8004ee6:	bf00      	nop
 8004ee8:	bd80      	pop	{r7, pc}
 8004eea:	bf00      	nop
 8004eec:	240070dc 	.word	0x240070dc

08004ef0 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b082      	sub	sp, #8
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
 8004ef8:	4a10      	ldr	r2, [pc, #64]	; (8004f3c <_ZN12FrontendHeapD1Ev+0x4c>)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	601a      	str	r2, [r3, #0]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8004f04:	4618      	mov	r0, r3
 8004f06:	f7ff fe15 	bl	8004b34 <_ZN19FrontendApplicationD1Ev>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8004f10:	4618      	mov	r0, r3
 8004f12:	f000 f827 	bl	8004f64 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	332c      	adds	r3, #44	; 0x2c
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f000 f844 	bl	8004fa8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	3314      	adds	r3, #20
 8004f24:	4618      	mov	r0, r3
 8004f26:	f000 f863 	bl	8004ff0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f7ff fe93 	bl	8004c58 <_ZN16FrontendHeapBaseD1Ev>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	4618      	mov	r0, r3
 8004f36:	3708      	adds	r7, #8
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}
 8004f3c:	0802c17c 	.word	0x0802c17c

08004f40 <_ZN12FrontendHeapD0Ev>:
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b082      	sub	sp, #8
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	f7ff ffd1 	bl	8004ef0 <_ZN12FrontendHeapD1Ev>
 8004f4e:	f44f 7151 	mov.w	r1, #836	; 0x344
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f023 fc6d 	bl	8028832 <_ZdlPvj>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3708      	adds	r7, #8
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}
	...

08004f64 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>:
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b082      	sub	sp, #8
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
 8004f6c:	4a05      	ldr	r2, [pc, #20]	; (8004f84 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev+0x20>)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	601a      	str	r2, [r3, #0]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	4618      	mov	r0, r3
 8004f76:	f015 f866 	bl	801a046 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3708      	adds	r7, #8
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}
 8004f84:	0802c190 	.word	0x0802c190

08004f88 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED0Ev>:
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b082      	sub	sp, #8
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	f7ff ffe7 	bl	8004f64 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 8004f96:	2140      	movs	r1, #64	; 0x40
 8004f98:	6878      	ldr	r0, [r7, #4]
 8004f9a:	f023 fc4a 	bl	8028832 <_ZdlPvj>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3708      	adds	r7, #8
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}

08004fa8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b082      	sub	sp, #8
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
 8004fb0:	4a05      	ldr	r2, [pc, #20]	; (8004fc8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	601a      	str	r2, [r3, #0]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f015 f844 	bl	801a046 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3708      	adds	r7, #8
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}
 8004fc8:	0802c1c4 	.word	0x0802c1c4

08004fcc <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b082      	sub	sp, #8
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	f7ff ffe7 	bl	8004fa8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8004fda:	f44f 71bc 	mov.w	r1, #376	; 0x178
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f023 fc27 	bl	8028832 <_ZdlPvj>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3708      	adds	r7, #8
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}
	...

08004ff0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b082      	sub	sp, #8
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	4a05      	ldr	r2, [pc, #20]	; (8005010 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	601a      	str	r2, [r3, #0]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	4618      	mov	r0, r3
 8005002:	f015 f820 	bl	801a046 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	4618      	mov	r0, r3
 800500a:	3708      	adds	r7, #8
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}
 8005010:	0802c1f8 	.word	0x0802c1f8

08005014 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8005014:	b580      	push	{r7, lr}
 8005016:	b082      	sub	sp, #8
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	f7ff ffe7 	bl	8004ff0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8005022:	2118      	movs	r1, #24
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f023 fc04 	bl	8028832 <_ZdlPvj>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	4618      	mov	r0, r3
 800502e:	3708      	adds	r7, #8
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}

08005034 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8005034:	b580      	push	{r7, lr}
 8005036:	b082      	sub	sp, #8
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
 800503c:	4a05      	ldr	r2, [pc, #20]	; (8005054 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	601a      	str	r2, [r3, #0]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	4618      	mov	r0, r3
 8005046:	f7ff fa89 	bl	800455c <_ZN8touchgfx12FontProviderD1Ev>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	4618      	mov	r0, r3
 800504e:	3708      	adds	r7, #8
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}
 8005054:	0802c85c 	.word	0x0802c85c

08005058 <_ZN23ApplicationFontProviderD0Ev>:
 8005058:	b580      	push	{r7, lr}
 800505a:	b082      	sub	sp, #8
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f7ff ffe7 	bl	8005034 <_ZN23ApplicationFontProviderD1Ev>
 8005066:	2104      	movs	r1, #4
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	f023 fbe2 	bl	8028832 <_ZdlPvj>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	4618      	mov	r0, r3
 8005072:	3708      	adds	r7, #8
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}

08005078 <_ZN8touchgfx8LCD24bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD24bpp : public LCD
 8005078:	b580      	push	{r7, lr}
 800507a:	b082      	sub	sp, #8
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	4a05      	ldr	r2, [pc, #20]	; (8005098 <_ZN8touchgfx8LCD24bppD1Ev+0x20>)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	601a      	str	r2, [r3, #0]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	4618      	mov	r0, r3
 800508a:	f7ff fb29 	bl	80046e0 <_ZN8touchgfx3LCDD1Ev>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	4618      	mov	r0, r3
 8005092:	3708      	adds	r7, #8
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}
 8005098:	0802d960 	.word	0x0802d960

0800509c <_ZN8touchgfx8LCD24bppD0Ev>:
 800509c:	b580      	push	{r7, lr}
 800509e:	b082      	sub	sp, #8
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	f7ff ffe7 	bl	8005078 <_ZN8touchgfx8LCD24bppD1Ev>
 80050aa:	2158      	movs	r1, #88	; 0x58
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f023 fbc0 	bl	8028832 <_ZdlPvj>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	4618      	mov	r0, r3
 80050b6:	3708      	adds	r7, #8
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}

080050bc <_Z41__static_initialization_and_destruction_0ii>:
 80050bc:	b580      	push	{r7, lr}
 80050be:	b084      	sub	sp, #16
 80050c0:	af02      	add	r7, sp, #8
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	6039      	str	r1, [r7, #0]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d119      	bne.n	8005100 <_Z41__static_initialization_and_destruction_0ii+0x44>
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d114      	bne.n	8005100 <_Z41__static_initialization_and_destruction_0ii+0x44>
static STM32TouchController tc;
 80050d6:	4818      	ldr	r0, [pc, #96]	; (8005138 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80050d8:	f7ff febc 	bl	8004e54 <_ZN20STM32TouchControllerC1Ev>
static STM32DMA dma;
 80050dc:	4817      	ldr	r0, [pc, #92]	; (800513c <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80050de:	f7fe fecb 	bl	8003e78 <_ZN8STM32DMAC1Ev>
static LCD24bpp display;
 80050e2:	4817      	ldr	r0, [pc, #92]	; (8005140 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80050e4:	f01d fcd0 	bl	8022a88 <_ZN8touchgfx8LCD24bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 480, 272);
 80050e8:	f44f 7388 	mov.w	r3, #272	; 0x110
 80050ec:	9301      	str	r3, [sp, #4]
 80050ee:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80050f2:	9300      	str	r3, [sp, #0]
 80050f4:	4b10      	ldr	r3, [pc, #64]	; (8005138 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80050f6:	4a12      	ldr	r2, [pc, #72]	; (8005140 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80050f8:	4910      	ldr	r1, [pc, #64]	; (800513c <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80050fa:	4812      	ldr	r0, [pc, #72]	; (8005144 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80050fc:	f7ff fe7a 	bl	8004df4 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d113      	bne.n	800512e <_Z41__static_initialization_and_destruction_0ii+0x72>
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800510c:	4293      	cmp	r3, r2
 800510e:	d10e      	bne.n	800512e <_Z41__static_initialization_and_destruction_0ii+0x72>
 8005110:	480c      	ldr	r0, [pc, #48]	; (8005144 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8005112:	f7fd fa93 	bl	800263c <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 8005116:	480c      	ldr	r0, [pc, #48]	; (8005148 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8005118:	f7ff ff8c 	bl	8005034 <_ZN23ApplicationFontProviderD1Ev>
static LCD24bpp display;
 800511c:	4808      	ldr	r0, [pc, #32]	; (8005140 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800511e:	f7ff ffab 	bl	8005078 <_ZN8touchgfx8LCD24bppD1Ev>
static STM32DMA dma;
 8005122:	4806      	ldr	r0, [pc, #24]	; (800513c <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8005124:	f7fe fee2 	bl	8003eec <_ZN8STM32DMAD1Ev>
static STM32TouchController tc;
 8005128:	4803      	ldr	r0, [pc, #12]	; (8005138 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800512a:	f7fc fe0b 	bl	8001d44 <_ZN20STM32TouchControllerD1Ev>
}
 800512e:	bf00      	nop
 8005130:	3708      	adds	r7, #8
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}
 8005136:	bf00      	nop
 8005138:	240062d4 	.word	0x240062d4
 800513c:	240062d8 	.word	0x240062d8
 8005140:	24007080 	.word	0x24007080
 8005144:	240070dc 	.word	0x240070dc
 8005148:	24000020 	.word	0x24000020

0800514c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800514c:	b580      	push	{r7, lr}
 800514e:	b082      	sub	sp, #8
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
 8005154:	4a05      	ldr	r2, [pc, #20]	; (800516c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	601a      	str	r2, [r3, #0]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	4618      	mov	r0, r3
 800515e:	f7ff fb07 	bl	8004770 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	4618      	mov	r0, r3
 8005166:	3708      	adds	r7, #8
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}
 800516c:	0802c2d8 	.word	0x0802c2d8

08005170 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 8005170:	b580      	push	{r7, lr}
 8005172:	b082      	sub	sp, #8
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
 8005178:	6878      	ldr	r0, [r7, #4]
 800517a:	f7ff ffe7 	bl	800514c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800517e:	2110      	movs	r1, #16
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f023 fb56 	bl	8028832 <_ZdlPvj>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	4618      	mov	r0, r3
 800518a:	3708      	adds	r7, #8
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}

08005190 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE8capacityEv>:
    {
        INTS_PR_ELEMENT = (sizeof(typename meta::select_type_maxsize<SupportedTypesList>::type) + sizeof(int) - 1) / sizeof(int),
        SIZE_OF_ELEMENT = INTS_PR_ELEMENT * sizeof(int)
    };

    virtual uint16_t capacity() const
 8005190:	b480      	push	{r7}
 8005192:	b083      	sub	sp, #12
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 8005198:	2301      	movs	r3, #1
    }
 800519a:	4618      	mov	r0, r3
 800519c:	370c      	adds	r7, #12
 800519e:	46bd      	mov	sp, r7
 80051a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a4:	4770      	bx	lr

080051a6 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
 80051a6:	b480      	push	{r7}
 80051a8:	b083      	sub	sp, #12
 80051aa:	af00      	add	r7, sp, #0
 80051ac:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 80051ae:	2338      	movs	r3, #56	; 0x38
    }
 80051b0:	4618      	mov	r0, r3
 80051b2:	370c      	adds	r7, #12
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr

080051bc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
 80051bc:	b480      	push	{r7}
 80051be:	b083      	sub	sp, #12
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	460b      	mov	r3, r1
 80051c6:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 80051c8:	887a      	ldrh	r2, [r7, #2]
 80051ca:	4613      	mov	r3, r2
 80051cc:	00db      	lsls	r3, r3, #3
 80051ce:	1a9b      	subs	r3, r3, r2
 80051d0:	00db      	lsls	r3, r3, #3
 80051d2:	3308      	adds	r3, #8
 80051d4:	687a      	ldr	r2, [r7, #4]
 80051d6:	4413      	add	r3, r2
    }
 80051d8:	4618      	mov	r0, r3
 80051da:	370c      	adds	r7, #12
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr

080051e4 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
 80051e4:	b480      	push	{r7}
 80051e6:	b083      	sub	sp, #12
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	460b      	mov	r3, r1
 80051ee:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 80051f0:	887a      	ldrh	r2, [r7, #2]
 80051f2:	4613      	mov	r3, r2
 80051f4:	00db      	lsls	r3, r3, #3
 80051f6:	1a9b      	subs	r3, r3, r2
 80051f8:	00db      	lsls	r3, r3, #3
 80051fa:	3308      	adds	r3, #8
 80051fc:	687a      	ldr	r2, [r7, #4]
 80051fe:	4413      	add	r3, r2
    }
 8005200:	4618      	mov	r0, r3
 8005202:	370c      	adds	r7, #12
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr

0800520c <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 800520c:	b480      	push	{r7}
 800520e:	b083      	sub	sp, #12
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8005214:	2301      	movs	r3, #1
    }
 8005216:	4618      	mov	r0, r3
 8005218:	370c      	adds	r7, #12
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr

08005222 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8005222:	b480      	push	{r7}
 8005224:	b083      	sub	sp, #12
 8005226:	af00      	add	r7, sp, #0
 8005228:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 800522a:	f44f 73b8 	mov.w	r3, #368	; 0x170
    }
 800522e:	4618      	mov	r0, r3
 8005230:	370c      	adds	r7, #12
 8005232:	46bd      	mov	sp, r7
 8005234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005238:	4770      	bx	lr

0800523a <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 800523a:	b480      	push	{r7}
 800523c:	b083      	sub	sp, #12
 800523e:	af00      	add	r7, sp, #0
 8005240:	6078      	str	r0, [r7, #4]
 8005242:	460b      	mov	r3, r1
 8005244:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8005246:	887b      	ldrh	r3, [r7, #2]
 8005248:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800524c:	fb02 f303 	mul.w	r3, r2, r3
 8005250:	3308      	adds	r3, #8
 8005252:	687a      	ldr	r2, [r7, #4]
 8005254:	4413      	add	r3, r2
    }
 8005256:	4618      	mov	r0, r3
 8005258:	370c      	adds	r7, #12
 800525a:	46bd      	mov	sp, r7
 800525c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005260:	4770      	bx	lr

08005262 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8005262:	b480      	push	{r7}
 8005264:	b083      	sub	sp, #12
 8005266:	af00      	add	r7, sp, #0
 8005268:	6078      	str	r0, [r7, #4]
 800526a:	460b      	mov	r3, r1
 800526c:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 800526e:	887b      	ldrh	r3, [r7, #2]
 8005270:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8005274:	fb02 f303 	mul.w	r3, r2, r3
 8005278:	3308      	adds	r3, #8
 800527a:	687a      	ldr	r2, [r7, #4]
 800527c:	4413      	add	r3, r2
    }
 800527e:	4618      	mov	r0, r3
 8005280:	370c      	adds	r7, #12
 8005282:	46bd      	mov	sp, r7
 8005284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005288:	4770      	bx	lr

0800528a <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 800528a:	b480      	push	{r7}
 800528c:	b083      	sub	sp, #12
 800528e:	af00      	add	r7, sp, #0
 8005290:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8005292:	2301      	movs	r3, #1
    }
 8005294:	4618      	mov	r0, r3
 8005296:	370c      	adds	r7, #12
 8005298:	46bd      	mov	sp, r7
 800529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529e:	4770      	bx	lr

080052a0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 80052a0:	b480      	push	{r7}
 80052a2:	b083      	sub	sp, #12
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 80052a8:	2310      	movs	r3, #16
    }
 80052aa:	4618      	mov	r0, r3
 80052ac:	370c      	adds	r7, #12
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr

080052b6 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 80052b6:	b480      	push	{r7}
 80052b8:	b083      	sub	sp, #12
 80052ba:	af00      	add	r7, sp, #0
 80052bc:	6078      	str	r0, [r7, #4]
 80052be:	460b      	mov	r3, r1
 80052c0:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80052c2:	887b      	ldrh	r3, [r7, #2]
 80052c4:	011b      	lsls	r3, r3, #4
 80052c6:	3308      	adds	r3, #8
 80052c8:	687a      	ldr	r2, [r7, #4]
 80052ca:	4413      	add	r3, r2
    }
 80052cc:	4618      	mov	r0, r3
 80052ce:	370c      	adds	r7, #12
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr

080052d8 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 80052d8:	b480      	push	{r7}
 80052da:	b083      	sub	sp, #12
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
 80052e0:	460b      	mov	r3, r1
 80052e2:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80052e4:	887b      	ldrh	r3, [r7, #2]
 80052e6:	011b      	lsls	r3, r3, #4
 80052e8:	3308      	adds	r3, #8
 80052ea:	687a      	ldr	r2, [r7, #4]
 80052ec:	4413      	add	r3, r2
    }
 80052ee:	4618      	mov	r0, r3
 80052f0:	370c      	adds	r7, #12
 80052f2:	46bd      	mov	sp, r7
 80052f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f8:	4770      	bx	lr

080052fa <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 80052fa:	b580      	push	{r7, lr}
 80052fc:	b082      	sub	sp, #8
 80052fe:	af00      	add	r7, sp, #0
 8005300:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun)();
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	687a      	ldr	r2, [r7, #4]
 8005308:	68d2      	ldr	r2, [r2, #12]
 800530a:	1052      	asrs	r2, r2, #1
 800530c:	1899      	adds	r1, r3, r2
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	68db      	ldr	r3, [r3, #12]
 8005312:	f003 0301 	and.w	r3, r3, #1
 8005316:	2b00      	cmp	r3, #0
 8005318:	d102      	bne.n	8005320 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	e00a      	b.n	8005336 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	687a      	ldr	r2, [r7, #4]
 8005326:	68d2      	ldr	r2, [r2, #12]
 8005328:	1052      	asrs	r2, r2, #1
 800532a:	4413      	add	r3, r2
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	687a      	ldr	r2, [r7, #4]
 8005330:	6892      	ldr	r2, [r2, #8]
 8005332:	4413      	add	r3, r2
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4608      	mov	r0, r1
 8005338:	4798      	blx	r3
    }
 800533a:	bf00      	nop
 800533c:	3708      	adds	r7, #8
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}

08005342 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 8005342:	b480      	push	{r7}
 8005344:	b083      	sub	sp, #12
 8005346:	af00      	add	r7, sp, #0
 8005348:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun != 0);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d010      	beq.n	8005374 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d107      	bne.n	800536a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	68db      	ldr	r3, [r3, #12]
 800535e:	f003 0301 	and.w	r3, r3, #1
 8005362:	2b00      	cmp	r3, #0
 8005364:	d101      	bne.n	800536a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8005366:	2301      	movs	r3, #1
 8005368:	e000      	b.n	800536c <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 800536a:	2300      	movs	r3, #0
 800536c:	2b01      	cmp	r3, #1
 800536e:	d001      	beq.n	8005374 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 8005370:	2301      	movs	r3, #1
 8005372:	e000      	b.n	8005376 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 8005374:	2300      	movs	r3, #0
    }
 8005376:	4618      	mov	r0, r3
 8005378:	370c      	adds	r7, #12
 800537a:	46bd      	mov	sp, r7
 800537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005380:	4770      	bx	lr

08005382 <_GLOBAL__sub_I_touchgfx_init>:
 8005382:	b580      	push	{r7, lr}
 8005384:	af00      	add	r7, sp, #0
 8005386:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800538a:	2001      	movs	r0, #1
 800538c:	f7ff fe96 	bl	80050bc <_Z41__static_initialization_and_destruction_0ii>
 8005390:	bd80      	pop	{r7, pc}

08005392 <_GLOBAL__sub_D_touchgfx_init>:
 8005392:	b580      	push	{r7, lr}
 8005394:	af00      	add	r7, sp, #0
 8005396:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800539a:	2000      	movs	r0, #0
 800539c:	f7ff fe8e 	bl	80050bc <_Z41__static_initialization_and_destruction_0ii>
 80053a0:	bd80      	pop	{r7, pc}

080053a2 <_ZN8touchgfx9colortypeC1Em>:
    colortype(uint32_t col)
 80053a2:	b480      	push	{r7}
 80053a4:	b083      	sub	sp, #12
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	6078      	str	r0, [r7, #4]
 80053aa:	6039      	str	r1, [r7, #0]
        : color(col)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	683a      	ldr	r2, [r7, #0]
 80053b0:	601a      	str	r2, [r3, #0]
    }
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	4618      	mov	r0, r3
 80053b6:	370c      	adds	r7, #12
 80053b8:	46bd      	mov	sp, r7
 80053ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053be:	4770      	bx	lr

080053c0 <_ZN8touchgfx4RectC1Essss>:
     * @param  rectX      The x coordinate.
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
 80053c0:	b480      	push	{r7}
 80053c2:	b085      	sub	sp, #20
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	60f8      	str	r0, [r7, #12]
 80053c8:	4608      	mov	r0, r1
 80053ca:	4611      	mov	r1, r2
 80053cc:	461a      	mov	r2, r3
 80053ce:	4603      	mov	r3, r0
 80053d0:	817b      	strh	r3, [r7, #10]
 80053d2:	460b      	mov	r3, r1
 80053d4:	813b      	strh	r3, [r7, #8]
 80053d6:	4613      	mov	r3, r2
 80053d8:	80fb      	strh	r3, [r7, #6]
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	897a      	ldrh	r2, [r7, #10]
 80053de:	801a      	strh	r2, [r3, #0]
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	893a      	ldrh	r2, [r7, #8]
 80053e4:	805a      	strh	r2, [r3, #2]
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	88fa      	ldrh	r2, [r7, #6]
 80053ea:	809a      	strh	r2, [r3, #4]
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	8b3a      	ldrh	r2, [r7, #24]
 80053f0:	80da      	strh	r2, [r3, #6]
    {
    }
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	4618      	mov	r0, r3
 80053f6:	3714      	adds	r7, #20
 80053f8:	46bd      	mov	sp, r7
 80053fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fe:	4770      	bx	lr

08005400 <_ZN8touchgfx8DrawableD1Ev>:
          visible(true)
    {
    }

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 8005400:	b480      	push	{r7}
 8005402:	b083      	sub	sp, #12
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
    {
 8005408:	4a04      	ldr	r2, [pc, #16]	; (800541c <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	601a      	str	r2, [r3, #0]
    }
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	4618      	mov	r0, r3
 8005412:	370c      	adds	r7, #12
 8005414:	46bd      	mov	sp, r7
 8005416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541a:	4770      	bx	lr
 800541c:	0802d698 	.word	0x0802d698

08005420 <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 8005420:	b580      	push	{r7, lr}
 8005422:	b082      	sub	sp, #8
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
    }
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	f7ff ffe9 	bl	8005400 <_ZN8touchgfx8DrawableD1Ev>
 800542e:	2128      	movs	r1, #40	; 0x28
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	f023 f9fe 	bl	8028832 <_ZdlPvj>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	4618      	mov	r0, r3
 800543a:	3708      	adds	r7, #8
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}

08005440 <_ZNK8touchgfx8Drawable17invalidateContentEv>:
     * Tell the framework that the contents of the Drawable needs to be redrawn. If the Drawable is
     * invisible, nothing happens. Subclasses of Drawable are encouraged to implement this function
     * and invalidate as little as possible, i.e. the smallest rectangle covering the visual element(s)
     * drawn by the widget.
     */
    virtual void invalidateContent() const
 8005440:	b580      	push	{r7, lr}
 8005442:	b082      	sub	sp, #8
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
    {
        // Consider checking if *this is in the draw chain
        if (visible)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800544e:	2b00      	cmp	r3, #0
 8005450:	d005      	beq.n	800545e <_ZNK8touchgfx8Drawable17invalidateContentEv+0x1e>
        {
            invalidate();
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	3314      	adds	r3, #20
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	4798      	blx	r3
        }
    }
 800545e:	bf00      	nop
 8005460:	3708      	adds	r7, #8
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}

08005466 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * Function for obtaining the first child of this drawable if any.
     *
     * @return A pointer on the first child drawable if any.
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
 8005466:	b480      	push	{r7}
 8005468:	b083      	sub	sp, #12
 800546a:	af00      	add	r7, sp, #0
 800546c:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800546e:	2300      	movs	r3, #0
    }
 8005470:	4618      	mov	r0, r3
 8005472:	370c      	adds	r7, #12
 8005474:	46bd      	mov	sp, r7
 8005476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547a:	4770      	bx	lr

0800547c <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 800547c:	b480      	push	{r7}
 800547e:	b083      	sub	sp, #12
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
 8005484:	460b      	mov	r3, r1
 8005486:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	887a      	ldrh	r2, [r7, #2]
 800548c:	809a      	strh	r2, [r3, #4]
    }
 800548e:	bf00      	nop
 8005490:	370c      	adds	r7, #12
 8005492:	46bd      	mov	sp, r7
 8005494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005498:	4770      	bx	lr

0800549a <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 800549a:	b480      	push	{r7}
 800549c:	b083      	sub	sp, #12
 800549e:	af00      	add	r7, sp, #0
 80054a0:	6078      	str	r0, [r7, #4]
 80054a2:	460b      	mov	r3, r1
 80054a4:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	887a      	ldrh	r2, [r7, #2]
 80054aa:	80da      	strh	r2, [r3, #6]
    }
 80054ac:	bf00      	nop
 80054ae:	370c      	adds	r7, #12
 80054b0:	46bd      	mov	sp, r7
 80054b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b6:	4770      	bx	lr

080054b8 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 80054b8:	b480      	push	{r7}
 80054ba:	b083      	sub	sp, #12
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
 80054c0:	460b      	mov	r3, r1
 80054c2:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	887a      	ldrh	r2, [r7, #2]
 80054c8:	811a      	strh	r2, [r3, #8]
    }
 80054ca:	bf00      	nop
 80054cc:	370c      	adds	r7, #12
 80054ce:	46bd      	mov	sp, r7
 80054d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d4:	4770      	bx	lr

080054d6 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 80054d6:	b480      	push	{r7}
 80054d8:	b083      	sub	sp, #12
 80054da:	af00      	add	r7, sp, #0
 80054dc:	6078      	str	r0, [r7, #4]
 80054de:	460b      	mov	r3, r1
 80054e0:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	887a      	ldrh	r2, [r7, #2]
 80054e6:	815a      	strh	r2, [r3, #10]
    }
 80054e8:	bf00      	nop
 80054ea:	370c      	adds	r7, #12
 80054ec:	46bd      	mov	sp, r7
 80054ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f2:	4770      	bx	lr

080054f4 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 80054f4:	b480      	push	{r7}
 80054f6:	b083      	sub	sp, #12
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
    {
    }
 80054fc:	bf00      	nop
 80054fe:	370c      	adds	r7, #12
 8005500:	46bd      	mov	sp, r7
 8005502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005506:	4770      	bx	lr

08005508 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8005508:	b480      	push	{r7}
 800550a:	b083      	sub	sp, #12
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
 8005510:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8005512:	bf00      	nop
 8005514:	370c      	adds	r7, #12
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr

0800551e <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800551e:	b480      	push	{r7}
 8005520:	b083      	sub	sp, #12
 8005522:	af00      	add	r7, sp, #0
 8005524:	6078      	str	r0, [r7, #4]
 8005526:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8005528:	bf00      	nop
 800552a:	370c      	adds	r7, #12
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr

08005534 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * ignores the event. The event is only received if the drawable is touchable and
     * visible.
     *
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
 8005534:	b480      	push	{r7}
 8005536:	b083      	sub	sp, #12
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800553e:	bf00      	nop
 8005540:	370c      	adds	r7, #12
 8005542:	46bd      	mov	sp, r7
 8005544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005548:	4770      	bx	lr

0800554a <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 800554a:	b480      	push	{r7}
 800554c:	b083      	sub	sp, #12
 800554e:	af00      	add	r7, sp, #0
 8005550:	6078      	str	r0, [r7, #4]
    {
    }
 8005552:	bf00      	nop
 8005554:	370c      	adds	r7, #12
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr

0800555e <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 800555e:	b480      	push	{r7}
 8005560:	b083      	sub	sp, #12
 8005562:	af00      	add	r7, sp, #0
 8005564:	6078      	str	r0, [r7, #4]
    {
        return visible;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 800556c:	4618      	mov	r0, r3
 800556e:	370c      	adds	r7, #12
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr

08005578 <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 8005578:	b480      	push	{r7}
 800557a:	b083      	sub	sp, #12
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 8005586:	4618      	mov	r0, r3
 8005588:	370c      	adds	r7, #12
 800558a:	46bd      	mov	sp, r7
 800558c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005590:	4770      	bx	lr

08005592 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 8005592:	b580      	push	{r7, lr}
 8005594:	b082      	sub	sp, #8
 8005596:	af00      	add	r7, sp, #0
 8005598:	6078      	str	r0, [r7, #4]
 800559a:	460b      	mov	r3, r1
 800559c:	807b      	strh	r3, [r7, #2]
 800559e:	4613      	mov	r3, r2
 80055a0:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	3354      	adds	r3, #84	; 0x54
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	8879      	ldrh	r1, [r7, #2]
 80055ac:	687a      	ldr	r2, [r7, #4]
 80055ae:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80055b2:	b292      	uxth	r2, r2
 80055b4:	1a8a      	subs	r2, r1, r2
 80055b6:	b292      	uxth	r2, r2
 80055b8:	b210      	sxth	r0, r2
 80055ba:	8839      	ldrh	r1, [r7, #0]
 80055bc:	687a      	ldr	r2, [r7, #4]
 80055be:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80055c2:	b292      	uxth	r2, r2
 80055c4:	1a8a      	subs	r2, r1, r2
 80055c6:	b292      	uxth	r2, r2
 80055c8:	b212      	sxth	r2, r2
 80055ca:	4601      	mov	r1, r0
 80055cc:	6878      	ldr	r0, [r7, #4]
 80055ce:	4798      	blx	r3
    }
 80055d0:	bf00      	nop
 80055d2:	3708      	adds	r7, #8
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}

080055d8 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 80055d8:	b480      	push	{r7}
 80055da:	b083      	sub	sp, #12
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80055e6:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80055ee:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80055f6:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 80055f8:	bf00      	nop
 80055fa:	370c      	adds	r7, #12
 80055fc:	46bd      	mov	sp, r7
 80055fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005602:	4770      	bx	lr

08005604 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 8005604:	b580      	push	{r7, lr}
 8005606:	b084      	sub	sp, #16
 8005608:	af00      	add	r7, sp, #0
 800560a:	60f8      	str	r0, [r7, #12]
 800560c:	60b9      	str	r1, [r7, #8]
 800560e:	607a      	str	r2, [r7, #4]
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
 8005610:	68f8      	ldr	r0, [r7, #12]
 8005612:	f7ff ffe1 	bl	80055d8 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681a      	ldr	r2, [r3, #0]
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	68fa      	ldr	r2, [r7, #12]
 8005622:	601a      	str	r2, [r3, #0]
    }
 8005624:	bf00      	nop
 8005626:	3710      	adds	r7, #16
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}

0800562c <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 800562c:	b580      	push	{r7, lr}
 800562e:	b082      	sub	sp, #8
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	3320      	adds	r3, #32
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	6878      	ldr	r0, [r7, #4]
 800563e:	4798      	blx	r3
    }
 8005640:	bf00      	nop
 8005642:	3708      	adds	r7, #8
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}

08005648 <_ZN8touchgfx3HAL3lcdEv>:
    static LCD& lcd()
 8005648:	b480      	push	{r7}
 800564a:	af00      	add	r7, sp, #0
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 800564c:	4b0b      	ldr	r3, [pc, #44]	; (800567c <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8005654:	2b00      	cmp	r3, #0
 8005656:	d008      	beq.n	800566a <_ZN8touchgfx3HAL3lcdEv+0x22>
 8005658:	4b08      	ldr	r3, [pc, #32]	; (800567c <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800565e:	2b00      	cmp	r3, #0
 8005660:	d003      	beq.n	800566a <_ZN8touchgfx3HAL3lcdEv+0x22>
            return *instance->auxiliaryLCD;
 8005662:	4b06      	ldr	r3, [pc, #24]	; (800567c <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005668:	e002      	b.n	8005670 <_ZN8touchgfx3HAL3lcdEv+0x28>
        return instance->lcdRef;
 800566a:	4b04      	ldr	r3, [pc, #16]	; (800567c <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	689b      	ldr	r3, [r3, #8]
    }
 8005670:	4618      	mov	r0, r3
 8005672:	46bd      	mov	sp, r7
 8005674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005678:	4770      	bx	lr
 800567a:	bf00      	nop
 800567c:	24026240 	.word	0x24026240

08005680 <_ZN8touchgfx3HAL18getLCDRefreshCountEv>:
    uint32_t getLCDRefreshCount()
 8005680:	b480      	push	{r7}
 8005682:	b083      	sub	sp, #12
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
        return vSyncForFrame;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
    }
 800568e:	4618      	mov	r0, r3
 8005690:	370c      	adds	r7, #12
 8005692:	46bd      	mov	sp, r7
 8005694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005698:	4770      	bx	lr

0800569a <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 800569a:	b480      	push	{r7}
 800569c:	b083      	sub	sp, #12
 800569e:	af00      	add	r7, sp, #0
 80056a0:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 80056a8:	3301      	adds	r3, #1
 80056aa:	b2da      	uxtb	r2, r3
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 80056b2:	bf00      	nop
 80056b4:	370c      	adds	r7, #12
 80056b6:	46bd      	mov	sp, r7
 80056b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056bc:	4770      	bx	lr

080056be <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     * Since a Widget is only one Drawable, Widget::getLastChild simply yields itself as
     * result, but only if the Widget isVisible and isTouchable.
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
 80056be:	b580      	push	{r7, lr}
 80056c0:	b084      	sub	sp, #16
 80056c2:	af00      	add	r7, sp, #0
 80056c4:	60f8      	str	r0, [r7, #12]
 80056c6:	607b      	str	r3, [r7, #4]
 80056c8:	460b      	mov	r3, r1
 80056ca:	817b      	strh	r3, [r7, #10]
 80056cc:	4613      	mov	r3, r2
 80056ce:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	4618      	mov	r0, r3
 80056d4:	f7ff ff43 	bl	800555e <_ZNK8touchgfx8Drawable9isVisibleEv>
 80056d8:	4603      	mov	r3, r0
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d008      	beq.n	80056f0 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	4618      	mov	r0, r3
 80056e2:	f7ff ff49 	bl	8005578 <_ZNK8touchgfx8Drawable11isTouchableEv>
 80056e6:	4603      	mov	r3, r0
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d001      	beq.n	80056f0 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 80056ec:	2301      	movs	r3, #1
 80056ee:	e000      	b.n	80056f2 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 80056f0:	2300      	movs	r3, #0
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d002      	beq.n	80056fc <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 80056f6:	68fa      	ldr	r2, [r7, #12]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	601a      	str	r2, [r3, #0]
        }
    }
 80056fc:	bf00      	nop
 80056fe:	3710      	adds	r7, #16
 8005700:	46bd      	mov	sp, r7
 8005702:	bd80      	pop	{r7, pc}

08005704 <_ZN8touchgfx6WidgetD1Ev>:
class Widget : public Drawable
 8005704:	b580      	push	{r7, lr}
 8005706:	b082      	sub	sp, #8
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
 800570c:	4a05      	ldr	r2, [pc, #20]	; (8005724 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	601a      	str	r2, [r3, #0]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	4618      	mov	r0, r3
 8005716:	f7ff fe73 	bl	8005400 <_ZN8touchgfx8DrawableD1Ev>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	4618      	mov	r0, r3
 800571e:	3708      	adds	r7, #8
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}
 8005724:	0802c41c 	.word	0x0802c41c

08005728 <_ZN8touchgfx6WidgetD0Ev>:
 8005728:	b580      	push	{r7, lr}
 800572a:	b082      	sub	sp, #8
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f7ff ffe7 	bl	8005704 <_ZN8touchgfx6WidgetD1Ev>
 8005736:	2128      	movs	r1, #40	; 0x28
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	f023 f87a 	bl	8028832 <_ZdlPvj>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	4618      	mov	r0, r3
 8005742:	3708      	adds	r7, #8
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}

08005748 <_ZN8touchgfx15VideoControllerD1Ev>:
        STOP,      ///< Stop the video
        SET_REPEAT ///< Set repeat mode
    };

    /** Virtual destructor. */
    virtual ~VideoController()
 8005748:	b480      	push	{r7}
 800574a:	b083      	sub	sp, #12
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
    {
 8005750:	4a04      	ldr	r2, [pc, #16]	; (8005764 <_ZN8touchgfx15VideoControllerD1Ev+0x1c>)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	601a      	str	r2, [r3, #0]
    }
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	4618      	mov	r0, r3
 800575a:	370c      	adds	r7, #12
 800575c:	46bd      	mov	sp, r7
 800575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005762:	4770      	bx	lr
 8005764:	0802c3e0 	.word	0x0802c3e0

08005768 <_ZN8touchgfx15VideoControllerD0Ev>:
    virtual ~VideoController()
 8005768:	b580      	push	{r7, lr}
 800576a:	b082      	sub	sp, #8
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
    }
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	f7ff ffe9 	bl	8005748 <_ZN8touchgfx15VideoControllerD1Ev>
 8005776:	2104      	movs	r1, #4
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	f023 f85a 	bl	8028832 <_ZdlPvj>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	4618      	mov	r0, r3
 8005782:	3708      	adds	r7, #8
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}

08005788 <_ZN20HardwareMJPEGDecoder6addDMAERN8touchgfx13DMA_InterfaceE>:
    void addDMA(touchgfx::DMA_Interface& dma) { pDma = &dma; }
 8005788:	b480      	push	{r7}
 800578a:	b083      	sub	sp, #12
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
 8005790:	6039      	str	r1, [r7, #0]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	683a      	ldr	r2, [r7, #0]
 8005796:	645a      	str	r2, [r3, #68]	; 0x44
 8005798:	bf00      	nop
 800579a:	370c      	adds	r7, #12
 800579c:	46bd      	mov	sp, r7
 800579e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a2:	4770      	bx	lr

080057a4 <_ZN8touchgfx11VideoWidget14setVideoBufferEPh>:
     * Set video buffer data.
     * Only used when video frames are decoded to a buffer and not directly to the framebuffer.
     *
     * @param [in] videoBuffer Video buffer.
     */
    void setVideoBuffer(uint8_t* const videoBuffer)
 80057a4:	b480      	push	{r7}
 80057a6:	b083      	sub	sp, #12
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
 80057ac:	6039      	str	r1, [r7, #0]
    {
        buffer = videoBuffer;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	683a      	ldr	r2, [r7, #0]
 80057b2:	631a      	str	r2, [r3, #48]	; 0x30
    }
 80057b4:	bf00      	nop
 80057b6:	370c      	adds	r7, #12
 80057b8:	46bd      	mov	sp, r7
 80057ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057be:	4770      	bx	lr

080057c0 <_ZN8touchgfx11VideoWidget20setVideoBufferFormatENS_6Bitmap12BitmapFormatEss>:
     *
     * @param bufferFormat Format of the videoBuffer (RGB565 or RGB888)
     * @param width  Width of the videoBuffer in pixels
     * @param height Height of the videoBuffer in pixels
     */
    void setVideoBufferFormat(Bitmap::BitmapFormat bufferFormat, int16_t width, int16_t height)
 80057c0:	b480      	push	{r7}
 80057c2:	b085      	sub	sp, #20
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	60f8      	str	r0, [r7, #12]
 80057c8:	4608      	mov	r0, r1
 80057ca:	4611      	mov	r1, r2
 80057cc:	461a      	mov	r2, r3
 80057ce:	4603      	mov	r3, r0
 80057d0:	72fb      	strb	r3, [r7, #11]
 80057d2:	460b      	mov	r3, r1
 80057d4:	813b      	strh	r3, [r7, #8]
 80057d6:	4613      	mov	r3, r2
 80057d8:	80fb      	strh	r3, [r7, #6]
    {
        format = bufferFormat;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	7afa      	ldrb	r2, [r7, #11]
 80057de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        bufferWidth = width;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	893a      	ldrh	r2, [r7, #8]
 80057e6:	86da      	strh	r2, [r3, #54]	; 0x36
        bufferHeight = height;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	88fa      	ldrh	r2, [r7, #6]
 80057ec:	871a      	strh	r2, [r3, #56]	; 0x38
    }
 80057ee:	bf00      	nop
 80057f0:	3714      	adds	r7, #20
 80057f2:	46bd      	mov	sp, r7
 80057f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f8:	4770      	bx	lr
	...

080057fc <__NVIC_EnableIRQ>:
{
 80057fc:	b480      	push	{r7}
 80057fe:	b083      	sub	sp, #12
 8005800:	af00      	add	r7, sp, #0
 8005802:	4603      	mov	r3, r0
 8005804:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005806:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800580a:	2b00      	cmp	r3, #0
 800580c:	db0b      	blt.n	8005826 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800580e:	88fb      	ldrh	r3, [r7, #6]
 8005810:	f003 021f 	and.w	r2, r3, #31
 8005814:	4907      	ldr	r1, [pc, #28]	; (8005834 <__NVIC_EnableIRQ+0x38>)
 8005816:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800581a:	095b      	lsrs	r3, r3, #5
 800581c:	2001      	movs	r0, #1
 800581e:	fa00 f202 	lsl.w	r2, r0, r2
 8005822:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005826:	bf00      	nop
 8005828:	370c      	adds	r7, #12
 800582a:	46bd      	mov	sp, r7
 800582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005830:	4770      	bx	lr
 8005832:	bf00      	nop
 8005834:	e000e100 	.word	0xe000e100

08005838 <__NVIC_DisableIRQ>:
{
 8005838:	b480      	push	{r7}
 800583a:	b083      	sub	sp, #12
 800583c:	af00      	add	r7, sp, #0
 800583e:	4603      	mov	r3, r0
 8005840:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005842:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005846:	2b00      	cmp	r3, #0
 8005848:	db12      	blt.n	8005870 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800584a:	88fb      	ldrh	r3, [r7, #6]
 800584c:	f003 021f 	and.w	r2, r3, #31
 8005850:	490a      	ldr	r1, [pc, #40]	; (800587c <__NVIC_DisableIRQ+0x44>)
 8005852:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005856:	095b      	lsrs	r3, r3, #5
 8005858:	2001      	movs	r0, #1
 800585a:	fa00 f202 	lsl.w	r2, r0, r2
 800585e:	3320      	adds	r3, #32
 8005860:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8005864:	f3bf 8f4f 	dsb	sy
}
 8005868:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800586a:	f3bf 8f6f 	isb	sy
}
 800586e:	bf00      	nop
}
 8005870:	bf00      	nop
 8005872:	370c      	adds	r7, #12
 8005874:	46bd      	mov	sp, r7
 8005876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587a:	4770      	bx	lr
 800587c:	e000e100 	.word	0xe000e100

08005880 <__NVIC_SetPriority>:
{
 8005880:	b480      	push	{r7}
 8005882:	b083      	sub	sp, #12
 8005884:	af00      	add	r7, sp, #0
 8005886:	4603      	mov	r3, r0
 8005888:	6039      	str	r1, [r7, #0]
 800588a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800588c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005890:	2b00      	cmp	r3, #0
 8005892:	db0a      	blt.n	80058aa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	b2da      	uxtb	r2, r3
 8005898:	490c      	ldr	r1, [pc, #48]	; (80058cc <__NVIC_SetPriority+0x4c>)
 800589a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800589e:	0112      	lsls	r2, r2, #4
 80058a0:	b2d2      	uxtb	r2, r2
 80058a2:	440b      	add	r3, r1
 80058a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80058a8:	e00a      	b.n	80058c0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	b2da      	uxtb	r2, r3
 80058ae:	4908      	ldr	r1, [pc, #32]	; (80058d0 <__NVIC_SetPriority+0x50>)
 80058b0:	88fb      	ldrh	r3, [r7, #6]
 80058b2:	f003 030f 	and.w	r3, r3, #15
 80058b6:	3b04      	subs	r3, #4
 80058b8:	0112      	lsls	r2, r2, #4
 80058ba:	b2d2      	uxtb	r2, r2
 80058bc:	440b      	add	r3, r1
 80058be:	761a      	strb	r2, [r3, #24]
}
 80058c0:	bf00      	nop
 80058c2:	370c      	adds	r7, #12
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr
 80058cc:	e000e100 	.word	0xe000e100
 80058d0:	e000ed00 	.word	0xe000ed00

080058d4 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
    static uint16_t lcd_int_active_line;
    static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 80058d4:	b5b0      	push	{r4, r5, r7, lr}
 80058d6:	b082      	sub	sp, #8
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	4618      	mov	r0, r3
 80058e0:	f014 fea9 	bl	801a636 <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 80058e4:	687d      	ldr	r5, [r7, #4]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	3364      	adds	r3, #100	; 0x64
 80058ec:	681c      	ldr	r4, [r3, #0]
 80058ee:	f018 f8c1 	bl	801da74 <_ZN8touchgfx11Application11getInstanceEv>
 80058f2:	4603      	mov	r3, r0
 80058f4:	4619      	mov	r1, r3
 80058f6:	4628      	mov	r0, r5
 80058f8:	47a0      	blx	r4
    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	3388      	adds	r3, #136	; 0x88
 8005902:	681c      	ldr	r4, [r3, #0]
 8005904:	4a0b      	ldr	r2, [pc, #44]	; (8005934 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x60>)
 8005906:	2300      	movs	r3, #0
 8005908:	490b      	ldr	r1, [pc, #44]	; (8005938 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x64>)
 800590a:	47a0      	blx	r4

    /*
     * Add DMA2D to hardware decoder
     */
    mjpegdecoder1.addDMA(dma);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	4619      	mov	r1, r3
 8005912:	480a      	ldr	r0, [pc, #40]	; (800593c <_ZN20TouchGFXGeneratedHAL10initializeEv+0x68>)
 8005914:	f7ff ff38 	bl	8005788 <_ZN20HardwareMJPEGDecoder6addDMAERN8touchgfx13DMA_InterfaceE>

    /*
     * Add hardware decoder to video controller
     */
    videoController.addDecoder(mjpegdecoder1, 0);
 8005918:	2200      	movs	r2, #0
 800591a:	4908      	ldr	r1, [pc, #32]	; (800593c <_ZN20TouchGFXGeneratedHAL10initializeEv+0x68>)
 800591c:	4808      	ldr	r0, [pc, #32]	; (8005940 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x6c>)
 800591e:	f000 fa45 	bl	8005dac <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10addDecoderER12MJPEGDecoderm>
    videoController.setRGBBuffer((uint8_t*)videoRGBBuffer, sizeof(videoRGBBuffer));
 8005922:	4a08      	ldr	r2, [pc, #32]	; (8005944 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x70>)
 8005924:	4908      	ldr	r1, [pc, #32]	; (8005948 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x74>)
 8005926:	4806      	ldr	r0, [pc, #24]	; (8005940 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x6c>)
 8005928:	f000 fa60 	bl	8005dec <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12setRGBBufferEPhj>
}
 800592c:	bf00      	nop
 800592e:	3708      	adds	r7, #8
 8005930:	46bd      	mov	sp, r7
 8005932:	bdb0      	pop	{r4, r5, r7, pc}
 8005934:	2409fa00 	.word	0x2409fa00
 8005938:	24040000 	.word	0x24040000
 800593c:	24007164 	.word	0x24007164
 8005940:	240071ac 	.word	0x240071ac
 8005944:	0005fa00 	.word	0x0005fa00
 8005948:	d0000000 	.word	0xd0000000

0800594c <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b082      	sub	sp, #8
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 8005954:	2109      	movs	r1, #9
 8005956:	205a      	movs	r0, #90	; 0x5a
 8005958:	f7ff ff92 	bl	8005880 <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 800595c:	2109      	movs	r1, #9
 800595e:	2058      	movs	r0, #88	; 0x58
 8005960:	f7ff ff8e 	bl	8005880 <__NVIC_SetPriority>
}
 8005964:	bf00      	nop
 8005966:	3708      	adds	r7, #8
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}

0800596c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b082      	sub	sp, #8
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 8005974:	205a      	movs	r0, #90	; 0x5a
 8005976:	f7ff ff41 	bl	80057fc <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 800597a:	2058      	movs	r0, #88	; 0x58
 800597c:	f7ff ff3e 	bl	80057fc <__NVIC_EnableIRQ>
}
 8005980:	bf00      	nop
 8005982:	3708      	adds	r7, #8
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}

08005988 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b082      	sub	sp, #8
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 8005990:	205a      	movs	r0, #90	; 0x5a
 8005992:	f7ff ff51 	bl	8005838 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 8005996:	2058      	movs	r0, #88	; 0x58
 8005998:	f7ff ff4e 	bl	8005838 <__NVIC_DisableIRQ>
}
 800599c:	bf00      	nop
 800599e:	3708      	adds	r7, #8
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}

080059a4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 80059a4:	b480      	push	{r7}
 80059a6:	b083      	sub	sp, #12
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 80059ac:	4b11      	ldr	r3, [pc, #68]	; (80059f4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 80059ae:	68db      	ldr	r3, [r3, #12]
 80059b0:	b29b      	uxth	r3, r3
 80059b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	3b01      	subs	r3, #1
 80059ba:	b29a      	uxth	r2, r3
 80059bc:	4b0e      	ldr	r3, [pc, #56]	; (80059f8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 80059be:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 80059c0:	4b0c      	ldr	r3, [pc, #48]	; (80059f4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 80059c2:	691b      	ldr	r3, [r3, #16]
 80059c4:	b29b      	uxth	r3, r3
 80059c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80059ca:	b29b      	uxth	r3, r3
 80059cc:	3b01      	subs	r3, #1
 80059ce:	b29a      	uxth	r2, r3
 80059d0:	4b0a      	ldr	r3, [pc, #40]	; (80059fc <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 80059d2:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 80059d4:	4b08      	ldr	r3, [pc, #32]	; (80059f8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 80059d6:	881a      	ldrh	r2, [r3, #0]
 80059d8:	4b06      	ldr	r3, [pc, #24]	; (80059f4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 80059da:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 80059dc:	4b05      	ldr	r3, [pc, #20]	; (80059f4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 80059de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059e0:	4a04      	ldr	r2, [pc, #16]	; (80059f4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 80059e2:	f043 0301 	orr.w	r3, r3, #1
 80059e6:	6353      	str	r3, [r2, #52]	; 0x34
}
 80059e8:	bf00      	nop
 80059ea:	370c      	adds	r7, #12
 80059ec:	46bd      	mov	sp, r7
 80059ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f2:	4770      	bx	lr
 80059f4:	50001000 	.word	0x50001000
 80059f8:	240071f6 	.word	0x240071f6
 80059fc:	240071f8 	.word	0x240071f8

08005a00 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:

bool TouchGFXGeneratedHAL::beginFrame()
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b082      	sub	sp, #8
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
    return HAL::beginFrame();
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f014 fdfa 	bl	801a604 <_ZN8touchgfx3HAL10beginFrameEv>
 8005a10:	4603      	mov	r3, r0
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	3708      	adds	r7, #8
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bd80      	pop	{r7, pc}
	...

08005a1c <_ZN20TouchGFXGeneratedHAL8endFrameEv>:

void TouchGFXGeneratedHAL::endFrame()
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b082      	sub	sp, #8
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
    if (frameBufferUpdatedThisFrame)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d002      	beq.n	8005a34 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x18>
    {
        refreshRequested = true;
 8005a2e:	4b07      	ldr	r3, [pc, #28]	; (8005a4c <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x30>)
 8005a30:	2201      	movs	r2, #1
 8005a32:	701a      	strb	r2, [r3, #0]
    }
    HAL::endFrame();
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	4618      	mov	r0, r3
 8005a38:	f014 fdf0 	bl	801a61c <_ZN8touchgfx3HAL8endFrameEv>
    videoController.endFrame();
 8005a3c:	4804      	ldr	r0, [pc, #16]	; (8005a50 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x34>)
 8005a3e:	f000 f9eb 	bl	8005e18 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE8endFrameEv>
}
 8005a42:	bf00      	nop
 8005a44:	3708      	adds	r7, #8
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}
 8005a4a:	bf00      	nop
 8005a4c:	240071f4 	.word	0x240071f4
 8005a50:	240071ac 	.word	0x240071ac

08005a54 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 8005a54:	b480      	push	{r7}
 8005a56:	b083      	sub	sp, #12
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8005a5c:	4b03      	ldr	r3, [pc, #12]	; (8005a6c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 8005a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	370c      	adds	r7, #12
 8005a64:	46bd      	mov	sp, r7
 8005a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6a:	4770      	bx	lr
 8005a6c:	50001084 	.word	0x50001084

08005a70 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b083      	sub	sp, #12
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
 8005a78:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8005a7a:	4a06      	ldr	r2, [pc, #24]	; (8005a94 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8005a80:	4b05      	ldr	r3, [pc, #20]	; (8005a98 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 8005a82:	2201      	movs	r2, #1
 8005a84:	625a      	str	r2, [r3, #36]	; 0x24
}
 8005a86:	bf00      	nop
 8005a88:	370c      	adds	r7, #12
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a90:	4770      	bx	lr
 8005a92:	bf00      	nop
 8005a94:	50001084 	.word	0x50001084
 8005a98:	50001000 	.word	0x50001000

08005a9c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b082      	sub	sp, #8
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
 8005aa4:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6839      	ldr	r1, [r7, #0]
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f014 fd74 	bl	801a598 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 8005ab0:	bf00      	nop
 8005ab2:	3708      	adds	r7, #8
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}

08005ab8 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b084      	sub	sp, #16
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	60f8      	str	r0, [r7, #12]
 8005ac0:	60b9      	str	r1, [r7, #8]
 8005ac2:	607a      	str	r2, [r7, #4]
 8005ac4:	603b      	str	r3, [r7, #0]
    return HAL::blockCopy(dest, src, numBytes);
 8005ac6:	68f8      	ldr	r0, [r7, #12]
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	687a      	ldr	r2, [r7, #4]
 8005acc:	68b9      	ldr	r1, [r7, #8]
 8005ace:	f014 fece 	bl	801a86e <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 8005ad2:	4603      	mov	r3, r0
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	3710      	adds	r7, #16
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}

08005adc <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv>:

void TouchGFXGeneratedHAL::InvalidateCache()
{
 8005adc:	b480      	push	{r7}
 8005ade:	b087      	sub	sp, #28
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8005ae4:	4b26      	ldr	r3, [pc, #152]	; (8005b80 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa4>)
 8005ae6:	695b      	ldr	r3, [r3, #20]
 8005ae8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	bf14      	ite	ne
 8005af0:	2301      	movne	r3, #1
 8005af2:	2300      	moveq	r3, #0
 8005af4:	b2db      	uxtb	r3, r3
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d03c      	beq.n	8005b74 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x98>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8005afa:	4b21      	ldr	r3, [pc, #132]	; (8005b80 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa4>)
 8005afc:	2200      	movs	r2, #0
 8005afe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8005b02:	f3bf 8f4f 	dsb	sy
}
 8005b06:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8005b08:	4b1d      	ldr	r3, [pc, #116]	; (8005b80 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa4>)
 8005b0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b0e:	617b      	str	r3, [r7, #20]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	0b5b      	lsrs	r3, r3, #13
 8005b14:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8005b18:	613b      	str	r3, [r7, #16]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	08db      	lsrs	r3, r3, #3
 8005b1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b22:	60fb      	str	r3, [r7, #12]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	015a      	lsls	r2, r3, #5
 8005b28:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8005b2c:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8005b2e:	68fa      	ldr	r2, [r7, #12]
 8005b30:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8005b32:	4913      	ldr	r1, [pc, #76]	; (8005b80 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa4>)
 8005b34:	4313      	orrs	r3, r2
 8005b36:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	1e5a      	subs	r2, r3, #1
 8005b3e:	60fa      	str	r2, [r7, #12]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	bf14      	ite	ne
 8005b44:	2301      	movne	r3, #1
 8005b46:	2300      	moveq	r3, #0
 8005b48:	b2db      	uxtb	r3, r3
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d000      	beq.n	8005b50 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x74>
      do {
 8005b4e:	e7e9      	b.n	8005b24 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x48>
    } while(sets-- != 0U);
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	1e5a      	subs	r2, r3, #1
 8005b54:	613a      	str	r2, [r7, #16]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	bf14      	ite	ne
 8005b5a:	2301      	movne	r3, #1
 8005b5c:	2300      	moveq	r3, #0
 8005b5e:	b2db      	uxtb	r3, r3
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d000      	beq.n	8005b66 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x8a>
    do {
 8005b64:	e7d9      	b.n	8005b1a <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x3e>
  __ASM volatile ("dsb 0xF":::"memory");
 8005b66:	f3bf 8f4f 	dsb	sy
}
 8005b6a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005b6c:	f3bf 8f6f 	isb	sy
}
 8005b70:	bf00      	nop
}
 8005b72:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 8005b74:	bf00      	nop
 8005b76:	371c      	adds	r7, #28
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr
 8005b80:	e000ed00 	.word	0xe000ed00

08005b84 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:

void TouchGFXGeneratedHAL::FlushCache()
{
 8005b84:	b480      	push	{r7}
 8005b86:	b087      	sub	sp, #28
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8005b8c:	4b26      	ldr	r3, [pc, #152]	; (8005c28 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa4>)
 8005b8e:	695b      	ldr	r3, [r3, #20]
 8005b90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	bf14      	ite	ne
 8005b98:	2301      	movne	r3, #1
 8005b9a:	2300      	moveq	r3, #0
 8005b9c:	b2db      	uxtb	r3, r3
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d03c      	beq.n	8005c1c <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x98>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8005ba2:	4b21      	ldr	r3, [pc, #132]	; (8005c28 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa4>)
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8005baa:	f3bf 8f4f 	dsb	sy
}
 8005bae:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8005bb0:	4b1d      	ldr	r3, [pc, #116]	; (8005c28 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa4>)
 8005bb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005bb6:	617b      	str	r3, [r7, #20]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	0b5b      	lsrs	r3, r3, #13
 8005bbc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8005bc0:	613b      	str	r3, [r7, #16]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	08db      	lsrs	r3, r3, #3
 8005bc6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005bca:	60fb      	str	r3, [r7, #12]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	015a      	lsls	r2, r3, #5
 8005bd0:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8005bd4:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8005bd6:	68fa      	ldr	r2, [r7, #12]
 8005bd8:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8005bda:	4913      	ldr	r1, [pc, #76]	; (8005c28 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa4>)
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	1e5a      	subs	r2, r3, #1
 8005be6:	60fa      	str	r2, [r7, #12]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	bf14      	ite	ne
 8005bec:	2301      	movne	r3, #1
 8005bee:	2300      	moveq	r3, #0
 8005bf0:	b2db      	uxtb	r3, r3
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d000      	beq.n	8005bf8 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x74>
      do {
 8005bf6:	e7e9      	b.n	8005bcc <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x48>
    } while(sets-- != 0U);
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	1e5a      	subs	r2, r3, #1
 8005bfc:	613a      	str	r2, [r7, #16]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	bf14      	ite	ne
 8005c02:	2301      	movne	r3, #1
 8005c04:	2300      	moveq	r3, #0
 8005c06:	b2db      	uxtb	r3, r3
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d000      	beq.n	8005c0e <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x8a>
    do {
 8005c0c:	e7d9      	b.n	8005bc2 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x3e>
  __ASM volatile ("dsb 0xF":::"memory");
 8005c0e:	f3bf 8f4f 	dsb	sy
}
 8005c12:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005c14:	f3bf 8f6f 	isb	sy
}
 8005c18:	bf00      	nop
}
 8005c1a:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 8005c1c:	bf00      	nop
 8005c1e:	371c      	adds	r7, #28
 8005c20:	46bd      	mov	sp, r7
 8005c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c26:	4770      	bx	lr
 8005c28:	e000ed00 	.word	0xe000ed00

08005c2c <videoTaskFunc>:

extern "C" void videoTaskFunc(void *argument)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b082      	sub	sp, #8
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
    videoController.decoderTaskEntry();
 8005c34:	4803      	ldr	r0, [pc, #12]	; (8005c44 <videoTaskFunc+0x18>)
 8005c36:	f000 f934 	bl	8005ea2 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv>
}
 8005c3a:	bf00      	nop
 8005c3c:	3708      	adds	r7, #8
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}
 8005c42:	bf00      	nop
 8005c44:	240071ac 	.word	0x240071ac

08005c48 <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b082      	sub	sp, #8
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
        if (!HAL::getInstance())
 8005c50:	f7fc fa14 	bl	800207c <_ZN8touchgfx3HAL11getInstanceEv>
 8005c54:	4603      	mov	r3, r0
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	bf0c      	ite	eq
 8005c5a:	2301      	moveq	r3, #1
 8005c5c:	2300      	movne	r3, #0
 8005c5e:	b2db      	uxtb	r3, r3
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d132      	bne.n	8005cca <HAL_LTDC_LineEventCallback+0x82>
        {
            return;
        }

        if (LTDC->LIPCR == lcd_int_active_line)
 8005c64:	4b1b      	ldr	r3, [pc, #108]	; (8005cd4 <HAL_LTDC_LineEventCallback+0x8c>)
 8005c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c68:	4a1b      	ldr	r2, [pc, #108]	; (8005cd8 <HAL_LTDC_LineEventCallback+0x90>)
 8005c6a:	8812      	ldrh	r2, [r2, #0]
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	bf0c      	ite	eq
 8005c70:	2301      	moveq	r3, #1
 8005c72:	2300      	movne	r3, #0
 8005c74:	b2db      	uxtb	r3, r3
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d017      	beq.n	8005caa <HAL_LTDC_LineEventCallback+0x62>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 8005c7a:	4b18      	ldr	r3, [pc, #96]	; (8005cdc <HAL_LTDC_LineEventCallback+0x94>)
 8005c7c:	881b      	ldrh	r3, [r3, #0]
 8005c7e:	4619      	mov	r1, r3
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	f00b f947 	bl	8010f14 <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 8005c86:	f7fc f9f9 	bl	800207c <_ZN8touchgfx3HAL11getInstanceEv>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	f7ff fd04 	bl	800569a <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 8005c92:	f7fd fef7 	bl	8003a84 <_ZN8touchgfx10OSWrappers11signalVSyncEv>

            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 8005c96:	f7fc f9f1 	bl	800207c <_ZN8touchgfx3HAL11getInstanceEv>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	f015 fa11 	bl	801b0c4 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 8005ca2:	2000      	movs	r0, #0
 8005ca4:	f7fc f896 	bl	8001dd4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8005ca8:	e010      	b.n	8005ccc <HAL_LTDC_LineEventCallback+0x84>
        }
        else
        {
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8005caa:	4b0b      	ldr	r3, [pc, #44]	; (8005cd8 <HAL_LTDC_LineEventCallback+0x90>)
 8005cac:	881b      	ldrh	r3, [r3, #0]
 8005cae:	4619      	mov	r1, r3
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	f00b f92f 	bl	8010f14 <HAL_LTDC_ProgramLineEvent>

            // Signal to the framework that display update has finished.
            HAL::getInstance()->frontPorchEntered();
 8005cb6:	f7fc f9e1 	bl	800207c <_ZN8touchgfx3HAL11getInstanceEv>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	f7ff fcb5 	bl	800562c <_ZN8touchgfx3HAL17frontPorchEnteredEv>
            GPIO::clear(GPIO::VSYNC_FREQ);
 8005cc2:	2000      	movs	r0, #0
 8005cc4:	f7fc f8e4 	bl	8001e90 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8005cc8:	e000      	b.n	8005ccc <HAL_LTDC_LineEventCallback+0x84>
            return;
 8005cca:	bf00      	nop
        }
    }
 8005ccc:	3708      	adds	r7, #8
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}
 8005cd2:	bf00      	nop
 8005cd4:	50001000 	.word	0x50001000
 8005cd8:	240071f6 	.word	0x240071f6
 8005cdc:	240071f8 	.word	0x240071f8

08005ce0 <_ZN8touchgfx15VideoControllerC1Ev>:
class VideoController
 8005ce0:	b480      	push	{r7}
 8005ce2:	b083      	sub	sp, #12
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
 8005ce8:	4a04      	ldr	r2, [pc, #16]	; (8005cfc <_ZN8touchgfx15VideoControllerC1Ev+0x1c>)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	601a      	str	r2, [r3, #0]
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	370c      	adds	r7, #12
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfa:	4770      	bx	lr
 8005cfc:	0802c3e0 	.word	0x0802c3e0

08005d00 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EEC1Ev>:

template <uint32_t no_streams, uint32_t width, uint32_t height, uint32_t stride, touchgfx::Bitmap::BitmapFormat output_format>
class DedicatedBufferController : public touchgfx::VideoController
{
public:
    DedicatedBufferController()
 8005d00:	b5b0      	push	{r4, r5, r7, lr}
 8005d02:	b082      	sub	sp, #8
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f7ff ffe8 	bl	8005ce0 <_ZN8touchgfx15VideoControllerC1Ev>
 8005d10:	4a25      	ldr	r2, [pc, #148]	; (8005da8 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EEC1Ev+0xa8>)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	601a      	str	r2, [r3, #0]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	330c      	adds	r3, #12
 8005d1a:	2400      	movs	r4, #0
 8005d1c:	461d      	mov	r5, r3
 8005d1e:	2c00      	cmp	r4, #0
 8005d20:	db05      	blt.n	8005d2e <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EEC1Ev+0x2e>
 8005d22:	4628      	mov	r0, r5
 8005d24:	f000 f971 	bl	800600a <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE6StreamC1Ev>
 8005d28:	3524      	adds	r5, #36	; 0x24
 8005d2a:	3c01      	subs	r4, #1
 8005d2c:	e7f7      	b.n	8005d1e <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EEC1Ev+0x1e>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2200      	movs	r2, #0
 8005d32:	631a      	str	r2, [r3, #48]	; 0x30
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2200      	movs	r2, #0
 8005d38:	635a      	str	r2, [r3, #52]	; 0x34
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	639a      	str	r2, [r3, #56]	; 0x38
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2200      	movs	r2, #0
 8005d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2200      	movs	r2, #0
 8005d54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	641a      	str	r2, [r3, #64]	; 0x40
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2200      	movs	r2, #0
 8005d62:	645a      	str	r2, [r3, #68]	; 0x44
    {
        assert((no_streams > 0) && "Video: Number of streams zero!");

        // Clear arrays
        memset(decodeBuffers, 0, sizeof(decodeBuffers));
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	3308      	adds	r3, #8
 8005d68:	2204      	movs	r2, #4
 8005d6a:	2100      	movs	r1, #0
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	f022 fe1f 	bl	80289b0 <memset>
        memset(mjpegDecoders, 0, sizeof(mjpegDecoders));
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	3304      	adds	r3, #4
 8005d76:	2204      	movs	r2, #4
 8005d78:	2100      	movs	r1, #0
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f022 fe18 	bl	80289b0 <memset>

        // Initialize synchronization primitives
        semDecode = SEM_CREATE(); // Binary semaphore
 8005d80:	2200      	movs	r2, #0
 8005d82:	2100      	movs	r1, #0
 8005d84:	2001      	movs	r0, #1
 8005d86:	f010 f82e 	bl	8015de6 <osSemaphoreNew>
 8005d8a:	4602      	mov	r2, r0
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	641a      	str	r2, [r3, #64]	; 0x40
        mutexBuffers = MUTEX_CREATE();
 8005d90:	2000      	movs	r0, #0
 8005d92:	f00f ff1a 	bl	8015bca <osMutexNew>
 8005d96:	4602      	mov	r2, r0
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	645a      	str	r2, [r3, #68]	; 0x44
    }
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3708      	adds	r7, #8
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bdb0      	pop	{r4, r5, r7, pc}
 8005da6:	bf00      	nop
 8005da8:	0802c3a0 	.word	0x0802c3a0

08005dac <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10addDecoderER12MJPEGDecoderm>:
        bufferRGB = buffer;
        topBufferRGB = bufferRGB;
        sizeBufferRGB = sizeOfBuffer;
    }

    void addDecoder(MJPEGDecoder& decoder, uint32_t index)
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b084      	sub	sp, #16
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	60f8      	str	r0, [r7, #12]
 8005db4:	60b9      	str	r1, [r7, #8]
 8005db6:	607a      	str	r2, [r7, #4]
    {
        // Running in UI thread / main

        assert(index < no_streams);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d006      	beq.n	8005dcc <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10addDecoderER12MJPEGDecoderm+0x20>
 8005dbe:	4b08      	ldr	r3, [pc, #32]	; (8005de0 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10addDecoderER12MJPEGDecoderm+0x34>)
 8005dc0:	4a08      	ldr	r2, [pc, #32]	; (8005de4 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10addDecoderER12MJPEGDecoderm+0x38>)
 8005dc2:	f240 1103 	movw	r1, #259	; 0x103
 8005dc6:	4808      	ldr	r0, [pc, #32]	; (8005de8 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10addDecoderER12MJPEGDecoderm+0x3c>)
 8005dc8:	f022 fd62 	bl	8028890 <__assert_func>
        mjpegDecoders[index] = &decoder;
 8005dcc:	68fa      	ldr	r2, [r7, #12]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	009b      	lsls	r3, r3, #2
 8005dd2:	4413      	add	r3, r2
 8005dd4:	68ba      	ldr	r2, [r7, #8]
 8005dd6:	605a      	str	r2, [r3, #4]
    }
 8005dd8:	bf00      	nop
 8005dda:	3710      	adds	r7, #16
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}
 8005de0:	0802a40c 	.word	0x0802a40c
 8005de4:	0802a420 	.word	0x0802a420
 8005de8:	0802a588 	.word	0x0802a588

08005dec <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12setRGBBufferEPhj>:
    virtual void setRGBBuffer(uint8_t* buffer, size_t sizeOfBuffer)
 8005dec:	b480      	push	{r7}
 8005dee:	b085      	sub	sp, #20
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	60f8      	str	r0, [r7, #12]
 8005df4:	60b9      	str	r1, [r7, #8]
 8005df6:	607a      	str	r2, [r7, #4]
        bufferRGB = buffer;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	68ba      	ldr	r2, [r7, #8]
 8005dfc:	631a      	str	r2, [r3, #48]	; 0x30
        topBufferRGB = bufferRGB;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	639a      	str	r2, [r3, #56]	; 0x38
        sizeBufferRGB = sizeOfBuffer;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	687a      	ldr	r2, [r7, #4]
 8005e0a:	635a      	str	r2, [r3, #52]	; 0x34
    }
 8005e0c:	bf00      	nop
 8005e0e:	3714      	adds	r7, #20
 8005e10:	46bd      	mov	sp, r7
 8005e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e16:	4770      	bx	lr

08005e18 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE8endFrameEv>:

    void endFrame()
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b084      	sub	sp, #16
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
    {
        // Running in UI thread

        // Check if we should invalidate in next frame
        for (uint32_t i = 0; i < no_streams; i++)
 8005e20:	2300      	movs	r3, #0
 8005e22:	60fb      	str	r3, [r7, #12]
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d120      	bne.n	8005e6c <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE8endFrameEv+0x54>
        {
            Stream& stream = streams[i];
 8005e2a:	68fa      	ldr	r2, [r7, #12]
 8005e2c:	4613      	mov	r3, r2
 8005e2e:	00db      	lsls	r3, r3, #3
 8005e30:	4413      	add	r3, r2
 8005e32:	009b      	lsls	r3, r3, #2
 8005e34:	3308      	adds	r3, #8
 8005e36:	687a      	ldr	r2, [r7, #4]
 8005e38:	4413      	add	r3, r2
 8005e3a:	3304      	adds	r3, #4
 8005e3c:	60bb      	str	r3, [r7, #8]
            if (stream.isPlaying || stream.isShowingOneFrame)
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	7f5b      	ldrb	r3, [r3, #29]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d103      	bne.n	8005e4e <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE8endFrameEv+0x36>
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	7f9b      	ldrb	r3, [r3, #30]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d00a      	beq.n	8005e64 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE8endFrameEv+0x4c>
            {
                if (decodeForNextTick(stream))
 8005e4e:	68b9      	ldr	r1, [r7, #8]
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f000 f912 	bl	800607a <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE17decodeForNextTickERNS3_6StreamE>
 8005e56:	4603      	mov	r3, r0
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d003      	beq.n	8005e64 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE8endFrameEv+0x4c>
                {
                    stream.doDecode = true;
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	2201      	movs	r2, #1
 8005e60:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
        for (uint32_t i = 0; i < no_streams; i++)
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	3301      	adds	r3, #1
 8005e68:	60fb      	str	r3, [r7, #12]
 8005e6a:	e7db      	b.n	8005e24 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE8endFrameEv+0xc>
                }
            }
        }

        // Mark next draw as first
        firstDrawThisFrame = true;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2201      	movs	r2, #1
 8005e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        // Signal decoder thread to wake up
        SEM_POST(semDecode);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e78:	4618      	mov	r0, r3
 8005e7a:	f010 f88f 	bl	8015f9c <osSemaphoreRelease>
        // Unlock the buffer mutex. FreeRTOS does not allow unlocking a mutex you did not lock
        if (uiHasMutex)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d008      	beq.n	8005e9a <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE8endFrameEv+0x82>
        {
            MUTEX_UNLOCK(mutexBuffers);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	f00f ff6d 	bl	8015d6c <osMutexRelease>
            uiHasMutex = false;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2200      	movs	r2, #0
 8005e96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        }
    }
 8005e9a:	bf00      	nop
 8005e9c:	3710      	adds	r7, #16
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}

08005ea2 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv>:

    void decoderTaskEntry()
 8005ea2:	b590      	push	{r4, r7, lr}
 8005ea4:	b08b      	sub	sp, #44	; 0x2c
 8005ea6:	af02      	add	r7, sp, #8
 8005ea8:	6078      	str	r0, [r7, #4]
        // Running in Decoder thread!!

        while (1)
        {
            // Wait for synchronisation signal from UI thread
            SEM_WAIT(semDecode);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eae:	f04f 31ff 	mov.w	r1, #4294967295
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f010 f820 	bl	8015ef8 <osSemaphoreAcquire>

            // Lock out the UI by taking the mutex
            MUTEX_LOCK(mutexBuffers);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ebc:	f04f 31ff 	mov.w	r1, #4294967295
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	f00f ff08 	bl	8015cd6 <osMutexAcquire>

            // Update stream flags
            for (uint32_t i = 0; i < no_streams; i++)
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	61fb      	str	r3, [r7, #28]
 8005eca:	69fb      	ldr	r3, [r7, #28]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d115      	bne.n	8005efc <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x5a>
            {
                Stream& stream = streams[i];
 8005ed0:	69fa      	ldr	r2, [r7, #28]
 8005ed2:	4613      	mov	r3, r2
 8005ed4:	00db      	lsls	r3, r3, #3
 8005ed6:	4413      	add	r3, r2
 8005ed8:	009b      	lsls	r3, r3, #2
 8005eda:	3308      	adds	r3, #8
 8005edc:	687a      	ldr	r2, [r7, #4]
 8005ede:	4413      	add	r3, r2
 8005ee0:	3304      	adds	r3, #4
 8005ee2:	617b      	str	r3, [r7, #20]
                if (stream.doDecode)
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d002      	beq.n	8005ef4 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x52>
                {
                    stream.doInvalidateOnNextTick = true;
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	2201      	movs	r2, #1
 8005ef2:	77da      	strb	r2, [r3, #31]
            for (uint32_t i = 0; i < no_streams; i++)
 8005ef4:	69fb      	ldr	r3, [r7, #28]
 8005ef6:	3301      	adds	r3, #1
 8005ef8:	61fb      	str	r3, [r7, #28]
 8005efa:	e7e6      	b.n	8005eca <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x28>
                }
            }

            // Now decode all streams marked for invalidation in next tick
            for (uint32_t i = 0; i < no_streams; i++)
 8005efc:	2300      	movs	r3, #0
 8005efe:	61bb      	str	r3, [r7, #24]
 8005f00:	69bb      	ldr	r3, [r7, #24]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d17b      	bne.n	8005ffe <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x15c>
            {
                Stream& stream = streams[i];
 8005f06:	69ba      	ldr	r2, [r7, #24]
 8005f08:	4613      	mov	r3, r2
 8005f0a:	00db      	lsls	r3, r3, #3
 8005f0c:	4413      	add	r3, r2
 8005f0e:	009b      	lsls	r3, r3, #2
 8005f10:	3308      	adds	r3, #8
 8005f12:	687a      	ldr	r2, [r7, #4]
 8005f14:	4413      	add	r3, r2
 8005f16:	3304      	adds	r3, #4
 8005f18:	613b      	str	r3, [r7, #16]
                if (stream.doDecode)
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d068      	beq.n	8005ff6 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x154>
                {
                    MJPEGDecoder* const decoder = mjpegDecoders[i];
 8005f24:	687a      	ldr	r2, [r7, #4]
 8005f26:	69bb      	ldr	r3, [r7, #24]
 8005f28:	009b      	lsls	r3, r3, #2
 8005f2a:	4413      	add	r3, r2
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	60fb      	str	r3, [r7, #12]
                    // Seek or increment video frame
                    if (stream.seek_to_frame > 0)
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	695b      	ldr	r3, [r3, #20]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d00c      	beq.n	8005f52 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0xb0>
                    {
                        decoder->gotoFrame(stream.seek_to_frame);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	3324      	adds	r3, #36	; 0x24
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	693a      	ldr	r2, [r7, #16]
 8005f42:	6952      	ldr	r2, [r2, #20]
 8005f44:	4611      	mov	r1, r2
 8005f46:	68f8      	ldr	r0, [r7, #12]
 8005f48:	4798      	blx	r3
                        stream.seek_to_frame = 0;
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	615a      	str	r2, [r3, #20]
 8005f50:	e01e      	b.n	8005f90 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0xee>
                    }
                    else
                    {
                        if (stream.skip_frames > 0)
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	699b      	ldr	r3, [r3, #24]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d01a      	beq.n	8005f90 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0xee>
                        {
                            decoder->gotoFrame(decoder->getCurrentFrameNumber() + stream.skip_frames);
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	3324      	adds	r3, #36	; 0x24
 8005f60:	681c      	ldr	r4, [r3, #0]
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	3328      	adds	r3, #40	; 0x28
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	68f8      	ldr	r0, [r7, #12]
 8005f6c:	4798      	blx	r3
 8005f6e:	4602      	mov	r2, r0
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	699b      	ldr	r3, [r3, #24]
 8005f74:	4413      	add	r3, r2
 8005f76:	4619      	mov	r1, r3
 8005f78:	68f8      	ldr	r0, [r7, #12]
 8005f7a:	47a0      	blx	r4
                            stream.frameCount += stream.skip_frames;
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	685a      	ldr	r2, [r3, #4]
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	699b      	ldr	r3, [r3, #24]
 8005f84:	441a      	add	r2, r3
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	605a      	str	r2, [r3, #4]
                            stream.skip_frames = 0;
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	619a      	str	r2, [r3, #24]
                        }
                    }

                    // Decode frame
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	3314      	adds	r3, #20
 8005f96:	681c      	ldr	r4, [r3, #0]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	69ba      	ldr	r2, [r7, #24]
 8005f9c:	3202      	adds	r2, #2
 8005f9e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005fa2:	f44f 63b4 	mov.w	r3, #1440	; 0x5a0
 8005fa6:	9300      	str	r3, [sp, #0]
 8005fa8:	f44f 7388 	mov.w	r3, #272	; 0x110
 8005fac:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8005fb0:	68f8      	ldr	r0, [r7, #12]
 8005fb2:	47a0      	blx	r4
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	461a      	mov	r2, r3
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	f883 2020 	strb.w	r2, [r3, #32]
                    stream.frameCount++;
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	1c5a      	adds	r2, r3, #1
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	605a      	str	r2, [r3, #4]

                    // Update frame number
                    if (stream.hasMoreFrames)
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d00a      	beq.n	8005fe8 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x146>
                    {
                        stream.frameNumber = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	3328      	adds	r3, #40	; 0x28
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	68f8      	ldr	r0, [r7, #12]
 8005fdc:	4798      	blx	r3
 8005fde:	4603      	mov	r3, r0
 8005fe0:	1e5a      	subs	r2, r3, #1
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	601a      	str	r2, [r3, #0]
 8005fe6:	e002      	b.n	8005fee <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x14c>
                    }
                    else
                    {
                        stream.frameNumber = 1;
 8005fe8:	693b      	ldr	r3, [r7, #16]
 8005fea:	2201      	movs	r2, #1
 8005fec:	601a      	str	r2, [r3, #0]
                    }
                    stream.doDecode = false;
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
            for (uint32_t i = 0; i < no_streams; i++)
 8005ff6:	69bb      	ldr	r3, [r7, #24]
 8005ff8:	3301      	adds	r3, #1
 8005ffa:	61bb      	str	r3, [r7, #24]
 8005ffc:	e780      	b.n	8005f00 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x5e>
                }
            }

            // Release the stream and decode buffer and let UI continue
            MUTEX_UNLOCK(mutexBuffers);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006002:	4618      	mov	r0, r3
 8006004:	f00f feb2 	bl	8015d6c <osMutexRelease>
        while (1)
 8006008:	e74f      	b.n	8005eaa <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x8>

0800600a <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE6StreamC1Ev>:

private:
    class Stream
    {
    public:
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 800600a:	b480      	push	{r7}
 800600c:	b083      	sub	sp, #12
 800600e:	af00      	add	r7, sp, #0
 8006010:	6078      	str	r0, [r7, #4]
                   seek_to_frame(0), skip_frames(0),
                   isActive(false), isPlaying(false), isShowingOneFrame(false),
                   doInvalidateOnNextTick(false), hasMoreFrames(false), repeat(true), doDecode(false) {}
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2200      	movs	r2, #0
 8006016:	601a      	str	r2, [r3, #0]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2200      	movs	r2, #0
 800601c:	605a      	str	r2, [r3, #4]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2200      	movs	r2, #0
 8006022:	609a      	str	r2, [r3, #8]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2200      	movs	r2, #0
 8006028:	60da      	str	r2, [r3, #12]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2200      	movs	r2, #0
 800602e:	611a      	str	r2, [r3, #16]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2200      	movs	r2, #0
 8006034:	615a      	str	r2, [r3, #20]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2200      	movs	r2, #0
 800603a:	619a      	str	r2, [r3, #24]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2200      	movs	r2, #0
 8006040:	771a      	strb	r2, [r3, #28]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2200      	movs	r2, #0
 8006046:	775a      	strb	r2, [r3, #29]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2200      	movs	r2, #0
 800604c:	779a      	strb	r2, [r3, #30]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2200      	movs	r2, #0
 8006052:	77da      	strb	r2, [r3, #31]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2200      	movs	r2, #0
 8006058:	f883 2020 	strb.w	r2, [r3, #32]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2201      	movs	r2, #1
 8006060:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2200      	movs	r2, #0
 8006068:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	4618      	mov	r0, r3
 8006070:	370c      	adds	r7, #12
 8006072:	46bd      	mov	sp, r7
 8006074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006078:	4770      	bx	lr

0800607a <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE17decodeForNextTickERNS3_6StreamE>:
    MUTEX_TYPE mutexBuffers;     // Mutual exclusion of the video buffers and stream data

    /**
     * Return true, if new video frame should be decoded for the next tick (keep video decode framerate low)
     */
    bool decodeForNextTick(Stream& stream)
 800607a:	b480      	push	{r7}
 800607c:	b083      	sub	sp, #12
 800607e:	af00      	add	r7, sp, #0
 8006080:	6078      	str	r0, [r7, #4]
 8006082:	6039      	str	r1, [r7, #0]
    {
        // Running in UI thread

        // Compare tickCount/frameCount to frame_rate_ticks/frame_rate_video
        if ((stream.tickCount * stream.frame_rate_video) >= (stream.frame_rate_ticks * stream.frameCount))
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	689b      	ldr	r3, [r3, #8]
 8006088:	683a      	ldr	r2, [r7, #0]
 800608a:	68d2      	ldr	r2, [r2, #12]
 800608c:	fb03 f202 	mul.w	r2, r3, r2
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	691b      	ldr	r3, [r3, #16]
 8006094:	6839      	ldr	r1, [r7, #0]
 8006096:	6849      	ldr	r1, [r1, #4]
 8006098:	fb01 f303 	mul.w	r3, r1, r3
 800609c:	429a      	cmp	r2, r3
 800609e:	d322      	bcc.n	80060e6 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE17decodeForNextTickERNS3_6StreamE+0x6c>
        {
            if (allowSkipFrames)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d01b      	beq.n	80060e2 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE17decodeForNextTickERNS3_6StreamE+0x68>
            {
                stream.skip_frames = (stream.tickCount * stream.frame_rate_video - stream.frame_rate_ticks * stream.frameCount) / stream.frame_rate_ticks;
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	689b      	ldr	r3, [r3, #8]
 80060ae:	683a      	ldr	r2, [r7, #0]
 80060b0:	68d2      	ldr	r2, [r2, #12]
 80060b2:	fb03 f202 	mul.w	r2, r3, r2
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	691b      	ldr	r3, [r3, #16]
 80060ba:	6839      	ldr	r1, [r7, #0]
 80060bc:	6849      	ldr	r1, [r1, #4]
 80060be:	fb01 f303 	mul.w	r3, r1, r3
 80060c2:	1ad2      	subs	r2, r2, r3
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	691b      	ldr	r3, [r3, #16]
 80060c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	619a      	str	r2, [r3, #24]
                if (stream.skip_frames > 0)
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	699b      	ldr	r3, [r3, #24]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d004      	beq.n	80060e2 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE17decodeForNextTickERNS3_6StreamE+0x68>
                {
                    stream.skip_frames--;
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	699b      	ldr	r3, [r3, #24]
 80060dc:	1e5a      	subs	r2, r3, #1
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	619a      	str	r2, [r3, #24]
                }
            }
            return true;
 80060e2:	2301      	movs	r3, #1
 80060e4:	e000      	b.n	80060e8 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE17decodeForNextTickERNS3_6StreamE+0x6e>
        }
        return false;
 80060e6:	2300      	movs	r3, #0
    }
 80060e8:	4618      	mov	r0, r3
 80060ea:	370c      	adds	r7, #12
 80060ec:	46bd      	mov	sp, r7
 80060ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f2:	4770      	bx	lr

080060f4 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EED1Ev>:
class DedicatedBufferController : public touchgfx::VideoController
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b082      	sub	sp, #8
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
 80060fc:	4a05      	ldr	r2, [pc, #20]	; (8006114 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EED1Ev+0x20>)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	601a      	str	r2, [r3, #0]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	4618      	mov	r0, r3
 8006106:	f7ff fb1f 	bl	8005748 <_ZN8touchgfx15VideoControllerD1Ev>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	4618      	mov	r0, r3
 800610e:	3708      	adds	r7, #8
 8006110:	46bd      	mov	sp, r7
 8006112:	bd80      	pop	{r7, pc}
 8006114:	0802c3a0 	.word	0x0802c3a0

08006118 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EED0Ev>:
 8006118:	b580      	push	{r7, lr}
 800611a:	b082      	sub	sp, #8
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	f7ff ffe7 	bl	80060f4 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EED1Ev>
 8006126:	2148      	movs	r1, #72	; 0x48
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f022 fb82 	bl	8028832 <_ZdlPvj>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	4618      	mov	r0, r3
 8006132:	3708      	adds	r7, #8
 8006134:	46bd      	mov	sp, r7
 8006136:	bd80      	pop	{r7, pc}

08006138 <_Z41__static_initialization_and_destruction_0ii>:
}
 8006138:	b580      	push	{r7, lr}
 800613a:	b082      	sub	sp, #8
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
 8006140:	6039      	str	r1, [r7, #0]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2b01      	cmp	r3, #1
 8006146:	d10a      	bne.n	800615e <_Z41__static_initialization_and_destruction_0ii+0x26>
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800614e:	4293      	cmp	r3, r2
 8006150:	d105      	bne.n	800615e <_Z41__static_initialization_and_destruction_0ii+0x26>
HardwareMJPEGDecoder mjpegdecoder1;
 8006152:	480c      	ldr	r0, [pc, #48]	; (8006184 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8006154:	f7fc fb16 	bl	8002784 <_ZN20HardwareMJPEGDecoderC1Ev>
DedicatedBufferController<1, 480, 272, 480*3U, Bitmap::RGB888> videoController;
 8006158:	480b      	ldr	r0, [pc, #44]	; (8006188 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 800615a:	f7ff fdd1 	bl	8005d00 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EEC1Ev>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d10a      	bne.n	800617a <_Z41__static_initialization_and_destruction_0ii+0x42>
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800616a:	4293      	cmp	r3, r2
 800616c:	d105      	bne.n	800617a <_Z41__static_initialization_and_destruction_0ii+0x42>
 800616e:	4806      	ldr	r0, [pc, #24]	; (8006188 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8006170:	f7ff ffc0 	bl	80060f4 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EED1Ev>
HardwareMJPEGDecoder mjpegdecoder1;
 8006174:	4803      	ldr	r0, [pc, #12]	; (8006184 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8006176:	f7fd fbdf 	bl	8003938 <_ZN20HardwareMJPEGDecoderD1Ev>
}
 800617a:	bf00      	nop
 800617c:	3708      	adds	r7, #8
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}
 8006182:	bf00      	nop
 8006184:	24007164 	.word	0x24007164
 8006188:	240071ac 	.word	0x240071ac

0800618c <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE>:
    virtual Handle registerVideoWidget(touchgfx::VideoWidget& widget)
 800618c:	b580      	push	{r7, lr}
 800618e:	b084      	sub	sp, #16
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
 8006194:	6039      	str	r1, [r7, #0]
        const uint32_t sizeOfOneDecodeBuffer = height * stride;
 8006196:	4b1f      	ldr	r3, [pc, #124]	; (8006214 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x88>)
 8006198:	60fb      	str	r3, [r7, #12]
        Handle handle = getFreeHandle();
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f000 fa82 	bl	80066a4 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE13getFreeHandleEv>
 80061a0:	60b8      	str	r0, [r7, #8]
        streams[handle].isActive = true;
 80061a2:	6879      	ldr	r1, [r7, #4]
 80061a4:	68ba      	ldr	r2, [r7, #8]
 80061a6:	4613      	mov	r3, r2
 80061a8:	00db      	lsls	r3, r3, #3
 80061aa:	4413      	add	r3, r2
 80061ac:	009b      	lsls	r3, r3, #2
 80061ae:	440b      	add	r3, r1
 80061b0:	3328      	adds	r3, #40	; 0x28
 80061b2:	2201      	movs	r2, #1
 80061b4:	701a      	strb	r2, [r3, #0]
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061ba:	4b16      	ldr	r3, [pc, #88]	; (8006214 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x88>)
 80061bc:	4413      	add	r3, r2
 80061be:	687a      	ldr	r2, [r7, #4]
 80061c0:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80061c2:	687a      	ldr	r2, [r7, #4]
 80061c4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80061c6:	440a      	add	r2, r1
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d905      	bls.n	80061d8 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x4c>
            assert(0 && "registerVideoWidget: Unable to allocate RGB buffer!");
 80061cc:	4b12      	ldr	r3, [pc, #72]	; (8006218 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x8c>)
 80061ce:	4a13      	ldr	r2, [pc, #76]	; (800621c <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x90>)
 80061d0:	2152      	movs	r1, #82	; 0x52
 80061d2:	4813      	ldr	r0, [pc, #76]	; (8006220 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x94>)
 80061d4:	f022 fb5c 	bl	8028890 <__assert_func>
        decodeBuffers[handle] = (uint32_t*)topBufferRGB;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	68ba      	ldr	r2, [r7, #8]
 80061e0:	3202      	adds	r2, #2
 80061e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        topBufferRGB += sizeOfOneDecodeBuffer;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061ea:	4b0a      	ldr	r3, [pc, #40]	; (8006214 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x88>)
 80061ec:	4413      	add	r3, r2
 80061ee:	687a      	ldr	r2, [r7, #4]
 80061f0:	6393      	str	r3, [r2, #56]	; 0x38
        widget.setVideoBufferFormat(output_format, width, height);
 80061f2:	f44f 7388 	mov.w	r3, #272	; 0x110
 80061f6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80061fa:	2101      	movs	r1, #1
 80061fc:	6838      	ldr	r0, [r7, #0]
 80061fe:	f7ff fadf 	bl	80057c0 <_ZN8touchgfx11VideoWidget20setVideoBufferFormatENS_6Bitmap12BitmapFormatEss>
        widget.setVideoBuffer((uint8_t*)0);
 8006202:	2100      	movs	r1, #0
 8006204:	6838      	ldr	r0, [r7, #0]
 8006206:	f7ff facd 	bl	80057a4 <_ZN8touchgfx11VideoWidget14setVideoBufferEPh>
        return handle;
 800620a:	68bb      	ldr	r3, [r7, #8]
    }
 800620c:	4618      	mov	r0, r3
 800620e:	3710      	adds	r7, #16
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}
 8006214:	0005fa00 	.word	0x0005fa00
 8006218:	0802a5cc 	.word	0x0802a5cc
 800621c:	0802a608 	.word	0x0802a608
 8006220:	0802a588 	.word	0x0802a588

08006224 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE21unregisterVideoWidgetEm>:
    virtual void unregisterVideoWidget(const Handle handle)
 8006224:	b580      	push	{r7, lr}
 8006226:	b084      	sub	sp, #16
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
 800622c:	6039      	str	r1, [r7, #0]
        MUTEX_LOCK(mutexBuffers);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006232:	f04f 31ff 	mov.w	r1, #4294967295
 8006236:	4618      	mov	r0, r3
 8006238:	f00f fd4d 	bl	8015cd6 <osMutexAcquire>
        MUTEX_UNLOCK(mutexBuffers);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006240:	4618      	mov	r0, r3
 8006242:	f00f fd93 	bl	8015d6c <osMutexRelease>
        streams[handle].isActive = false;
 8006246:	6879      	ldr	r1, [r7, #4]
 8006248:	683a      	ldr	r2, [r7, #0]
 800624a:	4613      	mov	r3, r2
 800624c:	00db      	lsls	r3, r3, #3
 800624e:	4413      	add	r3, r2
 8006250:	009b      	lsls	r3, r3, #2
 8006252:	440b      	add	r3, r1
 8006254:	3328      	adds	r3, #40	; 0x28
 8006256:	2200      	movs	r2, #0
 8006258:	701a      	strb	r2, [r3, #0]
        bool oneIsActive = false;
 800625a:	2300      	movs	r3, #0
 800625c:	73fb      	strb	r3, [r7, #15]
        for (uint32_t i = 0; i < no_streams; i++)
 800625e:	2300      	movs	r3, #0
 8006260:	60bb      	str	r3, [r7, #8]
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d114      	bne.n	8006292 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE21unregisterVideoWidgetEm+0x6e>
            oneIsActive |= streams[i].isActive;
 8006268:	6879      	ldr	r1, [r7, #4]
 800626a:	68ba      	ldr	r2, [r7, #8]
 800626c:	4613      	mov	r3, r2
 800626e:	00db      	lsls	r3, r3, #3
 8006270:	4413      	add	r3, r2
 8006272:	009b      	lsls	r3, r3, #2
 8006274:	440b      	add	r3, r1
 8006276:	3328      	adds	r3, #40	; 0x28
 8006278:	781a      	ldrb	r2, [r3, #0]
 800627a:	7bfb      	ldrb	r3, [r7, #15]
 800627c:	4313      	orrs	r3, r2
 800627e:	b2db      	uxtb	r3, r3
 8006280:	2b00      	cmp	r3, #0
 8006282:	bf14      	ite	ne
 8006284:	2301      	movne	r3, #1
 8006286:	2300      	moveq	r3, #0
 8006288:	73fb      	strb	r3, [r7, #15]
        for (uint32_t i = 0; i < no_streams; i++)
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	3301      	adds	r3, #1
 800628e:	60bb      	str	r3, [r7, #8]
 8006290:	e7e7      	b.n	8006262 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE21unregisterVideoWidgetEm+0x3e>
        if (oneIsActive == false)
 8006292:	7bfb      	ldrb	r3, [r7, #15]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d103      	bne.n	80062a0 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE21unregisterVideoWidgetEm+0x7c>
            topBufferRGB = bufferRGB;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	639a      	str	r2, [r3, #56]	; 0x38
    }
 80062a0:	bf00      	nop
 80062a2:	3710      	adds	r7, #16
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}

080062a8 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm>:
    virtual void setFrameRate(const Handle handle, uint32_t ui_frames, uint32_t video_frames)
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b086      	sub	sp, #24
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	60f8      	str	r0, [r7, #12]
 80062b0:	60b9      	str	r1, [r7, #8]
 80062b2:	607a      	str	r2, [r7, #4]
 80062b4:	603b      	str	r3, [r7, #0]
        assert(handle < no_streams);
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d005      	beq.n	80062c8 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x20>
 80062bc:	4b0f      	ldr	r3, [pc, #60]	; (80062fc <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x54>)
 80062be:	4a10      	ldr	r2, [pc, #64]	; (8006300 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x58>)
 80062c0:	2182      	movs	r1, #130	; 0x82
 80062c2:	4810      	ldr	r0, [pc, #64]	; (8006304 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x5c>)
 80062c4:	f022 fae4 	bl	8028890 <__assert_func>
        Stream& stream = streams[handle];
 80062c8:	68ba      	ldr	r2, [r7, #8]
 80062ca:	4613      	mov	r3, r2
 80062cc:	00db      	lsls	r3, r3, #3
 80062ce:	4413      	add	r3, r2
 80062d0:	009b      	lsls	r3, r3, #2
 80062d2:	3308      	adds	r3, #8
 80062d4:	68fa      	ldr	r2, [r7, #12]
 80062d6:	4413      	add	r3, r2
 80062d8:	3304      	adds	r3, #4
 80062da:	617b      	str	r3, [r7, #20]
        stream.frameCount = 0;
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	2200      	movs	r2, #0
 80062e0:	605a      	str	r2, [r3, #4]
        stream.tickCount = 0;
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	2200      	movs	r2, #0
 80062e6:	609a      	str	r2, [r3, #8]
        stream.frame_rate_ticks = ui_frames;
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	687a      	ldr	r2, [r7, #4]
 80062ec:	611a      	str	r2, [r3, #16]
        stream.frame_rate_video = video_frames;
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	683a      	ldr	r2, [r7, #0]
 80062f2:	60da      	str	r2, [r3, #12]
    }
 80062f4:	bf00      	nop
 80062f6:	3718      	adds	r7, #24
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bd80      	pop	{r7, pc}
 80062fc:	0802a7ac 	.word	0x0802a7ac
 8006300:	0802a7c0 	.word	0x0802a7c0
 8006304:	0802a588 	.word	0x0802a588

08006308 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE>:
    virtual bool updateFrame(const Handle handle, touchgfx::VideoWidget& widget)
 8006308:	b580      	push	{r7, lr}
 800630a:	b086      	sub	sp, #24
 800630c:	af00      	add	r7, sp, #0
 800630e:	60f8      	str	r0, [r7, #12]
 8006310:	60b9      	str	r1, [r7, #8]
 8006312:	607a      	str	r2, [r7, #4]
        assert(handle < no_streams);
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d005      	beq.n	8006326 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x1e>
 800631a:	4b29      	ldr	r3, [pc, #164]	; (80063c0 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0xb8>)
 800631c:	4a29      	ldr	r2, [pc, #164]	; (80063c4 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0xbc>)
 800631e:	21d0      	movs	r1, #208	; 0xd0
 8006320:	4829      	ldr	r0, [pc, #164]	; (80063c8 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0xc0>)
 8006322:	f022 fab5 	bl	8028890 <__assert_func>
        Stream& stream = streams[handle];
 8006326:	68ba      	ldr	r2, [r7, #8]
 8006328:	4613      	mov	r3, r2
 800632a:	00db      	lsls	r3, r3, #3
 800632c:	4413      	add	r3, r2
 800632e:	009b      	lsls	r3, r3, #2
 8006330:	3308      	adds	r3, #8
 8006332:	68fa      	ldr	r2, [r7, #12]
 8006334:	4413      	add	r3, r2
 8006336:	3304      	adds	r3, #4
 8006338:	617b      	str	r3, [r7, #20]
        if (stream.isPlaying)
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	7f5b      	ldrb	r3, [r3, #29]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d00b      	beq.n	800635a <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x52>
            stream.tickCount+=HAL::getInstance()->getLCDRefreshCount();
 8006342:	f7fb fe9b 	bl	800207c <_ZN8touchgfx3HAL11getInstanceEv>
 8006346:	4603      	mov	r3, r0
 8006348:	4618      	mov	r0, r3
 800634a:	f7ff f999 	bl	8005680 <_ZN8touchgfx3HAL18getLCDRefreshCountEv>
 800634e:	4602      	mov	r2, r0
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	689b      	ldr	r3, [r3, #8]
 8006354:	441a      	add	r2, r3
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	609a      	str	r2, [r3, #8]
        if (stream.doInvalidateOnNextTick)
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	7fdb      	ldrb	r3, [r3, #31]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d029      	beq.n	80063b6 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0xae>
            widget.setVideoBuffer((uint8_t*)decodeBuffers[handle]);
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	68ba      	ldr	r2, [r7, #8]
 8006366:	3202      	adds	r2, #2
 8006368:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800636c:	4619      	mov	r1, r3
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f7ff fa18 	bl	80057a4 <_ZN8touchgfx11VideoWidget14setVideoBufferEPh>
            widget.invalidate();
 8006374:	687a      	ldr	r2, [r7, #4]
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	3314      	adds	r3, #20
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4610      	mov	r0, r2
 8006380:	4798      	blx	r3
            stream.doInvalidateOnNextTick = false;
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	2200      	movs	r2, #0
 8006386:	77da      	strb	r2, [r3, #31]
            if (!stream.hasMoreFrames && !stream.repeat)
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800638e:	f083 0301 	eor.w	r3, r3, #1
 8006392:	b2db      	uxtb	r3, r3
 8006394:	2b00      	cmp	r3, #0
 8006396:	d00a      	beq.n	80063ae <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0xa6>
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800639e:	f083 0301 	eor.w	r3, r3, #1
 80063a2:	b2db      	uxtb	r3, r3
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d002      	beq.n	80063ae <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0xa6>
                stream.isPlaying = false;
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	2200      	movs	r2, #0
 80063ac:	775a      	strb	r2, [r3, #29]
            return stream.hasMoreFrames;
 80063ae:	697b      	ldr	r3, [r7, #20]
 80063b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80063b4:	e000      	b.n	80063b8 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0xb0>
        return true;
 80063b6:	2301      	movs	r3, #1
    }
 80063b8:	4618      	mov	r0, r3
 80063ba:	3718      	adds	r7, #24
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}
 80063c0:	0802a7ac 	.word	0x0802a7ac
 80063c4:	0802a97c 	.word	0x0802a97c
 80063c8:	0802a588 	.word	0x0802a588

080063cc <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE>:
    virtual void draw(const Handle handle, const touchgfx::Rect& invalidatedArea, const touchgfx::VideoWidget& widget)
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b084      	sub	sp, #16
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	60f8      	str	r0, [r7, #12]
 80063d4:	60b9      	str	r1, [r7, #8]
 80063d6:	607a      	str	r2, [r7, #4]
 80063d8:	603b      	str	r3, [r7, #0]
        if (firstDrawThisFrame)
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d00e      	beq.n	8006402 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE+0x36>
            MUTEX_LOCK(mutexBuffers);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063e8:	f04f 31ff 	mov.w	r1, #4294967295
 80063ec:	4618      	mov	r0, r3
 80063ee:	f00f fc72 	bl	8015cd6 <osMutexAcquire>
            firstDrawThisFrame = false;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	2200      	movs	r2, #0
 80063f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
            uiHasMutex = true;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	2201      	movs	r2, #1
 80063fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
 8006402:	bf00      	nop
 8006404:	3710      	adds	r7, #16
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}
	...

0800640c <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm>:
    virtual void setVideoData(const Handle handle, const uint8_t* movie, const uint32_t length)
 800640c:	b580      	push	{r7, lr}
 800640e:	b086      	sub	sp, #24
 8006410:	af00      	add	r7, sp, #0
 8006412:	60f8      	str	r0, [r7, #12]
 8006414:	60b9      	str	r1, [r7, #8]
 8006416:	607a      	str	r2, [r7, #4]
 8006418:	603b      	str	r3, [r7, #0]
        assert(handle < no_streams);
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d005      	beq.n	800642c <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x20>
 8006420:	4b13      	ldr	r3, [pc, #76]	; (8006470 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x64>)
 8006422:	4a14      	ldr	r2, [pc, #80]	; (8006474 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x68>)
 8006424:	2190      	movs	r1, #144	; 0x90
 8006426:	4814      	ldr	r0, [pc, #80]	; (8006478 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x6c>)
 8006428:	f022 fa32 	bl	8028890 <__assert_func>
        Stream& stream = streams[handle];
 800642c:	68ba      	ldr	r2, [r7, #8]
 800642e:	4613      	mov	r3, r2
 8006430:	00db      	lsls	r3, r3, #3
 8006432:	4413      	add	r3, r2
 8006434:	009b      	lsls	r3, r3, #2
 8006436:	3308      	adds	r3, #8
 8006438:	68fa      	ldr	r2, [r7, #12]
 800643a:	4413      	add	r3, r2
 800643c:	3304      	adds	r3, #4
 800643e:	617b      	str	r3, [r7, #20]
        stream.frameNumber = 0;
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	2200      	movs	r2, #0
 8006444:	601a      	str	r2, [r3, #0]
        mjpegDecoders[handle]->setVideoData(movie, length);
 8006446:	68fa      	ldr	r2, [r7, #12]
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	009b      	lsls	r3, r3, #2
 800644c:	4413      	add	r3, r2
 800644e:	6858      	ldr	r0, [r3, #4]
 8006450:	68fa      	ldr	r2, [r7, #12]
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	009b      	lsls	r3, r3, #2
 8006456:	4413      	add	r3, r2
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	3308      	adds	r3, #8
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	683a      	ldr	r2, [r7, #0]
 8006462:	6879      	ldr	r1, [r7, #4]
 8006464:	4798      	blx	r3
    }
 8006466:	bf00      	nop
 8006468:	3718      	adds	r7, #24
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}
 800646e:	bf00      	nop
 8006470:	0802a7ac 	.word	0x0802a7ac
 8006474:	0802ab20 	.word	0x0802ab20
 8006478:	0802a588 	.word	0x0802a588

0800647c <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmRNS0_15VideoDataReaderE>:
    virtual void setVideoData(const Handle handle, VideoDataReader& reader)
 800647c:	b580      	push	{r7, lr}
 800647e:	b084      	sub	sp, #16
 8006480:	af00      	add	r7, sp, #0
 8006482:	60f8      	str	r0, [r7, #12]
 8006484:	60b9      	str	r1, [r7, #8]
 8006486:	607a      	str	r2, [r7, #4]
        mjpegDecoders[handle]->setVideoData(reader);
 8006488:	68fa      	ldr	r2, [r7, #12]
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	009b      	lsls	r3, r3, #2
 800648e:	4413      	add	r3, r2
 8006490:	6858      	ldr	r0, [r3, #4]
 8006492:	68fa      	ldr	r2, [r7, #12]
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	009b      	lsls	r3, r3, #2
 8006498:	4413      	add	r3, r2
 800649a:	685b      	ldr	r3, [r3, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	330c      	adds	r3, #12
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	6879      	ldr	r1, [r7, #4]
 80064a4:	4798      	blx	r3
    }
 80064a6:	bf00      	nop
 80064a8:	3710      	adds	r7, #16
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}
	...

080064b0 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm>:
    virtual void setCommand(const Handle handle, Command cmd, uint32_t param)
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b086      	sub	sp, #24
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	60f8      	str	r0, [r7, #12]
 80064b8:	60b9      	str	r1, [r7, #8]
 80064ba:	603b      	str	r3, [r7, #0]
 80064bc:	4613      	mov	r3, r2
 80064be:	71fb      	strb	r3, [r7, #7]
        assert(handle < no_streams);
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d005      	beq.n	80064d2 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x22>
 80064c6:	4b3a      	ldr	r3, [pc, #232]	; (80065b0 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x100>)
 80064c8:	4a3a      	ldr	r2, [pc, #232]	; (80065b4 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x104>)
 80064ca:	21a2      	movs	r1, #162	; 0xa2
 80064cc:	483a      	ldr	r0, [pc, #232]	; (80065b8 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x108>)
 80064ce:	f022 f9df 	bl	8028890 <__assert_func>
        Stream& stream = streams[handle];
 80064d2:	68ba      	ldr	r2, [r7, #8]
 80064d4:	4613      	mov	r3, r2
 80064d6:	00db      	lsls	r3, r3, #3
 80064d8:	4413      	add	r3, r2
 80064da:	009b      	lsls	r3, r3, #2
 80064dc:	3308      	adds	r3, #8
 80064de:	68fa      	ldr	r2, [r7, #12]
 80064e0:	4413      	add	r3, r2
 80064e2:	3304      	adds	r3, #4
 80064e4:	617b      	str	r3, [r7, #20]
        switch (cmd)
 80064e6:	79fb      	ldrb	r3, [r7, #7]
 80064e8:	2b05      	cmp	r3, #5
 80064ea:	d85c      	bhi.n	80065a6 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0xf6>
 80064ec:	a201      	add	r2, pc, #4	; (adr r2, 80064f4 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x44>)
 80064ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064f2:	bf00      	nop
 80064f4:	0800650d 	.word	0x0800650d
 80064f8:	0800654d 	.word	0x0800654d
 80064fc:	08006555 	.word	0x08006555
 8006500:	08006569 	.word	0x08006569
 8006504:	08006583 	.word	0x08006583
 8006508:	08006591 	.word	0x08006591
            if (mjpegDecoders[handle]->hasVideo())
 800650c:	68fa      	ldr	r2, [r7, #12]
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	009b      	lsls	r3, r3, #2
 8006512:	4413      	add	r3, r2
 8006514:	6859      	ldr	r1, [r3, #4]
 8006516:	68fa      	ldr	r2, [r7, #12]
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	009b      	lsls	r3, r3, #2
 800651c:	4413      	add	r3, r2
 800651e:	685b      	ldr	r3, [r3, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	3310      	adds	r3, #16
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4608      	mov	r0, r1
 8006528:	4798      	blx	r3
 800652a:	4603      	mov	r3, r0
 800652c:	2b00      	cmp	r3, #0
 800652e:	d039      	beq.n	80065a4 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0xf4>
                stream.isPlaying = true;
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	2201      	movs	r2, #1
 8006534:	775a      	strb	r2, [r3, #29]
                stream.hasMoreFrames = true; // Assume more frames, lowered on end
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	2201      	movs	r2, #1
 800653a:	f883 2020 	strb.w	r2, [r3, #32]
                stream.frameCount = 0;
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	2200      	movs	r2, #0
 8006542:	605a      	str	r2, [r3, #4]
                stream.tickCount = 0;
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	2200      	movs	r2, #0
 8006548:	609a      	str	r2, [r3, #8]
            break;
 800654a:	e02b      	b.n	80065a4 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0xf4>
            stream.isPlaying = false;
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	2200      	movs	r2, #0
 8006550:	775a      	strb	r2, [r3, #29]
            break;
 8006552:	e028      	b.n	80065a6 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0xf6>
            stream.seek_to_frame = param;
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	683a      	ldr	r2, [r7, #0]
 8006558:	615a      	str	r2, [r3, #20]
            stream.frameCount = 0;
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	2200      	movs	r2, #0
 800655e:	605a      	str	r2, [r3, #4]
            stream.tickCount = 0;
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	2200      	movs	r2, #0
 8006564:	609a      	str	r2, [r3, #8]
            break;
 8006566:	e01e      	b.n	80065a6 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0xf6>
            stream.seek_to_frame = param;
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	683a      	ldr	r2, [r7, #0]
 800656c:	615a      	str	r2, [r3, #20]
            stream.isShowingOneFrame = true;
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	2201      	movs	r2, #1
 8006572:	779a      	strb	r2, [r3, #30]
            stream.frameCount = 0;
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	2200      	movs	r2, #0
 8006578:	605a      	str	r2, [r3, #4]
            stream.tickCount = 0;
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	2200      	movs	r2, #0
 800657e:	609a      	str	r2, [r3, #8]
            break;
 8006580:	e011      	b.n	80065a6 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0xf6>
            stream.isPlaying = false;
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	2200      	movs	r2, #0
 8006586:	775a      	strb	r2, [r3, #29]
            stream.seek_to_frame = 1;
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	2201      	movs	r2, #1
 800658c:	615a      	str	r2, [r3, #20]
            break;
 800658e:	e00a      	b.n	80065a6 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0xf6>
            stream.repeat = (param > 0);
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	2b00      	cmp	r3, #0
 8006594:	bf14      	ite	ne
 8006596:	2301      	movne	r3, #1
 8006598:	2300      	moveq	r3, #0
 800659a:	b2da      	uxtb	r2, r3
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            break;
 80065a2:	e000      	b.n	80065a6 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0xf6>
            break;
 80065a4:	bf00      	nop
    }
 80065a6:	bf00      	nop
 80065a8:	3718      	adds	r7, #24
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}
 80065ae:	bf00      	nop
 80065b0:	0802a7ac 	.word	0x0802a7ac
 80065b4:	0802acfc 	.word	0x0802acfc
 80065b8:	0802a588 	.word	0x0802a588

080065bc <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm>:
    virtual uint32_t getCurrentFrameNumber(const Handle handle)
 80065bc:	b580      	push	{r7, lr}
 80065be:	b084      	sub	sp, #16
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
 80065c4:	6039      	str	r1, [r7, #0]
        assert(handle < no_streams);
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d005      	beq.n	80065d8 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x1c>
 80065cc:	4b0a      	ldr	r3, [pc, #40]	; (80065f8 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x3c>)
 80065ce:	4a0b      	ldr	r2, [pc, #44]	; (80065fc <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x40>)
 80065d0:	2179      	movs	r1, #121	; 0x79
 80065d2:	480b      	ldr	r0, [pc, #44]	; (8006600 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x44>)
 80065d4:	f022 f95c 	bl	8028890 <__assert_func>
        const Stream& stream = streams[handle];
 80065d8:	683a      	ldr	r2, [r7, #0]
 80065da:	4613      	mov	r3, r2
 80065dc:	00db      	lsls	r3, r3, #3
 80065de:	4413      	add	r3, r2
 80065e0:	009b      	lsls	r3, r3, #2
 80065e2:	3308      	adds	r3, #8
 80065e4:	687a      	ldr	r2, [r7, #4]
 80065e6:	4413      	add	r3, r2
 80065e8:	3304      	adds	r3, #4
 80065ea:	60fb      	str	r3, [r7, #12]
        return stream.frameNumber;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
    }
 80065f0:	4618      	mov	r0, r3
 80065f2:	3710      	adds	r7, #16
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}
 80065f8:	0802a7ac 	.word	0x0802a7ac
 80065fc:	0802aed0 	.word	0x0802aed0
 8006600:	0802a588 	.word	0x0802a588

08006604 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE>:
    virtual void getVideoInformation(const Handle handle, touchgfx::VideoInformation* data)
 8006604:	b580      	push	{r7, lr}
 8006606:	b084      	sub	sp, #16
 8006608:	af00      	add	r7, sp, #0
 800660a:	60f8      	str	r0, [r7, #12]
 800660c:	60b9      	str	r1, [r7, #8]
 800660e:	607a      	str	r2, [r7, #4]
        assert(handle < no_streams);
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d006      	beq.n	8006624 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x20>
 8006616:	4b0d      	ldr	r3, [pc, #52]	; (800664c <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x48>)
 8006618:	4a0d      	ldr	r2, [pc, #52]	; (8006650 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x4c>)
 800661a:	f44f 71b5 	mov.w	r1, #362	; 0x16a
 800661e:	480d      	ldr	r0, [pc, #52]	; (8006654 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x50>)
 8006620:	f022 f936 	bl	8028890 <__assert_func>
        mjpegDecoders[handle]->getVideoInfo(data);
 8006624:	68fa      	ldr	r2, [r7, #12]
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	009b      	lsls	r3, r3, #2
 800662a:	4413      	add	r3, r2
 800662c:	6858      	ldr	r0, [r3, #4]
 800662e:	68fa      	ldr	r2, [r7, #12]
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	009b      	lsls	r3, r3, #2
 8006634:	4413      	add	r3, r2
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	3330      	adds	r3, #48	; 0x30
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	6879      	ldr	r1, [r7, #4]
 8006640:	4798      	blx	r3
    }
 8006642:	bf00      	nop
 8006644:	3710      	adds	r7, #16
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}
 800664a:	bf00      	nop
 800664c:	0802a7ac 	.word	0x0802a7ac
 8006650:	0802b088 	.word	0x0802b088
 8006654:	0802a588 	.word	0x0802a588

08006658 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm>:
    virtual bool getIsPlaying(const Handle handle)
 8006658:	b580      	push	{r7, lr}
 800665a:	b084      	sub	sp, #16
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
 8006660:	6039      	str	r1, [r7, #0]
        assert(handle < no_streams);
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d006      	beq.n	8006676 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x1e>
 8006668:	4b0b      	ldr	r3, [pc, #44]	; (8006698 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x40>)
 800666a:	4a0c      	ldr	r2, [pc, #48]	; (800669c <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x44>)
 800666c:	f44f 71b8 	mov.w	r1, #368	; 0x170
 8006670:	480b      	ldr	r0, [pc, #44]	; (80066a0 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x48>)
 8006672:	f022 f90d 	bl	8028890 <__assert_func>
        Stream& stream = streams[handle];
 8006676:	683a      	ldr	r2, [r7, #0]
 8006678:	4613      	mov	r3, r2
 800667a:	00db      	lsls	r3, r3, #3
 800667c:	4413      	add	r3, r2
 800667e:	009b      	lsls	r3, r3, #2
 8006680:	3308      	adds	r3, #8
 8006682:	687a      	ldr	r2, [r7, #4]
 8006684:	4413      	add	r3, r2
 8006686:	3304      	adds	r3, #4
 8006688:	60fb      	str	r3, [r7, #12]
        return stream.isPlaying;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	7f5b      	ldrb	r3, [r3, #29]
    }
 800668e:	4618      	mov	r0, r3
 8006690:	3710      	adds	r7, #16
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}
 8006696:	bf00      	nop
 8006698:	0802a7ac 	.word	0x0802a7ac
 800669c:	0802b238 	.word	0x0802b238
 80066a0:	0802a588 	.word	0x0802a588

080066a4 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE13getFreeHandleEv>:

    Handle getFreeHandle()
 80066a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80066a6:	b08d      	sub	sp, #52	; 0x34
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
    {
        // Running in UI thread

        for (uint32_t i = 0; i < no_streams; i++)
 80066ac:	2300      	movs	r3, #0
 80066ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d135      	bne.n	8006722 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE13getFreeHandleEv+0x7e>
        {
            if (streams[i].isActive == false)
 80066b6:	6879      	ldr	r1, [r7, #4]
 80066b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066ba:	4613      	mov	r3, r2
 80066bc:	00db      	lsls	r3, r3, #3
 80066be:	4413      	add	r3, r2
 80066c0:	009b      	lsls	r3, r3, #2
 80066c2:	440b      	add	r3, r1
 80066c4:	3328      	adds	r3, #40	; 0x28
 80066c6:	781b      	ldrb	r3, [r3, #0]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d126      	bne.n	800671a <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE13getFreeHandleEv+0x76>
            {
                // Reset stream parameters
                streams[i] = Stream();
 80066cc:	f107 0308 	add.w	r3, r7, #8
 80066d0:	4618      	mov	r0, r3
 80066d2:	f7ff fc9a 	bl	800600a <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE6StreamC1Ev>
 80066d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066d8:	4613      	mov	r3, r2
 80066da:	00db      	lsls	r3, r3, #3
 80066dc:	4413      	add	r3, r2
 80066de:	009b      	lsls	r3, r3, #2
 80066e0:	3308      	adds	r3, #8
 80066e2:	687a      	ldr	r2, [r7, #4]
 80066e4:	4413      	add	r3, r2
 80066e6:	3304      	adds	r3, #4
 80066e8:	f107 0408 	add.w	r4, r7, #8
 80066ec:	469c      	mov	ip, r3
 80066ee:	f104 0e20 	add.w	lr, r4, #32
 80066f2:	4665      	mov	r5, ip
 80066f4:	4626      	mov	r6, r4
 80066f6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80066f8:	6028      	str	r0, [r5, #0]
 80066fa:	6069      	str	r1, [r5, #4]
 80066fc:	60aa      	str	r2, [r5, #8]
 80066fe:	60eb      	str	r3, [r5, #12]
 8006700:	3410      	adds	r4, #16
 8006702:	f10c 0c10 	add.w	ip, ip, #16
 8006706:	4574      	cmp	r4, lr
 8006708:	d1f3      	bne.n	80066f2 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE13getFreeHandleEv+0x4e>
 800670a:	4663      	mov	r3, ip
 800670c:	4622      	mov	r2, r4
 800670e:	8811      	ldrh	r1, [r2, #0]
 8006710:	7892      	ldrb	r2, [r2, #2]
 8006712:	8019      	strh	r1, [r3, #0]
 8006714:	709a      	strb	r2, [r3, #2]

                return static_cast<VideoController::Handle>(i);
 8006716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006718:	e00a      	b.n	8006730 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE13getFreeHandleEv+0x8c>
        for (uint32_t i = 0; i < no_streams; i++)
 800671a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800671c:	3301      	adds	r3, #1
 800671e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006720:	e7c6      	b.n	80066b0 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE13getFreeHandleEv+0xc>
            }
        }

        assert(0 && "Unable to find free video stream handle!");
 8006722:	4b05      	ldr	r3, [pc, #20]	; (8006738 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE13getFreeHandleEv+0x94>)
 8006724:	4a05      	ldr	r2, [pc, #20]	; (800673c <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE13getFreeHandleEv+0x98>)
 8006726:	f240 11c5 	movw	r1, #453	; 0x1c5
 800672a:	4805      	ldr	r0, [pc, #20]	; (8006740 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE13getFreeHandleEv+0x9c>)
 800672c:	f022 f8b0 	bl	8028890 <__assert_func>
        return static_cast<VideoController::Handle>(0);
    }
 8006730:	4618      	mov	r0, r3
 8006732:	3734      	adds	r7, #52	; 0x34
 8006734:	46bd      	mov	sp, r7
 8006736:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006738:	0802b3c4 	.word	0x0802b3c4
 800673c:	0802b3f4 	.word	0x0802b3f4
 8006740:	0802a588 	.word	0x0802a588

08006744 <_GLOBAL__sub_I_mjpegdecoder1>:
 8006744:	b580      	push	{r7, lr}
 8006746:	af00      	add	r7, sp, #0
 8006748:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800674c:	2001      	movs	r0, #1
 800674e:	f7ff fcf3 	bl	8006138 <_Z41__static_initialization_and_destruction_0ii>
 8006752:	bd80      	pop	{r7, pc}

08006754 <_GLOBAL__sub_D_mjpegdecoder1>:
 8006754:	b580      	push	{r7, lr}
 8006756:	af00      	add	r7, sp, #0
 8006758:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800675c:	2000      	movs	r0, #0
 800675e:	f7ff fceb 	bl	8006138 <_Z41__static_initialization_and_destruction_0ii>
 8006762:	bd80      	pop	{r7, pc}

08006764 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks>:
static uint32_t TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
 8006764:	b480      	push	{r7}
 8006766:	b097      	sub	sp, #92	; 0x5c
 8006768:	af00      	add	r7, sp, #0
 800676a:	60f8      	str	r0, [r7, #12]
 800676c:	60b9      	str	r1, [r7, #8]
 800676e:	607a      	str	r2, [r7, #4]
 8006770:	603b      	str	r3, [r7, #0]
  int32_t c_red, c_blue, c_green;

  uint8_t *pOutAddr, *pOutAddr2;
  uint8_t *pChrom, *pLum;

  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	4a9e      	ldr	r2, [pc, #632]	; (80069f0 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x28c>)
 8006776:	fba2 2303 	umull	r2, r3, r2, r3
 800677a:	0a1b      	lsrs	r3, r3, #8
 800677c:	633b      	str	r3, [r7, #48]	; 0x30
  currentMCU = BlockIndex;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	64bb      	str	r3, [r7, #72]	; 0x48

  while(currentMCU < (numberMCU + BlockIndex))
 8006782:	e127      	b.n	80069d4 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x270>
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
 8006784:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006786:	011a      	lsls	r2, r3, #4
 8006788:	4b9a      	ldr	r3, [pc, #616]	; (80069f4 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x290>)
 800678a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800678c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006790:	011b      	lsls	r3, r3, #4
 8006792:	62fb      	str	r3, [r7, #44]	; 0x2c

    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
 8006794:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006796:	011b      	lsls	r3, r3, #4
 8006798:	4a96      	ldr	r2, [pc, #600]	; (80069f4 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x290>)
 800679a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800679c:	fbb3 f1f2 	udiv	r1, r3, r2
 80067a0:	fb01 f202 	mul.w	r2, r1, r2
 80067a4:	1a9b      	subs	r3, r3, r2
 80067a6:	62bb      	str	r3, [r7, #40]	; 0x28

    //tgfx: Set stride to the full width of the RGB Buffer, and not the video itself.
    JPEG_ConvertorParams.ScaledWidth = 480 * 3;
 80067a8:	4b92      	ldr	r3, [pc, #584]	; (80069f4 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x290>)
 80067aa:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 80067ae:	629a      	str	r2, [r3, #40]	; 0x28

    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 80067b0:	4b90      	ldr	r3, [pc, #576]	; (80069f4 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x290>)
 80067b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80067b6:	fb02 f103 	mul.w	r1, r2, r3
 80067ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067bc:	4613      	mov	r3, r2
 80067be:	005b      	lsls	r3, r3, #1
 80067c0:	4413      	add	r3, r2
 80067c2:	440b      	add	r3, r1
 80067c4:	647b      	str	r3, [r7, #68]	; 0x44

    currentMCU++;
 80067c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067c8:	3301      	adds	r3, #1
 80067ca:	64bb      	str	r3, [r7, #72]	; 0x48

    pChrom = pInBuffer + 256; /* pChroma = pInBuffer + 4*64 */
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80067d2:	63bb      	str	r3, [r7, #56]	; 0x38

    pLum = pInBuffer;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	637b      	str	r3, [r7, #52]	; 0x34

    for(i= 0; i <  16; i+=2)
 80067d8:	2300      	movs	r3, #0
 80067da:	657b      	str	r3, [r7, #84]	; 0x54
 80067dc:	e0f2      	b.n	80069c4 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x260>
    {
      if(i == 8)
 80067de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067e0:	2b08      	cmp	r3, #8
 80067e2:	d102      	bne.n	80067ea <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x86>
      {
        pLum = pInBuffer + 128;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	3380      	adds	r3, #128	; 0x80
 80067e8:	637b      	str	r3, [r7, #52]	; 0x34
      }

      if(refline < JPEG_ConvertorParams.ScaledWidth * 272)
 80067ea:	4b82      	ldr	r3, [pc, #520]	; (80069f4 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x290>)
 80067ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80067ee:	4613      	mov	r3, r2
 80067f0:	011b      	lsls	r3, r3, #4
 80067f2:	4413      	add	r3, r2
 80067f4:	011b      	lsls	r3, r3, #4
 80067f6:	461a      	mov	r2, r3
 80067f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067fa:	4293      	cmp	r3, r2
 80067fc:	f080 80df 	bcs.w	80069be <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x25a>
      {
        pOutAddr = pOutBuffer + refline;
 8006800:	68ba      	ldr	r2, [r7, #8]
 8006802:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006804:	4413      	add	r3, r2
 8006806:	643b      	str	r3, [r7, #64]	; 0x40
        pOutAddr2 = pOutAddr + JPEG_ConvertorParams.ScaledWidth;
 8006808:	4b7a      	ldr	r3, [pc, #488]	; (80069f4 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x290>)
 800680a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800680c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800680e:	4413      	add	r3, r2
 8006810:	63fb      	str	r3, [r7, #60]	; 0x3c

        for(k= 0; k<2; k++)
 8006812:	2300      	movs	r3, #0
 8006814:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006816:	e0c5      	b.n	80069a4 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x240>
        {
          for(j=0; j < 8; j+=2)
 8006818:	2300      	movs	r3, #0
 800681a:	653b      	str	r3, [r7, #80]	; 0x50
 800681c:	e0b8      	b.n	8006990 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x22c>
          {
            cbcomp = (int32_t)(*(pChrom));
 800681e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006820:	781b      	ldrb	r3, [r3, #0]
 8006822:	627b      	str	r3, [r7, #36]	; 0x24
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 8006824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006826:	009b      	lsls	r3, r3, #2
 8006828:	4a73      	ldr	r2, [pc, #460]	; (80069f8 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x294>)
 800682a:	4413      	add	r3, r2
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	623b      	str	r3, [r7, #32]

            crcomp = (int32_t)(*(pChrom + 64));
 8006830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006832:	3340      	adds	r3, #64	; 0x40
 8006834:	781b      	ldrb	r3, [r3, #0]
 8006836:	61fb      	str	r3, [r7, #28]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
 8006838:	69fb      	ldr	r3, [r7, #28]
 800683a:	009b      	lsls	r3, r3, #2
 800683c:	4a6f      	ldr	r2, [pc, #444]	; (80069fc <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x298>)
 800683e:	4413      	add	r3, r2
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	61bb      	str	r3, [r7, #24]

            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
 8006844:	69fb      	ldr	r3, [r7, #28]
 8006846:	009b      	lsls	r3, r3, #2
 8006848:	4a6d      	ldr	r2, [pc, #436]	; (8006a00 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x29c>)
 800684a:	4413      	add	r3, r2
 800684c:	681a      	ldr	r2, [r3, #0]
 800684e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006850:	009b      	lsls	r3, r3, #2
 8006852:	496c      	ldr	r1, [pc, #432]	; (8006a04 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2a0>)
 8006854:	440b      	add	r3, r1
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4413      	add	r3, r2
 800685a:	141b      	asrs	r3, r3, #16
 800685c:	617b      	str	r3, [r7, #20]
              (CLAMP( ycomp + c_green) << JPEG_GREEN_OFFSET) | \
              (CLAMP(ycomp + c_blue) << JPEG_BLUE_OFFSET);

#elif (JPEG_RGB_FORMAT == JPEG_RGB888)

           ycomp = (int32_t)(*(pLum +j));
 800685e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006860:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006862:	4413      	add	r3, r2
 8006864:	781b      	ldrb	r3, [r3, #0]
 8006866:	613b      	str	r3, [r7, #16]

            pOutAddr[JPEG_RED_OFFSET/8] = CLAMP(ycomp + c_red);
 8006868:	693a      	ldr	r2, [r7, #16]
 800686a:	69bb      	ldr	r3, [r7, #24]
 800686c:	4413      	add	r3, r2
 800686e:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8006872:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006874:	3302      	adds	r3, #2
 8006876:	4964      	ldr	r1, [pc, #400]	; (8006a08 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2a4>)
 8006878:	5c8a      	ldrb	r2, [r1, r2]
 800687a:	701a      	strb	r2, [r3, #0]
            pOutAddr[JPEG_GREEN_OFFSET/8] = CLAMP(ycomp + c_green);
 800687c:	693a      	ldr	r2, [r7, #16]
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	4413      	add	r3, r2
 8006882:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8006886:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006888:	3301      	adds	r3, #1
 800688a:	495f      	ldr	r1, [pc, #380]	; (8006a08 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2a4>)
 800688c:	5c8a      	ldrb	r2, [r1, r2]
 800688e:	701a      	strb	r2, [r3, #0]
            pOutAddr[JPEG_BLUE_OFFSET/8] = CLAMP(ycomp + c_blue);
 8006890:	693a      	ldr	r2, [r7, #16]
 8006892:	6a3b      	ldr	r3, [r7, #32]
 8006894:	4413      	add	r3, r2
 8006896:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800689a:	4a5b      	ldr	r2, [pc, #364]	; (8006a08 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2a4>)
 800689c:	5cd2      	ldrb	r2, [r2, r3]
 800689e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068a0:	701a      	strb	r2, [r3, #0]

            /**********/
            ycomp = (int32_t)(*(pLum +j +1));
 80068a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068a4:	3301      	adds	r3, #1
 80068a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80068a8:	4413      	add	r3, r2
 80068aa:	781b      	ldrb	r3, [r3, #0]
 80068ac:	613b      	str	r3, [r7, #16]

            pOutAddr[3 + JPEG_RED_OFFSET/8] = CLAMP(ycomp + c_red);
 80068ae:	693a      	ldr	r2, [r7, #16]
 80068b0:	69bb      	ldr	r3, [r7, #24]
 80068b2:	4413      	add	r3, r2
 80068b4:	f503 7280 	add.w	r2, r3, #256	; 0x100
 80068b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068ba:	3305      	adds	r3, #5
 80068bc:	4952      	ldr	r1, [pc, #328]	; (8006a08 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2a4>)
 80068be:	5c8a      	ldrb	r2, [r1, r2]
 80068c0:	701a      	strb	r2, [r3, #0]
            pOutAddr[3 + JPEG_GREEN_OFFSET/8] = CLAMP(ycomp + c_green);
 80068c2:	693a      	ldr	r2, [r7, #16]
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	4413      	add	r3, r2
 80068c8:	f503 7280 	add.w	r2, r3, #256	; 0x100
 80068cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068ce:	3304      	adds	r3, #4
 80068d0:	494d      	ldr	r1, [pc, #308]	; (8006a08 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2a4>)
 80068d2:	5c8a      	ldrb	r2, [r1, r2]
 80068d4:	701a      	strb	r2, [r3, #0]
            pOutAddr[3 + JPEG_BLUE_OFFSET/8] = CLAMP(ycomp + c_blue);
 80068d6:	693a      	ldr	r2, [r7, #16]
 80068d8:	6a3b      	ldr	r3, [r7, #32]
 80068da:	4413      	add	r3, r2
 80068dc:	f503 7280 	add.w	r2, r3, #256	; 0x100
 80068e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068e2:	3303      	adds	r3, #3
 80068e4:	4948      	ldr	r1, [pc, #288]	; (8006a08 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2a4>)
 80068e6:	5c8a      	ldrb	r2, [r1, r2]
 80068e8:	701a      	strb	r2, [r3, #0]

            /**********/
            ycomp = (int32_t)(*(pLum +j +8));
 80068ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068ec:	3308      	adds	r3, #8
 80068ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80068f0:	4413      	add	r3, r2
 80068f2:	781b      	ldrb	r3, [r3, #0]
 80068f4:	613b      	str	r3, [r7, #16]

            pOutAddr2[JPEG_RED_OFFSET/8] = CLAMP(ycomp + c_red);
 80068f6:	693a      	ldr	r2, [r7, #16]
 80068f8:	69bb      	ldr	r3, [r7, #24]
 80068fa:	4413      	add	r3, r2
 80068fc:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8006900:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006902:	3302      	adds	r3, #2
 8006904:	4940      	ldr	r1, [pc, #256]	; (8006a08 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2a4>)
 8006906:	5c8a      	ldrb	r2, [r1, r2]
 8006908:	701a      	strb	r2, [r3, #0]
            pOutAddr2[JPEG_GREEN_OFFSET/8] = CLAMP(ycomp + c_green);
 800690a:	693a      	ldr	r2, [r7, #16]
 800690c:	697b      	ldr	r3, [r7, #20]
 800690e:	4413      	add	r3, r2
 8006910:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8006914:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006916:	3301      	adds	r3, #1
 8006918:	493b      	ldr	r1, [pc, #236]	; (8006a08 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2a4>)
 800691a:	5c8a      	ldrb	r2, [r1, r2]
 800691c:	701a      	strb	r2, [r3, #0]
            pOutAddr2[JPEG_BLUE_OFFSET/8] = CLAMP(ycomp + c_blue);
 800691e:	693a      	ldr	r2, [r7, #16]
 8006920:	6a3b      	ldr	r3, [r7, #32]
 8006922:	4413      	add	r3, r2
 8006924:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8006928:	4a37      	ldr	r2, [pc, #220]	; (8006a08 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2a4>)
 800692a:	5cd2      	ldrb	r2, [r2, r3]
 800692c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800692e:	701a      	strb	r2, [r3, #0]

            /**********/
            ycomp = (int32_t)(*(pLum +j +8 +1));
 8006930:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006932:	3309      	adds	r3, #9
 8006934:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006936:	4413      	add	r3, r2
 8006938:	781b      	ldrb	r3, [r3, #0]
 800693a:	613b      	str	r3, [r7, #16]

            pOutAddr2[3+ JPEG_RED_OFFSET/8] = CLAMP(ycomp + c_red);
 800693c:	693a      	ldr	r2, [r7, #16]
 800693e:	69bb      	ldr	r3, [r7, #24]
 8006940:	4413      	add	r3, r2
 8006942:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8006946:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006948:	3305      	adds	r3, #5
 800694a:	492f      	ldr	r1, [pc, #188]	; (8006a08 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2a4>)
 800694c:	5c8a      	ldrb	r2, [r1, r2]
 800694e:	701a      	strb	r2, [r3, #0]
            pOutAddr2[3 + JPEG_GREEN_OFFSET/8] = CLAMP(ycomp + c_green);
 8006950:	693a      	ldr	r2, [r7, #16]
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	4413      	add	r3, r2
 8006956:	f503 7280 	add.w	r2, r3, #256	; 0x100
 800695a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800695c:	3304      	adds	r3, #4
 800695e:	492a      	ldr	r1, [pc, #168]	; (8006a08 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2a4>)
 8006960:	5c8a      	ldrb	r2, [r1, r2]
 8006962:	701a      	strb	r2, [r3, #0]
            pOutAddr2[3 + JPEG_BLUE_OFFSET/8] = CLAMP(ycomp + c_blue);
 8006964:	693a      	ldr	r2, [r7, #16]
 8006966:	6a3b      	ldr	r3, [r7, #32]
 8006968:	4413      	add	r3, r2
 800696a:	f503 7280 	add.w	r2, r3, #256	; 0x100
 800696e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006970:	3303      	adds	r3, #3
 8006972:	4925      	ldr	r1, [pc, #148]	; (8006a08 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2a4>)
 8006974:	5c8a      	ldrb	r2, [r1, r2]
 8006976:	701a      	strb	r2, [r3, #0]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
#endif /* JPEG_RGB_FORMAT */

            pOutAddr += JPEG_BYTES_PER_PIXEL * 2;
 8006978:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800697a:	3306      	adds	r3, #6
 800697c:	643b      	str	r3, [r7, #64]	; 0x40
            pOutAddr2 += JPEG_BYTES_PER_PIXEL * 2;
 800697e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006980:	3306      	adds	r3, #6
 8006982:	63fb      	str	r3, [r7, #60]	; 0x3c

            pChrom++;
 8006984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006986:	3301      	adds	r3, #1
 8006988:	63bb      	str	r3, [r7, #56]	; 0x38
          for(j=0; j < 8; j+=2)
 800698a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800698c:	3302      	adds	r3, #2
 800698e:	653b      	str	r3, [r7, #80]	; 0x50
 8006990:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006992:	2b07      	cmp	r3, #7
 8006994:	f67f af43 	bls.w	800681e <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xba>
          }
          pLum += 64;
 8006998:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800699a:	3340      	adds	r3, #64	; 0x40
 800699c:	637b      	str	r3, [r7, #52]	; 0x34
        for(k= 0; k<2; k++)
 800699e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069a0:	3301      	adds	r3, #1
 80069a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80069a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069a6:	2b01      	cmp	r3, #1
 80069a8:	f67f af36 	bls.w	8006818 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xb4>
        }

        pLum = pLum - 128 + 16;
 80069ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069ae:	3b70      	subs	r3, #112	; 0x70
 80069b0:	637b      	str	r3, [r7, #52]	; 0x34

        refline += 2*JPEG_ConvertorParams.ScaledWidth;
 80069b2:	4b10      	ldr	r3, [pc, #64]	; (80069f4 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x290>)
 80069b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069b6:	005b      	lsls	r3, r3, #1
 80069b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80069ba:	4413      	add	r3, r2
 80069bc:	647b      	str	r3, [r7, #68]	; 0x44
    for(i= 0; i <  16; i+=2)
 80069be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80069c0:	3302      	adds	r3, #2
 80069c2:	657b      	str	r3, [r7, #84]	; 0x54
 80069c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80069c6:	2b0f      	cmp	r3, #15
 80069c8:	f67f af09 	bls.w	80067de <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x7a>
      }
    }

    pInBuffer +=  YCBCR_420_BLOCK_SIZE;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80069d2:	60fb      	str	r3, [r7, #12]
  while(currentMCU < (numberMCU + BlockIndex))
 80069d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	4413      	add	r3, r2
 80069da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80069dc:	429a      	cmp	r2, r3
 80069de:	f4ff aed1 	bcc.w	8006784 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x20>
  }
  return numberMCU;
 80069e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	375c      	adds	r7, #92	; 0x5c
 80069e8:	46bd      	mov	sp, r7
 80069ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ee:	4770      	bx	lr
 80069f0:	aaaaaaab 	.word	0xaaaaaaab
 80069f4:	240071fc 	.word	0x240071fc
 80069f8:	2400763c 	.word	0x2400763c
 80069fc:	2400723c 	.word	0x2400723c
 8006a00:	24007a3c 	.word	0x24007a3c
 8006a04:	24007e3c 	.word	0x24007e3c
 8006a08:	0802c554 	.word	0x0802c554

08006a0c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr422_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b097      	sub	sp, #92	; 0x5c
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	60f8      	str	r0, [r7, #12]
 8006a14:	60b9      	str	r1, [r7, #8]
 8006a16:	607a      	str	r2, [r7, #4]
 8006a18:	603b      	str	r3, [r7, #0]
  int32_t c_red, c_blue, c_green;

  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;

  numberMCU = DataCount / YCBCR_422_BLOCK_SIZE;
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	0a1b      	lsrs	r3, r3, #8
 8006a1e:	637b      	str	r3, [r7, #52]	; 0x34
  currentMCU = BlockIndex;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	64bb      	str	r3, [r7, #72]	; 0x48

  while(currentMCU < (numberMCU + BlockIndex))
 8006a24:	e0c5      	b.n	8006bb2 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1a6>
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
 8006a26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a28:	011a      	lsls	r2, r3, #4
 8006a2a:	4b69      	ldr	r3, [pc, #420]	; (8006bd0 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1c4>)
 8006a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a32:	00db      	lsls	r3, r3, #3
 8006a34:	633b      	str	r3, [r7, #48]	; 0x30

    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
 8006a36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a38:	011b      	lsls	r3, r3, #4
 8006a3a:	4a65      	ldr	r2, [pc, #404]	; (8006bd0 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1c4>)
 8006a3c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006a3e:	fbb3 f1f2 	udiv	r1, r3, r2
 8006a42:	fb01 f202 	mul.w	r2, r1, r2
 8006a46:	1a9b      	subs	r3, r3, r2
 8006a48:	62fb      	str	r3, [r7, #44]	; 0x2c

    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8006a4a:	4b61      	ldr	r3, [pc, #388]	; (8006bd0 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1c4>)
 8006a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a50:	fb02 f103 	mul.w	r1, r2, r3
 8006a54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a56:	4613      	mov	r3, r2
 8006a58:	005b      	lsls	r3, r3, #1
 8006a5a:	4413      	add	r3, r2
 8006a5c:	440b      	add	r3, r1
 8006a5e:	647b      	str	r3, [r7, #68]	; 0x44

    currentMCU++;
 8006a60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a62:	3301      	adds	r3, #1
 8006a64:	64bb      	str	r3, [r7, #72]	; 0x48

    pChrom = pInBuffer + 128; /* pChroma = pInBuffer + 2*64 */
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	3380      	adds	r3, #128	; 0x80
 8006a6a:	63fb      	str	r3, [r7, #60]	; 0x3c

    pLum = pInBuffer;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	63bb      	str	r3, [r7, #56]	; 0x38

    for(i= 0; i <  8; i++)
 8006a70:	2300      	movs	r3, #0
 8006a72:	657b      	str	r3, [r7, #84]	; 0x54
 8006a74:	e095      	b.n	8006ba2 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x196>
    {
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8006a76:	4b56      	ldr	r3, [pc, #344]	; (8006bd0 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1c4>)
 8006a78:	691b      	ldr	r3, [r3, #16]
 8006a7a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006a7c:	429a      	cmp	r2, r3
 8006a7e:	f080 808d 	bcs.w	8006b9c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x190>
      {
        pOutAddr = pOutBuffer + refline;
 8006a82:	68ba      	ldr	r2, [r7, #8]
 8006a84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a86:	4413      	add	r3, r2
 8006a88:	643b      	str	r3, [r7, #64]	; 0x40

        for(k= 0; k<2; k++)
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a8e:	e07a      	b.n	8006b86 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x17a>
        {
          for(j=0; j < 8; j+=2)
 8006a90:	2300      	movs	r3, #0
 8006a92:	653b      	str	r3, [r7, #80]	; 0x50
 8006a94:	e06e      	b.n	8006b74 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x168>
          {
            cbcomp = (int32_t)(*(pChrom));
 8006a96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a98:	781b      	ldrb	r3, [r3, #0]
 8006a9a:	62bb      	str	r3, [r7, #40]	; 0x28
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 8006a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a9e:	009b      	lsls	r3, r3, #2
 8006aa0:	4a4c      	ldr	r2, [pc, #304]	; (8006bd4 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1c8>)
 8006aa2:	4413      	add	r3, r2
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	627b      	str	r3, [r7, #36]	; 0x24

            crcomp = (int32_t)(*(pChrom + 64));
 8006aa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006aaa:	3340      	adds	r3, #64	; 0x40
 8006aac:	781b      	ldrb	r3, [r3, #0]
 8006aae:	623b      	str	r3, [r7, #32]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
 8006ab0:	6a3b      	ldr	r3, [r7, #32]
 8006ab2:	009b      	lsls	r3, r3, #2
 8006ab4:	4a48      	ldr	r2, [pc, #288]	; (8006bd8 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1cc>)
 8006ab6:	4413      	add	r3, r2
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	61fb      	str	r3, [r7, #28]

            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
 8006abc:	6a3b      	ldr	r3, [r7, #32]
 8006abe:	009b      	lsls	r3, r3, #2
 8006ac0:	4a46      	ldr	r2, [pc, #280]	; (8006bdc <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1d0>)
 8006ac2:	4413      	add	r3, r2
 8006ac4:	681a      	ldr	r2, [r3, #0]
 8006ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ac8:	009b      	lsls	r3, r3, #2
 8006aca:	4945      	ldr	r1, [pc, #276]	; (8006be0 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1d4>)
 8006acc:	440b      	add	r3, r1
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4413      	add	r3, r2
 8006ad2:	141b      	asrs	r3, r3, #16
 8006ad4:	61bb      	str	r3, [r7, #24]
              (CLAMP( ycomp + c_green) << JPEG_GREEN_OFFSET) | \
              (CLAMP(ycomp + c_blue) << JPEG_BLUE_OFFSET);

#elif (JPEG_RGB_FORMAT == JPEG_RGB888)

           ycomp = (int32_t)(*(pLum +j));
 8006ad6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ad8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ada:	4413      	add	r3, r2
 8006adc:	781b      	ldrb	r3, [r3, #0]
 8006ade:	617b      	str	r3, [r7, #20]

            pOutAddr[JPEG_RED_OFFSET/8] = CLAMP(ycomp + c_red);
 8006ae0:	697a      	ldr	r2, [r7, #20]
 8006ae2:	69fb      	ldr	r3, [r7, #28]
 8006ae4:	4413      	add	r3, r2
 8006ae6:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8006aea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006aec:	3302      	adds	r3, #2
 8006aee:	493d      	ldr	r1, [pc, #244]	; (8006be4 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1d8>)
 8006af0:	5c8a      	ldrb	r2, [r1, r2]
 8006af2:	701a      	strb	r2, [r3, #0]
            pOutAddr[JPEG_GREEN_OFFSET/8] = CLAMP(ycomp + c_green);
 8006af4:	697a      	ldr	r2, [r7, #20]
 8006af6:	69bb      	ldr	r3, [r7, #24]
 8006af8:	4413      	add	r3, r2
 8006afa:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8006afe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b00:	3301      	adds	r3, #1
 8006b02:	4938      	ldr	r1, [pc, #224]	; (8006be4 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1d8>)
 8006b04:	5c8a      	ldrb	r2, [r1, r2]
 8006b06:	701a      	strb	r2, [r3, #0]
            pOutAddr[JPEG_BLUE_OFFSET/8] = CLAMP(ycomp + c_blue);
 8006b08:	697a      	ldr	r2, [r7, #20]
 8006b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b0c:	4413      	add	r3, r2
 8006b0e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8006b12:	4a34      	ldr	r2, [pc, #208]	; (8006be4 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1d8>)
 8006b14:	5cd2      	ldrb	r2, [r2, r3]
 8006b16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b18:	701a      	strb	r2, [r3, #0]

            /**********/
            ycomp = (int32_t)(*(pLum +j +1));
 8006b1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b1c:	3301      	adds	r3, #1
 8006b1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b20:	4413      	add	r3, r2
 8006b22:	781b      	ldrb	r3, [r3, #0]
 8006b24:	617b      	str	r3, [r7, #20]

            pOutAddr[3 + JPEG_RED_OFFSET/8] = CLAMP(ycomp + c_red);
 8006b26:	697a      	ldr	r2, [r7, #20]
 8006b28:	69fb      	ldr	r3, [r7, #28]
 8006b2a:	4413      	add	r3, r2
 8006b2c:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8006b30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b32:	3305      	adds	r3, #5
 8006b34:	492b      	ldr	r1, [pc, #172]	; (8006be4 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1d8>)
 8006b36:	5c8a      	ldrb	r2, [r1, r2]
 8006b38:	701a      	strb	r2, [r3, #0]
            pOutAddr[3 + JPEG_GREEN_OFFSET/8] = CLAMP(ycomp + c_green);
 8006b3a:	697a      	ldr	r2, [r7, #20]
 8006b3c:	69bb      	ldr	r3, [r7, #24]
 8006b3e:	4413      	add	r3, r2
 8006b40:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8006b44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b46:	3304      	adds	r3, #4
 8006b48:	4926      	ldr	r1, [pc, #152]	; (8006be4 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1d8>)
 8006b4a:	5c8a      	ldrb	r2, [r1, r2]
 8006b4c:	701a      	strb	r2, [r3, #0]
            pOutAddr[3 + JPEG_BLUE_OFFSET/8] = CLAMP(ycomp + c_blue);
 8006b4e:	697a      	ldr	r2, [r7, #20]
 8006b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b52:	4413      	add	r3, r2
 8006b54:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8006b58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b5a:	3303      	adds	r3, #3
 8006b5c:	4921      	ldr	r1, [pc, #132]	; (8006be4 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1d8>)
 8006b5e:	5c8a      	ldrb	r2, [r1, r2]
 8006b60:	701a      	strb	r2, [r3, #0]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);

#endif /* JPEG_RGB_FORMAT*/

            pOutAddr += JPEG_BYTES_PER_PIXEL * 2;
 8006b62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b64:	3306      	adds	r3, #6
 8006b66:	643b      	str	r3, [r7, #64]	; 0x40

            pChrom++;
 8006b68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b6a:	3301      	adds	r3, #1
 8006b6c:	63fb      	str	r3, [r7, #60]	; 0x3c
          for(j=0; j < 8; j+=2)
 8006b6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b70:	3302      	adds	r3, #2
 8006b72:	653b      	str	r3, [r7, #80]	; 0x50
 8006b74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b76:	2b07      	cmp	r3, #7
 8006b78:	d98d      	bls.n	8006a96 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x8a>
          }
          pLum += 64;
 8006b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b7c:	3340      	adds	r3, #64	; 0x40
 8006b7e:	63bb      	str	r3, [r7, #56]	; 0x38
        for(k= 0; k<2; k++)
 8006b80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b82:	3301      	adds	r3, #1
 8006b84:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b88:	2b01      	cmp	r3, #1
 8006b8a:	d981      	bls.n	8006a90 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x84>
        }

        pLum = pLum - 128 + 8;
 8006b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b8e:	3b78      	subs	r3, #120	; 0x78
 8006b90:	63bb      	str	r3, [r7, #56]	; 0x38

        refline += JPEG_ConvertorParams.ScaledWidth;
 8006b92:	4b0f      	ldr	r3, [pc, #60]	; (8006bd0 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1c4>)
 8006b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b96:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006b98:	4413      	add	r3, r2
 8006b9a:	647b      	str	r3, [r7, #68]	; 0x44
    for(i= 0; i <  8; i++)
 8006b9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b9e:	3301      	adds	r3, #1
 8006ba0:	657b      	str	r3, [r7, #84]	; 0x54
 8006ba2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ba4:	2b07      	cmp	r3, #7
 8006ba6:	f67f af66 	bls.w	8006a76 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x6a>
      }
    }

    pInBuffer +=  YCBCR_422_BLOCK_SIZE;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8006bb0:	60fb      	str	r3, [r7, #12]
  while(currentMCU < (numberMCU + BlockIndex))
 8006bb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	4413      	add	r3, r2
 8006bb8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	f4ff af33 	bcc.w	8006a26 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1a>
  }
  return numberMCU;
 8006bc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	375c      	adds	r7, #92	; 0x5c
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bcc:	4770      	bx	lr
 8006bce:	bf00      	nop
 8006bd0:	240071fc 	.word	0x240071fc
 8006bd4:	2400763c 	.word	0x2400763c
 8006bd8:	2400723c 	.word	0x2400723c
 8006bdc:	24007a3c 	.word	0x24007a3c
 8006be0:	24007e3c 	.word	0x24007e3c
 8006be4:	0802c554 	.word	0x0802c554

08006be8 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr444_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
 8006be8:	b480      	push	{r7}
 8006bea:	b095      	sub	sp, #84	; 0x54
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	60f8      	str	r0, [r7, #12]
 8006bf0:	60b9      	str	r1, [r7, #8]
 8006bf2:	607a      	str	r2, [r7, #4]
 8006bf4:	603b      	str	r3, [r7, #0]
  int32_t c_red, c_blue, c_green;

  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;

  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	4a54      	ldr	r2, [pc, #336]	; (8006d4c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x164>)
 8006bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8006bfe:	09db      	lsrs	r3, r3, #7
 8006c00:	633b      	str	r3, [r7, #48]	; 0x30
  currentMCU = BlockIndex;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	647b      	str	r3, [r7, #68]	; 0x44

  while(currentMCU < (numberMCU + BlockIndex))
 8006c06:	e092      	b.n	8006d2e <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x146>
  {

    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 8006c08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c0a:	00da      	lsls	r2, r3, #3
 8006c0c:	4b50      	ldr	r3, [pc, #320]	; (8006d50 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x168>)
 8006c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c10:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c14:	00db      	lsls	r3, r3, #3
 8006c16:	62fb      	str	r3, [r7, #44]	; 0x2c

    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 8006c18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c1a:	00db      	lsls	r3, r3, #3
 8006c1c:	4a4c      	ldr	r2, [pc, #304]	; (8006d50 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x168>)
 8006c1e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006c20:	fbb3 f1f2 	udiv	r1, r3, r2
 8006c24:	fb01 f202 	mul.w	r2, r1, r2
 8006c28:	1a9b      	subs	r3, r3, r2
 8006c2a:	62bb      	str	r3, [r7, #40]	; 0x28

    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8006c2c:	4b48      	ldr	r3, [pc, #288]	; (8006d50 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x168>)
 8006c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c32:	fb02 f103 	mul.w	r1, r2, r3
 8006c36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c38:	4613      	mov	r3, r2
 8006c3a:	005b      	lsls	r3, r3, #1
 8006c3c:	4413      	add	r3, r2
 8006c3e:	440b      	add	r3, r1
 8006c40:	643b      	str	r3, [r7, #64]	; 0x40

    currentMCU++;
 8006c42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c44:	3301      	adds	r3, #1
 8006c46:	647b      	str	r3, [r7, #68]	; 0x44

    pChrom = pInBuffer + 64; /* pChroma = pInBuffer + 4*64 */
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	3340      	adds	r3, #64	; 0x40
 8006c4c:	63bb      	str	r3, [r7, #56]	; 0x38

    pLum = pInBuffer;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	637b      	str	r3, [r7, #52]	; 0x34

    for(i= 0; i <  8; i++)
 8006c52:	2300      	movs	r3, #0
 8006c54:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c56:	e064      	b.n	8006d22 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x13a>
    {
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8006c58:	4b3d      	ldr	r3, [pc, #244]	; (8006d50 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x168>)
 8006c5a:	691b      	ldr	r3, [r3, #16]
 8006c5c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006c5e:	429a      	cmp	r2, r3
 8006c60:	d25c      	bcs.n	8006d1c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x134>
      {
        pOutAddr = pOutBuffer+ refline;
 8006c62:	68ba      	ldr	r2, [r7, #8]
 8006c64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c66:	4413      	add	r3, r2
 8006c68:	63fb      	str	r3, [r7, #60]	; 0x3c

          for(j=0; j < 8; j++)
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c6e:	e04a      	b.n	8006d06 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x11e>
          {
            cbcomp = (int32_t)(*pChrom);
 8006c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c72:	781b      	ldrb	r3, [r3, #0]
 8006c74:	627b      	str	r3, [r7, #36]	; 0x24
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 8006c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c78:	009b      	lsls	r3, r3, #2
 8006c7a:	4a36      	ldr	r2, [pc, #216]	; (8006d54 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x16c>)
 8006c7c:	4413      	add	r3, r2
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	623b      	str	r3, [r7, #32]

            crcomp = (int32_t)(*(pChrom + 64));
 8006c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c84:	3340      	adds	r3, #64	; 0x40
 8006c86:	781b      	ldrb	r3, [r3, #0]
 8006c88:	61fb      	str	r3, [r7, #28]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
 8006c8a:	69fb      	ldr	r3, [r7, #28]
 8006c8c:	009b      	lsls	r3, r3, #2
 8006c8e:	4a32      	ldr	r2, [pc, #200]	; (8006d58 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x170>)
 8006c90:	4413      	add	r3, r2
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	61bb      	str	r3, [r7, #24]

            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
 8006c96:	69fb      	ldr	r3, [r7, #28]
 8006c98:	009b      	lsls	r3, r3, #2
 8006c9a:	4a30      	ldr	r2, [pc, #192]	; (8006d5c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x174>)
 8006c9c:	4413      	add	r3, r2
 8006c9e:	681a      	ldr	r2, [r3, #0]
 8006ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca2:	009b      	lsls	r3, r3, #2
 8006ca4:	492e      	ldr	r1, [pc, #184]	; (8006d60 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x178>)
 8006ca6:	440b      	add	r3, r1
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4413      	add	r3, r2
 8006cac:	141b      	asrs	r3, r3, #16
 8006cae:	617b      	str	r3, [r7, #20]
              (CLAMP( ycomp + c_green) << JPEG_GREEN_OFFSET) | \
              (CLAMP(ycomp + c_blue) << JPEG_BLUE_OFFSET);

#elif (JPEG_RGB_FORMAT == JPEG_RGB888)

            ycomp = (int32_t)(*(pLum +j));
 8006cb0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006cb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006cb4:	4413      	add	r3, r2
 8006cb6:	781b      	ldrb	r3, [r3, #0]
 8006cb8:	613b      	str	r3, [r7, #16]

            pOutAddr[JPEG_RED_OFFSET/8] = CLAMP(ycomp + c_red);
 8006cba:	693a      	ldr	r2, [r7, #16]
 8006cbc:	69bb      	ldr	r3, [r7, #24]
 8006cbe:	4413      	add	r3, r2
 8006cc0:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8006cc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cc6:	3302      	adds	r3, #2
 8006cc8:	4926      	ldr	r1, [pc, #152]	; (8006d64 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x17c>)
 8006cca:	5c8a      	ldrb	r2, [r1, r2]
 8006ccc:	701a      	strb	r2, [r3, #0]
            pOutAddr[JPEG_GREEN_OFFSET/8] = CLAMP(ycomp + c_green);
 8006cce:	693a      	ldr	r2, [r7, #16]
 8006cd0:	697b      	ldr	r3, [r7, #20]
 8006cd2:	4413      	add	r3, r2
 8006cd4:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8006cd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cda:	3301      	adds	r3, #1
 8006cdc:	4921      	ldr	r1, [pc, #132]	; (8006d64 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x17c>)
 8006cde:	5c8a      	ldrb	r2, [r1, r2]
 8006ce0:	701a      	strb	r2, [r3, #0]
            pOutAddr[JPEG_BLUE_OFFSET/8] = CLAMP(ycomp + c_blue);
 8006ce2:	693a      	ldr	r2, [r7, #16]
 8006ce4:	6a3b      	ldr	r3, [r7, #32]
 8006ce6:	4413      	add	r3, r2
 8006ce8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8006cec:	4a1d      	ldr	r2, [pc, #116]	; (8006d64 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x17c>)
 8006cee:	5cd2      	ldrb	r2, [r2, r3]
 8006cf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cf2:	701a      	strb	r2, [r3, #0]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);

#endif /* JPEG_RGB_FORMAT */

            pOutAddr += JPEG_BYTES_PER_PIXEL;
 8006cf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cf6:	3303      	adds	r3, #3
 8006cf8:	63fb      	str	r3, [r7, #60]	; 0x3c

            pChrom++;
 8006cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cfc:	3301      	adds	r3, #1
 8006cfe:	63bb      	str	r3, [r7, #56]	; 0x38
          for(j=0; j < 8; j++)
 8006d00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d02:	3301      	adds	r3, #1
 8006d04:	64bb      	str	r3, [r7, #72]	; 0x48
 8006d06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d08:	2b07      	cmp	r3, #7
 8006d0a:	d9b1      	bls.n	8006c70 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x88>
          }
          pLum += 8;
 8006d0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d0e:	3308      	adds	r3, #8
 8006d10:	637b      	str	r3, [r7, #52]	; 0x34

        refline += JPEG_ConvertorParams.ScaledWidth;
 8006d12:	4b0f      	ldr	r3, [pc, #60]	; (8006d50 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x168>)
 8006d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d16:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006d18:	4413      	add	r3, r2
 8006d1a:	643b      	str	r3, [r7, #64]	; 0x40
    for(i= 0; i <  8; i++)
 8006d1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d1e:	3301      	adds	r3, #1
 8006d20:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d24:	2b07      	cmp	r3, #7
 8006d26:	d997      	bls.n	8006c58 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x70>
      }
    }

    pInBuffer +=  YCBCR_444_BLOCK_SIZE;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	33c0      	adds	r3, #192	; 0xc0
 8006d2c:	60fb      	str	r3, [r7, #12]
  while(currentMCU < (numberMCU + BlockIndex))
 8006d2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	4413      	add	r3, r2
 8006d34:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006d36:	429a      	cmp	r2, r3
 8006d38:	f4ff af66 	bcc.w	8006c08 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x20>
  }
  return numberMCU;
 8006d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	3754      	adds	r7, #84	; 0x54
 8006d42:	46bd      	mov	sp, r7
 8006d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d48:	4770      	bx	lr
 8006d4a:	bf00      	nop
 8006d4c:	aaaaaaab 	.word	0xaaaaaaab
 8006d50:	240071fc 	.word	0x240071fc
 8006d54:	2400763c 	.word	0x2400763c
 8006d58:	2400723c 	.word	0x2400723c
 8006d5c:	24007a3c 	.word	0x24007a3c
 8006d60:	24007e3c 	.word	0x24007e3c
 8006d64:	0802c554 	.word	0x0802c554

08006d68 <JPEG_MCU_Gray_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_Gray_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b08f      	sub	sp, #60	; 0x3c
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	60f8      	str	r0, [r7, #12]
 8006d70:	60b9      	str	r1, [r7, #8]
 8006d72:	607a      	str	r2, [r7, #4]
 8006d74:	603b      	str	r3, [r7, #0]
  uint32_t refline;

  uint32_t i,j, ySample;
  uint8_t *pOutAddr,  *pLum;

  numberMCU = DataCount / GRAY_444_BLOCK_SIZE;
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	099b      	lsrs	r3, r3, #6
 8006d7a:	61fb      	str	r3, [r7, #28]
  currentMCU = BlockIndex;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	637b      	str	r3, [r7, #52]	; 0x34

  while(currentMCU < (numberMCU + BlockIndex))
 8006d80:	e05b      	b.n	8006e3a <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xd2>
  {
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 8006d82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d84:	00da      	lsls	r2, r3, #3
 8006d86:	4b33      	ldr	r3, [pc, #204]	; (8006e54 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xec>)
 8006d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d8e:	00db      	lsls	r3, r3, #3
 8006d90:	61bb      	str	r3, [r7, #24]

    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 8006d92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d94:	00db      	lsls	r3, r3, #3
 8006d96:	4a2f      	ldr	r2, [pc, #188]	; (8006e54 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xec>)
 8006d98:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006d9a:	fbb3 f1f2 	udiv	r1, r3, r2
 8006d9e:	fb01 f202 	mul.w	r2, r1, r2
 8006da2:	1a9b      	subs	r3, r3, r2
 8006da4:	617b      	str	r3, [r7, #20]

    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8006da6:	4b2b      	ldr	r3, [pc, #172]	; (8006e54 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xec>)
 8006da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006daa:	69ba      	ldr	r2, [r7, #24]
 8006dac:	fb02 f103 	mul.w	r1, r2, r3
 8006db0:	697a      	ldr	r2, [r7, #20]
 8006db2:	4613      	mov	r3, r2
 8006db4:	005b      	lsls	r3, r3, #1
 8006db6:	4413      	add	r3, r2
 8006db8:	440b      	add	r3, r1
 8006dba:	633b      	str	r3, [r7, #48]	; 0x30

    currentMCU++;
 8006dbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dbe:	3301      	adds	r3, #1
 8006dc0:	637b      	str	r3, [r7, #52]	; 0x34

    pLum = pInBuffer;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	623b      	str	r3, [r7, #32]

    for(i= 0; i <  8; i++)
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006dca:	e030      	b.n	8006e2e <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xc6>
    {
      pOutAddr = pOutBuffer + refline;
 8006dcc:	68ba      	ldr	r2, [r7, #8]
 8006dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dd0:	4413      	add	r3, r2
 8006dd2:	627b      	str	r3, [r7, #36]	; 0x24
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8006dd4:	4b1f      	ldr	r3, [pc, #124]	; (8006e54 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xec>)
 8006dd6:	691b      	ldr	r3, [r3, #16]
 8006dd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006dda:	429a      	cmp	r2, r3
 8006ddc:	d224      	bcs.n	8006e28 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xc0>
      {
        for(j=0; j < 8; j++)
 8006dde:	2300      	movs	r3, #0
 8006de0:	62bb      	str	r3, [r7, #40]	; 0x28
 8006de2:	e019      	b.n	8006e18 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xb0>
        {
          ySample =   (uint32_t)(*pLum);
 8006de4:	6a3b      	ldr	r3, [r7, #32]
 8006de6:	781b      	ldrb	r3, [r3, #0]
 8006de8:	613b      	str	r3, [r7, #16]

          *(__IO uint32_t *)pOutAddr = ySample |  (ySample << 8) | (ySample << 16);

#elif (JPEG_RGB_FORMAT == JPEG_RGB888)

          pOutAddr[0] =  ySample;
 8006dea:	693b      	ldr	r3, [r7, #16]
 8006dec:	b2da      	uxtb	r2, r3
 8006dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df0:	701a      	strb	r2, [r3, #0]
          pOutAddr[1] =  ySample;
 8006df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df4:	3301      	adds	r3, #1
 8006df6:	693a      	ldr	r2, [r7, #16]
 8006df8:	b2d2      	uxtb	r2, r2
 8006dfa:	701a      	strb	r2, [r3, #0]
          pOutAddr[2] =  ySample;
 8006dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dfe:	3302      	adds	r3, #2
 8006e00:	693a      	ldr	r2, [r7, #16]
 8006e02:	b2d2      	uxtb	r2, r2
 8006e04:	701a      	strb	r2, [r3, #0]

          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);

#endif /* JPEG_RGB_FORMAT */

          pOutAddr += JPEG_BYTES_PER_PIXEL;
 8006e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e08:	3303      	adds	r3, #3
 8006e0a:	627b      	str	r3, [r7, #36]	; 0x24
          pLum++;
 8006e0c:	6a3b      	ldr	r3, [r7, #32]
 8006e0e:	3301      	adds	r3, #1
 8006e10:	623b      	str	r3, [r7, #32]
        for(j=0; j < 8; j++)
 8006e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e14:	3301      	adds	r3, #1
 8006e16:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e1a:	2b07      	cmp	r3, #7
 8006e1c:	d9e2      	bls.n	8006de4 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x7c>
        }

        refline += JPEG_ConvertorParams.ScaledWidth;
 8006e1e:	4b0d      	ldr	r3, [pc, #52]	; (8006e54 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xec>)
 8006e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e24:	4413      	add	r3, r2
 8006e26:	633b      	str	r3, [r7, #48]	; 0x30
    for(i= 0; i <  8; i++)
 8006e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e2a:	3301      	adds	r3, #1
 8006e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e30:	2b07      	cmp	r3, #7
 8006e32:	d9cb      	bls.n	8006dcc <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x64>
      }
    }

    pInBuffer +=  GRAY_444_BLOCK_SIZE;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	3340      	adds	r3, #64	; 0x40
 8006e38:	60fb      	str	r3, [r7, #12]
  while(currentMCU < (numberMCU + BlockIndex))
 8006e3a:	69fa      	ldr	r2, [r7, #28]
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	4413      	add	r3, r2
 8006e40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e42:	429a      	cmp	r2, r3
 8006e44:	d39d      	bcc.n	8006d82 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x1a>
  }
  return numberMCU;
 8006e46:	69fb      	ldr	r3, [r7, #28]
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	373c      	adds	r7, #60	; 0x3c
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e52:	4770      	bx	lr
 8006e54:	240071fc 	.word	0x240071fc

08006e58 <JPEG_MCU_YCCK_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCCK_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b093      	sub	sp, #76	; 0x4c
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	60f8      	str	r0, [r7, #12]
 8006e60:	60b9      	str	r1, [r7, #8]
 8006e62:	607a      	str	r2, [r7, #4]
 8006e64:	603b      	str	r3, [r7, #0]

  int32_t c_red, c_blue, c_green;

  uint8_t *pOutAddr, *pChrom;

  numberMCU = DataCount / CMYK_444_BLOCK_SIZE;
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	0a1b      	lsrs	r3, r3, #8
 8006e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  currentMCU = BlockIndex;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	63fb      	str	r3, [r7, #60]	; 0x3c

  while(currentMCU < (numberMCU + BlockIndex))
 8006e70:	e089      	b.n	8006f86 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x12e>
  {

    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 8006e72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e74:	00da      	lsls	r2, r3, #3
 8006e76:	4b4b      	ldr	r3, [pc, #300]	; (8006fa4 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x14c>)
 8006e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e7e:	00db      	lsls	r3, r3, #3
 8006e80:	62bb      	str	r3, [r7, #40]	; 0x28

    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 8006e82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e84:	00db      	lsls	r3, r3, #3
 8006e86:	4a47      	ldr	r2, [pc, #284]	; (8006fa4 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x14c>)
 8006e88:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006e8a:	fbb3 f1f2 	udiv	r1, r3, r2
 8006e8e:	fb01 f202 	mul.w	r2, r1, r2
 8006e92:	1a9b      	subs	r3, r3, r2
 8006e94:	627b      	str	r3, [r7, #36]	; 0x24

    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8006e96:	4b43      	ldr	r3, [pc, #268]	; (8006fa4 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x14c>)
 8006e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e9c:	fb02 f103 	mul.w	r1, r2, r3
 8006ea0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ea2:	4613      	mov	r3, r2
 8006ea4:	005b      	lsls	r3, r3, #1
 8006ea6:	4413      	add	r3, r2
 8006ea8:	440b      	add	r3, r1
 8006eaa:	63bb      	str	r3, [r7, #56]	; 0x38

    currentMCU++;
 8006eac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006eae:	3301      	adds	r3, #1
 8006eb0:	63fb      	str	r3, [r7, #60]	; 0x3c

    pChrom = pInBuffer;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	633b      	str	r3, [r7, #48]	; 0x30

    for(i= 0; i <  8; i++)
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	647b      	str	r3, [r7, #68]	; 0x44
 8006eba:	e05d      	b.n	8006f78 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x120>
    {
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8006ebc:	4b39      	ldr	r3, [pc, #228]	; (8006fa4 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x14c>)
 8006ebe:	691b      	ldr	r3, [r3, #16]
 8006ec0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ec2:	429a      	cmp	r2, r3
 8006ec4:	d255      	bcs.n	8006f72 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x11a>
      {
        pOutAddr = pOutBuffer+ refline;
 8006ec6:	68ba      	ldr	r2, [r7, #8]
 8006ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eca:	4413      	add	r3, r2
 8006ecc:	637b      	str	r3, [r7, #52]	; 0x34

          for(j=0; j < 8; j++)
 8006ece:	2300      	movs	r3, #0
 8006ed0:	643b      	str	r3, [r7, #64]	; 0x40
 8006ed2:	e046      	b.n	8006f62 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x10a>
          {
            color_k = (int32_t)(*(pChrom + 192));
 8006ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ed6:	33c0      	adds	r3, #192	; 0xc0
 8006ed8:	781b      	ldrb	r3, [r3, #0]
 8006eda:	623b      	str	r3, [r7, #32]
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
 8006edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ede:	781b      	ldrb	r3, [r3, #0]
 8006ee0:	461a      	mov	r2, r3
 8006ee2:	6a3b      	ldr	r3, [r7, #32]
 8006ee4:	fb02 f303 	mul.w	r3, r2, r3
 8006ee8:	4a2f      	ldr	r2, [pc, #188]	; (8006fa8 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x150>)
 8006eea:	fb82 1203 	smull	r1, r2, r2, r3
 8006eee:	441a      	add	r2, r3
 8006ef0:	11d2      	asrs	r2, r2, #7
 8006ef2:	17db      	asrs	r3, r3, #31
 8006ef4:	1ad3      	subs	r3, r2, r3
 8006ef6:	61fb      	str	r3, [r7, #28]

            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
 8006ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006efa:	3340      	adds	r3, #64	; 0x40
 8006efc:	781b      	ldrb	r3, [r3, #0]
 8006efe:	461a      	mov	r2, r3
 8006f00:	6a3b      	ldr	r3, [r7, #32]
 8006f02:	fb02 f303 	mul.w	r3, r2, r3
 8006f06:	4a28      	ldr	r2, [pc, #160]	; (8006fa8 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x150>)
 8006f08:	fb82 1203 	smull	r1, r2, r2, r3
 8006f0c:	441a      	add	r2, r3
 8006f0e:	11d2      	asrs	r2, r2, #7
 8006f10:	17db      	asrs	r3, r3, #31
 8006f12:	1ad3      	subs	r3, r2, r3
 8006f14:	61bb      	str	r3, [r7, #24]

            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
 8006f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f18:	3380      	adds	r3, #128	; 0x80
 8006f1a:	781b      	ldrb	r3, [r3, #0]
 8006f1c:	461a      	mov	r2, r3
 8006f1e:	6a3b      	ldr	r3, [r7, #32]
 8006f20:	fb02 f303 	mul.w	r3, r2, r3
 8006f24:	4a20      	ldr	r2, [pc, #128]	; (8006fa8 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x150>)
 8006f26:	fb82 1203 	smull	r1, r2, r2, r3
 8006f2a:	441a      	add	r2, r3
 8006f2c:	11d2      	asrs	r2, r2, #7
 8006f2e:	17db      	asrs	r3, r3, #31
 8006f30:	1ad3      	subs	r3, r2, r3
 8006f32:	617b      	str	r3, [r7, #20]
            (c_green << JPEG_GREEN_OFFSET) | \
            (c_blue << JPEG_BLUE_OFFSET);

#elif (JPEG_RGB_FORMAT == JPEG_RGB888)

          pOutAddr[JPEG_RED_OFFSET/8]   =  c_red;
 8006f34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f36:	3302      	adds	r3, #2
 8006f38:	69fa      	ldr	r2, [r7, #28]
 8006f3a:	b2d2      	uxtb	r2, r2
 8006f3c:	701a      	strb	r2, [r3, #0]
          pOutAddr[JPEG_GREEN_OFFSET/8] =  c_green;
 8006f3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f40:	3301      	adds	r3, #1
 8006f42:	69ba      	ldr	r2, [r7, #24]
 8006f44:	b2d2      	uxtb	r2, r2
 8006f46:	701a      	strb	r2, [r3, #0]
          pOutAddr[JPEG_BLUE_OFFSET/8]  =  c_blue;
 8006f48:	697b      	ldr	r3, [r7, #20]
 8006f4a:	b2da      	uxtb	r2, r3
 8006f4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f4e:	701a      	strb	r2, [r3, #0]
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
            ((c_blue >> 3) << JPEG_BLUE_OFFSET);

#endif /* JPEG_RGB_FORMAT */

            pOutAddr += JPEG_BYTES_PER_PIXEL;
 8006f50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f52:	3303      	adds	r3, #3
 8006f54:	637b      	str	r3, [r7, #52]	; 0x34

            pChrom++;
 8006f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f58:	3301      	adds	r3, #1
 8006f5a:	633b      	str	r3, [r7, #48]	; 0x30
          for(j=0; j < 8; j++)
 8006f5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f5e:	3301      	adds	r3, #1
 8006f60:	643b      	str	r3, [r7, #64]	; 0x40
 8006f62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f64:	2b07      	cmp	r3, #7
 8006f66:	d9b5      	bls.n	8006ed4 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x7c>
          }

        refline += JPEG_ConvertorParams.ScaledWidth;
 8006f68:	4b0e      	ldr	r3, [pc, #56]	; (8006fa4 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x14c>)
 8006f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f6e:	4413      	add	r3, r2
 8006f70:	63bb      	str	r3, [r7, #56]	; 0x38
    for(i= 0; i <  8; i++)
 8006f72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f74:	3301      	adds	r3, #1
 8006f76:	647b      	str	r3, [r7, #68]	; 0x44
 8006f78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f7a:	2b07      	cmp	r3, #7
 8006f7c:	d99e      	bls.n	8006ebc <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x64>
      }
    }

    pInBuffer +=  CMYK_444_BLOCK_SIZE;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8006f84:	60fb      	str	r3, [r7, #12]
  while(currentMCU < (numberMCU + BlockIndex))
 8006f86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	4413      	add	r3, r2
 8006f8c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006f8e:	429a      	cmp	r2, r3
 8006f90:	f4ff af6f 	bcc.w	8006e72 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x1a>
  }
  return numberMCU;
 8006f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	374c      	adds	r7, #76	; 0x4c
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa0:	4770      	bx	lr
 8006fa2:	bf00      	nop
 8006fa4:	240071fc 	.word	0x240071fc
 8006fa8:	80808081 	.word	0x80808081

08006fac <TGFX_JPEG_GetDecodeColorConvertFunc>:
  *                      depending of the jpeg image color space and chroma sampling info.
  * @param ImageNbMCUs : pointer to uint32_t, used to retrive the total number of MCU blocks in the jpeg image.
  * @retval HAL status : HAL_OK or HAL_ERROR.
  */
HAL_StatusTypeDef TGFX_JPEG_GetDecodeColorConvertFunc(JPEG_ConfTypeDef *pJpegInfo, JPEG_YCbCrToRGB_Convert_Function *pFunction, uint32_t *ImageNbMCUs)
{
 8006fac:	b480      	push	{r7}
 8006fae:	b087      	sub	sp, #28
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	60f8      	str	r0, [r7, #12]
 8006fb4:	60b9      	str	r1, [r7, #8]
 8006fb6:	607a      	str	r2, [r7, #4]
  uint32_t hMCU, vMCU;

  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a7c      	ldr	r2, [pc, #496]	; (80071b0 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8006fbe:	6013      	str	r3, [r2, #0]
  JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	68db      	ldr	r3, [r3, #12]
 8006fc4:	4a7a      	ldr	r2, [pc, #488]	; (80071b0 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8006fc6:	6093      	str	r3, [r2, #8]
  JPEG_ConvertorParams.ImageHeight = pJpegInfo->ImageHeight;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	689b      	ldr	r3, [r3, #8]
 8006fcc:	4a78      	ldr	r2, [pc, #480]	; (80071b0 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8006fce:	60d3      	str	r3, [r2, #12]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	68db      	ldr	r3, [r3, #12]
 8006fd4:	68fa      	ldr	r2, [r7, #12]
 8006fd6:	6892      	ldr	r2, [r2, #8]
 8006fd8:	fb03 f202 	mul.w	r2, r3, r2
 8006fdc:	4613      	mov	r3, r2
 8006fde:	005b      	lsls	r3, r3, #1
 8006fe0:	4413      	add	r3, r2
 8006fe2:	4a73      	ldr	r2, [pc, #460]	; (80071b0 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8006fe4:	6113      	str	r3, [r2, #16]

  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	685b      	ldr	r3, [r3, #4]
 8006fea:	4a71      	ldr	r2, [pc, #452]	; (80071b0 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8006fec:	6053      	str	r3, [r2, #4]
  if(JPEG_ConvertorParams.ColorSpace == JPEG_YCBCR_COLORSPACE)
 8006fee:	4b70      	ldr	r3, [pc, #448]	; (80071b0 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	2b10      	cmp	r3, #16
 8006ff4:	d155      	bne.n	80070a2 <TGFX_JPEG_GetDecodeColorConvertFunc+0xf6>
  {
    if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_420_SUBSAMPLING)
 8006ff6:	4b6e      	ldr	r3, [pc, #440]	; (80071b0 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8006ff8:	685b      	ldr	r3, [r3, #4]
 8006ffa:	2b01      	cmp	r3, #1
 8006ffc:	d119      	bne.n	8007032 <TGFX_JPEG_GetDecodeColorConvertFunc+0x86>
    {
      *pFunction = TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks;
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	4a6c      	ldr	r2, [pc, #432]	; (80071b4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x208>)
 8007002:	601a      	str	r2, [r3, #0]

      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
 8007004:	4b6a      	ldr	r3, [pc, #424]	; (80071b0 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8007006:	689b      	ldr	r3, [r3, #8]
 8007008:	f003 030f 	and.w	r3, r3, #15
 800700c:	4a68      	ldr	r2, [pc, #416]	; (80071b0 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 800700e:	6153      	str	r3, [r2, #20]

      if(JPEG_ConvertorParams.LineOffset != 0)
 8007010:	4b67      	ldr	r3, [pc, #412]	; (80071b0 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8007012:	695b      	ldr	r3, [r3, #20]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d005      	beq.n	8007024 <TGFX_JPEG_GetDecodeColorConvertFunc+0x78>
      {
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;
 8007018:	4b65      	ldr	r3, [pc, #404]	; (80071b0 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 800701a:	695b      	ldr	r3, [r3, #20]
 800701c:	f1c3 0310 	rsb	r3, r3, #16
 8007020:	4a63      	ldr	r2, [pc, #396]	; (80071b0 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8007022:	6153      	str	r3, [r2, #20]
      }
      JPEG_ConvertorParams.H_factor = 16;
 8007024:	4b62      	ldr	r3, [pc, #392]	; (80071b0 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8007026:	2210      	movs	r2, #16
 8007028:	61da      	str	r2, [r3, #28]
      JPEG_ConvertorParams.V_factor  = 16;
 800702a:	4b61      	ldr	r3, [pc, #388]	; (80071b0 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 800702c:	2210      	movs	r2, #16
 800702e:	621a      	str	r2, [r3, #32]
 8007030:	e075      	b.n	800711e <TGFX_JPEG_GetDecodeColorConvertFunc+0x172>
    }
    else if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_422_SUBSAMPLING)
 8007032:	4b5f      	ldr	r3, [pc, #380]	; (80071b0 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8007034:	685b      	ldr	r3, [r3, #4]
 8007036:	2b02      	cmp	r3, #2
 8007038:	d119      	bne.n	800706e <TGFX_JPEG_GetDecodeColorConvertFunc+0xc2>
    {
      *pFunction =  JPEG_MCU_YCbCr422_ARGB_ConvertBlocks;
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	4a5e      	ldr	r2, [pc, #376]	; (80071b8 <TGFX_JPEG_GetDecodeColorConvertFunc+0x20c>)
 800703e:	601a      	str	r2, [r3, #0]

      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
 8007040:	4b5b      	ldr	r3, [pc, #364]	; (80071b0 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8007042:	689b      	ldr	r3, [r3, #8]
 8007044:	f003 030f 	and.w	r3, r3, #15
 8007048:	4a59      	ldr	r2, [pc, #356]	; (80071b0 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 800704a:	6153      	str	r3, [r2, #20]

      if(JPEG_ConvertorParams.LineOffset != 0)
 800704c:	4b58      	ldr	r3, [pc, #352]	; (80071b0 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 800704e:	695b      	ldr	r3, [r3, #20]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d005      	beq.n	8007060 <TGFX_JPEG_GetDecodeColorConvertFunc+0xb4>
      {
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;
 8007054:	4b56      	ldr	r3, [pc, #344]	; (80071b0 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8007056:	695b      	ldr	r3, [r3, #20]
 8007058:	f1c3 0310 	rsb	r3, r3, #16
 800705c:	4a54      	ldr	r2, [pc, #336]	; (80071b0 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 800705e:	6153      	str	r3, [r2, #20]
      }
      JPEG_ConvertorParams.H_factor = 16;
 8007060:	4b53      	ldr	r3, [pc, #332]	; (80071b0 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8007062:	2210      	movs	r2, #16
 8007064:	61da      	str	r2, [r3, #28]
      JPEG_ConvertorParams.V_factor  = 8;
 8007066:	4b52      	ldr	r3, [pc, #328]	; (80071b0 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8007068:	2208      	movs	r2, #8
 800706a:	621a      	str	r2, [r3, #32]
 800706c:	e057      	b.n	800711e <TGFX_JPEG_GetDecodeColorConvertFunc+0x172>
    }
    else /*4:4:4*/
    {
      *pFunction =  JPEG_MCU_YCbCr444_ARGB_ConvertBlocks;
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	4a52      	ldr	r2, [pc, #328]	; (80071bc <TGFX_JPEG_GetDecodeColorConvertFunc+0x210>)
 8007072:	601a      	str	r2, [r3, #0]

      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
 8007074:	4b4e      	ldr	r3, [pc, #312]	; (80071b0 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8007076:	689b      	ldr	r3, [r3, #8]
 8007078:	f003 0307 	and.w	r3, r3, #7
 800707c:	4a4c      	ldr	r2, [pc, #304]	; (80071b0 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 800707e:	6153      	str	r3, [r2, #20]

      if(JPEG_ConvertorParams.LineOffset != 0)
 8007080:	4b4b      	ldr	r3, [pc, #300]	; (80071b0 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8007082:	695b      	ldr	r3, [r3, #20]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d005      	beq.n	8007094 <TGFX_JPEG_GetDecodeColorConvertFunc+0xe8>
      {
        JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;
 8007088:	4b49      	ldr	r3, [pc, #292]	; (80071b0 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 800708a:	695b      	ldr	r3, [r3, #20]
 800708c:	f1c3 0308 	rsb	r3, r3, #8
 8007090:	4a47      	ldr	r2, [pc, #284]	; (80071b0 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8007092:	6153      	str	r3, [r2, #20]
      }
      JPEG_ConvertorParams.H_factor = 8;
 8007094:	4b46      	ldr	r3, [pc, #280]	; (80071b0 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8007096:	2208      	movs	r2, #8
 8007098:	61da      	str	r2, [r3, #28]
      JPEG_ConvertorParams.V_factor  = 8;
 800709a:	4b45      	ldr	r3, [pc, #276]	; (80071b0 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 800709c:	2208      	movs	r2, #8
 800709e:	621a      	str	r2, [r3, #32]
 80070a0:	e03d      	b.n	800711e <TGFX_JPEG_GetDecodeColorConvertFunc+0x172>
    }
  }
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_GRAYSCALE_COLORSPACE)
 80070a2:	4b43      	ldr	r3, [pc, #268]	; (80071b0 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d119      	bne.n	80070de <TGFX_JPEG_GetDecodeColorConvertFunc+0x132>
  {
    *pFunction =  JPEG_MCU_Gray_ARGB_ConvertBlocks;
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	4a44      	ldr	r2, [pc, #272]	; (80071c0 <TGFX_JPEG_GetDecodeColorConvertFunc+0x214>)
 80070ae:	601a      	str	r2, [r3, #0]

    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
 80070b0:	4b3f      	ldr	r3, [pc, #252]	; (80071b0 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80070b2:	689b      	ldr	r3, [r3, #8]
 80070b4:	f003 0307 	and.w	r3, r3, #7
 80070b8:	4a3d      	ldr	r2, [pc, #244]	; (80071b0 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80070ba:	6153      	str	r3, [r2, #20]

    if(JPEG_ConvertorParams.LineOffset != 0)
 80070bc:	4b3c      	ldr	r3, [pc, #240]	; (80071b0 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80070be:	695b      	ldr	r3, [r3, #20]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d005      	beq.n	80070d0 <TGFX_JPEG_GetDecodeColorConvertFunc+0x124>
    {
      JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;
 80070c4:	4b3a      	ldr	r3, [pc, #232]	; (80071b0 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80070c6:	695b      	ldr	r3, [r3, #20]
 80070c8:	f1c3 0308 	rsb	r3, r3, #8
 80070cc:	4a38      	ldr	r2, [pc, #224]	; (80071b0 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80070ce:	6153      	str	r3, [r2, #20]
    }
    JPEG_ConvertorParams.H_factor = 8;
 80070d0:	4b37      	ldr	r3, [pc, #220]	; (80071b0 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80070d2:	2208      	movs	r2, #8
 80070d4:	61da      	str	r2, [r3, #28]
    JPEG_ConvertorParams.V_factor  = 8;
 80070d6:	4b36      	ldr	r3, [pc, #216]	; (80071b0 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80070d8:	2208      	movs	r2, #8
 80070da:	621a      	str	r2, [r3, #32]
 80070dc:	e01f      	b.n	800711e <TGFX_JPEG_GetDecodeColorConvertFunc+0x172>
  }
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_CMYK_COLORSPACE)
 80070de:	4b34      	ldr	r3, [pc, #208]	; (80071b0 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	2b30      	cmp	r3, #48	; 0x30
 80070e4:	d119      	bne.n	800711a <TGFX_JPEG_GetDecodeColorConvertFunc+0x16e>
  {
    *pFunction =  JPEG_MCU_YCCK_ARGB_ConvertBlocks;
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	4a36      	ldr	r2, [pc, #216]	; (80071c4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x218>)
 80070ea:	601a      	str	r2, [r3, #0]

    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
 80070ec:	4b30      	ldr	r3, [pc, #192]	; (80071b0 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80070ee:	689b      	ldr	r3, [r3, #8]
 80070f0:	f003 0307 	and.w	r3, r3, #7
 80070f4:	4a2e      	ldr	r2, [pc, #184]	; (80071b0 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80070f6:	6153      	str	r3, [r2, #20]

    if(JPEG_ConvertorParams.LineOffset != 0)
 80070f8:	4b2d      	ldr	r3, [pc, #180]	; (80071b0 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80070fa:	695b      	ldr	r3, [r3, #20]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d005      	beq.n	800710c <TGFX_JPEG_GetDecodeColorConvertFunc+0x160>
    {
      JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;
 8007100:	4b2b      	ldr	r3, [pc, #172]	; (80071b0 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8007102:	695b      	ldr	r3, [r3, #20]
 8007104:	f1c3 0308 	rsb	r3, r3, #8
 8007108:	4a29      	ldr	r2, [pc, #164]	; (80071b0 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 800710a:	6153      	str	r3, [r2, #20]
    }
    JPEG_ConvertorParams.H_factor = 8;
 800710c:	4b28      	ldr	r3, [pc, #160]	; (80071b0 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 800710e:	2208      	movs	r2, #8
 8007110:	61da      	str	r2, [r3, #28]
    JPEG_ConvertorParams.V_factor  = 8;
 8007112:	4b27      	ldr	r3, [pc, #156]	; (80071b0 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8007114:	2208      	movs	r2, #8
 8007116:	621a      	str	r2, [r3, #32]
 8007118:	e001      	b.n	800711e <TGFX_JPEG_GetDecodeColorConvertFunc+0x172>
  }
  else
  {
    return HAL_ERROR; /* Color space Not supported*/
 800711a:	2301      	movs	r3, #1
 800711c:	e042      	b.n	80071a4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1f8>
  }

  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
 800711e:	4b24      	ldr	r3, [pc, #144]	; (80071b0 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8007120:	689a      	ldr	r2, [r3, #8]
 8007122:	4b23      	ldr	r3, [pc, #140]	; (80071b0 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8007124:	695b      	ldr	r3, [r3, #20]
 8007126:	4413      	add	r3, r2
 8007128:	4a21      	ldr	r2, [pc, #132]	; (80071b0 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 800712a:	6253      	str	r3, [r2, #36]	; 0x24
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
 800712c:	4b20      	ldr	r3, [pc, #128]	; (80071b0 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 800712e:	689a      	ldr	r2, [r3, #8]
 8007130:	4613      	mov	r3, r2
 8007132:	005b      	lsls	r3, r3, #1
 8007134:	4413      	add	r3, r2
 8007136:	4a1e      	ldr	r2, [pc, #120]	; (80071b0 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8007138:	6293      	str	r3, [r2, #40]	; 0x28

  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
 800713a:	4b1d      	ldr	r3, [pc, #116]	; (80071b0 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 800713c:	689a      	ldr	r2, [r3, #8]
 800713e:	4b1c      	ldr	r3, [pc, #112]	; (80071b0 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8007140:	69db      	ldr	r3, [r3, #28]
 8007142:	fbb2 f3f3 	udiv	r3, r2, r3
 8007146:	617b      	str	r3, [r7, #20]
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
 8007148:	4b19      	ldr	r3, [pc, #100]	; (80071b0 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 800714a:	689b      	ldr	r3, [r3, #8]
 800714c:	4a18      	ldr	r2, [pc, #96]	; (80071b0 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 800714e:	69d2      	ldr	r2, [r2, #28]
 8007150:	fbb3 f1f2 	udiv	r1, r3, r2
 8007154:	fb01 f202 	mul.w	r2, r1, r2
 8007158:	1a9b      	subs	r3, r3, r2
 800715a:	2b00      	cmp	r3, #0
 800715c:	d002      	beq.n	8007164 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1b8>
  {
    hMCU++; /*+1 for horizenatl incomplete MCU */
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	3301      	adds	r3, #1
 8007162:	617b      	str	r3, [r7, #20]
  }

  vMCU = (JPEG_ConvertorParams.ImageHeight / JPEG_ConvertorParams.V_factor);
 8007164:	4b12      	ldr	r3, [pc, #72]	; (80071b0 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8007166:	68da      	ldr	r2, [r3, #12]
 8007168:	4b11      	ldr	r3, [pc, #68]	; (80071b0 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 800716a:	6a1b      	ldr	r3, [r3, #32]
 800716c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007170:	613b      	str	r3, [r7, #16]
  if((JPEG_ConvertorParams.ImageHeight % JPEG_ConvertorParams.V_factor) != 0)
 8007172:	4b0f      	ldr	r3, [pc, #60]	; (80071b0 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8007174:	68db      	ldr	r3, [r3, #12]
 8007176:	4a0e      	ldr	r2, [pc, #56]	; (80071b0 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8007178:	6a12      	ldr	r2, [r2, #32]
 800717a:	fbb3 f1f2 	udiv	r1, r3, r2
 800717e:	fb01 f202 	mul.w	r2, r1, r2
 8007182:	1a9b      	subs	r3, r3, r2
 8007184:	2b00      	cmp	r3, #0
 8007186:	d002      	beq.n	800718e <TGFX_JPEG_GetDecodeColorConvertFunc+0x1e2>
  {
    vMCU++; /*+1 for vertical incomplete MCU */
 8007188:	693b      	ldr	r3, [r7, #16]
 800718a:	3301      	adds	r3, #1
 800718c:	613b      	str	r3, [r7, #16]
  }
  JPEG_ConvertorParams.MCU_Total_Nb = (hMCU * vMCU);
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	693a      	ldr	r2, [r7, #16]
 8007192:	fb02 f303 	mul.w	r3, r2, r3
 8007196:	4a06      	ldr	r2, [pc, #24]	; (80071b0 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8007198:	62d3      	str	r3, [r2, #44]	; 0x2c
  *ImageNbMCUs = JPEG_ConvertorParams.MCU_Total_Nb;
 800719a:	4b05      	ldr	r3, [pc, #20]	; (80071b0 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 800719c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80071a2:	2300      	movs	r3, #0
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	371c      	adds	r7, #28
 80071a8:	46bd      	mov	sp, r7
 80071aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ae:	4770      	bx	lr
 80071b0:	240071fc 	.word	0x240071fc
 80071b4:	08006765 	.word	0x08006765
 80071b8:	08006a0d 	.word	0x08006a0d
 80071bc:	08006be9 	.word	0x08006be9
 80071c0:	08006d69 	.word	0x08006d69
 80071c4:	08006e59 	.word	0x08006e59

080071c8 <TGFX_JPEG_InitPostProcColorTables>:
  * @brief  Initializes the YCbCr -> RGB colors conversion Look Up Tables
  * @param  None
  * @retval None
  */
void TGFX_JPEG_InitPostProcColorTables(void)
{
 80071c8:	b480      	push	{r7}
 80071ca:	b083      	sub	sp, #12
 80071cc:	af00      	add	r7, sp, #0
  int32_t index, i;

  for (i = 0; i <= 255; i++)
 80071ce:	2300      	movs	r3, #0
 80071d0:	607b      	str	r3, [r7, #4]
 80071d2:	e02e      	b.n	8007232 <TGFX_JPEG_InitPostProcColorTables+0x6a>
  {
    index = (i * 2) - 256;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	3b80      	subs	r3, #128	; 0x80
 80071d8:	005b      	lsls	r3, r3, #1
 80071da:	603b      	str	r3, [r7, #0]
    CR_RED_LUT[i] = ( (((int32_t) ((1.40200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	f24b 3274 	movw	r2, #45940	; 0xb374
 80071e2:	fb02 f303 	mul.w	r3, r2, r3
 80071e6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80071ea:	141a      	asrs	r2, r3, #16
 80071ec:	4916      	ldr	r1, [pc, #88]	; (8007248 <TGFX_JPEG_InitPostProcColorTables+0x80>)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    CB_BLUE_LUT[i] = ( (((int32_t) ((1.77200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	f24e 22d0 	movw	r2, #58064	; 0xe2d0
 80071fa:	fb02 f303 	mul.w	r3, r2, r3
 80071fe:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007202:	141a      	asrs	r2, r3, #16
 8007204:	4911      	ldr	r1, [pc, #68]	; (800724c <TGFX_JPEG_InitPostProcColorTables+0x84>)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    CR_GREEN_LUT[i] = (-((int32_t) ((0.71414 / 2) * (1L << 16)))) * index;
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	4a10      	ldr	r2, [pc, #64]	; (8007250 <TGFX_JPEG_InitPostProcColorTables+0x88>)
 8007210:	fb03 f202 	mul.w	r2, r3, r2
 8007214:	490f      	ldr	r1, [pc, #60]	; (8007254 <TGFX_JPEG_InitPostProcColorTables+0x8c>)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    CB_GREEN_LUT[i] = (-((int32_t) ((0.34414 / 2) * (1L << 16)))) * index;
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	4a0e      	ldr	r2, [pc, #56]	; (8007258 <TGFX_JPEG_InitPostProcColorTables+0x90>)
 8007220:	fb03 f202 	mul.w	r2, r3, r2
 8007224:	490d      	ldr	r1, [pc, #52]	; (800725c <TGFX_JPEG_InitPostProcColorTables+0x94>)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (i = 0; i <= 255; i++)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	3301      	adds	r3, #1
 8007230:	607b      	str	r3, [r7, #4]
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2bff      	cmp	r3, #255	; 0xff
 8007236:	ddcd      	ble.n	80071d4 <TGFX_JPEG_InitPostProcColorTables+0xc>
  }
}
 8007238:	bf00      	nop
 800723a:	bf00      	nop
 800723c:	370c      	adds	r7, #12
 800723e:	46bd      	mov	sp, r7
 8007240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007244:	4770      	bx	lr
 8007246:	bf00      	nop
 8007248:	2400723c 	.word	0x2400723c
 800724c:	2400763c 	.word	0x2400763c
 8007250:	ffffa498 	.word	0xffffa498
 8007254:	24007a3c 	.word	0x24007a3c
 8007258:	ffffd3f4 	.word	0xffffd3f4
 800725c:	24007e3c 	.word	0x24007e3c

08007260 <TGFX_JPEG_InitColorTables>:
  * @brief  Initializes the colors conversion Look Up Tables
  * @param  None
  * @retval None
  */
void TGFX_JPEG_InitColorTables(void)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	af00      	add	r7, sp, #0

#if (USE_JPEG_ENCODER == 1)
  TGFX_JPEG_InitPreProcColorTables();
 8007264:	f000 f806 	bl	8007274 <TGFX_JPEG_InitPreProcColorTables>
  TGFX_JPEG_Init_MCU_LUT();
 8007268:	f000 f888 	bl	800737c <TGFX_JPEG_Init_MCU_LUT>
#endif

#if (USE_JPEG_DECODER == 1)
  TGFX_JPEG_InitPostProcColorTables();
 800726c:	f7ff ffac 	bl	80071c8 <TGFX_JPEG_InitPostProcColorTables>
#endif

}
 8007270:	bf00      	nop
 8007272:	bd80      	pop	{r7, pc}

08007274 <TGFX_JPEG_InitPreProcColorTables>:
  * @brief  Initializes the RGB -> YCbCr colors conversion Look Up Tables
  * @param  None
  * @retval None
  */
void TGFX_JPEG_InitPreProcColorTables(void)
{
 8007274:	b480      	push	{r7}
 8007276:	b083      	sub	sp, #12
 8007278:	af00      	add	r7, sp, #0
  int32_t i;

  for (i = 0; i <= 255; i++)
 800727a:	2300      	movs	r3, #0
 800727c:	607b      	str	r3, [r7, #4]
 800727e:	e05a      	b.n	8007336 <TGFX_JPEG_InitPreProcColorTables+0xc2>
  {
    RED_Y_LUT[i]           = ((  ((int32_t) ((0.299 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f644 428b 	movw	r2, #19595	; 0x4c8b
 8007286:	fb02 f303 	mul.w	r3, r2, r3
 800728a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800728e:	141a      	asrs	r2, r3, #16
 8007290:	492e      	ldr	r1, [pc, #184]	; (800734c <TGFX_JPEG_InitPreProcColorTables+0xd8>)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    GREEN_Y_LUT[i]         = ((  ((int32_t) ((0.587 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	f249 6245 	movw	r2, #38469	; 0x9645
 800729e:	fb02 f303 	mul.w	r3, r2, r3
 80072a2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80072a6:	141a      	asrs	r2, r3, #16
 80072a8:	4929      	ldr	r1, [pc, #164]	; (8007350 <TGFX_JPEG_InitPreProcColorTables+0xdc>)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    BLUE_Y_LUT[i]          = ((  ((int32_t) ((0.114 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f641 522f 	movw	r2, #7471	; 0x1d2f
 80072b6:	fb02 f303 	mul.w	r3, r2, r3
 80072ba:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80072be:	141a      	asrs	r2, r3, #16
 80072c0:	4924      	ldr	r1, [pc, #144]	; (8007354 <TGFX_JPEG_InitPreProcColorTables+0xe0>)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    RED_CB_LUT[i]          = (((-((int32_t) ((0.1687 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	4a23      	ldr	r2, [pc, #140]	; (8007358 <TGFX_JPEG_InitPreProcColorTables+0xe4>)
 80072cc:	fb02 f303 	mul.w	r3, r2, r3
 80072d0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80072d4:	141a      	asrs	r2, r3, #16
 80072d6:	4921      	ldr	r1, [pc, #132]	; (800735c <TGFX_JPEG_InitPreProcColorTables+0xe8>)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    GREEN_CB_LUT[i]        = (((-((int32_t) ((0.3313 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	4a1f      	ldr	r2, [pc, #124]	; (8007360 <TGFX_JPEG_InitPreProcColorTables+0xec>)
 80072e2:	fb02 f303 	mul.w	r3, r2, r3
 80072e6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80072ea:	141a      	asrs	r2, r3, #16
 80072ec:	491d      	ldr	r1, [pc, #116]	; (8007364 <TGFX_JPEG_InitPreProcColorTables+0xf0>)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    /* BLUE_CB_LUT and RED_CR_LUT are identical */
    BLUE_CB_RED_CR_LUT[i]  = ((  ((int32_t) ((0.5 )    * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	3301      	adds	r3, #1
 80072f8:	03db      	lsls	r3, r3, #15
 80072fa:	141a      	asrs	r2, r3, #16
 80072fc:	491a      	ldr	r1, [pc, #104]	; (8007368 <TGFX_JPEG_InitPreProcColorTables+0xf4>)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    GREEN_CR_LUT[i]        = (((-((int32_t) ((0.4187 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	4a19      	ldr	r2, [pc, #100]	; (800736c <TGFX_JPEG_InitPreProcColorTables+0xf8>)
 8007308:	fb02 f303 	mul.w	r3, r2, r3
 800730c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007310:	141a      	asrs	r2, r3, #16
 8007312:	4917      	ldr	r1, [pc, #92]	; (8007370 <TGFX_JPEG_InitPreProcColorTables+0xfc>)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    BLUE_CR_LUT[i]         = (((-((int32_t) ((0.0813 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	4a15      	ldr	r2, [pc, #84]	; (8007374 <TGFX_JPEG_InitPreProcColorTables+0x100>)
 800731e:	fb02 f303 	mul.w	r3, r2, r3
 8007322:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007326:	141a      	asrs	r2, r3, #16
 8007328:	4913      	ldr	r1, [pc, #76]	; (8007378 <TGFX_JPEG_InitPreProcColorTables+0x104>)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (i = 0; i <= 255; i++)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	3301      	adds	r3, #1
 8007334:	607b      	str	r3, [r7, #4]
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2bff      	cmp	r3, #255	; 0xff
 800733a:	dda1      	ble.n	8007280 <TGFX_JPEG_InitPreProcColorTables+0xc>
  }
}
 800733c:	bf00      	nop
 800733e:	bf00      	nop
 8007340:	370c      	adds	r7, #12
 8007342:	46bd      	mov	sp, r7
 8007344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007348:	4770      	bx	lr
 800734a:	bf00      	nop
 800734c:	2400823c 	.word	0x2400823c
 8007350:	24008e3c 	.word	0x24008e3c
 8007354:	24009a3c 	.word	0x24009a3c
 8007358:	ffffd4d1 	.word	0xffffd4d1
 800735c:	2400863c 	.word	0x2400863c
 8007360:	ffffab30 	.word	0xffffab30
 8007364:	2400963c 	.word	0x2400963c
 8007368:	24008a3c 	.word	0x24008a3c
 800736c:	ffff94d1 	.word	0xffff94d1
 8007370:	2400923c 	.word	0x2400923c
 8007374:	ffffeb30 	.word	0xffffeb30
 8007378:	24009e3c 	.word	0x24009e3c

0800737c <TGFX_JPEG_Init_MCU_LUT>:
  * @brief  Initializes the MCU Look Up Tables
  * @param  None
  * @retval None
  */
void TGFX_JPEG_Init_MCU_LUT(void)
{
 800737c:	b480      	push	{r7}
 800737e:	b085      	sub	sp, #20
 8007380:	af00      	add	r7, sp, #0
  uint32_t i, j, offset;

  /*Y LUT */
  for(i = 0; i < 16; i++)
 8007382:	2300      	movs	r3, #0
 8007384:	60fb      	str	r3, [r7, #12]
 8007386:	e036      	b.n	80073f6 <TGFX_JPEG_Init_MCU_LUT+0x7a>
  {
    for(j = 0; j < 16; j++)
 8007388:	2300      	movs	r3, #0
 800738a:	60bb      	str	r3, [r7, #8]
 800738c:	e02d      	b.n	80073ea <TGFX_JPEG_Init_MCU_LUT+0x6e>
    {
      offset =  j + (i*8);
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	00db      	lsls	r3, r3, #3
 8007392:	68ba      	ldr	r2, [r7, #8]
 8007394:	4413      	add	r3, r2
 8007396:	607b      	str	r3, [r7, #4]
      if((j>=8) && (i>=8)) offset+= 120;
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	2b07      	cmp	r3, #7
 800739c:	d906      	bls.n	80073ac <TGFX_JPEG_Init_MCU_LUT+0x30>
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	2b07      	cmp	r3, #7
 80073a2:	d903      	bls.n	80073ac <TGFX_JPEG_Init_MCU_LUT+0x30>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	3378      	adds	r3, #120	; 0x78
 80073a8:	607b      	str	r3, [r7, #4]
 80073aa:	e012      	b.n	80073d2 <TGFX_JPEG_Init_MCU_LUT+0x56>
      else  if((j>=8) && (i<8)) offset+= 56;
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	2b07      	cmp	r3, #7
 80073b0:	d906      	bls.n	80073c0 <TGFX_JPEG_Init_MCU_LUT+0x44>
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	2b07      	cmp	r3, #7
 80073b6:	d803      	bhi.n	80073c0 <TGFX_JPEG_Init_MCU_LUT+0x44>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	3338      	adds	r3, #56	; 0x38
 80073bc:	607b      	str	r3, [r7, #4]
 80073be:	e008      	b.n	80073d2 <TGFX_JPEG_Init_MCU_LUT+0x56>
      else  if((j<8) && (i>=8)) offset+= 64;
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	2b07      	cmp	r3, #7
 80073c4:	d805      	bhi.n	80073d2 <TGFX_JPEG_Init_MCU_LUT+0x56>
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	2b07      	cmp	r3, #7
 80073ca:	d902      	bls.n	80073d2 <TGFX_JPEG_Init_MCU_LUT+0x56>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	3340      	adds	r3, #64	; 0x40
 80073d0:	607b      	str	r3, [r7, #4]

      JPEG_Y_MCU_LUT[i*16 + j] = offset;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	011a      	lsls	r2, r3, #4
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	4413      	add	r3, r2
 80073da:	687a      	ldr	r2, [r7, #4]
 80073dc:	b291      	uxth	r1, r2
 80073de:	4a62      	ldr	r2, [pc, #392]	; (8007568 <TGFX_JPEG_Init_MCU_LUT+0x1ec>)
 80073e0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(j = 0; j < 16; j++)
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	3301      	adds	r3, #1
 80073e8:	60bb      	str	r3, [r7, #8]
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	2b0f      	cmp	r3, #15
 80073ee:	d9ce      	bls.n	800738e <TGFX_JPEG_Init_MCU_LUT+0x12>
  for(i = 0; i < 16; i++)
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	3301      	adds	r3, #1
 80073f4:	60fb      	str	r3, [r7, #12]
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	2b0f      	cmp	r3, #15
 80073fa:	d9c5      	bls.n	8007388 <TGFX_JPEG_Init_MCU_LUT+0xc>
    }
  }

  /*Cb Cr K LUT*/
  for(i = 0; i < 16; i++)
 80073fc:	2300      	movs	r3, #0
 80073fe:	60fb      	str	r3, [r7, #12]
 8007400:	e072      	b.n	80074e8 <TGFX_JPEG_Init_MCU_LUT+0x16c>
  {
    for(j = 0; j < 16; j++)
 8007402:	2300      	movs	r3, #0
 8007404:	60bb      	str	r3, [r7, #8]
 8007406:	e069      	b.n	80074dc <TGFX_JPEG_Init_MCU_LUT+0x160>
    {
      offset = i*16 + j;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	011b      	lsls	r3, r3, #4
 800740c:	68ba      	ldr	r2, [r7, #8]
 800740e:	4413      	add	r3, r2
 8007410:	607b      	str	r3, [r7, #4]

      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	085b      	lsrs	r3, r3, #1
 8007416:	b29a      	uxth	r2, r3
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	085b      	lsrs	r3, r3, #1
 800741c:	b29b      	uxth	r3, r3
 800741e:	00db      	lsls	r3, r3, #3
 8007420:	b29b      	uxth	r3, r3
 8007422:	4413      	add	r3, r2
 8007424:	b29b      	uxth	r3, r3
 8007426:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800742a:	b299      	uxth	r1, r3
 800742c:	4a4f      	ldr	r2, [pc, #316]	; (800756c <TGFX_JPEG_Init_MCU_LUT+0x1f0>)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	085b      	lsrs	r3, r3, #1
 8007438:	b29a      	uxth	r2, r3
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	b29b      	uxth	r3, r3
 800743e:	00db      	lsls	r3, r3, #3
 8007440:	b29b      	uxth	r3, r3
 8007442:	4413      	add	r3, r2
 8007444:	b29b      	uxth	r3, r3
 8007446:	3380      	adds	r3, #128	; 0x80
 8007448:	b299      	uxth	r1, r3
 800744a:	4a49      	ldr	r2, [pc, #292]	; (8007570 <TGFX_JPEG_Init_MCU_LUT+0x1f4>)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	085b      	lsrs	r3, r3, #1
 8007456:	b29a      	uxth	r2, r3
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	085b      	lsrs	r3, r3, #1
 800745c:	b29b      	uxth	r3, r3
 800745e:	00db      	lsls	r3, r3, #3
 8007460:	b29b      	uxth	r3, r3
 8007462:	4413      	add	r3, r2
 8007464:	b29b      	uxth	r3, r3
 8007466:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800746a:	b299      	uxth	r1, r3
 800746c:	4a41      	ldr	r2, [pc, #260]	; (8007574 <TGFX_JPEG_Init_MCU_LUT+0x1f8>)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	085b      	lsrs	r3, r3, #1
 8007478:	b29a      	uxth	r2, r3
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	b29b      	uxth	r3, r3
 800747e:	00db      	lsls	r3, r3, #3
 8007480:	b29b      	uxth	r3, r3
 8007482:	4413      	add	r3, r2
 8007484:	b29b      	uxth	r3, r3
 8007486:	33c0      	adds	r3, #192	; 0xc0
 8007488:	b299      	uxth	r1, r3
 800748a:	4a3b      	ldr	r2, [pc, #236]	; (8007578 <TGFX_JPEG_Init_MCU_LUT+0x1fc>)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	085b      	lsrs	r3, r3, #1
 8007496:	b29a      	uxth	r2, r3
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	085b      	lsrs	r3, r3, #1
 800749c:	b29b      	uxth	r3, r3
 800749e:	00db      	lsls	r3, r3, #3
 80074a0:	b29b      	uxth	r3, r3
 80074a2:	4413      	add	r3, r2
 80074a4:	b29b      	uxth	r3, r3
 80074a6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80074aa:	b299      	uxth	r1, r3
 80074ac:	4a33      	ldr	r2, [pc, #204]	; (800757c <TGFX_JPEG_Init_MCU_LUT+0x200>)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_K_MCU_422_LUT[offset] = (j/2) + ((i/2)*8) + 256;
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	085b      	lsrs	r3, r3, #1
 80074b8:	b29a      	uxth	r2, r3
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	085b      	lsrs	r3, r3, #1
 80074be:	b29b      	uxth	r3, r3
 80074c0:	00db      	lsls	r3, r3, #3
 80074c2:	b29b      	uxth	r3, r3
 80074c4:	4413      	add	r3, r2
 80074c6:	b29b      	uxth	r3, r3
 80074c8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80074cc:	b299      	uxth	r1, r3
 80074ce:	4a2c      	ldr	r2, [pc, #176]	; (8007580 <TGFX_JPEG_Init_MCU_LUT+0x204>)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(j = 0; j < 16; j++)
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	3301      	adds	r3, #1
 80074da:	60bb      	str	r3, [r7, #8]
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	2b0f      	cmp	r3, #15
 80074e0:	d992      	bls.n	8007408 <TGFX_JPEG_Init_MCU_LUT+0x8c>
  for(i = 0; i < 16; i++)
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	3301      	adds	r3, #1
 80074e6:	60fb      	str	r3, [r7, #12]
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	2b0f      	cmp	r3, #15
 80074ec:	d989      	bls.n	8007402 <TGFX_JPEG_Init_MCU_LUT+0x86>
    }
  }

  for(i = 0; i < 8; i++)
 80074ee:	2300      	movs	r3, #0
 80074f0:	60fb      	str	r3, [r7, #12]
 80074f2:	e02e      	b.n	8007552 <TGFX_JPEG_Init_MCU_LUT+0x1d6>
  {
    for(j = 0; j < 8; j++)
 80074f4:	2300      	movs	r3, #0
 80074f6:	60bb      	str	r3, [r7, #8]
 80074f8:	e025      	b.n	8007546 <TGFX_JPEG_Init_MCU_LUT+0x1ca>
    {
      offset = i*8 + j;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	00db      	lsls	r3, r3, #3
 80074fe:	68ba      	ldr	r2, [r7, #8]
 8007500:	4413      	add	r3, r2
 8007502:	607b      	str	r3, [r7, #4]

      JPEG_Y_MCU_444_LUT[offset]  = offset;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	b299      	uxth	r1, r3
 8007508:	4a1e      	ldr	r2, [pc, #120]	; (8007584 <TGFX_JPEG_Init_MCU_LUT+0x208>)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_Cb_MCU_444_LUT[offset] = offset + 64 ;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	b29b      	uxth	r3, r3
 8007514:	3340      	adds	r3, #64	; 0x40
 8007516:	b299      	uxth	r1, r3
 8007518:	4a1b      	ldr	r2, [pc, #108]	; (8007588 <TGFX_JPEG_Init_MCU_LUT+0x20c>)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_Cr_MCU_444_LUT[offset] = offset + 128 ;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	b29b      	uxth	r3, r3
 8007524:	3380      	adds	r3, #128	; 0x80
 8007526:	b299      	uxth	r1, r3
 8007528:	4a18      	ldr	r2, [pc, #96]	; (800758c <TGFX_JPEG_Init_MCU_LUT+0x210>)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_K_MCU_444_LUT[offset]  = offset + 192 ;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	b29b      	uxth	r3, r3
 8007534:	33c0      	adds	r3, #192	; 0xc0
 8007536:	b299      	uxth	r1, r3
 8007538:	4a15      	ldr	r2, [pc, #84]	; (8007590 <TGFX_JPEG_Init_MCU_LUT+0x214>)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(j = 0; j < 8; j++)
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	3301      	adds	r3, #1
 8007544:	60bb      	str	r3, [r7, #8]
 8007546:	68bb      	ldr	r3, [r7, #8]
 8007548:	2b07      	cmp	r3, #7
 800754a:	d9d6      	bls.n	80074fa <TGFX_JPEG_Init_MCU_LUT+0x17e>
  for(i = 0; i < 8; i++)
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	3301      	adds	r3, #1
 8007550:	60fb      	str	r3, [r7, #12]
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	2b07      	cmp	r3, #7
 8007556:	d9cd      	bls.n	80074f4 <TGFX_JPEG_Init_MCU_LUT+0x178>
    }
  }
}
 8007558:	bf00      	nop
 800755a:	bf00      	nop
 800755c:	3714      	adds	r7, #20
 800755e:	46bd      	mov	sp, r7
 8007560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007564:	4770      	bx	lr
 8007566:	bf00      	nop
 8007568:	2400a23c 	.word	0x2400a23c
 800756c:	2400a4bc 	.word	0x2400a4bc
 8007570:	2400a6bc 	.word	0x2400a6bc
 8007574:	2400a93c 	.word	0x2400a93c
 8007578:	2400ab3c 	.word	0x2400ab3c
 800757c:	2400adbc 	.word	0x2400adbc
 8007580:	2400afbc 	.word	0x2400afbc
 8007584:	2400a43c 	.word	0x2400a43c
 8007588:	2400a8bc 	.word	0x2400a8bc
 800758c:	2400ad3c 	.word	0x2400ad3c
 8007590:	2400b1bc 	.word	0x2400b1bc

08007594 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b082      	sub	sp, #8
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
 800759c:	460b      	mov	r3, r1
 800759e:	807b      	strh	r3, [r7, #2]
    switch (typography)
 80075a0:	887b      	ldrh	r3, [r7, #2]
 80075a2:	2b02      	cmp	r3, #2
 80075a4:	d010      	beq.n	80075c8 <_ZN23ApplicationFontProvider7getFontEt+0x34>
 80075a6:	2b02      	cmp	r3, #2
 80075a8:	dc13      	bgt.n	80075d2 <_ZN23ApplicationFontProvider7getFontEt+0x3e>
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d002      	beq.n	80075b4 <_ZN23ApplicationFontProvider7getFontEt+0x20>
 80075ae:	2b01      	cmp	r3, #1
 80075b0:	d005      	beq.n	80075be <_ZN23ApplicationFontProvider7getFontEt+0x2a>
 80075b2:	e00e      	b.n	80075d2 <_ZN23ApplicationFontProvider7getFontEt+0x3e>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 80075b4:	f002 fd3a 	bl	800a02c <_ZN17TypedTextDatabase8getFontsEv>
 80075b8:	4603      	mov	r3, r0
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	e00a      	b.n	80075d4 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 80075be:	f002 fd35 	bl	800a02c <_ZN17TypedTextDatabase8getFontsEv>
 80075c2:	4603      	mov	r3, r0
 80075c4:	685b      	ldr	r3, [r3, #4]
 80075c6:	e005      	b.n	80075d4 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 80075c8:	f002 fd30 	bl	800a02c <_ZN17TypedTextDatabase8getFontsEv>
 80075cc:	4603      	mov	r3, r0
 80075ce:	689b      	ldr	r3, [r3, #8]
 80075d0:	e000      	b.n	80075d4 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    default:
        return 0;
 80075d2:	2300      	movs	r3, #0
    }
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	3708      	adds	r7, #8
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}

080075dc <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 80075dc:	b480      	push	{r7}
 80075de:	af00      	add	r7, sp, #0
    return bitmap_database;
 80075e0:	4b02      	ldr	r3, [pc, #8]	; (80075ec <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	46bd      	mov	sp, r7
 80075e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ea:	4770      	bx	lr
 80075ec:	0802c868 	.word	0x0802c868

080075f0 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 80075f0:	b480      	push	{r7}
 80075f2:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 80075f4:	2302      	movs	r3, #2
}
 80075f6:	4618      	mov	r0, r3
 80075f8:	46bd      	mov	sp, r7
 80075fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fe:	4770      	bx	lr

08007600 <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 8007600:	b480      	push	{r7}
 8007602:	b083      	sub	sp, #12
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
    {
 8007608:	4a04      	ldr	r2, [pc, #16]	; (800761c <_ZN8touchgfx4FontD1Ev+0x1c>)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	601a      	str	r2, [r3, #0]
    }
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	4618      	mov	r0, r3
 8007612:	370c      	adds	r7, #12
 8007614:	46bd      	mov	sp, r7
 8007616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761a:	4770      	bx	lr
 800761c:	0802cad0 	.word	0x0802cad0

08007620 <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 8007620:	b580      	push	{r7, lr}
 8007622:	b082      	sub	sp, #8
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
    }
 8007628:	6878      	ldr	r0, [r7, #4]
 800762a:	f7ff ffe9 	bl	8007600 <_ZN8touchgfx4FontD1Ev>
 800762e:	2114      	movs	r1, #20
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	f021 f8fe 	bl	8028832 <_ZdlPvj>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	4618      	mov	r0, r3
 800763a:	3708      	adds	r7, #8
 800763c:	46bd      	mov	sp, r7
 800763e:	bd80      	pop	{r7, pc}

08007640 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8007640:	b590      	push	{r4, r7, lr}
 8007642:	b087      	sub	sp, #28
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
 8007648:	460b      	mov	r3, r1
 800764a:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 800764c:	887b      	ldrh	r3, [r7, #2]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d101      	bne.n	8007656 <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 8007652:	2300      	movs	r3, #0
 8007654:	e010      	b.n	8007678 <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 8007656:	2300      	movs	r3, #0
 8007658:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 800765a:	2300      	movs	r3, #0
 800765c:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	3308      	adds	r3, #8
 8007664:	681c      	ldr	r4, [r3, #0]
 8007666:	f107 030f 	add.w	r3, r7, #15
 800766a:	f107 0210 	add.w	r2, r7, #16
 800766e:	8879      	ldrh	r1, [r7, #2]
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	47a0      	blx	r4
 8007674:	6178      	str	r0, [r7, #20]
        return glyph;
 8007676:	697b      	ldr	r3, [r7, #20]
    }
 8007678:	4618      	mov	r0, r3
 800767a:	371c      	adds	r7, #28
 800767c:	46bd      	mov	sp, r7
 800767e:	bd90      	pop	{r4, r7, pc}

08007680 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 8007680:	b480      	push	{r7}
 8007682:	b083      	sub	sp, #12
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	89db      	ldrh	r3, [r3, #14]
    }
 800768c:	4618      	mov	r0, r3
 800768e:	370c      	adds	r7, #12
 8007690:	46bd      	mov	sp, r7
 8007692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007696:	4770      	bx	lr

08007698 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 8007698:	b480      	push	{r7}
 800769a:	b083      	sub	sp, #12
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	8a1b      	ldrh	r3, [r3, #16]
    }
 80076a4:	4618      	mov	r0, r3
 80076a6:	370c      	adds	r7, #12
 80076a8:	46bd      	mov	sp, r7
 80076aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ae:	4770      	bx	lr

080076b0 <_ZNK8touchgfx4Font11getBaselineEv>:
     * @return The height in pixels of this font.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
 80076b0:	b480      	push	{r7}
 80076b2:	b083      	sub	sp, #12
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
    {
        return baselineHeight;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	88db      	ldrh	r3, [r3, #6]
    }
 80076bc:	4618      	mov	r0, r3
 80076be:	370c      	adds	r7, #12
 80076c0:	46bd      	mov	sp, r7
 80076c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c6:	4770      	bx	lr

080076c8 <_ZNK8touchgfx4Font9getHeightEv>:
     * Returns the height of a font. The font may exceed the top by getPixelsAboveTop() or the
     * bottom by getPixelsBelowBottom.
     *
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
 80076c8:	b480      	push	{r7}
 80076ca:	b083      	sub	sp, #12
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	889b      	ldrh	r3, [r3, #4]
    }
 80076d4:	4618      	mov	r0, r3
 80076d6:	370c      	adds	r7, #12
 80076d8:	46bd      	mov	sp, r7
 80076da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076de:	4770      	bx	lr

080076e0 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 80076e0:	b480      	push	{r7}
 80076e2:	b083      	sub	sp, #12
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	7a9b      	ldrb	r3, [r3, #10]
 80076ec:	f3c3 0306 	ubfx	r3, r3, #0, #7
 80076f0:	b2db      	uxtb	r3, r3
    }
 80076f2:	4618      	mov	r0, r3
 80076f4:	370c      	adds	r7, #12
 80076f6:	46bd      	mov	sp, r7
 80076f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fc:	4770      	bx	lr

080076fe <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 80076fe:	b480      	push	{r7}
 8007700:	b083      	sub	sp, #12
 8007702:	af00      	add	r7, sp, #0
 8007704:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	7a9b      	ldrb	r3, [r3, #10]
 800770a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800770e:	b2db      	uxtb	r3, r3
    }
 8007710:	4618      	mov	r0, r3
 8007712:	370c      	adds	r7, #12
 8007714:	46bd      	mov	sp, r7
 8007716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771a:	4770      	bx	lr

0800771c <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 800771c:	b580      	push	{r7, lr}
 800771e:	b082      	sub	sp, #8
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
 8007724:	4a05      	ldr	r2, [pc, #20]	; (800773c <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	601a      	str	r2, [r3, #0]
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	4618      	mov	r0, r3
 800772e:	f7ff ff67 	bl	8007600 <_ZN8touchgfx4FontD1Ev>
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	4618      	mov	r0, r3
 8007736:	3708      	adds	r7, #8
 8007738:	46bd      	mov	sp, r7
 800773a:	bd80      	pop	{r7, pc}
 800773c:	0802d700 	.word	0x0802d700

08007740 <_ZN8touchgfx9ConstFontD0Ev>:
 8007740:	b580      	push	{r7, lr}
 8007742:	b082      	sub	sp, #8
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f7ff ffe7 	bl	800771c <_ZN8touchgfx9ConstFontD1Ev>
 800774e:	211c      	movs	r1, #28
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f021 f86e 	bl	8028832 <_ZdlPvj>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	4618      	mov	r0, r3
 800775a:	3708      	adds	r7, #8
 800775c:	46bd      	mov	sp, r7
 800775e:	bd80      	pop	{r7, pc}

08007760 <_ZN8touchgfx13GeneratedFontD1Ev>:

#include <touchgfx/ConstFont.hpp>

namespace touchgfx
{
class GeneratedFont : public ConstFont
 8007760:	b580      	push	{r7, lr}
 8007762:	b082      	sub	sp, #8
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
 8007768:	4a05      	ldr	r2, [pc, #20]	; (8007780 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	601a      	str	r2, [r3, #0]
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	4618      	mov	r0, r3
 8007772:	f7ff ffd3 	bl	800771c <_ZN8touchgfx9ConstFontD1Ev>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	4618      	mov	r0, r3
 800777a:	3708      	adds	r7, #8
 800777c:	46bd      	mov	sp, r7
 800777e:	bd80      	pop	{r7, pc}
 8007780:	0802c9a0 	.word	0x0802c9a0

08007784 <_ZN8touchgfx13GeneratedFontD0Ev>:
 8007784:	b580      	push	{r7, lr}
 8007786:	b082      	sub	sp, #8
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	f7ff ffe7 	bl	8007760 <_ZN8touchgfx13GeneratedFontD1Ev>
 8007792:	212c      	movs	r1, #44	; 0x2c
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	f021 f84c 	bl	8028832 <_ZdlPvj>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	4618      	mov	r0, r3
 800779e:	3708      	adds	r7, #8
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bd80      	pop	{r7, pc}

080077a4 <_ZN8touchgfx9TypedTextD1Ev>:
    virtual ~TypedText()
 80077a4:	b480      	push	{r7}
 80077a6:	b083      	sub	sp, #12
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
    {
 80077ac:	4a04      	ldr	r2, [pc, #16]	; (80077c0 <_ZN8touchgfx9TypedTextD1Ev+0x1c>)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	601a      	str	r2, [r3, #0]
    }
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	4618      	mov	r0, r3
 80077b6:	370c      	adds	r7, #12
 80077b8:	46bd      	mov	sp, r7
 80077ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077be:	4770      	bx	lr
 80077c0:	0802c898 	.word	0x0802c898

080077c4 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b082      	sub	sp, #8
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
    }
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	f7ff ffe9 	bl	80077a4 <_ZN8touchgfx9TypedTextD1Ev>
 80077d2:	2108      	movs	r1, #8
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	f021 f82c 	bl	8028832 <_ZdlPvj>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	4618      	mov	r0, r3
 80077de:	3708      	adds	r7, #8
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bd80      	pop	{r7, pc}

080077e4 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80077e4:	b480      	push	{r7}
 80077e6:	b083      	sub	sp, #12
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
 80077ec:	6039      	str	r1, [r7, #0]
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	4618      	mov	r0, r3
 80077f2:	370c      	adds	r7, #12
 80077f4:	46bd      	mov	sp, r7
 80077f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fa:	4770      	bx	lr

080077fc <_ZN8touchgfx8DrawableC1Ev>:
    Drawable()
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b082      	sub	sp, #8
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
          visible(true)
 8007804:	4a14      	ldr	r2, [pc, #80]	; (8007858 <_ZN8touchgfx8DrawableC1Ev+0x5c>)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	601a      	str	r2, [r3, #0]
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	3304      	adds	r3, #4
 800780e:	4618      	mov	r0, r3
 8007810:	f7fc fe7c 	bl	800450c <_ZN8touchgfx4RectC1Ev>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	330c      	adds	r3, #12
 8007818:	4618      	mov	r0, r3
 800781a:	f7fc fe77 	bl	800450c <_ZN8touchgfx4RectC1Ev>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2200      	movs	r2, #0
 8007822:	615a      	str	r2, [r3, #20]
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2200      	movs	r2, #0
 8007828:	619a      	str	r2, [r3, #24]
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2200      	movs	r2, #0
 800782e:	61da      	str	r2, [r3, #28]
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2200      	movs	r2, #0
 8007834:	841a      	strh	r2, [r3, #32]
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2200      	movs	r2, #0
 800783a:	845a      	strh	r2, [r3, #34]	; 0x22
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2200      	movs	r2, #0
 8007840:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2201      	movs	r2, #1
 8007848:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	4618      	mov	r0, r3
 8007850:	3708      	adds	r7, #8
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}
 8007856:	bf00      	nop
 8007858:	0802d698 	.word	0x0802d698

0800785c <_ZN8touchgfx8Drawable14getNextSiblingEv>:
    Drawable* getNextSibling()
 800785c:	b480      	push	{r7}
 800785e:	b083      	sub	sp, #12
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
        return nextSibling;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	699b      	ldr	r3, [r3, #24]
    }
 8007868:	4618      	mov	r0, r3
 800786a:	370c      	adds	r7, #12
 800786c:	46bd      	mov	sp, r7
 800786e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007872:	4770      	bx	lr

08007874 <_ZN8touchgfx8Drawable11setPositionEssss>:
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8007874:	b580      	push	{r7, lr}
 8007876:	b084      	sub	sp, #16
 8007878:	af00      	add	r7, sp, #0
 800787a:	60f8      	str	r0, [r7, #12]
 800787c:	4608      	mov	r0, r1
 800787e:	4611      	mov	r1, r2
 8007880:	461a      	mov	r2, r3
 8007882:	4603      	mov	r3, r0
 8007884:	817b      	strh	r3, [r7, #10]
 8007886:	460b      	mov	r3, r1
 8007888:	813b      	strh	r3, [r7, #8]
 800788a:	4613      	mov	r3, r2
 800788c:	80fb      	strh	r3, [r7, #6]
        setXY(x, y);
 800788e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8007892:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007896:	4619      	mov	r1, r3
 8007898:	68f8      	ldr	r0, [r7, #12]
 800789a:	f000 f819 	bl	80078d0 <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 800789e:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80078a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80078a6:	4619      	mov	r1, r3
 80078a8:	68f8      	ldr	r0, [r7, #12]
 80078aa:	f000 f82f 	bl	800790c <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 80078ae:	bf00      	nop
 80078b0:	3710      	adds	r7, #16
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}

080078b6 <_ZNK8touchgfx8Drawable4getXEv>:
    int16_t getX() const
 80078b6:	b480      	push	{r7}
 80078b8:	b083      	sub	sp, #12
 80078ba:	af00      	add	r7, sp, #0
 80078bc:	6078      	str	r0, [r7, #4]
        return rect.x;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    }
 80078c4:	4618      	mov	r0, r3
 80078c6:	370c      	adds	r7, #12
 80078c8:	46bd      	mov	sp, r7
 80078ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ce:	4770      	bx	lr

080078d0 <_ZN8touchgfx8Drawable5setXYEss>:
    void setXY(int16_t x, int16_t y)
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b082      	sub	sp, #8
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
 80078d8:	460b      	mov	r3, r1
 80078da:	807b      	strh	r3, [r7, #2]
 80078dc:	4613      	mov	r3, r2
 80078de:	803b      	strh	r3, [r7, #0]
        setX(x);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	3330      	adds	r3, #48	; 0x30
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80078ec:	4611      	mov	r1, r2
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	4798      	blx	r3
        setY(y);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	3334      	adds	r3, #52	; 0x34
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f9b7 2000 	ldrsh.w	r2, [r7]
 80078fe:	4611      	mov	r1, r2
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	4798      	blx	r3
    }
 8007904:	bf00      	nop
 8007906:	3708      	adds	r7, #8
 8007908:	46bd      	mov	sp, r7
 800790a:	bd80      	pop	{r7, pc}

0800790c <_ZN8touchgfx8Drawable14setWidthHeightEss>:
    void setWidthHeight(int16_t width, int16_t height)
 800790c:	b580      	push	{r7, lr}
 800790e:	b082      	sub	sp, #8
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
 8007914:	460b      	mov	r3, r1
 8007916:	807b      	strh	r3, [r7, #2]
 8007918:	4613      	mov	r3, r2
 800791a:	803b      	strh	r3, [r7, #0]
        setWidth(width);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	3338      	adds	r3, #56	; 0x38
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8007928:	4611      	mov	r1, r2
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	4798      	blx	r3
        setHeight(height);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	333c      	adds	r3, #60	; 0x3c
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f9b7 2000 	ldrsh.w	r2, [r7]
 800793a:	4611      	mov	r1, r2
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	4798      	blx	r3
    }
 8007940:	bf00      	nop
 8007942:	3708      	adds	r7, #8
 8007944:	46bd      	mov	sp, r7
 8007946:	bd80      	pop	{r7, pc}

08007948 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
        timerWidgets.add(w);
    }

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
 8007948:	b580      	push	{r7, lr}
 800794a:	b082      	sub	sp, #8
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
    {
        timerWidgets.clear();
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	3304      	adds	r3, #4
 8007954:	4618      	mov	r0, r3
 8007956:	f016 f8da 	bl	801db0e <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    }
 800795a:	bf00      	nop
 800795c:	3708      	adds	r7, #8
 800795e:	46bd      	mov	sp, r7
 8007960:	bd80      	pop	{r7, pc}
	...

08007964 <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 8007964:	b480      	push	{r7}
 8007966:	b083      	sub	sp, #12
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 800796c:	4a07      	ldr	r2, [pc, #28]	; (800798c <_ZN8touchgfx10TransitionC1Ev+0x28>)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	601a      	str	r2, [r3, #0]
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2200      	movs	r2, #0
 8007976:	605a      	str	r2, [r3, #4]
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2200      	movs	r2, #0
 800797c:	721a      	strb	r2, [r3, #8]
    {
    }
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	4618      	mov	r0, r3
 8007982:	370c      	adds	r7, #12
 8007984:	46bd      	mov	sp, r7
 8007986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798a:	4770      	bx	lr
 800798c:	0802c914 	.word	0x0802c914

08007990 <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 8007990:	b480      	push	{r7}
 8007992:	b083      	sub	sp, #12
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
    {
 8007998:	4a04      	ldr	r2, [pc, #16]	; (80079ac <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	601a      	str	r2, [r3, #0]
    }
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	4618      	mov	r0, r3
 80079a2:	370c      	adds	r7, #12
 80079a4:	46bd      	mov	sp, r7
 80079a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079aa:	4770      	bx	lr
 80079ac:	0802c914 	.word	0x0802c914

080079b0 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b082      	sub	sp, #8
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
    }
 80079b8:	6878      	ldr	r0, [r7, #4]
 80079ba:	f7ff ffe9 	bl	8007990 <_ZN8touchgfx10TransitionD1Ev>
 80079be:	210c      	movs	r1, #12
 80079c0:	6878      	ldr	r0, [r7, #4]
 80079c2:	f020 ff36 	bl	8028832 <_ZdlPvj>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	4618      	mov	r0, r3
 80079ca:	3708      	adds	r7, #8
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bd80      	pop	{r7, pc}

080079d0 <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 80079d0:	b480      	push	{r7}
 80079d2:	b083      	sub	sp, #12
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
    {
    }
 80079d8:	bf00      	nop
 80079da:	370c      	adds	r7, #12
 80079dc:	46bd      	mov	sp, r7
 80079de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e2:	4770      	bx	lr

080079e4 <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 80079e4:	b480      	push	{r7}
 80079e6:	b083      	sub	sp, #12
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
    {
    }
 80079ec:	bf00      	nop
 80079ee:	370c      	adds	r7, #12
 80079f0:	46bd      	mov	sp, r7
 80079f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f6:	4770      	bx	lr

080079f8 <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 80079f8:	b480      	push	{r7}
 80079fa:	b083      	sub	sp, #12
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
    {
    }
 8007a00:	bf00      	nop
 8007a02:	370c      	adds	r7, #12
 8007a04:	46bd      	mov	sp, r7
 8007a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0a:	4770      	bx	lr

08007a0c <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b082      	sub	sp, #8
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->invalidate();
 8007a14:	f016 f82e 	bl	801da74 <_ZN8touchgfx11Application11getInstanceEv>
 8007a18:	4603      	mov	r3, r0
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	f016 fc9c 	bl	801e358 <_ZN8touchgfx11Application10invalidateEv>
    }
 8007a20:	bf00      	nop
 8007a22:	3708      	adds	r7, #8
 8007a24:	46bd      	mov	sp, r7
 8007a26:	bd80      	pop	{r7, pc}

08007a28 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 8007a28:	b480      	push	{r7}
 8007a2a:	b083      	sub	sp, #12
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
 8007a30:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	683a      	ldr	r2, [r7, #0]
 8007a36:	605a      	str	r2, [r3, #4]
    }
 8007a38:	bf00      	nop
 8007a3a:	370c      	adds	r7, #12
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a42:	4770      	bx	lr

08007a44 <_ZNK8touchgfx10Transition13FullSolidRect12getSolidRectEv>:
     * A Widget that reports solid and but does not draw anything.
     */
    class FullSolidRect : public Widget
    {
    public:
        virtual Rect getSolidRect() const
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b084      	sub	sp, #16
 8007a48:	af02      	add	r7, sp, #8
 8007a4a:	6078      	str	r0, [r7, #4]
 8007a4c:	6039      	str	r1, [r7, #0]
        {
            return Rect(0, 0, rect.width, rect.height);
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8007a5a:	9300      	str	r3, [sp, #0]
 8007a5c:	4613      	mov	r3, r2
 8007a5e:	2200      	movs	r2, #0
 8007a60:	2100      	movs	r1, #0
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f7fd fcac 	bl	80053c0 <_ZN8touchgfx4RectC1Essss>
        }
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	3708      	adds	r7, #8
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bd80      	pop	{r7, pc}

08007a70 <_ZNK8touchgfx10Transition13FullSolidRect4drawERKNS_4RectE>:

        virtual void draw(const Rect& area) const
 8007a70:	b480      	push	{r7}
 8007a72:	b083      	sub	sp, #12
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
 8007a78:	6039      	str	r1, [r7, #0]
        {
        }
 8007a7a:	bf00      	nop
 8007a7c:	370c      	adds	r7, #12
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a84:	4770      	bx	lr
	...

08007a88 <_ZN8touchgfx14MVPApplicationC1Ev>:
    MVPApplication()
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b082      	sub	sp, #8
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
          pendingScreenTransitionCallback(0)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	4618      	mov	r0, r3
 8007a94:	f016 f8dc 	bl	801dc50 <_ZN8touchgfx11ApplicationC1Ev>
 8007a98:	4a09      	ldr	r2, [pc, #36]	; (8007ac0 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	601a      	str	r2, [r3, #0]
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
        instance = this;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	4a04      	ldr	r2, [pc, #16]	; (8007ac4 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 8007ab2:	6013      	str	r3, [r2, #0]
    }
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	3708      	adds	r7, #8
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bd80      	pop	{r7, pc}
 8007abe:	bf00      	nop
 8007ac0:	0802c2f0 	.word	0x0802c2f0
 8007ac4:	2402628c 	.word	0x2402628c

08007ac8 <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 8007ac8:	b480      	push	{r7}
 8007aca:	b083      	sub	sp, #12
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
 8007ad0:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	683a      	ldr	r2, [r7, #0]
 8007ad6:	601a      	str	r2, [r3, #0]
    }
 8007ad8:	bf00      	nop
 8007ada:	370c      	adds	r7, #12
 8007adc:	46bd      	mov	sp, r7
 8007ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae2:	4770      	bx	lr

08007ae4 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 8007ae4:	b480      	push	{r7}
 8007ae6:	b083      	sub	sp, #12
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
    {
        done = true;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2201      	movs	r2, #1
 8007af0:	721a      	strb	r2, [r3, #8]
    }
 8007af2:	bf00      	nop
 8007af4:	370c      	adds	r7, #12
 8007af6:	46bd      	mov	sp, r7
 8007af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afc:	4770      	bx	lr
	...

08007b00 <_ZN8touchgfx15BlockTransitionC1Ev>:
    /**
     * Initializes a new instance of the BlockTransition class.
     *
     * @param  transitionSteps (Optional) Number of steps in the transition animation.
     */
    BlockTransition()
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b082      	sub	sp, #8
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
        : Transition(),
          animationCounter(0)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f7ff ff2a 	bl	8007964 <_ZN8touchgfx10TransitionC1Ev>
 8007b10:	4a20      	ldr	r2, [pc, #128]	; (8007b94 <_ZN8touchgfx15BlockTransitionC1Ev+0x94>)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	601a      	str	r2, [r3, #0]
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2200      	movs	r2, #0
 8007b1a:	741a      	strb	r2, [r3, #16]
    {
        // 8x6 blocks, with 8 blocks on the longest edge
        if (HAL::DISPLAY_WIDTH > HAL::DISPLAY_HEIGHT)
 8007b1c:	4b1e      	ldr	r3, [pc, #120]	; (8007b98 <_ZN8touchgfx15BlockTransitionC1Ev+0x98>)
 8007b1e:	881a      	ldrh	r2, [r3, #0]
 8007b20:	4b1e      	ldr	r3, [pc, #120]	; (8007b9c <_ZN8touchgfx15BlockTransitionC1Ev+0x9c>)
 8007b22:	881b      	ldrh	r3, [r3, #0]
 8007b24:	429a      	cmp	r2, r3
 8007b26:	d918      	bls.n	8007b5a <_ZN8touchgfx15BlockTransitionC1Ev+0x5a>
        {
            blockWidth = (HAL::DISPLAY_WIDTH + 7) / 8;
 8007b28:	4b1b      	ldr	r3, [pc, #108]	; (8007b98 <_ZN8touchgfx15BlockTransitionC1Ev+0x98>)
 8007b2a:	881b      	ldrh	r3, [r3, #0]
 8007b2c:	3307      	adds	r3, #7
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	da00      	bge.n	8007b34 <_ZN8touchgfx15BlockTransitionC1Ev+0x34>
 8007b32:	3307      	adds	r3, #7
 8007b34:	10db      	asrs	r3, r3, #3
 8007b36:	b29a      	uxth	r2, r3
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	815a      	strh	r2, [r3, #10]
            blockHeight = (HAL::DISPLAY_HEIGHT + 5) / 6;
 8007b3c:	4b17      	ldr	r3, [pc, #92]	; (8007b9c <_ZN8touchgfx15BlockTransitionC1Ev+0x9c>)
 8007b3e:	881b      	ldrh	r3, [r3, #0]
 8007b40:	3305      	adds	r3, #5
 8007b42:	4a17      	ldr	r2, [pc, #92]	; (8007ba0 <_ZN8touchgfx15BlockTransitionC1Ev+0xa0>)
 8007b44:	fb82 1203 	smull	r1, r2, r2, r3
 8007b48:	17db      	asrs	r3, r3, #31
 8007b4a:	1ad3      	subs	r3, r2, r3
 8007b4c:	b29a      	uxth	r2, r3
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	819a      	strh	r2, [r3, #12]
            blocksHorizontal = 8;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2208      	movs	r2, #8
 8007b56:	81da      	strh	r2, [r3, #14]
 8007b58:	e017      	b.n	8007b8a <_ZN8touchgfx15BlockTransitionC1Ev+0x8a>
        }
        else
        {
            blockWidth = (HAL::DISPLAY_WIDTH + 5) / 6;
 8007b5a:	4b0f      	ldr	r3, [pc, #60]	; (8007b98 <_ZN8touchgfx15BlockTransitionC1Ev+0x98>)
 8007b5c:	881b      	ldrh	r3, [r3, #0]
 8007b5e:	3305      	adds	r3, #5
 8007b60:	4a0f      	ldr	r2, [pc, #60]	; (8007ba0 <_ZN8touchgfx15BlockTransitionC1Ev+0xa0>)
 8007b62:	fb82 1203 	smull	r1, r2, r2, r3
 8007b66:	17db      	asrs	r3, r3, #31
 8007b68:	1ad3      	subs	r3, r2, r3
 8007b6a:	b29a      	uxth	r2, r3
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	815a      	strh	r2, [r3, #10]
            blockHeight = (HAL::DISPLAY_HEIGHT + 7) / 8;
 8007b70:	4b0a      	ldr	r3, [pc, #40]	; (8007b9c <_ZN8touchgfx15BlockTransitionC1Ev+0x9c>)
 8007b72:	881b      	ldrh	r3, [r3, #0]
 8007b74:	3307      	adds	r3, #7
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	da00      	bge.n	8007b7c <_ZN8touchgfx15BlockTransitionC1Ev+0x7c>
 8007b7a:	3307      	adds	r3, #7
 8007b7c:	10db      	asrs	r3, r3, #3
 8007b7e:	b29a      	uxth	r2, r3
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	819a      	strh	r2, [r3, #12]
            blocksHorizontal = 6;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2206      	movs	r2, #6
 8007b88:	81da      	strh	r2, [r3, #14]
        }
    }
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	3708      	adds	r7, #8
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bd80      	pop	{r7, pc}
 8007b94:	0802c8cc 	.word	0x0802c8cc
 8007b98:	24026234 	.word	0x24026234
 8007b9c:	24026236 	.word	0x24026236
 8007ba0:	2aaaaaab 	.word	0x2aaaaaab

08007ba4 <_ZN8touchgfx15BlockTransition15handleTickEventEv>:
    /**
     * Handles the tick event when transitioning. It uncovers and
     * invalidates two blocks in every frame, for a total of 24
     * frames.
     */
    virtual void handleTickEvent()
 8007ba4:	b590      	push	{r4, r7, lr}
 8007ba6:	b0bb      	sub	sp, #236	; 0xec
 8007ba8:	af02      	add	r7, sp, #8
 8007baa:	6078      	str	r0, [r7, #4]
    {
        const int animationSteps = 48;
 8007bac:	2330      	movs	r3, #48	; 0x30
 8007bae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
        // "Random" sequence of blocks to invalidate
        const int indeces[animationSteps] = { 20, 11, 47, 14, 10, 0, 18, 28, 13, 6, 2, 41,
 8007bb2:	4a42      	ldr	r2, [pc, #264]	; (8007cbc <_ZN8touchgfx15BlockTransition15handleTickEventEv+0x118>)
 8007bb4:	f107 0310 	add.w	r3, r7, #16
 8007bb8:	4611      	mov	r1, r2
 8007bba:	22c0      	movs	r2, #192	; 0xc0
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	f020 fee9 	bl	8028994 <memcpy>
                                              44, 5, 3, 17, 36, 46, 26, 15, 29, 39, 25, 12,
                                              19, 24, 7, 38, 37, 30, 9, 43, 4, 31, 22, 23,
                                              35, 16, 32, 42, 8, 1, 40, 33, 21, 27, 34, 45 };

        Transition::handleTickEvent();
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	f7ff ff03 	bl	80079d0 <_ZN8touchgfx10Transition15handleTickEventEv>

        if (animationCounter >= animationSteps)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	7c1b      	ldrb	r3, [r3, #16]
 8007bce:	2b2f      	cmp	r3, #47	; 0x2f
 8007bd0:	d903      	bls.n	8007bda <_ZN8touchgfx15BlockTransition15handleTickEventEv+0x36>
        {
            // Final step: stop the animation
            done = true;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2201      	movs	r2, #1
 8007bd6:	721a      	strb	r2, [r3, #8]
 8007bd8:	e06d      	b.n	8007cb6 <_ZN8touchgfx15BlockTransition15handleTickEventEv+0x112>
            return;
        }

        if (animationCounter == 0 && HAL::USE_DOUBLE_BUFFERING)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	7c1b      	ldrb	r3, [r3, #16]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d109      	bne.n	8007bf6 <_ZN8touchgfx15BlockTransition15handleTickEventEv+0x52>
 8007be2:	4b37      	ldr	r3, [pc, #220]	; (8007cc0 <_ZN8touchgfx15BlockTransition15handleTickEventEv+0x11c>)
 8007be4:	781b      	ldrb	r3, [r3, #0]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d005      	beq.n	8007bf6 <_ZN8touchgfx15BlockTransition15handleTickEventEv+0x52>
        {
            // Synchronize framebuffers
            Application::getInstance()->copyInvalidatedAreasFromTFTToClientBuffer();
 8007bea:	f015 ff43 	bl	801da74 <_ZN8touchgfx11Application11getInstanceEv>
 8007bee:	4603      	mov	r3, r0
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	f015 ff45 	bl	801da80 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv>
        }

        int blocks_per_tick = 2;
 8007bf6:	2302      	movs	r3, #2
 8007bf8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
        while (blocks_per_tick-- > 0 && animationCounter <= animationSteps)
 8007bfc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c00:	1e5a      	subs	r2, r3, #1
 8007c02:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	dd05      	ble.n	8007c16 <_ZN8touchgfx15BlockTransition15handleTickEventEv+0x72>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	7c1b      	ldrb	r3, [r3, #16]
 8007c0e:	2b30      	cmp	r3, #48	; 0x30
 8007c10:	d801      	bhi.n	8007c16 <_ZN8touchgfx15BlockTransition15handleTickEventEv+0x72>
 8007c12:	2301      	movs	r3, #1
 8007c14:	e000      	b.n	8007c18 <_ZN8touchgfx15BlockTransition15handleTickEventEv+0x74>
 8007c16:	2300      	movs	r3, #0
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d04c      	beq.n	8007cb6 <_ZN8touchgfx15BlockTransition15handleTickEventEv+0x112>
        {
            // Invalidate next block in sequence
            const int index = indeces[animationCounter];
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	7c1b      	ldrb	r3, [r3, #16]
 8007c20:	009b      	lsls	r3, r3, #2
 8007c22:	33e0      	adds	r3, #224	; 0xe0
 8007c24:	443b      	add	r3, r7
 8007c26:	f853 3cd0 	ldr.w	r3, [r3, #-208]
 8007c2a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

            const int16_t x = (index % blocksHorizontal) * blockWidth;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	89db      	ldrh	r3, [r3, #14]
 8007c32:	461a      	mov	r2, r3
 8007c34:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007c38:	fb93 f1f2 	sdiv	r1, r3, r2
 8007c3c:	fb01 f202 	mul.w	r2, r1, r2
 8007c40:	1a9b      	subs	r3, r3, r2
 8007c42:	b29a      	uxth	r2, r3
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	895b      	ldrh	r3, [r3, #10]
 8007c48:	fb12 f303 	smulbb	r3, r2, r3
 8007c4c:	b29b      	uxth	r3, r3
 8007c4e:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
            const int16_t y = (index / blocksHorizontal) * blockHeight;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	89db      	ldrh	r3, [r3, #14]
 8007c56:	461a      	mov	r2, r3
 8007c58:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007c5c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007c60:	b29a      	uxth	r2, r3
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	899b      	ldrh	r3, [r3, #12]
 8007c66:	fb12 f303 	smulbb	r3, r2, r3
 8007c6a:	b29b      	uxth	r3, r3
 8007c6c:	f8a7 30d0 	strh.w	r3, [r7, #208]	; 0xd0

            Rect invRect(x, y, blockWidth, blockHeight);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	895b      	ldrh	r3, [r3, #10]
 8007c74:	b21c      	sxth	r4, r3
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	899b      	ldrh	r3, [r3, #12]
 8007c7a:	b21b      	sxth	r3, r3
 8007c7c:	f9b7 20d0 	ldrsh.w	r2, [r7, #208]	; 0xd0
 8007c80:	f9b7 10d2 	ldrsh.w	r1, [r7, #210]	; 0xd2
 8007c84:	f107 0008 	add.w	r0, r7, #8
 8007c88:	9300      	str	r3, [sp, #0]
 8007c8a:	4623      	mov	r3, r4
 8007c8c:	f7fd fb98 	bl	80053c0 <_ZN8touchgfx4RectC1Essss>
            screenContainer->invalidateRect(invRect);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	685b      	ldr	r3, [r3, #4]
 8007c94:	4618      	mov	r0, r3
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	685b      	ldr	r3, [r3, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	3310      	adds	r3, #16
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f107 0208 	add.w	r2, r7, #8
 8007ca4:	4611      	mov	r1, r2
 8007ca6:	4798      	blx	r3
            animationCounter++;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	7c1b      	ldrb	r3, [r3, #16]
 8007cac:	3301      	adds	r3, #1
 8007cae:	b2da      	uxtb	r2, r3
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	741a      	strb	r2, [r3, #16]
        while (blocks_per_tick-- > 0 && animationCounter <= animationSteps)
 8007cb4:	e7a2      	b.n	8007bfc <_ZN8touchgfx15BlockTransition15handleTickEventEv+0x58>
        }
    }
 8007cb6:	37e4      	adds	r7, #228	; 0xe4
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	bd90      	pop	{r4, r7, pc}
 8007cbc:	0802b57c 	.word	0x0802b57c
 8007cc0:	2402623e 	.word	0x2402623e

08007cc4 <_ZN8touchgfx15BlockTransition8tearDownEv>:

    virtual void tearDown()
 8007cc4:	b480      	push	{r7}
 8007cc6:	b083      	sub	sp, #12
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
    {
    }
 8007ccc:	bf00      	nop
 8007cce:	370c      	adds	r7, #12
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd6:	4770      	bx	lr

08007cd8 <_ZN8touchgfx15BlockTransition4initEv>:

    virtual void init()
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b082      	sub	sp, #8
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
    {
        Transition::init();
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	f7ff fe88 	bl	80079f8 <_ZN8touchgfx10Transition4initEv>
    }
 8007ce8:	bf00      	nop
 8007cea:	3708      	adds	r7, #8
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}

08007cf0 <_ZN8touchgfx15BlockTransition10invalidateEv>:

    /**
     * Block transition does not require an invalidation. Invalidation
     * is handled by the class. Do no invalidation initially.
     */
    virtual void invalidate()
 8007cf0:	b480      	push	{r7}
 8007cf2:	b083      	sub	sp, #12
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
    {
    }
 8007cf8:	bf00      	nop
 8007cfa:	370c      	adds	r7, #12
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d02:	4770      	bx	lr

08007d04 <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 8007d04:	b480      	push	{r7}
 8007d06:	b083      	sub	sp, #12
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
 8007d0c:	6039      	str	r1, [r7, #0]
    {
        model = m;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	683a      	ldr	r2, [r7, #0]
 8007d12:	605a      	str	r2, [r3, #4]
    }
 8007d14:	bf00      	nop
 8007d16:	370c      	adds	r7, #12
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1e:	4770      	bx	lr

08007d20 <_ZN8touchgfx6WidgetC1Ev>:
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b082      	sub	sp, #8
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	f7ff fd66 	bl	80077fc <_ZN8touchgfx8DrawableC1Ev>
 8007d30:	4a03      	ldr	r2, [pc, #12]	; (8007d40 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	601a      	str	r2, [r3, #0]
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	4618      	mov	r0, r3
 8007d3a:	3708      	adds	r7, #8
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	bd80      	pop	{r7, pc}
 8007d40:	0802c41c 	.word	0x0802c41c

08007d44 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/screen2_screen/Screen2View.hpp>
#include <gui/screen2_screen/Screen2Presenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b084      	sub	sp, #16
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	60f8      	str	r0, [r7, #12]
 8007d4c:	60b9      	str	r1, [r7, #8]
 8007d4e:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	4618      	mov	r0, r3
 8007d54:	f7ff fe98 	bl	8007a88 <_ZN8touchgfx14MVPApplicationC1Ev>
 8007d58:	4a13      	ldr	r2, [pc, #76]	; (8007da8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	601a      	str	r2, [r3, #0]
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8007d64:	4618      	mov	r0, r3
 8007d66:	f000 f92b 	bl	8007fc0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	687a      	ldr	r2, [r7, #4]
 8007d6e:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	68ba      	ldr	r2, [r7, #8]
 8007d76:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8007d7a:	f7fa f97f 	bl	800207c <_ZN8touchgfx3HAL11getInstanceEv>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	681a      	ldr	r2, [r3, #0]
 8007d82:	3208      	adds	r2, #8
 8007d84:	6812      	ldr	r2, [r2, #0]
 8007d86:	2100      	movs	r1, #0
 8007d88:	4618      	mov	r0, r3
 8007d8a:	4790      	blx	r2
    touchgfx::Texts::setLanguage(GB);
 8007d8c:	2000      	movs	r0, #0
 8007d8e:	f002 f8d5 	bl	8009f3c <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 8007d92:	f7fd fc59 	bl	8005648 <_ZN8touchgfx3HAL3lcdEv>
 8007d96:	4603      	mov	r3, r0
 8007d98:	4618      	mov	r0, r3
 8007d9a:	f01b ff26 	bl	8023bea <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
}
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	4618      	mov	r0, r3
 8007da2:	3710      	adds	r7, #16
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}
 8007da8:	0802c28c 	.word	0x0802c28c

08007dac <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 8007dac:	b480      	push	{r7}
 8007dae:	b083      	sub	sp, #12
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
 8007db4:	6039      	str	r1, [r7, #0]
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	4618      	mov	r0, r3
 8007dba:	370c      	adds	r7, #12
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc2:	4770      	bx	lr

08007dc4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b082      	sub	sp, #8
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
 8007dcc:	6039      	str	r1, [r7, #0]
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	683a      	ldr	r2, [r7, #0]
 8007dd2:	4611      	mov	r1, r2
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	f7ff ffe9 	bl	8007dac <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	685a      	ldr	r2, [r3, #4]
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	605a      	str	r2, [r3, #4]
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	683a      	ldr	r2, [r7, #0]
 8007de6:	3308      	adds	r3, #8
 8007de8:	3208      	adds	r2, #8
 8007dea:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007dee:	e883 0003 	stmia.w	r3, {r0, r1}
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	4618      	mov	r0, r3
 8007df6:	3708      	adds	r7, #8
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}

08007dfc <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
 */

// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
 8007dfc:	b590      	push	{r4, r7, lr}
 8007dfe:	b089      	sub	sp, #36	; 0x24
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenNoTransitionImpl);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f503 74a2 	add.w	r4, r3, #324	; 0x144
 8007e0a:	4b10      	ldr	r3, [pc, #64]	; (8007e4c <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x50>)
 8007e0c:	61bb      	str	r3, [r7, #24]
 8007e0e:	2300      	movs	r3, #0
 8007e10:	61fb      	str	r3, [r7, #28]
 8007e12:	f107 0008 	add.w	r0, r7, #8
 8007e16:	f107 0318 	add.w	r3, r7, #24
 8007e1a:	cb0c      	ldmia	r3, {r2, r3}
 8007e1c:	6879      	ldr	r1, [r7, #4]
 8007e1e:	f000 f8eb 	bl	8007ff8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 8007e22:	f107 0308 	add.w	r3, r7, #8
 8007e26:	4619      	mov	r1, r3
 8007e28:	4620      	mov	r0, r4
 8007e2a:	f7ff ffcb 	bl	8007dc4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 8007e2e:	f107 0308 	add.w	r3, r7, #8
 8007e32:	4618      	mov	r0, r3
 8007e34:	f7fd f98a 	bl	800514c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	f503 72a2 	add.w	r2, r3, #324	; 0x144
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
}
 8007e44:	bf00      	nop
 8007e46:	3724      	adds	r7, #36	; 0x24
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd90      	pop	{r4, r7, pc}
 8007e4c:	08007e51 	.word	0x08007e51

08007e50 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b084      	sub	sp, #16
 8007e54:	af02      	add	r7, sp, #8
 8007e56:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f503 719e 	add.w	r1, r3, #316	; 0x13c
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8007e64:	461a      	mov	r2, r3
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8007e6c:	9300      	str	r3, [sp, #0]
 8007e6e:	4b04      	ldr	r3, [pc, #16]	; (8007e80 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x30>)
 8007e70:	4804      	ldr	r0, [pc, #16]	; (8007e84 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x34>)
 8007e72:	f000 f8f3 	bl	800805c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8007e76:	bf00      	nop
 8007e78:	3708      	adds	r7, #8
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}
 8007e7e:	bf00      	nop
 8007e80:	24026280 	.word	0x24026280
 8007e84:	2402627c 	.word	0x2402627c

08007e88 <_ZN23FrontendApplicationBase32gotoScreen1ScreenBlockTransitionEv>:

void FrontendApplicationBase::gotoScreen1ScreenBlockTransition()
{
 8007e88:	b590      	push	{r4, r7, lr}
 8007e8a:	b089      	sub	sp, #36	; 0x24
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenBlockTransitionImpl);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f503 74a2 	add.w	r4, r3, #324	; 0x144
 8007e96:	4b10      	ldr	r3, [pc, #64]	; (8007ed8 <_ZN23FrontendApplicationBase32gotoScreen1ScreenBlockTransitionEv+0x50>)
 8007e98:	61bb      	str	r3, [r7, #24]
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	61fb      	str	r3, [r7, #28]
 8007e9e:	f107 0008 	add.w	r0, r7, #8
 8007ea2:	f107 0318 	add.w	r3, r7, #24
 8007ea6:	cb0c      	ldmia	r3, {r2, r3}
 8007ea8:	6879      	ldr	r1, [r7, #4]
 8007eaa:	f000 f8a5 	bl	8007ff8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 8007eae:	f107 0308 	add.w	r3, r7, #8
 8007eb2:	4619      	mov	r1, r3
 8007eb4:	4620      	mov	r0, r4
 8007eb6:	f7ff ff85 	bl	8007dc4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 8007eba:	f107 0308 	add.w	r3, r7, #8
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	f7fd f944 	bl	800514c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f503 72a2 	add.w	r2, r3, #324	; 0x144
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
}
 8007ed0:	bf00      	nop
 8007ed2:	3724      	adds	r7, #36	; 0x24
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd90      	pop	{r4, r7, pc}
 8007ed8:	08007edd 	.word	0x08007edd

08007edc <_ZN23FrontendApplicationBase36gotoScreen1ScreenBlockTransitionImplEv>:

void FrontendApplicationBase::gotoScreen1ScreenBlockTransitionImpl()
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b084      	sub	sp, #16
 8007ee0:	af02      	add	r7, sp, #8
 8007ee2:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::BlockTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f503 719e 	add.w	r1, r3, #316	; 0x13c
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8007ef0:	461a      	mov	r2, r3
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8007ef8:	9300      	str	r3, [sp, #0]
 8007efa:	4b04      	ldr	r3, [pc, #16]	; (8007f0c <_ZN23FrontendApplicationBase36gotoScreen1ScreenBlockTransitionImplEv+0x30>)
 8007efc:	4804      	ldr	r0, [pc, #16]	; (8007f10 <_ZN23FrontendApplicationBase36gotoScreen1ScreenBlockTransitionImplEv+0x34>)
 8007efe:	f000 f9c9 	bl	8008294 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15BlockTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8007f02:	bf00      	nop
 8007f04:	3708      	adds	r7, #8
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bd80      	pop	{r7, pc}
 8007f0a:	bf00      	nop
 8007f0c:	24026280 	.word	0x24026280
 8007f10:	2402627c 	.word	0x2402627c

08007f14 <_ZN23FrontendApplicationBase36gotoScreen2ScreenCoverTransitionEastEv>:

// Screen2

void FrontendApplicationBase::gotoScreen2ScreenCoverTransitionEast()
{
 8007f14:	b590      	push	{r4, r7, lr}
 8007f16:	b089      	sub	sp, #36	; 0x24
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen2ScreenCoverTransitionEastImpl);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f503 74a2 	add.w	r4, r3, #324	; 0x144
 8007f22:	4b10      	ldr	r3, [pc, #64]	; (8007f64 <_ZN23FrontendApplicationBase36gotoScreen2ScreenCoverTransitionEastEv+0x50>)
 8007f24:	61bb      	str	r3, [r7, #24]
 8007f26:	2300      	movs	r3, #0
 8007f28:	61fb      	str	r3, [r7, #28]
 8007f2a:	f107 0008 	add.w	r0, r7, #8
 8007f2e:	f107 0318 	add.w	r3, r7, #24
 8007f32:	cb0c      	ldmia	r3, {r2, r3}
 8007f34:	6879      	ldr	r1, [r7, #4]
 8007f36:	f000 f85f 	bl	8007ff8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 8007f3a:	f107 0308 	add.w	r3, r7, #8
 8007f3e:	4619      	mov	r1, r3
 8007f40:	4620      	mov	r0, r4
 8007f42:	f7ff ff3f 	bl	8007dc4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 8007f46:	f107 0308 	add.w	r3, r7, #8
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	f7fd f8fe 	bl	800514c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f503 72a2 	add.w	r2, r3, #324	; 0x144
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
}
 8007f5c:	bf00      	nop
 8007f5e:	3724      	adds	r7, #36	; 0x24
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd90      	pop	{r4, r7, pc}
 8007f64:	08007f69 	.word	0x08007f69

08007f68 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv>:

void FrontendApplicationBase::gotoScreen2ScreenCoverTransitionEastImpl()
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b084      	sub	sp, #16
 8007f6c:	af02      	add	r7, sp, #8
 8007f6e:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen2View, Screen2Presenter, touchgfx::CoverTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f503 719e 	add.w	r1, r3, #316	; 0x13c
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8007f7c:	461a      	mov	r2, r3
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8007f84:	9300      	str	r3, [sp, #0]
 8007f86:	4b04      	ldr	r3, [pc, #16]	; (8007f98 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x30>)
 8007f88:	4804      	ldr	r0, [pc, #16]	; (8007f9c <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x34>)
 8007f8a:	f000 fa9f 	bl	80084cc <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8007f8e:	bf00      	nop
 8007f90:	3708      	adds	r7, #8
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bd80      	pop	{r7, pc}
 8007f96:	bf00      	nop
 8007f98:	24026280 	.word	0x24026280
 8007f9c:	2402627c 	.word	0x2402627c

08007fa0 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 8007fa0:	b480      	push	{r7}
 8007fa2:	b083      	sub	sp, #12
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
 8007fa8:	4a04      	ldr	r2, [pc, #16]	; (8007fbc <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	601a      	str	r2, [r3, #0]
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	370c      	adds	r7, #12
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fba:	4770      	bx	lr
 8007fbc:	0802c33c 	.word	0x0802c33c

08007fc0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
    Callback()
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b082      	sub	sp, #8
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun(0)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	4618      	mov	r0, r3
 8007fcc:	f7ff ffe8 	bl	8007fa0 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 8007fd0:	4a08      	ldr	r2, [pc, #32]	; (8007ff4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	601a      	str	r2, [r3, #0]
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2200      	movs	r2, #0
 8007fda:	605a      	str	r2, [r3, #4]
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2200      	movs	r2, #0
 8007fe0:	609a      	str	r2, [r3, #8]
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	60da      	str	r2, [r3, #12]
    }
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	4618      	mov	r0, r3
 8007fec:	3708      	adds	r7, #8
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bd80      	pop	{r7, pc}
 8007ff2:	bf00      	nop
 8007ff4:	0802c2d8 	.word	0x0802c2d8

08007ff8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
    Callback(dest_type* pObject, void (dest_type::*pmemfun_0)())
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b084      	sub	sp, #16
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	60f8      	str	r0, [r7, #12]
 8008000:	60b9      	str	r1, [r7, #8]
 8008002:	4639      	mov	r1, r7
 8008004:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_0)
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	4618      	mov	r0, r3
 800800c:	f7ff ffc8 	bl	8007fa0 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 8008010:	4a08      	ldr	r2, [pc, #32]	; (8008034 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	601a      	str	r2, [r3, #0]
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	68ba      	ldr	r2, [r7, #8]
 800801a:	605a      	str	r2, [r3, #4]
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	3308      	adds	r3, #8
 8008020:	463a      	mov	r2, r7
 8008022:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008026:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	4618      	mov	r0, r3
 800802e:	3710      	adds	r7, #16
 8008030:	46bd      	mov	sp, r7
 8008032:	bd80      	pop	{r7, pc}
 8008034:	0802c2d8 	.word	0x0802c2d8

08008038 <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 8008038:	b580      	push	{r7, lr}
 800803a:	b082      	sub	sp, #8
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	4618      	mov	r0, r3
 8008044:	f7ff fc8e 	bl	8007964 <_ZN8touchgfx10TransitionC1Ev>
 8008048:	4a03      	ldr	r2, [pc, #12]	; (8008058 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	601a      	str	r2, [r3, #0]
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	4618      	mov	r0, r3
 8008052:	3708      	adds	r7, #8
 8008054:	46bd      	mov	sp, r7
 8008056:	bd80      	pop	{r7, pc}
 8008058:	0802c8f0 	.word	0x0802c8f0

0800805c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800805c:	b590      	push	{r4, r7, lr}
 800805e:	b08f      	sub	sp, #60	; 0x3c
 8008060:	af00      	add	r7, sp, #0
 8008062:	60f8      	str	r0, [r7, #12]
 8008064:	60b9      	str	r1, [r7, #8]
 8008066:	607a      	str	r2, [r7, #4]
 8008068:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	689a      	ldr	r2, [r3, #8]
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	689b      	ldr	r3, [r3, #8]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	3320      	adds	r3, #32
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	4610      	mov	r0, r2
 800807a:	4798      	blx	r3
 800807c:	4603      	mov	r3, r0
 800807e:	f5b3 7fb8 	cmp.w	r3, #368	; 0x170
 8008082:	d205      	bcs.n	8008090 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 8008084:	4b7e      	ldr	r3, [pc, #504]	; (8008280 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 8008086:	4a7f      	ldr	r2, [pc, #508]	; (8008284 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8008088:	21a3      	movs	r1, #163	; 0xa3
 800808a:	487f      	ldr	r0, [pc, #508]	; (8008288 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800808c:	f020 fc00 	bl	8028890 <__assert_func>
 8008090:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	685a      	ldr	r2, [r3, #4]
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	685b      	ldr	r3, [r3, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	3320      	adds	r3, #32
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	4610      	mov	r0, r2
 80080a2:	4798      	blx	r3
 80080a4:	4603      	mov	r3, r0
 80080a6:	2b0f      	cmp	r3, #15
 80080a8:	d805      	bhi.n	80080b6 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 80080aa:	4b78      	ldr	r3, [pc, #480]	; (800828c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 80080ac:	4a75      	ldr	r2, [pc, #468]	; (8008284 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 80080ae:	21a4      	movs	r1, #164	; 0xa4
 80080b0:	4875      	ldr	r0, [pc, #468]	; (8008288 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 80080b2:	f020 fbed 	bl	8028890 <__assert_func>
 80080b6:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	68da      	ldr	r2, [r3, #12]
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	68db      	ldr	r3, [r3, #12]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	3320      	adds	r3, #32
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	4610      	mov	r0, r2
 80080c8:	4798      	blx	r3
 80080ca:	4603      	mov	r3, r0
 80080cc:	2b0b      	cmp	r3, #11
 80080ce:	d805      	bhi.n	80080dc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 80080d0:	4b6f      	ldr	r3, [pc, #444]	; (8008290 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x234>)
 80080d2:	4a6c      	ldr	r2, [pc, #432]	; (8008284 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 80080d4:	21a5      	movs	r1, #165	; 0xa5
 80080d6:	486c      	ldr	r0, [pc, #432]	; (8008288 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 80080d8:	f020 fbda 	bl	8028890 <__assert_func>
 80080dc:	bf00      	nop
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	627b      	str	r3, [r7, #36]	; 0x24
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 80080ea:	f015 fcc3 	bl	801da74 <_ZN8touchgfx11Application11getInstanceEv>
 80080ee:	4603      	mov	r3, r0
 80080f0:	4618      	mov	r0, r3
 80080f2:	f7ff fc29 	bl	8007948 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 80080f6:	6a3b      	ldr	r3, [r7, #32]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d008      	beq.n	8008110 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
        (*currentTrans)->tearDown();
 80080fe:	6a3b      	ldr	r3, [r7, #32]
 8008100:	681a      	ldr	r2, [r3, #0]
 8008102:	6a3b      	ldr	r3, [r7, #32]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	330c      	adds	r3, #12
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	4610      	mov	r0, r2
 800810e:	4798      	blx	r3
    if (*currentTrans)
 8008110:	6a3b      	ldr	r3, [r7, #32]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d007      	beq.n	8008128 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xcc>
        (*currentTrans)->~Transition();
 8008118:	6a3b      	ldr	r3, [r7, #32]
 800811a:	681a      	ldr	r2, [r3, #0]
 800811c:	6a3b      	ldr	r3, [r7, #32]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	4610      	mov	r0, r2
 8008126:	4798      	blx	r3
    if (*currentScreen)
 8008128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d008      	beq.n	8008142 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe6>
        (*currentScreen)->tearDownScreen();
 8008130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008132:	681a      	ldr	r2, [r3, #0]
 8008134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	3314      	adds	r3, #20
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	4610      	mov	r0, r2
 8008140:	4798      	blx	r3
    if (*currentPresenter)
 8008142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d008      	beq.n	800815c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x100>
        (*currentPresenter)->deactivate();
 800814a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800814c:	681a      	ldr	r2, [r3, #0]
 800814e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	3304      	adds	r3, #4
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	4610      	mov	r0, r2
 800815a:	4798      	blx	r3
    if (*currentScreen)
 800815c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d007      	beq.n	8008174 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x118>
        (*currentScreen)->~Screen();
 8008164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008166:	681a      	ldr	r2, [r3, #0]
 8008168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	4610      	mov	r0, r2
 8008172:	4798      	blx	r3
    if (*currentPresenter)
 8008174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d008      	beq.n	800818e <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
        (*currentPresenter)->~Presenter();
 800817c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800817e:	681a      	ldr	r2, [r3, #0]
 8008180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	3308      	adds	r3, #8
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	4610      	mov	r0, r2
 800818c:	4798      	blx	r3
}
 800818e:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	68db      	ldr	r3, [r3, #12]
 8008194:	2100      	movs	r1, #0
 8008196:	4618      	mov	r0, r3
 8008198:	f000 fab6 	bl	8008708 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 800819c:	4603      	mov	r3, r0
 800819e:	4619      	mov	r1, r3
 80081a0:	200c      	movs	r0, #12
 80081a2:	f7ff fb1f 	bl	80077e4 <_ZnwjPv>
 80081a6:	4604      	mov	r4, r0
 80081a8:	4620      	mov	r0, r4
 80081aa:	f7ff ff45 	bl	8008038 <_ZN8touchgfx12NoTransitionC1Ev>
 80081ae:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	689b      	ldr	r3, [r3, #8]
 80081b4:	2100      	movs	r1, #0
 80081b6:	4618      	mov	r0, r3
 80081b8:	f000 fab9 	bl	800872e <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>
 80081bc:	4603      	mov	r3, r0
 80081be:	4619      	mov	r1, r3
 80081c0:	f44f 70b8 	mov.w	r0, #368	; 0x170
 80081c4:	f7ff fb0e 	bl	80077e4 <_ZnwjPv>
 80081c8:	4604      	mov	r4, r0
 80081ca:	4620      	mov	r0, r4
 80081cc:	f002 f894 	bl	800a2f8 <_ZN11Screen1ViewC1Ev>
 80081d0:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	685b      	ldr	r3, [r3, #4]
 80081d6:	2100      	movs	r1, #0
 80081d8:	4618      	mov	r0, r3
 80081da:	f000 fabb 	bl	8008754 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>
 80081de:	4603      	mov	r3, r0
 80081e0:	4619      	mov	r1, r3
 80081e2:	2010      	movs	r0, #16
 80081e4:	f7ff fafe 	bl	80077e4 <_ZnwjPv>
 80081e8:	4604      	mov	r4, r0
 80081ea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80081ec:	4620      	mov	r0, r4
 80081ee:	f002 f82b 	bl	800a248 <_ZN16Screen1PresenterC1ER11Screen1View>
 80081f2:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80081f8:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 80081fa:	68bb      	ldr	r3, [r7, #8]
 80081fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80081fe:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008204:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 8008206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008208:	2b00      	cmp	r3, #0
 800820a:	d002      	beq.n	8008212 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b6>
 800820c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800820e:	3304      	adds	r3, #4
 8008210:	e000      	b.n	8008214 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b8>
 8008212:	2300      	movs	r3, #0
 8008214:	4619      	mov	r1, r3
 8008216:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8008218:	f7ff fc56 	bl	8007ac8 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800821c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800821e:	3304      	adds	r3, #4
 8008220:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008222:	4618      	mov	r0, r3
 8008224:	f7ff fd6e 	bl	8007d04 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 8008228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800822a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800822c:	4618      	mov	r0, r3
 800822e:	f000 faa4 	bl	800877a <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>
 8008232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008234:	61fb      	str	r3, [r7, #28]
 8008236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008238:	61bb      	str	r3, [r7, #24]
 800823a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800823c:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 800823e:	69fb      	ldr	r3, [r7, #28]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	330c      	adds	r3, #12
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	69f8      	ldr	r0, [r7, #28]
 8008248:	4798      	blx	r3
    newPresenter->activate();
 800824a:	69bb      	ldr	r3, [r7, #24]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	69b8      	ldr	r0, [r7, #24]
 8008252:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8008254:	6979      	ldr	r1, [r7, #20]
 8008256:	69f8      	ldr	r0, [r7, #28]
 8008258:	f017 f8e6 	bl	801f428 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800825c:	697b      	ldr	r3, [r7, #20]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	3310      	adds	r3, #16
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	6978      	ldr	r0, [r7, #20]
 8008266:	4798      	blx	r3
    newTransition->invalidate();
 8008268:	697b      	ldr	r3, [r7, #20]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	3314      	adds	r3, #20
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	6978      	ldr	r0, [r7, #20]
 8008272:	4798      	blx	r3
}
 8008274:	bf00      	nop

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 8008276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8008278:	4618      	mov	r0, r3
 800827a:	373c      	adds	r7, #60	; 0x3c
 800827c:	46bd      	mov	sp, r7
 800827e:	bd90      	pop	{r4, r7, pc}
 8008280:	0802b63c 	.word	0x0802b63c
 8008284:	0802b6cc 	.word	0x0802b6cc
 8008288:	0802b7d0 	.word	0x0802b7d0
 800828c:	0802b818 	.word	0x0802b818
 8008290:	0802b8bc 	.word	0x0802b8bc

08008294 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15BlockTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8008294:	b590      	push	{r4, r7, lr}
 8008296:	b08f      	sub	sp, #60	; 0x3c
 8008298:	af00      	add	r7, sp, #0
 800829a:	60f8      	str	r0, [r7, #12]
 800829c:	60b9      	str	r1, [r7, #8]
 800829e:	607a      	str	r2, [r7, #4]
 80082a0:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	689a      	ldr	r2, [r3, #8]
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	689b      	ldr	r3, [r3, #8]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	3320      	adds	r3, #32
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	4610      	mov	r0, r2
 80082b2:	4798      	blx	r3
 80082b4:	4603      	mov	r3, r0
 80082b6:	f5b3 7fb8 	cmp.w	r3, #368	; 0x170
 80082ba:	d205      	bcs.n	80082c8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15BlockTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 80082bc:	4b7e      	ldr	r3, [pc, #504]	; (80084b8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15BlockTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 80082be:	4a7f      	ldr	r2, [pc, #508]	; (80084bc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15BlockTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 80082c0:	21a3      	movs	r1, #163	; 0xa3
 80082c2:	487f      	ldr	r0, [pc, #508]	; (80084c0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15BlockTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 80082c4:	f020 fae4 	bl	8028890 <__assert_func>
 80082c8:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	685a      	ldr	r2, [r3, #4]
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	685b      	ldr	r3, [r3, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	3320      	adds	r3, #32
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	4610      	mov	r0, r2
 80082da:	4798      	blx	r3
 80082dc:	4603      	mov	r3, r0
 80082de:	2b0f      	cmp	r3, #15
 80082e0:	d805      	bhi.n	80082ee <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15BlockTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 80082e2:	4b78      	ldr	r3, [pc, #480]	; (80084c4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15BlockTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 80082e4:	4a75      	ldr	r2, [pc, #468]	; (80084bc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15BlockTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 80082e6:	21a4      	movs	r1, #164	; 0xa4
 80082e8:	4875      	ldr	r0, [pc, #468]	; (80084c0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15BlockTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 80082ea:	f020 fad1 	bl	8028890 <__assert_func>
 80082ee:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	68da      	ldr	r2, [r3, #12]
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	68db      	ldr	r3, [r3, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	3320      	adds	r3, #32
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	4610      	mov	r0, r2
 8008300:	4798      	blx	r3
 8008302:	4603      	mov	r3, r0
 8008304:	2b13      	cmp	r3, #19
 8008306:	d805      	bhi.n	8008314 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15BlockTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 8008308:	4b6f      	ldr	r3, [pc, #444]	; (80084c8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15BlockTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x234>)
 800830a:	4a6c      	ldr	r2, [pc, #432]	; (80084bc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15BlockTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800830c:	21a5      	movs	r1, #165	; 0xa5
 800830e:	486c      	ldr	r0, [pc, #432]	; (80084c0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15BlockTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8008310:	f020 fabe 	bl	8028890 <__assert_func>
 8008314:	bf00      	nop
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	62bb      	str	r3, [r7, #40]	; 0x28
 800831a:	68bb      	ldr	r3, [r7, #8]
 800831c:	627b      	str	r3, [r7, #36]	; 0x24
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 8008322:	f015 fba7 	bl	801da74 <_ZN8touchgfx11Application11getInstanceEv>
 8008326:	4603      	mov	r3, r0
 8008328:	4618      	mov	r0, r3
 800832a:	f7ff fb0d 	bl	8007948 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800832e:	6a3b      	ldr	r3, [r7, #32]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d008      	beq.n	8008348 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15BlockTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
        (*currentTrans)->tearDown();
 8008336:	6a3b      	ldr	r3, [r7, #32]
 8008338:	681a      	ldr	r2, [r3, #0]
 800833a:	6a3b      	ldr	r3, [r7, #32]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	330c      	adds	r3, #12
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	4610      	mov	r0, r2
 8008346:	4798      	blx	r3
    if (*currentTrans)
 8008348:	6a3b      	ldr	r3, [r7, #32]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d007      	beq.n	8008360 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15BlockTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xcc>
        (*currentTrans)->~Transition();
 8008350:	6a3b      	ldr	r3, [r7, #32]
 8008352:	681a      	ldr	r2, [r3, #0]
 8008354:	6a3b      	ldr	r3, [r7, #32]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	4610      	mov	r0, r2
 800835e:	4798      	blx	r3
    if (*currentScreen)
 8008360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d008      	beq.n	800837a <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15BlockTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe6>
        (*currentScreen)->tearDownScreen();
 8008368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800836a:	681a      	ldr	r2, [r3, #0]
 800836c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	3314      	adds	r3, #20
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	4610      	mov	r0, r2
 8008378:	4798      	blx	r3
    if (*currentPresenter)
 800837a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d008      	beq.n	8008394 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15BlockTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x100>
        (*currentPresenter)->deactivate();
 8008382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008384:	681a      	ldr	r2, [r3, #0]
 8008386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	3304      	adds	r3, #4
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	4610      	mov	r0, r2
 8008392:	4798      	blx	r3
    if (*currentScreen)
 8008394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d007      	beq.n	80083ac <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15BlockTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x118>
        (*currentScreen)->~Screen();
 800839c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800839e:	681a      	ldr	r2, [r3, #0]
 80083a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	4610      	mov	r0, r2
 80083aa:	4798      	blx	r3
    if (*currentPresenter)
 80083ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d008      	beq.n	80083c6 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15BlockTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
        (*currentPresenter)->~Presenter();
 80083b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083b6:	681a      	ldr	r2, [r3, #0]
 80083b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	3308      	adds	r3, #8
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	4610      	mov	r0, r2
 80083c4:	4798      	blx	r3
}
 80083c6:	bf00      	nop
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	68db      	ldr	r3, [r3, #12]
 80083cc:	2100      	movs	r1, #0
 80083ce:	4618      	mov	r0, r3
 80083d0:	f000 f9e1 	bl	8008796 <_ZN8touchgfx17AbstractPartition2atINS_15BlockTransitionEEERT_t>
 80083d4:	4603      	mov	r3, r0
 80083d6:	4619      	mov	r1, r3
 80083d8:	2014      	movs	r0, #20
 80083da:	f7ff fa03 	bl	80077e4 <_ZnwjPv>
 80083de:	4604      	mov	r4, r0
 80083e0:	4620      	mov	r0, r4
 80083e2:	f7ff fb8d 	bl	8007b00 <_ZN8touchgfx15BlockTransitionC1Ev>
 80083e6:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	689b      	ldr	r3, [r3, #8]
 80083ec:	2100      	movs	r1, #0
 80083ee:	4618      	mov	r0, r3
 80083f0:	f000 f99d 	bl	800872e <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>
 80083f4:	4603      	mov	r3, r0
 80083f6:	4619      	mov	r1, r3
 80083f8:	f44f 70b8 	mov.w	r0, #368	; 0x170
 80083fc:	f7ff f9f2 	bl	80077e4 <_ZnwjPv>
 8008400:	4604      	mov	r4, r0
 8008402:	4620      	mov	r0, r4
 8008404:	f001 ff78 	bl	800a2f8 <_ZN11Screen1ViewC1Ev>
 8008408:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	685b      	ldr	r3, [r3, #4]
 800840e:	2100      	movs	r1, #0
 8008410:	4618      	mov	r0, r3
 8008412:	f000 f99f 	bl	8008754 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>
 8008416:	4603      	mov	r3, r0
 8008418:	4619      	mov	r1, r3
 800841a:	2010      	movs	r0, #16
 800841c:	f7ff f9e2 	bl	80077e4 <_ZnwjPv>
 8008420:	4604      	mov	r4, r0
 8008422:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008424:	4620      	mov	r0, r4
 8008426:	f001 ff0f 	bl	800a248 <_ZN16Screen1PresenterC1ER11Screen1View>
 800842a:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008430:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 8008432:	68bb      	ldr	r3, [r7, #8]
 8008434:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008436:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800843c:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800843e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008440:	2b00      	cmp	r3, #0
 8008442:	d002      	beq.n	800844a <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15BlockTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b6>
 8008444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008446:	3304      	adds	r3, #4
 8008448:	e000      	b.n	800844c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15BlockTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b8>
 800844a:	2300      	movs	r3, #0
 800844c:	4619      	mov	r1, r3
 800844e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8008450:	f7ff fb3a 	bl	8007ac8 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8008454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008456:	3304      	adds	r3, #4
 8008458:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800845a:	4618      	mov	r0, r3
 800845c:	f7ff fc52 	bl	8007d04 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 8008460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008462:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008464:	4618      	mov	r0, r3
 8008466:	f000 f988 	bl	800877a <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>
 800846a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800846c:	61fb      	str	r3, [r7, #28]
 800846e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008470:	61bb      	str	r3, [r7, #24]
 8008472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008474:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 8008476:	69fb      	ldr	r3, [r7, #28]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	330c      	adds	r3, #12
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	69f8      	ldr	r0, [r7, #28]
 8008480:	4798      	blx	r3
    newPresenter->activate();
 8008482:	69bb      	ldr	r3, [r7, #24]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	69b8      	ldr	r0, [r7, #24]
 800848a:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800848c:	6979      	ldr	r1, [r7, #20]
 800848e:	69f8      	ldr	r0, [r7, #28]
 8008490:	f016 ffca 	bl	801f428 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8008494:	697b      	ldr	r3, [r7, #20]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	3310      	adds	r3, #16
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	6978      	ldr	r0, [r7, #20]
 800849e:	4798      	blx	r3
    newTransition->invalidate();
 80084a0:	697b      	ldr	r3, [r7, #20]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	3314      	adds	r3, #20
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	6978      	ldr	r0, [r7, #20]
 80084aa:	4798      	blx	r3
}
 80084ac:	bf00      	nop
    return newPresenter;
 80084ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80084b0:	4618      	mov	r0, r3
 80084b2:	373c      	adds	r7, #60	; 0x3c
 80084b4:	46bd      	mov	sp, r7
 80084b6:	bd90      	pop	{r4, r7, pc}
 80084b8:	0802b63c 	.word	0x0802b63c
 80084bc:	0802b960 	.word	0x0802b960
 80084c0:	0802b7d0 	.word	0x0802b7d0
 80084c4:	0802b818 	.word	0x0802b818
 80084c8:	0802b8bc 	.word	0x0802b8bc

080084cc <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 80084cc:	b590      	push	{r4, r7, lr}
 80084ce:	b08f      	sub	sp, #60	; 0x3c
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	60f8      	str	r0, [r7, #12]
 80084d4:	60b9      	str	r1, [r7, #8]
 80084d6:	607a      	str	r2, [r7, #4]
 80084d8:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	689a      	ldr	r2, [r3, #8]
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	689b      	ldr	r3, [r3, #8]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	3320      	adds	r3, #32
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	4610      	mov	r0, r2
 80084ea:	4798      	blx	r3
 80084ec:	4603      	mov	r3, r0
 80084ee:	f5b3 7fb8 	cmp.w	r3, #368	; 0x170
 80084f2:	d205      	bcs.n	8008500 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 80084f4:	4b7f      	ldr	r3, [pc, #508]	; (80086f4 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 80084f6:	4a80      	ldr	r2, [pc, #512]	; (80086f8 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 80084f8:	21a3      	movs	r1, #163	; 0xa3
 80084fa:	4880      	ldr	r0, [pc, #512]	; (80086fc <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 80084fc:	f020 f9c8 	bl	8028890 <__assert_func>
 8008500:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	685a      	ldr	r2, [r3, #4]
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	685b      	ldr	r3, [r3, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	3320      	adds	r3, #32
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	4610      	mov	r0, r2
 8008512:	4798      	blx	r3
 8008514:	4603      	mov	r3, r0
 8008516:	2b0f      	cmp	r3, #15
 8008518:	d805      	bhi.n	8008526 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 800851a:	4b79      	ldr	r3, [pc, #484]	; (8008700 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x234>)
 800851c:	4a76      	ldr	r2, [pc, #472]	; (80086f8 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800851e:	21a4      	movs	r1, #164	; 0xa4
 8008520:	4876      	ldr	r0, [pc, #472]	; (80086fc <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 8008522:	f020 f9b5 	bl	8028890 <__assert_func>
 8008526:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	68da      	ldr	r2, [r3, #12]
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	68db      	ldr	r3, [r3, #12]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	3320      	adds	r3, #32
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	4610      	mov	r0, r2
 8008538:	4798      	blx	r3
 800853a:	4603      	mov	r3, r0
 800853c:	2b37      	cmp	r3, #55	; 0x37
 800853e:	d805      	bhi.n	800854c <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 8008540:	4b70      	ldr	r3, [pc, #448]	; (8008704 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x238>)
 8008542:	4a6d      	ldr	r2, [pc, #436]	; (80086f8 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8008544:	21a5      	movs	r1, #165	; 0xa5
 8008546:	486d      	ldr	r0, [pc, #436]	; (80086fc <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 8008548:	f020 f9a2 	bl	8028890 <__assert_func>
 800854c:	bf00      	nop
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	62bb      	str	r3, [r7, #40]	; 0x28
 8008552:	68bb      	ldr	r3, [r7, #8]
 8008554:	627b      	str	r3, [r7, #36]	; 0x24
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800855a:	f015 fa8b 	bl	801da74 <_ZN8touchgfx11Application11getInstanceEv>
 800855e:	4603      	mov	r3, r0
 8008560:	4618      	mov	r0, r3
 8008562:	f7ff f9f1 	bl	8007948 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 8008566:	6a3b      	ldr	r3, [r7, #32]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d008      	beq.n	8008580 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
        (*currentTrans)->tearDown();
 800856e:	6a3b      	ldr	r3, [r7, #32]
 8008570:	681a      	ldr	r2, [r3, #0]
 8008572:	6a3b      	ldr	r3, [r7, #32]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	330c      	adds	r3, #12
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	4610      	mov	r0, r2
 800857e:	4798      	blx	r3
    if (*currentTrans)
 8008580:	6a3b      	ldr	r3, [r7, #32]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d007      	beq.n	8008598 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xcc>
        (*currentTrans)->~Transition();
 8008588:	6a3b      	ldr	r3, [r7, #32]
 800858a:	681a      	ldr	r2, [r3, #0]
 800858c:	6a3b      	ldr	r3, [r7, #32]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	4610      	mov	r0, r2
 8008596:	4798      	blx	r3
    if (*currentScreen)
 8008598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d008      	beq.n	80085b2 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe6>
        (*currentScreen)->tearDownScreen();
 80085a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085a2:	681a      	ldr	r2, [r3, #0]
 80085a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	3314      	adds	r3, #20
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	4610      	mov	r0, r2
 80085b0:	4798      	blx	r3
    if (*currentPresenter)
 80085b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d008      	beq.n	80085cc <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x100>
        (*currentPresenter)->deactivate();
 80085ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085bc:	681a      	ldr	r2, [r3, #0]
 80085be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	3304      	adds	r3, #4
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	4610      	mov	r0, r2
 80085ca:	4798      	blx	r3
    if (*currentScreen)
 80085cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d007      	beq.n	80085e4 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x118>
        (*currentScreen)->~Screen();
 80085d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085d6:	681a      	ldr	r2, [r3, #0]
 80085d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	4610      	mov	r0, r2
 80085e2:	4798      	blx	r3
    if (*currentPresenter)
 80085e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d008      	beq.n	80085fe <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
        (*currentPresenter)->~Presenter();
 80085ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ee:	681a      	ldr	r2, [r3, #0]
 80085f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	3308      	adds	r3, #8
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	4610      	mov	r0, r2
 80085fc:	4798      	blx	r3
}
 80085fe:	bf00      	nop
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	68db      	ldr	r3, [r3, #12]
 8008604:	2100      	movs	r1, #0
 8008606:	4618      	mov	r0, r3
 8008608:	f000 f8d8 	bl	80087bc <_ZN8touchgfx17AbstractPartition2atINS_15CoverTransitionILNS_9DirectionE2EEEEERT_t>
 800860c:	4603      	mov	r3, r0
 800860e:	4619      	mov	r1, r3
 8008610:	2038      	movs	r0, #56	; 0x38
 8008612:	f7ff f8e7 	bl	80077e4 <_ZnwjPv>
 8008616:	4604      	mov	r4, r0
 8008618:	2114      	movs	r1, #20
 800861a:	4620      	mov	r0, r4
 800861c:	f000 f916 	bl	800884c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh>
 8008620:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	689b      	ldr	r3, [r3, #8]
 8008626:	2100      	movs	r1, #0
 8008628:	4618      	mov	r0, r3
 800862a:	f000 f953 	bl	80088d4 <_ZN8touchgfx17AbstractPartition2atI11Screen2ViewEERT_t>
 800862e:	4603      	mov	r3, r0
 8008630:	4619      	mov	r1, r3
 8008632:	f44f 70b8 	mov.w	r0, #368	; 0x170
 8008636:	f7ff f8d5 	bl	80077e4 <_ZnwjPv>
 800863a:	4604      	mov	r4, r0
 800863c:	4620      	mov	r0, r4
 800863e:	f001 ff11 	bl	800a464 <_ZN11Screen2ViewC1Ev>
 8008642:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	685b      	ldr	r3, [r3, #4]
 8008648:	2100      	movs	r1, #0
 800864a:	4618      	mov	r0, r3
 800864c:	f000 f955 	bl	80088fa <_ZN8touchgfx17AbstractPartition2atI16Screen2PresenterEERT_t>
 8008650:	4603      	mov	r3, r0
 8008652:	4619      	mov	r1, r3
 8008654:	2010      	movs	r0, #16
 8008656:	f7ff f8c5 	bl	80077e4 <_ZnwjPv>
 800865a:	4604      	mov	r4, r0
 800865c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800865e:	4620      	mov	r0, r4
 8008660:	f001 fea8 	bl	800a3b4 <_ZN16Screen2PresenterC1ER11Screen2View>
 8008664:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800866a:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008670:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008676:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 8008678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800867a:	2b00      	cmp	r3, #0
 800867c:	d002      	beq.n	8008684 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b8>
 800867e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008680:	3304      	adds	r3, #4
 8008682:	e000      	b.n	8008686 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1ba>
 8008684:	2300      	movs	r3, #0
 8008686:	4619      	mov	r1, r3
 8008688:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800868a:	f7ff fa1d 	bl	8007ac8 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800868e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008690:	3304      	adds	r3, #4
 8008692:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008694:	4618      	mov	r0, r3
 8008696:	f7ff fb35 	bl	8007d04 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800869a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800869c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800869e:	4618      	mov	r0, r3
 80086a0:	f000 f93e 	bl	8008920 <_ZN8touchgfx4ViewI16Screen2PresenterE4bindERS1_>
 80086a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086a6:	61fb      	str	r3, [r7, #28]
 80086a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086aa:	61bb      	str	r3, [r7, #24]
 80086ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086ae:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 80086b0:	69fb      	ldr	r3, [r7, #28]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	330c      	adds	r3, #12
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	69f8      	ldr	r0, [r7, #28]
 80086ba:	4798      	blx	r3
    newPresenter->activate();
 80086bc:	69bb      	ldr	r3, [r7, #24]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	69b8      	ldr	r0, [r7, #24]
 80086c4:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 80086c6:	6979      	ldr	r1, [r7, #20]
 80086c8:	69f8      	ldr	r0, [r7, #28]
 80086ca:	f016 fead 	bl	801f428 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 80086ce:	697b      	ldr	r3, [r7, #20]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	3310      	adds	r3, #16
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	6978      	ldr	r0, [r7, #20]
 80086d8:	4798      	blx	r3
    newTransition->invalidate();
 80086da:	697b      	ldr	r3, [r7, #20]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	3314      	adds	r3, #20
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	6978      	ldr	r0, [r7, #20]
 80086e4:	4798      	blx	r3
}
 80086e6:	bf00      	nop
    return newPresenter;
 80086e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80086ea:	4618      	mov	r0, r3
 80086ec:	373c      	adds	r7, #60	; 0x3c
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bd90      	pop	{r4, r7, pc}
 80086f2:	bf00      	nop
 80086f4:	0802b63c 	.word	0x0802b63c
 80086f8:	0802ba68 	.word	0x0802ba68
 80086fc:	0802b7d0 	.word	0x0802b7d0
 8008700:	0802b818 	.word	0x0802b818
 8008704:	0802b8bc 	.word	0x0802b8bc

08008708 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 8008708:	b580      	push	{r7, lr}
 800870a:	b082      	sub	sp, #8
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
 8008710:	460b      	mov	r3, r1
 8008712:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	3324      	adds	r3, #36	; 0x24
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	887a      	ldrh	r2, [r7, #2]
 800871e:	4611      	mov	r1, r2
 8008720:	6878      	ldr	r0, [r7, #4]
 8008722:	4798      	blx	r3
 8008724:	4603      	mov	r3, r0
    }
 8008726:	4618      	mov	r0, r3
 8008728:	3708      	adds	r7, #8
 800872a:	46bd      	mov	sp, r7
 800872c:	bd80      	pop	{r7, pc}

0800872e <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>:
    T& at(const uint16_t index)
 800872e:	b580      	push	{r7, lr}
 8008730:	b082      	sub	sp, #8
 8008732:	af00      	add	r7, sp, #0
 8008734:	6078      	str	r0, [r7, #4]
 8008736:	460b      	mov	r3, r1
 8008738:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	3324      	adds	r3, #36	; 0x24
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	887a      	ldrh	r2, [r7, #2]
 8008744:	4611      	mov	r1, r2
 8008746:	6878      	ldr	r0, [r7, #4]
 8008748:	4798      	blx	r3
 800874a:	4603      	mov	r3, r0
    }
 800874c:	4618      	mov	r0, r3
 800874e:	3708      	adds	r7, #8
 8008750:	46bd      	mov	sp, r7
 8008752:	bd80      	pop	{r7, pc}

08008754 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>:
    T& at(const uint16_t index)
 8008754:	b580      	push	{r7, lr}
 8008756:	b082      	sub	sp, #8
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
 800875c:	460b      	mov	r3, r1
 800875e:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	3324      	adds	r3, #36	; 0x24
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	887a      	ldrh	r2, [r7, #2]
 800876a:	4611      	mov	r1, r2
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	4798      	blx	r3
 8008770:	4603      	mov	r3, r0
    }
 8008772:	4618      	mov	r0, r3
 8008774:	3708      	adds	r7, #8
 8008776:	46bd      	mov	sp, r7
 8008778:	bd80      	pop	{r7, pc}

0800877a <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This function
     * is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
 800877a:	b480      	push	{r7}
 800877c:	b083      	sub	sp, #12
 800877e:	af00      	add	r7, sp, #0
 8008780:	6078      	str	r0, [r7, #4]
 8008782:	6039      	str	r1, [r7, #0]
    {
        presenter = &newPresenter;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	683a      	ldr	r2, [r7, #0]
 8008788:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800878a:	bf00      	nop
 800878c:	370c      	adds	r7, #12
 800878e:	46bd      	mov	sp, r7
 8008790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008794:	4770      	bx	lr

08008796 <_ZN8touchgfx17AbstractPartition2atINS_15BlockTransitionEEERT_t>:
    T& at(const uint16_t index)
 8008796:	b580      	push	{r7, lr}
 8008798:	b082      	sub	sp, #8
 800879a:	af00      	add	r7, sp, #0
 800879c:	6078      	str	r0, [r7, #4]
 800879e:	460b      	mov	r3, r1
 80087a0:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	3324      	adds	r3, #36	; 0x24
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	887a      	ldrh	r2, [r7, #2]
 80087ac:	4611      	mov	r1, r2
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	4798      	blx	r3
 80087b2:	4603      	mov	r3, r0
    }
 80087b4:	4618      	mov	r0, r3
 80087b6:	3708      	adds	r7, #8
 80087b8:	46bd      	mov	sp, r7
 80087ba:	bd80      	pop	{r7, pc}

080087bc <_ZN8touchgfx17AbstractPartition2atINS_15CoverTransitionILNS_9DirectionE2EEEEERT_t>:
    T& at(const uint16_t index)
 80087bc:	b580      	push	{r7, lr}
 80087be:	b082      	sub	sp, #8
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
 80087c4:	460b      	mov	r3, r1
 80087c6:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	3324      	adds	r3, #36	; 0x24
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	887a      	ldrh	r2, [r7, #2]
 80087d2:	4611      	mov	r1, r2
 80087d4:	6878      	ldr	r0, [r7, #4]
 80087d6:	4798      	blx	r3
 80087d8:	4603      	mov	r3, r0
    }
 80087da:	4618      	mov	r0, r3
 80087dc:	3708      	adds	r7, #8
 80087de:	46bd      	mov	sp, r7
 80087e0:	bd80      	pop	{r7, pc}
	...

080087e4 <_ZN8touchgfx10Transition13FullSolidRectC1Ev>:
    class FullSolidRect : public Widget
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b082      	sub	sp, #8
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	4618      	mov	r0, r3
 80087f0:	f7ff fa96 	bl	8007d20 <_ZN8touchgfx6WidgetC1Ev>
 80087f4:	4a03      	ldr	r2, [pc, #12]	; (8008804 <_ZN8touchgfx10Transition13FullSolidRectC1Ev+0x20>)
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	601a      	str	r2, [r3, #0]
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	4618      	mov	r0, r3
 80087fe:	3708      	adds	r7, #8
 8008800:	46bd      	mov	sp, r7
 8008802:	bd80      	pop	{r7, pc}
 8008804:	0802c938 	.word	0x0802c938

08008808 <_ZN8touchgfx10Transition13FullSolidRectD1Ev>:
 8008808:	b580      	push	{r7, lr}
 800880a:	b082      	sub	sp, #8
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
 8008810:	4a05      	ldr	r2, [pc, #20]	; (8008828 <_ZN8touchgfx10Transition13FullSolidRectD1Ev+0x20>)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	601a      	str	r2, [r3, #0]
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	4618      	mov	r0, r3
 800881a:	f7fc ff73 	bl	8005704 <_ZN8touchgfx6WidgetD1Ev>
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	4618      	mov	r0, r3
 8008822:	3708      	adds	r7, #8
 8008824:	46bd      	mov	sp, r7
 8008826:	bd80      	pop	{r7, pc}
 8008828:	0802c938 	.word	0x0802c938

0800882c <_ZN8touchgfx10Transition13FullSolidRectD0Ev>:
 800882c:	b580      	push	{r7, lr}
 800882e:	b082      	sub	sp, #8
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
 8008834:	6878      	ldr	r0, [r7, #4]
 8008836:	f7ff ffe7 	bl	8008808 <_ZN8touchgfx10Transition13FullSolidRectD1Ev>
 800883a:	2128      	movs	r1, #40	; 0x28
 800883c:	6878      	ldr	r0, [r7, #4]
 800883e:	f01f fff8 	bl	8028832 <_ZdlPvj>
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	4618      	mov	r0, r3
 8008846:	3708      	adds	r7, #8
 8008848:	46bd      	mov	sp, r7
 800884a:	bd80      	pop	{r7, pc}

0800884c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh>:
    /**
     * Initializes a new instance of the CoverTransition class.
     *
     * @param  transitionSteps (Optional) Number of steps in the transition animation.
     */
    CoverTransition(const uint8_t transitionSteps = 20)
 800884c:	b580      	push	{r7, lr}
 800884e:	b084      	sub	sp, #16
 8008850:	af02      	add	r7, sp, #8
 8008852:	6078      	str	r0, [r7, #4]
 8008854:	460b      	mov	r3, r1
 8008856:	70fb      	strb	r3, [r7, #3]
        : Transition(),
          animationSteps(transitionSteps),
          animationCounter(0),
          calculatedValue(0),
          solid()
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	4618      	mov	r0, r3
 800885c:	f7ff f882 	bl	8007964 <_ZN8touchgfx10TransitionC1Ev>
 8008860:	4a19      	ldr	r2, [pc, #100]	; (80088c8 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0x7c>)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	601a      	str	r2, [r3, #0]
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	78fa      	ldrb	r2, [r7, #3]
 800886a:	725a      	strb	r2, [r3, #9]
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2200      	movs	r2, #0
 8008870:	729a      	strb	r2, [r3, #10]
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2200      	movs	r2, #0
 8008876:	81da      	strh	r2, [r3, #14]
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	3310      	adds	r3, #16
 800887c:	2228      	movs	r2, #40	; 0x28
 800887e:	2100      	movs	r1, #0
 8008880:	4618      	mov	r0, r3
 8008882:	f020 f895 	bl	80289b0 <memset>
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	3310      	adds	r3, #16
 800888a:	4618      	mov	r0, r3
 800888c:	f7ff ffaa 	bl	80087e4 <_ZN8touchgfx10Transition13FullSolidRectC1Ev>
    {
        switch (templateDirection)
        {
        case EAST:
            targetValue = -HAL::DISPLAY_WIDTH;
 8008890:	4b0e      	ldr	r3, [pc, #56]	; (80088cc <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0x80>)
 8008892:	881b      	ldrh	r3, [r3, #0]
 8008894:	425b      	negs	r3, r3
 8008896:	b29b      	uxth	r3, r3
 8008898:	b21a      	sxth	r2, r3
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	819a      	strh	r2, [r3, #12]
            break;
 800889e:	bf00      	nop
            // Nothing to do here
            break;
        }

        // Ensure that the solid area covers the entire screen
        solid.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	f103 0010 	add.w	r0, r3, #16
 80088a6:	4b09      	ldr	r3, [pc, #36]	; (80088cc <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0x80>)
 80088a8:	881b      	ldrh	r3, [r3, #0]
 80088aa:	b21a      	sxth	r2, r3
 80088ac:	4b08      	ldr	r3, [pc, #32]	; (80088d0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0x84>)
 80088ae:	881b      	ldrh	r3, [r3, #0]
 80088b0:	b21b      	sxth	r3, r3
 80088b2:	9300      	str	r3, [sp, #0]
 80088b4:	4613      	mov	r3, r2
 80088b6:	2200      	movs	r2, #0
 80088b8:	2100      	movs	r1, #0
 80088ba:	f7fe ffdb 	bl	8007874 <_ZN8touchgfx8Drawable11setPositionEssss>
    }
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	4618      	mov	r0, r3
 80088c2:	3708      	adds	r7, #8
 80088c4:	46bd      	mov	sp, r7
 80088c6:	bd80      	pop	{r7, pc}
 80088c8:	0802c8a8 	.word	0x0802c8a8
 80088cc:	24026234 	.word	0x24026234
 80088d0:	24026236 	.word	0x24026236

080088d4 <_ZN8touchgfx17AbstractPartition2atI11Screen2ViewEERT_t>:
    T& at(const uint16_t index)
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b082      	sub	sp, #8
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
 80088dc:	460b      	mov	r3, r1
 80088de:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	3324      	adds	r3, #36	; 0x24
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	887a      	ldrh	r2, [r7, #2]
 80088ea:	4611      	mov	r1, r2
 80088ec:	6878      	ldr	r0, [r7, #4]
 80088ee:	4798      	blx	r3
 80088f0:	4603      	mov	r3, r0
    }
 80088f2:	4618      	mov	r0, r3
 80088f4:	3708      	adds	r7, #8
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd80      	pop	{r7, pc}

080088fa <_ZN8touchgfx17AbstractPartition2atI16Screen2PresenterEERT_t>:
    T& at(const uint16_t index)
 80088fa:	b580      	push	{r7, lr}
 80088fc:	b082      	sub	sp, #8
 80088fe:	af00      	add	r7, sp, #0
 8008900:	6078      	str	r0, [r7, #4]
 8008902:	460b      	mov	r3, r1
 8008904:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	3324      	adds	r3, #36	; 0x24
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	887a      	ldrh	r2, [r7, #2]
 8008910:	4611      	mov	r1, r2
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	4798      	blx	r3
 8008916:	4603      	mov	r3, r0
    }
 8008918:	4618      	mov	r0, r3
 800891a:	3708      	adds	r7, #8
 800891c:	46bd      	mov	sp, r7
 800891e:	bd80      	pop	{r7, pc}

08008920 <_ZN8touchgfx4ViewI16Screen2PresenterE4bindERS1_>:
    void bind(T& newPresenter)
 8008920:	b480      	push	{r7}
 8008922:	b083      	sub	sp, #12
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
 8008928:	6039      	str	r1, [r7, #0]
        presenter = &newPresenter;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	683a      	ldr	r2, [r7, #0]
 800892e:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8008930:	bf00      	nop
 8008932:	370c      	adds	r7, #12
 8008934:	46bd      	mov	sp, r7
 8008936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893a:	4770      	bx	lr

0800893c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EED1Ev>:
class CoverTransition : public Transition
 800893c:	b580      	push	{r7, lr}
 800893e:	b082      	sub	sp, #8
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
 8008944:	4a08      	ldr	r2, [pc, #32]	; (8008968 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EED1Ev+0x2c>)
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	601a      	str	r2, [r3, #0]
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	3310      	adds	r3, #16
 800894e:	4618      	mov	r0, r3
 8008950:	f7ff ff5a 	bl	8008808 <_ZN8touchgfx10Transition13FullSolidRectD1Ev>
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	4618      	mov	r0, r3
 8008958:	f7ff f81a 	bl	8007990 <_ZN8touchgfx10TransitionD1Ev>
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	4618      	mov	r0, r3
 8008960:	3708      	adds	r7, #8
 8008962:	46bd      	mov	sp, r7
 8008964:	bd80      	pop	{r7, pc}
 8008966:	bf00      	nop
 8008968:	0802c8a8 	.word	0x0802c8a8

0800896c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EED0Ev>:
 800896c:	b580      	push	{r7, lr}
 800896e:	b082      	sub	sp, #8
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	f7ff ffe1 	bl	800893c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EED1Ev>
 800897a:	2138      	movs	r1, #56	; 0x38
 800897c:	6878      	ldr	r0, [r7, #4]
 800897e:	f01f ff58 	bl	8028832 <_ZdlPvj>
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	4618      	mov	r0, r3
 8008986:	3708      	adds	r7, #8
 8008988:	46bd      	mov	sp, r7
 800898a:	bd80      	pop	{r7, pc}

0800898c <_ZN8touchgfx15BlockTransitionD1Ev>:
class BlockTransition : public Transition
 800898c:	b580      	push	{r7, lr}
 800898e:	b082      	sub	sp, #8
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
 8008994:	4a05      	ldr	r2, [pc, #20]	; (80089ac <_ZN8touchgfx15BlockTransitionD1Ev+0x20>)
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	601a      	str	r2, [r3, #0]
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	4618      	mov	r0, r3
 800899e:	f7fe fff7 	bl	8007990 <_ZN8touchgfx10TransitionD1Ev>
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	4618      	mov	r0, r3
 80089a6:	3708      	adds	r7, #8
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd80      	pop	{r7, pc}
 80089ac:	0802c8cc 	.word	0x0802c8cc

080089b0 <_ZN8touchgfx15BlockTransitionD0Ev>:
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b082      	sub	sp, #8
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
 80089b8:	6878      	ldr	r0, [r7, #4]
 80089ba:	f7ff ffe7 	bl	800898c <_ZN8touchgfx15BlockTransitionD1Ev>
 80089be:	2114      	movs	r1, #20
 80089c0:	6878      	ldr	r0, [r7, #4]
 80089c2:	f01f ff36 	bl	8028832 <_ZdlPvj>
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	4618      	mov	r0, r3
 80089ca:	3708      	adds	r7, #8
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bd80      	pop	{r7, pc}

080089d0 <_ZN8touchgfx12NoTransitionD1Ev>:
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b082      	sub	sp, #8
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
 80089d8:	4a05      	ldr	r2, [pc, #20]	; (80089f0 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	601a      	str	r2, [r3, #0]
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	4618      	mov	r0, r3
 80089e2:	f7fe ffd5 	bl	8007990 <_ZN8touchgfx10TransitionD1Ev>
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	4618      	mov	r0, r3
 80089ea:	3708      	adds	r7, #8
 80089ec:	46bd      	mov	sp, r7
 80089ee:	bd80      	pop	{r7, pc}
 80089f0:	0802c8f0 	.word	0x0802c8f0

080089f4 <_ZN8touchgfx12NoTransitionD0Ev>:
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b082      	sub	sp, #8
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
 80089fc:	6878      	ldr	r0, [r7, #4]
 80089fe:	f7ff ffe7 	bl	80089d0 <_ZN8touchgfx12NoTransitionD1Ev>
 8008a02:	210c      	movs	r1, #12
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	f01f ff14 	bl	8028832 <_ZdlPvj>
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	3708      	adds	r7, #8
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bd80      	pop	{r7, pc}

08008a14 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv>:
    /**
     * Handles the tick event when transitioning. It moves the contents of the Screen's
     * container. The direction of the transition determines the direction the contents of
     * the container moves.
     */
    virtual void handleTickEvent()
 8008a14:	b590      	push	{r4, r7, lr}
 8008a16:	b087      	sub	sp, #28
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
    {
        Transition::handleTickEvent();
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	4618      	mov	r0, r3
 8008a20:	f7fe ffd6 	bl	80079d0 <_ZN8touchgfx10Transition15handleTickEventEv>

        // Calculate new position or stop animation
        animationCounter++;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	7a9b      	ldrb	r3, [r3, #10]
 8008a28:	3301      	adds	r3, #1
 8008a2a:	b2da      	uxtb	r2, r3
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	729a      	strb	r2, [r3, #10]
        if (animationCounter > animationSteps)
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	7a9a      	ldrb	r2, [r3, #10]
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	7a5b      	ldrb	r3, [r3, #9]
 8008a38:	429a      	cmp	r2, r3
 8008a3a:	d906      	bls.n	8008a4a <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x36>
        {
            // Final step: stop the animation
            done = true;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2201      	movs	r2, #1
 8008a40:	721a      	strb	r2, [r3, #8]
            animationCounter = 0;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2200      	movs	r2, #0
 8008a46:	729a      	strb	r2, [r3, #10]
 8008a48:	e08c      	b.n	8008b64 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x150>
            return;
        }

        const int16_t oldValue = calculatedValue;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	89db      	ldrh	r3, [r3, #14]
 8008a4e:	82fb      	strh	r3, [r7, #22]

        // Calculate value in [0;targetValue]
        calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	7a9b      	ldrb	r3, [r3, #10]
 8008a54:	b298      	uxth	r0, r3
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	7a5b      	ldrb	r3, [r3, #9]
 8008a60:	b29b      	uxth	r3, r3
 8008a62:	2100      	movs	r1, #0
 8008a64:	f016 fce6 	bl	801f434 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 8008a68:	4603      	mov	r3, r0
 8008a6a:	461a      	mov	r2, r3
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	81da      	strh	r2, [r3, #14]

        // Note: Result of "calculatedValue & 1" is compiler dependent for negative values of calculatedValue
        if ((calculatedValue % 2) != 0)
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8008a76:	b29b      	uxth	r3, r3
 8008a78:	f003 0301 	and.w	r3, r3, #1
 8008a7c:	b29b      	uxth	r3, r3
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d011      	beq.n	8008aa6 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x92>
        {
            // Optimization: calculatedValue is odd, add 1/-1 to move drawables modulo 32 bits in framebuffer
            calculatedValue += (calculatedValue > 0 ? 1 : -1);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8008a88:	b29b      	uxth	r3, r3
 8008a8a:	687a      	ldr	r2, [r7, #4]
 8008a8c:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8008a90:	2a00      	cmp	r2, #0
 8008a92:	dd01      	ble.n	8008a98 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x84>
 8008a94:	2201      	movs	r2, #1
 8008a96:	e001      	b.n	8008a9c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x88>
 8008a98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008a9c:	4413      	add	r3, r2
 8008a9e:	b29b      	uxth	r3, r3
 8008aa0:	b21a      	sxth	r2, r3
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	81da      	strh	r2, [r3, #14]
        }

        // Convert the calculated value to delta value relative to current moved-to position
        const int16_t relativeValue = calculatedValue - oldValue;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8008aac:	b29a      	uxth	r2, r3
 8008aae:	8afb      	ldrh	r3, [r7, #22]
 8008ab0:	1ad3      	subs	r3, r2, r3
 8008ab2:	b29b      	uxth	r3, r3
 8008ab4:	82bb      	strh	r3, [r7, #20]

        // The Cover Transition only draws to parts of the non-TFT framebuffer. To avoid glitches
        // In Double buffering mode both framebuffers must be identical.
        if (animationCounter == 1 && HAL::USE_DOUBLE_BUFFERING)
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	7a9b      	ldrb	r3, [r3, #10]
 8008aba:	2b01      	cmp	r3, #1
 8008abc:	d109      	bne.n	8008ad2 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0xbe>
 8008abe:	4b2b      	ldr	r3, [pc, #172]	; (8008b6c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x158>)
 8008ac0:	781b      	ldrb	r3, [r3, #0]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d005      	beq.n	8008ad2 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0xbe>
        {
            // Synchronize framebuffers
            Application::getInstance()->copyInvalidatedAreasFromTFTToClientBuffer();
 8008ac6:	f014 ffd5 	bl	801da74 <_ZN8touchgfx11Application11getInstanceEv>
 8008aca:	4603      	mov	r3, r0
 8008acc:	4618      	mov	r0, r3
 8008ace:	f014 ffd7 	bl	801da80 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv>
        }

        Rect rect;
 8008ad2:	f107 0308 	add.w	r3, r7, #8
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	f7fb fd18 	bl	800450c <_ZN8touchgfx4RectC1Ev>
        switch (templateDirection)
        {
        case EAST:
            rect.x = HAL::DISPLAY_WIDTH + calculatedValue;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8008ae2:	b29a      	uxth	r2, r3
 8008ae4:	4b22      	ldr	r3, [pc, #136]	; (8008b70 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x15c>)
 8008ae6:	881b      	ldrh	r3, [r3, #0]
 8008ae8:	4413      	add	r3, r2
 8008aea:	b29b      	uxth	r3, r3
 8008aec:	b21b      	sxth	r3, r3
 8008aee:	813b      	strh	r3, [r7, #8]
            rect.y = 0;
 8008af0:	2300      	movs	r3, #0
 8008af2:	817b      	strh	r3, [r7, #10]
            rect.width = -calculatedValue;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8008afa:	b29b      	uxth	r3, r3
 8008afc:	425b      	negs	r3, r3
 8008afe:	b29b      	uxth	r3, r3
 8008b00:	b21b      	sxth	r3, r3
 8008b02:	81bb      	strh	r3, [r7, #12]
            rect.height = HAL::DISPLAY_HEIGHT;
 8008b04:	4b1b      	ldr	r3, [pc, #108]	; (8008b74 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x160>)
 8008b06:	881b      	ldrh	r3, [r3, #0]
 8008b08:	b21b      	sxth	r3, r3
 8008b0a:	81fb      	strh	r3, [r7, #14]
            break;
 8008b0c:	bf00      	nop
            rect.y = HAL::DISPLAY_HEIGHT + calculatedValue;
            rect.width = HAL::DISPLAY_WIDTH;
            rect.height = -calculatedValue;
            break;
        }
        Application::getInstance()->invalidateArea(rect);
 8008b0e:	f014 ffb1 	bl	801da74 <_ZN8touchgfx11Application11getInstanceEv>
 8008b12:	f107 0308 	add.w	r3, r7, #8
 8008b16:	e893 0006 	ldmia.w	r3, {r1, r2}
 8008b1a:	f015 f8f7 	bl	801dd0c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>

        // Move children with delta value for X or Y
        Drawable* d = screenContainer->getFirstChild();
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	685a      	ldr	r2, [r3, #4]
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	685b      	ldr	r3, [r3, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	331c      	adds	r3, #28
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	4610      	mov	r0, r2
 8008b2e:	4798      	blx	r3
 8008b30:	6138      	str	r0, [r7, #16]
        while (d)
 8008b32:	693b      	ldr	r3, [r7, #16]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d015      	beq.n	8008b64 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x150>
        {
            switch (templateDirection)
            {
            case EAST:
            case WEST:
                d->setX(d->getX() + relativeValue);
 8008b38:	693b      	ldr	r3, [r7, #16]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	3330      	adds	r3, #48	; 0x30
 8008b3e:	681c      	ldr	r4, [r3, #0]
 8008b40:	6938      	ldr	r0, [r7, #16]
 8008b42:	f7fe feb8 	bl	80078b6 <_ZNK8touchgfx8Drawable4getXEv>
 8008b46:	4603      	mov	r3, r0
 8008b48:	b29a      	uxth	r2, r3
 8008b4a:	8abb      	ldrh	r3, [r7, #20]
 8008b4c:	4413      	add	r3, r2
 8008b4e:	b29b      	uxth	r3, r3
 8008b50:	b21b      	sxth	r3, r3
 8008b52:	4619      	mov	r1, r3
 8008b54:	6938      	ldr	r0, [r7, #16]
 8008b56:	47a0      	blx	r4
                break;
 8008b58:	bf00      	nop
            case SOUTH:
                d->setY(d->getY() + relativeValue);
                break;
            }

            d = d->getNextSibling();
 8008b5a:	6938      	ldr	r0, [r7, #16]
 8008b5c:	f7fe fe7e 	bl	800785c <_ZN8touchgfx8Drawable14getNextSiblingEv>
 8008b60:	6138      	str	r0, [r7, #16]
        while (d)
 8008b62:	e7e6      	b.n	8008b32 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x11e>
        }
    }
 8008b64:	371c      	adds	r7, #28
 8008b66:	46bd      	mov	sp, r7
 8008b68:	bd90      	pop	{r4, r7, pc}
 8008b6a:	bf00      	nop
 8008b6c:	2402623e 	.word	0x2402623e
 8008b70:	24026234 	.word	0x24026234
 8008b74:	24026236 	.word	0x24026236

08008b78 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE8tearDownEv>:

    virtual void tearDown()
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b082      	sub	sp, #8
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
    {
        screenContainer->remove(solid);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	6858      	ldr	r0, [r3, #4]
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	685b      	ldr	r3, [r3, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	3364      	adds	r3, #100	; 0x64
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	687a      	ldr	r2, [r7, #4]
 8008b90:	3210      	adds	r2, #16
 8008b92:	4611      	mov	r1, r2
 8008b94:	4798      	blx	r3
    }
 8008b96:	bf00      	nop
 8008b98:	3708      	adds	r7, #8
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	bd80      	pop	{r7, pc}

08008b9e <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE4initEv>:

    virtual void init()
 8008b9e:	b590      	push	{r4, r7, lr}
 8008ba0:	b085      	sub	sp, #20
 8008ba2:	af00      	add	r7, sp, #0
 8008ba4:	6078      	str	r0, [r7, #4]
    {
        Transition::init();
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	4618      	mov	r0, r3
 8008baa:	f7fe ff25 	bl	80079f8 <_ZN8touchgfx10Transition4initEv>

        // Move snapshot and its children with delta value for X or Y
        Drawable* d = screenContainer->getFirstChild();
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	685a      	ldr	r2, [r3, #4]
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	685b      	ldr	r3, [r3, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	331c      	adds	r3, #28
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	4610      	mov	r0, r2
 8008bbe:	4798      	blx	r3
 8008bc0:	60f8      	str	r0, [r7, #12]
        while (d)
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d018      	beq.n	8008bfa <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE4initEv+0x5c>
        {
            switch (templateDirection)
            {
            case EAST:
            case WEST:
                d->setX(d->getX() - targetValue);
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	3330      	adds	r3, #48	; 0x30
 8008bce:	681c      	ldr	r4, [r3, #0]
 8008bd0:	68f8      	ldr	r0, [r7, #12]
 8008bd2:	f7fe fe70 	bl	80078b6 <_ZNK8touchgfx8Drawable4getXEv>
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	b29a      	uxth	r2, r3
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8008be0:	b29b      	uxth	r3, r3
 8008be2:	1ad3      	subs	r3, r2, r3
 8008be4:	b29b      	uxth	r3, r3
 8008be6:	b21b      	sxth	r3, r3
 8008be8:	4619      	mov	r1, r3
 8008bea:	68f8      	ldr	r0, [r7, #12]
 8008bec:	47a0      	blx	r4
                break;
 8008bee:	bf00      	nop
            case SOUTH:
                d->setY(d->getY() - targetValue);
                break;
            }

            d = d->getNextSibling();
 8008bf0:	68f8      	ldr	r0, [r7, #12]
 8008bf2:	f7fe fe33 	bl	800785c <_ZN8touchgfx8Drawable14getNextSiblingEv>
 8008bf6:	60f8      	str	r0, [r7, #12]
        while (d)
 8008bf8:	e7e3      	b.n	8008bc2 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE4initEv+0x24>
        }

        screenContainer->add(solid);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6858      	ldr	r0, [r3, #4]
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	685b      	ldr	r3, [r3, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	3360      	adds	r3, #96	; 0x60
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	687a      	ldr	r2, [r7, #4]
 8008c0a:	3210      	adds	r2, #16
 8008c0c:	4611      	mov	r1, r2
 8008c0e:	4798      	blx	r3
    }
 8008c10:	bf00      	nop
 8008c12:	3714      	adds	r7, #20
 8008c14:	46bd      	mov	sp, r7
 8008c16:	bd90      	pop	{r4, r7, pc}

08008c18 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:

    virtual const uint8_t* getPixelData(const GlyphNode* glyph) const;

    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
 8008c18:	b480      	push	{r7}
 8008c1a:	b083      	sub	sp, #12
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    }
 8008c24:	4618      	mov	r0, r3
 8008c26:	370c      	adds	r7, #12
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2e:	4770      	bx	lr

08008c30 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
 8008c30:	b480      	push	{r7}
 8008c32:	b083      	sub	sp, #12
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
    {
        return arabicTable;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    }
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	370c      	adds	r7, #12
 8008c40:	46bd      	mov	sp, r7
 8008c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c46:	4770      	bx	lr

08008c48 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b08e      	sub	sp, #56	; 0x38
 8008c4c:	af0a      	add	r7, sp, #40	; 0x28
 8008c4e:	60f8      	str	r0, [r7, #12]
 8008c50:	60b9      	str	r1, [r7, #8]
 8008c52:	4611      	mov	r1, r2
 8008c54:	461a      	mov	r2, r3
 8008c56:	460b      	mov	r3, r1
 8008c58:	80fb      	strh	r3, [r7, #6]
 8008c5a:	4613      	mov	r3, r2
 8008c5c:	80bb      	strh	r3, [r7, #4]
    : ConstFont(glyphs, numGlyphs, height, baseline, pixAboveTop, pixBelowBottom, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
      glyphData(glyphDataInternalFlash),
      kerningData(kerningList),
      gsubTable(gsubData),
      arabicTable(formsTable)
 8008c5e:	68f8      	ldr	r0, [r7, #12]
 8008c60:	88b9      	ldrh	r1, [r7, #4]
 8008c62:	88fa      	ldrh	r2, [r7, #6]
 8008c64:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008c68:	9308      	str	r3, [sp, #32]
 8008c6a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8008c6c:	9307      	str	r3, [sp, #28]
 8008c6e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8008c72:	9306      	str	r3, [sp, #24]
 8008c74:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008c78:	9305      	str	r3, [sp, #20]
 8008c7a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008c7e:	9304      	str	r3, [sp, #16]
 8008c80:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008c84:	9303      	str	r3, [sp, #12]
 8008c86:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008c8a:	9302      	str	r3, [sp, #8]
 8008c8c:	7f3b      	ldrb	r3, [r7, #28]
 8008c8e:	9301      	str	r3, [sp, #4]
 8008c90:	8b3b      	ldrh	r3, [r7, #24]
 8008c92:	9300      	str	r3, [sp, #0]
 8008c94:	460b      	mov	r3, r1
 8008c96:	68b9      	ldr	r1, [r7, #8]
 8008c98:	f016 f806 	bl	801eca8 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 8008c9c:	4a09      	ldr	r2, [pc, #36]	; (8008cc4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x7c>)
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	601a      	str	r2, [r3, #0]
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008ca6:	61da      	str	r2, [r3, #28]
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008cac:	621a      	str	r2, [r3, #32]
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008cb2:	625a      	str	r2, [r3, #36]	; 0x24
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008cb8:	629a      	str	r2, [r3, #40]	; 0x28
{
}
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	3710      	adds	r7, #16
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	bd80      	pop	{r7, pc}
 8008cc4:	0802c9a0 	.word	0x0802c9a0

08008cc8 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 8008cc8:	b480      	push	{r7}
 8008cca:	b085      	sub	sp, #20
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
 8008cd0:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	69db      	ldr	r3, [r3, #28]
 8008cd6:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	889b      	ldrh	r3, [r3, #4]
 8008cdc:	0adb      	lsrs	r3, r3, #11
 8008cde:	b29b      	uxth	r3, r3
 8008ce0:	009b      	lsls	r3, r3, #2
 8008ce2:	68fa      	ldr	r2, [r7, #12]
 8008ce4:	4413      	add	r3, r2
 8008ce6:	681a      	ldr	r2, [r3, #0]
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	4413      	add	r3, r2
}
 8008cee:	4618      	mov	r0, r3
 8008cf0:	3714      	adds	r7, #20
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf8:	4770      	bx	lr

08008cfa <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 8008cfa:	b480      	push	{r7}
 8008cfc:	b089      	sub	sp, #36	; 0x24
 8008cfe:	af00      	add	r7, sp, #0
 8008d00:	60f8      	str	r0, [r7, #12]
 8008d02:	460b      	mov	r3, r1
 8008d04:	607a      	str	r2, [r7, #4]
 8008d06:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d003      	beq.n	8008d16 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	7b1b      	ldrb	r3, [r3, #12]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d101      	bne.n	8008d1a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 8008d16:	2300      	movs	r3, #0
 8008d18:	e030      	b.n	8008d7c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	6a1a      	ldr	r2, [r3, #32]
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 8008d22:	697b      	ldr	r3, [r7, #20]
 8008d24:	7b5b      	ldrb	r3, [r3, #13]
 8008d26:	021b      	lsls	r3, r3, #8
 8008d28:	b21b      	sxth	r3, r3
 8008d2a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008d2e:	b219      	sxth	r1, r3
 8008d30:	697b      	ldr	r3, [r7, #20]
 8008d32:	7adb      	ldrb	r3, [r3, #11]
 8008d34:	b21b      	sxth	r3, r3
 8008d36:	430b      	orrs	r3, r1
 8008d38:	b21b      	sxth	r3, r3
 8008d3a:	b29b      	uxth	r3, r3
 8008d3c:	009b      	lsls	r3, r3, #2
 8008d3e:	4413      	add	r3, r2
 8008d40:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	7b1b      	ldrb	r3, [r3, #12]
 8008d46:	837b      	strh	r3, [r7, #26]
 8008d48:	8b7b      	ldrh	r3, [r7, #26]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d015      	beq.n	8008d7a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    {
        if (prevChar == kerndata->unicodePrevChar)
 8008d4e:	69fb      	ldr	r3, [r7, #28]
 8008d50:	881b      	ldrh	r3, [r3, #0]
 8008d52:	897a      	ldrh	r2, [r7, #10]
 8008d54:	429a      	cmp	r2, r3
 8008d56:	d103      	bne.n	8008d60 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
        {
            return kerndata->distance;
 8008d58:	69fb      	ldr	r3, [r7, #28]
 8008d5a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8008d5e:	e00d      	b.n	8008d7c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        }
        if (prevChar < kerndata->unicodePrevChar)
 8008d60:	69fb      	ldr	r3, [r7, #28]
 8008d62:	881b      	ldrh	r3, [r3, #0]
 8008d64:	897a      	ldrh	r2, [r7, #10]
 8008d66:	429a      	cmp	r2, r3
 8008d68:	d306      	bcc.n	8008d78 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x7e>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8008d6a:	8b7b      	ldrh	r3, [r7, #26]
 8008d6c:	3b01      	subs	r3, #1
 8008d6e:	837b      	strh	r3, [r7, #26]
 8008d70:	69fb      	ldr	r3, [r7, #28]
 8008d72:	3304      	adds	r3, #4
 8008d74:	61fb      	str	r3, [r7, #28]
 8008d76:	e7e7      	b.n	8008d48 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x4e>
        {
            break;
 8008d78:	bf00      	nop
        }
    }
    return 0;
 8008d7a:	2300      	movs	r3, #0
}
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	3724      	adds	r7, #36	; 0x24
 8008d80:	46bd      	mov	sp, r7
 8008d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d86:	4770      	bx	lr

08008d88 <_ZN8touchgfx6BitmapC1Et>:
     * Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
 8008d88:	b480      	push	{r7}
 8008d8a:	b083      	sub	sp, #12
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
 8008d90:	460b      	mov	r3, r1
 8008d92:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	887a      	ldrh	r2, [r7, #2]
 8008d98:	801a      	strh	r2, [r3, #0]
    {
    }
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	370c      	adds	r7, #12
 8008da0:	46bd      	mov	sp, r7
 8008da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da6:	4770      	bx	lr

08008da8 <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b082      	sub	sp, #8
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
    {
 8008db0:	4a06      	ldr	r2, [pc, #24]	; (8008dcc <_ZN8touchgfx6ScreenD1Ev+0x24>)
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	601a      	str	r2, [r3, #0]
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	3304      	adds	r3, #4
 8008dba:	4618      	mov	r0, r3
 8008dbc:	f000 fb5e 	bl	800947c <_ZN8touchgfx9ContainerD1Ev>
    }
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	3708      	adds	r7, #8
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	bd80      	pop	{r7, pc}
 8008dca:	bf00      	nop
 8008dcc:	0802d79c 	.word	0x0802d79c

08008dd0 <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b082      	sub	sp, #8
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
    }
 8008dd8:	6878      	ldr	r0, [r7, #4]
 8008dda:	f7ff ffe5 	bl	8008da8 <_ZN8touchgfx6ScreenD1Ev>
 8008dde:	213c      	movs	r1, #60	; 0x3c
 8008de0:	6878      	ldr	r0, [r7, #4]
 8008de2:	f01f fd26 	bl	8028832 <_ZdlPvj>
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	4618      	mov	r0, r3
 8008dea:	3708      	adds	r7, #8
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bd80      	pop	{r7, pc}

08008df0 <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 8008df0:	b480      	push	{r7}
 8008df2:	b083      	sub	sp, #12
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
    {
    }
 8008df8:	bf00      	nop
 8008dfa:	370c      	adds	r7, #12
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e02:	4770      	bx	lr

08008e04 <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 8008e04:	b480      	push	{r7}
 8008e06:	b083      	sub	sp, #12
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
    {
    }
 8008e0c:	bf00      	nop
 8008e0e:	370c      	adds	r7, #12
 8008e10:	46bd      	mov	sp, r7
 8008e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e16:	4770      	bx	lr

08008e18 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
 8008e18:	b480      	push	{r7}
 8008e1a:	b083      	sub	sp, #12
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
    {
    }
 8008e20:	bf00      	nop
 8008e22:	370c      	adds	r7, #12
 8008e24:	46bd      	mov	sp, r7
 8008e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2a:	4770      	bx	lr

08008e2c <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 8008e2c:	b480      	push	{r7}
 8008e2e:	b083      	sub	sp, #12
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
    {
    }
 8008e34:	bf00      	nop
 8008e36:	370c      	adds	r7, #12
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3e:	4770      	bx	lr

08008e40 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 8008e40:	b480      	push	{r7}
 8008e42:	b083      	sub	sp, #12
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
 8008e48:	460b      	mov	r3, r1
 8008e4a:	70fb      	strb	r3, [r7, #3]
    {
        (void)key; // Unused variable
    }
 8008e4c:	bf00      	nop
 8008e4e:	370c      	adds	r7, #12
 8008e50:	46bd      	mov	sp, r7
 8008e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e56:	4770      	bx	lr

08008e58 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b082      	sub	sp, #8
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
 8008e60:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	3304      	adds	r3, #4
 8008e66:	6839      	ldr	r1, [r7, #0]
 8008e68:	4618      	mov	r0, r3
 8008e6a:	f011 f901 	bl	801a070 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 8008e6e:	bf00      	nop
 8008e70:	3708      	adds	r7, #8
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bd80      	pop	{r7, pc}
	...

08008e78 <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b082      	sub	sp, #8
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0)
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	4618      	mov	r0, r3
 8008e84:	2326      	movs	r3, #38	; 0x26
 8008e86:	461a      	mov	r2, r3
 8008e88:	2100      	movs	r1, #0
 8008e8a:	f01f fd91 	bl	80289b0 <memset>
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	4618      	mov	r0, r3
 8008e92:	f7fe ff45 	bl	8007d20 <_ZN8touchgfx6WidgetC1Ev>
 8008e96:	4a09      	ldr	r2, [pc, #36]	; (8008ebc <_ZN8touchgfx3BoxC1Ev+0x44>)
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	601a      	str	r2, [r3, #0]
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	22ff      	movs	r2, #255	; 0xff
 8008ea0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	3328      	adds	r3, #40	; 0x28
 8008ea8:	2100      	movs	r1, #0
 8008eaa:	4618      	mov	r0, r3
 8008eac:	f7fc fa79 	bl	80053a2 <_ZN8touchgfx9colortypeC1Em>
    {
    }
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	3708      	adds	r7, #8
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	bd80      	pop	{r7, pc}
 8008eba:	bf00      	nop
 8008ebc:	0802d520 	.word	0x0802d520

08008ec0 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  newColor The color of the box.
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
 8008ec0:	b480      	push	{r7}
 8008ec2:	b083      	sub	sp, #12
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
 8008ec8:	6039      	str	r1, [r7, #0]
    {
        color = newColor;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	683a      	ldr	r2, [r7, #0]
 8008ece:	629a      	str	r2, [r3, #40]	; 0x28
    }
 8008ed0:	bf00      	nop
 8008ed2:	370c      	adds	r7, #12
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eda:	4770      	bx	lr

08008edc <_ZN8touchgfx9TypedTextC1Et>:
    TypedText(const TypedTextId id = TYPED_TEXT_INVALID)
 8008edc:	b480      	push	{r7}
 8008ede:	b083      	sub	sp, #12
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
 8008ee4:	460b      	mov	r3, r1
 8008ee6:	807b      	strh	r3, [r7, #2]
        : typedTextId(id)
 8008ee8:	4a06      	ldr	r2, [pc, #24]	; (8008f04 <_ZN8touchgfx9TypedTextC1Et+0x28>)
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	601a      	str	r2, [r3, #0]
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	887a      	ldrh	r2, [r7, #2]
 8008ef2:	809a      	strh	r2, [r3, #4]
    }
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	370c      	adds	r7, #12
 8008efa:	46bd      	mov	sp, r7
 8008efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f00:	4770      	bx	lr
 8008f02:	bf00      	nop
 8008f04:	0802c898 	.word	0x0802c898

08008f08 <_ZN8touchgfx8TextAreaC1Ev>:
 *       the pointer remains valid when drawing.
 */
class TextArea : public Widget
{
public:
    TextArea()
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b082      	sub	sp, #8
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	4618      	mov	r0, r3
 8008f14:	2326      	movs	r3, #38	; 0x26
 8008f16:	461a      	mov	r2, r3
 8008f18:	2100      	movs	r1, #0
 8008f1a:	f01f fd49 	bl	80289b0 <memset>
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	4618      	mov	r0, r3
 8008f22:	f7fe fefd 	bl	8007d20 <_ZN8touchgfx6WidgetC1Ev>
 8008f26:	4a16      	ldr	r2, [pc, #88]	; (8008f80 <_ZN8touchgfx8TextAreaC1Ev+0x78>)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	601a      	str	r2, [r3, #0]
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	3328      	adds	r3, #40	; 0x28
 8008f30:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008f34:	4618      	mov	r0, r3
 8008f36:	f7ff ffd1 	bl	8008edc <_ZN8touchgfx9TypedTextC1Et>
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	3330      	adds	r3, #48	; 0x30
 8008f3e:	2100      	movs	r1, #0
 8008f40:	4618      	mov	r0, r3
 8008f42:	f7fc fa2e 	bl	80053a2 <_ZN8touchgfx9colortypeC1Em>
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	2200      	movs	r2, #0
 8008f4a:	869a      	strh	r2, [r3, #52]	; 0x34
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	22ff      	movs	r2, #255	; 0xff
 8008f50:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2200      	movs	r2, #0
 8008f58:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2200      	movs	r2, #0
 8008f60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2200      	movs	r2, #0
 8008f68:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	333c      	adds	r3, #60	; 0x3c
 8008f70:	4618      	mov	r0, r3
 8008f72:	f000 f807 	bl	8008f84 <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>
    {
    }
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	4618      	mov	r0, r3
 8008f7a:	3708      	adds	r7, #8
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	bd80      	pop	{r7, pc}
 8008f80:	0802d490 	.word	0x0802d490

08008f84 <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>:
        }

        /**
         * Initializes a new instance of the BoundingArea class which is invalid by default.
         */
        BoundingArea()
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b084      	sub	sp, #16
 8008f88:	af02      	add	r7, sp, #8
 8008f8a:	6078      	str	r0, [r7, #4]
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
              text(0)
 8008f8c:	6878      	ldr	r0, [r7, #4]
 8008f8e:	f04f 33ff 	mov.w	r3, #4294967295
 8008f92:	9300      	str	r3, [sp, #0]
 8008f94:	f04f 33ff 	mov.w	r3, #4294967295
 8008f98:	2200      	movs	r2, #0
 8008f9a:	2100      	movs	r1, #0
 8008f9c:	f7fc fa10 	bl	80053c0 <_ZN8touchgfx4RectC1Essss>
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	609a      	str	r2, [r3, #8]
        {
        }
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	4618      	mov	r0, r3
 8008faa:	3708      	adds	r7, #8
 8008fac:	46bd      	mov	sp, r7
 8008fae:	bd80      	pop	{r7, pc}

08008fb0 <_ZN15Screen1ViewBase11applicationEv>:
    virtual ~Screen1ViewBase();
    virtual void setupScreen();
    virtual void handleKeyEvent(uint8_t key);

protected:
    FrontendApplication& application() {
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b082      	sub	sp, #8
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8008fb8:	f014 fd5c 	bl	801da74 <_ZN8touchgfx11Application11getInstanceEv>
 8008fbc:	4603      	mov	r3, r0
    }
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	3708      	adds	r7, #8
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	bd80      	pop	{r7, pc}
	...

08008fc8 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>:
class View : public Screen
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b082      	sub	sp, #8
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
 8008fd0:	4a05      	ldr	r2, [pc, #20]	; (8008fe8 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev+0x20>)
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	601a      	str	r2, [r3, #0]
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	4618      	mov	r0, r3
 8008fda:	f7ff fee5 	bl	8008da8 <_ZN8touchgfx6ScreenD1Ev>
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	3708      	adds	r7, #8
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bd80      	pop	{r7, pc}
 8008fe8:	0802ca34 	.word	0x0802ca34

08008fec <_ZN8touchgfx4ViewI16Screen1PresenterED0Ev>:
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b082      	sub	sp, #8
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
 8008ff4:	6878      	ldr	r0, [r7, #4]
 8008ff6:	f7ff ffe7 	bl	8008fc8 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 8008ffa:	2140      	movs	r1, #64	; 0x40
 8008ffc:	6878      	ldr	r0, [r7, #4]
 8008ffe:	f01f fc18 	bl	8028832 <_ZdlPvj>
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	4618      	mov	r0, r3
 8009006:	3708      	adds	r7, #8
 8009008:	46bd      	mov	sp, r7
 800900a:	bd80      	pop	{r7, pc}

0800900c <_ZN15Screen1ViewBaseC1Ev>:
#include <gui_generated/screen1_screen/Screen1ViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>

Screen1ViewBase::Screen1ViewBase()
 800900c:	b590      	push	{r4, r7, lr}
 800900e:	b0a5      	sub	sp, #148	; 0x94
 8009010:	af02      	add	r7, sp, #8
 8009012:	6178      	str	r0, [r7, #20]
 8009014:	697b      	ldr	r3, [r7, #20]
 8009016:	4618      	mov	r0, r3
 8009018:	f000 fa1a 	bl	8009450 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>
 800901c:	4ad6      	ldr	r2, [pc, #856]	; (8009378 <_ZN15Screen1ViewBaseC1Ev+0x36c>)
 800901e:	697b      	ldr	r3, [r7, #20]
 8009020:	601a      	str	r2, [r3, #0]
 8009022:	697b      	ldr	r3, [r7, #20]
 8009024:	3340      	adds	r3, #64	; 0x40
 8009026:	4618      	mov	r0, r3
 8009028:	f7ff ff26 	bl	8008e78 <_ZN8touchgfx3BoxC1Ev>
 800902c:	697b      	ldr	r3, [r7, #20]
 800902e:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8009032:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009036:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800903a:	4618      	mov	r0, r3
 800903c:	f7ff fea4 	bl	8008d88 <_ZN8touchgfx6BitmapC1Et>
 8009040:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009044:	4619      	mov	r1, r3
 8009046:	4620      	mov	r0, r4
 8009048:	f012 f9d6 	bl	801b3f8 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>
 800904c:	697b      	ldr	r3, [r7, #20]
 800904e:	3398      	adds	r3, #152	; 0x98
 8009050:	4618      	mov	r0, r3
 8009052:	f7ff ff59 	bl	8008f08 <_ZN8touchgfx8TextAreaC1Ev>
 8009056:	697b      	ldr	r3, [r7, #20]
 8009058:	33e0      	adds	r3, #224	; 0xe0
 800905a:	4618      	mov	r0, r3
 800905c:	f7ff ff54 	bl	8008f08 <_ZN8touchgfx8TextAreaC1Ev>
 8009060:	697b      	ldr	r3, [r7, #20]
 8009062:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8009066:	4618      	mov	r0, r3
 8009068:	f7ff ff4e 	bl	8008f08 <_ZN8touchgfx8TextAreaC1Ev>
{
    __background.setPosition(0, 0, 480, 272);
 800906c:	697b      	ldr	r3, [r7, #20]
 800906e:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8009072:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009076:	9300      	str	r3, [sp, #0]
 8009078:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800907c:	2200      	movs	r2, #0
 800907e:	2100      	movs	r1, #0
 8009080:	f7fe fbf8 	bl	8007874 <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8009084:	697b      	ldr	r3, [r7, #20]
 8009086:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800908a:	2300      	movs	r3, #0
 800908c:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
 8009090:	2300      	movs	r3, #0
 8009092:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8009096:	2300      	movs	r3, #0
 8009098:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
     *
     * @return The color representation depending on LCD color format.
     */
    FORCE_INLINE_FUNCTION static colortype getColorFromRGB(uint8_t red, uint8_t green, uint8_t blue)
    {
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800909c:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 80090a0:	041b      	lsls	r3, r3, #16
 80090a2:	461a      	mov	r2, r3
 80090a4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80090a8:	021b      	lsls	r3, r3, #8
 80090aa:	431a      	orrs	r2, r3
 80090ac:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80090b0:	4313      	orrs	r3, r2
 80090b2:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80090b6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80090ba:	4611      	mov	r1, r2
 80090bc:	4618      	mov	r0, r3
 80090be:	f7fc f970 	bl	80053a2 <_ZN8touchgfx9colortypeC1Em>
 80090c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80090c4:	4619      	mov	r1, r3
 80090c6:	4620      	mov	r0, r4
 80090c8:	f7ff fefa 	bl	8008ec0 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    add(__background);
 80090cc:	697a      	ldr	r2, [r7, #20]
 80090ce:	697b      	ldr	r3, [r7, #20]
 80090d0:	3340      	adds	r3, #64	; 0x40
 80090d2:	4619      	mov	r1, r3
 80090d4:	4610      	mov	r0, r2
 80090d6:	f7ff febf 	bl	8008e58 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    scalableImage1.setBitmap(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_BACKGROUNDS_1024X600_GRADIENT_DARK_ID));
 80090da:	697b      	ldr	r3, [r7, #20]
 80090dc:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 80090e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80090e4:	2100      	movs	r1, #0
 80090e6:	4618      	mov	r0, r3
 80090e8:	f7ff fe4e 	bl	8008d88 <_ZN8touchgfx6BitmapC1Et>
 80090ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80090f0:	4619      	mov	r1, r3
 80090f2:	4620      	mov	r0, r4
 80090f4:	f012 ff90 	bl	801c018 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    scalableImage1.setPosition(0, 0, 480, 272);
 80090f8:	697b      	ldr	r3, [r7, #20]
 80090fa:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 80090fe:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009102:	9300      	str	r3, [sp, #0]
 8009104:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8009108:	2200      	movs	r2, #0
 800910a:	2100      	movs	r1, #0
 800910c:	f7fe fbb2 	bl	8007874 <_ZN8touchgfx8Drawable11setPositionEssss>
    scalableImage1.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
 8009110:	697b      	ldr	r3, [r7, #20]
 8009112:	336c      	adds	r3, #108	; 0x6c
 8009114:	2100      	movs	r1, #0
 8009116:	4618      	mov	r0, r3
 8009118:	f012 f93d 	bl	801b396 <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>
    add(scalableImage1);
 800911c:	697a      	ldr	r2, [r7, #20]
 800911e:	697b      	ldr	r3, [r7, #20]
 8009120:	336c      	adds	r3, #108	; 0x6c
 8009122:	4619      	mov	r1, r3
 8009124:	4610      	mov	r0, r2
 8009126:	f7ff fe97 	bl	8008e58 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    textArea2.setXY(194, 124);
 800912a:	697b      	ldr	r3, [r7, #20]
 800912c:	3398      	adds	r3, #152	; 0x98
 800912e:	227c      	movs	r2, #124	; 0x7c
 8009130:	21c2      	movs	r1, #194	; 0xc2
 8009132:	4618      	mov	r0, r3
 8009134:	f7fe fbcc 	bl	80078d0 <_ZN8touchgfx8Drawable5setXYEss>
    textArea2.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8009138:	697b      	ldr	r3, [r7, #20]
 800913a:	f103 0498 	add.w	r4, r3, #152	; 0x98
 800913e:	23ff      	movs	r3, #255	; 0xff
 8009140:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 8009144:	23ff      	movs	r3, #255	; 0xff
 8009146:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
 800914a:	23ff      	movs	r3, #255	; 0xff
 800914c:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
 8009150:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8009154:	041b      	lsls	r3, r3, #16
 8009156:	461a      	mov	r2, r3
 8009158:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800915c:	021b      	lsls	r3, r3, #8
 800915e:	431a      	orrs	r2, r3
 8009160:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8009164:	4313      	orrs	r3, r2
 8009166:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800916a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800916e:	4611      	mov	r1, r2
 8009170:	4618      	mov	r0, r3
 8009172:	f7fc f916 	bl	80053a2 <_ZN8touchgfx9colortypeC1Em>
 8009176:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009178:	65fc      	str	r4, [r7, #92]	; 0x5c
 800917a:	623b      	str	r3, [r7, #32]
        color = newColor;
 800917c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800917e:	6a3a      	ldr	r2, [r7, #32]
 8009180:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8009182:	bf00      	nop
    textArea2.setLinespacing(0);
 8009184:	697b      	ldr	r3, [r7, #20]
 8009186:	3398      	adds	r3, #152	; 0x98
 8009188:	667b      	str	r3, [r7, #100]	; 0x64
 800918a:	2300      	movs	r3, #0
 800918c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
        linespace = space;
 8009190:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009192:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
 8009196:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 8009198:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	3384      	adds	r3, #132	; 0x84
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 80091a2:	463a      	mov	r2, r7
 80091a4:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80091a6:	4610      	mov	r0, r2
 80091a8:	4798      	blx	r3
 80091aa:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 80091ae:	463a      	mov	r2, r7
 80091b0:	ca07      	ldmia	r2, {r0, r1, r2}
 80091b2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 80091b6:	bf00      	nop
    textArea2.setTypedText(touchgfx::TypedText(T___SINGLEUSE_29K4));
 80091b8:	697b      	ldr	r3, [r7, #20]
 80091ba:	f103 0498 	add.w	r4, r3, #152	; 0x98
 80091be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80091c2:	2102      	movs	r1, #2
 80091c4:	4618      	mov	r0, r3
 80091c6:	f7ff fe89 	bl	8008edc <_ZN8touchgfx9TypedTextC1Et>
 80091ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80091ce:	4619      	mov	r1, r3
 80091d0:	4620      	mov	r0, r4
 80091d2:	f012 fecf 	bl	801bf74 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80091d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80091da:	4618      	mov	r0, r3
 80091dc:	f7fe fae2 	bl	80077a4 <_ZN8touchgfx9TypedTextD1Ev>
    add(textArea2);
 80091e0:	697a      	ldr	r2, [r7, #20]
 80091e2:	697b      	ldr	r3, [r7, #20]
 80091e4:	3398      	adds	r3, #152	; 0x98
 80091e6:	4619      	mov	r1, r3
 80091e8:	4610      	mov	r0, r2
 80091ea:	f7ff fe35 	bl	8008e58 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    textArea2_1.setXY(69, 30);
 80091ee:	697b      	ldr	r3, [r7, #20]
 80091f0:	33e0      	adds	r3, #224	; 0xe0
 80091f2:	221e      	movs	r2, #30
 80091f4:	2145      	movs	r1, #69	; 0x45
 80091f6:	4618      	mov	r0, r3
 80091f8:	f7fe fb6a 	bl	80078d0 <_ZN8touchgfx8Drawable5setXYEss>
    textArea2_1.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 80091fc:	697b      	ldr	r3, [r7, #20]
 80091fe:	f103 04e0 	add.w	r4, r3, #224	; 0xe0
 8009202:	23ff      	movs	r3, #255	; 0xff
 8009204:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 8009208:	23ff      	movs	r3, #255	; 0xff
 800920a:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
 800920e:	23ff      	movs	r3, #255	; 0xff
 8009210:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
 8009214:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8009218:	041b      	lsls	r3, r3, #16
 800921a:	461a      	mov	r2, r3
 800921c:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 8009220:	021b      	lsls	r3, r3, #8
 8009222:	431a      	orrs	r2, r3
 8009224:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 8009228:	4313      	orrs	r3, r2
 800922a:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800922e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009232:	4611      	mov	r1, r2
 8009234:	4618      	mov	r0, r3
 8009236:	f7fc f8b4 	bl	80053a2 <_ZN8touchgfx9colortypeC1Em>
 800923a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800923c:	66fc      	str	r4, [r7, #108]	; 0x6c
 800923e:	61fb      	str	r3, [r7, #28]
        color = newColor;
 8009240:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009242:	69fa      	ldr	r2, [r7, #28]
 8009244:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8009246:	bf00      	nop
    textArea2_1.setLinespacing(0);
 8009248:	697b      	ldr	r3, [r7, #20]
 800924a:	33e0      	adds	r3, #224	; 0xe0
 800924c:	677b      	str	r3, [r7, #116]	; 0x74
 800924e:	2300      	movs	r3, #0
 8009250:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
        linespace = space;
 8009254:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009256:	f8b7 2072 	ldrh.w	r2, [r7, #114]	; 0x72
 800925a:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 800925c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	3384      	adds	r3, #132	; 0x84
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	6f7c      	ldr	r4, [r7, #116]	; 0x74
 8009266:	463a      	mov	r2, r7
 8009268:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800926a:	4610      	mov	r0, r2
 800926c:	4798      	blx	r3
 800926e:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8009272:	463a      	mov	r2, r7
 8009274:	ca07      	ldmia	r2, {r0, r1, r2}
 8009276:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 800927a:	bf00      	nop
    textArea2_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_7TGI));
 800927c:	697b      	ldr	r3, [r7, #20]
 800927e:	f103 04e0 	add.w	r4, r3, #224	; 0xe0
 8009282:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009286:	2101      	movs	r1, #1
 8009288:	4618      	mov	r0, r3
 800928a:	f7ff fe27 	bl	8008edc <_ZN8touchgfx9TypedTextC1Et>
 800928e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009292:	4619      	mov	r1, r3
 8009294:	4620      	mov	r0, r4
 8009296:	f012 fe6d 	bl	801bf74 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 800929a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800929e:	4618      	mov	r0, r3
 80092a0:	f7fe fa80 	bl	80077a4 <_ZN8touchgfx9TypedTextD1Ev>
    add(textArea2_1);
 80092a4:	697a      	ldr	r2, [r7, #20]
 80092a6:	697b      	ldr	r3, [r7, #20]
 80092a8:	33e0      	adds	r3, #224	; 0xe0
 80092aa:	4619      	mov	r1, r3
 80092ac:	4610      	mov	r0, r2
 80092ae:	f7ff fdd3 	bl	8008e58 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    textArea1.setXY(183, 71);
 80092b2:	697b      	ldr	r3, [r7, #20]
 80092b4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80092b8:	2247      	movs	r2, #71	; 0x47
 80092ba:	21b7      	movs	r1, #183	; 0xb7
 80092bc:	4618      	mov	r0, r3
 80092be:	f7fe fb07 	bl	80078d0 <_ZN8touchgfx8Drawable5setXYEss>
    textArea1.setColor(touchgfx::Color::getColorFromRGB(10, 252, 26));
 80092c2:	697b      	ldr	r3, [r7, #20]
 80092c4:	f503 7494 	add.w	r4, r3, #296	; 0x128
 80092c8:	230a      	movs	r3, #10
 80092ca:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 80092ce:	23fc      	movs	r3, #252	; 0xfc
 80092d0:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
 80092d4:	231a      	movs	r3, #26
 80092d6:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79
 80092da:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 80092de:	041b      	lsls	r3, r3, #16
 80092e0:	461a      	mov	r2, r3
 80092e2:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 80092e6:	021b      	lsls	r3, r3, #8
 80092e8:	431a      	orrs	r2, r3
 80092ea:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
 80092ee:	4313      	orrs	r3, r2
 80092f0:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80092f4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80092f8:	4611      	mov	r1, r2
 80092fa:	4618      	mov	r0, r3
 80092fc:	f7fc f851 	bl	80053a2 <_ZN8touchgfx9colortypeC1Em>
 8009300:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009302:	67fc      	str	r4, [r7, #124]	; 0x7c
 8009304:	61bb      	str	r3, [r7, #24]
        color = newColor;
 8009306:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009308:	69ba      	ldr	r2, [r7, #24]
 800930a:	631a      	str	r2, [r3, #48]	; 0x30
    }
 800930c:	bf00      	nop
    textArea1.setLinespacing(0);
 800930e:	697b      	ldr	r3, [r7, #20]
 8009310:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8009314:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009318:	2300      	movs	r3, #0
 800931a:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
        linespace = space;
 800931e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009322:	f8b7 2082 	ldrh.w	r2, [r7, #130]	; 0x82
 8009326:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 8009328:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	3384      	adds	r3, #132	; 0x84
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	f8d7 4084 	ldr.w	r4, [r7, #132]	; 0x84
 8009336:	463a      	mov	r2, r7
 8009338:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800933c:	4610      	mov	r0, r2
 800933e:	4798      	blx	r3
 8009340:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8009344:	463a      	mov	r2, r7
 8009346:	ca07      	ldmia	r2, {r0, r1, r2}
 8009348:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 800934c:	bf00      	nop
    textArea1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_35N7));
 800934e:	697b      	ldr	r3, [r7, #20]
 8009350:	f503 7494 	add.w	r4, r3, #296	; 0x128
 8009354:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009358:	2105      	movs	r1, #5
 800935a:	4618      	mov	r0, r3
 800935c:	f7ff fdbe 	bl	8008edc <_ZN8touchgfx9TypedTextC1Et>
 8009360:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009364:	4619      	mov	r1, r3
 8009366:	4620      	mov	r0, r4
 8009368:	f012 fe04 	bl	801bf74 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 800936c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009370:	4618      	mov	r0, r3
 8009372:	f7fe fa17 	bl	80077a4 <_ZN8touchgfx9TypedTextD1Ev>
 8009376:	e001      	b.n	800937c <_ZN15Screen1ViewBaseC1Ev+0x370>
 8009378:	0802ca00 	.word	0x0802ca00
    add(textArea1);
 800937c:	697a      	ldr	r2, [r7, #20]
 800937e:	697b      	ldr	r3, [r7, #20]
 8009380:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8009384:	4619      	mov	r1, r3
 8009386:	4610      	mov	r0, r2
 8009388:	f7ff fd66 	bl	8008e58 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 800938c:	697b      	ldr	r3, [r7, #20]
 800938e:	4618      	mov	r0, r3
 8009390:	378c      	adds	r7, #140	; 0x8c
 8009392:	46bd      	mov	sp, r7
 8009394:	bd90      	pop	{r4, r7, pc}
 8009396:	bf00      	nop

08009398 <_ZN15Screen1ViewBaseD1Ev>:

Screen1ViewBase::~Screen1ViewBase()
 8009398:	b580      	push	{r7, lr}
 800939a:	b082      	sub	sp, #8
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
 80093a0:	4a12      	ldr	r2, [pc, #72]	; (80093ec <_ZN15Screen1ViewBaseD1Ev+0x54>)
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	601a      	str	r2, [r3, #0]
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80093ac:	4618      	mov	r0, r3
 80093ae:	f000 f8ed 	bl	800958c <_ZN8touchgfx8TextAreaD1Ev>
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	33e0      	adds	r3, #224	; 0xe0
 80093b6:	4618      	mov	r0, r3
 80093b8:	f000 f8e8 	bl	800958c <_ZN8touchgfx8TextAreaD1Ev>
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	3398      	adds	r3, #152	; 0x98
 80093c0:	4618      	mov	r0, r3
 80093c2:	f000 f8e3 	bl	800958c <_ZN8touchgfx8TextAreaD1Ev>
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	336c      	adds	r3, #108	; 0x6c
 80093ca:	4618      	mov	r0, r3
 80093cc:	f000 f8bc 	bl	8009548 <_ZN8touchgfx13ScalableImageD1Ev>
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	3340      	adds	r3, #64	; 0x40
 80093d4:	4618      	mov	r0, r3
 80093d6:	f000 f873 	bl	80094c0 <_ZN8touchgfx3BoxD1Ev>
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	4618      	mov	r0, r3
 80093de:	f7ff fdf3 	bl	8008fc8 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
{

}
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	4618      	mov	r0, r3
 80093e6:	3708      	adds	r7, #8
 80093e8:	46bd      	mov	sp, r7
 80093ea:	bd80      	pop	{r7, pc}
 80093ec:	0802ca00 	.word	0x0802ca00

080093f0 <_ZN15Screen1ViewBaseD0Ev>:
Screen1ViewBase::~Screen1ViewBase()
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b082      	sub	sp, #8
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
}
 80093f8:	6878      	ldr	r0, [r7, #4]
 80093fa:	f7ff ffcd 	bl	8009398 <_ZN15Screen1ViewBaseD1Ev>
 80093fe:	f44f 71b8 	mov.w	r1, #368	; 0x170
 8009402:	6878      	ldr	r0, [r7, #4]
 8009404:	f01f fa15 	bl	8028832 <_ZdlPvj>
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	4618      	mov	r0, r3
 800940c:	3708      	adds	r7, #8
 800940e:	46bd      	mov	sp, r7
 8009410:	bd80      	pop	{r7, pc}

08009412 <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{
 8009412:	b480      	push	{r7}
 8009414:	b083      	sub	sp, #12
 8009416:	af00      	add	r7, sp, #0
 8009418:	6078      	str	r0, [r7, #4]

}
 800941a:	bf00      	nop
 800941c:	370c      	adds	r7, #12
 800941e:	46bd      	mov	sp, r7
 8009420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009424:	4770      	bx	lr

08009426 <_ZN15Screen1ViewBase14handleKeyEventEh>:

void Screen1ViewBase::handleKeyEvent(uint8_t key)
{
 8009426:	b580      	push	{r7, lr}
 8009428:	b082      	sub	sp, #8
 800942a:	af00      	add	r7, sp, #0
 800942c:	6078      	str	r0, [r7, #4]
 800942e:	460b      	mov	r3, r1
 8009430:	70fb      	strb	r3, [r7, #3]
    if(1 == key)
 8009432:	78fb      	ldrb	r3, [r7, #3]
 8009434:	2b01      	cmp	r3, #1
 8009436:	d106      	bne.n	8009446 <_ZN15Screen1ViewBase14handleKeyEventEh+0x20>
    {
        //Interaction1
        //When hardware button 1 clicked change screen to Screen2
        //Go to Screen2 with screen transition towards East
        application().gotoScreen2ScreenCoverTransitionEast();
 8009438:	6878      	ldr	r0, [r7, #4]
 800943a:	f7ff fdb9 	bl	8008fb0 <_ZN15Screen1ViewBase11applicationEv>
 800943e:	4603      	mov	r3, r0
 8009440:	4618      	mov	r0, r3
 8009442:	f7fe fd67 	bl	8007f14 <_ZN23FrontendApplicationBase36gotoScreen2ScreenCoverTransitionEastEv>
    
    }
}
 8009446:	bf00      	nop
 8009448:	3708      	adds	r7, #8
 800944a:	46bd      	mov	sp, r7
 800944c:	bd80      	pop	{r7, pc}
	...

08009450 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>:
    View()
 8009450:	b580      	push	{r7, lr}
 8009452:	b082      	sub	sp, #8
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
        : presenter(0)
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	4618      	mov	r0, r3
 800945c:	f015 fe38 	bl	801f0d0 <_ZN8touchgfx6ScreenC1Ev>
 8009460:	4a05      	ldr	r2, [pc, #20]	; (8009478 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev+0x28>)
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	601a      	str	r2, [r3, #0]
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2200      	movs	r2, #0
 800946a:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	4618      	mov	r0, r3
 8009470:	3708      	adds	r7, #8
 8009472:	46bd      	mov	sp, r7
 8009474:	bd80      	pop	{r7, pc}
 8009476:	bf00      	nop
 8009478:	0802ca34 	.word	0x0802ca34

0800947c <_ZN8touchgfx9ContainerD1Ev>:
 * intersect with the geometry of the container will be visible (e.g. setting a
 * container's width to 0 will render all children invisible).
 *
 * @see Drawable
 */
class Container : public Drawable
 800947c:	b580      	push	{r7, lr}
 800947e:	b082      	sub	sp, #8
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
 8009484:	4a05      	ldr	r2, [pc, #20]	; (800949c <_ZN8touchgfx9ContainerD1Ev+0x20>)
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	601a      	str	r2, [r3, #0]
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	4618      	mov	r0, r3
 800948e:	f7fb ffb7 	bl	8005400 <_ZN8touchgfx8DrawableD1Ev>
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	4618      	mov	r0, r3
 8009496:	3708      	adds	r7, #8
 8009498:	46bd      	mov	sp, r7
 800949a:	bd80      	pop	{r7, pc}
 800949c:	0802d234 	.word	0x0802d234

080094a0 <_ZN8touchgfx9ContainerD0Ev>:
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b082      	sub	sp, #8
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
 80094a8:	6878      	ldr	r0, [r7, #4]
 80094aa:	f7ff ffe7 	bl	800947c <_ZN8touchgfx9ContainerD1Ev>
 80094ae:	212c      	movs	r1, #44	; 0x2c
 80094b0:	6878      	ldr	r0, [r7, #4]
 80094b2:	f01f f9be 	bl	8028832 <_ZdlPvj>
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	4618      	mov	r0, r3
 80094ba:	3708      	adds	r7, #8
 80094bc:	46bd      	mov	sp, r7
 80094be:	bd80      	pop	{r7, pc}

080094c0 <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b082      	sub	sp, #8
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
 80094c8:	4a05      	ldr	r2, [pc, #20]	; (80094e0 <_ZN8touchgfx3BoxD1Ev+0x20>)
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	601a      	str	r2, [r3, #0]
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	4618      	mov	r0, r3
 80094d2:	f7fc f917 	bl	8005704 <_ZN8touchgfx6WidgetD1Ev>
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	4618      	mov	r0, r3
 80094da:	3708      	adds	r7, #8
 80094dc:	46bd      	mov	sp, r7
 80094de:	bd80      	pop	{r7, pc}
 80094e0:	0802d520 	.word	0x0802d520

080094e4 <_ZN8touchgfx3BoxD0Ev>:
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b082      	sub	sp, #8
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
 80094ec:	6878      	ldr	r0, [r7, #4]
 80094ee:	f7ff ffe7 	bl	80094c0 <_ZN8touchgfx3BoxD1Ev>
 80094f2:	212c      	movs	r1, #44	; 0x2c
 80094f4:	6878      	ldr	r0, [r7, #4]
 80094f6:	f01f f99c 	bl	8028832 <_ZdlPvj>
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	4618      	mov	r0, r3
 80094fe:	3708      	adds	r7, #8
 8009500:	46bd      	mov	sp, r7
 8009502:	bd80      	pop	{r7, pc}

08009504 <_ZN8touchgfx5ImageD1Ev>:
 * is handled by the Image Converter as part of compiling the project. Each image is
 * assigned a unique BITMAP identifier which.
 *
 * @see Bitmap
 */
class Image : public Widget
 8009504:	b580      	push	{r7, lr}
 8009506:	b082      	sub	sp, #8
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
 800950c:	4a05      	ldr	r2, [pc, #20]	; (8009524 <_ZN8touchgfx5ImageD1Ev+0x20>)
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	601a      	str	r2, [r3, #0]
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	4618      	mov	r0, r3
 8009516:	f7fc f8f5 	bl	8005704 <_ZN8touchgfx6WidgetD1Ev>
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	4618      	mov	r0, r3
 800951e:	3708      	adds	r7, #8
 8009520:	46bd      	mov	sp, r7
 8009522:	bd80      	pop	{r7, pc}
 8009524:	0802d588 	.word	0x0802d588

08009528 <_ZN8touchgfx5ImageD0Ev>:
 8009528:	b580      	push	{r7, lr}
 800952a:	b082      	sub	sp, #8
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
 8009530:	6878      	ldr	r0, [r7, #4]
 8009532:	f7ff ffe7 	bl	8009504 <_ZN8touchgfx5ImageD1Ev>
 8009536:	212c      	movs	r1, #44	; 0x2c
 8009538:	6878      	ldr	r0, [r7, #4]
 800953a:	f01f f97a 	bl	8028832 <_ZdlPvj>
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	4618      	mov	r0, r3
 8009542:	3708      	adds	r7, #8
 8009544:	46bd      	mov	sp, r7
 8009546:	bd80      	pop	{r7, pc}

08009548 <_ZN8touchgfx13ScalableImageD1Ev>:
 * algorithm used. The rendering algorithm can be changed dynamically. Please note that
 * scaling images is done at runtime and may require a lot of calculations.
 *
 * @note Note that this widget does not support 1 bit per pixel color depth.
 */
class ScalableImage : public Image
 8009548:	b580      	push	{r7, lr}
 800954a:	b082      	sub	sp, #8
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
 8009550:	4a05      	ldr	r2, [pc, #20]	; (8009568 <_ZN8touchgfx13ScalableImageD1Ev+0x20>)
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	601a      	str	r2, [r3, #0]
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	4618      	mov	r0, r3
 800955a:	f7ff ffd3 	bl	8009504 <_ZN8touchgfx5ImageD1Ev>
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	4618      	mov	r0, r3
 8009562:	3708      	adds	r7, #8
 8009564:	46bd      	mov	sp, r7
 8009566:	bd80      	pop	{r7, pc}
 8009568:	0802d41c 	.word	0x0802d41c

0800956c <_ZN8touchgfx13ScalableImageD0Ev>:
 800956c:	b580      	push	{r7, lr}
 800956e:	b082      	sub	sp, #8
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
 8009574:	6878      	ldr	r0, [r7, #4]
 8009576:	f7ff ffe7 	bl	8009548 <_ZN8touchgfx13ScalableImageD1Ev>
 800957a:	212c      	movs	r1, #44	; 0x2c
 800957c:	6878      	ldr	r0, [r7, #4]
 800957e:	f01f f958 	bl	8028832 <_ZdlPvj>
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	4618      	mov	r0, r3
 8009586:	3708      	adds	r7, #8
 8009588:	46bd      	mov	sp, r7
 800958a:	bd80      	pop	{r7, pc}

0800958c <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 800958c:	b580      	push	{r7, lr}
 800958e:	b082      	sub	sp, #8
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
 8009594:	4a08      	ldr	r2, [pc, #32]	; (80095b8 <_ZN8touchgfx8TextAreaD1Ev+0x2c>)
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	601a      	str	r2, [r3, #0]
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	3328      	adds	r3, #40	; 0x28
 800959e:	4618      	mov	r0, r3
 80095a0:	f7fe f900 	bl	80077a4 <_ZN8touchgfx9TypedTextD1Ev>
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	4618      	mov	r0, r3
 80095a8:	f7fc f8ac 	bl	8005704 <_ZN8touchgfx6WidgetD1Ev>
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	4618      	mov	r0, r3
 80095b0:	3708      	adds	r7, #8
 80095b2:	46bd      	mov	sp, r7
 80095b4:	bd80      	pop	{r7, pc}
 80095b6:	bf00      	nop
 80095b8:	0802d490 	.word	0x0802d490

080095bc <_ZN8touchgfx8TextAreaD0Ev>:
 80095bc:	b580      	push	{r7, lr}
 80095be:	b082      	sub	sp, #8
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
 80095c4:	6878      	ldr	r0, [r7, #4]
 80095c6:	f7ff ffe1 	bl	800958c <_ZN8touchgfx8TextAreaD1Ev>
 80095ca:	2148      	movs	r1, #72	; 0x48
 80095cc:	6878      	ldr	r0, [r7, #4]
 80095ce:	f01f f930 	bl	8028832 <_ZdlPvj>
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	4618      	mov	r0, r3
 80095d6:	3708      	adds	r7, #8
 80095d8:	46bd      	mov	sp, r7
 80095da:	bd80      	pop	{r7, pc}

080095dc <_ZN15Screen2ViewBase11applicationEv>:
    virtual ~Screen2ViewBase();
    virtual void setupScreen();
    virtual void handleKeyEvent(uint8_t key);

protected:
    FrontendApplication& application() {
 80095dc:	b580      	push	{r7, lr}
 80095de:	b082      	sub	sp, #8
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 80095e4:	f014 fa46 	bl	801da74 <_ZN8touchgfx11Application11getInstanceEv>
 80095e8:	4603      	mov	r3, r0
    }
 80095ea:	4618      	mov	r0, r3
 80095ec:	3708      	adds	r7, #8
 80095ee:	46bd      	mov	sp, r7
 80095f0:	bd80      	pop	{r7, pc}
	...

080095f4 <_ZN8touchgfx4ViewI16Screen2PresenterED1Ev>:
class View : public Screen
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b082      	sub	sp, #8
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
 80095fc:	4a05      	ldr	r2, [pc, #20]	; (8009614 <_ZN8touchgfx4ViewI16Screen2PresenterED1Ev+0x20>)
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	601a      	str	r2, [r3, #0]
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	4618      	mov	r0, r3
 8009606:	f7ff fbcf 	bl	8008da8 <_ZN8touchgfx6ScreenD1Ev>
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	4618      	mov	r0, r3
 800960e:	3708      	adds	r7, #8
 8009610:	46bd      	mov	sp, r7
 8009612:	bd80      	pop	{r7, pc}
 8009614:	0802ca9c 	.word	0x0802ca9c

08009618 <_ZN8touchgfx4ViewI16Screen2PresenterED0Ev>:
 8009618:	b580      	push	{r7, lr}
 800961a:	b082      	sub	sp, #8
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
 8009620:	6878      	ldr	r0, [r7, #4]
 8009622:	f7ff ffe7 	bl	80095f4 <_ZN8touchgfx4ViewI16Screen2PresenterED1Ev>
 8009626:	2140      	movs	r1, #64	; 0x40
 8009628:	6878      	ldr	r0, [r7, #4]
 800962a:	f01f f902 	bl	8028832 <_ZdlPvj>
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	4618      	mov	r0, r3
 8009632:	3708      	adds	r7, #8
 8009634:	46bd      	mov	sp, r7
 8009636:	bd80      	pop	{r7, pc}

08009638 <_ZN15Screen2ViewBaseC1Ev>:
#include <gui_generated/screen2_screen/Screen2ViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>

Screen2ViewBase::Screen2ViewBase()
 8009638:	b590      	push	{r4, r7, lr}
 800963a:	b0a5      	sub	sp, #148	; 0x94
 800963c:	af02      	add	r7, sp, #8
 800963e:	6178      	str	r0, [r7, #20]
 8009640:	697b      	ldr	r3, [r7, #20]
 8009642:	4618      	mov	r0, r3
 8009644:	f000 fa1a 	bl	8009a7c <_ZN8touchgfx4ViewI16Screen2PresenterEC1Ev>
 8009648:	4ad6      	ldr	r2, [pc, #856]	; (80099a4 <_ZN15Screen2ViewBaseC1Ev+0x36c>)
 800964a:	697b      	ldr	r3, [r7, #20]
 800964c:	601a      	str	r2, [r3, #0]
 800964e:	697b      	ldr	r3, [r7, #20]
 8009650:	3340      	adds	r3, #64	; 0x40
 8009652:	4618      	mov	r0, r3
 8009654:	f7ff fc10 	bl	8008e78 <_ZN8touchgfx3BoxC1Ev>
 8009658:	697b      	ldr	r3, [r7, #20]
 800965a:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 800965e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009662:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009666:	4618      	mov	r0, r3
 8009668:	f7ff fb8e 	bl	8008d88 <_ZN8touchgfx6BitmapC1Et>
 800966c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009670:	4619      	mov	r1, r3
 8009672:	4620      	mov	r0, r4
 8009674:	f011 fec0 	bl	801b3f8 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>
 8009678:	697b      	ldr	r3, [r7, #20]
 800967a:	3398      	adds	r3, #152	; 0x98
 800967c:	4618      	mov	r0, r3
 800967e:	f7ff fc43 	bl	8008f08 <_ZN8touchgfx8TextAreaC1Ev>
 8009682:	697b      	ldr	r3, [r7, #20]
 8009684:	33e0      	adds	r3, #224	; 0xe0
 8009686:	4618      	mov	r0, r3
 8009688:	f7ff fc3e 	bl	8008f08 <_ZN8touchgfx8TextAreaC1Ev>
 800968c:	697b      	ldr	r3, [r7, #20]
 800968e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8009692:	4618      	mov	r0, r3
 8009694:	f7ff fc38 	bl	8008f08 <_ZN8touchgfx8TextAreaC1Ev>
{
    __background.setPosition(0, 0, 480, 272);
 8009698:	697b      	ldr	r3, [r7, #20]
 800969a:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800969e:	f44f 7388 	mov.w	r3, #272	; 0x110
 80096a2:	9300      	str	r3, [sp, #0]
 80096a4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80096a8:	2200      	movs	r2, #0
 80096aa:	2100      	movs	r1, #0
 80096ac:	f7fe f8e2 	bl	8007874 <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 80096b0:	697b      	ldr	r3, [r7, #20]
 80096b2:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80096b6:	2300      	movs	r3, #0
 80096b8:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
 80096bc:	2300      	movs	r3, #0
 80096be:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80096c2:	2300      	movs	r3, #0
 80096c4:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 80096c8:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 80096cc:	041b      	lsls	r3, r3, #16
 80096ce:	461a      	mov	r2, r3
 80096d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80096d4:	021b      	lsls	r3, r3, #8
 80096d6:	431a      	orrs	r2, r3
 80096d8:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80096dc:	4313      	orrs	r3, r2
 80096de:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80096e2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80096e6:	4611      	mov	r1, r2
 80096e8:	4618      	mov	r0, r3
 80096ea:	f7fb fe5a 	bl	80053a2 <_ZN8touchgfx9colortypeC1Em>
 80096ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80096f0:	4619      	mov	r1, r3
 80096f2:	4620      	mov	r0, r4
 80096f4:	f7ff fbe4 	bl	8008ec0 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    add(__background);
 80096f8:	697a      	ldr	r2, [r7, #20]
 80096fa:	697b      	ldr	r3, [r7, #20]
 80096fc:	3340      	adds	r3, #64	; 0x40
 80096fe:	4619      	mov	r1, r3
 8009700:	4610      	mov	r0, r2
 8009702:	f7ff fba9 	bl	8008e58 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    scalableImage1.setBitmap(touchgfx::Bitmap(BITMAP_CLAY_THEME_IMAGES_BACKGROUNDS_1024X600_GRADIENT_LIGHT_ID));
 8009706:	697b      	ldr	r3, [r7, #20]
 8009708:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 800970c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009710:	2101      	movs	r1, #1
 8009712:	4618      	mov	r0, r3
 8009714:	f7ff fb38 	bl	8008d88 <_ZN8touchgfx6BitmapC1Et>
 8009718:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800971c:	4619      	mov	r1, r3
 800971e:	4620      	mov	r0, r4
 8009720:	f012 fc7a 	bl	801c018 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    scalableImage1.setPosition(0, 0, 480, 272);
 8009724:	697b      	ldr	r3, [r7, #20]
 8009726:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 800972a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800972e:	9300      	str	r3, [sp, #0]
 8009730:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8009734:	2200      	movs	r2, #0
 8009736:	2100      	movs	r1, #0
 8009738:	f7fe f89c 	bl	8007874 <_ZN8touchgfx8Drawable11setPositionEssss>
    scalableImage1.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
 800973c:	697b      	ldr	r3, [r7, #20]
 800973e:	336c      	adds	r3, #108	; 0x6c
 8009740:	2100      	movs	r1, #0
 8009742:	4618      	mov	r0, r3
 8009744:	f011 fe27 	bl	801b396 <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>
    add(scalableImage1);
 8009748:	697a      	ldr	r2, [r7, #20]
 800974a:	697b      	ldr	r3, [r7, #20]
 800974c:	336c      	adds	r3, #108	; 0x6c
 800974e:	4619      	mov	r1, r3
 8009750:	4610      	mov	r0, r2
 8009752:	f7ff fb81 	bl	8008e58 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    textArea2_1.setXY(69, 30);
 8009756:	697b      	ldr	r3, [r7, #20]
 8009758:	3398      	adds	r3, #152	; 0x98
 800975a:	221e      	movs	r2, #30
 800975c:	2145      	movs	r1, #69	; 0x45
 800975e:	4618      	mov	r0, r3
 8009760:	f7fe f8b6 	bl	80078d0 <_ZN8touchgfx8Drawable5setXYEss>
    textArea2_1.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8009764:	697b      	ldr	r3, [r7, #20]
 8009766:	f103 0498 	add.w	r4, r3, #152	; 0x98
 800976a:	2300      	movs	r3, #0
 800976c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 8009770:	2300      	movs	r3, #0
 8009772:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
 8009776:	2300      	movs	r3, #0
 8009778:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
 800977c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8009780:	041b      	lsls	r3, r3, #16
 8009782:	461a      	mov	r2, r3
 8009784:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8009788:	021b      	lsls	r3, r3, #8
 800978a:	431a      	orrs	r2, r3
 800978c:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8009790:	4313      	orrs	r3, r2
 8009792:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8009796:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800979a:	4611      	mov	r1, r2
 800979c:	4618      	mov	r0, r3
 800979e:	f7fb fe00 	bl	80053a2 <_ZN8touchgfx9colortypeC1Em>
 80097a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097a4:	65fc      	str	r4, [r7, #92]	; 0x5c
 80097a6:	623b      	str	r3, [r7, #32]
        color = newColor;
 80097a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80097aa:	6a3a      	ldr	r2, [r7, #32]
 80097ac:	631a      	str	r2, [r3, #48]	; 0x30
    }
 80097ae:	bf00      	nop
    textArea2_1.setLinespacing(0);
 80097b0:	697b      	ldr	r3, [r7, #20]
 80097b2:	3398      	adds	r3, #152	; 0x98
 80097b4:	667b      	str	r3, [r7, #100]	; 0x64
 80097b6:	2300      	movs	r3, #0
 80097b8:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
        linespace = space;
 80097bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80097be:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
 80097c2:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 80097c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	3384      	adds	r3, #132	; 0x84
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 80097ce:	463a      	mov	r2, r7
 80097d0:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80097d2:	4610      	mov	r0, r2
 80097d4:	4798      	blx	r3
 80097d6:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 80097da:	463a      	mov	r2, r7
 80097dc:	ca07      	ldmia	r2, {r0, r1, r2}
 80097de:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 80097e2:	bf00      	nop
    textArea2_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_X4KQ));
 80097e4:	697b      	ldr	r3, [r7, #20]
 80097e6:	f103 0498 	add.w	r4, r3, #152	; 0x98
 80097ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80097ee:	2100      	movs	r1, #0
 80097f0:	4618      	mov	r0, r3
 80097f2:	f7ff fb73 	bl	8008edc <_ZN8touchgfx9TypedTextC1Et>
 80097f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80097fa:	4619      	mov	r1, r3
 80097fc:	4620      	mov	r0, r4
 80097fe:	f012 fbb9 	bl	801bf74 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8009802:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009806:	4618      	mov	r0, r3
 8009808:	f7fd ffcc 	bl	80077a4 <_ZN8touchgfx9TypedTextD1Ev>
    add(textArea2_1);
 800980c:	697a      	ldr	r2, [r7, #20]
 800980e:	697b      	ldr	r3, [r7, #20]
 8009810:	3398      	adds	r3, #152	; 0x98
 8009812:	4619      	mov	r1, r3
 8009814:	4610      	mov	r0, r2
 8009816:	f7ff fb1f 	bl	8008e58 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    textArea1.setXY(183, 71);
 800981a:	697b      	ldr	r3, [r7, #20]
 800981c:	33e0      	adds	r3, #224	; 0xe0
 800981e:	2247      	movs	r2, #71	; 0x47
 8009820:	21b7      	movs	r1, #183	; 0xb7
 8009822:	4618      	mov	r0, r3
 8009824:	f7fe f854 	bl	80078d0 <_ZN8touchgfx8Drawable5setXYEss>
    textArea1.setColor(touchgfx::Color::getColorFromRGB(10, 252, 26));
 8009828:	697b      	ldr	r3, [r7, #20]
 800982a:	f103 04e0 	add.w	r4, r3, #224	; 0xe0
 800982e:	230a      	movs	r3, #10
 8009830:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 8009834:	23fc      	movs	r3, #252	; 0xfc
 8009836:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
 800983a:	231a      	movs	r3, #26
 800983c:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
 8009840:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8009844:	041b      	lsls	r3, r3, #16
 8009846:	461a      	mov	r2, r3
 8009848:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 800984c:	021b      	lsls	r3, r3, #8
 800984e:	431a      	orrs	r2, r3
 8009850:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 8009854:	4313      	orrs	r3, r2
 8009856:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800985a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800985e:	4611      	mov	r1, r2
 8009860:	4618      	mov	r0, r3
 8009862:	f7fb fd9e 	bl	80053a2 <_ZN8touchgfx9colortypeC1Em>
 8009866:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009868:	66fc      	str	r4, [r7, #108]	; 0x6c
 800986a:	61fb      	str	r3, [r7, #28]
        color = newColor;
 800986c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800986e:	69fa      	ldr	r2, [r7, #28]
 8009870:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8009872:	bf00      	nop
    textArea1.setLinespacing(0);
 8009874:	697b      	ldr	r3, [r7, #20]
 8009876:	33e0      	adds	r3, #224	; 0xe0
 8009878:	677b      	str	r3, [r7, #116]	; 0x74
 800987a:	2300      	movs	r3, #0
 800987c:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
        linespace = space;
 8009880:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009882:	f8b7 2072 	ldrh.w	r2, [r7, #114]	; 0x72
 8009886:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 8009888:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	3384      	adds	r3, #132	; 0x84
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	6f7c      	ldr	r4, [r7, #116]	; 0x74
 8009892:	463a      	mov	r2, r7
 8009894:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8009896:	4610      	mov	r0, r2
 8009898:	4798      	blx	r3
 800989a:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 800989e:	463a      	mov	r2, r7
 80098a0:	ca07      	ldmia	r2, {r0, r1, r2}
 80098a2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 80098a6:	bf00      	nop
    textArea1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_412G));
 80098a8:	697b      	ldr	r3, [r7, #20]
 80098aa:	f103 04e0 	add.w	r4, r3, #224	; 0xe0
 80098ae:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80098b2:	2104      	movs	r1, #4
 80098b4:	4618      	mov	r0, r3
 80098b6:	f7ff fb11 	bl	8008edc <_ZN8touchgfx9TypedTextC1Et>
 80098ba:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80098be:	4619      	mov	r1, r3
 80098c0:	4620      	mov	r0, r4
 80098c2:	f012 fb57 	bl	801bf74 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80098c6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80098ca:	4618      	mov	r0, r3
 80098cc:	f7fd ff6a 	bl	80077a4 <_ZN8touchgfx9TypedTextD1Ev>
    add(textArea1);
 80098d0:	697a      	ldr	r2, [r7, #20]
 80098d2:	697b      	ldr	r3, [r7, #20]
 80098d4:	33e0      	adds	r3, #224	; 0xe0
 80098d6:	4619      	mov	r1, r3
 80098d8:	4610      	mov	r0, r2
 80098da:	f7ff fabd 	bl	8008e58 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    textArea2.setXY(194, 124);
 80098de:	697b      	ldr	r3, [r7, #20]
 80098e0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80098e4:	227c      	movs	r2, #124	; 0x7c
 80098e6:	21c2      	movs	r1, #194	; 0xc2
 80098e8:	4618      	mov	r0, r3
 80098ea:	f7fd fff1 	bl	80078d0 <_ZN8touchgfx8Drawable5setXYEss>
    textArea2.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 80098ee:	697b      	ldr	r3, [r7, #20]
 80098f0:	f503 7494 	add.w	r4, r3, #296	; 0x128
 80098f4:	2300      	movs	r3, #0
 80098f6:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 80098fa:	2300      	movs	r3, #0
 80098fc:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
 8009900:	2300      	movs	r3, #0
 8009902:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79
 8009906:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 800990a:	041b      	lsls	r3, r3, #16
 800990c:	461a      	mov	r2, r3
 800990e:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 8009912:	021b      	lsls	r3, r3, #8
 8009914:	431a      	orrs	r2, r3
 8009916:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
 800991a:	4313      	orrs	r3, r2
 800991c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8009920:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8009924:	4611      	mov	r1, r2
 8009926:	4618      	mov	r0, r3
 8009928:	f7fb fd3b 	bl	80053a2 <_ZN8touchgfx9colortypeC1Em>
 800992c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800992e:	67fc      	str	r4, [r7, #124]	; 0x7c
 8009930:	61bb      	str	r3, [r7, #24]
        color = newColor;
 8009932:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009934:	69ba      	ldr	r2, [r7, #24]
 8009936:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8009938:	bf00      	nop
    textArea2.setLinespacing(0);
 800993a:	697b      	ldr	r3, [r7, #20]
 800993c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8009940:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009944:	2300      	movs	r3, #0
 8009946:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
        linespace = space;
 800994a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800994e:	f8b7 2082 	ldrh.w	r2, [r7, #130]	; 0x82
 8009952:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 8009954:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	3384      	adds	r3, #132	; 0x84
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	f8d7 4084 	ldr.w	r4, [r7, #132]	; 0x84
 8009962:	463a      	mov	r2, r7
 8009964:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8009968:	4610      	mov	r0, r2
 800996a:	4798      	blx	r3
 800996c:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8009970:	463a      	mov	r2, r7
 8009972:	ca07      	ldmia	r2, {r0, r1, r2}
 8009974:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 8009978:	bf00      	nop
    textArea2.setTypedText(touchgfx::TypedText(T___SINGLEUSE_WSEF));
 800997a:	697b      	ldr	r3, [r7, #20]
 800997c:	f503 7494 	add.w	r4, r3, #296	; 0x128
 8009980:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009984:	2103      	movs	r1, #3
 8009986:	4618      	mov	r0, r3
 8009988:	f7ff faa8 	bl	8008edc <_ZN8touchgfx9TypedTextC1Et>
 800998c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009990:	4619      	mov	r1, r3
 8009992:	4620      	mov	r0, r4
 8009994:	f012 faee 	bl	801bf74 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8009998:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800999c:	4618      	mov	r0, r3
 800999e:	f7fd ff01 	bl	80077a4 <_ZN8touchgfx9TypedTextD1Ev>
 80099a2:	e001      	b.n	80099a8 <_ZN15Screen2ViewBaseC1Ev+0x370>
 80099a4:	0802ca68 	.word	0x0802ca68
    add(textArea2);
 80099a8:	697a      	ldr	r2, [r7, #20]
 80099aa:	697b      	ldr	r3, [r7, #20]
 80099ac:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80099b0:	4619      	mov	r1, r3
 80099b2:	4610      	mov	r0, r2
 80099b4:	f7ff fa50 	bl	8008e58 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 80099b8:	697b      	ldr	r3, [r7, #20]
 80099ba:	4618      	mov	r0, r3
 80099bc:	378c      	adds	r7, #140	; 0x8c
 80099be:	46bd      	mov	sp, r7
 80099c0:	bd90      	pop	{r4, r7, pc}
 80099c2:	bf00      	nop

080099c4 <_ZN15Screen2ViewBaseD1Ev>:

Screen2ViewBase::~Screen2ViewBase()
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b082      	sub	sp, #8
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
 80099cc:	4a12      	ldr	r2, [pc, #72]	; (8009a18 <_ZN15Screen2ViewBaseD1Ev+0x54>)
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	601a      	str	r2, [r3, #0]
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80099d8:	4618      	mov	r0, r3
 80099da:	f7ff fdd7 	bl	800958c <_ZN8touchgfx8TextAreaD1Ev>
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	33e0      	adds	r3, #224	; 0xe0
 80099e2:	4618      	mov	r0, r3
 80099e4:	f7ff fdd2 	bl	800958c <_ZN8touchgfx8TextAreaD1Ev>
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	3398      	adds	r3, #152	; 0x98
 80099ec:	4618      	mov	r0, r3
 80099ee:	f7ff fdcd 	bl	800958c <_ZN8touchgfx8TextAreaD1Ev>
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	336c      	adds	r3, #108	; 0x6c
 80099f6:	4618      	mov	r0, r3
 80099f8:	f7ff fda6 	bl	8009548 <_ZN8touchgfx13ScalableImageD1Ev>
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	3340      	adds	r3, #64	; 0x40
 8009a00:	4618      	mov	r0, r3
 8009a02:	f7ff fd5d 	bl	80094c0 <_ZN8touchgfx3BoxD1Ev>
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	4618      	mov	r0, r3
 8009a0a:	f7ff fdf3 	bl	80095f4 <_ZN8touchgfx4ViewI16Screen2PresenterED1Ev>
{

}
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	4618      	mov	r0, r3
 8009a12:	3708      	adds	r7, #8
 8009a14:	46bd      	mov	sp, r7
 8009a16:	bd80      	pop	{r7, pc}
 8009a18:	0802ca68 	.word	0x0802ca68

08009a1c <_ZN15Screen2ViewBaseD0Ev>:
Screen2ViewBase::~Screen2ViewBase()
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b082      	sub	sp, #8
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
}
 8009a24:	6878      	ldr	r0, [r7, #4]
 8009a26:	f7ff ffcd 	bl	80099c4 <_ZN15Screen2ViewBaseD1Ev>
 8009a2a:	f44f 71b8 	mov.w	r1, #368	; 0x170
 8009a2e:	6878      	ldr	r0, [r7, #4]
 8009a30:	f01e feff 	bl	8028832 <_ZdlPvj>
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	4618      	mov	r0, r3
 8009a38:	3708      	adds	r7, #8
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bd80      	pop	{r7, pc}

08009a3e <_ZN15Screen2ViewBase11setupScreenEv>:

void Screen2ViewBase::setupScreen()
{
 8009a3e:	b480      	push	{r7}
 8009a40:	b083      	sub	sp, #12
 8009a42:	af00      	add	r7, sp, #0
 8009a44:	6078      	str	r0, [r7, #4]

}
 8009a46:	bf00      	nop
 8009a48:	370c      	adds	r7, #12
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a50:	4770      	bx	lr

08009a52 <_ZN15Screen2ViewBase14handleKeyEventEh>:

void Screen2ViewBase::handleKeyEvent(uint8_t key)
{
 8009a52:	b580      	push	{r7, lr}
 8009a54:	b082      	sub	sp, #8
 8009a56:	af00      	add	r7, sp, #0
 8009a58:	6078      	str	r0, [r7, #4]
 8009a5a:	460b      	mov	r3, r1
 8009a5c:	70fb      	strb	r3, [r7, #3]
    if(1 == key)
 8009a5e:	78fb      	ldrb	r3, [r7, #3]
 8009a60:	2b01      	cmp	r3, #1
 8009a62:	d106      	bne.n	8009a72 <_ZN15Screen2ViewBase14handleKeyEventEh+0x20>
    {
        //Interaction1
        //When hardware button 1 clicked change screen to Screen1
        //Go to Screen1 with block transition
        application().gotoScreen1ScreenBlockTransition();
 8009a64:	6878      	ldr	r0, [r7, #4]
 8009a66:	f7ff fdb9 	bl	80095dc <_ZN15Screen2ViewBase11applicationEv>
 8009a6a:	4603      	mov	r3, r0
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	f7fe fa0b 	bl	8007e88 <_ZN23FrontendApplicationBase32gotoScreen1ScreenBlockTransitionEv>
    
    }
}
 8009a72:	bf00      	nop
 8009a74:	3708      	adds	r7, #8
 8009a76:	46bd      	mov	sp, r7
 8009a78:	bd80      	pop	{r7, pc}
	...

08009a7c <_ZN8touchgfx4ViewI16Screen2PresenterEC1Ev>:
    View()
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b082      	sub	sp, #8
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
        : presenter(0)
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	4618      	mov	r0, r3
 8009a88:	f015 fb22 	bl	801f0d0 <_ZN8touchgfx6ScreenC1Ev>
 8009a8c:	4a05      	ldr	r2, [pc, #20]	; (8009aa4 <_ZN8touchgfx4ViewI16Screen2PresenterEC1Ev+0x28>)
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	601a      	str	r2, [r3, #0]
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	2200      	movs	r2, #0
 8009a96:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	3708      	adds	r7, #8
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	bd80      	pop	{r7, pc}
 8009aa2:	bf00      	nop
 8009aa4:	0802ca9c 	.word	0x0802ca9c

08009aa8 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	af00      	add	r7, sp, #0
 8009aac:	4801      	ldr	r0, [pc, #4]	; (8009ab4 <__tcf_0+0xc>)
 8009aae:	f7fd fe57 	bl	8007760 <_ZN8touchgfx13GeneratedFontD1Ev>
 8009ab2:	bd80      	pop	{r7, pc}
 8009ab4:	2400b23c 	.word	0x2400b23c

08009ab8 <_Z23getFont_verdana_10_4bppv>:
{
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b08e      	sub	sp, #56	; 0x38
 8009abc:	af0e      	add	r7, sp, #56	; 0x38
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8009abe:	4b21      	ldr	r3, [pc, #132]	; (8009b44 <_Z23getFont_verdana_10_4bppv+0x8c>)
 8009ac0:	781b      	ldrb	r3, [r3, #0]
 8009ac2:	f3bf 8f5b 	dmb	ish
 8009ac6:	b2db      	uxtb	r3, r3
 8009ac8:	f003 0301 	and.w	r3, r3, #1
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	bf0c      	ite	eq
 8009ad0:	2301      	moveq	r3, #1
 8009ad2:	2300      	movne	r3, #0
 8009ad4:	b2db      	uxtb	r3, r3
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d030      	beq.n	8009b3c <_Z23getFont_verdana_10_4bppv+0x84>
 8009ada:	481a      	ldr	r0, [pc, #104]	; (8009b44 <_Z23getFont_verdana_10_4bppv+0x8c>)
 8009adc:	f01e feab 	bl	8028836 <__cxa_guard_acquire>
 8009ae0:	4603      	mov	r3, r0
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	bf14      	ite	ne
 8009ae6:	2301      	movne	r3, #1
 8009ae8:	2300      	moveq	r3, #0
 8009aea:	b2db      	uxtb	r3, r3
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d025      	beq.n	8009b3c <_Z23getFont_verdana_10_4bppv+0x84>
 8009af0:	2300      	movs	r3, #0
 8009af2:	930c      	str	r3, [sp, #48]	; 0x30
 8009af4:	2300      	movs	r3, #0
 8009af6:	930b      	str	r3, [sp, #44]	; 0x2c
 8009af8:	2300      	movs	r3, #0
 8009afa:	930a      	str	r3, [sp, #40]	; 0x28
 8009afc:	233f      	movs	r3, #63	; 0x3f
 8009afe:	9309      	str	r3, [sp, #36]	; 0x24
 8009b00:	4b11      	ldr	r3, [pc, #68]	; (8009b48 <_Z23getFont_verdana_10_4bppv+0x90>)
 8009b02:	9308      	str	r3, [sp, #32]
 8009b04:	4b11      	ldr	r3, [pc, #68]	; (8009b4c <_Z23getFont_verdana_10_4bppv+0x94>)
 8009b06:	9307      	str	r3, [sp, #28]
 8009b08:	2300      	movs	r3, #0
 8009b0a:	9306      	str	r3, [sp, #24]
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	9305      	str	r3, [sp, #20]
 8009b10:	2301      	movs	r3, #1
 8009b12:	9304      	str	r3, [sp, #16]
 8009b14:	2304      	movs	r3, #4
 8009b16:	9303      	str	r3, [sp, #12]
 8009b18:	2300      	movs	r3, #0
 8009b1a:	9302      	str	r3, [sp, #8]
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	9301      	str	r3, [sp, #4]
 8009b20:	230a      	movs	r3, #10
 8009b22:	9300      	str	r3, [sp, #0]
 8009b24:	230a      	movs	r3, #10
 8009b26:	2201      	movs	r2, #1
 8009b28:	4909      	ldr	r1, [pc, #36]	; (8009b50 <_Z23getFont_verdana_10_4bppv+0x98>)
 8009b2a:	480a      	ldr	r0, [pc, #40]	; (8009b54 <_Z23getFont_verdana_10_4bppv+0x9c>)
 8009b2c:	f7ff f88c 	bl	8008c48 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8009b30:	4809      	ldr	r0, [pc, #36]	; (8009b58 <_Z23getFont_verdana_10_4bppv+0xa0>)
 8009b32:	f01e fecb 	bl	80288cc <atexit>
 8009b36:	4803      	ldr	r0, [pc, #12]	; (8009b44 <_Z23getFont_verdana_10_4bppv+0x8c>)
 8009b38:	f01e fe89 	bl	802884e <__cxa_guard_release>
    return verdana_10_4bpp;
 8009b3c:	4b05      	ldr	r3, [pc, #20]	; (8009b54 <_Z23getFont_verdana_10_4bppv+0x9c>)
}
 8009b3e:	4618      	mov	r0, r3
 8009b40:	46bd      	mov	sp, r7
 8009b42:	bd80      	pop	{r7, pc}
 8009b44:	2400b268 	.word	0x2400b268
 8009b48:	0802da88 	.word	0x0802da88
 8009b4c:	0802da94 	.word	0x0802da94
 8009b50:	900007d4 	.word	0x900007d4
 8009b54:	2400b23c 	.word	0x2400b23c
 8009b58:	08009aa9 	.word	0x08009aa9

08009b5c <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 25, 24, 20, 0, 0, 4, 1, 1, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	af00      	add	r7, sp, #0
 8009b60:	4801      	ldr	r0, [pc, #4]	; (8009b68 <__tcf_0+0xc>)
 8009b62:	f7fd fdfd 	bl	8007760 <_ZN8touchgfx13GeneratedFontD1Ev>
 8009b66:	bd80      	pop	{r7, pc}
 8009b68:	2400b26c 	.word	0x2400b26c

08009b6c <_Z23getFont_verdana_20_4bppv>:
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b08e      	sub	sp, #56	; 0x38
 8009b70:	af0e      	add	r7, sp, #56	; 0x38
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 25, 24, 20, 0, 0, 4, 1, 1, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8009b72:	4b21      	ldr	r3, [pc, #132]	; (8009bf8 <_Z23getFont_verdana_20_4bppv+0x8c>)
 8009b74:	781b      	ldrb	r3, [r3, #0]
 8009b76:	f3bf 8f5b 	dmb	ish
 8009b7a:	b2db      	uxtb	r3, r3
 8009b7c:	f003 0301 	and.w	r3, r3, #1
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	bf0c      	ite	eq
 8009b84:	2301      	moveq	r3, #1
 8009b86:	2300      	movne	r3, #0
 8009b88:	b2db      	uxtb	r3, r3
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d030      	beq.n	8009bf0 <_Z23getFont_verdana_20_4bppv+0x84>
 8009b8e:	481a      	ldr	r0, [pc, #104]	; (8009bf8 <_Z23getFont_verdana_20_4bppv+0x8c>)
 8009b90:	f01e fe51 	bl	8028836 <__cxa_guard_acquire>
 8009b94:	4603      	mov	r3, r0
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	bf14      	ite	ne
 8009b9a:	2301      	movne	r3, #1
 8009b9c:	2300      	moveq	r3, #0
 8009b9e:	b2db      	uxtb	r3, r3
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d025      	beq.n	8009bf0 <_Z23getFont_verdana_20_4bppv+0x84>
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	930c      	str	r3, [sp, #48]	; 0x30
 8009ba8:	2300      	movs	r3, #0
 8009baa:	930b      	str	r3, [sp, #44]	; 0x2c
 8009bac:	2300      	movs	r3, #0
 8009bae:	930a      	str	r3, [sp, #40]	; 0x28
 8009bb0:	233f      	movs	r3, #63	; 0x3f
 8009bb2:	9309      	str	r3, [sp, #36]	; 0x24
 8009bb4:	4b11      	ldr	r3, [pc, #68]	; (8009bfc <_Z23getFont_verdana_20_4bppv+0x90>)
 8009bb6:	9308      	str	r3, [sp, #32]
 8009bb8:	4b11      	ldr	r3, [pc, #68]	; (8009c00 <_Z23getFont_verdana_20_4bppv+0x94>)
 8009bba:	9307      	str	r3, [sp, #28]
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	9306      	str	r3, [sp, #24]
 8009bc0:	2301      	movs	r3, #1
 8009bc2:	9305      	str	r3, [sp, #20]
 8009bc4:	2301      	movs	r3, #1
 8009bc6:	9304      	str	r3, [sp, #16]
 8009bc8:	2304      	movs	r3, #4
 8009bca:	9303      	str	r3, [sp, #12]
 8009bcc:	2300      	movs	r3, #0
 8009bce:	9302      	str	r3, [sp, #8]
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	9301      	str	r3, [sp, #4]
 8009bd4:	2314      	movs	r3, #20
 8009bd6:	9300      	str	r3, [sp, #0]
 8009bd8:	2318      	movs	r3, #24
 8009bda:	2219      	movs	r2, #25
 8009bdc:	4909      	ldr	r1, [pc, #36]	; (8009c04 <_Z23getFont_verdana_20_4bppv+0x98>)
 8009bde:	480a      	ldr	r0, [pc, #40]	; (8009c08 <_Z23getFont_verdana_20_4bppv+0x9c>)
 8009be0:	f7ff f832 	bl	8008c48 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8009be4:	4809      	ldr	r0, [pc, #36]	; (8009c0c <_Z23getFont_verdana_20_4bppv+0xa0>)
 8009be6:	f01e fe71 	bl	80288cc <atexit>
 8009bea:	4803      	ldr	r0, [pc, #12]	; (8009bf8 <_Z23getFont_verdana_20_4bppv+0x8c>)
 8009bec:	f01e fe2f 	bl	802884e <__cxa_guard_release>
    return verdana_20_4bpp;
 8009bf0:	4b05      	ldr	r3, [pc, #20]	; (8009c08 <_Z23getFont_verdana_20_4bppv+0x9c>)
}
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	bd80      	pop	{r7, pc}
 8009bf8:	2400b298 	.word	0x2400b298
 8009bfc:	0802da8c 	.word	0x0802da8c
 8009c00:	0802da98 	.word	0x0802da98
 8009c04:	900007e4 	.word	0x900007e4
 8009c08:	2400b26c 	.word	0x2400b26c
 8009c0c:	08009b5d 	.word	0x08009b5d

08009c10 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8009c10:	b580      	push	{r7, lr}
 8009c12:	af00      	add	r7, sp, #0
 8009c14:	4801      	ldr	r0, [pc, #4]	; (8009c1c <__tcf_0+0xc>)
 8009c16:	f7fd fda3 	bl	8007760 <_ZN8touchgfx13GeneratedFontD1Ev>
 8009c1a:	bd80      	pop	{r7, pc}
 8009c1c:	2400b29c 	.word	0x2400b29c

08009c20 <_Z23getFont_verdana_40_4bppv>:
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b08e      	sub	sp, #56	; 0x38
 8009c24:	af0e      	add	r7, sp, #56	; 0x38
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8009c26:	4b21      	ldr	r3, [pc, #132]	; (8009cac <_Z23getFont_verdana_40_4bppv+0x8c>)
 8009c28:	781b      	ldrb	r3, [r3, #0]
 8009c2a:	f3bf 8f5b 	dmb	ish
 8009c2e:	b2db      	uxtb	r3, r3
 8009c30:	f003 0301 	and.w	r3, r3, #1
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	bf0c      	ite	eq
 8009c38:	2301      	moveq	r3, #1
 8009c3a:	2300      	movne	r3, #0
 8009c3c:	b2db      	uxtb	r3, r3
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d030      	beq.n	8009ca4 <_Z23getFont_verdana_40_4bppv+0x84>
 8009c42:	481a      	ldr	r0, [pc, #104]	; (8009cac <_Z23getFont_verdana_40_4bppv+0x8c>)
 8009c44:	f01e fdf7 	bl	8028836 <__cxa_guard_acquire>
 8009c48:	4603      	mov	r3, r0
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	bf14      	ite	ne
 8009c4e:	2301      	movne	r3, #1
 8009c50:	2300      	moveq	r3, #0
 8009c52:	b2db      	uxtb	r3, r3
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d025      	beq.n	8009ca4 <_Z23getFont_verdana_40_4bppv+0x84>
 8009c58:	2300      	movs	r3, #0
 8009c5a:	930c      	str	r3, [sp, #48]	; 0x30
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009c60:	2300      	movs	r3, #0
 8009c62:	930a      	str	r3, [sp, #40]	; 0x28
 8009c64:	233f      	movs	r3, #63	; 0x3f
 8009c66:	9309      	str	r3, [sp, #36]	; 0x24
 8009c68:	4b11      	ldr	r3, [pc, #68]	; (8009cb0 <_Z23getFont_verdana_40_4bppv+0x90>)
 8009c6a:	9308      	str	r3, [sp, #32]
 8009c6c:	4b11      	ldr	r3, [pc, #68]	; (8009cb4 <_Z23getFont_verdana_40_4bppv+0x94>)
 8009c6e:	9307      	str	r3, [sp, #28]
 8009c70:	2300      	movs	r3, #0
 8009c72:	9306      	str	r3, [sp, #24]
 8009c74:	2300      	movs	r3, #0
 8009c76:	9305      	str	r3, [sp, #20]
 8009c78:	2301      	movs	r3, #1
 8009c7a:	9304      	str	r3, [sp, #16]
 8009c7c:	2304      	movs	r3, #4
 8009c7e:	9303      	str	r3, [sp, #12]
 8009c80:	2300      	movs	r3, #0
 8009c82:	9302      	str	r3, [sp, #8]
 8009c84:	2300      	movs	r3, #0
 8009c86:	9301      	str	r3, [sp, #4]
 8009c88:	2328      	movs	r3, #40	; 0x28
 8009c8a:	9300      	str	r3, [sp, #0]
 8009c8c:	2328      	movs	r3, #40	; 0x28
 8009c8e:	2201      	movs	r2, #1
 8009c90:	4909      	ldr	r1, [pc, #36]	; (8009cb8 <_Z23getFont_verdana_40_4bppv+0x98>)
 8009c92:	480a      	ldr	r0, [pc, #40]	; (8009cbc <_Z23getFont_verdana_40_4bppv+0x9c>)
 8009c94:	f7fe ffd8 	bl	8008c48 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8009c98:	4809      	ldr	r0, [pc, #36]	; (8009cc0 <_Z23getFont_verdana_40_4bppv+0xa0>)
 8009c9a:	f01e fe17 	bl	80288cc <atexit>
 8009c9e:	4803      	ldr	r0, [pc, #12]	; (8009cac <_Z23getFont_verdana_40_4bppv+0x8c>)
 8009ca0:	f01e fdd5 	bl	802884e <__cxa_guard_release>
    return verdana_40_4bpp;
 8009ca4:	4b05      	ldr	r3, [pc, #20]	; (8009cbc <_Z23getFont_verdana_40_4bppv+0x9c>)
}
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	bd80      	pop	{r7, pc}
 8009cac:	2400b2c8 	.word	0x2400b2c8
 8009cb0:	0802da90 	.word	0x0802da90
 8009cb4:	0802da9c 	.word	0x0802da9c
 8009cb8:	90000944 	.word	0x90000944
 8009cbc:	2400b29c 	.word	0x2400b29c
 8009cc0:	08009c11 	.word	0x08009c11

08009cc4 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
     * @param  prevChar The Unicode value of the previous character.
     * @param  glyph    the glyph object for the current character.
     *
     * @return The kerning distance between prevChar and glyph char.
     */
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 8009cc4:	b480      	push	{r7}
 8009cc6:	b085      	sub	sp, #20
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	60f8      	str	r0, [r7, #12]
 8009ccc:	460b      	mov	r3, r1
 8009cce:	607a      	str	r2, [r7, #4]
 8009cd0:	817b      	strh	r3, [r7, #10]
    {
        (void)prevChar; // Unused variable
        (void)glyph;    // Unused variable
        return 0;
 8009cd2:	2300      	movs	r3, #0
    }
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	3714      	adds	r7, #20
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cde:	4770      	bx	lr

08009ce0 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    /**
     * Gets GSUB table. Currently only used for Devanagari fonts.
     *
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
 8009ce0:	b480      	push	{r7}
 8009ce2:	b083      	sub	sp, #12
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8009ce8:	2300      	movs	r3, #0
    }
 8009cea:	4618      	mov	r0, r3
 8009cec:	370c      	adds	r7, #12
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf4:	4770      	bx	lr

08009cf6 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 8009cf6:	b480      	push	{r7}
 8009cf8:	b083      	sub	sp, #12
 8009cfa:	af00      	add	r7, sp, #0
 8009cfc:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8009cfe:	2300      	movs	r3, #0
    }
 8009d00:	4618      	mov	r0, r3
 8009d02:	370c      	adds	r7, #12
 8009d04:	46bd      	mov	sp, r7
 8009d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0a:	4770      	bx	lr

08009d0c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 8009d0c:	b480      	push	{r7}
 8009d0e:	b085      	sub	sp, #20
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	60f8      	str	r0, [r7, #12]
 8009d14:	60b9      	str	r1, [r7, #8]
 8009d16:	4613      	mov	r3, r2
 8009d18:	80fb      	strh	r3, [r7, #6]
        typedTexts = data;
 8009d1a:	4a07      	ldr	r2, [pc, #28]	; (8009d38 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	6013      	str	r3, [r2, #0]
        fonts = f;
 8009d20:	4a06      	ldr	r2, [pc, #24]	; (8009d3c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 8009d22:	68bb      	ldr	r3, [r7, #8]
 8009d24:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 8009d26:	4a06      	ldr	r2, [pc, #24]	; (8009d40 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 8009d28:	88fb      	ldrh	r3, [r7, #6]
 8009d2a:	8013      	strh	r3, [r2, #0]
    }
 8009d2c:	bf00      	nop
 8009d2e:	3714      	adds	r7, #20
 8009d30:	46bd      	mov	sp, r7
 8009d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d36:	4770      	bx	lr
 8009d38:	24026290 	.word	0x24026290
 8009d3c:	24026298 	.word	0x24026298
 8009d40:	24026294 	.word	0x24026294

08009d44 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8009d44:	b40e      	push	{r1, r2, r3}
 8009d46:	b580      	push	{r7, lr}
 8009d48:	b085      	sub	sp, #20
 8009d4a:	af00      	add	r7, sp, #0
 8009d4c:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 8009d4e:	f107 0320 	add.w	r3, r7, #32
 8009d52:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8009d54:	68bb      	ldr	r3, [r7, #8]
 8009d56:	69fa      	ldr	r2, [r7, #28]
 8009d58:	2100      	movs	r1, #0
 8009d5a:	6878      	ldr	r0, [r7, #4]
 8009d5c:	f014 fdcc 	bl	801e8f8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8009d60:	4603      	mov	r3, r0
 8009d62:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8009d64:	89fb      	ldrh	r3, [r7, #14]
}
 8009d66:	4618      	mov	r0, r3
 8009d68:	3714      	adds	r7, #20
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009d70:	b003      	add	sp, #12
 8009d72:	4770      	bx	lr

08009d74 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8009d74:	b40c      	push	{r2, r3}
 8009d76:	b580      	push	{r7, lr}
 8009d78:	b084      	sub	sp, #16
 8009d7a:	af00      	add	r7, sp, #0
 8009d7c:	6078      	str	r0, [r7, #4]
 8009d7e:	460b      	mov	r3, r1
 8009d80:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 8009d82:	f107 031c 	add.w	r3, r7, #28
 8009d86:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8009d88:	78f9      	ldrb	r1, [r7, #3]
 8009d8a:	68bb      	ldr	r3, [r7, #8]
 8009d8c:	69ba      	ldr	r2, [r7, #24]
 8009d8e:	6878      	ldr	r0, [r7, #4]
 8009d90:	f014 fdb2 	bl	801e8f8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8009d94:	4603      	mov	r3, r0
 8009d96:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8009d98:	89fb      	ldrh	r3, [r7, #14]
}
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	3710      	adds	r7, #16
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009da4:	b002      	add	sp, #8
 8009da6:	4770      	bx	lr

08009da8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b08a      	sub	sp, #40	; 0x28
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
 8009db0:	460b      	mov	r3, r1
 8009db2:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d016      	beq.n	8009dea <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	3322      	adds	r3, #34	; 0x22
 8009dc0:	627b      	str	r3, [r7, #36]	; 0x24
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8009dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dc4:	8adb      	ldrh	r3, [r3, #22]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d105      	bne.n	8009dd6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 8009dca:	4b43      	ldr	r3, [pc, #268]	; (8009ed8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8009dcc:	4a43      	ldr	r2, [pc, #268]	; (8009edc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8009dce:	21c5      	movs	r1, #197	; 0xc5
 8009dd0:	4843      	ldr	r0, [pc, #268]	; (8009ee0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8009dd2:	f01e fd5d 	bl	8028890 <__assert_func>
            return buffer[pos];
 8009dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dd8:	8a9b      	ldrh	r3, [r3, #20]
 8009dda:	461a      	mov	r2, r3
 8009ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dde:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d001      	beq.n	8009dea <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8009de6:	2301      	movs	r3, #1
 8009de8:	e000      	b.n	8009dec <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 8009dea:	2300      	movs	r3, #0
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d06a      	beq.n	8009ec6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 8009df0:	6878      	ldr	r0, [r7, #4]
 8009df2:	f016 f87d 	bl	801fef0 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	3322      	adds	r3, #34	; 0x22
 8009dfa:	623b      	str	r3, [r7, #32]
 8009dfc:	2301      	movs	r3, #1
 8009dfe:	83fb      	strh	r3, [r7, #30]
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8009e00:	6a3b      	ldr	r3, [r7, #32]
 8009e02:	8adb      	ldrh	r3, [r3, #22]
 8009e04:	8bfa      	ldrh	r2, [r7, #30]
 8009e06:	429a      	cmp	r2, r3
 8009e08:	d305      	bcc.n	8009e16 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 8009e0a:	4b36      	ldr	r3, [pc, #216]	; (8009ee4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 8009e0c:	4a36      	ldr	r2, [pc, #216]	; (8009ee8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 8009e0e:	21cb      	movs	r1, #203	; 0xcb
 8009e10:	4833      	ldr	r0, [pc, #204]	; (8009ee0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8009e12:	f01e fd3d 	bl	8028890 <__assert_func>
            const uint16_t index = pos + offset;
 8009e16:	6a3b      	ldr	r3, [r7, #32]
 8009e18:	8a9a      	ldrh	r2, [r3, #20]
 8009e1a:	8bfb      	ldrh	r3, [r7, #30]
 8009e1c:	4413      	add	r3, r2
 8009e1e:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 8009e20:	8bbb      	ldrh	r3, [r7, #28]
 8009e22:	2b09      	cmp	r3, #9
 8009e24:	d801      	bhi.n	8009e2a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 8009e26:	8bbb      	ldrh	r3, [r7, #28]
 8009e28:	e001      	b.n	8009e2e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 8009e2a:	8bbb      	ldrh	r3, [r7, #28]
 8009e2c:	3b0a      	subs	r3, #10
 8009e2e:	6a3a      	ldr	r2, [r7, #32]
 8009e30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009e34:	f640 123f 	movw	r2, #2367	; 0x93f
 8009e38:	4293      	cmp	r3, r2
 8009e3a:	bf0c      	ite	eq
 8009e3c:	2301      	moveq	r3, #1
 8009e3e:	2300      	movne	r3, #0
 8009e40:	b2db      	uxtb	r3, r3
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d03f      	beq.n	8009ec6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	3322      	adds	r3, #34	; 0x22
 8009e4a:	687a      	ldr	r2, [r7, #4]
 8009e4c:	3222      	adds	r2, #34	; 0x22
 8009e4e:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 8009e50:	68ba      	ldr	r2, [r7, #8]
 8009e52:	8ad2      	ldrh	r2, [r2, #22]
 8009e54:	2a00      	cmp	r2, #0
 8009e56:	d105      	bne.n	8009e64 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 8009e58:	4b1f      	ldr	r3, [pc, #124]	; (8009ed8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8009e5a:	4a20      	ldr	r2, [pc, #128]	; (8009edc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8009e5c:	21c5      	movs	r1, #197	; 0xc5
 8009e5e:	4820      	ldr	r0, [pc, #128]	; (8009ee0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8009e60:	f01e fd16 	bl	8028890 <__assert_func>
            return buffer[pos];
 8009e64:	68ba      	ldr	r2, [r7, #8]
 8009e66:	8a92      	ldrh	r2, [r2, #20]
 8009e68:	4611      	mov	r1, r2
 8009e6a:	68ba      	ldr	r2, [r7, #8]
 8009e6c:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8009e70:	613b      	str	r3, [r7, #16]
 8009e72:	4613      	mov	r3, r2
 8009e74:	81fb      	strh	r3, [r7, #14]
            buffer[pos] = newChar;
        }

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 8009e76:	693b      	ldr	r3, [r7, #16]
 8009e78:	8adb      	ldrh	r3, [r3, #22]
 8009e7a:	2b01      	cmp	r3, #1
 8009e7c:	d806      	bhi.n	8009e8c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 8009e7e:	4b1b      	ldr	r3, [pc, #108]	; (8009eec <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 8009e80:	4a1b      	ldr	r2, [pc, #108]	; (8009ef0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 8009e82:	f44f 718e 	mov.w	r1, #284	; 0x11c
 8009e86:	4816      	ldr	r0, [pc, #88]	; (8009ee0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8009e88:	f01e fd02 	bl	8028890 <__assert_func>
            const uint16_t index = pos + 1;
 8009e8c:	693b      	ldr	r3, [r7, #16]
 8009e8e:	8a9b      	ldrh	r3, [r3, #20]
 8009e90:	3301      	adds	r3, #1
 8009e92:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 8009e94:	89bb      	ldrh	r3, [r7, #12]
 8009e96:	2b09      	cmp	r3, #9
 8009e98:	d801      	bhi.n	8009e9e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 8009e9a:	89bb      	ldrh	r3, [r7, #12]
 8009e9c:	e000      	b.n	8009ea0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	693a      	ldr	r2, [r7, #16]
 8009ea2:	89f9      	ldrh	r1, [r7, #14]
 8009ea4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 8009ea8:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	3322      	adds	r3, #34	; 0x22
 8009eae:	61bb      	str	r3, [r7, #24]
 8009eb0:	f640 133f 	movw	r3, #2367	; 0x93f
 8009eb4:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 8009eb6:	69bb      	ldr	r3, [r7, #24]
 8009eb8:	8a9b      	ldrh	r3, [r3, #20]
 8009eba:	4619      	mov	r1, r3
 8009ebc:	69bb      	ldr	r3, [r7, #24]
 8009ebe:	8afa      	ldrh	r2, [r7, #22]
 8009ec0:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 8009ec4:	bf00      	nop
        }
    }
    return getNextChar();
 8009ec6:	6878      	ldr	r0, [r7, #4]
 8009ec8:	f015 ff14 	bl	801fcf4 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8009ecc:	4603      	mov	r3, r0
}
 8009ece:	4618      	mov	r0, r3
 8009ed0:	3728      	adds	r7, #40	; 0x28
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	bd80      	pop	{r7, pc}
 8009ed6:	bf00      	nop
 8009ed8:	0802bb80 	.word	0x0802bb80
 8009edc:	0802bb8c 	.word	0x0802bb8c
 8009ee0:	0802bc38 	.word	0x0802bc38
 8009ee4:	0802bc84 	.word	0x0802bc84
 8009ee8:	0802bc94 	.word	0x0802bc94
 8009eec:	0802bd68 	.word	0x0802bd68
 8009ef0:	0802bd74 	.word	0x0802bd74

08009ef4 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b082      	sub	sp, #8
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 8009efc:	6878      	ldr	r0, [r7, #4]
 8009efe:	f015 fec2 	bl	801fc86 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 8009f02:	bf00      	nop
 8009f04:	3708      	adds	r7, #8
 8009f06:	46bd      	mov	sp, r7
 8009f08:	bd80      	pop	{r7, pc}

08009f0a <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 8009f0a:	b580      	push	{r7, lr}
 8009f0c:	b088      	sub	sp, #32
 8009f0e:	af02      	add	r7, sp, #8
 8009f10:	60f8      	str	r0, [r7, #12]
 8009f12:	1d38      	adds	r0, r7, #4
 8009f14:	e880 0006 	stmia.w	r0, {r1, r2}
 8009f18:	603b      	str	r3, [r7, #0]
    va_list pArg;
    va_start(pArg, format);
 8009f1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009f1e:	617b      	str	r3, [r7, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8009f20:	1d39      	adds	r1, r7, #4
 8009f22:	697b      	ldr	r3, [r7, #20]
 8009f24:	9301      	str	r3, [sp, #4]
 8009f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f28:	9300      	str	r3, [sp, #0]
 8009f2a:	6a3b      	ldr	r3, [r7, #32]
 8009f2c:	683a      	ldr	r2, [r7, #0]
 8009f2e:	68f8      	ldr	r0, [r7, #12]
 8009f30:	f013 f94c 	bl	801d1cc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 8009f34:	bf00      	nop
 8009f36:	3718      	adds	r7, #24
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	bd80      	pop	{r7, pc}

08009f3c <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8009f3c:	b590      	push	{r4, r7, lr}
 8009f3e:	b085      	sub	sp, #20
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	4603      	mov	r3, r0
 8009f44:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 8009f46:	2300      	movs	r3, #0
 8009f48:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 8009f4a:	88fb      	ldrh	r3, [r7, #6]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d127      	bne.n	8009fa0 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 8009f50:	88fb      	ldrh	r3, [r7, #6]
 8009f52:	4a1e      	ldr	r2, [pc, #120]	; (8009fcc <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8009f54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d016      	beq.n	8009f8a <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 8009f5c:	88fb      	ldrh	r3, [r7, #6]
 8009f5e:	4a1b      	ldr	r2, [pc, #108]	; (8009fcc <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8009f60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009f64:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8009f66:	68bb      	ldr	r3, [r7, #8]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	68ba      	ldr	r2, [r7, #8]
 8009f6c:	4413      	add	r3, r2
 8009f6e:	4a18      	ldr	r2, [pc, #96]	; (8009fd0 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8009f70:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8009f72:	68bb      	ldr	r3, [r7, #8]
 8009f74:	685b      	ldr	r3, [r3, #4]
 8009f76:	68ba      	ldr	r2, [r7, #8]
 8009f78:	4413      	add	r3, r2
 8009f7a:	4a16      	ldr	r2, [pc, #88]	; (8009fd4 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8009f7c:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8009f7e:	68bb      	ldr	r3, [r7, #8]
 8009f80:	689b      	ldr	r3, [r3, #8]
 8009f82:	68ba      	ldr	r2, [r7, #8]
 8009f84:	4413      	add	r3, r2
 8009f86:	60fb      	str	r3, [r7, #12]
 8009f88:	e00a      	b.n	8009fa0 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            // Compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 8009f8a:	4b11      	ldr	r3, [pc, #68]	; (8009fd0 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8009f8c:	4a12      	ldr	r2, [pc, #72]	; (8009fd8 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 8009f8e:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8009f90:	4a12      	ldr	r2, [pc, #72]	; (8009fdc <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 8009f92:	4b10      	ldr	r3, [pc, #64]	; (8009fd4 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8009f94:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8009f96:	88fb      	ldrh	r3, [r7, #6]
 8009f98:	4a11      	ldr	r2, [pc, #68]	; (8009fe0 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 8009f9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009f9e:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d00d      	beq.n	8009fc2 <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 8009fa6:	4a0f      	ldr	r2, [pc, #60]	; (8009fe4 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 8009fa8:	88fb      	ldrh	r3, [r7, #6]
 8009faa:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8009fac:	f000 f83e 	bl	800a02c <_ZN17TypedTextDatabase8getFontsEv>
 8009fb0:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8009fb2:	f000 f833 	bl	800a01c <_ZN17TypedTextDatabase15getInstanceSizeEv>
 8009fb6:	4603      	mov	r3, r0
 8009fb8:	461a      	mov	r2, r3
 8009fba:	4621      	mov	r1, r4
 8009fbc:	68f8      	ldr	r0, [r7, #12]
 8009fbe:	f7ff fea5 	bl	8009d0c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 8009fc2:	bf00      	nop
 8009fc4:	3714      	adds	r7, #20
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	bd90      	pop	{r4, r7, pc}
 8009fca:	bf00      	nop
 8009fcc:	2400b2cc 	.word	0x2400b2cc
 8009fd0:	2400b2d4 	.word	0x2400b2d4
 8009fd4:	2400b2d8 	.word	0x2400b2d8
 8009fd8:	9000096c 	.word	0x9000096c
 8009fdc:	90000954 	.word	0x90000954
 8009fe0:	900009f4 	.word	0x900009f4
 8009fe4:	2400b2d0 	.word	0x2400b2d0

08009fe8 <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 8009fe8:	b480      	push	{r7}
 8009fea:	b083      	sub	sp, #12
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
 8009ff0:	460b      	mov	r3, r1
 8009ff2:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8009ff4:	4b07      	ldr	r3, [pc, #28]	; (800a014 <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 8009ff6:	681a      	ldr	r2, [r3, #0]
 8009ff8:	4b07      	ldr	r3, [pc, #28]	; (800a018 <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 8009ffa:	6819      	ldr	r1, [r3, #0]
 8009ffc:	887b      	ldrh	r3, [r7, #2]
 8009ffe:	009b      	lsls	r3, r3, #2
 800a000:	440b      	add	r3, r1
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	005b      	lsls	r3, r3, #1
 800a006:	4413      	add	r3, r2
}
 800a008:	4618      	mov	r0, r3
 800a00a:	370c      	adds	r7, #12
 800a00c:	46bd      	mov	sp, r7
 800a00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a012:	4770      	bx	lr
 800a014:	2400b2d4 	.word	0x2400b2d4
 800a018:	2400b2d8 	.word	0x2400b2d8

0800a01c <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 800a01c:	b480      	push	{r7}
 800a01e:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 800a020:	2306      	movs	r3, #6
}
 800a022:	4618      	mov	r0, r3
 800a024:	46bd      	mov	sp, r7
 800a026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02a:	4770      	bx	lr

0800a02c <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 800a02c:	b480      	push	{r7}
 800a02e:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 800a030:	4b02      	ldr	r3, [pc, #8]	; (800a03c <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 800a032:	4618      	mov	r0, r3
 800a034:	46bd      	mov	sp, r7
 800a036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03a:	4770      	bx	lr
 800a03c:	2400b2dc 	.word	0x2400b2dc

0800a040 <_Z41__static_initialization_and_destruction_0ii>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 800a040:	b580      	push	{r7, lr}
 800a042:	b082      	sub	sp, #8
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
 800a048:	6039      	str	r1, [r7, #0]
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	2b01      	cmp	r3, #1
 800a04e:	d113      	bne.n	800a078 <_Z41__static_initialization_and_destruction_0ii+0x38>
 800a050:	683b      	ldr	r3, [r7, #0]
 800a052:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a056:	4293      	cmp	r3, r2
 800a058:	d10e      	bne.n	800a078 <_Z41__static_initialization_and_destruction_0ii+0x38>
    &(getFont_verdana_20_4bpp()),
 800a05a:	f7ff fd87 	bl	8009b6c <_Z23getFont_verdana_20_4bppv>
 800a05e:	4603      	mov	r3, r0
};
 800a060:	4a07      	ldr	r2, [pc, #28]	; (800a080 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800a062:	6013      	str	r3, [r2, #0]
    &(getFont_verdana_40_4bpp()),
 800a064:	f7ff fddc 	bl	8009c20 <_Z23getFont_verdana_40_4bppv>
 800a068:	4603      	mov	r3, r0
};
 800a06a:	4a05      	ldr	r2, [pc, #20]	; (800a080 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800a06c:	6053      	str	r3, [r2, #4]
    &(getFont_verdana_10_4bpp())
 800a06e:	f7ff fd23 	bl	8009ab8 <_Z23getFont_verdana_10_4bppv>
 800a072:	4603      	mov	r3, r0
};
 800a074:	4a02      	ldr	r2, [pc, #8]	; (800a080 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800a076:	6093      	str	r3, [r2, #8]
} // namespace TypedTextDatabase
 800a078:	bf00      	nop
 800a07a:	3708      	adds	r7, #8
 800a07c:	46bd      	mov	sp, r7
 800a07e:	bd80      	pop	{r7, pc}
 800a080:	2400b2dc 	.word	0x2400b2dc

0800a084 <_GLOBAL__sub_I_touchgfx_fonts>:
 800a084:	b580      	push	{r7, lr}
 800a086:	af00      	add	r7, sp, #0
 800a088:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800a08c:	2001      	movs	r0, #1
 800a08e:	f7ff ffd7 	bl	800a040 <_Z41__static_initialization_and_destruction_0ii>
 800a092:	bd80      	pop	{r7, pc}

0800a094 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 800a094:	b580      	push	{r7, lr}
 800a096:	b084      	sub	sp, #16
 800a098:	af00      	add	r7, sp, #0
 800a09a:	60f8      	str	r0, [r7, #12]
 800a09c:	60b9      	str	r1, [r7, #8]
 800a09e:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	687a      	ldr	r2, [r7, #4]
 800a0a4:	68b9      	ldr	r1, [r7, #8]
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	f7fd fe4c 	bl	8007d44 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 800a0ac:	4a03      	ldr	r2, [pc, #12]	; (800a0bc <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	601a      	str	r2, [r3, #0]
{

}
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	3710      	adds	r7, #16
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	bd80      	pop	{r7, pc}
 800a0bc:	0802c240 	.word	0x0802c240

0800a0c0 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 800a0c0:	b480      	push	{r7}
 800a0c2:	b083      	sub	sp, #12
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	601a      	str	r2, [r3, #0]
{

}
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	370c      	adds	r7, #12
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0da:	4770      	bx	lr

0800a0dc <_ZN5Model4tickEv>:

void Model::tick()
{
 800a0dc:	b480      	push	{r7}
 800a0de:	b083      	sub	sp, #12
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]

}
 800a0e4:	bf00      	nop
 800a0e6:	370c      	adds	r7, #12
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ee:	4770      	bx	lr

0800a0f0 <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 800a0f0:	b480      	push	{r7}
 800a0f2:	b083      	sub	sp, #12
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
    {
    }
 800a0f8:	bf00      	nop
 800a0fa:	370c      	adds	r7, #12
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a102:	4770      	bx	lr

0800a104 <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 800a104:	b480      	push	{r7}
 800a106:	b083      	sub	sp, #12
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
    {
    }
 800a10c:	bf00      	nop
 800a10e:	370c      	adds	r7, #12
 800a110:	46bd      	mov	sp, r7
 800a112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a116:	4770      	bx	lr

0800a118 <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 800a118:	b480      	push	{r7}
 800a11a:	b083      	sub	sp, #12
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
    {
 800a120:	4a04      	ldr	r2, [pc, #16]	; (800a134 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	601a      	str	r2, [r3, #0]
    }
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	4618      	mov	r0, r3
 800a12a:	370c      	adds	r7, #12
 800a12c:	46bd      	mov	sp, r7
 800a12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a132:	4770      	bx	lr
 800a134:	0802cb64 	.word	0x0802cb64

0800a138 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 800a138:	b580      	push	{r7, lr}
 800a13a:	b082      	sub	sp, #8
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
    }
 800a140:	6878      	ldr	r0, [r7, #4]
 800a142:	f7ff ffe9 	bl	800a118 <_ZN8touchgfx9PresenterD1Ev>
 800a146:	2104      	movs	r1, #4
 800a148:	6878      	ldr	r0, [r7, #4]
 800a14a:	f01e fb72 	bl	8028832 <_ZdlPvj>
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	4618      	mov	r0, r3
 800a152:	3708      	adds	r7, #8
 800a154:	46bd      	mov	sp, r7
 800a156:	bd80      	pop	{r7, pc}

0800a158 <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 800a158:	b480      	push	{r7}
 800a15a:	b083      	sub	sp, #12
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
    {
 800a160:	4a04      	ldr	r2, [pc, #16]	; (800a174 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	601a      	str	r2, [r3, #0]
    }
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	4618      	mov	r0, r3
 800a16a:	370c      	adds	r7, #12
 800a16c:	46bd      	mov	sp, r7
 800a16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a172:	4770      	bx	lr
 800a174:	0802cb64 	.word	0x0802cb64

0800a178 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 800a178:	b480      	push	{r7}
 800a17a:	b083      	sub	sp, #12
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
 800a180:	4a06      	ldr	r2, [pc, #24]	; (800a19c <_ZN13ModelListenerC1Ev+0x24>)
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	601a      	str	r2, [r3, #0]
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	2200      	movs	r2, #0
 800a18a:	605a      	str	r2, [r3, #4]
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	4618      	mov	r0, r3
 800a190:	370c      	adds	r7, #12
 800a192:	46bd      	mov	sp, r7
 800a194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a198:	4770      	bx	lr
 800a19a:	bf00      	nop
 800a19c:	0802cb54 	.word	0x0802cb54

0800a1a0 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 800a1a0:	b480      	push	{r7}
 800a1a2:	b083      	sub	sp, #12
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
 800a1a8:	4a04      	ldr	r2, [pc, #16]	; (800a1bc <_ZN13ModelListenerD1Ev+0x1c>)
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	601a      	str	r2, [r3, #0]
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	370c      	adds	r7, #12
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ba:	4770      	bx	lr
 800a1bc:	0802cb54 	.word	0x0802cb54

0800a1c0 <_ZN13ModelListenerD0Ev>:
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b082      	sub	sp, #8
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
 800a1c8:	6878      	ldr	r0, [r7, #4]
 800a1ca:	f7ff ffe9 	bl	800a1a0 <_ZN13ModelListenerD1Ev>
 800a1ce:	2108      	movs	r1, #8
 800a1d0:	6878      	ldr	r0, [r7, #4]
 800a1d2:	f01e fb2e 	bl	8028832 <_ZdlPvj>
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	4618      	mov	r0, r3
 800a1da:	3708      	adds	r7, #8
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	bd80      	pop	{r7, pc}

0800a1e0 <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	b082      	sub	sp, #8
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	6078      	str	r0, [r7, #4]
 800a1e8:	4a09      	ldr	r2, [pc, #36]	; (800a210 <_ZN16Screen1PresenterD1Ev+0x30>)
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	601a      	str	r2, [r3, #0]
 800a1ee:	4a09      	ldr	r2, [pc, #36]	; (800a214 <_ZN16Screen1PresenterD1Ev+0x34>)
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	605a      	str	r2, [r3, #4]
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	3304      	adds	r3, #4
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	f7ff ffd1 	bl	800a1a0 <_ZN13ModelListenerD1Ev>
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	4618      	mov	r0, r3
 800a202:	f7ff ff89 	bl	800a118 <_ZN8touchgfx9PresenterD1Ev>
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	4618      	mov	r0, r3
 800a20a:	3708      	adds	r7, #8
 800a20c:	46bd      	mov	sp, r7
 800a20e:	bd80      	pop	{r7, pc}
 800a210:	0802cb2c 	.word	0x0802cb2c
 800a214:	0802cb44 	.word	0x0802cb44

0800a218 <_ZThn4_N16Screen1PresenterD1Ev>:
 800a218:	f1a0 0004 	sub.w	r0, r0, #4
 800a21c:	e7e0      	b.n	800a1e0 <_ZN16Screen1PresenterD1Ev>
 800a21e:	bf00      	nop

0800a220 <_ZN16Screen1PresenterD0Ev>:
 800a220:	b580      	push	{r7, lr}
 800a222:	b082      	sub	sp, #8
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
 800a228:	6878      	ldr	r0, [r7, #4]
 800a22a:	f7ff ffd9 	bl	800a1e0 <_ZN16Screen1PresenterD1Ev>
 800a22e:	2110      	movs	r1, #16
 800a230:	6878      	ldr	r0, [r7, #4]
 800a232:	f01e fafe 	bl	8028832 <_ZdlPvj>
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	4618      	mov	r0, r3
 800a23a:	3708      	adds	r7, #8
 800a23c:	46bd      	mov	sp, r7
 800a23e:	bd80      	pop	{r7, pc}

0800a240 <_ZThn4_N16Screen1PresenterD0Ev>:
 800a240:	f1a0 0004 	sub.w	r0, r0, #4
 800a244:	e7ec      	b.n	800a220 <_ZN16Screen1PresenterD0Ev>
	...

0800a248 <_ZN16Screen1PresenterC1ER11Screen1View>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

Screen1Presenter::Screen1Presenter(Screen1View& v)
 800a248:	b580      	push	{r7, lr}
 800a24a:	b082      	sub	sp, #8
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
 800a250:	6039      	str	r1, [r7, #0]
    : view(v)
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	4618      	mov	r0, r3
 800a256:	f7ff ff7f 	bl	800a158 <_ZN8touchgfx9PresenterC1Ev>
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	3304      	adds	r3, #4
 800a25e:	4618      	mov	r0, r3
 800a260:	f7ff ff8a 	bl	800a178 <_ZN13ModelListenerC1Ev>
 800a264:	4a06      	ldr	r2, [pc, #24]	; (800a280 <_ZN16Screen1PresenterC1ER11Screen1View+0x38>)
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	601a      	str	r2, [r3, #0]
 800a26a:	4a06      	ldr	r2, [pc, #24]	; (800a284 <_ZN16Screen1PresenterC1ER11Screen1View+0x3c>)
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	605a      	str	r2, [r3, #4]
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	683a      	ldr	r2, [r7, #0]
 800a274:	60da      	str	r2, [r3, #12]
{

}
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	4618      	mov	r0, r3
 800a27a:	3708      	adds	r7, #8
 800a27c:	46bd      	mov	sp, r7
 800a27e:	bd80      	pop	{r7, pc}
 800a280:	0802cb2c 	.word	0x0802cb2c
 800a284:	0802cb44 	.word	0x0802cb44

0800a288 <_ZN16Screen1Presenter8activateEv>:

void Screen1Presenter::activate()
{
 800a288:	b480      	push	{r7}
 800a28a:	b083      	sub	sp, #12
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]

}
 800a290:	bf00      	nop
 800a292:	370c      	adds	r7, #12
 800a294:	46bd      	mov	sp, r7
 800a296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29a:	4770      	bx	lr

0800a29c <_ZN16Screen1Presenter10deactivateEv>:

void Screen1Presenter::deactivate()
{
 800a29c:	b480      	push	{r7}
 800a29e:	b083      	sub	sp, #12
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]

}
 800a2a4:	bf00      	nop
 800a2a6:	370c      	adds	r7, #12
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ae:	4770      	bx	lr

0800a2b0 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b082      	sub	sp, #8
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	6078      	str	r0, [r7, #4]
 800a2b8:	4a05      	ldr	r2, [pc, #20]	; (800a2d0 <_ZN11Screen1ViewD1Ev+0x20>)
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	601a      	str	r2, [r3, #0]
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	f7ff f869 	bl	8009398 <_ZN15Screen1ViewBaseD1Ev>
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	3708      	adds	r7, #8
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	bd80      	pop	{r7, pc}
 800a2d0:	0802cb7c 	.word	0x0802cb7c

0800a2d4 <_ZN11Screen1ViewD0Ev>:
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	b082      	sub	sp, #8
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	6078      	str	r0, [r7, #4]
 800a2dc:	6878      	ldr	r0, [r7, #4]
 800a2de:	f7ff ffe7 	bl	800a2b0 <_ZN11Screen1ViewD1Ev>
 800a2e2:	f44f 71b8 	mov.w	r1, #368	; 0x170
 800a2e6:	6878      	ldr	r0, [r7, #4]
 800a2e8:	f01e faa3 	bl	8028832 <_ZdlPvj>
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	3708      	adds	r7, #8
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	bd80      	pop	{r7, pc}
	...

0800a2f8 <_ZN11Screen1ViewC1Ev>:
#include <gui/screen1_screen/Screen1View.hpp>

Screen1View::Screen1View()
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b082      	sub	sp, #8
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	4618      	mov	r0, r3
 800a304:	f7fe fe82 	bl	800900c <_ZN15Screen1ViewBaseC1Ev>
 800a308:	4a03      	ldr	r2, [pc, #12]	; (800a318 <_ZN11Screen1ViewC1Ev+0x20>)
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	601a      	str	r2, [r3, #0]
{

}
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	4618      	mov	r0, r3
 800a312:	3708      	adds	r7, #8
 800a314:	46bd      	mov	sp, r7
 800a316:	bd80      	pop	{r7, pc}
 800a318:	0802cb7c 	.word	0x0802cb7c

0800a31c <_ZN11Screen1View11setupScreenEv>:

void Screen1View::setupScreen()
{
 800a31c:	b580      	push	{r7, lr}
 800a31e:	b082      	sub	sp, #8
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::setupScreen();
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	4618      	mov	r0, r3
 800a328:	f7ff f873 	bl	8009412 <_ZN15Screen1ViewBase11setupScreenEv>
}
 800a32c:	bf00      	nop
 800a32e:	3708      	adds	r7, #8
 800a330:	46bd      	mov	sp, r7
 800a332:	bd80      	pop	{r7, pc}

0800a334 <_ZN11Screen1View14tearDownScreenEv>:

void Screen1View::tearDownScreen()
{
 800a334:	b580      	push	{r7, lr}
 800a336:	b082      	sub	sp, #8
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::tearDownScreen();
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	4618      	mov	r0, r3
 800a340:	f7fe fd6a 	bl	8008e18 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 800a344:	bf00      	nop
 800a346:	3708      	adds	r7, #8
 800a348:	46bd      	mov	sp, r7
 800a34a:	bd80      	pop	{r7, pc}

0800a34c <_ZN16Screen2PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen2Presenter() {};
 800a34c:	b580      	push	{r7, lr}
 800a34e:	b082      	sub	sp, #8
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]
 800a354:	4a09      	ldr	r2, [pc, #36]	; (800a37c <_ZN16Screen2PresenterD1Ev+0x30>)
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	601a      	str	r2, [r3, #0]
 800a35a:	4a09      	ldr	r2, [pc, #36]	; (800a380 <_ZN16Screen2PresenterD1Ev+0x34>)
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	605a      	str	r2, [r3, #4]
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	3304      	adds	r3, #4
 800a364:	4618      	mov	r0, r3
 800a366:	f7ff ff1b 	bl	800a1a0 <_ZN13ModelListenerD1Ev>
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	4618      	mov	r0, r3
 800a36e:	f7ff fed3 	bl	800a118 <_ZN8touchgfx9PresenterD1Ev>
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	4618      	mov	r0, r3
 800a376:	3708      	adds	r7, #8
 800a378:	46bd      	mov	sp, r7
 800a37a:	bd80      	pop	{r7, pc}
 800a37c:	0802cbb0 	.word	0x0802cbb0
 800a380:	0802cbc8 	.word	0x0802cbc8

0800a384 <_ZThn4_N16Screen2PresenterD1Ev>:
 800a384:	f1a0 0004 	sub.w	r0, r0, #4
 800a388:	e7e0      	b.n	800a34c <_ZN16Screen2PresenterD1Ev>
 800a38a:	bf00      	nop

0800a38c <_ZN16Screen2PresenterD0Ev>:
 800a38c:	b580      	push	{r7, lr}
 800a38e:	b082      	sub	sp, #8
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
 800a394:	6878      	ldr	r0, [r7, #4]
 800a396:	f7ff ffd9 	bl	800a34c <_ZN16Screen2PresenterD1Ev>
 800a39a:	2110      	movs	r1, #16
 800a39c:	6878      	ldr	r0, [r7, #4]
 800a39e:	f01e fa48 	bl	8028832 <_ZdlPvj>
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	3708      	adds	r7, #8
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	bd80      	pop	{r7, pc}

0800a3ac <_ZThn4_N16Screen2PresenterD0Ev>:
 800a3ac:	f1a0 0004 	sub.w	r0, r0, #4
 800a3b0:	e7ec      	b.n	800a38c <_ZN16Screen2PresenterD0Ev>
	...

0800a3b4 <_ZN16Screen2PresenterC1ER11Screen2View>:
#include <gui/screen2_screen/Screen2View.hpp>
#include <gui/screen2_screen/Screen2Presenter.hpp>

Screen2Presenter::Screen2Presenter(Screen2View& v)
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	b082      	sub	sp, #8
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]
 800a3bc:	6039      	str	r1, [r7, #0]
    : view(v)
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	f7ff fec9 	bl	800a158 <_ZN8touchgfx9PresenterC1Ev>
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	3304      	adds	r3, #4
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	f7ff fed4 	bl	800a178 <_ZN13ModelListenerC1Ev>
 800a3d0:	4a06      	ldr	r2, [pc, #24]	; (800a3ec <_ZN16Screen2PresenterC1ER11Screen2View+0x38>)
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	601a      	str	r2, [r3, #0]
 800a3d6:	4a06      	ldr	r2, [pc, #24]	; (800a3f0 <_ZN16Screen2PresenterC1ER11Screen2View+0x3c>)
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	605a      	str	r2, [r3, #4]
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	683a      	ldr	r2, [r7, #0]
 800a3e0:	60da      	str	r2, [r3, #12]
{

}
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	3708      	adds	r7, #8
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	bd80      	pop	{r7, pc}
 800a3ec:	0802cbb0 	.word	0x0802cbb0
 800a3f0:	0802cbc8 	.word	0x0802cbc8

0800a3f4 <_ZN16Screen2Presenter8activateEv>:

void Screen2Presenter::activate()
{
 800a3f4:	b480      	push	{r7}
 800a3f6:	b083      	sub	sp, #12
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]

}
 800a3fc:	bf00      	nop
 800a3fe:	370c      	adds	r7, #12
 800a400:	46bd      	mov	sp, r7
 800a402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a406:	4770      	bx	lr

0800a408 <_ZN16Screen2Presenter10deactivateEv>:

void Screen2Presenter::deactivate()
{
 800a408:	b480      	push	{r7}
 800a40a:	b083      	sub	sp, #12
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]

}
 800a410:	bf00      	nop
 800a412:	370c      	adds	r7, #12
 800a414:	46bd      	mov	sp, r7
 800a416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41a:	4770      	bx	lr

0800a41c <_ZN11Screen2ViewD1Ev>:

class Screen2View : public Screen2ViewBase
{
public:
    Screen2View();
    virtual ~Screen2View() {}
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b082      	sub	sp, #8
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
 800a424:	4a05      	ldr	r2, [pc, #20]	; (800a43c <_ZN11Screen2ViewD1Ev+0x20>)
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	601a      	str	r2, [r3, #0]
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	4618      	mov	r0, r3
 800a42e:	f7ff fac9 	bl	80099c4 <_ZN15Screen2ViewBaseD1Ev>
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	4618      	mov	r0, r3
 800a436:	3708      	adds	r7, #8
 800a438:	46bd      	mov	sp, r7
 800a43a:	bd80      	pop	{r7, pc}
 800a43c:	0802cbd8 	.word	0x0802cbd8

0800a440 <_ZN11Screen2ViewD0Ev>:
 800a440:	b580      	push	{r7, lr}
 800a442:	b082      	sub	sp, #8
 800a444:	af00      	add	r7, sp, #0
 800a446:	6078      	str	r0, [r7, #4]
 800a448:	6878      	ldr	r0, [r7, #4]
 800a44a:	f7ff ffe7 	bl	800a41c <_ZN11Screen2ViewD1Ev>
 800a44e:	f44f 71b8 	mov.w	r1, #368	; 0x170
 800a452:	6878      	ldr	r0, [r7, #4]
 800a454:	f01e f9ed 	bl	8028832 <_ZdlPvj>
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	4618      	mov	r0, r3
 800a45c:	3708      	adds	r7, #8
 800a45e:	46bd      	mov	sp, r7
 800a460:	bd80      	pop	{r7, pc}
	...

0800a464 <_ZN11Screen2ViewC1Ev>:
#include <gui/screen2_screen/Screen2View.hpp>

Screen2View::Screen2View()
 800a464:	b580      	push	{r7, lr}
 800a466:	b082      	sub	sp, #8
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	4618      	mov	r0, r3
 800a470:	f7ff f8e2 	bl	8009638 <_ZN15Screen2ViewBaseC1Ev>
 800a474:	4a03      	ldr	r2, [pc, #12]	; (800a484 <_ZN11Screen2ViewC1Ev+0x20>)
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	601a      	str	r2, [r3, #0]
{

}
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	4618      	mov	r0, r3
 800a47e:	3708      	adds	r7, #8
 800a480:	46bd      	mov	sp, r7
 800a482:	bd80      	pop	{r7, pc}
 800a484:	0802cbd8 	.word	0x0802cbd8

0800a488 <_ZN11Screen2View11setupScreenEv>:

void Screen2View::setupScreen()
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b082      	sub	sp, #8
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
    Screen2ViewBase::setupScreen();
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	4618      	mov	r0, r3
 800a494:	f7ff fad3 	bl	8009a3e <_ZN15Screen2ViewBase11setupScreenEv>
}
 800a498:	bf00      	nop
 800a49a:	3708      	adds	r7, #8
 800a49c:	46bd      	mov	sp, r7
 800a49e:	bd80      	pop	{r7, pc}

0800a4a0 <_ZN11Screen2View14tearDownScreenEv>:

void Screen2View::tearDownScreen()
{
 800a4a0:	b580      	push	{r7, lr}
 800a4a2:	b082      	sub	sp, #8
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
    Screen2ViewBase::tearDownScreen();
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	f7fe fcb4 	bl	8008e18 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 800a4b0:	bf00      	nop
 800a4b2:	3708      	adds	r7, #8
 800a4b4:	46bd      	mov	sp, r7
 800a4b6:	bd80      	pop	{r7, pc}

0800a4b8 <FT5336_RegisterBusIO>:
  * @brief  Register IO bus to component object
  * @param  Component object pointer
  * @retval error status
  */
int32_t FT5336_RegisterBusIO (FT5336_Object_t *pObj, FT5336_IO_t *pIO)
{
 800a4b8:	b580      	push	{r7, lr}
 800a4ba:	b084      	sub	sp, #16
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
 800a4c0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d103      	bne.n	800a4d0 <FT5336_RegisterBusIO+0x18>
  {
    ret = FT5336_ERROR;
 800a4c8:	f04f 33ff 	mov.w	r3, #4294967295
 800a4cc:	60fb      	str	r3, [r7, #12]
 800a4ce:	e02c      	b.n	800a52a <FT5336_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 800a4d0:	683b      	ldr	r3, [r7, #0]
 800a4d2:	681a      	ldr	r2, [r3, #0]
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800a4d8:	683b      	ldr	r3, [r7, #0]
 800a4da:	685a      	ldr	r2, [r3, #4]
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 800a4e0:	683b      	ldr	r3, [r7, #0]
 800a4e2:	891a      	ldrh	r2, [r3, #8]
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800a4e8:	683b      	ldr	r3, [r7, #0]
 800a4ea:	68da      	ldr	r2, [r3, #12]
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800a4f0:	683b      	ldr	r3, [r7, #0]
 800a4f2:	691a      	ldr	r2, [r3, #16]
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 800a4f8:	683b      	ldr	r3, [r7, #0]
 800a4fa:	695a      	ldr	r2, [r3, #20]
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = ReadRegWrap;
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	4a0c      	ldr	r2, [pc, #48]	; (800a534 <FT5336_RegisterBusIO+0x7c>)
 800a504:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	4a0b      	ldr	r2, [pc, #44]	; (800a538 <FT5336_RegisterBusIO+0x80>)
 800a50a:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	687a      	ldr	r2, [r7, #4]
 800a510:	621a      	str	r2, [r3, #32]

    if(pObj->IO.Init != NULL)
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d004      	beq.n	800a524 <FT5336_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	4798      	blx	r3
 800a520:	60f8      	str	r0, [r7, #12]
 800a522:	e002      	b.n	800a52a <FT5336_RegisterBusIO+0x72>
    }
    else
    {
      ret = FT5336_ERROR;
 800a524:	f04f 33ff 	mov.w	r3, #4294967295
 800a528:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800a52a:	68fb      	ldr	r3, [r7, #12]
}
 800a52c:	4618      	mov	r0, r3
 800a52e:	3710      	adds	r7, #16
 800a530:	46bd      	mov	sp, r7
 800a532:	bd80      	pop	{r7, pc}
 800a534:	0800a931 	.word	0x0800a931
 800a538:	0800a965 	.word	0x0800a965

0800a53c <FT5336_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to FT5336 sensor capabilities
  * @retval Component status
  */
int32_t FT5336_GetCapabilities(FT5336_Object_t *pObj, FT5336_Capabilities_t *Capabilities)
{
 800a53c:	b480      	push	{r7}
 800a53e:	b083      	sub	sp, #12
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]
 800a544:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
 800a546:	683b      	ldr	r3, [r7, #0]
 800a548:	2201      	movs	r2, #1
 800a54a:	701a      	strb	r2, [r3, #0]
  Capabilities->Gesture    = 1;
 800a54c:	683b      	ldr	r3, [r7, #0]
 800a54e:	2201      	movs	r2, #1
 800a550:	705a      	strb	r2, [r3, #1]
  Capabilities->MaxTouch   = FT5336_MAX_NB_TOUCH;
 800a552:	683b      	ldr	r3, [r7, #0]
 800a554:	2205      	movs	r2, #5
 800a556:	709a      	strb	r2, [r3, #2]
  Capabilities->MaxXl      = FT5336_MAX_X_LENGTH;
 800a558:	683b      	ldr	r3, [r7, #0]
 800a55a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800a55e:	605a      	str	r2, [r3, #4]
  Capabilities->MaxYl      = FT5336_MAX_Y_LENGTH;
 800a560:	683b      	ldr	r3, [r7, #0]
 800a562:	f44f 7288 	mov.w	r2, #272	; 0x110
 800a566:	609a      	str	r2, [r3, #8]

  return FT5336_OK;
 800a568:	2300      	movs	r3, #0
}
 800a56a:	4618      	mov	r0, r3
 800a56c:	370c      	adds	r7, #12
 800a56e:	46bd      	mov	sp, r7
 800a570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a574:	4770      	bx	lr

0800a576 <FT5336_Init>:
  * @param  pObj Component object pointer
  * @param  GestureInit: Gesture init structure
  * @retval FT5336_OK
  */
int32_t FT5336_Init(FT5336_Object_t *pObj)
{
 800a576:	b580      	push	{r7, lr}
 800a578:	b084      	sub	sp, #16
 800a57a:	af00      	add	r7, sp, #0
 800a57c:	6078      	str	r0, [r7, #4]
  int32_t ret = FT5336_OK;
 800a57e:	2300      	movs	r3, #0
 800a580:	60fb      	str	r3, [r7, #12]

  if(pObj->IsInitialized == 0U)
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d10d      	bne.n	800a5a8 <FT5336_Init+0x32>
  {
    /* Initialize IO BUS layer */
    pObj->IO.Init();
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	4798      	blx	r3
    /* This is called internal calibration of the touch screen                 */
    ret += FT5336_TS_Calibration(pObj);
#endif /* (FT5336_AUTO_CALIBRATION_ENABLED == 1) */
    /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
    /* Note TS_INT is active low                                                                      */
    ret += FT5336_DisableIT(pObj);
 800a592:	6878      	ldr	r0, [r7, #4]
 800a594:	f000 f987 	bl	800a8a6 <FT5336_DisableIT>
 800a598:	4602      	mov	r2, r0
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	4413      	add	r3, r2
 800a59e:	60fb      	str	r3, [r7, #12]

    pObj->IsInitialized = 1;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	2201      	movs	r2, #1
 800a5a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  if(ret != FT5336_OK)
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d002      	beq.n	800a5b4 <FT5336_Init+0x3e>
  {
    ret = FT5336_ERROR;
 800a5ae:	f04f 33ff 	mov.w	r3, #4294967295
 800a5b2:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800a5b4:	68fb      	ldr	r3, [r7, #12]
}
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	3710      	adds	r7, #16
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	bd80      	pop	{r7, pc}

0800a5be <FT5336_DeInit>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  pObj Component object pointer
  * @retval FT5336_OK
  */
int32_t FT5336_DeInit(FT5336_Object_t *pObj)
{
 800a5be:	b480      	push	{r7}
 800a5c0:	b085      	sub	sp, #20
 800a5c2:	af00      	add	r7, sp, #0
 800a5c4:	6078      	str	r0, [r7, #4]
  int32_t ret = FT5336_OK;
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	60fb      	str	r3, [r7, #12]

  if(pObj->IsInitialized == 1U)
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a5d0:	2b01      	cmp	r3, #1
 800a5d2:	d103      	bne.n	800a5dc <FT5336_DeInit+0x1e>
  {
    pObj->IsInitialized = 0;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return ret;
 800a5dc:	68fb      	ldr	r3, [r7, #12]
}
 800a5de:	4618      	mov	r0, r3
 800a5e0:	3714      	adds	r7, #20
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e8:	4770      	bx	lr

0800a5ea <FT5336_GestureConfig>:
  * @param  pObj  Component object pointer
  * @param  GestureInit Gesture init structure
  * @retval FT5336_OK
  */
int32_t FT5336_GestureConfig(FT5336_Object_t *pObj, FT5336_Gesture_Init_t *GestureInit)
{
 800a5ea:	b580      	push	{r7, lr}
 800a5ec:	b084      	sub	sp, #16
 800a5ee:	af00      	add	r7, sp, #0
 800a5f0:	6078      	str	r0, [r7, #4]
 800a5f2:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = ft5336_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	f103 0218 	add.w	r2, r3, #24
 800a5fa:	683b      	ldr	r3, [r7, #0]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	b2db      	uxtb	r3, r3
 800a600:	4619      	mov	r1, r3
 800a602:	4610      	mov	r0, r2
 800a604:	f000 fa25 	bl	800aa52 <ft5336_radian_value>
 800a608:	60f8      	str	r0, [r7, #12]
  ret += ft5336_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	f103 0218 	add.w	r2, r3, #24
 800a610:	683b      	ldr	r3, [r7, #0]
 800a612:	685b      	ldr	r3, [r3, #4]
 800a614:	b2db      	uxtb	r3, r3
 800a616:	4619      	mov	r1, r3
 800a618:	4610      	mov	r0, r2
 800a61a:	f000 fa2b 	bl	800aa74 <ft5336_offset_left_right>
 800a61e:	4602      	mov	r2, r0
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	4413      	add	r3, r2
 800a624:	60fb      	str	r3, [r7, #12]
  ret += ft5336_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	f103 0218 	add.w	r2, r3, #24
 800a62c:	683b      	ldr	r3, [r7, #0]
 800a62e:	689b      	ldr	r3, [r3, #8]
 800a630:	b2db      	uxtb	r3, r3
 800a632:	4619      	mov	r1, r3
 800a634:	4610      	mov	r0, r2
 800a636:	f000 fa2e 	bl	800aa96 <ft5336_offset_up_down>
 800a63a:	4602      	mov	r2, r0
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	4413      	add	r3, r2
 800a640:	60fb      	str	r3, [r7, #12]
  ret += ft5336_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	f103 0218 	add.w	r2, r3, #24
 800a648:	683b      	ldr	r3, [r7, #0]
 800a64a:	68db      	ldr	r3, [r3, #12]
 800a64c:	b2db      	uxtb	r3, r3
 800a64e:	4619      	mov	r1, r3
 800a650:	4610      	mov	r0, r2
 800a652:	f000 fa31 	bl	800aab8 <ft5336_disatnce_left_right>
 800a656:	4602      	mov	r2, r0
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	4413      	add	r3, r2
 800a65c:	60fb      	str	r3, [r7, #12]
  ret += ft5336_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	f103 0218 	add.w	r2, r3, #24
 800a664:	683b      	ldr	r3, [r7, #0]
 800a666:	691b      	ldr	r3, [r3, #16]
 800a668:	b2db      	uxtb	r3, r3
 800a66a:	4619      	mov	r1, r3
 800a66c:	4610      	mov	r0, r2
 800a66e:	f000 fa34 	bl	800aada <ft5336_distance_up_down>
 800a672:	4602      	mov	r2, r0
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	4413      	add	r3, r2
 800a678:	60fb      	str	r3, [r7, #12]
  ret += ft5336_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	f103 0218 	add.w	r2, r3, #24
 800a680:	683b      	ldr	r3, [r7, #0]
 800a682:	695b      	ldr	r3, [r3, #20]
 800a684:	b2db      	uxtb	r3, r3
 800a686:	4619      	mov	r1, r3
 800a688:	4610      	mov	r0, r2
 800a68a:	f000 fa37 	bl	800aafc <ft5336_distance_zoom>
 800a68e:	4602      	mov	r2, r0
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	4413      	add	r3, r2
 800a694:	60fb      	str	r3, [r7, #12]

  if(ret != FT5336_OK)
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d002      	beq.n	800a6a2 <FT5336_GestureConfig+0xb8>
  {
    ret = FT5336_ERROR;
 800a69c:	f04f 33ff 	mov.w	r3, #4294967295
 800a6a0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800a6a2:	68fb      	ldr	r3, [r7, #12]
}
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	3710      	adds	r7, #16
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	bd80      	pop	{r7, pc}

0800a6ac <FT5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  pObj Component object pointer
  * @retval The Device ID (two bytes).
  */
int32_t FT5336_ReadID(FT5336_Object_t *pObj, uint32_t *Id)
{
 800a6ac:	b580      	push	{r7, lr}
 800a6ae:	b082      	sub	sp, #8
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]
 800a6b4:	6039      	str	r1, [r7, #0]
  return ft5336_chip_id(&pObj->Ctx, (uint8_t *)Id);
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	3318      	adds	r3, #24
 800a6ba:	6839      	ldr	r1, [r7, #0]
 800a6bc:	4618      	mov	r0, r3
 800a6be:	f000 fa3f 	bl	800ab40 <ft5336_chip_id>
 800a6c2:	4603      	mov	r3, r0
}
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	3708      	adds	r7, #8
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	bd80      	pop	{r7, pc}

0800a6cc <FT5336_GetState>:
  * @param  pObj Component object pointer
  * @param  State: Single Touch stucture pointer
  * @retval FT5336_OK.
  */
int32_t FT5336_GetState(FT5336_Object_t *pObj, FT5336_State_t *State)
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b084      	sub	sp, #16
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
 800a6d4:	6039      	str	r1, [r7, #0]
  int32_t ret = FT5336_OK;
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	60fb      	str	r3, [r7, #12]
  uint8_t  data[4];

  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 800a6da:	6878      	ldr	r0, [r7, #4]
 800a6dc:	f000 f908 	bl	800a8f0 <FT5336_DetectTouch>
 800a6e0:	4603      	mov	r3, r0
 800a6e2:	461a      	mov	r2, r3
 800a6e4:	683b      	ldr	r3, [r7, #0]
 800a6e6:	601a      	str	r2, [r3, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	f103 0018 	add.w	r0, r3, #24
 800a6ee:	f107 0208 	add.w	r2, r7, #8
 800a6f2:	2304      	movs	r3, #4
 800a6f4:	2103      	movs	r1, #3
 800a6f6:	f000 f94f 	bl	800a998 <ft5336_read_reg>
 800a6fa:	4603      	mov	r3, r0
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d003      	beq.n	800a708 <FT5336_GetState+0x3c>
  {
    ret = FT5336_ERROR;
 800a700:	f04f 33ff 	mov.w	r3, #4294967295
 800a704:	60fb      	str	r3, [r7, #12]
 800a706:	e00f      	b.n	800a728 <FT5336_GetState+0x5c>
  }
  else
  {
    /* Send back first ready X position to caller */
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
 800a708:	7a3b      	ldrb	r3, [r7, #8]
 800a70a:	021b      	lsls	r3, r3, #8
 800a70c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a710:	7a7a      	ldrb	r2, [r7, #9]
 800a712:	431a      	orrs	r2, r3
 800a714:	683b      	ldr	r3, [r7, #0]
 800a716:	605a      	str	r2, [r3, #4]
    /* Send back first ready Y position to caller */
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
 800a718:	7abb      	ldrb	r3, [r7, #10]
 800a71a:	021b      	lsls	r3, r3, #8
 800a71c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a720:	7afa      	ldrb	r2, [r7, #11]
 800a722:	431a      	orrs	r2, r3
 800a724:	683b      	ldr	r3, [r7, #0]
 800a726:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a728:	68fb      	ldr	r3, [r7, #12]
}
 800a72a:	4618      	mov	r0, r3
 800a72c:	3710      	adds	r7, #16
 800a72e:	46bd      	mov	sp, r7
 800a730:	bd80      	pop	{r7, pc}

0800a732 <FT5336_GetMultiTouchState>:
  * @param  pObj Component object pointer
  * @param  State Multi Touch structure pointer
  * @retval FT5336_OK.
  */
int32_t FT5336_GetMultiTouchState(FT5336_Object_t *pObj, FT5336_MultiTouch_State_t *State)
{
 800a732:	b580      	push	{r7, lr}
 800a734:	b08c      	sub	sp, #48	; 0x30
 800a736:	af00      	add	r7, sp, #0
 800a738:	6078      	str	r0, [r7, #4]
 800a73a:	6039      	str	r1, [r7, #0]
  int32_t ret = FT5336_OK;
 800a73c:	2300      	movs	r3, #0
 800a73e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint8_t  data[30];
  uint32_t i;

  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 800a740:	6878      	ldr	r0, [r7, #4]
 800a742:	f000 f8d5 	bl	800a8f0 <FT5336_DetectTouch>
 800a746:	4603      	mov	r3, r0
 800a748:	461a      	mov	r2, r3
 800a74a:	683b      	ldr	r3, [r7, #0]
 800a74c:	601a      	str	r2, [r3, #0]

  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	f103 0018 	add.w	r0, r3, #24
 800a754:	f107 0208 	add.w	r2, r7, #8
 800a758:	231e      	movs	r3, #30
 800a75a:	2103      	movs	r1, #3
 800a75c:	f000 f91c 	bl	800a998 <ft5336_read_reg>
 800a760:	4603      	mov	r3, r0
 800a762:	2b00      	cmp	r3, #0
 800a764:	d003      	beq.n	800a76e <FT5336_GetMultiTouchState+0x3c>
  {
    ret = FT5336_ERROR;
 800a766:	f04f 33ff 	mov.w	r3, #4294967295
 800a76a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a76c:	e077      	b.n	800a85e <FT5336_GetMultiTouchState+0x12c>
  }
  else
  {
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 800a76e:	2300      	movs	r3, #0
 800a770:	62bb      	str	r3, [r7, #40]	; 0x28
 800a772:	e071      	b.n	800a858 <FT5336_GetMultiTouchState+0x126>
    {
    /* Send back first ready X position to caller */
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 800a774:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a776:	4613      	mov	r3, r2
 800a778:	005b      	lsls	r3, r3, #1
 800a77a:	4413      	add	r3, r2
 800a77c:	005b      	lsls	r3, r3, #1
 800a77e:	3330      	adds	r3, #48	; 0x30
 800a780:	443b      	add	r3, r7
 800a782:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800a786:	021b      	lsls	r3, r3, #8
 800a788:	f403 6170 	and.w	r1, r3, #3840	; 0xf00
 800a78c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a78e:	4613      	mov	r3, r2
 800a790:	005b      	lsls	r3, r3, #1
 800a792:	4413      	add	r3, r2
 800a794:	005b      	lsls	r3, r3, #1
 800a796:	3301      	adds	r3, #1
 800a798:	3330      	adds	r3, #48	; 0x30
 800a79a:	443b      	add	r3, r7
 800a79c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800a7a0:	ea41 0203 	orr.w	r2, r1, r3
 800a7a4:	6839      	ldr	r1, [r7, #0]
 800a7a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7a8:	009b      	lsls	r3, r3, #2
 800a7aa:	440b      	add	r3, r1
 800a7ac:	605a      	str	r2, [r3, #4]
    /* Send back first ready Y position to caller */
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 800a7ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a7b0:	4613      	mov	r3, r2
 800a7b2:	005b      	lsls	r3, r3, #1
 800a7b4:	4413      	add	r3, r2
 800a7b6:	005b      	lsls	r3, r3, #1
 800a7b8:	3302      	adds	r3, #2
 800a7ba:	3330      	adds	r3, #48	; 0x30
 800a7bc:	443b      	add	r3, r7
 800a7be:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800a7c2:	021b      	lsls	r3, r3, #8
 800a7c4:	f403 6170 	and.w	r1, r3, #3840	; 0xf00
 800a7c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a7ca:	4613      	mov	r3, r2
 800a7cc:	005b      	lsls	r3, r3, #1
 800a7ce:	4413      	add	r3, r2
 800a7d0:	005b      	lsls	r3, r3, #1
 800a7d2:	3303      	adds	r3, #3
 800a7d4:	3330      	adds	r3, #48	; 0x30
 800a7d6:	443b      	add	r3, r7
 800a7d8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800a7dc:	4319      	orrs	r1, r3
 800a7de:	683b      	ldr	r3, [r7, #0]
 800a7e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a7e2:	3206      	adds	r2, #6
 800a7e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Send back first ready Event to caller */
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
 800a7e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a7ea:	4613      	mov	r3, r2
 800a7ec:	005b      	lsls	r3, r3, #1
 800a7ee:	4413      	add	r3, r2
 800a7f0:	005b      	lsls	r3, r3, #1
 800a7f2:	3330      	adds	r3, #48	; 0x30
 800a7f4:	443b      	add	r3, r7
 800a7f6:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800a7fa:	099b      	lsrs	r3, r3, #6
 800a7fc:	b2db      	uxtb	r3, r3
 800a7fe:	4619      	mov	r1, r3
 800a800:	683b      	ldr	r3, [r7, #0]
 800a802:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a804:	3210      	adds	r2, #16
 800a806:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Send back first ready Weight to caller */
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
 800a80a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a80c:	4613      	mov	r3, r2
 800a80e:	005b      	lsls	r3, r3, #1
 800a810:	4413      	add	r3, r2
 800a812:	005b      	lsls	r3, r3, #1
 800a814:	3304      	adds	r3, #4
 800a816:	3330      	adds	r3, #48	; 0x30
 800a818:	443b      	add	r3, r7
 800a81a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800a81e:	4619      	mov	r1, r3
 800a820:	683a      	ldr	r2, [r7, #0]
 800a822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a824:	330a      	adds	r3, #10
 800a826:	009b      	lsls	r3, r3, #2
 800a828:	4413      	add	r3, r2
 800a82a:	6059      	str	r1, [r3, #4]
    /* Send back first ready Area to caller */
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
 800a82c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a82e:	4613      	mov	r3, r2
 800a830:	005b      	lsls	r3, r3, #1
 800a832:	4413      	add	r3, r2
 800a834:	005b      	lsls	r3, r3, #1
 800a836:	3305      	adds	r3, #5
 800a838:	3330      	adds	r3, #48	; 0x30
 800a83a:	443b      	add	r3, r7
 800a83c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800a840:	091b      	lsrs	r3, r3, #4
 800a842:	b2db      	uxtb	r3, r3
 800a844:	4619      	mov	r1, r3
 800a846:	683a      	ldr	r2, [r7, #0]
 800a848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a84a:	3314      	adds	r3, #20
 800a84c:	009b      	lsls	r3, r3, #2
 800a84e:	4413      	add	r3, r2
 800a850:	6059      	str	r1, [r3, #4]
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 800a852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a854:	3301      	adds	r3, #1
 800a856:	62bb      	str	r3, [r7, #40]	; 0x28
 800a858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a85a:	2b04      	cmp	r3, #4
 800a85c:	d98a      	bls.n	800a774 <FT5336_GetMultiTouchState+0x42>
    }
  }

  return ret;
 800a85e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800a860:	4618      	mov	r0, r3
 800a862:	3730      	adds	r7, #48	; 0x30
 800a864:	46bd      	mov	sp, r7
 800a866:	bd80      	pop	{r7, pc}

0800a868 <FT5336_GetGesture>:
  * @param  pObj Component object pointer
  * @param  GestureId: gesture ID
  * @retval Gesture ID.
  */
int32_t FT5336_GetGesture(FT5336_Object_t *pObj, uint8_t *GestureId)
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	b082      	sub	sp, #8
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
 800a870:	6039      	str	r1, [r7, #0]
  return ft5336_gest_id(&pObj->Ctx, GestureId);
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	3318      	adds	r3, #24
 800a876:	6839      	ldr	r1, [r7, #0]
 800a878:	4618      	mov	r0, r3
 800a87a:	f000 f8bb 	bl	800a9f4 <ft5336_gest_id>
 800a87e:	4603      	mov	r3, r0
}
 800a880:	4618      	mov	r0, r3
 800a882:	3708      	adds	r7, #8
 800a884:	46bd      	mov	sp, r7
 800a886:	bd80      	pop	{r7, pc}

0800a888 <FT5336_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_EnableIT(FT5336_Object_t *pObj)
{
 800a888:	b580      	push	{r7, lr}
 800a88a:	b082      	sub	sp, #8
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_TRIGGER);
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	3318      	adds	r3, #24
 800a894:	2101      	movs	r1, #1
 800a896:	4618      	mov	r0, r3
 800a898:	f000 f941 	bl	800ab1e <ft5336_g_mode>
 800a89c:	4603      	mov	r3, r0
}
 800a89e:	4618      	mov	r0, r3
 800a8a0:	3708      	adds	r7, #8
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	bd80      	pop	{r7, pc}

0800a8a6 <FT5336_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_DisableIT(FT5336_Object_t *pObj)
{
 800a8a6:	b580      	push	{r7, lr}
 800a8a8:	b082      	sub	sp, #8
 800a8aa:	af00      	add	r7, sp, #0
 800a8ac:	6078      	str	r0, [r7, #4]
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_POLLING);
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	3318      	adds	r3, #24
 800a8b2:	2100      	movs	r1, #0
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	f000 f932 	bl	800ab1e <ft5336_g_mode>
 800a8ba:	4603      	mov	r3, r0
}
 800a8bc:	4618      	mov	r0, r3
 800a8be:	3708      	adds	r7, #8
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	bd80      	pop	{r7, pc}

0800a8c4 <FT5336_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  pObj Component object pointer
  * @retval TS interrupts status : always return 0 here
  */
int32_t FT5336_ITStatus(FT5336_Object_t *pObj)
{
 800a8c4:	b480      	push	{r7}
 800a8c6:	b083      	sub	sp, #12
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
 800a8cc:	2300      	movs	r3, #0
}
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	370c      	adds	r7, #12
 800a8d2:	46bd      	mov	sp, r7
 800a8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d8:	4770      	bx	lr

0800a8da <FT5336_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_ClearIT(FT5336_Object_t *pObj)
{
 800a8da:	b480      	push	{r7}
 800a8dc:	b083      	sub	sp, #12
 800a8de:	af00      	add	r7, sp, #0
 800a8e0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
 800a8e2:	2300      	movs	r3, #0
}
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	370c      	adds	r7, #12
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ee:	4770      	bx	lr

0800a8f0 <FT5336_DetectTouch>:
  * @param  pObj Component object pointer
  * @retval Number of active touches detected (can be 0, 1 or 2) or FT5336_ERROR
  *         in case of error
  */
static int32_t FT5336_DetectTouch(FT5336_Object_t *pObj)
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b084      	sub	sp, #16
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t nb_touch;

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	3318      	adds	r3, #24
 800a8fc:	f107 020b 	add.w	r2, r7, #11
 800a900:	4611      	mov	r1, r2
 800a902:	4618      	mov	r0, r3
 800a904:	f000 f886 	bl	800aa14 <ft5336_td_status>
 800a908:	4603      	mov	r3, r0
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d003      	beq.n	800a916 <FT5336_DetectTouch+0x26>
  {
    ret = FT5336_ERROR;
 800a90e:	f04f 33ff 	mov.w	r3, #4294967295
 800a912:	60fb      	str	r3, [r7, #12]
 800a914:	e007      	b.n	800a926 <FT5336_DetectTouch+0x36>
  }
  else
  {
    if(nb_touch > FT5336_MAX_NB_TOUCH)
 800a916:	7afb      	ldrb	r3, [r7, #11]
 800a918:	2b05      	cmp	r3, #5
 800a91a:	d902      	bls.n	800a922 <FT5336_DetectTouch+0x32>
    {
      /* If invalid number of touch detected, set it to zero */
      ret = 0;
 800a91c:	2300      	movs	r3, #0
 800a91e:	60fb      	str	r3, [r7, #12]
 800a920:	e001      	b.n	800a926 <FT5336_DetectTouch+0x36>
    }
    else
    {
      ret = (int32_t)nb_touch;
 800a922:	7afb      	ldrb	r3, [r7, #11]
 800a924:	60fb      	str	r3, [r7, #12]
    }
  }
  return ret;
 800a926:	68fb      	ldr	r3, [r7, #12]
}
 800a928:	4618      	mov	r0, r3
 800a92a:	3710      	adds	r7, #16
 800a92c:	46bd      	mov	sp, r7
 800a92e:	bd80      	pop	{r7, pc}

0800a930 <ReadRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 800a930:	b590      	push	{r4, r7, lr}
 800a932:	b087      	sub	sp, #28
 800a934:	af00      	add	r7, sp, #0
 800a936:	60f8      	str	r0, [r7, #12]
 800a938:	607a      	str	r2, [r7, #4]
 800a93a:	461a      	mov	r2, r3
 800a93c:	460b      	mov	r3, r1
 800a93e:	72fb      	strb	r3, [r7, #11]
 800a940:	4613      	mov	r3, r2
 800a942:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800a948:	697b      	ldr	r3, [r7, #20]
 800a94a:	691c      	ldr	r4, [r3, #16]
 800a94c:	697b      	ldr	r3, [r7, #20]
 800a94e:	8918      	ldrh	r0, [r3, #8]
 800a950:	7afb      	ldrb	r3, [r7, #11]
 800a952:	b299      	uxth	r1, r3
 800a954:	893b      	ldrh	r3, [r7, #8]
 800a956:	687a      	ldr	r2, [r7, #4]
 800a958:	47a0      	blx	r4
 800a95a:	4603      	mov	r3, r0
}
 800a95c:	4618      	mov	r0, r3
 800a95e:	371c      	adds	r7, #28
 800a960:	46bd      	mov	sp, r7
 800a962:	bd90      	pop	{r4, r7, pc}

0800a964 <WriteRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 800a964:	b590      	push	{r4, r7, lr}
 800a966:	b087      	sub	sp, #28
 800a968:	af00      	add	r7, sp, #0
 800a96a:	60f8      	str	r0, [r7, #12]
 800a96c:	607a      	str	r2, [r7, #4]
 800a96e:	461a      	mov	r2, r3
 800a970:	460b      	mov	r3, r1
 800a972:	72fb      	strb	r3, [r7, #11]
 800a974:	4613      	mov	r3, r2
 800a976:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800a97c:	697b      	ldr	r3, [r7, #20]
 800a97e:	68dc      	ldr	r4, [r3, #12]
 800a980:	697b      	ldr	r3, [r7, #20]
 800a982:	8918      	ldrh	r0, [r3, #8]
 800a984:	7afb      	ldrb	r3, [r7, #11]
 800a986:	b299      	uxth	r1, r3
 800a988:	893b      	ldrh	r3, [r7, #8]
 800a98a:	687a      	ldr	r2, [r7, #4]
 800a98c:	47a0      	blx	r4
 800a98e:	4603      	mov	r3, r0
}
 800a990:	4618      	mov	r0, r3
 800a992:	371c      	adds	r7, #28
 800a994:	46bd      	mov	sp, r7
 800a996:	bd90      	pop	{r4, r7, pc}

0800a998 <ft5336_read_reg>:
  * @param  pdata pointer to data to be read
  * @param  length Length of data to read   
  * @retval Component status
  */
int32_t ft5336_read_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 800a998:	b590      	push	{r4, r7, lr}
 800a99a:	b085      	sub	sp, #20
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	60f8      	str	r0, [r7, #12]
 800a9a0:	607a      	str	r2, [r7, #4]
 800a9a2:	461a      	mov	r2, r3
 800a9a4:	460b      	mov	r3, r1
 800a9a6:	72fb      	strb	r3, [r7, #11]
 800a9a8:	4613      	mov	r3, r2
 800a9aa:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	685c      	ldr	r4, [r3, #4]
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	6898      	ldr	r0, [r3, #8]
 800a9b4:	893b      	ldrh	r3, [r7, #8]
 800a9b6:	7af9      	ldrb	r1, [r7, #11]
 800a9b8:	687a      	ldr	r2, [r7, #4]
 800a9ba:	47a0      	blx	r4
 800a9bc:	4603      	mov	r3, r0
}
 800a9be:	4618      	mov	r0, r3
 800a9c0:	3714      	adds	r7, #20
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	bd90      	pop	{r4, r7, pc}

0800a9c6 <ft5336_write_reg>:
  * @param  pdata pointer to data to be written
  * @param  length Length of data to write   
  * @retval Component status
  */
int32_t ft5336_write_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
 800a9c6:	b590      	push	{r4, r7, lr}
 800a9c8:	b085      	sub	sp, #20
 800a9ca:	af00      	add	r7, sp, #0
 800a9cc:	60f8      	str	r0, [r7, #12]
 800a9ce:	607a      	str	r2, [r7, #4]
 800a9d0:	461a      	mov	r2, r3
 800a9d2:	460b      	mov	r3, r1
 800a9d4:	72fb      	strb	r3, [r7, #11]
 800a9d6:	4613      	mov	r3, r2
 800a9d8:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	681c      	ldr	r4, [r3, #0]
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	6898      	ldr	r0, [r3, #8]
 800a9e2:	893b      	ldrh	r3, [r7, #8]
 800a9e4:	7af9      	ldrb	r1, [r7, #11]
 800a9e6:	687a      	ldr	r2, [r7, #4]
 800a9e8:	47a0      	blx	r4
 800a9ea:	4603      	mov	r3, r0
}
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	3714      	adds	r7, #20
 800a9f0:	46bd      	mov	sp, r7
 800a9f2:	bd90      	pop	{r4, r7, pc}

0800a9f4 <ft5336_gest_id>:
  * @param  ctx Component context 
  * @param  value pointer to the value of FT5336_GEST_ID_REG register
  * @retval Component status
  */
int32_t  ft5336_gest_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 800a9f4:	b580      	push	{r7, lr}
 800a9f6:	b082      	sub	sp, #8
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]
 800a9fc:	6039      	str	r1, [r7, #0]
  return ft5336_read_reg(ctx, FT5336_GEST_ID_REG, (uint8_t *)value, 1);
 800a9fe:	2301      	movs	r3, #1
 800aa00:	683a      	ldr	r2, [r7, #0]
 800aa02:	2101      	movs	r1, #1
 800aa04:	6878      	ldr	r0, [r7, #4]
 800aa06:	f7ff ffc7 	bl	800a998 <ft5336_read_reg>
 800aa0a:	4603      	mov	r3, r0
}
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	3708      	adds	r7, #8
 800aa10:	46bd      	mov	sp, r7
 800aa12:	bd80      	pop	{r7, pc}

0800aa14 <ft5336_td_status>:
  * @param  ctx Component context 
  * @param  value pointer to the value of Touch Data Status register
  * @retval Component status
  */
int32_t  ft5336_td_status(ft5336_ctx_t *ctx, uint8_t *value)
{
 800aa14:	b580      	push	{r7, lr}
 800aa16:	b084      	sub	sp, #16
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	6078      	str	r0, [r7, #4]
 800aa1c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_TD_STAT_REG, (uint8_t *)value, 1);
 800aa1e:	2301      	movs	r3, #1
 800aa20:	683a      	ldr	r2, [r7, #0]
 800aa22:	2102      	movs	r1, #2
 800aa24:	6878      	ldr	r0, [r7, #4]
 800aa26:	f7ff ffb7 	bl	800a998 <ft5336_read_reg>
 800aa2a:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d10a      	bne.n	800aa48 <ft5336_td_status+0x34>
  {
    *value &= FT5336_TD_STATUS_BIT_MASK; 
 800aa32:	683b      	ldr	r3, [r7, #0]
 800aa34:	781b      	ldrb	r3, [r3, #0]
 800aa36:	f003 030f 	and.w	r3, r3, #15
 800aa3a:	b2da      	uxtb	r2, r3
 800aa3c:	683b      	ldr	r3, [r7, #0]
 800aa3e:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_TD_STATUS_BIT_POSITION; 
 800aa40:	683b      	ldr	r3, [r7, #0]
 800aa42:	781a      	ldrb	r2, [r3, #0]
 800aa44:	683b      	ldr	r3, [r7, #0]
 800aa46:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 800aa48:	68fb      	ldr	r3, [r7, #12]
}
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	3710      	adds	r7, #16
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	bd80      	pop	{r7, pc}

0800aa52 <ft5336_radian_value>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_RADIAN_VALUE_REG register
  * @retval Component status
  */
int32_t  ft5336_radian_value(ft5336_ctx_t *ctx, uint8_t value)
{
 800aa52:	b580      	push	{r7, lr}
 800aa54:	b082      	sub	sp, #8
 800aa56:	af00      	add	r7, sp, #0
 800aa58:	6078      	str	r0, [r7, #4]
 800aa5a:	460b      	mov	r3, r1
 800aa5c:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_RADIAN_VALUE_REG, &value, 1);
 800aa5e:	1cfa      	adds	r2, r7, #3
 800aa60:	2301      	movs	r3, #1
 800aa62:	2191      	movs	r1, #145	; 0x91
 800aa64:	6878      	ldr	r0, [r7, #4]
 800aa66:	f7ff ffae 	bl	800a9c6 <ft5336_write_reg>
 800aa6a:	4603      	mov	r3, r0
}
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	3708      	adds	r7, #8
 800aa70:	46bd      	mov	sp, r7
 800aa72:	bd80      	pop	{r7, pc}

0800aa74 <ft5336_offset_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 800aa74:	b580      	push	{r7, lr}
 800aa76:	b082      	sub	sp, #8
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	6078      	str	r0, [r7, #4]
 800aa7c:	460b      	mov	r3, r1
 800aa7e:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_OFFSET_LR_REG, &value, 1);
 800aa80:	1cfa      	adds	r2, r7, #3
 800aa82:	2301      	movs	r3, #1
 800aa84:	2192      	movs	r1, #146	; 0x92
 800aa86:	6878      	ldr	r0, [r7, #4]
 800aa88:	f7ff ff9d 	bl	800a9c6 <ft5336_write_reg>
 800aa8c:	4603      	mov	r3, r0
}
 800aa8e:	4618      	mov	r0, r3
 800aa90:	3708      	adds	r7, #8
 800aa92:	46bd      	mov	sp, r7
 800aa94:	bd80      	pop	{r7, pc}

0800aa96 <ft5336_offset_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 800aa96:	b580      	push	{r7, lr}
 800aa98:	b082      	sub	sp, #8
 800aa9a:	af00      	add	r7, sp, #0
 800aa9c:	6078      	str	r0, [r7, #4]
 800aa9e:	460b      	mov	r3, r1
 800aaa0:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_OFFSET_UD_REG, &value, 1);
 800aaa2:	1cfa      	adds	r2, r7, #3
 800aaa4:	2301      	movs	r3, #1
 800aaa6:	2193      	movs	r1, #147	; 0x93
 800aaa8:	6878      	ldr	r0, [r7, #4]
 800aaaa:	f7ff ff8c 	bl	800a9c6 <ft5336_write_reg>
 800aaae:	4603      	mov	r3, r0
}
 800aab0:	4618      	mov	r0, r3
 800aab2:	3708      	adds	r7, #8
 800aab4:	46bd      	mov	sp, r7
 800aab6:	bd80      	pop	{r7, pc}

0800aab8 <ft5336_disatnce_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_disatnce_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b082      	sub	sp, #8
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
 800aac0:	460b      	mov	r3, r1
 800aac2:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_LR_REG, &value, 1);
 800aac4:	1cfa      	adds	r2, r7, #3
 800aac6:	2301      	movs	r3, #1
 800aac8:	2194      	movs	r1, #148	; 0x94
 800aaca:	6878      	ldr	r0, [r7, #4]
 800aacc:	f7ff ff7b 	bl	800a9c6 <ft5336_write_reg>
 800aad0:	4603      	mov	r3, r0
}
 800aad2:	4618      	mov	r0, r3
 800aad4:	3708      	adds	r7, #8
 800aad6:	46bd      	mov	sp, r7
 800aad8:	bd80      	pop	{r7, pc}

0800aada <ft5336_distance_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 800aada:	b580      	push	{r7, lr}
 800aadc:	b082      	sub	sp, #8
 800aade:	af00      	add	r7, sp, #0
 800aae0:	6078      	str	r0, [r7, #4]
 800aae2:	460b      	mov	r3, r1
 800aae4:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_UD_REG, &value, 1);
 800aae6:	1cfa      	adds	r2, r7, #3
 800aae8:	2301      	movs	r3, #1
 800aaea:	2195      	movs	r1, #149	; 0x95
 800aaec:	6878      	ldr	r0, [r7, #4]
 800aaee:	f7ff ff6a 	bl	800a9c6 <ft5336_write_reg>
 800aaf2:	4603      	mov	r3, r0
}
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	3708      	adds	r7, #8
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	bd80      	pop	{r7, pc}

0800aafc <ft5336_distance_zoom>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_ZOOM_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_zoom(ft5336_ctx_t *ctx, uint8_t value)
{
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b082      	sub	sp, #8
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
 800ab04:	460b      	mov	r3, r1
 800ab06:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_ZOOM_REG, &value, 1);
 800ab08:	1cfa      	adds	r2, r7, #3
 800ab0a:	2301      	movs	r3, #1
 800ab0c:	2196      	movs	r1, #150	; 0x96
 800ab0e:	6878      	ldr	r0, [r7, #4]
 800ab10:	f7ff ff59 	bl	800a9c6 <ft5336_write_reg>
 800ab14:	4603      	mov	r3, r0
}
 800ab16:	4618      	mov	r0, r3
 800ab18:	3708      	adds	r7, #8
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	bd80      	pop	{r7, pc}

0800ab1e <ft5336_g_mode>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_GMODE_REG register
  * @retval Component status
  */
int32_t  ft5336_g_mode(ft5336_ctx_t *ctx, uint8_t value)
{
 800ab1e:	b580      	push	{r7, lr}
 800ab20:	b082      	sub	sp, #8
 800ab22:	af00      	add	r7, sp, #0
 800ab24:	6078      	str	r0, [r7, #4]
 800ab26:	460b      	mov	r3, r1
 800ab28:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_GMODE_REG, &value, 1);
 800ab2a:	1cfa      	adds	r2, r7, #3
 800ab2c:	2301      	movs	r3, #1
 800ab2e:	21a4      	movs	r1, #164	; 0xa4
 800ab30:	6878      	ldr	r0, [r7, #4]
 800ab32:	f7ff ff48 	bl	800a9c6 <ft5336_write_reg>
 800ab36:	4603      	mov	r3, r0
}
 800ab38:	4618      	mov	r0, r3
 800ab3a:	3708      	adds	r7, #8
 800ab3c:	46bd      	mov	sp, r7
 800ab3e:	bd80      	pop	{r7, pc}

0800ab40 <ft5336_chip_id>:
  * @param  ctx Component context 
  * @param  value Pointer to FT5336_CHIP_ID_REG register value
  * @retval Component status
  */
int32_t  ft5336_chip_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 800ab40:	b580      	push	{r7, lr}
 800ab42:	b084      	sub	sp, #16
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	6078      	str	r0, [r7, #4]
 800ab48:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_CHIP_ID_REG, (uint8_t *)value, 1);
 800ab4a:	2301      	movs	r3, #1
 800ab4c:	683a      	ldr	r2, [r7, #0]
 800ab4e:	21a8      	movs	r1, #168	; 0xa8
 800ab50:	6878      	ldr	r0, [r7, #4]
 800ab52:	f7ff ff21 	bl	800a998 <ft5336_read_reg>
 800ab56:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d107      	bne.n	800ab6e <ft5336_chip_id+0x2e>
  {
    *value &= FT5336_CHIP_ID_BIT_MASK; 
 800ab5e:	683b      	ldr	r3, [r7, #0]
 800ab60:	781a      	ldrb	r2, [r3, #0]
 800ab62:	683b      	ldr	r3, [r7, #0]
 800ab64:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_CHIP_ID_BIT_POSITION; 
 800ab66:	683b      	ldr	r3, [r7, #0]
 800ab68:	781a      	ldrb	r2, [r3, #0]
 800ab6a:	683b      	ldr	r3, [r7, #0]
 800ab6c:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 800ab6e:	68fb      	ldr	r3, [r7, #12]
}
 800ab70:	4618      	mov	r0, r3
 800ab72:	3710      	adds	r7, #16
 800ab74:	46bd      	mov	sp, r7
 800ab76:	bd80      	pop	{r7, pc}

0800ab78 <MX25LM51245G_GetFlashInfo>:
  * @brief  Get Flash information
  * @param  pInfo pointer to information structure
  * @retval error status
  */
int32_t MX25LM51245G_GetFlashInfo(MX25LM51245G_Info_t *pInfo)
{
 800ab78:	b480      	push	{r7}
 800ab7a:	b083      	sub	sp, #12
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
  /* Configure the structure with the memory configuration */
  pInfo->FlashSize              = MX25LM51245G_FLASH_SIZE;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800ab86:	601a      	str	r2, [r3, #0]
  pInfo->EraseSectorSize        = MX25LM51245G_SECTOR_64K;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800ab8e:	605a      	str	r2, [r3, #4]
  pInfo->EraseSectorsNumber     = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SECTOR_64K);
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ab96:	609a      	str	r2, [r3, #8]
  pInfo->EraseSubSectorSize     = MX25LM51245G_SUBSECTOR_4K;
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ab9e:	60da      	str	r2, [r3, #12]
  pInfo->EraseSubSectorNumber   = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SUBSECTOR_4K);
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800aba6:	611a      	str	r2, [r3, #16]
  pInfo->EraseSubSector1Size    = MX25LM51245G_SUBSECTOR_4K;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800abae:	615a      	str	r2, [r3, #20]
  pInfo->EraseSubSector1Number  = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SUBSECTOR_4K);
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800abb6:	619a      	str	r2, [r3, #24]
  pInfo->ProgPageSize           = MX25LM51245G_PAGE_SIZE;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	f44f 7280 	mov.w	r2, #256	; 0x100
 800abbe:	61da      	str	r2, [r3, #28]
  pInfo->ProgPagesNumber        = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_PAGE_SIZE);
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800abc6:	621a      	str	r2, [r3, #32]

  return MX25LM51245G_OK;
 800abc8:	2300      	movs	r3, #0
};
 800abca:	4618      	mov	r0, r3
 800abcc:	370c      	adds	r7, #12
 800abce:	46bd      	mov	sp, r7
 800abd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd4:	4770      	bx	lr

0800abd6 <MX25LM51245G_AutoPollingMemReady>:
  * @param  Mode Interface mode
  * @param  Rate Transfer rate
  * @retval error status
  */
int32_t MX25LM51245G_AutoPollingMemReady(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 800abd6:	b580      	push	{r7, lr}
 800abd8:	b09c      	sub	sp, #112	; 0x70
 800abda:	af00      	add	r7, sp, #0
 800abdc:	6078      	str	r0, [r7, #4]
 800abde:	460b      	mov	r3, r1
 800abe0:	70fb      	strb	r3, [r7, #3]
 800abe2:	4613      	mov	r3, r2
 800abe4:	70bb      	strb	r3, [r7, #2]
  OSPI_RegularCmdTypeDef  s_command = {0};
 800abe6:	f107 0320 	add.w	r3, r7, #32
 800abea:	2250      	movs	r2, #80	; 0x50
 800abec:	2100      	movs	r1, #0
 800abee:	4618      	mov	r0, r3
 800abf0:	f01d fede 	bl	80289b0 <memset>
  OSPI_AutoPollingTypeDef s_config = {0};
 800abf4:	f107 030c 	add.w	r3, r7, #12
 800abf8:	2200      	movs	r2, #0
 800abfa:	601a      	str	r2, [r3, #0]
 800abfc:	605a      	str	r2, [r3, #4]
 800abfe:	609a      	str	r2, [r3, #8]
 800ac00:	60da      	str	r2, [r3, #12]
 800ac02:	611a      	str	r2, [r3, #16]

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 800ac04:	78fb      	ldrb	r3, [r7, #3]
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d105      	bne.n	800ac16 <MX25LM51245G_AutoPollingMemReady+0x40>
 800ac0a:	78bb      	ldrb	r3, [r7, #2]
 800ac0c:	2b01      	cmp	r3, #1
 800ac0e:	d102      	bne.n	800ac16 <MX25LM51245G_AutoPollingMemReady+0x40>
  {
    return MX25LM51245G_ERROR;
 800ac10:	f04f 33ff 	mov.w	r3, #4294967295
 800ac14:	e088      	b.n	800ad28 <MX25LM51245G_AutoPollingMemReady+0x152>
  }

  /* Configure automatic polling mode to wait for memory ready */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800ac16:	2300      	movs	r3, #0
 800ac18:	623b      	str	r3, [r7, #32]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800ac1e:	78fb      	ldrb	r3, [r7, #3]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d101      	bne.n	800ac28 <MX25LM51245G_AutoPollingMemReady+0x52>
 800ac24:	2301      	movs	r3, #1
 800ac26:	e000      	b.n	800ac2a <MX25LM51245G_AutoPollingMemReady+0x54>
 800ac28:	2304      	movs	r3, #4
 800ac2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800ac2c:	78bb      	ldrb	r3, [r7, #2]
 800ac2e:	2b01      	cmp	r3, #1
 800ac30:	d101      	bne.n	800ac36 <MX25LM51245G_AutoPollingMemReady+0x60>
 800ac32:	2308      	movs	r3, #8
 800ac34:	e000      	b.n	800ac38 <MX25LM51245G_AutoPollingMemReady+0x62>
 800ac36:	2300      	movs	r3, #0
 800ac38:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800ac3a:	78fb      	ldrb	r3, [r7, #3]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d101      	bne.n	800ac44 <MX25LM51245G_AutoPollingMemReady+0x6e>
 800ac40:	2300      	movs	r3, #0
 800ac42:	e000      	b.n	800ac46 <MX25LM51245G_AutoPollingMemReady+0x70>
 800ac44:	2310      	movs	r3, #16
 800ac46:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 800ac48:	78fb      	ldrb	r3, [r7, #3]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d101      	bne.n	800ac52 <MX25LM51245G_AutoPollingMemReady+0x7c>
 800ac4e:	2305      	movs	r3, #5
 800ac50:	e001      	b.n	800ac56 <MX25LM51245G_AutoPollingMemReady+0x80>
 800ac52:	f240 53fa 	movw	r3, #1530	; 0x5fa
 800ac56:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 800ac58:	78fb      	ldrb	r3, [r7, #3]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d101      	bne.n	800ac62 <MX25LM51245G_AutoPollingMemReady+0x8c>
 800ac5e:	2300      	movs	r3, #0
 800ac60:	e001      	b.n	800ac66 <MX25LM51245G_AutoPollingMemReady+0x90>
 800ac62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac66:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 800ac68:	78bb      	ldrb	r3, [r7, #2]
 800ac6a:	2b01      	cmp	r3, #1
 800ac6c:	d102      	bne.n	800ac74 <MX25LM51245G_AutoPollingMemReady+0x9e>
 800ac6e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ac72:	e000      	b.n	800ac76 <MX25LM51245G_AutoPollingMemReady+0xa0>
 800ac74:	2300      	movs	r3, #0
 800ac76:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 800ac78:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800ac7c:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Address            = 0U;
 800ac7e:	2300      	movs	r3, #0
 800ac80:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800ac82:	2300      	movs	r3, #0
 800ac84:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 800ac86:	78fb      	ldrb	r3, [r7, #3]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d102      	bne.n	800ac92 <MX25LM51245G_AutoPollingMemReady+0xbc>
 800ac8c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ac90:	e001      	b.n	800ac96 <MX25LM51245G_AutoPollingMemReady+0xc0>
 800ac92:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800ac96:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 800ac98:	78bb      	ldrb	r3, [r7, #2]
 800ac9a:	2b01      	cmp	r3, #1
 800ac9c:	d102      	bne.n	800aca4 <MX25LM51245G_AutoPollingMemReady+0xce>
 800ac9e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800aca2:	e000      	b.n	800aca6 <MX25LM51245G_AutoPollingMemReady+0xd0>
 800aca4:	2300      	movs	r3, #0
 800aca6:	663b      	str	r3, [r7, #96]	; 0x60
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 800aca8:	78fb      	ldrb	r3, [r7, #3]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d101      	bne.n	800acb2 <MX25LM51245G_AutoPollingMemReady+0xdc>
 800acae:	2300      	movs	r3, #0
 800acb0:	e000      	b.n	800acb4 <MX25LM51245G_AutoPollingMemReady+0xde>
 800acb2:	2305      	movs	r3, #5
 800acb4:	667b      	str	r3, [r7, #100]	; 0x64
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 800acb6:	78bb      	ldrb	r3, [r7, #2]
 800acb8:	2b01      	cmp	r3, #1
 800acba:	d101      	bne.n	800acc0 <MX25LM51245G_AutoPollingMemReady+0xea>
 800acbc:	2302      	movs	r3, #2
 800acbe:	e000      	b.n	800acc2 <MX25LM51245G_AutoPollingMemReady+0xec>
 800acc0:	2301      	movs	r3, #1
 800acc2:	65fb      	str	r3, [r7, #92]	; 0x5c
  s_command.DQSMode            = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 800acc4:	78bb      	ldrb	r3, [r7, #2]
 800acc6:	2b01      	cmp	r3, #1
 800acc8:	d102      	bne.n	800acd0 <MX25LM51245G_AutoPollingMemReady+0xfa>
 800acca:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800acce:	e000      	b.n	800acd2 <MX25LM51245G_AutoPollingMemReady+0xfc>
 800acd0:	2300      	movs	r3, #0
 800acd2:	66bb      	str	r3, [r7, #104]	; 0x68
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800acd4:	2300      	movs	r3, #0
 800acd6:	66fb      	str	r3, [r7, #108]	; 0x6c

  s_config.Match         = 0U;
 800acd8:	2300      	movs	r3, #0
 800acda:	60fb      	str	r3, [r7, #12]
  s_config.Mask          = MX25LM51245G_SR_WIP;
 800acdc:	2301      	movs	r3, #1
 800acde:	613b      	str	r3, [r7, #16]
  s_config.MatchMode     = HAL_OSPI_MATCH_MODE_AND;
 800ace0:	2300      	movs	r3, #0
 800ace2:	617b      	str	r3, [r7, #20]
  s_config.Interval      = MX25LM51245G_AUTOPOLLING_INTERVAL_TIME;
 800ace4:	2310      	movs	r3, #16
 800ace6:	61fb      	str	r3, [r7, #28]
  s_config.AutomaticStop = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 800ace8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800acec:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800acee:	f107 0320 	add.w	r3, r7, #32
 800acf2:	f241 3288 	movw	r2, #5000	; 0x1388
 800acf6:	4619      	mov	r1, r3
 800acf8:	6878      	ldr	r0, [r7, #4]
 800acfa:	f007 f901 	bl	8011f00 <HAL_OSPI_Command>
 800acfe:	4603      	mov	r3, r0
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d002      	beq.n	800ad0a <MX25LM51245G_AutoPollingMemReady+0x134>
  {
    return MX25LM51245G_ERROR;
 800ad04:	f04f 33ff 	mov.w	r3, #4294967295
 800ad08:	e00e      	b.n	800ad28 <MX25LM51245G_AutoPollingMemReady+0x152>
  }

  if (HAL_OSPI_AutoPolling(Ctx, &s_config, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800ad0a:	f107 030c 	add.w	r3, r7, #12
 800ad0e:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad12:	4619      	mov	r1, r3
 800ad14:	6878      	ldr	r0, [r7, #4]
 800ad16:	f007 fa96 	bl	8012246 <HAL_OSPI_AutoPolling>
 800ad1a:	4603      	mov	r3, r0
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d002      	beq.n	800ad26 <MX25LM51245G_AutoPollingMemReady+0x150>
  {
    return MX25LM51245G_ERROR;
 800ad20:	f04f 33ff 	mov.w	r3, #4294967295
 800ad24:	e000      	b.n	800ad28 <MX25LM51245G_AutoPollingMemReady+0x152>
  }

  return MX25LM51245G_OK;
 800ad26:	2300      	movs	r3, #0
}
 800ad28:	4618      	mov	r0, r3
 800ad2a:	3770      	adds	r7, #112	; 0x70
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	bd80      	pop	{r7, pc}

0800ad30 <MX25LM51245G_EnableMemoryMappedModeSTR>:
  * @param  Mode Interface mode
  * @param  AddressSize Address size
  * @retval OSPI memory status
  */
int32_t MX25LM51245G_EnableMemoryMappedModeSTR(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_AddressSize_t AddressSize)
{
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b098      	sub	sp, #96	; 0x60
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	6078      	str	r0, [r7, #4]
 800ad38:	460b      	mov	r3, r1
 800ad3a:	70fb      	strb	r3, [r7, #3]
 800ad3c:	4613      	mov	r3, r2
 800ad3e:	70bb      	strb	r3, [r7, #2]
  OSPI_RegularCmdTypeDef      s_command = {0};
 800ad40:	f107 0310 	add.w	r3, r7, #16
 800ad44:	2250      	movs	r2, #80	; 0x50
 800ad46:	2100      	movs	r1, #0
 800ad48:	4618      	mov	r0, r3
 800ad4a:	f01d fe31 	bl	80289b0 <memset>
  OSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 800ad4e:	f107 0308 	add.w	r3, r7, #8
 800ad52:	2200      	movs	r2, #0
 800ad54:	601a      	str	r2, [r3, #0]
 800ad56:	605a      	str	r2, [r3, #4]

  /* OPI mode and 3-bytes address size not supported by memory */
  if ((Mode == MX25LM51245G_OPI_MODE) && (AddressSize == MX25LM51245G_3BYTES_SIZE))
 800ad58:	78fb      	ldrb	r3, [r7, #3]
 800ad5a:	2b01      	cmp	r3, #1
 800ad5c:	d105      	bne.n	800ad6a <MX25LM51245G_EnableMemoryMappedModeSTR+0x3a>
 800ad5e:	78bb      	ldrb	r3, [r7, #2]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d102      	bne.n	800ad6a <MX25LM51245G_EnableMemoryMappedModeSTR+0x3a>
  {
    return MX25LM51245G_ERROR;
 800ad64:	f04f 33ff 	mov.w	r3, #4294967295
 800ad68:	e088      	b.n	800ae7c <MX25LM51245G_EnableMemoryMappedModeSTR+0x14c>
  }

  /* Initialize the read command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_READ_CFG;
 800ad6a:	2301      	movs	r3, #1
 800ad6c:	613b      	str	r3, [r7, #16]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 800ad6e:	2300      	movs	r3, #0
 800ad70:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800ad72:	78fb      	ldrb	r3, [r7, #3]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d101      	bne.n	800ad7c <MX25LM51245G_EnableMemoryMappedModeSTR+0x4c>
 800ad78:	2301      	movs	r3, #1
 800ad7a:	e000      	b.n	800ad7e <MX25LM51245G_EnableMemoryMappedModeSTR+0x4e>
 800ad7c:	2304      	movs	r3, #4
 800ad7e:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800ad80:	2300      	movs	r3, #0
 800ad82:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800ad84:	78fb      	ldrb	r3, [r7, #3]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d101      	bne.n	800ad8e <MX25LM51245G_EnableMemoryMappedModeSTR+0x5e>
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	e000      	b.n	800ad90 <MX25LM51245G_EnableMemoryMappedModeSTR+0x60>
 800ad8e:	2310      	movs	r3, #16
 800ad90:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_FAST_READ_CMD : MX25LM51245G_4_BYTE_ADDR_FAST_READ_CMD) : MX25LM51245G_OCTA_READ_CMD;
 800ad92:	78fb      	ldrb	r3, [r7, #3]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d106      	bne.n	800ada6 <MX25LM51245G_EnableMemoryMappedModeSTR+0x76>
 800ad98:	78bb      	ldrb	r3, [r7, #2]
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d101      	bne.n	800ada2 <MX25LM51245G_EnableMemoryMappedModeSTR+0x72>
 800ad9e:	230b      	movs	r3, #11
 800ada0:	e003      	b.n	800adaa <MX25LM51245G_EnableMemoryMappedModeSTR+0x7a>
 800ada2:	230c      	movs	r3, #12
 800ada4:	e001      	b.n	800adaa <MX25LM51245G_EnableMemoryMappedModeSTR+0x7a>
 800ada6:	f64e 4313 	movw	r3, #60435	; 0xec13
 800adaa:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 800adac:	78fb      	ldrb	r3, [r7, #3]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d102      	bne.n	800adb8 <MX25LM51245G_EnableMemoryMappedModeSTR+0x88>
 800adb2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800adb6:	e001      	b.n	800adbc <MX25LM51245G_EnableMemoryMappedModeSTR+0x8c>
 800adb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800adbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
 800adbe:	2300      	movs	r3, #0
 800adc0:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.AddressSize        = (AddressSize == MX25LM51245G_3BYTES_SIZE) ? HAL_OSPI_ADDRESS_24_BITS : HAL_OSPI_ADDRESS_32_BITS;
 800adc2:	78bb      	ldrb	r3, [r7, #2]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d102      	bne.n	800adce <MX25LM51245G_EnableMemoryMappedModeSTR+0x9e>
 800adc8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800adcc:	e001      	b.n	800add2 <MX25LM51245G_EnableMemoryMappedModeSTR+0xa2>
 800adce:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800add2:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800add4:	2300      	movs	r3, #0
 800add6:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 800add8:	78fb      	ldrb	r3, [r7, #3]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d102      	bne.n	800ade4 <MX25LM51245G_EnableMemoryMappedModeSTR+0xb4>
 800adde:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ade2:	e001      	b.n	800ade8 <MX25LM51245G_EnableMemoryMappedModeSTR+0xb8>
 800ade4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800ade8:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 800adea:	2300      	movs	r3, #0
 800adec:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? DUMMY_CYCLES_READ : DUMMY_CYCLES_READ_OCTAL;
 800adee:	78fb      	ldrb	r3, [r7, #3]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d101      	bne.n	800adf8 <MX25LM51245G_EnableMemoryMappedModeSTR+0xc8>
 800adf4:	2308      	movs	r3, #8
 800adf6:	e000      	b.n	800adfa <MX25LM51245G_EnableMemoryMappedModeSTR+0xca>
 800adf8:	2306      	movs	r3, #6
 800adfa:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 800adfc:	2300      	movs	r3, #0
 800adfe:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800ae00:	2300      	movs	r3, #0
 800ae02:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Send the read command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800ae04:	f107 0310 	add.w	r3, r7, #16
 800ae08:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae0c:	4619      	mov	r1, r3
 800ae0e:	6878      	ldr	r0, [r7, #4]
 800ae10:	f007 f876 	bl	8011f00 <HAL_OSPI_Command>
 800ae14:	4603      	mov	r3, r0
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d002      	beq.n	800ae20 <MX25LM51245G_EnableMemoryMappedModeSTR+0xf0>
  {
    return MX25LM51245G_ERROR;
 800ae1a:	f04f 33ff 	mov.w	r3, #4294967295
 800ae1e:	e02d      	b.n	800ae7c <MX25LM51245G_EnableMemoryMappedModeSTR+0x14c>
  }

  /* Initialize the program command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_WRITE_CFG;
 800ae20:	2302      	movs	r3, #2
 800ae22:	613b      	str	r3, [r7, #16]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_PAGE_PROG_CMD : MX25LM51245G_4_BYTE_PAGE_PROG_CMD) : MX25LM51245G_OCTA_PAGE_PROG_CMD;
 800ae24:	78fb      	ldrb	r3, [r7, #3]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d106      	bne.n	800ae38 <MX25LM51245G_EnableMemoryMappedModeSTR+0x108>
 800ae2a:	78bb      	ldrb	r3, [r7, #2]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d101      	bne.n	800ae34 <MX25LM51245G_EnableMemoryMappedModeSTR+0x104>
 800ae30:	2302      	movs	r3, #2
 800ae32:	e003      	b.n	800ae3c <MX25LM51245G_EnableMemoryMappedModeSTR+0x10c>
 800ae34:	2312      	movs	r3, #18
 800ae36:	e001      	b.n	800ae3c <MX25LM51245G_EnableMemoryMappedModeSTR+0x10c>
 800ae38:	f241 23ed 	movw	r3, #4845	; 0x12ed
 800ae3c:	61bb      	str	r3, [r7, #24]
  s_command.DummyCycles        = 0U;
 800ae3e:	2300      	movs	r3, #0
 800ae40:	657b      	str	r3, [r7, #84]	; 0x54

  /* Send the write command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800ae42:	f107 0310 	add.w	r3, r7, #16
 800ae46:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae4a:	4619      	mov	r1, r3
 800ae4c:	6878      	ldr	r0, [r7, #4]
 800ae4e:	f007 f857 	bl	8011f00 <HAL_OSPI_Command>
 800ae52:	4603      	mov	r3, r0
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d002      	beq.n	800ae5e <MX25LM51245G_EnableMemoryMappedModeSTR+0x12e>
  {
    return MX25LM51245G_ERROR;
 800ae58:	f04f 33ff 	mov.w	r3, #4294967295
 800ae5c:	e00e      	b.n	800ae7c <MX25LM51245G_EnableMemoryMappedModeSTR+0x14c>
  }

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
 800ae5e:	2300      	movs	r3, #0
 800ae60:	60bb      	str	r3, [r7, #8]

  if (HAL_OSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
 800ae62:	f107 0308 	add.w	r3, r7, #8
 800ae66:	4619      	mov	r1, r3
 800ae68:	6878      	ldr	r0, [r7, #4]
 800ae6a:	f007 fa73 	bl	8012354 <HAL_OSPI_MemoryMapped>
 800ae6e:	4603      	mov	r3, r0
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d002      	beq.n	800ae7a <MX25LM51245G_EnableMemoryMappedModeSTR+0x14a>
  {
    return MX25LM51245G_ERROR;
 800ae74:	f04f 33ff 	mov.w	r3, #4294967295
 800ae78:	e000      	b.n	800ae7c <MX25LM51245G_EnableMemoryMappedModeSTR+0x14c>
  }

  return MX25LM51245G_OK;
 800ae7a:	2300      	movs	r3, #0
}
 800ae7c:	4618      	mov	r0, r3
 800ae7e:	3760      	adds	r7, #96	; 0x60
 800ae80:	46bd      	mov	sp, r7
 800ae82:	bd80      	pop	{r7, pc}

0800ae84 <MX25LM51245G_EnableMemoryMappedModeDTR>:
  * @param  AddressSize Address size
  * @note   Only OPI mode support DTR transfer rate
  * @retval OSPI memory status
  */
int32_t MX25LM51245G_EnableMemoryMappedModeDTR(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode)
{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b098      	sub	sp, #96	; 0x60
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	6078      	str	r0, [r7, #4]
 800ae8c:	460b      	mov	r3, r1
 800ae8e:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Mode);

  OSPI_RegularCmdTypeDef      s_command = {0};
 800ae90:	f107 0310 	add.w	r3, r7, #16
 800ae94:	2250      	movs	r2, #80	; 0x50
 800ae96:	2100      	movs	r1, #0
 800ae98:	4618      	mov	r0, r3
 800ae9a:	f01d fd89 	bl	80289b0 <memset>
  OSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 800ae9e:	f107 0308 	add.w	r3, r7, #8
 800aea2:	2200      	movs	r2, #0
 800aea4:	601a      	str	r2, [r3, #0]
 800aea6:	605a      	str	r2, [r3, #4]

  /* Initialize the read command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_READ_CFG;
 800aea8:	2301      	movs	r3, #1
 800aeaa:	613b      	str	r3, [r7, #16]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 800aeac:	2300      	movs	r3, #0
 800aeae:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = HAL_OSPI_INSTRUCTION_8_LINES;
 800aeb0:	2304      	movs	r3, #4
 800aeb2:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_ENABLE;
 800aeb4:	2308      	movs	r3, #8
 800aeb6:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionSize    = HAL_OSPI_INSTRUCTION_16_BITS;
 800aeb8:	2310      	movs	r3, #16
 800aeba:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = MX25LM51245G_OCTA_READ_DTR_CMD;
 800aebc:	f64e 6311 	movw	r3, #60945	; 0xee11
 800aec0:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = HAL_OSPI_ADDRESS_8_LINES;
 800aec2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aec6:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_ENABLE;
 800aec8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800aecc:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 800aece:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800aed2:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800aed4:	2300      	movs	r3, #0
 800aed6:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DataMode           = HAL_OSPI_DATA_8_LINES;
 800aed8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800aedc:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataDtrMode        = HAL_OSPI_DATA_DTR_ENABLE;
 800aede:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800aee2:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DummyCycles        = DUMMY_CYCLES_READ_OCTAL_DTR;
 800aee4:	2306      	movs	r3, #6
 800aee6:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DQSMode            = HAL_OSPI_DQS_ENABLE;
 800aee8:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800aeec:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800aeee:	2300      	movs	r3, #0
 800aef0:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800aef2:	f107 0310 	add.w	r3, r7, #16
 800aef6:	f241 3288 	movw	r2, #5000	; 0x1388
 800aefa:	4619      	mov	r1, r3
 800aefc:	6878      	ldr	r0, [r7, #4]
 800aefe:	f006 ffff 	bl	8011f00 <HAL_OSPI_Command>
 800af02:	4603      	mov	r3, r0
 800af04:	2b00      	cmp	r3, #0
 800af06:	d002      	beq.n	800af0e <MX25LM51245G_EnableMemoryMappedModeDTR+0x8a>
  {
    return MX25LM51245G_ERROR;
 800af08:	f04f 33ff 	mov.w	r3, #4294967295
 800af0c:	e025      	b.n	800af5a <MX25LM51245G_EnableMemoryMappedModeDTR+0xd6>
  }

  /* Initialize the program command */
  s_command.OperationType = HAL_OSPI_OPTYPE_WRITE_CFG;
 800af0e:	2302      	movs	r3, #2
 800af10:	613b      	str	r3, [r7, #16]
  s_command.Instruction   = MX25LM51245G_OCTA_PAGE_PROG_CMD;
 800af12:	f241 23ed 	movw	r3, #4845	; 0x12ed
 800af16:	61bb      	str	r3, [r7, #24]
  s_command.DummyCycles   = 0U;
 800af18:	2300      	movs	r3, #0
 800af1a:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DQSMode       = HAL_OSPI_DQS_DISABLE;
 800af1c:	2300      	movs	r3, #0
 800af1e:	65bb      	str	r3, [r7, #88]	; 0x58

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800af20:	f107 0310 	add.w	r3, r7, #16
 800af24:	f241 3288 	movw	r2, #5000	; 0x1388
 800af28:	4619      	mov	r1, r3
 800af2a:	6878      	ldr	r0, [r7, #4]
 800af2c:	f006 ffe8 	bl	8011f00 <HAL_OSPI_Command>
 800af30:	4603      	mov	r3, r0
 800af32:	2b00      	cmp	r3, #0
 800af34:	d002      	beq.n	800af3c <MX25LM51245G_EnableMemoryMappedModeDTR+0xb8>
  {
    return MX25LM51245G_ERROR;
 800af36:	f04f 33ff 	mov.w	r3, #4294967295
 800af3a:	e00e      	b.n	800af5a <MX25LM51245G_EnableMemoryMappedModeDTR+0xd6>
  }
  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
 800af3c:	2300      	movs	r3, #0
 800af3e:	60bb      	str	r3, [r7, #8]

  if (HAL_OSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
 800af40:	f107 0308 	add.w	r3, r7, #8
 800af44:	4619      	mov	r1, r3
 800af46:	6878      	ldr	r0, [r7, #4]
 800af48:	f007 fa04 	bl	8012354 <HAL_OSPI_MemoryMapped>
 800af4c:	4603      	mov	r3, r0
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d002      	beq.n	800af58 <MX25LM51245G_EnableMemoryMappedModeDTR+0xd4>
  {
    return MX25LM51245G_ERROR;
 800af52:	f04f 33ff 	mov.w	r3, #4294967295
 800af56:	e000      	b.n	800af5a <MX25LM51245G_EnableMemoryMappedModeDTR+0xd6>
  }

  return MX25LM51245G_OK;
 800af58:	2300      	movs	r3, #0
}
 800af5a:	4618      	mov	r0, r3
 800af5c:	3760      	adds	r7, #96	; 0x60
 800af5e:	46bd      	mov	sp, r7
 800af60:	bd80      	pop	{r7, pc}

0800af62 <MX25LM51245G_WriteEnable>:
  * @param  Mode Interface mode
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_WriteEnable(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 800af62:	b580      	push	{r7, lr}
 800af64:	b09c      	sub	sp, #112	; 0x70
 800af66:	af00      	add	r7, sp, #0
 800af68:	6078      	str	r0, [r7, #4]
 800af6a:	460b      	mov	r3, r1
 800af6c:	70fb      	strb	r3, [r7, #3]
 800af6e:	4613      	mov	r3, r2
 800af70:	70bb      	strb	r3, [r7, #2]
  OSPI_RegularCmdTypeDef     s_command = {0};
 800af72:	f107 0320 	add.w	r3, r7, #32
 800af76:	2250      	movs	r2, #80	; 0x50
 800af78:	2100      	movs	r1, #0
 800af7a:	4618      	mov	r0, r3
 800af7c:	f01d fd18 	bl	80289b0 <memset>
  OSPI_AutoPollingTypeDef s_config = {0};
 800af80:	f107 030c 	add.w	r3, r7, #12
 800af84:	2200      	movs	r2, #0
 800af86:	601a      	str	r2, [r3, #0]
 800af88:	605a      	str	r2, [r3, #4]
 800af8a:	609a      	str	r2, [r3, #8]
 800af8c:	60da      	str	r2, [r3, #12]
 800af8e:	611a      	str	r2, [r3, #16]

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 800af90:	78fb      	ldrb	r3, [r7, #3]
 800af92:	2b00      	cmp	r3, #0
 800af94:	d105      	bne.n	800afa2 <MX25LM51245G_WriteEnable+0x40>
 800af96:	78bb      	ldrb	r3, [r7, #2]
 800af98:	2b01      	cmp	r3, #1
 800af9a:	d102      	bne.n	800afa2 <MX25LM51245G_WriteEnable+0x40>
  {
    return MX25LM51245G_ERROR;
 800af9c:	f04f 33ff 	mov.w	r3, #4294967295
 800afa0:	e0a6      	b.n	800b0f0 <MX25LM51245G_WriteEnable+0x18e>
  }

  /* Initialize the write enable command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800afa2:	2300      	movs	r3, #0
 800afa4:	623b      	str	r3, [r7, #32]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 800afa6:	2300      	movs	r3, #0
 800afa8:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800afaa:	78fb      	ldrb	r3, [r7, #3]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d101      	bne.n	800afb4 <MX25LM51245G_WriteEnable+0x52>
 800afb0:	2301      	movs	r3, #1
 800afb2:	e000      	b.n	800afb6 <MX25LM51245G_WriteEnable+0x54>
 800afb4:	2304      	movs	r3, #4
 800afb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800afb8:	78bb      	ldrb	r3, [r7, #2]
 800afba:	2b01      	cmp	r3, #1
 800afbc:	d101      	bne.n	800afc2 <MX25LM51245G_WriteEnable+0x60>
 800afbe:	2308      	movs	r3, #8
 800afc0:	e000      	b.n	800afc4 <MX25LM51245G_WriteEnable+0x62>
 800afc2:	2300      	movs	r3, #0
 800afc4:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800afc6:	78fb      	ldrb	r3, [r7, #3]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d101      	bne.n	800afd0 <MX25LM51245G_WriteEnable+0x6e>
 800afcc:	2300      	movs	r3, #0
 800afce:	e000      	b.n	800afd2 <MX25LM51245G_WriteEnable+0x70>
 800afd0:	2310      	movs	r3, #16
 800afd2:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_WRITE_ENABLE_CMD : MX25LM51245G_OCTA_WRITE_ENABLE_CMD;
 800afd4:	78fb      	ldrb	r3, [r7, #3]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d101      	bne.n	800afde <MX25LM51245G_WriteEnable+0x7c>
 800afda:	2306      	movs	r3, #6
 800afdc:	e001      	b.n	800afe2 <MX25LM51245G_WriteEnable+0x80>
 800afde:	f240 63f9 	movw	r3, #1785	; 0x6f9
 800afe2:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 800afe4:	2300      	movs	r3, #0
 800afe6:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800afe8:	2300      	movs	r3, #0
 800afea:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DataMode           = HAL_OSPI_DATA_NONE;
 800afec:	2300      	movs	r3, #0
 800afee:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.DummyCycles        = 0U;
 800aff0:	2300      	movs	r3, #0
 800aff2:	667b      	str	r3, [r7, #100]	; 0x64
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 800aff4:	2300      	movs	r3, #0
 800aff6:	66bb      	str	r3, [r7, #104]	; 0x68
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800aff8:	2300      	movs	r3, #0
 800affa:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800affc:	f107 0320 	add.w	r3, r7, #32
 800b000:	f241 3288 	movw	r2, #5000	; 0x1388
 800b004:	4619      	mov	r1, r3
 800b006:	6878      	ldr	r0, [r7, #4]
 800b008:	f006 ff7a 	bl	8011f00 <HAL_OSPI_Command>
 800b00c:	4603      	mov	r3, r0
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d002      	beq.n	800b018 <MX25LM51245G_WriteEnable+0xb6>
  {
    return MX25LM51245G_ERROR;
 800b012:	f04f 33ff 	mov.w	r3, #4294967295
 800b016:	e06b      	b.n	800b0f0 <MX25LM51245G_WriteEnable+0x18e>
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_command.Instruction    = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 800b018:	78fb      	ldrb	r3, [r7, #3]
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d101      	bne.n	800b022 <MX25LM51245G_WriteEnable+0xc0>
 800b01e:	2305      	movs	r3, #5
 800b020:	e001      	b.n	800b026 <MX25LM51245G_WriteEnable+0xc4>
 800b022:	f240 53fa 	movw	r3, #1530	; 0x5fa
 800b026:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 800b028:	78fb      	ldrb	r3, [r7, #3]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d101      	bne.n	800b032 <MX25LM51245G_WriteEnable+0xd0>
 800b02e:	2300      	movs	r3, #0
 800b030:	e001      	b.n	800b036 <MX25LM51245G_WriteEnable+0xd4>
 800b032:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b036:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AddressDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 800b038:	78bb      	ldrb	r3, [r7, #2]
 800b03a:	2b01      	cmp	r3, #1
 800b03c:	d102      	bne.n	800b044 <MX25LM51245G_WriteEnable+0xe2>
 800b03e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b042:	e000      	b.n	800b046 <MX25LM51245G_WriteEnable+0xe4>
 800b044:	2300      	movs	r3, #0
 800b046:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.AddressSize    = HAL_OSPI_ADDRESS_32_BITS;
 800b048:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800b04c:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Address        = 0U;
 800b04e:	2300      	movs	r3, #0
 800b050:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DataMode       = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 800b052:	78fb      	ldrb	r3, [r7, #3]
 800b054:	2b00      	cmp	r3, #0
 800b056:	d102      	bne.n	800b05e <MX25LM51245G_WriteEnable+0xfc>
 800b058:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b05c:	e001      	b.n	800b062 <MX25LM51245G_WriteEnable+0x100>
 800b05e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800b062:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.DataDtrMode    = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 800b064:	78bb      	ldrb	r3, [r7, #2]
 800b066:	2b01      	cmp	r3, #1
 800b068:	d102      	bne.n	800b070 <MX25LM51245G_WriteEnable+0x10e>
 800b06a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b06e:	e000      	b.n	800b072 <MX25LM51245G_WriteEnable+0x110>
 800b070:	2300      	movs	r3, #0
 800b072:	663b      	str	r3, [r7, #96]	; 0x60
  s_command.DummyCycles    = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 800b074:	78fb      	ldrb	r3, [r7, #3]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d101      	bne.n	800b07e <MX25LM51245G_WriteEnable+0x11c>
 800b07a:	2300      	movs	r3, #0
 800b07c:	e000      	b.n	800b080 <MX25LM51245G_WriteEnable+0x11e>
 800b07e:	2305      	movs	r3, #5
 800b080:	667b      	str	r3, [r7, #100]	; 0x64
  s_command.NbData         = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 800b082:	78bb      	ldrb	r3, [r7, #2]
 800b084:	2b01      	cmp	r3, #1
 800b086:	d101      	bne.n	800b08c <MX25LM51245G_WriteEnable+0x12a>
 800b088:	2302      	movs	r3, #2
 800b08a:	e000      	b.n	800b08e <MX25LM51245G_WriteEnable+0x12c>
 800b08c:	2301      	movs	r3, #1
 800b08e:	65fb      	str	r3, [r7, #92]	; 0x5c
  s_command.DQSMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 800b090:	78bb      	ldrb	r3, [r7, #2]
 800b092:	2b01      	cmp	r3, #1
 800b094:	d102      	bne.n	800b09c <MX25LM51245G_WriteEnable+0x13a>
 800b096:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800b09a:	e000      	b.n	800b09e <MX25LM51245G_WriteEnable+0x13c>
 800b09c:	2300      	movs	r3, #0
 800b09e:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800b0a0:	f107 0320 	add.w	r3, r7, #32
 800b0a4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b0a8:	4619      	mov	r1, r3
 800b0aa:	6878      	ldr	r0, [r7, #4]
 800b0ac:	f006 ff28 	bl	8011f00 <HAL_OSPI_Command>
 800b0b0:	4603      	mov	r3, r0
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d002      	beq.n	800b0bc <MX25LM51245G_WriteEnable+0x15a>
  {
    return MX25LM51245G_ERROR;
 800b0b6:	f04f 33ff 	mov.w	r3, #4294967295
 800b0ba:	e019      	b.n	800b0f0 <MX25LM51245G_WriteEnable+0x18e>
  }

  s_config.Match           = 2U;
 800b0bc:	2302      	movs	r3, #2
 800b0be:	60fb      	str	r3, [r7, #12]
  s_config.Mask            = 2U;
 800b0c0:	2302      	movs	r3, #2
 800b0c2:	613b      	str	r3, [r7, #16]
  s_config.MatchMode       = HAL_OSPI_MATCH_MODE_AND;
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	617b      	str	r3, [r7, #20]
  s_config.Interval        = MX25LM51245G_AUTOPOLLING_INTERVAL_TIME;
 800b0c8:	2310      	movs	r3, #16
 800b0ca:	61fb      	str	r3, [r7, #28]
  s_config.AutomaticStop   = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 800b0cc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b0d0:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_AutoPolling(Ctx, &s_config, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800b0d2:	f107 030c 	add.w	r3, r7, #12
 800b0d6:	f241 3288 	movw	r2, #5000	; 0x1388
 800b0da:	4619      	mov	r1, r3
 800b0dc:	6878      	ldr	r0, [r7, #4]
 800b0de:	f007 f8b2 	bl	8012246 <HAL_OSPI_AutoPolling>
 800b0e2:	4603      	mov	r3, r0
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d002      	beq.n	800b0ee <MX25LM51245G_WriteEnable+0x18c>
  {
    return MX25LM51245G_ERROR;
 800b0e8:	f04f 33ff 	mov.w	r3, #4294967295
 800b0ec:	e000      	b.n	800b0f0 <MX25LM51245G_WriteEnable+0x18e>
  }

  return MX25LM51245G_OK;
 800b0ee:	2300      	movs	r3, #0
}
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	3770      	adds	r7, #112	; 0x70
 800b0f4:	46bd      	mov	sp, r7
 800b0f6:	bd80      	pop	{r7, pc}

0800b0f8 <MX25LM51245G_WriteCfg2Register>:
  * @param  Rate Transfer rate STR or DTR
  * @param  Value Value to write to configuration register
  * @retval error status
  */
int32_t MX25LM51245G_WriteCfg2Register(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate, uint32_t WriteAddr, uint8_t Value)
{
 800b0f8:	b580      	push	{r7, lr}
 800b0fa:	b098      	sub	sp, #96	; 0x60
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	60f8      	str	r0, [r7, #12]
 800b100:	607b      	str	r3, [r7, #4]
 800b102:	460b      	mov	r3, r1
 800b104:	72fb      	strb	r3, [r7, #11]
 800b106:	4613      	mov	r3, r2
 800b108:	72bb      	strb	r3, [r7, #10]
  OSPI_RegularCmdTypeDef s_command = {0};
 800b10a:	f107 0310 	add.w	r3, r7, #16
 800b10e:	2250      	movs	r2, #80	; 0x50
 800b110:	2100      	movs	r1, #0
 800b112:	4618      	mov	r0, r3
 800b114:	f01d fc4c 	bl	80289b0 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 800b118:	7afb      	ldrb	r3, [r7, #11]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d105      	bne.n	800b12a <MX25LM51245G_WriteCfg2Register+0x32>
 800b11e:	7abb      	ldrb	r3, [r7, #10]
 800b120:	2b01      	cmp	r3, #1
 800b122:	d102      	bne.n	800b12a <MX25LM51245G_WriteCfg2Register+0x32>
  {
    return MX25LM51245G_ERROR;
 800b124:	f04f 33ff 	mov.w	r3, #4294967295
 800b128:	e077      	b.n	800b21a <MX25LM51245G_WriteCfg2Register+0x122>
  }

  /* Initialize the writing of configuration register 2 */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800b12a:	2300      	movs	r3, #0
 800b12c:	613b      	str	r3, [r7, #16]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 800b12e:	2300      	movs	r3, #0
 800b130:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800b132:	7afb      	ldrb	r3, [r7, #11]
 800b134:	2b00      	cmp	r3, #0
 800b136:	d101      	bne.n	800b13c <MX25LM51245G_WriteCfg2Register+0x44>
 800b138:	2301      	movs	r3, #1
 800b13a:	e000      	b.n	800b13e <MX25LM51245G_WriteCfg2Register+0x46>
 800b13c:	2304      	movs	r3, #4
 800b13e:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800b140:	7abb      	ldrb	r3, [r7, #10]
 800b142:	2b01      	cmp	r3, #1
 800b144:	d101      	bne.n	800b14a <MX25LM51245G_WriteCfg2Register+0x52>
 800b146:	2308      	movs	r3, #8
 800b148:	e000      	b.n	800b14c <MX25LM51245G_WriteCfg2Register+0x54>
 800b14a:	2300      	movs	r3, #0
 800b14c:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800b14e:	7afb      	ldrb	r3, [r7, #11]
 800b150:	2b00      	cmp	r3, #0
 800b152:	d101      	bne.n	800b158 <MX25LM51245G_WriteCfg2Register+0x60>
 800b154:	2300      	movs	r3, #0
 800b156:	e000      	b.n	800b15a <MX25LM51245G_WriteCfg2Register+0x62>
 800b158:	2310      	movs	r3, #16
 800b15a:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_WRITE_CFG_REG2_CMD : MX25LM51245G_OCTA_WRITE_CFG_REG2_CMD;
 800b15c:	7afb      	ldrb	r3, [r7, #11]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d101      	bne.n	800b166 <MX25LM51245G_WriteCfg2Register+0x6e>
 800b162:	2372      	movs	r3, #114	; 0x72
 800b164:	e001      	b.n	800b16a <MX25LM51245G_WriteCfg2Register+0x72>
 800b166:	f247 238d 	movw	r3, #29325	; 0x728d
 800b16a:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 800b16c:	7afb      	ldrb	r3, [r7, #11]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d102      	bne.n	800b178 <MX25LM51245G_WriteCfg2Register+0x80>
 800b172:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b176:	e001      	b.n	800b17c <MX25LM51245G_WriteCfg2Register+0x84>
 800b178:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b17c:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 800b17e:	7abb      	ldrb	r3, [r7, #10]
 800b180:	2b01      	cmp	r3, #1
 800b182:	d102      	bne.n	800b18a <MX25LM51245G_WriteCfg2Register+0x92>
 800b184:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b188:	e000      	b.n	800b18c <MX25LM51245G_WriteCfg2Register+0x94>
 800b18a:	2300      	movs	r3, #0
 800b18c:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 800b18e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800b192:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.Address            = WriteAddr;
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800b198:	2300      	movs	r3, #0
 800b19a:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 800b19c:	7afb      	ldrb	r3, [r7, #11]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d102      	bne.n	800b1a8 <MX25LM51245G_WriteCfg2Register+0xb0>
 800b1a2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b1a6:	e001      	b.n	800b1ac <MX25LM51245G_WriteCfg2Register+0xb4>
 800b1a8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800b1ac:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 800b1ae:	7abb      	ldrb	r3, [r7, #10]
 800b1b0:	2b01      	cmp	r3, #1
 800b1b2:	d102      	bne.n	800b1ba <MX25LM51245G_WriteCfg2Register+0xc2>
 800b1b4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b1b8:	e000      	b.n	800b1bc <MX25LM51245G_WriteCfg2Register+0xc4>
 800b1ba:	2300      	movs	r3, #0
 800b1bc:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DummyCycles        = 0U;
 800b1be:	2300      	movs	r3, #0
 800b1c0:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.NbData             = (Mode == MX25LM51245G_SPI_MODE) ? 1U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U);
 800b1c2:	7afb      	ldrb	r3, [r7, #11]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d006      	beq.n	800b1d6 <MX25LM51245G_WriteCfg2Register+0xde>
 800b1c8:	7abb      	ldrb	r3, [r7, #10]
 800b1ca:	2b01      	cmp	r3, #1
 800b1cc:	d101      	bne.n	800b1d2 <MX25LM51245G_WriteCfg2Register+0xda>
 800b1ce:	2302      	movs	r3, #2
 800b1d0:	e002      	b.n	800b1d8 <MX25LM51245G_WriteCfg2Register+0xe0>
 800b1d2:	2301      	movs	r3, #1
 800b1d4:	e000      	b.n	800b1d8 <MX25LM51245G_WriteCfg2Register+0xe0>
 800b1d6:	2301      	movs	r3, #1
 800b1d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 800b1da:	2300      	movs	r3, #0
 800b1dc:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800b1de:	2300      	movs	r3, #0
 800b1e0:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800b1e2:	f107 0310 	add.w	r3, r7, #16
 800b1e6:	f241 3288 	movw	r2, #5000	; 0x1388
 800b1ea:	4619      	mov	r1, r3
 800b1ec:	68f8      	ldr	r0, [r7, #12]
 800b1ee:	f006 fe87 	bl	8011f00 <HAL_OSPI_Command>
 800b1f2:	4603      	mov	r3, r0
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d002      	beq.n	800b1fe <MX25LM51245G_WriteCfg2Register+0x106>
  {
    return MX25LM51245G_ERROR;
 800b1f8:	f04f 33ff 	mov.w	r3, #4294967295
 800b1fc:	e00d      	b.n	800b21a <MX25LM51245G_WriteCfg2Register+0x122>
  }

  if (HAL_OSPI_Transmit(Ctx, &Value, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800b1fe:	f241 3288 	movw	r2, #5000	; 0x1388
 800b202:	f107 0168 	add.w	r1, r7, #104	; 0x68
 800b206:	68f8      	ldr	r0, [r7, #12]
 800b208:	f006 ff07 	bl	801201a <HAL_OSPI_Transmit>
 800b20c:	4603      	mov	r3, r0
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d002      	beq.n	800b218 <MX25LM51245G_WriteCfg2Register+0x120>
  {
    return MX25LM51245G_ERROR;
 800b212:	f04f 33ff 	mov.w	r3, #4294967295
 800b216:	e000      	b.n	800b21a <MX25LM51245G_WriteCfg2Register+0x122>
  }

  return MX25LM51245G_OK;
 800b218:	2300      	movs	r3, #0
}
 800b21a:	4618      	mov	r0, r3
 800b21c:	3760      	adds	r7, #96	; 0x60
 800b21e:	46bd      	mov	sp, r7
 800b220:	bd80      	pop	{r7, pc}

0800b222 <MX25LM51245G_ReadCfg2Register>:
  * @param  Rate Transfer rate STR or DTR
  * @param  Value configuration register 2 value pointer
  * @retval error status
  */
int32_t MX25LM51245G_ReadCfg2Register(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate, uint32_t ReadAddr, uint8_t *Value)
{
 800b222:	b580      	push	{r7, lr}
 800b224:	b098      	sub	sp, #96	; 0x60
 800b226:	af00      	add	r7, sp, #0
 800b228:	60f8      	str	r0, [r7, #12]
 800b22a:	607b      	str	r3, [r7, #4]
 800b22c:	460b      	mov	r3, r1
 800b22e:	72fb      	strb	r3, [r7, #11]
 800b230:	4613      	mov	r3, r2
 800b232:	72bb      	strb	r3, [r7, #10]
  OSPI_RegularCmdTypeDef s_command = {0};
 800b234:	f107 0310 	add.w	r3, r7, #16
 800b238:	2250      	movs	r2, #80	; 0x50
 800b23a:	2100      	movs	r1, #0
 800b23c:	4618      	mov	r0, r3
 800b23e:	f01d fbb7 	bl	80289b0 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 800b242:	7afb      	ldrb	r3, [r7, #11]
 800b244:	2b00      	cmp	r3, #0
 800b246:	d105      	bne.n	800b254 <MX25LM51245G_ReadCfg2Register+0x32>
 800b248:	7abb      	ldrb	r3, [r7, #10]
 800b24a:	2b01      	cmp	r3, #1
 800b24c:	d102      	bne.n	800b254 <MX25LM51245G_ReadCfg2Register+0x32>
  {
    return MX25LM51245G_ERROR;
 800b24e:	f04f 33ff 	mov.w	r3, #4294967295
 800b252:	e07c      	b.n	800b34e <MX25LM51245G_ReadCfg2Register+0x12c>
  }

  /* Initialize the reading of status register */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800b254:	2300      	movs	r3, #0
 800b256:	613b      	str	r3, [r7, #16]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 800b258:	2300      	movs	r3, #0
 800b25a:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800b25c:	7afb      	ldrb	r3, [r7, #11]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d101      	bne.n	800b266 <MX25LM51245G_ReadCfg2Register+0x44>
 800b262:	2301      	movs	r3, #1
 800b264:	e000      	b.n	800b268 <MX25LM51245G_ReadCfg2Register+0x46>
 800b266:	2304      	movs	r3, #4
 800b268:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800b26a:	7abb      	ldrb	r3, [r7, #10]
 800b26c:	2b01      	cmp	r3, #1
 800b26e:	d101      	bne.n	800b274 <MX25LM51245G_ReadCfg2Register+0x52>
 800b270:	2308      	movs	r3, #8
 800b272:	e000      	b.n	800b276 <MX25LM51245G_ReadCfg2Register+0x54>
 800b274:	2300      	movs	r3, #0
 800b276:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800b278:	7afb      	ldrb	r3, [r7, #11]
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d101      	bne.n	800b282 <MX25LM51245G_ReadCfg2Register+0x60>
 800b27e:	2300      	movs	r3, #0
 800b280:	e000      	b.n	800b284 <MX25LM51245G_ReadCfg2Register+0x62>
 800b282:	2310      	movs	r3, #16
 800b284:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_CFG_REG2_CMD : MX25LM51245G_OCTA_READ_CFG_REG2_CMD;
 800b286:	7afb      	ldrb	r3, [r7, #11]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d101      	bne.n	800b290 <MX25LM51245G_ReadCfg2Register+0x6e>
 800b28c:	2371      	movs	r3, #113	; 0x71
 800b28e:	e001      	b.n	800b294 <MX25LM51245G_ReadCfg2Register+0x72>
 800b290:	f247 138e 	movw	r3, #29070	; 0x718e
 800b294:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 800b296:	7afb      	ldrb	r3, [r7, #11]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d102      	bne.n	800b2a2 <MX25LM51245G_ReadCfg2Register+0x80>
 800b29c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b2a0:	e001      	b.n	800b2a6 <MX25LM51245G_ReadCfg2Register+0x84>
 800b2a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b2a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 800b2a8:	7abb      	ldrb	r3, [r7, #10]
 800b2aa:	2b01      	cmp	r3, #1
 800b2ac:	d102      	bne.n	800b2b4 <MX25LM51245G_ReadCfg2Register+0x92>
 800b2ae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b2b2:	e000      	b.n	800b2b6 <MX25LM51245G_ReadCfg2Register+0x94>
 800b2b4:	2300      	movs	r3, #0
 800b2b6:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 800b2b8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800b2bc:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.Address            = ReadAddr;
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 800b2c6:	7afb      	ldrb	r3, [r7, #11]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d102      	bne.n	800b2d2 <MX25LM51245G_ReadCfg2Register+0xb0>
 800b2cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b2d0:	e001      	b.n	800b2d6 <MX25LM51245G_ReadCfg2Register+0xb4>
 800b2d2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800b2d6:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 800b2d8:	7abb      	ldrb	r3, [r7, #10]
 800b2da:	2b01      	cmp	r3, #1
 800b2dc:	d102      	bne.n	800b2e4 <MX25LM51245G_ReadCfg2Register+0xc2>
 800b2de:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b2e2:	e000      	b.n	800b2e6 <MX25LM51245G_ReadCfg2Register+0xc4>
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 800b2e8:	7afb      	ldrb	r3, [r7, #11]
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d101      	bne.n	800b2f2 <MX25LM51245G_ReadCfg2Register+0xd0>
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	e000      	b.n	800b2f4 <MX25LM51245G_ReadCfg2Register+0xd2>
 800b2f2:	2305      	movs	r3, #5
 800b2f4:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 800b2f6:	7abb      	ldrb	r3, [r7, #10]
 800b2f8:	2b01      	cmp	r3, #1
 800b2fa:	d101      	bne.n	800b300 <MX25LM51245G_ReadCfg2Register+0xde>
 800b2fc:	2302      	movs	r3, #2
 800b2fe:	e000      	b.n	800b302 <MX25LM51245G_ReadCfg2Register+0xe0>
 800b300:	2301      	movs	r3, #1
 800b302:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DQSMode            = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 800b304:	7abb      	ldrb	r3, [r7, #10]
 800b306:	2b01      	cmp	r3, #1
 800b308:	d102      	bne.n	800b310 <MX25LM51245G_ReadCfg2Register+0xee>
 800b30a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800b30e:	e000      	b.n	800b312 <MX25LM51245G_ReadCfg2Register+0xf0>
 800b310:	2300      	movs	r3, #0
 800b312:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800b314:	2300      	movs	r3, #0
 800b316:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800b318:	f107 0310 	add.w	r3, r7, #16
 800b31c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b320:	4619      	mov	r1, r3
 800b322:	68f8      	ldr	r0, [r7, #12]
 800b324:	f006 fdec 	bl	8011f00 <HAL_OSPI_Command>
 800b328:	4603      	mov	r3, r0
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d002      	beq.n	800b334 <MX25LM51245G_ReadCfg2Register+0x112>
  {
    return MX25LM51245G_ERROR;
 800b32e:	f04f 33ff 	mov.w	r3, #4294967295
 800b332:	e00c      	b.n	800b34e <MX25LM51245G_ReadCfg2Register+0x12c>
  }

  /* Reception of the data */
  if (HAL_OSPI_Receive(Ctx, Value, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800b334:	f241 3288 	movw	r2, #5000	; 0x1388
 800b338:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b33a:	68f8      	ldr	r0, [r7, #12]
 800b33c:	f006 fee0 	bl	8012100 <HAL_OSPI_Receive>
 800b340:	4603      	mov	r3, r0
 800b342:	2b00      	cmp	r3, #0
 800b344:	d002      	beq.n	800b34c <MX25LM51245G_ReadCfg2Register+0x12a>
  {
    return MX25LM51245G_ERROR;
 800b346:	f04f 33ff 	mov.w	r3, #4294967295
 800b34a:	e000      	b.n	800b34e <MX25LM51245G_ReadCfg2Register+0x12c>
  }

  return MX25LM51245G_OK;
 800b34c:	2300      	movs	r3, #0
}
 800b34e:	4618      	mov	r0, r3
 800b350:	3760      	adds	r7, #96	; 0x60
 800b352:	46bd      	mov	sp, r7
 800b354:	bd80      	pop	{r7, pc}

0800b356 <MX25LM51245G_ResetEnable>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_ResetEnable(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 800b356:	b580      	push	{r7, lr}
 800b358:	b096      	sub	sp, #88	; 0x58
 800b35a:	af00      	add	r7, sp, #0
 800b35c:	6078      	str	r0, [r7, #4]
 800b35e:	460b      	mov	r3, r1
 800b360:	70fb      	strb	r3, [r7, #3]
 800b362:	4613      	mov	r3, r2
 800b364:	70bb      	strb	r3, [r7, #2]
  OSPI_RegularCmdTypeDef s_command = {0};
 800b366:	f107 0308 	add.w	r3, r7, #8
 800b36a:	2250      	movs	r2, #80	; 0x50
 800b36c:	2100      	movs	r1, #0
 800b36e:	4618      	mov	r0, r3
 800b370:	f01d fb1e 	bl	80289b0 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 800b374:	78fb      	ldrb	r3, [r7, #3]
 800b376:	2b00      	cmp	r3, #0
 800b378:	d105      	bne.n	800b386 <MX25LM51245G_ResetEnable+0x30>
 800b37a:	78bb      	ldrb	r3, [r7, #2]
 800b37c:	2b01      	cmp	r3, #1
 800b37e:	d102      	bne.n	800b386 <MX25LM51245G_ResetEnable+0x30>
  {
    return MX25LM51245G_ERROR;
 800b380:	f04f 33ff 	mov.w	r3, #4294967295
 800b384:	e03b      	b.n	800b3fe <MX25LM51245G_ResetEnable+0xa8>
  }

  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800b386:	2300      	movs	r3, #0
 800b388:	60bb      	str	r3, [r7, #8]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 800b38a:	2300      	movs	r3, #0
 800b38c:	60fb      	str	r3, [r7, #12]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800b38e:	78fb      	ldrb	r3, [r7, #3]
 800b390:	2b00      	cmp	r3, #0
 800b392:	d101      	bne.n	800b398 <MX25LM51245G_ResetEnable+0x42>
 800b394:	2301      	movs	r3, #1
 800b396:	e000      	b.n	800b39a <MX25LM51245G_ResetEnable+0x44>
 800b398:	2304      	movs	r3, #4
 800b39a:	617b      	str	r3, [r7, #20]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800b39c:	78bb      	ldrb	r3, [r7, #2]
 800b39e:	2b01      	cmp	r3, #1
 800b3a0:	d101      	bne.n	800b3a6 <MX25LM51245G_ResetEnable+0x50>
 800b3a2:	2308      	movs	r3, #8
 800b3a4:	e000      	b.n	800b3a8 <MX25LM51245G_ResetEnable+0x52>
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	61fb      	str	r3, [r7, #28]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800b3aa:	78fb      	ldrb	r3, [r7, #3]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d101      	bne.n	800b3b4 <MX25LM51245G_ResetEnable+0x5e>
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	e000      	b.n	800b3b6 <MX25LM51245G_ResetEnable+0x60>
 800b3b4:	2310      	movs	r3, #16
 800b3b6:	61bb      	str	r3, [r7, #24]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_RESET_ENABLE_CMD : MX25LM51245G_OCTA_RESET_ENABLE_CMD;
 800b3b8:	78fb      	ldrb	r3, [r7, #3]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d101      	bne.n	800b3c2 <MX25LM51245G_ResetEnable+0x6c>
 800b3be:	2366      	movs	r3, #102	; 0x66
 800b3c0:	e001      	b.n	800b3c6 <MX25LM51245G_ResetEnable+0x70>
 800b3c2:	f246 6399 	movw	r3, #26265	; 0x6699
 800b3c6:	613b      	str	r3, [r7, #16]
  s_command.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800b3cc:	2300      	movs	r3, #0
 800b3ce:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DataMode           = HAL_OSPI_DATA_NONE;
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DummyCycles        = 0U;
 800b3d4:	2300      	movs	r3, #0
 800b3d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 800b3d8:	2300      	movs	r3, #0
 800b3da:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800b3dc:	2300      	movs	r3, #0
 800b3de:	657b      	str	r3, [r7, #84]	; 0x54

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800b3e0:	f107 0308 	add.w	r3, r7, #8
 800b3e4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b3e8:	4619      	mov	r1, r3
 800b3ea:	6878      	ldr	r0, [r7, #4]
 800b3ec:	f006 fd88 	bl	8011f00 <HAL_OSPI_Command>
 800b3f0:	4603      	mov	r3, r0
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d002      	beq.n	800b3fc <MX25LM51245G_ResetEnable+0xa6>
  {
    return MX25LM51245G_ERROR;
 800b3f6:	f04f 33ff 	mov.w	r3, #4294967295
 800b3fa:	e000      	b.n	800b3fe <MX25LM51245G_ResetEnable+0xa8>
  }

  return MX25LM51245G_OK;
 800b3fc:	2300      	movs	r3, #0
}
 800b3fe:	4618      	mov	r0, r3
 800b400:	3758      	adds	r7, #88	; 0x58
 800b402:	46bd      	mov	sp, r7
 800b404:	bd80      	pop	{r7, pc}

0800b406 <MX25LM51245G_ResetMemory>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_ResetMemory(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 800b406:	b580      	push	{r7, lr}
 800b408:	b096      	sub	sp, #88	; 0x58
 800b40a:	af00      	add	r7, sp, #0
 800b40c:	6078      	str	r0, [r7, #4]
 800b40e:	460b      	mov	r3, r1
 800b410:	70fb      	strb	r3, [r7, #3]
 800b412:	4613      	mov	r3, r2
 800b414:	70bb      	strb	r3, [r7, #2]
  OSPI_RegularCmdTypeDef s_command = {0};
 800b416:	f107 0308 	add.w	r3, r7, #8
 800b41a:	2250      	movs	r2, #80	; 0x50
 800b41c:	2100      	movs	r1, #0
 800b41e:	4618      	mov	r0, r3
 800b420:	f01d fac6 	bl	80289b0 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 800b424:	78fb      	ldrb	r3, [r7, #3]
 800b426:	2b00      	cmp	r3, #0
 800b428:	d105      	bne.n	800b436 <MX25LM51245G_ResetMemory+0x30>
 800b42a:	78bb      	ldrb	r3, [r7, #2]
 800b42c:	2b01      	cmp	r3, #1
 800b42e:	d102      	bne.n	800b436 <MX25LM51245G_ResetMemory+0x30>
  {
    return MX25LM51245G_ERROR;
 800b430:	f04f 33ff 	mov.w	r3, #4294967295
 800b434:	e03b      	b.n	800b4ae <MX25LM51245G_ResetMemory+0xa8>
  }

  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800b436:	2300      	movs	r3, #0
 800b438:	60bb      	str	r3, [r7, #8]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 800b43a:	2300      	movs	r3, #0
 800b43c:	60fb      	str	r3, [r7, #12]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800b43e:	78fb      	ldrb	r3, [r7, #3]
 800b440:	2b00      	cmp	r3, #0
 800b442:	d101      	bne.n	800b448 <MX25LM51245G_ResetMemory+0x42>
 800b444:	2301      	movs	r3, #1
 800b446:	e000      	b.n	800b44a <MX25LM51245G_ResetMemory+0x44>
 800b448:	2304      	movs	r3, #4
 800b44a:	617b      	str	r3, [r7, #20]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800b44c:	78bb      	ldrb	r3, [r7, #2]
 800b44e:	2b01      	cmp	r3, #1
 800b450:	d101      	bne.n	800b456 <MX25LM51245G_ResetMemory+0x50>
 800b452:	2308      	movs	r3, #8
 800b454:	e000      	b.n	800b458 <MX25LM51245G_ResetMemory+0x52>
 800b456:	2300      	movs	r3, #0
 800b458:	61fb      	str	r3, [r7, #28]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800b45a:	78fb      	ldrb	r3, [r7, #3]
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d101      	bne.n	800b464 <MX25LM51245G_ResetMemory+0x5e>
 800b460:	2300      	movs	r3, #0
 800b462:	e000      	b.n	800b466 <MX25LM51245G_ResetMemory+0x60>
 800b464:	2310      	movs	r3, #16
 800b466:	61bb      	str	r3, [r7, #24]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_RESET_MEMORY_CMD : MX25LM51245G_OCTA_RESET_MEMORY_CMD;
 800b468:	78fb      	ldrb	r3, [r7, #3]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d101      	bne.n	800b472 <MX25LM51245G_ResetMemory+0x6c>
 800b46e:	2399      	movs	r3, #153	; 0x99
 800b470:	e001      	b.n	800b476 <MX25LM51245G_ResetMemory+0x70>
 800b472:	f649 1366 	movw	r3, #39270	; 0x9966
 800b476:	613b      	str	r3, [r7, #16]
  s_command.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 800b478:	2300      	movs	r3, #0
 800b47a:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800b47c:	2300      	movs	r3, #0
 800b47e:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DataMode           = HAL_OSPI_DATA_NONE;
 800b480:	2300      	movs	r3, #0
 800b482:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DummyCycles        = 0U;
 800b484:	2300      	movs	r3, #0
 800b486:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 800b488:	2300      	movs	r3, #0
 800b48a:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800b48c:	2300      	movs	r3, #0
 800b48e:	657b      	str	r3, [r7, #84]	; 0x54

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800b490:	f107 0308 	add.w	r3, r7, #8
 800b494:	f241 3288 	movw	r2, #5000	; 0x1388
 800b498:	4619      	mov	r1, r3
 800b49a:	6878      	ldr	r0, [r7, #4]
 800b49c:	f006 fd30 	bl	8011f00 <HAL_OSPI_Command>
 800b4a0:	4603      	mov	r3, r0
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d002      	beq.n	800b4ac <MX25LM51245G_ResetMemory+0xa6>
  {
    return MX25LM51245G_ERROR;
 800b4a6:	f04f 33ff 	mov.w	r3, #4294967295
 800b4aa:	e000      	b.n	800b4ae <MX25LM51245G_ResetMemory+0xa8>
  }

  return MX25LM51245G_OK;
 800b4ac:	2300      	movs	r3, #0
}
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	3758      	adds	r7, #88	; 0x58
 800b4b2:	46bd      	mov	sp, r7
 800b4b4:	bd80      	pop	{r7, pc}
	...

0800b4b8 <BSP_I2C4_Init>:
/**
  * @brief  Initializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_Init(void)
{
 800b4b8:	b580      	push	{r7, lr}
 800b4ba:	b082      	sub	sp, #8
 800b4bc:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800b4be:	2300      	movs	r3, #0
 800b4c0:	607b      	str	r3, [r7, #4]

  hbus_i2c4.Instance = BUS_I2C4;
 800b4c2:	4b16      	ldr	r3, [pc, #88]	; (800b51c <BSP_I2C4_Init+0x64>)
 800b4c4:	4a16      	ldr	r2, [pc, #88]	; (800b520 <BSP_I2C4_Init+0x68>)
 800b4c6:	601a      	str	r2, [r3, #0]

  if (I2c4InitCounter == 0U)
 800b4c8:	4b16      	ldr	r3, [pc, #88]	; (800b524 <BSP_I2C4_Init+0x6c>)
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d11f      	bne.n	800b510 <BSP_I2C4_Init+0x58>
  {
    I2c4InitCounter++;
 800b4d0:	4b14      	ldr	r3, [pc, #80]	; (800b524 <BSP_I2C4_Init+0x6c>)
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	3301      	adds	r3, #1
 800b4d6:	4a13      	ldr	r2, [pc, #76]	; (800b524 <BSP_I2C4_Init+0x6c>)
 800b4d8:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 800b4da:	4810      	ldr	r0, [pc, #64]	; (800b51c <BSP_I2C4_Init+0x64>)
 800b4dc:	f003 f87a 	bl	800e5d4 <HAL_I2C_GetState>
 800b4e0:	4603      	mov	r3, r0
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d114      	bne.n	800b510 <BSP_I2C4_Init+0x58>
    {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C4 Msp */
      I2C4_MspInit(&hbus_i2c4);
 800b4e6:	480d      	ldr	r0, [pc, #52]	; (800b51c <BSP_I2C4_Init+0x64>)
 800b4e8:	f000 fb60 	bl	800bbac <I2C4_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 800b4ec:	f008 fa44 	bl	8013978 <HAL_RCC_GetPCLK2Freq>
 800b4f0:	4603      	mov	r3, r0
 800b4f2:	490d      	ldr	r1, [pc, #52]	; (800b528 <BSP_I2C4_Init+0x70>)
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	f000 f8e3 	bl	800b6c0 <I2C_GetTiming>
 800b4fa:	4603      	mov	r3, r0
 800b4fc:	4619      	mov	r1, r3
 800b4fe:	4807      	ldr	r0, [pc, #28]	; (800b51c <BSP_I2C4_Init+0x64>)
 800b500:	f000 f838 	bl	800b574 <MX_I2C4_Init>
 800b504:	4603      	mov	r3, r0
 800b506:	2b00      	cmp	r3, #0
 800b508:	d002      	beq.n	800b510 <BSP_I2C4_Init+0x58>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 800b50a:	f06f 0307 	mvn.w	r3, #7
 800b50e:	607b      	str	r3, [r7, #4]
      }
#endif
    }
  }

  return ret;
 800b510:	687b      	ldr	r3, [r7, #4]
}
 800b512:	4618      	mov	r0, r3
 800b514:	3708      	adds	r7, #8
 800b516:	46bd      	mov	sp, r7
 800b518:	bd80      	pop	{r7, pc}
 800b51a:	bf00      	nop
 800b51c:	2400bcf0 	.word	0x2400bcf0
 800b520:	58001c00 	.word	0x58001c00
 800b524:	2400b2e8 	.word	0x2400b2e8
 800b528:	00061a80 	.word	0x00061a80

0800b52c <BSP_I2C4_DeInit>:
/**
  * @brief  DeInitializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_DeInit(void)
{
 800b52c:	b580      	push	{r7, lr}
 800b52e:	b082      	sub	sp, #8
 800b530:	af00      	add	r7, sp, #0
  int32_t ret  = BSP_ERROR_NONE;
 800b532:	2300      	movs	r3, #0
 800b534:	607b      	str	r3, [r7, #4]

  I2c4InitCounter--;
 800b536:	4b0d      	ldr	r3, [pc, #52]	; (800b56c <BSP_I2C4_DeInit+0x40>)
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	3b01      	subs	r3, #1
 800b53c:	4a0b      	ldr	r2, [pc, #44]	; (800b56c <BSP_I2C4_DeInit+0x40>)
 800b53e:	6013      	str	r3, [r2, #0]

  if (I2c4InitCounter == 0U)
 800b540:	4b0a      	ldr	r3, [pc, #40]	; (800b56c <BSP_I2C4_DeInit+0x40>)
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	2b00      	cmp	r3, #0
 800b546:	d10b      	bne.n	800b560 <BSP_I2C4_DeInit+0x34>
  {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    I2C4_MspDeInit(&hbus_i2c4);
 800b548:	4809      	ldr	r0, [pc, #36]	; (800b570 <BSP_I2C4_DeInit+0x44>)
 800b54a:	f000 fb9b 	bl	800bc84 <I2C4_MspDeInit>
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */

    /* Init the I2C */
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 800b54e:	4808      	ldr	r0, [pc, #32]	; (800b570 <BSP_I2C4_DeInit+0x44>)
 800b550:	f002 fde2 	bl	800e118 <HAL_I2C_DeInit>
 800b554:	4603      	mov	r3, r0
 800b556:	2b00      	cmp	r3, #0
 800b558:	d002      	beq.n	800b560 <BSP_I2C4_DeInit+0x34>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 800b55a:	f06f 0307 	mvn.w	r3, #7
 800b55e:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
 800b560:	687b      	ldr	r3, [r7, #4]
}
 800b562:	4618      	mov	r0, r3
 800b564:	3708      	adds	r7, #8
 800b566:	46bd      	mov	sp, r7
 800b568:	bd80      	pop	{r7, pc}
 800b56a:	bf00      	nop
 800b56c:	2400b2e8 	.word	0x2400b2e8
 800b570:	2400bcf0 	.word	0x2400bcf0

0800b574 <MX_I2C4_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C4_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
 800b574:	b580      	push	{r7, lr}
 800b576:	b084      	sub	sp, #16
 800b578:	af00      	add	r7, sp, #0
 800b57a:	6078      	str	r0, [r7, #4]
 800b57c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b57e:	2300      	movs	r3, #0
 800b580:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	683a      	ldr	r2, [r7, #0]
 800b586:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	2200      	movs	r2, #0
 800b58c:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	2201      	movs	r2, #1
 800b592:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	2200      	movs	r2, #0
 800b598:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	2200      	movs	r2, #0
 800b59e:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	2200      	movs	r2, #0
 800b5a4:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	2200      	movs	r2, #0
 800b5aa:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	2200      	movs	r2, #0
 800b5b0:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
 800b5b2:	6878      	ldr	r0, [r7, #4]
 800b5b4:	f002 fd20 	bl	800dff8 <HAL_I2C_Init>
 800b5b8:	4603      	mov	r3, r0
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d002      	beq.n	800b5c4 <MX_I2C4_Init+0x50>
  {
    status = HAL_ERROR;
 800b5be:	2301      	movs	r3, #1
 800b5c0:	73fb      	strb	r3, [r7, #15]
 800b5c2:	e014      	b.n	800b5ee <MX_I2C4_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = I2C_ANALOGFILTER_ENABLE;
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 800b5c8:	68b9      	ldr	r1, [r7, #8]
 800b5ca:	6878      	ldr	r0, [r7, #4]
 800b5cc:	f003 fad4 	bl	800eb78 <HAL_I2CEx_ConfigAnalogFilter>
 800b5d0:	4603      	mov	r3, r0
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d002      	beq.n	800b5dc <MX_I2C4_Init+0x68>
    {
      status = HAL_ERROR;
 800b5d6:	2301      	movs	r3, #1
 800b5d8:	73fb      	strb	r3, [r7, #15]
 800b5da:	e008      	b.n	800b5ee <MX_I2C4_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 800b5dc:	2100      	movs	r1, #0
 800b5de:	6878      	ldr	r0, [r7, #4]
 800b5e0:	f003 fb15 	bl	800ec0e <HAL_I2CEx_ConfigDigitalFilter>
 800b5e4:	4603      	mov	r3, r0
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d001      	beq.n	800b5ee <MX_I2C4_Init+0x7a>
      {
        status = HAL_ERROR;
 800b5ea:	2301      	movs	r3, #1
 800b5ec:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
 800b5ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5f0:	4618      	mov	r0, r3
 800b5f2:	3710      	adds	r7, #16
 800b5f4:	46bd      	mov	sp, r7
 800b5f6:	bd80      	pop	{r7, pc}

0800b5f8 <BSP_I2C4_WriteReg>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800b5f8:	b580      	push	{r7, lr}
 800b5fa:	b088      	sub	sp, #32
 800b5fc:	af02      	add	r7, sp, #8
 800b5fe:	60ba      	str	r2, [r7, #8]
 800b600:	461a      	mov	r2, r3
 800b602:	4603      	mov	r3, r0
 800b604:	81fb      	strh	r3, [r7, #14]
 800b606:	460b      	mov	r3, r1
 800b608:	81bb      	strh	r3, [r7, #12]
 800b60a:	4613      	mov	r3, r2
 800b60c:	80fb      	strh	r3, [r7, #6]
  int32_t ret;

  if(I2C4_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 800b60e:	89b9      	ldrh	r1, [r7, #12]
 800b610:	89f8      	ldrh	r0, [r7, #14]
 800b612:	88fb      	ldrh	r3, [r7, #6]
 800b614:	9300      	str	r3, [sp, #0]
 800b616:	68bb      	ldr	r3, [r7, #8]
 800b618:	2201      	movs	r2, #1
 800b61a:	f000 fb57 	bl	800bccc <I2C4_WriteReg>
 800b61e:	4603      	mov	r3, r0
 800b620:	2b00      	cmp	r3, #0
 800b622:	d102      	bne.n	800b62a <BSP_I2C4_WriteReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 800b624:	2300      	movs	r3, #0
 800b626:	617b      	str	r3, [r7, #20]
 800b628:	e00c      	b.n	800b644 <BSP_I2C4_WriteReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800b62a:	4809      	ldr	r0, [pc, #36]	; (800b650 <BSP_I2C4_WriteReg+0x58>)
 800b62c:	f002 ffe0 	bl	800e5f0 <HAL_I2C_GetError>
 800b630:	4603      	mov	r3, r0
 800b632:	2b04      	cmp	r3, #4
 800b634:	d103      	bne.n	800b63e <BSP_I2C4_WriteReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800b636:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800b63a:	617b      	str	r3, [r7, #20]
 800b63c:	e002      	b.n	800b644 <BSP_I2C4_WriteReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800b63e:	f06f 0303 	mvn.w	r3, #3
 800b642:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800b644:	697b      	ldr	r3, [r7, #20]
}
 800b646:	4618      	mov	r0, r3
 800b648:	3718      	adds	r7, #24
 800b64a:	46bd      	mov	sp, r7
 800b64c:	bd80      	pop	{r7, pc}
 800b64e:	bf00      	nop
 800b650:	2400bcf0 	.word	0x2400bcf0

0800b654 <BSP_I2C4_ReadReg>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800b654:	b580      	push	{r7, lr}
 800b656:	b088      	sub	sp, #32
 800b658:	af02      	add	r7, sp, #8
 800b65a:	60ba      	str	r2, [r7, #8]
 800b65c:	461a      	mov	r2, r3
 800b65e:	4603      	mov	r3, r0
 800b660:	81fb      	strh	r3, [r7, #14]
 800b662:	460b      	mov	r3, r1
 800b664:	81bb      	strh	r3, [r7, #12]
 800b666:	4613      	mov	r3, r2
 800b668:	80fb      	strh	r3, [r7, #6]
  int32_t ret;

  if(I2C4_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 800b66a:	89b9      	ldrh	r1, [r7, #12]
 800b66c:	89f8      	ldrh	r0, [r7, #14]
 800b66e:	88fb      	ldrh	r3, [r7, #6]
 800b670:	9300      	str	r3, [sp, #0]
 800b672:	68bb      	ldr	r3, [r7, #8]
 800b674:	2201      	movs	r2, #1
 800b676:	f000 fb4f 	bl	800bd18 <I2C4_ReadReg>
 800b67a:	4603      	mov	r3, r0
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d102      	bne.n	800b686 <BSP_I2C4_ReadReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 800b680:	2300      	movs	r3, #0
 800b682:	617b      	str	r3, [r7, #20]
 800b684:	e00c      	b.n	800b6a0 <BSP_I2C4_ReadReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800b686:	4809      	ldr	r0, [pc, #36]	; (800b6ac <BSP_I2C4_ReadReg+0x58>)
 800b688:	f002 ffb2 	bl	800e5f0 <HAL_I2C_GetError>
 800b68c:	4603      	mov	r3, r0
 800b68e:	2b04      	cmp	r3, #4
 800b690:	d103      	bne.n	800b69a <BSP_I2C4_ReadReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800b692:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800b696:	617b      	str	r3, [r7, #20]
 800b698:	e002      	b.n	800b6a0 <BSP_I2C4_ReadReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800b69a:	f06f 0303 	mvn.w	r3, #3
 800b69e:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800b6a0:	697b      	ldr	r3, [r7, #20]
}
 800b6a2:	4618      	mov	r0, r3
 800b6a4:	3718      	adds	r7, #24
 800b6a6:	46bd      	mov	sp, r7
 800b6a8:	bd80      	pop	{r7, pc}
 800b6aa:	bf00      	nop
 800b6ac:	2400bcf0 	.word	0x2400bcf0

0800b6b0 <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
 800b6b0:	b580      	push	{r7, lr}
 800b6b2:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
 800b6b4:	f001 fca4 	bl	800d000 <HAL_GetTick>
 800b6b8:	4603      	mov	r3, r0
}
 800b6ba:	4618      	mov	r0, r3
 800b6bc:	bd80      	pop	{r7, pc}
	...

0800b6c0 <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
 800b6c0:	b580      	push	{r7, lr}
 800b6c2:	b086      	sub	sp, #24
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	6078      	str	r0, [r7, #4]
 800b6c8:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d06b      	beq.n	800b7ac <I2C_GetTiming+0xec>
 800b6d4:	683b      	ldr	r3, [r7, #0]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d068      	beq.n	800b7ac <I2C_GetTiming+0xec>
  {
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 800b6da:	2300      	movs	r3, #0
 800b6dc:	613b      	str	r3, [r7, #16]
 800b6de:	e060      	b.n	800b7a2 <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 800b6e0:	4a35      	ldr	r2, [pc, #212]	; (800b7b8 <I2C_GetTiming+0xf8>)
 800b6e2:	693b      	ldr	r3, [r7, #16]
 800b6e4:	212c      	movs	r1, #44	; 0x2c
 800b6e6:	fb01 f303 	mul.w	r3, r1, r3
 800b6ea:	4413      	add	r3, r2
 800b6ec:	3304      	adds	r3, #4
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	683a      	ldr	r2, [r7, #0]
 800b6f2:	429a      	cmp	r2, r3
 800b6f4:	d352      	bcc.n	800b79c <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 800b6f6:	4a30      	ldr	r2, [pc, #192]	; (800b7b8 <I2C_GetTiming+0xf8>)
 800b6f8:	693b      	ldr	r3, [r7, #16]
 800b6fa:	212c      	movs	r1, #44	; 0x2c
 800b6fc:	fb01 f303 	mul.w	r3, r1, r3
 800b700:	4413      	add	r3, r2
 800b702:	3308      	adds	r3, #8
 800b704:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 800b706:	683a      	ldr	r2, [r7, #0]
 800b708:	429a      	cmp	r2, r3
 800b70a:	d847      	bhi.n	800b79c <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 800b70c:	6939      	ldr	r1, [r7, #16]
 800b70e:	6878      	ldr	r0, [r7, #4]
 800b710:	f000 f856 	bl	800b7c0 <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 800b714:	6939      	ldr	r1, [r7, #16]
 800b716:	6878      	ldr	r0, [r7, #4]
 800b718:	f000 f940 	bl	800b99c <I2C_Compute_SCLL_SCLH>
 800b71c:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	2b7f      	cmp	r3, #127	; 0x7f
 800b722:	d842      	bhi.n	800b7aa <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800b724:	4925      	ldr	r1, [pc, #148]	; (800b7bc <I2C_GetTiming+0xfc>)
 800b726:	68fa      	ldr	r2, [r7, #12]
 800b728:	4613      	mov	r3, r2
 800b72a:	009b      	lsls	r3, r3, #2
 800b72c:	4413      	add	r3, r2
 800b72e:	009b      	lsls	r3, r3, #2
 800b730:	440b      	add	r3, r1
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 800b736:	4821      	ldr	r0, [pc, #132]	; (800b7bc <I2C_GetTiming+0xfc>)
 800b738:	68fa      	ldr	r2, [r7, #12]
 800b73a:	4613      	mov	r3, r2
 800b73c:	009b      	lsls	r3, r3, #2
 800b73e:	4413      	add	r3, r2
 800b740:	009b      	lsls	r3, r3, #2
 800b742:	4403      	add	r3, r0
 800b744:	3304      	adds	r3, #4
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	051b      	lsls	r3, r3, #20
 800b74a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800b74e:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 800b750:	481a      	ldr	r0, [pc, #104]	; (800b7bc <I2C_GetTiming+0xfc>)
 800b752:	68fa      	ldr	r2, [r7, #12]
 800b754:	4613      	mov	r3, r2
 800b756:	009b      	lsls	r3, r3, #2
 800b758:	4413      	add	r3, r2
 800b75a:	009b      	lsls	r3, r3, #2
 800b75c:	4403      	add	r3, r0
 800b75e:	3308      	adds	r3, #8
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	041b      	lsls	r3, r3, #16
 800b764:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 800b768:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 800b76a:	4814      	ldr	r0, [pc, #80]	; (800b7bc <I2C_GetTiming+0xfc>)
 800b76c:	68fa      	ldr	r2, [r7, #12]
 800b76e:	4613      	mov	r3, r2
 800b770:	009b      	lsls	r3, r3, #2
 800b772:	4413      	add	r3, r2
 800b774:	009b      	lsls	r3, r3, #2
 800b776:	4403      	add	r3, r0
 800b778:	330c      	adds	r3, #12
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	021b      	lsls	r3, r3, #8
 800b77e:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 800b780:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 800b782:	480e      	ldr	r0, [pc, #56]	; (800b7bc <I2C_GetTiming+0xfc>)
 800b784:	68fa      	ldr	r2, [r7, #12]
 800b786:	4613      	mov	r3, r2
 800b788:	009b      	lsls	r3, r3, #2
 800b78a:	4413      	add	r3, r2
 800b78c:	009b      	lsls	r3, r3, #2
 800b78e:	4403      	add	r3, r0
 800b790:	3310      	adds	r3, #16
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800b796:	430b      	orrs	r3, r1
 800b798:	617b      	str	r3, [r7, #20]
        }
        break;
 800b79a:	e006      	b.n	800b7aa <I2C_GetTiming+0xea>
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 800b79c:	693b      	ldr	r3, [r7, #16]
 800b79e:	3301      	adds	r3, #1
 800b7a0:	613b      	str	r3, [r7, #16]
 800b7a2:	693b      	ldr	r3, [r7, #16]
 800b7a4:	2b02      	cmp	r3, #2
 800b7a6:	d99b      	bls.n	800b6e0 <I2C_GetTiming+0x20>
 800b7a8:	e000      	b.n	800b7ac <I2C_GetTiming+0xec>
        break;
 800b7aa:	bf00      	nop
      }
    }
  }

  return ret;
 800b7ac:	697b      	ldr	r3, [r7, #20]
}
 800b7ae:	4618      	mov	r0, r3
 800b7b0:	3718      	adds	r7, #24
 800b7b2:	46bd      	mov	sp, r7
 800b7b4:	bd80      	pop	{r7, pc}
 800b7b6:	bf00      	nop
 800b7b8:	0802cc04 	.word	0x0802cc04
 800b7bc:	2400b2ec 	.word	0x2400b2ec

0800b7c0 <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 800b7c0:	b480      	push	{r7}
 800b7c2:	b08f      	sub	sp, #60	; 0x3c
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	6078      	str	r0, [r7, #4]
 800b7c8:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 800b7ca:	2310      	movs	r3, #16
 800b7cc:	637b      	str	r3, [r7, #52]	; 0x34
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	085a      	lsrs	r2, r3, #1
 800b7d2:	4b6e      	ldr	r3, [pc, #440]	; (800b98c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
 800b7d4:	4413      	add	r3, r2
 800b7d6:	687a      	ldr	r2, [r7, #4]
 800b7d8:	fbb3 f3f2 	udiv	r3, r3, r2
 800b7dc:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 800b7de:	2332      	movs	r3, #50	; 0x32
 800b7e0:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
 800b7e2:	f44f 7382 	mov.w	r3, #260	; 0x104
 800b7e6:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800b7e8:	4a69      	ldr	r2, [pc, #420]	; (800b990 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800b7ea:	683b      	ldr	r3, [r7, #0]
 800b7ec:	212c      	movs	r1, #44	; 0x2c
 800b7ee:	fb01 f303 	mul.w	r3, r1, r3
 800b7f2:	4413      	add	r3, r2
 800b7f4:	3324      	adds	r3, #36	; 0x24
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	4618      	mov	r0, r3
 800b7fa:	4a65      	ldr	r2, [pc, #404]	; (800b990 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800b7fc:	683b      	ldr	r3, [r7, #0]
 800b7fe:	212c      	movs	r1, #44	; 0x2c
 800b800:	fb01 f303 	mul.w	r3, r1, r3
 800b804:	4413      	add	r3, r2
 800b806:	330c      	adds	r3, #12
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	18c2      	adds	r2, r0, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 800b80c:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800b80e:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 800b810:	495f      	ldr	r1, [pc, #380]	; (800b990 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800b812:	683b      	ldr	r3, [r7, #0]
 800b814:	202c      	movs	r0, #44	; 0x2c
 800b816:	fb00 f303 	mul.w	r3, r0, r3
 800b81a:	440b      	add	r3, r1
 800b81c:	3328      	adds	r3, #40	; 0x28
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	3303      	adds	r3, #3
 800b822:	69f9      	ldr	r1, [r7, #28]
 800b824:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800b828:	1ad3      	subs	r3, r2, r3
 800b82a:	633b      	str	r3, [r7, #48]	; 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800b82c:	4a58      	ldr	r2, [pc, #352]	; (800b990 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800b82e:	683b      	ldr	r3, [r7, #0]
 800b830:	212c      	movs	r1, #44	; 0x2c
 800b832:	fb01 f303 	mul.w	r3, r1, r3
 800b836:	4413      	add	r3, r2
 800b838:	3310      	adds	r3, #16
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	4618      	mov	r0, r3
 800b83e:	4a54      	ldr	r2, [pc, #336]	; (800b990 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800b840:	683b      	ldr	r3, [r7, #0]
 800b842:	212c      	movs	r1, #44	; 0x2c
 800b844:	fb01 f303 	mul.w	r3, r1, r3
 800b848:	4413      	add	r3, r2
 800b84a:	3320      	adds	r3, #32
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	1ac2      	subs	r2, r0, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 800b850:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800b852:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 800b854:	494e      	ldr	r1, [pc, #312]	; (800b990 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800b856:	683b      	ldr	r3, [r7, #0]
 800b858:	202c      	movs	r0, #44	; 0x2c
 800b85a:	fb00 f303 	mul.w	r3, r0, r3
 800b85e:	440b      	add	r3, r1
 800b860:	3328      	adds	r3, #40	; 0x28
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	3304      	adds	r3, #4
 800b866:	69f9      	ldr	r1, [r7, #28]
 800b868:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800b86c:	1ad3      	subs	r3, r2, r3
 800b86e:	62fb      	str	r3, [r7, #44]	; 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 800b870:	4a47      	ldr	r2, [pc, #284]	; (800b990 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800b872:	683b      	ldr	r3, [r7, #0]
 800b874:	212c      	movs	r1, #44	; 0x2c
 800b876:	fb01 f303 	mul.w	r3, r1, r3
 800b87a:	4413      	add	r3, r2
 800b87c:	3320      	adds	r3, #32
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	4618      	mov	r0, r3
 800b882:	4a43      	ldr	r2, [pc, #268]	; (800b990 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800b884:	683b      	ldr	r3, [r7, #0]
 800b886:	212c      	movs	r1, #44	; 0x2c
 800b888:	fb01 f303 	mul.w	r3, r1, r3
 800b88c:	4413      	add	r3, r2
 800b88e:	3314      	adds	r3, #20
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	4403      	add	r3, r0
 800b894:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
 800b896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b898:	2b00      	cmp	r3, #0
 800b89a:	dc01      	bgt.n	800b8a0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
 800b89c:	2300      	movs	r3, #0
 800b89e:	633b      	str	r3, [r7, #48]	; 0x30
  }

  if (tsdadel_max <= 0)
 800b8a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	dc01      	bgt.n	800b8aa <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
 800b8a6:	2300      	movs	r3, #0
 800b8a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	62bb      	str	r3, [r7, #40]	; 0x28
 800b8ae:	e062      	b.n	800b976 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 800b8b0:	2300      	movs	r3, #0
 800b8b2:	627b      	str	r3, [r7, #36]	; 0x24
 800b8b4:	e059      	b.n	800b96a <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 800b8b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8b8:	3301      	adds	r3, #1
 800b8ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b8bc:	3201      	adds	r2, #1
 800b8be:	fb03 f202 	mul.w	r2, r3, r2
 800b8c2:	69fb      	ldr	r3, [r7, #28]
 800b8c4:	fb02 f303 	mul.w	r3, r2, r3
 800b8c8:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
 800b8ca:	693b      	ldr	r3, [r7, #16]
 800b8cc:	68fa      	ldr	r2, [r7, #12]
 800b8ce:	429a      	cmp	r2, r3
 800b8d0:	d348      	bcc.n	800b964 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 800b8d2:	2300      	movs	r3, #0
 800b8d4:	623b      	str	r3, [r7, #32]
 800b8d6:	e042      	b.n	800b95e <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 800b8d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8da:	3301      	adds	r3, #1
 800b8dc:	6a3a      	ldr	r2, [r7, #32]
 800b8de:	fb03 f202 	mul.w	r2, r3, r2
 800b8e2:	69fb      	ldr	r3, [r7, #28]
 800b8e4:	fb02 f303 	mul.w	r3, r2, r3
 800b8e8:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 800b8ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8ec:	68ba      	ldr	r2, [r7, #8]
 800b8ee:	429a      	cmp	r2, r3
 800b8f0:	d332      	bcc.n	800b958 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
 800b8f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8f4:	68ba      	ldr	r2, [r7, #8]
 800b8f6:	429a      	cmp	r2, r3
 800b8f8:	d82e      	bhi.n	800b958 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if(presc != prev_presc)
 800b8fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b8fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8fe:	429a      	cmp	r2, r3
 800b900:	d02a      	beq.n	800b958 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800b902:	4b24      	ldr	r3, [pc, #144]	; (800b994 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800b904:	681a      	ldr	r2, [r3, #0]
 800b906:	4924      	ldr	r1, [pc, #144]	; (800b998 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 800b908:	4613      	mov	r3, r2
 800b90a:	009b      	lsls	r3, r3, #2
 800b90c:	4413      	add	r3, r2
 800b90e:	009b      	lsls	r3, r3, #2
 800b910:	440b      	add	r3, r1
 800b912:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b914:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 800b916:	4b1f      	ldr	r3, [pc, #124]	; (800b994 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800b918:	681a      	ldr	r2, [r3, #0]
 800b91a:	491f      	ldr	r1, [pc, #124]	; (800b998 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 800b91c:	4613      	mov	r3, r2
 800b91e:	009b      	lsls	r3, r3, #2
 800b920:	4413      	add	r3, r2
 800b922:	009b      	lsls	r3, r3, #2
 800b924:	440b      	add	r3, r1
 800b926:	3304      	adds	r3, #4
 800b928:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b92a:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800b92c:	4b19      	ldr	r3, [pc, #100]	; (800b994 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800b92e:	681a      	ldr	r2, [r3, #0]
 800b930:	4919      	ldr	r1, [pc, #100]	; (800b998 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 800b932:	4613      	mov	r3, r2
 800b934:	009b      	lsls	r3, r3, #2
 800b936:	4413      	add	r3, r2
 800b938:	009b      	lsls	r3, r3, #2
 800b93a:	440b      	add	r3, r1
 800b93c:	3308      	adds	r3, #8
 800b93e:	6a3a      	ldr	r2, [r7, #32]
 800b940:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
 800b942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b944:	637b      	str	r3, [r7, #52]	; 0x34
              I2c_valid_timing_nbr ++;
 800b946:	4b13      	ldr	r3, [pc, #76]	; (800b994 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	3301      	adds	r3, #1
 800b94c:	4a11      	ldr	r2, [pc, #68]	; (800b994 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800b94e:	6013      	str	r3, [r2, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800b950:	4b10      	ldr	r3, [pc, #64]	; (800b994 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	2b7f      	cmp	r3, #127	; 0x7f
 800b956:	d812      	bhi.n	800b97e <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 800b958:	6a3b      	ldr	r3, [r7, #32]
 800b95a:	3301      	adds	r3, #1
 800b95c:	623b      	str	r3, [r7, #32]
 800b95e:	6a3b      	ldr	r3, [r7, #32]
 800b960:	2b0f      	cmp	r3, #15
 800b962:	d9b9      	bls.n	800b8d8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 800b964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b966:	3301      	adds	r3, #1
 800b968:	627b      	str	r3, [r7, #36]	; 0x24
 800b96a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b96c:	2b0f      	cmp	r3, #15
 800b96e:	d9a2      	bls.n	800b8b6 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 800b970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b972:	3301      	adds	r3, #1
 800b974:	62bb      	str	r3, [r7, #40]	; 0x28
 800b976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b978:	2b0f      	cmp	r3, #15
 800b97a:	d999      	bls.n	800b8b0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
 800b97c:	e000      	b.n	800b980 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
 800b97e:	bf00      	nop
          }
        }
      }
    }
  }
}
 800b980:	373c      	adds	r7, #60	; 0x3c
 800b982:	46bd      	mov	sp, r7
 800b984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b988:	4770      	bx	lr
 800b98a:	bf00      	nop
 800b98c:	3b9aca00 	.word	0x3b9aca00
 800b990:	0802cc04 	.word	0x0802cc04
 800b994:	2400bcec 	.word	0x2400bcec
 800b998:	2400b2ec 	.word	0x2400b2ec

0800b99c <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
 800b99c:	b480      	push	{r7}
 800b99e:	b093      	sub	sp, #76	; 0x4c
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	6078      	str	r0, [r7, #4]
 800b9a4:	6039      	str	r1, [r7, #0]
 uint32_t ret = 0xFFFFFFFFU;
 800b9a6:	f04f 33ff 	mov.w	r3, #4294967295
 800b9aa:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	085a      	lsrs	r2, r3, #1
 800b9b0:	4b7a      	ldr	r3, [pc, #488]	; (800bb9c <I2C_Compute_SCLL_SCLH+0x200>)
 800b9b2:	4413      	add	r3, r2
 800b9b4:	687a      	ldr	r2, [r7, #4]
 800b9b6:	fbb3 f3f2 	udiv	r3, r3, r2
 800b9ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
 800b9bc:	4a78      	ldr	r2, [pc, #480]	; (800bba0 <I2C_Compute_SCLL_SCLH+0x204>)
 800b9be:	683b      	ldr	r3, [r7, #0]
 800b9c0:	212c      	movs	r1, #44	; 0x2c
 800b9c2:	fb01 f303 	mul.w	r3, r1, r3
 800b9c6:	4413      	add	r3, r2
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	085a      	lsrs	r2, r3, #1
 800b9cc:	4b73      	ldr	r3, [pc, #460]	; (800bb9c <I2C_Compute_SCLL_SCLH+0x200>)
 800b9ce:	4413      	add	r3, r2
 800b9d0:	4973      	ldr	r1, [pc, #460]	; (800bba0 <I2C_Compute_SCLL_SCLH+0x204>)
 800b9d2:	683a      	ldr	r2, [r7, #0]
 800b9d4:	202c      	movs	r0, #44	; 0x2c
 800b9d6:	fb00 f202 	mul.w	r2, r0, r2
 800b9da:	440a      	add	r2, r1
 800b9dc:	6812      	ldr	r2, [r2, #0]
 800b9de:	fbb3 f3f2 	udiv	r3, r3, r2
 800b9e2:	62bb      	str	r3, [r7, #40]	; 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 800b9e4:	2332      	movs	r3, #50	; 0x32
 800b9e6:	627b      	str	r3, [r7, #36]	; 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 800b9e8:	4a6d      	ldr	r2, [pc, #436]	; (800bba0 <I2C_Compute_SCLL_SCLH+0x204>)
 800b9ea:	683b      	ldr	r3, [r7, #0]
 800b9ec:	212c      	movs	r1, #44	; 0x2c
 800b9ee:	fb01 f303 	mul.w	r3, r1, r3
 800b9f2:	4413      	add	r3, r2
 800b9f4:	3328      	adds	r3, #40	; 0x28
 800b9f6:	681a      	ldr	r2, [r3, #0]
 800b9f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9fa:	fb02 f303 	mul.w	r3, r2, r3
 800b9fe:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 800ba00:	4a67      	ldr	r2, [pc, #412]	; (800bba0 <I2C_Compute_SCLL_SCLH+0x204>)
 800ba02:	683b      	ldr	r3, [r7, #0]
 800ba04:	212c      	movs	r1, #44	; 0x2c
 800ba06:	fb01 f303 	mul.w	r3, r1, r3
 800ba0a:	4413      	add	r3, r2
 800ba0c:	3304      	adds	r3, #4
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	4a62      	ldr	r2, [pc, #392]	; (800bb9c <I2C_Compute_SCLL_SCLH+0x200>)
 800ba12:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba16:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 800ba18:	4a61      	ldr	r2, [pc, #388]	; (800bba0 <I2C_Compute_SCLL_SCLH+0x204>)
 800ba1a:	683b      	ldr	r3, [r7, #0]
 800ba1c:	212c      	movs	r1, #44	; 0x2c
 800ba1e:	fb01 f303 	mul.w	r3, r1, r3
 800ba22:	4413      	add	r3, r2
 800ba24:	3308      	adds	r3, #8
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	4a5c      	ldr	r2, [pc, #368]	; (800bb9c <I2C_Compute_SCLL_SCLH+0x200>)
 800ba2a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba2e:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
 800ba30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba32:	643b      	str	r3, [r7, #64]	; 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800ba34:	2300      	movs	r3, #0
 800ba36:	637b      	str	r3, [r7, #52]	; 0x34
 800ba38:	e0a3      	b.n	800bb82 <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 800ba3a:	495a      	ldr	r1, [pc, #360]	; (800bba4 <I2C_Compute_SCLL_SCLH+0x208>)
 800ba3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ba3e:	4613      	mov	r3, r2
 800ba40:	009b      	lsls	r3, r3, #2
 800ba42:	4413      	add	r3, r2
 800ba44:	009b      	lsls	r3, r3, #2
 800ba46:	440b      	add	r3, r1
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	1c5a      	adds	r2, r3, #1
 800ba4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba4e:	fb02 f303 	mul.w	r3, r2, r3
 800ba52:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800ba54:	2300      	movs	r3, #0
 800ba56:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ba58:	e08c      	b.n	800bb74 <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 800ba5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba5c:	6a3b      	ldr	r3, [r7, #32]
 800ba5e:	441a      	add	r2, r3
 800ba60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba62:	3301      	adds	r3, #1
 800ba64:	6979      	ldr	r1, [r7, #20]
 800ba66:	fb03 f101 	mul.w	r1, r3, r1
 800ba6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba6c:	005b      	lsls	r3, r3, #1
 800ba6e:	440b      	add	r3, r1
 800ba70:	4413      	add	r3, r2
 800ba72:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 800ba74:	4a4a      	ldr	r2, [pc, #296]	; (800bba0 <I2C_Compute_SCLL_SCLH+0x204>)
 800ba76:	683b      	ldr	r3, [r7, #0]
 800ba78:	212c      	movs	r1, #44	; 0x2c
 800ba7a:	fb01 f303 	mul.w	r3, r1, r3
 800ba7e:	4413      	add	r3, r2
 800ba80:	3318      	adds	r3, #24
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	693a      	ldr	r2, [r7, #16]
 800ba86:	429a      	cmp	r2, r3
 800ba88:	d971      	bls.n	800bb6e <I2C_Compute_SCLL_SCLH+0x1d2>
 800ba8a:	693a      	ldr	r2, [r7, #16]
 800ba8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba8e:	1ad2      	subs	r2, r2, r3
 800ba90:	6a3b      	ldr	r3, [r7, #32]
 800ba92:	1ad3      	subs	r3, r2, r3
 800ba94:	089b      	lsrs	r3, r3, #2
 800ba96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ba98:	429a      	cmp	r2, r3
 800ba9a:	d268      	bcs.n	800bb6e <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	63bb      	str	r3, [r7, #56]	; 0x38
 800baa0:	e062      	b.n	800bb68 <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 800baa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800baa4:	6a3b      	ldr	r3, [r7, #32]
 800baa6:	441a      	add	r2, r3
 800baa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baaa:	3301      	adds	r3, #1
 800baac:	6979      	ldr	r1, [r7, #20]
 800baae:	fb03 f101 	mul.w	r1, r3, r1
 800bab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bab4:	005b      	lsls	r3, r3, #1
 800bab6:	440b      	add	r3, r1
 800bab8:	4413      	add	r3, r2
 800baba:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 800babc:	693a      	ldr	r2, [r7, #16]
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	441a      	add	r2, r3
 800bac2:	4937      	ldr	r1, [pc, #220]	; (800bba0 <I2C_Compute_SCLL_SCLH+0x204>)
 800bac4:	683b      	ldr	r3, [r7, #0]
 800bac6:	202c      	movs	r0, #44	; 0x2c
 800bac8:	fb00 f303 	mul.w	r3, r0, r3
 800bacc:	440b      	add	r3, r1
 800bace:	3320      	adds	r3, #32
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	441a      	add	r2, r3
 800bad4:	4932      	ldr	r1, [pc, #200]	; (800bba0 <I2C_Compute_SCLL_SCLH+0x204>)
 800bad6:	683b      	ldr	r3, [r7, #0]
 800bad8:	202c      	movs	r0, #44	; 0x2c
 800bada:	fb00 f303 	mul.w	r3, r0, r3
 800bade:	440b      	add	r3, r1
 800bae0:	3324      	adds	r3, #36	; 0x24
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	4413      	add	r3, r2
 800bae6:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 800bae8:	68ba      	ldr	r2, [r7, #8]
 800baea:	69bb      	ldr	r3, [r7, #24]
 800baec:	429a      	cmp	r2, r3
 800baee:	d338      	bcc.n	800bb62 <I2C_Compute_SCLL_SCLH+0x1c6>
 800baf0:	68ba      	ldr	r2, [r7, #8]
 800baf2:	69fb      	ldr	r3, [r7, #28]
 800baf4:	429a      	cmp	r2, r3
 800baf6:	d834      	bhi.n	800bb62 <I2C_Compute_SCLL_SCLH+0x1c6>
 800baf8:	4a29      	ldr	r2, [pc, #164]	; (800bba0 <I2C_Compute_SCLL_SCLH+0x204>)
 800bafa:	683b      	ldr	r3, [r7, #0]
 800bafc:	212c      	movs	r1, #44	; 0x2c
 800bafe:	fb01 f303 	mul.w	r3, r1, r3
 800bb02:	4413      	add	r3, r2
 800bb04:	331c      	adds	r3, #28
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	68fa      	ldr	r2, [r7, #12]
 800bb0a:	429a      	cmp	r2, r3
 800bb0c:	d329      	bcc.n	800bb62 <I2C_Compute_SCLL_SCLH+0x1c6>
 800bb0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	429a      	cmp	r2, r3
 800bb14:	d225      	bcs.n	800bb62 <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
 800bb16:	68ba      	ldr	r2, [r7, #8]
 800bb18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb1a:	1ad3      	subs	r3, r2, r3
 800bb1c:	633b      	str	r3, [r7, #48]	; 0x30

            if (error < 0)
 800bb1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	da02      	bge.n	800bb2a <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
 800bb24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb26:	425b      	negs	r3, r3
 800bb28:	633b      	str	r3, [r7, #48]	; 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
 800bb2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb2c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bb2e:	429a      	cmp	r2, r3
 800bb30:	d917      	bls.n	800bb62 <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
 800bb32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb34:	643b      	str	r3, [r7, #64]	; 0x40
              I2c_valid_timing[count].scll = scll;
 800bb36:	491b      	ldr	r1, [pc, #108]	; (800bba4 <I2C_Compute_SCLL_SCLH+0x208>)
 800bb38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bb3a:	4613      	mov	r3, r2
 800bb3c:	009b      	lsls	r3, r3, #2
 800bb3e:	4413      	add	r3, r2
 800bb40:	009b      	lsls	r3, r3, #2
 800bb42:	440b      	add	r3, r1
 800bb44:	3310      	adds	r3, #16
 800bb46:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bb48:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
 800bb4a:	4916      	ldr	r1, [pc, #88]	; (800bba4 <I2C_Compute_SCLL_SCLH+0x208>)
 800bb4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bb4e:	4613      	mov	r3, r2
 800bb50:	009b      	lsls	r3, r3, #2
 800bb52:	4413      	add	r3, r2
 800bb54:	009b      	lsls	r3, r3, #2
 800bb56:	440b      	add	r3, r1
 800bb58:	330c      	adds	r3, #12
 800bb5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bb5c:	601a      	str	r2, [r3, #0]
              ret = count;
 800bb5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb60:	647b      	str	r3, [r7, #68]	; 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800bb62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb64:	3301      	adds	r3, #1
 800bb66:	63bb      	str	r3, [r7, #56]	; 0x38
 800bb68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb6a:	2bff      	cmp	r3, #255	; 0xff
 800bb6c:	d999      	bls.n	800baa2 <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800bb6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb70:	3301      	adds	r3, #1
 800bb72:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bb74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb76:	2bff      	cmp	r3, #255	; 0xff
 800bb78:	f67f af6f 	bls.w	800ba5a <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800bb7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb7e:	3301      	adds	r3, #1
 800bb80:	637b      	str	r3, [r7, #52]	; 0x34
 800bb82:	4b09      	ldr	r3, [pc, #36]	; (800bba8 <I2C_Compute_SCLL_SCLH+0x20c>)
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bb88:	429a      	cmp	r2, r3
 800bb8a:	f4ff af56 	bcc.w	800ba3a <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
 800bb8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800bb90:	4618      	mov	r0, r3
 800bb92:	374c      	adds	r7, #76	; 0x4c
 800bb94:	46bd      	mov	sp, r7
 800bb96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb9a:	4770      	bx	lr
 800bb9c:	3b9aca00 	.word	0x3b9aca00
 800bba0:	0802cc04 	.word	0x0802cc04
 800bba4:	2400b2ec 	.word	0x2400b2ec
 800bba8:	2400bcec 	.word	0x2400bcec

0800bbac <I2C4_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspInit(I2C_HandleTypeDef *phi2c)
{
 800bbac:	b580      	push	{r7, lr}
 800bbae:	b08a      	sub	sp, #40	; 0x28
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 800bbb4:	4b31      	ldr	r3, [pc, #196]	; (800bc7c <I2C4_MspInit+0xd0>)
 800bbb6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800bbba:	4a30      	ldr	r2, [pc, #192]	; (800bc7c <I2C4_MspInit+0xd0>)
 800bbbc:	f043 0308 	orr.w	r3, r3, #8
 800bbc0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800bbc4:	4b2d      	ldr	r3, [pc, #180]	; (800bc7c <I2C4_MspInit+0xd0>)
 800bbc6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800bbca:	f003 0308 	and.w	r3, r3, #8
 800bbce:	613b      	str	r3, [r7, #16]
 800bbd0:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 800bbd2:	4b2a      	ldr	r3, [pc, #168]	; (800bc7c <I2C4_MspInit+0xd0>)
 800bbd4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800bbd8:	4a28      	ldr	r2, [pc, #160]	; (800bc7c <I2C4_MspInit+0xd0>)
 800bbda:	f043 0308 	orr.w	r3, r3, #8
 800bbde:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800bbe2:	4b26      	ldr	r3, [pc, #152]	; (800bc7c <I2C4_MspInit+0xd0>)
 800bbe4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800bbe8:	f003 0308 	and.w	r3, r3, #8
 800bbec:	60fb      	str	r3, [r7, #12]
 800bbee:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 800bbf0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bbf4:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 800bbf6:	2312      	movs	r3, #18
 800bbf8:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed 	= GPIO_SPEED_FREQ_HIGH;
 800bbfe:	2302      	movs	r3, #2
 800bc00:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 800bc02:	2304      	movs	r3, #4
 800bc04:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 800bc06:	f107 0314 	add.w	r3, r7, #20
 800bc0a:	4619      	mov	r1, r3
 800bc0c:	481c      	ldr	r0, [pc, #112]	; (800bc80 <I2C4_MspInit+0xd4>)
 800bc0e:	f001 fec9 	bl	800d9a4 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 800bc12:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bc16:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 800bc18:	2312      	movs	r3, #18
 800bc1a:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800bc1c:	2300      	movs	r3, #0
 800bc1e:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed 	= GPIO_SPEED_FREQ_HIGH;
 800bc20:	2302      	movs	r3, #2
 800bc22:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 800bc24:	2304      	movs	r3, #4
 800bc26:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 800bc28:	f107 0314 	add.w	r3, r7, #20
 800bc2c:	4619      	mov	r1, r3
 800bc2e:	4814      	ldr	r0, [pc, #80]	; (800bc80 <I2C4_MspInit+0xd4>)
 800bc30:	f001 feb8 	bl	800d9a4 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C4_CLK_ENABLE();
 800bc34:	4b11      	ldr	r3, [pc, #68]	; (800bc7c <I2C4_MspInit+0xd0>)
 800bc36:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800bc3a:	4a10      	ldr	r2, [pc, #64]	; (800bc7c <I2C4_MspInit+0xd0>)
 800bc3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc40:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 800bc44:	4b0d      	ldr	r3, [pc, #52]	; (800bc7c <I2C4_MspInit+0xd0>)
 800bc46:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800bc4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc4e:	60bb      	str	r3, [r7, #8]
 800bc50:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C4_FORCE_RESET();
 800bc52:	4b0a      	ldr	r3, [pc, #40]	; (800bc7c <I2C4_MspInit+0xd0>)
 800bc54:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bc58:	4a08      	ldr	r2, [pc, #32]	; (800bc7c <I2C4_MspInit+0xd0>)
 800bc5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc5e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

  /* Release the I2C peripheral clock reset */
  BUS_I2C4_RELEASE_RESET();
 800bc62:	4b06      	ldr	r3, [pc, #24]	; (800bc7c <I2C4_MspInit+0xd0>)
 800bc64:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bc68:	4a04      	ldr	r2, [pc, #16]	; (800bc7c <I2C4_MspInit+0xd0>)
 800bc6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bc6e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
}
 800bc72:	bf00      	nop
 800bc74:	3728      	adds	r7, #40	; 0x28
 800bc76:	46bd      	mov	sp, r7
 800bc78:	bd80      	pop	{r7, pc}
 800bc7a:	bf00      	nop
 800bc7c:	58024400 	.word	0x58024400
 800bc80:	58020c00 	.word	0x58020c00

0800bc84 <I2C4_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspDeInit(I2C_HandleTypeDef *phi2c)
{
 800bc84:	b580      	push	{r7, lr}
 800bc86:	b088      	sub	sp, #32
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
 800bc8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bc90:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	4619      	mov	r1, r3
 800bc96:	480b      	ldr	r0, [pc, #44]	; (800bcc4 <I2C4_MspDeInit+0x40>)
 800bc98:	f002 f834 	bl	800dd04 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
 800bc9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bca0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	4619      	mov	r1, r3
 800bca6:	4807      	ldr	r0, [pc, #28]	; (800bcc4 <I2C4_MspDeInit+0x40>)
 800bca8:	f002 f82c 	bl	800dd04 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 800bcac:	4b06      	ldr	r3, [pc, #24]	; (800bcc8 <I2C4_MspDeInit+0x44>)
 800bcae:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800bcb2:	4a05      	ldr	r2, [pc, #20]	; (800bcc8 <I2C4_MspDeInit+0x44>)
 800bcb4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bcb8:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
}
 800bcbc:	bf00      	nop
 800bcbe:	3720      	adds	r7, #32
 800bcc0:	46bd      	mov	sp, r7
 800bcc2:	bd80      	pop	{r7, pc}
 800bcc4:	58020c00 	.word	0x58020c00
 800bcc8:	58024400 	.word	0x58024400

0800bccc <I2C4_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 800bccc:	b580      	push	{r7, lr}
 800bcce:	b088      	sub	sp, #32
 800bcd0:	af04      	add	r7, sp, #16
 800bcd2:	607b      	str	r3, [r7, #4]
 800bcd4:	4603      	mov	r3, r0
 800bcd6:	81fb      	strh	r3, [r7, #14]
 800bcd8:	460b      	mov	r3, r1
 800bcda:	81bb      	strh	r3, [r7, #12]
 800bcdc:	4613      	mov	r3, r2
 800bcde:	817b      	strh	r3, [r7, #10]
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 800bce0:	8978      	ldrh	r0, [r7, #10]
 800bce2:	89ba      	ldrh	r2, [r7, #12]
 800bce4:	89f9      	ldrh	r1, [r7, #14]
 800bce6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800bcea:	9302      	str	r3, [sp, #8]
 800bcec:	8b3b      	ldrh	r3, [r7, #24]
 800bcee:	9301      	str	r3, [sp, #4]
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	9300      	str	r3, [sp, #0]
 800bcf4:	4603      	mov	r3, r0
 800bcf6:	4807      	ldr	r0, [pc, #28]	; (800bd14 <I2C4_WriteReg+0x48>)
 800bcf8:	f002 fa3e 	bl	800e178 <HAL_I2C_Mem_Write>
 800bcfc:	4603      	mov	r3, r0
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d101      	bne.n	800bd06 <I2C4_WriteReg+0x3a>
  {
    return BSP_ERROR_NONE;
 800bd02:	2300      	movs	r3, #0
 800bd04:	e001      	b.n	800bd0a <I2C4_WriteReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 800bd06:	f06f 0307 	mvn.w	r3, #7
}
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	3710      	adds	r7, #16
 800bd0e:	46bd      	mov	sp, r7
 800bd10:	bd80      	pop	{r7, pc}
 800bd12:	bf00      	nop
 800bd14:	2400bcf0 	.word	0x2400bcf0

0800bd18 <I2C4_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b088      	sub	sp, #32
 800bd1c:	af04      	add	r7, sp, #16
 800bd1e:	607b      	str	r3, [r7, #4]
 800bd20:	4603      	mov	r3, r0
 800bd22:	81fb      	strh	r3, [r7, #14]
 800bd24:	460b      	mov	r3, r1
 800bd26:	81bb      	strh	r3, [r7, #12]
 800bd28:	4613      	mov	r3, r2
 800bd2a:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 800bd2c:	8978      	ldrh	r0, [r7, #10]
 800bd2e:	89ba      	ldrh	r2, [r7, #12]
 800bd30:	89f9      	ldrh	r1, [r7, #14]
 800bd32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800bd36:	9302      	str	r3, [sp, #8]
 800bd38:	8b3b      	ldrh	r3, [r7, #24]
 800bd3a:	9301      	str	r3, [sp, #4]
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	9300      	str	r3, [sp, #0]
 800bd40:	4603      	mov	r3, r0
 800bd42:	4807      	ldr	r0, [pc, #28]	; (800bd60 <I2C4_ReadReg+0x48>)
 800bd44:	f002 fb2c 	bl	800e3a0 <HAL_I2C_Mem_Read>
 800bd48:	4603      	mov	r3, r0
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d101      	bne.n	800bd52 <I2C4_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
 800bd4e:	2300      	movs	r3, #0
 800bd50:	e001      	b.n	800bd56 <I2C4_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 800bd52:	f06f 0307 	mvn.w	r3, #7
}
 800bd56:	4618      	mov	r0, r3
 800bd58:	3710      	adds	r7, #16
 800bd5a:	46bd      	mov	sp, r7
 800bd5c:	bd80      	pop	{r7, pc}
 800bd5e:	bf00      	nop
 800bd60:	2400bcf0 	.word	0x2400bcf0

0800bd64 <BSP_OSPI_NOR_Init>:
  * @param  Instance   OSPI Instance
  * @param  Init       OSPI Init structure
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_Init(uint32_t Instance, BSP_OSPI_NOR_Init_t *Init)
{
 800bd64:	b580      	push	{r7, lr}
 800bd66:	b094      	sub	sp, #80	; 0x50
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	6078      	str	r0, [r7, #4]
 800bd6c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800bd6e:	2300      	movs	r3, #0
 800bd70:	64fb      	str	r3, [r7, #76]	; 0x4c
  BSP_OSPI_NOR_Info_t pInfo;
  MX_OSPI_Config ospi_config;

  /* Check if the instance is supported */
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d003      	beq.n	800bd80 <BSP_OSPI_NOR_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800bd78:	f06f 0301 	mvn.w	r3, #1
 800bd7c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bd7e:	e071      	b.n	800be64 <BSP_OSPI_NOR_Init+0x100>
  }
  else
  {
    /* Check if the instance is already initialized */
    if (Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_NONE)
 800bd80:	4a3b      	ldr	r2, [pc, #236]	; (800be70 <BSP_OSPI_NOR_Init+0x10c>)
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d16b      	bne.n	800be64 <BSP_OSPI_NOR_Init+0x100>
    {
#if (USE_HAL_OSPI_REGISTER_CALLBACKS == 0)
      /* Msp OSPI initialization */
      OSPI_NOR_MspInit(&hospi_nor[Instance]);
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	225c      	movs	r2, #92	; 0x5c
 800bd90:	fb02 f303 	mul.w	r3, r2, r3
 800bd94:	4a37      	ldr	r2, [pc, #220]	; (800be74 <BSP_OSPI_NOR_Init+0x110>)
 800bd96:	4413      	add	r3, r2
 800bd98:	4618      	mov	r0, r3
 800bd9a:	f000 fa09 	bl	800c1b0 <OSPI_NOR_MspInit>
      if(ret == BSP_ERROR_NONE)
      {
#endif /* USE_HAL_OSPI_REGISTER_CALLBACKS */

        /* Get Flash informations of one memory */
        (void)MX25LM51245G_GetFlashInfo(&pInfo);
 800bd9e:	f107 031c 	add.w	r3, r7, #28
 800bda2:	4618      	mov	r0, r3
 800bda4:	f7fe fee8 	bl	800ab78 <MX25LM51245G_GetFlashInfo>

        /* Fill config structure */
        ospi_config.ClockPrescaler = 3U;
 800bda8:	2303      	movs	r3, #3
 800bdaa:	613b      	str	r3, [r7, #16]
        ospi_config.MemorySize     = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize);
 800bdac:	69fb      	ldr	r3, [r7, #28]
 800bdae:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bdb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bdb2:	fa93 f3a3 	rbit	r3, r3
 800bdb6:	643b      	str	r3, [r7, #64]	; 0x40
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800bdb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bdba:	64bb      	str	r3, [r7, #72]	; 0x48
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800bdbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d101      	bne.n	800bdc6 <BSP_OSPI_NOR_Init+0x62>
  {
    return 32U;
 800bdc2:	2320      	movs	r3, #32
 800bdc4:	e003      	b.n	800bdce <BSP_OSPI_NOR_Init+0x6a>
  }
  return __builtin_clz(value);
 800bdc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bdc8:	fab3 f383 	clz	r3, r3
 800bdcc:	b2db      	uxtb	r3, r3
 800bdce:	60fb      	str	r3, [r7, #12]
        ospi_config.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 800bdd0:	2300      	movs	r3, #0
 800bdd2:	617b      	str	r3, [r7, #20]
        ospi_config.TransferRate   = (uint32_t)Init->TransferRate;
 800bdd4:	683b      	ldr	r3, [r7, #0]
 800bdd6:	785b      	ldrb	r3, [r3, #1]
 800bdd8:	61bb      	str	r3, [r7, #24]

        /* STM32 OSPI interface initialization */
        if (MX_OSPI_NOR_Init(&hospi_nor[Instance], &ospi_config) != HAL_OK)
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	225c      	movs	r2, #92	; 0x5c
 800bdde:	fb02 f303 	mul.w	r3, r2, r3
 800bde2:	4a24      	ldr	r2, [pc, #144]	; (800be74 <BSP_OSPI_NOR_Init+0x110>)
 800bde4:	4413      	add	r3, r2
 800bde6:	f107 020c 	add.w	r2, r7, #12
 800bdea:	4611      	mov	r1, r2
 800bdec:	4618      	mov	r0, r3
 800bdee:	f000 f895 	bl	800bf1c <MX_OSPI_NOR_Init>
 800bdf2:	4603      	mov	r3, r0
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d003      	beq.n	800be00 <BSP_OSPI_NOR_Init+0x9c>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 800bdf8:	f06f 0303 	mvn.w	r3, #3
 800bdfc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bdfe:	e031      	b.n	800be64 <BSP_OSPI_NOR_Init+0x100>
        }
        /* OSPI memory reset */
        else if (OSPI_NOR_ResetMemory(Instance) != BSP_ERROR_NONE)
 800be00:	6878      	ldr	r0, [r7, #4]
 800be02:	f000 fb7f 	bl	800c504 <OSPI_NOR_ResetMemory>
 800be06:	4603      	mov	r3, r0
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d003      	beq.n	800be14 <BSP_OSPI_NOR_Init+0xb0>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800be0c:	f06f 0304 	mvn.w	r3, #4
 800be10:	64fb      	str	r3, [r7, #76]	; 0x4c
 800be12:	e027      	b.n	800be64 <BSP_OSPI_NOR_Init+0x100>
        }
        /* Check if memory is ready */
        else if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	225c      	movs	r2, #92	; 0x5c
 800be18:	fb02 f303 	mul.w	r3, r2, r3
 800be1c:	4a15      	ldr	r2, [pc, #84]	; (800be74 <BSP_OSPI_NOR_Init+0x110>)
 800be1e:	1898      	adds	r0, r3, r2
 800be20:	4a13      	ldr	r2, [pc, #76]	; (800be70 <BSP_OSPI_NOR_Init+0x10c>)
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	00db      	lsls	r3, r3, #3
 800be26:	4413      	add	r3, r2
 800be28:	7859      	ldrb	r1, [r3, #1]
 800be2a:	4a11      	ldr	r2, [pc, #68]	; (800be70 <BSP_OSPI_NOR_Init+0x10c>)
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	00db      	lsls	r3, r3, #3
 800be30:	4413      	add	r3, r2
 800be32:	789b      	ldrb	r3, [r3, #2]
 800be34:	461a      	mov	r2, r3
 800be36:	f7fe fece 	bl	800abd6 <MX25LM51245G_AutoPollingMemReady>
 800be3a:	4603      	mov	r3, r0
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d003      	beq.n	800be48 <BSP_OSPI_NOR_Init+0xe4>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800be40:	f06f 0304 	mvn.w	r3, #4
 800be44:	64fb      	str	r3, [r7, #76]	; 0x4c
 800be46:	e00d      	b.n	800be64 <BSP_OSPI_NOR_Init+0x100>
        }
        else
        {
          /* Configure the memory */
          if (BSP_OSPI_NOR_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 800be48:	683b      	ldr	r3, [r7, #0]
 800be4a:	7819      	ldrb	r1, [r3, #0]
 800be4c:	683b      	ldr	r3, [r7, #0]
 800be4e:	785b      	ldrb	r3, [r3, #1]
 800be50:	461a      	mov	r2, r3
 800be52:	6878      	ldr	r0, [r7, #4]
 800be54:	f000 f936 	bl	800c0c4 <BSP_OSPI_NOR_ConfigFlash>
 800be58:	4603      	mov	r3, r0
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d002      	beq.n	800be64 <BSP_OSPI_NOR_Init+0x100>
          {
            ret = BSP_ERROR_COMPONENT_FAILURE;
 800be5e:	f06f 0304 	mvn.w	r3, #4
 800be62:	64fb      	str	r3, [r7, #76]	; 0x4c
#endif
    }
  }

  /* Return BSP status */
  return ret;
 800be64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800be66:	4618      	mov	r0, r3
 800be68:	3750      	adds	r7, #80	; 0x50
 800be6a:	46bd      	mov	sp, r7
 800be6c:	bd80      	pop	{r7, pc}
 800be6e:	bf00      	nop
 800be70:	2400bda0 	.word	0x2400bda0
 800be74:	2400bd44 	.word	0x2400bd44

0800be78 <BSP_OSPI_NOR_DeInit>:
  * @brief  De-Initializes the OSPI interface.
  * @param  Instance   OSPI Instance
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_DeInit(uint32_t Instance)
{
 800be78:	b580      	push	{r7, lr}
 800be7a:	b084      	sub	sp, #16
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800be80:	2300      	movs	r3, #0
 800be82:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d003      	beq.n	800be92 <BSP_OSPI_NOR_DeInit+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800be8a:	f06f 0301 	mvn.w	r3, #1
 800be8e:	60fb      	str	r3, [r7, #12]
 800be90:	e03a      	b.n	800bf08 <BSP_OSPI_NOR_DeInit+0x90>
  }
  else
  {
    /* Disable Memory mapped mode */
    if(Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_MMP)
 800be92:	4a20      	ldr	r2, [pc, #128]	; (800bf14 <BSP_OSPI_NOR_DeInit+0x9c>)
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800be9a:	2b02      	cmp	r3, #2
 800be9c:	d108      	bne.n	800beb0 <BSP_OSPI_NOR_DeInit+0x38>
    {
      if(BSP_OSPI_NOR_DisableMemoryMappedMode(Instance) != BSP_ERROR_NONE)
 800be9e:	6878      	ldr	r0, [r7, #4]
 800bea0:	f000 f8da 	bl	800c058 <BSP_OSPI_NOR_DisableMemoryMappedMode>
 800bea4:	4603      	mov	r3, r0
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d002      	beq.n	800beb0 <BSP_OSPI_NOR_DeInit+0x38>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800beaa:	f06f 0304 	mvn.w	r3, #4
 800beae:	60fb      	str	r3, [r7, #12]
      }
    }

    if(ret == BSP_ERROR_NONE)
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d128      	bne.n	800bf08 <BSP_OSPI_NOR_DeInit+0x90>
    {
      /* Set default Ospi_Nor_Ctx values */
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_NONE;
 800beb6:	4a17      	ldr	r2, [pc, #92]	; (800bf14 <BSP_OSPI_NOR_DeInit+0x9c>)
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	2100      	movs	r1, #0
 800bebc:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
      Ospi_Nor_Ctx[Instance].InterfaceMode = BSP_OSPI_NOR_SPI_MODE;
 800bec0:	4a14      	ldr	r2, [pc, #80]	; (800bf14 <BSP_OSPI_NOR_DeInit+0x9c>)
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	00db      	lsls	r3, r3, #3
 800bec6:	4413      	add	r3, r2
 800bec8:	2200      	movs	r2, #0
 800beca:	705a      	strb	r2, [r3, #1]
      Ospi_Nor_Ctx[Instance].TransferRate  = BSP_OSPI_NOR_STR_TRANSFER;
 800becc:	4a11      	ldr	r2, [pc, #68]	; (800bf14 <BSP_OSPI_NOR_DeInit+0x9c>)
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	00db      	lsls	r3, r3, #3
 800bed2:	4413      	add	r3, r2
 800bed4:	2200      	movs	r2, #0
 800bed6:	709a      	strb	r2, [r3, #2]

#if (USE_HAL_OSPI_REGISTER_CALLBACKS == 0)
      OSPI_NOR_MspDeInit(&hospi_nor[Instance]);
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	225c      	movs	r2, #92	; 0x5c
 800bedc:	fb02 f303 	mul.w	r3, r2, r3
 800bee0:	4a0d      	ldr	r2, [pc, #52]	; (800bf18 <BSP_OSPI_NOR_DeInit+0xa0>)
 800bee2:	4413      	add	r3, r2
 800bee4:	4618      	mov	r0, r3
 800bee6:	f000 fab3 	bl	800c450 <OSPI_NOR_MspDeInit>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS == 0) */

      /* Call the DeInit function to reset the driver */
      if (HAL_OSPI_DeInit(&hospi_nor[Instance]) != HAL_OK)
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	225c      	movs	r2, #92	; 0x5c
 800beee:	fb02 f303 	mul.w	r3, r2, r3
 800bef2:	4a09      	ldr	r2, [pc, #36]	; (800bf18 <BSP_OSPI_NOR_DeInit+0xa0>)
 800bef4:	4413      	add	r3, r2
 800bef6:	4618      	mov	r0, r3
 800bef8:	f005 fe98 	bl	8011c2c <HAL_OSPI_DeInit>
 800befc:	4603      	mov	r3, r0
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d002      	beq.n	800bf08 <BSP_OSPI_NOR_DeInit+0x90>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 800bf02:	f06f 0303 	mvn.w	r3, #3
 800bf06:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Return BSP status */
  return ret;
 800bf08:	68fb      	ldr	r3, [r7, #12]
}
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	3710      	adds	r7, #16
 800bf0e:	46bd      	mov	sp, r7
 800bf10:	bd80      	pop	{r7, pc}
 800bf12:	bf00      	nop
 800bf14:	2400bda0 	.word	0x2400bda0
 800bf18:	2400bd44 	.word	0x2400bd44

0800bf1c <MX_OSPI_NOR_Init>:
  * @param  hospi          OSPI handle
  * @param  Config         OSPI config structure
  * @retval BSP status
  */
__weak HAL_StatusTypeDef MX_OSPI_NOR_Init(OSPI_HandleTypeDef *hospi, MX_OSPI_Config *Config)
{
 800bf1c:	b580      	push	{r7, lr}
 800bf1e:	b082      	sub	sp, #8
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	6078      	str	r0, [r7, #4]
 800bf24:	6039      	str	r1, [r7, #0]
    /* OctoSPI initialization */
  hospi->Instance = OCTOSPI1;
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	4a20      	ldr	r2, [pc, #128]	; (800bfac <MX_OSPI_NOR_Init+0x90>)
 800bf2a:	601a      	str	r2, [r3, #0]

  hospi->Init.FifoThreshold      = 4;
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	2204      	movs	r2, #4
 800bf30:	605a      	str	r2, [r3, #4]
  hospi->Init.DualQuad           = HAL_OSPI_DUALQUAD_DISABLE;
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	2200      	movs	r2, #0
 800bf36:	609a      	str	r2, [r3, #8]
  hospi->Init.DeviceSize         = Config->MemorySize; /* 512 MBits */
 800bf38:	683b      	ldr	r3, [r7, #0]
 800bf3a:	681a      	ldr	r2, [r3, #0]
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	611a      	str	r2, [r3, #16]
  hospi->Init.ChipSelectHighTime = 2;
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	2202      	movs	r2, #2
 800bf44:	615a      	str	r2, [r3, #20]
  hospi->Init.FreeRunningClock   = HAL_OSPI_FREERUNCLK_DISABLE;
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	2200      	movs	r2, #0
 800bf4a:	619a      	str	r2, [r3, #24]
  hospi->Init.ClockMode          = HAL_OSPI_CLOCK_MODE_0;
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	2200      	movs	r2, #0
 800bf50:	61da      	str	r2, [r3, #28]
  hospi->Init.WrapSize           = HAL_OSPI_WRAP_NOT_SUPPORTED;
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	2200      	movs	r2, #0
 800bf56:	621a      	str	r2, [r3, #32]
  hospi->Init.ClockPrescaler     = Config->ClockPrescaler;
 800bf58:	683b      	ldr	r3, [r7, #0]
 800bf5a:	685a      	ldr	r2, [r3, #4]
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	625a      	str	r2, [r3, #36]	; 0x24
  hospi->Init.SampleShifting     = Config->SampleShifting;
 800bf60:	683b      	ldr	r3, [r7, #0]
 800bf62:	689a      	ldr	r2, [r3, #8]
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	629a      	str	r2, [r3, #40]	; 0x28
  hospi->Init.ChipSelectBoundary = 0;
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	2200      	movs	r2, #0
 800bf6c:	631a      	str	r2, [r3, #48]	; 0x30
  hospi->Init.DelayBlockBypass   = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	2208      	movs	r2, #8
 800bf72:	635a      	str	r2, [r3, #52]	; 0x34

  if (Config->TransferRate == (uint32_t)BSP_OSPI_NOR_DTR_TRANSFER)
 800bf74:	683b      	ldr	r3, [r7, #0]
 800bf76:	68db      	ldr	r3, [r3, #12]
 800bf78:	2b01      	cmp	r3, #1
 800bf7a:	d108      	bne.n	800bf8e <MX_OSPI_NOR_Init+0x72>
  {
    hospi->Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800bf82:	60da      	str	r2, [r3, #12]
    hospi->Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf8a:	62da      	str	r2, [r3, #44]	; 0x2c
 800bf8c:	e005      	b.n	800bf9a <MX_OSPI_NOR_Init+0x7e>
  }
  else
  {
    hospi->Init.MemoryType            = HAL_OSPI_MEMTYPE_MICRON;
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	2200      	movs	r2, #0
 800bf92:	60da      	str	r2, [r3, #12]
    hospi->Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	2200      	movs	r2, #0
 800bf98:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  return HAL_OSPI_Init(hospi);
 800bf9a:	6878      	ldr	r0, [r7, #4]
 800bf9c:	f005 fd8a 	bl	8011ab4 <HAL_OSPI_Init>
 800bfa0:	4603      	mov	r3, r0
}
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	3708      	adds	r7, #8
 800bfa6:	46bd      	mov	sp, r7
 800bfa8:	bd80      	pop	{r7, pc}
 800bfaa:	bf00      	nop
 800bfac:	52005000 	.word	0x52005000

0800bfb0 <BSP_OSPI_NOR_EnableMemoryMappedMode>:
  * @brief  Configure the OSPI in memory-mapped mode
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_EnableMemoryMappedMode(uint32_t Instance)
{
 800bfb0:	b580      	push	{r7, lr}
 800bfb2:	b084      	sub	sp, #16
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800bfb8:	2300      	movs	r3, #0
 800bfba:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d003      	beq.n	800bfca <BSP_OSPI_NOR_EnableMemoryMappedMode+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800bfc2:	f06f 0301 	mvn.w	r3, #1
 800bfc6:	60fb      	str	r3, [r7, #12]
 800bfc8:	e03d      	b.n	800c046 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x96>
  }
  else if(Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_STR_TRANSFER)
 800bfca:	4a21      	ldr	r2, [pc, #132]	; (800c050 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa0>)
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	00db      	lsls	r3, r3, #3
 800bfd0:	4413      	add	r3, r2
 800bfd2:	789b      	ldrb	r3, [r3, #2]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d11b      	bne.n	800c010 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x60>
  {
    if(MX25LM51245G_EnableMemoryMappedModeSTR(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, MX25LM51245G_4BYTES_SIZE) != MX25LM51245G_OK)
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	225c      	movs	r2, #92	; 0x5c
 800bfdc:	fb02 f303 	mul.w	r3, r2, r3
 800bfe0:	4a1c      	ldr	r2, [pc, #112]	; (800c054 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa4>)
 800bfe2:	1898      	adds	r0, r3, r2
 800bfe4:	4a1a      	ldr	r2, [pc, #104]	; (800c050 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa0>)
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	00db      	lsls	r3, r3, #3
 800bfea:	4413      	add	r3, r2
 800bfec:	785b      	ldrb	r3, [r3, #1]
 800bfee:	2201      	movs	r2, #1
 800bff0:	4619      	mov	r1, r3
 800bff2:	f7fe fe9d 	bl	800ad30 <MX25LM51245G_EnableMemoryMappedModeSTR>
 800bff6:	4603      	mov	r3, r0
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d003      	beq.n	800c004 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x54>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800bffc:	f06f 0304 	mvn.w	r3, #4
 800c000:	60fb      	str	r3, [r7, #12]
 800c002:	e020      	b.n	800c046 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x96>
    }
    else /* Update OSPI context if all operations are well done */
    {
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_MMP;
 800c004:	4a12      	ldr	r2, [pc, #72]	; (800c050 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa0>)
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	2102      	movs	r1, #2
 800c00a:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
 800c00e:	e01a      	b.n	800c046 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x96>
    }
  }
  else
  {
    if(MX25LM51245G_EnableMemoryMappedModeDTR(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode) != MX25LM51245G_OK)
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	225c      	movs	r2, #92	; 0x5c
 800c014:	fb02 f303 	mul.w	r3, r2, r3
 800c018:	4a0e      	ldr	r2, [pc, #56]	; (800c054 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa4>)
 800c01a:	441a      	add	r2, r3
 800c01c:	490c      	ldr	r1, [pc, #48]	; (800c050 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa0>)
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	00db      	lsls	r3, r3, #3
 800c022:	440b      	add	r3, r1
 800c024:	785b      	ldrb	r3, [r3, #1]
 800c026:	4619      	mov	r1, r3
 800c028:	4610      	mov	r0, r2
 800c02a:	f7fe ff2b 	bl	800ae84 <MX25LM51245G_EnableMemoryMappedModeDTR>
 800c02e:	4603      	mov	r3, r0
 800c030:	2b00      	cmp	r3, #0
 800c032:	d003      	beq.n	800c03c <BSP_OSPI_NOR_EnableMemoryMappedMode+0x8c>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800c034:	f06f 0304 	mvn.w	r3, #4
 800c038:	60fb      	str	r3, [r7, #12]
 800c03a:	e004      	b.n	800c046 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x96>
    }
    else /* Update OSPI context if all operations are well done */
    {
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_MMP;
 800c03c:	4a04      	ldr	r2, [pc, #16]	; (800c050 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa0>)
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	2102      	movs	r1, #2
 800c042:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
    }
  }

  /* Return BSP status */
  return ret;
 800c046:	68fb      	ldr	r3, [r7, #12]
}
 800c048:	4618      	mov	r0, r3
 800c04a:	3710      	adds	r7, #16
 800c04c:	46bd      	mov	sp, r7
 800c04e:	bd80      	pop	{r7, pc}
 800c050:	2400bda0 	.word	0x2400bda0
 800c054:	2400bd44 	.word	0x2400bd44

0800c058 <BSP_OSPI_NOR_DisableMemoryMappedMode>:
  *         Only 1 Instance can running MMP mode. And it will lock system at this mode.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_DisableMemoryMappedMode(uint32_t Instance)
{
 800c058:	b580      	push	{r7, lr}
 800c05a:	b084      	sub	sp, #16
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800c060:	2300      	movs	r3, #0
 800c062:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	2b00      	cmp	r3, #0
 800c068:	d003      	beq.n	800c072 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800c06a:	f06f 0301 	mvn.w	r3, #1
 800c06e:	60fb      	str	r3, [r7, #12]
 800c070:	e01e      	b.n	800c0b0 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x58>
  }
  else if(Ospi_Nor_Ctx[Instance].IsInitialized != OSPI_ACCESS_MMP)
 800c072:	4a12      	ldr	r2, [pc, #72]	; (800c0bc <BSP_OSPI_NOR_DisableMemoryMappedMode+0x64>)
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800c07a:	2b02      	cmp	r3, #2
 800c07c:	d003      	beq.n	800c086 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x2e>
  {
    ret = BSP_ERROR_OSPI_MMP_UNLOCK_FAILURE;
 800c07e:	f06f 031a 	mvn.w	r3, #26
 800c082:	60fb      	str	r3, [r7, #12]
 800c084:	e014      	b.n	800c0b0 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x58>
  }/* Abort MMP back to indirect mode */
  else if(HAL_OSPI_Abort(&hospi_nor[Instance]) != HAL_OK)
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	225c      	movs	r2, #92	; 0x5c
 800c08a:	fb02 f303 	mul.w	r3, r2, r3
 800c08e:	4a0c      	ldr	r2, [pc, #48]	; (800c0c0 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x68>)
 800c090:	4413      	add	r3, r2
 800c092:	4618      	mov	r0, r3
 800c094:	f006 f9fc 	bl	8012490 <HAL_OSPI_Abort>
 800c098:	4603      	mov	r3, r0
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d003      	beq.n	800c0a6 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x4e>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 800c09e:	f06f 0303 	mvn.w	r3, #3
 800c0a2:	60fb      	str	r3, [r7, #12]
 800c0a4:	e004      	b.n	800c0b0 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x58>
  }
  else
  {
    /* Update OSPI context if all operations are well done */
    Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;
 800c0a6:	4a05      	ldr	r2, [pc, #20]	; (800c0bc <BSP_OSPI_NOR_DisableMemoryMappedMode+0x64>)
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	2101      	movs	r1, #1
 800c0ac:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
  }

  /* Return BSP status */
  return ret;
 800c0b0:	68fb      	ldr	r3, [r7, #12]
}
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	3710      	adds	r7, #16
 800c0b6:	46bd      	mov	sp, r7
 800c0b8:	bd80      	pop	{r7, pc}
 800c0ba:	bf00      	nop
 800c0bc:	2400bda0 	.word	0x2400bda0
 800c0c0:	2400bd44 	.word	0x2400bd44

0800c0c4 <BSP_OSPI_NOR_ConfigFlash>:
  * @param  Mode      OSPI mode
  * @param  Rate      OSPI transfer rate
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_ConfigFlash(uint32_t Instance, BSP_OSPI_NOR_Interface_t Mode, BSP_OSPI_NOR_Transfer_t Rate)
{
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	b084      	sub	sp, #16
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	6078      	str	r0, [r7, #4]
 800c0cc:	460b      	mov	r3, r1
 800c0ce:	70fb      	strb	r3, [r7, #3]
 800c0d0:	4613      	mov	r3, r2
 800c0d2:	70bb      	strb	r3, [r7, #2]
  int32_t ret = BSP_ERROR_NONE;
 800c0d4:	2300      	movs	r3, #0
 800c0d6:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d003      	beq.n	800c0e6 <BSP_OSPI_NOR_ConfigFlash+0x22>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800c0de:	f06f 0301 	mvn.w	r3, #1
 800c0e2:	60fb      	str	r3, [r7, #12]
 800c0e4:	e05d      	b.n	800c1a2 <BSP_OSPI_NOR_ConfigFlash+0xde>
  }/* Check if MMP mode locked ************************************************/
  else if(Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_MMP)
 800c0e6:	4a31      	ldr	r2, [pc, #196]	; (800c1ac <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800c0ee:	2b02      	cmp	r3, #2
 800c0f0:	d103      	bne.n	800c0fa <BSP_OSPI_NOR_ConfigFlash+0x36>
  {
    ret = BSP_ERROR_OSPI_MMP_LOCK_FAILURE;
 800c0f2:	f06f 0319 	mvn.w	r3, #25
 800c0f6:	60fb      	str	r3, [r7, #12]
 800c0f8:	e053      	b.n	800c1a2 <BSP_OSPI_NOR_ConfigFlash+0xde>
  }
  else
  {
    /* Setup Flash interface ***************************************************/
    switch(Ospi_Nor_Ctx[Instance].InterfaceMode)
 800c0fa:	4a2c      	ldr	r2, [pc, #176]	; (800c1ac <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	00db      	lsls	r3, r3, #3
 800c100:	4413      	add	r3, r2
 800c102:	785b      	ldrb	r3, [r3, #1]
 800c104:	2b01      	cmp	r3, #1
 800c106:	d125      	bne.n	800c154 <BSP_OSPI_NOR_ConfigFlash+0x90>
    {
    case BSP_OSPI_NOR_OPI_MODE :  /* 8-8-8 commands */
      if((Mode != BSP_OSPI_NOR_OPI_MODE) || (Rate != Ospi_Nor_Ctx[Instance].TransferRate))
 800c108:	78fb      	ldrb	r3, [r7, #3]
 800c10a:	2b01      	cmp	r3, #1
 800c10c:	d107      	bne.n	800c11e <BSP_OSPI_NOR_ConfigFlash+0x5a>
 800c10e:	4a27      	ldr	r2, [pc, #156]	; (800c1ac <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	00db      	lsls	r3, r3, #3
 800c114:	4413      	add	r3, r2
 800c116:	789b      	ldrb	r3, [r3, #2]
 800c118:	78ba      	ldrb	r2, [r7, #2]
 800c11a:	429a      	cmp	r2, r3
 800c11c:	d02a      	beq.n	800c174 <BSP_OSPI_NOR_ConfigFlash+0xb0>
      {
        /* Exit OPI mode */
        ret = OSPI_NOR_ExitOPIMode(Instance);
 800c11e:	6878      	ldr	r0, [r7, #4]
 800c120:	f000 fbfc 	bl	800c91c <OSPI_NOR_ExitOPIMode>
 800c124:	60f8      	str	r0, [r7, #12]

        if ((ret == BSP_ERROR_NONE) && (Mode == BSP_OSPI_NOR_OPI_MODE))
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d123      	bne.n	800c174 <BSP_OSPI_NOR_ConfigFlash+0xb0>
 800c12c:	78fb      	ldrb	r3, [r7, #3]
 800c12e:	2b01      	cmp	r3, #1
 800c130:	d120      	bne.n	800c174 <BSP_OSPI_NOR_ConfigFlash+0xb0>
        {

          if (Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_STR_TRANSFER)
 800c132:	4a1e      	ldr	r2, [pc, #120]	; (800c1ac <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	00db      	lsls	r3, r3, #3
 800c138:	4413      	add	r3, r2
 800c13a:	789b      	ldrb	r3, [r3, #2]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d104      	bne.n	800c14a <BSP_OSPI_NOR_ConfigFlash+0x86>
          {
            /* Enter DTR OPI mode */
            ret = OSPI_NOR_EnterDOPIMode(Instance);
 800c140:	6878      	ldr	r0, [r7, #4]
 800c142:	f000 fa6f 	bl	800c624 <OSPI_NOR_EnterDOPIMode>
 800c146:	60f8      	str	r0, [r7, #12]
            /* Enter STR OPI mode */
            ret = OSPI_NOR_EnterSOPIMode(Instance);
          }
        }
      }
      break;
 800c148:	e014      	b.n	800c174 <BSP_OSPI_NOR_ConfigFlash+0xb0>
            ret = OSPI_NOR_EnterSOPIMode(Instance);
 800c14a:	6878      	ldr	r0, [r7, #4]
 800c14c:	f000 fb3a 	bl	800c7c4 <OSPI_NOR_EnterSOPIMode>
 800c150:	60f8      	str	r0, [r7, #12]
      break;
 800c152:	e00f      	b.n	800c174 <BSP_OSPI_NOR_ConfigFlash+0xb0>

    case BSP_OSPI_NOR_SPI_MODE :  /* 1-1-1 commands, Power on H/W default setting */
    default :
      if(Mode == BSP_OSPI_NOR_OPI_MODE)
 800c154:	78fb      	ldrb	r3, [r7, #3]
 800c156:	2b01      	cmp	r3, #1
 800c158:	d10e      	bne.n	800c178 <BSP_OSPI_NOR_ConfigFlash+0xb4>
      {
        if(Rate == BSP_OSPI_NOR_STR_TRANSFER)
 800c15a:	78bb      	ldrb	r3, [r7, #2]
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d104      	bne.n	800c16a <BSP_OSPI_NOR_ConfigFlash+0xa6>
        {
          /* Enter STR OPI mode */
          ret = OSPI_NOR_EnterSOPIMode(Instance);
 800c160:	6878      	ldr	r0, [r7, #4]
 800c162:	f000 fb2f 	bl	800c7c4 <OSPI_NOR_EnterSOPIMode>
 800c166:	60f8      	str	r0, [r7, #12]
        {
          /* Enter DTR OPI mode */
          ret = OSPI_NOR_EnterDOPIMode(Instance);
        }
      }
      break;
 800c168:	e006      	b.n	800c178 <BSP_OSPI_NOR_ConfigFlash+0xb4>
          ret = OSPI_NOR_EnterDOPIMode(Instance);
 800c16a:	6878      	ldr	r0, [r7, #4]
 800c16c:	f000 fa5a 	bl	800c624 <OSPI_NOR_EnterDOPIMode>
 800c170:	60f8      	str	r0, [r7, #12]
      break;
 800c172:	e001      	b.n	800c178 <BSP_OSPI_NOR_ConfigFlash+0xb4>
      break;
 800c174:	bf00      	nop
 800c176:	e000      	b.n	800c17a <BSP_OSPI_NOR_ConfigFlash+0xb6>
      break;
 800c178:	bf00      	nop
    }

    /* Update OSPI context if all operations are well done */
    if(ret == BSP_ERROR_NONE)
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d110      	bne.n	800c1a2 <BSP_OSPI_NOR_ConfigFlash+0xde>
    {
      /* Update current status parameter *****************************************/
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;
 800c180:	4a0a      	ldr	r2, [pc, #40]	; (800c1ac <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	2101      	movs	r1, #1
 800c186:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
      Ospi_Nor_Ctx[Instance].InterfaceMode = Mode;
 800c18a:	4a08      	ldr	r2, [pc, #32]	; (800c1ac <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	00db      	lsls	r3, r3, #3
 800c190:	4413      	add	r3, r2
 800c192:	78fa      	ldrb	r2, [r7, #3]
 800c194:	705a      	strb	r2, [r3, #1]
      Ospi_Nor_Ctx[Instance].TransferRate  = Rate;
 800c196:	4a05      	ldr	r2, [pc, #20]	; (800c1ac <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	00db      	lsls	r3, r3, #3
 800c19c:	4413      	add	r3, r2
 800c19e:	78ba      	ldrb	r2, [r7, #2]
 800c1a0:	709a      	strb	r2, [r3, #2]
    }
  }

  /* Return BSP status */
  return ret;
 800c1a2:	68fb      	ldr	r3, [r7, #12]
}
 800c1a4:	4618      	mov	r0, r3
 800c1a6:	3710      	adds	r7, #16
 800c1a8:	46bd      	mov	sp, r7
 800c1aa:	bd80      	pop	{r7, pc}
 800c1ac:	2400bda0 	.word	0x2400bda0

0800c1b0 <OSPI_NOR_MspInit>:
  * @brief  Initializes the OSPI MSP.
  * @param  hospi OSPI handle
  * @retval None
  */
static void OSPI_NOR_MspInit(OSPI_HandleTypeDef *hospi)
{
 800c1b0:	b580      	push	{r7, lr}
 800c1b2:	b094      	sub	sp, #80	; 0x50
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	6078      	str	r0, [r7, #4]

  /* hospi unused argument(s) compilation warning */
  UNUSED(hospi);

  /* Enable the OctoSPI memory interface clock */
  OSPI_CLK_ENABLE();
 800c1b8:	4b9e      	ldr	r3, [pc, #632]	; (800c434 <OSPI_NOR_MspInit+0x284>)
 800c1ba:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800c1be:	4a9d      	ldr	r2, [pc, #628]	; (800c434 <OSPI_NOR_MspInit+0x284>)
 800c1c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c1c4:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 800c1c8:	4b9a      	ldr	r3, [pc, #616]	; (800c434 <OSPI_NOR_MspInit+0x284>)
 800c1ca:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800c1ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c1d2:	63bb      	str	r3, [r7, #56]	; 0x38
 800c1d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38

  /* Reset the OctoSPI memory interface */
  OSPI_FORCE_RESET();
 800c1d6:	4b97      	ldr	r3, [pc, #604]	; (800c434 <OSPI_NOR_MspInit+0x284>)
 800c1d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c1da:	4a96      	ldr	r2, [pc, #600]	; (800c434 <OSPI_NOR_MspInit+0x284>)
 800c1dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c1e0:	67d3      	str	r3, [r2, #124]	; 0x7c
  OSPI_RELEASE_RESET();
 800c1e2:	4b94      	ldr	r3, [pc, #592]	; (800c434 <OSPI_NOR_MspInit+0x284>)
 800c1e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c1e6:	4a93      	ldr	r2, [pc, #588]	; (800c434 <OSPI_NOR_MspInit+0x284>)
 800c1e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c1ec:	67d3      	str	r3, [r2, #124]	; 0x7c

  /* Enable GPIO clocks */
  OSPI_CLK_GPIO_CLK_ENABLE();
 800c1ee:	4b91      	ldr	r3, [pc, #580]	; (800c434 <OSPI_NOR_MspInit+0x284>)
 800c1f0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800c1f4:	4a8f      	ldr	r2, [pc, #572]	; (800c434 <OSPI_NOR_MspInit+0x284>)
 800c1f6:	f043 0302 	orr.w	r3, r3, #2
 800c1fa:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800c1fe:	4b8d      	ldr	r3, [pc, #564]	; (800c434 <OSPI_NOR_MspInit+0x284>)
 800c200:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800c204:	f003 0302 	and.w	r3, r3, #2
 800c208:	637b      	str	r3, [r7, #52]	; 0x34
 800c20a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  OSPI_DQS_GPIO_CLK_ENABLE();
 800c20c:	4b89      	ldr	r3, [pc, #548]	; (800c434 <OSPI_NOR_MspInit+0x284>)
 800c20e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800c212:	4a88      	ldr	r2, [pc, #544]	; (800c434 <OSPI_NOR_MspInit+0x284>)
 800c214:	f043 0304 	orr.w	r3, r3, #4
 800c218:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800c21c:	4b85      	ldr	r3, [pc, #532]	; (800c434 <OSPI_NOR_MspInit+0x284>)
 800c21e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800c222:	f003 0304 	and.w	r3, r3, #4
 800c226:	633b      	str	r3, [r7, #48]	; 0x30
 800c228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  OSPI_CS_GPIO_CLK_ENABLE();
 800c22a:	4b82      	ldr	r3, [pc, #520]	; (800c434 <OSPI_NOR_MspInit+0x284>)
 800c22c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800c230:	4a80      	ldr	r2, [pc, #512]	; (800c434 <OSPI_NOR_MspInit+0x284>)
 800c232:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c236:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800c23a:	4b7e      	ldr	r3, [pc, #504]	; (800c434 <OSPI_NOR_MspInit+0x284>)
 800c23c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800c240:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c244:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  OSPI_D0_GPIO_CLK_ENABLE();
 800c248:	4b7a      	ldr	r3, [pc, #488]	; (800c434 <OSPI_NOR_MspInit+0x284>)
 800c24a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800c24e:	4a79      	ldr	r2, [pc, #484]	; (800c434 <OSPI_NOR_MspInit+0x284>)
 800c250:	f043 0308 	orr.w	r3, r3, #8
 800c254:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800c258:	4b76      	ldr	r3, [pc, #472]	; (800c434 <OSPI_NOR_MspInit+0x284>)
 800c25a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800c25e:	f003 0308 	and.w	r3, r3, #8
 800c262:	62bb      	str	r3, [r7, #40]	; 0x28
 800c264:	6abb      	ldr	r3, [r7, #40]	; 0x28
  OSPI_D1_GPIO_CLK_ENABLE();
 800c266:	4b73      	ldr	r3, [pc, #460]	; (800c434 <OSPI_NOR_MspInit+0x284>)
 800c268:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800c26c:	4a71      	ldr	r2, [pc, #452]	; (800c434 <OSPI_NOR_MspInit+0x284>)
 800c26e:	f043 0320 	orr.w	r3, r3, #32
 800c272:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800c276:	4b6f      	ldr	r3, [pc, #444]	; (800c434 <OSPI_NOR_MspInit+0x284>)
 800c278:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800c27c:	f003 0320 	and.w	r3, r3, #32
 800c280:	627b      	str	r3, [r7, #36]	; 0x24
 800c282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  OSPI_D2_GPIO_CLK_ENABLE();
 800c284:	4b6b      	ldr	r3, [pc, #428]	; (800c434 <OSPI_NOR_MspInit+0x284>)
 800c286:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800c28a:	4a6a      	ldr	r2, [pc, #424]	; (800c434 <OSPI_NOR_MspInit+0x284>)
 800c28c:	f043 0320 	orr.w	r3, r3, #32
 800c290:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800c294:	4b67      	ldr	r3, [pc, #412]	; (800c434 <OSPI_NOR_MspInit+0x284>)
 800c296:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800c29a:	f003 0320 	and.w	r3, r3, #32
 800c29e:	623b      	str	r3, [r7, #32]
 800c2a0:	6a3b      	ldr	r3, [r7, #32]
  OSPI_D3_GPIO_CLK_ENABLE();
 800c2a2:	4b64      	ldr	r3, [pc, #400]	; (800c434 <OSPI_NOR_MspInit+0x284>)
 800c2a4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800c2a8:	4a62      	ldr	r2, [pc, #392]	; (800c434 <OSPI_NOR_MspInit+0x284>)
 800c2aa:	f043 0320 	orr.w	r3, r3, #32
 800c2ae:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800c2b2:	4b60      	ldr	r3, [pc, #384]	; (800c434 <OSPI_NOR_MspInit+0x284>)
 800c2b4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800c2b8:	f003 0320 	and.w	r3, r3, #32
 800c2bc:	61fb      	str	r3, [r7, #28]
 800c2be:	69fb      	ldr	r3, [r7, #28]
  OSPI_D4_GPIO_CLK_ENABLE();
 800c2c0:	4b5c      	ldr	r3, [pc, #368]	; (800c434 <OSPI_NOR_MspInit+0x284>)
 800c2c2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800c2c6:	4a5b      	ldr	r2, [pc, #364]	; (800c434 <OSPI_NOR_MspInit+0x284>)
 800c2c8:	f043 0304 	orr.w	r3, r3, #4
 800c2cc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800c2d0:	4b58      	ldr	r3, [pc, #352]	; (800c434 <OSPI_NOR_MspInit+0x284>)
 800c2d2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800c2d6:	f003 0304 	and.w	r3, r3, #4
 800c2da:	61bb      	str	r3, [r7, #24]
 800c2dc:	69bb      	ldr	r3, [r7, #24]
  OSPI_D5_GPIO_CLK_ENABLE();
 800c2de:	4b55      	ldr	r3, [pc, #340]	; (800c434 <OSPI_NOR_MspInit+0x284>)
 800c2e0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800c2e4:	4a53      	ldr	r2, [pc, #332]	; (800c434 <OSPI_NOR_MspInit+0x284>)
 800c2e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c2ea:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800c2ee:	4b51      	ldr	r3, [pc, #324]	; (800c434 <OSPI_NOR_MspInit+0x284>)
 800c2f0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800c2f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c2f8:	617b      	str	r3, [r7, #20]
 800c2fa:	697b      	ldr	r3, [r7, #20]
  OSPI_D6_GPIO_CLK_ENABLE();
 800c2fc:	4b4d      	ldr	r3, [pc, #308]	; (800c434 <OSPI_NOR_MspInit+0x284>)
 800c2fe:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800c302:	4a4c      	ldr	r2, [pc, #304]	; (800c434 <OSPI_NOR_MspInit+0x284>)
 800c304:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c308:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800c30c:	4b49      	ldr	r3, [pc, #292]	; (800c434 <OSPI_NOR_MspInit+0x284>)
 800c30e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800c312:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c316:	613b      	str	r3, [r7, #16]
 800c318:	693b      	ldr	r3, [r7, #16]
  OSPI_D7_GPIO_CLK_ENABLE();
 800c31a:	4b46      	ldr	r3, [pc, #280]	; (800c434 <OSPI_NOR_MspInit+0x284>)
 800c31c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800c320:	4a44      	ldr	r2, [pc, #272]	; (800c434 <OSPI_NOR_MspInit+0x284>)
 800c322:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c326:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800c32a:	4b42      	ldr	r3, [pc, #264]	; (800c434 <OSPI_NOR_MspInit+0x284>)
 800c32c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800c330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c334:	60fb      	str	r3, [r7, #12]
 800c336:	68fb      	ldr	r3, [r7, #12]

  /* OctoSPI CS GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_CS_PIN;
 800c338:	2340      	movs	r3, #64	; 0x40
 800c33a:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 800c33c:	2302      	movs	r3, #2
 800c33e:	643b      	str	r3, [r7, #64]	; 0x40
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 800c340:	2301      	movs	r3, #1
 800c342:	647b      	str	r3, [r7, #68]	; 0x44
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800c344:	2303      	movs	r3, #3
 800c346:	64bb      	str	r3, [r7, #72]	; 0x48
  GPIO_InitStruct.Alternate = OSPI_CS_PIN_AF;
 800c348:	230a      	movs	r3, #10
 800c34a:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_CS_GPIO_PORT, &GPIO_InitStruct);
 800c34c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c350:	4619      	mov	r1, r3
 800c352:	4839      	ldr	r0, [pc, #228]	; (800c438 <OSPI_NOR_MspInit+0x288>)
 800c354:	f001 fb26 	bl	800d9a4 <HAL_GPIO_Init>

  /* OctoSPI DQS GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_DQS_PIN;
 800c358:	2320      	movs	r3, #32
 800c35a:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_DQS_PIN_AF;
 800c35c:	230a      	movs	r3, #10
 800c35e:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_DQS_GPIO_PORT, &GPIO_InitStruct);
 800c360:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c364:	4619      	mov	r1, r3
 800c366:	4835      	ldr	r0, [pc, #212]	; (800c43c <OSPI_NOR_MspInit+0x28c>)
 800c368:	f001 fb1c 	bl	800d9a4 <HAL_GPIO_Init>

  /* OctoSPI CLK GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_CLK_PIN;
 800c36c:	2304      	movs	r3, #4
 800c36e:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 800c370:	2300      	movs	r3, #0
 800c372:	647b      	str	r3, [r7, #68]	; 0x44
  GPIO_InitStruct.Alternate = OSPI_CLK_PIN_AF;
 800c374:	2309      	movs	r3, #9
 800c376:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_CLK_GPIO_PORT, &GPIO_InitStruct);
 800c378:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c37c:	4619      	mov	r1, r3
 800c37e:	4830      	ldr	r0, [pc, #192]	; (800c440 <OSPI_NOR_MspInit+0x290>)
 800c380:	f001 fb10 	bl	800d9a4 <HAL_GPIO_Init>

  /* OctoSPI D0 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D0_PIN;
 800c384:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c388:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D0_PIN_AF;
 800c38a:	2309      	movs	r3, #9
 800c38c:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D0_GPIO_PORT, &GPIO_InitStruct);
 800c38e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c392:	4619      	mov	r1, r3
 800c394:	482b      	ldr	r0, [pc, #172]	; (800c444 <OSPI_NOR_MspInit+0x294>)
 800c396:	f001 fb05 	bl	800d9a4 <HAL_GPIO_Init>

  /* OctoSPI D1 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D1_PIN;
 800c39a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c39e:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D1_PIN_AF;
 800c3a0:	230a      	movs	r3, #10
 800c3a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D1_GPIO_PORT, &GPIO_InitStruct);
 800c3a4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c3a8:	4619      	mov	r1, r3
 800c3aa:	4827      	ldr	r0, [pc, #156]	; (800c448 <OSPI_NOR_MspInit+0x298>)
 800c3ac:	f001 fafa 	bl	800d9a4 <HAL_GPIO_Init>

  /* OctoSPI D2 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D2_PIN;
 800c3b0:	2380      	movs	r3, #128	; 0x80
 800c3b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D2_PIN_AF;
 800c3b4:	230a      	movs	r3, #10
 800c3b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D2_GPIO_PORT, &GPIO_InitStruct);
 800c3b8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c3bc:	4619      	mov	r1, r3
 800c3be:	4822      	ldr	r0, [pc, #136]	; (800c448 <OSPI_NOR_MspInit+0x298>)
 800c3c0:	f001 faf0 	bl	800d9a4 <HAL_GPIO_Init>

  /* OctoSPI D3 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D3_PIN;
 800c3c4:	2340      	movs	r3, #64	; 0x40
 800c3c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D3_PIN_AF;
 800c3c8:	230a      	movs	r3, #10
 800c3ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D3_GPIO_PORT, &GPIO_InitStruct);
 800c3cc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c3d0:	4619      	mov	r1, r3
 800c3d2:	481d      	ldr	r0, [pc, #116]	; (800c448 <OSPI_NOR_MspInit+0x298>)
 800c3d4:	f001 fae6 	bl	800d9a4 <HAL_GPIO_Init>

  /* OctoSPI D4 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D4_PIN;
 800c3d8:	2302      	movs	r3, #2
 800c3da:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D4_PIN_AF;
 800c3dc:	230a      	movs	r3, #10
 800c3de:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D4_GPIO_PORT, &GPIO_InitStruct);
 800c3e0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c3e4:	4619      	mov	r1, r3
 800c3e6:	4815      	ldr	r0, [pc, #84]	; (800c43c <OSPI_NOR_MspInit+0x28c>)
 800c3e8:	f001 fadc 	bl	800d9a4 <HAL_GPIO_Init>

  /* OctoSPI D5 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D5_PIN;
 800c3ec:	2308      	movs	r3, #8
 800c3ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D5_PIN_AF;
 800c3f0:	2309      	movs	r3, #9
 800c3f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D5_GPIO_PORT, &GPIO_InitStruct);
 800c3f4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c3f8:	4619      	mov	r1, r3
 800c3fa:	4814      	ldr	r0, [pc, #80]	; (800c44c <OSPI_NOR_MspInit+0x29c>)
 800c3fc:	f001 fad2 	bl	800d9a4 <HAL_GPIO_Init>

  /* OctoSPI D6 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D6_PIN;
 800c400:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c404:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D6_PIN_AF;
 800c406:	2309      	movs	r3, #9
 800c408:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D6_GPIO_PORT, &GPIO_InitStruct);
 800c40a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c40e:	4619      	mov	r1, r3
 800c410:	4809      	ldr	r0, [pc, #36]	; (800c438 <OSPI_NOR_MspInit+0x288>)
 800c412:	f001 fac7 	bl	800d9a4 <HAL_GPIO_Init>

  /* OctoSPI D7 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D7_PIN;
 800c416:	2380      	movs	r3, #128	; 0x80
 800c418:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D7_PIN_AF;
 800c41a:	230a      	movs	r3, #10
 800c41c:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D7_GPIO_PORT, &GPIO_InitStruct);
 800c41e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c422:	4619      	mov	r1, r3
 800c424:	4807      	ldr	r0, [pc, #28]	; (800c444 <OSPI_NOR_MspInit+0x294>)
 800c426:	f001 fabd 	bl	800d9a4 <HAL_GPIO_Init>
}
 800c42a:	bf00      	nop
 800c42c:	3750      	adds	r7, #80	; 0x50
 800c42e:	46bd      	mov	sp, r7
 800c430:	bd80      	pop	{r7, pc}
 800c432:	bf00      	nop
 800c434:	58024400 	.word	0x58024400
 800c438:	58021800 	.word	0x58021800
 800c43c:	58020800 	.word	0x58020800
 800c440:	58020400 	.word	0x58020400
 800c444:	58020c00 	.word	0x58020c00
 800c448:	58021400 	.word	0x58021400
 800c44c:	58021c00 	.word	0x58021c00

0800c450 <OSPI_NOR_MspDeInit>:
  * @brief  De-Initializes the OSPI MSP.
  * @param  hospi OSPI handle
  * @retval None
  */
static void OSPI_NOR_MspDeInit(OSPI_HandleTypeDef *hospi)
{
 800c450:	b580      	push	{r7, lr}
 800c452:	b082      	sub	sp, #8
 800c454:	af00      	add	r7, sp, #0
 800c456:	6078      	str	r0, [r7, #4]
  /* hospi unused argument(s) compilation warning */
  UNUSED(hospi);

  /* OctoSPI GPIO pins de-configuration  */
  HAL_GPIO_DeInit(OSPI_CLK_GPIO_PORT, OSPI_CLK_PIN);
 800c458:	2104      	movs	r1, #4
 800c45a:	4823      	ldr	r0, [pc, #140]	; (800c4e8 <OSPI_NOR_MspDeInit+0x98>)
 800c45c:	f001 fc52 	bl	800dd04 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_DQS_GPIO_PORT, OSPI_DQS_PIN);
 800c460:	2120      	movs	r1, #32
 800c462:	4822      	ldr	r0, [pc, #136]	; (800c4ec <OSPI_NOR_MspDeInit+0x9c>)
 800c464:	f001 fc4e 	bl	800dd04 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_CS_GPIO_PORT, OSPI_CS_PIN);
 800c468:	2140      	movs	r1, #64	; 0x40
 800c46a:	4821      	ldr	r0, [pc, #132]	; (800c4f0 <OSPI_NOR_MspDeInit+0xa0>)
 800c46c:	f001 fc4a 	bl	800dd04 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D0_GPIO_PORT, OSPI_D0_PIN);
 800c470:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800c474:	481f      	ldr	r0, [pc, #124]	; (800c4f4 <OSPI_NOR_MspDeInit+0xa4>)
 800c476:	f001 fc45 	bl	800dd04 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D1_GPIO_PORT, OSPI_D1_PIN);
 800c47a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c47e:	481e      	ldr	r0, [pc, #120]	; (800c4f8 <OSPI_NOR_MspDeInit+0xa8>)
 800c480:	f001 fc40 	bl	800dd04 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D2_GPIO_PORT, OSPI_D2_PIN);
 800c484:	2180      	movs	r1, #128	; 0x80
 800c486:	481c      	ldr	r0, [pc, #112]	; (800c4f8 <OSPI_NOR_MspDeInit+0xa8>)
 800c488:	f001 fc3c 	bl	800dd04 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D3_GPIO_PORT, OSPI_D3_PIN);
 800c48c:	2140      	movs	r1, #64	; 0x40
 800c48e:	481a      	ldr	r0, [pc, #104]	; (800c4f8 <OSPI_NOR_MspDeInit+0xa8>)
 800c490:	f001 fc38 	bl	800dd04 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D4_GPIO_PORT, OSPI_D4_PIN);
 800c494:	2102      	movs	r1, #2
 800c496:	4815      	ldr	r0, [pc, #84]	; (800c4ec <OSPI_NOR_MspDeInit+0x9c>)
 800c498:	f001 fc34 	bl	800dd04 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D5_GPIO_PORT, OSPI_D5_PIN);
 800c49c:	2108      	movs	r1, #8
 800c49e:	4817      	ldr	r0, [pc, #92]	; (800c4fc <OSPI_NOR_MspDeInit+0xac>)
 800c4a0:	f001 fc30 	bl	800dd04 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D6_GPIO_PORT, OSPI_D6_PIN);
 800c4a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c4a8:	4811      	ldr	r0, [pc, #68]	; (800c4f0 <OSPI_NOR_MspDeInit+0xa0>)
 800c4aa:	f001 fc2b 	bl	800dd04 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D7_GPIO_PORT, OSPI_D7_PIN);
 800c4ae:	2180      	movs	r1, #128	; 0x80
 800c4b0:	4810      	ldr	r0, [pc, #64]	; (800c4f4 <OSPI_NOR_MspDeInit+0xa4>)
 800c4b2:	f001 fc27 	bl	800dd04 <HAL_GPIO_DeInit>

  /* Reset the OctoSPI memory interface */
  OSPI_FORCE_RESET();
 800c4b6:	4b12      	ldr	r3, [pc, #72]	; (800c500 <OSPI_NOR_MspDeInit+0xb0>)
 800c4b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c4ba:	4a11      	ldr	r2, [pc, #68]	; (800c500 <OSPI_NOR_MspDeInit+0xb0>)
 800c4bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c4c0:	67d3      	str	r3, [r2, #124]	; 0x7c
  OSPI_RELEASE_RESET();
 800c4c2:	4b0f      	ldr	r3, [pc, #60]	; (800c500 <OSPI_NOR_MspDeInit+0xb0>)
 800c4c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c4c6:	4a0e      	ldr	r2, [pc, #56]	; (800c500 <OSPI_NOR_MspDeInit+0xb0>)
 800c4c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c4cc:	67d3      	str	r3, [r2, #124]	; 0x7c

  /* Disable the OctoSPI memory interface clock */
  OSPI_CLK_DISABLE();
 800c4ce:	4b0c      	ldr	r3, [pc, #48]	; (800c500 <OSPI_NOR_MspDeInit+0xb0>)
 800c4d0:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800c4d4:	4a0a      	ldr	r2, [pc, #40]	; (800c500 <OSPI_NOR_MspDeInit+0xb0>)
 800c4d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c4da:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
}
 800c4de:	bf00      	nop
 800c4e0:	3708      	adds	r7, #8
 800c4e2:	46bd      	mov	sp, r7
 800c4e4:	bd80      	pop	{r7, pc}
 800c4e6:	bf00      	nop
 800c4e8:	58020400 	.word	0x58020400
 800c4ec:	58020800 	.word	0x58020800
 800c4f0:	58021800 	.word	0x58021800
 800c4f4:	58020c00 	.word	0x58020c00
 800c4f8:	58021400 	.word	0x58021400
 800c4fc:	58021c00 	.word	0x58021c00
 800c500:	58024400 	.word	0x58024400

0800c504 <OSPI_NOR_ResetMemory>:
  * @brief  This function reset the OSPI memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_ResetMemory (uint32_t Instance)
{
 800c504:	b580      	push	{r7, lr}
 800c506:	b084      	sub	sp, #16
 800c508:	af00      	add	r7, sp, #0
 800c50a:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800c50c:	2300      	movs	r3, #0
 800c50e:	60fb      	str	r3, [r7, #12]

  /* Enable write operations */
  if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	225c      	movs	r2, #92	; 0x5c
 800c514:	fb02 f303 	mul.w	r3, r2, r3
 800c518:	4a40      	ldr	r2, [pc, #256]	; (800c61c <OSPI_NOR_ResetMemory+0x118>)
 800c51a:	4413      	add	r3, r2
 800c51c:	2200      	movs	r2, #0
 800c51e:	2100      	movs	r1, #0
 800c520:	4618      	mov	r0, r3
 800c522:	f7fe ff18 	bl	800b356 <MX25LM51245G_ResetEnable>
 800c526:	4603      	mov	r3, r0
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d003      	beq.n	800c534 <OSPI_NOR_ResetMemory+0x30>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800c52c:	f06f 0304 	mvn.w	r3, #4
 800c530:	60fb      	str	r3, [r7, #12]
 800c532:	e06d      	b.n	800c610 <OSPI_NOR_ResetMemory+0x10c>
  }
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	225c      	movs	r2, #92	; 0x5c
 800c538:	fb02 f303 	mul.w	r3, r2, r3
 800c53c:	4a37      	ldr	r2, [pc, #220]	; (800c61c <OSPI_NOR_ResetMemory+0x118>)
 800c53e:	4413      	add	r3, r2
 800c540:	2200      	movs	r2, #0
 800c542:	2100      	movs	r1, #0
 800c544:	4618      	mov	r0, r3
 800c546:	f7fe ff5e 	bl	800b406 <MX25LM51245G_ResetMemory>
 800c54a:	4603      	mov	r3, r0
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d003      	beq.n	800c558 <OSPI_NOR_ResetMemory+0x54>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800c550:	f06f 0304 	mvn.w	r3, #4
 800c554:	60fb      	str	r3, [r7, #12]
 800c556:	e05b      	b.n	800c610 <OSPI_NOR_ResetMemory+0x10c>
  }
  else if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	225c      	movs	r2, #92	; 0x5c
 800c55c:	fb02 f303 	mul.w	r3, r2, r3
 800c560:	4a2e      	ldr	r2, [pc, #184]	; (800c61c <OSPI_NOR_ResetMemory+0x118>)
 800c562:	4413      	add	r3, r2
 800c564:	2200      	movs	r2, #0
 800c566:	2101      	movs	r1, #1
 800c568:	4618      	mov	r0, r3
 800c56a:	f7fe fef4 	bl	800b356 <MX25LM51245G_ResetEnable>
 800c56e:	4603      	mov	r3, r0
 800c570:	2b00      	cmp	r3, #0
 800c572:	d003      	beq.n	800c57c <OSPI_NOR_ResetMemory+0x78>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800c574:	f06f 0304 	mvn.w	r3, #4
 800c578:	60fb      	str	r3, [r7, #12]
 800c57a:	e049      	b.n	800c610 <OSPI_NOR_ResetMemory+0x10c>
  }
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	225c      	movs	r2, #92	; 0x5c
 800c580:	fb02 f303 	mul.w	r3, r2, r3
 800c584:	4a25      	ldr	r2, [pc, #148]	; (800c61c <OSPI_NOR_ResetMemory+0x118>)
 800c586:	4413      	add	r3, r2
 800c588:	2200      	movs	r2, #0
 800c58a:	2101      	movs	r1, #1
 800c58c:	4618      	mov	r0, r3
 800c58e:	f7fe ff3a 	bl	800b406 <MX25LM51245G_ResetMemory>
 800c592:	4603      	mov	r3, r0
 800c594:	2b00      	cmp	r3, #0
 800c596:	d003      	beq.n	800c5a0 <OSPI_NOR_ResetMemory+0x9c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800c598:	f06f 0304 	mvn.w	r3, #4
 800c59c:	60fb      	str	r3, [r7, #12]
 800c59e:	e037      	b.n	800c610 <OSPI_NOR_ResetMemory+0x10c>
  }
  else if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	225c      	movs	r2, #92	; 0x5c
 800c5a4:	fb02 f303 	mul.w	r3, r2, r3
 800c5a8:	4a1c      	ldr	r2, [pc, #112]	; (800c61c <OSPI_NOR_ResetMemory+0x118>)
 800c5aa:	4413      	add	r3, r2
 800c5ac:	2201      	movs	r2, #1
 800c5ae:	2101      	movs	r1, #1
 800c5b0:	4618      	mov	r0, r3
 800c5b2:	f7fe fed0 	bl	800b356 <MX25LM51245G_ResetEnable>
 800c5b6:	4603      	mov	r3, r0
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d003      	beq.n	800c5c4 <OSPI_NOR_ResetMemory+0xc0>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800c5bc:	f06f 0304 	mvn.w	r3, #4
 800c5c0:	60fb      	str	r3, [r7, #12]
 800c5c2:	e025      	b.n	800c610 <OSPI_NOR_ResetMemory+0x10c>
  }
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	225c      	movs	r2, #92	; 0x5c
 800c5c8:	fb02 f303 	mul.w	r3, r2, r3
 800c5cc:	4a13      	ldr	r2, [pc, #76]	; (800c61c <OSPI_NOR_ResetMemory+0x118>)
 800c5ce:	4413      	add	r3, r2
 800c5d0:	2201      	movs	r2, #1
 800c5d2:	2101      	movs	r1, #1
 800c5d4:	4618      	mov	r0, r3
 800c5d6:	f7fe ff16 	bl	800b406 <MX25LM51245G_ResetMemory>
 800c5da:	4603      	mov	r3, r0
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d003      	beq.n	800c5e8 <OSPI_NOR_ResetMemory+0xe4>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800c5e0:	f06f 0304 	mvn.w	r3, #4
 800c5e4:	60fb      	str	r3, [r7, #12]
 800c5e6:	e013      	b.n	800c610 <OSPI_NOR_ResetMemory+0x10c>
  }
  else
  {
    Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;      /* After reset S/W setting to indirect access   */
 800c5e8:	4a0d      	ldr	r2, [pc, #52]	; (800c620 <OSPI_NOR_ResetMemory+0x11c>)
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	2101      	movs	r1, #1
 800c5ee:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
    Ospi_Nor_Ctx[Instance].InterfaceMode = BSP_OSPI_NOR_SPI_MODE;         /* After reset H/W back to SPI mode by default  */
 800c5f2:	4a0b      	ldr	r2, [pc, #44]	; (800c620 <OSPI_NOR_ResetMemory+0x11c>)
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	00db      	lsls	r3, r3, #3
 800c5f8:	4413      	add	r3, r2
 800c5fa:	2200      	movs	r2, #0
 800c5fc:	705a      	strb	r2, [r3, #1]
    Ospi_Nor_Ctx[Instance].TransferRate  = BSP_OSPI_NOR_STR_TRANSFER;     /* After reset S/W setting to STR mode          */
 800c5fe:	4a08      	ldr	r2, [pc, #32]	; (800c620 <OSPI_NOR_ResetMemory+0x11c>)
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	00db      	lsls	r3, r3, #3
 800c604:	4413      	add	r3, r2
 800c606:	2200      	movs	r2, #0
 800c608:	709a      	strb	r2, [r3, #2]

    /* After SWreset CMD, wait in case SWReset occurred during erase operation */
    HAL_Delay(MX25LM51245G_RESET_MAX_TIME);
 800c60a:	2064      	movs	r0, #100	; 0x64
 800c60c:	f000 fd04 	bl	800d018 <HAL_Delay>
  }

  /* Return BSP status */
  return ret;
 800c610:	68fb      	ldr	r3, [r7, #12]
}
 800c612:	4618      	mov	r0, r3
 800c614:	3710      	adds	r7, #16
 800c616:	46bd      	mov	sp, r7
 800c618:	bd80      	pop	{r7, pc}
 800c61a:	bf00      	nop
 800c61c:	2400bd44 	.word	0x2400bd44
 800c620:	2400bda0 	.word	0x2400bda0

0800c624 <OSPI_NOR_EnterDOPIMode>:
  * @brief  This function enables the octal DTR mode of the memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_EnterDOPIMode(uint32_t Instance)
{
 800c624:	b580      	push	{r7, lr}
 800c626:	b086      	sub	sp, #24
 800c628:	af02      	add	r7, sp, #8
 800c62a:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800c62c:	2300      	movs	r3, #0
 800c62e:	60fb      	str	r3, [r7, #12]
  uint8_t reg[2];

  /* Enable write operations */
  if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	225c      	movs	r2, #92	; 0x5c
 800c634:	fb02 f303 	mul.w	r3, r2, r3
 800c638:	4a60      	ldr	r2, [pc, #384]	; (800c7bc <OSPI_NOR_EnterDOPIMode+0x198>)
 800c63a:	1898      	adds	r0, r3, r2
 800c63c:	4a60      	ldr	r2, [pc, #384]	; (800c7c0 <OSPI_NOR_EnterDOPIMode+0x19c>)
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	00db      	lsls	r3, r3, #3
 800c642:	4413      	add	r3, r2
 800c644:	7859      	ldrb	r1, [r3, #1]
 800c646:	4a5e      	ldr	r2, [pc, #376]	; (800c7c0 <OSPI_NOR_EnterDOPIMode+0x19c>)
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	00db      	lsls	r3, r3, #3
 800c64c:	4413      	add	r3, r2
 800c64e:	789b      	ldrb	r3, [r3, #2]
 800c650:	461a      	mov	r2, r3
 800c652:	f7fe fc86 	bl	800af62 <MX25LM51245G_WriteEnable>
 800c656:	4603      	mov	r3, r0
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d003      	beq.n	800c664 <OSPI_NOR_EnterDOPIMode+0x40>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800c65c:	f06f 0304 	mvn.w	r3, #4
 800c660:	60fb      	str	r3, [r7, #12]
 800c662:	e0a6      	b.n	800c7b2 <OSPI_NOR_EnterDOPIMode+0x18e>
  }
  /* Write Configuration register 2 (with new dummy cycles) */
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG3_ADDR, MX25LM51245G_CR2_DC_6_CYCLES) != MX25LM51245G_OK)
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	225c      	movs	r2, #92	; 0x5c
 800c668:	fb02 f303 	mul.w	r3, r2, r3
 800c66c:	4a53      	ldr	r2, [pc, #332]	; (800c7bc <OSPI_NOR_EnterDOPIMode+0x198>)
 800c66e:	1898      	adds	r0, r3, r2
 800c670:	4a53      	ldr	r2, [pc, #332]	; (800c7c0 <OSPI_NOR_EnterDOPIMode+0x19c>)
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	00db      	lsls	r3, r3, #3
 800c676:	4413      	add	r3, r2
 800c678:	7859      	ldrb	r1, [r3, #1]
 800c67a:	4a51      	ldr	r2, [pc, #324]	; (800c7c0 <OSPI_NOR_EnterDOPIMode+0x19c>)
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	00db      	lsls	r3, r3, #3
 800c680:	4413      	add	r3, r2
 800c682:	789a      	ldrb	r2, [r3, #2]
 800c684:	2307      	movs	r3, #7
 800c686:	9300      	str	r3, [sp, #0]
 800c688:	f44f 7340 	mov.w	r3, #768	; 0x300
 800c68c:	f7fe fd34 	bl	800b0f8 <MX25LM51245G_WriteCfg2Register>
 800c690:	4603      	mov	r3, r0
 800c692:	2b00      	cmp	r3, #0
 800c694:	d003      	beq.n	800c69e <OSPI_NOR_EnterDOPIMode+0x7a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800c696:	f06f 0304 	mvn.w	r3, #4
 800c69a:	60fb      	str	r3, [r7, #12]
 800c69c:	e089      	b.n	800c7b2 <OSPI_NOR_EnterDOPIMode+0x18e>
  }
  /* Enable write operations */
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	225c      	movs	r2, #92	; 0x5c
 800c6a2:	fb02 f303 	mul.w	r3, r2, r3
 800c6a6:	4a45      	ldr	r2, [pc, #276]	; (800c7bc <OSPI_NOR_EnterDOPIMode+0x198>)
 800c6a8:	1898      	adds	r0, r3, r2
 800c6aa:	4a45      	ldr	r2, [pc, #276]	; (800c7c0 <OSPI_NOR_EnterDOPIMode+0x19c>)
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	00db      	lsls	r3, r3, #3
 800c6b0:	4413      	add	r3, r2
 800c6b2:	7859      	ldrb	r1, [r3, #1]
 800c6b4:	4a42      	ldr	r2, [pc, #264]	; (800c7c0 <OSPI_NOR_EnterDOPIMode+0x19c>)
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	00db      	lsls	r3, r3, #3
 800c6ba:	4413      	add	r3, r2
 800c6bc:	789b      	ldrb	r3, [r3, #2]
 800c6be:	461a      	mov	r2, r3
 800c6c0:	f7fe fc4f 	bl	800af62 <MX25LM51245G_WriteEnable>
 800c6c4:	4603      	mov	r3, r0
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d003      	beq.n	800c6d2 <OSPI_NOR_EnterDOPIMode+0xae>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800c6ca:	f06f 0304 	mvn.w	r3, #4
 800c6ce:	60fb      	str	r3, [r7, #12]
 800c6d0:	e06f      	b.n	800c7b2 <OSPI_NOR_EnterDOPIMode+0x18e>
  }
  /* Write Configuration register 2 (with Octal I/O SPI protocol) */
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, MX25LM51245G_CR2_DOPI) != MX25LM51245G_OK)
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	225c      	movs	r2, #92	; 0x5c
 800c6d6:	fb02 f303 	mul.w	r3, r2, r3
 800c6da:	4a38      	ldr	r2, [pc, #224]	; (800c7bc <OSPI_NOR_EnterDOPIMode+0x198>)
 800c6dc:	1898      	adds	r0, r3, r2
 800c6de:	4a38      	ldr	r2, [pc, #224]	; (800c7c0 <OSPI_NOR_EnterDOPIMode+0x19c>)
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	00db      	lsls	r3, r3, #3
 800c6e4:	4413      	add	r3, r2
 800c6e6:	7859      	ldrb	r1, [r3, #1]
 800c6e8:	4a35      	ldr	r2, [pc, #212]	; (800c7c0 <OSPI_NOR_EnterDOPIMode+0x19c>)
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	00db      	lsls	r3, r3, #3
 800c6ee:	4413      	add	r3, r2
 800c6f0:	789a      	ldrb	r2, [r3, #2]
 800c6f2:	2302      	movs	r3, #2
 800c6f4:	9300      	str	r3, [sp, #0]
 800c6f6:	2300      	movs	r3, #0
 800c6f8:	f7fe fcfe 	bl	800b0f8 <MX25LM51245G_WriteCfg2Register>
 800c6fc:	4603      	mov	r3, r0
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d003      	beq.n	800c70a <OSPI_NOR_EnterDOPIMode+0xe6>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800c702:	f06f 0304 	mvn.w	r3, #4
 800c706:	60fb      	str	r3, [r7, #12]
 800c708:	e053      	b.n	800c7b2 <OSPI_NOR_EnterDOPIMode+0x18e>
  }
  else
  {
    /* Wait that the configuration is effective and check that memory is ready */
    HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 800c70a:	2028      	movs	r0, #40	; 0x28
 800c70c:	f000 fc84 	bl	800d018 <HAL_Delay>

    /* Reconfigure the memory type of the peripheral */
    hospi_nor[Instance].Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 800c710:	4a2a      	ldr	r2, [pc, #168]	; (800c7bc <OSPI_NOR_EnterDOPIMode+0x198>)
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	215c      	movs	r1, #92	; 0x5c
 800c716:	fb01 f303 	mul.w	r3, r1, r3
 800c71a:	4413      	add	r3, r2
 800c71c:	330c      	adds	r3, #12
 800c71e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c722:	601a      	str	r2, [r3, #0]
    hospi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 800c724:	4a25      	ldr	r2, [pc, #148]	; (800c7bc <OSPI_NOR_EnterDOPIMode+0x198>)
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	215c      	movs	r1, #92	; 0x5c
 800c72a:	fb01 f303 	mul.w	r3, r1, r3
 800c72e:	4413      	add	r3, r2
 800c730:	332c      	adds	r3, #44	; 0x2c
 800c732:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c736:	601a      	str	r2, [r3, #0]
    if (HAL_OSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	225c      	movs	r2, #92	; 0x5c
 800c73c:	fb02 f303 	mul.w	r3, r2, r3
 800c740:	4a1e      	ldr	r2, [pc, #120]	; (800c7bc <OSPI_NOR_EnterDOPIMode+0x198>)
 800c742:	4413      	add	r3, r2
 800c744:	4618      	mov	r0, r3
 800c746:	f005 f9b5 	bl	8011ab4 <HAL_OSPI_Init>
 800c74a:	4603      	mov	r3, r0
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d003      	beq.n	800c758 <OSPI_NOR_EnterDOPIMode+0x134>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800c750:	f06f 0303 	mvn.w	r3, #3
 800c754:	60fb      	str	r3, [r7, #12]
 800c756:	e02c      	b.n	800c7b2 <OSPI_NOR_EnterDOPIMode+0x18e>
    }
    /* Check Flash busy ? */
    else if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	225c      	movs	r2, #92	; 0x5c
 800c75c:	fb02 f303 	mul.w	r3, r2, r3
 800c760:	4a16      	ldr	r2, [pc, #88]	; (800c7bc <OSPI_NOR_EnterDOPIMode+0x198>)
 800c762:	4413      	add	r3, r2
 800c764:	2201      	movs	r2, #1
 800c766:	2101      	movs	r1, #1
 800c768:	4618      	mov	r0, r3
 800c76a:	f7fe fa34 	bl	800abd6 <MX25LM51245G_AutoPollingMemReady>
 800c76e:	4603      	mov	r3, r0
 800c770:	2b00      	cmp	r3, #0
 800c772:	d003      	beq.n	800c77c <OSPI_NOR_EnterDOPIMode+0x158>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800c774:	f06f 0304 	mvn.w	r3, #4
 800c778:	60fb      	str	r3, [r7, #12]
 800c77a:	e01a      	b.n	800c7b2 <OSPI_NOR_EnterDOPIMode+0x18e>
    }
    /* Check the configuration has been correctly done */
    else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	225c      	movs	r2, #92	; 0x5c
 800c780:	fb02 f303 	mul.w	r3, r2, r3
 800c784:	4a0d      	ldr	r2, [pc, #52]	; (800c7bc <OSPI_NOR_EnterDOPIMode+0x198>)
 800c786:	1898      	adds	r0, r3, r2
 800c788:	f107 0308 	add.w	r3, r7, #8
 800c78c:	9300      	str	r3, [sp, #0]
 800c78e:	2300      	movs	r3, #0
 800c790:	2201      	movs	r2, #1
 800c792:	2101      	movs	r1, #1
 800c794:	f7fe fd45 	bl	800b222 <MX25LM51245G_ReadCfg2Register>
 800c798:	4603      	mov	r3, r0
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d003      	beq.n	800c7a6 <OSPI_NOR_EnterDOPIMode+0x182>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800c79e:	f06f 0304 	mvn.w	r3, #4
 800c7a2:	60fb      	str	r3, [r7, #12]
 800c7a4:	e005      	b.n	800c7b2 <OSPI_NOR_EnterDOPIMode+0x18e>
    }
    else
    {
      if (reg[0] != MX25LM51245G_CR2_DOPI)
 800c7a6:	7a3b      	ldrb	r3, [r7, #8]
 800c7a8:	2b02      	cmp	r3, #2
 800c7aa:	d002      	beq.n	800c7b2 <OSPI_NOR_EnterDOPIMode+0x18e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800c7ac:	f06f 0304 	mvn.w	r3, #4
 800c7b0:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Return BSP status */
  return ret;
 800c7b2:	68fb      	ldr	r3, [r7, #12]
}
 800c7b4:	4618      	mov	r0, r3
 800c7b6:	3710      	adds	r7, #16
 800c7b8:	46bd      	mov	sp, r7
 800c7ba:	bd80      	pop	{r7, pc}
 800c7bc:	2400bd44 	.word	0x2400bd44
 800c7c0:	2400bda0 	.word	0x2400bda0

0800c7c4 <OSPI_NOR_EnterSOPIMode>:
  * @brief  This function enables the octal STR mode of the memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_EnterSOPIMode(uint32_t Instance)
{
 800c7c4:	b580      	push	{r7, lr}
 800c7c6:	b086      	sub	sp, #24
 800c7c8:	af02      	add	r7, sp, #8
 800c7ca:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	60fb      	str	r3, [r7, #12]
  uint8_t reg[2];

  /* Enable write operations */
  if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	225c      	movs	r2, #92	; 0x5c
 800c7d4:	fb02 f303 	mul.w	r3, r2, r3
 800c7d8:	4a4e      	ldr	r2, [pc, #312]	; (800c914 <OSPI_NOR_EnterSOPIMode+0x150>)
 800c7da:	1898      	adds	r0, r3, r2
 800c7dc:	4a4e      	ldr	r2, [pc, #312]	; (800c918 <OSPI_NOR_EnterSOPIMode+0x154>)
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	00db      	lsls	r3, r3, #3
 800c7e2:	4413      	add	r3, r2
 800c7e4:	7859      	ldrb	r1, [r3, #1]
 800c7e6:	4a4c      	ldr	r2, [pc, #304]	; (800c918 <OSPI_NOR_EnterSOPIMode+0x154>)
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	00db      	lsls	r3, r3, #3
 800c7ec:	4413      	add	r3, r2
 800c7ee:	789b      	ldrb	r3, [r3, #2]
 800c7f0:	461a      	mov	r2, r3
 800c7f2:	f7fe fbb6 	bl	800af62 <MX25LM51245G_WriteEnable>
 800c7f6:	4603      	mov	r3, r0
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d003      	beq.n	800c804 <OSPI_NOR_EnterSOPIMode+0x40>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800c7fc:	f06f 0304 	mvn.w	r3, #4
 800c800:	60fb      	str	r3, [r7, #12]
 800c802:	e082      	b.n	800c90a <OSPI_NOR_EnterSOPIMode+0x146>
  }
  /* Write Configuration register 2 (with new dummy cycles) */
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG3_ADDR, MX25LM51245G_CR2_DC_6_CYCLES) != MX25LM51245G_OK)
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	225c      	movs	r2, #92	; 0x5c
 800c808:	fb02 f303 	mul.w	r3, r2, r3
 800c80c:	4a41      	ldr	r2, [pc, #260]	; (800c914 <OSPI_NOR_EnterSOPIMode+0x150>)
 800c80e:	1898      	adds	r0, r3, r2
 800c810:	4a41      	ldr	r2, [pc, #260]	; (800c918 <OSPI_NOR_EnterSOPIMode+0x154>)
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	00db      	lsls	r3, r3, #3
 800c816:	4413      	add	r3, r2
 800c818:	7859      	ldrb	r1, [r3, #1]
 800c81a:	4a3f      	ldr	r2, [pc, #252]	; (800c918 <OSPI_NOR_EnterSOPIMode+0x154>)
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	00db      	lsls	r3, r3, #3
 800c820:	4413      	add	r3, r2
 800c822:	789a      	ldrb	r2, [r3, #2]
 800c824:	2307      	movs	r3, #7
 800c826:	9300      	str	r3, [sp, #0]
 800c828:	f44f 7340 	mov.w	r3, #768	; 0x300
 800c82c:	f7fe fc64 	bl	800b0f8 <MX25LM51245G_WriteCfg2Register>
 800c830:	4603      	mov	r3, r0
 800c832:	2b00      	cmp	r3, #0
 800c834:	d003      	beq.n	800c83e <OSPI_NOR_EnterSOPIMode+0x7a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800c836:	f06f 0304 	mvn.w	r3, #4
 800c83a:	60fb      	str	r3, [r7, #12]
 800c83c:	e065      	b.n	800c90a <OSPI_NOR_EnterSOPIMode+0x146>
  }
  /* Enable write operations */
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	225c      	movs	r2, #92	; 0x5c
 800c842:	fb02 f303 	mul.w	r3, r2, r3
 800c846:	4a33      	ldr	r2, [pc, #204]	; (800c914 <OSPI_NOR_EnterSOPIMode+0x150>)
 800c848:	1898      	adds	r0, r3, r2
 800c84a:	4a33      	ldr	r2, [pc, #204]	; (800c918 <OSPI_NOR_EnterSOPIMode+0x154>)
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	00db      	lsls	r3, r3, #3
 800c850:	4413      	add	r3, r2
 800c852:	7859      	ldrb	r1, [r3, #1]
 800c854:	4a30      	ldr	r2, [pc, #192]	; (800c918 <OSPI_NOR_EnterSOPIMode+0x154>)
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	00db      	lsls	r3, r3, #3
 800c85a:	4413      	add	r3, r2
 800c85c:	789b      	ldrb	r3, [r3, #2]
 800c85e:	461a      	mov	r2, r3
 800c860:	f7fe fb7f 	bl	800af62 <MX25LM51245G_WriteEnable>
 800c864:	4603      	mov	r3, r0
 800c866:	2b00      	cmp	r3, #0
 800c868:	d003      	beq.n	800c872 <OSPI_NOR_EnterSOPIMode+0xae>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800c86a:	f06f 0304 	mvn.w	r3, #4
 800c86e:	60fb      	str	r3, [r7, #12]
 800c870:	e04b      	b.n	800c90a <OSPI_NOR_EnterSOPIMode+0x146>
  }
  /* Write Configuration register 2 (with Octal I/O SPI protocol) */
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, MX25LM51245G_CR2_SOPI) != MX25LM51245G_OK)
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	225c      	movs	r2, #92	; 0x5c
 800c876:	fb02 f303 	mul.w	r3, r2, r3
 800c87a:	4a26      	ldr	r2, [pc, #152]	; (800c914 <OSPI_NOR_EnterSOPIMode+0x150>)
 800c87c:	1898      	adds	r0, r3, r2
 800c87e:	4a26      	ldr	r2, [pc, #152]	; (800c918 <OSPI_NOR_EnterSOPIMode+0x154>)
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	00db      	lsls	r3, r3, #3
 800c884:	4413      	add	r3, r2
 800c886:	7859      	ldrb	r1, [r3, #1]
 800c888:	4a23      	ldr	r2, [pc, #140]	; (800c918 <OSPI_NOR_EnterSOPIMode+0x154>)
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	00db      	lsls	r3, r3, #3
 800c88e:	4413      	add	r3, r2
 800c890:	789a      	ldrb	r2, [r3, #2]
 800c892:	2301      	movs	r3, #1
 800c894:	9300      	str	r3, [sp, #0]
 800c896:	2300      	movs	r3, #0
 800c898:	f7fe fc2e 	bl	800b0f8 <MX25LM51245G_WriteCfg2Register>
 800c89c:	4603      	mov	r3, r0
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d003      	beq.n	800c8aa <OSPI_NOR_EnterSOPIMode+0xe6>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800c8a2:	f06f 0304 	mvn.w	r3, #4
 800c8a6:	60fb      	str	r3, [r7, #12]
 800c8a8:	e02f      	b.n	800c90a <OSPI_NOR_EnterSOPIMode+0x146>
  }
  else
  {
    /* Wait that the configuration is effective and check that memory is ready */
    HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 800c8aa:	2028      	movs	r0, #40	; 0x28
 800c8ac:	f000 fbb4 	bl	800d018 <HAL_Delay>

    /* Check Flash busy ? */
    if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	225c      	movs	r2, #92	; 0x5c
 800c8b4:	fb02 f303 	mul.w	r3, r2, r3
 800c8b8:	4a16      	ldr	r2, [pc, #88]	; (800c914 <OSPI_NOR_EnterSOPIMode+0x150>)
 800c8ba:	4413      	add	r3, r2
 800c8bc:	2200      	movs	r2, #0
 800c8be:	2101      	movs	r1, #1
 800c8c0:	4618      	mov	r0, r3
 800c8c2:	f7fe f988 	bl	800abd6 <MX25LM51245G_AutoPollingMemReady>
 800c8c6:	4603      	mov	r3, r0
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d003      	beq.n	800c8d4 <OSPI_NOR_EnterSOPIMode+0x110>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800c8cc:	f06f 0304 	mvn.w	r3, #4
 800c8d0:	60fb      	str	r3, [r7, #12]
 800c8d2:	e01a      	b.n	800c90a <OSPI_NOR_EnterSOPIMode+0x146>
    }
    /* Check the configuration has been correctly done */
    else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	225c      	movs	r2, #92	; 0x5c
 800c8d8:	fb02 f303 	mul.w	r3, r2, r3
 800c8dc:	4a0d      	ldr	r2, [pc, #52]	; (800c914 <OSPI_NOR_EnterSOPIMode+0x150>)
 800c8de:	1898      	adds	r0, r3, r2
 800c8e0:	f107 0308 	add.w	r3, r7, #8
 800c8e4:	9300      	str	r3, [sp, #0]
 800c8e6:	2300      	movs	r3, #0
 800c8e8:	2200      	movs	r2, #0
 800c8ea:	2101      	movs	r1, #1
 800c8ec:	f7fe fc99 	bl	800b222 <MX25LM51245G_ReadCfg2Register>
 800c8f0:	4603      	mov	r3, r0
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d003      	beq.n	800c8fe <OSPI_NOR_EnterSOPIMode+0x13a>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800c8f6:	f06f 0304 	mvn.w	r3, #4
 800c8fa:	60fb      	str	r3, [r7, #12]
 800c8fc:	e005      	b.n	800c90a <OSPI_NOR_EnterSOPIMode+0x146>
    }
    else
    {
      if (reg[0] != MX25LM51245G_CR2_SOPI)
 800c8fe:	7a3b      	ldrb	r3, [r7, #8]
 800c900:	2b01      	cmp	r3, #1
 800c902:	d002      	beq.n	800c90a <OSPI_NOR_EnterSOPIMode+0x146>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800c904:	f06f 0304 	mvn.w	r3, #4
 800c908:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Return BSP status */
  return ret;
 800c90a:	68fb      	ldr	r3, [r7, #12]
}
 800c90c:	4618      	mov	r0, r3
 800c90e:	3710      	adds	r7, #16
 800c910:	46bd      	mov	sp, r7
 800c912:	bd80      	pop	{r7, pc}
 800c914:	2400bd44 	.word	0x2400bd44
 800c918:	2400bda0 	.word	0x2400bda0

0800c91c <OSPI_NOR_ExitOPIMode>:
  * @brief  This function disables the octal DTR or STR mode of the memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_ExitOPIMode (uint32_t Instance)
{
 800c91c:	b580      	push	{r7, lr}
 800c91e:	b086      	sub	sp, #24
 800c920:	af02      	add	r7, sp, #8
 800c922:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800c924:	2300      	movs	r3, #0
 800c926:	60fb      	str	r3, [r7, #12]
  uint8_t reg[2];

  /* Enable write operations */
  if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	225c      	movs	r2, #92	; 0x5c
 800c92c:	fb02 f303 	mul.w	r3, r2, r3
 800c930:	4a49      	ldr	r2, [pc, #292]	; (800ca58 <OSPI_NOR_ExitOPIMode+0x13c>)
 800c932:	1898      	adds	r0, r3, r2
 800c934:	4a49      	ldr	r2, [pc, #292]	; (800ca5c <OSPI_NOR_ExitOPIMode+0x140>)
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	00db      	lsls	r3, r3, #3
 800c93a:	4413      	add	r3, r2
 800c93c:	7859      	ldrb	r1, [r3, #1]
 800c93e:	4a47      	ldr	r2, [pc, #284]	; (800ca5c <OSPI_NOR_ExitOPIMode+0x140>)
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	00db      	lsls	r3, r3, #3
 800c944:	4413      	add	r3, r2
 800c946:	789b      	ldrb	r3, [r3, #2]
 800c948:	461a      	mov	r2, r3
 800c94a:	f7fe fb0a 	bl	800af62 <MX25LM51245G_WriteEnable>
 800c94e:	4603      	mov	r3, r0
 800c950:	2b00      	cmp	r3, #0
 800c952:	d003      	beq.n	800c95c <OSPI_NOR_ExitOPIMode+0x40>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800c954:	f06f 0304 	mvn.w	r3, #4
 800c958:	60fb      	str	r3, [r7, #12]
 800c95a:	e077      	b.n	800ca4c <OSPI_NOR_ExitOPIMode+0x130>
  }
  else
  {
    /* Write Configuration register 2 (with SPI protocol) */
    reg[0] = 0;
 800c95c:	2300      	movs	r3, #0
 800c95e:	723b      	strb	r3, [r7, #8]
    reg[1] = 0;
 800c960:	2300      	movs	r3, #0
 800c962:	727b      	strb	r3, [r7, #9]
    if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, reg[0]) != MX25LM51245G_OK)
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	225c      	movs	r2, #92	; 0x5c
 800c968:	fb02 f303 	mul.w	r3, r2, r3
 800c96c:	4a3a      	ldr	r2, [pc, #232]	; (800ca58 <OSPI_NOR_ExitOPIMode+0x13c>)
 800c96e:	1898      	adds	r0, r3, r2
 800c970:	4a3a      	ldr	r2, [pc, #232]	; (800ca5c <OSPI_NOR_ExitOPIMode+0x140>)
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	00db      	lsls	r3, r3, #3
 800c976:	4413      	add	r3, r2
 800c978:	7859      	ldrb	r1, [r3, #1]
 800c97a:	4a38      	ldr	r2, [pc, #224]	; (800ca5c <OSPI_NOR_ExitOPIMode+0x140>)
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	00db      	lsls	r3, r3, #3
 800c980:	4413      	add	r3, r2
 800c982:	789a      	ldrb	r2, [r3, #2]
 800c984:	7a3b      	ldrb	r3, [r7, #8]
 800c986:	9300      	str	r3, [sp, #0]
 800c988:	2300      	movs	r3, #0
 800c98a:	f7fe fbb5 	bl	800b0f8 <MX25LM51245G_WriteCfg2Register>
 800c98e:	4603      	mov	r3, r0
 800c990:	2b00      	cmp	r3, #0
 800c992:	d003      	beq.n	800c99c <OSPI_NOR_ExitOPIMode+0x80>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800c994:	f06f 0304 	mvn.w	r3, #4
 800c998:	60fb      	str	r3, [r7, #12]
 800c99a:	e057      	b.n	800ca4c <OSPI_NOR_ExitOPIMode+0x130>
    }
    else
    {
      /* Wait that the configuration is effective and check that memory is ready */
      HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 800c99c:	2028      	movs	r0, #40	; 0x28
 800c99e:	f000 fb3b 	bl	800d018 <HAL_Delay>

      if (Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_DTR_TRANSFER)
 800c9a2:	4a2e      	ldr	r2, [pc, #184]	; (800ca5c <OSPI_NOR_ExitOPIMode+0x140>)
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	00db      	lsls	r3, r3, #3
 800c9a8:	4413      	add	r3, r2
 800c9aa:	789b      	ldrb	r3, [r3, #2]
 800c9ac:	2b01      	cmp	r3, #1
 800c9ae:	d120      	bne.n	800c9f2 <OSPI_NOR_ExitOPIMode+0xd6>
      {
        /* Reconfigure the memory type of the peripheral */
        hospi_nor[Instance].Init.MemoryType            = HAL_OSPI_MEMTYPE_MICRON;
 800c9b0:	4a29      	ldr	r2, [pc, #164]	; (800ca58 <OSPI_NOR_ExitOPIMode+0x13c>)
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	215c      	movs	r1, #92	; 0x5c
 800c9b6:	fb01 f303 	mul.w	r3, r1, r3
 800c9ba:	4413      	add	r3, r2
 800c9bc:	330c      	adds	r3, #12
 800c9be:	2200      	movs	r2, #0
 800c9c0:	601a      	str	r2, [r3, #0]
        hospi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 800c9c2:	4a25      	ldr	r2, [pc, #148]	; (800ca58 <OSPI_NOR_ExitOPIMode+0x13c>)
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	215c      	movs	r1, #92	; 0x5c
 800c9c8:	fb01 f303 	mul.w	r3, r1, r3
 800c9cc:	4413      	add	r3, r2
 800c9ce:	332c      	adds	r3, #44	; 0x2c
 800c9d0:	2200      	movs	r2, #0
 800c9d2:	601a      	str	r2, [r3, #0]
        if (HAL_OSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	225c      	movs	r2, #92	; 0x5c
 800c9d8:	fb02 f303 	mul.w	r3, r2, r3
 800c9dc:	4a1e      	ldr	r2, [pc, #120]	; (800ca58 <OSPI_NOR_ExitOPIMode+0x13c>)
 800c9de:	4413      	add	r3, r2
 800c9e0:	4618      	mov	r0, r3
 800c9e2:	f005 f867 	bl	8011ab4 <HAL_OSPI_Init>
 800c9e6:	4603      	mov	r3, r0
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d002      	beq.n	800c9f2 <OSPI_NOR_ExitOPIMode+0xd6>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 800c9ec:	f06f 0303 	mvn.w	r3, #3
 800c9f0:	60fb      	str	r3, [r7, #12]
        }
      }

      /* Check Flash busy ? */
      if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	225c      	movs	r2, #92	; 0x5c
 800c9f6:	fb02 f303 	mul.w	r3, r2, r3
 800c9fa:	4a17      	ldr	r2, [pc, #92]	; (800ca58 <OSPI_NOR_ExitOPIMode+0x13c>)
 800c9fc:	4413      	add	r3, r2
 800c9fe:	2200      	movs	r2, #0
 800ca00:	2100      	movs	r1, #0
 800ca02:	4618      	mov	r0, r3
 800ca04:	f7fe f8e7 	bl	800abd6 <MX25LM51245G_AutoPollingMemReady>
 800ca08:	4603      	mov	r3, r0
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d003      	beq.n	800ca16 <OSPI_NOR_ExitOPIMode+0xfa>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800ca0e:	f06f 0304 	mvn.w	r3, #4
 800ca12:	60fb      	str	r3, [r7, #12]
 800ca14:	e01a      	b.n	800ca4c <OSPI_NOR_ExitOPIMode+0x130>
      }
      /* Check the configuration has been correctly done */
      else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	225c      	movs	r2, #92	; 0x5c
 800ca1a:	fb02 f303 	mul.w	r3, r2, r3
 800ca1e:	4a0e      	ldr	r2, [pc, #56]	; (800ca58 <OSPI_NOR_ExitOPIMode+0x13c>)
 800ca20:	1898      	adds	r0, r3, r2
 800ca22:	f107 0308 	add.w	r3, r7, #8
 800ca26:	9300      	str	r3, [sp, #0]
 800ca28:	2300      	movs	r3, #0
 800ca2a:	2200      	movs	r2, #0
 800ca2c:	2100      	movs	r1, #0
 800ca2e:	f7fe fbf8 	bl	800b222 <MX25LM51245G_ReadCfg2Register>
 800ca32:	4603      	mov	r3, r0
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d003      	beq.n	800ca40 <OSPI_NOR_ExitOPIMode+0x124>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800ca38:	f06f 0304 	mvn.w	r3, #4
 800ca3c:	60fb      	str	r3, [r7, #12]
 800ca3e:	e005      	b.n	800ca4c <OSPI_NOR_ExitOPIMode+0x130>
      }
      else
      {
        if (reg[0] != 0U)
 800ca40:	7a3b      	ldrb	r3, [r7, #8]
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d002      	beq.n	800ca4c <OSPI_NOR_ExitOPIMode+0x130>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800ca46:	f06f 0304 	mvn.w	r3, #4
 800ca4a:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Return BSP status */
  return ret;
 800ca4c:	68fb      	ldr	r3, [r7, #12]
}
 800ca4e:	4618      	mov	r0, r3
 800ca50:	3710      	adds	r7, #16
 800ca52:	46bd      	mov	sp, r7
 800ca54:	bd80      	pop	{r7, pc}
 800ca56:	bf00      	nop
 800ca58:	2400bd44 	.word	0x2400bd44
 800ca5c:	2400bda0 	.word	0x2400bda0

0800ca60 <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
 800ca60:	b580      	push	{r7, lr}
 800ca62:	b088      	sub	sp, #32
 800ca64:	af00      	add	r7, sp, #0
 800ca66:	6078      	str	r0, [r7, #4]
 800ca68:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800ca6a:	2300      	movs	r3, #0
 800ca6c:	61fb      	str	r3, [r7, #28]

  if((Instance >= TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d11c      	bne.n	800caae <BSP_TS_Init+0x4e>
 800ca74:	683b      	ldr	r3, [r7, #0]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d018      	beq.n	800caae <BSP_TS_Init+0x4e>
 800ca7c:	683b      	ldr	r3, [r7, #0]
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 800ca84:	d813      	bhi.n	800caae <BSP_TS_Init+0x4e>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 800ca86:	683b      	ldr	r3, [r7, #0]
 800ca88:	685b      	ldr	r3, [r3, #4]
  if((Instance >= TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d00f      	beq.n	800caae <BSP_TS_Init+0x4e>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 800ca8e:	683b      	ldr	r3, [r7, #0]
 800ca90:	685b      	ldr	r3, [r3, #4]
 800ca92:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 800ca96:	d80a      	bhi.n	800caae <BSP_TS_Init+0x4e>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
 800ca98:	683b      	ldr	r3, [r7, #0]
 800ca9a:	68da      	ldr	r2, [r3, #12]
 800ca9c:	683b      	ldr	r3, [r7, #0]
 800ca9e:	6819      	ldr	r1, [r3, #0]
 800caa0:	683b      	ldr	r3, [r7, #0]
 800caa2:	685b      	ldr	r3, [r3, #4]
 800caa4:	428b      	cmp	r3, r1
 800caa6:	bf28      	it	cs
 800caa8:	460b      	movcs	r3, r1
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 800caaa:	429a      	cmp	r2, r3
 800caac:	d903      	bls.n	800cab6 <BSP_TS_Init+0x56>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800caae:	f06f 0301 	mvn.w	r3, #1
 800cab2:	61fb      	str	r3, [r7, #28]
 800cab4:	e06e      	b.n	800cb94 <BSP_TS_Init+0x134>
  }
  else
  {
    if(FT5336_Probe(Instance) != BSP_ERROR_NONE)
 800cab6:	6878      	ldr	r0, [r7, #4]
 800cab8:	f000 f98c 	bl	800cdd4 <FT5336_Probe>
 800cabc:	4603      	mov	r3, r0
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d003      	beq.n	800caca <BSP_TS_Init+0x6a>
    {
      ret = BSP_ERROR_NO_INIT;
 800cac2:	f04f 33ff 	mov.w	r3, #4294967295
 800cac6:	61fb      	str	r3, [r7, #28]
 800cac8:	e064      	b.n	800cb94 <BSP_TS_Init+0x134>
    else
    {
      TS_Capabilities_t Capabilities;
      uint32_t i;
      /* Store parameters on TS context */
      Ts_Ctx[Instance].Width       = TS_Init->Width;
 800caca:	683b      	ldr	r3, [r7, #0]
 800cacc:	681a      	ldr	r2, [r3, #0]
 800cace:	4934      	ldr	r1, [pc, #208]	; (800cba0 <BSP_TS_Init+0x140>)
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	015b      	lsls	r3, r3, #5
 800cad4:	440b      	add	r3, r1
 800cad6:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Height      = TS_Init->Height;
 800cad8:	683b      	ldr	r3, [r7, #0]
 800cada:	685a      	ldr	r2, [r3, #4]
 800cadc:	4930      	ldr	r1, [pc, #192]	; (800cba0 <BSP_TS_Init+0x140>)
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	015b      	lsls	r3, r3, #5
 800cae2:	440b      	add	r3, r1
 800cae4:	3304      	adds	r3, #4
 800cae6:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Orientation = TS_Init->Orientation;
 800cae8:	683b      	ldr	r3, [r7, #0]
 800caea:	689a      	ldr	r2, [r3, #8]
 800caec:	492c      	ldr	r1, [pc, #176]	; (800cba0 <BSP_TS_Init+0x140>)
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	015b      	lsls	r3, r3, #5
 800caf2:	440b      	add	r3, r1
 800caf4:	3308      	adds	r3, #8
 800caf6:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Accuracy    = TS_Init->Accuracy;
 800caf8:	683b      	ldr	r3, [r7, #0]
 800cafa:	68da      	ldr	r2, [r3, #12]
 800cafc:	4928      	ldr	r1, [pc, #160]	; (800cba0 <BSP_TS_Init+0x140>)
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	015b      	lsls	r3, r3, #5
 800cb02:	440b      	add	r3, r1
 800cb04:	330c      	adds	r3, #12
 800cb06:	601a      	str	r2, [r3, #0]
      /* Get capabilities to retrieve maximum values of X and Y */
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 800cb08:	4b26      	ldr	r3, [pc, #152]	; (800cba4 <BSP_TS_Init+0x144>)
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	69db      	ldr	r3, [r3, #28]
 800cb0e:	4926      	ldr	r1, [pc, #152]	; (800cba8 <BSP_TS_Init+0x148>)
 800cb10:	687a      	ldr	r2, [r7, #4]
 800cb12:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800cb16:	f107 010c 	add.w	r1, r7, #12
 800cb1a:	4610      	mov	r0, r2
 800cb1c:	4798      	blx	r3
 800cb1e:	4603      	mov	r3, r0
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	da03      	bge.n	800cb2c <BSP_TS_Init+0xcc>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800cb24:	f06f 0304 	mvn.w	r3, #4
 800cb28:	61fb      	str	r3, [r7, #28]
 800cb2a:	e033      	b.n	800cb94 <BSP_TS_Init+0x134>
      }
      else
      {
        /* Store maximum X and Y on context */
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 800cb2c:	693a      	ldr	r2, [r7, #16]
 800cb2e:	491c      	ldr	r1, [pc, #112]	; (800cba0 <BSP_TS_Init+0x140>)
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	015b      	lsls	r3, r3, #5
 800cb34:	440b      	add	r3, r1
 800cb36:	3310      	adds	r3, #16
 800cb38:	601a      	str	r2, [r3, #0]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 800cb3a:	697a      	ldr	r2, [r7, #20]
 800cb3c:	4918      	ldr	r1, [pc, #96]	; (800cba0 <BSP_TS_Init+0x140>)
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	015b      	lsls	r3, r3, #5
 800cb42:	440b      	add	r3, r1
 800cb44:	3314      	adds	r3, #20
 800cb46:	601a      	str	r2, [r3, #0]
        /* Initialize previous position in order to always detect first touch */
        for(i = 0; i < TS_TOUCH_NBR; i++)
 800cb48:	2300      	movs	r3, #0
 800cb4a:	61bb      	str	r3, [r7, #24]
 800cb4c:	e01f      	b.n	800cb8e <BSP_TS_Init+0x12e>
        {
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 800cb4e:	683b      	ldr	r3, [r7, #0]
 800cb50:	681a      	ldr	r2, [r3, #0]
 800cb52:	683b      	ldr	r3, [r7, #0]
 800cb54:	68db      	ldr	r3, [r3, #12]
 800cb56:	4413      	add	r3, r2
 800cb58:	1c5a      	adds	r2, r3, #1
 800cb5a:	4811      	ldr	r0, [pc, #68]	; (800cba0 <BSP_TS_Init+0x140>)
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	00d9      	lsls	r1, r3, #3
 800cb60:	69bb      	ldr	r3, [r7, #24]
 800cb62:	440b      	add	r3, r1
 800cb64:	3306      	adds	r3, #6
 800cb66:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 800cb6a:	683b      	ldr	r3, [r7, #0]
 800cb6c:	685a      	ldr	r2, [r3, #4]
 800cb6e:	683b      	ldr	r3, [r7, #0]
 800cb70:	68db      	ldr	r3, [r3, #12]
 800cb72:	4413      	add	r3, r2
 800cb74:	1c5a      	adds	r2, r3, #1
 800cb76:	480a      	ldr	r0, [pc, #40]	; (800cba0 <BSP_TS_Init+0x140>)
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	00d9      	lsls	r1, r3, #3
 800cb7c:	69bb      	ldr	r3, [r7, #24]
 800cb7e:	440b      	add	r3, r1
 800cb80:	3306      	adds	r3, #6
 800cb82:	009b      	lsls	r3, r3, #2
 800cb84:	4403      	add	r3, r0
 800cb86:	605a      	str	r2, [r3, #4]
        for(i = 0; i < TS_TOUCH_NBR; i++)
 800cb88:	69bb      	ldr	r3, [r7, #24]
 800cb8a:	3301      	adds	r3, #1
 800cb8c:	61bb      	str	r3, [r7, #24]
 800cb8e:	69bb      	ldr	r3, [r7, #24]
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d0dc      	beq.n	800cb4e <BSP_TS_Init+0xee>
        }
      }
    }
  }

  return ret;
 800cb94:	69fb      	ldr	r3, [r7, #28]
}
 800cb96:	4618      	mov	r0, r3
 800cb98:	3720      	adds	r7, #32
 800cb9a:	46bd      	mov	sp, r7
 800cb9c:	bd80      	pop	{r7, pc}
 800cb9e:	bf00      	nop
 800cba0:	2400bdb0 	.word	0x2400bdb0
 800cba4:	2400bda8 	.word	0x2400bda8
 800cba8:	2400bdac 	.word	0x2400bdac

0800cbac <BSP_TS_GetState>:
  * @param  Instance  TS instance. Could be only 0.
  * @param  TS_State  Pointer to touch screen current state structure
  * @retval BSP status
  */
int32_t BSP_TS_GetState(uint32_t Instance, TS_State_t *TS_State)
{
 800cbac:	b580      	push	{r7, lr}
 800cbae:	b08a      	sub	sp, #40	; 0x28
 800cbb0:	af00      	add	r7, sp, #0
 800cbb2:	6078      	str	r0, [r7, #4]
 800cbb4:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800cbb6:	2300      	movs	r3, #0
 800cbb8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t x_oriented, y_oriented;
  uint32_t x_diff, y_diff;

  if(Instance >= TS_INSTANCES_NBR)
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d003      	beq.n	800cbc8 <BSP_TS_GetState+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800cbc0:	f06f 0301 	mvn.w	r3, #1
 800cbc4:	627b      	str	r3, [r7, #36]	; 0x24
 800cbc6:	e0f9      	b.n	800cdbc <BSP_TS_GetState+0x210>
  else
  {
    FT5336_State_t state;

    /* Get each touch coordinates */
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
 800cbc8:	4b7f      	ldr	r3, [pc, #508]	; (800cdc8 <BSP_TS_GetState+0x21c>)
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	691b      	ldr	r3, [r3, #16]
 800cbce:	497f      	ldr	r1, [pc, #508]	; (800cdcc <BSP_TS_GetState+0x220>)
 800cbd0:	687a      	ldr	r2, [r7, #4]
 800cbd2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800cbd6:	f107 0108 	add.w	r1, r7, #8
 800cbda:	4610      	mov	r0, r2
 800cbdc:	4798      	blx	r3
 800cbde:	4603      	mov	r3, r0
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	da03      	bge.n	800cbec <BSP_TS_GetState+0x40>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800cbe4:	f06f 0304 	mvn.w	r3, #4
 800cbe8:	627b      	str	r3, [r7, #36]	; 0x24
 800cbea:	e0e7      	b.n	800cdbc <BSP_TS_GetState+0x210>
    }/* Check and update the number of touches active detected */
    else if(state.TouchDetected != 0U)
 800cbec:	68bb      	ldr	r3, [r7, #8]
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	f000 80d1 	beq.w	800cd96 <BSP_TS_GetState+0x1ea>
    {
      x_oriented = state.TouchX;
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	623b      	str	r3, [r7, #32]
      y_oriented = state.TouchY;
 800cbf8:	693b      	ldr	r3, [r7, #16]
 800cbfa:	61fb      	str	r3, [r7, #28]

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 800cbfc:	4a74      	ldr	r2, [pc, #464]	; (800cdd0 <BSP_TS_GetState+0x224>)
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	015b      	lsls	r3, r3, #5
 800cc02:	4413      	add	r3, r2
 800cc04:	3308      	adds	r3, #8
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	f003 0308 	and.w	r3, r3, #8
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d003      	beq.n	800cc18 <BSP_TS_GetState+0x6c>
      {
        x_oriented = state.TouchY;
 800cc10:	693b      	ldr	r3, [r7, #16]
 800cc12:	623b      	str	r3, [r7, #32]
        y_oriented = state.TouchX;
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	61fb      	str	r3, [r7, #28]
      }

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
 800cc18:	4a6d      	ldr	r2, [pc, #436]	; (800cdd0 <BSP_TS_GetState+0x224>)
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	015b      	lsls	r3, r3, #5
 800cc1e:	4413      	add	r3, r2
 800cc20:	3308      	adds	r3, #8
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	f003 0302 	and.w	r3, r3, #2
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d009      	beq.n	800cc40 <BSP_TS_GetState+0x94>
      {
        x_oriented = Ts_Ctx[Instance].MaxX - state.TouchX - 1UL;
 800cc2c:	4a68      	ldr	r2, [pc, #416]	; (800cdd0 <BSP_TS_GetState+0x224>)
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	015b      	lsls	r3, r3, #5
 800cc32:	4413      	add	r3, r2
 800cc34:	3310      	adds	r3, #16
 800cc36:	681a      	ldr	r2, [r3, #0]
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	1ad3      	subs	r3, r2, r3
 800cc3c:	3b01      	subs	r3, #1
 800cc3e:	623b      	str	r3, [r7, #32]
      }

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
 800cc40:	4a63      	ldr	r2, [pc, #396]	; (800cdd0 <BSP_TS_GetState+0x224>)
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	015b      	lsls	r3, r3, #5
 800cc46:	4413      	add	r3, r2
 800cc48:	3308      	adds	r3, #8
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	f003 0304 	and.w	r3, r3, #4
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d008      	beq.n	800cc66 <BSP_TS_GetState+0xba>
      {
        y_oriented = Ts_Ctx[Instance].MaxY - state.TouchY;
 800cc54:	4a5e      	ldr	r2, [pc, #376]	; (800cdd0 <BSP_TS_GetState+0x224>)
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	015b      	lsls	r3, r3, #5
 800cc5a:	4413      	add	r3, r2
 800cc5c:	3314      	adds	r3, #20
 800cc5e:	681a      	ldr	r2, [r3, #0]
 800cc60:	693b      	ldr	r3, [r7, #16]
 800cc62:	1ad3      	subs	r3, r2, r3
 800cc64:	61fb      	str	r3, [r7, #28]
      }

      /* Apply boundary */
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 800cc66:	4a5a      	ldr	r2, [pc, #360]	; (800cdd0 <BSP_TS_GetState+0x224>)
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	015b      	lsls	r3, r3, #5
 800cc6c:	4413      	add	r3, r2
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	6a3a      	ldr	r2, [r7, #32]
 800cc72:	fb03 f202 	mul.w	r2, r3, r2
 800cc76:	4956      	ldr	r1, [pc, #344]	; (800cdd0 <BSP_TS_GetState+0x224>)
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	015b      	lsls	r3, r3, #5
 800cc7c:	440b      	add	r3, r1
 800cc7e:	3310      	adds	r3, #16
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	fbb2 f2f3 	udiv	r2, r2, r3
 800cc86:	683b      	ldr	r3, [r7, #0]
 800cc88:	605a      	str	r2, [r3, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 800cc8a:	4a51      	ldr	r2, [pc, #324]	; (800cdd0 <BSP_TS_GetState+0x224>)
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	015b      	lsls	r3, r3, #5
 800cc90:	4413      	add	r3, r2
 800cc92:	3304      	adds	r3, #4
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	69fa      	ldr	r2, [r7, #28]
 800cc98:	fb03 f202 	mul.w	r2, r3, r2
 800cc9c:	494c      	ldr	r1, [pc, #304]	; (800cdd0 <BSP_TS_GetState+0x224>)
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	015b      	lsls	r3, r3, #5
 800cca2:	440b      	add	r3, r1
 800cca4:	3314      	adds	r3, #20
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	fbb2 f2f3 	udiv	r2, r2, r3
 800ccac:	683b      	ldr	r3, [r7, #0]
 800ccae:	609a      	str	r2, [r3, #8]
      /* Store Current TS state */
      TS_State->TouchDetected = state.TouchDetected;
 800ccb0:	68ba      	ldr	r2, [r7, #8]
 800ccb2:	683b      	ldr	r3, [r7, #0]
 800ccb4:	601a      	str	r2, [r3, #0]

      /* Check accuracy */
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 800ccb6:	683b      	ldr	r3, [r7, #0]
 800ccb8:	685a      	ldr	r2, [r3, #4]
 800ccba:	4945      	ldr	r1, [pc, #276]	; (800cdd0 <BSP_TS_GetState+0x224>)
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	015b      	lsls	r3, r3, #5
 800ccc0:	440b      	add	r3, r1
 800ccc2:	3318      	adds	r3, #24
 800ccc4:	681b      	ldr	r3, [r3, #0]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 800ccc6:	429a      	cmp	r2, r3
 800ccc8:	d909      	bls.n	800ccde <BSP_TS_GetState+0x132>
 800ccca:	683b      	ldr	r3, [r7, #0]
 800cccc:	685a      	ldr	r2, [r3, #4]
 800ccce:	4940      	ldr	r1, [pc, #256]	; (800cdd0 <BSP_TS_GetState+0x224>)
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	015b      	lsls	r3, r3, #5
 800ccd4:	440b      	add	r3, r1
 800ccd6:	3318      	adds	r3, #24
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	1ad3      	subs	r3, r2, r3
 800ccdc:	e008      	b.n	800ccf0 <BSP_TS_GetState+0x144>
        (Ts_Ctx[Instance].PreviousX[0] - TS_State->TouchX);
 800ccde:	4a3c      	ldr	r2, [pc, #240]	; (800cdd0 <BSP_TS_GetState+0x224>)
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	015b      	lsls	r3, r3, #5
 800cce4:	4413      	add	r3, r2
 800cce6:	3318      	adds	r3, #24
 800cce8:	681a      	ldr	r2, [r3, #0]
 800ccea:	683b      	ldr	r3, [r7, #0]
 800ccec:	685b      	ldr	r3, [r3, #4]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 800ccee:	1ad3      	subs	r3, r2, r3
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 800ccf0:	61bb      	str	r3, [r7, #24]

        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 800ccf2:	683b      	ldr	r3, [r7, #0]
 800ccf4:	689a      	ldr	r2, [r3, #8]
 800ccf6:	4936      	ldr	r1, [pc, #216]	; (800cdd0 <BSP_TS_GetState+0x224>)
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	015b      	lsls	r3, r3, #5
 800ccfc:	440b      	add	r3, r1
 800ccfe:	331c      	adds	r3, #28
 800cd00:	681b      	ldr	r3, [r3, #0]
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 800cd02:	429a      	cmp	r2, r3
 800cd04:	d909      	bls.n	800cd1a <BSP_TS_GetState+0x16e>
 800cd06:	683b      	ldr	r3, [r7, #0]
 800cd08:	689a      	ldr	r2, [r3, #8]
 800cd0a:	4931      	ldr	r1, [pc, #196]	; (800cdd0 <BSP_TS_GetState+0x224>)
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	015b      	lsls	r3, r3, #5
 800cd10:	440b      	add	r3, r1
 800cd12:	331c      	adds	r3, #28
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	1ad3      	subs	r3, r2, r3
 800cd18:	e008      	b.n	800cd2c <BSP_TS_GetState+0x180>
          (Ts_Ctx[Instance].PreviousY[0] - TS_State->TouchY);
 800cd1a:	4a2d      	ldr	r2, [pc, #180]	; (800cdd0 <BSP_TS_GetState+0x224>)
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	015b      	lsls	r3, r3, #5
 800cd20:	4413      	add	r3, r2
 800cd22:	331c      	adds	r3, #28
 800cd24:	681a      	ldr	r2, [r3, #0]
 800cd26:	683b      	ldr	r3, [r7, #0]
 800cd28:	689b      	ldr	r3, [r3, #8]
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 800cd2a:	1ad3      	subs	r3, r2, r3
        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 800cd2c:	617b      	str	r3, [r7, #20]


          if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 800cd2e:	4a28      	ldr	r2, [pc, #160]	; (800cdd0 <BSP_TS_GetState+0x224>)
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	015b      	lsls	r3, r3, #5
 800cd34:	4413      	add	r3, r2
 800cd36:	330c      	adds	r3, #12
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	69ba      	ldr	r2, [r7, #24]
 800cd3c:	429a      	cmp	r2, r3
 800cd3e:	d808      	bhi.n	800cd52 <BSP_TS_GetState+0x1a6>
 800cd40:	4a23      	ldr	r2, [pc, #140]	; (800cdd0 <BSP_TS_GetState+0x224>)
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	015b      	lsls	r3, r3, #5
 800cd46:	4413      	add	r3, r2
 800cd48:	330c      	adds	r3, #12
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	697a      	ldr	r2, [r7, #20]
 800cd4e:	429a      	cmp	r2, r3
 800cd50:	d910      	bls.n	800cd74 <BSP_TS_GetState+0x1c8>
          {
            /* New touch detected */
            Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
 800cd52:	683b      	ldr	r3, [r7, #0]
 800cd54:	685a      	ldr	r2, [r3, #4]
 800cd56:	491e      	ldr	r1, [pc, #120]	; (800cdd0 <BSP_TS_GetState+0x224>)
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	015b      	lsls	r3, r3, #5
 800cd5c:	440b      	add	r3, r1
 800cd5e:	3318      	adds	r3, #24
 800cd60:	601a      	str	r2, [r3, #0]
            Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 800cd62:	683b      	ldr	r3, [r7, #0]
 800cd64:	689a      	ldr	r2, [r3, #8]
 800cd66:	491a      	ldr	r1, [pc, #104]	; (800cdd0 <BSP_TS_GetState+0x224>)
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	015b      	lsls	r3, r3, #5
 800cd6c:	440b      	add	r3, r1
 800cd6e:	331c      	adds	r3, #28
 800cd70:	601a      	str	r2, [r3, #0]
 800cd72:	e023      	b.n	800cdbc <BSP_TS_GetState+0x210>
          }
          else
          {
            TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 800cd74:	4a16      	ldr	r2, [pc, #88]	; (800cdd0 <BSP_TS_GetState+0x224>)
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	015b      	lsls	r3, r3, #5
 800cd7a:	4413      	add	r3, r2
 800cd7c:	3318      	adds	r3, #24
 800cd7e:	681a      	ldr	r2, [r3, #0]
 800cd80:	683b      	ldr	r3, [r7, #0]
 800cd82:	605a      	str	r2, [r3, #4]
            TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 800cd84:	4a12      	ldr	r2, [pc, #72]	; (800cdd0 <BSP_TS_GetState+0x224>)
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	015b      	lsls	r3, r3, #5
 800cd8a:	4413      	add	r3, r2
 800cd8c:	331c      	adds	r3, #28
 800cd8e:	681a      	ldr	r2, [r3, #0]
 800cd90:	683b      	ldr	r3, [r7, #0]
 800cd92:	609a      	str	r2, [r3, #8]
 800cd94:	e012      	b.n	800cdbc <BSP_TS_GetState+0x210>
          }
    }
    else
    {
      TS_State->TouchDetected = 0U;
 800cd96:	683b      	ldr	r3, [r7, #0]
 800cd98:	2200      	movs	r2, #0
 800cd9a:	601a      	str	r2, [r3, #0]
      TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 800cd9c:	4a0c      	ldr	r2, [pc, #48]	; (800cdd0 <BSP_TS_GetState+0x224>)
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	015b      	lsls	r3, r3, #5
 800cda2:	4413      	add	r3, r2
 800cda4:	3318      	adds	r3, #24
 800cda6:	681a      	ldr	r2, [r3, #0]
 800cda8:	683b      	ldr	r3, [r7, #0]
 800cdaa:	605a      	str	r2, [r3, #4]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 800cdac:	4a08      	ldr	r2, [pc, #32]	; (800cdd0 <BSP_TS_GetState+0x224>)
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	015b      	lsls	r3, r3, #5
 800cdb2:	4413      	add	r3, r2
 800cdb4:	331c      	adds	r3, #28
 800cdb6:	681a      	ldr	r2, [r3, #0]
 800cdb8:	683b      	ldr	r3, [r7, #0]
 800cdba:	609a      	str	r2, [r3, #8]
    }
  }

  return ret;
 800cdbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cdbe:	4618      	mov	r0, r3
 800cdc0:	3728      	adds	r7, #40	; 0x28
 800cdc2:	46bd      	mov	sp, r7
 800cdc4:	bd80      	pop	{r7, pc}
 800cdc6:	bf00      	nop
 800cdc8:	2400bda8 	.word	0x2400bda8
 800cdcc:	2400bdac 	.word	0x2400bdac
 800cdd0:	2400bdb0 	.word	0x2400bdb0

0800cdd4 <FT5336_Probe>:
  * @brief  Register Bus IOs if component ID is OK
  * @param  Instance TS instance. Could be only 0.
  * @retval BSP status
  */
static int32_t FT5336_Probe(uint32_t Instance)
{
 800cdd4:	b580      	push	{r7, lr}
 800cdd6:	b08a      	sub	sp, #40	; 0x28
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	6078      	str	r0, [r7, #4]
  int32_t ret              = BSP_ERROR_NONE;
 800cddc:	2300      	movs	r3, #0
 800cdde:	627b      	str	r3, [r7, #36]	; 0x24
  FT5336_IO_t              IOCtx;
  static FT5336_Object_t   FT5336Obj;
  uint32_t ft5336_id       = 0;
 800cde0:	2300      	movs	r3, #0
 800cde2:	60bb      	str	r3, [r7, #8]

  /* Configure the touch screen driver */
  IOCtx.Address     = TS_I2C_ADDRESS;
 800cde4:	2370      	movs	r3, #112	; 0x70
 800cde6:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = BSP_I2C4_Init;
 800cde8:	4b23      	ldr	r3, [pc, #140]	; (800ce78 <FT5336_Probe+0xa4>)
 800cdea:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 800cdec:	4b23      	ldr	r3, [pc, #140]	; (800ce7c <FT5336_Probe+0xa8>)
 800cdee:	613b      	str	r3, [r7, #16]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 800cdf0:	4b23      	ldr	r3, [pc, #140]	; (800ce80 <FT5336_Probe+0xac>)
 800cdf2:	61fb      	str	r3, [r7, #28]
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 800cdf4:	4b23      	ldr	r3, [pc, #140]	; (800ce84 <FT5336_Probe+0xb0>)
 800cdf6:	61bb      	str	r3, [r7, #24]
  IOCtx.GetTick     = BSP_GetTick;
 800cdf8:	4b23      	ldr	r3, [pc, #140]	; (800ce88 <FT5336_Probe+0xb4>)
 800cdfa:	623b      	str	r3, [r7, #32]

  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
 800cdfc:	f107 030c 	add.w	r3, r7, #12
 800ce00:	4619      	mov	r1, r3
 800ce02:	4822      	ldr	r0, [pc, #136]	; (800ce8c <FT5336_Probe+0xb8>)
 800ce04:	f7fd fb58 	bl	800a4b8 <FT5336_RegisterBusIO>
 800ce08:	4603      	mov	r3, r0
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d003      	beq.n	800ce16 <FT5336_Probe+0x42>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 800ce0e:	f06f 0307 	mvn.w	r3, #7
 800ce12:	627b      	str	r3, [r7, #36]	; 0x24
 800ce14:	e02a      	b.n	800ce6c <FT5336_Probe+0x98>
  }
  else if(FT5336_ReadID(&FT5336Obj, &ft5336_id) != FT5336_OK)
 800ce16:	f107 0308 	add.w	r3, r7, #8
 800ce1a:	4619      	mov	r1, r3
 800ce1c:	481b      	ldr	r0, [pc, #108]	; (800ce8c <FT5336_Probe+0xb8>)
 800ce1e:	f7fd fc45 	bl	800a6ac <FT5336_ReadID>
 800ce22:	4603      	mov	r3, r0
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d003      	beq.n	800ce30 <FT5336_Probe+0x5c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800ce28:	f06f 0304 	mvn.w	r3, #4
 800ce2c:	627b      	str	r3, [r7, #36]	; 0x24
 800ce2e:	e01d      	b.n	800ce6c <FT5336_Probe+0x98>
  }
  else if(ft5336_id != FT5336_ID)
 800ce30:	68bb      	ldr	r3, [r7, #8]
 800ce32:	2b51      	cmp	r3, #81	; 0x51
 800ce34:	d003      	beq.n	800ce3e <FT5336_Probe+0x6a>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800ce36:	f06f 0306 	mvn.w	r3, #6
 800ce3a:	627b      	str	r3, [r7, #36]	; 0x24
 800ce3c:	e016      	b.n	800ce6c <FT5336_Probe+0x98>
  }
  else
  {
    Ts_CompObj[Instance] = &FT5336Obj;
 800ce3e:	4a14      	ldr	r2, [pc, #80]	; (800ce90 <FT5336_Probe+0xbc>)
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	4912      	ldr	r1, [pc, #72]	; (800ce8c <FT5336_Probe+0xb8>)
 800ce44:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
 800ce48:	4b12      	ldr	r3, [pc, #72]	; (800ce94 <FT5336_Probe+0xc0>)
 800ce4a:	4a13      	ldr	r2, [pc, #76]	; (800ce98 <FT5336_Probe+0xc4>)
 800ce4c:	601a      	str	r2, [r3, #0]

    if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT5336_OK)
 800ce4e:	4b11      	ldr	r3, [pc, #68]	; (800ce94 <FT5336_Probe+0xc0>)
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	490e      	ldr	r1, [pc, #56]	; (800ce90 <FT5336_Probe+0xbc>)
 800ce56:	687a      	ldr	r2, [r7, #4]
 800ce58:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800ce5c:	4610      	mov	r0, r2
 800ce5e:	4798      	blx	r3
 800ce60:	4603      	mov	r3, r0
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d002      	beq.n	800ce6c <FT5336_Probe+0x98>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800ce66:	f06f 0304 	mvn.w	r3, #4
 800ce6a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }

  return ret;
 800ce6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ce6e:	4618      	mov	r0, r3
 800ce70:	3728      	adds	r7, #40	; 0x28
 800ce72:	46bd      	mov	sp, r7
 800ce74:	bd80      	pop	{r7, pc}
 800ce76:	bf00      	nop
 800ce78:	0800b4b9 	.word	0x0800b4b9
 800ce7c:	0800b52d 	.word	0x0800b52d
 800ce80:	0800b655 	.word	0x0800b655
 800ce84:	0800b5f9 	.word	0x0800b5f9
 800ce88:	0800b6b1 	.word	0x0800b6b1
 800ce8c:	2400bdd0 	.word	0x2400bdd0
 800ce90:	2400bdac 	.word	0x2400bdac
 800ce94:	2400bda8 	.word	0x2400bda8
 800ce98:	24000024 	.word	0x24000024

0800ce9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800ce9c:	b480      	push	{r7}
 800ce9e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800cea0:	4b29      	ldr	r3, [pc, #164]	; (800cf48 <SystemInit+0xac>)
 800cea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cea6:	4a28      	ldr	r2, [pc, #160]	; (800cf48 <SystemInit+0xac>)
 800cea8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ceac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800ceb0:	4b26      	ldr	r3, [pc, #152]	; (800cf4c <SystemInit+0xb0>)
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	4a25      	ldr	r2, [pc, #148]	; (800cf4c <SystemInit+0xb0>)
 800ceb6:	f043 0301 	orr.w	r3, r3, #1
 800ceba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800cebc:	4b23      	ldr	r3, [pc, #140]	; (800cf4c <SystemInit+0xb0>)
 800cebe:	2200      	movs	r2, #0
 800cec0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800cec2:	4b22      	ldr	r3, [pc, #136]	; (800cf4c <SystemInit+0xb0>)
 800cec4:	681a      	ldr	r2, [r3, #0]
 800cec6:	4921      	ldr	r1, [pc, #132]	; (800cf4c <SystemInit+0xb0>)
 800cec8:	4b21      	ldr	r3, [pc, #132]	; (800cf50 <SystemInit+0xb4>)
 800ceca:	4013      	ands	r3, r2
 800cecc:	600b      	str	r3, [r1, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 800cece:	4b1f      	ldr	r3, [pc, #124]	; (800cf4c <SystemInit+0xb0>)
 800ced0:	2200      	movs	r2, #0
 800ced2:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 800ced4:	4b1d      	ldr	r3, [pc, #116]	; (800cf4c <SystemInit+0xb0>)
 800ced6:	2200      	movs	r2, #0
 800ced8:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 800ceda:	4b1c      	ldr	r3, [pc, #112]	; (800cf4c <SystemInit+0xb0>)
 800cedc:	2200      	movs	r2, #0
 800cede:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 800cee0:	4b1a      	ldr	r3, [pc, #104]	; (800cf4c <SystemInit+0xb0>)
 800cee2:	2200      	movs	r2, #0
 800cee4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 800cee6:	4b19      	ldr	r3, [pc, #100]	; (800cf4c <SystemInit+0xb0>)
 800cee8:	2200      	movs	r2, #0
 800ceea:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 800ceec:	4b17      	ldr	r3, [pc, #92]	; (800cf4c <SystemInit+0xb0>)
 800ceee:	2200      	movs	r2, #0
 800cef0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800cef2:	4b16      	ldr	r3, [pc, #88]	; (800cf4c <SystemInit+0xb0>)
 800cef4:	2200      	movs	r2, #0
 800cef6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 800cef8:	4b14      	ldr	r3, [pc, #80]	; (800cf4c <SystemInit+0xb0>)
 800cefa:	2200      	movs	r2, #0
 800cefc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800cefe:	4b13      	ldr	r3, [pc, #76]	; (800cf4c <SystemInit+0xb0>)
 800cf00:	2200      	movs	r2, #0
 800cf02:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 800cf04:	4b11      	ldr	r3, [pc, #68]	; (800cf4c <SystemInit+0xb0>)
 800cf06:	2200      	movs	r2, #0
 800cf08:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800cf0a:	4b10      	ldr	r3, [pc, #64]	; (800cf4c <SystemInit+0xb0>)
 800cf0c:	2200      	movs	r2, #0
 800cf0e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800cf10:	4b0e      	ldr	r3, [pc, #56]	; (800cf4c <SystemInit+0xb0>)
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	4a0d      	ldr	r2, [pc, #52]	; (800cf4c <SystemInit+0xb0>)
 800cf16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800cf1a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800cf1c:	4b0b      	ldr	r3, [pc, #44]	; (800cf4c <SystemInit+0xb0>)
 800cf1e:	2200      	movs	r2, #0
 800cf20:	661a      	str	r2, [r3, #96]	; 0x60
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800cf22:	4b0c      	ldr	r3, [pc, #48]	; (800cf54 <SystemInit+0xb8>)
 800cf24:	681a      	ldr	r2, [r3, #0]
 800cf26:	4b0c      	ldr	r3, [pc, #48]	; (800cf58 <SystemInit+0xbc>)
 800cf28:	4013      	ands	r3, r2
 800cf2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cf2e:	d202      	bcs.n	800cf36 <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800cf30:	4b0a      	ldr	r3, [pc, #40]	; (800cf5c <SystemInit+0xc0>)
 800cf32:	2201      	movs	r2, #1
 800cf34:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800cf36:	4b04      	ldr	r3, [pc, #16]	; (800cf48 <SystemInit+0xac>)
 800cf38:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800cf3c:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800cf3e:	bf00      	nop
 800cf40:	46bd      	mov	sp, r7
 800cf42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf46:	4770      	bx	lr
 800cf48:	e000ed00 	.word	0xe000ed00
 800cf4c:	58024400 	.word	0x58024400
 800cf50:	eaf6ed7f 	.word	0xeaf6ed7f
 800cf54:	5c001000 	.word	0x5c001000
 800cf58:	ffff0000 	.word	0xffff0000
 800cf5c:	51008108 	.word	0x51008108

0800cf60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800cf60:	b580      	push	{r7, lr}
 800cf62:	b082      	sub	sp, #8
 800cf64:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800cf66:	2003      	movs	r0, #3
 800cf68:	f000 f94b 	bl	800d202 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800cf6c:	f006 fb44 	bl	80135f8 <HAL_RCC_GetSysClockFreq>
 800cf70:	4602      	mov	r2, r0
 800cf72:	4b15      	ldr	r3, [pc, #84]	; (800cfc8 <HAL_Init+0x68>)
 800cf74:	699b      	ldr	r3, [r3, #24]
 800cf76:	0a1b      	lsrs	r3, r3, #8
 800cf78:	f003 030f 	and.w	r3, r3, #15
 800cf7c:	4913      	ldr	r1, [pc, #76]	; (800cfcc <HAL_Init+0x6c>)
 800cf7e:	5ccb      	ldrb	r3, [r1, r3]
 800cf80:	f003 031f 	and.w	r3, r3, #31
 800cf84:	fa22 f303 	lsr.w	r3, r2, r3
 800cf88:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800cf8a:	4b0f      	ldr	r3, [pc, #60]	; (800cfc8 <HAL_Init+0x68>)
 800cf8c:	699b      	ldr	r3, [r3, #24]
 800cf8e:	f003 030f 	and.w	r3, r3, #15
 800cf92:	4a0e      	ldr	r2, [pc, #56]	; (800cfcc <HAL_Init+0x6c>)
 800cf94:	5cd3      	ldrb	r3, [r2, r3]
 800cf96:	f003 031f 	and.w	r3, r3, #31
 800cf9a:	687a      	ldr	r2, [r7, #4]
 800cf9c:	fa22 f303 	lsr.w	r3, r2, r3
 800cfa0:	4a0b      	ldr	r2, [pc, #44]	; (800cfd0 <HAL_Init+0x70>)
 800cfa2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800cfa4:	4a0b      	ldr	r2, [pc, #44]	; (800cfd4 <HAL_Init+0x74>)
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800cfaa:	2000      	movs	r0, #0
 800cfac:	f7f4 fbbe 	bl	800172c <HAL_InitTick>
 800cfb0:	4603      	mov	r3, r0
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d001      	beq.n	800cfba <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800cfb6:	2301      	movs	r3, #1
 800cfb8:	e002      	b.n	800cfc0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800cfba:	f7f3 ffe3 	bl	8000f84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800cfbe:	2300      	movs	r3, #0
}
 800cfc0:	4618      	mov	r0, r3
 800cfc2:	3708      	adds	r7, #8
 800cfc4:	46bd      	mov	sp, r7
 800cfc6:	bd80      	pop	{r7, pc}
 800cfc8:	58024400 	.word	0x58024400
 800cfcc:	0802cc88 	.word	0x0802cc88
 800cfd0:	24000058 	.word	0x24000058
 800cfd4:	24000054 	.word	0x24000054

0800cfd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800cfd8:	b480      	push	{r7}
 800cfda:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800cfdc:	4b06      	ldr	r3, [pc, #24]	; (800cff8 <HAL_IncTick+0x20>)
 800cfde:	781b      	ldrb	r3, [r3, #0]
 800cfe0:	461a      	mov	r2, r3
 800cfe2:	4b06      	ldr	r3, [pc, #24]	; (800cffc <HAL_IncTick+0x24>)
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	4413      	add	r3, r2
 800cfe8:	4a04      	ldr	r2, [pc, #16]	; (800cffc <HAL_IncTick+0x24>)
 800cfea:	6013      	str	r3, [r2, #0]
}
 800cfec:	bf00      	nop
 800cfee:	46bd      	mov	sp, r7
 800cff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff4:	4770      	bx	lr
 800cff6:	bf00      	nop
 800cff8:	24000060 	.word	0x24000060
 800cffc:	2400bdf8 	.word	0x2400bdf8

0800d000 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800d000:	b480      	push	{r7}
 800d002:	af00      	add	r7, sp, #0
  return uwTick;
 800d004:	4b03      	ldr	r3, [pc, #12]	; (800d014 <HAL_GetTick+0x14>)
 800d006:	681b      	ldr	r3, [r3, #0]
}
 800d008:	4618      	mov	r0, r3
 800d00a:	46bd      	mov	sp, r7
 800d00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d010:	4770      	bx	lr
 800d012:	bf00      	nop
 800d014:	2400bdf8 	.word	0x2400bdf8

0800d018 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800d018:	b580      	push	{r7, lr}
 800d01a:	b084      	sub	sp, #16
 800d01c:	af00      	add	r7, sp, #0
 800d01e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800d020:	f7ff ffee 	bl	800d000 <HAL_GetTick>
 800d024:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d030:	d005      	beq.n	800d03e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800d032:	4b0a      	ldr	r3, [pc, #40]	; (800d05c <HAL_Delay+0x44>)
 800d034:	781b      	ldrb	r3, [r3, #0]
 800d036:	461a      	mov	r2, r3
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	4413      	add	r3, r2
 800d03c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800d03e:	bf00      	nop
 800d040:	f7ff ffde 	bl	800d000 <HAL_GetTick>
 800d044:	4602      	mov	r2, r0
 800d046:	68bb      	ldr	r3, [r7, #8]
 800d048:	1ad3      	subs	r3, r2, r3
 800d04a:	68fa      	ldr	r2, [r7, #12]
 800d04c:	429a      	cmp	r2, r3
 800d04e:	d8f7      	bhi.n	800d040 <HAL_Delay+0x28>
  {
  }
}
 800d050:	bf00      	nop
 800d052:	bf00      	nop
 800d054:	3710      	adds	r7, #16
 800d056:	46bd      	mov	sp, r7
 800d058:	bd80      	pop	{r7, pc}
 800d05a:	bf00      	nop
 800d05c:	24000060 	.word	0x24000060

0800d060 <__NVIC_SetPriorityGrouping>:
{
 800d060:	b480      	push	{r7}
 800d062:	b085      	sub	sp, #20
 800d064:	af00      	add	r7, sp, #0
 800d066:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	f003 0307 	and.w	r3, r3, #7
 800d06e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800d070:	4b0b      	ldr	r3, [pc, #44]	; (800d0a0 <__NVIC_SetPriorityGrouping+0x40>)
 800d072:	68db      	ldr	r3, [r3, #12]
 800d074:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800d076:	68ba      	ldr	r2, [r7, #8]
 800d078:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800d07c:	4013      	ands	r3, r2
 800d07e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800d084:	68bb      	ldr	r3, [r7, #8]
 800d086:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800d088:	4b06      	ldr	r3, [pc, #24]	; (800d0a4 <__NVIC_SetPriorityGrouping+0x44>)
 800d08a:	4313      	orrs	r3, r2
 800d08c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800d08e:	4a04      	ldr	r2, [pc, #16]	; (800d0a0 <__NVIC_SetPriorityGrouping+0x40>)
 800d090:	68bb      	ldr	r3, [r7, #8]
 800d092:	60d3      	str	r3, [r2, #12]
}
 800d094:	bf00      	nop
 800d096:	3714      	adds	r7, #20
 800d098:	46bd      	mov	sp, r7
 800d09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d09e:	4770      	bx	lr
 800d0a0:	e000ed00 	.word	0xe000ed00
 800d0a4:	05fa0000 	.word	0x05fa0000

0800d0a8 <__NVIC_GetPriorityGrouping>:
{
 800d0a8:	b480      	push	{r7}
 800d0aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800d0ac:	4b04      	ldr	r3, [pc, #16]	; (800d0c0 <__NVIC_GetPriorityGrouping+0x18>)
 800d0ae:	68db      	ldr	r3, [r3, #12]
 800d0b0:	0a1b      	lsrs	r3, r3, #8
 800d0b2:	f003 0307 	and.w	r3, r3, #7
}
 800d0b6:	4618      	mov	r0, r3
 800d0b8:	46bd      	mov	sp, r7
 800d0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0be:	4770      	bx	lr
 800d0c0:	e000ed00 	.word	0xe000ed00

0800d0c4 <__NVIC_EnableIRQ>:
{
 800d0c4:	b480      	push	{r7}
 800d0c6:	b083      	sub	sp, #12
 800d0c8:	af00      	add	r7, sp, #0
 800d0ca:	4603      	mov	r3, r0
 800d0cc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800d0ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	db0b      	blt.n	800d0ee <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800d0d6:	88fb      	ldrh	r3, [r7, #6]
 800d0d8:	f003 021f 	and.w	r2, r3, #31
 800d0dc:	4907      	ldr	r1, [pc, #28]	; (800d0fc <__NVIC_EnableIRQ+0x38>)
 800d0de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d0e2:	095b      	lsrs	r3, r3, #5
 800d0e4:	2001      	movs	r0, #1
 800d0e6:	fa00 f202 	lsl.w	r2, r0, r2
 800d0ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800d0ee:	bf00      	nop
 800d0f0:	370c      	adds	r7, #12
 800d0f2:	46bd      	mov	sp, r7
 800d0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f8:	4770      	bx	lr
 800d0fa:	bf00      	nop
 800d0fc:	e000e100 	.word	0xe000e100

0800d100 <__NVIC_DisableIRQ>:
{
 800d100:	b480      	push	{r7}
 800d102:	b083      	sub	sp, #12
 800d104:	af00      	add	r7, sp, #0
 800d106:	4603      	mov	r3, r0
 800d108:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800d10a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d10e:	2b00      	cmp	r3, #0
 800d110:	db12      	blt.n	800d138 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800d112:	88fb      	ldrh	r3, [r7, #6]
 800d114:	f003 021f 	and.w	r2, r3, #31
 800d118:	490a      	ldr	r1, [pc, #40]	; (800d144 <__NVIC_DisableIRQ+0x44>)
 800d11a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d11e:	095b      	lsrs	r3, r3, #5
 800d120:	2001      	movs	r0, #1
 800d122:	fa00 f202 	lsl.w	r2, r0, r2
 800d126:	3320      	adds	r3, #32
 800d128:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800d12c:	f3bf 8f4f 	dsb	sy
}
 800d130:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800d132:	f3bf 8f6f 	isb	sy
}
 800d136:	bf00      	nop
}
 800d138:	bf00      	nop
 800d13a:	370c      	adds	r7, #12
 800d13c:	46bd      	mov	sp, r7
 800d13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d142:	4770      	bx	lr
 800d144:	e000e100 	.word	0xe000e100

0800d148 <__NVIC_SetPriority>:
{
 800d148:	b480      	push	{r7}
 800d14a:	b083      	sub	sp, #12
 800d14c:	af00      	add	r7, sp, #0
 800d14e:	4603      	mov	r3, r0
 800d150:	6039      	str	r1, [r7, #0]
 800d152:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800d154:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d158:	2b00      	cmp	r3, #0
 800d15a:	db0a      	blt.n	800d172 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d15c:	683b      	ldr	r3, [r7, #0]
 800d15e:	b2da      	uxtb	r2, r3
 800d160:	490c      	ldr	r1, [pc, #48]	; (800d194 <__NVIC_SetPriority+0x4c>)
 800d162:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d166:	0112      	lsls	r2, r2, #4
 800d168:	b2d2      	uxtb	r2, r2
 800d16a:	440b      	add	r3, r1
 800d16c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800d170:	e00a      	b.n	800d188 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d172:	683b      	ldr	r3, [r7, #0]
 800d174:	b2da      	uxtb	r2, r3
 800d176:	4908      	ldr	r1, [pc, #32]	; (800d198 <__NVIC_SetPriority+0x50>)
 800d178:	88fb      	ldrh	r3, [r7, #6]
 800d17a:	f003 030f 	and.w	r3, r3, #15
 800d17e:	3b04      	subs	r3, #4
 800d180:	0112      	lsls	r2, r2, #4
 800d182:	b2d2      	uxtb	r2, r2
 800d184:	440b      	add	r3, r1
 800d186:	761a      	strb	r2, [r3, #24]
}
 800d188:	bf00      	nop
 800d18a:	370c      	adds	r7, #12
 800d18c:	46bd      	mov	sp, r7
 800d18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d192:	4770      	bx	lr
 800d194:	e000e100 	.word	0xe000e100
 800d198:	e000ed00 	.word	0xe000ed00

0800d19c <NVIC_EncodePriority>:
{
 800d19c:	b480      	push	{r7}
 800d19e:	b089      	sub	sp, #36	; 0x24
 800d1a0:	af00      	add	r7, sp, #0
 800d1a2:	60f8      	str	r0, [r7, #12]
 800d1a4:	60b9      	str	r1, [r7, #8]
 800d1a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	f003 0307 	and.w	r3, r3, #7
 800d1ae:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800d1b0:	69fb      	ldr	r3, [r7, #28]
 800d1b2:	f1c3 0307 	rsb	r3, r3, #7
 800d1b6:	2b04      	cmp	r3, #4
 800d1b8:	bf28      	it	cs
 800d1ba:	2304      	movcs	r3, #4
 800d1bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800d1be:	69fb      	ldr	r3, [r7, #28]
 800d1c0:	3304      	adds	r3, #4
 800d1c2:	2b06      	cmp	r3, #6
 800d1c4:	d902      	bls.n	800d1cc <NVIC_EncodePriority+0x30>
 800d1c6:	69fb      	ldr	r3, [r7, #28]
 800d1c8:	3b03      	subs	r3, #3
 800d1ca:	e000      	b.n	800d1ce <NVIC_EncodePriority+0x32>
 800d1cc:	2300      	movs	r3, #0
 800d1ce:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800d1d0:	f04f 32ff 	mov.w	r2, #4294967295
 800d1d4:	69bb      	ldr	r3, [r7, #24]
 800d1d6:	fa02 f303 	lsl.w	r3, r2, r3
 800d1da:	43da      	mvns	r2, r3
 800d1dc:	68bb      	ldr	r3, [r7, #8]
 800d1de:	401a      	ands	r2, r3
 800d1e0:	697b      	ldr	r3, [r7, #20]
 800d1e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800d1e4:	f04f 31ff 	mov.w	r1, #4294967295
 800d1e8:	697b      	ldr	r3, [r7, #20]
 800d1ea:	fa01 f303 	lsl.w	r3, r1, r3
 800d1ee:	43d9      	mvns	r1, r3
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800d1f4:	4313      	orrs	r3, r2
}
 800d1f6:	4618      	mov	r0, r3
 800d1f8:	3724      	adds	r7, #36	; 0x24
 800d1fa:	46bd      	mov	sp, r7
 800d1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d200:	4770      	bx	lr

0800d202 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800d202:	b580      	push	{r7, lr}
 800d204:	b082      	sub	sp, #8
 800d206:	af00      	add	r7, sp, #0
 800d208:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800d20a:	6878      	ldr	r0, [r7, #4]
 800d20c:	f7ff ff28 	bl	800d060 <__NVIC_SetPriorityGrouping>
}
 800d210:	bf00      	nop
 800d212:	3708      	adds	r7, #8
 800d214:	46bd      	mov	sp, r7
 800d216:	bd80      	pop	{r7, pc}

0800d218 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800d218:	b580      	push	{r7, lr}
 800d21a:	b086      	sub	sp, #24
 800d21c:	af00      	add	r7, sp, #0
 800d21e:	4603      	mov	r3, r0
 800d220:	60b9      	str	r1, [r7, #8]
 800d222:	607a      	str	r2, [r7, #4]
 800d224:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800d226:	f7ff ff3f 	bl	800d0a8 <__NVIC_GetPriorityGrouping>
 800d22a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800d22c:	687a      	ldr	r2, [r7, #4]
 800d22e:	68b9      	ldr	r1, [r7, #8]
 800d230:	6978      	ldr	r0, [r7, #20]
 800d232:	f7ff ffb3 	bl	800d19c <NVIC_EncodePriority>
 800d236:	4602      	mov	r2, r0
 800d238:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800d23c:	4611      	mov	r1, r2
 800d23e:	4618      	mov	r0, r3
 800d240:	f7ff ff82 	bl	800d148 <__NVIC_SetPriority>
}
 800d244:	bf00      	nop
 800d246:	3718      	adds	r7, #24
 800d248:	46bd      	mov	sp, r7
 800d24a:	bd80      	pop	{r7, pc}

0800d24c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800d24c:	b580      	push	{r7, lr}
 800d24e:	b082      	sub	sp, #8
 800d250:	af00      	add	r7, sp, #0
 800d252:	4603      	mov	r3, r0
 800d254:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800d256:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d25a:	4618      	mov	r0, r3
 800d25c:	f7ff ff32 	bl	800d0c4 <__NVIC_EnableIRQ>
}
 800d260:	bf00      	nop
 800d262:	3708      	adds	r7, #8
 800d264:	46bd      	mov	sp, r7
 800d266:	bd80      	pop	{r7, pc}

0800d268 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800d268:	b580      	push	{r7, lr}
 800d26a:	b082      	sub	sp, #8
 800d26c:	af00      	add	r7, sp, #0
 800d26e:	4603      	mov	r3, r0
 800d270:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800d272:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d276:	4618      	mov	r0, r3
 800d278:	f7ff ff42 	bl	800d100 <__NVIC_DisableIRQ>
}
 800d27c:	bf00      	nop
 800d27e:	3708      	adds	r7, #8
 800d280:	46bd      	mov	sp, r7
 800d282:	bd80      	pop	{r7, pc}

0800d284 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800d284:	b480      	push	{r7}
 800d286:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 800d288:	f3bf 8f5f 	dmb	sy
}
 800d28c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800d28e:	4b07      	ldr	r3, [pc, #28]	; (800d2ac <HAL_MPU_Disable+0x28>)
 800d290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d292:	4a06      	ldr	r2, [pc, #24]	; (800d2ac <HAL_MPU_Disable+0x28>)
 800d294:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d298:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800d29a:	4b05      	ldr	r3, [pc, #20]	; (800d2b0 <HAL_MPU_Disable+0x2c>)
 800d29c:	2200      	movs	r2, #0
 800d29e:	605a      	str	r2, [r3, #4]
}
 800d2a0:	bf00      	nop
 800d2a2:	46bd      	mov	sp, r7
 800d2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a8:	4770      	bx	lr
 800d2aa:	bf00      	nop
 800d2ac:	e000ed00 	.word	0xe000ed00
 800d2b0:	e000ed90 	.word	0xe000ed90

0800d2b4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800d2b4:	b480      	push	{r7}
 800d2b6:	b083      	sub	sp, #12
 800d2b8:	af00      	add	r7, sp, #0
 800d2ba:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800d2bc:	4a0b      	ldr	r2, [pc, #44]	; (800d2ec <HAL_MPU_Enable+0x38>)
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	f043 0301 	orr.w	r3, r3, #1
 800d2c4:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800d2c6:	4b0a      	ldr	r3, [pc, #40]	; (800d2f0 <HAL_MPU_Enable+0x3c>)
 800d2c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2ca:	4a09      	ldr	r2, [pc, #36]	; (800d2f0 <HAL_MPU_Enable+0x3c>)
 800d2cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d2d0:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800d2d2:	f3bf 8f4f 	dsb	sy
}
 800d2d6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800d2d8:	f3bf 8f6f 	isb	sy
}
 800d2dc:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800d2de:	bf00      	nop
 800d2e0:	370c      	adds	r7, #12
 800d2e2:	46bd      	mov	sp, r7
 800d2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e8:	4770      	bx	lr
 800d2ea:	bf00      	nop
 800d2ec:	e000ed90 	.word	0xe000ed90
 800d2f0:	e000ed00 	.word	0xe000ed00

0800d2f4 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 800d2f4:	b480      	push	{r7}
 800d2f6:	b083      	sub	sp, #12
 800d2f8:	af00      	add	r7, sp, #0
 800d2fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	785a      	ldrb	r2, [r3, #1]
 800d300:	4b1d      	ldr	r3, [pc, #116]	; (800d378 <HAL_MPU_ConfigRegion+0x84>)
 800d302:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	781b      	ldrb	r3, [r3, #0]
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d029      	beq.n	800d360 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 800d30c:	4a1a      	ldr	r2, [pc, #104]	; (800d378 <HAL_MPU_ConfigRegion+0x84>)
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	685b      	ldr	r3, [r3, #4]
 800d312:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	7b1b      	ldrb	r3, [r3, #12]
 800d318:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	7adb      	ldrb	r3, [r3, #11]
 800d31e:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800d320:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	7a9b      	ldrb	r3, [r3, #10]
 800d326:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800d328:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	7b5b      	ldrb	r3, [r3, #13]
 800d32e:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800d330:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	7b9b      	ldrb	r3, [r3, #14]
 800d336:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800d338:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	7bdb      	ldrb	r3, [r3, #15]
 800d33e:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800d340:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	7a5b      	ldrb	r3, [r3, #9]
 800d346:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800d348:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	7a1b      	ldrb	r3, [r3, #8]
 800d34e:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800d350:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800d352:	687a      	ldr	r2, [r7, #4]
 800d354:	7812      	ldrb	r2, [r2, #0]
 800d356:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800d358:	4a07      	ldr	r2, [pc, #28]	; (800d378 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800d35a:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800d35c:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 800d35e:	e005      	b.n	800d36c <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 800d360:	4b05      	ldr	r3, [pc, #20]	; (800d378 <HAL_MPU_ConfigRegion+0x84>)
 800d362:	2200      	movs	r2, #0
 800d364:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 800d366:	4b04      	ldr	r3, [pc, #16]	; (800d378 <HAL_MPU_ConfigRegion+0x84>)
 800d368:	2200      	movs	r2, #0
 800d36a:	611a      	str	r2, [r3, #16]
}
 800d36c:	bf00      	nop
 800d36e:	370c      	adds	r7, #12
 800d370:	46bd      	mov	sp, r7
 800d372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d376:	4770      	bx	lr
 800d378:	e000ed90 	.word	0xe000ed90

0800d37c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800d37c:	b580      	push	{r7, lr}
 800d37e:	b082      	sub	sp, #8
 800d380:	af00      	add	r7, sp, #0
 800d382:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	2b00      	cmp	r3, #0
 800d388:	d101      	bne.n	800d38e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800d38a:	2301      	movs	r3, #1
 800d38c:	e054      	b.n	800d438 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	7f5b      	ldrb	r3, [r3, #29]
 800d392:	b2db      	uxtb	r3, r3
 800d394:	2b00      	cmp	r3, #0
 800d396:	d105      	bne.n	800d3a4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	2200      	movs	r2, #0
 800d39c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800d39e:	6878      	ldr	r0, [r7, #4]
 800d3a0:	f7f3 fe0e 	bl	8000fc0 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	2202      	movs	r2, #2
 800d3a8:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	791b      	ldrb	r3, [r3, #4]
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d10c      	bne.n	800d3cc <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	4a22      	ldr	r2, [pc, #136]	; (800d440 <HAL_CRC_Init+0xc4>)
 800d3b8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	689a      	ldr	r2, [r3, #8]
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	f022 0218 	bic.w	r2, r2, #24
 800d3c8:	609a      	str	r2, [r3, #8]
 800d3ca:	e00c      	b.n	800d3e6 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	6899      	ldr	r1, [r3, #8]
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	68db      	ldr	r3, [r3, #12]
 800d3d4:	461a      	mov	r2, r3
 800d3d6:	6878      	ldr	r0, [r7, #4]
 800d3d8:	f000 f834 	bl	800d444 <HAL_CRCEx_Polynomial_Set>
 800d3dc:	4603      	mov	r3, r0
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d001      	beq.n	800d3e6 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800d3e2:	2301      	movs	r3, #1
 800d3e4:	e028      	b.n	800d438 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	795b      	ldrb	r3, [r3, #5]
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d105      	bne.n	800d3fa <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	f04f 32ff 	mov.w	r2, #4294967295
 800d3f6:	611a      	str	r2, [r3, #16]
 800d3f8:	e004      	b.n	800d404 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	687a      	ldr	r2, [r7, #4]
 800d400:	6912      	ldr	r2, [r2, #16]
 800d402:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	689b      	ldr	r3, [r3, #8]
 800d40a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	695a      	ldr	r2, [r3, #20]
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	430a      	orrs	r2, r1
 800d418:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	689b      	ldr	r3, [r3, #8]
 800d420:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	699a      	ldr	r2, [r3, #24]
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	430a      	orrs	r2, r1
 800d42e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	2201      	movs	r2, #1
 800d434:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800d436:	2300      	movs	r3, #0
}
 800d438:	4618      	mov	r0, r3
 800d43a:	3708      	adds	r7, #8
 800d43c:	46bd      	mov	sp, r7
 800d43e:	bd80      	pop	{r7, pc}
 800d440:	04c11db7 	.word	0x04c11db7

0800d444 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800d444:	b480      	push	{r7}
 800d446:	b087      	sub	sp, #28
 800d448:	af00      	add	r7, sp, #0
 800d44a:	60f8      	str	r0, [r7, #12]
 800d44c:	60b9      	str	r1, [r7, #8]
 800d44e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d450:	2300      	movs	r3, #0
 800d452:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800d454:	231f      	movs	r3, #31
 800d456:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */ 
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 800d458:	68bb      	ldr	r3, [r7, #8]
 800d45a:	f003 0301 	and.w	r3, r3, #1
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d102      	bne.n	800d468 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 800d462:	2301      	movs	r3, #1
 800d464:	75fb      	strb	r3, [r7, #23]
 800d466:	e063      	b.n	800d530 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800d468:	bf00      	nop
 800d46a:	693b      	ldr	r3, [r7, #16]
 800d46c:	1e5a      	subs	r2, r3, #1
 800d46e:	613a      	str	r2, [r7, #16]
 800d470:	2b00      	cmp	r3, #0
 800d472:	d009      	beq.n	800d488 <HAL_CRCEx_Polynomial_Set+0x44>
 800d474:	693b      	ldr	r3, [r7, #16]
 800d476:	f003 031f 	and.w	r3, r3, #31
 800d47a:	68ba      	ldr	r2, [r7, #8]
 800d47c:	fa22 f303 	lsr.w	r3, r2, r3
 800d480:	f003 0301 	and.w	r3, r3, #1
 800d484:	2b00      	cmp	r3, #0
 800d486:	d0f0      	beq.n	800d46a <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	2b18      	cmp	r3, #24
 800d48c:	d846      	bhi.n	800d51c <HAL_CRCEx_Polynomial_Set+0xd8>
 800d48e:	a201      	add	r2, pc, #4	; (adr r2, 800d494 <HAL_CRCEx_Polynomial_Set+0x50>)
 800d490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d494:	0800d523 	.word	0x0800d523
 800d498:	0800d51d 	.word	0x0800d51d
 800d49c:	0800d51d 	.word	0x0800d51d
 800d4a0:	0800d51d 	.word	0x0800d51d
 800d4a4:	0800d51d 	.word	0x0800d51d
 800d4a8:	0800d51d 	.word	0x0800d51d
 800d4ac:	0800d51d 	.word	0x0800d51d
 800d4b0:	0800d51d 	.word	0x0800d51d
 800d4b4:	0800d511 	.word	0x0800d511
 800d4b8:	0800d51d 	.word	0x0800d51d
 800d4bc:	0800d51d 	.word	0x0800d51d
 800d4c0:	0800d51d 	.word	0x0800d51d
 800d4c4:	0800d51d 	.word	0x0800d51d
 800d4c8:	0800d51d 	.word	0x0800d51d
 800d4cc:	0800d51d 	.word	0x0800d51d
 800d4d0:	0800d51d 	.word	0x0800d51d
 800d4d4:	0800d505 	.word	0x0800d505
 800d4d8:	0800d51d 	.word	0x0800d51d
 800d4dc:	0800d51d 	.word	0x0800d51d
 800d4e0:	0800d51d 	.word	0x0800d51d
 800d4e4:	0800d51d 	.word	0x0800d51d
 800d4e8:	0800d51d 	.word	0x0800d51d
 800d4ec:	0800d51d 	.word	0x0800d51d
 800d4f0:	0800d51d 	.word	0x0800d51d
 800d4f4:	0800d4f9 	.word	0x0800d4f9
    {
          
      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 800d4f8:	693b      	ldr	r3, [r7, #16]
 800d4fa:	2b06      	cmp	r3, #6
 800d4fc:	d913      	bls.n	800d526 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 800d4fe:	2301      	movs	r3, #1
 800d500:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800d502:	e010      	b.n	800d526 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 800d504:	693b      	ldr	r3, [r7, #16]
 800d506:	2b07      	cmp	r3, #7
 800d508:	d90f      	bls.n	800d52a <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 800d50a:	2301      	movs	r3, #1
 800d50c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800d50e:	e00c      	b.n	800d52a <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 800d510:	693b      	ldr	r3, [r7, #16]
 800d512:	2b0f      	cmp	r3, #15
 800d514:	d90b      	bls.n	800d52e <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 800d516:	2301      	movs	r3, #1
 800d518:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800d51a:	e008      	b.n	800d52e <HAL_CRCEx_Polynomial_Set+0xea>
 
      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 800d51c:	2301      	movs	r3, #1
 800d51e:	75fb      	strb	r3, [r7, #23]
        break;
 800d520:	e006      	b.n	800d530 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800d522:	bf00      	nop
 800d524:	e004      	b.n	800d530 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800d526:	bf00      	nop
 800d528:	e002      	b.n	800d530 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800d52a:	bf00      	nop
 800d52c:	e000      	b.n	800d530 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800d52e:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 800d530:	7dfb      	ldrb	r3, [r7, #23]
 800d532:	2b00      	cmp	r3, #0
 800d534:	d10d      	bne.n	800d552 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	68ba      	ldr	r2, [r7, #8]
 800d53c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	689b      	ldr	r3, [r3, #8]
 800d544:	f023 0118 	bic.w	r1, r3, #24
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	687a      	ldr	r2, [r7, #4]
 800d54e:	430a      	orrs	r2, r1
 800d550:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800d552:	7dfb      	ldrb	r3, [r7, #23]
}
 800d554:	4618      	mov	r0, r3
 800d556:	371c      	adds	r7, #28
 800d558:	46bd      	mov	sp, r7
 800d55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d55e:	4770      	bx	lr

0800d560 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800d560:	b580      	push	{r7, lr}
 800d562:	b082      	sub	sp, #8
 800d564:	af00      	add	r7, sp, #0
 800d566:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d101      	bne.n	800d572 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800d56e:	2301      	movs	r3, #1
 800d570:	e04f      	b.n	800d612 <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800d578:	b2db      	uxtb	r3, r3
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d106      	bne.n	800d58c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	2200      	movs	r2, #0
 800d582:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800d586:	6878      	ldr	r0, [r7, #4]
 800d588:	f7f3 fd3c 	bl	8001004 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	2202      	movs	r2, #2
 800d590:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	681a      	ldr	r2, [r3, #0]
 800d59a:	4b20      	ldr	r3, [pc, #128]	; (800d61c <HAL_DMA2D_Init+0xbc>)
 800d59c:	4013      	ands	r3, r2
 800d59e:	687a      	ldr	r2, [r7, #4]
 800d5a0:	6851      	ldr	r1, [r2, #4]
 800d5a2:	687a      	ldr	r2, [r7, #4]
 800d5a4:	69d2      	ldr	r2, [r2, #28]
 800d5a6:	4311      	orrs	r1, r2
 800d5a8:	687a      	ldr	r2, [r7, #4]
 800d5aa:	6812      	ldr	r2, [r2, #0]
 800d5ac:	430b      	orrs	r3, r1
 800d5ae:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d5b6:	4b1a      	ldr	r3, [pc, #104]	; (800d620 <HAL_DMA2D_Init+0xc0>)
 800d5b8:	4013      	ands	r3, r2
 800d5ba:	687a      	ldr	r2, [r7, #4]
 800d5bc:	6891      	ldr	r1, [r2, #8]
 800d5be:	687a      	ldr	r2, [r7, #4]
 800d5c0:	6992      	ldr	r2, [r2, #24]
 800d5c2:	4311      	orrs	r1, r2
 800d5c4:	687a      	ldr	r2, [r7, #4]
 800d5c6:	6812      	ldr	r2, [r2, #0]
 800d5c8:	430b      	orrs	r3, r1
 800d5ca:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d5d2:	4b14      	ldr	r3, [pc, #80]	; (800d624 <HAL_DMA2D_Init+0xc4>)
 800d5d4:	4013      	ands	r3, r2
 800d5d6:	687a      	ldr	r2, [r7, #4]
 800d5d8:	68d1      	ldr	r1, [r2, #12]
 800d5da:	687a      	ldr	r2, [r7, #4]
 800d5dc:	6812      	ldr	r2, [r2, #0]
 800d5de:	430b      	orrs	r3, r1
 800d5e0:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5e8:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	691b      	ldr	r3, [r3, #16]
 800d5f0:	051a      	lsls	r2, r3, #20
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	695b      	ldr	r3, [r3, #20]
 800d5f6:	055b      	lsls	r3, r3, #21
 800d5f8:	431a      	orrs	r2, r3
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	430a      	orrs	r2, r1
 800d600:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	2200      	movs	r2, #0
 800d606:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	2201      	movs	r2, #1
 800d60c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return HAL_OK;
 800d610:	2300      	movs	r3, #0
}
 800d612:	4618      	mov	r0, r3
 800d614:	3708      	adds	r7, #8
 800d616:	46bd      	mov	sp, r7
 800d618:	bd80      	pop	{r7, pc}
 800d61a:	bf00      	nop
 800d61c:	fff8ffbf 	.word	0xfff8ffbf
 800d620:	fffffef8 	.word	0xfffffef8
 800d624:	ffff0000 	.word	0xffff0000

0800d628 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 800d628:	b580      	push	{r7, lr}
 800d62a:	b084      	sub	sp, #16
 800d62c:	af00      	add	r7, sp, #0
 800d62e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	685b      	ldr	r3, [r3, #4]
 800d636:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	f003 0301 	and.w	r3, r3, #1
 800d646:	2b00      	cmp	r3, #0
 800d648:	d026      	beq.n	800d698 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 800d64a:	68bb      	ldr	r3, [r7, #8]
 800d64c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d650:	2b00      	cmp	r3, #0
 800d652:	d021      	beq.n	800d698 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	681a      	ldr	r2, [r3, #0]
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d662:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d668:	f043 0201 	orr.w	r2, r3, #1
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	2201      	movs	r2, #1
 800d676:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	2204      	movs	r2, #4
 800d67c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	2200      	movs	r2, #0
 800d684:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d003      	beq.n	800d698 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d694:	6878      	ldr	r0, [r7, #4]
 800d696:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	f003 0320 	and.w	r3, r3, #32
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d026      	beq.n	800d6f0 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800d6a2:	68bb      	ldr	r3, [r7, #8]
 800d6a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d021      	beq.n	800d6f0 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	681a      	ldr	r2, [r3, #0]
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d6ba:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	2220      	movs	r2, #32
 800d6c2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d6c8:	f043 0202 	orr.w	r2, r3, #2
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	2204      	movs	r2, #4
 800d6d4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	2200      	movs	r2, #0
 800d6dc:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d003      	beq.n	800d6f0 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6ec:	6878      	ldr	r0, [r7, #4]
 800d6ee:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	f003 0308 	and.w	r3, r3, #8
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d026      	beq.n	800d748 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800d6fa:	68bb      	ldr	r3, [r7, #8]
 800d6fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d700:	2b00      	cmp	r3, #0
 800d702:	d021      	beq.n	800d748 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	681a      	ldr	r2, [r3, #0]
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d712:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	2208      	movs	r2, #8
 800d71a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d720:	f043 0204 	orr.w	r2, r3, #4
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	2204      	movs	r2, #4
 800d72c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	2200      	movs	r2, #0
 800d734:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d003      	beq.n	800d748 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d744:	6878      	ldr	r0, [r7, #4]
 800d746:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	f003 0304 	and.w	r3, r3, #4
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d013      	beq.n	800d77a <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800d752:	68bb      	ldr	r3, [r7, #8]
 800d754:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d00e      	beq.n	800d77a <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	681a      	ldr	r2, [r3, #0]
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d76a:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	2204      	movs	r2, #4
 800d772:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800d774:	6878      	ldr	r0, [r7, #4]
 800d776:	f000 f853 	bl	800d820 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	f003 0302 	and.w	r3, r3, #2
 800d780:	2b00      	cmp	r3, #0
 800d782:	d024      	beq.n	800d7ce <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800d784:	68bb      	ldr	r3, [r7, #8]
 800d786:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d01f      	beq.n	800d7ce <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	681a      	ldr	r2, [r3, #0]
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800d79c:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	2202      	movs	r2, #2
 800d7a4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	2201      	movs	r2, #1
 800d7b2:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	2200      	movs	r2, #0
 800d7ba:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferCpltCallback != NULL)
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	6a1b      	ldr	r3, [r3, #32]
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d003      	beq.n	800d7ce <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	6a1b      	ldr	r3, [r3, #32]
 800d7ca:	6878      	ldr	r0, [r7, #4]
 800d7cc:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	f003 0310 	and.w	r3, r3, #16
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d01f      	beq.n	800d818 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800d7d8:	68bb      	ldr	r3, [r7, #8]
 800d7da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d01a      	beq.n	800d818 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	681a      	ldr	r2, [r3, #0]
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800d7f0:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	2210      	movs	r2, #16
 800d7f8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	2201      	movs	r2, #1
 800d806:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	2200      	movs	r2, #0
 800d80e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800d812:	6878      	ldr	r0, [r7, #4]
 800d814:	f000 f80e 	bl	800d834 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 800d818:	bf00      	nop
 800d81a:	3710      	adds	r7, #16
 800d81c:	46bd      	mov	sp, r7
 800d81e:	bd80      	pop	{r7, pc}

0800d820 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800d820:	b480      	push	{r7}
 800d822:	b083      	sub	sp, #12
 800d824:	af00      	add	r7, sp, #0
 800d826:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 800d828:	bf00      	nop
 800d82a:	370c      	adds	r7, #12
 800d82c:	46bd      	mov	sp, r7
 800d82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d832:	4770      	bx	lr

0800d834 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800d834:	b480      	push	{r7}
 800d836:	b083      	sub	sp, #12
 800d838:	af00      	add	r7, sp, #0
 800d83a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 800d83c:	bf00      	nop
 800d83e:	370c      	adds	r7, #12
 800d840:	46bd      	mov	sp, r7
 800d842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d846:	4770      	bx	lr

0800d848 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800d848:	b480      	push	{r7}
 800d84a:	b087      	sub	sp, #28
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	6078      	str	r0, [r7, #4]
 800d850:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	685b      	ldr	r3, [r3, #4]
 800d856:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 800d85a:	683b      	ldr	r3, [r7, #0]
 800d85c:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800d864:	2b01      	cmp	r3, #1
 800d866:	d101      	bne.n	800d86c <HAL_DMA2D_ConfigLayer+0x24>
 800d868:	2302      	movs	r3, #2
 800d86a:	e092      	b.n	800d992 <HAL_DMA2D_ConfigLayer+0x14a>
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	2201      	movs	r2, #1
 800d870:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	2202      	movs	r2, #2
 800d878:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800d87c:	683a      	ldr	r2, [r7, #0]
 800d87e:	4613      	mov	r3, r2
 800d880:	00db      	lsls	r3, r3, #3
 800d882:	1a9b      	subs	r3, r3, r2
 800d884:	009b      	lsls	r3, r3, #2
 800d886:	3328      	adds	r3, #40	; 0x28
 800d888:	687a      	ldr	r2, [r7, #4]
 800d88a:	4413      	add	r3, r2
 800d88c:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	685a      	ldr	r2, [r3, #4]
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	689b      	ldr	r3, [r3, #8]
 800d896:	041b      	lsls	r3, r3, #16
 800d898:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	691b      	ldr	r3, [r3, #16]
 800d89e:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800d8a0:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	695b      	ldr	r3, [r3, #20]
 800d8a6:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800d8a8:	4313      	orrs	r3, r2
 800d8aa:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 800d8ac:	4b3c      	ldr	r3, [pc, #240]	; (800d9a0 <HAL_DMA2D_ConfigLayer+0x158>)
 800d8ae:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	685b      	ldr	r3, [r3, #4]
 800d8b4:	2b0a      	cmp	r3, #10
 800d8b6:	d003      	beq.n	800d8c0 <HAL_DMA2D_ConfigLayer+0x78>
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	685b      	ldr	r3, [r3, #4]
 800d8bc:	2b09      	cmp	r3, #9
 800d8be:	d107      	bne.n	800d8d0 <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	68db      	ldr	r3, [r3, #12]
 800d8c4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800d8c8:	693a      	ldr	r2, [r7, #16]
 800d8ca:	4313      	orrs	r3, r2
 800d8cc:	613b      	str	r3, [r7, #16]
 800d8ce:	e005      	b.n	800d8dc <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	68db      	ldr	r3, [r3, #12]
 800d8d4:	061b      	lsls	r3, r3, #24
 800d8d6:	693a      	ldr	r2, [r7, #16]
 800d8d8:	4313      	orrs	r3, r2
 800d8da:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800d8dc:	683b      	ldr	r3, [r7, #0]
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d120      	bne.n	800d924 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d8e8:	697b      	ldr	r3, [r7, #20]
 800d8ea:	43db      	mvns	r3, r3
 800d8ec:	ea02 0103 	and.w	r1, r2, r3
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	693a      	ldr	r2, [r7, #16]
 800d8f6:	430a      	orrs	r2, r1
 800d8f8:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	68fa      	ldr	r2, [r7, #12]
 800d900:	6812      	ldr	r2, [r2, #0]
 800d902:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	685b      	ldr	r3, [r3, #4]
 800d908:	2b0a      	cmp	r3, #10
 800d90a:	d003      	beq.n	800d914 <HAL_DMA2D_ConfigLayer+0xcc>
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	685b      	ldr	r3, [r3, #4]
 800d910:	2b09      	cmp	r3, #9
 800d912:	d135      	bne.n	800d980 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	68da      	ldr	r2, [r3, #12]
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800d920:	629a      	str	r2, [r3, #40]	; 0x28
 800d922:	e02d      	b.n	800d980 <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	685b      	ldr	r3, [r3, #4]
 800d928:	2b0b      	cmp	r3, #11
 800d92a:	d109      	bne.n	800d940 <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	699b      	ldr	r3, [r3, #24]
 800d930:	049b      	lsls	r3, r3, #18
 800d932:	693a      	ldr	r2, [r7, #16]
 800d934:	4313      	orrs	r3, r2
 800d936:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 800d938:	697b      	ldr	r3, [r7, #20]
 800d93a:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 800d93e:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	69da      	ldr	r2, [r3, #28]
 800d946:	697b      	ldr	r3, [r7, #20]
 800d948:	43db      	mvns	r3, r3
 800d94a:	ea02 0103 	and.w	r1, r2, r3
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	693a      	ldr	r2, [r7, #16]
 800d954:	430a      	orrs	r2, r1
 800d956:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	68fa      	ldr	r2, [r7, #12]
 800d95e:	6812      	ldr	r2, [r2, #0]
 800d960:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	685b      	ldr	r3, [r3, #4]
 800d966:	2b0a      	cmp	r3, #10
 800d968:	d003      	beq.n	800d972 <HAL_DMA2D_ConfigLayer+0x12a>
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	685b      	ldr	r3, [r3, #4]
 800d96e:	2b09      	cmp	r3, #9
 800d970:	d106      	bne.n	800d980 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	68da      	ldr	r2, [r3, #12]
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800d97e:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	2201      	movs	r2, #1
 800d984:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	2200      	movs	r2, #0
 800d98c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 800d990:	2300      	movs	r3, #0
}
 800d992:	4618      	mov	r0, r3
 800d994:	371c      	adds	r7, #28
 800d996:	46bd      	mov	sp, r7
 800d998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d99c:	4770      	bx	lr
 800d99e:	bf00      	nop
 800d9a0:	ff33000f 	.word	0xff33000f

0800d9a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800d9a4:	b480      	push	{r7}
 800d9a6:	b089      	sub	sp, #36	; 0x24
 800d9a8:	af00      	add	r7, sp, #0
 800d9aa:	6078      	str	r0, [r7, #4]
 800d9ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800d9ae:	2300      	movs	r3, #0
 800d9b0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800d9b2:	4b89      	ldr	r3, [pc, #548]	; (800dbd8 <HAL_GPIO_Init+0x234>)
 800d9b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800d9b6:	e194      	b.n	800dce2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800d9b8:	683b      	ldr	r3, [r7, #0]
 800d9ba:	681a      	ldr	r2, [r3, #0]
 800d9bc:	2101      	movs	r1, #1
 800d9be:	69fb      	ldr	r3, [r7, #28]
 800d9c0:	fa01 f303 	lsl.w	r3, r1, r3
 800d9c4:	4013      	ands	r3, r2
 800d9c6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800d9c8:	693b      	ldr	r3, [r7, #16]
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	f000 8186 	beq.w	800dcdc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800d9d0:	683b      	ldr	r3, [r7, #0]
 800d9d2:	685b      	ldr	r3, [r3, #4]
 800d9d4:	f003 0303 	and.w	r3, r3, #3
 800d9d8:	2b01      	cmp	r3, #1
 800d9da:	d005      	beq.n	800d9e8 <HAL_GPIO_Init+0x44>
 800d9dc:	683b      	ldr	r3, [r7, #0]
 800d9de:	685b      	ldr	r3, [r3, #4]
 800d9e0:	f003 0303 	and.w	r3, r3, #3
 800d9e4:	2b02      	cmp	r3, #2
 800d9e6:	d130      	bne.n	800da4a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	689b      	ldr	r3, [r3, #8]
 800d9ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800d9ee:	69fb      	ldr	r3, [r7, #28]
 800d9f0:	005b      	lsls	r3, r3, #1
 800d9f2:	2203      	movs	r2, #3
 800d9f4:	fa02 f303 	lsl.w	r3, r2, r3
 800d9f8:	43db      	mvns	r3, r3
 800d9fa:	69ba      	ldr	r2, [r7, #24]
 800d9fc:	4013      	ands	r3, r2
 800d9fe:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800da00:	683b      	ldr	r3, [r7, #0]
 800da02:	68da      	ldr	r2, [r3, #12]
 800da04:	69fb      	ldr	r3, [r7, #28]
 800da06:	005b      	lsls	r3, r3, #1
 800da08:	fa02 f303 	lsl.w	r3, r2, r3
 800da0c:	69ba      	ldr	r2, [r7, #24]
 800da0e:	4313      	orrs	r3, r2
 800da10:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	69ba      	ldr	r2, [r7, #24]
 800da16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	685b      	ldr	r3, [r3, #4]
 800da1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800da1e:	2201      	movs	r2, #1
 800da20:	69fb      	ldr	r3, [r7, #28]
 800da22:	fa02 f303 	lsl.w	r3, r2, r3
 800da26:	43db      	mvns	r3, r3
 800da28:	69ba      	ldr	r2, [r7, #24]
 800da2a:	4013      	ands	r3, r2
 800da2c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800da2e:	683b      	ldr	r3, [r7, #0]
 800da30:	685b      	ldr	r3, [r3, #4]
 800da32:	091b      	lsrs	r3, r3, #4
 800da34:	f003 0201 	and.w	r2, r3, #1
 800da38:	69fb      	ldr	r3, [r7, #28]
 800da3a:	fa02 f303 	lsl.w	r3, r2, r3
 800da3e:	69ba      	ldr	r2, [r7, #24]
 800da40:	4313      	orrs	r3, r2
 800da42:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	69ba      	ldr	r2, [r7, #24]
 800da48:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800da4a:	683b      	ldr	r3, [r7, #0]
 800da4c:	685b      	ldr	r3, [r3, #4]
 800da4e:	f003 0303 	and.w	r3, r3, #3
 800da52:	2b03      	cmp	r3, #3
 800da54:	d017      	beq.n	800da86 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	68db      	ldr	r3, [r3, #12]
 800da5a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800da5c:	69fb      	ldr	r3, [r7, #28]
 800da5e:	005b      	lsls	r3, r3, #1
 800da60:	2203      	movs	r2, #3
 800da62:	fa02 f303 	lsl.w	r3, r2, r3
 800da66:	43db      	mvns	r3, r3
 800da68:	69ba      	ldr	r2, [r7, #24]
 800da6a:	4013      	ands	r3, r2
 800da6c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800da6e:	683b      	ldr	r3, [r7, #0]
 800da70:	689a      	ldr	r2, [r3, #8]
 800da72:	69fb      	ldr	r3, [r7, #28]
 800da74:	005b      	lsls	r3, r3, #1
 800da76:	fa02 f303 	lsl.w	r3, r2, r3
 800da7a:	69ba      	ldr	r2, [r7, #24]
 800da7c:	4313      	orrs	r3, r2
 800da7e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	69ba      	ldr	r2, [r7, #24]
 800da84:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800da86:	683b      	ldr	r3, [r7, #0]
 800da88:	685b      	ldr	r3, [r3, #4]
 800da8a:	f003 0303 	and.w	r3, r3, #3
 800da8e:	2b02      	cmp	r3, #2
 800da90:	d123      	bne.n	800dada <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800da92:	69fb      	ldr	r3, [r7, #28]
 800da94:	08da      	lsrs	r2, r3, #3
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	3208      	adds	r2, #8
 800da9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800daa0:	69fb      	ldr	r3, [r7, #28]
 800daa2:	f003 0307 	and.w	r3, r3, #7
 800daa6:	009b      	lsls	r3, r3, #2
 800daa8:	220f      	movs	r2, #15
 800daaa:	fa02 f303 	lsl.w	r3, r2, r3
 800daae:	43db      	mvns	r3, r3
 800dab0:	69ba      	ldr	r2, [r7, #24]
 800dab2:	4013      	ands	r3, r2
 800dab4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800dab6:	683b      	ldr	r3, [r7, #0]
 800dab8:	691a      	ldr	r2, [r3, #16]
 800daba:	69fb      	ldr	r3, [r7, #28]
 800dabc:	f003 0307 	and.w	r3, r3, #7
 800dac0:	009b      	lsls	r3, r3, #2
 800dac2:	fa02 f303 	lsl.w	r3, r2, r3
 800dac6:	69ba      	ldr	r2, [r7, #24]
 800dac8:	4313      	orrs	r3, r2
 800daca:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800dacc:	69fb      	ldr	r3, [r7, #28]
 800dace:	08da      	lsrs	r2, r3, #3
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	3208      	adds	r2, #8
 800dad4:	69b9      	ldr	r1, [r7, #24]
 800dad6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800dae0:	69fb      	ldr	r3, [r7, #28]
 800dae2:	005b      	lsls	r3, r3, #1
 800dae4:	2203      	movs	r2, #3
 800dae6:	fa02 f303 	lsl.w	r3, r2, r3
 800daea:	43db      	mvns	r3, r3
 800daec:	69ba      	ldr	r2, [r7, #24]
 800daee:	4013      	ands	r3, r2
 800daf0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800daf2:	683b      	ldr	r3, [r7, #0]
 800daf4:	685b      	ldr	r3, [r3, #4]
 800daf6:	f003 0203 	and.w	r2, r3, #3
 800dafa:	69fb      	ldr	r3, [r7, #28]
 800dafc:	005b      	lsls	r3, r3, #1
 800dafe:	fa02 f303 	lsl.w	r3, r2, r3
 800db02:	69ba      	ldr	r2, [r7, #24]
 800db04:	4313      	orrs	r3, r2
 800db06:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	69ba      	ldr	r2, [r7, #24]
 800db0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800db0e:	683b      	ldr	r3, [r7, #0]
 800db10:	685b      	ldr	r3, [r3, #4]
 800db12:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800db16:	2b00      	cmp	r3, #0
 800db18:	f000 80e0 	beq.w	800dcdc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800db1c:	4b2f      	ldr	r3, [pc, #188]	; (800dbdc <HAL_GPIO_Init+0x238>)
 800db1e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800db22:	4a2e      	ldr	r2, [pc, #184]	; (800dbdc <HAL_GPIO_Init+0x238>)
 800db24:	f043 0302 	orr.w	r3, r3, #2
 800db28:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 800db2c:	4b2b      	ldr	r3, [pc, #172]	; (800dbdc <HAL_GPIO_Init+0x238>)
 800db2e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800db32:	f003 0302 	and.w	r3, r3, #2
 800db36:	60fb      	str	r3, [r7, #12]
 800db38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800db3a:	4a29      	ldr	r2, [pc, #164]	; (800dbe0 <HAL_GPIO_Init+0x23c>)
 800db3c:	69fb      	ldr	r3, [r7, #28]
 800db3e:	089b      	lsrs	r3, r3, #2
 800db40:	3302      	adds	r3, #2
 800db42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800db46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800db48:	69fb      	ldr	r3, [r7, #28]
 800db4a:	f003 0303 	and.w	r3, r3, #3
 800db4e:	009b      	lsls	r3, r3, #2
 800db50:	220f      	movs	r2, #15
 800db52:	fa02 f303 	lsl.w	r3, r2, r3
 800db56:	43db      	mvns	r3, r3
 800db58:	69ba      	ldr	r2, [r7, #24]
 800db5a:	4013      	ands	r3, r2
 800db5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	4a20      	ldr	r2, [pc, #128]	; (800dbe4 <HAL_GPIO_Init+0x240>)
 800db62:	4293      	cmp	r3, r2
 800db64:	d052      	beq.n	800dc0c <HAL_GPIO_Init+0x268>
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	4a1f      	ldr	r2, [pc, #124]	; (800dbe8 <HAL_GPIO_Init+0x244>)
 800db6a:	4293      	cmp	r3, r2
 800db6c:	d031      	beq.n	800dbd2 <HAL_GPIO_Init+0x22e>
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	4a1e      	ldr	r2, [pc, #120]	; (800dbec <HAL_GPIO_Init+0x248>)
 800db72:	4293      	cmp	r3, r2
 800db74:	d02b      	beq.n	800dbce <HAL_GPIO_Init+0x22a>
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	4a1d      	ldr	r2, [pc, #116]	; (800dbf0 <HAL_GPIO_Init+0x24c>)
 800db7a:	4293      	cmp	r3, r2
 800db7c:	d025      	beq.n	800dbca <HAL_GPIO_Init+0x226>
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	4a1c      	ldr	r2, [pc, #112]	; (800dbf4 <HAL_GPIO_Init+0x250>)
 800db82:	4293      	cmp	r3, r2
 800db84:	d01f      	beq.n	800dbc6 <HAL_GPIO_Init+0x222>
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	4a1b      	ldr	r2, [pc, #108]	; (800dbf8 <HAL_GPIO_Init+0x254>)
 800db8a:	4293      	cmp	r3, r2
 800db8c:	d019      	beq.n	800dbc2 <HAL_GPIO_Init+0x21e>
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	4a1a      	ldr	r2, [pc, #104]	; (800dbfc <HAL_GPIO_Init+0x258>)
 800db92:	4293      	cmp	r3, r2
 800db94:	d013      	beq.n	800dbbe <HAL_GPIO_Init+0x21a>
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	4a19      	ldr	r2, [pc, #100]	; (800dc00 <HAL_GPIO_Init+0x25c>)
 800db9a:	4293      	cmp	r3, r2
 800db9c:	d00d      	beq.n	800dbba <HAL_GPIO_Init+0x216>
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	4a18      	ldr	r2, [pc, #96]	; (800dc04 <HAL_GPIO_Init+0x260>)
 800dba2:	4293      	cmp	r3, r2
 800dba4:	d007      	beq.n	800dbb6 <HAL_GPIO_Init+0x212>
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	4a17      	ldr	r2, [pc, #92]	; (800dc08 <HAL_GPIO_Init+0x264>)
 800dbaa:	4293      	cmp	r3, r2
 800dbac:	d101      	bne.n	800dbb2 <HAL_GPIO_Init+0x20e>
 800dbae:	2309      	movs	r3, #9
 800dbb0:	e02d      	b.n	800dc0e <HAL_GPIO_Init+0x26a>
 800dbb2:	230a      	movs	r3, #10
 800dbb4:	e02b      	b.n	800dc0e <HAL_GPIO_Init+0x26a>
 800dbb6:	2308      	movs	r3, #8
 800dbb8:	e029      	b.n	800dc0e <HAL_GPIO_Init+0x26a>
 800dbba:	2307      	movs	r3, #7
 800dbbc:	e027      	b.n	800dc0e <HAL_GPIO_Init+0x26a>
 800dbbe:	2306      	movs	r3, #6
 800dbc0:	e025      	b.n	800dc0e <HAL_GPIO_Init+0x26a>
 800dbc2:	2305      	movs	r3, #5
 800dbc4:	e023      	b.n	800dc0e <HAL_GPIO_Init+0x26a>
 800dbc6:	2304      	movs	r3, #4
 800dbc8:	e021      	b.n	800dc0e <HAL_GPIO_Init+0x26a>
 800dbca:	2303      	movs	r3, #3
 800dbcc:	e01f      	b.n	800dc0e <HAL_GPIO_Init+0x26a>
 800dbce:	2302      	movs	r3, #2
 800dbd0:	e01d      	b.n	800dc0e <HAL_GPIO_Init+0x26a>
 800dbd2:	2301      	movs	r3, #1
 800dbd4:	e01b      	b.n	800dc0e <HAL_GPIO_Init+0x26a>
 800dbd6:	bf00      	nop
 800dbd8:	58000080 	.word	0x58000080
 800dbdc:	58024400 	.word	0x58024400
 800dbe0:	58000400 	.word	0x58000400
 800dbe4:	58020000 	.word	0x58020000
 800dbe8:	58020400 	.word	0x58020400
 800dbec:	58020800 	.word	0x58020800
 800dbf0:	58020c00 	.word	0x58020c00
 800dbf4:	58021000 	.word	0x58021000
 800dbf8:	58021400 	.word	0x58021400
 800dbfc:	58021800 	.word	0x58021800
 800dc00:	58021c00 	.word	0x58021c00
 800dc04:	58022000 	.word	0x58022000
 800dc08:	58022400 	.word	0x58022400
 800dc0c:	2300      	movs	r3, #0
 800dc0e:	69fa      	ldr	r2, [r7, #28]
 800dc10:	f002 0203 	and.w	r2, r2, #3
 800dc14:	0092      	lsls	r2, r2, #2
 800dc16:	4093      	lsls	r3, r2
 800dc18:	69ba      	ldr	r2, [r7, #24]
 800dc1a:	4313      	orrs	r3, r2
 800dc1c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800dc1e:	4938      	ldr	r1, [pc, #224]	; (800dd00 <HAL_GPIO_Init+0x35c>)
 800dc20:	69fb      	ldr	r3, [r7, #28]
 800dc22:	089b      	lsrs	r3, r3, #2
 800dc24:	3302      	adds	r3, #2
 800dc26:	69ba      	ldr	r2, [r7, #24]
 800dc28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800dc2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800dc34:	693b      	ldr	r3, [r7, #16]
 800dc36:	43db      	mvns	r3, r3
 800dc38:	69ba      	ldr	r2, [r7, #24]
 800dc3a:	4013      	ands	r3, r2
 800dc3c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800dc3e:	683b      	ldr	r3, [r7, #0]
 800dc40:	685b      	ldr	r3, [r3, #4]
 800dc42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d003      	beq.n	800dc52 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800dc4a:	69ba      	ldr	r2, [r7, #24]
 800dc4c:	693b      	ldr	r3, [r7, #16]
 800dc4e:	4313      	orrs	r3, r2
 800dc50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800dc52:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800dc56:	69bb      	ldr	r3, [r7, #24]
 800dc58:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800dc5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800dc5e:	685b      	ldr	r3, [r3, #4]
 800dc60:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800dc62:	693b      	ldr	r3, [r7, #16]
 800dc64:	43db      	mvns	r3, r3
 800dc66:	69ba      	ldr	r2, [r7, #24]
 800dc68:	4013      	ands	r3, r2
 800dc6a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800dc6c:	683b      	ldr	r3, [r7, #0]
 800dc6e:	685b      	ldr	r3, [r3, #4]
 800dc70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d003      	beq.n	800dc80 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800dc78:	69ba      	ldr	r2, [r7, #24]
 800dc7a:	693b      	ldr	r3, [r7, #16]
 800dc7c:	4313      	orrs	r3, r2
 800dc7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800dc80:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800dc84:	69bb      	ldr	r3, [r7, #24]
 800dc86:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800dc88:	697b      	ldr	r3, [r7, #20]
 800dc8a:	685b      	ldr	r3, [r3, #4]
 800dc8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800dc8e:	693b      	ldr	r3, [r7, #16]
 800dc90:	43db      	mvns	r3, r3
 800dc92:	69ba      	ldr	r2, [r7, #24]
 800dc94:	4013      	ands	r3, r2
 800dc96:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800dc98:	683b      	ldr	r3, [r7, #0]
 800dc9a:	685b      	ldr	r3, [r3, #4]
 800dc9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d003      	beq.n	800dcac <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800dca4:	69ba      	ldr	r2, [r7, #24]
 800dca6:	693b      	ldr	r3, [r7, #16]
 800dca8:	4313      	orrs	r3, r2
 800dcaa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800dcac:	697b      	ldr	r3, [r7, #20]
 800dcae:	69ba      	ldr	r2, [r7, #24]
 800dcb0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800dcb2:	697b      	ldr	r3, [r7, #20]
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800dcb8:	693b      	ldr	r3, [r7, #16]
 800dcba:	43db      	mvns	r3, r3
 800dcbc:	69ba      	ldr	r2, [r7, #24]
 800dcbe:	4013      	ands	r3, r2
 800dcc0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800dcc2:	683b      	ldr	r3, [r7, #0]
 800dcc4:	685b      	ldr	r3, [r3, #4]
 800dcc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d003      	beq.n	800dcd6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800dcce:	69ba      	ldr	r2, [r7, #24]
 800dcd0:	693b      	ldr	r3, [r7, #16]
 800dcd2:	4313      	orrs	r3, r2
 800dcd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800dcd6:	697b      	ldr	r3, [r7, #20]
 800dcd8:	69ba      	ldr	r2, [r7, #24]
 800dcda:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800dcdc:	69fb      	ldr	r3, [r7, #28]
 800dcde:	3301      	adds	r3, #1
 800dce0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800dce2:	683b      	ldr	r3, [r7, #0]
 800dce4:	681a      	ldr	r2, [r3, #0]
 800dce6:	69fb      	ldr	r3, [r7, #28]
 800dce8:	fa22 f303 	lsr.w	r3, r2, r3
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	f47f ae63 	bne.w	800d9b8 <HAL_GPIO_Init+0x14>
  }
}
 800dcf2:	bf00      	nop
 800dcf4:	bf00      	nop
 800dcf6:	3724      	adds	r7, #36	; 0x24
 800dcf8:	46bd      	mov	sp, r7
 800dcfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcfe:	4770      	bx	lr
 800dd00:	58000400 	.word	0x58000400

0800dd04 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800dd04:	b480      	push	{r7}
 800dd06:	b087      	sub	sp, #28
 800dd08:	af00      	add	r7, sp, #0
 800dd0a:	6078      	str	r0, [r7, #4]
 800dd0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800dd0e:	2300      	movs	r3, #0
 800dd10:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800dd12:	4b75      	ldr	r3, [pc, #468]	; (800dee8 <HAL_GPIO_DeInit+0x1e4>)
 800dd14:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 800dd16:	e0d9      	b.n	800decc <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 800dd18:	2201      	movs	r2, #1
 800dd1a:	697b      	ldr	r3, [r7, #20]
 800dd1c:	fa02 f303 	lsl.w	r3, r2, r3
 800dd20:	683a      	ldr	r2, [r7, #0]
 800dd22:	4013      	ands	r3, r2
 800dd24:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	f000 80cc 	beq.w	800dec6 <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 800dd2e:	4a6f      	ldr	r2, [pc, #444]	; (800deec <HAL_GPIO_DeInit+0x1e8>)
 800dd30:	697b      	ldr	r3, [r7, #20]
 800dd32:	089b      	lsrs	r3, r3, #2
 800dd34:	3302      	adds	r3, #2
 800dd36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dd3a:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800dd3c:	697b      	ldr	r3, [r7, #20]
 800dd3e:	f003 0303 	and.w	r3, r3, #3
 800dd42:	009b      	lsls	r3, r3, #2
 800dd44:	220f      	movs	r2, #15
 800dd46:	fa02 f303 	lsl.w	r3, r2, r3
 800dd4a:	68ba      	ldr	r2, [r7, #8]
 800dd4c:	4013      	ands	r3, r2
 800dd4e:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	4a67      	ldr	r2, [pc, #412]	; (800def0 <HAL_GPIO_DeInit+0x1ec>)
 800dd54:	4293      	cmp	r3, r2
 800dd56:	d037      	beq.n	800ddc8 <HAL_GPIO_DeInit+0xc4>
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	4a66      	ldr	r2, [pc, #408]	; (800def4 <HAL_GPIO_DeInit+0x1f0>)
 800dd5c:	4293      	cmp	r3, r2
 800dd5e:	d031      	beq.n	800ddc4 <HAL_GPIO_DeInit+0xc0>
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	4a65      	ldr	r2, [pc, #404]	; (800def8 <HAL_GPIO_DeInit+0x1f4>)
 800dd64:	4293      	cmp	r3, r2
 800dd66:	d02b      	beq.n	800ddc0 <HAL_GPIO_DeInit+0xbc>
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	4a64      	ldr	r2, [pc, #400]	; (800defc <HAL_GPIO_DeInit+0x1f8>)
 800dd6c:	4293      	cmp	r3, r2
 800dd6e:	d025      	beq.n	800ddbc <HAL_GPIO_DeInit+0xb8>
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	4a63      	ldr	r2, [pc, #396]	; (800df00 <HAL_GPIO_DeInit+0x1fc>)
 800dd74:	4293      	cmp	r3, r2
 800dd76:	d01f      	beq.n	800ddb8 <HAL_GPIO_DeInit+0xb4>
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	4a62      	ldr	r2, [pc, #392]	; (800df04 <HAL_GPIO_DeInit+0x200>)
 800dd7c:	4293      	cmp	r3, r2
 800dd7e:	d019      	beq.n	800ddb4 <HAL_GPIO_DeInit+0xb0>
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	4a61      	ldr	r2, [pc, #388]	; (800df08 <HAL_GPIO_DeInit+0x204>)
 800dd84:	4293      	cmp	r3, r2
 800dd86:	d013      	beq.n	800ddb0 <HAL_GPIO_DeInit+0xac>
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	4a60      	ldr	r2, [pc, #384]	; (800df0c <HAL_GPIO_DeInit+0x208>)
 800dd8c:	4293      	cmp	r3, r2
 800dd8e:	d00d      	beq.n	800ddac <HAL_GPIO_DeInit+0xa8>
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	4a5f      	ldr	r2, [pc, #380]	; (800df10 <HAL_GPIO_DeInit+0x20c>)
 800dd94:	4293      	cmp	r3, r2
 800dd96:	d007      	beq.n	800dda8 <HAL_GPIO_DeInit+0xa4>
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	4a5e      	ldr	r2, [pc, #376]	; (800df14 <HAL_GPIO_DeInit+0x210>)
 800dd9c:	4293      	cmp	r3, r2
 800dd9e:	d101      	bne.n	800dda4 <HAL_GPIO_DeInit+0xa0>
 800dda0:	2309      	movs	r3, #9
 800dda2:	e012      	b.n	800ddca <HAL_GPIO_DeInit+0xc6>
 800dda4:	230a      	movs	r3, #10
 800dda6:	e010      	b.n	800ddca <HAL_GPIO_DeInit+0xc6>
 800dda8:	2308      	movs	r3, #8
 800ddaa:	e00e      	b.n	800ddca <HAL_GPIO_DeInit+0xc6>
 800ddac:	2307      	movs	r3, #7
 800ddae:	e00c      	b.n	800ddca <HAL_GPIO_DeInit+0xc6>
 800ddb0:	2306      	movs	r3, #6
 800ddb2:	e00a      	b.n	800ddca <HAL_GPIO_DeInit+0xc6>
 800ddb4:	2305      	movs	r3, #5
 800ddb6:	e008      	b.n	800ddca <HAL_GPIO_DeInit+0xc6>
 800ddb8:	2304      	movs	r3, #4
 800ddba:	e006      	b.n	800ddca <HAL_GPIO_DeInit+0xc6>
 800ddbc:	2303      	movs	r3, #3
 800ddbe:	e004      	b.n	800ddca <HAL_GPIO_DeInit+0xc6>
 800ddc0:	2302      	movs	r3, #2
 800ddc2:	e002      	b.n	800ddca <HAL_GPIO_DeInit+0xc6>
 800ddc4:	2301      	movs	r3, #1
 800ddc6:	e000      	b.n	800ddca <HAL_GPIO_DeInit+0xc6>
 800ddc8:	2300      	movs	r3, #0
 800ddca:	697a      	ldr	r2, [r7, #20]
 800ddcc:	f002 0203 	and.w	r2, r2, #3
 800ddd0:	0092      	lsls	r2, r2, #2
 800ddd2:	4093      	lsls	r3, r2
 800ddd4:	68ba      	ldr	r2, [r7, #8]
 800ddd6:	429a      	cmp	r2, r3
 800ddd8:	d136      	bne.n	800de48 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800ddda:	693b      	ldr	r3, [r7, #16]
 800dddc:	681a      	ldr	r2, [r3, #0]
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	43db      	mvns	r3, r3
 800dde2:	401a      	ands	r2, r3
 800dde4:	693b      	ldr	r3, [r7, #16]
 800dde6:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 800dde8:	693b      	ldr	r3, [r7, #16]
 800ddea:	685a      	ldr	r2, [r3, #4]
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	43db      	mvns	r3, r3
 800ddf0:	401a      	ands	r2, r3
 800ddf2:	693b      	ldr	r3, [r7, #16]
 800ddf4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800ddf6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ddfa:	685a      	ldr	r2, [r3, #4]
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	43db      	mvns	r3, r3
 800de00:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800de04:	4013      	ands	r3, r2
 800de06:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 800de08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800de0c:	681a      	ldr	r2, [r3, #0]
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	43db      	mvns	r3, r3
 800de12:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800de16:	4013      	ands	r3, r2
 800de18:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 800de1a:	697b      	ldr	r3, [r7, #20]
 800de1c:	f003 0303 	and.w	r3, r3, #3
 800de20:	009b      	lsls	r3, r3, #2
 800de22:	220f      	movs	r2, #15
 800de24:	fa02 f303 	lsl.w	r3, r2, r3
 800de28:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800de2a:	4a30      	ldr	r2, [pc, #192]	; (800deec <HAL_GPIO_DeInit+0x1e8>)
 800de2c:	697b      	ldr	r3, [r7, #20]
 800de2e:	089b      	lsrs	r3, r3, #2
 800de30:	3302      	adds	r3, #2
 800de32:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800de36:	68bb      	ldr	r3, [r7, #8]
 800de38:	43da      	mvns	r2, r3
 800de3a:	482c      	ldr	r0, [pc, #176]	; (800deec <HAL_GPIO_DeInit+0x1e8>)
 800de3c:	697b      	ldr	r3, [r7, #20]
 800de3e:	089b      	lsrs	r3, r3, #2
 800de40:	400a      	ands	r2, r1
 800de42:	3302      	adds	r3, #2
 800de44:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	681a      	ldr	r2, [r3, #0]
 800de4c:	697b      	ldr	r3, [r7, #20]
 800de4e:	005b      	lsls	r3, r3, #1
 800de50:	2103      	movs	r1, #3
 800de52:	fa01 f303 	lsl.w	r3, r1, r3
 800de56:	431a      	orrs	r2, r3
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800de5c:	697b      	ldr	r3, [r7, #20]
 800de5e:	08da      	lsrs	r2, r3, #3
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	3208      	adds	r2, #8
 800de64:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800de68:	697b      	ldr	r3, [r7, #20]
 800de6a:	f003 0307 	and.w	r3, r3, #7
 800de6e:	009b      	lsls	r3, r3, #2
 800de70:	220f      	movs	r2, #15
 800de72:	fa02 f303 	lsl.w	r3, r2, r3
 800de76:	43db      	mvns	r3, r3
 800de78:	697a      	ldr	r2, [r7, #20]
 800de7a:	08d2      	lsrs	r2, r2, #3
 800de7c:	4019      	ands	r1, r3
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	3208      	adds	r2, #8
 800de82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	68da      	ldr	r2, [r3, #12]
 800de8a:	697b      	ldr	r3, [r7, #20]
 800de8c:	005b      	lsls	r3, r3, #1
 800de8e:	2103      	movs	r1, #3
 800de90:	fa01 f303 	lsl.w	r3, r1, r3
 800de94:	43db      	mvns	r3, r3
 800de96:	401a      	ands	r2, r3
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	685a      	ldr	r2, [r3, #4]
 800dea0:	2101      	movs	r1, #1
 800dea2:	697b      	ldr	r3, [r7, #20]
 800dea4:	fa01 f303 	lsl.w	r3, r1, r3
 800dea8:	43db      	mvns	r3, r3
 800deaa:	401a      	ands	r2, r3
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	689a      	ldr	r2, [r3, #8]
 800deb4:	697b      	ldr	r3, [r7, #20]
 800deb6:	005b      	lsls	r3, r3, #1
 800deb8:	2103      	movs	r1, #3
 800deba:	fa01 f303 	lsl.w	r3, r1, r3
 800debe:	43db      	mvns	r3, r3
 800dec0:	401a      	ands	r2, r3
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	609a      	str	r2, [r3, #8]
    }

    position++;
 800dec6:	697b      	ldr	r3, [r7, #20]
 800dec8:	3301      	adds	r3, #1
 800deca:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 800decc:	683a      	ldr	r2, [r7, #0]
 800dece:	697b      	ldr	r3, [r7, #20]
 800ded0:	fa22 f303 	lsr.w	r3, r2, r3
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	f47f af1f 	bne.w	800dd18 <HAL_GPIO_DeInit+0x14>
  }
}
 800deda:	bf00      	nop
 800dedc:	bf00      	nop
 800dede:	371c      	adds	r7, #28
 800dee0:	46bd      	mov	sp, r7
 800dee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dee6:	4770      	bx	lr
 800dee8:	58000080 	.word	0x58000080
 800deec:	58000400 	.word	0x58000400
 800def0:	58020000 	.word	0x58020000
 800def4:	58020400 	.word	0x58020400
 800def8:	58020800 	.word	0x58020800
 800defc:	58020c00 	.word	0x58020c00
 800df00:	58021000 	.word	0x58021000
 800df04:	58021400 	.word	0x58021400
 800df08:	58021800 	.word	0x58021800
 800df0c:	58021c00 	.word	0x58021c00
 800df10:	58022000 	.word	0x58022000
 800df14:	58022400 	.word	0x58022400

0800df18 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800df18:	b480      	push	{r7}
 800df1a:	b085      	sub	sp, #20
 800df1c:	af00      	add	r7, sp, #0
 800df1e:	6078      	str	r0, [r7, #4]
 800df20:	460b      	mov	r3, r1
 800df22:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	691a      	ldr	r2, [r3, #16]
 800df28:	887b      	ldrh	r3, [r7, #2]
 800df2a:	4013      	ands	r3, r2
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d002      	beq.n	800df36 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800df30:	2301      	movs	r3, #1
 800df32:	73fb      	strb	r3, [r7, #15]
 800df34:	e001      	b.n	800df3a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800df36:	2300      	movs	r3, #0
 800df38:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800df3a:	7bfb      	ldrb	r3, [r7, #15]
}
 800df3c:	4618      	mov	r0, r3
 800df3e:	3714      	adds	r7, #20
 800df40:	46bd      	mov	sp, r7
 800df42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df46:	4770      	bx	lr

0800df48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800df48:	b480      	push	{r7}
 800df4a:	b083      	sub	sp, #12
 800df4c:	af00      	add	r7, sp, #0
 800df4e:	6078      	str	r0, [r7, #4]
 800df50:	460b      	mov	r3, r1
 800df52:	807b      	strh	r3, [r7, #2]
 800df54:	4613      	mov	r3, r2
 800df56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800df58:	787b      	ldrb	r3, [r7, #1]
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d003      	beq.n	800df66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800df5e:	887a      	ldrh	r2, [r7, #2]
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800df64:	e003      	b.n	800df6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800df66:	887b      	ldrh	r3, [r7, #2]
 800df68:	041a      	lsls	r2, r3, #16
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	619a      	str	r2, [r3, #24]
}
 800df6e:	bf00      	nop
 800df70:	370c      	adds	r7, #12
 800df72:	46bd      	mov	sp, r7
 800df74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df78:	4770      	bx	lr

0800df7a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800df7a:	b480      	push	{r7}
 800df7c:	b085      	sub	sp, #20
 800df7e:	af00      	add	r7, sp, #0
 800df80:	6078      	str	r0, [r7, #4]
 800df82:	460b      	mov	r3, r1
 800df84:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	695b      	ldr	r3, [r3, #20]
 800df8a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800df8c:	887a      	ldrh	r2, [r7, #2]
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	4013      	ands	r3, r2
 800df92:	041a      	lsls	r2, r3, #16
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	43d9      	mvns	r1, r3
 800df98:	887b      	ldrh	r3, [r7, #2]
 800df9a:	400b      	ands	r3, r1
 800df9c:	431a      	orrs	r2, r3
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	619a      	str	r2, [r3, #24]
}
 800dfa2:	bf00      	nop
 800dfa4:	3714      	adds	r7, #20
 800dfa6:	46bd      	mov	sp, r7
 800dfa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfac:	4770      	bx	lr

0800dfae <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800dfae:	b580      	push	{r7, lr}
 800dfb0:	b082      	sub	sp, #8
 800dfb2:	af00      	add	r7, sp, #0
 800dfb4:	4603      	mov	r3, r0
 800dfb6:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800dfb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800dfbc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800dfc0:	88fb      	ldrh	r3, [r7, #6]
 800dfc2:	4013      	ands	r3, r2
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d008      	beq.n	800dfda <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800dfc8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800dfcc:	88fb      	ldrh	r3, [r7, #6]
 800dfce:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800dfd2:	88fb      	ldrh	r3, [r7, #6]
 800dfd4:	4618      	mov	r0, r3
 800dfd6:	f000 f804 	bl	800dfe2 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800dfda:	bf00      	nop
 800dfdc:	3708      	adds	r7, #8
 800dfde:	46bd      	mov	sp, r7
 800dfe0:	bd80      	pop	{r7, pc}

0800dfe2 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800dfe2:	b480      	push	{r7}
 800dfe4:	b083      	sub	sp, #12
 800dfe6:	af00      	add	r7, sp, #0
 800dfe8:	4603      	mov	r3, r0
 800dfea:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800dfec:	bf00      	nop
 800dfee:	370c      	adds	r7, #12
 800dff0:	46bd      	mov	sp, r7
 800dff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff6:	4770      	bx	lr

0800dff8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800dff8:	b580      	push	{r7, lr}
 800dffa:	b082      	sub	sp, #8
 800dffc:	af00      	add	r7, sp, #0
 800dffe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	2b00      	cmp	r3, #0
 800e004:	d101      	bne.n	800e00a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800e006:	2301      	movs	r3, #1
 800e008:	e07f      	b.n	800e10a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e010:	b2db      	uxtb	r3, r3
 800e012:	2b00      	cmp	r3, #0
 800e014:	d106      	bne.n	800e024 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	2200      	movs	r2, #0
 800e01a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800e01e:	6878      	ldr	r0, [r7, #4]
 800e020:	f7f3 f818 	bl	8001054 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	2224      	movs	r2, #36	; 0x24
 800e028:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	681a      	ldr	r2, [r3, #0]
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	f022 0201 	bic.w	r2, r2, #1
 800e03a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	685a      	ldr	r2, [r3, #4]
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800e048:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	689a      	ldr	r2, [r3, #8]
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800e058:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	68db      	ldr	r3, [r3, #12]
 800e05e:	2b01      	cmp	r3, #1
 800e060:	d107      	bne.n	800e072 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	689a      	ldr	r2, [r3, #8]
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e06e:	609a      	str	r2, [r3, #8]
 800e070:	e006      	b.n	800e080 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	689a      	ldr	r2, [r3, #8]
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800e07e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	68db      	ldr	r3, [r3, #12]
 800e084:	2b02      	cmp	r3, #2
 800e086:	d104      	bne.n	800e092 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e090:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	6859      	ldr	r1, [r3, #4]
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	681a      	ldr	r2, [r3, #0]
 800e09c:	4b1d      	ldr	r3, [pc, #116]	; (800e114 <HAL_I2C_Init+0x11c>)
 800e09e:	430b      	orrs	r3, r1
 800e0a0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	68da      	ldr	r2, [r3, #12]
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800e0b0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	691a      	ldr	r2, [r3, #16]
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	695b      	ldr	r3, [r3, #20]
 800e0ba:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	699b      	ldr	r3, [r3, #24]
 800e0c2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	430a      	orrs	r2, r1
 800e0ca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	69d9      	ldr	r1, [r3, #28]
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	6a1a      	ldr	r2, [r3, #32]
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	430a      	orrs	r2, r1
 800e0da:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	681a      	ldr	r2, [r3, #0]
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	f042 0201 	orr.w	r2, r2, #1
 800e0ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	2200      	movs	r2, #0
 800e0f0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	2220      	movs	r2, #32
 800e0f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	2200      	movs	r2, #0
 800e0fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	2200      	movs	r2, #0
 800e104:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800e108:	2300      	movs	r3, #0
}
 800e10a:	4618      	mov	r0, r3
 800e10c:	3708      	adds	r7, #8
 800e10e:	46bd      	mov	sp, r7
 800e110:	bd80      	pop	{r7, pc}
 800e112:	bf00      	nop
 800e114:	02008000 	.word	0x02008000

0800e118 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800e118:	b580      	push	{r7, lr}
 800e11a:	b082      	sub	sp, #8
 800e11c:	af00      	add	r7, sp, #0
 800e11e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	2b00      	cmp	r3, #0
 800e124:	d101      	bne.n	800e12a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800e126:	2301      	movs	r3, #1
 800e128:	e021      	b.n	800e16e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	2224      	movs	r2, #36	; 0x24
 800e12e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	681a      	ldr	r2, [r3, #0]
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	f022 0201 	bic.w	r2, r2, #1
 800e140:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800e142:	6878      	ldr	r0, [r7, #4]
 800e144:	f7f2 fff0 	bl	8001128 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	2200      	movs	r2, #0
 800e14c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	2200      	movs	r2, #0
 800e152:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	2200      	movs	r2, #0
 800e15a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	2200      	movs	r2, #0
 800e160:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	2200      	movs	r2, #0
 800e168:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800e16c:	2300      	movs	r3, #0
}
 800e16e:	4618      	mov	r0, r3
 800e170:	3708      	adds	r7, #8
 800e172:	46bd      	mov	sp, r7
 800e174:	bd80      	pop	{r7, pc}
	...

0800e178 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e178:	b580      	push	{r7, lr}
 800e17a:	b088      	sub	sp, #32
 800e17c:	af02      	add	r7, sp, #8
 800e17e:	60f8      	str	r0, [r7, #12]
 800e180:	4608      	mov	r0, r1
 800e182:	4611      	mov	r1, r2
 800e184:	461a      	mov	r2, r3
 800e186:	4603      	mov	r3, r0
 800e188:	817b      	strh	r3, [r7, #10]
 800e18a:	460b      	mov	r3, r1
 800e18c:	813b      	strh	r3, [r7, #8]
 800e18e:	4613      	mov	r3, r2
 800e190:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e198:	b2db      	uxtb	r3, r3
 800e19a:	2b20      	cmp	r3, #32
 800e19c:	f040 80f9 	bne.w	800e392 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800e1a0:	6a3b      	ldr	r3, [r7, #32]
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d002      	beq.n	800e1ac <HAL_I2C_Mem_Write+0x34>
 800e1a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d105      	bne.n	800e1b8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e1b2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800e1b4:	2301      	movs	r3, #1
 800e1b6:	e0ed      	b.n	800e394 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e1be:	2b01      	cmp	r3, #1
 800e1c0:	d101      	bne.n	800e1c6 <HAL_I2C_Mem_Write+0x4e>
 800e1c2:	2302      	movs	r3, #2
 800e1c4:	e0e6      	b.n	800e394 <HAL_I2C_Mem_Write+0x21c>
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	2201      	movs	r2, #1
 800e1ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800e1ce:	f7fe ff17 	bl	800d000 <HAL_GetTick>
 800e1d2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800e1d4:	697b      	ldr	r3, [r7, #20]
 800e1d6:	9300      	str	r3, [sp, #0]
 800e1d8:	2319      	movs	r3, #25
 800e1da:	2201      	movs	r2, #1
 800e1dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800e1e0:	68f8      	ldr	r0, [r7, #12]
 800e1e2:	f000 fadd 	bl	800e7a0 <I2C_WaitOnFlagUntilTimeout>
 800e1e6:	4603      	mov	r3, r0
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d001      	beq.n	800e1f0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800e1ec:	2301      	movs	r3, #1
 800e1ee:	e0d1      	b.n	800e394 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	2221      	movs	r2, #33	; 0x21
 800e1f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	2240      	movs	r2, #64	; 0x40
 800e1fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	2200      	movs	r2, #0
 800e204:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	6a3a      	ldr	r2, [r7, #32]
 800e20a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e210:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800e212:	68fb      	ldr	r3, [r7, #12]
 800e214:	2200      	movs	r2, #0
 800e216:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800e218:	88f8      	ldrh	r0, [r7, #6]
 800e21a:	893a      	ldrh	r2, [r7, #8]
 800e21c:	8979      	ldrh	r1, [r7, #10]
 800e21e:	697b      	ldr	r3, [r7, #20]
 800e220:	9301      	str	r3, [sp, #4]
 800e222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e224:	9300      	str	r3, [sp, #0]
 800e226:	4603      	mov	r3, r0
 800e228:	68f8      	ldr	r0, [r7, #12]
 800e22a:	f000 f9ed 	bl	800e608 <I2C_RequestMemoryWrite>
 800e22e:	4603      	mov	r3, r0
 800e230:	2b00      	cmp	r3, #0
 800e232:	d005      	beq.n	800e240 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	2200      	movs	r2, #0
 800e238:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800e23c:	2301      	movs	r3, #1
 800e23e:	e0a9      	b.n	800e394 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e244:	b29b      	uxth	r3, r3
 800e246:	2bff      	cmp	r3, #255	; 0xff
 800e248:	d90e      	bls.n	800e268 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	22ff      	movs	r2, #255	; 0xff
 800e24e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e254:	b2da      	uxtb	r2, r3
 800e256:	8979      	ldrh	r1, [r7, #10]
 800e258:	2300      	movs	r3, #0
 800e25a:	9300      	str	r3, [sp, #0]
 800e25c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e260:	68f8      	ldr	r0, [r7, #12]
 800e262:	f000 fc57 	bl	800eb14 <I2C_TransferConfig>
 800e266:	e00f      	b.n	800e288 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e26c:	b29a      	uxth	r2, r3
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e276:	b2da      	uxtb	r2, r3
 800e278:	8979      	ldrh	r1, [r7, #10]
 800e27a:	2300      	movs	r3, #0
 800e27c:	9300      	str	r3, [sp, #0]
 800e27e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e282:	68f8      	ldr	r0, [r7, #12]
 800e284:	f000 fc46 	bl	800eb14 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e288:	697a      	ldr	r2, [r7, #20]
 800e28a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e28c:	68f8      	ldr	r0, [r7, #12]
 800e28e:	f000 fad6 	bl	800e83e <I2C_WaitOnTXISFlagUntilTimeout>
 800e292:	4603      	mov	r3, r0
 800e294:	2b00      	cmp	r3, #0
 800e296:	d001      	beq.n	800e29c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800e298:	2301      	movs	r3, #1
 800e29a:	e07b      	b.n	800e394 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2a0:	781a      	ldrb	r2, [r3, #0]
 800e2a2:	68fb      	ldr	r3, [r7, #12]
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2ac:	1c5a      	adds	r2, r3, #1
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e2b6:	b29b      	uxth	r3, r3
 800e2b8:	3b01      	subs	r3, #1
 800e2ba:	b29a      	uxth	r2, r3
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e2c4:	3b01      	subs	r3, #1
 800e2c6:	b29a      	uxth	r2, r3
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e2d0:	b29b      	uxth	r3, r3
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d034      	beq.n	800e340 <HAL_I2C_Mem_Write+0x1c8>
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d130      	bne.n	800e340 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800e2de:	697b      	ldr	r3, [r7, #20]
 800e2e0:	9300      	str	r3, [sp, #0]
 800e2e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2e4:	2200      	movs	r2, #0
 800e2e6:	2180      	movs	r1, #128	; 0x80
 800e2e8:	68f8      	ldr	r0, [r7, #12]
 800e2ea:	f000 fa59 	bl	800e7a0 <I2C_WaitOnFlagUntilTimeout>
 800e2ee:	4603      	mov	r3, r0
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d001      	beq.n	800e2f8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800e2f4:	2301      	movs	r3, #1
 800e2f6:	e04d      	b.n	800e394 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e2fc:	b29b      	uxth	r3, r3
 800e2fe:	2bff      	cmp	r3, #255	; 0xff
 800e300:	d90e      	bls.n	800e320 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800e302:	68fb      	ldr	r3, [r7, #12]
 800e304:	22ff      	movs	r2, #255	; 0xff
 800e306:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e30c:	b2da      	uxtb	r2, r3
 800e30e:	8979      	ldrh	r1, [r7, #10]
 800e310:	2300      	movs	r3, #0
 800e312:	9300      	str	r3, [sp, #0]
 800e314:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e318:	68f8      	ldr	r0, [r7, #12]
 800e31a:	f000 fbfb 	bl	800eb14 <I2C_TransferConfig>
 800e31e:	e00f      	b.n	800e340 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e324:	b29a      	uxth	r2, r3
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e32e:	b2da      	uxtb	r2, r3
 800e330:	8979      	ldrh	r1, [r7, #10]
 800e332:	2300      	movs	r3, #0
 800e334:	9300      	str	r3, [sp, #0]
 800e336:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e33a:	68f8      	ldr	r0, [r7, #12]
 800e33c:	f000 fbea 	bl	800eb14 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800e340:	68fb      	ldr	r3, [r7, #12]
 800e342:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e344:	b29b      	uxth	r3, r3
 800e346:	2b00      	cmp	r3, #0
 800e348:	d19e      	bne.n	800e288 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e34a:	697a      	ldr	r2, [r7, #20]
 800e34c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e34e:	68f8      	ldr	r0, [r7, #12]
 800e350:	f000 fabc 	bl	800e8cc <I2C_WaitOnSTOPFlagUntilTimeout>
 800e354:	4603      	mov	r3, r0
 800e356:	2b00      	cmp	r3, #0
 800e358:	d001      	beq.n	800e35e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800e35a:	2301      	movs	r3, #1
 800e35c:	e01a      	b.n	800e394 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	2220      	movs	r2, #32
 800e364:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	6859      	ldr	r1, [r3, #4]
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	681a      	ldr	r2, [r3, #0]
 800e370:	4b0a      	ldr	r3, [pc, #40]	; (800e39c <HAL_I2C_Mem_Write+0x224>)
 800e372:	400b      	ands	r3, r1
 800e374:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	2220      	movs	r2, #32
 800e37a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	2200      	movs	r2, #0
 800e382:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	2200      	movs	r2, #0
 800e38a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800e38e:	2300      	movs	r3, #0
 800e390:	e000      	b.n	800e394 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800e392:	2302      	movs	r3, #2
  }
}
 800e394:	4618      	mov	r0, r3
 800e396:	3718      	adds	r7, #24
 800e398:	46bd      	mov	sp, r7
 800e39a:	bd80      	pop	{r7, pc}
 800e39c:	fe00e800 	.word	0xfe00e800

0800e3a0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e3a0:	b580      	push	{r7, lr}
 800e3a2:	b088      	sub	sp, #32
 800e3a4:	af02      	add	r7, sp, #8
 800e3a6:	60f8      	str	r0, [r7, #12]
 800e3a8:	4608      	mov	r0, r1
 800e3aa:	4611      	mov	r1, r2
 800e3ac:	461a      	mov	r2, r3
 800e3ae:	4603      	mov	r3, r0
 800e3b0:	817b      	strh	r3, [r7, #10]
 800e3b2:	460b      	mov	r3, r1
 800e3b4:	813b      	strh	r3, [r7, #8]
 800e3b6:	4613      	mov	r3, r2
 800e3b8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e3c0:	b2db      	uxtb	r3, r3
 800e3c2:	2b20      	cmp	r3, #32
 800e3c4:	f040 80fd 	bne.w	800e5c2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800e3c8:	6a3b      	ldr	r3, [r7, #32]
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d002      	beq.n	800e3d4 <HAL_I2C_Mem_Read+0x34>
 800e3ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d105      	bne.n	800e3e0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e3da:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800e3dc:	2301      	movs	r3, #1
 800e3de:	e0f1      	b.n	800e5c4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e3e6:	2b01      	cmp	r3, #1
 800e3e8:	d101      	bne.n	800e3ee <HAL_I2C_Mem_Read+0x4e>
 800e3ea:	2302      	movs	r3, #2
 800e3ec:	e0ea      	b.n	800e5c4 <HAL_I2C_Mem_Read+0x224>
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	2201      	movs	r2, #1
 800e3f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800e3f6:	f7fe fe03 	bl	800d000 <HAL_GetTick>
 800e3fa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800e3fc:	697b      	ldr	r3, [r7, #20]
 800e3fe:	9300      	str	r3, [sp, #0]
 800e400:	2319      	movs	r3, #25
 800e402:	2201      	movs	r2, #1
 800e404:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800e408:	68f8      	ldr	r0, [r7, #12]
 800e40a:	f000 f9c9 	bl	800e7a0 <I2C_WaitOnFlagUntilTimeout>
 800e40e:	4603      	mov	r3, r0
 800e410:	2b00      	cmp	r3, #0
 800e412:	d001      	beq.n	800e418 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800e414:	2301      	movs	r3, #1
 800e416:	e0d5      	b.n	800e5c4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	2222      	movs	r2, #34	; 0x22
 800e41c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	2240      	movs	r2, #64	; 0x40
 800e424:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	2200      	movs	r2, #0
 800e42c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	6a3a      	ldr	r2, [r7, #32]
 800e432:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e438:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	2200      	movs	r2, #0
 800e43e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800e440:	88f8      	ldrh	r0, [r7, #6]
 800e442:	893a      	ldrh	r2, [r7, #8]
 800e444:	8979      	ldrh	r1, [r7, #10]
 800e446:	697b      	ldr	r3, [r7, #20]
 800e448:	9301      	str	r3, [sp, #4]
 800e44a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e44c:	9300      	str	r3, [sp, #0]
 800e44e:	4603      	mov	r3, r0
 800e450:	68f8      	ldr	r0, [r7, #12]
 800e452:	f000 f92d 	bl	800e6b0 <I2C_RequestMemoryRead>
 800e456:	4603      	mov	r3, r0
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d005      	beq.n	800e468 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	2200      	movs	r2, #0
 800e460:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800e464:	2301      	movs	r3, #1
 800e466:	e0ad      	b.n	800e5c4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e46c:	b29b      	uxth	r3, r3
 800e46e:	2bff      	cmp	r3, #255	; 0xff
 800e470:	d90e      	bls.n	800e490 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	22ff      	movs	r2, #255	; 0xff
 800e476:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e47c:	b2da      	uxtb	r2, r3
 800e47e:	8979      	ldrh	r1, [r7, #10]
 800e480:	4b52      	ldr	r3, [pc, #328]	; (800e5cc <HAL_I2C_Mem_Read+0x22c>)
 800e482:	9300      	str	r3, [sp, #0]
 800e484:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e488:	68f8      	ldr	r0, [r7, #12]
 800e48a:	f000 fb43 	bl	800eb14 <I2C_TransferConfig>
 800e48e:	e00f      	b.n	800e4b0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e494:	b29a      	uxth	r2, r3
 800e496:	68fb      	ldr	r3, [r7, #12]
 800e498:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e49e:	b2da      	uxtb	r2, r3
 800e4a0:	8979      	ldrh	r1, [r7, #10]
 800e4a2:	4b4a      	ldr	r3, [pc, #296]	; (800e5cc <HAL_I2C_Mem_Read+0x22c>)
 800e4a4:	9300      	str	r3, [sp, #0]
 800e4a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e4aa:	68f8      	ldr	r0, [r7, #12]
 800e4ac:	f000 fb32 	bl	800eb14 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800e4b0:	697b      	ldr	r3, [r7, #20]
 800e4b2:	9300      	str	r3, [sp, #0]
 800e4b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4b6:	2200      	movs	r2, #0
 800e4b8:	2104      	movs	r1, #4
 800e4ba:	68f8      	ldr	r0, [r7, #12]
 800e4bc:	f000 f970 	bl	800e7a0 <I2C_WaitOnFlagUntilTimeout>
 800e4c0:	4603      	mov	r3, r0
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d001      	beq.n	800e4ca <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800e4c6:	2301      	movs	r3, #1
 800e4c8:	e07c      	b.n	800e5c4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4d4:	b2d2      	uxtb	r2, r2
 800e4d6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4dc:	1c5a      	adds	r2, r3, #1
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e4e6:	3b01      	subs	r3, #1
 800e4e8:	b29a      	uxth	r2, r3
 800e4ea:	68fb      	ldr	r3, [r7, #12]
 800e4ec:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e4f2:	b29b      	uxth	r3, r3
 800e4f4:	3b01      	subs	r3, #1
 800e4f6:	b29a      	uxth	r2, r3
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e500:	b29b      	uxth	r3, r3
 800e502:	2b00      	cmp	r3, #0
 800e504:	d034      	beq.n	800e570 <HAL_I2C_Mem_Read+0x1d0>
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d130      	bne.n	800e570 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800e50e:	697b      	ldr	r3, [r7, #20]
 800e510:	9300      	str	r3, [sp, #0]
 800e512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e514:	2200      	movs	r2, #0
 800e516:	2180      	movs	r1, #128	; 0x80
 800e518:	68f8      	ldr	r0, [r7, #12]
 800e51a:	f000 f941 	bl	800e7a0 <I2C_WaitOnFlagUntilTimeout>
 800e51e:	4603      	mov	r3, r0
 800e520:	2b00      	cmp	r3, #0
 800e522:	d001      	beq.n	800e528 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800e524:	2301      	movs	r3, #1
 800e526:	e04d      	b.n	800e5c4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e528:	68fb      	ldr	r3, [r7, #12]
 800e52a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e52c:	b29b      	uxth	r3, r3
 800e52e:	2bff      	cmp	r3, #255	; 0xff
 800e530:	d90e      	bls.n	800e550 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	22ff      	movs	r2, #255	; 0xff
 800e536:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800e538:	68fb      	ldr	r3, [r7, #12]
 800e53a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e53c:	b2da      	uxtb	r2, r3
 800e53e:	8979      	ldrh	r1, [r7, #10]
 800e540:	2300      	movs	r3, #0
 800e542:	9300      	str	r3, [sp, #0]
 800e544:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e548:	68f8      	ldr	r0, [r7, #12]
 800e54a:	f000 fae3 	bl	800eb14 <I2C_TransferConfig>
 800e54e:	e00f      	b.n	800e570 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e554:	b29a      	uxth	r2, r3
 800e556:	68fb      	ldr	r3, [r7, #12]
 800e558:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800e55a:	68fb      	ldr	r3, [r7, #12]
 800e55c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e55e:	b2da      	uxtb	r2, r3
 800e560:	8979      	ldrh	r1, [r7, #10]
 800e562:	2300      	movs	r3, #0
 800e564:	9300      	str	r3, [sp, #0]
 800e566:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e56a:	68f8      	ldr	r0, [r7, #12]
 800e56c:	f000 fad2 	bl	800eb14 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e574:	b29b      	uxth	r3, r3
 800e576:	2b00      	cmp	r3, #0
 800e578:	d19a      	bne.n	800e4b0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e57a:	697a      	ldr	r2, [r7, #20]
 800e57c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e57e:	68f8      	ldr	r0, [r7, #12]
 800e580:	f000 f9a4 	bl	800e8cc <I2C_WaitOnSTOPFlagUntilTimeout>
 800e584:	4603      	mov	r3, r0
 800e586:	2b00      	cmp	r3, #0
 800e588:	d001      	beq.n	800e58e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800e58a:	2301      	movs	r3, #1
 800e58c:	e01a      	b.n	800e5c4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	2220      	movs	r2, #32
 800e594:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	6859      	ldr	r1, [r3, #4]
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	681a      	ldr	r2, [r3, #0]
 800e5a0:	4b0b      	ldr	r3, [pc, #44]	; (800e5d0 <HAL_I2C_Mem_Read+0x230>)
 800e5a2:	400b      	ands	r3, r1
 800e5a4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800e5a6:	68fb      	ldr	r3, [r7, #12]
 800e5a8:	2220      	movs	r2, #32
 800e5aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	2200      	movs	r2, #0
 800e5b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	2200      	movs	r2, #0
 800e5ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800e5be:	2300      	movs	r3, #0
 800e5c0:	e000      	b.n	800e5c4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800e5c2:	2302      	movs	r3, #2
  }
}
 800e5c4:	4618      	mov	r0, r3
 800e5c6:	3718      	adds	r7, #24
 800e5c8:	46bd      	mov	sp, r7
 800e5ca:	bd80      	pop	{r7, pc}
 800e5cc:	80002400 	.word	0x80002400
 800e5d0:	fe00e800 	.word	0xfe00e800

0800e5d4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800e5d4:	b480      	push	{r7}
 800e5d6:	b083      	sub	sp, #12
 800e5d8:	af00      	add	r7, sp, #0
 800e5da:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e5e2:	b2db      	uxtb	r3, r3
}
 800e5e4:	4618      	mov	r0, r3
 800e5e6:	370c      	adds	r7, #12
 800e5e8:	46bd      	mov	sp, r7
 800e5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ee:	4770      	bx	lr

0800e5f0 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800e5f0:	b480      	push	{r7}
 800e5f2:	b083      	sub	sp, #12
 800e5f4:	af00      	add	r7, sp, #0
 800e5f6:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 800e5fc:	4618      	mov	r0, r3
 800e5fe:	370c      	adds	r7, #12
 800e600:	46bd      	mov	sp, r7
 800e602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e606:	4770      	bx	lr

0800e608 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800e608:	b580      	push	{r7, lr}
 800e60a:	b086      	sub	sp, #24
 800e60c:	af02      	add	r7, sp, #8
 800e60e:	60f8      	str	r0, [r7, #12]
 800e610:	4608      	mov	r0, r1
 800e612:	4611      	mov	r1, r2
 800e614:	461a      	mov	r2, r3
 800e616:	4603      	mov	r3, r0
 800e618:	817b      	strh	r3, [r7, #10]
 800e61a:	460b      	mov	r3, r1
 800e61c:	813b      	strh	r3, [r7, #8]
 800e61e:	4613      	mov	r3, r2
 800e620:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800e622:	88fb      	ldrh	r3, [r7, #6]
 800e624:	b2da      	uxtb	r2, r3
 800e626:	8979      	ldrh	r1, [r7, #10]
 800e628:	4b20      	ldr	r3, [pc, #128]	; (800e6ac <I2C_RequestMemoryWrite+0xa4>)
 800e62a:	9300      	str	r3, [sp, #0]
 800e62c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e630:	68f8      	ldr	r0, [r7, #12]
 800e632:	f000 fa6f 	bl	800eb14 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e636:	69fa      	ldr	r2, [r7, #28]
 800e638:	69b9      	ldr	r1, [r7, #24]
 800e63a:	68f8      	ldr	r0, [r7, #12]
 800e63c:	f000 f8ff 	bl	800e83e <I2C_WaitOnTXISFlagUntilTimeout>
 800e640:	4603      	mov	r3, r0
 800e642:	2b00      	cmp	r3, #0
 800e644:	d001      	beq.n	800e64a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800e646:	2301      	movs	r3, #1
 800e648:	e02c      	b.n	800e6a4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800e64a:	88fb      	ldrh	r3, [r7, #6]
 800e64c:	2b01      	cmp	r3, #1
 800e64e:	d105      	bne.n	800e65c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800e650:	893b      	ldrh	r3, [r7, #8]
 800e652:	b2da      	uxtb	r2, r3
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	629a      	str	r2, [r3, #40]	; 0x28
 800e65a:	e015      	b.n	800e688 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800e65c:	893b      	ldrh	r3, [r7, #8]
 800e65e:	0a1b      	lsrs	r3, r3, #8
 800e660:	b29b      	uxth	r3, r3
 800e662:	b2da      	uxtb	r2, r3
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e66a:	69fa      	ldr	r2, [r7, #28]
 800e66c:	69b9      	ldr	r1, [r7, #24]
 800e66e:	68f8      	ldr	r0, [r7, #12]
 800e670:	f000 f8e5 	bl	800e83e <I2C_WaitOnTXISFlagUntilTimeout>
 800e674:	4603      	mov	r3, r0
 800e676:	2b00      	cmp	r3, #0
 800e678:	d001      	beq.n	800e67e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800e67a:	2301      	movs	r3, #1
 800e67c:	e012      	b.n	800e6a4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800e67e:	893b      	ldrh	r3, [r7, #8]
 800e680:	b2da      	uxtb	r2, r3
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800e688:	69fb      	ldr	r3, [r7, #28]
 800e68a:	9300      	str	r3, [sp, #0]
 800e68c:	69bb      	ldr	r3, [r7, #24]
 800e68e:	2200      	movs	r2, #0
 800e690:	2180      	movs	r1, #128	; 0x80
 800e692:	68f8      	ldr	r0, [r7, #12]
 800e694:	f000 f884 	bl	800e7a0 <I2C_WaitOnFlagUntilTimeout>
 800e698:	4603      	mov	r3, r0
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d001      	beq.n	800e6a2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800e69e:	2301      	movs	r3, #1
 800e6a0:	e000      	b.n	800e6a4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800e6a2:	2300      	movs	r3, #0
}
 800e6a4:	4618      	mov	r0, r3
 800e6a6:	3710      	adds	r7, #16
 800e6a8:	46bd      	mov	sp, r7
 800e6aa:	bd80      	pop	{r7, pc}
 800e6ac:	80002000 	.word	0x80002000

0800e6b0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800e6b0:	b580      	push	{r7, lr}
 800e6b2:	b086      	sub	sp, #24
 800e6b4:	af02      	add	r7, sp, #8
 800e6b6:	60f8      	str	r0, [r7, #12]
 800e6b8:	4608      	mov	r0, r1
 800e6ba:	4611      	mov	r1, r2
 800e6bc:	461a      	mov	r2, r3
 800e6be:	4603      	mov	r3, r0
 800e6c0:	817b      	strh	r3, [r7, #10]
 800e6c2:	460b      	mov	r3, r1
 800e6c4:	813b      	strh	r3, [r7, #8]
 800e6c6:	4613      	mov	r3, r2
 800e6c8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800e6ca:	88fb      	ldrh	r3, [r7, #6]
 800e6cc:	b2da      	uxtb	r2, r3
 800e6ce:	8979      	ldrh	r1, [r7, #10]
 800e6d0:	4b20      	ldr	r3, [pc, #128]	; (800e754 <I2C_RequestMemoryRead+0xa4>)
 800e6d2:	9300      	str	r3, [sp, #0]
 800e6d4:	2300      	movs	r3, #0
 800e6d6:	68f8      	ldr	r0, [r7, #12]
 800e6d8:	f000 fa1c 	bl	800eb14 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e6dc:	69fa      	ldr	r2, [r7, #28]
 800e6de:	69b9      	ldr	r1, [r7, #24]
 800e6e0:	68f8      	ldr	r0, [r7, #12]
 800e6e2:	f000 f8ac 	bl	800e83e <I2C_WaitOnTXISFlagUntilTimeout>
 800e6e6:	4603      	mov	r3, r0
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d001      	beq.n	800e6f0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800e6ec:	2301      	movs	r3, #1
 800e6ee:	e02c      	b.n	800e74a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800e6f0:	88fb      	ldrh	r3, [r7, #6]
 800e6f2:	2b01      	cmp	r3, #1
 800e6f4:	d105      	bne.n	800e702 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800e6f6:	893b      	ldrh	r3, [r7, #8]
 800e6f8:	b2da      	uxtb	r2, r3
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	629a      	str	r2, [r3, #40]	; 0x28
 800e700:	e015      	b.n	800e72e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800e702:	893b      	ldrh	r3, [r7, #8]
 800e704:	0a1b      	lsrs	r3, r3, #8
 800e706:	b29b      	uxth	r3, r3
 800e708:	b2da      	uxtb	r2, r3
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e710:	69fa      	ldr	r2, [r7, #28]
 800e712:	69b9      	ldr	r1, [r7, #24]
 800e714:	68f8      	ldr	r0, [r7, #12]
 800e716:	f000 f892 	bl	800e83e <I2C_WaitOnTXISFlagUntilTimeout>
 800e71a:	4603      	mov	r3, r0
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d001      	beq.n	800e724 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800e720:	2301      	movs	r3, #1
 800e722:	e012      	b.n	800e74a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800e724:	893b      	ldrh	r3, [r7, #8]
 800e726:	b2da      	uxtb	r2, r3
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800e72e:	69fb      	ldr	r3, [r7, #28]
 800e730:	9300      	str	r3, [sp, #0]
 800e732:	69bb      	ldr	r3, [r7, #24]
 800e734:	2200      	movs	r2, #0
 800e736:	2140      	movs	r1, #64	; 0x40
 800e738:	68f8      	ldr	r0, [r7, #12]
 800e73a:	f000 f831 	bl	800e7a0 <I2C_WaitOnFlagUntilTimeout>
 800e73e:	4603      	mov	r3, r0
 800e740:	2b00      	cmp	r3, #0
 800e742:	d001      	beq.n	800e748 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800e744:	2301      	movs	r3, #1
 800e746:	e000      	b.n	800e74a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800e748:	2300      	movs	r3, #0
}
 800e74a:	4618      	mov	r0, r3
 800e74c:	3710      	adds	r7, #16
 800e74e:	46bd      	mov	sp, r7
 800e750:	bd80      	pop	{r7, pc}
 800e752:	bf00      	nop
 800e754:	80002000 	.word	0x80002000

0800e758 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800e758:	b480      	push	{r7}
 800e75a:	b083      	sub	sp, #12
 800e75c:	af00      	add	r7, sp, #0
 800e75e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	699b      	ldr	r3, [r3, #24]
 800e766:	f003 0302 	and.w	r3, r3, #2
 800e76a:	2b02      	cmp	r3, #2
 800e76c:	d103      	bne.n	800e776 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	2200      	movs	r2, #0
 800e774:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	699b      	ldr	r3, [r3, #24]
 800e77c:	f003 0301 	and.w	r3, r3, #1
 800e780:	2b01      	cmp	r3, #1
 800e782:	d007      	beq.n	800e794 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	699a      	ldr	r2, [r3, #24]
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	f042 0201 	orr.w	r2, r2, #1
 800e792:	619a      	str	r2, [r3, #24]
  }
}
 800e794:	bf00      	nop
 800e796:	370c      	adds	r7, #12
 800e798:	46bd      	mov	sp, r7
 800e79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e79e:	4770      	bx	lr

0800e7a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800e7a0:	b580      	push	{r7, lr}
 800e7a2:	b084      	sub	sp, #16
 800e7a4:	af00      	add	r7, sp, #0
 800e7a6:	60f8      	str	r0, [r7, #12]
 800e7a8:	60b9      	str	r1, [r7, #8]
 800e7aa:	603b      	str	r3, [r7, #0]
 800e7ac:	4613      	mov	r3, r2
 800e7ae:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e7b0:	e031      	b.n	800e816 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e7b2:	683b      	ldr	r3, [r7, #0]
 800e7b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7b8:	d02d      	beq.n	800e816 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e7ba:	f7fe fc21 	bl	800d000 <HAL_GetTick>
 800e7be:	4602      	mov	r2, r0
 800e7c0:	69bb      	ldr	r3, [r7, #24]
 800e7c2:	1ad3      	subs	r3, r2, r3
 800e7c4:	683a      	ldr	r2, [r7, #0]
 800e7c6:	429a      	cmp	r2, r3
 800e7c8:	d302      	bcc.n	800e7d0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800e7ca:	683b      	ldr	r3, [r7, #0]
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d122      	bne.n	800e816 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800e7d0:	68fb      	ldr	r3, [r7, #12]
 800e7d2:	681b      	ldr	r3, [r3, #0]
 800e7d4:	699a      	ldr	r2, [r3, #24]
 800e7d6:	68bb      	ldr	r3, [r7, #8]
 800e7d8:	4013      	ands	r3, r2
 800e7da:	68ba      	ldr	r2, [r7, #8]
 800e7dc:	429a      	cmp	r2, r3
 800e7de:	bf0c      	ite	eq
 800e7e0:	2301      	moveq	r3, #1
 800e7e2:	2300      	movne	r3, #0
 800e7e4:	b2db      	uxtb	r3, r3
 800e7e6:	461a      	mov	r2, r3
 800e7e8:	79fb      	ldrb	r3, [r7, #7]
 800e7ea:	429a      	cmp	r2, r3
 800e7ec:	d113      	bne.n	800e816 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e7f2:	f043 0220 	orr.w	r2, r3, #32
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	2220      	movs	r2, #32
 800e7fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	2200      	movs	r2, #0
 800e806:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	2200      	movs	r2, #0
 800e80e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800e812:	2301      	movs	r3, #1
 800e814:	e00f      	b.n	800e836 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	699a      	ldr	r2, [r3, #24]
 800e81c:	68bb      	ldr	r3, [r7, #8]
 800e81e:	4013      	ands	r3, r2
 800e820:	68ba      	ldr	r2, [r7, #8]
 800e822:	429a      	cmp	r2, r3
 800e824:	bf0c      	ite	eq
 800e826:	2301      	moveq	r3, #1
 800e828:	2300      	movne	r3, #0
 800e82a:	b2db      	uxtb	r3, r3
 800e82c:	461a      	mov	r2, r3
 800e82e:	79fb      	ldrb	r3, [r7, #7]
 800e830:	429a      	cmp	r2, r3
 800e832:	d0be      	beq.n	800e7b2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e834:	2300      	movs	r3, #0
}
 800e836:	4618      	mov	r0, r3
 800e838:	3710      	adds	r7, #16
 800e83a:	46bd      	mov	sp, r7
 800e83c:	bd80      	pop	{r7, pc}

0800e83e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800e83e:	b580      	push	{r7, lr}
 800e840:	b084      	sub	sp, #16
 800e842:	af00      	add	r7, sp, #0
 800e844:	60f8      	str	r0, [r7, #12]
 800e846:	60b9      	str	r1, [r7, #8]
 800e848:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800e84a:	e033      	b.n	800e8b4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800e84c:	687a      	ldr	r2, [r7, #4]
 800e84e:	68b9      	ldr	r1, [r7, #8]
 800e850:	68f8      	ldr	r0, [r7, #12]
 800e852:	f000 f87f 	bl	800e954 <I2C_IsErrorOccurred>
 800e856:	4603      	mov	r3, r0
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d001      	beq.n	800e860 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800e85c:	2301      	movs	r3, #1
 800e85e:	e031      	b.n	800e8c4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e860:	68bb      	ldr	r3, [r7, #8]
 800e862:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e866:	d025      	beq.n	800e8b4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e868:	f7fe fbca 	bl	800d000 <HAL_GetTick>
 800e86c:	4602      	mov	r2, r0
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	1ad3      	subs	r3, r2, r3
 800e872:	68ba      	ldr	r2, [r7, #8]
 800e874:	429a      	cmp	r2, r3
 800e876:	d302      	bcc.n	800e87e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800e878:	68bb      	ldr	r3, [r7, #8]
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d11a      	bne.n	800e8b4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800e87e:	68fb      	ldr	r3, [r7, #12]
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	699b      	ldr	r3, [r3, #24]
 800e884:	f003 0302 	and.w	r3, r3, #2
 800e888:	2b02      	cmp	r3, #2
 800e88a:	d013      	beq.n	800e8b4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e890:	f043 0220 	orr.w	r2, r3, #32
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800e898:	68fb      	ldr	r3, [r7, #12]
 800e89a:	2220      	movs	r2, #32
 800e89c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	2200      	movs	r2, #0
 800e8a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	2200      	movs	r2, #0
 800e8ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800e8b0:	2301      	movs	r3, #1
 800e8b2:	e007      	b.n	800e8c4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800e8b4:	68fb      	ldr	r3, [r7, #12]
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	699b      	ldr	r3, [r3, #24]
 800e8ba:	f003 0302 	and.w	r3, r3, #2
 800e8be:	2b02      	cmp	r3, #2
 800e8c0:	d1c4      	bne.n	800e84c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800e8c2:	2300      	movs	r3, #0
}
 800e8c4:	4618      	mov	r0, r3
 800e8c6:	3710      	adds	r7, #16
 800e8c8:	46bd      	mov	sp, r7
 800e8ca:	bd80      	pop	{r7, pc}

0800e8cc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800e8cc:	b580      	push	{r7, lr}
 800e8ce:	b084      	sub	sp, #16
 800e8d0:	af00      	add	r7, sp, #0
 800e8d2:	60f8      	str	r0, [r7, #12]
 800e8d4:	60b9      	str	r1, [r7, #8]
 800e8d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800e8d8:	e02f      	b.n	800e93a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800e8da:	687a      	ldr	r2, [r7, #4]
 800e8dc:	68b9      	ldr	r1, [r7, #8]
 800e8de:	68f8      	ldr	r0, [r7, #12]
 800e8e0:	f000 f838 	bl	800e954 <I2C_IsErrorOccurred>
 800e8e4:	4603      	mov	r3, r0
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d001      	beq.n	800e8ee <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800e8ea:	2301      	movs	r3, #1
 800e8ec:	e02d      	b.n	800e94a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e8ee:	f7fe fb87 	bl	800d000 <HAL_GetTick>
 800e8f2:	4602      	mov	r2, r0
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	1ad3      	subs	r3, r2, r3
 800e8f8:	68ba      	ldr	r2, [r7, #8]
 800e8fa:	429a      	cmp	r2, r3
 800e8fc:	d302      	bcc.n	800e904 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800e8fe:	68bb      	ldr	r3, [r7, #8]
 800e900:	2b00      	cmp	r3, #0
 800e902:	d11a      	bne.n	800e93a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	699b      	ldr	r3, [r3, #24]
 800e90a:	f003 0320 	and.w	r3, r3, #32
 800e90e:	2b20      	cmp	r3, #32
 800e910:	d013      	beq.n	800e93a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e916:	f043 0220 	orr.w	r2, r3, #32
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	2220      	movs	r2, #32
 800e922:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	2200      	movs	r2, #0
 800e92a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	2200      	movs	r2, #0
 800e932:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800e936:	2301      	movs	r3, #1
 800e938:	e007      	b.n	800e94a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	699b      	ldr	r3, [r3, #24]
 800e940:	f003 0320 	and.w	r3, r3, #32
 800e944:	2b20      	cmp	r3, #32
 800e946:	d1c8      	bne.n	800e8da <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800e948:	2300      	movs	r3, #0
}
 800e94a:	4618      	mov	r0, r3
 800e94c:	3710      	adds	r7, #16
 800e94e:	46bd      	mov	sp, r7
 800e950:	bd80      	pop	{r7, pc}
	...

0800e954 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800e954:	b580      	push	{r7, lr}
 800e956:	b08a      	sub	sp, #40	; 0x28
 800e958:	af00      	add	r7, sp, #0
 800e95a:	60f8      	str	r0, [r7, #12]
 800e95c:	60b9      	str	r1, [r7, #8]
 800e95e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e960:	2300      	movs	r3, #0
 800e962:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	699b      	ldr	r3, [r3, #24]
 800e96c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800e96e:	2300      	movs	r3, #0
 800e970:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800e976:	69bb      	ldr	r3, [r7, #24]
 800e978:	f003 0310 	and.w	r3, r3, #16
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d068      	beq.n	800ea52 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	2210      	movs	r2, #16
 800e986:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800e988:	e049      	b.n	800ea1e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800e98a:	68bb      	ldr	r3, [r7, #8]
 800e98c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e990:	d045      	beq.n	800ea1e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800e992:	f7fe fb35 	bl	800d000 <HAL_GetTick>
 800e996:	4602      	mov	r2, r0
 800e998:	69fb      	ldr	r3, [r7, #28]
 800e99a:	1ad3      	subs	r3, r2, r3
 800e99c:	68ba      	ldr	r2, [r7, #8]
 800e99e:	429a      	cmp	r2, r3
 800e9a0:	d302      	bcc.n	800e9a8 <I2C_IsErrorOccurred+0x54>
 800e9a2:	68bb      	ldr	r3, [r7, #8]
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d13a      	bne.n	800ea1e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800e9a8:	68fb      	ldr	r3, [r7, #12]
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	685b      	ldr	r3, [r3, #4]
 800e9ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e9b2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800e9b4:	68fb      	ldr	r3, [r7, #12]
 800e9b6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e9ba:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800e9bc:	68fb      	ldr	r3, [r7, #12]
 800e9be:	681b      	ldr	r3, [r3, #0]
 800e9c0:	699b      	ldr	r3, [r3, #24]
 800e9c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e9c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e9ca:	d121      	bne.n	800ea10 <I2C_IsErrorOccurred+0xbc>
 800e9cc:	697b      	ldr	r3, [r7, #20]
 800e9ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e9d2:	d01d      	beq.n	800ea10 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800e9d4:	7cfb      	ldrb	r3, [r7, #19]
 800e9d6:	2b20      	cmp	r3, #32
 800e9d8:	d01a      	beq.n	800ea10 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800e9da:	68fb      	ldr	r3, [r7, #12]
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	685a      	ldr	r2, [r3, #4]
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e9e8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800e9ea:	f7fe fb09 	bl	800d000 <HAL_GetTick>
 800e9ee:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800e9f0:	e00e      	b.n	800ea10 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800e9f2:	f7fe fb05 	bl	800d000 <HAL_GetTick>
 800e9f6:	4602      	mov	r2, r0
 800e9f8:	69fb      	ldr	r3, [r7, #28]
 800e9fa:	1ad3      	subs	r3, r2, r3
 800e9fc:	2b19      	cmp	r3, #25
 800e9fe:	d907      	bls.n	800ea10 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800ea00:	6a3b      	ldr	r3, [r7, #32]
 800ea02:	f043 0320 	orr.w	r3, r3, #32
 800ea06:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800ea08:	2301      	movs	r3, #1
 800ea0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800ea0e:	e006      	b.n	800ea1e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	699b      	ldr	r3, [r3, #24]
 800ea16:	f003 0320 	and.w	r3, r3, #32
 800ea1a:	2b20      	cmp	r3, #32
 800ea1c:	d1e9      	bne.n	800e9f2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800ea1e:	68fb      	ldr	r3, [r7, #12]
 800ea20:	681b      	ldr	r3, [r3, #0]
 800ea22:	699b      	ldr	r3, [r3, #24]
 800ea24:	f003 0320 	and.w	r3, r3, #32
 800ea28:	2b20      	cmp	r3, #32
 800ea2a:	d003      	beq.n	800ea34 <I2C_IsErrorOccurred+0xe0>
 800ea2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d0aa      	beq.n	800e98a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800ea34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d103      	bne.n	800ea44 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	2220      	movs	r2, #32
 800ea42:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800ea44:	6a3b      	ldr	r3, [r7, #32]
 800ea46:	f043 0304 	orr.w	r3, r3, #4
 800ea4a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800ea4c:	2301      	movs	r3, #1
 800ea4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800ea52:	68fb      	ldr	r3, [r7, #12]
 800ea54:	681b      	ldr	r3, [r3, #0]
 800ea56:	699b      	ldr	r3, [r3, #24]
 800ea58:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800ea5a:	69bb      	ldr	r3, [r7, #24]
 800ea5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d00b      	beq.n	800ea7c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800ea64:	6a3b      	ldr	r3, [r7, #32]
 800ea66:	f043 0301 	orr.w	r3, r3, #1
 800ea6a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ea74:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800ea76:	2301      	movs	r3, #1
 800ea78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800ea7c:	69bb      	ldr	r3, [r7, #24]
 800ea7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d00b      	beq.n	800ea9e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800ea86:	6a3b      	ldr	r3, [r7, #32]
 800ea88:	f043 0308 	orr.w	r3, r3, #8
 800ea8c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	681b      	ldr	r3, [r3, #0]
 800ea92:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ea96:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800ea98:	2301      	movs	r3, #1
 800ea9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800ea9e:	69bb      	ldr	r3, [r7, #24]
 800eaa0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d00b      	beq.n	800eac0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800eaa8:	6a3b      	ldr	r3, [r7, #32]
 800eaaa:	f043 0302 	orr.w	r3, r3, #2
 800eaae:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800eab0:	68fb      	ldr	r3, [r7, #12]
 800eab2:	681b      	ldr	r3, [r3, #0]
 800eab4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800eab8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800eaba:	2301      	movs	r3, #1
 800eabc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800eac0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d01c      	beq.n	800eb02 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800eac8:	68f8      	ldr	r0, [r7, #12]
 800eaca:	f7ff fe45 	bl	800e758 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800eace:	68fb      	ldr	r3, [r7, #12]
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	6859      	ldr	r1, [r3, #4]
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	681a      	ldr	r2, [r3, #0]
 800ead8:	4b0d      	ldr	r3, [pc, #52]	; (800eb10 <I2C_IsErrorOccurred+0x1bc>)
 800eada:	400b      	ands	r3, r1
 800eadc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800eae2:	6a3b      	ldr	r3, [r7, #32]
 800eae4:	431a      	orrs	r2, r3
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800eaea:	68fb      	ldr	r3, [r7, #12]
 800eaec:	2220      	movs	r2, #32
 800eaee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800eaf2:	68fb      	ldr	r3, [r7, #12]
 800eaf4:	2200      	movs	r2, #0
 800eaf6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800eafa:	68fb      	ldr	r3, [r7, #12]
 800eafc:	2200      	movs	r2, #0
 800eafe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800eb02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800eb06:	4618      	mov	r0, r3
 800eb08:	3728      	adds	r7, #40	; 0x28
 800eb0a:	46bd      	mov	sp, r7
 800eb0c:	bd80      	pop	{r7, pc}
 800eb0e:	bf00      	nop
 800eb10:	fe00e800 	.word	0xfe00e800

0800eb14 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800eb14:	b480      	push	{r7}
 800eb16:	b087      	sub	sp, #28
 800eb18:	af00      	add	r7, sp, #0
 800eb1a:	60f8      	str	r0, [r7, #12]
 800eb1c:	607b      	str	r3, [r7, #4]
 800eb1e:	460b      	mov	r3, r1
 800eb20:	817b      	strh	r3, [r7, #10]
 800eb22:	4613      	mov	r3, r2
 800eb24:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800eb26:	897b      	ldrh	r3, [r7, #10]
 800eb28:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800eb2c:	7a7b      	ldrb	r3, [r7, #9]
 800eb2e:	041b      	lsls	r3, r3, #16
 800eb30:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800eb34:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800eb3a:	6a3b      	ldr	r3, [r7, #32]
 800eb3c:	4313      	orrs	r3, r2
 800eb3e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800eb42:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	685a      	ldr	r2, [r3, #4]
 800eb4a:	6a3b      	ldr	r3, [r7, #32]
 800eb4c:	0d5b      	lsrs	r3, r3, #21
 800eb4e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800eb52:	4b08      	ldr	r3, [pc, #32]	; (800eb74 <I2C_TransferConfig+0x60>)
 800eb54:	430b      	orrs	r3, r1
 800eb56:	43db      	mvns	r3, r3
 800eb58:	ea02 0103 	and.w	r1, r2, r3
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	697a      	ldr	r2, [r7, #20]
 800eb62:	430a      	orrs	r2, r1
 800eb64:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800eb66:	bf00      	nop
 800eb68:	371c      	adds	r7, #28
 800eb6a:	46bd      	mov	sp, r7
 800eb6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb70:	4770      	bx	lr
 800eb72:	bf00      	nop
 800eb74:	03ff63ff 	.word	0x03ff63ff

0800eb78 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800eb78:	b480      	push	{r7}
 800eb7a:	b083      	sub	sp, #12
 800eb7c:	af00      	add	r7, sp, #0
 800eb7e:	6078      	str	r0, [r7, #4]
 800eb80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800eb88:	b2db      	uxtb	r3, r3
 800eb8a:	2b20      	cmp	r3, #32
 800eb8c:	d138      	bne.n	800ec00 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800eb94:	2b01      	cmp	r3, #1
 800eb96:	d101      	bne.n	800eb9c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800eb98:	2302      	movs	r3, #2
 800eb9a:	e032      	b.n	800ec02 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	2201      	movs	r2, #1
 800eba0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	2224      	movs	r2, #36	; 0x24
 800eba8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	681a      	ldr	r2, [r3, #0]
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	f022 0201 	bic.w	r2, r2, #1
 800ebba:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	681a      	ldr	r2, [r3, #0]
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	681b      	ldr	r3, [r3, #0]
 800ebc6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800ebca:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	6819      	ldr	r1, [r3, #0]
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	683a      	ldr	r2, [r7, #0]
 800ebd8:	430a      	orrs	r2, r1
 800ebda:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	681a      	ldr	r2, [r3, #0]
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	f042 0201 	orr.w	r2, r2, #1
 800ebea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	2220      	movs	r2, #32
 800ebf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	2200      	movs	r2, #0
 800ebf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ebfc:	2300      	movs	r3, #0
 800ebfe:	e000      	b.n	800ec02 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800ec00:	2302      	movs	r3, #2
  }
}
 800ec02:	4618      	mov	r0, r3
 800ec04:	370c      	adds	r7, #12
 800ec06:	46bd      	mov	sp, r7
 800ec08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec0c:	4770      	bx	lr

0800ec0e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800ec0e:	b480      	push	{r7}
 800ec10:	b085      	sub	sp, #20
 800ec12:	af00      	add	r7, sp, #0
 800ec14:	6078      	str	r0, [r7, #4]
 800ec16:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ec1e:	b2db      	uxtb	r3, r3
 800ec20:	2b20      	cmp	r3, #32
 800ec22:	d139      	bne.n	800ec98 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ec2a:	2b01      	cmp	r3, #1
 800ec2c:	d101      	bne.n	800ec32 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800ec2e:	2302      	movs	r3, #2
 800ec30:	e033      	b.n	800ec9a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	2201      	movs	r2, #1
 800ec36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	2224      	movs	r2, #36	; 0x24
 800ec3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	681b      	ldr	r3, [r3, #0]
 800ec46:	681a      	ldr	r2, [r3, #0]
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	f022 0201 	bic.w	r2, r2, #1
 800ec50:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	681b      	ldr	r3, [r3, #0]
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800ec60:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800ec62:	683b      	ldr	r3, [r7, #0]
 800ec64:	021b      	lsls	r3, r3, #8
 800ec66:	68fa      	ldr	r2, [r7, #12]
 800ec68:	4313      	orrs	r3, r2
 800ec6a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	68fa      	ldr	r2, [r7, #12]
 800ec72:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	681a      	ldr	r2, [r3, #0]
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	f042 0201 	orr.w	r2, r2, #1
 800ec82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	2220      	movs	r2, #32
 800ec88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	2200      	movs	r2, #0
 800ec90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ec94:	2300      	movs	r3, #0
 800ec96:	e000      	b.n	800ec9a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800ec98:	2302      	movs	r3, #2
  }
}
 800ec9a:	4618      	mov	r0, r3
 800ec9c:	3714      	adds	r7, #20
 800ec9e:	46bd      	mov	sp, r7
 800eca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eca4:	4770      	bx	lr
	...

0800eca8 <HAL_JPEG_Init>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_Init(JPEG_HandleTypeDef *hjpeg)
{
 800eca8:	b580      	push	{r7, lr}
 800ecaa:	b082      	sub	sp, #8
 800ecac:	af00      	add	r7, sp, #0
 800ecae:	6078      	str	r0, [r7, #4]
    99,  99,  99,  99,  99,  99,  99,  99,
    99,  99,  99,  99,  99,  99,  99,  99
  };

  /* Check the JPEG handle allocation */
  if (hjpeg == NULL)
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d101      	bne.n	800ecba <HAL_JPEG_Init+0x12>
  {
    return HAL_ERROR;
 800ecb6:	2301      	movs	r3, #1
 800ecb8:	e070      	b.n	800ed9c <HAL_JPEG_Init+0xf4>

    /* Init the low level hardware */
    hjpeg->MspInitCallback(hjpeg);
  }
#else
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800ecc0:	b2db      	uxtb	r3, r3
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d106      	bne.n	800ecd4 <HAL_JPEG_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hjpeg->Lock = HAL_UNLOCKED;
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	2200      	movs	r2, #0
 800ecca:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_JPEG_MspInit(hjpeg);
 800ecce:	6878      	ldr	r0, [r7, #4]
 800ecd0:	f7f2 fa50 	bl	8001174 <HAL_JPEG_MspInit>
  }
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	2202      	movs	r2, #2
 800ecd8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Start the JPEG Core*/
  __HAL_JPEG_ENABLE(hjpeg);
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	f042 0201 	orr.w	r2, r2, #1
 800ecea:	631a      	str	r2, [r3, #48]	; 0x30

  /* Stop the JPEG encoding/decoding process*/
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	681a      	ldr	r2, [r3, #0]
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	f022 0201 	bic.w	r2, r2, #1
 800ecfa:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 800ed0a:	631a      	str	r2, [r3, #48]	; 0x30


  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ed1a:	631a      	str	r2, [r3, #48]	; 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ed2a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	681b      	ldr	r3, [r3, #0]
 800ed30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	681b      	ldr	r3, [r3, #0]
 800ed36:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800ed3a:	639a      	str	r2, [r3, #56]	; 0x38

  /* init default quantization tables*/
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	4a19      	ldr	r2, [pc, #100]	; (800eda4 <HAL_JPEG_Init+0xfc>)
 800ed40:	63da      	str	r2, [r3, #60]	; 0x3c
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	4a18      	ldr	r2, [pc, #96]	; (800eda8 <HAL_JPEG_Init+0x100>)
 800ed46:	641a      	str	r2, [r3, #64]	; 0x40
  hjpeg->QuantTable2 = NULL;
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	2200      	movs	r2, #0
 800ed4c:	645a      	str	r2, [r3, #68]	; 0x44
  hjpeg->QuantTable3 = NULL;
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	2200      	movs	r2, #0
 800ed52:	649a      	str	r2, [r3, #72]	; 0x48

  /* init the default Huffman tables*/
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 800ed54:	6878      	ldr	r0, [r7, #4]
 800ed56:	f000 fdc7 	bl	800f8e8 <JPEG_Set_HuffEnc_Mem>
 800ed5a:	4603      	mov	r3, r0
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d004      	beq.n	800ed6a <HAL_JPEG_Init+0xc2>
  {
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	2201      	movs	r2, #1
 800ed64:	651a      	str	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 800ed66:	2301      	movs	r3, #1
 800ed68:	e018      	b.n	800ed9c <HAL_JPEG_Init+0xf4>
  }

  /* Enable header processing*/
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	681b      	ldr	r3, [r3, #0]
 800ed6e:	685a      	ldr	r2, [r3, #4]
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ed78:	605a      	str	r2, [r3, #4]

  /* Reset JpegInCount and JpegOutCount */
  hjpeg->JpegInCount = 0;
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	2200      	movs	r2, #0
 800ed7e:	621a      	str	r2, [r3, #32]
  hjpeg->JpegOutCount = 0;
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	2200      	movs	r2, #0
 800ed84:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_READY;
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	2201      	movs	r2, #1
 800ed8a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Reset the JPEG ErrorCode */
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	2200      	movs	r2, #0
 800ed92:	651a      	str	r2, [r3, #80]	; 0x50

  /*Clear the context filelds*/
  hjpeg->Context = 0;
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	2200      	movs	r2, #0
 800ed98:	655a      	str	r2, [r3, #84]	; 0x54

  /* Return function status */
  return HAL_OK;
 800ed9a:	2300      	movs	r3, #0
}
 800ed9c:	4618      	mov	r0, r3
 800ed9e:	3708      	adds	r7, #8
 800eda0:	46bd      	mov	sp, r7
 800eda2:	bd80      	pop	{r7, pc}
 800eda4:	0802ce78 	.word	0x0802ce78
 800eda8:	0802ceb8 	.word	0x0802ceb8

0800edac <HAL_JPEG_GetInfo>:
  * @param  pInfo pointer to a JPEG_ConfTypeDef structure that contains
  *         The JPEG decoded header information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_GetInfo(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{
 800edac:	b580      	push	{r7, lr}
 800edae:	b086      	sub	sp, #24
 800edb0:	af00      	add	r7, sp, #0
 800edb2:	6078      	str	r0, [r7, #4]
 800edb4:	6039      	str	r1, [r7, #0]
  uint32_t yblockNb;
  uint32_t cBblockNb;
  uint32_t cRblockNb;

  /* Check the JPEG handle allocation */
  if ((hjpeg == NULL) || (pInfo == NULL))
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d002      	beq.n	800edc2 <HAL_JPEG_GetInfo+0x16>
 800edbc:	683b      	ldr	r3, [r7, #0]
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d101      	bne.n	800edc6 <HAL_JPEG_GetInfo+0x1a>
  {
    return HAL_ERROR;
 800edc2:	2301      	movs	r3, #1
 800edc4:	e083      	b.n	800eece <HAL_JPEG_GetInfo+0x122>
  }

  /*Read the conf parameters */
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	681b      	ldr	r3, [r3, #0]
 800edca:	685b      	ldr	r3, [r3, #4]
 800edcc:	f003 0303 	and.w	r3, r3, #3
 800edd0:	2b02      	cmp	r3, #2
 800edd2:	d103      	bne.n	800eddc <HAL_JPEG_GetInfo+0x30>
  {
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
 800edd4:	683b      	ldr	r3, [r7, #0]
 800edd6:	2210      	movs	r2, #16
 800edd8:	601a      	str	r2, [r3, #0]
 800edda:	e017      	b.n	800ee0c <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	685b      	ldr	r3, [r3, #4]
 800ede2:	f003 0303 	and.w	r3, r3, #3
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d103      	bne.n	800edf2 <HAL_JPEG_GetInfo+0x46>
  {
    pInfo->ColorSpace = JPEG_GRAYSCALE_COLORSPACE;
 800edea:	683b      	ldr	r3, [r7, #0]
 800edec:	2200      	movs	r2, #0
 800edee:	601a      	str	r2, [r3, #0]
 800edf0:	e00c      	b.n	800ee0c <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	685b      	ldr	r3, [r3, #4]
 800edf8:	f003 0303 	and.w	r3, r3, #3
 800edfc:	2b03      	cmp	r3, #3
 800edfe:	d103      	bne.n	800ee08 <HAL_JPEG_GetInfo+0x5c>
  {
    pInfo->ColorSpace = JPEG_CMYK_COLORSPACE;
 800ee00:	683b      	ldr	r3, [r7, #0]
 800ee02:	2230      	movs	r2, #48	; 0x30
 800ee04:	601a      	str	r2, [r3, #0]
 800ee06:	e001      	b.n	800ee0c <HAL_JPEG_GetInfo+0x60>
  }
  else
  {
    return HAL_ERROR;
 800ee08:	2301      	movs	r3, #1
 800ee0a:	e060      	b.n	800eece <HAL_JPEG_GetInfo+0x122>
  }

  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	685b      	ldr	r3, [r3, #4]
 800ee12:	0c1b      	lsrs	r3, r3, #16
 800ee14:	b29a      	uxth	r2, r3
 800ee16:	683b      	ldr	r3, [r7, #0]
 800ee18:	609a      	str	r2, [r3, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	681b      	ldr	r3, [r3, #0]
 800ee1e:	68db      	ldr	r3, [r3, #12]
 800ee20:	0c1b      	lsrs	r3, r3, #16
 800ee22:	b29a      	uxth	r2, r3
 800ee24:	683b      	ldr	r3, [r7, #0]
 800ee26:	60da      	str	r2, [r3, #12]

  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 800ee28:	683b      	ldr	r3, [r7, #0]
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	2b10      	cmp	r3, #16
 800ee2e:	d003      	beq.n	800ee38 <HAL_JPEG_GetInfo+0x8c>
 800ee30:	683b      	ldr	r3, [r7, #0]
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	2b30      	cmp	r3, #48	; 0x30
 800ee36:	d140      	bne.n	800eeba <HAL_JPEG_GetInfo+0x10e>
  {
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	691b      	ldr	r3, [r3, #16]
 800ee3e:	091b      	lsrs	r3, r3, #4
 800ee40:	f003 030f 	and.w	r3, r3, #15
 800ee44:	617b      	str	r3, [r7, #20]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	695b      	ldr	r3, [r3, #20]
 800ee4c:	091b      	lsrs	r3, r3, #4
 800ee4e:	f003 030f 	and.w	r3, r3, #15
 800ee52:	613b      	str	r3, [r7, #16]
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	699b      	ldr	r3, [r3, #24]
 800ee5a:	091b      	lsrs	r3, r3, #4
 800ee5c:	f003 030f 	and.w	r3, r3, #15
 800ee60:	60fb      	str	r3, [r7, #12]

    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800ee62:	697b      	ldr	r3, [r7, #20]
 800ee64:	2b01      	cmp	r3, #1
 800ee66:	d109      	bne.n	800ee7c <HAL_JPEG_GetInfo+0xd0>
 800ee68:	693b      	ldr	r3, [r7, #16]
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d106      	bne.n	800ee7c <HAL_JPEG_GetInfo+0xd0>
 800ee6e:	68fb      	ldr	r3, [r7, #12]
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	d103      	bne.n	800ee7c <HAL_JPEG_GetInfo+0xd0>
    {
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
 800ee74:	683b      	ldr	r3, [r7, #0]
 800ee76:	2202      	movs	r2, #2
 800ee78:	605a      	str	r2, [r3, #4]
 800ee7a:	e01d      	b.n	800eeb8 <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800ee7c:	697b      	ldr	r3, [r7, #20]
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	d109      	bne.n	800ee96 <HAL_JPEG_GetInfo+0xea>
 800ee82:	693b      	ldr	r3, [r7, #16]
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d106      	bne.n	800ee96 <HAL_JPEG_GetInfo+0xea>
 800ee88:	68fb      	ldr	r3, [r7, #12]
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d103      	bne.n	800ee96 <HAL_JPEG_GetInfo+0xea>
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 800ee8e:	683b      	ldr	r3, [r7, #0]
 800ee90:	2200      	movs	r2, #0
 800ee92:	605a      	str	r2, [r3, #4]
 800ee94:	e010      	b.n	800eeb8 <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800ee96:	697b      	ldr	r3, [r7, #20]
 800ee98:	2b03      	cmp	r3, #3
 800ee9a:	d109      	bne.n	800eeb0 <HAL_JPEG_GetInfo+0x104>
 800ee9c:	693b      	ldr	r3, [r7, #16]
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d106      	bne.n	800eeb0 <HAL_JPEG_GetInfo+0x104>
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d103      	bne.n	800eeb0 <HAL_JPEG_GetInfo+0x104>
    {
      pInfo->ChromaSubsampling = JPEG_420_SUBSAMPLING;
 800eea8:	683b      	ldr	r3, [r7, #0]
 800eeaa:	2201      	movs	r2, #1
 800eeac:	605a      	str	r2, [r3, #4]
 800eeae:	e003      	b.n	800eeb8 <HAL_JPEG_GetInfo+0x10c>
    }
    else /*Default is 4:4:4*/
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 800eeb0:	683b      	ldr	r3, [r7, #0]
 800eeb2:	2200      	movs	r2, #0
 800eeb4:	605a      	str	r2, [r3, #4]
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800eeb6:	e003      	b.n	800eec0 <HAL_JPEG_GetInfo+0x114>
 800eeb8:	e002      	b.n	800eec0 <HAL_JPEG_GetInfo+0x114>
    }
  }
  else
  {
    pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 800eeba:	683b      	ldr	r3, [r7, #0]
 800eebc:	2200      	movs	r2, #0
 800eebe:	605a      	str	r2, [r3, #4]
  }

  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
 800eec0:	6878      	ldr	r0, [r7, #4]
 800eec2:	f001 fe03 	bl	8010acc <JPEG_GetQuality>
 800eec6:	4602      	mov	r2, r0
 800eec8:	683b      	ldr	r3, [r7, #0]
 800eeca:	611a      	str	r2, [r3, #16]

  /* Return function status */
  return HAL_OK;
 800eecc:	2300      	movs	r3, #0
}
 800eece:	4618      	mov	r0, r3
 800eed0:	3718      	adds	r7, #24
 800eed2:	46bd      	mov	sp, r7
 800eed4:	bd80      	pop	{r7, pc}

0800eed6 <HAL_JPEG_Decode_DMA>:
  * @param  OutDataLength size in bytes of the Output buffer
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Decode_DMA(JPEG_HandleTypeDef *hjpeg, uint8_t *pDataIn, uint32_t InDataLength,
                                       uint8_t *pDataOutMCU, uint32_t OutDataLength)
{
 800eed6:	b580      	push	{r7, lr}
 800eed8:	b084      	sub	sp, #16
 800eeda:	af00      	add	r7, sp, #0
 800eedc:	60f8      	str	r0, [r7, #12]
 800eede:	60b9      	str	r1, [r7, #8]
 800eee0:	607a      	str	r2, [r7, #4]
 800eee2:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param((InDataLength >= 4UL));
  assert_param((OutDataLength >= 4UL));

  /* Check In/out buffer allocation and size */
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
 800eee4:	68fb      	ldr	r3, [r7, #12]
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	d005      	beq.n	800eef6 <HAL_JPEG_Decode_DMA+0x20>
 800eeea:	68bb      	ldr	r3, [r7, #8]
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	d002      	beq.n	800eef6 <HAL_JPEG_Decode_DMA+0x20>
 800eef0:	683b      	ldr	r3, [r7, #0]
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d101      	bne.n	800eefa <HAL_JPEG_Decode_DMA+0x24>
  {
    return HAL_ERROR;
 800eef6:	2301      	movs	r3, #1
 800eef8:	e04c      	b.n	800ef94 <HAL_JPEG_Decode_DMA+0xbe>
  }

  /* Process Locked */
  __HAL_LOCK(hjpeg);
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800ef00:	2b01      	cmp	r3, #1
 800ef02:	d101      	bne.n	800ef08 <HAL_JPEG_Decode_DMA+0x32>
 800ef04:	2302      	movs	r3, #2
 800ef06:	e045      	b.n	800ef94 <HAL_JPEG_Decode_DMA+0xbe>
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	2201      	movs	r2, #1
 800ef0c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  if (hjpeg->State == HAL_JPEG_STATE_READY)
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800ef16:	b2db      	uxtb	r3, r3
 800ef18:	2b01      	cmp	r3, #1
 800ef1a:	d134      	bne.n	800ef86 <HAL_JPEG_Decode_DMA+0xb0>
  {
    /*Change JPEG state*/
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 800ef1c:	68fb      	ldr	r3, [r7, #12]
 800ef1e:	2204      	movs	r2, #4
 800ef20:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

    /*Set the Context to Decode with DMA*/
    hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK);
 800ef24:	68fb      	ldr	r3, [r7, #12]
 800ef26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ef28:	f023 020f 	bic.w	r2, r3, #15
 800ef2c:	68fb      	ldr	r3, [r7, #12]
 800ef2e:	655a      	str	r2, [r3, #84]	; 0x54
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ef34:	f043 020e 	orr.w	r2, r3, #14
 800ef38:	68fb      	ldr	r3, [r7, #12]
 800ef3a:	655a      	str	r2, [r3, #84]	; 0x54

    /*Store In/out buffers pointers and size*/
    hjpeg->pJpegInBuffPtr = pDataIn;
 800ef3c:	68fb      	ldr	r3, [r7, #12]
 800ef3e:	68ba      	ldr	r2, [r7, #8]
 800ef40:	619a      	str	r2, [r3, #24]
    hjpeg->pJpegOutBuffPtr = pDataOutMCU;
 800ef42:	68fb      	ldr	r3, [r7, #12]
 800ef44:	683a      	ldr	r2, [r7, #0]
 800ef46:	61da      	str	r2, [r3, #28]
    hjpeg->InDataLength = InDataLength;
 800ef48:	68fb      	ldr	r3, [r7, #12]
 800ef4a:	687a      	ldr	r2, [r7, #4]
 800ef4c:	629a      	str	r2, [r3, #40]	; 0x28
    hjpeg->OutDataLength = OutDataLength;
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	69ba      	ldr	r2, [r7, #24]
 800ef52:	62da      	str	r2, [r3, #44]	; 0x2c

    /*Reset In/out data counter */
    hjpeg->JpegInCount = 0;
 800ef54:	68fb      	ldr	r3, [r7, #12]
 800ef56:	2200      	movs	r2, #0
 800ef58:	621a      	str	r2, [r3, #32]
    hjpeg->JpegOutCount = 0;
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	2200      	movs	r2, #0
 800ef5e:	625a      	str	r2, [r3, #36]	; 0x24

    /*Init decoding process*/
    JPEG_Init_Process(hjpeg);
 800ef60:	68f8      	ldr	r0, [r7, #12]
 800ef62:	f000 ff43 	bl	800fdec <JPEG_Init_Process>

    /* JPEG decoding process using DMA */
    if (JPEG_DMA_StartProcess(hjpeg) != HAL_OK)
 800ef66:	68f8      	ldr	r0, [r7, #12]
 800ef68:	f001 fa64 	bl	8010434 <JPEG_DMA_StartProcess>
 800ef6c:	4603      	mov	r3, r0
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d00f      	beq.n	800ef92 <HAL_JPEG_Decode_DMA+0xbc>
    {
      /* Update State */
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	2206      	movs	r2, #6
 800ef76:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      /* Process Unlocked */
      __HAL_UNLOCK(hjpeg);
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	2200      	movs	r2, #0
 800ef7e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      return HAL_ERROR;
 800ef82:	2301      	movs	r3, #1
 800ef84:	e006      	b.n	800ef94 <HAL_JPEG_Decode_DMA+0xbe>
    }
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 800ef86:	68fb      	ldr	r3, [r7, #12]
 800ef88:	2200      	movs	r2, #0
 800ef8a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    return HAL_BUSY;
 800ef8e:	2302      	movs	r3, #2
 800ef90:	e000      	b.n	800ef94 <HAL_JPEG_Decode_DMA+0xbe>
  }
  /* Return function status */
  return HAL_OK;
 800ef92:	2300      	movs	r3, #0
}
 800ef94:	4618      	mov	r0, r3
 800ef96:	3710      	adds	r7, #16
 800ef98:	46bd      	mov	sp, r7
 800ef9a:	bd80      	pop	{r7, pc}

0800ef9c <HAL_JPEG_Pause>:
  *                           JPEG_PAUSE_RESUME_OUTPUT: Pause Output processing
  *                           JPEG_PAUSE_RESUME_INPUT_OUTPUT: Pause Input and Output processing
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Pause(JPEG_HandleTypeDef *hjpeg, uint32_t XferSelection)
{
 800ef9c:	b480      	push	{r7}
 800ef9e:	b085      	sub	sp, #20
 800efa0:	af00      	add	r7, sp, #0
 800efa2:	6078      	str	r0, [r7, #4]
 800efa4:	6039      	str	r1, [r7, #0]
  uint32_t mask = 0;
 800efa6:	2300      	movs	r3, #0
 800efa8:	60fb      	str	r3, [r7, #12]

  assert_param(IS_JPEG_PAUSE_RESUME_STATE(XferSelection));

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800efae:	f003 030c 	and.w	r3, r3, #12
 800efb2:	2b0c      	cmp	r3, #12
 800efb4:	d116      	bne.n	800efe4 <HAL_JPEG_Pause+0x48>
  {
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800efb6:	683b      	ldr	r3, [r7, #0]
 800efb8:	f003 0301 	and.w	r3, r3, #1
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d005      	beq.n	800efcc <HAL_JPEG_Pause+0x30>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800efc4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	655a      	str	r2, [r3, #84]	; 0x54
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800efcc:	683b      	ldr	r3, [r7, #0]
 800efce:	f003 0302 	and.w	r3, r3, #2
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d033      	beq.n	800f03e <HAL_JPEG_Pause+0xa2>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800efda:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	655a      	str	r2, [r3, #84]	; 0x54
 800efe2:	e02c      	b.n	800f03e <HAL_JPEG_Pause+0xa2>
    }

  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800efe8:	f003 030c 	and.w	r3, r3, #12
 800efec:	2b08      	cmp	r3, #8
 800efee:	d126      	bne.n	800f03e <HAL_JPEG_Pause+0xa2>
  {

    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800eff0:	683b      	ldr	r3, [r7, #0]
 800eff2:	f003 0301 	and.w	r3, r3, #1
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d009      	beq.n	800f00e <HAL_JPEG_Pause+0x72>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800effe:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	655a      	str	r2, [r3, #84]	; 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	f043 0306 	orr.w	r3, r3, #6
 800f00c:	60fb      	str	r3, [r7, #12]
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800f00e:	683b      	ldr	r3, [r7, #0]
 800f010:	f003 0302 	and.w	r3, r3, #2
 800f014:	2b00      	cmp	r3, #0
 800f016:	d009      	beq.n	800f02c <HAL_JPEG_Pause+0x90>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f01c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	655a      	str	r2, [r3, #84]	; 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 800f024:	68fb      	ldr	r3, [r7, #12]
 800f026:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 800f02a:	60fb      	str	r3, [r7, #12]
    }
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	43da      	mvns	r2, r3
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	681b      	ldr	r3, [r3, #0]
 800f03a:	400a      	ands	r2, r1
 800f03c:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Nothing to do */
  }

  /* Return function status */
  return HAL_OK;
 800f03e:	2300      	movs	r3, #0
}
 800f040:	4618      	mov	r0, r3
 800f042:	3714      	adds	r7, #20
 800f044:	46bd      	mov	sp, r7
 800f046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f04a:	4770      	bx	lr

0800f04c <HAL_JPEG_Resume>:
  *                           JPEG_PAUSE_RESUME_OUTPUT: Resume Output processing
  *                           JPEG_PAUSE_RESUME_INPUT_OUTPUT: Resume Input and Output processing
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Resume(JPEG_HandleTypeDef *hjpeg, uint32_t XferSelection)
{
 800f04c:	b590      	push	{r4, r7, lr}
 800f04e:	b087      	sub	sp, #28
 800f050:	af02      	add	r7, sp, #8
 800f052:	6078      	str	r0, [r7, #4]
 800f054:	6039      	str	r1, [r7, #0]
  uint32_t mask = 0;
 800f056:	2300      	movs	r3, #0
 800f058:	60fb      	str	r3, [r7, #12]
  uint32_t xfrSize;

  assert_param(IS_JPEG_PAUSE_RESUME_STATE(XferSelection));

  if ((hjpeg->Context & (JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT)) == 0UL)
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f05e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800f062:	2b00      	cmp	r3, #0
 800f064:	d101      	bne.n	800f06a <HAL_JPEG_Resume+0x1e>
  {
    /* if nothing paused to resume return error*/
    return HAL_ERROR;
 800f066:	2301      	movs	r3, #1
 800f068:	e0d7      	b.n	800f21a <HAL_JPEG_Resume+0x1ce>
  }

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f06e:	f003 030c 	and.w	r3, r3, #12
 800f072:	2b0c      	cmp	r3, #12
 800f074:	f040 80a4 	bne.w	800f1c0 <HAL_JPEG_Resume+0x174>
  {

    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800f078:	683b      	ldr	r3, [r7, #0]
 800f07a:	f003 0301 	and.w	r3, r3, #1
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d049      	beq.n	800f116 <HAL_JPEG_Resume+0xca>
    {
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f086:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	655a      	str	r2, [r3, #84]	; 0x54
        then MDMA In buffer size is 32 bytes

        else (MDMA In is triggred with JPEG In FIFO not full flag)
        then MDMA In buffer size is 4 bytes
        */
      xfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f094:	60bb      	str	r3, [r7, #8]

      if (xfrSize == 0UL)
 800f096:	68bb      	ldr	r3, [r7, #8]
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d10b      	bne.n	800f0b4 <HAL_JPEG_Resume+0x68>
      {
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f0a0:	f043 0204 	orr.w	r2, r3, #4
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	651a      	str	r2, [r3, #80]	; 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	2206      	movs	r2, #6
 800f0ac:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        return HAL_ERROR;
 800f0b0:	2301      	movs	r3, #1
 800f0b2:	e0b2      	b.n	800f21a <HAL_JPEG_Resume+0x1ce>
      }
      /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % xfrSize);
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f0bc:	68b9      	ldr	r1, [r7, #8]
 800f0be:	fbb3 f1f1 	udiv	r1, r3, r1
 800f0c2:	68b8      	ldr	r0, [r7, #8]
 800f0c4:	fb00 f101 	mul.w	r1, r0, r1
 800f0c8:	1a5b      	subs	r3, r3, r1
 800f0ca:	1ad2      	subs	r2, r2, r3
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	629a      	str	r2, [r3, #40]	; 0x28


      if (hjpeg->InDataLength > 0UL)
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d01e      	beq.n	800f116 <HAL_JPEG_Resume+0xca>
      {
        /* Start DMA FIFO In transfer */
        if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	699b      	ldr	r3, [r3, #24]
 800f0e0:	4619      	mov	r1, r3
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	681b      	ldr	r3, [r3, #0]
 800f0e6:	3340      	adds	r3, #64	; 0x40
 800f0e8:	461c      	mov	r4, r3
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f0ee:	2201      	movs	r2, #1
 800f0f0:	9200      	str	r2, [sp, #0]
 800f0f2:	4622      	mov	r2, r4
 800f0f4:	f002 f97e 	bl	80113f4 <HAL_MDMA_Start_IT>
 800f0f8:	4603      	mov	r3, r0
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d00b      	beq.n	800f116 <HAL_JPEG_Resume+0xca>
                              hjpeg->InDataLength, 1) != HAL_OK)
        {
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f102:	f043 0204 	orr.w	r2, r3, #4
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	651a      	str	r2, [r3, #80]	; 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	2206      	movs	r2, #6
 800f10e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          return HAL_ERROR;
 800f112:	2301      	movs	r3, #1
 800f114:	e081      	b.n	800f21a <HAL_JPEG_Resume+0x1ce>
        }
      }
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800f116:	683b      	ldr	r3, [r7, #0]
 800f118:	f003 0302 	and.w	r3, r3, #2
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d07b      	beq.n	800f218 <HAL_JPEG_Resume+0x1cc>
    {
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f124:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f130:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f134:	2b00      	cmp	r3, #0
 800f136:	d003      	beq.n	800f140 <HAL_JPEG_Resume+0xf4>
      {
        JPEG_DMA_PollResidualData(hjpeg);
 800f138:	6878      	ldr	r0, [r7, #4]
 800f13a:	f001 faf3 	bl	8010724 <JPEG_DMA_PollResidualData>
 800f13e:	e06b      	b.n	800f218 <HAL_JPEG_Resume+0x1cc>
        /*if the MDMA Out is triggred with JPEG Out FIFO Threshold flag
          then MDMA out buffer size is 32 bytes
          else (MDMA Out is triggred with JPEG Out FIFO not empty flag)
          then MDMA buffer size is 4 bytes
          */
        xfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f146:	60bb      	str	r3, [r7, #8]

        if (xfrSize == 0UL)
 800f148:	68bb      	ldr	r3, [r7, #8]
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d10b      	bne.n	800f166 <HAL_JPEG_Resume+0x11a>
        {
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f152:	f043 0204 	orr.w	r2, r3, #4
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	651a      	str	r2, [r3, #80]	; 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	2206      	movs	r2, #6
 800f15e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          return HAL_ERROR;
 800f162:	2301      	movs	r3, #1
 800f164:	e059      	b.n	800f21a <HAL_JPEG_Resume+0x1ce>
        }
        /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f16e:	68b9      	ldr	r1, [r7, #8]
 800f170:	fbb3 f1f1 	udiv	r1, r3, r1
 800f174:	68b8      	ldr	r0, [r7, #8]
 800f176:	fb00 f101 	mul.w	r1, r0, r1
 800f17a:	1a5b      	subs	r3, r3, r1
 800f17c:	1ad2      	subs	r2, r2, r3
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Start DMA FIFO Out transfer */
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	3344      	adds	r3, #68	; 0x44
 800f18c:	4619      	mov	r1, r3
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	69db      	ldr	r3, [r3, #28]
 800f192:	461c      	mov	r4, r3
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f198:	2201      	movs	r2, #1
 800f19a:	9200      	str	r2, [sp, #0]
 800f19c:	4622      	mov	r2, r4
 800f19e:	f002 f929 	bl	80113f4 <HAL_MDMA_Start_IT>
 800f1a2:	4603      	mov	r3, r0
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	d037      	beq.n	800f218 <HAL_JPEG_Resume+0x1cc>
                              hjpeg->OutDataLength, 1) != HAL_OK)
        {
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f1ac:	f043 0204 	orr.w	r2, r3, #4
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	651a      	str	r2, [r3, #80]	; 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	2206      	movs	r2, #6
 800f1b8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          return HAL_ERROR;
 800f1bc:	2301      	movs	r3, #1
 800f1be:	e02c      	b.n	800f21a <HAL_JPEG_Resume+0x1ce>
      }

    }

  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f1c4:	f003 030c 	and.w	r3, r3, #12
 800f1c8:	2b08      	cmp	r3, #8
 800f1ca:	d125      	bne.n	800f218 <HAL_JPEG_Resume+0x1cc>
  {
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800f1cc:	683b      	ldr	r3, [r7, #0]
 800f1ce:	f003 0301 	and.w	r3, r3, #1
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	d009      	beq.n	800f1ea <HAL_JPEG_Resume+0x19e>
    {
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f1da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	655a      	str	r2, [r3, #84]	; 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	f043 0306 	orr.w	r3, r3, #6
 800f1e8:	60fb      	str	r3, [r7, #12]
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800f1ea:	683b      	ldr	r3, [r7, #0]
 800f1ec:	f003 0302 	and.w	r3, r3, #2
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d009      	beq.n	800f208 <HAL_JPEG_Resume+0x1bc>
    {
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f1f8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	655a      	str	r2, [r3, #84]	; 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 800f206:	60fb      	str	r3, [r7, #12]
    }
    __HAL_JPEG_ENABLE_IT(hjpeg, mask);
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	681b      	ldr	r3, [r3, #0]
 800f20c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	681b      	ldr	r3, [r3, #0]
 800f212:	68fa      	ldr	r2, [r7, #12]
 800f214:	430a      	orrs	r2, r1
 800f216:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Nothing to do */
  }

  /* Return function status */
  return HAL_OK;
 800f218:	2300      	movs	r3, #0
}
 800f21a:	4618      	mov	r0, r3
 800f21c:	3714      	adds	r7, #20
 800f21e:	46bd      	mov	sp, r7
 800f220:	bd90      	pop	{r4, r7, pc}

0800f222 <HAL_JPEG_ConfigInputBuffer>:
  * @param  pNewInputBuffer Pointer to the new input data buffer
  * @param  InDataLength Size in bytes of the new Input data buffer
  * @retval HAL status
  */
void HAL_JPEG_ConfigInputBuffer(JPEG_HandleTypeDef *hjpeg, uint8_t *pNewInputBuffer, uint32_t InDataLength)
{
 800f222:	b480      	push	{r7}
 800f224:	b085      	sub	sp, #20
 800f226:	af00      	add	r7, sp, #0
 800f228:	60f8      	str	r0, [r7, #12]
 800f22a:	60b9      	str	r1, [r7, #8]
 800f22c:	607a      	str	r2, [r7, #4]
  hjpeg->pJpegInBuffPtr =  pNewInputBuffer;
 800f22e:	68fb      	ldr	r3, [r7, #12]
 800f230:	68ba      	ldr	r2, [r7, #8]
 800f232:	619a      	str	r2, [r3, #24]
  hjpeg->InDataLength = InDataLength;
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	687a      	ldr	r2, [r7, #4]
 800f238:	629a      	str	r2, [r3, #40]	; 0x28
}
 800f23a:	bf00      	nop
 800f23c:	3714      	adds	r7, #20
 800f23e:	46bd      	mov	sp, r7
 800f240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f244:	4770      	bx	lr

0800f246 <HAL_JPEG_ConfigOutputBuffer>:
  * @param  pNewOutputBuffer Pointer to the new output data buffer
  * @param  OutDataLength Size in bytes of the new Output data buffer
  * @retval HAL status
  */
void HAL_JPEG_ConfigOutputBuffer(JPEG_HandleTypeDef *hjpeg, uint8_t *pNewOutputBuffer, uint32_t OutDataLength)
{
 800f246:	b480      	push	{r7}
 800f248:	b085      	sub	sp, #20
 800f24a:	af00      	add	r7, sp, #0
 800f24c:	60f8      	str	r0, [r7, #12]
 800f24e:	60b9      	str	r1, [r7, #8]
 800f250:	607a      	str	r2, [r7, #4]
  hjpeg->pJpegOutBuffPtr = pNewOutputBuffer;
 800f252:	68fb      	ldr	r3, [r7, #12]
 800f254:	68ba      	ldr	r2, [r7, #8]
 800f256:	61da      	str	r2, [r3, #28]
  hjpeg->OutDataLength = OutDataLength;
 800f258:	68fb      	ldr	r3, [r7, #12]
 800f25a:	687a      	ldr	r2, [r7, #4]
 800f25c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800f25e:	bf00      	nop
 800f260:	3714      	adds	r7, #20
 800f262:	46bd      	mov	sp, r7
 800f264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f268:	4770      	bx	lr

0800f26a <HAL_JPEG_EncodeCpltCallback>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
__weak void HAL_JPEG_EncodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{
 800f26a:	b480      	push	{r7}
 800f26c:	b083      	sub	sp, #12
 800f26e:	af00      	add	r7, sp, #0
 800f270:	6078      	str	r0, [r7, #4]
  UNUSED(hjpeg);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_EncodeCpltCallback could be implemented in the user file
   */
}
 800f272:	bf00      	nop
 800f274:	370c      	adds	r7, #12
 800f276:	46bd      	mov	sp, r7
 800f278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f27c:	4770      	bx	lr

0800f27e <HAL_JPEG_IRQHandler>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
void HAL_JPEG_IRQHandler(JPEG_HandleTypeDef *hjpeg)
{
 800f27e:	b580      	push	{r7, lr}
 800f280:	b082      	sub	sp, #8
 800f282:	af00      	add	r7, sp, #0
 800f284:	6078      	str	r0, [r7, #4]
  switch (hjpeg->State)
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800f28c:	b2db      	uxtb	r3, r3
 800f28e:	3b03      	subs	r3, #3
 800f290:	2b01      	cmp	r3, #1
 800f292:	d813      	bhi.n	800f2bc <HAL_JPEG_IRQHandler+0x3e>
  {
    case HAL_JPEG_STATE_BUSY_ENCODING:
    case HAL_JPEG_STATE_BUSY_DECODING:
      /* continue JPEG data encoding/Decoding*/
      /* JPEG data processing : In/Out FIFO transfer*/
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f298:	f003 030c 	and.w	r3, r3, #12
 800f29c:	2b08      	cmp	r3, #8
 800f29e:	d103      	bne.n	800f2a8 <HAL_JPEG_IRQHandler+0x2a>
      {
        (void) JPEG_Process(hjpeg);
 800f2a0:	6878      	ldr	r0, [r7, #4]
 800f2a2:	f000 fe17 	bl	800fed4 <JPEG_Process>
      }
      else
      {
        /* Nothing to do */
      }
      break;
 800f2a6:	e00b      	b.n	800f2c0 <HAL_JPEG_IRQHandler+0x42>
      else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f2ac:	f003 030c 	and.w	r3, r3, #12
 800f2b0:	2b0c      	cmp	r3, #12
 800f2b2:	d105      	bne.n	800f2c0 <HAL_JPEG_IRQHandler+0x42>
        JPEG_DMA_ContinueProcess(hjpeg);
 800f2b4:	6878      	ldr	r0, [r7, #4]
 800f2b6:	f001 f957 	bl	8010568 <JPEG_DMA_ContinueProcess>
      break;
 800f2ba:	e001      	b.n	800f2c0 <HAL_JPEG_IRQHandler+0x42>

    default:
      break;
 800f2bc:	bf00      	nop
 800f2be:	e000      	b.n	800f2c2 <HAL_JPEG_IRQHandler+0x44>
      break;
 800f2c0:	bf00      	nop
  }
}
 800f2c2:	bf00      	nop
 800f2c4:	3708      	adds	r7, #8
 800f2c6:	46bd      	mov	sp, r7
 800f2c8:	bd80      	pop	{r7, pc}

0800f2ca <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 800f2ca:	b480      	push	{r7}
 800f2cc:	b08b      	sub	sp, #44	; 0x2c
 800f2ce:	af00      	add	r7, sp, #0
 800f2d0:	60f8      	str	r0, [r7, #12]
 800f2d2:	60b9      	str	r1, [r7, #8]
 800f2d4:	607a      	str	r2, [r7, #4]
 800f2d6:	603b      	str	r3, [r7, #0]
  uint32_t l;
  uint32_t code;
  uint32_t si;

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
 800f2d8:	2300      	movs	r3, #0
 800f2da:	623b      	str	r3, [r7, #32]
  for (l = 0; l < 16UL; l++)
 800f2dc:	2300      	movs	r3, #0
 800f2de:	61fb      	str	r3, [r7, #28]
 800f2e0:	e020      	b.n	800f324 <JPEG_Bits_To_SizeCodes+0x5a>
  {
    i = (uint32_t)Bits[l];
 800f2e2:	68fa      	ldr	r2, [r7, #12]
 800f2e4:	69fb      	ldr	r3, [r7, #28]
 800f2e6:	4413      	add	r3, r2
 800f2e8:	781b      	ldrb	r3, [r3, #0]
 800f2ea:	627b      	str	r3, [r7, #36]	; 0x24
    if ((p + i) > 256UL)
 800f2ec:	6a3a      	ldr	r2, [r7, #32]
 800f2ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2f0:	4413      	add	r3, r2
 800f2f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f2f6:	d90f      	bls.n	800f318 <JPEG_Bits_To_SizeCodes+0x4e>
    {
      /* check for table overflow */
      return HAL_ERROR;
 800f2f8:	2301      	movs	r3, #1
 800f2fa:	e055      	b.n	800f3a8 <JPEG_Bits_To_SizeCodes+0xde>
    }
    while (i != 0UL)
    {
      Huffsize[p] = (uint8_t) l + 1U;
 800f2fc:	69fb      	ldr	r3, [r7, #28]
 800f2fe:	b2da      	uxtb	r2, r3
 800f300:	68b9      	ldr	r1, [r7, #8]
 800f302:	6a3b      	ldr	r3, [r7, #32]
 800f304:	440b      	add	r3, r1
 800f306:	3201      	adds	r2, #1
 800f308:	b2d2      	uxtb	r2, r2
 800f30a:	701a      	strb	r2, [r3, #0]
      p++;
 800f30c:	6a3b      	ldr	r3, [r7, #32]
 800f30e:	3301      	adds	r3, #1
 800f310:	623b      	str	r3, [r7, #32]
      i--;
 800f312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f314:	3b01      	subs	r3, #1
 800f316:	627b      	str	r3, [r7, #36]	; 0x24
    while (i != 0UL)
 800f318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d1ee      	bne.n	800f2fc <JPEG_Bits_To_SizeCodes+0x32>
  for (l = 0; l < 16UL; l++)
 800f31e:	69fb      	ldr	r3, [r7, #28]
 800f320:	3301      	adds	r3, #1
 800f322:	61fb      	str	r3, [r7, #28]
 800f324:	69fb      	ldr	r3, [r7, #28]
 800f326:	2b0f      	cmp	r3, #15
 800f328:	d9db      	bls.n	800f2e2 <JPEG_Bits_To_SizeCodes+0x18>
    }
  }
  Huffsize[p] = 0;
 800f32a:	68ba      	ldr	r2, [r7, #8]
 800f32c:	6a3b      	ldr	r3, [r7, #32]
 800f32e:	4413      	add	r3, r2
 800f330:	2200      	movs	r2, #0
 800f332:	701a      	strb	r2, [r3, #0]
  *LastK = p;
 800f334:	683b      	ldr	r3, [r7, #0]
 800f336:	6a3a      	ldr	r2, [r7, #32]
 800f338:	601a      	str	r2, [r3, #0]

  /* Figure C.2: Generation of table of Huffman codes */
  code = 0;
 800f33a:	2300      	movs	r3, #0
 800f33c:	61bb      	str	r3, [r7, #24]
  si = Huffsize[0];
 800f33e:	68bb      	ldr	r3, [r7, #8]
 800f340:	781b      	ldrb	r3, [r3, #0]
 800f342:	617b      	str	r3, [r7, #20]
  p = 0;
 800f344:	2300      	movs	r3, #0
 800f346:	623b      	str	r3, [r7, #32]
  while (Huffsize[p] != 0U)
 800f348:	e027      	b.n	800f39a <JPEG_Bits_To_SizeCodes+0xd0>
  {
    while (((uint32_t) Huffsize[p]) == si)
    {
      Huffcode[p] = code;
 800f34a:	6a3b      	ldr	r3, [r7, #32]
 800f34c:	009b      	lsls	r3, r3, #2
 800f34e:	687a      	ldr	r2, [r7, #4]
 800f350:	4413      	add	r3, r2
 800f352:	69ba      	ldr	r2, [r7, #24]
 800f354:	601a      	str	r2, [r3, #0]
      p++;
 800f356:	6a3b      	ldr	r3, [r7, #32]
 800f358:	3301      	adds	r3, #1
 800f35a:	623b      	str	r3, [r7, #32]
      code++;
 800f35c:	69bb      	ldr	r3, [r7, #24]
 800f35e:	3301      	adds	r3, #1
 800f360:	61bb      	str	r3, [r7, #24]
    while (((uint32_t) Huffsize[p]) == si)
 800f362:	68ba      	ldr	r2, [r7, #8]
 800f364:	6a3b      	ldr	r3, [r7, #32]
 800f366:	4413      	add	r3, r2
 800f368:	781b      	ldrb	r3, [r3, #0]
 800f36a:	461a      	mov	r2, r3
 800f36c:	697b      	ldr	r3, [r7, #20]
 800f36e:	4293      	cmp	r3, r2
 800f370:	d0eb      	beq.n	800f34a <JPEG_Bits_To_SizeCodes+0x80>
    }
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
 800f372:	697b      	ldr	r3, [r7, #20]
 800f374:	2b1f      	cmp	r3, #31
 800f376:	d901      	bls.n	800f37c <JPEG_Bits_To_SizeCodes+0xb2>
    {
      return HAL_ERROR;
 800f378:	2301      	movs	r3, #1
 800f37a:	e015      	b.n	800f3a8 <JPEG_Bits_To_SizeCodes+0xde>
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 800f37c:	2201      	movs	r2, #1
 800f37e:	697b      	ldr	r3, [r7, #20]
 800f380:	fa02 f303 	lsl.w	r3, r2, r3
 800f384:	69ba      	ldr	r2, [r7, #24]
 800f386:	429a      	cmp	r2, r3
 800f388:	d301      	bcc.n	800f38e <JPEG_Bits_To_SizeCodes+0xc4>
    {
      return HAL_ERROR;
 800f38a:	2301      	movs	r3, #1
 800f38c:	e00c      	b.n	800f3a8 <JPEG_Bits_To_SizeCodes+0xde>
    }
    code <<= 1;
 800f38e:	69bb      	ldr	r3, [r7, #24]
 800f390:	005b      	lsls	r3, r3, #1
 800f392:	61bb      	str	r3, [r7, #24]
    si++;
 800f394:	697b      	ldr	r3, [r7, #20]
 800f396:	3301      	adds	r3, #1
 800f398:	617b      	str	r3, [r7, #20]
  while (Huffsize[p] != 0U)
 800f39a:	68ba      	ldr	r2, [r7, #8]
 800f39c:	6a3b      	ldr	r3, [r7, #32]
 800f39e:	4413      	add	r3, r2
 800f3a0:	781b      	ldrb	r3, [r3, #0]
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	d1dd      	bne.n	800f362 <JPEG_Bits_To_SizeCodes+0x98>
  }
  /* Return function status */
  return HAL_OK;
 800f3a6:	2300      	movs	r3, #0
}
 800f3a8:	4618      	mov	r0, r3
 800f3aa:	372c      	adds	r7, #44	; 0x2c
 800f3ac:	46bd      	mov	sp, r7
 800f3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3b2:	4770      	bx	lr

0800f3b4 <JPEG_ACHuff_BitsVals_To_SizeCodes>:
  * @param  AC_SizeCodesTable pointer to AC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_ACHuff_BitsVals_To_SizeCodes(JPEG_ACHuffTableTypeDef *AC_BitsValsTable,
                                                           JPEG_AC_HuffCodeTableTypeDef *AC_SizeCodesTable)
{
 800f3b4:	b580      	push	{r7, lr}
 800f3b6:	f5ad 6da5 	sub.w	sp, sp, #1320	; 0x528
 800f3ba:	af00      	add	r7, sp, #0
 800f3bc:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 800f3c0:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 800f3c4:	6018      	str	r0, [r3, #0]
 800f3c6:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 800f3ca:	f5a3 63a5 	sub.w	r3, r3, #1320	; 0x528
 800f3ce:	6019      	str	r1, [r3, #0]
  uint32_t huffcode[257];
  uint32_t k;
  uint32_t l, lsb, msb;
  uint32_t lastK;

  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 800f3d0:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 800f3d4:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 800f3d8:	6818      	ldr	r0, [r3, #0]
 800f3da:	f107 0308 	add.w	r3, r7, #8
 800f3de:	f107 020c 	add.w	r2, r7, #12
 800f3e2:	f507 6182 	add.w	r1, r7, #1040	; 0x410
 800f3e6:	f7ff ff70 	bl	800f2ca <JPEG_Bits_To_SizeCodes>
 800f3ea:	4603      	mov	r3, r0
 800f3ec:	f887 351f 	strb.w	r3, [r7, #1311]	; 0x51f
  if (error != HAL_OK)
 800f3f0:	f897 351f 	ldrb.w	r3, [r7, #1311]	; 0x51f
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d002      	beq.n	800f3fe <JPEG_ACHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 800f3f8:	f897 351f 	ldrb.w	r3, [r7, #1311]	; 0x51f
 800f3fc:	e075      	b.n	800f4ea <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
  }

  /* Figure C.3: Ordering procedure for encoding procedure code tables */
  k = 0;
 800f3fe:	2300      	movs	r3, #0
 800f400:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524

  while (k < lastK)
 800f404:	e067      	b.n	800f4d6 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x122>
  {
    l = AC_BitsValsTable->HuffVal[k];
 800f406:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 800f40a:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 800f40e:	681a      	ldr	r2, [r3, #0]
 800f410:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 800f414:	4413      	add	r3, r2
 800f416:	3310      	adds	r3, #16
 800f418:	781b      	ldrb	r3, [r3, #0]
 800f41a:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
    if (l == 0UL)
 800f41e:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 800f422:	2b00      	cmp	r3, #0
 800f424:	d103      	bne.n	800f42e <JPEG_ACHuff_BitsVals_To_SizeCodes+0x7a>
    {
      l = 160; /*l = 0x00 EOB code*/
 800f426:	23a0      	movs	r3, #160	; 0xa0
 800f428:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
 800f42c:	e021      	b.n	800f472 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 800f42e:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 800f432:	2bf0      	cmp	r3, #240	; 0xf0
 800f434:	d103      	bne.n	800f43e <JPEG_ACHuff_BitsVals_To_SizeCodes+0x8a>
    {
      l = 161;
 800f436:	23a1      	movs	r3, #161	; 0xa1
 800f438:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
 800f43c:	e019      	b.n	800f472 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else
    {
      msb = (l & 0xF0UL) >> 4;
 800f43e:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 800f442:	091b      	lsrs	r3, r3, #4
 800f444:	f003 030f 	and.w	r3, r3, #15
 800f448:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
      lsb = (l & 0x0FUL);
 800f44c:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 800f450:	f003 030f 	and.w	r3, r3, #15
 800f454:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
      l = (msb * 10UL) + lsb - 1UL;
 800f458:	f8d7 2518 	ldr.w	r2, [r7, #1304]	; 0x518
 800f45c:	4613      	mov	r3, r2
 800f45e:	009b      	lsls	r3, r3, #2
 800f460:	4413      	add	r3, r2
 800f462:	005b      	lsls	r3, r3, #1
 800f464:	461a      	mov	r2, r3
 800f466:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 800f46a:	4413      	add	r3, r2
 800f46c:	3b01      	subs	r3, #1
 800f46e:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
    }
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 800f472:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 800f476:	2ba1      	cmp	r3, #161	; 0xa1
 800f478:	d901      	bls.n	800f47e <JPEG_ACHuff_BitsVals_To_SizeCodes+0xca>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 800f47a:	2301      	movs	r3, #1
 800f47c:	e035      	b.n	800f4ea <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
    }
    else
    {
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 800f47e:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 800f482:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 800f486:	f8d7 2524 	ldr.w	r2, [r7, #1316]	; 0x524
 800f48a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800f48e:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 800f492:	f5a3 63a5 	sub.w	r3, r3, #1320	; 0x528
 800f496:	6819      	ldr	r1, [r3, #0]
 800f498:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 800f49c:	3328      	adds	r3, #40	; 0x28
 800f49e:	009b      	lsls	r3, r3, #2
 800f4a0:	440b      	add	r3, r1
 800f4a2:	605a      	str	r2, [r3, #4]
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 800f4a4:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 800f4a8:	f5a3 728c 	sub.w	r2, r3, #280	; 0x118
 800f4ac:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 800f4b0:	4413      	add	r3, r2
 800f4b2:	781b      	ldrb	r3, [r3, #0]
 800f4b4:	3b01      	subs	r3, #1
 800f4b6:	b2d9      	uxtb	r1, r3
 800f4b8:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 800f4bc:	f5a3 63a5 	sub.w	r3, r3, #1320	; 0x528
 800f4c0:	681a      	ldr	r2, [r3, #0]
 800f4c2:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 800f4c6:	4413      	add	r3, r2
 800f4c8:	460a      	mov	r2, r1
 800f4ca:	701a      	strb	r2, [r3, #0]
      k++;
 800f4cc:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 800f4d0:	3301      	adds	r3, #1
 800f4d2:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
  while (k < lastK)
 800f4d6:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 800f4da:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 800f4de:	681b      	ldr	r3, [r3, #0]
 800f4e0:	f8d7 2524 	ldr.w	r2, [r7, #1316]	; 0x524
 800f4e4:	429a      	cmp	r2, r3
 800f4e6:	d38e      	bcc.n	800f406 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 800f4e8:	2300      	movs	r3, #0
}
 800f4ea:	4618      	mov	r0, r3
 800f4ec:	f507 67a5 	add.w	r7, r7, #1320	; 0x528
 800f4f0:	46bd      	mov	sp, r7
 800f4f2:	bd80      	pop	{r7, pc}

0800f4f4 <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 800f4f4:	b580      	push	{r7, lr}
 800f4f6:	f5ad 6da4 	sub.w	sp, sp, #1312	; 0x520
 800f4fa:	af00      	add	r7, sp, #0
 800f4fc:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 800f500:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 800f504:	6018      	str	r0, [r3, #0]
 800f506:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 800f50a:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 800f50e:	6019      	str	r1, [r3, #0]
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 800f510:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 800f514:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 800f518:	6818      	ldr	r0, [r3, #0]
 800f51a:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 800f51e:	f107 0208 	add.w	r2, r7, #8
 800f522:	f207 410c 	addw	r1, r7, #1036	; 0x40c
 800f526:	f7ff fed0 	bl	800f2ca <JPEG_Bits_To_SizeCodes>
 800f52a:	4603      	mov	r3, r0
 800f52c:	f887 351b 	strb.w	r3, [r7, #1307]	; 0x51b
  if (error != HAL_OK)
 800f530:	f897 351b 	ldrb.w	r3, [r7, #1307]	; 0x51b
 800f534:	2b00      	cmp	r3, #0
 800f536:	d002      	beq.n	800f53e <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 800f538:	f897 351b 	ldrb.w	r3, [r7, #1307]	; 0x51b
 800f53c:	e048      	b.n	800f5d0 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;
 800f53e:	2300      	movs	r3, #0
 800f540:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c

  while (k < lastK)
 800f544:	e03d      	b.n	800f5c2 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xce>
  {
    l = DC_BitsValsTable->HuffVal[k];
 800f546:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 800f54a:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 800f54e:	681a      	ldr	r2, [r3, #0]
 800f550:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 800f554:	4413      	add	r3, r2
 800f556:	3310      	adds	r3, #16
 800f558:	781b      	ldrb	r3, [r3, #0]
 800f55a:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 800f55e:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 800f562:	2b0b      	cmp	r3, #11
 800f564:	d901      	bls.n	800f56a <JPEG_DCHuff_BitsVals_To_SizeCodes+0x76>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 800f566:	2301      	movs	r3, #1
 800f568:	e032      	b.n	800f5d0 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
    }
    else
    {
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 800f56a:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 800f56e:	f5a3 63a3 	sub.w	r3, r3, #1304	; 0x518
 800f572:	f8d7 251c 	ldr.w	r2, [r7, #1308]	; 0x51c
 800f576:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800f57a:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 800f57e:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 800f582:	6819      	ldr	r1, [r3, #0]
 800f584:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 800f588:	3302      	adds	r3, #2
 800f58a:	009b      	lsls	r3, r3, #2
 800f58c:	440b      	add	r3, r1
 800f58e:	605a      	str	r2, [r3, #4]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 800f590:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 800f594:	f5a3 728a 	sub.w	r2, r3, #276	; 0x114
 800f598:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 800f59c:	4413      	add	r3, r2
 800f59e:	781b      	ldrb	r3, [r3, #0]
 800f5a0:	3b01      	subs	r3, #1
 800f5a2:	b2d9      	uxtb	r1, r3
 800f5a4:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 800f5a8:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 800f5ac:	681a      	ldr	r2, [r3, #0]
 800f5ae:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 800f5b2:	4413      	add	r3, r2
 800f5b4:	460a      	mov	r2, r1
 800f5b6:	701a      	strb	r2, [r3, #0]
      k++;
 800f5b8:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 800f5bc:	3301      	adds	r3, #1
 800f5be:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c
  while (k < lastK)
 800f5c2:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 800f5c6:	f8d7 251c 	ldr.w	r2, [r7, #1308]	; 0x51c
 800f5ca:	429a      	cmp	r2, r3
 800f5cc:	d3bb      	bcc.n	800f546 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 800f5ce:	2300      	movs	r3, #0
}
 800f5d0:	4618      	mov	r0, r3
 800f5d2:	f507 67a4 	add.w	r7, r7, #1312	; 0x520
 800f5d6:	46bd      	mov	sp, r7
 800f5d8:	bd80      	pop	{r7, pc}

0800f5da <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 800f5da:	b580      	push	{r7, lr}
 800f5dc:	b09a      	sub	sp, #104	; 0x68
 800f5de:	af00      	add	r7, sp, #0
 800f5e0:	60f8      	str	r0, [r7, #12]
 800f5e2:	60b9      	str	r1, [r7, #8]
 800f5e4:	607a      	str	r2, [r7, #4]
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 800f5e6:	68fb      	ldr	r3, [r7, #12]
 800f5e8:	681b      	ldr	r3, [r3, #0]
 800f5ea:	f503 63f8 	add.w	r3, r3, #1984	; 0x7c0
 800f5ee:	687a      	ldr	r2, [r7, #4]
 800f5f0:	429a      	cmp	r2, r3
 800f5f2:	d106      	bne.n	800f602 <JPEG_Set_HuffDC_Mem+0x28>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 800f5f4:	68fb      	ldr	r3, [r7, #12]
 800f5f6:	681b      	ldr	r3, [r3, #0]
 800f5f8:	f503 63f8 	add.w	r3, r3, #1984	; 0x7c0
 800f5fc:	3318      	adds	r3, #24
 800f5fe:	663b      	str	r3, [r7, #96]	; 0x60
 800f600:	e00f      	b.n	800f622 <JPEG_Set_HuffDC_Mem+0x48>
  }
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 800f602:	68fb      	ldr	r3, [r7, #12]
 800f604:	681b      	ldr	r3, [r3, #0]
 800f606:	f503 63fc 	add.w	r3, r3, #2016	; 0x7e0
 800f60a:	687a      	ldr	r2, [r7, #4]
 800f60c:	429a      	cmp	r2, r3
 800f60e:	d106      	bne.n	800f61e <JPEG_Set_HuffDC_Mem+0x44>
  {
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 800f610:	68fb      	ldr	r3, [r7, #12]
 800f612:	681b      	ldr	r3, [r3, #0]
 800f614:	f503 63fc 	add.w	r3, r3, #2016	; 0x7e0
 800f618:	3318      	adds	r3, #24
 800f61a:	663b      	str	r3, [r7, #96]	; 0x60
 800f61c:	e001      	b.n	800f622 <JPEG_Set_HuffDC_Mem+0x48>
  }
  else
  {
    return HAL_ERROR;
 800f61e:	2301      	movs	r3, #1
 800f620:	e059      	b.n	800f6d6 <JPEG_Set_HuffDC_Mem+0xfc>
  }

  if (HuffTableDC != NULL)
 800f622:	68bb      	ldr	r3, [r7, #8]
 800f624:	2b00      	cmp	r3, #0
 800f626:	d055      	beq.n	800f6d4 <JPEG_Set_HuffDC_Mem+0xfa>
  {
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 800f628:	f107 0314 	add.w	r3, r7, #20
 800f62c:	4619      	mov	r1, r3
 800f62e:	68b8      	ldr	r0, [r7, #8]
 800f630:	f7ff ff60 	bl	800f4f4 <JPEG_DCHuff_BitsVals_To_SizeCodes>
 800f634:	4603      	mov	r3, r0
 800f636:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if (error != HAL_OK)
 800f63a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f63e:	2b00      	cmp	r3, #0
 800f640:	d002      	beq.n	800f648 <JPEG_Set_HuffDC_Mem+0x6e>
    {
      return  error;
 800f642:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f646:	e046      	b.n	800f6d6 <JPEG_Set_HuffDC_Mem+0xfc>
    }
    addressDef = address;
 800f648:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f64a:	65bb      	str	r3, [r7, #88]	; 0x58
    *addressDef = 0x0FFF0FFF;
 800f64c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f64e:	f06f 22f0 	mvn.w	r2, #4026593280	; 0xf000f000
 800f652:	601a      	str	r2, [r3, #0]
    addressDef++;
 800f654:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f656:	3304      	adds	r3, #4
 800f658:	65bb      	str	r3, [r7, #88]	; 0x58
    *addressDef = 0x0FFF0FFF;
 800f65a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f65c:	f06f 22f0 	mvn.w	r2, #4026593280	; 0xf000f000
 800f660:	601a      	str	r2, [r3, #0]

    i = JPEG_DC_HUFF_TABLE_SIZE;
 800f662:	230c      	movs	r3, #12
 800f664:	667b      	str	r3, [r7, #100]	; 0x64
    while (i > 1UL)
 800f666:	e032      	b.n	800f6ce <JPEG_Set_HuffDC_Mem+0xf4>
    {
      i--;
 800f668:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f66a:	3b01      	subs	r3, #1
 800f66c:	667b      	str	r3, [r7, #100]	; 0x64
      address --;
 800f66e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f670:	3b04      	subs	r3, #4
 800f672:	663b      	str	r3, [r7, #96]	; 0x60
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800f674:	f107 0214 	add.w	r2, r7, #20
 800f678:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f67a:	4413      	add	r3, r2
 800f67c:	781b      	ldrb	r3, [r3, #0]
 800f67e:	021b      	lsls	r3, r3, #8
 800f680:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800f684:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f686:	3302      	adds	r3, #2
 800f688:	009b      	lsls	r3, r3, #2
 800f68a:	3368      	adds	r3, #104	; 0x68
 800f68c:	443b      	add	r3, r7
 800f68e:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800f692:	b2db      	uxtb	r3, r3
 800f694:	4313      	orrs	r3, r2
 800f696:	657b      	str	r3, [r7, #84]	; 0x54
                                                                                   0xFFUL);
      i--;
 800f698:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f69a:	3b01      	subs	r3, #1
 800f69c:	667b      	str	r3, [r7, #100]	; 0x64
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800f69e:	f107 0214 	add.w	r2, r7, #20
 800f6a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f6a4:	4413      	add	r3, r2
 800f6a6:	781b      	ldrb	r3, [r3, #0]
 800f6a8:	021b      	lsls	r3, r3, #8
 800f6aa:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800f6ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f6b0:	3302      	adds	r3, #2
 800f6b2:	009b      	lsls	r3, r3, #2
 800f6b4:	3368      	adds	r3, #104	; 0x68
 800f6b6:	443b      	add	r3, r7
 800f6b8:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800f6bc:	b2db      	uxtb	r3, r3
 800f6be:	4313      	orrs	r3, r2
 800f6c0:	653b      	str	r3, [r7, #80]	; 0x50
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 800f6c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f6c4:	041a      	lsls	r2, r3, #16
 800f6c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f6c8:	431a      	orrs	r2, r3
 800f6ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f6cc:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 800f6ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f6d0:	2b01      	cmp	r3, #1
 800f6d2:	d8c9      	bhi.n	800f668 <JPEG_Set_HuffDC_Mem+0x8e>
    }
  }

  /* Return function status */
  return HAL_OK;
 800f6d4:	2300      	movs	r3, #0
}
 800f6d6:	4618      	mov	r0, r3
 800f6d8:	3768      	adds	r7, #104	; 0x68
 800f6da:	46bd      	mov	sp, r7
 800f6dc:	bd80      	pop	{r7, pc}
	...

0800f6e0 <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 800f6e0:	b580      	push	{r7, lr}
 800f6e2:	f5ad 7d56 	sub.w	sp, sp, #856	; 0x358
 800f6e6:	af00      	add	r7, sp, #0
 800f6e8:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800f6ec:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 800f6f0:	6018      	str	r0, [r3, #0]
 800f6f2:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800f6f6:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 800f6fa:	6019      	str	r1, [r3, #0]
 800f6fc:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800f700:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 800f704:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 800f706:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800f70a:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 800f70e:	681b      	ldr	r3, [r3, #0]
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f716:	f507 7256 	add.w	r2, r7, #856	; 0x358
 800f71a:	f5a2 7255 	sub.w	r2, r2, #852	; 0x354
 800f71e:	6812      	ldr	r2, [r2, #0]
 800f720:	429a      	cmp	r2, r3
 800f722:	d10c      	bne.n	800f73e <JPEG_Set_HuffAC_Mem+0x5e>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 800f724:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800f728:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 800f72c:	681b      	ldr	r3, [r3, #0]
 800f72e:	681b      	ldr	r3, [r3, #0]
 800f730:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f734:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800f738:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 800f73c:	e01d      	b.n	800f77a <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 800f73e:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800f742:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	681b      	ldr	r3, [r3, #0]
 800f74a:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
 800f74e:	f507 7256 	add.w	r2, r7, #856	; 0x358
 800f752:	f5a2 7255 	sub.w	r2, r2, #852	; 0x354
 800f756:	6812      	ldr	r2, [r2, #0]
 800f758:	429a      	cmp	r2, r3
 800f75a:	d10c      	bne.n	800f776 <JPEG_Set_HuffAC_Mem+0x96>
  {
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 800f75c:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800f760:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 800f764:	681b      	ldr	r3, [r3, #0]
 800f766:	681b      	ldr	r3, [r3, #0]
 800f768:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
 800f76c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800f770:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 800f774:	e001      	b.n	800f77a <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else
  {
    return HAL_ERROR;
 800f776:	2301      	movs	r3, #1
 800f778:	e0a8      	b.n	800f8cc <JPEG_Set_HuffAC_Mem+0x1ec>
  }

  if (HuffTableAC != NULL)
 800f77a:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800f77e:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 800f782:	681b      	ldr	r3, [r3, #0]
 800f784:	2b00      	cmp	r3, #0
 800f786:	f000 80a0 	beq.w	800f8ca <JPEG_Set_HuffAC_Mem+0x1ea>
  {
    error = JPEG_ACHuff_BitsVals_To_SizeCodes(HuffTableAC, &acSizeCodesTable);
 800f78a:	f107 0214 	add.w	r2, r7, #20
 800f78e:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800f792:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 800f796:	4611      	mov	r1, r2
 800f798:	6818      	ldr	r0, [r3, #0]
 800f79a:	f7ff fe0b 	bl	800f3b4 <JPEG_ACHuff_BitsVals_To_SizeCodes>
 800f79e:	4603      	mov	r3, r0
 800f7a0:	f887 334b 	strb.w	r3, [r7, #843]	; 0x34b
    if (error != HAL_OK)
 800f7a4:	f897 334b 	ldrb.w	r3, [r7, #843]	; 0x34b
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	d002      	beq.n	800f7b2 <JPEG_Set_HuffAC_Mem+0xd2>
    {
      return  error;
 800f7ac:	f897 334b 	ldrb.w	r3, [r7, #843]	; 0x34b
 800f7b0:	e08c      	b.n	800f8cc <JPEG_Set_HuffAC_Mem+0x1ec>
    }
    /* Default values settings: 162:167 FFFh , 168:175 FD0h_FD7h */
    /* Locations 162:175 of each AC table contain information used internally by the core */

    addressDef = address;
 800f7b2:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 800f7b6:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    for (i = 0; i < 3UL; i++)
 800f7ba:	2300      	movs	r3, #0
 800f7bc:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 800f7c0:	e00e      	b.n	800f7e0 <JPEG_Set_HuffAC_Mem+0x100>
    {
      *addressDef = 0x0FFF0FFF;
 800f7c2:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 800f7c6:	f06f 22f0 	mvn.w	r2, #4026593280	; 0xf000f000
 800f7ca:	601a      	str	r2, [r3, #0]
      addressDef++;
 800f7cc:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 800f7d0:	3304      	adds	r3, #4
 800f7d2:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    for (i = 0; i < 3UL; i++)
 800f7d6:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 800f7da:	3301      	adds	r3, #1
 800f7dc:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 800f7e0:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 800f7e4:	2b02      	cmp	r3, #2
 800f7e6:	d9ec      	bls.n	800f7c2 <JPEG_Set_HuffAC_Mem+0xe2>
    }
    *addressDef = 0x0FD10FD0;
 800f7e8:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 800f7ec:	4a3a      	ldr	r2, [pc, #232]	; (800f8d8 <JPEG_Set_HuffAC_Mem+0x1f8>)
 800f7ee:	601a      	str	r2, [r3, #0]
    addressDef++;
 800f7f0:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 800f7f4:	3304      	adds	r3, #4
 800f7f6:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    *addressDef = 0x0FD30FD2;
 800f7fa:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 800f7fe:	4a37      	ldr	r2, [pc, #220]	; (800f8dc <JPEG_Set_HuffAC_Mem+0x1fc>)
 800f800:	601a      	str	r2, [r3, #0]
    addressDef++;
 800f802:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 800f806:	3304      	adds	r3, #4
 800f808:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    *addressDef = 0x0FD50FD4;
 800f80c:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 800f810:	4a33      	ldr	r2, [pc, #204]	; (800f8e0 <JPEG_Set_HuffAC_Mem+0x200>)
 800f812:	601a      	str	r2, [r3, #0]
    addressDef++;
 800f814:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 800f818:	3304      	adds	r3, #4
 800f81a:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    *addressDef = 0x0FD70FD6;
 800f81e:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 800f822:	4a30      	ldr	r2, [pc, #192]	; (800f8e4 <JPEG_Set_HuffAC_Mem+0x204>)
 800f824:	601a      	str	r2, [r3, #0]
    /* end of Locations 162:175  */


    i = JPEG_AC_HUFF_TABLE_SIZE;
 800f826:	23a2      	movs	r3, #162	; 0xa2
 800f828:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
    while (i > 1UL)
 800f82c:	e049      	b.n	800f8c2 <JPEG_Set_HuffAC_Mem+0x1e2>
    {
      i--;
 800f82e:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 800f832:	3b01      	subs	r3, #1
 800f834:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
      address--;
 800f838:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 800f83c:	3b04      	subs	r3, #4
 800f83e:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800f842:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800f846:	f5a3 7251 	sub.w	r2, r3, #836	; 0x344
 800f84a:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 800f84e:	4413      	add	r3, r2
 800f850:	781b      	ldrb	r3, [r3, #0]
 800f852:	021b      	lsls	r3, r3, #8
 800f854:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800f858:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800f85c:	f5a3 7151 	sub.w	r1, r3, #836	; 0x344
 800f860:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 800f864:	3328      	adds	r3, #40	; 0x28
 800f866:	009b      	lsls	r3, r3, #2
 800f868:	440b      	add	r3, r1
 800f86a:	685b      	ldr	r3, [r3, #4]
 800f86c:	b2db      	uxtb	r3, r3
 800f86e:	4313      	orrs	r3, r2
 800f870:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
                                                                                   0xFFUL);
      i--;
 800f874:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 800f878:	3b01      	subs	r3, #1
 800f87a:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800f87e:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800f882:	f5a3 7251 	sub.w	r2, r3, #836	; 0x344
 800f886:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 800f88a:	4413      	add	r3, r2
 800f88c:	781b      	ldrb	r3, [r3, #0]
 800f88e:	021b      	lsls	r3, r3, #8
 800f890:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800f894:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800f898:	f5a3 7151 	sub.w	r1, r3, #836	; 0x344
 800f89c:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 800f8a0:	3328      	adds	r3, #40	; 0x28
 800f8a2:	009b      	lsls	r3, r3, #2
 800f8a4:	440b      	add	r3, r1
 800f8a6:	685b      	ldr	r3, [r3, #4]
 800f8a8:	b2db      	uxtb	r3, r3
 800f8aa:	4313      	orrs	r3, r2
 800f8ac:	f8c7 3340 	str.w	r3, [r7, #832]	; 0x340
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 800f8b0:	f8d7 3344 	ldr.w	r3, [r7, #836]	; 0x344
 800f8b4:	041a      	lsls	r2, r3, #16
 800f8b6:	f8d7 3340 	ldr.w	r3, [r7, #832]	; 0x340
 800f8ba:	431a      	orrs	r2, r3
 800f8bc:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 800f8c0:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 800f8c2:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 800f8c6:	2b01      	cmp	r3, #1
 800f8c8:	d8b1      	bhi.n	800f82e <JPEG_Set_HuffAC_Mem+0x14e>
    }
  }

  /* Return function status */
  return HAL_OK;
 800f8ca:	2300      	movs	r3, #0
}
 800f8cc:	4618      	mov	r0, r3
 800f8ce:	f507 7756 	add.w	r7, r7, #856	; 0x358
 800f8d2:	46bd      	mov	sp, r7
 800f8d4:	bd80      	pop	{r7, pc}
 800f8d6:	bf00      	nop
 800f8d8:	0fd10fd0 	.word	0x0fd10fd0
 800f8dc:	0fd30fd2 	.word	0x0fd30fd2
 800f8e0:	0fd50fd4 	.word	0x0fd50fd4
 800f8e4:	0fd70fd6 	.word	0x0fd70fd6

0800f8e8 <JPEG_Set_HuffEnc_Mem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static HAL_StatusTypeDef JPEG_Set_HuffEnc_Mem(JPEG_HandleTypeDef *hjpeg)
{
 800f8e8:	b580      	push	{r7, lr}
 800f8ea:	b084      	sub	sp, #16
 800f8ec:	af00      	add	r7, sp, #0
 800f8ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef error;

  JPEG_Set_Huff_DHTMem(hjpeg);
 800f8f0:	6878      	ldr	r0, [r7, #4]
 800f8f2:	f000 f84d 	bl	800f990 <JPEG_Set_Huff_DHTMem>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC0));
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	681b      	ldr	r3, [r3, #0]
 800f8fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 800f8fe:	461a      	mov	r2, r3
 800f900:	491f      	ldr	r1, [pc, #124]	; (800f980 <JPEG_Set_HuffEnc_Mem+0x98>)
 800f902:	6878      	ldr	r0, [r7, #4]
 800f904:	f7ff feec 	bl	800f6e0 <JPEG_Set_HuffAC_Mem>
 800f908:	4603      	mov	r3, r0
 800f90a:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 800f90c:	7bfb      	ldrb	r3, [r7, #15]
 800f90e:	2b00      	cmp	r3, #0
 800f910:	d001      	beq.n	800f916 <JPEG_Set_HuffEnc_Mem+0x2e>
  {
    return  error;
 800f912:	7bfb      	ldrb	r3, [r7, #15]
 800f914:	e030      	b.n	800f978 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC1));
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	681b      	ldr	r3, [r3, #0]
 800f91a:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 800f91e:	461a      	mov	r2, r3
 800f920:	4918      	ldr	r1, [pc, #96]	; (800f984 <JPEG_Set_HuffEnc_Mem+0x9c>)
 800f922:	6878      	ldr	r0, [r7, #4]
 800f924:	f7ff fedc 	bl	800f6e0 <JPEG_Set_HuffAC_Mem>
 800f928:	4603      	mov	r3, r0
 800f92a:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 800f92c:	7bfb      	ldrb	r3, [r7, #15]
 800f92e:	2b00      	cmp	r3, #0
 800f930:	d001      	beq.n	800f936 <JPEG_Set_HuffEnc_Mem+0x4e>
  {
    return  error;
 800f932:	7bfb      	ldrb	r3, [r7, #15]
 800f934:	e020      	b.n	800f978 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC0);
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	681b      	ldr	r3, [r3, #0]
 800f93a:	f503 63f8 	add.w	r3, r3, #1984	; 0x7c0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 800f93e:	461a      	mov	r2, r3
 800f940:	4911      	ldr	r1, [pc, #68]	; (800f988 <JPEG_Set_HuffEnc_Mem+0xa0>)
 800f942:	6878      	ldr	r0, [r7, #4]
 800f944:	f7ff fe49 	bl	800f5da <JPEG_Set_HuffDC_Mem>
 800f948:	4603      	mov	r3, r0
 800f94a:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 800f94c:	7bfb      	ldrb	r3, [r7, #15]
 800f94e:	2b00      	cmp	r3, #0
 800f950:	d001      	beq.n	800f956 <JPEG_Set_HuffEnc_Mem+0x6e>
  {
    return  error;
 800f952:	7bfb      	ldrb	r3, [r7, #15]
 800f954:	e010      	b.n	800f978 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC1);
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	681b      	ldr	r3, [r3, #0]
 800f95a:	f503 63fc 	add.w	r3, r3, #2016	; 0x7e0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 800f95e:	461a      	mov	r2, r3
 800f960:	490a      	ldr	r1, [pc, #40]	; (800f98c <JPEG_Set_HuffEnc_Mem+0xa4>)
 800f962:	6878      	ldr	r0, [r7, #4]
 800f964:	f7ff fe39 	bl	800f5da <JPEG_Set_HuffDC_Mem>
 800f968:	4603      	mov	r3, r0
 800f96a:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 800f96c:	7bfb      	ldrb	r3, [r7, #15]
 800f96e:	2b00      	cmp	r3, #0
 800f970:	d001      	beq.n	800f976 <JPEG_Set_HuffEnc_Mem+0x8e>
  {
    return  error;
 800f972:	7bfb      	ldrb	r3, [r7, #15]
 800f974:	e000      	b.n	800f978 <JPEG_Set_HuffEnc_Mem+0x90>
  }
  /* Return function status */
  return HAL_OK;
 800f976:	2300      	movs	r3, #0
}
 800f978:	4618      	mov	r0, r3
 800f97a:	3710      	adds	r7, #16
 800f97c:	46bd      	mov	sp, r7
 800f97e:	bd80      	pop	{r7, pc}
 800f980:	0802ccd0 	.word	0x0802ccd0
 800f984:	0802cd84 	.word	0x0802cd84
 800f988:	0802cc98 	.word	0x0802cc98
 800f98c:	0802ccb4 	.word	0x0802ccb4

0800f990 <JPEG_Set_Huff_DHTMem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Set_Huff_DHTMem(JPEG_HandleTypeDef *hjpeg)
{
 800f990:	b480      	push	{r7}
 800f992:	b08b      	sub	sp, #44	; 0x2c
 800f994:	af00      	add	r7, sp, #0
 800f996:	6078      	str	r0, [r7, #4]
  JPEG_ACHuffTableTypeDef *HuffTableAC0 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable;
 800f998:	4b80      	ldr	r3, [pc, #512]	; (800fb9c <JPEG_Set_Huff_DHTMem+0x20c>)
 800f99a:	61fb      	str	r3, [r7, #28]
  JPEG_ACHuffTableTypeDef *HuffTableAC1 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable;
 800f99c:	4b80      	ldr	r3, [pc, #512]	; (800fba0 <JPEG_Set_Huff_DHTMem+0x210>)
 800f99e:	61bb      	str	r3, [r7, #24]
  JPEG_DCHuffTableTypeDef *HuffTableDC0 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable;
 800f9a0:	4b80      	ldr	r3, [pc, #512]	; (800fba4 <JPEG_Set_Huff_DHTMem+0x214>)
 800f9a2:	617b      	str	r3, [r7, #20]
  JPEG_DCHuffTableTypeDef *HuffTableDC1 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable;
 800f9a4:	4b80      	ldr	r3, [pc, #512]	; (800fba8 <JPEG_Set_Huff_DHTMem+0x218>)
 800f9a6:	613b      	str	r3, [r7, #16]
  uint32_t value, index;
  __IO uint32_t *address;

  /* DC0 Huffman Table : BITS*/
  /* DC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address to DHTMEM + 3*/
  address = (hjpeg->Instance->DHTMEM + 3);
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	681b      	ldr	r3, [r3, #0]
 800f9ac:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800f9b0:	330c      	adds	r3, #12
 800f9b2:	623b      	str	r3, [r7, #32]
  index = 16;
 800f9b4:	2310      	movs	r3, #16
 800f9b6:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800f9b8:	e01d      	b.n	800f9f6 <JPEG_Set_Huff_DHTMem+0x66>
  {

    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800f9ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9bc:	3b01      	subs	r3, #1
 800f9be:	697a      	ldr	r2, [r7, #20]
 800f9c0:	5cd3      	ldrb	r3, [r2, r3]
 800f9c2:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800f9c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9c6:	3b02      	subs	r3, #2
 800f9c8:	6979      	ldr	r1, [r7, #20]
 800f9ca:	5ccb      	ldrb	r3, [r1, r3]
 800f9cc:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800f9ce:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800f9d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9d2:	3b03      	subs	r3, #3
 800f9d4:	6979      	ldr	r1, [r7, #20]
 800f9d6:	5ccb      	ldrb	r3, [r1, r3]
 800f9d8:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800f9da:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->Bits[index - 4UL] & 0xFFUL);
 800f9dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f9de:	3a04      	subs	r2, #4
 800f9e0:	6979      	ldr	r1, [r7, #20]
 800f9e2:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800f9e4:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800f9e6:	6a3b      	ldr	r3, [r7, #32]
 800f9e8:	601a      	str	r2, [r3, #0]
    address--;
 800f9ea:	6a3b      	ldr	r3, [r7, #32]
 800f9ec:	3b04      	subs	r3, #4
 800f9ee:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800f9f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9f2:	3b04      	subs	r3, #4
 800f9f4:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800f9f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9f8:	2b03      	cmp	r3, #3
 800f9fa:	d8de      	bhi.n	800f9ba <JPEG_Set_Huff_DHTMem+0x2a>

  }
  /* DC0 Huffman Table : Val*/
  /* DC0 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +4 to DHTMEM + 6 */
  address = (hjpeg->Instance->DHTMEM + 6);
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	681b      	ldr	r3, [r3, #0]
 800fa00:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800fa04:	3318      	adds	r3, #24
 800fa06:	623b      	str	r3, [r7, #32]
  index = 12;
 800fa08:	230c      	movs	r3, #12
 800fa0a:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800fa0c:	e021      	b.n	800fa52 <JPEG_Set_Huff_DHTMem+0xc2>
  {
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800fa0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa10:	3b01      	subs	r3, #1
 800fa12:	697a      	ldr	r2, [r7, #20]
 800fa14:	4413      	add	r3, r2
 800fa16:	7c1b      	ldrb	r3, [r3, #16]
 800fa18:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800fa1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa1c:	3b02      	subs	r3, #2
 800fa1e:	6979      	ldr	r1, [r7, #20]
 800fa20:	440b      	add	r3, r1
 800fa22:	7c1b      	ldrb	r3, [r3, #16]
 800fa24:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800fa26:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800fa28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa2a:	3b03      	subs	r3, #3
 800fa2c:	6979      	ldr	r1, [r7, #20]
 800fa2e:	440b      	add	r3, r1
 800fa30:	7c1b      	ldrb	r3, [r3, #16]
 800fa32:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800fa34:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->HuffVal[index - 4UL] & 0xFFUL);
 800fa36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fa38:	3a04      	subs	r2, #4
 800fa3a:	6979      	ldr	r1, [r7, #20]
 800fa3c:	440a      	add	r2, r1
 800fa3e:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800fa40:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800fa42:	6a3b      	ldr	r3, [r7, #32]
 800fa44:	601a      	str	r2, [r3, #0]
    address--;
 800fa46:	6a3b      	ldr	r3, [r7, #32]
 800fa48:	3b04      	subs	r3, #4
 800fa4a:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800fa4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa4e:	3b04      	subs	r3, #4
 800fa50:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800fa52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa54:	2b03      	cmp	r3, #3
 800fa56:	d8da      	bhi.n	800fa0e <JPEG_Set_Huff_DHTMem+0x7e>
  }

  /* AC0 Huffman Table : BITS*/
  /* AC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 7 to DHTMEM + 10*/
  address = (hjpeg->Instance->DHTMEM + 10UL);
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	681b      	ldr	r3, [r3, #0]
 800fa5c:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800fa60:	3328      	adds	r3, #40	; 0x28
 800fa62:	623b      	str	r3, [r7, #32]
  index = 16;
 800fa64:	2310      	movs	r3, #16
 800fa66:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800fa68:	e01d      	b.n	800faa6 <JPEG_Set_Huff_DHTMem+0x116>
  {

    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800fa6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa6c:	3b01      	subs	r3, #1
 800fa6e:	69fa      	ldr	r2, [r7, #28]
 800fa70:	5cd3      	ldrb	r3, [r2, r3]
 800fa72:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800fa74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa76:	3b02      	subs	r3, #2
 800fa78:	69f9      	ldr	r1, [r7, #28]
 800fa7a:	5ccb      	ldrb	r3, [r1, r3]
 800fa7c:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800fa7e:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800fa80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa82:	3b03      	subs	r3, #3
 800fa84:	69f9      	ldr	r1, [r7, #28]
 800fa86:	5ccb      	ldrb	r3, [r1, r3]
 800fa88:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800fa8a:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->Bits[index - 4UL] & 0xFFUL);
 800fa8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fa8e:	3a04      	subs	r2, #4
 800fa90:	69f9      	ldr	r1, [r7, #28]
 800fa92:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800fa94:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800fa96:	6a3b      	ldr	r3, [r7, #32]
 800fa98:	601a      	str	r2, [r3, #0]
    address--;
 800fa9a:	6a3b      	ldr	r3, [r7, #32]
 800fa9c:	3b04      	subs	r3, #4
 800fa9e:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800faa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800faa2:	3b04      	subs	r3, #4
 800faa4:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800faa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800faa8:	2b03      	cmp	r3, #3
 800faaa:	d8de      	bhi.n	800fa6a <JPEG_Set_Huff_DHTMem+0xda>

  }
  /* AC0 Huffman Table : Val*/
  /* AC0 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 11 to DHTMEM + 51 */
  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 51) belong to AC0 VALS table */
  address = (hjpeg->Instance->DHTMEM + 51);
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	681b      	ldr	r3, [r3, #0]
 800fab0:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800fab4:	33cc      	adds	r3, #204	; 0xcc
 800fab6:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 800fab8:	6a3b      	ldr	r3, [r7, #32]
 800faba:	681a      	ldr	r2, [r3, #0]
 800fabc:	4b3b      	ldr	r3, [pc, #236]	; (800fbac <JPEG_Set_Huff_DHTMem+0x21c>)
 800fabe:	4013      	ands	r3, r2
 800fac0:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 800fac2:	69fb      	ldr	r3, [r7, #28]
 800fac4:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800fac8:	021a      	lsls	r2, r3, #8
 800faca:	68fb      	ldr	r3, [r7, #12]
 800facc:	4313      	orrs	r3, r2
 800face:	69fa      	ldr	r2, [r7, #28]
 800fad0:	f892 20b0 	ldrb.w	r2, [r2, #176]	; 0xb0
 800fad4:	4313      	orrs	r3, r2
 800fad6:	60fb      	str	r3, [r7, #12]
  *address = value;
 800fad8:	6a3b      	ldr	r3, [r7, #32]
 800fada:	68fa      	ldr	r2, [r7, #12]
 800fadc:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC0 huffman values */
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 800fade:	6a3b      	ldr	r3, [r7, #32]
 800fae0:	3b04      	subs	r3, #4
 800fae2:	623b      	str	r3, [r7, #32]
  index = 160;
 800fae4:	23a0      	movs	r3, #160	; 0xa0
 800fae6:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800fae8:	e021      	b.n	800fb2e <JPEG_Set_Huff_DHTMem+0x19e>
  {
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800faea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800faec:	3b01      	subs	r3, #1
 800faee:	69fa      	ldr	r2, [r7, #28]
 800faf0:	4413      	add	r3, r2
 800faf2:	7c1b      	ldrb	r3, [r3, #16]
 800faf4:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800faf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800faf8:	3b02      	subs	r3, #2
 800fafa:	69f9      	ldr	r1, [r7, #28]
 800fafc:	440b      	add	r3, r1
 800fafe:	7c1b      	ldrb	r3, [r3, #16]
 800fb00:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800fb02:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800fb04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb06:	3b03      	subs	r3, #3
 800fb08:	69f9      	ldr	r1, [r7, #28]
 800fb0a:	440b      	add	r3, r1
 800fb0c:	7c1b      	ldrb	r3, [r3, #16]
 800fb0e:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800fb10:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 800fb12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fb14:	3a04      	subs	r2, #4
 800fb16:	69f9      	ldr	r1, [r7, #28]
 800fb18:	440a      	add	r2, r1
 800fb1a:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800fb1c:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800fb1e:	6a3b      	ldr	r3, [r7, #32]
 800fb20:	601a      	str	r2, [r3, #0]
    address--;
 800fb22:	6a3b      	ldr	r3, [r7, #32]
 800fb24:	3b04      	subs	r3, #4
 800fb26:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800fb28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb2a:	3b04      	subs	r3, #4
 800fb2c:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800fb2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb30:	2b03      	cmp	r3, #3
 800fb32:	d8da      	bhi.n	800faea <JPEG_Set_Huff_DHTMem+0x15a>
  }

  /* DC1 Huffman Table : BITS*/
  /* DC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM + 51 base address to DHTMEM + 55*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 51) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 51);
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	681b      	ldr	r3, [r3, #0]
 800fb38:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800fb3c:	33cc      	adds	r3, #204	; 0xcc
 800fb3e:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 800fb40:	6a3b      	ldr	r3, [r7, #32]
 800fb42:	681b      	ldr	r3, [r3, #0]
 800fb44:	b29b      	uxth	r3, r3
 800fb46:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 800fb48:	693b      	ldr	r3, [r7, #16]
 800fb4a:	785b      	ldrb	r3, [r3, #1]
 800fb4c:	061a      	lsls	r2, r3, #24
 800fb4e:	68fb      	ldr	r3, [r7, #12]
 800fb50:	431a      	orrs	r2, r3
 800fb52:	693b      	ldr	r3, [r7, #16]
 800fb54:	781b      	ldrb	r3, [r3, #0]
 800fb56:	041b      	lsls	r3, r3, #16
 800fb58:	4313      	orrs	r3, r2
 800fb5a:	60fb      	str	r3, [r7, #12]
  *address = value;
 800fb5c:	6a3b      	ldr	r3, [r7, #32]
 800fb5e:	68fa      	ldr	r2, [r7, #12]
 800fb60:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 55) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 55);
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	681b      	ldr	r3, [r3, #0]
 800fb66:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800fb6a:	33dc      	adds	r3, #220	; 0xdc
 800fb6c:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 800fb6e:	6a3b      	ldr	r3, [r7, #32]
 800fb70:	681a      	ldr	r2, [r3, #0]
 800fb72:	4b0e      	ldr	r3, [pc, #56]	; (800fbac <JPEG_Set_Huff_DHTMem+0x21c>)
 800fb74:	4013      	ands	r3, r2
 800fb76:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->Bits[14] & 0xFFUL);
 800fb78:	693b      	ldr	r3, [r7, #16]
 800fb7a:	7bdb      	ldrb	r3, [r3, #15]
 800fb7c:	021a      	lsls	r2, r3, #8
 800fb7e:	68fb      	ldr	r3, [r7, #12]
 800fb80:	4313      	orrs	r3, r2
 800fb82:	693a      	ldr	r2, [r7, #16]
 800fb84:	7b92      	ldrb	r2, [r2, #14]
 800fb86:	4313      	orrs	r3, r2
 800fb88:	60fb      	str	r3, [r7, #12]
  *address = value;
 800fb8a:	6a3b      	ldr	r3, [r7, #32]
 800fb8c:	68fa      	ldr	r2, [r7, #12]
 800fb8e:	601a      	str	r2, [r3, #0]

  /*continue setting 12 DC1 huffman Bits from DHTMEM + 54 down to DHTMEM + 52*/
  address--;
 800fb90:	6a3b      	ldr	r3, [r7, #32]
 800fb92:	3b04      	subs	r3, #4
 800fb94:	623b      	str	r3, [r7, #32]
  index = 12;
 800fb96:	230c      	movs	r3, #12
 800fb98:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800fb9a:	e027      	b.n	800fbec <JPEG_Set_Huff_DHTMem+0x25c>
 800fb9c:	0802ccd0 	.word	0x0802ccd0
 800fba0:	0802cd84 	.word	0x0802cd84
 800fba4:	0802cc98 	.word	0x0802cc98
 800fba8:	0802ccb4 	.word	0x0802ccb4
 800fbac:	ffff0000 	.word	0xffff0000
  {

    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800fbb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbb2:	3301      	adds	r3, #1
 800fbb4:	693a      	ldr	r2, [r7, #16]
 800fbb6:	5cd3      	ldrb	r3, [r2, r3]
 800fbb8:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 800fbba:	6939      	ldr	r1, [r7, #16]
 800fbbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbbe:	440b      	add	r3, r1
 800fbc0:	781b      	ldrb	r3, [r3, #0]
 800fbc2:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800fbc4:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800fbc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbc8:	3b01      	subs	r3, #1
 800fbca:	6939      	ldr	r1, [r7, #16]
 800fbcc:	5ccb      	ldrb	r3, [r1, r3]
 800fbce:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 800fbd0:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->Bits[index - 2UL] & 0xFFUL);
 800fbd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fbd4:	3a02      	subs	r2, #2
 800fbd6:	6939      	ldr	r1, [r7, #16]
 800fbd8:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800fbda:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800fbdc:	6a3b      	ldr	r3, [r7, #32]
 800fbde:	601a      	str	r2, [r3, #0]
    address--;
 800fbe0:	6a3b      	ldr	r3, [r7, #32]
 800fbe2:	3b04      	subs	r3, #4
 800fbe4:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800fbe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbe8:	3b04      	subs	r3, #4
 800fbea:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800fbec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbee:	2b03      	cmp	r3, #3
 800fbf0:	d8de      	bhi.n	800fbb0 <JPEG_Set_Huff_DHTMem+0x220>

  }
  /* DC1 Huffman Table : Val*/
  /* DC1 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +55 to DHTMEM + 58 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 55) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 55);
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	681b      	ldr	r3, [r3, #0]
 800fbf6:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800fbfa:	33dc      	adds	r3, #220	; 0xdc
 800fbfc:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 800fbfe:	6a3b      	ldr	r3, [r7, #32]
 800fc00:	681b      	ldr	r3, [r3, #0]
 800fc02:	b29b      	uxth	r3, r3
 800fc04:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 800fc06:	693b      	ldr	r3, [r7, #16]
 800fc08:	7c5b      	ldrb	r3, [r3, #17]
 800fc0a:	061a      	lsls	r2, r3, #24
 800fc0c:	68fb      	ldr	r3, [r7, #12]
 800fc0e:	431a      	orrs	r2, r3
 800fc10:	693b      	ldr	r3, [r7, #16]
 800fc12:	7c1b      	ldrb	r3, [r3, #16]
 800fc14:	041b      	lsls	r3, r3, #16
 800fc16:	4313      	orrs	r3, r2
 800fc18:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 800fc1a:	6a3b      	ldr	r3, [r7, #32]
 800fc1c:	68fa      	ldr	r2, [r7, #12]
 800fc1e:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 58) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 58);
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	681b      	ldr	r3, [r3, #0]
 800fc24:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800fc28:	33e8      	adds	r3, #232	; 0xe8
 800fc2a:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000UL;
 800fc2c:	6a3b      	ldr	r3, [r7, #32]
 800fc2e:	681a      	ldr	r2, [r3, #0]
 800fc30:	4b6d      	ldr	r3, [pc, #436]	; (800fde8 <JPEG_Set_Huff_DHTMem+0x458>)
 800fc32:	4013      	ands	r3, r2
 800fc34:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 800fc36:	693b      	ldr	r3, [r7, #16]
 800fc38:	7edb      	ldrb	r3, [r3, #27]
 800fc3a:	021a      	lsls	r2, r3, #8
 800fc3c:	68fb      	ldr	r3, [r7, #12]
 800fc3e:	4313      	orrs	r3, r2
 800fc40:	693a      	ldr	r2, [r7, #16]
 800fc42:	7e92      	ldrb	r2, [r2, #26]
 800fc44:	4313      	orrs	r3, r2
 800fc46:	60fb      	str	r3, [r7, #12]
  *address = value;
 800fc48:	6a3b      	ldr	r3, [r7, #32]
 800fc4a:	68fa      	ldr	r2, [r7, #12]
 800fc4c:	601a      	str	r2, [r3, #0]

  /*continue setting 8 DC1 huffman val from DHTMEM + 57 down to DHTMEM + 56*/
  address--;
 800fc4e:	6a3b      	ldr	r3, [r7, #32]
 800fc50:	3b04      	subs	r3, #4
 800fc52:	623b      	str	r3, [r7, #32]
  index = 8;
 800fc54:	2308      	movs	r3, #8
 800fc56:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800fc58:	e021      	b.n	800fc9e <JPEG_Set_Huff_DHTMem+0x30e>
  {
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800fc5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc5c:	3301      	adds	r3, #1
 800fc5e:	693a      	ldr	r2, [r7, #16]
 800fc60:	4413      	add	r3, r2
 800fc62:	7c1b      	ldrb	r3, [r3, #16]
 800fc64:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 800fc66:	6939      	ldr	r1, [r7, #16]
 800fc68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc6a:	440b      	add	r3, r1
 800fc6c:	3310      	adds	r3, #16
 800fc6e:	781b      	ldrb	r3, [r3, #0]
 800fc70:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800fc72:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800fc74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc76:	3b01      	subs	r3, #1
 800fc78:	6939      	ldr	r1, [r7, #16]
 800fc7a:	440b      	add	r3, r1
 800fc7c:	7c1b      	ldrb	r3, [r3, #16]
 800fc7e:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 800fc80:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->HuffVal[index - 2UL] & 0xFFUL);
 800fc82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fc84:	3a02      	subs	r2, #2
 800fc86:	6939      	ldr	r1, [r7, #16]
 800fc88:	440a      	add	r2, r1
 800fc8a:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800fc8c:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800fc8e:	6a3b      	ldr	r3, [r7, #32]
 800fc90:	601a      	str	r2, [r3, #0]
    address--;
 800fc92:	6a3b      	ldr	r3, [r7, #32]
 800fc94:	3b04      	subs	r3, #4
 800fc96:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800fc98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc9a:	3b04      	subs	r3, #4
 800fc9c:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800fc9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fca0:	2b03      	cmp	r3, #3
 800fca2:	d8da      	bhi.n	800fc5a <JPEG_Set_Huff_DHTMem+0x2ca>
  }

  /* AC1 Huffman Table : BITS*/
  /* AC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 58 to DHTMEM + 62*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 58) belong to AC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 58);
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	681b      	ldr	r3, [r3, #0]
 800fca8:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800fcac:	33e8      	adds	r3, #232	; 0xe8
 800fcae:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 800fcb0:	6a3b      	ldr	r3, [r7, #32]
 800fcb2:	681b      	ldr	r3, [r3, #0]
 800fcb4:	b29b      	uxth	r3, r3
 800fcb6:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 800fcb8:	69bb      	ldr	r3, [r7, #24]
 800fcba:	785b      	ldrb	r3, [r3, #1]
 800fcbc:	061a      	lsls	r2, r3, #24
 800fcbe:	68fb      	ldr	r3, [r7, #12]
 800fcc0:	431a      	orrs	r2, r3
 800fcc2:	69bb      	ldr	r3, [r7, #24]
 800fcc4:	781b      	ldrb	r3, [r3, #0]
 800fcc6:	041b      	lsls	r3, r3, #16
 800fcc8:	4313      	orrs	r3, r2
 800fcca:	60fb      	str	r3, [r7, #12]
  *address = value;
 800fccc:	6a3b      	ldr	r3, [r7, #32]
 800fcce:	68fa      	ldr	r2, [r7, #12]
 800fcd0:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 62) belong to Bits Val table */
  address = (hjpeg->Instance->DHTMEM + 62);
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	681b      	ldr	r3, [r3, #0]
 800fcd6:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800fcda:	33f8      	adds	r3, #248	; 0xf8
 800fcdc:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 800fcde:	6a3b      	ldr	r3, [r7, #32]
 800fce0:	681a      	ldr	r2, [r3, #0]
 800fce2:	4b41      	ldr	r3, [pc, #260]	; (800fde8 <JPEG_Set_Huff_DHTMem+0x458>)
 800fce4:	4013      	ands	r3, r2
 800fce6:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 800fce8:	69bb      	ldr	r3, [r7, #24]
 800fcea:	7bdb      	ldrb	r3, [r3, #15]
 800fcec:	021a      	lsls	r2, r3, #8
 800fcee:	68fb      	ldr	r3, [r7, #12]
 800fcf0:	4313      	orrs	r3, r2
 800fcf2:	69ba      	ldr	r2, [r7, #24]
 800fcf4:	7b92      	ldrb	r2, [r2, #14]
 800fcf6:	4313      	orrs	r3, r2
 800fcf8:	60fb      	str	r3, [r7, #12]
  *address = value;
 800fcfa:	6a3b      	ldr	r3, [r7, #32]
 800fcfc:	68fa      	ldr	r2, [r7, #12]
 800fcfe:	601a      	str	r2, [r3, #0]

  /*continue setting 12 AC1 huffman Bits from DHTMEM + 61 down to DHTMEM + 59*/
  address--;
 800fd00:	6a3b      	ldr	r3, [r7, #32]
 800fd02:	3b04      	subs	r3, #4
 800fd04:	623b      	str	r3, [r7, #32]
  index = 12;
 800fd06:	230c      	movs	r3, #12
 800fd08:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800fd0a:	e01d      	b.n	800fd48 <JPEG_Set_Huff_DHTMem+0x3b8>
  {

    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800fd0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd0e:	3301      	adds	r3, #1
 800fd10:	69ba      	ldr	r2, [r7, #24]
 800fd12:	5cd3      	ldrb	r3, [r2, r3]
 800fd14:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 800fd16:	69b9      	ldr	r1, [r7, #24]
 800fd18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd1a:	440b      	add	r3, r1
 800fd1c:	781b      	ldrb	r3, [r3, #0]
 800fd1e:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800fd20:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800fd22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd24:	3b01      	subs	r3, #1
 800fd26:	69b9      	ldr	r1, [r7, #24]
 800fd28:	5ccb      	ldrb	r3, [r1, r3]
 800fd2a:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 800fd2c:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->Bits[index - 2UL] & 0xFFUL);
 800fd2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fd30:	3a02      	subs	r2, #2
 800fd32:	69b9      	ldr	r1, [r7, #24]
 800fd34:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800fd36:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800fd38:	6a3b      	ldr	r3, [r7, #32]
 800fd3a:	601a      	str	r2, [r3, #0]
    address--;
 800fd3c:	6a3b      	ldr	r3, [r7, #32]
 800fd3e:	3b04      	subs	r3, #4
 800fd40:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800fd42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd44:	3b04      	subs	r3, #4
 800fd46:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800fd48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd4a:	2b03      	cmp	r3, #3
 800fd4c:	d8de      	bhi.n	800fd0c <JPEG_Set_Huff_DHTMem+0x37c>

  }
  /* AC1 Huffman Table : Val*/
  /* AC1 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 62 to DHTMEM + 102 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 62) belong to AC1 VALS table */
  address = (hjpeg->Instance->DHTMEM + 62);
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	681b      	ldr	r3, [r3, #0]
 800fd52:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800fd56:	33f8      	adds	r3, #248	; 0xf8
 800fd58:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 800fd5a:	6a3b      	ldr	r3, [r7, #32]
 800fd5c:	681b      	ldr	r3, [r3, #0]
 800fd5e:	b29b      	uxth	r3, r3
 800fd60:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 800fd62:	69bb      	ldr	r3, [r7, #24]
 800fd64:	7c5b      	ldrb	r3, [r3, #17]
 800fd66:	061a      	lsls	r2, r3, #24
 800fd68:	68fb      	ldr	r3, [r7, #12]
 800fd6a:	431a      	orrs	r2, r3
 800fd6c:	69bb      	ldr	r3, [r7, #24]
 800fd6e:	7c1b      	ldrb	r3, [r3, #16]
 800fd70:	041b      	lsls	r3, r3, #16
 800fd72:	4313      	orrs	r3, r2
 800fd74:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 800fd76:	6a3b      	ldr	r3, [r7, #32]
 800fd78:	68fa      	ldr	r2, [r7, #12]
 800fd7a:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC1 huffman values from DHTMEM + 63 to DHTMEM+102 */
  address = (hjpeg->Instance->DHTMEM + 102);
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	681b      	ldr	r3, [r3, #0]
 800fd80:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800fd84:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 800fd88:	623b      	str	r3, [r7, #32]
  index = 160;
 800fd8a:	23a0      	movs	r3, #160	; 0xa0
 800fd8c:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800fd8e:	e021      	b.n	800fdd4 <JPEG_Set_Huff_DHTMem+0x444>
  {
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800fd90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd92:	3301      	adds	r3, #1
 800fd94:	69ba      	ldr	r2, [r7, #24]
 800fd96:	4413      	add	r3, r2
 800fd98:	7c1b      	ldrb	r3, [r3, #16]
 800fd9a:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 800fd9c:	69b9      	ldr	r1, [r7, #24]
 800fd9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fda0:	440b      	add	r3, r1
 800fda2:	3310      	adds	r3, #16
 800fda4:	781b      	ldrb	r3, [r3, #0]
 800fda6:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800fda8:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800fdaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdac:	3b01      	subs	r3, #1
 800fdae:	69b9      	ldr	r1, [r7, #24]
 800fdb0:	440b      	add	r3, r1
 800fdb2:	7c1b      	ldrb	r3, [r3, #16]
 800fdb4:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 800fdb6:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 800fdb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fdba:	3a02      	subs	r2, #2
 800fdbc:	69b9      	ldr	r1, [r7, #24]
 800fdbe:	440a      	add	r2, r1
 800fdc0:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800fdc2:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800fdc4:	6a3b      	ldr	r3, [r7, #32]
 800fdc6:	601a      	str	r2, [r3, #0]
    address--;
 800fdc8:	6a3b      	ldr	r3, [r7, #32]
 800fdca:	3b04      	subs	r3, #4
 800fdcc:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800fdce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdd0:	3b04      	subs	r3, #4
 800fdd2:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800fdd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdd6:	2b03      	cmp	r3, #3
 800fdd8:	d8da      	bhi.n	800fd90 <JPEG_Set_Huff_DHTMem+0x400>
  }

}
 800fdda:	bf00      	nop
 800fddc:	bf00      	nop
 800fdde:	372c      	adds	r7, #44	; 0x2c
 800fde0:	46bd      	mov	sp, r7
 800fde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fde6:	4770      	bx	lr
 800fde8:	ffff0000 	.word	0xffff0000

0800fdec <JPEG_Init_Process>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Init_Process(JPEG_HandleTypeDef *hjpeg)
{
 800fdec:	b480      	push	{r7}
 800fdee:	b083      	sub	sp, #12
 800fdf0:	af00      	add	r7, sp, #0
 800fdf2:	6078      	str	r0, [r7, #4]
  /*Reset pause*/
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fdf8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	655a      	str	r2, [r3, #84]	; 0x54

  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fe04:	f003 0303 	and.w	r3, r3, #3
 800fe08:	2b02      	cmp	r3, #2
 800fe0a:	d108      	bne.n	800fe1e <JPEG_Init_Process+0x32>
  {
    /*Set JPEG Codec to Decoding mode */
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	681b      	ldr	r3, [r3, #0]
 800fe10:	685a      	ldr	r2, [r3, #4]
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	681b      	ldr	r3, [r3, #0]
 800fe16:	f042 0208 	orr.w	r2, r2, #8
 800fe1a:	605a      	str	r2, [r3, #4]
 800fe1c:	e007      	b.n	800fe2e <JPEG_Init_Process+0x42>
  }
  else /* JPEG_CONTEXT_ENCODE */
  {
    /*Set JPEG Codec to Encoding mode */
    hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_DE;
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	681b      	ldr	r3, [r3, #0]
 800fe22:	685a      	ldr	r2, [r3, #4]
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	681b      	ldr	r3, [r3, #0]
 800fe28:	f022 0208 	bic.w	r2, r2, #8
 800fe2c:	605a      	str	r2, [r3, #4]
  }

  /*Stop JPEG processing */
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	681b      	ldr	r3, [r3, #0]
 800fe32:	681a      	ldr	r2, [r3, #0]
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	681b      	ldr	r3, [r3, #0]
 800fe38:	f022 0201 	bic.w	r2, r2, #1
 800fe3c:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	681b      	ldr	r3, [r3, #0]
 800fe42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	681b      	ldr	r3, [r3, #0]
 800fe48:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 800fe4c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	681b      	ldr	r3, [r3, #0]
 800fe52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	681b      	ldr	r3, [r3, #0]
 800fe58:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800fe5c:	631a      	str	r2, [r3, #48]	; 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	681b      	ldr	r3, [r3, #0]
 800fe62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	681b      	ldr	r3, [r3, #0]
 800fe68:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800fe6c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	681b      	ldr	r3, [r3, #0]
 800fe72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	681b      	ldr	r3, [r3, #0]
 800fe78:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800fe7c:	639a      	str	r2, [r3, #56]	; 0x38

  /*Start Encoding/Decoding*/
  hjpeg->Instance->CONFR0 |=  JPEG_CONFR0_START;
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	681b      	ldr	r3, [r3, #0]
 800fe82:	681a      	ldr	r2, [r3, #0]
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	681b      	ldr	r3, [r3, #0]
 800fe88:	f042 0201 	orr.w	r2, r2, #1
 800fe8c:	601a      	str	r2, [r3, #0]

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fe92:	f003 030c 	and.w	r3, r3, #12
 800fe96:	2b08      	cmp	r3, #8
 800fe98:	d108      	bne.n	800feac <JPEG_Init_Process+0xc0>
  {
    /*Enable IN/OUT, end of Conversation, and end of header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	681b      	ldr	r3, [r3, #0]
 800fe9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	681b      	ldr	r3, [r3, #0]
 800fea4:	f042 026e 	orr.w	r2, r2, #110	; 0x6e
 800fea8:	631a      	str	r2, [r3, #48]	; 0x30
  }
  else
  {
    /* Nothing to do */
  }
}
 800feaa:	e00d      	b.n	800fec8 <JPEG_Init_Process+0xdc>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800feb0:	f003 030c 	and.w	r3, r3, #12
 800feb4:	2b0c      	cmp	r3, #12
 800feb6:	d107      	bne.n	800fec8 <JPEG_Init_Process+0xdc>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	681b      	ldr	r3, [r3, #0]
 800febc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	681b      	ldr	r3, [r3, #0]
 800fec2:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800fec6:	631a      	str	r2, [r3, #48]	; 0x30
}
 800fec8:	bf00      	nop
 800feca:	370c      	adds	r7, #12
 800fecc:	46bd      	mov	sp, r7
 800fece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fed2:	4770      	bx	lr

0800fed4 <JPEG_Process>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if the process has ends else JPEG_PROCESS_ONGOING
  */
static uint32_t JPEG_Process(JPEG_HandleTypeDef *hjpeg)
{
 800fed4:	b580      	push	{r7, lr}
 800fed6:	b084      	sub	sp, #16
 800fed8:	af00      	add	r7, sp, #0
 800feda:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;

  /*End of header processing flag */
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fee0:	f003 0303 	and.w	r3, r3, #3
 800fee4:	2b02      	cmp	r3, #2
 800fee6:	d125      	bne.n	800ff34 <JPEG_Process+0x60>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	681b      	ldr	r3, [r3, #0]
 800feec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800feee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	d01e      	beq.n	800ff34 <JPEG_Process+0x60>
    {
      /*Call Header parsing complete callback */
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	3304      	adds	r3, #4
 800fefa:	4619      	mov	r1, r3
 800fefc:	6878      	ldr	r0, [r7, #4]
 800fefe:	f7fe ff55 	bl	800edac <HAL_JPEG_GetInfo>
      /* Reset the ImageQuality */
      hjpeg->Conf.ImageQuality = 0;
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	2200      	movs	r2, #0
 800ff06:	615a      	str	r2, [r3, #20]

      /*Call Info Ready callback */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->InfoReadyCallback(hjpeg, &hjpeg->Conf);
#else
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	3304      	adds	r3, #4
 800ff0c:	4619      	mov	r1, r3
 800ff0e:	6878      	ldr	r0, [r7, #4]
 800ff10:	f7f3 fa1a 	bl	8003348 <HAL_JPEG_InfoReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	681b      	ldr	r3, [r3, #0]
 800ff18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	681b      	ldr	r3, [r3, #0]
 800ff1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ff22:	631a      	str	r2, [r3, #48]	; 0x30

      /* Clear header processing done flag */
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	681b      	ldr	r3, [r3, #0]
 800ff28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	681b      	ldr	r3, [r3, #0]
 800ff2e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ff32:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  /*Input FIFO status handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ff38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	d116      	bne.n	800ff6e <JPEG_Process+0x9a>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	681b      	ldr	r3, [r3, #0]
 800ff44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ff46:	f003 0302 	and.w	r3, r3, #2
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	d004      	beq.n	800ff58 <JPEG_Process+0x84>
    {
      /*Input FIFO threshold flag */
      /*JPEG_FIFO_TH_SIZE words can be written in */
      JPEG_ReadInputData(hjpeg, JPEG_FIFO_TH_SIZE);
 800ff4e:	2108      	movs	r1, #8
 800ff50:	6878      	ldr	r0, [r7, #4]
 800ff52:	f000 f988 	bl	8010266 <JPEG_ReadInputData>
 800ff56:	e00a      	b.n	800ff6e <JPEG_Process+0x9a>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	681b      	ldr	r3, [r3, #0]
 800ff5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ff5e:	f003 0304 	and.w	r3, r3, #4
 800ff62:	2b00      	cmp	r3, #0
 800ff64:	d003      	beq.n	800ff6e <JPEG_Process+0x9a>
    {
      /*Input FIFO Not Full flag */
      /*32-bit value can be written in */
      JPEG_ReadInputData(hjpeg, 1);
 800ff66:	2101      	movs	r1, #1
 800ff68:	6878      	ldr	r0, [r7, #4]
 800ff6a:	f000 f97c 	bl	8010266 <JPEG_ReadInputData>
    }
  }


  /*Output FIFO flag handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ff72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	d116      	bne.n	800ffa8 <JPEG_Process+0xd4>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	681b      	ldr	r3, [r3, #0]
 800ff7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ff80:	f003 0308 	and.w	r3, r3, #8
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	d004      	beq.n	800ff92 <JPEG_Process+0xbe>
    {
      /*Output FIFO threshold flag */
      /*JPEG_FIFO_TH_SIZE words can be read out */
      JPEG_StoreOutputData(hjpeg, JPEG_FIFO_TH_SIZE);
 800ff88:	2108      	movs	r1, #8
 800ff8a:	6878      	ldr	r0, [r7, #4]
 800ff8c:	f000 f864 	bl	8010058 <JPEG_StoreOutputData>
 800ff90:	e00a      	b.n	800ffa8 <JPEG_Process+0xd4>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	681b      	ldr	r3, [r3, #0]
 800ff96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ff98:	f003 0310 	and.w	r3, r3, #16
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d003      	beq.n	800ffa8 <JPEG_Process+0xd4>
    {
      /*Output FIFO Not Empty flag */
      /*32-bit value can be read out */
      JPEG_StoreOutputData(hjpeg, 1);
 800ffa0:	2101      	movs	r1, #1
 800ffa2:	6878      	ldr	r0, [r7, #4]
 800ffa4:	f000 f858 	bl	8010058 <JPEG_StoreOutputData>
      /* Nothing to do */
    }
  }

  /*End of Conversion handling :i.e EOC flag is high and OFTF low and OFNEF low*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	681b      	ldr	r3, [r3, #0]
 800ffac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ffae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ffb2:	2b20      	cmp	r3, #32
 800ffb4:	d14b      	bne.n	801004e <JPEG_Process+0x17a>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	681b      	ldr	r3, [r3, #0]
 800ffba:	681a      	ldr	r2, [r3, #0]
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	681b      	ldr	r3, [r3, #0]
 800ffc0:	f022 0201 	bic.w	r2, r2, #1
 800ffc4:	601a      	str	r2, [r3, #0]

    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ffca:	f003 030c 	and.w	r3, r3, #12
 800ffce:	2b08      	cmp	r3, #8
 800ffd0:	d107      	bne.n	800ffe2 <JPEG_Process+0x10e>
    {
      /* Disable All Interrupts */
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	681b      	ldr	r3, [r3, #0]
 800ffd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	681b      	ldr	r3, [r3, #0]
 800ffdc:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 800ffe0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Clear all flags */
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	681b      	ldr	r3, [r3, #0]
 800ffe6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	681b      	ldr	r3, [r3, #0]
 800ffec:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800fff0:	639a      	str	r2, [r3, #56]	; 0x38

    /*Call End of conversion callback */
    if (hjpeg->JpegOutCount > 0UL)
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	d00a      	beq.n	8010010 <JPEG_Process+0x13c>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	69d9      	ldr	r1, [r3, #28]
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010002:	461a      	mov	r2, r3
 8010004:	6878      	ldr	r0, [r7, #4]
 8010006:	f7f3 fa6f 	bl	80034e8 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	2200      	movs	r2, #0
 801000e:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /*Reset Context Operation*/
    tmpContext = hjpeg->Context;
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010014:	60fb      	str	r3, [r7, #12]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801001a:	f403 4282 	and.w	r2, r3, #16640	; 0x4100
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	2200      	movs	r2, #0
 8010026:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	2201      	movs	r2, #1
 801002e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8010032:	68fb      	ldr	r3, [r7, #12]
 8010034:	f003 0303 	and.w	r3, r3, #3
 8010038:	2b02      	cmp	r3, #2
 801003a:	d103      	bne.n	8010044 <JPEG_Process+0x170>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 801003c:	6878      	ldr	r0, [r7, #4]
 801003e:	f7f3 fabb 	bl	80035b8 <HAL_JPEG_DecodeCpltCallback>
 8010042:	e002      	b.n	801004a <JPEG_Process+0x176>
    else /* JPEG_CONTEXT_ENCODE */
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->EncodeCpltCallback(hjpeg);
#else
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8010044:	6878      	ldr	r0, [r7, #4]
 8010046:	f7ff f910 	bl	800f26a <HAL_JPEG_EncodeCpltCallback>
#endif
    }

    return JPEG_PROCESS_DONE;
 801004a:	2301      	movs	r3, #1
 801004c:	e000      	b.n	8010050 <JPEG_Process+0x17c>
  }


  return JPEG_PROCESS_ONGOING;
 801004e:	2300      	movs	r3, #0
}
 8010050:	4618      	mov	r0, r3
 8010052:	3710      	adds	r7, #16
 8010054:	46bd      	mov	sp, r7
 8010056:	bd80      	pop	{r7, pc}

08010058 <JPEG_StoreOutputData>:
  *         the configuration information for JPEG module
  * @param  nbOutputWords Number of output words (of 32 bits) ready from the JPEG peripheral
  * @retval None
  */
static void JPEG_StoreOutputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbOutputWords)
{
 8010058:	b580      	push	{r7, lr}
 801005a:	b086      	sub	sp, #24
 801005c:	af00      	add	r7, sp, #0
 801005e:	6078      	str	r0, [r7, #4]
 8010060:	6039      	str	r1, [r7, #0]
  uint32_t index;
  uint32_t nb_words;
  uint32_t nb_bytes;
  uint32_t dataword;

  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	6a59      	ldr	r1, [r3, #36]	; 0x24
 801006a:	683b      	ldr	r3, [r7, #0]
 801006c:	009b      	lsls	r3, r3, #2
 801006e:	440b      	add	r3, r1
 8010070:	429a      	cmp	r2, r3
 8010072:	d34b      	bcc.n	801010c <JPEG_StoreOutputData+0xb4>
  {
    for (index = 0; index < nbOutputWords; index++)
 8010074:	2300      	movs	r3, #0
 8010076:	617b      	str	r3, [r7, #20]
 8010078:	e031      	b.n	80100de <JPEG_StoreOutputData+0x86>
    {
      /*Transfer 32 bits from the JPEG output FIFO*/
      dataword = hjpeg->Instance->DOR;
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	681b      	ldr	r3, [r3, #0]
 801007e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010080:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	69da      	ldr	r2, [r3, #28]
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801008a:	4413      	add	r3, r2
 801008c:	68ba      	ldr	r2, [r7, #8]
 801008e:	b2d2      	uxtb	r2, r2
 8010090:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 8010092:	68bb      	ldr	r3, [r7, #8]
 8010094:	0a19      	lsrs	r1, r3, #8
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	69da      	ldr	r2, [r3, #28]
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801009e:	3301      	adds	r3, #1
 80100a0:	4413      	add	r3, r2
 80100a2:	b2ca      	uxtb	r2, r1
 80100a4:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 80100a6:	68bb      	ldr	r3, [r7, #8]
 80100a8:	0c19      	lsrs	r1, r3, #16
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	69da      	ldr	r2, [r3, #28]
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100b2:	3302      	adds	r3, #2
 80100b4:	4413      	add	r3, r2
 80100b6:	b2ca      	uxtb	r2, r1
 80100b8:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 80100ba:	68bb      	ldr	r3, [r7, #8]
 80100bc:	0e19      	lsrs	r1, r3, #24
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	69da      	ldr	r2, [r3, #28]
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100c6:	3303      	adds	r3, #3
 80100c8:	4413      	add	r3, r2
 80100ca:	b2ca      	uxtb	r2, r1
 80100cc:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100d2:	1d1a      	adds	r2, r3, #4
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	625a      	str	r2, [r3, #36]	; 0x24
    for (index = 0; index < nbOutputWords; index++)
 80100d8:	697b      	ldr	r3, [r7, #20]
 80100da:	3301      	adds	r3, #1
 80100dc:	617b      	str	r3, [r7, #20]
 80100de:	697a      	ldr	r2, [r7, #20]
 80100e0:	683b      	ldr	r3, [r7, #0]
 80100e2:	429a      	cmp	r2, r3
 80100e4:	d3c9      	bcc.n	801007a <JPEG_StoreOutputData+0x22>
    }
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100ee:	429a      	cmp	r2, r3
 80100f0:	f040 80b5 	bne.w	801025e <JPEG_StoreOutputData+0x206>
    {
      /*Output Buffer is full, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	69d9      	ldr	r1, [r3, #28]
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100fc:	461a      	mov	r2, r3
 80100fe:	6878      	ldr	r0, [r7, #4]
 8010100:	f7f3 f9f2 	bl	80034e8 <HAL_JPEG_DataReadyCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/
      hjpeg->JpegOutCount = 0;
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	2200      	movs	r2, #0
 8010108:	625a      	str	r2, [r3, #36]	; 0x24
  }
  else
  {
    /* Nothing to do */
  }
}
 801010a:	e0a8      	b.n	801025e <JPEG_StoreOutputData+0x206>
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010114:	429a      	cmp	r2, r3
 8010116:	f240 80a2 	bls.w	801025e <JPEG_StoreOutputData+0x206>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010122:	1ad3      	subs	r3, r2, r3
 8010124:	089b      	lsrs	r3, r3, #2
 8010126:	613b      	str	r3, [r7, #16]
    for (index = 0; index < nb_words; index++)
 8010128:	2300      	movs	r3, #0
 801012a:	617b      	str	r3, [r7, #20]
 801012c:	e031      	b.n	8010192 <JPEG_StoreOutputData+0x13a>
      dataword = hjpeg->Instance->DOR;
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	681b      	ldr	r3, [r3, #0]
 8010132:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010134:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	69da      	ldr	r2, [r3, #28]
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801013e:	4413      	add	r3, r2
 8010140:	68ba      	ldr	r2, [r7, #8]
 8010142:	b2d2      	uxtb	r2, r2
 8010144:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 8010146:	68bb      	ldr	r3, [r7, #8]
 8010148:	0a19      	lsrs	r1, r3, #8
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	69da      	ldr	r2, [r3, #28]
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010152:	3301      	adds	r3, #1
 8010154:	4413      	add	r3, r2
 8010156:	b2ca      	uxtb	r2, r1
 8010158:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 801015a:	68bb      	ldr	r3, [r7, #8]
 801015c:	0c19      	lsrs	r1, r3, #16
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	69da      	ldr	r2, [r3, #28]
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010166:	3302      	adds	r3, #2
 8010168:	4413      	add	r3, r2
 801016a:	b2ca      	uxtb	r2, r1
 801016c:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 801016e:	68bb      	ldr	r3, [r7, #8]
 8010170:	0e19      	lsrs	r1, r3, #24
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	69da      	ldr	r2, [r3, #28]
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801017a:	3303      	adds	r3, #3
 801017c:	4413      	add	r3, r2
 801017e:	b2ca      	uxtb	r2, r1
 8010180:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010186:	1d1a      	adds	r2, r3, #4
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	625a      	str	r2, [r3, #36]	; 0x24
    for (index = 0; index < nb_words; index++)
 801018c:	697b      	ldr	r3, [r7, #20]
 801018e:	3301      	adds	r3, #1
 8010190:	617b      	str	r3, [r7, #20]
 8010192:	697a      	ldr	r2, [r7, #20]
 8010194:	693b      	ldr	r3, [r7, #16]
 8010196:	429a      	cmp	r2, r3
 8010198:	d3c9      	bcc.n	801012e <JPEG_StoreOutputData+0xd6>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101a2:	429a      	cmp	r2, r3
 80101a4:	d10b      	bne.n	80101be <JPEG_StoreOutputData+0x166>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	69d9      	ldr	r1, [r3, #28]
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101ae:	461a      	mov	r2, r3
 80101b0:	6878      	ldr	r0, [r7, #4]
 80101b2:	f7f3 f999 	bl	80034e8 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	2200      	movs	r2, #0
 80101ba:	625a      	str	r2, [r3, #36]	; 0x24
}
 80101bc:	e04f      	b.n	801025e <JPEG_StoreOutputData+0x206>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101c6:	1ad3      	subs	r3, r2, r3
 80101c8:	60fb      	str	r3, [r7, #12]
      dataword = hjpeg->Instance->DOR;
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	681b      	ldr	r3, [r3, #0]
 80101ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80101d0:	60bb      	str	r3, [r7, #8]
      for (index = 0; index < nb_bytes; index++)
 80101d2:	2300      	movs	r3, #0
 80101d4:	617b      	str	r3, [r7, #20]
 80101d6:	e015      	b.n	8010204 <JPEG_StoreOutputData+0x1ac>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 80101d8:	697b      	ldr	r3, [r7, #20]
 80101da:	f003 0303 	and.w	r3, r3, #3
 80101de:	00db      	lsls	r3, r3, #3
 80101e0:	68ba      	ldr	r2, [r7, #8]
 80101e2:	fa22 f103 	lsr.w	r1, r2, r3
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	69da      	ldr	r2, [r3, #28]
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101ee:	4413      	add	r3, r2
 80101f0:	b2ca      	uxtb	r2, r1
 80101f2:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101f8:	1c5a      	adds	r2, r3, #1
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	625a      	str	r2, [r3, #36]	; 0x24
      for (index = 0; index < nb_bytes; index++)
 80101fe:	697b      	ldr	r3, [r7, #20]
 8010200:	3301      	adds	r3, #1
 8010202:	617b      	str	r3, [r7, #20]
 8010204:	697a      	ldr	r2, [r7, #20]
 8010206:	68fb      	ldr	r3, [r7, #12]
 8010208:	429a      	cmp	r2, r3
 801020a:	d3e5      	bcc.n	80101d8 <JPEG_StoreOutputData+0x180>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	69d9      	ldr	r1, [r3, #28]
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010214:	461a      	mov	r2, r3
 8010216:	6878      	ldr	r0, [r7, #4]
 8010218:	f7f3 f966 	bl	80034e8 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	2200      	movs	r2, #0
 8010220:	625a      	str	r2, [r3, #36]	; 0x24
      nb_bytes = 4UL - nb_bytes;
 8010222:	68fb      	ldr	r3, [r7, #12]
 8010224:	f1c3 0304 	rsb	r3, r3, #4
 8010228:	60fb      	str	r3, [r7, #12]
      for (index = nb_bytes; index < 4UL; index++)
 801022a:	68fb      	ldr	r3, [r7, #12]
 801022c:	617b      	str	r3, [r7, #20]
 801022e:	e013      	b.n	8010258 <JPEG_StoreOutputData+0x200>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 8010230:	697b      	ldr	r3, [r7, #20]
 8010232:	00db      	lsls	r3, r3, #3
 8010234:	68ba      	ldr	r2, [r7, #8]
 8010236:	fa22 f103 	lsr.w	r1, r2, r3
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	69da      	ldr	r2, [r3, #28]
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010242:	4413      	add	r3, r2
 8010244:	b2ca      	uxtb	r2, r1
 8010246:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801024c:	1c5a      	adds	r2, r3, #1
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	625a      	str	r2, [r3, #36]	; 0x24
      for (index = nb_bytes; index < 4UL; index++)
 8010252:	697b      	ldr	r3, [r7, #20]
 8010254:	3301      	adds	r3, #1
 8010256:	617b      	str	r3, [r7, #20]
 8010258:	697b      	ldr	r3, [r7, #20]
 801025a:	2b03      	cmp	r3, #3
 801025c:	d9e8      	bls.n	8010230 <JPEG_StoreOutputData+0x1d8>
}
 801025e:	bf00      	nop
 8010260:	3718      	adds	r7, #24
 8010262:	46bd      	mov	sp, r7
 8010264:	bd80      	pop	{r7, pc}

08010266 <JPEG_ReadInputData>:
  *         the configuration information for JPEG module
  * @param  nbRequestWords Number of input words (of 32 bits) that the JPE peripheral request
  * @retval None
  */
static void JPEG_ReadInputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbRequestWords)
{
 8010266:	b580      	push	{r7, lr}
 8010268:	b088      	sub	sp, #32
 801026a:	af00      	add	r7, sp, #0
 801026c:	6078      	str	r0, [r7, #4]
 801026e:	6039      	str	r1, [r7, #0]
  uint32_t nb_bytes = 0;
 8010270:	2300      	movs	r3, #0
 8010272:	61fb      	str	r3, [r7, #28]
  uint32_t nb_words;
  uint32_t index;
  uint32_t dataword;
  uint32_t input_count;

  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010278:	2b00      	cmp	r3, #0
 801027a:	d002      	beq.n	8010282 <JPEG_ReadInputData+0x1c>
 801027c:	683b      	ldr	r3, [r7, #0]
 801027e:	2b00      	cmp	r3, #0
 8010280:	d104      	bne.n	801028c <JPEG_ReadInputData+0x26>
  {
    /* No more Input data : nothing to do*/
    (void) HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_INPUT);
 8010282:	2101      	movs	r1, #1
 8010284:	6878      	ldr	r0, [r7, #4]
 8010286:	f7fe fe89 	bl	800ef9c <HAL_JPEG_Pause>
 801028a:	e028      	b.n	80102de <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	6a1b      	ldr	r3, [r3, #32]
 8010294:	429a      	cmp	r2, r3
 8010296:	d906      	bls.n	80102a6 <JPEG_ReadInputData+0x40>
  {
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	6a1b      	ldr	r3, [r3, #32]
 80102a0:	1ad3      	subs	r3, r2, r3
 80102a2:	61fb      	str	r3, [r7, #28]
 80102a4:	e01b      	b.n	80102de <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	6a1b      	ldr	r3, [r3, #32]
 80102ae:	429a      	cmp	r2, r3
 80102b0:	d115      	bne.n	80102de <JPEG_ReadInputData+0x78>
  {
    /*Call HAL_JPEG_GetDataCallback to get new data */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->GetDataCallback(hjpeg, hjpeg->JpegInCount);
#else
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	6a1b      	ldr	r3, [r3, #32]
 80102b6:	4619      	mov	r1, r3
 80102b8:	6878      	ldr	r0, [r7, #4]
 80102ba:	f7f3 f8e1 	bl	8003480 <HAL_JPEG_GetDataCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/

    if (hjpeg->InDataLength > 4UL)
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80102c2:	2b04      	cmp	r3, #4
 80102c4:	d905      	bls.n	80102d2 <JPEG_ReadInputData+0x6c>
    {
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80102ca:	f023 0203 	bic.w	r2, r3, #3
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	629a      	str	r2, [r3, #40]	; 0x28
    }
    hjpeg->JpegInCount = 0;
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	2200      	movs	r2, #0
 80102d6:	621a      	str	r2, [r3, #32]
    nb_bytes = hjpeg->InDataLength;
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80102dc:	61fb      	str	r3, [r7, #28]
  }
  else
  {
    /* Nothing to do */
  }
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80102e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	f040 809f 	bne.w	801042a <JPEG_ReadInputData+0x1c4>
 80102ec:	69fb      	ldr	r3, [r7, #28]
 80102ee:	2b00      	cmp	r3, #0
 80102f0:	f000 809b 	beq.w	801042a <JPEG_ReadInputData+0x1c4>
  {
    nb_words = nb_bytes / 4UL;
 80102f4:	69fb      	ldr	r3, [r7, #28]
 80102f6:	089b      	lsrs	r3, r3, #2
 80102f8:	613b      	str	r3, [r7, #16]
    if (nb_words >= nbRequestWords)
 80102fa:	693a      	ldr	r2, [r7, #16]
 80102fc:	683b      	ldr	r3, [r7, #0]
 80102fe:	429a      	cmp	r2, r3
 8010300:	d335      	bcc.n	801036e <JPEG_ReadInputData+0x108>
    {
      for (index = 0; index < nbRequestWords; index++)
 8010302:	2300      	movs	r3, #0
 8010304:	61bb      	str	r3, [r7, #24]
 8010306:	e02d      	b.n	8010364 <JPEG_ReadInputData+0xfe>
      {
        input_count = hjpeg->JpegInCount;
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	6a1b      	ldr	r3, [r3, #32]
 801030c:	60fb      	str	r3, [r7, #12]
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	699a      	ldr	r2, [r3, #24]
 8010312:	68fb      	ldr	r3, [r7, #12]
 8010314:	4413      	add	r3, r2
 8010316:	781b      	ldrb	r3, [r3, #0]
 8010318:	4619      	mov	r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	699a      	ldr	r2, [r3, #24]
 801031e:	68fb      	ldr	r3, [r7, #12]
 8010320:	3301      	adds	r3, #1
 8010322:	4413      	add	r3, r2
 8010324:	781b      	ldrb	r3, [r3, #0]
 8010326:	021b      	lsls	r3, r3, #8
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8010328:	ea41 0203 	orr.w	r2, r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	6999      	ldr	r1, [r3, #24]
 8010330:	68fb      	ldr	r3, [r7, #12]
 8010332:	3302      	adds	r3, #2
 8010334:	440b      	add	r3, r1
 8010336:	781b      	ldrb	r3, [r3, #0]
 8010338:	041b      	lsls	r3, r3, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 801033a:	ea42 0103 	orr.w	r1, r2, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	699a      	ldr	r2, [r3, #24]
 8010342:	68fb      	ldr	r3, [r7, #12]
 8010344:	3303      	adds	r3, #3
 8010346:	4413      	add	r3, r2
 8010348:	781b      	ldrb	r3, [r3, #0]
 801034a:	061a      	lsls	r2, r3, #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	681b      	ldr	r3, [r3, #0]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8010350:	430a      	orrs	r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8010352:	641a      	str	r2, [r3, #64]	; 0x40

        hjpeg->JpegInCount += 4UL;
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	6a1b      	ldr	r3, [r3, #32]
 8010358:	1d1a      	adds	r2, r3, #4
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	621a      	str	r2, [r3, #32]
      for (index = 0; index < nbRequestWords; index++)
 801035e:	69bb      	ldr	r3, [r7, #24]
 8010360:	3301      	adds	r3, #1
 8010362:	61bb      	str	r3, [r7, #24]
 8010364:	69ba      	ldr	r2, [r7, #24]
 8010366:	683b      	ldr	r3, [r7, #0]
 8010368:	429a      	cmp	r2, r3
 801036a:	d3cd      	bcc.n	8010308 <JPEG_ReadInputData+0xa2>
        }
        hjpeg->Instance->DIR = dataword;
      }
    }
  }
}
 801036c:	e05d      	b.n	801042a <JPEG_ReadInputData+0x1c4>
      if (nb_words > 0UL)
 801036e:	693b      	ldr	r3, [r7, #16]
 8010370:	2b00      	cmp	r3, #0
 8010372:	d035      	beq.n	80103e0 <JPEG_ReadInputData+0x17a>
        for (index = 0; index < nb_words; index++)
 8010374:	2300      	movs	r3, #0
 8010376:	61bb      	str	r3, [r7, #24]
 8010378:	e02d      	b.n	80103d6 <JPEG_ReadInputData+0x170>
          input_count = hjpeg->JpegInCount;
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	6a1b      	ldr	r3, [r3, #32]
 801037e:	60fb      	str	r3, [r7, #12]
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	699a      	ldr	r2, [r3, #24]
 8010384:	68fb      	ldr	r3, [r7, #12]
 8010386:	4413      	add	r3, r2
 8010388:	781b      	ldrb	r3, [r3, #0]
 801038a:	4619      	mov	r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	699a      	ldr	r2, [r3, #24]
 8010390:	68fb      	ldr	r3, [r7, #12]
 8010392:	3301      	adds	r3, #1
 8010394:	4413      	add	r3, r2
 8010396:	781b      	ldrb	r3, [r3, #0]
 8010398:	021b      	lsls	r3, r3, #8
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 801039a:	ea41 0203 	orr.w	r2, r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	6999      	ldr	r1, [r3, #24]
 80103a2:	68fb      	ldr	r3, [r7, #12]
 80103a4:	3302      	adds	r3, #2
 80103a6:	440b      	add	r3, r1
 80103a8:	781b      	ldrb	r3, [r3, #0]
 80103aa:	041b      	lsls	r3, r3, #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80103ac:	ea42 0103 	orr.w	r1, r2, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	699a      	ldr	r2, [r3, #24]
 80103b4:	68fb      	ldr	r3, [r7, #12]
 80103b6:	3303      	adds	r3, #3
 80103b8:	4413      	add	r3, r2
 80103ba:	781b      	ldrb	r3, [r3, #0]
 80103bc:	061a      	lsls	r2, r3, #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	681b      	ldr	r3, [r3, #0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80103c2:	430a      	orrs	r2, r1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80103c4:	641a      	str	r2, [r3, #64]	; 0x40
          hjpeg->JpegInCount += 4UL;
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	6a1b      	ldr	r3, [r3, #32]
 80103ca:	1d1a      	adds	r2, r3, #4
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nb_words; index++)
 80103d0:	69bb      	ldr	r3, [r7, #24]
 80103d2:	3301      	adds	r3, #1
 80103d4:	61bb      	str	r3, [r7, #24]
 80103d6:	69ba      	ldr	r2, [r7, #24]
 80103d8:	693b      	ldr	r3, [r7, #16]
 80103da:	429a      	cmp	r2, r3
 80103dc:	d3cd      	bcc.n	801037a <JPEG_ReadInputData+0x114>
}
 80103de:	e024      	b.n	801042a <JPEG_ReadInputData+0x1c4>
        dataword = 0;
 80103e0:	2300      	movs	r3, #0
 80103e2:	617b      	str	r3, [r7, #20]
        for (index = 0; index < nb_bytes; index++)
 80103e4:	2300      	movs	r3, #0
 80103e6:	61bb      	str	r3, [r7, #24]
 80103e8:	e017      	b.n	801041a <JPEG_ReadInputData+0x1b4>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	699a      	ldr	r2, [r3, #24]
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	6a1b      	ldr	r3, [r3, #32]
 80103f2:	4413      	add	r3, r2
 80103f4:	781b      	ldrb	r3, [r3, #0]
 80103f6:	461a      	mov	r2, r3
 80103f8:	69bb      	ldr	r3, [r7, #24]
 80103fa:	f003 0303 	and.w	r3, r3, #3
 80103fe:	00db      	lsls	r3, r3, #3
 8010400:	fa02 f303 	lsl.w	r3, r2, r3
 8010404:	697a      	ldr	r2, [r7, #20]
 8010406:	4313      	orrs	r3, r2
 8010408:	617b      	str	r3, [r7, #20]
          hjpeg->JpegInCount++;
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	6a1b      	ldr	r3, [r3, #32]
 801040e:	1c5a      	adds	r2, r3, #1
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nb_bytes; index++)
 8010414:	69bb      	ldr	r3, [r7, #24]
 8010416:	3301      	adds	r3, #1
 8010418:	61bb      	str	r3, [r7, #24]
 801041a:	69ba      	ldr	r2, [r7, #24]
 801041c:	69fb      	ldr	r3, [r7, #28]
 801041e:	429a      	cmp	r2, r3
 8010420:	d3e3      	bcc.n	80103ea <JPEG_ReadInputData+0x184>
        hjpeg->Instance->DIR = dataword;
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	681b      	ldr	r3, [r3, #0]
 8010426:	697a      	ldr	r2, [r7, #20]
 8010428:	641a      	str	r2, [r3, #64]	; 0x40
}
 801042a:	bf00      	nop
 801042c:	3720      	adds	r7, #32
 801042e:	46bd      	mov	sp, r7
 8010430:	bd80      	pop	{r7, pc}
	...

08010434 <JPEG_DMA_StartProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static HAL_StatusTypeDef JPEG_DMA_StartProcess(JPEG_HandleTypeDef *hjpeg)
{
 8010434:	b590      	push	{r4, r7, lr}
 8010436:	b087      	sub	sp, #28
 8010438:	af02      	add	r7, sp, #8
 801043a:	6078      	str	r0, [r7, #4]
  /*if the MDMA In is triggred with JPEG In FIFO Threshold flag
      then MDMA In buffer size is 32 bytes
    else (MDMA In is triggred with JPEG In FIFO not full flag)
      then MDMA In buffer size is 4 bytes
    */
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010442:	60fb      	str	r3, [r7, #12]
  /*if the MDMA Out is triggred with JPEG Out FIFO Threshold flag
      then MDMA out buffer size is 32 bytes
    else (MDMA Out is triggred with JPEG Out FIFO not empty flag)
      then MDMA buffer size is 4 bytes
    */
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801044a:	60bb      	str	r3, [r7, #8]

  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010450:	68fa      	ldr	r2, [r7, #12]
 8010452:	429a      	cmp	r2, r3
 8010454:	d804      	bhi.n	8010460 <JPEG_DMA_StartProcess+0x2c>
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801045a:	68ba      	ldr	r2, [r7, #8]
 801045c:	429a      	cmp	r2, r3
 801045e:	d901      	bls.n	8010464 <JPEG_DMA_StartProcess+0x30>
  {
    return HAL_ERROR;
 8010460:	2301      	movs	r3, #1
 8010462:	e074      	b.n	801054e <JPEG_DMA_StartProcess+0x11a>
  }
  /* Set the JPEG MDMA In transfer complete callback */
  hjpeg->hdmain->XferCpltCallback = JPEG_MDMAInCpltCallback;
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010468:	4a3b      	ldr	r2, [pc, #236]	; (8010558 <JPEG_DMA_StartProcess+0x124>)
 801046a:	645a      	str	r2, [r3, #68]	; 0x44
  /* Set the MDMA In error callback */
  hjpeg->hdmain->XferErrorCallback = JPEG_MDMAErrorCallback;
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010470:	4a3a      	ldr	r2, [pc, #232]	; (801055c <JPEG_DMA_StartProcess+0x128>)
 8010472:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the JPEG MDMA Out transfer complete callback */
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010478:	4a39      	ldr	r2, [pc, #228]	; (8010560 <JPEG_DMA_StartProcess+0x12c>)
 801047a:	645a      	str	r2, [r3, #68]	; 0x44
  /* Set the MDMA In error callback */
  hjpeg->hdmaout->XferErrorCallback = JPEG_MDMAErrorCallback;
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010480:	4a36      	ldr	r2, [pc, #216]	; (801055c <JPEG_DMA_StartProcess+0x128>)
 8010482:	655a      	str	r2, [r3, #84]	; 0x54
  /* Set the MDMA Out Abort callback */
  hjpeg->hdmaout->XferAbortCallback = JPEG_MDMAOutAbortCallback;
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010488:	4a36      	ldr	r2, [pc, #216]	; (8010564 <JPEG_DMA_StartProcess+0x130>)
 801048a:	659a      	str	r2, [r3, #88]	; 0x58

  if ((inXfrSize == 0UL) || (outXfrSize == 0UL))
 801048c:	68fb      	ldr	r3, [r7, #12]
 801048e:	2b00      	cmp	r3, #0
 8010490:	d002      	beq.n	8010498 <JPEG_DMA_StartProcess+0x64>
 8010492:	68bb      	ldr	r3, [r7, #8]
 8010494:	2b00      	cmp	r3, #0
 8010496:	d107      	bne.n	80104a8 <JPEG_DMA_StartProcess+0x74>
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801049c:	f043 0204 	orr.w	r2, r3, #4
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	651a      	str	r2, [r3, #80]	; 0x50
    return HAL_ERROR;
 80104a4:	2301      	movs	r3, #1
 80104a6:	e052      	b.n	801054e <JPEG_DMA_StartProcess+0x11a>
  }
  /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80104b0:	68f9      	ldr	r1, [r7, #12]
 80104b2:	fbb3 f1f1 	udiv	r1, r3, r1
 80104b6:	68f8      	ldr	r0, [r7, #12]
 80104b8:	fb00 f101 	mul.w	r1, r0, r1
 80104bc:	1a5b      	subs	r3, r3, r1
 80104be:	1ad2      	subs	r2, r2, r3
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	629a      	str	r2, [r3, #40]	; 0x28

  /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80104cc:	68b9      	ldr	r1, [r7, #8]
 80104ce:	fbb3 f1f1 	udiv	r1, r3, r1
 80104d2:	68b8      	ldr	r0, [r7, #8]
 80104d4:	fb00 f101 	mul.w	r1, r0, r1
 80104d8:	1a5b      	subs	r3, r3, r1
 80104da:	1ad2      	subs	r2, r2, r3
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	62da      	str	r2, [r3, #44]	; 0x2c


  /* Start MDMA FIFO Out transfer */
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	681b      	ldr	r3, [r3, #0]
 80104e8:	3344      	adds	r3, #68	; 0x44
 80104ea:	4619      	mov	r1, r3
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	69db      	ldr	r3, [r3, #28]
 80104f0:	461c      	mov	r4, r3
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80104f6:	2201      	movs	r2, #1
 80104f8:	9200      	str	r2, [sp, #0]
 80104fa:	4622      	mov	r2, r4
 80104fc:	f000 ff7a 	bl	80113f4 <HAL_MDMA_Start_IT>
 8010500:	4603      	mov	r3, r0
 8010502:	2b00      	cmp	r3, #0
 8010504:	d007      	beq.n	8010516 <JPEG_DMA_StartProcess+0xe2>
                        hjpeg->OutDataLength, 1) != HAL_OK)
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801050a:	f043 0204 	orr.w	r2, r3, #4
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	651a      	str	r2, [r3, #80]	; 0x50
    return HAL_ERROR;
 8010512:	2301      	movs	r3, #1
 8010514:	e01b      	b.n	801054e <JPEG_DMA_StartProcess+0x11a>
  }
  /* Start DMA FIFO In transfer */
  if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	699b      	ldr	r3, [r3, #24]
 801051e:	4619      	mov	r1, r3
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	681b      	ldr	r3, [r3, #0]
 8010524:	3340      	adds	r3, #64	; 0x40
 8010526:	461c      	mov	r4, r3
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801052c:	2201      	movs	r2, #1
 801052e:	9200      	str	r2, [sp, #0]
 8010530:	4622      	mov	r2, r4
 8010532:	f000 ff5f 	bl	80113f4 <HAL_MDMA_Start_IT>
 8010536:	4603      	mov	r3, r0
 8010538:	2b00      	cmp	r3, #0
 801053a:	d007      	beq.n	801054c <JPEG_DMA_StartProcess+0x118>
                        hjpeg->InDataLength, 1) != HAL_OK)
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010540:	f043 0204 	orr.w	r2, r3, #4
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	651a      	str	r2, [r3, #80]	; 0x50
    return HAL_ERROR;
 8010548:	2301      	movs	r3, #1
 801054a:	e000      	b.n	801054e <JPEG_DMA_StartProcess+0x11a>
  }

  return HAL_OK;
 801054c:	2300      	movs	r3, #0
}
 801054e:	4618      	mov	r0, r3
 8010550:	3714      	adds	r7, #20
 8010552:	46bd      	mov	sp, r7
 8010554:	bd90      	pop	{r4, r7, pc}
 8010556:	bf00      	nop
 8010558:	08010867 	.word	0x08010867
 801055c:	08010a55 	.word	0x08010a55
 8010560:	08010993 	.word	0x08010993
 8010564:	08010aa5 	.word	0x08010aa5

08010568 <JPEG_DMA_ContinueProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static void JPEG_DMA_ContinueProcess(JPEG_HandleTypeDef *hjpeg)
{
 8010568:	b580      	push	{r7, lr}
 801056a:	b082      	sub	sp, #8
 801056c:	af00      	add	r7, sp, #0
 801056e:	6078      	str	r0, [r7, #4]
  /*End of header processing flag rises*/
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010574:	f003 0303 	and.w	r3, r3, #3
 8010578:	2b02      	cmp	r3, #2
 801057a:	d125      	bne.n	80105c8 <JPEG_DMA_ContinueProcess+0x60>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	681b      	ldr	r3, [r3, #0]
 8010580:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010586:	2b00      	cmp	r3, #0
 8010588:	d01e      	beq.n	80105c8 <JPEG_DMA_ContinueProcess+0x60>
    {
      /*Call Header parsing complete callback */
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	3304      	adds	r3, #4
 801058e:	4619      	mov	r1, r3
 8010590:	6878      	ldr	r0, [r7, #4]
 8010592:	f7fe fc0b 	bl	800edac <HAL_JPEG_GetInfo>

      /* Reset the ImageQuality */
      hjpeg->Conf.ImageQuality = 0;
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	2200      	movs	r2, #0
 801059a:	615a      	str	r2, [r3, #20]

      /*Call Info Ready callback */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->InfoReadyCallback(hjpeg, &hjpeg->Conf);
#else
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	3304      	adds	r3, #4
 80105a0:	4619      	mov	r1, r3
 80105a2:	6878      	ldr	r0, [r7, #4]
 80105a4:	f7f2 fed0 	bl	8003348 <HAL_JPEG_InfoReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	681b      	ldr	r3, [r3, #0]
 80105ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	681b      	ldr	r3, [r3, #0]
 80105b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80105b6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Clear header processing done flag */
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	681b      	ldr	r3, [r3, #0]
 80105bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	681b      	ldr	r3, [r3, #0]
 80105c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80105c6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  /*End of Conversion handling*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) != 0UL)
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	681b      	ldr	r3, [r3, #0]
 80105cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80105ce:	f003 0320 	and.w	r3, r3, #32
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	d039      	beq.n	801064a <JPEG_DMA_ContinueProcess+0xe2>
  {

    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80105da:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	655a      	str	r2, [r3, #84]	; 0x54

    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	681b      	ldr	r3, [r3, #0]
 80105e6:	681a      	ldr	r2, [r3, #0]
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	681b      	ldr	r3, [r3, #0]
 80105ec:	f022 0201 	bic.w	r2, r2, #1
 80105f0:	601a      	str	r2, [r3, #0]

    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	681b      	ldr	r3, [r3, #0]
 80105f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	681b      	ldr	r3, [r3, #0]
 80105fc:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 8010600:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear all flags */
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	681b      	ldr	r3, [r3, #0]
 8010606:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	681b      	ldr	r3, [r3, #0]
 801060c:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8010610:	639a      	str	r2, [r3, #56]	; 0x38

    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010616:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801061a:	b2db      	uxtb	r3, r3
 801061c:	2b02      	cmp	r3, #2
 801061e:	d104      	bne.n	801062a <JPEG_DMA_ContinueProcess+0xc2>
    {
      /* Stop the MDMA In Xfer*/
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmain);
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010624:	4618      	mov	r0, r3
 8010626:	f000 ffc1 	bl	80115ac <HAL_MDMA_Abort_IT>
    }

    if (hjpeg->hdmaout->State == HAL_MDMA_STATE_BUSY)
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801062e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010632:	b2db      	uxtb	r3, r3
 8010634:	2b02      	cmp	r3, #2
 8010636:	d105      	bne.n	8010644 <JPEG_DMA_ContinueProcess+0xdc>
    {
      /* Stop the MDMA out Xfer*/
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmaout);
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801063c:	4618      	mov	r0, r3
 801063e:	f000 ffb5 	bl	80115ac <HAL_MDMA_Abort_IT>
      JPEG_DMA_EndProcess(hjpeg);
    }
  }


}
 8010642:	e002      	b.n	801064a <JPEG_DMA_ContinueProcess+0xe2>
      JPEG_DMA_EndProcess(hjpeg);
 8010644:	6878      	ldr	r0, [r7, #4]
 8010646:	f000 f804 	bl	8010652 <JPEG_DMA_EndProcess>
}
 801064a:	bf00      	nop
 801064c:	3708      	adds	r7, #8
 801064e:	46bd      	mov	sp, r7
 8010650:	bd80      	pop	{r7, pc}

08010652 <JPEG_DMA_EndProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE
  */
static void JPEG_DMA_EndProcess(JPEG_HandleTypeDef *hjpeg)
{
 8010652:	b580      	push	{r7, lr}
 8010654:	b084      	sub	sp, #16
 8010656:	af00      	add	r7, sp, #0
 8010658:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010662:	681b      	ldr	r3, [r3, #0]
 8010664:	695b      	ldr	r3, [r3, #20]
 8010666:	f3c3 0310 	ubfx	r3, r3, #0, #17
 801066a:	1ad2      	subs	r2, r2, r3
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	625a      	str	r2, [r3, #36]	; 0x24

  /*if Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010678:	429a      	cmp	r2, r3
 801067a:	d10a      	bne.n	8010692 <JPEG_DMA_EndProcess+0x40>
  {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	69d9      	ldr	r1, [r3, #28]
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010684:	461a      	mov	r2, r3
 8010686:	6878      	ldr	r0, [r7, #4]
 8010688:	f7f2 ff2e 	bl	80034e8 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

    hjpeg->JpegOutCount = 0;
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	2200      	movs	r2, #0
 8010690:	625a      	str	r2, [r3, #36]	; 0x24
  }

  /*Check if remaining data in the output FIFO*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	681b      	ldr	r3, [r3, #0]
 8010696:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010698:	f003 0310 	and.w	r3, r3, #16
 801069c:	2b00      	cmp	r3, #0
 801069e:	d134      	bne.n	801070a <JPEG_DMA_EndProcess+0xb8>
  {
    if (hjpeg->JpegOutCount > 0UL)
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	d00a      	beq.n	80106be <JPEG_DMA_EndProcess+0x6c>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	69d9      	ldr	r1, [r3, #28]
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106b0:	461a      	mov	r2, r3
 80106b2:	6878      	ldr	r0, [r7, #4]
 80106b4:	f7f2 ff18 	bl	80034e8 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	2200      	movs	r2, #0
 80106bc:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	681b      	ldr	r3, [r3, #0]
 80106c2:	681a      	ldr	r2, [r3, #0]
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	681b      	ldr	r3, [r3, #0]
 80106c8:	f022 0201 	bic.w	r2, r2, #1
 80106cc:	601a      	str	r2, [r3, #0]

    tmpContext = hjpeg->Context;
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80106d2:	60fb      	str	r3, [r7, #12]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80106d8:	f403 4282 	and.w	r2, r3, #16640	; 0x4100
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	2200      	movs	r2, #0
 80106e4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	2201      	movs	r2, #1
 80106ec:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80106f0:	68fb      	ldr	r3, [r7, #12]
 80106f2:	f003 0303 	and.w	r3, r3, #3
 80106f6:	2b02      	cmp	r3, #2
 80106f8:	d103      	bne.n	8010702 <JPEG_DMA_EndProcess+0xb0>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 80106fa:	6878      	ldr	r0, [r7, #4]
 80106fc:	f7f2 ff5c 	bl	80035b8 <HAL_JPEG_DecodeCpltCallback>
  else
  {
    /* Nothing to do */
  }

}
 8010700:	e00c      	b.n	801071c <JPEG_DMA_EndProcess+0xca>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8010702:	6878      	ldr	r0, [r7, #4]
 8010704:	f7fe fdb1 	bl	800f26a <HAL_JPEG_EncodeCpltCallback>
}
 8010708:	e008      	b.n	801071c <JPEG_DMA_EndProcess+0xca>
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801070e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010712:	2b00      	cmp	r3, #0
 8010714:	d102      	bne.n	801071c <JPEG_DMA_EndProcess+0xca>
    JPEG_DMA_PollResidualData(hjpeg);
 8010716:	6878      	ldr	r0, [r7, #4]
 8010718:	f000 f804 	bl	8010724 <JPEG_DMA_PollResidualData>
}
 801071c:	bf00      	nop
 801071e:	3710      	adds	r7, #16
 8010720:	46bd      	mov	sp, r7
 8010722:	bd80      	pop	{r7, pc}

08010724 <JPEG_DMA_PollResidualData>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None.
  */
static void JPEG_DMA_PollResidualData(JPEG_HandleTypeDef *hjpeg)
{
 8010724:	b580      	push	{r7, lr}
 8010726:	b086      	sub	sp, #24
 8010728:	af00      	add	r7, sp, #0
 801072a:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;
  uint32_t count;
  uint32_t dataOut;

  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 801072c:	2310      	movs	r3, #16
 801072e:	617b      	str	r3, [r7, #20]
 8010730:	e04f      	b.n	80107d2 <JPEG_DMA_PollResidualData+0xae>
  {
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010736:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801073a:	2b00      	cmp	r3, #0
 801073c:	d146      	bne.n	80107cc <JPEG_DMA_PollResidualData+0xa8>
    {
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	681b      	ldr	r3, [r3, #0]
 8010742:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010744:	f003 0310 	and.w	r3, r3, #16
 8010748:	2b00      	cmp	r3, #0
 801074a:	d03f      	beq.n	80107cc <JPEG_DMA_PollResidualData+0xa8>
      {
        dataOut = hjpeg->Instance->DOR;
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	681b      	ldr	r3, [r3, #0]
 8010750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010752:	60fb      	str	r3, [r7, #12]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	69da      	ldr	r2, [r3, #28]
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801075c:	4413      	add	r3, r2
 801075e:	68fa      	ldr	r2, [r7, #12]
 8010760:	b2d2      	uxtb	r2, r2
 8010762:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
 8010764:	68fb      	ldr	r3, [r7, #12]
 8010766:	0a19      	lsrs	r1, r3, #8
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	69da      	ldr	r2, [r3, #28]
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010770:	3301      	adds	r3, #1
 8010772:	4413      	add	r3, r2
 8010774:	b2ca      	uxtb	r2, r1
 8010776:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 8010778:	68fb      	ldr	r3, [r7, #12]
 801077a:	0c19      	lsrs	r1, r3, #16
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	69da      	ldr	r2, [r3, #28]
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010784:	3302      	adds	r3, #2
 8010786:	4413      	add	r3, r2
 8010788:	b2ca      	uxtb	r2, r1
 801078a:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 801078c:	68fb      	ldr	r3, [r7, #12]
 801078e:	0e19      	lsrs	r1, r3, #24
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	69da      	ldr	r2, [r3, #28]
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010798:	3303      	adds	r3, #3
 801079a:	4413      	add	r3, r2
 801079c:	b2ca      	uxtb	r2, r1
 801079e:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount += 4UL;
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107a4:	1d1a      	adds	r2, r3, #4
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	625a      	str	r2, [r3, #36]	; 0x24

        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80107b2:	429a      	cmp	r2, r3
 80107b4:	d10a      	bne.n	80107cc <JPEG_DMA_PollResidualData+0xa8>
        {
          /*Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
          hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
          HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	69d9      	ldr	r1, [r3, #28]
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107be:	461a      	mov	r2, r3
 80107c0:	6878      	ldr	r0, [r7, #4]
 80107c2:	f7f2 fe91 	bl	80034e8 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

          hjpeg->JpegOutCount = 0;
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	2200      	movs	r2, #0
 80107ca:	625a      	str	r2, [r3, #36]	; 0x24
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 80107cc:	697b      	ldr	r3, [r7, #20]
 80107ce:	3b01      	subs	r3, #1
 80107d0:	617b      	str	r3, [r7, #20]
 80107d2:	697b      	ldr	r3, [r7, #20]
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	d1ac      	bne.n	8010732 <JPEG_DMA_PollResidualData+0xe>

      }
    }
  }

  tmpContext = hjpeg->Context;
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80107dc:	613b      	str	r3, [r7, #16]

  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	681b      	ldr	r3, [r3, #0]
 80107e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80107e4:	f003 0310 	and.w	r3, r3, #16
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	d004      	beq.n	80107f6 <JPEG_DMA_PollResidualData+0xd2>
 80107ec:	693b      	ldr	r3, [r7, #16]
 80107ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d133      	bne.n	801085e <JPEG_DMA_PollResidualData+0x13a>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	681b      	ldr	r3, [r3, #0]
 80107fa:	681a      	ldr	r2, [r3, #0]
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	681b      	ldr	r3, [r3, #0]
 8010800:	f022 0201 	bic.w	r2, r2, #1
 8010804:	601a      	str	r2, [r3, #0]

    if (hjpeg->JpegOutCount > 0UL)
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801080a:	2b00      	cmp	r3, #0
 801080c:	d00a      	beq.n	8010824 <JPEG_DMA_PollResidualData+0x100>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	69d9      	ldr	r1, [r3, #28]
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010816:	461a      	mov	r2, r3
 8010818:	6878      	ldr	r0, [r7, #4]
 801081a:	f7f2 fe65 	bl	80034e8 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	2200      	movs	r2, #0
 8010822:	625a      	str	r2, [r3, #36]	; 0x24
    }

    tmpContext = hjpeg->Context;
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010828:	613b      	str	r3, [r7, #16]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801082e:	f403 4282 	and.w	r2, r3, #16640	; 0x4100
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	2200      	movs	r2, #0
 801083a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	2201      	movs	r2, #1
 8010842:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8010846:	693b      	ldr	r3, [r7, #16]
 8010848:	f003 0303 	and.w	r3, r3, #3
 801084c:	2b02      	cmp	r3, #2
 801084e:	d103      	bne.n	8010858 <JPEG_DMA_PollResidualData+0x134>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8010850:	6878      	ldr	r0, [r7, #4]
 8010852:	f7f2 feb1 	bl	80035b8 <HAL_JPEG_DecodeCpltCallback>
#else
      HAL_JPEG_EncodeCpltCallback(hjpeg);
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
    }
  }
}
 8010856:	e002      	b.n	801085e <JPEG_DMA_PollResidualData+0x13a>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8010858:	6878      	ldr	r0, [r7, #4]
 801085a:	f7fe fd06 	bl	800f26a <HAL_JPEG_EncodeCpltCallback>
}
 801085e:	bf00      	nop
 8010860:	3718      	adds	r7, #24
 8010862:	46bd      	mov	sp, r7
 8010864:	bd80      	pop	{r7, pc}

08010866 <JPEG_MDMAInCpltCallback>:
  * @brief  MDMA input transfer complete callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAInCpltCallback(MDMA_HandleTypeDef *hmdma)
{
 8010866:	b590      	push	{r4, r7, lr}
 8010868:	b087      	sub	sp, #28
 801086a:	af02      	add	r7, sp, #8
 801086c:	6078      	str	r0, [r7, #4]
  uint32_t inXfrSize;

  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010872:	60fb      	str	r3, [r7, #12]

  /* Disable The JPEG IT so the MDMA Input Callback can not be interrupted by the JPEG EOC IT or JPEG HPD IT */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8010874:	68fb      	ldr	r3, [r7, #12]
 8010876:	681b      	ldr	r3, [r3, #0]
 8010878:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801087a:	68fb      	ldr	r3, [r7, #12]
 801087c:	681b      	ldr	r3, [r3, #0]
 801087e:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 8010882:	631a      	str	r2, [r3, #48]	; 0x30

  /* Check if context method is DMA and we are not in ending DMA stage */
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) == JPEG_CONTEXT_DMA)
 8010884:	68fb      	ldr	r3, [r7, #12]
 8010886:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010888:	f248 030c 	movw	r3, #32780	; 0x800c
 801088c:	4013      	ands	r3, r2
 801088e:	2b0c      	cmp	r3, #12
 8010890:	d17c      	bne.n	801098c <JPEG_MDMAInCpltCallback+0x126>
    /*if the MDMA In is triggred with JPEG In FIFO Threshold flag
      then MDMA In buffer size is 32 bytes
      else (MDMA In is triggred with JPEG In FIFO not full flag)
      then MDMA In buffer size is 4 bytes
      */
    inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 8010892:	68fb      	ldr	r3, [r7, #12]
 8010894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010898:	60bb      	str	r3, [r7, #8]

    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 801089a:	68fb      	ldr	r3, [r7, #12]
 801089c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	681b      	ldr	r3, [r3, #0]
 80108a2:	695b      	ldr	r3, [r3, #20]
 80108a4:	f3c3 0310 	ubfx	r3, r3, #0, #17
 80108a8:	1ad2      	subs	r2, r2, r3
 80108aa:	68fb      	ldr	r3, [r7, #12]
 80108ac:	621a      	str	r2, [r3, #32]

    /*Call HAL_JPEG_GetDataCallback to get new data */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->GetDataCallback(hjpeg, hjpeg->JpegInCount);
#else
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 80108ae:	68fb      	ldr	r3, [r7, #12]
 80108b0:	6a1b      	ldr	r3, [r3, #32]
 80108b2:	4619      	mov	r1, r3
 80108b4:	68f8      	ldr	r0, [r7, #12]
 80108b6:	f7f2 fde3 	bl	8003480 <HAL_JPEG_GetDataCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */


    if (hjpeg->InDataLength >= inXfrSize)
 80108ba:	68fb      	ldr	r3, [r7, #12]
 80108bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80108be:	68ba      	ldr	r2, [r7, #8]
 80108c0:	429a      	cmp	r2, r3
 80108c2:	d81f      	bhi.n	8010904 <JPEG_MDMAInCpltCallback+0x9e>
    {
      if (inXfrSize == 0UL)
 80108c4:	68bb      	ldr	r3, [r7, #8]
 80108c6:	2b00      	cmp	r3, #0
 80108c8:	d10d      	bne.n	80108e6 <JPEG_MDMAInCpltCallback+0x80>
      {
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 80108ca:	68fb      	ldr	r3, [r7, #12]
 80108cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80108ce:	f043 0204 	orr.w	r2, r3, #4
 80108d2:	68fb      	ldr	r3, [r7, #12]
 80108d4:	651a      	str	r2, [r3, #80]	; 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 80108d6:	68fb      	ldr	r3, [r7, #12]
 80108d8:	2206      	movs	r2, #6
 80108da:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
        hjpeg->ErrorCallback(hjpeg);
#else
        HAL_JPEG_ErrorCallback(hjpeg);
 80108de:	68f8      	ldr	r0, [r7, #12]
 80108e0:	f7f2 fe62 	bl	80035a8 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
        return;
 80108e4:	e052      	b.n	801098c <JPEG_MDMAInCpltCallback+0x126>
      }
      /*JPEG Input MDMA transfer data number must be multiple of MDMA buffer size
        as the destination is a 32 bits register */
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 80108e6:	68fb      	ldr	r3, [r7, #12]
 80108e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80108ea:	68fb      	ldr	r3, [r7, #12]
 80108ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80108ee:	68b9      	ldr	r1, [r7, #8]
 80108f0:	fbb3 f1f1 	udiv	r1, r3, r1
 80108f4:	68b8      	ldr	r0, [r7, #8]
 80108f6:	fb00 f101 	mul.w	r1, r0, r1
 80108fa:	1a5b      	subs	r3, r3, r1
 80108fc:	1ad2      	subs	r2, r2, r3
 80108fe:	68fb      	ldr	r3, [r7, #12]
 8010900:	629a      	str	r2, [r3, #40]	; 0x28
 8010902:	e010      	b.n	8010926 <JPEG_MDMAInCpltCallback+0xc0>

    }
    else if (hjpeg->InDataLength > 0UL)
 8010904:	68fb      	ldr	r3, [r7, #12]
 8010906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010908:	2b00      	cmp	r3, #0
 801090a:	d00c      	beq.n	8010926 <JPEG_MDMAInCpltCallback+0xc0>
    {
      /* Transfer the remaining Data, must be multiple of source data size (byte) and destination data size (word) */
      if ((hjpeg->InDataLength % 4UL) != 0UL)
 801090c:	68fb      	ldr	r3, [r7, #12]
 801090e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010910:	f003 0303 	and.w	r3, r3, #3
 8010914:	2b00      	cmp	r3, #0
 8010916:	d006      	beq.n	8010926 <JPEG_MDMAInCpltCallback+0xc0>
      {
        hjpeg->InDataLength = ((hjpeg->InDataLength / 4UL) + 1UL) * 4UL;
 8010918:	68fb      	ldr	r3, [r7, #12]
 801091a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801091c:	089b      	lsrs	r3, r3, #2
 801091e:	3301      	adds	r3, #1
 8010920:	009a      	lsls	r2, r3, #2
 8010922:	68fb      	ldr	r3, [r7, #12]
 8010924:	629a      	str	r2, [r3, #40]	; 0x28
    else
    {
      /* Nothing to do */
    }

    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 8010926:	68fb      	ldr	r3, [r7, #12]
 8010928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801092a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801092e:	2b00      	cmp	r3, #0
 8010930:	d124      	bne.n	801097c <JPEG_MDMAInCpltCallback+0x116>
 8010932:	68fb      	ldr	r3, [r7, #12]
 8010934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010936:	2b00      	cmp	r3, #0
 8010938:	d020      	beq.n	801097c <JPEG_MDMAInCpltCallback+0x116>
    {
      /* Start MDMA FIFO In transfer */
      if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 801093a:	68fb      	ldr	r3, [r7, #12]
 801093c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801093e:	68fb      	ldr	r3, [r7, #12]
 8010940:	699b      	ldr	r3, [r3, #24]
 8010942:	4619      	mov	r1, r3
 8010944:	68fb      	ldr	r3, [r7, #12]
 8010946:	681b      	ldr	r3, [r3, #0]
 8010948:	3340      	adds	r3, #64	; 0x40
 801094a:	461c      	mov	r4, r3
 801094c:	68fb      	ldr	r3, [r7, #12]
 801094e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010950:	2201      	movs	r2, #1
 8010952:	9200      	str	r2, [sp, #0]
 8010954:	4622      	mov	r2, r4
 8010956:	f000 fd4d 	bl	80113f4 <HAL_MDMA_Start_IT>
 801095a:	4603      	mov	r3, r0
 801095c:	2b00      	cmp	r3, #0
 801095e:	d00d      	beq.n	801097c <JPEG_MDMAInCpltCallback+0x116>
                            hjpeg->InDataLength, 1) != HAL_OK)
      {
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8010960:	68fb      	ldr	r3, [r7, #12]
 8010962:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010964:	f043 0204 	orr.w	r2, r3, #4
 8010968:	68fb      	ldr	r3, [r7, #12]
 801096a:	651a      	str	r2, [r3, #80]	; 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 801096c:	68fb      	ldr	r3, [r7, #12]
 801096e:	2206      	movs	r2, #6
 8010970:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
        hjpeg->ErrorCallback(hjpeg);
#else
        HAL_JPEG_ErrorCallback(hjpeg);
 8010974:	68f8      	ldr	r0, [r7, #12]
 8010976:	f7f2 fe17 	bl	80035a8 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
        return;
 801097a:	e007      	b.n	801098c <JPEG_MDMAInCpltCallback+0x126>
      }
    }

    /* JPEG Conversion still on going : Enable the JPEG IT */
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 801097c:	68fb      	ldr	r3, [r7, #12]
 801097e:	681b      	ldr	r3, [r3, #0]
 8010980:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010982:	68fb      	ldr	r3, [r7, #12]
 8010984:	681b      	ldr	r3, [r3, #0]
 8010986:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 801098a:	631a      	str	r2, [r3, #48]	; 0x30
  }
}
 801098c:	3714      	adds	r7, #20
 801098e:	46bd      	mov	sp, r7
 8010990:	bd90      	pop	{r4, r7, pc}

08010992 <JPEG_MDMAOutCpltCallback>:
  * @brief  MDMA output transfer complete callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAOutCpltCallback(MDMA_HandleTypeDef *hmdma)
{
 8010992:	b590      	push	{r4, r7, lr}
 8010994:	b087      	sub	sp, #28
 8010996:	af02      	add	r7, sp, #8
 8010998:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801099e:	60fb      	str	r3, [r7, #12]


  /* Disable The JPEG IT so the MDMA Output Callback can not be interrupted by the JPEG EOC IT or JPEG HPD IT */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 80109a0:	68fb      	ldr	r3, [r7, #12]
 80109a2:	681b      	ldr	r3, [r3, #0]
 80109a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80109a6:	68fb      	ldr	r3, [r7, #12]
 80109a8:	681b      	ldr	r3, [r3, #0]
 80109aa:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 80109ae:	631a      	str	r2, [r3, #48]	; 0x30

  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
 80109b0:	68fb      	ldr	r3, [r7, #12]
 80109b2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80109b4:	f248 030c 	movw	r3, #32780	; 0x800c
 80109b8:	4013      	ands	r3, r2
 80109ba:	2b0c      	cmp	r3, #12
 80109bc:	d147      	bne.n	8010a4e <JPEG_MDMAOutCpltCallback+0xbc>
      JPEG_CONTEXT_DMA) /* Check if context method is DMA and we are not in ending DMA stage */
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) == 0UL)
 80109be:	68fb      	ldr	r3, [r7, #12]
 80109c0:	681b      	ldr	r3, [r3, #0]
 80109c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80109c4:	f003 0320 	and.w	r3, r3, #32
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	d138      	bne.n	8010a3e <JPEG_MDMAOutCpltCallback+0xac>
    {
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 80109cc:	68fb      	ldr	r3, [r7, #12]
 80109ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	681b      	ldr	r3, [r3, #0]
 80109d4:	695b      	ldr	r3, [r3, #20]
 80109d6:	f3c3 0310 	ubfx	r3, r3, #0, #17
 80109da:	1ad2      	subs	r2, r2, r3
 80109dc:	68fb      	ldr	r3, [r7, #12]
 80109de:	625a      	str	r2, [r3, #36]	; 0x24

      /*Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80109e0:	68fb      	ldr	r3, [r7, #12]
 80109e2:	69d9      	ldr	r1, [r3, #28]
 80109e4:	68fb      	ldr	r3, [r7, #12]
 80109e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80109e8:	461a      	mov	r2, r3
 80109ea:	68f8      	ldr	r0, [r7, #12]
 80109ec:	f7f2 fd7c 	bl	80034e8 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 80109f0:	68fb      	ldr	r3, [r7, #12]
 80109f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80109f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	d120      	bne.n	8010a3e <JPEG_MDMAOutCpltCallback+0xac>
      {
        /* Start MDMA FIFO Out transfer */
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 80109fc:	68fb      	ldr	r3, [r7, #12]
 80109fe:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8010a00:	68fb      	ldr	r3, [r7, #12]
 8010a02:	681b      	ldr	r3, [r3, #0]
 8010a04:	3344      	adds	r3, #68	; 0x44
 8010a06:	4619      	mov	r1, r3
 8010a08:	68fb      	ldr	r3, [r7, #12]
 8010a0a:	69db      	ldr	r3, [r3, #28]
 8010a0c:	461c      	mov	r4, r3
 8010a0e:	68fb      	ldr	r3, [r7, #12]
 8010a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a12:	2201      	movs	r2, #1
 8010a14:	9200      	str	r2, [sp, #0]
 8010a16:	4622      	mov	r2, r4
 8010a18:	f000 fcec 	bl	80113f4 <HAL_MDMA_Start_IT>
 8010a1c:	4603      	mov	r3, r0
 8010a1e:	2b00      	cmp	r3, #0
 8010a20:	d00d      	beq.n	8010a3e <JPEG_MDMAOutCpltCallback+0xac>
                              hjpeg->OutDataLength, 1) != HAL_OK)
        {
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8010a22:	68fb      	ldr	r3, [r7, #12]
 8010a24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010a26:	f043 0204 	orr.w	r2, r3, #4
 8010a2a:	68fb      	ldr	r3, [r7, #12]
 8010a2c:	651a      	str	r2, [r3, #80]	; 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 8010a2e:	68fb      	ldr	r3, [r7, #12]
 8010a30:	2206      	movs	r2, #6
 8010a32:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
          hjpeg->ErrorCallback(hjpeg);
#else
          HAL_JPEG_ErrorCallback(hjpeg);
 8010a36:	68f8      	ldr	r0, [r7, #12]
 8010a38:	f7f2 fdb6 	bl	80035a8 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
          return;
 8010a3c:	e007      	b.n	8010a4e <JPEG_MDMAOutCpltCallback+0xbc>
        }
      }
    }

    /* JPEG Conversion still on going : Enable the JPEG IT */
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8010a3e:	68fb      	ldr	r3, [r7, #12]
 8010a40:	681b      	ldr	r3, [r3, #0]
 8010a42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010a44:	68fb      	ldr	r3, [r7, #12]
 8010a46:	681b      	ldr	r3, [r3, #0]
 8010a48:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8010a4c:	631a      	str	r2, [r3, #48]	; 0x30
  }

}
 8010a4e:	3714      	adds	r7, #20
 8010a50:	46bd      	mov	sp, r7
 8010a52:	bd90      	pop	{r4, r7, pc}

08010a54 <JPEG_MDMAErrorCallback>:
  * @brief  MDMA Transfer error callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAErrorCallback(MDMA_HandleTypeDef *hmdma)
{
 8010a54:	b580      	push	{r7, lr}
 8010a56:	b084      	sub	sp, #16
 8010a58:	af00      	add	r7, sp, #0
 8010a5a:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a60:	60fb      	str	r3, [r7, #12]

  /*Stop Encoding/Decoding*/
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8010a62:	68fb      	ldr	r3, [r7, #12]
 8010a64:	681b      	ldr	r3, [r3, #0]
 8010a66:	681a      	ldr	r2, [r3, #0]
 8010a68:	68fb      	ldr	r3, [r7, #12]
 8010a6a:	681b      	ldr	r3, [r3, #0]
 8010a6c:	f022 0201 	bic.w	r2, r2, #1
 8010a70:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8010a72:	68fb      	ldr	r3, [r7, #12]
 8010a74:	681b      	ldr	r3, [r3, #0]
 8010a76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010a78:	68fb      	ldr	r3, [r7, #12]
 8010a7a:	681b      	ldr	r3, [r3, #0]
 8010a7c:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 8010a80:	631a      	str	r2, [r3, #48]	; 0x30

  hjpeg->State = HAL_JPEG_STATE_READY;
 8010a82:	68fb      	ldr	r3, [r7, #12]
 8010a84:	2201      	movs	r2, #1
 8010a86:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
  hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8010a8a:	68fb      	ldr	r3, [r7, #12]
 8010a8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010a8e:	f043 0204 	orr.w	r2, r3, #4
 8010a92:	68fb      	ldr	r3, [r7, #12]
 8010a94:	651a      	str	r2, [r3, #80]	; 0x50

#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
  hjpeg->ErrorCallback(hjpeg);
#else
  HAL_JPEG_ErrorCallback(hjpeg);
 8010a96:	68f8      	ldr	r0, [r7, #12]
 8010a98:	f7f2 fd86 	bl	80035a8 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
}
 8010a9c:	bf00      	nop
 8010a9e:	3710      	adds	r7, #16
 8010aa0:	46bd      	mov	sp, r7
 8010aa2:	bd80      	pop	{r7, pc}

08010aa4 <JPEG_MDMAOutAbortCallback>:
  * @brief  MDMA output Abort callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAOutAbortCallback(MDMA_HandleTypeDef *hmdma)
{
 8010aa4:	b580      	push	{r7, lr}
 8010aa6:	b084      	sub	sp, #16
 8010aa8:	af00      	add	r7, sp, #0
 8010aaa:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ab0:	60fb      	str	r3, [r7, #12]

  if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 8010ab2:	68fb      	ldr	r3, [r7, #12]
 8010ab4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010ab6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010aba:	2b00      	cmp	r3, #0
 8010abc:	d002      	beq.n	8010ac4 <JPEG_MDMAOutAbortCallback+0x20>
  {
    JPEG_DMA_EndProcess(hjpeg);
 8010abe:	68f8      	ldr	r0, [r7, #12]
 8010ac0:	f7ff fdc7 	bl	8010652 <JPEG_DMA_EndProcess>
  }
}
 8010ac4:	bf00      	nop
 8010ac6:	3710      	adds	r7, #16
 8010ac8:	46bd      	mov	sp, r7
 8010aca:	bd80      	pop	{r7, pc}

08010acc <JPEG_GetQuality>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG image quality from 1 to 100.
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
 8010acc:	b480      	push	{r7}
 8010ace:	b08b      	sub	sp, #44	; 0x2c
 8010ad0:	af00      	add	r7, sp, #0
 8010ad2:	6078      	str	r0, [r7, #4]
  uint32_t quality = 0;
 8010ad4:	2300      	movs	r3, #0
 8010ad6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	681b      	ldr	r3, [r3, #0]
 8010adc:	3350      	adds	r3, #80	; 0x50
 8010ade:	61bb      	str	r3, [r7, #24]

  i = 0;
 8010ae0:	2300      	movs	r3, #0
 8010ae2:	623b      	str	r3, [r7, #32]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 8010ae4:	e042      	b.n	8010b6c <JPEG_GetQuality+0xa0>
  {
    quantRow = *tableAddress;
 8010ae6:	69bb      	ldr	r3, [r7, #24]
 8010ae8:	681b      	ldr	r3, [r3, #0]
 8010aea:	617b      	str	r3, [r7, #20]
    for (j = 0; j < 4UL; j++)
 8010aec:	2300      	movs	r3, #0
 8010aee:	61fb      	str	r3, [r7, #28]
 8010af0:	e033      	b.n	8010b5a <JPEG_GetQuality+0x8e>
    {
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 8010af2:	69fb      	ldr	r3, [r7, #28]
 8010af4:	00db      	lsls	r3, r3, #3
 8010af6:	697a      	ldr	r2, [r7, #20]
 8010af8:	fa22 f303 	lsr.w	r3, r2, r3
 8010afc:	b2db      	uxtb	r3, r3
 8010afe:	613b      	str	r3, [r7, #16]
      if (quantVal == 1UL)
 8010b00:	693b      	ldr	r3, [r7, #16]
 8010b02:	2b01      	cmp	r3, #1
 8010b04:	d103      	bne.n	8010b0e <JPEG_GetQuality+0x42>
      {
        /* if Quantization value = 1 then quality is 100%*/
        quality += 100UL;
 8010b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b08:	3364      	adds	r3, #100	; 0x64
 8010b0a:	627b      	str	r3, [r7, #36]	; 0x24
 8010b0c:	e022      	b.n	8010b54 <JPEG_GetQuality+0x88>
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 8010b0e:	693b      	ldr	r3, [r7, #16]
 8010b10:	2264      	movs	r2, #100	; 0x64
 8010b12:	fb02 f303 	mul.w	r3, r2, r3
 8010b16:	687a      	ldr	r2, [r7, #4]
 8010b18:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8010b1a:	6a38      	ldr	r0, [r7, #32]
 8010b1c:	69f9      	ldr	r1, [r7, #28]
 8010b1e:	4401      	add	r1, r0
 8010b20:	4818      	ldr	r0, [pc, #96]	; (8010b84 <JPEG_GetQuality+0xb8>)
 8010b22:	5c41      	ldrb	r1, [r0, r1]
 8010b24:	440a      	add	r2, r1
 8010b26:	7812      	ldrb	r2, [r2, #0]
 8010b28:	fbb3 f3f2 	udiv	r3, r3, r2
 8010b2c:	60fb      	str	r3, [r7, #12]

        if (scale <= 100UL)
 8010b2e:	68fb      	ldr	r3, [r7, #12]
 8010b30:	2b64      	cmp	r3, #100	; 0x64
 8010b32:	d807      	bhi.n	8010b44 <JPEG_GetQuality+0x78>
        {
          quality += (200UL - scale) / 2UL;
 8010b34:	68fb      	ldr	r3, [r7, #12]
 8010b36:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 8010b3a:	085b      	lsrs	r3, r3, #1
 8010b3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010b3e:	4413      	add	r3, r2
 8010b40:	627b      	str	r3, [r7, #36]	; 0x24
 8010b42:	e007      	b.n	8010b54 <JPEG_GetQuality+0x88>
        }
        else
        {
          quality += 5000UL / scale;
 8010b44:	f241 3288 	movw	r2, #5000	; 0x1388
 8010b48:	68fb      	ldr	r3, [r7, #12]
 8010b4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8010b4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010b50:	4413      	add	r3, r2
 8010b52:	627b      	str	r3, [r7, #36]	; 0x24
    for (j = 0; j < 4UL; j++)
 8010b54:	69fb      	ldr	r3, [r7, #28]
 8010b56:	3301      	adds	r3, #1
 8010b58:	61fb      	str	r3, [r7, #28]
 8010b5a:	69fb      	ldr	r3, [r7, #28]
 8010b5c:	2b03      	cmp	r3, #3
 8010b5e:	d9c8      	bls.n	8010af2 <JPEG_GetQuality+0x26>
        }
      }
    }

    i += 4UL;
 8010b60:	6a3b      	ldr	r3, [r7, #32]
 8010b62:	3304      	adds	r3, #4
 8010b64:	623b      	str	r3, [r7, #32]
    tableAddress ++;
 8010b66:	69bb      	ldr	r3, [r7, #24]
 8010b68:	3304      	adds	r3, #4
 8010b6a:	61bb      	str	r3, [r7, #24]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 8010b6c:	6a3b      	ldr	r3, [r7, #32]
 8010b6e:	2b3c      	cmp	r3, #60	; 0x3c
 8010b70:	d9b9      	bls.n	8010ae6 <JPEG_GetQuality+0x1a>
  }

  return (quality / 64UL);
 8010b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b74:	099b      	lsrs	r3, r3, #6
}
 8010b76:	4618      	mov	r0, r3
 8010b78:	372c      	adds	r7, #44	; 0x2c
 8010b7a:	46bd      	mov	sp, r7
 8010b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b80:	4770      	bx	lr
 8010b82:	bf00      	nop
 8010b84:	0802ce38 	.word	0x0802ce38

08010b88 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8010b88:	b580      	push	{r7, lr}
 8010b8a:	b084      	sub	sp, #16
 8010b8c:	af00      	add	r7, sp, #0
 8010b8e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	d101      	bne.n	8010b9a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8010b96:	2301      	movs	r3, #1
 8010b98:	e0bf      	b.n	8010d1a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8010ba0:	b2db      	uxtb	r3, r3
 8010ba2:	2b00      	cmp	r3, #0
 8010ba4:	d106      	bne.n	8010bb4 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	2200      	movs	r2, #0
 8010baa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8010bae:	6878      	ldr	r0, [r7, #4]
 8010bb0:	f7f0 fba2 	bl	80012f8 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	2202      	movs	r2, #2
 8010bb8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	681b      	ldr	r3, [r3, #0]
 8010bc0:	699a      	ldr	r2, [r3, #24]
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	681b      	ldr	r3, [r3, #0]
 8010bc6:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8010bca:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	681b      	ldr	r3, [r3, #0]
 8010bd0:	6999      	ldr	r1, [r3, #24]
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	685a      	ldr	r2, [r3, #4]
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	689b      	ldr	r3, [r3, #8]
 8010bda:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8010be0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	691b      	ldr	r3, [r3, #16]
 8010be6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	681b      	ldr	r3, [r3, #0]
 8010bec:	430a      	orrs	r2, r1
 8010bee:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	681b      	ldr	r3, [r3, #0]
 8010bf4:	6899      	ldr	r1, [r3, #8]
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	681a      	ldr	r2, [r3, #0]
 8010bfa:	4b4a      	ldr	r3, [pc, #296]	; (8010d24 <HAL_LTDC_Init+0x19c>)
 8010bfc:	400b      	ands	r3, r1
 8010bfe:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	695b      	ldr	r3, [r3, #20]
 8010c04:	041b      	lsls	r3, r3, #16
 8010c06:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	681b      	ldr	r3, [r3, #0]
 8010c0c:	6899      	ldr	r1, [r3, #8]
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	699a      	ldr	r2, [r3, #24]
 8010c12:	68fb      	ldr	r3, [r7, #12]
 8010c14:	431a      	orrs	r2, r3
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	681b      	ldr	r3, [r3, #0]
 8010c1a:	430a      	orrs	r2, r1
 8010c1c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	681b      	ldr	r3, [r3, #0]
 8010c22:	68d9      	ldr	r1, [r3, #12]
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	681a      	ldr	r2, [r3, #0]
 8010c28:	4b3e      	ldr	r3, [pc, #248]	; (8010d24 <HAL_LTDC_Init+0x19c>)
 8010c2a:	400b      	ands	r3, r1
 8010c2c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	69db      	ldr	r3, [r3, #28]
 8010c32:	041b      	lsls	r3, r3, #16
 8010c34:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	681b      	ldr	r3, [r3, #0]
 8010c3a:	68d9      	ldr	r1, [r3, #12]
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	6a1a      	ldr	r2, [r3, #32]
 8010c40:	68fb      	ldr	r3, [r7, #12]
 8010c42:	431a      	orrs	r2, r3
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	681b      	ldr	r3, [r3, #0]
 8010c48:	430a      	orrs	r2, r1
 8010c4a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	681b      	ldr	r3, [r3, #0]
 8010c50:	6919      	ldr	r1, [r3, #16]
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	681a      	ldr	r2, [r3, #0]
 8010c56:	4b33      	ldr	r3, [pc, #204]	; (8010d24 <HAL_LTDC_Init+0x19c>)
 8010c58:	400b      	ands	r3, r1
 8010c5a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c60:	041b      	lsls	r3, r3, #16
 8010c62:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	681b      	ldr	r3, [r3, #0]
 8010c68:	6919      	ldr	r1, [r3, #16]
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010c6e:	68fb      	ldr	r3, [r7, #12]
 8010c70:	431a      	orrs	r2, r3
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	681b      	ldr	r3, [r3, #0]
 8010c76:	430a      	orrs	r2, r1
 8010c78:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	681b      	ldr	r3, [r3, #0]
 8010c7e:	6959      	ldr	r1, [r3, #20]
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	681a      	ldr	r2, [r3, #0]
 8010c84:	4b27      	ldr	r3, [pc, #156]	; (8010d24 <HAL_LTDC_Init+0x19c>)
 8010c86:	400b      	ands	r3, r1
 8010c88:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c8e:	041b      	lsls	r3, r3, #16
 8010c90:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	681b      	ldr	r3, [r3, #0]
 8010c96:	6959      	ldr	r1, [r3, #20]
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010c9c:	68fb      	ldr	r3, [r7, #12]
 8010c9e:	431a      	orrs	r2, r3
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	681b      	ldr	r3, [r3, #0]
 8010ca4:	430a      	orrs	r2, r1
 8010ca6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8010cae:	021b      	lsls	r3, r3, #8
 8010cb0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8010cb8:	041b      	lsls	r3, r3, #16
 8010cba:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	681b      	ldr	r3, [r3, #0]
 8010cc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	681b      	ldr	r3, [r3, #0]
 8010cc6:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8010cca:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	681b      	ldr	r3, [r3, #0]
 8010cd0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8010cd2:	68ba      	ldr	r2, [r7, #8]
 8010cd4:	68fb      	ldr	r3, [r7, #12]
 8010cd6:	4313      	orrs	r3, r2
 8010cd8:	687a      	ldr	r2, [r7, #4]
 8010cda:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8010cde:	431a      	orrs	r2, r3
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	681b      	ldr	r3, [r3, #0]
 8010ce4:	430a      	orrs	r2, r1
 8010ce6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	681b      	ldr	r3, [r3, #0]
 8010cec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	681b      	ldr	r3, [r3, #0]
 8010cf2:	f042 0206 	orr.w	r2, r2, #6
 8010cf6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	681b      	ldr	r3, [r3, #0]
 8010cfc:	699a      	ldr	r2, [r3, #24]
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	681b      	ldr	r3, [r3, #0]
 8010d02:	f042 0201 	orr.w	r2, r2, #1
 8010d06:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	2200      	movs	r2, #0
 8010d0c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	2201      	movs	r2, #1
 8010d14:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8010d18:	2300      	movs	r3, #0
}
 8010d1a:	4618      	mov	r0, r3
 8010d1c:	3710      	adds	r7, #16
 8010d1e:	46bd      	mov	sp, r7
 8010d20:	bd80      	pop	{r7, pc}
 8010d22:	bf00      	nop
 8010d24:	f000f800 	.word	0xf000f800

08010d28 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8010d28:	b580      	push	{r7, lr}
 8010d2a:	b084      	sub	sp, #16
 8010d2c:	af00      	add	r7, sp, #0
 8010d2e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	681b      	ldr	r3, [r3, #0]
 8010d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d36:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	681b      	ldr	r3, [r3, #0]
 8010d3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010d3e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8010d40:	68fb      	ldr	r3, [r7, #12]
 8010d42:	f003 0304 	and.w	r3, r3, #4
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	d023      	beq.n	8010d92 <HAL_LTDC_IRQHandler+0x6a>
 8010d4a:	68bb      	ldr	r3, [r7, #8]
 8010d4c:	f003 0304 	and.w	r3, r3, #4
 8010d50:	2b00      	cmp	r3, #0
 8010d52:	d01e      	beq.n	8010d92 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	681b      	ldr	r3, [r3, #0]
 8010d58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	681b      	ldr	r3, [r3, #0]
 8010d5e:	f022 0204 	bic.w	r2, r2, #4
 8010d62:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	681b      	ldr	r3, [r3, #0]
 8010d68:	2204      	movs	r2, #4
 8010d6a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8010d72:	f043 0201 	orr.w	r2, r3, #1
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	2204      	movs	r2, #4
 8010d80:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	2200      	movs	r2, #0
 8010d88:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8010d8c:	6878      	ldr	r0, [r7, #4]
 8010d8e:	f000 f86f 	bl	8010e70 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8010d92:	68fb      	ldr	r3, [r7, #12]
 8010d94:	f003 0302 	and.w	r3, r3, #2
 8010d98:	2b00      	cmp	r3, #0
 8010d9a:	d023      	beq.n	8010de4 <HAL_LTDC_IRQHandler+0xbc>
 8010d9c:	68bb      	ldr	r3, [r7, #8]
 8010d9e:	f003 0302 	and.w	r3, r3, #2
 8010da2:	2b00      	cmp	r3, #0
 8010da4:	d01e      	beq.n	8010de4 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	681b      	ldr	r3, [r3, #0]
 8010daa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	681b      	ldr	r3, [r3, #0]
 8010db0:	f022 0202 	bic.w	r2, r2, #2
 8010db4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	681b      	ldr	r3, [r3, #0]
 8010dba:	2202      	movs	r2, #2
 8010dbc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8010dc4:	f043 0202 	orr.w	r2, r3, #2
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	2204      	movs	r2, #4
 8010dd2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	2200      	movs	r2, #0
 8010dda:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8010dde:	6878      	ldr	r0, [r7, #4]
 8010de0:	f000 f846 	bl	8010e70 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8010de4:	68fb      	ldr	r3, [r7, #12]
 8010de6:	f003 0301 	and.w	r3, r3, #1
 8010dea:	2b00      	cmp	r3, #0
 8010dec:	d01b      	beq.n	8010e26 <HAL_LTDC_IRQHandler+0xfe>
 8010dee:	68bb      	ldr	r3, [r7, #8]
 8010df0:	f003 0301 	and.w	r3, r3, #1
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	d016      	beq.n	8010e26 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	681b      	ldr	r3, [r3, #0]
 8010dfc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	681b      	ldr	r3, [r3, #0]
 8010e02:	f022 0201 	bic.w	r2, r2, #1
 8010e06:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	681b      	ldr	r3, [r3, #0]
 8010e0c:	2201      	movs	r2, #1
 8010e0e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	2201      	movs	r2, #1
 8010e14:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	2200      	movs	r2, #0
 8010e1c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8010e20:	6878      	ldr	r0, [r7, #4]
 8010e22:	f7f4 ff11 	bl	8005c48 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8010e26:	68fb      	ldr	r3, [r7, #12]
 8010e28:	f003 0308 	and.w	r3, r3, #8
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	d01b      	beq.n	8010e68 <HAL_LTDC_IRQHandler+0x140>
 8010e30:	68bb      	ldr	r3, [r7, #8]
 8010e32:	f003 0308 	and.w	r3, r3, #8
 8010e36:	2b00      	cmp	r3, #0
 8010e38:	d016      	beq.n	8010e68 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	681b      	ldr	r3, [r3, #0]
 8010e3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	681b      	ldr	r3, [r3, #0]
 8010e44:	f022 0208 	bic.w	r2, r2, #8
 8010e48:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	681b      	ldr	r3, [r3, #0]
 8010e4e:	2208      	movs	r2, #8
 8010e50:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	2201      	movs	r2, #1
 8010e56:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	2200      	movs	r2, #0
 8010e5e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8010e62:	6878      	ldr	r0, [r7, #4]
 8010e64:	f000 f80e 	bl	8010e84 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8010e68:	bf00      	nop
 8010e6a:	3710      	adds	r7, #16
 8010e6c:	46bd      	mov	sp, r7
 8010e6e:	bd80      	pop	{r7, pc}

08010e70 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8010e70:	b480      	push	{r7}
 8010e72:	b083      	sub	sp, #12
 8010e74:	af00      	add	r7, sp, #0
 8010e76:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8010e78:	bf00      	nop
 8010e7a:	370c      	adds	r7, #12
 8010e7c:	46bd      	mov	sp, r7
 8010e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e82:	4770      	bx	lr

08010e84 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8010e84:	b480      	push	{r7}
 8010e86:	b083      	sub	sp, #12
 8010e88:	af00      	add	r7, sp, #0
 8010e8a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8010e8c:	bf00      	nop
 8010e8e:	370c      	adds	r7, #12
 8010e90:	46bd      	mov	sp, r7
 8010e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e96:	4770      	bx	lr

08010e98 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8010e98:	b5b0      	push	{r4, r5, r7, lr}
 8010e9a:	b084      	sub	sp, #16
 8010e9c:	af00      	add	r7, sp, #0
 8010e9e:	60f8      	str	r0, [r7, #12]
 8010ea0:	60b9      	str	r1, [r7, #8]
 8010ea2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8010ea4:	68fb      	ldr	r3, [r7, #12]
 8010ea6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8010eaa:	2b01      	cmp	r3, #1
 8010eac:	d101      	bne.n	8010eb2 <HAL_LTDC_ConfigLayer+0x1a>
 8010eae:	2302      	movs	r3, #2
 8010eb0:	e02c      	b.n	8010f0c <HAL_LTDC_ConfigLayer+0x74>
 8010eb2:	68fb      	ldr	r3, [r7, #12]
 8010eb4:	2201      	movs	r2, #1
 8010eb6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8010eba:	68fb      	ldr	r3, [r7, #12]
 8010ebc:	2202      	movs	r2, #2
 8010ebe:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8010ec2:	68fa      	ldr	r2, [r7, #12]
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	2134      	movs	r1, #52	; 0x34
 8010ec8:	fb01 f303 	mul.w	r3, r1, r3
 8010ecc:	4413      	add	r3, r2
 8010ece:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8010ed2:	68bb      	ldr	r3, [r7, #8]
 8010ed4:	4614      	mov	r4, r2
 8010ed6:	461d      	mov	r5, r3
 8010ed8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010eda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010edc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010ede:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010ee0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010ee2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010ee4:	682b      	ldr	r3, [r5, #0]
 8010ee6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8010ee8:	687a      	ldr	r2, [r7, #4]
 8010eea:	68b9      	ldr	r1, [r7, #8]
 8010eec:	68f8      	ldr	r0, [r7, #12]
 8010eee:	f000 f849 	bl	8010f84 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8010ef2:	68fb      	ldr	r3, [r7, #12]
 8010ef4:	681b      	ldr	r3, [r3, #0]
 8010ef6:	2201      	movs	r2, #1
 8010ef8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8010efa:	68fb      	ldr	r3, [r7, #12]
 8010efc:	2201      	movs	r2, #1
 8010efe:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8010f02:	68fb      	ldr	r3, [r7, #12]
 8010f04:	2200      	movs	r2, #0
 8010f06:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8010f0a:	2300      	movs	r3, #0
}
 8010f0c:	4618      	mov	r0, r3
 8010f0e:	3710      	adds	r7, #16
 8010f10:	46bd      	mov	sp, r7
 8010f12:	bdb0      	pop	{r4, r5, r7, pc}

08010f14 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 8010f14:	b480      	push	{r7}
 8010f16:	b083      	sub	sp, #12
 8010f18:	af00      	add	r7, sp, #0
 8010f1a:	6078      	str	r0, [r7, #4]
 8010f1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8010f24:	2b01      	cmp	r3, #1
 8010f26:	d101      	bne.n	8010f2c <HAL_LTDC_ProgramLineEvent+0x18>
 8010f28:	2302      	movs	r3, #2
 8010f2a:	e023      	b.n	8010f74 <HAL_LTDC_ProgramLineEvent+0x60>
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	2201      	movs	r2, #1
 8010f30:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	2202      	movs	r2, #2
 8010f38:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	681b      	ldr	r3, [r3, #0]
 8010f40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	681b      	ldr	r3, [r3, #0]
 8010f46:	f022 0201 	bic.w	r2, r2, #1
 8010f4a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 8010f4c:	4a0c      	ldr	r2, [pc, #48]	; (8010f80 <HAL_LTDC_ProgramLineEvent+0x6c>)
 8010f4e:	683b      	ldr	r3, [r7, #0]
 8010f50:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	681b      	ldr	r3, [r3, #0]
 8010f56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	681b      	ldr	r3, [r3, #0]
 8010f5c:	f042 0201 	orr.w	r2, r2, #1
 8010f60:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	2201      	movs	r2, #1
 8010f66:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	2200      	movs	r2, #0
 8010f6e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8010f72:	2300      	movs	r3, #0
}
 8010f74:	4618      	mov	r0, r3
 8010f76:	370c      	adds	r7, #12
 8010f78:	46bd      	mov	sp, r7
 8010f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f7e:	4770      	bx	lr
 8010f80:	50001000 	.word	0x50001000

08010f84 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8010f84:	b480      	push	{r7}
 8010f86:	b089      	sub	sp, #36	; 0x24
 8010f88:	af00      	add	r7, sp, #0
 8010f8a:	60f8      	str	r0, [r7, #12]
 8010f8c:	60b9      	str	r1, [r7, #8]
 8010f8e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8010f90:	68bb      	ldr	r3, [r7, #8]
 8010f92:	685a      	ldr	r2, [r3, #4]
 8010f94:	68fb      	ldr	r3, [r7, #12]
 8010f96:	681b      	ldr	r3, [r3, #0]
 8010f98:	68db      	ldr	r3, [r3, #12]
 8010f9a:	0c1b      	lsrs	r3, r3, #16
 8010f9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010fa0:	4413      	add	r3, r2
 8010fa2:	041b      	lsls	r3, r3, #16
 8010fa4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8010fa6:	68fb      	ldr	r3, [r7, #12]
 8010fa8:	681b      	ldr	r3, [r3, #0]
 8010faa:	461a      	mov	r2, r3
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	01db      	lsls	r3, r3, #7
 8010fb0:	4413      	add	r3, r2
 8010fb2:	3384      	adds	r3, #132	; 0x84
 8010fb4:	685b      	ldr	r3, [r3, #4]
 8010fb6:	68fa      	ldr	r2, [r7, #12]
 8010fb8:	6812      	ldr	r2, [r2, #0]
 8010fba:	4611      	mov	r1, r2
 8010fbc:	687a      	ldr	r2, [r7, #4]
 8010fbe:	01d2      	lsls	r2, r2, #7
 8010fc0:	440a      	add	r2, r1
 8010fc2:	3284      	adds	r2, #132	; 0x84
 8010fc4:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8010fc8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8010fca:	68bb      	ldr	r3, [r7, #8]
 8010fcc:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8010fce:	68fb      	ldr	r3, [r7, #12]
 8010fd0:	681b      	ldr	r3, [r3, #0]
 8010fd2:	68db      	ldr	r3, [r3, #12]
 8010fd4:	0c1b      	lsrs	r3, r3, #16
 8010fd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8010fda:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8010fdc:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8010fde:	68fb      	ldr	r3, [r7, #12]
 8010fe0:	681b      	ldr	r3, [r3, #0]
 8010fe2:	4619      	mov	r1, r3
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	01db      	lsls	r3, r3, #7
 8010fe8:	440b      	add	r3, r1
 8010fea:	3384      	adds	r3, #132	; 0x84
 8010fec:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8010fee:	69fb      	ldr	r3, [r7, #28]
 8010ff0:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8010ff2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8010ff4:	68bb      	ldr	r3, [r7, #8]
 8010ff6:	68da      	ldr	r2, [r3, #12]
 8010ff8:	68fb      	ldr	r3, [r7, #12]
 8010ffa:	681b      	ldr	r3, [r3, #0]
 8010ffc:	68db      	ldr	r3, [r3, #12]
 8010ffe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8011002:	4413      	add	r3, r2
 8011004:	041b      	lsls	r3, r3, #16
 8011006:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8011008:	68fb      	ldr	r3, [r7, #12]
 801100a:	681b      	ldr	r3, [r3, #0]
 801100c:	461a      	mov	r2, r3
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	01db      	lsls	r3, r3, #7
 8011012:	4413      	add	r3, r2
 8011014:	3384      	adds	r3, #132	; 0x84
 8011016:	689b      	ldr	r3, [r3, #8]
 8011018:	68fa      	ldr	r2, [r7, #12]
 801101a:	6812      	ldr	r2, [r2, #0]
 801101c:	4611      	mov	r1, r2
 801101e:	687a      	ldr	r2, [r7, #4]
 8011020:	01d2      	lsls	r2, r2, #7
 8011022:	440a      	add	r2, r1
 8011024:	3284      	adds	r2, #132	; 0x84
 8011026:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 801102a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 801102c:	68bb      	ldr	r3, [r7, #8]
 801102e:	689a      	ldr	r2, [r3, #8]
 8011030:	68fb      	ldr	r3, [r7, #12]
 8011032:	681b      	ldr	r3, [r3, #0]
 8011034:	68db      	ldr	r3, [r3, #12]
 8011036:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801103a:	4413      	add	r3, r2
 801103c:	1c5a      	adds	r2, r3, #1
 801103e:	68fb      	ldr	r3, [r7, #12]
 8011040:	681b      	ldr	r3, [r3, #0]
 8011042:	4619      	mov	r1, r3
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	01db      	lsls	r3, r3, #7
 8011048:	440b      	add	r3, r1
 801104a:	3384      	adds	r3, #132	; 0x84
 801104c:	4619      	mov	r1, r3
 801104e:	69fb      	ldr	r3, [r7, #28]
 8011050:	4313      	orrs	r3, r2
 8011052:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8011054:	68fb      	ldr	r3, [r7, #12]
 8011056:	681b      	ldr	r3, [r3, #0]
 8011058:	461a      	mov	r2, r3
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	01db      	lsls	r3, r3, #7
 801105e:	4413      	add	r3, r2
 8011060:	3384      	adds	r3, #132	; 0x84
 8011062:	691b      	ldr	r3, [r3, #16]
 8011064:	68fa      	ldr	r2, [r7, #12]
 8011066:	6812      	ldr	r2, [r2, #0]
 8011068:	4611      	mov	r1, r2
 801106a:	687a      	ldr	r2, [r7, #4]
 801106c:	01d2      	lsls	r2, r2, #7
 801106e:	440a      	add	r2, r1
 8011070:	3284      	adds	r2, #132	; 0x84
 8011072:	f023 0307 	bic.w	r3, r3, #7
 8011076:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8011078:	68fb      	ldr	r3, [r7, #12]
 801107a:	681b      	ldr	r3, [r3, #0]
 801107c:	461a      	mov	r2, r3
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	01db      	lsls	r3, r3, #7
 8011082:	4413      	add	r3, r2
 8011084:	3384      	adds	r3, #132	; 0x84
 8011086:	461a      	mov	r2, r3
 8011088:	68bb      	ldr	r3, [r7, #8]
 801108a:	691b      	ldr	r3, [r3, #16]
 801108c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 801108e:	68bb      	ldr	r3, [r7, #8]
 8011090:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011094:	021b      	lsls	r3, r3, #8
 8011096:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8011098:	68bb      	ldr	r3, [r7, #8]
 801109a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 801109e:	041b      	lsls	r3, r3, #16
 80110a0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80110a2:	68bb      	ldr	r3, [r7, #8]
 80110a4:	699b      	ldr	r3, [r3, #24]
 80110a6:	061b      	lsls	r3, r3, #24
 80110a8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80110aa:	68fb      	ldr	r3, [r7, #12]
 80110ac:	681b      	ldr	r3, [r3, #0]
 80110ae:	461a      	mov	r2, r3
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	01db      	lsls	r3, r3, #7
 80110b4:	4413      	add	r3, r2
 80110b6:	3384      	adds	r3, #132	; 0x84
 80110b8:	699b      	ldr	r3, [r3, #24]
 80110ba:	68fb      	ldr	r3, [r7, #12]
 80110bc:	681b      	ldr	r3, [r3, #0]
 80110be:	461a      	mov	r2, r3
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	01db      	lsls	r3, r3, #7
 80110c4:	4413      	add	r3, r2
 80110c6:	3384      	adds	r3, #132	; 0x84
 80110c8:	461a      	mov	r2, r3
 80110ca:	2300      	movs	r3, #0
 80110cc:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80110ce:	68bb      	ldr	r3, [r7, #8]
 80110d0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80110d4:	461a      	mov	r2, r3
 80110d6:	69fb      	ldr	r3, [r7, #28]
 80110d8:	431a      	orrs	r2, r3
 80110da:	69bb      	ldr	r3, [r7, #24]
 80110dc:	431a      	orrs	r2, r3
 80110de:	68fb      	ldr	r3, [r7, #12]
 80110e0:	681b      	ldr	r3, [r3, #0]
 80110e2:	4619      	mov	r1, r3
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	01db      	lsls	r3, r3, #7
 80110e8:	440b      	add	r3, r1
 80110ea:	3384      	adds	r3, #132	; 0x84
 80110ec:	4619      	mov	r1, r3
 80110ee:	697b      	ldr	r3, [r7, #20]
 80110f0:	4313      	orrs	r3, r2
 80110f2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80110f4:	68fb      	ldr	r3, [r7, #12]
 80110f6:	681b      	ldr	r3, [r3, #0]
 80110f8:	461a      	mov	r2, r3
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	01db      	lsls	r3, r3, #7
 80110fe:	4413      	add	r3, r2
 8011100:	3384      	adds	r3, #132	; 0x84
 8011102:	695b      	ldr	r3, [r3, #20]
 8011104:	68fa      	ldr	r2, [r7, #12]
 8011106:	6812      	ldr	r2, [r2, #0]
 8011108:	4611      	mov	r1, r2
 801110a:	687a      	ldr	r2, [r7, #4]
 801110c:	01d2      	lsls	r2, r2, #7
 801110e:	440a      	add	r2, r1
 8011110:	3284      	adds	r2, #132	; 0x84
 8011112:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8011116:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8011118:	68fb      	ldr	r3, [r7, #12]
 801111a:	681b      	ldr	r3, [r3, #0]
 801111c:	461a      	mov	r2, r3
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	01db      	lsls	r3, r3, #7
 8011122:	4413      	add	r3, r2
 8011124:	3384      	adds	r3, #132	; 0x84
 8011126:	461a      	mov	r2, r3
 8011128:	68bb      	ldr	r3, [r7, #8]
 801112a:	695b      	ldr	r3, [r3, #20]
 801112c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 801112e:	68fb      	ldr	r3, [r7, #12]
 8011130:	681b      	ldr	r3, [r3, #0]
 8011132:	461a      	mov	r2, r3
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	01db      	lsls	r3, r3, #7
 8011138:	4413      	add	r3, r2
 801113a:	3384      	adds	r3, #132	; 0x84
 801113c:	69da      	ldr	r2, [r3, #28]
 801113e:	68fb      	ldr	r3, [r7, #12]
 8011140:	681b      	ldr	r3, [r3, #0]
 8011142:	4619      	mov	r1, r3
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	01db      	lsls	r3, r3, #7
 8011148:	440b      	add	r3, r1
 801114a:	3384      	adds	r3, #132	; 0x84
 801114c:	4619      	mov	r1, r3
 801114e:	4b58      	ldr	r3, [pc, #352]	; (80112b0 <LTDC_SetConfig+0x32c>)
 8011150:	4013      	ands	r3, r2
 8011152:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8011154:	68bb      	ldr	r3, [r7, #8]
 8011156:	69da      	ldr	r2, [r3, #28]
 8011158:	68bb      	ldr	r3, [r7, #8]
 801115a:	6a1b      	ldr	r3, [r3, #32]
 801115c:	68f9      	ldr	r1, [r7, #12]
 801115e:	6809      	ldr	r1, [r1, #0]
 8011160:	4608      	mov	r0, r1
 8011162:	6879      	ldr	r1, [r7, #4]
 8011164:	01c9      	lsls	r1, r1, #7
 8011166:	4401      	add	r1, r0
 8011168:	3184      	adds	r1, #132	; 0x84
 801116a:	4313      	orrs	r3, r2
 801116c:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 801116e:	68fb      	ldr	r3, [r7, #12]
 8011170:	681b      	ldr	r3, [r3, #0]
 8011172:	461a      	mov	r2, r3
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	01db      	lsls	r3, r3, #7
 8011178:	4413      	add	r3, r2
 801117a:	3384      	adds	r3, #132	; 0x84
 801117c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801117e:	68fb      	ldr	r3, [r7, #12]
 8011180:	681b      	ldr	r3, [r3, #0]
 8011182:	461a      	mov	r2, r3
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	01db      	lsls	r3, r3, #7
 8011188:	4413      	add	r3, r2
 801118a:	3384      	adds	r3, #132	; 0x84
 801118c:	461a      	mov	r2, r3
 801118e:	2300      	movs	r3, #0
 8011190:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8011192:	68fb      	ldr	r3, [r7, #12]
 8011194:	681b      	ldr	r3, [r3, #0]
 8011196:	461a      	mov	r2, r3
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	01db      	lsls	r3, r3, #7
 801119c:	4413      	add	r3, r2
 801119e:	3384      	adds	r3, #132	; 0x84
 80111a0:	461a      	mov	r2, r3
 80111a2:	68bb      	ldr	r3, [r7, #8]
 80111a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80111a6:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80111a8:	68bb      	ldr	r3, [r7, #8]
 80111aa:	691b      	ldr	r3, [r3, #16]
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	d102      	bne.n	80111b6 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 80111b0:	2304      	movs	r3, #4
 80111b2:	61fb      	str	r3, [r7, #28]
 80111b4:	e01b      	b.n	80111ee <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80111b6:	68bb      	ldr	r3, [r7, #8]
 80111b8:	691b      	ldr	r3, [r3, #16]
 80111ba:	2b01      	cmp	r3, #1
 80111bc:	d102      	bne.n	80111c4 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 80111be:	2303      	movs	r3, #3
 80111c0:	61fb      	str	r3, [r7, #28]
 80111c2:	e014      	b.n	80111ee <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80111c4:	68bb      	ldr	r3, [r7, #8]
 80111c6:	691b      	ldr	r3, [r3, #16]
 80111c8:	2b04      	cmp	r3, #4
 80111ca:	d00b      	beq.n	80111e4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80111cc:	68bb      	ldr	r3, [r7, #8]
 80111ce:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80111d0:	2b02      	cmp	r3, #2
 80111d2:	d007      	beq.n	80111e4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80111d4:	68bb      	ldr	r3, [r7, #8]
 80111d6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80111d8:	2b03      	cmp	r3, #3
 80111da:	d003      	beq.n	80111e4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80111dc:	68bb      	ldr	r3, [r7, #8]
 80111de:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80111e0:	2b07      	cmp	r3, #7
 80111e2:	d102      	bne.n	80111ea <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80111e4:	2302      	movs	r3, #2
 80111e6:	61fb      	str	r3, [r7, #28]
 80111e8:	e001      	b.n	80111ee <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80111ea:	2301      	movs	r3, #1
 80111ec:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80111ee:	68fb      	ldr	r3, [r7, #12]
 80111f0:	681b      	ldr	r3, [r3, #0]
 80111f2:	461a      	mov	r2, r3
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	01db      	lsls	r3, r3, #7
 80111f8:	4413      	add	r3, r2
 80111fa:	3384      	adds	r3, #132	; 0x84
 80111fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80111fe:	68fa      	ldr	r2, [r7, #12]
 8011200:	6812      	ldr	r2, [r2, #0]
 8011202:	4611      	mov	r1, r2
 8011204:	687a      	ldr	r2, [r7, #4]
 8011206:	01d2      	lsls	r2, r2, #7
 8011208:	440a      	add	r2, r1
 801120a:	3284      	adds	r2, #132	; 0x84
 801120c:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8011210:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8011212:	68bb      	ldr	r3, [r7, #8]
 8011214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011216:	69fa      	ldr	r2, [r7, #28]
 8011218:	fb02 f303 	mul.w	r3, r2, r3
 801121c:	041a      	lsls	r2, r3, #16
 801121e:	68bb      	ldr	r3, [r7, #8]
 8011220:	6859      	ldr	r1, [r3, #4]
 8011222:	68bb      	ldr	r3, [r7, #8]
 8011224:	681b      	ldr	r3, [r3, #0]
 8011226:	1acb      	subs	r3, r1, r3
 8011228:	69f9      	ldr	r1, [r7, #28]
 801122a:	fb01 f303 	mul.w	r3, r1, r3
 801122e:	3307      	adds	r3, #7
 8011230:	68f9      	ldr	r1, [r7, #12]
 8011232:	6809      	ldr	r1, [r1, #0]
 8011234:	4608      	mov	r0, r1
 8011236:	6879      	ldr	r1, [r7, #4]
 8011238:	01c9      	lsls	r1, r1, #7
 801123a:	4401      	add	r1, r0
 801123c:	3184      	adds	r1, #132	; 0x84
 801123e:	4313      	orrs	r3, r2
 8011240:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8011242:	68fb      	ldr	r3, [r7, #12]
 8011244:	681b      	ldr	r3, [r3, #0]
 8011246:	461a      	mov	r2, r3
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	01db      	lsls	r3, r3, #7
 801124c:	4413      	add	r3, r2
 801124e:	3384      	adds	r3, #132	; 0x84
 8011250:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011252:	68fb      	ldr	r3, [r7, #12]
 8011254:	681b      	ldr	r3, [r3, #0]
 8011256:	4619      	mov	r1, r3
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	01db      	lsls	r3, r3, #7
 801125c:	440b      	add	r3, r1
 801125e:	3384      	adds	r3, #132	; 0x84
 8011260:	4619      	mov	r1, r3
 8011262:	4b14      	ldr	r3, [pc, #80]	; (80112b4 <LTDC_SetConfig+0x330>)
 8011264:	4013      	ands	r3, r2
 8011266:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8011268:	68fb      	ldr	r3, [r7, #12]
 801126a:	681b      	ldr	r3, [r3, #0]
 801126c:	461a      	mov	r2, r3
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	01db      	lsls	r3, r3, #7
 8011272:	4413      	add	r3, r2
 8011274:	3384      	adds	r3, #132	; 0x84
 8011276:	461a      	mov	r2, r3
 8011278:	68bb      	ldr	r3, [r7, #8]
 801127a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801127c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 801127e:	68fb      	ldr	r3, [r7, #12]
 8011280:	681b      	ldr	r3, [r3, #0]
 8011282:	461a      	mov	r2, r3
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	01db      	lsls	r3, r3, #7
 8011288:	4413      	add	r3, r2
 801128a:	3384      	adds	r3, #132	; 0x84
 801128c:	681b      	ldr	r3, [r3, #0]
 801128e:	68fa      	ldr	r2, [r7, #12]
 8011290:	6812      	ldr	r2, [r2, #0]
 8011292:	4611      	mov	r1, r2
 8011294:	687a      	ldr	r2, [r7, #4]
 8011296:	01d2      	lsls	r2, r2, #7
 8011298:	440a      	add	r2, r1
 801129a:	3284      	adds	r2, #132	; 0x84
 801129c:	f043 0301 	orr.w	r3, r3, #1
 80112a0:	6013      	str	r3, [r2, #0]
}
 80112a2:	bf00      	nop
 80112a4:	3724      	adds	r7, #36	; 0x24
 80112a6:	46bd      	mov	sp, r7
 80112a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112ac:	4770      	bx	lr
 80112ae:	bf00      	nop
 80112b0:	fffff8f8 	.word	0xfffff8f8
 80112b4:	fffff800 	.word	0xfffff800

080112b8 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 80112b8:	b580      	push	{r7, lr}
 80112ba:	b084      	sub	sp, #16
 80112bc:	af00      	add	r7, sp, #0
 80112be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80112c0:	f7fb fe9e 	bl	800d000 <HAL_GetTick>
 80112c4:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	d101      	bne.n	80112d0 <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 80112cc:	2301      	movs	r3, #1
 80112ce:	e03b      	b.n	8011348 <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	2200      	movs	r2, #0
 80112d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	2202      	movs	r2, #2
 80112dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	681b      	ldr	r3, [r3, #0]
 80112e4:	68da      	ldr	r2, [r3, #12]
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	681b      	ldr	r3, [r3, #0]
 80112ea:	f022 0201 	bic.w	r2, r2, #1
 80112ee:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 80112f0:	e00f      	b.n	8011312 <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 80112f2:	f7fb fe85 	bl	800d000 <HAL_GetTick>
 80112f6:	4602      	mov	r2, r0
 80112f8:	68fb      	ldr	r3, [r7, #12]
 80112fa:	1ad3      	subs	r3, r2, r3
 80112fc:	2b05      	cmp	r3, #5
 80112fe:	d908      	bls.n	8011312 <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	2240      	movs	r2, #64	; 0x40
 8011304:	669a      	str	r2, [r3, #104]	; 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	2203      	movs	r2, #3
 801130a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      return HAL_ERROR;
 801130e:	2301      	movs	r3, #1
 8011310:	e01a      	b.n	8011348 <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	681b      	ldr	r3, [r3, #0]
 8011316:	68db      	ldr	r3, [r3, #12]
 8011318:	f003 0301 	and.w	r3, r3, #1
 801131c:	2b00      	cmp	r3, #0
 801131e:	d1e8      	bne.n	80112f2 <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 8011320:	6878      	ldr	r0, [r7, #4]
 8011322:	f000 fb2f 	bl	8011984 <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	2200      	movs	r2, #0
 801132a:	65da      	str	r2, [r3, #92]	; 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	2200      	movs	r2, #0
 8011330:	661a      	str	r2, [r3, #96]	; 0x60
  hmdma->LinkedListNodeCounter  = 0;
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	2200      	movs	r2, #0
 8011336:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	2200      	movs	r2, #0
 801133c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	2201      	movs	r2, #1
 8011342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8011346:	2300      	movs	r3, #0
}
 8011348:	4618      	mov	r0, r3
 801134a:	3710      	adds	r7, #16
 801134c:	46bd      	mov	sp, r7
 801134e:	bd80      	pop	{r7, pc}

08011350 <HAL_MDMA_ConfigPostRequestMask>:
  * @param  MaskData:    specifies the value to be written to MaskAddress after a request is served.
  *                      MaskAddress and MaskData could be used to automatically clear a peripheral flag when the request is served.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_ConfigPostRequestMask(MDMA_HandleTypeDef *hmdma, uint32_t MaskAddress, uint32_t MaskData)
{
 8011350:	b480      	push	{r7}
 8011352:	b087      	sub	sp, #28
 8011354:	af00      	add	r7, sp, #0
 8011356:	60f8      	str	r0, [r7, #12]
 8011358:	60b9      	str	r1, [r7, #8]
 801135a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 801135c:	2300      	movs	r3, #0
 801135e:	75fb      	strb	r3, [r7, #23]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8011360:	68fb      	ldr	r3, [r7, #12]
 8011362:	2b00      	cmp	r3, #0
 8011364:	d101      	bne.n	801136a <HAL_MDMA_ConfigPostRequestMask+0x1a>
  {
    return HAL_ERROR;
 8011366:	2301      	movs	r3, #1
 8011368:	e03e      	b.n	80113e8 <HAL_MDMA_ConfigPostRequestMask+0x98>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 801136a:	68fb      	ldr	r3, [r7, #12]
 801136c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011370:	2b01      	cmp	r3, #1
 8011372:	d101      	bne.n	8011378 <HAL_MDMA_ConfigPostRequestMask+0x28>
 8011374:	2302      	movs	r3, #2
 8011376:	e037      	b.n	80113e8 <HAL_MDMA_ConfigPostRequestMask+0x98>
 8011378:	68fb      	ldr	r3, [r7, #12]
 801137a:	2201      	movs	r2, #1
 801137c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 8011380:	68fb      	ldr	r3, [r7, #12]
 8011382:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011386:	b2db      	uxtb	r3, r3
 8011388:	2b01      	cmp	r3, #1
 801138a:	d126      	bne.n	80113da <HAL_MDMA_ConfigPostRequestMask+0x8a>
  {
    /* if HW request set Post Request MaskAddress and MaskData,  */
    if((hmdma->Instance->CTCR & MDMA_CTCR_SWRM) == 0U)
 801138c:	68fb      	ldr	r3, [r7, #12]
 801138e:	681b      	ldr	r3, [r3, #0]
 8011390:	691b      	ldr	r3, [r3, #16]
 8011392:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8011396:	2b00      	cmp	r3, #0
 8011398:	d11c      	bne.n	80113d4 <HAL_MDMA_ConfigPostRequestMask+0x84>
    {
      /* Set the HW request clear Mask and Data */
      hmdma->Instance->CMAR = MaskAddress;
 801139a:	68fb      	ldr	r3, [r7, #12]
 801139c:	681b      	ldr	r3, [r3, #0]
 801139e:	68ba      	ldr	r2, [r7, #8]
 80113a0:	631a      	str	r2, [r3, #48]	; 0x30
      hmdma->Instance->CMDR = MaskData;
 80113a2:	68fb      	ldr	r3, [r7, #12]
 80113a4:	681b      	ldr	r3, [r3, #0]
 80113a6:	687a      	ldr	r2, [r7, #4]
 80113a8:	635a      	str	r2, [r3, #52]	; 0x34
      -If the request is done by SW : BWM could be set to 1 or 0.
      -If the request is done by a peripheral :
         If mask address not set (0) => BWM must be set to 0
         If mask address set (different than 0) => BWM could be set to 1 or 0
      */
      if(MaskAddress == 0U)
 80113aa:	68bb      	ldr	r3, [r7, #8]
 80113ac:	2b00      	cmp	r3, #0
 80113ae:	d108      	bne.n	80113c2 <HAL_MDMA_ConfigPostRequestMask+0x72>
      {
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 80113b0:	68fb      	ldr	r3, [r7, #12]
 80113b2:	681b      	ldr	r3, [r3, #0]
 80113b4:	691a      	ldr	r2, [r3, #16]
 80113b6:	68fb      	ldr	r3, [r7, #12]
 80113b8:	681b      	ldr	r3, [r3, #0]
 80113ba:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80113be:	611a      	str	r2, [r3, #16]
 80113c0:	e00d      	b.n	80113de <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
      else
      {
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
 80113c2:	68fb      	ldr	r3, [r7, #12]
 80113c4:	681b      	ldr	r3, [r3, #0]
 80113c6:	691a      	ldr	r2, [r3, #16]
 80113c8:	68fb      	ldr	r3, [r7, #12]
 80113ca:	681b      	ldr	r3, [r3, #0]
 80113cc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80113d0:	611a      	str	r2, [r3, #16]
 80113d2:	e004      	b.n	80113de <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
    }
    else
    {
      /* Return error status */
      status =  HAL_ERROR;
 80113d4:	2301      	movs	r3, #1
 80113d6:	75fb      	strb	r3, [r7, #23]
 80113d8:	e001      	b.n	80113de <HAL_MDMA_ConfigPostRequestMask+0x8e>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 80113da:	2301      	movs	r3, #1
 80113dc:	75fb      	strb	r3, [r7, #23]
  }
  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 80113de:	68fb      	ldr	r3, [r7, #12]
 80113e0:	2200      	movs	r2, #0
 80113e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80113e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80113e8:	4618      	mov	r0, r3
 80113ea:	371c      	adds	r7, #28
 80113ec:	46bd      	mov	sp, r7
 80113ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113f2:	4770      	bx	lr

080113f4 <HAL_MDMA_Start_IT>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount      : The number of a blocks to be transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Start_IT(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
 80113f4:	b580      	push	{r7, lr}
 80113f6:	b086      	sub	sp, #24
 80113f8:	af02      	add	r7, sp, #8
 80113fa:	60f8      	str	r0, [r7, #12]
 80113fc:	60b9      	str	r1, [r7, #8]
 80113fe:	607a      	str	r2, [r7, #4]
 8011400:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_MDMA_TRANSFER_LENGTH(BlockDataLength));
  assert_param(IS_MDMA_BLOCK_COUNT(BlockCount));

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8011402:	68fb      	ldr	r3, [r7, #12]
 8011404:	2b00      	cmp	r3, #0
 8011406:	d101      	bne.n	801140c <HAL_MDMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 8011408:	2301      	movs	r3, #1
 801140a:	e070      	b.n	80114ee <HAL_MDMA_Start_IT+0xfa>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 801140c:	68fb      	ldr	r3, [r7, #12]
 801140e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011412:	2b01      	cmp	r3, #1
 8011414:	d101      	bne.n	801141a <HAL_MDMA_Start_IT+0x26>
 8011416:	2302      	movs	r3, #2
 8011418:	e069      	b.n	80114ee <HAL_MDMA_Start_IT+0xfa>
 801141a:	68fb      	ldr	r3, [r7, #12]
 801141c:	2201      	movs	r2, #1
 801141e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 8011422:	68fb      	ldr	r3, [r7, #12]
 8011424:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011428:	b2db      	uxtb	r3, r3
 801142a:	2b01      	cmp	r3, #1
 801142c:	d158      	bne.n	80114e0 <HAL_MDMA_Start_IT+0xec>
  {
    /* Change MDMA peripheral state */
    hmdma->State = HAL_MDMA_STATE_BUSY;
 801142e:	68fb      	ldr	r3, [r7, #12]
 8011430:	2202      	movs	r2, #2
 8011432:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Initialize the error code */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8011436:	68fb      	ldr	r3, [r7, #12]
 8011438:	2200      	movs	r2, #0
 801143a:	669a      	str	r2, [r3, #104]	; 0x68

    /* Disable the peripheral */
    __HAL_MDMA_DISABLE(hmdma);
 801143c:	68fb      	ldr	r3, [r7, #12]
 801143e:	681b      	ldr	r3, [r3, #0]
 8011440:	68da      	ldr	r2, [r3, #12]
 8011442:	68fb      	ldr	r3, [r7, #12]
 8011444:	681b      	ldr	r3, [r3, #0]
 8011446:	f022 0201 	bic.w	r2, r2, #1
 801144a:	60da      	str	r2, [r3, #12]

    /* Configure the source, destination address and the data length */
    MDMA_SetConfig(hmdma, SrcAddress, DstAddress, BlockDataLength, BlockCount);
 801144c:	69bb      	ldr	r3, [r7, #24]
 801144e:	9300      	str	r3, [sp, #0]
 8011450:	683b      	ldr	r3, [r7, #0]
 8011452:	687a      	ldr	r2, [r7, #4]
 8011454:	68b9      	ldr	r1, [r7, #8]
 8011456:	68f8      	ldr	r0, [r7, #12]
 8011458:	f000 fa24 	bl	80118a4 <MDMA_SetConfig>

    /* Enable Common interrupts i.e Transfer Error IT and Channel Transfer Complete IT*/
    __HAL_MDMA_ENABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC));
 801145c:	68fb      	ldr	r3, [r7, #12]
 801145e:	681b      	ldr	r3, [r3, #0]
 8011460:	68da      	ldr	r2, [r3, #12]
 8011462:	68fb      	ldr	r3, [r7, #12]
 8011464:	681b      	ldr	r3, [r3, #0]
 8011466:	f042 0206 	orr.w	r2, r2, #6
 801146a:	60da      	str	r2, [r3, #12]

    if(hmdma->XferBlockCpltCallback != NULL)
 801146c:	68fb      	ldr	r3, [r7, #12]
 801146e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011470:	2b00      	cmp	r3, #0
 8011472:	d007      	beq.n	8011484 <HAL_MDMA_Start_IT+0x90>
    {
      /* if Block transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BT);
 8011474:	68fb      	ldr	r3, [r7, #12]
 8011476:	681b      	ldr	r3, [r3, #0]
 8011478:	68da      	ldr	r2, [r3, #12]
 801147a:	68fb      	ldr	r3, [r7, #12]
 801147c:	681b      	ldr	r3, [r3, #0]
 801147e:	f042 0210 	orr.w	r2, r2, #16
 8011482:	60da      	str	r2, [r3, #12]
    }

    if(hmdma->XferRepeatBlockCpltCallback != NULL)
 8011484:	68fb      	ldr	r3, [r7, #12]
 8011486:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011488:	2b00      	cmp	r3, #0
 801148a:	d007      	beq.n	801149c <HAL_MDMA_Start_IT+0xa8>
    {
      /* if Repeated Block transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BRT);
 801148c:	68fb      	ldr	r3, [r7, #12]
 801148e:	681b      	ldr	r3, [r3, #0]
 8011490:	68da      	ldr	r2, [r3, #12]
 8011492:	68fb      	ldr	r3, [r7, #12]
 8011494:	681b      	ldr	r3, [r3, #0]
 8011496:	f042 0208 	orr.w	r2, r2, #8
 801149a:	60da      	str	r2, [r3, #12]
    }

    if(hmdma->XferBufferCpltCallback != NULL)
 801149c:	68fb      	ldr	r3, [r7, #12]
 801149e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80114a0:	2b00      	cmp	r3, #0
 80114a2:	d007      	beq.n	80114b4 <HAL_MDMA_Start_IT+0xc0>
    {
      /* if buffer transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BFTC);
 80114a4:	68fb      	ldr	r3, [r7, #12]
 80114a6:	681b      	ldr	r3, [r3, #0]
 80114a8:	68da      	ldr	r2, [r3, #12]
 80114aa:	68fb      	ldr	r3, [r7, #12]
 80114ac:	681b      	ldr	r3, [r3, #0]
 80114ae:	f042 0220 	orr.w	r2, r2, #32
 80114b2:	60da      	str	r2, [r3, #12]
    }

    /* Enable the Peripheral */
    __HAL_MDMA_ENABLE(hmdma);
 80114b4:	68fb      	ldr	r3, [r7, #12]
 80114b6:	681b      	ldr	r3, [r3, #0]
 80114b8:	68da      	ldr	r2, [r3, #12]
 80114ba:	68fb      	ldr	r3, [r7, #12]
 80114bc:	681b      	ldr	r3, [r3, #0]
 80114be:	f042 0201 	orr.w	r2, r2, #1
 80114c2:	60da      	str	r2, [r3, #12]

    if(hmdma->Init.Request == MDMA_REQUEST_SW)
 80114c4:	68fb      	ldr	r3, [r7, #12]
 80114c6:	685b      	ldr	r3, [r3, #4]
 80114c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80114cc:	d10e      	bne.n	80114ec <HAL_MDMA_Start_IT+0xf8>
    {
      /* activate If SW request mode*/
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
 80114ce:	68fb      	ldr	r3, [r7, #12]
 80114d0:	681b      	ldr	r3, [r3, #0]
 80114d2:	68da      	ldr	r2, [r3, #12]
 80114d4:	68fb      	ldr	r3, [r7, #12]
 80114d6:	681b      	ldr	r3, [r3, #0]
 80114d8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80114dc:	60da      	str	r2, [r3, #12]
 80114de:	e005      	b.n	80114ec <HAL_MDMA_Start_IT+0xf8>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hmdma);
 80114e0:	68fb      	ldr	r3, [r7, #12]
 80114e2:	2200      	movs	r2, #0
 80114e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Return error status */
    return HAL_BUSY;
 80114e8:	2302      	movs	r3, #2
 80114ea:	e000      	b.n	80114ee <HAL_MDMA_Start_IT+0xfa>
  }

  return HAL_OK;
 80114ec:	2300      	movs	r3, #0
}
 80114ee:	4618      	mov	r0, r3
 80114f0:	3710      	adds	r7, #16
 80114f2:	46bd      	mov	sp, r7
 80114f4:	bd80      	pop	{r7, pc}

080114f6 <HAL_MDMA_Abort>:
  *        and the Channel will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort(MDMA_HandleTypeDef *hmdma)
{
 80114f6:	b580      	push	{r7, lr}
 80114f8:	b084      	sub	sp, #16
 80114fa:	af00      	add	r7, sp, #0
 80114fc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart =  HAL_GetTick();
 80114fe:	f7fb fd7f 	bl	800d000 <HAL_GetTick>
 8011502:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	2b00      	cmp	r3, #0
 8011508:	d101      	bne.n	801150e <HAL_MDMA_Abort+0x18>
  {
    return HAL_ERROR;
 801150a:	2301      	movs	r3, #1
 801150c:	e04a      	b.n	80115a4 <HAL_MDMA_Abort+0xae>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011514:	b2db      	uxtb	r3, r3
 8011516:	2b02      	cmp	r3, #2
 8011518:	d008      	beq.n	801152c <HAL_MDMA_Abort+0x36>
  {
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 801151a:	687b      	ldr	r3, [r7, #4]
 801151c:	2280      	movs	r2, #128	; 0x80
 801151e:	669a      	str	r2, [r3, #104]	; 0x68

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	2200      	movs	r2, #0
 8011524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8011528:	2301      	movs	r3, #1
 801152a:	e03b      	b.n	80115a4 <HAL_MDMA_Abort+0xae>
  }
  else
  {
    /* Disable all the transfer interrupts */
    __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	681b      	ldr	r3, [r3, #0]
 8011530:	68da      	ldr	r2, [r3, #12]
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	681b      	ldr	r3, [r3, #0]
 8011536:	f022 023e 	bic.w	r2, r2, #62	; 0x3e
 801153a:	60da      	str	r2, [r3, #12]

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	681b      	ldr	r3, [r3, #0]
 8011540:	68da      	ldr	r2, [r3, #12]
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	681b      	ldr	r3, [r3, #0]
 8011546:	f022 0201 	bic.w	r2, r2, #1
 801154a:	60da      	str	r2, [r3, #12]

    /* Check if the MDMA Channel is effectively disabled */
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 801154c:	e016      	b.n	801157c <HAL_MDMA_Abort+0x86>
    {
      /* Check for the Timeout */
      if( (HAL_GetTick()  - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 801154e:	f7fb fd57 	bl	800d000 <HAL_GetTick>
 8011552:	4602      	mov	r2, r0
 8011554:	68fb      	ldr	r3, [r7, #12]
 8011556:	1ad3      	subs	r3, r2, r3
 8011558:	2b05      	cmp	r3, #5
 801155a:	d90f      	bls.n	801157c <HAL_MDMA_Abort+0x86>
      {
        /* Update error code */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_TIMEOUT;
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011560:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	669a      	str	r2, [r3, #104]	; 0x68

        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	2200      	movs	r2, #0
 801156c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Change the MDMA state */
        hmdma->State = HAL_MDMA_STATE_ERROR;
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	2203      	movs	r2, #3
 8011574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        return HAL_ERROR;
 8011578:	2301      	movs	r3, #1
 801157a:	e013      	b.n	80115a4 <HAL_MDMA_Abort+0xae>
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	681b      	ldr	r3, [r3, #0]
 8011580:	68db      	ldr	r3, [r3, #12]
 8011582:	f003 0301 	and.w	r3, r3, #1
 8011586:	2b00      	cmp	r3, #0
 8011588:	d1e1      	bne.n	801154e <HAL_MDMA_Abort+0x58>
      }
    }

    /* Clear all interrupt flags */
    __HAL_MDMA_CLEAR_FLAG(hmdma, (MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BT | MDMA_FLAG_BRT | MDMA_FLAG_BFTC));
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	681b      	ldr	r3, [r3, #0]
 801158e:	221f      	movs	r2, #31
 8011590:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	2200      	movs	r2, #0
 8011596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Change the MDMA state*/
    hmdma->State = HAL_MDMA_STATE_READY;
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	2201      	movs	r2, #1
 801159e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

  return HAL_OK;
 80115a2:	2300      	movs	r3, #0
}
 80115a4:	4618      	mov	r0, r3
 80115a6:	3710      	adds	r7, #16
 80115a8:	46bd      	mov	sp, r7
 80115aa:	bd80      	pop	{r7, pc}

080115ac <HAL_MDMA_Abort_IT>:
  * @param  hmdma  : pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
 80115ac:	b480      	push	{r7}
 80115ae:	b083      	sub	sp, #12
 80115b0:	af00      	add	r7, sp, #0
 80115b2:	6078      	str	r0, [r7, #4]
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	2b00      	cmp	r3, #0
 80115b8:	d101      	bne.n	80115be <HAL_MDMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80115ba:	2301      	movs	r3, #1
 80115bc:	e017      	b.n	80115ee <HAL_MDMA_Abort_IT+0x42>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80115c4:	b2db      	uxtb	r3, r3
 80115c6:	2b02      	cmp	r3, #2
 80115c8:	d004      	beq.n	80115d4 <HAL_MDMA_Abort_IT+0x28>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	2280      	movs	r2, #128	; 0x80
 80115ce:	669a      	str	r2, [r3, #104]	; 0x68

    return HAL_ERROR;
 80115d0:	2301      	movs	r3, #1
 80115d2:	e00c      	b.n	80115ee <HAL_MDMA_Abort_IT+0x42>
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	2204      	movs	r2, #4
 80115d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	681b      	ldr	r3, [r3, #0]
 80115e0:	68da      	ldr	r2, [r3, #12]
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	681b      	ldr	r3, [r3, #0]
 80115e6:	f022 0201 	bic.w	r2, r2, #1
 80115ea:	60da      	str	r2, [r3, #12]
  }

  return HAL_OK;
 80115ec:	2300      	movs	r3, #0
}
 80115ee:	4618      	mov	r0, r3
 80115f0:	370c      	adds	r7, #12
 80115f2:	46bd      	mov	sp, r7
 80115f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115f8:	4770      	bx	lr
	...

080115fc <HAL_MDMA_IRQHandler>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval None
  */
void HAL_MDMA_IRQHandler(MDMA_HandleTypeDef *hmdma)
{
 80115fc:	b580      	push	{r7, lr}
 80115fe:	b086      	sub	sp, #24
 8011600:	af00      	add	r7, sp, #0
 8011602:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 8011604:	2300      	movs	r3, #0
 8011606:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8011608:	4b91      	ldr	r3, [pc, #580]	; (8011850 <HAL_MDMA_IRQHandler+0x254>)
 801160a:	681b      	ldr	r3, [r3, #0]
 801160c:	4a91      	ldr	r2, [pc, #580]	; (8011854 <HAL_MDMA_IRQHandler+0x258>)
 801160e:	fba2 2303 	umull	r2, r3, r2, r3
 8011612:	0a9b      	lsrs	r3, r3, #10
 8011614:	617b      	str	r3, [r7, #20]

  uint32_t generalIntFlag, errorFlag;

  /* General Interrupt Flag management ****************************************/
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	681b      	ldr	r3, [r3, #0]
 801161a:	461a      	mov	r2, r3
 801161c:	4b8e      	ldr	r3, [pc, #568]	; (8011858 <HAL_MDMA_IRQHandler+0x25c>)
 801161e:	4413      	add	r3, r2
 8011620:	099b      	lsrs	r3, r3, #6
 8011622:	f003 031f 	and.w	r3, r3, #31
 8011626:	2201      	movs	r2, #1
 8011628:	fa02 f303 	lsl.w	r3, r2, r3
 801162c:	613b      	str	r3, [r7, #16]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 801162e:	f04f 43a4 	mov.w	r3, #1375731712	; 0x52000000
 8011632:	681a      	ldr	r2, [r3, #0]
 8011634:	693b      	ldr	r3, [r7, #16]
 8011636:	4013      	ands	r3, r2
 8011638:	2b00      	cmp	r3, #0
 801163a:	f000 812d 	beq.w	8011898 <HAL_MDMA_IRQHandler+0x29c>
  {
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
  }

  /* Transfer Error Interrupt management ***************************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	681b      	ldr	r3, [r3, #0]
 8011642:	681b      	ldr	r3, [r3, #0]
 8011644:	f003 0301 	and.w	r3, r3, #1
 8011648:	2b00      	cmp	r3, #0
 801164a:	d054      	beq.n	80116f6 <HAL_MDMA_IRQHandler+0xfa>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	681b      	ldr	r3, [r3, #0]
 8011650:	68db      	ldr	r3, [r3, #12]
 8011652:	f003 0302 	and.w	r3, r3, #2
 8011656:	2b00      	cmp	r3, #0
 8011658:	d04d      	beq.n	80116f6 <HAL_MDMA_IRQHandler+0xfa>
    {
      /* Disable the transfer error interrupt */
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	681b      	ldr	r3, [r3, #0]
 801165e:	68da      	ldr	r2, [r3, #12]
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	681b      	ldr	r3, [r3, #0]
 8011664:	f022 0202 	bic.w	r2, r2, #2
 8011668:	60da      	str	r2, [r3, #12]

      /* Get the transfer error source flag */
      errorFlag = hmdma->Instance->CESR;
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	681b      	ldr	r3, [r3, #0]
 801166e:	689b      	ldr	r3, [r3, #8]
 8011670:	60fb      	str	r3, [r7, #12]

      if((errorFlag & MDMA_CESR_TED) == 0U)
 8011672:	68fb      	ldr	r3, [r7, #12]
 8011674:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011678:	2b00      	cmp	r3, #0
 801167a:	d106      	bne.n	801168a <HAL_MDMA_IRQHandler+0x8e>
      {
        /* Update error code : Read Transfer error  */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011680:	f043 0201 	orr.w	r2, r3, #1
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	669a      	str	r2, [r3, #104]	; 0x68
 8011688:	e005      	b.n	8011696 <HAL_MDMA_IRQHandler+0x9a>
      }
      else
      {
        /* Update error code : Write Transfer error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801168e:	f043 0202 	orr.w	r2, r3, #2
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 8011696:	68fb      	ldr	r3, [r7, #12]
 8011698:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801169c:	2b00      	cmp	r3, #0
 801169e:	d005      	beq.n	80116ac <HAL_MDMA_IRQHandler+0xb0>
      {
        /* Update error code : Error Mask Data */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80116a4:	f043 0204 	orr.w	r2, r3, #4
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_TELD) != 0U)
 80116ac:	68fb      	ldr	r3, [r7, #12]
 80116ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80116b2:	2b00      	cmp	r3, #0
 80116b4:	d005      	beq.n	80116c2 <HAL_MDMA_IRQHandler+0xc6>
      {
        /* Update error code : Error Linked list */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80116ba:	f043 0208 	orr.w	r2, r3, #8
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_ASE) != 0U)
 80116c2:	68fb      	ldr	r3, [r7, #12]
 80116c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	d005      	beq.n	80116d8 <HAL_MDMA_IRQHandler+0xdc>
      {
        /* Update error code : Address/Size alignment error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80116d0:	f043 0210 	orr.w	r2, r3, #16
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_BSE) != 0U)
 80116d8:	68fb      	ldr	r3, [r7, #12]
 80116da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80116de:	2b00      	cmp	r3, #0
 80116e0:	d005      	beq.n	80116ee <HAL_MDMA_IRQHandler+0xf2>
      {
        /* Update error code : Block Size error error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80116e6:	f043 0220 	orr.w	r2, r3, #32
 80116ea:	687b      	ldr	r3, [r7, #4]
 80116ec:	669a      	str	r2, [r3, #104]	; 0x68
      }

      /* Clear the transfer error flags */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	681b      	ldr	r3, [r3, #0]
 80116f2:	2201      	movs	r2, #1
 80116f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* Buffer Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	681b      	ldr	r3, [r3, #0]
 80116fa:	681b      	ldr	r3, [r3, #0]
 80116fc:	f003 0310 	and.w	r3, r3, #16
 8011700:	2b00      	cmp	r3, #0
 8011702:	d012      	beq.n	801172a <HAL_MDMA_IRQHandler+0x12e>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	681b      	ldr	r3, [r3, #0]
 8011708:	68db      	ldr	r3, [r3, #12]
 801170a:	f003 0320 	and.w	r3, r3, #32
 801170e:	2b00      	cmp	r3, #0
 8011710:	d00b      	beq.n	801172a <HAL_MDMA_IRQHandler+0x12e>
    {
      /* Clear the buffer transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	681b      	ldr	r3, [r3, #0]
 8011716:	2210      	movs	r2, #16
 8011718:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBufferCpltCallback != NULL)
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801171e:	2b00      	cmp	r3, #0
 8011720:	d003      	beq.n	801172a <HAL_MDMA_IRQHandler+0x12e>
      {
        /* Buffer transfer callback */
        hmdma->XferBufferCpltCallback(hmdma);
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011726:	6878      	ldr	r0, [r7, #4]
 8011728:	4798      	blx	r3
      }
    }
  }

  /* Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	681b      	ldr	r3, [r3, #0]
 801172e:	681b      	ldr	r3, [r3, #0]
 8011730:	f003 0308 	and.w	r3, r3, #8
 8011734:	2b00      	cmp	r3, #0
 8011736:	d012      	beq.n	801175e <HAL_MDMA_IRQHandler+0x162>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	681b      	ldr	r3, [r3, #0]
 801173c:	68db      	ldr	r3, [r3, #12]
 801173e:	f003 0310 	and.w	r3, r3, #16
 8011742:	2b00      	cmp	r3, #0
 8011744:	d00b      	beq.n	801175e <HAL_MDMA_IRQHandler+0x162>
    {
      /* Clear the block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	681b      	ldr	r3, [r3, #0]
 801174a:	2208      	movs	r2, #8
 801174c:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBlockCpltCallback != NULL)
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011752:	2b00      	cmp	r3, #0
 8011754:	d003      	beq.n	801175e <HAL_MDMA_IRQHandler+0x162>
      {
        /* Block transfer callback */
        hmdma->XferBlockCpltCallback(hmdma);
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801175a:	6878      	ldr	r0, [r7, #4]
 801175c:	4798      	blx	r3
      }
    }
  }

  /* Repeated Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	681b      	ldr	r3, [r3, #0]
 8011762:	681b      	ldr	r3, [r3, #0]
 8011764:	f003 0304 	and.w	r3, r3, #4
 8011768:	2b00      	cmp	r3, #0
 801176a:	d012      	beq.n	8011792 <HAL_MDMA_IRQHandler+0x196>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	681b      	ldr	r3, [r3, #0]
 8011770:	68db      	ldr	r3, [r3, #12]
 8011772:	f003 0308 	and.w	r3, r3, #8
 8011776:	2b00      	cmp	r3, #0
 8011778:	d00b      	beq.n	8011792 <HAL_MDMA_IRQHandler+0x196>
    {
      /* Clear the repeat block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	681b      	ldr	r3, [r3, #0]
 801177e:	2204      	movs	r2, #4
 8011780:	605a      	str	r2, [r3, #4]

      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011786:	2b00      	cmp	r3, #0
 8011788:	d003      	beq.n	8011792 <HAL_MDMA_IRQHandler+0x196>
      {
        /* Repeated Block transfer callback */
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801178e:	6878      	ldr	r0, [r7, #4]
 8011790:	4798      	blx	r3
      }
    }
  }

  /* Channel Transfer Complete Interrupt management ***********************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	681b      	ldr	r3, [r3, #0]
 8011796:	681b      	ldr	r3, [r3, #0]
 8011798:	f003 0302 	and.w	r3, r3, #2
 801179c:	2b00      	cmp	r3, #0
 801179e:	d039      	beq.n	8011814 <HAL_MDMA_IRQHandler+0x218>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	681b      	ldr	r3, [r3, #0]
 80117a4:	68db      	ldr	r3, [r3, #12]
 80117a6:	f003 0304 	and.w	r3, r3, #4
 80117aa:	2b00      	cmp	r3, #0
 80117ac:	d032      	beq.n	8011814 <HAL_MDMA_IRQHandler+0x218>
    {
      /* Disable all the transfer interrupts */
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	681b      	ldr	r3, [r3, #0]
 80117b2:	68da      	ldr	r2, [r3, #12]
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	681b      	ldr	r3, [r3, #0]
 80117b8:	f022 023e 	bic.w	r2, r2, #62	; 0x3e
 80117bc:	60da      	str	r2, [r3, #12]

      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80117c4:	b2db      	uxtb	r3, r3
 80117c6:	2b04      	cmp	r3, #4
 80117c8:	d110      	bne.n	80117ec <HAL_MDMA_IRQHandler+0x1f0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	2200      	movs	r2, #0
 80117ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Change the DMA state */
        hmdma->State = HAL_MDMA_STATE_READY;
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	2201      	movs	r2, #1
 80117d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        if(hmdma->XferAbortCallback != NULL)
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80117de:	2b00      	cmp	r3, #0
 80117e0:	d05c      	beq.n	801189c <HAL_MDMA_IRQHandler+0x2a0>
        {
          hmdma->XferAbortCallback(hmdma);
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80117e6:	6878      	ldr	r0, [r7, #4]
 80117e8:	4798      	blx	r3
        }
        return;
 80117ea:	e057      	b.n	801189c <HAL_MDMA_IRQHandler+0x2a0>
      }

      /* Clear the Channel Transfer Complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	681b      	ldr	r3, [r3, #0]
 80117f0:	2202      	movs	r2, #2
 80117f2:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hmdma);
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	2200      	movs	r2, #0
 80117f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Change MDMA peripheral state */
      hmdma->State = HAL_MDMA_STATE_READY;
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	2201      	movs	r2, #1
 8011800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if(hmdma->XferCpltCallback != NULL)
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011808:	2b00      	cmp	r3, #0
 801180a:	d003      	beq.n	8011814 <HAL_MDMA_IRQHandler+0x218>
      {
        /* Channel Transfer Complete callback */
        hmdma->XferCpltCallback(hmdma);
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011810:	6878      	ldr	r0, [r7, #4]
 8011812:	4798      	blx	r3
      }
    }
  }

  /* manage error case */
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011818:	2b00      	cmp	r3, #0
 801181a:	d040      	beq.n	801189e <HAL_MDMA_IRQHandler+0x2a2>
  {
    hmdma->State = HAL_MDMA_STATE_ABORT;
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	2204      	movs	r2, #4
 8011820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	681b      	ldr	r3, [r3, #0]
 8011828:	68da      	ldr	r2, [r3, #12]
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	681b      	ldr	r3, [r3, #0]
 801182e:	f022 0201 	bic.w	r2, r2, #1
 8011832:	60da      	str	r2, [r3, #12]

    do
    {
      if (++count > timeout)
 8011834:	68bb      	ldr	r3, [r7, #8]
 8011836:	3301      	adds	r3, #1
 8011838:	60bb      	str	r3, [r7, #8]
 801183a:	697a      	ldr	r2, [r7, #20]
 801183c:	429a      	cmp	r2, r3
 801183e:	d30d      	bcc.n	801185c <HAL_MDMA_IRQHandler+0x260>
      {
        break;
      }
    }
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	681b      	ldr	r3, [r3, #0]
 8011844:	68db      	ldr	r3, [r3, #12]
 8011846:	f003 0301 	and.w	r3, r3, #1
 801184a:	2b00      	cmp	r3, #0
 801184c:	d1f2      	bne.n	8011834 <HAL_MDMA_IRQHandler+0x238>
 801184e:	e006      	b.n	801185e <HAL_MDMA_IRQHandler+0x262>
 8011850:	24000054 	.word	0x24000054
 8011854:	1b4e81b5 	.word	0x1b4e81b5
 8011858:	adffffc0 	.word	0xadffffc0
        break;
 801185c:	bf00      	nop

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	2200      	movs	r2, #0
 8011862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	681b      	ldr	r3, [r3, #0]
 801186a:	68db      	ldr	r3, [r3, #12]
 801186c:	f003 0301 	and.w	r3, r3, #1
 8011870:	2b00      	cmp	r3, #0
 8011872:	d004      	beq.n	801187e <HAL_MDMA_IRQHandler+0x282>
    {
      /* Change the MDMA state to error if MDMA disable fails */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	2203      	movs	r2, #3
 8011878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 801187c:	e003      	b.n	8011886 <HAL_MDMA_IRQHandler+0x28a>
    }
    else
    {
      /* Change the MDMA state to Ready if MDMA disable success */
      hmdma->State = HAL_MDMA_STATE_READY;
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	2201      	movs	r2, #1
 8011882:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }


    if (hmdma->XferErrorCallback != NULL)
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801188a:	2b00      	cmp	r3, #0
 801188c:	d007      	beq.n	801189e <HAL_MDMA_IRQHandler+0x2a2>
    {
      /* Transfer error callback */
      hmdma->XferErrorCallback(hmdma);
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011892:	6878      	ldr	r0, [r7, #4]
 8011894:	4798      	blx	r3
 8011896:	e002      	b.n	801189e <HAL_MDMA_IRQHandler+0x2a2>
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
 8011898:	bf00      	nop
 801189a:	e000      	b.n	801189e <HAL_MDMA_IRQHandler+0x2a2>
        return;
 801189c:	bf00      	nop
    }
  }
}
 801189e:	3718      	adds	r7, #24
 80118a0:	46bd      	mov	sp, r7
 80118a2:	bd80      	pop	{r7, pc}

080118a4 <MDMA_SetConfig>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount: The number of blocks to be transferred
  * @retval HAL status
  */
static void MDMA_SetConfig(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
 80118a4:	b480      	push	{r7}
 80118a6:	b087      	sub	sp, #28
 80118a8:	af00      	add	r7, sp, #0
 80118aa:	60f8      	str	r0, [r7, #12]
 80118ac:	60b9      	str	r1, [r7, #8]
 80118ae:	607a      	str	r2, [r7, #4]
 80118b0:	603b      	str	r3, [r7, #0]
  uint32_t addressMask;

  /* Configure the MDMA Channel data length */
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 80118b2:	68fb      	ldr	r3, [r7, #12]
 80118b4:	681b      	ldr	r3, [r3, #0]
 80118b6:	695a      	ldr	r2, [r3, #20]
 80118b8:	4b31      	ldr	r3, [pc, #196]	; (8011980 <MDMA_SetConfig+0xdc>)
 80118ba:	4013      	ands	r3, r2
 80118bc:	683a      	ldr	r2, [r7, #0]
 80118be:	f3c2 0110 	ubfx	r1, r2, #0, #17
 80118c2:	68fa      	ldr	r2, [r7, #12]
 80118c4:	6812      	ldr	r2, [r2, #0]
 80118c6:	430b      	orrs	r3, r1
 80118c8:	6153      	str	r3, [r2, #20]

  /* Configure the MDMA block repeat count */
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
 80118ca:	68fb      	ldr	r3, [r7, #12]
 80118cc:	681b      	ldr	r3, [r3, #0]
 80118ce:	695b      	ldr	r3, [r3, #20]
 80118d0:	f3c3 0113 	ubfx	r1, r3, #0, #20
 80118d4:	6a3b      	ldr	r3, [r7, #32]
 80118d6:	3b01      	subs	r3, #1
 80118d8:	051a      	lsls	r2, r3, #20
 80118da:	68fb      	ldr	r3, [r7, #12]
 80118dc:	681b      	ldr	r3, [r3, #0]
 80118de:	430a      	orrs	r2, r1
 80118e0:	615a      	str	r2, [r3, #20]

  /* Clear all interrupt flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_CISR_BRTIF | MDMA_CISR_BTIF | MDMA_CISR_TCIF);
 80118e2:	68fb      	ldr	r3, [r7, #12]
 80118e4:	681b      	ldr	r3, [r3, #0]
 80118e6:	221f      	movs	r2, #31
 80118e8:	605a      	str	r2, [r3, #4]

  /* Configure MDMA Channel destination address */
  hmdma->Instance->CDAR = DstAddress;
 80118ea:	68fb      	ldr	r3, [r7, #12]
 80118ec:	681b      	ldr	r3, [r3, #0]
 80118ee:	687a      	ldr	r2, [r7, #4]
 80118f0:	61da      	str	r2, [r3, #28]

  /* Configure MDMA Channel Source address */
  hmdma->Instance->CSAR = SrcAddress;
 80118f2:	68fb      	ldr	r3, [r7, #12]
 80118f4:	681b      	ldr	r3, [r3, #0]
 80118f6:	68ba      	ldr	r2, [r7, #8]
 80118f8:	619a      	str	r2, [r3, #24]

  addressMask = SrcAddress & 0xFF000000U;
 80118fa:	68bb      	ldr	r3, [r7, #8]
 80118fc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8011900:	617b      	str	r3, [r7, #20]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 8011902:	697b      	ldr	r3, [r7, #20]
 8011904:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011908:	d002      	beq.n	8011910 <MDMA_SetConfig+0x6c>
 801190a:	697b      	ldr	r3, [r7, #20]
 801190c:	2b00      	cmp	r3, #0
 801190e:	d108      	bne.n	8011922 <MDMA_SetConfig+0x7e>
  {
    /*The AHBSbus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_SBUS;
 8011910:	68fb      	ldr	r3, [r7, #12]
 8011912:	681b      	ldr	r3, [r3, #0]
 8011914:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011916:	68fb      	ldr	r3, [r7, #12]
 8011918:	681b      	ldr	r3, [r3, #0]
 801191a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 801191e:	629a      	str	r2, [r3, #40]	; 0x28
 8011920:	e007      	b.n	8011932 <MDMA_SetConfig+0x8e>
  }
  else
  {
    /*The AXI bus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 8011922:	68fb      	ldr	r3, [r7, #12]
 8011924:	681b      	ldr	r3, [r3, #0]
 8011926:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011928:	68fb      	ldr	r3, [r7, #12]
 801192a:	681b      	ldr	r3, [r3, #0]
 801192c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8011930:	629a      	str	r2, [r3, #40]	; 0x28
  }

  addressMask = DstAddress & 0xFF000000U;
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8011938:	617b      	str	r3, [r7, #20]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 801193a:	697b      	ldr	r3, [r7, #20]
 801193c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011940:	d002      	beq.n	8011948 <MDMA_SetConfig+0xa4>
 8011942:	697b      	ldr	r3, [r7, #20]
 8011944:	2b00      	cmp	r3, #0
 8011946:	d108      	bne.n	801195a <MDMA_SetConfig+0xb6>
  {
    /*The AHB bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_DBUS;
 8011948:	68fb      	ldr	r3, [r7, #12]
 801194a:	681b      	ldr	r3, [r3, #0]
 801194c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801194e:	68fb      	ldr	r3, [r7, #12]
 8011950:	681b      	ldr	r3, [r3, #0]
 8011952:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8011956:	629a      	str	r2, [r3, #40]	; 0x28
 8011958:	e007      	b.n	801196a <MDMA_SetConfig+0xc6>
  }
  else
  {
    /*The AXI bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_DBUS);
 801195a:	68fb      	ldr	r3, [r7, #12]
 801195c:	681b      	ldr	r3, [r3, #0]
 801195e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011960:	68fb      	ldr	r3, [r7, #12]
 8011962:	681b      	ldr	r3, [r3, #0]
 8011964:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8011968:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Set the linked list register to the first node of the list */
  hmdma->Instance->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
 801196a:	68fb      	ldr	r3, [r7, #12]
 801196c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801196e:	68fb      	ldr	r3, [r7, #12]
 8011970:	681b      	ldr	r3, [r3, #0]
 8011972:	625a      	str	r2, [r3, #36]	; 0x24
}
 8011974:	bf00      	nop
 8011976:	371c      	adds	r7, #28
 8011978:	46bd      	mov	sp, r7
 801197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801197e:	4770      	bx	lr
 8011980:	fffe0000 	.word	0xfffe0000

08011984 <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8011984:	b480      	push	{r7}
 8011986:	b085      	sub	sp, #20
 8011988:	af00      	add	r7, sp, #0
 801198a:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	68d9      	ldr	r1, [r3, #12]
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	691a      	ldr	r2, [r3, #16]
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	681b      	ldr	r3, [r3, #0]
 8011998:	430a      	orrs	r2, r1
 801199a:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	695a      	ldr	r2, [r3, #20]
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	699b      	ldr	r3, [r3, #24]
 80119a4:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 80119aa:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	6a1b      	ldr	r3, [r3, #32]
 80119b0:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 80119b6:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80119bc:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 80119c2:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80119c8:	3b01      	subs	r3, #1
 80119ca:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 80119cc:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 80119d8:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 80119da:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 80119dc:	687b      	ldr	r3, [r7, #4]
 80119de:	685b      	ldr	r3, [r3, #4]
 80119e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80119e4:	d107      	bne.n	80119f6 <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	681b      	ldr	r3, [r3, #0]
 80119ea:	691a      	ldr	r2, [r3, #16]
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	681b      	ldr	r3, [r3, #0]
 80119f0:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 80119f4:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	681b      	ldr	r3, [r3, #0]
 80119fa:	2200      	movs	r2, #0
 80119fc:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011a02:	2b00      	cmp	r3, #0
 8011a04:	da11      	bge.n	8011a2a <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	681b      	ldr	r3, [r3, #0]
 8011a0a:	695a      	ldr	r2, [r3, #20]
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	681b      	ldr	r3, [r3, #0]
 8011a10:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8011a14:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011a1a:	425b      	negs	r3, r3
 8011a1c:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	681b      	ldr	r3, [r3, #0]
 8011a22:	68fa      	ldr	r2, [r7, #12]
 8011a24:	b292      	uxth	r2, r2
 8011a26:	621a      	str	r2, [r3, #32]
 8011a28:	e006      	b.n	8011a38 <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011a2e:	461a      	mov	r2, r3
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	681b      	ldr	r3, [r3, #0]
 8011a34:	b292      	uxth	r2, r2
 8011a36:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011a3c:	2b00      	cmp	r3, #0
 8011a3e:	da15      	bge.n	8011a6c <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	681b      	ldr	r3, [r3, #0]
 8011a44:	695a      	ldr	r2, [r3, #20]
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	681b      	ldr	r3, [r3, #0]
 8011a4a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8011a4e:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011a54:	425b      	negs	r3, r3
 8011a56:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	681b      	ldr	r3, [r3, #0]
 8011a5c:	6a19      	ldr	r1, [r3, #32]
 8011a5e:	68fb      	ldr	r3, [r7, #12]
 8011a60:	041a      	lsls	r2, r3, #16
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	681b      	ldr	r3, [r3, #0]
 8011a66:	430a      	orrs	r2, r1
 8011a68:	621a      	str	r2, [r3, #32]
 8011a6a:	e009      	b.n	8011a80 <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	681b      	ldr	r3, [r3, #0]
 8011a70:	6a19      	ldr	r1, [r3, #32]
 8011a72:	687b      	ldr	r3, [r7, #4]
 8011a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011a76:	041a      	lsls	r2, r3, #16
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	681b      	ldr	r3, [r3, #0]
 8011a7c:	430a      	orrs	r2, r1
 8011a7e:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	685b      	ldr	r3, [r3, #4]
 8011a84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011a88:	d006      	beq.n	8011a98 <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	685a      	ldr	r2, [r3, #4]
 8011a8e:	687b      	ldr	r3, [r7, #4]
 8011a90:	681b      	ldr	r3, [r3, #0]
 8011a92:	b2d2      	uxtb	r2, r2
 8011a94:	629a      	str	r2, [r3, #40]	; 0x28
 8011a96:	e003      	b.n	8011aa0 <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	681b      	ldr	r3, [r3, #0]
 8011a9c:	2200      	movs	r2, #0
 8011a9e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	681b      	ldr	r3, [r3, #0]
 8011aa4:	2200      	movs	r2, #0
 8011aa6:	625a      	str	r2, [r3, #36]	; 0x24
}
 8011aa8:	bf00      	nop
 8011aaa:	3714      	adds	r7, #20
 8011aac:	46bd      	mov	sp, r7
 8011aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ab2:	4770      	bx	lr

08011ab4 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init (OSPI_HandleTypeDef *hospi)
{
 8011ab4:	b580      	push	{r7, lr}
 8011ab6:	b086      	sub	sp, #24
 8011ab8:	af02      	add	r7, sp, #8
 8011aba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011abc:	2300      	movs	r3, #0
 8011abe:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8011ac0:	f7fb fa9e 	bl	800d000 <HAL_GetTick>
 8011ac4:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	d102      	bne.n	8011ad2 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8011acc:	2301      	movs	r3, #1
 8011ace:	73fb      	strb	r3, [r7, #15]
 8011ad0:	e0a5      	b.n	8011c1e <HAL_OSPI_Init+0x16a>
    assert_param(IS_OSPI_CS_BOUNDARY    (hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP         (hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN        (hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	2200      	movs	r2, #0
 8011ad6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011adc:	2b00      	cmp	r3, #0
 8011ade:	f040 809e 	bne.w	8011c1e <HAL_OSPI_Init+0x16a>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8011ae2:	6878      	ldr	r0, [r7, #4]
 8011ae4:	f7ef fcd6 	bl	8001494 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8011ae8:	f241 3188 	movw	r1, #5000	; 0x1388
 8011aec:	6878      	ldr	r0, [r7, #4]
 8011aee:	f000 fd44 	bl	801257a <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	681b      	ldr	r3, [r3, #0]
 8011af6:	689a      	ldr	r2, [r3, #8]
 8011af8:	4b4b      	ldr	r3, [pc, #300]	; (8011c28 <HAL_OSPI_Init+0x174>)
 8011afa:	4013      	ands	r3, r2
 8011afc:	687a      	ldr	r2, [r7, #4]
 8011afe:	68d1      	ldr	r1, [r2, #12]
 8011b00:	687a      	ldr	r2, [r7, #4]
 8011b02:	6912      	ldr	r2, [r2, #16]
 8011b04:	3a01      	subs	r2, #1
 8011b06:	0412      	lsls	r2, r2, #16
 8011b08:	4311      	orrs	r1, r2
 8011b0a:	687a      	ldr	r2, [r7, #4]
 8011b0c:	6952      	ldr	r2, [r2, #20]
 8011b0e:	3a01      	subs	r2, #1
 8011b10:	0212      	lsls	r2, r2, #8
 8011b12:	4311      	orrs	r1, r2
 8011b14:	687a      	ldr	r2, [r7, #4]
 8011b16:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8011b18:	4311      	orrs	r1, r2
 8011b1a:	687a      	ldr	r2, [r7, #4]
 8011b1c:	69d2      	ldr	r2, [r2, #28]
 8011b1e:	4311      	orrs	r1, r2
 8011b20:	687a      	ldr	r2, [r7, #4]
 8011b22:	6812      	ldr	r2, [r2, #0]
 8011b24:	430b      	orrs	r3, r1
 8011b26:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	681b      	ldr	r3, [r3, #0]
 8011b2c:	68db      	ldr	r3, [r3, #12]
 8011b2e:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	6a1a      	ldr	r2, [r3, #32]
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	681b      	ldr	r3, [r3, #0]
 8011b3a:	430a      	orrs	r2, r1
 8011b3c:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8011b3e:	687b      	ldr	r3, [r7, #4]
 8011b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011b42:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	681b      	ldr	r3, [r3, #0]
 8011b4c:	430a      	orrs	r2, r1
 8011b4e:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	681b      	ldr	r3, [r3, #0]
 8011b54:	687a      	ldr	r2, [r7, #4]
 8011b56:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8011b58:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	681b      	ldr	r3, [r3, #0]
 8011b5e:	681b      	ldr	r3, [r3, #0]
 8011b60:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	685b      	ldr	r3, [r3, #4]
 8011b68:	3b01      	subs	r3, #1
 8011b6a:	021a      	lsls	r2, r3, #8
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	681b      	ldr	r3, [r3, #0]
 8011b70:	430a      	orrs	r2, r1
 8011b72:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011b78:	9300      	str	r3, [sp, #0]
 8011b7a:	68bb      	ldr	r3, [r7, #8]
 8011b7c:	2200      	movs	r2, #0
 8011b7e:	2120      	movs	r1, #32
 8011b80:	6878      	ldr	r0, [r7, #4]
 8011b82:	f000 fd45 	bl	8012610 <OSPI_WaitFlagStateUntilTimeout>
 8011b86:	4603      	mov	r3, r0
 8011b88:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8011b8a:	7bfb      	ldrb	r3, [r7, #15]
 8011b8c:	2b00      	cmp	r3, #0
 8011b8e:	d146      	bne.n	8011c1e <HAL_OSPI_Init+0x16a>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	681b      	ldr	r3, [r3, #0]
 8011b94:	68db      	ldr	r3, [r3, #12]
 8011b96:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b9e:	1e5a      	subs	r2, r3, #1
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	681b      	ldr	r3, [r3, #0]
 8011ba4:	430a      	orrs	r2, r1
 8011ba6:	60da      	str	r2, [r3, #12]
                  ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	681b      	ldr	r3, [r3, #0]
 8011bac:	681b      	ldr	r3, [r3, #0]
 8011bae:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	689a      	ldr	r2, [r3, #8]
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	681b      	ldr	r3, [r3, #0]
 8011bba:	430a      	orrs	r2, r1
 8011bbc:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8011bbe:	687b      	ldr	r3, [r7, #4]
 8011bc0:	681b      	ldr	r3, [r3, #0]
 8011bc2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8011bc6:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011bd2:	431a      	orrs	r2, r3
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	681b      	ldr	r3, [r3, #0]
 8011bd8:	430a      	orrs	r2, r1
 8011bda:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                  (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	681b      	ldr	r3, [r3, #0]
 8011be2:	681a      	ldr	r2, [r3, #0]
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	681b      	ldr	r3, [r3, #0]
 8011be8:	f042 0201 	orr.w	r2, r2, #1
 8011bec:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	699b      	ldr	r3, [r3, #24]
 8011bf2:	2b02      	cmp	r3, #2
 8011bf4:	d107      	bne.n	8011c06 <HAL_OSPI_Init+0x152>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	681b      	ldr	r3, [r3, #0]
 8011bfa:	689a      	ldr	r2, [r3, #8]
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	681b      	ldr	r3, [r3, #0]
 8011c00:	f042 0202 	orr.w	r2, r2, #2
 8011c04:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8011c06:	687b      	ldr	r3, [r7, #4]
 8011c08:	68db      	ldr	r3, [r3, #12]
 8011c0a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8011c0e:	d103      	bne.n	8011c18 <HAL_OSPI_Init+0x164>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8011c10:	687b      	ldr	r3, [r7, #4]
 8011c12:	2201      	movs	r2, #1
 8011c14:	651a      	str	r2, [r3, #80]	; 0x50
 8011c16:	e002      	b.n	8011c1e <HAL_OSPI_Init+0x16a>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	2202      	movs	r2, #2
 8011c1c:	651a      	str	r2, [r3, #80]	; 0x50
      }
    }
  }

  /* Return function status */
  return status;
 8011c1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011c20:	4618      	mov	r0, r3
 8011c22:	3710      	adds	r7, #16
 8011c24:	46bd      	mov	sp, r7
 8011c26:	bd80      	pop	{r7, pc}
 8011c28:	f8e0f8f4 	.word	0xf8e0f8f4

08011c2c <HAL_OSPI_DeInit>:
  * @brief  De-Initialize the OSPI peripheral.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_DeInit(OSPI_HandleTypeDef *hospi)
{
 8011c2c:	b580      	push	{r7, lr}
 8011c2e:	b084      	sub	sp, #16
 8011c30:	af00      	add	r7, sp, #0
 8011c32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011c34:	2300      	movs	r3, #0
 8011c36:	73fb      	strb	r3, [r7, #15]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	2b00      	cmp	r3, #0
 8011c3c:	d102      	bne.n	8011c44 <HAL_OSPI_DeInit+0x18>
  {
    status = HAL_ERROR;
 8011c3e:	2301      	movs	r3, #1
 8011c40:	73fb      	strb	r3, [r7, #15]
 8011c42:	e015      	b.n	8011c70 <HAL_OSPI_DeInit+0x44>
    /* No error code can be set set as the handler is null */
  }
  else
  {
     /* Disable OctoSPI */
     __HAL_OSPI_DISABLE(hospi);
 8011c44:	687b      	ldr	r3, [r7, #4]
 8011c46:	681b      	ldr	r3, [r3, #0]
 8011c48:	681a      	ldr	r2, [r3, #0]
 8011c4a:	687b      	ldr	r3, [r7, #4]
 8011c4c:	681b      	ldr	r3, [r3, #0]
 8011c4e:	f022 0201 	bic.w	r2, r2, #1
 8011c52:	601a      	str	r2, [r3, #0]

     /* Disable free running clock if needed : must be done after OSPI disable */
     CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	681b      	ldr	r3, [r3, #0]
 8011c58:	689a      	ldr	r2, [r3, #8]
 8011c5a:	687b      	ldr	r3, [r7, #4]
 8011c5c:	681b      	ldr	r3, [r3, #0]
 8011c5e:	f022 0202 	bic.w	r2, r2, #2
 8011c62:	609a      	str	r2, [r3, #8]

     /* DeInit the low level hardware */
     hospi->MspDeInitCallback(hospi);
#else
     /* De-initialize the low-level hardware */
     HAL_OSPI_MspDeInit(hospi);
 8011c64:	6878      	ldr	r0, [r7, #4]
 8011c66:	f7ef fc77 	bl	8001558 <HAL_OSPI_MspDeInit>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

     /* Reset the driver state */
     hospi->State = HAL_OSPI_STATE_RESET;
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	2200      	movs	r2, #0
 8011c6e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  return status;
 8011c70:	7bfb      	ldrb	r3, [r7, #15]
}
 8011c72:	4618      	mov	r0, r3
 8011c74:	3710      	adds	r7, #16
 8011c76:	46bd      	mov	sp, r7
 8011c78:	bd80      	pop	{r7, pc}
	...

08011c7c <HAL_OSPI_IRQHandler>:
  * @brief  Handle OSPI interrupt request.
  * @param  hospi : OSPI handle
  * @retval None
  */
void HAL_OSPI_IRQHandler(OSPI_HandleTypeDef *hospi)
{
 8011c7c:	b580      	push	{r7, lr}
 8011c7e:	b086      	sub	sp, #24
 8011c80:	af00      	add	r7, sp, #0
 8011c82:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	681b      	ldr	r3, [r3, #0]
 8011c88:	3350      	adds	r3, #80	; 0x50
 8011c8a:	617b      	str	r3, [r7, #20]
  uint32_t flag           = hospi->Instance->SR;
 8011c8c:	687b      	ldr	r3, [r7, #4]
 8011c8e:	681b      	ldr	r3, [r3, #0]
 8011c90:	6a1b      	ldr	r3, [r3, #32]
 8011c92:	613b      	str	r3, [r7, #16]
  uint32_t itsource       = hospi->Instance->CR;
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	681b      	ldr	r3, [r3, #0]
 8011c98:	681b      	ldr	r3, [r3, #0]
 8011c9a:	60fb      	str	r3, [r7, #12]
  uint32_t currentstate   = hospi->State;
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011ca0:	60bb      	str	r3, [r7, #8]

  /* OctoSPI fifo threshold interrupt occurred -------------------------------*/
  if (((flag & HAL_OSPI_FLAG_FT) != 0U) && ((itsource & HAL_OSPI_IT_FT) != 0U))
 8011ca2:	693b      	ldr	r3, [r7, #16]
 8011ca4:	f003 0304 	and.w	r3, r3, #4
 8011ca8:	2b00      	cmp	r3, #0
 8011caa:	d03a      	beq.n	8011d22 <HAL_OSPI_IRQHandler+0xa6>
 8011cac:	68fb      	ldr	r3, [r7, #12]
 8011cae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8011cb2:	2b00      	cmp	r3, #0
 8011cb4:	d035      	beq.n	8011d22 <HAL_OSPI_IRQHandler+0xa6>
  {
    if (currentstate == HAL_OSPI_STATE_BUSY_TX)
 8011cb6:	68bb      	ldr	r3, [r7, #8]
 8011cb8:	2b18      	cmp	r3, #24
 8011cba:	d10f      	bne.n	8011cdc <HAL_OSPI_IRQHandler+0x60>
    {
      /* Write a data in the fifo */
      *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 8011cbc:	687b      	ldr	r3, [r7, #4]
 8011cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011cc0:	781a      	ldrb	r2, [r3, #0]
 8011cc2:	697b      	ldr	r3, [r7, #20]
 8011cc4:	701a      	strb	r2, [r3, #0]
      hospi->pBuffPtr++;
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011cca:	1c5a      	adds	r2, r3, #1
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	641a      	str	r2, [r3, #64]	; 0x40
      hospi->XferCount--;
 8011cd0:	687b      	ldr	r3, [r7, #4]
 8011cd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011cd4:	1e5a      	subs	r2, r3, #1
 8011cd6:	687b      	ldr	r3, [r7, #4]
 8011cd8:	649a      	str	r2, [r3, #72]	; 0x48
 8011cda:	e012      	b.n	8011d02 <HAL_OSPI_IRQHandler+0x86>
    }
    else if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8011cdc:	68bb      	ldr	r3, [r7, #8]
 8011cde:	2b28      	cmp	r3, #40	; 0x28
 8011ce0:	d10f      	bne.n	8011d02 <HAL_OSPI_IRQHandler+0x86>
    {
      /* Read a data from the fifo */
      *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011ce6:	697a      	ldr	r2, [r7, #20]
 8011ce8:	7812      	ldrb	r2, [r2, #0]
 8011cea:	b2d2      	uxtb	r2, r2
 8011cec:	701a      	strb	r2, [r3, #0]
      hospi->pBuffPtr++;
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011cf2:	1c5a      	adds	r2, r3, #1
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	641a      	str	r2, [r3, #64]	; 0x40
      hospi->XferCount--;
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011cfc:	1e5a      	subs	r2, r3, #1
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	649a      	str	r2, [r3, #72]	; 0x48
    else
    {
      /* Nothing to do */
    }

    if (hospi->XferCount == 0U)
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011d06:	2b00      	cmp	r3, #0
 8011d08:	d107      	bne.n	8011d1a <HAL_OSPI_IRQHandler+0x9e>
    {
      /* All data have been received or transmitted for the transfer */
      /* Disable fifo threshold interrupt */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_FT);
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	681b      	ldr	r3, [r3, #0]
 8011d0e:	681a      	ldr	r2, [r3, #0]
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	681b      	ldr	r3, [r3, #0]
 8011d14:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8011d18:	601a      	str	r2, [r3, #0]

    /* Fifo threshold callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->FifoThresholdCallback(hospi);
#else
    HAL_OSPI_FifoThresholdCallback(hospi);
 8011d1a:	6878      	ldr	r0, [r7, #4]
 8011d1c:	f000 fb7c 	bl	8012418 <HAL_OSPI_FifoThresholdCallback>
 8011d20:	e0e7      	b.n	8011ef2 <HAL_OSPI_IRQHandler+0x276>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)*/
  }
  /* OctoSPI transfer complete interrupt occurred ----------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TC) != 0U) && ((itsource & HAL_OSPI_IT_TC) != 0U))
 8011d22:	693b      	ldr	r3, [r7, #16]
 8011d24:	f003 0302 	and.w	r3, r3, #2
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	d067      	beq.n	8011dfc <HAL_OSPI_IRQHandler+0x180>
 8011d2c:	68fb      	ldr	r3, [r7, #12]
 8011d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011d32:	2b00      	cmp	r3, #0
 8011d34:	d062      	beq.n	8011dfc <HAL_OSPI_IRQHandler+0x180>
  {
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8011d36:	68bb      	ldr	r3, [r7, #8]
 8011d38:	2b28      	cmp	r3, #40	; 0x28
 8011d3a:	d131      	bne.n	8011da0 <HAL_OSPI_IRQHandler+0x124>
    {
      if ((hospi->XferCount > 0U) && ((flag & OCTOSPI_SR_FLEVEL) != 0U))
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011d40:	2b00      	cmp	r3, #0
 8011d42:	d015      	beq.n	8011d70 <HAL_OSPI_IRQHandler+0xf4>
 8011d44:	693b      	ldr	r3, [r7, #16]
 8011d46:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 8011d4a:	2b00      	cmp	r3, #0
 8011d4c:	d010      	beq.n	8011d70 <HAL_OSPI_IRQHandler+0xf4>
      {
        /* Read the last data received in the fifo */
        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011d52:	697a      	ldr	r2, [r7, #20]
 8011d54:	7812      	ldrb	r2, [r2, #0]
 8011d56:	b2d2      	uxtb	r2, r2
 8011d58:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011d5e:	1c5a      	adds	r2, r3, #1
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	641a      	str	r2, [r3, #64]	; 0x40
        hospi->XferCount--;
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011d68:	1e5a      	subs	r2, r3, #1
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	649a      	str	r2, [r3, #72]	; 0x48
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8011d6e:	e0bd      	b.n	8011eec <HAL_OSPI_IRQHandler+0x270>
      }
      else if(hospi->XferCount == 0U)
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011d74:	2b00      	cmp	r3, #0
 8011d76:	f040 80b9 	bne.w	8011eec <HAL_OSPI_IRQHandler+0x270>
      {
        /* Clear flag */
        hospi->Instance->FCR = HAL_OSPI_FLAG_TC;
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	681b      	ldr	r3, [r3, #0]
 8011d7e:	2202      	movs	r2, #2
 8011d80:	625a      	str	r2, [r3, #36]	; 0x24

        /* Disable the interrupts */
        __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	681b      	ldr	r3, [r3, #0]
 8011d86:	681a      	ldr	r2, [r3, #0]
 8011d88:	687b      	ldr	r3, [r7, #4]
 8011d8a:	681b      	ldr	r3, [r3, #0]
 8011d8c:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 8011d90:	601a      	str	r2, [r3, #0]

        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	2202      	movs	r2, #2
 8011d96:	651a      	str	r2, [r3, #80]	; 0x50

        /* RX complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->RxCpltCallback(hospi);
#else
        HAL_OSPI_RxCpltCallback(hospi);
 8011d98:	6878      	ldr	r0, [r7, #4]
 8011d9a:	f000 fb51 	bl	8012440 <HAL_OSPI_RxCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8011d9e:	e0a5      	b.n	8011eec <HAL_OSPI_IRQHandler+0x270>
      }
    }
    else
    {
      /* Clear flag */
      hospi->Instance->FCR = HAL_OSPI_FLAG_TC;
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	681b      	ldr	r3, [r3, #0]
 8011da4:	2202      	movs	r2, #2
 8011da6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Disable the interrupts */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	681b      	ldr	r3, [r3, #0]
 8011dac:	681a      	ldr	r2, [r3, #0]
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	681b      	ldr	r3, [r3, #0]
 8011db2:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 8011db6:	601a      	str	r2, [r3, #0]

      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	2202      	movs	r2, #2
 8011dbc:	651a      	str	r2, [r3, #80]	; 0x50

      if (currentstate == HAL_OSPI_STATE_BUSY_TX)
 8011dbe:	68bb      	ldr	r3, [r7, #8]
 8011dc0:	2b18      	cmp	r3, #24
 8011dc2:	d103      	bne.n	8011dcc <HAL_OSPI_IRQHandler+0x150>
      {
        /* TX complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->TxCpltCallback(hospi);
#else
        HAL_OSPI_TxCpltCallback(hospi);
 8011dc4:	6878      	ldr	r0, [r7, #4]
 8011dc6:	f000 fb45 	bl	8012454 <HAL_OSPI_TxCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8011dca:	e08f      	b.n	8011eec <HAL_OSPI_IRQHandler+0x270>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
      }
      else if (currentstate == HAL_OSPI_STATE_BUSY_CMD)
 8011dcc:	68bb      	ldr	r3, [r7, #8]
 8011dce:	2b08      	cmp	r3, #8
 8011dd0:	d103      	bne.n	8011dda <HAL_OSPI_IRQHandler+0x15e>
      {
        /* Command complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->CmdCpltCallback(hospi);
#else
        HAL_OSPI_CmdCpltCallback(hospi);
 8011dd2:	6878      	ldr	r0, [r7, #4]
 8011dd4:	f000 fb2a 	bl	801242c <HAL_OSPI_CmdCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8011dd8:	e088      	b.n	8011eec <HAL_OSPI_IRQHandler+0x270>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
      }
      else if (currentstate == HAL_OSPI_STATE_ABORT)
 8011dda:	68bb      	ldr	r3, [r7, #8]
 8011ddc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011de0:	f040 8084 	bne.w	8011eec <HAL_OSPI_IRQHandler+0x270>
      {
        if (hospi->ErrorCode == HAL_OSPI_ERROR_NONE)
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011de8:	2b00      	cmp	r3, #0
 8011dea:	d103      	bne.n	8011df4 <HAL_OSPI_IRQHandler+0x178>
          /* Abort called by the user */
          /* Abort complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
          hospi->AbortCpltCallback(hospi);
#else
          HAL_OSPI_AbortCpltCallback(hospi);
 8011dec:	6878      	ldr	r0, [r7, #4]
 8011dee:	f000 fb09 	bl	8012404 <HAL_OSPI_AbortCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8011df2:	e07b      	b.n	8011eec <HAL_OSPI_IRQHandler+0x270>
          /* Abort due to an error (eg : DMA error) */
          /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
          hospi->ErrorCallback(hospi);
#else
          HAL_OSPI_ErrorCallback(hospi);
 8011df4:	6878      	ldr	r0, [r7, #4]
 8011df6:	f000 fafb 	bl	80123f0 <HAL_OSPI_ErrorCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8011dfa:	e077      	b.n	8011eec <HAL_OSPI_IRQHandler+0x270>
        /* Nothing to do */
      }
    }
  }
  /* OctoSPI status match interrupt occurred ---------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_SM) != 0U) && ((itsource & HAL_OSPI_IT_SM) != 0U))
 8011dfc:	693b      	ldr	r3, [r7, #16]
 8011dfe:	f003 0308 	and.w	r3, r3, #8
 8011e02:	2b00      	cmp	r3, #0
 8011e04:	d01e      	beq.n	8011e44 <HAL_OSPI_IRQHandler+0x1c8>
 8011e06:	68fb      	ldr	r3, [r7, #12]
 8011e08:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8011e0c:	2b00      	cmp	r3, #0
 8011e0e:	d019      	beq.n	8011e44 <HAL_OSPI_IRQHandler+0x1c8>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_SM;
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	681b      	ldr	r3, [r3, #0]
 8011e14:	2208      	movs	r2, #8
 8011e16:	625a      	str	r2, [r3, #36]	; 0x24

    /* Check if automatic poll mode stop is activated */
    if ((hospi->Instance->CR & OCTOSPI_CR_APMS) != 0U)
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	681b      	ldr	r3, [r3, #0]
 8011e1c:	681b      	ldr	r3, [r3, #0]
 8011e1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011e22:	2b00      	cmp	r3, #0
 8011e24:	d00a      	beq.n	8011e3c <HAL_OSPI_IRQHandler+0x1c0>
    {
      /* Disable the interrupts */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_SM | HAL_OSPI_IT_TE);
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	681b      	ldr	r3, [r3, #0]
 8011e2a:	681a      	ldr	r2, [r3, #0]
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	681b      	ldr	r3, [r3, #0]
 8011e30:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8011e34:	601a      	str	r2, [r3, #0]

      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	2202      	movs	r2, #2
 8011e3a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Status match callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->StatusMatchCallback(hospi);
#else
    HAL_OSPI_StatusMatchCallback(hospi);
 8011e3c:	6878      	ldr	r0, [r7, #4]
 8011e3e:	f000 fb13 	bl	8012468 <HAL_OSPI_StatusMatchCallback>
 8011e42:	e056      	b.n	8011ef2 <HAL_OSPI_IRQHandler+0x276>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
  }
  /* OctoSPI transfer error interrupt occurred -------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TE) != 0U) && ((itsource & HAL_OSPI_IT_TE) != 0U))
 8011e44:	693b      	ldr	r3, [r7, #16]
 8011e46:	f003 0301 	and.w	r3, r3, #1
 8011e4a:	2b00      	cmp	r3, #0
 8011e4c:	d03c      	beq.n	8011ec8 <HAL_OSPI_IRQHandler+0x24c>
 8011e4e:	68fb      	ldr	r3, [r7, #12]
 8011e50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011e54:	2b00      	cmp	r3, #0
 8011e56:	d037      	beq.n	8011ec8 <HAL_OSPI_IRQHandler+0x24c>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_TE;
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	681b      	ldr	r3, [r3, #0]
 8011e5c:	2201      	movs	r2, #1
 8011e5e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable all interrupts */
    __HAL_OSPI_DISABLE_IT(hospi, (HAL_OSPI_IT_TO | HAL_OSPI_IT_SM | HAL_OSPI_IT_FT | HAL_OSPI_IT_TC | HAL_OSPI_IT_TE));
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	681b      	ldr	r3, [r3, #0]
 8011e64:	681a      	ldr	r2, [r3, #0]
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	681b      	ldr	r3, [r3, #0]
 8011e6a:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8011e6e:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_TRANSFER;
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	2202      	movs	r2, #2
 8011e74:	655a      	str	r2, [r3, #84]	; 0x54

    /* Check if the DMA is enabled */
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8011e76:	687b      	ldr	r3, [r7, #4]
 8011e78:	681b      	ldr	r3, [r3, #0]
 8011e7a:	681b      	ldr	r3, [r3, #0]
 8011e7c:	f003 0304 	and.w	r3, r3, #4
 8011e80:	2b00      	cmp	r3, #0
 8011e82:	d01a      	beq.n	8011eba <HAL_OSPI_IRQHandler+0x23e>
    {
      /* Disable the DMA transfer on the OctoSPI side */
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	681b      	ldr	r3, [r3, #0]
 8011e88:	681a      	ldr	r2, [r3, #0]
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	681b      	ldr	r3, [r3, #0]
 8011e8e:	f022 0204 	bic.w	r2, r2, #4
 8011e92:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transfer on the DMA side */
      hospi->hmdma->XferAbortCallback = OSPI_DMAAbortCplt;
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011e98:	4a18      	ldr	r2, [pc, #96]	; (8011efc <HAL_OSPI_IRQHandler+0x280>)
 8011e9a:	659a      	str	r2, [r3, #88]	; 0x58
      if (HAL_MDMA_Abort_IT(hospi->hmdma) != HAL_OK)
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011ea0:	4618      	mov	r0, r3
 8011ea2:	f7ff fb83 	bl	80115ac <HAL_MDMA_Abort_IT>
 8011ea6:	4603      	mov	r3, r0
 8011ea8:	2b00      	cmp	r3, #0
 8011eaa:	d021      	beq.n	8011ef0 <HAL_OSPI_IRQHandler+0x274>
      {
        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	2202      	movs	r2, #2
 8011eb0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->ErrorCallback(hospi);
#else
        HAL_OSPI_ErrorCallback(hospi);
 8011eb2:	6878      	ldr	r0, [r7, #4]
 8011eb4:	f000 fa9c 	bl	80123f0 <HAL_OSPI_ErrorCallback>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8011eb8:	e01a      	b.n	8011ef0 <HAL_OSPI_IRQHandler+0x274>
      }
    }
    else
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	2202      	movs	r2, #2
 8011ebe:	651a      	str	r2, [r3, #80]	; 0x50

      /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
      hospi->ErrorCallback(hospi);
#else
      HAL_OSPI_ErrorCallback(hospi);
 8011ec0:	6878      	ldr	r0, [r7, #4]
 8011ec2:	f000 fa95 	bl	80123f0 <HAL_OSPI_ErrorCallback>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8011ec6:	e013      	b.n	8011ef0 <HAL_OSPI_IRQHandler+0x274>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
    }
  }
  /* OctoSPI timeout interrupt occurred --------------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TO) != 0U) && ((itsource & HAL_OSPI_IT_TO) != 0U))
 8011ec8:	693b      	ldr	r3, [r7, #16]
 8011eca:	f003 0310 	and.w	r3, r3, #16
 8011ece:	2b00      	cmp	r3, #0
 8011ed0:	d00f      	beq.n	8011ef2 <HAL_OSPI_IRQHandler+0x276>
 8011ed2:	68fb      	ldr	r3, [r7, #12]
 8011ed4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8011ed8:	2b00      	cmp	r3, #0
 8011eda:	d00a      	beq.n	8011ef2 <HAL_OSPI_IRQHandler+0x276>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_TO;
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	681b      	ldr	r3, [r3, #0]
 8011ee0:	2210      	movs	r2, #16
 8011ee2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Timeout callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->TimeOutCallback(hospi);
#else
    HAL_OSPI_TimeOutCallback(hospi);
 8011ee4:	6878      	ldr	r0, [r7, #4]
 8011ee6:	f000 fac9 	bl	801247c <HAL_OSPI_TimeOutCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8011eea:	e002      	b.n	8011ef2 <HAL_OSPI_IRQHandler+0x276>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8011eec:	bf00      	nop
 8011eee:	e000      	b.n	8011ef2 <HAL_OSPI_IRQHandler+0x276>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8011ef0:	bf00      	nop
}
 8011ef2:	bf00      	nop
 8011ef4:	3718      	adds	r7, #24
 8011ef6:	46bd      	mov	sp, r7
 8011ef8:	bd80      	pop	{r7, pc}
 8011efa:	bf00      	nop
 8011efc:	08012599 	.word	0x08012599

08011f00 <HAL_OSPI_Command>:
  * @param  cmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Command(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd, uint32_t Timeout)
{
 8011f00:	b580      	push	{r7, lr}
 8011f02:	b08a      	sub	sp, #40	; 0x28
 8011f04:	af02      	add	r7, sp, #8
 8011f06:	60f8      	str	r0, [r7, #12]
 8011f08:	60b9      	str	r1, [r7, #8]
 8011f0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8011f0c:	f7fb f878 	bl	800d000 <HAL_GetTick>
 8011f10:	61b8      	str	r0, [r7, #24]
    assert_param(IS_OSPI_ALT_BYTES_SIZE    (cmd->AlternateBytesSize));
    assert_param(IS_OSPI_ALT_BYTES_DTR_MODE(cmd->AlternateBytesDtrMode));
  }

  assert_param(IS_OSPI_DATA_MODE(cmd->DataMode));
  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8011f12:	68bb      	ldr	r3, [r7, #8]
 8011f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011f16:	2b00      	cmp	r3, #0

  assert_param(IS_OSPI_DQS_MODE (cmd->DQSMode));
  assert_param(IS_OSPI_SIOO_MODE(cmd->SIOOMode));

  /* Check the state of the driver */
  state = hospi->State;
 8011f18:	68fb      	ldr	r3, [r7, #12]
 8011f1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011f1c:	617b      	str	r3, [r7, #20]
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 8011f1e:	697b      	ldr	r3, [r7, #20]
 8011f20:	2b02      	cmp	r3, #2
 8011f22:	d104      	bne.n	8011f2e <HAL_OSPI_Command+0x2e>
 8011f24:	68fb      	ldr	r3, [r7, #12]
 8011f26:	68db      	ldr	r3, [r3, #12]
 8011f28:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8011f2c:	d115      	bne.n	8011f5a <HAL_OSPI_Command+0x5a>
 8011f2e:	697b      	ldr	r3, [r7, #20]
 8011f30:	2b14      	cmp	r3, #20
 8011f32:	d107      	bne.n	8011f44 <HAL_OSPI_Command+0x44>
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && ((cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 8011f34:	68bb      	ldr	r3, [r7, #8]
 8011f36:	681b      	ldr	r3, [r3, #0]
 8011f38:	2b02      	cmp	r3, #2
 8011f3a:	d00e      	beq.n	8011f5a <HAL_OSPI_Command+0x5a>
                                                || (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))) ||
 8011f3c:	68bb      	ldr	r3, [r7, #8]
 8011f3e:	681b      	ldr	r3, [r3, #0]
 8011f40:	2b03      	cmp	r3, #3
 8011f42:	d00a      	beq.n	8011f5a <HAL_OSPI_Command+0x5a>
 8011f44:	697b      	ldr	r3, [r7, #20]
 8011f46:	2b24      	cmp	r3, #36	; 0x24
 8011f48:	d15b      	bne.n	8012002 <HAL_OSPI_Command+0x102>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 8011f4a:	68bb      	ldr	r3, [r7, #8]
 8011f4c:	681b      	ldr	r3, [r3, #0]
 8011f4e:	2b01      	cmp	r3, #1
 8011f50:	d003      	beq.n	8011f5a <HAL_OSPI_Command+0x5a>
                                                   (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))))
 8011f52:	68bb      	ldr	r3, [r7, #8]
 8011f54:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 8011f56:	2b03      	cmp	r3, #3
 8011f58:	d153      	bne.n	8012002 <HAL_OSPI_Command+0x102>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	9300      	str	r3, [sp, #0]
 8011f5e:	69bb      	ldr	r3, [r7, #24]
 8011f60:	2200      	movs	r2, #0
 8011f62:	2120      	movs	r1, #32
 8011f64:	68f8      	ldr	r0, [r7, #12]
 8011f66:	f000 fb53 	bl	8012610 <OSPI_WaitFlagStateUntilTimeout>
 8011f6a:	4603      	mov	r3, r0
 8011f6c:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 8011f6e:	7ffb      	ldrb	r3, [r7, #31]
 8011f70:	2b00      	cmp	r3, #0
 8011f72:	d14c      	bne.n	801200e <HAL_OSPI_Command+0x10e>
    {
      /* Initialize error code */
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8011f74:	68fb      	ldr	r3, [r7, #12]
 8011f76:	2200      	movs	r2, #0
 8011f78:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the registers */
      status = OSPI_ConfigCmd(hospi, cmd);
 8011f7a:	68b9      	ldr	r1, [r7, #8]
 8011f7c:	68f8      	ldr	r0, [r7, #12]
 8011f7e:	f000 fb7f 	bl	8012680 <OSPI_ConfigCmd>
 8011f82:	4603      	mov	r3, r0
 8011f84:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 8011f86:	7ffb      	ldrb	r3, [r7, #31]
 8011f88:	2b00      	cmp	r3, #0
 8011f8a:	d140      	bne.n	801200e <HAL_OSPI_Command+0x10e>
      {
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 8011f8c:	68bb      	ldr	r3, [r7, #8]
 8011f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011f90:	2b00      	cmp	r3, #0
 8011f92:	d10e      	bne.n	8011fb2 <HAL_OSPI_Command+0xb2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until TC flag is set to go back in idle state */
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	9300      	str	r3, [sp, #0]
 8011f98:	69bb      	ldr	r3, [r7, #24]
 8011f9a:	2201      	movs	r2, #1
 8011f9c:	2102      	movs	r1, #2
 8011f9e:	68f8      	ldr	r0, [r7, #12]
 8011fa0:	f000 fb36 	bl	8012610 <OSPI_WaitFlagStateUntilTimeout>
 8011fa4:	4603      	mov	r3, r0
 8011fa6:	77fb      	strb	r3, [r7, #31]

          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8011fa8:	68fb      	ldr	r3, [r7, #12]
 8011faa:	681b      	ldr	r3, [r3, #0]
 8011fac:	2202      	movs	r2, #2
 8011fae:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8011fb0:	e02d      	b.n	801200e <HAL_OSPI_Command+0x10e>
        }
        else
        {
          /* Update the state */
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 8011fb2:	68bb      	ldr	r3, [r7, #8]
 8011fb4:	681b      	ldr	r3, [r3, #0]
 8011fb6:	2b00      	cmp	r3, #0
 8011fb8:	d103      	bne.n	8011fc2 <HAL_OSPI_Command+0xc2>
          {
            hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8011fba:	68fb      	ldr	r3, [r7, #12]
 8011fbc:	2204      	movs	r2, #4
 8011fbe:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 8011fc0:	e025      	b.n	801200e <HAL_OSPI_Command+0x10e>
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 8011fc2:	68bb      	ldr	r3, [r7, #8]
 8011fc4:	681b      	ldr	r3, [r3, #0]
 8011fc6:	2b01      	cmp	r3, #1
 8011fc8:	d10b      	bne.n	8011fe2 <HAL_OSPI_Command+0xe2>
          {
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 8011fca:	68fb      	ldr	r3, [r7, #12]
 8011fcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011fce:	2b24      	cmp	r3, #36	; 0x24
 8011fd0:	d103      	bne.n	8011fda <HAL_OSPI_Command+0xda>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8011fd2:	68fb      	ldr	r3, [r7, #12]
 8011fd4:	2204      	movs	r2, #4
 8011fd6:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 8011fd8:	e019      	b.n	801200e <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 8011fda:	68fb      	ldr	r3, [r7, #12]
 8011fdc:	2214      	movs	r2, #20
 8011fde:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 8011fe0:	e015      	b.n	801200e <HAL_OSPI_Command+0x10e>
            }
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 8011fe2:	68bb      	ldr	r3, [r7, #8]
 8011fe4:	681b      	ldr	r3, [r3, #0]
 8011fe6:	2b02      	cmp	r3, #2
 8011fe8:	d111      	bne.n	801200e <HAL_OSPI_Command+0x10e>
          {
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 8011fea:	68fb      	ldr	r3, [r7, #12]
 8011fec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011fee:	2b14      	cmp	r3, #20
 8011ff0:	d103      	bne.n	8011ffa <HAL_OSPI_Command+0xfa>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8011ff2:	68fb      	ldr	r3, [r7, #12]
 8011ff4:	2204      	movs	r2, #4
 8011ff6:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 8011ff8:	e009      	b.n	801200e <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 8011ffa:	68fb      	ldr	r3, [r7, #12]
 8011ffc:	2224      	movs	r2, #36	; 0x24
 8011ffe:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 8012000:	e005      	b.n	801200e <HAL_OSPI_Command+0x10e>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 8012002:	2301      	movs	r3, #1
 8012004:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8012006:	68fb      	ldr	r3, [r7, #12]
 8012008:	2210      	movs	r2, #16
 801200a:	655a      	str	r2, [r3, #84]	; 0x54
 801200c:	e000      	b.n	8012010 <HAL_OSPI_Command+0x110>
    if (status == HAL_OK)
 801200e:	bf00      	nop
  }

  /* Return function status */
  return status;
 8012010:	7ffb      	ldrb	r3, [r7, #31]
}
 8012012:	4618      	mov	r0, r3
 8012014:	3720      	adds	r7, #32
 8012016:	46bd      	mov	sp, r7
 8012018:	bd80      	pop	{r7, pc}

0801201a <HAL_OSPI_Transmit>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Transmit(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 801201a:	b580      	push	{r7, lr}
 801201c:	b08a      	sub	sp, #40	; 0x28
 801201e:	af02      	add	r7, sp, #8
 8012020:	60f8      	str	r0, [r7, #12]
 8012022:	60b9      	str	r1, [r7, #8]
 8012024:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8012026:	f7fa ffeb 	bl	800d000 <HAL_GetTick>
 801202a:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 801202c:	68fb      	ldr	r3, [r7, #12]
 801202e:	681b      	ldr	r3, [r3, #0]
 8012030:	3350      	adds	r3, #80	; 0x50
 8012032:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 8012034:	68bb      	ldr	r3, [r7, #8]
 8012036:	2b00      	cmp	r3, #0
 8012038:	d105      	bne.n	8012046 <HAL_OSPI_Transmit+0x2c>
  {
    status = HAL_ERROR;
 801203a:	2301      	movs	r3, #1
 801203c:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 801203e:	68fb      	ldr	r3, [r7, #12]
 8012040:	2208      	movs	r2, #8
 8012042:	655a      	str	r2, [r3, #84]	; 0x54
 8012044:	e057      	b.n	80120f6 <HAL_OSPI_Transmit+0xdc>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8012046:	68fb      	ldr	r3, [r7, #12]
 8012048:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801204a:	2b04      	cmp	r3, #4
 801204c:	d14e      	bne.n	80120ec <HAL_OSPI_Transmit+0xd2>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 801204e:	68fb      	ldr	r3, [r7, #12]
 8012050:	681b      	ldr	r3, [r3, #0]
 8012052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012054:	1c5a      	adds	r2, r3, #1
 8012056:	68fb      	ldr	r3, [r7, #12]
 8012058:	649a      	str	r2, [r3, #72]	; 0x48
      hospi->XferSize  = hospi->XferCount;
 801205a:	68fb      	ldr	r3, [r7, #12]
 801205c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801205e:	68fb      	ldr	r3, [r7, #12]
 8012060:	645a      	str	r2, [r3, #68]	; 0x44
      hospi->pBuffPtr  = pData;
 8012062:	68fb      	ldr	r3, [r7, #12]
 8012064:	68ba      	ldr	r2, [r7, #8]
 8012066:	641a      	str	r2, [r3, #64]	; 0x40

      /* Configure CR register with functional mode as indirect write */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8012068:	68fb      	ldr	r3, [r7, #12]
 801206a:	681b      	ldr	r3, [r3, #0]
 801206c:	681a      	ldr	r2, [r3, #0]
 801206e:	68fb      	ldr	r3, [r7, #12]
 8012070:	681b      	ldr	r3, [r3, #0]
 8012072:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8012076:	601a      	str	r2, [r3, #0]

      do
      {
        /* Wait till fifo threshold flag is set to send data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_FT, SET, tickstart, Timeout);
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	9300      	str	r3, [sp, #0]
 801207c:	69bb      	ldr	r3, [r7, #24]
 801207e:	2201      	movs	r2, #1
 8012080:	2104      	movs	r1, #4
 8012082:	68f8      	ldr	r0, [r7, #12]
 8012084:	f000 fac4 	bl	8012610 <OSPI_WaitFlagStateUntilTimeout>
 8012088:	4603      	mov	r3, r0
 801208a:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 801208c:	7ffb      	ldrb	r3, [r7, #31]
 801208e:	2b00      	cmp	r3, #0
 8012090:	d113      	bne.n	80120ba <HAL_OSPI_Transmit+0xa0>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 8012092:	68fb      	ldr	r3, [r7, #12]
 8012094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012096:	781a      	ldrb	r2, [r3, #0]
 8012098:	697b      	ldr	r3, [r7, #20]
 801209a:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 801209c:	68fb      	ldr	r3, [r7, #12]
 801209e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80120a0:	1c5a      	adds	r2, r3, #1
 80120a2:	68fb      	ldr	r3, [r7, #12]
 80120a4:	641a      	str	r2, [r3, #64]	; 0x40
        hospi->XferCount--;
 80120a6:	68fb      	ldr	r3, [r7, #12]
 80120a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80120aa:	1e5a      	subs	r2, r3, #1
 80120ac:	68fb      	ldr	r3, [r7, #12]
 80120ae:	649a      	str	r2, [r3, #72]	; 0x48
      } while (hospi->XferCount > 0U);
 80120b0:	68fb      	ldr	r3, [r7, #12]
 80120b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80120b4:	2b00      	cmp	r3, #0
 80120b6:	d1df      	bne.n	8012078 <HAL_OSPI_Transmit+0x5e>
 80120b8:	e000      	b.n	80120bc <HAL_OSPI_Transmit+0xa2>
          break;
 80120ba:	bf00      	nop

      if (status == HAL_OK)
 80120bc:	7ffb      	ldrb	r3, [r7, #31]
 80120be:	2b00      	cmp	r3, #0
 80120c0:	d119      	bne.n	80120f6 <HAL_OSPI_Transmit+0xdc>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	9300      	str	r3, [sp, #0]
 80120c6:	69bb      	ldr	r3, [r7, #24]
 80120c8:	2201      	movs	r2, #1
 80120ca:	2102      	movs	r1, #2
 80120cc:	68f8      	ldr	r0, [r7, #12]
 80120ce:	f000 fa9f 	bl	8012610 <OSPI_WaitFlagStateUntilTimeout>
 80120d2:	4603      	mov	r3, r0
 80120d4:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 80120d6:	7ffb      	ldrb	r3, [r7, #31]
 80120d8:	2b00      	cmp	r3, #0
 80120da:	d10c      	bne.n	80120f6 <HAL_OSPI_Transmit+0xdc>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 80120dc:	68fb      	ldr	r3, [r7, #12]
 80120de:	681b      	ldr	r3, [r3, #0]
 80120e0:	2202      	movs	r2, #2
 80120e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 80120e4:	68fb      	ldr	r3, [r7, #12]
 80120e6:	2202      	movs	r2, #2
 80120e8:	651a      	str	r2, [r3, #80]	; 0x50
 80120ea:	e004      	b.n	80120f6 <HAL_OSPI_Transmit+0xdc>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 80120ec:	2301      	movs	r3, #1
 80120ee:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 80120f0:	68fb      	ldr	r3, [r7, #12]
 80120f2:	2210      	movs	r2, #16
 80120f4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }

  /* Return function status */
  return status;
 80120f6:	7ffb      	ldrb	r3, [r7, #31]
}
 80120f8:	4618      	mov	r0, r3
 80120fa:	3720      	adds	r7, #32
 80120fc:	46bd      	mov	sp, r7
 80120fe:	bd80      	pop	{r7, pc}

08012100 <HAL_OSPI_Receive>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Receive(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 8012100:	b580      	push	{r7, lr}
 8012102:	b08c      	sub	sp, #48	; 0x30
 8012104:	af02      	add	r7, sp, #8
 8012106:	60f8      	str	r0, [r7, #12]
 8012108:	60b9      	str	r1, [r7, #8]
 801210a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 801210c:	f7fa ff78 	bl	800d000 <HAL_GetTick>
 8012110:	6238      	str	r0, [r7, #32]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8012112:	68fb      	ldr	r3, [r7, #12]
 8012114:	681b      	ldr	r3, [r3, #0]
 8012116:	3350      	adds	r3, #80	; 0x50
 8012118:	61fb      	str	r3, [r7, #28]
  uint32_t addr_reg = hospi->Instance->AR;
 801211a:	68fb      	ldr	r3, [r7, #12]
 801211c:	681b      	ldr	r3, [r3, #0]
 801211e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012120:	61bb      	str	r3, [r7, #24]
  uint32_t ir_reg = hospi->Instance->IR;
 8012122:	68fb      	ldr	r3, [r7, #12]
 8012124:	681b      	ldr	r3, [r3, #0]
 8012126:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 801212a:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 801212c:	68bb      	ldr	r3, [r7, #8]
 801212e:	2b00      	cmp	r3, #0
 8012130:	d106      	bne.n	8012140 <HAL_OSPI_Receive+0x40>
  {
    status = HAL_ERROR;
 8012132:	2301      	movs	r3, #1
 8012134:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8012138:	68fb      	ldr	r3, [r7, #12]
 801213a:	2208      	movs	r2, #8
 801213c:	655a      	str	r2, [r3, #84]	; 0x54
 801213e:	e07c      	b.n	801223a <HAL_OSPI_Receive+0x13a>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8012140:	68fb      	ldr	r3, [r7, #12]
 8012142:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012144:	2b04      	cmp	r3, #4
 8012146:	d172      	bne.n	801222e <HAL_OSPI_Receive+0x12e>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8012148:	68fb      	ldr	r3, [r7, #12]
 801214a:	681b      	ldr	r3, [r3, #0]
 801214c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801214e:	1c5a      	adds	r2, r3, #1
 8012150:	68fb      	ldr	r3, [r7, #12]
 8012152:	649a      	str	r2, [r3, #72]	; 0x48
      hospi->XferSize  = hospi->XferCount;
 8012154:	68fb      	ldr	r3, [r7, #12]
 8012156:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8012158:	68fb      	ldr	r3, [r7, #12]
 801215a:	645a      	str	r2, [r3, #68]	; 0x44
      hospi->pBuffPtr  = pData;
 801215c:	68fb      	ldr	r3, [r7, #12]
 801215e:	68ba      	ldr	r2, [r7, #8]
 8012160:	641a      	str	r2, [r3, #64]	; 0x40

      /* Configure CR register with functional mode as indirect read */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8012162:	68fb      	ldr	r3, [r7, #12]
 8012164:	681b      	ldr	r3, [r3, #0]
 8012166:	681b      	ldr	r3, [r3, #0]
 8012168:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 801216c:	68fb      	ldr	r3, [r7, #12]
 801216e:	681b      	ldr	r3, [r3, #0]
 8012170:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8012174:	601a      	str	r2, [r3, #0]

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8012176:	68fb      	ldr	r3, [r7, #12]
 8012178:	68db      	ldr	r3, [r3, #12]
 801217a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801217e:	d104      	bne.n	801218a <HAL_OSPI_Receive+0x8a>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 8012180:	68fb      	ldr	r3, [r7, #12]
 8012182:	681b      	ldr	r3, [r3, #0]
 8012184:	69ba      	ldr	r2, [r7, #24]
 8012186:	649a      	str	r2, [r3, #72]	; 0x48
 8012188:	e011      	b.n	80121ae <HAL_OSPI_Receive+0xae>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 801218a:	68fb      	ldr	r3, [r7, #12]
 801218c:	681b      	ldr	r3, [r3, #0]
 801218e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8012192:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8012196:	2b00      	cmp	r3, #0
 8012198:	d004      	beq.n	80121a4 <HAL_OSPI_Receive+0xa4>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 801219a:	68fb      	ldr	r3, [r7, #12]
 801219c:	681b      	ldr	r3, [r3, #0]
 801219e:	69ba      	ldr	r2, [r7, #24]
 80121a0:	649a      	str	r2, [r3, #72]	; 0x48
 80121a2:	e004      	b.n	80121ae <HAL_OSPI_Receive+0xae>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 80121a4:	68fb      	ldr	r3, [r7, #12]
 80121a6:	681b      	ldr	r3, [r3, #0]
 80121a8:	697a      	ldr	r2, [r7, #20]
 80121aa:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
      }

      do
      {
        /* Wait till fifo threshold or transfer complete flags are set to read received data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, (HAL_OSPI_FLAG_FT | HAL_OSPI_FLAG_TC), SET, tickstart, Timeout);
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	9300      	str	r3, [sp, #0]
 80121b2:	6a3b      	ldr	r3, [r7, #32]
 80121b4:	2201      	movs	r2, #1
 80121b6:	2106      	movs	r1, #6
 80121b8:	68f8      	ldr	r0, [r7, #12]
 80121ba:	f000 fa29 	bl	8012610 <OSPI_WaitFlagStateUntilTimeout>
 80121be:	4603      	mov	r3, r0
 80121c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status != HAL_OK)
 80121c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80121c8:	2b00      	cmp	r3, #0
 80121ca:	d114      	bne.n	80121f6 <HAL_OSPI_Receive+0xf6>
        {
          break;
        }

        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 80121cc:	68fb      	ldr	r3, [r7, #12]
 80121ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80121d0:	69fa      	ldr	r2, [r7, #28]
 80121d2:	7812      	ldrb	r2, [r2, #0]
 80121d4:	b2d2      	uxtb	r2, r2
 80121d6:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 80121d8:	68fb      	ldr	r3, [r7, #12]
 80121da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80121dc:	1c5a      	adds	r2, r3, #1
 80121de:	68fb      	ldr	r3, [r7, #12]
 80121e0:	641a      	str	r2, [r3, #64]	; 0x40
        hospi->XferCount--;
 80121e2:	68fb      	ldr	r3, [r7, #12]
 80121e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80121e6:	1e5a      	subs	r2, r3, #1
 80121e8:	68fb      	ldr	r3, [r7, #12]
 80121ea:	649a      	str	r2, [r3, #72]	; 0x48
      } while(hospi->XferCount > 0U);
 80121ec:	68fb      	ldr	r3, [r7, #12]
 80121ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80121f0:	2b00      	cmp	r3, #0
 80121f2:	d1dc      	bne.n	80121ae <HAL_OSPI_Receive+0xae>
 80121f4:	e000      	b.n	80121f8 <HAL_OSPI_Receive+0xf8>
          break;
 80121f6:	bf00      	nop

      if (status == HAL_OK)
 80121f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80121fc:	2b00      	cmp	r3, #0
 80121fe:	d11c      	bne.n	801223a <HAL_OSPI_Receive+0x13a>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	9300      	str	r3, [sp, #0]
 8012204:	6a3b      	ldr	r3, [r7, #32]
 8012206:	2201      	movs	r2, #1
 8012208:	2102      	movs	r1, #2
 801220a:	68f8      	ldr	r0, [r7, #12]
 801220c:	f000 fa00 	bl	8012610 <OSPI_WaitFlagStateUntilTimeout>
 8012210:	4603      	mov	r3, r0
 8012212:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status == HAL_OK)
 8012216:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801221a:	2b00      	cmp	r3, #0
 801221c:	d10d      	bne.n	801223a <HAL_OSPI_Receive+0x13a>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 801221e:	68fb      	ldr	r3, [r7, #12]
 8012220:	681b      	ldr	r3, [r3, #0]
 8012222:	2202      	movs	r2, #2
 8012224:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 8012226:	68fb      	ldr	r3, [r7, #12]
 8012228:	2202      	movs	r2, #2
 801222a:	651a      	str	r2, [r3, #80]	; 0x50
 801222c:	e005      	b.n	801223a <HAL_OSPI_Receive+0x13a>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 801222e:	2301      	movs	r3, #1
 8012230:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8012234:	68fb      	ldr	r3, [r7, #12]
 8012236:	2210      	movs	r2, #16
 8012238:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }

  /* Return function status */
  return status;
 801223a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801223e:	4618      	mov	r0, r3
 8012240:	3728      	adds	r7, #40	; 0x28
 8012242:	46bd      	mov	sp, r7
 8012244:	bd80      	pop	{r7, pc}

08012246 <HAL_OSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_AutoPolling(OSPI_HandleTypeDef *hospi, OSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8012246:	b580      	push	{r7, lr}
 8012248:	b08a      	sub	sp, #40	; 0x28
 801224a:	af02      	add	r7, sp, #8
 801224c:	60f8      	str	r0, [r7, #12]
 801224e:	60b9      	str	r1, [r7, #8]
 8012250:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8012252:	f7fa fed5 	bl	800d000 <HAL_GetTick>
 8012256:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = hospi->Instance->AR;
 8012258:	68fb      	ldr	r3, [r7, #12]
 801225a:	681b      	ldr	r3, [r3, #0]
 801225c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801225e:	617b      	str	r3, [r7, #20]
  uint32_t ir_reg = hospi->Instance->IR;
 8012260:	68fb      	ldr	r3, [r7, #12]
 8012262:	681b      	ldr	r3, [r3, #0]
 8012264:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8012268:	613b      	str	r3, [r7, #16]
  assert_param(IS_OSPI_AUTOMATIC_STOP   (cfg->AutomaticStop));
  assert_param(IS_OSPI_INTERVAL         (cfg->Interval));
  assert_param(IS_OSPI_STATUS_BYTES_SIZE(dlr_reg+1U));

  /* Check the state */
  if ((hospi->State == HAL_OSPI_STATE_CMD_CFG) && (cfg->AutomaticStop == HAL_OSPI_AUTOMATIC_STOP_ENABLE))
 801226a:	68fb      	ldr	r3, [r7, #12]
 801226c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801226e:	2b04      	cmp	r3, #4
 8012270:	d164      	bne.n	801233c <HAL_OSPI_AutoPolling+0xf6>
 8012272:	68bb      	ldr	r3, [r7, #8]
 8012274:	68db      	ldr	r3, [r3, #12]
 8012276:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801227a:	d15f      	bne.n	801233c <HAL_OSPI_AutoPolling+0xf6>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 801227c:	687b      	ldr	r3, [r7, #4]
 801227e:	9300      	str	r3, [sp, #0]
 8012280:	69bb      	ldr	r3, [r7, #24]
 8012282:	2200      	movs	r2, #0
 8012284:	2120      	movs	r1, #32
 8012286:	68f8      	ldr	r0, [r7, #12]
 8012288:	f000 f9c2 	bl	8012610 <OSPI_WaitFlagStateUntilTimeout>
 801228c:	4603      	mov	r3, r0
 801228e:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 8012290:	7ffb      	ldrb	r3, [r7, #31]
 8012292:	2b00      	cmp	r3, #0
 8012294:	d158      	bne.n	8012348 <HAL_OSPI_AutoPolling+0x102>
    {
      /* Configure registers */
      WRITE_REG (hospi->Instance->PSMAR, cfg->Match);
 8012296:	68fb      	ldr	r3, [r7, #12]
 8012298:	681b      	ldr	r3, [r3, #0]
 801229a:	68ba      	ldr	r2, [r7, #8]
 801229c:	6812      	ldr	r2, [r2, #0]
 801229e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      WRITE_REG (hospi->Instance->PSMKR, cfg->Mask);
 80122a2:	68fb      	ldr	r3, [r7, #12]
 80122a4:	681b      	ldr	r3, [r3, #0]
 80122a6:	68ba      	ldr	r2, [r7, #8]
 80122a8:	6852      	ldr	r2, [r2, #4]
 80122aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      WRITE_REG (hospi->Instance->PIR,   cfg->Interval);
 80122ae:	68fb      	ldr	r3, [r7, #12]
 80122b0:	681b      	ldr	r3, [r3, #0]
 80122b2:	68ba      	ldr	r2, [r7, #8]
 80122b4:	6912      	ldr	r2, [r2, #16]
 80122b6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      MODIFY_REG(hospi->Instance->CR,    (OCTOSPI_CR_PMM | OCTOSPI_CR_APMS | OCTOSPI_CR_FMODE),
 80122ba:	68fb      	ldr	r3, [r7, #12]
 80122bc:	681b      	ldr	r3, [r3, #0]
 80122be:	681b      	ldr	r3, [r3, #0]
 80122c0:	f023 5243 	bic.w	r2, r3, #817889280	; 0x30c00000
 80122c4:	68bb      	ldr	r3, [r7, #8]
 80122c6:	6899      	ldr	r1, [r3, #8]
 80122c8:	68bb      	ldr	r3, [r7, #8]
 80122ca:	68db      	ldr	r3, [r3, #12]
 80122cc:	430b      	orrs	r3, r1
 80122ce:	431a      	orrs	r2, r3
 80122d0:	68fb      	ldr	r3, [r7, #12]
 80122d2:	681b      	ldr	r3, [r3, #0]
 80122d4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80122d8:	601a      	str	r2, [r3, #0]
                 (cfg->MatchMode | cfg->AutomaticStop | OSPI_FUNCTIONAL_MODE_AUTO_POLLING));

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 80122da:	68fb      	ldr	r3, [r7, #12]
 80122dc:	68db      	ldr	r3, [r3, #12]
 80122de:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80122e2:	d104      	bne.n	80122ee <HAL_OSPI_AutoPolling+0xa8>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 80122e4:	68fb      	ldr	r3, [r7, #12]
 80122e6:	681b      	ldr	r3, [r3, #0]
 80122e8:	697a      	ldr	r2, [r7, #20]
 80122ea:	649a      	str	r2, [r3, #72]	; 0x48
 80122ec:	e011      	b.n	8012312 <HAL_OSPI_AutoPolling+0xcc>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 80122ee:	68fb      	ldr	r3, [r7, #12]
 80122f0:	681b      	ldr	r3, [r3, #0]
 80122f2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80122f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80122fa:	2b00      	cmp	r3, #0
 80122fc:	d004      	beq.n	8012308 <HAL_OSPI_AutoPolling+0xc2>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 80122fe:	68fb      	ldr	r3, [r7, #12]
 8012300:	681b      	ldr	r3, [r3, #0]
 8012302:	697a      	ldr	r2, [r7, #20]
 8012304:	649a      	str	r2, [r3, #72]	; 0x48
 8012306:	e004      	b.n	8012312 <HAL_OSPI_AutoPolling+0xcc>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 8012308:	68fb      	ldr	r3, [r7, #12]
 801230a:	681b      	ldr	r3, [r3, #0]
 801230c:	693a      	ldr	r2, [r7, #16]
 801230e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        }
      }

      /* Wait till status match flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_SM, SET, tickstart, Timeout);
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	9300      	str	r3, [sp, #0]
 8012316:	69bb      	ldr	r3, [r7, #24]
 8012318:	2201      	movs	r2, #1
 801231a:	2108      	movs	r1, #8
 801231c:	68f8      	ldr	r0, [r7, #12]
 801231e:	f000 f977 	bl	8012610 <OSPI_WaitFlagStateUntilTimeout>
 8012322:	4603      	mov	r3, r0
 8012324:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 8012326:	7ffb      	ldrb	r3, [r7, #31]
 8012328:	2b00      	cmp	r3, #0
 801232a:	d10d      	bne.n	8012348 <HAL_OSPI_AutoPolling+0x102>
      {
        /* Clear status match flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_SM);
 801232c:	68fb      	ldr	r3, [r7, #12]
 801232e:	681b      	ldr	r3, [r3, #0]
 8012330:	2208      	movs	r2, #8
 8012332:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 8012334:	68fb      	ldr	r3, [r7, #12]
 8012336:	2202      	movs	r2, #2
 8012338:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 801233a:	e005      	b.n	8012348 <HAL_OSPI_AutoPolling+0x102>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 801233c:	2301      	movs	r3, #1
 801233e:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8012340:	68fb      	ldr	r3, [r7, #12]
 8012342:	2210      	movs	r2, #16
 8012344:	655a      	str	r2, [r3, #84]	; 0x54
 8012346:	e000      	b.n	801234a <HAL_OSPI_AutoPolling+0x104>
    if (status == HAL_OK)
 8012348:	bf00      	nop
  }

  /* Return function status */
  return status;
 801234a:	7ffb      	ldrb	r3, [r7, #31]
}
 801234c:	4618      	mov	r0, r3
 801234e:	3720      	adds	r7, #32
 8012350:	46bd      	mov	sp, r7
 8012352:	bd80      	pop	{r7, pc}

08012354 <HAL_OSPI_MemoryMapped>:
  * @param  cfg   : structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_MemoryMapped(OSPI_HandleTypeDef *hospi, OSPI_MemoryMappedTypeDef *cfg)
{
 8012354:	b580      	push	{r7, lr}
 8012356:	b086      	sub	sp, #24
 8012358:	af02      	add	r7, sp, #8
 801235a:	6078      	str	r0, [r7, #4]
 801235c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 801235e:	f7fa fe4f 	bl	800d000 <HAL_GetTick>
 8012362:	60b8      	str	r0, [r7, #8]

  /* Check the parameters of the memory-mapped configuration structure */
  assert_param(IS_OSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Check the state */
  if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012368:	2b04      	cmp	r3, #4
 801236a:	d134      	bne.n	80123d6 <HAL_OSPI_MemoryMapped+0x82>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012370:	9300      	str	r3, [sp, #0]
 8012372:	68bb      	ldr	r3, [r7, #8]
 8012374:	2200      	movs	r2, #0
 8012376:	2120      	movs	r1, #32
 8012378:	6878      	ldr	r0, [r7, #4]
 801237a:	f000 f949 	bl	8012610 <OSPI_WaitFlagStateUntilTimeout>
 801237e:	4603      	mov	r3, r0
 8012380:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8012382:	7bfb      	ldrb	r3, [r7, #15]
 8012384:	2b00      	cmp	r3, #0
 8012386:	d12b      	bne.n	80123e0 <HAL_OSPI_MemoryMapped+0x8c>
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_BUSY_MEM_MAPPED;
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	2288      	movs	r2, #136	; 0x88
 801238c:	651a      	str	r2, [r3, #80]	; 0x50

      if (cfg->TimeOutActivation == HAL_OSPI_TIMEOUT_COUNTER_ENABLE)
 801238e:	683b      	ldr	r3, [r7, #0]
 8012390:	681b      	ldr	r3, [r3, #0]
 8012392:	2b08      	cmp	r3, #8
 8012394:	d111      	bne.n	80123ba <HAL_OSPI_MemoryMapped+0x66>
      {
        assert_param(IS_OSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure register */
        WRITE_REG(hospi->Instance->LPTR, cfg->TimeOutPeriod);
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	681b      	ldr	r3, [r3, #0]
 801239a:	683a      	ldr	r2, [r7, #0]
 801239c:	6852      	ldr	r2, [r2, #4]
 801239e:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130

        /* Clear flags related to interrupt */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TO);
 80123a2:	687b      	ldr	r3, [r7, #4]
 80123a4:	681b      	ldr	r3, [r3, #0]
 80123a6:	2210      	movs	r2, #16
 80123a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Enable the timeout interrupt */
        __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TO);
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	681b      	ldr	r3, [r3, #0]
 80123ae:	681a      	ldr	r2, [r3, #0]
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	681b      	ldr	r3, [r3, #0]
 80123b4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80123b8:	601a      	str	r2, [r3, #0]
      }

      /* Configure CR register with functional mode as memory-mapped */
      MODIFY_REG(hospi->Instance->CR, (OCTOSPI_CR_TCEN | OCTOSPI_CR_FMODE),
 80123ba:	687b      	ldr	r3, [r7, #4]
 80123bc:	681b      	ldr	r3, [r3, #0]
 80123be:	681a      	ldr	r2, [r3, #0]
 80123c0:	4b0a      	ldr	r3, [pc, #40]	; (80123ec <HAL_OSPI_MemoryMapped+0x98>)
 80123c2:	4013      	ands	r3, r2
 80123c4:	683a      	ldr	r2, [r7, #0]
 80123c6:	6812      	ldr	r2, [r2, #0]
 80123c8:	431a      	orrs	r2, r3
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	681b      	ldr	r3, [r3, #0]
 80123ce:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80123d2:	601a      	str	r2, [r3, #0]
 80123d4:	e004      	b.n	80123e0 <HAL_OSPI_MemoryMapped+0x8c>
                 (cfg->TimeOutActivation | OSPI_FUNCTIONAL_MODE_MEMORY_MAPPED));
    }
  }
  else
  {
    status = HAL_ERROR;
 80123d6:	2301      	movs	r3, #1
 80123d8:	73fb      	strb	r3, [r7, #15]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 80123da:	687b      	ldr	r3, [r7, #4]
 80123dc:	2210      	movs	r2, #16
 80123de:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Return function status */
  return status;
 80123e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80123e2:	4618      	mov	r0, r3
 80123e4:	3710      	adds	r7, #16
 80123e6:	46bd      	mov	sp, r7
 80123e8:	bd80      	pop	{r7, pc}
 80123ea:	bf00      	nop
 80123ec:	cffffff7 	.word	0xcffffff7

080123f0 <HAL_OSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_ErrorCallback(OSPI_HandleTypeDef *hospi)
{
 80123f0:	b480      	push	{r7}
 80123f2:	b083      	sub	sp, #12
 80123f4:	af00      	add	r7, sp, #0
 80123f6:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_ErrorCallback could be implemented in the user file
   */
}
 80123f8:	bf00      	nop
 80123fa:	370c      	adds	r7, #12
 80123fc:	46bd      	mov	sp, r7
 80123fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012402:	4770      	bx	lr

08012404 <HAL_OSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_AbortCpltCallback(OSPI_HandleTypeDef *hospi)
{
 8012404:	b480      	push	{r7}
 8012406:	b083      	sub	sp, #12
 8012408:	af00      	add	r7, sp, #0
 801240a:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_AbortCpltCallback could be implemented in the user file
   */
}
 801240c:	bf00      	nop
 801240e:	370c      	adds	r7, #12
 8012410:	46bd      	mov	sp, r7
 8012412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012416:	4770      	bx	lr

08012418 <HAL_OSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_FifoThresholdCallback(OSPI_HandleTypeDef *hospi)
{
 8012418:	b480      	push	{r7}
 801241a:	b083      	sub	sp, #12
 801241c:	af00      	add	r7, sp, #0
 801241e:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 8012420:	bf00      	nop
 8012422:	370c      	adds	r7, #12
 8012424:	46bd      	mov	sp, r7
 8012426:	f85d 7b04 	ldr.w	r7, [sp], #4
 801242a:	4770      	bx	lr

0801242c <HAL_OSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_CmdCpltCallback(OSPI_HandleTypeDef *hospi)
{
 801242c:	b480      	push	{r7}
 801242e:	b083      	sub	sp, #12
 8012430:	af00      	add	r7, sp, #0
 8012432:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_CmdCpltCallback could be implemented in the user file
   */
}
 8012434:	bf00      	nop
 8012436:	370c      	adds	r7, #12
 8012438:	46bd      	mov	sp, r7
 801243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801243e:	4770      	bx	lr

08012440 <HAL_OSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_RxCpltCallback(OSPI_HandleTypeDef *hospi)
{
 8012440:	b480      	push	{r7}
 8012442:	b083      	sub	sp, #12
 8012444:	af00      	add	r7, sp, #0
 8012446:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_RxCpltCallback could be implemented in the user file
   */
}
 8012448:	bf00      	nop
 801244a:	370c      	adds	r7, #12
 801244c:	46bd      	mov	sp, r7
 801244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012452:	4770      	bx	lr

08012454 <HAL_OSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
 __weak void HAL_OSPI_TxCpltCallback(OSPI_HandleTypeDef *hospi)
{
 8012454:	b480      	push	{r7}
 8012456:	b083      	sub	sp, #12
 8012458:	af00      	add	r7, sp, #0
 801245a:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_TxCpltCallback could be implemented in the user file
   */
}
 801245c:	bf00      	nop
 801245e:	370c      	adds	r7, #12
 8012460:	46bd      	mov	sp, r7
 8012462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012466:	4770      	bx	lr

08012468 <HAL_OSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_StatusMatchCallback(OSPI_HandleTypeDef *hospi)
{
 8012468:	b480      	push	{r7}
 801246a:	b083      	sub	sp, #12
 801246c:	af00      	add	r7, sp, #0
 801246e:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_StatusMatchCallback could be implemented in the user file
   */
}
 8012470:	bf00      	nop
 8012472:	370c      	adds	r7, #12
 8012474:	46bd      	mov	sp, r7
 8012476:	f85d 7b04 	ldr.w	r7, [sp], #4
 801247a:	4770      	bx	lr

0801247c <HAL_OSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_TimeOutCallback(OSPI_HandleTypeDef *hospi)
{
 801247c:	b480      	push	{r7}
 801247e:	b083      	sub	sp, #12
 8012480:	af00      	add	r7, sp, #0
 8012482:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_TimeOutCallback could be implemented in the user file
   */
}
 8012484:	bf00      	nop
 8012486:	370c      	adds	r7, #12
 8012488:	46bd      	mov	sp, r7
 801248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801248e:	4770      	bx	lr

08012490 <HAL_OSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hospi : OSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_OSPI_Abort(OSPI_HandleTypeDef *hospi)
{
 8012490:	b580      	push	{r7, lr}
 8012492:	b088      	sub	sp, #32
 8012494:	af02      	add	r7, sp, #8
 8012496:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8012498:	2300      	movs	r3, #0
 801249a:	75fb      	strb	r3, [r7, #23]
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 801249c:	f7fa fdb0 	bl	800d000 <HAL_GetTick>
 80124a0:	6138      	str	r0, [r7, #16]

  /* Check if the state is in one of the busy or configured states */
  state = hospi->State;
 80124a2:	687b      	ldr	r3, [r7, #4]
 80124a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80124a6:	60fb      	str	r3, [r7, #12]
  if (((state & OSPI_BUSY_STATE_MASK) != 0U) || ((state & OSPI_CFG_STATE_MASK) != 0U))
 80124a8:	68fb      	ldr	r3, [r7, #12]
 80124aa:	f003 0308 	and.w	r3, r3, #8
 80124ae:	2b00      	cmp	r3, #0
 80124b0:	d104      	bne.n	80124bc <HAL_OSPI_Abort+0x2c>
 80124b2:	68fb      	ldr	r3, [r7, #12]
 80124b4:	f003 0304 	and.w	r3, r3, #4
 80124b8:	2b00      	cmp	r3, #0
 80124ba:	d052      	beq.n	8012562 <HAL_OSPI_Abort+0xd2>
  {
    /* Check if the DMA is enabled */
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 80124bc:	687b      	ldr	r3, [r7, #4]
 80124be:	681b      	ldr	r3, [r3, #0]
 80124c0:	681b      	ldr	r3, [r3, #0]
 80124c2:	f003 0304 	and.w	r3, r3, #4
 80124c6:	2b00      	cmp	r3, #0
 80124c8:	d014      	beq.n	80124f4 <HAL_OSPI_Abort+0x64>
    {
      /* Disable the DMA transfer on the OctoSPI side */
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 80124ca:	687b      	ldr	r3, [r7, #4]
 80124cc:	681b      	ldr	r3, [r3, #0]
 80124ce:	681a      	ldr	r2, [r3, #0]
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	681b      	ldr	r3, [r3, #0]
 80124d4:	f022 0204 	bic.w	r2, r2, #4
 80124d8:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transfer on the DMA side */
      status = HAL_MDMA_Abort(hospi->hmdma);
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80124de:	4618      	mov	r0, r3
 80124e0:	f7ff f809 	bl	80114f6 <HAL_MDMA_Abort>
 80124e4:	4603      	mov	r3, r0
 80124e6:	75fb      	strb	r3, [r7, #23]
      if (status != HAL_OK)
 80124e8:	7dfb      	ldrb	r3, [r7, #23]
 80124ea:	2b00      	cmp	r3, #0
 80124ec:	d002      	beq.n	80124f4 <HAL_OSPI_Abort+0x64>
      {
        hospi->ErrorCode = HAL_OSPI_ERROR_DMA;
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	2204      	movs	r2, #4
 80124f2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	681b      	ldr	r3, [r3, #0]
 80124f8:	6a1b      	ldr	r3, [r3, #32]
 80124fa:	f003 0320 	and.w	r3, r3, #32
 80124fe:	2b00      	cmp	r3, #0
 8012500:	d02b      	beq.n	801255a <HAL_OSPI_Abort+0xca>
    {
      /* Perform an abort of the OctoSPI */
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	681b      	ldr	r3, [r3, #0]
 8012506:	681a      	ldr	r2, [r3, #0]
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	681b      	ldr	r3, [r3, #0]
 801250c:	f042 0202 	orr.w	r2, r2, #2
 8012510:	601a      	str	r2, [r3, #0]

      /* Wait until the transfer complete flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, hospi->Timeout);
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012516:	9300      	str	r3, [sp, #0]
 8012518:	693b      	ldr	r3, [r7, #16]
 801251a:	2201      	movs	r2, #1
 801251c:	2102      	movs	r1, #2
 801251e:	6878      	ldr	r0, [r7, #4]
 8012520:	f000 f876 	bl	8012610 <OSPI_WaitFlagStateUntilTimeout>
 8012524:	4603      	mov	r3, r0
 8012526:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8012528:	7dfb      	ldrb	r3, [r7, #23]
 801252a:	2b00      	cmp	r3, #0
 801252c:	d11f      	bne.n	801256e <HAL_OSPI_Abort+0xde>
      {
        /* Clear transfer complete flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 801252e:	687b      	ldr	r3, [r7, #4]
 8012530:	681b      	ldr	r3, [r3, #0]
 8012532:	2202      	movs	r2, #2
 8012534:	625a      	str	r2, [r3, #36]	; 0x24

        /* Wait until the busy flag is reset to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801253a:	9300      	str	r3, [sp, #0]
 801253c:	693b      	ldr	r3, [r7, #16]
 801253e:	2200      	movs	r2, #0
 8012540:	2120      	movs	r1, #32
 8012542:	6878      	ldr	r0, [r7, #4]
 8012544:	f000 f864 	bl	8012610 <OSPI_WaitFlagStateUntilTimeout>
 8012548:	4603      	mov	r3, r0
 801254a:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 801254c:	7dfb      	ldrb	r3, [r7, #23]
 801254e:	2b00      	cmp	r3, #0
 8012550:	d10d      	bne.n	801256e <HAL_OSPI_Abort+0xde>
        {
          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	2202      	movs	r2, #2
 8012556:	651a      	str	r2, [r3, #80]	; 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8012558:	e009      	b.n	801256e <HAL_OSPI_Abort+0xde>
      }
    }
    else
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 801255a:	687b      	ldr	r3, [r7, #4]
 801255c:	2202      	movs	r2, #2
 801255e:	651a      	str	r2, [r3, #80]	; 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8012560:	e005      	b.n	801256e <HAL_OSPI_Abort+0xde>
    }
  }
  else
  {
    status = HAL_ERROR;
 8012562:	2301      	movs	r3, #1
 8012564:	75fb      	strb	r3, [r7, #23]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8012566:	687b      	ldr	r3, [r7, #4]
 8012568:	2210      	movs	r2, #16
 801256a:	655a      	str	r2, [r3, #84]	; 0x54
 801256c:	e000      	b.n	8012570 <HAL_OSPI_Abort+0xe0>
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 801256e:	bf00      	nop
  }

  /* Return function status */
  return status;
 8012570:	7dfb      	ldrb	r3, [r7, #23]
}
 8012572:	4618      	mov	r0, r3
 8012574:	3718      	adds	r7, #24
 8012576:	46bd      	mov	sp, r7
 8012578:	bd80      	pop	{r7, pc}

0801257a <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 801257a:	b480      	push	{r7}
 801257c:	b083      	sub	sp, #12
 801257e:	af00      	add	r7, sp, #0
 8012580:	6078      	str	r0, [r7, #4]
 8012582:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8012584:	687b      	ldr	r3, [r7, #4]
 8012586:	683a      	ldr	r2, [r7, #0]
 8012588:	659a      	str	r2, [r3, #88]	; 0x58
  return HAL_OK;
 801258a:	2300      	movs	r3, #0
}
 801258c:	4618      	mov	r0, r3
 801258e:	370c      	adds	r7, #12
 8012590:	46bd      	mov	sp, r7
 8012592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012596:	4770      	bx	lr

08012598 <OSPI_DMAAbortCplt>:
  * @brief  DMA OSPI abort complete callback.
  * @param  hdma : DMA handle
  * @retval None
  */
static void OSPI_DMAAbortCplt(MDMA_HandleTypeDef *hmdma)
{
 8012598:	b580      	push	{r7, lr}
 801259a:	b084      	sub	sp, #16
 801259c:	af00      	add	r7, sp, #0
 801259e:	6078      	str	r0, [r7, #4]
  OSPI_HandleTypeDef* hospi = ( OSPI_HandleTypeDef* )(hmdma->Parent);
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80125a4:	60fb      	str	r3, [r7, #12]
  hospi->XferCount = 0;
 80125a6:	68fb      	ldr	r3, [r7, #12]
 80125a8:	2200      	movs	r2, #0
 80125aa:	649a      	str	r2, [r3, #72]	; 0x48

  /* Check the state */
  if (hospi->State == HAL_OSPI_STATE_ABORT)
 80125ac:	68fb      	ldr	r3, [r7, #12]
 80125ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80125b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80125b4:	d122      	bne.n	80125fc <OSPI_DMAAbortCplt+0x64>
  {
    /* DMA abort called by OctoSPI abort */
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 80125b6:	68fb      	ldr	r3, [r7, #12]
 80125b8:	681b      	ldr	r3, [r3, #0]
 80125ba:	6a1b      	ldr	r3, [r3, #32]
 80125bc:	f003 0320 	and.w	r3, r3, #32
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	d014      	beq.n	80125ee <OSPI_DMAAbortCplt+0x56>
    {
      /* Clear transfer complete flag */
      __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 80125c4:	68fb      	ldr	r3, [r7, #12]
 80125c6:	681b      	ldr	r3, [r3, #0]
 80125c8:	2202      	movs	r2, #2
 80125ca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enable the transfer complete interrupts */
      __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TC);
 80125cc:	68fb      	ldr	r3, [r7, #12]
 80125ce:	681b      	ldr	r3, [r3, #0]
 80125d0:	681a      	ldr	r2, [r3, #0]
 80125d2:	68fb      	ldr	r3, [r7, #12]
 80125d4:	681b      	ldr	r3, [r3, #0]
 80125d6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80125da:	601a      	str	r2, [r3, #0]

      /* Perform an abort of the OctoSPI */
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 80125dc:	68fb      	ldr	r3, [r7, #12]
 80125de:	681b      	ldr	r3, [r3, #0]
 80125e0:	681a      	ldr	r2, [r3, #0]
 80125e2:	68fb      	ldr	r3, [r7, #12]
 80125e4:	681b      	ldr	r3, [r3, #0]
 80125e6:	f042 0202 	orr.w	r2, r2, #2
 80125ea:	601a      	str	r2, [r3, #0]
    hospi->ErrorCallback(hospi);
#else
    HAL_OSPI_ErrorCallback(hospi);
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)*/
  }
}
 80125ec:	e00c      	b.n	8012608 <OSPI_DMAAbortCplt+0x70>
      hospi->State = HAL_OSPI_STATE_READY;
 80125ee:	68fb      	ldr	r3, [r7, #12]
 80125f0:	2202      	movs	r2, #2
 80125f2:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_OSPI_AbortCpltCallback(hospi);
 80125f4:	68f8      	ldr	r0, [r7, #12]
 80125f6:	f7ff ff05 	bl	8012404 <HAL_OSPI_AbortCpltCallback>
}
 80125fa:	e005      	b.n	8012608 <OSPI_DMAAbortCplt+0x70>
    hospi->State = HAL_OSPI_STATE_READY;
 80125fc:	68fb      	ldr	r3, [r7, #12]
 80125fe:	2202      	movs	r2, #2
 8012600:	651a      	str	r2, [r3, #80]	; 0x50
    HAL_OSPI_ErrorCallback(hospi);
 8012602:	68f8      	ldr	r0, [r7, #12]
 8012604:	f7ff fef4 	bl	80123f0 <HAL_OSPI_ErrorCallback>
}
 8012608:	bf00      	nop
 801260a:	3710      	adds	r7, #16
 801260c:	46bd      	mov	sp, r7
 801260e:	bd80      	pop	{r7, pc}

08012610 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8012610:	b580      	push	{r7, lr}
 8012612:	b084      	sub	sp, #16
 8012614:	af00      	add	r7, sp, #0
 8012616:	60f8      	str	r0, [r7, #12]
 8012618:	60b9      	str	r1, [r7, #8]
 801261a:	603b      	str	r3, [r7, #0]
 801261c:	4613      	mov	r3, r2
 801261e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8012620:	e01a      	b.n	8012658 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8012622:	69bb      	ldr	r3, [r7, #24]
 8012624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012628:	d016      	beq.n	8012658 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801262a:	f7fa fce9 	bl	800d000 <HAL_GetTick>
 801262e:	4602      	mov	r2, r0
 8012630:	683b      	ldr	r3, [r7, #0]
 8012632:	1ad3      	subs	r3, r2, r3
 8012634:	69ba      	ldr	r2, [r7, #24]
 8012636:	429a      	cmp	r2, r3
 8012638:	d302      	bcc.n	8012640 <OSPI_WaitFlagStateUntilTimeout+0x30>
 801263a:	69bb      	ldr	r3, [r7, #24]
 801263c:	2b00      	cmp	r3, #0
 801263e:	d10b      	bne.n	8012658 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8012640:	68fb      	ldr	r3, [r7, #12]
 8012642:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012646:	651a      	str	r2, [r3, #80]	; 0x50
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8012648:	68fb      	ldr	r3, [r7, #12]
 801264a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801264c:	f043 0201 	orr.w	r2, r3, #1
 8012650:	68fb      	ldr	r3, [r7, #12]
 8012652:	655a      	str	r2, [r3, #84]	; 0x54

        return HAL_ERROR;
 8012654:	2301      	movs	r3, #1
 8012656:	e00e      	b.n	8012676 <OSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8012658:	68fb      	ldr	r3, [r7, #12]
 801265a:	681b      	ldr	r3, [r3, #0]
 801265c:	6a1a      	ldr	r2, [r3, #32]
 801265e:	68bb      	ldr	r3, [r7, #8]
 8012660:	4013      	ands	r3, r2
 8012662:	2b00      	cmp	r3, #0
 8012664:	bf14      	ite	ne
 8012666:	2301      	movne	r3, #1
 8012668:	2300      	moveq	r3, #0
 801266a:	b2db      	uxtb	r3, r3
 801266c:	461a      	mov	r2, r3
 801266e:	79fb      	ldrb	r3, [r7, #7]
 8012670:	429a      	cmp	r2, r3
 8012672:	d1d6      	bne.n	8012622 <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8012674:	2300      	movs	r3, #0
}
 8012676:	4618      	mov	r0, r3
 8012678:	3710      	adds	r7, #16
 801267a:	46bd      	mov	sp, r7
 801267c:	bd80      	pop	{r7, pc}
	...

08012680 <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
 8012680:	b480      	push	{r7}
 8012682:	b089      	sub	sp, #36	; 0x24
 8012684:	af00      	add	r7, sp, #0
 8012686:	6078      	str	r0, [r7, #4]
 8012688:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801268a:	2300      	movs	r3, #0
 801268c:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	681b      	ldr	r3, [r3, #0]
 8012692:	681a      	ldr	r2, [r3, #0]
 8012694:	687b      	ldr	r3, [r7, #4]
 8012696:	681b      	ldr	r3, [r3, #0]
 8012698:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 801269c:	601a      	str	r2, [r3, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 801269e:	687b      	ldr	r3, [r7, #4]
 80126a0:	689b      	ldr	r3, [r3, #8]
 80126a2:	2b00      	cmp	r3, #0
 80126a4:	d10a      	bne.n	80126bc <OSPI_ConfigCmd+0x3c>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FSEL, cmd->FlashId);
 80126a6:	687b      	ldr	r3, [r7, #4]
 80126a8:	681b      	ldr	r3, [r3, #0]
 80126aa:	681b      	ldr	r3, [r3, #0]
 80126ac:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80126b0:	683b      	ldr	r3, [r7, #0]
 80126b2:	685a      	ldr	r2, [r3, #4]
 80126b4:	687b      	ldr	r3, [r7, #4]
 80126b6:	681b      	ldr	r3, [r3, #0]
 80126b8:	430a      	orrs	r2, r1
 80126ba:	601a      	str	r2, [r3, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 80126bc:	683b      	ldr	r3, [r7, #0]
 80126be:	681b      	ldr	r3, [r3, #0]
 80126c0:	2b02      	cmp	r3, #2
 80126c2:	d114      	bne.n	80126ee <OSPI_ConfigCmd+0x6e>
  {
    ccr_reg = &(hospi->Instance->WCCR);
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	681b      	ldr	r3, [r3, #0]
 80126c8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80126cc:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WTCR);
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	681b      	ldr	r3, [r3, #0]
 80126d2:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80126d6:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WIR);
 80126d8:	687b      	ldr	r3, [r7, #4]
 80126da:	681b      	ldr	r3, [r3, #0]
 80126dc:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80126e0:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WABR);
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	681b      	ldr	r3, [r3, #0]
 80126e6:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 80126ea:	60fb      	str	r3, [r7, #12]
 80126ec:	e02c      	b.n	8012748 <OSPI_ConfigCmd+0xc8>
  }
  else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG)
 80126ee:	683b      	ldr	r3, [r7, #0]
 80126f0:	681b      	ldr	r3, [r3, #0]
 80126f2:	2b03      	cmp	r3, #3
 80126f4:	d114      	bne.n	8012720 <OSPI_ConfigCmd+0xa0>
  {
    ccr_reg = &(hospi->Instance->WPCCR);
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	681b      	ldr	r3, [r3, #0]
 80126fa:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80126fe:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WPTCR);
 8012700:	687b      	ldr	r3, [r7, #4]
 8012702:	681b      	ldr	r3, [r3, #0]
 8012704:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8012708:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WPIR);
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	681b      	ldr	r3, [r3, #0]
 801270e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8012712:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WPABR);
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	681b      	ldr	r3, [r3, #0]
 8012718:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 801271c:	60fb      	str	r3, [r7, #12]
 801271e:	e013      	b.n	8012748 <OSPI_ConfigCmd+0xc8>
  }
  else
  {
    ccr_reg = &(hospi->Instance->CCR);
 8012720:	687b      	ldr	r3, [r7, #4]
 8012722:	681b      	ldr	r3, [r3, #0]
 8012724:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8012728:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->TCR);
 801272a:	687b      	ldr	r3, [r7, #4]
 801272c:	681b      	ldr	r3, [r3, #0]
 801272e:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8012732:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->IR);
 8012734:	687b      	ldr	r3, [r7, #4]
 8012736:	681b      	ldr	r3, [r3, #0]
 8012738:	f503 7388 	add.w	r3, r3, #272	; 0x110
 801273c:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->ABR);
 801273e:	687b      	ldr	r3, [r7, #4]
 8012740:	681b      	ldr	r3, [r3, #0]
 8012742:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8012746:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 8012748:	683b      	ldr	r3, [r7, #0]
 801274a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801274c:	683b      	ldr	r3, [r7, #0]
 801274e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012750:	431a      	orrs	r2, r3
 8012752:	69bb      	ldr	r3, [r7, #24]
 8012754:	601a      	str	r2, [r3, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 8012756:	683b      	ldr	r3, [r7, #0]
 8012758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801275a:	2b00      	cmp	r3, #0
 801275c:	d012      	beq.n	8012784 <OSPI_ConfigCmd+0x104>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 801275e:	683b      	ldr	r3, [r7, #0]
 8012760:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012762:	68fb      	ldr	r3, [r7, #12]
 8012764:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 8012766:	69bb      	ldr	r3, [r7, #24]
 8012768:	681b      	ldr	r3, [r3, #0]
 801276a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 801276e:	683b      	ldr	r3, [r7, #0]
 8012770:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8012772:	683b      	ldr	r3, [r7, #0]
 8012774:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012776:	4319      	orrs	r1, r3
 8012778:	683b      	ldr	r3, [r7, #0]
 801277a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801277c:	430b      	orrs	r3, r1
 801277e:	431a      	orrs	r2, r3
 8012780:	69bb      	ldr	r3, [r7, #24]
 8012782:	601a      	str	r2, [r3, #0]
                           (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 8012784:	697b      	ldr	r3, [r7, #20]
 8012786:	681b      	ldr	r3, [r3, #0]
 8012788:	f023 021f 	bic.w	r2, r3, #31
 801278c:	683b      	ldr	r3, [r7, #0]
 801278e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012790:	431a      	orrs	r2, r3
 8012792:	697b      	ldr	r3, [r7, #20]
 8012794:	601a      	str	r2, [r3, #0]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8012796:	683b      	ldr	r3, [r7, #0]
 8012798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801279a:	2b00      	cmp	r3, #0
 801279c:	d009      	beq.n	80127b2 <OSPI_ConfigCmd+0x132>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 801279e:	683b      	ldr	r3, [r7, #0]
 80127a0:	681b      	ldr	r3, [r3, #0]
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	d105      	bne.n	80127b2 <OSPI_ConfigCmd+0x132>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 80127a6:	683b      	ldr	r3, [r7, #0]
 80127a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80127aa:	687b      	ldr	r3, [r7, #4]
 80127ac:	681b      	ldr	r3, [r3, #0]
 80127ae:	3a01      	subs	r2, #1
 80127b0:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 80127b2:	683b      	ldr	r3, [r7, #0]
 80127b4:	68db      	ldr	r3, [r3, #12]
 80127b6:	2b00      	cmp	r3, #0
 80127b8:	f000 8095 	beq.w	80128e6 <OSPI_ConfigCmd+0x266>
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 80127bc:	683b      	ldr	r3, [r7, #0]
 80127be:	69db      	ldr	r3, [r3, #28]
 80127c0:	2b00      	cmp	r3, #0
 80127c2:	d053      	beq.n	801286c <OSPI_ConfigCmd+0x1ec>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 80127c4:	683b      	ldr	r3, [r7, #0]
 80127c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80127c8:	2b00      	cmp	r3, #0
 80127ca:	d01e      	beq.n	801280a <OSPI_ConfigCmd+0x18a>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 80127cc:	69bb      	ldr	r3, [r7, #24]
 80127ce:	681a      	ldr	r2, [r3, #0]
 80127d0:	4b64      	ldr	r3, [pc, #400]	; (8012964 <OSPI_ConfigCmd+0x2e4>)
 80127d2:	4013      	ands	r3, r2
 80127d4:	683a      	ldr	r2, [r7, #0]
 80127d6:	68d1      	ldr	r1, [r2, #12]
 80127d8:	683a      	ldr	r2, [r7, #0]
 80127da:	6952      	ldr	r2, [r2, #20]
 80127dc:	4311      	orrs	r1, r2
 80127de:	683a      	ldr	r2, [r7, #0]
 80127e0:	6912      	ldr	r2, [r2, #16]
 80127e2:	4311      	orrs	r1, r2
 80127e4:	683a      	ldr	r2, [r7, #0]
 80127e6:	69d2      	ldr	r2, [r2, #28]
 80127e8:	4311      	orrs	r1, r2
 80127ea:	683a      	ldr	r2, [r7, #0]
 80127ec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80127ee:	4311      	orrs	r1, r2
 80127f0:	683a      	ldr	r2, [r7, #0]
 80127f2:	6a12      	ldr	r2, [r2, #32]
 80127f4:	4311      	orrs	r1, r2
 80127f6:	683a      	ldr	r2, [r7, #0]
 80127f8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80127fa:	4311      	orrs	r1, r2
 80127fc:	683a      	ldr	r2, [r7, #0]
 80127fe:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8012800:	430a      	orrs	r2, r1
 8012802:	431a      	orrs	r2, r3
 8012804:	69bb      	ldr	r3, [r7, #24]
 8012806:	601a      	str	r2, [r3, #0]
 8012808:	e026      	b.n	8012858 <OSPI_ConfigCmd+0x1d8>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 801280a:	69bb      	ldr	r3, [r7, #24]
 801280c:	681a      	ldr	r2, [r3, #0]
 801280e:	4b56      	ldr	r3, [pc, #344]	; (8012968 <OSPI_ConfigCmd+0x2e8>)
 8012810:	4013      	ands	r3, r2
 8012812:	683a      	ldr	r2, [r7, #0]
 8012814:	68d1      	ldr	r1, [r2, #12]
 8012816:	683a      	ldr	r2, [r7, #0]
 8012818:	6952      	ldr	r2, [r2, #20]
 801281a:	4311      	orrs	r1, r2
 801281c:	683a      	ldr	r2, [r7, #0]
 801281e:	6912      	ldr	r2, [r2, #16]
 8012820:	4311      	orrs	r1, r2
 8012822:	683a      	ldr	r2, [r7, #0]
 8012824:	69d2      	ldr	r2, [r2, #28]
 8012826:	4311      	orrs	r1, r2
 8012828:	683a      	ldr	r2, [r7, #0]
 801282a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801282c:	4311      	orrs	r1, r2
 801282e:	683a      	ldr	r2, [r7, #0]
 8012830:	6a12      	ldr	r2, [r2, #32]
 8012832:	430a      	orrs	r2, r1
 8012834:	431a      	orrs	r2, r3
 8012836:	69bb      	ldr	r3, [r7, #24]
 8012838:	601a      	str	r2, [r3, #0]
                                OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
                               (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize |
                                cmd->AddressMode     | cmd->AddressDtrMode     | cmd->AddressSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801283e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8012842:	d109      	bne.n	8012858 <OSPI_ConfigCmd+0x1d8>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 8012844:	683b      	ldr	r3, [r7, #0]
 8012846:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8012848:	2b08      	cmp	r3, #8
 801284a:	d105      	bne.n	8012858 <OSPI_ConfigCmd+0x1d8>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 801284c:	69bb      	ldr	r3, [r7, #24]
 801284e:	681b      	ldr	r3, [r3, #0]
 8012850:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8012854:	69bb      	ldr	r3, [r7, #24]
 8012856:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 8012858:	683b      	ldr	r3, [r7, #0]
 801285a:	689a      	ldr	r2, [r3, #8]
 801285c:	693b      	ldr	r3, [r7, #16]
 801285e:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hospi->Instance->AR = cmd->Address;
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	681b      	ldr	r3, [r3, #0]
 8012864:	683a      	ldr	r2, [r7, #0]
 8012866:	6992      	ldr	r2, [r2, #24]
 8012868:	649a      	str	r2, [r3, #72]	; 0x48
 801286a:	e074      	b.n	8012956 <OSPI_ConfigCmd+0x2d6>
    }
    else
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 801286c:	683b      	ldr	r3, [r7, #0]
 801286e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012870:	2b00      	cmp	r3, #0
 8012872:	d015      	beq.n	80128a0 <OSPI_ConfigCmd+0x220>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 8012874:	69bb      	ldr	r3, [r7, #24]
 8012876:	681a      	ldr	r2, [r3, #0]
 8012878:	4b3c      	ldr	r3, [pc, #240]	; (801296c <OSPI_ConfigCmd+0x2ec>)
 801287a:	4013      	ands	r3, r2
 801287c:	683a      	ldr	r2, [r7, #0]
 801287e:	68d1      	ldr	r1, [r2, #12]
 8012880:	683a      	ldr	r2, [r7, #0]
 8012882:	6952      	ldr	r2, [r2, #20]
 8012884:	4311      	orrs	r1, r2
 8012886:	683a      	ldr	r2, [r7, #0]
 8012888:	6912      	ldr	r2, [r2, #16]
 801288a:	4311      	orrs	r1, r2
 801288c:	683a      	ldr	r2, [r7, #0]
 801288e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8012890:	4311      	orrs	r1, r2
 8012892:	683a      	ldr	r2, [r7, #0]
 8012894:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8012896:	430a      	orrs	r2, r1
 8012898:	431a      	orrs	r2, r3
 801289a:	69bb      	ldr	r3, [r7, #24]
 801289c:	601a      	str	r2, [r3, #0]
 801289e:	e01d      	b.n	80128dc <OSPI_ConfigCmd+0x25c>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 80128a0:	69bb      	ldr	r3, [r7, #24]
 80128a2:	681b      	ldr	r3, [r3, #0]
 80128a4:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80128a8:	683b      	ldr	r3, [r7, #0]
 80128aa:	68d9      	ldr	r1, [r3, #12]
 80128ac:	683b      	ldr	r3, [r7, #0]
 80128ae:	695b      	ldr	r3, [r3, #20]
 80128b0:	4319      	orrs	r1, r3
 80128b2:	683b      	ldr	r3, [r7, #0]
 80128b4:	691b      	ldr	r3, [r3, #16]
 80128b6:	430b      	orrs	r3, r1
 80128b8:	431a      	orrs	r2, r3
 80128ba:	69bb      	ldr	r3, [r7, #24]
 80128bc:	601a      	str	r2, [r3, #0]
                               (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 80128be:	687b      	ldr	r3, [r7, #4]
 80128c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80128c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80128c6:	d109      	bne.n	80128dc <OSPI_ConfigCmd+0x25c>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 80128c8:	683b      	ldr	r3, [r7, #0]
 80128ca:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 80128cc:	2b08      	cmp	r3, #8
 80128ce:	d105      	bne.n	80128dc <OSPI_ConfigCmd+0x25c>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 80128d0:	69bb      	ldr	r3, [r7, #24]
 80128d2:	681b      	ldr	r3, [r3, #0]
 80128d4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80128d8:	69bb      	ldr	r3, [r7, #24]
 80128da:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 80128dc:	683b      	ldr	r3, [r7, #0]
 80128de:	689a      	ldr	r2, [r3, #8]
 80128e0:	693b      	ldr	r3, [r7, #16]
 80128e2:	601a      	str	r2, [r3, #0]
 80128e4:	e037      	b.n	8012956 <OSPI_ConfigCmd+0x2d6>

    }
  }
  else
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 80128e6:	683b      	ldr	r3, [r7, #0]
 80128e8:	69db      	ldr	r3, [r3, #28]
 80128ea:	2b00      	cmp	r3, #0
 80128ec:	d02e      	beq.n	801294c <OSPI_ConfigCmd+0x2cc>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 80128ee:	683b      	ldr	r3, [r7, #0]
 80128f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80128f2:	2b00      	cmp	r3, #0
 80128f4:	d015      	beq.n	8012922 <OSPI_ConfigCmd+0x2a2>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 80128f6:	69bb      	ldr	r3, [r7, #24]
 80128f8:	681a      	ldr	r2, [r3, #0]
 80128fa:	4b1d      	ldr	r3, [pc, #116]	; (8012970 <OSPI_ConfigCmd+0x2f0>)
 80128fc:	4013      	ands	r3, r2
 80128fe:	683a      	ldr	r2, [r7, #0]
 8012900:	69d1      	ldr	r1, [r2, #28]
 8012902:	683a      	ldr	r2, [r7, #0]
 8012904:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8012906:	4311      	orrs	r1, r2
 8012908:	683a      	ldr	r2, [r7, #0]
 801290a:	6a12      	ldr	r2, [r2, #32]
 801290c:	4311      	orrs	r1, r2
 801290e:	683a      	ldr	r2, [r7, #0]
 8012910:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8012912:	4311      	orrs	r1, r2
 8012914:	683a      	ldr	r2, [r7, #0]
 8012916:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8012918:	430a      	orrs	r2, r1
 801291a:	431a      	orrs	r2, r3
 801291c:	69bb      	ldr	r3, [r7, #24]
 801291e:	601a      	str	r2, [r3, #0]
 8012920:	e00e      	b.n	8012940 <OSPI_ConfigCmd+0x2c0>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 8012922:	69bb      	ldr	r3, [r7, #24]
 8012924:	681b      	ldr	r3, [r3, #0]
 8012926:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 801292a:	683b      	ldr	r3, [r7, #0]
 801292c:	69d9      	ldr	r1, [r3, #28]
 801292e:	683b      	ldr	r3, [r7, #0]
 8012930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012932:	4319      	orrs	r1, r3
 8012934:	683b      	ldr	r3, [r7, #0]
 8012936:	6a1b      	ldr	r3, [r3, #32]
 8012938:	430b      	orrs	r3, r1
 801293a:	431a      	orrs	r2, r3
 801293c:	69bb      	ldr	r3, [r7, #24]
 801293e:	601a      	str	r2, [r3, #0]
                               (cmd->AddressMode | cmd->AddressDtrMode | cmd->AddressSize));
      }

      /* Configure the AR register with the instruction value */
      hospi->Instance->AR = cmd->Address;
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	681b      	ldr	r3, [r3, #0]
 8012944:	683a      	ldr	r2, [r7, #0]
 8012946:	6992      	ldr	r2, [r2, #24]
 8012948:	649a      	str	r2, [r3, #72]	; 0x48
 801294a:	e004      	b.n	8012956 <OSPI_ConfigCmd+0x2d6>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
 801294c:	2301      	movs	r3, #1
 801294e:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	2208      	movs	r2, #8
 8012954:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }

  /* Return function status */
  return status;
 8012956:	7ffb      	ldrb	r3, [r7, #31]
}
 8012958:	4618      	mov	r0, r3
 801295a:	3724      	adds	r7, #36	; 0x24
 801295c:	46bd      	mov	sp, r7
 801295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012962:	4770      	bx	lr
 8012964:	f0ffc0c0 	.word	0xf0ffc0c0
 8012968:	ffffc0c0 	.word	0xffffc0c0
 801296c:	f0ffffc0 	.word	0xf0ffffc0
 8012970:	f0ffc0ff 	.word	0xf0ffc0ff

08012974 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8012974:	b580      	push	{r7, lr}
 8012976:	b084      	sub	sp, #16
 8012978:	af00      	add	r7, sp, #0
 801297a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 801297c:	4b29      	ldr	r3, [pc, #164]	; (8012a24 <HAL_PWREx_ConfigSupply+0xb0>)
 801297e:	68db      	ldr	r3, [r3, #12]
 8012980:	f003 0307 	and.w	r3, r3, #7
 8012984:	2b06      	cmp	r3, #6
 8012986:	d00a      	beq.n	801299e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8012988:	4b26      	ldr	r3, [pc, #152]	; (8012a24 <HAL_PWREx_ConfigSupply+0xb0>)
 801298a:	68db      	ldr	r3, [r3, #12]
 801298c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012990:	687a      	ldr	r2, [r7, #4]
 8012992:	429a      	cmp	r2, r3
 8012994:	d001      	beq.n	801299a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8012996:	2301      	movs	r3, #1
 8012998:	e040      	b.n	8012a1c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 801299a:	2300      	movs	r3, #0
 801299c:	e03e      	b.n	8012a1c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 801299e:	4b21      	ldr	r3, [pc, #132]	; (8012a24 <HAL_PWREx_ConfigSupply+0xb0>)
 80129a0:	68db      	ldr	r3, [r3, #12]
 80129a2:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80129a6:	491f      	ldr	r1, [pc, #124]	; (8012a24 <HAL_PWREx_ConfigSupply+0xb0>)
 80129a8:	687b      	ldr	r3, [r7, #4]
 80129aa:	4313      	orrs	r3, r2
 80129ac:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80129ae:	f7fa fb27 	bl	800d000 <HAL_GetTick>
 80129b2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80129b4:	e009      	b.n	80129ca <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80129b6:	f7fa fb23 	bl	800d000 <HAL_GetTick>
 80129ba:	4602      	mov	r2, r0
 80129bc:	68fb      	ldr	r3, [r7, #12]
 80129be:	1ad3      	subs	r3, r2, r3
 80129c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80129c4:	d901      	bls.n	80129ca <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80129c6:	2301      	movs	r3, #1
 80129c8:	e028      	b.n	8012a1c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80129ca:	4b16      	ldr	r3, [pc, #88]	; (8012a24 <HAL_PWREx_ConfigSupply+0xb0>)
 80129cc:	685b      	ldr	r3, [r3, #4]
 80129ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80129d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80129d6:	d1ee      	bne.n	80129b6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	2b1e      	cmp	r3, #30
 80129dc:	d008      	beq.n	80129f0 <HAL_PWREx_ConfigSupply+0x7c>
 80129de:	687b      	ldr	r3, [r7, #4]
 80129e0:	2b2e      	cmp	r3, #46	; 0x2e
 80129e2:	d005      	beq.n	80129f0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	2b1d      	cmp	r3, #29
 80129e8:	d002      	beq.n	80129f0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80129ea:	687b      	ldr	r3, [r7, #4]
 80129ec:	2b2d      	cmp	r3, #45	; 0x2d
 80129ee:	d114      	bne.n	8012a1a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80129f0:	f7fa fb06 	bl	800d000 <HAL_GetTick>
 80129f4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80129f6:	e009      	b.n	8012a0c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80129f8:	f7fa fb02 	bl	800d000 <HAL_GetTick>
 80129fc:	4602      	mov	r2, r0
 80129fe:	68fb      	ldr	r3, [r7, #12]
 8012a00:	1ad3      	subs	r3, r2, r3
 8012a02:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8012a06:	d901      	bls.n	8012a0c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8012a08:	2301      	movs	r3, #1
 8012a0a:	e007      	b.n	8012a1c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8012a0c:	4b05      	ldr	r3, [pc, #20]	; (8012a24 <HAL_PWREx_ConfigSupply+0xb0>)
 8012a0e:	68db      	ldr	r3, [r3, #12]
 8012a10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8012a14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012a18:	d1ee      	bne.n	80129f8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8012a1a:	2300      	movs	r3, #0
}
 8012a1c:	4618      	mov	r0, r3
 8012a1e:	3710      	adds	r7, #16
 8012a20:	46bd      	mov	sp, r7
 8012a22:	bd80      	pop	{r7, pc}
 8012a24:	58024800 	.word	0x58024800

08012a28 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8012a28:	b580      	push	{r7, lr}
 8012a2a:	b08c      	sub	sp, #48	; 0x30
 8012a2c:	af00      	add	r7, sp, #0
 8012a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	2b00      	cmp	r3, #0
 8012a34:	d102      	bne.n	8012a3c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8012a36:	2301      	movs	r3, #1
 8012a38:	f000 bc1f 	b.w	801327a <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8012a3c:	687b      	ldr	r3, [r7, #4]
 8012a3e:	681b      	ldr	r3, [r3, #0]
 8012a40:	f003 0301 	and.w	r3, r3, #1
 8012a44:	2b00      	cmp	r3, #0
 8012a46:	f000 80b3 	beq.w	8012bb0 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8012a4a:	4b95      	ldr	r3, [pc, #596]	; (8012ca0 <HAL_RCC_OscConfig+0x278>)
 8012a4c:	691b      	ldr	r3, [r3, #16]
 8012a4e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8012a52:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8012a54:	4b92      	ldr	r3, [pc, #584]	; (8012ca0 <HAL_RCC_OscConfig+0x278>)
 8012a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012a58:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8012a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a5c:	2b10      	cmp	r3, #16
 8012a5e:	d007      	beq.n	8012a70 <HAL_RCC_OscConfig+0x48>
 8012a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a62:	2b18      	cmp	r3, #24
 8012a64:	d112      	bne.n	8012a8c <HAL_RCC_OscConfig+0x64>
 8012a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a68:	f003 0303 	and.w	r3, r3, #3
 8012a6c:	2b02      	cmp	r3, #2
 8012a6e:	d10d      	bne.n	8012a8c <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8012a70:	4b8b      	ldr	r3, [pc, #556]	; (8012ca0 <HAL_RCC_OscConfig+0x278>)
 8012a72:	681b      	ldr	r3, [r3, #0]
 8012a74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012a78:	2b00      	cmp	r3, #0
 8012a7a:	f000 8098 	beq.w	8012bae <HAL_RCC_OscConfig+0x186>
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	685b      	ldr	r3, [r3, #4]
 8012a82:	2b00      	cmp	r3, #0
 8012a84:	f040 8093 	bne.w	8012bae <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8012a88:	2301      	movs	r3, #1
 8012a8a:	e3f6      	b.n	801327a <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8012a8c:	687b      	ldr	r3, [r7, #4]
 8012a8e:	685b      	ldr	r3, [r3, #4]
 8012a90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012a94:	d106      	bne.n	8012aa4 <HAL_RCC_OscConfig+0x7c>
 8012a96:	4b82      	ldr	r3, [pc, #520]	; (8012ca0 <HAL_RCC_OscConfig+0x278>)
 8012a98:	681b      	ldr	r3, [r3, #0]
 8012a9a:	4a81      	ldr	r2, [pc, #516]	; (8012ca0 <HAL_RCC_OscConfig+0x278>)
 8012a9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8012aa0:	6013      	str	r3, [r2, #0]
 8012aa2:	e058      	b.n	8012b56 <HAL_RCC_OscConfig+0x12e>
 8012aa4:	687b      	ldr	r3, [r7, #4]
 8012aa6:	685b      	ldr	r3, [r3, #4]
 8012aa8:	2b00      	cmp	r3, #0
 8012aaa:	d112      	bne.n	8012ad2 <HAL_RCC_OscConfig+0xaa>
 8012aac:	4b7c      	ldr	r3, [pc, #496]	; (8012ca0 <HAL_RCC_OscConfig+0x278>)
 8012aae:	681b      	ldr	r3, [r3, #0]
 8012ab0:	4a7b      	ldr	r2, [pc, #492]	; (8012ca0 <HAL_RCC_OscConfig+0x278>)
 8012ab2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8012ab6:	6013      	str	r3, [r2, #0]
 8012ab8:	4b79      	ldr	r3, [pc, #484]	; (8012ca0 <HAL_RCC_OscConfig+0x278>)
 8012aba:	681b      	ldr	r3, [r3, #0]
 8012abc:	4a78      	ldr	r2, [pc, #480]	; (8012ca0 <HAL_RCC_OscConfig+0x278>)
 8012abe:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8012ac2:	6013      	str	r3, [r2, #0]
 8012ac4:	4b76      	ldr	r3, [pc, #472]	; (8012ca0 <HAL_RCC_OscConfig+0x278>)
 8012ac6:	681b      	ldr	r3, [r3, #0]
 8012ac8:	4a75      	ldr	r2, [pc, #468]	; (8012ca0 <HAL_RCC_OscConfig+0x278>)
 8012aca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8012ace:	6013      	str	r3, [r2, #0]
 8012ad0:	e041      	b.n	8012b56 <HAL_RCC_OscConfig+0x12e>
 8012ad2:	687b      	ldr	r3, [r7, #4]
 8012ad4:	685b      	ldr	r3, [r3, #4]
 8012ad6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8012ada:	d112      	bne.n	8012b02 <HAL_RCC_OscConfig+0xda>
 8012adc:	4b70      	ldr	r3, [pc, #448]	; (8012ca0 <HAL_RCC_OscConfig+0x278>)
 8012ade:	681b      	ldr	r3, [r3, #0]
 8012ae0:	4a6f      	ldr	r2, [pc, #444]	; (8012ca0 <HAL_RCC_OscConfig+0x278>)
 8012ae2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8012ae6:	6013      	str	r3, [r2, #0]
 8012ae8:	4b6d      	ldr	r3, [pc, #436]	; (8012ca0 <HAL_RCC_OscConfig+0x278>)
 8012aea:	681b      	ldr	r3, [r3, #0]
 8012aec:	4a6c      	ldr	r2, [pc, #432]	; (8012ca0 <HAL_RCC_OscConfig+0x278>)
 8012aee:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8012af2:	6013      	str	r3, [r2, #0]
 8012af4:	4b6a      	ldr	r3, [pc, #424]	; (8012ca0 <HAL_RCC_OscConfig+0x278>)
 8012af6:	681b      	ldr	r3, [r3, #0]
 8012af8:	4a69      	ldr	r2, [pc, #420]	; (8012ca0 <HAL_RCC_OscConfig+0x278>)
 8012afa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8012afe:	6013      	str	r3, [r2, #0]
 8012b00:	e029      	b.n	8012b56 <HAL_RCC_OscConfig+0x12e>
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	685b      	ldr	r3, [r3, #4]
 8012b06:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8012b0a:	d112      	bne.n	8012b32 <HAL_RCC_OscConfig+0x10a>
 8012b0c:	4b64      	ldr	r3, [pc, #400]	; (8012ca0 <HAL_RCC_OscConfig+0x278>)
 8012b0e:	681b      	ldr	r3, [r3, #0]
 8012b10:	4a63      	ldr	r2, [pc, #396]	; (8012ca0 <HAL_RCC_OscConfig+0x278>)
 8012b12:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8012b16:	6013      	str	r3, [r2, #0]
 8012b18:	4b61      	ldr	r3, [pc, #388]	; (8012ca0 <HAL_RCC_OscConfig+0x278>)
 8012b1a:	681b      	ldr	r3, [r3, #0]
 8012b1c:	4a60      	ldr	r2, [pc, #384]	; (8012ca0 <HAL_RCC_OscConfig+0x278>)
 8012b1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012b22:	6013      	str	r3, [r2, #0]
 8012b24:	4b5e      	ldr	r3, [pc, #376]	; (8012ca0 <HAL_RCC_OscConfig+0x278>)
 8012b26:	681b      	ldr	r3, [r3, #0]
 8012b28:	4a5d      	ldr	r2, [pc, #372]	; (8012ca0 <HAL_RCC_OscConfig+0x278>)
 8012b2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8012b2e:	6013      	str	r3, [r2, #0]
 8012b30:	e011      	b.n	8012b56 <HAL_RCC_OscConfig+0x12e>
 8012b32:	4b5b      	ldr	r3, [pc, #364]	; (8012ca0 <HAL_RCC_OscConfig+0x278>)
 8012b34:	681b      	ldr	r3, [r3, #0]
 8012b36:	4a5a      	ldr	r2, [pc, #360]	; (8012ca0 <HAL_RCC_OscConfig+0x278>)
 8012b38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8012b3c:	6013      	str	r3, [r2, #0]
 8012b3e:	4b58      	ldr	r3, [pc, #352]	; (8012ca0 <HAL_RCC_OscConfig+0x278>)
 8012b40:	681b      	ldr	r3, [r3, #0]
 8012b42:	4a57      	ldr	r2, [pc, #348]	; (8012ca0 <HAL_RCC_OscConfig+0x278>)
 8012b44:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8012b48:	6013      	str	r3, [r2, #0]
 8012b4a:	4b55      	ldr	r3, [pc, #340]	; (8012ca0 <HAL_RCC_OscConfig+0x278>)
 8012b4c:	681b      	ldr	r3, [r3, #0]
 8012b4e:	4a54      	ldr	r2, [pc, #336]	; (8012ca0 <HAL_RCC_OscConfig+0x278>)
 8012b50:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8012b54:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8012b56:	687b      	ldr	r3, [r7, #4]
 8012b58:	685b      	ldr	r3, [r3, #4]
 8012b5a:	2b00      	cmp	r3, #0
 8012b5c:	d013      	beq.n	8012b86 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012b5e:	f7fa fa4f 	bl	800d000 <HAL_GetTick>
 8012b62:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8012b64:	e008      	b.n	8012b78 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8012b66:	f7fa fa4b 	bl	800d000 <HAL_GetTick>
 8012b6a:	4602      	mov	r2, r0
 8012b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b6e:	1ad3      	subs	r3, r2, r3
 8012b70:	2b64      	cmp	r3, #100	; 0x64
 8012b72:	d901      	bls.n	8012b78 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8012b74:	2303      	movs	r3, #3
 8012b76:	e380      	b.n	801327a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8012b78:	4b49      	ldr	r3, [pc, #292]	; (8012ca0 <HAL_RCC_OscConfig+0x278>)
 8012b7a:	681b      	ldr	r3, [r3, #0]
 8012b7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012b80:	2b00      	cmp	r3, #0
 8012b82:	d0f0      	beq.n	8012b66 <HAL_RCC_OscConfig+0x13e>
 8012b84:	e014      	b.n	8012bb0 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012b86:	f7fa fa3b 	bl	800d000 <HAL_GetTick>
 8012b8a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8012b8c:	e008      	b.n	8012ba0 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8012b8e:	f7fa fa37 	bl	800d000 <HAL_GetTick>
 8012b92:	4602      	mov	r2, r0
 8012b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b96:	1ad3      	subs	r3, r2, r3
 8012b98:	2b64      	cmp	r3, #100	; 0x64
 8012b9a:	d901      	bls.n	8012ba0 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8012b9c:	2303      	movs	r3, #3
 8012b9e:	e36c      	b.n	801327a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8012ba0:	4b3f      	ldr	r3, [pc, #252]	; (8012ca0 <HAL_RCC_OscConfig+0x278>)
 8012ba2:	681b      	ldr	r3, [r3, #0]
 8012ba4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012ba8:	2b00      	cmp	r3, #0
 8012baa:	d1f0      	bne.n	8012b8e <HAL_RCC_OscConfig+0x166>
 8012bac:	e000      	b.n	8012bb0 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8012bae:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	681b      	ldr	r3, [r3, #0]
 8012bb4:	f003 0302 	and.w	r3, r3, #2
 8012bb8:	2b00      	cmp	r3, #0
 8012bba:	f000 808c 	beq.w	8012cd6 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8012bbe:	4b38      	ldr	r3, [pc, #224]	; (8012ca0 <HAL_RCC_OscConfig+0x278>)
 8012bc0:	691b      	ldr	r3, [r3, #16]
 8012bc2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8012bc6:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8012bc8:	4b35      	ldr	r3, [pc, #212]	; (8012ca0 <HAL_RCC_OscConfig+0x278>)
 8012bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012bcc:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8012bce:	6a3b      	ldr	r3, [r7, #32]
 8012bd0:	2b00      	cmp	r3, #0
 8012bd2:	d007      	beq.n	8012be4 <HAL_RCC_OscConfig+0x1bc>
 8012bd4:	6a3b      	ldr	r3, [r7, #32]
 8012bd6:	2b18      	cmp	r3, #24
 8012bd8:	d137      	bne.n	8012c4a <HAL_RCC_OscConfig+0x222>
 8012bda:	69fb      	ldr	r3, [r7, #28]
 8012bdc:	f003 0303 	and.w	r3, r3, #3
 8012be0:	2b00      	cmp	r3, #0
 8012be2:	d132      	bne.n	8012c4a <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8012be4:	4b2e      	ldr	r3, [pc, #184]	; (8012ca0 <HAL_RCC_OscConfig+0x278>)
 8012be6:	681b      	ldr	r3, [r3, #0]
 8012be8:	f003 0304 	and.w	r3, r3, #4
 8012bec:	2b00      	cmp	r3, #0
 8012bee:	d005      	beq.n	8012bfc <HAL_RCC_OscConfig+0x1d4>
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	68db      	ldr	r3, [r3, #12]
 8012bf4:	2b00      	cmp	r3, #0
 8012bf6:	d101      	bne.n	8012bfc <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8012bf8:	2301      	movs	r3, #1
 8012bfa:	e33e      	b.n	801327a <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8012bfc:	4b28      	ldr	r3, [pc, #160]	; (8012ca0 <HAL_RCC_OscConfig+0x278>)
 8012bfe:	681b      	ldr	r3, [r3, #0]
 8012c00:	f023 0219 	bic.w	r2, r3, #25
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	68db      	ldr	r3, [r3, #12]
 8012c08:	4925      	ldr	r1, [pc, #148]	; (8012ca0 <HAL_RCC_OscConfig+0x278>)
 8012c0a:	4313      	orrs	r3, r2
 8012c0c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012c0e:	f7fa f9f7 	bl	800d000 <HAL_GetTick>
 8012c12:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8012c14:	e008      	b.n	8012c28 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8012c16:	f7fa f9f3 	bl	800d000 <HAL_GetTick>
 8012c1a:	4602      	mov	r2, r0
 8012c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c1e:	1ad3      	subs	r3, r2, r3
 8012c20:	2b02      	cmp	r3, #2
 8012c22:	d901      	bls.n	8012c28 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8012c24:	2303      	movs	r3, #3
 8012c26:	e328      	b.n	801327a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8012c28:	4b1d      	ldr	r3, [pc, #116]	; (8012ca0 <HAL_RCC_OscConfig+0x278>)
 8012c2a:	681b      	ldr	r3, [r3, #0]
 8012c2c:	f003 0304 	and.w	r3, r3, #4
 8012c30:	2b00      	cmp	r3, #0
 8012c32:	d0f0      	beq.n	8012c16 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8012c34:	4b1a      	ldr	r3, [pc, #104]	; (8012ca0 <HAL_RCC_OscConfig+0x278>)
 8012c36:	685b      	ldr	r3, [r3, #4]
 8012c38:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8012c3c:	687b      	ldr	r3, [r7, #4]
 8012c3e:	691b      	ldr	r3, [r3, #16]
 8012c40:	061b      	lsls	r3, r3, #24
 8012c42:	4917      	ldr	r1, [pc, #92]	; (8012ca0 <HAL_RCC_OscConfig+0x278>)
 8012c44:	4313      	orrs	r3, r2
 8012c46:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8012c48:	e045      	b.n	8012cd6 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8012c4a:	687b      	ldr	r3, [r7, #4]
 8012c4c:	68db      	ldr	r3, [r3, #12]
 8012c4e:	2b00      	cmp	r3, #0
 8012c50:	d028      	beq.n	8012ca4 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8012c52:	4b13      	ldr	r3, [pc, #76]	; (8012ca0 <HAL_RCC_OscConfig+0x278>)
 8012c54:	681b      	ldr	r3, [r3, #0]
 8012c56:	f023 0219 	bic.w	r2, r3, #25
 8012c5a:	687b      	ldr	r3, [r7, #4]
 8012c5c:	68db      	ldr	r3, [r3, #12]
 8012c5e:	4910      	ldr	r1, [pc, #64]	; (8012ca0 <HAL_RCC_OscConfig+0x278>)
 8012c60:	4313      	orrs	r3, r2
 8012c62:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012c64:	f7fa f9cc 	bl	800d000 <HAL_GetTick>
 8012c68:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8012c6a:	e008      	b.n	8012c7e <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8012c6c:	f7fa f9c8 	bl	800d000 <HAL_GetTick>
 8012c70:	4602      	mov	r2, r0
 8012c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c74:	1ad3      	subs	r3, r2, r3
 8012c76:	2b02      	cmp	r3, #2
 8012c78:	d901      	bls.n	8012c7e <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8012c7a:	2303      	movs	r3, #3
 8012c7c:	e2fd      	b.n	801327a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8012c7e:	4b08      	ldr	r3, [pc, #32]	; (8012ca0 <HAL_RCC_OscConfig+0x278>)
 8012c80:	681b      	ldr	r3, [r3, #0]
 8012c82:	f003 0304 	and.w	r3, r3, #4
 8012c86:	2b00      	cmp	r3, #0
 8012c88:	d0f0      	beq.n	8012c6c <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8012c8a:	4b05      	ldr	r3, [pc, #20]	; (8012ca0 <HAL_RCC_OscConfig+0x278>)
 8012c8c:	685b      	ldr	r3, [r3, #4]
 8012c8e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8012c92:	687b      	ldr	r3, [r7, #4]
 8012c94:	691b      	ldr	r3, [r3, #16]
 8012c96:	061b      	lsls	r3, r3, #24
 8012c98:	4901      	ldr	r1, [pc, #4]	; (8012ca0 <HAL_RCC_OscConfig+0x278>)
 8012c9a:	4313      	orrs	r3, r2
 8012c9c:	604b      	str	r3, [r1, #4]
 8012c9e:	e01a      	b.n	8012cd6 <HAL_RCC_OscConfig+0x2ae>
 8012ca0:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8012ca4:	4b97      	ldr	r3, [pc, #604]	; (8012f04 <HAL_RCC_OscConfig+0x4dc>)
 8012ca6:	681b      	ldr	r3, [r3, #0]
 8012ca8:	4a96      	ldr	r2, [pc, #600]	; (8012f04 <HAL_RCC_OscConfig+0x4dc>)
 8012caa:	f023 0301 	bic.w	r3, r3, #1
 8012cae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012cb0:	f7fa f9a6 	bl	800d000 <HAL_GetTick>
 8012cb4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8012cb6:	e008      	b.n	8012cca <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8012cb8:	f7fa f9a2 	bl	800d000 <HAL_GetTick>
 8012cbc:	4602      	mov	r2, r0
 8012cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cc0:	1ad3      	subs	r3, r2, r3
 8012cc2:	2b02      	cmp	r3, #2
 8012cc4:	d901      	bls.n	8012cca <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8012cc6:	2303      	movs	r3, #3
 8012cc8:	e2d7      	b.n	801327a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8012cca:	4b8e      	ldr	r3, [pc, #568]	; (8012f04 <HAL_RCC_OscConfig+0x4dc>)
 8012ccc:	681b      	ldr	r3, [r3, #0]
 8012cce:	f003 0304 	and.w	r3, r3, #4
 8012cd2:	2b00      	cmp	r3, #0
 8012cd4:	d1f0      	bne.n	8012cb8 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8012cd6:	687b      	ldr	r3, [r7, #4]
 8012cd8:	681b      	ldr	r3, [r3, #0]
 8012cda:	f003 0310 	and.w	r3, r3, #16
 8012cde:	2b00      	cmp	r3, #0
 8012ce0:	d06a      	beq.n	8012db8 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8012ce2:	4b88      	ldr	r3, [pc, #544]	; (8012f04 <HAL_RCC_OscConfig+0x4dc>)
 8012ce4:	691b      	ldr	r3, [r3, #16]
 8012ce6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8012cea:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8012cec:	4b85      	ldr	r3, [pc, #532]	; (8012f04 <HAL_RCC_OscConfig+0x4dc>)
 8012cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012cf0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8012cf2:	69bb      	ldr	r3, [r7, #24]
 8012cf4:	2b08      	cmp	r3, #8
 8012cf6:	d007      	beq.n	8012d08 <HAL_RCC_OscConfig+0x2e0>
 8012cf8:	69bb      	ldr	r3, [r7, #24]
 8012cfa:	2b18      	cmp	r3, #24
 8012cfc:	d11b      	bne.n	8012d36 <HAL_RCC_OscConfig+0x30e>
 8012cfe:	697b      	ldr	r3, [r7, #20]
 8012d00:	f003 0303 	and.w	r3, r3, #3
 8012d04:	2b01      	cmp	r3, #1
 8012d06:	d116      	bne.n	8012d36 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8012d08:	4b7e      	ldr	r3, [pc, #504]	; (8012f04 <HAL_RCC_OscConfig+0x4dc>)
 8012d0a:	681b      	ldr	r3, [r3, #0]
 8012d0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012d10:	2b00      	cmp	r3, #0
 8012d12:	d005      	beq.n	8012d20 <HAL_RCC_OscConfig+0x2f8>
 8012d14:	687b      	ldr	r3, [r7, #4]
 8012d16:	69db      	ldr	r3, [r3, #28]
 8012d18:	2b80      	cmp	r3, #128	; 0x80
 8012d1a:	d001      	beq.n	8012d20 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8012d1c:	2301      	movs	r3, #1
 8012d1e:	e2ac      	b.n	801327a <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8012d20:	4b78      	ldr	r3, [pc, #480]	; (8012f04 <HAL_RCC_OscConfig+0x4dc>)
 8012d22:	68db      	ldr	r3, [r3, #12]
 8012d24:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	6a1b      	ldr	r3, [r3, #32]
 8012d2c:	061b      	lsls	r3, r3, #24
 8012d2e:	4975      	ldr	r1, [pc, #468]	; (8012f04 <HAL_RCC_OscConfig+0x4dc>)
 8012d30:	4313      	orrs	r3, r2
 8012d32:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8012d34:	e040      	b.n	8012db8 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8012d36:	687b      	ldr	r3, [r7, #4]
 8012d38:	69db      	ldr	r3, [r3, #28]
 8012d3a:	2b00      	cmp	r3, #0
 8012d3c:	d023      	beq.n	8012d86 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8012d3e:	4b71      	ldr	r3, [pc, #452]	; (8012f04 <HAL_RCC_OscConfig+0x4dc>)
 8012d40:	681b      	ldr	r3, [r3, #0]
 8012d42:	4a70      	ldr	r2, [pc, #448]	; (8012f04 <HAL_RCC_OscConfig+0x4dc>)
 8012d44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012d48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012d4a:	f7fa f959 	bl	800d000 <HAL_GetTick>
 8012d4e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8012d50:	e008      	b.n	8012d64 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8012d52:	f7fa f955 	bl	800d000 <HAL_GetTick>
 8012d56:	4602      	mov	r2, r0
 8012d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d5a:	1ad3      	subs	r3, r2, r3
 8012d5c:	2b02      	cmp	r3, #2
 8012d5e:	d901      	bls.n	8012d64 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8012d60:	2303      	movs	r3, #3
 8012d62:	e28a      	b.n	801327a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8012d64:	4b67      	ldr	r3, [pc, #412]	; (8012f04 <HAL_RCC_OscConfig+0x4dc>)
 8012d66:	681b      	ldr	r3, [r3, #0]
 8012d68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012d6c:	2b00      	cmp	r3, #0
 8012d6e:	d0f0      	beq.n	8012d52 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8012d70:	4b64      	ldr	r3, [pc, #400]	; (8012f04 <HAL_RCC_OscConfig+0x4dc>)
 8012d72:	68db      	ldr	r3, [r3, #12]
 8012d74:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8012d78:	687b      	ldr	r3, [r7, #4]
 8012d7a:	6a1b      	ldr	r3, [r3, #32]
 8012d7c:	061b      	lsls	r3, r3, #24
 8012d7e:	4961      	ldr	r1, [pc, #388]	; (8012f04 <HAL_RCC_OscConfig+0x4dc>)
 8012d80:	4313      	orrs	r3, r2
 8012d82:	60cb      	str	r3, [r1, #12]
 8012d84:	e018      	b.n	8012db8 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8012d86:	4b5f      	ldr	r3, [pc, #380]	; (8012f04 <HAL_RCC_OscConfig+0x4dc>)
 8012d88:	681b      	ldr	r3, [r3, #0]
 8012d8a:	4a5e      	ldr	r2, [pc, #376]	; (8012f04 <HAL_RCC_OscConfig+0x4dc>)
 8012d8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012d90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012d92:	f7fa f935 	bl	800d000 <HAL_GetTick>
 8012d96:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8012d98:	e008      	b.n	8012dac <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8012d9a:	f7fa f931 	bl	800d000 <HAL_GetTick>
 8012d9e:	4602      	mov	r2, r0
 8012da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012da2:	1ad3      	subs	r3, r2, r3
 8012da4:	2b02      	cmp	r3, #2
 8012da6:	d901      	bls.n	8012dac <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8012da8:	2303      	movs	r3, #3
 8012daa:	e266      	b.n	801327a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8012dac:	4b55      	ldr	r3, [pc, #340]	; (8012f04 <HAL_RCC_OscConfig+0x4dc>)
 8012dae:	681b      	ldr	r3, [r3, #0]
 8012db0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012db4:	2b00      	cmp	r3, #0
 8012db6:	d1f0      	bne.n	8012d9a <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8012db8:	687b      	ldr	r3, [r7, #4]
 8012dba:	681b      	ldr	r3, [r3, #0]
 8012dbc:	f003 0308 	and.w	r3, r3, #8
 8012dc0:	2b00      	cmp	r3, #0
 8012dc2:	d036      	beq.n	8012e32 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8012dc4:	687b      	ldr	r3, [r7, #4]
 8012dc6:	695b      	ldr	r3, [r3, #20]
 8012dc8:	2b00      	cmp	r3, #0
 8012dca:	d019      	beq.n	8012e00 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8012dcc:	4b4d      	ldr	r3, [pc, #308]	; (8012f04 <HAL_RCC_OscConfig+0x4dc>)
 8012dce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012dd0:	4a4c      	ldr	r2, [pc, #304]	; (8012f04 <HAL_RCC_OscConfig+0x4dc>)
 8012dd2:	f043 0301 	orr.w	r3, r3, #1
 8012dd6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012dd8:	f7fa f912 	bl	800d000 <HAL_GetTick>
 8012ddc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8012dde:	e008      	b.n	8012df2 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8012de0:	f7fa f90e 	bl	800d000 <HAL_GetTick>
 8012de4:	4602      	mov	r2, r0
 8012de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012de8:	1ad3      	subs	r3, r2, r3
 8012dea:	2b02      	cmp	r3, #2
 8012dec:	d901      	bls.n	8012df2 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8012dee:	2303      	movs	r3, #3
 8012df0:	e243      	b.n	801327a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8012df2:	4b44      	ldr	r3, [pc, #272]	; (8012f04 <HAL_RCC_OscConfig+0x4dc>)
 8012df4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012df6:	f003 0302 	and.w	r3, r3, #2
 8012dfa:	2b00      	cmp	r3, #0
 8012dfc:	d0f0      	beq.n	8012de0 <HAL_RCC_OscConfig+0x3b8>
 8012dfe:	e018      	b.n	8012e32 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8012e00:	4b40      	ldr	r3, [pc, #256]	; (8012f04 <HAL_RCC_OscConfig+0x4dc>)
 8012e02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012e04:	4a3f      	ldr	r2, [pc, #252]	; (8012f04 <HAL_RCC_OscConfig+0x4dc>)
 8012e06:	f023 0301 	bic.w	r3, r3, #1
 8012e0a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012e0c:	f7fa f8f8 	bl	800d000 <HAL_GetTick>
 8012e10:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8012e12:	e008      	b.n	8012e26 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8012e14:	f7fa f8f4 	bl	800d000 <HAL_GetTick>
 8012e18:	4602      	mov	r2, r0
 8012e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e1c:	1ad3      	subs	r3, r2, r3
 8012e1e:	2b02      	cmp	r3, #2
 8012e20:	d901      	bls.n	8012e26 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8012e22:	2303      	movs	r3, #3
 8012e24:	e229      	b.n	801327a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8012e26:	4b37      	ldr	r3, [pc, #220]	; (8012f04 <HAL_RCC_OscConfig+0x4dc>)
 8012e28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012e2a:	f003 0302 	and.w	r3, r3, #2
 8012e2e:	2b00      	cmp	r3, #0
 8012e30:	d1f0      	bne.n	8012e14 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8012e32:	687b      	ldr	r3, [r7, #4]
 8012e34:	681b      	ldr	r3, [r3, #0]
 8012e36:	f003 0320 	and.w	r3, r3, #32
 8012e3a:	2b00      	cmp	r3, #0
 8012e3c:	d036      	beq.n	8012eac <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8012e3e:	687b      	ldr	r3, [r7, #4]
 8012e40:	699b      	ldr	r3, [r3, #24]
 8012e42:	2b00      	cmp	r3, #0
 8012e44:	d019      	beq.n	8012e7a <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8012e46:	4b2f      	ldr	r3, [pc, #188]	; (8012f04 <HAL_RCC_OscConfig+0x4dc>)
 8012e48:	681b      	ldr	r3, [r3, #0]
 8012e4a:	4a2e      	ldr	r2, [pc, #184]	; (8012f04 <HAL_RCC_OscConfig+0x4dc>)
 8012e4c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8012e50:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8012e52:	f7fa f8d5 	bl	800d000 <HAL_GetTick>
 8012e56:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8012e58:	e008      	b.n	8012e6c <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8012e5a:	f7fa f8d1 	bl	800d000 <HAL_GetTick>
 8012e5e:	4602      	mov	r2, r0
 8012e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e62:	1ad3      	subs	r3, r2, r3
 8012e64:	2b02      	cmp	r3, #2
 8012e66:	d901      	bls.n	8012e6c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8012e68:	2303      	movs	r3, #3
 8012e6a:	e206      	b.n	801327a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8012e6c:	4b25      	ldr	r3, [pc, #148]	; (8012f04 <HAL_RCC_OscConfig+0x4dc>)
 8012e6e:	681b      	ldr	r3, [r3, #0]
 8012e70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012e74:	2b00      	cmp	r3, #0
 8012e76:	d0f0      	beq.n	8012e5a <HAL_RCC_OscConfig+0x432>
 8012e78:	e018      	b.n	8012eac <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8012e7a:	4b22      	ldr	r3, [pc, #136]	; (8012f04 <HAL_RCC_OscConfig+0x4dc>)
 8012e7c:	681b      	ldr	r3, [r3, #0]
 8012e7e:	4a21      	ldr	r2, [pc, #132]	; (8012f04 <HAL_RCC_OscConfig+0x4dc>)
 8012e80:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012e84:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8012e86:	f7fa f8bb 	bl	800d000 <HAL_GetTick>
 8012e8a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8012e8c:	e008      	b.n	8012ea0 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8012e8e:	f7fa f8b7 	bl	800d000 <HAL_GetTick>
 8012e92:	4602      	mov	r2, r0
 8012e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e96:	1ad3      	subs	r3, r2, r3
 8012e98:	2b02      	cmp	r3, #2
 8012e9a:	d901      	bls.n	8012ea0 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8012e9c:	2303      	movs	r3, #3
 8012e9e:	e1ec      	b.n	801327a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8012ea0:	4b18      	ldr	r3, [pc, #96]	; (8012f04 <HAL_RCC_OscConfig+0x4dc>)
 8012ea2:	681b      	ldr	r3, [r3, #0]
 8012ea4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012ea8:	2b00      	cmp	r3, #0
 8012eaa:	d1f0      	bne.n	8012e8e <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8012eac:	687b      	ldr	r3, [r7, #4]
 8012eae:	681b      	ldr	r3, [r3, #0]
 8012eb0:	f003 0304 	and.w	r3, r3, #4
 8012eb4:	2b00      	cmp	r3, #0
 8012eb6:	f000 80af 	beq.w	8013018 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8012eba:	4b13      	ldr	r3, [pc, #76]	; (8012f08 <HAL_RCC_OscConfig+0x4e0>)
 8012ebc:	681b      	ldr	r3, [r3, #0]
 8012ebe:	4a12      	ldr	r2, [pc, #72]	; (8012f08 <HAL_RCC_OscConfig+0x4e0>)
 8012ec0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012ec4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8012ec6:	f7fa f89b 	bl	800d000 <HAL_GetTick>
 8012eca:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8012ecc:	e008      	b.n	8012ee0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8012ece:	f7fa f897 	bl	800d000 <HAL_GetTick>
 8012ed2:	4602      	mov	r2, r0
 8012ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ed6:	1ad3      	subs	r3, r2, r3
 8012ed8:	2b64      	cmp	r3, #100	; 0x64
 8012eda:	d901      	bls.n	8012ee0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8012edc:	2303      	movs	r3, #3
 8012ede:	e1cc      	b.n	801327a <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8012ee0:	4b09      	ldr	r3, [pc, #36]	; (8012f08 <HAL_RCC_OscConfig+0x4e0>)
 8012ee2:	681b      	ldr	r3, [r3, #0]
 8012ee4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012ee8:	2b00      	cmp	r3, #0
 8012eea:	d0f0      	beq.n	8012ece <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8012eec:	687b      	ldr	r3, [r7, #4]
 8012eee:	689b      	ldr	r3, [r3, #8]
 8012ef0:	2b01      	cmp	r3, #1
 8012ef2:	d10b      	bne.n	8012f0c <HAL_RCC_OscConfig+0x4e4>
 8012ef4:	4b03      	ldr	r3, [pc, #12]	; (8012f04 <HAL_RCC_OscConfig+0x4dc>)
 8012ef6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012ef8:	4a02      	ldr	r2, [pc, #8]	; (8012f04 <HAL_RCC_OscConfig+0x4dc>)
 8012efa:	f043 0301 	orr.w	r3, r3, #1
 8012efe:	6713      	str	r3, [r2, #112]	; 0x70
 8012f00:	e05b      	b.n	8012fba <HAL_RCC_OscConfig+0x592>
 8012f02:	bf00      	nop
 8012f04:	58024400 	.word	0x58024400
 8012f08:	58024800 	.word	0x58024800
 8012f0c:	687b      	ldr	r3, [r7, #4]
 8012f0e:	689b      	ldr	r3, [r3, #8]
 8012f10:	2b00      	cmp	r3, #0
 8012f12:	d112      	bne.n	8012f3a <HAL_RCC_OscConfig+0x512>
 8012f14:	4b9d      	ldr	r3, [pc, #628]	; (801318c <HAL_RCC_OscConfig+0x764>)
 8012f16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012f18:	4a9c      	ldr	r2, [pc, #624]	; (801318c <HAL_RCC_OscConfig+0x764>)
 8012f1a:	f023 0301 	bic.w	r3, r3, #1
 8012f1e:	6713      	str	r3, [r2, #112]	; 0x70
 8012f20:	4b9a      	ldr	r3, [pc, #616]	; (801318c <HAL_RCC_OscConfig+0x764>)
 8012f22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012f24:	4a99      	ldr	r2, [pc, #612]	; (801318c <HAL_RCC_OscConfig+0x764>)
 8012f26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012f2a:	6713      	str	r3, [r2, #112]	; 0x70
 8012f2c:	4b97      	ldr	r3, [pc, #604]	; (801318c <HAL_RCC_OscConfig+0x764>)
 8012f2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012f30:	4a96      	ldr	r2, [pc, #600]	; (801318c <HAL_RCC_OscConfig+0x764>)
 8012f32:	f023 0304 	bic.w	r3, r3, #4
 8012f36:	6713      	str	r3, [r2, #112]	; 0x70
 8012f38:	e03f      	b.n	8012fba <HAL_RCC_OscConfig+0x592>
 8012f3a:	687b      	ldr	r3, [r7, #4]
 8012f3c:	689b      	ldr	r3, [r3, #8]
 8012f3e:	2b05      	cmp	r3, #5
 8012f40:	d112      	bne.n	8012f68 <HAL_RCC_OscConfig+0x540>
 8012f42:	4b92      	ldr	r3, [pc, #584]	; (801318c <HAL_RCC_OscConfig+0x764>)
 8012f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012f46:	4a91      	ldr	r2, [pc, #580]	; (801318c <HAL_RCC_OscConfig+0x764>)
 8012f48:	f043 0304 	orr.w	r3, r3, #4
 8012f4c:	6713      	str	r3, [r2, #112]	; 0x70
 8012f4e:	4b8f      	ldr	r3, [pc, #572]	; (801318c <HAL_RCC_OscConfig+0x764>)
 8012f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012f52:	4a8e      	ldr	r2, [pc, #568]	; (801318c <HAL_RCC_OscConfig+0x764>)
 8012f54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012f58:	6713      	str	r3, [r2, #112]	; 0x70
 8012f5a:	4b8c      	ldr	r3, [pc, #560]	; (801318c <HAL_RCC_OscConfig+0x764>)
 8012f5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012f5e:	4a8b      	ldr	r2, [pc, #556]	; (801318c <HAL_RCC_OscConfig+0x764>)
 8012f60:	f043 0301 	orr.w	r3, r3, #1
 8012f64:	6713      	str	r3, [r2, #112]	; 0x70
 8012f66:	e028      	b.n	8012fba <HAL_RCC_OscConfig+0x592>
 8012f68:	687b      	ldr	r3, [r7, #4]
 8012f6a:	689b      	ldr	r3, [r3, #8]
 8012f6c:	2b85      	cmp	r3, #133	; 0x85
 8012f6e:	d112      	bne.n	8012f96 <HAL_RCC_OscConfig+0x56e>
 8012f70:	4b86      	ldr	r3, [pc, #536]	; (801318c <HAL_RCC_OscConfig+0x764>)
 8012f72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012f74:	4a85      	ldr	r2, [pc, #532]	; (801318c <HAL_RCC_OscConfig+0x764>)
 8012f76:	f043 0304 	orr.w	r3, r3, #4
 8012f7a:	6713      	str	r3, [r2, #112]	; 0x70
 8012f7c:	4b83      	ldr	r3, [pc, #524]	; (801318c <HAL_RCC_OscConfig+0x764>)
 8012f7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012f80:	4a82      	ldr	r2, [pc, #520]	; (801318c <HAL_RCC_OscConfig+0x764>)
 8012f82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012f86:	6713      	str	r3, [r2, #112]	; 0x70
 8012f88:	4b80      	ldr	r3, [pc, #512]	; (801318c <HAL_RCC_OscConfig+0x764>)
 8012f8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012f8c:	4a7f      	ldr	r2, [pc, #508]	; (801318c <HAL_RCC_OscConfig+0x764>)
 8012f8e:	f043 0301 	orr.w	r3, r3, #1
 8012f92:	6713      	str	r3, [r2, #112]	; 0x70
 8012f94:	e011      	b.n	8012fba <HAL_RCC_OscConfig+0x592>
 8012f96:	4b7d      	ldr	r3, [pc, #500]	; (801318c <HAL_RCC_OscConfig+0x764>)
 8012f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012f9a:	4a7c      	ldr	r2, [pc, #496]	; (801318c <HAL_RCC_OscConfig+0x764>)
 8012f9c:	f023 0301 	bic.w	r3, r3, #1
 8012fa0:	6713      	str	r3, [r2, #112]	; 0x70
 8012fa2:	4b7a      	ldr	r3, [pc, #488]	; (801318c <HAL_RCC_OscConfig+0x764>)
 8012fa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012fa6:	4a79      	ldr	r2, [pc, #484]	; (801318c <HAL_RCC_OscConfig+0x764>)
 8012fa8:	f023 0304 	bic.w	r3, r3, #4
 8012fac:	6713      	str	r3, [r2, #112]	; 0x70
 8012fae:	4b77      	ldr	r3, [pc, #476]	; (801318c <HAL_RCC_OscConfig+0x764>)
 8012fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012fb2:	4a76      	ldr	r2, [pc, #472]	; (801318c <HAL_RCC_OscConfig+0x764>)
 8012fb4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012fb8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8012fba:	687b      	ldr	r3, [r7, #4]
 8012fbc:	689b      	ldr	r3, [r3, #8]
 8012fbe:	2b00      	cmp	r3, #0
 8012fc0:	d015      	beq.n	8012fee <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012fc2:	f7fa f81d 	bl	800d000 <HAL_GetTick>
 8012fc6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8012fc8:	e00a      	b.n	8012fe0 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8012fca:	f7fa f819 	bl	800d000 <HAL_GetTick>
 8012fce:	4602      	mov	r2, r0
 8012fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fd2:	1ad3      	subs	r3, r2, r3
 8012fd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8012fd8:	4293      	cmp	r3, r2
 8012fda:	d901      	bls.n	8012fe0 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8012fdc:	2303      	movs	r3, #3
 8012fde:	e14c      	b.n	801327a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8012fe0:	4b6a      	ldr	r3, [pc, #424]	; (801318c <HAL_RCC_OscConfig+0x764>)
 8012fe2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012fe4:	f003 0302 	and.w	r3, r3, #2
 8012fe8:	2b00      	cmp	r3, #0
 8012fea:	d0ee      	beq.n	8012fca <HAL_RCC_OscConfig+0x5a2>
 8012fec:	e014      	b.n	8013018 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012fee:	f7fa f807 	bl	800d000 <HAL_GetTick>
 8012ff2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8012ff4:	e00a      	b.n	801300c <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8012ff6:	f7fa f803 	bl	800d000 <HAL_GetTick>
 8012ffa:	4602      	mov	r2, r0
 8012ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ffe:	1ad3      	subs	r3, r2, r3
 8013000:	f241 3288 	movw	r2, #5000	; 0x1388
 8013004:	4293      	cmp	r3, r2
 8013006:	d901      	bls.n	801300c <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8013008:	2303      	movs	r3, #3
 801300a:	e136      	b.n	801327a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801300c:	4b5f      	ldr	r3, [pc, #380]	; (801318c <HAL_RCC_OscConfig+0x764>)
 801300e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013010:	f003 0302 	and.w	r3, r3, #2
 8013014:	2b00      	cmp	r3, #0
 8013016:	d1ee      	bne.n	8012ff6 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8013018:	687b      	ldr	r3, [r7, #4]
 801301a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801301c:	2b00      	cmp	r3, #0
 801301e:	f000 812b 	beq.w	8013278 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8013022:	4b5a      	ldr	r3, [pc, #360]	; (801318c <HAL_RCC_OscConfig+0x764>)
 8013024:	691b      	ldr	r3, [r3, #16]
 8013026:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801302a:	2b18      	cmp	r3, #24
 801302c:	f000 80bb 	beq.w	80131a6 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8013030:	687b      	ldr	r3, [r7, #4]
 8013032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013034:	2b02      	cmp	r3, #2
 8013036:	f040 8095 	bne.w	8013164 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801303a:	4b54      	ldr	r3, [pc, #336]	; (801318c <HAL_RCC_OscConfig+0x764>)
 801303c:	681b      	ldr	r3, [r3, #0]
 801303e:	4a53      	ldr	r2, [pc, #332]	; (801318c <HAL_RCC_OscConfig+0x764>)
 8013040:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8013044:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013046:	f7f9 ffdb 	bl	800d000 <HAL_GetTick>
 801304a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801304c:	e008      	b.n	8013060 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801304e:	f7f9 ffd7 	bl	800d000 <HAL_GetTick>
 8013052:	4602      	mov	r2, r0
 8013054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013056:	1ad3      	subs	r3, r2, r3
 8013058:	2b02      	cmp	r3, #2
 801305a:	d901      	bls.n	8013060 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 801305c:	2303      	movs	r3, #3
 801305e:	e10c      	b.n	801327a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8013060:	4b4a      	ldr	r3, [pc, #296]	; (801318c <HAL_RCC_OscConfig+0x764>)
 8013062:	681b      	ldr	r3, [r3, #0]
 8013064:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013068:	2b00      	cmp	r3, #0
 801306a:	d1f0      	bne.n	801304e <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801306c:	4b47      	ldr	r3, [pc, #284]	; (801318c <HAL_RCC_OscConfig+0x764>)
 801306e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013070:	4b47      	ldr	r3, [pc, #284]	; (8013190 <HAL_RCC_OscConfig+0x768>)
 8013072:	4013      	ands	r3, r2
 8013074:	687a      	ldr	r2, [r7, #4]
 8013076:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8013078:	687a      	ldr	r2, [r7, #4]
 801307a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 801307c:	0112      	lsls	r2, r2, #4
 801307e:	430a      	orrs	r2, r1
 8013080:	4942      	ldr	r1, [pc, #264]	; (801318c <HAL_RCC_OscConfig+0x764>)
 8013082:	4313      	orrs	r3, r2
 8013084:	628b      	str	r3, [r1, #40]	; 0x28
 8013086:	687b      	ldr	r3, [r7, #4]
 8013088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801308a:	3b01      	subs	r3, #1
 801308c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8013090:	687b      	ldr	r3, [r7, #4]
 8013092:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013094:	3b01      	subs	r3, #1
 8013096:	025b      	lsls	r3, r3, #9
 8013098:	b29b      	uxth	r3, r3
 801309a:	431a      	orrs	r2, r3
 801309c:	687b      	ldr	r3, [r7, #4]
 801309e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80130a0:	3b01      	subs	r3, #1
 80130a2:	041b      	lsls	r3, r3, #16
 80130a4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80130a8:	431a      	orrs	r2, r3
 80130aa:	687b      	ldr	r3, [r7, #4]
 80130ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80130ae:	3b01      	subs	r3, #1
 80130b0:	061b      	lsls	r3, r3, #24
 80130b2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80130b6:	4935      	ldr	r1, [pc, #212]	; (801318c <HAL_RCC_OscConfig+0x764>)
 80130b8:	4313      	orrs	r3, r2
 80130ba:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80130bc:	4b33      	ldr	r3, [pc, #204]	; (801318c <HAL_RCC_OscConfig+0x764>)
 80130be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80130c0:	4a32      	ldr	r2, [pc, #200]	; (801318c <HAL_RCC_OscConfig+0x764>)
 80130c2:	f023 0301 	bic.w	r3, r3, #1
 80130c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80130c8:	4b30      	ldr	r3, [pc, #192]	; (801318c <HAL_RCC_OscConfig+0x764>)
 80130ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80130cc:	4b31      	ldr	r3, [pc, #196]	; (8013194 <HAL_RCC_OscConfig+0x76c>)
 80130ce:	4013      	ands	r3, r2
 80130d0:	687a      	ldr	r2, [r7, #4]
 80130d2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80130d4:	00d2      	lsls	r2, r2, #3
 80130d6:	492d      	ldr	r1, [pc, #180]	; (801318c <HAL_RCC_OscConfig+0x764>)
 80130d8:	4313      	orrs	r3, r2
 80130da:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80130dc:	4b2b      	ldr	r3, [pc, #172]	; (801318c <HAL_RCC_OscConfig+0x764>)
 80130de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80130e0:	f023 020c 	bic.w	r2, r3, #12
 80130e4:	687b      	ldr	r3, [r7, #4]
 80130e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80130e8:	4928      	ldr	r1, [pc, #160]	; (801318c <HAL_RCC_OscConfig+0x764>)
 80130ea:	4313      	orrs	r3, r2
 80130ec:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80130ee:	4b27      	ldr	r3, [pc, #156]	; (801318c <HAL_RCC_OscConfig+0x764>)
 80130f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80130f2:	f023 0202 	bic.w	r2, r3, #2
 80130f6:	687b      	ldr	r3, [r7, #4]
 80130f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80130fa:	4924      	ldr	r1, [pc, #144]	; (801318c <HAL_RCC_OscConfig+0x764>)
 80130fc:	4313      	orrs	r3, r2
 80130fe:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8013100:	4b22      	ldr	r3, [pc, #136]	; (801318c <HAL_RCC_OscConfig+0x764>)
 8013102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013104:	4a21      	ldr	r2, [pc, #132]	; (801318c <HAL_RCC_OscConfig+0x764>)
 8013106:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801310a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801310c:	4b1f      	ldr	r3, [pc, #124]	; (801318c <HAL_RCC_OscConfig+0x764>)
 801310e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013110:	4a1e      	ldr	r2, [pc, #120]	; (801318c <HAL_RCC_OscConfig+0x764>)
 8013112:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8013116:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8013118:	4b1c      	ldr	r3, [pc, #112]	; (801318c <HAL_RCC_OscConfig+0x764>)
 801311a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801311c:	4a1b      	ldr	r2, [pc, #108]	; (801318c <HAL_RCC_OscConfig+0x764>)
 801311e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8013122:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8013124:	4b19      	ldr	r3, [pc, #100]	; (801318c <HAL_RCC_OscConfig+0x764>)
 8013126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013128:	4a18      	ldr	r2, [pc, #96]	; (801318c <HAL_RCC_OscConfig+0x764>)
 801312a:	f043 0301 	orr.w	r3, r3, #1
 801312e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8013130:	4b16      	ldr	r3, [pc, #88]	; (801318c <HAL_RCC_OscConfig+0x764>)
 8013132:	681b      	ldr	r3, [r3, #0]
 8013134:	4a15      	ldr	r2, [pc, #84]	; (801318c <HAL_RCC_OscConfig+0x764>)
 8013136:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801313a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801313c:	f7f9 ff60 	bl	800d000 <HAL_GetTick>
 8013140:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8013142:	e008      	b.n	8013156 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8013144:	f7f9 ff5c 	bl	800d000 <HAL_GetTick>
 8013148:	4602      	mov	r2, r0
 801314a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801314c:	1ad3      	subs	r3, r2, r3
 801314e:	2b02      	cmp	r3, #2
 8013150:	d901      	bls.n	8013156 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8013152:	2303      	movs	r3, #3
 8013154:	e091      	b.n	801327a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8013156:	4b0d      	ldr	r3, [pc, #52]	; (801318c <HAL_RCC_OscConfig+0x764>)
 8013158:	681b      	ldr	r3, [r3, #0]
 801315a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801315e:	2b00      	cmp	r3, #0
 8013160:	d0f0      	beq.n	8013144 <HAL_RCC_OscConfig+0x71c>
 8013162:	e089      	b.n	8013278 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8013164:	4b09      	ldr	r3, [pc, #36]	; (801318c <HAL_RCC_OscConfig+0x764>)
 8013166:	681b      	ldr	r3, [r3, #0]
 8013168:	4a08      	ldr	r2, [pc, #32]	; (801318c <HAL_RCC_OscConfig+0x764>)
 801316a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801316e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013170:	f7f9 ff46 	bl	800d000 <HAL_GetTick>
 8013174:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8013176:	e00f      	b.n	8013198 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8013178:	f7f9 ff42 	bl	800d000 <HAL_GetTick>
 801317c:	4602      	mov	r2, r0
 801317e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013180:	1ad3      	subs	r3, r2, r3
 8013182:	2b02      	cmp	r3, #2
 8013184:	d908      	bls.n	8013198 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8013186:	2303      	movs	r3, #3
 8013188:	e077      	b.n	801327a <HAL_RCC_OscConfig+0x852>
 801318a:	bf00      	nop
 801318c:	58024400 	.word	0x58024400
 8013190:	fffffc0c 	.word	0xfffffc0c
 8013194:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8013198:	4b3a      	ldr	r3, [pc, #232]	; (8013284 <HAL_RCC_OscConfig+0x85c>)
 801319a:	681b      	ldr	r3, [r3, #0]
 801319c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80131a0:	2b00      	cmp	r3, #0
 80131a2:	d1e9      	bne.n	8013178 <HAL_RCC_OscConfig+0x750>
 80131a4:	e068      	b.n	8013278 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80131a6:	4b37      	ldr	r3, [pc, #220]	; (8013284 <HAL_RCC_OscConfig+0x85c>)
 80131a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80131aa:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80131ac:	4b35      	ldr	r3, [pc, #212]	; (8013284 <HAL_RCC_OscConfig+0x85c>)
 80131ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80131b0:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80131b6:	2b01      	cmp	r3, #1
 80131b8:	d031      	beq.n	801321e <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80131ba:	693b      	ldr	r3, [r7, #16]
 80131bc:	f003 0203 	and.w	r2, r3, #3
 80131c0:	687b      	ldr	r3, [r7, #4]
 80131c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80131c4:	429a      	cmp	r2, r3
 80131c6:	d12a      	bne.n	801321e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80131c8:	693b      	ldr	r3, [r7, #16]
 80131ca:	091b      	lsrs	r3, r3, #4
 80131cc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80131d0:	687b      	ldr	r3, [r7, #4]
 80131d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80131d4:	429a      	cmp	r2, r3
 80131d6:	d122      	bne.n	801321e <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80131d8:	68fb      	ldr	r3, [r7, #12]
 80131da:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80131de:	687b      	ldr	r3, [r7, #4]
 80131e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80131e2:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80131e4:	429a      	cmp	r2, r3
 80131e6:	d11a      	bne.n	801321e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80131e8:	68fb      	ldr	r3, [r7, #12]
 80131ea:	0a5b      	lsrs	r3, r3, #9
 80131ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80131f0:	687b      	ldr	r3, [r7, #4]
 80131f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80131f4:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80131f6:	429a      	cmp	r2, r3
 80131f8:	d111      	bne.n	801321e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80131fa:	68fb      	ldr	r3, [r7, #12]
 80131fc:	0c1b      	lsrs	r3, r3, #16
 80131fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8013202:	687b      	ldr	r3, [r7, #4]
 8013204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013206:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8013208:	429a      	cmp	r2, r3
 801320a:	d108      	bne.n	801321e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 801320c:	68fb      	ldr	r3, [r7, #12]
 801320e:	0e1b      	lsrs	r3, r3, #24
 8013210:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8013214:	687b      	ldr	r3, [r7, #4]
 8013216:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013218:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 801321a:	429a      	cmp	r2, r3
 801321c:	d001      	beq.n	8013222 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 801321e:	2301      	movs	r3, #1
 8013220:	e02b      	b.n	801327a <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8013222:	4b18      	ldr	r3, [pc, #96]	; (8013284 <HAL_RCC_OscConfig+0x85c>)
 8013224:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013226:	08db      	lsrs	r3, r3, #3
 8013228:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801322c:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 801322e:	687b      	ldr	r3, [r7, #4]
 8013230:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013232:	693a      	ldr	r2, [r7, #16]
 8013234:	429a      	cmp	r2, r3
 8013236:	d01f      	beq.n	8013278 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8013238:	4b12      	ldr	r3, [pc, #72]	; (8013284 <HAL_RCC_OscConfig+0x85c>)
 801323a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801323c:	4a11      	ldr	r2, [pc, #68]	; (8013284 <HAL_RCC_OscConfig+0x85c>)
 801323e:	f023 0301 	bic.w	r3, r3, #1
 8013242:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8013244:	f7f9 fedc 	bl	800d000 <HAL_GetTick>
 8013248:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 801324a:	bf00      	nop
 801324c:	f7f9 fed8 	bl	800d000 <HAL_GetTick>
 8013250:	4602      	mov	r2, r0
 8013252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013254:	4293      	cmp	r3, r2
 8013256:	d0f9      	beq.n	801324c <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8013258:	4b0a      	ldr	r3, [pc, #40]	; (8013284 <HAL_RCC_OscConfig+0x85c>)
 801325a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801325c:	4b0a      	ldr	r3, [pc, #40]	; (8013288 <HAL_RCC_OscConfig+0x860>)
 801325e:	4013      	ands	r3, r2
 8013260:	687a      	ldr	r2, [r7, #4]
 8013262:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8013264:	00d2      	lsls	r2, r2, #3
 8013266:	4907      	ldr	r1, [pc, #28]	; (8013284 <HAL_RCC_OscConfig+0x85c>)
 8013268:	4313      	orrs	r3, r2
 801326a:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 801326c:	4b05      	ldr	r3, [pc, #20]	; (8013284 <HAL_RCC_OscConfig+0x85c>)
 801326e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013270:	4a04      	ldr	r2, [pc, #16]	; (8013284 <HAL_RCC_OscConfig+0x85c>)
 8013272:	f043 0301 	orr.w	r3, r3, #1
 8013276:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8013278:	2300      	movs	r3, #0
}
 801327a:	4618      	mov	r0, r3
 801327c:	3730      	adds	r7, #48	; 0x30
 801327e:	46bd      	mov	sp, r7
 8013280:	bd80      	pop	{r7, pc}
 8013282:	bf00      	nop
 8013284:	58024400 	.word	0x58024400
 8013288:	ffff0007 	.word	0xffff0007

0801328c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801328c:	b580      	push	{r7, lr}
 801328e:	b086      	sub	sp, #24
 8013290:	af00      	add	r7, sp, #0
 8013292:	6078      	str	r0, [r7, #4]
 8013294:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8013296:	687b      	ldr	r3, [r7, #4]
 8013298:	2b00      	cmp	r3, #0
 801329a:	d101      	bne.n	80132a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801329c:	2301      	movs	r3, #1
 801329e:	e19c      	b.n	80135da <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80132a0:	4b8a      	ldr	r3, [pc, #552]	; (80134cc <HAL_RCC_ClockConfig+0x240>)
 80132a2:	681b      	ldr	r3, [r3, #0]
 80132a4:	f003 030f 	and.w	r3, r3, #15
 80132a8:	683a      	ldr	r2, [r7, #0]
 80132aa:	429a      	cmp	r2, r3
 80132ac:	d910      	bls.n	80132d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80132ae:	4b87      	ldr	r3, [pc, #540]	; (80134cc <HAL_RCC_ClockConfig+0x240>)
 80132b0:	681b      	ldr	r3, [r3, #0]
 80132b2:	f023 020f 	bic.w	r2, r3, #15
 80132b6:	4985      	ldr	r1, [pc, #532]	; (80134cc <HAL_RCC_ClockConfig+0x240>)
 80132b8:	683b      	ldr	r3, [r7, #0]
 80132ba:	4313      	orrs	r3, r2
 80132bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80132be:	4b83      	ldr	r3, [pc, #524]	; (80134cc <HAL_RCC_ClockConfig+0x240>)
 80132c0:	681b      	ldr	r3, [r3, #0]
 80132c2:	f003 030f 	and.w	r3, r3, #15
 80132c6:	683a      	ldr	r2, [r7, #0]
 80132c8:	429a      	cmp	r2, r3
 80132ca:	d001      	beq.n	80132d0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80132cc:	2301      	movs	r3, #1
 80132ce:	e184      	b.n	80135da <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80132d0:	687b      	ldr	r3, [r7, #4]
 80132d2:	681b      	ldr	r3, [r3, #0]
 80132d4:	f003 0304 	and.w	r3, r3, #4
 80132d8:	2b00      	cmp	r3, #0
 80132da:	d010      	beq.n	80132fe <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80132dc:	687b      	ldr	r3, [r7, #4]
 80132de:	691a      	ldr	r2, [r3, #16]
 80132e0:	4b7b      	ldr	r3, [pc, #492]	; (80134d0 <HAL_RCC_ClockConfig+0x244>)
 80132e2:	699b      	ldr	r3, [r3, #24]
 80132e4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80132e8:	429a      	cmp	r2, r3
 80132ea:	d908      	bls.n	80132fe <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80132ec:	4b78      	ldr	r3, [pc, #480]	; (80134d0 <HAL_RCC_ClockConfig+0x244>)
 80132ee:	699b      	ldr	r3, [r3, #24]
 80132f0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80132f4:	687b      	ldr	r3, [r7, #4]
 80132f6:	691b      	ldr	r3, [r3, #16]
 80132f8:	4975      	ldr	r1, [pc, #468]	; (80134d0 <HAL_RCC_ClockConfig+0x244>)
 80132fa:	4313      	orrs	r3, r2
 80132fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	681b      	ldr	r3, [r3, #0]
 8013302:	f003 0308 	and.w	r3, r3, #8
 8013306:	2b00      	cmp	r3, #0
 8013308:	d010      	beq.n	801332c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 801330a:	687b      	ldr	r3, [r7, #4]
 801330c:	695a      	ldr	r2, [r3, #20]
 801330e:	4b70      	ldr	r3, [pc, #448]	; (80134d0 <HAL_RCC_ClockConfig+0x244>)
 8013310:	69db      	ldr	r3, [r3, #28]
 8013312:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8013316:	429a      	cmp	r2, r3
 8013318:	d908      	bls.n	801332c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 801331a:	4b6d      	ldr	r3, [pc, #436]	; (80134d0 <HAL_RCC_ClockConfig+0x244>)
 801331c:	69db      	ldr	r3, [r3, #28]
 801331e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8013322:	687b      	ldr	r3, [r7, #4]
 8013324:	695b      	ldr	r3, [r3, #20]
 8013326:	496a      	ldr	r1, [pc, #424]	; (80134d0 <HAL_RCC_ClockConfig+0x244>)
 8013328:	4313      	orrs	r3, r2
 801332a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801332c:	687b      	ldr	r3, [r7, #4]
 801332e:	681b      	ldr	r3, [r3, #0]
 8013330:	f003 0310 	and.w	r3, r3, #16
 8013334:	2b00      	cmp	r3, #0
 8013336:	d010      	beq.n	801335a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8013338:	687b      	ldr	r3, [r7, #4]
 801333a:	699a      	ldr	r2, [r3, #24]
 801333c:	4b64      	ldr	r3, [pc, #400]	; (80134d0 <HAL_RCC_ClockConfig+0x244>)
 801333e:	69db      	ldr	r3, [r3, #28]
 8013340:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8013344:	429a      	cmp	r2, r3
 8013346:	d908      	bls.n	801335a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8013348:	4b61      	ldr	r3, [pc, #388]	; (80134d0 <HAL_RCC_ClockConfig+0x244>)
 801334a:	69db      	ldr	r3, [r3, #28]
 801334c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8013350:	687b      	ldr	r3, [r7, #4]
 8013352:	699b      	ldr	r3, [r3, #24]
 8013354:	495e      	ldr	r1, [pc, #376]	; (80134d0 <HAL_RCC_ClockConfig+0x244>)
 8013356:	4313      	orrs	r3, r2
 8013358:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 801335a:	687b      	ldr	r3, [r7, #4]
 801335c:	681b      	ldr	r3, [r3, #0]
 801335e:	f003 0320 	and.w	r3, r3, #32
 8013362:	2b00      	cmp	r3, #0
 8013364:	d010      	beq.n	8013388 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8013366:	687b      	ldr	r3, [r7, #4]
 8013368:	69da      	ldr	r2, [r3, #28]
 801336a:	4b59      	ldr	r3, [pc, #356]	; (80134d0 <HAL_RCC_ClockConfig+0x244>)
 801336c:	6a1b      	ldr	r3, [r3, #32]
 801336e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8013372:	429a      	cmp	r2, r3
 8013374:	d908      	bls.n	8013388 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8013376:	4b56      	ldr	r3, [pc, #344]	; (80134d0 <HAL_RCC_ClockConfig+0x244>)
 8013378:	6a1b      	ldr	r3, [r3, #32]
 801337a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 801337e:	687b      	ldr	r3, [r7, #4]
 8013380:	69db      	ldr	r3, [r3, #28]
 8013382:	4953      	ldr	r1, [pc, #332]	; (80134d0 <HAL_RCC_ClockConfig+0x244>)
 8013384:	4313      	orrs	r3, r2
 8013386:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8013388:	687b      	ldr	r3, [r7, #4]
 801338a:	681b      	ldr	r3, [r3, #0]
 801338c:	f003 0302 	and.w	r3, r3, #2
 8013390:	2b00      	cmp	r3, #0
 8013392:	d010      	beq.n	80133b6 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8013394:	687b      	ldr	r3, [r7, #4]
 8013396:	68da      	ldr	r2, [r3, #12]
 8013398:	4b4d      	ldr	r3, [pc, #308]	; (80134d0 <HAL_RCC_ClockConfig+0x244>)
 801339a:	699b      	ldr	r3, [r3, #24]
 801339c:	f003 030f 	and.w	r3, r3, #15
 80133a0:	429a      	cmp	r2, r3
 80133a2:	d908      	bls.n	80133b6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80133a4:	4b4a      	ldr	r3, [pc, #296]	; (80134d0 <HAL_RCC_ClockConfig+0x244>)
 80133a6:	699b      	ldr	r3, [r3, #24]
 80133a8:	f023 020f 	bic.w	r2, r3, #15
 80133ac:	687b      	ldr	r3, [r7, #4]
 80133ae:	68db      	ldr	r3, [r3, #12]
 80133b0:	4947      	ldr	r1, [pc, #284]	; (80134d0 <HAL_RCC_ClockConfig+0x244>)
 80133b2:	4313      	orrs	r3, r2
 80133b4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80133b6:	687b      	ldr	r3, [r7, #4]
 80133b8:	681b      	ldr	r3, [r3, #0]
 80133ba:	f003 0301 	and.w	r3, r3, #1
 80133be:	2b00      	cmp	r3, #0
 80133c0:	d055      	beq.n	801346e <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80133c2:	4b43      	ldr	r3, [pc, #268]	; (80134d0 <HAL_RCC_ClockConfig+0x244>)
 80133c4:	699b      	ldr	r3, [r3, #24]
 80133c6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80133ca:	687b      	ldr	r3, [r7, #4]
 80133cc:	689b      	ldr	r3, [r3, #8]
 80133ce:	4940      	ldr	r1, [pc, #256]	; (80134d0 <HAL_RCC_ClockConfig+0x244>)
 80133d0:	4313      	orrs	r3, r2
 80133d2:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80133d4:	687b      	ldr	r3, [r7, #4]
 80133d6:	685b      	ldr	r3, [r3, #4]
 80133d8:	2b02      	cmp	r3, #2
 80133da:	d107      	bne.n	80133ec <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80133dc:	4b3c      	ldr	r3, [pc, #240]	; (80134d0 <HAL_RCC_ClockConfig+0x244>)
 80133de:	681b      	ldr	r3, [r3, #0]
 80133e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80133e4:	2b00      	cmp	r3, #0
 80133e6:	d121      	bne.n	801342c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80133e8:	2301      	movs	r3, #1
 80133ea:	e0f6      	b.n	80135da <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80133ec:	687b      	ldr	r3, [r7, #4]
 80133ee:	685b      	ldr	r3, [r3, #4]
 80133f0:	2b03      	cmp	r3, #3
 80133f2:	d107      	bne.n	8013404 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80133f4:	4b36      	ldr	r3, [pc, #216]	; (80134d0 <HAL_RCC_ClockConfig+0x244>)
 80133f6:	681b      	ldr	r3, [r3, #0]
 80133f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80133fc:	2b00      	cmp	r3, #0
 80133fe:	d115      	bne.n	801342c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8013400:	2301      	movs	r3, #1
 8013402:	e0ea      	b.n	80135da <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	685b      	ldr	r3, [r3, #4]
 8013408:	2b01      	cmp	r3, #1
 801340a:	d107      	bne.n	801341c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801340c:	4b30      	ldr	r3, [pc, #192]	; (80134d0 <HAL_RCC_ClockConfig+0x244>)
 801340e:	681b      	ldr	r3, [r3, #0]
 8013410:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013414:	2b00      	cmp	r3, #0
 8013416:	d109      	bne.n	801342c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8013418:	2301      	movs	r3, #1
 801341a:	e0de      	b.n	80135da <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801341c:	4b2c      	ldr	r3, [pc, #176]	; (80134d0 <HAL_RCC_ClockConfig+0x244>)
 801341e:	681b      	ldr	r3, [r3, #0]
 8013420:	f003 0304 	and.w	r3, r3, #4
 8013424:	2b00      	cmp	r3, #0
 8013426:	d101      	bne.n	801342c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8013428:	2301      	movs	r3, #1
 801342a:	e0d6      	b.n	80135da <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 801342c:	4b28      	ldr	r3, [pc, #160]	; (80134d0 <HAL_RCC_ClockConfig+0x244>)
 801342e:	691b      	ldr	r3, [r3, #16]
 8013430:	f023 0207 	bic.w	r2, r3, #7
 8013434:	687b      	ldr	r3, [r7, #4]
 8013436:	685b      	ldr	r3, [r3, #4]
 8013438:	4925      	ldr	r1, [pc, #148]	; (80134d0 <HAL_RCC_ClockConfig+0x244>)
 801343a:	4313      	orrs	r3, r2
 801343c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801343e:	f7f9 fddf 	bl	800d000 <HAL_GetTick>
 8013442:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8013444:	e00a      	b.n	801345c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8013446:	f7f9 fddb 	bl	800d000 <HAL_GetTick>
 801344a:	4602      	mov	r2, r0
 801344c:	697b      	ldr	r3, [r7, #20]
 801344e:	1ad3      	subs	r3, r2, r3
 8013450:	f241 3288 	movw	r2, #5000	; 0x1388
 8013454:	4293      	cmp	r3, r2
 8013456:	d901      	bls.n	801345c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8013458:	2303      	movs	r3, #3
 801345a:	e0be      	b.n	80135da <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801345c:	4b1c      	ldr	r3, [pc, #112]	; (80134d0 <HAL_RCC_ClockConfig+0x244>)
 801345e:	691b      	ldr	r3, [r3, #16]
 8013460:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8013464:	687b      	ldr	r3, [r7, #4]
 8013466:	685b      	ldr	r3, [r3, #4]
 8013468:	00db      	lsls	r3, r3, #3
 801346a:	429a      	cmp	r2, r3
 801346c:	d1eb      	bne.n	8013446 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801346e:	687b      	ldr	r3, [r7, #4]
 8013470:	681b      	ldr	r3, [r3, #0]
 8013472:	f003 0302 	and.w	r3, r3, #2
 8013476:	2b00      	cmp	r3, #0
 8013478:	d010      	beq.n	801349c <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 801347a:	687b      	ldr	r3, [r7, #4]
 801347c:	68da      	ldr	r2, [r3, #12]
 801347e:	4b14      	ldr	r3, [pc, #80]	; (80134d0 <HAL_RCC_ClockConfig+0x244>)
 8013480:	699b      	ldr	r3, [r3, #24]
 8013482:	f003 030f 	and.w	r3, r3, #15
 8013486:	429a      	cmp	r2, r3
 8013488:	d208      	bcs.n	801349c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801348a:	4b11      	ldr	r3, [pc, #68]	; (80134d0 <HAL_RCC_ClockConfig+0x244>)
 801348c:	699b      	ldr	r3, [r3, #24]
 801348e:	f023 020f 	bic.w	r2, r3, #15
 8013492:	687b      	ldr	r3, [r7, #4]
 8013494:	68db      	ldr	r3, [r3, #12]
 8013496:	490e      	ldr	r1, [pc, #56]	; (80134d0 <HAL_RCC_ClockConfig+0x244>)
 8013498:	4313      	orrs	r3, r2
 801349a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 801349c:	4b0b      	ldr	r3, [pc, #44]	; (80134cc <HAL_RCC_ClockConfig+0x240>)
 801349e:	681b      	ldr	r3, [r3, #0]
 80134a0:	f003 030f 	and.w	r3, r3, #15
 80134a4:	683a      	ldr	r2, [r7, #0]
 80134a6:	429a      	cmp	r2, r3
 80134a8:	d214      	bcs.n	80134d4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80134aa:	4b08      	ldr	r3, [pc, #32]	; (80134cc <HAL_RCC_ClockConfig+0x240>)
 80134ac:	681b      	ldr	r3, [r3, #0]
 80134ae:	f023 020f 	bic.w	r2, r3, #15
 80134b2:	4906      	ldr	r1, [pc, #24]	; (80134cc <HAL_RCC_ClockConfig+0x240>)
 80134b4:	683b      	ldr	r3, [r7, #0]
 80134b6:	4313      	orrs	r3, r2
 80134b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80134ba:	4b04      	ldr	r3, [pc, #16]	; (80134cc <HAL_RCC_ClockConfig+0x240>)
 80134bc:	681b      	ldr	r3, [r3, #0]
 80134be:	f003 030f 	and.w	r3, r3, #15
 80134c2:	683a      	ldr	r2, [r7, #0]
 80134c4:	429a      	cmp	r2, r3
 80134c6:	d005      	beq.n	80134d4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80134c8:	2301      	movs	r3, #1
 80134ca:	e086      	b.n	80135da <HAL_RCC_ClockConfig+0x34e>
 80134cc:	52002000 	.word	0x52002000
 80134d0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80134d4:	687b      	ldr	r3, [r7, #4]
 80134d6:	681b      	ldr	r3, [r3, #0]
 80134d8:	f003 0304 	and.w	r3, r3, #4
 80134dc:	2b00      	cmp	r3, #0
 80134de:	d010      	beq.n	8013502 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80134e0:	687b      	ldr	r3, [r7, #4]
 80134e2:	691a      	ldr	r2, [r3, #16]
 80134e4:	4b3f      	ldr	r3, [pc, #252]	; (80135e4 <HAL_RCC_ClockConfig+0x358>)
 80134e6:	699b      	ldr	r3, [r3, #24]
 80134e8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80134ec:	429a      	cmp	r2, r3
 80134ee:	d208      	bcs.n	8013502 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80134f0:	4b3c      	ldr	r3, [pc, #240]	; (80135e4 <HAL_RCC_ClockConfig+0x358>)
 80134f2:	699b      	ldr	r3, [r3, #24]
 80134f4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80134f8:	687b      	ldr	r3, [r7, #4]
 80134fa:	691b      	ldr	r3, [r3, #16]
 80134fc:	4939      	ldr	r1, [pc, #228]	; (80135e4 <HAL_RCC_ClockConfig+0x358>)
 80134fe:	4313      	orrs	r3, r2
 8013500:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8013502:	687b      	ldr	r3, [r7, #4]
 8013504:	681b      	ldr	r3, [r3, #0]
 8013506:	f003 0308 	and.w	r3, r3, #8
 801350a:	2b00      	cmp	r3, #0
 801350c:	d010      	beq.n	8013530 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 801350e:	687b      	ldr	r3, [r7, #4]
 8013510:	695a      	ldr	r2, [r3, #20]
 8013512:	4b34      	ldr	r3, [pc, #208]	; (80135e4 <HAL_RCC_ClockConfig+0x358>)
 8013514:	69db      	ldr	r3, [r3, #28]
 8013516:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801351a:	429a      	cmp	r2, r3
 801351c:	d208      	bcs.n	8013530 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 801351e:	4b31      	ldr	r3, [pc, #196]	; (80135e4 <HAL_RCC_ClockConfig+0x358>)
 8013520:	69db      	ldr	r3, [r3, #28]
 8013522:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8013526:	687b      	ldr	r3, [r7, #4]
 8013528:	695b      	ldr	r3, [r3, #20]
 801352a:	492e      	ldr	r1, [pc, #184]	; (80135e4 <HAL_RCC_ClockConfig+0x358>)
 801352c:	4313      	orrs	r3, r2
 801352e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8013530:	687b      	ldr	r3, [r7, #4]
 8013532:	681b      	ldr	r3, [r3, #0]
 8013534:	f003 0310 	and.w	r3, r3, #16
 8013538:	2b00      	cmp	r3, #0
 801353a:	d010      	beq.n	801355e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 801353c:	687b      	ldr	r3, [r7, #4]
 801353e:	699a      	ldr	r2, [r3, #24]
 8013540:	4b28      	ldr	r3, [pc, #160]	; (80135e4 <HAL_RCC_ClockConfig+0x358>)
 8013542:	69db      	ldr	r3, [r3, #28]
 8013544:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8013548:	429a      	cmp	r2, r3
 801354a:	d208      	bcs.n	801355e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 801354c:	4b25      	ldr	r3, [pc, #148]	; (80135e4 <HAL_RCC_ClockConfig+0x358>)
 801354e:	69db      	ldr	r3, [r3, #28]
 8013550:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8013554:	687b      	ldr	r3, [r7, #4]
 8013556:	699b      	ldr	r3, [r3, #24]
 8013558:	4922      	ldr	r1, [pc, #136]	; (80135e4 <HAL_RCC_ClockConfig+0x358>)
 801355a:	4313      	orrs	r3, r2
 801355c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 801355e:	687b      	ldr	r3, [r7, #4]
 8013560:	681b      	ldr	r3, [r3, #0]
 8013562:	f003 0320 	and.w	r3, r3, #32
 8013566:	2b00      	cmp	r3, #0
 8013568:	d010      	beq.n	801358c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 801356a:	687b      	ldr	r3, [r7, #4]
 801356c:	69da      	ldr	r2, [r3, #28]
 801356e:	4b1d      	ldr	r3, [pc, #116]	; (80135e4 <HAL_RCC_ClockConfig+0x358>)
 8013570:	6a1b      	ldr	r3, [r3, #32]
 8013572:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8013576:	429a      	cmp	r2, r3
 8013578:	d208      	bcs.n	801358c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 801357a:	4b1a      	ldr	r3, [pc, #104]	; (80135e4 <HAL_RCC_ClockConfig+0x358>)
 801357c:	6a1b      	ldr	r3, [r3, #32]
 801357e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8013582:	687b      	ldr	r3, [r7, #4]
 8013584:	69db      	ldr	r3, [r3, #28]
 8013586:	4917      	ldr	r1, [pc, #92]	; (80135e4 <HAL_RCC_ClockConfig+0x358>)
 8013588:	4313      	orrs	r3, r2
 801358a:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 801358c:	f000 f834 	bl	80135f8 <HAL_RCC_GetSysClockFreq>
 8013590:	4602      	mov	r2, r0
 8013592:	4b14      	ldr	r3, [pc, #80]	; (80135e4 <HAL_RCC_ClockConfig+0x358>)
 8013594:	699b      	ldr	r3, [r3, #24]
 8013596:	0a1b      	lsrs	r3, r3, #8
 8013598:	f003 030f 	and.w	r3, r3, #15
 801359c:	4912      	ldr	r1, [pc, #72]	; (80135e8 <HAL_RCC_ClockConfig+0x35c>)
 801359e:	5ccb      	ldrb	r3, [r1, r3]
 80135a0:	f003 031f 	and.w	r3, r3, #31
 80135a4:	fa22 f303 	lsr.w	r3, r2, r3
 80135a8:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80135aa:	4b0e      	ldr	r3, [pc, #56]	; (80135e4 <HAL_RCC_ClockConfig+0x358>)
 80135ac:	699b      	ldr	r3, [r3, #24]
 80135ae:	f003 030f 	and.w	r3, r3, #15
 80135b2:	4a0d      	ldr	r2, [pc, #52]	; (80135e8 <HAL_RCC_ClockConfig+0x35c>)
 80135b4:	5cd3      	ldrb	r3, [r2, r3]
 80135b6:	f003 031f 	and.w	r3, r3, #31
 80135ba:	693a      	ldr	r2, [r7, #16]
 80135bc:	fa22 f303 	lsr.w	r3, r2, r3
 80135c0:	4a0a      	ldr	r2, [pc, #40]	; (80135ec <HAL_RCC_ClockConfig+0x360>)
 80135c2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80135c4:	4a0a      	ldr	r2, [pc, #40]	; (80135f0 <HAL_RCC_ClockConfig+0x364>)
 80135c6:	693b      	ldr	r3, [r7, #16]
 80135c8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80135ca:	4b0a      	ldr	r3, [pc, #40]	; (80135f4 <HAL_RCC_ClockConfig+0x368>)
 80135cc:	681b      	ldr	r3, [r3, #0]
 80135ce:	4618      	mov	r0, r3
 80135d0:	f7ee f8ac 	bl	800172c <HAL_InitTick>
 80135d4:	4603      	mov	r3, r0
 80135d6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80135d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80135da:	4618      	mov	r0, r3
 80135dc:	3718      	adds	r7, #24
 80135de:	46bd      	mov	sp, r7
 80135e0:	bd80      	pop	{r7, pc}
 80135e2:	bf00      	nop
 80135e4:	58024400 	.word	0x58024400
 80135e8:	0802cc88 	.word	0x0802cc88
 80135ec:	24000058 	.word	0x24000058
 80135f0:	24000054 	.word	0x24000054
 80135f4:	2400005c 	.word	0x2400005c

080135f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80135f8:	b480      	push	{r7}
 80135fa:	b089      	sub	sp, #36	; 0x24
 80135fc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80135fe:	4bb3      	ldr	r3, [pc, #716]	; (80138cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8013600:	691b      	ldr	r3, [r3, #16]
 8013602:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8013606:	2b18      	cmp	r3, #24
 8013608:	f200 8155 	bhi.w	80138b6 <HAL_RCC_GetSysClockFreq+0x2be>
 801360c:	a201      	add	r2, pc, #4	; (adr r2, 8013614 <HAL_RCC_GetSysClockFreq+0x1c>)
 801360e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013612:	bf00      	nop
 8013614:	08013679 	.word	0x08013679
 8013618:	080138b7 	.word	0x080138b7
 801361c:	080138b7 	.word	0x080138b7
 8013620:	080138b7 	.word	0x080138b7
 8013624:	080138b7 	.word	0x080138b7
 8013628:	080138b7 	.word	0x080138b7
 801362c:	080138b7 	.word	0x080138b7
 8013630:	080138b7 	.word	0x080138b7
 8013634:	0801369f 	.word	0x0801369f
 8013638:	080138b7 	.word	0x080138b7
 801363c:	080138b7 	.word	0x080138b7
 8013640:	080138b7 	.word	0x080138b7
 8013644:	080138b7 	.word	0x080138b7
 8013648:	080138b7 	.word	0x080138b7
 801364c:	080138b7 	.word	0x080138b7
 8013650:	080138b7 	.word	0x080138b7
 8013654:	080136a5 	.word	0x080136a5
 8013658:	080138b7 	.word	0x080138b7
 801365c:	080138b7 	.word	0x080138b7
 8013660:	080138b7 	.word	0x080138b7
 8013664:	080138b7 	.word	0x080138b7
 8013668:	080138b7 	.word	0x080138b7
 801366c:	080138b7 	.word	0x080138b7
 8013670:	080138b7 	.word	0x080138b7
 8013674:	080136ab 	.word	0x080136ab
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8013678:	4b94      	ldr	r3, [pc, #592]	; (80138cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 801367a:	681b      	ldr	r3, [r3, #0]
 801367c:	f003 0320 	and.w	r3, r3, #32
 8013680:	2b00      	cmp	r3, #0
 8013682:	d009      	beq.n	8013698 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8013684:	4b91      	ldr	r3, [pc, #580]	; (80138cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8013686:	681b      	ldr	r3, [r3, #0]
 8013688:	08db      	lsrs	r3, r3, #3
 801368a:	f003 0303 	and.w	r3, r3, #3
 801368e:	4a90      	ldr	r2, [pc, #576]	; (80138d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8013690:	fa22 f303 	lsr.w	r3, r2, r3
 8013694:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8013696:	e111      	b.n	80138bc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8013698:	4b8d      	ldr	r3, [pc, #564]	; (80138d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 801369a:	61bb      	str	r3, [r7, #24]
      break;
 801369c:	e10e      	b.n	80138bc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 801369e:	4b8d      	ldr	r3, [pc, #564]	; (80138d4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80136a0:	61bb      	str	r3, [r7, #24]
      break;
 80136a2:	e10b      	b.n	80138bc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80136a4:	4b8c      	ldr	r3, [pc, #560]	; (80138d8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80136a6:	61bb      	str	r3, [r7, #24]
      break;
 80136a8:	e108      	b.n	80138bc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80136aa:	4b88      	ldr	r3, [pc, #544]	; (80138cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80136ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80136ae:	f003 0303 	and.w	r3, r3, #3
 80136b2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80136b4:	4b85      	ldr	r3, [pc, #532]	; (80138cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80136b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80136b8:	091b      	lsrs	r3, r3, #4
 80136ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80136be:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80136c0:	4b82      	ldr	r3, [pc, #520]	; (80138cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80136c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80136c4:	f003 0301 	and.w	r3, r3, #1
 80136c8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80136ca:	4b80      	ldr	r3, [pc, #512]	; (80138cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80136cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80136ce:	08db      	lsrs	r3, r3, #3
 80136d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80136d4:	68fa      	ldr	r2, [r7, #12]
 80136d6:	fb02 f303 	mul.w	r3, r2, r3
 80136da:	ee07 3a90 	vmov	s15, r3
 80136de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80136e2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80136e6:	693b      	ldr	r3, [r7, #16]
 80136e8:	2b00      	cmp	r3, #0
 80136ea:	f000 80e1 	beq.w	80138b0 <HAL_RCC_GetSysClockFreq+0x2b8>
 80136ee:	697b      	ldr	r3, [r7, #20]
 80136f0:	2b02      	cmp	r3, #2
 80136f2:	f000 8083 	beq.w	80137fc <HAL_RCC_GetSysClockFreq+0x204>
 80136f6:	697b      	ldr	r3, [r7, #20]
 80136f8:	2b02      	cmp	r3, #2
 80136fa:	f200 80a1 	bhi.w	8013840 <HAL_RCC_GetSysClockFreq+0x248>
 80136fe:	697b      	ldr	r3, [r7, #20]
 8013700:	2b00      	cmp	r3, #0
 8013702:	d003      	beq.n	801370c <HAL_RCC_GetSysClockFreq+0x114>
 8013704:	697b      	ldr	r3, [r7, #20]
 8013706:	2b01      	cmp	r3, #1
 8013708:	d056      	beq.n	80137b8 <HAL_RCC_GetSysClockFreq+0x1c0>
 801370a:	e099      	b.n	8013840 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801370c:	4b6f      	ldr	r3, [pc, #444]	; (80138cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 801370e:	681b      	ldr	r3, [r3, #0]
 8013710:	f003 0320 	and.w	r3, r3, #32
 8013714:	2b00      	cmp	r3, #0
 8013716:	d02d      	beq.n	8013774 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8013718:	4b6c      	ldr	r3, [pc, #432]	; (80138cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 801371a:	681b      	ldr	r3, [r3, #0]
 801371c:	08db      	lsrs	r3, r3, #3
 801371e:	f003 0303 	and.w	r3, r3, #3
 8013722:	4a6b      	ldr	r2, [pc, #428]	; (80138d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8013724:	fa22 f303 	lsr.w	r3, r2, r3
 8013728:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801372a:	687b      	ldr	r3, [r7, #4]
 801372c:	ee07 3a90 	vmov	s15, r3
 8013730:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013734:	693b      	ldr	r3, [r7, #16]
 8013736:	ee07 3a90 	vmov	s15, r3
 801373a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801373e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013742:	4b62      	ldr	r3, [pc, #392]	; (80138cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8013744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013746:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801374a:	ee07 3a90 	vmov	s15, r3
 801374e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013752:	ed97 6a02 	vldr	s12, [r7, #8]
 8013756:	eddf 5a61 	vldr	s11, [pc, #388]	; 80138dc <HAL_RCC_GetSysClockFreq+0x2e4>
 801375a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801375e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013762:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013766:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801376a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801376e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8013772:	e087      	b.n	8013884 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8013774:	693b      	ldr	r3, [r7, #16]
 8013776:	ee07 3a90 	vmov	s15, r3
 801377a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801377e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80138e0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8013782:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013786:	4b51      	ldr	r3, [pc, #324]	; (80138cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8013788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801378a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801378e:	ee07 3a90 	vmov	s15, r3
 8013792:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013796:	ed97 6a02 	vldr	s12, [r7, #8]
 801379a:	eddf 5a50 	vldr	s11, [pc, #320]	; 80138dc <HAL_RCC_GetSysClockFreq+0x2e4>
 801379e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80137a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80137a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80137aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80137ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80137b2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80137b6:	e065      	b.n	8013884 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80137b8:	693b      	ldr	r3, [r7, #16]
 80137ba:	ee07 3a90 	vmov	s15, r3
 80137be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80137c2:	eddf 6a48 	vldr	s13, [pc, #288]	; 80138e4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80137c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80137ca:	4b40      	ldr	r3, [pc, #256]	; (80138cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80137cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80137ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80137d2:	ee07 3a90 	vmov	s15, r3
 80137d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80137da:	ed97 6a02 	vldr	s12, [r7, #8]
 80137de:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80138dc <HAL_RCC_GetSysClockFreq+0x2e4>
 80137e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80137e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80137ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80137ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80137f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80137f6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80137fa:	e043      	b.n	8013884 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80137fc:	693b      	ldr	r3, [r7, #16]
 80137fe:	ee07 3a90 	vmov	s15, r3
 8013802:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013806:	eddf 6a38 	vldr	s13, [pc, #224]	; 80138e8 <HAL_RCC_GetSysClockFreq+0x2f0>
 801380a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801380e:	4b2f      	ldr	r3, [pc, #188]	; (80138cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8013810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013812:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013816:	ee07 3a90 	vmov	s15, r3
 801381a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801381e:	ed97 6a02 	vldr	s12, [r7, #8]
 8013822:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80138dc <HAL_RCC_GetSysClockFreq+0x2e4>
 8013826:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801382a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801382e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013832:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013836:	ee67 7a27 	vmul.f32	s15, s14, s15
 801383a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801383e:	e021      	b.n	8013884 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8013840:	693b      	ldr	r3, [r7, #16]
 8013842:	ee07 3a90 	vmov	s15, r3
 8013846:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801384a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80138e4 <HAL_RCC_GetSysClockFreq+0x2ec>
 801384e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013852:	4b1e      	ldr	r3, [pc, #120]	; (80138cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8013854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013856:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801385a:	ee07 3a90 	vmov	s15, r3
 801385e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013862:	ed97 6a02 	vldr	s12, [r7, #8]
 8013866:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80138dc <HAL_RCC_GetSysClockFreq+0x2e4>
 801386a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801386e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013872:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013876:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801387a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801387e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8013882:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8013884:	4b11      	ldr	r3, [pc, #68]	; (80138cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8013886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013888:	0a5b      	lsrs	r3, r3, #9
 801388a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801388e:	3301      	adds	r3, #1
 8013890:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8013892:	683b      	ldr	r3, [r7, #0]
 8013894:	ee07 3a90 	vmov	s15, r3
 8013898:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801389c:	edd7 6a07 	vldr	s13, [r7, #28]
 80138a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80138a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80138a8:	ee17 3a90 	vmov	r3, s15
 80138ac:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80138ae:	e005      	b.n	80138bc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80138b0:	2300      	movs	r3, #0
 80138b2:	61bb      	str	r3, [r7, #24]
      break;
 80138b4:	e002      	b.n	80138bc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80138b6:	4b07      	ldr	r3, [pc, #28]	; (80138d4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80138b8:	61bb      	str	r3, [r7, #24]
      break;
 80138ba:	bf00      	nop
  }

  return sysclockfreq;
 80138bc:	69bb      	ldr	r3, [r7, #24]
}
 80138be:	4618      	mov	r0, r3
 80138c0:	3724      	adds	r7, #36	; 0x24
 80138c2:	46bd      	mov	sp, r7
 80138c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138c8:	4770      	bx	lr
 80138ca:	bf00      	nop
 80138cc:	58024400 	.word	0x58024400
 80138d0:	03d09000 	.word	0x03d09000
 80138d4:	003d0900 	.word	0x003d0900
 80138d8:	016e3600 	.word	0x016e3600
 80138dc:	46000000 	.word	0x46000000
 80138e0:	4c742400 	.word	0x4c742400
 80138e4:	4a742400 	.word	0x4a742400
 80138e8:	4bb71b00 	.word	0x4bb71b00

080138ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80138ec:	b580      	push	{r7, lr}
 80138ee:	b082      	sub	sp, #8
 80138f0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80138f2:	f7ff fe81 	bl	80135f8 <HAL_RCC_GetSysClockFreq>
 80138f6:	4602      	mov	r2, r0
 80138f8:	4b10      	ldr	r3, [pc, #64]	; (801393c <HAL_RCC_GetHCLKFreq+0x50>)
 80138fa:	699b      	ldr	r3, [r3, #24]
 80138fc:	0a1b      	lsrs	r3, r3, #8
 80138fe:	f003 030f 	and.w	r3, r3, #15
 8013902:	490f      	ldr	r1, [pc, #60]	; (8013940 <HAL_RCC_GetHCLKFreq+0x54>)
 8013904:	5ccb      	ldrb	r3, [r1, r3]
 8013906:	f003 031f 	and.w	r3, r3, #31
 801390a:	fa22 f303 	lsr.w	r3, r2, r3
 801390e:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8013910:	4b0a      	ldr	r3, [pc, #40]	; (801393c <HAL_RCC_GetHCLKFreq+0x50>)
 8013912:	699b      	ldr	r3, [r3, #24]
 8013914:	f003 030f 	and.w	r3, r3, #15
 8013918:	4a09      	ldr	r2, [pc, #36]	; (8013940 <HAL_RCC_GetHCLKFreq+0x54>)
 801391a:	5cd3      	ldrb	r3, [r2, r3]
 801391c:	f003 031f 	and.w	r3, r3, #31
 8013920:	687a      	ldr	r2, [r7, #4]
 8013922:	fa22 f303 	lsr.w	r3, r2, r3
 8013926:	4a07      	ldr	r2, [pc, #28]	; (8013944 <HAL_RCC_GetHCLKFreq+0x58>)
 8013928:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 801392a:	4a07      	ldr	r2, [pc, #28]	; (8013948 <HAL_RCC_GetHCLKFreq+0x5c>)
 801392c:	687b      	ldr	r3, [r7, #4]
 801392e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8013930:	4b04      	ldr	r3, [pc, #16]	; (8013944 <HAL_RCC_GetHCLKFreq+0x58>)
 8013932:	681b      	ldr	r3, [r3, #0]
}
 8013934:	4618      	mov	r0, r3
 8013936:	3708      	adds	r7, #8
 8013938:	46bd      	mov	sp, r7
 801393a:	bd80      	pop	{r7, pc}
 801393c:	58024400 	.word	0x58024400
 8013940:	0802cc88 	.word	0x0802cc88
 8013944:	24000058 	.word	0x24000058
 8013948:	24000054 	.word	0x24000054

0801394c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801394c:	b580      	push	{r7, lr}
 801394e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8013950:	f7ff ffcc 	bl	80138ec <HAL_RCC_GetHCLKFreq>
 8013954:	4602      	mov	r2, r0
 8013956:	4b06      	ldr	r3, [pc, #24]	; (8013970 <HAL_RCC_GetPCLK1Freq+0x24>)
 8013958:	69db      	ldr	r3, [r3, #28]
 801395a:	091b      	lsrs	r3, r3, #4
 801395c:	f003 0307 	and.w	r3, r3, #7
 8013960:	4904      	ldr	r1, [pc, #16]	; (8013974 <HAL_RCC_GetPCLK1Freq+0x28>)
 8013962:	5ccb      	ldrb	r3, [r1, r3]
 8013964:	f003 031f 	and.w	r3, r3, #31
 8013968:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 801396c:	4618      	mov	r0, r3
 801396e:	bd80      	pop	{r7, pc}
 8013970:	58024400 	.word	0x58024400
 8013974:	0802cc88 	.word	0x0802cc88

08013978 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8013978:	b580      	push	{r7, lr}
 801397a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 801397c:	f7ff ffb6 	bl	80138ec <HAL_RCC_GetHCLKFreq>
 8013980:	4602      	mov	r2, r0
 8013982:	4b06      	ldr	r3, [pc, #24]	; (801399c <HAL_RCC_GetPCLK2Freq+0x24>)
 8013984:	69db      	ldr	r3, [r3, #28]
 8013986:	0a1b      	lsrs	r3, r3, #8
 8013988:	f003 0307 	and.w	r3, r3, #7
 801398c:	4904      	ldr	r1, [pc, #16]	; (80139a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 801398e:	5ccb      	ldrb	r3, [r1, r3]
 8013990:	f003 031f 	and.w	r3, r3, #31
 8013994:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8013998:	4618      	mov	r0, r3
 801399a:	bd80      	pop	{r7, pc}
 801399c:	58024400 	.word	0x58024400
 80139a0:	0802cc88 	.word	0x0802cc88

080139a4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80139a4:	b480      	push	{r7}
 80139a6:	b083      	sub	sp, #12
 80139a8:	af00      	add	r7, sp, #0
 80139aa:	6078      	str	r0, [r7, #4]
 80139ac:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80139ae:	687b      	ldr	r3, [r7, #4]
 80139b0:	223f      	movs	r2, #63	; 0x3f
 80139b2:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80139b4:	4b1a      	ldr	r3, [pc, #104]	; (8013a20 <HAL_RCC_GetClockConfig+0x7c>)
 80139b6:	691b      	ldr	r3, [r3, #16]
 80139b8:	f003 0207 	and.w	r2, r3, #7
 80139bc:	687b      	ldr	r3, [r7, #4]
 80139be:	605a      	str	r2, [r3, #4]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
#else
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE);
 80139c0:	4b17      	ldr	r3, [pc, #92]	; (8013a20 <HAL_RCC_GetClockConfig+0x7c>)
 80139c2:	699b      	ldr	r3, [r3, #24]
 80139c4:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80139c8:	687b      	ldr	r3, [r7, #4]
 80139ca:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE);
 80139cc:	4b14      	ldr	r3, [pc, #80]	; (8013a20 <HAL_RCC_GetClockConfig+0x7c>)
 80139ce:	699b      	ldr	r3, [r3, #24]
 80139d0:	f003 020f 	and.w	r2, r3, #15
 80139d4:	687b      	ldr	r3, [r7, #4]
 80139d6:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE);
 80139d8:	4b11      	ldr	r3, [pc, #68]	; (8013a20 <HAL_RCC_GetClockConfig+0x7c>)
 80139da:	699b      	ldr	r3, [r3, #24]
 80139dc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80139e0:	687b      	ldr	r3, [r7, #4]
 80139e2:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1);
 80139e4:	4b0e      	ldr	r3, [pc, #56]	; (8013a20 <HAL_RCC_GetClockConfig+0x7c>)
 80139e6:	69db      	ldr	r3, [r3, #28]
 80139e8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80139ec:	687b      	ldr	r3, [r7, #4]
 80139ee:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2);
 80139f0:	4b0b      	ldr	r3, [pc, #44]	; (8013a20 <HAL_RCC_GetClockConfig+0x7c>)
 80139f2:	69db      	ldr	r3, [r3, #28]
 80139f4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80139f8:	687b      	ldr	r3, [r7, #4]
 80139fa:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
 80139fc:	4b08      	ldr	r3, [pc, #32]	; (8013a20 <HAL_RCC_GetClockConfig+0x7c>)
 80139fe:	6a1b      	ldr	r3, [r3, #32]
 8013a00:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8013a04:	687b      	ldr	r3, [r7, #4]
 8013a06:	61da      	str	r2, [r3, #28]
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8013a08:	4b06      	ldr	r3, [pc, #24]	; (8013a24 <HAL_RCC_GetClockConfig+0x80>)
 8013a0a:	681b      	ldr	r3, [r3, #0]
 8013a0c:	f003 020f 	and.w	r2, r3, #15
 8013a10:	683b      	ldr	r3, [r7, #0]
 8013a12:	601a      	str	r2, [r3, #0]
}
 8013a14:	bf00      	nop
 8013a16:	370c      	adds	r7, #12
 8013a18:	46bd      	mov	sp, r7
 8013a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a1e:	4770      	bx	lr
 8013a20:	58024400 	.word	0x58024400
 8013a24:	52002000 	.word	0x52002000

08013a28 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8013a28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8013a2c:	b0c8      	sub	sp, #288	; 0x120
 8013a2e:	af00      	add	r7, sp, #0
 8013a30:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8013a34:	2300      	movs	r3, #0
 8013a36:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8013a3a:	2300      	movs	r3, #0
 8013a3c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8013a40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a48:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8013a4c:	2500      	movs	r5, #0
 8013a4e:	ea54 0305 	orrs.w	r3, r4, r5
 8013a52:	d049      	beq.n	8013ae8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8013a54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013a58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013a5a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8013a5e:	d02f      	beq.n	8013ac0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8013a60:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8013a64:	d828      	bhi.n	8013ab8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8013a66:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8013a6a:	d01a      	beq.n	8013aa2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8013a6c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8013a70:	d822      	bhi.n	8013ab8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8013a72:	2b00      	cmp	r3, #0
 8013a74:	d003      	beq.n	8013a7e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8013a76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8013a7a:	d007      	beq.n	8013a8c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8013a7c:	e01c      	b.n	8013ab8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8013a7e:	4ba7      	ldr	r3, [pc, #668]	; (8013d1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8013a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a82:	4aa6      	ldr	r2, [pc, #664]	; (8013d1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8013a84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8013a88:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8013a8a:	e01a      	b.n	8013ac2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8013a8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013a90:	3308      	adds	r3, #8
 8013a92:	2102      	movs	r1, #2
 8013a94:	4618      	mov	r0, r3
 8013a96:	f001 f985 	bl	8014da4 <RCCEx_PLL2_Config>
 8013a9a:	4603      	mov	r3, r0
 8013a9c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8013aa0:	e00f      	b.n	8013ac2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8013aa2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013aa6:	3328      	adds	r3, #40	; 0x28
 8013aa8:	2102      	movs	r1, #2
 8013aaa:	4618      	mov	r0, r3
 8013aac:	f001 fa2c 	bl	8014f08 <RCCEx_PLL3_Config>
 8013ab0:	4603      	mov	r3, r0
 8013ab2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8013ab6:	e004      	b.n	8013ac2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8013ab8:	2301      	movs	r3, #1
 8013aba:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8013abe:	e000      	b.n	8013ac2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8013ac0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8013ac2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8013ac6:	2b00      	cmp	r3, #0
 8013ac8:	d10a      	bne.n	8013ae0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8013aca:	4b94      	ldr	r3, [pc, #592]	; (8013d1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8013acc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013ace:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8013ad2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013ad6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013ad8:	4a90      	ldr	r2, [pc, #576]	; (8013d1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8013ada:	430b      	orrs	r3, r1
 8013adc:	6513      	str	r3, [r2, #80]	; 0x50
 8013ade:	e003      	b.n	8013ae8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013ae0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8013ae4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8013ae8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013af0:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8013af4:	f04f 0900 	mov.w	r9, #0
 8013af8:	ea58 0309 	orrs.w	r3, r8, r9
 8013afc:	d047      	beq.n	8013b8e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8013afe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013b02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013b04:	2b04      	cmp	r3, #4
 8013b06:	d82a      	bhi.n	8013b5e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8013b08:	a201      	add	r2, pc, #4	; (adr r2, 8013b10 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8013b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013b0e:	bf00      	nop
 8013b10:	08013b25 	.word	0x08013b25
 8013b14:	08013b33 	.word	0x08013b33
 8013b18:	08013b49 	.word	0x08013b49
 8013b1c:	08013b67 	.word	0x08013b67
 8013b20:	08013b67 	.word	0x08013b67
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8013b24:	4b7d      	ldr	r3, [pc, #500]	; (8013d1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8013b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b28:	4a7c      	ldr	r2, [pc, #496]	; (8013d1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8013b2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8013b2e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8013b30:	e01a      	b.n	8013b68 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8013b32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013b36:	3308      	adds	r3, #8
 8013b38:	2100      	movs	r1, #0
 8013b3a:	4618      	mov	r0, r3
 8013b3c:	f001 f932 	bl	8014da4 <RCCEx_PLL2_Config>
 8013b40:	4603      	mov	r3, r0
 8013b42:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8013b46:	e00f      	b.n	8013b68 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8013b48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013b4c:	3328      	adds	r3, #40	; 0x28
 8013b4e:	2100      	movs	r1, #0
 8013b50:	4618      	mov	r0, r3
 8013b52:	f001 f9d9 	bl	8014f08 <RCCEx_PLL3_Config>
 8013b56:	4603      	mov	r3, r0
 8013b58:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8013b5c:	e004      	b.n	8013b68 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8013b5e:	2301      	movs	r3, #1
 8013b60:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8013b64:	e000      	b.n	8013b68 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8013b66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8013b68:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8013b6c:	2b00      	cmp	r3, #0
 8013b6e:	d10a      	bne.n	8013b86 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8013b70:	4b6a      	ldr	r3, [pc, #424]	; (8013d1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8013b72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013b74:	f023 0107 	bic.w	r1, r3, #7
 8013b78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013b7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013b7e:	4a67      	ldr	r2, [pc, #412]	; (8013d1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8013b80:	430b      	orrs	r3, r1
 8013b82:	6513      	str	r3, [r2, #80]	; 0x50
 8013b84:	e003      	b.n	8013b8e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013b86:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8013b8a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8013b8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b96:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8013b9a:	f04f 0b00 	mov.w	fp, #0
 8013b9e:	ea5a 030b 	orrs.w	r3, sl, fp
 8013ba2:	d054      	beq.n	8013c4e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8013ba4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013ba8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013baa:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8013bae:	d036      	beq.n	8013c1e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8013bb0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8013bb4:	d82f      	bhi.n	8013c16 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8013bb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013bba:	d032      	beq.n	8013c22 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8013bbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013bc0:	d829      	bhi.n	8013c16 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8013bc2:	2bc0      	cmp	r3, #192	; 0xc0
 8013bc4:	d02f      	beq.n	8013c26 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8013bc6:	2bc0      	cmp	r3, #192	; 0xc0
 8013bc8:	d825      	bhi.n	8013c16 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8013bca:	2b80      	cmp	r3, #128	; 0x80
 8013bcc:	d018      	beq.n	8013c00 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8013bce:	2b80      	cmp	r3, #128	; 0x80
 8013bd0:	d821      	bhi.n	8013c16 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8013bd2:	2b00      	cmp	r3, #0
 8013bd4:	d002      	beq.n	8013bdc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8013bd6:	2b40      	cmp	r3, #64	; 0x40
 8013bd8:	d007      	beq.n	8013bea <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8013bda:	e01c      	b.n	8013c16 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8013bdc:	4b4f      	ldr	r3, [pc, #316]	; (8013d1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8013bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013be0:	4a4e      	ldr	r2, [pc, #312]	; (8013d1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8013be2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8013be6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8013be8:	e01e      	b.n	8013c28 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8013bea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013bee:	3308      	adds	r3, #8
 8013bf0:	2100      	movs	r1, #0
 8013bf2:	4618      	mov	r0, r3
 8013bf4:	f001 f8d6 	bl	8014da4 <RCCEx_PLL2_Config>
 8013bf8:	4603      	mov	r3, r0
 8013bfa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8013bfe:	e013      	b.n	8013c28 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8013c00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013c04:	3328      	adds	r3, #40	; 0x28
 8013c06:	2100      	movs	r1, #0
 8013c08:	4618      	mov	r0, r3
 8013c0a:	f001 f97d 	bl	8014f08 <RCCEx_PLL3_Config>
 8013c0e:	4603      	mov	r3, r0
 8013c10:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8013c14:	e008      	b.n	8013c28 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8013c16:	2301      	movs	r3, #1
 8013c18:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8013c1c:	e004      	b.n	8013c28 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8013c1e:	bf00      	nop
 8013c20:	e002      	b.n	8013c28 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8013c22:	bf00      	nop
 8013c24:	e000      	b.n	8013c28 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8013c26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8013c28:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8013c2c:	2b00      	cmp	r3, #0
 8013c2e:	d10a      	bne.n	8013c46 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8013c30:	4b3a      	ldr	r3, [pc, #232]	; (8013d1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8013c32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013c34:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8013c38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013c3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013c3e:	4a37      	ldr	r2, [pc, #220]	; (8013d1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8013c40:	430b      	orrs	r3, r1
 8013c42:	6513      	str	r3, [r2, #80]	; 0x50
 8013c44:	e003      	b.n	8013c4e <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013c46:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8013c4a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8013c4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c56:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8013c5a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8013c5e:	2300      	movs	r3, #0
 8013c60:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8013c64:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8013c68:	460b      	mov	r3, r1
 8013c6a:	4313      	orrs	r3, r2
 8013c6c:	d05c      	beq.n	8013d28 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8013c6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013c72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8013c74:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8013c78:	d03b      	beq.n	8013cf2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8013c7a:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8013c7e:	d834      	bhi.n	8013cea <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8013c80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013c84:	d037      	beq.n	8013cf6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8013c86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013c8a:	d82e      	bhi.n	8013cea <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8013c8c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8013c90:	d033      	beq.n	8013cfa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8013c92:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8013c96:	d828      	bhi.n	8013cea <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8013c98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013c9c:	d01a      	beq.n	8013cd4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8013c9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013ca2:	d822      	bhi.n	8013cea <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8013ca4:	2b00      	cmp	r3, #0
 8013ca6:	d003      	beq.n	8013cb0 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8013ca8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013cac:	d007      	beq.n	8013cbe <HAL_RCCEx_PeriphCLKConfig+0x296>
 8013cae:	e01c      	b.n	8013cea <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8013cb0:	4b1a      	ldr	r3, [pc, #104]	; (8013d1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8013cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013cb4:	4a19      	ldr	r2, [pc, #100]	; (8013d1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8013cb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8013cba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8013cbc:	e01e      	b.n	8013cfc <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8013cbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013cc2:	3308      	adds	r3, #8
 8013cc4:	2100      	movs	r1, #0
 8013cc6:	4618      	mov	r0, r3
 8013cc8:	f001 f86c 	bl	8014da4 <RCCEx_PLL2_Config>
 8013ccc:	4603      	mov	r3, r0
 8013cce:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8013cd2:	e013      	b.n	8013cfc <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8013cd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013cd8:	3328      	adds	r3, #40	; 0x28
 8013cda:	2100      	movs	r1, #0
 8013cdc:	4618      	mov	r0, r3
 8013cde:	f001 f913 	bl	8014f08 <RCCEx_PLL3_Config>
 8013ce2:	4603      	mov	r3, r0
 8013ce4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8013ce8:	e008      	b.n	8013cfc <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8013cea:	2301      	movs	r3, #1
 8013cec:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8013cf0:	e004      	b.n	8013cfc <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8013cf2:	bf00      	nop
 8013cf4:	e002      	b.n	8013cfc <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8013cf6:	bf00      	nop
 8013cf8:	e000      	b.n	8013cfc <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8013cfa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8013cfc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8013d00:	2b00      	cmp	r3, #0
 8013d02:	d10d      	bne.n	8013d20 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8013d04:	4b05      	ldr	r3, [pc, #20]	; (8013d1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8013d06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013d08:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8013d0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013d10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8013d12:	4a02      	ldr	r2, [pc, #8]	; (8013d1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8013d14:	430b      	orrs	r3, r1
 8013d16:	6513      	str	r3, [r2, #80]	; 0x50
 8013d18:	e006      	b.n	8013d28 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8013d1a:	bf00      	nop
 8013d1c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013d20:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8013d24:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8013d28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d30:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8013d34:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8013d38:	2300      	movs	r3, #0
 8013d3a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8013d3e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8013d42:	460b      	mov	r3, r1
 8013d44:	4313      	orrs	r3, r2
 8013d46:	d03a      	beq.n	8013dbe <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8013d48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013d4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013d4e:	2b30      	cmp	r3, #48	; 0x30
 8013d50:	d01f      	beq.n	8013d92 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8013d52:	2b30      	cmp	r3, #48	; 0x30
 8013d54:	d819      	bhi.n	8013d8a <HAL_RCCEx_PeriphCLKConfig+0x362>
 8013d56:	2b20      	cmp	r3, #32
 8013d58:	d00c      	beq.n	8013d74 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8013d5a:	2b20      	cmp	r3, #32
 8013d5c:	d815      	bhi.n	8013d8a <HAL_RCCEx_PeriphCLKConfig+0x362>
 8013d5e:	2b00      	cmp	r3, #0
 8013d60:	d019      	beq.n	8013d96 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8013d62:	2b10      	cmp	r3, #16
 8013d64:	d111      	bne.n	8013d8a <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8013d66:	4bae      	ldr	r3, [pc, #696]	; (8014020 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8013d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d6a:	4aad      	ldr	r2, [pc, #692]	; (8014020 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8013d6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8013d70:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8013d72:	e011      	b.n	8013d98 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8013d74:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013d78:	3308      	adds	r3, #8
 8013d7a:	2102      	movs	r1, #2
 8013d7c:	4618      	mov	r0, r3
 8013d7e:	f001 f811 	bl	8014da4 <RCCEx_PLL2_Config>
 8013d82:	4603      	mov	r3, r0
 8013d84:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8013d88:	e006      	b.n	8013d98 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8013d8a:	2301      	movs	r3, #1
 8013d8c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8013d90:	e002      	b.n	8013d98 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8013d92:	bf00      	nop
 8013d94:	e000      	b.n	8013d98 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8013d96:	bf00      	nop
    }

    if (ret == HAL_OK)
 8013d98:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8013d9c:	2b00      	cmp	r3, #0
 8013d9e:	d10a      	bne.n	8013db6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8013da0:	4b9f      	ldr	r3, [pc, #636]	; (8014020 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8013da2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013da4:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8013da8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013dac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013dae:	4a9c      	ldr	r2, [pc, #624]	; (8014020 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8013db0:	430b      	orrs	r3, r1
 8013db2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8013db4:	e003      	b.n	8013dbe <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013db6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8013dba:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8013dbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013dc6:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8013dca:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8013dce:	2300      	movs	r3, #0
 8013dd0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8013dd4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8013dd8:	460b      	mov	r3, r1
 8013dda:	4313      	orrs	r3, r2
 8013ddc:	d051      	beq.n	8013e82 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8013dde:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013de2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013de4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8013de8:	d035      	beq.n	8013e56 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8013dea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8013dee:	d82e      	bhi.n	8013e4e <HAL_RCCEx_PeriphCLKConfig+0x426>
 8013df0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8013df4:	d031      	beq.n	8013e5a <HAL_RCCEx_PeriphCLKConfig+0x432>
 8013df6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8013dfa:	d828      	bhi.n	8013e4e <HAL_RCCEx_PeriphCLKConfig+0x426>
 8013dfc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8013e00:	d01a      	beq.n	8013e38 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8013e02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8013e06:	d822      	bhi.n	8013e4e <HAL_RCCEx_PeriphCLKConfig+0x426>
 8013e08:	2b00      	cmp	r3, #0
 8013e0a:	d003      	beq.n	8013e14 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8013e0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013e10:	d007      	beq.n	8013e22 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8013e12:	e01c      	b.n	8013e4e <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8013e14:	4b82      	ldr	r3, [pc, #520]	; (8014020 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8013e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e18:	4a81      	ldr	r2, [pc, #516]	; (8014020 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8013e1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8013e1e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8013e20:	e01c      	b.n	8013e5c <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8013e22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013e26:	3308      	adds	r3, #8
 8013e28:	2100      	movs	r1, #0
 8013e2a:	4618      	mov	r0, r3
 8013e2c:	f000 ffba 	bl	8014da4 <RCCEx_PLL2_Config>
 8013e30:	4603      	mov	r3, r0
 8013e32:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8013e36:	e011      	b.n	8013e5c <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8013e38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013e3c:	3328      	adds	r3, #40	; 0x28
 8013e3e:	2100      	movs	r1, #0
 8013e40:	4618      	mov	r0, r3
 8013e42:	f001 f861 	bl	8014f08 <RCCEx_PLL3_Config>
 8013e46:	4603      	mov	r3, r0
 8013e48:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8013e4c:	e006      	b.n	8013e5c <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8013e4e:	2301      	movs	r3, #1
 8013e50:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8013e54:	e002      	b.n	8013e5c <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8013e56:	bf00      	nop
 8013e58:	e000      	b.n	8013e5c <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8013e5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8013e5c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8013e60:	2b00      	cmp	r3, #0
 8013e62:	d10a      	bne.n	8013e7a <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8013e64:	4b6e      	ldr	r3, [pc, #440]	; (8014020 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8013e66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013e68:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8013e6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013e70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013e72:	4a6b      	ldr	r2, [pc, #428]	; (8014020 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8013e74:	430b      	orrs	r3, r1
 8013e76:	6513      	str	r3, [r2, #80]	; 0x50
 8013e78:	e003      	b.n	8013e82 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013e7a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8013e7e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8013e82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e8a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8013e8e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8013e92:	2300      	movs	r3, #0
 8013e94:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8013e98:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8013e9c:	460b      	mov	r3, r1
 8013e9e:	4313      	orrs	r3, r2
 8013ea0:	d053      	beq.n	8013f4a <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8013ea2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013ea6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013ea8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8013eac:	d033      	beq.n	8013f16 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8013eae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8013eb2:	d82c      	bhi.n	8013f0e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8013eb4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8013eb8:	d02f      	beq.n	8013f1a <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8013eba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8013ebe:	d826      	bhi.n	8013f0e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8013ec0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8013ec4:	d02b      	beq.n	8013f1e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8013ec6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8013eca:	d820      	bhi.n	8013f0e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8013ecc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8013ed0:	d012      	beq.n	8013ef8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8013ed2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8013ed6:	d81a      	bhi.n	8013f0e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8013ed8:	2b00      	cmp	r3, #0
 8013eda:	d022      	beq.n	8013f22 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8013edc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013ee0:	d115      	bne.n	8013f0e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8013ee2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013ee6:	3308      	adds	r3, #8
 8013ee8:	2101      	movs	r1, #1
 8013eea:	4618      	mov	r0, r3
 8013eec:	f000 ff5a 	bl	8014da4 <RCCEx_PLL2_Config>
 8013ef0:	4603      	mov	r3, r0
 8013ef2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8013ef6:	e015      	b.n	8013f24 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8013ef8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013efc:	3328      	adds	r3, #40	; 0x28
 8013efe:	2101      	movs	r1, #1
 8013f00:	4618      	mov	r0, r3
 8013f02:	f001 f801 	bl	8014f08 <RCCEx_PLL3_Config>
 8013f06:	4603      	mov	r3, r0
 8013f08:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8013f0c:	e00a      	b.n	8013f24 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8013f0e:	2301      	movs	r3, #1
 8013f10:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8013f14:	e006      	b.n	8013f24 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8013f16:	bf00      	nop
 8013f18:	e004      	b.n	8013f24 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8013f1a:	bf00      	nop
 8013f1c:	e002      	b.n	8013f24 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8013f1e:	bf00      	nop
 8013f20:	e000      	b.n	8013f24 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8013f22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8013f24:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8013f28:	2b00      	cmp	r3, #0
 8013f2a:	d10a      	bne.n	8013f42 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8013f2c:	4b3c      	ldr	r3, [pc, #240]	; (8014020 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8013f2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013f30:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8013f34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013f38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013f3a:	4a39      	ldr	r2, [pc, #228]	; (8014020 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8013f3c:	430b      	orrs	r3, r1
 8013f3e:	6513      	str	r3, [r2, #80]	; 0x50
 8013f40:	e003      	b.n	8013f4a <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013f42:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8013f46:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8013f4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f52:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8013f56:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8013f5a:	2300      	movs	r3, #0
 8013f5c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8013f60:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8013f64:	460b      	mov	r3, r1
 8013f66:	4313      	orrs	r3, r2
 8013f68:	d060      	beq.n	801402c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8013f6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013f6e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8013f72:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8013f76:	d039      	beq.n	8013fec <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8013f78:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8013f7c:	d832      	bhi.n	8013fe4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8013f7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8013f82:	d035      	beq.n	8013ff0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8013f84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8013f88:	d82c      	bhi.n	8013fe4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8013f8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013f8e:	d031      	beq.n	8013ff4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8013f90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013f94:	d826      	bhi.n	8013fe4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8013f96:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8013f9a:	d02d      	beq.n	8013ff8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8013f9c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8013fa0:	d820      	bhi.n	8013fe4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8013fa2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8013fa6:	d012      	beq.n	8013fce <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8013fa8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8013fac:	d81a      	bhi.n	8013fe4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8013fae:	2b00      	cmp	r3, #0
 8013fb0:	d024      	beq.n	8013ffc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8013fb2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8013fb6:	d115      	bne.n	8013fe4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8013fb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013fbc:	3308      	adds	r3, #8
 8013fbe:	2101      	movs	r1, #1
 8013fc0:	4618      	mov	r0, r3
 8013fc2:	f000 feef 	bl	8014da4 <RCCEx_PLL2_Config>
 8013fc6:	4603      	mov	r3, r0
 8013fc8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8013fcc:	e017      	b.n	8013ffe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8013fce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013fd2:	3328      	adds	r3, #40	; 0x28
 8013fd4:	2101      	movs	r1, #1
 8013fd6:	4618      	mov	r0, r3
 8013fd8:	f000 ff96 	bl	8014f08 <RCCEx_PLL3_Config>
 8013fdc:	4603      	mov	r3, r0
 8013fde:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8013fe2:	e00c      	b.n	8013ffe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8013fe4:	2301      	movs	r3, #1
 8013fe6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8013fea:	e008      	b.n	8013ffe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8013fec:	bf00      	nop
 8013fee:	e006      	b.n	8013ffe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8013ff0:	bf00      	nop
 8013ff2:	e004      	b.n	8013ffe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8013ff4:	bf00      	nop
 8013ff6:	e002      	b.n	8013ffe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8013ff8:	bf00      	nop
 8013ffa:	e000      	b.n	8013ffe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8013ffc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8013ffe:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8014002:	2b00      	cmp	r3, #0
 8014004:	d10e      	bne.n	8014024 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8014006:	4b06      	ldr	r3, [pc, #24]	; (8014020 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8014008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801400a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 801400e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8014012:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8014016:	4a02      	ldr	r2, [pc, #8]	; (8014020 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8014018:	430b      	orrs	r3, r1
 801401a:	6593      	str	r3, [r2, #88]	; 0x58
 801401c:	e006      	b.n	801402c <HAL_RCCEx_PeriphCLKConfig+0x604>
 801401e:	bf00      	nop
 8014020:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014024:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8014028:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 801402c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8014030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014034:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8014038:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 801403c:	2300      	movs	r3, #0
 801403e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8014042:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8014046:	460b      	mov	r3, r1
 8014048:	4313      	orrs	r3, r2
 801404a:	d037      	beq.n	80140bc <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 801404c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8014050:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014052:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8014056:	d00e      	beq.n	8014076 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8014058:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801405c:	d816      	bhi.n	801408c <HAL_RCCEx_PeriphCLKConfig+0x664>
 801405e:	2b00      	cmp	r3, #0
 8014060:	d018      	beq.n	8014094 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8014062:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8014066:	d111      	bne.n	801408c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8014068:	4bc4      	ldr	r3, [pc, #784]	; (801437c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801406a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801406c:	4ac3      	ldr	r2, [pc, #780]	; (801437c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801406e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8014072:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8014074:	e00f      	b.n	8014096 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8014076:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801407a:	3308      	adds	r3, #8
 801407c:	2101      	movs	r1, #1
 801407e:	4618      	mov	r0, r3
 8014080:	f000 fe90 	bl	8014da4 <RCCEx_PLL2_Config>
 8014084:	4603      	mov	r3, r0
 8014086:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 801408a:	e004      	b.n	8014096 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801408c:	2301      	movs	r3, #1
 801408e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8014092:	e000      	b.n	8014096 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8014094:	bf00      	nop
    }

    if (ret == HAL_OK)
 8014096:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 801409a:	2b00      	cmp	r3, #0
 801409c:	d10a      	bne.n	80140b4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 801409e:	4bb7      	ldr	r3, [pc, #732]	; (801437c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80140a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80140a2:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80140a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80140aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80140ac:	4ab3      	ldr	r2, [pc, #716]	; (801437c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80140ae:	430b      	orrs	r3, r1
 80140b0:	6513      	str	r3, [r2, #80]	; 0x50
 80140b2:	e003      	b.n	80140bc <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80140b4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80140b8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80140bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80140c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140c4:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80140c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80140cc:	2300      	movs	r3, #0
 80140ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80140d2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80140d6:	460b      	mov	r3, r1
 80140d8:	4313      	orrs	r3, r2
 80140da:	d039      	beq.n	8014150 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80140dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80140e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80140e2:	2b03      	cmp	r3, #3
 80140e4:	d81c      	bhi.n	8014120 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80140e6:	a201      	add	r2, pc, #4	; (adr r2, 80140ec <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80140e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80140ec:	08014129 	.word	0x08014129
 80140f0:	080140fd 	.word	0x080140fd
 80140f4:	0801410b 	.word	0x0801410b
 80140f8:	08014129 	.word	0x08014129
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80140fc:	4b9f      	ldr	r3, [pc, #636]	; (801437c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80140fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014100:	4a9e      	ldr	r2, [pc, #632]	; (801437c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8014102:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8014106:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8014108:	e00f      	b.n	801412a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801410a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801410e:	3308      	adds	r3, #8
 8014110:	2102      	movs	r1, #2
 8014112:	4618      	mov	r0, r3
 8014114:	f000 fe46 	bl	8014da4 <RCCEx_PLL2_Config>
 8014118:	4603      	mov	r3, r0
 801411a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 801411e:	e004      	b.n	801412a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8014120:	2301      	movs	r3, #1
 8014122:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8014126:	e000      	b.n	801412a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8014128:	bf00      	nop
    }

    if (ret == HAL_OK)
 801412a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 801412e:	2b00      	cmp	r3, #0
 8014130:	d10a      	bne.n	8014148 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8014132:	4b92      	ldr	r3, [pc, #584]	; (801437c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8014134:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014136:	f023 0103 	bic.w	r1, r3, #3
 801413a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801413e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014140:	4a8e      	ldr	r2, [pc, #568]	; (801437c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8014142:	430b      	orrs	r3, r1
 8014144:	64d3      	str	r3, [r2, #76]	; 0x4c
 8014146:	e003      	b.n	8014150 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014148:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 801414c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8014150:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8014154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014158:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 801415c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8014160:	2300      	movs	r3, #0
 8014162:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8014166:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 801416a:	460b      	mov	r3, r1
 801416c:	4313      	orrs	r3, r2
 801416e:	f000 8099 	beq.w	80142a4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8014172:	4b83      	ldr	r3, [pc, #524]	; (8014380 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8014174:	681b      	ldr	r3, [r3, #0]
 8014176:	4a82      	ldr	r2, [pc, #520]	; (8014380 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8014178:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801417c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801417e:	f7f8 ff3f 	bl	800d000 <HAL_GetTick>
 8014182:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8014186:	e00b      	b.n	80141a0 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8014188:	f7f8 ff3a 	bl	800d000 <HAL_GetTick>
 801418c:	4602      	mov	r2, r0
 801418e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8014192:	1ad3      	subs	r3, r2, r3
 8014194:	2b64      	cmp	r3, #100	; 0x64
 8014196:	d903      	bls.n	80141a0 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8014198:	2303      	movs	r3, #3
 801419a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 801419e:	e005      	b.n	80141ac <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80141a0:	4b77      	ldr	r3, [pc, #476]	; (8014380 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80141a2:	681b      	ldr	r3, [r3, #0]
 80141a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80141a8:	2b00      	cmp	r3, #0
 80141aa:	d0ed      	beq.n	8014188 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80141ac:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80141b0:	2b00      	cmp	r3, #0
 80141b2:	d173      	bne.n	801429c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80141b4:	4b71      	ldr	r3, [pc, #452]	; (801437c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80141b6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80141b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80141bc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80141c0:	4053      	eors	r3, r2
 80141c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80141c6:	2b00      	cmp	r3, #0
 80141c8:	d015      	beq.n	80141f6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80141ca:	4b6c      	ldr	r3, [pc, #432]	; (801437c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80141cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80141ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80141d2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80141d6:	4b69      	ldr	r3, [pc, #420]	; (801437c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80141d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80141da:	4a68      	ldr	r2, [pc, #416]	; (801437c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80141dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80141e0:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80141e2:	4b66      	ldr	r3, [pc, #408]	; (801437c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80141e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80141e6:	4a65      	ldr	r2, [pc, #404]	; (801437c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80141e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80141ec:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80141ee:	4a63      	ldr	r2, [pc, #396]	; (801437c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80141f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80141f4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80141f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80141fa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80141fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014202:	d118      	bne.n	8014236 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014204:	f7f8 fefc 	bl	800d000 <HAL_GetTick>
 8014208:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801420c:	e00d      	b.n	801422a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801420e:	f7f8 fef7 	bl	800d000 <HAL_GetTick>
 8014212:	4602      	mov	r2, r0
 8014214:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8014218:	1ad2      	subs	r2, r2, r3
 801421a:	f241 3388 	movw	r3, #5000	; 0x1388
 801421e:	429a      	cmp	r2, r3
 8014220:	d903      	bls.n	801422a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8014222:	2303      	movs	r3, #3
 8014224:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 8014228:	e005      	b.n	8014236 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801422a:	4b54      	ldr	r3, [pc, #336]	; (801437c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801422c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801422e:	f003 0302 	and.w	r3, r3, #2
 8014232:	2b00      	cmp	r3, #0
 8014234:	d0eb      	beq.n	801420e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8014236:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 801423a:	2b00      	cmp	r3, #0
 801423c:	d129      	bne.n	8014292 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801423e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8014242:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8014246:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801424a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801424e:	d10e      	bne.n	801426e <HAL_RCCEx_PeriphCLKConfig+0x846>
 8014250:	4b4a      	ldr	r3, [pc, #296]	; (801437c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8014252:	691b      	ldr	r3, [r3, #16]
 8014254:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8014258:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801425c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8014260:	091a      	lsrs	r2, r3, #4
 8014262:	4b48      	ldr	r3, [pc, #288]	; (8014384 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8014264:	4013      	ands	r3, r2
 8014266:	4a45      	ldr	r2, [pc, #276]	; (801437c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8014268:	430b      	orrs	r3, r1
 801426a:	6113      	str	r3, [r2, #16]
 801426c:	e005      	b.n	801427a <HAL_RCCEx_PeriphCLKConfig+0x852>
 801426e:	4b43      	ldr	r3, [pc, #268]	; (801437c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8014270:	691b      	ldr	r3, [r3, #16]
 8014272:	4a42      	ldr	r2, [pc, #264]	; (801437c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8014274:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8014278:	6113      	str	r3, [r2, #16]
 801427a:	4b40      	ldr	r3, [pc, #256]	; (801437c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801427c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 801427e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8014282:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8014286:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801428a:	4a3c      	ldr	r2, [pc, #240]	; (801437c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801428c:	430b      	orrs	r3, r1
 801428e:	6713      	str	r3, [r2, #112]	; 0x70
 8014290:	e008      	b.n	80142a4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8014292:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8014296:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 801429a:	e003      	b.n	80142a4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 801429c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80142a0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80142a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80142a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142ac:	f002 0301 	and.w	r3, r2, #1
 80142b0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80142b4:	2300      	movs	r3, #0
 80142b6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80142ba:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80142be:	460b      	mov	r3, r1
 80142c0:	4313      	orrs	r3, r2
 80142c2:	f000 8090 	beq.w	80143e6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80142c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80142ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80142ce:	2b28      	cmp	r3, #40	; 0x28
 80142d0:	d870      	bhi.n	80143b4 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80142d2:	a201      	add	r2, pc, #4	; (adr r2, 80142d8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80142d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80142d8:	080143bd 	.word	0x080143bd
 80142dc:	080143b5 	.word	0x080143b5
 80142e0:	080143b5 	.word	0x080143b5
 80142e4:	080143b5 	.word	0x080143b5
 80142e8:	080143b5 	.word	0x080143b5
 80142ec:	080143b5 	.word	0x080143b5
 80142f0:	080143b5 	.word	0x080143b5
 80142f4:	080143b5 	.word	0x080143b5
 80142f8:	08014389 	.word	0x08014389
 80142fc:	080143b5 	.word	0x080143b5
 8014300:	080143b5 	.word	0x080143b5
 8014304:	080143b5 	.word	0x080143b5
 8014308:	080143b5 	.word	0x080143b5
 801430c:	080143b5 	.word	0x080143b5
 8014310:	080143b5 	.word	0x080143b5
 8014314:	080143b5 	.word	0x080143b5
 8014318:	0801439f 	.word	0x0801439f
 801431c:	080143b5 	.word	0x080143b5
 8014320:	080143b5 	.word	0x080143b5
 8014324:	080143b5 	.word	0x080143b5
 8014328:	080143b5 	.word	0x080143b5
 801432c:	080143b5 	.word	0x080143b5
 8014330:	080143b5 	.word	0x080143b5
 8014334:	080143b5 	.word	0x080143b5
 8014338:	080143bd 	.word	0x080143bd
 801433c:	080143b5 	.word	0x080143b5
 8014340:	080143b5 	.word	0x080143b5
 8014344:	080143b5 	.word	0x080143b5
 8014348:	080143b5 	.word	0x080143b5
 801434c:	080143b5 	.word	0x080143b5
 8014350:	080143b5 	.word	0x080143b5
 8014354:	080143b5 	.word	0x080143b5
 8014358:	080143bd 	.word	0x080143bd
 801435c:	080143b5 	.word	0x080143b5
 8014360:	080143b5 	.word	0x080143b5
 8014364:	080143b5 	.word	0x080143b5
 8014368:	080143b5 	.word	0x080143b5
 801436c:	080143b5 	.word	0x080143b5
 8014370:	080143b5 	.word	0x080143b5
 8014374:	080143b5 	.word	0x080143b5
 8014378:	080143bd 	.word	0x080143bd
 801437c:	58024400 	.word	0x58024400
 8014380:	58024800 	.word	0x58024800
 8014384:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8014388:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801438c:	3308      	adds	r3, #8
 801438e:	2101      	movs	r1, #1
 8014390:	4618      	mov	r0, r3
 8014392:	f000 fd07 	bl	8014da4 <RCCEx_PLL2_Config>
 8014396:	4603      	mov	r3, r0
 8014398:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 801439c:	e00f      	b.n	80143be <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801439e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80143a2:	3328      	adds	r3, #40	; 0x28
 80143a4:	2101      	movs	r1, #1
 80143a6:	4618      	mov	r0, r3
 80143a8:	f000 fdae 	bl	8014f08 <RCCEx_PLL3_Config>
 80143ac:	4603      	mov	r3, r0
 80143ae:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80143b2:	e004      	b.n	80143be <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80143b4:	2301      	movs	r3, #1
 80143b6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80143ba:	e000      	b.n	80143be <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80143bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80143be:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80143c2:	2b00      	cmp	r3, #0
 80143c4:	d10b      	bne.n	80143de <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80143c6:	4bc0      	ldr	r3, [pc, #768]	; (80146c8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80143c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80143ca:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80143ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80143d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80143d6:	4abc      	ldr	r2, [pc, #752]	; (80146c8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80143d8:	430b      	orrs	r3, r1
 80143da:	6553      	str	r3, [r2, #84]	; 0x54
 80143dc:	e003      	b.n	80143e6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80143de:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80143e2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80143e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80143ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143ee:	f002 0302 	and.w	r3, r2, #2
 80143f2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80143f6:	2300      	movs	r3, #0
 80143f8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80143fc:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8014400:	460b      	mov	r3, r1
 8014402:	4313      	orrs	r3, r2
 8014404:	d043      	beq.n	801448e <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8014406:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801440a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801440e:	2b05      	cmp	r3, #5
 8014410:	d824      	bhi.n	801445c <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8014412:	a201      	add	r2, pc, #4	; (adr r2, 8014418 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8014414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014418:	08014465 	.word	0x08014465
 801441c:	08014431 	.word	0x08014431
 8014420:	08014447 	.word	0x08014447
 8014424:	08014465 	.word	0x08014465
 8014428:	08014465 	.word	0x08014465
 801442c:	08014465 	.word	0x08014465
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8014430:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8014434:	3308      	adds	r3, #8
 8014436:	2101      	movs	r1, #1
 8014438:	4618      	mov	r0, r3
 801443a:	f000 fcb3 	bl	8014da4 <RCCEx_PLL2_Config>
 801443e:	4603      	mov	r3, r0
 8014440:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8014444:	e00f      	b.n	8014466 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8014446:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801444a:	3328      	adds	r3, #40	; 0x28
 801444c:	2101      	movs	r1, #1
 801444e:	4618      	mov	r0, r3
 8014450:	f000 fd5a 	bl	8014f08 <RCCEx_PLL3_Config>
 8014454:	4603      	mov	r3, r0
 8014456:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 801445a:	e004      	b.n	8014466 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801445c:	2301      	movs	r3, #1
 801445e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8014462:	e000      	b.n	8014466 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8014464:	bf00      	nop
    }

    if (ret == HAL_OK)
 8014466:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 801446a:	2b00      	cmp	r3, #0
 801446c:	d10b      	bne.n	8014486 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 801446e:	4b96      	ldr	r3, [pc, #600]	; (80146c8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8014470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014472:	f023 0107 	bic.w	r1, r3, #7
 8014476:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801447a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801447e:	4a92      	ldr	r2, [pc, #584]	; (80146c8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8014480:	430b      	orrs	r3, r1
 8014482:	6553      	str	r3, [r2, #84]	; 0x54
 8014484:	e003      	b.n	801448e <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014486:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 801448a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801448e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8014492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014496:	f002 0304 	and.w	r3, r2, #4
 801449a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801449e:	2300      	movs	r3, #0
 80144a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80144a4:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80144a8:	460b      	mov	r3, r1
 80144aa:	4313      	orrs	r3, r2
 80144ac:	d043      	beq.n	8014536 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80144ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80144b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80144b6:	2b05      	cmp	r3, #5
 80144b8:	d824      	bhi.n	8014504 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 80144ba:	a201      	add	r2, pc, #4	; (adr r2, 80144c0 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 80144bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80144c0:	0801450d 	.word	0x0801450d
 80144c4:	080144d9 	.word	0x080144d9
 80144c8:	080144ef 	.word	0x080144ef
 80144cc:	0801450d 	.word	0x0801450d
 80144d0:	0801450d 	.word	0x0801450d
 80144d4:	0801450d 	.word	0x0801450d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80144d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80144dc:	3308      	adds	r3, #8
 80144de:	2101      	movs	r1, #1
 80144e0:	4618      	mov	r0, r3
 80144e2:	f000 fc5f 	bl	8014da4 <RCCEx_PLL2_Config>
 80144e6:	4603      	mov	r3, r0
 80144e8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80144ec:	e00f      	b.n	801450e <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80144ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80144f2:	3328      	adds	r3, #40	; 0x28
 80144f4:	2101      	movs	r1, #1
 80144f6:	4618      	mov	r0, r3
 80144f8:	f000 fd06 	bl	8014f08 <RCCEx_PLL3_Config>
 80144fc:	4603      	mov	r3, r0
 80144fe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8014502:	e004      	b.n	801450e <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8014504:	2301      	movs	r3, #1
 8014506:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 801450a:	e000      	b.n	801450e <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 801450c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801450e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8014512:	2b00      	cmp	r3, #0
 8014514:	d10b      	bne.n	801452e <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8014516:	4b6c      	ldr	r3, [pc, #432]	; (80146c8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8014518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801451a:	f023 0107 	bic.w	r1, r3, #7
 801451e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8014522:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8014526:	4a68      	ldr	r2, [pc, #416]	; (80146c8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8014528:	430b      	orrs	r3, r1
 801452a:	6593      	str	r3, [r2, #88]	; 0x58
 801452c:	e003      	b.n	8014536 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801452e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8014532:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8014536:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801453a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801453e:	f002 0320 	and.w	r3, r2, #32
 8014542:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8014546:	2300      	movs	r3, #0
 8014548:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801454c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8014550:	460b      	mov	r3, r1
 8014552:	4313      	orrs	r3, r2
 8014554:	d055      	beq.n	8014602 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8014556:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801455a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801455e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8014562:	d033      	beq.n	80145cc <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8014564:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8014568:	d82c      	bhi.n	80145c4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 801456a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801456e:	d02f      	beq.n	80145d0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8014570:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014574:	d826      	bhi.n	80145c4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8014576:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 801457a:	d02b      	beq.n	80145d4 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 801457c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8014580:	d820      	bhi.n	80145c4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8014582:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8014586:	d012      	beq.n	80145ae <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8014588:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801458c:	d81a      	bhi.n	80145c4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 801458e:	2b00      	cmp	r3, #0
 8014590:	d022      	beq.n	80145d8 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8014592:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8014596:	d115      	bne.n	80145c4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8014598:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801459c:	3308      	adds	r3, #8
 801459e:	2100      	movs	r1, #0
 80145a0:	4618      	mov	r0, r3
 80145a2:	f000 fbff 	bl	8014da4 <RCCEx_PLL2_Config>
 80145a6:	4603      	mov	r3, r0
 80145a8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80145ac:	e015      	b.n	80145da <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80145ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80145b2:	3328      	adds	r3, #40	; 0x28
 80145b4:	2102      	movs	r1, #2
 80145b6:	4618      	mov	r0, r3
 80145b8:	f000 fca6 	bl	8014f08 <RCCEx_PLL3_Config>
 80145bc:	4603      	mov	r3, r0
 80145be:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80145c2:	e00a      	b.n	80145da <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80145c4:	2301      	movs	r3, #1
 80145c6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80145ca:	e006      	b.n	80145da <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80145cc:	bf00      	nop
 80145ce:	e004      	b.n	80145da <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80145d0:	bf00      	nop
 80145d2:	e002      	b.n	80145da <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80145d4:	bf00      	nop
 80145d6:	e000      	b.n	80145da <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80145d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80145da:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80145de:	2b00      	cmp	r3, #0
 80145e0:	d10b      	bne.n	80145fa <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80145e2:	4b39      	ldr	r3, [pc, #228]	; (80146c8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80145e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80145e6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80145ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80145ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80145f2:	4a35      	ldr	r2, [pc, #212]	; (80146c8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80145f4:	430b      	orrs	r3, r1
 80145f6:	6553      	str	r3, [r2, #84]	; 0x54
 80145f8:	e003      	b.n	8014602 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80145fa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80145fe:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8014602:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8014606:	e9d3 2300 	ldrd	r2, r3, [r3]
 801460a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 801460e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8014612:	2300      	movs	r3, #0
 8014614:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8014618:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 801461c:	460b      	mov	r3, r1
 801461e:	4313      	orrs	r3, r2
 8014620:	d058      	beq.n	80146d4 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8014622:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8014626:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801462a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 801462e:	d033      	beq.n	8014698 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8014630:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8014634:	d82c      	bhi.n	8014690 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8014636:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801463a:	d02f      	beq.n	801469c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 801463c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014640:	d826      	bhi.n	8014690 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8014642:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8014646:	d02b      	beq.n	80146a0 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8014648:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801464c:	d820      	bhi.n	8014690 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 801464e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8014652:	d012      	beq.n	801467a <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8014654:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8014658:	d81a      	bhi.n	8014690 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 801465a:	2b00      	cmp	r3, #0
 801465c:	d022      	beq.n	80146a4 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 801465e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014662:	d115      	bne.n	8014690 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8014664:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8014668:	3308      	adds	r3, #8
 801466a:	2100      	movs	r1, #0
 801466c:	4618      	mov	r0, r3
 801466e:	f000 fb99 	bl	8014da4 <RCCEx_PLL2_Config>
 8014672:	4603      	mov	r3, r0
 8014674:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8014678:	e015      	b.n	80146a6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801467a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801467e:	3328      	adds	r3, #40	; 0x28
 8014680:	2102      	movs	r1, #2
 8014682:	4618      	mov	r0, r3
 8014684:	f000 fc40 	bl	8014f08 <RCCEx_PLL3_Config>
 8014688:	4603      	mov	r3, r0
 801468a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 801468e:	e00a      	b.n	80146a6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8014690:	2301      	movs	r3, #1
 8014692:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8014696:	e006      	b.n	80146a6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8014698:	bf00      	nop
 801469a:	e004      	b.n	80146a6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 801469c:	bf00      	nop
 801469e:	e002      	b.n	80146a6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80146a0:	bf00      	nop
 80146a2:	e000      	b.n	80146a6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80146a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80146a6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80146aa:	2b00      	cmp	r3, #0
 80146ac:	d10e      	bne.n	80146cc <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80146ae:	4b06      	ldr	r3, [pc, #24]	; (80146c8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80146b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80146b2:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80146b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80146ba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80146be:	4a02      	ldr	r2, [pc, #8]	; (80146c8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80146c0:	430b      	orrs	r3, r1
 80146c2:	6593      	str	r3, [r2, #88]	; 0x58
 80146c4:	e006      	b.n	80146d4 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 80146c6:	bf00      	nop
 80146c8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80146cc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80146d0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80146d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80146d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146dc:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80146e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80146e4:	2300      	movs	r3, #0
 80146e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80146ea:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80146ee:	460b      	mov	r3, r1
 80146f0:	4313      	orrs	r3, r2
 80146f2:	d055      	beq.n	80147a0 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80146f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80146f8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80146fc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8014700:	d033      	beq.n	801476a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8014702:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8014706:	d82c      	bhi.n	8014762 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8014708:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801470c:	d02f      	beq.n	801476e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 801470e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014712:	d826      	bhi.n	8014762 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8014714:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8014718:	d02b      	beq.n	8014772 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 801471a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 801471e:	d820      	bhi.n	8014762 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8014720:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8014724:	d012      	beq.n	801474c <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8014726:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801472a:	d81a      	bhi.n	8014762 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 801472c:	2b00      	cmp	r3, #0
 801472e:	d022      	beq.n	8014776 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8014730:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8014734:	d115      	bne.n	8014762 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8014736:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801473a:	3308      	adds	r3, #8
 801473c:	2100      	movs	r1, #0
 801473e:	4618      	mov	r0, r3
 8014740:	f000 fb30 	bl	8014da4 <RCCEx_PLL2_Config>
 8014744:	4603      	mov	r3, r0
 8014746:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 801474a:	e015      	b.n	8014778 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801474c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8014750:	3328      	adds	r3, #40	; 0x28
 8014752:	2102      	movs	r1, #2
 8014754:	4618      	mov	r0, r3
 8014756:	f000 fbd7 	bl	8014f08 <RCCEx_PLL3_Config>
 801475a:	4603      	mov	r3, r0
 801475c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8014760:	e00a      	b.n	8014778 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8014762:	2301      	movs	r3, #1
 8014764:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8014768:	e006      	b.n	8014778 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 801476a:	bf00      	nop
 801476c:	e004      	b.n	8014778 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 801476e:	bf00      	nop
 8014770:	e002      	b.n	8014778 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8014772:	bf00      	nop
 8014774:	e000      	b.n	8014778 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8014776:	bf00      	nop
    }

    if (ret == HAL_OK)
 8014778:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 801477c:	2b00      	cmp	r3, #0
 801477e:	d10b      	bne.n	8014798 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8014780:	4ba1      	ldr	r3, [pc, #644]	; (8014a08 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8014782:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014784:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8014788:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801478c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8014790:	4a9d      	ldr	r2, [pc, #628]	; (8014a08 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8014792:	430b      	orrs	r3, r1
 8014794:	6593      	str	r3, [r2, #88]	; 0x58
 8014796:	e003      	b.n	80147a0 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014798:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 801479c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80147a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80147a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80147a8:	f002 0308 	and.w	r3, r2, #8
 80147ac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80147b0:	2300      	movs	r3, #0
 80147b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80147b6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80147ba:	460b      	mov	r3, r1
 80147bc:	4313      	orrs	r3, r2
 80147be:	d01e      	beq.n	80147fe <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80147c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80147c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80147c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80147cc:	d10c      	bne.n	80147e8 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80147ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80147d2:	3328      	adds	r3, #40	; 0x28
 80147d4:	2102      	movs	r1, #2
 80147d6:	4618      	mov	r0, r3
 80147d8:	f000 fb96 	bl	8014f08 <RCCEx_PLL3_Config>
 80147dc:	4603      	mov	r3, r0
 80147de:	2b00      	cmp	r3, #0
 80147e0:	d002      	beq.n	80147e8 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 80147e2:	2301      	movs	r3, #1
 80147e4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80147e8:	4b87      	ldr	r3, [pc, #540]	; (8014a08 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80147ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80147ec:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80147f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80147f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80147f8:	4a83      	ldr	r2, [pc, #524]	; (8014a08 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80147fa:	430b      	orrs	r3, r1
 80147fc:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80147fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8014802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014806:	f002 0310 	and.w	r3, r2, #16
 801480a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801480e:	2300      	movs	r3, #0
 8014810:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8014814:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8014818:	460b      	mov	r3, r1
 801481a:	4313      	orrs	r3, r2
 801481c:	d01e      	beq.n	801485c <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 801481e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8014822:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8014826:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801482a:	d10c      	bne.n	8014846 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 801482c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8014830:	3328      	adds	r3, #40	; 0x28
 8014832:	2102      	movs	r1, #2
 8014834:	4618      	mov	r0, r3
 8014836:	f000 fb67 	bl	8014f08 <RCCEx_PLL3_Config>
 801483a:	4603      	mov	r3, r0
 801483c:	2b00      	cmp	r3, #0
 801483e:	d002      	beq.n	8014846 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8014840:	2301      	movs	r3, #1
 8014842:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8014846:	4b70      	ldr	r3, [pc, #448]	; (8014a08 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8014848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801484a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 801484e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8014852:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8014856:	4a6c      	ldr	r2, [pc, #432]	; (8014a08 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8014858:	430b      	orrs	r3, r1
 801485a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 801485c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8014860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014864:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8014868:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801486c:	2300      	movs	r3, #0
 801486e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8014872:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8014876:	460b      	mov	r3, r1
 8014878:	4313      	orrs	r3, r2
 801487a:	d03e      	beq.n	80148fa <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 801487c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8014880:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8014884:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8014888:	d022      	beq.n	80148d0 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 801488a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801488e:	d81b      	bhi.n	80148c8 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8014890:	2b00      	cmp	r3, #0
 8014892:	d003      	beq.n	801489c <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8014894:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014898:	d00b      	beq.n	80148b2 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 801489a:	e015      	b.n	80148c8 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801489c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80148a0:	3308      	adds	r3, #8
 80148a2:	2100      	movs	r1, #0
 80148a4:	4618      	mov	r0, r3
 80148a6:	f000 fa7d 	bl	8014da4 <RCCEx_PLL2_Config>
 80148aa:	4603      	mov	r3, r0
 80148ac:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80148b0:	e00f      	b.n	80148d2 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80148b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80148b6:	3328      	adds	r3, #40	; 0x28
 80148b8:	2102      	movs	r1, #2
 80148ba:	4618      	mov	r0, r3
 80148bc:	f000 fb24 	bl	8014f08 <RCCEx_PLL3_Config>
 80148c0:	4603      	mov	r3, r0
 80148c2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80148c6:	e004      	b.n	80148d2 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80148c8:	2301      	movs	r3, #1
 80148ca:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80148ce:	e000      	b.n	80148d2 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 80148d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80148d2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80148d6:	2b00      	cmp	r3, #0
 80148d8:	d10b      	bne.n	80148f2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80148da:	4b4b      	ldr	r3, [pc, #300]	; (8014a08 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80148dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80148de:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80148e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80148e6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80148ea:	4a47      	ldr	r2, [pc, #284]	; (8014a08 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80148ec:	430b      	orrs	r3, r1
 80148ee:	6593      	str	r3, [r2, #88]	; 0x58
 80148f0:	e003      	b.n	80148fa <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80148f2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80148f6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80148fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80148fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014902:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8014906:	67bb      	str	r3, [r7, #120]	; 0x78
 8014908:	2300      	movs	r3, #0
 801490a:	67fb      	str	r3, [r7, #124]	; 0x7c
 801490c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8014910:	460b      	mov	r3, r1
 8014912:	4313      	orrs	r3, r2
 8014914:	d03b      	beq.n	801498e <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8014916:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801491a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801491e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8014922:	d01f      	beq.n	8014964 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8014924:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8014928:	d818      	bhi.n	801495c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 801492a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801492e:	d003      	beq.n	8014938 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8014930:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8014934:	d007      	beq.n	8014946 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8014936:	e011      	b.n	801495c <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8014938:	4b33      	ldr	r3, [pc, #204]	; (8014a08 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 801493a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801493c:	4a32      	ldr	r2, [pc, #200]	; (8014a08 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 801493e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8014942:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8014944:	e00f      	b.n	8014966 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8014946:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801494a:	3328      	adds	r3, #40	; 0x28
 801494c:	2101      	movs	r1, #1
 801494e:	4618      	mov	r0, r3
 8014950:	f000 fada 	bl	8014f08 <RCCEx_PLL3_Config>
 8014954:	4603      	mov	r3, r0
 8014956:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 801495a:	e004      	b.n	8014966 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801495c:	2301      	movs	r3, #1
 801495e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8014962:	e000      	b.n	8014966 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8014964:	bf00      	nop
    }

    if (ret == HAL_OK)
 8014966:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 801496a:	2b00      	cmp	r3, #0
 801496c:	d10b      	bne.n	8014986 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801496e:	4b26      	ldr	r3, [pc, #152]	; (8014a08 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8014970:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014972:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8014976:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801497a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801497e:	4a22      	ldr	r2, [pc, #136]	; (8014a08 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8014980:	430b      	orrs	r3, r1
 8014982:	6553      	str	r3, [r2, #84]	; 0x54
 8014984:	e003      	b.n	801498e <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014986:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 801498a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 801498e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8014992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014996:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 801499a:	673b      	str	r3, [r7, #112]	; 0x70
 801499c:	2300      	movs	r3, #0
 801499e:	677b      	str	r3, [r7, #116]	; 0x74
 80149a0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80149a4:	460b      	mov	r3, r1
 80149a6:	4313      	orrs	r3, r2
 80149a8:	d034      	beq.n	8014a14 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80149aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80149ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80149b0:	2b00      	cmp	r3, #0
 80149b2:	d003      	beq.n	80149bc <HAL_RCCEx_PeriphCLKConfig+0xf94>
 80149b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80149b8:	d007      	beq.n	80149ca <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 80149ba:	e011      	b.n	80149e0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80149bc:	4b12      	ldr	r3, [pc, #72]	; (8014a08 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80149be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80149c0:	4a11      	ldr	r2, [pc, #68]	; (8014a08 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80149c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80149c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80149c8:	e00e      	b.n	80149e8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80149ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80149ce:	3308      	adds	r3, #8
 80149d0:	2102      	movs	r1, #2
 80149d2:	4618      	mov	r0, r3
 80149d4:	f000 f9e6 	bl	8014da4 <RCCEx_PLL2_Config>
 80149d8:	4603      	mov	r3, r0
 80149da:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80149de:	e003      	b.n	80149e8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 80149e0:	2301      	movs	r3, #1
 80149e2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80149e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80149e8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80149ec:	2b00      	cmp	r3, #0
 80149ee:	d10d      	bne.n	8014a0c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80149f0:	4b05      	ldr	r3, [pc, #20]	; (8014a08 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80149f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80149f4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80149f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80149fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80149fe:	4a02      	ldr	r2, [pc, #8]	; (8014a08 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8014a00:	430b      	orrs	r3, r1
 8014a02:	64d3      	str	r3, [r2, #76]	; 0x4c
 8014a04:	e006      	b.n	8014a14 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8014a06:	bf00      	nop
 8014a08:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014a0c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8014a10:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8014a14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8014a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a1c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8014a20:	66bb      	str	r3, [r7, #104]	; 0x68
 8014a22:	2300      	movs	r3, #0
 8014a24:	66fb      	str	r3, [r7, #108]	; 0x6c
 8014a26:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8014a2a:	460b      	mov	r3, r1
 8014a2c:	4313      	orrs	r3, r2
 8014a2e:	d00c      	beq.n	8014a4a <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8014a30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8014a34:	3328      	adds	r3, #40	; 0x28
 8014a36:	2102      	movs	r1, #2
 8014a38:	4618      	mov	r0, r3
 8014a3a:	f000 fa65 	bl	8014f08 <RCCEx_PLL3_Config>
 8014a3e:	4603      	mov	r3, r0
 8014a40:	2b00      	cmp	r3, #0
 8014a42:	d002      	beq.n	8014a4a <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8014a44:	2301      	movs	r3, #1
 8014a46:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8014a4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8014a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a52:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8014a56:	663b      	str	r3, [r7, #96]	; 0x60
 8014a58:	2300      	movs	r3, #0
 8014a5a:	667b      	str	r3, [r7, #100]	; 0x64
 8014a5c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8014a60:	460b      	mov	r3, r1
 8014a62:	4313      	orrs	r3, r2
 8014a64:	d038      	beq.n	8014ad8 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8014a66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8014a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014a6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8014a72:	d018      	beq.n	8014aa6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8014a74:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8014a78:	d811      	bhi.n	8014a9e <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8014a7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014a7e:	d014      	beq.n	8014aaa <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8014a80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014a84:	d80b      	bhi.n	8014a9e <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8014a86:	2b00      	cmp	r3, #0
 8014a88:	d011      	beq.n	8014aae <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8014a8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014a8e:	d106      	bne.n	8014a9e <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8014a90:	4bc3      	ldr	r3, [pc, #780]	; (8014da0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8014a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014a94:	4ac2      	ldr	r2, [pc, #776]	; (8014da0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8014a96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8014a9a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8014a9c:	e008      	b.n	8014ab0 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8014a9e:	2301      	movs	r3, #1
 8014aa0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8014aa4:	e004      	b.n	8014ab0 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8014aa6:	bf00      	nop
 8014aa8:	e002      	b.n	8014ab0 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8014aaa:	bf00      	nop
 8014aac:	e000      	b.n	8014ab0 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8014aae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8014ab0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8014ab4:	2b00      	cmp	r3, #0
 8014ab6:	d10b      	bne.n	8014ad0 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8014ab8:	4bb9      	ldr	r3, [pc, #740]	; (8014da0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8014aba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014abc:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8014ac0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8014ac4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014ac8:	4ab5      	ldr	r2, [pc, #724]	; (8014da0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8014aca:	430b      	orrs	r3, r1
 8014acc:	6553      	str	r3, [r2, #84]	; 0x54
 8014ace:	e003      	b.n	8014ad8 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014ad0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8014ad4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8014ad8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8014adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ae0:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8014ae4:	65bb      	str	r3, [r7, #88]	; 0x58
 8014ae6:	2300      	movs	r3, #0
 8014ae8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8014aea:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8014aee:	460b      	mov	r3, r1
 8014af0:	4313      	orrs	r3, r2
 8014af2:	d009      	beq.n	8014b08 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8014af4:	4baa      	ldr	r3, [pc, #680]	; (8014da0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8014af6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014af8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8014afc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8014b00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014b02:	4aa7      	ldr	r2, [pc, #668]	; (8014da0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8014b04:	430b      	orrs	r3, r1
 8014b06:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8014b08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8014b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b10:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8014b14:	653b      	str	r3, [r7, #80]	; 0x50
 8014b16:	2300      	movs	r3, #0
 8014b18:	657b      	str	r3, [r7, #84]	; 0x54
 8014b1a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8014b1e:	460b      	mov	r3, r1
 8014b20:	4313      	orrs	r3, r2
 8014b22:	d009      	beq.n	8014b38 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8014b24:	4b9e      	ldr	r3, [pc, #632]	; (8014da0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8014b26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014b28:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8014b2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8014b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014b32:	4a9b      	ldr	r2, [pc, #620]	; (8014da0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8014b34:	430b      	orrs	r3, r1
 8014b36:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8014b38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8014b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b40:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8014b44:	64bb      	str	r3, [r7, #72]	; 0x48
 8014b46:	2300      	movs	r3, #0
 8014b48:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014b4a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8014b4e:	460b      	mov	r3, r1
 8014b50:	4313      	orrs	r3, r2
 8014b52:	d009      	beq.n	8014b68 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8014b54:	4b92      	ldr	r3, [pc, #584]	; (8014da0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8014b56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014b58:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 8014b5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8014b60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014b62:	4a8f      	ldr	r2, [pc, #572]	; (8014da0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8014b64:	430b      	orrs	r3, r1
 8014b66:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8014b68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8014b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b70:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8014b74:	643b      	str	r3, [r7, #64]	; 0x40
 8014b76:	2300      	movs	r3, #0
 8014b78:	647b      	str	r3, [r7, #68]	; 0x44
 8014b7a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8014b7e:	460b      	mov	r3, r1
 8014b80:	4313      	orrs	r3, r2
 8014b82:	d00e      	beq.n	8014ba2 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8014b84:	4b86      	ldr	r3, [pc, #536]	; (8014da0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8014b86:	691b      	ldr	r3, [r3, #16]
 8014b88:	4a85      	ldr	r2, [pc, #532]	; (8014da0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8014b8a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8014b8e:	6113      	str	r3, [r2, #16]
 8014b90:	4b83      	ldr	r3, [pc, #524]	; (8014da0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8014b92:	6919      	ldr	r1, [r3, #16]
 8014b94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8014b98:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8014b9c:	4a80      	ldr	r2, [pc, #512]	; (8014da0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8014b9e:	430b      	orrs	r3, r1
 8014ba0:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8014ba2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8014ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014baa:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8014bae:	63bb      	str	r3, [r7, #56]	; 0x38
 8014bb0:	2300      	movs	r3, #0
 8014bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8014bb4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8014bb8:	460b      	mov	r3, r1
 8014bba:	4313      	orrs	r3, r2
 8014bbc:	d009      	beq.n	8014bd2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8014bbe:	4b78      	ldr	r3, [pc, #480]	; (8014da0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8014bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014bc2:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8014bc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8014bca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014bcc:	4a74      	ldr	r2, [pc, #464]	; (8014da0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8014bce:	430b      	orrs	r3, r1
 8014bd0:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8014bd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8014bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014bda:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8014bde:	633b      	str	r3, [r7, #48]	; 0x30
 8014be0:	2300      	movs	r3, #0
 8014be2:	637b      	str	r3, [r7, #52]	; 0x34
 8014be4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8014be8:	460b      	mov	r3, r1
 8014bea:	4313      	orrs	r3, r2
 8014bec:	d00a      	beq.n	8014c04 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8014bee:	4b6c      	ldr	r3, [pc, #432]	; (8014da0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8014bf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014bf2:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8014bf6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8014bfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8014bfe:	4a68      	ldr	r2, [pc, #416]	; (8014da0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8014c00:	430b      	orrs	r3, r1
 8014c02:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8014c04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8014c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c0c:	2100      	movs	r1, #0
 8014c0e:	62b9      	str	r1, [r7, #40]	; 0x28
 8014c10:	f003 0301 	and.w	r3, r3, #1
 8014c14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014c16:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8014c1a:	460b      	mov	r3, r1
 8014c1c:	4313      	orrs	r3, r2
 8014c1e:	d011      	beq.n	8014c44 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8014c20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8014c24:	3308      	adds	r3, #8
 8014c26:	2100      	movs	r1, #0
 8014c28:	4618      	mov	r0, r3
 8014c2a:	f000 f8bb 	bl	8014da4 <RCCEx_PLL2_Config>
 8014c2e:	4603      	mov	r3, r0
 8014c30:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8014c34:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8014c38:	2b00      	cmp	r3, #0
 8014c3a:	d003      	beq.n	8014c44 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014c3c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8014c40:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8014c44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8014c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c4c:	2100      	movs	r1, #0
 8014c4e:	6239      	str	r1, [r7, #32]
 8014c50:	f003 0302 	and.w	r3, r3, #2
 8014c54:	627b      	str	r3, [r7, #36]	; 0x24
 8014c56:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8014c5a:	460b      	mov	r3, r1
 8014c5c:	4313      	orrs	r3, r2
 8014c5e:	d011      	beq.n	8014c84 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8014c60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8014c64:	3308      	adds	r3, #8
 8014c66:	2101      	movs	r1, #1
 8014c68:	4618      	mov	r0, r3
 8014c6a:	f000 f89b 	bl	8014da4 <RCCEx_PLL2_Config>
 8014c6e:	4603      	mov	r3, r0
 8014c70:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8014c74:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8014c78:	2b00      	cmp	r3, #0
 8014c7a:	d003      	beq.n	8014c84 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014c7c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8014c80:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8014c84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8014c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c8c:	2100      	movs	r1, #0
 8014c8e:	61b9      	str	r1, [r7, #24]
 8014c90:	f003 0304 	and.w	r3, r3, #4
 8014c94:	61fb      	str	r3, [r7, #28]
 8014c96:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8014c9a:	460b      	mov	r3, r1
 8014c9c:	4313      	orrs	r3, r2
 8014c9e:	d011      	beq.n	8014cc4 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8014ca0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8014ca4:	3308      	adds	r3, #8
 8014ca6:	2102      	movs	r1, #2
 8014ca8:	4618      	mov	r0, r3
 8014caa:	f000 f87b 	bl	8014da4 <RCCEx_PLL2_Config>
 8014cae:	4603      	mov	r3, r0
 8014cb0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8014cb4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8014cb8:	2b00      	cmp	r3, #0
 8014cba:	d003      	beq.n	8014cc4 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014cbc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8014cc0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8014cc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8014cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ccc:	2100      	movs	r1, #0
 8014cce:	6139      	str	r1, [r7, #16]
 8014cd0:	f003 0308 	and.w	r3, r3, #8
 8014cd4:	617b      	str	r3, [r7, #20]
 8014cd6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8014cda:	460b      	mov	r3, r1
 8014cdc:	4313      	orrs	r3, r2
 8014cde:	d011      	beq.n	8014d04 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8014ce0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8014ce4:	3328      	adds	r3, #40	; 0x28
 8014ce6:	2100      	movs	r1, #0
 8014ce8:	4618      	mov	r0, r3
 8014cea:	f000 f90d 	bl	8014f08 <RCCEx_PLL3_Config>
 8014cee:	4603      	mov	r3, r0
 8014cf0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 8014cf4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8014cf8:	2b00      	cmp	r3, #0
 8014cfa:	d003      	beq.n	8014d04 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014cfc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8014d00:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8014d04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8014d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d0c:	2100      	movs	r1, #0
 8014d0e:	60b9      	str	r1, [r7, #8]
 8014d10:	f003 0310 	and.w	r3, r3, #16
 8014d14:	60fb      	str	r3, [r7, #12]
 8014d16:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8014d1a:	460b      	mov	r3, r1
 8014d1c:	4313      	orrs	r3, r2
 8014d1e:	d011      	beq.n	8014d44 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8014d20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8014d24:	3328      	adds	r3, #40	; 0x28
 8014d26:	2101      	movs	r1, #1
 8014d28:	4618      	mov	r0, r3
 8014d2a:	f000 f8ed 	bl	8014f08 <RCCEx_PLL3_Config>
 8014d2e:	4603      	mov	r3, r0
 8014d30:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8014d34:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8014d38:	2b00      	cmp	r3, #0
 8014d3a:	d003      	beq.n	8014d44 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014d3c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8014d40:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8014d44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8014d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d4c:	2100      	movs	r1, #0
 8014d4e:	6039      	str	r1, [r7, #0]
 8014d50:	f003 0320 	and.w	r3, r3, #32
 8014d54:	607b      	str	r3, [r7, #4]
 8014d56:	e9d7 1200 	ldrd	r1, r2, [r7]
 8014d5a:	460b      	mov	r3, r1
 8014d5c:	4313      	orrs	r3, r2
 8014d5e:	d011      	beq.n	8014d84 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8014d60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8014d64:	3328      	adds	r3, #40	; 0x28
 8014d66:	2102      	movs	r1, #2
 8014d68:	4618      	mov	r0, r3
 8014d6a:	f000 f8cd 	bl	8014f08 <RCCEx_PLL3_Config>
 8014d6e:	4603      	mov	r3, r0
 8014d70:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8014d74:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8014d78:	2b00      	cmp	r3, #0
 8014d7a:	d003      	beq.n	8014d84 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014d7c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8014d80:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 8014d84:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8014d88:	2b00      	cmp	r3, #0
 8014d8a:	d101      	bne.n	8014d90 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8014d8c:	2300      	movs	r3, #0
 8014d8e:	e000      	b.n	8014d92 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8014d90:	2301      	movs	r3, #1
}
 8014d92:	4618      	mov	r0, r3
 8014d94:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8014d98:	46bd      	mov	sp, r7
 8014d9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8014d9e:	bf00      	nop
 8014da0:	58024400 	.word	0x58024400

08014da4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8014da4:	b580      	push	{r7, lr}
 8014da6:	b084      	sub	sp, #16
 8014da8:	af00      	add	r7, sp, #0
 8014daa:	6078      	str	r0, [r7, #4]
 8014dac:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8014dae:	2300      	movs	r3, #0
 8014db0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8014db2:	4b53      	ldr	r3, [pc, #332]	; (8014f00 <RCCEx_PLL2_Config+0x15c>)
 8014db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014db6:	f003 0303 	and.w	r3, r3, #3
 8014dba:	2b03      	cmp	r3, #3
 8014dbc:	d101      	bne.n	8014dc2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8014dbe:	2301      	movs	r3, #1
 8014dc0:	e099      	b.n	8014ef6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8014dc2:	4b4f      	ldr	r3, [pc, #316]	; (8014f00 <RCCEx_PLL2_Config+0x15c>)
 8014dc4:	681b      	ldr	r3, [r3, #0]
 8014dc6:	4a4e      	ldr	r2, [pc, #312]	; (8014f00 <RCCEx_PLL2_Config+0x15c>)
 8014dc8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8014dcc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8014dce:	f7f8 f917 	bl	800d000 <HAL_GetTick>
 8014dd2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8014dd4:	e008      	b.n	8014de8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8014dd6:	f7f8 f913 	bl	800d000 <HAL_GetTick>
 8014dda:	4602      	mov	r2, r0
 8014ddc:	68bb      	ldr	r3, [r7, #8]
 8014dde:	1ad3      	subs	r3, r2, r3
 8014de0:	2b02      	cmp	r3, #2
 8014de2:	d901      	bls.n	8014de8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8014de4:	2303      	movs	r3, #3
 8014de6:	e086      	b.n	8014ef6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8014de8:	4b45      	ldr	r3, [pc, #276]	; (8014f00 <RCCEx_PLL2_Config+0x15c>)
 8014dea:	681b      	ldr	r3, [r3, #0]
 8014dec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8014df0:	2b00      	cmp	r3, #0
 8014df2:	d1f0      	bne.n	8014dd6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8014df4:	4b42      	ldr	r3, [pc, #264]	; (8014f00 <RCCEx_PLL2_Config+0x15c>)
 8014df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014df8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8014dfc:	687b      	ldr	r3, [r7, #4]
 8014dfe:	681b      	ldr	r3, [r3, #0]
 8014e00:	031b      	lsls	r3, r3, #12
 8014e02:	493f      	ldr	r1, [pc, #252]	; (8014f00 <RCCEx_PLL2_Config+0x15c>)
 8014e04:	4313      	orrs	r3, r2
 8014e06:	628b      	str	r3, [r1, #40]	; 0x28
 8014e08:	687b      	ldr	r3, [r7, #4]
 8014e0a:	685b      	ldr	r3, [r3, #4]
 8014e0c:	3b01      	subs	r3, #1
 8014e0e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8014e12:	687b      	ldr	r3, [r7, #4]
 8014e14:	689b      	ldr	r3, [r3, #8]
 8014e16:	3b01      	subs	r3, #1
 8014e18:	025b      	lsls	r3, r3, #9
 8014e1a:	b29b      	uxth	r3, r3
 8014e1c:	431a      	orrs	r2, r3
 8014e1e:	687b      	ldr	r3, [r7, #4]
 8014e20:	68db      	ldr	r3, [r3, #12]
 8014e22:	3b01      	subs	r3, #1
 8014e24:	041b      	lsls	r3, r3, #16
 8014e26:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8014e2a:	431a      	orrs	r2, r3
 8014e2c:	687b      	ldr	r3, [r7, #4]
 8014e2e:	691b      	ldr	r3, [r3, #16]
 8014e30:	3b01      	subs	r3, #1
 8014e32:	061b      	lsls	r3, r3, #24
 8014e34:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8014e38:	4931      	ldr	r1, [pc, #196]	; (8014f00 <RCCEx_PLL2_Config+0x15c>)
 8014e3a:	4313      	orrs	r3, r2
 8014e3c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8014e3e:	4b30      	ldr	r3, [pc, #192]	; (8014f00 <RCCEx_PLL2_Config+0x15c>)
 8014e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e42:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8014e46:	687b      	ldr	r3, [r7, #4]
 8014e48:	695b      	ldr	r3, [r3, #20]
 8014e4a:	492d      	ldr	r1, [pc, #180]	; (8014f00 <RCCEx_PLL2_Config+0x15c>)
 8014e4c:	4313      	orrs	r3, r2
 8014e4e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8014e50:	4b2b      	ldr	r3, [pc, #172]	; (8014f00 <RCCEx_PLL2_Config+0x15c>)
 8014e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e54:	f023 0220 	bic.w	r2, r3, #32
 8014e58:	687b      	ldr	r3, [r7, #4]
 8014e5a:	699b      	ldr	r3, [r3, #24]
 8014e5c:	4928      	ldr	r1, [pc, #160]	; (8014f00 <RCCEx_PLL2_Config+0x15c>)
 8014e5e:	4313      	orrs	r3, r2
 8014e60:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8014e62:	4b27      	ldr	r3, [pc, #156]	; (8014f00 <RCCEx_PLL2_Config+0x15c>)
 8014e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e66:	4a26      	ldr	r2, [pc, #152]	; (8014f00 <RCCEx_PLL2_Config+0x15c>)
 8014e68:	f023 0310 	bic.w	r3, r3, #16
 8014e6c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8014e6e:	4b24      	ldr	r3, [pc, #144]	; (8014f00 <RCCEx_PLL2_Config+0x15c>)
 8014e70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8014e72:	4b24      	ldr	r3, [pc, #144]	; (8014f04 <RCCEx_PLL2_Config+0x160>)
 8014e74:	4013      	ands	r3, r2
 8014e76:	687a      	ldr	r2, [r7, #4]
 8014e78:	69d2      	ldr	r2, [r2, #28]
 8014e7a:	00d2      	lsls	r2, r2, #3
 8014e7c:	4920      	ldr	r1, [pc, #128]	; (8014f00 <RCCEx_PLL2_Config+0x15c>)
 8014e7e:	4313      	orrs	r3, r2
 8014e80:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8014e82:	4b1f      	ldr	r3, [pc, #124]	; (8014f00 <RCCEx_PLL2_Config+0x15c>)
 8014e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e86:	4a1e      	ldr	r2, [pc, #120]	; (8014f00 <RCCEx_PLL2_Config+0x15c>)
 8014e88:	f043 0310 	orr.w	r3, r3, #16
 8014e8c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8014e8e:	683b      	ldr	r3, [r7, #0]
 8014e90:	2b00      	cmp	r3, #0
 8014e92:	d106      	bne.n	8014ea2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8014e94:	4b1a      	ldr	r3, [pc, #104]	; (8014f00 <RCCEx_PLL2_Config+0x15c>)
 8014e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e98:	4a19      	ldr	r2, [pc, #100]	; (8014f00 <RCCEx_PLL2_Config+0x15c>)
 8014e9a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8014e9e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8014ea0:	e00f      	b.n	8014ec2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8014ea2:	683b      	ldr	r3, [r7, #0]
 8014ea4:	2b01      	cmp	r3, #1
 8014ea6:	d106      	bne.n	8014eb6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8014ea8:	4b15      	ldr	r3, [pc, #84]	; (8014f00 <RCCEx_PLL2_Config+0x15c>)
 8014eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014eac:	4a14      	ldr	r2, [pc, #80]	; (8014f00 <RCCEx_PLL2_Config+0x15c>)
 8014eae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014eb2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8014eb4:	e005      	b.n	8014ec2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8014eb6:	4b12      	ldr	r3, [pc, #72]	; (8014f00 <RCCEx_PLL2_Config+0x15c>)
 8014eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014eba:	4a11      	ldr	r2, [pc, #68]	; (8014f00 <RCCEx_PLL2_Config+0x15c>)
 8014ebc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8014ec0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8014ec2:	4b0f      	ldr	r3, [pc, #60]	; (8014f00 <RCCEx_PLL2_Config+0x15c>)
 8014ec4:	681b      	ldr	r3, [r3, #0]
 8014ec6:	4a0e      	ldr	r2, [pc, #56]	; (8014f00 <RCCEx_PLL2_Config+0x15c>)
 8014ec8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8014ecc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8014ece:	f7f8 f897 	bl	800d000 <HAL_GetTick>
 8014ed2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8014ed4:	e008      	b.n	8014ee8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8014ed6:	f7f8 f893 	bl	800d000 <HAL_GetTick>
 8014eda:	4602      	mov	r2, r0
 8014edc:	68bb      	ldr	r3, [r7, #8]
 8014ede:	1ad3      	subs	r3, r2, r3
 8014ee0:	2b02      	cmp	r3, #2
 8014ee2:	d901      	bls.n	8014ee8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8014ee4:	2303      	movs	r3, #3
 8014ee6:	e006      	b.n	8014ef6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8014ee8:	4b05      	ldr	r3, [pc, #20]	; (8014f00 <RCCEx_PLL2_Config+0x15c>)
 8014eea:	681b      	ldr	r3, [r3, #0]
 8014eec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8014ef0:	2b00      	cmp	r3, #0
 8014ef2:	d0f0      	beq.n	8014ed6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8014ef4:	7bfb      	ldrb	r3, [r7, #15]
}
 8014ef6:	4618      	mov	r0, r3
 8014ef8:	3710      	adds	r7, #16
 8014efa:	46bd      	mov	sp, r7
 8014efc:	bd80      	pop	{r7, pc}
 8014efe:	bf00      	nop
 8014f00:	58024400 	.word	0x58024400
 8014f04:	ffff0007 	.word	0xffff0007

08014f08 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8014f08:	b580      	push	{r7, lr}
 8014f0a:	b084      	sub	sp, #16
 8014f0c:	af00      	add	r7, sp, #0
 8014f0e:	6078      	str	r0, [r7, #4]
 8014f10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8014f12:	2300      	movs	r3, #0
 8014f14:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8014f16:	4b53      	ldr	r3, [pc, #332]	; (8015064 <RCCEx_PLL3_Config+0x15c>)
 8014f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014f1a:	f003 0303 	and.w	r3, r3, #3
 8014f1e:	2b03      	cmp	r3, #3
 8014f20:	d101      	bne.n	8014f26 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8014f22:	2301      	movs	r3, #1
 8014f24:	e099      	b.n	801505a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8014f26:	4b4f      	ldr	r3, [pc, #316]	; (8015064 <RCCEx_PLL3_Config+0x15c>)
 8014f28:	681b      	ldr	r3, [r3, #0]
 8014f2a:	4a4e      	ldr	r2, [pc, #312]	; (8015064 <RCCEx_PLL3_Config+0x15c>)
 8014f2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8014f30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8014f32:	f7f8 f865 	bl	800d000 <HAL_GetTick>
 8014f36:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8014f38:	e008      	b.n	8014f4c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8014f3a:	f7f8 f861 	bl	800d000 <HAL_GetTick>
 8014f3e:	4602      	mov	r2, r0
 8014f40:	68bb      	ldr	r3, [r7, #8]
 8014f42:	1ad3      	subs	r3, r2, r3
 8014f44:	2b02      	cmp	r3, #2
 8014f46:	d901      	bls.n	8014f4c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8014f48:	2303      	movs	r3, #3
 8014f4a:	e086      	b.n	801505a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8014f4c:	4b45      	ldr	r3, [pc, #276]	; (8015064 <RCCEx_PLL3_Config+0x15c>)
 8014f4e:	681b      	ldr	r3, [r3, #0]
 8014f50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8014f54:	2b00      	cmp	r3, #0
 8014f56:	d1f0      	bne.n	8014f3a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8014f58:	4b42      	ldr	r3, [pc, #264]	; (8015064 <RCCEx_PLL3_Config+0x15c>)
 8014f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014f5c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8014f60:	687b      	ldr	r3, [r7, #4]
 8014f62:	681b      	ldr	r3, [r3, #0]
 8014f64:	051b      	lsls	r3, r3, #20
 8014f66:	493f      	ldr	r1, [pc, #252]	; (8015064 <RCCEx_PLL3_Config+0x15c>)
 8014f68:	4313      	orrs	r3, r2
 8014f6a:	628b      	str	r3, [r1, #40]	; 0x28
 8014f6c:	687b      	ldr	r3, [r7, #4]
 8014f6e:	685b      	ldr	r3, [r3, #4]
 8014f70:	3b01      	subs	r3, #1
 8014f72:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8014f76:	687b      	ldr	r3, [r7, #4]
 8014f78:	689b      	ldr	r3, [r3, #8]
 8014f7a:	3b01      	subs	r3, #1
 8014f7c:	025b      	lsls	r3, r3, #9
 8014f7e:	b29b      	uxth	r3, r3
 8014f80:	431a      	orrs	r2, r3
 8014f82:	687b      	ldr	r3, [r7, #4]
 8014f84:	68db      	ldr	r3, [r3, #12]
 8014f86:	3b01      	subs	r3, #1
 8014f88:	041b      	lsls	r3, r3, #16
 8014f8a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8014f8e:	431a      	orrs	r2, r3
 8014f90:	687b      	ldr	r3, [r7, #4]
 8014f92:	691b      	ldr	r3, [r3, #16]
 8014f94:	3b01      	subs	r3, #1
 8014f96:	061b      	lsls	r3, r3, #24
 8014f98:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8014f9c:	4931      	ldr	r1, [pc, #196]	; (8015064 <RCCEx_PLL3_Config+0x15c>)
 8014f9e:	4313      	orrs	r3, r2
 8014fa0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8014fa2:	4b30      	ldr	r3, [pc, #192]	; (8015064 <RCCEx_PLL3_Config+0x15c>)
 8014fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014fa6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8014faa:	687b      	ldr	r3, [r7, #4]
 8014fac:	695b      	ldr	r3, [r3, #20]
 8014fae:	492d      	ldr	r1, [pc, #180]	; (8015064 <RCCEx_PLL3_Config+0x15c>)
 8014fb0:	4313      	orrs	r3, r2
 8014fb2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8014fb4:	4b2b      	ldr	r3, [pc, #172]	; (8015064 <RCCEx_PLL3_Config+0x15c>)
 8014fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014fb8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8014fbc:	687b      	ldr	r3, [r7, #4]
 8014fbe:	699b      	ldr	r3, [r3, #24]
 8014fc0:	4928      	ldr	r1, [pc, #160]	; (8015064 <RCCEx_PLL3_Config+0x15c>)
 8014fc2:	4313      	orrs	r3, r2
 8014fc4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8014fc6:	4b27      	ldr	r3, [pc, #156]	; (8015064 <RCCEx_PLL3_Config+0x15c>)
 8014fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014fca:	4a26      	ldr	r2, [pc, #152]	; (8015064 <RCCEx_PLL3_Config+0x15c>)
 8014fcc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8014fd0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8014fd2:	4b24      	ldr	r3, [pc, #144]	; (8015064 <RCCEx_PLL3_Config+0x15c>)
 8014fd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014fd6:	4b24      	ldr	r3, [pc, #144]	; (8015068 <RCCEx_PLL3_Config+0x160>)
 8014fd8:	4013      	ands	r3, r2
 8014fda:	687a      	ldr	r2, [r7, #4]
 8014fdc:	69d2      	ldr	r2, [r2, #28]
 8014fde:	00d2      	lsls	r2, r2, #3
 8014fe0:	4920      	ldr	r1, [pc, #128]	; (8015064 <RCCEx_PLL3_Config+0x15c>)
 8014fe2:	4313      	orrs	r3, r2
 8014fe4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8014fe6:	4b1f      	ldr	r3, [pc, #124]	; (8015064 <RCCEx_PLL3_Config+0x15c>)
 8014fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014fea:	4a1e      	ldr	r2, [pc, #120]	; (8015064 <RCCEx_PLL3_Config+0x15c>)
 8014fec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014ff0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8014ff2:	683b      	ldr	r3, [r7, #0]
 8014ff4:	2b00      	cmp	r3, #0
 8014ff6:	d106      	bne.n	8015006 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8014ff8:	4b1a      	ldr	r3, [pc, #104]	; (8015064 <RCCEx_PLL3_Config+0x15c>)
 8014ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014ffc:	4a19      	ldr	r2, [pc, #100]	; (8015064 <RCCEx_PLL3_Config+0x15c>)
 8014ffe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8015002:	62d3      	str	r3, [r2, #44]	; 0x2c
 8015004:	e00f      	b.n	8015026 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8015006:	683b      	ldr	r3, [r7, #0]
 8015008:	2b01      	cmp	r3, #1
 801500a:	d106      	bne.n	801501a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 801500c:	4b15      	ldr	r3, [pc, #84]	; (8015064 <RCCEx_PLL3_Config+0x15c>)
 801500e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015010:	4a14      	ldr	r2, [pc, #80]	; (8015064 <RCCEx_PLL3_Config+0x15c>)
 8015012:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8015016:	62d3      	str	r3, [r2, #44]	; 0x2c
 8015018:	e005      	b.n	8015026 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 801501a:	4b12      	ldr	r3, [pc, #72]	; (8015064 <RCCEx_PLL3_Config+0x15c>)
 801501c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801501e:	4a11      	ldr	r2, [pc, #68]	; (8015064 <RCCEx_PLL3_Config+0x15c>)
 8015020:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8015024:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8015026:	4b0f      	ldr	r3, [pc, #60]	; (8015064 <RCCEx_PLL3_Config+0x15c>)
 8015028:	681b      	ldr	r3, [r3, #0]
 801502a:	4a0e      	ldr	r2, [pc, #56]	; (8015064 <RCCEx_PLL3_Config+0x15c>)
 801502c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8015030:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8015032:	f7f7 ffe5 	bl	800d000 <HAL_GetTick>
 8015036:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8015038:	e008      	b.n	801504c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 801503a:	f7f7 ffe1 	bl	800d000 <HAL_GetTick>
 801503e:	4602      	mov	r2, r0
 8015040:	68bb      	ldr	r3, [r7, #8]
 8015042:	1ad3      	subs	r3, r2, r3
 8015044:	2b02      	cmp	r3, #2
 8015046:	d901      	bls.n	801504c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8015048:	2303      	movs	r3, #3
 801504a:	e006      	b.n	801505a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 801504c:	4b05      	ldr	r3, [pc, #20]	; (8015064 <RCCEx_PLL3_Config+0x15c>)
 801504e:	681b      	ldr	r3, [r3, #0]
 8015050:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8015054:	2b00      	cmp	r3, #0
 8015056:	d0f0      	beq.n	801503a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8015058:	7bfb      	ldrb	r3, [r7, #15]
}
 801505a:	4618      	mov	r0, r3
 801505c:	3710      	adds	r7, #16
 801505e:	46bd      	mov	sp, r7
 8015060:	bd80      	pop	{r7, pc}
 8015062:	bf00      	nop
 8015064:	58024400 	.word	0x58024400
 8015068:	ffff0007 	.word	0xffff0007

0801506c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 801506c:	b580      	push	{r7, lr}
 801506e:	b082      	sub	sp, #8
 8015070:	af00      	add	r7, sp, #0
 8015072:	6078      	str	r0, [r7, #4]
 8015074:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8015076:	687b      	ldr	r3, [r7, #4]
 8015078:	2b00      	cmp	r3, #0
 801507a:	d101      	bne.n	8015080 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 801507c:	2301      	movs	r3, #1
 801507e:	e02b      	b.n	80150d8 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8015080:	687b      	ldr	r3, [r7, #4]
 8015082:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8015086:	b2db      	uxtb	r3, r3
 8015088:	2b00      	cmp	r3, #0
 801508a:	d106      	bne.n	801509a <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 801508c:	687b      	ldr	r3, [r7, #4]
 801508e:	2200      	movs	r2, #0
 8015090:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8015094:	6878      	ldr	r0, [r7, #4]
 8015096:	f7ec fb3f 	bl	8001718 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 801509a:	687b      	ldr	r3, [r7, #4]
 801509c:	2202      	movs	r2, #2
 801509e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80150a2:	687b      	ldr	r3, [r7, #4]
 80150a4:	681a      	ldr	r2, [r3, #0]
 80150a6:	687b      	ldr	r3, [r7, #4]
 80150a8:	3304      	adds	r3, #4
 80150aa:	4619      	mov	r1, r3
 80150ac:	4610      	mov	r0, r2
 80150ae:	f000 fb4f 	bl	8015750 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80150b2:	687b      	ldr	r3, [r7, #4]
 80150b4:	6818      	ldr	r0, [r3, #0]
 80150b6:	687b      	ldr	r3, [r7, #4]
 80150b8:	685b      	ldr	r3, [r3, #4]
 80150ba:	461a      	mov	r2, r3
 80150bc:	6839      	ldr	r1, [r7, #0]
 80150be:	f000 fba3 	bl	8015808 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 80150c2:	4b07      	ldr	r3, [pc, #28]	; (80150e0 <HAL_SDRAM_Init+0x74>)
 80150c4:	681b      	ldr	r3, [r3, #0]
 80150c6:	4a06      	ldr	r2, [pc, #24]	; (80150e0 <HAL_SDRAM_Init+0x74>)
 80150c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80150cc:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80150ce:	687b      	ldr	r3, [r7, #4]
 80150d0:	2201      	movs	r2, #1
 80150d2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80150d6:	2300      	movs	r3, #0
}
 80150d8:	4618      	mov	r0, r3
 80150da:	3708      	adds	r7, #8
 80150dc:	46bd      	mov	sp, r7
 80150de:	bd80      	pop	{r7, pc}
 80150e0:	52004000 	.word	0x52004000

080150e4 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 80150e4:	b580      	push	{r7, lr}
 80150e6:	b086      	sub	sp, #24
 80150e8:	af00      	add	r7, sp, #0
 80150ea:	60f8      	str	r0, [r7, #12]
 80150ec:	60b9      	str	r1, [r7, #8]
 80150ee:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80150f0:	68fb      	ldr	r3, [r7, #12]
 80150f2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80150f6:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 80150f8:	7dfb      	ldrb	r3, [r7, #23]
 80150fa:	2b02      	cmp	r3, #2
 80150fc:	d101      	bne.n	8015102 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 80150fe:	2302      	movs	r3, #2
 8015100:	e021      	b.n	8015146 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8015102:	7dfb      	ldrb	r3, [r7, #23]
 8015104:	2b01      	cmp	r3, #1
 8015106:	d002      	beq.n	801510e <HAL_SDRAM_SendCommand+0x2a>
 8015108:	7dfb      	ldrb	r3, [r7, #23]
 801510a:	2b05      	cmp	r3, #5
 801510c:	d118      	bne.n	8015140 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 801510e:	68fb      	ldr	r3, [r7, #12]
 8015110:	2202      	movs	r2, #2
 8015112:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8015116:	68fb      	ldr	r3, [r7, #12]
 8015118:	681b      	ldr	r3, [r3, #0]
 801511a:	687a      	ldr	r2, [r7, #4]
 801511c:	68b9      	ldr	r1, [r7, #8]
 801511e:	4618      	mov	r0, r3
 8015120:	f000 fbdc 	bl	80158dc <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8015124:	68bb      	ldr	r3, [r7, #8]
 8015126:	681b      	ldr	r3, [r3, #0]
 8015128:	2b02      	cmp	r3, #2
 801512a:	d104      	bne.n	8015136 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 801512c:	68fb      	ldr	r3, [r7, #12]
 801512e:	2205      	movs	r2, #5
 8015130:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8015134:	e006      	b.n	8015144 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8015136:	68fb      	ldr	r3, [r7, #12]
 8015138:	2201      	movs	r2, #1
 801513a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 801513e:	e001      	b.n	8015144 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8015140:	2301      	movs	r3, #1
 8015142:	e000      	b.n	8015146 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8015144:	2300      	movs	r3, #0
}
 8015146:	4618      	mov	r0, r3
 8015148:	3718      	adds	r7, #24
 801514a:	46bd      	mov	sp, r7
 801514c:	bd80      	pop	{r7, pc}

0801514e <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 801514e:	b580      	push	{r7, lr}
 8015150:	b082      	sub	sp, #8
 8015152:	af00      	add	r7, sp, #0
 8015154:	6078      	str	r0, [r7, #4]
 8015156:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8015158:	687b      	ldr	r3, [r7, #4]
 801515a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801515e:	b2db      	uxtb	r3, r3
 8015160:	2b02      	cmp	r3, #2
 8015162:	d101      	bne.n	8015168 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8015164:	2302      	movs	r3, #2
 8015166:	e016      	b.n	8015196 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8015168:	687b      	ldr	r3, [r7, #4]
 801516a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801516e:	b2db      	uxtb	r3, r3
 8015170:	2b01      	cmp	r3, #1
 8015172:	d10f      	bne.n	8015194 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8015174:	687b      	ldr	r3, [r7, #4]
 8015176:	2202      	movs	r2, #2
 8015178:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 801517c:	687b      	ldr	r3, [r7, #4]
 801517e:	681b      	ldr	r3, [r3, #0]
 8015180:	6839      	ldr	r1, [r7, #0]
 8015182:	4618      	mov	r0, r3
 8015184:	f000 fbce 	bl	8015924 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8015188:	687b      	ldr	r3, [r7, #4]
 801518a:	2201      	movs	r2, #1
 801518c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8015190:	2300      	movs	r3, #0
 8015192:	e000      	b.n	8015196 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8015194:	2301      	movs	r3, #1
}
 8015196:	4618      	mov	r0, r3
 8015198:	3708      	adds	r7, #8
 801519a:	46bd      	mov	sp, r7
 801519c:	bd80      	pop	{r7, pc}

0801519e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801519e:	b580      	push	{r7, lr}
 80151a0:	b082      	sub	sp, #8
 80151a2:	af00      	add	r7, sp, #0
 80151a4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80151a6:	687b      	ldr	r3, [r7, #4]
 80151a8:	2b00      	cmp	r3, #0
 80151aa:	d101      	bne.n	80151b0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80151ac:	2301      	movs	r3, #1
 80151ae:	e049      	b.n	8015244 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80151b0:	687b      	ldr	r3, [r7, #4]
 80151b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80151b6:	b2db      	uxtb	r3, r3
 80151b8:	2b00      	cmp	r3, #0
 80151ba:	d106      	bne.n	80151ca <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80151bc:	687b      	ldr	r3, [r7, #4]
 80151be:	2200      	movs	r2, #0
 80151c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80151c4:	6878      	ldr	r0, [r7, #4]
 80151c6:	f000 f841 	bl	801524c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80151ca:	687b      	ldr	r3, [r7, #4]
 80151cc:	2202      	movs	r2, #2
 80151ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80151d2:	687b      	ldr	r3, [r7, #4]
 80151d4:	681a      	ldr	r2, [r3, #0]
 80151d6:	687b      	ldr	r3, [r7, #4]
 80151d8:	3304      	adds	r3, #4
 80151da:	4619      	mov	r1, r3
 80151dc:	4610      	mov	r0, r2
 80151de:	f000 f9ff 	bl	80155e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80151e2:	687b      	ldr	r3, [r7, #4]
 80151e4:	2201      	movs	r2, #1
 80151e6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80151ea:	687b      	ldr	r3, [r7, #4]
 80151ec:	2201      	movs	r2, #1
 80151ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80151f2:	687b      	ldr	r3, [r7, #4]
 80151f4:	2201      	movs	r2, #1
 80151f6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80151fa:	687b      	ldr	r3, [r7, #4]
 80151fc:	2201      	movs	r2, #1
 80151fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8015202:	687b      	ldr	r3, [r7, #4]
 8015204:	2201      	movs	r2, #1
 8015206:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801520a:	687b      	ldr	r3, [r7, #4]
 801520c:	2201      	movs	r2, #1
 801520e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8015212:	687b      	ldr	r3, [r7, #4]
 8015214:	2201      	movs	r2, #1
 8015216:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801521a:	687b      	ldr	r3, [r7, #4]
 801521c:	2201      	movs	r2, #1
 801521e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8015222:	687b      	ldr	r3, [r7, #4]
 8015224:	2201      	movs	r2, #1
 8015226:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801522a:	687b      	ldr	r3, [r7, #4]
 801522c:	2201      	movs	r2, #1
 801522e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8015232:	687b      	ldr	r3, [r7, #4]
 8015234:	2201      	movs	r2, #1
 8015236:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801523a:	687b      	ldr	r3, [r7, #4]
 801523c:	2201      	movs	r2, #1
 801523e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8015242:	2300      	movs	r3, #0
}
 8015244:	4618      	mov	r0, r3
 8015246:	3708      	adds	r7, #8
 8015248:	46bd      	mov	sp, r7
 801524a:	bd80      	pop	{r7, pc}

0801524c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 801524c:	b480      	push	{r7}
 801524e:	b083      	sub	sp, #12
 8015250:	af00      	add	r7, sp, #0
 8015252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8015254:	bf00      	nop
 8015256:	370c      	adds	r7, #12
 8015258:	46bd      	mov	sp, r7
 801525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801525e:	4770      	bx	lr

08015260 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8015260:	b480      	push	{r7}
 8015262:	b085      	sub	sp, #20
 8015264:	af00      	add	r7, sp, #0
 8015266:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8015268:	687b      	ldr	r3, [r7, #4]
 801526a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801526e:	b2db      	uxtb	r3, r3
 8015270:	2b01      	cmp	r3, #1
 8015272:	d001      	beq.n	8015278 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8015274:	2301      	movs	r3, #1
 8015276:	e054      	b.n	8015322 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015278:	687b      	ldr	r3, [r7, #4]
 801527a:	2202      	movs	r2, #2
 801527c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8015280:	687b      	ldr	r3, [r7, #4]
 8015282:	681b      	ldr	r3, [r3, #0]
 8015284:	68da      	ldr	r2, [r3, #12]
 8015286:	687b      	ldr	r3, [r7, #4]
 8015288:	681b      	ldr	r3, [r3, #0]
 801528a:	f042 0201 	orr.w	r2, r2, #1
 801528e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8015290:	687b      	ldr	r3, [r7, #4]
 8015292:	681b      	ldr	r3, [r3, #0]
 8015294:	4a26      	ldr	r2, [pc, #152]	; (8015330 <HAL_TIM_Base_Start_IT+0xd0>)
 8015296:	4293      	cmp	r3, r2
 8015298:	d022      	beq.n	80152e0 <HAL_TIM_Base_Start_IT+0x80>
 801529a:	687b      	ldr	r3, [r7, #4]
 801529c:	681b      	ldr	r3, [r3, #0]
 801529e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80152a2:	d01d      	beq.n	80152e0 <HAL_TIM_Base_Start_IT+0x80>
 80152a4:	687b      	ldr	r3, [r7, #4]
 80152a6:	681b      	ldr	r3, [r3, #0]
 80152a8:	4a22      	ldr	r2, [pc, #136]	; (8015334 <HAL_TIM_Base_Start_IT+0xd4>)
 80152aa:	4293      	cmp	r3, r2
 80152ac:	d018      	beq.n	80152e0 <HAL_TIM_Base_Start_IT+0x80>
 80152ae:	687b      	ldr	r3, [r7, #4]
 80152b0:	681b      	ldr	r3, [r3, #0]
 80152b2:	4a21      	ldr	r2, [pc, #132]	; (8015338 <HAL_TIM_Base_Start_IT+0xd8>)
 80152b4:	4293      	cmp	r3, r2
 80152b6:	d013      	beq.n	80152e0 <HAL_TIM_Base_Start_IT+0x80>
 80152b8:	687b      	ldr	r3, [r7, #4]
 80152ba:	681b      	ldr	r3, [r3, #0]
 80152bc:	4a1f      	ldr	r2, [pc, #124]	; (801533c <HAL_TIM_Base_Start_IT+0xdc>)
 80152be:	4293      	cmp	r3, r2
 80152c0:	d00e      	beq.n	80152e0 <HAL_TIM_Base_Start_IT+0x80>
 80152c2:	687b      	ldr	r3, [r7, #4]
 80152c4:	681b      	ldr	r3, [r3, #0]
 80152c6:	4a1e      	ldr	r2, [pc, #120]	; (8015340 <HAL_TIM_Base_Start_IT+0xe0>)
 80152c8:	4293      	cmp	r3, r2
 80152ca:	d009      	beq.n	80152e0 <HAL_TIM_Base_Start_IT+0x80>
 80152cc:	687b      	ldr	r3, [r7, #4]
 80152ce:	681b      	ldr	r3, [r3, #0]
 80152d0:	4a1c      	ldr	r2, [pc, #112]	; (8015344 <HAL_TIM_Base_Start_IT+0xe4>)
 80152d2:	4293      	cmp	r3, r2
 80152d4:	d004      	beq.n	80152e0 <HAL_TIM_Base_Start_IT+0x80>
 80152d6:	687b      	ldr	r3, [r7, #4]
 80152d8:	681b      	ldr	r3, [r3, #0]
 80152da:	4a1b      	ldr	r2, [pc, #108]	; (8015348 <HAL_TIM_Base_Start_IT+0xe8>)
 80152dc:	4293      	cmp	r3, r2
 80152de:	d115      	bne.n	801530c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80152e0:	687b      	ldr	r3, [r7, #4]
 80152e2:	681b      	ldr	r3, [r3, #0]
 80152e4:	689a      	ldr	r2, [r3, #8]
 80152e6:	4b19      	ldr	r3, [pc, #100]	; (801534c <HAL_TIM_Base_Start_IT+0xec>)
 80152e8:	4013      	ands	r3, r2
 80152ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80152ec:	68fb      	ldr	r3, [r7, #12]
 80152ee:	2b06      	cmp	r3, #6
 80152f0:	d015      	beq.n	801531e <HAL_TIM_Base_Start_IT+0xbe>
 80152f2:	68fb      	ldr	r3, [r7, #12]
 80152f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80152f8:	d011      	beq.n	801531e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80152fa:	687b      	ldr	r3, [r7, #4]
 80152fc:	681b      	ldr	r3, [r3, #0]
 80152fe:	681a      	ldr	r2, [r3, #0]
 8015300:	687b      	ldr	r3, [r7, #4]
 8015302:	681b      	ldr	r3, [r3, #0]
 8015304:	f042 0201 	orr.w	r2, r2, #1
 8015308:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801530a:	e008      	b.n	801531e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801530c:	687b      	ldr	r3, [r7, #4]
 801530e:	681b      	ldr	r3, [r3, #0]
 8015310:	681a      	ldr	r2, [r3, #0]
 8015312:	687b      	ldr	r3, [r7, #4]
 8015314:	681b      	ldr	r3, [r3, #0]
 8015316:	f042 0201 	orr.w	r2, r2, #1
 801531a:	601a      	str	r2, [r3, #0]
 801531c:	e000      	b.n	8015320 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801531e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8015320:	2300      	movs	r3, #0
}
 8015322:	4618      	mov	r0, r3
 8015324:	3714      	adds	r7, #20
 8015326:	46bd      	mov	sp, r7
 8015328:	f85d 7b04 	ldr.w	r7, [sp], #4
 801532c:	4770      	bx	lr
 801532e:	bf00      	nop
 8015330:	40010000 	.word	0x40010000
 8015334:	40000400 	.word	0x40000400
 8015338:	40000800 	.word	0x40000800
 801533c:	40000c00 	.word	0x40000c00
 8015340:	40010400 	.word	0x40010400
 8015344:	40001800 	.word	0x40001800
 8015348:	40014000 	.word	0x40014000
 801534c:	00010007 	.word	0x00010007

08015350 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8015350:	b580      	push	{r7, lr}
 8015352:	b082      	sub	sp, #8
 8015354:	af00      	add	r7, sp, #0
 8015356:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8015358:	687b      	ldr	r3, [r7, #4]
 801535a:	681b      	ldr	r3, [r3, #0]
 801535c:	691b      	ldr	r3, [r3, #16]
 801535e:	f003 0302 	and.w	r3, r3, #2
 8015362:	2b02      	cmp	r3, #2
 8015364:	d122      	bne.n	80153ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8015366:	687b      	ldr	r3, [r7, #4]
 8015368:	681b      	ldr	r3, [r3, #0]
 801536a:	68db      	ldr	r3, [r3, #12]
 801536c:	f003 0302 	and.w	r3, r3, #2
 8015370:	2b02      	cmp	r3, #2
 8015372:	d11b      	bne.n	80153ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8015374:	687b      	ldr	r3, [r7, #4]
 8015376:	681b      	ldr	r3, [r3, #0]
 8015378:	f06f 0202 	mvn.w	r2, #2
 801537c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801537e:	687b      	ldr	r3, [r7, #4]
 8015380:	2201      	movs	r2, #1
 8015382:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8015384:	687b      	ldr	r3, [r7, #4]
 8015386:	681b      	ldr	r3, [r3, #0]
 8015388:	699b      	ldr	r3, [r3, #24]
 801538a:	f003 0303 	and.w	r3, r3, #3
 801538e:	2b00      	cmp	r3, #0
 8015390:	d003      	beq.n	801539a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8015392:	6878      	ldr	r0, [r7, #4]
 8015394:	f000 f905 	bl	80155a2 <HAL_TIM_IC_CaptureCallback>
 8015398:	e005      	b.n	80153a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801539a:	6878      	ldr	r0, [r7, #4]
 801539c:	f000 f8f7 	bl	801558e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80153a0:	6878      	ldr	r0, [r7, #4]
 80153a2:	f000 f908 	bl	80155b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80153a6:	687b      	ldr	r3, [r7, #4]
 80153a8:	2200      	movs	r2, #0
 80153aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80153ac:	687b      	ldr	r3, [r7, #4]
 80153ae:	681b      	ldr	r3, [r3, #0]
 80153b0:	691b      	ldr	r3, [r3, #16]
 80153b2:	f003 0304 	and.w	r3, r3, #4
 80153b6:	2b04      	cmp	r3, #4
 80153b8:	d122      	bne.n	8015400 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80153ba:	687b      	ldr	r3, [r7, #4]
 80153bc:	681b      	ldr	r3, [r3, #0]
 80153be:	68db      	ldr	r3, [r3, #12]
 80153c0:	f003 0304 	and.w	r3, r3, #4
 80153c4:	2b04      	cmp	r3, #4
 80153c6:	d11b      	bne.n	8015400 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80153c8:	687b      	ldr	r3, [r7, #4]
 80153ca:	681b      	ldr	r3, [r3, #0]
 80153cc:	f06f 0204 	mvn.w	r2, #4
 80153d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80153d2:	687b      	ldr	r3, [r7, #4]
 80153d4:	2202      	movs	r2, #2
 80153d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80153d8:	687b      	ldr	r3, [r7, #4]
 80153da:	681b      	ldr	r3, [r3, #0]
 80153dc:	699b      	ldr	r3, [r3, #24]
 80153de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80153e2:	2b00      	cmp	r3, #0
 80153e4:	d003      	beq.n	80153ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80153e6:	6878      	ldr	r0, [r7, #4]
 80153e8:	f000 f8db 	bl	80155a2 <HAL_TIM_IC_CaptureCallback>
 80153ec:	e005      	b.n	80153fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80153ee:	6878      	ldr	r0, [r7, #4]
 80153f0:	f000 f8cd 	bl	801558e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80153f4:	6878      	ldr	r0, [r7, #4]
 80153f6:	f000 f8de 	bl	80155b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80153fa:	687b      	ldr	r3, [r7, #4]
 80153fc:	2200      	movs	r2, #0
 80153fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8015400:	687b      	ldr	r3, [r7, #4]
 8015402:	681b      	ldr	r3, [r3, #0]
 8015404:	691b      	ldr	r3, [r3, #16]
 8015406:	f003 0308 	and.w	r3, r3, #8
 801540a:	2b08      	cmp	r3, #8
 801540c:	d122      	bne.n	8015454 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801540e:	687b      	ldr	r3, [r7, #4]
 8015410:	681b      	ldr	r3, [r3, #0]
 8015412:	68db      	ldr	r3, [r3, #12]
 8015414:	f003 0308 	and.w	r3, r3, #8
 8015418:	2b08      	cmp	r3, #8
 801541a:	d11b      	bne.n	8015454 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801541c:	687b      	ldr	r3, [r7, #4]
 801541e:	681b      	ldr	r3, [r3, #0]
 8015420:	f06f 0208 	mvn.w	r2, #8
 8015424:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8015426:	687b      	ldr	r3, [r7, #4]
 8015428:	2204      	movs	r2, #4
 801542a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801542c:	687b      	ldr	r3, [r7, #4]
 801542e:	681b      	ldr	r3, [r3, #0]
 8015430:	69db      	ldr	r3, [r3, #28]
 8015432:	f003 0303 	and.w	r3, r3, #3
 8015436:	2b00      	cmp	r3, #0
 8015438:	d003      	beq.n	8015442 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801543a:	6878      	ldr	r0, [r7, #4]
 801543c:	f000 f8b1 	bl	80155a2 <HAL_TIM_IC_CaptureCallback>
 8015440:	e005      	b.n	801544e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8015442:	6878      	ldr	r0, [r7, #4]
 8015444:	f000 f8a3 	bl	801558e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8015448:	6878      	ldr	r0, [r7, #4]
 801544a:	f000 f8b4 	bl	80155b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801544e:	687b      	ldr	r3, [r7, #4]
 8015450:	2200      	movs	r2, #0
 8015452:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8015454:	687b      	ldr	r3, [r7, #4]
 8015456:	681b      	ldr	r3, [r3, #0]
 8015458:	691b      	ldr	r3, [r3, #16]
 801545a:	f003 0310 	and.w	r3, r3, #16
 801545e:	2b10      	cmp	r3, #16
 8015460:	d122      	bne.n	80154a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8015462:	687b      	ldr	r3, [r7, #4]
 8015464:	681b      	ldr	r3, [r3, #0]
 8015466:	68db      	ldr	r3, [r3, #12]
 8015468:	f003 0310 	and.w	r3, r3, #16
 801546c:	2b10      	cmp	r3, #16
 801546e:	d11b      	bne.n	80154a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8015470:	687b      	ldr	r3, [r7, #4]
 8015472:	681b      	ldr	r3, [r3, #0]
 8015474:	f06f 0210 	mvn.w	r2, #16
 8015478:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801547a:	687b      	ldr	r3, [r7, #4]
 801547c:	2208      	movs	r2, #8
 801547e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8015480:	687b      	ldr	r3, [r7, #4]
 8015482:	681b      	ldr	r3, [r3, #0]
 8015484:	69db      	ldr	r3, [r3, #28]
 8015486:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801548a:	2b00      	cmp	r3, #0
 801548c:	d003      	beq.n	8015496 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801548e:	6878      	ldr	r0, [r7, #4]
 8015490:	f000 f887 	bl	80155a2 <HAL_TIM_IC_CaptureCallback>
 8015494:	e005      	b.n	80154a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8015496:	6878      	ldr	r0, [r7, #4]
 8015498:	f000 f879 	bl	801558e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801549c:	6878      	ldr	r0, [r7, #4]
 801549e:	f000 f88a 	bl	80155b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80154a2:	687b      	ldr	r3, [r7, #4]
 80154a4:	2200      	movs	r2, #0
 80154a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80154a8:	687b      	ldr	r3, [r7, #4]
 80154aa:	681b      	ldr	r3, [r3, #0]
 80154ac:	691b      	ldr	r3, [r3, #16]
 80154ae:	f003 0301 	and.w	r3, r3, #1
 80154b2:	2b01      	cmp	r3, #1
 80154b4:	d10e      	bne.n	80154d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80154b6:	687b      	ldr	r3, [r7, #4]
 80154b8:	681b      	ldr	r3, [r3, #0]
 80154ba:	68db      	ldr	r3, [r3, #12]
 80154bc:	f003 0301 	and.w	r3, r3, #1
 80154c0:	2b01      	cmp	r3, #1
 80154c2:	d107      	bne.n	80154d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80154c4:	687b      	ldr	r3, [r7, #4]
 80154c6:	681b      	ldr	r3, [r3, #0]
 80154c8:	f06f 0201 	mvn.w	r2, #1
 80154cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80154ce:	6878      	ldr	r0, [r7, #4]
 80154d0:	f7eb fd3e 	bl	8000f50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80154d4:	687b      	ldr	r3, [r7, #4]
 80154d6:	681b      	ldr	r3, [r3, #0]
 80154d8:	691b      	ldr	r3, [r3, #16]
 80154da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80154de:	2b80      	cmp	r3, #128	; 0x80
 80154e0:	d10e      	bne.n	8015500 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80154e2:	687b      	ldr	r3, [r7, #4]
 80154e4:	681b      	ldr	r3, [r3, #0]
 80154e6:	68db      	ldr	r3, [r3, #12]
 80154e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80154ec:	2b80      	cmp	r3, #128	; 0x80
 80154ee:	d107      	bne.n	8015500 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80154f0:	687b      	ldr	r3, [r7, #4]
 80154f2:	681b      	ldr	r3, [r3, #0]
 80154f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80154f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80154fa:	6878      	ldr	r0, [r7, #4]
 80154fc:	f000 f914 	bl	8015728 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8015500:	687b      	ldr	r3, [r7, #4]
 8015502:	681b      	ldr	r3, [r3, #0]
 8015504:	691b      	ldr	r3, [r3, #16]
 8015506:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801550a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801550e:	d10e      	bne.n	801552e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8015510:	687b      	ldr	r3, [r7, #4]
 8015512:	681b      	ldr	r3, [r3, #0]
 8015514:	68db      	ldr	r3, [r3, #12]
 8015516:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801551a:	2b80      	cmp	r3, #128	; 0x80
 801551c:	d107      	bne.n	801552e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 801551e:	687b      	ldr	r3, [r7, #4]
 8015520:	681b      	ldr	r3, [r3, #0]
 8015522:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8015526:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8015528:	6878      	ldr	r0, [r7, #4]
 801552a:	f000 f907 	bl	801573c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801552e:	687b      	ldr	r3, [r7, #4]
 8015530:	681b      	ldr	r3, [r3, #0]
 8015532:	691b      	ldr	r3, [r3, #16]
 8015534:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015538:	2b40      	cmp	r3, #64	; 0x40
 801553a:	d10e      	bne.n	801555a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801553c:	687b      	ldr	r3, [r7, #4]
 801553e:	681b      	ldr	r3, [r3, #0]
 8015540:	68db      	ldr	r3, [r3, #12]
 8015542:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015546:	2b40      	cmp	r3, #64	; 0x40
 8015548:	d107      	bne.n	801555a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801554a:	687b      	ldr	r3, [r7, #4]
 801554c:	681b      	ldr	r3, [r3, #0]
 801554e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8015552:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8015554:	6878      	ldr	r0, [r7, #4]
 8015556:	f000 f838 	bl	80155ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801555a:	687b      	ldr	r3, [r7, #4]
 801555c:	681b      	ldr	r3, [r3, #0]
 801555e:	691b      	ldr	r3, [r3, #16]
 8015560:	f003 0320 	and.w	r3, r3, #32
 8015564:	2b20      	cmp	r3, #32
 8015566:	d10e      	bne.n	8015586 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8015568:	687b      	ldr	r3, [r7, #4]
 801556a:	681b      	ldr	r3, [r3, #0]
 801556c:	68db      	ldr	r3, [r3, #12]
 801556e:	f003 0320 	and.w	r3, r3, #32
 8015572:	2b20      	cmp	r3, #32
 8015574:	d107      	bne.n	8015586 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8015576:	687b      	ldr	r3, [r7, #4]
 8015578:	681b      	ldr	r3, [r3, #0]
 801557a:	f06f 0220 	mvn.w	r2, #32
 801557e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8015580:	6878      	ldr	r0, [r7, #4]
 8015582:	f000 f8c7 	bl	8015714 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8015586:	bf00      	nop
 8015588:	3708      	adds	r7, #8
 801558a:	46bd      	mov	sp, r7
 801558c:	bd80      	pop	{r7, pc}

0801558e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801558e:	b480      	push	{r7}
 8015590:	b083      	sub	sp, #12
 8015592:	af00      	add	r7, sp, #0
 8015594:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8015596:	bf00      	nop
 8015598:	370c      	adds	r7, #12
 801559a:	46bd      	mov	sp, r7
 801559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155a0:	4770      	bx	lr

080155a2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80155a2:	b480      	push	{r7}
 80155a4:	b083      	sub	sp, #12
 80155a6:	af00      	add	r7, sp, #0
 80155a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80155aa:	bf00      	nop
 80155ac:	370c      	adds	r7, #12
 80155ae:	46bd      	mov	sp, r7
 80155b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155b4:	4770      	bx	lr

080155b6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80155b6:	b480      	push	{r7}
 80155b8:	b083      	sub	sp, #12
 80155ba:	af00      	add	r7, sp, #0
 80155bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80155be:	bf00      	nop
 80155c0:	370c      	adds	r7, #12
 80155c2:	46bd      	mov	sp, r7
 80155c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155c8:	4770      	bx	lr

080155ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80155ca:	b480      	push	{r7}
 80155cc:	b083      	sub	sp, #12
 80155ce:	af00      	add	r7, sp, #0
 80155d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80155d2:	bf00      	nop
 80155d4:	370c      	adds	r7, #12
 80155d6:	46bd      	mov	sp, r7
 80155d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155dc:	4770      	bx	lr
	...

080155e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80155e0:	b480      	push	{r7}
 80155e2:	b085      	sub	sp, #20
 80155e4:	af00      	add	r7, sp, #0
 80155e6:	6078      	str	r0, [r7, #4]
 80155e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80155ea:	687b      	ldr	r3, [r7, #4]
 80155ec:	681b      	ldr	r3, [r3, #0]
 80155ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80155f0:	687b      	ldr	r3, [r7, #4]
 80155f2:	4a40      	ldr	r2, [pc, #256]	; (80156f4 <TIM_Base_SetConfig+0x114>)
 80155f4:	4293      	cmp	r3, r2
 80155f6:	d013      	beq.n	8015620 <TIM_Base_SetConfig+0x40>
 80155f8:	687b      	ldr	r3, [r7, #4]
 80155fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80155fe:	d00f      	beq.n	8015620 <TIM_Base_SetConfig+0x40>
 8015600:	687b      	ldr	r3, [r7, #4]
 8015602:	4a3d      	ldr	r2, [pc, #244]	; (80156f8 <TIM_Base_SetConfig+0x118>)
 8015604:	4293      	cmp	r3, r2
 8015606:	d00b      	beq.n	8015620 <TIM_Base_SetConfig+0x40>
 8015608:	687b      	ldr	r3, [r7, #4]
 801560a:	4a3c      	ldr	r2, [pc, #240]	; (80156fc <TIM_Base_SetConfig+0x11c>)
 801560c:	4293      	cmp	r3, r2
 801560e:	d007      	beq.n	8015620 <TIM_Base_SetConfig+0x40>
 8015610:	687b      	ldr	r3, [r7, #4]
 8015612:	4a3b      	ldr	r2, [pc, #236]	; (8015700 <TIM_Base_SetConfig+0x120>)
 8015614:	4293      	cmp	r3, r2
 8015616:	d003      	beq.n	8015620 <TIM_Base_SetConfig+0x40>
 8015618:	687b      	ldr	r3, [r7, #4]
 801561a:	4a3a      	ldr	r2, [pc, #232]	; (8015704 <TIM_Base_SetConfig+0x124>)
 801561c:	4293      	cmp	r3, r2
 801561e:	d108      	bne.n	8015632 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8015620:	68fb      	ldr	r3, [r7, #12]
 8015622:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8015626:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8015628:	683b      	ldr	r3, [r7, #0]
 801562a:	685b      	ldr	r3, [r3, #4]
 801562c:	68fa      	ldr	r2, [r7, #12]
 801562e:	4313      	orrs	r3, r2
 8015630:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8015632:	687b      	ldr	r3, [r7, #4]
 8015634:	4a2f      	ldr	r2, [pc, #188]	; (80156f4 <TIM_Base_SetConfig+0x114>)
 8015636:	4293      	cmp	r3, r2
 8015638:	d01f      	beq.n	801567a <TIM_Base_SetConfig+0x9a>
 801563a:	687b      	ldr	r3, [r7, #4]
 801563c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015640:	d01b      	beq.n	801567a <TIM_Base_SetConfig+0x9a>
 8015642:	687b      	ldr	r3, [r7, #4]
 8015644:	4a2c      	ldr	r2, [pc, #176]	; (80156f8 <TIM_Base_SetConfig+0x118>)
 8015646:	4293      	cmp	r3, r2
 8015648:	d017      	beq.n	801567a <TIM_Base_SetConfig+0x9a>
 801564a:	687b      	ldr	r3, [r7, #4]
 801564c:	4a2b      	ldr	r2, [pc, #172]	; (80156fc <TIM_Base_SetConfig+0x11c>)
 801564e:	4293      	cmp	r3, r2
 8015650:	d013      	beq.n	801567a <TIM_Base_SetConfig+0x9a>
 8015652:	687b      	ldr	r3, [r7, #4]
 8015654:	4a2a      	ldr	r2, [pc, #168]	; (8015700 <TIM_Base_SetConfig+0x120>)
 8015656:	4293      	cmp	r3, r2
 8015658:	d00f      	beq.n	801567a <TIM_Base_SetConfig+0x9a>
 801565a:	687b      	ldr	r3, [r7, #4]
 801565c:	4a29      	ldr	r2, [pc, #164]	; (8015704 <TIM_Base_SetConfig+0x124>)
 801565e:	4293      	cmp	r3, r2
 8015660:	d00b      	beq.n	801567a <TIM_Base_SetConfig+0x9a>
 8015662:	687b      	ldr	r3, [r7, #4]
 8015664:	4a28      	ldr	r2, [pc, #160]	; (8015708 <TIM_Base_SetConfig+0x128>)
 8015666:	4293      	cmp	r3, r2
 8015668:	d007      	beq.n	801567a <TIM_Base_SetConfig+0x9a>
 801566a:	687b      	ldr	r3, [r7, #4]
 801566c:	4a27      	ldr	r2, [pc, #156]	; (801570c <TIM_Base_SetConfig+0x12c>)
 801566e:	4293      	cmp	r3, r2
 8015670:	d003      	beq.n	801567a <TIM_Base_SetConfig+0x9a>
 8015672:	687b      	ldr	r3, [r7, #4]
 8015674:	4a26      	ldr	r2, [pc, #152]	; (8015710 <TIM_Base_SetConfig+0x130>)
 8015676:	4293      	cmp	r3, r2
 8015678:	d108      	bne.n	801568c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801567a:	68fb      	ldr	r3, [r7, #12]
 801567c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8015680:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8015682:	683b      	ldr	r3, [r7, #0]
 8015684:	68db      	ldr	r3, [r3, #12]
 8015686:	68fa      	ldr	r2, [r7, #12]
 8015688:	4313      	orrs	r3, r2
 801568a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801568c:	68fb      	ldr	r3, [r7, #12]
 801568e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8015692:	683b      	ldr	r3, [r7, #0]
 8015694:	695b      	ldr	r3, [r3, #20]
 8015696:	4313      	orrs	r3, r2
 8015698:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801569a:	687b      	ldr	r3, [r7, #4]
 801569c:	68fa      	ldr	r2, [r7, #12]
 801569e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80156a0:	683b      	ldr	r3, [r7, #0]
 80156a2:	689a      	ldr	r2, [r3, #8]
 80156a4:	687b      	ldr	r3, [r7, #4]
 80156a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80156a8:	683b      	ldr	r3, [r7, #0]
 80156aa:	681a      	ldr	r2, [r3, #0]
 80156ac:	687b      	ldr	r3, [r7, #4]
 80156ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80156b0:	687b      	ldr	r3, [r7, #4]
 80156b2:	4a10      	ldr	r2, [pc, #64]	; (80156f4 <TIM_Base_SetConfig+0x114>)
 80156b4:	4293      	cmp	r3, r2
 80156b6:	d00f      	beq.n	80156d8 <TIM_Base_SetConfig+0xf8>
 80156b8:	687b      	ldr	r3, [r7, #4]
 80156ba:	4a12      	ldr	r2, [pc, #72]	; (8015704 <TIM_Base_SetConfig+0x124>)
 80156bc:	4293      	cmp	r3, r2
 80156be:	d00b      	beq.n	80156d8 <TIM_Base_SetConfig+0xf8>
 80156c0:	687b      	ldr	r3, [r7, #4]
 80156c2:	4a11      	ldr	r2, [pc, #68]	; (8015708 <TIM_Base_SetConfig+0x128>)
 80156c4:	4293      	cmp	r3, r2
 80156c6:	d007      	beq.n	80156d8 <TIM_Base_SetConfig+0xf8>
 80156c8:	687b      	ldr	r3, [r7, #4]
 80156ca:	4a10      	ldr	r2, [pc, #64]	; (801570c <TIM_Base_SetConfig+0x12c>)
 80156cc:	4293      	cmp	r3, r2
 80156ce:	d003      	beq.n	80156d8 <TIM_Base_SetConfig+0xf8>
 80156d0:	687b      	ldr	r3, [r7, #4]
 80156d2:	4a0f      	ldr	r2, [pc, #60]	; (8015710 <TIM_Base_SetConfig+0x130>)
 80156d4:	4293      	cmp	r3, r2
 80156d6:	d103      	bne.n	80156e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80156d8:	683b      	ldr	r3, [r7, #0]
 80156da:	691a      	ldr	r2, [r3, #16]
 80156dc:	687b      	ldr	r3, [r7, #4]
 80156de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80156e0:	687b      	ldr	r3, [r7, #4]
 80156e2:	2201      	movs	r2, #1
 80156e4:	615a      	str	r2, [r3, #20]
}
 80156e6:	bf00      	nop
 80156e8:	3714      	adds	r7, #20
 80156ea:	46bd      	mov	sp, r7
 80156ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156f0:	4770      	bx	lr
 80156f2:	bf00      	nop
 80156f4:	40010000 	.word	0x40010000
 80156f8:	40000400 	.word	0x40000400
 80156fc:	40000800 	.word	0x40000800
 8015700:	40000c00 	.word	0x40000c00
 8015704:	40010400 	.word	0x40010400
 8015708:	40014000 	.word	0x40014000
 801570c:	40014400 	.word	0x40014400
 8015710:	40014800 	.word	0x40014800

08015714 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8015714:	b480      	push	{r7}
 8015716:	b083      	sub	sp, #12
 8015718:	af00      	add	r7, sp, #0
 801571a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801571c:	bf00      	nop
 801571e:	370c      	adds	r7, #12
 8015720:	46bd      	mov	sp, r7
 8015722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015726:	4770      	bx	lr

08015728 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8015728:	b480      	push	{r7}
 801572a:	b083      	sub	sp, #12
 801572c:	af00      	add	r7, sp, #0
 801572e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8015730:	bf00      	nop
 8015732:	370c      	adds	r7, #12
 8015734:	46bd      	mov	sp, r7
 8015736:	f85d 7b04 	ldr.w	r7, [sp], #4
 801573a:	4770      	bx	lr

0801573c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 801573c:	b480      	push	{r7}
 801573e:	b083      	sub	sp, #12
 8015740:	af00      	add	r7, sp, #0
 8015742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8015744:	bf00      	nop
 8015746:	370c      	adds	r7, #12
 8015748:	46bd      	mov	sp, r7
 801574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801574e:	4770      	bx	lr

08015750 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8015750:	b480      	push	{r7}
 8015752:	b083      	sub	sp, #12
 8015754:	af00      	add	r7, sp, #0
 8015756:	6078      	str	r0, [r7, #4]
 8015758:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 801575a:	683b      	ldr	r3, [r7, #0]
 801575c:	681b      	ldr	r3, [r3, #0]
 801575e:	2b00      	cmp	r3, #0
 8015760:	d121      	bne.n	80157a6 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8015762:	687b      	ldr	r3, [r7, #4]
 8015764:	681a      	ldr	r2, [r3, #0]
 8015766:	4b27      	ldr	r3, [pc, #156]	; (8015804 <FMC_SDRAM_Init+0xb4>)
 8015768:	4013      	ands	r3, r2
 801576a:	683a      	ldr	r2, [r7, #0]
 801576c:	6851      	ldr	r1, [r2, #4]
 801576e:	683a      	ldr	r2, [r7, #0]
 8015770:	6892      	ldr	r2, [r2, #8]
 8015772:	4311      	orrs	r1, r2
 8015774:	683a      	ldr	r2, [r7, #0]
 8015776:	68d2      	ldr	r2, [r2, #12]
 8015778:	4311      	orrs	r1, r2
 801577a:	683a      	ldr	r2, [r7, #0]
 801577c:	6912      	ldr	r2, [r2, #16]
 801577e:	4311      	orrs	r1, r2
 8015780:	683a      	ldr	r2, [r7, #0]
 8015782:	6952      	ldr	r2, [r2, #20]
 8015784:	4311      	orrs	r1, r2
 8015786:	683a      	ldr	r2, [r7, #0]
 8015788:	6992      	ldr	r2, [r2, #24]
 801578a:	4311      	orrs	r1, r2
 801578c:	683a      	ldr	r2, [r7, #0]
 801578e:	69d2      	ldr	r2, [r2, #28]
 8015790:	4311      	orrs	r1, r2
 8015792:	683a      	ldr	r2, [r7, #0]
 8015794:	6a12      	ldr	r2, [r2, #32]
 8015796:	4311      	orrs	r1, r2
 8015798:	683a      	ldr	r2, [r7, #0]
 801579a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801579c:	430a      	orrs	r2, r1
 801579e:	431a      	orrs	r2, r3
 80157a0:	687b      	ldr	r3, [r7, #4]
 80157a2:	601a      	str	r2, [r3, #0]
 80157a4:	e026      	b.n	80157f4 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80157a6:	687b      	ldr	r3, [r7, #4]
 80157a8:	681b      	ldr	r3, [r3, #0]
 80157aa:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80157ae:	683b      	ldr	r3, [r7, #0]
 80157b0:	69d9      	ldr	r1, [r3, #28]
 80157b2:	683b      	ldr	r3, [r7, #0]
 80157b4:	6a1b      	ldr	r3, [r3, #32]
 80157b6:	4319      	orrs	r1, r3
 80157b8:	683b      	ldr	r3, [r7, #0]
 80157ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80157bc:	430b      	orrs	r3, r1
 80157be:	431a      	orrs	r2, r3
 80157c0:	687b      	ldr	r3, [r7, #4]
 80157c2:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80157c4:	687b      	ldr	r3, [r7, #4]
 80157c6:	685a      	ldr	r2, [r3, #4]
 80157c8:	4b0e      	ldr	r3, [pc, #56]	; (8015804 <FMC_SDRAM_Init+0xb4>)
 80157ca:	4013      	ands	r3, r2
 80157cc:	683a      	ldr	r2, [r7, #0]
 80157ce:	6851      	ldr	r1, [r2, #4]
 80157d0:	683a      	ldr	r2, [r7, #0]
 80157d2:	6892      	ldr	r2, [r2, #8]
 80157d4:	4311      	orrs	r1, r2
 80157d6:	683a      	ldr	r2, [r7, #0]
 80157d8:	68d2      	ldr	r2, [r2, #12]
 80157da:	4311      	orrs	r1, r2
 80157dc:	683a      	ldr	r2, [r7, #0]
 80157de:	6912      	ldr	r2, [r2, #16]
 80157e0:	4311      	orrs	r1, r2
 80157e2:	683a      	ldr	r2, [r7, #0]
 80157e4:	6952      	ldr	r2, [r2, #20]
 80157e6:	4311      	orrs	r1, r2
 80157e8:	683a      	ldr	r2, [r7, #0]
 80157ea:	6992      	ldr	r2, [r2, #24]
 80157ec:	430a      	orrs	r2, r1
 80157ee:	431a      	orrs	r2, r3
 80157f0:	687b      	ldr	r3, [r7, #4]
 80157f2:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 80157f4:	2300      	movs	r3, #0
}
 80157f6:	4618      	mov	r0, r3
 80157f8:	370c      	adds	r7, #12
 80157fa:	46bd      	mov	sp, r7
 80157fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015800:	4770      	bx	lr
 8015802:	bf00      	nop
 8015804:	ffff8000 	.word	0xffff8000

08015808 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8015808:	b480      	push	{r7}
 801580a:	b085      	sub	sp, #20
 801580c:	af00      	add	r7, sp, #0
 801580e:	60f8      	str	r0, [r7, #12]
 8015810:	60b9      	str	r1, [r7, #8]
 8015812:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8015814:	687b      	ldr	r3, [r7, #4]
 8015816:	2b00      	cmp	r3, #0
 8015818:	d128      	bne.n	801586c <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 801581a:	68fb      	ldr	r3, [r7, #12]
 801581c:	689b      	ldr	r3, [r3, #8]
 801581e:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8015822:	68bb      	ldr	r3, [r7, #8]
 8015824:	681b      	ldr	r3, [r3, #0]
 8015826:	1e59      	subs	r1, r3, #1
 8015828:	68bb      	ldr	r3, [r7, #8]
 801582a:	685b      	ldr	r3, [r3, #4]
 801582c:	3b01      	subs	r3, #1
 801582e:	011b      	lsls	r3, r3, #4
 8015830:	4319      	orrs	r1, r3
 8015832:	68bb      	ldr	r3, [r7, #8]
 8015834:	689b      	ldr	r3, [r3, #8]
 8015836:	3b01      	subs	r3, #1
 8015838:	021b      	lsls	r3, r3, #8
 801583a:	4319      	orrs	r1, r3
 801583c:	68bb      	ldr	r3, [r7, #8]
 801583e:	68db      	ldr	r3, [r3, #12]
 8015840:	3b01      	subs	r3, #1
 8015842:	031b      	lsls	r3, r3, #12
 8015844:	4319      	orrs	r1, r3
 8015846:	68bb      	ldr	r3, [r7, #8]
 8015848:	691b      	ldr	r3, [r3, #16]
 801584a:	3b01      	subs	r3, #1
 801584c:	041b      	lsls	r3, r3, #16
 801584e:	4319      	orrs	r1, r3
 8015850:	68bb      	ldr	r3, [r7, #8]
 8015852:	695b      	ldr	r3, [r3, #20]
 8015854:	3b01      	subs	r3, #1
 8015856:	051b      	lsls	r3, r3, #20
 8015858:	4319      	orrs	r1, r3
 801585a:	68bb      	ldr	r3, [r7, #8]
 801585c:	699b      	ldr	r3, [r3, #24]
 801585e:	3b01      	subs	r3, #1
 8015860:	061b      	lsls	r3, r3, #24
 8015862:	430b      	orrs	r3, r1
 8015864:	431a      	orrs	r2, r3
 8015866:	68fb      	ldr	r3, [r7, #12]
 8015868:	609a      	str	r2, [r3, #8]
 801586a:	e02d      	b.n	80158c8 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 801586c:	68fb      	ldr	r3, [r7, #12]
 801586e:	689a      	ldr	r2, [r3, #8]
 8015870:	4b19      	ldr	r3, [pc, #100]	; (80158d8 <FMC_SDRAM_Timing_Init+0xd0>)
 8015872:	4013      	ands	r3, r2
 8015874:	68ba      	ldr	r2, [r7, #8]
 8015876:	68d2      	ldr	r2, [r2, #12]
 8015878:	3a01      	subs	r2, #1
 801587a:	0311      	lsls	r1, r2, #12
 801587c:	68ba      	ldr	r2, [r7, #8]
 801587e:	6952      	ldr	r2, [r2, #20]
 8015880:	3a01      	subs	r2, #1
 8015882:	0512      	lsls	r2, r2, #20
 8015884:	430a      	orrs	r2, r1
 8015886:	431a      	orrs	r2, r3
 8015888:	68fb      	ldr	r3, [r7, #12]
 801588a:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 801588c:	68fb      	ldr	r3, [r7, #12]
 801588e:	68db      	ldr	r3, [r3, #12]
 8015890:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8015894:	68bb      	ldr	r3, [r7, #8]
 8015896:	681b      	ldr	r3, [r3, #0]
 8015898:	1e59      	subs	r1, r3, #1
 801589a:	68bb      	ldr	r3, [r7, #8]
 801589c:	685b      	ldr	r3, [r3, #4]
 801589e:	3b01      	subs	r3, #1
 80158a0:	011b      	lsls	r3, r3, #4
 80158a2:	4319      	orrs	r1, r3
 80158a4:	68bb      	ldr	r3, [r7, #8]
 80158a6:	689b      	ldr	r3, [r3, #8]
 80158a8:	3b01      	subs	r3, #1
 80158aa:	021b      	lsls	r3, r3, #8
 80158ac:	4319      	orrs	r1, r3
 80158ae:	68bb      	ldr	r3, [r7, #8]
 80158b0:	691b      	ldr	r3, [r3, #16]
 80158b2:	3b01      	subs	r3, #1
 80158b4:	041b      	lsls	r3, r3, #16
 80158b6:	4319      	orrs	r1, r3
 80158b8:	68bb      	ldr	r3, [r7, #8]
 80158ba:	699b      	ldr	r3, [r3, #24]
 80158bc:	3b01      	subs	r3, #1
 80158be:	061b      	lsls	r3, r3, #24
 80158c0:	430b      	orrs	r3, r1
 80158c2:	431a      	orrs	r2, r3
 80158c4:	68fb      	ldr	r3, [r7, #12]
 80158c6:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 80158c8:	2300      	movs	r3, #0
}
 80158ca:	4618      	mov	r0, r3
 80158cc:	3714      	adds	r7, #20
 80158ce:	46bd      	mov	sp, r7
 80158d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158d4:	4770      	bx	lr
 80158d6:	bf00      	nop
 80158d8:	ff0f0fff 	.word	0xff0f0fff

080158dc <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80158dc:	b480      	push	{r7}
 80158de:	b085      	sub	sp, #20
 80158e0:	af00      	add	r7, sp, #0
 80158e2:	60f8      	str	r0, [r7, #12]
 80158e4:	60b9      	str	r1, [r7, #8]
 80158e6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 80158e8:	68fb      	ldr	r3, [r7, #12]
 80158ea:	691a      	ldr	r2, [r3, #16]
 80158ec:	4b0c      	ldr	r3, [pc, #48]	; (8015920 <FMC_SDRAM_SendCommand+0x44>)
 80158ee:	4013      	ands	r3, r2
 80158f0:	68ba      	ldr	r2, [r7, #8]
 80158f2:	6811      	ldr	r1, [r2, #0]
 80158f4:	68ba      	ldr	r2, [r7, #8]
 80158f6:	6852      	ldr	r2, [r2, #4]
 80158f8:	4311      	orrs	r1, r2
 80158fa:	68ba      	ldr	r2, [r7, #8]
 80158fc:	6892      	ldr	r2, [r2, #8]
 80158fe:	3a01      	subs	r2, #1
 8015900:	0152      	lsls	r2, r2, #5
 8015902:	4311      	orrs	r1, r2
 8015904:	68ba      	ldr	r2, [r7, #8]
 8015906:	68d2      	ldr	r2, [r2, #12]
 8015908:	0252      	lsls	r2, r2, #9
 801590a:	430a      	orrs	r2, r1
 801590c:	431a      	orrs	r2, r3
 801590e:	68fb      	ldr	r3, [r7, #12]
 8015910:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 8015912:	2300      	movs	r3, #0
}
 8015914:	4618      	mov	r0, r3
 8015916:	3714      	adds	r7, #20
 8015918:	46bd      	mov	sp, r7
 801591a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801591e:	4770      	bx	lr
 8015920:	ffc00000 	.word	0xffc00000

08015924 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8015924:	b480      	push	{r7}
 8015926:	b083      	sub	sp, #12
 8015928:	af00      	add	r7, sp, #0
 801592a:	6078      	str	r0, [r7, #4]
 801592c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 801592e:	687b      	ldr	r3, [r7, #4]
 8015930:	695a      	ldr	r2, [r3, #20]
 8015932:	4b07      	ldr	r3, [pc, #28]	; (8015950 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 8015934:	4013      	ands	r3, r2
 8015936:	683a      	ldr	r2, [r7, #0]
 8015938:	0052      	lsls	r2, r2, #1
 801593a:	431a      	orrs	r2, r3
 801593c:	687b      	ldr	r3, [r7, #4]
 801593e:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8015940:	2300      	movs	r3, #0
}
 8015942:	4618      	mov	r0, r3
 8015944:	370c      	adds	r7, #12
 8015946:	46bd      	mov	sp, r7
 8015948:	f85d 7b04 	ldr.w	r7, [sp], #4
 801594c:	4770      	bx	lr
 801594e:	bf00      	nop
 8015950:	ffffc001 	.word	0xffffc001

08015954 <__NVIC_SetPriority>:
{
 8015954:	b480      	push	{r7}
 8015956:	b083      	sub	sp, #12
 8015958:	af00      	add	r7, sp, #0
 801595a:	4603      	mov	r3, r0
 801595c:	6039      	str	r1, [r7, #0]
 801595e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8015960:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015964:	2b00      	cmp	r3, #0
 8015966:	db0a      	blt.n	801597e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8015968:	683b      	ldr	r3, [r7, #0]
 801596a:	b2da      	uxtb	r2, r3
 801596c:	490c      	ldr	r1, [pc, #48]	; (80159a0 <__NVIC_SetPriority+0x4c>)
 801596e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015972:	0112      	lsls	r2, r2, #4
 8015974:	b2d2      	uxtb	r2, r2
 8015976:	440b      	add	r3, r1
 8015978:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 801597c:	e00a      	b.n	8015994 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801597e:	683b      	ldr	r3, [r7, #0]
 8015980:	b2da      	uxtb	r2, r3
 8015982:	4908      	ldr	r1, [pc, #32]	; (80159a4 <__NVIC_SetPriority+0x50>)
 8015984:	88fb      	ldrh	r3, [r7, #6]
 8015986:	f003 030f 	and.w	r3, r3, #15
 801598a:	3b04      	subs	r3, #4
 801598c:	0112      	lsls	r2, r2, #4
 801598e:	b2d2      	uxtb	r2, r2
 8015990:	440b      	add	r3, r1
 8015992:	761a      	strb	r2, [r3, #24]
}
 8015994:	bf00      	nop
 8015996:	370c      	adds	r7, #12
 8015998:	46bd      	mov	sp, r7
 801599a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801599e:	4770      	bx	lr
 80159a0:	e000e100 	.word	0xe000e100
 80159a4:	e000ed00 	.word	0xe000ed00

080159a8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80159a8:	b580      	push	{r7, lr}
 80159aa:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80159ac:	4b05      	ldr	r3, [pc, #20]	; (80159c4 <SysTick_Handler+0x1c>)
 80159ae:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80159b0:	f003 f8d0 	bl	8018b54 <xTaskGetSchedulerState>
 80159b4:	4603      	mov	r3, r0
 80159b6:	2b01      	cmp	r3, #1
 80159b8:	d001      	beq.n	80159be <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80159ba:	f001 f8f5 	bl	8016ba8 <xPortSysTickHandler>
  }
}
 80159be:	bf00      	nop
 80159c0:	bd80      	pop	{r7, pc}
 80159c2:	bf00      	nop
 80159c4:	e000e010 	.word	0xe000e010

080159c8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80159c8:	b580      	push	{r7, lr}
 80159ca:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80159cc:	2100      	movs	r1, #0
 80159ce:	f06f 0004 	mvn.w	r0, #4
 80159d2:	f7ff ffbf 	bl	8015954 <__NVIC_SetPriority>
#endif
}
 80159d6:	bf00      	nop
 80159d8:	bd80      	pop	{r7, pc}
	...

080159dc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80159dc:	b480      	push	{r7}
 80159de:	b083      	sub	sp, #12
 80159e0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80159e2:	f3ef 8305 	mrs	r3, IPSR
 80159e6:	603b      	str	r3, [r7, #0]
  return(result);
 80159e8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80159ea:	2b00      	cmp	r3, #0
 80159ec:	d003      	beq.n	80159f6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80159ee:	f06f 0305 	mvn.w	r3, #5
 80159f2:	607b      	str	r3, [r7, #4]
 80159f4:	e00c      	b.n	8015a10 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80159f6:	4b0a      	ldr	r3, [pc, #40]	; (8015a20 <osKernelInitialize+0x44>)
 80159f8:	681b      	ldr	r3, [r3, #0]
 80159fa:	2b00      	cmp	r3, #0
 80159fc:	d105      	bne.n	8015a0a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80159fe:	4b08      	ldr	r3, [pc, #32]	; (8015a20 <osKernelInitialize+0x44>)
 8015a00:	2201      	movs	r2, #1
 8015a02:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8015a04:	2300      	movs	r3, #0
 8015a06:	607b      	str	r3, [r7, #4]
 8015a08:	e002      	b.n	8015a10 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8015a0a:	f04f 33ff 	mov.w	r3, #4294967295
 8015a0e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8015a10:	687b      	ldr	r3, [r7, #4]
}
 8015a12:	4618      	mov	r0, r3
 8015a14:	370c      	adds	r7, #12
 8015a16:	46bd      	mov	sp, r7
 8015a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a1c:	4770      	bx	lr
 8015a1e:	bf00      	nop
 8015a20:	2400bdfc 	.word	0x2400bdfc

08015a24 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8015a24:	b580      	push	{r7, lr}
 8015a26:	b082      	sub	sp, #8
 8015a28:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015a2a:	f3ef 8305 	mrs	r3, IPSR
 8015a2e:	603b      	str	r3, [r7, #0]
  return(result);
 8015a30:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8015a32:	2b00      	cmp	r3, #0
 8015a34:	d003      	beq.n	8015a3e <osKernelStart+0x1a>
    stat = osErrorISR;
 8015a36:	f06f 0305 	mvn.w	r3, #5
 8015a3a:	607b      	str	r3, [r7, #4]
 8015a3c:	e010      	b.n	8015a60 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8015a3e:	4b0b      	ldr	r3, [pc, #44]	; (8015a6c <osKernelStart+0x48>)
 8015a40:	681b      	ldr	r3, [r3, #0]
 8015a42:	2b01      	cmp	r3, #1
 8015a44:	d109      	bne.n	8015a5a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8015a46:	f7ff ffbf 	bl	80159c8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8015a4a:	4b08      	ldr	r3, [pc, #32]	; (8015a6c <osKernelStart+0x48>)
 8015a4c:	2202      	movs	r2, #2
 8015a4e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8015a50:	f002 fbd6 	bl	8018200 <vTaskStartScheduler>
      stat = osOK;
 8015a54:	2300      	movs	r3, #0
 8015a56:	607b      	str	r3, [r7, #4]
 8015a58:	e002      	b.n	8015a60 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8015a5a:	f04f 33ff 	mov.w	r3, #4294967295
 8015a5e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8015a60:	687b      	ldr	r3, [r7, #4]
}
 8015a62:	4618      	mov	r0, r3
 8015a64:	3708      	adds	r7, #8
 8015a66:	46bd      	mov	sp, r7
 8015a68:	bd80      	pop	{r7, pc}
 8015a6a:	bf00      	nop
 8015a6c:	2400bdfc 	.word	0x2400bdfc

08015a70 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8015a70:	b580      	push	{r7, lr}
 8015a72:	b08e      	sub	sp, #56	; 0x38
 8015a74:	af04      	add	r7, sp, #16
 8015a76:	60f8      	str	r0, [r7, #12]
 8015a78:	60b9      	str	r1, [r7, #8]
 8015a7a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8015a7c:	2300      	movs	r3, #0
 8015a7e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015a80:	f3ef 8305 	mrs	r3, IPSR
 8015a84:	617b      	str	r3, [r7, #20]
  return(result);
 8015a86:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8015a88:	2b00      	cmp	r3, #0
 8015a8a:	d17e      	bne.n	8015b8a <osThreadNew+0x11a>
 8015a8c:	68fb      	ldr	r3, [r7, #12]
 8015a8e:	2b00      	cmp	r3, #0
 8015a90:	d07b      	beq.n	8015b8a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8015a92:	2380      	movs	r3, #128	; 0x80
 8015a94:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8015a96:	2318      	movs	r3, #24
 8015a98:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8015a9a:	2300      	movs	r3, #0
 8015a9c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8015a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8015aa2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8015aa4:	687b      	ldr	r3, [r7, #4]
 8015aa6:	2b00      	cmp	r3, #0
 8015aa8:	d045      	beq.n	8015b36 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8015aaa:	687b      	ldr	r3, [r7, #4]
 8015aac:	681b      	ldr	r3, [r3, #0]
 8015aae:	2b00      	cmp	r3, #0
 8015ab0:	d002      	beq.n	8015ab8 <osThreadNew+0x48>
        name = attr->name;
 8015ab2:	687b      	ldr	r3, [r7, #4]
 8015ab4:	681b      	ldr	r3, [r3, #0]
 8015ab6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8015ab8:	687b      	ldr	r3, [r7, #4]
 8015aba:	699b      	ldr	r3, [r3, #24]
 8015abc:	2b00      	cmp	r3, #0
 8015abe:	d002      	beq.n	8015ac6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8015ac0:	687b      	ldr	r3, [r7, #4]
 8015ac2:	699b      	ldr	r3, [r3, #24]
 8015ac4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8015ac6:	69fb      	ldr	r3, [r7, #28]
 8015ac8:	2b00      	cmp	r3, #0
 8015aca:	d008      	beq.n	8015ade <osThreadNew+0x6e>
 8015acc:	69fb      	ldr	r3, [r7, #28]
 8015ace:	2b38      	cmp	r3, #56	; 0x38
 8015ad0:	d805      	bhi.n	8015ade <osThreadNew+0x6e>
 8015ad2:	687b      	ldr	r3, [r7, #4]
 8015ad4:	685b      	ldr	r3, [r3, #4]
 8015ad6:	f003 0301 	and.w	r3, r3, #1
 8015ada:	2b00      	cmp	r3, #0
 8015adc:	d001      	beq.n	8015ae2 <osThreadNew+0x72>
        return (NULL);
 8015ade:	2300      	movs	r3, #0
 8015ae0:	e054      	b.n	8015b8c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8015ae2:	687b      	ldr	r3, [r7, #4]
 8015ae4:	695b      	ldr	r3, [r3, #20]
 8015ae6:	2b00      	cmp	r3, #0
 8015ae8:	d003      	beq.n	8015af2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8015aea:	687b      	ldr	r3, [r7, #4]
 8015aec:	695b      	ldr	r3, [r3, #20]
 8015aee:	089b      	lsrs	r3, r3, #2
 8015af0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8015af2:	687b      	ldr	r3, [r7, #4]
 8015af4:	689b      	ldr	r3, [r3, #8]
 8015af6:	2b00      	cmp	r3, #0
 8015af8:	d00e      	beq.n	8015b18 <osThreadNew+0xa8>
 8015afa:	687b      	ldr	r3, [r7, #4]
 8015afc:	68db      	ldr	r3, [r3, #12]
 8015afe:	2b5f      	cmp	r3, #95	; 0x5f
 8015b00:	d90a      	bls.n	8015b18 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8015b02:	687b      	ldr	r3, [r7, #4]
 8015b04:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8015b06:	2b00      	cmp	r3, #0
 8015b08:	d006      	beq.n	8015b18 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8015b0a:	687b      	ldr	r3, [r7, #4]
 8015b0c:	695b      	ldr	r3, [r3, #20]
 8015b0e:	2b00      	cmp	r3, #0
 8015b10:	d002      	beq.n	8015b18 <osThreadNew+0xa8>
        mem = 1;
 8015b12:	2301      	movs	r3, #1
 8015b14:	61bb      	str	r3, [r7, #24]
 8015b16:	e010      	b.n	8015b3a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8015b18:	687b      	ldr	r3, [r7, #4]
 8015b1a:	689b      	ldr	r3, [r3, #8]
 8015b1c:	2b00      	cmp	r3, #0
 8015b1e:	d10c      	bne.n	8015b3a <osThreadNew+0xca>
 8015b20:	687b      	ldr	r3, [r7, #4]
 8015b22:	68db      	ldr	r3, [r3, #12]
 8015b24:	2b00      	cmp	r3, #0
 8015b26:	d108      	bne.n	8015b3a <osThreadNew+0xca>
 8015b28:	687b      	ldr	r3, [r7, #4]
 8015b2a:	691b      	ldr	r3, [r3, #16]
 8015b2c:	2b00      	cmp	r3, #0
 8015b2e:	d104      	bne.n	8015b3a <osThreadNew+0xca>
          mem = 0;
 8015b30:	2300      	movs	r3, #0
 8015b32:	61bb      	str	r3, [r7, #24]
 8015b34:	e001      	b.n	8015b3a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8015b36:	2300      	movs	r3, #0
 8015b38:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8015b3a:	69bb      	ldr	r3, [r7, #24]
 8015b3c:	2b01      	cmp	r3, #1
 8015b3e:	d110      	bne.n	8015b62 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8015b40:	687b      	ldr	r3, [r7, #4]
 8015b42:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8015b44:	687a      	ldr	r2, [r7, #4]
 8015b46:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8015b48:	9202      	str	r2, [sp, #8]
 8015b4a:	9301      	str	r3, [sp, #4]
 8015b4c:	69fb      	ldr	r3, [r7, #28]
 8015b4e:	9300      	str	r3, [sp, #0]
 8015b50:	68bb      	ldr	r3, [r7, #8]
 8015b52:	6a3a      	ldr	r2, [r7, #32]
 8015b54:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015b56:	68f8      	ldr	r0, [r7, #12]
 8015b58:	f002 f97a 	bl	8017e50 <xTaskCreateStatic>
 8015b5c:	4603      	mov	r3, r0
 8015b5e:	613b      	str	r3, [r7, #16]
 8015b60:	e013      	b.n	8015b8a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8015b62:	69bb      	ldr	r3, [r7, #24]
 8015b64:	2b00      	cmp	r3, #0
 8015b66:	d110      	bne.n	8015b8a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8015b68:	6a3b      	ldr	r3, [r7, #32]
 8015b6a:	b29a      	uxth	r2, r3
 8015b6c:	f107 0310 	add.w	r3, r7, #16
 8015b70:	9301      	str	r3, [sp, #4]
 8015b72:	69fb      	ldr	r3, [r7, #28]
 8015b74:	9300      	str	r3, [sp, #0]
 8015b76:	68bb      	ldr	r3, [r7, #8]
 8015b78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015b7a:	68f8      	ldr	r0, [r7, #12]
 8015b7c:	f002 f9c5 	bl	8017f0a <xTaskCreate>
 8015b80:	4603      	mov	r3, r0
 8015b82:	2b01      	cmp	r3, #1
 8015b84:	d001      	beq.n	8015b8a <osThreadNew+0x11a>
            hTask = NULL;
 8015b86:	2300      	movs	r3, #0
 8015b88:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8015b8a:	693b      	ldr	r3, [r7, #16]
}
 8015b8c:	4618      	mov	r0, r3
 8015b8e:	3728      	adds	r7, #40	; 0x28
 8015b90:	46bd      	mov	sp, r7
 8015b92:	bd80      	pop	{r7, pc}

08015b94 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8015b94:	b580      	push	{r7, lr}
 8015b96:	b084      	sub	sp, #16
 8015b98:	af00      	add	r7, sp, #0
 8015b9a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015b9c:	f3ef 8305 	mrs	r3, IPSR
 8015ba0:	60bb      	str	r3, [r7, #8]
  return(result);
 8015ba2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8015ba4:	2b00      	cmp	r3, #0
 8015ba6:	d003      	beq.n	8015bb0 <osDelay+0x1c>
    stat = osErrorISR;
 8015ba8:	f06f 0305 	mvn.w	r3, #5
 8015bac:	60fb      	str	r3, [r7, #12]
 8015bae:	e007      	b.n	8015bc0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8015bb0:	2300      	movs	r3, #0
 8015bb2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8015bb4:	687b      	ldr	r3, [r7, #4]
 8015bb6:	2b00      	cmp	r3, #0
 8015bb8:	d002      	beq.n	8015bc0 <osDelay+0x2c>
      vTaskDelay(ticks);
 8015bba:	6878      	ldr	r0, [r7, #4]
 8015bbc:	f002 faec 	bl	8018198 <vTaskDelay>
    }
  }

  return (stat);
 8015bc0:	68fb      	ldr	r3, [r7, #12]
}
 8015bc2:	4618      	mov	r0, r3
 8015bc4:	3710      	adds	r7, #16
 8015bc6:	46bd      	mov	sp, r7
 8015bc8:	bd80      	pop	{r7, pc}

08015bca <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8015bca:	b580      	push	{r7, lr}
 8015bcc:	b088      	sub	sp, #32
 8015bce:	af00      	add	r7, sp, #0
 8015bd0:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8015bd2:	2300      	movs	r3, #0
 8015bd4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015bd6:	f3ef 8305 	mrs	r3, IPSR
 8015bda:	60bb      	str	r3, [r7, #8]
  return(result);
 8015bdc:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8015bde:	2b00      	cmp	r3, #0
 8015be0:	d174      	bne.n	8015ccc <osMutexNew+0x102>
    if (attr != NULL) {
 8015be2:	687b      	ldr	r3, [r7, #4]
 8015be4:	2b00      	cmp	r3, #0
 8015be6:	d003      	beq.n	8015bf0 <osMutexNew+0x26>
      type = attr->attr_bits;
 8015be8:	687b      	ldr	r3, [r7, #4]
 8015bea:	685b      	ldr	r3, [r3, #4]
 8015bec:	61bb      	str	r3, [r7, #24]
 8015bee:	e001      	b.n	8015bf4 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8015bf0:	2300      	movs	r3, #0
 8015bf2:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8015bf4:	69bb      	ldr	r3, [r7, #24]
 8015bf6:	f003 0301 	and.w	r3, r3, #1
 8015bfa:	2b00      	cmp	r3, #0
 8015bfc:	d002      	beq.n	8015c04 <osMutexNew+0x3a>
      rmtx = 1U;
 8015bfe:	2301      	movs	r3, #1
 8015c00:	617b      	str	r3, [r7, #20]
 8015c02:	e001      	b.n	8015c08 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8015c04:	2300      	movs	r3, #0
 8015c06:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8015c08:	69bb      	ldr	r3, [r7, #24]
 8015c0a:	f003 0308 	and.w	r3, r3, #8
 8015c0e:	2b00      	cmp	r3, #0
 8015c10:	d15c      	bne.n	8015ccc <osMutexNew+0x102>
      mem = -1;
 8015c12:	f04f 33ff 	mov.w	r3, #4294967295
 8015c16:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8015c18:	687b      	ldr	r3, [r7, #4]
 8015c1a:	2b00      	cmp	r3, #0
 8015c1c:	d015      	beq.n	8015c4a <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8015c1e:	687b      	ldr	r3, [r7, #4]
 8015c20:	689b      	ldr	r3, [r3, #8]
 8015c22:	2b00      	cmp	r3, #0
 8015c24:	d006      	beq.n	8015c34 <osMutexNew+0x6a>
 8015c26:	687b      	ldr	r3, [r7, #4]
 8015c28:	68db      	ldr	r3, [r3, #12]
 8015c2a:	2b4f      	cmp	r3, #79	; 0x4f
 8015c2c:	d902      	bls.n	8015c34 <osMutexNew+0x6a>
          mem = 1;
 8015c2e:	2301      	movs	r3, #1
 8015c30:	613b      	str	r3, [r7, #16]
 8015c32:	e00c      	b.n	8015c4e <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8015c34:	687b      	ldr	r3, [r7, #4]
 8015c36:	689b      	ldr	r3, [r3, #8]
 8015c38:	2b00      	cmp	r3, #0
 8015c3a:	d108      	bne.n	8015c4e <osMutexNew+0x84>
 8015c3c:	687b      	ldr	r3, [r7, #4]
 8015c3e:	68db      	ldr	r3, [r3, #12]
 8015c40:	2b00      	cmp	r3, #0
 8015c42:	d104      	bne.n	8015c4e <osMutexNew+0x84>
            mem = 0;
 8015c44:	2300      	movs	r3, #0
 8015c46:	613b      	str	r3, [r7, #16]
 8015c48:	e001      	b.n	8015c4e <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8015c4a:	2300      	movs	r3, #0
 8015c4c:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8015c4e:	693b      	ldr	r3, [r7, #16]
 8015c50:	2b01      	cmp	r3, #1
 8015c52:	d112      	bne.n	8015c7a <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8015c54:	697b      	ldr	r3, [r7, #20]
 8015c56:	2b00      	cmp	r3, #0
 8015c58:	d007      	beq.n	8015c6a <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8015c5a:	687b      	ldr	r3, [r7, #4]
 8015c5c:	689b      	ldr	r3, [r3, #8]
 8015c5e:	4619      	mov	r1, r3
 8015c60:	2004      	movs	r0, #4
 8015c62:	f001 f9a0 	bl	8016fa6 <xQueueCreateMutexStatic>
 8015c66:	61f8      	str	r0, [r7, #28]
 8015c68:	e016      	b.n	8015c98 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8015c6a:	687b      	ldr	r3, [r7, #4]
 8015c6c:	689b      	ldr	r3, [r3, #8]
 8015c6e:	4619      	mov	r1, r3
 8015c70:	2001      	movs	r0, #1
 8015c72:	f001 f998 	bl	8016fa6 <xQueueCreateMutexStatic>
 8015c76:	61f8      	str	r0, [r7, #28]
 8015c78:	e00e      	b.n	8015c98 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8015c7a:	693b      	ldr	r3, [r7, #16]
 8015c7c:	2b00      	cmp	r3, #0
 8015c7e:	d10b      	bne.n	8015c98 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8015c80:	697b      	ldr	r3, [r7, #20]
 8015c82:	2b00      	cmp	r3, #0
 8015c84:	d004      	beq.n	8015c90 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8015c86:	2004      	movs	r0, #4
 8015c88:	f001 f975 	bl	8016f76 <xQueueCreateMutex>
 8015c8c:	61f8      	str	r0, [r7, #28]
 8015c8e:	e003      	b.n	8015c98 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8015c90:	2001      	movs	r0, #1
 8015c92:	f001 f970 	bl	8016f76 <xQueueCreateMutex>
 8015c96:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8015c98:	69fb      	ldr	r3, [r7, #28]
 8015c9a:	2b00      	cmp	r3, #0
 8015c9c:	d00c      	beq.n	8015cb8 <osMutexNew+0xee>
        if (attr != NULL) {
 8015c9e:	687b      	ldr	r3, [r7, #4]
 8015ca0:	2b00      	cmp	r3, #0
 8015ca2:	d003      	beq.n	8015cac <osMutexNew+0xe2>
          name = attr->name;
 8015ca4:	687b      	ldr	r3, [r7, #4]
 8015ca6:	681b      	ldr	r3, [r3, #0]
 8015ca8:	60fb      	str	r3, [r7, #12]
 8015caa:	e001      	b.n	8015cb0 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8015cac:	2300      	movs	r3, #0
 8015cae:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8015cb0:	68f9      	ldr	r1, [r7, #12]
 8015cb2:	69f8      	ldr	r0, [r7, #28]
 8015cb4:	f002 f844 	bl	8017d40 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8015cb8:	69fb      	ldr	r3, [r7, #28]
 8015cba:	2b00      	cmp	r3, #0
 8015cbc:	d006      	beq.n	8015ccc <osMutexNew+0x102>
 8015cbe:	697b      	ldr	r3, [r7, #20]
 8015cc0:	2b00      	cmp	r3, #0
 8015cc2:	d003      	beq.n	8015ccc <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8015cc4:	69fb      	ldr	r3, [r7, #28]
 8015cc6:	f043 0301 	orr.w	r3, r3, #1
 8015cca:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8015ccc:	69fb      	ldr	r3, [r7, #28]
}
 8015cce:	4618      	mov	r0, r3
 8015cd0:	3720      	adds	r7, #32
 8015cd2:	46bd      	mov	sp, r7
 8015cd4:	bd80      	pop	{r7, pc}

08015cd6 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8015cd6:	b580      	push	{r7, lr}
 8015cd8:	b086      	sub	sp, #24
 8015cda:	af00      	add	r7, sp, #0
 8015cdc:	6078      	str	r0, [r7, #4]
 8015cde:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8015ce0:	687b      	ldr	r3, [r7, #4]
 8015ce2:	f023 0301 	bic.w	r3, r3, #1
 8015ce6:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8015ce8:	687b      	ldr	r3, [r7, #4]
 8015cea:	f003 0301 	and.w	r3, r3, #1
 8015cee:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8015cf0:	2300      	movs	r3, #0
 8015cf2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015cf4:	f3ef 8305 	mrs	r3, IPSR
 8015cf8:	60bb      	str	r3, [r7, #8]
  return(result);
 8015cfa:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8015cfc:	2b00      	cmp	r3, #0
 8015cfe:	d003      	beq.n	8015d08 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8015d00:	f06f 0305 	mvn.w	r3, #5
 8015d04:	617b      	str	r3, [r7, #20]
 8015d06:	e02c      	b.n	8015d62 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8015d08:	693b      	ldr	r3, [r7, #16]
 8015d0a:	2b00      	cmp	r3, #0
 8015d0c:	d103      	bne.n	8015d16 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8015d0e:	f06f 0303 	mvn.w	r3, #3
 8015d12:	617b      	str	r3, [r7, #20]
 8015d14:	e025      	b.n	8015d62 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8015d16:	68fb      	ldr	r3, [r7, #12]
 8015d18:	2b00      	cmp	r3, #0
 8015d1a:	d011      	beq.n	8015d40 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8015d1c:	6839      	ldr	r1, [r7, #0]
 8015d1e:	6938      	ldr	r0, [r7, #16]
 8015d20:	f001 f990 	bl	8017044 <xQueueTakeMutexRecursive>
 8015d24:	4603      	mov	r3, r0
 8015d26:	2b01      	cmp	r3, #1
 8015d28:	d01b      	beq.n	8015d62 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8015d2a:	683b      	ldr	r3, [r7, #0]
 8015d2c:	2b00      	cmp	r3, #0
 8015d2e:	d003      	beq.n	8015d38 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8015d30:	f06f 0301 	mvn.w	r3, #1
 8015d34:	617b      	str	r3, [r7, #20]
 8015d36:	e014      	b.n	8015d62 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8015d38:	f06f 0302 	mvn.w	r3, #2
 8015d3c:	617b      	str	r3, [r7, #20]
 8015d3e:	e010      	b.n	8015d62 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8015d40:	6839      	ldr	r1, [r7, #0]
 8015d42:	6938      	ldr	r0, [r7, #16]
 8015d44:	f001 fd24 	bl	8017790 <xQueueSemaphoreTake>
 8015d48:	4603      	mov	r3, r0
 8015d4a:	2b01      	cmp	r3, #1
 8015d4c:	d009      	beq.n	8015d62 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8015d4e:	683b      	ldr	r3, [r7, #0]
 8015d50:	2b00      	cmp	r3, #0
 8015d52:	d003      	beq.n	8015d5c <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8015d54:	f06f 0301 	mvn.w	r3, #1
 8015d58:	617b      	str	r3, [r7, #20]
 8015d5a:	e002      	b.n	8015d62 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8015d5c:	f06f 0302 	mvn.w	r3, #2
 8015d60:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8015d62:	697b      	ldr	r3, [r7, #20]
}
 8015d64:	4618      	mov	r0, r3
 8015d66:	3718      	adds	r7, #24
 8015d68:	46bd      	mov	sp, r7
 8015d6a:	bd80      	pop	{r7, pc}

08015d6c <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8015d6c:	b580      	push	{r7, lr}
 8015d6e:	b086      	sub	sp, #24
 8015d70:	af00      	add	r7, sp, #0
 8015d72:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8015d74:	687b      	ldr	r3, [r7, #4]
 8015d76:	f023 0301 	bic.w	r3, r3, #1
 8015d7a:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8015d7c:	687b      	ldr	r3, [r7, #4]
 8015d7e:	f003 0301 	and.w	r3, r3, #1
 8015d82:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8015d84:	2300      	movs	r3, #0
 8015d86:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015d88:	f3ef 8305 	mrs	r3, IPSR
 8015d8c:	60bb      	str	r3, [r7, #8]
  return(result);
 8015d8e:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8015d90:	2b00      	cmp	r3, #0
 8015d92:	d003      	beq.n	8015d9c <osMutexRelease+0x30>
    stat = osErrorISR;
 8015d94:	f06f 0305 	mvn.w	r3, #5
 8015d98:	617b      	str	r3, [r7, #20]
 8015d9a:	e01f      	b.n	8015ddc <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8015d9c:	693b      	ldr	r3, [r7, #16]
 8015d9e:	2b00      	cmp	r3, #0
 8015da0:	d103      	bne.n	8015daa <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8015da2:	f06f 0303 	mvn.w	r3, #3
 8015da6:	617b      	str	r3, [r7, #20]
 8015da8:	e018      	b.n	8015ddc <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8015daa:	68fb      	ldr	r3, [r7, #12]
 8015dac:	2b00      	cmp	r3, #0
 8015dae:	d009      	beq.n	8015dc4 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8015db0:	6938      	ldr	r0, [r7, #16]
 8015db2:	f001 f913 	bl	8016fdc <xQueueGiveMutexRecursive>
 8015db6:	4603      	mov	r3, r0
 8015db8:	2b01      	cmp	r3, #1
 8015dba:	d00f      	beq.n	8015ddc <osMutexRelease+0x70>
        stat = osErrorResource;
 8015dbc:	f06f 0302 	mvn.w	r3, #2
 8015dc0:	617b      	str	r3, [r7, #20]
 8015dc2:	e00b      	b.n	8015ddc <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8015dc4:	2300      	movs	r3, #0
 8015dc6:	2200      	movs	r2, #0
 8015dc8:	2100      	movs	r1, #0
 8015dca:	6938      	ldr	r0, [r7, #16]
 8015dcc:	f001 f9da 	bl	8017184 <xQueueGenericSend>
 8015dd0:	4603      	mov	r3, r0
 8015dd2:	2b01      	cmp	r3, #1
 8015dd4:	d002      	beq.n	8015ddc <osMutexRelease+0x70>
        stat = osErrorResource;
 8015dd6:	f06f 0302 	mvn.w	r3, #2
 8015dda:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8015ddc:	697b      	ldr	r3, [r7, #20]
}
 8015dde:	4618      	mov	r0, r3
 8015de0:	3718      	adds	r7, #24
 8015de2:	46bd      	mov	sp, r7
 8015de4:	bd80      	pop	{r7, pc}

08015de6 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8015de6:	b580      	push	{r7, lr}
 8015de8:	b08a      	sub	sp, #40	; 0x28
 8015dea:	af02      	add	r7, sp, #8
 8015dec:	60f8      	str	r0, [r7, #12]
 8015dee:	60b9      	str	r1, [r7, #8]
 8015df0:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8015df2:	2300      	movs	r3, #0
 8015df4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015df6:	f3ef 8305 	mrs	r3, IPSR
 8015dfa:	613b      	str	r3, [r7, #16]
  return(result);
 8015dfc:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8015dfe:	2b00      	cmp	r3, #0
 8015e00:	d175      	bne.n	8015eee <osSemaphoreNew+0x108>
 8015e02:	68fb      	ldr	r3, [r7, #12]
 8015e04:	2b00      	cmp	r3, #0
 8015e06:	d072      	beq.n	8015eee <osSemaphoreNew+0x108>
 8015e08:	68ba      	ldr	r2, [r7, #8]
 8015e0a:	68fb      	ldr	r3, [r7, #12]
 8015e0c:	429a      	cmp	r2, r3
 8015e0e:	d86e      	bhi.n	8015eee <osSemaphoreNew+0x108>
    mem = -1;
 8015e10:	f04f 33ff 	mov.w	r3, #4294967295
 8015e14:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8015e16:	687b      	ldr	r3, [r7, #4]
 8015e18:	2b00      	cmp	r3, #0
 8015e1a:	d015      	beq.n	8015e48 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8015e1c:	687b      	ldr	r3, [r7, #4]
 8015e1e:	689b      	ldr	r3, [r3, #8]
 8015e20:	2b00      	cmp	r3, #0
 8015e22:	d006      	beq.n	8015e32 <osSemaphoreNew+0x4c>
 8015e24:	687b      	ldr	r3, [r7, #4]
 8015e26:	68db      	ldr	r3, [r3, #12]
 8015e28:	2b4f      	cmp	r3, #79	; 0x4f
 8015e2a:	d902      	bls.n	8015e32 <osSemaphoreNew+0x4c>
        mem = 1;
 8015e2c:	2301      	movs	r3, #1
 8015e2e:	61bb      	str	r3, [r7, #24]
 8015e30:	e00c      	b.n	8015e4c <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8015e32:	687b      	ldr	r3, [r7, #4]
 8015e34:	689b      	ldr	r3, [r3, #8]
 8015e36:	2b00      	cmp	r3, #0
 8015e38:	d108      	bne.n	8015e4c <osSemaphoreNew+0x66>
 8015e3a:	687b      	ldr	r3, [r7, #4]
 8015e3c:	68db      	ldr	r3, [r3, #12]
 8015e3e:	2b00      	cmp	r3, #0
 8015e40:	d104      	bne.n	8015e4c <osSemaphoreNew+0x66>
          mem = 0;
 8015e42:	2300      	movs	r3, #0
 8015e44:	61bb      	str	r3, [r7, #24]
 8015e46:	e001      	b.n	8015e4c <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8015e48:	2300      	movs	r3, #0
 8015e4a:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8015e4c:	69bb      	ldr	r3, [r7, #24]
 8015e4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015e52:	d04c      	beq.n	8015eee <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8015e54:	68fb      	ldr	r3, [r7, #12]
 8015e56:	2b01      	cmp	r3, #1
 8015e58:	d128      	bne.n	8015eac <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8015e5a:	69bb      	ldr	r3, [r7, #24]
 8015e5c:	2b01      	cmp	r3, #1
 8015e5e:	d10a      	bne.n	8015e76 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8015e60:	687b      	ldr	r3, [r7, #4]
 8015e62:	689b      	ldr	r3, [r3, #8]
 8015e64:	2203      	movs	r2, #3
 8015e66:	9200      	str	r2, [sp, #0]
 8015e68:	2200      	movs	r2, #0
 8015e6a:	2100      	movs	r1, #0
 8015e6c:	2001      	movs	r0, #1
 8015e6e:	f000 ff93 	bl	8016d98 <xQueueGenericCreateStatic>
 8015e72:	61f8      	str	r0, [r7, #28]
 8015e74:	e005      	b.n	8015e82 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8015e76:	2203      	movs	r2, #3
 8015e78:	2100      	movs	r1, #0
 8015e7a:	2001      	movs	r0, #1
 8015e7c:	f001 f804 	bl	8016e88 <xQueueGenericCreate>
 8015e80:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8015e82:	69fb      	ldr	r3, [r7, #28]
 8015e84:	2b00      	cmp	r3, #0
 8015e86:	d022      	beq.n	8015ece <osSemaphoreNew+0xe8>
 8015e88:	68bb      	ldr	r3, [r7, #8]
 8015e8a:	2b00      	cmp	r3, #0
 8015e8c:	d01f      	beq.n	8015ece <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8015e8e:	2300      	movs	r3, #0
 8015e90:	2200      	movs	r2, #0
 8015e92:	2100      	movs	r1, #0
 8015e94:	69f8      	ldr	r0, [r7, #28]
 8015e96:	f001 f975 	bl	8017184 <xQueueGenericSend>
 8015e9a:	4603      	mov	r3, r0
 8015e9c:	2b01      	cmp	r3, #1
 8015e9e:	d016      	beq.n	8015ece <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8015ea0:	69f8      	ldr	r0, [r7, #28]
 8015ea2:	f001 fe01 	bl	8017aa8 <vQueueDelete>
            hSemaphore = NULL;
 8015ea6:	2300      	movs	r3, #0
 8015ea8:	61fb      	str	r3, [r7, #28]
 8015eaa:	e010      	b.n	8015ece <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8015eac:	69bb      	ldr	r3, [r7, #24]
 8015eae:	2b01      	cmp	r3, #1
 8015eb0:	d108      	bne.n	8015ec4 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8015eb2:	687b      	ldr	r3, [r7, #4]
 8015eb4:	689b      	ldr	r3, [r3, #8]
 8015eb6:	461a      	mov	r2, r3
 8015eb8:	68b9      	ldr	r1, [r7, #8]
 8015eba:	68f8      	ldr	r0, [r7, #12]
 8015ebc:	f001 f8f8 	bl	80170b0 <xQueueCreateCountingSemaphoreStatic>
 8015ec0:	61f8      	str	r0, [r7, #28]
 8015ec2:	e004      	b.n	8015ece <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8015ec4:	68b9      	ldr	r1, [r7, #8]
 8015ec6:	68f8      	ldr	r0, [r7, #12]
 8015ec8:	f001 f929 	bl	801711e <xQueueCreateCountingSemaphore>
 8015ecc:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8015ece:	69fb      	ldr	r3, [r7, #28]
 8015ed0:	2b00      	cmp	r3, #0
 8015ed2:	d00c      	beq.n	8015eee <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8015ed4:	687b      	ldr	r3, [r7, #4]
 8015ed6:	2b00      	cmp	r3, #0
 8015ed8:	d003      	beq.n	8015ee2 <osSemaphoreNew+0xfc>
          name = attr->name;
 8015eda:	687b      	ldr	r3, [r7, #4]
 8015edc:	681b      	ldr	r3, [r3, #0]
 8015ede:	617b      	str	r3, [r7, #20]
 8015ee0:	e001      	b.n	8015ee6 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8015ee2:	2300      	movs	r3, #0
 8015ee4:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8015ee6:	6979      	ldr	r1, [r7, #20]
 8015ee8:	69f8      	ldr	r0, [r7, #28]
 8015eea:	f001 ff29 	bl	8017d40 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8015eee:	69fb      	ldr	r3, [r7, #28]
}
 8015ef0:	4618      	mov	r0, r3
 8015ef2:	3720      	adds	r7, #32
 8015ef4:	46bd      	mov	sp, r7
 8015ef6:	bd80      	pop	{r7, pc}

08015ef8 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8015ef8:	b580      	push	{r7, lr}
 8015efa:	b086      	sub	sp, #24
 8015efc:	af00      	add	r7, sp, #0
 8015efe:	6078      	str	r0, [r7, #4]
 8015f00:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8015f02:	687b      	ldr	r3, [r7, #4]
 8015f04:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8015f06:	2300      	movs	r3, #0
 8015f08:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8015f0a:	693b      	ldr	r3, [r7, #16]
 8015f0c:	2b00      	cmp	r3, #0
 8015f0e:	d103      	bne.n	8015f18 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8015f10:	f06f 0303 	mvn.w	r3, #3
 8015f14:	617b      	str	r3, [r7, #20]
 8015f16:	e039      	b.n	8015f8c <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015f18:	f3ef 8305 	mrs	r3, IPSR
 8015f1c:	60fb      	str	r3, [r7, #12]
  return(result);
 8015f1e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8015f20:	2b00      	cmp	r3, #0
 8015f22:	d022      	beq.n	8015f6a <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8015f24:	683b      	ldr	r3, [r7, #0]
 8015f26:	2b00      	cmp	r3, #0
 8015f28:	d003      	beq.n	8015f32 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8015f2a:	f06f 0303 	mvn.w	r3, #3
 8015f2e:	617b      	str	r3, [r7, #20]
 8015f30:	e02c      	b.n	8015f8c <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8015f32:	2300      	movs	r3, #0
 8015f34:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8015f36:	f107 0308 	add.w	r3, r7, #8
 8015f3a:	461a      	mov	r2, r3
 8015f3c:	2100      	movs	r1, #0
 8015f3e:	6938      	ldr	r0, [r7, #16]
 8015f40:	f001 fd32 	bl	80179a8 <xQueueReceiveFromISR>
 8015f44:	4603      	mov	r3, r0
 8015f46:	2b01      	cmp	r3, #1
 8015f48:	d003      	beq.n	8015f52 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8015f4a:	f06f 0302 	mvn.w	r3, #2
 8015f4e:	617b      	str	r3, [r7, #20]
 8015f50:	e01c      	b.n	8015f8c <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8015f52:	68bb      	ldr	r3, [r7, #8]
 8015f54:	2b00      	cmp	r3, #0
 8015f56:	d019      	beq.n	8015f8c <osSemaphoreAcquire+0x94>
 8015f58:	4b0f      	ldr	r3, [pc, #60]	; (8015f98 <osSemaphoreAcquire+0xa0>)
 8015f5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015f5e:	601a      	str	r2, [r3, #0]
 8015f60:	f3bf 8f4f 	dsb	sy
 8015f64:	f3bf 8f6f 	isb	sy
 8015f68:	e010      	b.n	8015f8c <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8015f6a:	6839      	ldr	r1, [r7, #0]
 8015f6c:	6938      	ldr	r0, [r7, #16]
 8015f6e:	f001 fc0f 	bl	8017790 <xQueueSemaphoreTake>
 8015f72:	4603      	mov	r3, r0
 8015f74:	2b01      	cmp	r3, #1
 8015f76:	d009      	beq.n	8015f8c <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8015f78:	683b      	ldr	r3, [r7, #0]
 8015f7a:	2b00      	cmp	r3, #0
 8015f7c:	d003      	beq.n	8015f86 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8015f7e:	f06f 0301 	mvn.w	r3, #1
 8015f82:	617b      	str	r3, [r7, #20]
 8015f84:	e002      	b.n	8015f8c <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8015f86:	f06f 0302 	mvn.w	r3, #2
 8015f8a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8015f8c:	697b      	ldr	r3, [r7, #20]
}
 8015f8e:	4618      	mov	r0, r3
 8015f90:	3718      	adds	r7, #24
 8015f92:	46bd      	mov	sp, r7
 8015f94:	bd80      	pop	{r7, pc}
 8015f96:	bf00      	nop
 8015f98:	e000ed04 	.word	0xe000ed04

08015f9c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8015f9c:	b580      	push	{r7, lr}
 8015f9e:	b086      	sub	sp, #24
 8015fa0:	af00      	add	r7, sp, #0
 8015fa2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8015fa4:	687b      	ldr	r3, [r7, #4]
 8015fa6:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8015fa8:	2300      	movs	r3, #0
 8015faa:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8015fac:	693b      	ldr	r3, [r7, #16]
 8015fae:	2b00      	cmp	r3, #0
 8015fb0:	d103      	bne.n	8015fba <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8015fb2:	f06f 0303 	mvn.w	r3, #3
 8015fb6:	617b      	str	r3, [r7, #20]
 8015fb8:	e02c      	b.n	8016014 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015fba:	f3ef 8305 	mrs	r3, IPSR
 8015fbe:	60fb      	str	r3, [r7, #12]
  return(result);
 8015fc0:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8015fc2:	2b00      	cmp	r3, #0
 8015fc4:	d01a      	beq.n	8015ffc <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8015fc6:	2300      	movs	r3, #0
 8015fc8:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8015fca:	f107 0308 	add.w	r3, r7, #8
 8015fce:	4619      	mov	r1, r3
 8015fd0:	6938      	ldr	r0, [r7, #16]
 8015fd2:	f001 fa70 	bl	80174b6 <xQueueGiveFromISR>
 8015fd6:	4603      	mov	r3, r0
 8015fd8:	2b01      	cmp	r3, #1
 8015fda:	d003      	beq.n	8015fe4 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8015fdc:	f06f 0302 	mvn.w	r3, #2
 8015fe0:	617b      	str	r3, [r7, #20]
 8015fe2:	e017      	b.n	8016014 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8015fe4:	68bb      	ldr	r3, [r7, #8]
 8015fe6:	2b00      	cmp	r3, #0
 8015fe8:	d014      	beq.n	8016014 <osSemaphoreRelease+0x78>
 8015fea:	4b0d      	ldr	r3, [pc, #52]	; (8016020 <osSemaphoreRelease+0x84>)
 8015fec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015ff0:	601a      	str	r2, [r3, #0]
 8015ff2:	f3bf 8f4f 	dsb	sy
 8015ff6:	f3bf 8f6f 	isb	sy
 8015ffa:	e00b      	b.n	8016014 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8015ffc:	2300      	movs	r3, #0
 8015ffe:	2200      	movs	r2, #0
 8016000:	2100      	movs	r1, #0
 8016002:	6938      	ldr	r0, [r7, #16]
 8016004:	f001 f8be 	bl	8017184 <xQueueGenericSend>
 8016008:	4603      	mov	r3, r0
 801600a:	2b01      	cmp	r3, #1
 801600c:	d002      	beq.n	8016014 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 801600e:	f06f 0302 	mvn.w	r3, #2
 8016012:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8016014:	697b      	ldr	r3, [r7, #20]
}
 8016016:	4618      	mov	r0, r3
 8016018:	3718      	adds	r7, #24
 801601a:	46bd      	mov	sp, r7
 801601c:	bd80      	pop	{r7, pc}
 801601e:	bf00      	nop
 8016020:	e000ed04 	.word	0xe000ed04

08016024 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8016024:	b580      	push	{r7, lr}
 8016026:	b08a      	sub	sp, #40	; 0x28
 8016028:	af02      	add	r7, sp, #8
 801602a:	60f8      	str	r0, [r7, #12]
 801602c:	60b9      	str	r1, [r7, #8]
 801602e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8016030:	2300      	movs	r3, #0
 8016032:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016034:	f3ef 8305 	mrs	r3, IPSR
 8016038:	613b      	str	r3, [r7, #16]
  return(result);
 801603a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 801603c:	2b00      	cmp	r3, #0
 801603e:	d15f      	bne.n	8016100 <osMessageQueueNew+0xdc>
 8016040:	68fb      	ldr	r3, [r7, #12]
 8016042:	2b00      	cmp	r3, #0
 8016044:	d05c      	beq.n	8016100 <osMessageQueueNew+0xdc>
 8016046:	68bb      	ldr	r3, [r7, #8]
 8016048:	2b00      	cmp	r3, #0
 801604a:	d059      	beq.n	8016100 <osMessageQueueNew+0xdc>
    mem = -1;
 801604c:	f04f 33ff 	mov.w	r3, #4294967295
 8016050:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8016052:	687b      	ldr	r3, [r7, #4]
 8016054:	2b00      	cmp	r3, #0
 8016056:	d029      	beq.n	80160ac <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8016058:	687b      	ldr	r3, [r7, #4]
 801605a:	689b      	ldr	r3, [r3, #8]
 801605c:	2b00      	cmp	r3, #0
 801605e:	d012      	beq.n	8016086 <osMessageQueueNew+0x62>
 8016060:	687b      	ldr	r3, [r7, #4]
 8016062:	68db      	ldr	r3, [r3, #12]
 8016064:	2b4f      	cmp	r3, #79	; 0x4f
 8016066:	d90e      	bls.n	8016086 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8016068:	687b      	ldr	r3, [r7, #4]
 801606a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 801606c:	2b00      	cmp	r3, #0
 801606e:	d00a      	beq.n	8016086 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8016070:	687b      	ldr	r3, [r7, #4]
 8016072:	695a      	ldr	r2, [r3, #20]
 8016074:	68fb      	ldr	r3, [r7, #12]
 8016076:	68b9      	ldr	r1, [r7, #8]
 8016078:	fb01 f303 	mul.w	r3, r1, r3
 801607c:	429a      	cmp	r2, r3
 801607e:	d302      	bcc.n	8016086 <osMessageQueueNew+0x62>
        mem = 1;
 8016080:	2301      	movs	r3, #1
 8016082:	61bb      	str	r3, [r7, #24]
 8016084:	e014      	b.n	80160b0 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8016086:	687b      	ldr	r3, [r7, #4]
 8016088:	689b      	ldr	r3, [r3, #8]
 801608a:	2b00      	cmp	r3, #0
 801608c:	d110      	bne.n	80160b0 <osMessageQueueNew+0x8c>
 801608e:	687b      	ldr	r3, [r7, #4]
 8016090:	68db      	ldr	r3, [r3, #12]
 8016092:	2b00      	cmp	r3, #0
 8016094:	d10c      	bne.n	80160b0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8016096:	687b      	ldr	r3, [r7, #4]
 8016098:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 801609a:	2b00      	cmp	r3, #0
 801609c:	d108      	bne.n	80160b0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 801609e:	687b      	ldr	r3, [r7, #4]
 80160a0:	695b      	ldr	r3, [r3, #20]
 80160a2:	2b00      	cmp	r3, #0
 80160a4:	d104      	bne.n	80160b0 <osMessageQueueNew+0x8c>
          mem = 0;
 80160a6:	2300      	movs	r3, #0
 80160a8:	61bb      	str	r3, [r7, #24]
 80160aa:	e001      	b.n	80160b0 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80160ac:	2300      	movs	r3, #0
 80160ae:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80160b0:	69bb      	ldr	r3, [r7, #24]
 80160b2:	2b01      	cmp	r3, #1
 80160b4:	d10b      	bne.n	80160ce <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80160b6:	687b      	ldr	r3, [r7, #4]
 80160b8:	691a      	ldr	r2, [r3, #16]
 80160ba:	687b      	ldr	r3, [r7, #4]
 80160bc:	689b      	ldr	r3, [r3, #8]
 80160be:	2100      	movs	r1, #0
 80160c0:	9100      	str	r1, [sp, #0]
 80160c2:	68b9      	ldr	r1, [r7, #8]
 80160c4:	68f8      	ldr	r0, [r7, #12]
 80160c6:	f000 fe67 	bl	8016d98 <xQueueGenericCreateStatic>
 80160ca:	61f8      	str	r0, [r7, #28]
 80160cc:	e008      	b.n	80160e0 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80160ce:	69bb      	ldr	r3, [r7, #24]
 80160d0:	2b00      	cmp	r3, #0
 80160d2:	d105      	bne.n	80160e0 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80160d4:	2200      	movs	r2, #0
 80160d6:	68b9      	ldr	r1, [r7, #8]
 80160d8:	68f8      	ldr	r0, [r7, #12]
 80160da:	f000 fed5 	bl	8016e88 <xQueueGenericCreate>
 80160de:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80160e0:	69fb      	ldr	r3, [r7, #28]
 80160e2:	2b00      	cmp	r3, #0
 80160e4:	d00c      	beq.n	8016100 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80160e6:	687b      	ldr	r3, [r7, #4]
 80160e8:	2b00      	cmp	r3, #0
 80160ea:	d003      	beq.n	80160f4 <osMessageQueueNew+0xd0>
        name = attr->name;
 80160ec:	687b      	ldr	r3, [r7, #4]
 80160ee:	681b      	ldr	r3, [r3, #0]
 80160f0:	617b      	str	r3, [r7, #20]
 80160f2:	e001      	b.n	80160f8 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80160f4:	2300      	movs	r3, #0
 80160f6:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80160f8:	6979      	ldr	r1, [r7, #20]
 80160fa:	69f8      	ldr	r0, [r7, #28]
 80160fc:	f001 fe20 	bl	8017d40 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8016100:	69fb      	ldr	r3, [r7, #28]
}
 8016102:	4618      	mov	r0, r3
 8016104:	3720      	adds	r7, #32
 8016106:	46bd      	mov	sp, r7
 8016108:	bd80      	pop	{r7, pc}
	...

0801610c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 801610c:	b580      	push	{r7, lr}
 801610e:	b088      	sub	sp, #32
 8016110:	af00      	add	r7, sp, #0
 8016112:	60f8      	str	r0, [r7, #12]
 8016114:	60b9      	str	r1, [r7, #8]
 8016116:	603b      	str	r3, [r7, #0]
 8016118:	4613      	mov	r3, r2
 801611a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 801611c:	68fb      	ldr	r3, [r7, #12]
 801611e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8016120:	2300      	movs	r3, #0
 8016122:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016124:	f3ef 8305 	mrs	r3, IPSR
 8016128:	617b      	str	r3, [r7, #20]
  return(result);
 801612a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 801612c:	2b00      	cmp	r3, #0
 801612e:	d028      	beq.n	8016182 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8016130:	69bb      	ldr	r3, [r7, #24]
 8016132:	2b00      	cmp	r3, #0
 8016134:	d005      	beq.n	8016142 <osMessageQueuePut+0x36>
 8016136:	68bb      	ldr	r3, [r7, #8]
 8016138:	2b00      	cmp	r3, #0
 801613a:	d002      	beq.n	8016142 <osMessageQueuePut+0x36>
 801613c:	683b      	ldr	r3, [r7, #0]
 801613e:	2b00      	cmp	r3, #0
 8016140:	d003      	beq.n	801614a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8016142:	f06f 0303 	mvn.w	r3, #3
 8016146:	61fb      	str	r3, [r7, #28]
 8016148:	e038      	b.n	80161bc <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 801614a:	2300      	movs	r3, #0
 801614c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 801614e:	f107 0210 	add.w	r2, r7, #16
 8016152:	2300      	movs	r3, #0
 8016154:	68b9      	ldr	r1, [r7, #8]
 8016156:	69b8      	ldr	r0, [r7, #24]
 8016158:	f001 f912 	bl	8017380 <xQueueGenericSendFromISR>
 801615c:	4603      	mov	r3, r0
 801615e:	2b01      	cmp	r3, #1
 8016160:	d003      	beq.n	801616a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8016162:	f06f 0302 	mvn.w	r3, #2
 8016166:	61fb      	str	r3, [r7, #28]
 8016168:	e028      	b.n	80161bc <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 801616a:	693b      	ldr	r3, [r7, #16]
 801616c:	2b00      	cmp	r3, #0
 801616e:	d025      	beq.n	80161bc <osMessageQueuePut+0xb0>
 8016170:	4b15      	ldr	r3, [pc, #84]	; (80161c8 <osMessageQueuePut+0xbc>)
 8016172:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016176:	601a      	str	r2, [r3, #0]
 8016178:	f3bf 8f4f 	dsb	sy
 801617c:	f3bf 8f6f 	isb	sy
 8016180:	e01c      	b.n	80161bc <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8016182:	69bb      	ldr	r3, [r7, #24]
 8016184:	2b00      	cmp	r3, #0
 8016186:	d002      	beq.n	801618e <osMessageQueuePut+0x82>
 8016188:	68bb      	ldr	r3, [r7, #8]
 801618a:	2b00      	cmp	r3, #0
 801618c:	d103      	bne.n	8016196 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 801618e:	f06f 0303 	mvn.w	r3, #3
 8016192:	61fb      	str	r3, [r7, #28]
 8016194:	e012      	b.n	80161bc <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8016196:	2300      	movs	r3, #0
 8016198:	683a      	ldr	r2, [r7, #0]
 801619a:	68b9      	ldr	r1, [r7, #8]
 801619c:	69b8      	ldr	r0, [r7, #24]
 801619e:	f000 fff1 	bl	8017184 <xQueueGenericSend>
 80161a2:	4603      	mov	r3, r0
 80161a4:	2b01      	cmp	r3, #1
 80161a6:	d009      	beq.n	80161bc <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80161a8:	683b      	ldr	r3, [r7, #0]
 80161aa:	2b00      	cmp	r3, #0
 80161ac:	d003      	beq.n	80161b6 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80161ae:	f06f 0301 	mvn.w	r3, #1
 80161b2:	61fb      	str	r3, [r7, #28]
 80161b4:	e002      	b.n	80161bc <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80161b6:	f06f 0302 	mvn.w	r3, #2
 80161ba:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80161bc:	69fb      	ldr	r3, [r7, #28]
}
 80161be:	4618      	mov	r0, r3
 80161c0:	3720      	adds	r7, #32
 80161c2:	46bd      	mov	sp, r7
 80161c4:	bd80      	pop	{r7, pc}
 80161c6:	bf00      	nop
 80161c8:	e000ed04 	.word	0xe000ed04

080161cc <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80161cc:	b580      	push	{r7, lr}
 80161ce:	b088      	sub	sp, #32
 80161d0:	af00      	add	r7, sp, #0
 80161d2:	60f8      	str	r0, [r7, #12]
 80161d4:	60b9      	str	r1, [r7, #8]
 80161d6:	607a      	str	r2, [r7, #4]
 80161d8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80161da:	68fb      	ldr	r3, [r7, #12]
 80161dc:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80161de:	2300      	movs	r3, #0
 80161e0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80161e2:	f3ef 8305 	mrs	r3, IPSR
 80161e6:	617b      	str	r3, [r7, #20]
  return(result);
 80161e8:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80161ea:	2b00      	cmp	r3, #0
 80161ec:	d028      	beq.n	8016240 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80161ee:	69bb      	ldr	r3, [r7, #24]
 80161f0:	2b00      	cmp	r3, #0
 80161f2:	d005      	beq.n	8016200 <osMessageQueueGet+0x34>
 80161f4:	68bb      	ldr	r3, [r7, #8]
 80161f6:	2b00      	cmp	r3, #0
 80161f8:	d002      	beq.n	8016200 <osMessageQueueGet+0x34>
 80161fa:	683b      	ldr	r3, [r7, #0]
 80161fc:	2b00      	cmp	r3, #0
 80161fe:	d003      	beq.n	8016208 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8016200:	f06f 0303 	mvn.w	r3, #3
 8016204:	61fb      	str	r3, [r7, #28]
 8016206:	e037      	b.n	8016278 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8016208:	2300      	movs	r3, #0
 801620a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 801620c:	f107 0310 	add.w	r3, r7, #16
 8016210:	461a      	mov	r2, r3
 8016212:	68b9      	ldr	r1, [r7, #8]
 8016214:	69b8      	ldr	r0, [r7, #24]
 8016216:	f001 fbc7 	bl	80179a8 <xQueueReceiveFromISR>
 801621a:	4603      	mov	r3, r0
 801621c:	2b01      	cmp	r3, #1
 801621e:	d003      	beq.n	8016228 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8016220:	f06f 0302 	mvn.w	r3, #2
 8016224:	61fb      	str	r3, [r7, #28]
 8016226:	e027      	b.n	8016278 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8016228:	693b      	ldr	r3, [r7, #16]
 801622a:	2b00      	cmp	r3, #0
 801622c:	d024      	beq.n	8016278 <osMessageQueueGet+0xac>
 801622e:	4b15      	ldr	r3, [pc, #84]	; (8016284 <osMessageQueueGet+0xb8>)
 8016230:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016234:	601a      	str	r2, [r3, #0]
 8016236:	f3bf 8f4f 	dsb	sy
 801623a:	f3bf 8f6f 	isb	sy
 801623e:	e01b      	b.n	8016278 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8016240:	69bb      	ldr	r3, [r7, #24]
 8016242:	2b00      	cmp	r3, #0
 8016244:	d002      	beq.n	801624c <osMessageQueueGet+0x80>
 8016246:	68bb      	ldr	r3, [r7, #8]
 8016248:	2b00      	cmp	r3, #0
 801624a:	d103      	bne.n	8016254 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 801624c:	f06f 0303 	mvn.w	r3, #3
 8016250:	61fb      	str	r3, [r7, #28]
 8016252:	e011      	b.n	8016278 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8016254:	683a      	ldr	r2, [r7, #0]
 8016256:	68b9      	ldr	r1, [r7, #8]
 8016258:	69b8      	ldr	r0, [r7, #24]
 801625a:	f001 f9b9 	bl	80175d0 <xQueueReceive>
 801625e:	4603      	mov	r3, r0
 8016260:	2b01      	cmp	r3, #1
 8016262:	d009      	beq.n	8016278 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8016264:	683b      	ldr	r3, [r7, #0]
 8016266:	2b00      	cmp	r3, #0
 8016268:	d003      	beq.n	8016272 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 801626a:	f06f 0301 	mvn.w	r3, #1
 801626e:	61fb      	str	r3, [r7, #28]
 8016270:	e002      	b.n	8016278 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8016272:	f06f 0302 	mvn.w	r3, #2
 8016276:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8016278:	69fb      	ldr	r3, [r7, #28]
}
 801627a:	4618      	mov	r0, r3
 801627c:	3720      	adds	r7, #32
 801627e:	46bd      	mov	sp, r7
 8016280:	bd80      	pop	{r7, pc}
 8016282:	bf00      	nop
 8016284:	e000ed04 	.word	0xe000ed04

08016288 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8016288:	b480      	push	{r7}
 801628a:	b085      	sub	sp, #20
 801628c:	af00      	add	r7, sp, #0
 801628e:	60f8      	str	r0, [r7, #12]
 8016290:	60b9      	str	r1, [r7, #8]
 8016292:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8016294:	68fb      	ldr	r3, [r7, #12]
 8016296:	4a07      	ldr	r2, [pc, #28]	; (80162b4 <vApplicationGetIdleTaskMemory+0x2c>)
 8016298:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 801629a:	68bb      	ldr	r3, [r7, #8]
 801629c:	4a06      	ldr	r2, [pc, #24]	; (80162b8 <vApplicationGetIdleTaskMemory+0x30>)
 801629e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80162a0:	687b      	ldr	r3, [r7, #4]
 80162a2:	2280      	movs	r2, #128	; 0x80
 80162a4:	601a      	str	r2, [r3, #0]
}
 80162a6:	bf00      	nop
 80162a8:	3714      	adds	r7, #20
 80162aa:	46bd      	mov	sp, r7
 80162ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162b0:	4770      	bx	lr
 80162b2:	bf00      	nop
 80162b4:	2400be00 	.word	0x2400be00
 80162b8:	2400be60 	.word	0x2400be60

080162bc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80162bc:	b480      	push	{r7}
 80162be:	b085      	sub	sp, #20
 80162c0:	af00      	add	r7, sp, #0
 80162c2:	60f8      	str	r0, [r7, #12]
 80162c4:	60b9      	str	r1, [r7, #8]
 80162c6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80162c8:	68fb      	ldr	r3, [r7, #12]
 80162ca:	4a07      	ldr	r2, [pc, #28]	; (80162e8 <vApplicationGetTimerTaskMemory+0x2c>)
 80162cc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80162ce:	68bb      	ldr	r3, [r7, #8]
 80162d0:	4a06      	ldr	r2, [pc, #24]	; (80162ec <vApplicationGetTimerTaskMemory+0x30>)
 80162d2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80162d4:	687b      	ldr	r3, [r7, #4]
 80162d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80162da:	601a      	str	r2, [r3, #0]
}
 80162dc:	bf00      	nop
 80162de:	3714      	adds	r7, #20
 80162e0:	46bd      	mov	sp, r7
 80162e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162e6:	4770      	bx	lr
 80162e8:	2400c060 	.word	0x2400c060
 80162ec:	2400c0c0 	.word	0x2400c0c0

080162f0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80162f0:	b580      	push	{r7, lr}
 80162f2:	b08a      	sub	sp, #40	; 0x28
 80162f4:	af00      	add	r7, sp, #0
 80162f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80162f8:	2300      	movs	r3, #0
 80162fa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80162fc:	f001 ffee 	bl	80182dc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8016300:	4b5b      	ldr	r3, [pc, #364]	; (8016470 <pvPortMalloc+0x180>)
 8016302:	681b      	ldr	r3, [r3, #0]
 8016304:	2b00      	cmp	r3, #0
 8016306:	d101      	bne.n	801630c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8016308:	f000 f920 	bl	801654c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801630c:	4b59      	ldr	r3, [pc, #356]	; (8016474 <pvPortMalloc+0x184>)
 801630e:	681a      	ldr	r2, [r3, #0]
 8016310:	687b      	ldr	r3, [r7, #4]
 8016312:	4013      	ands	r3, r2
 8016314:	2b00      	cmp	r3, #0
 8016316:	f040 8093 	bne.w	8016440 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801631a:	687b      	ldr	r3, [r7, #4]
 801631c:	2b00      	cmp	r3, #0
 801631e:	d01d      	beq.n	801635c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8016320:	2208      	movs	r2, #8
 8016322:	687b      	ldr	r3, [r7, #4]
 8016324:	4413      	add	r3, r2
 8016326:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8016328:	687b      	ldr	r3, [r7, #4]
 801632a:	f003 0307 	and.w	r3, r3, #7
 801632e:	2b00      	cmp	r3, #0
 8016330:	d014      	beq.n	801635c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8016332:	687b      	ldr	r3, [r7, #4]
 8016334:	f023 0307 	bic.w	r3, r3, #7
 8016338:	3308      	adds	r3, #8
 801633a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 801633c:	687b      	ldr	r3, [r7, #4]
 801633e:	f003 0307 	and.w	r3, r3, #7
 8016342:	2b00      	cmp	r3, #0
 8016344:	d00a      	beq.n	801635c <pvPortMalloc+0x6c>
	__asm volatile
 8016346:	f04f 0350 	mov.w	r3, #80	; 0x50
 801634a:	f383 8811 	msr	BASEPRI, r3
 801634e:	f3bf 8f6f 	isb	sy
 8016352:	f3bf 8f4f 	dsb	sy
 8016356:	617b      	str	r3, [r7, #20]
}
 8016358:	bf00      	nop
 801635a:	e7fe      	b.n	801635a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801635c:	687b      	ldr	r3, [r7, #4]
 801635e:	2b00      	cmp	r3, #0
 8016360:	d06e      	beq.n	8016440 <pvPortMalloc+0x150>
 8016362:	4b45      	ldr	r3, [pc, #276]	; (8016478 <pvPortMalloc+0x188>)
 8016364:	681b      	ldr	r3, [r3, #0]
 8016366:	687a      	ldr	r2, [r7, #4]
 8016368:	429a      	cmp	r2, r3
 801636a:	d869      	bhi.n	8016440 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801636c:	4b43      	ldr	r3, [pc, #268]	; (801647c <pvPortMalloc+0x18c>)
 801636e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8016370:	4b42      	ldr	r3, [pc, #264]	; (801647c <pvPortMalloc+0x18c>)
 8016372:	681b      	ldr	r3, [r3, #0]
 8016374:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8016376:	e004      	b.n	8016382 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8016378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801637a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801637c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801637e:	681b      	ldr	r3, [r3, #0]
 8016380:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8016382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016384:	685b      	ldr	r3, [r3, #4]
 8016386:	687a      	ldr	r2, [r7, #4]
 8016388:	429a      	cmp	r2, r3
 801638a:	d903      	bls.n	8016394 <pvPortMalloc+0xa4>
 801638c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801638e:	681b      	ldr	r3, [r3, #0]
 8016390:	2b00      	cmp	r3, #0
 8016392:	d1f1      	bne.n	8016378 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8016394:	4b36      	ldr	r3, [pc, #216]	; (8016470 <pvPortMalloc+0x180>)
 8016396:	681b      	ldr	r3, [r3, #0]
 8016398:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801639a:	429a      	cmp	r2, r3
 801639c:	d050      	beq.n	8016440 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801639e:	6a3b      	ldr	r3, [r7, #32]
 80163a0:	681b      	ldr	r3, [r3, #0]
 80163a2:	2208      	movs	r2, #8
 80163a4:	4413      	add	r3, r2
 80163a6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80163a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163aa:	681a      	ldr	r2, [r3, #0]
 80163ac:	6a3b      	ldr	r3, [r7, #32]
 80163ae:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80163b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163b2:	685a      	ldr	r2, [r3, #4]
 80163b4:	687b      	ldr	r3, [r7, #4]
 80163b6:	1ad2      	subs	r2, r2, r3
 80163b8:	2308      	movs	r3, #8
 80163ba:	005b      	lsls	r3, r3, #1
 80163bc:	429a      	cmp	r2, r3
 80163be:	d91f      	bls.n	8016400 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80163c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80163c2:	687b      	ldr	r3, [r7, #4]
 80163c4:	4413      	add	r3, r2
 80163c6:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80163c8:	69bb      	ldr	r3, [r7, #24]
 80163ca:	f003 0307 	and.w	r3, r3, #7
 80163ce:	2b00      	cmp	r3, #0
 80163d0:	d00a      	beq.n	80163e8 <pvPortMalloc+0xf8>
	__asm volatile
 80163d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80163d6:	f383 8811 	msr	BASEPRI, r3
 80163da:	f3bf 8f6f 	isb	sy
 80163de:	f3bf 8f4f 	dsb	sy
 80163e2:	613b      	str	r3, [r7, #16]
}
 80163e4:	bf00      	nop
 80163e6:	e7fe      	b.n	80163e6 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80163e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163ea:	685a      	ldr	r2, [r3, #4]
 80163ec:	687b      	ldr	r3, [r7, #4]
 80163ee:	1ad2      	subs	r2, r2, r3
 80163f0:	69bb      	ldr	r3, [r7, #24]
 80163f2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80163f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163f6:	687a      	ldr	r2, [r7, #4]
 80163f8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80163fa:	69b8      	ldr	r0, [r7, #24]
 80163fc:	f000 f90a 	bl	8016614 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8016400:	4b1d      	ldr	r3, [pc, #116]	; (8016478 <pvPortMalloc+0x188>)
 8016402:	681a      	ldr	r2, [r3, #0]
 8016404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016406:	685b      	ldr	r3, [r3, #4]
 8016408:	1ad3      	subs	r3, r2, r3
 801640a:	4a1b      	ldr	r2, [pc, #108]	; (8016478 <pvPortMalloc+0x188>)
 801640c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801640e:	4b1a      	ldr	r3, [pc, #104]	; (8016478 <pvPortMalloc+0x188>)
 8016410:	681a      	ldr	r2, [r3, #0]
 8016412:	4b1b      	ldr	r3, [pc, #108]	; (8016480 <pvPortMalloc+0x190>)
 8016414:	681b      	ldr	r3, [r3, #0]
 8016416:	429a      	cmp	r2, r3
 8016418:	d203      	bcs.n	8016422 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801641a:	4b17      	ldr	r3, [pc, #92]	; (8016478 <pvPortMalloc+0x188>)
 801641c:	681b      	ldr	r3, [r3, #0]
 801641e:	4a18      	ldr	r2, [pc, #96]	; (8016480 <pvPortMalloc+0x190>)
 8016420:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8016422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016424:	685a      	ldr	r2, [r3, #4]
 8016426:	4b13      	ldr	r3, [pc, #76]	; (8016474 <pvPortMalloc+0x184>)
 8016428:	681b      	ldr	r3, [r3, #0]
 801642a:	431a      	orrs	r2, r3
 801642c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801642e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8016430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016432:	2200      	movs	r2, #0
 8016434:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8016436:	4b13      	ldr	r3, [pc, #76]	; (8016484 <pvPortMalloc+0x194>)
 8016438:	681b      	ldr	r3, [r3, #0]
 801643a:	3301      	adds	r3, #1
 801643c:	4a11      	ldr	r2, [pc, #68]	; (8016484 <pvPortMalloc+0x194>)
 801643e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8016440:	f001 ff5a 	bl	80182f8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8016444:	69fb      	ldr	r3, [r7, #28]
 8016446:	f003 0307 	and.w	r3, r3, #7
 801644a:	2b00      	cmp	r3, #0
 801644c:	d00a      	beq.n	8016464 <pvPortMalloc+0x174>
	__asm volatile
 801644e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016452:	f383 8811 	msr	BASEPRI, r3
 8016456:	f3bf 8f6f 	isb	sy
 801645a:	f3bf 8f4f 	dsb	sy
 801645e:	60fb      	str	r3, [r7, #12]
}
 8016460:	bf00      	nop
 8016462:	e7fe      	b.n	8016462 <pvPortMalloc+0x172>
	return pvReturn;
 8016464:	69fb      	ldr	r3, [r7, #28]
}
 8016466:	4618      	mov	r0, r3
 8016468:	3728      	adds	r7, #40	; 0x28
 801646a:	46bd      	mov	sp, r7
 801646c:	bd80      	pop	{r7, pc}
 801646e:	bf00      	nop
 8016470:	24024b68 	.word	0x24024b68
 8016474:	24024b7c 	.word	0x24024b7c
 8016478:	24024b6c 	.word	0x24024b6c
 801647c:	24024b60 	.word	0x24024b60
 8016480:	24024b70 	.word	0x24024b70
 8016484:	24024b74 	.word	0x24024b74

08016488 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8016488:	b580      	push	{r7, lr}
 801648a:	b086      	sub	sp, #24
 801648c:	af00      	add	r7, sp, #0
 801648e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8016490:	687b      	ldr	r3, [r7, #4]
 8016492:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8016494:	687b      	ldr	r3, [r7, #4]
 8016496:	2b00      	cmp	r3, #0
 8016498:	d04d      	beq.n	8016536 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801649a:	2308      	movs	r3, #8
 801649c:	425b      	negs	r3, r3
 801649e:	697a      	ldr	r2, [r7, #20]
 80164a0:	4413      	add	r3, r2
 80164a2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80164a4:	697b      	ldr	r3, [r7, #20]
 80164a6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80164a8:	693b      	ldr	r3, [r7, #16]
 80164aa:	685a      	ldr	r2, [r3, #4]
 80164ac:	4b24      	ldr	r3, [pc, #144]	; (8016540 <vPortFree+0xb8>)
 80164ae:	681b      	ldr	r3, [r3, #0]
 80164b0:	4013      	ands	r3, r2
 80164b2:	2b00      	cmp	r3, #0
 80164b4:	d10a      	bne.n	80164cc <vPortFree+0x44>
	__asm volatile
 80164b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80164ba:	f383 8811 	msr	BASEPRI, r3
 80164be:	f3bf 8f6f 	isb	sy
 80164c2:	f3bf 8f4f 	dsb	sy
 80164c6:	60fb      	str	r3, [r7, #12]
}
 80164c8:	bf00      	nop
 80164ca:	e7fe      	b.n	80164ca <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80164cc:	693b      	ldr	r3, [r7, #16]
 80164ce:	681b      	ldr	r3, [r3, #0]
 80164d0:	2b00      	cmp	r3, #0
 80164d2:	d00a      	beq.n	80164ea <vPortFree+0x62>
	__asm volatile
 80164d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80164d8:	f383 8811 	msr	BASEPRI, r3
 80164dc:	f3bf 8f6f 	isb	sy
 80164e0:	f3bf 8f4f 	dsb	sy
 80164e4:	60bb      	str	r3, [r7, #8]
}
 80164e6:	bf00      	nop
 80164e8:	e7fe      	b.n	80164e8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80164ea:	693b      	ldr	r3, [r7, #16]
 80164ec:	685a      	ldr	r2, [r3, #4]
 80164ee:	4b14      	ldr	r3, [pc, #80]	; (8016540 <vPortFree+0xb8>)
 80164f0:	681b      	ldr	r3, [r3, #0]
 80164f2:	4013      	ands	r3, r2
 80164f4:	2b00      	cmp	r3, #0
 80164f6:	d01e      	beq.n	8016536 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80164f8:	693b      	ldr	r3, [r7, #16]
 80164fa:	681b      	ldr	r3, [r3, #0]
 80164fc:	2b00      	cmp	r3, #0
 80164fe:	d11a      	bne.n	8016536 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8016500:	693b      	ldr	r3, [r7, #16]
 8016502:	685a      	ldr	r2, [r3, #4]
 8016504:	4b0e      	ldr	r3, [pc, #56]	; (8016540 <vPortFree+0xb8>)
 8016506:	681b      	ldr	r3, [r3, #0]
 8016508:	43db      	mvns	r3, r3
 801650a:	401a      	ands	r2, r3
 801650c:	693b      	ldr	r3, [r7, #16]
 801650e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8016510:	f001 fee4 	bl	80182dc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8016514:	693b      	ldr	r3, [r7, #16]
 8016516:	685a      	ldr	r2, [r3, #4]
 8016518:	4b0a      	ldr	r3, [pc, #40]	; (8016544 <vPortFree+0xbc>)
 801651a:	681b      	ldr	r3, [r3, #0]
 801651c:	4413      	add	r3, r2
 801651e:	4a09      	ldr	r2, [pc, #36]	; (8016544 <vPortFree+0xbc>)
 8016520:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8016522:	6938      	ldr	r0, [r7, #16]
 8016524:	f000 f876 	bl	8016614 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8016528:	4b07      	ldr	r3, [pc, #28]	; (8016548 <vPortFree+0xc0>)
 801652a:	681b      	ldr	r3, [r3, #0]
 801652c:	3301      	adds	r3, #1
 801652e:	4a06      	ldr	r2, [pc, #24]	; (8016548 <vPortFree+0xc0>)
 8016530:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8016532:	f001 fee1 	bl	80182f8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8016536:	bf00      	nop
 8016538:	3718      	adds	r7, #24
 801653a:	46bd      	mov	sp, r7
 801653c:	bd80      	pop	{r7, pc}
 801653e:	bf00      	nop
 8016540:	24024b7c 	.word	0x24024b7c
 8016544:	24024b6c 	.word	0x24024b6c
 8016548:	24024b78 	.word	0x24024b78

0801654c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801654c:	b480      	push	{r7}
 801654e:	b085      	sub	sp, #20
 8016550:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8016552:	4b29      	ldr	r3, [pc, #164]	; (80165f8 <prvHeapInit+0xac>)
 8016554:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8016556:	4b29      	ldr	r3, [pc, #164]	; (80165fc <prvHeapInit+0xb0>)
 8016558:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801655a:	68fb      	ldr	r3, [r7, #12]
 801655c:	f003 0307 	and.w	r3, r3, #7
 8016560:	2b00      	cmp	r3, #0
 8016562:	d00c      	beq.n	801657e <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8016564:	68fb      	ldr	r3, [r7, #12]
 8016566:	3307      	adds	r3, #7
 8016568:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801656a:	68fb      	ldr	r3, [r7, #12]
 801656c:	f023 0307 	bic.w	r3, r3, #7
 8016570:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8016572:	68ba      	ldr	r2, [r7, #8]
 8016574:	68fb      	ldr	r3, [r7, #12]
 8016576:	1ad3      	subs	r3, r2, r3
 8016578:	4a20      	ldr	r2, [pc, #128]	; (80165fc <prvHeapInit+0xb0>)
 801657a:	4413      	add	r3, r2
 801657c:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 801657e:	68fb      	ldr	r3, [r7, #12]
 8016580:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8016582:	4a1f      	ldr	r2, [pc, #124]	; (8016600 <prvHeapInit+0xb4>)
 8016584:	687b      	ldr	r3, [r7, #4]
 8016586:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8016588:	4b1d      	ldr	r3, [pc, #116]	; (8016600 <prvHeapInit+0xb4>)
 801658a:	2200      	movs	r2, #0
 801658c:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801658e:	687b      	ldr	r3, [r7, #4]
 8016590:	68ba      	ldr	r2, [r7, #8]
 8016592:	4413      	add	r3, r2
 8016594:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8016596:	2208      	movs	r2, #8
 8016598:	68fb      	ldr	r3, [r7, #12]
 801659a:	1a9b      	subs	r3, r3, r2
 801659c:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801659e:	68fb      	ldr	r3, [r7, #12]
 80165a0:	f023 0307 	bic.w	r3, r3, #7
 80165a4:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80165a6:	68fb      	ldr	r3, [r7, #12]
 80165a8:	4a16      	ldr	r2, [pc, #88]	; (8016604 <prvHeapInit+0xb8>)
 80165aa:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80165ac:	4b15      	ldr	r3, [pc, #84]	; (8016604 <prvHeapInit+0xb8>)
 80165ae:	681b      	ldr	r3, [r3, #0]
 80165b0:	2200      	movs	r2, #0
 80165b2:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80165b4:	4b13      	ldr	r3, [pc, #76]	; (8016604 <prvHeapInit+0xb8>)
 80165b6:	681b      	ldr	r3, [r3, #0]
 80165b8:	2200      	movs	r2, #0
 80165ba:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80165bc:	687b      	ldr	r3, [r7, #4]
 80165be:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80165c0:	683b      	ldr	r3, [r7, #0]
 80165c2:	68fa      	ldr	r2, [r7, #12]
 80165c4:	1ad2      	subs	r2, r2, r3
 80165c6:	683b      	ldr	r3, [r7, #0]
 80165c8:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80165ca:	4b0e      	ldr	r3, [pc, #56]	; (8016604 <prvHeapInit+0xb8>)
 80165cc:	681a      	ldr	r2, [r3, #0]
 80165ce:	683b      	ldr	r3, [r7, #0]
 80165d0:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80165d2:	683b      	ldr	r3, [r7, #0]
 80165d4:	685b      	ldr	r3, [r3, #4]
 80165d6:	4a0c      	ldr	r2, [pc, #48]	; (8016608 <prvHeapInit+0xbc>)
 80165d8:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80165da:	683b      	ldr	r3, [r7, #0]
 80165dc:	685b      	ldr	r3, [r3, #4]
 80165de:	4a0b      	ldr	r2, [pc, #44]	; (801660c <prvHeapInit+0xc0>)
 80165e0:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80165e2:	4b0b      	ldr	r3, [pc, #44]	; (8016610 <prvHeapInit+0xc4>)
 80165e4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80165e8:	601a      	str	r2, [r3, #0]
}
 80165ea:	bf00      	nop
 80165ec:	3714      	adds	r7, #20
 80165ee:	46bd      	mov	sp, r7
 80165f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165f4:	4770      	bx	lr
 80165f6:	bf00      	nop
 80165f8:	000186a0 	.word	0x000186a0
 80165fc:	2400c4c0 	.word	0x2400c4c0
 8016600:	24024b60 	.word	0x24024b60
 8016604:	24024b68 	.word	0x24024b68
 8016608:	24024b70 	.word	0x24024b70
 801660c:	24024b6c 	.word	0x24024b6c
 8016610:	24024b7c 	.word	0x24024b7c

08016614 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8016614:	b480      	push	{r7}
 8016616:	b085      	sub	sp, #20
 8016618:	af00      	add	r7, sp, #0
 801661a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801661c:	4b28      	ldr	r3, [pc, #160]	; (80166c0 <prvInsertBlockIntoFreeList+0xac>)
 801661e:	60fb      	str	r3, [r7, #12]
 8016620:	e002      	b.n	8016628 <prvInsertBlockIntoFreeList+0x14>
 8016622:	68fb      	ldr	r3, [r7, #12]
 8016624:	681b      	ldr	r3, [r3, #0]
 8016626:	60fb      	str	r3, [r7, #12]
 8016628:	68fb      	ldr	r3, [r7, #12]
 801662a:	681b      	ldr	r3, [r3, #0]
 801662c:	687a      	ldr	r2, [r7, #4]
 801662e:	429a      	cmp	r2, r3
 8016630:	d8f7      	bhi.n	8016622 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8016632:	68fb      	ldr	r3, [r7, #12]
 8016634:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8016636:	68fb      	ldr	r3, [r7, #12]
 8016638:	685b      	ldr	r3, [r3, #4]
 801663a:	68ba      	ldr	r2, [r7, #8]
 801663c:	4413      	add	r3, r2
 801663e:	687a      	ldr	r2, [r7, #4]
 8016640:	429a      	cmp	r2, r3
 8016642:	d108      	bne.n	8016656 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8016644:	68fb      	ldr	r3, [r7, #12]
 8016646:	685a      	ldr	r2, [r3, #4]
 8016648:	687b      	ldr	r3, [r7, #4]
 801664a:	685b      	ldr	r3, [r3, #4]
 801664c:	441a      	add	r2, r3
 801664e:	68fb      	ldr	r3, [r7, #12]
 8016650:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8016652:	68fb      	ldr	r3, [r7, #12]
 8016654:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8016656:	687b      	ldr	r3, [r7, #4]
 8016658:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801665a:	687b      	ldr	r3, [r7, #4]
 801665c:	685b      	ldr	r3, [r3, #4]
 801665e:	68ba      	ldr	r2, [r7, #8]
 8016660:	441a      	add	r2, r3
 8016662:	68fb      	ldr	r3, [r7, #12]
 8016664:	681b      	ldr	r3, [r3, #0]
 8016666:	429a      	cmp	r2, r3
 8016668:	d118      	bne.n	801669c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801666a:	68fb      	ldr	r3, [r7, #12]
 801666c:	681a      	ldr	r2, [r3, #0]
 801666e:	4b15      	ldr	r3, [pc, #84]	; (80166c4 <prvInsertBlockIntoFreeList+0xb0>)
 8016670:	681b      	ldr	r3, [r3, #0]
 8016672:	429a      	cmp	r2, r3
 8016674:	d00d      	beq.n	8016692 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8016676:	687b      	ldr	r3, [r7, #4]
 8016678:	685a      	ldr	r2, [r3, #4]
 801667a:	68fb      	ldr	r3, [r7, #12]
 801667c:	681b      	ldr	r3, [r3, #0]
 801667e:	685b      	ldr	r3, [r3, #4]
 8016680:	441a      	add	r2, r3
 8016682:	687b      	ldr	r3, [r7, #4]
 8016684:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8016686:	68fb      	ldr	r3, [r7, #12]
 8016688:	681b      	ldr	r3, [r3, #0]
 801668a:	681a      	ldr	r2, [r3, #0]
 801668c:	687b      	ldr	r3, [r7, #4]
 801668e:	601a      	str	r2, [r3, #0]
 8016690:	e008      	b.n	80166a4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8016692:	4b0c      	ldr	r3, [pc, #48]	; (80166c4 <prvInsertBlockIntoFreeList+0xb0>)
 8016694:	681a      	ldr	r2, [r3, #0]
 8016696:	687b      	ldr	r3, [r7, #4]
 8016698:	601a      	str	r2, [r3, #0]
 801669a:	e003      	b.n	80166a4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801669c:	68fb      	ldr	r3, [r7, #12]
 801669e:	681a      	ldr	r2, [r3, #0]
 80166a0:	687b      	ldr	r3, [r7, #4]
 80166a2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80166a4:	68fa      	ldr	r2, [r7, #12]
 80166a6:	687b      	ldr	r3, [r7, #4]
 80166a8:	429a      	cmp	r2, r3
 80166aa:	d002      	beq.n	80166b2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80166ac:	68fb      	ldr	r3, [r7, #12]
 80166ae:	687a      	ldr	r2, [r7, #4]
 80166b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80166b2:	bf00      	nop
 80166b4:	3714      	adds	r7, #20
 80166b6:	46bd      	mov	sp, r7
 80166b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166bc:	4770      	bx	lr
 80166be:	bf00      	nop
 80166c0:	24024b60 	.word	0x24024b60
 80166c4:	24024b68 	.word	0x24024b68

080166c8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80166c8:	b480      	push	{r7}
 80166ca:	b083      	sub	sp, #12
 80166cc:	af00      	add	r7, sp, #0
 80166ce:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80166d0:	687b      	ldr	r3, [r7, #4]
 80166d2:	f103 0208 	add.w	r2, r3, #8
 80166d6:	687b      	ldr	r3, [r7, #4]
 80166d8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80166da:	687b      	ldr	r3, [r7, #4]
 80166dc:	f04f 32ff 	mov.w	r2, #4294967295
 80166e0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80166e2:	687b      	ldr	r3, [r7, #4]
 80166e4:	f103 0208 	add.w	r2, r3, #8
 80166e8:	687b      	ldr	r3, [r7, #4]
 80166ea:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80166ec:	687b      	ldr	r3, [r7, #4]
 80166ee:	f103 0208 	add.w	r2, r3, #8
 80166f2:	687b      	ldr	r3, [r7, #4]
 80166f4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80166f6:	687b      	ldr	r3, [r7, #4]
 80166f8:	2200      	movs	r2, #0
 80166fa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80166fc:	bf00      	nop
 80166fe:	370c      	adds	r7, #12
 8016700:	46bd      	mov	sp, r7
 8016702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016706:	4770      	bx	lr

08016708 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8016708:	b480      	push	{r7}
 801670a:	b083      	sub	sp, #12
 801670c:	af00      	add	r7, sp, #0
 801670e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8016710:	687b      	ldr	r3, [r7, #4]
 8016712:	2200      	movs	r2, #0
 8016714:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8016716:	bf00      	nop
 8016718:	370c      	adds	r7, #12
 801671a:	46bd      	mov	sp, r7
 801671c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016720:	4770      	bx	lr

08016722 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8016722:	b480      	push	{r7}
 8016724:	b085      	sub	sp, #20
 8016726:	af00      	add	r7, sp, #0
 8016728:	6078      	str	r0, [r7, #4]
 801672a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 801672c:	687b      	ldr	r3, [r7, #4]
 801672e:	685b      	ldr	r3, [r3, #4]
 8016730:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8016732:	683b      	ldr	r3, [r7, #0]
 8016734:	68fa      	ldr	r2, [r7, #12]
 8016736:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8016738:	68fb      	ldr	r3, [r7, #12]
 801673a:	689a      	ldr	r2, [r3, #8]
 801673c:	683b      	ldr	r3, [r7, #0]
 801673e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8016740:	68fb      	ldr	r3, [r7, #12]
 8016742:	689b      	ldr	r3, [r3, #8]
 8016744:	683a      	ldr	r2, [r7, #0]
 8016746:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8016748:	68fb      	ldr	r3, [r7, #12]
 801674a:	683a      	ldr	r2, [r7, #0]
 801674c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801674e:	683b      	ldr	r3, [r7, #0]
 8016750:	687a      	ldr	r2, [r7, #4]
 8016752:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8016754:	687b      	ldr	r3, [r7, #4]
 8016756:	681b      	ldr	r3, [r3, #0]
 8016758:	1c5a      	adds	r2, r3, #1
 801675a:	687b      	ldr	r3, [r7, #4]
 801675c:	601a      	str	r2, [r3, #0]
}
 801675e:	bf00      	nop
 8016760:	3714      	adds	r7, #20
 8016762:	46bd      	mov	sp, r7
 8016764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016768:	4770      	bx	lr

0801676a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801676a:	b480      	push	{r7}
 801676c:	b085      	sub	sp, #20
 801676e:	af00      	add	r7, sp, #0
 8016770:	6078      	str	r0, [r7, #4]
 8016772:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8016774:	683b      	ldr	r3, [r7, #0]
 8016776:	681b      	ldr	r3, [r3, #0]
 8016778:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801677a:	68bb      	ldr	r3, [r7, #8]
 801677c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016780:	d103      	bne.n	801678a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8016782:	687b      	ldr	r3, [r7, #4]
 8016784:	691b      	ldr	r3, [r3, #16]
 8016786:	60fb      	str	r3, [r7, #12]
 8016788:	e00c      	b.n	80167a4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801678a:	687b      	ldr	r3, [r7, #4]
 801678c:	3308      	adds	r3, #8
 801678e:	60fb      	str	r3, [r7, #12]
 8016790:	e002      	b.n	8016798 <vListInsert+0x2e>
 8016792:	68fb      	ldr	r3, [r7, #12]
 8016794:	685b      	ldr	r3, [r3, #4]
 8016796:	60fb      	str	r3, [r7, #12]
 8016798:	68fb      	ldr	r3, [r7, #12]
 801679a:	685b      	ldr	r3, [r3, #4]
 801679c:	681b      	ldr	r3, [r3, #0]
 801679e:	68ba      	ldr	r2, [r7, #8]
 80167a0:	429a      	cmp	r2, r3
 80167a2:	d2f6      	bcs.n	8016792 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80167a4:	68fb      	ldr	r3, [r7, #12]
 80167a6:	685a      	ldr	r2, [r3, #4]
 80167a8:	683b      	ldr	r3, [r7, #0]
 80167aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80167ac:	683b      	ldr	r3, [r7, #0]
 80167ae:	685b      	ldr	r3, [r3, #4]
 80167b0:	683a      	ldr	r2, [r7, #0]
 80167b2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80167b4:	683b      	ldr	r3, [r7, #0]
 80167b6:	68fa      	ldr	r2, [r7, #12]
 80167b8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80167ba:	68fb      	ldr	r3, [r7, #12]
 80167bc:	683a      	ldr	r2, [r7, #0]
 80167be:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80167c0:	683b      	ldr	r3, [r7, #0]
 80167c2:	687a      	ldr	r2, [r7, #4]
 80167c4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80167c6:	687b      	ldr	r3, [r7, #4]
 80167c8:	681b      	ldr	r3, [r3, #0]
 80167ca:	1c5a      	adds	r2, r3, #1
 80167cc:	687b      	ldr	r3, [r7, #4]
 80167ce:	601a      	str	r2, [r3, #0]
}
 80167d0:	bf00      	nop
 80167d2:	3714      	adds	r7, #20
 80167d4:	46bd      	mov	sp, r7
 80167d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167da:	4770      	bx	lr

080167dc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80167dc:	b480      	push	{r7}
 80167de:	b085      	sub	sp, #20
 80167e0:	af00      	add	r7, sp, #0
 80167e2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80167e4:	687b      	ldr	r3, [r7, #4]
 80167e6:	691b      	ldr	r3, [r3, #16]
 80167e8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80167ea:	687b      	ldr	r3, [r7, #4]
 80167ec:	685b      	ldr	r3, [r3, #4]
 80167ee:	687a      	ldr	r2, [r7, #4]
 80167f0:	6892      	ldr	r2, [r2, #8]
 80167f2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80167f4:	687b      	ldr	r3, [r7, #4]
 80167f6:	689b      	ldr	r3, [r3, #8]
 80167f8:	687a      	ldr	r2, [r7, #4]
 80167fa:	6852      	ldr	r2, [r2, #4]
 80167fc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80167fe:	68fb      	ldr	r3, [r7, #12]
 8016800:	685b      	ldr	r3, [r3, #4]
 8016802:	687a      	ldr	r2, [r7, #4]
 8016804:	429a      	cmp	r2, r3
 8016806:	d103      	bne.n	8016810 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8016808:	687b      	ldr	r3, [r7, #4]
 801680a:	689a      	ldr	r2, [r3, #8]
 801680c:	68fb      	ldr	r3, [r7, #12]
 801680e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8016810:	687b      	ldr	r3, [r7, #4]
 8016812:	2200      	movs	r2, #0
 8016814:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8016816:	68fb      	ldr	r3, [r7, #12]
 8016818:	681b      	ldr	r3, [r3, #0]
 801681a:	1e5a      	subs	r2, r3, #1
 801681c:	68fb      	ldr	r3, [r7, #12]
 801681e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8016820:	68fb      	ldr	r3, [r7, #12]
 8016822:	681b      	ldr	r3, [r3, #0]
}
 8016824:	4618      	mov	r0, r3
 8016826:	3714      	adds	r7, #20
 8016828:	46bd      	mov	sp, r7
 801682a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801682e:	4770      	bx	lr

08016830 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8016830:	b480      	push	{r7}
 8016832:	b085      	sub	sp, #20
 8016834:	af00      	add	r7, sp, #0
 8016836:	60f8      	str	r0, [r7, #12]
 8016838:	60b9      	str	r1, [r7, #8]
 801683a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801683c:	68fb      	ldr	r3, [r7, #12]
 801683e:	3b04      	subs	r3, #4
 8016840:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8016842:	68fb      	ldr	r3, [r7, #12]
 8016844:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8016848:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801684a:	68fb      	ldr	r3, [r7, #12]
 801684c:	3b04      	subs	r3, #4
 801684e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8016850:	68bb      	ldr	r3, [r7, #8]
 8016852:	f023 0201 	bic.w	r2, r3, #1
 8016856:	68fb      	ldr	r3, [r7, #12]
 8016858:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801685a:	68fb      	ldr	r3, [r7, #12]
 801685c:	3b04      	subs	r3, #4
 801685e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8016860:	4a0c      	ldr	r2, [pc, #48]	; (8016894 <pxPortInitialiseStack+0x64>)
 8016862:	68fb      	ldr	r3, [r7, #12]
 8016864:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8016866:	68fb      	ldr	r3, [r7, #12]
 8016868:	3b14      	subs	r3, #20
 801686a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801686c:	687a      	ldr	r2, [r7, #4]
 801686e:	68fb      	ldr	r3, [r7, #12]
 8016870:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8016872:	68fb      	ldr	r3, [r7, #12]
 8016874:	3b04      	subs	r3, #4
 8016876:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8016878:	68fb      	ldr	r3, [r7, #12]
 801687a:	f06f 0202 	mvn.w	r2, #2
 801687e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8016880:	68fb      	ldr	r3, [r7, #12]
 8016882:	3b20      	subs	r3, #32
 8016884:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8016886:	68fb      	ldr	r3, [r7, #12]
}
 8016888:	4618      	mov	r0, r3
 801688a:	3714      	adds	r7, #20
 801688c:	46bd      	mov	sp, r7
 801688e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016892:	4770      	bx	lr
 8016894:	08016899 	.word	0x08016899

08016898 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8016898:	b480      	push	{r7}
 801689a:	b085      	sub	sp, #20
 801689c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801689e:	2300      	movs	r3, #0
 80168a0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80168a2:	4b12      	ldr	r3, [pc, #72]	; (80168ec <prvTaskExitError+0x54>)
 80168a4:	681b      	ldr	r3, [r3, #0]
 80168a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80168aa:	d00a      	beq.n	80168c2 <prvTaskExitError+0x2a>
	__asm volatile
 80168ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80168b0:	f383 8811 	msr	BASEPRI, r3
 80168b4:	f3bf 8f6f 	isb	sy
 80168b8:	f3bf 8f4f 	dsb	sy
 80168bc:	60fb      	str	r3, [r7, #12]
}
 80168be:	bf00      	nop
 80168c0:	e7fe      	b.n	80168c0 <prvTaskExitError+0x28>
	__asm volatile
 80168c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80168c6:	f383 8811 	msr	BASEPRI, r3
 80168ca:	f3bf 8f6f 	isb	sy
 80168ce:	f3bf 8f4f 	dsb	sy
 80168d2:	60bb      	str	r3, [r7, #8]
}
 80168d4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80168d6:	bf00      	nop
 80168d8:	687b      	ldr	r3, [r7, #4]
 80168da:	2b00      	cmp	r3, #0
 80168dc:	d0fc      	beq.n	80168d8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80168de:	bf00      	nop
 80168e0:	bf00      	nop
 80168e2:	3714      	adds	r7, #20
 80168e4:	46bd      	mov	sp, r7
 80168e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168ea:	4770      	bx	lr
 80168ec:	24000064 	.word	0x24000064

080168f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80168f0:	4b07      	ldr	r3, [pc, #28]	; (8016910 <pxCurrentTCBConst2>)
 80168f2:	6819      	ldr	r1, [r3, #0]
 80168f4:	6808      	ldr	r0, [r1, #0]
 80168f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80168fa:	f380 8809 	msr	PSP, r0
 80168fe:	f3bf 8f6f 	isb	sy
 8016902:	f04f 0000 	mov.w	r0, #0
 8016906:	f380 8811 	msr	BASEPRI, r0
 801690a:	4770      	bx	lr
 801690c:	f3af 8000 	nop.w

08016910 <pxCurrentTCBConst2>:
 8016910:	24024bc8 	.word	0x24024bc8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8016914:	bf00      	nop
 8016916:	bf00      	nop

08016918 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8016918:	4808      	ldr	r0, [pc, #32]	; (801693c <prvPortStartFirstTask+0x24>)
 801691a:	6800      	ldr	r0, [r0, #0]
 801691c:	6800      	ldr	r0, [r0, #0]
 801691e:	f380 8808 	msr	MSP, r0
 8016922:	f04f 0000 	mov.w	r0, #0
 8016926:	f380 8814 	msr	CONTROL, r0
 801692a:	b662      	cpsie	i
 801692c:	b661      	cpsie	f
 801692e:	f3bf 8f4f 	dsb	sy
 8016932:	f3bf 8f6f 	isb	sy
 8016936:	df00      	svc	0
 8016938:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801693a:	bf00      	nop
 801693c:	e000ed08 	.word	0xe000ed08

08016940 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8016940:	b580      	push	{r7, lr}
 8016942:	b086      	sub	sp, #24
 8016944:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8016946:	4b46      	ldr	r3, [pc, #280]	; (8016a60 <xPortStartScheduler+0x120>)
 8016948:	681b      	ldr	r3, [r3, #0]
 801694a:	4a46      	ldr	r2, [pc, #280]	; (8016a64 <xPortStartScheduler+0x124>)
 801694c:	4293      	cmp	r3, r2
 801694e:	d10a      	bne.n	8016966 <xPortStartScheduler+0x26>
	__asm volatile
 8016950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016954:	f383 8811 	msr	BASEPRI, r3
 8016958:	f3bf 8f6f 	isb	sy
 801695c:	f3bf 8f4f 	dsb	sy
 8016960:	613b      	str	r3, [r7, #16]
}
 8016962:	bf00      	nop
 8016964:	e7fe      	b.n	8016964 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8016966:	4b3e      	ldr	r3, [pc, #248]	; (8016a60 <xPortStartScheduler+0x120>)
 8016968:	681b      	ldr	r3, [r3, #0]
 801696a:	4a3f      	ldr	r2, [pc, #252]	; (8016a68 <xPortStartScheduler+0x128>)
 801696c:	4293      	cmp	r3, r2
 801696e:	d10a      	bne.n	8016986 <xPortStartScheduler+0x46>
	__asm volatile
 8016970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016974:	f383 8811 	msr	BASEPRI, r3
 8016978:	f3bf 8f6f 	isb	sy
 801697c:	f3bf 8f4f 	dsb	sy
 8016980:	60fb      	str	r3, [r7, #12]
}
 8016982:	bf00      	nop
 8016984:	e7fe      	b.n	8016984 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8016986:	4b39      	ldr	r3, [pc, #228]	; (8016a6c <xPortStartScheduler+0x12c>)
 8016988:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801698a:	697b      	ldr	r3, [r7, #20]
 801698c:	781b      	ldrb	r3, [r3, #0]
 801698e:	b2db      	uxtb	r3, r3
 8016990:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8016992:	697b      	ldr	r3, [r7, #20]
 8016994:	22ff      	movs	r2, #255	; 0xff
 8016996:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8016998:	697b      	ldr	r3, [r7, #20]
 801699a:	781b      	ldrb	r3, [r3, #0]
 801699c:	b2db      	uxtb	r3, r3
 801699e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80169a0:	78fb      	ldrb	r3, [r7, #3]
 80169a2:	b2db      	uxtb	r3, r3
 80169a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80169a8:	b2da      	uxtb	r2, r3
 80169aa:	4b31      	ldr	r3, [pc, #196]	; (8016a70 <xPortStartScheduler+0x130>)
 80169ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80169ae:	4b31      	ldr	r3, [pc, #196]	; (8016a74 <xPortStartScheduler+0x134>)
 80169b0:	2207      	movs	r2, #7
 80169b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80169b4:	e009      	b.n	80169ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80169b6:	4b2f      	ldr	r3, [pc, #188]	; (8016a74 <xPortStartScheduler+0x134>)
 80169b8:	681b      	ldr	r3, [r3, #0]
 80169ba:	3b01      	subs	r3, #1
 80169bc:	4a2d      	ldr	r2, [pc, #180]	; (8016a74 <xPortStartScheduler+0x134>)
 80169be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80169c0:	78fb      	ldrb	r3, [r7, #3]
 80169c2:	b2db      	uxtb	r3, r3
 80169c4:	005b      	lsls	r3, r3, #1
 80169c6:	b2db      	uxtb	r3, r3
 80169c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80169ca:	78fb      	ldrb	r3, [r7, #3]
 80169cc:	b2db      	uxtb	r3, r3
 80169ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80169d2:	2b80      	cmp	r3, #128	; 0x80
 80169d4:	d0ef      	beq.n	80169b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80169d6:	4b27      	ldr	r3, [pc, #156]	; (8016a74 <xPortStartScheduler+0x134>)
 80169d8:	681b      	ldr	r3, [r3, #0]
 80169da:	f1c3 0307 	rsb	r3, r3, #7
 80169de:	2b04      	cmp	r3, #4
 80169e0:	d00a      	beq.n	80169f8 <xPortStartScheduler+0xb8>
	__asm volatile
 80169e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80169e6:	f383 8811 	msr	BASEPRI, r3
 80169ea:	f3bf 8f6f 	isb	sy
 80169ee:	f3bf 8f4f 	dsb	sy
 80169f2:	60bb      	str	r3, [r7, #8]
}
 80169f4:	bf00      	nop
 80169f6:	e7fe      	b.n	80169f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80169f8:	4b1e      	ldr	r3, [pc, #120]	; (8016a74 <xPortStartScheduler+0x134>)
 80169fa:	681b      	ldr	r3, [r3, #0]
 80169fc:	021b      	lsls	r3, r3, #8
 80169fe:	4a1d      	ldr	r2, [pc, #116]	; (8016a74 <xPortStartScheduler+0x134>)
 8016a00:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8016a02:	4b1c      	ldr	r3, [pc, #112]	; (8016a74 <xPortStartScheduler+0x134>)
 8016a04:	681b      	ldr	r3, [r3, #0]
 8016a06:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8016a0a:	4a1a      	ldr	r2, [pc, #104]	; (8016a74 <xPortStartScheduler+0x134>)
 8016a0c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8016a0e:	687b      	ldr	r3, [r7, #4]
 8016a10:	b2da      	uxtb	r2, r3
 8016a12:	697b      	ldr	r3, [r7, #20]
 8016a14:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8016a16:	4b18      	ldr	r3, [pc, #96]	; (8016a78 <xPortStartScheduler+0x138>)
 8016a18:	681b      	ldr	r3, [r3, #0]
 8016a1a:	4a17      	ldr	r2, [pc, #92]	; (8016a78 <xPortStartScheduler+0x138>)
 8016a1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8016a20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8016a22:	4b15      	ldr	r3, [pc, #84]	; (8016a78 <xPortStartScheduler+0x138>)
 8016a24:	681b      	ldr	r3, [r3, #0]
 8016a26:	4a14      	ldr	r2, [pc, #80]	; (8016a78 <xPortStartScheduler+0x138>)
 8016a28:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8016a2c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8016a2e:	f000 f8dd 	bl	8016bec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8016a32:	4b12      	ldr	r3, [pc, #72]	; (8016a7c <xPortStartScheduler+0x13c>)
 8016a34:	2200      	movs	r2, #0
 8016a36:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8016a38:	f000 f8fc 	bl	8016c34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8016a3c:	4b10      	ldr	r3, [pc, #64]	; (8016a80 <xPortStartScheduler+0x140>)
 8016a3e:	681b      	ldr	r3, [r3, #0]
 8016a40:	4a0f      	ldr	r2, [pc, #60]	; (8016a80 <xPortStartScheduler+0x140>)
 8016a42:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8016a46:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8016a48:	f7ff ff66 	bl	8016918 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8016a4c:	f001 fdfa 	bl	8018644 <vTaskSwitchContext>
	prvTaskExitError();
 8016a50:	f7ff ff22 	bl	8016898 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8016a54:	2300      	movs	r3, #0
}
 8016a56:	4618      	mov	r0, r3
 8016a58:	3718      	adds	r7, #24
 8016a5a:	46bd      	mov	sp, r7
 8016a5c:	bd80      	pop	{r7, pc}
 8016a5e:	bf00      	nop
 8016a60:	e000ed00 	.word	0xe000ed00
 8016a64:	410fc271 	.word	0x410fc271
 8016a68:	410fc270 	.word	0x410fc270
 8016a6c:	e000e400 	.word	0xe000e400
 8016a70:	24024b80 	.word	0x24024b80
 8016a74:	24024b84 	.word	0x24024b84
 8016a78:	e000ed20 	.word	0xe000ed20
 8016a7c:	24000064 	.word	0x24000064
 8016a80:	e000ef34 	.word	0xe000ef34

08016a84 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8016a84:	b480      	push	{r7}
 8016a86:	b083      	sub	sp, #12
 8016a88:	af00      	add	r7, sp, #0
	__asm volatile
 8016a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a8e:	f383 8811 	msr	BASEPRI, r3
 8016a92:	f3bf 8f6f 	isb	sy
 8016a96:	f3bf 8f4f 	dsb	sy
 8016a9a:	607b      	str	r3, [r7, #4]
}
 8016a9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8016a9e:	4b0f      	ldr	r3, [pc, #60]	; (8016adc <vPortEnterCritical+0x58>)
 8016aa0:	681b      	ldr	r3, [r3, #0]
 8016aa2:	3301      	adds	r3, #1
 8016aa4:	4a0d      	ldr	r2, [pc, #52]	; (8016adc <vPortEnterCritical+0x58>)
 8016aa6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8016aa8:	4b0c      	ldr	r3, [pc, #48]	; (8016adc <vPortEnterCritical+0x58>)
 8016aaa:	681b      	ldr	r3, [r3, #0]
 8016aac:	2b01      	cmp	r3, #1
 8016aae:	d10f      	bne.n	8016ad0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8016ab0:	4b0b      	ldr	r3, [pc, #44]	; (8016ae0 <vPortEnterCritical+0x5c>)
 8016ab2:	681b      	ldr	r3, [r3, #0]
 8016ab4:	b2db      	uxtb	r3, r3
 8016ab6:	2b00      	cmp	r3, #0
 8016ab8:	d00a      	beq.n	8016ad0 <vPortEnterCritical+0x4c>
	__asm volatile
 8016aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016abe:	f383 8811 	msr	BASEPRI, r3
 8016ac2:	f3bf 8f6f 	isb	sy
 8016ac6:	f3bf 8f4f 	dsb	sy
 8016aca:	603b      	str	r3, [r7, #0]
}
 8016acc:	bf00      	nop
 8016ace:	e7fe      	b.n	8016ace <vPortEnterCritical+0x4a>
	}
}
 8016ad0:	bf00      	nop
 8016ad2:	370c      	adds	r7, #12
 8016ad4:	46bd      	mov	sp, r7
 8016ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ada:	4770      	bx	lr
 8016adc:	24000064 	.word	0x24000064
 8016ae0:	e000ed04 	.word	0xe000ed04

08016ae4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8016ae4:	b480      	push	{r7}
 8016ae6:	b083      	sub	sp, #12
 8016ae8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8016aea:	4b12      	ldr	r3, [pc, #72]	; (8016b34 <vPortExitCritical+0x50>)
 8016aec:	681b      	ldr	r3, [r3, #0]
 8016aee:	2b00      	cmp	r3, #0
 8016af0:	d10a      	bne.n	8016b08 <vPortExitCritical+0x24>
	__asm volatile
 8016af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016af6:	f383 8811 	msr	BASEPRI, r3
 8016afa:	f3bf 8f6f 	isb	sy
 8016afe:	f3bf 8f4f 	dsb	sy
 8016b02:	607b      	str	r3, [r7, #4]
}
 8016b04:	bf00      	nop
 8016b06:	e7fe      	b.n	8016b06 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8016b08:	4b0a      	ldr	r3, [pc, #40]	; (8016b34 <vPortExitCritical+0x50>)
 8016b0a:	681b      	ldr	r3, [r3, #0]
 8016b0c:	3b01      	subs	r3, #1
 8016b0e:	4a09      	ldr	r2, [pc, #36]	; (8016b34 <vPortExitCritical+0x50>)
 8016b10:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8016b12:	4b08      	ldr	r3, [pc, #32]	; (8016b34 <vPortExitCritical+0x50>)
 8016b14:	681b      	ldr	r3, [r3, #0]
 8016b16:	2b00      	cmp	r3, #0
 8016b18:	d105      	bne.n	8016b26 <vPortExitCritical+0x42>
 8016b1a:	2300      	movs	r3, #0
 8016b1c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8016b1e:	683b      	ldr	r3, [r7, #0]
 8016b20:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8016b24:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8016b26:	bf00      	nop
 8016b28:	370c      	adds	r7, #12
 8016b2a:	46bd      	mov	sp, r7
 8016b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b30:	4770      	bx	lr
 8016b32:	bf00      	nop
 8016b34:	24000064 	.word	0x24000064
	...

08016b40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8016b40:	f3ef 8009 	mrs	r0, PSP
 8016b44:	f3bf 8f6f 	isb	sy
 8016b48:	4b15      	ldr	r3, [pc, #84]	; (8016ba0 <pxCurrentTCBConst>)
 8016b4a:	681a      	ldr	r2, [r3, #0]
 8016b4c:	f01e 0f10 	tst.w	lr, #16
 8016b50:	bf08      	it	eq
 8016b52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8016b56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b5a:	6010      	str	r0, [r2, #0]
 8016b5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8016b60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8016b64:	f380 8811 	msr	BASEPRI, r0
 8016b68:	f3bf 8f4f 	dsb	sy
 8016b6c:	f3bf 8f6f 	isb	sy
 8016b70:	f001 fd68 	bl	8018644 <vTaskSwitchContext>
 8016b74:	f04f 0000 	mov.w	r0, #0
 8016b78:	f380 8811 	msr	BASEPRI, r0
 8016b7c:	bc09      	pop	{r0, r3}
 8016b7e:	6819      	ldr	r1, [r3, #0]
 8016b80:	6808      	ldr	r0, [r1, #0]
 8016b82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b86:	f01e 0f10 	tst.w	lr, #16
 8016b8a:	bf08      	it	eq
 8016b8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8016b90:	f380 8809 	msr	PSP, r0
 8016b94:	f3bf 8f6f 	isb	sy
 8016b98:	4770      	bx	lr
 8016b9a:	bf00      	nop
 8016b9c:	f3af 8000 	nop.w

08016ba0 <pxCurrentTCBConst>:
 8016ba0:	24024bc8 	.word	0x24024bc8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8016ba4:	bf00      	nop
 8016ba6:	bf00      	nop

08016ba8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8016ba8:	b580      	push	{r7, lr}
 8016baa:	b082      	sub	sp, #8
 8016bac:	af00      	add	r7, sp, #0
	__asm volatile
 8016bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016bb2:	f383 8811 	msr	BASEPRI, r3
 8016bb6:	f3bf 8f6f 	isb	sy
 8016bba:	f3bf 8f4f 	dsb	sy
 8016bbe:	607b      	str	r3, [r7, #4]
}
 8016bc0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8016bc2:	f001 fc47 	bl	8018454 <xTaskIncrementTick>
 8016bc6:	4603      	mov	r3, r0
 8016bc8:	2b00      	cmp	r3, #0
 8016bca:	d003      	beq.n	8016bd4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8016bcc:	4b06      	ldr	r3, [pc, #24]	; (8016be8 <xPortSysTickHandler+0x40>)
 8016bce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016bd2:	601a      	str	r2, [r3, #0]
 8016bd4:	2300      	movs	r3, #0
 8016bd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8016bd8:	683b      	ldr	r3, [r7, #0]
 8016bda:	f383 8811 	msr	BASEPRI, r3
}
 8016bde:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8016be0:	bf00      	nop
 8016be2:	3708      	adds	r7, #8
 8016be4:	46bd      	mov	sp, r7
 8016be6:	bd80      	pop	{r7, pc}
 8016be8:	e000ed04 	.word	0xe000ed04

08016bec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8016bec:	b480      	push	{r7}
 8016bee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8016bf0:	4b0b      	ldr	r3, [pc, #44]	; (8016c20 <vPortSetupTimerInterrupt+0x34>)
 8016bf2:	2200      	movs	r2, #0
 8016bf4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8016bf6:	4b0b      	ldr	r3, [pc, #44]	; (8016c24 <vPortSetupTimerInterrupt+0x38>)
 8016bf8:	2200      	movs	r2, #0
 8016bfa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8016bfc:	4b0a      	ldr	r3, [pc, #40]	; (8016c28 <vPortSetupTimerInterrupt+0x3c>)
 8016bfe:	681b      	ldr	r3, [r3, #0]
 8016c00:	4a0a      	ldr	r2, [pc, #40]	; (8016c2c <vPortSetupTimerInterrupt+0x40>)
 8016c02:	fba2 2303 	umull	r2, r3, r2, r3
 8016c06:	099b      	lsrs	r3, r3, #6
 8016c08:	4a09      	ldr	r2, [pc, #36]	; (8016c30 <vPortSetupTimerInterrupt+0x44>)
 8016c0a:	3b01      	subs	r3, #1
 8016c0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8016c0e:	4b04      	ldr	r3, [pc, #16]	; (8016c20 <vPortSetupTimerInterrupt+0x34>)
 8016c10:	2207      	movs	r2, #7
 8016c12:	601a      	str	r2, [r3, #0]
}
 8016c14:	bf00      	nop
 8016c16:	46bd      	mov	sp, r7
 8016c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c1c:	4770      	bx	lr
 8016c1e:	bf00      	nop
 8016c20:	e000e010 	.word	0xe000e010
 8016c24:	e000e018 	.word	0xe000e018
 8016c28:	24000054 	.word	0x24000054
 8016c2c:	10624dd3 	.word	0x10624dd3
 8016c30:	e000e014 	.word	0xe000e014

08016c34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8016c34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8016c44 <vPortEnableVFP+0x10>
 8016c38:	6801      	ldr	r1, [r0, #0]
 8016c3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8016c3e:	6001      	str	r1, [r0, #0]
 8016c40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8016c42:	bf00      	nop
 8016c44:	e000ed88 	.word	0xe000ed88

08016c48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8016c48:	b480      	push	{r7}
 8016c4a:	b085      	sub	sp, #20
 8016c4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8016c4e:	f3ef 8305 	mrs	r3, IPSR
 8016c52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8016c54:	68fb      	ldr	r3, [r7, #12]
 8016c56:	2b0f      	cmp	r3, #15
 8016c58:	d914      	bls.n	8016c84 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8016c5a:	4a17      	ldr	r2, [pc, #92]	; (8016cb8 <vPortValidateInterruptPriority+0x70>)
 8016c5c:	68fb      	ldr	r3, [r7, #12]
 8016c5e:	4413      	add	r3, r2
 8016c60:	781b      	ldrb	r3, [r3, #0]
 8016c62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8016c64:	4b15      	ldr	r3, [pc, #84]	; (8016cbc <vPortValidateInterruptPriority+0x74>)
 8016c66:	781b      	ldrb	r3, [r3, #0]
 8016c68:	7afa      	ldrb	r2, [r7, #11]
 8016c6a:	429a      	cmp	r2, r3
 8016c6c:	d20a      	bcs.n	8016c84 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8016c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016c72:	f383 8811 	msr	BASEPRI, r3
 8016c76:	f3bf 8f6f 	isb	sy
 8016c7a:	f3bf 8f4f 	dsb	sy
 8016c7e:	607b      	str	r3, [r7, #4]
}
 8016c80:	bf00      	nop
 8016c82:	e7fe      	b.n	8016c82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8016c84:	4b0e      	ldr	r3, [pc, #56]	; (8016cc0 <vPortValidateInterruptPriority+0x78>)
 8016c86:	681b      	ldr	r3, [r3, #0]
 8016c88:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8016c8c:	4b0d      	ldr	r3, [pc, #52]	; (8016cc4 <vPortValidateInterruptPriority+0x7c>)
 8016c8e:	681b      	ldr	r3, [r3, #0]
 8016c90:	429a      	cmp	r2, r3
 8016c92:	d90a      	bls.n	8016caa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8016c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016c98:	f383 8811 	msr	BASEPRI, r3
 8016c9c:	f3bf 8f6f 	isb	sy
 8016ca0:	f3bf 8f4f 	dsb	sy
 8016ca4:	603b      	str	r3, [r7, #0]
}
 8016ca6:	bf00      	nop
 8016ca8:	e7fe      	b.n	8016ca8 <vPortValidateInterruptPriority+0x60>
	}
 8016caa:	bf00      	nop
 8016cac:	3714      	adds	r7, #20
 8016cae:	46bd      	mov	sp, r7
 8016cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cb4:	4770      	bx	lr
 8016cb6:	bf00      	nop
 8016cb8:	e000e3f0 	.word	0xe000e3f0
 8016cbc:	24024b80 	.word	0x24024b80
 8016cc0:	e000ed0c 	.word	0xe000ed0c
 8016cc4:	24024b84 	.word	0x24024b84

08016cc8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8016cc8:	b580      	push	{r7, lr}
 8016cca:	b084      	sub	sp, #16
 8016ccc:	af00      	add	r7, sp, #0
 8016cce:	6078      	str	r0, [r7, #4]
 8016cd0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8016cd2:	687b      	ldr	r3, [r7, #4]
 8016cd4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8016cd6:	68fb      	ldr	r3, [r7, #12]
 8016cd8:	2b00      	cmp	r3, #0
 8016cda:	d10a      	bne.n	8016cf2 <xQueueGenericReset+0x2a>
	__asm volatile
 8016cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ce0:	f383 8811 	msr	BASEPRI, r3
 8016ce4:	f3bf 8f6f 	isb	sy
 8016ce8:	f3bf 8f4f 	dsb	sy
 8016cec:	60bb      	str	r3, [r7, #8]
}
 8016cee:	bf00      	nop
 8016cf0:	e7fe      	b.n	8016cf0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8016cf2:	f7ff fec7 	bl	8016a84 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8016cf6:	68fb      	ldr	r3, [r7, #12]
 8016cf8:	681a      	ldr	r2, [r3, #0]
 8016cfa:	68fb      	ldr	r3, [r7, #12]
 8016cfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016cfe:	68f9      	ldr	r1, [r7, #12]
 8016d00:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8016d02:	fb01 f303 	mul.w	r3, r1, r3
 8016d06:	441a      	add	r2, r3
 8016d08:	68fb      	ldr	r3, [r7, #12]
 8016d0a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8016d0c:	68fb      	ldr	r3, [r7, #12]
 8016d0e:	2200      	movs	r2, #0
 8016d10:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8016d12:	68fb      	ldr	r3, [r7, #12]
 8016d14:	681a      	ldr	r2, [r3, #0]
 8016d16:	68fb      	ldr	r3, [r7, #12]
 8016d18:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8016d1a:	68fb      	ldr	r3, [r7, #12]
 8016d1c:	681a      	ldr	r2, [r3, #0]
 8016d1e:	68fb      	ldr	r3, [r7, #12]
 8016d20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016d22:	3b01      	subs	r3, #1
 8016d24:	68f9      	ldr	r1, [r7, #12]
 8016d26:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8016d28:	fb01 f303 	mul.w	r3, r1, r3
 8016d2c:	441a      	add	r2, r3
 8016d2e:	68fb      	ldr	r3, [r7, #12]
 8016d30:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8016d32:	68fb      	ldr	r3, [r7, #12]
 8016d34:	22ff      	movs	r2, #255	; 0xff
 8016d36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8016d3a:	68fb      	ldr	r3, [r7, #12]
 8016d3c:	22ff      	movs	r2, #255	; 0xff
 8016d3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8016d42:	683b      	ldr	r3, [r7, #0]
 8016d44:	2b00      	cmp	r3, #0
 8016d46:	d114      	bne.n	8016d72 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016d48:	68fb      	ldr	r3, [r7, #12]
 8016d4a:	691b      	ldr	r3, [r3, #16]
 8016d4c:	2b00      	cmp	r3, #0
 8016d4e:	d01a      	beq.n	8016d86 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016d50:	68fb      	ldr	r3, [r7, #12]
 8016d52:	3310      	adds	r3, #16
 8016d54:	4618      	mov	r0, r3
 8016d56:	f001 fd2d 	bl	80187b4 <xTaskRemoveFromEventList>
 8016d5a:	4603      	mov	r3, r0
 8016d5c:	2b00      	cmp	r3, #0
 8016d5e:	d012      	beq.n	8016d86 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8016d60:	4b0c      	ldr	r3, [pc, #48]	; (8016d94 <xQueueGenericReset+0xcc>)
 8016d62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016d66:	601a      	str	r2, [r3, #0]
 8016d68:	f3bf 8f4f 	dsb	sy
 8016d6c:	f3bf 8f6f 	isb	sy
 8016d70:	e009      	b.n	8016d86 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8016d72:	68fb      	ldr	r3, [r7, #12]
 8016d74:	3310      	adds	r3, #16
 8016d76:	4618      	mov	r0, r3
 8016d78:	f7ff fca6 	bl	80166c8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8016d7c:	68fb      	ldr	r3, [r7, #12]
 8016d7e:	3324      	adds	r3, #36	; 0x24
 8016d80:	4618      	mov	r0, r3
 8016d82:	f7ff fca1 	bl	80166c8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8016d86:	f7ff fead 	bl	8016ae4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8016d8a:	2301      	movs	r3, #1
}
 8016d8c:	4618      	mov	r0, r3
 8016d8e:	3710      	adds	r7, #16
 8016d90:	46bd      	mov	sp, r7
 8016d92:	bd80      	pop	{r7, pc}
 8016d94:	e000ed04 	.word	0xe000ed04

08016d98 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8016d98:	b580      	push	{r7, lr}
 8016d9a:	b08e      	sub	sp, #56	; 0x38
 8016d9c:	af02      	add	r7, sp, #8
 8016d9e:	60f8      	str	r0, [r7, #12]
 8016da0:	60b9      	str	r1, [r7, #8]
 8016da2:	607a      	str	r2, [r7, #4]
 8016da4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8016da6:	68fb      	ldr	r3, [r7, #12]
 8016da8:	2b00      	cmp	r3, #0
 8016daa:	d10a      	bne.n	8016dc2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8016dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016db0:	f383 8811 	msr	BASEPRI, r3
 8016db4:	f3bf 8f6f 	isb	sy
 8016db8:	f3bf 8f4f 	dsb	sy
 8016dbc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8016dbe:	bf00      	nop
 8016dc0:	e7fe      	b.n	8016dc0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8016dc2:	683b      	ldr	r3, [r7, #0]
 8016dc4:	2b00      	cmp	r3, #0
 8016dc6:	d10a      	bne.n	8016dde <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8016dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016dcc:	f383 8811 	msr	BASEPRI, r3
 8016dd0:	f3bf 8f6f 	isb	sy
 8016dd4:	f3bf 8f4f 	dsb	sy
 8016dd8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8016dda:	bf00      	nop
 8016ddc:	e7fe      	b.n	8016ddc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8016dde:	687b      	ldr	r3, [r7, #4]
 8016de0:	2b00      	cmp	r3, #0
 8016de2:	d002      	beq.n	8016dea <xQueueGenericCreateStatic+0x52>
 8016de4:	68bb      	ldr	r3, [r7, #8]
 8016de6:	2b00      	cmp	r3, #0
 8016de8:	d001      	beq.n	8016dee <xQueueGenericCreateStatic+0x56>
 8016dea:	2301      	movs	r3, #1
 8016dec:	e000      	b.n	8016df0 <xQueueGenericCreateStatic+0x58>
 8016dee:	2300      	movs	r3, #0
 8016df0:	2b00      	cmp	r3, #0
 8016df2:	d10a      	bne.n	8016e0a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8016df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016df8:	f383 8811 	msr	BASEPRI, r3
 8016dfc:	f3bf 8f6f 	isb	sy
 8016e00:	f3bf 8f4f 	dsb	sy
 8016e04:	623b      	str	r3, [r7, #32]
}
 8016e06:	bf00      	nop
 8016e08:	e7fe      	b.n	8016e08 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8016e0a:	687b      	ldr	r3, [r7, #4]
 8016e0c:	2b00      	cmp	r3, #0
 8016e0e:	d102      	bne.n	8016e16 <xQueueGenericCreateStatic+0x7e>
 8016e10:	68bb      	ldr	r3, [r7, #8]
 8016e12:	2b00      	cmp	r3, #0
 8016e14:	d101      	bne.n	8016e1a <xQueueGenericCreateStatic+0x82>
 8016e16:	2301      	movs	r3, #1
 8016e18:	e000      	b.n	8016e1c <xQueueGenericCreateStatic+0x84>
 8016e1a:	2300      	movs	r3, #0
 8016e1c:	2b00      	cmp	r3, #0
 8016e1e:	d10a      	bne.n	8016e36 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8016e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e24:	f383 8811 	msr	BASEPRI, r3
 8016e28:	f3bf 8f6f 	isb	sy
 8016e2c:	f3bf 8f4f 	dsb	sy
 8016e30:	61fb      	str	r3, [r7, #28]
}
 8016e32:	bf00      	nop
 8016e34:	e7fe      	b.n	8016e34 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8016e36:	2350      	movs	r3, #80	; 0x50
 8016e38:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8016e3a:	697b      	ldr	r3, [r7, #20]
 8016e3c:	2b50      	cmp	r3, #80	; 0x50
 8016e3e:	d00a      	beq.n	8016e56 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8016e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e44:	f383 8811 	msr	BASEPRI, r3
 8016e48:	f3bf 8f6f 	isb	sy
 8016e4c:	f3bf 8f4f 	dsb	sy
 8016e50:	61bb      	str	r3, [r7, #24]
}
 8016e52:	bf00      	nop
 8016e54:	e7fe      	b.n	8016e54 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8016e56:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8016e58:	683b      	ldr	r3, [r7, #0]
 8016e5a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8016e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e5e:	2b00      	cmp	r3, #0
 8016e60:	d00d      	beq.n	8016e7e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8016e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e64:	2201      	movs	r2, #1
 8016e66:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8016e6a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8016e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e70:	9300      	str	r3, [sp, #0]
 8016e72:	4613      	mov	r3, r2
 8016e74:	687a      	ldr	r2, [r7, #4]
 8016e76:	68b9      	ldr	r1, [r7, #8]
 8016e78:	68f8      	ldr	r0, [r7, #12]
 8016e7a:	f000 f83f 	bl	8016efc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8016e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8016e80:	4618      	mov	r0, r3
 8016e82:	3730      	adds	r7, #48	; 0x30
 8016e84:	46bd      	mov	sp, r7
 8016e86:	bd80      	pop	{r7, pc}

08016e88 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8016e88:	b580      	push	{r7, lr}
 8016e8a:	b08a      	sub	sp, #40	; 0x28
 8016e8c:	af02      	add	r7, sp, #8
 8016e8e:	60f8      	str	r0, [r7, #12]
 8016e90:	60b9      	str	r1, [r7, #8]
 8016e92:	4613      	mov	r3, r2
 8016e94:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8016e96:	68fb      	ldr	r3, [r7, #12]
 8016e98:	2b00      	cmp	r3, #0
 8016e9a:	d10a      	bne.n	8016eb2 <xQueueGenericCreate+0x2a>
	__asm volatile
 8016e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ea0:	f383 8811 	msr	BASEPRI, r3
 8016ea4:	f3bf 8f6f 	isb	sy
 8016ea8:	f3bf 8f4f 	dsb	sy
 8016eac:	613b      	str	r3, [r7, #16]
}
 8016eae:	bf00      	nop
 8016eb0:	e7fe      	b.n	8016eb0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016eb2:	68fb      	ldr	r3, [r7, #12]
 8016eb4:	68ba      	ldr	r2, [r7, #8]
 8016eb6:	fb02 f303 	mul.w	r3, r2, r3
 8016eba:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8016ebc:	69fb      	ldr	r3, [r7, #28]
 8016ebe:	3350      	adds	r3, #80	; 0x50
 8016ec0:	4618      	mov	r0, r3
 8016ec2:	f7ff fa15 	bl	80162f0 <pvPortMalloc>
 8016ec6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8016ec8:	69bb      	ldr	r3, [r7, #24]
 8016eca:	2b00      	cmp	r3, #0
 8016ecc:	d011      	beq.n	8016ef2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8016ece:	69bb      	ldr	r3, [r7, #24]
 8016ed0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8016ed2:	697b      	ldr	r3, [r7, #20]
 8016ed4:	3350      	adds	r3, #80	; 0x50
 8016ed6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8016ed8:	69bb      	ldr	r3, [r7, #24]
 8016eda:	2200      	movs	r2, #0
 8016edc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8016ee0:	79fa      	ldrb	r2, [r7, #7]
 8016ee2:	69bb      	ldr	r3, [r7, #24]
 8016ee4:	9300      	str	r3, [sp, #0]
 8016ee6:	4613      	mov	r3, r2
 8016ee8:	697a      	ldr	r2, [r7, #20]
 8016eea:	68b9      	ldr	r1, [r7, #8]
 8016eec:	68f8      	ldr	r0, [r7, #12]
 8016eee:	f000 f805 	bl	8016efc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8016ef2:	69bb      	ldr	r3, [r7, #24]
	}
 8016ef4:	4618      	mov	r0, r3
 8016ef6:	3720      	adds	r7, #32
 8016ef8:	46bd      	mov	sp, r7
 8016efa:	bd80      	pop	{r7, pc}

08016efc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8016efc:	b580      	push	{r7, lr}
 8016efe:	b084      	sub	sp, #16
 8016f00:	af00      	add	r7, sp, #0
 8016f02:	60f8      	str	r0, [r7, #12]
 8016f04:	60b9      	str	r1, [r7, #8]
 8016f06:	607a      	str	r2, [r7, #4]
 8016f08:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8016f0a:	68bb      	ldr	r3, [r7, #8]
 8016f0c:	2b00      	cmp	r3, #0
 8016f0e:	d103      	bne.n	8016f18 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8016f10:	69bb      	ldr	r3, [r7, #24]
 8016f12:	69ba      	ldr	r2, [r7, #24]
 8016f14:	601a      	str	r2, [r3, #0]
 8016f16:	e002      	b.n	8016f1e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8016f18:	69bb      	ldr	r3, [r7, #24]
 8016f1a:	687a      	ldr	r2, [r7, #4]
 8016f1c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8016f1e:	69bb      	ldr	r3, [r7, #24]
 8016f20:	68fa      	ldr	r2, [r7, #12]
 8016f22:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8016f24:	69bb      	ldr	r3, [r7, #24]
 8016f26:	68ba      	ldr	r2, [r7, #8]
 8016f28:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8016f2a:	2101      	movs	r1, #1
 8016f2c:	69b8      	ldr	r0, [r7, #24]
 8016f2e:	f7ff fecb 	bl	8016cc8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8016f32:	69bb      	ldr	r3, [r7, #24]
 8016f34:	78fa      	ldrb	r2, [r7, #3]
 8016f36:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8016f3a:	bf00      	nop
 8016f3c:	3710      	adds	r7, #16
 8016f3e:	46bd      	mov	sp, r7
 8016f40:	bd80      	pop	{r7, pc}

08016f42 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8016f42:	b580      	push	{r7, lr}
 8016f44:	b082      	sub	sp, #8
 8016f46:	af00      	add	r7, sp, #0
 8016f48:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8016f4a:	687b      	ldr	r3, [r7, #4]
 8016f4c:	2b00      	cmp	r3, #0
 8016f4e:	d00e      	beq.n	8016f6e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8016f50:	687b      	ldr	r3, [r7, #4]
 8016f52:	2200      	movs	r2, #0
 8016f54:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8016f56:	687b      	ldr	r3, [r7, #4]
 8016f58:	2200      	movs	r2, #0
 8016f5a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8016f5c:	687b      	ldr	r3, [r7, #4]
 8016f5e:	2200      	movs	r2, #0
 8016f60:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8016f62:	2300      	movs	r3, #0
 8016f64:	2200      	movs	r2, #0
 8016f66:	2100      	movs	r1, #0
 8016f68:	6878      	ldr	r0, [r7, #4]
 8016f6a:	f000 f90b 	bl	8017184 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8016f6e:	bf00      	nop
 8016f70:	3708      	adds	r7, #8
 8016f72:	46bd      	mov	sp, r7
 8016f74:	bd80      	pop	{r7, pc}

08016f76 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8016f76:	b580      	push	{r7, lr}
 8016f78:	b086      	sub	sp, #24
 8016f7a:	af00      	add	r7, sp, #0
 8016f7c:	4603      	mov	r3, r0
 8016f7e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8016f80:	2301      	movs	r3, #1
 8016f82:	617b      	str	r3, [r7, #20]
 8016f84:	2300      	movs	r3, #0
 8016f86:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8016f88:	79fb      	ldrb	r3, [r7, #7]
 8016f8a:	461a      	mov	r2, r3
 8016f8c:	6939      	ldr	r1, [r7, #16]
 8016f8e:	6978      	ldr	r0, [r7, #20]
 8016f90:	f7ff ff7a 	bl	8016e88 <xQueueGenericCreate>
 8016f94:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8016f96:	68f8      	ldr	r0, [r7, #12]
 8016f98:	f7ff ffd3 	bl	8016f42 <prvInitialiseMutex>

		return xNewQueue;
 8016f9c:	68fb      	ldr	r3, [r7, #12]
	}
 8016f9e:	4618      	mov	r0, r3
 8016fa0:	3718      	adds	r7, #24
 8016fa2:	46bd      	mov	sp, r7
 8016fa4:	bd80      	pop	{r7, pc}

08016fa6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8016fa6:	b580      	push	{r7, lr}
 8016fa8:	b088      	sub	sp, #32
 8016faa:	af02      	add	r7, sp, #8
 8016fac:	4603      	mov	r3, r0
 8016fae:	6039      	str	r1, [r7, #0]
 8016fb0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8016fb2:	2301      	movs	r3, #1
 8016fb4:	617b      	str	r3, [r7, #20]
 8016fb6:	2300      	movs	r3, #0
 8016fb8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8016fba:	79fb      	ldrb	r3, [r7, #7]
 8016fbc:	9300      	str	r3, [sp, #0]
 8016fbe:	683b      	ldr	r3, [r7, #0]
 8016fc0:	2200      	movs	r2, #0
 8016fc2:	6939      	ldr	r1, [r7, #16]
 8016fc4:	6978      	ldr	r0, [r7, #20]
 8016fc6:	f7ff fee7 	bl	8016d98 <xQueueGenericCreateStatic>
 8016fca:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8016fcc:	68f8      	ldr	r0, [r7, #12]
 8016fce:	f7ff ffb8 	bl	8016f42 <prvInitialiseMutex>

		return xNewQueue;
 8016fd2:	68fb      	ldr	r3, [r7, #12]
	}
 8016fd4:	4618      	mov	r0, r3
 8016fd6:	3718      	adds	r7, #24
 8016fd8:	46bd      	mov	sp, r7
 8016fda:	bd80      	pop	{r7, pc}

08016fdc <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8016fdc:	b590      	push	{r4, r7, lr}
 8016fde:	b087      	sub	sp, #28
 8016fe0:	af00      	add	r7, sp, #0
 8016fe2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8016fe4:	687b      	ldr	r3, [r7, #4]
 8016fe6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8016fe8:	693b      	ldr	r3, [r7, #16]
 8016fea:	2b00      	cmp	r3, #0
 8016fec:	d10a      	bne.n	8017004 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8016fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ff2:	f383 8811 	msr	BASEPRI, r3
 8016ff6:	f3bf 8f6f 	isb	sy
 8016ffa:	f3bf 8f4f 	dsb	sy
 8016ffe:	60fb      	str	r3, [r7, #12]
}
 8017000:	bf00      	nop
 8017002:	e7fe      	b.n	8017002 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8017004:	693b      	ldr	r3, [r7, #16]
 8017006:	689c      	ldr	r4, [r3, #8]
 8017008:	f001 fd94 	bl	8018b34 <xTaskGetCurrentTaskHandle>
 801700c:	4603      	mov	r3, r0
 801700e:	429c      	cmp	r4, r3
 8017010:	d111      	bne.n	8017036 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8017012:	693b      	ldr	r3, [r7, #16]
 8017014:	68db      	ldr	r3, [r3, #12]
 8017016:	1e5a      	subs	r2, r3, #1
 8017018:	693b      	ldr	r3, [r7, #16]
 801701a:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 801701c:	693b      	ldr	r3, [r7, #16]
 801701e:	68db      	ldr	r3, [r3, #12]
 8017020:	2b00      	cmp	r3, #0
 8017022:	d105      	bne.n	8017030 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8017024:	2300      	movs	r3, #0
 8017026:	2200      	movs	r2, #0
 8017028:	2100      	movs	r1, #0
 801702a:	6938      	ldr	r0, [r7, #16]
 801702c:	f000 f8aa 	bl	8017184 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8017030:	2301      	movs	r3, #1
 8017032:	617b      	str	r3, [r7, #20]
 8017034:	e001      	b.n	801703a <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8017036:	2300      	movs	r3, #0
 8017038:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 801703a:	697b      	ldr	r3, [r7, #20]
	}
 801703c:	4618      	mov	r0, r3
 801703e:	371c      	adds	r7, #28
 8017040:	46bd      	mov	sp, r7
 8017042:	bd90      	pop	{r4, r7, pc}

08017044 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8017044:	b590      	push	{r4, r7, lr}
 8017046:	b087      	sub	sp, #28
 8017048:	af00      	add	r7, sp, #0
 801704a:	6078      	str	r0, [r7, #4]
 801704c:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 801704e:	687b      	ldr	r3, [r7, #4]
 8017050:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8017052:	693b      	ldr	r3, [r7, #16]
 8017054:	2b00      	cmp	r3, #0
 8017056:	d10a      	bne.n	801706e <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8017058:	f04f 0350 	mov.w	r3, #80	; 0x50
 801705c:	f383 8811 	msr	BASEPRI, r3
 8017060:	f3bf 8f6f 	isb	sy
 8017064:	f3bf 8f4f 	dsb	sy
 8017068:	60fb      	str	r3, [r7, #12]
}
 801706a:	bf00      	nop
 801706c:	e7fe      	b.n	801706c <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 801706e:	693b      	ldr	r3, [r7, #16]
 8017070:	689c      	ldr	r4, [r3, #8]
 8017072:	f001 fd5f 	bl	8018b34 <xTaskGetCurrentTaskHandle>
 8017076:	4603      	mov	r3, r0
 8017078:	429c      	cmp	r4, r3
 801707a:	d107      	bne.n	801708c <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 801707c:	693b      	ldr	r3, [r7, #16]
 801707e:	68db      	ldr	r3, [r3, #12]
 8017080:	1c5a      	adds	r2, r3, #1
 8017082:	693b      	ldr	r3, [r7, #16]
 8017084:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8017086:	2301      	movs	r3, #1
 8017088:	617b      	str	r3, [r7, #20]
 801708a:	e00c      	b.n	80170a6 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 801708c:	6839      	ldr	r1, [r7, #0]
 801708e:	6938      	ldr	r0, [r7, #16]
 8017090:	f000 fb7e 	bl	8017790 <xQueueSemaphoreTake>
 8017094:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8017096:	697b      	ldr	r3, [r7, #20]
 8017098:	2b00      	cmp	r3, #0
 801709a:	d004      	beq.n	80170a6 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 801709c:	693b      	ldr	r3, [r7, #16]
 801709e:	68db      	ldr	r3, [r3, #12]
 80170a0:	1c5a      	adds	r2, r3, #1
 80170a2:	693b      	ldr	r3, [r7, #16]
 80170a4:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80170a6:	697b      	ldr	r3, [r7, #20]
	}
 80170a8:	4618      	mov	r0, r3
 80170aa:	371c      	adds	r7, #28
 80170ac:	46bd      	mov	sp, r7
 80170ae:	bd90      	pop	{r4, r7, pc}

080170b0 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80170b0:	b580      	push	{r7, lr}
 80170b2:	b08a      	sub	sp, #40	; 0x28
 80170b4:	af02      	add	r7, sp, #8
 80170b6:	60f8      	str	r0, [r7, #12]
 80170b8:	60b9      	str	r1, [r7, #8]
 80170ba:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80170bc:	68fb      	ldr	r3, [r7, #12]
 80170be:	2b00      	cmp	r3, #0
 80170c0:	d10a      	bne.n	80170d8 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 80170c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80170c6:	f383 8811 	msr	BASEPRI, r3
 80170ca:	f3bf 8f6f 	isb	sy
 80170ce:	f3bf 8f4f 	dsb	sy
 80170d2:	61bb      	str	r3, [r7, #24]
}
 80170d4:	bf00      	nop
 80170d6:	e7fe      	b.n	80170d6 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80170d8:	68ba      	ldr	r2, [r7, #8]
 80170da:	68fb      	ldr	r3, [r7, #12]
 80170dc:	429a      	cmp	r2, r3
 80170de:	d90a      	bls.n	80170f6 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 80170e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80170e4:	f383 8811 	msr	BASEPRI, r3
 80170e8:	f3bf 8f6f 	isb	sy
 80170ec:	f3bf 8f4f 	dsb	sy
 80170f0:	617b      	str	r3, [r7, #20]
}
 80170f2:	bf00      	nop
 80170f4:	e7fe      	b.n	80170f4 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80170f6:	2302      	movs	r3, #2
 80170f8:	9300      	str	r3, [sp, #0]
 80170fa:	687b      	ldr	r3, [r7, #4]
 80170fc:	2200      	movs	r2, #0
 80170fe:	2100      	movs	r1, #0
 8017100:	68f8      	ldr	r0, [r7, #12]
 8017102:	f7ff fe49 	bl	8016d98 <xQueueGenericCreateStatic>
 8017106:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8017108:	69fb      	ldr	r3, [r7, #28]
 801710a:	2b00      	cmp	r3, #0
 801710c:	d002      	beq.n	8017114 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 801710e:	69fb      	ldr	r3, [r7, #28]
 8017110:	68ba      	ldr	r2, [r7, #8]
 8017112:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8017114:	69fb      	ldr	r3, [r7, #28]
	}
 8017116:	4618      	mov	r0, r3
 8017118:	3720      	adds	r7, #32
 801711a:	46bd      	mov	sp, r7
 801711c:	bd80      	pop	{r7, pc}

0801711e <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 801711e:	b580      	push	{r7, lr}
 8017120:	b086      	sub	sp, #24
 8017122:	af00      	add	r7, sp, #0
 8017124:	6078      	str	r0, [r7, #4]
 8017126:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8017128:	687b      	ldr	r3, [r7, #4]
 801712a:	2b00      	cmp	r3, #0
 801712c:	d10a      	bne.n	8017144 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 801712e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017132:	f383 8811 	msr	BASEPRI, r3
 8017136:	f3bf 8f6f 	isb	sy
 801713a:	f3bf 8f4f 	dsb	sy
 801713e:	613b      	str	r3, [r7, #16]
}
 8017140:	bf00      	nop
 8017142:	e7fe      	b.n	8017142 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8017144:	683a      	ldr	r2, [r7, #0]
 8017146:	687b      	ldr	r3, [r7, #4]
 8017148:	429a      	cmp	r2, r3
 801714a:	d90a      	bls.n	8017162 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 801714c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017150:	f383 8811 	msr	BASEPRI, r3
 8017154:	f3bf 8f6f 	isb	sy
 8017158:	f3bf 8f4f 	dsb	sy
 801715c:	60fb      	str	r3, [r7, #12]
}
 801715e:	bf00      	nop
 8017160:	e7fe      	b.n	8017160 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8017162:	2202      	movs	r2, #2
 8017164:	2100      	movs	r1, #0
 8017166:	6878      	ldr	r0, [r7, #4]
 8017168:	f7ff fe8e 	bl	8016e88 <xQueueGenericCreate>
 801716c:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 801716e:	697b      	ldr	r3, [r7, #20]
 8017170:	2b00      	cmp	r3, #0
 8017172:	d002      	beq.n	801717a <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8017174:	697b      	ldr	r3, [r7, #20]
 8017176:	683a      	ldr	r2, [r7, #0]
 8017178:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 801717a:	697b      	ldr	r3, [r7, #20]
	}
 801717c:	4618      	mov	r0, r3
 801717e:	3718      	adds	r7, #24
 8017180:	46bd      	mov	sp, r7
 8017182:	bd80      	pop	{r7, pc}

08017184 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8017184:	b580      	push	{r7, lr}
 8017186:	b08e      	sub	sp, #56	; 0x38
 8017188:	af00      	add	r7, sp, #0
 801718a:	60f8      	str	r0, [r7, #12]
 801718c:	60b9      	str	r1, [r7, #8]
 801718e:	607a      	str	r2, [r7, #4]
 8017190:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8017192:	2300      	movs	r3, #0
 8017194:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8017196:	68fb      	ldr	r3, [r7, #12]
 8017198:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801719a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801719c:	2b00      	cmp	r3, #0
 801719e:	d10a      	bne.n	80171b6 <xQueueGenericSend+0x32>
	__asm volatile
 80171a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80171a4:	f383 8811 	msr	BASEPRI, r3
 80171a8:	f3bf 8f6f 	isb	sy
 80171ac:	f3bf 8f4f 	dsb	sy
 80171b0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80171b2:	bf00      	nop
 80171b4:	e7fe      	b.n	80171b4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80171b6:	68bb      	ldr	r3, [r7, #8]
 80171b8:	2b00      	cmp	r3, #0
 80171ba:	d103      	bne.n	80171c4 <xQueueGenericSend+0x40>
 80171bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80171be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80171c0:	2b00      	cmp	r3, #0
 80171c2:	d101      	bne.n	80171c8 <xQueueGenericSend+0x44>
 80171c4:	2301      	movs	r3, #1
 80171c6:	e000      	b.n	80171ca <xQueueGenericSend+0x46>
 80171c8:	2300      	movs	r3, #0
 80171ca:	2b00      	cmp	r3, #0
 80171cc:	d10a      	bne.n	80171e4 <xQueueGenericSend+0x60>
	__asm volatile
 80171ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80171d2:	f383 8811 	msr	BASEPRI, r3
 80171d6:	f3bf 8f6f 	isb	sy
 80171da:	f3bf 8f4f 	dsb	sy
 80171de:	627b      	str	r3, [r7, #36]	; 0x24
}
 80171e0:	bf00      	nop
 80171e2:	e7fe      	b.n	80171e2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80171e4:	683b      	ldr	r3, [r7, #0]
 80171e6:	2b02      	cmp	r3, #2
 80171e8:	d103      	bne.n	80171f2 <xQueueGenericSend+0x6e>
 80171ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80171ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80171ee:	2b01      	cmp	r3, #1
 80171f0:	d101      	bne.n	80171f6 <xQueueGenericSend+0x72>
 80171f2:	2301      	movs	r3, #1
 80171f4:	e000      	b.n	80171f8 <xQueueGenericSend+0x74>
 80171f6:	2300      	movs	r3, #0
 80171f8:	2b00      	cmp	r3, #0
 80171fa:	d10a      	bne.n	8017212 <xQueueGenericSend+0x8e>
	__asm volatile
 80171fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017200:	f383 8811 	msr	BASEPRI, r3
 8017204:	f3bf 8f6f 	isb	sy
 8017208:	f3bf 8f4f 	dsb	sy
 801720c:	623b      	str	r3, [r7, #32]
}
 801720e:	bf00      	nop
 8017210:	e7fe      	b.n	8017210 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8017212:	f001 fc9f 	bl	8018b54 <xTaskGetSchedulerState>
 8017216:	4603      	mov	r3, r0
 8017218:	2b00      	cmp	r3, #0
 801721a:	d102      	bne.n	8017222 <xQueueGenericSend+0x9e>
 801721c:	687b      	ldr	r3, [r7, #4]
 801721e:	2b00      	cmp	r3, #0
 8017220:	d101      	bne.n	8017226 <xQueueGenericSend+0xa2>
 8017222:	2301      	movs	r3, #1
 8017224:	e000      	b.n	8017228 <xQueueGenericSend+0xa4>
 8017226:	2300      	movs	r3, #0
 8017228:	2b00      	cmp	r3, #0
 801722a:	d10a      	bne.n	8017242 <xQueueGenericSend+0xbe>
	__asm volatile
 801722c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017230:	f383 8811 	msr	BASEPRI, r3
 8017234:	f3bf 8f6f 	isb	sy
 8017238:	f3bf 8f4f 	dsb	sy
 801723c:	61fb      	str	r3, [r7, #28]
}
 801723e:	bf00      	nop
 8017240:	e7fe      	b.n	8017240 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8017242:	f7ff fc1f 	bl	8016a84 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8017246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017248:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801724a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801724c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801724e:	429a      	cmp	r2, r3
 8017250:	d302      	bcc.n	8017258 <xQueueGenericSend+0xd4>
 8017252:	683b      	ldr	r3, [r7, #0]
 8017254:	2b02      	cmp	r3, #2
 8017256:	d129      	bne.n	80172ac <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8017258:	683a      	ldr	r2, [r7, #0]
 801725a:	68b9      	ldr	r1, [r7, #8]
 801725c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801725e:	f000 fc5e 	bl	8017b1e <prvCopyDataToQueue>
 8017262:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8017264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017268:	2b00      	cmp	r3, #0
 801726a:	d010      	beq.n	801728e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801726c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801726e:	3324      	adds	r3, #36	; 0x24
 8017270:	4618      	mov	r0, r3
 8017272:	f001 fa9f 	bl	80187b4 <xTaskRemoveFromEventList>
 8017276:	4603      	mov	r3, r0
 8017278:	2b00      	cmp	r3, #0
 801727a:	d013      	beq.n	80172a4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 801727c:	4b3f      	ldr	r3, [pc, #252]	; (801737c <xQueueGenericSend+0x1f8>)
 801727e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017282:	601a      	str	r2, [r3, #0]
 8017284:	f3bf 8f4f 	dsb	sy
 8017288:	f3bf 8f6f 	isb	sy
 801728c:	e00a      	b.n	80172a4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801728e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017290:	2b00      	cmp	r3, #0
 8017292:	d007      	beq.n	80172a4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8017294:	4b39      	ldr	r3, [pc, #228]	; (801737c <xQueueGenericSend+0x1f8>)
 8017296:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801729a:	601a      	str	r2, [r3, #0]
 801729c:	f3bf 8f4f 	dsb	sy
 80172a0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80172a4:	f7ff fc1e 	bl	8016ae4 <vPortExitCritical>
				return pdPASS;
 80172a8:	2301      	movs	r3, #1
 80172aa:	e063      	b.n	8017374 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80172ac:	687b      	ldr	r3, [r7, #4]
 80172ae:	2b00      	cmp	r3, #0
 80172b0:	d103      	bne.n	80172ba <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80172b2:	f7ff fc17 	bl	8016ae4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80172b6:	2300      	movs	r3, #0
 80172b8:	e05c      	b.n	8017374 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80172ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80172bc:	2b00      	cmp	r3, #0
 80172be:	d106      	bne.n	80172ce <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80172c0:	f107 0314 	add.w	r3, r7, #20
 80172c4:	4618      	mov	r0, r3
 80172c6:	f001 fad9 	bl	801887c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80172ca:	2301      	movs	r3, #1
 80172cc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80172ce:	f7ff fc09 	bl	8016ae4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80172d2:	f001 f803 	bl	80182dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80172d6:	f7ff fbd5 	bl	8016a84 <vPortEnterCritical>
 80172da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80172dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80172e0:	b25b      	sxtb	r3, r3
 80172e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80172e6:	d103      	bne.n	80172f0 <xQueueGenericSend+0x16c>
 80172e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80172ea:	2200      	movs	r2, #0
 80172ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80172f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80172f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80172f6:	b25b      	sxtb	r3, r3
 80172f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80172fc:	d103      	bne.n	8017306 <xQueueGenericSend+0x182>
 80172fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017300:	2200      	movs	r2, #0
 8017302:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8017306:	f7ff fbed 	bl	8016ae4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801730a:	1d3a      	adds	r2, r7, #4
 801730c:	f107 0314 	add.w	r3, r7, #20
 8017310:	4611      	mov	r1, r2
 8017312:	4618      	mov	r0, r3
 8017314:	f001 fac8 	bl	80188a8 <xTaskCheckForTimeOut>
 8017318:	4603      	mov	r3, r0
 801731a:	2b00      	cmp	r3, #0
 801731c:	d124      	bne.n	8017368 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801731e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017320:	f000 fcf5 	bl	8017d0e <prvIsQueueFull>
 8017324:	4603      	mov	r3, r0
 8017326:	2b00      	cmp	r3, #0
 8017328:	d018      	beq.n	801735c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801732a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801732c:	3310      	adds	r3, #16
 801732e:	687a      	ldr	r2, [r7, #4]
 8017330:	4611      	mov	r1, r2
 8017332:	4618      	mov	r0, r3
 8017334:	f001 f9ee 	bl	8018714 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8017338:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801733a:	f000 fc80 	bl	8017c3e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801733e:	f000 ffdb 	bl	80182f8 <xTaskResumeAll>
 8017342:	4603      	mov	r3, r0
 8017344:	2b00      	cmp	r3, #0
 8017346:	f47f af7c 	bne.w	8017242 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 801734a:	4b0c      	ldr	r3, [pc, #48]	; (801737c <xQueueGenericSend+0x1f8>)
 801734c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017350:	601a      	str	r2, [r3, #0]
 8017352:	f3bf 8f4f 	dsb	sy
 8017356:	f3bf 8f6f 	isb	sy
 801735a:	e772      	b.n	8017242 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 801735c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801735e:	f000 fc6e 	bl	8017c3e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8017362:	f000 ffc9 	bl	80182f8 <xTaskResumeAll>
 8017366:	e76c      	b.n	8017242 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8017368:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801736a:	f000 fc68 	bl	8017c3e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801736e:	f000 ffc3 	bl	80182f8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8017372:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8017374:	4618      	mov	r0, r3
 8017376:	3738      	adds	r7, #56	; 0x38
 8017378:	46bd      	mov	sp, r7
 801737a:	bd80      	pop	{r7, pc}
 801737c:	e000ed04 	.word	0xe000ed04

08017380 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8017380:	b580      	push	{r7, lr}
 8017382:	b090      	sub	sp, #64	; 0x40
 8017384:	af00      	add	r7, sp, #0
 8017386:	60f8      	str	r0, [r7, #12]
 8017388:	60b9      	str	r1, [r7, #8]
 801738a:	607a      	str	r2, [r7, #4]
 801738c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801738e:	68fb      	ldr	r3, [r7, #12]
 8017390:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8017392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017394:	2b00      	cmp	r3, #0
 8017396:	d10a      	bne.n	80173ae <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8017398:	f04f 0350 	mov.w	r3, #80	; 0x50
 801739c:	f383 8811 	msr	BASEPRI, r3
 80173a0:	f3bf 8f6f 	isb	sy
 80173a4:	f3bf 8f4f 	dsb	sy
 80173a8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80173aa:	bf00      	nop
 80173ac:	e7fe      	b.n	80173ac <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80173ae:	68bb      	ldr	r3, [r7, #8]
 80173b0:	2b00      	cmp	r3, #0
 80173b2:	d103      	bne.n	80173bc <xQueueGenericSendFromISR+0x3c>
 80173b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80173b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80173b8:	2b00      	cmp	r3, #0
 80173ba:	d101      	bne.n	80173c0 <xQueueGenericSendFromISR+0x40>
 80173bc:	2301      	movs	r3, #1
 80173be:	e000      	b.n	80173c2 <xQueueGenericSendFromISR+0x42>
 80173c0:	2300      	movs	r3, #0
 80173c2:	2b00      	cmp	r3, #0
 80173c4:	d10a      	bne.n	80173dc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80173c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80173ca:	f383 8811 	msr	BASEPRI, r3
 80173ce:	f3bf 8f6f 	isb	sy
 80173d2:	f3bf 8f4f 	dsb	sy
 80173d6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80173d8:	bf00      	nop
 80173da:	e7fe      	b.n	80173da <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80173dc:	683b      	ldr	r3, [r7, #0]
 80173de:	2b02      	cmp	r3, #2
 80173e0:	d103      	bne.n	80173ea <xQueueGenericSendFromISR+0x6a>
 80173e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80173e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80173e6:	2b01      	cmp	r3, #1
 80173e8:	d101      	bne.n	80173ee <xQueueGenericSendFromISR+0x6e>
 80173ea:	2301      	movs	r3, #1
 80173ec:	e000      	b.n	80173f0 <xQueueGenericSendFromISR+0x70>
 80173ee:	2300      	movs	r3, #0
 80173f0:	2b00      	cmp	r3, #0
 80173f2:	d10a      	bne.n	801740a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80173f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80173f8:	f383 8811 	msr	BASEPRI, r3
 80173fc:	f3bf 8f6f 	isb	sy
 8017400:	f3bf 8f4f 	dsb	sy
 8017404:	623b      	str	r3, [r7, #32]
}
 8017406:	bf00      	nop
 8017408:	e7fe      	b.n	8017408 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801740a:	f7ff fc1d 	bl	8016c48 <vPortValidateInterruptPriority>
	__asm volatile
 801740e:	f3ef 8211 	mrs	r2, BASEPRI
 8017412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017416:	f383 8811 	msr	BASEPRI, r3
 801741a:	f3bf 8f6f 	isb	sy
 801741e:	f3bf 8f4f 	dsb	sy
 8017422:	61fa      	str	r2, [r7, #28]
 8017424:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8017426:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8017428:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801742a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801742c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801742e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017432:	429a      	cmp	r2, r3
 8017434:	d302      	bcc.n	801743c <xQueueGenericSendFromISR+0xbc>
 8017436:	683b      	ldr	r3, [r7, #0]
 8017438:	2b02      	cmp	r3, #2
 801743a:	d12f      	bne.n	801749c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801743c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801743e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017442:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801744a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801744c:	683a      	ldr	r2, [r7, #0]
 801744e:	68b9      	ldr	r1, [r7, #8]
 8017450:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8017452:	f000 fb64 	bl	8017b1e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8017456:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 801745a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801745e:	d112      	bne.n	8017486 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8017460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017464:	2b00      	cmp	r3, #0
 8017466:	d016      	beq.n	8017496 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801746a:	3324      	adds	r3, #36	; 0x24
 801746c:	4618      	mov	r0, r3
 801746e:	f001 f9a1 	bl	80187b4 <xTaskRemoveFromEventList>
 8017472:	4603      	mov	r3, r0
 8017474:	2b00      	cmp	r3, #0
 8017476:	d00e      	beq.n	8017496 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8017478:	687b      	ldr	r3, [r7, #4]
 801747a:	2b00      	cmp	r3, #0
 801747c:	d00b      	beq.n	8017496 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801747e:	687b      	ldr	r3, [r7, #4]
 8017480:	2201      	movs	r2, #1
 8017482:	601a      	str	r2, [r3, #0]
 8017484:	e007      	b.n	8017496 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8017486:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801748a:	3301      	adds	r3, #1
 801748c:	b2db      	uxtb	r3, r3
 801748e:	b25a      	sxtb	r2, r3
 8017490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017492:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8017496:	2301      	movs	r3, #1
 8017498:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 801749a:	e001      	b.n	80174a0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801749c:	2300      	movs	r3, #0
 801749e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80174a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80174a2:	617b      	str	r3, [r7, #20]
	__asm volatile
 80174a4:	697b      	ldr	r3, [r7, #20]
 80174a6:	f383 8811 	msr	BASEPRI, r3
}
 80174aa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80174ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80174ae:	4618      	mov	r0, r3
 80174b0:	3740      	adds	r7, #64	; 0x40
 80174b2:	46bd      	mov	sp, r7
 80174b4:	bd80      	pop	{r7, pc}

080174b6 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80174b6:	b580      	push	{r7, lr}
 80174b8:	b08e      	sub	sp, #56	; 0x38
 80174ba:	af00      	add	r7, sp, #0
 80174bc:	6078      	str	r0, [r7, #4]
 80174be:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80174c0:	687b      	ldr	r3, [r7, #4]
 80174c2:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80174c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80174c6:	2b00      	cmp	r3, #0
 80174c8:	d10a      	bne.n	80174e0 <xQueueGiveFromISR+0x2a>
	__asm volatile
 80174ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80174ce:	f383 8811 	msr	BASEPRI, r3
 80174d2:	f3bf 8f6f 	isb	sy
 80174d6:	f3bf 8f4f 	dsb	sy
 80174da:	623b      	str	r3, [r7, #32]
}
 80174dc:	bf00      	nop
 80174de:	e7fe      	b.n	80174de <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80174e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80174e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80174e4:	2b00      	cmp	r3, #0
 80174e6:	d00a      	beq.n	80174fe <xQueueGiveFromISR+0x48>
	__asm volatile
 80174e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80174ec:	f383 8811 	msr	BASEPRI, r3
 80174f0:	f3bf 8f6f 	isb	sy
 80174f4:	f3bf 8f4f 	dsb	sy
 80174f8:	61fb      	str	r3, [r7, #28]
}
 80174fa:	bf00      	nop
 80174fc:	e7fe      	b.n	80174fc <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80174fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017500:	681b      	ldr	r3, [r3, #0]
 8017502:	2b00      	cmp	r3, #0
 8017504:	d103      	bne.n	801750e <xQueueGiveFromISR+0x58>
 8017506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017508:	689b      	ldr	r3, [r3, #8]
 801750a:	2b00      	cmp	r3, #0
 801750c:	d101      	bne.n	8017512 <xQueueGiveFromISR+0x5c>
 801750e:	2301      	movs	r3, #1
 8017510:	e000      	b.n	8017514 <xQueueGiveFromISR+0x5e>
 8017512:	2300      	movs	r3, #0
 8017514:	2b00      	cmp	r3, #0
 8017516:	d10a      	bne.n	801752e <xQueueGiveFromISR+0x78>
	__asm volatile
 8017518:	f04f 0350 	mov.w	r3, #80	; 0x50
 801751c:	f383 8811 	msr	BASEPRI, r3
 8017520:	f3bf 8f6f 	isb	sy
 8017524:	f3bf 8f4f 	dsb	sy
 8017528:	61bb      	str	r3, [r7, #24]
}
 801752a:	bf00      	nop
 801752c:	e7fe      	b.n	801752c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801752e:	f7ff fb8b 	bl	8016c48 <vPortValidateInterruptPriority>
	__asm volatile
 8017532:	f3ef 8211 	mrs	r2, BASEPRI
 8017536:	f04f 0350 	mov.w	r3, #80	; 0x50
 801753a:	f383 8811 	msr	BASEPRI, r3
 801753e:	f3bf 8f6f 	isb	sy
 8017542:	f3bf 8f4f 	dsb	sy
 8017546:	617a      	str	r2, [r7, #20]
 8017548:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 801754a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801754c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801754e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017552:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8017554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017556:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017558:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801755a:	429a      	cmp	r2, r3
 801755c:	d22b      	bcs.n	80175b6 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801755e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017560:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017564:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8017568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801756a:	1c5a      	adds	r2, r3, #1
 801756c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801756e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8017570:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8017574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017578:	d112      	bne.n	80175a0 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801757a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801757c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801757e:	2b00      	cmp	r3, #0
 8017580:	d016      	beq.n	80175b0 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017584:	3324      	adds	r3, #36	; 0x24
 8017586:	4618      	mov	r0, r3
 8017588:	f001 f914 	bl	80187b4 <xTaskRemoveFromEventList>
 801758c:	4603      	mov	r3, r0
 801758e:	2b00      	cmp	r3, #0
 8017590:	d00e      	beq.n	80175b0 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8017592:	683b      	ldr	r3, [r7, #0]
 8017594:	2b00      	cmp	r3, #0
 8017596:	d00b      	beq.n	80175b0 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8017598:	683b      	ldr	r3, [r7, #0]
 801759a:	2201      	movs	r2, #1
 801759c:	601a      	str	r2, [r3, #0]
 801759e:	e007      	b.n	80175b0 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80175a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80175a4:	3301      	adds	r3, #1
 80175a6:	b2db      	uxtb	r3, r3
 80175a8:	b25a      	sxtb	r2, r3
 80175aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80175b0:	2301      	movs	r3, #1
 80175b2:	637b      	str	r3, [r7, #52]	; 0x34
 80175b4:	e001      	b.n	80175ba <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80175b6:	2300      	movs	r3, #0
 80175b8:	637b      	str	r3, [r7, #52]	; 0x34
 80175ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175bc:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80175be:	68fb      	ldr	r3, [r7, #12]
 80175c0:	f383 8811 	msr	BASEPRI, r3
}
 80175c4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80175c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80175c8:	4618      	mov	r0, r3
 80175ca:	3738      	adds	r7, #56	; 0x38
 80175cc:	46bd      	mov	sp, r7
 80175ce:	bd80      	pop	{r7, pc}

080175d0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80175d0:	b580      	push	{r7, lr}
 80175d2:	b08c      	sub	sp, #48	; 0x30
 80175d4:	af00      	add	r7, sp, #0
 80175d6:	60f8      	str	r0, [r7, #12]
 80175d8:	60b9      	str	r1, [r7, #8]
 80175da:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80175dc:	2300      	movs	r3, #0
 80175de:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80175e0:	68fb      	ldr	r3, [r7, #12]
 80175e2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80175e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175e6:	2b00      	cmp	r3, #0
 80175e8:	d10a      	bne.n	8017600 <xQueueReceive+0x30>
	__asm volatile
 80175ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80175ee:	f383 8811 	msr	BASEPRI, r3
 80175f2:	f3bf 8f6f 	isb	sy
 80175f6:	f3bf 8f4f 	dsb	sy
 80175fa:	623b      	str	r3, [r7, #32]
}
 80175fc:	bf00      	nop
 80175fe:	e7fe      	b.n	80175fe <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8017600:	68bb      	ldr	r3, [r7, #8]
 8017602:	2b00      	cmp	r3, #0
 8017604:	d103      	bne.n	801760e <xQueueReceive+0x3e>
 8017606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801760a:	2b00      	cmp	r3, #0
 801760c:	d101      	bne.n	8017612 <xQueueReceive+0x42>
 801760e:	2301      	movs	r3, #1
 8017610:	e000      	b.n	8017614 <xQueueReceive+0x44>
 8017612:	2300      	movs	r3, #0
 8017614:	2b00      	cmp	r3, #0
 8017616:	d10a      	bne.n	801762e <xQueueReceive+0x5e>
	__asm volatile
 8017618:	f04f 0350 	mov.w	r3, #80	; 0x50
 801761c:	f383 8811 	msr	BASEPRI, r3
 8017620:	f3bf 8f6f 	isb	sy
 8017624:	f3bf 8f4f 	dsb	sy
 8017628:	61fb      	str	r3, [r7, #28]
}
 801762a:	bf00      	nop
 801762c:	e7fe      	b.n	801762c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801762e:	f001 fa91 	bl	8018b54 <xTaskGetSchedulerState>
 8017632:	4603      	mov	r3, r0
 8017634:	2b00      	cmp	r3, #0
 8017636:	d102      	bne.n	801763e <xQueueReceive+0x6e>
 8017638:	687b      	ldr	r3, [r7, #4]
 801763a:	2b00      	cmp	r3, #0
 801763c:	d101      	bne.n	8017642 <xQueueReceive+0x72>
 801763e:	2301      	movs	r3, #1
 8017640:	e000      	b.n	8017644 <xQueueReceive+0x74>
 8017642:	2300      	movs	r3, #0
 8017644:	2b00      	cmp	r3, #0
 8017646:	d10a      	bne.n	801765e <xQueueReceive+0x8e>
	__asm volatile
 8017648:	f04f 0350 	mov.w	r3, #80	; 0x50
 801764c:	f383 8811 	msr	BASEPRI, r3
 8017650:	f3bf 8f6f 	isb	sy
 8017654:	f3bf 8f4f 	dsb	sy
 8017658:	61bb      	str	r3, [r7, #24]
}
 801765a:	bf00      	nop
 801765c:	e7fe      	b.n	801765c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801765e:	f7ff fa11 	bl	8016a84 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017666:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8017668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801766a:	2b00      	cmp	r3, #0
 801766c:	d01f      	beq.n	80176ae <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801766e:	68b9      	ldr	r1, [r7, #8]
 8017670:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017672:	f000 fabe 	bl	8017bf2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8017676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017678:	1e5a      	subs	r2, r3, #1
 801767a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801767c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801767e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017680:	691b      	ldr	r3, [r3, #16]
 8017682:	2b00      	cmp	r3, #0
 8017684:	d00f      	beq.n	80176a6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017688:	3310      	adds	r3, #16
 801768a:	4618      	mov	r0, r3
 801768c:	f001 f892 	bl	80187b4 <xTaskRemoveFromEventList>
 8017690:	4603      	mov	r3, r0
 8017692:	2b00      	cmp	r3, #0
 8017694:	d007      	beq.n	80176a6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8017696:	4b3d      	ldr	r3, [pc, #244]	; (801778c <xQueueReceive+0x1bc>)
 8017698:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801769c:	601a      	str	r2, [r3, #0]
 801769e:	f3bf 8f4f 	dsb	sy
 80176a2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80176a6:	f7ff fa1d 	bl	8016ae4 <vPortExitCritical>
				return pdPASS;
 80176aa:	2301      	movs	r3, #1
 80176ac:	e069      	b.n	8017782 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80176ae:	687b      	ldr	r3, [r7, #4]
 80176b0:	2b00      	cmp	r3, #0
 80176b2:	d103      	bne.n	80176bc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80176b4:	f7ff fa16 	bl	8016ae4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80176b8:	2300      	movs	r3, #0
 80176ba:	e062      	b.n	8017782 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80176bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80176be:	2b00      	cmp	r3, #0
 80176c0:	d106      	bne.n	80176d0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80176c2:	f107 0310 	add.w	r3, r7, #16
 80176c6:	4618      	mov	r0, r3
 80176c8:	f001 f8d8 	bl	801887c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80176cc:	2301      	movs	r3, #1
 80176ce:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80176d0:	f7ff fa08 	bl	8016ae4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80176d4:	f000 fe02 	bl	80182dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80176d8:	f7ff f9d4 	bl	8016a84 <vPortEnterCritical>
 80176dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80176de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80176e2:	b25b      	sxtb	r3, r3
 80176e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80176e8:	d103      	bne.n	80176f2 <xQueueReceive+0x122>
 80176ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80176ec:	2200      	movs	r2, #0
 80176ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80176f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80176f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80176f8:	b25b      	sxtb	r3, r3
 80176fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80176fe:	d103      	bne.n	8017708 <xQueueReceive+0x138>
 8017700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017702:	2200      	movs	r2, #0
 8017704:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8017708:	f7ff f9ec 	bl	8016ae4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801770c:	1d3a      	adds	r2, r7, #4
 801770e:	f107 0310 	add.w	r3, r7, #16
 8017712:	4611      	mov	r1, r2
 8017714:	4618      	mov	r0, r3
 8017716:	f001 f8c7 	bl	80188a8 <xTaskCheckForTimeOut>
 801771a:	4603      	mov	r3, r0
 801771c:	2b00      	cmp	r3, #0
 801771e:	d123      	bne.n	8017768 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8017720:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017722:	f000 fade 	bl	8017ce2 <prvIsQueueEmpty>
 8017726:	4603      	mov	r3, r0
 8017728:	2b00      	cmp	r3, #0
 801772a:	d017      	beq.n	801775c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801772c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801772e:	3324      	adds	r3, #36	; 0x24
 8017730:	687a      	ldr	r2, [r7, #4]
 8017732:	4611      	mov	r1, r2
 8017734:	4618      	mov	r0, r3
 8017736:	f000 ffed 	bl	8018714 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801773a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801773c:	f000 fa7f 	bl	8017c3e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8017740:	f000 fdda 	bl	80182f8 <xTaskResumeAll>
 8017744:	4603      	mov	r3, r0
 8017746:	2b00      	cmp	r3, #0
 8017748:	d189      	bne.n	801765e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 801774a:	4b10      	ldr	r3, [pc, #64]	; (801778c <xQueueReceive+0x1bc>)
 801774c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017750:	601a      	str	r2, [r3, #0]
 8017752:	f3bf 8f4f 	dsb	sy
 8017756:	f3bf 8f6f 	isb	sy
 801775a:	e780      	b.n	801765e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801775c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801775e:	f000 fa6e 	bl	8017c3e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8017762:	f000 fdc9 	bl	80182f8 <xTaskResumeAll>
 8017766:	e77a      	b.n	801765e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8017768:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801776a:	f000 fa68 	bl	8017c3e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801776e:	f000 fdc3 	bl	80182f8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8017772:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017774:	f000 fab5 	bl	8017ce2 <prvIsQueueEmpty>
 8017778:	4603      	mov	r3, r0
 801777a:	2b00      	cmp	r3, #0
 801777c:	f43f af6f 	beq.w	801765e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8017780:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8017782:	4618      	mov	r0, r3
 8017784:	3730      	adds	r7, #48	; 0x30
 8017786:	46bd      	mov	sp, r7
 8017788:	bd80      	pop	{r7, pc}
 801778a:	bf00      	nop
 801778c:	e000ed04 	.word	0xe000ed04

08017790 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8017790:	b580      	push	{r7, lr}
 8017792:	b08e      	sub	sp, #56	; 0x38
 8017794:	af00      	add	r7, sp, #0
 8017796:	6078      	str	r0, [r7, #4]
 8017798:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 801779a:	2300      	movs	r3, #0
 801779c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801779e:	687b      	ldr	r3, [r7, #4]
 80177a0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80177a2:	2300      	movs	r3, #0
 80177a4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80177a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80177a8:	2b00      	cmp	r3, #0
 80177aa:	d10a      	bne.n	80177c2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80177ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80177b0:	f383 8811 	msr	BASEPRI, r3
 80177b4:	f3bf 8f6f 	isb	sy
 80177b8:	f3bf 8f4f 	dsb	sy
 80177bc:	623b      	str	r3, [r7, #32]
}
 80177be:	bf00      	nop
 80177c0:	e7fe      	b.n	80177c0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80177c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80177c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80177c6:	2b00      	cmp	r3, #0
 80177c8:	d00a      	beq.n	80177e0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80177ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80177ce:	f383 8811 	msr	BASEPRI, r3
 80177d2:	f3bf 8f6f 	isb	sy
 80177d6:	f3bf 8f4f 	dsb	sy
 80177da:	61fb      	str	r3, [r7, #28]
}
 80177dc:	bf00      	nop
 80177de:	e7fe      	b.n	80177de <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80177e0:	f001 f9b8 	bl	8018b54 <xTaskGetSchedulerState>
 80177e4:	4603      	mov	r3, r0
 80177e6:	2b00      	cmp	r3, #0
 80177e8:	d102      	bne.n	80177f0 <xQueueSemaphoreTake+0x60>
 80177ea:	683b      	ldr	r3, [r7, #0]
 80177ec:	2b00      	cmp	r3, #0
 80177ee:	d101      	bne.n	80177f4 <xQueueSemaphoreTake+0x64>
 80177f0:	2301      	movs	r3, #1
 80177f2:	e000      	b.n	80177f6 <xQueueSemaphoreTake+0x66>
 80177f4:	2300      	movs	r3, #0
 80177f6:	2b00      	cmp	r3, #0
 80177f8:	d10a      	bne.n	8017810 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80177fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80177fe:	f383 8811 	msr	BASEPRI, r3
 8017802:	f3bf 8f6f 	isb	sy
 8017806:	f3bf 8f4f 	dsb	sy
 801780a:	61bb      	str	r3, [r7, #24]
}
 801780c:	bf00      	nop
 801780e:	e7fe      	b.n	801780e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8017810:	f7ff f938 	bl	8016a84 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8017814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017818:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 801781a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801781c:	2b00      	cmp	r3, #0
 801781e:	d024      	beq.n	801786a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8017820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017822:	1e5a      	subs	r2, r3, #1
 8017824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017826:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8017828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801782a:	681b      	ldr	r3, [r3, #0]
 801782c:	2b00      	cmp	r3, #0
 801782e:	d104      	bne.n	801783a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8017830:	f001 fb06 	bl	8018e40 <pvTaskIncrementMutexHeldCount>
 8017834:	4602      	mov	r2, r0
 8017836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017838:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801783a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801783c:	691b      	ldr	r3, [r3, #16]
 801783e:	2b00      	cmp	r3, #0
 8017840:	d00f      	beq.n	8017862 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017844:	3310      	adds	r3, #16
 8017846:	4618      	mov	r0, r3
 8017848:	f000 ffb4 	bl	80187b4 <xTaskRemoveFromEventList>
 801784c:	4603      	mov	r3, r0
 801784e:	2b00      	cmp	r3, #0
 8017850:	d007      	beq.n	8017862 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8017852:	4b54      	ldr	r3, [pc, #336]	; (80179a4 <xQueueSemaphoreTake+0x214>)
 8017854:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017858:	601a      	str	r2, [r3, #0]
 801785a:	f3bf 8f4f 	dsb	sy
 801785e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8017862:	f7ff f93f 	bl	8016ae4 <vPortExitCritical>
				return pdPASS;
 8017866:	2301      	movs	r3, #1
 8017868:	e097      	b.n	801799a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801786a:	683b      	ldr	r3, [r7, #0]
 801786c:	2b00      	cmp	r3, #0
 801786e:	d111      	bne.n	8017894 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8017870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017872:	2b00      	cmp	r3, #0
 8017874:	d00a      	beq.n	801788c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8017876:	f04f 0350 	mov.w	r3, #80	; 0x50
 801787a:	f383 8811 	msr	BASEPRI, r3
 801787e:	f3bf 8f6f 	isb	sy
 8017882:	f3bf 8f4f 	dsb	sy
 8017886:	617b      	str	r3, [r7, #20]
}
 8017888:	bf00      	nop
 801788a:	e7fe      	b.n	801788a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 801788c:	f7ff f92a 	bl	8016ae4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8017890:	2300      	movs	r3, #0
 8017892:	e082      	b.n	801799a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8017894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017896:	2b00      	cmp	r3, #0
 8017898:	d106      	bne.n	80178a8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801789a:	f107 030c 	add.w	r3, r7, #12
 801789e:	4618      	mov	r0, r3
 80178a0:	f000 ffec 	bl	801887c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80178a4:	2301      	movs	r3, #1
 80178a6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80178a8:	f7ff f91c 	bl	8016ae4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80178ac:	f000 fd16 	bl	80182dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80178b0:	f7ff f8e8 	bl	8016a84 <vPortEnterCritical>
 80178b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80178b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80178ba:	b25b      	sxtb	r3, r3
 80178bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80178c0:	d103      	bne.n	80178ca <xQueueSemaphoreTake+0x13a>
 80178c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80178c4:	2200      	movs	r2, #0
 80178c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80178ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80178cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80178d0:	b25b      	sxtb	r3, r3
 80178d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80178d6:	d103      	bne.n	80178e0 <xQueueSemaphoreTake+0x150>
 80178d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80178da:	2200      	movs	r2, #0
 80178dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80178e0:	f7ff f900 	bl	8016ae4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80178e4:	463a      	mov	r2, r7
 80178e6:	f107 030c 	add.w	r3, r7, #12
 80178ea:	4611      	mov	r1, r2
 80178ec:	4618      	mov	r0, r3
 80178ee:	f000 ffdb 	bl	80188a8 <xTaskCheckForTimeOut>
 80178f2:	4603      	mov	r3, r0
 80178f4:	2b00      	cmp	r3, #0
 80178f6:	d132      	bne.n	801795e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80178f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80178fa:	f000 f9f2 	bl	8017ce2 <prvIsQueueEmpty>
 80178fe:	4603      	mov	r3, r0
 8017900:	2b00      	cmp	r3, #0
 8017902:	d026      	beq.n	8017952 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8017904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017906:	681b      	ldr	r3, [r3, #0]
 8017908:	2b00      	cmp	r3, #0
 801790a:	d109      	bne.n	8017920 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 801790c:	f7ff f8ba 	bl	8016a84 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8017910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017912:	689b      	ldr	r3, [r3, #8]
 8017914:	4618      	mov	r0, r3
 8017916:	f001 f93b 	bl	8018b90 <xTaskPriorityInherit>
 801791a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 801791c:	f7ff f8e2 	bl	8016ae4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8017920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017922:	3324      	adds	r3, #36	; 0x24
 8017924:	683a      	ldr	r2, [r7, #0]
 8017926:	4611      	mov	r1, r2
 8017928:	4618      	mov	r0, r3
 801792a:	f000 fef3 	bl	8018714 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801792e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017930:	f000 f985 	bl	8017c3e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8017934:	f000 fce0 	bl	80182f8 <xTaskResumeAll>
 8017938:	4603      	mov	r3, r0
 801793a:	2b00      	cmp	r3, #0
 801793c:	f47f af68 	bne.w	8017810 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8017940:	4b18      	ldr	r3, [pc, #96]	; (80179a4 <xQueueSemaphoreTake+0x214>)
 8017942:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017946:	601a      	str	r2, [r3, #0]
 8017948:	f3bf 8f4f 	dsb	sy
 801794c:	f3bf 8f6f 	isb	sy
 8017950:	e75e      	b.n	8017810 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8017952:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017954:	f000 f973 	bl	8017c3e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8017958:	f000 fcce 	bl	80182f8 <xTaskResumeAll>
 801795c:	e758      	b.n	8017810 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 801795e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017960:	f000 f96d 	bl	8017c3e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8017964:	f000 fcc8 	bl	80182f8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8017968:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801796a:	f000 f9ba 	bl	8017ce2 <prvIsQueueEmpty>
 801796e:	4603      	mov	r3, r0
 8017970:	2b00      	cmp	r3, #0
 8017972:	f43f af4d 	beq.w	8017810 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8017976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017978:	2b00      	cmp	r3, #0
 801797a:	d00d      	beq.n	8017998 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 801797c:	f7ff f882 	bl	8016a84 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8017980:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017982:	f000 f8b4 	bl	8017aee <prvGetDisinheritPriorityAfterTimeout>
 8017986:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8017988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801798a:	689b      	ldr	r3, [r3, #8]
 801798c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801798e:	4618      	mov	r0, r3
 8017990:	f001 f9d4 	bl	8018d3c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8017994:	f7ff f8a6 	bl	8016ae4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8017998:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801799a:	4618      	mov	r0, r3
 801799c:	3738      	adds	r7, #56	; 0x38
 801799e:	46bd      	mov	sp, r7
 80179a0:	bd80      	pop	{r7, pc}
 80179a2:	bf00      	nop
 80179a4:	e000ed04 	.word	0xe000ed04

080179a8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80179a8:	b580      	push	{r7, lr}
 80179aa:	b08e      	sub	sp, #56	; 0x38
 80179ac:	af00      	add	r7, sp, #0
 80179ae:	60f8      	str	r0, [r7, #12]
 80179b0:	60b9      	str	r1, [r7, #8]
 80179b2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80179b4:	68fb      	ldr	r3, [r7, #12]
 80179b6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80179b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80179ba:	2b00      	cmp	r3, #0
 80179bc:	d10a      	bne.n	80179d4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80179be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80179c2:	f383 8811 	msr	BASEPRI, r3
 80179c6:	f3bf 8f6f 	isb	sy
 80179ca:	f3bf 8f4f 	dsb	sy
 80179ce:	623b      	str	r3, [r7, #32]
}
 80179d0:	bf00      	nop
 80179d2:	e7fe      	b.n	80179d2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80179d4:	68bb      	ldr	r3, [r7, #8]
 80179d6:	2b00      	cmp	r3, #0
 80179d8:	d103      	bne.n	80179e2 <xQueueReceiveFromISR+0x3a>
 80179da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80179dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80179de:	2b00      	cmp	r3, #0
 80179e0:	d101      	bne.n	80179e6 <xQueueReceiveFromISR+0x3e>
 80179e2:	2301      	movs	r3, #1
 80179e4:	e000      	b.n	80179e8 <xQueueReceiveFromISR+0x40>
 80179e6:	2300      	movs	r3, #0
 80179e8:	2b00      	cmp	r3, #0
 80179ea:	d10a      	bne.n	8017a02 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80179ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80179f0:	f383 8811 	msr	BASEPRI, r3
 80179f4:	f3bf 8f6f 	isb	sy
 80179f8:	f3bf 8f4f 	dsb	sy
 80179fc:	61fb      	str	r3, [r7, #28]
}
 80179fe:	bf00      	nop
 8017a00:	e7fe      	b.n	8017a00 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8017a02:	f7ff f921 	bl	8016c48 <vPortValidateInterruptPriority>
	__asm volatile
 8017a06:	f3ef 8211 	mrs	r2, BASEPRI
 8017a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017a0e:	f383 8811 	msr	BASEPRI, r3
 8017a12:	f3bf 8f6f 	isb	sy
 8017a16:	f3bf 8f4f 	dsb	sy
 8017a1a:	61ba      	str	r2, [r7, #24]
 8017a1c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8017a1e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8017a20:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017a26:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8017a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017a2a:	2b00      	cmp	r3, #0
 8017a2c:	d02f      	beq.n	8017a8e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8017a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017a34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8017a38:	68b9      	ldr	r1, [r7, #8]
 8017a3a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017a3c:	f000 f8d9 	bl	8017bf2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8017a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017a42:	1e5a      	subs	r2, r3, #1
 8017a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a46:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8017a48:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8017a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017a50:	d112      	bne.n	8017a78 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a54:	691b      	ldr	r3, [r3, #16]
 8017a56:	2b00      	cmp	r3, #0
 8017a58:	d016      	beq.n	8017a88 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a5c:	3310      	adds	r3, #16
 8017a5e:	4618      	mov	r0, r3
 8017a60:	f000 fea8 	bl	80187b4 <xTaskRemoveFromEventList>
 8017a64:	4603      	mov	r3, r0
 8017a66:	2b00      	cmp	r3, #0
 8017a68:	d00e      	beq.n	8017a88 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8017a6a:	687b      	ldr	r3, [r7, #4]
 8017a6c:	2b00      	cmp	r3, #0
 8017a6e:	d00b      	beq.n	8017a88 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8017a70:	687b      	ldr	r3, [r7, #4]
 8017a72:	2201      	movs	r2, #1
 8017a74:	601a      	str	r2, [r3, #0]
 8017a76:	e007      	b.n	8017a88 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8017a78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017a7c:	3301      	adds	r3, #1
 8017a7e:	b2db      	uxtb	r3, r3
 8017a80:	b25a      	sxtb	r2, r3
 8017a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8017a88:	2301      	movs	r3, #1
 8017a8a:	637b      	str	r3, [r7, #52]	; 0x34
 8017a8c:	e001      	b.n	8017a92 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8017a8e:	2300      	movs	r3, #0
 8017a90:	637b      	str	r3, [r7, #52]	; 0x34
 8017a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a94:	613b      	str	r3, [r7, #16]
	__asm volatile
 8017a96:	693b      	ldr	r3, [r7, #16]
 8017a98:	f383 8811 	msr	BASEPRI, r3
}
 8017a9c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8017a9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8017aa0:	4618      	mov	r0, r3
 8017aa2:	3738      	adds	r7, #56	; 0x38
 8017aa4:	46bd      	mov	sp, r7
 8017aa6:	bd80      	pop	{r7, pc}

08017aa8 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8017aa8:	b580      	push	{r7, lr}
 8017aaa:	b084      	sub	sp, #16
 8017aac:	af00      	add	r7, sp, #0
 8017aae:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8017ab0:	687b      	ldr	r3, [r7, #4]
 8017ab2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8017ab4:	68fb      	ldr	r3, [r7, #12]
 8017ab6:	2b00      	cmp	r3, #0
 8017ab8:	d10a      	bne.n	8017ad0 <vQueueDelete+0x28>
	__asm volatile
 8017aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017abe:	f383 8811 	msr	BASEPRI, r3
 8017ac2:	f3bf 8f6f 	isb	sy
 8017ac6:	f3bf 8f4f 	dsb	sy
 8017aca:	60bb      	str	r3, [r7, #8]
}
 8017acc:	bf00      	nop
 8017ace:	e7fe      	b.n	8017ace <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8017ad0:	68f8      	ldr	r0, [r7, #12]
 8017ad2:	f000 f95f 	bl	8017d94 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8017ad6:	68fb      	ldr	r3, [r7, #12]
 8017ad8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8017adc:	2b00      	cmp	r3, #0
 8017ade:	d102      	bne.n	8017ae6 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8017ae0:	68f8      	ldr	r0, [r7, #12]
 8017ae2:	f7fe fcd1 	bl	8016488 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8017ae6:	bf00      	nop
 8017ae8:	3710      	adds	r7, #16
 8017aea:	46bd      	mov	sp, r7
 8017aec:	bd80      	pop	{r7, pc}

08017aee <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8017aee:	b480      	push	{r7}
 8017af0:	b085      	sub	sp, #20
 8017af2:	af00      	add	r7, sp, #0
 8017af4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8017af6:	687b      	ldr	r3, [r7, #4]
 8017af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017afa:	2b00      	cmp	r3, #0
 8017afc:	d006      	beq.n	8017b0c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8017afe:	687b      	ldr	r3, [r7, #4]
 8017b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017b02:	681b      	ldr	r3, [r3, #0]
 8017b04:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8017b08:	60fb      	str	r3, [r7, #12]
 8017b0a:	e001      	b.n	8017b10 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8017b0c:	2300      	movs	r3, #0
 8017b0e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8017b10:	68fb      	ldr	r3, [r7, #12]
	}
 8017b12:	4618      	mov	r0, r3
 8017b14:	3714      	adds	r7, #20
 8017b16:	46bd      	mov	sp, r7
 8017b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b1c:	4770      	bx	lr

08017b1e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8017b1e:	b580      	push	{r7, lr}
 8017b20:	b086      	sub	sp, #24
 8017b22:	af00      	add	r7, sp, #0
 8017b24:	60f8      	str	r0, [r7, #12]
 8017b26:	60b9      	str	r1, [r7, #8]
 8017b28:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8017b2a:	2300      	movs	r3, #0
 8017b2c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017b2e:	68fb      	ldr	r3, [r7, #12]
 8017b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017b32:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8017b34:	68fb      	ldr	r3, [r7, #12]
 8017b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017b38:	2b00      	cmp	r3, #0
 8017b3a:	d10d      	bne.n	8017b58 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8017b3c:	68fb      	ldr	r3, [r7, #12]
 8017b3e:	681b      	ldr	r3, [r3, #0]
 8017b40:	2b00      	cmp	r3, #0
 8017b42:	d14d      	bne.n	8017be0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8017b44:	68fb      	ldr	r3, [r7, #12]
 8017b46:	689b      	ldr	r3, [r3, #8]
 8017b48:	4618      	mov	r0, r3
 8017b4a:	f001 f889 	bl	8018c60 <xTaskPriorityDisinherit>
 8017b4e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8017b50:	68fb      	ldr	r3, [r7, #12]
 8017b52:	2200      	movs	r2, #0
 8017b54:	609a      	str	r2, [r3, #8]
 8017b56:	e043      	b.n	8017be0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8017b58:	687b      	ldr	r3, [r7, #4]
 8017b5a:	2b00      	cmp	r3, #0
 8017b5c:	d119      	bne.n	8017b92 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8017b5e:	68fb      	ldr	r3, [r7, #12]
 8017b60:	6858      	ldr	r0, [r3, #4]
 8017b62:	68fb      	ldr	r3, [r7, #12]
 8017b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017b66:	461a      	mov	r2, r3
 8017b68:	68b9      	ldr	r1, [r7, #8]
 8017b6a:	f010 ff13 	bl	8028994 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8017b6e:	68fb      	ldr	r3, [r7, #12]
 8017b70:	685a      	ldr	r2, [r3, #4]
 8017b72:	68fb      	ldr	r3, [r7, #12]
 8017b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017b76:	441a      	add	r2, r3
 8017b78:	68fb      	ldr	r3, [r7, #12]
 8017b7a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8017b7c:	68fb      	ldr	r3, [r7, #12]
 8017b7e:	685a      	ldr	r2, [r3, #4]
 8017b80:	68fb      	ldr	r3, [r7, #12]
 8017b82:	689b      	ldr	r3, [r3, #8]
 8017b84:	429a      	cmp	r2, r3
 8017b86:	d32b      	bcc.n	8017be0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8017b88:	68fb      	ldr	r3, [r7, #12]
 8017b8a:	681a      	ldr	r2, [r3, #0]
 8017b8c:	68fb      	ldr	r3, [r7, #12]
 8017b8e:	605a      	str	r2, [r3, #4]
 8017b90:	e026      	b.n	8017be0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8017b92:	68fb      	ldr	r3, [r7, #12]
 8017b94:	68d8      	ldr	r0, [r3, #12]
 8017b96:	68fb      	ldr	r3, [r7, #12]
 8017b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017b9a:	461a      	mov	r2, r3
 8017b9c:	68b9      	ldr	r1, [r7, #8]
 8017b9e:	f010 fef9 	bl	8028994 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8017ba2:	68fb      	ldr	r3, [r7, #12]
 8017ba4:	68da      	ldr	r2, [r3, #12]
 8017ba6:	68fb      	ldr	r3, [r7, #12]
 8017ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017baa:	425b      	negs	r3, r3
 8017bac:	441a      	add	r2, r3
 8017bae:	68fb      	ldr	r3, [r7, #12]
 8017bb0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8017bb2:	68fb      	ldr	r3, [r7, #12]
 8017bb4:	68da      	ldr	r2, [r3, #12]
 8017bb6:	68fb      	ldr	r3, [r7, #12]
 8017bb8:	681b      	ldr	r3, [r3, #0]
 8017bba:	429a      	cmp	r2, r3
 8017bbc:	d207      	bcs.n	8017bce <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8017bbe:	68fb      	ldr	r3, [r7, #12]
 8017bc0:	689a      	ldr	r2, [r3, #8]
 8017bc2:	68fb      	ldr	r3, [r7, #12]
 8017bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017bc6:	425b      	negs	r3, r3
 8017bc8:	441a      	add	r2, r3
 8017bca:	68fb      	ldr	r3, [r7, #12]
 8017bcc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8017bce:	687b      	ldr	r3, [r7, #4]
 8017bd0:	2b02      	cmp	r3, #2
 8017bd2:	d105      	bne.n	8017be0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8017bd4:	693b      	ldr	r3, [r7, #16]
 8017bd6:	2b00      	cmp	r3, #0
 8017bd8:	d002      	beq.n	8017be0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8017bda:	693b      	ldr	r3, [r7, #16]
 8017bdc:	3b01      	subs	r3, #1
 8017bde:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8017be0:	693b      	ldr	r3, [r7, #16]
 8017be2:	1c5a      	adds	r2, r3, #1
 8017be4:	68fb      	ldr	r3, [r7, #12]
 8017be6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8017be8:	697b      	ldr	r3, [r7, #20]
}
 8017bea:	4618      	mov	r0, r3
 8017bec:	3718      	adds	r7, #24
 8017bee:	46bd      	mov	sp, r7
 8017bf0:	bd80      	pop	{r7, pc}

08017bf2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8017bf2:	b580      	push	{r7, lr}
 8017bf4:	b082      	sub	sp, #8
 8017bf6:	af00      	add	r7, sp, #0
 8017bf8:	6078      	str	r0, [r7, #4]
 8017bfa:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8017bfc:	687b      	ldr	r3, [r7, #4]
 8017bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017c00:	2b00      	cmp	r3, #0
 8017c02:	d018      	beq.n	8017c36 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8017c04:	687b      	ldr	r3, [r7, #4]
 8017c06:	68da      	ldr	r2, [r3, #12]
 8017c08:	687b      	ldr	r3, [r7, #4]
 8017c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017c0c:	441a      	add	r2, r3
 8017c0e:	687b      	ldr	r3, [r7, #4]
 8017c10:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8017c12:	687b      	ldr	r3, [r7, #4]
 8017c14:	68da      	ldr	r2, [r3, #12]
 8017c16:	687b      	ldr	r3, [r7, #4]
 8017c18:	689b      	ldr	r3, [r3, #8]
 8017c1a:	429a      	cmp	r2, r3
 8017c1c:	d303      	bcc.n	8017c26 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8017c1e:	687b      	ldr	r3, [r7, #4]
 8017c20:	681a      	ldr	r2, [r3, #0]
 8017c22:	687b      	ldr	r3, [r7, #4]
 8017c24:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8017c26:	687b      	ldr	r3, [r7, #4]
 8017c28:	68d9      	ldr	r1, [r3, #12]
 8017c2a:	687b      	ldr	r3, [r7, #4]
 8017c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017c2e:	461a      	mov	r2, r3
 8017c30:	6838      	ldr	r0, [r7, #0]
 8017c32:	f010 feaf 	bl	8028994 <memcpy>
	}
}
 8017c36:	bf00      	nop
 8017c38:	3708      	adds	r7, #8
 8017c3a:	46bd      	mov	sp, r7
 8017c3c:	bd80      	pop	{r7, pc}

08017c3e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8017c3e:	b580      	push	{r7, lr}
 8017c40:	b084      	sub	sp, #16
 8017c42:	af00      	add	r7, sp, #0
 8017c44:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8017c46:	f7fe ff1d 	bl	8016a84 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8017c4a:	687b      	ldr	r3, [r7, #4]
 8017c4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017c50:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8017c52:	e011      	b.n	8017c78 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8017c54:	687b      	ldr	r3, [r7, #4]
 8017c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017c58:	2b00      	cmp	r3, #0
 8017c5a:	d012      	beq.n	8017c82 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017c5c:	687b      	ldr	r3, [r7, #4]
 8017c5e:	3324      	adds	r3, #36	; 0x24
 8017c60:	4618      	mov	r0, r3
 8017c62:	f000 fda7 	bl	80187b4 <xTaskRemoveFromEventList>
 8017c66:	4603      	mov	r3, r0
 8017c68:	2b00      	cmp	r3, #0
 8017c6a:	d001      	beq.n	8017c70 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8017c6c:	f000 fe7e 	bl	801896c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8017c70:	7bfb      	ldrb	r3, [r7, #15]
 8017c72:	3b01      	subs	r3, #1
 8017c74:	b2db      	uxtb	r3, r3
 8017c76:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8017c78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017c7c:	2b00      	cmp	r3, #0
 8017c7e:	dce9      	bgt.n	8017c54 <prvUnlockQueue+0x16>
 8017c80:	e000      	b.n	8017c84 <prvUnlockQueue+0x46>
					break;
 8017c82:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8017c84:	687b      	ldr	r3, [r7, #4]
 8017c86:	22ff      	movs	r2, #255	; 0xff
 8017c88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8017c8c:	f7fe ff2a 	bl	8016ae4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8017c90:	f7fe fef8 	bl	8016a84 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8017c94:	687b      	ldr	r3, [r7, #4]
 8017c96:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017c9a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8017c9c:	e011      	b.n	8017cc2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017c9e:	687b      	ldr	r3, [r7, #4]
 8017ca0:	691b      	ldr	r3, [r3, #16]
 8017ca2:	2b00      	cmp	r3, #0
 8017ca4:	d012      	beq.n	8017ccc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017ca6:	687b      	ldr	r3, [r7, #4]
 8017ca8:	3310      	adds	r3, #16
 8017caa:	4618      	mov	r0, r3
 8017cac:	f000 fd82 	bl	80187b4 <xTaskRemoveFromEventList>
 8017cb0:	4603      	mov	r3, r0
 8017cb2:	2b00      	cmp	r3, #0
 8017cb4:	d001      	beq.n	8017cba <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8017cb6:	f000 fe59 	bl	801896c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8017cba:	7bbb      	ldrb	r3, [r7, #14]
 8017cbc:	3b01      	subs	r3, #1
 8017cbe:	b2db      	uxtb	r3, r3
 8017cc0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8017cc2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8017cc6:	2b00      	cmp	r3, #0
 8017cc8:	dce9      	bgt.n	8017c9e <prvUnlockQueue+0x60>
 8017cca:	e000      	b.n	8017cce <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8017ccc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8017cce:	687b      	ldr	r3, [r7, #4]
 8017cd0:	22ff      	movs	r2, #255	; 0xff
 8017cd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8017cd6:	f7fe ff05 	bl	8016ae4 <vPortExitCritical>
}
 8017cda:	bf00      	nop
 8017cdc:	3710      	adds	r7, #16
 8017cde:	46bd      	mov	sp, r7
 8017ce0:	bd80      	pop	{r7, pc}

08017ce2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8017ce2:	b580      	push	{r7, lr}
 8017ce4:	b084      	sub	sp, #16
 8017ce6:	af00      	add	r7, sp, #0
 8017ce8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8017cea:	f7fe fecb 	bl	8016a84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8017cee:	687b      	ldr	r3, [r7, #4]
 8017cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017cf2:	2b00      	cmp	r3, #0
 8017cf4:	d102      	bne.n	8017cfc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8017cf6:	2301      	movs	r3, #1
 8017cf8:	60fb      	str	r3, [r7, #12]
 8017cfa:	e001      	b.n	8017d00 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8017cfc:	2300      	movs	r3, #0
 8017cfe:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8017d00:	f7fe fef0 	bl	8016ae4 <vPortExitCritical>

	return xReturn;
 8017d04:	68fb      	ldr	r3, [r7, #12]
}
 8017d06:	4618      	mov	r0, r3
 8017d08:	3710      	adds	r7, #16
 8017d0a:	46bd      	mov	sp, r7
 8017d0c:	bd80      	pop	{r7, pc}

08017d0e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8017d0e:	b580      	push	{r7, lr}
 8017d10:	b084      	sub	sp, #16
 8017d12:	af00      	add	r7, sp, #0
 8017d14:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8017d16:	f7fe feb5 	bl	8016a84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8017d1a:	687b      	ldr	r3, [r7, #4]
 8017d1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8017d1e:	687b      	ldr	r3, [r7, #4]
 8017d20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017d22:	429a      	cmp	r2, r3
 8017d24:	d102      	bne.n	8017d2c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8017d26:	2301      	movs	r3, #1
 8017d28:	60fb      	str	r3, [r7, #12]
 8017d2a:	e001      	b.n	8017d30 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8017d2c:	2300      	movs	r3, #0
 8017d2e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8017d30:	f7fe fed8 	bl	8016ae4 <vPortExitCritical>

	return xReturn;
 8017d34:	68fb      	ldr	r3, [r7, #12]
}
 8017d36:	4618      	mov	r0, r3
 8017d38:	3710      	adds	r7, #16
 8017d3a:	46bd      	mov	sp, r7
 8017d3c:	bd80      	pop	{r7, pc}
	...

08017d40 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8017d40:	b480      	push	{r7}
 8017d42:	b085      	sub	sp, #20
 8017d44:	af00      	add	r7, sp, #0
 8017d46:	6078      	str	r0, [r7, #4]
 8017d48:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8017d4a:	2300      	movs	r3, #0
 8017d4c:	60fb      	str	r3, [r7, #12]
 8017d4e:	e014      	b.n	8017d7a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8017d50:	4a0f      	ldr	r2, [pc, #60]	; (8017d90 <vQueueAddToRegistry+0x50>)
 8017d52:	68fb      	ldr	r3, [r7, #12]
 8017d54:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8017d58:	2b00      	cmp	r3, #0
 8017d5a:	d10b      	bne.n	8017d74 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8017d5c:	490c      	ldr	r1, [pc, #48]	; (8017d90 <vQueueAddToRegistry+0x50>)
 8017d5e:	68fb      	ldr	r3, [r7, #12]
 8017d60:	683a      	ldr	r2, [r7, #0]
 8017d62:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8017d66:	4a0a      	ldr	r2, [pc, #40]	; (8017d90 <vQueueAddToRegistry+0x50>)
 8017d68:	68fb      	ldr	r3, [r7, #12]
 8017d6a:	00db      	lsls	r3, r3, #3
 8017d6c:	4413      	add	r3, r2
 8017d6e:	687a      	ldr	r2, [r7, #4]
 8017d70:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8017d72:	e006      	b.n	8017d82 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8017d74:	68fb      	ldr	r3, [r7, #12]
 8017d76:	3301      	adds	r3, #1
 8017d78:	60fb      	str	r3, [r7, #12]
 8017d7a:	68fb      	ldr	r3, [r7, #12]
 8017d7c:	2b07      	cmp	r3, #7
 8017d7e:	d9e7      	bls.n	8017d50 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8017d80:	bf00      	nop
 8017d82:	bf00      	nop
 8017d84:	3714      	adds	r7, #20
 8017d86:	46bd      	mov	sp, r7
 8017d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d8c:	4770      	bx	lr
 8017d8e:	bf00      	nop
 8017d90:	24024b88 	.word	0x24024b88

08017d94 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8017d94:	b480      	push	{r7}
 8017d96:	b085      	sub	sp, #20
 8017d98:	af00      	add	r7, sp, #0
 8017d9a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8017d9c:	2300      	movs	r3, #0
 8017d9e:	60fb      	str	r3, [r7, #12]
 8017da0:	e016      	b.n	8017dd0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8017da2:	4a10      	ldr	r2, [pc, #64]	; (8017de4 <vQueueUnregisterQueue+0x50>)
 8017da4:	68fb      	ldr	r3, [r7, #12]
 8017da6:	00db      	lsls	r3, r3, #3
 8017da8:	4413      	add	r3, r2
 8017daa:	685b      	ldr	r3, [r3, #4]
 8017dac:	687a      	ldr	r2, [r7, #4]
 8017dae:	429a      	cmp	r2, r3
 8017db0:	d10b      	bne.n	8017dca <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8017db2:	4a0c      	ldr	r2, [pc, #48]	; (8017de4 <vQueueUnregisterQueue+0x50>)
 8017db4:	68fb      	ldr	r3, [r7, #12]
 8017db6:	2100      	movs	r1, #0
 8017db8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8017dbc:	4a09      	ldr	r2, [pc, #36]	; (8017de4 <vQueueUnregisterQueue+0x50>)
 8017dbe:	68fb      	ldr	r3, [r7, #12]
 8017dc0:	00db      	lsls	r3, r3, #3
 8017dc2:	4413      	add	r3, r2
 8017dc4:	2200      	movs	r2, #0
 8017dc6:	605a      	str	r2, [r3, #4]
				break;
 8017dc8:	e006      	b.n	8017dd8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8017dca:	68fb      	ldr	r3, [r7, #12]
 8017dcc:	3301      	adds	r3, #1
 8017dce:	60fb      	str	r3, [r7, #12]
 8017dd0:	68fb      	ldr	r3, [r7, #12]
 8017dd2:	2b07      	cmp	r3, #7
 8017dd4:	d9e5      	bls.n	8017da2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8017dd6:	bf00      	nop
 8017dd8:	bf00      	nop
 8017dda:	3714      	adds	r7, #20
 8017ddc:	46bd      	mov	sp, r7
 8017dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017de2:	4770      	bx	lr
 8017de4:	24024b88 	.word	0x24024b88

08017de8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8017de8:	b580      	push	{r7, lr}
 8017dea:	b086      	sub	sp, #24
 8017dec:	af00      	add	r7, sp, #0
 8017dee:	60f8      	str	r0, [r7, #12]
 8017df0:	60b9      	str	r1, [r7, #8]
 8017df2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8017df4:	68fb      	ldr	r3, [r7, #12]
 8017df6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8017df8:	f7fe fe44 	bl	8016a84 <vPortEnterCritical>
 8017dfc:	697b      	ldr	r3, [r7, #20]
 8017dfe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017e02:	b25b      	sxtb	r3, r3
 8017e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017e08:	d103      	bne.n	8017e12 <vQueueWaitForMessageRestricted+0x2a>
 8017e0a:	697b      	ldr	r3, [r7, #20]
 8017e0c:	2200      	movs	r2, #0
 8017e0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8017e12:	697b      	ldr	r3, [r7, #20]
 8017e14:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017e18:	b25b      	sxtb	r3, r3
 8017e1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017e1e:	d103      	bne.n	8017e28 <vQueueWaitForMessageRestricted+0x40>
 8017e20:	697b      	ldr	r3, [r7, #20]
 8017e22:	2200      	movs	r2, #0
 8017e24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8017e28:	f7fe fe5c 	bl	8016ae4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8017e2c:	697b      	ldr	r3, [r7, #20]
 8017e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017e30:	2b00      	cmp	r3, #0
 8017e32:	d106      	bne.n	8017e42 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8017e34:	697b      	ldr	r3, [r7, #20]
 8017e36:	3324      	adds	r3, #36	; 0x24
 8017e38:	687a      	ldr	r2, [r7, #4]
 8017e3a:	68b9      	ldr	r1, [r7, #8]
 8017e3c:	4618      	mov	r0, r3
 8017e3e:	f000 fc8d 	bl	801875c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8017e42:	6978      	ldr	r0, [r7, #20]
 8017e44:	f7ff fefb 	bl	8017c3e <prvUnlockQueue>
	}
 8017e48:	bf00      	nop
 8017e4a:	3718      	adds	r7, #24
 8017e4c:	46bd      	mov	sp, r7
 8017e4e:	bd80      	pop	{r7, pc}

08017e50 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8017e50:	b580      	push	{r7, lr}
 8017e52:	b08e      	sub	sp, #56	; 0x38
 8017e54:	af04      	add	r7, sp, #16
 8017e56:	60f8      	str	r0, [r7, #12]
 8017e58:	60b9      	str	r1, [r7, #8]
 8017e5a:	607a      	str	r2, [r7, #4]
 8017e5c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8017e5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017e60:	2b00      	cmp	r3, #0
 8017e62:	d10a      	bne.n	8017e7a <xTaskCreateStatic+0x2a>
	__asm volatile
 8017e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e68:	f383 8811 	msr	BASEPRI, r3
 8017e6c:	f3bf 8f6f 	isb	sy
 8017e70:	f3bf 8f4f 	dsb	sy
 8017e74:	623b      	str	r3, [r7, #32]
}
 8017e76:	bf00      	nop
 8017e78:	e7fe      	b.n	8017e78 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8017e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017e7c:	2b00      	cmp	r3, #0
 8017e7e:	d10a      	bne.n	8017e96 <xTaskCreateStatic+0x46>
	__asm volatile
 8017e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e84:	f383 8811 	msr	BASEPRI, r3
 8017e88:	f3bf 8f6f 	isb	sy
 8017e8c:	f3bf 8f4f 	dsb	sy
 8017e90:	61fb      	str	r3, [r7, #28]
}
 8017e92:	bf00      	nop
 8017e94:	e7fe      	b.n	8017e94 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8017e96:	2360      	movs	r3, #96	; 0x60
 8017e98:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8017e9a:	693b      	ldr	r3, [r7, #16]
 8017e9c:	2b60      	cmp	r3, #96	; 0x60
 8017e9e:	d00a      	beq.n	8017eb6 <xTaskCreateStatic+0x66>
	__asm volatile
 8017ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017ea4:	f383 8811 	msr	BASEPRI, r3
 8017ea8:	f3bf 8f6f 	isb	sy
 8017eac:	f3bf 8f4f 	dsb	sy
 8017eb0:	61bb      	str	r3, [r7, #24]
}
 8017eb2:	bf00      	nop
 8017eb4:	e7fe      	b.n	8017eb4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8017eb6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8017eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017eba:	2b00      	cmp	r3, #0
 8017ebc:	d01e      	beq.n	8017efc <xTaskCreateStatic+0xac>
 8017ebe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017ec0:	2b00      	cmp	r3, #0
 8017ec2:	d01b      	beq.n	8017efc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8017ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ec6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8017ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017eca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017ecc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8017ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ed0:	2202      	movs	r2, #2
 8017ed2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8017ed6:	2300      	movs	r3, #0
 8017ed8:	9303      	str	r3, [sp, #12]
 8017eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017edc:	9302      	str	r3, [sp, #8]
 8017ede:	f107 0314 	add.w	r3, r7, #20
 8017ee2:	9301      	str	r3, [sp, #4]
 8017ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ee6:	9300      	str	r3, [sp, #0]
 8017ee8:	683b      	ldr	r3, [r7, #0]
 8017eea:	687a      	ldr	r2, [r7, #4]
 8017eec:	68b9      	ldr	r1, [r7, #8]
 8017eee:	68f8      	ldr	r0, [r7, #12]
 8017ef0:	f000 f850 	bl	8017f94 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8017ef4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017ef6:	f000 f8df 	bl	80180b8 <prvAddNewTaskToReadyList>
 8017efa:	e001      	b.n	8017f00 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8017efc:	2300      	movs	r3, #0
 8017efe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8017f00:	697b      	ldr	r3, [r7, #20]
	}
 8017f02:	4618      	mov	r0, r3
 8017f04:	3728      	adds	r7, #40	; 0x28
 8017f06:	46bd      	mov	sp, r7
 8017f08:	bd80      	pop	{r7, pc}

08017f0a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8017f0a:	b580      	push	{r7, lr}
 8017f0c:	b08c      	sub	sp, #48	; 0x30
 8017f0e:	af04      	add	r7, sp, #16
 8017f10:	60f8      	str	r0, [r7, #12]
 8017f12:	60b9      	str	r1, [r7, #8]
 8017f14:	603b      	str	r3, [r7, #0]
 8017f16:	4613      	mov	r3, r2
 8017f18:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8017f1a:	88fb      	ldrh	r3, [r7, #6]
 8017f1c:	009b      	lsls	r3, r3, #2
 8017f1e:	4618      	mov	r0, r3
 8017f20:	f7fe f9e6 	bl	80162f0 <pvPortMalloc>
 8017f24:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8017f26:	697b      	ldr	r3, [r7, #20]
 8017f28:	2b00      	cmp	r3, #0
 8017f2a:	d00e      	beq.n	8017f4a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8017f2c:	2060      	movs	r0, #96	; 0x60
 8017f2e:	f7fe f9df 	bl	80162f0 <pvPortMalloc>
 8017f32:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8017f34:	69fb      	ldr	r3, [r7, #28]
 8017f36:	2b00      	cmp	r3, #0
 8017f38:	d003      	beq.n	8017f42 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8017f3a:	69fb      	ldr	r3, [r7, #28]
 8017f3c:	697a      	ldr	r2, [r7, #20]
 8017f3e:	631a      	str	r2, [r3, #48]	; 0x30
 8017f40:	e005      	b.n	8017f4e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8017f42:	6978      	ldr	r0, [r7, #20]
 8017f44:	f7fe faa0 	bl	8016488 <vPortFree>
 8017f48:	e001      	b.n	8017f4e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8017f4a:	2300      	movs	r3, #0
 8017f4c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8017f4e:	69fb      	ldr	r3, [r7, #28]
 8017f50:	2b00      	cmp	r3, #0
 8017f52:	d017      	beq.n	8017f84 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8017f54:	69fb      	ldr	r3, [r7, #28]
 8017f56:	2200      	movs	r2, #0
 8017f58:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8017f5c:	88fa      	ldrh	r2, [r7, #6]
 8017f5e:	2300      	movs	r3, #0
 8017f60:	9303      	str	r3, [sp, #12]
 8017f62:	69fb      	ldr	r3, [r7, #28]
 8017f64:	9302      	str	r3, [sp, #8]
 8017f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f68:	9301      	str	r3, [sp, #4]
 8017f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f6c:	9300      	str	r3, [sp, #0]
 8017f6e:	683b      	ldr	r3, [r7, #0]
 8017f70:	68b9      	ldr	r1, [r7, #8]
 8017f72:	68f8      	ldr	r0, [r7, #12]
 8017f74:	f000 f80e 	bl	8017f94 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8017f78:	69f8      	ldr	r0, [r7, #28]
 8017f7a:	f000 f89d 	bl	80180b8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8017f7e:	2301      	movs	r3, #1
 8017f80:	61bb      	str	r3, [r7, #24]
 8017f82:	e002      	b.n	8017f8a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8017f84:	f04f 33ff 	mov.w	r3, #4294967295
 8017f88:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8017f8a:	69bb      	ldr	r3, [r7, #24]
	}
 8017f8c:	4618      	mov	r0, r3
 8017f8e:	3720      	adds	r7, #32
 8017f90:	46bd      	mov	sp, r7
 8017f92:	bd80      	pop	{r7, pc}

08017f94 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8017f94:	b580      	push	{r7, lr}
 8017f96:	b088      	sub	sp, #32
 8017f98:	af00      	add	r7, sp, #0
 8017f9a:	60f8      	str	r0, [r7, #12]
 8017f9c:	60b9      	str	r1, [r7, #8]
 8017f9e:	607a      	str	r2, [r7, #4]
 8017fa0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8017fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017fa4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8017fa6:	687b      	ldr	r3, [r7, #4]
 8017fa8:	009b      	lsls	r3, r3, #2
 8017faa:	461a      	mov	r2, r3
 8017fac:	21a5      	movs	r1, #165	; 0xa5
 8017fae:	f010 fcff 	bl	80289b0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8017fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017fb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8017fb6:	6879      	ldr	r1, [r7, #4]
 8017fb8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8017fbc:	440b      	add	r3, r1
 8017fbe:	009b      	lsls	r3, r3, #2
 8017fc0:	4413      	add	r3, r2
 8017fc2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8017fc4:	69bb      	ldr	r3, [r7, #24]
 8017fc6:	f023 0307 	bic.w	r3, r3, #7
 8017fca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8017fcc:	69bb      	ldr	r3, [r7, #24]
 8017fce:	f003 0307 	and.w	r3, r3, #7
 8017fd2:	2b00      	cmp	r3, #0
 8017fd4:	d00a      	beq.n	8017fec <prvInitialiseNewTask+0x58>
	__asm volatile
 8017fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017fda:	f383 8811 	msr	BASEPRI, r3
 8017fde:	f3bf 8f6f 	isb	sy
 8017fe2:	f3bf 8f4f 	dsb	sy
 8017fe6:	617b      	str	r3, [r7, #20]
}
 8017fe8:	bf00      	nop
 8017fea:	e7fe      	b.n	8017fea <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8017fec:	68bb      	ldr	r3, [r7, #8]
 8017fee:	2b00      	cmp	r3, #0
 8017ff0:	d01f      	beq.n	8018032 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8017ff2:	2300      	movs	r3, #0
 8017ff4:	61fb      	str	r3, [r7, #28]
 8017ff6:	e012      	b.n	801801e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8017ff8:	68ba      	ldr	r2, [r7, #8]
 8017ffa:	69fb      	ldr	r3, [r7, #28]
 8017ffc:	4413      	add	r3, r2
 8017ffe:	7819      	ldrb	r1, [r3, #0]
 8018000:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018002:	69fb      	ldr	r3, [r7, #28]
 8018004:	4413      	add	r3, r2
 8018006:	3334      	adds	r3, #52	; 0x34
 8018008:	460a      	mov	r2, r1
 801800a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801800c:	68ba      	ldr	r2, [r7, #8]
 801800e:	69fb      	ldr	r3, [r7, #28]
 8018010:	4413      	add	r3, r2
 8018012:	781b      	ldrb	r3, [r3, #0]
 8018014:	2b00      	cmp	r3, #0
 8018016:	d006      	beq.n	8018026 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8018018:	69fb      	ldr	r3, [r7, #28]
 801801a:	3301      	adds	r3, #1
 801801c:	61fb      	str	r3, [r7, #28]
 801801e:	69fb      	ldr	r3, [r7, #28]
 8018020:	2b0f      	cmp	r3, #15
 8018022:	d9e9      	bls.n	8017ff8 <prvInitialiseNewTask+0x64>
 8018024:	e000      	b.n	8018028 <prvInitialiseNewTask+0x94>
			{
				break;
 8018026:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8018028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801802a:	2200      	movs	r2, #0
 801802c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8018030:	e003      	b.n	801803a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8018032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018034:	2200      	movs	r2, #0
 8018036:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801803a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801803c:	2b37      	cmp	r3, #55	; 0x37
 801803e:	d901      	bls.n	8018044 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8018040:	2337      	movs	r3, #55	; 0x37
 8018042:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8018044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018046:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018048:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801804a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801804c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801804e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8018050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018052:	2200      	movs	r2, #0
 8018054:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8018056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018058:	3304      	adds	r3, #4
 801805a:	4618      	mov	r0, r3
 801805c:	f7fe fb54 	bl	8016708 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8018060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018062:	3318      	adds	r3, #24
 8018064:	4618      	mov	r0, r3
 8018066:	f7fe fb4f 	bl	8016708 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801806a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801806c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801806e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018072:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8018076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018078:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801807a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801807c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801807e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8018080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018082:	2200      	movs	r2, #0
 8018084:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8018086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018088:	2200      	movs	r2, #0
 801808a:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801808c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801808e:	2200      	movs	r2, #0
 8018090:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8018094:	683a      	ldr	r2, [r7, #0]
 8018096:	68f9      	ldr	r1, [r7, #12]
 8018098:	69b8      	ldr	r0, [r7, #24]
 801809a:	f7fe fbc9 	bl	8016830 <pxPortInitialiseStack>
 801809e:	4602      	mov	r2, r0
 80180a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80180a2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80180a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80180a6:	2b00      	cmp	r3, #0
 80180a8:	d002      	beq.n	80180b0 <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80180aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80180ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80180ae:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80180b0:	bf00      	nop
 80180b2:	3720      	adds	r7, #32
 80180b4:	46bd      	mov	sp, r7
 80180b6:	bd80      	pop	{r7, pc}

080180b8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80180b8:	b580      	push	{r7, lr}
 80180ba:	b082      	sub	sp, #8
 80180bc:	af00      	add	r7, sp, #0
 80180be:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80180c0:	f7fe fce0 	bl	8016a84 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80180c4:	4b2d      	ldr	r3, [pc, #180]	; (801817c <prvAddNewTaskToReadyList+0xc4>)
 80180c6:	681b      	ldr	r3, [r3, #0]
 80180c8:	3301      	adds	r3, #1
 80180ca:	4a2c      	ldr	r2, [pc, #176]	; (801817c <prvAddNewTaskToReadyList+0xc4>)
 80180cc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80180ce:	4b2c      	ldr	r3, [pc, #176]	; (8018180 <prvAddNewTaskToReadyList+0xc8>)
 80180d0:	681b      	ldr	r3, [r3, #0]
 80180d2:	2b00      	cmp	r3, #0
 80180d4:	d109      	bne.n	80180ea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80180d6:	4a2a      	ldr	r2, [pc, #168]	; (8018180 <prvAddNewTaskToReadyList+0xc8>)
 80180d8:	687b      	ldr	r3, [r7, #4]
 80180da:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80180dc:	4b27      	ldr	r3, [pc, #156]	; (801817c <prvAddNewTaskToReadyList+0xc4>)
 80180de:	681b      	ldr	r3, [r3, #0]
 80180e0:	2b01      	cmp	r3, #1
 80180e2:	d110      	bne.n	8018106 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80180e4:	f000 fc68 	bl	80189b8 <prvInitialiseTaskLists>
 80180e8:	e00d      	b.n	8018106 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80180ea:	4b26      	ldr	r3, [pc, #152]	; (8018184 <prvAddNewTaskToReadyList+0xcc>)
 80180ec:	681b      	ldr	r3, [r3, #0]
 80180ee:	2b00      	cmp	r3, #0
 80180f0:	d109      	bne.n	8018106 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80180f2:	4b23      	ldr	r3, [pc, #140]	; (8018180 <prvAddNewTaskToReadyList+0xc8>)
 80180f4:	681b      	ldr	r3, [r3, #0]
 80180f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80180f8:	687b      	ldr	r3, [r7, #4]
 80180fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80180fc:	429a      	cmp	r2, r3
 80180fe:	d802      	bhi.n	8018106 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8018100:	4a1f      	ldr	r2, [pc, #124]	; (8018180 <prvAddNewTaskToReadyList+0xc8>)
 8018102:	687b      	ldr	r3, [r7, #4]
 8018104:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8018106:	4b20      	ldr	r3, [pc, #128]	; (8018188 <prvAddNewTaskToReadyList+0xd0>)
 8018108:	681b      	ldr	r3, [r3, #0]
 801810a:	3301      	adds	r3, #1
 801810c:	4a1e      	ldr	r2, [pc, #120]	; (8018188 <prvAddNewTaskToReadyList+0xd0>)
 801810e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8018110:	4b1d      	ldr	r3, [pc, #116]	; (8018188 <prvAddNewTaskToReadyList+0xd0>)
 8018112:	681a      	ldr	r2, [r3, #0]
 8018114:	687b      	ldr	r3, [r7, #4]
 8018116:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8018118:	687b      	ldr	r3, [r7, #4]
 801811a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801811c:	4b1b      	ldr	r3, [pc, #108]	; (801818c <prvAddNewTaskToReadyList+0xd4>)
 801811e:	681b      	ldr	r3, [r3, #0]
 8018120:	429a      	cmp	r2, r3
 8018122:	d903      	bls.n	801812c <prvAddNewTaskToReadyList+0x74>
 8018124:	687b      	ldr	r3, [r7, #4]
 8018126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018128:	4a18      	ldr	r2, [pc, #96]	; (801818c <prvAddNewTaskToReadyList+0xd4>)
 801812a:	6013      	str	r3, [r2, #0]
 801812c:	687b      	ldr	r3, [r7, #4]
 801812e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018130:	4613      	mov	r3, r2
 8018132:	009b      	lsls	r3, r3, #2
 8018134:	4413      	add	r3, r2
 8018136:	009b      	lsls	r3, r3, #2
 8018138:	4a15      	ldr	r2, [pc, #84]	; (8018190 <prvAddNewTaskToReadyList+0xd8>)
 801813a:	441a      	add	r2, r3
 801813c:	687b      	ldr	r3, [r7, #4]
 801813e:	3304      	adds	r3, #4
 8018140:	4619      	mov	r1, r3
 8018142:	4610      	mov	r0, r2
 8018144:	f7fe faed 	bl	8016722 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8018148:	f7fe fccc 	bl	8016ae4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801814c:	4b0d      	ldr	r3, [pc, #52]	; (8018184 <prvAddNewTaskToReadyList+0xcc>)
 801814e:	681b      	ldr	r3, [r3, #0]
 8018150:	2b00      	cmp	r3, #0
 8018152:	d00e      	beq.n	8018172 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8018154:	4b0a      	ldr	r3, [pc, #40]	; (8018180 <prvAddNewTaskToReadyList+0xc8>)
 8018156:	681b      	ldr	r3, [r3, #0]
 8018158:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801815a:	687b      	ldr	r3, [r7, #4]
 801815c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801815e:	429a      	cmp	r2, r3
 8018160:	d207      	bcs.n	8018172 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8018162:	4b0c      	ldr	r3, [pc, #48]	; (8018194 <prvAddNewTaskToReadyList+0xdc>)
 8018164:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018168:	601a      	str	r2, [r3, #0]
 801816a:	f3bf 8f4f 	dsb	sy
 801816e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8018172:	bf00      	nop
 8018174:	3708      	adds	r7, #8
 8018176:	46bd      	mov	sp, r7
 8018178:	bd80      	pop	{r7, pc}
 801817a:	bf00      	nop
 801817c:	2402509c 	.word	0x2402509c
 8018180:	24024bc8 	.word	0x24024bc8
 8018184:	240250a8 	.word	0x240250a8
 8018188:	240250b8 	.word	0x240250b8
 801818c:	240250a4 	.word	0x240250a4
 8018190:	24024bcc 	.word	0x24024bcc
 8018194:	e000ed04 	.word	0xe000ed04

08018198 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8018198:	b580      	push	{r7, lr}
 801819a:	b084      	sub	sp, #16
 801819c:	af00      	add	r7, sp, #0
 801819e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80181a0:	2300      	movs	r3, #0
 80181a2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80181a4:	687b      	ldr	r3, [r7, #4]
 80181a6:	2b00      	cmp	r3, #0
 80181a8:	d017      	beq.n	80181da <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80181aa:	4b13      	ldr	r3, [pc, #76]	; (80181f8 <vTaskDelay+0x60>)
 80181ac:	681b      	ldr	r3, [r3, #0]
 80181ae:	2b00      	cmp	r3, #0
 80181b0:	d00a      	beq.n	80181c8 <vTaskDelay+0x30>
	__asm volatile
 80181b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80181b6:	f383 8811 	msr	BASEPRI, r3
 80181ba:	f3bf 8f6f 	isb	sy
 80181be:	f3bf 8f4f 	dsb	sy
 80181c2:	60bb      	str	r3, [r7, #8]
}
 80181c4:	bf00      	nop
 80181c6:	e7fe      	b.n	80181c6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80181c8:	f000 f888 	bl	80182dc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80181cc:	2100      	movs	r1, #0
 80181ce:	6878      	ldr	r0, [r7, #4]
 80181d0:	f000 fe4a 	bl	8018e68 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80181d4:	f000 f890 	bl	80182f8 <xTaskResumeAll>
 80181d8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80181da:	68fb      	ldr	r3, [r7, #12]
 80181dc:	2b00      	cmp	r3, #0
 80181de:	d107      	bne.n	80181f0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80181e0:	4b06      	ldr	r3, [pc, #24]	; (80181fc <vTaskDelay+0x64>)
 80181e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80181e6:	601a      	str	r2, [r3, #0]
 80181e8:	f3bf 8f4f 	dsb	sy
 80181ec:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80181f0:	bf00      	nop
 80181f2:	3710      	adds	r7, #16
 80181f4:	46bd      	mov	sp, r7
 80181f6:	bd80      	pop	{r7, pc}
 80181f8:	240250c4 	.word	0x240250c4
 80181fc:	e000ed04 	.word	0xe000ed04

08018200 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8018200:	b580      	push	{r7, lr}
 8018202:	b08a      	sub	sp, #40	; 0x28
 8018204:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8018206:	2300      	movs	r3, #0
 8018208:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801820a:	2300      	movs	r3, #0
 801820c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801820e:	463a      	mov	r2, r7
 8018210:	1d39      	adds	r1, r7, #4
 8018212:	f107 0308 	add.w	r3, r7, #8
 8018216:	4618      	mov	r0, r3
 8018218:	f7fe f836 	bl	8016288 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801821c:	6839      	ldr	r1, [r7, #0]
 801821e:	687b      	ldr	r3, [r7, #4]
 8018220:	68ba      	ldr	r2, [r7, #8]
 8018222:	9202      	str	r2, [sp, #8]
 8018224:	9301      	str	r3, [sp, #4]
 8018226:	2300      	movs	r3, #0
 8018228:	9300      	str	r3, [sp, #0]
 801822a:	2300      	movs	r3, #0
 801822c:	460a      	mov	r2, r1
 801822e:	4924      	ldr	r1, [pc, #144]	; (80182c0 <vTaskStartScheduler+0xc0>)
 8018230:	4824      	ldr	r0, [pc, #144]	; (80182c4 <vTaskStartScheduler+0xc4>)
 8018232:	f7ff fe0d 	bl	8017e50 <xTaskCreateStatic>
 8018236:	4603      	mov	r3, r0
 8018238:	4a23      	ldr	r2, [pc, #140]	; (80182c8 <vTaskStartScheduler+0xc8>)
 801823a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801823c:	4b22      	ldr	r3, [pc, #136]	; (80182c8 <vTaskStartScheduler+0xc8>)
 801823e:	681b      	ldr	r3, [r3, #0]
 8018240:	2b00      	cmp	r3, #0
 8018242:	d002      	beq.n	801824a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8018244:	2301      	movs	r3, #1
 8018246:	617b      	str	r3, [r7, #20]
 8018248:	e001      	b.n	801824e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801824a:	2300      	movs	r3, #0
 801824c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801824e:	697b      	ldr	r3, [r7, #20]
 8018250:	2b01      	cmp	r3, #1
 8018252:	d102      	bne.n	801825a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8018254:	f000 fe5c 	bl	8018f10 <xTimerCreateTimerTask>
 8018258:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801825a:	697b      	ldr	r3, [r7, #20]
 801825c:	2b01      	cmp	r3, #1
 801825e:	d11c      	bne.n	801829a <vTaskStartScheduler+0x9a>
	__asm volatile
 8018260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018264:	f383 8811 	msr	BASEPRI, r3
 8018268:	f3bf 8f6f 	isb	sy
 801826c:	f3bf 8f4f 	dsb	sy
 8018270:	613b      	str	r3, [r7, #16]
}
 8018272:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8018274:	4b15      	ldr	r3, [pc, #84]	; (80182cc <vTaskStartScheduler+0xcc>)
 8018276:	f04f 32ff 	mov.w	r2, #4294967295
 801827a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801827c:	4b14      	ldr	r3, [pc, #80]	; (80182d0 <vTaskStartScheduler+0xd0>)
 801827e:	2201      	movs	r2, #1
 8018280:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8018282:	4b14      	ldr	r3, [pc, #80]	; (80182d4 <vTaskStartScheduler+0xd4>)
 8018284:	2200      	movs	r2, #0
 8018286:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 8018288:	4b13      	ldr	r3, [pc, #76]	; (80182d8 <vTaskStartScheduler+0xd8>)
 801828a:	681b      	ldr	r3, [r3, #0]
 801828c:	2100      	movs	r1, #0
 801828e:	4618      	mov	r0, r3
 8018290:	f000 f9b6 	bl	8018600 <xTaskCallApplicationTaskHook>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8018294:	f7fe fb54 	bl	8016940 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8018298:	e00e      	b.n	80182b8 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801829a:	697b      	ldr	r3, [r7, #20]
 801829c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80182a0:	d10a      	bne.n	80182b8 <vTaskStartScheduler+0xb8>
	__asm volatile
 80182a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80182a6:	f383 8811 	msr	BASEPRI, r3
 80182aa:	f3bf 8f6f 	isb	sy
 80182ae:	f3bf 8f4f 	dsb	sy
 80182b2:	60fb      	str	r3, [r7, #12]
}
 80182b4:	bf00      	nop
 80182b6:	e7fe      	b.n	80182b6 <vTaskStartScheduler+0xb6>
}
 80182b8:	bf00      	nop
 80182ba:	3718      	adds	r7, #24
 80182bc:	46bd      	mov	sp, r7
 80182be:	bd80      	pop	{r7, pc}
 80182c0:	0802be28 	.word	0x0802be28
 80182c4:	08018985 	.word	0x08018985
 80182c8:	240250c0 	.word	0x240250c0
 80182cc:	240250bc 	.word	0x240250bc
 80182d0:	240250a8 	.word	0x240250a8
 80182d4:	240250a0 	.word	0x240250a0
 80182d8:	24024bc8 	.word	0x24024bc8

080182dc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80182dc:	b480      	push	{r7}
 80182de:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80182e0:	4b04      	ldr	r3, [pc, #16]	; (80182f4 <vTaskSuspendAll+0x18>)
 80182e2:	681b      	ldr	r3, [r3, #0]
 80182e4:	3301      	adds	r3, #1
 80182e6:	4a03      	ldr	r2, [pc, #12]	; (80182f4 <vTaskSuspendAll+0x18>)
 80182e8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80182ea:	bf00      	nop
 80182ec:	46bd      	mov	sp, r7
 80182ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182f2:	4770      	bx	lr
 80182f4:	240250c4 	.word	0x240250c4

080182f8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80182f8:	b580      	push	{r7, lr}
 80182fa:	b084      	sub	sp, #16
 80182fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80182fe:	2300      	movs	r3, #0
 8018300:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8018302:	2300      	movs	r3, #0
 8018304:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8018306:	4b42      	ldr	r3, [pc, #264]	; (8018410 <xTaskResumeAll+0x118>)
 8018308:	681b      	ldr	r3, [r3, #0]
 801830a:	2b00      	cmp	r3, #0
 801830c:	d10a      	bne.n	8018324 <xTaskResumeAll+0x2c>
	__asm volatile
 801830e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018312:	f383 8811 	msr	BASEPRI, r3
 8018316:	f3bf 8f6f 	isb	sy
 801831a:	f3bf 8f4f 	dsb	sy
 801831e:	603b      	str	r3, [r7, #0]
}
 8018320:	bf00      	nop
 8018322:	e7fe      	b.n	8018322 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8018324:	f7fe fbae 	bl	8016a84 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8018328:	4b39      	ldr	r3, [pc, #228]	; (8018410 <xTaskResumeAll+0x118>)
 801832a:	681b      	ldr	r3, [r3, #0]
 801832c:	3b01      	subs	r3, #1
 801832e:	4a38      	ldr	r2, [pc, #224]	; (8018410 <xTaskResumeAll+0x118>)
 8018330:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018332:	4b37      	ldr	r3, [pc, #220]	; (8018410 <xTaskResumeAll+0x118>)
 8018334:	681b      	ldr	r3, [r3, #0]
 8018336:	2b00      	cmp	r3, #0
 8018338:	d162      	bne.n	8018400 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801833a:	4b36      	ldr	r3, [pc, #216]	; (8018414 <xTaskResumeAll+0x11c>)
 801833c:	681b      	ldr	r3, [r3, #0]
 801833e:	2b00      	cmp	r3, #0
 8018340:	d05e      	beq.n	8018400 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8018342:	e02f      	b.n	80183a4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018344:	4b34      	ldr	r3, [pc, #208]	; (8018418 <xTaskResumeAll+0x120>)
 8018346:	68db      	ldr	r3, [r3, #12]
 8018348:	68db      	ldr	r3, [r3, #12]
 801834a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801834c:	68fb      	ldr	r3, [r7, #12]
 801834e:	3318      	adds	r3, #24
 8018350:	4618      	mov	r0, r3
 8018352:	f7fe fa43 	bl	80167dc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8018356:	68fb      	ldr	r3, [r7, #12]
 8018358:	3304      	adds	r3, #4
 801835a:	4618      	mov	r0, r3
 801835c:	f7fe fa3e 	bl	80167dc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8018360:	68fb      	ldr	r3, [r7, #12]
 8018362:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018364:	4b2d      	ldr	r3, [pc, #180]	; (801841c <xTaskResumeAll+0x124>)
 8018366:	681b      	ldr	r3, [r3, #0]
 8018368:	429a      	cmp	r2, r3
 801836a:	d903      	bls.n	8018374 <xTaskResumeAll+0x7c>
 801836c:	68fb      	ldr	r3, [r7, #12]
 801836e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018370:	4a2a      	ldr	r2, [pc, #168]	; (801841c <xTaskResumeAll+0x124>)
 8018372:	6013      	str	r3, [r2, #0]
 8018374:	68fb      	ldr	r3, [r7, #12]
 8018376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018378:	4613      	mov	r3, r2
 801837a:	009b      	lsls	r3, r3, #2
 801837c:	4413      	add	r3, r2
 801837e:	009b      	lsls	r3, r3, #2
 8018380:	4a27      	ldr	r2, [pc, #156]	; (8018420 <xTaskResumeAll+0x128>)
 8018382:	441a      	add	r2, r3
 8018384:	68fb      	ldr	r3, [r7, #12]
 8018386:	3304      	adds	r3, #4
 8018388:	4619      	mov	r1, r3
 801838a:	4610      	mov	r0, r2
 801838c:	f7fe f9c9 	bl	8016722 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8018390:	68fb      	ldr	r3, [r7, #12]
 8018392:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018394:	4b23      	ldr	r3, [pc, #140]	; (8018424 <xTaskResumeAll+0x12c>)
 8018396:	681b      	ldr	r3, [r3, #0]
 8018398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801839a:	429a      	cmp	r2, r3
 801839c:	d302      	bcc.n	80183a4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 801839e:	4b22      	ldr	r3, [pc, #136]	; (8018428 <xTaskResumeAll+0x130>)
 80183a0:	2201      	movs	r2, #1
 80183a2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80183a4:	4b1c      	ldr	r3, [pc, #112]	; (8018418 <xTaskResumeAll+0x120>)
 80183a6:	681b      	ldr	r3, [r3, #0]
 80183a8:	2b00      	cmp	r3, #0
 80183aa:	d1cb      	bne.n	8018344 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80183ac:	68fb      	ldr	r3, [r7, #12]
 80183ae:	2b00      	cmp	r3, #0
 80183b0:	d001      	beq.n	80183b6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80183b2:	f000 fb9f 	bl	8018af4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80183b6:	4b1d      	ldr	r3, [pc, #116]	; (801842c <xTaskResumeAll+0x134>)
 80183b8:	681b      	ldr	r3, [r3, #0]
 80183ba:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80183bc:	687b      	ldr	r3, [r7, #4]
 80183be:	2b00      	cmp	r3, #0
 80183c0:	d010      	beq.n	80183e4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80183c2:	f000 f847 	bl	8018454 <xTaskIncrementTick>
 80183c6:	4603      	mov	r3, r0
 80183c8:	2b00      	cmp	r3, #0
 80183ca:	d002      	beq.n	80183d2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80183cc:	4b16      	ldr	r3, [pc, #88]	; (8018428 <xTaskResumeAll+0x130>)
 80183ce:	2201      	movs	r2, #1
 80183d0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80183d2:	687b      	ldr	r3, [r7, #4]
 80183d4:	3b01      	subs	r3, #1
 80183d6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80183d8:	687b      	ldr	r3, [r7, #4]
 80183da:	2b00      	cmp	r3, #0
 80183dc:	d1f1      	bne.n	80183c2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80183de:	4b13      	ldr	r3, [pc, #76]	; (801842c <xTaskResumeAll+0x134>)
 80183e0:	2200      	movs	r2, #0
 80183e2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80183e4:	4b10      	ldr	r3, [pc, #64]	; (8018428 <xTaskResumeAll+0x130>)
 80183e6:	681b      	ldr	r3, [r3, #0]
 80183e8:	2b00      	cmp	r3, #0
 80183ea:	d009      	beq.n	8018400 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80183ec:	2301      	movs	r3, #1
 80183ee:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80183f0:	4b0f      	ldr	r3, [pc, #60]	; (8018430 <xTaskResumeAll+0x138>)
 80183f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80183f6:	601a      	str	r2, [r3, #0]
 80183f8:	f3bf 8f4f 	dsb	sy
 80183fc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8018400:	f7fe fb70 	bl	8016ae4 <vPortExitCritical>

	return xAlreadyYielded;
 8018404:	68bb      	ldr	r3, [r7, #8]
}
 8018406:	4618      	mov	r0, r3
 8018408:	3710      	adds	r7, #16
 801840a:	46bd      	mov	sp, r7
 801840c:	bd80      	pop	{r7, pc}
 801840e:	bf00      	nop
 8018410:	240250c4 	.word	0x240250c4
 8018414:	2402509c 	.word	0x2402509c
 8018418:	2402505c 	.word	0x2402505c
 801841c:	240250a4 	.word	0x240250a4
 8018420:	24024bcc 	.word	0x24024bcc
 8018424:	24024bc8 	.word	0x24024bc8
 8018428:	240250b0 	.word	0x240250b0
 801842c:	240250ac 	.word	0x240250ac
 8018430:	e000ed04 	.word	0xe000ed04

08018434 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8018434:	b480      	push	{r7}
 8018436:	b083      	sub	sp, #12
 8018438:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801843a:	4b05      	ldr	r3, [pc, #20]	; (8018450 <xTaskGetTickCount+0x1c>)
 801843c:	681b      	ldr	r3, [r3, #0]
 801843e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8018440:	687b      	ldr	r3, [r7, #4]
}
 8018442:	4618      	mov	r0, r3
 8018444:	370c      	adds	r7, #12
 8018446:	46bd      	mov	sp, r7
 8018448:	f85d 7b04 	ldr.w	r7, [sp], #4
 801844c:	4770      	bx	lr
 801844e:	bf00      	nop
 8018450:	240250a0 	.word	0x240250a0

08018454 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8018454:	b580      	push	{r7, lr}
 8018456:	b086      	sub	sp, #24
 8018458:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801845a:	2300      	movs	r3, #0
 801845c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801845e:	4b4f      	ldr	r3, [pc, #316]	; (801859c <xTaskIncrementTick+0x148>)
 8018460:	681b      	ldr	r3, [r3, #0]
 8018462:	2b00      	cmp	r3, #0
 8018464:	f040 808f 	bne.w	8018586 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8018468:	4b4d      	ldr	r3, [pc, #308]	; (80185a0 <xTaskIncrementTick+0x14c>)
 801846a:	681b      	ldr	r3, [r3, #0]
 801846c:	3301      	adds	r3, #1
 801846e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8018470:	4a4b      	ldr	r2, [pc, #300]	; (80185a0 <xTaskIncrementTick+0x14c>)
 8018472:	693b      	ldr	r3, [r7, #16]
 8018474:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8018476:	693b      	ldr	r3, [r7, #16]
 8018478:	2b00      	cmp	r3, #0
 801847a:	d120      	bne.n	80184be <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 801847c:	4b49      	ldr	r3, [pc, #292]	; (80185a4 <xTaskIncrementTick+0x150>)
 801847e:	681b      	ldr	r3, [r3, #0]
 8018480:	681b      	ldr	r3, [r3, #0]
 8018482:	2b00      	cmp	r3, #0
 8018484:	d00a      	beq.n	801849c <xTaskIncrementTick+0x48>
	__asm volatile
 8018486:	f04f 0350 	mov.w	r3, #80	; 0x50
 801848a:	f383 8811 	msr	BASEPRI, r3
 801848e:	f3bf 8f6f 	isb	sy
 8018492:	f3bf 8f4f 	dsb	sy
 8018496:	603b      	str	r3, [r7, #0]
}
 8018498:	bf00      	nop
 801849a:	e7fe      	b.n	801849a <xTaskIncrementTick+0x46>
 801849c:	4b41      	ldr	r3, [pc, #260]	; (80185a4 <xTaskIncrementTick+0x150>)
 801849e:	681b      	ldr	r3, [r3, #0]
 80184a0:	60fb      	str	r3, [r7, #12]
 80184a2:	4b41      	ldr	r3, [pc, #260]	; (80185a8 <xTaskIncrementTick+0x154>)
 80184a4:	681b      	ldr	r3, [r3, #0]
 80184a6:	4a3f      	ldr	r2, [pc, #252]	; (80185a4 <xTaskIncrementTick+0x150>)
 80184a8:	6013      	str	r3, [r2, #0]
 80184aa:	4a3f      	ldr	r2, [pc, #252]	; (80185a8 <xTaskIncrementTick+0x154>)
 80184ac:	68fb      	ldr	r3, [r7, #12]
 80184ae:	6013      	str	r3, [r2, #0]
 80184b0:	4b3e      	ldr	r3, [pc, #248]	; (80185ac <xTaskIncrementTick+0x158>)
 80184b2:	681b      	ldr	r3, [r3, #0]
 80184b4:	3301      	adds	r3, #1
 80184b6:	4a3d      	ldr	r2, [pc, #244]	; (80185ac <xTaskIncrementTick+0x158>)
 80184b8:	6013      	str	r3, [r2, #0]
 80184ba:	f000 fb1b 	bl	8018af4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80184be:	4b3c      	ldr	r3, [pc, #240]	; (80185b0 <xTaskIncrementTick+0x15c>)
 80184c0:	681b      	ldr	r3, [r3, #0]
 80184c2:	693a      	ldr	r2, [r7, #16]
 80184c4:	429a      	cmp	r2, r3
 80184c6:	d349      	bcc.n	801855c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80184c8:	4b36      	ldr	r3, [pc, #216]	; (80185a4 <xTaskIncrementTick+0x150>)
 80184ca:	681b      	ldr	r3, [r3, #0]
 80184cc:	681b      	ldr	r3, [r3, #0]
 80184ce:	2b00      	cmp	r3, #0
 80184d0:	d104      	bne.n	80184dc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80184d2:	4b37      	ldr	r3, [pc, #220]	; (80185b0 <xTaskIncrementTick+0x15c>)
 80184d4:	f04f 32ff 	mov.w	r2, #4294967295
 80184d8:	601a      	str	r2, [r3, #0]
					break;
 80184da:	e03f      	b.n	801855c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80184dc:	4b31      	ldr	r3, [pc, #196]	; (80185a4 <xTaskIncrementTick+0x150>)
 80184de:	681b      	ldr	r3, [r3, #0]
 80184e0:	68db      	ldr	r3, [r3, #12]
 80184e2:	68db      	ldr	r3, [r3, #12]
 80184e4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80184e6:	68bb      	ldr	r3, [r7, #8]
 80184e8:	685b      	ldr	r3, [r3, #4]
 80184ea:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80184ec:	693a      	ldr	r2, [r7, #16]
 80184ee:	687b      	ldr	r3, [r7, #4]
 80184f0:	429a      	cmp	r2, r3
 80184f2:	d203      	bcs.n	80184fc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80184f4:	4a2e      	ldr	r2, [pc, #184]	; (80185b0 <xTaskIncrementTick+0x15c>)
 80184f6:	687b      	ldr	r3, [r7, #4]
 80184f8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80184fa:	e02f      	b.n	801855c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80184fc:	68bb      	ldr	r3, [r7, #8]
 80184fe:	3304      	adds	r3, #4
 8018500:	4618      	mov	r0, r3
 8018502:	f7fe f96b 	bl	80167dc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8018506:	68bb      	ldr	r3, [r7, #8]
 8018508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801850a:	2b00      	cmp	r3, #0
 801850c:	d004      	beq.n	8018518 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801850e:	68bb      	ldr	r3, [r7, #8]
 8018510:	3318      	adds	r3, #24
 8018512:	4618      	mov	r0, r3
 8018514:	f7fe f962 	bl	80167dc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8018518:	68bb      	ldr	r3, [r7, #8]
 801851a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801851c:	4b25      	ldr	r3, [pc, #148]	; (80185b4 <xTaskIncrementTick+0x160>)
 801851e:	681b      	ldr	r3, [r3, #0]
 8018520:	429a      	cmp	r2, r3
 8018522:	d903      	bls.n	801852c <xTaskIncrementTick+0xd8>
 8018524:	68bb      	ldr	r3, [r7, #8]
 8018526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018528:	4a22      	ldr	r2, [pc, #136]	; (80185b4 <xTaskIncrementTick+0x160>)
 801852a:	6013      	str	r3, [r2, #0]
 801852c:	68bb      	ldr	r3, [r7, #8]
 801852e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018530:	4613      	mov	r3, r2
 8018532:	009b      	lsls	r3, r3, #2
 8018534:	4413      	add	r3, r2
 8018536:	009b      	lsls	r3, r3, #2
 8018538:	4a1f      	ldr	r2, [pc, #124]	; (80185b8 <xTaskIncrementTick+0x164>)
 801853a:	441a      	add	r2, r3
 801853c:	68bb      	ldr	r3, [r7, #8]
 801853e:	3304      	adds	r3, #4
 8018540:	4619      	mov	r1, r3
 8018542:	4610      	mov	r0, r2
 8018544:	f7fe f8ed 	bl	8016722 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8018548:	68bb      	ldr	r3, [r7, #8]
 801854a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801854c:	4b1b      	ldr	r3, [pc, #108]	; (80185bc <xTaskIncrementTick+0x168>)
 801854e:	681b      	ldr	r3, [r3, #0]
 8018550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018552:	429a      	cmp	r2, r3
 8018554:	d3b8      	bcc.n	80184c8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8018556:	2301      	movs	r3, #1
 8018558:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801855a:	e7b5      	b.n	80184c8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801855c:	4b17      	ldr	r3, [pc, #92]	; (80185bc <xTaskIncrementTick+0x168>)
 801855e:	681b      	ldr	r3, [r3, #0]
 8018560:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018562:	4915      	ldr	r1, [pc, #84]	; (80185b8 <xTaskIncrementTick+0x164>)
 8018564:	4613      	mov	r3, r2
 8018566:	009b      	lsls	r3, r3, #2
 8018568:	4413      	add	r3, r2
 801856a:	009b      	lsls	r3, r3, #2
 801856c:	440b      	add	r3, r1
 801856e:	681b      	ldr	r3, [r3, #0]
 8018570:	2b01      	cmp	r3, #1
 8018572:	d901      	bls.n	8018578 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8018574:	2301      	movs	r3, #1
 8018576:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8018578:	4b11      	ldr	r3, [pc, #68]	; (80185c0 <xTaskIncrementTick+0x16c>)
 801857a:	681b      	ldr	r3, [r3, #0]
 801857c:	2b00      	cmp	r3, #0
 801857e:	d007      	beq.n	8018590 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8018580:	2301      	movs	r3, #1
 8018582:	617b      	str	r3, [r7, #20]
 8018584:	e004      	b.n	8018590 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8018586:	4b0f      	ldr	r3, [pc, #60]	; (80185c4 <xTaskIncrementTick+0x170>)
 8018588:	681b      	ldr	r3, [r3, #0]
 801858a:	3301      	adds	r3, #1
 801858c:	4a0d      	ldr	r2, [pc, #52]	; (80185c4 <xTaskIncrementTick+0x170>)
 801858e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8018590:	697b      	ldr	r3, [r7, #20]
}
 8018592:	4618      	mov	r0, r3
 8018594:	3718      	adds	r7, #24
 8018596:	46bd      	mov	sp, r7
 8018598:	bd80      	pop	{r7, pc}
 801859a:	bf00      	nop
 801859c:	240250c4 	.word	0x240250c4
 80185a0:	240250a0 	.word	0x240250a0
 80185a4:	24025054 	.word	0x24025054
 80185a8:	24025058 	.word	0x24025058
 80185ac:	240250b4 	.word	0x240250b4
 80185b0:	240250bc 	.word	0x240250bc
 80185b4:	240250a4 	.word	0x240250a4
 80185b8:	24024bcc 	.word	0x24024bcc
 80185bc:	24024bc8 	.word	0x24024bc8
 80185c0:	240250b0 	.word	0x240250b0
 80185c4:	240250ac 	.word	0x240250ac

080185c8 <vTaskSetApplicationTaskTag>:
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
	{
 80185c8:	b580      	push	{r7, lr}
 80185ca:	b084      	sub	sp, #16
 80185cc:	af00      	add	r7, sp, #0
 80185ce:	6078      	str	r0, [r7, #4]
 80185d0:	6039      	str	r1, [r7, #0]
	TCB_t *xTCB;

		/* If xTask is NULL then it is the task hook of the calling task that is
		getting set. */
		if( xTask == NULL )
 80185d2:	687b      	ldr	r3, [r7, #4]
 80185d4:	2b00      	cmp	r3, #0
 80185d6:	d103      	bne.n	80185e0 <vTaskSetApplicationTaskTag+0x18>
		{
			xTCB = ( TCB_t * ) pxCurrentTCB;
 80185d8:	4b08      	ldr	r3, [pc, #32]	; (80185fc <vTaskSetApplicationTaskTag+0x34>)
 80185da:	681b      	ldr	r3, [r3, #0]
 80185dc:	60fb      	str	r3, [r7, #12]
 80185de:	e001      	b.n	80185e4 <vTaskSetApplicationTaskTag+0x1c>
		}
		else
		{
			xTCB = xTask;
 80185e0:	687b      	ldr	r3, [r7, #4]
 80185e2:	60fb      	str	r3, [r7, #12]
		}

		/* Save the hook function in the TCB.  A critical section is required as
		the value can be accessed from an interrupt. */
		taskENTER_CRITICAL();
 80185e4:	f7fe fa4e 	bl	8016a84 <vPortEnterCritical>
		{
			xTCB->pxTaskTag = pxHookFunction;
 80185e8:	68fb      	ldr	r3, [r7, #12]
 80185ea:	683a      	ldr	r2, [r7, #0]
 80185ec:	655a      	str	r2, [r3, #84]	; 0x54
		}
		taskEXIT_CRITICAL();
 80185ee:	f7fe fa79 	bl	8016ae4 <vPortExitCritical>
	}
 80185f2:	bf00      	nop
 80185f4:	3710      	adds	r7, #16
 80185f6:	46bd      	mov	sp, r7
 80185f8:	bd80      	pop	{r7, pc}
 80185fa:	bf00      	nop
 80185fc:	24024bc8 	.word	0x24024bc8

08018600 <xTaskCallApplicationTaskHook>:
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
	{
 8018600:	b580      	push	{r7, lr}
 8018602:	b084      	sub	sp, #16
 8018604:	af00      	add	r7, sp, #0
 8018606:	6078      	str	r0, [r7, #4]
 8018608:	6039      	str	r1, [r7, #0]
	TCB_t *xTCB;
	BaseType_t xReturn;

		/* If xTask is NULL then we are calling our own task hook. */
		if( xTask == NULL )
 801860a:	687b      	ldr	r3, [r7, #4]
 801860c:	2b00      	cmp	r3, #0
 801860e:	d103      	bne.n	8018618 <xTaskCallApplicationTaskHook+0x18>
		{
			xTCB = pxCurrentTCB;
 8018610:	4b0b      	ldr	r3, [pc, #44]	; (8018640 <xTaskCallApplicationTaskHook+0x40>)
 8018612:	681b      	ldr	r3, [r3, #0]
 8018614:	60fb      	str	r3, [r7, #12]
 8018616:	e001      	b.n	801861c <xTaskCallApplicationTaskHook+0x1c>
		}
		else
		{
			xTCB = xTask;
 8018618:	687b      	ldr	r3, [r7, #4]
 801861a:	60fb      	str	r3, [r7, #12]
		}

		if( xTCB->pxTaskTag != NULL )
 801861c:	68fb      	ldr	r3, [r7, #12]
 801861e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018620:	2b00      	cmp	r3, #0
 8018622:	d005      	beq.n	8018630 <xTaskCallApplicationTaskHook+0x30>
		{
			xReturn = xTCB->pxTaskTag( pvParameter );
 8018624:	68fb      	ldr	r3, [r7, #12]
 8018626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018628:	6838      	ldr	r0, [r7, #0]
 801862a:	4798      	blx	r3
 801862c:	60b8      	str	r0, [r7, #8]
 801862e:	e001      	b.n	8018634 <xTaskCallApplicationTaskHook+0x34>
		}
		else
		{
			xReturn = pdFAIL;
 8018630:	2300      	movs	r3, #0
 8018632:	60bb      	str	r3, [r7, #8]
		}

		return xReturn;
 8018634:	68bb      	ldr	r3, [r7, #8]
	}
 8018636:	4618      	mov	r0, r3
 8018638:	3710      	adds	r7, #16
 801863a:	46bd      	mov	sp, r7
 801863c:	bd80      	pop	{r7, pc}
 801863e:	bf00      	nop
 8018640:	24024bc8 	.word	0x24024bc8

08018644 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8018644:	b580      	push	{r7, lr}
 8018646:	b084      	sub	sp, #16
 8018648:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801864a:	4b2d      	ldr	r3, [pc, #180]	; (8018700 <vTaskSwitchContext+0xbc>)
 801864c:	681b      	ldr	r3, [r3, #0]
 801864e:	2b00      	cmp	r3, #0
 8018650:	d003      	beq.n	801865a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8018652:	4b2c      	ldr	r3, [pc, #176]	; (8018704 <vTaskSwitchContext+0xc0>)
 8018654:	2201      	movs	r2, #1
 8018656:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8018658:	e04d      	b.n	80186f6 <vTaskSwitchContext+0xb2>
		xYieldPending = pdFALSE;
 801865a:	4b2a      	ldr	r3, [pc, #168]	; (8018704 <vTaskSwitchContext+0xc0>)
 801865c:	2200      	movs	r2, #0
 801865e:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 8018660:	4b29      	ldr	r3, [pc, #164]	; (8018708 <vTaskSwitchContext+0xc4>)
 8018662:	681b      	ldr	r3, [r3, #0]
 8018664:	2101      	movs	r1, #1
 8018666:	4618      	mov	r0, r3
 8018668:	f7ff ffca 	bl	8018600 <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801866c:	4b27      	ldr	r3, [pc, #156]	; (801870c <vTaskSwitchContext+0xc8>)
 801866e:	681b      	ldr	r3, [r3, #0]
 8018670:	60fb      	str	r3, [r7, #12]
 8018672:	e010      	b.n	8018696 <vTaskSwitchContext+0x52>
 8018674:	68fb      	ldr	r3, [r7, #12]
 8018676:	2b00      	cmp	r3, #0
 8018678:	d10a      	bne.n	8018690 <vTaskSwitchContext+0x4c>
	__asm volatile
 801867a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801867e:	f383 8811 	msr	BASEPRI, r3
 8018682:	f3bf 8f6f 	isb	sy
 8018686:	f3bf 8f4f 	dsb	sy
 801868a:	607b      	str	r3, [r7, #4]
}
 801868c:	bf00      	nop
 801868e:	e7fe      	b.n	801868e <vTaskSwitchContext+0x4a>
 8018690:	68fb      	ldr	r3, [r7, #12]
 8018692:	3b01      	subs	r3, #1
 8018694:	60fb      	str	r3, [r7, #12]
 8018696:	491e      	ldr	r1, [pc, #120]	; (8018710 <vTaskSwitchContext+0xcc>)
 8018698:	68fa      	ldr	r2, [r7, #12]
 801869a:	4613      	mov	r3, r2
 801869c:	009b      	lsls	r3, r3, #2
 801869e:	4413      	add	r3, r2
 80186a0:	009b      	lsls	r3, r3, #2
 80186a2:	440b      	add	r3, r1
 80186a4:	681b      	ldr	r3, [r3, #0]
 80186a6:	2b00      	cmp	r3, #0
 80186a8:	d0e4      	beq.n	8018674 <vTaskSwitchContext+0x30>
 80186aa:	68fa      	ldr	r2, [r7, #12]
 80186ac:	4613      	mov	r3, r2
 80186ae:	009b      	lsls	r3, r3, #2
 80186b0:	4413      	add	r3, r2
 80186b2:	009b      	lsls	r3, r3, #2
 80186b4:	4a16      	ldr	r2, [pc, #88]	; (8018710 <vTaskSwitchContext+0xcc>)
 80186b6:	4413      	add	r3, r2
 80186b8:	60bb      	str	r3, [r7, #8]
 80186ba:	68bb      	ldr	r3, [r7, #8]
 80186bc:	685b      	ldr	r3, [r3, #4]
 80186be:	685a      	ldr	r2, [r3, #4]
 80186c0:	68bb      	ldr	r3, [r7, #8]
 80186c2:	605a      	str	r2, [r3, #4]
 80186c4:	68bb      	ldr	r3, [r7, #8]
 80186c6:	685a      	ldr	r2, [r3, #4]
 80186c8:	68bb      	ldr	r3, [r7, #8]
 80186ca:	3308      	adds	r3, #8
 80186cc:	429a      	cmp	r2, r3
 80186ce:	d104      	bne.n	80186da <vTaskSwitchContext+0x96>
 80186d0:	68bb      	ldr	r3, [r7, #8]
 80186d2:	685b      	ldr	r3, [r3, #4]
 80186d4:	685a      	ldr	r2, [r3, #4]
 80186d6:	68bb      	ldr	r3, [r7, #8]
 80186d8:	605a      	str	r2, [r3, #4]
 80186da:	68bb      	ldr	r3, [r7, #8]
 80186dc:	685b      	ldr	r3, [r3, #4]
 80186de:	68db      	ldr	r3, [r3, #12]
 80186e0:	4a09      	ldr	r2, [pc, #36]	; (8018708 <vTaskSwitchContext+0xc4>)
 80186e2:	6013      	str	r3, [r2, #0]
 80186e4:	4a09      	ldr	r2, [pc, #36]	; (801870c <vTaskSwitchContext+0xc8>)
 80186e6:	68fb      	ldr	r3, [r7, #12]
 80186e8:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 80186ea:	4b07      	ldr	r3, [pc, #28]	; (8018708 <vTaskSwitchContext+0xc4>)
 80186ec:	681b      	ldr	r3, [r3, #0]
 80186ee:	2100      	movs	r1, #0
 80186f0:	4618      	mov	r0, r3
 80186f2:	f7ff ff85 	bl	8018600 <xTaskCallApplicationTaskHook>
}
 80186f6:	bf00      	nop
 80186f8:	3710      	adds	r7, #16
 80186fa:	46bd      	mov	sp, r7
 80186fc:	bd80      	pop	{r7, pc}
 80186fe:	bf00      	nop
 8018700:	240250c4 	.word	0x240250c4
 8018704:	240250b0 	.word	0x240250b0
 8018708:	24024bc8 	.word	0x24024bc8
 801870c:	240250a4 	.word	0x240250a4
 8018710:	24024bcc 	.word	0x24024bcc

08018714 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8018714:	b580      	push	{r7, lr}
 8018716:	b084      	sub	sp, #16
 8018718:	af00      	add	r7, sp, #0
 801871a:	6078      	str	r0, [r7, #4]
 801871c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801871e:	687b      	ldr	r3, [r7, #4]
 8018720:	2b00      	cmp	r3, #0
 8018722:	d10a      	bne.n	801873a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8018724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018728:	f383 8811 	msr	BASEPRI, r3
 801872c:	f3bf 8f6f 	isb	sy
 8018730:	f3bf 8f4f 	dsb	sy
 8018734:	60fb      	str	r3, [r7, #12]
}
 8018736:	bf00      	nop
 8018738:	e7fe      	b.n	8018738 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801873a:	4b07      	ldr	r3, [pc, #28]	; (8018758 <vTaskPlaceOnEventList+0x44>)
 801873c:	681b      	ldr	r3, [r3, #0]
 801873e:	3318      	adds	r3, #24
 8018740:	4619      	mov	r1, r3
 8018742:	6878      	ldr	r0, [r7, #4]
 8018744:	f7fe f811 	bl	801676a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8018748:	2101      	movs	r1, #1
 801874a:	6838      	ldr	r0, [r7, #0]
 801874c:	f000 fb8c 	bl	8018e68 <prvAddCurrentTaskToDelayedList>
}
 8018750:	bf00      	nop
 8018752:	3710      	adds	r7, #16
 8018754:	46bd      	mov	sp, r7
 8018756:	bd80      	pop	{r7, pc}
 8018758:	24024bc8 	.word	0x24024bc8

0801875c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801875c:	b580      	push	{r7, lr}
 801875e:	b086      	sub	sp, #24
 8018760:	af00      	add	r7, sp, #0
 8018762:	60f8      	str	r0, [r7, #12]
 8018764:	60b9      	str	r1, [r7, #8]
 8018766:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8018768:	68fb      	ldr	r3, [r7, #12]
 801876a:	2b00      	cmp	r3, #0
 801876c:	d10a      	bne.n	8018784 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 801876e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018772:	f383 8811 	msr	BASEPRI, r3
 8018776:	f3bf 8f6f 	isb	sy
 801877a:	f3bf 8f4f 	dsb	sy
 801877e:	617b      	str	r3, [r7, #20]
}
 8018780:	bf00      	nop
 8018782:	e7fe      	b.n	8018782 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8018784:	4b0a      	ldr	r3, [pc, #40]	; (80187b0 <vTaskPlaceOnEventListRestricted+0x54>)
 8018786:	681b      	ldr	r3, [r3, #0]
 8018788:	3318      	adds	r3, #24
 801878a:	4619      	mov	r1, r3
 801878c:	68f8      	ldr	r0, [r7, #12]
 801878e:	f7fd ffc8 	bl	8016722 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8018792:	687b      	ldr	r3, [r7, #4]
 8018794:	2b00      	cmp	r3, #0
 8018796:	d002      	beq.n	801879e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8018798:	f04f 33ff 	mov.w	r3, #4294967295
 801879c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801879e:	6879      	ldr	r1, [r7, #4]
 80187a0:	68b8      	ldr	r0, [r7, #8]
 80187a2:	f000 fb61 	bl	8018e68 <prvAddCurrentTaskToDelayedList>
	}
 80187a6:	bf00      	nop
 80187a8:	3718      	adds	r7, #24
 80187aa:	46bd      	mov	sp, r7
 80187ac:	bd80      	pop	{r7, pc}
 80187ae:	bf00      	nop
 80187b0:	24024bc8 	.word	0x24024bc8

080187b4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80187b4:	b580      	push	{r7, lr}
 80187b6:	b086      	sub	sp, #24
 80187b8:	af00      	add	r7, sp, #0
 80187ba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80187bc:	687b      	ldr	r3, [r7, #4]
 80187be:	68db      	ldr	r3, [r3, #12]
 80187c0:	68db      	ldr	r3, [r3, #12]
 80187c2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80187c4:	693b      	ldr	r3, [r7, #16]
 80187c6:	2b00      	cmp	r3, #0
 80187c8:	d10a      	bne.n	80187e0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80187ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80187ce:	f383 8811 	msr	BASEPRI, r3
 80187d2:	f3bf 8f6f 	isb	sy
 80187d6:	f3bf 8f4f 	dsb	sy
 80187da:	60fb      	str	r3, [r7, #12]
}
 80187dc:	bf00      	nop
 80187de:	e7fe      	b.n	80187de <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80187e0:	693b      	ldr	r3, [r7, #16]
 80187e2:	3318      	adds	r3, #24
 80187e4:	4618      	mov	r0, r3
 80187e6:	f7fd fff9 	bl	80167dc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80187ea:	4b1e      	ldr	r3, [pc, #120]	; (8018864 <xTaskRemoveFromEventList+0xb0>)
 80187ec:	681b      	ldr	r3, [r3, #0]
 80187ee:	2b00      	cmp	r3, #0
 80187f0:	d11d      	bne.n	801882e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80187f2:	693b      	ldr	r3, [r7, #16]
 80187f4:	3304      	adds	r3, #4
 80187f6:	4618      	mov	r0, r3
 80187f8:	f7fd fff0 	bl	80167dc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80187fc:	693b      	ldr	r3, [r7, #16]
 80187fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018800:	4b19      	ldr	r3, [pc, #100]	; (8018868 <xTaskRemoveFromEventList+0xb4>)
 8018802:	681b      	ldr	r3, [r3, #0]
 8018804:	429a      	cmp	r2, r3
 8018806:	d903      	bls.n	8018810 <xTaskRemoveFromEventList+0x5c>
 8018808:	693b      	ldr	r3, [r7, #16]
 801880a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801880c:	4a16      	ldr	r2, [pc, #88]	; (8018868 <xTaskRemoveFromEventList+0xb4>)
 801880e:	6013      	str	r3, [r2, #0]
 8018810:	693b      	ldr	r3, [r7, #16]
 8018812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018814:	4613      	mov	r3, r2
 8018816:	009b      	lsls	r3, r3, #2
 8018818:	4413      	add	r3, r2
 801881a:	009b      	lsls	r3, r3, #2
 801881c:	4a13      	ldr	r2, [pc, #76]	; (801886c <xTaskRemoveFromEventList+0xb8>)
 801881e:	441a      	add	r2, r3
 8018820:	693b      	ldr	r3, [r7, #16]
 8018822:	3304      	adds	r3, #4
 8018824:	4619      	mov	r1, r3
 8018826:	4610      	mov	r0, r2
 8018828:	f7fd ff7b 	bl	8016722 <vListInsertEnd>
 801882c:	e005      	b.n	801883a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801882e:	693b      	ldr	r3, [r7, #16]
 8018830:	3318      	adds	r3, #24
 8018832:	4619      	mov	r1, r3
 8018834:	480e      	ldr	r0, [pc, #56]	; (8018870 <xTaskRemoveFromEventList+0xbc>)
 8018836:	f7fd ff74 	bl	8016722 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801883a:	693b      	ldr	r3, [r7, #16]
 801883c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801883e:	4b0d      	ldr	r3, [pc, #52]	; (8018874 <xTaskRemoveFromEventList+0xc0>)
 8018840:	681b      	ldr	r3, [r3, #0]
 8018842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018844:	429a      	cmp	r2, r3
 8018846:	d905      	bls.n	8018854 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8018848:	2301      	movs	r3, #1
 801884a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801884c:	4b0a      	ldr	r3, [pc, #40]	; (8018878 <xTaskRemoveFromEventList+0xc4>)
 801884e:	2201      	movs	r2, #1
 8018850:	601a      	str	r2, [r3, #0]
 8018852:	e001      	b.n	8018858 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8018854:	2300      	movs	r3, #0
 8018856:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8018858:	697b      	ldr	r3, [r7, #20]
}
 801885a:	4618      	mov	r0, r3
 801885c:	3718      	adds	r7, #24
 801885e:	46bd      	mov	sp, r7
 8018860:	bd80      	pop	{r7, pc}
 8018862:	bf00      	nop
 8018864:	240250c4 	.word	0x240250c4
 8018868:	240250a4 	.word	0x240250a4
 801886c:	24024bcc 	.word	0x24024bcc
 8018870:	2402505c 	.word	0x2402505c
 8018874:	24024bc8 	.word	0x24024bc8
 8018878:	240250b0 	.word	0x240250b0

0801887c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801887c:	b480      	push	{r7}
 801887e:	b083      	sub	sp, #12
 8018880:	af00      	add	r7, sp, #0
 8018882:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8018884:	4b06      	ldr	r3, [pc, #24]	; (80188a0 <vTaskInternalSetTimeOutState+0x24>)
 8018886:	681a      	ldr	r2, [r3, #0]
 8018888:	687b      	ldr	r3, [r7, #4]
 801888a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801888c:	4b05      	ldr	r3, [pc, #20]	; (80188a4 <vTaskInternalSetTimeOutState+0x28>)
 801888e:	681a      	ldr	r2, [r3, #0]
 8018890:	687b      	ldr	r3, [r7, #4]
 8018892:	605a      	str	r2, [r3, #4]
}
 8018894:	bf00      	nop
 8018896:	370c      	adds	r7, #12
 8018898:	46bd      	mov	sp, r7
 801889a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801889e:	4770      	bx	lr
 80188a0:	240250b4 	.word	0x240250b4
 80188a4:	240250a0 	.word	0x240250a0

080188a8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80188a8:	b580      	push	{r7, lr}
 80188aa:	b088      	sub	sp, #32
 80188ac:	af00      	add	r7, sp, #0
 80188ae:	6078      	str	r0, [r7, #4]
 80188b0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80188b2:	687b      	ldr	r3, [r7, #4]
 80188b4:	2b00      	cmp	r3, #0
 80188b6:	d10a      	bne.n	80188ce <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80188b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80188bc:	f383 8811 	msr	BASEPRI, r3
 80188c0:	f3bf 8f6f 	isb	sy
 80188c4:	f3bf 8f4f 	dsb	sy
 80188c8:	613b      	str	r3, [r7, #16]
}
 80188ca:	bf00      	nop
 80188cc:	e7fe      	b.n	80188cc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80188ce:	683b      	ldr	r3, [r7, #0]
 80188d0:	2b00      	cmp	r3, #0
 80188d2:	d10a      	bne.n	80188ea <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80188d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80188d8:	f383 8811 	msr	BASEPRI, r3
 80188dc:	f3bf 8f6f 	isb	sy
 80188e0:	f3bf 8f4f 	dsb	sy
 80188e4:	60fb      	str	r3, [r7, #12]
}
 80188e6:	bf00      	nop
 80188e8:	e7fe      	b.n	80188e8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80188ea:	f7fe f8cb 	bl	8016a84 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80188ee:	4b1d      	ldr	r3, [pc, #116]	; (8018964 <xTaskCheckForTimeOut+0xbc>)
 80188f0:	681b      	ldr	r3, [r3, #0]
 80188f2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80188f4:	687b      	ldr	r3, [r7, #4]
 80188f6:	685b      	ldr	r3, [r3, #4]
 80188f8:	69ba      	ldr	r2, [r7, #24]
 80188fa:	1ad3      	subs	r3, r2, r3
 80188fc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80188fe:	683b      	ldr	r3, [r7, #0]
 8018900:	681b      	ldr	r3, [r3, #0]
 8018902:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018906:	d102      	bne.n	801890e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8018908:	2300      	movs	r3, #0
 801890a:	61fb      	str	r3, [r7, #28]
 801890c:	e023      	b.n	8018956 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801890e:	687b      	ldr	r3, [r7, #4]
 8018910:	681a      	ldr	r2, [r3, #0]
 8018912:	4b15      	ldr	r3, [pc, #84]	; (8018968 <xTaskCheckForTimeOut+0xc0>)
 8018914:	681b      	ldr	r3, [r3, #0]
 8018916:	429a      	cmp	r2, r3
 8018918:	d007      	beq.n	801892a <xTaskCheckForTimeOut+0x82>
 801891a:	687b      	ldr	r3, [r7, #4]
 801891c:	685b      	ldr	r3, [r3, #4]
 801891e:	69ba      	ldr	r2, [r7, #24]
 8018920:	429a      	cmp	r2, r3
 8018922:	d302      	bcc.n	801892a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8018924:	2301      	movs	r3, #1
 8018926:	61fb      	str	r3, [r7, #28]
 8018928:	e015      	b.n	8018956 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801892a:	683b      	ldr	r3, [r7, #0]
 801892c:	681b      	ldr	r3, [r3, #0]
 801892e:	697a      	ldr	r2, [r7, #20]
 8018930:	429a      	cmp	r2, r3
 8018932:	d20b      	bcs.n	801894c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8018934:	683b      	ldr	r3, [r7, #0]
 8018936:	681a      	ldr	r2, [r3, #0]
 8018938:	697b      	ldr	r3, [r7, #20]
 801893a:	1ad2      	subs	r2, r2, r3
 801893c:	683b      	ldr	r3, [r7, #0]
 801893e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8018940:	6878      	ldr	r0, [r7, #4]
 8018942:	f7ff ff9b 	bl	801887c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8018946:	2300      	movs	r3, #0
 8018948:	61fb      	str	r3, [r7, #28]
 801894a:	e004      	b.n	8018956 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 801894c:	683b      	ldr	r3, [r7, #0]
 801894e:	2200      	movs	r2, #0
 8018950:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8018952:	2301      	movs	r3, #1
 8018954:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8018956:	f7fe f8c5 	bl	8016ae4 <vPortExitCritical>

	return xReturn;
 801895a:	69fb      	ldr	r3, [r7, #28]
}
 801895c:	4618      	mov	r0, r3
 801895e:	3720      	adds	r7, #32
 8018960:	46bd      	mov	sp, r7
 8018962:	bd80      	pop	{r7, pc}
 8018964:	240250a0 	.word	0x240250a0
 8018968:	240250b4 	.word	0x240250b4

0801896c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801896c:	b480      	push	{r7}
 801896e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8018970:	4b03      	ldr	r3, [pc, #12]	; (8018980 <vTaskMissedYield+0x14>)
 8018972:	2201      	movs	r2, #1
 8018974:	601a      	str	r2, [r3, #0]
}
 8018976:	bf00      	nop
 8018978:	46bd      	mov	sp, r7
 801897a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801897e:	4770      	bx	lr
 8018980:	240250b0 	.word	0x240250b0

08018984 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8018984:	b580      	push	{r7, lr}
 8018986:	b082      	sub	sp, #8
 8018988:	af00      	add	r7, sp, #0
 801898a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801898c:	f000 f854 	bl	8018a38 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8018990:	4b07      	ldr	r3, [pc, #28]	; (80189b0 <prvIdleTask+0x2c>)
 8018992:	681b      	ldr	r3, [r3, #0]
 8018994:	2b01      	cmp	r3, #1
 8018996:	d907      	bls.n	80189a8 <prvIdleTask+0x24>
			{
				taskYIELD();
 8018998:	4b06      	ldr	r3, [pc, #24]	; (80189b4 <prvIdleTask+0x30>)
 801899a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801899e:	601a      	str	r2, [r3, #0]
 80189a0:	f3bf 8f4f 	dsb	sy
 80189a4:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 80189a8:	f7e7 fda6 	bl	80004f8 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 80189ac:	e7ee      	b.n	801898c <prvIdleTask+0x8>
 80189ae:	bf00      	nop
 80189b0:	24024bcc 	.word	0x24024bcc
 80189b4:	e000ed04 	.word	0xe000ed04

080189b8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80189b8:	b580      	push	{r7, lr}
 80189ba:	b082      	sub	sp, #8
 80189bc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80189be:	2300      	movs	r3, #0
 80189c0:	607b      	str	r3, [r7, #4]
 80189c2:	e00c      	b.n	80189de <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80189c4:	687a      	ldr	r2, [r7, #4]
 80189c6:	4613      	mov	r3, r2
 80189c8:	009b      	lsls	r3, r3, #2
 80189ca:	4413      	add	r3, r2
 80189cc:	009b      	lsls	r3, r3, #2
 80189ce:	4a12      	ldr	r2, [pc, #72]	; (8018a18 <prvInitialiseTaskLists+0x60>)
 80189d0:	4413      	add	r3, r2
 80189d2:	4618      	mov	r0, r3
 80189d4:	f7fd fe78 	bl	80166c8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80189d8:	687b      	ldr	r3, [r7, #4]
 80189da:	3301      	adds	r3, #1
 80189dc:	607b      	str	r3, [r7, #4]
 80189de:	687b      	ldr	r3, [r7, #4]
 80189e0:	2b37      	cmp	r3, #55	; 0x37
 80189e2:	d9ef      	bls.n	80189c4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80189e4:	480d      	ldr	r0, [pc, #52]	; (8018a1c <prvInitialiseTaskLists+0x64>)
 80189e6:	f7fd fe6f 	bl	80166c8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80189ea:	480d      	ldr	r0, [pc, #52]	; (8018a20 <prvInitialiseTaskLists+0x68>)
 80189ec:	f7fd fe6c 	bl	80166c8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80189f0:	480c      	ldr	r0, [pc, #48]	; (8018a24 <prvInitialiseTaskLists+0x6c>)
 80189f2:	f7fd fe69 	bl	80166c8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80189f6:	480c      	ldr	r0, [pc, #48]	; (8018a28 <prvInitialiseTaskLists+0x70>)
 80189f8:	f7fd fe66 	bl	80166c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80189fc:	480b      	ldr	r0, [pc, #44]	; (8018a2c <prvInitialiseTaskLists+0x74>)
 80189fe:	f7fd fe63 	bl	80166c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8018a02:	4b0b      	ldr	r3, [pc, #44]	; (8018a30 <prvInitialiseTaskLists+0x78>)
 8018a04:	4a05      	ldr	r2, [pc, #20]	; (8018a1c <prvInitialiseTaskLists+0x64>)
 8018a06:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8018a08:	4b0a      	ldr	r3, [pc, #40]	; (8018a34 <prvInitialiseTaskLists+0x7c>)
 8018a0a:	4a05      	ldr	r2, [pc, #20]	; (8018a20 <prvInitialiseTaskLists+0x68>)
 8018a0c:	601a      	str	r2, [r3, #0]
}
 8018a0e:	bf00      	nop
 8018a10:	3708      	adds	r7, #8
 8018a12:	46bd      	mov	sp, r7
 8018a14:	bd80      	pop	{r7, pc}
 8018a16:	bf00      	nop
 8018a18:	24024bcc 	.word	0x24024bcc
 8018a1c:	2402502c 	.word	0x2402502c
 8018a20:	24025040 	.word	0x24025040
 8018a24:	2402505c 	.word	0x2402505c
 8018a28:	24025070 	.word	0x24025070
 8018a2c:	24025088 	.word	0x24025088
 8018a30:	24025054 	.word	0x24025054
 8018a34:	24025058 	.word	0x24025058

08018a38 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8018a38:	b580      	push	{r7, lr}
 8018a3a:	b082      	sub	sp, #8
 8018a3c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8018a3e:	e019      	b.n	8018a74 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8018a40:	f7fe f820 	bl	8016a84 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018a44:	4b10      	ldr	r3, [pc, #64]	; (8018a88 <prvCheckTasksWaitingTermination+0x50>)
 8018a46:	68db      	ldr	r3, [r3, #12]
 8018a48:	68db      	ldr	r3, [r3, #12]
 8018a4a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8018a4c:	687b      	ldr	r3, [r7, #4]
 8018a4e:	3304      	adds	r3, #4
 8018a50:	4618      	mov	r0, r3
 8018a52:	f7fd fec3 	bl	80167dc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8018a56:	4b0d      	ldr	r3, [pc, #52]	; (8018a8c <prvCheckTasksWaitingTermination+0x54>)
 8018a58:	681b      	ldr	r3, [r3, #0]
 8018a5a:	3b01      	subs	r3, #1
 8018a5c:	4a0b      	ldr	r2, [pc, #44]	; (8018a8c <prvCheckTasksWaitingTermination+0x54>)
 8018a5e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8018a60:	4b0b      	ldr	r3, [pc, #44]	; (8018a90 <prvCheckTasksWaitingTermination+0x58>)
 8018a62:	681b      	ldr	r3, [r3, #0]
 8018a64:	3b01      	subs	r3, #1
 8018a66:	4a0a      	ldr	r2, [pc, #40]	; (8018a90 <prvCheckTasksWaitingTermination+0x58>)
 8018a68:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8018a6a:	f7fe f83b 	bl	8016ae4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8018a6e:	6878      	ldr	r0, [r7, #4]
 8018a70:	f000 f810 	bl	8018a94 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8018a74:	4b06      	ldr	r3, [pc, #24]	; (8018a90 <prvCheckTasksWaitingTermination+0x58>)
 8018a76:	681b      	ldr	r3, [r3, #0]
 8018a78:	2b00      	cmp	r3, #0
 8018a7a:	d1e1      	bne.n	8018a40 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8018a7c:	bf00      	nop
 8018a7e:	bf00      	nop
 8018a80:	3708      	adds	r7, #8
 8018a82:	46bd      	mov	sp, r7
 8018a84:	bd80      	pop	{r7, pc}
 8018a86:	bf00      	nop
 8018a88:	24025070 	.word	0x24025070
 8018a8c:	2402509c 	.word	0x2402509c
 8018a90:	24025084 	.word	0x24025084

08018a94 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8018a94:	b580      	push	{r7, lr}
 8018a96:	b084      	sub	sp, #16
 8018a98:	af00      	add	r7, sp, #0
 8018a9a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8018a9c:	687b      	ldr	r3, [r7, #4]
 8018a9e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8018aa2:	2b00      	cmp	r3, #0
 8018aa4:	d108      	bne.n	8018ab8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8018aa6:	687b      	ldr	r3, [r7, #4]
 8018aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018aaa:	4618      	mov	r0, r3
 8018aac:	f7fd fcec 	bl	8016488 <vPortFree>
				vPortFree( pxTCB );
 8018ab0:	6878      	ldr	r0, [r7, #4]
 8018ab2:	f7fd fce9 	bl	8016488 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8018ab6:	e018      	b.n	8018aea <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8018ab8:	687b      	ldr	r3, [r7, #4]
 8018aba:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8018abe:	2b01      	cmp	r3, #1
 8018ac0:	d103      	bne.n	8018aca <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8018ac2:	6878      	ldr	r0, [r7, #4]
 8018ac4:	f7fd fce0 	bl	8016488 <vPortFree>
	}
 8018ac8:	e00f      	b.n	8018aea <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8018aca:	687b      	ldr	r3, [r7, #4]
 8018acc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8018ad0:	2b02      	cmp	r3, #2
 8018ad2:	d00a      	beq.n	8018aea <prvDeleteTCB+0x56>
	__asm volatile
 8018ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018ad8:	f383 8811 	msr	BASEPRI, r3
 8018adc:	f3bf 8f6f 	isb	sy
 8018ae0:	f3bf 8f4f 	dsb	sy
 8018ae4:	60fb      	str	r3, [r7, #12]
}
 8018ae6:	bf00      	nop
 8018ae8:	e7fe      	b.n	8018ae8 <prvDeleteTCB+0x54>
	}
 8018aea:	bf00      	nop
 8018aec:	3710      	adds	r7, #16
 8018aee:	46bd      	mov	sp, r7
 8018af0:	bd80      	pop	{r7, pc}
	...

08018af4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8018af4:	b480      	push	{r7}
 8018af6:	b083      	sub	sp, #12
 8018af8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8018afa:	4b0c      	ldr	r3, [pc, #48]	; (8018b2c <prvResetNextTaskUnblockTime+0x38>)
 8018afc:	681b      	ldr	r3, [r3, #0]
 8018afe:	681b      	ldr	r3, [r3, #0]
 8018b00:	2b00      	cmp	r3, #0
 8018b02:	d104      	bne.n	8018b0e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8018b04:	4b0a      	ldr	r3, [pc, #40]	; (8018b30 <prvResetNextTaskUnblockTime+0x3c>)
 8018b06:	f04f 32ff 	mov.w	r2, #4294967295
 8018b0a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8018b0c:	e008      	b.n	8018b20 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018b0e:	4b07      	ldr	r3, [pc, #28]	; (8018b2c <prvResetNextTaskUnblockTime+0x38>)
 8018b10:	681b      	ldr	r3, [r3, #0]
 8018b12:	68db      	ldr	r3, [r3, #12]
 8018b14:	68db      	ldr	r3, [r3, #12]
 8018b16:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8018b18:	687b      	ldr	r3, [r7, #4]
 8018b1a:	685b      	ldr	r3, [r3, #4]
 8018b1c:	4a04      	ldr	r2, [pc, #16]	; (8018b30 <prvResetNextTaskUnblockTime+0x3c>)
 8018b1e:	6013      	str	r3, [r2, #0]
}
 8018b20:	bf00      	nop
 8018b22:	370c      	adds	r7, #12
 8018b24:	46bd      	mov	sp, r7
 8018b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b2a:	4770      	bx	lr
 8018b2c:	24025054 	.word	0x24025054
 8018b30:	240250bc 	.word	0x240250bc

08018b34 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8018b34:	b480      	push	{r7}
 8018b36:	b083      	sub	sp, #12
 8018b38:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8018b3a:	4b05      	ldr	r3, [pc, #20]	; (8018b50 <xTaskGetCurrentTaskHandle+0x1c>)
 8018b3c:	681b      	ldr	r3, [r3, #0]
 8018b3e:	607b      	str	r3, [r7, #4]

		return xReturn;
 8018b40:	687b      	ldr	r3, [r7, #4]
	}
 8018b42:	4618      	mov	r0, r3
 8018b44:	370c      	adds	r7, #12
 8018b46:	46bd      	mov	sp, r7
 8018b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b4c:	4770      	bx	lr
 8018b4e:	bf00      	nop
 8018b50:	24024bc8 	.word	0x24024bc8

08018b54 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8018b54:	b480      	push	{r7}
 8018b56:	b083      	sub	sp, #12
 8018b58:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8018b5a:	4b0b      	ldr	r3, [pc, #44]	; (8018b88 <xTaskGetSchedulerState+0x34>)
 8018b5c:	681b      	ldr	r3, [r3, #0]
 8018b5e:	2b00      	cmp	r3, #0
 8018b60:	d102      	bne.n	8018b68 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8018b62:	2301      	movs	r3, #1
 8018b64:	607b      	str	r3, [r7, #4]
 8018b66:	e008      	b.n	8018b7a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018b68:	4b08      	ldr	r3, [pc, #32]	; (8018b8c <xTaskGetSchedulerState+0x38>)
 8018b6a:	681b      	ldr	r3, [r3, #0]
 8018b6c:	2b00      	cmp	r3, #0
 8018b6e:	d102      	bne.n	8018b76 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8018b70:	2302      	movs	r3, #2
 8018b72:	607b      	str	r3, [r7, #4]
 8018b74:	e001      	b.n	8018b7a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8018b76:	2300      	movs	r3, #0
 8018b78:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8018b7a:	687b      	ldr	r3, [r7, #4]
	}
 8018b7c:	4618      	mov	r0, r3
 8018b7e:	370c      	adds	r7, #12
 8018b80:	46bd      	mov	sp, r7
 8018b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b86:	4770      	bx	lr
 8018b88:	240250a8 	.word	0x240250a8
 8018b8c:	240250c4 	.word	0x240250c4

08018b90 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8018b90:	b580      	push	{r7, lr}
 8018b92:	b084      	sub	sp, #16
 8018b94:	af00      	add	r7, sp, #0
 8018b96:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8018b98:	687b      	ldr	r3, [r7, #4]
 8018b9a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8018b9c:	2300      	movs	r3, #0
 8018b9e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8018ba0:	687b      	ldr	r3, [r7, #4]
 8018ba2:	2b00      	cmp	r3, #0
 8018ba4:	d051      	beq.n	8018c4a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8018ba6:	68bb      	ldr	r3, [r7, #8]
 8018ba8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018baa:	4b2a      	ldr	r3, [pc, #168]	; (8018c54 <xTaskPriorityInherit+0xc4>)
 8018bac:	681b      	ldr	r3, [r3, #0]
 8018bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018bb0:	429a      	cmp	r2, r3
 8018bb2:	d241      	bcs.n	8018c38 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8018bb4:	68bb      	ldr	r3, [r7, #8]
 8018bb6:	699b      	ldr	r3, [r3, #24]
 8018bb8:	2b00      	cmp	r3, #0
 8018bba:	db06      	blt.n	8018bca <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018bbc:	4b25      	ldr	r3, [pc, #148]	; (8018c54 <xTaskPriorityInherit+0xc4>)
 8018bbe:	681b      	ldr	r3, [r3, #0]
 8018bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018bc2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8018bc6:	68bb      	ldr	r3, [r7, #8]
 8018bc8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8018bca:	68bb      	ldr	r3, [r7, #8]
 8018bcc:	6959      	ldr	r1, [r3, #20]
 8018bce:	68bb      	ldr	r3, [r7, #8]
 8018bd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018bd2:	4613      	mov	r3, r2
 8018bd4:	009b      	lsls	r3, r3, #2
 8018bd6:	4413      	add	r3, r2
 8018bd8:	009b      	lsls	r3, r3, #2
 8018bda:	4a1f      	ldr	r2, [pc, #124]	; (8018c58 <xTaskPriorityInherit+0xc8>)
 8018bdc:	4413      	add	r3, r2
 8018bde:	4299      	cmp	r1, r3
 8018be0:	d122      	bne.n	8018c28 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018be2:	68bb      	ldr	r3, [r7, #8]
 8018be4:	3304      	adds	r3, #4
 8018be6:	4618      	mov	r0, r3
 8018be8:	f7fd fdf8 	bl	80167dc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8018bec:	4b19      	ldr	r3, [pc, #100]	; (8018c54 <xTaskPriorityInherit+0xc4>)
 8018bee:	681b      	ldr	r3, [r3, #0]
 8018bf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018bf2:	68bb      	ldr	r3, [r7, #8]
 8018bf4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8018bf6:	68bb      	ldr	r3, [r7, #8]
 8018bf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018bfa:	4b18      	ldr	r3, [pc, #96]	; (8018c5c <xTaskPriorityInherit+0xcc>)
 8018bfc:	681b      	ldr	r3, [r3, #0]
 8018bfe:	429a      	cmp	r2, r3
 8018c00:	d903      	bls.n	8018c0a <xTaskPriorityInherit+0x7a>
 8018c02:	68bb      	ldr	r3, [r7, #8]
 8018c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018c06:	4a15      	ldr	r2, [pc, #84]	; (8018c5c <xTaskPriorityInherit+0xcc>)
 8018c08:	6013      	str	r3, [r2, #0]
 8018c0a:	68bb      	ldr	r3, [r7, #8]
 8018c0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018c0e:	4613      	mov	r3, r2
 8018c10:	009b      	lsls	r3, r3, #2
 8018c12:	4413      	add	r3, r2
 8018c14:	009b      	lsls	r3, r3, #2
 8018c16:	4a10      	ldr	r2, [pc, #64]	; (8018c58 <xTaskPriorityInherit+0xc8>)
 8018c18:	441a      	add	r2, r3
 8018c1a:	68bb      	ldr	r3, [r7, #8]
 8018c1c:	3304      	adds	r3, #4
 8018c1e:	4619      	mov	r1, r3
 8018c20:	4610      	mov	r0, r2
 8018c22:	f7fd fd7e 	bl	8016722 <vListInsertEnd>
 8018c26:	e004      	b.n	8018c32 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8018c28:	4b0a      	ldr	r3, [pc, #40]	; (8018c54 <xTaskPriorityInherit+0xc4>)
 8018c2a:	681b      	ldr	r3, [r3, #0]
 8018c2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018c2e:	68bb      	ldr	r3, [r7, #8]
 8018c30:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8018c32:	2301      	movs	r3, #1
 8018c34:	60fb      	str	r3, [r7, #12]
 8018c36:	e008      	b.n	8018c4a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8018c38:	68bb      	ldr	r3, [r7, #8]
 8018c3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8018c3c:	4b05      	ldr	r3, [pc, #20]	; (8018c54 <xTaskPriorityInherit+0xc4>)
 8018c3e:	681b      	ldr	r3, [r3, #0]
 8018c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018c42:	429a      	cmp	r2, r3
 8018c44:	d201      	bcs.n	8018c4a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8018c46:	2301      	movs	r3, #1
 8018c48:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8018c4a:	68fb      	ldr	r3, [r7, #12]
	}
 8018c4c:	4618      	mov	r0, r3
 8018c4e:	3710      	adds	r7, #16
 8018c50:	46bd      	mov	sp, r7
 8018c52:	bd80      	pop	{r7, pc}
 8018c54:	24024bc8 	.word	0x24024bc8
 8018c58:	24024bcc 	.word	0x24024bcc
 8018c5c:	240250a4 	.word	0x240250a4

08018c60 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8018c60:	b580      	push	{r7, lr}
 8018c62:	b086      	sub	sp, #24
 8018c64:	af00      	add	r7, sp, #0
 8018c66:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8018c68:	687b      	ldr	r3, [r7, #4]
 8018c6a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8018c6c:	2300      	movs	r3, #0
 8018c6e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8018c70:	687b      	ldr	r3, [r7, #4]
 8018c72:	2b00      	cmp	r3, #0
 8018c74:	d056      	beq.n	8018d24 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8018c76:	4b2e      	ldr	r3, [pc, #184]	; (8018d30 <xTaskPriorityDisinherit+0xd0>)
 8018c78:	681b      	ldr	r3, [r3, #0]
 8018c7a:	693a      	ldr	r2, [r7, #16]
 8018c7c:	429a      	cmp	r2, r3
 8018c7e:	d00a      	beq.n	8018c96 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8018c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018c84:	f383 8811 	msr	BASEPRI, r3
 8018c88:	f3bf 8f6f 	isb	sy
 8018c8c:	f3bf 8f4f 	dsb	sy
 8018c90:	60fb      	str	r3, [r7, #12]
}
 8018c92:	bf00      	nop
 8018c94:	e7fe      	b.n	8018c94 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8018c96:	693b      	ldr	r3, [r7, #16]
 8018c98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018c9a:	2b00      	cmp	r3, #0
 8018c9c:	d10a      	bne.n	8018cb4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8018c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018ca2:	f383 8811 	msr	BASEPRI, r3
 8018ca6:	f3bf 8f6f 	isb	sy
 8018caa:	f3bf 8f4f 	dsb	sy
 8018cae:	60bb      	str	r3, [r7, #8]
}
 8018cb0:	bf00      	nop
 8018cb2:	e7fe      	b.n	8018cb2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8018cb4:	693b      	ldr	r3, [r7, #16]
 8018cb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018cb8:	1e5a      	subs	r2, r3, #1
 8018cba:	693b      	ldr	r3, [r7, #16]
 8018cbc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8018cbe:	693b      	ldr	r3, [r7, #16]
 8018cc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018cc2:	693b      	ldr	r3, [r7, #16]
 8018cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018cc6:	429a      	cmp	r2, r3
 8018cc8:	d02c      	beq.n	8018d24 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8018cca:	693b      	ldr	r3, [r7, #16]
 8018ccc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018cce:	2b00      	cmp	r3, #0
 8018cd0:	d128      	bne.n	8018d24 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018cd2:	693b      	ldr	r3, [r7, #16]
 8018cd4:	3304      	adds	r3, #4
 8018cd6:	4618      	mov	r0, r3
 8018cd8:	f7fd fd80 	bl	80167dc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8018cdc:	693b      	ldr	r3, [r7, #16]
 8018cde:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8018ce0:	693b      	ldr	r3, [r7, #16]
 8018ce2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018ce4:	693b      	ldr	r3, [r7, #16]
 8018ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018ce8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8018cec:	693b      	ldr	r3, [r7, #16]
 8018cee:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8018cf0:	693b      	ldr	r3, [r7, #16]
 8018cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018cf4:	4b0f      	ldr	r3, [pc, #60]	; (8018d34 <xTaskPriorityDisinherit+0xd4>)
 8018cf6:	681b      	ldr	r3, [r3, #0]
 8018cf8:	429a      	cmp	r2, r3
 8018cfa:	d903      	bls.n	8018d04 <xTaskPriorityDisinherit+0xa4>
 8018cfc:	693b      	ldr	r3, [r7, #16]
 8018cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018d00:	4a0c      	ldr	r2, [pc, #48]	; (8018d34 <xTaskPriorityDisinherit+0xd4>)
 8018d02:	6013      	str	r3, [r2, #0]
 8018d04:	693b      	ldr	r3, [r7, #16]
 8018d06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018d08:	4613      	mov	r3, r2
 8018d0a:	009b      	lsls	r3, r3, #2
 8018d0c:	4413      	add	r3, r2
 8018d0e:	009b      	lsls	r3, r3, #2
 8018d10:	4a09      	ldr	r2, [pc, #36]	; (8018d38 <xTaskPriorityDisinherit+0xd8>)
 8018d12:	441a      	add	r2, r3
 8018d14:	693b      	ldr	r3, [r7, #16]
 8018d16:	3304      	adds	r3, #4
 8018d18:	4619      	mov	r1, r3
 8018d1a:	4610      	mov	r0, r2
 8018d1c:	f7fd fd01 	bl	8016722 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8018d20:	2301      	movs	r3, #1
 8018d22:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8018d24:	697b      	ldr	r3, [r7, #20]
	}
 8018d26:	4618      	mov	r0, r3
 8018d28:	3718      	adds	r7, #24
 8018d2a:	46bd      	mov	sp, r7
 8018d2c:	bd80      	pop	{r7, pc}
 8018d2e:	bf00      	nop
 8018d30:	24024bc8 	.word	0x24024bc8
 8018d34:	240250a4 	.word	0x240250a4
 8018d38:	24024bcc 	.word	0x24024bcc

08018d3c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8018d3c:	b580      	push	{r7, lr}
 8018d3e:	b088      	sub	sp, #32
 8018d40:	af00      	add	r7, sp, #0
 8018d42:	6078      	str	r0, [r7, #4]
 8018d44:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8018d46:	687b      	ldr	r3, [r7, #4]
 8018d48:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8018d4a:	2301      	movs	r3, #1
 8018d4c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8018d4e:	687b      	ldr	r3, [r7, #4]
 8018d50:	2b00      	cmp	r3, #0
 8018d52:	d06a      	beq.n	8018e2a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8018d54:	69bb      	ldr	r3, [r7, #24]
 8018d56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018d58:	2b00      	cmp	r3, #0
 8018d5a:	d10a      	bne.n	8018d72 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8018d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018d60:	f383 8811 	msr	BASEPRI, r3
 8018d64:	f3bf 8f6f 	isb	sy
 8018d68:	f3bf 8f4f 	dsb	sy
 8018d6c:	60fb      	str	r3, [r7, #12]
}
 8018d6e:	bf00      	nop
 8018d70:	e7fe      	b.n	8018d70 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8018d72:	69bb      	ldr	r3, [r7, #24]
 8018d74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018d76:	683a      	ldr	r2, [r7, #0]
 8018d78:	429a      	cmp	r2, r3
 8018d7a:	d902      	bls.n	8018d82 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8018d7c:	683b      	ldr	r3, [r7, #0]
 8018d7e:	61fb      	str	r3, [r7, #28]
 8018d80:	e002      	b.n	8018d88 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8018d82:	69bb      	ldr	r3, [r7, #24]
 8018d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018d86:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8018d88:	69bb      	ldr	r3, [r7, #24]
 8018d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018d8c:	69fa      	ldr	r2, [r7, #28]
 8018d8e:	429a      	cmp	r2, r3
 8018d90:	d04b      	beq.n	8018e2a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8018d92:	69bb      	ldr	r3, [r7, #24]
 8018d94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018d96:	697a      	ldr	r2, [r7, #20]
 8018d98:	429a      	cmp	r2, r3
 8018d9a:	d146      	bne.n	8018e2a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8018d9c:	4b25      	ldr	r3, [pc, #148]	; (8018e34 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8018d9e:	681b      	ldr	r3, [r3, #0]
 8018da0:	69ba      	ldr	r2, [r7, #24]
 8018da2:	429a      	cmp	r2, r3
 8018da4:	d10a      	bne.n	8018dbc <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8018da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018daa:	f383 8811 	msr	BASEPRI, r3
 8018dae:	f3bf 8f6f 	isb	sy
 8018db2:	f3bf 8f4f 	dsb	sy
 8018db6:	60bb      	str	r3, [r7, #8]
}
 8018db8:	bf00      	nop
 8018dba:	e7fe      	b.n	8018dba <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8018dbc:	69bb      	ldr	r3, [r7, #24]
 8018dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018dc0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8018dc2:	69bb      	ldr	r3, [r7, #24]
 8018dc4:	69fa      	ldr	r2, [r7, #28]
 8018dc6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8018dc8:	69bb      	ldr	r3, [r7, #24]
 8018dca:	699b      	ldr	r3, [r3, #24]
 8018dcc:	2b00      	cmp	r3, #0
 8018dce:	db04      	blt.n	8018dda <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018dd0:	69fb      	ldr	r3, [r7, #28]
 8018dd2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8018dd6:	69bb      	ldr	r3, [r7, #24]
 8018dd8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8018dda:	69bb      	ldr	r3, [r7, #24]
 8018ddc:	6959      	ldr	r1, [r3, #20]
 8018dde:	693a      	ldr	r2, [r7, #16]
 8018de0:	4613      	mov	r3, r2
 8018de2:	009b      	lsls	r3, r3, #2
 8018de4:	4413      	add	r3, r2
 8018de6:	009b      	lsls	r3, r3, #2
 8018de8:	4a13      	ldr	r2, [pc, #76]	; (8018e38 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8018dea:	4413      	add	r3, r2
 8018dec:	4299      	cmp	r1, r3
 8018dee:	d11c      	bne.n	8018e2a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018df0:	69bb      	ldr	r3, [r7, #24]
 8018df2:	3304      	adds	r3, #4
 8018df4:	4618      	mov	r0, r3
 8018df6:	f7fd fcf1 	bl	80167dc <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8018dfa:	69bb      	ldr	r3, [r7, #24]
 8018dfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018dfe:	4b0f      	ldr	r3, [pc, #60]	; (8018e3c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8018e00:	681b      	ldr	r3, [r3, #0]
 8018e02:	429a      	cmp	r2, r3
 8018e04:	d903      	bls.n	8018e0e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8018e06:	69bb      	ldr	r3, [r7, #24]
 8018e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018e0a:	4a0c      	ldr	r2, [pc, #48]	; (8018e3c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8018e0c:	6013      	str	r3, [r2, #0]
 8018e0e:	69bb      	ldr	r3, [r7, #24]
 8018e10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018e12:	4613      	mov	r3, r2
 8018e14:	009b      	lsls	r3, r3, #2
 8018e16:	4413      	add	r3, r2
 8018e18:	009b      	lsls	r3, r3, #2
 8018e1a:	4a07      	ldr	r2, [pc, #28]	; (8018e38 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8018e1c:	441a      	add	r2, r3
 8018e1e:	69bb      	ldr	r3, [r7, #24]
 8018e20:	3304      	adds	r3, #4
 8018e22:	4619      	mov	r1, r3
 8018e24:	4610      	mov	r0, r2
 8018e26:	f7fd fc7c 	bl	8016722 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8018e2a:	bf00      	nop
 8018e2c:	3720      	adds	r7, #32
 8018e2e:	46bd      	mov	sp, r7
 8018e30:	bd80      	pop	{r7, pc}
 8018e32:	bf00      	nop
 8018e34:	24024bc8 	.word	0x24024bc8
 8018e38:	24024bcc 	.word	0x24024bcc
 8018e3c:	240250a4 	.word	0x240250a4

08018e40 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8018e40:	b480      	push	{r7}
 8018e42:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8018e44:	4b07      	ldr	r3, [pc, #28]	; (8018e64 <pvTaskIncrementMutexHeldCount+0x24>)
 8018e46:	681b      	ldr	r3, [r3, #0]
 8018e48:	2b00      	cmp	r3, #0
 8018e4a:	d004      	beq.n	8018e56 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8018e4c:	4b05      	ldr	r3, [pc, #20]	; (8018e64 <pvTaskIncrementMutexHeldCount+0x24>)
 8018e4e:	681b      	ldr	r3, [r3, #0]
 8018e50:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8018e52:	3201      	adds	r2, #1
 8018e54:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8018e56:	4b03      	ldr	r3, [pc, #12]	; (8018e64 <pvTaskIncrementMutexHeldCount+0x24>)
 8018e58:	681b      	ldr	r3, [r3, #0]
	}
 8018e5a:	4618      	mov	r0, r3
 8018e5c:	46bd      	mov	sp, r7
 8018e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e62:	4770      	bx	lr
 8018e64:	24024bc8 	.word	0x24024bc8

08018e68 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8018e68:	b580      	push	{r7, lr}
 8018e6a:	b084      	sub	sp, #16
 8018e6c:	af00      	add	r7, sp, #0
 8018e6e:	6078      	str	r0, [r7, #4]
 8018e70:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8018e72:	4b21      	ldr	r3, [pc, #132]	; (8018ef8 <prvAddCurrentTaskToDelayedList+0x90>)
 8018e74:	681b      	ldr	r3, [r3, #0]
 8018e76:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018e78:	4b20      	ldr	r3, [pc, #128]	; (8018efc <prvAddCurrentTaskToDelayedList+0x94>)
 8018e7a:	681b      	ldr	r3, [r3, #0]
 8018e7c:	3304      	adds	r3, #4
 8018e7e:	4618      	mov	r0, r3
 8018e80:	f7fd fcac 	bl	80167dc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8018e84:	687b      	ldr	r3, [r7, #4]
 8018e86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018e8a:	d10a      	bne.n	8018ea2 <prvAddCurrentTaskToDelayedList+0x3a>
 8018e8c:	683b      	ldr	r3, [r7, #0]
 8018e8e:	2b00      	cmp	r3, #0
 8018e90:	d007      	beq.n	8018ea2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018e92:	4b1a      	ldr	r3, [pc, #104]	; (8018efc <prvAddCurrentTaskToDelayedList+0x94>)
 8018e94:	681b      	ldr	r3, [r3, #0]
 8018e96:	3304      	adds	r3, #4
 8018e98:	4619      	mov	r1, r3
 8018e9a:	4819      	ldr	r0, [pc, #100]	; (8018f00 <prvAddCurrentTaskToDelayedList+0x98>)
 8018e9c:	f7fd fc41 	bl	8016722 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8018ea0:	e026      	b.n	8018ef0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8018ea2:	68fa      	ldr	r2, [r7, #12]
 8018ea4:	687b      	ldr	r3, [r7, #4]
 8018ea6:	4413      	add	r3, r2
 8018ea8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8018eaa:	4b14      	ldr	r3, [pc, #80]	; (8018efc <prvAddCurrentTaskToDelayedList+0x94>)
 8018eac:	681b      	ldr	r3, [r3, #0]
 8018eae:	68ba      	ldr	r2, [r7, #8]
 8018eb0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8018eb2:	68ba      	ldr	r2, [r7, #8]
 8018eb4:	68fb      	ldr	r3, [r7, #12]
 8018eb6:	429a      	cmp	r2, r3
 8018eb8:	d209      	bcs.n	8018ece <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018eba:	4b12      	ldr	r3, [pc, #72]	; (8018f04 <prvAddCurrentTaskToDelayedList+0x9c>)
 8018ebc:	681a      	ldr	r2, [r3, #0]
 8018ebe:	4b0f      	ldr	r3, [pc, #60]	; (8018efc <prvAddCurrentTaskToDelayedList+0x94>)
 8018ec0:	681b      	ldr	r3, [r3, #0]
 8018ec2:	3304      	adds	r3, #4
 8018ec4:	4619      	mov	r1, r3
 8018ec6:	4610      	mov	r0, r2
 8018ec8:	f7fd fc4f 	bl	801676a <vListInsert>
}
 8018ecc:	e010      	b.n	8018ef0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018ece:	4b0e      	ldr	r3, [pc, #56]	; (8018f08 <prvAddCurrentTaskToDelayedList+0xa0>)
 8018ed0:	681a      	ldr	r2, [r3, #0]
 8018ed2:	4b0a      	ldr	r3, [pc, #40]	; (8018efc <prvAddCurrentTaskToDelayedList+0x94>)
 8018ed4:	681b      	ldr	r3, [r3, #0]
 8018ed6:	3304      	adds	r3, #4
 8018ed8:	4619      	mov	r1, r3
 8018eda:	4610      	mov	r0, r2
 8018edc:	f7fd fc45 	bl	801676a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8018ee0:	4b0a      	ldr	r3, [pc, #40]	; (8018f0c <prvAddCurrentTaskToDelayedList+0xa4>)
 8018ee2:	681b      	ldr	r3, [r3, #0]
 8018ee4:	68ba      	ldr	r2, [r7, #8]
 8018ee6:	429a      	cmp	r2, r3
 8018ee8:	d202      	bcs.n	8018ef0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8018eea:	4a08      	ldr	r2, [pc, #32]	; (8018f0c <prvAddCurrentTaskToDelayedList+0xa4>)
 8018eec:	68bb      	ldr	r3, [r7, #8]
 8018eee:	6013      	str	r3, [r2, #0]
}
 8018ef0:	bf00      	nop
 8018ef2:	3710      	adds	r7, #16
 8018ef4:	46bd      	mov	sp, r7
 8018ef6:	bd80      	pop	{r7, pc}
 8018ef8:	240250a0 	.word	0x240250a0
 8018efc:	24024bc8 	.word	0x24024bc8
 8018f00:	24025088 	.word	0x24025088
 8018f04:	24025058 	.word	0x24025058
 8018f08:	24025054 	.word	0x24025054
 8018f0c:	240250bc 	.word	0x240250bc

08018f10 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8018f10:	b580      	push	{r7, lr}
 8018f12:	b08a      	sub	sp, #40	; 0x28
 8018f14:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8018f16:	2300      	movs	r3, #0
 8018f18:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8018f1a:	f000 fb07 	bl	801952c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8018f1e:	4b1c      	ldr	r3, [pc, #112]	; (8018f90 <xTimerCreateTimerTask+0x80>)
 8018f20:	681b      	ldr	r3, [r3, #0]
 8018f22:	2b00      	cmp	r3, #0
 8018f24:	d021      	beq.n	8018f6a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8018f26:	2300      	movs	r3, #0
 8018f28:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8018f2a:	2300      	movs	r3, #0
 8018f2c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8018f2e:	1d3a      	adds	r2, r7, #4
 8018f30:	f107 0108 	add.w	r1, r7, #8
 8018f34:	f107 030c 	add.w	r3, r7, #12
 8018f38:	4618      	mov	r0, r3
 8018f3a:	f7fd f9bf 	bl	80162bc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8018f3e:	6879      	ldr	r1, [r7, #4]
 8018f40:	68bb      	ldr	r3, [r7, #8]
 8018f42:	68fa      	ldr	r2, [r7, #12]
 8018f44:	9202      	str	r2, [sp, #8]
 8018f46:	9301      	str	r3, [sp, #4]
 8018f48:	2302      	movs	r3, #2
 8018f4a:	9300      	str	r3, [sp, #0]
 8018f4c:	2300      	movs	r3, #0
 8018f4e:	460a      	mov	r2, r1
 8018f50:	4910      	ldr	r1, [pc, #64]	; (8018f94 <xTimerCreateTimerTask+0x84>)
 8018f52:	4811      	ldr	r0, [pc, #68]	; (8018f98 <xTimerCreateTimerTask+0x88>)
 8018f54:	f7fe ff7c 	bl	8017e50 <xTaskCreateStatic>
 8018f58:	4603      	mov	r3, r0
 8018f5a:	4a10      	ldr	r2, [pc, #64]	; (8018f9c <xTimerCreateTimerTask+0x8c>)
 8018f5c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8018f5e:	4b0f      	ldr	r3, [pc, #60]	; (8018f9c <xTimerCreateTimerTask+0x8c>)
 8018f60:	681b      	ldr	r3, [r3, #0]
 8018f62:	2b00      	cmp	r3, #0
 8018f64:	d001      	beq.n	8018f6a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8018f66:	2301      	movs	r3, #1
 8018f68:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8018f6a:	697b      	ldr	r3, [r7, #20]
 8018f6c:	2b00      	cmp	r3, #0
 8018f6e:	d10a      	bne.n	8018f86 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8018f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018f74:	f383 8811 	msr	BASEPRI, r3
 8018f78:	f3bf 8f6f 	isb	sy
 8018f7c:	f3bf 8f4f 	dsb	sy
 8018f80:	613b      	str	r3, [r7, #16]
}
 8018f82:	bf00      	nop
 8018f84:	e7fe      	b.n	8018f84 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8018f86:	697b      	ldr	r3, [r7, #20]
}
 8018f88:	4618      	mov	r0, r3
 8018f8a:	3718      	adds	r7, #24
 8018f8c:	46bd      	mov	sp, r7
 8018f8e:	bd80      	pop	{r7, pc}
 8018f90:	240250f8 	.word	0x240250f8
 8018f94:	0802be30 	.word	0x0802be30
 8018f98:	080190d5 	.word	0x080190d5
 8018f9c:	240250fc 	.word	0x240250fc

08018fa0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8018fa0:	b580      	push	{r7, lr}
 8018fa2:	b08a      	sub	sp, #40	; 0x28
 8018fa4:	af00      	add	r7, sp, #0
 8018fa6:	60f8      	str	r0, [r7, #12]
 8018fa8:	60b9      	str	r1, [r7, #8]
 8018faa:	607a      	str	r2, [r7, #4]
 8018fac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8018fae:	2300      	movs	r3, #0
 8018fb0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8018fb2:	68fb      	ldr	r3, [r7, #12]
 8018fb4:	2b00      	cmp	r3, #0
 8018fb6:	d10a      	bne.n	8018fce <xTimerGenericCommand+0x2e>
	__asm volatile
 8018fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018fbc:	f383 8811 	msr	BASEPRI, r3
 8018fc0:	f3bf 8f6f 	isb	sy
 8018fc4:	f3bf 8f4f 	dsb	sy
 8018fc8:	623b      	str	r3, [r7, #32]
}
 8018fca:	bf00      	nop
 8018fcc:	e7fe      	b.n	8018fcc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8018fce:	4b1a      	ldr	r3, [pc, #104]	; (8019038 <xTimerGenericCommand+0x98>)
 8018fd0:	681b      	ldr	r3, [r3, #0]
 8018fd2:	2b00      	cmp	r3, #0
 8018fd4:	d02a      	beq.n	801902c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8018fd6:	68bb      	ldr	r3, [r7, #8]
 8018fd8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8018fda:	687b      	ldr	r3, [r7, #4]
 8018fdc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8018fde:	68fb      	ldr	r3, [r7, #12]
 8018fe0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8018fe2:	68bb      	ldr	r3, [r7, #8]
 8018fe4:	2b05      	cmp	r3, #5
 8018fe6:	dc18      	bgt.n	801901a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8018fe8:	f7ff fdb4 	bl	8018b54 <xTaskGetSchedulerState>
 8018fec:	4603      	mov	r3, r0
 8018fee:	2b02      	cmp	r3, #2
 8018ff0:	d109      	bne.n	8019006 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8018ff2:	4b11      	ldr	r3, [pc, #68]	; (8019038 <xTimerGenericCommand+0x98>)
 8018ff4:	6818      	ldr	r0, [r3, #0]
 8018ff6:	f107 0110 	add.w	r1, r7, #16
 8018ffa:	2300      	movs	r3, #0
 8018ffc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018ffe:	f7fe f8c1 	bl	8017184 <xQueueGenericSend>
 8019002:	6278      	str	r0, [r7, #36]	; 0x24
 8019004:	e012      	b.n	801902c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8019006:	4b0c      	ldr	r3, [pc, #48]	; (8019038 <xTimerGenericCommand+0x98>)
 8019008:	6818      	ldr	r0, [r3, #0]
 801900a:	f107 0110 	add.w	r1, r7, #16
 801900e:	2300      	movs	r3, #0
 8019010:	2200      	movs	r2, #0
 8019012:	f7fe f8b7 	bl	8017184 <xQueueGenericSend>
 8019016:	6278      	str	r0, [r7, #36]	; 0x24
 8019018:	e008      	b.n	801902c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801901a:	4b07      	ldr	r3, [pc, #28]	; (8019038 <xTimerGenericCommand+0x98>)
 801901c:	6818      	ldr	r0, [r3, #0]
 801901e:	f107 0110 	add.w	r1, r7, #16
 8019022:	2300      	movs	r3, #0
 8019024:	683a      	ldr	r2, [r7, #0]
 8019026:	f7fe f9ab 	bl	8017380 <xQueueGenericSendFromISR>
 801902a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801902c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801902e:	4618      	mov	r0, r3
 8019030:	3728      	adds	r7, #40	; 0x28
 8019032:	46bd      	mov	sp, r7
 8019034:	bd80      	pop	{r7, pc}
 8019036:	bf00      	nop
 8019038:	240250f8 	.word	0x240250f8

0801903c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 801903c:	b580      	push	{r7, lr}
 801903e:	b088      	sub	sp, #32
 8019040:	af02      	add	r7, sp, #8
 8019042:	6078      	str	r0, [r7, #4]
 8019044:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019046:	4b22      	ldr	r3, [pc, #136]	; (80190d0 <prvProcessExpiredTimer+0x94>)
 8019048:	681b      	ldr	r3, [r3, #0]
 801904a:	68db      	ldr	r3, [r3, #12]
 801904c:	68db      	ldr	r3, [r3, #12]
 801904e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8019050:	697b      	ldr	r3, [r7, #20]
 8019052:	3304      	adds	r3, #4
 8019054:	4618      	mov	r0, r3
 8019056:	f7fd fbc1 	bl	80167dc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801905a:	697b      	ldr	r3, [r7, #20]
 801905c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019060:	f003 0304 	and.w	r3, r3, #4
 8019064:	2b00      	cmp	r3, #0
 8019066:	d022      	beq.n	80190ae <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8019068:	697b      	ldr	r3, [r7, #20]
 801906a:	699a      	ldr	r2, [r3, #24]
 801906c:	687b      	ldr	r3, [r7, #4]
 801906e:	18d1      	adds	r1, r2, r3
 8019070:	687b      	ldr	r3, [r7, #4]
 8019072:	683a      	ldr	r2, [r7, #0]
 8019074:	6978      	ldr	r0, [r7, #20]
 8019076:	f000 f8d1 	bl	801921c <prvInsertTimerInActiveList>
 801907a:	4603      	mov	r3, r0
 801907c:	2b00      	cmp	r3, #0
 801907e:	d01f      	beq.n	80190c0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8019080:	2300      	movs	r3, #0
 8019082:	9300      	str	r3, [sp, #0]
 8019084:	2300      	movs	r3, #0
 8019086:	687a      	ldr	r2, [r7, #4]
 8019088:	2100      	movs	r1, #0
 801908a:	6978      	ldr	r0, [r7, #20]
 801908c:	f7ff ff88 	bl	8018fa0 <xTimerGenericCommand>
 8019090:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8019092:	693b      	ldr	r3, [r7, #16]
 8019094:	2b00      	cmp	r3, #0
 8019096:	d113      	bne.n	80190c0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8019098:	f04f 0350 	mov.w	r3, #80	; 0x50
 801909c:	f383 8811 	msr	BASEPRI, r3
 80190a0:	f3bf 8f6f 	isb	sy
 80190a4:	f3bf 8f4f 	dsb	sy
 80190a8:	60fb      	str	r3, [r7, #12]
}
 80190aa:	bf00      	nop
 80190ac:	e7fe      	b.n	80190ac <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80190ae:	697b      	ldr	r3, [r7, #20]
 80190b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80190b4:	f023 0301 	bic.w	r3, r3, #1
 80190b8:	b2da      	uxtb	r2, r3
 80190ba:	697b      	ldr	r3, [r7, #20]
 80190bc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80190c0:	697b      	ldr	r3, [r7, #20]
 80190c2:	6a1b      	ldr	r3, [r3, #32]
 80190c4:	6978      	ldr	r0, [r7, #20]
 80190c6:	4798      	blx	r3
}
 80190c8:	bf00      	nop
 80190ca:	3718      	adds	r7, #24
 80190cc:	46bd      	mov	sp, r7
 80190ce:	bd80      	pop	{r7, pc}
 80190d0:	240250f0 	.word	0x240250f0

080190d4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80190d4:	b580      	push	{r7, lr}
 80190d6:	b084      	sub	sp, #16
 80190d8:	af00      	add	r7, sp, #0
 80190da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80190dc:	f107 0308 	add.w	r3, r7, #8
 80190e0:	4618      	mov	r0, r3
 80190e2:	f000 f857 	bl	8019194 <prvGetNextExpireTime>
 80190e6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80190e8:	68bb      	ldr	r3, [r7, #8]
 80190ea:	4619      	mov	r1, r3
 80190ec:	68f8      	ldr	r0, [r7, #12]
 80190ee:	f000 f803 	bl	80190f8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80190f2:	f000 f8d5 	bl	80192a0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80190f6:	e7f1      	b.n	80190dc <prvTimerTask+0x8>

080190f8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80190f8:	b580      	push	{r7, lr}
 80190fa:	b084      	sub	sp, #16
 80190fc:	af00      	add	r7, sp, #0
 80190fe:	6078      	str	r0, [r7, #4]
 8019100:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8019102:	f7ff f8eb 	bl	80182dc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8019106:	f107 0308 	add.w	r3, r7, #8
 801910a:	4618      	mov	r0, r3
 801910c:	f000 f866 	bl	80191dc <prvSampleTimeNow>
 8019110:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8019112:	68bb      	ldr	r3, [r7, #8]
 8019114:	2b00      	cmp	r3, #0
 8019116:	d130      	bne.n	801917a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8019118:	683b      	ldr	r3, [r7, #0]
 801911a:	2b00      	cmp	r3, #0
 801911c:	d10a      	bne.n	8019134 <prvProcessTimerOrBlockTask+0x3c>
 801911e:	687a      	ldr	r2, [r7, #4]
 8019120:	68fb      	ldr	r3, [r7, #12]
 8019122:	429a      	cmp	r2, r3
 8019124:	d806      	bhi.n	8019134 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8019126:	f7ff f8e7 	bl	80182f8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801912a:	68f9      	ldr	r1, [r7, #12]
 801912c:	6878      	ldr	r0, [r7, #4]
 801912e:	f7ff ff85 	bl	801903c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8019132:	e024      	b.n	801917e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8019134:	683b      	ldr	r3, [r7, #0]
 8019136:	2b00      	cmp	r3, #0
 8019138:	d008      	beq.n	801914c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801913a:	4b13      	ldr	r3, [pc, #76]	; (8019188 <prvProcessTimerOrBlockTask+0x90>)
 801913c:	681b      	ldr	r3, [r3, #0]
 801913e:	681b      	ldr	r3, [r3, #0]
 8019140:	2b00      	cmp	r3, #0
 8019142:	d101      	bne.n	8019148 <prvProcessTimerOrBlockTask+0x50>
 8019144:	2301      	movs	r3, #1
 8019146:	e000      	b.n	801914a <prvProcessTimerOrBlockTask+0x52>
 8019148:	2300      	movs	r3, #0
 801914a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801914c:	4b0f      	ldr	r3, [pc, #60]	; (801918c <prvProcessTimerOrBlockTask+0x94>)
 801914e:	6818      	ldr	r0, [r3, #0]
 8019150:	687a      	ldr	r2, [r7, #4]
 8019152:	68fb      	ldr	r3, [r7, #12]
 8019154:	1ad3      	subs	r3, r2, r3
 8019156:	683a      	ldr	r2, [r7, #0]
 8019158:	4619      	mov	r1, r3
 801915a:	f7fe fe45 	bl	8017de8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801915e:	f7ff f8cb 	bl	80182f8 <xTaskResumeAll>
 8019162:	4603      	mov	r3, r0
 8019164:	2b00      	cmp	r3, #0
 8019166:	d10a      	bne.n	801917e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8019168:	4b09      	ldr	r3, [pc, #36]	; (8019190 <prvProcessTimerOrBlockTask+0x98>)
 801916a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801916e:	601a      	str	r2, [r3, #0]
 8019170:	f3bf 8f4f 	dsb	sy
 8019174:	f3bf 8f6f 	isb	sy
}
 8019178:	e001      	b.n	801917e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801917a:	f7ff f8bd 	bl	80182f8 <xTaskResumeAll>
}
 801917e:	bf00      	nop
 8019180:	3710      	adds	r7, #16
 8019182:	46bd      	mov	sp, r7
 8019184:	bd80      	pop	{r7, pc}
 8019186:	bf00      	nop
 8019188:	240250f4 	.word	0x240250f4
 801918c:	240250f8 	.word	0x240250f8
 8019190:	e000ed04 	.word	0xe000ed04

08019194 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8019194:	b480      	push	{r7}
 8019196:	b085      	sub	sp, #20
 8019198:	af00      	add	r7, sp, #0
 801919a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801919c:	4b0e      	ldr	r3, [pc, #56]	; (80191d8 <prvGetNextExpireTime+0x44>)
 801919e:	681b      	ldr	r3, [r3, #0]
 80191a0:	681b      	ldr	r3, [r3, #0]
 80191a2:	2b00      	cmp	r3, #0
 80191a4:	d101      	bne.n	80191aa <prvGetNextExpireTime+0x16>
 80191a6:	2201      	movs	r2, #1
 80191a8:	e000      	b.n	80191ac <prvGetNextExpireTime+0x18>
 80191aa:	2200      	movs	r2, #0
 80191ac:	687b      	ldr	r3, [r7, #4]
 80191ae:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80191b0:	687b      	ldr	r3, [r7, #4]
 80191b2:	681b      	ldr	r3, [r3, #0]
 80191b4:	2b00      	cmp	r3, #0
 80191b6:	d105      	bne.n	80191c4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80191b8:	4b07      	ldr	r3, [pc, #28]	; (80191d8 <prvGetNextExpireTime+0x44>)
 80191ba:	681b      	ldr	r3, [r3, #0]
 80191bc:	68db      	ldr	r3, [r3, #12]
 80191be:	681b      	ldr	r3, [r3, #0]
 80191c0:	60fb      	str	r3, [r7, #12]
 80191c2:	e001      	b.n	80191c8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80191c4:	2300      	movs	r3, #0
 80191c6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80191c8:	68fb      	ldr	r3, [r7, #12]
}
 80191ca:	4618      	mov	r0, r3
 80191cc:	3714      	adds	r7, #20
 80191ce:	46bd      	mov	sp, r7
 80191d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191d4:	4770      	bx	lr
 80191d6:	bf00      	nop
 80191d8:	240250f0 	.word	0x240250f0

080191dc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80191dc:	b580      	push	{r7, lr}
 80191de:	b084      	sub	sp, #16
 80191e0:	af00      	add	r7, sp, #0
 80191e2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80191e4:	f7ff f926 	bl	8018434 <xTaskGetTickCount>
 80191e8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80191ea:	4b0b      	ldr	r3, [pc, #44]	; (8019218 <prvSampleTimeNow+0x3c>)
 80191ec:	681b      	ldr	r3, [r3, #0]
 80191ee:	68fa      	ldr	r2, [r7, #12]
 80191f0:	429a      	cmp	r2, r3
 80191f2:	d205      	bcs.n	8019200 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80191f4:	f000 f936 	bl	8019464 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80191f8:	687b      	ldr	r3, [r7, #4]
 80191fa:	2201      	movs	r2, #1
 80191fc:	601a      	str	r2, [r3, #0]
 80191fe:	e002      	b.n	8019206 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8019200:	687b      	ldr	r3, [r7, #4]
 8019202:	2200      	movs	r2, #0
 8019204:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8019206:	4a04      	ldr	r2, [pc, #16]	; (8019218 <prvSampleTimeNow+0x3c>)
 8019208:	68fb      	ldr	r3, [r7, #12]
 801920a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 801920c:	68fb      	ldr	r3, [r7, #12]
}
 801920e:	4618      	mov	r0, r3
 8019210:	3710      	adds	r7, #16
 8019212:	46bd      	mov	sp, r7
 8019214:	bd80      	pop	{r7, pc}
 8019216:	bf00      	nop
 8019218:	24025100 	.word	0x24025100

0801921c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 801921c:	b580      	push	{r7, lr}
 801921e:	b086      	sub	sp, #24
 8019220:	af00      	add	r7, sp, #0
 8019222:	60f8      	str	r0, [r7, #12]
 8019224:	60b9      	str	r1, [r7, #8]
 8019226:	607a      	str	r2, [r7, #4]
 8019228:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801922a:	2300      	movs	r3, #0
 801922c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801922e:	68fb      	ldr	r3, [r7, #12]
 8019230:	68ba      	ldr	r2, [r7, #8]
 8019232:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8019234:	68fb      	ldr	r3, [r7, #12]
 8019236:	68fa      	ldr	r2, [r7, #12]
 8019238:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801923a:	68ba      	ldr	r2, [r7, #8]
 801923c:	687b      	ldr	r3, [r7, #4]
 801923e:	429a      	cmp	r2, r3
 8019240:	d812      	bhi.n	8019268 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019242:	687a      	ldr	r2, [r7, #4]
 8019244:	683b      	ldr	r3, [r7, #0]
 8019246:	1ad2      	subs	r2, r2, r3
 8019248:	68fb      	ldr	r3, [r7, #12]
 801924a:	699b      	ldr	r3, [r3, #24]
 801924c:	429a      	cmp	r2, r3
 801924e:	d302      	bcc.n	8019256 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8019250:	2301      	movs	r3, #1
 8019252:	617b      	str	r3, [r7, #20]
 8019254:	e01b      	b.n	801928e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8019256:	4b10      	ldr	r3, [pc, #64]	; (8019298 <prvInsertTimerInActiveList+0x7c>)
 8019258:	681a      	ldr	r2, [r3, #0]
 801925a:	68fb      	ldr	r3, [r7, #12]
 801925c:	3304      	adds	r3, #4
 801925e:	4619      	mov	r1, r3
 8019260:	4610      	mov	r0, r2
 8019262:	f7fd fa82 	bl	801676a <vListInsert>
 8019266:	e012      	b.n	801928e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8019268:	687a      	ldr	r2, [r7, #4]
 801926a:	683b      	ldr	r3, [r7, #0]
 801926c:	429a      	cmp	r2, r3
 801926e:	d206      	bcs.n	801927e <prvInsertTimerInActiveList+0x62>
 8019270:	68ba      	ldr	r2, [r7, #8]
 8019272:	683b      	ldr	r3, [r7, #0]
 8019274:	429a      	cmp	r2, r3
 8019276:	d302      	bcc.n	801927e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8019278:	2301      	movs	r3, #1
 801927a:	617b      	str	r3, [r7, #20]
 801927c:	e007      	b.n	801928e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801927e:	4b07      	ldr	r3, [pc, #28]	; (801929c <prvInsertTimerInActiveList+0x80>)
 8019280:	681a      	ldr	r2, [r3, #0]
 8019282:	68fb      	ldr	r3, [r7, #12]
 8019284:	3304      	adds	r3, #4
 8019286:	4619      	mov	r1, r3
 8019288:	4610      	mov	r0, r2
 801928a:	f7fd fa6e 	bl	801676a <vListInsert>
		}
	}

	return xProcessTimerNow;
 801928e:	697b      	ldr	r3, [r7, #20]
}
 8019290:	4618      	mov	r0, r3
 8019292:	3718      	adds	r7, #24
 8019294:	46bd      	mov	sp, r7
 8019296:	bd80      	pop	{r7, pc}
 8019298:	240250f4 	.word	0x240250f4
 801929c:	240250f0 	.word	0x240250f0

080192a0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80192a0:	b580      	push	{r7, lr}
 80192a2:	b08e      	sub	sp, #56	; 0x38
 80192a4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80192a6:	e0ca      	b.n	801943e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80192a8:	687b      	ldr	r3, [r7, #4]
 80192aa:	2b00      	cmp	r3, #0
 80192ac:	da18      	bge.n	80192e0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80192ae:	1d3b      	adds	r3, r7, #4
 80192b0:	3304      	adds	r3, #4
 80192b2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80192b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80192b6:	2b00      	cmp	r3, #0
 80192b8:	d10a      	bne.n	80192d0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80192ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80192be:	f383 8811 	msr	BASEPRI, r3
 80192c2:	f3bf 8f6f 	isb	sy
 80192c6:	f3bf 8f4f 	dsb	sy
 80192ca:	61fb      	str	r3, [r7, #28]
}
 80192cc:	bf00      	nop
 80192ce:	e7fe      	b.n	80192ce <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80192d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80192d2:	681b      	ldr	r3, [r3, #0]
 80192d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80192d6:	6850      	ldr	r0, [r2, #4]
 80192d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80192da:	6892      	ldr	r2, [r2, #8]
 80192dc:	4611      	mov	r1, r2
 80192de:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80192e0:	687b      	ldr	r3, [r7, #4]
 80192e2:	2b00      	cmp	r3, #0
 80192e4:	f2c0 80aa 	blt.w	801943c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80192e8:	68fb      	ldr	r3, [r7, #12]
 80192ea:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80192ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80192ee:	695b      	ldr	r3, [r3, #20]
 80192f0:	2b00      	cmp	r3, #0
 80192f2:	d004      	beq.n	80192fe <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80192f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80192f6:	3304      	adds	r3, #4
 80192f8:	4618      	mov	r0, r3
 80192fa:	f7fd fa6f 	bl	80167dc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80192fe:	463b      	mov	r3, r7
 8019300:	4618      	mov	r0, r3
 8019302:	f7ff ff6b 	bl	80191dc <prvSampleTimeNow>
 8019306:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8019308:	687b      	ldr	r3, [r7, #4]
 801930a:	2b09      	cmp	r3, #9
 801930c:	f200 8097 	bhi.w	801943e <prvProcessReceivedCommands+0x19e>
 8019310:	a201      	add	r2, pc, #4	; (adr r2, 8019318 <prvProcessReceivedCommands+0x78>)
 8019312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019316:	bf00      	nop
 8019318:	08019341 	.word	0x08019341
 801931c:	08019341 	.word	0x08019341
 8019320:	08019341 	.word	0x08019341
 8019324:	080193b5 	.word	0x080193b5
 8019328:	080193c9 	.word	0x080193c9
 801932c:	08019413 	.word	0x08019413
 8019330:	08019341 	.word	0x08019341
 8019334:	08019341 	.word	0x08019341
 8019338:	080193b5 	.word	0x080193b5
 801933c:	080193c9 	.word	0x080193c9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8019340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019342:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019346:	f043 0301 	orr.w	r3, r3, #1
 801934a:	b2da      	uxtb	r2, r3
 801934c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801934e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8019352:	68ba      	ldr	r2, [r7, #8]
 8019354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019356:	699b      	ldr	r3, [r3, #24]
 8019358:	18d1      	adds	r1, r2, r3
 801935a:	68bb      	ldr	r3, [r7, #8]
 801935c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801935e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019360:	f7ff ff5c 	bl	801921c <prvInsertTimerInActiveList>
 8019364:	4603      	mov	r3, r0
 8019366:	2b00      	cmp	r3, #0
 8019368:	d069      	beq.n	801943e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801936a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801936c:	6a1b      	ldr	r3, [r3, #32]
 801936e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019370:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8019372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019374:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019378:	f003 0304 	and.w	r3, r3, #4
 801937c:	2b00      	cmp	r3, #0
 801937e:	d05e      	beq.n	801943e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8019380:	68ba      	ldr	r2, [r7, #8]
 8019382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019384:	699b      	ldr	r3, [r3, #24]
 8019386:	441a      	add	r2, r3
 8019388:	2300      	movs	r3, #0
 801938a:	9300      	str	r3, [sp, #0]
 801938c:	2300      	movs	r3, #0
 801938e:	2100      	movs	r1, #0
 8019390:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019392:	f7ff fe05 	bl	8018fa0 <xTimerGenericCommand>
 8019396:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8019398:	6a3b      	ldr	r3, [r7, #32]
 801939a:	2b00      	cmp	r3, #0
 801939c:	d14f      	bne.n	801943e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 801939e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80193a2:	f383 8811 	msr	BASEPRI, r3
 80193a6:	f3bf 8f6f 	isb	sy
 80193aa:	f3bf 8f4f 	dsb	sy
 80193ae:	61bb      	str	r3, [r7, #24]
}
 80193b0:	bf00      	nop
 80193b2:	e7fe      	b.n	80193b2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80193b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80193b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80193ba:	f023 0301 	bic.w	r3, r3, #1
 80193be:	b2da      	uxtb	r2, r3
 80193c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80193c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80193c6:	e03a      	b.n	801943e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80193c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80193ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80193ce:	f043 0301 	orr.w	r3, r3, #1
 80193d2:	b2da      	uxtb	r2, r3
 80193d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80193d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80193da:	68ba      	ldr	r2, [r7, #8]
 80193dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80193de:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80193e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80193e2:	699b      	ldr	r3, [r3, #24]
 80193e4:	2b00      	cmp	r3, #0
 80193e6:	d10a      	bne.n	80193fe <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80193e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80193ec:	f383 8811 	msr	BASEPRI, r3
 80193f0:	f3bf 8f6f 	isb	sy
 80193f4:	f3bf 8f4f 	dsb	sy
 80193f8:	617b      	str	r3, [r7, #20]
}
 80193fa:	bf00      	nop
 80193fc:	e7fe      	b.n	80193fc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80193fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019400:	699a      	ldr	r2, [r3, #24]
 8019402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019404:	18d1      	adds	r1, r2, r3
 8019406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019408:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801940a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801940c:	f7ff ff06 	bl	801921c <prvInsertTimerInActiveList>
					break;
 8019410:	e015      	b.n	801943e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8019412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019414:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019418:	f003 0302 	and.w	r3, r3, #2
 801941c:	2b00      	cmp	r3, #0
 801941e:	d103      	bne.n	8019428 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8019420:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019422:	f7fd f831 	bl	8016488 <vPortFree>
 8019426:	e00a      	b.n	801943e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8019428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801942a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801942e:	f023 0301 	bic.w	r3, r3, #1
 8019432:	b2da      	uxtb	r2, r3
 8019434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019436:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801943a:	e000      	b.n	801943e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 801943c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801943e:	4b08      	ldr	r3, [pc, #32]	; (8019460 <prvProcessReceivedCommands+0x1c0>)
 8019440:	681b      	ldr	r3, [r3, #0]
 8019442:	1d39      	adds	r1, r7, #4
 8019444:	2200      	movs	r2, #0
 8019446:	4618      	mov	r0, r3
 8019448:	f7fe f8c2 	bl	80175d0 <xQueueReceive>
 801944c:	4603      	mov	r3, r0
 801944e:	2b00      	cmp	r3, #0
 8019450:	f47f af2a 	bne.w	80192a8 <prvProcessReceivedCommands+0x8>
	}
}
 8019454:	bf00      	nop
 8019456:	bf00      	nop
 8019458:	3730      	adds	r7, #48	; 0x30
 801945a:	46bd      	mov	sp, r7
 801945c:	bd80      	pop	{r7, pc}
 801945e:	bf00      	nop
 8019460:	240250f8 	.word	0x240250f8

08019464 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8019464:	b580      	push	{r7, lr}
 8019466:	b088      	sub	sp, #32
 8019468:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801946a:	e048      	b.n	80194fe <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801946c:	4b2d      	ldr	r3, [pc, #180]	; (8019524 <prvSwitchTimerLists+0xc0>)
 801946e:	681b      	ldr	r3, [r3, #0]
 8019470:	68db      	ldr	r3, [r3, #12]
 8019472:	681b      	ldr	r3, [r3, #0]
 8019474:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019476:	4b2b      	ldr	r3, [pc, #172]	; (8019524 <prvSwitchTimerLists+0xc0>)
 8019478:	681b      	ldr	r3, [r3, #0]
 801947a:	68db      	ldr	r3, [r3, #12]
 801947c:	68db      	ldr	r3, [r3, #12]
 801947e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8019480:	68fb      	ldr	r3, [r7, #12]
 8019482:	3304      	adds	r3, #4
 8019484:	4618      	mov	r0, r3
 8019486:	f7fd f9a9 	bl	80167dc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801948a:	68fb      	ldr	r3, [r7, #12]
 801948c:	6a1b      	ldr	r3, [r3, #32]
 801948e:	68f8      	ldr	r0, [r7, #12]
 8019490:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8019492:	68fb      	ldr	r3, [r7, #12]
 8019494:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019498:	f003 0304 	and.w	r3, r3, #4
 801949c:	2b00      	cmp	r3, #0
 801949e:	d02e      	beq.n	80194fe <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80194a0:	68fb      	ldr	r3, [r7, #12]
 80194a2:	699b      	ldr	r3, [r3, #24]
 80194a4:	693a      	ldr	r2, [r7, #16]
 80194a6:	4413      	add	r3, r2
 80194a8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80194aa:	68ba      	ldr	r2, [r7, #8]
 80194ac:	693b      	ldr	r3, [r7, #16]
 80194ae:	429a      	cmp	r2, r3
 80194b0:	d90e      	bls.n	80194d0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80194b2:	68fb      	ldr	r3, [r7, #12]
 80194b4:	68ba      	ldr	r2, [r7, #8]
 80194b6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80194b8:	68fb      	ldr	r3, [r7, #12]
 80194ba:	68fa      	ldr	r2, [r7, #12]
 80194bc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80194be:	4b19      	ldr	r3, [pc, #100]	; (8019524 <prvSwitchTimerLists+0xc0>)
 80194c0:	681a      	ldr	r2, [r3, #0]
 80194c2:	68fb      	ldr	r3, [r7, #12]
 80194c4:	3304      	adds	r3, #4
 80194c6:	4619      	mov	r1, r3
 80194c8:	4610      	mov	r0, r2
 80194ca:	f7fd f94e 	bl	801676a <vListInsert>
 80194ce:	e016      	b.n	80194fe <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80194d0:	2300      	movs	r3, #0
 80194d2:	9300      	str	r3, [sp, #0]
 80194d4:	2300      	movs	r3, #0
 80194d6:	693a      	ldr	r2, [r7, #16]
 80194d8:	2100      	movs	r1, #0
 80194da:	68f8      	ldr	r0, [r7, #12]
 80194dc:	f7ff fd60 	bl	8018fa0 <xTimerGenericCommand>
 80194e0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80194e2:	687b      	ldr	r3, [r7, #4]
 80194e4:	2b00      	cmp	r3, #0
 80194e6:	d10a      	bne.n	80194fe <prvSwitchTimerLists+0x9a>
	__asm volatile
 80194e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80194ec:	f383 8811 	msr	BASEPRI, r3
 80194f0:	f3bf 8f6f 	isb	sy
 80194f4:	f3bf 8f4f 	dsb	sy
 80194f8:	603b      	str	r3, [r7, #0]
}
 80194fa:	bf00      	nop
 80194fc:	e7fe      	b.n	80194fc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80194fe:	4b09      	ldr	r3, [pc, #36]	; (8019524 <prvSwitchTimerLists+0xc0>)
 8019500:	681b      	ldr	r3, [r3, #0]
 8019502:	681b      	ldr	r3, [r3, #0]
 8019504:	2b00      	cmp	r3, #0
 8019506:	d1b1      	bne.n	801946c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8019508:	4b06      	ldr	r3, [pc, #24]	; (8019524 <prvSwitchTimerLists+0xc0>)
 801950a:	681b      	ldr	r3, [r3, #0]
 801950c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801950e:	4b06      	ldr	r3, [pc, #24]	; (8019528 <prvSwitchTimerLists+0xc4>)
 8019510:	681b      	ldr	r3, [r3, #0]
 8019512:	4a04      	ldr	r2, [pc, #16]	; (8019524 <prvSwitchTimerLists+0xc0>)
 8019514:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8019516:	4a04      	ldr	r2, [pc, #16]	; (8019528 <prvSwitchTimerLists+0xc4>)
 8019518:	697b      	ldr	r3, [r7, #20]
 801951a:	6013      	str	r3, [r2, #0]
}
 801951c:	bf00      	nop
 801951e:	3718      	adds	r7, #24
 8019520:	46bd      	mov	sp, r7
 8019522:	bd80      	pop	{r7, pc}
 8019524:	240250f0 	.word	0x240250f0
 8019528:	240250f4 	.word	0x240250f4

0801952c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801952c:	b580      	push	{r7, lr}
 801952e:	b082      	sub	sp, #8
 8019530:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8019532:	f7fd faa7 	bl	8016a84 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8019536:	4b15      	ldr	r3, [pc, #84]	; (801958c <prvCheckForValidListAndQueue+0x60>)
 8019538:	681b      	ldr	r3, [r3, #0]
 801953a:	2b00      	cmp	r3, #0
 801953c:	d120      	bne.n	8019580 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801953e:	4814      	ldr	r0, [pc, #80]	; (8019590 <prvCheckForValidListAndQueue+0x64>)
 8019540:	f7fd f8c2 	bl	80166c8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8019544:	4813      	ldr	r0, [pc, #76]	; (8019594 <prvCheckForValidListAndQueue+0x68>)
 8019546:	f7fd f8bf 	bl	80166c8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801954a:	4b13      	ldr	r3, [pc, #76]	; (8019598 <prvCheckForValidListAndQueue+0x6c>)
 801954c:	4a10      	ldr	r2, [pc, #64]	; (8019590 <prvCheckForValidListAndQueue+0x64>)
 801954e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8019550:	4b12      	ldr	r3, [pc, #72]	; (801959c <prvCheckForValidListAndQueue+0x70>)
 8019552:	4a10      	ldr	r2, [pc, #64]	; (8019594 <prvCheckForValidListAndQueue+0x68>)
 8019554:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8019556:	2300      	movs	r3, #0
 8019558:	9300      	str	r3, [sp, #0]
 801955a:	4b11      	ldr	r3, [pc, #68]	; (80195a0 <prvCheckForValidListAndQueue+0x74>)
 801955c:	4a11      	ldr	r2, [pc, #68]	; (80195a4 <prvCheckForValidListAndQueue+0x78>)
 801955e:	2110      	movs	r1, #16
 8019560:	200a      	movs	r0, #10
 8019562:	f7fd fc19 	bl	8016d98 <xQueueGenericCreateStatic>
 8019566:	4603      	mov	r3, r0
 8019568:	4a08      	ldr	r2, [pc, #32]	; (801958c <prvCheckForValidListAndQueue+0x60>)
 801956a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801956c:	4b07      	ldr	r3, [pc, #28]	; (801958c <prvCheckForValidListAndQueue+0x60>)
 801956e:	681b      	ldr	r3, [r3, #0]
 8019570:	2b00      	cmp	r3, #0
 8019572:	d005      	beq.n	8019580 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8019574:	4b05      	ldr	r3, [pc, #20]	; (801958c <prvCheckForValidListAndQueue+0x60>)
 8019576:	681b      	ldr	r3, [r3, #0]
 8019578:	490b      	ldr	r1, [pc, #44]	; (80195a8 <prvCheckForValidListAndQueue+0x7c>)
 801957a:	4618      	mov	r0, r3
 801957c:	f7fe fbe0 	bl	8017d40 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8019580:	f7fd fab0 	bl	8016ae4 <vPortExitCritical>
}
 8019584:	bf00      	nop
 8019586:	46bd      	mov	sp, r7
 8019588:	bd80      	pop	{r7, pc}
 801958a:	bf00      	nop
 801958c:	240250f8 	.word	0x240250f8
 8019590:	240250c8 	.word	0x240250c8
 8019594:	240250dc 	.word	0x240250dc
 8019598:	240250f0 	.word	0x240250f0
 801959c:	240250f4 	.word	0x240250f4
 80195a0:	240251a4 	.word	0x240251a4
 80195a4:	24025104 	.word	0x24025104
 80195a8:	0802be38 	.word	0x0802be38

080195ac <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr420_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer, 
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
 80195ac:	b480      	push	{r7}
 80195ae:	b097      	sub	sp, #92	; 0x5c
 80195b0:	af00      	add	r7, sp, #0
 80195b2:	60f8      	str	r0, [r7, #12]
 80195b4:	60b9      	str	r1, [r7, #8]
 80195b6:	607a      	str	r2, [r7, #4]
 80195b8:	603b      	str	r3, [r7, #0]
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr, *pOutAddr2;
  uint8_t *pChrom, *pLum;
  
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
 80195ba:	683b      	ldr	r3, [r7, #0]
 80195bc:	4a9a      	ldr	r2, [pc, #616]	; (8019828 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x27c>)
 80195be:	fba2 2303 	umull	r2, r3, r2, r3
 80195c2:	0a1b      	lsrs	r3, r3, #8
 80195c4:	633b      	str	r3, [r7, #48]	; 0x30
  currentMCU = BlockIndex;
 80195c6:	687b      	ldr	r3, [r7, #4]
 80195c8:	64bb      	str	r3, [r7, #72]	; 0x48
  

  while(currentMCU < (numberMCU + BlockIndex))
 80195ca:	e11e      	b.n	801980a <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x25e>
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
 80195cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80195ce:	011a      	lsls	r2, r3, #4
 80195d0:	4b96      	ldr	r3, [pc, #600]	; (801982c <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x280>)
 80195d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80195d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80195d8:	011b      	lsls	r3, r3, #4
 80195da:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
 80195dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80195de:	011b      	lsls	r3, r3, #4
 80195e0:	4a92      	ldr	r2, [pc, #584]	; (801982c <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x280>)
 80195e2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80195e4:	fbb3 f1f2 	udiv	r1, r3, r2
 80195e8:	fb01 f202 	mul.w	r2, r1, r2
 80195ec:	1a9b      	subs	r3, r3, r2
 80195ee:	62bb      	str	r3, [r7, #40]	; 0x28
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 80195f0:	4b8e      	ldr	r3, [pc, #568]	; (801982c <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x280>)
 80195f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80195f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80195f6:	fb02 f103 	mul.w	r1, r2, r3
 80195fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80195fc:	4613      	mov	r3, r2
 80195fe:	005b      	lsls	r3, r3, #1
 8019600:	4413      	add	r3, r2
 8019602:	440b      	add	r3, r1
 8019604:	647b      	str	r3, [r7, #68]	; 0x44

    currentMCU++;
 8019606:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019608:	3301      	adds	r3, #1
 801960a:	64bb      	str	r3, [r7, #72]	; 0x48
    
    pChrom = pInBuffer + 256; /* pChroma = pInBuffer + 4*64 */
 801960c:	68fb      	ldr	r3, [r7, #12]
 801960e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8019612:	63bb      	str	r3, [r7, #56]	; 0x38
    
    pLum = pInBuffer;
 8019614:	68fb      	ldr	r3, [r7, #12]
 8019616:	637b      	str	r3, [r7, #52]	; 0x34
    
    for(i= 0; i <  16; i+=2)
 8019618:	2300      	movs	r3, #0
 801961a:	657b      	str	r3, [r7, #84]	; 0x54
 801961c:	e0ed      	b.n	80197fa <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x24e>
    {
      if(i == 8)
 801961e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019620:	2b08      	cmp	r3, #8
 8019622:	d102      	bne.n	801962a <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x7e>
      {
        pLum = pInBuffer + 128;
 8019624:	68fb      	ldr	r3, [r7, #12]
 8019626:	3380      	adds	r3, #128	; 0x80
 8019628:	637b      	str	r3, [r7, #52]	; 0x34
      }
      
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 801962a:	4b80      	ldr	r3, [pc, #512]	; (801982c <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x280>)
 801962c:	691b      	ldr	r3, [r3, #16]
 801962e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8019630:	429a      	cmp	r2, r3
 8019632:	f080 80df 	bcs.w	80197f4 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x248>
      {
        pOutAddr = pOutBuffer + refline;
 8019636:	68ba      	ldr	r2, [r7, #8]
 8019638:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801963a:	4413      	add	r3, r2
 801963c:	643b      	str	r3, [r7, #64]	; 0x40
        pOutAddr2 = pOutAddr + JPEG_ConvertorParams.ScaledWidth;
 801963e:	4b7b      	ldr	r3, [pc, #492]	; (801982c <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x280>)
 8019640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019642:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8019644:	4413      	add	r3, r2
 8019646:	63fb      	str	r3, [r7, #60]	; 0x3c
        
        for(k= 0; k<2; k++)
 8019648:	2300      	movs	r3, #0
 801964a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801964c:	e0c5      	b.n	80197da <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x22e>
        {
          for(j=0; j < 8; j+=2)
 801964e:	2300      	movs	r3, #0
 8019650:	653b      	str	r3, [r7, #80]	; 0x50
 8019652:	e0b8      	b.n	80197c6 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x21a>
          {           
            cbcomp = (int32_t)(*(pChrom));
 8019654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019656:	781b      	ldrb	r3, [r3, #0]
 8019658:	627b      	str	r3, [r7, #36]	; 0x24
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 801965a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801965c:	009b      	lsls	r3, r3, #2
 801965e:	4a74      	ldr	r2, [pc, #464]	; (8019830 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x284>)
 8019660:	4413      	add	r3, r2
 8019662:	681b      	ldr	r3, [r3, #0]
 8019664:	623b      	str	r3, [r7, #32]
            
            crcomp = (int32_t)(*(pChrom + 64));
 8019666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019668:	3340      	adds	r3, #64	; 0x40
 801966a:	781b      	ldrb	r3, [r3, #0]
 801966c:	61fb      	str	r3, [r7, #28]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
 801966e:	69fb      	ldr	r3, [r7, #28]
 8019670:	009b      	lsls	r3, r3, #2
 8019672:	4a70      	ldr	r2, [pc, #448]	; (8019834 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x288>)
 8019674:	4413      	add	r3, r2
 8019676:	681b      	ldr	r3, [r3, #0]
 8019678:	61bb      	str	r3, [r7, #24]
            
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
 801967a:	69fb      	ldr	r3, [r7, #28]
 801967c:	009b      	lsls	r3, r3, #2
 801967e:	4a6e      	ldr	r2, [pc, #440]	; (8019838 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x28c>)
 8019680:	4413      	add	r3, r2
 8019682:	681a      	ldr	r2, [r3, #0]
 8019684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019686:	009b      	lsls	r3, r3, #2
 8019688:	496c      	ldr	r1, [pc, #432]	; (801983c <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x290>)
 801968a:	440b      	add	r3, r1
 801968c:	681b      	ldr	r3, [r3, #0]
 801968e:	4413      	add	r3, r2
 8019690:	141b      	asrs	r3, r3, #16
 8019692:	617b      	str	r3, [r7, #20]
              (CLAMP(ycomp + c_blue) << JPEG_BLUE_OFFSET);

            
#elif (JPEG_RGB_FORMAT == JPEG_RGB888)
          
           ycomp = (int32_t)(*(pLum +j));
 8019694:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8019696:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019698:	4413      	add	r3, r2
 801969a:	781b      	ldrb	r3, [r3, #0]
 801969c:	613b      	str	r3, [r7, #16]
          
            pOutAddr[JPEG_RED_OFFSET/8] = CLAMP(ycomp + c_red);
 801969e:	693a      	ldr	r2, [r7, #16]
 80196a0:	69bb      	ldr	r3, [r7, #24]
 80196a2:	4413      	add	r3, r2
 80196a4:	f503 7280 	add.w	r2, r3, #256	; 0x100
 80196a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80196aa:	3302      	adds	r3, #2
 80196ac:	4964      	ldr	r1, [pc, #400]	; (8019840 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x294>)
 80196ae:	5c8a      	ldrb	r2, [r1, r2]
 80196b0:	701a      	strb	r2, [r3, #0]
            pOutAddr[JPEG_GREEN_OFFSET/8] = CLAMP(ycomp + c_green);
 80196b2:	693a      	ldr	r2, [r7, #16]
 80196b4:	697b      	ldr	r3, [r7, #20]
 80196b6:	4413      	add	r3, r2
 80196b8:	f503 7280 	add.w	r2, r3, #256	; 0x100
 80196bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80196be:	3301      	adds	r3, #1
 80196c0:	495f      	ldr	r1, [pc, #380]	; (8019840 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x294>)
 80196c2:	5c8a      	ldrb	r2, [r1, r2]
 80196c4:	701a      	strb	r2, [r3, #0]
            pOutAddr[JPEG_BLUE_OFFSET/8] = CLAMP(ycomp + c_blue);
 80196c6:	693a      	ldr	r2, [r7, #16]
 80196c8:	6a3b      	ldr	r3, [r7, #32]
 80196ca:	4413      	add	r3, r2
 80196cc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80196d0:	4a5b      	ldr	r2, [pc, #364]	; (8019840 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x294>)
 80196d2:	5cd2      	ldrb	r2, [r2, r3]
 80196d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80196d6:	701a      	strb	r2, [r3, #0]
            
            /**********/
            ycomp = (int32_t)(*(pLum +j +1));
 80196d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80196da:	3301      	adds	r3, #1
 80196dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80196de:	4413      	add	r3, r2
 80196e0:	781b      	ldrb	r3, [r3, #0]
 80196e2:	613b      	str	r3, [r7, #16]

            pOutAddr[3 + JPEG_RED_OFFSET/8] = CLAMP(ycomp + c_red);
 80196e4:	693a      	ldr	r2, [r7, #16]
 80196e6:	69bb      	ldr	r3, [r7, #24]
 80196e8:	4413      	add	r3, r2
 80196ea:	f503 7280 	add.w	r2, r3, #256	; 0x100
 80196ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80196f0:	3305      	adds	r3, #5
 80196f2:	4953      	ldr	r1, [pc, #332]	; (8019840 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x294>)
 80196f4:	5c8a      	ldrb	r2, [r1, r2]
 80196f6:	701a      	strb	r2, [r3, #0]
            pOutAddr[3 + JPEG_GREEN_OFFSET/8] = CLAMP(ycomp + c_green);
 80196f8:	693a      	ldr	r2, [r7, #16]
 80196fa:	697b      	ldr	r3, [r7, #20]
 80196fc:	4413      	add	r3, r2
 80196fe:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8019702:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019704:	3304      	adds	r3, #4
 8019706:	494e      	ldr	r1, [pc, #312]	; (8019840 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x294>)
 8019708:	5c8a      	ldrb	r2, [r1, r2]
 801970a:	701a      	strb	r2, [r3, #0]
            pOutAddr[3 + JPEG_BLUE_OFFSET/8] = CLAMP(ycomp + c_blue);
 801970c:	693a      	ldr	r2, [r7, #16]
 801970e:	6a3b      	ldr	r3, [r7, #32]
 8019710:	4413      	add	r3, r2
 8019712:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8019716:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019718:	3303      	adds	r3, #3
 801971a:	4949      	ldr	r1, [pc, #292]	; (8019840 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x294>)
 801971c:	5c8a      	ldrb	r2, [r1, r2]
 801971e:	701a      	strb	r2, [r3, #0]

            /**********/            
            ycomp = (int32_t)(*(pLum +j +8));
 8019720:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019722:	3308      	adds	r3, #8
 8019724:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8019726:	4413      	add	r3, r2
 8019728:	781b      	ldrb	r3, [r3, #0]
 801972a:	613b      	str	r3, [r7, #16]

            pOutAddr2[JPEG_RED_OFFSET/8] = CLAMP(ycomp + c_red);
 801972c:	693a      	ldr	r2, [r7, #16]
 801972e:	69bb      	ldr	r3, [r7, #24]
 8019730:	4413      	add	r3, r2
 8019732:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8019736:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019738:	3302      	adds	r3, #2
 801973a:	4941      	ldr	r1, [pc, #260]	; (8019840 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x294>)
 801973c:	5c8a      	ldrb	r2, [r1, r2]
 801973e:	701a      	strb	r2, [r3, #0]
            pOutAddr2[JPEG_GREEN_OFFSET/8] = CLAMP(ycomp + c_green);
 8019740:	693a      	ldr	r2, [r7, #16]
 8019742:	697b      	ldr	r3, [r7, #20]
 8019744:	4413      	add	r3, r2
 8019746:	f503 7280 	add.w	r2, r3, #256	; 0x100
 801974a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801974c:	3301      	adds	r3, #1
 801974e:	493c      	ldr	r1, [pc, #240]	; (8019840 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x294>)
 8019750:	5c8a      	ldrb	r2, [r1, r2]
 8019752:	701a      	strb	r2, [r3, #0]
            pOutAddr2[JPEG_BLUE_OFFSET/8] = CLAMP(ycomp + c_blue);
 8019754:	693a      	ldr	r2, [r7, #16]
 8019756:	6a3b      	ldr	r3, [r7, #32]
 8019758:	4413      	add	r3, r2
 801975a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801975e:	4a38      	ldr	r2, [pc, #224]	; (8019840 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x294>)
 8019760:	5cd2      	ldrb	r2, [r2, r3]
 8019762:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019764:	701a      	strb	r2, [r3, #0]
            
            /**********/
            ycomp = (int32_t)(*(pLum +j +8 +1));            
 8019766:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019768:	3309      	adds	r3, #9
 801976a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801976c:	4413      	add	r3, r2
 801976e:	781b      	ldrb	r3, [r3, #0]
 8019770:	613b      	str	r3, [r7, #16]
            
            pOutAddr2[3+ JPEG_RED_OFFSET/8] = CLAMP(ycomp + c_red);
 8019772:	693a      	ldr	r2, [r7, #16]
 8019774:	69bb      	ldr	r3, [r7, #24]
 8019776:	4413      	add	r3, r2
 8019778:	f503 7280 	add.w	r2, r3, #256	; 0x100
 801977c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801977e:	3305      	adds	r3, #5
 8019780:	492f      	ldr	r1, [pc, #188]	; (8019840 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x294>)
 8019782:	5c8a      	ldrb	r2, [r1, r2]
 8019784:	701a      	strb	r2, [r3, #0]
            pOutAddr2[3 + JPEG_GREEN_OFFSET/8] = CLAMP(ycomp + c_green);
 8019786:	693a      	ldr	r2, [r7, #16]
 8019788:	697b      	ldr	r3, [r7, #20]
 801978a:	4413      	add	r3, r2
 801978c:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8019790:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019792:	3304      	adds	r3, #4
 8019794:	492a      	ldr	r1, [pc, #168]	; (8019840 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x294>)
 8019796:	5c8a      	ldrb	r2, [r1, r2]
 8019798:	701a      	strb	r2, [r3, #0]
            pOutAddr2[3 + JPEG_BLUE_OFFSET/8] = CLAMP(ycomp + c_blue);
 801979a:	693a      	ldr	r2, [r7, #16]
 801979c:	6a3b      	ldr	r3, [r7, #32]
 801979e:	4413      	add	r3, r2
 80197a0:	f503 7280 	add.w	r2, r3, #256	; 0x100
 80197a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80197a6:	3303      	adds	r3, #3
 80197a8:	4925      	ldr	r1, [pc, #148]	; (8019840 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x294>)
 80197aa:	5c8a      	ldrb	r2, [r1, r2]
 80197ac:	701a      	strb	r2, [r3, #0]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);         
#endif /* JPEG_RGB_FORMAT */          
          
            pOutAddr += JPEG_BYTES_PER_PIXEL * 2;
 80197ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80197b0:	3306      	adds	r3, #6
 80197b2:	643b      	str	r3, [r7, #64]	; 0x40
            pOutAddr2 += JPEG_BYTES_PER_PIXEL * 2;
 80197b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80197b6:	3306      	adds	r3, #6
 80197b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          
            pChrom++;
 80197ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80197bc:	3301      	adds	r3, #1
 80197be:	63bb      	str	r3, [r7, #56]	; 0x38
          for(j=0; j < 8; j+=2)
 80197c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80197c2:	3302      	adds	r3, #2
 80197c4:	653b      	str	r3, [r7, #80]	; 0x50
 80197c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80197c8:	2b07      	cmp	r3, #7
 80197ca:	f67f af43 	bls.w	8019654 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xa8>
          }
          pLum += 64;                      
 80197ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80197d0:	3340      	adds	r3, #64	; 0x40
 80197d2:	637b      	str	r3, [r7, #52]	; 0x34
        for(k= 0; k<2; k++)
 80197d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80197d6:	3301      	adds	r3, #1
 80197d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80197da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80197dc:	2b01      	cmp	r3, #1
 80197de:	f67f af36 	bls.w	801964e <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xa2>
        }

        pLum = pLum - 128 + 16;
 80197e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80197e4:	3b70      	subs	r3, #112	; 0x70
 80197e6:	637b      	str	r3, [r7, #52]	; 0x34
        
        refline += 2*JPEG_ConvertorParams.ScaledWidth;          
 80197e8:	4b10      	ldr	r3, [pc, #64]	; (801982c <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x280>)
 80197ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80197ec:	005b      	lsls	r3, r3, #1
 80197ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80197f0:	4413      	add	r3, r2
 80197f2:	647b      	str	r3, [r7, #68]	; 0x44
    for(i= 0; i <  16; i+=2)
 80197f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80197f6:	3302      	adds	r3, #2
 80197f8:	657b      	str	r3, [r7, #84]	; 0x54
 80197fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80197fc:	2b0f      	cmp	r3, #15
 80197fe:	f67f af0e 	bls.w	801961e <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x72>
      }
    }   
    
    pInBuffer +=  YCBCR_420_BLOCK_SIZE;
 8019802:	68fb      	ldr	r3, [r7, #12]
 8019804:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8019808:	60fb      	str	r3, [r7, #12]
  while(currentMCU < (numberMCU + BlockIndex))
 801980a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801980c:	687b      	ldr	r3, [r7, #4]
 801980e:	4413      	add	r3, r2
 8019810:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8019812:	429a      	cmp	r2, r3
 8019814:	f4ff aeda 	bcc.w	80195cc <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x20>
  }
  return numberMCU;
 8019818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 801981a:	4618      	mov	r0, r3
 801981c:	375c      	adds	r7, #92	; 0x5c
 801981e:	46bd      	mov	sp, r7
 8019820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019824:	4770      	bx	lr
 8019826:	bf00      	nop
 8019828:	aaaaaaab 	.word	0xaaaaaaab
 801982c:	240251f4 	.word	0x240251f4
 8019830:	24025634 	.word	0x24025634
 8019834:	24025234 	.word	0x24025234
 8019838:	24025a34 	.word	0x24025a34
 801983c:	24025e34 	.word	0x24025e34
 8019840:	0802cef8 	.word	0x0802cef8

08019844 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr422_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
 8019844:	b480      	push	{r7}
 8019846:	b097      	sub	sp, #92	; 0x5c
 8019848:	af00      	add	r7, sp, #0
 801984a:	60f8      	str	r0, [r7, #12]
 801984c:	60b9      	str	r1, [r7, #8]
 801984e:	607a      	str	r2, [r7, #4]
 8019850:	603b      	str	r3, [r7, #0]
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;
  
  numberMCU = DataCount / YCBCR_422_BLOCK_SIZE;
 8019852:	683b      	ldr	r3, [r7, #0]
 8019854:	0a1b      	lsrs	r3, r3, #8
 8019856:	637b      	str	r3, [r7, #52]	; 0x34
  currentMCU = BlockIndex;
 8019858:	687b      	ldr	r3, [r7, #4]
 801985a:	64bb      	str	r3, [r7, #72]	; 0x48
  

  while(currentMCU < (numberMCU + BlockIndex))
 801985c:	e0c5      	b.n	80199ea <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1a6>
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
 801985e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019860:	011a      	lsls	r2, r3, #4
 8019862:	4b69      	ldr	r3, [pc, #420]	; (8019a08 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1c4>)
 8019864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019866:	fbb2 f3f3 	udiv	r3, r2, r3
 801986a:	00db      	lsls	r3, r3, #3
 801986c:	633b      	str	r3, [r7, #48]	; 0x30
    
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
 801986e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019870:	011b      	lsls	r3, r3, #4
 8019872:	4a65      	ldr	r2, [pc, #404]	; (8019a08 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1c4>)
 8019874:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8019876:	fbb3 f1f2 	udiv	r1, r3, r2
 801987a:	fb01 f202 	mul.w	r2, r1, r2
 801987e:	1a9b      	subs	r3, r3, r2
 8019880:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8019882:	4b61      	ldr	r3, [pc, #388]	; (8019a08 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1c4>)
 8019884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019886:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019888:	fb02 f103 	mul.w	r1, r2, r3
 801988c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801988e:	4613      	mov	r3, r2
 8019890:	005b      	lsls	r3, r3, #1
 8019892:	4413      	add	r3, r2
 8019894:	440b      	add	r3, r1
 8019896:	647b      	str	r3, [r7, #68]	; 0x44

    currentMCU++;
 8019898:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801989a:	3301      	adds	r3, #1
 801989c:	64bb      	str	r3, [r7, #72]	; 0x48
    
    pChrom = pInBuffer + 128; /* pChroma = pInBuffer + 2*64 */
 801989e:	68fb      	ldr	r3, [r7, #12]
 80198a0:	3380      	adds	r3, #128	; 0x80
 80198a2:	63fb      	str	r3, [r7, #60]	; 0x3c
    
    pLum = pInBuffer;
 80198a4:	68fb      	ldr	r3, [r7, #12]
 80198a6:	63bb      	str	r3, [r7, #56]	; 0x38
    
    for(i= 0; i <  8; i++)
 80198a8:	2300      	movs	r3, #0
 80198aa:	657b      	str	r3, [r7, #84]	; 0x54
 80198ac:	e095      	b.n	80199da <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x196>
    {
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 80198ae:	4b56      	ldr	r3, [pc, #344]	; (8019a08 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1c4>)
 80198b0:	691b      	ldr	r3, [r3, #16]
 80198b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80198b4:	429a      	cmp	r2, r3
 80198b6:	f080 808d 	bcs.w	80199d4 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x190>
      {
        pOutAddr = pOutBuffer + refline;
 80198ba:	68ba      	ldr	r2, [r7, #8]
 80198bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80198be:	4413      	add	r3, r2
 80198c0:	643b      	str	r3, [r7, #64]	; 0x40
        
        for(k= 0; k<2; k++)
 80198c2:	2300      	movs	r3, #0
 80198c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80198c6:	e07a      	b.n	80199be <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x17a>
        {
          for(j=0; j < 8; j+=2)
 80198c8:	2300      	movs	r3, #0
 80198ca:	653b      	str	r3, [r7, #80]	; 0x50
 80198cc:	e06e      	b.n	80199ac <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x168>
          {           
            cbcomp = (int32_t)(*(pChrom));
 80198ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80198d0:	781b      	ldrb	r3, [r3, #0]
 80198d2:	62bb      	str	r3, [r7, #40]	; 0x28
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 80198d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80198d6:	009b      	lsls	r3, r3, #2
 80198d8:	4a4c      	ldr	r2, [pc, #304]	; (8019a0c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1c8>)
 80198da:	4413      	add	r3, r2
 80198dc:	681b      	ldr	r3, [r3, #0]
 80198de:	627b      	str	r3, [r7, #36]	; 0x24
            
            crcomp = (int32_t)(*(pChrom + 64));
 80198e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80198e2:	3340      	adds	r3, #64	; 0x40
 80198e4:	781b      	ldrb	r3, [r3, #0]
 80198e6:	623b      	str	r3, [r7, #32]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
 80198e8:	6a3b      	ldr	r3, [r7, #32]
 80198ea:	009b      	lsls	r3, r3, #2
 80198ec:	4a48      	ldr	r2, [pc, #288]	; (8019a10 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1cc>)
 80198ee:	4413      	add	r3, r2
 80198f0:	681b      	ldr	r3, [r3, #0]
 80198f2:	61fb      	str	r3, [r7, #28]
            
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
 80198f4:	6a3b      	ldr	r3, [r7, #32]
 80198f6:	009b      	lsls	r3, r3, #2
 80198f8:	4a46      	ldr	r2, [pc, #280]	; (8019a14 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1d0>)
 80198fa:	4413      	add	r3, r2
 80198fc:	681a      	ldr	r2, [r3, #0]
 80198fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019900:	009b      	lsls	r3, r3, #2
 8019902:	4945      	ldr	r1, [pc, #276]	; (8019a18 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1d4>)
 8019904:	440b      	add	r3, r1
 8019906:	681b      	ldr	r3, [r3, #0]
 8019908:	4413      	add	r3, r2
 801990a:	141b      	asrs	r3, r3, #16
 801990c:	61bb      	str	r3, [r7, #24]
              (CLAMP( ycomp + c_green) << JPEG_GREEN_OFFSET) | \
              (CLAMP(ycomp + c_blue) << JPEG_BLUE_OFFSET);         
            
#elif (JPEG_RGB_FORMAT == JPEG_RGB888)
          
           ycomp = (int32_t)(*(pLum +j));
 801990e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019910:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019912:	4413      	add	r3, r2
 8019914:	781b      	ldrb	r3, [r3, #0]
 8019916:	617b      	str	r3, [r7, #20]
          
            pOutAddr[JPEG_RED_OFFSET/8] = CLAMP(ycomp + c_red);
 8019918:	697a      	ldr	r2, [r7, #20]
 801991a:	69fb      	ldr	r3, [r7, #28]
 801991c:	4413      	add	r3, r2
 801991e:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8019922:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019924:	3302      	adds	r3, #2
 8019926:	493d      	ldr	r1, [pc, #244]	; (8019a1c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1d8>)
 8019928:	5c8a      	ldrb	r2, [r1, r2]
 801992a:	701a      	strb	r2, [r3, #0]
            pOutAddr[JPEG_GREEN_OFFSET/8] = CLAMP(ycomp + c_green);
 801992c:	697a      	ldr	r2, [r7, #20]
 801992e:	69bb      	ldr	r3, [r7, #24]
 8019930:	4413      	add	r3, r2
 8019932:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8019936:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019938:	3301      	adds	r3, #1
 801993a:	4938      	ldr	r1, [pc, #224]	; (8019a1c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1d8>)
 801993c:	5c8a      	ldrb	r2, [r1, r2]
 801993e:	701a      	strb	r2, [r3, #0]
            pOutAddr[JPEG_BLUE_OFFSET/8] = CLAMP(ycomp + c_blue);
 8019940:	697a      	ldr	r2, [r7, #20]
 8019942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019944:	4413      	add	r3, r2
 8019946:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801994a:	4a34      	ldr	r2, [pc, #208]	; (8019a1c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1d8>)
 801994c:	5cd2      	ldrb	r2, [r2, r3]
 801994e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019950:	701a      	strb	r2, [r3, #0]
            
            /**********/
            ycomp = (int32_t)(*(pLum +j +1));
 8019952:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019954:	3301      	adds	r3, #1
 8019956:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019958:	4413      	add	r3, r2
 801995a:	781b      	ldrb	r3, [r3, #0]
 801995c:	617b      	str	r3, [r7, #20]

            pOutAddr[3 + JPEG_RED_OFFSET/8] = CLAMP(ycomp + c_red);
 801995e:	697a      	ldr	r2, [r7, #20]
 8019960:	69fb      	ldr	r3, [r7, #28]
 8019962:	4413      	add	r3, r2
 8019964:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8019968:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801996a:	3305      	adds	r3, #5
 801996c:	492b      	ldr	r1, [pc, #172]	; (8019a1c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1d8>)
 801996e:	5c8a      	ldrb	r2, [r1, r2]
 8019970:	701a      	strb	r2, [r3, #0]
            pOutAddr[3 + JPEG_GREEN_OFFSET/8] = CLAMP(ycomp + c_green);
 8019972:	697a      	ldr	r2, [r7, #20]
 8019974:	69bb      	ldr	r3, [r7, #24]
 8019976:	4413      	add	r3, r2
 8019978:	f503 7280 	add.w	r2, r3, #256	; 0x100
 801997c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801997e:	3304      	adds	r3, #4
 8019980:	4926      	ldr	r1, [pc, #152]	; (8019a1c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1d8>)
 8019982:	5c8a      	ldrb	r2, [r1, r2]
 8019984:	701a      	strb	r2, [r3, #0]
            pOutAddr[3 + JPEG_BLUE_OFFSET/8] = CLAMP(ycomp + c_blue);
 8019986:	697a      	ldr	r2, [r7, #20]
 8019988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801998a:	4413      	add	r3, r2
 801998c:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8019990:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019992:	3303      	adds	r3, #3
 8019994:	4921      	ldr	r1, [pc, #132]	; (8019a1c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1d8>)
 8019996:	5c8a      	ldrb	r2, [r1, r2]
 8019998:	701a      	strb	r2, [r3, #0]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);         
          
#endif /* JPEG_RGB_FORMAT*/          
          
            pOutAddr += JPEG_BYTES_PER_PIXEL * 2;
 801999a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801999c:	3306      	adds	r3, #6
 801999e:	643b      	str	r3, [r7, #64]	; 0x40
          
            pChrom++;
 80199a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80199a2:	3301      	adds	r3, #1
 80199a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          for(j=0; j < 8; j+=2)
 80199a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80199a8:	3302      	adds	r3, #2
 80199aa:	653b      	str	r3, [r7, #80]	; 0x50
 80199ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80199ae:	2b07      	cmp	r3, #7
 80199b0:	d98d      	bls.n	80198ce <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x8a>
          }
          pLum += 64;                      
 80199b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80199b4:	3340      	adds	r3, #64	; 0x40
 80199b6:	63bb      	str	r3, [r7, #56]	; 0x38
        for(k= 0; k<2; k++)
 80199b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80199ba:	3301      	adds	r3, #1
 80199bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80199be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80199c0:	2b01      	cmp	r3, #1
 80199c2:	d981      	bls.n	80198c8 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x84>
        }
        
        pLum = pLum - 128 + 8;
 80199c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80199c6:	3b78      	subs	r3, #120	; 0x78
 80199c8:	63bb      	str	r3, [r7, #56]	; 0x38
        
        refline += JPEG_ConvertorParams.ScaledWidth;          
 80199ca:	4b0f      	ldr	r3, [pc, #60]	; (8019a08 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1c4>)
 80199cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80199ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80199d0:	4413      	add	r3, r2
 80199d2:	647b      	str	r3, [r7, #68]	; 0x44
    for(i= 0; i <  8; i++)
 80199d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80199d6:	3301      	adds	r3, #1
 80199d8:	657b      	str	r3, [r7, #84]	; 0x54
 80199da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80199dc:	2b07      	cmp	r3, #7
 80199de:	f67f af66 	bls.w	80198ae <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x6a>
      }
    }   
    
    pInBuffer +=  YCBCR_422_BLOCK_SIZE;
 80199e2:	68fb      	ldr	r3, [r7, #12]
 80199e4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80199e8:	60fb      	str	r3, [r7, #12]
  while(currentMCU < (numberMCU + BlockIndex))
 80199ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80199ec:	687b      	ldr	r3, [r7, #4]
 80199ee:	4413      	add	r3, r2
 80199f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80199f2:	429a      	cmp	r2, r3
 80199f4:	f4ff af33 	bcc.w	801985e <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1a>
  }
  return numberMCU;
 80199f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80199fa:	4618      	mov	r0, r3
 80199fc:	375c      	adds	r7, #92	; 0x5c
 80199fe:	46bd      	mov	sp, r7
 8019a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a04:	4770      	bx	lr
 8019a06:	bf00      	nop
 8019a08:	240251f4 	.word	0x240251f4
 8019a0c:	24025634 	.word	0x24025634
 8019a10:	24025234 	.word	0x24025234
 8019a14:	24025a34 	.word	0x24025a34
 8019a18:	24025e34 	.word	0x24025e34
 8019a1c:	0802cef8 	.word	0x0802cef8

08019a20 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr444_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
 8019a20:	b480      	push	{r7}
 8019a22:	b095      	sub	sp, #84	; 0x54
 8019a24:	af00      	add	r7, sp, #0
 8019a26:	60f8      	str	r0, [r7, #12]
 8019a28:	60b9      	str	r1, [r7, #8]
 8019a2a:	607a      	str	r2, [r7, #4]
 8019a2c:	603b      	str	r3, [r7, #0]
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;
  
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
 8019a2e:	683b      	ldr	r3, [r7, #0]
 8019a30:	4a54      	ldr	r2, [pc, #336]	; (8019b84 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x164>)
 8019a32:	fba2 2303 	umull	r2, r3, r2, r3
 8019a36:	09db      	lsrs	r3, r3, #7
 8019a38:	633b      	str	r3, [r7, #48]	; 0x30
  currentMCU = BlockIndex;
 8019a3a:	687b      	ldr	r3, [r7, #4]
 8019a3c:	647b      	str	r3, [r7, #68]	; 0x44
  

  while(currentMCU < (numberMCU + BlockIndex))
 8019a3e:	e092      	b.n	8019b66 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x146>
  {

    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 8019a40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019a42:	00da      	lsls	r2, r3, #3
 8019a44:	4b50      	ldr	r3, [pc, #320]	; (8019b88 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x168>)
 8019a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019a48:	fbb2 f3f3 	udiv	r3, r2, r3
 8019a4c:	00db      	lsls	r3, r3, #3
 8019a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 8019a50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019a52:	00db      	lsls	r3, r3, #3
 8019a54:	4a4c      	ldr	r2, [pc, #304]	; (8019b88 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x168>)
 8019a56:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8019a58:	fbb3 f1f2 	udiv	r1, r3, r2
 8019a5c:	fb01 f202 	mul.w	r2, r1, r2
 8019a60:	1a9b      	subs	r3, r3, r2
 8019a62:	62bb      	str	r3, [r7, #40]	; 0x28
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8019a64:	4b48      	ldr	r3, [pc, #288]	; (8019b88 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x168>)
 8019a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019a68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019a6a:	fb02 f103 	mul.w	r1, r2, r3
 8019a6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019a70:	4613      	mov	r3, r2
 8019a72:	005b      	lsls	r3, r3, #1
 8019a74:	4413      	add	r3, r2
 8019a76:	440b      	add	r3, r1
 8019a78:	643b      	str	r3, [r7, #64]	; 0x40

    currentMCU++;   
 8019a7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019a7c:	3301      	adds	r3, #1
 8019a7e:	647b      	str	r3, [r7, #68]	; 0x44
    
    pChrom = pInBuffer + 64; /* pChroma = pInBuffer + 4*64 */
 8019a80:	68fb      	ldr	r3, [r7, #12]
 8019a82:	3340      	adds	r3, #64	; 0x40
 8019a84:	63bb      	str	r3, [r7, #56]	; 0x38
    
    pLum = pInBuffer;
 8019a86:	68fb      	ldr	r3, [r7, #12]
 8019a88:	637b      	str	r3, [r7, #52]	; 0x34
    
    for(i= 0; i <  8; i++)
 8019a8a:	2300      	movs	r3, #0
 8019a8c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8019a8e:	e064      	b.n	8019b5a <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x13a>
    {
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8019a90:	4b3d      	ldr	r3, [pc, #244]	; (8019b88 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x168>)
 8019a92:	691b      	ldr	r3, [r3, #16]
 8019a94:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8019a96:	429a      	cmp	r2, r3
 8019a98:	d25c      	bcs.n	8019b54 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x134>
      {
        pOutAddr = pOutBuffer+ refline;
 8019a9a:	68ba      	ldr	r2, [r7, #8]
 8019a9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019a9e:	4413      	add	r3, r2
 8019aa0:	63fb      	str	r3, [r7, #60]	; 0x3c
        

          for(j=0; j < 8; j++)
 8019aa2:	2300      	movs	r3, #0
 8019aa4:	64bb      	str	r3, [r7, #72]	; 0x48
 8019aa6:	e04a      	b.n	8019b3e <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x11e>
          {           
            cbcomp = (int32_t)(*pChrom);
 8019aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019aaa:	781b      	ldrb	r3, [r3, #0]
 8019aac:	627b      	str	r3, [r7, #36]	; 0x24
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 8019aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ab0:	009b      	lsls	r3, r3, #2
 8019ab2:	4a36      	ldr	r2, [pc, #216]	; (8019b8c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x16c>)
 8019ab4:	4413      	add	r3, r2
 8019ab6:	681b      	ldr	r3, [r3, #0]
 8019ab8:	623b      	str	r3, [r7, #32]
            
            crcomp = (int32_t)(*(pChrom + 64));
 8019aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019abc:	3340      	adds	r3, #64	; 0x40
 8019abe:	781b      	ldrb	r3, [r3, #0]
 8019ac0:	61fb      	str	r3, [r7, #28]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
 8019ac2:	69fb      	ldr	r3, [r7, #28]
 8019ac4:	009b      	lsls	r3, r3, #2
 8019ac6:	4a32      	ldr	r2, [pc, #200]	; (8019b90 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x170>)
 8019ac8:	4413      	add	r3, r2
 8019aca:	681b      	ldr	r3, [r3, #0]
 8019acc:	61bb      	str	r3, [r7, #24]
            
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
 8019ace:	69fb      	ldr	r3, [r7, #28]
 8019ad0:	009b      	lsls	r3, r3, #2
 8019ad2:	4a30      	ldr	r2, [pc, #192]	; (8019b94 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x174>)
 8019ad4:	4413      	add	r3, r2
 8019ad6:	681a      	ldr	r2, [r3, #0]
 8019ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ada:	009b      	lsls	r3, r3, #2
 8019adc:	492e      	ldr	r1, [pc, #184]	; (8019b98 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x178>)
 8019ade:	440b      	add	r3, r1
 8019ae0:	681b      	ldr	r3, [r3, #0]
 8019ae2:	4413      	add	r3, r2
 8019ae4:	141b      	asrs	r3, r3, #16
 8019ae6:	617b      	str	r3, [r7, #20]
              (CLAMP( ycomp + c_green) << JPEG_GREEN_OFFSET) | \
              (CLAMP(ycomp + c_blue) << JPEG_BLUE_OFFSET);       
            
#elif (JPEG_RGB_FORMAT == JPEG_RGB888)
            
            ycomp = (int32_t)(*(pLum +j));
 8019ae8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8019aea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019aec:	4413      	add	r3, r2
 8019aee:	781b      	ldrb	r3, [r3, #0]
 8019af0:	613b      	str	r3, [r7, #16]
          
            pOutAddr[JPEG_RED_OFFSET/8] = CLAMP(ycomp + c_red);
 8019af2:	693a      	ldr	r2, [r7, #16]
 8019af4:	69bb      	ldr	r3, [r7, #24]
 8019af6:	4413      	add	r3, r2
 8019af8:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8019afc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019afe:	3302      	adds	r3, #2
 8019b00:	4926      	ldr	r1, [pc, #152]	; (8019b9c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x17c>)
 8019b02:	5c8a      	ldrb	r2, [r1, r2]
 8019b04:	701a      	strb	r2, [r3, #0]
            pOutAddr[JPEG_GREEN_OFFSET/8] = CLAMP(ycomp + c_green);
 8019b06:	693a      	ldr	r2, [r7, #16]
 8019b08:	697b      	ldr	r3, [r7, #20]
 8019b0a:	4413      	add	r3, r2
 8019b0c:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8019b10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019b12:	3301      	adds	r3, #1
 8019b14:	4921      	ldr	r1, [pc, #132]	; (8019b9c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x17c>)
 8019b16:	5c8a      	ldrb	r2, [r1, r2]
 8019b18:	701a      	strb	r2, [r3, #0]
            pOutAddr[JPEG_BLUE_OFFSET/8] = CLAMP(ycomp + c_blue);        
 8019b1a:	693a      	ldr	r2, [r7, #16]
 8019b1c:	6a3b      	ldr	r3, [r7, #32]
 8019b1e:	4413      	add	r3, r2
 8019b20:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8019b24:	4a1d      	ldr	r2, [pc, #116]	; (8019b9c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x17c>)
 8019b26:	5cd2      	ldrb	r2, [r2, r3]
 8019b28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019b2a:	701a      	strb	r2, [r3, #0]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
            
#endif /* JPEG_RGB_FORMAT */          
          
            pOutAddr += JPEG_BYTES_PER_PIXEL;
 8019b2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019b2e:	3303      	adds	r3, #3
 8019b30:	63fb      	str	r3, [r7, #60]	; 0x3c
          
            pChrom++;
 8019b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019b34:	3301      	adds	r3, #1
 8019b36:	63bb      	str	r3, [r7, #56]	; 0x38
          for(j=0; j < 8; j++)
 8019b38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019b3a:	3301      	adds	r3, #1
 8019b3c:	64bb      	str	r3, [r7, #72]	; 0x48
 8019b3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019b40:	2b07      	cmp	r3, #7
 8019b42:	d9b1      	bls.n	8019aa8 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x88>
          }
          pLum += 8;
 8019b44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019b46:	3308      	adds	r3, #8
 8019b48:	637b      	str	r3, [r7, #52]	; 0x34

        refline += JPEG_ConvertorParams.ScaledWidth;          
 8019b4a:	4b0f      	ldr	r3, [pc, #60]	; (8019b88 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x168>)
 8019b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019b4e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8019b50:	4413      	add	r3, r2
 8019b52:	643b      	str	r3, [r7, #64]	; 0x40
    for(i= 0; i <  8; i++)
 8019b54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019b56:	3301      	adds	r3, #1
 8019b58:	64fb      	str	r3, [r7, #76]	; 0x4c
 8019b5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019b5c:	2b07      	cmp	r3, #7
 8019b5e:	d997      	bls.n	8019a90 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x70>
      }
    }   
    
    pInBuffer +=  YCBCR_444_BLOCK_SIZE;
 8019b60:	68fb      	ldr	r3, [r7, #12]
 8019b62:	33c0      	adds	r3, #192	; 0xc0
 8019b64:	60fb      	str	r3, [r7, #12]
  while(currentMCU < (numberMCU + BlockIndex))
 8019b66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019b68:	687b      	ldr	r3, [r7, #4]
 8019b6a:	4413      	add	r3, r2
 8019b6c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8019b6e:	429a      	cmp	r2, r3
 8019b70:	f4ff af66 	bcc.w	8019a40 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x20>
  }
  return numberMCU;
 8019b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8019b76:	4618      	mov	r0, r3
 8019b78:	3754      	adds	r7, #84	; 0x54
 8019b7a:	46bd      	mov	sp, r7
 8019b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b80:	4770      	bx	lr
 8019b82:	bf00      	nop
 8019b84:	aaaaaaab 	.word	0xaaaaaaab
 8019b88:	240251f4 	.word	0x240251f4
 8019b8c:	24025634 	.word	0x24025634
 8019b90:	24025234 	.word	0x24025234
 8019b94:	24025a34 	.word	0x24025a34
 8019b98:	24025e34 	.word	0x24025e34
 8019b9c:	0802cef8 	.word	0x0802cef8

08019ba0 <JPEG_MCU_Gray_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_Gray_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
 8019ba0:	b480      	push	{r7}
 8019ba2:	b08f      	sub	sp, #60	; 0x3c
 8019ba4:	af00      	add	r7, sp, #0
 8019ba6:	60f8      	str	r0, [r7, #12]
 8019ba8:	60b9      	str	r1, [r7, #8]
 8019baa:	607a      	str	r2, [r7, #4]
 8019bac:	603b      	str	r3, [r7, #0]

  uint32_t i,j, ySample;
  uint8_t *pOutAddr,  *pLum;

  
  numberMCU = DataCount / GRAY_444_BLOCK_SIZE;
 8019bae:	683b      	ldr	r3, [r7, #0]
 8019bb0:	099b      	lsrs	r3, r3, #6
 8019bb2:	61fb      	str	r3, [r7, #28]
  currentMCU = BlockIndex;
 8019bb4:	687b      	ldr	r3, [r7, #4]
 8019bb6:	637b      	str	r3, [r7, #52]	; 0x34
  
  while(currentMCU < (numberMCU + BlockIndex))
 8019bb8:	e05b      	b.n	8019c72 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xd2>
  {
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 8019bba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019bbc:	00da      	lsls	r2, r3, #3
 8019bbe:	4b33      	ldr	r3, [pc, #204]	; (8019c8c <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xec>)
 8019bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019bc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8019bc6:	00db      	lsls	r3, r3, #3
 8019bc8:	61bb      	str	r3, [r7, #24]
    
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 8019bca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019bcc:	00db      	lsls	r3, r3, #3
 8019bce:	4a2f      	ldr	r2, [pc, #188]	; (8019c8c <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xec>)
 8019bd0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8019bd2:	fbb3 f1f2 	udiv	r1, r3, r2
 8019bd6:	fb01 f202 	mul.w	r2, r1, r2
 8019bda:	1a9b      	subs	r3, r3, r2
 8019bdc:	617b      	str	r3, [r7, #20]
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8019bde:	4b2b      	ldr	r3, [pc, #172]	; (8019c8c <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xec>)
 8019be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019be2:	69ba      	ldr	r2, [r7, #24]
 8019be4:	fb02 f103 	mul.w	r1, r2, r3
 8019be8:	697a      	ldr	r2, [r7, #20]
 8019bea:	4613      	mov	r3, r2
 8019bec:	005b      	lsls	r3, r3, #1
 8019bee:	4413      	add	r3, r2
 8019bf0:	440b      	add	r3, r1
 8019bf2:	633b      	str	r3, [r7, #48]	; 0x30
    
    currentMCU++;
 8019bf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019bf6:	3301      	adds	r3, #1
 8019bf8:	637b      	str	r3, [r7, #52]	; 0x34
  
    pLum = pInBuffer;
 8019bfa:	68fb      	ldr	r3, [r7, #12]
 8019bfc:	623b      	str	r3, [r7, #32]
    
    for(i= 0; i <  8; i++)
 8019bfe:	2300      	movs	r3, #0
 8019c00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019c02:	e030      	b.n	8019c66 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xc6>
    { 
      pOutAddr = pOutBuffer + refline;
 8019c04:	68ba      	ldr	r2, [r7, #8]
 8019c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019c08:	4413      	add	r3, r2
 8019c0a:	627b      	str	r3, [r7, #36]	; 0x24
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8019c0c:	4b1f      	ldr	r3, [pc, #124]	; (8019c8c <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xec>)
 8019c0e:	691b      	ldr	r3, [r3, #16]
 8019c10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019c12:	429a      	cmp	r2, r3
 8019c14:	d224      	bcs.n	8019c60 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xc0>
      {  
        for(j=0; j < 8; j++)
 8019c16:	2300      	movs	r3, #0
 8019c18:	62bb      	str	r3, [r7, #40]	; 0x28
 8019c1a:	e019      	b.n	8019c50 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xb0>
        { 
          ySample =   (uint32_t)(*pLum);
 8019c1c:	6a3b      	ldr	r3, [r7, #32]
 8019c1e:	781b      	ldrb	r3, [r3, #0]
 8019c20:	613b      	str	r3, [r7, #16]
          
          *(__IO uint32_t *)pOutAddr = ySample |  (ySample << 8) | (ySample << 16);
          
#elif (JPEG_RGB_FORMAT == JPEG_RGB888)
          
          pOutAddr[0] =  ySample;
 8019c22:	693b      	ldr	r3, [r7, #16]
 8019c24:	b2da      	uxtb	r2, r3
 8019c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c28:	701a      	strb	r2, [r3, #0]
          pOutAddr[1] =  ySample;
 8019c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c2c:	3301      	adds	r3, #1
 8019c2e:	693a      	ldr	r2, [r7, #16]
 8019c30:	b2d2      	uxtb	r2, r2
 8019c32:	701a      	strb	r2, [r3, #0]
          pOutAddr[2] =  ySample;     
 8019c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c36:	3302      	adds	r3, #2
 8019c38:	693a      	ldr	r2, [r7, #16]
 8019c3a:	b2d2      	uxtb	r2, r2
 8019c3c:	701a      	strb	r2, [r3, #0]
            
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);     
          
#endif /* JPEG_RGB_FORMAT */          
          
          pOutAddr += JPEG_BYTES_PER_PIXEL;
 8019c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c40:	3303      	adds	r3, #3
 8019c42:	627b      	str	r3, [r7, #36]	; 0x24
          pLum++;
 8019c44:	6a3b      	ldr	r3, [r7, #32]
 8019c46:	3301      	adds	r3, #1
 8019c48:	623b      	str	r3, [r7, #32]
        for(j=0; j < 8; j++)
 8019c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c4c:	3301      	adds	r3, #1
 8019c4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8019c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c52:	2b07      	cmp	r3, #7
 8019c54:	d9e2      	bls.n	8019c1c <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x7c>
        }

        refline += JPEG_ConvertorParams.ScaledWidth;        
 8019c56:	4b0d      	ldr	r3, [pc, #52]	; (8019c8c <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xec>)
 8019c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019c5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019c5c:	4413      	add	r3, r2
 8019c5e:	633b      	str	r3, [r7, #48]	; 0x30
    for(i= 0; i <  8; i++)
 8019c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019c62:	3301      	adds	r3, #1
 8019c64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019c68:	2b07      	cmp	r3, #7
 8019c6a:	d9cb      	bls.n	8019c04 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x64>
      }
    }
    
    pInBuffer +=  GRAY_444_BLOCK_SIZE;    
 8019c6c:	68fb      	ldr	r3, [r7, #12]
 8019c6e:	3340      	adds	r3, #64	; 0x40
 8019c70:	60fb      	str	r3, [r7, #12]
  while(currentMCU < (numberMCU + BlockIndex))
 8019c72:	69fa      	ldr	r2, [r7, #28]
 8019c74:	687b      	ldr	r3, [r7, #4]
 8019c76:	4413      	add	r3, r2
 8019c78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8019c7a:	429a      	cmp	r2, r3
 8019c7c:	d39d      	bcc.n	8019bba <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x1a>
  }
  return numberMCU;
 8019c7e:	69fb      	ldr	r3, [r7, #28]
}
 8019c80:	4618      	mov	r0, r3
 8019c82:	373c      	adds	r7, #60	; 0x3c
 8019c84:	46bd      	mov	sp, r7
 8019c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c8a:	4770      	bx	lr
 8019c8c:	240251f4 	.word	0x240251f4

08019c90 <JPEG_MCU_YCCK_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCCK_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer, 
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
 8019c90:	b480      	push	{r7}
 8019c92:	b093      	sub	sp, #76	; 0x4c
 8019c94:	af00      	add	r7, sp, #0
 8019c96:	60f8      	str	r0, [r7, #12]
 8019c98:	60b9      	str	r1, [r7, #8]
 8019c9a:	607a      	str	r2, [r7, #4]
 8019c9c:	603b      	str	r3, [r7, #0]
  
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr, *pChrom;
  
  numberMCU = DataCount / CMYK_444_BLOCK_SIZE;
 8019c9e:	683b      	ldr	r3, [r7, #0]
 8019ca0:	0a1b      	lsrs	r3, r3, #8
 8019ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
  currentMCU = BlockIndex;
 8019ca4:	687b      	ldr	r3, [r7, #4]
 8019ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
  

  while(currentMCU < (numberMCU + BlockIndex))
 8019ca8:	e089      	b.n	8019dbe <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x12e>
  {

    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 8019caa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019cac:	00da      	lsls	r2, r3, #3
 8019cae:	4b4b      	ldr	r3, [pc, #300]	; (8019ddc <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x14c>)
 8019cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019cb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8019cb6:	00db      	lsls	r3, r3, #3
 8019cb8:	62bb      	str	r3, [r7, #40]	; 0x28
    
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 8019cba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019cbc:	00db      	lsls	r3, r3, #3
 8019cbe:	4a47      	ldr	r2, [pc, #284]	; (8019ddc <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x14c>)
 8019cc0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8019cc2:	fbb3 f1f2 	udiv	r1, r3, r2
 8019cc6:	fb01 f202 	mul.w	r2, r1, r2
 8019cca:	1a9b      	subs	r3, r3, r2
 8019ccc:	627b      	str	r3, [r7, #36]	; 0x24
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8019cce:	4b43      	ldr	r3, [pc, #268]	; (8019ddc <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x14c>)
 8019cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019cd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019cd4:	fb02 f103 	mul.w	r1, r2, r3
 8019cd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019cda:	4613      	mov	r3, r2
 8019cdc:	005b      	lsls	r3, r3, #1
 8019cde:	4413      	add	r3, r2
 8019ce0:	440b      	add	r3, r1
 8019ce2:	63bb      	str	r3, [r7, #56]	; 0x38

    currentMCU++;
 8019ce4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019ce6:	3301      	adds	r3, #1
 8019ce8:	63fb      	str	r3, [r7, #60]	; 0x3c
    
    pChrom = pInBuffer;
 8019cea:	68fb      	ldr	r3, [r7, #12]
 8019cec:	633b      	str	r3, [r7, #48]	; 0x30
    
    for(i= 0; i <  8; i++)
 8019cee:	2300      	movs	r3, #0
 8019cf0:	647b      	str	r3, [r7, #68]	; 0x44
 8019cf2:	e05d      	b.n	8019db0 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x120>
    {
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8019cf4:	4b39      	ldr	r3, [pc, #228]	; (8019ddc <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x14c>)
 8019cf6:	691b      	ldr	r3, [r3, #16]
 8019cf8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019cfa:	429a      	cmp	r2, r3
 8019cfc:	d255      	bcs.n	8019daa <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x11a>
      {
        pOutAddr = pOutBuffer+ refline;        
 8019cfe:	68ba      	ldr	r2, [r7, #8]
 8019d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019d02:	4413      	add	r3, r2
 8019d04:	637b      	str	r3, [r7, #52]	; 0x34

          for(j=0; j < 8; j++)
 8019d06:	2300      	movs	r3, #0
 8019d08:	643b      	str	r3, [r7, #64]	; 0x40
 8019d0a:	e046      	b.n	8019d9a <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x10a>
          {           
            color_k = (int32_t)(*(pChrom + 192));
 8019d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019d0e:	33c0      	adds	r3, #192	; 0xc0
 8019d10:	781b      	ldrb	r3, [r3, #0]
 8019d12:	623b      	str	r3, [r7, #32]
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
 8019d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019d16:	781b      	ldrb	r3, [r3, #0]
 8019d18:	461a      	mov	r2, r3
 8019d1a:	6a3b      	ldr	r3, [r7, #32]
 8019d1c:	fb02 f303 	mul.w	r3, r2, r3
 8019d20:	4a2f      	ldr	r2, [pc, #188]	; (8019de0 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x150>)
 8019d22:	fb82 1203 	smull	r1, r2, r2, r3
 8019d26:	441a      	add	r2, r3
 8019d28:	11d2      	asrs	r2, r2, #7
 8019d2a:	17db      	asrs	r3, r3, #31
 8019d2c:	1ad3      	subs	r3, r2, r3
 8019d2e:	61fb      	str	r3, [r7, #28]
            
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
 8019d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019d32:	3340      	adds	r3, #64	; 0x40
 8019d34:	781b      	ldrb	r3, [r3, #0]
 8019d36:	461a      	mov	r2, r3
 8019d38:	6a3b      	ldr	r3, [r7, #32]
 8019d3a:	fb02 f303 	mul.w	r3, r2, r3
 8019d3e:	4a28      	ldr	r2, [pc, #160]	; (8019de0 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x150>)
 8019d40:	fb82 1203 	smull	r1, r2, r2, r3
 8019d44:	441a      	add	r2, r3
 8019d46:	11d2      	asrs	r2, r2, #7
 8019d48:	17db      	asrs	r3, r3, #31
 8019d4a:	1ad3      	subs	r3, r2, r3
 8019d4c:	61bb      	str	r3, [r7, #24]
            
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
 8019d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019d50:	3380      	adds	r3, #128	; 0x80
 8019d52:	781b      	ldrb	r3, [r3, #0]
 8019d54:	461a      	mov	r2, r3
 8019d56:	6a3b      	ldr	r3, [r7, #32]
 8019d58:	fb02 f303 	mul.w	r3, r2, r3
 8019d5c:	4a20      	ldr	r2, [pc, #128]	; (8019de0 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x150>)
 8019d5e:	fb82 1203 	smull	r1, r2, r2, r3
 8019d62:	441a      	add	r2, r3
 8019d64:	11d2      	asrs	r2, r2, #7
 8019d66:	17db      	asrs	r3, r3, #31
 8019d68:	1ad3      	subs	r3, r2, r3
 8019d6a:	617b      	str	r3, [r7, #20]
            (c_green << JPEG_GREEN_OFFSET) | \
            (c_blue << JPEG_BLUE_OFFSET);     
            
#elif (JPEG_RGB_FORMAT == JPEG_RGB888)
            
          pOutAddr[JPEG_RED_OFFSET/8]   =  c_red;
 8019d6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019d6e:	3302      	adds	r3, #2
 8019d70:	69fa      	ldr	r2, [r7, #28]
 8019d72:	b2d2      	uxtb	r2, r2
 8019d74:	701a      	strb	r2, [r3, #0]
          pOutAddr[JPEG_GREEN_OFFSET/8] =  c_green;
 8019d76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019d78:	3301      	adds	r3, #1
 8019d7a:	69ba      	ldr	r2, [r7, #24]
 8019d7c:	b2d2      	uxtb	r2, r2
 8019d7e:	701a      	strb	r2, [r3, #0]
          pOutAddr[JPEG_BLUE_OFFSET/8]  =  c_blue;
 8019d80:	697b      	ldr	r3, [r7, #20]
 8019d82:	b2da      	uxtb	r2, r3
 8019d84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019d86:	701a      	strb	r2, [r3, #0]
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
            ((c_blue >> 3) << JPEG_BLUE_OFFSET);         
            
#endif /* JPEG_RGB_FORMAT */          
          
            pOutAddr += JPEG_BYTES_PER_PIXEL;
 8019d88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019d8a:	3303      	adds	r3, #3
 8019d8c:	637b      	str	r3, [r7, #52]	; 0x34
          
            pChrom++;
 8019d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019d90:	3301      	adds	r3, #1
 8019d92:	633b      	str	r3, [r7, #48]	; 0x30
          for(j=0; j < 8; j++)
 8019d94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019d96:	3301      	adds	r3, #1
 8019d98:	643b      	str	r3, [r7, #64]	; 0x40
 8019d9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019d9c:	2b07      	cmp	r3, #7
 8019d9e:	d9b5      	bls.n	8019d0c <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x7c>
          }

        refline += JPEG_ConvertorParams.ScaledWidth;          
 8019da0:	4b0e      	ldr	r3, [pc, #56]	; (8019ddc <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x14c>)
 8019da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019da4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019da6:	4413      	add	r3, r2
 8019da8:	63bb      	str	r3, [r7, #56]	; 0x38
    for(i= 0; i <  8; i++)
 8019daa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019dac:	3301      	adds	r3, #1
 8019dae:	647b      	str	r3, [r7, #68]	; 0x44
 8019db0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019db2:	2b07      	cmp	r3, #7
 8019db4:	d99e      	bls.n	8019cf4 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x64>
      }
    }   
    
    pInBuffer +=  CMYK_444_BLOCK_SIZE;
 8019db6:	68fb      	ldr	r3, [r7, #12]
 8019db8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8019dbc:	60fb      	str	r3, [r7, #12]
  while(currentMCU < (numberMCU + BlockIndex))
 8019dbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019dc0:	687b      	ldr	r3, [r7, #4]
 8019dc2:	4413      	add	r3, r2
 8019dc4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8019dc6:	429a      	cmp	r2, r3
 8019dc8:	f4ff af6f 	bcc.w	8019caa <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x1a>
  }
  return numberMCU;
 8019dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8019dce:	4618      	mov	r0, r3
 8019dd0:	374c      	adds	r7, #76	; 0x4c
 8019dd2:	46bd      	mov	sp, r7
 8019dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019dd8:	4770      	bx	lr
 8019dda:	bf00      	nop
 8019ddc:	240251f4 	.word	0x240251f4
 8019de0:	80808081 	.word	0x80808081

08019de4 <JPEG_GetDecodeColorConvertFunc>:
  *                      depending of the jpeg image color space and chroma sampling info. 
  * @param ImageNbMCUs : pointer to uint32_t, used to retrive the total number of MCU blocks in the jpeg image.  
  * @retval HAL status : HAL_OK or HAL_ERROR.
  */
HAL_StatusTypeDef JPEG_GetDecodeColorConvertFunc(JPEG_ConfTypeDef *pJpegInfo, JPEG_YCbCrToRGB_Convert_Function *pFunction, uint32_t *ImageNbMCUs)
{
 8019de4:	b480      	push	{r7}
 8019de6:	b087      	sub	sp, #28
 8019de8:	af00      	add	r7, sp, #0
 8019dea:	60f8      	str	r0, [r7, #12]
 8019dec:	60b9      	str	r1, [r7, #8]
 8019dee:	607a      	str	r2, [r7, #4]
  uint32_t hMCU, vMCU;

  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
 8019df0:	68fb      	ldr	r3, [r7, #12]
 8019df2:	681b      	ldr	r3, [r3, #0]
 8019df4:	4a7c      	ldr	r2, [pc, #496]	; (8019fe8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019df6:	6013      	str	r3, [r2, #0]
  JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
 8019df8:	68fb      	ldr	r3, [r7, #12]
 8019dfa:	68db      	ldr	r3, [r3, #12]
 8019dfc:	4a7a      	ldr	r2, [pc, #488]	; (8019fe8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019dfe:	6093      	str	r3, [r2, #8]
  JPEG_ConvertorParams.ImageHeight = pJpegInfo->ImageHeight;
 8019e00:	68fb      	ldr	r3, [r7, #12]
 8019e02:	689b      	ldr	r3, [r3, #8]
 8019e04:	4a78      	ldr	r2, [pc, #480]	; (8019fe8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019e06:	60d3      	str	r3, [r2, #12]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
 8019e08:	68fb      	ldr	r3, [r7, #12]
 8019e0a:	68db      	ldr	r3, [r3, #12]
 8019e0c:	68fa      	ldr	r2, [r7, #12]
 8019e0e:	6892      	ldr	r2, [r2, #8]
 8019e10:	fb03 f202 	mul.w	r2, r3, r2
 8019e14:	4613      	mov	r3, r2
 8019e16:	005b      	lsls	r3, r3, #1
 8019e18:	4413      	add	r3, r2
 8019e1a:	4a73      	ldr	r2, [pc, #460]	; (8019fe8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019e1c:	6113      	str	r3, [r2, #16]
  
  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;  
 8019e1e:	68fb      	ldr	r3, [r7, #12]
 8019e20:	685b      	ldr	r3, [r3, #4]
 8019e22:	4a71      	ldr	r2, [pc, #452]	; (8019fe8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019e24:	6053      	str	r3, [r2, #4]
  if(JPEG_ConvertorParams.ColorSpace == JPEG_YCBCR_COLORSPACE)
 8019e26:	4b70      	ldr	r3, [pc, #448]	; (8019fe8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019e28:	681b      	ldr	r3, [r3, #0]
 8019e2a:	2b10      	cmp	r3, #16
 8019e2c:	d155      	bne.n	8019eda <JPEG_GetDecodeColorConvertFunc+0xf6>
  {
    if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_420_SUBSAMPLING)
 8019e2e:	4b6e      	ldr	r3, [pc, #440]	; (8019fe8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019e30:	685b      	ldr	r3, [r3, #4]
 8019e32:	2b01      	cmp	r3, #1
 8019e34:	d119      	bne.n	8019e6a <JPEG_GetDecodeColorConvertFunc+0x86>
    {
      *pFunction = JPEG_MCU_YCbCr420_ARGB_ConvertBlocks;
 8019e36:	68bb      	ldr	r3, [r7, #8]
 8019e38:	4a6c      	ldr	r2, [pc, #432]	; (8019fec <JPEG_GetDecodeColorConvertFunc+0x208>)
 8019e3a:	601a      	str	r2, [r3, #0]

      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
 8019e3c:	4b6a      	ldr	r3, [pc, #424]	; (8019fe8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019e3e:	689b      	ldr	r3, [r3, #8]
 8019e40:	f003 030f 	and.w	r3, r3, #15
 8019e44:	4a68      	ldr	r2, [pc, #416]	; (8019fe8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019e46:	6153      	str	r3, [r2, #20]
      
      if(JPEG_ConvertorParams.LineOffset != 0)
 8019e48:	4b67      	ldr	r3, [pc, #412]	; (8019fe8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019e4a:	695b      	ldr	r3, [r3, #20]
 8019e4c:	2b00      	cmp	r3, #0
 8019e4e:	d005      	beq.n	8019e5c <JPEG_GetDecodeColorConvertFunc+0x78>
      {
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;  
 8019e50:	4b65      	ldr	r3, [pc, #404]	; (8019fe8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019e52:	695b      	ldr	r3, [r3, #20]
 8019e54:	f1c3 0310 	rsb	r3, r3, #16
 8019e58:	4a63      	ldr	r2, [pc, #396]	; (8019fe8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019e5a:	6153      	str	r3, [r2, #20]
      }
      JPEG_ConvertorParams.H_factor = 16;
 8019e5c:	4b62      	ldr	r3, [pc, #392]	; (8019fe8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019e5e:	2210      	movs	r2, #16
 8019e60:	61da      	str	r2, [r3, #28]
      JPEG_ConvertorParams.V_factor  = 16;
 8019e62:	4b61      	ldr	r3, [pc, #388]	; (8019fe8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019e64:	2210      	movs	r2, #16
 8019e66:	621a      	str	r2, [r3, #32]
 8019e68:	e075      	b.n	8019f56 <JPEG_GetDecodeColorConvertFunc+0x172>
    }
    else if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_422_SUBSAMPLING)
 8019e6a:	4b5f      	ldr	r3, [pc, #380]	; (8019fe8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019e6c:	685b      	ldr	r3, [r3, #4]
 8019e6e:	2b02      	cmp	r3, #2
 8019e70:	d119      	bne.n	8019ea6 <JPEG_GetDecodeColorConvertFunc+0xc2>
    {
      *pFunction =  JPEG_MCU_YCbCr422_ARGB_ConvertBlocks;
 8019e72:	68bb      	ldr	r3, [r7, #8]
 8019e74:	4a5e      	ldr	r2, [pc, #376]	; (8019ff0 <JPEG_GetDecodeColorConvertFunc+0x20c>)
 8019e76:	601a      	str	r2, [r3, #0]

      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
 8019e78:	4b5b      	ldr	r3, [pc, #364]	; (8019fe8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019e7a:	689b      	ldr	r3, [r3, #8]
 8019e7c:	f003 030f 	and.w	r3, r3, #15
 8019e80:	4a59      	ldr	r2, [pc, #356]	; (8019fe8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019e82:	6153      	str	r3, [r2, #20]
      
      if(JPEG_ConvertorParams.LineOffset != 0)
 8019e84:	4b58      	ldr	r3, [pc, #352]	; (8019fe8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019e86:	695b      	ldr	r3, [r3, #20]
 8019e88:	2b00      	cmp	r3, #0
 8019e8a:	d005      	beq.n	8019e98 <JPEG_GetDecodeColorConvertFunc+0xb4>
      {
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;  
 8019e8c:	4b56      	ldr	r3, [pc, #344]	; (8019fe8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019e8e:	695b      	ldr	r3, [r3, #20]
 8019e90:	f1c3 0310 	rsb	r3, r3, #16
 8019e94:	4a54      	ldr	r2, [pc, #336]	; (8019fe8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019e96:	6153      	str	r3, [r2, #20]
      }
      JPEG_ConvertorParams.H_factor = 16;
 8019e98:	4b53      	ldr	r3, [pc, #332]	; (8019fe8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019e9a:	2210      	movs	r2, #16
 8019e9c:	61da      	str	r2, [r3, #28]
      JPEG_ConvertorParams.V_factor  = 8;
 8019e9e:	4b52      	ldr	r3, [pc, #328]	; (8019fe8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019ea0:	2208      	movs	r2, #8
 8019ea2:	621a      	str	r2, [r3, #32]
 8019ea4:	e057      	b.n	8019f56 <JPEG_GetDecodeColorConvertFunc+0x172>
    }
    else /*4:4:4*/
    {
      *pFunction =  JPEG_MCU_YCbCr444_ARGB_ConvertBlocks;
 8019ea6:	68bb      	ldr	r3, [r7, #8]
 8019ea8:	4a52      	ldr	r2, [pc, #328]	; (8019ff4 <JPEG_GetDecodeColorConvertFunc+0x210>)
 8019eaa:	601a      	str	r2, [r3, #0]

      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
 8019eac:	4b4e      	ldr	r3, [pc, #312]	; (8019fe8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019eae:	689b      	ldr	r3, [r3, #8]
 8019eb0:	f003 0307 	and.w	r3, r3, #7
 8019eb4:	4a4c      	ldr	r2, [pc, #304]	; (8019fe8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019eb6:	6153      	str	r3, [r2, #20]
      
      if(JPEG_ConvertorParams.LineOffset != 0)
 8019eb8:	4b4b      	ldr	r3, [pc, #300]	; (8019fe8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019eba:	695b      	ldr	r3, [r3, #20]
 8019ebc:	2b00      	cmp	r3, #0
 8019ebe:	d005      	beq.n	8019ecc <JPEG_GetDecodeColorConvertFunc+0xe8>
      {
        JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;  
 8019ec0:	4b49      	ldr	r3, [pc, #292]	; (8019fe8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019ec2:	695b      	ldr	r3, [r3, #20]
 8019ec4:	f1c3 0308 	rsb	r3, r3, #8
 8019ec8:	4a47      	ldr	r2, [pc, #284]	; (8019fe8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019eca:	6153      	str	r3, [r2, #20]
      }
      JPEG_ConvertorParams.H_factor = 8;
 8019ecc:	4b46      	ldr	r3, [pc, #280]	; (8019fe8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019ece:	2208      	movs	r2, #8
 8019ed0:	61da      	str	r2, [r3, #28]
      JPEG_ConvertorParams.V_factor  = 8;
 8019ed2:	4b45      	ldr	r3, [pc, #276]	; (8019fe8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019ed4:	2208      	movs	r2, #8
 8019ed6:	621a      	str	r2, [r3, #32]
 8019ed8:	e03d      	b.n	8019f56 <JPEG_GetDecodeColorConvertFunc+0x172>
    }   
  }
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_GRAYSCALE_COLORSPACE)
 8019eda:	4b43      	ldr	r3, [pc, #268]	; (8019fe8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019edc:	681b      	ldr	r3, [r3, #0]
 8019ede:	2b00      	cmp	r3, #0
 8019ee0:	d119      	bne.n	8019f16 <JPEG_GetDecodeColorConvertFunc+0x132>
  {
    *pFunction =  JPEG_MCU_Gray_ARGB_ConvertBlocks;
 8019ee2:	68bb      	ldr	r3, [r7, #8]
 8019ee4:	4a44      	ldr	r2, [pc, #272]	; (8019ff8 <JPEG_GetDecodeColorConvertFunc+0x214>)
 8019ee6:	601a      	str	r2, [r3, #0]

    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
 8019ee8:	4b3f      	ldr	r3, [pc, #252]	; (8019fe8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019eea:	689b      	ldr	r3, [r3, #8]
 8019eec:	f003 0307 	and.w	r3, r3, #7
 8019ef0:	4a3d      	ldr	r2, [pc, #244]	; (8019fe8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019ef2:	6153      	str	r3, [r2, #20]
      
    if(JPEG_ConvertorParams.LineOffset != 0)
 8019ef4:	4b3c      	ldr	r3, [pc, #240]	; (8019fe8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019ef6:	695b      	ldr	r3, [r3, #20]
 8019ef8:	2b00      	cmp	r3, #0
 8019efa:	d005      	beq.n	8019f08 <JPEG_GetDecodeColorConvertFunc+0x124>
    {
      JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;  
 8019efc:	4b3a      	ldr	r3, [pc, #232]	; (8019fe8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019efe:	695b      	ldr	r3, [r3, #20]
 8019f00:	f1c3 0308 	rsb	r3, r3, #8
 8019f04:	4a38      	ldr	r2, [pc, #224]	; (8019fe8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019f06:	6153      	str	r3, [r2, #20]
    }
    JPEG_ConvertorParams.H_factor = 8;
 8019f08:	4b37      	ldr	r3, [pc, #220]	; (8019fe8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019f0a:	2208      	movs	r2, #8
 8019f0c:	61da      	str	r2, [r3, #28]
    JPEG_ConvertorParams.V_factor  = 8;
 8019f0e:	4b36      	ldr	r3, [pc, #216]	; (8019fe8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019f10:	2208      	movs	r2, #8
 8019f12:	621a      	str	r2, [r3, #32]
 8019f14:	e01f      	b.n	8019f56 <JPEG_GetDecodeColorConvertFunc+0x172>
  }
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_CMYK_COLORSPACE)
 8019f16:	4b34      	ldr	r3, [pc, #208]	; (8019fe8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019f18:	681b      	ldr	r3, [r3, #0]
 8019f1a:	2b30      	cmp	r3, #48	; 0x30
 8019f1c:	d119      	bne.n	8019f52 <JPEG_GetDecodeColorConvertFunc+0x16e>
  {
    *pFunction =  JPEG_MCU_YCCK_ARGB_ConvertBlocks;
 8019f1e:	68bb      	ldr	r3, [r7, #8]
 8019f20:	4a36      	ldr	r2, [pc, #216]	; (8019ffc <JPEG_GetDecodeColorConvertFunc+0x218>)
 8019f22:	601a      	str	r2, [r3, #0]

    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
 8019f24:	4b30      	ldr	r3, [pc, #192]	; (8019fe8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019f26:	689b      	ldr	r3, [r3, #8]
 8019f28:	f003 0307 	and.w	r3, r3, #7
 8019f2c:	4a2e      	ldr	r2, [pc, #184]	; (8019fe8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019f2e:	6153      	str	r3, [r2, #20]
      
    if(JPEG_ConvertorParams.LineOffset != 0)
 8019f30:	4b2d      	ldr	r3, [pc, #180]	; (8019fe8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019f32:	695b      	ldr	r3, [r3, #20]
 8019f34:	2b00      	cmp	r3, #0
 8019f36:	d005      	beq.n	8019f44 <JPEG_GetDecodeColorConvertFunc+0x160>
    {
      JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;  
 8019f38:	4b2b      	ldr	r3, [pc, #172]	; (8019fe8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019f3a:	695b      	ldr	r3, [r3, #20]
 8019f3c:	f1c3 0308 	rsb	r3, r3, #8
 8019f40:	4a29      	ldr	r2, [pc, #164]	; (8019fe8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019f42:	6153      	str	r3, [r2, #20]
    }
    JPEG_ConvertorParams.H_factor = 8;
 8019f44:	4b28      	ldr	r3, [pc, #160]	; (8019fe8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019f46:	2208      	movs	r2, #8
 8019f48:	61da      	str	r2, [r3, #28]
    JPEG_ConvertorParams.V_factor  = 8;
 8019f4a:	4b27      	ldr	r3, [pc, #156]	; (8019fe8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019f4c:	2208      	movs	r2, #8
 8019f4e:	621a      	str	r2, [r3, #32]
 8019f50:	e001      	b.n	8019f56 <JPEG_GetDecodeColorConvertFunc+0x172>
  } 
  else
  {  
    return HAL_ERROR; /* Color space Not supported*/
 8019f52:	2301      	movs	r3, #1
 8019f54:	e042      	b.n	8019fdc <JPEG_GetDecodeColorConvertFunc+0x1f8>
  }
 
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
 8019f56:	4b24      	ldr	r3, [pc, #144]	; (8019fe8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019f58:	689a      	ldr	r2, [r3, #8]
 8019f5a:	4b23      	ldr	r3, [pc, #140]	; (8019fe8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019f5c:	695b      	ldr	r3, [r3, #20]
 8019f5e:	4413      	add	r3, r2
 8019f60:	4a21      	ldr	r2, [pc, #132]	; (8019fe8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019f62:	6253      	str	r3, [r2, #36]	; 0x24
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
 8019f64:	4b20      	ldr	r3, [pc, #128]	; (8019fe8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019f66:	689a      	ldr	r2, [r3, #8]
 8019f68:	4613      	mov	r3, r2
 8019f6a:	005b      	lsls	r3, r3, #1
 8019f6c:	4413      	add	r3, r2
 8019f6e:	4a1e      	ldr	r2, [pc, #120]	; (8019fe8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019f70:	6293      	str	r3, [r2, #40]	; 0x28
  
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
 8019f72:	4b1d      	ldr	r3, [pc, #116]	; (8019fe8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019f74:	689a      	ldr	r2, [r3, #8]
 8019f76:	4b1c      	ldr	r3, [pc, #112]	; (8019fe8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019f78:	69db      	ldr	r3, [r3, #28]
 8019f7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8019f7e:	617b      	str	r3, [r7, #20]
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
 8019f80:	4b19      	ldr	r3, [pc, #100]	; (8019fe8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019f82:	689b      	ldr	r3, [r3, #8]
 8019f84:	4a18      	ldr	r2, [pc, #96]	; (8019fe8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019f86:	69d2      	ldr	r2, [r2, #28]
 8019f88:	fbb3 f1f2 	udiv	r1, r3, r2
 8019f8c:	fb01 f202 	mul.w	r2, r1, r2
 8019f90:	1a9b      	subs	r3, r3, r2
 8019f92:	2b00      	cmp	r3, #0
 8019f94:	d002      	beq.n	8019f9c <JPEG_GetDecodeColorConvertFunc+0x1b8>
  {
    hMCU++; /*+1 for horizenatl incomplete MCU */                
 8019f96:	697b      	ldr	r3, [r7, #20]
 8019f98:	3301      	adds	r3, #1
 8019f9a:	617b      	str	r3, [r7, #20]
  }

  vMCU = (JPEG_ConvertorParams.ImageHeight / JPEG_ConvertorParams.V_factor);
 8019f9c:	4b12      	ldr	r3, [pc, #72]	; (8019fe8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019f9e:	68da      	ldr	r2, [r3, #12]
 8019fa0:	4b11      	ldr	r3, [pc, #68]	; (8019fe8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019fa2:	6a1b      	ldr	r3, [r3, #32]
 8019fa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8019fa8:	613b      	str	r3, [r7, #16]
  if((JPEG_ConvertorParams.ImageHeight % JPEG_ConvertorParams.V_factor) != 0)
 8019faa:	4b0f      	ldr	r3, [pc, #60]	; (8019fe8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019fac:	68db      	ldr	r3, [r3, #12]
 8019fae:	4a0e      	ldr	r2, [pc, #56]	; (8019fe8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019fb0:	6a12      	ldr	r2, [r2, #32]
 8019fb2:	fbb3 f1f2 	udiv	r1, r3, r2
 8019fb6:	fb01 f202 	mul.w	r2, r1, r2
 8019fba:	1a9b      	subs	r3, r3, r2
 8019fbc:	2b00      	cmp	r3, #0
 8019fbe:	d002      	beq.n	8019fc6 <JPEG_GetDecodeColorConvertFunc+0x1e2>
  {
    vMCU++; /*+1 for vertical incomplete MCU */                
 8019fc0:	693b      	ldr	r3, [r7, #16]
 8019fc2:	3301      	adds	r3, #1
 8019fc4:	613b      	str	r3, [r7, #16]
  }
  JPEG_ConvertorParams.MCU_Total_Nb = (hMCU * vMCU);
 8019fc6:	697b      	ldr	r3, [r7, #20]
 8019fc8:	693a      	ldr	r2, [r7, #16]
 8019fca:	fb02 f303 	mul.w	r3, r2, r3
 8019fce:	4a06      	ldr	r2, [pc, #24]	; (8019fe8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019fd0:	62d3      	str	r3, [r2, #44]	; 0x2c
  *ImageNbMCUs = JPEG_ConvertorParams.MCU_Total_Nb;
 8019fd2:	4b05      	ldr	r3, [pc, #20]	; (8019fe8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019fd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019fd6:	687b      	ldr	r3, [r7, #4]
 8019fd8:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8019fda:	2300      	movs	r3, #0
}
 8019fdc:	4618      	mov	r0, r3
 8019fde:	371c      	adds	r7, #28
 8019fe0:	46bd      	mov	sp, r7
 8019fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019fe6:	4770      	bx	lr
 8019fe8:	240251f4 	.word	0x240251f4
 8019fec:	080195ad 	.word	0x080195ad
 8019ff0:	08019845 	.word	0x08019845
 8019ff4:	08019a21 	.word	0x08019a21
 8019ff8:	08019ba1 	.word	0x08019ba1
 8019ffc:	08019c91 	.word	0x08019c91

0801a000 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 801a000:	8880      	ldrh	r0, [r0, #4]
 801a002:	4770      	bx	lr

0801a004 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 801a004:	b570      	push	{r4, r5, r6, lr}
 801a006:	6803      	ldr	r3, [r0, #0]
 801a008:	460c      	mov	r4, r1
 801a00a:	2100      	movs	r1, #0
 801a00c:	4605      	mov	r5, r0
 801a00e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a010:	4798      	blx	r3
 801a012:	4606      	mov	r6, r0
 801a014:	682b      	ldr	r3, [r5, #0]
 801a016:	4628      	mov	r0, r5
 801a018:	1ba4      	subs	r4, r4, r6
 801a01a:	6a1b      	ldr	r3, [r3, #32]
 801a01c:	b2a4      	uxth	r4, r4
 801a01e:	4798      	blx	r3
 801a020:	fbb4 f0f0 	udiv	r0, r4, r0
 801a024:	bd70      	pop	{r4, r5, r6, pc}

0801a026 <_ZN8touchgfx17AbstractPartition5clearEv>:
 801a026:	2300      	movs	r3, #0
 801a028:	8083      	strh	r3, [r0, #4]
 801a02a:	4770      	bx	lr

0801a02c <_ZN8touchgfx17AbstractPartition8allocateEt>:
 801a02c:	b510      	push	{r4, lr}
 801a02e:	6803      	ldr	r3, [r0, #0]
 801a030:	4604      	mov	r4, r0
 801a032:	8881      	ldrh	r1, [r0, #4]
 801a034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a036:	4798      	blx	r3
 801a038:	88a3      	ldrh	r3, [r4, #4]
 801a03a:	3301      	adds	r3, #1
 801a03c:	80a3      	strh	r3, [r4, #4]
 801a03e:	bd10      	pop	{r4, pc}

0801a040 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 801a040:	6803      	ldr	r3, [r0, #0]
 801a042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a044:	4718      	bx	r3

0801a046 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 801a046:	4770      	bx	lr

0801a048 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 801a048:	4a02      	ldr	r2, [pc, #8]	; (801a054 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 801a04a:	6002      	str	r2, [r0, #0]
 801a04c:	2200      	movs	r2, #0
 801a04e:	8082      	strh	r2, [r0, #4]
 801a050:	4770      	bx	lr
 801a052:	bf00      	nop
 801a054:	0802d200 	.word	0x0802d200

0801a058 <_ZN8touchgfx9Container13getFirstChildEv>:
 801a058:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801a05a:	4770      	bx	lr

0801a05c <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 801a05c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801a05e:	2000      	movs	r0, #0
 801a060:	b12b      	cbz	r3, 801a06e <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 801a062:	b920      	cbnz	r0, 801a06e <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 801a064:	1a5a      	subs	r2, r3, r1
 801a066:	699b      	ldr	r3, [r3, #24]
 801a068:	4250      	negs	r0, r2
 801a06a:	4150      	adcs	r0, r2
 801a06c:	e7f8      	b.n	801a060 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 801a06e:	4770      	bx	lr

0801a070 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 801a070:	2300      	movs	r3, #0
 801a072:	6148      	str	r0, [r1, #20]
 801a074:	618b      	str	r3, [r1, #24]
 801a076:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801a078:	b913      	cbnz	r3, 801a080 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 801a07a:	6281      	str	r1, [r0, #40]	; 0x28
 801a07c:	4770      	bx	lr
 801a07e:	4613      	mov	r3, r2
 801a080:	699a      	ldr	r2, [r3, #24]
 801a082:	2a00      	cmp	r2, #0
 801a084:	d1fb      	bne.n	801a07e <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 801a086:	6199      	str	r1, [r3, #24]
 801a088:	4770      	bx	lr

0801a08a <_ZN8touchgfx9Container9removeAllEv>:
 801a08a:	2200      	movs	r2, #0
 801a08c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801a08e:	b123      	cbz	r3, 801a09a <_ZN8touchgfx9Container9removeAllEv+0x10>
 801a090:	6999      	ldr	r1, [r3, #24]
 801a092:	6281      	str	r1, [r0, #40]	; 0x28
 801a094:	e9c3 2205 	strd	r2, r2, [r3, #20]
 801a098:	e7f8      	b.n	801a08c <_ZN8touchgfx9Container9removeAllEv+0x2>
 801a09a:	4770      	bx	lr

0801a09c <_ZN8touchgfx9Container6unlinkEv>:
 801a09c:	2300      	movs	r3, #0
 801a09e:	6283      	str	r3, [r0, #40]	; 0x28
 801a0a0:	4770      	bx	lr

0801a0a2 <_ZNK8touchgfx9Container12getSolidRectEv>:
 801a0a2:	2200      	movs	r2, #0
 801a0a4:	8002      	strh	r2, [r0, #0]
 801a0a6:	8042      	strh	r2, [r0, #2]
 801a0a8:	8082      	strh	r2, [r0, #4]
 801a0aa:	80c2      	strh	r2, [r0, #6]
 801a0ac:	4770      	bx	lr

0801a0ae <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 801a0ae:	b570      	push	{r4, r5, r6, lr}
 801a0b0:	460d      	mov	r5, r1
 801a0b2:	4616      	mov	r6, r2
 801a0b4:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801a0b6:	b13c      	cbz	r4, 801a0c8 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 801a0b8:	6823      	ldr	r3, [r4, #0]
 801a0ba:	4620      	mov	r0, r4
 801a0bc:	4632      	mov	r2, r6
 801a0be:	4629      	mov	r1, r5
 801a0c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a0c2:	4798      	blx	r3
 801a0c4:	69a4      	ldr	r4, [r4, #24]
 801a0c6:	e7f6      	b.n	801a0b6 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 801a0c8:	bd70      	pop	{r4, r5, r6, pc}

0801a0ca <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 801a0ca:	b538      	push	{r3, r4, r5, lr}
 801a0cc:	460d      	mov	r5, r1
 801a0ce:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801a0d0:	b134      	cbz	r4, 801a0e0 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 801a0d2:	682b      	ldr	r3, [r5, #0]
 801a0d4:	4621      	mov	r1, r4
 801a0d6:	4628      	mov	r0, r5
 801a0d8:	689b      	ldr	r3, [r3, #8]
 801a0da:	4798      	blx	r3
 801a0dc:	69a4      	ldr	r4, [r4, #24]
 801a0de:	e7f7      	b.n	801a0d0 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 801a0e0:	bd38      	pop	{r3, r4, r5, pc}

0801a0e2 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 801a0e2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801a0e4:	b19b      	cbz	r3, 801a10e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 801a0e6:	428b      	cmp	r3, r1
 801a0e8:	d109      	bne.n	801a0fe <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 801a0ea:	699a      	ldr	r2, [r3, #24]
 801a0ec:	2100      	movs	r1, #0
 801a0ee:	6159      	str	r1, [r3, #20]
 801a0f0:	6282      	str	r2, [r0, #40]	; 0x28
 801a0f2:	b902      	cbnz	r2, 801a0f6 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 801a0f4:	4770      	bx	lr
 801a0f6:	6199      	str	r1, [r3, #24]
 801a0f8:	4770      	bx	lr
 801a0fa:	4613      	mov	r3, r2
 801a0fc:	b13a      	cbz	r2, 801a10e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 801a0fe:	699a      	ldr	r2, [r3, #24]
 801a100:	428a      	cmp	r2, r1
 801a102:	d1fa      	bne.n	801a0fa <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 801a104:	698a      	ldr	r2, [r1, #24]
 801a106:	619a      	str	r2, [r3, #24]
 801a108:	2300      	movs	r3, #0
 801a10a:	e9c1 3305 	strd	r3, r3, [r1, #20]
 801a10e:	4770      	bx	lr

0801a110 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 801a110:	b410      	push	{r4}
 801a112:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801a114:	4604      	mov	r4, r0
 801a116:	b92b      	cbnz	r3, 801a124 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 801a118:	6803      	ldr	r3, [r0, #0]
 801a11a:	4611      	mov	r1, r2
 801a11c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a120:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801a122:	4718      	bx	r3
 801a124:	b941      	cbnz	r1, 801a138 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 801a126:	6193      	str	r3, [r2, #24]
 801a128:	6282      	str	r2, [r0, #40]	; 0x28
 801a12a:	6154      	str	r4, [r2, #20]
 801a12c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a130:	4770      	bx	lr
 801a132:	4603      	mov	r3, r0
 801a134:	2800      	cmp	r0, #0
 801a136:	d0f9      	beq.n	801a12c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 801a138:	4299      	cmp	r1, r3
 801a13a:	6998      	ldr	r0, [r3, #24]
 801a13c:	d1f9      	bne.n	801a132 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 801a13e:	6190      	str	r0, [r2, #24]
 801a140:	618a      	str	r2, [r1, #24]
 801a142:	e7f2      	b.n	801a12a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

0801a144 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 801a144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a148:	461f      	mov	r7, r3
 801a14a:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 801a14e:	460d      	mov	r5, r1
 801a150:	4616      	mov	r6, r2
 801a152:	b103      	cbz	r3, 801a156 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 801a154:	6038      	str	r0, [r7, #0]
 801a156:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801a158:	b314      	cbz	r4, 801a1a0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 801a15a:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 801a15e:	b1eb      	cbz	r3, 801a19c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 801a160:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801a164:	428d      	cmp	r5, r1
 801a166:	db19      	blt.n	801a19c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 801a168:	b289      	uxth	r1, r1
 801a16a:	8923      	ldrh	r3, [r4, #8]
 801a16c:	440b      	add	r3, r1
 801a16e:	b21b      	sxth	r3, r3
 801a170:	429d      	cmp	r5, r3
 801a172:	da13      	bge.n	801a19c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 801a174:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801a178:	4296      	cmp	r6, r2
 801a17a:	db0f      	blt.n	801a19c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 801a17c:	b292      	uxth	r2, r2
 801a17e:	8963      	ldrh	r3, [r4, #10]
 801a180:	4413      	add	r3, r2
 801a182:	b21b      	sxth	r3, r3
 801a184:	429e      	cmp	r6, r3
 801a186:	da09      	bge.n	801a19c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 801a188:	6823      	ldr	r3, [r4, #0]
 801a18a:	1ab2      	subs	r2, r6, r2
 801a18c:	1a69      	subs	r1, r5, r1
 801a18e:	4620      	mov	r0, r4
 801a190:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
 801a194:	b212      	sxth	r2, r2
 801a196:	463b      	mov	r3, r7
 801a198:	b209      	sxth	r1, r1
 801a19a:	47c0      	blx	r8
 801a19c:	69a4      	ldr	r4, [r4, #24]
 801a19e:	e7db      	b.n	801a158 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 801a1a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a1a4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 801a1a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a1a8:	4c6d      	ldr	r4, [pc, #436]	; (801a360 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 801a1aa:	b0a1      	sub	sp, #132	; 0x84
 801a1ac:	4606      	mov	r6, r0
 801a1ae:	6824      	ldr	r4, [r4, #0]
 801a1b0:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 801a1b2:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 801a1b6:	2400      	movs	r4, #0
 801a1b8:	9303      	str	r3, [sp, #12]
 801a1ba:	802c      	strh	r4, [r5, #0]
 801a1bc:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 801a1be:	802c      	strh	r4, [r5, #0]
 801a1c0:	601c      	str	r4, [r3, #0]
 801a1c2:	e9cd 1201 	strd	r1, r2, [sp, #4]
 801a1c6:	f7ff ffbd 	bl	801a144 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801a1ca:	f1b9 0f03 	cmp.w	r9, #3
 801a1ce:	f340 80c1 	ble.w	801a354 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 801a1d2:	4631      	mov	r1, r6
 801a1d4:	a80c      	add	r0, sp, #48	; 0x30
 801a1d6:	f004 fd55 	bl	801ec84 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a1da:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 801a1de:	9306      	str	r3, [sp, #24]
 801a1e0:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801a1e4:	9307      	str	r3, [sp, #28]
 801a1e6:	9b03      	ldr	r3, [sp, #12]
 801a1e8:	f8d3 a000 	ldr.w	sl, [r3]
 801a1ec:	f1ba 0f00 	cmp.w	sl, #0
 801a1f0:	f000 80b3 	beq.w	801a35a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 801a1f4:	4651      	mov	r1, sl
 801a1f6:	a810      	add	r0, sp, #64	; 0x40
 801a1f8:	f004 fd44 	bl	801ec84 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a1fc:	2002      	movs	r0, #2
 801a1fe:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 801a202:	9b01      	ldr	r3, [sp, #4]
 801a204:	9a06      	ldr	r2, [sp, #24]
 801a206:	fb91 f1f0 	sdiv	r1, r1, r0
 801a20a:	189d      	adds	r5, r3, r2
 801a20c:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 801a210:	9a07      	ldr	r2, [sp, #28]
 801a212:	4419      	add	r1, r3
 801a214:	9b02      	ldr	r3, [sp, #8]
 801a216:	4413      	add	r3, r2
 801a218:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 801a21c:	1a6d      	subs	r5, r5, r1
 801a21e:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 801a222:	fb92 f2f0 	sdiv	r2, r2, r0
 801a226:	440a      	add	r2, r1
 801a228:	1a9b      	subs	r3, r3, r2
 801a22a:	435b      	muls	r3, r3
 801a22c:	fb05 3505 	mla	r5, r5, r5, r3
 801a230:	4f4c      	ldr	r7, [pc, #304]	; (801a364 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 801a232:	ac10      	add	r4, sp, #64	; 0x40
 801a234:	f1b9 0f0c 	cmp.w	r9, #12
 801a238:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801a23a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801a23c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801a23e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801a240:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801a242:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801a244:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 801a248:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801a24c:	f04f 0303 	mov.w	r3, #3
 801a250:	bfd8      	it	le
 801a252:	f109 32ff 	addle.w	r2, r9, #4294967295
 801a256:	f04f 0400 	mov.w	r4, #0
 801a25a:	f8cd 9000 	str.w	r9, [sp]
 801a25e:	bfcc      	ite	gt
 801a260:	4698      	movgt	r8, r3
 801a262:	fb92 f8f3 	sdivle	r8, r2, r3
 801a266:	1c63      	adds	r3, r4, #1
 801a268:	aa10      	add	r2, sp, #64	; 0x40
 801a26a:	f004 0401 	and.w	r4, r4, #1
 801a26e:	f04f 0b00 	mov.w	fp, #0
 801a272:	9308      	str	r3, [sp, #32]
 801a274:	9b00      	ldr	r3, [sp, #0]
 801a276:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 801a27a:	fb93 f3f8 	sdiv	r3, r3, r8
 801a27e:	3404      	adds	r4, #4
 801a280:	b29b      	uxth	r3, r3
 801a282:	9304      	str	r3, [sp, #16]
 801a284:	9a04      	ldr	r2, [sp, #16]
 801a286:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801a28a:	fb13 f302 	smulbb	r3, r3, r2
 801a28e:	9a01      	ldr	r2, [sp, #4]
 801a290:	b29b      	uxth	r3, r3
 801a292:	1899      	adds	r1, r3, r2
 801a294:	9305      	str	r3, [sp, #20]
 801a296:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 801a29a:	b209      	sxth	r1, r1
 801a29c:	4299      	cmp	r1, r3
 801a29e:	db4d      	blt.n	801a33c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 801a2a0:	8932      	ldrh	r2, [r6, #8]
 801a2a2:	4413      	add	r3, r2
 801a2a4:	b21b      	sxth	r3, r3
 801a2a6:	4299      	cmp	r1, r3
 801a2a8:	da48      	bge.n	801a33c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 801a2aa:	9b04      	ldr	r3, [sp, #16]
 801a2ac:	6827      	ldr	r7, [r4, #0]
 801a2ae:	fb17 f703 	smulbb	r7, r7, r3
 801a2b2:	9b02      	ldr	r3, [sp, #8]
 801a2b4:	b2bf      	uxth	r7, r7
 801a2b6:	18fa      	adds	r2, r7, r3
 801a2b8:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 801a2bc:	b212      	sxth	r2, r2
 801a2be:	429a      	cmp	r2, r3
 801a2c0:	db3c      	blt.n	801a33c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 801a2c2:	8970      	ldrh	r0, [r6, #10]
 801a2c4:	4403      	add	r3, r0
 801a2c6:	b21b      	sxth	r3, r3
 801a2c8:	429a      	cmp	r2, r3
 801a2ca:	da37      	bge.n	801a33c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 801a2cc:	2300      	movs	r3, #0
 801a2ce:	4630      	mov	r0, r6
 801a2d0:	930b      	str	r3, [sp, #44]	; 0x2c
 801a2d2:	ab0b      	add	r3, sp, #44	; 0x2c
 801a2d4:	f7ff ff36 	bl	801a144 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801a2d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801a2da:	b37a      	cbz	r2, 801a33c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 801a2dc:	4552      	cmp	r2, sl
 801a2de:	d02d      	beq.n	801a33c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 801a2e0:	4611      	mov	r1, r2
 801a2e2:	a80e      	add	r0, sp, #56	; 0x38
 801a2e4:	9209      	str	r2, [sp, #36]	; 0x24
 801a2e6:	f004 fccd 	bl	801ec84 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a2ea:	f04f 0e02 	mov.w	lr, #2
 801a2ee:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 801a2f2:	9a06      	ldr	r2, [sp, #24]
 801a2f4:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 801a2f8:	9b01      	ldr	r3, [sp, #4]
 801a2fa:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 801a2fe:	4413      	add	r3, r2
 801a300:	9a07      	ldr	r2, [sp, #28]
 801a302:	fb91 f1fe 	sdiv	r1, r1, lr
 801a306:	fb9c fcfe 	sdiv	ip, ip, lr
 801a30a:	4401      	add	r1, r0
 801a30c:	1a58      	subs	r0, r3, r1
 801a30e:	9b02      	ldr	r3, [sp, #8]
 801a310:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 801a314:	4413      	add	r3, r2
 801a316:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a318:	448c      	add	ip, r1
 801a31a:	eba3 030c 	sub.w	r3, r3, ip
 801a31e:	435b      	muls	r3, r3
 801a320:	fb00 3300 	mla	r3, r0, r0, r3
 801a324:	42ab      	cmp	r3, r5
 801a326:	d208      	bcs.n	801a33a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 801a328:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801a32a:	461d      	mov	r5, r3
 801a32c:	9803      	ldr	r0, [sp, #12]
 801a32e:	6001      	str	r1, [r0, #0]
 801a330:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801a332:	9805      	ldr	r0, [sp, #20]
 801a334:	8008      	strh	r0, [r1, #0]
 801a336:	992b      	ldr	r1, [sp, #172]	; 0xac
 801a338:	800f      	strh	r7, [r1, #0]
 801a33a:	4692      	mov	sl, r2
 801a33c:	f10b 0b01 	add.w	fp, fp, #1
 801a340:	3408      	adds	r4, #8
 801a342:	f1bb 0f04 	cmp.w	fp, #4
 801a346:	d19d      	bne.n	801a284 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 801a348:	9b00      	ldr	r3, [sp, #0]
 801a34a:	9c08      	ldr	r4, [sp, #32]
 801a34c:	444b      	add	r3, r9
 801a34e:	4544      	cmp	r4, r8
 801a350:	9300      	str	r3, [sp, #0]
 801a352:	d188      	bne.n	801a266 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 801a354:	b021      	add	sp, #132	; 0x84
 801a356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a35a:	f04f 35ff 	mov.w	r5, #4294967295
 801a35e:	e767      	b.n	801a230 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 801a360:	24026240 	.word	0x24026240
 801a364:	0802be40 	.word	0x0802be40

0801a368 <_ZN8touchgfx4RectaNERKS0_>:
 801a368:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a36c:	f9b1 7000 	ldrsh.w	r7, [r1]
 801a370:	888c      	ldrh	r4, [r1, #4]
 801a372:	f9b0 9000 	ldrsh.w	r9, [r0]
 801a376:	443c      	add	r4, r7
 801a378:	b2a4      	uxth	r4, r4
 801a37a:	fa0f f884 	sxth.w	r8, r4
 801a37e:	45c1      	cmp	r9, r8
 801a380:	da2f      	bge.n	801a3e2 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801a382:	8882      	ldrh	r2, [r0, #4]
 801a384:	444a      	add	r2, r9
 801a386:	b292      	uxth	r2, r2
 801a388:	fa0f fe82 	sxth.w	lr, r2
 801a38c:	4577      	cmp	r7, lr
 801a38e:	da28      	bge.n	801a3e2 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801a390:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 801a394:	88cb      	ldrh	r3, [r1, #6]
 801a396:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 801a39a:	442b      	add	r3, r5
 801a39c:	b21b      	sxth	r3, r3
 801a39e:	429e      	cmp	r6, r3
 801a3a0:	da1f      	bge.n	801a3e2 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801a3a2:	88c3      	ldrh	r3, [r0, #6]
 801a3a4:	4433      	add	r3, r6
 801a3a6:	b29b      	uxth	r3, r3
 801a3a8:	fa0f fc83 	sxth.w	ip, r3
 801a3ac:	4565      	cmp	r5, ip
 801a3ae:	da18      	bge.n	801a3e2 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801a3b0:	454f      	cmp	r7, r9
 801a3b2:	bfb8      	it	lt
 801a3b4:	464f      	movlt	r7, r9
 801a3b6:	42b5      	cmp	r5, r6
 801a3b8:	bfb8      	it	lt
 801a3ba:	4635      	movlt	r5, r6
 801a3bc:	45f0      	cmp	r8, lr
 801a3be:	bfd8      	it	le
 801a3c0:	4622      	movle	r2, r4
 801a3c2:	1bd2      	subs	r2, r2, r7
 801a3c4:	8082      	strh	r2, [r0, #4]
 801a3c6:	884a      	ldrh	r2, [r1, #2]
 801a3c8:	88c9      	ldrh	r1, [r1, #6]
 801a3ca:	8007      	strh	r7, [r0, #0]
 801a3cc:	440a      	add	r2, r1
 801a3ce:	8045      	strh	r5, [r0, #2]
 801a3d0:	b292      	uxth	r2, r2
 801a3d2:	b211      	sxth	r1, r2
 801a3d4:	458c      	cmp	ip, r1
 801a3d6:	bfa8      	it	ge
 801a3d8:	4613      	movge	r3, r2
 801a3da:	1b5b      	subs	r3, r3, r5
 801a3dc:	80c3      	strh	r3, [r0, #6]
 801a3de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a3e2:	2300      	movs	r3, #0
 801a3e4:	8003      	strh	r3, [r0, #0]
 801a3e6:	8043      	strh	r3, [r0, #2]
 801a3e8:	8083      	strh	r3, [r0, #4]
 801a3ea:	80c3      	strh	r3, [r0, #6]
 801a3ec:	e7f7      	b.n	801a3de <_ZN8touchgfx4RectaNERKS0_+0x76>

0801a3ee <_ZNK8touchgfx4Rect7isEmptyEv>:
 801a3ee:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801a3f2:	2b00      	cmp	r3, #0
 801a3f4:	dd06      	ble.n	801a404 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 801a3f6:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 801a3fa:	2800      	cmp	r0, #0
 801a3fc:	bfcc      	ite	gt
 801a3fe:	2000      	movgt	r0, #0
 801a400:	2001      	movle	r0, #1
 801a402:	4770      	bx	lr
 801a404:	2001      	movs	r0, #1
 801a406:	4770      	bx	lr

0801a408 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 801a408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a40c:	2300      	movs	r3, #0
 801a40e:	4604      	mov	r4, r0
 801a410:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 801a412:	8003      	strh	r3, [r0, #0]
 801a414:	8043      	strh	r3, [r0, #2]
 801a416:	8083      	strh	r3, [r0, #4]
 801a418:	80c3      	strh	r3, [r0, #6]
 801a41a:	2d00      	cmp	r5, #0
 801a41c:	d040      	beq.n	801a4a0 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 801a41e:	1d28      	adds	r0, r5, #4
 801a420:	f7ff ffe5 	bl	801a3ee <_ZNK8touchgfx4Rect7isEmptyEv>
 801a424:	b988      	cbnz	r0, 801a44a <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 801a426:	4620      	mov	r0, r4
 801a428:	f7ff ffe1 	bl	801a3ee <_ZNK8touchgfx4Rect7isEmptyEv>
 801a42c:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 801a430:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801a434:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 801a438:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 801a43c:	b138      	cbz	r0, 801a44e <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 801a43e:	8022      	strh	r2, [r4, #0]
 801a440:	8063      	strh	r3, [r4, #2]
 801a442:	f8a4 e004 	strh.w	lr, [r4, #4]
 801a446:	f8a4 c006 	strh.w	ip, [r4, #6]
 801a44a:	69ad      	ldr	r5, [r5, #24]
 801a44c:	e7e5      	b.n	801a41a <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 801a44e:	f9b4 0000 	ldrsh.w	r0, [r4]
 801a452:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801a456:	4290      	cmp	r0, r2
 801a458:	4607      	mov	r7, r0
 801a45a:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 801a45e:	460e      	mov	r6, r1
 801a460:	bfa8      	it	ge
 801a462:	4617      	movge	r7, r2
 801a464:	4299      	cmp	r1, r3
 801a466:	4472      	add	r2, lr
 801a468:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 801a46c:	bfa8      	it	ge
 801a46e:	461e      	movge	r6, r3
 801a470:	4440      	add	r0, r8
 801a472:	4471      	add	r1, lr
 801a474:	4463      	add	r3, ip
 801a476:	b200      	sxth	r0, r0
 801a478:	8027      	strh	r7, [r4, #0]
 801a47a:	b212      	sxth	r2, r2
 801a47c:	8066      	strh	r6, [r4, #2]
 801a47e:	b209      	sxth	r1, r1
 801a480:	b21b      	sxth	r3, r3
 801a482:	4290      	cmp	r0, r2
 801a484:	bfac      	ite	ge
 801a486:	ebc7 0200 	rsbge	r2, r7, r0
 801a48a:	ebc7 0202 	rsblt	r2, r7, r2
 801a48e:	4299      	cmp	r1, r3
 801a490:	bfac      	ite	ge
 801a492:	ebc6 0301 	rsbge	r3, r6, r1
 801a496:	ebc6 0303 	rsblt	r3, r6, r3
 801a49a:	80a2      	strh	r2, [r4, #4]
 801a49c:	80e3      	strh	r3, [r4, #6]
 801a49e:	e7d4      	b.n	801a44a <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 801a4a0:	4620      	mov	r0, r4
 801a4a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a4a6 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 801a4a6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801a4aa:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 801a4ae:	b383      	cbz	r3, 801a512 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 801a4b0:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801a4b2:	b374      	cbz	r4, 801a512 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 801a4b4:	f9b1 5000 	ldrsh.w	r5, [r1]
 801a4b8:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 801a4bc:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 801a4c0:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 801a4c4:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 801a4c8:	b303      	cbz	r3, 801a50c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 801a4ca:	4668      	mov	r0, sp
 801a4cc:	1d21      	adds	r1, r4, #4
 801a4ce:	f8ad 5000 	strh.w	r5, [sp]
 801a4d2:	f8ad 6002 	strh.w	r6, [sp, #2]
 801a4d6:	f8ad 7004 	strh.w	r7, [sp, #4]
 801a4da:	f8ad 8006 	strh.w	r8, [sp, #6]
 801a4de:	f7ff ff43 	bl	801a368 <_ZN8touchgfx4RectaNERKS0_>
 801a4e2:	4668      	mov	r0, sp
 801a4e4:	f7ff ff83 	bl	801a3ee <_ZNK8touchgfx4Rect7isEmptyEv>
 801a4e8:	b980      	cbnz	r0, 801a50c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 801a4ea:	f8bd 3000 	ldrh.w	r3, [sp]
 801a4ee:	4669      	mov	r1, sp
 801a4f0:	88a2      	ldrh	r2, [r4, #4]
 801a4f2:	4620      	mov	r0, r4
 801a4f4:	1a9b      	subs	r3, r3, r2
 801a4f6:	88e2      	ldrh	r2, [r4, #6]
 801a4f8:	f8ad 3000 	strh.w	r3, [sp]
 801a4fc:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801a500:	1a9b      	subs	r3, r3, r2
 801a502:	f8ad 3002 	strh.w	r3, [sp, #2]
 801a506:	6823      	ldr	r3, [r4, #0]
 801a508:	689b      	ldr	r3, [r3, #8]
 801a50a:	4798      	blx	r3
 801a50c:	69a4      	ldr	r4, [r4, #24]
 801a50e:	2c00      	cmp	r4, #0
 801a510:	d1d8      	bne.n	801a4c4 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 801a512:	b002      	add	sp, #8
 801a514:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a518 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 801a518:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a51a:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 801a51e:	460d      	mov	r5, r1
 801a520:	4616      	mov	r6, r2
 801a522:	b323      	cbz	r3, 801a56e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 801a524:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801a526:	b314      	cbz	r4, 801a56e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 801a528:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 801a52c:	b1eb      	cbz	r3, 801a56a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 801a52e:	6828      	ldr	r0, [r5, #0]
 801a530:	466b      	mov	r3, sp
 801a532:	6869      	ldr	r1, [r5, #4]
 801a534:	c303      	stmia	r3!, {r0, r1}
 801a536:	4668      	mov	r0, sp
 801a538:	1d21      	adds	r1, r4, #4
 801a53a:	f7ff ff15 	bl	801a368 <_ZN8touchgfx4RectaNERKS0_>
 801a53e:	4668      	mov	r0, sp
 801a540:	f7ff ff55 	bl	801a3ee <_ZNK8touchgfx4Rect7isEmptyEv>
 801a544:	b988      	cbnz	r0, 801a56a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 801a546:	f8bd 3000 	ldrh.w	r3, [sp]
 801a54a:	4669      	mov	r1, sp
 801a54c:	88a2      	ldrh	r2, [r4, #4]
 801a54e:	4620      	mov	r0, r4
 801a550:	1a9b      	subs	r3, r3, r2
 801a552:	88e2      	ldrh	r2, [r4, #6]
 801a554:	f8ad 3000 	strh.w	r3, [sp]
 801a558:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801a55c:	1a9b      	subs	r3, r3, r2
 801a55e:	4632      	mov	r2, r6
 801a560:	f8ad 3002 	strh.w	r3, [sp, #2]
 801a564:	6823      	ldr	r3, [r4, #0]
 801a566:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a568:	4798      	blx	r3
 801a56a:	69a4      	ldr	r4, [r4, #24]
 801a56c:	e7db      	b.n	801a526 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 801a56e:	b002      	add	sp, #8
 801a570:	bd70      	pop	{r4, r5, r6, pc}

0801a572 <_ZN8touchgfx3HAL15InvalidateCacheEv>:
 801a572:	4770      	bx	lr

0801a574 <_ZN8touchgfx3HAL10FlushCacheEv>:
 801a574:	4770      	bx	lr

0801a576 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 801a576:	6803      	ldr	r3, [r0, #0]
 801a578:	b513      	push	{r0, r1, r4, lr}
 801a57a:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
 801a57e:	2300      	movs	r3, #0
 801a580:	e9cd 3300 	strd	r3, r3, [sp]
 801a584:	466b      	mov	r3, sp
 801a586:	47a0      	blx	r4
 801a588:	b002      	add	sp, #8
 801a58a:	bd10      	pop	{r4, pc}

0801a58c <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 801a58c:	2301      	movs	r3, #1
 801a58e:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 801a592:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 801a596:	4770      	bx	lr

0801a598 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 801a598:	2301      	movs	r3, #1
 801a59a:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 801a59e:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 801a5a2:	4770      	bx	lr

0801a5a4 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 801a5a4:	6843      	ldr	r3, [r0, #4]
 801a5a6:	2201      	movs	r2, #1
 801a5a8:	725a      	strb	r2, [r3, #9]
 801a5aa:	6840      	ldr	r0, [r0, #4]
 801a5ac:	6803      	ldr	r3, [r0, #0]
 801a5ae:	691b      	ldr	r3, [r3, #16]
 801a5b0:	4718      	bx	r3

0801a5b2 <_ZN8touchgfx3HAL8flushDMAEv>:
 801a5b2:	6840      	ldr	r0, [r0, #4]
 801a5b4:	6803      	ldr	r3, [r0, #0]
 801a5b6:	689b      	ldr	r3, [r3, #8]
 801a5b8:	4718      	bx	r3

0801a5ba <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 801a5ba:	b530      	push	{r4, r5, lr}
 801a5bc:	b08b      	sub	sp, #44	; 0x2c
 801a5be:	6804      	ldr	r4, [r0, #0]
 801a5c0:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 801a5c4:	9509      	str	r5, [sp, #36]	; 0x24
 801a5c6:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 801a5ca:	9508      	str	r5, [sp, #32]
 801a5cc:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 801a5d0:	9507      	str	r5, [sp, #28]
 801a5d2:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 801a5d6:	9506      	str	r5, [sp, #24]
 801a5d8:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 801a5dc:	9505      	str	r5, [sp, #20]
 801a5de:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 801a5e2:	9504      	str	r5, [sp, #16]
 801a5e4:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 801a5e8:	9503      	str	r5, [sp, #12]
 801a5ea:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 801a5ee:	9502      	str	r5, [sp, #8]
 801a5f0:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 801a5f4:	e9cd 3500 	strd	r3, r5, [sp]
 801a5f8:	4613      	mov	r3, r2
 801a5fa:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 801a5fc:	2200      	movs	r2, #0
 801a5fe:	47a0      	blx	r4
 801a600:	b00b      	add	sp, #44	; 0x2c
 801a602:	bd30      	pop	{r4, r5, pc}

0801a604 <_ZN8touchgfx3HAL10beginFrameEv>:
 801a604:	4b04      	ldr	r3, [pc, #16]	; (801a618 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 801a606:	781b      	ldrb	r3, [r3, #0]
 801a608:	b123      	cbz	r3, 801a614 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 801a60a:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 801a60e:	f080 0001 	eor.w	r0, r0, #1
 801a612:	4770      	bx	lr
 801a614:	2001      	movs	r0, #1
 801a616:	4770      	bx	lr
 801a618:	2402623e 	.word	0x2402623e

0801a61c <_ZN8touchgfx3HAL8endFrameEv>:
 801a61c:	b510      	push	{r4, lr}
 801a61e:	4604      	mov	r4, r0
 801a620:	6840      	ldr	r0, [r0, #4]
 801a622:	6803      	ldr	r3, [r0, #0]
 801a624:	689b      	ldr	r3, [r3, #8]
 801a626:	4798      	blx	r3
 801a628:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 801a62c:	b113      	cbz	r3, 801a634 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 801a62e:	2301      	movs	r3, #1
 801a630:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 801a634:	bd10      	pop	{r4, pc}

0801a636 <_ZN8touchgfx3HAL10initializeEv>:
 801a636:	b510      	push	{r4, lr}
 801a638:	4604      	mov	r4, r0
 801a63a:	f7e9 f9bd 	bl	80039b8 <_ZN8touchgfx10OSWrappers10initializeEv>
 801a63e:	f7e7 fba3 	bl	8001d88 <_ZN8touchgfx4GPIO4initEv>
 801a642:	6860      	ldr	r0, [r4, #4]
 801a644:	6803      	ldr	r3, [r0, #0]
 801a646:	68db      	ldr	r3, [r3, #12]
 801a648:	4798      	blx	r3
 801a64a:	68e0      	ldr	r0, [r4, #12]
 801a64c:	6803      	ldr	r3, [r0, #0]
 801a64e:	689b      	ldr	r3, [r3, #8]
 801a650:	4798      	blx	r3
 801a652:	6823      	ldr	r3, [r4, #0]
 801a654:	4620      	mov	r0, r4
 801a656:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a658:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a65c:	4718      	bx	r3

0801a65e <_ZN8touchgfx3HAL9taskEntryEv>:
 801a65e:	b508      	push	{r3, lr}
 801a660:	6803      	ldr	r3, [r0, #0]
 801a662:	4604      	mov	r4, r0
 801a664:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801a668:	4798      	blx	r3
 801a66a:	6823      	ldr	r3, [r4, #0]
 801a66c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801a66e:	4620      	mov	r0, r4
 801a670:	4798      	blx	r3
 801a672:	f7e9 fa17 	bl	8003aa4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 801a676:	6823      	ldr	r3, [r4, #0]
 801a678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a67a:	e7f8      	b.n	801a66e <_ZN8touchgfx3HAL9taskEntryEv+0x10>

0801a67c <_ZN8touchgfx3HAL4tickEv>:
 801a67c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801a67e:	6803      	ldr	r3, [r0, #0]
 801a680:	4604      	mov	r4, r0
 801a682:	4d5b      	ldr	r5, [pc, #364]	; (801a7f0 <_ZN8touchgfx3HAL4tickEv+0x174>)
 801a684:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801a688:	4798      	blx	r3
 801a68a:	2800      	cmp	r0, #0
 801a68c:	f000 8095 	beq.w	801a7ba <_ZN8touchgfx3HAL4tickEv+0x13e>
 801a690:	2001      	movs	r0, #1
 801a692:	2600      	movs	r6, #0
 801a694:	f7e7 fb9e 	bl	8001dd4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 801a698:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 801a69c:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 801a6a0:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 801a6a4:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 801a6a8:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 801a6ac:	b133      	cbz	r3, 801a6bc <_ZN8touchgfx3HAL4tickEv+0x40>
 801a6ae:	6823      	ldr	r3, [r4, #0]
 801a6b0:	4620      	mov	r0, r4
 801a6b2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 801a6b6:	4798      	blx	r3
 801a6b8:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 801a6bc:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 801a6c0:	2601      	movs	r6, #1
 801a6c2:	6862      	ldr	r2, [r4, #4]
 801a6c4:	f083 0301 	eor.w	r3, r3, #1
 801a6c8:	702e      	strb	r6, [r5, #0]
 801a6ca:	7253      	strb	r3, [r2, #9]
 801a6cc:	f003 f9d2 	bl	801da74 <_ZN8touchgfx11Application11getInstanceEv>
 801a6d0:	6803      	ldr	r3, [r0, #0]
 801a6d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a6d4:	4798      	blx	r3
 801a6d6:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 801a6da:	b90b      	cbnz	r3, 801a6e0 <_ZN8touchgfx3HAL4tickEv+0x64>
 801a6dc:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 801a6e0:	f003 f9c8 	bl	801da74 <_ZN8touchgfx11Application11getInstanceEv>
 801a6e4:	6803      	ldr	r3, [r0, #0]
 801a6e6:	695b      	ldr	r3, [r3, #20]
 801a6e8:	4798      	blx	r3
 801a6ea:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a6ec:	6803      	ldr	r3, [r0, #0]
 801a6ee:	691b      	ldr	r3, [r3, #16]
 801a6f0:	4798      	blx	r3
 801a6f2:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 801a6f6:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 801a6fa:	3b01      	subs	r3, #1
 801a6fc:	b2db      	uxtb	r3, r3
 801a6fe:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 801a702:	b10a      	cbz	r2, 801a708 <_ZN8touchgfx3HAL4tickEv+0x8c>
 801a704:	2b00      	cmp	r3, #0
 801a706:	d1eb      	bne.n	801a6e0 <_ZN8touchgfx3HAL4tickEv+0x64>
 801a708:	4a3a      	ldr	r2, [pc, #232]	; (801a7f4 <_ZN8touchgfx3HAL4tickEv+0x178>)
 801a70a:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 801a70e:	7813      	ldrb	r3, [r2, #0]
 801a710:	3301      	adds	r3, #1
 801a712:	b25b      	sxtb	r3, r3
 801a714:	4299      	cmp	r1, r3
 801a716:	7013      	strb	r3, [r2, #0]
 801a718:	dc10      	bgt.n	801a73c <_ZN8touchgfx3HAL4tickEv+0xc0>
 801a71a:	2300      	movs	r3, #0
 801a71c:	68e0      	ldr	r0, [r4, #12]
 801a71e:	a902      	add	r1, sp, #8
 801a720:	7013      	strb	r3, [r2, #0]
 801a722:	aa03      	add	r2, sp, #12
 801a724:	6803      	ldr	r3, [r0, #0]
 801a726:	68db      	ldr	r3, [r3, #12]
 801a728:	4798      	blx	r3
 801a72a:	6823      	ldr	r3, [r4, #0]
 801a72c:	2800      	cmp	r0, #0
 801a72e:	d050      	beq.n	801a7d2 <_ZN8touchgfx3HAL4tickEv+0x156>
 801a730:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 801a734:	4620      	mov	r0, r4
 801a736:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801a73a:	4798      	blx	r3
 801a73c:	2300      	movs	r3, #0
 801a73e:	6960      	ldr	r0, [r4, #20]
 801a740:	f88d 3007 	strb.w	r3, [sp, #7]
 801a744:	b158      	cbz	r0, 801a75e <_ZN8touchgfx3HAL4tickEv+0xe2>
 801a746:	6803      	ldr	r3, [r0, #0]
 801a748:	f10d 0107 	add.w	r1, sp, #7
 801a74c:	68db      	ldr	r3, [r3, #12]
 801a74e:	4798      	blx	r3
 801a750:	b128      	cbz	r0, 801a75e <_ZN8touchgfx3HAL4tickEv+0xe2>
 801a752:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a754:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801a758:	6803      	ldr	r3, [r0, #0]
 801a75a:	68db      	ldr	r3, [r3, #12]
 801a75c:	4798      	blx	r3
 801a75e:	f104 001c 	add.w	r0, r4, #28
 801a762:	f00d ffb1 	bl	80286c8 <_ZN8touchgfx8Gestures4tickEv>
 801a766:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 801a76a:	b30b      	cbz	r3, 801a7b0 <_ZN8touchgfx3HAL4tickEv+0x134>
 801a76c:	6920      	ldr	r0, [r4, #16]
 801a76e:	6803      	ldr	r3, [r0, #0]
 801a770:	691b      	ldr	r3, [r3, #16]
 801a772:	4798      	blx	r3
 801a774:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801a776:	4606      	mov	r6, r0
 801a778:	b903      	cbnz	r3, 801a77c <_ZN8touchgfx3HAL4tickEv+0x100>
 801a77a:	6720      	str	r0, [r4, #112]	; 0x70
 801a77c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801a77e:	4a1e      	ldr	r2, [pc, #120]	; (801a7f8 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 801a780:	1af3      	subs	r3, r6, r3
 801a782:	4293      	cmp	r3, r2
 801a784:	d914      	bls.n	801a7b0 <_ZN8touchgfx3HAL4tickEv+0x134>
 801a786:	6920      	ldr	r0, [r4, #16]
 801a788:	6803      	ldr	r3, [r0, #0]
 801a78a:	699b      	ldr	r3, [r3, #24]
 801a78c:	4798      	blx	r3
 801a78e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801a790:	2264      	movs	r2, #100	; 0x64
 801a792:	1af3      	subs	r3, r6, r3
 801a794:	fbb3 f3f2 	udiv	r3, r3, r2
 801a798:	fbb0 f0f3 	udiv	r0, r0, r3
 801a79c:	2800      	cmp	r0, #0
 801a79e:	dc1d      	bgt.n	801a7dc <_ZN8touchgfx3HAL4tickEv+0x160>
 801a7a0:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 801a7a4:	6920      	ldr	r0, [r4, #16]
 801a7a6:	2100      	movs	r1, #0
 801a7a8:	6803      	ldr	r3, [r0, #0]
 801a7aa:	69db      	ldr	r3, [r3, #28]
 801a7ac:	4798      	blx	r3
 801a7ae:	6726      	str	r6, [r4, #112]	; 0x70
 801a7b0:	f003 f960 	bl	801da74 <_ZN8touchgfx11Application11getInstanceEv>
 801a7b4:	6803      	ldr	r3, [r0, #0]
 801a7b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a7b8:	4798      	blx	r3
 801a7ba:	6823      	ldr	r3, [r4, #0]
 801a7bc:	4620      	mov	r0, r4
 801a7be:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801a7c2:	4798      	blx	r3
 801a7c4:	2001      	movs	r0, #1
 801a7c6:	f7e7 fb63 	bl	8001e90 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 801a7ca:	2300      	movs	r3, #0
 801a7cc:	702b      	strb	r3, [r5, #0]
 801a7ce:	b004      	add	sp, #16
 801a7d0:	bd70      	pop	{r4, r5, r6, pc}
 801a7d2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 801a7d6:	4620      	mov	r0, r4
 801a7d8:	4798      	blx	r3
 801a7da:	e7af      	b.n	801a73c <_ZN8touchgfx3HAL4tickEv+0xc0>
 801a7dc:	2863      	cmp	r0, #99	; 0x63
 801a7de:	bfcb      	itete	gt
 801a7e0:	2300      	movgt	r3, #0
 801a7e2:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 801a7e6:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 801a7ea:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 801a7ee:	e7d9      	b.n	801a7a4 <_ZN8touchgfx3HAL4tickEv+0x128>
 801a7f0:	24026244 	.word	0x24026244
 801a7f4:	24026245 	.word	0x24026245
 801a7f8:	05f5e100 	.word	0x05f5e100

0801a7fc <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 801a7fc:	f7e9 b91e 	b.w	8003a3c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0801a800 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 801a800:	6581      	str	r1, [r0, #88]	; 0x58
 801a802:	301c      	adds	r0, #28
 801a804:	f00d bf5e 	b.w	80286c4 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

0801a808 <_ZN8touchgfx3HAL5touchEll>:
 801a808:	b530      	push	{r4, r5, lr}
 801a80a:	b087      	sub	sp, #28
 801a80c:	4604      	mov	r4, r0
 801a80e:	a804      	add	r0, sp, #16
 801a810:	e9cd 1204 	strd	r1, r2, [sp, #16]
 801a814:	f002 ff1c 	bl	801d650 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 801a818:	9b04      	ldr	r3, [sp, #16]
 801a81a:	a906      	add	r1, sp, #24
 801a81c:	a803      	add	r0, sp, #12
 801a81e:	f8ad 300c 	strh.w	r3, [sp, #12]
 801a822:	9b05      	ldr	r3, [sp, #20]
 801a824:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 801a828:	f002 ff64 	bl	801d6f4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 801a82c:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 801a830:	f104 001c 	add.w	r0, r4, #28
 801a834:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 801a838:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 801a83c:	b189      	cbz	r1, 801a862 <_ZN8touchgfx3HAL5touchEll+0x5a>
 801a83e:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 801a842:	9300      	str	r3, [sp, #0]
 801a844:	4613      	mov	r3, r2
 801a846:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 801a84a:	462a      	mov	r2, r5
 801a84c:	f00d ff4a 	bl	80286e4 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 801a850:	b128      	cbz	r0, 801a85e <_ZN8touchgfx3HAL5touchEll+0x56>
 801a852:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801a856:	65e3      	str	r3, [r4, #92]	; 0x5c
 801a858:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801a85c:	6623      	str	r3, [r4, #96]	; 0x60
 801a85e:	b007      	add	sp, #28
 801a860:	bd30      	pop	{r4, r5, pc}
 801a862:	f00d ff7f 	bl	8028764 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 801a866:	2301      	movs	r3, #1
 801a868:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 801a86c:	e7f1      	b.n	801a852 <_ZN8touchgfx3HAL5touchEll+0x4a>

0801a86e <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 801a86e:	b510      	push	{r4, lr}
 801a870:	2b00      	cmp	r3, #0
 801a872:	d046      	beq.n	801a902 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 801a874:	ea81 0002 	eor.w	r0, r1, r2
 801a878:	07c4      	lsls	r4, r0, #31
 801a87a:	d508      	bpl.n	801a88e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 801a87c:	440b      	add	r3, r1
 801a87e:	3a01      	subs	r2, #1
 801a880:	428b      	cmp	r3, r1
 801a882:	d93e      	bls.n	801a902 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 801a884:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 801a888:	f801 0b01 	strb.w	r0, [r1], #1
 801a88c:	e7f8      	b.n	801a880 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 801a88e:	07d0      	lsls	r0, r2, #31
 801a890:	bf42      	ittt	mi
 801a892:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 801a896:	f103 33ff 	addmi.w	r3, r3, #4294967295
 801a89a:	f801 0b01 	strbmi.w	r0, [r1], #1
 801a89e:	2b01      	cmp	r3, #1
 801a8a0:	d911      	bls.n	801a8c6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 801a8a2:	ea81 0402 	eor.w	r4, r1, r2
 801a8a6:	4610      	mov	r0, r2
 801a8a8:	07a4      	lsls	r4, r4, #30
 801a8aa:	d022      	beq.n	801a8f2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 801a8ac:	f023 0401 	bic.w	r4, r3, #1
 801a8b0:	440c      	add	r4, r1
 801a8b2:	428c      	cmp	r4, r1
 801a8b4:	4602      	mov	r2, r0
 801a8b6:	d904      	bls.n	801a8c2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 801a8b8:	8812      	ldrh	r2, [r2, #0]
 801a8ba:	3002      	adds	r0, #2
 801a8bc:	f821 2b02 	strh.w	r2, [r1], #2
 801a8c0:	e7f7      	b.n	801a8b2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 801a8c2:	f003 0301 	and.w	r3, r3, #1
 801a8c6:	f023 0003 	bic.w	r0, r3, #3
 801a8ca:	4408      	add	r0, r1
 801a8cc:	4288      	cmp	r0, r1
 801a8ce:	4614      	mov	r4, r2
 801a8d0:	d904      	bls.n	801a8dc <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 801a8d2:	6824      	ldr	r4, [r4, #0]
 801a8d4:	3204      	adds	r2, #4
 801a8d6:	f841 4b04 	str.w	r4, [r1], #4
 801a8da:	e7f7      	b.n	801a8cc <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 801a8dc:	f003 0303 	and.w	r3, r3, #3
 801a8e0:	3a01      	subs	r2, #1
 801a8e2:	440b      	add	r3, r1
 801a8e4:	428b      	cmp	r3, r1
 801a8e6:	d90c      	bls.n	801a902 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 801a8e8:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 801a8ec:	f801 0b01 	strb.w	r0, [r1], #1
 801a8f0:	e7f8      	b.n	801a8e4 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 801a8f2:	0790      	lsls	r0, r2, #30
 801a8f4:	d0e7      	beq.n	801a8c6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 801a8f6:	f832 0b02 	ldrh.w	r0, [r2], #2
 801a8fa:	3b02      	subs	r3, #2
 801a8fc:	f821 0b02 	strh.w	r0, [r1], #2
 801a900:	e7e1      	b.n	801a8c6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 801a902:	2001      	movs	r0, #1
 801a904:	bd10      	pop	{r4, pc}

0801a906 <_ZN8touchgfx3HAL7noTouchEv>:
 801a906:	b510      	push	{r4, lr}
 801a908:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 801a90c:	4604      	mov	r4, r0
 801a90e:	b153      	cbz	r3, 801a926 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 801a910:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 801a914:	2101      	movs	r1, #1
 801a916:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 801a91a:	301c      	adds	r0, #28
 801a91c:	f00d ff22 	bl	8028764 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 801a920:	2300      	movs	r3, #0
 801a922:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 801a926:	bd10      	pop	{r4, pc}

0801a928 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 801a928:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a92c:	b085      	sub	sp, #20
 801a92e:	4604      	mov	r4, r0
 801a930:	2000      	movs	r0, #0
 801a932:	4699      	mov	r9, r3
 801a934:	ad04      	add	r5, sp, #16
 801a936:	460f      	mov	r7, r1
 801a938:	4690      	mov	r8, r2
 801a93a:	f845 0d04 	str.w	r0, [r5, #-4]!
 801a93e:	69a0      	ldr	r0, [r4, #24]
 801a940:	6806      	ldr	r6, [r0, #0]
 801a942:	9501      	str	r5, [sp, #4]
 801a944:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 801a948:	9500      	str	r5, [sp, #0]
 801a94a:	6835      	ldr	r5, [r6, #0]
 801a94c:	47a8      	blx	r5
 801a94e:	4d10      	ldr	r5, [pc, #64]	; (801a990 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 801a950:	4606      	mov	r6, r0
 801a952:	f8a5 9000 	strh.w	r9, [r5]
 801a956:	f7ea fe77 	bl	8005648 <_ZN8touchgfx3HAL3lcdEv>
 801a95a:	6803      	ldr	r3, [r0, #0]
 801a95c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a95e:	4798      	blx	r3
 801a960:	b128      	cbz	r0, 801a96e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 801a962:	2801      	cmp	r0, #1
 801a964:	d00b      	beq.n	801a97e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 801a966:	4630      	mov	r0, r6
 801a968:	b005      	add	sp, #20
 801a96a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a96e:	882b      	ldrh	r3, [r5, #0]
 801a970:	fb08 7203 	mla	r2, r8, r3, r7
 801a974:	9b03      	ldr	r3, [sp, #12]
 801a976:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 801a97a:	63e3      	str	r3, [r4, #60]	; 0x3c
 801a97c:	e7f3      	b.n	801a966 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 801a97e:	882a      	ldrh	r2, [r5, #0]
 801a980:	9b03      	ldr	r3, [sp, #12]
 801a982:	fb08 7202 	mla	r2, r8, r2, r7
 801a986:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801a98a:	1a9a      	subs	r2, r3, r2
 801a98c:	63e2      	str	r2, [r4, #60]	; 0x3c
 801a98e:	e7ea      	b.n	801a966 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 801a990:	2402623a 	.word	0x2402623a

0801a994 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 801a994:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a996:	b08b      	sub	sp, #44	; 0x2c
 801a998:	4617      	mov	r7, r2
 801a99a:	4604      	mov	r4, r0
 801a99c:	460e      	mov	r6, r1
 801a99e:	461d      	mov	r5, r3
 801a9a0:	f7ea fe52 	bl	8005648 <_ZN8touchgfx3HAL3lcdEv>
 801a9a4:	6803      	ldr	r3, [r0, #0]
 801a9a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a9a8:	4798      	blx	r3
 801a9aa:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 801a9ae:	9007      	str	r0, [sp, #28]
 801a9b0:	4631      	mov	r1, r6
 801a9b2:	6822      	ldr	r2, [r4, #0]
 801a9b4:	e9cd 0308 	strd	r0, r3, [sp, #32]
 801a9b8:	4b0c      	ldr	r3, [pc, #48]	; (801a9ec <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 801a9ba:	4620      	mov	r0, r4
 801a9bc:	881b      	ldrh	r3, [r3, #0]
 801a9be:	9306      	str	r3, [sp, #24]
 801a9c0:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 801a9c4:	9305      	str	r3, [sp, #20]
 801a9c6:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 801a9ca:	9304      	str	r3, [sp, #16]
 801a9cc:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801a9d0:	9303      	str	r3, [sp, #12]
 801a9d2:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801a9d6:	9302      	str	r3, [sp, #8]
 801a9d8:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801a9dc:	e9cd 5300 	strd	r5, r3, [sp]
 801a9e0:	463b      	mov	r3, r7
 801a9e2:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 801a9e4:	2200      	movs	r2, #0
 801a9e6:	47a8      	blx	r5
 801a9e8:	b00b      	add	sp, #44	; 0x2c
 801a9ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a9ec:	2402623a 	.word	0x2402623a

0801a9f0 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 801a9f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a9f4:	4698      	mov	r8, r3
 801a9f6:	6803      	ldr	r3, [r0, #0]
 801a9f8:	b08b      	sub	sp, #44	; 0x2c
 801a9fa:	4617      	mov	r7, r2
 801a9fc:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 801a9fe:	460e      	mov	r6, r1
 801aa00:	4b13      	ldr	r3, [pc, #76]	; (801aa50 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 801aa02:	4604      	mov	r4, r0
 801aa04:	f8b3 9000 	ldrh.w	r9, [r3]
 801aa08:	f7ea fe1e 	bl	8005648 <_ZN8touchgfx3HAL3lcdEv>
 801aa0c:	6803      	ldr	r3, [r0, #0]
 801aa0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801aa10:	4798      	blx	r3
 801aa12:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 801aa16:	2200      	movs	r2, #0
 801aa18:	4631      	mov	r1, r6
 801aa1a:	e9cd 0308 	strd	r0, r3, [sp, #32]
 801aa1e:	2302      	movs	r3, #2
 801aa20:	4620      	mov	r0, r4
 801aa22:	e9cd 9306 	strd	r9, r3, [sp, #24]
 801aa26:	2301      	movs	r3, #1
 801aa28:	9305      	str	r3, [sp, #20]
 801aa2a:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 801aa2e:	9304      	str	r3, [sp, #16]
 801aa30:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 801aa34:	9303      	str	r3, [sp, #12]
 801aa36:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 801aa3a:	9302      	str	r3, [sp, #8]
 801aa3c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801aa40:	e9cd 8300 	strd	r8, r3, [sp]
 801aa44:	463b      	mov	r3, r7
 801aa46:	47a8      	blx	r5
 801aa48:	b00b      	add	sp, #44	; 0x2c
 801aa4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801aa4e:	bf00      	nop
 801aa50:	2402623a 	.word	0x2402623a

0801aa54 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 801aa54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801aa58:	4698      	mov	r8, r3
 801aa5a:	6803      	ldr	r3, [r0, #0]
 801aa5c:	b087      	sub	sp, #28
 801aa5e:	460e      	mov	r6, r1
 801aa60:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 801aa62:	4617      	mov	r7, r2
 801aa64:	4b0f      	ldr	r3, [pc, #60]	; (801aaa4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 801aa66:	4604      	mov	r4, r0
 801aa68:	f8b3 9000 	ldrh.w	r9, [r3]
 801aa6c:	f7ea fdec 	bl	8005648 <_ZN8touchgfx3HAL3lcdEv>
 801aa70:	6803      	ldr	r3, [r0, #0]
 801aa72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801aa74:	4798      	blx	r3
 801aa76:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 801aa7a:	463a      	mov	r2, r7
 801aa7c:	4631      	mov	r1, r6
 801aa7e:	f8cd 900c 	str.w	r9, [sp, #12]
 801aa82:	e9cd 0304 	strd	r0, r3, [sp, #16]
 801aa86:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 801aa8a:	4620      	mov	r0, r4
 801aa8c:	9302      	str	r3, [sp, #8]
 801aa8e:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 801aa92:	9301      	str	r3, [sp, #4]
 801aa94:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801aa98:	9300      	str	r3, [sp, #0]
 801aa9a:	4643      	mov	r3, r8
 801aa9c:	47a8      	blx	r5
 801aa9e:	b007      	add	sp, #28
 801aaa0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801aaa4:	2402623a 	.word	0x2402623a

0801aaa8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 801aaa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aaac:	4604      	mov	r4, r0
 801aaae:	b08f      	sub	sp, #60	; 0x3c
 801aab0:	4610      	mov	r0, r2
 801aab2:	460d      	mov	r5, r1
 801aab4:	4691      	mov	r9, r2
 801aab6:	461e      	mov	r6, r3
 801aab8:	f005 fc6e 	bl	8020398 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 801aabc:	2800      	cmp	r0, #0
 801aabe:	f000 809d 	beq.w	801abfc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 801aac2:	6823      	ldr	r3, [r4, #0]
 801aac4:	4620      	mov	r0, r4
 801aac6:	f8df b198 	ldr.w	fp, [pc, #408]	; 801ac60 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 801aaca:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 801aace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801aad0:	4798      	blx	r3
 801aad2:	6823      	ldr	r3, [r4, #0]
 801aad4:	4620      	mov	r0, r4
 801aad6:	f8df a18c 	ldr.w	sl, [pc, #396]	; 801ac64 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 801aada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801aadc:	4798      	blx	r3
 801aade:	f8bb 3000 	ldrh.w	r3, [fp]
 801aae2:	4f5c      	ldr	r7, [pc, #368]	; (801ac54 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 801aae4:	9301      	str	r3, [sp, #4]
 801aae6:	f8ba 3000 	ldrh.w	r3, [sl]
 801aaea:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 801aaee:	4640      	mov	r0, r8
 801aaf0:	9302      	str	r3, [sp, #8]
 801aaf2:	883b      	ldrh	r3, [r7, #0]
 801aaf4:	9303      	str	r3, [sp, #12]
 801aaf6:	4b58      	ldr	r3, [pc, #352]	; (801ac58 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 801aaf8:	881a      	ldrh	r2, [r3, #0]
 801aafa:	9305      	str	r3, [sp, #20]
 801aafc:	9204      	str	r2, [sp, #16]
 801aafe:	f005 fd8f 	bl	8020620 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801ab02:	8038      	strh	r0, [r7, #0]
 801ab04:	4640      	mov	r0, r8
 801ab06:	f005 fdbf 	bl	8020688 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801ab0a:	9b05      	ldr	r3, [sp, #20]
 801ab0c:	b280      	uxth	r0, r0
 801ab0e:	8018      	strh	r0, [r3, #0]
 801ab10:	4b52      	ldr	r3, [pc, #328]	; (801ac5c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 801ab12:	781b      	ldrb	r3, [r3, #0]
 801ab14:	2b00      	cmp	r3, #0
 801ab16:	d174      	bne.n	801ac02 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 801ab18:	883b      	ldrh	r3, [r7, #0]
 801ab1a:	f8aa 0000 	strh.w	r0, [sl]
 801ab1e:	f8ab 3000 	strh.w	r3, [fp]
 801ab22:	4648      	mov	r0, r9
 801ab24:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 801ab28:	f005 fc36 	bl	8020398 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 801ab2c:	2200      	movs	r2, #0
 801ab2e:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 801ab32:	4611      	mov	r1, r2
 801ab34:	4628      	mov	r0, r5
 801ab36:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 801ab3a:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 801ab3e:	f7ec fec7 	bl	80078d0 <_ZN8touchgfx8Drawable5setXYEss>
 801ab42:	2301      	movs	r3, #1
 801ab44:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 801ab48:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 801ab4c:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 801ab50:	2b00      	cmp	r3, #0
 801ab52:	dd5c      	ble.n	801ac0e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 801ab54:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 801ab58:	2b00      	cmp	r3, #0
 801ab5a:	dd58      	ble.n	801ac0e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 801ab5c:	462a      	mov	r2, r5
 801ab5e:	ab0a      	add	r3, sp, #40	; 0x28
 801ab60:	f852 0f04 	ldr.w	r0, [r2, #4]!
 801ab64:	6851      	ldr	r1, [r2, #4]
 801ab66:	c303      	stmia	r3!, {r0, r1}
 801ab68:	4631      	mov	r1, r6
 801ab6a:	a80a      	add	r0, sp, #40	; 0x28
 801ab6c:	f7ff fbfc 	bl	801a368 <_ZN8touchgfx4RectaNERKS0_>
 801ab70:	4b38      	ldr	r3, [pc, #224]	; (801ac54 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 801ab72:	2100      	movs	r1, #0
 801ab74:	f9b3 2000 	ldrsh.w	r2, [r3]
 801ab78:	4b37      	ldr	r3, [pc, #220]	; (801ac58 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 801ab7a:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 801ab7e:	aa0a      	add	r2, sp, #40	; 0x28
 801ab80:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ab84:	910c      	str	r1, [sp, #48]	; 0x30
 801ab86:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801ab8a:	ab08      	add	r3, sp, #32
 801ab8c:	e892 0003 	ldmia.w	r2, {r0, r1}
 801ab90:	e883 0003 	stmia.w	r3, {r0, r1}
 801ab94:	4618      	mov	r0, r3
 801ab96:	a90c      	add	r1, sp, #48	; 0x30
 801ab98:	f7ff fbe6 	bl	801a368 <_ZN8touchgfx4RectaNERKS0_>
 801ab9c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 801ab9e:	2b00      	cmp	r3, #0
 801aba0:	d13c      	bne.n	801ac1c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 801aba2:	2000      	movs	r0, #0
 801aba4:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 801aba8:	2600      	movs	r6, #0
 801abaa:	696b      	ldr	r3, [r5, #20]
 801abac:	a908      	add	r1, sp, #32
 801abae:	682a      	ldr	r2, [r5, #0]
 801abb0:	4628      	mov	r0, r5
 801abb2:	9305      	str	r3, [sp, #20]
 801abb4:	616e      	str	r6, [r5, #20]
 801abb6:	6892      	ldr	r2, [r2, #8]
 801abb8:	4790      	blx	r2
 801abba:	9b05      	ldr	r3, [sp, #20]
 801abbc:	4652      	mov	r2, sl
 801abbe:	4649      	mov	r1, r9
 801abc0:	616b      	str	r3, [r5, #20]
 801abc2:	4628      	mov	r0, r5
 801abc4:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 801abc8:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 801abcc:	f7ec fe80 	bl	80078d0 <_ZN8touchgfx8Drawable5setXYEss>
 801abd0:	9a01      	ldr	r2, [sp, #4]
 801abd2:	4b23      	ldr	r3, [pc, #140]	; (801ac60 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 801abd4:	4620      	mov	r0, r4
 801abd6:	801a      	strh	r2, [r3, #0]
 801abd8:	9a02      	ldr	r2, [sp, #8]
 801abda:	4b22      	ldr	r3, [pc, #136]	; (801ac64 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 801abdc:	801a      	strh	r2, [r3, #0]
 801abde:	9a03      	ldr	r2, [sp, #12]
 801abe0:	4b1c      	ldr	r3, [pc, #112]	; (801ac54 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 801abe2:	801a      	strh	r2, [r3, #0]
 801abe4:	4b1c      	ldr	r3, [pc, #112]	; (801ac58 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 801abe6:	9a04      	ldr	r2, [sp, #16]
 801abe8:	801a      	strh	r2, [r3, #0]
 801abea:	6823      	ldr	r3, [r4, #0]
 801abec:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 801abf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801abf2:	4798      	blx	r3
 801abf4:	6823      	ldr	r3, [r4, #0]
 801abf6:	4620      	mov	r0, r4
 801abf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801abfa:	4798      	blx	r3
 801abfc:	b00f      	add	sp, #60	; 0x3c
 801abfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ac02:	883b      	ldrh	r3, [r7, #0]
 801ac04:	f8ab 0000 	strh.w	r0, [fp]
 801ac08:	f8aa 3000 	strh.w	r3, [sl]
 801ac0c:	e789      	b.n	801ab22 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 801ac0e:	462a      	mov	r2, r5
 801ac10:	ab0a      	add	r3, sp, #40	; 0x28
 801ac12:	f852 0f04 	ldr.w	r0, [r2, #4]!
 801ac16:	6851      	ldr	r1, [r2, #4]
 801ac18:	c303      	stmia	r3!, {r0, r1}
 801ac1a:	e7a9      	b.n	801ab70 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 801ac1c:	a807      	add	r0, sp, #28
 801ac1e:	f005 fe6f 	bl	8020900 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801ac22:	4606      	mov	r6, r0
 801ac24:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 801ac26:	6803      	ldr	r3, [r0, #0]
 801ac28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ac2a:	4798      	blx	r3
 801ac2c:	4286      	cmp	r6, r0
 801ac2e:	d1b8      	bne.n	801aba2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 801ac30:	f7ea fd0a 	bl	8005648 <_ZN8touchgfx3HAL3lcdEv>
 801ac34:	6803      	ldr	r3, [r0, #0]
 801ac36:	4606      	mov	r6, r0
 801ac38:	a807      	add	r0, sp, #28
 801ac3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ac3c:	9305      	str	r3, [sp, #20]
 801ac3e:	f005 fe5f 	bl	8020900 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801ac42:	9b05      	ldr	r3, [sp, #20]
 801ac44:	4601      	mov	r1, r0
 801ac46:	4630      	mov	r0, r6
 801ac48:	4798      	blx	r3
 801ac4a:	f080 0001 	eor.w	r0, r0, #1
 801ac4e:	b2c0      	uxtb	r0, r0
 801ac50:	e7a8      	b.n	801aba4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 801ac52:	bf00      	nop
 801ac54:	24026234 	.word	0x24026234
 801ac58:	24026236 	.word	0x24026236
 801ac5c:	24026238 	.word	0x24026238
 801ac60:	2402623a 	.word	0x2402623a
 801ac64:	2402623c 	.word	0x2402623c

0801ac68 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 801ac68:	4b07      	ldr	r3, [pc, #28]	; (801ac88 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 801ac6a:	b510      	push	{r4, lr}
 801ac6c:	781b      	ldrb	r3, [r3, #0]
 801ac6e:	4604      	mov	r4, r0
 801ac70:	b13b      	cbz	r3, 801ac82 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 801ac72:	6803      	ldr	r3, [r0, #0]
 801ac74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ac76:	4798      	blx	r3
 801ac78:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801ac7a:	4283      	cmp	r3, r0
 801ac7c:	d101      	bne.n	801ac82 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 801ac7e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801ac80:	bd10      	pop	{r4, pc}
 801ac82:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 801ac84:	e7fc      	b.n	801ac80 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 801ac86:	bf00      	nop
 801ac88:	2402623e 	.word	0x2402623e

0801ac8c <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 801ac8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ac90:	461d      	mov	r5, r3
 801ac92:	b08a      	sub	sp, #40	; 0x28
 801ac94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801ac98:	4690      	mov	r8, r2
 801ac9a:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 801ac9e:	2400      	movs	r4, #0
 801aca0:	4607      	mov	r7, r0
 801aca2:	fb06 8505 	mla	r5, r6, r5, r8
 801aca6:	9404      	str	r4, [sp, #16]
 801aca8:	f88d 4020 	strb.w	r4, [sp, #32]
 801acac:	e9cd 3101 	strd	r3, r1, [sp, #4]
 801acb0:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801acb4:	f8ad 3018 	strh.w	r3, [sp, #24]
 801acb8:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801acbc:	f8ad 301a 	strh.w	r3, [sp, #26]
 801acc0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801acc4:	f8ad 301c 	strh.w	r3, [sp, #28]
 801acc8:	f7ff ffce 	bl	801ac68 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801accc:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 801acd0:	6878      	ldr	r0, [r7, #4]
 801acd2:	f8ad 601e 	strh.w	r6, [sp, #30]
 801acd6:	a901      	add	r1, sp, #4
 801acd8:	9505      	str	r5, [sp, #20]
 801acda:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 801acde:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 801ace2:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 801ace6:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 801acea:	6803      	ldr	r3, [r0, #0]
 801acec:	685b      	ldr	r3, [r3, #4]
 801acee:	4798      	blx	r3
 801acf0:	b00a      	add	sp, #40	; 0x28
 801acf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801acf6 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 801acf6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801acfa:	b08b      	sub	sp, #44	; 0x2c
 801acfc:	2400      	movs	r4, #0
 801acfe:	4691      	mov	r9, r2
 801ad00:	461d      	mov	r5, r3
 801ad02:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 801ad06:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801ad0a:	4688      	mov	r8, r1
 801ad0c:	4607      	mov	r7, r0
 801ad0e:	9404      	str	r4, [sp, #16]
 801ad10:	fb06 9505 	mla	r5, r6, r5, r9
 801ad14:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801ad18:	f7ff ffa6 	bl	801ac68 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801ad1c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801ad20:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 801ad24:	6878      	ldr	r0, [r7, #4]
 801ad26:	f8ad 3018 	strh.w	r3, [sp, #24]
 801ad2a:	a901      	add	r1, sp, #4
 801ad2c:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 801ad30:	9505      	str	r5, [sp, #20]
 801ad32:	f8ad 301a 	strh.w	r3, [sp, #26]
 801ad36:	f8ad 401c 	strh.w	r4, [sp, #28]
 801ad3a:	f8ad 601e 	strh.w	r6, [sp, #30]
 801ad3e:	f8cd 8010 	str.w	r8, [sp, #16]
 801ad42:	f8ad 4020 	strh.w	r4, [sp, #32]
 801ad46:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 801ad4a:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 801ad4e:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 801ad52:	6803      	ldr	r3, [r0, #0]
 801ad54:	685b      	ldr	r3, [r3, #4]
 801ad56:	4798      	blx	r3
 801ad58:	b00b      	add	sp, #44	; 0x2c
 801ad5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0801ad60 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 801ad60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ad64:	b08a      	sub	sp, #40	; 0x28
 801ad66:	4698      	mov	r8, r3
 801ad68:	2300      	movs	r3, #0
 801ad6a:	4606      	mov	r6, r0
 801ad6c:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 801ad70:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 801ad74:	2d0b      	cmp	r5, #11
 801ad76:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 801ad7a:	f8bd 7058 	ldrh.w	r7, [sp, #88]	; 0x58
 801ad7e:	f89d 4060 	ldrb.w	r4, [sp, #96]	; 0x60
 801ad82:	9304      	str	r3, [sp, #16]
 801ad84:	d137      	bne.n	801adf6 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 801ad86:	2380      	movs	r3, #128	; 0x80
 801ad88:	f88d 0020 	strb.w	r0, [sp, #32]
 801ad8c:	4630      	mov	r0, r6
 801ad8e:	9203      	str	r2, [sp, #12]
 801ad90:	e9cd 3101 	strd	r3, r1, [sp, #4]
 801ad94:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801ad98:	f8ad 3018 	strh.w	r3, [sp, #24]
 801ad9c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801ada0:	f8ad 301a 	strh.w	r3, [sp, #26]
 801ada4:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 801ada8:	f8ad 301c 	strh.w	r3, [sp, #28]
 801adac:	f7ff ff5c 	bl	801ac68 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801adb0:	2c0b      	cmp	r4, #11
 801adb2:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 801adb6:	f8ad 701e 	strh.w	r7, [sp, #30]
 801adba:	bf94      	ite	ls
 801adbc:	4b19      	ldrls	r3, [pc, #100]	; (801ae24 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 801adbe:	2100      	movhi	r1, #0
 801adc0:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 801adc4:	bf98      	it	ls
 801adc6:	5d19      	ldrbls	r1, [r3, r4]
 801adc8:	fb02 8307 	mla	r3, r2, r7, r8
 801adcc:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 801add0:	10c9      	asrs	r1, r1, #3
 801add2:	fb01 0003 	mla	r0, r1, r3, r0
 801add6:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 801adda:	a901      	add	r1, sp, #4
 801addc:	9005      	str	r0, [sp, #20]
 801adde:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 801ade2:	2300      	movs	r3, #0
 801ade4:	6870      	ldr	r0, [r6, #4]
 801ade6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 801adea:	6803      	ldr	r3, [r0, #0]
 801adec:	685b      	ldr	r3, [r3, #4]
 801adee:	4798      	blx	r3
 801adf0:	b00a      	add	sp, #40	; 0x28
 801adf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801adf6:	2d02      	cmp	r5, #2
 801adf8:	d109      	bne.n	801ae0e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 801adfa:	28ff      	cmp	r0, #255	; 0xff
 801adfc:	d105      	bne.n	801ae0a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 801adfe:	f1bc 0f00 	cmp.w	ip, #0
 801ae02:	bf14      	ite	ne
 801ae04:	2340      	movne	r3, #64	; 0x40
 801ae06:	2320      	moveq	r3, #32
 801ae08:	e7be      	b.n	801ad88 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 801ae0a:	2340      	movs	r3, #64	; 0x40
 801ae0c:	e7bc      	b.n	801ad88 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 801ae0e:	28ff      	cmp	r0, #255	; 0xff
 801ae10:	d105      	bne.n	801ae1e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 801ae12:	f1bc 0f00 	cmp.w	ip, #0
 801ae16:	bf14      	ite	ne
 801ae18:	2304      	movne	r3, #4
 801ae1a:	2301      	moveq	r3, #1
 801ae1c:	e7b4      	b.n	801ad88 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 801ae1e:	2304      	movs	r3, #4
 801ae20:	e7b2      	b.n	801ad88 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 801ae22:	bf00      	nop
 801ae24:	0802d2bc 	.word	0x0802d2bc

0801ae28 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 801ae28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ae2c:	b08b      	sub	sp, #44	; 0x2c
 801ae2e:	461d      	mov	r5, r3
 801ae30:	2400      	movs	r4, #0
 801ae32:	4688      	mov	r8, r1
 801ae34:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
 801ae38:	4693      	mov	fp, r2
 801ae3a:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
 801ae3e:	4607      	mov	r7, r0
 801ae40:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801ae44:	f8bd a05c 	ldrh.w	sl, [sp, #92]	; 0x5c
 801ae48:	9404      	str	r4, [sp, #16]
 801ae4a:	bf14      	ite	ne
 801ae4c:	2308      	movne	r3, #8
 801ae4e:	2302      	moveq	r3, #2
 801ae50:	fb05 b50a 	mla	r5, r5, sl, fp
 801ae54:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801ae58:	f7ff ff06 	bl	801ac68 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801ae5c:	2e0b      	cmp	r6, #11
 801ae5e:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801ae62:	a901      	add	r1, sp, #4
 801ae64:	bf98      	it	ls
 801ae66:	4b13      	ldrls	r3, [pc, #76]	; (801aeb4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 801ae68:	f8ad a01e 	strh.w	sl, [sp, #30]
 801ae6c:	bf98      	it	ls
 801ae6e:	5d9c      	ldrbls	r4, [r3, r6]
 801ae70:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 801ae74:	10e4      	asrs	r4, r4, #3
 801ae76:	f8cd 8010 	str.w	r8, [sp, #16]
 801ae7a:	f8ad 3018 	strh.w	r3, [sp, #24]
 801ae7e:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 801ae82:	fb04 0405 	mla	r4, r4, r5, r0
 801ae86:	6878      	ldr	r0, [r7, #4]
 801ae88:	f8ad 301a 	strh.w	r3, [sp, #26]
 801ae8c:	2300      	movs	r3, #0
 801ae8e:	9405      	str	r4, [sp, #20]
 801ae90:	f8ad 301c 	strh.w	r3, [sp, #28]
 801ae94:	f88d 9020 	strb.w	r9, [sp, #32]
 801ae98:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
 801ae9c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 801aea0:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
 801aea4:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
 801aea8:	6803      	ldr	r3, [r0, #0]
 801aeaa:	685b      	ldr	r3, [r3, #4]
 801aeac:	4798      	blx	r3
 801aeae:	b00b      	add	sp, #44	; 0x2c
 801aeb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aeb4:	0802d2bc 	.word	0x0802d2bc

0801aeb8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 801aeb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aebc:	461e      	mov	r6, r3
 801aebe:	4b0a      	ldr	r3, [pc, #40]	; (801aee8 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 801aec0:	460f      	mov	r7, r1
 801aec2:	4690      	mov	r8, r2
 801aec4:	881d      	ldrh	r5, [r3, #0]
 801aec6:	f7ea fbbf 	bl	8005648 <_ZN8touchgfx3HAL3lcdEv>
 801aeca:	6803      	ldr	r3, [r0, #0]
 801aecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801aece:	4798      	blx	r3
 801aed0:	280b      	cmp	r0, #11
 801aed2:	bf96      	itet	ls
 801aed4:	4b05      	ldrls	r3, [pc, #20]	; (801aeec <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 801aed6:	2400      	movhi	r4, #0
 801aed8:	5c1c      	ldrbls	r4, [r3, r0]
 801aeda:	fb08 7005 	mla	r0, r8, r5, r7
 801aede:	10e4      	asrs	r4, r4, #3
 801aee0:	fb04 6000 	mla	r0, r4, r0, r6
 801aee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801aee8:	2402623a 	.word	0x2402623a
 801aeec:	0802d2bc 	.word	0x0802d2bc

0801aef0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 801aef0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801aef2:	b08b      	sub	sp, #44	; 0x2c
 801aef4:	461f      	mov	r7, r3
 801aef6:	4604      	mov	r4, r0
 801aef8:	4616      	mov	r6, r2
 801aefa:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 801aefe:	2500      	movs	r5, #0
 801af00:	e9cd 3101 	strd	r3, r1, [sp, #4]
 801af04:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801af08:	9504      	str	r5, [sp, #16]
 801af0a:	f8ad 3018 	strh.w	r3, [sp, #24]
 801af0e:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801af12:	f8ad 301a 	strh.w	r3, [sp, #26]
 801af16:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801af1a:	f8ad 301c 	strh.w	r3, [sp, #28]
 801af1e:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 801af22:	f88d 3020 	strb.w	r3, [sp, #32]
 801af26:	f7ff fe9f 	bl	801ac68 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801af2a:	463a      	mov	r2, r7
 801af2c:	4631      	mov	r1, r6
 801af2e:	4603      	mov	r3, r0
 801af30:	4620      	mov	r0, r4
 801af32:	f7ff ffc1 	bl	801aeb8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801af36:	4b0e      	ldr	r3, [pc, #56]	; (801af70 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 801af38:	9005      	str	r0, [sp, #20]
 801af3a:	881b      	ldrh	r3, [r3, #0]
 801af3c:	f8ad 301e 	strh.w	r3, [sp, #30]
 801af40:	f7ea fb82 	bl	8005648 <_ZN8touchgfx3HAL3lcdEv>
 801af44:	6803      	ldr	r3, [r0, #0]
 801af46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801af48:	4798      	blx	r3
 801af4a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801af4c:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 801af50:	a901      	add	r1, sp, #4
 801af52:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 801af56:	9304      	str	r3, [sp, #16]
 801af58:	6860      	ldr	r0, [r4, #4]
 801af5a:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 801af5e:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 801af62:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 801af66:	6803      	ldr	r3, [r0, #0]
 801af68:	685b      	ldr	r3, [r3, #4]
 801af6a:	4798      	blx	r3
 801af6c:	b00b      	add	sp, #44	; 0x2c
 801af6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801af70:	2402623a 	.word	0x2402623a

0801af74 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 801af74:	b5f0      	push	{r4, r5, r6, r7, lr}
 801af76:	b08d      	sub	sp, #52	; 0x34
 801af78:	2501      	movs	r5, #1
 801af7a:	4604      	mov	r4, r0
 801af7c:	466b      	mov	r3, sp
 801af7e:	9503      	str	r5, [sp, #12]
 801af80:	e883 0006 	stmia.w	r3, {r1, r2}
 801af84:	2300      	movs	r3, #0
 801af86:	f8bd 6000 	ldrh.w	r6, [sp]
 801af8a:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 801af8e:	9306      	str	r3, [sp, #24]
 801af90:	6803      	ldr	r3, [r0, #0]
 801af92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801af94:	4798      	blx	r3
 801af96:	463a      	mov	r2, r7
 801af98:	4631      	mov	r1, r6
 801af9a:	4603      	mov	r3, r0
 801af9c:	4620      	mov	r0, r4
 801af9e:	f7ff ff8b 	bl	801aeb8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801afa2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801afa4:	9004      	str	r0, [sp, #16]
 801afa6:	9307      	str	r3, [sp, #28]
 801afa8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801afac:	f8ad 3020 	strh.w	r3, [sp, #32]
 801afb0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801afb4:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801afb8:	4b0e      	ldr	r3, [pc, #56]	; (801aff4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 801afba:	881b      	ldrh	r3, [r3, #0]
 801afbc:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 801afc0:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801afc4:	f7ea fb40 	bl	8005648 <_ZN8touchgfx3HAL3lcdEv>
 801afc8:	6803      	ldr	r3, [r0, #0]
 801afca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801afcc:	4798      	blx	r3
 801afce:	23ff      	movs	r3, #255	; 0xff
 801afd0:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 801afd4:	a903      	add	r1, sp, #12
 801afd6:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 801afda:	6860      	ldr	r0, [r4, #4]
 801afdc:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 801afe0:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 801afe4:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 801afe8:	6803      	ldr	r3, [r0, #0]
 801afea:	685b      	ldr	r3, [r3, #4]
 801afec:	4798      	blx	r3
 801afee:	6c60      	ldr	r0, [r4, #68]	; 0x44
 801aff0:	b00d      	add	sp, #52	; 0x34
 801aff2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801aff4:	2402623a 	.word	0x2402623a

0801aff8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 801aff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801affc:	b08c      	sub	sp, #48	; 0x30
 801affe:	461e      	mov	r6, r3
 801b000:	2300      	movs	r3, #0
 801b002:	4604      	mov	r4, r0
 801b004:	466d      	mov	r5, sp
 801b006:	9306      	str	r3, [sp, #24]
 801b008:	6803      	ldr	r3, [r0, #0]
 801b00a:	e885 0006 	stmia.w	r5, {r1, r2}
 801b00e:	2501      	movs	r5, #1
 801b010:	f8bd 7000 	ldrh.w	r7, [sp]
 801b014:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 801b018:	9503      	str	r5, [sp, #12]
 801b01a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b01c:	4798      	blx	r3
 801b01e:	4642      	mov	r2, r8
 801b020:	4639      	mov	r1, r7
 801b022:	4603      	mov	r3, r0
 801b024:	4620      	mov	r0, r4
 801b026:	f7ff ff47 	bl	801aeb8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801b02a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801b02e:	9004      	str	r0, [sp, #16]
 801b030:	f8ad 3020 	strh.w	r3, [sp, #32]
 801b034:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801b038:	9607      	str	r6, [sp, #28]
 801b03a:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801b03e:	4b10      	ldr	r3, [pc, #64]	; (801b080 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 801b040:	881b      	ldrh	r3, [r3, #0]
 801b042:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 801b046:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801b048:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801b04c:	f7ea fafc 	bl	8005648 <_ZN8touchgfx3HAL3lcdEv>
 801b050:	6803      	ldr	r3, [r0, #0]
 801b052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b054:	4798      	blx	r3
 801b056:	23ff      	movs	r3, #255	; 0xff
 801b058:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 801b05c:	a903      	add	r1, sp, #12
 801b05e:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 801b062:	6860      	ldr	r0, [r4, #4]
 801b064:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 801b068:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 801b06c:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 801b070:	6803      	ldr	r3, [r0, #0]
 801b072:	685b      	ldr	r3, [r3, #4]
 801b074:	4798      	blx	r3
 801b076:	4630      	mov	r0, r6
 801b078:	b00c      	add	sp, #48	; 0x30
 801b07a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b07e:	bf00      	nop
 801b080:	2402623a 	.word	0x2402623a

0801b084 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 801b084:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b086:	b085      	sub	sp, #20
 801b088:	4605      	mov	r5, r0
 801b08a:	ac02      	add	r4, sp, #8
 801b08c:	e884 0006 	stmia.w	r4, {r1, r2}
 801b090:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 801b094:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 801b098:	f7ff fde6 	bl	801ac68 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801b09c:	4631      	mov	r1, r6
 801b09e:	4603      	mov	r3, r0
 801b0a0:	463a      	mov	r2, r7
 801b0a2:	4628      	mov	r0, r5
 801b0a4:	f7ff ff08 	bl	801aeb8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801b0a8:	4a05      	ldr	r2, [pc, #20]	; (801b0c0 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 801b0aa:	682b      	ldr	r3, [r5, #0]
 801b0ac:	8812      	ldrh	r2, [r2, #0]
 801b0ae:	9200      	str	r2, [sp, #0]
 801b0b0:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 801b0b2:	4603      	mov	r3, r0
 801b0b4:	4628      	mov	r0, r5
 801b0b6:	e894 0006 	ldmia.w	r4, {r1, r2}
 801b0ba:	47b0      	blx	r6
 801b0bc:	b005      	add	sp, #20
 801b0be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b0c0:	2402623a 	.word	0x2402623a

0801b0c4 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 801b0c4:	b570      	push	{r4, r5, r6, lr}
 801b0c6:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 801b0ca:	4604      	mov	r4, r0
 801b0cc:	b19b      	cbz	r3, 801b0f6 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 801b0ce:	2002      	movs	r0, #2
 801b0d0:	f7e6 ff3c 	bl	8001f4c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 801b0d4:	2300      	movs	r3, #0
 801b0d6:	4620      	mov	r0, r4
 801b0d8:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 801b0dc:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 801b0e0:	6823      	ldr	r3, [r4, #0]
 801b0e2:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
 801b0e6:	f7ff fdbf 	bl	801ac68 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801b0ea:	4601      	mov	r1, r0
 801b0ec:	4620      	mov	r0, r4
 801b0ee:	462b      	mov	r3, r5
 801b0f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b0f4:	4718      	bx	r3
 801b0f6:	bd70      	pop	{r4, r5, r6, pc}

0801b0f8 <_ZN8touchgfx3HAL12setMCUActiveEb>:
 801b0f8:	b570      	push	{r4, r5, r6, lr}
 801b0fa:	4605      	mov	r5, r0
 801b0fc:	460c      	mov	r4, r1
 801b0fe:	2003      	movs	r0, #3
 801b100:	b149      	cbz	r1, 801b116 <_ZN8touchgfx3HAL12setMCUActiveEb+0x1e>
 801b102:	f7e6 fe67 	bl	8001dd4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 801b106:	6928      	ldr	r0, [r5, #16]
 801b108:	b168      	cbz	r0, 801b126 <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 801b10a:	6803      	ldr	r3, [r0, #0]
 801b10c:	2101      	movs	r1, #1
 801b10e:	695b      	ldr	r3, [r3, #20]
 801b110:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b114:	4718      	bx	r3
 801b116:	f7e6 febb 	bl	8001e90 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 801b11a:	6928      	ldr	r0, [r5, #16]
 801b11c:	b118      	cbz	r0, 801b126 <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 801b11e:	6803      	ldr	r3, [r0, #0]
 801b120:	4621      	mov	r1, r4
 801b122:	695b      	ldr	r3, [r3, #20]
 801b124:	e7f4      	b.n	801b110 <_ZN8touchgfx3HAL12setMCUActiveEb+0x18>
 801b126:	bd70      	pop	{r4, r5, r6, pc}

0801b128 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 801b128:	b538      	push	{r3, r4, r5, lr}
 801b12a:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
 801b12e:	4604      	mov	r4, r0
 801b130:	460d      	mov	r5, r1
 801b132:	428b      	cmp	r3, r1
 801b134:	d006      	beq.n	801b144 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 801b136:	6803      	ldr	r3, [r0, #0]
 801b138:	b929      	cbnz	r1, 801b146 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 801b13a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 801b13e:	4798      	blx	r3
 801b140:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 801b144:	bd38      	pop	{r3, r4, r5, pc}
 801b146:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 801b14a:	e7f8      	b.n	801b13e <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

0801b14c <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 801b14c:	4b0d      	ldr	r3, [pc, #52]	; (801b184 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 801b14e:	b510      	push	{r4, lr}
 801b150:	781b      	ldrb	r3, [r3, #0]
 801b152:	4604      	mov	r4, r0
 801b154:	b95b      	cbnz	r3, 801b16e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801b156:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 801b15a:	2b02      	cmp	r3, #2
 801b15c:	d007      	beq.n	801b16e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801b15e:	6840      	ldr	r0, [r0, #4]
 801b160:	f000 f90e 	bl	801b380 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 801b164:	b118      	cbz	r0, 801b16e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801b166:	6862      	ldr	r2, [r4, #4]
 801b168:	7a53      	ldrb	r3, [r2, #9]
 801b16a:	2b00      	cmp	r3, #0
 801b16c:	d0fc      	beq.n	801b168 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 801b16e:	f7e8 fc57 	bl	8003a20 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801b172:	4620      	mov	r0, r4
 801b174:	2100      	movs	r1, #0
 801b176:	f7ff ffd7 	bl	801b128 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 801b17a:	4620      	mov	r0, r4
 801b17c:	f7ff fd74 	bl	801ac68 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801b180:	bd10      	pop	{r4, pc}
 801b182:	bf00      	nop
 801b184:	2402623e 	.word	0x2402623e

0801b188 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 801b188:	4770      	bx	lr

0801b18a <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 801b18a:	2000      	movs	r0, #0
 801b18c:	4770      	bx	lr

0801b18e <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 801b18e:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 801b192:	1a13      	subs	r3, r2, r0
 801b194:	4258      	negs	r0, r3
 801b196:	4158      	adcs	r0, r3
 801b198:	4770      	bx	lr

0801b19a <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 801b19a:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 801b19e:	1a9b      	subs	r3, r3, r2
 801b1a0:	2b00      	cmp	r3, #0
 801b1a2:	bfdc      	itt	le
 801b1a4:	6882      	ldrle	r2, [r0, #8]
 801b1a6:	189b      	addle	r3, r3, r2
 801b1a8:	2b01      	cmp	r3, #1
 801b1aa:	bfcc      	ite	gt
 801b1ac:	2000      	movgt	r0, #0
 801b1ae:	2001      	movle	r0, #1
 801b1b0:	4770      	bx	lr

0801b1b2 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 801b1b2:	6902      	ldr	r2, [r0, #16]
 801b1b4:	6843      	ldr	r3, [r0, #4]
 801b1b6:	2024      	movs	r0, #36	; 0x24
 801b1b8:	fb00 3002 	mla	r0, r0, r2, r3
 801b1bc:	4770      	bx	lr

0801b1be <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 801b1be:	6803      	ldr	r3, [r0, #0]
 801b1c0:	691b      	ldr	r3, [r3, #16]
 801b1c2:	4718      	bx	r3

0801b1c4 <_ZN8touchgfx13DMA_Interface7executeEv>:
 801b1c4:	2301      	movs	r3, #1
 801b1c6:	b570      	push	{r4, r5, r6, lr}
 801b1c8:	7203      	strb	r3, [r0, #8]
 801b1ca:	4604      	mov	r4, r0
 801b1cc:	6840      	ldr	r0, [r0, #4]
 801b1ce:	6803      	ldr	r3, [r0, #0]
 801b1d0:	699b      	ldr	r3, [r3, #24]
 801b1d2:	4798      	blx	r3
 801b1d4:	6803      	ldr	r3, [r0, #0]
 801b1d6:	4605      	mov	r5, r0
 801b1d8:	2b40      	cmp	r3, #64	; 0x40
 801b1da:	d00c      	beq.n	801b1f6 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801b1dc:	d810      	bhi.n	801b200 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 801b1de:	2b04      	cmp	r3, #4
 801b1e0:	d01d      	beq.n	801b21e <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 801b1e2:	d804      	bhi.n	801b1ee <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 801b1e4:	2b01      	cmp	r3, #1
 801b1e6:	d006      	beq.n	801b1f6 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801b1e8:	2b02      	cmp	r3, #2
 801b1ea:	d02c      	beq.n	801b246 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 801b1ec:	bd70      	pop	{r4, r5, r6, pc}
 801b1ee:	2b08      	cmp	r3, #8
 801b1f0:	d01d      	beq.n	801b22e <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 801b1f2:	2b20      	cmp	r3, #32
 801b1f4:	d1fa      	bne.n	801b1ec <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 801b1f6:	6823      	ldr	r3, [r4, #0]
 801b1f8:	4620      	mov	r0, r4
 801b1fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b1fc:	4798      	blx	r3
 801b1fe:	e013      	b.n	801b228 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 801b200:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801b204:	d0f7      	beq.n	801b1f6 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801b206:	d804      	bhi.n	801b212 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 801b208:	2b80      	cmp	r3, #128	; 0x80
 801b20a:	d0f4      	beq.n	801b1f6 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801b20c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801b210:	e7f0      	b.n	801b1f4 <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 801b212:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801b216:	d0ee      	beq.n	801b1f6 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801b218:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801b21c:	e7e5      	b.n	801b1ea <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 801b21e:	6823      	ldr	r3, [r4, #0]
 801b220:	7f01      	ldrb	r1, [r0, #28]
 801b222:	4620      	mov	r0, r4
 801b224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b226:	4798      	blx	r3
 801b228:	6823      	ldr	r3, [r4, #0]
 801b22a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b22c:	e006      	b.n	801b23c <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 801b22e:	6823      	ldr	r3, [r4, #0]
 801b230:	7f01      	ldrb	r1, [r0, #28]
 801b232:	4620      	mov	r0, r4
 801b234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b236:	4798      	blx	r3
 801b238:	6823      	ldr	r3, [r4, #0]
 801b23a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b23c:	4629      	mov	r1, r5
 801b23e:	4620      	mov	r0, r4
 801b240:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b244:	4718      	bx	r3
 801b246:	6823      	ldr	r3, [r4, #0]
 801b248:	4620      	mov	r0, r4
 801b24a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b24c:	4798      	blx	r3
 801b24e:	e7f3      	b.n	801b238 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

0801b250 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 801b250:	4770      	bx	lr

0801b252 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 801b252:	4770      	bx	lr

0801b254 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 801b254:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 801b258:	b510      	push	{r4, lr}
 801b25a:	1ad2      	subs	r2, r2, r3
 801b25c:	2a00      	cmp	r2, #0
 801b25e:	bfdc      	itt	le
 801b260:	6884      	ldrle	r4, [r0, #8]
 801b262:	1912      	addle	r2, r2, r4
 801b264:	2a01      	cmp	r2, #1
 801b266:	dd16      	ble.n	801b296 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 801b268:	6842      	ldr	r2, [r0, #4]
 801b26a:	2424      	movs	r4, #36	; 0x24
 801b26c:	fb04 2303 	mla	r3, r4, r3, r2
 801b270:	f101 0220 	add.w	r2, r1, #32
 801b274:	f851 4b04 	ldr.w	r4, [r1], #4
 801b278:	4291      	cmp	r1, r2
 801b27a:	f843 4b04 	str.w	r4, [r3], #4
 801b27e:	d1f9      	bne.n	801b274 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 801b280:	780a      	ldrb	r2, [r1, #0]
 801b282:	701a      	strb	r2, [r3, #0]
 801b284:	68c3      	ldr	r3, [r0, #12]
 801b286:	6882      	ldr	r2, [r0, #8]
 801b288:	f3bf 8f5b 	dmb	ish
 801b28c:	3301      	adds	r3, #1
 801b28e:	429a      	cmp	r2, r3
 801b290:	bfd8      	it	le
 801b292:	1a9b      	suble	r3, r3, r2
 801b294:	60c3      	str	r3, [r0, #12]
 801b296:	bd10      	pop	{r4, pc}

0801b298 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 801b298:	6903      	ldr	r3, [r0, #16]
 801b29a:	6882      	ldr	r2, [r0, #8]
 801b29c:	f3bf 8f5b 	dmb	ish
 801b2a0:	3301      	adds	r3, #1
 801b2a2:	429a      	cmp	r2, r3
 801b2a4:	bfd8      	it	le
 801b2a6:	1a9b      	suble	r3, r3, r2
 801b2a8:	6103      	str	r3, [r0, #16]
 801b2aa:	4770      	bx	lr

0801b2ac <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 801b2ac:	b570      	push	{r4, r5, r6, lr}
 801b2ae:	4604      	mov	r4, r0
 801b2b0:	460e      	mov	r6, r1
 801b2b2:	6860      	ldr	r0, [r4, #4]
 801b2b4:	6803      	ldr	r3, [r0, #0]
 801b2b6:	685b      	ldr	r3, [r3, #4]
 801b2b8:	4798      	blx	r3
 801b2ba:	2800      	cmp	r0, #0
 801b2bc:	d1f9      	bne.n	801b2b2 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 801b2be:	4d0d      	ldr	r5, [pc, #52]	; (801b2f4 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 801b2c0:	6828      	ldr	r0, [r5, #0]
 801b2c2:	6803      	ldr	r3, [r0, #0]
 801b2c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801b2c6:	4798      	blx	r3
 801b2c8:	f7e8 fbc4 	bl	8003a54 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 801b2cc:	6828      	ldr	r0, [r5, #0]
 801b2ce:	2101      	movs	r1, #1
 801b2d0:	f7ff ff2a 	bl	801b128 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 801b2d4:	6860      	ldr	r0, [r4, #4]
 801b2d6:	4631      	mov	r1, r6
 801b2d8:	6803      	ldr	r3, [r0, #0]
 801b2da:	689b      	ldr	r3, [r3, #8]
 801b2dc:	4798      	blx	r3
 801b2de:	6823      	ldr	r3, [r4, #0]
 801b2e0:	4620      	mov	r0, r4
 801b2e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b2e4:	4798      	blx	r3
 801b2e6:	6828      	ldr	r0, [r5, #0]
 801b2e8:	6803      	ldr	r3, [r0, #0]
 801b2ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b2ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801b2f0:	4718      	bx	r3
 801b2f2:	bf00      	nop
 801b2f4:	24026240 	.word	0x24026240

0801b2f8 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 801b2f8:	b508      	push	{r3, lr}
 801b2fa:	f7e8 fb91 	bl	8003a20 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801b2fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801b302:	f7e8 bb9b 	b.w	8003a3c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0801b306 <_ZN8touchgfx13DMA_Interface5startEv>:
 801b306:	b510      	push	{r4, lr}
 801b308:	4604      	mov	r4, r0
 801b30a:	6840      	ldr	r0, [r0, #4]
 801b30c:	6803      	ldr	r3, [r0, #0]
 801b30e:	681b      	ldr	r3, [r3, #0]
 801b310:	4798      	blx	r3
 801b312:	b948      	cbnz	r0, 801b328 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801b314:	7a63      	ldrb	r3, [r4, #9]
 801b316:	b13b      	cbz	r3, 801b328 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801b318:	7a23      	ldrb	r3, [r4, #8]
 801b31a:	b92b      	cbnz	r3, 801b328 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801b31c:	6823      	ldr	r3, [r4, #0]
 801b31e:	4620      	mov	r0, r4
 801b320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b322:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b326:	4718      	bx	r3
 801b328:	bd10      	pop	{r4, pc}

0801b32a <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 801b32a:	b570      	push	{r4, r5, r6, lr}
 801b32c:	4604      	mov	r4, r0
 801b32e:	6840      	ldr	r0, [r0, #4]
 801b330:	6803      	ldr	r3, [r0, #0]
 801b332:	681b      	ldr	r3, [r3, #0]
 801b334:	4798      	blx	r3
 801b336:	4605      	mov	r5, r0
 801b338:	b930      	cbnz	r0, 801b348 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 801b33a:	7a23      	ldrb	r3, [r4, #8]
 801b33c:	b123      	cbz	r3, 801b348 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 801b33e:	6860      	ldr	r0, [r4, #4]
 801b340:	6803      	ldr	r3, [r0, #0]
 801b342:	695b      	ldr	r3, [r3, #20]
 801b344:	4798      	blx	r3
 801b346:	7225      	strb	r5, [r4, #8]
 801b348:	6860      	ldr	r0, [r4, #4]
 801b34a:	6803      	ldr	r3, [r0, #0]
 801b34c:	681b      	ldr	r3, [r3, #0]
 801b34e:	4798      	blx	r3
 801b350:	b928      	cbnz	r0, 801b35e <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 801b352:	6823      	ldr	r3, [r4, #0]
 801b354:	4620      	mov	r0, r4
 801b356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b358:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b35c:	4718      	bx	r3
 801b35e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b362:	f7e8 bb83 	b.w	8003a6c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>
	...

0801b368 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 801b368:	b510      	push	{r4, lr}
 801b36a:	6082      	str	r2, [r0, #8]
 801b36c:	2200      	movs	r2, #0
 801b36e:	4c03      	ldr	r4, [pc, #12]	; (801b37c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 801b370:	e9c0 2203 	strd	r2, r2, [r0, #12]
 801b374:	e9c0 4100 	strd	r4, r1, [r0]
 801b378:	bd10      	pop	{r4, pc}
 801b37a:	bf00      	nop
 801b37c:	0802d3f8 	.word	0x0802d3f8

0801b380 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 801b380:	6840      	ldr	r0, [r0, #4]
 801b382:	6803      	ldr	r3, [r0, #0]
 801b384:	681b      	ldr	r3, [r3, #0]
 801b386:	4718      	bx	r3

0801b388 <_ZNK8touchgfx5Image17invalidateContentEv>:
 801b388:	b508      	push	{r3, lr}
 801b38a:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 801b38e:	b10b      	cbz	r3, 801b394 <_ZNK8touchgfx5Image17invalidateContentEv+0xc>
 801b390:	f7ea f856 	bl	8005440 <_ZNK8touchgfx8Drawable17invalidateContentEv>
 801b394:	bd08      	pop	{r3, pc}

0801b396 <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>:
 801b396:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 801b39a:	4770      	bx	lr

0801b39c <_ZN8touchgfx13ScalableImage19getScalingAlgorithmEv>:
 801b39c:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
 801b3a0:	4770      	bx	lr

0801b3a2 <_ZNK8touchgfx13ScalableImage12getSolidRectEv>:
 801b3a2:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801b3a4:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 801b3a8:	4605      	mov	r5, r0
 801b3aa:	2bff      	cmp	r3, #255	; 0xff
 801b3ac:	d11e      	bne.n	801b3ec <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x4a>
 801b3ae:	f101 0426 	add.w	r4, r1, #38	; 0x26
 801b3b2:	4668      	mov	r0, sp
 801b3b4:	4621      	mov	r1, r4
 801b3b6:	f005 f99b 	bl	80206f0 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801b3ba:	f9bd 6004 	ldrsh.w	r6, [sp, #4]
 801b3be:	4620      	mov	r0, r4
 801b3c0:	f005 f92e 	bl	8020620 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801b3c4:	4286      	cmp	r6, r0
 801b3c6:	d111      	bne.n	801b3ec <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x4a>
 801b3c8:	4621      	mov	r1, r4
 801b3ca:	a802      	add	r0, sp, #8
 801b3cc:	f005 f990 	bl	80206f0 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801b3d0:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 801b3d4:	4620      	mov	r0, r4
 801b3d6:	f005 f957 	bl	8020688 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801b3da:	4286      	cmp	r6, r0
 801b3dc:	d106      	bne.n	801b3ec <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x4a>
 801b3de:	4621      	mov	r1, r4
 801b3e0:	4628      	mov	r0, r5
 801b3e2:	f005 f985 	bl	80206f0 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801b3e6:	4628      	mov	r0, r5
 801b3e8:	b004      	add	sp, #16
 801b3ea:	bd70      	pop	{r4, r5, r6, pc}
 801b3ec:	2300      	movs	r3, #0
 801b3ee:	802b      	strh	r3, [r5, #0]
 801b3f0:	806b      	strh	r3, [r5, #2]
 801b3f2:	80ab      	strh	r3, [r5, #4]
 801b3f4:	80eb      	strh	r3, [r5, #6]
 801b3f6:	e7f6      	b.n	801b3e6 <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x44>

0801b3f8 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>:
 801b3f8:	b538      	push	{r3, r4, r5, lr}
 801b3fa:	2300      	movs	r3, #0
 801b3fc:	2501      	movs	r5, #1
 801b3fe:	4604      	mov	r4, r0
 801b400:	8083      	strh	r3, [r0, #4]
 801b402:	80c3      	strh	r3, [r0, #6]
 801b404:	8103      	strh	r3, [r0, #8]
 801b406:	8143      	strh	r3, [r0, #10]
 801b408:	8183      	strh	r3, [r0, #12]
 801b40a:	81c3      	strh	r3, [r0, #14]
 801b40c:	8203      	strh	r3, [r0, #16]
 801b40e:	8243      	strh	r3, [r0, #18]
 801b410:	61c3      	str	r3, [r0, #28]
 801b412:	8403      	strh	r3, [r0, #32]
 801b414:	8443      	strh	r3, [r0, #34]	; 0x22
 801b416:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
 801b41a:	f880 5025 	strb.w	r5, [r0, #37]	; 0x25
 801b41e:	e9c0 3305 	strd	r3, r3, [r0, #20]
 801b422:	4b07      	ldr	r3, [pc, #28]	; (801b440 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE+0x48>)
 801b424:	6003      	str	r3, [r0, #0]
 801b426:	880b      	ldrh	r3, [r1, #0]
 801b428:	84c3      	strh	r3, [r0, #38]	; 0x26
 801b42a:	23ff      	movs	r3, #255	; 0xff
 801b42c:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 801b430:	f000 fdf2 	bl	801c018 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 801b434:	4b03      	ldr	r3, [pc, #12]	; (801b444 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE+0x4c>)
 801b436:	f884 5029 	strb.w	r5, [r4, #41]	; 0x29
 801b43a:	4620      	mov	r0, r4
 801b43c:	6023      	str	r3, [r4, #0]
 801b43e:	bd38      	pop	{r3, r4, r5, pc}
 801b440:	0802d588 	.word	0x0802d588
 801b444:	0802d41c 	.word	0x0802d41c

0801b448 <_ZNK8touchgfx13ScalableImage19lookupRenderVariantEv>:
 801b448:	4603      	mov	r3, r0
 801b44a:	3026      	adds	r0, #38	; 0x26
 801b44c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 801b450:	b90b      	cbnz	r3, 801b456 <_ZNK8touchgfx13ScalableImage19lookupRenderVariantEv+0xe>
 801b452:	f003 bcbb 	b.w	801edcc <_ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE>
 801b456:	f003 bcc9 	b.w	801edec <_ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE>
	...

0801b45c <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_>:
 801b45c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b460:	4604      	mov	r4, r0
 801b462:	469b      	mov	fp, r3
 801b464:	f9b0 c008 	ldrsh.w	ip, [r0, #8]
 801b468:	b0b3      	sub	sp, #204	; 0xcc
 801b46a:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801b46e:	f9b1 6000 	ldrsh.w	r6, [r1]
 801b472:	8888      	ldrh	r0, [r1, #4]
 801b474:	9206      	str	r2, [sp, #24]
 801b476:	2200      	movs	r2, #0
 801b478:	4430      	add	r0, r6
 801b47a:	9211      	str	r2, [sp, #68]	; 0x44
 801b47c:	b280      	uxth	r0, r0
 801b47e:	fa0f fe80 	sxth.w	lr, r0
 801b482:	4596      	cmp	lr, r2
 801b484:	e9dd a93c 	ldrd	sl, r9, [sp, #240]	; 0xf0
 801b488:	e9dd 873e 	ldrd	r8, r7, [sp, #248]	; 0xf8
 801b48c:	f340 811a 	ble.w	801b6c4 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x268>
 801b490:	45b4      	cmp	ip, r6
 801b492:	f340 8117 	ble.w	801b6c4 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x268>
 801b496:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 801b49a:	88ca      	ldrh	r2, [r1, #6]
 801b49c:	442a      	add	r2, r5
 801b49e:	b292      	uxth	r2, r2
 801b4a0:	b211      	sxth	r1, r2
 801b4a2:	2900      	cmp	r1, #0
 801b4a4:	f340 810e 	ble.w	801b6c4 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x268>
 801b4a8:	42ab      	cmp	r3, r5
 801b4aa:	f340 810b 	ble.w	801b6c4 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x268>
 801b4ae:	45f4      	cmp	ip, lr
 801b4b0:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 801b4b4:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 801b4b8:	bfb8      	it	lt
 801b4ba:	fa1f f08c 	uxthlt.w	r0, ip
 801b4be:	428b      	cmp	r3, r1
 801b4c0:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
 801b4c4:	bfb8      	it	lt
 801b4c6:	b29a      	uxthlt	r2, r3
 801b4c8:	1b80      	subs	r0, r0, r6
 801b4ca:	f8ad 5046 	strh.w	r5, [sp, #70]	; 0x46
 801b4ce:	1b52      	subs	r2, r2, r5
 801b4d0:	f8ad 0048 	strh.w	r0, [sp, #72]	; 0x48
 801b4d4:	f8ad 204a 	strh.w	r2, [sp, #74]	; 0x4a
 801b4d8:	ab11      	add	r3, sp, #68	; 0x44
 801b4da:	ad13      	add	r5, sp, #76	; 0x4c
 801b4dc:	6822      	ldr	r2, [r4, #0]
 801b4de:	1d26      	adds	r6, r4, #4
 801b4e0:	9307      	str	r3, [sp, #28]
 801b4e2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 801b4e4:	e893 0003 	ldmia.w	r3, {r0, r1}
 801b4e8:	e885 0003 	stmia.w	r5, {r0, r1}
 801b4ec:	4629      	mov	r1, r5
 801b4ee:	4620      	mov	r0, r4
 801b4f0:	4790      	blx	r2
 801b4f2:	4621      	mov	r1, r4
 801b4f4:	a815      	add	r0, sp, #84	; 0x54
 801b4f6:	f003 fbc5 	bl	801ec84 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b4fa:	a815      	add	r0, sp, #84	; 0x54
 801b4fc:	f002 f928 	bl	801d750 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b500:	9b07      	ldr	r3, [sp, #28]
 801b502:	4631      	mov	r1, r6
 801b504:	4618      	mov	r0, r3
 801b506:	f002 f967 	bl	801d7d8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801b50a:	4628      	mov	r0, r5
 801b50c:	f104 0526 	add.w	r5, r4, #38	; 0x26
 801b510:	f002 f91e 	bl	801d750 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b514:	4628      	mov	r0, r5
 801b516:	f005 f96f 	bl	80207f8 <_ZNK8touchgfx6Bitmap7getDataEv>
 801b51a:	9007      	str	r0, [sp, #28]
 801b51c:	2800      	cmp	r0, #0
 801b51e:	f000 80ce 	beq.w	801b6be <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x262>
 801b522:	f8db 2000 	ldr.w	r2, [fp]
 801b526:	a90d      	add	r1, sp, #52	; 0x34
 801b528:	a809      	add	r0, sp, #36	; 0x24
 801b52a:	9209      	str	r2, [sp, #36]	; 0x24
 801b52c:	f8db 2004 	ldr.w	r2, [fp, #4]
 801b530:	920a      	str	r2, [sp, #40]	; 0x28
 801b532:	f8db 2008 	ldr.w	r2, [fp, #8]
 801b536:	920b      	str	r2, [sp, #44]	; 0x2c
 801b538:	f8db 200c 	ldr.w	r2, [fp, #12]
 801b53c:	920c      	str	r2, [sp, #48]	; 0x30
 801b53e:	f8da 2000 	ldr.w	r2, [sl]
 801b542:	920d      	str	r2, [sp, #52]	; 0x34
 801b544:	f8da 2004 	ldr.w	r2, [sl, #4]
 801b548:	920e      	str	r2, [sp, #56]	; 0x38
 801b54a:	f8da 2008 	ldr.w	r2, [sl, #8]
 801b54e:	920f      	str	r2, [sp, #60]	; 0x3c
 801b550:	f8da 200c 	ldr.w	r2, [sl, #12]
 801b554:	9210      	str	r2, [sp, #64]	; 0x40
 801b556:	4632      	mov	r2, r6
 801b558:	f002 f922 	bl	801d7a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 801b55c:	4632      	mov	r2, r6
 801b55e:	a90e      	add	r1, sp, #56	; 0x38
 801b560:	a80a      	add	r0, sp, #40	; 0x28
 801b562:	f002 f91d 	bl	801d7a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 801b566:	4632      	mov	r2, r6
 801b568:	a90f      	add	r1, sp, #60	; 0x3c
 801b56a:	a80b      	add	r0, sp, #44	; 0x2c
 801b56c:	f002 f918 	bl	801d7a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 801b570:	4632      	mov	r2, r6
 801b572:	a910      	add	r1, sp, #64	; 0x40
 801b574:	a80c      	add	r0, sp, #48	; 0x30
 801b576:	f002 f913 	bl	801d7a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 801b57a:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 801b57e:	edd7 3a00 	vldr	s7, [r7]
 801b582:	eef0 6a67 	vmov.f32	s13, s15
 801b586:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 801b58a:	ed97 5a01 	vldr	s10, [r7, #4]
 801b58e:	eeb0 7a67 	vmov.f32	s14, s15
 801b592:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 801b596:	eefe 6ace 	vcvt.s32.f32	s13, s13, #4
 801b59a:	edd9 2a00 	vldr	s5, [r9]
 801b59e:	eeb0 6a67 	vmov.f32	s12, s15
 801b5a2:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
 801b5a6:	eebe 7ace 	vcvt.s32.f32	s14, s14, #4
 801b5aa:	ed98 3a00 	vldr	s6, [r8]
 801b5ae:	ed99 4a01 	vldr	s8, [r9, #4]
 801b5b2:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 801b5b6:	edd8 4a01 	vldr	s9, [r8, #4]
 801b5ba:	edd9 5a02 	vldr	s11, [r9, #8]
 801b5be:	f8d9 e00c 	ldr.w	lr, [r9, #12]
 801b5c2:	ee16 6a10 	vmov	r6, s12
 801b5c6:	eeb0 6a67 	vmov.f32	s12, s15
 801b5ca:	eddd 7a0f 	vldr	s15, [sp, #60]	; 0x3c
 801b5ce:	f8d8 c00c 	ldr.w	ip, [r8, #12]
 801b5d2:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 801b5d6:	edcd 6a1f 	vstr	s13, [sp, #124]	; 0x7c
 801b5da:	edcd 2a20 	vstr	s5, [sp, #128]	; 0x80
 801b5de:	ed8d 3a21 	vstr	s6, [sp, #132]	; 0x84
 801b5e2:	ee16 0a10 	vmov	r0, s12
 801b5e6:	eeb0 6a67 	vmov.f32	s12, s15
 801b5ea:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
 801b5ee:	edcd 3a22 	vstr	s7, [sp, #136]	; 0x88
 801b5f2:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 801b5f6:	ed8d 7a23 	vstr	s14, [sp, #140]	; 0x8c
 801b5fa:	ed8d 4a25 	vstr	s8, [sp, #148]	; 0x94
 801b5fe:	edcd 4a26 	vstr	s9, [sp, #152]	; 0x98
 801b602:	ee16 1a10 	vmov	r1, s12
 801b606:	eeb0 6a67 	vmov.f32	s12, s15
 801b60a:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
 801b60e:	ed8d 5a27 	vstr	s10, [sp, #156]	; 0x9c
 801b612:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 801b616:	f8d7 a008 	ldr.w	sl, [r7, #8]
 801b61a:	f8d8 b008 	ldr.w	fp, [r8, #8]
 801b61e:	eefe 7ace 	vcvt.s32.f32	s15, s15, #4
 801b622:	68ff      	ldr	r7, [r7, #12]
 801b624:	ee16 2a10 	vmov	r2, s12
 801b628:	ed9d 6a09 	vldr	s12, [sp, #36]	; 0x24
 801b62c:	9624      	str	r6, [sp, #144]	; 0x90
 801b62e:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 801b632:	e9cd 0128 	strd	r0, r1, [sp, #160]	; 0xa0
 801b636:	ed8d 6a1e 	vstr	s12, [sp, #120]	; 0x78
 801b63a:	4628      	mov	r0, r5
 801b63c:	edcd 5a2a 	vstr	s11, [sp, #168]	; 0xa8
 801b640:	9b06      	ldr	r3, [sp, #24]
 801b642:	922d      	str	r2, [sp, #180]	; 0xb4
 801b644:	4a21      	ldr	r2, [pc, #132]	; (801b6cc <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x270>)
 801b646:	9317      	str	r3, [sp, #92]	; 0x5c
 801b648:	8812      	ldrh	r2, [r2, #0]
 801b64a:	9b07      	ldr	r3, [sp, #28]
 801b64c:	9218      	str	r2, [sp, #96]	; 0x60
 801b64e:	9319      	str	r3, [sp, #100]	; 0x64
 801b650:	edcd 7a2e 	vstr	s15, [sp, #184]	; 0xb8
 801b654:	f8cd e0bc 	str.w	lr, [sp, #188]	; 0xbc
 801b658:	f8cd c0c0 	str.w	ip, [sp, #192]	; 0xc0
 801b65c:	f8cd b0ac 	str.w	fp, [sp, #172]	; 0xac
 801b660:	f8cd a0b0 	str.w	sl, [sp, #176]	; 0xb0
 801b664:	9731      	str	r7, [sp, #196]	; 0xc4
 801b666:	f005 f8f7 	bl	8020858 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801b66a:	901a      	str	r0, [sp, #104]	; 0x68
 801b66c:	4628      	mov	r0, r5
 801b66e:	f004 ffd7 	bl	8020620 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801b672:	901b      	str	r0, [sp, #108]	; 0x6c
 801b674:	4628      	mov	r0, r5
 801b676:	f005 f807 	bl	8020688 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801b67a:	901c      	str	r0, [sp, #112]	; 0x70
 801b67c:	4628      	mov	r0, r5
 801b67e:	f004 ffcf 	bl	8020620 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801b682:	4b13      	ldr	r3, [pc, #76]	; (801b6d0 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x274>)
 801b684:	901d      	str	r0, [sp, #116]	; 0x74
 801b686:	681b      	ldr	r3, [r3, #0]
 801b688:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801b68c:	b10a      	cbz	r2, 801b692 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x236>
 801b68e:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
 801b690:	b905      	cbnz	r5, 801b694 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x238>
 801b692:	689d      	ldr	r5, [r3, #8]
 801b694:	682b      	ldr	r3, [r5, #0]
 801b696:	4620      	mov	r0, r4
 801b698:	6c1e      	ldr	r6, [r3, #64]	; 0x40
 801b69a:	f7ff fed5 	bl	801b448 <_ZNK8touchgfx13ScalableImage19lookupRenderVariantEv>
 801b69e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b6a2:	aa1e      	add	r2, sp, #120	; 0x78
 801b6a4:	a917      	add	r1, sp, #92	; 0x5c
 801b6a6:	9304      	str	r3, [sp, #16]
 801b6a8:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 801b6ac:	e9cd 0302 	strd	r0, r3, [sp, #8]
 801b6b0:	ab13      	add	r3, sp, #76	; 0x4c
 801b6b2:	4628      	mov	r0, r5
 801b6b4:	9301      	str	r3, [sp, #4]
 801b6b6:	ab15      	add	r3, sp, #84	; 0x54
 801b6b8:	9300      	str	r3, [sp, #0]
 801b6ba:	ab19      	add	r3, sp, #100	; 0x64
 801b6bc:	47b0      	blx	r6
 801b6be:	b033      	add	sp, #204	; 0xcc
 801b6c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b6c4:	2300      	movs	r3, #0
 801b6c6:	9312      	str	r3, [sp, #72]	; 0x48
 801b6c8:	e706      	b.n	801b4d8 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x7c>
 801b6ca:	bf00      	nop
 801b6cc:	2402623a 	.word	0x2402623a
 801b6d0:	24026240 	.word	0x24026240

0801b6d4 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE>:
 801b6d4:	b570      	push	{r4, r5, r6, lr}
 801b6d6:	ed2d 8b04 	vpush	{d8-d9}
 801b6da:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 801b6de:	b098      	sub	sp, #96	; 0x60
 801b6e0:	4604      	mov	r4, r0
 801b6e2:	460e      	mov	r6, r1
 801b6e4:	2b00      	cmp	r3, #0
 801b6e6:	d065      	beq.n	801b7b4 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0xe0>
 801b6e8:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 801b6ec:	f100 0526 	add.w	r5, r0, #38	; 0x26
 801b6f0:	ed9f 8a37 	vldr	s16, [pc, #220]	; 801b7d0 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0xfc>
 801b6f4:	ee09 3a10 	vmov	s18, r3
 801b6f8:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801b6fc:	4628      	mov	r0, r5
 801b6fe:	ee08 3a90 	vmov	s17, r3
 801b702:	4b34      	ldr	r3, [pc, #208]	; (801b7d4 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x100>)
 801b704:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
 801b708:	930c      	str	r3, [sp, #48]	; 0x30
 801b70a:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 801b70e:	930d      	str	r3, [sp, #52]	; 0x34
 801b710:	930e      	str	r3, [sp, #56]	; 0x38
 801b712:	ee39 9a08 	vadd.f32	s18, s18, s16
 801b716:	930f      	str	r3, [sp, #60]	; 0x3c
 801b718:	f004 ff82 	bl	8020620 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801b71c:	ee07 0a90 	vmov	s15, r0
 801b720:	4628      	mov	r0, r5
 801b722:	ee78 8a88 	vadd.f32	s17, s17, s16
 801b726:	eef8 9ae7 	vcvt.f32.s32	s19, s15
 801b72a:	f004 ffad 	bl	8020688 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801b72e:	4b2a      	ldr	r3, [pc, #168]	; (801b7d8 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x104>)
 801b730:	ee07 0a90 	vmov	s15, r0
 801b734:	781b      	ldrb	r3, [r3, #0]
 801b736:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801b73a:	eef0 7a48 	vmov.f32	s15, s16
 801b73e:	2b01      	cmp	r3, #1
 801b740:	d13c      	bne.n	801b7bc <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0xe8>
 801b742:	eef0 6a69 	vmov.f32	s13, s19
 801b746:	ee19 3a90 	vmov	r3, s19
 801b74a:	eeb0 6a47 	vmov.f32	s12, s14
 801b74e:	eef0 5a47 	vmov.f32	s11, s14
 801b752:	eef0 9a48 	vmov.f32	s19, s16
 801b756:	eeb0 7a48 	vmov.f32	s14, s16
 801b75a:	9314      	str	r3, [sp, #80]	; 0x50
 801b75c:	ab14      	add	r3, sp, #80	; 0x50
 801b75e:	2200      	movs	r2, #0
 801b760:	4631      	mov	r1, r6
 801b762:	9303      	str	r3, [sp, #12]
 801b764:	ab10      	add	r3, sp, #64	; 0x40
 801b766:	4620      	mov	r0, r4
 801b768:	edcd 7a04 	vstr	s15, [sp, #16]
 801b76c:	9302      	str	r3, [sp, #8]
 801b76e:	ab0c      	add	r3, sp, #48	; 0x30
 801b770:	ed8d 9a05 	vstr	s18, [sp, #20]
 801b774:	9301      	str	r3, [sp, #4]
 801b776:	ab08      	add	r3, sp, #32
 801b778:	ed8d 9a06 	vstr	s18, [sp, #24]
 801b77c:	9300      	str	r3, [sp, #0]
 801b77e:	ab04      	add	r3, sp, #16
 801b780:	edcd 7a07 	vstr	s15, [sp, #28]
 801b784:	edcd 7a08 	vstr	s15, [sp, #32]
 801b788:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
 801b78c:	edcd 8a0a 	vstr	s17, [sp, #40]	; 0x28
 801b790:	edcd 8a0b 	vstr	s17, [sp, #44]	; 0x2c
 801b794:	edcd 7a10 	vstr	s15, [sp, #64]	; 0x40
 801b798:	edcd 9a11 	vstr	s19, [sp, #68]	; 0x44
 801b79c:	edcd 5a12 	vstr	s11, [sp, #72]	; 0x48
 801b7a0:	ed8d 6a13 	vstr	s12, [sp, #76]	; 0x4c
 801b7a4:	edcd 7a15 	vstr	s15, [sp, #84]	; 0x54
 801b7a8:	ed8d 7a16 	vstr	s14, [sp, #88]	; 0x58
 801b7ac:	edcd 6a17 	vstr	s13, [sp, #92]	; 0x5c
 801b7b0:	f7ff fe54 	bl	801b45c <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_>
 801b7b4:	b018      	add	sp, #96	; 0x60
 801b7b6:	ecbd 8b04 	vpop	{d8-d9}
 801b7ba:	bd70      	pop	{r4, r5, r6, pc}
 801b7bc:	eef0 6a47 	vmov.f32	s13, s14
 801b7c0:	ee18 3a10 	vmov	r3, s16
 801b7c4:	eef0 5a69 	vmov.f32	s11, s19
 801b7c8:	eeb0 6a48 	vmov.f32	s12, s16
 801b7cc:	e7c5      	b.n	801b75a <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x86>
 801b7ce:	bf00      	nop
 801b7d0:	00000000 	.word	0x00000000
 801b7d4:	42c80000 	.word	0x42c80000
 801b7d8:	24026238 	.word	0x24026238

0801b7dc <_ZN8touchgfx8TextArea8setWidthEs>:
 801b7dc:	b530      	push	{r4, r5, lr}
 801b7de:	b085      	sub	sp, #20
 801b7e0:	6803      	ldr	r3, [r0, #0]
 801b7e2:	4604      	mov	r4, r0
 801b7e4:	8101      	strh	r1, [r0, #8]
 801b7e6:	466d      	mov	r5, sp
 801b7e8:	4601      	mov	r1, r0
 801b7ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b7ee:	343c      	adds	r4, #60	; 0x3c
 801b7f0:	4628      	mov	r0, r5
 801b7f2:	4798      	blx	r3
 801b7f4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801b7f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801b7fc:	b005      	add	sp, #20
 801b7fe:	bd30      	pop	{r4, r5, pc}

0801b800 <_ZN8touchgfx8TextArea9setHeightEs>:
 801b800:	b530      	push	{r4, r5, lr}
 801b802:	b085      	sub	sp, #20
 801b804:	6803      	ldr	r3, [r0, #0]
 801b806:	4604      	mov	r4, r0
 801b808:	8141      	strh	r1, [r0, #10]
 801b80a:	466d      	mov	r5, sp
 801b80c:	4601      	mov	r1, r0
 801b80e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b812:	343c      	adds	r4, #60	; 0x3c
 801b814:	4628      	mov	r0, r5
 801b816:	4798      	blx	r3
 801b818:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801b81c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801b820:	b005      	add	sp, #20
 801b822:	bd30      	pop	{r4, r5, pc}

0801b824 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
 801b824:	2200      	movs	r2, #0
 801b826:	8002      	strh	r2, [r0, #0]
 801b828:	8042      	strh	r2, [r0, #2]
 801b82a:	8082      	strh	r2, [r0, #4]
 801b82c:	80c2      	strh	r2, [r0, #6]
 801b82e:	4770      	bx	lr

0801b830 <_ZN8touchgfx8TextArea8setAlphaEh>:
 801b830:	f880 1036 	strb.w	r1, [r0, #54]	; 0x36
 801b834:	4770      	bx	lr
	...

0801b838 <_ZN8touchgfx8TextArea12setBaselineYEs>:
 801b838:	b570      	push	{r4, r5, r6, lr}
 801b83a:	6803      	ldr	r3, [r0, #0]
 801b83c:	4604      	mov	r4, r0
 801b83e:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 801b840:	460d      	mov	r5, r1
 801b842:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 801b844:	4b08      	ldr	r3, [pc, #32]	; (801b868 <_ZN8touchgfx8TextArea12setBaselineYEs+0x30>)
 801b846:	681b      	ldr	r3, [r3, #0]
 801b848:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 801b84c:	4b07      	ldr	r3, [pc, #28]	; (801b86c <_ZN8touchgfx8TextArea12setBaselineYEs+0x34>)
 801b84e:	681b      	ldr	r3, [r3, #0]
 801b850:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801b854:	6803      	ldr	r3, [r0, #0]
 801b856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b858:	4798      	blx	r3
 801b85a:	1a29      	subs	r1, r5, r0
 801b85c:	4633      	mov	r3, r6
 801b85e:	4620      	mov	r0, r4
 801b860:	b209      	sxth	r1, r1
 801b862:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b866:	4718      	bx	r3
 801b868:	24026290 	.word	0x24026290
 801b86c:	24026298 	.word	0x24026298

0801b870 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
 801b870:	b570      	push	{r4, r5, r6, lr}
 801b872:	6803      	ldr	r3, [r0, #0]
 801b874:	4604      	mov	r4, r0
 801b876:	4615      	mov	r5, r2
 801b878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b87a:	4798      	blx	r3
 801b87c:	6823      	ldr	r3, [r4, #0]
 801b87e:	4629      	mov	r1, r5
 801b880:	4620      	mov	r0, r4
 801b882:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801b884:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b888:	4718      	bx	r3

0801b88a <_ZNK8touchgfx8TextArea12getWildcard1Ev>:
 801b88a:	2000      	movs	r0, #0
 801b88c:	4770      	bx	lr

0801b88e <_ZNK8touchgfx8TextArea12getWildcard2Ev>:
 801b88e:	2000      	movs	r0, #0
 801b890:	4770      	bx	lr
	...

0801b894 <_ZNK8touchgfx8TextArea12getAlignmentEv>:
 801b894:	4b07      	ldr	r3, [pc, #28]	; (801b8b4 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x20>)
 801b896:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 801b898:	881b      	ldrh	r3, [r3, #0]
 801b89a:	4293      	cmp	r3, r2
 801b89c:	bf81      	itttt	hi
 801b89e:	4b06      	ldrhi	r3, [pc, #24]	; (801b8b8 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x24>)
 801b8a0:	681b      	ldrhi	r3, [r3, #0]
 801b8a2:	eb03 0342 	addhi.w	r3, r3, r2, lsl #1
 801b8a6:	7858      	ldrbhi	r0, [r3, #1]
 801b8a8:	bf8c      	ite	hi
 801b8aa:	f000 0003 	andhi.w	r0, r0, #3
 801b8ae:	2000      	movls	r0, #0
 801b8b0:	4770      	bx	lr
 801b8b2:	bf00      	nop
 801b8b4:	24026294 	.word	0x24026294
 801b8b8:	24026290 	.word	0x24026290

0801b8bc <_ZNK8touchgfx8TextArea13getTextHeightEv>:
 801b8bc:	4b11      	ldr	r3, [pc, #68]	; (801b904 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x48>)
 801b8be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b8c2:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 801b8c4:	4604      	mov	r4, r0
 801b8c6:	881b      	ldrh	r3, [r3, #0]
 801b8c8:	428b      	cmp	r3, r1
 801b8ca:	d918      	bls.n	801b8fe <_ZNK8touchgfx8TextArea13getTextHeightEv+0x42>
 801b8cc:	6803      	ldr	r3, [r0, #0]
 801b8ce:	6f9d      	ldr	r5, [r3, #120]	; 0x78
 801b8d0:	4b0d      	ldr	r3, [pc, #52]	; (801b908 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x4c>)
 801b8d2:	6818      	ldr	r0, [r3, #0]
 801b8d4:	f7ee fb88 	bl	8009fe8 <_ZNK8touchgfx5Texts7getTextEt>
 801b8d8:	6823      	ldr	r3, [r4, #0]
 801b8da:	4606      	mov	r6, r0
 801b8dc:	4620      	mov	r0, r4
 801b8de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801b8e0:	4798      	blx	r3
 801b8e2:	6823      	ldr	r3, [r4, #0]
 801b8e4:	4607      	mov	r7, r0
 801b8e6:	4620      	mov	r0, r4
 801b8e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801b8ec:	4798      	blx	r3
 801b8ee:	463a      	mov	r2, r7
 801b8f0:	4603      	mov	r3, r0
 801b8f2:	4631      	mov	r1, r6
 801b8f4:	4620      	mov	r0, r4
 801b8f6:	46ac      	mov	ip, r5
 801b8f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b8fc:	4760      	bx	ip
 801b8fe:	2000      	movs	r0, #0
 801b900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b904:	24026294 	.word	0x24026294
 801b908:	2402629c 	.word	0x2402629c

0801b90c <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 801b90c:	4b18      	ldr	r3, [pc, #96]	; (801b970 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 801b90e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801b912:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 801b914:	4604      	mov	r4, r0
 801b916:	881b      	ldrh	r3, [r3, #0]
 801b918:	428b      	cmp	r3, r1
 801b91a:	d926      	bls.n	801b96a <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5e>
 801b91c:	4b15      	ldr	r3, [pc, #84]	; (801b974 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 801b91e:	681b      	ldr	r3, [r3, #0]
 801b920:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 801b924:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 801b928:	4b13      	ldr	r3, [pc, #76]	; (801b978 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 801b92a:	7855      	ldrb	r5, [r2, #1]
 801b92c:	681b      	ldr	r3, [r3, #0]
 801b92e:	f3c5 0581 	ubfx	r5, r5, #2, #2
 801b932:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 801b936:	6833      	ldr	r3, [r6, #0]
 801b938:	69df      	ldr	r7, [r3, #28]
 801b93a:	4b10      	ldr	r3, [pc, #64]	; (801b97c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 801b93c:	6818      	ldr	r0, [r3, #0]
 801b93e:	f7ee fb53 	bl	8009fe8 <_ZNK8touchgfx5Texts7getTextEt>
 801b942:	6823      	ldr	r3, [r4, #0]
 801b944:	4680      	mov	r8, r0
 801b946:	4620      	mov	r0, r4
 801b948:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801b94a:	4798      	blx	r3
 801b94c:	6823      	ldr	r3, [r4, #0]
 801b94e:	4681      	mov	r9, r0
 801b950:	4620      	mov	r0, r4
 801b952:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801b956:	4798      	blx	r3
 801b958:	464b      	mov	r3, r9
 801b95a:	9000      	str	r0, [sp, #0]
 801b95c:	4642      	mov	r2, r8
 801b95e:	4629      	mov	r1, r5
 801b960:	4630      	mov	r0, r6
 801b962:	47b8      	blx	r7
 801b964:	b003      	add	sp, #12
 801b966:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b96a:	2000      	movs	r0, #0
 801b96c:	e7fa      	b.n	801b964 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x58>
 801b96e:	bf00      	nop
 801b970:	24026294 	.word	0x24026294
 801b974:	24026290 	.word	0x24026290
 801b978:	24026298 	.word	0x24026298
 801b97c:	2402629c 	.word	0x2402629c

0801b980 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 801b980:	b40e      	push	{r1, r2, r3}
 801b982:	4b30      	ldr	r3, [pc, #192]	; (801ba44 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc4>)
 801b984:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b988:	881a      	ldrh	r2, [r3, #0]
 801b98a:	b09d      	sub	sp, #116	; 0x74
 801b98c:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 801b98e:	4604      	mov	r4, r0
 801b990:	429a      	cmp	r2, r3
 801b992:	d954      	bls.n	801ba3e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xbe>
 801b994:	aa26      	add	r2, sp, #152	; 0x98
 801b996:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 801ba48 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 801b99a:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 801ba4c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xcc>
 801b99e:	9202      	str	r2, [sp, #8]
 801b9a0:	f8d9 2000 	ldr.w	r2, [r9]
 801b9a4:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 801b9a8:	f8d8 3000 	ldr.w	r3, [r8]
 801b9ac:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801b9b0:	682b      	ldr	r3, [r5, #0]
 801b9b2:	4628      	mov	r0, r5
 801b9b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b9b6:	4798      	blx	r3
 801b9b8:	4606      	mov	r6, r0
 801b9ba:	b207      	sxth	r7, r0
 801b9bc:	a803      	add	r0, sp, #12
 801b9be:	f003 fd6c 	bl	801f49a <_ZN8touchgfx12TextProviderC1Ev>
 801b9c2:	682b      	ldr	r3, [r5, #0]
 801b9c4:	4628      	mov	r0, r5
 801b9c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801b9c8:	4798      	blx	r3
 801b9ca:	682b      	ldr	r3, [r5, #0]
 801b9cc:	4682      	mov	sl, r0
 801b9ce:	4628      	mov	r0, r5
 801b9d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b9d2:	4798      	blx	r3
 801b9d4:	4653      	mov	r3, sl
 801b9d6:	9000      	str	r0, [sp, #0]
 801b9d8:	a803      	add	r0, sp, #12
 801b9da:	9a02      	ldr	r2, [sp, #8]
 801b9dc:	9925      	ldr	r1, [sp, #148]	; 0x94
 801b9de:	f003 fdb7 	bl	801f550 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801b9e2:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 801b9e4:	f8d9 3000 	ldr.w	r3, [r9]
 801b9e8:	f894 c037 	ldrb.w	ip, [r4, #55]	; 0x37
 801b9ec:	8925      	ldrh	r5, [r4, #8]
 801b9ee:	eb03 0142 	add.w	r1, r3, r2, lsl #1
 801b9f2:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 801b9f6:	eba5 050c 	sub.w	r5, r5, ip
 801b9fa:	784a      	ldrb	r2, [r1, #1]
 801b9fc:	f8d8 3000 	ldr.w	r3, [r8]
 801ba00:	b22d      	sxth	r5, r5
 801ba02:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
 801ba06:	f3c2 0281 	ubfx	r2, r2, #2, #2
 801ba0a:	9500      	str	r5, [sp, #0]
 801ba0c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801ba10:	a803      	add	r0, sp, #12
 801ba12:	f001 fbab 	bl	801d16c <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 801ba16:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 801ba1a:	b203      	sxth	r3, r0
 801ba1c:	18b9      	adds	r1, r7, r2
 801ba1e:	2900      	cmp	r1, #0
 801ba20:	dd0b      	ble.n	801ba3a <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xba>
 801ba22:	3b01      	subs	r3, #1
 801ba24:	fb13 f302 	smulbb	r3, r3, r2
 801ba28:	fb16 3300 	smlabb	r3, r6, r0, r3
 801ba2c:	b21f      	sxth	r7, r3
 801ba2e:	4638      	mov	r0, r7
 801ba30:	b01d      	add	sp, #116	; 0x74
 801ba32:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ba36:	b003      	add	sp, #12
 801ba38:	4770      	bx	lr
 801ba3a:	2b00      	cmp	r3, #0
 801ba3c:	dcf7      	bgt.n	801ba2e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 801ba3e:	2700      	movs	r7, #0
 801ba40:	e7f5      	b.n	801ba2e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 801ba42:	bf00      	nop
 801ba44:	24026294 	.word	0x24026294
 801ba48:	24026290 	.word	0x24026290
 801ba4c:	24026298 	.word	0x24026298

0801ba50 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>:
 801ba50:	4bbd      	ldr	r3, [pc, #756]	; (801bd48 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2f8>)
 801ba52:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ba56:	460c      	mov	r4, r1
 801ba58:	881b      	ldrh	r3, [r3, #0]
 801ba5a:	8d89      	ldrh	r1, [r1, #44]	; 0x2c
 801ba5c:	b0a9      	sub	sp, #164	; 0xa4
 801ba5e:	4680      	mov	r8, r0
 801ba60:	428b      	cmp	r3, r1
 801ba62:	d809      	bhi.n	801ba78 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28>
 801ba64:	2300      	movs	r3, #0
 801ba66:	f04f 32ff 	mov.w	r2, #4294967295
 801ba6a:	6083      	str	r3, [r0, #8]
 801ba6c:	e9c0 3200 	strd	r3, r2, [r0]
 801ba70:	4640      	mov	r0, r8
 801ba72:	b029      	add	sp, #164	; 0xa4
 801ba74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ba78:	4eb4      	ldr	r6, [pc, #720]	; (801bd4c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>)
 801ba7a:	6833      	ldr	r3, [r6, #0]
 801ba7c:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 801ba80:	4bb3      	ldr	r3, [pc, #716]	; (801bd50 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x300>)
 801ba82:	681b      	ldr	r3, [r3, #0]
 801ba84:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801ba88:	4bb2      	ldr	r3, [pc, #712]	; (801bd54 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 801ba8a:	6818      	ldr	r0, [r3, #0]
 801ba8c:	f7ee faac 	bl	8009fe8 <_ZNK8touchgfx5Texts7getTextEt>
 801ba90:	682b      	ldr	r3, [r5, #0]
 801ba92:	4681      	mov	r9, r0
 801ba94:	4628      	mov	r0, r5
 801ba96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ba98:	4798      	blx	r3
 801ba9a:	8ea7      	ldrh	r7, [r4, #52]	; 0x34
 801ba9c:	b203      	sxth	r3, r0
 801ba9e:	4682      	mov	sl, r0
 801baa0:	4407      	add	r7, r0
 801baa2:	a80f      	add	r0, sp, #60	; 0x3c
 801baa4:	9304      	str	r3, [sp, #16]
 801baa6:	b2bb      	uxth	r3, r7
 801baa8:	9303      	str	r3, [sp, #12]
 801baaa:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 801baae:	2b00      	cmp	r3, #0
 801bab0:	f040 80a5 	bne.w	801bbfe <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x1ae>
 801bab4:	f003 fcf1 	bl	801f49a <_ZN8touchgfx12TextProviderC1Ev>
 801bab8:	682b      	ldr	r3, [r5, #0]
 801baba:	4628      	mov	r0, r5
 801babc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801babe:	4798      	blx	r3
 801bac0:	682b      	ldr	r3, [r5, #0]
 801bac2:	4606      	mov	r6, r0
 801bac4:	4628      	mov	r0, r5
 801bac6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801bac8:	4798      	blx	r3
 801baca:	6823      	ldr	r3, [r4, #0]
 801bacc:	4607      	mov	r7, r0
 801bace:	4620      	mov	r0, r4
 801bad0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801bad2:	4798      	blx	r3
 801bad4:	6823      	ldr	r3, [r4, #0]
 801bad6:	4683      	mov	fp, r0
 801bad8:	4620      	mov	r0, r4
 801bada:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801bade:	4798      	blx	r3
 801bae0:	463b      	mov	r3, r7
 801bae2:	4649      	mov	r1, r9
 801bae4:	4632      	mov	r2, r6
 801bae6:	2600      	movs	r6, #0
 801bae8:	e9cd b000 	strd	fp, r0, [sp]
 801baec:	a80f      	add	r0, sp, #60	; 0x3c
 801baee:	4637      	mov	r7, r6
 801baf0:	f003 fd43 	bl	801f57a <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 801baf4:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801baf8:	f8df b250 	ldr.w	fp, [pc, #592]	; 801bd4c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>
 801bafc:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 801bb00:	bf0c      	ite	eq
 801bb02:	f9b4 900a 	ldrsheq.w	r9, [r4, #10]
 801bb06:	f9b4 9008 	ldrshne.w	r9, [r4, #8]
 801bb0a:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 801bb0c:	4629      	mov	r1, r5
 801bb0e:	f8db 3000 	ldr.w	r3, [fp]
 801bb12:	a80f      	add	r0, sp, #60	; 0x3c
 801bb14:	3701      	adds	r7, #1
 801bb16:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 801bb1a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801bb1e:	b2bf      	uxth	r7, r7
 801bb20:	785b      	ldrb	r3, [r3, #1]
 801bb22:	f3c3 0381 	ubfx	r3, r3, #2, #2
 801bb26:	f001 f83c 	bl	801cba2 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 801bb2a:	9b03      	ldr	r3, [sp, #12]
 801bb2c:	4286      	cmp	r6, r0
 801bb2e:	eba9 0903 	sub.w	r9, r9, r3
 801bb32:	bfb8      	it	lt
 801bb34:	4606      	movlt	r6, r0
 801bb36:	a80f      	add	r0, sp, #60	; 0x3c
 801bb38:	fa0f f989 	sxth.w	r9, r9
 801bb3c:	b236      	sxth	r6, r6
 801bb3e:	f003 fcd3 	bl	801f4e8 <_ZN8touchgfx12TextProvider11endOfStringEv>
 801bb42:	b918      	cbnz	r0, 801bb4c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 801bb44:	7a2b      	ldrb	r3, [r5, #8]
 801bb46:	444b      	add	r3, r9
 801bb48:	2b00      	cmp	r3, #0
 801bb4a:	dcde      	bgt.n	801bb0a <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xba>
 801bb4c:	9b03      	ldr	r3, [sp, #12]
 801bb4e:	4620      	mov	r0, r4
 801bb50:	9a04      	ldr	r2, [sp, #16]
 801bb52:	fb13 f707 	smulbb	r7, r3, r7
 801bb56:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801bb58:	f895 9009 	ldrb.w	r9, [r5, #9]
 801bb5c:	1aff      	subs	r7, r7, r3
 801bb5e:	b2bf      	uxth	r7, r7
 801bb60:	b23b      	sxth	r3, r7
 801bb62:	429a      	cmp	r2, r3
 801bb64:	bfa8      	it	ge
 801bb66:	4657      	movge	r7, sl
 801bb68:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801bb6c:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 801bb70:	6823      	ldr	r3, [r4, #0]
 801bb72:	444f      	add	r7, r9
 801bb74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801bb76:	bf08      	it	eq
 801bb78:	f9b4 a008 	ldrsheq.w	sl, [r4, #8]
 801bb7c:	fa1f f987 	uxth.w	r9, r7
 801bb80:	bf18      	it	ne
 801bb82:	f9b4 a00a 	ldrshne.w	sl, [r4, #10]
 801bb86:	4798      	blx	r3
 801bb88:	2801      	cmp	r0, #1
 801bb8a:	fa0f f789 	sxth.w	r7, r9
 801bb8e:	b2b3      	uxth	r3, r6
 801bb90:	f000 80e2 	beq.w	801bd58 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x308>
 801bb94:	2802      	cmp	r0, #2
 801bb96:	f894 6037 	ldrb.w	r6, [r4, #55]	; 0x37
 801bb9a:	f000 80e3 	beq.w	801bd64 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x314>
 801bb9e:	7aea      	ldrb	r2, [r5, #11]
 801bba0:	b236      	sxth	r6, r6
 801bba2:	7b2d      	ldrb	r5, [r5, #12]
 801bba4:	1ab6      	subs	r6, r6, r2
 801bba6:	442a      	add	r2, r5
 801bba8:	fa1f fa86 	uxth.w	sl, r6
 801bbac:	4413      	add	r3, r2
 801bbae:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 801bbb2:	fa0f fb8a 	sxth.w	fp, sl
 801bbb6:	b29b      	uxth	r3, r3
 801bbb8:	2a02      	cmp	r2, #2
 801bbba:	b21e      	sxth	r6, r3
 801bbbc:	f000 80d6 	beq.w	801bd6c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x31c>
 801bbc0:	2a03      	cmp	r2, #3
 801bbc2:	f000 80de 	beq.w	801bd82 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x332>
 801bbc6:	2a01      	cmp	r2, #1
 801bbc8:	f040 80e6 	bne.w	801bd98 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x348>
 801bbcc:	8925      	ldrh	r5, [r4, #8]
 801bbce:	4633      	mov	r3, r6
 801bbd0:	463e      	mov	r6, r7
 801bbd2:	eba5 0909 	sub.w	r9, r5, r9
 801bbd6:	461f      	mov	r7, r3
 801bbd8:	465d      	mov	r5, fp
 801bbda:	fa0f fb89 	sxth.w	fp, r9
 801bbde:	4b5d      	ldr	r3, [pc, #372]	; (801bd54 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 801bbe0:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 801bbe2:	6818      	ldr	r0, [r3, #0]
 801bbe4:	f7ee fa00 	bl	8009fe8 <_ZNK8touchgfx5Texts7getTextEt>
 801bbe8:	f8a8 b000 	strh.w	fp, [r8]
 801bbec:	f8a8 5002 	strh.w	r5, [r8, #2]
 801bbf0:	f8a8 6004 	strh.w	r6, [r8, #4]
 801bbf4:	f8a8 7006 	strh.w	r7, [r8, #6]
 801bbf8:	f8c8 0008 	str.w	r0, [r8, #8]
 801bbfc:	e738      	b.n	801ba70 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x20>
 801bbfe:	f003 fc4c 	bl	801f49a <_ZN8touchgfx12TextProviderC1Ev>
 801bc02:	682b      	ldr	r3, [r5, #0]
 801bc04:	4628      	mov	r0, r5
 801bc06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801bc08:	4798      	blx	r3
 801bc0a:	682b      	ldr	r3, [r5, #0]
 801bc0c:	4607      	mov	r7, r0
 801bc0e:	4628      	mov	r0, r5
 801bc10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801bc12:	4798      	blx	r3
 801bc14:	6823      	ldr	r3, [r4, #0]
 801bc16:	4683      	mov	fp, r0
 801bc18:	4620      	mov	r0, r4
 801bc1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801bc1c:	4798      	blx	r3
 801bc1e:	6822      	ldr	r2, [r4, #0]
 801bc20:	9005      	str	r0, [sp, #20]
 801bc22:	4620      	mov	r0, r4
 801bc24:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 801bc28:	4790      	blx	r2
 801bc2a:	9b05      	ldr	r3, [sp, #20]
 801bc2c:	463a      	mov	r2, r7
 801bc2e:	4649      	mov	r1, r9
 801bc30:	9001      	str	r0, [sp, #4]
 801bc32:	a80f      	add	r0, sp, #60	; 0x3c
 801bc34:	9300      	str	r3, [sp, #0]
 801bc36:	465b      	mov	r3, fp
 801bc38:	f003 fc9f 	bl	801f57a <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 801bc3c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801bc40:	f9b4 9008 	ldrsh.w	r9, [r4, #8]
 801bc44:	af0f      	add	r7, sp, #60	; 0x3c
 801bc46:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 801bc4a:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 801bc4e:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 801bc50:	bf0a      	itet	eq
 801bc52:	464a      	moveq	r2, r9
 801bc54:	461a      	movne	r2, r3
 801bc56:	4699      	moveq	r9, r3
 801bc58:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 801bc5c:	f894 0039 	ldrb.w	r0, [r4, #57]	; 0x39
 801bc60:	1ad2      	subs	r2, r2, r3
 801bc62:	6833      	ldr	r3, [r6, #0]
 801bc64:	f9b4 6034 	ldrsh.w	r6, [r4, #52]	; 0x34
 801bc68:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 801bc6c:	7859      	ldrb	r1, [r3, #1]
 801bc6e:	2300      	movs	r3, #0
 801bc70:	9707      	str	r7, [sp, #28]
 801bc72:	f3c1 0181 	ubfx	r1, r1, #2, #2
 801bc76:	f8ad 3018 	strh.w	r3, [sp, #24]
 801bc7a:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 801bc7e:	f88d 1020 	strb.w	r1, [sp, #32]
 801bc82:	9509      	str	r5, [sp, #36]	; 0x24
 801bc84:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801bc88:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 801bc8c:	f8ad 602c 	strh.w	r6, [sp, #44]	; 0x2c
 801bc90:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801bc94:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 801bc98:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801bc9c:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 801bca0:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801bca4:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 801bca8:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 801bcac:	b350      	cbz	r0, 801bd04 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 801bcae:	682b      	ldr	r3, [r5, #0]
 801bcb0:	4628      	mov	r0, r5
 801bcb2:	695b      	ldr	r3, [r3, #20]
 801bcb4:	4798      	blx	r3
 801bcb6:	4607      	mov	r7, r0
 801bcb8:	b320      	cbz	r0, 801bd04 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 801bcba:	9809      	ldr	r0, [sp, #36]	; 0x24
 801bcbc:	4639      	mov	r1, r7
 801bcbe:	6803      	ldr	r3, [r0, #0]
 801bcc0:	68db      	ldr	r3, [r3, #12]
 801bcc2:	4798      	blx	r3
 801bcc4:	4606      	mov	r6, r0
 801bcc6:	b1e8      	cbz	r0, 801bd04 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 801bcc8:	7b43      	ldrb	r3, [r0, #13]
 801bcca:	7a82      	ldrb	r2, [r0, #10]
 801bccc:	005b      	lsls	r3, r3, #1
 801bcce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801bcd2:	4313      	orrs	r3, r2
 801bcd4:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 801bcd8:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 801bcdc:	2b06      	cmp	r3, #6
 801bcde:	d111      	bne.n	801bd04 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 801bce0:	9809      	ldr	r0, [sp, #36]	; 0x24
 801bce2:	4632      	mov	r2, r6
 801bce4:	4639      	mov	r1, r7
 801bce6:	6803      	ldr	r3, [r0, #0]
 801bce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801bcea:	4798      	blx	r3
 801bcec:	7b73      	ldrb	r3, [r6, #13]
 801bcee:	005b      	lsls	r3, r3, #1
 801bcf0:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801bcf4:	7ab3      	ldrb	r3, [r6, #10]
 801bcf6:	4313      	orrs	r3, r2
 801bcf8:	4418      	add	r0, r3
 801bcfa:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801bcfe:	4418      	add	r0, r3
 801bd00:	f8ad 0038 	strh.w	r0, [sp, #56]	; 0x38
 801bd04:	2600      	movs	r6, #0
 801bd06:	4637      	mov	r7, r6
 801bd08:	a806      	add	r0, sp, #24
 801bd0a:	3701      	adds	r7, #1
 801bd0c:	f001 f92b 	bl	801cf66 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 801bd10:	f8bd 0036 	ldrh.w	r0, [sp, #54]	; 0x36
 801bd14:	9b03      	ldr	r3, [sp, #12]
 801bd16:	b2bf      	uxth	r7, r7
 801bd18:	4286      	cmp	r6, r0
 801bd1a:	eba9 0903 	sub.w	r9, r9, r3
 801bd1e:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 801bd22:	bfb8      	it	lt
 801bd24:	4606      	movlt	r6, r0
 801bd26:	fa0f f989 	sxth.w	r9, r9
 801bd2a:	b236      	sxth	r6, r6
 801bd2c:	2b00      	cmp	r3, #0
 801bd2e:	f43f af0d 	beq.w	801bb4c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 801bd32:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 801bd36:	2b00      	cmp	r3, #0
 801bd38:	f47f af08 	bne.w	801bb4c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 801bd3c:	7a2b      	ldrb	r3, [r5, #8]
 801bd3e:	444b      	add	r3, r9
 801bd40:	2b00      	cmp	r3, #0
 801bd42:	dce1      	bgt.n	801bd08 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b8>
 801bd44:	e702      	b.n	801bb4c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 801bd46:	bf00      	nop
 801bd48:	24026294 	.word	0x24026294
 801bd4c:	24026290 	.word	0x24026290
 801bd50:	24026298 	.word	0x24026298
 801bd54:	2402629c 	.word	0x2402629c
 801bd58:	ebaa 0606 	sub.w	r6, sl, r6
 801bd5c:	2002      	movs	r0, #2
 801bd5e:	fb96 f6f0 	sdiv	r6, r6, r0
 801bd62:	e71c      	b.n	801bb9e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x14e>
 801bd64:	441e      	add	r6, r3
 801bd66:	ebaa 0606 	sub.w	r6, sl, r6
 801bd6a:	e718      	b.n	801bb9e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x14e>
 801bd6c:	8925      	ldrh	r5, [r4, #8]
 801bd6e:	1aed      	subs	r5, r5, r3
 801bd70:	eba5 050a 	sub.w	r5, r5, sl
 801bd74:	fa0f fb85 	sxth.w	fp, r5
 801bd78:	8965      	ldrh	r5, [r4, #10]
 801bd7a:	eba5 0509 	sub.w	r5, r5, r9
 801bd7e:	b22d      	sxth	r5, r5
 801bd80:	e72d      	b.n	801bbde <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
 801bd82:	8965      	ldrh	r5, [r4, #10]
 801bd84:	f04f 0b00 	mov.w	fp, #0
 801bd88:	1aed      	subs	r5, r5, r3
 801bd8a:	4633      	mov	r3, r6
 801bd8c:	463e      	mov	r6, r7
 801bd8e:	eba5 050a 	sub.w	r5, r5, sl
 801bd92:	461f      	mov	r7, r3
 801bd94:	b22d      	sxth	r5, r5
 801bd96:	e722      	b.n	801bbde <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
 801bd98:	2500      	movs	r5, #0
 801bd9a:	e720      	b.n	801bbde <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>

0801bd9c <_ZNK8touchgfx8TextArea17invalidateContentEv>:
 801bd9c:	b513      	push	{r0, r1, r4, lr}
 801bd9e:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
 801bda2:	4604      	mov	r4, r0
 801bda4:	b1fb      	cbz	r3, 801bde6 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 801bda6:	4b16      	ldr	r3, [pc, #88]	; (801be00 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x64>)
 801bda8:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 801bdaa:	881b      	ldrh	r3, [r3, #0]
 801bdac:	428b      	cmp	r3, r1
 801bdae:	d91a      	bls.n	801bde6 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 801bdb0:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 801bdb4:	2b00      	cmp	r3, #0
 801bdb6:	dd16      	ble.n	801bde6 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 801bdb8:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801bdbc:	2b00      	cmp	r3, #0
 801bdbe:	dd12      	ble.n	801bde6 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 801bdc0:	4b10      	ldr	r3, [pc, #64]	; (801be04 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x68>)
 801bdc2:	6818      	ldr	r0, [r3, #0]
 801bdc4:	f7ee f910 	bl	8009fe8 <_ZNK8touchgfx5Texts7getTextEt>
 801bdc8:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
 801bdcc:	6822      	ldr	r2, [r4, #0]
 801bdce:	2b00      	cmp	r3, #0
 801bdd0:	db06      	blt.n	801bde0 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 801bdd2:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 801bdd6:	2b00      	cmp	r3, #0
 801bdd8:	db02      	blt.n	801bde0 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 801bdda:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801bddc:	4298      	cmp	r0, r3
 801bdde:	d004      	beq.n	801bdea <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4e>
 801bde0:	6953      	ldr	r3, [r2, #20]
 801bde2:	4620      	mov	r0, r4
 801bde4:	4798      	blx	r3
 801bde6:	b002      	add	sp, #8
 801bde8:	bd10      	pop	{r4, pc}
 801bdea:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 801bdee:	466b      	mov	r3, sp
 801bdf0:	6912      	ldr	r2, [r2, #16]
 801bdf2:	c903      	ldmia	r1, {r0, r1}
 801bdf4:	e883 0003 	stmia.w	r3, {r0, r1}
 801bdf8:	4619      	mov	r1, r3
 801bdfa:	4620      	mov	r0, r4
 801bdfc:	4790      	blx	r2
 801bdfe:	e7f2      	b.n	801bde6 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 801be00:	24026294 	.word	0x24026294
 801be04:	2402629c 	.word	0x2402629c

0801be08 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 801be08:	4b45      	ldr	r3, [pc, #276]	; (801bf20 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x118>)
 801be0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801be0e:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 801be10:	b08e      	sub	sp, #56	; 0x38
 801be12:	881b      	ldrh	r3, [r3, #0]
 801be14:	4604      	mov	r4, r0
 801be16:	4293      	cmp	r3, r2
 801be18:	d97e      	bls.n	801bf18 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 801be1a:	6808      	ldr	r0, [r1, #0]
 801be1c:	ab05      	add	r3, sp, #20
 801be1e:	6849      	ldr	r1, [r1, #4]
 801be20:	4d40      	ldr	r5, [pc, #256]	; (801bf24 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x11c>)
 801be22:	c303      	stmia	r3!, {r0, r1}
 801be24:	4611      	mov	r1, r2
 801be26:	6828      	ldr	r0, [r5, #0]
 801be28:	f7ee f8de 	bl	8009fe8 <_ZNK8touchgfx5Texts7getTextEt>
 801be2c:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
 801be30:	2b00      	cmp	r3, #0
 801be32:	db11      	blt.n	801be58 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 801be34:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 801be38:	2b00      	cmp	r3, #0
 801be3a:	db0d      	blt.n	801be58 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 801be3c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801be3e:	4298      	cmp	r0, r3
 801be40:	d10a      	bne.n	801be58 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 801be42:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 801be46:	ab09      	add	r3, sp, #36	; 0x24
 801be48:	e892 0003 	ldmia.w	r2, {r0, r1}
 801be4c:	e883 0003 	stmia.w	r3, {r0, r1}
 801be50:	4619      	mov	r1, r3
 801be52:	a805      	add	r0, sp, #20
 801be54:	f7fe fa88 	bl	801a368 <_ZN8touchgfx4RectaNERKS0_>
 801be58:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801be5c:	2b00      	cmp	r3, #0
 801be5e:	dd5b      	ble.n	801bf18 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 801be60:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801be64:	2b00      	cmp	r3, #0
 801be66:	dd57      	ble.n	801bf18 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 801be68:	4f2f      	ldr	r7, [pc, #188]	; (801bf28 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x120>)
 801be6a:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 801be6c:	683b      	ldr	r3, [r7, #0]
 801be6e:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 801be72:	4b2e      	ldr	r3, [pc, #184]	; (801bf2c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x124>)
 801be74:	681b      	ldr	r3, [r3, #0]
 801be76:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801be7a:	2e00      	cmp	r6, #0
 801be7c:	d04c      	beq.n	801bf18 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 801be7e:	6823      	ldr	r3, [r4, #0]
 801be80:	4620      	mov	r0, r4
 801be82:	f894 8036 	ldrb.w	r8, [r4, #54]	; 0x36
 801be86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801be88:	4798      	blx	r3
 801be8a:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 801be8c:	683b      	ldr	r3, [r7, #0]
 801be8e:	f9b4 c034 	ldrsh.w	ip, [r4, #52]	; 0x34
 801be92:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 801be96:	f894 e038 	ldrb.w	lr, [r4, #56]	; 0x38
 801be9a:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 801be9e:	785b      	ldrb	r3, [r3, #1]
 801bea0:	f894 7037 	ldrb.w	r7, [r4, #55]	; 0x37
 801bea4:	f3c3 0381 	ubfx	r3, r3, #2, #2
 801bea8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801beaa:	9609      	str	r6, [sp, #36]	; 0x24
 801beac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801beb0:	4b1f      	ldr	r3, [pc, #124]	; (801bf30 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x128>)
 801beb2:	f88d 0028 	strb.w	r0, [sp, #40]	; 0x28
 801beb6:	681b      	ldr	r3, [r3, #0]
 801beb8:	f88d e02a 	strb.w	lr, [sp, #42]	; 0x2a
 801bebc:	910b      	str	r1, [sp, #44]	; 0x2c
 801bebe:	f8ad c030 	strh.w	ip, [sp, #48]	; 0x30
 801bec2:	f88d 8032 	strb.w	r8, [sp, #50]	; 0x32
 801bec6:	f88d 7033 	strb.w	r7, [sp, #51]	; 0x33
 801beca:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
 801bece:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801bed2:	b10a      	cbz	r2, 801bed8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd0>
 801bed4:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 801bed6:	b906      	cbnz	r6, 801beda <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd2>
 801bed8:	689e      	ldr	r6, [r3, #8]
 801beda:	af07      	add	r7, sp, #28
 801bedc:	4621      	mov	r1, r4
 801bede:	4638      	mov	r0, r7
 801bee0:	f002 fed0 	bl	801ec84 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801bee4:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 801bee6:	6828      	ldr	r0, [r5, #0]
 801bee8:	f7ee f87e 	bl	8009fe8 <_ZNK8touchgfx5Texts7getTextEt>
 801beec:	6823      	ldr	r3, [r4, #0]
 801beee:	4605      	mov	r5, r0
 801bef0:	4620      	mov	r0, r4
 801bef2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801bef4:	4798      	blx	r3
 801bef6:	6823      	ldr	r3, [r4, #0]
 801bef8:	4680      	mov	r8, r0
 801befa:	4620      	mov	r0, r4
 801befc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801bf00:	4798      	blx	r3
 801bf02:	ab09      	add	r3, sp, #36	; 0x24
 801bf04:	9501      	str	r5, [sp, #4]
 801bf06:	9300      	str	r3, [sp, #0]
 801bf08:	ab05      	add	r3, sp, #20
 801bf0a:	e9cd 8002 	strd	r8, r0, [sp, #8]
 801bf0e:	4630      	mov	r0, r6
 801bf10:	e897 0006 	ldmia.w	r7, {r1, r2}
 801bf14:	f7ed fff9 	bl	8009f0a <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 801bf18:	b00e      	add	sp, #56	; 0x38
 801bf1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bf1e:	bf00      	nop
 801bf20:	24026294 	.word	0x24026294
 801bf24:	2402629c 	.word	0x2402629c
 801bf28:	24026290 	.word	0x24026290
 801bf2c:	24026298 	.word	0x24026298
 801bf30:	24026240 	.word	0x24026240

0801bf34 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 801bf34:	b538      	push	{r3, r4, r5, lr}
 801bf36:	4b0e      	ldr	r3, [pc, #56]	; (801bf70 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>)
 801bf38:	4604      	mov	r4, r0
 801bf3a:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 801bf3c:	881b      	ldrh	r3, [r3, #0]
 801bf3e:	429a      	cmp	r2, r3
 801bf40:	d214      	bcs.n	801bf6c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 801bf42:	6803      	ldr	r3, [r0, #0]
 801bf44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801bf46:	4798      	blx	r3
 801bf48:	6823      	ldr	r3, [r4, #0]
 801bf4a:	4605      	mov	r5, r0
 801bf4c:	4620      	mov	r0, r4
 801bf4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801bf50:	4798      	blx	r3
 801bf52:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801bf56:	b22d      	sxth	r5, r5
 801bf58:	4601      	mov	r1, r0
 801bf5a:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 801bf5e:	bf06      	itte	eq
 801bf60:	4602      	moveq	r2, r0
 801bf62:	4629      	moveq	r1, r5
 801bf64:	462a      	movne	r2, r5
 801bf66:	4620      	mov	r0, r4
 801bf68:	f7eb fcd0 	bl	800790c <_ZN8touchgfx8Drawable14setWidthHeightEss>
 801bf6c:	bd38      	pop	{r3, r4, r5, pc}
 801bf6e:	bf00      	nop
 801bf70:	24026294 	.word	0x24026294

0801bf74 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 801bf74:	b530      	push	{r4, r5, lr}
 801bf76:	888b      	ldrh	r3, [r1, #4]
 801bf78:	b085      	sub	sp, #20
 801bf7a:	4604      	mov	r4, r0
 801bf7c:	8583      	strh	r3, [r0, #44]	; 0x2c
 801bf7e:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 801bf82:	b923      	cbnz	r3, 801bf8e <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 801bf84:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801bf88:	b90b      	cbnz	r3, 801bf8e <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 801bf8a:	f7ff ffd3 	bl	801bf34 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 801bf8e:	6823      	ldr	r3, [r4, #0]
 801bf90:	466d      	mov	r5, sp
 801bf92:	4621      	mov	r1, r4
 801bf94:	343c      	adds	r4, #60	; 0x3c
 801bf96:	4628      	mov	r0, r5
 801bf98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801bf9c:	4798      	blx	r3
 801bf9e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801bfa2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801bfa6:	b005      	add	sp, #20
 801bfa8:	bd30      	pop	{r4, r5, pc}

0801bfaa <_ZNK8touchgfx3Box12getSolidRectEv>:
 801bfaa:	2300      	movs	r3, #0
 801bfac:	8083      	strh	r3, [r0, #4]
 801bfae:	80c3      	strh	r3, [r0, #6]
 801bfb0:	8003      	strh	r3, [r0, #0]
 801bfb2:	8043      	strh	r3, [r0, #2]
 801bfb4:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 801bfb8:	2bff      	cmp	r3, #255	; 0xff
 801bfba:	bf01      	itttt	eq
 801bfbc:	890b      	ldrheq	r3, [r1, #8]
 801bfbe:	8083      	strheq	r3, [r0, #4]
 801bfc0:	894b      	ldrheq	r3, [r1, #10]
 801bfc2:	80c3      	strheq	r3, [r0, #6]
 801bfc4:	4770      	bx	lr
	...

0801bfc8 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 801bfc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801bfca:	4604      	mov	r4, r0
 801bfcc:	466b      	mov	r3, sp
 801bfce:	6808      	ldr	r0, [r1, #0]
 801bfd0:	6849      	ldr	r1, [r1, #4]
 801bfd2:	c303      	stmia	r3!, {r0, r1}
 801bfd4:	6823      	ldr	r3, [r4, #0]
 801bfd6:	4669      	mov	r1, sp
 801bfd8:	4620      	mov	r0, r4
 801bfda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bfdc:	4798      	blx	r3
 801bfde:	4b08      	ldr	r3, [pc, #32]	; (801c000 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 801bfe0:	681b      	ldr	r3, [r3, #0]
 801bfe2:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801bfe6:	b10a      	cbz	r2, 801bfec <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 801bfe8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801bfea:	b900      	cbnz	r0, 801bfee <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 801bfec:	6898      	ldr	r0, [r3, #8]
 801bfee:	6803      	ldr	r3, [r0, #0]
 801bff0:	4669      	mov	r1, sp
 801bff2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 801bff4:	6a1d      	ldr	r5, [r3, #32]
 801bff6:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 801bffa:	47a8      	blx	r5
 801bffc:	b003      	add	sp, #12
 801bffe:	bd30      	pop	{r4, r5, pc}
 801c000:	24026240 	.word	0x24026240

0801c004 <_ZNK8touchgfx3Box17invalidateContentEv>:
 801c004:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 801c008:	b12a      	cbz	r2, 801c016 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 801c00a:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 801c00e:	b112      	cbz	r2, 801c016 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 801c010:	6803      	ldr	r3, [r0, #0]
 801c012:	695b      	ldr	r3, [r3, #20]
 801c014:	4718      	bx	r3
 801c016:	4770      	bx	lr

0801c018 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 801c018:	b570      	push	{r4, r5, r6, lr}
 801c01a:	880b      	ldrh	r3, [r1, #0]
 801c01c:	460d      	mov	r5, r1
 801c01e:	4604      	mov	r4, r0
 801c020:	84c3      	strh	r3, [r0, #38]	; 0x26
 801c022:	4608      	mov	r0, r1
 801c024:	f004 fafc 	bl	8020620 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801c028:	4606      	mov	r6, r0
 801c02a:	4628      	mov	r0, r5
 801c02c:	f004 fb2c 	bl	8020688 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801c030:	6823      	ldr	r3, [r4, #0]
 801c032:	4605      	mov	r5, r0
 801c034:	4631      	mov	r1, r6
 801c036:	4620      	mov	r0, r4
 801c038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c03a:	4798      	blx	r3
 801c03c:	6823      	ldr	r3, [r4, #0]
 801c03e:	4629      	mov	r1, r5
 801c040:	4620      	mov	r0, r4
 801c042:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801c044:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c048:	4718      	bx	r3

0801c04a <_ZNK8touchgfx5Image12getSolidRectEv>:
 801c04a:	b510      	push	{r4, lr}
 801c04c:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 801c050:	4604      	mov	r4, r0
 801c052:	2bff      	cmp	r3, #255	; 0xff
 801c054:	d006      	beq.n	801c064 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 801c056:	2300      	movs	r3, #0
 801c058:	8003      	strh	r3, [r0, #0]
 801c05a:	8043      	strh	r3, [r0, #2]
 801c05c:	8083      	strh	r3, [r0, #4]
 801c05e:	80c3      	strh	r3, [r0, #6]
 801c060:	4620      	mov	r0, r4
 801c062:	bd10      	pop	{r4, pc}
 801c064:	3126      	adds	r1, #38	; 0x26
 801c066:	f004 fb43 	bl	80206f0 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801c06a:	e7f9      	b.n	801c060 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

0801c06c <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 801c06c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c070:	4604      	mov	r4, r0
 801c072:	b088      	sub	sp, #32
 801c074:	2500      	movs	r5, #0
 801c076:	460f      	mov	r7, r1
 801c078:	f854 3b26 	ldr.w	r3, [r4], #38
 801c07c:	a904      	add	r1, sp, #16
 801c07e:	4606      	mov	r6, r0
 801c080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c082:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801c086:	4798      	blx	r3
 801c088:	4620      	mov	r0, r4
 801c08a:	f004 fac9 	bl	8020620 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801c08e:	4680      	mov	r8, r0
 801c090:	4620      	mov	r0, r4
 801c092:	f004 faf9 	bl	8020688 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801c096:	9506      	str	r5, [sp, #24]
 801c098:	ad06      	add	r5, sp, #24
 801c09a:	f8ad 001e 	strh.w	r0, [sp, #30]
 801c09e:	4639      	mov	r1, r7
 801c0a0:	f8ad 801c 	strh.w	r8, [sp, #28]
 801c0a4:	4628      	mov	r0, r5
 801c0a6:	f7fe f95f 	bl	801a368 <_ZN8touchgfx4RectaNERKS0_>
 801c0aa:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801c0ae:	2b00      	cmp	r3, #0
 801c0b0:	dd19      	ble.n	801c0e6 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 801c0b2:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 801c0b6:	2b00      	cmp	r3, #0
 801c0b8:	dd15      	ble.n	801c0e6 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 801c0ba:	4b0c      	ldr	r3, [pc, #48]	; (801c0ec <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 801c0bc:	681b      	ldr	r3, [r3, #0]
 801c0be:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801c0c2:	b10a      	cbz	r2, 801c0c8 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 801c0c4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801c0c6:	b900      	cbnz	r0, 801c0ca <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 801c0c8:	6898      	ldr	r0, [r3, #8]
 801c0ca:	2701      	movs	r7, #1
 801c0cc:	6801      	ldr	r1, [r0, #0]
 801c0ce:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801c0d2:	9702      	str	r7, [sp, #8]
 801c0d4:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 801c0d8:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801c0dc:	e9cd 5600 	strd	r5, r6, [sp]
 801c0e0:	688d      	ldr	r5, [r1, #8]
 801c0e2:	4621      	mov	r1, r4
 801c0e4:	47a8      	blx	r5
 801c0e6:	b008      	add	sp, #32
 801c0e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c0ec:	24026240 	.word	0x24026240

0801c0f0 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 801c0f0:	b510      	push	{r4, lr}
 801c0f2:	6803      	ldr	r3, [r0, #0]
 801c0f4:	460c      	mov	r4, r1
 801c0f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c0f8:	4798      	blx	r3
 801c0fa:	1b03      	subs	r3, r0, r4
 801c0fc:	4258      	negs	r0, r3
 801c0fe:	4158      	adcs	r0, r3
 801c100:	bd10      	pop	{r4, pc}
	...

0801c104 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 801c104:	4b01      	ldr	r3, [pc, #4]	; (801c10c <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 801c106:	6019      	str	r1, [r3, #0]
 801c108:	4770      	bx	lr
 801c10a:	bf00      	nop
 801c10c:	24026248 	.word	0x24026248

0801c110 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 801c110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c114:	4696      	mov	lr, r2
 801c116:	b097      	sub	sp, #92	; 0x5c
 801c118:	4605      	mov	r5, r0
 801c11a:	4614      	mov	r4, r2
 801c11c:	460e      	mov	r6, r1
 801c11e:	461f      	mov	r7, r3
 801c120:	f10d 0c1c 	add.w	ip, sp, #28
 801c124:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 801c128:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 801c12c:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 801c130:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801c134:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c138:	f8de 3000 	ldr.w	r3, [lr]
 801c13c:	f104 0e14 	add.w	lr, r4, #20
 801c140:	f8cc 3000 	str.w	r3, [ip]
 801c144:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801c148:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801c14c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c150:	f8de 3000 	ldr.w	r3, [lr]
 801c154:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 801c158:	f8cc 3000 	str.w	r3, [ip]
 801c15c:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 801c160:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801c164:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c168:	f8de 3000 	ldr.w	r3, [lr]
 801c16c:	4631      	mov	r1, r6
 801c16e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801c170:	4628      	mov	r0, r5
 801c172:	f8cc 3000 	str.w	r3, [ip]
 801c176:	682b      	ldr	r3, [r5, #0]
 801c178:	9201      	str	r2, [sp, #4]
 801c17a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801c17c:	f8cd 8008 	str.w	r8, [sp, #8]
 801c180:	9200      	str	r2, [sp, #0]
 801c182:	aa07      	add	r2, sp, #28
 801c184:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801c188:	f8d3 b03c 	ldr.w	fp, [r3, #60]	; 0x3c
 801c18c:	463b      	mov	r3, r7
 801c18e:	47d8      	blx	fp
 801c190:	46a6      	mov	lr, r4
 801c192:	f10d 0c1c 	add.w	ip, sp, #28
 801c196:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801c19a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c19e:	f8de 3000 	ldr.w	r3, [lr]
 801c1a2:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 801c1a6:	343c      	adds	r4, #60	; 0x3c
 801c1a8:	f8cc 3000 	str.w	r3, [ip]
 801c1ac:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801c1b0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801c1b4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c1b8:	f8de 3000 	ldr.w	r3, [lr]
 801c1bc:	f8cc 3000 	str.w	r3, [ip]
 801c1c0:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 801c1c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c1c6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c1ca:	6823      	ldr	r3, [r4, #0]
 801c1cc:	4631      	mov	r1, r6
 801c1ce:	4628      	mov	r0, r5
 801c1d0:	f8cc 3000 	str.w	r3, [ip]
 801c1d4:	682b      	ldr	r3, [r5, #0]
 801c1d6:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801c1da:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801c1dc:	f8cd 8008 	str.w	r8, [sp, #8]
 801c1e0:	9201      	str	r2, [sp, #4]
 801c1e2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801c1e4:	9200      	str	r2, [sp, #0]
 801c1e6:	aa07      	add	r2, sp, #28
 801c1e8:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 801c1ea:	463b      	mov	r3, r7
 801c1ec:	47a0      	blx	r4
 801c1ee:	b017      	add	sp, #92	; 0x5c
 801c1f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c1f4 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801c1f4:	2000      	movs	r0, #0
 801c1f6:	4770      	bx	lr

0801c1f8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 801c1f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c1fc:	b08d      	sub	sp, #52	; 0x34
 801c1fe:	4688      	mov	r8, r1
 801c200:	f8d3 c000 	ldr.w	ip, [r3]
 801c204:	9916      	ldr	r1, [sp, #88]	; 0x58
 801c206:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 801c20a:	680f      	ldr	r7, [r1, #0]
 801c20c:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 801c210:	eba7 070c 	sub.w	r7, r7, ip
 801c214:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 801c218:	edd3 6a07 	vldr	s13, [r3, #28]
 801c21c:	42bc      	cmp	r4, r7
 801c21e:	9918      	ldr	r1, [sp, #96]	; 0x60
 801c220:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 801c224:	bfa8      	it	ge
 801c226:	463c      	movge	r4, r7
 801c228:	f9b1 9000 	ldrsh.w	r9, [r1]
 801c22c:	f9ba 1000 	ldrsh.w	r1, [sl]
 801c230:	ee07 4a90 	vmov	s15, r4
 801c234:	eb09 0e0c 	add.w	lr, r9, ip
 801c238:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 801c23c:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 801c240:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 801c244:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 801c248:	4571      	cmp	r1, lr
 801c24a:	ee25 4a04 	vmul.f32	s8, s10, s8
 801c24e:	ee65 4a24 	vmul.f32	s9, s10, s9
 801c252:	ee25 5a27 	vmul.f32	s10, s10, s15
 801c256:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801c25a:	ee71 0aa4 	vadd.f32	s1, s3, s9
 801c25e:	ee32 1a05 	vadd.f32	s2, s4, s10
 801c262:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801c266:	ee36 0a84 	vadd.f32	s0, s13, s8
 801c26a:	ee61 1a87 	vmul.f32	s3, s3, s14
 801c26e:	ee22 2a07 	vmul.f32	s4, s4, s14
 801c272:	f340 808c 	ble.w	801c38e <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 801c276:	eba1 060e 	sub.w	r6, r1, lr
 801c27a:	fb96 f5f4 	sdiv	r5, r6, r4
 801c27e:	ee07 5a10 	vmov	s14, r5
 801c282:	2d00      	cmp	r5, #0
 801c284:	fb04 6615 	mls	r6, r4, r5, r6
 801c288:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c28c:	eea7 0a04 	vfma.f32	s0, s14, s8
 801c290:	eee7 0a24 	vfma.f32	s1, s14, s9
 801c294:	eea7 1a05 	vfma.f32	s2, s14, s10
 801c298:	dd12      	ble.n	801c2c0 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 801c29a:	ee70 6a44 	vsub.f32	s13, s0, s8
 801c29e:	ee70 1ae4 	vsub.f32	s3, s1, s9
 801c2a2:	ee31 2a45 	vsub.f32	s4, s2, s10
 801c2a6:	eef5 6a40 	vcmp.f32	s13, #0.0
 801c2aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c2ae:	bf14      	ite	ne
 801c2b0:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 801c2b4:	eeb0 7a67 	vmoveq.f32	s14, s15
 801c2b8:	ee61 1a87 	vmul.f32	s3, s3, s14
 801c2bc:	ee22 2a07 	vmul.f32	s4, s4, s14
 801c2c0:	fb05 f204 	mul.w	r2, r5, r4
 801c2c4:	1abf      	subs	r7, r7, r2
 801c2c6:	4494      	add	ip, r2
 801c2c8:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 801c2cc:	4411      	add	r1, r2
 801c2ce:	eb09 020c 	add.w	r2, r9, ip
 801c2d2:	b209      	sxth	r1, r1
 801c2d4:	443a      	add	r2, r7
 801c2d6:	428a      	cmp	r2, r1
 801c2d8:	bfc4      	itt	gt
 801c2da:	eba1 0209 	subgt.w	r2, r1, r9
 801c2de:	eba2 070c 	subgt.w	r7, r2, ip
 801c2e2:	2f00      	cmp	r7, #0
 801c2e4:	dd50      	ble.n	801c388 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 801c2e6:	fb97 f1f4 	sdiv	r1, r7, r4
 801c2ea:	fb04 7211 	mls	r2, r4, r1, r7
 801c2ee:	b90a      	cbnz	r2, 801c2f4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 801c2f0:	3901      	subs	r1, #1
 801c2f2:	4622      	mov	r2, r4
 801c2f4:	eec7 3a80 	vdiv.f32	s7, s15, s0
 801c2f8:	6840      	ldr	r0, [r0, #4]
 801c2fa:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 801c2fe:	44b6      	add	lr, r6
 801c300:	f8d0 a000 	ldr.w	sl, [r0]
 801c304:	2900      	cmp	r1, #0
 801c306:	bfcc      	ite	gt
 801c308:	46a1      	movgt	r9, r4
 801c30a:	4691      	movle	r9, r2
 801c30c:	900b      	str	r0, [sp, #44]	; 0x2c
 801c30e:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801c310:	fb04 e505 	mla	r5, r4, r5, lr
 801c314:	eef0 6a42 	vmov.f32	s13, s4
 801c318:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 801c31c:	9008      	str	r0, [sp, #32]
 801c31e:	eeb0 7a61 	vmov.f32	s14, s3
 801c322:	9818      	ldr	r0, [sp, #96]	; 0x60
 801c324:	695b      	ldr	r3, [r3, #20]
 801c326:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c32a:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 801c32e:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801c332:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801c334:	445b      	add	r3, fp
 801c336:	9307      	str	r3, [sp, #28]
 801c338:	ee16 3a90 	vmov	r3, s13
 801c33c:	e9cd 8505 	strd	r8, r5, [sp, #20]
 801c340:	ee60 2aa3 	vmul.f32	s5, s1, s7
 801c344:	ee21 3a23 	vmul.f32	s6, s2, s7
 801c348:	ee72 7ae1 	vsub.f32	s15, s5, s3
 801c34c:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801c350:	ee17 7a90 	vmov	r7, s15
 801c354:	ee73 7a42 	vsub.f32	s15, s6, s4
 801c358:	fb97 f7f4 	sdiv	r7, r7, r4
 801c35c:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801c360:	ee17 ca90 	vmov	ip, s15
 801c364:	fb9c fcf4 	sdiv	ip, ip, r4
 801c368:	fb0c 3306 	mla	r3, ip, r6, r3
 801c36c:	9302      	str	r3, [sp, #8]
 801c36e:	ee17 3a10 	vmov	r3, s14
 801c372:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 801c376:	fb07 3706 	mla	r7, r7, r6, r3
 801c37a:	eba9 0306 	sub.w	r3, r9, r6
 801c37e:	e9cd 4700 	strd	r4, r7, [sp]
 801c382:	f8da 4008 	ldr.w	r4, [sl, #8]
 801c386:	47a0      	blx	r4
 801c388:	b00d      	add	sp, #52	; 0x34
 801c38a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c38e:	2500      	movs	r5, #0
 801c390:	462e      	mov	r6, r5
 801c392:	e799      	b.n	801c2c8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

0801c394 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 801c394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c398:	b0db      	sub	sp, #364	; 0x16c
 801c39a:	461d      	mov	r5, r3
 801c39c:	4614      	mov	r4, r2
 801c39e:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 801c3a2:	910f      	str	r1, [sp, #60]	; 0x3c
 801c3a4:	4629      	mov	r1, r5
 801c3a6:	930a      	str	r3, [sp, #40]	; 0x28
 801c3a8:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 801c3ac:	9009      	str	r0, [sp, #36]	; 0x24
 801c3ae:	930b      	str	r3, [sp, #44]	; 0x2c
 801c3b0:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 801c3b4:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 801c3b8:	9310      	str	r3, [sp, #64]	; 0x40
 801c3ba:	6803      	ldr	r3, [r0, #0]
 801c3bc:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 801c3be:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801c3c2:	47b8      	blx	r7
 801c3c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c3c6:	6058      	str	r0, [r3, #4]
 801c3c8:	2800      	cmp	r0, #0
 801c3ca:	f000 83a1 	beq.w	801cb10 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801c3ce:	682b      	ldr	r3, [r5, #0]
 801c3d0:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 801c3d4:	ed94 7a02 	vldr	s14, [r4, #8]
 801c3d8:	9314      	str	r3, [sp, #80]	; 0x50
 801c3da:	686b      	ldr	r3, [r5, #4]
 801c3dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801c3e0:	9315      	str	r3, [sp, #84]	; 0x54
 801c3e2:	4bc1      	ldr	r3, [pc, #772]	; (801c6e8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 801c3e4:	7819      	ldrb	r1, [r3, #0]
 801c3e6:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 801c3ea:	2900      	cmp	r1, #0
 801c3ec:	bf16      	itet	ne
 801c3ee:	4619      	movne	r1, r3
 801c3f0:	4611      	moveq	r1, r2
 801c3f2:	4613      	movne	r3, r2
 801c3f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c3f8:	9116      	str	r1, [sp, #88]	; 0x58
 801c3fa:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 801c3fe:	f240 8387 	bls.w	801cb10 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801c402:	ed94 7a07 	vldr	s14, [r4, #28]
 801c406:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801c40a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c40e:	f240 837f 	bls.w	801cb10 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801c412:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 801c416:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801c41a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c41e:	f240 8377 	bls.w	801cb10 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801c422:	6822      	ldr	r2, [r4, #0]
 801c424:	4bb1      	ldr	r3, [pc, #708]	; (801c6ec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 801c426:	429a      	cmp	r2, r3
 801c428:	f2c0 8372 	blt.w	801cb10 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801c42c:	49b0      	ldr	r1, [pc, #704]	; (801c6f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 801c42e:	6963      	ldr	r3, [r4, #20]
 801c430:	428a      	cmp	r2, r1
 801c432:	f300 836d 	bgt.w	801cb10 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801c436:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 801c43a:	48ae      	ldr	r0, [pc, #696]	; (801c6f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 801c43c:	33ff      	adds	r3, #255	; 0xff
 801c43e:	4283      	cmp	r3, r0
 801c440:	f200 8366 	bhi.w	801cb10 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801c444:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801c446:	4dac      	ldr	r5, [pc, #688]	; (801c6f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 801c448:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 801c44c:	33ff      	adds	r3, #255	; 0xff
 801c44e:	42ab      	cmp	r3, r5
 801c450:	f200 835e 	bhi.w	801cb10 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801c454:	6862      	ldr	r2, [r4, #4]
 801c456:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 801c45a:	33ff      	adds	r3, #255	; 0xff
 801c45c:	4283      	cmp	r3, r0
 801c45e:	f200 8357 	bhi.w	801cb10 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801c462:	69a1      	ldr	r1, [r4, #24]
 801c464:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 801c468:	33ff      	adds	r3, #255	; 0xff
 801c46a:	4283      	cmp	r3, r0
 801c46c:	f200 8350 	bhi.w	801cb10 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801c470:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801c472:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 801c476:	30ff      	adds	r0, #255	; 0xff
 801c478:	42a8      	cmp	r0, r5
 801c47a:	f200 8349 	bhi.w	801cb10 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801c47e:	428a      	cmp	r2, r1
 801c480:	f280 8110 	bge.w	801c6a4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 801c484:	429a      	cmp	r2, r3
 801c486:	f300 8119 	bgt.w	801c6bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 801c48a:	4299      	cmp	r1, r3
 801c48c:	f280 811d 	bge.w	801c6ca <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 801c490:	2502      	movs	r5, #2
 801c492:	2701      	movs	r7, #1
 801c494:	46a9      	mov	r9, r5
 801c496:	46b8      	mov	r8, r7
 801c498:	f04f 0a00 	mov.w	sl, #0
 801c49c:	4621      	mov	r1, r4
 801c49e:	a849      	add	r0, sp, #292	; 0x124
 801c4a0:	f003 fd46 	bl	801ff30 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 801c4a4:	4622      	mov	r2, r4
 801c4a6:	4653      	mov	r3, sl
 801c4a8:	a949      	add	r1, sp, #292	; 0x124
 801c4aa:	f8cd 9000 	str.w	r9, [sp]
 801c4ae:	a819      	add	r0, sp, #100	; 0x64
 801c4b0:	f003 fe6e 	bl	8020190 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801c4b4:	4622      	mov	r2, r4
 801c4b6:	4653      	mov	r3, sl
 801c4b8:	a949      	add	r1, sp, #292	; 0x124
 801c4ba:	f8cd 8000 	str.w	r8, [sp]
 801c4be:	a829      	add	r0, sp, #164	; 0xa4
 801c4c0:	f003 fe66 	bl	8020190 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801c4c4:	4643      	mov	r3, r8
 801c4c6:	4622      	mov	r2, r4
 801c4c8:	a949      	add	r1, sp, #292	; 0x124
 801c4ca:	f8cd 9000 	str.w	r9, [sp]
 801c4ce:	a839      	add	r0, sp, #228	; 0xe4
 801c4d0:	f003 fe5e 	bl	8020190 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801c4d4:	42af      	cmp	r7, r5
 801c4d6:	af12      	add	r7, sp, #72	; 0x48
 801c4d8:	bfb7      	itett	lt
 801c4da:	2300      	movlt	r3, #0
 801c4dc:	2301      	movge	r3, #1
 801c4de:	ad29      	addlt	r5, sp, #164	; 0xa4
 801c4e0:	ac19      	addlt	r4, sp, #100	; 0x64
 801c4e2:	bfb1      	iteee	lt
 801c4e4:	930e      	strlt	r3, [sp, #56]	; 0x38
 801c4e6:	ad19      	addge	r5, sp, #100	; 0x64
 801c4e8:	930e      	strge	r3, [sp, #56]	; 0x38
 801c4ea:	ac29      	addge	r4, sp, #164	; 0xa4
 801c4ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c4ee:	e893 0003 	ldmia.w	r3, {r0, r1}
 801c4f2:	e887 0003 	stmia.w	r7, {r0, r1}
 801c4f6:	b928      	cbnz	r0, 801c504 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 801c4f8:	4b80      	ldr	r3, [pc, #512]	; (801c6fc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 801c4fa:	6818      	ldr	r0, [r3, #0]
 801c4fc:	6803      	ldr	r3, [r0, #0]
 801c4fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c500:	4798      	blx	r3
 801c502:	6038      	str	r0, [r7, #0]
 801c504:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801c506:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801c50a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801c50e:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801c510:	930c      	str	r3, [sp, #48]	; 0x30
 801c512:	990c      	ldr	r1, [sp, #48]	; 0x30
 801c514:	6963      	ldr	r3, [r4, #20]
 801c516:	440b      	add	r3, r1
 801c518:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801c51c:	4408      	add	r0, r1
 801c51e:	b200      	sxth	r0, r0
 801c520:	4283      	cmp	r3, r0
 801c522:	900d      	str	r0, [sp, #52]	; 0x34
 801c524:	f280 80dd 	bge.w	801c6e2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 801c528:	428b      	cmp	r3, r1
 801c52a:	da08      	bge.n	801c53e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801c52c:	2a00      	cmp	r2, #0
 801c52e:	dd06      	ble.n	801c53e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801c530:	1acb      	subs	r3, r1, r3
 801c532:	429a      	cmp	r2, r3
 801c534:	f2c0 80e4 	blt.w	801c700 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 801c538:	2b00      	cmp	r3, #0
 801c53a:	f300 80e2 	bgt.w	801c702 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 801c53e:	6967      	ldr	r7, [r4, #20]
 801c540:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 801c544:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c546:	443b      	add	r3, r7
 801c548:	461f      	mov	r7, r3
 801c54a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c54c:	1bdf      	subs	r7, r3, r7
 801c54e:	4297      	cmp	r7, r2
 801c550:	bfa8      	it	ge
 801c552:	4617      	movge	r7, r2
 801c554:	2f00      	cmp	r7, #0
 801c556:	f340 8166 	ble.w	801c826 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 801c55a:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801c55c:	6829      	ldr	r1, [r5, #0]
 801c55e:	f9b3 2000 	ldrsh.w	r2, [r3]
 801c562:	f9bb 3000 	ldrsh.w	r3, [fp]
 801c566:	4411      	add	r1, r2
 801c568:	6820      	ldr	r0, [r4, #0]
 801c56a:	4299      	cmp	r1, r3
 801c56c:	dd1a      	ble.n	801c5a4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 801c56e:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 801c572:	4402      	add	r2, r0
 801c574:	440b      	add	r3, r1
 801c576:	b21b      	sxth	r3, r3
 801c578:	429a      	cmp	r2, r3
 801c57a:	dc13      	bgt.n	801c5a4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 801c57c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c57e:	a912      	add	r1, sp, #72	; 0x48
 801c580:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c582:	9809      	ldr	r0, [sp, #36]	; 0x24
 801c584:	681b      	ldr	r3, [r3, #0]
 801c586:	9206      	str	r2, [sp, #24]
 801c588:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801c58a:	9500      	str	r5, [sp, #0]
 801c58c:	9205      	str	r2, [sp, #20]
 801c58e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801c590:	e9cd b203 	strd	fp, r2, [sp, #12]
 801c594:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801c596:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801c59a:	aa49      	add	r2, sp, #292	; 0x124
 801c59c:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 801c5a0:	4623      	mov	r3, r4
 801c5a2:	47c8      	blx	r9
 801c5a4:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 801c5a8:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 801c5ac:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 801c5b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 801c5b4:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 801c5b8:	68a1      	ldr	r1, [r4, #8]
 801c5ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801c5be:	ed94 6a08 	vldr	s12, [r4, #32]
 801c5c2:	edd4 6a07 	vldr	s13, [r4, #28]
 801c5c6:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801c5ca:	ee76 6a86 	vadd.f32	s13, s13, s12
 801c5ce:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801c5d2:	e9d4 2300 	ldrd	r2, r3, [r4]
 801c5d6:	edc4 6a07 	vstr	s13, [r4, #28]
 801c5da:	441a      	add	r2, r3
 801c5dc:	6963      	ldr	r3, [r4, #20]
 801c5de:	3301      	adds	r3, #1
 801c5e0:	6022      	str	r2, [r4, #0]
 801c5e2:	6163      	str	r3, [r4, #20]
 801c5e4:	69a3      	ldr	r3, [r4, #24]
 801c5e6:	3b01      	subs	r3, #1
 801c5e8:	61a3      	str	r3, [r4, #24]
 801c5ea:	6923      	ldr	r3, [r4, #16]
 801c5ec:	440b      	add	r3, r1
 801c5ee:	68e1      	ldr	r1, [r4, #12]
 801c5f0:	428b      	cmp	r3, r1
 801c5f2:	6123      	str	r3, [r4, #16]
 801c5f4:	db15      	blt.n	801c622 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 801c5f6:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 801c5fa:	3201      	adds	r2, #1
 801c5fc:	1a5b      	subs	r3, r3, r1
 801c5fe:	ee76 6a26 	vadd.f32	s13, s12, s13
 801c602:	6022      	str	r2, [r4, #0]
 801c604:	6123      	str	r3, [r4, #16]
 801c606:	edc4 6a07 	vstr	s13, [r4, #28]
 801c60a:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 801c60e:	ee36 7a87 	vadd.f32	s14, s13, s14
 801c612:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801c616:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 801c61a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801c61e:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801c622:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 801c626:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 801c62a:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 801c62e:	ee37 7a27 	vadd.f32	s14, s14, s15
 801c632:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 801c636:	68a9      	ldr	r1, [r5, #8]
 801c638:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801c63c:	ed95 6a08 	vldr	s12, [r5, #32]
 801c640:	edd5 6a07 	vldr	s13, [r5, #28]
 801c644:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801c648:	ee76 6a86 	vadd.f32	s13, s13, s12
 801c64c:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801c650:	e9d5 2300 	ldrd	r2, r3, [r5]
 801c654:	edc5 6a07 	vstr	s13, [r5, #28]
 801c658:	441a      	add	r2, r3
 801c65a:	696b      	ldr	r3, [r5, #20]
 801c65c:	3301      	adds	r3, #1
 801c65e:	602a      	str	r2, [r5, #0]
 801c660:	616b      	str	r3, [r5, #20]
 801c662:	69ab      	ldr	r3, [r5, #24]
 801c664:	3b01      	subs	r3, #1
 801c666:	61ab      	str	r3, [r5, #24]
 801c668:	692b      	ldr	r3, [r5, #16]
 801c66a:	440b      	add	r3, r1
 801c66c:	68e9      	ldr	r1, [r5, #12]
 801c66e:	428b      	cmp	r3, r1
 801c670:	612b      	str	r3, [r5, #16]
 801c672:	db15      	blt.n	801c6a0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 801c674:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801c678:	3201      	adds	r2, #1
 801c67a:	1a5b      	subs	r3, r3, r1
 801c67c:	ee76 6a26 	vadd.f32	s13, s12, s13
 801c680:	602a      	str	r2, [r5, #0]
 801c682:	612b      	str	r3, [r5, #16]
 801c684:	edc5 6a07 	vstr	s13, [r5, #28]
 801c688:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 801c68c:	ee36 7a87 	vadd.f32	s14, s13, s14
 801c690:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801c694:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 801c698:	ee77 7a27 	vadd.f32	s15, s14, s15
 801c69c:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801c6a0:	3f01      	subs	r7, #1
 801c6a2:	e757      	b.n	801c554 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 801c6a4:	4299      	cmp	r1, r3
 801c6a6:	dc13      	bgt.n	801c6d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 801c6a8:	429a      	cmp	r2, r3
 801c6aa:	da14      	bge.n	801c6d6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 801c6ac:	2502      	movs	r5, #2
 801c6ae:	2703      	movs	r7, #3
 801c6b0:	f04f 0800 	mov.w	r8, #0
 801c6b4:	46a9      	mov	r9, r5
 801c6b6:	f04f 0a01 	mov.w	sl, #1
 801c6ba:	e6ef      	b.n	801c49c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 801c6bc:	2501      	movs	r5, #1
 801c6be:	2700      	movs	r7, #0
 801c6c0:	46a9      	mov	r9, r5
 801c6c2:	46b8      	mov	r8, r7
 801c6c4:	f04f 0a02 	mov.w	sl, #2
 801c6c8:	e6e8      	b.n	801c49c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 801c6ca:	2501      	movs	r5, #1
 801c6cc:	2702      	movs	r7, #2
 801c6ce:	e6e1      	b.n	801c494 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 801c6d0:	2500      	movs	r5, #0
 801c6d2:	2701      	movs	r7, #1
 801c6d4:	e7f4      	b.n	801c6c0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 801c6d6:	2702      	movs	r7, #2
 801c6d8:	2503      	movs	r5, #3
 801c6da:	f04f 0900 	mov.w	r9, #0
 801c6de:	46b8      	mov	r8, r7
 801c6e0:	e7e9      	b.n	801c6b6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 801c6e2:	4613      	mov	r3, r2
 801c6e4:	e728      	b.n	801c538 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 801c6e6:	bf00      	nop
 801c6e8:	24026238 	.word	0x24026238
 801c6ec:	fffd8f01 	.word	0xfffd8f01
 801c6f0:	00027100 	.word	0x00027100
 801c6f4:	0004e1ff 	.word	0x0004e1ff
 801c6f8:	0004e1fe 	.word	0x0004e1fe
 801c6fc:	24026240 	.word	0x24026240
 801c700:	4613      	mov	r3, r2
 801c702:	992b      	ldr	r1, [sp, #172]	; 0xac
 801c704:	469e      	mov	lr, r3
 801c706:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 801c708:	469c      	mov	ip, r3
 801c70a:	9111      	str	r1, [sp, #68]	; 0x44
 801c70c:	f04f 0900 	mov.w	r9, #0
 801c710:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 801c714:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 801c718:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 801c71c:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 801c720:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 801c724:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 801c728:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 801c72c:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 801c730:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 801c734:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 801c738:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 801c73c:	f1bc 0f00 	cmp.w	ip, #0
 801c740:	d147      	bne.n	801c7d2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 801c742:	eb03 0c07 	add.w	ip, r3, r7
 801c746:	1ad7      	subs	r7, r2, r3
 801c748:	f1b9 0f00 	cmp.w	r9, #0
 801c74c:	d009      	beq.n	801c762 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 801c74e:	9029      	str	r0, [sp, #164]	; 0xa4
 801c750:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 801c754:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 801c758:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 801c75c:	912d      	str	r1, [sp, #180]	; 0xb4
 801c75e:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 801c762:	991b      	ldr	r1, [sp, #108]	; 0x6c
 801c764:	f04f 0800 	mov.w	r8, #0
 801c768:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 801c76c:	9111      	str	r1, [sp, #68]	; 0x44
 801c76e:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 801c772:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 801c776:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801c77a:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 801c77e:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 801c782:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 801c786:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 801c78a:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 801c78e:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 801c792:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 801c796:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 801c79a:	f1be 0f00 	cmp.w	lr, #0
 801c79e:	d031      	beq.n	801c804 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 801c7a0:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801c7a2:	4450      	add	r0, sl
 801c7a4:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801c7a8:	4431      	add	r1, r6
 801c7aa:	ee37 7a04 	vadd.f32	s14, s14, s8
 801c7ae:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801c7b2:	4549      	cmp	r1, r9
 801c7b4:	db08      	blt.n	801c7c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 801c7b6:	ee77 7a85 	vadd.f32	s15, s15, s10
 801c7ba:	3001      	adds	r0, #1
 801c7bc:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801c7c0:	eba1 0109 	sub.w	r1, r1, r9
 801c7c4:	ee37 7a06 	vadd.f32	s14, s14, s12
 801c7c8:	f10e 3eff 	add.w	lr, lr, #4294967295
 801c7cc:	f04f 0801 	mov.w	r8, #1
 801c7d0:	e7e3      	b.n	801c79a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 801c7d2:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801c7d4:	4450      	add	r0, sl
 801c7d6:	ee37 7a24 	vadd.f32	s14, s14, s9
 801c7da:	4431      	add	r1, r6
 801c7dc:	ee77 7a84 	vadd.f32	s15, s15, s8
 801c7e0:	ee76 6aa3 	vadd.f32	s13, s13, s7
 801c7e4:	4541      	cmp	r1, r8
 801c7e6:	db08      	blt.n	801c7fa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 801c7e8:	ee76 6a85 	vadd.f32	s13, s13, s10
 801c7ec:	3001      	adds	r0, #1
 801c7ee:	ee37 7a25 	vadd.f32	s14, s14, s11
 801c7f2:	eba1 0108 	sub.w	r1, r1, r8
 801c7f6:	ee77 7a86 	vadd.f32	s15, s15, s12
 801c7fa:	f10c 3cff 	add.w	ip, ip, #4294967295
 801c7fe:	f04f 0901 	mov.w	r9, #1
 801c802:	e79b      	b.n	801c73c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 801c804:	449c      	add	ip, r3
 801c806:	1aff      	subs	r7, r7, r3
 801c808:	f1b8 0f00 	cmp.w	r8, #0
 801c80c:	d009      	beq.n	801c822 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 801c80e:	9019      	str	r0, [sp, #100]	; 0x64
 801c810:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 801c814:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 801c818:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 801c81c:	911d      	str	r1, [sp, #116]	; 0x74
 801c81e:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 801c822:	1ad2      	subs	r2, r2, r3
 801c824:	e68b      	b.n	801c53e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801c826:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c828:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 801c82a:	2b00      	cmp	r3, #0
 801c82c:	f000 80d1 	beq.w	801c9d2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 801c830:	ad19      	add	r5, sp, #100	; 0x64
 801c832:	ac39      	add	r4, sp, #228	; 0xe4
 801c834:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801c836:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801c83a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801c83e:	930c      	str	r3, [sp, #48]	; 0x30
 801c840:	990c      	ldr	r1, [sp, #48]	; 0x30
 801c842:	6963      	ldr	r3, [r4, #20]
 801c844:	440b      	add	r3, r1
 801c846:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801c84a:	4408      	add	r0, r1
 801c84c:	b200      	sxth	r0, r0
 801c84e:	4283      	cmp	r3, r0
 801c850:	900d      	str	r0, [sp, #52]	; 0x34
 801c852:	f280 80c1 	bge.w	801c9d8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 801c856:	428b      	cmp	r3, r1
 801c858:	da08      	bge.n	801c86c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801c85a:	2a00      	cmp	r2, #0
 801c85c:	dd06      	ble.n	801c86c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801c85e:	1acb      	subs	r3, r1, r3
 801c860:	429a      	cmp	r2, r3
 801c862:	f2c0 80bb 	blt.w	801c9dc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 801c866:	2b00      	cmp	r3, #0
 801c868:	f300 80b9 	bgt.w	801c9de <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 801c86c:	6967      	ldr	r7, [r4, #20]
 801c86e:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 801c872:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c874:	443b      	add	r3, r7
 801c876:	461f      	mov	r7, r3
 801c878:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c87a:	1bdf      	subs	r7, r3, r7
 801c87c:	4297      	cmp	r7, r2
 801c87e:	bfa8      	it	ge
 801c880:	4617      	movge	r7, r2
 801c882:	2f00      	cmp	r7, #0
 801c884:	f340 813c 	ble.w	801cb00 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 801c888:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801c88a:	6829      	ldr	r1, [r5, #0]
 801c88c:	f9b3 2000 	ldrsh.w	r2, [r3]
 801c890:	f9bb 3000 	ldrsh.w	r3, [fp]
 801c894:	4411      	add	r1, r2
 801c896:	6820      	ldr	r0, [r4, #0]
 801c898:	4299      	cmp	r1, r3
 801c89a:	dd1a      	ble.n	801c8d2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801c89c:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 801c8a0:	4402      	add	r2, r0
 801c8a2:	440b      	add	r3, r1
 801c8a4:	b21b      	sxth	r3, r3
 801c8a6:	429a      	cmp	r2, r3
 801c8a8:	dc13      	bgt.n	801c8d2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801c8aa:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c8ac:	a912      	add	r1, sp, #72	; 0x48
 801c8ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c8b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 801c8b2:	681b      	ldr	r3, [r3, #0]
 801c8b4:	9206      	str	r2, [sp, #24]
 801c8b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801c8b8:	9500      	str	r5, [sp, #0]
 801c8ba:	9205      	str	r2, [sp, #20]
 801c8bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801c8be:	e9cd b203 	strd	fp, r2, [sp, #12]
 801c8c2:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801c8c4:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801c8c8:	aa49      	add	r2, sp, #292	; 0x124
 801c8ca:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 801c8ce:	4623      	mov	r3, r4
 801c8d0:	47c8      	blx	r9
 801c8d2:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 801c8d6:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 801c8da:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 801c8de:	ee37 7a27 	vadd.f32	s14, s14, s15
 801c8e2:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 801c8e6:	68a1      	ldr	r1, [r4, #8]
 801c8e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801c8ec:	ed94 6a08 	vldr	s12, [r4, #32]
 801c8f0:	edd4 6a07 	vldr	s13, [r4, #28]
 801c8f4:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801c8f8:	ee76 6a86 	vadd.f32	s13, s13, s12
 801c8fc:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801c900:	e9d4 2300 	ldrd	r2, r3, [r4]
 801c904:	edc4 6a07 	vstr	s13, [r4, #28]
 801c908:	441a      	add	r2, r3
 801c90a:	6963      	ldr	r3, [r4, #20]
 801c90c:	3301      	adds	r3, #1
 801c90e:	6022      	str	r2, [r4, #0]
 801c910:	6163      	str	r3, [r4, #20]
 801c912:	69a3      	ldr	r3, [r4, #24]
 801c914:	3b01      	subs	r3, #1
 801c916:	61a3      	str	r3, [r4, #24]
 801c918:	6923      	ldr	r3, [r4, #16]
 801c91a:	440b      	add	r3, r1
 801c91c:	68e1      	ldr	r1, [r4, #12]
 801c91e:	428b      	cmp	r3, r1
 801c920:	6123      	str	r3, [r4, #16]
 801c922:	db15      	blt.n	801c950 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 801c924:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 801c928:	3201      	adds	r2, #1
 801c92a:	1a5b      	subs	r3, r3, r1
 801c92c:	ee76 6a26 	vadd.f32	s13, s12, s13
 801c930:	6022      	str	r2, [r4, #0]
 801c932:	6123      	str	r3, [r4, #16]
 801c934:	edc4 6a07 	vstr	s13, [r4, #28]
 801c938:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 801c93c:	ee36 7a87 	vadd.f32	s14, s13, s14
 801c940:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801c944:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 801c948:	ee77 7a27 	vadd.f32	s15, s14, s15
 801c94c:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801c950:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 801c954:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 801c958:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 801c95c:	ee37 7a27 	vadd.f32	s14, s14, s15
 801c960:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 801c964:	68a9      	ldr	r1, [r5, #8]
 801c966:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801c96a:	ed95 6a08 	vldr	s12, [r5, #32]
 801c96e:	edd5 6a07 	vldr	s13, [r5, #28]
 801c972:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801c976:	ee76 6a86 	vadd.f32	s13, s13, s12
 801c97a:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801c97e:	e9d5 2300 	ldrd	r2, r3, [r5]
 801c982:	edc5 6a07 	vstr	s13, [r5, #28]
 801c986:	441a      	add	r2, r3
 801c988:	696b      	ldr	r3, [r5, #20]
 801c98a:	3301      	adds	r3, #1
 801c98c:	602a      	str	r2, [r5, #0]
 801c98e:	616b      	str	r3, [r5, #20]
 801c990:	69ab      	ldr	r3, [r5, #24]
 801c992:	3b01      	subs	r3, #1
 801c994:	61ab      	str	r3, [r5, #24]
 801c996:	692b      	ldr	r3, [r5, #16]
 801c998:	440b      	add	r3, r1
 801c99a:	68e9      	ldr	r1, [r5, #12]
 801c99c:	428b      	cmp	r3, r1
 801c99e:	612b      	str	r3, [r5, #16]
 801c9a0:	db15      	blt.n	801c9ce <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 801c9a2:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801c9a6:	3201      	adds	r2, #1
 801c9a8:	1a5b      	subs	r3, r3, r1
 801c9aa:	ee76 6a26 	vadd.f32	s13, s12, s13
 801c9ae:	602a      	str	r2, [r5, #0]
 801c9b0:	612b      	str	r3, [r5, #16]
 801c9b2:	edc5 6a07 	vstr	s13, [r5, #28]
 801c9b6:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 801c9ba:	ee36 7a87 	vadd.f32	s14, s13, s14
 801c9be:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801c9c2:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 801c9c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 801c9ca:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801c9ce:	3f01      	subs	r7, #1
 801c9d0:	e757      	b.n	801c882 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 801c9d2:	ad39      	add	r5, sp, #228	; 0xe4
 801c9d4:	ac19      	add	r4, sp, #100	; 0x64
 801c9d6:	e72d      	b.n	801c834 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 801c9d8:	4613      	mov	r3, r2
 801c9da:	e744      	b.n	801c866 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 801c9dc:	4613      	mov	r3, r2
 801c9de:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 801c9e0:	469e      	mov	lr, r3
 801c9e2:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 801c9e6:	461f      	mov	r7, r3
 801c9e8:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 801c9ec:	f04f 0900 	mov.w	r9, #0
 801c9f0:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 801c9f4:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 801c9f8:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 801c9fc:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 801ca00:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 801ca04:	993d      	ldr	r1, [sp, #244]	; 0xf4
 801ca06:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 801ca0a:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 801ca0e:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 801ca12:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 801ca16:	960e      	str	r6, [sp, #56]	; 0x38
 801ca18:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 801ca1c:	2f00      	cmp	r7, #0
 801ca1e:	d146      	bne.n	801caae <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 801ca20:	449c      	add	ip, r3
 801ca22:	1ad7      	subs	r7, r2, r3
 801ca24:	f1b9 0f00 	cmp.w	r9, #0
 801ca28:	d009      	beq.n	801ca3e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 801ca2a:	9039      	str	r0, [sp, #228]	; 0xe4
 801ca2c:	913d      	str	r1, [sp, #244]	; 0xf4
 801ca2e:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 801ca32:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 801ca36:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 801ca3a:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 801ca3e:	991b      	ldr	r1, [sp, #108]	; 0x6c
 801ca40:	f04f 0800 	mov.w	r8, #0
 801ca44:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 801ca48:	910e      	str	r1, [sp, #56]	; 0x38
 801ca4a:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 801ca4e:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 801ca52:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801ca56:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 801ca5a:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 801ca5e:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 801ca62:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 801ca66:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 801ca6a:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 801ca6e:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 801ca72:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 801ca76:	f1be 0f00 	cmp.w	lr, #0
 801ca7a:	d030      	beq.n	801cade <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 801ca7c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801ca7e:	4450      	add	r0, sl
 801ca80:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801ca84:	4431      	add	r1, r6
 801ca86:	ee37 7a04 	vadd.f32	s14, s14, s8
 801ca8a:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801ca8e:	4549      	cmp	r1, r9
 801ca90:	db08      	blt.n	801caa4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 801ca92:	ee77 7a85 	vadd.f32	s15, s15, s10
 801ca96:	3001      	adds	r0, #1
 801ca98:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801ca9c:	eba1 0109 	sub.w	r1, r1, r9
 801caa0:	ee37 7a06 	vadd.f32	s14, s14, s12
 801caa4:	f10e 3eff 	add.w	lr, lr, #4294967295
 801caa8:	f04f 0801 	mov.w	r8, #1
 801caac:	e7e3      	b.n	801ca76 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 801caae:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801cab0:	4450      	add	r0, sl
 801cab2:	ee37 7a24 	vadd.f32	s14, s14, s9
 801cab6:	4431      	add	r1, r6
 801cab8:	ee77 7a84 	vadd.f32	s15, s15, s8
 801cabc:	ee76 6aa3 	vadd.f32	s13, s13, s7
 801cac0:	4541      	cmp	r1, r8
 801cac2:	db08      	blt.n	801cad6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 801cac4:	ee76 6a85 	vadd.f32	s13, s13, s10
 801cac8:	3001      	adds	r0, #1
 801caca:	ee37 7a25 	vadd.f32	s14, s14, s11
 801cace:	eba1 0108 	sub.w	r1, r1, r8
 801cad2:	ee77 7a86 	vadd.f32	s15, s15, s12
 801cad6:	3f01      	subs	r7, #1
 801cad8:	f04f 0901 	mov.w	r9, #1
 801cadc:	e79e      	b.n	801ca1c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 801cade:	449c      	add	ip, r3
 801cae0:	1aff      	subs	r7, r7, r3
 801cae2:	f1b8 0f00 	cmp.w	r8, #0
 801cae6:	d009      	beq.n	801cafc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 801cae8:	9019      	str	r0, [sp, #100]	; 0x64
 801caea:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 801caee:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 801caf2:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 801caf6:	911d      	str	r1, [sp, #116]	; 0x74
 801caf8:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 801cafc:	1ad2      	subs	r2, r2, r3
 801cafe:	e6b5      	b.n	801c86c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801cb00:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801cb02:	681b      	ldr	r3, [r3, #0]
 801cb04:	b923      	cbnz	r3, 801cb10 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801cb06:	4b04      	ldr	r3, [pc, #16]	; (801cb18 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 801cb08:	6818      	ldr	r0, [r3, #0]
 801cb0a:	6803      	ldr	r3, [r0, #0]
 801cb0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cb0e:	4798      	blx	r3
 801cb10:	b05b      	add	sp, #364	; 0x16c
 801cb12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cb16:	bf00      	nop
 801cb18:	24026240 	.word	0x24026240

0801cb1c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>:
 801cb1c:	b570      	push	{r4, r5, r6, lr}
 801cb1e:	4604      	mov	r4, r0
 801cb20:	2500      	movs	r5, #0
 801cb22:	9805      	ldr	r0, [sp, #20]
 801cb24:	f89d 601c 	ldrb.w	r6, [sp, #28]
 801cb28:	6061      	str	r1, [r4, #4]
 801cb2a:	8263      	strh	r3, [r4, #18]
 801cb2c:	f89d 1010 	ldrb.w	r1, [sp, #16]
 801cb30:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801cb34:	8025      	strh	r5, [r4, #0]
 801cb36:	7221      	strb	r1, [r4, #8]
 801cb38:	7266      	strb	r6, [r4, #9]
 801cb3a:	60e0      	str	r0, [r4, #12]
 801cb3c:	8222      	strh	r2, [r4, #16]
 801cb3e:	82a3      	strh	r3, [r4, #20]
 801cb40:	82e5      	strh	r5, [r4, #22]
 801cb42:	8325      	strh	r5, [r4, #24]
 801cb44:	8365      	strh	r5, [r4, #26]
 801cb46:	83a5      	strh	r5, [r4, #28]
 801cb48:	83e5      	strh	r5, [r4, #30]
 801cb4a:	8425      	strh	r5, [r4, #32]
 801cb4c:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
 801cb50:	b32e      	cbz	r6, 801cb9e <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 801cb52:	6803      	ldr	r3, [r0, #0]
 801cb54:	695b      	ldr	r3, [r3, #20]
 801cb56:	4798      	blx	r3
 801cb58:	4606      	mov	r6, r0
 801cb5a:	b300      	cbz	r0, 801cb9e <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 801cb5c:	68e0      	ldr	r0, [r4, #12]
 801cb5e:	4631      	mov	r1, r6
 801cb60:	6803      	ldr	r3, [r0, #0]
 801cb62:	68db      	ldr	r3, [r3, #12]
 801cb64:	4798      	blx	r3
 801cb66:	4605      	mov	r5, r0
 801cb68:	b1c8      	cbz	r0, 801cb9e <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 801cb6a:	7b43      	ldrb	r3, [r0, #13]
 801cb6c:	7a82      	ldrb	r2, [r0, #10]
 801cb6e:	005b      	lsls	r3, r3, #1
 801cb70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801cb74:	4313      	orrs	r3, r2
 801cb76:	8423      	strh	r3, [r4, #32]
 801cb78:	7a63      	ldrb	r3, [r4, #9]
 801cb7a:	2b06      	cmp	r3, #6
 801cb7c:	d10f      	bne.n	801cb9e <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 801cb7e:	68e0      	ldr	r0, [r4, #12]
 801cb80:	462a      	mov	r2, r5
 801cb82:	4631      	mov	r1, r6
 801cb84:	6803      	ldr	r3, [r0, #0]
 801cb86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801cb88:	4798      	blx	r3
 801cb8a:	7b6b      	ldrb	r3, [r5, #13]
 801cb8c:	005b      	lsls	r3, r3, #1
 801cb8e:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801cb92:	7aab      	ldrb	r3, [r5, #10]
 801cb94:	4313      	orrs	r3, r2
 801cb96:	4418      	add	r0, r3
 801cb98:	8c23      	ldrh	r3, [r4, #32]
 801cb9a:	4418      	add	r0, r3
 801cb9c:	8420      	strh	r0, [r4, #32]
 801cb9e:	4620      	mov	r0, r4
 801cba0:	bd70      	pop	{r4, r5, r6, pc}

0801cba2 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 801cba2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cba6:	2400      	movs	r4, #0
 801cba8:	b085      	sub	sp, #20
 801cbaa:	4681      	mov	r9, r0
 801cbac:	4688      	mov	r8, r1
 801cbae:	4692      	mov	sl, r2
 801cbb0:	469b      	mov	fp, r3
 801cbb2:	4627      	mov	r7, r4
 801cbb4:	4625      	mov	r5, r4
 801cbb6:	4626      	mov	r6, r4
 801cbb8:	4554      	cmp	r4, sl
 801cbba:	da2a      	bge.n	801cc12 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801cbbc:	2300      	movs	r3, #0
 801cbbe:	9303      	str	r3, [sp, #12]
 801cbc0:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801cbc4:	429d      	cmp	r5, r3
 801cbc6:	d004      	beq.n	801cbd2 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 801cbc8:	f242 030b 	movw	r3, #8203	; 0x200b
 801cbcc:	429d      	cmp	r5, r3
 801cbce:	bf18      	it	ne
 801cbd0:	462f      	movne	r7, r5
 801cbd2:	ab03      	add	r3, sp, #12
 801cbd4:	4642      	mov	r2, r8
 801cbd6:	4659      	mov	r1, fp
 801cbd8:	4648      	mov	r0, r9
 801cbda:	f002 ffbf 	bl	801fb5c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801cbde:	4605      	mov	r5, r0
 801cbe0:	b1b8      	cbz	r0, 801cc12 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801cbe2:	280a      	cmp	r0, #10
 801cbe4:	d015      	beq.n	801cc12 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801cbe6:	9a03      	ldr	r2, [sp, #12]
 801cbe8:	b18a      	cbz	r2, 801cc0e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 801cbea:	7b50      	ldrb	r0, [r2, #13]
 801cbec:	4639      	mov	r1, r7
 801cbee:	7a93      	ldrb	r3, [r2, #10]
 801cbf0:	0040      	lsls	r0, r0, #1
 801cbf2:	8895      	ldrh	r5, [r2, #4]
 801cbf4:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801cbf8:	4303      	orrs	r3, r0
 801cbfa:	4640      	mov	r0, r8
 801cbfc:	9301      	str	r3, [sp, #4]
 801cbfe:	f8d8 3000 	ldr.w	r3, [r8]
 801cc02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801cc04:	4798      	blx	r3
 801cc06:	9b01      	ldr	r3, [sp, #4]
 801cc08:	4418      	add	r0, r3
 801cc0a:	4406      	add	r6, r0
 801cc0c:	b2b6      	uxth	r6, r6
 801cc0e:	3401      	adds	r4, #1
 801cc10:	e7d2      	b.n	801cbb8 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 801cc12:	4630      	mov	r0, r6
 801cc14:	b005      	add	sp, #20
 801cc16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801cc1a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 801cc1a:	2a02      	cmp	r2, #2
 801cc1c:	b530      	push	{r4, r5, lr}
 801cc1e:	d011      	beq.n	801cc44 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 801cc20:	2a03      	cmp	r2, #3
 801cc22:	d01c      	beq.n	801cc5e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 801cc24:	2a01      	cmp	r2, #1
 801cc26:	d10c      	bne.n	801cc42 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801cc28:	888b      	ldrh	r3, [r1, #4]
 801cc2a:	8801      	ldrh	r1, [r0, #0]
 801cc2c:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 801cc30:	1a5b      	subs	r3, r3, r1
 801cc32:	8844      	ldrh	r4, [r0, #2]
 801cc34:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801cc38:	1a9b      	subs	r3, r3, r2
 801cc3a:	8004      	strh	r4, [r0, #0]
 801cc3c:	8081      	strh	r1, [r0, #4]
 801cc3e:	8043      	strh	r3, [r0, #2]
 801cc40:	80c2      	strh	r2, [r0, #6]
 801cc42:	bd30      	pop	{r4, r5, pc}
 801cc44:	88cb      	ldrh	r3, [r1, #6]
 801cc46:	8842      	ldrh	r2, [r0, #2]
 801cc48:	1a9b      	subs	r3, r3, r2
 801cc4a:	88c2      	ldrh	r2, [r0, #6]
 801cc4c:	1a9b      	subs	r3, r3, r2
 801cc4e:	888a      	ldrh	r2, [r1, #4]
 801cc50:	8801      	ldrh	r1, [r0, #0]
 801cc52:	8043      	strh	r3, [r0, #2]
 801cc54:	1a52      	subs	r2, r2, r1
 801cc56:	8881      	ldrh	r1, [r0, #4]
 801cc58:	1a52      	subs	r2, r2, r1
 801cc5a:	8002      	strh	r2, [r0, #0]
 801cc5c:	e7f1      	b.n	801cc42 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801cc5e:	88cb      	ldrh	r3, [r1, #6]
 801cc60:	8841      	ldrh	r1, [r0, #2]
 801cc62:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 801cc66:	1a5b      	subs	r3, r3, r1
 801cc68:	f9b0 5000 	ldrsh.w	r5, [r0]
 801cc6c:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 801cc70:	1a9b      	subs	r3, r3, r2
 801cc72:	8045      	strh	r5, [r0, #2]
 801cc74:	8082      	strh	r2, [r0, #4]
 801cc76:	8003      	strh	r3, [r0, #0]
 801cc78:	80c4      	strh	r4, [r0, #6]
 801cc7a:	e7e2      	b.n	801cc42 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

0801cc7c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 801cc7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cc80:	b09f      	sub	sp, #124	; 0x7c
 801cc82:	9116      	str	r1, [sp, #88]	; 0x58
 801cc84:	9317      	str	r3, [sp, #92]	; 0x5c
 801cc86:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801cc88:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801cc8a:	8809      	ldrh	r1, [r1, #0]
 801cc8c:	889b      	ldrh	r3, [r3, #4]
 801cc8e:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 801cc92:	440b      	add	r3, r1
 801cc94:	9212      	str	r2, [sp, #72]	; 0x48
 801cc96:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 801cc9a:	b21b      	sxth	r3, r3
 801cc9c:	9011      	str	r0, [sp, #68]	; 0x44
 801cc9e:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 801cca2:	9310      	str	r3, [sp, #64]	; 0x40
 801cca4:	f8d8 3000 	ldr.w	r3, [r8]
 801cca8:	f9bd 60a0 	ldrsh.w	r6, [sp, #160]	; 0xa0
 801ccac:	7b19      	ldrb	r1, [r3, #12]
 801ccae:	7adb      	ldrb	r3, [r3, #11]
 801ccb0:	9114      	str	r1, [sp, #80]	; 0x50
 801ccb2:	9315      	str	r3, [sp, #84]	; 0x54
 801ccb4:	2a00      	cmp	r2, #0
 801ccb6:	d06a      	beq.n	801cd8e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 801ccb8:	f898 3010 	ldrb.w	r3, [r8, #16]
 801ccbc:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801ccbe:	2b06      	cmp	r3, #6
 801ccc0:	bf14      	ite	ne
 801ccc2:	2301      	movne	r3, #1
 801ccc4:	2302      	moveq	r3, #2
 801ccc6:	4413      	add	r3, r2
 801ccc8:	f04f 0900 	mov.w	r9, #0
 801cccc:	930f      	str	r3, [sp, #60]	; 0x3c
 801ccce:	464c      	mov	r4, r9
 801ccd0:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 801ccd4:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 801ccd8:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 801ccdc:	4293      	cmp	r3, r2
 801ccde:	f280 808f 	bge.w	801ce00 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 801cce2:	2300      	movs	r3, #0
 801cce4:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
 801cce8:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 801ccec:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801ccf0:	429c      	cmp	r4, r3
 801ccf2:	d006      	beq.n	801cd02 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x86>
 801ccf4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ccf6:	f242 020b 	movw	r2, #8203	; 0x200b
 801ccfa:	4294      	cmp	r4, r2
 801ccfc:	bf18      	it	ne
 801ccfe:	4623      	movne	r3, r4
 801cd00:	930d      	str	r3, [sp, #52]	; 0x34
 801cd02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cd04:	992d      	ldr	r1, [sp, #180]	; 0xb4
 801cd06:	f8d8 2000 	ldr.w	r2, [r8]
 801cd0a:	428b      	cmp	r3, r1
 801cd0c:	db41      	blt.n	801cd92 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x116>
 801cd0e:	6813      	ldr	r3, [r2, #0]
 801cd10:	4610      	mov	r0, r2
 801cd12:	695b      	ldr	r3, [r3, #20]
 801cd14:	4798      	blx	r3
 801cd16:	4604      	mov	r4, r0
 801cd18:	f8d8 0000 	ldr.w	r0, [r8]
 801cd1c:	aa1d      	add	r2, sp, #116	; 0x74
 801cd1e:	4621      	mov	r1, r4
 801cd20:	6803      	ldr	r3, [r0, #0]
 801cd22:	689d      	ldr	r5, [r3, #8]
 801cd24:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 801cd28:	47a8      	blx	r5
 801cd2a:	901c      	str	r0, [sp, #112]	; 0x70
 801cd2c:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801cd30:	429c      	cmp	r4, r3
 801cd32:	f000 80ec 	beq.w	801cf0e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 801cd36:	f242 030b 	movw	r3, #8203	; 0x200b
 801cd3a:	429c      	cmp	r4, r3
 801cd3c:	f000 80e7 	beq.w	801cf0e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 801cd40:	2c00      	cmp	r4, #0
 801cd42:	f000 80f9 	beq.w	801cf38 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
 801cd46:	2c0a      	cmp	r4, #10
 801cd48:	d060      	beq.n	801ce0c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 801cd4a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801cd4c:	b36a      	cbz	r2, 801cdaa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12e>
 801cd4e:	8894      	ldrh	r4, [r2, #4]
 801cd50:	f1bb 0f00 	cmp.w	fp, #0
 801cd54:	d03b      	beq.n	801cdce <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x152>
 801cd56:	f892 900d 	ldrb.w	r9, [r2, #13]
 801cd5a:	f1bb 0f01 	cmp.w	fp, #1
 801cd5e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801cd62:	f409 7380 	and.w	r3, r9, #256	; 0x100
 801cd66:	f892 900a 	ldrb.w	r9, [r2, #10]
 801cd6a:	ea49 0903 	orr.w	r9, r9, r3
 801cd6e:	d134      	bne.n	801cdda <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15e>
 801cd70:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801cd72:	eba6 0609 	sub.w	r6, r6, r9
 801cd76:	2b00      	cmp	r3, #0
 801cd78:	d14f      	bne.n	801ce1a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 801cd7a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801cd7c:	eb09 0306 	add.w	r3, r9, r6
 801cd80:	4413      	add	r3, r2
 801cd82:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801cd84:	f9b2 2000 	ldrsh.w	r2, [r2]
 801cd88:	4293      	cmp	r3, r2
 801cd8a:	da51      	bge.n	801ce30 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 801cd8c:	e038      	b.n	801ce00 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 801cd8e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801cd90:	e79a      	b.n	801ccc8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4c>
 801cd92:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 801cd96:	4659      	mov	r1, fp
 801cd98:	982c      	ldr	r0, [sp, #176]	; 0xb0
 801cd9a:	9301      	str	r3, [sp, #4]
 801cd9c:	ab1d      	add	r3, sp, #116	; 0x74
 801cd9e:	9300      	str	r3, [sp, #0]
 801cda0:	ab1c      	add	r3, sp, #112	; 0x70
 801cda2:	f002 ff24 	bl	801fbee <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 801cda6:	4604      	mov	r4, r0
 801cda8:	e7c0      	b.n	801cd2c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xb0>
 801cdaa:	f8d8 0000 	ldr.w	r0, [r8]
 801cdae:	6803      	ldr	r3, [r0, #0]
 801cdb0:	691b      	ldr	r3, [r3, #16]
 801cdb2:	4798      	blx	r3
 801cdb4:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801cdb8:	4298      	cmp	r0, r3
 801cdba:	f000 80a8 	beq.w	801cf0e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 801cdbe:	f242 030b 	movw	r3, #8203	; 0x200b
 801cdc2:	4298      	cmp	r0, r3
 801cdc4:	f000 80a3 	beq.w	801cf0e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 801cdc8:	f1bb 0f00 	cmp.w	fp, #0
 801cdcc:	d100      	bne.n	801cdd0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 801cdce:	444e      	add	r6, r9
 801cdd0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801cdd2:	2a00      	cmp	r2, #0
 801cdd4:	d1bf      	bne.n	801cd56 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 801cdd6:	4691      	mov	r9, r2
 801cdd8:	e099      	b.n	801cf0e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 801cdda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801cddc:	2b00      	cmp	r3, #0
 801cdde:	f000 80ad 	beq.w	801cf3c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c0>
 801cde2:	f1bb 0f00 	cmp.w	fp, #0
 801cde6:	d118      	bne.n	801ce1a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 801cde8:	f8d8 0000 	ldr.w	r0, [r8]
 801cdec:	990d      	ldr	r1, [sp, #52]	; 0x34
 801cdee:	6803      	ldr	r3, [r0, #0]
 801cdf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801cdf2:	4798      	blx	r3
 801cdf4:	4406      	add	r6, r0
 801cdf6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801cdf8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801cdfa:	1af3      	subs	r3, r6, r3
 801cdfc:	4293      	cmp	r3, r2
 801cdfe:	dd17      	ble.n	801ce30 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 801ce00:	2c00      	cmp	r4, #0
 801ce02:	f000 8099 	beq.w	801cf38 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
 801ce06:	2c0a      	cmp	r4, #10
 801ce08:	f040 8087 	bne.w	801cf1a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29e>
 801ce0c:	240a      	movs	r4, #10
 801ce0e:	fab4 f084 	clz	r0, r4
 801ce12:	0940      	lsrs	r0, r0, #5
 801ce14:	b01f      	add	sp, #124	; 0x7c
 801ce16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ce1a:	f8d8 0000 	ldr.w	r0, [r8]
 801ce1e:	990d      	ldr	r1, [sp, #52]	; 0x34
 801ce20:	6803      	ldr	r3, [r0, #0]
 801ce22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ce24:	4798      	blx	r3
 801ce26:	f1bb 0f01 	cmp.w	fp, #1
 801ce2a:	eba6 0600 	sub.w	r6, r6, r0
 801ce2e:	d0a4      	beq.n	801cd7a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfe>
 801ce30:	981c      	ldr	r0, [sp, #112]	; 0x70
 801ce32:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801ce34:	f990 1009 	ldrsb.w	r1, [r0, #9]
 801ce38:	f9b3 7000 	ldrsh.w	r7, [r3]
 801ce3c:	7b43      	ldrb	r3, [r0, #13]
 801ce3e:	4431      	add	r1, r6
 801ce40:	015b      	lsls	r3, r3, #5
 801ce42:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801ce46:	7983      	ldrb	r3, [r0, #6]
 801ce48:	4313      	orrs	r3, r2
 801ce4a:	440b      	add	r3, r1
 801ce4c:	42bb      	cmp	r3, r7
 801ce4e:	db5e      	blt.n	801cf0e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 801ce50:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ce52:	4299      	cmp	r1, r3
 801ce54:	da5b      	bge.n	801cf0e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 801ce56:	f8d8 0000 	ldr.w	r0, [r8]
 801ce5a:	42b7      	cmp	r7, r6
 801ce5c:	6803      	ldr	r3, [r0, #0]
 801ce5e:	bfcc      	ite	gt
 801ce60:	1bbf      	subgt	r7, r7, r6
 801ce62:	2700      	movle	r7, #0
 801ce64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ce66:	bfc8      	it	gt
 801ce68:	b2bf      	uxthgt	r7, r7
 801ce6a:	4798      	blx	r3
 801ce6c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801ce6e:	7b5a      	ldrb	r2, [r3, #13]
 801ce70:	00d1      	lsls	r1, r2, #3
 801ce72:	f401 7580 	and.w	r5, r1, #256	; 0x100
 801ce76:	7a19      	ldrb	r1, [r3, #8]
 801ce78:	4329      	orrs	r1, r5
 801ce7a:	0655      	lsls	r5, r2, #25
 801ce7c:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 801ce7e:	bf48      	it	mi
 801ce80:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 801ce84:	4405      	add	r5, r0
 801ce86:	bf48      	it	mi
 801ce88:	b209      	sxthmi	r1, r1
 801ce8a:	1a6d      	subs	r5, r5, r1
 801ce8c:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801ce8e:	b2ad      	uxth	r5, r5
 801ce90:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 801ce94:	fa0f fa85 	sxth.w	sl, r5
 801ce98:	4551      	cmp	r1, sl
 801ce9a:	dd3c      	ble.n	801cf16 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29a>
 801ce9c:	0112      	lsls	r2, r2, #4
 801ce9e:	79d8      	ldrb	r0, [r3, #7]
 801cea0:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801cea4:	4302      	orrs	r2, r0
 801cea6:	4492      	add	sl, r2
 801cea8:	4551      	cmp	r1, sl
 801ceaa:	dc30      	bgt.n	801cf0e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 801ceac:	1b4d      	subs	r5, r1, r5
 801ceae:	468a      	mov	sl, r1
 801ceb0:	b22d      	sxth	r5, r5
 801ceb2:	9319      	str	r3, [sp, #100]	; 0x64
 801ceb4:	b2ad      	uxth	r5, r5
 801ceb6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801ceb8:	f8d8 0000 	ldr.w	r0, [r8]
 801cebc:	681a      	ldr	r2, [r3, #0]
 801cebe:	6801      	ldr	r1, [r0, #0]
 801cec0:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 801cec2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801cec4:	9313      	str	r3, [sp, #76]	; 0x4c
 801cec6:	9218      	str	r2, [sp, #96]	; 0x60
 801cec8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801ceca:	4788      	blx	r1
 801cecc:	f898 1006 	ldrb.w	r1, [r8, #6]
 801ced0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801ced2:	910b      	str	r1, [sp, #44]	; 0x2c
 801ced4:	f898 100e 	ldrb.w	r1, [r8, #14]
 801ced8:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801ceda:	910a      	str	r1, [sp, #40]	; 0x28
 801cedc:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 801cee0:	9109      	str	r1, [sp, #36]	; 0x24
 801cee2:	f8d8 1008 	ldr.w	r1, [r8, #8]
 801cee6:	9305      	str	r3, [sp, #20]
 801cee8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801ceea:	9206      	str	r2, [sp, #24]
 801ceec:	9304      	str	r3, [sp, #16]
 801ceee:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801cef0:	f8cd a004 	str.w	sl, [sp, #4]
 801cef4:	e9cd 7502 	strd	r7, r5, [sp, #8]
 801cef8:	4437      	add	r7, r6
 801cefa:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801cefc:	b23f      	sxth	r7, r7
 801cefe:	e9cd 0107 	strd	r0, r1, [sp, #28]
 801cf02:	9700      	str	r7, [sp, #0]
 801cf04:	9916      	ldr	r1, [sp, #88]	; 0x58
 801cf06:	681a      	ldr	r2, [r3, #0]
 801cf08:	9811      	ldr	r0, [sp, #68]	; 0x44
 801cf0a:	685b      	ldr	r3, [r3, #4]
 801cf0c:	47a8      	blx	r5
 801cf0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cf10:	3301      	adds	r3, #1
 801cf12:	930e      	str	r3, [sp, #56]	; 0x38
 801cf14:	e6e0      	b.n	801ccd8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5c>
 801cf16:	2500      	movs	r5, #0
 801cf18:	e7cb      	b.n	801ceb2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x236>
 801cf1a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801cf1c:	3501      	adds	r5, #1
 801cf1e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801cf20:	429d      	cmp	r5, r3
 801cf22:	f6bf af74 	bge.w	801ce0e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 801cf26:	4659      	mov	r1, fp
 801cf28:	982c      	ldr	r0, [sp, #176]	; 0xb0
 801cf2a:	f7ec ff3d 	bl	8009da8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801cf2e:	4604      	mov	r4, r0
 801cf30:	b110      	cbz	r0, 801cf38 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
 801cf32:	280a      	cmp	r0, #10
 801cf34:	d1f2      	bne.n	801cf1c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2a0>
 801cf36:	e769      	b.n	801ce0c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 801cf38:	2400      	movs	r4, #0
 801cf3a:	e768      	b.n	801ce0e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 801cf3c:	f1bb 0f00 	cmp.w	fp, #0
 801cf40:	f43f af59 	beq.w	801cdf6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x17a>
 801cf44:	e774      	b.n	801ce30 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>

0801cf46 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 801cf46:	b530      	push	{r4, r5, lr}
 801cf48:	8ac4      	ldrh	r4, [r0, #22]
 801cf4a:	8b45      	ldrh	r5, [r0, #26]
 801cf4c:	8343      	strh	r3, [r0, #26]
 801cf4e:	442c      	add	r4, r5
 801cf50:	1ae4      	subs	r4, r4, r3
 801cf52:	8b83      	ldrh	r3, [r0, #28]
 801cf54:	82c4      	strh	r4, [r0, #22]
 801cf56:	8b04      	ldrh	r4, [r0, #24]
 801cf58:	4422      	add	r2, r4
 801cf5a:	440c      	add	r4, r1
 801cf5c:	1a59      	subs	r1, r3, r1
 801cf5e:	83c2      	strh	r2, [r0, #30]
 801cf60:	8304      	strh	r4, [r0, #24]
 801cf62:	8381      	strh	r1, [r0, #28]
 801cf64:	bd30      	pop	{r4, r5, pc}

0801cf66 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>:
 801cf66:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cf6a:	4604      	mov	r4, r0
 801cf6c:	8a47      	ldrh	r7, [r0, #18]
 801cf6e:	68c0      	ldr	r0, [r0, #12]
 801cf70:	b085      	sub	sp, #20
 801cf72:	6803      	ldr	r3, [r0, #0]
 801cf74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cf76:	4798      	blx	r3
 801cf78:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 801cf7c:	7a63      	ldrb	r3, [r4, #9]
 801cf7e:	eb06 0640 	add.w	r6, r6, r0, lsl #1
 801cf82:	3b01      	subs	r3, #1
 801cf84:	42b7      	cmp	r7, r6
 801cf86:	bfac      	ite	ge
 801cf88:	f04f 0900 	movge.w	r9, #0
 801cf8c:	f04f 0901 	movlt.w	r9, #1
 801cf90:	2b05      	cmp	r3, #5
 801cf92:	d804      	bhi.n	801cf9e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x38>
 801cf94:	e8df f003 	tbb	[pc, r3]
 801cf98:	470f0854 	.word	0x470f0854
 801cf9c:	4c4c      	.short	0x4c4c
 801cf9e:	2500      	movs	r5, #0
 801cfa0:	46a9      	mov	r9, r5
 801cfa2:	462e      	mov	r6, r5
 801cfa4:	462f      	mov	r7, r5
 801cfa6:	e00e      	b.n	801cfc6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 801cfa8:	42b7      	cmp	r7, r6
 801cfaa:	f04f 0500 	mov.w	r5, #0
 801cfae:	bfb4      	ite	lt
 801cfb0:	2600      	movlt	r6, #0
 801cfb2:	2601      	movge	r6, #1
 801cfb4:	e7f6      	b.n	801cfa4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 801cfb6:	42b7      	cmp	r7, r6
 801cfb8:	464d      	mov	r5, r9
 801cfba:	f04f 0900 	mov.w	r9, #0
 801cfbe:	bfb4      	ite	lt
 801cfc0:	2600      	movlt	r6, #0
 801cfc2:	2601      	movge	r6, #1
 801cfc4:	464f      	mov	r7, r9
 801cfc6:	f04f 0800 	mov.w	r8, #0
 801cfca:	f8a4 8016 	strh.w	r8, [r4, #22]
 801cfce:	f8a4 8018 	strh.w	r8, [r4, #24]
 801cfd2:	f8cd 8004 	str.w	r8, [sp, #4]
 801cfd6:	2300      	movs	r3, #0
 801cfd8:	9303      	str	r3, [sp, #12]
 801cfda:	8823      	ldrh	r3, [r4, #0]
 801cfdc:	2b20      	cmp	r3, #32
 801cfde:	d033      	beq.n	801d048 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xe2>
 801cfe0:	f242 010b 	movw	r1, #8203	; 0x200b
 801cfe4:	1a5a      	subs	r2, r3, r1
 801cfe6:	f1d2 0a00 	rsbs	sl, r2, #0
 801cfea:	eb4a 0a02 	adc.w	sl, sl, r2
 801cfee:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801cff2:	4293      	cmp	r3, r2
 801cff4:	d008      	beq.n	801d008 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 801cff6:	428b      	cmp	r3, r1
 801cff8:	9a01      	ldr	r2, [sp, #4]
 801cffa:	bf0e      	itee	eq
 801cffc:	f04f 0a01 	moveq.w	sl, #1
 801d000:	461a      	movne	r2, r3
 801d002:	f04f 0a00 	movne.w	sl, #0
 801d006:	9201      	str	r2, [sp, #4]
 801d008:	ab03      	add	r3, sp, #12
 801d00a:	68e2      	ldr	r2, [r4, #12]
 801d00c:	7a21      	ldrb	r1, [r4, #8]
 801d00e:	6860      	ldr	r0, [r4, #4]
 801d010:	f002 fda4 	bl	801fb5c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801d014:	8020      	strh	r0, [r4, #0]
 801d016:	b9d8      	cbnz	r0, 801d050 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xea>
 801d018:	8ba2      	ldrh	r2, [r4, #28]
 801d01a:	2300      	movs	r3, #0
 801d01c:	4611      	mov	r1, r2
 801d01e:	4620      	mov	r0, r4
 801d020:	f7ff ff91 	bl	801cf46 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801d024:	e06e      	b.n	801d104 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 801d026:	2500      	movs	r5, #0
 801d028:	2701      	movs	r7, #1
 801d02a:	46a9      	mov	r9, r5
 801d02c:	462e      	mov	r6, r5
 801d02e:	e7ca      	b.n	801cfc6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 801d030:	42b7      	cmp	r7, r6
 801d032:	f04f 0500 	mov.w	r5, #0
 801d036:	bfb4      	ite	lt
 801d038:	2700      	movlt	r7, #0
 801d03a:	2701      	movge	r7, #1
 801d03c:	462e      	mov	r6, r5
 801d03e:	e7c2      	b.n	801cfc6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 801d040:	2500      	movs	r5, #0
 801d042:	2601      	movs	r6, #1
 801d044:	46a9      	mov	r9, r5
 801d046:	e7ad      	b.n	801cfa4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 801d048:	9301      	str	r3, [sp, #4]
 801d04a:	f04f 0a01 	mov.w	sl, #1
 801d04e:	e7db      	b.n	801d008 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 801d050:	8b63      	ldrh	r3, [r4, #26]
 801d052:	280a      	cmp	r0, #10
 801d054:	f103 0301 	add.w	r3, r3, #1
 801d058:	8363      	strh	r3, [r4, #26]
 801d05a:	d0dd      	beq.n	801d018 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb2>
 801d05c:	9a03      	ldr	r2, [sp, #12]
 801d05e:	bb62      	cbnz	r2, 801d0ba <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x154>
 801d060:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801d064:	4298      	cmp	r0, r3
 801d066:	d003      	beq.n	801d070 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 801d068:	f242 030b 	movw	r3, #8203	; 0x200b
 801d06c:	4298      	cmp	r0, r3
 801d06e:	d1b2      	bne.n	801cfd6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801d070:	8823      	ldrh	r3, [r4, #0]
 801d072:	8ba1      	ldrh	r1, [r4, #28]
 801d074:	2b20      	cmp	r3, #32
 801d076:	d003      	beq.n	801d080 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x11a>
 801d078:	f242 000b 	movw	r0, #8203	; 0x200b
 801d07c:	4283      	cmp	r3, r0
 801d07e:	d131      	bne.n	801d0e4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x17e>
 801d080:	f1ba 0f00 	cmp.w	sl, #0
 801d084:	bf0a      	itet	eq
 801d086:	4688      	moveq	r8, r1
 801d088:	4650      	movne	r0, sl
 801d08a:	2001      	moveq	r0, #1
 801d08c:	440a      	add	r2, r1
 801d08e:	8b23      	ldrh	r3, [r4, #24]
 801d090:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 801d094:	b292      	uxth	r2, r2
 801d096:	83a2      	strh	r2, [r4, #28]
 801d098:	4413      	add	r3, r2
 801d09a:	f1b9 0f00 	cmp.w	r9, #0
 801d09e:	d102      	bne.n	801d0a6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x140>
 801d0a0:	2d00      	cmp	r5, #0
 801d0a2:	d042      	beq.n	801d12a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1c4>
 801d0a4:	b300      	cbz	r0, 801d0e8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x182>
 801d0a6:	8c21      	ldrh	r1, [r4, #32]
 801d0a8:	4419      	add	r1, r3
 801d0aa:	458c      	cmp	ip, r1
 801d0ac:	da37      	bge.n	801d11e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 801d0ae:	8ae1      	ldrh	r1, [r4, #22]
 801d0b0:	2900      	cmp	r1, #0
 801d0b2:	d034      	beq.n	801d11e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 801d0b4:	4563      	cmp	r3, ip
 801d0b6:	dd8e      	ble.n	801cfd6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801d0b8:	e01d      	b.n	801d0f6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x190>
 801d0ba:	8893      	ldrh	r3, [r2, #4]
 801d0bc:	9901      	ldr	r1, [sp, #4]
 801d0be:	8023      	strh	r3, [r4, #0]
 801d0c0:	f892 b00d 	ldrb.w	fp, [r2, #13]
 801d0c4:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 801d0c8:	f40b 7080 	and.w	r0, fp, #256	; 0x100
 801d0cc:	f892 b00a 	ldrb.w	fp, [r2, #10]
 801d0d0:	ea4b 0b00 	orr.w	fp, fp, r0
 801d0d4:	68e0      	ldr	r0, [r4, #12]
 801d0d6:	6803      	ldr	r3, [r0, #0]
 801d0d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d0da:	4798      	blx	r3
 801d0dc:	eb0b 0200 	add.w	r2, fp, r0
 801d0e0:	b292      	uxth	r2, r2
 801d0e2:	e7c5      	b.n	801d070 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 801d0e4:	2000      	movs	r0, #0
 801d0e6:	e7d1      	b.n	801d08c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x126>
 801d0e8:	4563      	cmp	r3, ip
 801d0ea:	f77f af74 	ble.w	801cfd6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801d0ee:	8ae3      	ldrh	r3, [r4, #22]
 801d0f0:	2b00      	cmp	r3, #0
 801d0f2:	f43f af70 	beq.w	801cfd6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801d0f6:	2301      	movs	r3, #1
 801d0f8:	8c22      	ldrh	r2, [r4, #32]
 801d0fa:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 801d0fe:	8be3      	ldrh	r3, [r4, #30]
 801d100:	4413      	add	r3, r2
 801d102:	83e3      	strh	r3, [r4, #30]
 801d104:	68e0      	ldr	r0, [r4, #12]
 801d106:	6803      	ldr	r3, [r0, #0]
 801d108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d10a:	4798      	blx	r3
 801d10c:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 801d110:	4418      	add	r0, r3
 801d112:	8a63      	ldrh	r3, [r4, #18]
 801d114:	1a18      	subs	r0, r3, r0
 801d116:	8260      	strh	r0, [r4, #18]
 801d118:	b005      	add	sp, #20
 801d11a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d11e:	2300      	movs	r3, #0
 801d120:	4611      	mov	r1, r2
 801d122:	4620      	mov	r0, r4
 801d124:	f7ff ff0f 	bl	801cf46 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801d128:	e755      	b.n	801cfd6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801d12a:	4563      	cmp	r3, ip
 801d12c:	dd14      	ble.n	801d158 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1f2>
 801d12e:	b117      	cbz	r7, 801d136 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1d0>
 801d130:	2301      	movs	r3, #1
 801d132:	460a      	mov	r2, r1
 801d134:	e772      	b.n	801d01c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb6>
 801d136:	2e00      	cmp	r6, #0
 801d138:	f43f af4d 	beq.w	801cfd6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801d13c:	2800      	cmp	r0, #0
 801d13e:	f47f af4a 	bne.w	801cfd6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801d142:	f1ba 0f00 	cmp.w	sl, #0
 801d146:	d002      	beq.n	801d14e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1e8>
 801d148:	2301      	movs	r3, #1
 801d14a:	4642      	mov	r2, r8
 801d14c:	e767      	b.n	801d01e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb8>
 801d14e:	8ae3      	ldrh	r3, [r4, #22]
 801d150:	2b00      	cmp	r3, #0
 801d152:	f43f af40 	beq.w	801cfd6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801d156:	e7d5      	b.n	801d104 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 801d158:	2800      	cmp	r0, #0
 801d15a:	f47f af3c 	bne.w	801cfd6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801d15e:	f1ba 0f00 	cmp.w	sl, #0
 801d162:	f43f af38 	beq.w	801cfd6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801d166:	2301      	movs	r3, #1
 801d168:	4642      	mov	r2, r8
 801d16a:	e7da      	b.n	801d122 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1bc>

0801d16c <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 801d16c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d16e:	4605      	mov	r5, r0
 801d170:	b08f      	sub	sp, #60	; 0x3c
 801d172:	4617      	mov	r7, r2
 801d174:	461c      	mov	r4, r3
 801d176:	460e      	mov	r6, r1
 801d178:	b1d1      	cbz	r1, 801d1b0 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 801d17a:	681b      	ldr	r3, [r3, #0]
 801d17c:	4620      	mov	r0, r4
 801d17e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d180:	4798      	blx	r3
 801d182:	4240      	negs	r0, r0
 801d184:	9603      	str	r6, [sp, #12]
 801d186:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801d18a:	b200      	sxth	r0, r0
 801d18c:	9700      	str	r7, [sp, #0]
 801d18e:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 801d192:	4629      	mov	r1, r5
 801d194:	e9cd 4001 	strd	r4, r0, [sp, #4]
 801d198:	2401      	movs	r4, #1
 801d19a:	a805      	add	r0, sp, #20
 801d19c:	f7ff fcbe 	bl	801cb1c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 801d1a0:	a805      	add	r0, sp, #20
 801d1a2:	f7ff fee0 	bl	801cf66 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 801d1a6:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 801d1aa:	b163      	cbz	r3, 801d1c6 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x5a>
 801d1ac:	3401      	adds	r4, #1
 801d1ae:	e7f7      	b.n	801d1a0 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 801d1b0:	2401      	movs	r4, #1
 801d1b2:	f002 fd9f 	bl	801fcf4 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801d1b6:	280a      	cmp	r0, #10
 801d1b8:	4628      	mov	r0, r5
 801d1ba:	bf08      	it	eq
 801d1bc:	3401      	addeq	r4, #1
 801d1be:	f002 fd99 	bl	801fcf4 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801d1c2:	2800      	cmp	r0, #0
 801d1c4:	d1f7      	bne.n	801d1b6 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
 801d1c6:	b2a0      	uxth	r0, r4
 801d1c8:	b00f      	add	sp, #60	; 0x3c
 801d1ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d1cc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 801d1cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d1d0:	b0e3      	sub	sp, #396	; 0x18c
 801d1d2:	461c      	mov	r4, r3
 801d1d4:	4683      	mov	fp, r0
 801d1d6:	4688      	mov	r8, r1
 801d1d8:	9b6c      	ldr	r3, [sp, #432]	; 0x1b0
 801d1da:	2b00      	cmp	r3, #0
 801d1dc:	f000 810f 	beq.w	801d3fe <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 801d1e0:	6823      	ldr	r3, [r4, #0]
 801d1e2:	2b00      	cmp	r3, #0
 801d1e4:	f000 810b 	beq.w	801d3fe <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 801d1e8:	7ba3      	ldrb	r3, [r4, #14]
 801d1ea:	2b00      	cmp	r3, #0
 801d1ec:	f000 8107 	beq.w	801d3fe <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 801d1f0:	ad0a      	add	r5, sp, #40	; 0x28
 801d1f2:	6810      	ldr	r0, [r2, #0]
 801d1f4:	6851      	ldr	r1, [r2, #4]
 801d1f6:	462b      	mov	r3, r5
 801d1f8:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
 801d1fc:	c303      	stmia	r3!, {r0, r1}
 801d1fe:	2100      	movs	r1, #0
 801d200:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 801d204:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 801d208:	4628      	mov	r0, r5
 801d20a:	910c      	str	r1, [sp, #48]	; 0x30
 801d20c:	a90c      	add	r1, sp, #48	; 0x30
 801d20e:	79a2      	ldrb	r2, [r4, #6]
 801d210:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801d214:	f7ff fd01 	bl	801cc1a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801d218:	a90c      	add	r1, sp, #48	; 0x30
 801d21a:	79a2      	ldrb	r2, [r4, #6]
 801d21c:	4608      	mov	r0, r1
 801d21e:	f7ff fcfc 	bl	801cc1a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801d222:	a817      	add	r0, sp, #92	; 0x5c
 801d224:	f002 f939 	bl	801f49a <_ZN8touchgfx12TextProviderC1Ev>
 801d228:	6820      	ldr	r0, [r4, #0]
 801d22a:	6803      	ldr	r3, [r0, #0]
 801d22c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801d22e:	4798      	blx	r3
 801d230:	4606      	mov	r6, r0
 801d232:	6820      	ldr	r0, [r4, #0]
 801d234:	6803      	ldr	r3, [r0, #0]
 801d236:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801d238:	4798      	blx	r3
 801d23a:	4633      	mov	r3, r6
 801d23c:	9a6d      	ldr	r2, [sp, #436]	; 0x1b4
 801d23e:	996c      	ldr	r1, [sp, #432]	; 0x1b0
 801d240:	9000      	str	r0, [sp, #0]
 801d242:	a817      	add	r0, sp, #92	; 0x5c
 801d244:	f002 f984 	bl	801f550 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801d248:	6820      	ldr	r0, [r4, #0]
 801d24a:	f894 a004 	ldrb.w	sl, [r4, #4]
 801d24e:	6803      	ldr	r3, [r0, #0]
 801d250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d252:	4798      	blx	r3
 801d254:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 801d258:	6823      	ldr	r3, [r4, #0]
 801d25a:	4607      	mov	r7, r0
 801d25c:	4406      	add	r6, r0
 801d25e:	a830      	add	r0, sp, #192	; 0xc0
 801d260:	f893 9009 	ldrb.w	r9, [r3, #9]
 801d264:	f002 f919 	bl	801f49a <_ZN8touchgfx12TextProviderC1Ev>
 801d268:	7c23      	ldrb	r3, [r4, #16]
 801d26a:	b17b      	cbz	r3, 801d28c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xc0>
 801d26c:	6820      	ldr	r0, [r4, #0]
 801d26e:	6803      	ldr	r3, [r0, #0]
 801d270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801d272:	4798      	blx	r3
 801d274:	9009      	str	r0, [sp, #36]	; 0x24
 801d276:	6820      	ldr	r0, [r4, #0]
 801d278:	6802      	ldr	r2, [r0, #0]
 801d27a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 801d27c:	4790      	blx	r2
 801d27e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d280:	9000      	str	r0, [sp, #0]
 801d282:	a830      	add	r0, sp, #192	; 0xc0
 801d284:	9a6d      	ldr	r2, [sp, #436]	; 0x1b4
 801d286:	996c      	ldr	r1, [sp, #432]	; 0x1b0
 801d288:	f002 f962 	bl	801f550 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801d28c:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801d290:	a80e      	add	r0, sp, #56	; 0x38
 801d292:	7be2      	ldrb	r2, [r4, #15]
 801d294:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 801d298:	1a8a      	subs	r2, r1, r2
 801d29a:	7c21      	ldrb	r1, [r4, #16]
 801d29c:	9103      	str	r1, [sp, #12]
 801d29e:	b292      	uxth	r2, r2
 801d2a0:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 801d2a4:	9102      	str	r1, [sp, #8]
 801d2a6:	6821      	ldr	r1, [r4, #0]
 801d2a8:	9101      	str	r1, [sp, #4]
 801d2aa:	7961      	ldrb	r1, [r4, #5]
 801d2ac:	9100      	str	r1, [sp, #0]
 801d2ae:	a930      	add	r1, sp, #192	; 0xc0
 801d2b0:	f7ff fc34 	bl	801cb1c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 801d2b4:	2e00      	cmp	r6, #0
 801d2b6:	dc5b      	bgt.n	801d370 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
 801d2b8:	af17      	add	r7, sp, #92	; 0x5c
 801d2ba:	f04f 0900 	mov.w	r9, #0
 801d2be:	7c23      	ldrb	r3, [r4, #16]
 801d2c0:	2b00      	cmp	r3, #0
 801d2c2:	f000 80ae 	beq.w	801d422 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 801d2c6:	a80e      	add	r0, sp, #56	; 0x38
 801d2c8:	f7ff fe4d 	bl	801cf66 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 801d2cc:	f1ba 0f00 	cmp.w	sl, #0
 801d2d0:	f000 80a2 	beq.w	801d418 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24c>
 801d2d4:	7c23      	ldrb	r3, [r4, #16]
 801d2d6:	2264      	movs	r2, #100	; 0x64
 801d2d8:	4639      	mov	r1, r7
 801d2da:	a849      	add	r0, sp, #292	; 0x124
 801d2dc:	9309      	str	r3, [sp, #36]	; 0x24
 801d2de:	f00b fb59 	bl	8028994 <memcpy>
 801d2e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d2e4:	2b00      	cmp	r3, #0
 801d2e6:	f000 80a4 	beq.w	801d432 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x266>
 801d2ea:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 801d2ee:	7922      	ldrb	r2, [r4, #4]
 801d2f0:	2a01      	cmp	r2, #1
 801d2f2:	f040 8087 	bne.w	801d404 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 801d2f6:	f9bd 0034 	ldrsh.w	r0, [sp, #52]	; 0x34
 801d2fa:	1ac0      	subs	r0, r0, r3
 801d2fc:	2302      	movs	r3, #2
 801d2fe:	fb90 f0f3 	sdiv	r0, r0, r3
 801d302:	b200      	sxth	r0, r0
 801d304:	7c23      	ldrb	r3, [r4, #16]
 801d306:	2b00      	cmp	r3, #0
 801d308:	f000 8088 	beq.w	801d41c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x250>
 801d30c:	f8bd 204e 	ldrh.w	r2, [sp, #78]	; 0x4e
 801d310:	f89d 105a 	ldrb.w	r1, [sp, #90]	; 0x5a
 801d314:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801d318:	e9cd 2105 	strd	r2, r1, [sp, #20]
 801d31c:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 801d320:	2100      	movs	r1, #0
 801d322:	4410      	add	r0, r2
 801d324:	4642      	mov	r2, r8
 801d326:	b200      	sxth	r0, r0
 801d328:	e9cd 9703 	strd	r9, r7, [sp, #12]
 801d32c:	9000      	str	r0, [sp, #0]
 801d32e:	4658      	mov	r0, fp
 801d330:	e9cd 5401 	strd	r5, r4, [sp, #4]
 801d334:	f7ff fca2 	bl	801cc7c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 801d338:	2800      	cmp	r0, #0
 801d33a:	d160      	bne.n	801d3fe <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 801d33c:	b2b2      	uxth	r2, r6
 801d33e:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 801d342:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 801d346:	4413      	add	r3, r2
 801d348:	1a8a      	subs	r2, r1, r2
 801d34a:	b21b      	sxth	r3, r3
 801d34c:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
 801d350:	f89d 205a 	ldrb.w	r2, [sp, #90]	; 0x5a
 801d354:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801d358:	2a00      	cmp	r2, #0
 801d35a:	d150      	bne.n	801d3fe <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 801d35c:	6822      	ldr	r2, [r4, #0]
 801d35e:	8869      	ldrh	r1, [r5, #2]
 801d360:	7a12      	ldrb	r2, [r2, #8]
 801d362:	1a9b      	subs	r3, r3, r2
 801d364:	88ea      	ldrh	r2, [r5, #6]
 801d366:	440a      	add	r2, r1
 801d368:	b212      	sxth	r2, r2
 801d36a:	4293      	cmp	r3, r2
 801d36c:	dda7      	ble.n	801d2be <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf2>
 801d36e:	e046      	b.n	801d3fe <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 801d370:	7c23      	ldrb	r3, [r4, #16]
 801d372:	444f      	add	r7, r9
 801d374:	b1c3      	cbz	r3, 801d3a8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>
 801d376:	f64f 79ff 	movw	r9, #65535	; 0xffff
 801d37a:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801d37e:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801d382:	443b      	add	r3, r7
 801d384:	4293      	cmp	r3, r2
 801d386:	da97      	bge.n	801d2b8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 801d388:	a80e      	add	r0, sp, #56	; 0x38
 801d38a:	f7ff fdec 	bl	801cf66 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 801d38e:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 801d392:	3b01      	subs	r3, #1
 801d394:	b29b      	uxth	r3, r3
 801d396:	454b      	cmp	r3, r9
 801d398:	9309      	str	r3, [sp, #36]	; 0x24
 801d39a:	d021      	beq.n	801d3e0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x214>
 801d39c:	7961      	ldrb	r1, [r4, #5]
 801d39e:	a817      	add	r0, sp, #92	; 0x5c
 801d3a0:	f7ec fd02 	bl	8009da8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801d3a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d3a6:	e7f4      	b.n	801d392 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c6>
 801d3a8:	fa1f f986 	uxth.w	r9, r6
 801d3ac:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801d3b0:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801d3b4:	443b      	add	r3, r7
 801d3b6:	4293      	cmp	r3, r2
 801d3b8:	f6bf af7e 	bge.w	801d2b8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 801d3bc:	a817      	add	r0, sp, #92	; 0x5c
 801d3be:	f002 fc99 	bl	801fcf4 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801d3c2:	b1e0      	cbz	r0, 801d3fe <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 801d3c4:	280a      	cmp	r0, #10
 801d3c6:	d1f1      	bne.n	801d3ac <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 801d3c8:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 801d3cc:	444b      	add	r3, r9
 801d3ce:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801d3d2:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 801d3d6:	eba3 0309 	sub.w	r3, r3, r9
 801d3da:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801d3de:	e7e5      	b.n	801d3ac <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 801d3e0:	b2b3      	uxth	r3, r6
 801d3e2:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801d3e6:	441a      	add	r2, r3
 801d3e8:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 801d3ec:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
 801d3f0:	1ad3      	subs	r3, r2, r3
 801d3f2:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801d3f6:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801d3fa:	2b00      	cmp	r3, #0
 801d3fc:	d1bd      	bne.n	801d37a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ae>
 801d3fe:	b063      	add	sp, #396	; 0x18c
 801d400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d404:	2a02      	cmp	r2, #2
 801d406:	d105      	bne.n	801d414 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x248>
 801d408:	7be2      	ldrb	r2, [r4, #15]
 801d40a:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 801d40e:	1a80      	subs	r0, r0, r2
 801d410:	1ac0      	subs	r0, r0, r3
 801d412:	e776      	b.n	801d302 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x136>
 801d414:	2000      	movs	r0, #0
 801d416:	e775      	b.n	801d304 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 801d418:	7be0      	ldrb	r0, [r4, #15]
 801d41a:	e773      	b.n	801d304 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 801d41c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801d420:	e776      	b.n	801d310 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x144>
 801d422:	f1ba 0f00 	cmp.w	sl, #0
 801d426:	d0f7      	beq.n	801d418 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24c>
 801d428:	2264      	movs	r2, #100	; 0x64
 801d42a:	4639      	mov	r1, r7
 801d42c:	a849      	add	r0, sp, #292	; 0x124
 801d42e:	f00b fab1 	bl	8028994 <memcpy>
 801d432:	2300      	movs	r3, #0
 801d434:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801d438:	6821      	ldr	r1, [r4, #0]
 801d43a:	a849      	add	r0, sp, #292	; 0x124
 801d43c:	f7ff fbb1 	bl	801cba2 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 801d440:	b203      	sxth	r3, r0
 801d442:	e754      	b.n	801d2ee <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>

0801d444 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 801d444:	2b03      	cmp	r3, #3
 801d446:	d818      	bhi.n	801d47a <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 801d448:	e8df f003 	tbb	[pc, r3]
 801d44c:	130d0602 	.word	0x130d0602
 801d450:	f9b0 2000 	ldrsh.w	r2, [r0]
 801d454:	1850      	adds	r0, r2, r1
 801d456:	4770      	bx	lr
 801d458:	8803      	ldrh	r3, [r0, #0]
 801d45a:	8880      	ldrh	r0, [r0, #4]
 801d45c:	4418      	add	r0, r3
 801d45e:	b200      	sxth	r0, r0
 801d460:	1a80      	subs	r0, r0, r2
 801d462:	3801      	subs	r0, #1
 801d464:	4770      	bx	lr
 801d466:	8803      	ldrh	r3, [r0, #0]
 801d468:	8880      	ldrh	r0, [r0, #4]
 801d46a:	4418      	add	r0, r3
 801d46c:	b200      	sxth	r0, r0
 801d46e:	1a40      	subs	r0, r0, r1
 801d470:	e7f7      	b.n	801d462 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 801d472:	f9b0 0000 	ldrsh.w	r0, [r0]
 801d476:	4410      	add	r0, r2
 801d478:	4770      	bx	lr
 801d47a:	2000      	movs	r0, #0
 801d47c:	4770      	bx	lr

0801d47e <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 801d47e:	2b03      	cmp	r3, #3
 801d480:	d817      	bhi.n	801d4b2 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 801d482:	e8df f003 	tbb	[pc, r3]
 801d486:	0602      	.short	0x0602
 801d488:	1009      	.short	0x1009
 801d48a:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 801d48e:	1850      	adds	r0, r2, r1
 801d490:	4770      	bx	lr
 801d492:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801d496:	e7fa      	b.n	801d48e <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 801d498:	8843      	ldrh	r3, [r0, #2]
 801d49a:	88c0      	ldrh	r0, [r0, #6]
 801d49c:	4418      	add	r0, r3
 801d49e:	b200      	sxth	r0, r0
 801d4a0:	1a80      	subs	r0, r0, r2
 801d4a2:	3801      	subs	r0, #1
 801d4a4:	4770      	bx	lr
 801d4a6:	8843      	ldrh	r3, [r0, #2]
 801d4a8:	88c0      	ldrh	r0, [r0, #6]
 801d4aa:	4418      	add	r0, r3
 801d4ac:	b200      	sxth	r0, r0
 801d4ae:	1a40      	subs	r0, r0, r1
 801d4b0:	e7f7      	b.n	801d4a2 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 801d4b2:	2000      	movs	r0, #0
 801d4b4:	4770      	bx	lr
	...

0801d4b8 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 801d4b8:	4b01      	ldr	r3, [pc, #4]	; (801d4c0 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 801d4ba:	2200      	movs	r2, #0
 801d4bc:	601a      	str	r2, [r3, #0]
 801d4be:	4770      	bx	lr
 801d4c0:	24026248 	.word	0x24026248

0801d4c4 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 801d4c4:	4603      	mov	r3, r0
 801d4c6:	b1c8      	cbz	r0, 801d4fc <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 801d4c8:	0c02      	lsrs	r2, r0, #16
 801d4ca:	0412      	lsls	r2, r2, #16
 801d4cc:	b9a2      	cbnz	r2, 801d4f8 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 801d4ce:	0403      	lsls	r3, r0, #16
 801d4d0:	2010      	movs	r0, #16
 801d4d2:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801d4d6:	bf04      	itt	eq
 801d4d8:	021b      	lsleq	r3, r3, #8
 801d4da:	3008      	addeq	r0, #8
 801d4dc:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801d4e0:	bf04      	itt	eq
 801d4e2:	011b      	lsleq	r3, r3, #4
 801d4e4:	3004      	addeq	r0, #4
 801d4e6:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801d4ea:	bf04      	itt	eq
 801d4ec:	009b      	lsleq	r3, r3, #2
 801d4ee:	3002      	addeq	r0, #2
 801d4f0:	2b00      	cmp	r3, #0
 801d4f2:	db04      	blt.n	801d4fe <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 801d4f4:	3001      	adds	r0, #1
 801d4f6:	4770      	bx	lr
 801d4f8:	2000      	movs	r0, #0
 801d4fa:	e7ea      	b.n	801d4d2 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 801d4fc:	2020      	movs	r0, #32
 801d4fe:	4770      	bx	lr

0801d500 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 801d500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d504:	b087      	sub	sp, #28
 801d506:	4681      	mov	r9, r0
 801d508:	4698      	mov	r8, r3
 801d50a:	4610      	mov	r0, r2
 801d50c:	460d      	mov	r5, r1
 801d50e:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 801d512:	b981      	cbnz	r1, 801d536 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 801d514:	b14b      	cbz	r3, 801d52a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 801d516:	460b      	mov	r3, r1
 801d518:	464a      	mov	r2, r9
 801d51a:	4641      	mov	r1, r8
 801d51c:	e9cd 4700 	strd	r4, r7, [sp]
 801d520:	f7ff ffee 	bl	801d500 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801d524:	b007      	add	sp, #28
 801d526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d52a:	f04f 33ff 	mov.w	r3, #4294967295
 801d52e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801d532:	603b      	str	r3, [r7, #0]
 801d534:	e7f6      	b.n	801d524 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 801d536:	fa32 fa01 	lsrs.w	sl, r2, r1
 801d53a:	d107      	bne.n	801d54c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 801d53c:	fb09 f602 	mul.w	r6, r9, r2
 801d540:	fbb6 f0f4 	udiv	r0, r6, r4
 801d544:	fb04 6610 	mls	r6, r4, r0, r6
 801d548:	603e      	str	r6, [r7, #0]
 801d54a:	e7eb      	b.n	801d524 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 801d54c:	2601      	movs	r6, #1
 801d54e:	fa09 fb01 	lsl.w	fp, r9, r1
 801d552:	408e      	lsls	r6, r1
 801d554:	fbbb f3f4 	udiv	r3, fp, r4
 801d558:	3e01      	subs	r6, #1
 801d55a:	9302      	str	r3, [sp, #8]
 801d55c:	fb0a f303 	mul.w	r3, sl, r3
 801d560:	4016      	ands	r6, r2
 801d562:	9303      	str	r3, [sp, #12]
 801d564:	4630      	mov	r0, r6
 801d566:	f7ff ffad 	bl	801d4c4 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801d56a:	464a      	mov	r2, r9
 801d56c:	460b      	mov	r3, r1
 801d56e:	4601      	mov	r1, r0
 801d570:	4630      	mov	r0, r6
 801d572:	e9cd 4700 	strd	r4, r7, [sp]
 801d576:	f7ff ffc3 	bl	801d500 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801d57a:	9b02      	ldr	r3, [sp, #8]
 801d57c:	4606      	mov	r6, r0
 801d57e:	eb05 0108 	add.w	r1, r5, r8
 801d582:	fb04 bb13 	mls	fp, r4, r3, fp
 801d586:	4658      	mov	r0, fp
 801d588:	f7ff ff9c 	bl	801d4c4 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801d58c:	ab05      	add	r3, sp, #20
 801d58e:	465a      	mov	r2, fp
 801d590:	e9cd 4300 	strd	r4, r3, [sp]
 801d594:	4603      	mov	r3, r0
 801d596:	4650      	mov	r0, sl
 801d598:	f7ff ffb2 	bl	801d500 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801d59c:	6839      	ldr	r1, [r7, #0]
 801d59e:	9a05      	ldr	r2, [sp, #20]
 801d5a0:	9b03      	ldr	r3, [sp, #12]
 801d5a2:	4411      	add	r1, r2
 801d5a4:	fbb1 f2f4 	udiv	r2, r1, r4
 801d5a8:	18d3      	adds	r3, r2, r3
 801d5aa:	fb04 1412 	mls	r4, r4, r2, r1
 801d5ae:	441e      	add	r6, r3
 801d5b0:	603c      	str	r4, [r7, #0]
 801d5b2:	4430      	add	r0, r6
 801d5b4:	e7b6      	b.n	801d524 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

0801d5b6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 801d5b6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d5ba:	b085      	sub	sp, #20
 801d5bc:	f1b0 0900 	subs.w	r9, r0, #0
 801d5c0:	461d      	mov	r5, r3
 801d5c2:	4617      	mov	r7, r2
 801d5c4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801d5c6:	bfbb      	ittet	lt
 801d5c8:	f1c9 0900 	rsblt	r9, r9, #0
 801d5cc:	f04f 36ff 	movlt.w	r6, #4294967295
 801d5d0:	2601      	movge	r6, #1
 801d5d2:	6823      	ldrlt	r3, [r4, #0]
 801d5d4:	bfbc      	itt	lt
 801d5d6:	425b      	neglt	r3, r3
 801d5d8:	6023      	strlt	r3, [r4, #0]
 801d5da:	2a00      	cmp	r2, #0
 801d5dc:	da04      	bge.n	801d5e8 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 801d5de:	6823      	ldr	r3, [r4, #0]
 801d5e0:	4257      	negs	r7, r2
 801d5e2:	4276      	negs	r6, r6
 801d5e4:	425b      	negs	r3, r3
 801d5e6:	6023      	str	r3, [r4, #0]
 801d5e8:	2d00      	cmp	r5, #0
 801d5ea:	4638      	mov	r0, r7
 801d5ec:	bfba      	itte	lt
 801d5ee:	426d      	neglt	r5, r5
 801d5f0:	f04f 38ff 	movlt.w	r8, #4294967295
 801d5f4:	f04f 0801 	movge.w	r8, #1
 801d5f8:	f7ff ff64 	bl	801d4c4 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801d5fc:	ab03      	add	r3, sp, #12
 801d5fe:	463a      	mov	r2, r7
 801d600:	e9cd 5300 	strd	r5, r3, [sp]
 801d604:	4603      	mov	r3, r0
 801d606:	4648      	mov	r0, r9
 801d608:	f7ff ff7a 	bl	801d500 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801d60c:	6823      	ldr	r3, [r4, #0]
 801d60e:	9a03      	ldr	r2, [sp, #12]
 801d610:	4546      	cmp	r6, r8
 801d612:	441a      	add	r2, r3
 801d614:	fb92 f3f5 	sdiv	r3, r2, r5
 801d618:	4418      	add	r0, r3
 801d61a:	fb05 2313 	mls	r3, r5, r3, r2
 801d61e:	bf18      	it	ne
 801d620:	4240      	negne	r0, r0
 801d622:	1c72      	adds	r2, r6, #1
 801d624:	6023      	str	r3, [r4, #0]
 801d626:	d105      	bne.n	801d634 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 801d628:	2b00      	cmp	r3, #0
 801d62a:	f1c3 0200 	rsb	r2, r3, #0
 801d62e:	db0b      	blt.n	801d648 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 801d630:	6022      	str	r2, [r4, #0]
 801d632:	e006      	b.n	801d642 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801d634:	2e01      	cmp	r6, #1
 801d636:	d104      	bne.n	801d642 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801d638:	2b00      	cmp	r3, #0
 801d63a:	da02      	bge.n	801d642 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801d63c:	442b      	add	r3, r5
 801d63e:	3801      	subs	r0, #1
 801d640:	6023      	str	r3, [r4, #0]
 801d642:	b005      	add	sp, #20
 801d644:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d648:	3801      	subs	r0, #1
 801d64a:	1b52      	subs	r2, r2, r5
 801d64c:	e7f0      	b.n	801d630 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

0801d650 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 801d650:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801d654:	4c1c      	ldr	r4, [pc, #112]	; (801d6c8 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 801d656:	4605      	mov	r5, r0
 801d658:	6807      	ldr	r7, [r0, #0]
 801d65a:	69a3      	ldr	r3, [r4, #24]
 801d65c:	b92b      	cbnz	r3, 801d66a <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 801d65e:	6840      	ldr	r0, [r0, #4]
 801d660:	e9c5 7000 	strd	r7, r0, [r5]
 801d664:	b004      	add	sp, #16
 801d666:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d66a:	f04f 0802 	mov.w	r8, #2
 801d66e:	68a2      	ldr	r2, [r4, #8]
 801d670:	ae04      	add	r6, sp, #16
 801d672:	6820      	ldr	r0, [r4, #0]
 801d674:	fb93 f1f8 	sdiv	r1, r3, r8
 801d678:	440a      	add	r2, r1
 801d67a:	69e1      	ldr	r1, [r4, #28]
 801d67c:	f846 2d04 	str.w	r2, [r6, #-4]!
 801d680:	463a      	mov	r2, r7
 801d682:	9600      	str	r6, [sp, #0]
 801d684:	f7ff ff97 	bl	801d5b6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801d688:	69a3      	ldr	r3, [r4, #24]
 801d68a:	4607      	mov	r7, r0
 801d68c:	686a      	ldr	r2, [r5, #4]
 801d68e:	6a21      	ldr	r1, [r4, #32]
 801d690:	9600      	str	r6, [sp, #0]
 801d692:	6860      	ldr	r0, [r4, #4]
 801d694:	f7ff ff8f 	bl	801d5b6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801d698:	69a3      	ldr	r3, [r4, #24]
 801d69a:	6962      	ldr	r2, [r4, #20]
 801d69c:	4407      	add	r7, r0
 801d69e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801d6a0:	9600      	str	r6, [sp, #0]
 801d6a2:	68e0      	ldr	r0, [r4, #12]
 801d6a4:	fb93 f8f8 	sdiv	r8, r3, r8
 801d6a8:	4442      	add	r2, r8
 801d6aa:	9203      	str	r2, [sp, #12]
 801d6ac:	682a      	ldr	r2, [r5, #0]
 801d6ae:	f7ff ff82 	bl	801d5b6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801d6b2:	4680      	mov	r8, r0
 801d6b4:	9600      	str	r6, [sp, #0]
 801d6b6:	69a3      	ldr	r3, [r4, #24]
 801d6b8:	686a      	ldr	r2, [r5, #4]
 801d6ba:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801d6bc:	6920      	ldr	r0, [r4, #16]
 801d6be:	f7ff ff7a 	bl	801d5b6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801d6c2:	4440      	add	r0, r8
 801d6c4:	e7cc      	b.n	801d660 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 801d6c6:	bf00      	nop
 801d6c8:	2402624c 	.word	0x2402624c

0801d6cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 801d6cc:	4b07      	ldr	r3, [pc, #28]	; (801d6ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 801d6ce:	781b      	ldrb	r3, [r3, #0]
 801d6d0:	2b01      	cmp	r3, #1
 801d6d2:	d109      	bne.n	801d6e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 801d6d4:	f9b1 3000 	ldrsh.w	r3, [r1]
 801d6d8:	f9b0 2000 	ldrsh.w	r2, [r0]
 801d6dc:	8003      	strh	r3, [r0, #0]
 801d6de:	4b04      	ldr	r3, [pc, #16]	; (801d6f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 801d6e0:	881b      	ldrh	r3, [r3, #0]
 801d6e2:	3b01      	subs	r3, #1
 801d6e4:	1a9b      	subs	r3, r3, r2
 801d6e6:	800b      	strh	r3, [r1, #0]
 801d6e8:	4770      	bx	lr
 801d6ea:	bf00      	nop
 801d6ec:	24026238 	.word	0x24026238
 801d6f0:	24026234 	.word	0x24026234

0801d6f4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 801d6f4:	4b07      	ldr	r3, [pc, #28]	; (801d714 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 801d6f6:	b510      	push	{r4, lr}
 801d6f8:	781b      	ldrb	r3, [r3, #0]
 801d6fa:	2b01      	cmp	r3, #1
 801d6fc:	d108      	bne.n	801d710 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801d6fe:	4b06      	ldr	r3, [pc, #24]	; (801d718 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 801d700:	880c      	ldrh	r4, [r1, #0]
 801d702:	881b      	ldrh	r3, [r3, #0]
 801d704:	f9b0 2000 	ldrsh.w	r2, [r0]
 801d708:	3b01      	subs	r3, #1
 801d70a:	1b1b      	subs	r3, r3, r4
 801d70c:	8003      	strh	r3, [r0, #0]
 801d70e:	800a      	strh	r2, [r1, #0]
 801d710:	bd10      	pop	{r4, pc}
 801d712:	bf00      	nop
 801d714:	24026238 	.word	0x24026238
 801d718:	24026234 	.word	0x24026234

0801d71c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 801d71c:	4b0a      	ldr	r3, [pc, #40]	; (801d748 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 801d71e:	b510      	push	{r4, lr}
 801d720:	781b      	ldrb	r3, [r3, #0]
 801d722:	2b01      	cmp	r3, #1
 801d724:	d10e      	bne.n	801d744 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 801d726:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801d72a:	8843      	ldrh	r3, [r0, #2]
 801d72c:	f9b0 4000 	ldrsh.w	r4, [r0]
 801d730:	18ca      	adds	r2, r1, r3
 801d732:	4b06      	ldr	r3, [pc, #24]	; (801d74c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 801d734:	8044      	strh	r4, [r0, #2]
 801d736:	881b      	ldrh	r3, [r3, #0]
 801d738:	1a9b      	subs	r3, r3, r2
 801d73a:	8003      	strh	r3, [r0, #0]
 801d73c:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801d740:	8081      	strh	r1, [r0, #4]
 801d742:	80c3      	strh	r3, [r0, #6]
 801d744:	bd10      	pop	{r4, pc}
 801d746:	bf00      	nop
 801d748:	24026238 	.word	0x24026238
 801d74c:	24026234 	.word	0x24026234

0801d750 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 801d750:	4b08      	ldr	r3, [pc, #32]	; (801d774 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 801d752:	781b      	ldrb	r3, [r3, #0]
 801d754:	2b01      	cmp	r3, #1
 801d756:	d10c      	bne.n	801d772 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 801d758:	8803      	ldrh	r3, [r0, #0]
 801d75a:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 801d75e:	8842      	ldrh	r2, [r0, #2]
 801d760:	8002      	strh	r2, [r0, #0]
 801d762:	185a      	adds	r2, r3, r1
 801d764:	4b04      	ldr	r3, [pc, #16]	; (801d778 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 801d766:	881b      	ldrh	r3, [r3, #0]
 801d768:	1a9b      	subs	r3, r3, r2
 801d76a:	8043      	strh	r3, [r0, #2]
 801d76c:	88c3      	ldrh	r3, [r0, #6]
 801d76e:	80c1      	strh	r1, [r0, #6]
 801d770:	8083      	strh	r3, [r0, #4]
 801d772:	4770      	bx	lr
 801d774:	24026238 	.word	0x24026238
 801d778:	24026234 	.word	0x24026234

0801d77c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 801d77c:	4b07      	ldr	r3, [pc, #28]	; (801d79c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 801d77e:	b510      	push	{r4, lr}
 801d780:	781b      	ldrb	r3, [r3, #0]
 801d782:	2b01      	cmp	r3, #1
 801d784:	d108      	bne.n	801d798 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 801d786:	f9b1 3000 	ldrsh.w	r3, [r1]
 801d78a:	f9b0 4000 	ldrsh.w	r4, [r0]
 801d78e:	8003      	strh	r3, [r0, #0]
 801d790:	8893      	ldrh	r3, [r2, #4]
 801d792:	3b01      	subs	r3, #1
 801d794:	1b1b      	subs	r3, r3, r4
 801d796:	800b      	strh	r3, [r1, #0]
 801d798:	bd10      	pop	{r4, pc}
 801d79a:	bf00      	nop
 801d79c:	24026238 	.word	0x24026238

0801d7a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>:
 801d7a0:	4b0b      	ldr	r3, [pc, #44]	; (801d7d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x30>)
 801d7a2:	781b      	ldrb	r3, [r3, #0]
 801d7a4:	2b01      	cmp	r3, #1
 801d7a6:	d111      	bne.n	801d7cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x2c>
 801d7a8:	680b      	ldr	r3, [r1, #0]
 801d7aa:	ed90 7a00 	vldr	s14, [r0]
 801d7ae:	6003      	str	r3, [r0, #0]
 801d7b0:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 801d7b4:	eddf 6a07 	vldr	s13, [pc, #28]	; 801d7d4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x34>
 801d7b8:	ee07 3a90 	vmov	s15, r3
 801d7bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d7c0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801d7c4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801d7c8:	edc1 7a00 	vstr	s15, [r1]
 801d7cc:	4770      	bx	lr
 801d7ce:	bf00      	nop
 801d7d0:	24026238 	.word	0x24026238
 801d7d4:	38d1b717 	.word	0x38d1b717

0801d7d8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 801d7d8:	4b0a      	ldr	r3, [pc, #40]	; (801d804 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 801d7da:	460a      	mov	r2, r1
 801d7dc:	b510      	push	{r4, lr}
 801d7de:	781b      	ldrb	r3, [r3, #0]
 801d7e0:	2b01      	cmp	r3, #1
 801d7e2:	d10d      	bne.n	801d800 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 801d7e4:	8881      	ldrh	r1, [r0, #4]
 801d7e6:	8803      	ldrh	r3, [r0, #0]
 801d7e8:	440b      	add	r3, r1
 801d7ea:	4601      	mov	r1, r0
 801d7ec:	3b01      	subs	r3, #1
 801d7ee:	f821 3b02 	strh.w	r3, [r1], #2
 801d7f2:	f7ff ffc3 	bl	801d77c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801d7f6:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801d7fa:	88c2      	ldrh	r2, [r0, #6]
 801d7fc:	80c3      	strh	r3, [r0, #6]
 801d7fe:	8082      	strh	r2, [r0, #4]
 801d800:	bd10      	pop	{r4, pc}
 801d802:	bf00      	nop
 801d804:	24026238 	.word	0x24026238

0801d808 <_ZN8touchgfx11Application13requestRedrawEv>:
 801d808:	4b06      	ldr	r3, [pc, #24]	; (801d824 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 801d80a:	2100      	movs	r1, #0
 801d80c:	f9b3 2000 	ldrsh.w	r2, [r3]
 801d810:	4b05      	ldr	r3, [pc, #20]	; (801d828 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 801d812:	f8c0 1130 	str.w	r1, [r0, #304]	; 0x130
 801d816:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d81a:	f8a0 2134 	strh.w	r2, [r0, #308]	; 0x134
 801d81e:	f8a0 3136 	strh.w	r3, [r0, #310]	; 0x136
 801d822:	4770      	bx	lr
 801d824:	24026234 	.word	0x24026234
 801d828:	24026236 	.word	0x24026236

0801d82c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 801d82c:	4b03      	ldr	r3, [pc, #12]	; (801d83c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801d82e:	6818      	ldr	r0, [r3, #0]
 801d830:	b110      	cbz	r0, 801d838 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 801d832:	6803      	ldr	r3, [r0, #0]
 801d834:	699b      	ldr	r3, [r3, #24]
 801d836:	4718      	bx	r3
 801d838:	4770      	bx	lr
 801d83a:	bf00      	nop
 801d83c:	2402627c 	.word	0x2402627c

0801d840 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 801d840:	4770      	bx	lr
	...

0801d844 <_ZN8touchgfx11Application4drawEv>:
 801d844:	4b09      	ldr	r3, [pc, #36]	; (801d86c <_ZN8touchgfx11Application4drawEv+0x28>)
 801d846:	b507      	push	{r0, r1, r2, lr}
 801d848:	f9b3 2000 	ldrsh.w	r2, [r3]
 801d84c:	2100      	movs	r1, #0
 801d84e:	4b08      	ldr	r3, [pc, #32]	; (801d870 <_ZN8touchgfx11Application4drawEv+0x2c>)
 801d850:	9100      	str	r1, [sp, #0]
 801d852:	4669      	mov	r1, sp
 801d854:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d858:	f8ad 2004 	strh.w	r2, [sp, #4]
 801d85c:	f8ad 3006 	strh.w	r3, [sp, #6]
 801d860:	6803      	ldr	r3, [r0, #0]
 801d862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d864:	4798      	blx	r3
 801d866:	b003      	add	sp, #12
 801d868:	f85d fb04 	ldr.w	pc, [sp], #4
 801d86c:	24026234 	.word	0x24026234
 801d870:	24026236 	.word	0x24026236

0801d874 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 801d874:	4b03      	ldr	r3, [pc, #12]	; (801d884 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 801d876:	6818      	ldr	r0, [r3, #0]
 801d878:	b110      	cbz	r0, 801d880 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801d87a:	6803      	ldr	r3, [r0, #0]
 801d87c:	69db      	ldr	r3, [r3, #28]
 801d87e:	4718      	bx	r3
 801d880:	4770      	bx	lr
 801d882:	bf00      	nop
 801d884:	2402627c 	.word	0x2402627c

0801d888 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 801d888:	4b03      	ldr	r3, [pc, #12]	; (801d898 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801d88a:	6818      	ldr	r0, [r3, #0]
 801d88c:	b110      	cbz	r0, 801d894 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801d88e:	6803      	ldr	r3, [r0, #0]
 801d890:	6a1b      	ldr	r3, [r3, #32]
 801d892:	4718      	bx	r3
 801d894:	4770      	bx	lr
 801d896:	bf00      	nop
 801d898:	2402627c 	.word	0x2402627c

0801d89c <_ZN8touchgfx11Application16clearCachedAreasEv>:
 801d89c:	2300      	movs	r3, #0
 801d89e:	f8a0 30ec 	strh.w	r3, [r0, #236]	; 0xec
 801d8a2:	4770      	bx	lr

0801d8a4 <_ZN8touchgfx11Application14handleKeyEventEh>:
 801d8a4:	4b03      	ldr	r3, [pc, #12]	; (801d8b4 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 801d8a6:	6818      	ldr	r0, [r3, #0]
 801d8a8:	b110      	cbz	r0, 801d8b0 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 801d8aa:	6803      	ldr	r3, [r0, #0]
 801d8ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d8ae:	4718      	bx	r3
 801d8b0:	4770      	bx	lr
 801d8b2:	bf00      	nop
 801d8b4:	2402627c 	.word	0x2402627c

0801d8b8 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 801d8b8:	b510      	push	{r4, lr}
 801d8ba:	f9b1 4000 	ldrsh.w	r4, [r1]
 801d8be:	888a      	ldrh	r2, [r1, #4]
 801d8c0:	f9b0 3000 	ldrsh.w	r3, [r0]
 801d8c4:	4422      	add	r2, r4
 801d8c6:	b212      	sxth	r2, r2
 801d8c8:	4293      	cmp	r3, r2
 801d8ca:	da15      	bge.n	801d8f8 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801d8cc:	8882      	ldrh	r2, [r0, #4]
 801d8ce:	4413      	add	r3, r2
 801d8d0:	b21b      	sxth	r3, r3
 801d8d2:	429c      	cmp	r4, r3
 801d8d4:	da10      	bge.n	801d8f8 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801d8d6:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801d8da:	88c9      	ldrh	r1, [r1, #6]
 801d8dc:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801d8e0:	4419      	add	r1, r3
 801d8e2:	b209      	sxth	r1, r1
 801d8e4:	428a      	cmp	r2, r1
 801d8e6:	da07      	bge.n	801d8f8 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801d8e8:	88c0      	ldrh	r0, [r0, #6]
 801d8ea:	4410      	add	r0, r2
 801d8ec:	b200      	sxth	r0, r0
 801d8ee:	4283      	cmp	r3, r0
 801d8f0:	bfac      	ite	ge
 801d8f2:	2000      	movge	r0, #0
 801d8f4:	2001      	movlt	r0, #1
 801d8f6:	bd10      	pop	{r4, pc}
 801d8f8:	2000      	movs	r0, #0
 801d8fa:	e7fc      	b.n	801d8f6 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0801d8fc <_ZN8touchgfx4Rect10restrictToEss>:
 801d8fc:	f9b0 3000 	ldrsh.w	r3, [r0]
 801d900:	2b00      	cmp	r3, #0
 801d902:	b510      	push	{r4, lr}
 801d904:	da04      	bge.n	801d910 <_ZN8touchgfx4Rect10restrictToEss+0x14>
 801d906:	8884      	ldrh	r4, [r0, #4]
 801d908:	4423      	add	r3, r4
 801d90a:	8083      	strh	r3, [r0, #4]
 801d90c:	2300      	movs	r3, #0
 801d90e:	8003      	strh	r3, [r0, #0]
 801d910:	f9b0 4000 	ldrsh.w	r4, [r0]
 801d914:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801d918:	1b09      	subs	r1, r1, r4
 801d91a:	428b      	cmp	r3, r1
 801d91c:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801d920:	bfc8      	it	gt
 801d922:	8081      	strhgt	r1, [r0, #4]
 801d924:	2b00      	cmp	r3, #0
 801d926:	da04      	bge.n	801d932 <_ZN8touchgfx4Rect10restrictToEss+0x36>
 801d928:	88c1      	ldrh	r1, [r0, #6]
 801d92a:	440b      	add	r3, r1
 801d92c:	80c3      	strh	r3, [r0, #6]
 801d92e:	2300      	movs	r3, #0
 801d930:	8043      	strh	r3, [r0, #2]
 801d932:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 801d936:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 801d93a:	1a52      	subs	r2, r2, r1
 801d93c:	4293      	cmp	r3, r2
 801d93e:	bfc8      	it	gt
 801d940:	80c2      	strhgt	r2, [r0, #6]
 801d942:	bd10      	pop	{r4, pc}

0801d944 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 801d944:	4b10      	ldr	r3, [pc, #64]	; (801d988 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 801d946:	b510      	push	{r4, lr}
 801d948:	460c      	mov	r4, r1
 801d94a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801d94e:	4b0f      	ldr	r3, [pc, #60]	; (801d98c <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 801d950:	4620      	mov	r0, r4
 801d952:	f9b3 1000 	ldrsh.w	r1, [r3]
 801d956:	f7ff ffd1 	bl	801d8fc <_ZN8touchgfx4Rect10restrictToEss>
 801d95a:	4b0d      	ldr	r3, [pc, #52]	; (801d990 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 801d95c:	6818      	ldr	r0, [r3, #0]
 801d95e:	b190      	cbz	r0, 801d986 <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 801d960:	6803      	ldr	r3, [r0, #0]
 801d962:	4621      	mov	r1, r4
 801d964:	689b      	ldr	r3, [r3, #8]
 801d966:	4798      	blx	r3
 801d968:	4b0a      	ldr	r3, [pc, #40]	; (801d994 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 801d96a:	6818      	ldr	r0, [r3, #0]
 801d96c:	b118      	cbz	r0, 801d976 <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 801d96e:	6803      	ldr	r3, [r0, #0]
 801d970:	4621      	mov	r1, r4
 801d972:	689b      	ldr	r3, [r3, #8]
 801d974:	4798      	blx	r3
 801d976:	4b08      	ldr	r3, [pc, #32]	; (801d998 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 801d978:	4621      	mov	r1, r4
 801d97a:	6818      	ldr	r0, [r3, #0]
 801d97c:	6803      	ldr	r3, [r0, #0]
 801d97e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d982:	69db      	ldr	r3, [r3, #28]
 801d984:	4718      	bx	r3
 801d986:	bd10      	pop	{r4, pc}
 801d988:	24026236 	.word	0x24026236
 801d98c:	24026234 	.word	0x24026234
 801d990:	2402627c 	.word	0x2402627c
 801d994:	24026278 	.word	0x24026278
 801d998:	24026240 	.word	0x24026240

0801d99c <_ZNK8touchgfx4Rect8includesERKS0_>:
 801d99c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d99e:	4606      	mov	r6, r0
 801d9a0:	4608      	mov	r0, r1
 801d9a2:	460f      	mov	r7, r1
 801d9a4:	f7fc fd23 	bl	801a3ee <_ZNK8touchgfx4Rect7isEmptyEv>
 801d9a8:	b9e8      	cbnz	r0, 801d9e6 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801d9aa:	f9b7 5000 	ldrsh.w	r5, [r7]
 801d9ae:	f9b6 4000 	ldrsh.w	r4, [r6]
 801d9b2:	42a5      	cmp	r5, r4
 801d9b4:	db17      	blt.n	801d9e6 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801d9b6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801d9ba:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 801d9be:	429a      	cmp	r2, r3
 801d9c0:	db11      	blt.n	801d9e6 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801d9c2:	88b9      	ldrh	r1, [r7, #4]
 801d9c4:	440d      	add	r5, r1
 801d9c6:	88b1      	ldrh	r1, [r6, #4]
 801d9c8:	440c      	add	r4, r1
 801d9ca:	b22d      	sxth	r5, r5
 801d9cc:	b224      	sxth	r4, r4
 801d9ce:	42a5      	cmp	r5, r4
 801d9d0:	dc09      	bgt.n	801d9e6 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801d9d2:	88f8      	ldrh	r0, [r7, #6]
 801d9d4:	4410      	add	r0, r2
 801d9d6:	88f2      	ldrh	r2, [r6, #6]
 801d9d8:	4413      	add	r3, r2
 801d9da:	b200      	sxth	r0, r0
 801d9dc:	b21b      	sxth	r3, r3
 801d9de:	4298      	cmp	r0, r3
 801d9e0:	bfcc      	ite	gt
 801d9e2:	2000      	movgt	r0, #0
 801d9e4:	2001      	movle	r0, #1
 801d9e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801d9e8 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 801d9e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d9ea:	4604      	mov	r4, r0
 801d9ec:	4608      	mov	r0, r1
 801d9ee:	460d      	mov	r5, r1
 801d9f0:	f7fc fcfd 	bl	801a3ee <_ZNK8touchgfx4Rect7isEmptyEv>
 801d9f4:	b978      	cbnz	r0, 801da16 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 801d9f6:	4620      	mov	r0, r4
 801d9f8:	f7fc fcf9 	bl	801a3ee <_ZNK8touchgfx4Rect7isEmptyEv>
 801d9fc:	f9b5 6000 	ldrsh.w	r6, [r5]
 801da00:	b150      	cbz	r0, 801da18 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 801da02:	8026      	strh	r6, [r4, #0]
 801da04:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801da08:	8063      	strh	r3, [r4, #2]
 801da0a:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 801da0e:	80a3      	strh	r3, [r4, #4]
 801da10:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801da14:	80e3      	strh	r3, [r4, #6]
 801da16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801da18:	f9b4 1000 	ldrsh.w	r1, [r4]
 801da1c:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801da20:	42b1      	cmp	r1, r6
 801da22:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 801da26:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 801da2a:	460f      	mov	r7, r1
 801da2c:	88ed      	ldrh	r5, [r5, #6]
 801da2e:	bfa8      	it	ge
 801da30:	4637      	movge	r7, r6
 801da32:	4293      	cmp	r3, r2
 801da34:	4618      	mov	r0, r3
 801da36:	4466      	add	r6, ip
 801da38:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 801da3c:	bfa8      	it	ge
 801da3e:	4610      	movge	r0, r2
 801da40:	442a      	add	r2, r5
 801da42:	88e5      	ldrh	r5, [r4, #6]
 801da44:	4461      	add	r1, ip
 801da46:	b236      	sxth	r6, r6
 801da48:	8027      	strh	r7, [r4, #0]
 801da4a:	442b      	add	r3, r5
 801da4c:	b209      	sxth	r1, r1
 801da4e:	b212      	sxth	r2, r2
 801da50:	8060      	strh	r0, [r4, #2]
 801da52:	b21b      	sxth	r3, r3
 801da54:	428e      	cmp	r6, r1
 801da56:	bfac      	ite	ge
 801da58:	ebc7 0106 	rsbge	r1, r7, r6
 801da5c:	ebc7 0101 	rsblt	r1, r7, r1
 801da60:	429a      	cmp	r2, r3
 801da62:	bfac      	ite	ge
 801da64:	ebc0 0202 	rsbge	r2, r0, r2
 801da68:	ebc0 0203 	rsblt	r2, r0, r3
 801da6c:	80a1      	strh	r1, [r4, #4]
 801da6e:	80e2      	strh	r2, [r4, #6]
 801da70:	e7d1      	b.n	801da16 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

0801da74 <_ZN8touchgfx11Application11getInstanceEv>:
 801da74:	4b01      	ldr	r3, [pc, #4]	; (801da7c <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801da76:	6818      	ldr	r0, [r3, #0]
 801da78:	4770      	bx	lr
 801da7a:	bf00      	nop
 801da7c:	2402628c 	.word	0x2402628c

0801da80 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv>:
 801da80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801da82:	4b10      	ldr	r3, [pc, #64]	; (801dac4 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x44>)
 801da84:	4605      	mov	r5, r0
 801da86:	781b      	ldrb	r3, [r3, #0]
 801da88:	b1d3      	cbz	r3, 801dac0 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x40>
 801da8a:	4b0f      	ldr	r3, [pc, #60]	; (801dac8 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x48>)
 801da8c:	f100 06ee 	add.w	r6, r0, #238	; 0xee
 801da90:	4f0e      	ldr	r7, [pc, #56]	; (801dacc <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x4c>)
 801da92:	881c      	ldrh	r4, [r3, #0]
 801da94:	f8b5 312e 	ldrh.w	r3, [r5, #302]	; 0x12e
 801da98:	42a3      	cmp	r3, r4
 801da9a:	d90e      	bls.n	801daba <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x3a>
 801da9c:	683b      	ldr	r3, [r7, #0]
 801da9e:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801daa2:	b10a      	cbz	r2, 801daa8 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x28>
 801daa4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801daa6:	b900      	cbnz	r0, 801daaa <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x2a>
 801daa8:	6898      	ldr	r0, [r3, #8]
 801daaa:	6803      	ldr	r3, [r0, #0]
 801daac:	eb06 01c4 	add.w	r1, r6, r4, lsl #3
 801dab0:	3401      	adds	r4, #1
 801dab2:	69db      	ldr	r3, [r3, #28]
 801dab4:	4798      	blx	r3
 801dab6:	b2a4      	uxth	r4, r4
 801dab8:	e7ec      	b.n	801da94 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x14>
 801daba:	2300      	movs	r3, #0
 801dabc:	f8a5 312e 	strh.w	r3, [r5, #302]	; 0x12e
 801dac0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801dac2:	bf00      	nop
 801dac4:	2402623e 	.word	0x2402623e
 801dac8:	24000068 	.word	0x24000068
 801dacc:	24026240 	.word	0x24026240

0801dad0 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 801dad0:	2300      	movs	r3, #0
 801dad2:	b510      	push	{r4, lr}
 801dad4:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
 801dad8:	4604      	mov	r4, r0
 801dada:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
 801dade:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
 801dae2:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 801dae6:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	; 0xa6
 801daea:	429a      	cmp	r2, r3
 801daec:	d90e      	bls.n	801db0c <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 801daee:	18e2      	adds	r2, r4, r3
 801daf0:	f892 2084 	ldrb.w	r2, [r2, #132]	; 0x84
 801daf4:	b122      	cbz	r2, 801db00 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 801daf6:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 801dafa:	6803      	ldr	r3, [r0, #0]
 801dafc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801dafe:	4798      	blx	r3
 801db00:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 801db04:	3301      	adds	r3, #1
 801db06:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 801db0a:	e7ea      	b.n	801dae2 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 801db0c:	bd10      	pop	{r4, pc}

0801db0e <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 801db0e:	2300      	movs	r3, #0
 801db10:	f100 0284 	add.w	r2, r0, #132	; 0x84
 801db14:	30a4      	adds	r0, #164	; 0xa4
 801db16:	f820 3c24 	strh.w	r3, [r0, #-36]
 801db1a:	f802 3b01 	strb.w	r3, [r2], #1
 801db1e:	4282      	cmp	r2, r0
 801db20:	d1fb      	bne.n	801db1a <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 801db22:	4770      	bx	lr

0801db24 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 801db24:	b570      	push	{r4, r5, r6, lr}
 801db26:	4c0b      	ldr	r4, [pc, #44]	; (801db54 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 801db28:	4605      	mov	r5, r0
 801db2a:	460e      	mov	r6, r1
 801db2c:	6820      	ldr	r0, [r4, #0]
 801db2e:	b110      	cbz	r0, 801db36 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 801db30:	6803      	ldr	r3, [r0, #0]
 801db32:	695b      	ldr	r3, [r3, #20]
 801db34:	4798      	blx	r3
 801db36:	1d28      	adds	r0, r5, #4
 801db38:	f7ff ffe9 	bl	801db0e <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 801db3c:	6026      	str	r6, [r4, #0]
 801db3e:	6833      	ldr	r3, [r6, #0]
 801db40:	4630      	mov	r0, r6
 801db42:	68db      	ldr	r3, [r3, #12]
 801db44:	4798      	blx	r3
 801db46:	682b      	ldr	r3, [r5, #0]
 801db48:	4628      	mov	r0, r5
 801db4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801db4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801db50:	4718      	bx	r3
 801db52:	bf00      	nop
 801db54:	2402627c 	.word	0x2402627c

0801db58 <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 801db58:	2300      	movs	r3, #0
 801db5a:	f8b0 c080 	ldrh.w	ip, [r0, #128]	; 0x80
 801db5e:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	; 0xa4
 801db62:	461a      	mov	r2, r3
 801db64:	b5f0      	push	{r4, r5, r6, r7, lr}
 801db66:	461c      	mov	r4, r3
 801db68:	461d      	mov	r5, r3
 801db6a:	459c      	cmp	ip, r3
 801db6c:	dd1a      	ble.n	801dba4 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 801db6e:	18c6      	adds	r6, r0, r3
 801db70:	f896 6084 	ldrb.w	r6, [r6, #132]	; 0x84
 801db74:	b16e      	cbz	r6, 801db92 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 801db76:	429a      	cmp	r2, r3
 801db78:	d008      	beq.n	801db8c <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 801db7a:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 801db7e:	fa1f fe82 	uxth.w	lr, r2
 801db82:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 801db86:	1887      	adds	r7, r0, r2
 801db88:	f887 6084 	strb.w	r6, [r7, #132]	; 0x84
 801db8c:	3201      	adds	r2, #1
 801db8e:	3301      	adds	r3, #1
 801db90:	e7eb      	b.n	801db6a <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 801db92:	4299      	cmp	r1, r3
 801db94:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	; 0xa6
 801db98:	bfa8      	it	ge
 801db9a:	3501      	addge	r5, #1
 801db9c:	429e      	cmp	r6, r3
 801db9e:	bfc8      	it	gt
 801dba0:	3401      	addgt	r4, #1
 801dba2:	e7f4      	b.n	801db8e <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 801dba4:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
 801dba8:	1b49      	subs	r1, r1, r5
 801dbaa:	1b1b      	subs	r3, r3, r4
 801dbac:	f8a0 10a4 	strh.w	r1, [r0, #164]	; 0xa4
 801dbb0:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
 801dbb4:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
 801dbb8:	4293      	cmp	r3, r2
 801dbba:	dd03      	ble.n	801dbc4 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 801dbbc:	3b01      	subs	r3, #1
 801dbbe:	f8a0 3080 	strh.w	r3, [r0, #128]	; 0x80
 801dbc2:	e7f7      	b.n	801dbb4 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 801dbc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0801dbc8 <_ZN8touchgfx11Application15handleTickEventEv>:
 801dbc8:	b570      	push	{r4, r5, r6, lr}
 801dbca:	4d16      	ldr	r5, [pc, #88]	; (801dc24 <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 801dbcc:	4604      	mov	r4, r0
 801dbce:	6828      	ldr	r0, [r5, #0]
 801dbd0:	b140      	cbz	r0, 801dbe4 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801dbd2:	7a03      	ldrb	r3, [r0, #8]
 801dbd4:	b933      	cbnz	r3, 801dbe4 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801dbd6:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 801dbda:	6803      	ldr	r3, [r0, #0]
 801dbdc:	689b      	ldr	r3, [r3, #8]
 801dbde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801dbe2:	4718      	bx	r3
 801dbe4:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
 801dbe8:	4e0f      	ldr	r6, [pc, #60]	; (801dc28 <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 801dbea:	b973      	cbnz	r3, 801dc0a <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801dbec:	b168      	cbz	r0, 801dc0a <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801dbee:	7a03      	ldrb	r3, [r0, #8]
 801dbf0:	b15b      	cbz	r3, 801dc0a <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801dbf2:	6830      	ldr	r0, [r6, #0]
 801dbf4:	b110      	cbz	r0, 801dbfc <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 801dbf6:	6803      	ldr	r3, [r0, #0]
 801dbf8:	691b      	ldr	r3, [r3, #16]
 801dbfa:	4798      	blx	r3
 801dbfc:	6828      	ldr	r0, [r5, #0]
 801dbfe:	6803      	ldr	r3, [r0, #0]
 801dc00:	68db      	ldr	r3, [r3, #12]
 801dc02:	4798      	blx	r3
 801dc04:	2301      	movs	r3, #1
 801dc06:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 801dc0a:	3404      	adds	r4, #4
 801dc0c:	4620      	mov	r0, r4
 801dc0e:	f7ff ff5f 	bl	801dad0 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 801dc12:	4620      	mov	r0, r4
 801dc14:	f7ff ffa0 	bl	801db58 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 801dc18:	6830      	ldr	r0, [r6, #0]
 801dc1a:	b110      	cbz	r0, 801dc22 <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 801dc1c:	6803      	ldr	r3, [r0, #0]
 801dc1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801dc20:	e7dd      	b.n	801dbde <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 801dc22:	bd70      	pop	{r4, r5, r6, pc}
 801dc24:	24026280 	.word	0x24026280
 801dc28:	2402627c 	.word	0x2402627c

0801dc2c <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 801dc2c:	4603      	mov	r3, r0
 801dc2e:	f100 0140 	add.w	r1, r0, #64	; 0x40
 801dc32:	2200      	movs	r2, #0
 801dc34:	801a      	strh	r2, [r3, #0]
 801dc36:	3308      	adds	r3, #8
 801dc38:	f823 2c06 	strh.w	r2, [r3, #-6]
 801dc3c:	f823 2c04 	strh.w	r2, [r3, #-4]
 801dc40:	f823 2c02 	strh.w	r2, [r3, #-2]
 801dc44:	428b      	cmp	r3, r1
 801dc46:	d1f5      	bne.n	801dc34 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 801dc48:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 801dc4c:	4770      	bx	lr
	...

0801dc50 <_ZN8touchgfx11ApplicationC1Ev>:
 801dc50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dc52:	4b1d      	ldr	r3, [pc, #116]	; (801dcc8 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 801dc54:	4606      	mov	r6, r0
 801dc56:	4604      	mov	r4, r0
 801dc58:	2500      	movs	r5, #0
 801dc5a:	f846 3b04 	str.w	r3, [r6], #4
 801dc5e:	22a8      	movs	r2, #168	; 0xa8
 801dc60:	2100      	movs	r1, #0
 801dc62:	4630      	mov	r0, r6
 801dc64:	f00a fea4 	bl	80289b0 <memset>
 801dc68:	f8a4 5084 	strh.w	r5, [r4, #132]	; 0x84
 801dc6c:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 801dc70:	4f16      	ldr	r7, [pc, #88]	; (801dccc <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 801dc72:	f7ff ffdb 	bl	801dc2c <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801dc76:	f104 00ee 	add.w	r0, r4, #238	; 0xee
 801dc7a:	f7ff ffd7 	bl	801dc2c <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801dc7e:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 801dc82:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 801dc86:	f8a4 5134 	strh.w	r5, [r4, #308]	; 0x134
 801dc8a:	f8a4 5136 	strh.w	r5, [r4, #310]	; 0x136
 801dc8e:	f884 5138 	strb.w	r5, [r4, #312]	; 0x138
 801dc92:	490f      	ldr	r1, [pc, #60]	; (801dcd0 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 801dc94:	480f      	ldr	r0, [pc, #60]	; (801dcd4 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 801dc96:	f00a fcc3 	bl	8028620 <CRC_Lock>
 801dc9a:	4b0f      	ldr	r3, [pc, #60]	; (801dcd8 <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 801dc9c:	b158      	cbz	r0, 801dcb6 <_ZN8touchgfx11ApplicationC1Ev+0x66>
 801dc9e:	801d      	strh	r5, [r3, #0]
 801dca0:	2300      	movs	r3, #0
 801dca2:	4a0e      	ldr	r2, [pc, #56]	; (801dcdc <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 801dca4:	4630      	mov	r0, r6
 801dca6:	6013      	str	r3, [r2, #0]
 801dca8:	4a0d      	ldr	r2, [pc, #52]	; (801dce0 <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 801dcaa:	603b      	str	r3, [r7, #0]
 801dcac:	6013      	str	r3, [r2, #0]
 801dcae:	f7ff ff2e 	bl	801db0e <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 801dcb2:	4620      	mov	r0, r4
 801dcb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801dcb6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801dcba:	2002      	movs	r0, #2
 801dcbc:	801a      	strh	r2, [r3, #0]
 801dcbe:	6038      	str	r0, [r7, #0]
 801dcc0:	f001 fa3e 	bl	801f140 <_ZN8touchgfx6Screen4drawEv>
 801dcc4:	e7ec      	b.n	801dca0 <_ZN8touchgfx11ApplicationC1Ev+0x50>
 801dcc6:	bf00      	nop
 801dcc8:	0802d64c 	.word	0x0802d64c
 801dccc:	2402627c 	.word	0x2402627c
 801dcd0:	b5e8b5cd 	.word	0xb5e8b5cd
 801dcd4:	f407a5c2 	.word	0xf407a5c2
 801dcd8:	24000068 	.word	0x24000068
 801dcdc:	2402628c 	.word	0x2402628c
 801dce0:	24026280 	.word	0x24026280

0801dce4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 801dce4:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 801dce8:	3b01      	subs	r3, #1
 801dcea:	b29b      	uxth	r3, r3
 801dcec:	428b      	cmp	r3, r1
 801dcee:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 801dcf2:	b510      	push	{r4, lr}
 801dcf4:	d908      	bls.n	801dd08 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 801dcf6:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 801dcfa:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 801dcfe:	681a      	ldr	r2, [r3, #0]
 801dd00:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 801dd04:	685a      	ldr	r2, [r3, #4]
 801dd06:	6062      	str	r2, [r4, #4]
 801dd08:	bd10      	pop	{r4, pc}
	...

0801dd0c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 801dd0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dd10:	b08f      	sub	sp, #60	; 0x3c
 801dd12:	4b8f      	ldr	r3, [pc, #572]	; (801df50 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x244>)
 801dd14:	4683      	mov	fp, r0
 801dd16:	ac0a      	add	r4, sp, #40	; 0x28
 801dd18:	e884 0006 	stmia.w	r4, {r1, r2}
 801dd1c:	f9b3 2000 	ldrsh.w	r2, [r3]
 801dd20:	4620      	mov	r0, r4
 801dd22:	4b8c      	ldr	r3, [pc, #560]	; (801df54 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x248>)
 801dd24:	f9b3 1000 	ldrsh.w	r1, [r3]
 801dd28:	f7ff fde8 	bl	801d8fc <_ZN8touchgfx4Rect10restrictToEss>
 801dd2c:	4620      	mov	r0, r4
 801dd2e:	f7fc fb5e 	bl	801a3ee <_ZNK8touchgfx4Rect7isEmptyEv>
 801dd32:	2800      	cmp	r0, #0
 801dd34:	d16a      	bne.n	801de0c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801dd36:	9403      	str	r4, [sp, #12]
 801dd38:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	; 0xec
 801dd3c:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
 801dd40:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 801dd44:	9301      	str	r3, [sp, #4]
 801dd46:	35a4      	adds	r5, #164	; 0xa4
 801dd48:	b15c      	cbz	r4, 801dd62 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 801dd4a:	4629      	mov	r1, r5
 801dd4c:	9803      	ldr	r0, [sp, #12]
 801dd4e:	f7ff fe25 	bl	801d99c <_ZNK8touchgfx4Rect8includesERKS0_>
 801dd52:	3c01      	subs	r4, #1
 801dd54:	b118      	cbz	r0, 801dd5e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52>
 801dd56:	b2a1      	uxth	r1, r4
 801dd58:	9801      	ldr	r0, [sp, #4]
 801dd5a:	f7ff ffc3 	bl	801dce4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801dd5e:	3d08      	subs	r5, #8
 801dd60:	e7f2      	b.n	801dd48 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c>
 801dd62:	f8bb 80ec 	ldrh.w	r8, [fp, #236]	; 0xec
 801dd66:	f108 33ff 	add.w	r3, r8, #4294967295
 801dd6a:	f8cd 8010 	str.w	r8, [sp, #16]
 801dd6e:	9302      	str	r3, [sp, #8]
 801dd70:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 801dd74:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 801dd78:	9306      	str	r3, [sp, #24]
 801dd7a:	445c      	add	r4, fp
 801dd7c:	2500      	movs	r5, #0
 801dd7e:	4626      	mov	r6, r4
 801dd80:	f8cd 8014 	str.w	r8, [sp, #20]
 801dd84:	462f      	mov	r7, r5
 801dd86:	9b05      	ldr	r3, [sp, #20]
 801dd88:	2b00      	cmp	r3, #0
 801dd8a:	d073      	beq.n	801de74 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 801dd8c:	9903      	ldr	r1, [sp, #12]
 801dd8e:	4630      	mov	r0, r6
 801dd90:	f7ff fd92 	bl	801d8b8 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801dd94:	b350      	cbz	r0, 801ddec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 801dd96:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 801dd9a:	f9b6 c000 	ldrsh.w	ip, [r6]
 801dd9e:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	; 0x2a
 801dda2:	45e6      	cmp	lr, ip
 801dda4:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 801dda8:	db33      	blt.n	801de12 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 801ddaa:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 801ddae:	88b3      	ldrh	r3, [r6, #4]
 801ddb0:	4472      	add	r2, lr
 801ddb2:	4463      	add	r3, ip
 801ddb4:	b212      	sxth	r2, r2
 801ddb6:	b21b      	sxth	r3, r3
 801ddb8:	429a      	cmp	r2, r3
 801ddba:	dc2a      	bgt.n	801de12 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 801ddbc:	fa1f f289 	uxth.w	r2, r9
 801ddc0:	88f3      	ldrh	r3, [r6, #6]
 801ddc2:	45ca      	cmp	sl, r9
 801ddc4:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 801ddc8:	4413      	add	r3, r2
 801ddca:	fa1f fc8a 	uxth.w	ip, sl
 801ddce:	b29b      	uxth	r3, r3
 801ddd0:	fa0f fe83 	sxth.w	lr, r3
 801ddd4:	db0f      	blt.n	801ddf6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 801ddd6:	eba3 030c 	sub.w	r3, r3, ip
 801ddda:	1ac9      	subs	r1, r1, r3
 801dddc:	b209      	sxth	r1, r1
 801ddde:	2900      	cmp	r1, #0
 801dde0:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801dde4:	dd12      	ble.n	801de0c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801dde6:	f8ad e02a 	strh.w	lr, [sp, #42]	; 0x2a
 801ddea:	4605      	mov	r5, r0
 801ddec:	9b05      	ldr	r3, [sp, #20]
 801ddee:	3e08      	subs	r6, #8
 801ddf0:	3b01      	subs	r3, #1
 801ddf2:	9305      	str	r3, [sp, #20]
 801ddf4:	e7c7      	b.n	801dd86 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 801ddf6:	4461      	add	r1, ip
 801ddf8:	b209      	sxth	r1, r1
 801ddfa:	4571      	cmp	r1, lr
 801ddfc:	dc38      	bgt.n	801de70 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801ddfe:	eba2 020c 	sub.w	r2, r2, ip
 801de02:	b212      	sxth	r2, r2
 801de04:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 801de08:	2a00      	cmp	r2, #0
 801de0a:	dcee      	bgt.n	801ddea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 801de0c:	b00f      	add	sp, #60	; 0x3c
 801de0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801de12:	45ca      	cmp	sl, r9
 801de14:	db2c      	blt.n	801de70 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801de16:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 801de1a:	449a      	add	sl, r3
 801de1c:	88f3      	ldrh	r3, [r6, #6]
 801de1e:	4499      	add	r9, r3
 801de20:	fa0f fa8a 	sxth.w	sl, sl
 801de24:	fa0f f989 	sxth.w	r9, r9
 801de28:	45ca      	cmp	sl, r9
 801de2a:	dc21      	bgt.n	801de70 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801de2c:	fa1f f28c 	uxth.w	r2, ip
 801de30:	88b3      	ldrh	r3, [r6, #4]
 801de32:	45e6      	cmp	lr, ip
 801de34:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801de38:	4413      	add	r3, r2
 801de3a:	fa1f f98e 	uxth.w	r9, lr
 801de3e:	b29b      	uxth	r3, r3
 801de40:	fa0f fa83 	sxth.w	sl, r3
 801de44:	db0a      	blt.n	801de5c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x150>
 801de46:	eba3 0309 	sub.w	r3, r3, r9
 801de4a:	1ac9      	subs	r1, r1, r3
 801de4c:	b209      	sxth	r1, r1
 801de4e:	2900      	cmp	r1, #0
 801de50:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 801de54:	ddda      	ble.n	801de0c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801de56:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 801de5a:	e7c6      	b.n	801ddea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 801de5c:	4449      	add	r1, r9
 801de5e:	b209      	sxth	r1, r1
 801de60:	4551      	cmp	r1, sl
 801de62:	dc05      	bgt.n	801de70 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801de64:	eba2 0209 	sub.w	r2, r2, r9
 801de68:	b212      	sxth	r2, r2
 801de6a:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 801de6e:	e7cb      	b.n	801de08 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 801de70:	4607      	mov	r7, r0
 801de72:	e7bb      	b.n	801ddec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 801de74:	2d00      	cmp	r5, #0
 801de76:	d181      	bne.n	801dd7c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x70>
 801de78:	2f00      	cmp	r7, #0
 801de7a:	f000 81dd 	beq.w	801e238 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 801de7e:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
 801de82:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	; 0x2a
 801de86:	b2b3      	uxth	r3, r6
 801de88:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 801de8c:	b2b9      	uxth	r1, r7
 801de8e:	f8bd a02e 	ldrh.w	sl, [sp, #46]	; 0x2e
 801de92:	441a      	add	r2, r3
 801de94:	448a      	add	sl, r1
 801de96:	9105      	str	r1, [sp, #20]
 801de98:	b292      	uxth	r2, r2
 801de9a:	fa1f fa8a 	uxth.w	sl, sl
 801de9e:	fa0f f882 	sxth.w	r8, r2
 801dea2:	fa0f f98a 	sxth.w	r9, sl
 801dea6:	e9cd 2307 	strd	r2, r3, [sp, #28]
 801deaa:	9b04      	ldr	r3, [sp, #16]
 801deac:	2b00      	cmp	r3, #0
 801deae:	d053      	beq.n	801df58 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 801deb0:	9903      	ldr	r1, [sp, #12]
 801deb2:	4620      	mov	r0, r4
 801deb4:	f7ff fd00 	bl	801d8b8 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801deb8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801debc:	b1c0      	cbz	r0, 801def0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801debe:	f9b4 e000 	ldrsh.w	lr, [r4]
 801dec2:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801dec6:	4576      	cmp	r6, lr
 801dec8:	dc23      	bgt.n	801df12 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801deca:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 801dece:	44f4      	add	ip, lr
 801ded0:	fa0f fc8c 	sxth.w	ip, ip
 801ded4:	45e0      	cmp	r8, ip
 801ded6:	db1c      	blt.n	801df12 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801ded8:	428f      	cmp	r7, r1
 801deda:	fa1f fc81 	uxth.w	ip, r1
 801dede:	88e1      	ldrh	r1, [r4, #6]
 801dee0:	dc0d      	bgt.n	801defe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 801dee2:	ebaa 0c0c 	sub.w	ip, sl, ip
 801dee6:	f8a4 9002 	strh.w	r9, [r4, #2]
 801deea:	eba1 010c 	sub.w	r1, r1, ip
 801deee:	80e1      	strh	r1, [r4, #6]
 801def0:	4628      	mov	r0, r5
 801def2:	9904      	ldr	r1, [sp, #16]
 801def4:	3c08      	subs	r4, #8
 801def6:	4605      	mov	r5, r0
 801def8:	3901      	subs	r1, #1
 801defa:	9104      	str	r1, [sp, #16]
 801defc:	e7d3      	b.n	801dea6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x19a>
 801defe:	4461      	add	r1, ip
 801df00:	b209      	sxth	r1, r1
 801df02:	4549      	cmp	r1, r9
 801df04:	dcf5      	bgt.n	801def2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801df06:	9905      	ldr	r1, [sp, #20]
 801df08:	eba1 0c0c 	sub.w	ip, r1, ip
 801df0c:	f8a4 c006 	strh.w	ip, [r4, #6]
 801df10:	e7ee      	b.n	801def0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801df12:	428f      	cmp	r7, r1
 801df14:	dced      	bgt.n	801def2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801df16:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 801df1a:	4461      	add	r1, ip
 801df1c:	b209      	sxth	r1, r1
 801df1e:	4589      	cmp	r9, r1
 801df20:	dbe7      	blt.n	801def2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801df22:	4576      	cmp	r6, lr
 801df24:	fa1f fc8e 	uxth.w	ip, lr
 801df28:	88a1      	ldrh	r1, [r4, #4]
 801df2a:	dc07      	bgt.n	801df3c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x230>
 801df2c:	eba2 0c0c 	sub.w	ip, r2, ip
 801df30:	f8a4 8000 	strh.w	r8, [r4]
 801df34:	eba1 010c 	sub.w	r1, r1, ip
 801df38:	80a1      	strh	r1, [r4, #4]
 801df3a:	e7d9      	b.n	801def0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801df3c:	4461      	add	r1, ip
 801df3e:	b209      	sxth	r1, r1
 801df40:	4588      	cmp	r8, r1
 801df42:	dbd6      	blt.n	801def2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801df44:	eba3 0c0c 	sub.w	ip, r3, ip
 801df48:	f8a4 c004 	strh.w	ip, [r4, #4]
 801df4c:	e7d0      	b.n	801def0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801df4e:	bf00      	nop
 801df50:	24026236 	.word	0x24026236
 801df54:	24026234 	.word	0x24026234
 801df58:	2d00      	cmp	r5, #0
 801df5a:	f000 816d 	beq.w	801e238 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 801df5e:	9b06      	ldr	r3, [sp, #24]
 801df60:	445b      	add	r3, fp
 801df62:	461c      	mov	r4, r3
 801df64:	9b02      	ldr	r3, [sp, #8]
 801df66:	3301      	adds	r3, #1
 801df68:	f000 8166 	beq.w	801e238 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 801df6c:	f104 05a4 	add.w	r5, r4, #164	; 0xa4
 801df70:	9803      	ldr	r0, [sp, #12]
 801df72:	4629      	mov	r1, r5
 801df74:	f7ff fd12 	bl	801d99c <_ZNK8touchgfx4Rect8includesERKS0_>
 801df78:	b120      	cbz	r0, 801df84 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x278>
 801df7a:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801df7e:	9801      	ldr	r0, [sp, #4]
 801df80:	f7ff feb0 	bl	801dce4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801df84:	9903      	ldr	r1, [sp, #12]
 801df86:	4628      	mov	r0, r5
 801df88:	f7ff fc96 	bl	801d8b8 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801df8c:	2800      	cmp	r0, #0
 801df8e:	f000 809c 	beq.w	801e0ca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 801df92:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	; 0xa4
 801df96:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 801df9a:	fa1f f189 	uxth.w	r1, r9
 801df9e:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 801dfa2:	9309      	str	r3, [sp, #36]	; 0x24
 801dfa4:	eb01 0c03 	add.w	ip, r1, r3
 801dfa8:	b283      	uxth	r3, r0
 801dfaa:	4548      	cmp	r0, r9
 801dfac:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	; 0x2a
 801dfb0:	fa1f fa8c 	uxth.w	sl, ip
 801dfb4:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 801dfb8:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	; 0xa6
 801dfbc:	eb03 050c 	add.w	r5, r3, ip
 801dfc0:	b2ad      	uxth	r5, r5
 801dfc2:	9505      	str	r5, [sp, #20]
 801dfc4:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 801dfc8:	9504      	str	r5, [sp, #16]
 801dfca:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	; 0xec
 801dfce:	f340 8099 	ble.w	801e104 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3f8>
 801dfd2:	1a5b      	subs	r3, r3, r1
 801dfd4:	4596      	cmp	lr, r2
 801dfd6:	fa0f f08a 	sxth.w	r0, sl
 801dfda:	b29b      	uxth	r3, r3
 801dfdc:	b21e      	sxth	r6, r3
 801dfde:	dd2e      	ble.n	801e03e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x332>
 801dfe0:	9f02      	ldr	r7, [sp, #8]
 801dfe2:	fa1f fe8e 	uxth.w	lr, lr
 801dfe6:	b292      	uxth	r2, r2
 801dfe8:	f8bd 402e 	ldrh.w	r4, [sp, #46]	; 0x2e
 801dfec:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 801dff0:	9f04      	ldr	r7, [sp, #16]
 801dff2:	ebae 0102 	sub.w	r1, lr, r2
 801dff6:	44a6      	add	lr, r4
 801dff8:	1a3f      	subs	r7, r7, r0
 801dffa:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	; 0xb2
 801dffe:	b289      	uxth	r1, r1
 801e000:	4402      	add	r2, r0
 801e002:	fa0f fe8e 	sxth.w	lr, lr
 801e006:	b20d      	sxth	r5, r1
 801e008:	b212      	sxth	r2, r2
 801e00a:	436f      	muls	r7, r5
 801e00c:	ebae 0202 	sub.w	r2, lr, r2
 801e010:	4372      	muls	r2, r6
 801e012:	4297      	cmp	r7, r2
 801e014:	db09      	blt.n	801e02a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 801e016:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	; 0xac
 801e01a:	f8a8 50b2 	strh.w	r5, [r8, #178]	; 0xb2
 801e01e:	449c      	add	ip, r3
 801e020:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801e024:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 801e028:	e686      	b.n	801dd38 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801e02a:	4421      	add	r1, r4
 801e02c:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	; 0xae
 801e030:	f8a8 60b0 	strh.w	r6, [r8, #176]	; 0xb0
 801e034:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801e038:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801e03c:	e67c      	b.n	801dd38 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801e03e:	9f04      	ldr	r7, [sp, #16]
 801e040:	42b8      	cmp	r0, r7
 801e042:	da27      	bge.n	801e094 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 801e044:	9902      	ldr	r1, [sp, #8]
 801e046:	1a3f      	subs	r7, r7, r0
 801e048:	f8bd 502e 	ldrh.w	r5, [sp, #46]	; 0x2e
 801e04c:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 801e050:	eb05 010e 	add.w	r1, r5, lr
 801e054:	fa1f f881 	uxth.w	r8, r1
 801e058:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	; 0xb2
 801e05c:	4411      	add	r1, r2
 801e05e:	fa0f f988 	sxth.w	r9, r8
 801e062:	eba2 020e 	sub.w	r2, r2, lr
 801e066:	eba1 0108 	sub.w	r1, r1, r8
 801e06a:	4372      	muls	r2, r6
 801e06c:	b289      	uxth	r1, r1
 801e06e:	fa0f f881 	sxth.w	r8, r1
 801e072:	fb08 f707 	mul.w	r7, r8, r7
 801e076:	42ba      	cmp	r2, r7
 801e078:	dc06      	bgt.n	801e088 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37c>
 801e07a:	f8a4 90ae 	strh.w	r9, [r4, #174]	; 0xae
 801e07e:	f8a4 80b2 	strh.w	r8, [r4, #178]	; 0xb2
 801e082:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
 801e086:	e7ca      	b.n	801e01e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x312>
 801e088:	4429      	add	r1, r5
 801e08a:	f8a4 60b0 	strh.w	r6, [r4, #176]	; 0xb0
 801e08e:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801e092:	e651      	b.n	801dd38 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801e094:	9805      	ldr	r0, [sp, #20]
 801e096:	2d06      	cmp	r5, #6
 801e098:	ebaa 0000 	sub.w	r0, sl, r0
 801e09c:	b280      	uxth	r0, r0
 801e09e:	fa0f fe80 	sxth.w	lr, r0
 801e0a2:	d817      	bhi.n	801e0d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c8>
 801e0a4:	9b04      	ldr	r3, [sp, #16]
 801e0a6:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	; 0xaa
 801e0aa:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 801e0ae:	1c6b      	adds	r3, r5, #1
 801e0b0:	f8a4 e0a8 	strh.w	lr, [r4, #168]	; 0xa8
 801e0b4:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
 801e0b8:	9b01      	ldr	r3, [sp, #4]
 801e0ba:	9801      	ldr	r0, [sp, #4]
 801e0bc:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801e0c0:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 801e0c4:	805a      	strh	r2, [r3, #2]
 801e0c6:	809e      	strh	r6, [r3, #4]
 801e0c8:	80d9      	strh	r1, [r3, #6]
 801e0ca:	9b02      	ldr	r3, [sp, #8]
 801e0cc:	3c08      	subs	r4, #8
 801e0ce:	3b01      	subs	r3, #1
 801e0d0:	9302      	str	r3, [sp, #8]
 801e0d2:	e747      	b.n	801df64 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>
 801e0d4:	9a02      	ldr	r2, [sp, #8]
 801e0d6:	45b6      	cmp	lr, r6
 801e0d8:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801e0dc:	db0d      	blt.n	801e0fa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 801e0de:	449c      	add	ip, r3
 801e0e0:	445a      	add	r2, fp
 801e0e2:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
 801e0e6:	fa1f fc8c 	uxth.w	ip, ip
 801e0ea:	f8a2 e0b0 	strh.w	lr, [r2, #176]	; 0xb0
 801e0ee:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 801e0f2:	448c      	add	ip, r1
 801e0f4:	f8a2 c0ac 	strh.w	ip, [r2, #172]	; 0xac
 801e0f8:	e61e      	b.n	801dd38 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801e0fa:	445a      	add	r2, fp
 801e0fc:	4484      	add	ip, r0
 801e0fe:	f8a2 60b0 	strh.w	r6, [r2, #176]	; 0xb0
 801e102:	e78f      	b.n	801e024 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 801e104:	fa1f f18e 	uxth.w	r1, lr
 801e108:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
 801e10c:	b293      	uxth	r3, r2
 801e10e:	4596      	cmp	lr, r2
 801e110:	eb01 0806 	add.w	r8, r1, r6
 801e114:	9306      	str	r3, [sp, #24]
 801e116:	fa1f f888 	uxth.w	r8, r8
 801e11a:	9f06      	ldr	r7, [sp, #24]
 801e11c:	fa0f f388 	sxth.w	r3, r8
 801e120:	9307      	str	r3, [sp, #28]
 801e122:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
 801e126:	443b      	add	r3, r7
 801e128:	b29b      	uxth	r3, r3
 801e12a:	9308      	str	r3, [sp, #32]
 801e12c:	da24      	bge.n	801e178 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46c>
 801e12e:	9905      	ldr	r1, [sp, #20]
 801e130:	eba3 0308 	sub.w	r3, r3, r8
 801e134:	eba2 020e 	sub.w	r2, r2, lr
 801e138:	eba9 0000 	sub.w	r0, r9, r0
 801e13c:	ebaa 0401 	sub.w	r4, sl, r1
 801e140:	b29b      	uxth	r3, r3
 801e142:	b2a4      	uxth	r4, r4
 801e144:	b219      	sxth	r1, r3
 801e146:	b225      	sxth	r5, r4
 801e148:	4348      	muls	r0, r1
 801e14a:	436a      	muls	r2, r5
 801e14c:	4282      	cmp	r2, r0
 801e14e:	9a02      	ldr	r2, [sp, #8]
 801e150:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801e154:	445a      	add	r2, fp
 801e156:	dc06      	bgt.n	801e166 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45a>
 801e158:	9b07      	ldr	r3, [sp, #28]
 801e15a:	44a4      	add	ip, r4
 801e15c:	f8a2 10b2 	strh.w	r1, [r2, #178]	; 0xb2
 801e160:	f8a2 30ae 	strh.w	r3, [r2, #174]	; 0xae
 801e164:	e75e      	b.n	801e024 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 801e166:	9904      	ldr	r1, [sp, #16]
 801e168:	f8a2 50b0 	strh.w	r5, [r2, #176]	; 0xb0
 801e16c:	f8a2 10ac 	strh.w	r1, [r2, #172]	; 0xac
 801e170:	4433      	add	r3, r6
 801e172:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801e176:	e5df      	b.n	801dd38 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801e178:	9f06      	ldr	r7, [sp, #24]
 801e17a:	9b04      	ldr	r3, [sp, #16]
 801e17c:	1bc9      	subs	r1, r1, r7
 801e17e:	fa0f f78a 	sxth.w	r7, sl
 801e182:	b289      	uxth	r1, r1
 801e184:	429f      	cmp	r7, r3
 801e186:	fa0f fe81 	sxth.w	lr, r1
 801e18a:	dd23      	ble.n	801e1d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c8>
 801e18c:	9a05      	ldr	r2, [sp, #20]
 801e18e:	eba9 0000 	sub.w	r0, r9, r0
 801e192:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801e196:	ebaa 0202 	sub.w	r2, sl, r2
 801e19a:	9d07      	ldr	r5, [sp, #28]
 801e19c:	fb0e f000 	mul.w	r0, lr, r0
 801e1a0:	b292      	uxth	r2, r2
 801e1a2:	eba5 0a03 	sub.w	sl, r5, r3
 801e1a6:	9b02      	ldr	r3, [sp, #8]
 801e1a8:	b214      	sxth	r4, r2
 801e1aa:	00db      	lsls	r3, r3, #3
 801e1ac:	fb04 fa0a 	mul.w	sl, r4, sl
 801e1b0:	445b      	add	r3, fp
 801e1b2:	4550      	cmp	r0, sl
 801e1b4:	db03      	blt.n	801e1be <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4b2>
 801e1b6:	f8a3 e0b2 	strh.w	lr, [r3, #178]	; 0xb2
 801e1ba:	4494      	add	ip, r2
 801e1bc:	e732      	b.n	801e024 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 801e1be:	9a04      	ldr	r2, [sp, #16]
 801e1c0:	4431      	add	r1, r6
 801e1c2:	f8a3 40b0 	strh.w	r4, [r3, #176]	; 0xb0
 801e1c6:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 801e1ca:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
 801e1ce:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801e1d2:	e75c      	b.n	801e08e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x382>
 801e1d4:	9b08      	ldr	r3, [sp, #32]
 801e1d6:	2d06      	cmp	r5, #6
 801e1d8:	eba3 0308 	sub.w	r3, r3, r8
 801e1dc:	b29b      	uxth	r3, r3
 801e1de:	b218      	sxth	r0, r3
 801e1e0:	d813      	bhi.n	801e20a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4fe>
 801e1e2:	9b07      	ldr	r3, [sp, #28]
 801e1e4:	f8a4 00aa 	strh.w	r0, [r4, #170]	; 0xaa
 801e1e8:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
 801e1ec:	1c6b      	adds	r3, r5, #1
 801e1ee:	9901      	ldr	r1, [sp, #4]
 801e1f0:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
 801e1f4:	9b01      	ldr	r3, [sp, #4]
 801e1f6:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 801e1fa:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801e1fe:	805a      	strh	r2, [r3, #2]
 801e200:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e202:	f8a3 e006 	strh.w	lr, [r3, #6]
 801e206:	809a      	strh	r2, [r3, #4]
 801e208:	e75f      	b.n	801e0ca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 801e20a:	9c02      	ldr	r4, [sp, #8]
 801e20c:	4570      	cmp	r0, lr
 801e20e:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 801e212:	db0d      	blt.n	801e230 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x524>
 801e214:	4431      	add	r1, r6
 801e216:	9b06      	ldr	r3, [sp, #24]
 801e218:	445c      	add	r4, fp
 801e21a:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 801e21e:	b289      	uxth	r1, r1
 801e220:	f8a4 00b2 	strh.w	r0, [r4, #178]	; 0xb2
 801e224:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801e228:	4419      	add	r1, r3
 801e22a:	f8a4 10ae 	strh.w	r1, [r4, #174]	; 0xae
 801e22e:	e583      	b.n	801dd38 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801e230:	445c      	add	r4, fp
 801e232:	f8a4 e0b2 	strh.w	lr, [r4, #178]	; 0xb2
 801e236:	e79b      	b.n	801e170 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x464>
 801e238:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	; 0xec
 801e23c:	2e07      	cmp	r6, #7
 801e23e:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 801e242:	d812      	bhi.n	801e26a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x55e>
 801e244:	1c75      	adds	r5, r6, #1
 801e246:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 801e24a:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 801e24e:	f8ab 50ec 	strh.w	r5, [fp, #236]	; 0xec
 801e252:	9d01      	ldr	r5, [sp, #4]
 801e254:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 801e258:	442c      	add	r4, r5
 801e25a:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 801e25e:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 801e262:	8061      	strh	r1, [r4, #2]
 801e264:	80a2      	strh	r2, [r4, #4]
 801e266:	80e3      	strh	r3, [r4, #6]
 801e268:	e5d0      	b.n	801de0c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801e26a:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
 801e26e:	3e01      	subs	r6, #1
 801e270:	445c      	add	r4, fp
 801e272:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 801e276:	f04f 37ff 	mov.w	r7, #4294967295
 801e27a:	2500      	movs	r5, #0
 801e27c:	9305      	str	r3, [sp, #20]
 801e27e:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 801e282:	1e72      	subs	r2, r6, #1
 801e284:	9302      	str	r3, [sp, #8]
 801e286:	4691      	mov	r9, r2
 801e288:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	; 0xaa
 801e28c:	9304      	str	r3, [sp, #16]
 801e28e:	f104 03a4 	add.w	r3, r4, #164	; 0xa4
 801e292:	f1b9 3fff 	cmp.w	r9, #4294967295
 801e296:	6818      	ldr	r0, [r3, #0]
 801e298:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801e29c:	9207      	str	r2, [sp, #28]
 801e29e:	bf16      	itet	ne
 801e2a0:	9905      	ldrne	r1, [sp, #20]
 801e2a2:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 801e2a6:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 801e2aa:	9306      	str	r3, [sp, #24]
 801e2ac:	f8be 1006 	ldrh.w	r1, [lr, #6]
 801e2b0:	f8be 8004 	ldrh.w	r8, [lr, #4]
 801e2b4:	fb18 f801 	smulbb	r8, r8, r1
 801e2b8:	6859      	ldr	r1, [r3, #4]
 801e2ba:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801e2be:	4671      	mov	r1, lr
 801e2c0:	a80c      	add	r0, sp, #48	; 0x30
 801e2c2:	f7ff fb91 	bl	801d9e8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801e2c6:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 801e2ca:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 801e2ce:	f04f 0c08 	mov.w	ip, #8
 801e2d2:	9b04      	ldr	r3, [sp, #16]
 801e2d4:	9a02      	ldr	r2, [sp, #8]
 801e2d6:	fb10 f001 	smulbb	r0, r0, r1
 801e2da:	fb02 8803 	mla	r8, r2, r3, r8
 801e2de:	eba0 0108 	sub.w	r1, r0, r8
 801e2e2:	fb90 f0fc 	sdiv	r0, r0, ip
 801e2e6:	4288      	cmp	r0, r1
 801e2e8:	dc20      	bgt.n	801e32c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x620>
 801e2ea:	4551      	cmp	r1, sl
 801e2ec:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801e2f0:	da03      	bge.n	801e2fa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ee>
 801e2f2:	b1d9      	cbz	r1, 801e32c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x620>
 801e2f4:	468a      	mov	sl, r1
 801e2f6:	464f      	mov	r7, r9
 801e2f8:	4635      	mov	r5, r6
 801e2fa:	f109 39ff 	add.w	r9, r9, #4294967295
 801e2fe:	f119 0f02 	cmn.w	r9, #2
 801e302:	d1c6      	bne.n	801e292 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x586>
 801e304:	4616      	mov	r6, r2
 801e306:	3201      	adds	r2, #1
 801e308:	f1a4 0408 	sub.w	r4, r4, #8
 801e30c:	d1b7      	bne.n	801e27e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x572>
 801e30e:	9b01      	ldr	r3, [sp, #4]
 801e310:	b2ac      	uxth	r4, r5
 801e312:	00ed      	lsls	r5, r5, #3
 801e314:	1958      	adds	r0, r3, r5
 801e316:	1c7b      	adds	r3, r7, #1
 801e318:	d10b      	bne.n	801e332 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x626>
 801e31a:	4601      	mov	r1, r0
 801e31c:	9803      	ldr	r0, [sp, #12]
 801e31e:	f7ff fb63 	bl	801d9e8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801e322:	4621      	mov	r1, r4
 801e324:	9801      	ldr	r0, [sp, #4]
 801e326:	f7ff fcdd 	bl	801dce4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801e32a:	e505      	b.n	801dd38 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801e32c:	464f      	mov	r7, r9
 801e32e:	4635      	mov	r5, r6
 801e330:	e7ed      	b.n	801e30e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x602>
 801e332:	9b01      	ldr	r3, [sp, #4]
 801e334:	00ff      	lsls	r7, r7, #3
 801e336:	445d      	add	r5, fp
 801e338:	19d9      	adds	r1, r3, r7
 801e33a:	445f      	add	r7, fp
 801e33c:	f7ff fb54 	bl	801d9e8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801e340:	9b03      	ldr	r3, [sp, #12]
 801e342:	cb03      	ldmia	r3!, {r0, r1}
 801e344:	9b03      	ldr	r3, [sp, #12]
 801e346:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
 801e34a:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 801e34e:	f855 0fac 	ldr.w	r0, [r5, #172]!
 801e352:	6869      	ldr	r1, [r5, #4]
 801e354:	c303      	stmia	r3!, {r0, r1}
 801e356:	e7e4      	b.n	801e322 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x616>

0801e358 <_ZN8touchgfx11Application10invalidateEv>:
 801e358:	4b09      	ldr	r3, [pc, #36]	; (801e380 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 801e35a:	b082      	sub	sp, #8
 801e35c:	2100      	movs	r1, #0
 801e35e:	f9b3 2000 	ldrsh.w	r2, [r3]
 801e362:	4b08      	ldr	r3, [pc, #32]	; (801e384 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 801e364:	9100      	str	r1, [sp, #0]
 801e366:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e36a:	f8ad 2004 	strh.w	r2, [sp, #4]
 801e36e:	f8ad 3006 	strh.w	r3, [sp, #6]
 801e372:	ab02      	add	r3, sp, #8
 801e374:	e913 0006 	ldmdb	r3, {r1, r2}
 801e378:	b002      	add	sp, #8
 801e37a:	f7ff bcc7 	b.w	801dd0c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801e37e:	bf00      	nop
 801e380:	24026234 	.word	0x24026234
 801e384:	24026236 	.word	0x24026236

0801e388 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 801e388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e38c:	f500 7698 	add.w	r6, r0, #304	; 0x130
 801e390:	b09b      	sub	sp, #108	; 0x6c
 801e392:	4604      	mov	r4, r0
 801e394:	4630      	mov	r0, r6
 801e396:	f7fc f82a 	bl	801a3ee <_ZNK8touchgfx4Rect7isEmptyEv>
 801e39a:	4605      	mov	r5, r0
 801e39c:	b940      	cbnz	r0, 801e3b0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x28>
 801e39e:	4620      	mov	r0, r4
 801e3a0:	e896 0006 	ldmia.w	r6, {r1, r2}
 801e3a4:	f7ff fcb2 	bl	801dd0c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801e3a8:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 801e3ac:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
 801e3b0:	4bc8      	ldr	r3, [pc, #800]	; (801e6d4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 801e3b2:	681b      	ldr	r3, [r3, #0]
 801e3b4:	2b00      	cmp	r3, #0
 801e3b6:	d03e      	beq.n	801e436 <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 801e3b8:	4dc7      	ldr	r5, [pc, #796]	; (801e6d8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 801e3ba:	4628      	mov	r0, r5
 801e3bc:	f7fc f817 	bl	801a3ee <_ZNK8touchgfx4Rect7isEmptyEv>
 801e3c0:	4606      	mov	r6, r0
 801e3c2:	2800      	cmp	r0, #0
 801e3c4:	d137      	bne.n	801e436 <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 801e3c6:	4628      	mov	r0, r5
 801e3c8:	f7ff f9a8 	bl	801d71c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801e3cc:	6829      	ldr	r1, [r5, #0]
 801e3ce:	686a      	ldr	r2, [r5, #4]
 801e3d0:	4620      	mov	r0, r4
 801e3d2:	f7ff fc9b 	bl	801dd0c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801e3d6:	802e      	strh	r6, [r5, #0]
 801e3d8:	806e      	strh	r6, [r5, #2]
 801e3da:	80ae      	strh	r6, [r5, #4]
 801e3dc:	80ee      	strh	r6, [r5, #6]
 801e3de:	ae09      	add	r6, sp, #36	; 0x24
 801e3e0:	4630      	mov	r0, r6
 801e3e2:	f7ff fc23 	bl	801dc2c <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801e3e6:	4abd      	ldr	r2, [pc, #756]	; (801e6dc <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 801e3e8:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
 801e3ec:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 801e3f0:	8815      	ldrh	r5, [r2, #0]
 801e3f2:	9202      	str	r2, [sp, #8]
 801e3f4:	462b      	mov	r3, r5
 801e3f6:	429f      	cmp	r7, r3
 801e3f8:	d924      	bls.n	801e444 <_ZN8touchgfx11Application15drawCachedAreasEv+0xbc>
 801e3fa:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 801e3fe:	2907      	cmp	r1, #7
 801e400:	d816      	bhi.n	801e430 <_ZN8touchgfx11Application15drawCachedAreasEv+0xa8>
 801e402:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 801e406:	f930 8033 	ldrsh.w	r8, [r0, r3, lsl #3]
 801e40a:	f9b2 9002 	ldrsh.w	r9, [r2, #2]
 801e40e:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 801e412:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 801e416:	1c4a      	adds	r2, r1, #1
 801e418:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
 801e41c:	eb06 02c1 	add.w	r2, r6, r1, lsl #3
 801e420:	f826 8031 	strh.w	r8, [r6, r1, lsl #3]
 801e424:	f8a2 9002 	strh.w	r9, [r2, #2]
 801e428:	f8a2 e004 	strh.w	lr, [r2, #4]
 801e42c:	f8a2 c006 	strh.w	ip, [r2, #6]
 801e430:	3301      	adds	r3, #1
 801e432:	b29b      	uxth	r3, r3
 801e434:	e7df      	b.n	801e3f6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x6e>
 801e436:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 801e43a:	2b00      	cmp	r3, #0
 801e43c:	d1cf      	bne.n	801e3de <_ZN8touchgfx11Application15drawCachedAreasEv+0x56>
 801e43e:	b01b      	add	sp, #108	; 0x6c
 801e440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e444:	462f      	mov	r7, r5
 801e446:	f8b4 312e 	ldrh.w	r3, [r4, #302]	; 0x12e
 801e44a:	42bb      	cmp	r3, r7
 801e44c:	d90b      	bls.n	801e466 <_ZN8touchgfx11Application15drawCachedAreasEv+0xde>
 801e44e:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
 801e452:	3701      	adds	r7, #1
 801e454:	4620      	mov	r0, r4
 801e456:	f8d3 10ee 	ldr.w	r1, [r3, #238]	; 0xee
 801e45a:	b2bf      	uxth	r7, r7
 801e45c:	f8d3 20f2 	ldr.w	r2, [r3, #242]	; 0xf2
 801e460:	f7ff fc54 	bl	801dd0c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801e464:	e7ef      	b.n	801e446 <_ZN8touchgfx11Application15drawCachedAreasEv+0xbe>
 801e466:	4a9e      	ldr	r2, [pc, #632]	; (801e6e0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 801e468:	6813      	ldr	r3, [r2, #0]
 801e46a:	4690      	mov	r8, r2
 801e46c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801e470:	2b01      	cmp	r3, #1
 801e472:	f040 80e4 	bne.w	801e63e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b6>
 801e476:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 801e47a:	4629      	mov	r1, r5
 801e47c:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
 801e480:	2500      	movs	r5, #0
 801e482:	33ae      	adds	r3, #174	; 0xae
 801e484:	428f      	cmp	r7, r1
 801e486:	f103 0308 	add.w	r3, r3, #8
 801e48a:	dd0a      	ble.n	801e4a2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x11a>
 801e48c:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 801e490:	3101      	adds	r1, #1
 801e492:	f833 0c04 	ldrh.w	r0, [r3, #-4]
 801e496:	4402      	add	r2, r0
 801e498:	b212      	sxth	r2, r2
 801e49a:	4295      	cmp	r5, r2
 801e49c:	bfb8      	it	lt
 801e49e:	4615      	movlt	r5, r2
 801e4a0:	e7f0      	b.n	801e484 <_ZN8touchgfx11Application15drawCachedAreasEv+0xfc>
 801e4a2:	4b90      	ldr	r3, [pc, #576]	; (801e6e4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 801e4a4:	f8df b238 	ldr.w	fp, [pc, #568]	; 801e6e0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>
 801e4a8:	881b      	ldrh	r3, [r3, #0]
 801e4aa:	46d8      	mov	r8, fp
 801e4ac:	2b0f      	cmp	r3, #15
 801e4ae:	bf8c      	ite	hi
 801e4b0:	ea4f 0ad3 	movhi.w	sl, r3, lsr #3
 801e4b4:	f04f 0a01 	movls.w	sl, #1
 801e4b8:	2300      	movs	r3, #0
 801e4ba:	e9cd 3305 	strd	r3, r3, [sp, #20]
 801e4be:	f8bd 701a 	ldrh.w	r7, [sp, #26]
 801e4c2:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 801e4c6:	4438      	add	r0, r7
 801e4c8:	b207      	sxth	r7, r0
 801e4ca:	f8db 0000 	ldr.w	r0, [fp]
 801e4ce:	42bd      	cmp	r5, r7
 801e4d0:	6803      	ldr	r3, [r0, #0]
 801e4d2:	f340 8084 	ble.w	801e5de <_ZN8touchgfx11Application15drawCachedAreasEv+0x256>
 801e4d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801e4da:	4798      	blx	r3
 801e4dc:	eb07 030a 	add.w	r3, r7, sl
 801e4e0:	4298      	cmp	r0, r3
 801e4e2:	da07      	bge.n	801e4f4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 801e4e4:	4285      	cmp	r5, r0
 801e4e6:	dd05      	ble.n	801e4f4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 801e4e8:	4287      	cmp	r7, r0
 801e4ea:	dd6d      	ble.n	801e5c8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 801e4ec:	2f00      	cmp	r7, #0
 801e4ee:	dd6b      	ble.n	801e5c8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 801e4f0:	4628      	mov	r0, r5
 801e4f2:	e004      	b.n	801e4fe <_ZN8touchgfx11Application15drawCachedAreasEv+0x176>
 801e4f4:	4287      	cmp	r7, r0
 801e4f6:	dcfb      	bgt.n	801e4f0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x168>
 801e4f8:	42a8      	cmp	r0, r5
 801e4fa:	bfa8      	it	ge
 801e4fc:	4628      	movge	r0, r5
 801e4fe:	4b7a      	ldr	r3, [pc, #488]	; (801e6e8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>)
 801e500:	1bc0      	subs	r0, r0, r7
 801e502:	2200      	movs	r2, #0
 801e504:	f8ad 7016 	strh.w	r7, [sp, #22]
 801e508:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e50c:	f8ad 2014 	strh.w	r2, [sp, #20]
 801e510:	f8ad 3018 	strh.w	r3, [sp, #24]
 801e514:	9b02      	ldr	r3, [sp, #8]
 801e516:	f8ad 001a 	strh.w	r0, [sp, #26]
 801e51a:	881f      	ldrh	r7, [r3, #0]
 801e51c:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 801e520:	42bb      	cmp	r3, r7
 801e522:	d9cc      	bls.n	801e4be <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
 801e524:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 801e528:	ab07      	add	r3, sp, #28
 801e52a:	f852 0fac 	ldr.w	r0, [r2, #172]!
 801e52e:	6851      	ldr	r1, [r2, #4]
 801e530:	c303      	stmia	r3!, {r0, r1}
 801e532:	a905      	add	r1, sp, #20
 801e534:	a807      	add	r0, sp, #28
 801e536:	f7ff f9bf 	bl	801d8b8 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801e53a:	2800      	cmp	r0, #0
 801e53c:	d04c      	beq.n	801e5d8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x250>
 801e53e:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 801e542:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 801e546:	f8bd 9020 	ldrh.w	r9, [sp, #32]
 801e54a:	4686      	mov	lr, r0
 801e54c:	4290      	cmp	r0, r2
 801e54e:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 801e552:	4448      	add	r0, r9
 801e554:	f8bd 9018 	ldrh.w	r9, [sp, #24]
 801e558:	bfb8      	it	lt
 801e55a:	4696      	movlt	lr, r2
 801e55c:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801e560:	444a      	add	r2, r9
 801e562:	b280      	uxth	r0, r0
 801e564:	4299      	cmp	r1, r3
 801e566:	468c      	mov	ip, r1
 801e568:	b292      	uxth	r2, r2
 801e56a:	9303      	str	r3, [sp, #12]
 801e56c:	bfb8      	it	lt
 801e56e:	469c      	movlt	ip, r3
 801e570:	b203      	sxth	r3, r0
 801e572:	fa0f f982 	sxth.w	r9, r2
 801e576:	f8ad e01c 	strh.w	lr, [sp, #28]
 801e57a:	f8ad c01e 	strh.w	ip, [sp, #30]
 801e57e:	454b      	cmp	r3, r9
 801e580:	bfb8      	it	lt
 801e582:	4602      	movlt	r2, r0
 801e584:	9b03      	ldr	r3, [sp, #12]
 801e586:	eba2 020e 	sub.w	r2, r2, lr
 801e58a:	f8ad 2020 	strh.w	r2, [sp, #32]
 801e58e:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801e592:	4411      	add	r1, r2
 801e594:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801e598:	4413      	add	r3, r2
 801e59a:	b289      	uxth	r1, r1
 801e59c:	b29b      	uxth	r3, r3
 801e59e:	b208      	sxth	r0, r1
 801e5a0:	b21a      	sxth	r2, r3
 801e5a2:	4290      	cmp	r0, r2
 801e5a4:	bfb8      	it	lt
 801e5a6:	460b      	movlt	r3, r1
 801e5a8:	eba3 030c 	sub.w	r3, r3, ip
 801e5ac:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801e5b0:	a807      	add	r0, sp, #28
 801e5b2:	f7fb ff1c 	bl	801a3ee <_ZNK8touchgfx4Rect7isEmptyEv>
 801e5b6:	b920      	cbnz	r0, 801e5c2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x23a>
 801e5b8:	6823      	ldr	r3, [r4, #0]
 801e5ba:	a907      	add	r1, sp, #28
 801e5bc:	4620      	mov	r0, r4
 801e5be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e5c0:	4798      	blx	r3
 801e5c2:	3701      	adds	r7, #1
 801e5c4:	b2bf      	uxth	r7, r7
 801e5c6:	e7a9      	b.n	801e51c <_ZN8touchgfx11Application15drawCachedAreasEv+0x194>
 801e5c8:	f8d8 0000 	ldr.w	r0, [r8]
 801e5cc:	2101      	movs	r1, #1
 801e5ce:	6803      	ldr	r3, [r0, #0]
 801e5d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801e5d4:	4798      	blx	r3
 801e5d6:	e772      	b.n	801e4be <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
 801e5d8:	e9cd 0007 	strd	r0, r0, [sp, #28]
 801e5dc:	e7e8      	b.n	801e5b0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x228>
 801e5de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e5e0:	4798      	blx	r3
 801e5e2:	4b42      	ldr	r3, [pc, #264]	; (801e6ec <_ZN8touchgfx11Application15drawCachedAreasEv+0x364>)
 801e5e4:	781b      	ldrb	r3, [r3, #0]
 801e5e6:	2b00      	cmp	r3, #0
 801e5e8:	f43f af29 	beq.w	801e43e <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 801e5ec:	2300      	movs	r3, #0
 801e5ee:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 801e5f2:	f104 00ee 	add.w	r0, r4, #238	; 0xee
 801e5f6:	f8a4 312e 	strh.w	r3, [r4, #302]	; 0x12e
 801e5fa:	9b02      	ldr	r3, [sp, #8]
 801e5fc:	881b      	ldrh	r3, [r3, #0]
 801e5fe:	429d      	cmp	r5, r3
 801e600:	f67f af1d 	bls.w	801e43e <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 801e604:	f8b4 112e 	ldrh.w	r1, [r4, #302]	; 0x12e
 801e608:	2907      	cmp	r1, #7
 801e60a:	d815      	bhi.n	801e638 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b0>
 801e60c:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 801e610:	f936 8033 	ldrsh.w	r8, [r6, r3, lsl #3]
 801e614:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 801e618:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
 801e61c:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
 801e620:	1c4a      	adds	r2, r1, #1
 801e622:	f8a4 212e 	strh.w	r2, [r4, #302]	; 0x12e
 801e626:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 801e62a:	f820 8031 	strh.w	r8, [r0, r1, lsl #3]
 801e62e:	f8a2 e002 	strh.w	lr, [r2, #2]
 801e632:	f8a2 c004 	strh.w	ip, [r2, #4]
 801e636:	80d7      	strh	r7, [r2, #6]
 801e638:	3301      	adds	r3, #1
 801e63a:	b29b      	uxth	r3, r3
 801e63c:	e7df      	b.n	801e5fe <_ZN8touchgfx11Application15drawCachedAreasEv+0x276>
 801e63e:	2b02      	cmp	r3, #2
 801e640:	f040 8135 	bne.w	801e8ae <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
 801e644:	4b2a      	ldr	r3, [pc, #168]	; (801e6f0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x368>)
 801e646:	f104 09ac 	add.w	r9, r4, #172	; 0xac
 801e64a:	781b      	ldrb	r3, [r3, #0]
 801e64c:	2b01      	cmp	r3, #1
 801e64e:	f000 809c 	beq.w	801e78a <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 801e652:	9b02      	ldr	r3, [sp, #8]
 801e654:	f8b4 20ec 	ldrh.w	r2, [r4, #236]	; 0xec
 801e658:	f8b3 b000 	ldrh.w	fp, [r3]
 801e65c:	f10b 0b01 	add.w	fp, fp, #1
 801e660:	fa1f fb8b 	uxth.w	fp, fp
 801e664:	2a00      	cmp	r2, #0
 801e666:	d0bc      	beq.n	801e5e2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801e668:	f8b4 50ae 	ldrh.w	r5, [r4, #174]	; 0xae
 801e66c:	4659      	mov	r1, fp
 801e66e:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	; 0xb2
 801e672:	f04f 0800 	mov.w	r8, #0
 801e676:	441d      	add	r5, r3
 801e678:	b22d      	sxth	r5, r5
 801e67a:	b28b      	uxth	r3, r1
 801e67c:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 801e680:	429a      	cmp	r2, r3
 801e682:	f240 80c0 	bls.w	801e806 <_ZN8touchgfx11Application15drawCachedAreasEv+0x47e>
 801e686:	4427      	add	r7, r4
 801e688:	eb04 0ec1 	add.w	lr, r4, r1, lsl #3
 801e68c:	4608      	mov	r0, r1
 801e68e:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	; 0xae
 801e692:	f9be c0ae 	ldrsh.w	ip, [lr, #174]	; 0xae
 801e696:	4563      	cmp	r3, ip
 801e698:	f340 80a2 	ble.w	801e7e0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x458>
 801e69c:	f8be 50b2 	ldrh.w	r5, [lr, #178]	; 0xb2
 801e6a0:	4465      	add	r5, ip
 801e6a2:	b22d      	sxth	r5, r5
 801e6a4:	429d      	cmp	r5, r3
 801e6a6:	bfa8      	it	ge
 801e6a8:	461d      	movge	r5, r3
 801e6aa:	3101      	adds	r1, #1
 801e6ac:	4680      	mov	r8, r0
 801e6ae:	e7e4      	b.n	801e67a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f2>
 801e6b0:	d10b      	bne.n	801e6ca <_ZN8touchgfx11Application15drawCachedAreasEv+0x342>
 801e6b2:	f9b5 c0b2 	ldrsh.w	ip, [r5, #178]	; 0xb2
 801e6b6:	f9ba 10b2 	ldrsh.w	r1, [sl, #178]	; 0xb2
 801e6ba:	458c      	cmp	ip, r1
 801e6bc:	bfb4      	ite	lt
 801e6be:	469c      	movlt	ip, r3
 801e6c0:	46bc      	movge	ip, r7
 801e6c2:	4572      	cmp	r2, lr
 801e6c4:	bfb8      	it	lt
 801e6c6:	4672      	movlt	r2, lr
 801e6c8:	e087      	b.n	801e7da <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
 801e6ca:	428a      	cmp	r2, r1
 801e6cc:	46bc      	mov	ip, r7
 801e6ce:	bfb8      	it	lt
 801e6d0:	460a      	movlt	r2, r1
 801e6d2:	e082      	b.n	801e7da <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
 801e6d4:	24026278 	.word	0x24026278
 801e6d8:	24026284 	.word	0x24026284
 801e6dc:	24000068 	.word	0x24000068
 801e6e0:	24026240 	.word	0x24026240
 801e6e4:	24026236 	.word	0x24026236
 801e6e8:	24026234 	.word	0x24026234
 801e6ec:	2402623e 	.word	0x2402623e
 801e6f0:	24026238 	.word	0x24026238
 801e6f4:	1961      	adds	r1, r4, r5
 801e6f6:	ab07      	add	r3, sp, #28
 801e6f8:	f851 0fac 	ldr.w	r0, [r1, #172]!
 801e6fc:	6849      	ldr	r1, [r1, #4]
 801e6fe:	c303      	stmia	r3!, {r0, r1}
 801e700:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801e704:	a807      	add	r0, sp, #28
 801e706:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801e70a:	2b13      	cmp	r3, #19
 801e70c:	440b      	add	r3, r1
 801e70e:	bfd8      	it	le
 801e710:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 801e714:	1a9b      	subs	r3, r3, r2
 801e716:	f8ad 201c 	strh.w	r2, [sp, #28]
 801e71a:	f8ad 3020 	strh.w	r3, [sp, #32]
 801e71e:	f7ff f817 	bl	801d750 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e722:	a807      	add	r0, sp, #28
 801e724:	f7fb fe63 	bl	801a3ee <_ZNK8touchgfx4Rect7isEmptyEv>
 801e728:	bb78      	cbnz	r0, 801e78a <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 801e72a:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 801e72e:	4425      	add	r5, r4
 801e730:	f8d8 0000 	ldr.w	r0, [r8]
 801e734:	f1bc 0f14 	cmp.w	ip, #20
 801e738:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801e73c:	f8d0 e000 	ldr.w	lr, [r0]
 801e740:	bfa8      	it	ge
 801e742:	f04f 0c14 	movge.w	ip, #20
 801e746:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801e74a:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801e74e:	fa1f fc8c 	uxth.w	ip, ip
 801e752:	f8cd c000 	str.w	ip, [sp]
 801e756:	f8de a090 	ldr.w	sl, [lr, #144]	; 0x90
 801e75a:	47d0      	blx	sl
 801e75c:	4682      	mov	sl, r0
 801e75e:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801e762:	a807      	add	r0, sp, #28
 801e764:	f7fe ffda 	bl	801d71c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801e768:	6823      	ldr	r3, [r4, #0]
 801e76a:	4620      	mov	r0, r4
 801e76c:	a907      	add	r1, sp, #28
 801e76e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e770:	4798      	blx	r3
 801e772:	f8b5 00b0 	ldrh.w	r0, [r5, #176]	; 0xb0
 801e776:	eba0 000a 	sub.w	r0, r0, sl
 801e77a:	b200      	sxth	r0, r0
 801e77c:	f8a5 00b0 	strh.w	r0, [r5, #176]	; 0xb0
 801e780:	b918      	cbnz	r0, 801e78a <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 801e782:	b2b9      	uxth	r1, r7
 801e784:	4648      	mov	r0, r9
 801e786:	f7ff faad 	bl	801dce4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801e78a:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	; 0xec
 801e78e:	f1bb 0f00 	cmp.w	fp, #0
 801e792:	f43f af26 	beq.w	801e5e2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801e796:	9b02      	ldr	r3, [sp, #8]
 801e798:	2700      	movs	r7, #0
 801e79a:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	; 0xac
 801e79e:	881b      	ldrh	r3, [r3, #0]
 801e7a0:	3301      	adds	r3, #1
 801e7a2:	b29b      	uxth	r3, r3
 801e7a4:	b299      	uxth	r1, r3
 801e7a6:	00fd      	lsls	r5, r7, #3
 801e7a8:	458b      	cmp	fp, r1
 801e7aa:	d9a3      	bls.n	801e6f4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x36c>
 801e7ac:	4425      	add	r5, r4
 801e7ae:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 801e7b2:	469c      	mov	ip, r3
 801e7b4:	f8b5 10b0 	ldrh.w	r1, [r5, #176]	; 0xb0
 801e7b8:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 801e7bc:	f9ba e0ac 	ldrsh.w	lr, [sl, #172]	; 0xac
 801e7c0:	4408      	add	r0, r1
 801e7c2:	f8ba 10b0 	ldrh.w	r1, [sl, #176]	; 0xb0
 801e7c6:	4471      	add	r1, lr
 801e7c8:	b200      	sxth	r0, r0
 801e7ca:	b209      	sxth	r1, r1
 801e7cc:	4288      	cmp	r0, r1
 801e7ce:	f6bf af6f 	bge.w	801e6b0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x328>
 801e7d2:	4586      	cmp	lr, r0
 801e7d4:	4672      	mov	r2, lr
 801e7d6:	bfb8      	it	lt
 801e7d8:	4602      	movlt	r2, r0
 801e7da:	3301      	adds	r3, #1
 801e7dc:	4667      	mov	r7, ip
 801e7de:	e7e1      	b.n	801e7a4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x41c>
 801e7e0:	d10c      	bne.n	801e7fc <_ZN8touchgfx11Application15drawCachedAreasEv+0x474>
 801e7e2:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	; 0xb0
 801e7e6:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	; 0xb0
 801e7ea:	4287      	cmp	r7, r0
 801e7ec:	bfb4      	ite	lt
 801e7ee:	4608      	movlt	r0, r1
 801e7f0:	4640      	movge	r0, r8
 801e7f2:	f8be 70b2 	ldrh.w	r7, [lr, #178]	; 0xb2
 801e7f6:	443b      	add	r3, r7
 801e7f8:	b21b      	sxth	r3, r3
 801e7fa:	e753      	b.n	801e6a4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x31c>
 801e7fc:	4565      	cmp	r5, ip
 801e7fe:	4640      	mov	r0, r8
 801e800:	bfa8      	it	ge
 801e802:	4665      	movge	r5, ip
 801e804:	e751      	b.n	801e6aa <_ZN8touchgfx11Application15drawCachedAreasEv+0x322>
 801e806:	eb09 0007 	add.w	r0, r9, r7
 801e80a:	4427      	add	r7, r4
 801e80c:	9203      	str	r2, [sp, #12]
 801e80e:	f9b7 a0b2 	ldrsh.w	sl, [r7, #178]	; 0xb2
 801e812:	f1ba 0f13 	cmp.w	sl, #19
 801e816:	bfde      	ittt	le
 801e818:	f8b7 50ae 	ldrhle.w	r5, [r7, #174]	; 0xae
 801e81c:	4455      	addle	r5, sl
 801e81e:	b22d      	sxthle	r5, r5
 801e820:	f7fb fde5 	bl	801a3ee <_ZNK8touchgfx4Rect7isEmptyEv>
 801e824:	9a03      	ldr	r2, [sp, #12]
 801e826:	2800      	cmp	r0, #0
 801e828:	f47f af1c 	bne.w	801e664 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2dc>
 801e82c:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	; 0xae
 801e830:	fa1f fa8a 	uxth.w	sl, sl
 801e834:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801e838:	1aad      	subs	r5, r5, r2
 801e83a:	4829      	ldr	r0, [pc, #164]	; (801e8e0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x558>)
 801e83c:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	; 0xac
 801e840:	2d14      	cmp	r5, #20
 801e842:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	; 0xb0
 801e846:	6800      	ldr	r0, [r0, #0]
 801e848:	bfa8      	it	ge
 801e84a:	2514      	movge	r5, #20
 801e84c:	f8ad 101c 	strh.w	r1, [sp, #28]
 801e850:	f8ad 201e 	strh.w	r2, [sp, #30]
 801e854:	b289      	uxth	r1, r1
 801e856:	f8ad 3020 	strh.w	r3, [sp, #32]
 801e85a:	b2ad      	uxth	r5, r5
 801e85c:	f8d0 c000 	ldr.w	ip, [r0]
 801e860:	b292      	uxth	r2, r2
 801e862:	4555      	cmp	r5, sl
 801e864:	bf94      	ite	ls
 801e866:	9500      	strls	r5, [sp, #0]
 801e868:	f8cd a000 	strhi.w	sl, [sp]
 801e86c:	b29b      	uxth	r3, r3
 801e86e:	f8dc 5090 	ldr.w	r5, [ip, #144]	; 0x90
 801e872:	47a8      	blx	r5
 801e874:	6823      	ldr	r3, [r4, #0]
 801e876:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801e87a:	a907      	add	r1, sp, #28
 801e87c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e87e:	4620      	mov	r0, r4
 801e880:	4798      	blx	r3
 801e882:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 801e886:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801e88a:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
 801e88e:	1a5b      	subs	r3, r3, r1
 801e890:	440a      	add	r2, r1
 801e892:	b21b      	sxth	r3, r3
 801e894:	f8a7 20ae 	strh.w	r2, [r7, #174]	; 0xae
 801e898:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801e89c:	2b00      	cmp	r3, #0
 801e89e:	f47f aed8 	bne.w	801e652 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 801e8a2:	fa1f f188 	uxth.w	r1, r8
 801e8a6:	4648      	mov	r0, r9
 801e8a8:	f7ff fa1c 	bl	801dce4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801e8ac:	e6d1      	b.n	801e652 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 801e8ae:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 801e8b2:	42ab      	cmp	r3, r5
 801e8b4:	f67f ae95 	bls.w	801e5e2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801e8b8:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 801e8bc:	ab07      	add	r3, sp, #28
 801e8be:	f852 0fac 	ldr.w	r0, [r2, #172]!
 801e8c2:	6851      	ldr	r1, [r2, #4]
 801e8c4:	c303      	stmia	r3!, {r0, r1}
 801e8c6:	a807      	add	r0, sp, #28
 801e8c8:	f7fb fd91 	bl	801a3ee <_ZNK8touchgfx4Rect7isEmptyEv>
 801e8cc:	b920      	cbnz	r0, 801e8d8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x550>
 801e8ce:	6823      	ldr	r3, [r4, #0]
 801e8d0:	a907      	add	r1, sp, #28
 801e8d2:	4620      	mov	r0, r4
 801e8d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e8d6:	4798      	blx	r3
 801e8d8:	3501      	adds	r5, #1
 801e8da:	b2ad      	uxth	r5, r5
 801e8dc:	e7e7      	b.n	801e8ae <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
 801e8de:	bf00      	nop
 801e8e0:	24026240 	.word	0x24026240

0801e8e4 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 801e8e4:	4b03      	ldr	r3, [pc, #12]	; (801e8f4 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 801e8e6:	2200      	movs	r2, #0
 801e8e8:	801a      	strh	r2, [r3, #0]
 801e8ea:	805a      	strh	r2, [r3, #2]
 801e8ec:	809a      	strh	r2, [r3, #4]
 801e8ee:	80da      	strh	r2, [r3, #6]
 801e8f0:	4770      	bx	lr
 801e8f2:	bf00      	nop
 801e8f4:	24026284 	.word	0x24026284

0801e8f8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 801e8f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e8fc:	b09d      	sub	sp, #116	; 0x74
 801e8fe:	4606      	mov	r6, r0
 801e900:	4614      	mov	r4, r2
 801e902:	468a      	mov	sl, r1
 801e904:	a803      	add	r0, sp, #12
 801e906:	461d      	mov	r5, r3
 801e908:	f000 fdc7 	bl	801f49a <_ZN8touchgfx12TextProviderC1Ev>
 801e90c:	6833      	ldr	r3, [r6, #0]
 801e90e:	4630      	mov	r0, r6
 801e910:	f242 0b0b 	movw	fp, #8203	; 0x200b
 801e914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801e916:	4798      	blx	r3
 801e918:	6833      	ldr	r3, [r6, #0]
 801e91a:	4607      	mov	r7, r0
 801e91c:	4630      	mov	r0, r6
 801e91e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801e920:	4798      	blx	r3
 801e922:	462a      	mov	r2, r5
 801e924:	2500      	movs	r5, #0
 801e926:	4621      	mov	r1, r4
 801e928:	9000      	str	r0, [sp, #0]
 801e92a:	463b      	mov	r3, r7
 801e92c:	462c      	mov	r4, r5
 801e92e:	46a9      	mov	r9, r5
 801e930:	46a8      	mov	r8, r5
 801e932:	a803      	add	r0, sp, #12
 801e934:	f000 fe0c 	bl	801f550 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801e938:	2300      	movs	r3, #0
 801e93a:	9302      	str	r3, [sp, #8]
 801e93c:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801e940:	429c      	cmp	r4, r3
 801e942:	d002      	beq.n	801e94a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 801e944:	455c      	cmp	r4, fp
 801e946:	bf18      	it	ne
 801e948:	4625      	movne	r5, r4
 801e94a:	ab02      	add	r3, sp, #8
 801e94c:	4632      	mov	r2, r6
 801e94e:	4651      	mov	r1, sl
 801e950:	a803      	add	r0, sp, #12
 801e952:	f001 f903 	bl	801fb5c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801e956:	4604      	mov	r4, r0
 801e958:	b108      	cbz	r0, 801e95e <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 801e95a:	280a      	cmp	r0, #10
 801e95c:	d10a      	bne.n	801e974 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 801e95e:	45c1      	cmp	r9, r8
 801e960:	bf38      	it	cc
 801e962:	46c1      	movcc	r9, r8
 801e964:	f04f 0800 	mov.w	r8, #0
 801e968:	2c00      	cmp	r4, #0
 801e96a:	d1e5      	bne.n	801e938 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801e96c:	4648      	mov	r0, r9
 801e96e:	b01d      	add	sp, #116	; 0x74
 801e970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e974:	9a02      	ldr	r2, [sp, #8]
 801e976:	2a00      	cmp	r2, #0
 801e978:	d0de      	beq.n	801e938 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801e97a:	7b57      	ldrb	r7, [r2, #13]
 801e97c:	4629      	mov	r1, r5
 801e97e:	6833      	ldr	r3, [r6, #0]
 801e980:	007f      	lsls	r7, r7, #1
 801e982:	8894      	ldrh	r4, [r2, #4]
 801e984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801e986:	f407 7080 	and.w	r0, r7, #256	; 0x100
 801e98a:	7a97      	ldrb	r7, [r2, #10]
 801e98c:	4307      	orrs	r7, r0
 801e98e:	4630      	mov	r0, r6
 801e990:	4798      	blx	r3
 801e992:	4438      	add	r0, r7
 801e994:	4480      	add	r8, r0
 801e996:	fa1f f888 	uxth.w	r8, r8
 801e99a:	e7e5      	b.n	801e968 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

0801e99c <_ZNK8touchgfx4Font12getCharWidthEt>:
 801e99c:	b508      	push	{r3, lr}
 801e99e:	6803      	ldr	r3, [r0, #0]
 801e9a0:	68db      	ldr	r3, [r3, #12]
 801e9a2:	4798      	blx	r3
 801e9a4:	b128      	cbz	r0, 801e9b2 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 801e9a6:	7b43      	ldrb	r3, [r0, #13]
 801e9a8:	7a80      	ldrb	r0, [r0, #10]
 801e9aa:	005b      	lsls	r3, r3, #1
 801e9ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801e9b0:	4318      	orrs	r0, r3
 801e9b2:	bd08      	pop	{r3, pc}

0801e9b4 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 801e9b4:	b40e      	push	{r1, r2, r3}
 801e9b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e9b8:	b09e      	sub	sp, #120	; 0x78
 801e9ba:	4605      	mov	r5, r0
 801e9bc:	ab23      	add	r3, sp, #140	; 0x8c
 801e9be:	a805      	add	r0, sp, #20
 801e9c0:	f853 4b04 	ldr.w	r4, [r3], #4
 801e9c4:	9303      	str	r3, [sp, #12]
 801e9c6:	f000 fd68 	bl	801f49a <_ZN8touchgfx12TextProviderC1Ev>
 801e9ca:	682b      	ldr	r3, [r5, #0]
 801e9cc:	4628      	mov	r0, r5
 801e9ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801e9d0:	4798      	blx	r3
 801e9d2:	682b      	ldr	r3, [r5, #0]
 801e9d4:	4606      	mov	r6, r0
 801e9d6:	4628      	mov	r0, r5
 801e9d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801e9da:	4798      	blx	r3
 801e9dc:	4633      	mov	r3, r6
 801e9de:	4621      	mov	r1, r4
 801e9e0:	ae1e      	add	r6, sp, #120	; 0x78
 801e9e2:	2400      	movs	r4, #0
 801e9e4:	9000      	str	r0, [sp, #0]
 801e9e6:	9a03      	ldr	r2, [sp, #12]
 801e9e8:	a805      	add	r0, sp, #20
 801e9ea:	f000 fdb1 	bl	801f550 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801e9ee:	f846 4d68 	str.w	r4, [r6, #-104]!
 801e9f2:	462a      	mov	r2, r5
 801e9f4:	4633      	mov	r3, r6
 801e9f6:	4621      	mov	r1, r4
 801e9f8:	a805      	add	r0, sp, #20
 801e9fa:	f001 f8af 	bl	801fb5c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801e9fe:	b300      	cbz	r0, 801ea42 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 801ea00:	280a      	cmp	r0, #10
 801ea02:	d01a      	beq.n	801ea3a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801ea04:	9f04      	ldr	r7, [sp, #16]
 801ea06:	b1c7      	cbz	r7, 801ea3a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801ea08:	7b78      	ldrb	r0, [r7, #13]
 801ea0a:	7a3b      	ldrb	r3, [r7, #8]
 801ea0c:	00c1      	lsls	r1, r0, #3
 801ea0e:	88ea      	ldrh	r2, [r5, #6]
 801ea10:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801ea14:	4319      	orrs	r1, r3
 801ea16:	0643      	lsls	r3, r0, #25
 801ea18:	ea4f 1000 	mov.w	r0, r0, lsl #4
 801ea1c:	bf48      	it	mi
 801ea1e:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 801ea22:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801ea26:	bf48      	it	mi
 801ea28:	b219      	sxthmi	r1, r3
 801ea2a:	79fb      	ldrb	r3, [r7, #7]
 801ea2c:	4303      	orrs	r3, r0
 801ea2e:	4413      	add	r3, r2
 801ea30:	1a5b      	subs	r3, r3, r1
 801ea32:	b21b      	sxth	r3, r3
 801ea34:	429c      	cmp	r4, r3
 801ea36:	bfb8      	it	lt
 801ea38:	461c      	movlt	r4, r3
 801ea3a:	4633      	mov	r3, r6
 801ea3c:	462a      	mov	r2, r5
 801ea3e:	2100      	movs	r1, #0
 801ea40:	e7da      	b.n	801e9f8 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 801ea42:	b2a0      	uxth	r0, r4
 801ea44:	b01e      	add	sp, #120	; 0x78
 801ea46:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801ea4a:	b003      	add	sp, #12
 801ea4c:	4770      	bx	lr

0801ea4e <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 801ea4e:	7a43      	ldrb	r3, [r0, #9]
 801ea50:	8880      	ldrh	r0, [r0, #4]
 801ea52:	4418      	add	r0, r3
 801ea54:	b280      	uxth	r0, r0
 801ea56:	4770      	bx	lr

0801ea58 <_ZNK8touchgfx4Font13getFontHeightEv>:
 801ea58:	6803      	ldr	r3, [r0, #0]
 801ea5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ea5c:	4718      	bx	r3

0801ea5e <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801ea5e:	b40e      	push	{r1, r2, r3}
 801ea60:	b570      	push	{r4, r5, r6, lr}
 801ea62:	b09d      	sub	sp, #116	; 0x74
 801ea64:	4604      	mov	r4, r0
 801ea66:	ab21      	add	r3, sp, #132	; 0x84
 801ea68:	a803      	add	r0, sp, #12
 801ea6a:	f853 5b04 	ldr.w	r5, [r3], #4
 801ea6e:	9302      	str	r3, [sp, #8]
 801ea70:	f000 fd13 	bl	801f49a <_ZN8touchgfx12TextProviderC1Ev>
 801ea74:	6823      	ldr	r3, [r4, #0]
 801ea76:	4620      	mov	r0, r4
 801ea78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801ea7a:	4798      	blx	r3
 801ea7c:	6823      	ldr	r3, [r4, #0]
 801ea7e:	4606      	mov	r6, r0
 801ea80:	4620      	mov	r0, r4
 801ea82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ea84:	2401      	movs	r4, #1
 801ea86:	4798      	blx	r3
 801ea88:	4633      	mov	r3, r6
 801ea8a:	9000      	str	r0, [sp, #0]
 801ea8c:	4629      	mov	r1, r5
 801ea8e:	9a02      	ldr	r2, [sp, #8]
 801ea90:	a803      	add	r0, sp, #12
 801ea92:	f000 fd5d 	bl	801f550 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801ea96:	a803      	add	r0, sp, #12
 801ea98:	f001 f92c 	bl	801fcf4 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801ea9c:	b2a3      	uxth	r3, r4
 801ea9e:	b138      	cbz	r0, 801eab0 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 801eaa0:	280a      	cmp	r0, #10
 801eaa2:	a803      	add	r0, sp, #12
 801eaa4:	bf04      	itt	eq
 801eaa6:	3301      	addeq	r3, #1
 801eaa8:	b21c      	sxtheq	r4, r3
 801eaaa:	f001 f923 	bl	801fcf4 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801eaae:	e7f5      	b.n	801ea9c <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 801eab0:	4618      	mov	r0, r3
 801eab2:	b01d      	add	sp, #116	; 0x74
 801eab4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801eab8:	b003      	add	sp, #12
 801eaba:	4770      	bx	lr

0801eabc <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801eabc:	b40e      	push	{r1, r2, r3}
 801eabe:	b5f0      	push	{r4, r5, r6, r7, lr}
 801eac0:	b09e      	sub	sp, #120	; 0x78
 801eac2:	4604      	mov	r4, r0
 801eac4:	ab23      	add	r3, sp, #140	; 0x8c
 801eac6:	a805      	add	r0, sp, #20
 801eac8:	f853 5b04 	ldr.w	r5, [r3], #4
 801eacc:	9303      	str	r3, [sp, #12]
 801eace:	f000 fce4 	bl	801f49a <_ZN8touchgfx12TextProviderC1Ev>
 801ead2:	6823      	ldr	r3, [r4, #0]
 801ead4:	4620      	mov	r0, r4
 801ead6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801ead8:	4798      	blx	r3
 801eada:	6823      	ldr	r3, [r4, #0]
 801eadc:	4606      	mov	r6, r0
 801eade:	4620      	mov	r0, r4
 801eae0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801eae2:	4798      	blx	r3
 801eae4:	4633      	mov	r3, r6
 801eae6:	4629      	mov	r1, r5
 801eae8:	9000      	str	r0, [sp, #0]
 801eaea:	9a03      	ldr	r2, [sp, #12]
 801eaec:	a805      	add	r0, sp, #20
 801eaee:	f000 fd2f 	bl	801f550 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801eaf2:	ad1e      	add	r5, sp, #120	; 0x78
 801eaf4:	2100      	movs	r1, #0
 801eaf6:	f647 76ff 	movw	r6, #32767	; 0x7fff
 801eafa:	4622      	mov	r2, r4
 801eafc:	a805      	add	r0, sp, #20
 801eafe:	f845 1d68 	str.w	r1, [r5, #-104]!
 801eb02:	462b      	mov	r3, r5
 801eb04:	f001 f82a 	bl	801fb5c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801eb08:	b1d8      	cbz	r0, 801eb42 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 801eb0a:	280a      	cmp	r0, #10
 801eb0c:	d012      	beq.n	801eb34 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 801eb0e:	9804      	ldr	r0, [sp, #16]
 801eb10:	b180      	cbz	r0, 801eb34 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 801eb12:	7b47      	ldrb	r7, [r0, #13]
 801eb14:	88e2      	ldrh	r2, [r4, #6]
 801eb16:	00fb      	lsls	r3, r7, #3
 801eb18:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801eb1c:	7a03      	ldrb	r3, [r0, #8]
 801eb1e:	430b      	orrs	r3, r1
 801eb20:	0679      	lsls	r1, r7, #25
 801eb22:	bf44      	itt	mi
 801eb24:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801eb28:	b21b      	sxthmi	r3, r3
 801eb2a:	1ad3      	subs	r3, r2, r3
 801eb2c:	b21b      	sxth	r3, r3
 801eb2e:	429e      	cmp	r6, r3
 801eb30:	bfa8      	it	ge
 801eb32:	461e      	movge	r6, r3
 801eb34:	462b      	mov	r3, r5
 801eb36:	4622      	mov	r2, r4
 801eb38:	2100      	movs	r1, #0
 801eb3a:	a805      	add	r0, sp, #20
 801eb3c:	f001 f80e 	bl	801fb5c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801eb40:	e7e2      	b.n	801eb08 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 801eb42:	4630      	mov	r0, r6
 801eb44:	b01e      	add	sp, #120	; 0x78
 801eb46:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801eb4a:	b003      	add	sp, #12
 801eb4c:	4770      	bx	lr

0801eb4e <_ZNK8touchgfx8Drawable10invalidateEv>:
 801eb4e:	b513      	push	{r0, r1, r4, lr}
 801eb50:	6803      	ldr	r3, [r0, #0]
 801eb52:	2400      	movs	r4, #0
 801eb54:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801eb58:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801eb5c:	f8ad 1004 	strh.w	r1, [sp, #4]
 801eb60:	4669      	mov	r1, sp
 801eb62:	691b      	ldr	r3, [r3, #16]
 801eb64:	9400      	str	r4, [sp, #0]
 801eb66:	f8ad 2006 	strh.w	r2, [sp, #6]
 801eb6a:	4798      	blx	r3
 801eb6c:	b002      	add	sp, #8
 801eb6e:	bd10      	pop	{r4, pc}

0801eb70 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801eb70:	b538      	push	{r3, r4, r5, lr}
 801eb72:	680b      	ldr	r3, [r1, #0]
 801eb74:	460c      	mov	r4, r1
 801eb76:	4605      	mov	r5, r0
 801eb78:	68db      	ldr	r3, [r3, #12]
 801eb7a:	4798      	blx	r3
 801eb7c:	6823      	ldr	r3, [r4, #0]
 801eb7e:	4620      	mov	r0, r4
 801eb80:	4629      	mov	r1, r5
 801eb82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801eb84:	4798      	blx	r3
 801eb86:	4628      	mov	r0, r5
 801eb88:	bd38      	pop	{r3, r4, r5, pc}

0801eb8a <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801eb8a:	b410      	push	{r4}
 801eb8c:	880a      	ldrh	r2, [r1, #0]
 801eb8e:	8884      	ldrh	r4, [r0, #4]
 801eb90:	4422      	add	r2, r4
 801eb92:	800a      	strh	r2, [r1, #0]
 801eb94:	884a      	ldrh	r2, [r1, #2]
 801eb96:	88c4      	ldrh	r4, [r0, #6]
 801eb98:	4422      	add	r2, r4
 801eb9a:	804a      	strh	r2, [r1, #2]
 801eb9c:	6940      	ldr	r0, [r0, #20]
 801eb9e:	b120      	cbz	r0, 801ebaa <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801eba0:	6803      	ldr	r3, [r0, #0]
 801eba2:	f85d 4b04 	ldr.w	r4, [sp], #4
 801eba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801eba8:	4718      	bx	r3
 801ebaa:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ebae:	4770      	bx	lr

0801ebb0 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801ebb0:	b570      	push	{r4, r5, r6, lr}
 801ebb2:	8882      	ldrh	r2, [r0, #4]
 801ebb4:	460c      	mov	r4, r1
 801ebb6:	880b      	ldrh	r3, [r1, #0]
 801ebb8:	4605      	mov	r5, r0
 801ebba:	4413      	add	r3, r2
 801ebbc:	800b      	strh	r3, [r1, #0]
 801ebbe:	884b      	ldrh	r3, [r1, #2]
 801ebc0:	88c2      	ldrh	r2, [r0, #6]
 801ebc2:	4413      	add	r3, r2
 801ebc4:	804b      	strh	r3, [r1, #2]
 801ebc6:	1d01      	adds	r1, r0, #4
 801ebc8:	4620      	mov	r0, r4
 801ebca:	f7fb fbcd 	bl	801a368 <_ZN8touchgfx4RectaNERKS0_>
 801ebce:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801ebd2:	2b00      	cmp	r3, #0
 801ebd4:	dd0b      	ble.n	801ebee <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801ebd6:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801ebda:	2b00      	cmp	r3, #0
 801ebdc:	dd07      	ble.n	801ebee <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801ebde:	6968      	ldr	r0, [r5, #20]
 801ebe0:	b128      	cbz	r0, 801ebee <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801ebe2:	6803      	ldr	r3, [r0, #0]
 801ebe4:	4621      	mov	r1, r4
 801ebe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ebe8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ebec:	4718      	bx	r3
 801ebee:	bd70      	pop	{r4, r5, r6, pc}

0801ebf0 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801ebf0:	b570      	push	{r4, r5, r6, lr}
 801ebf2:	8882      	ldrh	r2, [r0, #4]
 801ebf4:	460c      	mov	r4, r1
 801ebf6:	880b      	ldrh	r3, [r1, #0]
 801ebf8:	4605      	mov	r5, r0
 801ebfa:	4413      	add	r3, r2
 801ebfc:	800b      	strh	r3, [r1, #0]
 801ebfe:	884b      	ldrh	r3, [r1, #2]
 801ec00:	88c2      	ldrh	r2, [r0, #6]
 801ec02:	4413      	add	r3, r2
 801ec04:	804b      	strh	r3, [r1, #2]
 801ec06:	1d01      	adds	r1, r0, #4
 801ec08:	4620      	mov	r0, r4
 801ec0a:	f7fb fbad 	bl	801a368 <_ZN8touchgfx4RectaNERKS0_>
 801ec0e:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801ec12:	2b00      	cmp	r3, #0
 801ec14:	dd18      	ble.n	801ec48 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 801ec16:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801ec1a:	2b00      	cmp	r3, #0
 801ec1c:	dd14      	ble.n	801ec48 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 801ec1e:	6968      	ldr	r0, [r5, #20]
 801ec20:	b128      	cbz	r0, 801ec2e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 801ec22:	6803      	ldr	r3, [r0, #0]
 801ec24:	4621      	mov	r1, r4
 801ec26:	691b      	ldr	r3, [r3, #16]
 801ec28:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ec2c:	4718      	bx	r3
 801ec2e:	4b07      	ldr	r3, [pc, #28]	; (801ec4c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 801ec30:	681b      	ldr	r3, [r3, #0]
 801ec32:	3304      	adds	r3, #4
 801ec34:	429d      	cmp	r5, r3
 801ec36:	d107      	bne.n	801ec48 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 801ec38:	f7fe ff1c 	bl	801da74 <_ZN8touchgfx11Application11getInstanceEv>
 801ec3c:	6821      	ldr	r1, [r4, #0]
 801ec3e:	6862      	ldr	r2, [r4, #4]
 801ec40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ec44:	f7ff b862 	b.w	801dd0c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801ec48:	bd70      	pop	{r4, r5, r6, pc}
 801ec4a:	bf00      	nop
 801ec4c:	2402627c 	.word	0x2402627c

0801ec50 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 801ec50:	b570      	push	{r4, r5, r6, lr}
 801ec52:	4604      	mov	r4, r0
 801ec54:	4616      	mov	r6, r2
 801ec56:	460d      	mov	r5, r1
 801ec58:	b901      	cbnz	r1, 801ec5c <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801ec5a:	b192      	cbz	r2, 801ec82 <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 801ec5c:	6823      	ldr	r3, [r4, #0]
 801ec5e:	4620      	mov	r0, r4
 801ec60:	699b      	ldr	r3, [r3, #24]
 801ec62:	4798      	blx	r3
 801ec64:	88e2      	ldrh	r2, [r4, #6]
 801ec66:	88a1      	ldrh	r1, [r4, #4]
 801ec68:	4620      	mov	r0, r4
 801ec6a:	4432      	add	r2, r6
 801ec6c:	4429      	add	r1, r5
 801ec6e:	b212      	sxth	r2, r2
 801ec70:	b209      	sxth	r1, r1
 801ec72:	f7e8 fe2d 	bl	80078d0 <_ZN8touchgfx8Drawable5setXYEss>
 801ec76:	6823      	ldr	r3, [r4, #0]
 801ec78:	4620      	mov	r0, r4
 801ec7a:	699b      	ldr	r3, [r3, #24]
 801ec7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ec80:	4718      	bx	r3
 801ec82:	bd70      	pop	{r4, r5, r6, pc}

0801ec84 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801ec84:	b510      	push	{r4, lr}
 801ec86:	2300      	movs	r3, #0
 801ec88:	4604      	mov	r4, r0
 801ec8a:	4608      	mov	r0, r1
 801ec8c:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801ec90:	8023      	strh	r3, [r4, #0]
 801ec92:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801ec96:	8063      	strh	r3, [r4, #2]
 801ec98:	6803      	ldr	r3, [r0, #0]
 801ec9a:	80a1      	strh	r1, [r4, #4]
 801ec9c:	4621      	mov	r1, r4
 801ec9e:	80e2      	strh	r2, [r4, #6]
 801eca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801eca2:	4798      	blx	r3
 801eca4:	4620      	mov	r0, r4
 801eca6:	bd10      	pop	{r4, pc}

0801eca8 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 801eca8:	b530      	push	{r4, r5, lr}
 801ecaa:	8083      	strh	r3, [r0, #4]
 801ecac:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801ecb0:	f89d 5018 	ldrb.w	r5, [sp, #24]
 801ecb4:	80c3      	strh	r3, [r0, #6]
 801ecb6:	f89d 3010 	ldrb.w	r3, [sp, #16]
 801ecba:	6141      	str	r1, [r0, #20]
 801ecbc:	7203      	strb	r3, [r0, #8]
 801ecbe:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801ecc2:	8302      	strh	r2, [r0, #24]
 801ecc4:	7243      	strb	r3, [r0, #9]
 801ecc6:	7a83      	ldrb	r3, [r0, #10]
 801ecc8:	f365 0306 	bfi	r3, r5, #0, #7
 801eccc:	f89d 501c 	ldrb.w	r5, [sp, #28]
 801ecd0:	f365 13c7 	bfi	r3, r5, #7, #1
 801ecd4:	7283      	strb	r3, [r0, #10]
 801ecd6:	f89d 3020 	ldrb.w	r3, [sp, #32]
 801ecda:	72c3      	strb	r3, [r0, #11]
 801ecdc:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 801ece0:	7303      	strb	r3, [r0, #12]
 801ece2:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 801ece6:	81c3      	strh	r3, [r0, #14]
 801ece8:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 801ecec:	8203      	strh	r3, [r0, #16]
 801ecee:	4b01      	ldr	r3, [pc, #4]	; (801ecf4 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 801ecf0:	6003      	str	r3, [r0, #0]
 801ecf2:	bd30      	pop	{r4, r5, pc}
 801ecf4:	0802d700 	.word	0x0802d700

0801ecf8 <_ZNK8touchgfx9ConstFont4findEt>:
 801ecf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ecfa:	6944      	ldr	r4, [r0, #20]
 801ecfc:	b3bc      	cbz	r4, 801ed6e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801ecfe:	88a3      	ldrh	r3, [r4, #4]
 801ed00:	8b02      	ldrh	r2, [r0, #24]
 801ed02:	1acb      	subs	r3, r1, r3
 801ed04:	f102 32ff 	add.w	r2, r2, #4294967295
 801ed08:	d431      	bmi.n	801ed6e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801ed0a:	4293      	cmp	r3, r2
 801ed0c:	dd0c      	ble.n	801ed28 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801ed0e:	230e      	movs	r3, #14
 801ed10:	fb03 4302 	mla	r3, r3, r2, r4
 801ed14:	889b      	ldrh	r3, [r3, #4]
 801ed16:	1a5b      	subs	r3, r3, r1
 801ed18:	1ad3      	subs	r3, r2, r3
 801ed1a:	429a      	cmp	r2, r3
 801ed1c:	db27      	blt.n	801ed6e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801ed1e:	2b00      	cmp	r3, #0
 801ed20:	bfbc      	itt	lt
 801ed22:	2302      	movlt	r3, #2
 801ed24:	fb92 f3f3 	sdivlt	r3, r2, r3
 801ed28:	2500      	movs	r5, #0
 801ed2a:	260e      	movs	r6, #14
 801ed2c:	4295      	cmp	r5, r2
 801ed2e:	dc1e      	bgt.n	801ed6e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801ed30:	fb06 4003 	mla	r0, r6, r3, r4
 801ed34:	8887      	ldrh	r7, [r0, #4]
 801ed36:	42b9      	cmp	r1, r7
 801ed38:	d01a      	beq.n	801ed70 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 801ed3a:	d20d      	bcs.n	801ed58 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 801ed3c:	1e5a      	subs	r2, r3, #1
 801ed3e:	4295      	cmp	r5, r2
 801ed40:	dc15      	bgt.n	801ed6e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801ed42:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 801ed46:	1a5b      	subs	r3, r3, r1
 801ed48:	1ad3      	subs	r3, r2, r3
 801ed4a:	429a      	cmp	r2, r3
 801ed4c:	db0f      	blt.n	801ed6e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801ed4e:	429d      	cmp	r5, r3
 801ed50:	ddec      	ble.n	801ed2c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801ed52:	1953      	adds	r3, r2, r5
 801ed54:	105b      	asrs	r3, r3, #1
 801ed56:	e7e9      	b.n	801ed2c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801ed58:	1c5d      	adds	r5, r3, #1
 801ed5a:	42aa      	cmp	r2, r5
 801ed5c:	db07      	blt.n	801ed6e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801ed5e:	8a43      	ldrh	r3, [r0, #18]
 801ed60:	1acb      	subs	r3, r1, r3
 801ed62:	442b      	add	r3, r5
 801ed64:	429d      	cmp	r5, r3
 801ed66:	dc02      	bgt.n	801ed6e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801ed68:	429a      	cmp	r2, r3
 801ed6a:	dadf      	bge.n	801ed2c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801ed6c:	e7f1      	b.n	801ed52 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 801ed6e:	2000      	movs	r0, #0
 801ed70:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801ed72 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801ed72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ed74:	4604      	mov	r4, r0
 801ed76:	4617      	mov	r7, r2
 801ed78:	461e      	mov	r6, r3
 801ed7a:	b911      	cbnz	r1, 801ed82 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801ed7c:	2500      	movs	r5, #0
 801ed7e:	4628      	mov	r0, r5
 801ed80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ed82:	290a      	cmp	r1, #10
 801ed84:	d0fa      	beq.n	801ed7c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801ed86:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801ed8a:	4291      	cmp	r1, r2
 801ed8c:	d0f6      	beq.n	801ed7c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801ed8e:	f242 020b 	movw	r2, #8203	; 0x200b
 801ed92:	4291      	cmp	r1, r2
 801ed94:	d0f2      	beq.n	801ed7c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801ed96:	f7ff ffaf 	bl	801ecf8 <_ZNK8touchgfx9ConstFont4findEt>
 801ed9a:	4605      	mov	r5, r0
 801ed9c:	b950      	cbnz	r0, 801edb4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 801ed9e:	6823      	ldr	r3, [r4, #0]
 801eda0:	4620      	mov	r0, r4
 801eda2:	691b      	ldr	r3, [r3, #16]
 801eda4:	4798      	blx	r3
 801eda6:	4601      	mov	r1, r0
 801eda8:	4620      	mov	r0, r4
 801edaa:	f7ff ffa5 	bl	801ecf8 <_ZNK8touchgfx9ConstFont4findEt>
 801edae:	4605      	mov	r5, r0
 801edb0:	2800      	cmp	r0, #0
 801edb2:	d0e3      	beq.n	801ed7c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801edb4:	6823      	ldr	r3, [r4, #0]
 801edb6:	4629      	mov	r1, r5
 801edb8:	4620      	mov	r0, r4
 801edba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801edbc:	4798      	blx	r3
 801edbe:	6038      	str	r0, [r7, #0]
 801edc0:	6823      	ldr	r3, [r4, #0]
 801edc2:	4620      	mov	r0, r4
 801edc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801edc6:	4798      	blx	r3
 801edc8:	7030      	strb	r0, [r6, #0]
 801edca:	e7d8      	b.n	801ed7e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0801edcc <_ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE>:
 801edcc:	b538      	push	{r3, r4, r5, lr}
 801edce:	4605      	mov	r5, r0
 801edd0:	f001 fd96 	bl	8020900 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801edd4:	4604      	mov	r4, r0
 801edd6:	4628      	mov	r0, r5
 801edd8:	f001 fcd6 	bl	8020788 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801eddc:	2800      	cmp	r0, #0
 801edde:	bf14      	ite	ne
 801ede0:	2002      	movne	r0, #2
 801ede2:	2000      	moveq	r0, #0
 801ede4:	ea40 0084 	orr.w	r0, r0, r4, lsl #2
 801ede8:	b280      	uxth	r0, r0
 801edea:	bd38      	pop	{r3, r4, r5, pc}

0801edec <_ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE>:
 801edec:	b538      	push	{r3, r4, r5, lr}
 801edee:	4605      	mov	r5, r0
 801edf0:	f001 fd86 	bl	8020900 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801edf4:	4604      	mov	r4, r0
 801edf6:	4628      	mov	r0, r5
 801edf8:	f001 fcc6 	bl	8020788 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801edfc:	2800      	cmp	r0, #0
 801edfe:	bf14      	ite	ne
 801ee00:	2002      	movne	r0, #2
 801ee02:	2000      	moveq	r0, #0
 801ee04:	ea40 0084 	orr.w	r0, r0, r4, lsl #2
 801ee08:	f040 0001 	orr.w	r0, r0, #1
 801ee0c:	b280      	uxth	r0, r0
 801ee0e:	bd38      	pop	{r3, r4, r5, pc}

0801ee10 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 801ee10:	2000      	movs	r0, #0
 801ee12:	4770      	bx	lr

0801ee14 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 801ee14:	2001      	movs	r0, #1
 801ee16:	4770      	bx	lr

0801ee18 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 801ee18:	2002      	movs	r0, #2
 801ee1a:	4770      	bx	lr

0801ee1c <_ZN8touchgfx12GestureEventD1Ev>:
 801ee1c:	4770      	bx	lr

0801ee1e <_ZN8touchgfx9DragEventD1Ev>:
 801ee1e:	4770      	bx	lr

0801ee20 <_ZN8touchgfx10ClickEventD1Ev>:
 801ee20:	4770      	bx	lr

0801ee22 <_ZN8touchgfx10ClickEventD0Ev>:
 801ee22:	b510      	push	{r4, lr}
 801ee24:	4604      	mov	r4, r0
 801ee26:	210c      	movs	r1, #12
 801ee28:	f009 fd03 	bl	8028832 <_ZdlPvj>
 801ee2c:	4620      	mov	r0, r4
 801ee2e:	bd10      	pop	{r4, pc}

0801ee30 <_ZN8touchgfx9DragEventD0Ev>:
 801ee30:	b510      	push	{r4, lr}
 801ee32:	4604      	mov	r4, r0
 801ee34:	2110      	movs	r1, #16
 801ee36:	f009 fcfc 	bl	8028832 <_ZdlPvj>
 801ee3a:	4620      	mov	r0, r4
 801ee3c:	bd10      	pop	{r4, pc}

0801ee3e <_ZN8touchgfx12GestureEventD0Ev>:
 801ee3e:	b510      	push	{r4, lr}
 801ee40:	4604      	mov	r4, r0
 801ee42:	210c      	movs	r1, #12
 801ee44:	f009 fcf5 	bl	8028832 <_ZdlPvj>
 801ee48:	4620      	mov	r0, r4
 801ee4a:	bd10      	pop	{r4, pc}

0801ee4c <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 801ee4c:	b530      	push	{r4, r5, lr}
 801ee4e:	460d      	mov	r5, r1
 801ee50:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801ee52:	b087      	sub	sp, #28
 801ee54:	4604      	mov	r4, r0
 801ee56:	b301      	cbz	r1, 801ee9a <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801ee58:	a801      	add	r0, sp, #4
 801ee5a:	f7ff ff13 	bl	801ec84 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801ee5e:	892a      	ldrh	r2, [r5, #8]
 801ee60:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801ee64:	7928      	ldrb	r0, [r5, #4]
 801ee66:	1ad2      	subs	r2, r2, r3
 801ee68:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801ee6a:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801ee6e:	441a      	add	r2, r3
 801ee70:	896b      	ldrh	r3, [r5, #10]
 801ee72:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801ee76:	f88d 0010 	strb.w	r0, [sp, #16]
 801ee7a:	1b5b      	subs	r3, r3, r5
 801ee7c:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 801ee7e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801ee80:	442b      	add	r3, r5
 801ee82:	4d07      	ldr	r5, [pc, #28]	; (801eea0 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801ee84:	f8ad 1012 	strh.w	r1, [sp, #18]
 801ee88:	a903      	add	r1, sp, #12
 801ee8a:	9503      	str	r5, [sp, #12]
 801ee8c:	f8ad 2014 	strh.w	r2, [sp, #20]
 801ee90:	f8ad 3016 	strh.w	r3, [sp, #22]
 801ee94:	6803      	ldr	r3, [r0, #0]
 801ee96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801ee98:	4798      	blx	r3
 801ee9a:	b007      	add	sp, #28
 801ee9c:	bd30      	pop	{r4, r5, pc}
 801ee9e:	bf00      	nop
 801eea0:	0802d788 	.word	0x0802d788

0801eea4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801eea4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801eea8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801eeaa:	b08a      	sub	sp, #40	; 0x28
 801eeac:	4604      	mov	r4, r0
 801eeae:	460d      	mov	r5, r1
 801eeb0:	b113      	cbz	r3, 801eeb8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 801eeb2:	790b      	ldrb	r3, [r1, #4]
 801eeb4:	2b00      	cmp	r3, #0
 801eeb6:	d044      	beq.n	801ef42 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801eeb8:	f104 0804 	add.w	r8, r4, #4
 801eebc:	a803      	add	r0, sp, #12
 801eebe:	4641      	mov	r1, r8
 801eec0:	f7ff fee0 	bl	801ec84 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801eec4:	792b      	ldrb	r3, [r5, #4]
 801eec6:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801eeca:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 801eece:	b983      	cbnz	r3, 801eef2 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 801eed0:	f104 0336 	add.w	r3, r4, #54	; 0x36
 801eed4:	892a      	ldrh	r2, [r5, #8]
 801eed6:	88e9      	ldrh	r1, [r5, #6]
 801eed8:	4640      	mov	r0, r8
 801eeda:	1b92      	subs	r2, r2, r6
 801eedc:	9301      	str	r3, [sp, #4]
 801eede:	1bc9      	subs	r1, r1, r7
 801eee0:	f104 0334 	add.w	r3, r4, #52	; 0x34
 801eee4:	b212      	sxth	r2, r2
 801eee6:	9300      	str	r3, [sp, #0]
 801eee8:	b209      	sxth	r1, r1
 801eeea:	f104 0330 	add.w	r3, r4, #48	; 0x30
 801eeee:	f7fb f959 	bl	801a1a4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 801eef2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801eef4:	b329      	cbz	r1, 801ef42 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801eef6:	a805      	add	r0, sp, #20
 801eef8:	f7ff fec4 	bl	801ec84 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801eefc:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801ef00:	792b      	ldrb	r3, [r5, #4]
 801ef02:	a907      	add	r1, sp, #28
 801ef04:	1abf      	subs	r7, r7, r2
 801ef06:	88ea      	ldrh	r2, [r5, #6]
 801ef08:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801ef0a:	4417      	add	r7, r2
 801ef0c:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 801ef0e:	f88d 3020 	strb.w	r3, [sp, #32]
 801ef12:	4417      	add	r7, r2
 801ef14:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801ef18:	1ab6      	subs	r6, r6, r2
 801ef1a:	892a      	ldrh	r2, [r5, #8]
 801ef1c:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 801ef20:	4416      	add	r6, r2
 801ef22:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801ef24:	4416      	add	r6, r2
 801ef26:	4a08      	ldr	r2, [pc, #32]	; (801ef48 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 801ef28:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 801ef2c:	2600      	movs	r6, #0
 801ef2e:	9207      	str	r2, [sp, #28]
 801ef30:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 801ef34:	6803      	ldr	r3, [r0, #0]
 801ef36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ef38:	4798      	blx	r3
 801ef3a:	792b      	ldrb	r3, [r5, #4]
 801ef3c:	b10b      	cbz	r3, 801ef42 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801ef3e:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 801ef42:	b00a      	add	sp, #40	; 0x28
 801ef44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ef48:	0802d760 	.word	0x0802d760

0801ef4c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801ef4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ef50:	460c      	mov	r4, r1
 801ef52:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801ef54:	b088      	sub	sp, #32
 801ef56:	4605      	mov	r5, r0
 801ef58:	2900      	cmp	r1, #0
 801ef5a:	d06d      	beq.n	801f038 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 801ef5c:	4668      	mov	r0, sp
 801ef5e:	f7ff fe91 	bl	801ec84 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801ef62:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 801ef64:	88e3      	ldrh	r3, [r4, #6]
 801ef66:	f9bd 8000 	ldrsh.w	r8, [sp]
 801ef6a:	440b      	add	r3, r1
 801ef6c:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 801ef70:	b21b      	sxth	r3, r3
 801ef72:	4543      	cmp	r3, r8
 801ef74:	db31      	blt.n	801efda <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801ef76:	f8bd c004 	ldrh.w	ip, [sp, #4]
 801ef7a:	44c4      	add	ip, r8
 801ef7c:	fa0f fc8c 	sxth.w	ip, ip
 801ef80:	4563      	cmp	r3, ip
 801ef82:	da2a      	bge.n	801efda <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801ef84:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 801ef86:	8926      	ldrh	r6, [r4, #8]
 801ef88:	4416      	add	r6, r2
 801ef8a:	b236      	sxth	r6, r6
 801ef8c:	42be      	cmp	r6, r7
 801ef8e:	db24      	blt.n	801efda <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801ef90:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801ef94:	4438      	add	r0, r7
 801ef96:	b200      	sxth	r0, r0
 801ef98:	4286      	cmp	r6, r0
 801ef9a:	da1e      	bge.n	801efda <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801ef9c:	8963      	ldrh	r3, [r4, #10]
 801ef9e:	4419      	add	r1, r3
 801efa0:	b209      	sxth	r1, r1
 801efa2:	4541      	cmp	r1, r8
 801efa4:	db08      	blt.n	801efb8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801efa6:	4561      	cmp	r1, ip
 801efa8:	da06      	bge.n	801efb8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801efaa:	89a3      	ldrh	r3, [r4, #12]
 801efac:	441a      	add	r2, r3
 801efae:	b212      	sxth	r2, r2
 801efb0:	42ba      	cmp	r2, r7
 801efb2:	db01      	blt.n	801efb8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801efb4:	4282      	cmp	r2, r0
 801efb6:	db10      	blt.n	801efda <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801efb8:	4b21      	ldr	r3, [pc, #132]	; (801f040 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 801efba:	a904      	add	r1, sp, #16
 801efbc:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801efbe:	9304      	str	r3, [sp, #16]
 801efc0:	2302      	movs	r3, #2
 801efc2:	f88d 3014 	strb.w	r3, [sp, #20]
 801efc6:	2300      	movs	r3, #0
 801efc8:	f8ad 3016 	strh.w	r3, [sp, #22]
 801efcc:	f8ad 3018 	strh.w	r3, [sp, #24]
 801efd0:	f8ad 301a 	strh.w	r3, [sp, #26]
 801efd4:	6803      	ldr	r3, [r0, #0]
 801efd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801efd8:	4798      	blx	r3
 801efda:	1d29      	adds	r1, r5, #4
 801efdc:	a802      	add	r0, sp, #8
 801efde:	f7ff fe51 	bl	801ec84 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801efe2:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801efe6:	88e0      	ldrh	r0, [r4, #6]
 801efe8:	eba3 0808 	sub.w	r8, r3, r8
 801efec:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801eff0:	7921      	ldrb	r1, [r4, #4]
 801eff2:	fa1f f888 	uxth.w	r8, r8
 801eff6:	1bdf      	subs	r7, r3, r7
 801eff8:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 801effc:	b2bb      	uxth	r3, r7
 801effe:	4440      	add	r0, r8
 801f000:	8922      	ldrh	r2, [r4, #8]
 801f002:	8967      	ldrh	r7, [r4, #10]
 801f004:	4460      	add	r0, ip
 801f006:	89a4      	ldrh	r4, [r4, #12]
 801f008:	441a      	add	r2, r3
 801f00a:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 801f00c:	44b8      	add	r8, r7
 801f00e:	4423      	add	r3, r4
 801f010:	f8ad 0016 	strh.w	r0, [sp, #22]
 801f014:	4432      	add	r2, r6
 801f016:	44e0      	add	r8, ip
 801f018:	4433      	add	r3, r6
 801f01a:	4c0a      	ldr	r4, [pc, #40]	; (801f044 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 801f01c:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801f01e:	f88d 1014 	strb.w	r1, [sp, #20]
 801f022:	a904      	add	r1, sp, #16
 801f024:	9404      	str	r4, [sp, #16]
 801f026:	f8ad 2018 	strh.w	r2, [sp, #24]
 801f02a:	f8ad 801a 	strh.w	r8, [sp, #26]
 801f02e:	f8ad 301c 	strh.w	r3, [sp, #28]
 801f032:	6803      	ldr	r3, [r0, #0]
 801f034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801f036:	4798      	blx	r3
 801f038:	b008      	add	sp, #32
 801f03a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f03e:	bf00      	nop
 801f040:	0802d760 	.word	0x0802d760
 801f044:	0802d774 	.word	0x0802d774

0801f048 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801f048:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801f04a:	4604      	mov	r4, r0
 801f04c:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801f050:	3201      	adds	r2, #1
 801f052:	d112      	bne.n	801f07a <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 801f054:	2500      	movs	r5, #0
 801f056:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801f05a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801f05e:	6803      	ldr	r3, [r0, #0]
 801f060:	9500      	str	r5, [sp, #0]
 801f062:	466d      	mov	r5, sp
 801f064:	f8ad 1004 	strh.w	r1, [sp, #4]
 801f068:	f8ad 2006 	strh.w	r2, [sp, #6]
 801f06c:	4629      	mov	r1, r5
 801f06e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f070:	4798      	blx	r3
 801f072:	e895 0003 	ldmia.w	r5, {r0, r1}
 801f076:	e884 0003 	stmia.w	r4, {r0, r1}
 801f07a:	4620      	mov	r0, r4
 801f07c:	b003      	add	sp, #12
 801f07e:	bd30      	pop	{r4, r5, pc}

0801f080 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801f080:	b513      	push	{r0, r1, r4, lr}
 801f082:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801f086:	4604      	mov	r4, r0
 801f088:	3301      	adds	r3, #1
 801f08a:	d109      	bne.n	801f0a0 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801f08c:	4601      	mov	r1, r0
 801f08e:	4668      	mov	r0, sp
 801f090:	f7ff fdf8 	bl	801ec84 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801f094:	f8bd 3000 	ldrh.w	r3, [sp]
 801f098:	8423      	strh	r3, [r4, #32]
 801f09a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801f09e:	8463      	strh	r3, [r4, #34]	; 0x22
 801f0a0:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801f0a4:	b002      	add	sp, #8
 801f0a6:	bd10      	pop	{r4, pc}

0801f0a8 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801f0a8:	b513      	push	{r0, r1, r4, lr}
 801f0aa:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 801f0ae:	4604      	mov	r4, r0
 801f0b0:	3301      	adds	r3, #1
 801f0b2:	d109      	bne.n	801f0c8 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801f0b4:	4601      	mov	r1, r0
 801f0b6:	4668      	mov	r0, sp
 801f0b8:	f7ff fde4 	bl	801ec84 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801f0bc:	f8bd 3000 	ldrh.w	r3, [sp]
 801f0c0:	8423      	strh	r3, [r4, #32]
 801f0c2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801f0c6:	8463      	strh	r3, [r4, #34]	; 0x22
 801f0c8:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 801f0cc:	b002      	add	sp, #8
 801f0ce:	bd10      	pop	{r4, pc}

0801f0d0 <_ZN8touchgfx6ScreenC1Ev>:
 801f0d0:	b570      	push	{r4, r5, r6, lr}
 801f0d2:	4b17      	ldr	r3, [pc, #92]	; (801f130 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 801f0d4:	4605      	mov	r5, r0
 801f0d6:	4a17      	ldr	r2, [pc, #92]	; (801f134 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 801f0d8:	2101      	movs	r1, #1
 801f0da:	f845 3b04 	str.w	r3, [r5], #4
 801f0de:	2300      	movs	r3, #0
 801f0e0:	6042      	str	r2, [r0, #4]
 801f0e2:	4604      	mov	r4, r0
 801f0e4:	8103      	strh	r3, [r0, #8]
 801f0e6:	8143      	strh	r3, [r0, #10]
 801f0e8:	8183      	strh	r3, [r0, #12]
 801f0ea:	81c3      	strh	r3, [r0, #14]
 801f0ec:	8203      	strh	r3, [r0, #16]
 801f0ee:	8243      	strh	r3, [r0, #18]
 801f0f0:	8283      	strh	r3, [r0, #20]
 801f0f2:	82c3      	strh	r3, [r0, #22]
 801f0f4:	6203      	str	r3, [r0, #32]
 801f0f6:	8483      	strh	r3, [r0, #36]	; 0x24
 801f0f8:	84c3      	strh	r3, [r0, #38]	; 0x26
 801f0fa:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 801f0fe:	6343      	str	r3, [r0, #52]	; 0x34
 801f100:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 801f104:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 801f108:	e9c0 3306 	strd	r3, r3, [r0, #24]
 801f10c:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 801f110:	4b09      	ldr	r3, [pc, #36]	; (801f138 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801f112:	4628      	mov	r0, r5
 801f114:	f9b3 6000 	ldrsh.w	r6, [r3]
 801f118:	6b93      	ldr	r3, [r2, #56]	; 0x38
 801f11a:	4a08      	ldr	r2, [pc, #32]	; (801f13c <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801f11c:	f9b2 1000 	ldrsh.w	r1, [r2]
 801f120:	4798      	blx	r3
 801f122:	6863      	ldr	r3, [r4, #4]
 801f124:	4628      	mov	r0, r5
 801f126:	4631      	mov	r1, r6
 801f128:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801f12a:	4798      	blx	r3
 801f12c:	4620      	mov	r0, r4
 801f12e:	bd70      	pop	{r4, r5, r6, pc}
 801f130:	0802d79c 	.word	0x0802d79c
 801f134:	0802d234 	.word	0x0802d234
 801f138:	24026236 	.word	0x24026236
 801f13c:	24026234 	.word	0x24026234

0801f140 <_ZN8touchgfx6Screen4drawEv>:
 801f140:	4b09      	ldr	r3, [pc, #36]	; (801f168 <_ZN8touchgfx6Screen4drawEv+0x28>)
 801f142:	b507      	push	{r0, r1, r2, lr}
 801f144:	f9b3 2000 	ldrsh.w	r2, [r3]
 801f148:	2100      	movs	r1, #0
 801f14a:	4b08      	ldr	r3, [pc, #32]	; (801f16c <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801f14c:	9100      	str	r1, [sp, #0]
 801f14e:	4669      	mov	r1, sp
 801f150:	f9b3 3000 	ldrsh.w	r3, [r3]
 801f154:	f8ad 2004 	strh.w	r2, [sp, #4]
 801f158:	f8ad 3006 	strh.w	r3, [sp, #6]
 801f15c:	6803      	ldr	r3, [r0, #0]
 801f15e:	689b      	ldr	r3, [r3, #8]
 801f160:	4798      	blx	r3
 801f162:	b003      	add	sp, #12
 801f164:	f85d fb04 	ldr.w	pc, [sp], #4
 801f168:	24026234 	.word	0x24026234
 801f16c:	24026236 	.word	0x24026236

0801f170 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801f170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f174:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801f178:	b089      	sub	sp, #36	; 0x24
 801f17a:	4680      	mov	r8, r0
 801f17c:	460c      	mov	r4, r1
 801f17e:	2b00      	cmp	r3, #0
 801f180:	4615      	mov	r5, r2
 801f182:	dd0e      	ble.n	801f1a2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801f184:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801f188:	2b00      	cmp	r3, #0
 801f18a:	dd0a      	ble.n	801f1a2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801f18c:	4628      	mov	r0, r5
 801f18e:	f7ff ff5b 	bl	801f048 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801f192:	4621      	mov	r1, r4
 801f194:	f7fe fb90 	bl	801d8b8 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801f198:	69eb      	ldr	r3, [r5, #28]
 801f19a:	b928      	cbnz	r0, 801f1a8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 801f19c:	461d      	mov	r5, r3
 801f19e:	2b00      	cmp	r3, #0
 801f1a0:	d1f4      	bne.n	801f18c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 801f1a2:	b009      	add	sp, #36	; 0x24
 801f1a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f1a8:	ae04      	add	r6, sp, #16
 801f1aa:	2b00      	cmp	r3, #0
 801f1ac:	f000 80b5 	beq.w	801f31a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801f1b0:	682b      	ldr	r3, [r5, #0]
 801f1b2:	4629      	mov	r1, r5
 801f1b4:	a802      	add	r0, sp, #8
 801f1b6:	68db      	ldr	r3, [r3, #12]
 801f1b8:	4798      	blx	r3
 801f1ba:	4628      	mov	r0, r5
 801f1bc:	f7ff ff60 	bl	801f080 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801f1c0:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801f1c4:	4407      	add	r7, r0
 801f1c6:	4628      	mov	r0, r5
 801f1c8:	f7ff ff6e 	bl	801f0a8 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801f1cc:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801f1d0:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801f1d4:	b23f      	sxth	r7, r7
 801f1d6:	4418      	add	r0, r3
 801f1d8:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801f1dc:	4621      	mov	r1, r4
 801f1de:	f8ad 2014 	strh.w	r2, [sp, #20]
 801f1e2:	f8ad 0012 	strh.w	r0, [sp, #18]
 801f1e6:	4630      	mov	r0, r6
 801f1e8:	f8ad 3016 	strh.w	r3, [sp, #22]
 801f1ec:	f8ad 7010 	strh.w	r7, [sp, #16]
 801f1f0:	f7fb f8ba 	bl	801a368 <_ZN8touchgfx4RectaNERKS0_>
 801f1f4:	4628      	mov	r0, r5
 801f1f6:	f7ff ff27 	bl	801f048 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801f1fa:	ab06      	add	r3, sp, #24
 801f1fc:	4602      	mov	r2, r0
 801f1fe:	e896 0003 	ldmia.w	r6, {r0, r1}
 801f202:	e883 0003 	stmia.w	r3, {r0, r1}
 801f206:	4611      	mov	r1, r2
 801f208:	4618      	mov	r0, r3
 801f20a:	f7fb f8ad 	bl	801a368 <_ZN8touchgfx4RectaNERKS0_>
 801f20e:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801f212:	f9b4 1000 	ldrsh.w	r1, [r4]
 801f216:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801f21a:	4299      	cmp	r1, r3
 801f21c:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 801f220:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801f224:	d10b      	bne.n	801f23e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801f226:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801f22a:	4552      	cmp	r2, sl
 801f22c:	d107      	bne.n	801f23e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801f22e:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801f232:	455a      	cmp	r2, fp
 801f234:	d103      	bne.n	801f23e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801f236:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801f23a:	454a      	cmp	r2, r9
 801f23c:	d06d      	beq.n	801f31a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801f23e:	f1bb 0f00 	cmp.w	fp, #0
 801f242:	dd65      	ble.n	801f310 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801f244:	f1b9 0f00 	cmp.w	r9, #0
 801f248:	dd62      	ble.n	801f310 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801f24a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801f24e:	fa1f f08a 	uxth.w	r0, sl
 801f252:	4552      	cmp	r2, sl
 801f254:	9000      	str	r0, [sp, #0]
 801f256:	da12      	bge.n	801f27e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 801f258:	9301      	str	r3, [sp, #4]
 801f25a:	9b00      	ldr	r3, [sp, #0]
 801f25c:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801f260:	f8ad 2012 	strh.w	r2, [sp, #18]
 801f264:	1a9a      	subs	r2, r3, r2
 801f266:	f8ad 1010 	strh.w	r1, [sp, #16]
 801f26a:	4631      	mov	r1, r6
 801f26c:	f8ad 0014 	strh.w	r0, [sp, #20]
 801f270:	4640      	mov	r0, r8
 801f272:	f8ad 2016 	strh.w	r2, [sp, #22]
 801f276:	69ea      	ldr	r2, [r5, #28]
 801f278:	f7ff ff7a 	bl	801f170 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801f27c:	9b01      	ldr	r3, [sp, #4]
 801f27e:	f9b4 2000 	ldrsh.w	r2, [r4]
 801f282:	b29f      	uxth	r7, r3
 801f284:	429a      	cmp	r2, r3
 801f286:	da0d      	bge.n	801f2a4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 801f288:	f8ad 2010 	strh.w	r2, [sp, #16]
 801f28c:	1aba      	subs	r2, r7, r2
 801f28e:	f8ad a012 	strh.w	sl, [sp, #18]
 801f292:	4631      	mov	r1, r6
 801f294:	f8ad 2014 	strh.w	r2, [sp, #20]
 801f298:	4640      	mov	r0, r8
 801f29a:	f8ad 9016 	strh.w	r9, [sp, #22]
 801f29e:	69ea      	ldr	r2, [r5, #28]
 801f2a0:	f7ff ff66 	bl	801f170 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801f2a4:	8822      	ldrh	r2, [r4, #0]
 801f2a6:	445f      	add	r7, fp
 801f2a8:	88a3      	ldrh	r3, [r4, #4]
 801f2aa:	b2bf      	uxth	r7, r7
 801f2ac:	4413      	add	r3, r2
 801f2ae:	b23a      	sxth	r2, r7
 801f2b0:	b29b      	uxth	r3, r3
 801f2b2:	b219      	sxth	r1, r3
 801f2b4:	4291      	cmp	r1, r2
 801f2b6:	dd0d      	ble.n	801f2d4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 801f2b8:	1bdb      	subs	r3, r3, r7
 801f2ba:	f8ad 2010 	strh.w	r2, [sp, #16]
 801f2be:	f8ad a012 	strh.w	sl, [sp, #18]
 801f2c2:	4631      	mov	r1, r6
 801f2c4:	f8ad 3014 	strh.w	r3, [sp, #20]
 801f2c8:	4640      	mov	r0, r8
 801f2ca:	f8ad 9016 	strh.w	r9, [sp, #22]
 801f2ce:	69ea      	ldr	r2, [r5, #28]
 801f2d0:	f7ff ff4e 	bl	801f170 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801f2d4:	88e2      	ldrh	r2, [r4, #6]
 801f2d6:	8863      	ldrh	r3, [r4, #2]
 801f2d8:	4413      	add	r3, r2
 801f2da:	9a00      	ldr	r2, [sp, #0]
 801f2dc:	444a      	add	r2, r9
 801f2de:	b29b      	uxth	r3, r3
 801f2e0:	fa1f f982 	uxth.w	r9, r2
 801f2e4:	b219      	sxth	r1, r3
 801f2e6:	fa0f f289 	sxth.w	r2, r9
 801f2ea:	428a      	cmp	r2, r1
 801f2ec:	da15      	bge.n	801f31a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801f2ee:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801f2f2:	eba3 0309 	sub.w	r3, r3, r9
 801f2f6:	f9b4 0000 	ldrsh.w	r0, [r4]
 801f2fa:	f8ad 1014 	strh.w	r1, [sp, #20]
 801f2fe:	4631      	mov	r1, r6
 801f300:	f8ad 0010 	strh.w	r0, [sp, #16]
 801f304:	f8ad 2012 	strh.w	r2, [sp, #18]
 801f308:	f8ad 3016 	strh.w	r3, [sp, #22]
 801f30c:	69ea      	ldr	r2, [r5, #28]
 801f30e:	e001      	b.n	801f314 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 801f310:	69ea      	ldr	r2, [r5, #28]
 801f312:	4621      	mov	r1, r4
 801f314:	4640      	mov	r0, r8
 801f316:	f7ff ff2b 	bl	801f170 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801f31a:	4628      	mov	r0, r5
 801f31c:	f7ff fe94 	bl	801f048 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801f320:	6861      	ldr	r1, [r4, #4]
 801f322:	4602      	mov	r2, r0
 801f324:	4633      	mov	r3, r6
 801f326:	6820      	ldr	r0, [r4, #0]
 801f328:	c303      	stmia	r3!, {r0, r1}
 801f32a:	4611      	mov	r1, r2
 801f32c:	4630      	mov	r0, r6
 801f32e:	f7fb f81b 	bl	801a368 <_ZN8touchgfx4RectaNERKS0_>
 801f332:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801f336:	2b00      	cmp	r3, #0
 801f338:	f77f af33 	ble.w	801f1a2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801f33c:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801f340:	2b00      	cmp	r3, #0
 801f342:	f77f af2e 	ble.w	801f1a2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801f346:	4628      	mov	r0, r5
 801f348:	f7ff fe9a 	bl	801f080 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801f34c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801f350:	1a18      	subs	r0, r3, r0
 801f352:	f8ad 0010 	strh.w	r0, [sp, #16]
 801f356:	4628      	mov	r0, r5
 801f358:	f7ff fea6 	bl	801f0a8 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801f35c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801f360:	4631      	mov	r1, r6
 801f362:	1a18      	subs	r0, r3, r0
 801f364:	f8ad 0012 	strh.w	r0, [sp, #18]
 801f368:	4628      	mov	r0, r5
 801f36a:	682b      	ldr	r3, [r5, #0]
 801f36c:	689b      	ldr	r3, [r3, #8]
 801f36e:	4798      	blx	r3
 801f370:	e717      	b.n	801f1a2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0801f372 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801f372:	b570      	push	{r4, r5, r6, lr}
 801f374:	1d06      	adds	r6, r0, #4
 801f376:	b086      	sub	sp, #24
 801f378:	460c      	mov	r4, r1
 801f37a:	2300      	movs	r3, #0
 801f37c:	4631      	mov	r1, r6
 801f37e:	4605      	mov	r5, r0
 801f380:	a802      	add	r0, sp, #8
 801f382:	9301      	str	r3, [sp, #4]
 801f384:	f7ff fc7e 	bl	801ec84 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801f388:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801f38c:	8822      	ldrh	r2, [r4, #0]
 801f38e:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 801f392:	1ad2      	subs	r2, r2, r3
 801f394:	8863      	ldrh	r3, [r4, #2]
 801f396:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801f39a:	1a5b      	subs	r3, r3, r1
 801f39c:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801f3a0:	f8ad 2010 	strh.w	r2, [sp, #16]
 801f3a4:	aa01      	add	r2, sp, #4
 801f3a6:	f8ad 0014 	strh.w	r0, [sp, #20]
 801f3aa:	4630      	mov	r0, r6
 801f3ac:	f8ad 1016 	strh.w	r1, [sp, #22]
 801f3b0:	a904      	add	r1, sp, #16
 801f3b2:	f8ad 3012 	strh.w	r3, [sp, #18]
 801f3b6:	f7fb f8af 	bl	801a518 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801f3ba:	9a01      	ldr	r2, [sp, #4]
 801f3bc:	b11a      	cbz	r2, 801f3c6 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 801f3be:	4621      	mov	r1, r4
 801f3c0:	4628      	mov	r0, r5
 801f3c2:	f7ff fed5 	bl	801f170 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801f3c6:	b006      	add	sp, #24
 801f3c8:	bd70      	pop	{r4, r5, r6, pc}

0801f3ca <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801f3ca:	4602      	mov	r2, r0
 801f3cc:	b530      	push	{r4, r5, lr}
 801f3ce:	4604      	mov	r4, r0
 801f3d0:	b085      	sub	sp, #20
 801f3d2:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801f3d6:	460d      	mov	r5, r1
 801f3d8:	466b      	mov	r3, sp
 801f3da:	6851      	ldr	r1, [r2, #4]
 801f3dc:	c303      	stmia	r3!, {r0, r1}
 801f3de:	4629      	mov	r1, r5
 801f3e0:	4668      	mov	r0, sp
 801f3e2:	f7fa ffc1 	bl	801a368 <_ZN8touchgfx4RectaNERKS0_>
 801f3e6:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801f3ea:	b12b      	cbz	r3, 801f3f8 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 801f3ec:	4669      	mov	r1, sp
 801f3ee:	4620      	mov	r0, r4
 801f3f0:	f7ff ffbf 	bl	801f372 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801f3f4:	b005      	add	sp, #20
 801f3f6:	bd30      	pop	{r4, r5, pc}
 801f3f8:	3404      	adds	r4, #4
 801f3fa:	a802      	add	r0, sp, #8
 801f3fc:	4621      	mov	r1, r4
 801f3fe:	f7ff fc41 	bl	801ec84 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801f402:	f8bd 3000 	ldrh.w	r3, [sp]
 801f406:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801f40a:	4669      	mov	r1, sp
 801f40c:	4620      	mov	r0, r4
 801f40e:	1a9b      	subs	r3, r3, r2
 801f410:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801f414:	f8ad 3000 	strh.w	r3, [sp]
 801f418:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801f41c:	1a9b      	subs	r3, r3, r2
 801f41e:	f8ad 3002 	strh.w	r3, [sp, #2]
 801f422:	f7fb f840 	bl	801a4a6 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801f426:	e7e5      	b.n	801f3f4 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

0801f428 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801f428:	460b      	mov	r3, r1
 801f42a:	680a      	ldr	r2, [r1, #0]
 801f42c:	1d01      	adds	r1, r0, #4
 801f42e:	6992      	ldr	r2, [r2, #24]
 801f430:	4618      	mov	r0, r3
 801f432:	4710      	bx	r2

0801f434 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>:
 801f434:	4298      	cmp	r0, r3
 801f436:	d200      	bcs.n	801f43a <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x6>
 801f438:	b913      	cbnz	r3, 801f440 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0xc>
 801f43a:	440a      	add	r2, r1
 801f43c:	b210      	sxth	r0, r2
 801f43e:	4770      	bx	lr
 801f440:	ee07 0a90 	vmov	s15, r0
 801f444:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f448:	ee07 3a90 	vmov	s15, r3
 801f44c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f450:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f454:	ee07 2a90 	vmov	s15, r2
 801f458:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f45c:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 801f460:	ee07 1a90 	vmov	s15, r1
 801f464:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f468:	ee37 7a66 	vsub.f32	s14, s14, s13
 801f46c:	ee67 5a07 	vmul.f32	s11, s14, s14
 801f470:	eee5 6a87 	vfma.f32	s13, s11, s14
 801f474:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801f478:	eee6 7a26 	vfma.f32	s15, s12, s13
 801f47c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801f480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f484:	bfcc      	ite	gt
 801f486:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 801f48a:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 801f48e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801f492:	ee17 3a90 	vmov	r3, s15
 801f496:	b218      	sxth	r0, r3
 801f498:	4770      	bx	lr

0801f49a <_ZN8touchgfx12TextProviderC1Ev>:
 801f49a:	b538      	push	{r3, r4, r5, lr}
 801f49c:	2500      	movs	r5, #0
 801f49e:	2302      	movs	r3, #2
 801f4a0:	4604      	mov	r4, r0
 801f4a2:	220e      	movs	r2, #14
 801f4a4:	7403      	strb	r3, [r0, #16]
 801f4a6:	4629      	mov	r1, r5
 801f4a8:	6145      	str	r5, [r0, #20]
 801f4aa:	7605      	strb	r5, [r0, #24]
 801f4ac:	83c5      	strh	r5, [r0, #30]
 801f4ae:	8405      	strh	r5, [r0, #32]
 801f4b0:	86c5      	strh	r5, [r0, #54]	; 0x36
 801f4b2:	8705      	strh	r5, [r0, #56]	; 0x38
 801f4b4:	87c5      	strh	r5, [r0, #62]	; 0x3e
 801f4b6:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 801f4ba:	e9c0 5500 	strd	r5, r5, [r0]
 801f4be:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 801f4c2:	304c      	adds	r0, #76	; 0x4c
 801f4c4:	f009 fa74 	bl	80289b0 <memset>
 801f4c8:	2301      	movs	r3, #1
 801f4ca:	4620      	mov	r0, r4
 801f4cc:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 801f4d0:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801f4d4:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 801f4d8:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 801f4dc:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 801f4e0:	f7ea fd08 	bl	8009ef4 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801f4e4:	4620      	mov	r0, r4
 801f4e6:	bd38      	pop	{r3, r4, r5, pc}

0801f4e8 <_ZN8touchgfx12TextProvider11endOfStringEv>:
 801f4e8:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801f4ea:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801f4ee:	8c40      	ldrh	r0, [r0, #34]	; 0x22
 801f4f0:	fab0 f080 	clz	r0, r0
 801f4f4:	0940      	lsrs	r0, r0, #5
 801f4f6:	4770      	bx	lr

0801f4f8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801f4f8:	b530      	push	{r4, r5, lr}
 801f4fa:	2500      	movs	r5, #0
 801f4fc:	2401      	movs	r4, #1
 801f4fe:	6843      	ldr	r3, [r0, #4]
 801f500:	b913      	cbnz	r3, 801f508 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801f502:	6803      	ldr	r3, [r0, #0]
 801f504:	b313      	cbz	r3, 801f54c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801f506:	6043      	str	r3, [r0, #4]
 801f508:	7e03      	ldrb	r3, [r0, #24]
 801f50a:	b143      	cbz	r3, 801f51e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801f50c:	6943      	ldr	r3, [r0, #20]
 801f50e:	b12b      	cbz	r3, 801f51c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801f510:	881a      	ldrh	r2, [r3, #0]
 801f512:	b11a      	cbz	r2, 801f51c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801f514:	1c9a      	adds	r2, r3, #2
 801f516:	6142      	str	r2, [r0, #20]
 801f518:	8818      	ldrh	r0, [r3, #0]
 801f51a:	bd30      	pop	{r4, r5, pc}
 801f51c:	7605      	strb	r5, [r0, #24]
 801f51e:	6843      	ldr	r3, [r0, #4]
 801f520:	8819      	ldrh	r1, [r3, #0]
 801f522:	b199      	cbz	r1, 801f54c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801f524:	1c9a      	adds	r2, r3, #2
 801f526:	2902      	cmp	r1, #2
 801f528:	6042      	str	r2, [r0, #4]
 801f52a:	d1f5      	bne.n	801f518 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801f52c:	7c03      	ldrb	r3, [r0, #16]
 801f52e:	2b01      	cmp	r3, #1
 801f530:	d8e5      	bhi.n	801f4fe <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801f532:	1c5a      	adds	r2, r3, #1
 801f534:	3302      	adds	r3, #2
 801f536:	7402      	strb	r2, [r0, #16]
 801f538:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801f53c:	6143      	str	r3, [r0, #20]
 801f53e:	2b00      	cmp	r3, #0
 801f540:	d0dd      	beq.n	801f4fe <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801f542:	881b      	ldrh	r3, [r3, #0]
 801f544:	2b00      	cmp	r3, #0
 801f546:	d0da      	beq.n	801f4fe <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801f548:	7604      	strb	r4, [r0, #24]
 801f54a:	e7d8      	b.n	801f4fe <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801f54c:	2000      	movs	r0, #0
 801f54e:	e7e4      	b.n	801f51a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801f550 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 801f550:	6001      	str	r1, [r0, #0]
 801f552:	2100      	movs	r1, #0
 801f554:	b430      	push	{r4, r5}
 801f556:	6041      	str	r1, [r0, #4]
 801f558:	6815      	ldr	r5, [r2, #0]
 801f55a:	6085      	str	r5, [r0, #8]
 801f55c:	6852      	ldr	r2, [r2, #4]
 801f55e:	6443      	str	r3, [r0, #68]	; 0x44
 801f560:	9b02      	ldr	r3, [sp, #8]
 801f562:	60c2      	str	r2, [r0, #12]
 801f564:	7401      	strb	r1, [r0, #16]
 801f566:	6141      	str	r1, [r0, #20]
 801f568:	7601      	strb	r1, [r0, #24]
 801f56a:	8701      	strh	r1, [r0, #56]	; 0x38
 801f56c:	8401      	strh	r1, [r0, #32]
 801f56e:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 801f572:	6483      	str	r3, [r0, #72]	; 0x48
 801f574:	bc30      	pop	{r4, r5}
 801f576:	f7ea bcbd 	b.w	8009ef4 <_ZN8touchgfx12TextProvider18initializeInternalEv>

0801f57a <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>:
 801f57a:	b408      	push	{r3}
 801f57c:	b510      	push	{r4, lr}
 801f57e:	b085      	sub	sp, #20
 801f580:	ac07      	add	r4, sp, #28
 801f582:	f854 3b04 	ldr.w	r3, [r4], #4
 801f586:	9300      	str	r3, [sp, #0]
 801f588:	4613      	mov	r3, r2
 801f58a:	4622      	mov	r2, r4
 801f58c:	9403      	str	r4, [sp, #12]
 801f58e:	f7ff ffdf 	bl	801f550 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801f592:	b005      	add	sp, #20
 801f594:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f598:	b001      	add	sp, #4
 801f59a:	4770      	bx	lr

0801f59c <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801f59c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f59e:	4605      	mov	r5, r0
 801f5a0:	4608      	mov	r0, r1
 801f5a2:	b1f1      	cbz	r1, 801f5e2 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 801f5a4:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 801f5a8:	460b      	mov	r3, r1
 801f5aa:	f101 0708 	add.w	r7, r1, #8
 801f5ae:	4622      	mov	r2, r4
 801f5b0:	6818      	ldr	r0, [r3, #0]
 801f5b2:	3308      	adds	r3, #8
 801f5b4:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801f5b8:	4626      	mov	r6, r4
 801f5ba:	42bb      	cmp	r3, r7
 801f5bc:	c603      	stmia	r6!, {r0, r1}
 801f5be:	4634      	mov	r4, r6
 801f5c0:	d1f6      	bne.n	801f5b0 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801f5c2:	6818      	ldr	r0, [r3, #0]
 801f5c4:	6030      	str	r0, [r6, #0]
 801f5c6:	4610      	mov	r0, r2
 801f5c8:	889b      	ldrh	r3, [r3, #4]
 801f5ca:	80b3      	strh	r3, [r6, #4]
 801f5cc:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 801f5d0:	015b      	lsls	r3, r3, #5
 801f5d2:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801f5d6:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 801f5da:	430b      	orrs	r3, r1
 801f5dc:	425b      	negs	r3, r3
 801f5de:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 801f5e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801f5e4 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801f5e4:	b538      	push	{r3, r4, r5, lr}
 801f5e6:	460c      	mov	r4, r1
 801f5e8:	6811      	ldr	r1, [r2, #0]
 801f5ea:	4610      	mov	r0, r2
 801f5ec:	68cd      	ldr	r5, [r1, #12]
 801f5ee:	4619      	mov	r1, r3
 801f5f0:	47a8      	blx	r5
 801f5f2:	2800      	cmp	r0, #0
 801f5f4:	bf08      	it	eq
 801f5f6:	4620      	moveq	r0, r4
 801f5f8:	bd38      	pop	{r3, r4, r5, pc}
	...

0801f5fc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801f5fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f5fe:	4604      	mov	r4, r0
 801f600:	4615      	mov	r5, r2
 801f602:	4608      	mov	r0, r1
 801f604:	b93a      	cbnz	r2, 801f616 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801f606:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801f60a:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 801f60e:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 801f612:	4628      	mov	r0, r5
 801f614:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f616:	f892 c00d 	ldrb.w	ip, [r2, #13]
 801f61a:	f46f 6763 	mvn.w	r7, #3632	; 0xe30
 801f61e:	8893      	ldrh	r3, [r2, #4]
 801f620:	ea4f 160c 	mov.w	r6, ip, lsl #4
 801f624:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801f628:	79ee      	ldrb	r6, [r5, #7]
 801f62a:	4316      	orrs	r6, r2
 801f62c:	19da      	adds	r2, r3, r7
 801f62e:	b291      	uxth	r1, r2
 801f630:	b2b7      	uxth	r7, r6
 801f632:	291d      	cmp	r1, #29
 801f634:	d87b      	bhi.n	801f72e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 801f636:	2201      	movs	r2, #1
 801f638:	10f6      	asrs	r6, r6, #3
 801f63a:	408a      	lsls	r2, r1
 801f63c:	4974      	ldr	r1, [pc, #464]	; (801f810 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
 801f63e:	420a      	tst	r2, r1
 801f640:	d12e      	bne.n	801f6a0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 801f642:	f412 7f60 	tst.w	r2, #896	; 0x380
 801f646:	d072      	beq.n	801f72e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 801f648:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 801f64c:	462b      	mov	r3, r5
 801f64e:	f105 0e08 	add.w	lr, r5, #8
 801f652:	4615      	mov	r5, r2
 801f654:	6818      	ldr	r0, [r3, #0]
 801f656:	3308      	adds	r3, #8
 801f658:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801f65c:	4694      	mov	ip, r2
 801f65e:	4573      	cmp	r3, lr
 801f660:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801f664:	4662      	mov	r2, ip
 801f666:	d1f5      	bne.n	801f654 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 801f668:	6818      	ldr	r0, [r3, #0]
 801f66a:	f8cc 0000 	str.w	r0, [ip]
 801f66e:	889b      	ldrh	r3, [r3, #4]
 801f670:	f8ac 3004 	strh.w	r3, [ip, #4]
 801f674:	b2b3      	uxth	r3, r6
 801f676:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 801f67a:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 801f67e:	1aca      	subs	r2, r1, r3
 801f680:	1bcf      	subs	r7, r1, r7
 801f682:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 801f686:	b292      	uxth	r2, r2
 801f688:	1afb      	subs	r3, r7, r3
 801f68a:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 801f68e:	10d2      	asrs	r2, r2, #3
 801f690:	f002 0260 	and.w	r2, r2, #96	; 0x60
 801f694:	4302      	orrs	r2, r0
 801f696:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 801f69a:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 801f69e:	e7b8      	b.n	801f612 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801f6a0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801f6a2:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801f6a6:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 801f6a8:	f640 6333 	movw	r3, #3635	; 0xe33
 801f6ac:	4299      	cmp	r1, r3
 801f6ae:	d110      	bne.n	801f6d2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd6>
 801f6b0:	6803      	ldr	r3, [r0, #0]
 801f6b2:	68db      	ldr	r3, [r3, #12]
 801f6b4:	4798      	blx	r3
 801f6b6:	7b41      	ldrb	r1, [r0, #13]
 801f6b8:	00cb      	lsls	r3, r1, #3
 801f6ba:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801f6be:	7a03      	ldrb	r3, [r0, #8]
 801f6c0:	0648      	lsls	r0, r1, #25
 801f6c2:	ea43 0302 	orr.w	r3, r3, r2
 801f6c6:	bf44      	itt	mi
 801f6c8:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801f6cc:	b21b      	sxthmi	r3, r3
 801f6ce:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801f6d2:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 801f6d6:	462a      	mov	r2, r5
 801f6d8:	f105 0c08 	add.w	ip, r5, #8
 801f6dc:	443b      	add	r3, r7
 801f6de:	4433      	add	r3, r6
 801f6e0:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 801f6e4:	b29b      	uxth	r3, r3
 801f6e6:	4635      	mov	r5, r6
 801f6e8:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801f6ec:	6810      	ldr	r0, [r2, #0]
 801f6ee:	3208      	adds	r2, #8
 801f6f0:	f852 1c04 	ldr.w	r1, [r2, #-4]
 801f6f4:	4637      	mov	r7, r6
 801f6f6:	4562      	cmp	r2, ip
 801f6f8:	c703      	stmia	r7!, {r0, r1}
 801f6fa:	463e      	mov	r6, r7
 801f6fc:	d1f6      	bne.n	801f6ec <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf0>
 801f6fe:	6810      	ldr	r0, [r2, #0]
 801f700:	6038      	str	r0, [r7, #0]
 801f702:	8892      	ldrh	r2, [r2, #4]
 801f704:	80ba      	strh	r2, [r7, #4]
 801f706:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801f70a:	10db      	asrs	r3, r3, #3
 801f70c:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801f710:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801f714:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801f718:	4313      	orrs	r3, r2
 801f71a:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 801f71e:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801f722:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 801f726:	1a9b      	subs	r3, r3, r2
 801f728:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 801f72c:	e771      	b.n	801f612 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801f72e:	f023 0204 	bic.w	r2, r3, #4
 801f732:	f640 611b 	movw	r1, #3611	; 0xe1b
 801f736:	428a      	cmp	r2, r1
 801f738:	d003      	beq.n	801f742 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x146>
 801f73a:	f640 621d 	movw	r2, #3613	; 0xe1d
 801f73e:	4293      	cmp	r3, r2
 801f740:	d120      	bne.n	801f784 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x188>
 801f742:	3b01      	subs	r3, #1
 801f744:	4602      	mov	r2, r0
 801f746:	4629      	mov	r1, r5
 801f748:	4620      	mov	r0, r4
 801f74a:	b29b      	uxth	r3, r3
 801f74c:	f7ff ff4a 	bl	801f5e4 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801f750:	7b41      	ldrb	r1, [r0, #13]
 801f752:	00cb      	lsls	r3, r1, #3
 801f754:	0649      	lsls	r1, r1, #25
 801f756:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801f75a:	7a03      	ldrb	r3, [r0, #8]
 801f75c:	ea43 0302 	orr.w	r3, r3, r2
 801f760:	bf44      	itt	mi
 801f762:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801f766:	b21b      	sxthmi	r3, r3
 801f768:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801f76c:	7b6b      	ldrb	r3, [r5, #13]
 801f76e:	7aaa      	ldrb	r2, [r5, #10]
 801f770:	005b      	lsls	r3, r3, #1
 801f772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801f776:	4313      	orrs	r3, r2
 801f778:	115a      	asrs	r2, r3, #5
 801f77a:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801f77e:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 801f782:	e035      	b.n	801f7f0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f4>
 801f784:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 801f788:	f01c 0f40 	tst.w	ip, #64	; 0x40
 801f78c:	f402 7180 	and.w	r1, r2, #256	; 0x100
 801f790:	7a2a      	ldrb	r2, [r5, #8]
 801f792:	ea42 0201 	orr.w	r2, r2, r1
 801f796:	f640 6109 	movw	r1, #3593	; 0xe09
 801f79a:	bf1c      	itt	ne
 801f79c:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 801f7a0:	b212      	sxthne	r2, r2
 801f7a2:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801f7a6:	f023 0210 	bic.w	r2, r3, #16
 801f7aa:	428a      	cmp	r2, r1
 801f7ac:	d003      	beq.n	801f7b6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
 801f7ae:	f640 6213 	movw	r2, #3603	; 0xe13
 801f7b2:	4293      	cmp	r3, r2
 801f7b4:	d129      	bne.n	801f80a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20e>
 801f7b6:	7b6e      	ldrb	r6, [r5, #13]
 801f7b8:	4629      	mov	r1, r5
 801f7ba:	0076      	lsls	r6, r6, #1
 801f7bc:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801f7c0:	7aae      	ldrb	r6, [r5, #10]
 801f7c2:	4316      	orrs	r6, r2
 801f7c4:	f640 6213 	movw	r2, #3603	; 0xe13
 801f7c8:	4293      	cmp	r3, r2
 801f7ca:	4602      	mov	r2, r0
 801f7cc:	4620      	mov	r0, r4
 801f7ce:	bf16      	itet	ne
 801f7d0:	f103 33ff 	addne.w	r3, r3, #4294967295
 801f7d4:	f640 630c 	movweq	r3, #3596	; 0xe0c
 801f7d8:	b29b      	uxthne	r3, r3
 801f7da:	f7ff ff03 	bl	801f5e4 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801f7de:	7b43      	ldrb	r3, [r0, #13]
 801f7e0:	7a82      	ldrb	r2, [r0, #10]
 801f7e2:	005b      	lsls	r3, r3, #1
 801f7e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801f7e8:	4313      	orrs	r3, r2
 801f7ea:	1af6      	subs	r6, r6, r3
 801f7ec:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 801f7f0:	7b69      	ldrb	r1, [r5, #13]
 801f7f2:	00cb      	lsls	r3, r1, #3
 801f7f4:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801f7f8:	7a2b      	ldrb	r3, [r5, #8]
 801f7fa:	4313      	orrs	r3, r2
 801f7fc:	064a      	lsls	r2, r1, #25
 801f7fe:	bf44      	itt	mi
 801f800:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801f804:	b21b      	sxthmi	r3, r3
 801f806:	1bdb      	subs	r3, r3, r7
 801f808:	e747      	b.n	801f69a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 801f80a:	2300      	movs	r3, #0
 801f80c:	e7b7      	b.n	801f77e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x182>
 801f80e:	bf00      	nop
 801f810:	3fc00079 	.word	0x3fc00079

0801f814 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 801f814:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801f818:	4604      	mov	r4, r0
 801f81a:	b942      	cbnz	r2, 801f82e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 801f81c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801f820:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 801f824:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 801f828:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 801f82c:	e047      	b.n	801f8be <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801f82e:	7b51      	ldrb	r1, [r2, #13]
 801f830:	8893      	ldrh	r3, [r2, #4]
 801f832:	010d      	lsls	r5, r1, #4
 801f834:	f405 7080 	and.w	r0, r5, #256	; 0x100
 801f838:	79d5      	ldrb	r5, [r2, #7]
 801f83a:	4305      	orrs	r5, r0
 801f83c:	2d04      	cmp	r5, #4
 801f83e:	bfcc      	ite	gt
 801f840:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 801f844:	f04f 0e01 	movle.w	lr, #1
 801f848:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 801f84c:	f200 80ab 	bhi.w	801f9a6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 801f850:	f240 60e7 	movw	r0, #1767	; 0x6e7
 801f854:	4283      	cmp	r3, r0
 801f856:	d216      	bcs.n	801f886 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801f858:	f240 605b 	movw	r0, #1627	; 0x65b
 801f85c:	4283      	cmp	r3, r0
 801f85e:	d859      	bhi.n	801f914 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 801f860:	f240 6057 	movw	r0, #1623	; 0x657
 801f864:	4283      	cmp	r3, r0
 801f866:	d20e      	bcs.n	801f886 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801f868:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801f86c:	d24a      	bcs.n	801f904 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 801f86e:	f240 604e 	movw	r0, #1614	; 0x64e
 801f872:	4283      	cmp	r3, r0
 801f874:	d207      	bcs.n	801f886 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801f876:	f240 601a 	movw	r0, #1562	; 0x61a
 801f87a:	4283      	cmp	r3, r0
 801f87c:	d02a      	beq.n	801f8d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801f87e:	d821      	bhi.n	801f8c4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 801f880:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 801f884:	d35b      	bcc.n	801f93e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801f886:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 801f88a:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801f88e:	f040 80d0 	bne.w	801fa32 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801f892:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 801f896:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801f89a:	f040 80ca 	bne.w	801fa32 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801f89e:	00cb      	lsls	r3, r1, #3
 801f8a0:	0649      	lsls	r1, r1, #25
 801f8a2:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801f8a6:	7a13      	ldrb	r3, [r2, #8]
 801f8a8:	ea43 0300 	orr.w	r3, r3, r0
 801f8ac:	bf44      	itt	mi
 801f8ae:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801f8b2:	b21b      	sxthmi	r3, r3
 801f8b4:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801f8b8:	1b5d      	subs	r5, r3, r5
 801f8ba:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801f8be:	4610      	mov	r0, r2
 801f8c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f8c4:	f240 604b 	movw	r0, #1611	; 0x64b
 801f8c8:	4283      	cmp	r3, r0
 801f8ca:	d338      	bcc.n	801f93e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801f8cc:	f240 604c 	movw	r0, #1612	; 0x64c
 801f8d0:	4283      	cmp	r3, r0
 801f8d2:	d9d8      	bls.n	801f886 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801f8d4:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 801f8d8:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 801f8dc:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801f8e0:	f040 80f3 	bne.w	801faca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 801f8e4:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801f8e8:	f040 80ef 	bne.w	801faca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 801f8ec:	00cb      	lsls	r3, r1, #3
 801f8ee:	064e      	lsls	r6, r1, #25
 801f8f0:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801f8f4:	7a13      	ldrb	r3, [r2, #8]
 801f8f6:	ea43 0300 	orr.w	r3, r3, r0
 801f8fa:	bf44      	itt	mi
 801f8fc:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801f900:	b21b      	sxthmi	r3, r3
 801f902:	e7d9      	b.n	801f8b8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 801f904:	f240 6054 	movw	r0, #1620	; 0x654
 801f908:	4283      	cmp	r3, r0
 801f90a:	d8e3      	bhi.n	801f8d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801f90c:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801f910:	d9e0      	bls.n	801f8d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801f912:	e7b8      	b.n	801f886 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801f914:	f240 6074 	movw	r0, #1652	; 0x674
 801f918:	4283      	cmp	r3, r0
 801f91a:	d0b4      	beq.n	801f886 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801f91c:	d82d      	bhi.n	801f97a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 801f91e:	f240 605e 	movw	r0, #1630	; 0x65e
 801f922:	4283      	cmp	r3, r0
 801f924:	d804      	bhi.n	801f930 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 801f926:	f240 605d 	movw	r0, #1629	; 0x65d
 801f92a:	4283      	cmp	r3, r0
 801f92c:	d3d2      	bcc.n	801f8d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801f92e:	e7aa      	b.n	801f886 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801f930:	f240 605f 	movw	r0, #1631	; 0x65f
 801f934:	4283      	cmp	r3, r0
 801f936:	d0cd      	beq.n	801f8d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801f938:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 801f93c:	d0a3      	beq.n	801f886 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801f93e:	00cb      	lsls	r3, r1, #3
 801f940:	0649      	lsls	r1, r1, #25
 801f942:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801f946:	7a13      	ldrb	r3, [r2, #8]
 801f948:	ea43 0300 	orr.w	r3, r3, r0
 801f94c:	bf44      	itt	mi
 801f94e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801f952:	b21b      	sxthmi	r3, r3
 801f954:	1b5d      	subs	r5, r3, r5
 801f956:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801f95a:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801f95e:	7b53      	ldrb	r3, [r2, #13]
 801f960:	015b      	lsls	r3, r3, #5
 801f962:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801f966:	7993      	ldrb	r3, [r2, #6]
 801f968:	430b      	orrs	r3, r1
 801f96a:	2105      	movs	r1, #5
 801f96c:	005b      	lsls	r3, r3, #1
 801f96e:	fb93 f3f1 	sdiv	r3, r3, r1
 801f972:	f992 1009 	ldrsb.w	r1, [r2, #9]
 801f976:	440b      	add	r3, r1
 801f978:	e756      	b.n	801f828 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 801f97a:	f240 60e2 	movw	r0, #1762	; 0x6e2
 801f97e:	4283      	cmp	r3, r0
 801f980:	d809      	bhi.n	801f996 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 801f982:	f240 60df 	movw	r0, #1759	; 0x6df
 801f986:	4283      	cmp	r3, r0
 801f988:	f4bf af7d 	bcs.w	801f886 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801f98c:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 801f990:	2b05      	cmp	r3, #5
 801f992:	d8d4      	bhi.n	801f93e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801f994:	e777      	b.n	801f886 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801f996:	f240 60e3 	movw	r0, #1763	; 0x6e3
 801f99a:	4283      	cmp	r3, r0
 801f99c:	d09a      	beq.n	801f8d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801f99e:	f240 60e4 	movw	r0, #1764	; 0x6e4
 801f9a2:	4283      	cmp	r3, r0
 801f9a4:	e7ca      	b.n	801f93c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801f9a6:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 801f9aa:	d22b      	bcs.n	801fa04 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 801f9ac:	f640 00ed 	movw	r0, #2285	; 0x8ed
 801f9b0:	4283      	cmp	r3, r0
 801f9b2:	d28f      	bcs.n	801f8d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801f9b4:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801f9b8:	4283      	cmp	r3, r0
 801f9ba:	d816      	bhi.n	801f9ea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 801f9bc:	f640 00e4 	movw	r0, #2276	; 0x8e4
 801f9c0:	4283      	cmp	r3, r0
 801f9c2:	f4bf af60 	bcs.w	801f886 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801f9c6:	f240 60ec 	movw	r0, #1772	; 0x6ec
 801f9ca:	4283      	cmp	r3, r0
 801f9cc:	d80a      	bhi.n	801f9e4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 801f9ce:	f240 60eb 	movw	r0, #1771	; 0x6eb
 801f9d2:	4283      	cmp	r3, r0
 801f9d4:	f4bf af57 	bcs.w	801f886 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801f9d8:	f240 60ea 	movw	r0, #1770	; 0x6ea
 801f9dc:	4283      	cmp	r3, r0
 801f9de:	f43f af79 	beq.w	801f8d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801f9e2:	e7ac      	b.n	801f93e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801f9e4:	f240 60ed 	movw	r0, #1773	; 0x6ed
 801f9e8:	e7f8      	b.n	801f9dc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 801f9ea:	f640 00e8 	movw	r0, #2280	; 0x8e8
 801f9ee:	4283      	cmp	r3, r0
 801f9f0:	d802      	bhi.n	801f9f8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 801f9f2:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801f9f6:	e798      	b.n	801f92a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 801f9f8:	f640 00e9 	movw	r0, #2281	; 0x8e9
 801f9fc:	4283      	cmp	r3, r0
 801f9fe:	f47f af42 	bne.w	801f886 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801fa02:	e767      	b.n	801f8d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801fa04:	f640 00f6 	movw	r0, #2294	; 0x8f6
 801fa08:	4283      	cmp	r3, r0
 801fa0a:	f43f af63 	beq.w	801f8d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801fa0e:	d802      	bhi.n	801fa16 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 801fa10:	f640 00f2 	movw	r0, #2290	; 0x8f2
 801fa14:	e7f2      	b.n	801f9fc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 801fa16:	f640 00fa 	movw	r0, #2298	; 0x8fa
 801fa1a:	4283      	cmp	r3, r0
 801fa1c:	d805      	bhi.n	801fa2a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 801fa1e:	f640 00f9 	movw	r0, #2297	; 0x8f9
 801fa22:	4283      	cmp	r3, r0
 801fa24:	f4ff af2f 	bcc.w	801f886 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801fa28:	e754      	b.n	801f8d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801fa2a:	f640 00fe 	movw	r0, #2302	; 0x8fe
 801fa2e:	4283      	cmp	r3, r0
 801fa30:	e7af      	b.n	801f992 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 801fa32:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 801fa36:	4617      	mov	r7, r2
 801fa38:	f102 0808 	add.w	r8, r2, #8
 801fa3c:	4666      	mov	r6, ip
 801fa3e:	6838      	ldr	r0, [r7, #0]
 801fa40:	3708      	adds	r7, #8
 801fa42:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801fa46:	46e6      	mov	lr, ip
 801fa48:	4547      	cmp	r7, r8
 801fa4a:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801fa4e:	46f4      	mov	ip, lr
 801fa50:	d1f5      	bne.n	801fa3e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 801fa52:	6838      	ldr	r0, [r7, #0]
 801fa54:	f8ce 0000 	str.w	r0, [lr]
 801fa58:	88b9      	ldrh	r1, [r7, #4]
 801fa5a:	f8ae 1004 	strh.w	r1, [lr, #4]
 801fa5e:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 801fa62:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801fa66:	d009      	beq.n	801fa7c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
 801fa68:	7b51      	ldrb	r1, [r2, #13]
 801fa6a:	7992      	ldrb	r2, [r2, #6]
 801fa6c:	0149      	lsls	r1, r1, #5
 801fa6e:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801fa72:	4311      	orrs	r1, r2
 801fa74:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801fa78:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 801fa7c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801fa80:	b2ad      	uxth	r5, r5
 801fa82:	d00d      	beq.n	801faa0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
 801fa84:	442b      	add	r3, r5
 801fa86:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801fa8a:	b29b      	uxth	r3, r3
 801fa8c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801fa90:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801fa94:	10db      	asrs	r3, r3, #3
 801fa96:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801fa9a:	4313      	orrs	r3, r2
 801fa9c:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801faa0:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 801faa4:	00cb      	lsls	r3, r1, #3
 801faa6:	064f      	lsls	r7, r1, #25
 801faa8:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801faac:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801fab0:	ea43 0302 	orr.w	r3, r3, r2
 801fab4:	bf44      	itt	mi
 801fab6:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801faba:	b21b      	sxthmi	r3, r3
 801fabc:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801fac0:	1b5b      	subs	r3, r3, r5
 801fac2:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 801fac6:	4632      	mov	r2, r6
 801fac8:	e6f9      	b.n	801f8be <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801faca:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 801face:	4617      	mov	r7, r2
 801fad0:	f102 0908 	add.w	r9, r2, #8
 801fad4:	4666      	mov	r6, ip
 801fad6:	6838      	ldr	r0, [r7, #0]
 801fad8:	3708      	adds	r7, #8
 801fada:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801fade:	46e0      	mov	r8, ip
 801fae0:	454f      	cmp	r7, r9
 801fae2:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801fae6:	46c4      	mov	ip, r8
 801fae8:	d1f5      	bne.n	801fad6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
 801faea:	6838      	ldr	r0, [r7, #0]
 801faec:	f8c8 0000 	str.w	r0, [r8]
 801faf0:	88b9      	ldrh	r1, [r7, #4]
 801faf2:	f8a8 1004 	strh.w	r1, [r8, #4]
 801faf6:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 801fafa:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801fafe:	d009      	beq.n	801fb14 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
 801fb00:	7b51      	ldrb	r1, [r2, #13]
 801fb02:	7992      	ldrb	r2, [r2, #6]
 801fb04:	0149      	lsls	r1, r1, #5
 801fb06:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801fb0a:	4311      	orrs	r1, r2
 801fb0c:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801fb10:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 801fb14:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801fb18:	d00e      	beq.n	801fb38 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 801fb1a:	eba3 030e 	sub.w	r3, r3, lr
 801fb1e:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801fb22:	b29b      	uxth	r3, r3
 801fb24:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801fb28:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801fb2c:	10db      	asrs	r3, r3, #3
 801fb2e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801fb32:	4313      	orrs	r3, r2
 801fb34:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801fb38:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 801fb3c:	00cb      	lsls	r3, r1, #3
 801fb3e:	0648      	lsls	r0, r1, #25
 801fb40:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801fb44:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801fb48:	ea43 0302 	orr.w	r3, r3, r2
 801fb4c:	bf44      	itt	mi
 801fb4e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801fb52:	b21b      	sxthmi	r3, r3
 801fb54:	1b5d      	subs	r5, r3, r5
 801fb56:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801fb5a:	e7b4      	b.n	801fac6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

0801fb5c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801fb5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fb60:	461e      	mov	r6, r3
 801fb62:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801fb64:	4604      	mov	r4, r0
 801fb66:	4617      	mov	r7, r2
 801fb68:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801fb6c:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801fb70:	f7ea f91a 	bl	8009da8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801fb74:	4605      	mov	r5, r0
 801fb76:	b918      	cbnz	r0, 801fb80 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 801fb78:	6030      	str	r0, [r6, #0]
 801fb7a:	4628      	mov	r0, r5
 801fb7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fb80:	683b      	ldr	r3, [r7, #0]
 801fb82:	4601      	mov	r1, r0
 801fb84:	4638      	mov	r0, r7
 801fb86:	68db      	ldr	r3, [r3, #12]
 801fb88:	4798      	blx	r3
 801fb8a:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801fb8e:	4602      	mov	r2, r0
 801fb90:	6030      	str	r0, [r6, #0]
 801fb92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801fb96:	d213      	bcs.n	801fbc0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 801fb98:	4643      	mov	r3, r8
 801fb9a:	4639      	mov	r1, r7
 801fb9c:	4620      	mov	r0, r4
 801fb9e:	f7ff fe39 	bl	801f814 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801fba2:	6030      	str	r0, [r6, #0]
 801fba4:	6833      	ldr	r3, [r6, #0]
 801fba6:	b143      	cbz	r3, 801fbba <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 801fba8:	7b5a      	ldrb	r2, [r3, #13]
 801fbaa:	7a9b      	ldrb	r3, [r3, #10]
 801fbac:	0052      	lsls	r2, r2, #1
 801fbae:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801fbb2:	4313      	orrs	r3, r2
 801fbb4:	bf0c      	ite	eq
 801fbb6:	2301      	moveq	r3, #1
 801fbb8:	2300      	movne	r3, #0
 801fbba:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 801fbbe:	e7dc      	b.n	801fb7a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 801fbc0:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801fbc4:	b29b      	uxth	r3, r3
 801fbc6:	2b7f      	cmp	r3, #127	; 0x7f
 801fbc8:	d804      	bhi.n	801fbd4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 801fbca:	4639      	mov	r1, r7
 801fbcc:	4620      	mov	r0, r4
 801fbce:	f7ff fd15 	bl	801f5fc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801fbd2:	e7e6      	b.n	801fba2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 801fbd4:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 801fbd8:	2b00      	cmp	r3, #0
 801fbda:	d0e3      	beq.n	801fba4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801fbdc:	f640 1302 	movw	r3, #2306	; 0x902
 801fbe0:	429d      	cmp	r5, r3
 801fbe2:	d1df      	bne.n	801fba4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801fbe4:	4601      	mov	r1, r0
 801fbe6:	4620      	mov	r0, r4
 801fbe8:	f7ff fcd8 	bl	801f59c <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801fbec:	e7d9      	b.n	801fba2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

0801fbee <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 801fbee:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801fbf2:	461e      	mov	r6, r3
 801fbf4:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801fbf6:	4604      	mov	r4, r0
 801fbf8:	4617      	mov	r7, r2
 801fbfa:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801fbfe:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801fc02:	f7ea f8d1 	bl	8009da8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801fc06:	4605      	mov	r5, r0
 801fc08:	b918      	cbnz	r0, 801fc12 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x24>
 801fc0a:	6030      	str	r0, [r6, #0]
 801fc0c:	4628      	mov	r0, r5
 801fc0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801fc12:	683b      	ldr	r3, [r7, #0]
 801fc14:	4601      	mov	r1, r0
 801fc16:	4638      	mov	r0, r7
 801fc18:	f8d3 9008 	ldr.w	r9, [r3, #8]
 801fc1c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801fc20:	47c8      	blx	r9
 801fc22:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801fc26:	4602      	mov	r2, r0
 801fc28:	6030      	str	r0, [r6, #0]
 801fc2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801fc2e:	d213      	bcs.n	801fc58 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
 801fc30:	4643      	mov	r3, r8
 801fc32:	4639      	mov	r1, r7
 801fc34:	4620      	mov	r0, r4
 801fc36:	f7ff fded 	bl	801f814 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801fc3a:	6030      	str	r0, [r6, #0]
 801fc3c:	6833      	ldr	r3, [r6, #0]
 801fc3e:	b143      	cbz	r3, 801fc52 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x64>
 801fc40:	7b5a      	ldrb	r2, [r3, #13]
 801fc42:	7a9b      	ldrb	r3, [r3, #10]
 801fc44:	0052      	lsls	r2, r2, #1
 801fc46:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801fc4a:	4313      	orrs	r3, r2
 801fc4c:	bf0c      	ite	eq
 801fc4e:	2301      	moveq	r3, #1
 801fc50:	2300      	movne	r3, #0
 801fc52:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 801fc56:	e7d9      	b.n	801fc0c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1e>
 801fc58:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801fc5c:	b29b      	uxth	r3, r3
 801fc5e:	2b7f      	cmp	r3, #127	; 0x7f
 801fc60:	d804      	bhi.n	801fc6c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7e>
 801fc62:	4639      	mov	r1, r7
 801fc64:	4620      	mov	r0, r4
 801fc66:	f7ff fcc9 	bl	801f5fc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801fc6a:	e7e6      	b.n	801fc3a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>
 801fc6c:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 801fc70:	2b00      	cmp	r3, #0
 801fc72:	d0e3      	beq.n	801fc3c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 801fc74:	f640 1302 	movw	r3, #2306	; 0x902
 801fc78:	429d      	cmp	r5, r3
 801fc7a:	d1df      	bne.n	801fc3c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 801fc7c:	4601      	mov	r1, r0
 801fc7e:	4620      	mov	r0, r4
 801fc80:	f7ff fc8c 	bl	801f59c <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801fc84:	e7d9      	b.n	801fc3a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>

0801fc86 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801fc86:	b510      	push	{r4, lr}
 801fc88:	4604      	mov	r4, r0
 801fc8a:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 801fc8e:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801fc90:	b1e1      	cbz	r1, 801fccc <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 801fc92:	2b0a      	cmp	r3, #10
 801fc94:	d02d      	beq.n	801fcf2 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 801fc96:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 801fc98:	3901      	subs	r1, #1
 801fc9a:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801fc9e:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 801fca0:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 801fca4:	1c51      	adds	r1, r2, #1
 801fca6:	b289      	uxth	r1, r1
 801fca8:	2901      	cmp	r1, #1
 801fcaa:	bf8a      	itet	hi
 801fcac:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801fcb0:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 801fcb2:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 801fcb4:	1c5a      	adds	r2, r3, #1
 801fcb6:	8722      	strh	r2, [r4, #56]	; 0x38
 801fcb8:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801fcba:	4413      	add	r3, r2
 801fcbc:	b29b      	uxth	r3, r3
 801fcbe:	2b09      	cmp	r3, #9
 801fcc0:	bf88      	it	hi
 801fcc2:	3b0a      	subhi	r3, #10
 801fcc4:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801fcc8:	8458      	strh	r0, [r3, #34]	; 0x22
 801fcca:	e7de      	b.n	801fc8a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 801fccc:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801fcce:	2b0a      	cmp	r3, #10
 801fcd0:	d00f      	beq.n	801fcf2 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 801fcd2:	4620      	mov	r0, r4
 801fcd4:	f7ff fc10 	bl	801f4f8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801fcd8:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801fcda:	1c5a      	adds	r2, r3, #1
 801fcdc:	8722      	strh	r2, [r4, #56]	; 0x38
 801fcde:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801fce0:	4413      	add	r3, r2
 801fce2:	b29b      	uxth	r3, r3
 801fce4:	2b09      	cmp	r3, #9
 801fce6:	bf88      	it	hi
 801fce8:	3b0a      	subhi	r3, #10
 801fcea:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801fcee:	8458      	strh	r0, [r3, #34]	; 0x22
 801fcf0:	e7ec      	b.n	801fccc <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 801fcf2:	bd10      	pop	{r4, pc}

0801fcf4 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801fcf4:	b538      	push	{r3, r4, r5, lr}
 801fcf6:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801fcf8:	4604      	mov	r4, r0
 801fcfa:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 801fcfe:	8c55      	ldrh	r5, [r2, #34]	; 0x22
 801fd00:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 801fd02:	3a01      	subs	r2, #1
 801fd04:	8702      	strh	r2, [r0, #56]	; 0x38
 801fd06:	1c5a      	adds	r2, r3, #1
 801fd08:	b292      	uxth	r2, r2
 801fd0a:	2a09      	cmp	r2, #9
 801fd0c:	bf8a      	itet	hi
 801fd0e:	3b09      	subhi	r3, #9
 801fd10:	86c2      	strhls	r2, [r0, #54]	; 0x36
 801fd12:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 801fd14:	f7ff ffb7 	bl	801fc86 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801fd18:	8c23      	ldrh	r3, [r4, #32]
 801fd1a:	2b01      	cmp	r3, #1
 801fd1c:	bf9c      	itt	ls
 801fd1e:	3301      	addls	r3, #1
 801fd20:	8423      	strhls	r3, [r4, #32]
 801fd22:	8be3      	ldrh	r3, [r4, #30]
 801fd24:	b90b      	cbnz	r3, 801fd2a <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 801fd26:	2302      	movs	r3, #2
 801fd28:	83e3      	strh	r3, [r4, #30]
 801fd2a:	8be3      	ldrh	r3, [r4, #30]
 801fd2c:	4628      	mov	r0, r5
 801fd2e:	3b01      	subs	r3, #1
 801fd30:	b29b      	uxth	r3, r3
 801fd32:	83e3      	strh	r3, [r4, #30]
 801fd34:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801fd38:	8365      	strh	r5, [r4, #26]
 801fd3a:	bd38      	pop	{r3, r4, r5, pc}

0801fd3c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801fd3c:	428a      	cmp	r2, r1
 801fd3e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801fd42:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
 801fd44:	d932      	bls.n	801fdac <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
 801fd46:	8f05      	ldrh	r5, [r0, #56]	; 0x38
 801fd48:	1a54      	subs	r4, r2, r1
 801fd4a:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
 801fd4e:	19ee      	adds	r6, r5, r7
 801fd50:	fa1f fe84 	uxth.w	lr, r4
 801fd54:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	; 0x3e
 801fd58:	3e01      	subs	r6, #1
 801fd5a:	b2b4      	uxth	r4, r6
 801fd5c:	eba4 090e 	sub.w	r9, r4, lr
 801fd60:	fa1f f989 	uxth.w	r9, r9
 801fd64:	2c09      	cmp	r4, #9
 801fd66:	4626      	mov	r6, r4
 801fd68:	bf88      	it	hi
 801fd6a:	f1a4 060a 	subhi.w	r6, r4, #10
 801fd6e:	f1bc 0f00 	cmp.w	ip, #0
 801fd72:	f104 34ff 	add.w	r4, r4, #4294967295
 801fd76:	bf08      	it	eq
 801fd78:	f04f 0c02 	moveq.w	ip, #2
 801fd7c:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801fd80:	b2a4      	uxth	r4, r4
 801fd82:	f10c 3cff 	add.w	ip, ip, #4294967295
 801fd86:	f8b6 a022 	ldrh.w	sl, [r6, #34]	; 0x22
 801fd8a:	454c      	cmp	r4, r9
 801fd8c:	fa1f fc8c 	uxth.w	ip, ip
 801fd90:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 801fd94:	f8a6 a03a 	strh.w	sl, [r6, #58]	; 0x3a
 801fd98:	d1e4      	bne.n	801fd64 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 801fd9a:	eba5 050e 	sub.w	r5, r5, lr
 801fd9e:	eb0e 0408 	add.w	r4, lr, r8
 801fda2:	f8a0 c03e 	strh.w	ip, [r0, #62]	; 0x3e
 801fda6:	8705      	strh	r5, [r0, #56]	; 0x38
 801fda8:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
 801fdac:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 801fdae:	250a      	movs	r5, #10
 801fdb0:	1a64      	subs	r4, r4, r1
 801fdb2:	4439      	add	r1, r7
 801fdb4:	b289      	uxth	r1, r1
 801fdb6:	8704      	strh	r4, [r0, #56]	; 0x38
 801fdb8:	2909      	cmp	r1, #9
 801fdba:	bf88      	it	hi
 801fdbc:	390a      	subhi	r1, #10
 801fdbe:	86c1      	strh	r1, [r0, #54]	; 0x36
 801fdc0:	b18a      	cbz	r2, 801fde6 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 801fdc2:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 801fdc4:	3a01      	subs	r2, #1
 801fdc6:	3101      	adds	r1, #1
 801fdc8:	b292      	uxth	r2, r2
 801fdca:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 801fdce:	8701      	strh	r1, [r0, #56]	; 0x38
 801fdd0:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 801fdd2:	b901      	cbnz	r1, 801fdd6 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
 801fdd4:	86c5      	strh	r5, [r0, #54]	; 0x36
 801fdd6:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 801fdd8:	3901      	subs	r1, #1
 801fdda:	b289      	uxth	r1, r1
 801fddc:	86c1      	strh	r1, [r0, #54]	; 0x36
 801fdde:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801fde2:	844c      	strh	r4, [r1, #34]	; 0x22
 801fde4:	e7ec      	b.n	801fdc0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
 801fde6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801fdea:	f7ff bf4c 	b.w	801fc86 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

0801fdee <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801fdee:	b570      	push	{r4, r5, r6, lr}
 801fdf0:	2500      	movs	r5, #0
 801fdf2:	4295      	cmp	r5, r2
 801fdf4:	d011      	beq.n	801fe1a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 801fdf6:	8bc4      	ldrh	r4, [r0, #30]
 801fdf8:	f831 6b02 	ldrh.w	r6, [r1], #2
 801fdfc:	4414      	add	r4, r2
 801fdfe:	3c01      	subs	r4, #1
 801fe00:	1b64      	subs	r4, r4, r5
 801fe02:	b2a4      	uxth	r4, r4
 801fe04:	2c01      	cmp	r4, #1
 801fe06:	bf88      	it	hi
 801fe08:	3c02      	subhi	r4, #2
 801fe0a:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801fe0e:	8b64      	ldrh	r4, [r4, #26]
 801fe10:	42b4      	cmp	r4, r6
 801fe12:	d117      	bne.n	801fe44 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 801fe14:	3501      	adds	r5, #1
 801fe16:	b2ad      	uxth	r5, r5
 801fe18:	e7eb      	b.n	801fdf2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 801fe1a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801fe1e:	2400      	movs	r4, #0
 801fe20:	4413      	add	r3, r2
 801fe22:	b2a2      	uxth	r2, r4
 801fe24:	429a      	cmp	r2, r3
 801fe26:	da0f      	bge.n	801fe48 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 801fe28:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 801fe2a:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801fe2e:	3401      	adds	r4, #1
 801fe30:	4432      	add	r2, r6
 801fe32:	b292      	uxth	r2, r2
 801fe34:	2a09      	cmp	r2, #9
 801fe36:	bf88      	it	hi
 801fe38:	3a0a      	subhi	r2, #10
 801fe3a:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801fe3e:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 801fe40:	42aa      	cmp	r2, r5
 801fe42:	d0ee      	beq.n	801fe22 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 801fe44:	2000      	movs	r0, #0
 801fe46:	bd70      	pop	{r4, r5, r6, pc}
 801fe48:	2001      	movs	r0, #1
 801fe4a:	e7fc      	b.n	801fe46 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

0801fe4c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801fe4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fe50:	4605      	mov	r5, r0
 801fe52:	4616      	mov	r6, r2
 801fe54:	1c8c      	adds	r4, r1, #2
 801fe56:	8809      	ldrh	r1, [r1, #0]
 801fe58:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801fe5c:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801fe60:	42b3      	cmp	r3, r6
 801fe62:	d124      	bne.n	801feae <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801fe64:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801fe68:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801fe6c:	f001 070f 	and.w	r7, r1, #15
 801fe70:	4652      	mov	r2, sl
 801fe72:	f8cd 8000 	str.w	r8, [sp]
 801fe76:	464b      	mov	r3, r9
 801fe78:	4621      	mov	r1, r4
 801fe7a:	4628      	mov	r0, r5
 801fe7c:	f7ff ffb7 	bl	801fdee <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801fe80:	4683      	mov	fp, r0
 801fe82:	b168      	cbz	r0, 801fea0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801fe84:	eb0a 0109 	add.w	r1, sl, r9
 801fe88:	463a      	mov	r2, r7
 801fe8a:	4628      	mov	r0, r5
 801fe8c:	4441      	add	r1, r8
 801fe8e:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801fe92:	4649      	mov	r1, r9
 801fe94:	f7ff ff52 	bl	801fd3c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801fe98:	4658      	mov	r0, fp
 801fe9a:	b003      	add	sp, #12
 801fe9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fea0:	eb07 010a 	add.w	r1, r7, sl
 801fea4:	4449      	add	r1, r9
 801fea6:	4441      	add	r1, r8
 801fea8:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801feac:	e7d2      	b.n	801fe54 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801feae:	f04f 0b00 	mov.w	fp, #0
 801feb2:	e7f1      	b.n	801fe98 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801feb4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801feb4:	b570      	push	{r4, r5, r6, lr}
 801feb6:	8810      	ldrh	r0, [r2, #0]
 801feb8:	4298      	cmp	r0, r3
 801feba:	d817      	bhi.n	801feec <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801febc:	1e48      	subs	r0, r1, #1
 801febe:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801fec2:	4298      	cmp	r0, r3
 801fec4:	d312      	bcc.n	801feec <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801fec6:	2400      	movs	r4, #0
 801fec8:	428c      	cmp	r4, r1
 801feca:	d20f      	bcs.n	801feec <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801fecc:	1860      	adds	r0, r4, r1
 801fece:	1040      	asrs	r0, r0, #1
 801fed0:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801fed4:	0085      	lsls	r5, r0, #2
 801fed6:	42b3      	cmp	r3, r6
 801fed8:	d902      	bls.n	801fee0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801feda:	3001      	adds	r0, #1
 801fedc:	b284      	uxth	r4, r0
 801fede:	e7f3      	b.n	801fec8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801fee0:	d201      	bcs.n	801fee6 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801fee2:	b281      	uxth	r1, r0
 801fee4:	e7f0      	b.n	801fec8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801fee6:	442a      	add	r2, r5
 801fee8:	8850      	ldrh	r0, [r2, #2]
 801feea:	bd70      	pop	{r4, r5, r6, pc}
 801feec:	2000      	movs	r0, #0
 801feee:	e7fc      	b.n	801feea <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0801fef0 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801fef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fef4:	6c45      	ldr	r5, [r0, #68]	; 0x44
 801fef6:	4604      	mov	r4, r0
 801fef8:	260b      	movs	r6, #11
 801fefa:	886f      	ldrh	r7, [r5, #2]
 801fefc:	087f      	lsrs	r7, r7, #1
 801fefe:	3e01      	subs	r6, #1
 801ff00:	d013      	beq.n	801ff2a <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801ff02:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801ff04:	462a      	mov	r2, r5
 801ff06:	4639      	mov	r1, r7
 801ff08:	4620      	mov	r0, r4
 801ff0a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801ff0e:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801ff12:	4643      	mov	r3, r8
 801ff14:	f7ff ffce 	bl	801feb4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801ff18:	b138      	cbz	r0, 801ff2a <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801ff1a:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801ff1e:	4642      	mov	r2, r8
 801ff20:	4620      	mov	r0, r4
 801ff22:	f7ff ff93 	bl	801fe4c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801ff26:	2800      	cmp	r0, #0
 801ff28:	d1e9      	bne.n	801fefe <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801ff2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0801ff30 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 801ff30:	b570      	push	{r4, r5, r6, lr}
 801ff32:	694a      	ldr	r2, [r1, #20]
 801ff34:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 801ff36:	684b      	ldr	r3, [r1, #4]
 801ff38:	1b54      	subs	r4, r2, r5
 801ff3a:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 801ff3c:	f000 8106 	beq.w	802014c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 801ff40:	1b9b      	subs	r3, r3, r6
 801ff42:	d003      	beq.n	801ff4c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801ff44:	4363      	muls	r3, r4
 801ff46:	2210      	movs	r2, #16
 801ff48:	fb93 f3f2 	sdiv	r3, r3, r2
 801ff4c:	680c      	ldr	r4, [r1, #0]
 801ff4e:	698a      	ldr	r2, [r1, #24]
 801ff50:	1b65      	subs	r5, r4, r5
 801ff52:	f000 80fd 	beq.w	8020150 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 801ff56:	1b92      	subs	r2, r2, r6
 801ff58:	d003      	beq.n	801ff62 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801ff5a:	436a      	muls	r2, r5
 801ff5c:	2410      	movs	r4, #16
 801ff5e:	fb92 f2f4 	sdiv	r2, r2, r4
 801ff62:	1a9b      	subs	r3, r3, r2
 801ff64:	ed9f 4a89 	vldr	s8, [pc, #548]	; 802018c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 801ff68:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801ff6c:	460a      	mov	r2, r1
 801ff6e:	ee07 3a90 	vmov	s15, r3
 801ff72:	f100 040c 	add.w	r4, r0, #12
 801ff76:	4603      	mov	r3, r0
 801ff78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ff7c:	ee67 7a84 	vmul.f32	s15, s15, s8
 801ff80:	ee87 3a27 	vdiv.f32	s6, s14, s15
 801ff84:	eeb1 6a43 	vneg.f32	s12, s6
 801ff88:	edd2 7a02 	vldr	s15, [r2, #8]
 801ff8c:	3214      	adds	r2, #20
 801ff8e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801ff92:	ece3 6a01 	vstmia	r3!, {s13}
 801ff96:	429c      	cmp	r4, r3
 801ff98:	ed52 7a02 	vldr	s15, [r2, #-8]
 801ff9c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801ffa0:	edc3 7a02 	vstr	s15, [r3, #8]
 801ffa4:	ed52 7a01 	vldr	s15, [r2, #-4]
 801ffa8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801ffac:	edc3 7a05 	vstr	s15, [r3, #20]
 801ffb0:	d1ea      	bne.n	801ff88 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 801ffb2:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801ffb4:	698b      	ldr	r3, [r1, #24]
 801ffb6:	edd0 4a02 	vldr	s9, [r0, #8]
 801ffba:	1a9b      	subs	r3, r3, r2
 801ffbc:	edd0 3a00 	vldr	s7, [r0]
 801ffc0:	edd0 6a01 	vldr	s13, [r0, #4]
 801ffc4:	ee07 3a90 	vmov	s15, r3
 801ffc8:	684b      	ldr	r3, [r1, #4]
 801ffca:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801ffce:	ed90 5a05 	vldr	s10, [r0, #20]
 801ffd2:	1a9b      	subs	r3, r3, r2
 801ffd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ffd8:	ee73 4ae4 	vsub.f32	s9, s7, s9
 801ffdc:	ed90 2a03 	vldr	s4, [r0, #12]
 801ffe0:	ee07 3a10 	vmov	s14, r3
 801ffe4:	edd0 5a04 	vldr	s11, [r0, #16]
 801ffe8:	ee67 7a84 	vmul.f32	s15, s15, s8
 801ffec:	ed90 1a07 	vldr	s2, [r0, #28]
 801fff0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801fff4:	edd0 2a06 	vldr	s5, [r0, #24]
 801fff8:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801fffc:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 8020000:	ee27 7a04 	vmul.f32	s14, s14, s8
 8020004:	ee32 5a45 	vsub.f32	s10, s4, s10
 8020008:	eee6 7a87 	vfma.f32	s15, s13, s14
 802000c:	ee67 7a83 	vmul.f32	s15, s15, s6
 8020010:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 8020014:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8020016:	694a      	ldr	r2, [r1, #20]
 8020018:	1b13      	subs	r3, r2, r4
 802001a:	ee07 3a10 	vmov	s14, r3
 802001e:	680b      	ldr	r3, [r1, #0]
 8020020:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8020024:	1b1b      	subs	r3, r3, r4
 8020026:	ee27 7a04 	vmul.f32	s14, s14, s8
 802002a:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 802002e:	ee07 3a10 	vmov	s14, r3
 8020032:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8020036:	ee27 7a04 	vmul.f32	s14, s14, s8
 802003a:	eee6 4a87 	vfma.f32	s9, s13, s14
 802003e:	ee64 4a86 	vmul.f32	s9, s9, s12
 8020042:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 8020046:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8020048:	698b      	ldr	r3, [r1, #24]
 802004a:	1a9b      	subs	r3, r3, r2
 802004c:	ee06 3a90 	vmov	s13, r3
 8020050:	684b      	ldr	r3, [r1, #4]
 8020052:	1a9b      	subs	r3, r3, r2
 8020054:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8020058:	ee07 3a10 	vmov	s14, r3
 802005c:	ee66 6a84 	vmul.f32	s13, s13, s8
 8020060:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8020064:	ee65 6a66 	vnmul.f32	s13, s10, s13
 8020068:	ee27 7a04 	vmul.f32	s14, s14, s8
 802006c:	eee5 6a87 	vfma.f32	s13, s11, s14
 8020070:	ee66 6a83 	vmul.f32	s13, s13, s6
 8020074:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 8020078:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 802007a:	694a      	ldr	r2, [r1, #20]
 802007c:	1b13      	subs	r3, r2, r4
 802007e:	ee07 3a10 	vmov	s14, r3
 8020082:	680b      	ldr	r3, [r1, #0]
 8020084:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8020088:	1b1b      	subs	r3, r3, r4
 802008a:	ee27 7a04 	vmul.f32	s14, s14, s8
 802008e:	ee25 5a47 	vnmul.f32	s10, s10, s14
 8020092:	ee07 3a10 	vmov	s14, r3
 8020096:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 802009a:	ee27 7a04 	vmul.f32	s14, s14, s8
 802009e:	eea5 5a87 	vfma.f32	s10, s11, s14
 80200a2:	edd0 5a08 	vldr	s11, [r0, #32]
 80200a6:	ee31 1a65 	vsub.f32	s2, s2, s11
 80200aa:	ee72 5ae5 	vsub.f32	s11, s5, s11
 80200ae:	ee25 5a06 	vmul.f32	s10, s10, s12
 80200b2:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 80200b6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80200b8:	698b      	ldr	r3, [r1, #24]
 80200ba:	1a9b      	subs	r3, r3, r2
 80200bc:	ee07 3a10 	vmov	s14, r3
 80200c0:	684b      	ldr	r3, [r1, #4]
 80200c2:	1a9b      	subs	r3, r3, r2
 80200c4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80200c8:	ee01 3a90 	vmov	s3, r3
 80200cc:	ee27 7a04 	vmul.f32	s14, s14, s8
 80200d0:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 80200d4:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 80200d8:	ee61 1a84 	vmul.f32	s3, s3, s8
 80200dc:	eea1 7a21 	vfma.f32	s14, s2, s3
 80200e0:	ee27 7a03 	vmul.f32	s14, s14, s6
 80200e4:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 80200e8:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 80200ea:	694a      	ldr	r2, [r1, #20]
 80200ec:	1b13      	subs	r3, r2, r4
 80200ee:	ee03 3a10 	vmov	s6, r3
 80200f2:	680b      	ldr	r3, [r1, #0]
 80200f4:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 80200f8:	1b1b      	subs	r3, r3, r4
 80200fa:	ee23 3a04 	vmul.f32	s6, s6, s8
 80200fe:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 8020102:	ee03 3a10 	vmov	s6, r3
 8020106:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 802010a:	ee23 4a04 	vmul.f32	s8, s6, s8
 802010e:	eee1 5a04 	vfma.f32	s11, s2, s8
 8020112:	ee25 6a86 	vmul.f32	s12, s11, s12
 8020116:	ee62 5a67 	vnmul.f32	s11, s4, s15
 802011a:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 802011e:	eee3 5aa6 	vfma.f32	s11, s7, s13
 8020122:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 8020126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802012a:	dd13      	ble.n	8020154 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 802012c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8020130:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 8020134:	63c3      	str	r3, [r0, #60]	; 0x3c
 8020136:	eee3 7a87 	vfma.f32	s15, s7, s14
 802013a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 802013e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020142:	dd15      	ble.n	8020170 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 8020144:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8020148:	6403      	str	r3, [r0, #64]	; 0x40
 802014a:	bd70      	pop	{r4, r5, r6, pc}
 802014c:	4623      	mov	r3, r4
 802014e:	e6fd      	b.n	801ff4c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8020150:	462a      	mov	r2, r5
 8020152:	e706      	b.n	801ff62 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8020154:	d502      	bpl.n	802015c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 8020156:	f647 73ff 	movw	r3, #32767	; 0x7fff
 802015a:	e7e9      	b.n	8020130 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 802015c:	ee22 2a64 	vnmul.f32	s4, s4, s9
 8020160:	eea3 2a85 	vfma.f32	s4, s7, s10
 8020164:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 8020168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802016c:	dade      	bge.n	802012c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 802016e:	e7f2      	b.n	8020156 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 8020170:	d502      	bpl.n	8020178 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 8020172:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8020176:	e7e7      	b.n	8020148 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 8020178:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 802017c:	eee3 4a86 	vfma.f32	s9, s7, s12
 8020180:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 8020184:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020188:	dadc      	bge.n	8020144 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 802018a:	e7f2      	b.n	8020172 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 802018c:	3d800000 	.word	0x3d800000

08020190 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 8020190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020194:	2714      	movs	r7, #20
 8020196:	435f      	muls	r7, r3
 8020198:	eb02 0c07 	add.w	ip, r2, r7
 802019c:	f8dc 5004 	ldr.w	r5, [ip, #4]
 80201a0:	f115 0e0f 	adds.w	lr, r5, #15
 80201a4:	f100 80a2 	bmi.w	80202ec <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 80201a8:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 80201ac:	9c08      	ldr	r4, [sp, #32]
 80201ae:	2614      	movs	r6, #20
 80201b0:	f8c0 e014 	str.w	lr, [r0, #20]
 80201b4:	4366      	muls	r6, r4
 80201b6:	eb02 0806 	add.w	r8, r2, r6
 80201ba:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80201be:	f115 040f 	adds.w	r4, r5, #15
 80201c2:	f100 809f 	bmi.w	8020304 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 80201c6:	1124      	asrs	r4, r4, #4
 80201c8:	eba4 040e 	sub.w	r4, r4, lr
 80201cc:	6184      	str	r4, [r0, #24]
 80201ce:	2c00      	cmp	r4, #0
 80201d0:	f000 808a 	beq.w	80202e8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 80201d4:	f8dc 9004 	ldr.w	r9, [ip, #4]
 80201d8:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80201dc:	5995      	ldr	r5, [r2, r6]
 80201de:	eba4 0809 	sub.w	r8, r4, r9
 80201e2:	59d4      	ldr	r4, [r2, r7]
 80201e4:	eba5 0a04 	sub.w	sl, r5, r4
 80201e8:	ea4f 1608 	mov.w	r6, r8, lsl #4
 80201ec:	ea4f 150a 	mov.w	r5, sl, lsl #4
 80201f0:	fb0e fe05 	mul.w	lr, lr, r5
 80201f4:	fb0a ee19 	mls	lr, sl, r9, lr
 80201f8:	fb08 e404 	mla	r4, r8, r4, lr
 80201fc:	3c01      	subs	r4, #1
 80201fe:	19a4      	adds	r4, r4, r6
 8020200:	f100 808c 	bmi.w	802031c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 8020204:	fb94 fef6 	sdiv	lr, r4, r6
 8020208:	fb06 441e 	mls	r4, r6, lr, r4
 802020c:	f8c0 e000 	str.w	lr, [r0]
 8020210:	6104      	str	r4, [r0, #16]
 8020212:	2d00      	cmp	r5, #0
 8020214:	f2c0 8095 	blt.w	8020342 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 8020218:	fb95 f4f6 	sdiv	r4, r5, r6
 802021c:	fb06 5514 	mls	r5, r6, r4, r5
 8020220:	6044      	str	r4, [r0, #4]
 8020222:	6085      	str	r5, [r0, #8]
 8020224:	60c6      	str	r6, [r0, #12]
 8020226:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 802022a:	f8dc 4004 	ldr.w	r4, [ip, #4]
 802022e:	6945      	ldr	r5, [r0, #20]
 8020230:	59d2      	ldr	r2, [r2, r7]
 8020232:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 8020236:	eddf 6a4b 	vldr	s13, [pc, #300]	; 8020364 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 802023a:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 802023e:	ee07 4a10 	vmov	s14, r4
 8020242:	6804      	ldr	r4, [r0, #0]
 8020244:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 8020248:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 802024c:	ee07 2a90 	vmov	s15, r2
 8020250:	ee27 7a26 	vmul.f32	s14, s14, s13
 8020254:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8020258:	ee67 7aa6 	vmul.f32	s15, s15, s13
 802025c:	edd3 6a00 	vldr	s13, [r3]
 8020260:	eee6 6a07 	vfma.f32	s13, s12, s14
 8020264:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 8020268:	eee6 6a27 	vfma.f32	s13, s12, s15
 802026c:	edc0 6a07 	vstr	s13, [r0, #28]
 8020270:	edd0 6a01 	vldr	s13, [r0, #4]
 8020274:	edd1 5a09 	vldr	s11, [r1, #36]	; 0x24
 8020278:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 802027c:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 8020280:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8020284:	ed80 6a08 	vstr	s12, [r0, #32]
 8020288:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 802028a:	6242      	str	r2, [r0, #36]	; 0x24
 802028c:	edd1 5a0c 	vldr	s11, [r1, #48]	; 0x30
 8020290:	ed93 6a03 	vldr	s12, [r3, #12]
 8020294:	eea5 6a87 	vfma.f32	s12, s11, s14
 8020298:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 802029c:	eea5 6aa7 	vfma.f32	s12, s11, s15
 80202a0:	ed80 6a0a 	vstr	s12, [r0, #40]	; 0x28
 80202a4:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 80202a8:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 80202ac:	eea6 6aa5 	vfma.f32	s12, s13, s11
 80202b0:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
 80202b4:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80202b6:	6302      	str	r2, [r0, #48]	; 0x30
 80202b8:	ed93 6a06 	vldr	s12, [r3, #24]
 80202bc:	edd1 5a0e 	vldr	s11, [r1, #56]	; 0x38
 80202c0:	eea5 6a87 	vfma.f32	s12, s11, s14
 80202c4:	eeb0 7a46 	vmov.f32	s14, s12
 80202c8:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 80202cc:	eea6 7a27 	vfma.f32	s14, s12, s15
 80202d0:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 80202d4:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 80202d8:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 80202dc:	eee6 7a87 	vfma.f32	s15, s13, s14
 80202e0:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
 80202e4:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80202e6:	63c3      	str	r3, [r0, #60]	; 0x3c
 80202e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80202ec:	2410      	movs	r4, #16
 80202ee:	f1c5 0501 	rsb	r5, r5, #1
 80202f2:	fb9e fef4 	sdiv	lr, lr, r4
 80202f6:	f015 050f 	ands.w	r5, r5, #15
 80202fa:	bf18      	it	ne
 80202fc:	2501      	movne	r5, #1
 80202fe:	ebae 0e05 	sub.w	lr, lr, r5
 8020302:	e753      	b.n	80201ac <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 8020304:	f04f 0910 	mov.w	r9, #16
 8020308:	f1c5 0501 	rsb	r5, r5, #1
 802030c:	fb94 f4f9 	sdiv	r4, r4, r9
 8020310:	f015 050f 	ands.w	r5, r5, #15
 8020314:	bf18      	it	ne
 8020316:	2501      	movne	r5, #1
 8020318:	1b64      	subs	r4, r4, r5
 802031a:	e755      	b.n	80201c8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 802031c:	4264      	negs	r4, r4
 802031e:	fb94 fef6 	sdiv	lr, r4, r6
 8020322:	f1ce 0800 	rsb	r8, lr, #0
 8020326:	fb06 441e 	mls	r4, r6, lr, r4
 802032a:	f8c0 8000 	str.w	r8, [r0]
 802032e:	6104      	str	r4, [r0, #16]
 8020330:	2c00      	cmp	r4, #0
 8020332:	f43f af6e 	beq.w	8020212 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 8020336:	ea6f 0e0e 	mvn.w	lr, lr
 802033a:	1b34      	subs	r4, r6, r4
 802033c:	f8c0 e000 	str.w	lr, [r0]
 8020340:	e766      	b.n	8020210 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 8020342:	426d      	negs	r5, r5
 8020344:	fb95 f4f6 	sdiv	r4, r5, r6
 8020348:	f1c4 0e00 	rsb	lr, r4, #0
 802034c:	fb06 5514 	mls	r5, r6, r4, r5
 8020350:	f8c0 e004 	str.w	lr, [r0, #4]
 8020354:	6085      	str	r5, [r0, #8]
 8020356:	2d00      	cmp	r5, #0
 8020358:	f43f af64 	beq.w	8020224 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 802035c:	43e4      	mvns	r4, r4
 802035e:	1b75      	subs	r5, r6, r5
 8020360:	6044      	str	r4, [r0, #4]
 8020362:	e75e      	b.n	8020222 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 8020364:	3d800000 	.word	0x3d800000

08020368 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 8020368:	4b01      	ldr	r3, [pc, #4]	; (8020370 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 802036a:	6018      	str	r0, [r3, #0]
 802036c:	4770      	bx	lr
 802036e:	bf00      	nop
 8020370:	240262a0 	.word	0x240262a0

08020374 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 8020374:	4b06      	ldr	r3, [pc, #24]	; (8020390 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 8020376:	881a      	ldrh	r2, [r3, #0]
 8020378:	4282      	cmp	r2, r0
 802037a:	d807      	bhi.n	802038c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 802037c:	4b05      	ldr	r3, [pc, #20]	; (8020394 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 802037e:	881b      	ldrh	r3, [r3, #0]
 8020380:	4413      	add	r3, r2
 8020382:	4298      	cmp	r0, r3
 8020384:	bfac      	ite	ge
 8020386:	2000      	movge	r0, #0
 8020388:	2001      	movlt	r0, #1
 802038a:	4770      	bx	lr
 802038c:	2000      	movs	r0, #0
 802038e:	4770      	bx	lr
 8020390:	240262c0 	.word	0x240262c0
 8020394:	240262c4 	.word	0x240262c4

08020398 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 8020398:	b508      	push	{r3, lr}
 802039a:	4601      	mov	r1, r0
 802039c:	f7ff ffea 	bl	8020374 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 80203a0:	b118      	cbz	r0, 80203aa <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 80203a2:	4b02      	ldr	r3, [pc, #8]	; (80203ac <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 80203a4:	681b      	ldr	r3, [r3, #0]
 80203a6:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 80203aa:	bd08      	pop	{r3, pc}
 80203ac:	240262a4 	.word	0x240262a4

080203b0 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>:
 80203b0:	b538      	push	{r3, r4, r5, lr}
 80203b2:	4604      	mov	r4, r0
 80203b4:	f7ff ffde 	bl	8020374 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 80203b8:	b188      	cbz	r0, 80203de <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x2e>
 80203ba:	4b09      	ldr	r3, [pc, #36]	; (80203e0 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x30>)
 80203bc:	881a      	ldrh	r2, [r3, #0]
 80203be:	4b09      	ldr	r3, [pc, #36]	; (80203e4 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x34>)
 80203c0:	1aa4      	subs	r4, r4, r2
 80203c2:	220e      	movs	r2, #14
 80203c4:	681d      	ldr	r5, [r3, #0]
 80203c6:	4362      	muls	r2, r4
 80203c8:	18ac      	adds	r4, r5, r2
 80203ca:	7b23      	ldrb	r3, [r4, #12]
 80203cc:	f013 0320 	ands.w	r3, r3, #32
 80203d0:	bf17      	itett	ne
 80203d2:	680b      	ldrne	r3, [r1, #0]
 80203d4:	4618      	moveq	r0, r3
 80203d6:	50ab      	strne	r3, [r5, r2]
 80203d8:	684b      	ldrne	r3, [r1, #4]
 80203da:	bf18      	it	ne
 80203dc:	6063      	strne	r3, [r4, #4]
 80203de:	bd38      	pop	{r3, r4, r5, pc}
 80203e0:	240262c0 	.word	0x240262c0
 80203e4:	240262a8 	.word	0x240262a8

080203e8 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>:
 80203e8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80203ec:	4606      	mov	r6, r0
 80203ee:	460c      	mov	r4, r1
 80203f0:	f7ff ffc0 	bl	8020374 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 80203f4:	b918      	cbnz	r0, 80203fe <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x16>
 80203f6:	2000      	movs	r0, #0
 80203f8:	b002      	add	sp, #8
 80203fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80203fe:	4608      	mov	r0, r1
 8020400:	f7f9 fff5 	bl	801a3ee <_ZNK8touchgfx4Rect7isEmptyEv>
 8020404:	2800      	cmp	r0, #0
 8020406:	d1f6      	bne.n	80203f6 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 8020408:	4b3f      	ldr	r3, [pc, #252]	; (8020508 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x120>)
 802040a:	f8df 9100 	ldr.w	r9, [pc, #256]	; 802050c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x124>
 802040e:	881d      	ldrh	r5, [r3, #0]
 8020410:	f8d9 a000 	ldr.w	sl, [r9]
 8020414:	46c8      	mov	r8, r9
 8020416:	1b73      	subs	r3, r6, r5
 8020418:	250e      	movs	r5, #14
 802041a:	435d      	muls	r5, r3
 802041c:	eb0a 0705 	add.w	r7, sl, r5
 8020420:	7b3b      	ldrb	r3, [r7, #12]
 8020422:	f013 0f20 	tst.w	r3, #32
 8020426:	d0e6      	beq.n	80203f6 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 8020428:	4621      	mov	r1, r4
 802042a:	4638      	mov	r0, r7
 802042c:	f7fd fab6 	bl	801d99c <_ZNK8touchgfx4Rect8includesERKS0_>
 8020430:	2800      	cmp	r0, #0
 8020432:	d1e1      	bne.n	80203f8 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 8020434:	4639      	mov	r1, r7
 8020436:	4620      	mov	r0, r4
 8020438:	f7fd fab0 	bl	801d99c <_ZNK8touchgfx4Rect8includesERKS0_>
 802043c:	b108      	cbz	r0, 8020442 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x5a>
 802043e:	4621      	mov	r1, r4
 8020440:	e020      	b.n	8020484 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9c>
 8020442:	f9b4 2000 	ldrsh.w	r2, [r4]
 8020446:	f93a 3005 	ldrsh.w	r3, [sl, r5]
 802044a:	429a      	cmp	r2, r3
 802044c:	d11e      	bne.n	802048c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 802044e:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8020452:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8020456:	429a      	cmp	r2, r3
 8020458:	d118      	bne.n	802048c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 802045a:	6820      	ldr	r0, [r4, #0]
 802045c:	466b      	mov	r3, sp
 802045e:	6861      	ldr	r1, [r4, #4]
 8020460:	c303      	stmia	r3!, {r0, r1}
 8020462:	4639      	mov	r1, r7
 8020464:	4668      	mov	r0, sp
 8020466:	f7fd fabf 	bl	801d9e8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 802046a:	f8d9 3000 	ldr.w	r3, [r9]
 802046e:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8020472:	442b      	add	r3, r5
 8020474:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8020478:	4413      	add	r3, r2
 802047a:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 802047e:	4293      	cmp	r3, r2
 8020480:	dc04      	bgt.n	802048c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 8020482:	4669      	mov	r1, sp
 8020484:	4630      	mov	r0, r6
 8020486:	f7ff ff93 	bl	80203b0 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>
 802048a:	e7b5      	b.n	80203f8 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 802048c:	f8d8 3000 	ldr.w	r3, [r8]
 8020490:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8020494:	442b      	add	r3, r5
 8020496:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 802049a:	4291      	cmp	r1, r2
 802049c:	d119      	bne.n	80204d2 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 802049e:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 80204a2:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80204a6:	4291      	cmp	r1, r2
 80204a8:	d113      	bne.n	80204d2 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 80204aa:	6820      	ldr	r0, [r4, #0]
 80204ac:	466a      	mov	r2, sp
 80204ae:	6861      	ldr	r1, [r4, #4]
 80204b0:	c203      	stmia	r2!, {r0, r1}
 80204b2:	4619      	mov	r1, r3
 80204b4:	4668      	mov	r0, sp
 80204b6:	f7fd fa97 	bl	801d9e8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80204ba:	f8d8 3000 	ldr.w	r3, [r8]
 80204be:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 80204c2:	442b      	add	r3, r5
 80204c4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80204c8:	4413      	add	r3, r2
 80204ca:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 80204ce:	4293      	cmp	r3, r2
 80204d0:	ddd7      	ble.n	8020482 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9a>
 80204d2:	4620      	mov	r0, r4
 80204d4:	f7f9 ff8b 	bl	801a3ee <_ZNK8touchgfx4Rect7isEmptyEv>
 80204d8:	b990      	cbnz	r0, 8020500 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x118>
 80204da:	88a7      	ldrh	r7, [r4, #4]
 80204dc:	88e3      	ldrh	r3, [r4, #6]
 80204de:	fb17 f703 	smulbb	r7, r7, r3
 80204e2:	f8d8 3000 	ldr.w	r3, [r8]
 80204e6:	441d      	add	r5, r3
 80204e8:	4628      	mov	r0, r5
 80204ea:	f7f9 ff80 	bl	801a3ee <_ZNK8touchgfx4Rect7isEmptyEv>
 80204ee:	b948      	cbnz	r0, 8020504 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x11c>
 80204f0:	88ab      	ldrh	r3, [r5, #4]
 80204f2:	88ea      	ldrh	r2, [r5, #6]
 80204f4:	fb13 f302 	smulbb	r3, r3, r2
 80204f8:	42bb      	cmp	r3, r7
 80204fa:	f6bf af7c 	bge.w	80203f6 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 80204fe:	e79e      	b.n	802043e <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x56>
 8020500:	2700      	movs	r7, #0
 8020502:	e7ee      	b.n	80204e2 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xfa>
 8020504:	2300      	movs	r3, #0
 8020506:	e7f7      	b.n	80204f8 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x110>
 8020508:	240262c0 	.word	0x240262c0
 802050c:	240262a8 	.word	0x240262a8

08020510 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 8020510:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020512:	4c24      	ldr	r4, [pc, #144]	; (80205a4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 8020514:	6823      	ldr	r3, [r4, #0]
 8020516:	2b00      	cmp	r3, #0
 8020518:	d042      	beq.n	80205a0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 802051a:	4a23      	ldr	r2, [pc, #140]	; (80205a8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 802051c:	4d23      	ldr	r5, [pc, #140]	; (80205ac <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 802051e:	8811      	ldrh	r1, [r2, #0]
 8020520:	f8b5 c000 	ldrh.w	ip, [r5]
 8020524:	4822      	ldr	r0, [pc, #136]	; (80205b0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 8020526:	4461      	add	r1, ip
 8020528:	1c4a      	adds	r2, r1, #1
 802052a:	008f      	lsls	r7, r1, #2
 802052c:	f022 0201 	bic.w	r2, r2, #1
 8020530:	19de      	adds	r6, r3, r7
 8020532:	0412      	lsls	r2, r2, #16
 8020534:	6006      	str	r6, [r0, #0]
 8020536:	4e1f      	ldr	r6, [pc, #124]	; (80205b4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 8020538:	0c12      	lsrs	r2, r2, #16
 802053a:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 802053e:	19da      	adds	r2, r3, r7
 8020540:	6032      	str	r2, [r6, #0]
 8020542:	220e      	movs	r2, #14
 8020544:	fb02 f20c 	mul.w	r2, r2, ip
 8020548:	3203      	adds	r2, #3
 802054a:	f022 0203 	bic.w	r2, r2, #3
 802054e:	443a      	add	r2, r7
 8020550:	4f19      	ldr	r7, [pc, #100]	; (80205b8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 8020552:	4413      	add	r3, r2
 8020554:	603b      	str	r3, [r7, #0]
 8020556:	2300      	movs	r3, #0
 8020558:	4f18      	ldr	r7, [pc, #96]	; (80205bc <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 802055a:	469c      	mov	ip, r3
 802055c:	803b      	strh	r3, [r7, #0]
 802055e:	4f18      	ldr	r7, [pc, #96]	; (80205c0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 8020560:	683f      	ldr	r7, [r7, #0]
 8020562:	1aba      	subs	r2, r7, r2
 8020564:	4f17      	ldr	r7, [pc, #92]	; (80205c4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 8020566:	603a      	str	r2, [r7, #0]
 8020568:	f64f 77ff 	movw	r7, #65535	; 0xffff
 802056c:	4a16      	ldr	r2, [pc, #88]	; (80205c8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 802056e:	8013      	strh	r3, [r2, #0]
 8020570:	428b      	cmp	r3, r1
 8020572:	d10d      	bne.n	8020590 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 8020574:	882d      	ldrh	r5, [r5, #0]
 8020576:	2300      	movs	r3, #0
 8020578:	6830      	ldr	r0, [r6, #0]
 802057a:	240e      	movs	r4, #14
 802057c:	429d      	cmp	r5, r3
 802057e:	d90f      	bls.n	80205a0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 8020580:	fb04 0203 	mla	r2, r4, r3, r0
 8020584:	3301      	adds	r3, #1
 8020586:	7b11      	ldrb	r1, [r2, #12]
 8020588:	f36f 1145 	bfc	r1, #5, #1
 802058c:	7311      	strb	r1, [r2, #12]
 802058e:	e7f5      	b.n	802057c <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 8020590:	6822      	ldr	r2, [r4, #0]
 8020592:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 8020596:	6802      	ldr	r2, [r0, #0]
 8020598:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 802059c:	3301      	adds	r3, #1
 802059e:	e7e7      	b.n	8020570 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 80205a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80205a2:	bf00      	nop
 80205a4:	240262a4 	.word	0x240262a4
 80205a8:	240262c0 	.word	0x240262c0
 80205ac:	240262c4 	.word	0x240262c4
 80205b0:	240262b8 	.word	0x240262b8
 80205b4:	240262a8 	.word	0x240262a8
 80205b8:	240262b0 	.word	0x240262b0
 80205bc:	240262c2 	.word	0x240262c2
 80205c0:	240262ac 	.word	0x240262ac
 80205c4:	240262bc 	.word	0x240262bc
 80205c8:	240262b4 	.word	0x240262b4

080205cc <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 80205cc:	4b06      	ldr	r3, [pc, #24]	; (80205e8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 80205ce:	681b      	ldr	r3, [r3, #0]
 80205d0:	b943      	cbnz	r3, 80205e4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 80205d2:	b139      	cbz	r1, 80205e4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 80205d4:	4b05      	ldr	r3, [pc, #20]	; (80205ec <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 80205d6:	801a      	strh	r2, [r3, #0]
 80205d8:	4b05      	ldr	r3, [pc, #20]	; (80205f0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 80205da:	6019      	str	r1, [r3, #0]
 80205dc:	4b05      	ldr	r3, [pc, #20]	; (80205f4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 80205de:	6018      	str	r0, [r3, #0]
 80205e0:	f7ff bf96 	b.w	8020510 <_ZN8touchgfx6Bitmap10clearCacheEv>
 80205e4:	4770      	bx	lr
 80205e6:	bf00      	nop
 80205e8:	240262b0 	.word	0x240262b0
 80205ec:	240262c4 	.word	0x240262c4
 80205f0:	240262ac 	.word	0x240262ac
 80205f4:	240262a4 	.word	0x240262a4

080205f8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 80205f8:	b470      	push	{r4, r5, r6}
 80205fa:	4c07      	ldr	r4, [pc, #28]	; (8020618 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 80205fc:	4605      	mov	r5, r0
 80205fe:	4610      	mov	r0, r2
 8020600:	9a03      	ldr	r2, [sp, #12]
 8020602:	6826      	ldr	r6, [r4, #0]
 8020604:	b936      	cbnz	r6, 8020614 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 8020606:	6025      	str	r5, [r4, #0]
 8020608:	4c04      	ldr	r4, [pc, #16]	; (802061c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 802060a:	8021      	strh	r1, [r4, #0]
 802060c:	4619      	mov	r1, r3
 802060e:	bc70      	pop	{r4, r5, r6}
 8020610:	f7ff bfdc 	b.w	80205cc <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 8020614:	bc70      	pop	{r4, r5, r6}
 8020616:	4770      	bx	lr
 8020618:	240262c8 	.word	0x240262c8
 802061c:	240262c0 	.word	0x240262c0

08020620 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 8020620:	4a12      	ldr	r2, [pc, #72]	; (802066c <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 8020622:	8803      	ldrh	r3, [r0, #0]
 8020624:	8812      	ldrh	r2, [r2, #0]
 8020626:	4293      	cmp	r3, r2
 8020628:	d207      	bcs.n	802063a <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 802062a:	4a11      	ldr	r2, [pc, #68]	; (8020670 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 802062c:	2114      	movs	r1, #20
 802062e:	6812      	ldr	r2, [r2, #0]
 8020630:	fb01 2303 	mla	r3, r1, r3, r2
 8020634:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8020638:	4770      	bx	lr
 802063a:	490e      	ldr	r1, [pc, #56]	; (8020674 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 802063c:	8809      	ldrh	r1, [r1, #0]
 802063e:	4411      	add	r1, r2
 8020640:	428b      	cmp	r3, r1
 8020642:	da04      	bge.n	802064e <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 8020644:	1a9b      	subs	r3, r3, r2
 8020646:	4a0c      	ldr	r2, [pc, #48]	; (8020678 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 8020648:	210e      	movs	r1, #14
 802064a:	6812      	ldr	r2, [r2, #0]
 802064c:	e7f0      	b.n	8020630 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 802064e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8020652:	4293      	cmp	r3, r2
 8020654:	d108      	bne.n	8020668 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 8020656:	4b09      	ldr	r3, [pc, #36]	; (802067c <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 8020658:	781b      	ldrb	r3, [r3, #0]
 802065a:	b91b      	cbnz	r3, 8020664 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 802065c:	4b08      	ldr	r3, [pc, #32]	; (8020680 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 802065e:	f9b3 0000 	ldrsh.w	r0, [r3]
 8020662:	4770      	bx	lr
 8020664:	4b07      	ldr	r3, [pc, #28]	; (8020684 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 8020666:	e7fa      	b.n	802065e <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 8020668:	2000      	movs	r0, #0
 802066a:	4770      	bx	lr
 802066c:	240262c0 	.word	0x240262c0
 8020670:	240262c8 	.word	0x240262c8
 8020674:	240262c4 	.word	0x240262c4
 8020678:	240262a8 	.word	0x240262a8
 802067c:	24026238 	.word	0x24026238
 8020680:	2402623a 	.word	0x2402623a
 8020684:	2402623c 	.word	0x2402623c

08020688 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 8020688:	4a12      	ldr	r2, [pc, #72]	; (80206d4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 802068a:	8803      	ldrh	r3, [r0, #0]
 802068c:	8812      	ldrh	r2, [r2, #0]
 802068e:	4293      	cmp	r3, r2
 8020690:	d207      	bcs.n	80206a2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 8020692:	4a11      	ldr	r2, [pc, #68]	; (80206d8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 8020694:	2114      	movs	r1, #20
 8020696:	6812      	ldr	r2, [r2, #0]
 8020698:	fb01 2303 	mla	r3, r1, r3, r2
 802069c:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 80206a0:	4770      	bx	lr
 80206a2:	490e      	ldr	r1, [pc, #56]	; (80206dc <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 80206a4:	8809      	ldrh	r1, [r1, #0]
 80206a6:	4411      	add	r1, r2
 80206a8:	428b      	cmp	r3, r1
 80206aa:	da04      	bge.n	80206b6 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 80206ac:	1a9b      	subs	r3, r3, r2
 80206ae:	4a0c      	ldr	r2, [pc, #48]	; (80206e0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 80206b0:	210e      	movs	r1, #14
 80206b2:	6812      	ldr	r2, [r2, #0]
 80206b4:	e7f0      	b.n	8020698 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 80206b6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80206ba:	4293      	cmp	r3, r2
 80206bc:	d108      	bne.n	80206d0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 80206be:	4b09      	ldr	r3, [pc, #36]	; (80206e4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 80206c0:	781b      	ldrb	r3, [r3, #0]
 80206c2:	b91b      	cbnz	r3, 80206cc <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 80206c4:	4b08      	ldr	r3, [pc, #32]	; (80206e8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 80206c6:	f9b3 0000 	ldrsh.w	r0, [r3]
 80206ca:	4770      	bx	lr
 80206cc:	4b07      	ldr	r3, [pc, #28]	; (80206ec <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 80206ce:	e7fa      	b.n	80206c6 <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 80206d0:	2000      	movs	r0, #0
 80206d2:	4770      	bx	lr
 80206d4:	240262c0 	.word	0x240262c0
 80206d8:	240262c8 	.word	0x240262c8
 80206dc:	240262c4 	.word	0x240262c4
 80206e0:	240262a8 	.word	0x240262a8
 80206e4:	24026238 	.word	0x24026238
 80206e8:	2402623c 	.word	0x2402623c
 80206ec:	2402623a 	.word	0x2402623a

080206f0 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 80206f0:	4a1f      	ldr	r2, [pc, #124]	; (8020770 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>)
 80206f2:	b510      	push	{r4, lr}
 80206f4:	880b      	ldrh	r3, [r1, #0]
 80206f6:	8812      	ldrh	r2, [r2, #0]
 80206f8:	4293      	cmp	r3, r2
 80206fa:	d213      	bcs.n	8020724 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 80206fc:	4a1d      	ldr	r2, [pc, #116]	; (8020774 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>)
 80206fe:	2114      	movs	r1, #20
 8020700:	6812      	ldr	r2, [r2, #0]
 8020702:	fb01 2303 	mla	r3, r1, r3, r2
 8020706:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 802070a:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 802070e:	8a1a      	ldrh	r2, [r3, #16]
 8020710:	8a5b      	ldrh	r3, [r3, #18]
 8020712:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8020716:	8004      	strh	r4, [r0, #0]
 8020718:	f3c3 030c 	ubfx	r3, r3, #0, #13
 802071c:	8041      	strh	r1, [r0, #2]
 802071e:	8082      	strh	r2, [r0, #4]
 8020720:	80c3      	strh	r3, [r0, #6]
 8020722:	e00e      	b.n	8020742 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 8020724:	4914      	ldr	r1, [pc, #80]	; (8020778 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x88>)
 8020726:	8809      	ldrh	r1, [r1, #0]
 8020728:	4411      	add	r1, r2
 802072a:	428b      	cmp	r3, r1
 802072c:	da0a      	bge.n	8020744 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x54>
 802072e:	1a9b      	subs	r3, r3, r2
 8020730:	4a12      	ldr	r2, [pc, #72]	; (802077c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 8020732:	210e      	movs	r1, #14
 8020734:	6812      	ldr	r2, [r2, #0]
 8020736:	fb01 2303 	mla	r3, r1, r3, r2
 802073a:	681a      	ldr	r2, [r3, #0]
 802073c:	6002      	str	r2, [r0, #0]
 802073e:	685a      	ldr	r2, [r3, #4]
 8020740:	6042      	str	r2, [r0, #4]
 8020742:	bd10      	pop	{r4, pc}
 8020744:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8020748:	4293      	cmp	r3, r2
 802074a:	d10b      	bne.n	8020764 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x74>
 802074c:	4b0c      	ldr	r3, [pc, #48]	; (8020780 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 802074e:	f9b3 1000 	ldrsh.w	r1, [r3]
 8020752:	4b0c      	ldr	r3, [pc, #48]	; (8020784 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 8020754:	8081      	strh	r1, [r0, #4]
 8020756:	f9b3 2000 	ldrsh.w	r2, [r3]
 802075a:	2300      	movs	r3, #0
 802075c:	80c2      	strh	r2, [r0, #6]
 802075e:	8003      	strh	r3, [r0, #0]
 8020760:	8043      	strh	r3, [r0, #2]
 8020762:	e7ee      	b.n	8020742 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 8020764:	2300      	movs	r3, #0
 8020766:	8003      	strh	r3, [r0, #0]
 8020768:	8043      	strh	r3, [r0, #2]
 802076a:	8083      	strh	r3, [r0, #4]
 802076c:	e7d8      	b.n	8020720 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 802076e:	bf00      	nop
 8020770:	240262c0 	.word	0x240262c0
 8020774:	240262c8 	.word	0x240262c8
 8020778:	240262c4 	.word	0x240262c4
 802077c:	240262a8 	.word	0x240262a8
 8020780:	24026234 	.word	0x24026234
 8020784:	24026236 	.word	0x24026236

08020788 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 8020788:	4a17      	ldr	r2, [pc, #92]	; (80207e8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
 802078a:	8803      	ldrh	r3, [r0, #0]
 802078c:	8812      	ldrh	r2, [r2, #0]
 802078e:	4293      	cmp	r3, r2
 8020790:	d213      	bcs.n	80207ba <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
 8020792:	4a16      	ldr	r2, [pc, #88]	; (80207ec <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 8020794:	2114      	movs	r1, #20
 8020796:	6812      	ldr	r2, [r2, #0]
 8020798:	fb01 2303 	mla	r3, r1, r3, r2
 802079c:	8a1a      	ldrh	r2, [r3, #16]
 802079e:	8919      	ldrh	r1, [r3, #8]
 80207a0:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80207a4:	428a      	cmp	r2, r1
 80207a6:	db1d      	blt.n	80207e4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 80207a8:	8a58      	ldrh	r0, [r3, #18]
 80207aa:	f3c0 000c 	ubfx	r0, r0, #0, #13
 80207ae:	895b      	ldrh	r3, [r3, #10]
 80207b0:	4298      	cmp	r0, r3
 80207b2:	bfac      	ite	ge
 80207b4:	2000      	movge	r0, #0
 80207b6:	2001      	movlt	r0, #1
 80207b8:	4770      	bx	lr
 80207ba:	490d      	ldr	r1, [pc, #52]	; (80207f0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 80207bc:	8809      	ldrh	r1, [r1, #0]
 80207be:	4411      	add	r1, r2
 80207c0:	428b      	cmp	r3, r1
 80207c2:	da0d      	bge.n	80207e0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 80207c4:	1a9b      	subs	r3, r3, r2
 80207c6:	4a0b      	ldr	r2, [pc, #44]	; (80207f4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 80207c8:	210e      	movs	r1, #14
 80207ca:	6812      	ldr	r2, [r2, #0]
 80207cc:	fb01 2303 	mla	r3, r1, r3, r2
 80207d0:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 80207d4:	891a      	ldrh	r2, [r3, #8]
 80207d6:	4291      	cmp	r1, r2
 80207d8:	db04      	blt.n	80207e4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 80207da:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 80207de:	e7e6      	b.n	80207ae <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x26>
 80207e0:	2000      	movs	r0, #0
 80207e2:	4770      	bx	lr
 80207e4:	2001      	movs	r0, #1
 80207e6:	4770      	bx	lr
 80207e8:	240262c0 	.word	0x240262c0
 80207ec:	240262c8 	.word	0x240262c8
 80207f0:	240262c4 	.word	0x240262c4
 80207f4:	240262a8 	.word	0x240262a8

080207f8 <_ZNK8touchgfx6Bitmap7getDataEv>:
 80207f8:	4a12      	ldr	r2, [pc, #72]	; (8020844 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 80207fa:	8803      	ldrh	r3, [r0, #0]
 80207fc:	8811      	ldrh	r1, [r2, #0]
 80207fe:	428b      	cmp	r3, r1
 8020800:	d20b      	bcs.n	802081a <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 8020802:	4a11      	ldr	r2, [pc, #68]	; (8020848 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8020804:	6812      	ldr	r2, [r2, #0]
 8020806:	b112      	cbz	r2, 802080e <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 8020808:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 802080c:	b9c0      	cbnz	r0, 8020840 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 802080e:	4a0f      	ldr	r2, [pc, #60]	; (802084c <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 8020810:	6811      	ldr	r1, [r2, #0]
 8020812:	2214      	movs	r2, #20
 8020814:	4353      	muls	r3, r2
 8020816:	58c8      	ldr	r0, [r1, r3]
 8020818:	4770      	bx	lr
 802081a:	4a0d      	ldr	r2, [pc, #52]	; (8020850 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 802081c:	8812      	ldrh	r2, [r2, #0]
 802081e:	440a      	add	r2, r1
 8020820:	4293      	cmp	r3, r2
 8020822:	da04      	bge.n	802082e <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 8020824:	4a08      	ldr	r2, [pc, #32]	; (8020848 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8020826:	6812      	ldr	r2, [r2, #0]
 8020828:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 802082c:	4770      	bx	lr
 802082e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8020832:	4293      	cmp	r3, r2
 8020834:	d103      	bne.n	802083e <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 8020836:	4b07      	ldr	r3, [pc, #28]	; (8020854 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 8020838:	681b      	ldr	r3, [r3, #0]
 802083a:	6c58      	ldr	r0, [r3, #68]	; 0x44
 802083c:	4770      	bx	lr
 802083e:	2000      	movs	r0, #0
 8020840:	4770      	bx	lr
 8020842:	bf00      	nop
 8020844:	240262c0 	.word	0x240262c0
 8020848:	240262a4 	.word	0x240262a4
 802084c:	240262c8 	.word	0x240262c8
 8020850:	240262c4 	.word	0x240262c4
 8020854:	24026240 	.word	0x24026240

08020858 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 8020858:	4b24      	ldr	r3, [pc, #144]	; (80208ec <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 802085a:	8802      	ldrh	r2, [r0, #0]
 802085c:	8818      	ldrh	r0, [r3, #0]
 802085e:	4282      	cmp	r2, r0
 8020860:	d221      	bcs.n	80208a6 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 8020862:	4b23      	ldr	r3, [pc, #140]	; (80208f0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 8020864:	6819      	ldr	r1, [r3, #0]
 8020866:	2314      	movs	r3, #20
 8020868:	fb03 1302 	mla	r3, r3, r2, r1
 802086c:	6858      	ldr	r0, [r3, #4]
 802086e:	2800      	cmp	r0, #0
 8020870:	d03a      	beq.n	80208e8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8020872:	4920      	ldr	r1, [pc, #128]	; (80208f4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8020874:	6809      	ldr	r1, [r1, #0]
 8020876:	2900      	cmp	r1, #0
 8020878:	d036      	beq.n	80208e8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 802087a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 802087e:	2900      	cmp	r1, #0
 8020880:	d032      	beq.n	80208e8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8020882:	891a      	ldrh	r2, [r3, #8]
 8020884:	8958      	ldrh	r0, [r3, #10]
 8020886:	4350      	muls	r0, r2
 8020888:	7c5a      	ldrb	r2, [r3, #17]
 802088a:	7cdb      	ldrb	r3, [r3, #19]
 802088c:	0952      	lsrs	r2, r2, #5
 802088e:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8020892:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8020896:	2b0b      	cmp	r3, #11
 8020898:	bf18      	it	ne
 802089a:	0040      	lslne	r0, r0, #1
 802089c:	3003      	adds	r0, #3
 802089e:	f020 0003 	bic.w	r0, r0, #3
 80208a2:	4408      	add	r0, r1
 80208a4:	4770      	bx	lr
 80208a6:	4b14      	ldr	r3, [pc, #80]	; (80208f8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 80208a8:	881b      	ldrh	r3, [r3, #0]
 80208aa:	4403      	add	r3, r0
 80208ac:	429a      	cmp	r2, r3
 80208ae:	da1a      	bge.n	80208e6 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 80208b0:	4b12      	ldr	r3, [pc, #72]	; (80208fc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 80208b2:	1a10      	subs	r0, r2, r0
 80208b4:	210e      	movs	r1, #14
 80208b6:	681b      	ldr	r3, [r3, #0]
 80208b8:	fb01 3000 	mla	r0, r1, r0, r3
 80208bc:	7b03      	ldrb	r3, [r0, #12]
 80208be:	f003 031f 	and.w	r3, r3, #31
 80208c2:	2b0b      	cmp	r3, #11
 80208c4:	d10b      	bne.n	80208de <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 80208c6:	8903      	ldrh	r3, [r0, #8]
 80208c8:	8940      	ldrh	r0, [r0, #10]
 80208ca:	4358      	muls	r0, r3
 80208cc:	4b09      	ldr	r3, [pc, #36]	; (80208f4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 80208ce:	3003      	adds	r0, #3
 80208d0:	6819      	ldr	r1, [r3, #0]
 80208d2:	f020 0303 	bic.w	r3, r0, #3
 80208d6:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 80208da:	4418      	add	r0, r3
 80208dc:	4770      	bx	lr
 80208de:	2b0d      	cmp	r3, #13
 80208e0:	d101      	bne.n	80208e6 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 80208e2:	300d      	adds	r0, #13
 80208e4:	4770      	bx	lr
 80208e6:	2000      	movs	r0, #0
 80208e8:	4770      	bx	lr
 80208ea:	bf00      	nop
 80208ec:	240262c0 	.word	0x240262c0
 80208f0:	240262c8 	.word	0x240262c8
 80208f4:	240262a4 	.word	0x240262a4
 80208f8:	240262c4 	.word	0x240262c4
 80208fc:	240262a8 	.word	0x240262a8

08020900 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 8020900:	4a17      	ldr	r2, [pc, #92]	; (8020960 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 8020902:	b510      	push	{r4, lr}
 8020904:	8803      	ldrh	r3, [r0, #0]
 8020906:	8812      	ldrh	r2, [r2, #0]
 8020908:	4293      	cmp	r3, r2
 802090a:	d20c      	bcs.n	8020926 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 802090c:	4a15      	ldr	r2, [pc, #84]	; (8020964 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 802090e:	2114      	movs	r1, #20
 8020910:	6812      	ldr	r2, [r2, #0]
 8020912:	fb01 2303 	mla	r3, r1, r3, r2
 8020916:	7c58      	ldrb	r0, [r3, #17]
 8020918:	0942      	lsrs	r2, r0, #5
 802091a:	7cd8      	ldrb	r0, [r3, #19]
 802091c:	f3c0 1042 	ubfx	r0, r0, #5, #3
 8020920:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 8020924:	bd10      	pop	{r4, pc}
 8020926:	4910      	ldr	r1, [pc, #64]	; (8020968 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 8020928:	8809      	ldrh	r1, [r1, #0]
 802092a:	4411      	add	r1, r2
 802092c:	428b      	cmp	r3, r1
 802092e:	da09      	bge.n	8020944 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 8020930:	1a9b      	subs	r3, r3, r2
 8020932:	4a0e      	ldr	r2, [pc, #56]	; (802096c <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 8020934:	210e      	movs	r1, #14
 8020936:	6812      	ldr	r2, [r2, #0]
 8020938:	fb01 2303 	mla	r3, r1, r3, r2
 802093c:	7b18      	ldrb	r0, [r3, #12]
 802093e:	f000 001f 	and.w	r0, r0, #31
 8020942:	e7ef      	b.n	8020924 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 8020944:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8020948:	4293      	cmp	r3, r2
 802094a:	d106      	bne.n	802095a <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 802094c:	f7e4 fe7c 	bl	8005648 <_ZN8touchgfx3HAL3lcdEv>
 8020950:	6803      	ldr	r3, [r0, #0]
 8020952:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020958:	4718      	bx	r3
 802095a:	2000      	movs	r0, #0
 802095c:	e7e2      	b.n	8020924 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 802095e:	bf00      	nop
 8020960:	240262c0 	.word	0x240262c0
 8020964:	240262c8 	.word	0x240262c8
 8020968:	240262c4 	.word	0x240262c4
 802096c:	240262a8 	.word	0x240262a8

08020970 <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 8020970:	2018      	movs	r0, #24
 8020972:	4770      	bx	lr

08020974 <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 8020974:	2001      	movs	r0, #1
 8020976:	4770      	bx	lr

08020978 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 8020978:	4b02      	ldr	r3, [pc, #8]	; (8020984 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0xc>)
 802097a:	8818      	ldrh	r0, [r3, #0]
 802097c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8020980:	b280      	uxth	r0, r0
 8020982:	4770      	bx	lr
 8020984:	2402623a 	.word	0x2402623a

08020988 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8020988:	2bff      	cmp	r3, #255	; 0xff
 802098a:	d040      	beq.n	8020a0e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x86>
 802098c:	2a2c      	cmp	r2, #44	; 0x2c
 802098e:	d02a      	beq.n	80209e6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5e>
 8020990:	d80f      	bhi.n	80209b2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2a>
 8020992:	2a08      	cmp	r2, #8
 8020994:	d037      	beq.n	8020a06 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8020996:	d805      	bhi.n	80209a4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1c>
 8020998:	2a04      	cmp	r2, #4
 802099a:	d032      	beq.n	8020a02 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7a>
 802099c:	2a05      	cmp	r2, #5
 802099e:	d02e      	beq.n	80209fe <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 80209a0:	2000      	movs	r0, #0
 80209a2:	4770      	bx	lr
 80209a4:	2a0a      	cmp	r2, #10
 80209a6:	d02e      	beq.n	8020a06 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80209a8:	d301      	bcc.n	80209ae <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x26>
 80209aa:	2a0b      	cmp	r2, #11
 80209ac:	d1f8      	bne.n	80209a0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80209ae:	6c00      	ldr	r0, [r0, #64]	; 0x40
 80209b0:	4770      	bx	lr
 80209b2:	2a30      	cmp	r2, #48	; 0x30
 80209b4:	d029      	beq.n	8020a0a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 80209b6:	d808      	bhi.n	80209ca <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x42>
 80209b8:	2a2e      	cmp	r2, #46	; 0x2e
 80209ba:	684b      	ldr	r3, [r1, #4]
 80209bc:	d01a      	beq.n	80209f4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 80209be:	d90b      	bls.n	80209d8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x50>
 80209c0:	781b      	ldrb	r3, [r3, #0]
 80209c2:	2b00      	cmp	r3, #0
 80209c4:	d1ec      	bne.n	80209a0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80209c6:	6a00      	ldr	r0, [r0, #32]
 80209c8:	4770      	bx	lr
 80209ca:	2a32      	cmp	r2, #50	; 0x32
 80209cc:	d01d      	beq.n	8020a0a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 80209ce:	d301      	bcc.n	80209d4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4c>
 80209d0:	2a33      	cmp	r2, #51	; 0x33
 80209d2:	d1e5      	bne.n	80209a0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80209d4:	6d00      	ldr	r0, [r0, #80]	; 0x50
 80209d6:	4770      	bx	lr
 80209d8:	781b      	ldrb	r3, [r3, #0]
 80209da:	2b00      	cmp	r3, #0
 80209dc:	d0f3      	beq.n	80209c6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x3e>
 80209de:	2b01      	cmp	r3, #1
 80209e0:	d1de      	bne.n	80209a0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80209e2:	6900      	ldr	r0, [r0, #16]
 80209e4:	4770      	bx	lr
 80209e6:	684b      	ldr	r3, [r1, #4]
 80209e8:	781b      	ldrb	r3, [r3, #0]
 80209ea:	b133      	cbz	r3, 80209fa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 80209ec:	2b01      	cmp	r3, #1
 80209ee:	d1d7      	bne.n	80209a0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80209f0:	6880      	ldr	r0, [r0, #8]
 80209f2:	4770      	bx	lr
 80209f4:	781b      	ldrb	r3, [r3, #0]
 80209f6:	2b00      	cmp	r3, #0
 80209f8:	d1d2      	bne.n	80209a0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80209fa:	6980      	ldr	r0, [r0, #24]
 80209fc:	4770      	bx	lr
 80209fe:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8020a00:	4770      	bx	lr
 8020a02:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8020a04:	4770      	bx	lr
 8020a06:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8020a08:	4770      	bx	lr
 8020a0a:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8020a0c:	4770      	bx	lr
 8020a0e:	2a2c      	cmp	r2, #44	; 0x2c
 8020a10:	d02a      	beq.n	8020a68 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe0>
 8020a12:	d80f      	bhi.n	8020a34 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xac>
 8020a14:	2a08      	cmp	r2, #8
 8020a16:	d035      	beq.n	8020a84 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfc>
 8020a18:	d805      	bhi.n	8020a26 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 8020a1a:	2a04      	cmp	r2, #4
 8020a1c:	d030      	beq.n	8020a80 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf8>
 8020a1e:	2a05      	cmp	r2, #5
 8020a20:	d1be      	bne.n	80209a0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8020a22:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8020a24:	4770      	bx	lr
 8020a26:	2a0a      	cmp	r2, #10
 8020a28:	d02c      	beq.n	8020a84 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfc>
 8020a2a:	d301      	bcc.n	8020a30 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa8>
 8020a2c:	2a0b      	cmp	r2, #11
 8020a2e:	d1b7      	bne.n	80209a0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8020a30:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8020a32:	4770      	bx	lr
 8020a34:	2a30      	cmp	r2, #48	; 0x30
 8020a36:	d027      	beq.n	8020a88 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x100>
 8020a38:	d808      	bhi.n	8020a4c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc4>
 8020a3a:	2a2e      	cmp	r2, #46	; 0x2e
 8020a3c:	684b      	ldr	r3, [r1, #4]
 8020a3e:	d01a      	beq.n	8020a76 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xee>
 8020a40:	d90b      	bls.n	8020a5a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xd2>
 8020a42:	781b      	ldrb	r3, [r3, #0]
 8020a44:	2b00      	cmp	r3, #0
 8020a46:	d1ab      	bne.n	80209a0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8020a48:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8020a4a:	4770      	bx	lr
 8020a4c:	2a32      	cmp	r2, #50	; 0x32
 8020a4e:	d01b      	beq.n	8020a88 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x100>
 8020a50:	d301      	bcc.n	8020a56 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xce>
 8020a52:	2a33      	cmp	r2, #51	; 0x33
 8020a54:	d1a4      	bne.n	80209a0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8020a56:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8020a58:	4770      	bx	lr
 8020a5a:	781b      	ldrb	r3, [r3, #0]
 8020a5c:	2b00      	cmp	r3, #0
 8020a5e:	d0f3      	beq.n	8020a48 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc0>
 8020a60:	2b01      	cmp	r3, #1
 8020a62:	d19d      	bne.n	80209a0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8020a64:	6940      	ldr	r0, [r0, #20]
 8020a66:	4770      	bx	lr
 8020a68:	684b      	ldr	r3, [r1, #4]
 8020a6a:	781b      	ldrb	r3, [r3, #0]
 8020a6c:	b133      	cbz	r3, 8020a7c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf4>
 8020a6e:	2b01      	cmp	r3, #1
 8020a70:	d196      	bne.n	80209a0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8020a72:	68c0      	ldr	r0, [r0, #12]
 8020a74:	4770      	bx	lr
 8020a76:	781b      	ldrb	r3, [r3, #0]
 8020a78:	2b00      	cmp	r3, #0
 8020a7a:	d191      	bne.n	80209a0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8020a7c:	69c0      	ldr	r0, [r0, #28]
 8020a7e:	4770      	bx	lr
 8020a80:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8020a82:	4770      	bx	lr
 8020a84:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8020a86:	4770      	bx	lr
 8020a88:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8020a8a:	4770      	bx	lr

08020a8c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020a90:	b085      	sub	sp, #20
 8020a92:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8020a94:	9203      	str	r2, [sp, #12]
 8020a96:	6870      	ldr	r0, [r6, #4]
 8020a98:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8020a9c:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 8020aa0:	9101      	str	r1, [sp, #4]
 8020aa2:	fa1f f885 	uxth.w	r8, r5
 8020aa6:	43ed      	mvns	r5, r5
 8020aa8:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8020aac:	b2ed      	uxtb	r5, r5
 8020aae:	fb00 2404 	mla	r4, r0, r4, r2
 8020ab2:	6832      	ldr	r2, [r6, #0]
 8020ab4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8020ab8:	4414      	add	r4, r2
 8020aba:	f8dc 2000 	ldr.w	r2, [ip]
 8020abe:	9202      	str	r2, [sp, #8]
 8020ac0:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8020ac4:	f102 0e04 	add.w	lr, r2, #4
 8020ac8:	9a01      	ldr	r2, [sp, #4]
 8020aca:	2a00      	cmp	r2, #0
 8020acc:	dc03      	bgt.n	8020ad6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8020ace:	9a03      	ldr	r2, [sp, #12]
 8020ad0:	2a00      	cmp	r2, #0
 8020ad2:	f340 8116 	ble.w	8020d02 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8020ad6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020ad8:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 8020adc:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8020ae0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8020ae2:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 8020ae6:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8020aea:	2b00      	cmp	r3, #0
 8020aec:	dd0e      	ble.n	8020b0c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8020aee:	1406      	asrs	r6, r0, #16
 8020af0:	d405      	bmi.n	8020afe <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8020af2:	4556      	cmp	r6, sl
 8020af4:	da03      	bge.n	8020afe <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8020af6:	1416      	asrs	r6, r2, #16
 8020af8:	d401      	bmi.n	8020afe <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8020afa:	454e      	cmp	r6, r9
 8020afc:	db07      	blt.n	8020b0e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8020afe:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8020b00:	3b01      	subs	r3, #1
 8020b02:	3403      	adds	r4, #3
 8020b04:	4430      	add	r0, r6
 8020b06:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8020b08:	4432      	add	r2, r6
 8020b0a:	e7ee      	b.n	8020aea <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8020b0c:	d063      	beq.n	8020bd6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8020b0e:	1e5e      	subs	r6, r3, #1
 8020b10:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8020b12:	fb07 0706 	mla	r7, r7, r6, r0
 8020b16:	143f      	asrs	r7, r7, #16
 8020b18:	d454      	bmi.n	8020bc4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8020b1a:	4557      	cmp	r7, sl
 8020b1c:	da52      	bge.n	8020bc4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8020b1e:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8020b20:	fb07 2606 	mla	r6, r7, r6, r2
 8020b24:	1436      	asrs	r6, r6, #16
 8020b26:	d44d      	bmi.n	8020bc4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8020b28:	454e      	cmp	r6, r9
 8020b2a:	da4b      	bge.n	8020bc4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8020b2c:	1ce6      	adds	r6, r4, #3
 8020b2e:	4699      	mov	r9, r3
 8020b30:	f1b9 0f00 	cmp.w	r9, #0
 8020b34:	f106 0603 	add.w	r6, r6, #3
 8020b38:	dd48      	ble.n	8020bcc <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8020b3a:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 8020b3e:	1417      	asrs	r7, r2, #16
 8020b40:	9902      	ldr	r1, [sp, #8]
 8020b42:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8020b46:	f109 39ff 	add.w	r9, r9, #4294967295
 8020b4a:	fb0b 1707 	mla	r7, fp, r7, r1
 8020b4e:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 8020b52:	9911      	ldr	r1, [sp, #68]	; 0x44
 8020b54:	f817 700a 	ldrb.w	r7, [r7, sl]
 8020b58:	fb1b fb05 	smulbb	fp, fp, r5
 8020b5c:	4408      	add	r0, r1
 8020b5e:	9912      	ldr	r1, [sp, #72]	; 0x48
 8020b60:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8020b64:	440a      	add	r2, r1
 8020b66:	eb0e 0a07 	add.w	sl, lr, r7
 8020b6a:	f81e 7007 	ldrb.w	r7, [lr, r7]
 8020b6e:	fb07 b708 	mla	r7, r7, r8, fp
 8020b72:	b2bf      	uxth	r7, r7
 8020b74:	f107 0b01 	add.w	fp, r7, #1
 8020b78:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8020b7c:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 8020b80:	fb1b fb05 	smulbb	fp, fp, r5
 8020b84:	123f      	asrs	r7, r7, #8
 8020b86:	f806 7c06 	strb.w	r7, [r6, #-6]
 8020b8a:	f89a 7001 	ldrb.w	r7, [sl, #1]
 8020b8e:	fb07 b708 	mla	r7, r7, r8, fp
 8020b92:	b2bf      	uxth	r7, r7
 8020b94:	f107 0b01 	add.w	fp, r7, #1
 8020b98:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8020b9c:	123f      	asrs	r7, r7, #8
 8020b9e:	f806 7c05 	strb.w	r7, [r6, #-5]
 8020ba2:	f89a 7002 	ldrb.w	r7, [sl, #2]
 8020ba6:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 8020baa:	fb1a fa05 	smulbb	sl, sl, r5
 8020bae:	fb07 a708 	mla	r7, r7, r8, sl
 8020bb2:	b2bf      	uxth	r7, r7
 8020bb4:	f107 0a01 	add.w	sl, r7, #1
 8020bb8:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 8020bbc:	123f      	asrs	r7, r7, #8
 8020bbe:	f806 7c04 	strb.w	r7, [r6, #-4]
 8020bc2:	e7b5      	b.n	8020b30 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8020bc4:	2700      	movs	r7, #0
 8020bc6:	1bde      	subs	r6, r3, r7
 8020bc8:	2e00      	cmp	r6, #0
 8020bca:	dc42      	bgt.n	8020c52 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8020bcc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020bd0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020bd4:	441c      	add	r4, r3
 8020bd6:	9b01      	ldr	r3, [sp, #4]
 8020bd8:	2b00      	cmp	r3, #0
 8020bda:	f340 8092 	ble.w	8020d02 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8020bde:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8020be2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020be4:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020be8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020bec:	eef0 6a62 	vmov.f32	s13, s5
 8020bf0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8020bf4:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020bf8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020bfc:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 8020c00:	eef0 6a43 	vmov.f32	s13, s6
 8020c04:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020c08:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 8020c0c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020c10:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020c14:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020c18:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020c1c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020c20:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020c24:	ee12 2a90 	vmov	r2, s5
 8020c28:	eef0 2a47 	vmov.f32	s5, s14
 8020c2c:	fb92 f3f3 	sdiv	r3, r2, r3
 8020c30:	ee13 2a10 	vmov	r2, s6
 8020c34:	9311      	str	r3, [sp, #68]	; 0x44
 8020c36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020c38:	eeb0 3a67 	vmov.f32	s6, s15
 8020c3c:	fb92 f3f3 	sdiv	r3, r2, r3
 8020c40:	9312      	str	r3, [sp, #72]	; 0x48
 8020c42:	9b01      	ldr	r3, [sp, #4]
 8020c44:	9a03      	ldr	r2, [sp, #12]
 8020c46:	3b01      	subs	r3, #1
 8020c48:	9301      	str	r3, [sp, #4]
 8020c4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020c4c:	bf08      	it	eq
 8020c4e:	4613      	moveq	r3, r2
 8020c50:	e73a      	b.n	8020ac8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8020c52:	ea5f 4a20 	movs.w	sl, r0, asr #16
 8020c56:	d44e      	bmi.n	8020cf6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8020c58:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8020c5c:	4556      	cmp	r6, sl
 8020c5e:	dd4a      	ble.n	8020cf6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8020c60:	ea5f 4b22 	movs.w	fp, r2, asr #16
 8020c64:	d447      	bmi.n	8020cf6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8020c66:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8020c6a:	4559      	cmp	r1, fp
 8020c6c:	dd43      	ble.n	8020cf6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8020c6e:	fa0f f986 	sxth.w	r9, r6
 8020c72:	9902      	ldr	r1, [sp, #8]
 8020c74:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8020c78:	fb0b 1909 	mla	r9, fp, r9, r1
 8020c7c:	f814 b006 	ldrb.w	fp, [r4, r6]
 8020c80:	f819 900a 	ldrb.w	r9, [r9, sl]
 8020c84:	fb1b fb05 	smulbb	fp, fp, r5
 8020c88:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8020c8c:	eb0e 0a09 	add.w	sl, lr, r9
 8020c90:	f81e 9009 	ldrb.w	r9, [lr, r9]
 8020c94:	fb09 b908 	mla	r9, r9, r8, fp
 8020c98:	fa1f f989 	uxth.w	r9, r9
 8020c9c:	f109 0b01 	add.w	fp, r9, #1
 8020ca0:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8020ca4:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020ca8:	f804 9006 	strb.w	r9, [r4, r6]
 8020cac:	4426      	add	r6, r4
 8020cae:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8020cb2:	f896 b001 	ldrb.w	fp, [r6, #1]
 8020cb6:	fb1b fb05 	smulbb	fp, fp, r5
 8020cba:	fb09 b908 	mla	r9, r9, r8, fp
 8020cbe:	fa1f f989 	uxth.w	r9, r9
 8020cc2:	f109 0b01 	add.w	fp, r9, #1
 8020cc6:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8020cca:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020cce:	f886 9001 	strb.w	r9, [r6, #1]
 8020cd2:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8020cd6:	f896 a002 	ldrb.w	sl, [r6, #2]
 8020cda:	fb1a fa05 	smulbb	sl, sl, r5
 8020cde:	fb09 a908 	mla	r9, r9, r8, sl
 8020ce2:	fa1f f989 	uxth.w	r9, r9
 8020ce6:	f109 0a01 	add.w	sl, r9, #1
 8020cea:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 8020cee:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020cf2:	f886 9002 	strb.w	r9, [r6, #2]
 8020cf6:	9911      	ldr	r1, [sp, #68]	; 0x44
 8020cf8:	3701      	adds	r7, #1
 8020cfa:	4408      	add	r0, r1
 8020cfc:	9912      	ldr	r1, [sp, #72]	; 0x48
 8020cfe:	440a      	add	r2, r1
 8020d00:	e761      	b.n	8020bc6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8020d02:	b005      	add	sp, #20
 8020d04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020d08 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020d08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020d0c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8020d0e:	4693      	mov	fp, r2
 8020d10:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8020d12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8020d16:	6868      	ldr	r0, [r5, #4]
 8020d18:	6877      	ldr	r7, [r6, #4]
 8020d1a:	9100      	str	r1, [sp, #0]
 8020d1c:	3704      	adds	r7, #4
 8020d1e:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 8020d22:	e9dd 8e0f 	ldrd	r8, lr, [sp, #60]	; 0x3c
 8020d26:	fb00 2404 	mla	r4, r0, r4, r2
 8020d2a:	682a      	ldr	r2, [r5, #0]
 8020d2c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8020d30:	4414      	add	r4, r2
 8020d32:	6832      	ldr	r2, [r6, #0]
 8020d34:	9201      	str	r2, [sp, #4]
 8020d36:	9a00      	ldr	r2, [sp, #0]
 8020d38:	2a00      	cmp	r2, #0
 8020d3a:	dc03      	bgt.n	8020d44 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8020d3c:	f1bb 0f00 	cmp.w	fp, #0
 8020d40:	f340 80bc 	ble.w	8020ebc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8020d44:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8020d46:	f9b6 a008 	ldrsh.w	sl, [r6, #8]
 8020d4a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8020d4e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8020d50:	f9b6 900c 	ldrsh.w	r9, [r6, #12]
 8020d54:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8020d58:	2b00      	cmp	r3, #0
 8020d5a:	dd0c      	ble.n	8020d76 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8020d5c:	1405      	asrs	r5, r0, #16
 8020d5e:	d405      	bmi.n	8020d6c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8020d60:	4555      	cmp	r5, sl
 8020d62:	da03      	bge.n	8020d6c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8020d64:	1415      	asrs	r5, r2, #16
 8020d66:	d401      	bmi.n	8020d6c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8020d68:	454d      	cmp	r5, r9
 8020d6a:	db05      	blt.n	8020d78 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8020d6c:	4440      	add	r0, r8
 8020d6e:	4472      	add	r2, lr
 8020d70:	3b01      	subs	r3, #1
 8020d72:	3403      	adds	r4, #3
 8020d74:	e7f0      	b.n	8020d58 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8020d76:	d03f      	beq.n	8020df8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf0>
 8020d78:	1e5d      	subs	r5, r3, #1
 8020d7a:	fb08 0c05 	mla	ip, r8, r5, r0
 8020d7e:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 8020d82:	d42e      	bmi.n	8020de2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8020d84:	45d4      	cmp	ip, sl
 8020d86:	da2c      	bge.n	8020de2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8020d88:	fb0e 2505 	mla	r5, lr, r5, r2
 8020d8c:	142d      	asrs	r5, r5, #16
 8020d8e:	d428      	bmi.n	8020de2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8020d90:	454d      	cmp	r5, r9
 8020d92:	da26      	bge.n	8020de2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8020d94:	1ce5      	adds	r5, r4, #3
 8020d96:	469c      	mov	ip, r3
 8020d98:	f1bc 0f00 	cmp.w	ip, #0
 8020d9c:	f105 0503 	add.w	r5, r5, #3
 8020da0:	dd25      	ble.n	8020dee <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 8020da2:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 8020da6:	ea4f 4922 	mov.w	r9, r2, asr #16
 8020daa:	f10c 3cff 	add.w	ip, ip, #4294967295
 8020dae:	4472      	add	r2, lr
 8020db0:	468a      	mov	sl, r1
 8020db2:	9901      	ldr	r1, [sp, #4]
 8020db4:	fb0a 1909 	mla	r9, sl, r9, r1
 8020db8:	1401      	asrs	r1, r0, #16
 8020dba:	4440      	add	r0, r8
 8020dbc:	f819 9001 	ldrb.w	r9, [r9, r1]
 8020dc0:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8020dc4:	eb07 0a09 	add.w	sl, r7, r9
 8020dc8:	f817 9009 	ldrb.w	r9, [r7, r9]
 8020dcc:	f805 9c06 	strb.w	r9, [r5, #-6]
 8020dd0:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8020dd4:	f805 9c05 	strb.w	r9, [r5, #-5]
 8020dd8:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8020ddc:	f805 9c04 	strb.w	r9, [r5, #-4]
 8020de0:	e7da      	b.n	8020d98 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8020de2:	2500      	movs	r5, #0
 8020de4:	eba3 0c05 	sub.w	ip, r3, r5
 8020de8:	f1bc 0f00 	cmp.w	ip, #0
 8020dec:	dc3b      	bgt.n	8020e66 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 8020dee:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020df2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020df6:	441c      	add	r4, r3
 8020df8:	9b00      	ldr	r3, [sp, #0]
 8020dfa:	2b00      	cmp	r3, #0
 8020dfc:	dd5e      	ble.n	8020ebc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8020dfe:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020e02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020e04:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020e08:	eeb0 6a62 	vmov.f32	s12, s5
 8020e0c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8020e10:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020e14:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020e18:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 8020e1c:	eeb0 6a43 	vmov.f32	s12, s6
 8020e20:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020e24:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 8020e28:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020e2c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020e30:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020e34:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020e38:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020e3c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020e40:	ee12 2a90 	vmov	r2, s5
 8020e44:	eef0 2a47 	vmov.f32	s5, s14
 8020e48:	fb92 f8f3 	sdiv	r8, r2, r3
 8020e4c:	ee13 2a10 	vmov	r2, s6
 8020e50:	eeb0 3a67 	vmov.f32	s6, s15
 8020e54:	fb92 fef3 	sdiv	lr, r2, r3
 8020e58:	9b00      	ldr	r3, [sp, #0]
 8020e5a:	3b01      	subs	r3, #1
 8020e5c:	9300      	str	r3, [sp, #0]
 8020e5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020e60:	bf08      	it	eq
 8020e62:	465b      	moveq	r3, fp
 8020e64:	e767      	b.n	8020d36 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8020e66:	ea5f 4920 	movs.w	r9, r0, asr #16
 8020e6a:	d423      	bmi.n	8020eb4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8020e6c:	f8d6 c008 	ldr.w	ip, [r6, #8]
 8020e70:	45cc      	cmp	ip, r9
 8020e72:	dd1f      	ble.n	8020eb4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8020e74:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8020e78:	d41c      	bmi.n	8020eb4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8020e7a:	68f1      	ldr	r1, [r6, #12]
 8020e7c:	4551      	cmp	r1, sl
 8020e7e:	dd19      	ble.n	8020eb4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8020e80:	fa0f fc8c 	sxth.w	ip, ip
 8020e84:	9901      	ldr	r1, [sp, #4]
 8020e86:	fb0a 1c0c 	mla	ip, sl, ip, r1
 8020e8a:	f81c c009 	ldrb.w	ip, [ip, r9]
 8020e8e:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8020e92:	f817 a00c 	ldrb.w	sl, [r7, ip]
 8020e96:	eb07 090c 	add.w	r9, r7, ip
 8020e9a:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 8020e9e:	f804 a00c 	strb.w	sl, [r4, ip]
 8020ea2:	44a4      	add	ip, r4
 8020ea4:	f899 a001 	ldrb.w	sl, [r9, #1]
 8020ea8:	f88c a001 	strb.w	sl, [ip, #1]
 8020eac:	f899 9002 	ldrb.w	r9, [r9, #2]
 8020eb0:	f88c 9002 	strb.w	r9, [ip, #2]
 8020eb4:	4440      	add	r0, r8
 8020eb6:	4472      	add	r2, lr
 8020eb8:	3501      	adds	r5, #1
 8020eba:	e793      	b.n	8020de4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xdc>
 8020ebc:	b003      	add	sp, #12
 8020ebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020ec2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020ec2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020ec6:	b085      	sub	sp, #20
 8020ec8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8020ecc:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8020ece:	9202      	str	r2, [sp, #8]
 8020ed0:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 8020ed4:	6860      	ldr	r0, [r4, #4]
 8020ed6:	9203      	str	r2, [sp, #12]
 8020ed8:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8020edc:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 8020ee0:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 8020ee4:	fb00 2505 	mla	r5, r0, r5, r2
 8020ee8:	6822      	ldr	r2, [r4, #0]
 8020eea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8020eee:	4415      	add	r5, r2
 8020ef0:	f8dc 2000 	ldr.w	r2, [ip]
 8020ef4:	9200      	str	r2, [sp, #0]
 8020ef6:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8020efa:	3204      	adds	r2, #4
 8020efc:	9201      	str	r2, [sp, #4]
 8020efe:	2900      	cmp	r1, #0
 8020f00:	dc03      	bgt.n	8020f0a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8020f02:	9a02      	ldr	r2, [sp, #8]
 8020f04:	2a00      	cmp	r2, #0
 8020f06:	f340 8127 	ble.w	8021158 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8020f0a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020f0c:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8020f10:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8020f14:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8020f16:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8020f1a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8020f1e:	2b00      	cmp	r3, #0
 8020f20:	dd0d      	ble.n	8020f3e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8020f22:	1422      	asrs	r2, r4, #16
 8020f24:	d405      	bmi.n	8020f32 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8020f26:	4542      	cmp	r2, r8
 8020f28:	da03      	bge.n	8020f32 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8020f2a:	1402      	asrs	r2, r0, #16
 8020f2c:	d401      	bmi.n	8020f32 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8020f2e:	42ba      	cmp	r2, r7
 8020f30:	db06      	blt.n	8020f40 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8020f32:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8020f34:	4474      	add	r4, lr
 8020f36:	3b01      	subs	r3, #1
 8020f38:	3503      	adds	r5, #3
 8020f3a:	4410      	add	r0, r2
 8020f3c:	e7ef      	b.n	8020f1e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8020f3e:	d075      	beq.n	802102c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 8020f40:	1e5a      	subs	r2, r3, #1
 8020f42:	fb0e 4602 	mla	r6, lr, r2, r4
 8020f46:	1436      	asrs	r6, r6, #16
 8020f48:	d465      	bmi.n	8021016 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8020f4a:	4546      	cmp	r6, r8
 8020f4c:	da63      	bge.n	8021016 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8020f4e:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8020f50:	fb06 0202 	mla	r2, r6, r2, r0
 8020f54:	1412      	asrs	r2, r2, #16
 8020f56:	d45e      	bmi.n	8021016 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8020f58:	42ba      	cmp	r2, r7
 8020f5a:	da5c      	bge.n	8021016 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8020f5c:	1cef      	adds	r7, r5, #3
 8020f5e:	4699      	mov	r9, r3
 8020f60:	f1b9 0f00 	cmp.w	r9, #0
 8020f64:	dd5d      	ble.n	8021022 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 8020f66:	1402      	asrs	r2, r0, #16
 8020f68:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8020f6c:	1426      	asrs	r6, r4, #16
 8020f6e:	4692      	mov	sl, r2
 8020f70:	9a00      	ldr	r2, [sp, #0]
 8020f72:	fb08 220a 	mla	r2, r8, sl, r2
 8020f76:	5d92      	ldrb	r2, [r2, r6]
 8020f78:	9e01      	ldr	r6, [sp, #4]
 8020f7a:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 8020f7e:	ea5f 6816 	movs.w	r8, r6, lsr #24
 8020f82:	d041      	beq.n	8021008 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8020f84:	9a03      	ldr	r2, [sp, #12]
 8020f86:	fa5f fb86 	uxtb.w	fp, r6
 8020f8a:	fb02 f808 	mul.w	r8, r2, r8
 8020f8e:	f108 0201 	add.w	r2, r8, #1
 8020f92:	eb02 2228 	add.w	r2, r2, r8, asr #8
 8020f96:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 8020f9a:	1212      	asrs	r2, r2, #8
 8020f9c:	fa1f fa82 	uxth.w	sl, r2
 8020fa0:	43d2      	mvns	r2, r2
 8020fa2:	fb1b fb0a 	smulbb	fp, fp, sl
 8020fa6:	b2d2      	uxtb	r2, r2
 8020fa8:	fb08 b802 	mla	r8, r8, r2, fp
 8020fac:	fa1f f888 	uxth.w	r8, r8
 8020fb0:	f108 0b01 	add.w	fp, r8, #1
 8020fb4:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8020fb8:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 8020fbc:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8020fc0:	fb1b fb0a 	smulbb	fp, fp, sl
 8020fc4:	ea4f 2828 	mov.w	r8, r8, asr #8
 8020fc8:	fb16 fa0a 	smulbb	sl, r6, sl
 8020fcc:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 8020fd0:	f807 8c03 	strb.w	r8, [r7, #-3]
 8020fd4:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 8020fd8:	fb06 aa02 	mla	sl, r6, r2, sl
 8020fdc:	fb08 b802 	mla	r8, r8, r2, fp
 8020fe0:	fa1f fa8a 	uxth.w	sl, sl
 8020fe4:	fa1f f888 	uxth.w	r8, r8
 8020fe8:	f10a 0601 	add.w	r6, sl, #1
 8020fec:	f108 0b01 	add.w	fp, r8, #1
 8020ff0:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 8020ff4:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8020ff8:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8020ffc:	ea4f 2828 	mov.w	r8, r8, asr #8
 8021000:	f807 ac01 	strb.w	sl, [r7, #-1]
 8021004:	f807 8c02 	strb.w	r8, [r7, #-2]
 8021008:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802100a:	4474      	add	r4, lr
 802100c:	3703      	adds	r7, #3
 802100e:	f109 39ff 	add.w	r9, r9, #4294967295
 8021012:	4410      	add	r0, r2
 8021014:	e7a4      	b.n	8020f60 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8021016:	f04f 0800 	mov.w	r8, #0
 802101a:	eba3 0208 	sub.w	r2, r3, r8
 802101e:	2a00      	cmp	r2, #0
 8021020:	dc3b      	bgt.n	802109a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 8021022:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8021026:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802102a:	441d      	add	r5, r3
 802102c:	2900      	cmp	r1, #0
 802102e:	f340 8093 	ble.w	8021158 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8021032:	ee30 0a04 	vadd.f32	s0, s0, s8
 8021036:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021038:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802103c:	3901      	subs	r1, #1
 802103e:	eeb0 6a62 	vmov.f32	s12, s5
 8021042:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8021046:	ee31 1a05 	vadd.f32	s2, s2, s10
 802104a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802104e:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8021052:	eeb0 6a43 	vmov.f32	s12, s6
 8021056:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802105a:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 802105e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021062:	ee61 7a27 	vmul.f32	s15, s2, s15
 8021066:	ee77 2a62 	vsub.f32	s5, s14, s5
 802106a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802106e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8021072:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8021076:	ee12 2a90 	vmov	r2, s5
 802107a:	eef0 2a47 	vmov.f32	s5, s14
 802107e:	fb92 fef3 	sdiv	lr, r2, r3
 8021082:	ee13 2a10 	vmov	r2, s6
 8021086:	eeb0 3a67 	vmov.f32	s6, s15
 802108a:	fb92 f3f3 	sdiv	r3, r2, r3
 802108e:	9a02      	ldr	r2, [sp, #8]
 8021090:	9312      	str	r3, [sp, #72]	; 0x48
 8021092:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021094:	bf08      	it	eq
 8021096:	4613      	moveq	r3, r2
 8021098:	e731      	b.n	8020efe <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 802109a:	1427      	asrs	r7, r4, #16
 802109c:	d456      	bmi.n	802114c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 802109e:	f8dc 6008 	ldr.w	r6, [ip, #8]
 80210a2:	42be      	cmp	r6, r7
 80210a4:	dd52      	ble.n	802114c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 80210a6:	ea5f 4920 	movs.w	r9, r0, asr #16
 80210aa:	d44f      	bmi.n	802114c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 80210ac:	f8dc 200c 	ldr.w	r2, [ip, #12]
 80210b0:	454a      	cmp	r2, r9
 80210b2:	dd4b      	ble.n	802114c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 80210b4:	9a00      	ldr	r2, [sp, #0]
 80210b6:	b236      	sxth	r6, r6
 80210b8:	fb09 2606 	mla	r6, r9, r6, r2
 80210bc:	5df2      	ldrb	r2, [r6, r7]
 80210be:	9e01      	ldr	r6, [sp, #4]
 80210c0:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 80210c4:	0e3a      	lsrs	r2, r7, #24
 80210c6:	d041      	beq.n	802114c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 80210c8:	9e03      	ldr	r6, [sp, #12]
 80210ca:	fa5f fb87 	uxtb.w	fp, r7
 80210ce:	4372      	muls	r2, r6
 80210d0:	1c56      	adds	r6, r2, #1
 80210d2:	eb06 2222 	add.w	r2, r6, r2, asr #8
 80210d6:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 80210da:	1212      	asrs	r2, r2, #8
 80210dc:	f815 9006 	ldrb.w	r9, [r5, r6]
 80210e0:	fa1f fa82 	uxth.w	sl, r2
 80210e4:	43d2      	mvns	r2, r2
 80210e6:	fb1b fb0a 	smulbb	fp, fp, sl
 80210ea:	b2d2      	uxtb	r2, r2
 80210ec:	fb09 b902 	mla	r9, r9, r2, fp
 80210f0:	fa1f f989 	uxth.w	r9, r9
 80210f4:	f109 0b01 	add.w	fp, r9, #1
 80210f8:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80210fc:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8021100:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8021104:	fb1b fb0a 	smulbb	fp, fp, sl
 8021108:	ea4f 2929 	mov.w	r9, r9, asr #8
 802110c:	fb17 fa0a 	smulbb	sl, r7, sl
 8021110:	f805 9006 	strb.w	r9, [r5, r6]
 8021114:	442e      	add	r6, r5
 8021116:	78b7      	ldrb	r7, [r6, #2]
 8021118:	f896 9001 	ldrb.w	r9, [r6, #1]
 802111c:	fb07 aa02 	mla	sl, r7, r2, sl
 8021120:	fb09 b902 	mla	r9, r9, r2, fp
 8021124:	fa1f fa8a 	uxth.w	sl, sl
 8021128:	fa1f f989 	uxth.w	r9, r9
 802112c:	f10a 0701 	add.w	r7, sl, #1
 8021130:	f109 0b01 	add.w	fp, r9, #1
 8021134:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8021138:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 802113c:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8021140:	ea4f 2929 	mov.w	r9, r9, asr #8
 8021144:	f886 a002 	strb.w	sl, [r6, #2]
 8021148:	f886 9001 	strb.w	r9, [r6, #1]
 802114c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802114e:	4474      	add	r4, lr
 8021150:	f108 0801 	add.w	r8, r8, #1
 8021154:	4410      	add	r0, r2
 8021156:	e760      	b.n	802101a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x158>
 8021158:	b005      	add	sp, #20
 802115a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802115e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802115e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021162:	b085      	sub	sp, #20
 8021164:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8021168:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802116a:	9203      	str	r2, [sp, #12]
 802116c:	6868      	ldr	r0, [r5, #4]
 802116e:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8021172:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 8021176:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 802117a:	fb00 2404 	mla	r4, r0, r4, r2
 802117e:	682a      	ldr	r2, [r5, #0]
 8021180:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8021184:	4414      	add	r4, r2
 8021186:	f8dc 2000 	ldr.w	r2, [ip]
 802118a:	9201      	str	r2, [sp, #4]
 802118c:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8021190:	3204      	adds	r2, #4
 8021192:	9202      	str	r2, [sp, #8]
 8021194:	2900      	cmp	r1, #0
 8021196:	dc03      	bgt.n	80211a0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8021198:	9a03      	ldr	r2, [sp, #12]
 802119a:	2a00      	cmp	r2, #0
 802119c:	f340 8137 	ble.w	802140e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80211a0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80211a2:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 80211a6:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80211aa:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80211ac:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 80211b0:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80211b4:	2b00      	cmp	r3, #0
 80211b6:	dd0d      	ble.n	80211d4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80211b8:	1405      	asrs	r5, r0, #16
 80211ba:	d405      	bmi.n	80211c8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80211bc:	4545      	cmp	r5, r8
 80211be:	da03      	bge.n	80211c8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80211c0:	1415      	asrs	r5, r2, #16
 80211c2:	d401      	bmi.n	80211c8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80211c4:	42bd      	cmp	r5, r7
 80211c6:	db06      	blt.n	80211d6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80211c8:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80211ca:	4470      	add	r0, lr
 80211cc:	3b01      	subs	r3, #1
 80211ce:	3403      	adds	r4, #3
 80211d0:	442a      	add	r2, r5
 80211d2:	e7ef      	b.n	80211b4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 80211d4:	d070      	beq.n	80212b8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 80211d6:	1e5d      	subs	r5, r3, #1
 80211d8:	fb0e 0605 	mla	r6, lr, r5, r0
 80211dc:	1436      	asrs	r6, r6, #16
 80211de:	d462      	bmi.n	80212a6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 80211e0:	4546      	cmp	r6, r8
 80211e2:	da60      	bge.n	80212a6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 80211e4:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80211e6:	fb06 2505 	mla	r5, r6, r5, r2
 80211ea:	142d      	asrs	r5, r5, #16
 80211ec:	d45b      	bmi.n	80212a6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 80211ee:	42bd      	cmp	r5, r7
 80211f0:	da59      	bge.n	80212a6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 80211f2:	1ce5      	adds	r5, r4, #3
 80211f4:	469a      	mov	sl, r3
 80211f6:	f1ba 0f00 	cmp.w	sl, #0
 80211fa:	dd58      	ble.n	80212ae <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 80211fc:	1416      	asrs	r6, r2, #16
 80211fe:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8021202:	1407      	asrs	r7, r0, #16
 8021204:	46b1      	mov	r9, r6
 8021206:	9e01      	ldr	r6, [sp, #4]
 8021208:	fb08 6609 	mla	r6, r8, r9, r6
 802120c:	5df6      	ldrb	r6, [r6, r7]
 802120e:	9f02      	ldr	r7, [sp, #8]
 8021210:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 8021214:	0e37      	lsrs	r7, r6, #24
 8021216:	2fff      	cmp	r7, #255	; 0xff
 8021218:	f000 80f0 	beq.w	80213fc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 802121c:	fa5f f887 	uxtb.w	r8, r7
 8021220:	b3d7      	cbz	r7, 8021298 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8021222:	fa1f f788 	uxth.w	r7, r8
 8021226:	ea6f 0808 	mvn.w	r8, r8
 802122a:	fa5f fb86 	uxtb.w	fp, r6
 802122e:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 8021232:	fa5f f888 	uxtb.w	r8, r8
 8021236:	fb1b fb07 	smulbb	fp, fp, r7
 802123a:	fb09 b908 	mla	r9, r9, r8, fp
 802123e:	fa1f f989 	uxth.w	r9, r9
 8021242:	f109 0b01 	add.w	fp, r9, #1
 8021246:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 802124a:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 802124e:	fb1b fb08 	smulbb	fp, fp, r8
 8021252:	ea4f 2929 	mov.w	r9, r9, asr #8
 8021256:	f805 9c03 	strb.w	r9, [r5, #-3]
 802125a:	f3c6 2907 	ubfx	r9, r6, #8, #8
 802125e:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8021262:	fb09 b907 	mla	r9, r9, r7, fp
 8021266:	fa1f f989 	uxth.w	r9, r9
 802126a:	f109 0b01 	add.w	fp, r9, #1
 802126e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8021272:	ea4f 2929 	mov.w	r9, r9, asr #8
 8021276:	f805 9c02 	strb.w	r9, [r5, #-2]
 802127a:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 802127e:	fb19 f808 	smulbb	r8, r9, r8
 8021282:	fb06 8607 	mla	r6, r6, r7, r8
 8021286:	b2b6      	uxth	r6, r6
 8021288:	f106 0801 	add.w	r8, r6, #1
 802128c:	eb08 2816 	add.w	r8, r8, r6, lsr #8
 8021290:	ea4f 2828 	mov.w	r8, r8, asr #8
 8021294:	f805 8c01 	strb.w	r8, [r5, #-1]
 8021298:	9e12      	ldr	r6, [sp, #72]	; 0x48
 802129a:	4470      	add	r0, lr
 802129c:	3503      	adds	r5, #3
 802129e:	f10a 3aff 	add.w	sl, sl, #4294967295
 80212a2:	4432      	add	r2, r6
 80212a4:	e7a7      	b.n	80211f6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80212a6:	2600      	movs	r6, #0
 80212a8:	1b9d      	subs	r5, r3, r6
 80212aa:	2d00      	cmp	r5, #0
 80212ac:	dc3b      	bgt.n	8021326 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 80212ae:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80212b2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80212b6:	441c      	add	r4, r3
 80212b8:	2900      	cmp	r1, #0
 80212ba:	f340 80a8 	ble.w	802140e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80212be:	ee30 0a04 	vadd.f32	s0, s0, s8
 80212c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80212c4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80212c8:	3901      	subs	r1, #1
 80212ca:	eeb0 6a62 	vmov.f32	s12, s5
 80212ce:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80212d2:	ee31 1a05 	vadd.f32	s2, s2, s10
 80212d6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80212da:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 80212de:	eeb0 6a43 	vmov.f32	s12, s6
 80212e2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80212e6:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 80212ea:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80212ee:	ee61 7a27 	vmul.f32	s15, s2, s15
 80212f2:	ee77 2a62 	vsub.f32	s5, s14, s5
 80212f6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80212fa:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80212fe:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8021302:	ee12 2a90 	vmov	r2, s5
 8021306:	eef0 2a47 	vmov.f32	s5, s14
 802130a:	fb92 fef3 	sdiv	lr, r2, r3
 802130e:	ee13 2a10 	vmov	r2, s6
 8021312:	eeb0 3a67 	vmov.f32	s6, s15
 8021316:	fb92 f3f3 	sdiv	r3, r2, r3
 802131a:	9a03      	ldr	r2, [sp, #12]
 802131c:	9312      	str	r3, [sp, #72]	; 0x48
 802131e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021320:	bf08      	it	eq
 8021322:	4613      	moveq	r3, r2
 8021324:	e736      	b.n	8021194 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8021326:	ea5f 4820 	movs.w	r8, r0, asr #16
 802132a:	d457      	bmi.n	80213dc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 802132c:	f8dc 7008 	ldr.w	r7, [ip, #8]
 8021330:	4547      	cmp	r7, r8
 8021332:	dd53      	ble.n	80213dc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8021334:	ea5f 4922 	movs.w	r9, r2, asr #16
 8021338:	d450      	bmi.n	80213dc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 802133a:	f8dc 500c 	ldr.w	r5, [ip, #12]
 802133e:	454d      	cmp	r5, r9
 8021340:	dd4c      	ble.n	80213dc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8021342:	9d01      	ldr	r5, [sp, #4]
 8021344:	b23f      	sxth	r7, r7
 8021346:	fb09 5707 	mla	r7, r9, r7, r5
 802134a:	f817 5008 	ldrb.w	r5, [r7, r8]
 802134e:	9f02      	ldr	r7, [sp, #8]
 8021350:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 8021354:	0e2f      	lsrs	r7, r5, #24
 8021356:	2fff      	cmp	r7, #255	; 0xff
 8021358:	d045      	beq.n	80213e6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 802135a:	fa5f f987 	uxtb.w	r9, r7
 802135e:	b3ef      	cbz	r7, 80213dc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8021360:	fa1f f889 	uxth.w	r8, r9
 8021364:	ea6f 0909 	mvn.w	r9, r9
 8021368:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 802136c:	fa5f fb85 	uxtb.w	fp, r5
 8021370:	f814 a007 	ldrb.w	sl, [r4, r7]
 8021374:	fa5f f989 	uxtb.w	r9, r9
 8021378:	fb1b fb08 	smulbb	fp, fp, r8
 802137c:	fb0a ba09 	mla	sl, sl, r9, fp
 8021380:	fa1f fa8a 	uxth.w	sl, sl
 8021384:	f10a 0b01 	add.w	fp, sl, #1
 8021388:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 802138c:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8021390:	f804 a007 	strb.w	sl, [r4, r7]
 8021394:	4427      	add	r7, r4
 8021396:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 802139a:	f3c5 4507 	ubfx	r5, r5, #16, #8
 802139e:	f897 b001 	ldrb.w	fp, [r7, #1]
 80213a2:	fb1b fb09 	smulbb	fp, fp, r9
 80213a6:	fb0a ba08 	mla	sl, sl, r8, fp
 80213aa:	fa1f fa8a 	uxth.w	sl, sl
 80213ae:	f10a 0b01 	add.w	fp, sl, #1
 80213b2:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 80213b6:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80213ba:	f887 a001 	strb.w	sl, [r7, #1]
 80213be:	f897 a002 	ldrb.w	sl, [r7, #2]
 80213c2:	fb1a f909 	smulbb	r9, sl, r9
 80213c6:	fb05 9508 	mla	r5, r5, r8, r9
 80213ca:	b2ad      	uxth	r5, r5
 80213cc:	f105 0901 	add.w	r9, r5, #1
 80213d0:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 80213d4:	ea4f 2929 	mov.w	r9, r9, asr #8
 80213d8:	f887 9002 	strb.w	r9, [r7, #2]
 80213dc:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80213de:	4470      	add	r0, lr
 80213e0:	3601      	adds	r6, #1
 80213e2:	442a      	add	r2, r5
 80213e4:	e760      	b.n	80212a8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 80213e6:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 80213ea:	ea4f 2815 	mov.w	r8, r5, lsr #8
 80213ee:	55e5      	strb	r5, [r4, r7]
 80213f0:	4427      	add	r7, r4
 80213f2:	0c2d      	lsrs	r5, r5, #16
 80213f4:	f887 8001 	strb.w	r8, [r7, #1]
 80213f8:	70bd      	strb	r5, [r7, #2]
 80213fa:	e7ef      	b.n	80213dc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80213fc:	0a37      	lsrs	r7, r6, #8
 80213fe:	f805 6c03 	strb.w	r6, [r5, #-3]
 8021402:	0c36      	lsrs	r6, r6, #16
 8021404:	f805 7c02 	strb.w	r7, [r5, #-2]
 8021408:	f805 6c01 	strb.w	r6, [r5, #-1]
 802140c:	e744      	b.n	8021298 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 802140e:	b005      	add	sp, #20
 8021410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021414 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021414:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021418:	9e11      	ldr	r6, [sp, #68]	; 0x44
 802141a:	9201      	str	r2, [sp, #4]
 802141c:	6870      	ldr	r0, [r6, #4]
 802141e:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 8021422:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 8021426:	fa1f fe85 	uxth.w	lr, r5
 802142a:	43ed      	mvns	r5, r5
 802142c:	f8dc 8000 	ldr.w	r8, [ip]
 8021430:	b2ed      	uxtb	r5, r5
 8021432:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 8021436:	fb00 2404 	mla	r4, r0, r4, r2
 802143a:	6832      	ldr	r2, [r6, #0]
 802143c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8021440:	4414      	add	r4, r2
 8021442:	2900      	cmp	r1, #0
 8021444:	dc03      	bgt.n	802144e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8021446:	9a01      	ldr	r2, [sp, #4]
 8021448:	2a00      	cmp	r2, #0
 802144a:	f340 810d 	ble.w	8021668 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 802144e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8021450:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 8021454:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8021458:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802145a:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 802145e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8021462:	2b00      	cmp	r3, #0
 8021464:	dd0e      	ble.n	8021484 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8021466:	1406      	asrs	r6, r0, #16
 8021468:	d405      	bmi.n	8021476 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 802146a:	4556      	cmp	r6, sl
 802146c:	da03      	bge.n	8021476 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 802146e:	1416      	asrs	r6, r2, #16
 8021470:	d401      	bmi.n	8021476 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8021472:	454e      	cmp	r6, r9
 8021474:	db07      	blt.n	8021486 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8021476:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8021478:	3b01      	subs	r3, #1
 802147a:	3403      	adds	r4, #3
 802147c:	4430      	add	r0, r6
 802147e:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8021480:	4432      	add	r2, r6
 8021482:	e7ee      	b.n	8021462 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 8021484:	d060      	beq.n	8021548 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 8021486:	1e5e      	subs	r6, r3, #1
 8021488:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 802148a:	fb07 0706 	mla	r7, r7, r6, r0
 802148e:	143f      	asrs	r7, r7, #16
 8021490:	d451      	bmi.n	8021536 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8021492:	4557      	cmp	r7, sl
 8021494:	da4f      	bge.n	8021536 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8021496:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8021498:	fb07 2606 	mla	r6, r7, r6, r2
 802149c:	1436      	asrs	r6, r6, #16
 802149e:	d44a      	bmi.n	8021536 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 80214a0:	454e      	cmp	r6, r9
 80214a2:	da48      	bge.n	8021536 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 80214a4:	1ce6      	adds	r6, r4, #3
 80214a6:	4699      	mov	r9, r3
 80214a8:	f1b9 0f00 	cmp.w	r9, #0
 80214ac:	f106 0603 	add.w	r6, r6, #3
 80214b0:	dd45      	ble.n	802153e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 80214b2:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 80214b6:	ea4f 4a20 	mov.w	sl, r0, asr #16
 80214ba:	1417      	asrs	r7, r2, #16
 80214bc:	f109 39ff 	add.w	r9, r9, #4294967295
 80214c0:	fb0b a707 	mla	r7, fp, r7, sl
 80214c4:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 80214c8:	fb1b fb05 	smulbb	fp, fp, r5
 80214cc:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80214d0:	eb08 0a07 	add.w	sl, r8, r7
 80214d4:	f818 7007 	ldrb.w	r7, [r8, r7]
 80214d8:	fb07 b70e 	mla	r7, r7, lr, fp
 80214dc:	b2bf      	uxth	r7, r7
 80214de:	f107 0b01 	add.w	fp, r7, #1
 80214e2:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 80214e6:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 80214ea:	fb1b fb05 	smulbb	fp, fp, r5
 80214ee:	123f      	asrs	r7, r7, #8
 80214f0:	f806 7c06 	strb.w	r7, [r6, #-6]
 80214f4:	f89a 7001 	ldrb.w	r7, [sl, #1]
 80214f8:	fb07 b70e 	mla	r7, r7, lr, fp
 80214fc:	b2bf      	uxth	r7, r7
 80214fe:	f107 0b01 	add.w	fp, r7, #1
 8021502:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8021506:	123f      	asrs	r7, r7, #8
 8021508:	f806 7c05 	strb.w	r7, [r6, #-5]
 802150c:	f89a 7002 	ldrb.w	r7, [sl, #2]
 8021510:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 8021514:	fb1a fa05 	smulbb	sl, sl, r5
 8021518:	fb07 a70e 	mla	r7, r7, lr, sl
 802151c:	b2bf      	uxth	r7, r7
 802151e:	f107 0a01 	add.w	sl, r7, #1
 8021522:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 8021526:	123f      	asrs	r7, r7, #8
 8021528:	f806 7c04 	strb.w	r7, [r6, #-4]
 802152c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 802152e:	4438      	add	r0, r7
 8021530:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8021532:	443a      	add	r2, r7
 8021534:	e7b8      	b.n	80214a8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8021536:	2700      	movs	r7, #0
 8021538:	1bde      	subs	r6, r3, r7
 802153a:	2e00      	cmp	r6, #0
 802153c:	dc3f      	bgt.n	80215be <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 802153e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8021542:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021546:	441c      	add	r4, r3
 8021548:	2900      	cmp	r1, #0
 802154a:	f340 808d 	ble.w	8021668 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 802154e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8021552:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021554:	ee30 0a04 	vadd.f32	s0, s0, s8
 8021558:	3901      	subs	r1, #1
 802155a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802155e:	eef0 6a62 	vmov.f32	s13, s5
 8021562:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8021566:	ee31 1a05 	vadd.f32	s2, s2, s10
 802156a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802156e:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 8021572:	eef0 6a43 	vmov.f32	s13, s6
 8021576:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802157a:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 802157e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021582:	ee61 7a27 	vmul.f32	s15, s2, s15
 8021586:	ee77 2a62 	vsub.f32	s5, s14, s5
 802158a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802158e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8021592:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8021596:	ee12 2a90 	vmov	r2, s5
 802159a:	eef0 2a47 	vmov.f32	s5, s14
 802159e:	fb92 f3f3 	sdiv	r3, r2, r3
 80215a2:	ee13 2a10 	vmov	r2, s6
 80215a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80215a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80215aa:	eeb0 3a67 	vmov.f32	s6, s15
 80215ae:	fb92 f3f3 	sdiv	r3, r2, r3
 80215b2:	9a01      	ldr	r2, [sp, #4]
 80215b4:	9310      	str	r3, [sp, #64]	; 0x40
 80215b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80215b8:	bf08      	it	eq
 80215ba:	4613      	moveq	r3, r2
 80215bc:	e741      	b.n	8021442 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 80215be:	ea5f 4920 	movs.w	r9, r0, asr #16
 80215c2:	d44b      	bmi.n	802165c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 80215c4:	f8dc b008 	ldr.w	fp, [ip, #8]
 80215c8:	45cb      	cmp	fp, r9
 80215ca:	dd47      	ble.n	802165c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 80215cc:	ea5f 4a22 	movs.w	sl, r2, asr #16
 80215d0:	d444      	bmi.n	802165c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 80215d2:	f8dc 600c 	ldr.w	r6, [ip, #12]
 80215d6:	4556      	cmp	r6, sl
 80215d8:	dd40      	ble.n	802165c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 80215da:	fa0f f68b 	sxth.w	r6, fp
 80215de:	fb0a 9906 	mla	r9, sl, r6, r9
 80215e2:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 80215e6:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 80215ea:	f814 b006 	ldrb.w	fp, [r4, r6]
 80215ee:	fb1b fb05 	smulbb	fp, fp, r5
 80215f2:	eb08 0a09 	add.w	sl, r8, r9
 80215f6:	f818 9009 	ldrb.w	r9, [r8, r9]
 80215fa:	fb09 b90e 	mla	r9, r9, lr, fp
 80215fe:	fa1f f989 	uxth.w	r9, r9
 8021602:	f109 0b01 	add.w	fp, r9, #1
 8021606:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 802160a:	ea4f 2929 	mov.w	r9, r9, asr #8
 802160e:	f804 9006 	strb.w	r9, [r4, r6]
 8021612:	4426      	add	r6, r4
 8021614:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8021618:	f896 b001 	ldrb.w	fp, [r6, #1]
 802161c:	fb1b fb05 	smulbb	fp, fp, r5
 8021620:	fb09 b90e 	mla	r9, r9, lr, fp
 8021624:	fa1f f989 	uxth.w	r9, r9
 8021628:	f109 0b01 	add.w	fp, r9, #1
 802162c:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8021630:	ea4f 2929 	mov.w	r9, r9, asr #8
 8021634:	f886 9001 	strb.w	r9, [r6, #1]
 8021638:	f89a 9002 	ldrb.w	r9, [sl, #2]
 802163c:	f896 a002 	ldrb.w	sl, [r6, #2]
 8021640:	fb1a fa05 	smulbb	sl, sl, r5
 8021644:	fb09 a90e 	mla	r9, r9, lr, sl
 8021648:	fa1f f989 	uxth.w	r9, r9
 802164c:	f109 0a01 	add.w	sl, r9, #1
 8021650:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 8021654:	ea4f 2929 	mov.w	r9, r9, asr #8
 8021658:	f886 9002 	strb.w	r9, [r6, #2]
 802165c:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 802165e:	3701      	adds	r7, #1
 8021660:	4430      	add	r0, r6
 8021662:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8021664:	4432      	add	r2, r6
 8021666:	e767      	b.n	8021538 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 8021668:	b003      	add	sp, #12
 802166a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802166e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802166e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021672:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8021674:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8021678:	9201      	str	r2, [sp, #4]
 802167a:	6868      	ldr	r0, [r5, #4]
 802167c:	9f14      	ldr	r7, [sp, #80]	; 0x50
 802167e:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 8021682:	e9dd ec0f 	ldrd	lr, ip, [sp, #60]	; 0x3c
 8021686:	fb00 2404 	mla	r4, r0, r4, r2
 802168a:	682a      	ldr	r2, [r5, #0]
 802168c:	f8d7 8000 	ldr.w	r8, [r7]
 8021690:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8021694:	4414      	add	r4, r2
 8021696:	2900      	cmp	r1, #0
 8021698:	dc03      	bgt.n	80216a2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 802169a:	9a01      	ldr	r2, [sp, #4]
 802169c:	2a00      	cmp	r2, #0
 802169e:	f340 80af 	ble.w	8021800 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 80216a2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80216a4:	f9b7 a008 	ldrsh.w	sl, [r7, #8]
 80216a8:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80216ac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80216ae:	f9b7 900c 	ldrsh.w	r9, [r7, #12]
 80216b2:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80216b6:	2b00      	cmp	r3, #0
 80216b8:	dd0c      	ble.n	80216d4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80216ba:	1405      	asrs	r5, r0, #16
 80216bc:	d405      	bmi.n	80216ca <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80216be:	4555      	cmp	r5, sl
 80216c0:	da03      	bge.n	80216ca <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80216c2:	1415      	asrs	r5, r2, #16
 80216c4:	d401      	bmi.n	80216ca <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80216c6:	454d      	cmp	r5, r9
 80216c8:	db05      	blt.n	80216d6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80216ca:	4470      	add	r0, lr
 80216cc:	4462      	add	r2, ip
 80216ce:	3b01      	subs	r3, #1
 80216d0:	3403      	adds	r4, #3
 80216d2:	e7f0      	b.n	80216b6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80216d4:	d038      	beq.n	8021748 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 80216d6:	1e5d      	subs	r5, r3, #1
 80216d8:	fb0e 0605 	mla	r6, lr, r5, r0
 80216dc:	1436      	asrs	r6, r6, #16
 80216de:	d42a      	bmi.n	8021736 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 80216e0:	4556      	cmp	r6, sl
 80216e2:	da28      	bge.n	8021736 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 80216e4:	fb0c 2505 	mla	r5, ip, r5, r2
 80216e8:	142d      	asrs	r5, r5, #16
 80216ea:	d424      	bmi.n	8021736 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 80216ec:	454d      	cmp	r5, r9
 80216ee:	da22      	bge.n	8021736 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 80216f0:	1ce6      	adds	r6, r4, #3
 80216f2:	4699      	mov	r9, r3
 80216f4:	f1b9 0f00 	cmp.w	r9, #0
 80216f8:	f106 0603 	add.w	r6, r6, #3
 80216fc:	dd1f      	ble.n	802173e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 80216fe:	f9b7 b008 	ldrsh.w	fp, [r7, #8]
 8021702:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8021706:	1415      	asrs	r5, r2, #16
 8021708:	4470      	add	r0, lr
 802170a:	4462      	add	r2, ip
 802170c:	f109 39ff 	add.w	r9, r9, #4294967295
 8021710:	fb0b a505 	mla	r5, fp, r5, sl
 8021714:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8021718:	eb08 0a05 	add.w	sl, r8, r5
 802171c:	f818 5005 	ldrb.w	r5, [r8, r5]
 8021720:	f806 5c06 	strb.w	r5, [r6, #-6]
 8021724:	f89a 5001 	ldrb.w	r5, [sl, #1]
 8021728:	f806 5c05 	strb.w	r5, [r6, #-5]
 802172c:	f89a 5002 	ldrb.w	r5, [sl, #2]
 8021730:	f806 5c04 	strb.w	r5, [r6, #-4]
 8021734:	e7de      	b.n	80216f4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8021736:	2600      	movs	r6, #0
 8021738:	1b9d      	subs	r5, r3, r6
 802173a:	2d00      	cmp	r5, #0
 802173c:	dc38      	bgt.n	80217b0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 802173e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8021742:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021746:	441c      	add	r4, r3
 8021748:	2900      	cmp	r1, #0
 802174a:	dd59      	ble.n	8021800 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 802174c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8021750:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021752:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021756:	3901      	subs	r1, #1
 8021758:	eeb0 6a62 	vmov.f32	s12, s5
 802175c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8021760:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021764:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8021768:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 802176c:	eeb0 6a43 	vmov.f32	s12, s6
 8021770:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8021774:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 8021778:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802177c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8021780:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021784:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8021788:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802178c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8021790:	ee12 2a90 	vmov	r2, s5
 8021794:	eef0 2a47 	vmov.f32	s5, s14
 8021798:	fb92 fef3 	sdiv	lr, r2, r3
 802179c:	ee13 2a10 	vmov	r2, s6
 80217a0:	eeb0 3a67 	vmov.f32	s6, s15
 80217a4:	fb92 fcf3 	sdiv	ip, r2, r3
 80217a8:	9a01      	ldr	r2, [sp, #4]
 80217aa:	bf08      	it	eq
 80217ac:	4613      	moveq	r3, r2
 80217ae:	e772      	b.n	8021696 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 80217b0:	ea5f 4920 	movs.w	r9, r0, asr #16
 80217b4:	d420      	bmi.n	80217f8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 80217b6:	f8d7 b008 	ldr.w	fp, [r7, #8]
 80217ba:	45cb      	cmp	fp, r9
 80217bc:	dd1c      	ble.n	80217f8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 80217be:	ea5f 4a22 	movs.w	sl, r2, asr #16
 80217c2:	d419      	bmi.n	80217f8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 80217c4:	68fd      	ldr	r5, [r7, #12]
 80217c6:	4555      	cmp	r5, sl
 80217c8:	dd16      	ble.n	80217f8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 80217ca:	fa0f f58b 	sxth.w	r5, fp
 80217ce:	fb0a 9505 	mla	r5, sl, r5, r9
 80217d2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80217d6:	f818 9005 	ldrb.w	r9, [r8, r5]
 80217da:	eb08 0b05 	add.w	fp, r8, r5
 80217de:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 80217e2:	f804 9005 	strb.w	r9, [r4, r5]
 80217e6:	4425      	add	r5, r4
 80217e8:	f89b 9001 	ldrb.w	r9, [fp, #1]
 80217ec:	f885 9001 	strb.w	r9, [r5, #1]
 80217f0:	f89b 9002 	ldrb.w	r9, [fp, #2]
 80217f4:	f885 9002 	strb.w	r9, [r5, #2]
 80217f8:	4470      	add	r0, lr
 80217fa:	4462      	add	r2, ip
 80217fc:	3601      	adds	r6, #1
 80217fe:	e79b      	b.n	8021738 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 8021800:	b003      	add	sp, #12
 8021802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021806 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021806:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802180a:	b085      	sub	sp, #20
 802180c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8021810:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8021812:	9202      	str	r2, [sp, #8]
 8021814:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 8021818:	6860      	ldr	r0, [r4, #4]
 802181a:	9203      	str	r2, [sp, #12]
 802181c:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8021820:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 8021824:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 8021828:	fb00 2505 	mla	r5, r0, r5, r2
 802182c:	6822      	ldr	r2, [r4, #0]
 802182e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8021832:	4415      	add	r5, r2
 8021834:	f8dc 2000 	ldr.w	r2, [ip]
 8021838:	9201      	str	r2, [sp, #4]
 802183a:	2900      	cmp	r1, #0
 802183c:	dc03      	bgt.n	8021846 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 802183e:	9a02      	ldr	r2, [sp, #8]
 8021840:	2a00      	cmp	r2, #0
 8021842:	f340 8122 	ble.w	8021a8a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 8021846:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8021848:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 802184c:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8021850:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8021852:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8021856:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 802185a:	2b00      	cmp	r3, #0
 802185c:	dd0d      	ble.n	802187a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 802185e:	1422      	asrs	r2, r4, #16
 8021860:	d405      	bmi.n	802186e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8021862:	4542      	cmp	r2, r8
 8021864:	da03      	bge.n	802186e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8021866:	1402      	asrs	r2, r0, #16
 8021868:	d401      	bmi.n	802186e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 802186a:	42ba      	cmp	r2, r7
 802186c:	db06      	blt.n	802187c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 802186e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8021870:	4474      	add	r4, lr
 8021872:	3b01      	subs	r3, #1
 8021874:	3503      	adds	r5, #3
 8021876:	4410      	add	r0, r2
 8021878:	e7ef      	b.n	802185a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 802187a:	d072      	beq.n	8021962 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 802187c:	1e5a      	subs	r2, r3, #1
 802187e:	fb0e 4602 	mla	r6, lr, r2, r4
 8021882:	1436      	asrs	r6, r6, #16
 8021884:	d462      	bmi.n	802194c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8021886:	4546      	cmp	r6, r8
 8021888:	da60      	bge.n	802194c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 802188a:	9e12      	ldr	r6, [sp, #72]	; 0x48
 802188c:	fb06 0202 	mla	r2, r6, r2, r0
 8021890:	1412      	asrs	r2, r2, #16
 8021892:	d45b      	bmi.n	802194c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8021894:	42ba      	cmp	r2, r7
 8021896:	da59      	bge.n	802194c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8021898:	1cef      	adds	r7, r5, #3
 802189a:	4699      	mov	r9, r3
 802189c:	f1b9 0f00 	cmp.w	r9, #0
 80218a0:	dd5a      	ble.n	8021958 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80218a2:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 80218a6:	1426      	asrs	r6, r4, #16
 80218a8:	1402      	asrs	r2, r0, #16
 80218aa:	fb08 6202 	mla	r2, r8, r2, r6
 80218ae:	9e01      	ldr	r6, [sp, #4]
 80218b0:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 80218b4:	ea5f 6816 	movs.w	r8, r6, lsr #24
 80218b8:	d041      	beq.n	802193e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 80218ba:	9a03      	ldr	r2, [sp, #12]
 80218bc:	fa5f fb86 	uxtb.w	fp, r6
 80218c0:	fb02 f808 	mul.w	r8, r2, r8
 80218c4:	f108 0201 	add.w	r2, r8, #1
 80218c8:	eb02 2228 	add.w	r2, r2, r8, asr #8
 80218cc:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 80218d0:	1212      	asrs	r2, r2, #8
 80218d2:	fa1f fa82 	uxth.w	sl, r2
 80218d6:	43d2      	mvns	r2, r2
 80218d8:	fb1b fb0a 	smulbb	fp, fp, sl
 80218dc:	b2d2      	uxtb	r2, r2
 80218de:	fb08 b802 	mla	r8, r8, r2, fp
 80218e2:	fa1f f888 	uxth.w	r8, r8
 80218e6:	f108 0b01 	add.w	fp, r8, #1
 80218ea:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80218ee:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 80218f2:	f3c6 4607 	ubfx	r6, r6, #16, #8
 80218f6:	fb1b fb0a 	smulbb	fp, fp, sl
 80218fa:	ea4f 2828 	mov.w	r8, r8, asr #8
 80218fe:	fb16 fa0a 	smulbb	sl, r6, sl
 8021902:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 8021906:	f807 8c03 	strb.w	r8, [r7, #-3]
 802190a:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 802190e:	fb06 aa02 	mla	sl, r6, r2, sl
 8021912:	fb08 b802 	mla	r8, r8, r2, fp
 8021916:	fa1f fa8a 	uxth.w	sl, sl
 802191a:	fa1f f888 	uxth.w	r8, r8
 802191e:	f10a 0601 	add.w	r6, sl, #1
 8021922:	f108 0b01 	add.w	fp, r8, #1
 8021926:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 802192a:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 802192e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8021932:	ea4f 2828 	mov.w	r8, r8, asr #8
 8021936:	f807 ac01 	strb.w	sl, [r7, #-1]
 802193a:	f807 8c02 	strb.w	r8, [r7, #-2]
 802193e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8021940:	4474      	add	r4, lr
 8021942:	3703      	adds	r7, #3
 8021944:	f109 39ff 	add.w	r9, r9, #4294967295
 8021948:	4410      	add	r0, r2
 802194a:	e7a7      	b.n	802189c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 802194c:	f04f 0800 	mov.w	r8, #0
 8021950:	eba3 0208 	sub.w	r2, r3, r8
 8021954:	2a00      	cmp	r2, #0
 8021956:	dc3b      	bgt.n	80219d0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8021958:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802195c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021960:	441d      	add	r5, r3
 8021962:	2900      	cmp	r1, #0
 8021964:	f340 8091 	ble.w	8021a8a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 8021968:	ee30 0a04 	vadd.f32	s0, s0, s8
 802196c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802196e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021972:	3901      	subs	r1, #1
 8021974:	eeb0 6a62 	vmov.f32	s12, s5
 8021978:	eec6 7a80 	vdiv.f32	s15, s13, s0
 802197c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021980:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8021984:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8021988:	eeb0 6a43 	vmov.f32	s12, s6
 802198c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8021990:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8021994:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021998:	ee61 7a27 	vmul.f32	s15, s2, s15
 802199c:	ee77 2a62 	vsub.f32	s5, s14, s5
 80219a0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80219a4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80219a8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80219ac:	ee12 2a90 	vmov	r2, s5
 80219b0:	eef0 2a47 	vmov.f32	s5, s14
 80219b4:	fb92 fef3 	sdiv	lr, r2, r3
 80219b8:	ee13 2a10 	vmov	r2, s6
 80219bc:	eeb0 3a67 	vmov.f32	s6, s15
 80219c0:	fb92 f3f3 	sdiv	r3, r2, r3
 80219c4:	9a02      	ldr	r2, [sp, #8]
 80219c6:	9312      	str	r3, [sp, #72]	; 0x48
 80219c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80219ca:	bf08      	it	eq
 80219cc:	4613      	moveq	r3, r2
 80219ce:	e734      	b.n	802183a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 80219d0:	1427      	asrs	r7, r4, #16
 80219d2:	d454      	bmi.n	8021a7e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 80219d4:	f8dc 6008 	ldr.w	r6, [ip, #8]
 80219d8:	42be      	cmp	r6, r7
 80219da:	dd50      	ble.n	8021a7e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 80219dc:	ea5f 4920 	movs.w	r9, r0, asr #16
 80219e0:	d44d      	bmi.n	8021a7e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 80219e2:	f8dc 200c 	ldr.w	r2, [ip, #12]
 80219e6:	454a      	cmp	r2, r9
 80219e8:	dd49      	ble.n	8021a7e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 80219ea:	b236      	sxth	r6, r6
 80219ec:	9a01      	ldr	r2, [sp, #4]
 80219ee:	fb09 7606 	mla	r6, r9, r6, r7
 80219f2:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 80219f6:	0e3a      	lsrs	r2, r7, #24
 80219f8:	d041      	beq.n	8021a7e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 80219fa:	9e03      	ldr	r6, [sp, #12]
 80219fc:	fa5f fb87 	uxtb.w	fp, r7
 8021a00:	4372      	muls	r2, r6
 8021a02:	1c56      	adds	r6, r2, #1
 8021a04:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8021a08:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 8021a0c:	1212      	asrs	r2, r2, #8
 8021a0e:	f815 9006 	ldrb.w	r9, [r5, r6]
 8021a12:	fa1f fa82 	uxth.w	sl, r2
 8021a16:	43d2      	mvns	r2, r2
 8021a18:	fb1b fb0a 	smulbb	fp, fp, sl
 8021a1c:	b2d2      	uxtb	r2, r2
 8021a1e:	fb09 b902 	mla	r9, r9, r2, fp
 8021a22:	fa1f f989 	uxth.w	r9, r9
 8021a26:	f109 0b01 	add.w	fp, r9, #1
 8021a2a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8021a2e:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8021a32:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8021a36:	fb1b fb0a 	smulbb	fp, fp, sl
 8021a3a:	ea4f 2929 	mov.w	r9, r9, asr #8
 8021a3e:	fb17 fa0a 	smulbb	sl, r7, sl
 8021a42:	f805 9006 	strb.w	r9, [r5, r6]
 8021a46:	442e      	add	r6, r5
 8021a48:	78b7      	ldrb	r7, [r6, #2]
 8021a4a:	f896 9001 	ldrb.w	r9, [r6, #1]
 8021a4e:	fb07 aa02 	mla	sl, r7, r2, sl
 8021a52:	fb09 b902 	mla	r9, r9, r2, fp
 8021a56:	fa1f fa8a 	uxth.w	sl, sl
 8021a5a:	fa1f f989 	uxth.w	r9, r9
 8021a5e:	f10a 0701 	add.w	r7, sl, #1
 8021a62:	f109 0b01 	add.w	fp, r9, #1
 8021a66:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8021a6a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8021a6e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8021a72:	ea4f 2929 	mov.w	r9, r9, asr #8
 8021a76:	f886 a002 	strb.w	sl, [r6, #2]
 8021a7a:	f886 9001 	strb.w	r9, [r6, #1]
 8021a7e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8021a80:	4474      	add	r4, lr
 8021a82:	f108 0801 	add.w	r8, r8, #1
 8021a86:	4410      	add	r0, r2
 8021a88:	e762      	b.n	8021950 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8021a8a:	b005      	add	sp, #20
 8021a8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021a90 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021a90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021a94:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8021a96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8021a9a:	9201      	str	r2, [sp, #4]
 8021a9c:	6860      	ldr	r0, [r4, #4]
 8021a9e:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 8021aa2:	e9dd 2512 	ldrd	r2, r5, [sp, #72]	; 0x48
 8021aa6:	fb00 2505 	mla	r5, r0, r5, r2
 8021aaa:	6822      	ldr	r2, [r4, #0]
 8021aac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8021ab0:	4415      	add	r5, r2
 8021ab2:	f8dc 2000 	ldr.w	r2, [ip]
 8021ab6:	9200      	str	r2, [sp, #0]
 8021ab8:	2900      	cmp	r1, #0
 8021aba:	dc03      	bgt.n	8021ac4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8021abc:	9a01      	ldr	r2, [sp, #4]
 8021abe:	2a00      	cmp	r2, #0
 8021ac0:	f340 812b 	ble.w	8021d1a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8021ac4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8021ac6:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8021aca:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8021ace:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8021ad0:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8021ad4:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8021ad8:	2b00      	cmp	r3, #0
 8021ada:	dd0e      	ble.n	8021afa <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8021adc:	1422      	asrs	r2, r4, #16
 8021ade:	d405      	bmi.n	8021aec <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8021ae0:	4572      	cmp	r2, lr
 8021ae2:	da03      	bge.n	8021aec <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8021ae4:	1402      	asrs	r2, r0, #16
 8021ae6:	d401      	bmi.n	8021aec <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8021ae8:	42ba      	cmp	r2, r7
 8021aea:	db07      	blt.n	8021afc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8021aec:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8021aee:	3b01      	subs	r3, #1
 8021af0:	3503      	adds	r5, #3
 8021af2:	4414      	add	r4, r2
 8021af4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8021af6:	4410      	add	r0, r2
 8021af8:	e7ee      	b.n	8021ad8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8021afa:	d06f      	beq.n	8021bdc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8021afc:	1e5a      	subs	r2, r3, #1
 8021afe:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8021b00:	fb06 4602 	mla	r6, r6, r2, r4
 8021b04:	1436      	asrs	r6, r6, #16
 8021b06:	d45e      	bmi.n	8021bc6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8021b08:	4576      	cmp	r6, lr
 8021b0a:	da5c      	bge.n	8021bc6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8021b0c:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8021b0e:	fb06 0202 	mla	r2, r6, r2, r0
 8021b12:	1412      	asrs	r2, r2, #16
 8021b14:	d457      	bmi.n	8021bc6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8021b16:	42ba      	cmp	r2, r7
 8021b18:	da55      	bge.n	8021bc6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8021b1a:	1cee      	adds	r6, r5, #3
 8021b1c:	469a      	mov	sl, r3
 8021b1e:	f1ba 0f00 	cmp.w	sl, #0
 8021b22:	dd56      	ble.n	8021bd2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8021b24:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8021b28:	1427      	asrs	r7, r4, #16
 8021b2a:	1402      	asrs	r2, r0, #16
 8021b2c:	fb0e 7202 	mla	r2, lr, r2, r7
 8021b30:	9f00      	ldr	r7, [sp, #0]
 8021b32:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 8021b36:	ea5f 6e17 	movs.w	lr, r7, lsr #24
 8021b3a:	d03c      	beq.n	8021bb6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8021b3c:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8021b40:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8021b44:	f3c7 2907 	ubfx	r9, r7, #8, #8
 8021b48:	fa5f f28e 	uxtb.w	r2, lr
 8021b4c:	b2ff      	uxtb	r7, r7
 8021b4e:	f000 80dd 	beq.w	8021d0c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8021b52:	fa1f f882 	uxth.w	r8, r2
 8021b56:	43d2      	mvns	r2, r2
 8021b58:	f816 ec03 	ldrb.w	lr, [r6, #-3]
 8021b5c:	fb17 f708 	smulbb	r7, r7, r8
 8021b60:	b2d2      	uxtb	r2, r2
 8021b62:	fb19 f908 	smulbb	r9, r9, r8
 8021b66:	fb0e 7702 	mla	r7, lr, r2, r7
 8021b6a:	fb1b f808 	smulbb	r8, fp, r8
 8021b6e:	b2bf      	uxth	r7, r7
 8021b70:	f107 0e01 	add.w	lr, r7, #1
 8021b74:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8021b78:	123f      	asrs	r7, r7, #8
 8021b7a:	f806 7c03 	strb.w	r7, [r6, #-3]
 8021b7e:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 8021b82:	fb07 9902 	mla	r9, r7, r2, r9
 8021b86:	fa1f f989 	uxth.w	r9, r9
 8021b8a:	f109 0701 	add.w	r7, r9, #1
 8021b8e:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8021b92:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 8021b96:	fb07 8802 	mla	r8, r7, r2, r8
 8021b9a:	ea4f 2929 	mov.w	r9, r9, asr #8
 8021b9e:	fa1f f888 	uxth.w	r8, r8
 8021ba2:	f806 9c02 	strb.w	r9, [r6, #-2]
 8021ba6:	f108 0201 	add.w	r2, r8, #1
 8021baa:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8021bae:	ea4f 2828 	mov.w	r8, r8, asr #8
 8021bb2:	f806 8c01 	strb.w	r8, [r6, #-1]
 8021bb6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8021bb8:	3603      	adds	r6, #3
 8021bba:	f10a 3aff 	add.w	sl, sl, #4294967295
 8021bbe:	4414      	add	r4, r2
 8021bc0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8021bc2:	4410      	add	r0, r2
 8021bc4:	e7ab      	b.n	8021b1e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8021bc6:	f04f 0e00 	mov.w	lr, #0
 8021bca:	eba3 020e 	sub.w	r2, r3, lr
 8021bce:	2a00      	cmp	r2, #0
 8021bd0:	dc3d      	bgt.n	8021c4e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8021bd2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8021bd6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021bda:	441d      	add	r5, r3
 8021bdc:	2900      	cmp	r1, #0
 8021bde:	f340 809c 	ble.w	8021d1a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8021be2:	ee30 0a04 	vadd.f32	s0, s0, s8
 8021be6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021be8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021bec:	3901      	subs	r1, #1
 8021bee:	eeb0 6a62 	vmov.f32	s12, s5
 8021bf2:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8021bf6:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021bfa:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8021bfe:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 8021c02:	eeb0 6a43 	vmov.f32	s12, s6
 8021c06:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8021c0a:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 8021c0e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021c12:	ee61 7a27 	vmul.f32	s15, s2, s15
 8021c16:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021c1a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8021c1e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8021c22:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8021c26:	ee12 2a90 	vmov	r2, s5
 8021c2a:	eef0 2a47 	vmov.f32	s5, s14
 8021c2e:	fb92 f3f3 	sdiv	r3, r2, r3
 8021c32:	ee13 2a10 	vmov	r2, s6
 8021c36:	930f      	str	r3, [sp, #60]	; 0x3c
 8021c38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021c3a:	eeb0 3a67 	vmov.f32	s6, s15
 8021c3e:	fb92 f3f3 	sdiv	r3, r2, r3
 8021c42:	9a01      	ldr	r2, [sp, #4]
 8021c44:	9310      	str	r3, [sp, #64]	; 0x40
 8021c46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021c48:	bf08      	it	eq
 8021c4a:	4613      	moveq	r3, r2
 8021c4c:	e734      	b.n	8021ab8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 8021c4e:	1427      	asrs	r7, r4, #16
 8021c50:	d44d      	bmi.n	8021cee <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8021c52:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8021c56:	42be      	cmp	r6, r7
 8021c58:	dd49      	ble.n	8021cee <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8021c5a:	ea5f 4820 	movs.w	r8, r0, asr #16
 8021c5e:	d446      	bmi.n	8021cee <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8021c60:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8021c64:	4542      	cmp	r2, r8
 8021c66:	dd42      	ble.n	8021cee <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8021c68:	b236      	sxth	r6, r6
 8021c6a:	9a00      	ldr	r2, [sp, #0]
 8021c6c:	fb08 7606 	mla	r6, r8, r6, r7
 8021c70:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 8021c74:	0e3a      	lsrs	r2, r7, #24
 8021c76:	d03a      	beq.n	8021cee <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8021c78:	2aff      	cmp	r2, #255	; 0xff
 8021c7a:	b2d6      	uxtb	r6, r2
 8021c7c:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8021c80:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 8021c84:	ea4f 024e 	mov.w	r2, lr, lsl #1
 8021c88:	b2ff      	uxtb	r7, r7
 8021c8a:	d037      	beq.n	8021cfc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8021c8c:	fa1f f986 	uxth.w	r9, r6
 8021c90:	4472      	add	r2, lr
 8021c92:	43f6      	mvns	r6, r6
 8021c94:	f815 8002 	ldrb.w	r8, [r5, r2]
 8021c98:	fb17 f709 	smulbb	r7, r7, r9
 8021c9c:	fb1a fa09 	smulbb	sl, sl, r9
 8021ca0:	b2f6      	uxtb	r6, r6
 8021ca2:	fb1b f909 	smulbb	r9, fp, r9
 8021ca6:	fb08 7706 	mla	r7, r8, r6, r7
 8021caa:	b2bf      	uxth	r7, r7
 8021cac:	f107 0801 	add.w	r8, r7, #1
 8021cb0:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 8021cb4:	123f      	asrs	r7, r7, #8
 8021cb6:	54af      	strb	r7, [r5, r2]
 8021cb8:	442a      	add	r2, r5
 8021cba:	7857      	ldrb	r7, [r2, #1]
 8021cbc:	fb07 aa06 	mla	sl, r7, r6, sl
 8021cc0:	fa1f fa8a 	uxth.w	sl, sl
 8021cc4:	f10a 0701 	add.w	r7, sl, #1
 8021cc8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8021ccc:	7897      	ldrb	r7, [r2, #2]
 8021cce:	fb07 9906 	mla	r9, r7, r6, r9
 8021cd2:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8021cd6:	fa1f f989 	uxth.w	r9, r9
 8021cda:	f882 a001 	strb.w	sl, [r2, #1]
 8021cde:	f109 0601 	add.w	r6, r9, #1
 8021ce2:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 8021ce6:	ea4f 2929 	mov.w	r9, r9, asr #8
 8021cea:	f882 9002 	strb.w	r9, [r2, #2]
 8021cee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8021cf0:	f10e 0e01 	add.w	lr, lr, #1
 8021cf4:	4414      	add	r4, r2
 8021cf6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8021cf8:	4410      	add	r0, r2
 8021cfa:	e766      	b.n	8021bca <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8021cfc:	4472      	add	r2, lr
 8021cfe:	54af      	strb	r7, [r5, r2]
 8021d00:	442a      	add	r2, r5
 8021d02:	f882 a001 	strb.w	sl, [r2, #1]
 8021d06:	f882 b002 	strb.w	fp, [r2, #2]
 8021d0a:	e7f0      	b.n	8021cee <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8021d0c:	f806 7c03 	strb.w	r7, [r6, #-3]
 8021d10:	f806 9c02 	strb.w	r9, [r6, #-2]
 8021d14:	f806 bc01 	strb.w	fp, [r6, #-1]
 8021d18:	e74d      	b.n	8021bb6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8021d1a:	b003      	add	sp, #12
 8021d1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021d20 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021d24:	b087      	sub	sp, #28
 8021d26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8021d2a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8021d2c:	9204      	str	r2, [sp, #16]
 8021d2e:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8021d32:	6860      	ldr	r0, [r4, #4]
 8021d34:	9205      	str	r2, [sp, #20]
 8021d36:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 8021d3a:	f8dd e04c 	ldr.w	lr, [sp, #76]	; 0x4c
 8021d3e:	9101      	str	r1, [sp, #4]
 8021d40:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 8021d44:	fb00 2505 	mla	r5, r0, r5, r2
 8021d48:	6822      	ldr	r2, [r4, #0]
 8021d4a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8021d4e:	4415      	add	r5, r2
 8021d50:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8021d54:	3201      	adds	r2, #1
 8021d56:	f022 0201 	bic.w	r2, r2, #1
 8021d5a:	9202      	str	r2, [sp, #8]
 8021d5c:	f8dc 2000 	ldr.w	r2, [ip]
 8021d60:	9203      	str	r2, [sp, #12]
 8021d62:	9a01      	ldr	r2, [sp, #4]
 8021d64:	2a00      	cmp	r2, #0
 8021d66:	dc03      	bgt.n	8021d70 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8021d68:	9a04      	ldr	r2, [sp, #16]
 8021d6a:	2a00      	cmp	r2, #0
 8021d6c:	f340 8135 	ble.w	8021fda <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8021d70:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8021d72:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8021d76:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8021d7a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8021d7c:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8021d80:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8021d84:	2b00      	cmp	r3, #0
 8021d86:	dd0d      	ble.n	8021da4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8021d88:	1422      	asrs	r2, r4, #16
 8021d8a:	d405      	bmi.n	8021d98 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8021d8c:	4542      	cmp	r2, r8
 8021d8e:	da03      	bge.n	8021d98 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8021d90:	1402      	asrs	r2, r0, #16
 8021d92:	d401      	bmi.n	8021d98 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8021d94:	42ba      	cmp	r2, r7
 8021d96:	db06      	blt.n	8021da6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8021d98:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8021d9a:	4474      	add	r4, lr
 8021d9c:	3b01      	subs	r3, #1
 8021d9e:	3503      	adds	r5, #3
 8021da0:	4410      	add	r0, r2
 8021da2:	e7ef      	b.n	8021d84 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8021da4:	d077      	beq.n	8021e96 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8021da6:	1e5a      	subs	r2, r3, #1
 8021da8:	fb0e 4602 	mla	r6, lr, r2, r4
 8021dac:	1436      	asrs	r6, r6, #16
 8021dae:	d469      	bmi.n	8021e84 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8021db0:	4546      	cmp	r6, r8
 8021db2:	da67      	bge.n	8021e84 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8021db4:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8021db6:	fb06 0202 	mla	r2, r6, r2, r0
 8021dba:	1412      	asrs	r2, r2, #16
 8021dbc:	d462      	bmi.n	8021e84 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8021dbe:	42ba      	cmp	r2, r7
 8021dc0:	da60      	bge.n	8021e84 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8021dc2:	1cee      	adds	r6, r5, #3
 8021dc4:	4699      	mov	r9, r3
 8021dc6:	f1b9 0f00 	cmp.w	r9, #0
 8021dca:	dd5f      	ble.n	8021e8c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8021dcc:	1422      	asrs	r2, r4, #16
 8021dce:	9902      	ldr	r1, [sp, #8]
 8021dd0:	1407      	asrs	r7, r0, #16
 8021dd2:	fb01 2707 	mla	r7, r1, r7, r2
 8021dd6:	9903      	ldr	r1, [sp, #12]
 8021dd8:	087a      	lsrs	r2, r7, #1
 8021dda:	5c8a      	ldrb	r2, [r1, r2]
 8021ddc:	07f9      	lsls	r1, r7, #31
 8021dde:	bf54      	ite	pl
 8021de0:	f002 020f 	andpl.w	r2, r2, #15
 8021de4:	1112      	asrmi	r2, r2, #4
 8021de6:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8021dea:	b2d2      	uxtb	r2, r2
 8021dec:	2a00      	cmp	r2, #0
 8021dee:	d042      	beq.n	8021e76 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8021df0:	497b      	ldr	r1, [pc, #492]	; (8021fe0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 8021df2:	680f      	ldr	r7, [r1, #0]
 8021df4:	9905      	ldr	r1, [sp, #20]
 8021df6:	fa5f fb87 	uxtb.w	fp, r7
 8021dfa:	434a      	muls	r2, r1
 8021dfc:	f102 0801 	add.w	r8, r2, #1
 8021e00:	eb08 2222 	add.w	r2, r8, r2, asr #8
 8021e04:	f816 8c03 	ldrb.w	r8, [r6, #-3]
 8021e08:	1212      	asrs	r2, r2, #8
 8021e0a:	fa1f fa82 	uxth.w	sl, r2
 8021e0e:	43d2      	mvns	r2, r2
 8021e10:	fb1b fb0a 	smulbb	fp, fp, sl
 8021e14:	b2d2      	uxtb	r2, r2
 8021e16:	fb08 b802 	mla	r8, r8, r2, fp
 8021e1a:	fa1f f888 	uxth.w	r8, r8
 8021e1e:	f108 0b01 	add.w	fp, r8, #1
 8021e22:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8021e26:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8021e2a:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8021e2e:	fb1b fb0a 	smulbb	fp, fp, sl
 8021e32:	ea4f 2828 	mov.w	r8, r8, asr #8
 8021e36:	fb17 fa0a 	smulbb	sl, r7, sl
 8021e3a:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 8021e3e:	f806 8c03 	strb.w	r8, [r6, #-3]
 8021e42:	f816 8c02 	ldrb.w	r8, [r6, #-2]
 8021e46:	fb07 aa02 	mla	sl, r7, r2, sl
 8021e4a:	fb08 b802 	mla	r8, r8, r2, fp
 8021e4e:	fa1f fa8a 	uxth.w	sl, sl
 8021e52:	fa1f f888 	uxth.w	r8, r8
 8021e56:	f10a 0701 	add.w	r7, sl, #1
 8021e5a:	f108 0b01 	add.w	fp, r8, #1
 8021e5e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8021e62:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8021e66:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8021e6a:	ea4f 2828 	mov.w	r8, r8, asr #8
 8021e6e:	f806 ac01 	strb.w	sl, [r6, #-1]
 8021e72:	f806 8c02 	strb.w	r8, [r6, #-2]
 8021e76:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8021e78:	4474      	add	r4, lr
 8021e7a:	3603      	adds	r6, #3
 8021e7c:	f109 39ff 	add.w	r9, r9, #4294967295
 8021e80:	4410      	add	r0, r2
 8021e82:	e7a0      	b.n	8021dc6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8021e84:	2700      	movs	r7, #0
 8021e86:	1bda      	subs	r2, r3, r7
 8021e88:	2a00      	cmp	r2, #0
 8021e8a:	dc3e      	bgt.n	8021f0a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8021e8c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8021e90:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021e94:	441d      	add	r5, r3
 8021e96:	9b01      	ldr	r3, [sp, #4]
 8021e98:	2b00      	cmp	r3, #0
 8021e9a:	f340 809e 	ble.w	8021fda <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8021e9e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8021ea2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021ea4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021ea8:	eeb0 6a62 	vmov.f32	s12, s5
 8021eac:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8021eb0:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021eb4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8021eb8:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8021ebc:	eeb0 6a43 	vmov.f32	s12, s6
 8021ec0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8021ec4:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8021ec8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021ecc:	ee61 7a27 	vmul.f32	s15, s2, s15
 8021ed0:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021ed4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8021ed8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8021edc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8021ee0:	ee12 2a90 	vmov	r2, s5
 8021ee4:	eef0 2a47 	vmov.f32	s5, s14
 8021ee8:	fb92 fef3 	sdiv	lr, r2, r3
 8021eec:	ee13 2a10 	vmov	r2, s6
 8021ef0:	eeb0 3a67 	vmov.f32	s6, s15
 8021ef4:	fb92 f3f3 	sdiv	r3, r2, r3
 8021ef8:	9314      	str	r3, [sp, #80]	; 0x50
 8021efa:	9b01      	ldr	r3, [sp, #4]
 8021efc:	9a04      	ldr	r2, [sp, #16]
 8021efe:	3b01      	subs	r3, #1
 8021f00:	9301      	str	r3, [sp, #4]
 8021f02:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021f04:	bf08      	it	eq
 8021f06:	4613      	moveq	r3, r2
 8021f08:	e72b      	b.n	8021d62 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8021f0a:	1426      	asrs	r6, r4, #16
 8021f0c:	d460      	bmi.n	8021fd0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8021f0e:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8021f12:	42b2      	cmp	r2, r6
 8021f14:	dd5c      	ble.n	8021fd0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8021f16:	ea5f 4820 	movs.w	r8, r0, asr #16
 8021f1a:	d459      	bmi.n	8021fd0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8021f1c:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8021f20:	4542      	cmp	r2, r8
 8021f22:	dd55      	ble.n	8021fd0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8021f24:	9a02      	ldr	r2, [sp, #8]
 8021f26:	9903      	ldr	r1, [sp, #12]
 8021f28:	fb08 6602 	mla	r6, r8, r2, r6
 8021f2c:	0872      	lsrs	r2, r6, #1
 8021f2e:	07f6      	lsls	r6, r6, #31
 8021f30:	5c8a      	ldrb	r2, [r1, r2]
 8021f32:	bf54      	ite	pl
 8021f34:	f002 020f 	andpl.w	r2, r2, #15
 8021f38:	1112      	asrmi	r2, r2, #4
 8021f3a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8021f3e:	b2d2      	uxtb	r2, r2
 8021f40:	2a00      	cmp	r2, #0
 8021f42:	d045      	beq.n	8021fd0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8021f44:	4926      	ldr	r1, [pc, #152]	; (8021fe0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 8021f46:	f8d1 8000 	ldr.w	r8, [r1]
 8021f4a:	9905      	ldr	r1, [sp, #20]
 8021f4c:	fa5f fb88 	uxtb.w	fp, r8
 8021f50:	434a      	muls	r2, r1
 8021f52:	1c56      	adds	r6, r2, #1
 8021f54:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8021f58:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8021f5c:	1212      	asrs	r2, r2, #8
 8021f5e:	f815 9006 	ldrb.w	r9, [r5, r6]
 8021f62:	fa1f fa82 	uxth.w	sl, r2
 8021f66:	43d2      	mvns	r2, r2
 8021f68:	fb1b fb0a 	smulbb	fp, fp, sl
 8021f6c:	b2d2      	uxtb	r2, r2
 8021f6e:	fb09 b902 	mla	r9, r9, r2, fp
 8021f72:	fa1f f989 	uxth.w	r9, r9
 8021f76:	f109 0b01 	add.w	fp, r9, #1
 8021f7a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8021f7e:	f3c8 2b07 	ubfx	fp, r8, #8, #8
 8021f82:	f3c8 4807 	ubfx	r8, r8, #16, #8
 8021f86:	fb1b fb0a 	smulbb	fp, fp, sl
 8021f8a:	ea4f 2929 	mov.w	r9, r9, asr #8
 8021f8e:	fb18 fa0a 	smulbb	sl, r8, sl
 8021f92:	f805 9006 	strb.w	r9, [r5, r6]
 8021f96:	442e      	add	r6, r5
 8021f98:	f896 8002 	ldrb.w	r8, [r6, #2]
 8021f9c:	f896 9001 	ldrb.w	r9, [r6, #1]
 8021fa0:	fb08 aa02 	mla	sl, r8, r2, sl
 8021fa4:	fb09 b902 	mla	r9, r9, r2, fp
 8021fa8:	fa1f fa8a 	uxth.w	sl, sl
 8021fac:	fa1f f989 	uxth.w	r9, r9
 8021fb0:	f10a 0801 	add.w	r8, sl, #1
 8021fb4:	f109 0b01 	add.w	fp, r9, #1
 8021fb8:	eb08 2a1a 	add.w	sl, r8, sl, lsr #8
 8021fbc:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8021fc0:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8021fc4:	ea4f 2929 	mov.w	r9, r9, asr #8
 8021fc8:	f886 a002 	strb.w	sl, [r6, #2]
 8021fcc:	f886 9001 	strb.w	r9, [r6, #1]
 8021fd0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8021fd2:	4474      	add	r4, lr
 8021fd4:	3701      	adds	r7, #1
 8021fd6:	4410      	add	r0, r2
 8021fd8:	e755      	b.n	8021e86 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x166>
 8021fda:	b007      	add	sp, #28
 8021fdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021fe0:	24026248 	.word	0x24026248

08021fe4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021fe8:	b085      	sub	sp, #20
 8021fea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8021fee:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8021ff0:	9203      	str	r2, [sp, #12]
 8021ff2:	6860      	ldr	r0, [r4, #4]
 8021ff4:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8021ff8:	9100      	str	r1, [sp, #0]
 8021ffa:	e9dd 2614 	ldrd	r2, r6, [sp, #80]	; 0x50
 8021ffe:	fb00 2606 	mla	r6, r0, r6, r2
 8022002:	6822      	ldr	r2, [r4, #0]
 8022004:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8022008:	4416      	add	r6, r2
 802200a:	f8dc 2008 	ldr.w	r2, [ip, #8]
 802200e:	3201      	adds	r2, #1
 8022010:	f022 0201 	bic.w	r2, r2, #1
 8022014:	9201      	str	r2, [sp, #4]
 8022016:	f8dc 2000 	ldr.w	r2, [ip]
 802201a:	9202      	str	r2, [sp, #8]
 802201c:	9a00      	ldr	r2, [sp, #0]
 802201e:	2a00      	cmp	r2, #0
 8022020:	dc03      	bgt.n	802202a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 8022022:	9a03      	ldr	r2, [sp, #12]
 8022024:	2a00      	cmp	r2, #0
 8022026:	f340 8140 	ble.w	80222aa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 802202a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802202c:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8022030:	f502 4500 	add.w	r5, r2, #32768	; 0x8000
 8022034:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8022036:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 802203a:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 802203e:	2b00      	cmp	r3, #0
 8022040:	dd0e      	ble.n	8022060 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8022042:	142a      	asrs	r2, r5, #16
 8022044:	d405      	bmi.n	8022052 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8022046:	4572      	cmp	r2, lr
 8022048:	da03      	bge.n	8022052 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 802204a:	1422      	asrs	r2, r4, #16
 802204c:	d401      	bmi.n	8022052 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 802204e:	42ba      	cmp	r2, r7
 8022050:	db07      	blt.n	8022062 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8022052:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8022054:	3b01      	subs	r3, #1
 8022056:	3603      	adds	r6, #3
 8022058:	4415      	add	r5, r2
 802205a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802205c:	4414      	add	r4, r2
 802205e:	e7ee      	b.n	802203e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8022060:	d072      	beq.n	8022148 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8022062:	1e5a      	subs	r2, r3, #1
 8022064:	9811      	ldr	r0, [sp, #68]	; 0x44
 8022066:	fb00 5002 	mla	r0, r0, r2, r5
 802206a:	1400      	asrs	r0, r0, #16
 802206c:	d463      	bmi.n	8022136 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 802206e:	4570      	cmp	r0, lr
 8022070:	da61      	bge.n	8022136 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8022072:	9812      	ldr	r0, [sp, #72]	; 0x48
 8022074:	fb00 4202 	mla	r2, r0, r2, r4
 8022078:	1412      	asrs	r2, r2, #16
 802207a:	d45c      	bmi.n	8022136 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 802207c:	42ba      	cmp	r2, r7
 802207e:	da5a      	bge.n	8022136 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8022080:	1cf0      	adds	r0, r6, #3
 8022082:	469a      	mov	sl, r3
 8022084:	f1ba 0f00 	cmp.w	sl, #0
 8022088:	dd59      	ble.n	802213e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 802208a:	142a      	asrs	r2, r5, #16
 802208c:	9901      	ldr	r1, [sp, #4]
 802208e:	1427      	asrs	r7, r4, #16
 8022090:	fb01 2707 	mla	r7, r1, r7, r2
 8022094:	9902      	ldr	r1, [sp, #8]
 8022096:	087a      	lsrs	r2, r7, #1
 8022098:	5c8a      	ldrb	r2, [r1, r2]
 802209a:	07f9      	lsls	r1, r7, #31
 802209c:	bf54      	ite	pl
 802209e:	f002 020f 	andpl.w	r2, r2, #15
 80220a2:	1112      	asrmi	r2, r2, #4
 80220a4:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80220a8:	b2d2      	uxtb	r2, r2
 80220aa:	2a00      	cmp	r2, #0
 80220ac:	d03b      	beq.n	8022126 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 80220ae:	4980      	ldr	r1, [pc, #512]	; (80222b0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 80220b0:	2aff      	cmp	r2, #255	; 0xff
 80220b2:	680f      	ldr	r7, [r1, #0]
 80220b4:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 80220b8:	f3c7 2907 	ubfx	r9, r7, #8, #8
 80220bc:	b2ff      	uxtb	r7, r7
 80220be:	f000 80ed 	beq.w	802229c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b8>
 80220c2:	fa1f f882 	uxth.w	r8, r2
 80220c6:	43d2      	mvns	r2, r2
 80220c8:	f810 ec03 	ldrb.w	lr, [r0, #-3]
 80220cc:	fb17 f708 	smulbb	r7, r7, r8
 80220d0:	b2d2      	uxtb	r2, r2
 80220d2:	fb19 f908 	smulbb	r9, r9, r8
 80220d6:	fb0e 7702 	mla	r7, lr, r2, r7
 80220da:	fb1b f808 	smulbb	r8, fp, r8
 80220de:	b2bf      	uxth	r7, r7
 80220e0:	f107 0e01 	add.w	lr, r7, #1
 80220e4:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 80220e8:	123f      	asrs	r7, r7, #8
 80220ea:	f800 7c03 	strb.w	r7, [r0, #-3]
 80220ee:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 80220f2:	fb07 9902 	mla	r9, r7, r2, r9
 80220f6:	fa1f f989 	uxth.w	r9, r9
 80220fa:	f109 0701 	add.w	r7, r9, #1
 80220fe:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8022102:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 8022106:	fb07 8802 	mla	r8, r7, r2, r8
 802210a:	ea4f 2929 	mov.w	r9, r9, asr #8
 802210e:	fa1f f888 	uxth.w	r8, r8
 8022112:	f800 9c02 	strb.w	r9, [r0, #-2]
 8022116:	f108 0201 	add.w	r2, r8, #1
 802211a:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 802211e:	ea4f 2828 	mov.w	r8, r8, asr #8
 8022122:	f800 8c01 	strb.w	r8, [r0, #-1]
 8022126:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8022128:	3003      	adds	r0, #3
 802212a:	f10a 3aff 	add.w	sl, sl, #4294967295
 802212e:	4415      	add	r5, r2
 8022130:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8022132:	4414      	add	r4, r2
 8022134:	e7a6      	b.n	8022084 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8022136:	2700      	movs	r7, #0
 8022138:	1bda      	subs	r2, r3, r7
 802213a:	2a00      	cmp	r2, #0
 802213c:	dc40      	bgt.n	80221c0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 802213e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8022142:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022146:	441e      	add	r6, r3
 8022148:	9b00      	ldr	r3, [sp, #0]
 802214a:	2b00      	cmp	r3, #0
 802214c:	f340 80ad 	ble.w	80222aa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 8022150:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022154:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022156:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802215a:	eeb0 6a62 	vmov.f32	s12, s5
 802215e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8022162:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022166:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802216a:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 802216e:	eeb0 6a43 	vmov.f32	s12, s6
 8022172:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8022176:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 802217a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802217e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022182:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022186:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802218a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802218e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8022192:	ee12 2a90 	vmov	r2, s5
 8022196:	eef0 2a47 	vmov.f32	s5, s14
 802219a:	fb92 f3f3 	sdiv	r3, r2, r3
 802219e:	ee13 2a10 	vmov	r2, s6
 80221a2:	9311      	str	r3, [sp, #68]	; 0x44
 80221a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80221a6:	eeb0 3a67 	vmov.f32	s6, s15
 80221aa:	fb92 f3f3 	sdiv	r3, r2, r3
 80221ae:	9312      	str	r3, [sp, #72]	; 0x48
 80221b0:	9b00      	ldr	r3, [sp, #0]
 80221b2:	9a03      	ldr	r2, [sp, #12]
 80221b4:	3b01      	subs	r3, #1
 80221b6:	9300      	str	r3, [sp, #0]
 80221b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80221ba:	bf08      	it	eq
 80221bc:	4613      	moveq	r3, r2
 80221be:	e72d      	b.n	802201c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 80221c0:	1428      	asrs	r0, r5, #16
 80221c2:	d45c      	bmi.n	802227e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 80221c4:	f8dc 2008 	ldr.w	r2, [ip, #8]
 80221c8:	4282      	cmp	r2, r0
 80221ca:	dd58      	ble.n	802227e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 80221cc:	ea5f 4e24 	movs.w	lr, r4, asr #16
 80221d0:	d455      	bmi.n	802227e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 80221d2:	f8dc 200c 	ldr.w	r2, [ip, #12]
 80221d6:	4572      	cmp	r2, lr
 80221d8:	dd51      	ble.n	802227e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 80221da:	9a01      	ldr	r2, [sp, #4]
 80221dc:	9902      	ldr	r1, [sp, #8]
 80221de:	fb0e 0002 	mla	r0, lr, r2, r0
 80221e2:	0842      	lsrs	r2, r0, #1
 80221e4:	07c0      	lsls	r0, r0, #31
 80221e6:	5c8a      	ldrb	r2, [r1, r2]
 80221e8:	bf54      	ite	pl
 80221ea:	f002 020f 	andpl.w	r2, r2, #15
 80221ee:	1112      	asrmi	r2, r2, #4
 80221f0:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80221f4:	b2d2      	uxtb	r2, r2
 80221f6:	2a00      	cmp	r2, #0
 80221f8:	d041      	beq.n	802227e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 80221fa:	492d      	ldr	r1, [pc, #180]	; (80222b0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 80221fc:	2aff      	cmp	r2, #255	; 0xff
 80221fe:	6808      	ldr	r0, [r1, #0]
 8022200:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 8022204:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 8022208:	fa5f fe80 	uxtb.w	lr, r0
 802220c:	ea4f 0047 	mov.w	r0, r7, lsl #1
 8022210:	d03b      	beq.n	802228a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8022212:	fa1f f982 	uxth.w	r9, r2
 8022216:	4438      	add	r0, r7
 8022218:	43d2      	mvns	r2, r2
 802221a:	f816 8000 	ldrb.w	r8, [r6, r0]
 802221e:	fb1e fe09 	smulbb	lr, lr, r9
 8022222:	fb1a fa09 	smulbb	sl, sl, r9
 8022226:	b2d2      	uxtb	r2, r2
 8022228:	fb1b f909 	smulbb	r9, fp, r9
 802222c:	fb08 ee02 	mla	lr, r8, r2, lr
 8022230:	fa1f fe8e 	uxth.w	lr, lr
 8022234:	f10e 0801 	add.w	r8, lr, #1
 8022238:	eb08 2e1e 	add.w	lr, r8, lr, lsr #8
 802223c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8022240:	f806 e000 	strb.w	lr, [r6, r0]
 8022244:	4430      	add	r0, r6
 8022246:	f890 e001 	ldrb.w	lr, [r0, #1]
 802224a:	fb0e aa02 	mla	sl, lr, r2, sl
 802224e:	fa1f fa8a 	uxth.w	sl, sl
 8022252:	f10a 0e01 	add.w	lr, sl, #1
 8022256:	eb0e 2a1a 	add.w	sl, lr, sl, lsr #8
 802225a:	f890 e002 	ldrb.w	lr, [r0, #2]
 802225e:	fb0e 9902 	mla	r9, lr, r2, r9
 8022262:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8022266:	fa1f f989 	uxth.w	r9, r9
 802226a:	f880 a001 	strb.w	sl, [r0, #1]
 802226e:	f109 0201 	add.w	r2, r9, #1
 8022272:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 8022276:	ea4f 2929 	mov.w	r9, r9, asr #8
 802227a:	f880 9002 	strb.w	r9, [r0, #2]
 802227e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8022280:	3701      	adds	r7, #1
 8022282:	4415      	add	r5, r2
 8022284:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8022286:	4414      	add	r4, r2
 8022288:	e756      	b.n	8022138 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 802228a:	4438      	add	r0, r7
 802228c:	f806 e000 	strb.w	lr, [r6, r0]
 8022290:	4430      	add	r0, r6
 8022292:	f880 a001 	strb.w	sl, [r0, #1]
 8022296:	f880 b002 	strb.w	fp, [r0, #2]
 802229a:	e7f0      	b.n	802227e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 802229c:	f800 7c03 	strb.w	r7, [r0, #-3]
 80222a0:	f800 9c02 	strb.w	r9, [r0, #-2]
 80222a4:	f800 bc01 	strb.w	fp, [r0, #-1]
 80222a8:	e73d      	b.n	8022126 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 80222aa:	b005      	add	sp, #20
 80222ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80222b0:	24026248 	.word	0x24026248

080222b4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 80222b4:	4770      	bx	lr

080222b6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 80222b6:	4770      	bx	lr

080222b8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 80222b8:	4770      	bx	lr

080222ba <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 80222ba:	4770      	bx	lr

080222bc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 80222bc:	4770      	bx	lr

080222be <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 80222be:	4770      	bx	lr

080222c0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 80222c0:	4770      	bx	lr

080222c2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 80222c2:	4770      	bx	lr

080222c4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 80222c4:	4770      	bx	lr

080222c6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 80222c6:	4770      	bx	lr

080222c8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 80222c8:	4770      	bx	lr

080222ca <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 80222ca:	4770      	bx	lr

080222cc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 80222cc:	4770      	bx	lr

080222ce <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 80222ce:	4770      	bx	lr

080222d0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 80222d0:	4770      	bx	lr

080222d2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 80222d2:	4770      	bx	lr

080222d4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 80222d4:	4770      	bx	lr

080222d6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 80222d6:	4770      	bx	lr

080222d8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 80222d8:	4770      	bx	lr

080222da <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 80222da:	4770      	bx	lr

080222dc <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 80222dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80222de:	4606      	mov	r6, r0
 80222e0:	b087      	sub	sp, #28
 80222e2:	4615      	mov	r5, r2
 80222e4:	461f      	mov	r7, r3
 80222e6:	b353      	cbz	r3, 802233e <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 80222e8:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 80222ec:	2b00      	cmp	r3, #0
 80222ee:	dd26      	ble.n	802233e <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 80222f0:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 80222f4:	2b00      	cmp	r3, #0
 80222f6:	dd22      	ble.n	802233e <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 80222f8:	6808      	ldr	r0, [r1, #0]
 80222fa:	aa04      	add	r2, sp, #16
 80222fc:	6849      	ldr	r1, [r1, #4]
 80222fe:	4c1b      	ldr	r4, [pc, #108]	; (802236c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 8022300:	c203      	stmia	r2!, {r0, r1}
 8022302:	a804      	add	r0, sp, #16
 8022304:	f7fb fa24 	bl	801d750 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022308:	6820      	ldr	r0, [r4, #0]
 802230a:	6803      	ldr	r3, [r0, #0]
 802230c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802230e:	4798      	blx	r3
 8022310:	2fff      	cmp	r7, #255	; 0xff
 8022312:	d016      	beq.n	8022342 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 8022314:	f010 0f08 	tst.w	r0, #8
 8022318:	6820      	ldr	r0, [r4, #0]
 802231a:	d015      	beq.n	8022348 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x6c>
 802231c:	2400      	movs	r4, #0
 802231e:	6801      	ldr	r1, [r0, #0]
 8022320:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8022324:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8022328:	e9cd 7402 	strd	r7, r4, [sp, #8]
 802232c:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 8022330:	9401      	str	r4, [sp, #4]
 8022332:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 8022336:	9400      	str	r4, [sp, #0]
 8022338:	6e0c      	ldr	r4, [r1, #96]	; 0x60
 802233a:	4629      	mov	r1, r5
 802233c:	47a0      	blx	r4
 802233e:	b007      	add	sp, #28
 8022340:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022342:	f010 0f02 	tst.w	r0, #2
 8022346:	e7e7      	b.n	8022318 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3c>
 8022348:	6803      	ldr	r3, [r0, #0]
 802234a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802234c:	4798      	blx	r3
 802234e:	4b08      	ldr	r3, [pc, #32]	; (8022370 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x94>)
 8022350:	4601      	mov	r1, r0
 8022352:	4630      	mov	r0, r6
 8022354:	881a      	ldrh	r2, [r3, #0]
 8022356:	6833      	ldr	r3, [r6, #0]
 8022358:	e9cd 5700 	strd	r5, r7, [sp]
 802235c:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 802235e:	ab04      	add	r3, sp, #16
 8022360:	47a8      	blx	r5
 8022362:	6820      	ldr	r0, [r4, #0]
 8022364:	6803      	ldr	r3, [r0, #0]
 8022366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022368:	4798      	blx	r3
 802236a:	e7e8      	b.n	802233e <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 802236c:	24026240 	.word	0x24026240
 8022370:	2402623a 	.word	0x2402623a

08022374 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 8022374:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8022378:	b08b      	sub	sp, #44	; 0x2c
 802237a:	460d      	mov	r5, r1
 802237c:	4616      	mov	r6, r2
 802237e:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
 8022382:	f1b8 0f00 	cmp.w	r8, #0
 8022386:	d047      	beq.n	8022418 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 8022388:	6810      	ldr	r0, [r2, #0]
 802238a:	ac06      	add	r4, sp, #24
 802238c:	6851      	ldr	r1, [r2, #4]
 802238e:	4f51      	ldr	r7, [pc, #324]	; (80224d4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>)
 8022390:	c403      	stmia	r4!, {r0, r1}
 8022392:	6818      	ldr	r0, [r3, #0]
 8022394:	ac08      	add	r4, sp, #32
 8022396:	6859      	ldr	r1, [r3, #4]
 8022398:	c403      	stmia	r4!, {r0, r1}
 802239a:	a806      	add	r0, sp, #24
 802239c:	f7fb f9d8 	bl	801d750 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80223a0:	4631      	mov	r1, r6
 80223a2:	a808      	add	r0, sp, #32
 80223a4:	f7fb fa18 	bl	801d7d8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80223a8:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 80223ac:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 80223b0:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80223b4:	6838      	ldr	r0, [r7, #0]
 80223b6:	fb11 2103 	smlabb	r1, r1, r3, r2
 80223ba:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	; 0x24
 80223be:	f9bd 4026 	ldrsh.w	r4, [sp, #38]	; 0x26
 80223c2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80223c6:	440d      	add	r5, r1
 80223c8:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 80223cc:	440a      	add	r2, r1
 80223ce:	f8ad 2020 	strh.w	r2, [sp, #32]
 80223d2:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80223d6:	4413      	add	r3, r2
 80223d8:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80223dc:	6803      	ldr	r3, [r0, #0]
 80223de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80223e0:	4798      	blx	r3
 80223e2:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80223e6:	d01a      	beq.n	802241e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xaa>
 80223e8:	f010 0f04 	tst.w	r0, #4
 80223ec:	6838      	ldr	r0, [r7, #0]
 80223ee:	d019      	beq.n	8022424 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb0>
 80223f0:	2100      	movs	r1, #0
 80223f2:	6807      	ldr	r7, [r0, #0]
 80223f4:	b2a4      	uxth	r4, r4
 80223f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80223fa:	b2b6      	uxth	r6, r6
 80223fc:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8022400:	9401      	str	r4, [sp, #4]
 8022402:	9600      	str	r6, [sp, #0]
 8022404:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8022408:	e9cd 1104 	strd	r1, r1, [sp, #16]
 802240c:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8022410:	9102      	str	r1, [sp, #8]
 8022412:	4629      	mov	r1, r5
 8022414:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8022416:	47a0      	blx	r4
 8022418:	b00b      	add	sp, #44	; 0x2c
 802241a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802241e:	f010 0f01 	tst.w	r0, #1
 8022422:	e7e3      	b.n	80223ec <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x78>
 8022424:	6803      	ldr	r3, [r0, #0]
 8022426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022428:	4798      	blx	r3
 802242a:	4a2b      	ldr	r2, [pc, #172]	; (80224d8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x164>)
 802242c:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 8022430:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8022434:	8813      	ldrh	r3, [r2, #0]
 8022436:	f9bd c020 	ldrsh.w	ip, [sp, #32]
 802243a:	fb03 f404 	mul.w	r4, r3, r4
 802243e:	fb03 c101 	mla	r1, r3, r1, ip
 8022442:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8022446:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802244a:	4408      	add	r0, r1
 802244c:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8022450:	4404      	add	r4, r0
 8022452:	d02e      	beq.n	80224b2 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 8022454:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 8022458:	1b9b      	subs	r3, r3, r6
 802245a:	f1c8 0cff 	rsb	ip, r8, #255	; 0xff
 802245e:	1b96      	subs	r6, r2, r6
 8022460:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022464:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8022468:	42a0      	cmp	r0, r4
 802246a:	d22d      	bcs.n	80224c8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 802246c:	eb00 0e01 	add.w	lr, r0, r1
 8022470:	4570      	cmp	r0, lr
 8022472:	d210      	bcs.n	8022496 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x122>
 8022474:	f890 9000 	ldrb.w	r9, [r0]
 8022478:	f815 2b01 	ldrb.w	r2, [r5], #1
 802247c:	fb19 f90c 	smulbb	r9, r9, ip
 8022480:	fb02 9208 	mla	r2, r2, r8, r9
 8022484:	b292      	uxth	r2, r2
 8022486:	f102 0901 	add.w	r9, r2, #1
 802248a:	eb09 2212 	add.w	r2, r9, r2, lsr #8
 802248e:	1212      	asrs	r2, r2, #8
 8022490:	f800 2b01 	strb.w	r2, [r0], #1
 8022494:	e7ec      	b.n	8022470 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfc>
 8022496:	4418      	add	r0, r3
 8022498:	4435      	add	r5, r6
 802249a:	e7e5      	b.n	8022468 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf4>
 802249c:	8813      	ldrh	r3, [r2, #0]
 802249e:	1b9b      	subs	r3, r3, r6
 80224a0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80224a4:	4418      	add	r0, r3
 80224a6:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80224aa:	1b9b      	subs	r3, r3, r6
 80224ac:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80224b0:	441d      	add	r5, r3
 80224b2:	42a0      	cmp	r0, r4
 80224b4:	d208      	bcs.n	80224c8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 80224b6:	eb00 0c01 	add.w	ip, r0, r1
 80224ba:	4560      	cmp	r0, ip
 80224bc:	d2ee      	bcs.n	802249c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x128>
 80224be:	f815 3b01 	ldrb.w	r3, [r5], #1
 80224c2:	f800 3b01 	strb.w	r3, [r0], #1
 80224c6:	e7f8      	b.n	80224ba <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x146>
 80224c8:	6838      	ldr	r0, [r7, #0]
 80224ca:	6803      	ldr	r3, [r0, #0]
 80224cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80224ce:	4798      	blx	r3
 80224d0:	e7a2      	b.n	8022418 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 80224d2:	bf00      	nop
 80224d4:	24026240 	.word	0x24026240
 80224d8:	2402623a 	.word	0x2402623a

080224dc <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 80224dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80224de:	2300      	movs	r3, #0
 80224e0:	b085      	sub	sp, #20
 80224e2:	9300      	str	r3, [sp, #0]
 80224e4:	4b41      	ldr	r3, [pc, #260]	; (80225ec <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x110>)
 80224e6:	781b      	ldrb	r3, [r3, #0]
 80224e8:	2b00      	cmp	r3, #0
 80224ea:	d136      	bne.n	802255a <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7e>
 80224ec:	4a40      	ldr	r2, [pc, #256]	; (80225f0 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 80224ee:	f9b2 2000 	ldrsh.w	r2, [r2]
 80224f2:	f8ad 2004 	strh.w	r2, [sp, #4]
 80224f6:	2b00      	cmp	r3, #0
 80224f8:	d131      	bne.n	802255e <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x82>
 80224fa:	4b3e      	ldr	r3, [pc, #248]	; (80225f4 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 80224fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8022500:	ac02      	add	r4, sp, #8
 8022502:	6808      	ldr	r0, [r1, #0]
 8022504:	f8ad 3006 	strh.w	r3, [sp, #6]
 8022508:	ab02      	add	r3, sp, #8
 802250a:	6849      	ldr	r1, [r1, #4]
 802250c:	4d3a      	ldr	r5, [pc, #232]	; (80225f8 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x11c>)
 802250e:	c303      	stmia	r3!, {r0, r1}
 8022510:	4669      	mov	r1, sp
 8022512:	4620      	mov	r0, r4
 8022514:	f7fb f960 	bl	801d7d8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022518:	4668      	mov	r0, sp
 802251a:	f7fb f919 	bl	801d750 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802251e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8022522:	f8bd 2000 	ldrh.w	r2, [sp]
 8022526:	462e      	mov	r6, r5
 8022528:	6828      	ldr	r0, [r5, #0]
 802252a:	4413      	add	r3, r2
 802252c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8022530:	f8ad 3008 	strh.w	r3, [sp, #8]
 8022534:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8022538:	4413      	add	r3, r2
 802253a:	f8ad 300a 	strh.w	r3, [sp, #10]
 802253e:	6803      	ldr	r3, [r0, #0]
 8022540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022542:	4798      	blx	r3
 8022544:	f010 0f01 	tst.w	r0, #1
 8022548:	d00b      	beq.n	8022562 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x86>
 802254a:	6828      	ldr	r0, [r5, #0]
 802254c:	6803      	ldr	r3, [r0, #0]
 802254e:	e894 0006 	ldmia.w	r4, {r1, r2}
 8022552:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8022554:	4798      	blx	r3
 8022556:	b005      	add	sp, #20
 8022558:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802255a:	4a26      	ldr	r2, [pc, #152]	; (80225f4 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 802255c:	e7c7      	b.n	80224ee <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 802255e:	4b24      	ldr	r3, [pc, #144]	; (80225f0 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 8022560:	e7cc      	b.n	80224fc <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 8022562:	6830      	ldr	r0, [r6, #0]
 8022564:	f9bd 700e 	ldrsh.w	r7, [sp, #14]
 8022568:	6803      	ldr	r3, [r0, #0]
 802256a:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 802256e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022570:	4798      	blx	r3
 8022572:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8022576:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 802257a:	f8bd 4004 	ldrh.w	r4, [sp, #4]
 802257e:	fb14 3402 	smlabb	r4, r4, r2, r3
 8022582:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8022586:	4404      	add	r4, r0
 8022588:	6830      	ldr	r0, [r6, #0]
 802258a:	6803      	ldr	r3, [r0, #0]
 802258c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802258e:	4798      	blx	r3
 8022590:	4917      	ldr	r1, [pc, #92]	; (80225f0 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 8022592:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 8022596:	880b      	ldrh	r3, [r1, #0]
 8022598:	f9bd c008 	ldrsh.w	ip, [sp, #8]
 802259c:	fb03 c202 	mla	r2, r3, r2, ip
 80225a0:	437b      	muls	r3, r7
 80225a2:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 80225a6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80225aa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80225ae:	4410      	add	r0, r2
 80225b0:	18c2      	adds	r2, r0, r3
 80225b2:	4290      	cmp	r0, r2
 80225b4:	d214      	bcs.n	80225e0 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>
 80225b6:	eb00 0c07 	add.w	ip, r0, r7
 80225ba:	4560      	cmp	r0, ip
 80225bc:	d204      	bcs.n	80225c8 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xec>
 80225be:	f814 3b01 	ldrb.w	r3, [r4], #1
 80225c2:	f800 3b01 	strb.w	r3, [r0], #1
 80225c6:	e7f8      	b.n	80225ba <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xde>
 80225c8:	880b      	ldrh	r3, [r1, #0]
 80225ca:	1b5b      	subs	r3, r3, r5
 80225cc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80225d0:	4418      	add	r0, r3
 80225d2:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80225d6:	1b5b      	subs	r3, r3, r5
 80225d8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80225dc:	441c      	add	r4, r3
 80225de:	e7e8      	b.n	80225b2 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd6>
 80225e0:	6830      	ldr	r0, [r6, #0]
 80225e2:	6803      	ldr	r3, [r0, #0]
 80225e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80225e6:	4798      	blx	r3
 80225e8:	e7b5      	b.n	8022556 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 80225ea:	bf00      	nop
 80225ec:	24026238 	.word	0x24026238
 80225f0:	2402623a 	.word	0x2402623a
 80225f4:	2402623c 	.word	0x2402623c
 80225f8:	24026240 	.word	0x24026240

080225fc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 80225fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022600:	b089      	sub	sp, #36	; 0x24
 8022602:	4607      	mov	r7, r0
 8022604:	4689      	mov	r9, r1
 8022606:	4692      	mov	sl, r2
 8022608:	ac08      	add	r4, sp, #32
 802260a:	461e      	mov	r6, r3
 802260c:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 8022610:	4620      	mov	r0, r4
 8022612:	f7fe f8f1 	bl	80207f8 <_ZNK8touchgfx6Bitmap7getDataEv>
 8022616:	683b      	ldr	r3, [r7, #0]
 8022618:	4605      	mov	r5, r0
 802261a:	4620      	mov	r0, r4
 802261c:	f8d3 8018 	ldr.w	r8, [r3, #24]
 8022620:	f7fd fffe 	bl	8020620 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8022624:	4683      	mov	fp, r0
 8022626:	4620      	mov	r0, r4
 8022628:	f7fe f82e 	bl	8020688 <_ZNK8touchgfx6Bitmap9getHeightEv>
 802262c:	4653      	mov	r3, sl
 802262e:	464a      	mov	r2, r9
 8022630:	4639      	mov	r1, r7
 8022632:	9500      	str	r5, [sp, #0]
 8022634:	e9cd b001 	strd	fp, r0, [sp, #4]
 8022638:	a806      	add	r0, sp, #24
 802263a:	47c0      	blx	r8
 802263c:	a906      	add	r1, sp, #24
 802263e:	4630      	mov	r0, r6
 8022640:	f7fd fed2 	bl	80203e8 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>
 8022644:	4628      	mov	r0, r5
 8022646:	b009      	add	sp, #36	; 0x24
 8022648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802264c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 802264c:	b510      	push	{r4, lr}
 802264e:	4604      	mov	r4, r0
 8022650:	2104      	movs	r1, #4
 8022652:	f006 f8ee 	bl	8028832 <_ZdlPvj>
 8022656:	4620      	mov	r0, r4
 8022658:	bd10      	pop	{r4, pc}

0802265a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 802265a:	b510      	push	{r4, lr}
 802265c:	4604      	mov	r4, r0
 802265e:	2104      	movs	r1, #4
 8022660:	f006 f8e7 	bl	8028832 <_ZdlPvj>
 8022664:	4620      	mov	r0, r4
 8022666:	bd10      	pop	{r4, pc}

08022668 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8022668:	b510      	push	{r4, lr}
 802266a:	4604      	mov	r4, r0
 802266c:	2104      	movs	r1, #4
 802266e:	f006 f8e0 	bl	8028832 <_ZdlPvj>
 8022672:	4620      	mov	r0, r4
 8022674:	bd10      	pop	{r4, pc}

08022676 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8022676:	b510      	push	{r4, lr}
 8022678:	4604      	mov	r4, r0
 802267a:	2104      	movs	r1, #4
 802267c:	f006 f8d9 	bl	8028832 <_ZdlPvj>
 8022680:	4620      	mov	r0, r4
 8022682:	bd10      	pop	{r4, pc}

08022684 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8022684:	b510      	push	{r4, lr}
 8022686:	4604      	mov	r4, r0
 8022688:	2104      	movs	r1, #4
 802268a:	f006 f8d2 	bl	8028832 <_ZdlPvj>
 802268e:	4620      	mov	r0, r4
 8022690:	bd10      	pop	{r4, pc}

08022692 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8022692:	b510      	push	{r4, lr}
 8022694:	4604      	mov	r4, r0
 8022696:	2104      	movs	r1, #4
 8022698:	f006 f8cb 	bl	8028832 <_ZdlPvj>
 802269c:	4620      	mov	r0, r4
 802269e:	bd10      	pop	{r4, pc}

080226a0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 80226a0:	b510      	push	{r4, lr}
 80226a2:	4604      	mov	r4, r0
 80226a4:	2104      	movs	r1, #4
 80226a6:	f006 f8c4 	bl	8028832 <_ZdlPvj>
 80226aa:	4620      	mov	r0, r4
 80226ac:	bd10      	pop	{r4, pc}

080226ae <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 80226ae:	b510      	push	{r4, lr}
 80226b0:	4604      	mov	r4, r0
 80226b2:	2104      	movs	r1, #4
 80226b4:	f006 f8bd 	bl	8028832 <_ZdlPvj>
 80226b8:	4620      	mov	r0, r4
 80226ba:	bd10      	pop	{r4, pc}

080226bc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 80226bc:	b510      	push	{r4, lr}
 80226be:	4604      	mov	r4, r0
 80226c0:	2104      	movs	r1, #4
 80226c2:	f006 f8b6 	bl	8028832 <_ZdlPvj>
 80226c6:	4620      	mov	r0, r4
 80226c8:	bd10      	pop	{r4, pc}

080226ca <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 80226ca:	b510      	push	{r4, lr}
 80226cc:	4604      	mov	r4, r0
 80226ce:	2104      	movs	r1, #4
 80226d0:	f006 f8af 	bl	8028832 <_ZdlPvj>
 80226d4:	4620      	mov	r0, r4
 80226d6:	bd10      	pop	{r4, pc}

080226d8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 80226d8:	b510      	push	{r4, lr}
 80226da:	4604      	mov	r4, r0
 80226dc:	2104      	movs	r1, #4
 80226de:	f006 f8a8 	bl	8028832 <_ZdlPvj>
 80226e2:	4620      	mov	r0, r4
 80226e4:	bd10      	pop	{r4, pc}

080226e6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 80226e6:	b510      	push	{r4, lr}
 80226e8:	4604      	mov	r4, r0
 80226ea:	2104      	movs	r1, #4
 80226ec:	f006 f8a1 	bl	8028832 <_ZdlPvj>
 80226f0:	4620      	mov	r0, r4
 80226f2:	bd10      	pop	{r4, pc}

080226f4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 80226f4:	b510      	push	{r4, lr}
 80226f6:	4604      	mov	r4, r0
 80226f8:	2104      	movs	r1, #4
 80226fa:	f006 f89a 	bl	8028832 <_ZdlPvj>
 80226fe:	4620      	mov	r0, r4
 8022700:	bd10      	pop	{r4, pc}

08022702 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8022702:	b510      	push	{r4, lr}
 8022704:	4604      	mov	r4, r0
 8022706:	2104      	movs	r1, #4
 8022708:	f006 f893 	bl	8028832 <_ZdlPvj>
 802270c:	4620      	mov	r0, r4
 802270e:	bd10      	pop	{r4, pc}

08022710 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8022710:	b510      	push	{r4, lr}
 8022712:	4604      	mov	r4, r0
 8022714:	2104      	movs	r1, #4
 8022716:	f006 f88c 	bl	8028832 <_ZdlPvj>
 802271a:	4620      	mov	r0, r4
 802271c:	bd10      	pop	{r4, pc}

0802271e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 802271e:	b510      	push	{r4, lr}
 8022720:	4604      	mov	r4, r0
 8022722:	2104      	movs	r1, #4
 8022724:	f006 f885 	bl	8028832 <_ZdlPvj>
 8022728:	4620      	mov	r0, r4
 802272a:	bd10      	pop	{r4, pc}

0802272c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 802272c:	b510      	push	{r4, lr}
 802272e:	4604      	mov	r4, r0
 8022730:	2104      	movs	r1, #4
 8022732:	f006 f87e 	bl	8028832 <_ZdlPvj>
 8022736:	4620      	mov	r0, r4
 8022738:	bd10      	pop	{r4, pc}

0802273a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 802273a:	b510      	push	{r4, lr}
 802273c:	4604      	mov	r4, r0
 802273e:	2104      	movs	r1, #4
 8022740:	f006 f877 	bl	8028832 <_ZdlPvj>
 8022744:	4620      	mov	r0, r4
 8022746:	bd10      	pop	{r4, pc}

08022748 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 8022748:	b510      	push	{r4, lr}
 802274a:	4604      	mov	r4, r0
 802274c:	2104      	movs	r1, #4
 802274e:	f006 f870 	bl	8028832 <_ZdlPvj>
 8022752:	4620      	mov	r0, r4
 8022754:	bd10      	pop	{r4, pc}

08022756 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 8022756:	b510      	push	{r4, lr}
 8022758:	4604      	mov	r4, r0
 802275a:	2104      	movs	r1, #4
 802275c:	f006 f869 	bl	8028832 <_ZdlPvj>
 8022760:	4620      	mov	r0, r4
 8022762:	bd10      	pop	{r4, pc}

08022764 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 8022764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022768:	f89d 001c 	ldrb.w	r0, [sp, #28]
 802276c:	9c06      	ldr	r4, [sp, #24]
 802276e:	2800      	cmp	r0, #0
 8022770:	d06e      	beq.n	8022850 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8022772:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 8022776:	2d00      	cmp	r5, #0
 8022778:	dd6a      	ble.n	8022850 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 802277a:	f9b3 c006 	ldrsh.w	ip, [r3, #6]
 802277e:	f1bc 0f00 	cmp.w	ip, #0
 8022782:	dd65      	ble.n	8022850 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8022784:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
 8022788:	28ff      	cmp	r0, #255	; 0xff
 802278a:	f9b3 3000 	ldrsh.w	r3, [r3]
 802278e:	f3c4 2707 	ubfx	r7, r4, #8, #8
 8022792:	fb02 3306 	mla	r3, r2, r6, r3
 8022796:	f3c4 4607 	ubfx	r6, r4, #16, #8
 802279a:	b2e4      	uxtb	r4, r4
 802279c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80227a0:	4419      	add	r1, r3
 80227a2:	fb02 f30c 	mul.w	r3, r2, ip
 80227a6:	eba2 0205 	sub.w	r2, r2, r5
 80227aa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80227ae:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80227b2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80227b6:	440b      	add	r3, r1
 80227b8:	d03e      	beq.n	8022838 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd4>
 80227ba:	fa1f fc80 	uxth.w	ip, r0
 80227be:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 80227c2:	fb06 f60c 	mul.w	r6, r6, ip
 80227c6:	b280      	uxth	r0, r0
 80227c8:	fb07 f70c 	mul.w	r7, r7, ip
 80227cc:	fb04 f40c 	mul.w	r4, r4, ip
 80227d0:	4299      	cmp	r1, r3
 80227d2:	d23d      	bcs.n	8022850 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 80227d4:	eb01 0c05 	add.w	ip, r1, r5
 80227d8:	458c      	cmp	ip, r1
 80227da:	f101 0e03 	add.w	lr, r1, #3
 80227de:	d928      	bls.n	8022832 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xce>
 80227e0:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 80227e4:	fb11 f100 	smulbb	r1, r1, r0
 80227e8:	4421      	add	r1, r4
 80227ea:	b289      	uxth	r1, r1
 80227ec:	f101 0801 	add.w	r8, r1, #1
 80227f0:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 80227f4:	1209      	asrs	r1, r1, #8
 80227f6:	f80e 1c03 	strb.w	r1, [lr, #-3]
 80227fa:	f81e 1c02 	ldrb.w	r1, [lr, #-2]
 80227fe:	fb11 f100 	smulbb	r1, r1, r0
 8022802:	4439      	add	r1, r7
 8022804:	b289      	uxth	r1, r1
 8022806:	f101 0801 	add.w	r8, r1, #1
 802280a:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 802280e:	1209      	asrs	r1, r1, #8
 8022810:	f80e 1c02 	strb.w	r1, [lr, #-2]
 8022814:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 8022818:	fb11 f100 	smulbb	r1, r1, r0
 802281c:	4431      	add	r1, r6
 802281e:	b289      	uxth	r1, r1
 8022820:	f101 0801 	add.w	r8, r1, #1
 8022824:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8022828:	1209      	asrs	r1, r1, #8
 802282a:	f80e 1c01 	strb.w	r1, [lr, #-1]
 802282e:	4671      	mov	r1, lr
 8022830:	e7d2      	b.n	80227d8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x74>
 8022832:	4411      	add	r1, r2
 8022834:	e7cc      	b.n	80227d0 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6c>
 8022836:	4411      	add	r1, r2
 8022838:	4299      	cmp	r1, r3
 802283a:	d209      	bcs.n	8022850 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 802283c:	1948      	adds	r0, r1, r5
 802283e:	4281      	cmp	r1, r0
 8022840:	d2f9      	bcs.n	8022836 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd2>
 8022842:	700c      	strb	r4, [r1, #0]
 8022844:	3103      	adds	r1, #3
 8022846:	f801 7c02 	strb.w	r7, [r1, #-2]
 802284a:	f801 6c01 	strb.w	r6, [r1, #-1]
 802284e:	e7f6      	b.n	802283e <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xda>
 8022850:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08022854 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 8022854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022858:	b093      	sub	sp, #76	; 0x4c
 802285a:	4699      	mov	r9, r3
 802285c:	4617      	mov	r7, r2
 802285e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8022862:	f9bd 8074 	ldrsh.w	r8, [sp, #116]	; 0x74
 8022866:	4604      	mov	r4, r0
 8022868:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 802286c:	a80c      	add	r0, sp, #48	; 0x30
 802286e:	f9bd 6078 	ldrsh.w	r6, [sp, #120]	; 0x78
 8022872:	460d      	mov	r5, r1
 8022874:	4649      	mov	r1, r9
 8022876:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 802287a:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 802287e:	f8ad 8034 	strh.w	r8, [sp, #52]	; 0x34
 8022882:	f8ad 6036 	strh.w	r6, [sp, #54]	; 0x36
 8022886:	f7f7 fd6f 	bl	801a368 <_ZN8touchgfx4RectaNERKS0_>
 802288a:	4639      	mov	r1, r7
 802288c:	a80c      	add	r0, sp, #48	; 0x30
 802288e:	f7f7 fd6b 	bl	801a368 <_ZN8touchgfx4RectaNERKS0_>
 8022892:	4b78      	ldr	r3, [pc, #480]	; (8022a74 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 8022894:	8818      	ldrh	r0, [r3, #0]
 8022896:	4b78      	ldr	r3, [pc, #480]	; (8022a78 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>)
 8022898:	b202      	sxth	r2, r0
 802289a:	8819      	ldrh	r1, [r3, #0]
 802289c:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 80228a0:	b20f      	sxth	r7, r1
 80228a2:	2b00      	cmp	r3, #0
 80228a4:	da07      	bge.n	80228b6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x62>
 80228a6:	f8bd c034 	ldrh.w	ip, [sp, #52]	; 0x34
 80228aa:	4463      	add	r3, ip
 80228ac:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 80228b0:	2300      	movs	r3, #0
 80228b2:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 80228b6:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 80228ba:	f9bd c034 	ldrsh.w	ip, [sp, #52]	; 0x34
 80228be:	1ad2      	subs	r2, r2, r3
 80228c0:	4594      	cmp	ip, r2
 80228c2:	bfc4      	itt	gt
 80228c4:	1ac2      	subgt	r2, r0, r3
 80228c6:	f8ad 2034 	strhgt.w	r2, [sp, #52]	; 0x34
 80228ca:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 80228ce:	2a00      	cmp	r2, #0
 80228d0:	da07      	bge.n	80228e2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x8e>
 80228d2:	f8bd c036 	ldrh.w	ip, [sp, #54]	; 0x36
 80228d6:	4462      	add	r2, ip
 80228d8:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
 80228dc:	2200      	movs	r2, #0
 80228de:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 80228e2:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 80228e6:	f9bd c036 	ldrsh.w	ip, [sp, #54]	; 0x36
 80228ea:	1abf      	subs	r7, r7, r2
 80228ec:	45bc      	cmp	ip, r7
 80228ee:	f8df c190 	ldr.w	ip, [pc, #400]	; 8022a80 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x22c>
 80228f2:	bfc8      	it	gt
 80228f4:	1a8f      	subgt	r7, r1, r2
 80228f6:	f89c c000 	ldrb.w	ip, [ip]
 80228fa:	bfc8      	it	gt
 80228fc:	f8ad 7036 	strhgt.w	r7, [sp, #54]	; 0x36
 8022900:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
 8022904:	f1bc 0f00 	cmp.w	ip, #0
 8022908:	d176      	bne.n	80229f8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a4>
 802290a:	4287      	cmp	r7, r0
 802290c:	bf14      	ite	ne
 802290e:	2100      	movne	r1, #0
 8022910:	2101      	moveq	r1, #1
 8022912:	2f00      	cmp	r7, #0
 8022914:	9107      	str	r1, [sp, #28]
 8022916:	dd73      	ble.n	8022a00 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 8022918:	f9bd 1036 	ldrsh.w	r1, [sp, #54]	; 0x36
 802291c:	2900      	cmp	r1, #0
 802291e:	9104      	str	r1, [sp, #16]
 8022920:	dd6e      	ble.n	8022a00 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 8022922:	f8b9 1000 	ldrh.w	r1, [r9]
 8022926:	a80e      	add	r0, sp, #56	; 0x38
 8022928:	f8ad 8044 	strh.w	r8, [sp, #68]	; 0x44
 802292c:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8022930:	1a5b      	subs	r3, r3, r1
 8022932:	a910      	add	r1, sp, #64	; 0x40
 8022934:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
 8022938:	b21b      	sxth	r3, r3
 802293a:	f8ad 703c 	strh.w	r7, [sp, #60]	; 0x3c
 802293e:	f8df a144 	ldr.w	sl, [pc, #324]	; 8022a84 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 8022942:	9305      	str	r3, [sp, #20]
 8022944:	f8b9 3002 	ldrh.w	r3, [r9, #2]
 8022948:	1ad2      	subs	r2, r2, r3
 802294a:	b213      	sxth	r3, r2
 802294c:	9306      	str	r3, [sp, #24]
 802294e:	9b05      	ldr	r3, [sp, #20]
 8022950:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 8022954:	9b06      	ldr	r3, [sp, #24]
 8022956:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 802295a:	9b04      	ldr	r3, [sp, #16]
 802295c:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8022960:	2300      	movs	r3, #0
 8022962:	9310      	str	r3, [sp, #64]	; 0x40
 8022964:	f7fa ff38 	bl	801d7d8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022968:	4640      	mov	r0, r8
 802296a:	f7fa fef1 	bl	801d750 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802296e:	a810      	add	r0, sp, #64	; 0x40
 8022970:	f7fa feee 	bl	801d750 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022974:	4b41      	ldr	r3, [pc, #260]	; (8022a7c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x228>)
 8022976:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 802297a:	4628      	mov	r0, r5
 802297c:	881b      	ldrh	r3, [r3, #0]
 802297e:	9308      	str	r3, [sp, #32]
 8022980:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 8022984:	b21b      	sxth	r3, r3
 8022986:	9303      	str	r3, [sp, #12]
 8022988:	682b      	ldr	r3, [r5, #0]
 802298a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802298c:	4798      	blx	r3
 802298e:	9a03      	ldr	r2, [sp, #12]
 8022990:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8022994:	4681      	mov	r9, r0
 8022996:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 802299a:	fb13 f302 	smulbb	r3, r3, r2
 802299e:	2203      	movs	r2, #3
 80229a0:	f8da 0000 	ldr.w	r0, [sl]
 80229a4:	fb15 3302 	smlabb	r3, r5, r2, r3
 80229a8:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 80229aa:	920b      	str	r2, [sp, #44]	; 0x2c
 80229ac:	441d      	add	r5, r3
 80229ae:	6803      	ldr	r3, [r0, #0]
 80229b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80229b2:	4798      	blx	r3
 80229b4:	9009      	str	r0, [sp, #36]	; 0x24
 80229b6:	f8da 0000 	ldr.w	r0, [sl]
 80229ba:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 80229be:	6803      	ldr	r3, [r0, #0]
 80229c0:	910a      	str	r1, [sp, #40]	; 0x28
 80229c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80229c4:	f9bd 6032 	ldrsh.w	r6, [sp, #50]	; 0x32
 80229c8:	4798      	blx	r3
 80229ca:	f010 0f01 	tst.w	r0, #1
 80229ce:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 80229d2:	d01e      	beq.n	8022a12 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1be>
 80229d4:	f8da 0000 	ldr.w	r0, [sl]
 80229d8:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 80229dc:	6803      	ldr	r3, [r0, #0]
 80229de:	9200      	str	r2, [sp, #0]
 80229e0:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 80229e2:	462b      	mov	r3, r5
 80229e4:	e898 0006 	ldmia.w	r8, {r1, r2}
 80229e8:	47b0      	blx	r6
 80229ea:	9b05      	ldr	r3, [sp, #20]
 80229ec:	80a7      	strh	r7, [r4, #4]
 80229ee:	8023      	strh	r3, [r4, #0]
 80229f0:	9b06      	ldr	r3, [sp, #24]
 80229f2:	8063      	strh	r3, [r4, #2]
 80229f4:	9b04      	ldr	r3, [sp, #16]
 80229f6:	e007      	b.n	8022a08 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b4>
 80229f8:	f9bd 0036 	ldrsh.w	r0, [sp, #54]	; 0x36
 80229fc:	4288      	cmp	r0, r1
 80229fe:	e785      	b.n	802290c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb8>
 8022a00:	2300      	movs	r3, #0
 8022a02:	8023      	strh	r3, [r4, #0]
 8022a04:	8063      	strh	r3, [r4, #2]
 8022a06:	80a3      	strh	r3, [r4, #4]
 8022a08:	4620      	mov	r0, r4
 8022a0a:	80e3      	strh	r3, [r4, #6]
 8022a0c:	b013      	add	sp, #76	; 0x4c
 8022a0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022a12:	fb09 f606 	mul.w	r6, r9, r6
 8022a16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022a18:	fb11 6602 	smlabb	r6, r1, r2, r6
 8022a1c:	9a07      	ldr	r2, [sp, #28]
 8022a1e:	4433      	add	r3, r6
 8022a20:	461e      	mov	r6, r3
 8022a22:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 8022a26:	b16a      	cbz	r2, 8022a44 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 8022a28:	9a08      	ldr	r2, [sp, #32]
 8022a2a:	4593      	cmp	fp, r2
 8022a2c:	d10a      	bne.n	8022a44 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 8022a2e:	f8da 0000 	ldr.w	r0, [sl]
 8022a32:	fb09 f303 	mul.w	r3, r9, r3
 8022a36:	4629      	mov	r1, r5
 8022a38:	6802      	ldr	r2, [r0, #0]
 8022a3a:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 8022a3e:	4632      	mov	r2, r6
 8022a40:	47d0      	blx	sl
 8022a42:	e7d2      	b.n	80229ea <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 8022a44:	9a03      	ldr	r2, [sp, #12]
 8022a46:	f8df b03c 	ldr.w	fp, [pc, #60]	; 8022a84 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 8022a4a:	fb02 5803 	mla	r8, r2, r3, r5
 8022a4e:	4545      	cmp	r5, r8
 8022a50:	d2cb      	bcs.n	80229ea <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 8022a52:	f8db 0000 	ldr.w	r0, [fp]
 8022a56:	4629      	mov	r1, r5
 8022a58:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 8022a5c:	6802      	ldr	r2, [r0, #0]
 8022a5e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022a62:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 8022a66:	4632      	mov	r2, r6
 8022a68:	47d0      	blx	sl
 8022a6a:	9b03      	ldr	r3, [sp, #12]
 8022a6c:	444e      	add	r6, r9
 8022a6e:	441d      	add	r5, r3
 8022a70:	e7ed      	b.n	8022a4e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1fa>
 8022a72:	bf00      	nop
 8022a74:	24026234 	.word	0x24026234
 8022a78:	24026236 	.word	0x24026236
 8022a7c:	2402623a 	.word	0x2402623a
 8022a80:	24026238 	.word	0x24026238
 8022a84:	24026240 	.word	0x24026240

08022a88 <_ZN8touchgfx8LCD24bppC1Ev>:
 8022a88:	2200      	movs	r2, #0
 8022a8a:	490c      	ldr	r1, [pc, #48]	; (8022abc <_ZN8touchgfx8LCD24bppC1Ev+0x34>)
 8022a8c:	6042      	str	r2, [r0, #4]
 8022a8e:	6001      	str	r1, [r0, #0]
 8022a90:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8022a94:	e9c0 2204 	strd	r2, r2, [r0, #16]
 8022a98:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8022a9c:	e9c0 2208 	strd	r2, r2, [r0, #32]
 8022aa0:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 8022aa4:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 8022aa8:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 8022aac:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 8022ab0:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 8022ab4:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 8022ab8:	4770      	bx	lr
 8022aba:	bf00      	nop
 8022abc:	0802d960 	.word	0x0802d960

08022ac0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 8022ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022ac4:	b091      	sub	sp, #68	; 0x44
 8022ac6:	4607      	mov	r7, r0
 8022ac8:	4688      	mov	r8, r1
 8022aca:	6810      	ldr	r0, [r2, #0]
 8022acc:	6851      	ldr	r1, [r2, #4]
 8022ace:	ac0c      	add	r4, sp, #48	; 0x30
 8022ad0:	4616      	mov	r6, r2
 8022ad2:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 8022ad6:	4d64      	ldr	r5, [pc, #400]	; (8022c68 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 8022ad8:	f8df a190 	ldr.w	sl, [pc, #400]	; 8022c6c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 8022adc:	c403      	stmia	r4!, {r0, r1}
 8022ade:	6818      	ldr	r0, [r3, #0]
 8022ae0:	ac0e      	add	r4, sp, #56	; 0x38
 8022ae2:	6859      	ldr	r1, [r3, #4]
 8022ae4:	c403      	stmia	r4!, {r0, r1}
 8022ae6:	a80c      	add	r0, sp, #48	; 0x30
 8022ae8:	f7fa fe32 	bl	801d750 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022aec:	4631      	mov	r1, r6
 8022aee:	a80e      	add	r0, sp, #56	; 0x38
 8022af0:	f7fa fe72 	bl	801d7d8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022af4:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8022af8:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8022afc:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8022b00:	6828      	ldr	r0, [r5, #0]
 8022b02:	fb11 2103 	smlabb	r1, r1, r3, r2
 8022b06:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	; 0x3c
 8022b0a:	f9bd 603e 	ldrsh.w	r6, [sp, #62]	; 0x3e
 8022b0e:	440f      	add	r7, r1
 8022b10:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8022b14:	440a      	add	r2, r1
 8022b16:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8022b1a:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8022b1e:	4413      	add	r3, r2
 8022b20:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8022b24:	6803      	ldr	r3, [r0, #0]
 8022b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022b28:	4798      	blx	r3
 8022b2a:	f010 0f80 	tst.w	r0, #128	; 0x80
 8022b2e:	6828      	ldr	r0, [r5, #0]
 8022b30:	d01f      	beq.n	8022b72 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xb2>
 8022b32:	2201      	movs	r2, #1
 8022b34:	2500      	movs	r5, #0
 8022b36:	6801      	ldr	r1, [r0, #0]
 8022b38:	b2a4      	uxth	r4, r4
 8022b3a:	b2b6      	uxth	r6, r6
 8022b3c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8022b40:	e9cd 2508 	strd	r2, r5, [sp, #32]
 8022b44:	250b      	movs	r5, #11
 8022b46:	9507      	str	r5, [sp, #28]
 8022b48:	f8ba 5000 	ldrh.w	r5, [sl]
 8022b4c:	f8cd 9010 	str.w	r9, [sp, #16]
 8022b50:	9602      	str	r6, [sp, #8]
 8022b52:	9401      	str	r4, [sp, #4]
 8022b54:	e9cd 2505 	strd	r2, r5, [sp, #20]
 8022b58:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8022b5c:	9203      	str	r2, [sp, #12]
 8022b5e:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8022b62:	9200      	str	r2, [sp, #0]
 8022b64:	4642      	mov	r2, r8
 8022b66:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 8022b68:	4639      	mov	r1, r7
 8022b6a:	47a0      	blx	r4
 8022b6c:	b011      	add	sp, #68	; 0x44
 8022b6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022b72:	6803      	ldr	r3, [r0, #0]
 8022b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022b76:	4798      	blx	r3
 8022b78:	f8ba 5000 	ldrh.w	r5, [sl]
 8022b7c:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8022b80:	f04f 0e04 	mov.w	lr, #4
 8022b84:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8022b88:	436e      	muls	r6, r5
 8022b8a:	fb05 2303 	mla	r3, r5, r3, r2
 8022b8e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8022b92:	1b2d      	subs	r5, r5, r4
 8022b94:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022b98:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8022b9c:	4418      	add	r0, r3
 8022b9e:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8022ba2:	1982      	adds	r2, r0, r6
 8022ba4:	1b1b      	subs	r3, r3, r4
 8022ba6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8022baa:	930b      	str	r3, [sp, #44]	; 0x2c
 8022bac:	4290      	cmp	r0, r2
 8022bae:	d254      	bcs.n	8022c5a <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x19a>
 8022bb0:	eb00 0a04 	add.w	sl, r0, r4
 8022bb4:	4550      	cmp	r0, sl
 8022bb6:	d24c      	bcs.n	8022c52 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x192>
 8022bb8:	f817 1b01 	ldrb.w	r1, [r7], #1
 8022bbc:	fb1e e101 	smlabb	r1, lr, r1, lr
 8022bc0:	eb08 0c01 	add.w	ip, r8, r1
 8022bc4:	f89c 3003 	ldrb.w	r3, [ip, #3]
 8022bc8:	b173      	cbz	r3, 8022be8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 8022bca:	2bff      	cmp	r3, #255	; 0xff
 8022bcc:	f818 b001 	ldrb.w	fp, [r8, r1]
 8022bd0:	d10c      	bne.n	8022bec <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 8022bd2:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8022bd6:	d109      	bne.n	8022bec <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 8022bd8:	f880 b000 	strb.w	fp, [r0]
 8022bdc:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8022be0:	7043      	strb	r3, [r0, #1]
 8022be2:	f89c 3002 	ldrb.w	r3, [ip, #2]
 8022be6:	7083      	strb	r3, [r0, #2]
 8022be8:	3003      	adds	r0, #3
 8022bea:	e7e3      	b.n	8022bb4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf4>
 8022bec:	fb09 f103 	mul.w	r1, r9, r3
 8022bf0:	1c4b      	adds	r3, r1, #1
 8022bf2:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8022bf6:	7801      	ldrb	r1, [r0, #0]
 8022bf8:	121b      	asrs	r3, r3, #8
 8022bfa:	b29e      	uxth	r6, r3
 8022bfc:	43db      	mvns	r3, r3
 8022bfe:	fb1b fb06 	smulbb	fp, fp, r6
 8022c02:	b2db      	uxtb	r3, r3
 8022c04:	fb01 b103 	mla	r1, r1, r3, fp
 8022c08:	b289      	uxth	r1, r1
 8022c0a:	f101 0b01 	add.w	fp, r1, #1
 8022c0e:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 8022c12:	f890 b001 	ldrb.w	fp, [r0, #1]
 8022c16:	fb1b fb03 	smulbb	fp, fp, r3
 8022c1a:	1209      	asrs	r1, r1, #8
 8022c1c:	7001      	strb	r1, [r0, #0]
 8022c1e:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8022c22:	fb01 b106 	mla	r1, r1, r6, fp
 8022c26:	b289      	uxth	r1, r1
 8022c28:	f101 0b01 	add.w	fp, r1, #1
 8022c2c:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 8022c30:	1209      	asrs	r1, r1, #8
 8022c32:	7041      	strb	r1, [r0, #1]
 8022c34:	f89c 1002 	ldrb.w	r1, [ip, #2]
 8022c38:	f890 c002 	ldrb.w	ip, [r0, #2]
 8022c3c:	fb1c f303 	smulbb	r3, ip, r3
 8022c40:	fb01 3606 	mla	r6, r1, r6, r3
 8022c44:	b2b6      	uxth	r6, r6
 8022c46:	1c73      	adds	r3, r6, #1
 8022c48:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8022c4c:	1236      	asrs	r6, r6, #8
 8022c4e:	7086      	strb	r6, [r0, #2]
 8022c50:	e7ca      	b.n	8022be8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 8022c52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022c54:	4428      	add	r0, r5
 8022c56:	441f      	add	r7, r3
 8022c58:	e7a8      	b.n	8022bac <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xec>
 8022c5a:	4b03      	ldr	r3, [pc, #12]	; (8022c68 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 8022c5c:	6818      	ldr	r0, [r3, #0]
 8022c5e:	6803      	ldr	r3, [r0, #0]
 8022c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022c62:	4798      	blx	r3
 8022c64:	e782      	b.n	8022b6c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 8022c66:	bf00      	nop
 8022c68:	24026240 	.word	0x24026240
 8022c6c:	2402623a 	.word	0x2402623a

08022c70 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 8022c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022c74:	b091      	sub	sp, #68	; 0x44
 8022c76:	4680      	mov	r8, r0
 8022c78:	460e      	mov	r6, r1
 8022c7a:	6810      	ldr	r0, [r2, #0]
 8022c7c:	6851      	ldr	r1, [r2, #4]
 8022c7e:	ad0c      	add	r5, sp, #48	; 0x30
 8022c80:	4614      	mov	r4, r2
 8022c82:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 8022c86:	f8df 9198 	ldr.w	r9, [pc, #408]	; 8022e20 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>
 8022c8a:	f8df a198 	ldr.w	sl, [pc, #408]	; 8022e24 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 8022c8e:	c503      	stmia	r5!, {r0, r1}
 8022c90:	6818      	ldr	r0, [r3, #0]
 8022c92:	ad0e      	add	r5, sp, #56	; 0x38
 8022c94:	6859      	ldr	r1, [r3, #4]
 8022c96:	c503      	stmia	r5!, {r0, r1}
 8022c98:	a80c      	add	r0, sp, #48	; 0x30
 8022c9a:	f7fa fd59 	bl	801d750 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022c9e:	4621      	mov	r1, r4
 8022ca0:	a80e      	add	r0, sp, #56	; 0x38
 8022ca2:	f7fa fd99 	bl	801d7d8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022ca6:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8022caa:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8022cae:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8022cb2:	f8d9 0000 	ldr.w	r0, [r9]
 8022cb6:	fb11 2103 	smlabb	r1, r1, r3, r2
 8022cba:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	; 0x3e
 8022cbe:	eb08 0401 	add.w	r4, r8, r1
 8022cc2:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8022cc6:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 8022cca:	440a      	add	r2, r1
 8022ccc:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8022cd0:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8022cd4:	4413      	add	r3, r2
 8022cd6:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8022cda:	6803      	ldr	r3, [r0, #0]
 8022cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022cde:	4798      	blx	r3
 8022ce0:	f010 0f80 	tst.w	r0, #128	; 0x80
 8022ce4:	f8d9 0000 	ldr.w	r0, [r9]
 8022ce8:	d022      	beq.n	8022d30 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 8022cea:	2200      	movs	r2, #0
 8022cec:	f04f 0c01 	mov.w	ip, #1
 8022cf0:	6801      	ldr	r1, [r0, #0]
 8022cf2:	b2ad      	uxth	r5, r5
 8022cf4:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8022cf8:	e9cd c208 	strd	ip, r2, [sp, #32]
 8022cfc:	f04f 0c0b 	mov.w	ip, #11
 8022d00:	f8cd c01c 	str.w	ip, [sp, #28]
 8022d04:	f8ba c000 	ldrh.w	ip, [sl]
 8022d08:	9704      	str	r7, [sp, #16]
 8022d0a:	9502      	str	r5, [sp, #8]
 8022d0c:	e9cd 2c05 	strd	r2, ip, [sp, #20]
 8022d10:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8022d14:	9203      	str	r2, [sp, #12]
 8022d16:	fa1f f288 	uxth.w	r2, r8
 8022d1a:	9201      	str	r2, [sp, #4]
 8022d1c:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8022d20:	9200      	str	r2, [sp, #0]
 8022d22:	4632      	mov	r2, r6
 8022d24:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 8022d26:	4621      	mov	r1, r4
 8022d28:	47a8      	blx	r5
 8022d2a:	b011      	add	sp, #68	; 0x44
 8022d2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022d30:	6803      	ldr	r3, [r0, #0]
 8022d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022d34:	4798      	blx	r3
 8022d36:	f8ba 2000 	ldrh.w	r2, [sl]
 8022d3a:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8022d3e:	f04f 0e03 	mov.w	lr, #3
 8022d42:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 8022d46:	4355      	muls	r5, r2
 8022d48:	fa1f fc87 	uxth.w	ip, r7
 8022d4c:	fb02 1303 	mla	r3, r2, r3, r1
 8022d50:	eba2 0208 	sub.w	r2, r2, r8
 8022d54:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8022d58:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022d5c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022d60:	4418      	add	r0, r3
 8022d62:	920b      	str	r2, [sp, #44]	; 0x2c
 8022d64:	1943      	adds	r3, r0, r5
 8022d66:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 8022d6a:	f1c7 05ff 	rsb	r5, r7, #255	; 0xff
 8022d6e:	eba2 0208 	sub.w	r2, r2, r8
 8022d72:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8022d76:	b2ad      	uxth	r5, r5
 8022d78:	4298      	cmp	r0, r3
 8022d7a:	d24a      	bcs.n	8022e12 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a2>
 8022d7c:	eb00 0908 	add.w	r9, r0, r8
 8022d80:	4621      	mov	r1, r4
 8022d82:	4548      	cmp	r0, r9
 8022d84:	460c      	mov	r4, r1
 8022d86:	d240      	bcs.n	8022e0a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x19a>
 8022d88:	f04f 0a04 	mov.w	sl, #4
 8022d8c:	7824      	ldrb	r4, [r4, #0]
 8022d8e:	2fff      	cmp	r7, #255	; 0xff
 8022d90:	f101 0101 	add.w	r1, r1, #1
 8022d94:	fb1e a404 	smlabb	r4, lr, r4, sl
 8022d98:	eb06 0a04 	add.w	sl, r6, r4
 8022d9c:	f816 b004 	ldrb.w	fp, [r6, r4]
 8022da0:	d02b      	beq.n	8022dfa <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x18a>
 8022da2:	7804      	ldrb	r4, [r0, #0]
 8022da4:	fb14 f405 	smulbb	r4, r4, r5
 8022da8:	fb0b 440c 	mla	r4, fp, ip, r4
 8022dac:	b2a4      	uxth	r4, r4
 8022dae:	f104 0b01 	add.w	fp, r4, #1
 8022db2:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 8022db6:	f890 b001 	ldrb.w	fp, [r0, #1]
 8022dba:	fb1b fb05 	smulbb	fp, fp, r5
 8022dbe:	1224      	asrs	r4, r4, #8
 8022dc0:	7004      	strb	r4, [r0, #0]
 8022dc2:	f89a 4001 	ldrb.w	r4, [sl, #1]
 8022dc6:	fb04 b40c 	mla	r4, r4, ip, fp
 8022dca:	b2a4      	uxth	r4, r4
 8022dcc:	f104 0b01 	add.w	fp, r4, #1
 8022dd0:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 8022dd4:	1224      	asrs	r4, r4, #8
 8022dd6:	7044      	strb	r4, [r0, #1]
 8022dd8:	f89a 4002 	ldrb.w	r4, [sl, #2]
 8022ddc:	f890 a002 	ldrb.w	sl, [r0, #2]
 8022de0:	fb1a fa05 	smulbb	sl, sl, r5
 8022de4:	fb04 a40c 	mla	r4, r4, ip, sl
 8022de8:	b2a4      	uxth	r4, r4
 8022dea:	f104 0a01 	add.w	sl, r4, #1
 8022dee:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8022df2:	1224      	asrs	r4, r4, #8
 8022df4:	7084      	strb	r4, [r0, #2]
 8022df6:	3003      	adds	r0, #3
 8022df8:	e7c3      	b.n	8022d82 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x112>
 8022dfa:	f880 b000 	strb.w	fp, [r0]
 8022dfe:	f89a 4001 	ldrb.w	r4, [sl, #1]
 8022e02:	7044      	strb	r4, [r0, #1]
 8022e04:	f89a 4002 	ldrb.w	r4, [sl, #2]
 8022e08:	e7f4      	b.n	8022df4 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x184>
 8022e0a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8022e0c:	4420      	add	r0, r4
 8022e0e:	188c      	adds	r4, r1, r2
 8022e10:	e7b2      	b.n	8022d78 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x108>
 8022e12:	4b03      	ldr	r3, [pc, #12]	; (8022e20 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>)
 8022e14:	6818      	ldr	r0, [r3, #0]
 8022e16:	6803      	ldr	r3, [r0, #0]
 8022e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022e1a:	4798      	blx	r3
 8022e1c:	e785      	b.n	8022d2a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xba>
 8022e1e:	bf00      	nop
 8022e20:	24026240 	.word	0x24026240
 8022e24:	2402623a 	.word	0x2402623a

08022e28 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 8022e28:	b430      	push	{r4, r5}
 8022e2a:	780d      	ldrb	r5, [r1, #0]
 8022e2c:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8022e30:	b11d      	cbz	r5, 8022e3a <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x12>
 8022e32:	2d01      	cmp	r5, #1
 8022e34:	d005      	beq.n	8022e42 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 8022e36:	bc30      	pop	{r4, r5}
 8022e38:	4770      	bx	lr
 8022e3a:	9402      	str	r4, [sp, #8]
 8022e3c:	bc30      	pop	{r4, r5}
 8022e3e:	f7ff be3f 	b.w	8022ac0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 8022e42:	9402      	str	r4, [sp, #8]
 8022e44:	bc30      	pop	{r4, r5}
 8022e46:	f7ff bf13 	b.w	8022c70 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
	...

08022e4c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>:
 8022e4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8022e50:	4605      	mov	r5, r0
 8022e52:	b08f      	sub	sp, #60	; 0x3c
 8022e54:	460c      	mov	r4, r1
 8022e56:	461f      	mov	r7, r3
 8022e58:	2b00      	cmp	r3, #0
 8022e5a:	d052      	beq.n	8022f02 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 8022e5c:	6808      	ldr	r0, [r1, #0]
 8022e5e:	ab0a      	add	r3, sp, #40	; 0x28
 8022e60:	6849      	ldr	r1, [r1, #4]
 8022e62:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 802302c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>
 8022e66:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 8023030 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e4>
 8022e6a:	c303      	stmia	r3!, {r0, r1}
 8022e6c:	6810      	ldr	r0, [r2, #0]
 8022e6e:	ab0c      	add	r3, sp, #48	; 0x30
 8022e70:	6851      	ldr	r1, [r2, #4]
 8022e72:	c303      	stmia	r3!, {r0, r1}
 8022e74:	a80a      	add	r0, sp, #40	; 0x28
 8022e76:	f7fa fc6b 	bl	801d750 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022e7a:	4621      	mov	r1, r4
 8022e7c:	a80c      	add	r0, sp, #48	; 0x30
 8022e7e:	f7fa fcab 	bl	801d7d8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022e82:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 8022e86:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8022e8a:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8022e8e:	f8d8 0000 	ldr.w	r0, [r8]
 8022e92:	fb11 2103 	smlabb	r1, r1, r3, r2
 8022e96:	f9bd 6034 	ldrsh.w	r6, [sp, #52]	; 0x34
 8022e9a:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	; 0x36
 8022e9e:	eb05 0541 	add.w	r5, r5, r1, lsl #1
 8022ea2:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 8022ea6:	440a      	add	r2, r1
 8022ea8:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 8022eac:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 8022eb0:	4413      	add	r3, r2
 8022eb2:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8022eb6:	6803      	ldr	r3, [r0, #0]
 8022eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022eba:	4798      	blx	r3
 8022ebc:	2fff      	cmp	r7, #255	; 0xff
 8022ebe:	d023      	beq.n	8022f08 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xbc>
 8022ec0:	f010 0f04 	tst.w	r0, #4
 8022ec4:	f8d8 0000 	ldr.w	r0, [r8]
 8022ec8:	d021      	beq.n	8022f0e <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xc2>
 8022eca:	2100      	movs	r1, #0
 8022ecc:	f04f 0e01 	mov.w	lr, #1
 8022ed0:	f8d0 c000 	ldr.w	ip, [r0]
 8022ed4:	b2a4      	uxth	r4, r4
 8022ed6:	9106      	str	r1, [sp, #24]
 8022ed8:	b2b6      	uxth	r6, r6
 8022eda:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 8022ede:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 8022ee2:	e9cd e107 	strd	lr, r1, [sp, #28]
 8022ee6:	f8b9 e000 	ldrh.w	lr, [r9]
 8022eea:	9703      	str	r7, [sp, #12]
 8022eec:	9401      	str	r4, [sp, #4]
 8022eee:	9600      	str	r6, [sp, #0]
 8022ef0:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 8022ef4:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8022ef8:	9102      	str	r1, [sp, #8]
 8022efa:	4629      	mov	r1, r5
 8022efc:	f8dc 4040 	ldr.w	r4, [ip, #64]	; 0x40
 8022f00:	47a0      	blx	r4
 8022f02:	b00f      	add	sp, #60	; 0x3c
 8022f04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8022f08:	f010 0f01 	tst.w	r0, #1
 8022f0c:	e7da      	b.n	8022ec4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x78>
 8022f0e:	6803      	ldr	r3, [r0, #0]
 8022f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022f12:	4798      	blx	r3
 8022f14:	f8b9 1000 	ldrh.w	r1, [r9]
 8022f18:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8022f1c:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 8022f20:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 8022f24:	434c      	muls	r4, r1
 8022f26:	2fff      	cmp	r7, #255	; 0xff
 8022f28:	fb01 2303 	mla	r3, r1, r3, r2
 8022f2c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8022f30:	eba1 0106 	sub.w	r1, r1, r6
 8022f34:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022f38:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8022f3c:	4418      	add	r0, r3
 8022f3e:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 8022f42:	eba3 0606 	sub.w	r6, r3, r6
 8022f46:	4404      	add	r4, r0
 8022f48:	ea4f 0646 	mov.w	r6, r6, lsl #1
 8022f4c:	d04a      	beq.n	8022fe4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x198>
 8022f4e:	43fa      	mvns	r2, r7
 8022f50:	b2bb      	uxth	r3, r7
 8022f52:	b2d7      	uxtb	r7, r2
 8022f54:	42a0      	cmp	r0, r4
 8022f56:	d263      	bcs.n	8023020 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 8022f58:	eb00 0e0c 	add.w	lr, r0, ip
 8022f5c:	4586      	cmp	lr, r0
 8022f5e:	f100 0803 	add.w	r8, r0, #3
 8022f62:	d93a      	bls.n	8022fda <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x18e>
 8022f64:	f835 2b02 	ldrh.w	r2, [r5], #2
 8022f68:	f818 9c03 	ldrb.w	r9, [r8, #-3]
 8022f6c:	00d0      	lsls	r0, r2, #3
 8022f6e:	fb19 f907 	smulbb	r9, r9, r7
 8022f72:	b2c0      	uxtb	r0, r0
 8022f74:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 8022f78:	fb00 9003 	mla	r0, r0, r3, r9
 8022f7c:	b280      	uxth	r0, r0
 8022f7e:	f100 0901 	add.w	r9, r0, #1
 8022f82:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 8022f86:	f818 9c02 	ldrb.w	r9, [r8, #-2]
 8022f8a:	fb19 f907 	smulbb	r9, r9, r7
 8022f8e:	1200      	asrs	r0, r0, #8
 8022f90:	f808 0c03 	strb.w	r0, [r8, #-3]
 8022f94:	10d0      	asrs	r0, r2, #3
 8022f96:	1212      	asrs	r2, r2, #8
 8022f98:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8022f9c:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8022fa0:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 8022fa4:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8022fa8:	fb00 9003 	mla	r0, r0, r3, r9
 8022fac:	b280      	uxth	r0, r0
 8022fae:	f100 0901 	add.w	r9, r0, #1
 8022fb2:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 8022fb6:	1200      	asrs	r0, r0, #8
 8022fb8:	f808 0c02 	strb.w	r0, [r8, #-2]
 8022fbc:	f818 0c01 	ldrb.w	r0, [r8, #-1]
 8022fc0:	fb10 f007 	smulbb	r0, r0, r7
 8022fc4:	fb02 0203 	mla	r2, r2, r3, r0
 8022fc8:	b292      	uxth	r2, r2
 8022fca:	1c50      	adds	r0, r2, #1
 8022fcc:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8022fd0:	4640      	mov	r0, r8
 8022fd2:	1212      	asrs	r2, r2, #8
 8022fd4:	f808 2c01 	strb.w	r2, [r8, #-1]
 8022fd8:	e7c0      	b.n	8022f5c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x110>
 8022fda:	4408      	add	r0, r1
 8022fdc:	4435      	add	r5, r6
 8022fde:	e7b9      	b.n	8022f54 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x108>
 8022fe0:	4408      	add	r0, r1
 8022fe2:	4435      	add	r5, r6
 8022fe4:	42a0      	cmp	r0, r4
 8022fe6:	d21b      	bcs.n	8023020 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 8022fe8:	eb00 070c 	add.w	r7, r0, ip
 8022fec:	42b8      	cmp	r0, r7
 8022fee:	d2f7      	bcs.n	8022fe0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x194>
 8022ff0:	f835 3b02 	ldrh.w	r3, [r5], #2
 8022ff4:	3003      	adds	r0, #3
 8022ff6:	00da      	lsls	r2, r3, #3
 8022ff8:	b2d2      	uxtb	r2, r2
 8022ffa:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8022ffe:	f800 2c03 	strb.w	r2, [r0, #-3]
 8023002:	10da      	asrs	r2, r3, #3
 8023004:	121b      	asrs	r3, r3, #8
 8023006:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 802300a:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 802300e:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 8023012:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 8023016:	f800 2c02 	strb.w	r2, [r0, #-2]
 802301a:	f800 3c01 	strb.w	r3, [r0, #-1]
 802301e:	e7e5      	b.n	8022fec <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1a0>
 8023020:	4b02      	ldr	r3, [pc, #8]	; (802302c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>)
 8023022:	6818      	ldr	r0, [r3, #0]
 8023024:	6803      	ldr	r3, [r0, #0]
 8023026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023028:	4798      	blx	r3
 802302a:	e76a      	b.n	8022f02 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 802302c:	24026240 	.word	0x24026240
 8023030:	2402623a 	.word	0x2402623a

08023034 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 8023034:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023038:	b08a      	sub	sp, #40	; 0x28
 802303a:	460d      	mov	r5, r1
 802303c:	4604      	mov	r4, r0
 802303e:	461e      	mov	r6, r3
 8023040:	6808      	ldr	r0, [r1, #0]
 8023042:	ab06      	add	r3, sp, #24
 8023044:	6849      	ldr	r1, [r1, #4]
 8023046:	4f5d      	ldr	r7, [pc, #372]	; (80231bc <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x188>)
 8023048:	c303      	stmia	r3!, {r0, r1}
 802304a:	6810      	ldr	r0, [r2, #0]
 802304c:	ab08      	add	r3, sp, #32
 802304e:	6851      	ldr	r1, [r2, #4]
 8023050:	c303      	stmia	r3!, {r0, r1}
 8023052:	a806      	add	r0, sp, #24
 8023054:	f7fa fb7c 	bl	801d750 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8023058:	4629      	mov	r1, r5
 802305a:	a808      	add	r0, sp, #32
 802305c:	f7fa fbbc 	bl	801d7d8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8023060:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8023064:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8023068:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 802306c:	6838      	ldr	r0, [r7, #0]
 802306e:	fb11 2103 	smlabb	r1, r1, r3, r2
 8023072:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 8023076:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 802307a:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 802307e:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8023082:	440a      	add	r2, r1
 8023084:	f8ad 2020 	strh.w	r2, [sp, #32]
 8023088:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 802308c:	4413      	add	r3, r2
 802308e:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8023092:	6803      	ldr	r3, [r0, #0]
 8023094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8023096:	4798      	blx	r3
 8023098:	2eff      	cmp	r6, #255	; 0xff
 802309a:	d119      	bne.n	80230d0 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 802309c:	f010 0f20 	tst.w	r0, #32
 80230a0:	6838      	ldr	r0, [r7, #0]
 80230a2:	d018      	beq.n	80230d6 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 80230a4:	b2ad      	uxth	r5, r5
 80230a6:	2700      	movs	r7, #0
 80230a8:	6801      	ldr	r1, [r0, #0]
 80230aa:	9501      	str	r5, [sp, #4]
 80230ac:	fa1f f588 	uxth.w	r5, r8
 80230b0:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 80230b4:	9500      	str	r5, [sp, #0]
 80230b6:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80230ba:	e9cd 6703 	strd	r6, r7, [sp, #12]
 80230be:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 80230c2:	9602      	str	r6, [sp, #8]
 80230c4:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 80230c6:	4621      	mov	r1, r4
 80230c8:	47a8      	blx	r5
 80230ca:	b00a      	add	sp, #40	; 0x28
 80230cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80230d0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80230d4:	e7e4      	b.n	80230a0 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6c>
 80230d6:	6803      	ldr	r3, [r0, #0]
 80230d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80230da:	4798      	blx	r3
 80230dc:	4b38      	ldr	r3, [pc, #224]	; (80231c0 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x18c>)
 80230de:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 80230e2:	f8b3 c000 	ldrh.w	ip, [r3]
 80230e6:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 80230ea:	fb0c f505 	mul.w	r5, ip, r5
 80230ee:	f9bd e01c 	ldrsh.w	lr, [sp, #28]
 80230f2:	fb0c 2303 	mla	r3, ip, r3, r2
 80230f6:	ebac 0c08 	sub.w	ip, ip, r8
 80230fa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80230fe:	ebae 0e08 	sub.w	lr, lr, r8
 8023102:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023106:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 802310a:	4418      	add	r0, r3
 802310c:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8023110:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 8023114:	4405      	add	r5, r0
 8023116:	42a8      	cmp	r0, r5
 8023118:	d24a      	bcs.n	80231b0 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17c>
 802311a:	eb00 0803 	add.w	r8, r0, r3
 802311e:	4540      	cmp	r0, r8
 8023120:	d243      	bcs.n	80231aa <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x176>
 8023122:	78e2      	ldrb	r2, [r4, #3]
 8023124:	b15a      	cbz	r2, 802313e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 8023126:	2aff      	cmp	r2, #255	; 0xff
 8023128:	f894 9000 	ldrb.w	r9, [r4]
 802312c:	d10a      	bne.n	8023144 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 802312e:	2eff      	cmp	r6, #255	; 0xff
 8023130:	d108      	bne.n	8023144 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 8023132:	f880 9000 	strb.w	r9, [r0]
 8023136:	7862      	ldrb	r2, [r4, #1]
 8023138:	7042      	strb	r2, [r0, #1]
 802313a:	78a2      	ldrb	r2, [r4, #2]
 802313c:	7082      	strb	r2, [r0, #2]
 802313e:	3003      	adds	r0, #3
 8023140:	3404      	adds	r4, #4
 8023142:	e7ec      	b.n	802311e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xea>
 8023144:	4372      	muls	r2, r6
 8023146:	1c51      	adds	r1, r2, #1
 8023148:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 802314c:	1209      	asrs	r1, r1, #8
 802314e:	fa1f fa81 	uxth.w	sl, r1
 8023152:	43c9      	mvns	r1, r1
 8023154:	fb19 f90a 	smulbb	r9, r9, sl
 8023158:	b2ca      	uxtb	r2, r1
 802315a:	7801      	ldrb	r1, [r0, #0]
 802315c:	fb01 9902 	mla	r9, r1, r2, r9
 8023160:	fa1f f989 	uxth.w	r9, r9
 8023164:	f109 0101 	add.w	r1, r9, #1
 8023168:	eb01 2919 	add.w	r9, r1, r9, lsr #8
 802316c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8023170:	f880 9000 	strb.w	r9, [r0]
 8023174:	f890 9001 	ldrb.w	r9, [r0, #1]
 8023178:	7861      	ldrb	r1, [r4, #1]
 802317a:	fb19 f902 	smulbb	r9, r9, r2
 802317e:	fb01 910a 	mla	r1, r1, sl, r9
 8023182:	b289      	uxth	r1, r1
 8023184:	f101 0901 	add.w	r9, r1, #1
 8023188:	eb09 2111 	add.w	r1, r9, r1, lsr #8
 802318c:	1209      	asrs	r1, r1, #8
 802318e:	7041      	strb	r1, [r0, #1]
 8023190:	7881      	ldrb	r1, [r0, #2]
 8023192:	f894 9002 	ldrb.w	r9, [r4, #2]
 8023196:	fb11 f202 	smulbb	r2, r1, r2
 802319a:	fb09 220a 	mla	r2, r9, sl, r2
 802319e:	b292      	uxth	r2, r2
 80231a0:	1c51      	adds	r1, r2, #1
 80231a2:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80231a6:	1212      	asrs	r2, r2, #8
 80231a8:	e7c8      	b.n	802313c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x108>
 80231aa:	4460      	add	r0, ip
 80231ac:	4474      	add	r4, lr
 80231ae:	e7b2      	b.n	8023116 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xe2>
 80231b0:	6838      	ldr	r0, [r7, #0]
 80231b2:	6803      	ldr	r3, [r0, #0]
 80231b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80231b6:	4798      	blx	r3
 80231b8:	e787      	b.n	80230ca <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 80231ba:	bf00      	nop
 80231bc:	24026240 	.word	0x24026240
 80231c0:	2402623a 	.word	0x2402623a

080231c4 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 80231c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80231c8:	b085      	sub	sp, #20
 80231ca:	4606      	mov	r6, r0
 80231cc:	460c      	mov	r4, r1
 80231ce:	4691      	mov	r9, r2
 80231d0:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 80231d4:	4698      	mov	r8, r3
 80231d6:	b31d      	cbz	r5, 8023220 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 80231d8:	4608      	mov	r0, r1
 80231da:	f7fd fa21 	bl	8020620 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80231de:	4607      	mov	r7, r0
 80231e0:	4620      	mov	r0, r4
 80231e2:	f7fd fa51 	bl	8020688 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80231e6:	f8ad 000e 	strh.w	r0, [sp, #14]
 80231ea:	4620      	mov	r0, r4
 80231ec:	f8ad 9008 	strh.w	r9, [sp, #8]
 80231f0:	f8ad 800a 	strh.w	r8, [sp, #10]
 80231f4:	f8ad 700c 	strh.w	r7, [sp, #12]
 80231f8:	f7fd fb82 	bl	8020900 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80231fc:	280b      	cmp	r0, #11
 80231fe:	d80f      	bhi.n	8023220 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8023200:	e8df f000 	tbb	[pc, r0]
 8023204:	0e062920 	.word	0x0e062920
 8023208:	0e0e0e0e 	.word	0x0e0e0e0e
 802320c:	110e0e0e 	.word	0x110e0e0e
 8023210:	4620      	mov	r0, r4
 8023212:	f7fd faf1 	bl	80207f8 <_ZNK8touchgfx6Bitmap7getDataEv>
 8023216:	462b      	mov	r3, r5
 8023218:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802321a:	a902      	add	r1, sp, #8
 802321c:	f7ff ff0a 	bl	8023034 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8023220:	b005      	add	sp, #20
 8023222:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8023226:	4620      	mov	r0, r4
 8023228:	f7fd fae6 	bl	80207f8 <_ZNK8touchgfx6Bitmap7getDataEv>
 802322c:	4606      	mov	r6, r0
 802322e:	4620      	mov	r0, r4
 8023230:	f7fd fb12 	bl	8020858 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8023234:	9500      	str	r5, [sp, #0]
 8023236:	4601      	mov	r1, r0
 8023238:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802323a:	aa02      	add	r2, sp, #8
 802323c:	4630      	mov	r0, r6
 802323e:	f7ff fdf3 	bl	8022e28 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 8023242:	e7ed      	b.n	8023220 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8023244:	4620      	mov	r0, r4
 8023246:	f7fd fad7 	bl	80207f8 <_ZNK8touchgfx6Bitmap7getDataEv>
 802324a:	462b      	mov	r3, r5
 802324c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802324e:	a902      	add	r1, sp, #8
 8023250:	f7ff fdfc 	bl	8022e4c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 8023254:	e7e4      	b.n	8023220 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8023256:	6833      	ldr	r3, [r6, #0]
 8023258:	4620      	mov	r0, r4
 802325a:	68df      	ldr	r7, [r3, #12]
 802325c:	f7fd facc 	bl	80207f8 <_ZNK8touchgfx6Bitmap7getDataEv>
 8023260:	2300      	movs	r3, #0
 8023262:	4601      	mov	r1, r0
 8023264:	aa02      	add	r2, sp, #8
 8023266:	4630      	mov	r0, r6
 8023268:	e9cd 5300 	strd	r5, r3, [sp]
 802326c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802326e:	47b8      	blx	r7
 8023270:	e7d6      	b.n	8023220 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>

08023272 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 8023272:	b4f0      	push	{r4, r5, r6, r7}
 8023274:	4616      	mov	r6, r2
 8023276:	461c      	mov	r4, r3
 8023278:	460d      	mov	r5, r1
 802327a:	9a04      	ldr	r2, [sp, #16]
 802327c:	2e01      	cmp	r6, #1
 802327e:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8023282:	d00e      	beq.n	80232a2 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x30>
 8023284:	d303      	bcc.n	802328e <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x1c>
 8023286:	2e02      	cmp	r6, #2
 8023288:	d006      	beq.n	8023298 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x26>
 802328a:	bcf0      	pop	{r4, r5, r6, r7}
 802328c:	4770      	bx	lr
 802328e:	4621      	mov	r1, r4
 8023290:	4628      	mov	r0, r5
 8023292:	bcf0      	pop	{r4, r5, r6, r7}
 8023294:	f7ff bdda 	b.w	8022e4c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 8023298:	4621      	mov	r1, r4
 802329a:	4628      	mov	r0, r5
 802329c:	bcf0      	pop	{r4, r5, r6, r7}
 802329e:	f7ff bec9 	b.w	8023034 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 80232a2:	6805      	ldr	r5, [r0, #0]
 80232a4:	2600      	movs	r6, #0
 80232a6:	e9cd 3604 	strd	r3, r6, [sp, #16]
 80232aa:	68ed      	ldr	r5, [r5, #12]
 80232ac:	4613      	mov	r3, r2
 80232ae:	4622      	mov	r2, r4
 80232b0:	46ac      	mov	ip, r5
 80232b2:	bcf0      	pop	{r4, r5, r6, r7}
 80232b4:	4760      	bx	ip
	...

080232b8 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 80232b8:	b160      	cbz	r0, 80232d4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1c>
 80232ba:	2903      	cmp	r1, #3
 80232bc:	d818      	bhi.n	80232f0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 80232be:	e8df f001 	tbb	[pc, r1]
 80232c2:	1902      	.short	0x1902
 80232c4:	1b06      	.short	0x1b06
 80232c6:	4b0e      	ldr	r3, [pc, #56]	; (8023300 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 80232c8:	8818      	ldrh	r0, [r3, #0]
 80232ca:	4240      	negs	r0, r0
 80232cc:	4770      	bx	lr
 80232ce:	4b0c      	ldr	r3, [pc, #48]	; (8023300 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 80232d0:	8818      	ldrh	r0, [r3, #0]
 80232d2:	4770      	bx	lr
 80232d4:	2903      	cmp	r1, #3
 80232d6:	d80b      	bhi.n	80232f0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 80232d8:	a301      	add	r3, pc, #4	; (adr r3, 80232e0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x28>)
 80232da:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 80232de:	bf00      	nop
 80232e0:	080232f5 	.word	0x080232f5
 80232e4:	080232cf 	.word	0x080232cf
 80232e8:	080232f9 	.word	0x080232f9
 80232ec:	080232c7 	.word	0x080232c7
 80232f0:	2000      	movs	r0, #0
 80232f2:	4770      	bx	lr
 80232f4:	2001      	movs	r0, #1
 80232f6:	4770      	bx	lr
 80232f8:	f04f 30ff 	mov.w	r0, #4294967295
 80232fc:	4770      	bx	lr
 80232fe:	bf00      	nop
 8023300:	2402623a 	.word	0x2402623a

08023304 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 8023304:	b160      	cbz	r0, 8023320 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x1c>
 8023306:	2903      	cmp	r1, #3
 8023308:	d818      	bhi.n	802333c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 802330a:	e8df f001 	tbb	[pc, r1]
 802330e:	0219      	.short	0x0219
 8023310:	051b      	.short	0x051b
 8023312:	4b0e      	ldr	r3, [pc, #56]	; (802334c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 8023314:	8818      	ldrh	r0, [r3, #0]
 8023316:	4770      	bx	lr
 8023318:	4b0c      	ldr	r3, [pc, #48]	; (802334c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 802331a:	8818      	ldrh	r0, [r3, #0]
 802331c:	4240      	negs	r0, r0
 802331e:	4770      	bx	lr
 8023320:	2903      	cmp	r1, #3
 8023322:	d80b      	bhi.n	802333c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 8023324:	a301      	add	r3, pc, #4	; (adr r3, 802332c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x28>)
 8023326:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 802332a:	bf00      	nop
 802332c:	08023313 	.word	0x08023313
 8023330:	08023345 	.word	0x08023345
 8023334:	08023319 	.word	0x08023319
 8023338:	08023341 	.word	0x08023341
 802333c:	2000      	movs	r0, #0
 802333e:	4770      	bx	lr
 8023340:	2001      	movs	r0, #1
 8023342:	4770      	bx	lr
 8023344:	f04f 30ff 	mov.w	r0, #4294967295
 8023348:	4770      	bx	lr
 802334a:	bf00      	nop
 802334c:	2402623a 	.word	0x2402623a

08023350 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 8023350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023354:	b097      	sub	sp, #92	; 0x5c
 8023356:	910b      	str	r1, [sp, #44]	; 0x2c
 8023358:	a912      	add	r1, sp, #72	; 0x48
 802335a:	f9bd 6080 	ldrsh.w	r6, [sp, #128]	; 0x80
 802335e:	f8bd 7088 	ldrh.w	r7, [sp, #136]	; 0x88
 8023362:	f8bd 408c 	ldrh.w	r4, [sp, #140]	; 0x8c
 8023366:	f89d 80a4 	ldrb.w	r8, [sp, #164]	; 0xa4
 802336a:	f89d 90ac 	ldrb.w	r9, [sp, #172]	; 0xac
 802336e:	e881 000c 	stmia.w	r1, {r2, r3}
 8023372:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	; 0x84
 8023376:	930a      	str	r3, [sp, #40]	; 0x28
 8023378:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 802337c:	e9dd 2124 	ldrd	r2, r1, [sp, #144]	; 0x90
 8023380:	9311      	str	r3, [sp, #68]	; 0x44
 8023382:	f89d 30a8 	ldrb.w	r3, [sp, #168]	; 0xa8
 8023386:	798d      	ldrb	r5, [r1, #6]
 8023388:	930c      	str	r3, [sp, #48]	; 0x30
 802338a:	7b4b      	ldrb	r3, [r1, #13]
 802338c:	0158      	lsls	r0, r3, #5
 802338e:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8023392:	4328      	orrs	r0, r5
 8023394:	9009      	str	r0, [sp, #36]	; 0x24
 8023396:	f000 817c 	beq.w	8023692 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 802339a:	011b      	lsls	r3, r3, #4
 802339c:	79c8      	ldrb	r0, [r1, #7]
 802339e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80233a2:	4303      	orrs	r3, r0
 80233a4:	930e      	str	r3, [sp, #56]	; 0x38
 80233a6:	f000 8174 	beq.w	8023692 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 80233aa:	f991 3009 	ldrsb.w	r3, [r1, #9]
 80233ae:	b29b      	uxth	r3, r3
 80233b0:	2f00      	cmp	r7, #0
 80233b2:	f000 8116 	beq.w	80235e2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x292>
 80233b6:	1aff      	subs	r7, r7, r3
 80233b8:	b2bf      	uxth	r7, r7
 80233ba:	043b      	lsls	r3, r7, #16
 80233bc:	d502      	bpl.n	80233c4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 80233be:	1bf6      	subs	r6, r6, r7
 80233c0:	2700      	movs	r7, #0
 80233c2:	b236      	sxth	r6, r6
 80233c4:	f9b2 1000 	ldrsh.w	r1, [r2]
 80233c8:	a812      	add	r0, sp, #72	; 0x48
 80233ca:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 80233ce:	428e      	cmp	r6, r1
 80233d0:	b28b      	uxth	r3, r1
 80233d2:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 80233d6:	bfbf      	itttt	lt
 80233d8:	18ff      	addlt	r7, r7, r3
 80233da:	1bbe      	sublt	r6, r7, r6
 80233dc:	b2b7      	uxthlt	r7, r6
 80233de:	460e      	movlt	r6, r1
 80233e0:	8891      	ldrh	r1, [r2, #4]
 80233e2:	440b      	add	r3, r1
 80233e4:	4631      	mov	r1, r6
 80233e6:	b21b      	sxth	r3, r3
 80233e8:	9310      	str	r3, [sp, #64]	; 0x40
 80233ea:	88d3      	ldrh	r3, [r2, #6]
 80233ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80233ee:	449a      	add	sl, r3
 80233f0:	fa0f f38a 	sxth.w	r3, sl
 80233f4:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 80233f8:	930f      	str	r3, [sp, #60]	; 0x3c
 80233fa:	4bb5      	ldr	r3, [pc, #724]	; (80236d0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>)
 80233fc:	f893 b000 	ldrb.w	fp, [r3]
 8023400:	f10b 3cff 	add.w	ip, fp, #4294967295
 8023404:	f1dc 0300 	rsbs	r3, ip, #0
 8023408:	eb43 030c 	adc.w	r3, r3, ip
 802340c:	930d      	str	r3, [sp, #52]	; 0x34
 802340e:	464b      	mov	r3, r9
 8023410:	f7fa f818 	bl	801d444 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 8023414:	4631      	mov	r1, r6
 8023416:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
 802341a:	464b      	mov	r3, r9
 802341c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802341e:	a812      	add	r0, sp, #72	; 0x48
 8023420:	f7fa f82d 	bl	801d47e <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 8023424:	a916      	add	r1, sp, #88	; 0x58
 8023426:	f821 0d02 	strh.w	r0, [r1, #-2]!
 802342a:	a815      	add	r0, sp, #84	; 0x54
 802342c:	f7fa f94e 	bl	801d6cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 8023430:	f1b9 0f00 	cmp.w	r9, #0
 8023434:	f040 80d8 	bne.w	80235e8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x298>
 8023438:	f1bb 0f01 	cmp.w	fp, #1
 802343c:	f040 80dc 	bne.w	80235f8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 8023440:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8023442:	b153      	cbz	r3, 802345a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10a>
 8023444:	2508      	movs	r5, #8
 8023446:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8023448:	fb95 f3f8 	sdiv	r3, r5, r8
 802344c:	1e5d      	subs	r5, r3, #1
 802344e:	4415      	add	r5, r2
 8023450:	fb95 f5f3 	sdiv	r5, r5, r3
 8023454:	fb15 f503 	smulbb	r5, r5, r3
 8023458:	b2ad      	uxth	r5, r5
 802345a:	b907      	cbnz	r7, 802345e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 802345c:	b16c      	cbz	r4, 802347a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12a>
 802345e:	fb04 7305 	mla	r3, r4, r5, r7
 8023462:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8023464:	ebaa 0a04 	sub.w	sl, sl, r4
 8023468:	fb08 f303 	mul.w	r3, r8, r3
 802346c:	fa1f fa8a 	uxth.w	sl, sl
 8023470:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 8023474:	f003 0407 	and.w	r4, r3, #7
 8023478:	9226      	str	r2, [sp, #152]	; 0x98
 802347a:	4649      	mov	r1, r9
 802347c:	980d      	ldr	r0, [sp, #52]	; 0x34
 802347e:	f7ff ff1b 	bl	80232b8 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 8023482:	4683      	mov	fp, r0
 8023484:	980d      	ldr	r0, [sp, #52]	; 0x34
 8023486:	f7ff ff3d 	bl	8023304 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 802348a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802348c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802348e:	4681      	mov	r9, r0
 8023490:	1a9b      	subs	r3, r3, r2
 8023492:	459a      	cmp	sl, r3
 8023494:	bfa8      	it	ge
 8023496:	469a      	movge	sl, r3
 8023498:	f1ba 0f00 	cmp.w	sl, #0
 802349c:	f340 80f9 	ble.w	8023692 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 80234a0:	1bf6      	subs	r6, r6, r7
 80234a2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80234a4:	1b9e      	subs	r6, r3, r6
 80234a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80234a8:	429e      	cmp	r6, r3
 80234aa:	bfd4      	ite	le
 80234ac:	ebc7 0706 	rsble	r7, r7, r6
 80234b0:	ebc7 0703 	rsbgt	r7, r7, r3
 80234b4:	2f00      	cmp	r7, #0
 80234b6:	f340 80ec 	ble.w	8023692 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 80234ba:	1bed      	subs	r5, r5, r7
 80234bc:	fb08 f305 	mul.w	r3, r8, r5
 80234c0:	930d      	str	r3, [sp, #52]	; 0x34
 80234c2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80234c4:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80234c8:	930e      	str	r3, [sp, #56]	; 0x38
 80234ca:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80234cc:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80234d0:	930f      	str	r3, [sp, #60]	; 0x3c
 80234d2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80234d4:	b2db      	uxtb	r3, r3
 80234d6:	9310      	str	r3, [sp, #64]	; 0x40
 80234d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80234da:	2b00      	cmp	r3, #0
 80234dc:	f040 80de 	bne.w	802369c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x34c>
 80234e0:	4b7c      	ldr	r3, [pc, #496]	; (80236d4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>)
 80234e2:	6818      	ldr	r0, [r3, #0]
 80234e4:	6803      	ldr	r3, [r0, #0]
 80234e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80234e8:	4798      	blx	r3
 80234ea:	2301      	movs	r3, #1
 80234ec:	4a7a      	ldr	r2, [pc, #488]	; (80236d8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>)
 80234ee:	eb0b 064b 	add.w	r6, fp, fp, lsl #1
 80234f2:	fb07 9b1b 	mls	fp, r7, fp, r9
 80234f6:	fa03 f308 	lsl.w	r3, r3, r8
 80234fa:	8811      	ldrh	r1, [r2, #0]
 80234fc:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 8023500:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 8023504:	3b01      	subs	r3, #1
 8023506:	fb06 bb07 	mla	fp, r6, r7, fp
 802350a:	b2db      	uxtb	r3, r3
 802350c:	930a      	str	r3, [sp, #40]	; 0x28
 802350e:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 8023512:	fb01 2303 	mla	r3, r1, r3, r2
 8023516:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802351a:	18c3      	adds	r3, r0, r3
 802351c:	9309      	str	r3, [sp, #36]	; 0x24
 802351e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8023520:	781a      	ldrb	r2, [r3, #0]
 8023522:	4122      	asrs	r2, r4
 8023524:	b2d2      	uxtb	r2, r2
 8023526:	f11a 3aff 	adds.w	sl, sl, #4294967295
 802352a:	f0c0 80d7 	bcc.w	80236dc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>
 802352e:	46be      	mov	lr, r7
 8023530:	9909      	ldr	r1, [sp, #36]	; 0x24
 8023532:	f11e 3eff 	adds.w	lr, lr, #4294967295
 8023536:	f0c0 80ba 	bcc.w	80236ae <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x35e>
 802353a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802353c:	4013      	ands	r3, r2
 802353e:	d041      	beq.n	80235c4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 8023540:	20ff      	movs	r0, #255	; 0xff
 8023542:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8023544:	fb90 f5f5 	sdiv	r5, r0, r5
 8023548:	436b      	muls	r3, r5
 802354a:	2bfe      	cmp	r3, #254	; 0xfe
 802354c:	dd03      	ble.n	8023556 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x206>
 802354e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8023550:	4285      	cmp	r5, r0
 8023552:	f000 80a5 	beq.w	80236a0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x350>
 8023556:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8023558:	9810      	ldr	r0, [sp, #64]	; 0x40
 802355a:	fb15 f303 	smulbb	r3, r5, r3
 802355e:	b29b      	uxth	r3, r3
 8023560:	1c5d      	adds	r5, r3, #1
 8023562:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 8023566:	780d      	ldrb	r5, [r1, #0]
 8023568:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802356c:	fa1f fc83 	uxth.w	ip, r3
 8023570:	43db      	mvns	r3, r3
 8023572:	fb10 f90c 	smulbb	r9, r0, ip
 8023576:	b2db      	uxtb	r3, r3
 8023578:	980f      	ldr	r0, [sp, #60]	; 0x3c
 802357a:	fb05 9503 	mla	r5, r5, r3, r9
 802357e:	b2ad      	uxth	r5, r5
 8023580:	f105 0901 	add.w	r9, r5, #1
 8023584:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 8023588:	fb10 f90c 	smulbb	r9, r0, ip
 802358c:	980e      	ldr	r0, [sp, #56]	; 0x38
 802358e:	122d      	asrs	r5, r5, #8
 8023590:	fb10 fc0c 	smulbb	ip, r0, ip
 8023594:	700d      	strb	r5, [r1, #0]
 8023596:	784d      	ldrb	r5, [r1, #1]
 8023598:	fb05 9503 	mla	r5, r5, r3, r9
 802359c:	b2ad      	uxth	r5, r5
 802359e:	f105 0901 	add.w	r9, r5, #1
 80235a2:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 80235a6:	122d      	asrs	r5, r5, #8
 80235a8:	704d      	strb	r5, [r1, #1]
 80235aa:	788d      	ldrb	r5, [r1, #2]
 80235ac:	fb05 cc03 	mla	ip, r5, r3, ip
 80235b0:	fa1f fc8c 	uxth.w	ip, ip
 80235b4:	f10c 0301 	add.w	r3, ip, #1
 80235b8:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 80235bc:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80235c0:	f881 c002 	strb.w	ip, [r1, #2]
 80235c4:	4444      	add	r4, r8
 80235c6:	4431      	add	r1, r6
 80235c8:	b2a4      	uxth	r4, r4
 80235ca:	2c07      	cmp	r4, #7
 80235cc:	bf89      	itett	hi
 80235ce:	9b26      	ldrhi	r3, [sp, #152]	; 0x98
 80235d0:	fa42 f208 	asrls.w	r2, r2, r8
 80235d4:	2400      	movhi	r4, #0
 80235d6:	785a      	ldrbhi	r2, [r3, #1]
 80235d8:	bf8a      	itet	hi
 80235da:	3301      	addhi	r3, #1
 80235dc:	b2d2      	uxtbls	r2, r2
 80235de:	9326      	strhi	r3, [sp, #152]	; 0x98
 80235e0:	e7a7      	b.n	8023532 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e2>
 80235e2:	441e      	add	r6, r3
 80235e4:	b236      	sxth	r6, r6
 80235e6:	e6ed      	b.n	80233c4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 80235e8:	f1b9 0f01 	cmp.w	r9, #1
 80235ec:	f47f af28 	bne.w	8023440 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80235f0:	f1bb 0f01 	cmp.w	fp, #1
 80235f4:	f47f af24 	bne.w	8023440 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80235f8:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 80236d4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>
 80235fc:	f8db 0000 	ldr.w	r0, [fp]
 8023600:	6803      	ldr	r3, [r0, #0]
 8023602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8023604:	4798      	blx	r3
 8023606:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 802360a:	465a      	mov	r2, fp
 802360c:	d006      	beq.n	802361c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 802360e:	f1b8 0f04 	cmp.w	r8, #4
 8023612:	d141      	bne.n	8023698 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x348>
 8023614:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8023616:	3300      	adds	r3, #0
 8023618:	bf18      	it	ne
 802361a:	2301      	movne	r3, #1
 802361c:	0580      	lsls	r0, r0, #22
 802361e:	d566      	bpl.n	80236ee <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 8023620:	f1b8 0f08 	cmp.w	r8, #8
 8023624:	d163      	bne.n	80236ee <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 8023626:	2b00      	cmp	r3, #0
 8023628:	bf0c      	ite	eq
 802362a:	f44f 7100 	moveq.w	r1, #512	; 0x200
 802362e:	f44f 7180 	movne.w	r1, #256	; 0x100
 8023632:	2f00      	cmp	r7, #0
 8023634:	f47f af04 	bne.w	8023440 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8023638:	2c00      	cmp	r4, #0
 802363a:	f47f af01 	bne.w	8023440 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 802363e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023640:	9810      	ldr	r0, [sp, #64]	; 0x40
 8023642:	18f3      	adds	r3, r6, r3
 8023644:	4283      	cmp	r3, r0
 8023646:	f73f aefb 	bgt.w	8023440 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 802364a:	980a      	ldr	r0, [sp, #40]	; 0x28
 802364c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802364e:	4403      	add	r3, r0
 8023650:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8023652:	4283      	cmp	r3, r0
 8023654:	f73f aef4 	bgt.w	8023440 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8023658:	f1b8 0f08 	cmp.w	r8, #8
 802365c:	6810      	ldr	r0, [r2, #0]
 802365e:	f04f 0600 	mov.w	r6, #0
 8023662:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 8023666:	bf18      	it	ne
 8023668:	3501      	addne	r5, #1
 802366a:	6804      	ldr	r4, [r0, #0]
 802366c:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 8023670:	bf18      	it	ne
 8023672:	f025 0501 	bicne.w	r5, r5, #1
 8023676:	e9cd 1605 	strd	r1, r6, [sp, #20]
 802367a:	990c      	ldr	r1, [sp, #48]	; 0x30
 802367c:	bf18      	it	ne
 802367e:	b2ad      	uxthne	r5, r5
 8023680:	9104      	str	r1, [sp, #16]
 8023682:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8023684:	e9cd 5a00 	strd	r5, sl, [sp]
 8023688:	e9cd 5102 	strd	r5, r1, [sp, #8]
 802368c:	9926      	ldr	r1, [sp, #152]	; 0x98
 802368e:	6d64      	ldr	r4, [r4, #84]	; 0x54
 8023690:	47a0      	blx	r4
 8023692:	b017      	add	sp, #92	; 0x5c
 8023694:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023698:	2300      	movs	r3, #0
 802369a:	e7bf      	b.n	802361c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 802369c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 802369e:	e724      	b.n	80234ea <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x19a>
 80236a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80236a2:	700b      	strb	r3, [r1, #0]
 80236a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80236a6:	704b      	strb	r3, [r1, #1]
 80236a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80236aa:	708b      	strb	r3, [r1, #2]
 80236ac:	e78a      	b.n	80235c4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 80236ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80236b0:	b153      	cbz	r3, 80236c8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 80236b2:	441c      	add	r4, r3
 80236b4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80236b6:	b2a4      	uxth	r4, r4
 80236b8:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 80236bc:	f004 0407 	and.w	r4, r4, #7
 80236c0:	781a      	ldrb	r2, [r3, #0]
 80236c2:	9326      	str	r3, [sp, #152]	; 0x98
 80236c4:	4122      	asrs	r2, r4
 80236c6:	b2d2      	uxtb	r2, r2
 80236c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80236ca:	445b      	add	r3, fp
 80236cc:	9309      	str	r3, [sp, #36]	; 0x24
 80236ce:	e72a      	b.n	8023526 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d6>
 80236d0:	24026238 	.word	0x24026238
 80236d4:	24026240 	.word	0x24026240
 80236d8:	2402623a 	.word	0x2402623a
 80236dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80236de:	2b00      	cmp	r3, #0
 80236e0:	d1d7      	bne.n	8023692 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 80236e2:	4b06      	ldr	r3, [pc, #24]	; (80236fc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 80236e4:	6818      	ldr	r0, [r3, #0]
 80236e6:	6803      	ldr	r3, [r0, #0]
 80236e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80236ea:	4798      	blx	r3
 80236ec:	e7d1      	b.n	8023692 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 80236ee:	2b00      	cmp	r3, #0
 80236f0:	f43f aea6 	beq.w	8023440 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80236f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80236f8:	e79b      	b.n	8023632 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e2>
 80236fa:	bf00      	nop
 80236fc:	24026240 	.word	0x24026240

08023700 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 8023700:	b538      	push	{r3, r4, r5, lr}
 8023702:	4c15      	ldr	r4, [pc, #84]	; (8023758 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 8023704:	4605      	mov	r5, r0
 8023706:	7823      	ldrb	r3, [r4, #0]
 8023708:	f3bf 8f5b 	dmb	ish
 802370c:	07da      	lsls	r2, r3, #31
 802370e:	d40b      	bmi.n	8023728 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8023710:	4620      	mov	r0, r4
 8023712:	f005 f890 	bl	8028836 <__cxa_guard_acquire>
 8023716:	b138      	cbz	r0, 8023728 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8023718:	4620      	mov	r0, r4
 802371a:	f005 f898 	bl	802884e <__cxa_guard_release>
 802371e:	4a0f      	ldr	r2, [pc, #60]	; (802375c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8023720:	490f      	ldr	r1, [pc, #60]	; (8023760 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 8023722:	4810      	ldr	r0, [pc, #64]	; (8023764 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8023724:	f005 f880 	bl	8028828 <__aeabi_atexit>
 8023728:	4c0f      	ldr	r4, [pc, #60]	; (8023768 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 802372a:	7823      	ldrb	r3, [r4, #0]
 802372c:	f3bf 8f5b 	dmb	ish
 8023730:	07db      	lsls	r3, r3, #31
 8023732:	d40b      	bmi.n	802374c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8023734:	4620      	mov	r0, r4
 8023736:	f005 f87e 	bl	8028836 <__cxa_guard_acquire>
 802373a:	b138      	cbz	r0, 802374c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 802373c:	4620      	mov	r0, r4
 802373e:	f005 f886 	bl	802884e <__cxa_guard_release>
 8023742:	4a06      	ldr	r2, [pc, #24]	; (802375c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8023744:	4909      	ldr	r1, [pc, #36]	; (802376c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 8023746:	480a      	ldr	r0, [pc, #40]	; (8023770 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8023748:	f005 f86e 	bl	8028828 <__aeabi_atexit>
 802374c:	4b05      	ldr	r3, [pc, #20]	; (8023764 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 802374e:	612b      	str	r3, [r5, #16]
 8023750:	4b07      	ldr	r3, [pc, #28]	; (8023770 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8023752:	616b      	str	r3, [r5, #20]
 8023754:	bd38      	pop	{r3, r4, r5, pc}
 8023756:	bf00      	nop
 8023758:	2402630c 	.word	0x2402630c
 802375c:	24000000 	.word	0x24000000
 8023760:	080222d7 	.word	0x080222d7
 8023764:	240000ac 	.word	0x240000ac
 8023768:	24026310 	.word	0x24026310
 802376c:	080222d5 	.word	0x080222d5
 8023770:	240000b0 	.word	0x240000b0

08023774 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 8023774:	b538      	push	{r3, r4, r5, lr}
 8023776:	4c15      	ldr	r4, [pc, #84]	; (80237cc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 8023778:	4605      	mov	r5, r0
 802377a:	7823      	ldrb	r3, [r4, #0]
 802377c:	f3bf 8f5b 	dmb	ish
 8023780:	07da      	lsls	r2, r3, #31
 8023782:	d40b      	bmi.n	802379c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8023784:	4620      	mov	r0, r4
 8023786:	f005 f856 	bl	8028836 <__cxa_guard_acquire>
 802378a:	b138      	cbz	r0, 802379c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 802378c:	4620      	mov	r0, r4
 802378e:	f005 f85e 	bl	802884e <__cxa_guard_release>
 8023792:	4a0f      	ldr	r2, [pc, #60]	; (80237d0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8023794:	490f      	ldr	r1, [pc, #60]	; (80237d4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 8023796:	4810      	ldr	r0, [pc, #64]	; (80237d8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8023798:	f005 f846 	bl	8028828 <__aeabi_atexit>
 802379c:	4c0f      	ldr	r4, [pc, #60]	; (80237dc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 802379e:	7823      	ldrb	r3, [r4, #0]
 80237a0:	f3bf 8f5b 	dmb	ish
 80237a4:	07db      	lsls	r3, r3, #31
 80237a6:	d40b      	bmi.n	80237c0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 80237a8:	4620      	mov	r0, r4
 80237aa:	f005 f844 	bl	8028836 <__cxa_guard_acquire>
 80237ae:	b138      	cbz	r0, 80237c0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 80237b0:	4620      	mov	r0, r4
 80237b2:	f005 f84c 	bl	802884e <__cxa_guard_release>
 80237b6:	4a06      	ldr	r2, [pc, #24]	; (80237d0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 80237b8:	4909      	ldr	r1, [pc, #36]	; (80237e0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 80237ba:	480a      	ldr	r0, [pc, #40]	; (80237e4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 80237bc:	f005 f834 	bl	8028828 <__aeabi_atexit>
 80237c0:	4b05      	ldr	r3, [pc, #20]	; (80237d8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 80237c2:	60ab      	str	r3, [r5, #8]
 80237c4:	4b07      	ldr	r3, [pc, #28]	; (80237e4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 80237c6:	60eb      	str	r3, [r5, #12]
 80237c8:	bd38      	pop	{r3, r4, r5, pc}
 80237ca:	bf00      	nop
 80237cc:	240262ec 	.word	0x240262ec
 80237d0:	24000000 	.word	0x24000000
 80237d4:	080222db 	.word	0x080222db
 80237d8:	2400008c 	.word	0x2400008c
 80237dc:	240262f0 	.word	0x240262f0
 80237e0:	080222d9 	.word	0x080222d9
 80237e4:	24000090 	.word	0x24000090

080237e8 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 80237e8:	b510      	push	{r4, lr}
 80237ea:	4604      	mov	r4, r0
 80237ec:	f7ff ff88 	bl	8023700 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 80237f0:	4620      	mov	r0, r4
 80237f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80237f6:	f7ff bfbd 	b.w	8023774 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

080237fc <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 80237fc:	b538      	push	{r3, r4, r5, lr}
 80237fe:	4c15      	ldr	r4, [pc, #84]	; (8023854 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 8023800:	4605      	mov	r5, r0
 8023802:	7823      	ldrb	r3, [r4, #0]
 8023804:	f3bf 8f5b 	dmb	ish
 8023808:	07da      	lsls	r2, r3, #31
 802380a:	d40b      	bmi.n	8023824 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 802380c:	4620      	mov	r0, r4
 802380e:	f005 f812 	bl	8028836 <__cxa_guard_acquire>
 8023812:	b138      	cbz	r0, 8023824 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8023814:	4620      	mov	r0, r4
 8023816:	f005 f81a 	bl	802884e <__cxa_guard_release>
 802381a:	4a0f      	ldr	r2, [pc, #60]	; (8023858 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 802381c:	490f      	ldr	r1, [pc, #60]	; (802385c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 802381e:	4810      	ldr	r0, [pc, #64]	; (8023860 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8023820:	f005 f802 	bl	8028828 <__aeabi_atexit>
 8023824:	4c0f      	ldr	r4, [pc, #60]	; (8023864 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 8023826:	7823      	ldrb	r3, [r4, #0]
 8023828:	f3bf 8f5b 	dmb	ish
 802382c:	07db      	lsls	r3, r3, #31
 802382e:	d40b      	bmi.n	8023848 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8023830:	4620      	mov	r0, r4
 8023832:	f005 f800 	bl	8028836 <__cxa_guard_acquire>
 8023836:	b138      	cbz	r0, 8023848 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8023838:	4620      	mov	r0, r4
 802383a:	f005 f808 	bl	802884e <__cxa_guard_release>
 802383e:	4a06      	ldr	r2, [pc, #24]	; (8023858 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8023840:	4909      	ldr	r1, [pc, #36]	; (8023868 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 8023842:	480a      	ldr	r0, [pc, #40]	; (802386c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8023844:	f004 fff0 	bl	8028828 <__aeabi_atexit>
 8023848:	4b05      	ldr	r3, [pc, #20]	; (8023860 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 802384a:	622b      	str	r3, [r5, #32]
 802384c:	4b07      	ldr	r3, [pc, #28]	; (802386c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 802384e:	626b      	str	r3, [r5, #36]	; 0x24
 8023850:	bd38      	pop	{r3, r4, r5, pc}
 8023852:	bf00      	nop
 8023854:	24026314 	.word	0x24026314
 8023858:	24000000 	.word	0x24000000
 802385c:	080222cf 	.word	0x080222cf
 8023860:	240000b4 	.word	0x240000b4
 8023864:	24026318 	.word	0x24026318
 8023868:	080222cd 	.word	0x080222cd
 802386c:	240000b8 	.word	0x240000b8

08023870 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 8023870:	b538      	push	{r3, r4, r5, lr}
 8023872:	4c15      	ldr	r4, [pc, #84]	; (80238c8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 8023874:	4605      	mov	r5, r0
 8023876:	7823      	ldrb	r3, [r4, #0]
 8023878:	f3bf 8f5b 	dmb	ish
 802387c:	07da      	lsls	r2, r3, #31
 802387e:	d40b      	bmi.n	8023898 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8023880:	4620      	mov	r0, r4
 8023882:	f004 ffd8 	bl	8028836 <__cxa_guard_acquire>
 8023886:	b138      	cbz	r0, 8023898 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8023888:	4620      	mov	r0, r4
 802388a:	f004 ffe0 	bl	802884e <__cxa_guard_release>
 802388e:	4a0f      	ldr	r2, [pc, #60]	; (80238cc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8023890:	490f      	ldr	r1, [pc, #60]	; (80238d0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 8023892:	4810      	ldr	r0, [pc, #64]	; (80238d4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8023894:	f004 ffc8 	bl	8028828 <__aeabi_atexit>
 8023898:	4c0f      	ldr	r4, [pc, #60]	; (80238d8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 802389a:	7823      	ldrb	r3, [r4, #0]
 802389c:	f3bf 8f5b 	dmb	ish
 80238a0:	07db      	lsls	r3, r3, #31
 80238a2:	d40b      	bmi.n	80238bc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 80238a4:	4620      	mov	r0, r4
 80238a6:	f004 ffc6 	bl	8028836 <__cxa_guard_acquire>
 80238aa:	b138      	cbz	r0, 80238bc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 80238ac:	4620      	mov	r0, r4
 80238ae:	f004 ffce 	bl	802884e <__cxa_guard_release>
 80238b2:	4a06      	ldr	r2, [pc, #24]	; (80238cc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 80238b4:	4909      	ldr	r1, [pc, #36]	; (80238dc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 80238b6:	480a      	ldr	r0, [pc, #40]	; (80238e0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 80238b8:	f004 ffb6 	bl	8028828 <__aeabi_atexit>
 80238bc:	4b05      	ldr	r3, [pc, #20]	; (80238d4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 80238be:	61ab      	str	r3, [r5, #24]
 80238c0:	4b07      	ldr	r3, [pc, #28]	; (80238e0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 80238c2:	61eb      	str	r3, [r5, #28]
 80238c4:	bd38      	pop	{r3, r4, r5, pc}
 80238c6:	bf00      	nop
 80238c8:	240262f4 	.word	0x240262f4
 80238cc:	24000000 	.word	0x24000000
 80238d0:	080222d3 	.word	0x080222d3
 80238d4:	24000094 	.word	0x24000094
 80238d8:	240262f8 	.word	0x240262f8
 80238dc:	080222d1 	.word	0x080222d1
 80238e0:	24000098 	.word	0x24000098

080238e4 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 80238e4:	b510      	push	{r4, lr}
 80238e6:	4604      	mov	r4, r0
 80238e8:	f7ff ff88 	bl	80237fc <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 80238ec:	4620      	mov	r0, r4
 80238ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80238f2:	f7ff bfbd 	b.w	8023870 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

080238f8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 80238f8:	b538      	push	{r3, r4, r5, lr}
 80238fa:	4c15      	ldr	r4, [pc, #84]	; (8023950 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 80238fc:	4605      	mov	r5, r0
 80238fe:	7823      	ldrb	r3, [r4, #0]
 8023900:	f3bf 8f5b 	dmb	ish
 8023904:	07da      	lsls	r2, r3, #31
 8023906:	d40b      	bmi.n	8023920 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 8023908:	4620      	mov	r0, r4
 802390a:	f004 ff94 	bl	8028836 <__cxa_guard_acquire>
 802390e:	b138      	cbz	r0, 8023920 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 8023910:	4620      	mov	r0, r4
 8023912:	f004 ff9c 	bl	802884e <__cxa_guard_release>
 8023916:	4a0f      	ldr	r2, [pc, #60]	; (8023954 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 8023918:	490f      	ldr	r1, [pc, #60]	; (8023958 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 802391a:	4810      	ldr	r0, [pc, #64]	; (802395c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 802391c:	f004 ff84 	bl	8028828 <__aeabi_atexit>
 8023920:	4c0f      	ldr	r4, [pc, #60]	; (8023960 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 8023922:	7823      	ldrb	r3, [r4, #0]
 8023924:	f3bf 8f5b 	dmb	ish
 8023928:	07db      	lsls	r3, r3, #31
 802392a:	d40b      	bmi.n	8023944 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 802392c:	4620      	mov	r0, r4
 802392e:	f004 ff82 	bl	8028836 <__cxa_guard_acquire>
 8023932:	b138      	cbz	r0, 8023944 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 8023934:	4620      	mov	r0, r4
 8023936:	f004 ff8a 	bl	802884e <__cxa_guard_release>
 802393a:	4a06      	ldr	r2, [pc, #24]	; (8023954 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 802393c:	4909      	ldr	r1, [pc, #36]	; (8023964 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 802393e:	480a      	ldr	r0, [pc, #40]	; (8023968 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 8023940:	f004 ff72 	bl	8028828 <__aeabi_atexit>
 8023944:	4b05      	ldr	r3, [pc, #20]	; (802395c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 8023946:	632b      	str	r3, [r5, #48]	; 0x30
 8023948:	4b07      	ldr	r3, [pc, #28]	; (8023968 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 802394a:	636b      	str	r3, [r5, #52]	; 0x34
 802394c:	bd38      	pop	{r3, r4, r5, pc}
 802394e:	bf00      	nop
 8023950:	240262fc 	.word	0x240262fc
 8023954:	24000000 	.word	0x24000000
 8023958:	080222c7 	.word	0x080222c7
 802395c:	2400009c 	.word	0x2400009c
 8023960:	24026300 	.word	0x24026300
 8023964:	080222c5 	.word	0x080222c5
 8023968:	240000a0 	.word	0x240000a0

0802396c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 802396c:	b538      	push	{r3, r4, r5, lr}
 802396e:	4c15      	ldr	r4, [pc, #84]	; (80239c4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 8023970:	4605      	mov	r5, r0
 8023972:	7823      	ldrb	r3, [r4, #0]
 8023974:	f3bf 8f5b 	dmb	ish
 8023978:	07da      	lsls	r2, r3, #31
 802397a:	d40b      	bmi.n	8023994 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 802397c:	4620      	mov	r0, r4
 802397e:	f004 ff5a 	bl	8028836 <__cxa_guard_acquire>
 8023982:	b138      	cbz	r0, 8023994 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8023984:	4620      	mov	r0, r4
 8023986:	f004 ff62 	bl	802884e <__cxa_guard_release>
 802398a:	4a0f      	ldr	r2, [pc, #60]	; (80239c8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 802398c:	490f      	ldr	r1, [pc, #60]	; (80239cc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 802398e:	4810      	ldr	r0, [pc, #64]	; (80239d0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 8023990:	f004 ff4a 	bl	8028828 <__aeabi_atexit>
 8023994:	4c0f      	ldr	r4, [pc, #60]	; (80239d4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 8023996:	7823      	ldrb	r3, [r4, #0]
 8023998:	f3bf 8f5b 	dmb	ish
 802399c:	07db      	lsls	r3, r3, #31
 802399e:	d40b      	bmi.n	80239b8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 80239a0:	4620      	mov	r0, r4
 80239a2:	f004 ff48 	bl	8028836 <__cxa_guard_acquire>
 80239a6:	b138      	cbz	r0, 80239b8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 80239a8:	4620      	mov	r0, r4
 80239aa:	f004 ff50 	bl	802884e <__cxa_guard_release>
 80239ae:	4a06      	ldr	r2, [pc, #24]	; (80239c8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 80239b0:	4909      	ldr	r1, [pc, #36]	; (80239d8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 80239b2:	480a      	ldr	r0, [pc, #40]	; (80239dc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 80239b4:	f004 ff38 	bl	8028828 <__aeabi_atexit>
 80239b8:	4b05      	ldr	r3, [pc, #20]	; (80239d0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 80239ba:	62ab      	str	r3, [r5, #40]	; 0x28
 80239bc:	4b07      	ldr	r3, [pc, #28]	; (80239dc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 80239be:	62eb      	str	r3, [r5, #44]	; 0x2c
 80239c0:	bd38      	pop	{r3, r4, r5, pc}
 80239c2:	bf00      	nop
 80239c4:	240262d4 	.word	0x240262d4
 80239c8:	24000000 	.word	0x24000000
 80239cc:	080222cb 	.word	0x080222cb
 80239d0:	24000074 	.word	0x24000074
 80239d4:	240262d8 	.word	0x240262d8
 80239d8:	080222c9 	.word	0x080222c9
 80239dc:	24000078 	.word	0x24000078

080239e0 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 80239e0:	b510      	push	{r4, lr}
 80239e2:	4604      	mov	r4, r0
 80239e4:	f7ff ff88 	bl	80238f8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 80239e8:	4620      	mov	r0, r4
 80239ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80239ee:	f7ff bfbd 	b.w	802396c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

080239f4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 80239f4:	b538      	push	{r3, r4, r5, lr}
 80239f6:	4c15      	ldr	r4, [pc, #84]	; (8023a4c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 80239f8:	4605      	mov	r5, r0
 80239fa:	7823      	ldrb	r3, [r4, #0]
 80239fc:	f3bf 8f5b 	dmb	ish
 8023a00:	07da      	lsls	r2, r3, #31
 8023a02:	d40b      	bmi.n	8023a1c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8023a04:	4620      	mov	r0, r4
 8023a06:	f004 ff16 	bl	8028836 <__cxa_guard_acquire>
 8023a0a:	b138      	cbz	r0, 8023a1c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8023a0c:	4620      	mov	r0, r4
 8023a0e:	f004 ff1e 	bl	802884e <__cxa_guard_release>
 8023a12:	4a0f      	ldr	r2, [pc, #60]	; (8023a50 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8023a14:	490f      	ldr	r1, [pc, #60]	; (8023a54 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 8023a16:	4810      	ldr	r0, [pc, #64]	; (8023a58 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8023a18:	f004 ff06 	bl	8028828 <__aeabi_atexit>
 8023a1c:	4c0f      	ldr	r4, [pc, #60]	; (8023a5c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 8023a1e:	7823      	ldrb	r3, [r4, #0]
 8023a20:	f3bf 8f5b 	dmb	ish
 8023a24:	07db      	lsls	r3, r3, #31
 8023a26:	d40b      	bmi.n	8023a40 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8023a28:	4620      	mov	r0, r4
 8023a2a:	f004 ff04 	bl	8028836 <__cxa_guard_acquire>
 8023a2e:	b138      	cbz	r0, 8023a40 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8023a30:	4620      	mov	r0, r4
 8023a32:	f004 ff0c 	bl	802884e <__cxa_guard_release>
 8023a36:	4a06      	ldr	r2, [pc, #24]	; (8023a50 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8023a38:	4909      	ldr	r1, [pc, #36]	; (8023a60 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 8023a3a:	480a      	ldr	r0, [pc, #40]	; (8023a64 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8023a3c:	f004 fef4 	bl	8028828 <__aeabi_atexit>
 8023a40:	4b05      	ldr	r3, [pc, #20]	; (8023a58 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8023a42:	642b      	str	r3, [r5, #64]	; 0x40
 8023a44:	4b07      	ldr	r3, [pc, #28]	; (8023a64 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8023a46:	646b      	str	r3, [r5, #68]	; 0x44
 8023a48:	bd38      	pop	{r3, r4, r5, pc}
 8023a4a:	bf00      	nop
 8023a4c:	24026304 	.word	0x24026304
 8023a50:	24000000 	.word	0x24000000
 8023a54:	080222bf 	.word	0x080222bf
 8023a58:	240000a4 	.word	0x240000a4
 8023a5c:	24026308 	.word	0x24026308
 8023a60:	080222bd 	.word	0x080222bd
 8023a64:	240000a8 	.word	0x240000a8

08023a68 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 8023a68:	b538      	push	{r3, r4, r5, lr}
 8023a6a:	4c15      	ldr	r4, [pc, #84]	; (8023ac0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 8023a6c:	4605      	mov	r5, r0
 8023a6e:	7823      	ldrb	r3, [r4, #0]
 8023a70:	f3bf 8f5b 	dmb	ish
 8023a74:	07da      	lsls	r2, r3, #31
 8023a76:	d40b      	bmi.n	8023a90 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8023a78:	4620      	mov	r0, r4
 8023a7a:	f004 fedc 	bl	8028836 <__cxa_guard_acquire>
 8023a7e:	b138      	cbz	r0, 8023a90 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8023a80:	4620      	mov	r0, r4
 8023a82:	f004 fee4 	bl	802884e <__cxa_guard_release>
 8023a86:	4a0f      	ldr	r2, [pc, #60]	; (8023ac4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8023a88:	490f      	ldr	r1, [pc, #60]	; (8023ac8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 8023a8a:	4810      	ldr	r0, [pc, #64]	; (8023acc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8023a8c:	f004 fecc 	bl	8028828 <__aeabi_atexit>
 8023a90:	4c0f      	ldr	r4, [pc, #60]	; (8023ad0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 8023a92:	7823      	ldrb	r3, [r4, #0]
 8023a94:	f3bf 8f5b 	dmb	ish
 8023a98:	07db      	lsls	r3, r3, #31
 8023a9a:	d40b      	bmi.n	8023ab4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8023a9c:	4620      	mov	r0, r4
 8023a9e:	f004 feca 	bl	8028836 <__cxa_guard_acquire>
 8023aa2:	b138      	cbz	r0, 8023ab4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8023aa4:	4620      	mov	r0, r4
 8023aa6:	f004 fed2 	bl	802884e <__cxa_guard_release>
 8023aaa:	4a06      	ldr	r2, [pc, #24]	; (8023ac4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8023aac:	4909      	ldr	r1, [pc, #36]	; (8023ad4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 8023aae:	480a      	ldr	r0, [pc, #40]	; (8023ad8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8023ab0:	f004 feba 	bl	8028828 <__aeabi_atexit>
 8023ab4:	4b05      	ldr	r3, [pc, #20]	; (8023acc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8023ab6:	63ab      	str	r3, [r5, #56]	; 0x38
 8023ab8:	4b07      	ldr	r3, [pc, #28]	; (8023ad8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8023aba:	63eb      	str	r3, [r5, #60]	; 0x3c
 8023abc:	bd38      	pop	{r3, r4, r5, pc}
 8023abe:	bf00      	nop
 8023ac0:	240262e4 	.word	0x240262e4
 8023ac4:	24000000 	.word	0x24000000
 8023ac8:	080222c3 	.word	0x080222c3
 8023acc:	24000084 	.word	0x24000084
 8023ad0:	240262e8 	.word	0x240262e8
 8023ad4:	080222c1 	.word	0x080222c1
 8023ad8:	24000088 	.word	0x24000088

08023adc <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 8023adc:	b510      	push	{r4, lr}
 8023ade:	4604      	mov	r4, r0
 8023ae0:	f7ff ff88 	bl	80239f4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 8023ae4:	4620      	mov	r0, r4
 8023ae6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023aea:	f7ff bfbd 	b.w	8023a68 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

08023af0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 8023af0:	b538      	push	{r3, r4, r5, lr}
 8023af2:	4c15      	ldr	r4, [pc, #84]	; (8023b48 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 8023af4:	4605      	mov	r5, r0
 8023af6:	7823      	ldrb	r3, [r4, #0]
 8023af8:	f3bf 8f5b 	dmb	ish
 8023afc:	07da      	lsls	r2, r3, #31
 8023afe:	d40b      	bmi.n	8023b18 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8023b00:	4620      	mov	r0, r4
 8023b02:	f004 fe98 	bl	8028836 <__cxa_guard_acquire>
 8023b06:	b138      	cbz	r0, 8023b18 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8023b08:	4620      	mov	r0, r4
 8023b0a:	f004 fea0 	bl	802884e <__cxa_guard_release>
 8023b0e:	4a0f      	ldr	r2, [pc, #60]	; (8023b4c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8023b10:	490f      	ldr	r1, [pc, #60]	; (8023b50 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 8023b12:	4810      	ldr	r0, [pc, #64]	; (8023b54 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8023b14:	f004 fe88 	bl	8028828 <__aeabi_atexit>
 8023b18:	4c0f      	ldr	r4, [pc, #60]	; (8023b58 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 8023b1a:	7823      	ldrb	r3, [r4, #0]
 8023b1c:	f3bf 8f5b 	dmb	ish
 8023b20:	07db      	lsls	r3, r3, #31
 8023b22:	d40b      	bmi.n	8023b3c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8023b24:	4620      	mov	r0, r4
 8023b26:	f004 fe86 	bl	8028836 <__cxa_guard_acquire>
 8023b2a:	b138      	cbz	r0, 8023b3c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8023b2c:	4620      	mov	r0, r4
 8023b2e:	f004 fe8e 	bl	802884e <__cxa_guard_release>
 8023b32:	4a06      	ldr	r2, [pc, #24]	; (8023b4c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8023b34:	4909      	ldr	r1, [pc, #36]	; (8023b5c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 8023b36:	480a      	ldr	r0, [pc, #40]	; (8023b60 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8023b38:	f004 fe76 	bl	8028828 <__aeabi_atexit>
 8023b3c:	4b05      	ldr	r3, [pc, #20]	; (8023b54 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8023b3e:	652b      	str	r3, [r5, #80]	; 0x50
 8023b40:	4b07      	ldr	r3, [pc, #28]	; (8023b60 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8023b42:	656b      	str	r3, [r5, #84]	; 0x54
 8023b44:	bd38      	pop	{r3, r4, r5, pc}
 8023b46:	bf00      	nop
 8023b48:	240262dc 	.word	0x240262dc
 8023b4c:	24000000 	.word	0x24000000
 8023b50:	080222b7 	.word	0x080222b7
 8023b54:	2400007c 	.word	0x2400007c
 8023b58:	240262e0 	.word	0x240262e0
 8023b5c:	080222b5 	.word	0x080222b5
 8023b60:	24000080 	.word	0x24000080

08023b64 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 8023b64:	b538      	push	{r3, r4, r5, lr}
 8023b66:	4c15      	ldr	r4, [pc, #84]	; (8023bbc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 8023b68:	4605      	mov	r5, r0
 8023b6a:	7823      	ldrb	r3, [r4, #0]
 8023b6c:	f3bf 8f5b 	dmb	ish
 8023b70:	07da      	lsls	r2, r3, #31
 8023b72:	d40b      	bmi.n	8023b8c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8023b74:	4620      	mov	r0, r4
 8023b76:	f004 fe5e 	bl	8028836 <__cxa_guard_acquire>
 8023b7a:	b138      	cbz	r0, 8023b8c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8023b7c:	4620      	mov	r0, r4
 8023b7e:	f004 fe66 	bl	802884e <__cxa_guard_release>
 8023b82:	4a0f      	ldr	r2, [pc, #60]	; (8023bc0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8023b84:	490f      	ldr	r1, [pc, #60]	; (8023bc4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 8023b86:	4810      	ldr	r0, [pc, #64]	; (8023bc8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8023b88:	f004 fe4e 	bl	8028828 <__aeabi_atexit>
 8023b8c:	4c0f      	ldr	r4, [pc, #60]	; (8023bcc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 8023b8e:	7823      	ldrb	r3, [r4, #0]
 8023b90:	f3bf 8f5b 	dmb	ish
 8023b94:	07db      	lsls	r3, r3, #31
 8023b96:	d40b      	bmi.n	8023bb0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8023b98:	4620      	mov	r0, r4
 8023b9a:	f004 fe4c 	bl	8028836 <__cxa_guard_acquire>
 8023b9e:	b138      	cbz	r0, 8023bb0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8023ba0:	4620      	mov	r0, r4
 8023ba2:	f004 fe54 	bl	802884e <__cxa_guard_release>
 8023ba6:	4a06      	ldr	r2, [pc, #24]	; (8023bc0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8023ba8:	4909      	ldr	r1, [pc, #36]	; (8023bd0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 8023baa:	480a      	ldr	r0, [pc, #40]	; (8023bd4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8023bac:	f004 fe3c 	bl	8028828 <__aeabi_atexit>
 8023bb0:	4b05      	ldr	r3, [pc, #20]	; (8023bc8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8023bb2:	64ab      	str	r3, [r5, #72]	; 0x48
 8023bb4:	4b07      	ldr	r3, [pc, #28]	; (8023bd4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8023bb6:	64eb      	str	r3, [r5, #76]	; 0x4c
 8023bb8:	bd38      	pop	{r3, r4, r5, pc}
 8023bba:	bf00      	nop
 8023bbc:	240262cc 	.word	0x240262cc
 8023bc0:	24000000 	.word	0x24000000
 8023bc4:	080222bb 	.word	0x080222bb
 8023bc8:	2400006c 	.word	0x2400006c
 8023bcc:	240262d0 	.word	0x240262d0
 8023bd0:	080222b9 	.word	0x080222b9
 8023bd4:	24000070 	.word	0x24000070

08023bd8 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 8023bd8:	b510      	push	{r4, lr}
 8023bda:	4604      	mov	r4, r0
 8023bdc:	f7ff ff88 	bl	8023af0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 8023be0:	4620      	mov	r0, r4
 8023be2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023be6:	f7ff bfbd 	b.w	8023b64 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

08023bea <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 8023bea:	b510      	push	{r4, lr}
 8023bec:	4604      	mov	r4, r0
 8023bee:	f7ff fff3 	bl	8023bd8 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 8023bf2:	4620      	mov	r0, r4
 8023bf4:	f7ff ff72 	bl	8023adc <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 8023bf8:	4620      	mov	r0, r4
 8023bfa:	f7ff fe73 	bl	80238e4 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 8023bfe:	4620      	mov	r0, r4
 8023c00:	f7ff fdf2 	bl	80237e8 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 8023c04:	4620      	mov	r0, r4
 8023c06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023c0a:	f7ff bee9 	b.w	80239e0 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>

08023c0e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 8023c0e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023c12:	b087      	sub	sp, #28
 8023c14:	788d      	ldrb	r5, [r1, #2]
 8023c16:	f891 9000 	ldrb.w	r9, [r1]
 8023c1a:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 8023c1e:	9501      	str	r5, [sp, #4]
 8023c20:	784d      	ldrb	r5, [r1, #1]
 8023c22:	9203      	str	r2, [sp, #12]
 8023c24:	9502      	str	r5, [sp, #8]
 8023c26:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 8023c2a:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
 8023c2e:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 8023c32:	f89d e058 	ldrb.w	lr, [sp, #88]	; 0x58
 8023c36:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	; 0x48
 8023c3a:	fb06 0708 	mla	r7, r6, r8, r0
 8023c3e:	2e00      	cmp	r6, #0
 8023c40:	eb02 0a07 	add.w	sl, r2, r7
 8023c44:	ea4f 2205 	mov.w	r2, r5, lsl #8
 8023c48:	9d01      	ldr	r5, [sp, #4]
 8023c4a:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8023c4e:	ea45 0509 	orr.w	r5, r5, r9
 8023c52:	9505      	str	r5, [sp, #20]
 8023c54:	f2c0 80b2 	blt.w	8023dbc <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 8023c58:	45b3      	cmp	fp, r6
 8023c5a:	f340 80af 	ble.w	8023dbc <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 8023c5e:	2800      	cmp	r0, #0
 8023c60:	f2c0 80aa 	blt.w	8023db8 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 8023c64:	4580      	cmp	r8, r0
 8023c66:	f340 80a7 	ble.w	8023db8 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 8023c6a:	9a03      	ldr	r2, [sp, #12]
 8023c6c:	5dd7      	ldrb	r7, [r2, r7]
 8023c6e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8023c72:	441f      	add	r7, r3
 8023c74:	1c42      	adds	r2, r0, #1
 8023c76:	f100 80a4 	bmi.w	8023dc2 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 8023c7a:	4590      	cmp	r8, r2
 8023c7c:	f340 80a1 	ble.w	8023dc2 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 8023c80:	2c00      	cmp	r4, #0
 8023c82:	f000 809e 	beq.w	8023dc2 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 8023c86:	f89a 5001 	ldrb.w	r5, [sl, #1]
 8023c8a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8023c8e:	441d      	add	r5, r3
 8023c90:	3601      	adds	r6, #1
 8023c92:	f100 809a 	bmi.w	8023dca <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 8023c96:	45b3      	cmp	fp, r6
 8023c98:	f340 8097 	ble.w	8023dca <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 8023c9c:	f1bc 0f00 	cmp.w	ip, #0
 8023ca0:	f000 8093 	beq.w	8023dca <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 8023ca4:	2800      	cmp	r0, #0
 8023ca6:	f2c0 808e 	blt.w	8023dc6 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 8023caa:	4580      	cmp	r8, r0
 8023cac:	f340 808b 	ble.w	8023dc6 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 8023cb0:	f81a 6008 	ldrb.w	r6, [sl, r8]
 8023cb4:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8023cb8:	441e      	add	r6, r3
 8023cba:	3001      	adds	r0, #1
 8023cbc:	f100 8088 	bmi.w	8023dd0 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 8023cc0:	4580      	cmp	r8, r0
 8023cc2:	f340 8085 	ble.w	8023dd0 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 8023cc6:	2c00      	cmp	r4, #0
 8023cc8:	f000 8082 	beq.w	8023dd0 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 8023ccc:	44d0      	add	r8, sl
 8023cce:	f898 2001 	ldrb.w	r2, [r8, #1]
 8023cd2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023cd6:	4413      	add	r3, r2
 8023cd8:	b2a4      	uxth	r4, r4
 8023cda:	f895 a000 	ldrb.w	sl, [r5]
 8023cde:	fa1f fc8c 	uxth.w	ip, ip
 8023ce2:	fb04 fb0c 	mul.w	fp, r4, ip
 8023ce6:	0124      	lsls	r4, r4, #4
 8023ce8:	ebcb 1c0c 	rsb	ip, fp, ip, lsl #4
 8023cec:	f5c4 7880 	rsb	r8, r4, #256	; 0x100
 8023cf0:	eba4 040b 	sub.w	r4, r4, fp
 8023cf4:	fa1f f08c 	uxth.w	r0, ip
 8023cf8:	b2a2      	uxth	r2, r4
 8023cfa:	783c      	ldrb	r4, [r7, #0]
 8023cfc:	eba8 0800 	sub.w	r8, r8, r0
 8023d00:	fa1f fc8e 	uxth.w	ip, lr
 8023d04:	fb02 fa0a 	mul.w	sl, r2, sl
 8023d08:	ea6f 0e0e 	mvn.w	lr, lr
 8023d0c:	fa1f f888 	uxth.w	r8, r8
 8023d10:	fa5f fe8e 	uxtb.w	lr, lr
 8023d14:	fb08 aa04 	mla	sl, r8, r4, sl
 8023d18:	7834      	ldrb	r4, [r6, #0]
 8023d1a:	fb19 f90e 	smulbb	r9, r9, lr
 8023d1e:	fb00 aa04 	mla	sl, r0, r4, sl
 8023d22:	781c      	ldrb	r4, [r3, #0]
 8023d24:	fb0b a404 	mla	r4, fp, r4, sl
 8023d28:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8023d2c:	fb04 990c 	mla	r9, r4, ip, r9
 8023d30:	fa1f f989 	uxth.w	r9, r9
 8023d34:	f109 0401 	add.w	r4, r9, #1
 8023d38:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8023d3c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8023d40:	f881 9000 	strb.w	r9, [r1]
 8023d44:	f895 9001 	ldrb.w	r9, [r5, #1]
 8023d48:	787c      	ldrb	r4, [r7, #1]
 8023d4a:	fb02 f909 	mul.w	r9, r2, r9
 8023d4e:	fb08 9904 	mla	r9, r8, r4, r9
 8023d52:	7874      	ldrb	r4, [r6, #1]
 8023d54:	fb00 9904 	mla	r9, r0, r4, r9
 8023d58:	785c      	ldrb	r4, [r3, #1]
 8023d5a:	fb0b 9404 	mla	r4, fp, r4, r9
 8023d5e:	f3c4 2a07 	ubfx	sl, r4, #8, #8
 8023d62:	9c02      	ldr	r4, [sp, #8]
 8023d64:	fb14 f90e 	smulbb	r9, r4, lr
 8023d68:	fb0a 940c 	mla	r4, sl, ip, r9
 8023d6c:	b2a4      	uxth	r4, r4
 8023d6e:	f104 0901 	add.w	r9, r4, #1
 8023d72:	eb09 2414 	add.w	r4, r9, r4, lsr #8
 8023d76:	1224      	asrs	r4, r4, #8
 8023d78:	704c      	strb	r4, [r1, #1]
 8023d7a:	78ad      	ldrb	r5, [r5, #2]
 8023d7c:	78bc      	ldrb	r4, [r7, #2]
 8023d7e:	436a      	muls	r2, r5
 8023d80:	789b      	ldrb	r3, [r3, #2]
 8023d82:	fb08 2204 	mla	r2, r8, r4, r2
 8023d86:	78b4      	ldrb	r4, [r6, #2]
 8023d88:	fb00 2004 	mla	r0, r0, r4, r2
 8023d8c:	fb0b 0b03 	mla	fp, fp, r3, r0
 8023d90:	9b01      	ldr	r3, [sp, #4]
 8023d92:	fb13 fe0e 	smulbb	lr, r3, lr
 8023d96:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 8023d9a:	fb0b ec0c 	mla	ip, fp, ip, lr
 8023d9e:	fa1f fc8c 	uxth.w	ip, ip
 8023da2:	f10c 0e01 	add.w	lr, ip, #1
 8023da6:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 8023daa:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8023dae:	f881 c002 	strb.w	ip, [r1, #2]
 8023db2:	b007      	add	sp, #28
 8023db4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023db8:	af05      	add	r7, sp, #20
 8023dba:	e75b      	b.n	8023c74 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x66>
 8023dbc:	ad05      	add	r5, sp, #20
 8023dbe:	462f      	mov	r7, r5
 8023dc0:	e766      	b.n	8023c90 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 8023dc2:	ad05      	add	r5, sp, #20
 8023dc4:	e764      	b.n	8023c90 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 8023dc6:	ae05      	add	r6, sp, #20
 8023dc8:	e777      	b.n	8023cba <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xac>
 8023dca:	ab05      	add	r3, sp, #20
 8023dcc:	461e      	mov	r6, r3
 8023dce:	e783      	b.n	8023cd8 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>
 8023dd0:	ab05      	add	r3, sp, #20
 8023dd2:	e781      	b.n	8023cd8 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>

08023dd4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023dd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023dd8:	b093      	sub	sp, #76	; 0x4c
 8023dda:	9210      	str	r2, [sp, #64]	; 0x40
 8023ddc:	9309      	str	r3, [sp, #36]	; 0x24
 8023dde:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8023de0:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 8023de4:	9011      	str	r0, [sp, #68]	; 0x44
 8023de6:	930e      	str	r3, [sp, #56]	; 0x38
 8023de8:	6850      	ldr	r0, [r2, #4]
 8023dea:	910d      	str	r1, [sp, #52]	; 0x34
 8023dec:	6812      	ldr	r2, [r2, #0]
 8023dee:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 8023df2:	fb00 1303 	mla	r3, r0, r3, r1
 8023df6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023dfa:	18d3      	adds	r3, r2, r3
 8023dfc:	930a      	str	r3, [sp, #40]	; 0x28
 8023dfe:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023e00:	681b      	ldr	r3, [r3, #0]
 8023e02:	930c      	str	r3, [sp, #48]	; 0x30
 8023e04:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023e06:	685c      	ldr	r4, [r3, #4]
 8023e08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023e0a:	3404      	adds	r4, #4
 8023e0c:	43db      	mvns	r3, r3
 8023e0e:	b2db      	uxtb	r3, r3
 8023e10:	930b      	str	r3, [sp, #44]	; 0x2c
 8023e12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023e14:	2b00      	cmp	r3, #0
 8023e16:	dc03      	bgt.n	8023e20 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8023e18:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8023e1a:	2b00      	cmp	r3, #0
 8023e1c:	f340 8250 	ble.w	80242c0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 8023e20:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023e22:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023e26:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8023e2a:	1e48      	subs	r0, r1, #1
 8023e2c:	1e55      	subs	r5, r2, #1
 8023e2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023e30:	2b00      	cmp	r3, #0
 8023e32:	f340 80ee 	ble.w	8024012 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 8023e36:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8023e38:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8023e3a:	1436      	asrs	r6, r6, #16
 8023e3c:	ea4f 4323 	mov.w	r3, r3, asr #16
 8023e40:	d406      	bmi.n	8023e50 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8023e42:	4286      	cmp	r6, r0
 8023e44:	da04      	bge.n	8023e50 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8023e46:	2b00      	cmp	r3, #0
 8023e48:	db02      	blt.n	8023e50 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8023e4a:	42ab      	cmp	r3, r5
 8023e4c:	f2c0 80e2 	blt.w	8024014 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8023e50:	3601      	adds	r6, #1
 8023e52:	f100 80cf 	bmi.w	8023ff4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 8023e56:	42b1      	cmp	r1, r6
 8023e58:	f2c0 80cc 	blt.w	8023ff4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 8023e5c:	3301      	adds	r3, #1
 8023e5e:	f100 80c9 	bmi.w	8023ff4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 8023e62:	429a      	cmp	r2, r3
 8023e64:	f2c0 80c6 	blt.w	8023ff4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 8023e68:	e9dd b609 	ldrd	fp, r6, [sp, #36]	; 0x24
 8023e6c:	f1bb 0f00 	cmp.w	fp, #0
 8023e70:	f340 80f1 	ble.w	8024056 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 8023e74:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8023e76:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8023e78:	9824      	ldr	r0, [sp, #144]	; 0x90
 8023e7a:	141d      	asrs	r5, r3, #16
 8023e7c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8023e7e:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8023e82:	68c7      	ldr	r7, [r0, #12]
 8023e84:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8023e86:	1418      	asrs	r0, r3, #16
 8023e88:	f3c3 3803 	ubfx	r8, r3, #12, #4
 8023e8c:	6892      	ldr	r2, [r2, #8]
 8023e8e:	f100 8137 	bmi.w	8024100 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8023e92:	f102 3cff 	add.w	ip, r2, #4294967295
 8023e96:	4560      	cmp	r0, ip
 8023e98:	f280 8132 	bge.w	8024100 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8023e9c:	2d00      	cmp	r5, #0
 8023e9e:	f2c0 812f 	blt.w	8024100 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8023ea2:	f107 3cff 	add.w	ip, r7, #4294967295
 8023ea6:	4565      	cmp	r5, ip
 8023ea8:	f280 812a 	bge.w	8024100 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8023eac:	b212      	sxth	r2, r2
 8023eae:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8023eb0:	fb05 0002 	mla	r0, r5, r2, r0
 8023eb4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8023eb6:	f817 c000 	ldrb.w	ip, [r7, r0]
 8023eba:	4405      	add	r5, r0
 8023ebc:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8023ec0:	eb04 0e0c 	add.w	lr, r4, ip
 8023ec4:	f1b8 0f00 	cmp.w	r8, #0
 8023ec8:	f000 810c 	beq.w	80240e4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
 8023ecc:	786f      	ldrb	r7, [r5, #1]
 8023ece:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8023ed2:	4427      	add	r7, r4
 8023ed4:	2900      	cmp	r1, #0
 8023ed6:	f000 810d 	beq.w	80240f4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 8023eda:	18a8      	adds	r0, r5, r2
 8023edc:	5caa      	ldrb	r2, [r5, r2]
 8023ede:	7840      	ldrb	r0, [r0, #1]
 8023ee0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023ee4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8023ee8:	4422      	add	r2, r4
 8023eea:	4420      	add	r0, r4
 8023eec:	fa1f f388 	uxth.w	r3, r8
 8023ef0:	f814 a00c 	ldrb.w	sl, [r4, ip]
 8023ef4:	b289      	uxth	r1, r1
 8023ef6:	f897 c000 	ldrb.w	ip, [r7]
 8023efa:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8023efe:	fb03 f901 	mul.w	r9, r3, r1
 8023f02:	011b      	lsls	r3, r3, #4
 8023f04:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8023f08:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 8023f0c:	eba3 0309 	sub.w	r3, r3, r9
 8023f10:	b289      	uxth	r1, r1
 8023f12:	b29b      	uxth	r3, r3
 8023f14:	eba8 0801 	sub.w	r8, r8, r1
 8023f18:	fb03 fc0c 	mul.w	ip, r3, ip
 8023f1c:	fa1f f888 	uxth.w	r8, r8
 8023f20:	930f      	str	r3, [sp, #60]	; 0x3c
 8023f22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023f24:	fb08 cc0a 	mla	ip, r8, sl, ip
 8023f28:	f892 a000 	ldrb.w	sl, [r2]
 8023f2c:	fb01 cc0a 	mla	ip, r1, sl, ip
 8023f30:	f890 a000 	ldrb.w	sl, [r0]
 8023f34:	fb09 cc0a 	mla	ip, r9, sl, ip
 8023f38:	f896 a000 	ldrb.w	sl, [r6]
 8023f3c:	fb1a fa03 	smulbb	sl, sl, r3
 8023f40:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8023f44:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8023f46:	fb0c ac05 	mla	ip, ip, r5, sl
 8023f4a:	fa1f fc8c 	uxth.w	ip, ip
 8023f4e:	f10c 0a01 	add.w	sl, ip, #1
 8023f52:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 8023f56:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8023f5a:	f886 a000 	strb.w	sl, [r6]
 8023f5e:	f897 c001 	ldrb.w	ip, [r7, #1]
 8023f62:	f89e a001 	ldrb.w	sl, [lr, #1]
 8023f66:	fb03 fc0c 	mul.w	ip, r3, ip
 8023f6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023f6c:	fb08 cc0a 	mla	ip, r8, sl, ip
 8023f70:	f892 a001 	ldrb.w	sl, [r2, #1]
 8023f74:	fb01 cc0a 	mla	ip, r1, sl, ip
 8023f78:	f890 a001 	ldrb.w	sl, [r0, #1]
 8023f7c:	fb09 cc0a 	mla	ip, r9, sl, ip
 8023f80:	f896 a001 	ldrb.w	sl, [r6, #1]
 8023f84:	fb1a fa03 	smulbb	sl, sl, r3
 8023f88:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8023f8c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8023f8e:	fb0c ac05 	mla	ip, ip, r5, sl
 8023f92:	fa1f fc8c 	uxth.w	ip, ip
 8023f96:	f10c 0a01 	add.w	sl, ip, #1
 8023f9a:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
 8023f9e:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8023fa2:	f886 c001 	strb.w	ip, [r6, #1]
 8023fa6:	78bf      	ldrb	r7, [r7, #2]
 8023fa8:	f89e c002 	ldrb.w	ip, [lr, #2]
 8023fac:	437b      	muls	r3, r7
 8023fae:	fb08 330c 	mla	r3, r8, ip, r3
 8023fb2:	f892 c002 	ldrb.w	ip, [r2, #2]
 8023fb6:	7882      	ldrb	r2, [r0, #2]
 8023fb8:	fb01 310c 	mla	r1, r1, ip, r3
 8023fbc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023fbe:	fb09 1902 	mla	r9, r9, r2, r1
 8023fc2:	78b1      	ldrb	r1, [r6, #2]
 8023fc4:	fb11 f103 	smulbb	r1, r1, r3
 8023fc8:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8023fcc:	fb09 1505 	mla	r5, r9, r5, r1
 8023fd0:	b2ad      	uxth	r5, r5
 8023fd2:	1c6b      	adds	r3, r5, #1
 8023fd4:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8023fd8:	122d      	asrs	r5, r5, #8
 8023fda:	70b5      	strb	r5, [r6, #2]
 8023fdc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8023fde:	3603      	adds	r6, #3
 8023fe0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8023fe2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8023fe6:	4413      	add	r3, r2
 8023fe8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8023fea:	931d      	str	r3, [sp, #116]	; 0x74
 8023fec:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8023fee:	4413      	add	r3, r2
 8023ff0:	931e      	str	r3, [sp, #120]	; 0x78
 8023ff2:	e73b      	b.n	8023e6c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8023ff4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8023ff6:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 8023ff8:	4433      	add	r3, r6
 8023ffa:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8023ffc:	931d      	str	r3, [sp, #116]	; 0x74
 8023ffe:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8024000:	4433      	add	r3, r6
 8024002:	931e      	str	r3, [sp, #120]	; 0x78
 8024004:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024006:	3b01      	subs	r3, #1
 8024008:	9309      	str	r3, [sp, #36]	; 0x24
 802400a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802400c:	3303      	adds	r3, #3
 802400e:	930a      	str	r3, [sp, #40]	; 0x28
 8024010:	e70d      	b.n	8023e2e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8024012:	d028      	beq.n	8024066 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 8024014:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024016:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8024018:	3b01      	subs	r3, #1
 802401a:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 802401c:	fb00 5003 	mla	r0, r0, r3, r5
 8024020:	1400      	asrs	r0, r0, #16
 8024022:	f53f af21 	bmi.w	8023e68 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8024026:	3901      	subs	r1, #1
 8024028:	4288      	cmp	r0, r1
 802402a:	f6bf af1d 	bge.w	8023e68 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 802402e:	9920      	ldr	r1, [sp, #128]	; 0x80
 8024030:	981e      	ldr	r0, [sp, #120]	; 0x78
 8024032:	fb01 0303 	mla	r3, r1, r3, r0
 8024036:	141b      	asrs	r3, r3, #16
 8024038:	f53f af16 	bmi.w	8023e68 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 802403c:	3a01      	subs	r2, #1
 802403e:	4293      	cmp	r3, r2
 8024040:	f6bf af12 	bge.w	8023e68 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8024044:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024046:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 802404a:	1cdf      	adds	r7, r3, #3
 802404c:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 8024050:	f1b9 0f00 	cmp.w	r9, #0
 8024054:	dc73      	bgt.n	802413e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 8024056:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024058:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802405a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802405e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8024062:	441a      	add	r2, r3
 8024064:	920a      	str	r2, [sp, #40]	; 0x28
 8024066:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024068:	2b00      	cmp	r3, #0
 802406a:	f340 8129 	ble.w	80242c0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 802406e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8024072:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8024074:	ee30 0a04 	vadd.f32	s0, s0, s8
 8024078:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802407c:	eef0 6a62 	vmov.f32	s13, s5
 8024080:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8024084:	ee31 1a05 	vadd.f32	s2, s2, s10
 8024088:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802408c:	edcd 6a1d 	vstr	s13, [sp, #116]	; 0x74
 8024090:	eef0 6a43 	vmov.f32	s13, s6
 8024094:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024098:	edcd 6a1e 	vstr	s13, [sp, #120]	; 0x78
 802409c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80240a0:	ee61 7a27 	vmul.f32	s15, s2, s15
 80240a4:	ee77 2a62 	vsub.f32	s5, s14, s5
 80240a8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80240ac:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80240b0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80240b4:	ee12 2a90 	vmov	r2, s5
 80240b8:	eef0 2a47 	vmov.f32	s5, s14
 80240bc:	fb92 f3f3 	sdiv	r3, r2, r3
 80240c0:	ee13 2a10 	vmov	r2, s6
 80240c4:	931f      	str	r3, [sp, #124]	; 0x7c
 80240c6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80240c8:	eeb0 3a67 	vmov.f32	s6, s15
 80240cc:	fb92 f3f3 	sdiv	r3, r2, r3
 80240d0:	9320      	str	r3, [sp, #128]	; 0x80
 80240d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80240d4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80240d6:	3b01      	subs	r3, #1
 80240d8:	930d      	str	r3, [sp, #52]	; 0x34
 80240da:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80240dc:	bf08      	it	eq
 80240de:	4613      	moveq	r3, r2
 80240e0:	9309      	str	r3, [sp, #36]	; 0x24
 80240e2:	e696      	b.n	8023e12 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 80240e4:	b149      	cbz	r1, 80240fa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 80240e6:	5caa      	ldrb	r2, [r5, r2]
 80240e8:	4670      	mov	r0, lr
 80240ea:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80240ee:	4422      	add	r2, r4
 80240f0:	4677      	mov	r7, lr
 80240f2:	e6fb      	b.n	8023eec <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 80240f4:	4670      	mov	r0, lr
 80240f6:	4672      	mov	r2, lr
 80240f8:	e6f8      	b.n	8023eec <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 80240fa:	4670      	mov	r0, lr
 80240fc:	4672      	mov	r2, lr
 80240fe:	e7f7      	b.n	80240f0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 8024100:	f110 0c01 	adds.w	ip, r0, #1
 8024104:	f53f af6a 	bmi.w	8023fdc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8024108:	4562      	cmp	r2, ip
 802410a:	f6ff af67 	blt.w	8023fdc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 802410e:	f115 0c01 	adds.w	ip, r5, #1
 8024112:	f53f af63 	bmi.w	8023fdc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8024116:	4567      	cmp	r7, ip
 8024118:	f6ff af60 	blt.w	8023fdc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 802411c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802411e:	b23f      	sxth	r7, r7
 8024120:	b212      	sxth	r2, r2
 8024122:	9002      	str	r0, [sp, #8]
 8024124:	9701      	str	r7, [sp, #4]
 8024126:	9200      	str	r2, [sp, #0]
 8024128:	9811      	ldr	r0, [sp, #68]	; 0x44
 802412a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802412c:	e9cd 1305 	strd	r1, r3, [sp, #20]
 8024130:	e9cd 5803 	strd	r5, r8, [sp, #12]
 8024134:	4623      	mov	r3, r4
 8024136:	4631      	mov	r1, r6
 8024138:	f7ff fd69 	bl	8023c0e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 802413c:	e74e      	b.n	8023fdc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 802413e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8024140:	981e      	ldr	r0, [sp, #120]	; 0x78
 8024142:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8024146:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8024148:	9a24      	ldr	r2, [sp, #144]	; 0x90
 802414a:	1400      	asrs	r0, r0, #16
 802414c:	142d      	asrs	r5, r5, #16
 802414e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8024150:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8024154:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8024158:	fb02 5000 	mla	r0, r2, r0, r5
 802415c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802415e:	f815 e000 	ldrb.w	lr, [r5, r0]
 8024162:	eb05 0c00 	add.w	ip, r5, r0
 8024166:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 802416a:	eb04 060e 	add.w	r6, r4, lr
 802416e:	2b00      	cmp	r3, #0
 8024170:	f000 8097 	beq.w	80242a2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
 8024174:	f89c 5001 	ldrb.w	r5, [ip, #1]
 8024178:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802417c:	4425      	add	r5, r4
 802417e:	2900      	cmp	r1, #0
 8024180:	f000 8098 	beq.w	80242b4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e0>
 8024184:	eb0c 0002 	add.w	r0, ip, r2
 8024188:	f81c 2002 	ldrb.w	r2, [ip, r2]
 802418c:	7840      	ldrb	r0, [r0, #1]
 802418e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024192:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8024196:	4422      	add	r2, r4
 8024198:	4420      	add	r0, r4
 802419a:	b29b      	uxth	r3, r3
 802419c:	f814 b00e 	ldrb.w	fp, [r4, lr]
 80241a0:	b289      	uxth	r1, r1
 80241a2:	f895 e000 	ldrb.w	lr, [r5]
 80241a6:	3703      	adds	r7, #3
 80241a8:	f109 39ff 	add.w	r9, r9, #4294967295
 80241ac:	fb03 f801 	mul.w	r8, r3, r1
 80241b0:	011b      	lsls	r3, r3, #4
 80241b2:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 80241b6:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 80241ba:	eba3 0308 	sub.w	r3, r3, r8
 80241be:	b289      	uxth	r1, r1
 80241c0:	b29b      	uxth	r3, r3
 80241c2:	ebac 0c01 	sub.w	ip, ip, r1
 80241c6:	fb03 fe0e 	mul.w	lr, r3, lr
 80241ca:	fa1f fc8c 	uxth.w	ip, ip
 80241ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80241d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80241d2:	fb0c ee0b 	mla	lr, ip, fp, lr
 80241d6:	f892 b000 	ldrb.w	fp, [r2]
 80241da:	fb01 ee0b 	mla	lr, r1, fp, lr
 80241de:	f890 b000 	ldrb.w	fp, [r0]
 80241e2:	fb08 ee0b 	mla	lr, r8, fp, lr
 80241e6:	f817 bc06 	ldrb.w	fp, [r7, #-6]
 80241ea:	fb1b fb03 	smulbb	fp, fp, r3
 80241ee:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 80241f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80241f4:	fb0e be0a 	mla	lr, lr, sl, fp
 80241f8:	fa1f fe8e 	uxth.w	lr, lr
 80241fc:	f10e 0b01 	add.w	fp, lr, #1
 8024200:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 8024204:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8024208:	f807 ec06 	strb.w	lr, [r7, #-6]
 802420c:	f895 e001 	ldrb.w	lr, [r5, #1]
 8024210:	f896 b001 	ldrb.w	fp, [r6, #1]
 8024214:	fb03 fe0e 	mul.w	lr, r3, lr
 8024218:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802421a:	fb0c ee0b 	mla	lr, ip, fp, lr
 802421e:	f892 b001 	ldrb.w	fp, [r2, #1]
 8024222:	fb01 ee0b 	mla	lr, r1, fp, lr
 8024226:	f890 b001 	ldrb.w	fp, [r0, #1]
 802422a:	fb08 ee0b 	mla	lr, r8, fp, lr
 802422e:	f817 bc05 	ldrb.w	fp, [r7, #-5]
 8024232:	fb1b fb03 	smulbb	fp, fp, r3
 8024236:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 802423a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802423c:	fb0e be0a 	mla	lr, lr, sl, fp
 8024240:	fa1f fe8e 	uxth.w	lr, lr
 8024244:	f10e 0b01 	add.w	fp, lr, #1
 8024248:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 802424c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8024250:	f807 ec05 	strb.w	lr, [r7, #-5]
 8024254:	78ad      	ldrb	r5, [r5, #2]
 8024256:	78b6      	ldrb	r6, [r6, #2]
 8024258:	436b      	muls	r3, r5
 802425a:	7895      	ldrb	r5, [r2, #2]
 802425c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802425e:	fb0c 3306 	mla	r3, ip, r6, r3
 8024262:	fb01 3305 	mla	r3, r1, r5, r3
 8024266:	7885      	ldrb	r5, [r0, #2]
 8024268:	fb08 3805 	mla	r8, r8, r5, r3
 802426c:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 8024270:	fb13 f302 	smulbb	r3, r3, r2
 8024274:	f3c8 2807 	ubfx	r8, r8, #8, #8
 8024278:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 802427a:	fb08 380a 	mla	r8, r8, sl, r3
 802427e:	fa1f f888 	uxth.w	r8, r8
 8024282:	f108 0301 	add.w	r3, r8, #1
 8024286:	eb03 2818 	add.w	r8, r3, r8, lsr #8
 802428a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802428c:	4413      	add	r3, r2
 802428e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8024290:	ea4f 2828 	mov.w	r8, r8, asr #8
 8024294:	931d      	str	r3, [sp, #116]	; 0x74
 8024296:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8024298:	f807 8c04 	strb.w	r8, [r7, #-4]
 802429c:	4413      	add	r3, r2
 802429e:	931e      	str	r3, [sp, #120]	; 0x78
 80242a0:	e6d6      	b.n	8024050 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 80242a2:	b151      	cbz	r1, 80242ba <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 80242a4:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80242a8:	4630      	mov	r0, r6
 80242aa:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80242ae:	4422      	add	r2, r4
 80242b0:	4635      	mov	r5, r6
 80242b2:	e772      	b.n	802419a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 80242b4:	4630      	mov	r0, r6
 80242b6:	4632      	mov	r2, r6
 80242b8:	e76f      	b.n	802419a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 80242ba:	4630      	mov	r0, r6
 80242bc:	4632      	mov	r2, r6
 80242be:	e7f7      	b.n	80242b0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 80242c0:	b013      	add	sp, #76	; 0x4c
 80242c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080242c6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 80242c6:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80242ca:	784c      	ldrb	r4, [r1, #1]
 80242cc:	f891 a002 	ldrb.w	sl, [r1, #2]
 80242d0:	0224      	lsls	r4, r4, #8
 80242d2:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 80242d6:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 80242da:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80242de:	f891 a000 	ldrb.w	sl, [r1]
 80242e2:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
 80242e6:	ea44 040a 	orr.w	r4, r4, sl
 80242ea:	f89d 603c 	ldrb.w	r6, [sp, #60]	; 0x3c
 80242ee:	e9dd c50c 	ldrd	ip, r5, [sp, #48]	; 0x30
 80242f2:	9401      	str	r4, [sp, #4]
 80242f4:	fb05 c70e 	mla	r7, r5, lr, ip
 80242f8:	2d00      	cmp	r5, #0
 80242fa:	eb02 0807 	add.w	r8, r2, r7
 80242fe:	db72      	blt.n	80243e6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 8024300:	45a9      	cmp	r9, r5
 8024302:	dd70      	ble.n	80243e6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 8024304:	f1bc 0f00 	cmp.w	ip, #0
 8024308:	db6b      	blt.n	80243e2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 802430a:	45e6      	cmp	lr, ip
 802430c:	dd69      	ble.n	80243e2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 802430e:	5dd7      	ldrb	r7, [r2, r7]
 8024310:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8024314:	441f      	add	r7, r3
 8024316:	f11c 0201 	adds.w	r2, ip, #1
 802431a:	d467      	bmi.n	80243ec <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 802431c:	4596      	cmp	lr, r2
 802431e:	dd65      	ble.n	80243ec <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 8024320:	2800      	cmp	r0, #0
 8024322:	d063      	beq.n	80243ec <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 8024324:	f898 4001 	ldrb.w	r4, [r8, #1]
 8024328:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802432c:	441c      	add	r4, r3
 802432e:	3501      	adds	r5, #1
 8024330:	d460      	bmi.n	80243f4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 8024332:	45a9      	cmp	r9, r5
 8024334:	dd5e      	ble.n	80243f4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 8024336:	2e00      	cmp	r6, #0
 8024338:	d05c      	beq.n	80243f4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 802433a:	f1bc 0f00 	cmp.w	ip, #0
 802433e:	db57      	blt.n	80243f0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 8024340:	45e6      	cmp	lr, ip
 8024342:	dd55      	ble.n	80243f0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 8024344:	f818 500e 	ldrb.w	r5, [r8, lr]
 8024348:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802434c:	441d      	add	r5, r3
 802434e:	f11c 0201 	adds.w	r2, ip, #1
 8024352:	d452      	bmi.n	80243fa <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 8024354:	4596      	cmp	lr, r2
 8024356:	dd50      	ble.n	80243fa <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 8024358:	2800      	cmp	r0, #0
 802435a:	d04e      	beq.n	80243fa <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 802435c:	44c6      	add	lr, r8
 802435e:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8024362:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024366:	4413      	add	r3, r2
 8024368:	b280      	uxth	r0, r0
 802436a:	f897 8000 	ldrb.w	r8, [r7]
 802436e:	b2b2      	uxth	r2, r6
 8024370:	fb00 f602 	mul.w	r6, r0, r2
 8024374:	0100      	lsls	r0, r0, #4
 8024376:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 802437a:	f5c0 7e80 	rsb	lr, r0, #256	; 0x100
 802437e:	1b80      	subs	r0, r0, r6
 8024380:	fa1f fc82 	uxth.w	ip, r2
 8024384:	b282      	uxth	r2, r0
 8024386:	7820      	ldrb	r0, [r4, #0]
 8024388:	ebae 0e0c 	sub.w	lr, lr, ip
 802438c:	4350      	muls	r0, r2
 802438e:	fa1f fe8e 	uxth.w	lr, lr
 8024392:	fb0e 0808 	mla	r8, lr, r8, r0
 8024396:	7828      	ldrb	r0, [r5, #0]
 8024398:	fb0c 8800 	mla	r8, ip, r0, r8
 802439c:	7818      	ldrb	r0, [r3, #0]
 802439e:	fb06 8000 	mla	r0, r6, r0, r8
 80243a2:	1200      	asrs	r0, r0, #8
 80243a4:	7008      	strb	r0, [r1, #0]
 80243a6:	7860      	ldrb	r0, [r4, #1]
 80243a8:	f897 8001 	ldrb.w	r8, [r7, #1]
 80243ac:	4350      	muls	r0, r2
 80243ae:	fb0e 0808 	mla	r8, lr, r8, r0
 80243b2:	7868      	ldrb	r0, [r5, #1]
 80243b4:	fb0c 8800 	mla	r8, ip, r0, r8
 80243b8:	7858      	ldrb	r0, [r3, #1]
 80243ba:	fb06 8000 	mla	r0, r6, r0, r8
 80243be:	1200      	asrs	r0, r0, #8
 80243c0:	7048      	strb	r0, [r1, #1]
 80243c2:	78a0      	ldrb	r0, [r4, #2]
 80243c4:	78bf      	ldrb	r7, [r7, #2]
 80243c6:	4350      	muls	r0, r2
 80243c8:	78aa      	ldrb	r2, [r5, #2]
 80243ca:	fb0e 0007 	mla	r0, lr, r7, r0
 80243ce:	fb0c 0c02 	mla	ip, ip, r2, r0
 80243d2:	789a      	ldrb	r2, [r3, #2]
 80243d4:	fb06 c202 	mla	r2, r6, r2, ip
 80243d8:	1212      	asrs	r2, r2, #8
 80243da:	708a      	strb	r2, [r1, #2]
 80243dc:	b002      	add	sp, #8
 80243de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80243e2:	af01      	add	r7, sp, #4
 80243e4:	e797      	b.n	8024316 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x50>
 80243e6:	ac01      	add	r4, sp, #4
 80243e8:	4627      	mov	r7, r4
 80243ea:	e7a0      	b.n	802432e <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 80243ec:	ac01      	add	r4, sp, #4
 80243ee:	e79e      	b.n	802432e <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 80243f0:	ad01      	add	r5, sp, #4
 80243f2:	e7ac      	b.n	802434e <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x88>
 80243f4:	ab01      	add	r3, sp, #4
 80243f6:	461d      	mov	r5, r3
 80243f8:	e7b6      	b.n	8024368 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>
 80243fa:	ab01      	add	r3, sp, #4
 80243fc:	e7b4      	b.n	8024368 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>

080243fe <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80243fe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024402:	b08d      	sub	sp, #52	; 0x34
 8024404:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8024408:	e9cd 1209 	strd	r1, r2, [sp, #36]	; 0x24
 802440c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 802440e:	900b      	str	r0, [sp, #44]	; 0x2c
 8024410:	9306      	str	r3, [sp, #24]
 8024412:	6850      	ldr	r0, [r2, #4]
 8024414:	6812      	ldr	r2, [r2, #0]
 8024416:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8024418:	e9dd 131c 	ldrd	r1, r3, [sp, #112]	; 0x70
 802441c:	fb00 1303 	mla	r3, r0, r3, r1
 8024420:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8024424:	18d3      	adds	r3, r2, r3
 8024426:	9307      	str	r3, [sp, #28]
 8024428:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 802442a:	681b      	ldr	r3, [r3, #0]
 802442c:	9308      	str	r3, [sp, #32]
 802442e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8024430:	685d      	ldr	r5, [r3, #4]
 8024432:	3504      	adds	r5, #4
 8024434:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024436:	2b00      	cmp	r3, #0
 8024438:	dc03      	bgt.n	8024442 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 802443a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802443c:	2b00      	cmp	r3, #0
 802443e:	f340 81e6 	ble.w	802480e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 8024442:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8024444:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024448:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802444c:	1e48      	subs	r0, r1, #1
 802444e:	1e56      	subs	r6, r2, #1
 8024450:	9b06      	ldr	r3, [sp, #24]
 8024452:	2b00      	cmp	r3, #0
 8024454:	f340 80bd 	ble.w	80245d2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8024458:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802445a:	1427      	asrs	r7, r4, #16
 802445c:	ea4f 4323 	mov.w	r3, r3, asr #16
 8024460:	d406      	bmi.n	8024470 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8024462:	4287      	cmp	r7, r0
 8024464:	da04      	bge.n	8024470 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8024466:	2b00      	cmp	r3, #0
 8024468:	db02      	blt.n	8024470 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 802446a:	42b3      	cmp	r3, r6
 802446c:	f2c0 80b2 	blt.w	80245d4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 8024470:	3701      	adds	r7, #1
 8024472:	f100 80a1 	bmi.w	80245b8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8024476:	42b9      	cmp	r1, r7
 8024478:	f2c0 809e 	blt.w	80245b8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 802447c:	3301      	adds	r3, #1
 802447e:	f100 809b 	bmi.w	80245b8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8024482:	429a      	cmp	r2, r3
 8024484:	f2c0 8098 	blt.w	80245b8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8024488:	e9dd b606 	ldrd	fp, r6, [sp, #24]
 802448c:	f1bb 0f00 	cmp.w	fp, #0
 8024490:	f340 80bf 	ble.w	8024612 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8024494:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8024496:	981e      	ldr	r0, [sp, #120]	; 0x78
 8024498:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802449a:	f3c2 3103 	ubfx	r1, r2, #12, #4
 802449e:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 80244a2:	1420      	asrs	r0, r4, #16
 80244a4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80244a6:	ea4f 4723 	mov.w	r7, r3, asr #16
 80244aa:	f3c4 3303 	ubfx	r3, r4, #12, #4
 80244ae:	6892      	ldr	r2, [r2, #8]
 80244b0:	f100 8103 	bmi.w	80246ba <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 80244b4:	f102 3eff 	add.w	lr, r2, #4294967295
 80244b8:	4570      	cmp	r0, lr
 80244ba:	f280 80fe 	bge.w	80246ba <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 80244be:	2f00      	cmp	r7, #0
 80244c0:	f2c0 80fb 	blt.w	80246ba <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 80244c4:	f10c 3eff 	add.w	lr, ip, #4294967295
 80244c8:	4577      	cmp	r7, lr
 80244ca:	f280 80f6 	bge.w	80246ba <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 80244ce:	b212      	sxth	r2, r2
 80244d0:	fb07 0002 	mla	r0, r7, r2, r0
 80244d4:	9f08      	ldr	r7, [sp, #32]
 80244d6:	f817 8000 	ldrb.w	r8, [r7, r0]
 80244da:	eb07 0e00 	add.w	lr, r7, r0
 80244de:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80244e2:	eb05 0c08 	add.w	ip, r5, r8
 80244e6:	2b00      	cmp	r3, #0
 80244e8:	f000 80d8 	beq.w	802469c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 80244ec:	f89e 7001 	ldrb.w	r7, [lr, #1]
 80244f0:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80244f4:	442f      	add	r7, r5
 80244f6:	2900      	cmp	r1, #0
 80244f8:	f000 80d9 	beq.w	80246ae <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80244fc:	eb0e 0002 	add.w	r0, lr, r2
 8024500:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8024504:	7840      	ldrb	r0, [r0, #1]
 8024506:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802450a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802450e:	442a      	add	r2, r5
 8024510:	4428      	add	r0, r5
 8024512:	b29b      	uxth	r3, r3
 8024514:	f815 a008 	ldrb.w	sl, [r5, r8]
 8024518:	b289      	uxth	r1, r1
 802451a:	f897 8000 	ldrb.w	r8, [r7]
 802451e:	fb03 f901 	mul.w	r9, r3, r1
 8024522:	011b      	lsls	r3, r3, #4
 8024524:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8024528:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 802452c:	eba3 0309 	sub.w	r3, r3, r9
 8024530:	b289      	uxth	r1, r1
 8024532:	b29b      	uxth	r3, r3
 8024534:	ebae 0e01 	sub.w	lr, lr, r1
 8024538:	fb03 f808 	mul.w	r8, r3, r8
 802453c:	fa1f fe8e 	uxth.w	lr, lr
 8024540:	fb0e 880a 	mla	r8, lr, sl, r8
 8024544:	f892 a000 	ldrb.w	sl, [r2]
 8024548:	fb01 880a 	mla	r8, r1, sl, r8
 802454c:	f890 a000 	ldrb.w	sl, [r0]
 8024550:	fb09 880a 	mla	r8, r9, sl, r8
 8024554:	ea4f 2828 	mov.w	r8, r8, asr #8
 8024558:	f886 8000 	strb.w	r8, [r6]
 802455c:	f897 8001 	ldrb.w	r8, [r7, #1]
 8024560:	f89c a001 	ldrb.w	sl, [ip, #1]
 8024564:	fb03 f808 	mul.w	r8, r3, r8
 8024568:	fb0e 880a 	mla	r8, lr, sl, r8
 802456c:	f892 a001 	ldrb.w	sl, [r2, #1]
 8024570:	fb01 880a 	mla	r8, r1, sl, r8
 8024574:	f890 a001 	ldrb.w	sl, [r0, #1]
 8024578:	fb09 880a 	mla	r8, r9, sl, r8
 802457c:	ea4f 2828 	mov.w	r8, r8, asr #8
 8024580:	f886 8001 	strb.w	r8, [r6, #1]
 8024584:	78bf      	ldrb	r7, [r7, #2]
 8024586:	f89c c002 	ldrb.w	ip, [ip, #2]
 802458a:	437b      	muls	r3, r7
 802458c:	7892      	ldrb	r2, [r2, #2]
 802458e:	fb0e 330c 	mla	r3, lr, ip, r3
 8024592:	fb01 3102 	mla	r1, r1, r2, r3
 8024596:	7882      	ldrb	r2, [r0, #2]
 8024598:	fb09 1902 	mla	r9, r9, r2, r1
 802459c:	ea4f 2929 	mov.w	r9, r9, asr #8
 80245a0:	f886 9002 	strb.w	r9, [r6, #2]
 80245a4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80245a6:	3603      	adds	r6, #3
 80245a8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80245aa:	f10b 3bff 	add.w	fp, fp, #4294967295
 80245ae:	441c      	add	r4, r3
 80245b0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80245b2:	4413      	add	r3, r2
 80245b4:	9318      	str	r3, [sp, #96]	; 0x60
 80245b6:	e769      	b.n	802448c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80245b8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80245ba:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 80245bc:	441c      	add	r4, r3
 80245be:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80245c0:	443b      	add	r3, r7
 80245c2:	9318      	str	r3, [sp, #96]	; 0x60
 80245c4:	9b06      	ldr	r3, [sp, #24]
 80245c6:	3b01      	subs	r3, #1
 80245c8:	9306      	str	r3, [sp, #24]
 80245ca:	9b07      	ldr	r3, [sp, #28]
 80245cc:	3303      	adds	r3, #3
 80245ce:	9307      	str	r3, [sp, #28]
 80245d0:	e73e      	b.n	8024450 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 80245d2:	d026      	beq.n	8024622 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 80245d4:	9b06      	ldr	r3, [sp, #24]
 80245d6:	9819      	ldr	r0, [sp, #100]	; 0x64
 80245d8:	3b01      	subs	r3, #1
 80245da:	fb00 4003 	mla	r0, r0, r3, r4
 80245de:	1400      	asrs	r0, r0, #16
 80245e0:	f53f af52 	bmi.w	8024488 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80245e4:	3901      	subs	r1, #1
 80245e6:	4288      	cmp	r0, r1
 80245e8:	f6bf af4e 	bge.w	8024488 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80245ec:	991a      	ldr	r1, [sp, #104]	; 0x68
 80245ee:	9818      	ldr	r0, [sp, #96]	; 0x60
 80245f0:	fb01 0303 	mla	r3, r1, r3, r0
 80245f4:	141b      	asrs	r3, r3, #16
 80245f6:	f53f af47 	bmi.w	8024488 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80245fa:	3a01      	subs	r2, #1
 80245fc:	4293      	cmp	r3, r2
 80245fe:	f6bf af43 	bge.w	8024488 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8024602:	9b07      	ldr	r3, [sp, #28]
 8024604:	f8dd a018 	ldr.w	sl, [sp, #24]
 8024608:	f103 0803 	add.w	r8, r3, #3
 802460c:	f1ba 0f00 	cmp.w	sl, #0
 8024610:	dc71      	bgt.n	80246f6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 8024612:	9b06      	ldr	r3, [sp, #24]
 8024614:	9a07      	ldr	r2, [sp, #28]
 8024616:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802461a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802461e:	441a      	add	r2, r3
 8024620:	9207      	str	r2, [sp, #28]
 8024622:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024624:	2b00      	cmp	r3, #0
 8024626:	f340 80f2 	ble.w	802480e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 802462a:	ee30 0a04 	vadd.f32	s0, s0, s8
 802462e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8024630:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8024634:	eeb0 6a62 	vmov.f32	s12, s5
 8024638:	eec6 7a80 	vdiv.f32	s15, s13, s0
 802463c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8024640:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8024644:	ee16 4a10 	vmov	r4, s12
 8024648:	eeb0 6a43 	vmov.f32	s12, s6
 802464c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8024650:	ed8d 6a18 	vstr	s12, [sp, #96]	; 0x60
 8024654:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8024658:	ee61 7a27 	vmul.f32	s15, s2, s15
 802465c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8024660:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8024664:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8024668:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802466c:	ee12 2a90 	vmov	r2, s5
 8024670:	eef0 2a47 	vmov.f32	s5, s14
 8024674:	fb92 f3f3 	sdiv	r3, r2, r3
 8024678:	ee13 2a10 	vmov	r2, s6
 802467c:	9319      	str	r3, [sp, #100]	; 0x64
 802467e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8024680:	eeb0 3a67 	vmov.f32	s6, s15
 8024684:	fb92 f3f3 	sdiv	r3, r2, r3
 8024688:	931a      	str	r3, [sp, #104]	; 0x68
 802468a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802468c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802468e:	3b01      	subs	r3, #1
 8024690:	9309      	str	r3, [sp, #36]	; 0x24
 8024692:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8024694:	bf08      	it	eq
 8024696:	4613      	moveq	r3, r2
 8024698:	9306      	str	r3, [sp, #24]
 802469a:	e6cb      	b.n	8024434 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 802469c:	b151      	cbz	r1, 80246b4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 802469e:	f81e 2002 	ldrb.w	r2, [lr, r2]
 80246a2:	4660      	mov	r0, ip
 80246a4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80246a8:	442a      	add	r2, r5
 80246aa:	4667      	mov	r7, ip
 80246ac:	e731      	b.n	8024512 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 80246ae:	4660      	mov	r0, ip
 80246b0:	4662      	mov	r2, ip
 80246b2:	e72e      	b.n	8024512 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 80246b4:	4660      	mov	r0, ip
 80246b6:	4662      	mov	r2, ip
 80246b8:	e7f7      	b.n	80246aa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ac>
 80246ba:	f110 0e01 	adds.w	lr, r0, #1
 80246be:	f53f af71 	bmi.w	80245a4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 80246c2:	4572      	cmp	r2, lr
 80246c4:	f6ff af6e 	blt.w	80245a4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 80246c8:	f117 0e01 	adds.w	lr, r7, #1
 80246cc:	f53f af6a 	bmi.w	80245a4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 80246d0:	45f4      	cmp	ip, lr
 80246d2:	f6ff af67 	blt.w	80245a4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 80246d6:	b212      	sxth	r2, r2
 80246d8:	e9cd 3104 	strd	r3, r1, [sp, #16]
 80246dc:	fa0f f38c 	sxth.w	r3, ip
 80246e0:	9200      	str	r2, [sp, #0]
 80246e2:	4631      	mov	r1, r6
 80246e4:	9a08      	ldr	r2, [sp, #32]
 80246e6:	9301      	str	r3, [sp, #4]
 80246e8:	462b      	mov	r3, r5
 80246ea:	e9cd 0702 	strd	r0, r7, [sp, #8]
 80246ee:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80246f0:	f7ff fde9 	bl	80242c6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 80246f4:	e756      	b.n	80245a4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 80246f6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80246f8:	1426      	asrs	r6, r4, #16
 80246fa:	9818      	ldr	r0, [sp, #96]	; 0x60
 80246fc:	f3c4 3303 	ubfx	r3, r4, #12, #4
 8024700:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8024704:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8024706:	1400      	asrs	r0, r0, #16
 8024708:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 802470c:	fb02 6000 	mla	r0, r2, r0, r6
 8024710:	9e08      	ldr	r6, [sp, #32]
 8024712:	f816 e000 	ldrb.w	lr, [r6, r0]
 8024716:	eb06 0c00 	add.w	ip, r6, r0
 802471a:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 802471e:	eb05 070e 	add.w	r7, r5, lr
 8024722:	2b00      	cmp	r3, #0
 8024724:	d064      	beq.n	80247f0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 8024726:	f89c 6001 	ldrb.w	r6, [ip, #1]
 802472a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 802472e:	442e      	add	r6, r5
 8024730:	2900      	cmp	r1, #0
 8024732:	d066      	beq.n	8024802 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x404>
 8024734:	eb0c 0002 	add.w	r0, ip, r2
 8024738:	f81c 2002 	ldrb.w	r2, [ip, r2]
 802473c:	7840      	ldrb	r0, [r0, #1]
 802473e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024742:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8024746:	442a      	add	r2, r5
 8024748:	4428      	add	r0, r5
 802474a:	b29b      	uxth	r3, r3
 802474c:	f815 b00e 	ldrb.w	fp, [r5, lr]
 8024750:	b289      	uxth	r1, r1
 8024752:	f896 e000 	ldrb.w	lr, [r6]
 8024756:	f108 0803 	add.w	r8, r8, #3
 802475a:	f10a 3aff 	add.w	sl, sl, #4294967295
 802475e:	fb03 f901 	mul.w	r9, r3, r1
 8024762:	011b      	lsls	r3, r3, #4
 8024764:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8024768:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 802476c:	eba3 0309 	sub.w	r3, r3, r9
 8024770:	b289      	uxth	r1, r1
 8024772:	b29b      	uxth	r3, r3
 8024774:	ebac 0c01 	sub.w	ip, ip, r1
 8024778:	fb03 fe0e 	mul.w	lr, r3, lr
 802477c:	fa1f fc8c 	uxth.w	ip, ip
 8024780:	fb0c ee0b 	mla	lr, ip, fp, lr
 8024784:	f892 b000 	ldrb.w	fp, [r2]
 8024788:	fb01 ee0b 	mla	lr, r1, fp, lr
 802478c:	f890 b000 	ldrb.w	fp, [r0]
 8024790:	fb09 ee0b 	mla	lr, r9, fp, lr
 8024794:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8024798:	f808 ec06 	strb.w	lr, [r8, #-6]
 802479c:	f896 e001 	ldrb.w	lr, [r6, #1]
 80247a0:	f897 b001 	ldrb.w	fp, [r7, #1]
 80247a4:	fb03 fe0e 	mul.w	lr, r3, lr
 80247a8:	fb0c ee0b 	mla	lr, ip, fp, lr
 80247ac:	f892 b001 	ldrb.w	fp, [r2, #1]
 80247b0:	fb01 ee0b 	mla	lr, r1, fp, lr
 80247b4:	f890 b001 	ldrb.w	fp, [r0, #1]
 80247b8:	fb09 ee0b 	mla	lr, r9, fp, lr
 80247bc:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80247c0:	f808 ec05 	strb.w	lr, [r8, #-5]
 80247c4:	78b6      	ldrb	r6, [r6, #2]
 80247c6:	78bf      	ldrb	r7, [r7, #2]
 80247c8:	4373      	muls	r3, r6
 80247ca:	7896      	ldrb	r6, [r2, #2]
 80247cc:	7882      	ldrb	r2, [r0, #2]
 80247ce:	fb0c 3307 	mla	r3, ip, r7, r3
 80247d2:	fb01 3306 	mla	r3, r1, r6, r3
 80247d6:	fb09 3902 	mla	r9, r9, r2, r3
 80247da:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80247dc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80247de:	441c      	add	r4, r3
 80247e0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80247e2:	ea4f 2929 	mov.w	r9, r9, asr #8
 80247e6:	4413      	add	r3, r2
 80247e8:	f808 9c04 	strb.w	r9, [r8, #-4]
 80247ec:	9318      	str	r3, [sp, #96]	; 0x60
 80247ee:	e70d      	b.n	802460c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 80247f0:	b151      	cbz	r1, 8024808 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 80247f2:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80247f6:	4638      	mov	r0, r7
 80247f8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80247fc:	442a      	add	r2, r5
 80247fe:	463e      	mov	r6, r7
 8024800:	e7a3      	b.n	802474a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 8024802:	4638      	mov	r0, r7
 8024804:	463a      	mov	r2, r7
 8024806:	e7a0      	b.n	802474a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 8024808:	4638      	mov	r0, r7
 802480a:	463a      	mov	r2, r7
 802480c:	e7f7      	b.n	80247fe <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x400>
 802480e:	b00d      	add	sp, #52	; 0x34
 8024810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08024814 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 8024814:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024818:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	; 0x38
 802481c:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 8024820:	2d00      	cmp	r5, #0
 8024822:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 8024826:	fb05 700c 	mla	r0, r5, ip, r7
 802482a:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 802482e:	f89d e044 	ldrb.w	lr, [sp, #68]	; 0x44
 8024832:	eb02 0800 	add.w	r8, r2, r0
 8024836:	f2c0 8118 	blt.w	8024a6a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 802483a:	45a9      	cmp	r9, r5
 802483c:	f340 8115 	ble.w	8024a6a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 8024840:	2f00      	cmp	r7, #0
 8024842:	f2c0 8110 	blt.w	8024a66 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 8024846:	45bc      	cmp	ip, r7
 8024848:	f340 810d 	ble.w	8024a66 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 802484c:	5c12      	ldrb	r2, [r2, r0]
 802484e:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8024852:	1c7a      	adds	r2, r7, #1
 8024854:	f100 810c 	bmi.w	8024a70 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 8024858:	4594      	cmp	ip, r2
 802485a:	f340 8109 	ble.w	8024a70 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 802485e:	2c00      	cmp	r4, #0
 8024860:	f000 8108 	beq.w	8024a74 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x260>
 8024864:	f898 2001 	ldrb.w	r2, [r8, #1]
 8024868:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 802486c:	3501      	adds	r5, #1
 802486e:	f100 8105 	bmi.w	8024a7c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 8024872:	45a9      	cmp	r9, r5
 8024874:	f340 8102 	ble.w	8024a7c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 8024878:	f1be 0f00 	cmp.w	lr, #0
 802487c:	f000 8101 	beq.w	8024a82 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x26e>
 8024880:	2f00      	cmp	r7, #0
 8024882:	f2c0 80f9 	blt.w	8024a78 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 8024886:	45bc      	cmp	ip, r7
 8024888:	f340 80f6 	ble.w	8024a78 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 802488c:	f818 200c 	ldrb.w	r2, [r8, ip]
 8024890:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8024894:	3701      	adds	r7, #1
 8024896:	f100 80f7 	bmi.w	8024a88 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 802489a:	45bc      	cmp	ip, r7
 802489c:	f340 80f4 	ble.w	8024a88 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 80248a0:	2c00      	cmp	r4, #0
 80248a2:	f000 80f3 	beq.w	8024a8c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x278>
 80248a6:	44c4      	add	ip, r8
 80248a8:	f89c 2001 	ldrb.w	r2, [ip, #1]
 80248ac:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80248b0:	fa1f fc84 	uxth.w	ip, r4
 80248b4:	fa1f f48e 	uxth.w	r4, lr
 80248b8:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 80248bc:	fb04 fe0c 	mul.w	lr, r4, ip
 80248c0:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 80248c4:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 80248c8:	ebce 1404 	rsb	r4, lr, r4, lsl #4
 80248cc:	ebac 070e 	sub.w	r7, ip, lr
 80248d0:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 80248d4:	ea4f 6915 	mov.w	r9, r5, lsr #24
 80248d8:	b2a4      	uxth	r4, r4
 80248da:	b2bf      	uxth	r7, r7
 80248dc:	1b1b      	subs	r3, r3, r4
 80248de:	ea4f 6812 	mov.w	r8, r2, lsr #24
 80248e2:	fb07 fc0a 	mul.w	ip, r7, sl
 80248e6:	b29b      	uxth	r3, r3
 80248e8:	fb03 cc0b 	mla	ip, r3, fp, ip
 80248ec:	9300      	str	r3, [sp, #0]
 80248ee:	fb04 cc09 	mla	ip, r4, r9, ip
 80248f2:	fb0e cc08 	mla	ip, lr, r8, ip
 80248f6:	f3cc 2307 	ubfx	r3, ip, #8, #8
 80248fa:	9301      	str	r3, [sp, #4]
 80248fc:	2b00      	cmp	r3, #0
 80248fe:	f000 80af 	beq.w	8024a60 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x24c>
 8024902:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8024906:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802490a:	fb0b fc0c 	mul.w	ip, fp, ip
 802490e:	fb0b f606 	mul.w	r6, fp, r6
 8024912:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8024916:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802491a:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 802491e:	44dc      	add	ip, fp
 8024920:	f000 1bff 	and.w	fp, r0, #16711935	; 0xff00ff
 8024924:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8024928:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802492c:	fb0a fb0b 	mul.w	fp, sl, fp
 8024930:	fb0a fa00 	mul.w	sl, sl, r0
 8024934:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 8024938:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 802493c:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8024940:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8024944:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8024948:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802494c:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8024950:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024954:	0a36      	lsrs	r6, r6, #8
 8024956:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802495a:	44dc      	add	ip, fp
 802495c:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8024960:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8024964:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8024968:	fb09 fb0b 	mul.w	fp, r9, fp
 802496c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024970:	fb09 f905 	mul.w	r9, r9, r5
 8024974:	ea4f 201b 	mov.w	r0, fp, lsr #8
 8024978:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802497c:	f509 7580 	add.w	r5, r9, #256	; 0x100
 8024980:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8024984:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8024988:	fb0c fc07 	mul.w	ip, ip, r7
 802498c:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 8024990:	f002 15ff 	and.w	r5, r2, #16711935	; 0xff00ff
 8024994:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8024998:	4458      	add	r0, fp
 802499a:	fb08 f505 	mul.w	r5, r8, r5
 802499e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80249a2:	fb08 f802 	mul.w	r8, r8, r2
 80249a6:	0a00      	lsrs	r0, r0, #8
 80249a8:	0a2a      	lsrs	r2, r5, #8
 80249aa:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 80249ae:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80249b2:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80249b6:	4415      	add	r5, r2
 80249b8:	f508 7280 	add.w	r2, r8, #256	; 0x100
 80249bc:	0a2d      	lsrs	r5, r5, #8
 80249be:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 80249c2:	9a00      	ldr	r2, [sp, #0]
 80249c4:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80249c8:	fb03 cc02 	mla	ip, r3, r2, ip
 80249cc:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80249d0:	9b01      	ldr	r3, [sp, #4]
 80249d2:	fb05 c50e 	mla	r5, r5, lr, ip
 80249d6:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 80249da:	fb00 5004 	mla	r0, r0, r4, r5
 80249de:	0a00      	lsrs	r0, r0, #8
 80249e0:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 80249e4:	f40a 407f 	and.w	r0, sl, #65280	; 0xff00
 80249e8:	4378      	muls	r0, r7
 80249ea:	fb02 0006 	mla	r0, r2, r6, r0
 80249ee:	fb0e 0e08 	mla	lr, lr, r8, r0
 80249f2:	f409 407f 	and.w	r0, r9, #65280	; 0xff00
 80249f6:	fb04 e000 	mla	r0, r4, r0, lr
 80249fa:	0a00      	lsrs	r0, r0, #8
 80249fc:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8024a00:	4328      	orrs	r0, r5
 8024a02:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 8024a06:	b2ad      	uxth	r5, r5
 8024a08:	b2c4      	uxtb	r4, r0
 8024a0a:	436b      	muls	r3, r5
 8024a0c:	fb14 f405 	smulbb	r4, r4, r5
 8024a10:	1c5a      	adds	r2, r3, #1
 8024a12:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8024a16:	780b      	ldrb	r3, [r1, #0]
 8024a18:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 8024a1c:	b2d2      	uxtb	r2, r2
 8024a1e:	fb03 4302 	mla	r3, r3, r2, r4
 8024a22:	b29b      	uxth	r3, r3
 8024a24:	1c5c      	adds	r4, r3, #1
 8024a26:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 8024a2a:	784c      	ldrb	r4, [r1, #1]
 8024a2c:	fb14 f402 	smulbb	r4, r4, r2
 8024a30:	121b      	asrs	r3, r3, #8
 8024a32:	700b      	strb	r3, [r1, #0]
 8024a34:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8024a38:	fb03 4305 	mla	r3, r3, r5, r4
 8024a3c:	b29b      	uxth	r3, r3
 8024a3e:	1c5c      	adds	r4, r3, #1
 8024a40:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 8024a44:	0c04      	lsrs	r4, r0, #16
 8024a46:	7888      	ldrb	r0, [r1, #2]
 8024a48:	121b      	asrs	r3, r3, #8
 8024a4a:	fb10 f002 	smulbb	r0, r0, r2
 8024a4e:	704b      	strb	r3, [r1, #1]
 8024a50:	fb04 0005 	mla	r0, r4, r5, r0
 8024a54:	b280      	uxth	r0, r0
 8024a56:	1c43      	adds	r3, r0, #1
 8024a58:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8024a5c:	1200      	asrs	r0, r0, #8
 8024a5e:	7088      	strb	r0, [r1, #2]
 8024a60:	b003      	add	sp, #12
 8024a62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024a66:	2600      	movs	r6, #0
 8024a68:	e6f3      	b.n	8024852 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x3e>
 8024a6a:	2000      	movs	r0, #0
 8024a6c:	4606      	mov	r6, r0
 8024a6e:	e6fd      	b.n	802486c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 8024a70:	2000      	movs	r0, #0
 8024a72:	e6fb      	b.n	802486c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 8024a74:	4620      	mov	r0, r4
 8024a76:	e6f9      	b.n	802486c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 8024a78:	2500      	movs	r5, #0
 8024a7a:	e70b      	b.n	8024894 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x80>
 8024a7c:	2200      	movs	r2, #0
 8024a7e:	4615      	mov	r5, r2
 8024a80:	e716      	b.n	80248b0 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 8024a82:	4672      	mov	r2, lr
 8024a84:	4675      	mov	r5, lr
 8024a86:	e713      	b.n	80248b0 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 8024a88:	2200      	movs	r2, #0
 8024a8a:	e711      	b.n	80248b0 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 8024a8c:	4622      	mov	r2, r4
 8024a8e:	e70f      	b.n	80248b0 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>

08024a90 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024a94:	b09f      	sub	sp, #124	; 0x7c
 8024a96:	921b      	str	r2, [sp, #108]	; 0x6c
 8024a98:	9309      	str	r3, [sp, #36]	; 0x24
 8024a9a:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8024a9c:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 8024aa0:	901d      	str	r0, [sp, #116]	; 0x74
 8024aa2:	931c      	str	r3, [sp, #112]	; 0x70
 8024aa4:	6850      	ldr	r0, [r2, #4]
 8024aa6:	9119      	str	r1, [sp, #100]	; 0x64
 8024aa8:	6812      	ldr	r2, [r2, #0]
 8024aaa:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 8024aac:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8024ab0:	fb00 1303 	mla	r3, r0, r3, r1
 8024ab4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8024ab8:	18d3      	adds	r3, r2, r3
 8024aba:	930c      	str	r3, [sp, #48]	; 0x30
 8024abc:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8024abe:	681b      	ldr	r3, [r3, #0]
 8024ac0:	9312      	str	r3, [sp, #72]	; 0x48
 8024ac2:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8024ac4:	685e      	ldr	r6, [r3, #4]
 8024ac6:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 8024aca:	3604      	adds	r6, #4
 8024acc:	930d      	str	r3, [sp, #52]	; 0x34
 8024ace:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8024ad0:	2b00      	cmp	r3, #0
 8024ad2:	dc03      	bgt.n	8024adc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8024ad4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8024ad6:	2b00      	cmp	r3, #0
 8024ad8:	f340 8378 	ble.w	80251cc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 8024adc:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8024ade:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024ae2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8024ae6:	1e48      	subs	r0, r1, #1
 8024ae8:	1e57      	subs	r7, r2, #1
 8024aea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024aec:	2b00      	cmp	r3, #0
 8024aee:	f340 818c 	ble.w	8024e0a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8024af2:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8024af4:	142b      	asrs	r3, r5, #16
 8024af6:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8024afa:	d406      	bmi.n	8024b0a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8024afc:	4584      	cmp	ip, r0
 8024afe:	da04      	bge.n	8024b0a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8024b00:	2b00      	cmp	r3, #0
 8024b02:	db02      	blt.n	8024b0a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8024b04:	42bb      	cmp	r3, r7
 8024b06:	f2c0 8181 	blt.w	8024e0c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8024b0a:	f11c 0c01 	adds.w	ip, ip, #1
 8024b0e:	f100 816f 	bmi.w	8024df0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8024b12:	4561      	cmp	r1, ip
 8024b14:	f2c0 816c 	blt.w	8024df0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8024b18:	3301      	adds	r3, #1
 8024b1a:	f100 8169 	bmi.w	8024df0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8024b1e:	429a      	cmp	r2, r3
 8024b20:	f2c0 8166 	blt.w	8024df0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8024b24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024b26:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8024b28:	931a      	str	r3, [sp, #104]	; 0x68
 8024b2a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8024b2c:	2b00      	cmp	r3, #0
 8024b2e:	f340 818c 	ble.w	8024e4a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 8024b32:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8024b34:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8024b38:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8024b3c:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8024b40:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8024b42:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 8024b46:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8024b48:	141b      	asrs	r3, r3, #16
 8024b4a:	f100 81d0 	bmi.w	8024eee <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8024b4e:	f100 38ff 	add.w	r8, r0, #4294967295
 8024b52:	4543      	cmp	r3, r8
 8024b54:	f280 81cb 	bge.w	8024eee <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8024b58:	f1bc 0f00 	cmp.w	ip, #0
 8024b5c:	f2c0 81c7 	blt.w	8024eee <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8024b60:	f10e 38ff 	add.w	r8, lr, #4294967295
 8024b64:	45c4      	cmp	ip, r8
 8024b66:	f280 81c2 	bge.w	8024eee <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8024b6a:	b200      	sxth	r0, r0
 8024b6c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8024b6e:	fb0c 3300 	mla	r3, ip, r0, r3
 8024b72:	eb04 0803 	add.w	r8, r4, r3
 8024b76:	5ce3      	ldrb	r3, [r4, r3]
 8024b78:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8024b7c:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8024b80:	2a00      	cmp	r2, #0
 8024b82:	f000 81a9 	beq.w	8024ed8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x448>
 8024b86:	f898 c001 	ldrb.w	ip, [r8, #1]
 8024b8a:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8024b8e:	940e      	str	r4, [sp, #56]	; 0x38
 8024b90:	0e24      	lsrs	r4, r4, #24
 8024b92:	9415      	str	r4, [sp, #84]	; 0x54
 8024b94:	b179      	cbz	r1, 8024bb6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8024b96:	eb08 0c00 	add.w	ip, r8, r0
 8024b9a:	f818 0000 	ldrb.w	r0, [r8, r0]
 8024b9e:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8024ba2:	900a      	str	r0, [sp, #40]	; 0x28
 8024ba4:	0e00      	lsrs	r0, r0, #24
 8024ba6:	9013      	str	r0, [sp, #76]	; 0x4c
 8024ba8:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8024bac:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8024bb0:	900f      	str	r0, [sp, #60]	; 0x3c
 8024bb2:	0e00      	lsrs	r0, r0, #24
 8024bb4:	9016      	str	r0, [sp, #88]	; 0x58
 8024bb6:	b292      	uxth	r2, r2
 8024bb8:	9815      	ldr	r0, [sp, #84]	; 0x54
 8024bba:	b289      	uxth	r1, r1
 8024bbc:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8024bbe:	fb02 f901 	mul.w	r9, r2, r1
 8024bc2:	0112      	lsls	r2, r2, #4
 8024bc4:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8024bc8:	eba2 0809 	sub.w	r8, r2, r9
 8024bcc:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8024bd0:	b289      	uxth	r1, r1
 8024bd2:	fa1f f888 	uxth.w	r8, r8
 8024bd6:	1a52      	subs	r2, r2, r1
 8024bd8:	fb08 f000 	mul.w	r0, r8, r0
 8024bdc:	b292      	uxth	r2, r2
 8024bde:	fb02 000e 	mla	r0, r2, lr, r0
 8024be2:	fb01 0004 	mla	r0, r1, r4, r0
 8024be6:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8024be8:	fb09 0004 	mla	r0, r9, r4, r0
 8024bec:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8024bf0:	2800      	cmp	r0, #0
 8024bf2:	f000 80f2 	beq.w	8024dda <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8024bf6:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8024bfa:	d01b      	beq.n	8024c34 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 8024bfc:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8024c00:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024c04:	fb0e fa0a 	mul.w	sl, lr, sl
 8024c08:	fb0e fe03 	mul.w	lr, lr, r3
 8024c0c:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8024c10:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8024c14:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8024c18:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024c1c:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8024c20:	4453      	add	r3, sl
 8024c22:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024c26:	0a1b      	lsrs	r3, r3, #8
 8024c28:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8024c2c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024c30:	ea43 030c 	orr.w	r3, r3, ip
 8024c34:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8024c36:	2cff      	cmp	r4, #255	; 0xff
 8024c38:	d021      	beq.n	8024c7e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8024c3a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8024c3c:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8024c40:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8024c42:	fb04 fb0b 	mul.w	fp, r4, fp
 8024c46:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8024c48:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8024c4c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8024c4e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8024c52:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8024c56:	fb04 fa0a 	mul.w	sl, r4, sl
 8024c5a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024c5e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8024c62:	44de      	add	lr, fp
 8024c64:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8024c68:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024c6c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024c70:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024c74:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024c78:	ea4e 040a 	orr.w	r4, lr, sl
 8024c7c:	940e      	str	r4, [sp, #56]	; 0x38
 8024c7e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8024c80:	2cff      	cmp	r4, #255	; 0xff
 8024c82:	d021      	beq.n	8024cc8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 8024c84:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8024c86:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8024c8a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8024c8c:	fb04 fb0b 	mul.w	fp, r4, fp
 8024c90:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8024c92:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8024c96:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8024c98:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8024c9c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8024ca0:	fb04 fa0a 	mul.w	sl, r4, sl
 8024ca4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024ca8:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8024cac:	44de      	add	lr, fp
 8024cae:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8024cb2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024cb6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024cba:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024cbe:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024cc2:	ea4e 040a 	orr.w	r4, lr, sl
 8024cc6:	940a      	str	r4, [sp, #40]	; 0x28
 8024cc8:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8024cca:	2cff      	cmp	r4, #255	; 0xff
 8024ccc:	d021      	beq.n	8024d12 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 8024cce:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8024cd0:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8024cd4:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8024cd6:	fb04 fb0b 	mul.w	fp, r4, fp
 8024cda:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8024cdc:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8024ce0:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8024ce2:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8024ce6:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8024cea:	fb04 fa0a 	mul.w	sl, r4, sl
 8024cee:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024cf2:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8024cf6:	44de      	add	lr, fp
 8024cf8:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8024cfc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024d00:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024d04:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024d08:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024d0c:	ea4e 040a 	orr.w	r4, lr, sl
 8024d10:	940f      	str	r4, [sp, #60]	; 0x3c
 8024d12:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8024d14:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8024d18:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024d1c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8024d20:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8024d22:	fb08 fc0c 	mul.w	ip, r8, ip
 8024d26:	fb02 cc0e 	mla	ip, r2, lr, ip
 8024d2a:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8024d2e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8024d30:	fb01 cc0e 	mla	ip, r1, lr, ip
 8024d34:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8024d38:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8024d3a:	fb09 cc0e 	mla	ip, r9, lr, ip
 8024d3e:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8024d42:	fb08 f80e 	mul.w	r8, r8, lr
 8024d46:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024d4a:	fb02 8303 	mla	r3, r2, r3, r8
 8024d4e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024d50:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024d54:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8024d58:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8024d5a:	fb01 330a 	mla	r3, r1, sl, r3
 8024d5e:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 8024d62:	fb09 3901 	mla	r9, r9, r1, r3
 8024d66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024d68:	990d      	ldr	r1, [sp, #52]	; 0x34
 8024d6a:	4343      	muls	r3, r0
 8024d6c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8024d70:	1c58      	adds	r0, r3, #1
 8024d72:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8024d76:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8024d7a:	ea4c 0c09 	orr.w	ip, ip, r9
 8024d7e:	783b      	ldrb	r3, [r7, #0]
 8024d80:	fa5f f28c 	uxtb.w	r2, ip
 8024d84:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8024d88:	fb12 f201 	smulbb	r2, r2, r1
 8024d8c:	b2c0      	uxtb	r0, r0
 8024d8e:	fb03 2300 	mla	r3, r3, r0, r2
 8024d92:	b29b      	uxth	r3, r3
 8024d94:	1c5a      	adds	r2, r3, #1
 8024d96:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8024d9a:	787a      	ldrb	r2, [r7, #1]
 8024d9c:	fb12 f200 	smulbb	r2, r2, r0
 8024da0:	121b      	asrs	r3, r3, #8
 8024da2:	703b      	strb	r3, [r7, #0]
 8024da4:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8024da8:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8024dac:	fb03 2301 	mla	r3, r3, r1, r2
 8024db0:	b29b      	uxth	r3, r3
 8024db2:	1c5a      	adds	r2, r3, #1
 8024db4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8024db8:	121b      	asrs	r3, r3, #8
 8024dba:	707b      	strb	r3, [r7, #1]
 8024dbc:	78bb      	ldrb	r3, [r7, #2]
 8024dbe:	fb13 f000 	smulbb	r0, r3, r0
 8024dc2:	fb0c 0c01 	mla	ip, ip, r1, r0
 8024dc6:	fa1f fc8c 	uxth.w	ip, ip
 8024dca:	f10c 0301 	add.w	r3, ip, #1
 8024dce:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8024dd2:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8024dd6:	f887 c002 	strb.w	ip, [r7, #2]
 8024dda:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8024ddc:	3703      	adds	r7, #3
 8024dde:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8024de0:	441a      	add	r2, r3
 8024de2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024de4:	441d      	add	r5, r3
 8024de6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8024de8:	9229      	str	r2, [sp, #164]	; 0xa4
 8024dea:	3b01      	subs	r3, #1
 8024dec:	931a      	str	r3, [sp, #104]	; 0x68
 8024dee:	e69c      	b.n	8024b2a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8024df0:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8024df2:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8024df4:	441c      	add	r4, r3
 8024df6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024df8:	441d      	add	r5, r3
 8024dfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024dfc:	9429      	str	r4, [sp, #164]	; 0xa4
 8024dfe:	3b01      	subs	r3, #1
 8024e00:	9309      	str	r3, [sp, #36]	; 0x24
 8024e02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024e04:	3303      	adds	r3, #3
 8024e06:	930c      	str	r3, [sp, #48]	; 0x30
 8024e08:	e66f      	b.n	8024aea <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8024e0a:	d026      	beq.n	8024e5a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 8024e0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024e0e:	982b      	ldr	r0, [sp, #172]	; 0xac
 8024e10:	3b01      	subs	r3, #1
 8024e12:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8024e14:	fb00 4003 	mla	r0, r0, r3, r4
 8024e18:	1400      	asrs	r0, r0, #16
 8024e1a:	f53f ae83 	bmi.w	8024b24 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8024e1e:	3901      	subs	r1, #1
 8024e20:	4288      	cmp	r0, r1
 8024e22:	f6bf ae7f 	bge.w	8024b24 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8024e26:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8024e28:	fb01 5303 	mla	r3, r1, r3, r5
 8024e2c:	141b      	asrs	r3, r3, #16
 8024e2e:	f53f ae79 	bmi.w	8024b24 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8024e32:	3a01      	subs	r2, #1
 8024e34:	4293      	cmp	r3, r2
 8024e36:	f6bf ae75 	bge.w	8024b24 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8024e3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024e3c:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8024e40:	f103 0e03 	add.w	lr, r3, #3
 8024e44:	f1bb 0f00 	cmp.w	fp, #0
 8024e48:	dc71      	bgt.n	8024f2e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8024e4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024e4c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8024e50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024e52:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8024e56:	4423      	add	r3, r4
 8024e58:	930c      	str	r3, [sp, #48]	; 0x30
 8024e5a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8024e5c:	2b00      	cmp	r3, #0
 8024e5e:	f340 81b5 	ble.w	80251cc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 8024e62:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8024e66:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024e68:	ee30 0a04 	vadd.f32	s0, s0, s8
 8024e6c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8024e70:	eef0 6a62 	vmov.f32	s13, s5
 8024e74:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8024e78:	ee31 1a05 	vadd.f32	s2, s2, s10
 8024e7c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024e80:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 8024e84:	eef0 6a43 	vmov.f32	s13, s6
 8024e88:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024e8c:	ee16 5a90 	vmov	r5, s13
 8024e90:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8024e94:	ee61 7a27 	vmul.f32	s15, s2, s15
 8024e98:	ee77 2a62 	vsub.f32	s5, s14, s5
 8024e9c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8024ea0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8024ea4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8024ea8:	ee12 2a90 	vmov	r2, s5
 8024eac:	eef0 2a47 	vmov.f32	s5, s14
 8024eb0:	fb92 f3f3 	sdiv	r3, r2, r3
 8024eb4:	ee13 2a10 	vmov	r2, s6
 8024eb8:	932b      	str	r3, [sp, #172]	; 0xac
 8024eba:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024ebc:	eeb0 3a67 	vmov.f32	s6, s15
 8024ec0:	fb92 f3f3 	sdiv	r3, r2, r3
 8024ec4:	932c      	str	r3, [sp, #176]	; 0xb0
 8024ec6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8024ec8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8024eca:	3b01      	subs	r3, #1
 8024ecc:	9319      	str	r3, [sp, #100]	; 0x64
 8024ece:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024ed0:	bf08      	it	eq
 8024ed2:	4613      	moveq	r3, r2
 8024ed4:	9309      	str	r3, [sp, #36]	; 0x24
 8024ed6:	e5fa      	b.n	8024ace <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8024ed8:	2900      	cmp	r1, #0
 8024eda:	f43f ae6c 	beq.w	8024bb6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8024ede:	f818 0000 	ldrb.w	r0, [r8, r0]
 8024ee2:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8024ee6:	900a      	str	r0, [sp, #40]	; 0x28
 8024ee8:	0e00      	lsrs	r0, r0, #24
 8024eea:	9013      	str	r0, [sp, #76]	; 0x4c
 8024eec:	e663      	b.n	8024bb6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8024eee:	f113 0801 	adds.w	r8, r3, #1
 8024ef2:	f53f af72 	bmi.w	8024dda <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8024ef6:	4540      	cmp	r0, r8
 8024ef8:	f6ff af6f 	blt.w	8024dda <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8024efc:	f11c 0801 	adds.w	r8, ip, #1
 8024f00:	f53f af6b 	bmi.w	8024dda <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8024f04:	45c6      	cmp	lr, r8
 8024f06:	f6ff af68 	blt.w	8024dda <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8024f0a:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8024f0c:	b200      	sxth	r0, r0
 8024f0e:	9302      	str	r3, [sp, #8]
 8024f10:	fa0f f38e 	sxth.w	r3, lr
 8024f14:	9000      	str	r0, [sp, #0]
 8024f16:	9301      	str	r3, [sp, #4]
 8024f18:	4633      	mov	r3, r6
 8024f1a:	981d      	ldr	r0, [sp, #116]	; 0x74
 8024f1c:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8024f20:	e9cd c203 	strd	ip, r2, [sp, #12]
 8024f24:	4639      	mov	r1, r7
 8024f26:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8024f28:	f7ff fc74 	bl	8024814 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 8024f2c:	e755      	b.n	8024dda <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8024f2e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8024f30:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8024f34:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8024f36:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8024f3a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8024f3c:	1427      	asrs	r7, r4, #16
 8024f3e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8024f40:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024f44:	142b      	asrs	r3, r5, #16
 8024f46:	fb01 7303 	mla	r3, r1, r3, r7
 8024f4a:	18e7      	adds	r7, r4, r3
 8024f4c:	5ce3      	ldrb	r3, [r4, r3]
 8024f4e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8024f52:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8024f56:	2a00      	cmp	r2, #0
 8024f58:	f000 812e 	beq.w	80251b8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x728>
 8024f5c:	f897 8001 	ldrb.w	r8, [r7, #1]
 8024f60:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 8024f64:	9410      	str	r4, [sp, #64]	; 0x40
 8024f66:	0e24      	lsrs	r4, r4, #24
 8024f68:	9417      	str	r4, [sp, #92]	; 0x5c
 8024f6a:	b170      	cbz	r0, 8024f8a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 8024f6c:	eb07 0801 	add.w	r8, r7, r1
 8024f70:	5c79      	ldrb	r1, [r7, r1]
 8024f72:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8024f76:	910b      	str	r1, [sp, #44]	; 0x2c
 8024f78:	0e09      	lsrs	r1, r1, #24
 8024f7a:	9114      	str	r1, [sp, #80]	; 0x50
 8024f7c:	f898 1001 	ldrb.w	r1, [r8, #1]
 8024f80:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8024f84:	9111      	str	r1, [sp, #68]	; 0x44
 8024f86:	0e09      	lsrs	r1, r1, #24
 8024f88:	9118      	str	r1, [sp, #96]	; 0x60
 8024f8a:	b292      	uxth	r2, r2
 8024f8c:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8024f8e:	b280      	uxth	r0, r0
 8024f90:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8024f92:	fb02 f900 	mul.w	r9, r2, r0
 8024f96:	0112      	lsls	r2, r2, #4
 8024f98:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8024f9c:	eba2 0809 	sub.w	r8, r2, r9
 8024fa0:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8024fa4:	b280      	uxth	r0, r0
 8024fa6:	fa1f f888 	uxth.w	r8, r8
 8024faa:	1a12      	subs	r2, r2, r0
 8024fac:	fb08 f101 	mul.w	r1, r8, r1
 8024fb0:	b292      	uxth	r2, r2
 8024fb2:	fb02 110c 	mla	r1, r2, ip, r1
 8024fb6:	fb00 1104 	mla	r1, r0, r4, r1
 8024fba:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8024fbc:	fb09 1104 	mla	r1, r9, r4, r1
 8024fc0:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8024fc4:	2900      	cmp	r1, #0
 8024fc6:	f000 80ec 	beq.w	80251a2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x712>
 8024fca:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8024fce:	d019      	beq.n	8025004 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x574>
 8024fd0:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8024fd4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024fd8:	fb0c fa0a 	mul.w	sl, ip, sl
 8024fdc:	fb0c fc03 	mul.w	ip, ip, r3
 8024fe0:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8024fe4:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8024fe8:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8024fec:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024ff0:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8024ff4:	4453      	add	r3, sl
 8024ff6:	0a3f      	lsrs	r7, r7, #8
 8024ff8:	0a1b      	lsrs	r3, r3, #8
 8024ffa:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8024ffe:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8025002:	433b      	orrs	r3, r7
 8025004:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8025006:	2cff      	cmp	r4, #255	; 0xff
 8025008:	d020      	beq.n	802504c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5bc>
 802500a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802500c:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8025010:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8025012:	4367      	muls	r7, r4
 8025014:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8025016:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802501a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802501e:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8025020:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8025024:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025028:	fb04 fa0a 	mul.w	sl, r4, sl
 802502c:	44bc      	add	ip, r7
 802502e:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8025032:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025036:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802503a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802503e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025042:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025046:	ea4c 040a 	orr.w	r4, ip, sl
 802504a:	9410      	str	r4, [sp, #64]	; 0x40
 802504c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802504e:	2cff      	cmp	r4, #255	; 0xff
 8025050:	d020      	beq.n	8025094 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x604>
 8025052:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8025054:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8025058:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802505a:	4367      	muls	r7, r4
 802505c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802505e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8025062:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8025066:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8025068:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802506c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025070:	fb04 fa0a 	mul.w	sl, r4, sl
 8025074:	44bc      	add	ip, r7
 8025076:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802507a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802507e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8025082:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025086:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802508a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802508e:	ea4c 040a 	orr.w	r4, ip, sl
 8025092:	940b      	str	r4, [sp, #44]	; 0x2c
 8025094:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8025096:	2cff      	cmp	r4, #255	; 0xff
 8025098:	d020      	beq.n	80250dc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64c>
 802509a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 802509c:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80250a0:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80250a2:	4367      	muls	r7, r4
 80250a4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80250a6:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80250aa:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80250ae:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80250b0:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80250b4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80250b8:	fb04 fa0a 	mul.w	sl, r4, sl
 80250bc:	44bc      	add	ip, r7
 80250be:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80250c2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80250c6:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80250ca:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80250ce:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80250d2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80250d6:	ea4c 040a 	orr.w	r4, ip, sl
 80250da:	9411      	str	r4, [sp, #68]	; 0x44
 80250dc:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80250de:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80250e2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80250e6:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80250ea:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80250ec:	fb08 f707 	mul.w	r7, r8, r7
 80250f0:	fb02 770c 	mla	r7, r2, ip, r7
 80250f4:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80250f8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80250fa:	fb00 770c 	mla	r7, r0, ip, r7
 80250fe:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8025102:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8025104:	fb09 770c 	mla	r7, r9, ip, r7
 8025108:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 802510c:	fb08 f80c 	mul.w	r8, r8, ip
 8025110:	0a3f      	lsrs	r7, r7, #8
 8025112:	fb02 8303 	mla	r3, r2, r3, r8
 8025116:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8025118:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802511c:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8025120:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8025122:	fb00 330a 	mla	r3, r0, sl, r3
 8025126:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 802512a:	980d      	ldr	r0, [sp, #52]	; 0x34
 802512c:	fb09 3c0c 	mla	ip, r9, ip, r3
 8025130:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8025132:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025136:	434b      	muls	r3, r1
 8025138:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802513c:	1c59      	adds	r1, r3, #1
 802513e:	ea47 070c 	orr.w	r7, r7, ip
 8025142:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8025146:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 802514a:	b2fa      	uxtb	r2, r7
 802514c:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8025150:	fb12 f200 	smulbb	r2, r2, r0
 8025154:	b2c9      	uxtb	r1, r1
 8025156:	fb03 2301 	mla	r3, r3, r1, r2
 802515a:	b29b      	uxth	r3, r3
 802515c:	1c5a      	adds	r2, r3, #1
 802515e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8025162:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8025166:	fb12 f201 	smulbb	r2, r2, r1
 802516a:	121b      	asrs	r3, r3, #8
 802516c:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8025170:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8025174:	0c3f      	lsrs	r7, r7, #16
 8025176:	fb03 2300 	mla	r3, r3, r0, r2
 802517a:	b29b      	uxth	r3, r3
 802517c:	1c5a      	adds	r2, r3, #1
 802517e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8025182:	121b      	asrs	r3, r3, #8
 8025184:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8025188:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 802518c:	fb13 f101 	smulbb	r1, r3, r1
 8025190:	fb07 1700 	mla	r7, r7, r0, r1
 8025194:	b2bf      	uxth	r7, r7
 8025196:	1c7b      	adds	r3, r7, #1
 8025198:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 802519c:	123f      	asrs	r7, r7, #8
 802519e:	f80e 7c01 	strb.w	r7, [lr, #-1]
 80251a2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80251a4:	f10e 0e03 	add.w	lr, lr, #3
 80251a8:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80251aa:	f10b 3bff 	add.w	fp, fp, #4294967295
 80251ae:	441a      	add	r2, r3
 80251b0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80251b2:	9229      	str	r2, [sp, #164]	; 0xa4
 80251b4:	441d      	add	r5, r3
 80251b6:	e645      	b.n	8024e44 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 80251b8:	2800      	cmp	r0, #0
 80251ba:	f43f aee6 	beq.w	8024f8a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 80251be:	5c79      	ldrb	r1, [r7, r1]
 80251c0:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80251c4:	910b      	str	r1, [sp, #44]	; 0x2c
 80251c6:	0e09      	lsrs	r1, r1, #24
 80251c8:	9114      	str	r1, [sp, #80]	; 0x50
 80251ca:	e6de      	b.n	8024f8a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 80251cc:	b01f      	add	sp, #124	; 0x7c
 80251ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080251d2 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 80251d2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80251d6:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	; 0x38
 80251da:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 80251de:	2d00      	cmp	r5, #0
 80251e0:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 80251e4:	fb05 700e 	mla	r0, r5, lr, r7
 80251e8:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 80251ec:	f89d c044 	ldrb.w	ip, [sp, #68]	; 0x44
 80251f0:	eb02 0800 	add.w	r8, r2, r0
 80251f4:	f2c0 8105 	blt.w	8025402 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 80251f8:	45a9      	cmp	r9, r5
 80251fa:	f340 8102 	ble.w	8025402 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 80251fe:	2f00      	cmp	r7, #0
 8025200:	f2c0 80fd 	blt.w	80253fe <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 8025204:	45be      	cmp	lr, r7
 8025206:	f340 80fa 	ble.w	80253fe <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 802520a:	5c12      	ldrb	r2, [r2, r0]
 802520c:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8025210:	1c7a      	adds	r2, r7, #1
 8025212:	f100 80f9 	bmi.w	8025408 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 8025216:	4596      	cmp	lr, r2
 8025218:	f340 80f6 	ble.w	8025408 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 802521c:	2c00      	cmp	r4, #0
 802521e:	f000 80f5 	beq.w	802540c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23a>
 8025222:	f898 2001 	ldrb.w	r2, [r8, #1]
 8025226:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 802522a:	3501      	adds	r5, #1
 802522c:	f100 80f2 	bmi.w	8025414 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 8025230:	45a9      	cmp	r9, r5
 8025232:	f340 80ef 	ble.w	8025414 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 8025236:	f1bc 0f00 	cmp.w	ip, #0
 802523a:	f000 80ee 	beq.w	802541a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x248>
 802523e:	2f00      	cmp	r7, #0
 8025240:	f2c0 80e6 	blt.w	8025410 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 8025244:	45be      	cmp	lr, r7
 8025246:	f340 80e3 	ble.w	8025410 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 802524a:	f818 200e 	ldrb.w	r2, [r8, lr]
 802524e:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8025252:	3701      	adds	r7, #1
 8025254:	f100 80e4 	bmi.w	8025420 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 8025258:	45be      	cmp	lr, r7
 802525a:	f340 80e1 	ble.w	8025420 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 802525e:	2c00      	cmp	r4, #0
 8025260:	f000 80e0 	beq.w	8025424 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x252>
 8025264:	44c6      	add	lr, r8
 8025266:	f89e 2001 	ldrb.w	r2, [lr, #1]
 802526a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 802526e:	b2a3      	uxth	r3, r4
 8025270:	fa1f fc8c 	uxth.w	ip, ip
 8025274:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 8025278:	fb0c fe03 	mul.w	lr, ip, r3
 802527c:	011b      	lsls	r3, r3, #4
 802527e:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8025282:	ebce 1c0c 	rsb	ip, lr, ip, lsl #4
 8025286:	eba3 070e 	sub.w	r7, r3, lr
 802528a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 802528e:	ea4f 6915 	mov.w	r9, r5, lsr #24
 8025292:	fa1f f48c 	uxth.w	r4, ip
 8025296:	b2bf      	uxth	r7, r7
 8025298:	1b1b      	subs	r3, r3, r4
 802529a:	ea4f 6812 	mov.w	r8, r2, lsr #24
 802529e:	fb07 fc0a 	mul.w	ip, r7, sl
 80252a2:	b29b      	uxth	r3, r3
 80252a4:	fb03 cc0b 	mla	ip, r3, fp, ip
 80252a8:	9300      	str	r3, [sp, #0]
 80252aa:	fb04 cc09 	mla	ip, r4, r9, ip
 80252ae:	fb0e cc08 	mla	ip, lr, r8, ip
 80252b2:	f3cc 2307 	ubfx	r3, ip, #8, #8
 80252b6:	9301      	str	r3, [sp, #4]
 80252b8:	2b00      	cmp	r3, #0
 80252ba:	f000 809d 	beq.w	80253f8 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x226>
 80252be:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 80252c2:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80252c6:	fb0b fc0c 	mul.w	ip, fp, ip
 80252ca:	fb0b f606 	mul.w	r6, fp, r6
 80252ce:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 80252d2:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80252d6:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 80252da:	44dc      	add	ip, fp
 80252dc:	f000 1bff 	and.w	fp, r0, #16711935	; 0xff00ff
 80252e0:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80252e4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80252e8:	fb0a fb0b 	mul.w	fp, sl, fp
 80252ec:	fb0a fa00 	mul.w	sl, sl, r0
 80252f0:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 80252f4:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 80252f8:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 80252fc:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8025300:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8025304:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8025308:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 802530c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025310:	0a36      	lsrs	r6, r6, #8
 8025312:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025316:	44dc      	add	ip, fp
 8025318:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 802531c:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8025320:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8025324:	fb09 fb0b 	mul.w	fp, r9, fp
 8025328:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802532c:	fb09 f905 	mul.w	r9, r9, r5
 8025330:	ea4f 201b 	mov.w	r0, fp, lsr #8
 8025334:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025338:	f509 7580 	add.w	r5, r9, #256	; 0x100
 802533c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8025340:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8025344:	fb0c fc07 	mul.w	ip, ip, r7
 8025348:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 802534c:	f002 15ff 	and.w	r5, r2, #16711935	; 0xff00ff
 8025350:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8025354:	4458      	add	r0, fp
 8025356:	fb08 f505 	mul.w	r5, r8, r5
 802535a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802535e:	fb08 f802 	mul.w	r8, r8, r2
 8025362:	0a00      	lsrs	r0, r0, #8
 8025364:	0a2a      	lsrs	r2, r5, #8
 8025366:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 802536a:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 802536e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8025372:	4415      	add	r5, r2
 8025374:	f508 7280 	add.w	r2, r8, #256	; 0x100
 8025378:	0a2d      	lsrs	r5, r5, #8
 802537a:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 802537e:	9a00      	ldr	r2, [sp, #0]
 8025380:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8025384:	fb03 cc02 	mla	ip, r3, r2, ip
 8025388:	ea4f 2818 	mov.w	r8, r8, lsr #8
 802538c:	9b01      	ldr	r3, [sp, #4]
 802538e:	fb05 c50e 	mla	r5, r5, lr, ip
 8025392:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8025396:	43db      	mvns	r3, r3
 8025398:	fb00 5004 	mla	r0, r0, r4, r5
 802539c:	b2db      	uxtb	r3, r3
 802539e:	0a00      	lsrs	r0, r0, #8
 80253a0:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 80253a4:	f40a 407f 	and.w	r0, sl, #65280	; 0xff00
 80253a8:	4378      	muls	r0, r7
 80253aa:	fb02 0006 	mla	r0, r2, r6, r0
 80253ae:	780a      	ldrb	r2, [r1, #0]
 80253b0:	fb0e 0e08 	mla	lr, lr, r8, r0
 80253b4:	f409 407f 	and.w	r0, r9, #65280	; 0xff00
 80253b8:	fb04 e000 	mla	r0, r4, r0, lr
 80253bc:	fb02 f403 	mul.w	r4, r2, r3
 80253c0:	0a00      	lsrs	r0, r0, #8
 80253c2:	1c62      	adds	r2, r4, #1
 80253c4:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80253c8:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 80253cc:	4328      	orrs	r0, r5
 80253ce:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 80253d2:	700a      	strb	r2, [r1, #0]
 80253d4:	784a      	ldrb	r2, [r1, #1]
 80253d6:	435a      	muls	r2, r3
 80253d8:	1c54      	adds	r4, r2, #1
 80253da:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 80253de:	0a02      	lsrs	r2, r0, #8
 80253e0:	0c00      	lsrs	r0, r0, #16
 80253e2:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 80253e6:	704a      	strb	r2, [r1, #1]
 80253e8:	788a      	ldrb	r2, [r1, #2]
 80253ea:	4353      	muls	r3, r2
 80253ec:	1c5a      	adds	r2, r3, #1
 80253ee:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80253f2:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80253f6:	7088      	strb	r0, [r1, #2]
 80253f8:	b003      	add	sp, #12
 80253fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80253fe:	2600      	movs	r6, #0
 8025400:	e706      	b.n	8025210 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x3e>
 8025402:	2000      	movs	r0, #0
 8025404:	4606      	mov	r6, r0
 8025406:	e710      	b.n	802522a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 8025408:	2000      	movs	r0, #0
 802540a:	e70e      	b.n	802522a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 802540c:	4620      	mov	r0, r4
 802540e:	e70c      	b.n	802522a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 8025410:	2500      	movs	r5, #0
 8025412:	e71e      	b.n	8025252 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x80>
 8025414:	2200      	movs	r2, #0
 8025416:	4615      	mov	r5, r2
 8025418:	e729      	b.n	802526e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 802541a:	4662      	mov	r2, ip
 802541c:	4665      	mov	r5, ip
 802541e:	e726      	b.n	802526e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 8025420:	2200      	movs	r2, #0
 8025422:	e724      	b.n	802526e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 8025424:	4622      	mov	r2, r4
 8025426:	e722      	b.n	802526e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>

08025428 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8025428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802542c:	b09b      	sub	sp, #108	; 0x6c
 802542e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8025432:	9218      	str	r2, [sp, #96]	; 0x60
 8025434:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8025436:	9019      	str	r0, [sp, #100]	; 0x64
 8025438:	9116      	str	r1, [sp, #88]	; 0x58
 802543a:	6850      	ldr	r0, [r2, #4]
 802543c:	9307      	str	r3, [sp, #28]
 802543e:	6812      	ldr	r2, [r2, #0]
 8025440:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8025442:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8025446:	fb00 1303 	mla	r3, r0, r3, r1
 802544a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802544e:	18d3      	adds	r3, r2, r3
 8025450:	930a      	str	r3, [sp, #40]	; 0x28
 8025452:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025454:	681b      	ldr	r3, [r3, #0]
 8025456:	930f      	str	r3, [sp, #60]	; 0x3c
 8025458:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802545a:	685e      	ldr	r6, [r3, #4]
 802545c:	3604      	adds	r6, #4
 802545e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8025460:	2b00      	cmp	r3, #0
 8025462:	dc03      	bgt.n	802546c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 8025464:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8025466:	2b00      	cmp	r3, #0
 8025468:	f340 834f 	ble.w	8025b0a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 802546c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802546e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025472:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8025476:	1e48      	subs	r0, r1, #1
 8025478:	1e57      	subs	r7, r2, #1
 802547a:	9b07      	ldr	r3, [sp, #28]
 802547c:	2b00      	cmp	r3, #0
 802547e:	f340 8178 	ble.w	8025772 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8025482:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8025484:	142b      	asrs	r3, r5, #16
 8025486:	ea5f 4c24 	movs.w	ip, r4, asr #16
 802548a:	d406      	bmi.n	802549a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 802548c:	4584      	cmp	ip, r0
 802548e:	da04      	bge.n	802549a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8025490:	2b00      	cmp	r3, #0
 8025492:	db02      	blt.n	802549a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8025494:	42bb      	cmp	r3, r7
 8025496:	f2c0 816d 	blt.w	8025774 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 802549a:	f11c 0c01 	adds.w	ip, ip, #1
 802549e:	f100 815b 	bmi.w	8025758 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 80254a2:	4561      	cmp	r1, ip
 80254a4:	f2c0 8158 	blt.w	8025758 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 80254a8:	3301      	adds	r3, #1
 80254aa:	f100 8155 	bmi.w	8025758 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 80254ae:	429a      	cmp	r2, r3
 80254b0:	f2c0 8152 	blt.w	8025758 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 80254b4:	9b07      	ldr	r3, [sp, #28]
 80254b6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80254b8:	9317      	str	r3, [sp, #92]	; 0x5c
 80254ba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80254bc:	2b00      	cmp	r3, #0
 80254be:	f340 8178 	ble.w	80257b2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 80254c2:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80254c4:	ea4f 4c25 	mov.w	ip, r5, asr #16
 80254c8:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80254cc:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80254d0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80254d2:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 80254d6:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80254d8:	141b      	asrs	r3, r3, #16
 80254da:	f100 81ba 	bmi.w	8025852 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 80254de:	f101 38ff 	add.w	r8, r1, #4294967295
 80254e2:	4543      	cmp	r3, r8
 80254e4:	f280 81b5 	bge.w	8025852 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 80254e8:	f1bc 0f00 	cmp.w	ip, #0
 80254ec:	f2c0 81b1 	blt.w	8025852 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 80254f0:	f10e 38ff 	add.w	r8, lr, #4294967295
 80254f4:	45c4      	cmp	ip, r8
 80254f6:	f280 81ac 	bge.w	8025852 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 80254fa:	b209      	sxth	r1, r1
 80254fc:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80254fe:	fb0c 3301 	mla	r3, ip, r1, r3
 8025502:	eb04 0803 	add.w	r8, r4, r3
 8025506:	5ce3      	ldrb	r3, [r4, r3]
 8025508:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 802550c:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8025510:	2a00      	cmp	r2, #0
 8025512:	f000 8193 	beq.w	802583c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x414>
 8025516:	f898 c001 	ldrb.w	ip, [r8, #1]
 802551a:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 802551e:	940b      	str	r4, [sp, #44]	; 0x2c
 8025520:	0e24      	lsrs	r4, r4, #24
 8025522:	9412      	str	r4, [sp, #72]	; 0x48
 8025524:	b178      	cbz	r0, 8025546 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8025526:	eb08 0c01 	add.w	ip, r8, r1
 802552a:	f818 1001 	ldrb.w	r1, [r8, r1]
 802552e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8025532:	9108      	str	r1, [sp, #32]
 8025534:	0e09      	lsrs	r1, r1, #24
 8025536:	9110      	str	r1, [sp, #64]	; 0x40
 8025538:	f89c 1001 	ldrb.w	r1, [ip, #1]
 802553c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8025540:	910c      	str	r1, [sp, #48]	; 0x30
 8025542:	0e09      	lsrs	r1, r1, #24
 8025544:	9113      	str	r1, [sp, #76]	; 0x4c
 8025546:	b292      	uxth	r2, r2
 8025548:	9912      	ldr	r1, [sp, #72]	; 0x48
 802554a:	b280      	uxth	r0, r0
 802554c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802554e:	fb02 f900 	mul.w	r9, r2, r0
 8025552:	0112      	lsls	r2, r2, #4
 8025554:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8025558:	eba2 0809 	sub.w	r8, r2, r9
 802555c:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8025560:	b280      	uxth	r0, r0
 8025562:	fa1f f888 	uxth.w	r8, r8
 8025566:	1a12      	subs	r2, r2, r0
 8025568:	fb08 f101 	mul.w	r1, r8, r1
 802556c:	b292      	uxth	r2, r2
 802556e:	fb02 110e 	mla	r1, r2, lr, r1
 8025572:	fb00 1104 	mla	r1, r0, r4, r1
 8025576:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8025578:	fb09 1104 	mla	r1, r9, r4, r1
 802557c:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8025580:	2900      	cmp	r1, #0
 8025582:	f000 80de 	beq.w	8025742 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8025586:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 802558a:	d01b      	beq.n	80255c4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 802558c:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8025590:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025594:	fb0e fa0a 	mul.w	sl, lr, sl
 8025598:	fb0e fe03 	mul.w	lr, lr, r3
 802559c:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80255a0:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80255a4:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 80255a8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80255ac:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80255b0:	4453      	add	r3, sl
 80255b2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80255b6:	0a1b      	lsrs	r3, r3, #8
 80255b8:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80255bc:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80255c0:	ea43 030c 	orr.w	r3, r3, ip
 80255c4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80255c6:	2cff      	cmp	r4, #255	; 0xff
 80255c8:	d021      	beq.n	802560e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 80255ca:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80255cc:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80255d0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80255d2:	fb04 fb0b 	mul.w	fp, r4, fp
 80255d6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80255d8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80255dc:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80255de:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80255e2:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80255e6:	fb04 fa0a 	mul.w	sl, r4, sl
 80255ea:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80255ee:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80255f2:	44de      	add	lr, fp
 80255f4:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80255f8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80255fc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025600:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025604:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025608:	ea4e 040a 	orr.w	r4, lr, sl
 802560c:	940b      	str	r4, [sp, #44]	; 0x2c
 802560e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8025610:	2cff      	cmp	r4, #255	; 0xff
 8025612:	d021      	beq.n	8025658 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 8025614:	9c08      	ldr	r4, [sp, #32]
 8025616:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 802561a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802561c:	fb04 fb0b 	mul.w	fp, r4, fp
 8025620:	9c08      	ldr	r4, [sp, #32]
 8025622:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8025626:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8025628:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802562c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8025630:	fb04 fa0a 	mul.w	sl, r4, sl
 8025634:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025638:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802563c:	44de      	add	lr, fp
 802563e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8025642:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025646:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802564a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802564e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025652:	ea4e 040a 	orr.w	r4, lr, sl
 8025656:	9408      	str	r4, [sp, #32]
 8025658:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802565a:	2cff      	cmp	r4, #255	; 0xff
 802565c:	d021      	beq.n	80256a2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 802565e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8025660:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8025664:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8025666:	fb04 fb0b 	mul.w	fp, r4, fp
 802566a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802566c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8025670:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8025672:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8025676:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802567a:	fb04 fa0a 	mul.w	sl, r4, sl
 802567e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025682:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8025686:	44de      	add	lr, fp
 8025688:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802568c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025690:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025694:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025698:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802569c:	ea4e 040a 	orr.w	r4, lr, sl
 80256a0:	940c      	str	r4, [sp, #48]	; 0x30
 80256a2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80256a4:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 80256a8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80256ac:	43c9      	mvns	r1, r1
 80256ae:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80256b2:	9c08      	ldr	r4, [sp, #32]
 80256b4:	b2c9      	uxtb	r1, r1
 80256b6:	fb08 fc0c 	mul.w	ip, r8, ip
 80256ba:	fb02 cc0e 	mla	ip, r2, lr, ip
 80256be:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80256c2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80256c4:	fb00 cc0e 	mla	ip, r0, lr, ip
 80256c8:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80256cc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80256ce:	fb09 cc0e 	mla	ip, r9, lr, ip
 80256d2:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 80256d6:	fb08 f80e 	mul.w	r8, r8, lr
 80256da:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80256de:	fb02 8303 	mla	r3, r2, r3, r8
 80256e2:	9a08      	ldr	r2, [sp, #32]
 80256e4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80256e8:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 80256ec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80256ee:	fb00 330a 	mla	r3, r0, sl, r3
 80256f2:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 80256f6:	fb09 3900 	mla	r9, r9, r0, r3
 80256fa:	783b      	ldrb	r3, [r7, #0]
 80256fc:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8025700:	fb03 f201 	mul.w	r2, r3, r1
 8025704:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8025708:	1c53      	adds	r3, r2, #1
 802570a:	ea4c 0c09 	orr.w	ip, ip, r9
 802570e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8025712:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8025716:	703b      	strb	r3, [r7, #0]
 8025718:	787b      	ldrb	r3, [r7, #1]
 802571a:	434b      	muls	r3, r1
 802571c:	1c5a      	adds	r2, r3, #1
 802571e:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8025722:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8025726:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 802572a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802572e:	707b      	strb	r3, [r7, #1]
 8025730:	78bb      	ldrb	r3, [r7, #2]
 8025732:	4359      	muls	r1, r3
 8025734:	1c4b      	adds	r3, r1, #1
 8025736:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 802573a:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 802573e:	f887 c002 	strb.w	ip, [r7, #2]
 8025742:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8025744:	3703      	adds	r7, #3
 8025746:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8025748:	441a      	add	r2, r3
 802574a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802574c:	441d      	add	r5, r3
 802574e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8025750:	9225      	str	r2, [sp, #148]	; 0x94
 8025752:	3b01      	subs	r3, #1
 8025754:	9317      	str	r3, [sp, #92]	; 0x5c
 8025756:	e6b0      	b.n	80254ba <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8025758:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802575a:	9c25      	ldr	r4, [sp, #148]	; 0x94
 802575c:	441c      	add	r4, r3
 802575e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025760:	441d      	add	r5, r3
 8025762:	9b07      	ldr	r3, [sp, #28]
 8025764:	9425      	str	r4, [sp, #148]	; 0x94
 8025766:	3b01      	subs	r3, #1
 8025768:	9307      	str	r3, [sp, #28]
 802576a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802576c:	3303      	adds	r3, #3
 802576e:	930a      	str	r3, [sp, #40]	; 0x28
 8025770:	e683      	b.n	802547a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8025772:	d026      	beq.n	80257c2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
 8025774:	9b07      	ldr	r3, [sp, #28]
 8025776:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8025778:	3b01      	subs	r3, #1
 802577a:	9c25      	ldr	r4, [sp, #148]	; 0x94
 802577c:	fb00 4003 	mla	r0, r0, r3, r4
 8025780:	1400      	asrs	r0, r0, #16
 8025782:	f53f ae97 	bmi.w	80254b4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8025786:	3901      	subs	r1, #1
 8025788:	4288      	cmp	r0, r1
 802578a:	f6bf ae93 	bge.w	80254b4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 802578e:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8025790:	fb01 5303 	mla	r3, r1, r3, r5
 8025794:	141b      	asrs	r3, r3, #16
 8025796:	f53f ae8d 	bmi.w	80254b4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 802579a:	3a01      	subs	r2, #1
 802579c:	4293      	cmp	r3, r2
 802579e:	f6bf ae89 	bge.w	80254b4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 80257a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80257a4:	f8dd b01c 	ldr.w	fp, [sp, #28]
 80257a8:	f103 0e03 	add.w	lr, r3, #3
 80257ac:	f1bb 0f00 	cmp.w	fp, #0
 80257b0:	dc6d      	bgt.n	802588e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x466>
 80257b2:	9b07      	ldr	r3, [sp, #28]
 80257b4:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80257b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80257ba:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80257be:	4423      	add	r3, r4
 80257c0:	930a      	str	r3, [sp, #40]	; 0x28
 80257c2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80257c4:	2b00      	cmp	r3, #0
 80257c6:	f340 81a0 	ble.w	8025b0a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 80257ca:	ee30 0a04 	vadd.f32	s0, s0, s8
 80257ce:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80257d0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80257d4:	eeb0 6a62 	vmov.f32	s12, s5
 80257d8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80257dc:	ee31 1a05 	vadd.f32	s2, s2, s10
 80257e0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80257e4:	ed8d 6a25 	vstr	s12, [sp, #148]	; 0x94
 80257e8:	eeb0 6a43 	vmov.f32	s12, s6
 80257ec:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80257f0:	ee16 5a10 	vmov	r5, s12
 80257f4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80257f8:	ee61 7a27 	vmul.f32	s15, s2, s15
 80257fc:	ee77 2a62 	vsub.f32	s5, s14, s5
 8025800:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8025804:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8025808:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802580c:	ee12 2a90 	vmov	r2, s5
 8025810:	eef0 2a47 	vmov.f32	s5, s14
 8025814:	fb92 f3f3 	sdiv	r3, r2, r3
 8025818:	ee13 2a10 	vmov	r2, s6
 802581c:	9327      	str	r3, [sp, #156]	; 0x9c
 802581e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025820:	eeb0 3a67 	vmov.f32	s6, s15
 8025824:	fb92 f3f3 	sdiv	r3, r2, r3
 8025828:	9328      	str	r3, [sp, #160]	; 0xa0
 802582a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802582c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 802582e:	3b01      	subs	r3, #1
 8025830:	9316      	str	r3, [sp, #88]	; 0x58
 8025832:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025834:	bf08      	it	eq
 8025836:	4613      	moveq	r3, r2
 8025838:	9307      	str	r3, [sp, #28]
 802583a:	e610      	b.n	802545e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 802583c:	2800      	cmp	r0, #0
 802583e:	f43f ae82 	beq.w	8025546 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8025842:	f818 1001 	ldrb.w	r1, [r8, r1]
 8025846:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802584a:	9108      	str	r1, [sp, #32]
 802584c:	0e09      	lsrs	r1, r1, #24
 802584e:	9110      	str	r1, [sp, #64]	; 0x40
 8025850:	e679      	b.n	8025546 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8025852:	f113 0801 	adds.w	r8, r3, #1
 8025856:	f53f af74 	bmi.w	8025742 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 802585a:	4541      	cmp	r1, r8
 802585c:	f6ff af71 	blt.w	8025742 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8025860:	f11c 0801 	adds.w	r8, ip, #1
 8025864:	f53f af6d 	bmi.w	8025742 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8025868:	45c6      	cmp	lr, r8
 802586a:	f6ff af6a 	blt.w	8025742 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 802586e:	b209      	sxth	r1, r1
 8025870:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8025874:	fa0f f38e 	sxth.w	r3, lr
 8025878:	9100      	str	r1, [sp, #0]
 802587a:	4639      	mov	r1, r7
 802587c:	9301      	str	r3, [sp, #4]
 802587e:	4633      	mov	r3, r6
 8025880:	e9cd 2004 	strd	r2, r0, [sp, #16]
 8025884:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8025886:	9819      	ldr	r0, [sp, #100]	; 0x64
 8025888:	f7ff fca3 	bl	80251d2 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 802588c:	e759      	b.n	8025742 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 802588e:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8025890:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8025894:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8025896:	f3c3 3203 	ubfx	r2, r3, #12, #4
 802589a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802589c:	1427      	asrs	r7, r4, #16
 802589e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80258a0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80258a4:	142b      	asrs	r3, r5, #16
 80258a6:	fb01 7303 	mla	r3, r1, r3, r7
 80258aa:	18e7      	adds	r7, r4, r3
 80258ac:	5ce3      	ldrb	r3, [r4, r3]
 80258ae:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80258b2:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80258b6:	2a00      	cmp	r2, #0
 80258b8:	f000 811d 	beq.w	8025af6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ce>
 80258bc:	f897 8001 	ldrb.w	r8, [r7, #1]
 80258c0:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 80258c4:	940d      	str	r4, [sp, #52]	; 0x34
 80258c6:	0e24      	lsrs	r4, r4, #24
 80258c8:	9414      	str	r4, [sp, #80]	; 0x50
 80258ca:	b170      	cbz	r0, 80258ea <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 80258cc:	eb07 0801 	add.w	r8, r7, r1
 80258d0:	5c79      	ldrb	r1, [r7, r1]
 80258d2:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80258d6:	9109      	str	r1, [sp, #36]	; 0x24
 80258d8:	0e09      	lsrs	r1, r1, #24
 80258da:	9111      	str	r1, [sp, #68]	; 0x44
 80258dc:	f898 1001 	ldrb.w	r1, [r8, #1]
 80258e0:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80258e4:	910e      	str	r1, [sp, #56]	; 0x38
 80258e6:	0e09      	lsrs	r1, r1, #24
 80258e8:	9115      	str	r1, [sp, #84]	; 0x54
 80258ea:	b292      	uxth	r2, r2
 80258ec:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80258ee:	b280      	uxth	r0, r0
 80258f0:	fb02 f900 	mul.w	r9, r2, r0
 80258f4:	0112      	lsls	r2, r2, #4
 80258f6:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80258fa:	eba2 0809 	sub.w	r8, r2, r9
 80258fe:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8025902:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8025904:	b280      	uxth	r0, r0
 8025906:	fa1f f888 	uxth.w	r8, r8
 802590a:	1a09      	subs	r1, r1, r0
 802590c:	fb08 f202 	mul.w	r2, r8, r2
 8025910:	b289      	uxth	r1, r1
 8025912:	fb01 220c 	mla	r2, r1, ip, r2
 8025916:	fb00 2204 	mla	r2, r0, r4, r2
 802591a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 802591c:	fb09 2204 	mla	r2, r9, r4, r2
 8025920:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8025924:	2a00      	cmp	r2, #0
 8025926:	f000 80db 	beq.w	8025ae0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 802592a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 802592e:	d019      	beq.n	8025964 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53c>
 8025930:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8025934:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025938:	fb0c fa0a 	mul.w	sl, ip, sl
 802593c:	fb0c fc03 	mul.w	ip, ip, r3
 8025940:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8025944:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8025948:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 802594c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8025950:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8025954:	4453      	add	r3, sl
 8025956:	0a3f      	lsrs	r7, r7, #8
 8025958:	0a1b      	lsrs	r3, r3, #8
 802595a:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802595e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8025962:	433b      	orrs	r3, r7
 8025964:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8025966:	2cff      	cmp	r4, #255	; 0xff
 8025968:	d020      	beq.n	80259ac <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x584>
 802596a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802596c:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8025970:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8025972:	4367      	muls	r7, r4
 8025974:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8025976:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802597a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802597e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8025980:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8025984:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025988:	fb04 fa0a 	mul.w	sl, r4, sl
 802598c:	44bc      	add	ip, r7
 802598e:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8025992:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025996:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802599a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802599e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80259a2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80259a6:	ea4c 040a 	orr.w	r4, ip, sl
 80259aa:	940d      	str	r4, [sp, #52]	; 0x34
 80259ac:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80259ae:	2cff      	cmp	r4, #255	; 0xff
 80259b0:	d020      	beq.n	80259f4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5cc>
 80259b2:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80259b4:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80259b8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80259ba:	4367      	muls	r7, r4
 80259bc:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80259be:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80259c2:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80259c6:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80259c8:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80259cc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80259d0:	fb04 fa0a 	mul.w	sl, r4, sl
 80259d4:	44bc      	add	ip, r7
 80259d6:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80259da:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80259de:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80259e2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80259e6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80259ea:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80259ee:	ea4c 040a 	orr.w	r4, ip, sl
 80259f2:	9409      	str	r4, [sp, #36]	; 0x24
 80259f4:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80259f6:	2cff      	cmp	r4, #255	; 0xff
 80259f8:	d020      	beq.n	8025a3c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x614>
 80259fa:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80259fc:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8025a00:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8025a02:	4367      	muls	r7, r4
 8025a04:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8025a06:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8025a0a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8025a0e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8025a10:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8025a14:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025a18:	fb04 fa0a 	mul.w	sl, r4, sl
 8025a1c:	44bc      	add	ip, r7
 8025a1e:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8025a22:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025a26:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8025a2a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025a2e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025a32:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025a36:	ea4c 040a 	orr.w	r4, ip, sl
 8025a3a:	940e      	str	r4, [sp, #56]	; 0x38
 8025a3c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8025a3e:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8025a42:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025a46:	43d2      	mvns	r2, r2
 8025a48:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8025a4c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8025a4e:	b2d2      	uxtb	r2, r2
 8025a50:	fb08 f707 	mul.w	r7, r8, r7
 8025a54:	fb01 770c 	mla	r7, r1, ip, r7
 8025a58:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8025a5c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8025a5e:	fb00 770c 	mla	r7, r0, ip, r7
 8025a62:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8025a66:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8025a68:	fb09 770c 	mla	r7, r9, ip, r7
 8025a6c:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8025a70:	fb08 f80c 	mul.w	r8, r8, ip
 8025a74:	0a3f      	lsrs	r7, r7, #8
 8025a76:	fb01 8303 	mla	r3, r1, r3, r8
 8025a7a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8025a7c:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8025a80:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8025a84:	990e      	ldr	r1, [sp, #56]	; 0x38
 8025a86:	fb00 330a 	mla	r3, r0, sl, r3
 8025a8a:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8025a8e:	fb09 3c0c 	mla	ip, r9, ip, r3
 8025a92:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8025a96:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025a9a:	fb03 f102 	mul.w	r1, r3, r2
 8025a9e:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8025aa2:	1c4b      	adds	r3, r1, #1
 8025aa4:	ea47 070c 	orr.w	r7, r7, ip
 8025aa8:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8025aac:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 8025ab0:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8025ab4:	f81e 3c02 	ldrb.w	r3, [lr, #-2]
 8025ab8:	4353      	muls	r3, r2
 8025aba:	1c59      	adds	r1, r3, #1
 8025abc:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8025ac0:	0a3b      	lsrs	r3, r7, #8
 8025ac2:	0c3f      	lsrs	r7, r7, #16
 8025ac4:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8025ac8:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8025acc:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8025ad0:	435a      	muls	r2, r3
 8025ad2:	1c53      	adds	r3, r2, #1
 8025ad4:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8025ad8:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8025adc:	f80e 7c01 	strb.w	r7, [lr, #-1]
 8025ae0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8025ae2:	f10e 0e03 	add.w	lr, lr, #3
 8025ae6:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8025ae8:	f10b 3bff 	add.w	fp, fp, #4294967295
 8025aec:	441a      	add	r2, r3
 8025aee:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025af0:	9225      	str	r2, [sp, #148]	; 0x94
 8025af2:	441d      	add	r5, r3
 8025af4:	e65a      	b.n	80257ac <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 8025af6:	2800      	cmp	r0, #0
 8025af8:	f43f aef7 	beq.w	80258ea <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8025afc:	5c79      	ldrb	r1, [r7, r1]
 8025afe:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8025b02:	9109      	str	r1, [sp, #36]	; 0x24
 8025b04:	0e09      	lsrs	r1, r1, #24
 8025b06:	9111      	str	r1, [sp, #68]	; 0x44
 8025b08:	e6ef      	b.n	80258ea <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8025b0a:	b01b      	add	sp, #108	; 0x6c
 8025b0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08025b10 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 8025b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025b14:	b08d      	sub	sp, #52	; 0x34
 8025b16:	468b      	mov	fp, r1
 8025b18:	e9dd 5c17 	ldrd	r5, ip, [sp, #92]	; 0x5c
 8025b1c:	f89d 106c 	ldrb.w	r1, [sp, #108]	; 0x6c
 8025b20:	fb0c 5703 	mla	r7, ip, r3, r5
 8025b24:	f1bc 0f00 	cmp.w	ip, #0
 8025b28:	910b      	str	r1, [sp, #44]	; 0x2c
 8025b2a:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8025b2e:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 8025b32:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
 8025b36:	f89d a068 	ldrb.w	sl, [sp, #104]	; 0x68
 8025b3a:	eb02 0607 	add.w	r6, r2, r7
 8025b3e:	f89b 4000 	ldrb.w	r4, [fp]
 8025b42:	f89b 0001 	ldrb.w	r0, [fp, #1]
 8025b46:	f89b 1002 	ldrb.w	r1, [fp, #2]
 8025b4a:	f2c0 80c1 	blt.w	8025cd0 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 8025b4e:	45e6      	cmp	lr, ip
 8025b50:	f340 80be 	ble.w	8025cd0 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 8025b54:	2d00      	cmp	r5, #0
 8025b56:	f2c0 80b7 	blt.w	8025cc8 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 8025b5a:	42ab      	cmp	r3, r5
 8025b5c:	f340 80b4 	ble.w	8025cc8 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 8025b60:	5dd2      	ldrb	r2, [r2, r7]
 8025b62:	9205      	str	r2, [sp, #20]
 8025b64:	7872      	ldrb	r2, [r6, #1]
 8025b66:	9206      	str	r2, [sp, #24]
 8025b68:	78b2      	ldrb	r2, [r6, #2]
 8025b6a:	9207      	str	r2, [sp, #28]
 8025b6c:	1c6a      	adds	r2, r5, #1
 8025b6e:	f100 80b6 	bmi.w	8025cde <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 8025b72:	4293      	cmp	r3, r2
 8025b74:	f340 80b3 	ble.w	8025cde <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 8025b78:	f1b8 0f00 	cmp.w	r8, #0
 8025b7c:	f000 80af 	beq.w	8025cde <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 8025b80:	78f2      	ldrb	r2, [r6, #3]
 8025b82:	9201      	str	r2, [sp, #4]
 8025b84:	7932      	ldrb	r2, [r6, #4]
 8025b86:	9202      	str	r2, [sp, #8]
 8025b88:	7972      	ldrb	r2, [r6, #5]
 8025b8a:	9203      	str	r2, [sp, #12]
 8025b8c:	f11c 0c01 	adds.w	ip, ip, #1
 8025b90:	f100 80ad 	bmi.w	8025cee <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 8025b94:	45e6      	cmp	lr, ip
 8025b96:	f340 80aa 	ble.w	8025cee <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 8025b9a:	f1ba 0f00 	cmp.w	sl, #0
 8025b9e:	f000 80a6 	beq.w	8025cee <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 8025ba2:	2d00      	cmp	r5, #0
 8025ba4:	f2c0 809f 	blt.w	8025ce6 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 8025ba8:	42ab      	cmp	r3, r5
 8025baa:	f340 809c 	ble.w	8025ce6 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 8025bae:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8025bb2:	f816 9002 	ldrb.w	r9, [r6, r2]
 8025bb6:	2203      	movs	r2, #3
 8025bb8:	fb03 6c02 	mla	ip, r3, r2, r6
 8025bbc:	f89c 7001 	ldrb.w	r7, [ip, #1]
 8025bc0:	f89c e002 	ldrb.w	lr, [ip, #2]
 8025bc4:	9704      	str	r7, [sp, #16]
 8025bc6:	3501      	adds	r5, #1
 8025bc8:	f100 8098 	bmi.w	8025cfc <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 8025bcc:	42ab      	cmp	r3, r5
 8025bce:	f340 8095 	ble.w	8025cfc <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 8025bd2:	f1b8 0f00 	cmp.w	r8, #0
 8025bd6:	f000 8091 	beq.w	8025cfc <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 8025bda:	f04f 0c03 	mov.w	ip, #3
 8025bde:	fb13 c20c 	smlabb	r2, r3, ip, ip
 8025be2:	5cb5      	ldrb	r5, [r6, r2]
 8025be4:	fb03 620c 	mla	r2, r3, ip, r6
 8025be8:	fb03 630c 	mla	r3, r3, ip, r6
 8025bec:	7912      	ldrb	r2, [r2, #4]
 8025bee:	795e      	ldrb	r6, [r3, #5]
 8025bf0:	fa1f f388 	uxth.w	r3, r8
 8025bf4:	fa1f fc8a 	uxth.w	ip, sl
 8025bf8:	fb03 f70c 	mul.w	r7, r3, ip
 8025bfc:	011b      	lsls	r3, r3, #4
 8025bfe:	9708      	str	r7, [sp, #32]
 8025c00:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 8025c04:	f5c3 7a80 	rsb	sl, r3, #256	; 0x100
 8025c08:	1bdb      	subs	r3, r3, r7
 8025c0a:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
 8025c0e:	fa1f fc8c 	uxth.w	ip, ip
 8025c12:	b29b      	uxth	r3, r3
 8025c14:	9709      	str	r7, [sp, #36]	; 0x24
 8025c16:	ebaa 0a0c 	sub.w	sl, sl, ip
 8025c1a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8025c1c:	930a      	str	r3, [sp, #40]	; 0x28
 8025c1e:	fa1f fa8a 	uxth.w	sl, sl
 8025c22:	ea6f 0807 	mvn.w	r8, r7
 8025c26:	9f01      	ldr	r7, [sp, #4]
 8025c28:	435f      	muls	r7, r3
 8025c2a:	9b05      	ldr	r3, [sp, #20]
 8025c2c:	fa5f f888 	uxtb.w	r8, r8
 8025c30:	fb0a 7703 	mla	r7, sl, r3, r7
 8025c34:	9b08      	ldr	r3, [sp, #32]
 8025c36:	fb14 f408 	smulbb	r4, r4, r8
 8025c3a:	fb0c 7709 	mla	r7, ip, r9, r7
 8025c3e:	fb10 f008 	smulbb	r0, r0, r8
 8025c42:	fb11 f108 	smulbb	r1, r1, r8
 8025c46:	fb03 7705 	mla	r7, r3, r5, r7
 8025c4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025c4c:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8025c50:	fb07 4703 	mla	r7, r7, r3, r4
 8025c54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025c56:	b2bf      	uxth	r7, r7
 8025c58:	1c7c      	adds	r4, r7, #1
 8025c5a:	eb04 2417 	add.w	r4, r4, r7, lsr #8
 8025c5e:	1224      	asrs	r4, r4, #8
 8025c60:	f88b 4000 	strb.w	r4, [fp]
 8025c64:	9c02      	ldr	r4, [sp, #8]
 8025c66:	435c      	muls	r4, r3
 8025c68:	9b06      	ldr	r3, [sp, #24]
 8025c6a:	fb0a 4403 	mla	r4, sl, r3, r4
 8025c6e:	9b04      	ldr	r3, [sp, #16]
 8025c70:	fb0c 4403 	mla	r4, ip, r3, r4
 8025c74:	9b08      	ldr	r3, [sp, #32]
 8025c76:	fb03 4402 	mla	r4, r3, r2, r4
 8025c7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025c7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8025c7e:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8025c82:	fb04 0403 	mla	r4, r4, r3, r0
 8025c86:	9b03      	ldr	r3, [sp, #12]
 8025c88:	435a      	muls	r2, r3
 8025c8a:	b2a4      	uxth	r4, r4
 8025c8c:	4613      	mov	r3, r2
 8025c8e:	9a07      	ldr	r2, [sp, #28]
 8025c90:	1c60      	adds	r0, r4, #1
 8025c92:	fb0a 3a02 	mla	sl, sl, r2, r3
 8025c96:	9b08      	ldr	r3, [sp, #32]
 8025c98:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 8025c9c:	fb0c ac0e 	mla	ip, ip, lr, sl
 8025ca0:	1224      	asrs	r4, r4, #8
 8025ca2:	fb03 c606 	mla	r6, r3, r6, ip
 8025ca6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025ca8:	f88b 4001 	strb.w	r4, [fp, #1]
 8025cac:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8025cb0:	fb06 1103 	mla	r1, r6, r3, r1
 8025cb4:	b289      	uxth	r1, r1
 8025cb6:	1c4e      	adds	r6, r1, #1
 8025cb8:	eb06 2111 	add.w	r1, r6, r1, lsr #8
 8025cbc:	1209      	asrs	r1, r1, #8
 8025cbe:	f88b 1002 	strb.w	r1, [fp, #2]
 8025cc2:	b00d      	add	sp, #52	; 0x34
 8025cc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025cc8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8025ccc:	9405      	str	r4, [sp, #20]
 8025cce:	e74d      	b.n	8025b6c <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x5c>
 8025cd0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8025cd4:	9401      	str	r4, [sp, #4]
 8025cd6:	9405      	str	r4, [sp, #20]
 8025cd8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8025cdc:	e756      	b.n	8025b8c <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 8025cde:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8025ce2:	9401      	str	r4, [sp, #4]
 8025ce4:	e752      	b.n	8025b8c <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 8025ce6:	468e      	mov	lr, r1
 8025ce8:	9004      	str	r0, [sp, #16]
 8025cea:	46a1      	mov	r9, r4
 8025cec:	e76b      	b.n	8025bc6 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xb6>
 8025cee:	460e      	mov	r6, r1
 8025cf0:	4602      	mov	r2, r0
 8025cf2:	4625      	mov	r5, r4
 8025cf4:	468e      	mov	lr, r1
 8025cf6:	9004      	str	r0, [sp, #16]
 8025cf8:	46a1      	mov	r9, r4
 8025cfa:	e779      	b.n	8025bf0 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>
 8025cfc:	460e      	mov	r6, r1
 8025cfe:	4602      	mov	r2, r0
 8025d00:	4625      	mov	r5, r4
 8025d02:	e775      	b.n	8025bf0 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>

08025d04 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8025d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025d08:	b09f      	sub	sp, #124	; 0x7c
 8025d0a:	920e      	str	r2, [sp, #56]	; 0x38
 8025d0c:	9307      	str	r3, [sp, #28]
 8025d0e:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8025d10:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 8025d14:	901d      	str	r0, [sp, #116]	; 0x74
 8025d16:	930c      	str	r3, [sp, #48]	; 0x30
 8025d18:	6850      	ldr	r0, [r2, #4]
 8025d1a:	910b      	str	r1, [sp, #44]	; 0x2c
 8025d1c:	6812      	ldr	r2, [r2, #0]
 8025d1e:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8025d22:	e9dd a829 	ldrd	sl, r8, [sp, #164]	; 0xa4
 8025d26:	fb00 1303 	mla	r3, r0, r3, r1
 8025d2a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8025d2e:	18d3      	adds	r3, r2, r3
 8025d30:	9308      	str	r3, [sp, #32]
 8025d32:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8025d34:	681b      	ldr	r3, [r3, #0]
 8025d36:	930a      	str	r3, [sp, #40]	; 0x28
 8025d38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8025d3a:	43db      	mvns	r3, r3
 8025d3c:	b2db      	uxtb	r3, r3
 8025d3e:	9309      	str	r3, [sp, #36]	; 0x24
 8025d40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025d42:	2b00      	cmp	r3, #0
 8025d44:	dc03      	bgt.n	8025d4e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8025d46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8025d48:	2b00      	cmp	r3, #0
 8025d4a:	f340 81f5 	ble.w	8026138 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 8025d4e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8025d50:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025d54:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8025d58:	1e48      	subs	r0, r1, #1
 8025d5a:	1e54      	subs	r4, r2, #1
 8025d5c:	9b07      	ldr	r3, [sp, #28]
 8025d5e:	2b00      	cmp	r3, #0
 8025d60:	f340 80d5 	ble.w	8025f0e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 8025d64:	ea5f 452a 	movs.w	r5, sl, asr #16
 8025d68:	ea4f 4328 	mov.w	r3, r8, asr #16
 8025d6c:	d406      	bmi.n	8025d7c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8025d6e:	4285      	cmp	r5, r0
 8025d70:	da04      	bge.n	8025d7c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8025d72:	2b00      	cmp	r3, #0
 8025d74:	db02      	blt.n	8025d7c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8025d76:	42a3      	cmp	r3, r4
 8025d78:	f2c0 80ca 	blt.w	8025f10 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8025d7c:	3501      	adds	r5, #1
 8025d7e:	f100 80bb 	bmi.w	8025ef8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 8025d82:	42a9      	cmp	r1, r5
 8025d84:	f2c0 80b8 	blt.w	8025ef8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 8025d88:	3301      	adds	r3, #1
 8025d8a:	f100 80b5 	bmi.w	8025ef8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 8025d8e:	429a      	cmp	r2, r3
 8025d90:	f2c0 80b2 	blt.w	8025ef8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 8025d94:	9b07      	ldr	r3, [sp, #28]
 8025d96:	9d08      	ldr	r5, [sp, #32]
 8025d98:	930d      	str	r3, [sp, #52]	; 0x34
 8025d9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8025d9c:	2b00      	cmp	r3, #0
 8025d9e:	f340 80d6 	ble.w	8025f4e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24a>
 8025da2:	9830      	ldr	r0, [sp, #192]	; 0xc0
 8025da4:	ea4f 4428 	mov.w	r4, r8, asr #16
 8025da8:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8025daa:	f3ca 3203 	ubfx	r2, sl, #12, #4
 8025dae:	68c6      	ldr	r6, [r0, #12]
 8025db0:	ea5f 402a 	movs.w	r0, sl, asr #16
 8025db4:	f3c8 3103 	ubfx	r1, r8, #12, #4
 8025db8:	689b      	ldr	r3, [r3, #8]
 8025dba:	f100 810f 	bmi.w	8025fdc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8025dbe:	1e5f      	subs	r7, r3, #1
 8025dc0:	42b8      	cmp	r0, r7
 8025dc2:	f280 810b 	bge.w	8025fdc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8025dc6:	2c00      	cmp	r4, #0
 8025dc8:	f2c0 8108 	blt.w	8025fdc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8025dcc:	1e77      	subs	r7, r6, #1
 8025dce:	42bc      	cmp	r4, r7
 8025dd0:	f280 8104 	bge.w	8025fdc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8025dd4:	b21b      	sxth	r3, r3
 8025dd6:	fb04 0003 	mla	r0, r4, r3, r0
 8025dda:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8025ddc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8025de0:	1826      	adds	r6, r4, r0
 8025de2:	5c24      	ldrb	r4, [r4, r0]
 8025de4:	78b7      	ldrb	r7, [r6, #2]
 8025de6:	7870      	ldrb	r0, [r6, #1]
 8025de8:	970f      	str	r7, [sp, #60]	; 0x3c
 8025dea:	7977      	ldrb	r7, [r6, #5]
 8025dec:	f896 e003 	ldrb.w	lr, [r6, #3]
 8025df0:	f896 c004 	ldrb.w	ip, [r6, #4]
 8025df4:	9710      	str	r7, [sp, #64]	; 0x40
 8025df6:	b1c9      	cbz	r1, 8025e2c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 8025df8:	f04f 0b03 	mov.w	fp, #3
 8025dfc:	f06f 0904 	mvn.w	r9, #4
 8025e00:	3605      	adds	r6, #5
 8025e02:	fb13 930b 	smlabb	r3, r3, fp, r9
 8025e06:	eb06 0b03 	add.w	fp, r6, r3
 8025e0a:	5cf3      	ldrb	r3, [r6, r3]
 8025e0c:	9311      	str	r3, [sp, #68]	; 0x44
 8025e0e:	f89b 3001 	ldrb.w	r3, [fp, #1]
 8025e12:	9313      	str	r3, [sp, #76]	; 0x4c
 8025e14:	f89b 3002 	ldrb.w	r3, [fp, #2]
 8025e18:	9315      	str	r3, [sp, #84]	; 0x54
 8025e1a:	f89b 3003 	ldrb.w	r3, [fp, #3]
 8025e1e:	9312      	str	r3, [sp, #72]	; 0x48
 8025e20:	f89b 3004 	ldrb.w	r3, [fp, #4]
 8025e24:	9314      	str	r3, [sp, #80]	; 0x50
 8025e26:	f89b 3005 	ldrb.w	r3, [fp, #5]
 8025e2a:	9316      	str	r3, [sp, #88]	; 0x58
 8025e2c:	b292      	uxth	r2, r2
 8025e2e:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8025e30:	b289      	uxth	r1, r1
 8025e32:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 8025e36:	fb02 f601 	mul.w	r6, r2, r1
 8025e3a:	0112      	lsls	r2, r2, #4
 8025e3c:	ebc6 1101 	rsb	r1, r6, r1, lsl #4
 8025e40:	f5c2 7980 	rsb	r9, r2, #256	; 0x100
 8025e44:	1b92      	subs	r2, r2, r6
 8025e46:	b289      	uxth	r1, r1
 8025e48:	b292      	uxth	r2, r2
 8025e4a:	eba9 0901 	sub.w	r9, r9, r1
 8025e4e:	fb02 fe0e 	mul.w	lr, r2, lr
 8025e52:	fa1f f989 	uxth.w	r9, r9
 8025e56:	fb02 fc0c 	mul.w	ip, r2, ip
 8025e5a:	fb09 e404 	mla	r4, r9, r4, lr
 8025e5e:	f895 e000 	ldrb.w	lr, [r5]
 8025e62:	fb09 c000 	mla	r0, r9, r0, ip
 8025e66:	fb01 4407 	mla	r4, r1, r7, r4
 8025e6a:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8025e6c:	fb06 4407 	mla	r4, r6, r7, r4
 8025e70:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8025e72:	fb1e fe07 	smulbb	lr, lr, r7
 8025e76:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8025e7a:	fb04 e403 	mla	r4, r4, r3, lr
 8025e7e:	b2a4      	uxth	r4, r4
 8025e80:	f104 0e01 	add.w	lr, r4, #1
 8025e84:	eb0e 2e14 	add.w	lr, lr, r4, lsr #8
 8025e88:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8025e8a:	fb01 0004 	mla	r0, r1, r4, r0
 8025e8e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8025e90:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8025e94:	fb06 0004 	mla	r0, r6, r4, r0
 8025e98:	786c      	ldrb	r4, [r5, #1]
 8025e9a:	f885 e000 	strb.w	lr, [r5]
 8025e9e:	fb14 f407 	smulbb	r4, r4, r7
 8025ea2:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8025ea6:	fb00 4003 	mla	r0, r0, r3, r4
 8025eaa:	b280      	uxth	r0, r0
 8025eac:	1c44      	adds	r4, r0, #1
 8025eae:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 8025eb2:	1200      	asrs	r0, r0, #8
 8025eb4:	7068      	strb	r0, [r5, #1]
 8025eb6:	9810      	ldr	r0, [sp, #64]	; 0x40
 8025eb8:	4342      	muls	r2, r0
 8025eba:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8025ebc:	fb09 2200 	mla	r2, r9, r0, r2
 8025ec0:	9815      	ldr	r0, [sp, #84]	; 0x54
 8025ec2:	fb01 2100 	mla	r1, r1, r0, r2
 8025ec6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8025ec8:	fb06 1602 	mla	r6, r6, r2, r1
 8025ecc:	78a9      	ldrb	r1, [r5, #2]
 8025ece:	fb11 f107 	smulbb	r1, r1, r7
 8025ed2:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8025ed6:	fb06 1303 	mla	r3, r6, r3, r1
 8025eda:	b29b      	uxth	r3, r3
 8025edc:	1c5e      	adds	r6, r3, #1
 8025ede:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 8025ee2:	121b      	asrs	r3, r3, #8
 8025ee4:	70ab      	strb	r3, [r5, #2]
 8025ee6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8025ee8:	3503      	adds	r5, #3
 8025eea:	449a      	add	sl, r3
 8025eec:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025eee:	4498      	add	r8, r3
 8025ef0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8025ef2:	3b01      	subs	r3, #1
 8025ef4:	930d      	str	r3, [sp, #52]	; 0x34
 8025ef6:	e750      	b.n	8025d9a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8025ef8:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8025efa:	449a      	add	sl, r3
 8025efc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025efe:	4498      	add	r8, r3
 8025f00:	9b07      	ldr	r3, [sp, #28]
 8025f02:	3b01      	subs	r3, #1
 8025f04:	9307      	str	r3, [sp, #28]
 8025f06:	9b08      	ldr	r3, [sp, #32]
 8025f08:	3303      	adds	r3, #3
 8025f0a:	9308      	str	r3, [sp, #32]
 8025f0c:	e726      	b.n	8025d5c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8025f0e:	d026      	beq.n	8025f5e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 8025f10:	9b07      	ldr	r3, [sp, #28]
 8025f12:	982b      	ldr	r0, [sp, #172]	; 0xac
 8025f14:	3b01      	subs	r3, #1
 8025f16:	fb00 a003 	mla	r0, r0, r3, sl
 8025f1a:	1400      	asrs	r0, r0, #16
 8025f1c:	f53f af3a 	bmi.w	8025d94 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8025f20:	3901      	subs	r1, #1
 8025f22:	4288      	cmp	r0, r1
 8025f24:	f6bf af36 	bge.w	8025d94 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8025f28:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8025f2a:	fb01 8303 	mla	r3, r1, r3, r8
 8025f2e:	141b      	asrs	r3, r3, #16
 8025f30:	f53f af30 	bmi.w	8025d94 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8025f34:	3a01      	subs	r2, #1
 8025f36:	4293      	cmp	r3, r2
 8025f38:	f6bf af2c 	bge.w	8025d94 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8025f3c:	9b08      	ldr	r3, [sp, #32]
 8025f3e:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8025f42:	1cdd      	adds	r5, r3, #3
 8025f44:	f8bd e030 	ldrh.w	lr, [sp, #48]	; 0x30
 8025f48:	f1bc 0f00 	cmp.w	ip, #0
 8025f4c:	dc5f      	bgt.n	802600e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30a>
 8025f4e:	9b07      	ldr	r3, [sp, #28]
 8025f50:	9a08      	ldr	r2, [sp, #32]
 8025f52:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8025f56:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8025f5a:	441a      	add	r2, r3
 8025f5c:	9208      	str	r2, [sp, #32]
 8025f5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025f60:	2b00      	cmp	r3, #0
 8025f62:	f340 80e9 	ble.w	8026138 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 8025f66:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8025f6a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025f6c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8025f70:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8025f74:	eef0 6a62 	vmov.f32	s13, s5
 8025f78:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8025f7c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8025f80:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025f84:	ee16 aa90 	vmov	sl, s13
 8025f88:	eef0 6a43 	vmov.f32	s13, s6
 8025f8c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025f90:	ee16 8a90 	vmov	r8, s13
 8025f94:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8025f98:	ee61 7a27 	vmul.f32	s15, s2, s15
 8025f9c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8025fa0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8025fa4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8025fa8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8025fac:	ee12 2a90 	vmov	r2, s5
 8025fb0:	eef0 2a47 	vmov.f32	s5, s14
 8025fb4:	fb92 f3f3 	sdiv	r3, r2, r3
 8025fb8:	ee13 2a10 	vmov	r2, s6
 8025fbc:	932b      	str	r3, [sp, #172]	; 0xac
 8025fbe:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025fc0:	eeb0 3a67 	vmov.f32	s6, s15
 8025fc4:	fb92 f3f3 	sdiv	r3, r2, r3
 8025fc8:	932c      	str	r3, [sp, #176]	; 0xb0
 8025fca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025fcc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8025fce:	3b01      	subs	r3, #1
 8025fd0:	930b      	str	r3, [sp, #44]	; 0x2c
 8025fd2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025fd4:	bf08      	it	eq
 8025fd6:	4613      	moveq	r3, r2
 8025fd8:	9307      	str	r3, [sp, #28]
 8025fda:	e6b1      	b.n	8025d40 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8025fdc:	1c47      	adds	r7, r0, #1
 8025fde:	d482      	bmi.n	8025ee6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8025fe0:	42bb      	cmp	r3, r7
 8025fe2:	db80      	blt.n	8025ee6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8025fe4:	1c67      	adds	r7, r4, #1
 8025fe6:	f53f af7e 	bmi.w	8025ee6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8025fea:	42be      	cmp	r6, r7
 8025fec:	f6ff af7b 	blt.w	8025ee6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8025ff0:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8025ff2:	b236      	sxth	r6, r6
 8025ff4:	9001      	str	r0, [sp, #4]
 8025ff6:	b21b      	sxth	r3, r3
 8025ff8:	9600      	str	r6, [sp, #0]
 8025ffa:	981d      	ldr	r0, [sp, #116]	; 0x74
 8025ffc:	e9cd 1704 	strd	r1, r7, [sp, #16]
 8026000:	e9cd 4202 	strd	r4, r2, [sp, #8]
 8026004:	4629      	mov	r1, r5
 8026006:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8026008:	f7ff fd82 	bl	8025b10 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 802600c:	e76b      	b.n	8025ee6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 802600e:	9930      	ldr	r1, [sp, #192]	; 0xc0
 8026010:	ea4f 402a 	mov.w	r0, sl, asr #16
 8026014:	f3c8 3203 	ubfx	r2, r8, #12, #4
 8026018:	f3ca 3303 	ubfx	r3, sl, #12, #4
 802601c:	f9b1 7008 	ldrsh.w	r7, [r1, #8]
 8026020:	ea4f 4128 	mov.w	r1, r8, asr #16
 8026024:	fb07 0101 	mla	r1, r7, r1, r0
 8026028:	980a      	ldr	r0, [sp, #40]	; 0x28
 802602a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802602e:	1844      	adds	r4, r0, r1
 8026030:	5c40      	ldrb	r0, [r0, r1]
 8026032:	78a6      	ldrb	r6, [r4, #2]
 8026034:	7861      	ldrb	r1, [r4, #1]
 8026036:	960f      	str	r6, [sp, #60]	; 0x3c
 8026038:	78e6      	ldrb	r6, [r4, #3]
 802603a:	910d      	str	r1, [sp, #52]	; 0x34
 802603c:	9610      	str	r6, [sp, #64]	; 0x40
 802603e:	f894 9004 	ldrb.w	r9, [r4, #4]
 8026042:	f894 b005 	ldrb.w	fp, [r4, #5]
 8026046:	b192      	cbz	r2, 802606e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 8026048:	f06f 0604 	mvn.w	r6, #4
 802604c:	2103      	movs	r1, #3
 802604e:	3405      	adds	r4, #5
 8026050:	fb17 6701 	smlabb	r7, r7, r1, r6
 8026054:	19e6      	adds	r6, r4, r7
 8026056:	5de4      	ldrb	r4, [r4, r7]
 8026058:	9417      	str	r4, [sp, #92]	; 0x5c
 802605a:	7874      	ldrb	r4, [r6, #1]
 802605c:	9419      	str	r4, [sp, #100]	; 0x64
 802605e:	78b4      	ldrb	r4, [r6, #2]
 8026060:	941b      	str	r4, [sp, #108]	; 0x6c
 8026062:	78f4      	ldrb	r4, [r6, #3]
 8026064:	9418      	str	r4, [sp, #96]	; 0x60
 8026066:	7934      	ldrb	r4, [r6, #4]
 8026068:	941a      	str	r4, [sp, #104]	; 0x68
 802606a:	7974      	ldrb	r4, [r6, #5]
 802606c:	941c      	str	r4, [sp, #112]	; 0x70
 802606e:	b29b      	uxth	r3, r3
 8026070:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8026072:	b292      	uxth	r2, r2
 8026074:	9909      	ldr	r1, [sp, #36]	; 0x24
 8026076:	3503      	adds	r5, #3
 8026078:	f10c 3cff 	add.w	ip, ip, #4294967295
 802607c:	fb03 f402 	mul.w	r4, r3, r2
 8026080:	011b      	lsls	r3, r3, #4
 8026082:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 8026086:	f5c3 7680 	rsb	r6, r3, #256	; 0x100
 802608a:	1b1b      	subs	r3, r3, r4
 802608c:	b292      	uxth	r2, r2
 802608e:	b29b      	uxth	r3, r3
 8026090:	1ab6      	subs	r6, r6, r2
 8026092:	435f      	muls	r7, r3
 8026094:	b2b6      	uxth	r6, r6
 8026096:	fb03 f909 	mul.w	r9, r3, r9
 802609a:	fb03 fb0b 	mul.w	fp, r3, fp
 802609e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80260a0:	fb06 7000 	mla	r0, r6, r0, r7
 80260a4:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 80260a6:	fb06 bb03 	mla	fp, r6, r3, fp
 80260aa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80260ac:	fb02 0007 	mla	r0, r2, r7, r0
 80260b0:	9f18      	ldr	r7, [sp, #96]	; 0x60
 80260b2:	fb02 bb03 	mla	fp, r2, r3, fp
 80260b6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80260b8:	fb04 0007 	mla	r0, r4, r7, r0
 80260bc:	f815 7c06 	ldrb.w	r7, [r5, #-6]
 80260c0:	fb17 f701 	smulbb	r7, r7, r1
 80260c4:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80260c8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80260ca:	fb00 700e 	mla	r0, r0, lr, r7
 80260ce:	fb06 9101 	mla	r1, r6, r1, r9
 80260d2:	b280      	uxth	r0, r0
 80260d4:	1c47      	adds	r7, r0, #1
 80260d6:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 80260da:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80260dc:	1200      	asrs	r0, r0, #8
 80260de:	f805 0c06 	strb.w	r0, [r5, #-6]
 80260e2:	9819      	ldr	r0, [sp, #100]	; 0x64
 80260e4:	fb02 1100 	mla	r1, r2, r0, r1
 80260e8:	981a      	ldr	r0, [sp, #104]	; 0x68
 80260ea:	fb04 1100 	mla	r1, r4, r0, r1
 80260ee:	f815 0c05 	ldrb.w	r0, [r5, #-5]
 80260f2:	fb04 b403 	mla	r4, r4, r3, fp
 80260f6:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 80260fa:	fb10 f007 	smulbb	r0, r0, r7
 80260fe:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8026102:	fb13 f307 	smulbb	r3, r3, r7
 8026106:	f3c4 2407 	ubfx	r4, r4, #8, #8
 802610a:	fb01 010e 	mla	r1, r1, lr, r0
 802610e:	fb04 340e 	mla	r4, r4, lr, r3
 8026112:	b289      	uxth	r1, r1
 8026114:	b2a4      	uxth	r4, r4
 8026116:	1c48      	adds	r0, r1, #1
 8026118:	1c63      	adds	r3, r4, #1
 802611a:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 802611e:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8026122:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8026124:	1209      	asrs	r1, r1, #8
 8026126:	1224      	asrs	r4, r4, #8
 8026128:	449a      	add	sl, r3
 802612a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802612c:	f805 1c05 	strb.w	r1, [r5, #-5]
 8026130:	f805 4c04 	strb.w	r4, [r5, #-4]
 8026134:	4498      	add	r8, r3
 8026136:	e707      	b.n	8025f48 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 8026138:	b01f      	add	sp, #124	; 0x7c
 802613a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802613e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 802613e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026142:	b087      	sub	sp, #28
 8026144:	780d      	ldrb	r5, [r1, #0]
 8026146:	784c      	ldrb	r4, [r1, #1]
 8026148:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 802614c:	f9bd 7040 	ldrsh.w	r7, [sp, #64]	; 0x40
 8026150:	9004      	str	r0, [sp, #16]
 8026152:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 8026156:	e9dd b611 	ldrd	fp, r6, [sp, #68]	; 0x44
 802615a:	9005      	str	r0, [sp, #20]
 802615c:	fb06 bc03 	mla	ip, r6, r3, fp
 8026160:	2e00      	cmp	r6, #0
 8026162:	7888      	ldrb	r0, [r1, #2]
 8026164:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8026168:	eb02 090c 	add.w	r9, r2, ip
 802616c:	f2c0 8084 	blt.w	8026278 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 8026170:	42b7      	cmp	r7, r6
 8026172:	f340 8081 	ble.w	8026278 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 8026176:	f1bb 0f00 	cmp.w	fp, #0
 802617a:	db79      	blt.n	8026270 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 802617c:	455b      	cmp	r3, fp
 802617e:	dd77      	ble.n	8026270 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 8026180:	f812 200c 	ldrb.w	r2, [r2, ip]
 8026184:	9201      	str	r2, [sp, #4]
 8026186:	f899 2001 	ldrb.w	r2, [r9, #1]
 802618a:	9202      	str	r2, [sp, #8]
 802618c:	f899 2002 	ldrb.w	r2, [r9, #2]
 8026190:	9203      	str	r2, [sp, #12]
 8026192:	f11b 0201 	adds.w	r2, fp, #1
 8026196:	d476      	bmi.n	8026286 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 8026198:	4293      	cmp	r3, r2
 802619a:	dd74      	ble.n	8026286 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 802619c:	9a04      	ldr	r2, [sp, #16]
 802619e:	2a00      	cmp	r2, #0
 80261a0:	d071      	beq.n	8026286 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 80261a2:	f899 8003 	ldrb.w	r8, [r9, #3]
 80261a6:	f899 c004 	ldrb.w	ip, [r9, #4]
 80261aa:	f899 a005 	ldrb.w	sl, [r9, #5]
 80261ae:	3601      	adds	r6, #1
 80261b0:	d471      	bmi.n	8026296 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 80261b2:	42b7      	cmp	r7, r6
 80261b4:	dd6f      	ble.n	8026296 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 80261b6:	9a05      	ldr	r2, [sp, #20]
 80261b8:	2a00      	cmp	r2, #0
 80261ba:	d06c      	beq.n	8026296 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 80261bc:	f1bb 0f00 	cmp.w	fp, #0
 80261c0:	db65      	blt.n	802628e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 80261c2:	455b      	cmp	r3, fp
 80261c4:	dd63      	ble.n	802628e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 80261c6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80261ca:	f819 e002 	ldrb.w	lr, [r9, r2]
 80261ce:	2203      	movs	r2, #3
 80261d0:	fb03 9602 	mla	r6, r3, r2, r9
 80261d4:	7877      	ldrb	r7, [r6, #1]
 80261d6:	78b6      	ldrb	r6, [r6, #2]
 80261d8:	f11b 0b01 	adds.w	fp, fp, #1
 80261dc:	d40c      	bmi.n	80261f8 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 80261de:	455b      	cmp	r3, fp
 80261e0:	dd0a      	ble.n	80261f8 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 80261e2:	9a04      	ldr	r2, [sp, #16]
 80261e4:	b142      	cbz	r2, 80261f8 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 80261e6:	2203      	movs	r2, #3
 80261e8:	fb13 2002 	smlabb	r0, r3, r2, r2
 80261ec:	f819 5000 	ldrb.w	r5, [r9, r0]
 80261f0:	fb03 9002 	mla	r0, r3, r2, r9
 80261f4:	7904      	ldrb	r4, [r0, #4]
 80261f6:	7940      	ldrb	r0, [r0, #5]
 80261f8:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 80261fc:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8026200:	fb03 fb02 	mul.w	fp, r3, r2
 8026204:	011b      	lsls	r3, r3, #4
 8026206:	ebcb 1202 	rsb	r2, fp, r2, lsl #4
 802620a:	f5c3 7980 	rsb	r9, r3, #256	; 0x100
 802620e:	eba3 030b 	sub.w	r3, r3, fp
 8026212:	b292      	uxth	r2, r2
 8026214:	b29b      	uxth	r3, r3
 8026216:	eba9 0902 	sub.w	r9, r9, r2
 802621a:	9304      	str	r3, [sp, #16]
 802621c:	fa1f f989 	uxth.w	r9, r9
 8026220:	fb03 f808 	mul.w	r8, r3, r8
 8026224:	9b01      	ldr	r3, [sp, #4]
 8026226:	fb09 8803 	mla	r8, r9, r3, r8
 802622a:	9b04      	ldr	r3, [sp, #16]
 802622c:	fb03 fc0c 	mul.w	ip, r3, ip
 8026230:	9b02      	ldr	r3, [sp, #8]
 8026232:	fb02 880e 	mla	r8, r2, lr, r8
 8026236:	fb09 cc03 	mla	ip, r9, r3, ip
 802623a:	9b04      	ldr	r3, [sp, #16]
 802623c:	fb0b 8805 	mla	r8, fp, r5, r8
 8026240:	fb02 c707 	mla	r7, r2, r7, ip
 8026244:	fb03 f30a 	mul.w	r3, r3, sl
 8026248:	ea4f 2828 	mov.w	r8, r8, asr #8
 802624c:	fb0b 7404 	mla	r4, fp, r4, r7
 8026250:	f881 8000 	strb.w	r8, [r1]
 8026254:	1224      	asrs	r4, r4, #8
 8026256:	704c      	strb	r4, [r1, #1]
 8026258:	9c03      	ldr	r4, [sp, #12]
 802625a:	fb09 3904 	mla	r9, r9, r4, r3
 802625e:	fb02 9206 	mla	r2, r2, r6, r9
 8026262:	fb0b 2000 	mla	r0, fp, r0, r2
 8026266:	1200      	asrs	r0, r0, #8
 8026268:	7088      	strb	r0, [r1, #2]
 802626a:	b007      	add	sp, #28
 802626c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026270:	e9cd 4002 	strd	r4, r0, [sp, #8]
 8026274:	9501      	str	r5, [sp, #4]
 8026276:	e78c      	b.n	8026192 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x54>
 8026278:	4682      	mov	sl, r0
 802627a:	46a4      	mov	ip, r4
 802627c:	46a8      	mov	r8, r5
 802627e:	9501      	str	r5, [sp, #4]
 8026280:	e9cd 4002 	strd	r4, r0, [sp, #8]
 8026284:	e793      	b.n	80261ae <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 8026286:	4682      	mov	sl, r0
 8026288:	46a4      	mov	ip, r4
 802628a:	46a8      	mov	r8, r5
 802628c:	e78f      	b.n	80261ae <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 802628e:	4606      	mov	r6, r0
 8026290:	4627      	mov	r7, r4
 8026292:	46ae      	mov	lr, r5
 8026294:	e7a0      	b.n	80261d8 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 8026296:	4606      	mov	r6, r0
 8026298:	4627      	mov	r7, r4
 802629a:	46ae      	mov	lr, r5
 802629c:	e7ac      	b.n	80261f8 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>

0802629e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802629e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80262a2:	b09b      	sub	sp, #108	; 0x6c
 80262a4:	920b      	str	r2, [sp, #44]	; 0x2c
 80262a6:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80262a8:	9019      	str	r0, [sp, #100]	; 0x64
 80262aa:	9109      	str	r1, [sp, #36]	; 0x24
 80262ac:	6850      	ldr	r0, [r2, #4]
 80262ae:	9306      	str	r3, [sp, #24]
 80262b0:	6812      	ldr	r2, [r2, #0]
 80262b2:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 80262b6:	e9dd b425 	ldrd	fp, r4, [sp, #148]	; 0x94
 80262ba:	fb00 1303 	mla	r3, r0, r3, r1
 80262be:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80262c2:	18d3      	adds	r3, r2, r3
 80262c4:	9307      	str	r3, [sp, #28]
 80262c6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80262c8:	681b      	ldr	r3, [r3, #0]
 80262ca:	9308      	str	r3, [sp, #32]
 80262cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80262ce:	2b00      	cmp	r3, #0
 80262d0:	dc03      	bgt.n	80262da <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80262d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80262d4:	2b00      	cmp	r3, #0
 80262d6:	f340 81ab 	ble.w	8026630 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 80262da:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80262dc:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80262e0:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80262e4:	1e48      	subs	r0, r1, #1
 80262e6:	1e55      	subs	r5, r2, #1
 80262e8:	9b06      	ldr	r3, [sp, #24]
 80262ea:	2b00      	cmp	r3, #0
 80262ec:	f340 80b1 	ble.w	8026452 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 80262f0:	ea5f 462b 	movs.w	r6, fp, asr #16
 80262f4:	ea4f 4324 	mov.w	r3, r4, asr #16
 80262f8:	d406      	bmi.n	8026308 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80262fa:	4286      	cmp	r6, r0
 80262fc:	da04      	bge.n	8026308 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80262fe:	2b00      	cmp	r3, #0
 8026300:	db02      	blt.n	8026308 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8026302:	42ab      	cmp	r3, r5
 8026304:	f2c0 80a6 	blt.w	8026454 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 8026308:	3601      	adds	r6, #1
 802630a:	f100 8097 	bmi.w	802643c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 802630e:	42b1      	cmp	r1, r6
 8026310:	f2c0 8094 	blt.w	802643c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8026314:	3301      	adds	r3, #1
 8026316:	f100 8091 	bmi.w	802643c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 802631a:	429a      	cmp	r2, r3
 802631c:	f2c0 808e 	blt.w	802643c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8026320:	9b06      	ldr	r3, [sp, #24]
 8026322:	9e07      	ldr	r6, [sp, #28]
 8026324:	930a      	str	r3, [sp, #40]	; 0x28
 8026326:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026328:	2b00      	cmp	r3, #0
 802632a:	f340 80b0 	ble.w	802648e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 802632e:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8026330:	1425      	asrs	r5, r4, #16
 8026332:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8026334:	f3cb 3203 	ubfx	r2, fp, #12, #4
 8026338:	68c7      	ldr	r7, [r0, #12]
 802633a:	ea5f 402b 	movs.w	r0, fp, asr #16
 802633e:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8026342:	689b      	ldr	r3, [r3, #8]
 8026344:	f100 80ea 	bmi.w	802651c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8026348:	f103 3cff 	add.w	ip, r3, #4294967295
 802634c:	4560      	cmp	r0, ip
 802634e:	f280 80e5 	bge.w	802651c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8026352:	2d00      	cmp	r5, #0
 8026354:	f2c0 80e2 	blt.w	802651c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8026358:	f107 3cff 	add.w	ip, r7, #4294967295
 802635c:	4565      	cmp	r5, ip
 802635e:	f280 80dd 	bge.w	802651c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8026362:	b21b      	sxth	r3, r3
 8026364:	fb05 0003 	mla	r0, r5, r3, r0
 8026368:	9d08      	ldr	r5, [sp, #32]
 802636a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802636e:	182f      	adds	r7, r5, r0
 8026370:	5c2d      	ldrb	r5, [r5, r0]
 8026372:	7878      	ldrb	r0, [r7, #1]
 8026374:	f897 e002 	ldrb.w	lr, [r7, #2]
 8026378:	900c      	str	r0, [sp, #48]	; 0x30
 802637a:	f897 9003 	ldrb.w	r9, [r7, #3]
 802637e:	f897 8004 	ldrb.w	r8, [r7, #4]
 8026382:	f897 a005 	ldrb.w	sl, [r7, #5]
 8026386:	b1c9      	cbz	r1, 80263bc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8026388:	f04f 0c03 	mov.w	ip, #3
 802638c:	f06f 0004 	mvn.w	r0, #4
 8026390:	3705      	adds	r7, #5
 8026392:	fb13 030c 	smlabb	r3, r3, ip, r0
 8026396:	eb07 0c03 	add.w	ip, r7, r3
 802639a:	5cfb      	ldrb	r3, [r7, r3]
 802639c:	930d      	str	r3, [sp, #52]	; 0x34
 802639e:	f89c 3001 	ldrb.w	r3, [ip, #1]
 80263a2:	930f      	str	r3, [sp, #60]	; 0x3c
 80263a4:	f89c 3002 	ldrb.w	r3, [ip, #2]
 80263a8:	9311      	str	r3, [sp, #68]	; 0x44
 80263aa:	f89c 3003 	ldrb.w	r3, [ip, #3]
 80263ae:	930e      	str	r3, [sp, #56]	; 0x38
 80263b0:	f89c 3004 	ldrb.w	r3, [ip, #4]
 80263b4:	9310      	str	r3, [sp, #64]	; 0x40
 80263b6:	f89c 3005 	ldrb.w	r3, [ip, #5]
 80263ba:	9312      	str	r3, [sp, #72]	; 0x48
 80263bc:	b292      	uxth	r2, r2
 80263be:	980c      	ldr	r0, [sp, #48]	; 0x30
 80263c0:	b289      	uxth	r1, r1
 80263c2:	fb02 f301 	mul.w	r3, r2, r1
 80263c6:	0112      	lsls	r2, r2, #4
 80263c8:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 80263cc:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 80263d0:	1ad2      	subs	r2, r2, r3
 80263d2:	b289      	uxth	r1, r1
 80263d4:	b292      	uxth	r2, r2
 80263d6:	1a7f      	subs	r7, r7, r1
 80263d8:	fb02 f909 	mul.w	r9, r2, r9
 80263dc:	b2bf      	uxth	r7, r7
 80263de:	fb02 f808 	mul.w	r8, r2, r8
 80263e2:	fb02 fa0a 	mul.w	sl, r2, sl
 80263e6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80263e8:	fb07 9905 	mla	r9, r7, r5, r9
 80263ec:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80263ee:	fb07 8800 	mla	r8, r7, r0, r8
 80263f2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80263f4:	fb07 aa0e 	mla	sl, r7, lr, sl
 80263f8:	fb01 9905 	mla	r9, r1, r5, r9
 80263fc:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80263fe:	fb01 8800 	mla	r8, r1, r0, r8
 8026402:	9810      	ldr	r0, [sp, #64]	; 0x40
 8026404:	fb01 a102 	mla	r1, r1, r2, sl
 8026408:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802640a:	fb03 9905 	mla	r9, r3, r5, r9
 802640e:	fb03 8800 	mla	r8, r3, r0, r8
 8026412:	fb03 1302 	mla	r3, r3, r2, r1
 8026416:	ea4f 2929 	mov.w	r9, r9, asr #8
 802641a:	ea4f 2828 	mov.w	r8, r8, asr #8
 802641e:	121b      	asrs	r3, r3, #8
 8026420:	f886 9000 	strb.w	r9, [r6]
 8026424:	f886 8001 	strb.w	r8, [r6, #1]
 8026428:	70b3      	strb	r3, [r6, #2]
 802642a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802642c:	3603      	adds	r6, #3
 802642e:	449b      	add	fp, r3
 8026430:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8026432:	441c      	add	r4, r3
 8026434:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026436:	3b01      	subs	r3, #1
 8026438:	930a      	str	r3, [sp, #40]	; 0x28
 802643a:	e774      	b.n	8026326 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 802643c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802643e:	449b      	add	fp, r3
 8026440:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8026442:	441c      	add	r4, r3
 8026444:	9b06      	ldr	r3, [sp, #24]
 8026446:	3b01      	subs	r3, #1
 8026448:	9306      	str	r3, [sp, #24]
 802644a:	9b07      	ldr	r3, [sp, #28]
 802644c:	3303      	adds	r3, #3
 802644e:	9307      	str	r3, [sp, #28]
 8026450:	e74a      	b.n	80262e8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8026452:	d024      	beq.n	802649e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8026454:	9b06      	ldr	r3, [sp, #24]
 8026456:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8026458:	3b01      	subs	r3, #1
 802645a:	fb00 b003 	mla	r0, r0, r3, fp
 802645e:	1400      	asrs	r0, r0, #16
 8026460:	f53f af5e 	bmi.w	8026320 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8026464:	3901      	subs	r1, #1
 8026466:	4288      	cmp	r0, r1
 8026468:	f6bf af5a 	bge.w	8026320 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802646c:	9928      	ldr	r1, [sp, #160]	; 0xa0
 802646e:	fb01 4303 	mla	r3, r1, r3, r4
 8026472:	141b      	asrs	r3, r3, #16
 8026474:	f53f af54 	bmi.w	8026320 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8026478:	3a01      	subs	r2, #1
 802647a:	4293      	cmp	r3, r2
 802647c:	f6bf af50 	bge.w	8026320 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8026480:	9b07      	ldr	r3, [sp, #28]
 8026482:	f8dd e018 	ldr.w	lr, [sp, #24]
 8026486:	1cde      	adds	r6, r3, #3
 8026488:	f1be 0f00 	cmp.w	lr, #0
 802648c:	dc5f      	bgt.n	802654e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 802648e:	9b06      	ldr	r3, [sp, #24]
 8026490:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8026494:	9b07      	ldr	r3, [sp, #28]
 8026496:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802649a:	4423      	add	r3, r4
 802649c:	9307      	str	r3, [sp, #28]
 802649e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80264a0:	2b00      	cmp	r3, #0
 80264a2:	f340 80c5 	ble.w	8026630 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 80264a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80264aa:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80264ac:	ee30 0a04 	vadd.f32	s0, s0, s8
 80264b0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80264b4:	eef0 6a62 	vmov.f32	s13, s5
 80264b8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80264bc:	ee31 1a05 	vadd.f32	s2, s2, s10
 80264c0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80264c4:	ee16 ba90 	vmov	fp, s13
 80264c8:	eef0 6a43 	vmov.f32	s13, s6
 80264cc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80264d0:	ee16 4a90 	vmov	r4, s13
 80264d4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80264d8:	ee61 7a27 	vmul.f32	s15, s2, s15
 80264dc:	ee77 2a62 	vsub.f32	s5, s14, s5
 80264e0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80264e4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80264e8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80264ec:	ee12 2a90 	vmov	r2, s5
 80264f0:	eef0 2a47 	vmov.f32	s5, s14
 80264f4:	fb92 f3f3 	sdiv	r3, r2, r3
 80264f8:	ee13 2a10 	vmov	r2, s6
 80264fc:	9327      	str	r3, [sp, #156]	; 0x9c
 80264fe:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8026500:	eeb0 3a67 	vmov.f32	s6, s15
 8026504:	fb92 f3f3 	sdiv	r3, r2, r3
 8026508:	9328      	str	r3, [sp, #160]	; 0xa0
 802650a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802650c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802650e:	3b01      	subs	r3, #1
 8026510:	9309      	str	r3, [sp, #36]	; 0x24
 8026512:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8026514:	bf08      	it	eq
 8026516:	4613      	moveq	r3, r2
 8026518:	9306      	str	r3, [sp, #24]
 802651a:	e6d7      	b.n	80262cc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 802651c:	f110 0c01 	adds.w	ip, r0, #1
 8026520:	d483      	bmi.n	802642a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8026522:	4563      	cmp	r3, ip
 8026524:	db81      	blt.n	802642a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8026526:	f115 0c01 	adds.w	ip, r5, #1
 802652a:	f53f af7e 	bmi.w	802642a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 802652e:	4567      	cmp	r7, ip
 8026530:	f6ff af7b 	blt.w	802642a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8026534:	b23f      	sxth	r7, r7
 8026536:	b21b      	sxth	r3, r3
 8026538:	9700      	str	r7, [sp, #0]
 802653a:	e9cd 2103 	strd	r2, r1, [sp, #12]
 802653e:	e9cd 0501 	strd	r0, r5, [sp, #4]
 8026542:	9a08      	ldr	r2, [sp, #32]
 8026544:	4631      	mov	r1, r6
 8026546:	9819      	ldr	r0, [sp, #100]	; 0x64
 8026548:	f7ff fdf9 	bl	802613e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 802654c:	e76d      	b.n	802642a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 802654e:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8026550:	ea4f 402b 	mov.w	r0, fp, asr #16
 8026554:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8026558:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802655c:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 8026560:	1421      	asrs	r1, r4, #16
 8026562:	930a      	str	r3, [sp, #40]	; 0x28
 8026564:	fb0c 0101 	mla	r1, ip, r1, r0
 8026568:	9808      	ldr	r0, [sp, #32]
 802656a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802656e:	1845      	adds	r5, r0, r1
 8026570:	5c40      	ldrb	r0, [r0, r1]
 8026572:	796f      	ldrb	r7, [r5, #5]
 8026574:	7869      	ldrb	r1, [r5, #1]
 8026576:	f895 8002 	ldrb.w	r8, [r5, #2]
 802657a:	f895 a003 	ldrb.w	sl, [r5, #3]
 802657e:	f895 9004 	ldrb.w	r9, [r5, #4]
 8026582:	970c      	str	r7, [sp, #48]	; 0x30
 8026584:	b1a2      	cbz	r2, 80265b0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x312>
 8026586:	2703      	movs	r7, #3
 8026588:	f06f 0304 	mvn.w	r3, #4
 802658c:	3505      	adds	r5, #5
 802658e:	fb1c 3c07 	smlabb	ip, ip, r7, r3
 8026592:	eb05 070c 	add.w	r7, r5, ip
 8026596:	f815 500c 	ldrb.w	r5, [r5, ip]
 802659a:	9513      	str	r5, [sp, #76]	; 0x4c
 802659c:	787d      	ldrb	r5, [r7, #1]
 802659e:	9515      	str	r5, [sp, #84]	; 0x54
 80265a0:	78bd      	ldrb	r5, [r7, #2]
 80265a2:	9517      	str	r5, [sp, #92]	; 0x5c
 80265a4:	78fd      	ldrb	r5, [r7, #3]
 80265a6:	9514      	str	r5, [sp, #80]	; 0x50
 80265a8:	793d      	ldrb	r5, [r7, #4]
 80265aa:	9516      	str	r5, [sp, #88]	; 0x58
 80265ac:	797d      	ldrb	r5, [r7, #5]
 80265ae:	9518      	str	r5, [sp, #96]	; 0x60
 80265b0:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 80265b4:	b292      	uxth	r2, r2
 80265b6:	3603      	adds	r6, #3
 80265b8:	f10e 3eff 	add.w	lr, lr, #4294967295
 80265bc:	fb03 f502 	mul.w	r5, r3, r2
 80265c0:	011b      	lsls	r3, r3, #4
 80265c2:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 80265c6:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 80265ca:	1b5b      	subs	r3, r3, r5
 80265cc:	b292      	uxth	r2, r2
 80265ce:	b29b      	uxth	r3, r3
 80265d0:	1abf      	subs	r7, r7, r2
 80265d2:	fb03 f909 	mul.w	r9, r3, r9
 80265d6:	b2bf      	uxth	r7, r7
 80265d8:	fb03 fa0a 	mul.w	sl, r3, sl
 80265dc:	fb07 9901 	mla	r9, r7, r1, r9
 80265e0:	9915      	ldr	r1, [sp, #84]	; 0x54
 80265e2:	fb07 aa00 	mla	sl, r7, r0, sl
 80265e6:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80265e8:	fb02 9901 	mla	r9, r2, r1, r9
 80265ec:	9916      	ldr	r1, [sp, #88]	; 0x58
 80265ee:	fb02 aa00 	mla	sl, r2, r0, sl
 80265f2:	9814      	ldr	r0, [sp, #80]	; 0x50
 80265f4:	fb05 9901 	mla	r9, r5, r1, r9
 80265f8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80265fa:	fb05 aa00 	mla	sl, r5, r0, sl
 80265fe:	434b      	muls	r3, r1
 8026600:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8026602:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8026606:	fb07 3308 	mla	r3, r7, r8, r3
 802660a:	ea4f 2929 	mov.w	r9, r9, asr #8
 802660e:	f806 ac06 	strb.w	sl, [r6, #-6]
 8026612:	fb02 3201 	mla	r2, r2, r1, r3
 8026616:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8026618:	f806 9c05 	strb.w	r9, [r6, #-5]
 802661c:	fb05 2503 	mla	r5, r5, r3, r2
 8026620:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8026622:	122d      	asrs	r5, r5, #8
 8026624:	449b      	add	fp, r3
 8026626:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8026628:	f806 5c04 	strb.w	r5, [r6, #-4]
 802662c:	441c      	add	r4, r3
 802662e:	e72b      	b.n	8026488 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8026630:	b01b      	add	sp, #108	; 0x6c
 8026632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08026636 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 8026636:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802663a:	b087      	sub	sp, #28
 802663c:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	; 0x44
 8026640:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 8026644:	fb05 7003 	mla	r0, r5, r3, r7
 8026648:	2d00      	cmp	r5, #0
 802664a:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 802664e:	f89d e050 	ldrb.w	lr, [sp, #80]	; 0x50
 8026652:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 8026656:	f2c0 811f 	blt.w	8026898 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 802665a:	45a8      	cmp	r8, r5
 802665c:	f340 811c 	ble.w	8026898 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 8026660:	2f00      	cmp	r7, #0
 8026662:	f2c0 8117 	blt.w	8026894 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 8026666:	42bb      	cmp	r3, r7
 8026668:	f340 8114 	ble.w	8026894 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 802666c:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 8026670:	1c7a      	adds	r2, r7, #1
 8026672:	f100 8114 	bmi.w	802689e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 8026676:	4293      	cmp	r3, r2
 8026678:	f340 8111 	ble.w	802689e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 802667c:	2c00      	cmp	r4, #0
 802667e:	f000 8110 	beq.w	80268a2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x26c>
 8026682:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8026686:	3501      	adds	r5, #1
 8026688:	f100 810f 	bmi.w	80268aa <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 802668c:	45a8      	cmp	r8, r5
 802668e:	f340 810c 	ble.w	80268aa <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 8026692:	f1be 0f00 	cmp.w	lr, #0
 8026696:	f000 810b 	beq.w	80268b0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x27a>
 802669a:	2f00      	cmp	r7, #0
 802669c:	f2c0 8103 	blt.w	80268a6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 80266a0:	42bb      	cmp	r3, r7
 80266a2:	f340 8100 	ble.w	80268a6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 80266a6:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 80266aa:	3701      	adds	r7, #1
 80266ac:	f100 8103 	bmi.w	80268b6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 80266b0:	42bb      	cmp	r3, r7
 80266b2:	f340 8100 	ble.w	80268b6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 80266b6:	2c00      	cmp	r4, #0
 80266b8:	f000 80ff 	beq.w	80268ba <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x284>
 80266bc:	3301      	adds	r3, #1
 80266be:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80266c2:	fa1f fc84 	uxth.w	ip, r4
 80266c6:	fa1f fe8e 	uxth.w	lr, lr
 80266ca:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 80266ce:	fb0c f90e 	mul.w	r9, ip, lr
 80266d2:	0e13      	lsrs	r3, r2, #24
 80266d4:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 80266d8:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 80266dc:	9302      	str	r3, [sp, #8]
 80266de:	ebac 0709 	sub.w	r7, ip, r9
 80266e2:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 80266e6:	fa1f f48e 	uxth.w	r4, lr
 80266ea:	f006 1eff 	and.w	lr, r6, #16711935	; 0xff00ff
 80266ee:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80266f2:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 80266f6:	fb0a fe0e 	mul.w	lr, sl, lr
 80266fa:	1b1b      	subs	r3, r3, r4
 80266fc:	fb0a f606 	mul.w	r6, sl, r6
 8026700:	ea4f 6815 	mov.w	r8, r5, lsr #24
 8026704:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8026708:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 802670c:	b29b      	uxth	r3, r3
 802670e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026712:	b2bf      	uxth	r7, r7
 8026714:	9301      	str	r3, [sp, #4]
 8026716:	44e6      	add	lr, ip
 8026718:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 802671c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026720:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8026724:	f00e 13ff 	and.w	r3, lr, #16711935	; 0xff00ff
 8026728:	9303      	str	r3, [sp, #12]
 802672a:	0a33      	lsrs	r3, r6, #8
 802672c:	f000 16ff 	and.w	r6, r0, #16711935	; 0xff00ff
 8026730:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8026734:	9304      	str	r3, [sp, #16]
 8026736:	fb0b f606 	mul.w	r6, fp, r6
 802673a:	fb0b f000 	mul.w	r0, fp, r0
 802673e:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 8026742:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8026746:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802674a:	44b6      	add	lr, r6
 802674c:	f500 7680 	add.w	r6, r0, #256	; 0x100
 8026750:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 8026754:	f005 16ff 	and.w	r6, r5, #16711935	; 0xff00ff
 8026758:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 802675c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026760:	fb08 f606 	mul.w	r6, r8, r6
 8026764:	0a03      	lsrs	r3, r0, #8
 8026766:	fb08 f505 	mul.w	r5, r8, r5
 802676a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802676e:	0a30      	lsrs	r0, r6, #8
 8026770:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8026774:	9305      	str	r3, [sp, #20]
 8026776:	0e13      	lsrs	r3, r2, #24
 8026778:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 802677c:	fb0e fe07 	mul.w	lr, lr, r7
 8026780:	4430      	add	r0, r6
 8026782:	f505 7680 	add.w	r6, r5, #256	; 0x100
 8026786:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 802678a:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 802678e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8026792:	0a00      	lsrs	r0, r0, #8
 8026794:	435e      	muls	r6, r3
 8026796:	0a2d      	lsrs	r5, r5, #8
 8026798:	435a      	muls	r2, r3
 802679a:	9b03      	ldr	r3, [sp, #12]
 802679c:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 80267a0:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 80267a4:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80267a8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80267ac:	44b4      	add	ip, r6
 80267ae:	f502 7680 	add.w	r6, r2, #256	; 0x100
 80267b2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80267b6:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 80267ba:	9e01      	ldr	r6, [sp, #4]
 80267bc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80267c0:	fb03 ee06 	mla	lr, r3, r6, lr
 80267c4:	9b04      	ldr	r3, [sp, #16]
 80267c6:	0a12      	lsrs	r2, r2, #8
 80267c8:	fb0c ee09 	mla	lr, ip, r9, lr
 80267cc:	f403 467f 	and.w	r6, r3, #65280	; 0xff00
 80267d0:	9b05      	ldr	r3, [sp, #20]
 80267d2:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80267d6:	fb00 ee04 	mla	lr, r0, r4, lr
 80267da:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80267de:	f00e 10ff 	and.w	r0, lr, #16711935	; 0xff00ff
 80267e2:	f403 4e7f 	and.w	lr, r3, #65280	; 0xff00
 80267e6:	9b01      	ldr	r3, [sp, #4]
 80267e8:	fb07 fe0e 	mul.w	lr, r7, lr
 80267ec:	fb07 f70b 	mul.w	r7, r7, fp
 80267f0:	fb03 ee06 	mla	lr, r3, r6, lr
 80267f4:	fb03 730a 	mla	r3, r3, sl, r7
 80267f8:	fb09 e202 	mla	r2, r9, r2, lr
 80267fc:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8026800:	fb04 2e0e 	mla	lr, r4, lr, r2
 8026804:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 8026808:	fb04 3408 	mla	r4, r4, r8, r3
 802680c:	9b02      	ldr	r3, [sp, #8]
 802680e:	b292      	uxth	r2, r2
 8026810:	fb09 4903 	mla	r9, r9, r3, r4
 8026814:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026818:	f3c9 2907 	ubfx	r9, r9, #8, #8
 802681c:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8026820:	fb09 f902 	mul.w	r9, r9, r2
 8026824:	ea40 0e0e 	orr.w	lr, r0, lr
 8026828:	f109 0301 	add.w	r3, r9, #1
 802682c:	fa5f f08e 	uxtb.w	r0, lr
 8026830:	fb10 f002 	smulbb	r0, r0, r2
 8026834:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 8026838:	780b      	ldrb	r3, [r1, #0]
 802683a:	ea6f 2919 	mvn.w	r9, r9, lsr #8
 802683e:	fa5f f989 	uxtb.w	r9, r9
 8026842:	fb03 0309 	mla	r3, r3, r9, r0
 8026846:	b29b      	uxth	r3, r3
 8026848:	1c58      	adds	r0, r3, #1
 802684a:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 802684e:	7848      	ldrb	r0, [r1, #1]
 8026850:	fb10 f009 	smulbb	r0, r0, r9
 8026854:	121b      	asrs	r3, r3, #8
 8026856:	700b      	strb	r3, [r1, #0]
 8026858:	f3ce 2307 	ubfx	r3, lr, #8, #8
 802685c:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8026860:	fb03 0302 	mla	r3, r3, r2, r0
 8026864:	b29b      	uxth	r3, r3
 8026866:	1c58      	adds	r0, r3, #1
 8026868:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 802686c:	121b      	asrs	r3, r3, #8
 802686e:	704b      	strb	r3, [r1, #1]
 8026870:	788b      	ldrb	r3, [r1, #2]
 8026872:	fb13 f909 	smulbb	r9, r3, r9
 8026876:	fb0e 9e02 	mla	lr, lr, r2, r9
 802687a:	fa1f fe8e 	uxth.w	lr, lr
 802687e:	f10e 0301 	add.w	r3, lr, #1
 8026882:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 8026886:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 802688a:	f881 e002 	strb.w	lr, [r1, #2]
 802688e:	b007      	add	sp, #28
 8026890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026894:	2600      	movs	r6, #0
 8026896:	e6eb      	b.n	8026670 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3a>
 8026898:	2000      	movs	r0, #0
 802689a:	4606      	mov	r6, r0
 802689c:	e6f3      	b.n	8026686 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 802689e:	2000      	movs	r0, #0
 80268a0:	e6f1      	b.n	8026686 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 80268a2:	4620      	mov	r0, r4
 80268a4:	e6ef      	b.n	8026686 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 80268a6:	2500      	movs	r5, #0
 80268a8:	e6ff      	b.n	80266aa <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x74>
 80268aa:	2200      	movs	r2, #0
 80268ac:	4615      	mov	r5, r2
 80268ae:	e708      	b.n	80266c2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 80268b0:	4672      	mov	r2, lr
 80268b2:	4675      	mov	r5, lr
 80268b4:	e705      	b.n	80266c2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 80268b6:	2200      	movs	r2, #0
 80268b8:	e703      	b.n	80266c2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 80268ba:	4622      	mov	r2, r4
 80268bc:	e701      	b.n	80266c2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>

080268be <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80268be:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80268c2:	b09d      	sub	sp, #116	; 0x74
 80268c4:	9219      	str	r2, [sp, #100]	; 0x64
 80268c6:	9307      	str	r3, [sp, #28]
 80268c8:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80268ca:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
 80268ce:	901b      	str	r0, [sp, #108]	; 0x6c
 80268d0:	931a      	str	r3, [sp, #104]	; 0x68
 80268d2:	6850      	ldr	r0, [r2, #4]
 80268d4:	9117      	str	r1, [sp, #92]	; 0x5c
 80268d6:	6812      	ldr	r2, [r2, #0]
 80268d8:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 80268dc:	e9dd 5627 	ldrd	r5, r6, [sp, #156]	; 0x9c
 80268e0:	fb00 1303 	mla	r3, r0, r3, r1
 80268e4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80268e8:	18d3      	adds	r3, r2, r3
 80268ea:	930a      	str	r3, [sp, #40]	; 0x28
 80268ec:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80268ee:	681b      	ldr	r3, [r3, #0]
 80268f0:	9310      	str	r3, [sp, #64]	; 0x40
 80268f2:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 80268f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80268f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80268fa:	2b00      	cmp	r3, #0
 80268fc:	dc03      	bgt.n	8026906 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80268fe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8026900:	2b00      	cmp	r3, #0
 8026902:	f340 8368 	ble.w	8026fd6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 8026906:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8026908:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802690c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8026910:	1e48      	subs	r0, r1, #1
 8026912:	1e57      	subs	r7, r2, #1
 8026914:	9b07      	ldr	r3, [sp, #28]
 8026916:	2b00      	cmp	r3, #0
 8026918:	f340 8187 	ble.w	8026c2a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 802691c:	ea5f 4c25 	movs.w	ip, r5, asr #16
 8026920:	ea4f 4326 	mov.w	r3, r6, asr #16
 8026924:	d406      	bmi.n	8026934 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8026926:	4584      	cmp	ip, r0
 8026928:	da04      	bge.n	8026934 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 802692a:	2b00      	cmp	r3, #0
 802692c:	db02      	blt.n	8026934 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 802692e:	42bb      	cmp	r3, r7
 8026930:	f2c0 817c 	blt.w	8026c2c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8026934:	f11c 0c01 	adds.w	ip, ip, #1
 8026938:	f100 816c 	bmi.w	8026c14 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 802693c:	4561      	cmp	r1, ip
 802693e:	f2c0 8169 	blt.w	8026c14 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8026942:	3301      	adds	r3, #1
 8026944:	f100 8166 	bmi.w	8026c14 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8026948:	429a      	cmp	r2, r3
 802694a:	f2c0 8163 	blt.w	8026c14 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 802694e:	9b07      	ldr	r3, [sp, #28]
 8026950:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8026952:	9318      	str	r3, [sp, #96]	; 0x60
 8026954:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8026956:	2b00      	cmp	r3, #0
 8026958:	f340 8186 	ble.w	8026c68 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 802695c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802695e:	142a      	asrs	r2, r5, #16
 8026960:	ea4f 4026 	mov.w	r0, r6, asr #16
 8026964:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8026968:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 802696c:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8026970:	f100 81cb 	bmi.w	8026d0a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8026974:	f10e 38ff 	add.w	r8, lr, #4294967295
 8026978:	4542      	cmp	r2, r8
 802697a:	f280 81c6 	bge.w	8026d0a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 802697e:	2800      	cmp	r0, #0
 8026980:	f2c0 81c3 	blt.w	8026d0a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8026984:	f103 38ff 	add.w	r8, r3, #4294967295
 8026988:	4540      	cmp	r0, r8
 802698a:	f280 81be 	bge.w	8026d0a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 802698e:	fa0f f38e 	sxth.w	r3, lr
 8026992:	fb00 2203 	mla	r2, r0, r3, r2
 8026996:	9810      	ldr	r0, [sp, #64]	; 0x40
 8026998:	eb00 0882 	add.w	r8, r0, r2, lsl #2
 802699c:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 80269a0:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 80269a4:	2900      	cmp	r1, #0
 80269a6:	f000 81a6 	beq.w	8026cf6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 80269aa:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80269ae:	900c      	str	r0, [sp, #48]	; 0x30
 80269b0:	0e00      	lsrs	r0, r0, #24
 80269b2:	9013      	str	r0, [sp, #76]	; 0x4c
 80269b4:	f1bc 0f00 	cmp.w	ip, #0
 80269b8:	d00f      	beq.n	80269da <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 80269ba:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80269be:	3b01      	subs	r3, #1
 80269c0:	009b      	lsls	r3, r3, #2
 80269c2:	3304      	adds	r3, #4
 80269c4:	eb08 0003 	add.w	r0, r8, r3
 80269c8:	f858 3003 	ldr.w	r3, [r8, r3]
 80269cc:	9308      	str	r3, [sp, #32]
 80269ce:	0e1b      	lsrs	r3, r3, #24
 80269d0:	9311      	str	r3, [sp, #68]	; 0x44
 80269d2:	6843      	ldr	r3, [r0, #4]
 80269d4:	930d      	str	r3, [sp, #52]	; 0x34
 80269d6:	0e1b      	lsrs	r3, r3, #24
 80269d8:	9314      	str	r3, [sp, #80]	; 0x50
 80269da:	b289      	uxth	r1, r1
 80269dc:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80269de:	fa1f fc8c 	uxth.w	ip, ip
 80269e2:	0108      	lsls	r0, r1, #4
 80269e4:	fb01 f90c 	mul.w	r9, r1, ip
 80269e8:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 80269ec:	ebc9 1c0c 	rsb	ip, r9, ip, lsl #4
 80269f0:	eba0 0809 	sub.w	r8, r0, r9
 80269f4:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80269f6:	fa1f f18c 	uxth.w	r1, ip
 80269fa:	fa1f f888 	uxth.w	r8, r8
 80269fe:	1a5b      	subs	r3, r3, r1
 8026a00:	fb08 f000 	mul.w	r0, r8, r0
 8026a04:	b29b      	uxth	r3, r3
 8026a06:	fb03 000e 	mla	r0, r3, lr, r0
 8026a0a:	fb01 0004 	mla	r0, r1, r4, r0
 8026a0e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8026a10:	fb09 0004 	mla	r0, r9, r4, r0
 8026a14:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8026a18:	2800      	cmp	r0, #0
 8026a1a:	f000 80f2 	beq.w	8026c02 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8026a1e:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8026a22:	d01b      	beq.n	8026a5c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8026a24:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 8026a28:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8026a2c:	fb0e fa0a 	mul.w	sl, lr, sl
 8026a30:	fb0e fe02 	mul.w	lr, lr, r2
 8026a34:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8026a38:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8026a3c:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8026a40:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8026a44:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8026a48:	4452      	add	r2, sl
 8026a4a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026a4e:	0a12      	lsrs	r2, r2, #8
 8026a50:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8026a54:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8026a58:	ea42 020c 	orr.w	r2, r2, ip
 8026a5c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8026a5e:	2cff      	cmp	r4, #255	; 0xff
 8026a60:	d021      	beq.n	8026aa6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8026a62:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8026a64:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8026a68:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8026a6a:	fb04 fb0b 	mul.w	fp, r4, fp
 8026a6e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8026a70:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8026a74:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8026a76:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8026a7a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8026a7e:	fb04 fa0a 	mul.w	sl, r4, sl
 8026a82:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026a86:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8026a8a:	44de      	add	lr, fp
 8026a8c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8026a90:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026a94:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026a98:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026a9c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026aa0:	ea4e 040a 	orr.w	r4, lr, sl
 8026aa4:	940c      	str	r4, [sp, #48]	; 0x30
 8026aa6:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8026aa8:	2cff      	cmp	r4, #255	; 0xff
 8026aaa:	d021      	beq.n	8026af0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 8026aac:	9c08      	ldr	r4, [sp, #32]
 8026aae:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8026ab2:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8026ab4:	fb04 fb0b 	mul.w	fp, r4, fp
 8026ab8:	9c08      	ldr	r4, [sp, #32]
 8026aba:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8026abe:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8026ac0:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8026ac4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8026ac8:	fb04 fa0a 	mul.w	sl, r4, sl
 8026acc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026ad0:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8026ad4:	44de      	add	lr, fp
 8026ad6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8026ada:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026ade:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026ae2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026ae6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026aea:	ea4e 040a 	orr.w	r4, lr, sl
 8026aee:	9408      	str	r4, [sp, #32]
 8026af0:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8026af2:	2cff      	cmp	r4, #255	; 0xff
 8026af4:	d021      	beq.n	8026b3a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8026af6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8026af8:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8026afc:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8026afe:	fb04 fb0b 	mul.w	fp, r4, fp
 8026b02:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8026b04:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8026b08:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8026b0a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8026b0e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8026b12:	fb04 fa0a 	mul.w	sl, r4, sl
 8026b16:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026b1a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8026b1e:	44de      	add	lr, fp
 8026b20:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8026b24:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026b28:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026b2c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026b30:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026b34:	ea4e 040a 	orr.w	r4, lr, sl
 8026b38:	940d      	str	r4, [sp, #52]	; 0x34
 8026b3a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8026b3c:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8026b40:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8026b44:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8026b48:	9c08      	ldr	r4, [sp, #32]
 8026b4a:	fb08 fc0c 	mul.w	ip, r8, ip
 8026b4e:	fb03 cc0e 	mla	ip, r3, lr, ip
 8026b52:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8026b56:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8026b58:	fb01 cc0e 	mla	ip, r1, lr, ip
 8026b5c:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8026b60:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8026b62:	fb09 cc0e 	mla	ip, r9, lr, ip
 8026b66:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8026b6a:	fb08 f80e 	mul.w	r8, r8, lr
 8026b6e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026b72:	fb03 8202 	mla	r2, r3, r2, r8
 8026b76:	9b08      	ldr	r3, [sp, #32]
 8026b78:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026b7c:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 8026b80:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8026b82:	fb01 220a 	mla	r2, r1, sl, r2
 8026b86:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 8026b8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8026b8c:	fb09 2901 	mla	r9, r9, r1, r2
 8026b90:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8026b92:	4343      	muls	r3, r0
 8026b94:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8026b98:	1c58      	adds	r0, r3, #1
 8026b9a:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8026b9e:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8026ba2:	783b      	ldrb	r3, [r7, #0]
 8026ba4:	ea4c 0c09 	orr.w	ip, ip, r9
 8026ba8:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8026bac:	fa5f f28c 	uxtb.w	r2, ip
 8026bb0:	b2c0      	uxtb	r0, r0
 8026bb2:	fb12 f201 	smulbb	r2, r2, r1
 8026bb6:	fb03 2300 	mla	r3, r3, r0, r2
 8026bba:	b29b      	uxth	r3, r3
 8026bbc:	1c5a      	adds	r2, r3, #1
 8026bbe:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8026bc2:	787a      	ldrb	r2, [r7, #1]
 8026bc4:	fb12 f200 	smulbb	r2, r2, r0
 8026bc8:	121b      	asrs	r3, r3, #8
 8026bca:	703b      	strb	r3, [r7, #0]
 8026bcc:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8026bd0:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8026bd4:	fb03 2301 	mla	r3, r3, r1, r2
 8026bd8:	b29b      	uxth	r3, r3
 8026bda:	1c5a      	adds	r2, r3, #1
 8026bdc:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8026be0:	121b      	asrs	r3, r3, #8
 8026be2:	707b      	strb	r3, [r7, #1]
 8026be4:	78bb      	ldrb	r3, [r7, #2]
 8026be6:	fb13 f000 	smulbb	r0, r3, r0
 8026bea:	fb0c 0c01 	mla	ip, ip, r1, r0
 8026bee:	fa1f fc8c 	uxth.w	ip, ip
 8026bf2:	f10c 0301 	add.w	r3, ip, #1
 8026bf6:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8026bfa:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8026bfe:	f887 c002 	strb.w	ip, [r7, #2]
 8026c02:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8026c04:	3703      	adds	r7, #3
 8026c06:	441d      	add	r5, r3
 8026c08:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8026c0a:	441e      	add	r6, r3
 8026c0c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8026c0e:	3b01      	subs	r3, #1
 8026c10:	9318      	str	r3, [sp, #96]	; 0x60
 8026c12:	e69f      	b.n	8026954 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8026c14:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8026c16:	441d      	add	r5, r3
 8026c18:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8026c1a:	441e      	add	r6, r3
 8026c1c:	9b07      	ldr	r3, [sp, #28]
 8026c1e:	3b01      	subs	r3, #1
 8026c20:	9307      	str	r3, [sp, #28]
 8026c22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026c24:	3303      	adds	r3, #3
 8026c26:	930a      	str	r3, [sp, #40]	; 0x28
 8026c28:	e674      	b.n	8026914 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8026c2a:	d025      	beq.n	8026c78 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 8026c2c:	9b07      	ldr	r3, [sp, #28]
 8026c2e:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8026c30:	3b01      	subs	r3, #1
 8026c32:	fb00 5003 	mla	r0, r0, r3, r5
 8026c36:	1400      	asrs	r0, r0, #16
 8026c38:	f53f ae89 	bmi.w	802694e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8026c3c:	3901      	subs	r1, #1
 8026c3e:	4288      	cmp	r0, r1
 8026c40:	f6bf ae85 	bge.w	802694e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8026c44:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8026c46:	fb01 6303 	mla	r3, r1, r3, r6
 8026c4a:	141b      	asrs	r3, r3, #16
 8026c4c:	f53f ae7f 	bmi.w	802694e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8026c50:	3a01      	subs	r2, #1
 8026c52:	4293      	cmp	r3, r2
 8026c54:	f6bf ae7b 	bge.w	802694e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8026c58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026c5a:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8026c5e:	f103 0e03 	add.w	lr, r3, #3
 8026c62:	f1bb 0f00 	cmp.w	fp, #0
 8026c66:	dc6e      	bgt.n	8026d46 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 8026c68:	9b07      	ldr	r3, [sp, #28]
 8026c6a:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8026c6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026c70:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8026c74:	4423      	add	r3, r4
 8026c76:	930a      	str	r3, [sp, #40]	; 0x28
 8026c78:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8026c7a:	2b00      	cmp	r3, #0
 8026c7c:	f340 81ab 	ble.w	8026fd6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 8026c80:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8026c84:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8026c86:	ee30 0a04 	vadd.f32	s0, s0, s8
 8026c8a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8026c8e:	eef0 6a62 	vmov.f32	s13, s5
 8026c92:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8026c96:	ee31 1a05 	vadd.f32	s2, s2, s10
 8026c9a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026c9e:	ee16 5a90 	vmov	r5, s13
 8026ca2:	eef0 6a43 	vmov.f32	s13, s6
 8026ca6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026caa:	ee16 6a90 	vmov	r6, s13
 8026cae:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8026cb2:	ee61 7a27 	vmul.f32	s15, s2, s15
 8026cb6:	ee77 2a62 	vsub.f32	s5, s14, s5
 8026cba:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8026cbe:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8026cc2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8026cc6:	ee12 2a90 	vmov	r2, s5
 8026cca:	eef0 2a47 	vmov.f32	s5, s14
 8026cce:	fb92 f3f3 	sdiv	r3, r2, r3
 8026cd2:	ee13 2a10 	vmov	r2, s6
 8026cd6:	9329      	str	r3, [sp, #164]	; 0xa4
 8026cd8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8026cda:	eeb0 3a67 	vmov.f32	s6, s15
 8026cde:	fb92 f3f3 	sdiv	r3, r2, r3
 8026ce2:	932a      	str	r3, [sp, #168]	; 0xa8
 8026ce4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8026ce6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8026ce8:	3b01      	subs	r3, #1
 8026cea:	9317      	str	r3, [sp, #92]	; 0x5c
 8026cec:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8026cee:	bf08      	it	eq
 8026cf0:	4613      	moveq	r3, r2
 8026cf2:	9307      	str	r3, [sp, #28]
 8026cf4:	e600      	b.n	80268f8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8026cf6:	f1bc 0f00 	cmp.w	ip, #0
 8026cfa:	f43f ae6e 	beq.w	80269da <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8026cfe:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8026d02:	9308      	str	r3, [sp, #32]
 8026d04:	0e1b      	lsrs	r3, r3, #24
 8026d06:	9311      	str	r3, [sp, #68]	; 0x44
 8026d08:	e667      	b.n	80269da <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8026d0a:	f112 0801 	adds.w	r8, r2, #1
 8026d0e:	f53f af78 	bmi.w	8026c02 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8026d12:	45c6      	cmp	lr, r8
 8026d14:	f6ff af75 	blt.w	8026c02 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8026d18:	f110 0801 	adds.w	r8, r0, #1
 8026d1c:	f53f af71 	bmi.w	8026c02 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8026d20:	4543      	cmp	r3, r8
 8026d22:	f6ff af6e 	blt.w	8026c02 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8026d26:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8026d28:	b21b      	sxth	r3, r3
 8026d2a:	9201      	str	r2, [sp, #4]
 8026d2c:	9300      	str	r3, [sp, #0]
 8026d2e:	fa0f f38e 	sxth.w	r3, lr
 8026d32:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8026d34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8026d38:	e9cd c404 	strd	ip, r4, [sp, #16]
 8026d3c:	4639      	mov	r1, r7
 8026d3e:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8026d40:	f7ff fc79 	bl	8026636 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 8026d44:	e75d      	b.n	8026c02 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8026d46:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8026d48:	142f      	asrs	r7, r5, #16
 8026d4a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8026d4c:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8026d50:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8026d54:	1433      	asrs	r3, r6, #16
 8026d56:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8026d5a:	fb02 7303 	mla	r3, r2, r3, r7
 8026d5e:	eb04 0783 	add.w	r7, r4, r3, lsl #2
 8026d62:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8026d66:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8026d6a:	2900      	cmp	r1, #0
 8026d6c:	f000 812a 	beq.w	8026fc4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 8026d70:	687c      	ldr	r4, [r7, #4]
 8026d72:	940e      	str	r4, [sp, #56]	; 0x38
 8026d74:	0e24      	lsrs	r4, r4, #24
 8026d76:	9415      	str	r4, [sp, #84]	; 0x54
 8026d78:	b178      	cbz	r0, 8026d9a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 8026d7a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8026d7e:	3a01      	subs	r2, #1
 8026d80:	0092      	lsls	r2, r2, #2
 8026d82:	3204      	adds	r2, #4
 8026d84:	eb07 0802 	add.w	r8, r7, r2
 8026d88:	58ba      	ldr	r2, [r7, r2]
 8026d8a:	9209      	str	r2, [sp, #36]	; 0x24
 8026d8c:	0e12      	lsrs	r2, r2, #24
 8026d8e:	9212      	str	r2, [sp, #72]	; 0x48
 8026d90:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8026d94:	920f      	str	r2, [sp, #60]	; 0x3c
 8026d96:	0e12      	lsrs	r2, r2, #24
 8026d98:	9216      	str	r2, [sp, #88]	; 0x58
 8026d9a:	b289      	uxth	r1, r1
 8026d9c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8026d9e:	b280      	uxth	r0, r0
 8026da0:	fb01 f900 	mul.w	r9, r1, r0
 8026da4:	0109      	lsls	r1, r1, #4
 8026da6:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8026daa:	eba1 0809 	sub.w	r8, r1, r9
 8026dae:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 8026db2:	9915      	ldr	r1, [sp, #84]	; 0x54
 8026db4:	b280      	uxth	r0, r0
 8026db6:	fa1f f888 	uxth.w	r8, r8
 8026dba:	1a12      	subs	r2, r2, r0
 8026dbc:	fb08 f101 	mul.w	r1, r8, r1
 8026dc0:	b292      	uxth	r2, r2
 8026dc2:	fb02 110c 	mla	r1, r2, ip, r1
 8026dc6:	fb00 1104 	mla	r1, r0, r4, r1
 8026dca:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8026dcc:	fb09 1104 	mla	r1, r9, r4, r1
 8026dd0:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8026dd4:	2900      	cmp	r1, #0
 8026dd6:	f000 80ec 	beq.w	8026fb2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f4>
 8026dda:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8026dde:	d019      	beq.n	8026e14 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 8026de0:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8026de4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026de8:	fb0c fa0a 	mul.w	sl, ip, sl
 8026dec:	fb0c fc03 	mul.w	ip, ip, r3
 8026df0:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8026df4:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8026df8:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8026dfc:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8026e00:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8026e04:	4453      	add	r3, sl
 8026e06:	0a3f      	lsrs	r7, r7, #8
 8026e08:	0a1b      	lsrs	r3, r3, #8
 8026e0a:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8026e0e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8026e12:	433b      	orrs	r3, r7
 8026e14:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8026e16:	2cff      	cmp	r4, #255	; 0xff
 8026e18:	d020      	beq.n	8026e5c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x59e>
 8026e1a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8026e1c:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8026e20:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8026e22:	4367      	muls	r7, r4
 8026e24:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8026e26:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8026e2a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8026e2e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8026e30:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8026e34:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026e38:	fb04 fa0a 	mul.w	sl, r4, sl
 8026e3c:	44bc      	add	ip, r7
 8026e3e:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8026e42:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026e46:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8026e4a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026e4e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026e52:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026e56:	ea4c 040a 	orr.w	r4, ip, sl
 8026e5a:	940e      	str	r4, [sp, #56]	; 0x38
 8026e5c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8026e5e:	2cff      	cmp	r4, #255	; 0xff
 8026e60:	d020      	beq.n	8026ea4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e6>
 8026e62:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8026e64:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8026e68:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8026e6a:	4367      	muls	r7, r4
 8026e6c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8026e6e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8026e72:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8026e76:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8026e78:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8026e7c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026e80:	fb04 fa0a 	mul.w	sl, r4, sl
 8026e84:	44bc      	add	ip, r7
 8026e86:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8026e8a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026e8e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8026e92:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026e96:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026e9a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026e9e:	ea4c 040a 	orr.w	r4, ip, sl
 8026ea2:	9409      	str	r4, [sp, #36]	; 0x24
 8026ea4:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8026ea6:	2cff      	cmp	r4, #255	; 0xff
 8026ea8:	d020      	beq.n	8026eec <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62e>
 8026eaa:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8026eac:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8026eb0:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8026eb2:	4367      	muls	r7, r4
 8026eb4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8026eb6:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8026eba:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8026ebe:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8026ec0:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8026ec4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026ec8:	fb04 fa0a 	mul.w	sl, r4, sl
 8026ecc:	44bc      	add	ip, r7
 8026ece:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8026ed2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026ed6:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8026eda:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026ede:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026ee2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026ee6:	ea4c 040a 	orr.w	r4, ip, sl
 8026eea:	940f      	str	r4, [sp, #60]	; 0x3c
 8026eec:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8026eee:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8026ef2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026ef6:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8026efa:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8026efc:	fb08 f707 	mul.w	r7, r8, r7
 8026f00:	fb02 770c 	mla	r7, r2, ip, r7
 8026f04:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8026f08:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8026f0a:	fb00 770c 	mla	r7, r0, ip, r7
 8026f0e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8026f12:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8026f14:	fb09 770c 	mla	r7, r9, ip, r7
 8026f18:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8026f1c:	fb08 f80c 	mul.w	r8, r8, ip
 8026f20:	0a3f      	lsrs	r7, r7, #8
 8026f22:	fb02 8303 	mla	r3, r2, r3, r8
 8026f26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8026f28:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8026f2c:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8026f30:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8026f32:	fb00 330a 	mla	r3, r0, sl, r3
 8026f36:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8026f3a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8026f3c:	fb09 3c0c 	mla	ip, r9, ip, r3
 8026f40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8026f42:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026f46:	434b      	muls	r3, r1
 8026f48:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8026f4c:	1c59      	adds	r1, r3, #1
 8026f4e:	ea47 070c 	orr.w	r7, r7, ip
 8026f52:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8026f56:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8026f5a:	b2fa      	uxtb	r2, r7
 8026f5c:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8026f60:	fb12 f200 	smulbb	r2, r2, r0
 8026f64:	b2c9      	uxtb	r1, r1
 8026f66:	fb03 2301 	mla	r3, r3, r1, r2
 8026f6a:	b29b      	uxth	r3, r3
 8026f6c:	1c5a      	adds	r2, r3, #1
 8026f6e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8026f72:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8026f76:	fb12 f201 	smulbb	r2, r2, r1
 8026f7a:	121b      	asrs	r3, r3, #8
 8026f7c:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8026f80:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8026f84:	0c3f      	lsrs	r7, r7, #16
 8026f86:	fb03 2300 	mla	r3, r3, r0, r2
 8026f8a:	b29b      	uxth	r3, r3
 8026f8c:	1c5a      	adds	r2, r3, #1
 8026f8e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8026f92:	121b      	asrs	r3, r3, #8
 8026f94:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8026f98:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8026f9c:	fb13 f101 	smulbb	r1, r3, r1
 8026fa0:	fb07 1700 	mla	r7, r7, r0, r1
 8026fa4:	b2bf      	uxth	r7, r7
 8026fa6:	1c79      	adds	r1, r7, #1
 8026fa8:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 8026fac:	123f      	asrs	r7, r7, #8
 8026fae:	f80e 7c01 	strb.w	r7, [lr, #-1]
 8026fb2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8026fb4:	f10e 0e03 	add.w	lr, lr, #3
 8026fb8:	f10b 3bff 	add.w	fp, fp, #4294967295
 8026fbc:	441d      	add	r5, r3
 8026fbe:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8026fc0:	441e      	add	r6, r3
 8026fc2:	e64e      	b.n	8026c62 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a4>
 8026fc4:	2800      	cmp	r0, #0
 8026fc6:	f43f aee8 	beq.w	8026d9a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 8026fca:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8026fce:	9209      	str	r2, [sp, #36]	; 0x24
 8026fd0:	0e12      	lsrs	r2, r2, #24
 8026fd2:	9212      	str	r2, [sp, #72]	; 0x48
 8026fd4:	e6e1      	b.n	8026d9a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 8026fd6:	b01d      	add	sp, #116	; 0x74
 8026fd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08026fdc <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 8026fdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026fe0:	b087      	sub	sp, #28
 8026fe2:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	; 0x44
 8026fe6:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 8026fea:	fb05 7003 	mla	r0, r5, r3, r7
 8026fee:	2d00      	cmp	r5, #0
 8026ff0:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 8026ff4:	f89d e050 	ldrb.w	lr, [sp, #80]	; 0x50
 8026ff8:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 8026ffc:	f2c0 810a 	blt.w	8027214 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 8027000:	45a8      	cmp	r8, r5
 8027002:	f340 8107 	ble.w	8027214 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 8027006:	2f00      	cmp	r7, #0
 8027008:	f2c0 8102 	blt.w	8027210 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 802700c:	42bb      	cmp	r3, r7
 802700e:	f340 80ff 	ble.w	8027210 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 8027012:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 8027016:	1c7a      	adds	r2, r7, #1
 8027018:	f100 80ff 	bmi.w	802721a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 802701c:	4293      	cmp	r3, r2
 802701e:	f340 80fc 	ble.w	802721a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 8027022:	2c00      	cmp	r4, #0
 8027024:	f000 80fb 	beq.w	802721e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x242>
 8027028:	f8dc 0004 	ldr.w	r0, [ip, #4]
 802702c:	3501      	adds	r5, #1
 802702e:	f100 80fa 	bmi.w	8027226 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 8027032:	45a8      	cmp	r8, r5
 8027034:	f340 80f7 	ble.w	8027226 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 8027038:	f1be 0f00 	cmp.w	lr, #0
 802703c:	f000 80f6 	beq.w	802722c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x250>
 8027040:	2f00      	cmp	r7, #0
 8027042:	f2c0 80ee 	blt.w	8027222 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 8027046:	42bb      	cmp	r3, r7
 8027048:	f340 80eb 	ble.w	8027222 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 802704c:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 8027050:	3701      	adds	r7, #1
 8027052:	f100 80ee 	bmi.w	8027232 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 8027056:	42bb      	cmp	r3, r7
 8027058:	f340 80eb 	ble.w	8027232 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 802705c:	2c00      	cmp	r4, #0
 802705e:	f000 80ea 	beq.w	8027236 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x25a>
 8027062:	3301      	adds	r3, #1
 8027064:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8027068:	fa1f fc84 	uxth.w	ip, r4
 802706c:	fa1f fe8e 	uxth.w	lr, lr
 8027070:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8027074:	fb0c f90e 	mul.w	r9, ip, lr
 8027078:	0e13      	lsrs	r3, r2, #24
 802707a:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 802707e:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 8027082:	9302      	str	r3, [sp, #8]
 8027084:	ebac 0709 	sub.w	r7, ip, r9
 8027088:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 802708c:	fa1f f48e 	uxth.w	r4, lr
 8027090:	f006 1eff 	and.w	lr, r6, #16711935	; 0xff00ff
 8027094:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8027098:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 802709c:	fb0a fe0e 	mul.w	lr, sl, lr
 80270a0:	1b1b      	subs	r3, r3, r4
 80270a2:	fb0a f606 	mul.w	r6, sl, r6
 80270a6:	ea4f 6815 	mov.w	r8, r5, lsr #24
 80270aa:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 80270ae:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 80270b2:	b29b      	uxth	r3, r3
 80270b4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80270b8:	b2bf      	uxth	r7, r7
 80270ba:	9301      	str	r3, [sp, #4]
 80270bc:	44e6      	add	lr, ip
 80270be:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 80270c2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80270c6:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 80270ca:	f00e 13ff 	and.w	r3, lr, #16711935	; 0xff00ff
 80270ce:	9303      	str	r3, [sp, #12]
 80270d0:	0a33      	lsrs	r3, r6, #8
 80270d2:	f000 16ff 	and.w	r6, r0, #16711935	; 0xff00ff
 80270d6:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80270da:	9304      	str	r3, [sp, #16]
 80270dc:	fb0b f606 	mul.w	r6, fp, r6
 80270e0:	fb0b f000 	mul.w	r0, fp, r0
 80270e4:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 80270e8:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 80270ec:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80270f0:	44b6      	add	lr, r6
 80270f2:	f500 7680 	add.w	r6, r0, #256	; 0x100
 80270f6:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 80270fa:	f005 16ff 	and.w	r6, r5, #16711935	; 0xff00ff
 80270fe:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8027102:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027106:	fb08 f606 	mul.w	r6, r8, r6
 802710a:	0a03      	lsrs	r3, r0, #8
 802710c:	fb08 f505 	mul.w	r5, r8, r5
 8027110:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027114:	0a30      	lsrs	r0, r6, #8
 8027116:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 802711a:	9305      	str	r3, [sp, #20]
 802711c:	0e13      	lsrs	r3, r2, #24
 802711e:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8027122:	fb0e fe07 	mul.w	lr, lr, r7
 8027126:	4430      	add	r0, r6
 8027128:	f505 7680 	add.w	r6, r5, #256	; 0x100
 802712c:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8027130:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 8027134:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8027138:	0a00      	lsrs	r0, r0, #8
 802713a:	435e      	muls	r6, r3
 802713c:	0a2d      	lsrs	r5, r5, #8
 802713e:	435a      	muls	r2, r3
 8027140:	9b03      	ldr	r3, [sp, #12]
 8027142:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 8027146:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 802714a:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 802714e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027152:	44b4      	add	ip, r6
 8027154:	f502 7680 	add.w	r6, r2, #256	; 0x100
 8027158:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802715c:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 8027160:	9e01      	ldr	r6, [sp, #4]
 8027162:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027166:	fb03 ee06 	mla	lr, r3, r6, lr
 802716a:	9b04      	ldr	r3, [sp, #16]
 802716c:	0a12      	lsrs	r2, r2, #8
 802716e:	fb0c ee09 	mla	lr, ip, r9, lr
 8027172:	f403 467f 	and.w	r6, r3, #65280	; 0xff00
 8027176:	9b05      	ldr	r3, [sp, #20]
 8027178:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802717c:	fb00 ee04 	mla	lr, r0, r4, lr
 8027180:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027184:	f00e 10ff 	and.w	r0, lr, #16711935	; 0xff00ff
 8027188:	f403 4e7f 	and.w	lr, r3, #65280	; 0xff00
 802718c:	9b01      	ldr	r3, [sp, #4]
 802718e:	fb07 fe0e 	mul.w	lr, r7, lr
 8027192:	fb07 f70b 	mul.w	r7, r7, fp
 8027196:	fb03 ee06 	mla	lr, r3, r6, lr
 802719a:	fb03 730a 	mla	r3, r3, sl, r7
 802719e:	fb09 e202 	mla	r2, r9, r2, lr
 80271a2:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 80271a6:	fb04 2e0e 	mla	lr, r4, lr, r2
 80271aa:	fb04 3408 	mla	r4, r4, r8, r3
 80271ae:	9b02      	ldr	r3, [sp, #8]
 80271b0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80271b4:	fb09 4903 	mla	r9, r9, r3, r4
 80271b8:	780b      	ldrb	r3, [r1, #0]
 80271ba:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80271be:	ea6f 2929 	mvn.w	r9, r9, asr #8
 80271c2:	ea40 0e0e 	orr.w	lr, r0, lr
 80271c6:	fa5f f989 	uxtb.w	r9, r9
 80271ca:	fb03 f209 	mul.w	r2, r3, r9
 80271ce:	1c53      	adds	r3, r2, #1
 80271d0:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80271d4:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 80271d8:	700b      	strb	r3, [r1, #0]
 80271da:	784b      	ldrb	r3, [r1, #1]
 80271dc:	fb03 f309 	mul.w	r3, r3, r9
 80271e0:	1c5a      	adds	r2, r3, #1
 80271e2:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80271e6:	ea4f 231e 	mov.w	r3, lr, lsr #8
 80271ea:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 80271ee:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80271f2:	704b      	strb	r3, [r1, #1]
 80271f4:	788b      	ldrb	r3, [r1, #2]
 80271f6:	fb03 f909 	mul.w	r9, r3, r9
 80271fa:	f109 0301 	add.w	r3, r9, #1
 80271fe:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 8027202:	eb0e 2e19 	add.w	lr, lr, r9, lsr #8
 8027206:	f881 e002 	strb.w	lr, [r1, #2]
 802720a:	b007      	add	sp, #28
 802720c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027210:	2600      	movs	r6, #0
 8027212:	e700      	b.n	8027016 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3a>
 8027214:	2000      	movs	r0, #0
 8027216:	4606      	mov	r6, r0
 8027218:	e708      	b.n	802702c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 802721a:	2000      	movs	r0, #0
 802721c:	e706      	b.n	802702c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 802721e:	4620      	mov	r0, r4
 8027220:	e704      	b.n	802702c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 8027222:	2500      	movs	r5, #0
 8027224:	e714      	b.n	8027050 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x74>
 8027226:	2200      	movs	r2, #0
 8027228:	4615      	mov	r5, r2
 802722a:	e71d      	b.n	8027068 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 802722c:	4672      	mov	r2, lr
 802722e:	4675      	mov	r5, lr
 8027230:	e71a      	b.n	8027068 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8027232:	2200      	movs	r2, #0
 8027234:	e718      	b.n	8027068 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8027236:	4622      	mov	r2, r4
 8027238:	e716      	b.n	8027068 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>

0802723a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802723a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802723e:	b099      	sub	sp, #100	; 0x64
 8027240:	e9cd 1215 	strd	r1, r2, [sp, #84]	; 0x54
 8027244:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8027246:	9017      	str	r0, [sp, #92]	; 0x5c
 8027248:	9306      	str	r3, [sp, #24]
 802724a:	6850      	ldr	r0, [r2, #4]
 802724c:	6812      	ldr	r2, [r2, #0]
 802724e:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
 8027252:	e9dd 5623 	ldrd	r5, r6, [sp, #140]	; 0x8c
 8027256:	fb00 1303 	mla	r3, r0, r3, r1
 802725a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802725e:	18d3      	adds	r3, r2, r3
 8027260:	9309      	str	r3, [sp, #36]	; 0x24
 8027262:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8027264:	681b      	ldr	r3, [r3, #0]
 8027266:	930e      	str	r3, [sp, #56]	; 0x38
 8027268:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802726a:	2b00      	cmp	r3, #0
 802726c:	dc03      	bgt.n	8027276 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 802726e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8027270:	2b00      	cmp	r3, #0
 8027272:	f340 8360 	ble.w	8027936 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 8027276:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8027278:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802727c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8027280:	1e48      	subs	r0, r1, #1
 8027282:	1e57      	subs	r7, r2, #1
 8027284:	9b06      	ldr	r3, [sp, #24]
 8027286:	2b00      	cmp	r3, #0
 8027288:	f340 817b 	ble.w	8027582 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x348>
 802728c:	ea5f 4c25 	movs.w	ip, r5, asr #16
 8027290:	ea4f 4326 	mov.w	r3, r6, asr #16
 8027294:	d406      	bmi.n	80272a4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8027296:	4584      	cmp	ip, r0
 8027298:	da04      	bge.n	80272a4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 802729a:	2b00      	cmp	r3, #0
 802729c:	db02      	blt.n	80272a4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 802729e:	42bb      	cmp	r3, r7
 80272a0:	f2c0 8170 	blt.w	8027584 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 80272a4:	f11c 0c01 	adds.w	ip, ip, #1
 80272a8:	f100 8160 	bmi.w	802756c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 80272ac:	4561      	cmp	r1, ip
 80272ae:	f2c0 815d 	blt.w	802756c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 80272b2:	3301      	adds	r3, #1
 80272b4:	f100 815a 	bmi.w	802756c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 80272b8:	429a      	cmp	r2, r3
 80272ba:	f2c0 8157 	blt.w	802756c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 80272be:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80272c2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80272c4:	f1b8 0f00 	cmp.w	r8, #0
 80272c8:	f340 8179 	ble.w	80275be <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 80272cc:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80272ce:	ea4f 4c26 	mov.w	ip, r6, asr #16
 80272d2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80272d4:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80272d8:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 80272dc:	142a      	asrs	r2, r5, #16
 80272de:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80272e2:	689b      	ldr	r3, [r3, #8]
 80272e4:	f100 81be 	bmi.w	8027664 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 80272e8:	f103 39ff 	add.w	r9, r3, #4294967295
 80272ec:	454a      	cmp	r2, r9
 80272ee:	f280 81b9 	bge.w	8027664 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 80272f2:	f1bc 0f00 	cmp.w	ip, #0
 80272f6:	f2c0 81b5 	blt.w	8027664 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 80272fa:	f10e 39ff 	add.w	r9, lr, #4294967295
 80272fe:	45cc      	cmp	ip, r9
 8027300:	f280 81b0 	bge.w	8027664 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8027304:	b21b      	sxth	r3, r3
 8027306:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8027308:	fb0c 2203 	mla	r2, ip, r3, r2
 802730c:	eb04 0982 	add.w	r9, r4, r2, lsl #2
 8027310:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8027314:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8027318:	2900      	cmp	r1, #0
 802731a:	f000 8197 	beq.w	802764c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 802731e:	f8d9 4004 	ldr.w	r4, [r9, #4]
 8027322:	940a      	str	r4, [sp, #40]	; 0x28
 8027324:	0e24      	lsrs	r4, r4, #24
 8027326:	9411      	str	r4, [sp, #68]	; 0x44
 8027328:	b180      	cbz	r0, 802734c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 802732a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 802732e:	3b01      	subs	r3, #1
 8027330:	009b      	lsls	r3, r3, #2
 8027332:	3304      	adds	r3, #4
 8027334:	eb09 0c03 	add.w	ip, r9, r3
 8027338:	f859 3003 	ldr.w	r3, [r9, r3]
 802733c:	9307      	str	r3, [sp, #28]
 802733e:	0e1b      	lsrs	r3, r3, #24
 8027340:	930f      	str	r3, [sp, #60]	; 0x3c
 8027342:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8027346:	930b      	str	r3, [sp, #44]	; 0x2c
 8027348:	0e1b      	lsrs	r3, r3, #24
 802734a:	9312      	str	r3, [sp, #72]	; 0x48
 802734c:	b289      	uxth	r1, r1
 802734e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8027350:	b280      	uxth	r0, r0
 8027352:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8027354:	fb01 fa00 	mul.w	sl, r1, r0
 8027358:	0109      	lsls	r1, r1, #4
 802735a:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 802735e:	eba1 090a 	sub.w	r9, r1, sl
 8027362:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 8027366:	b280      	uxth	r0, r0
 8027368:	fa1f f989 	uxth.w	r9, r9
 802736c:	1a09      	subs	r1, r1, r0
 802736e:	fb09 f303 	mul.w	r3, r9, r3
 8027372:	b289      	uxth	r1, r1
 8027374:	fb01 330e 	mla	r3, r1, lr, r3
 8027378:	fb00 3304 	mla	r3, r0, r4, r3
 802737c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802737e:	fb0a 3304 	mla	r3, sl, r4, r3
 8027382:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8027386:	2b00      	cmp	r3, #0
 8027388:	f000 80e8 	beq.w	802755c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 802738c:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8027390:	d01b      	beq.n	80273ca <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x190>
 8027392:	f002 1bff 	and.w	fp, r2, #16711935	; 0xff00ff
 8027396:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802739a:	fb0e fb0b 	mul.w	fp, lr, fp
 802739e:	fb0e fe02 	mul.w	lr, lr, r2
 80273a2:	ea4f 221b 	mov.w	r2, fp, lsr #8
 80273a6:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80273aa:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 80273ae:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80273b2:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80273b6:	445a      	add	r2, fp
 80273b8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80273bc:	0a12      	lsrs	r2, r2, #8
 80273be:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80273c2:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80273c6:	ea42 020c 	orr.w	r2, r2, ip
 80273ca:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80273cc:	2cff      	cmp	r4, #255	; 0xff
 80273ce:	d021      	beq.n	8027414 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 80273d0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80273d2:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80273d6:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80273d8:	fb04 fc0c 	mul.w	ip, r4, ip
 80273dc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80273de:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80273e2:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 80273e6:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80273e8:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80273ec:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80273f0:	fb04 fb0b 	mul.w	fp, r4, fp
 80273f4:	44e6      	add	lr, ip
 80273f6:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 80273fa:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80273fe:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 8027402:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027406:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 802740a:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 802740e:	ea4e 040b 	orr.w	r4, lr, fp
 8027412:	940a      	str	r4, [sp, #40]	; 0x28
 8027414:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8027416:	2cff      	cmp	r4, #255	; 0xff
 8027418:	d021      	beq.n	802745e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 802741a:	9c07      	ldr	r4, [sp, #28]
 802741c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8027420:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8027422:	fb04 fc0c 	mul.w	ip, r4, ip
 8027426:	9c07      	ldr	r4, [sp, #28]
 8027428:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 802742c:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 8027430:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8027432:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8027436:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802743a:	fb04 fb0b 	mul.w	fp, r4, fp
 802743e:	44e6      	add	lr, ip
 8027440:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 8027444:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027448:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 802744c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027450:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8027454:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8027458:	ea4e 040b 	orr.w	r4, lr, fp
 802745c:	9407      	str	r4, [sp, #28]
 802745e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8027460:	2cff      	cmp	r4, #255	; 0xff
 8027462:	d021      	beq.n	80274a8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 8027464:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8027466:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802746a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802746c:	fb04 fc0c 	mul.w	ip, r4, ip
 8027470:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8027472:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8027476:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 802747a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802747c:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8027480:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027484:	fb04 fb0b 	mul.w	fp, r4, fp
 8027488:	44e6      	add	lr, ip
 802748a:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 802748e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027492:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 8027496:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802749a:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 802749e:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 80274a2:	ea4e 040b 	orr.w	r4, lr, fp
 80274a6:	940b      	str	r4, [sp, #44]	; 0x2c
 80274a8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80274aa:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 80274ae:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80274b2:	2bff      	cmp	r3, #255	; 0xff
 80274b4:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80274b8:	9c07      	ldr	r4, [sp, #28]
 80274ba:	fb09 fc0c 	mul.w	ip, r9, ip
 80274be:	fb01 cc0e 	mla	ip, r1, lr, ip
 80274c2:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80274c6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80274c8:	fb00 cc0e 	mla	ip, r0, lr, ip
 80274cc:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80274d0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80274d2:	fb0a cc0e 	mla	ip, sl, lr, ip
 80274d6:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 80274da:	fb09 f90e 	mul.w	r9, r9, lr
 80274de:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80274e2:	fb01 9202 	mla	r2, r1, r2, r9
 80274e6:	9907      	ldr	r1, [sp, #28]
 80274e8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80274ec:	f401 4b7f 	and.w	fp, r1, #65280	; 0xff00
 80274f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80274f2:	fb00 220b 	mla	r2, r0, fp, r2
 80274f6:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 80274fa:	fb0a 2a00 	mla	sl, sl, r0, r2
 80274fe:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027502:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027506:	ea4c 0c0a 	orr.w	ip, ip, sl
 802750a:	fa5f f08c 	uxtb.w	r0, ip
 802750e:	f3cc 2107 	ubfx	r1, ip, #8, #8
 8027512:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8027516:	f000 80a2 	beq.w	802765e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 802751a:	43db      	mvns	r3, r3
 802751c:	783a      	ldrb	r2, [r7, #0]
 802751e:	f897 a002 	ldrb.w	sl, [r7, #2]
 8027522:	b2db      	uxtb	r3, r3
 8027524:	fb02 fe03 	mul.w	lr, r2, r3
 8027528:	fb0a fa03 	mul.w	sl, sl, r3
 802752c:	f10e 0201 	add.w	r2, lr, #1
 8027530:	eb02 221e 	add.w	r2, r2, lr, lsr #8
 8027534:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8027538:	703a      	strb	r2, [r7, #0]
 802753a:	787a      	ldrb	r2, [r7, #1]
 802753c:	fb02 f003 	mul.w	r0, r2, r3
 8027540:	f10a 0301 	add.w	r3, sl, #1
 8027544:	1c42      	adds	r2, r0, #1
 8027546:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 802754a:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 802754e:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8027552:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8027556:	707a      	strb	r2, [r7, #1]
 8027558:	f887 c002 	strb.w	ip, [r7, #2]
 802755c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 802755e:	3703      	adds	r7, #3
 8027560:	f108 38ff 	add.w	r8, r8, #4294967295
 8027564:	441d      	add	r5, r3
 8027566:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8027568:	441e      	add	r6, r3
 802756a:	e6ab      	b.n	80272c4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802756c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 802756e:	441d      	add	r5, r3
 8027570:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8027572:	441e      	add	r6, r3
 8027574:	9b06      	ldr	r3, [sp, #24]
 8027576:	3b01      	subs	r3, #1
 8027578:	9306      	str	r3, [sp, #24]
 802757a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802757c:	3303      	adds	r3, #3
 802757e:	9309      	str	r3, [sp, #36]	; 0x24
 8027580:	e680      	b.n	8027284 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8027582:	d024      	beq.n	80275ce <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8027584:	9b06      	ldr	r3, [sp, #24]
 8027586:	9825      	ldr	r0, [sp, #148]	; 0x94
 8027588:	3b01      	subs	r3, #1
 802758a:	fb00 5003 	mla	r0, r0, r3, r5
 802758e:	1400      	asrs	r0, r0, #16
 8027590:	f53f ae95 	bmi.w	80272be <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8027594:	3901      	subs	r1, #1
 8027596:	4288      	cmp	r0, r1
 8027598:	f6bf ae91 	bge.w	80272be <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 802759c:	9926      	ldr	r1, [sp, #152]	; 0x98
 802759e:	fb01 6303 	mla	r3, r1, r3, r6
 80275a2:	141b      	asrs	r3, r3, #16
 80275a4:	f53f ae8b 	bmi.w	80272be <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80275a8:	3a01      	subs	r2, #1
 80275aa:	4293      	cmp	r3, r2
 80275ac:	f6bf ae87 	bge.w	80272be <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80275b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80275b2:	f8dd b018 	ldr.w	fp, [sp, #24]
 80275b6:	1cdf      	adds	r7, r3, #3
 80275b8:	f1bb 0f00 	cmp.w	fp, #0
 80275bc:	dc6e      	bgt.n	802769c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
 80275be:	9b06      	ldr	r3, [sp, #24]
 80275c0:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80275c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80275c6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80275ca:	4423      	add	r3, r4
 80275cc:	9309      	str	r3, [sp, #36]	; 0x24
 80275ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80275d0:	2b00      	cmp	r3, #0
 80275d2:	f340 81b0 	ble.w	8027936 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 80275d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80275da:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80275dc:	ee30 0a04 	vadd.f32	s0, s0, s8
 80275e0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80275e4:	eef0 6a62 	vmov.f32	s13, s5
 80275e8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80275ec:	ee31 1a05 	vadd.f32	s2, s2, s10
 80275f0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80275f4:	ee16 5a90 	vmov	r5, s13
 80275f8:	eef0 6a43 	vmov.f32	s13, s6
 80275fc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027600:	ee16 6a90 	vmov	r6, s13
 8027604:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8027608:	ee61 7a27 	vmul.f32	s15, s2, s15
 802760c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8027610:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8027614:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8027618:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802761c:	ee12 2a90 	vmov	r2, s5
 8027620:	eef0 2a47 	vmov.f32	s5, s14
 8027624:	fb92 f3f3 	sdiv	r3, r2, r3
 8027628:	ee13 2a10 	vmov	r2, s6
 802762c:	9325      	str	r3, [sp, #148]	; 0x94
 802762e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8027630:	eeb0 3a67 	vmov.f32	s6, s15
 8027634:	fb92 f3f3 	sdiv	r3, r2, r3
 8027638:	9326      	str	r3, [sp, #152]	; 0x98
 802763a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802763c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 802763e:	3b01      	subs	r3, #1
 8027640:	9315      	str	r3, [sp, #84]	; 0x54
 8027642:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8027644:	bf08      	it	eq
 8027646:	4613      	moveq	r3, r2
 8027648:	9306      	str	r3, [sp, #24]
 802764a:	e60d      	b.n	8027268 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 802764c:	2800      	cmp	r0, #0
 802764e:	f43f ae7d 	beq.w	802734c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 8027652:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8027656:	9307      	str	r3, [sp, #28]
 8027658:	0e1b      	lsrs	r3, r3, #24
 802765a:	930f      	str	r3, [sp, #60]	; 0x3c
 802765c:	e676      	b.n	802734c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 802765e:	7038      	strb	r0, [r7, #0]
 8027660:	7079      	strb	r1, [r7, #1]
 8027662:	e779      	b.n	8027558 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 8027664:	f112 0901 	adds.w	r9, r2, #1
 8027668:	f53f af78 	bmi.w	802755c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 802766c:	454b      	cmp	r3, r9
 802766e:	f6ff af75 	blt.w	802755c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8027672:	f11c 0901 	adds.w	r9, ip, #1
 8027676:	f53f af71 	bmi.w	802755c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 802767a:	45ce      	cmp	lr, r9
 802767c:	f6ff af6e 	blt.w	802755c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8027680:	b21b      	sxth	r3, r3
 8027682:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 8027686:	fa0f f28e 	sxth.w	r2, lr
 802768a:	e9cd 1003 	strd	r1, r0, [sp, #12]
 802768e:	9200      	str	r2, [sp, #0]
 8027690:	4639      	mov	r1, r7
 8027692:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8027694:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8027696:	f7ff fca1 	bl	8026fdc <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 802769a:	e75f      	b.n	802755c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 802769c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802769e:	1429      	asrs	r1, r5, #16
 80276a0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80276a2:	f3c5 3203 	ubfx	r2, r5, #12, #4
 80276a6:	f9b3 c008 	ldrsh.w	ip, [r3, #8]
 80276aa:	1433      	asrs	r3, r6, #16
 80276ac:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80276b0:	fb0c 1303 	mla	r3, ip, r3, r1
 80276b4:	990e      	ldr	r1, [sp, #56]	; 0x38
 80276b6:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80276ba:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80276be:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 80276c2:	2a00      	cmp	r2, #0
 80276c4:	f000 8129 	beq.w	802791a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e0>
 80276c8:	684c      	ldr	r4, [r1, #4]
 80276ca:	940c      	str	r4, [sp, #48]	; 0x30
 80276cc:	0e24      	lsrs	r4, r4, #24
 80276ce:	9413      	str	r4, [sp, #76]	; 0x4c
 80276d0:	b198      	cbz	r0, 80276fa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 80276d2:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
 80276d6:	f10c 3cff 	add.w	ip, ip, #4294967295
 80276da:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80276de:	f10c 0c04 	add.w	ip, ip, #4
 80276e2:	eb01 080c 	add.w	r8, r1, ip
 80276e6:	f851 100c 	ldr.w	r1, [r1, ip]
 80276ea:	9108      	str	r1, [sp, #32]
 80276ec:	0e09      	lsrs	r1, r1, #24
 80276ee:	9110      	str	r1, [sp, #64]	; 0x40
 80276f0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80276f4:	910d      	str	r1, [sp, #52]	; 0x34
 80276f6:	0e09      	lsrs	r1, r1, #24
 80276f8:	9114      	str	r1, [sp, #80]	; 0x50
 80276fa:	b292      	uxth	r2, r2
 80276fc:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80276fe:	b280      	uxth	r0, r0
 8027700:	fb02 f900 	mul.w	r9, r2, r0
 8027704:	0112      	lsls	r2, r2, #4
 8027706:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 802770a:	eba2 0809 	sub.w	r8, r2, r9
 802770e:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8027712:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8027714:	b280      	uxth	r0, r0
 8027716:	fa1f f888 	uxth.w	r8, r8
 802771a:	1a09      	subs	r1, r1, r0
 802771c:	fb08 f202 	mul.w	r2, r8, r2
 8027720:	b289      	uxth	r1, r1
 8027722:	fb01 220e 	mla	r2, r1, lr, r2
 8027726:	fb00 2204 	mla	r2, r0, r4, r2
 802772a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802772c:	fb09 2204 	mla	r2, r9, r4, r2
 8027730:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8027734:	2a00      	cmp	r2, #0
 8027736:	f000 80e8 	beq.w	802790a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d0>
 802773a:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 802773e:	d01b      	beq.n	8027778 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53e>
 8027740:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8027744:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8027748:	fb0e fa0a 	mul.w	sl, lr, sl
 802774c:	fb0e fe03 	mul.w	lr, lr, r3
 8027750:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8027754:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8027758:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 802775c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8027760:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8027764:	4453      	add	r3, sl
 8027766:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802776a:	0a1b      	lsrs	r3, r3, #8
 802776c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8027770:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8027774:	ea43 030c 	orr.w	r3, r3, ip
 8027778:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802777a:	2cff      	cmp	r4, #255	; 0xff
 802777c:	d021      	beq.n	80277c2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x588>
 802777e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8027780:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8027784:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8027786:	fb04 fc0c 	mul.w	ip, r4, ip
 802778a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802778c:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8027790:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8027794:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8027796:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802779a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802779e:	fb04 fa0a 	mul.w	sl, r4, sl
 80277a2:	44e6      	add	lr, ip
 80277a4:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80277a8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80277ac:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80277b0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80277b4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80277b8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80277bc:	ea4e 040a 	orr.w	r4, lr, sl
 80277c0:	940c      	str	r4, [sp, #48]	; 0x30
 80277c2:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80277c4:	2cff      	cmp	r4, #255	; 0xff
 80277c6:	d021      	beq.n	802780c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d2>
 80277c8:	9c08      	ldr	r4, [sp, #32]
 80277ca:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80277ce:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80277d0:	fb04 fc0c 	mul.w	ip, r4, ip
 80277d4:	9c08      	ldr	r4, [sp, #32]
 80277d6:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 80277da:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80277dc:	fb04 fa0e 	mul.w	sl, r4, lr
 80277e0:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80277e4:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80277e8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80277ec:	44e6      	add	lr, ip
 80277ee:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80277f2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80277f6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80277fa:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80277fe:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027802:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027806:	ea4e 040a 	orr.w	r4, lr, sl
 802780a:	9408      	str	r4, [sp, #32]
 802780c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802780e:	2cff      	cmp	r4, #255	; 0xff
 8027810:	d021      	beq.n	8027856 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61c>
 8027812:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8027814:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8027818:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802781a:	fb04 fc0c 	mul.w	ip, r4, ip
 802781e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8027820:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8027824:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8027828:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802782a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802782e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027832:	fb04 fa0a 	mul.w	sl, r4, sl
 8027836:	44e6      	add	lr, ip
 8027838:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802783c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027840:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8027844:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027848:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802784c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027850:	ea4e 040a 	orr.w	r4, lr, sl
 8027854:	940d      	str	r4, [sp, #52]	; 0x34
 8027856:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8027858:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 802785c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8027860:	2aff      	cmp	r2, #255	; 0xff
 8027862:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8027866:	9c08      	ldr	r4, [sp, #32]
 8027868:	fb08 fc0c 	mul.w	ip, r8, ip
 802786c:	fb01 cc0e 	mla	ip, r1, lr, ip
 8027870:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8027874:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8027876:	fb00 cc0e 	mla	ip, r0, lr, ip
 802787a:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 802787e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8027880:	fb09 cc0e 	mla	ip, r9, lr, ip
 8027884:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8027888:	fb08 f80e 	mul.w	r8, r8, lr
 802788c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027890:	fb01 8303 	mla	r3, r1, r3, r8
 8027894:	9908      	ldr	r1, [sp, #32]
 8027896:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802789a:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 802789e:	990d      	ldr	r1, [sp, #52]	; 0x34
 80278a0:	fb00 330a 	mla	r3, r0, sl, r3
 80278a4:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 80278a8:	fb09 3e0e 	mla	lr, r9, lr, r3
 80278ac:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80278b0:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80278b4:	ea4c 0c0e 	orr.w	ip, ip, lr
 80278b8:	fa5f f08c 	uxtb.w	r0, ip
 80278bc:	f3cc 2107 	ubfx	r1, ip, #8, #8
 80278c0:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80278c4:	d032      	beq.n	802792c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f2>
 80278c6:	43d2      	mvns	r2, r2
 80278c8:	f817 ec03 	ldrb.w	lr, [r7, #-3]
 80278cc:	b2d2      	uxtb	r2, r2
 80278ce:	fb0e fe02 	mul.w	lr, lr, r2
 80278d2:	f10e 0301 	add.w	r3, lr, #1
 80278d6:	eb03 231e 	add.w	r3, r3, lr, lsr #8
 80278da:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 80278de:	f817 0c02 	ldrb.w	r0, [r7, #-2]
 80278e2:	4350      	muls	r0, r2
 80278e4:	f807 3c03 	strb.w	r3, [r7, #-3]
 80278e8:	1c43      	adds	r3, r0, #1
 80278ea:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80278ee:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80278f2:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80278f6:	4353      	muls	r3, r2
 80278f8:	f807 1c02 	strb.w	r1, [r7, #-2]
 80278fc:	1c5a      	adds	r2, r3, #1
 80278fe:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8027902:	eb0c 2c12 	add.w	ip, ip, r2, lsr #8
 8027906:	f807 cc01 	strb.w	ip, [r7, #-1]
 802790a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 802790c:	3703      	adds	r7, #3
 802790e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8027912:	441d      	add	r5, r3
 8027914:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8027916:	441e      	add	r6, r3
 8027918:	e64e      	b.n	80275b8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 802791a:	2800      	cmp	r0, #0
 802791c:	f43f aeed 	beq.w	80276fa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 8027920:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8027924:	9108      	str	r1, [sp, #32]
 8027926:	0e09      	lsrs	r1, r1, #24
 8027928:	9110      	str	r1, [sp, #64]	; 0x40
 802792a:	e6e6      	b.n	80276fa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 802792c:	f807 0c03 	strb.w	r0, [r7, #-3]
 8027930:	f807 1c02 	strb.w	r1, [r7, #-2]
 8027934:	e7e7      	b.n	8027906 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6cc>
 8027936:	b019      	add	sp, #100	; 0x64
 8027938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802793c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 802793c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027940:	e9dd 400b 	ldrd	r4, r0, [sp, #44]	; 0x2c
 8027944:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8027948:	2c00      	cmp	r4, #0
 802794a:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 802794e:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 8027952:	fb00 4e03 	mla	lr, r0, r3, r4
 8027956:	f89d c038 	ldrb.w	ip, [sp, #56]	; 0x38
 802795a:	f2c0 80b8 	blt.w	8027ace <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 802795e:	45a1      	cmp	r9, r4
 8027960:	f340 80b5 	ble.w	8027ace <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8027964:	2800      	cmp	r0, #0
 8027966:	f2c0 80b2 	blt.w	8027ace <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 802796a:	4580      	cmp	r8, r0
 802796c:	f340 80af 	ble.w	8027ace <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8027970:	ea4f 055e 	mov.w	r5, lr, lsr #1
 8027974:	f01e 0f01 	tst.w	lr, #1
 8027978:	5d56      	ldrb	r6, [r2, r5]
 802797a:	bf0c      	ite	eq
 802797c:	f006 060f 	andeq.w	r6, r6, #15
 8027980:	1136      	asrne	r6, r6, #4
 8027982:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8027986:	b2f6      	uxtb	r6, r6
 8027988:	f114 0a01 	adds.w	sl, r4, #1
 802798c:	f100 80a1 	bmi.w	8027ad2 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 8027990:	45d1      	cmp	r9, sl
 8027992:	f340 809e 	ble.w	8027ad2 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 8027996:	2800      	cmp	r0, #0
 8027998:	f2c0 809b 	blt.w	8027ad2 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 802799c:	4580      	cmp	r8, r0
 802799e:	f340 8098 	ble.w	8027ad2 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 80279a2:	2f00      	cmp	r7, #0
 80279a4:	f000 8097 	beq.w	8027ad6 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19a>
 80279a8:	f10e 0b01 	add.w	fp, lr, #1
 80279ac:	ea4f 055b 	mov.w	r5, fp, lsr #1
 80279b0:	f01b 0f01 	tst.w	fp, #1
 80279b4:	5d55      	ldrb	r5, [r2, r5]
 80279b6:	bf0c      	ite	eq
 80279b8:	f005 050f 	andeq.w	r5, r5, #15
 80279bc:	112d      	asrne	r5, r5, #4
 80279be:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 80279c2:	b2ed      	uxtb	r5, r5
 80279c4:	f1bc 0f00 	cmp.w	ip, #0
 80279c8:	f000 8089 	beq.w	8027ade <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a2>
 80279cc:	2c00      	cmp	r4, #0
 80279ce:	f100 0001 	add.w	r0, r0, #1
 80279d2:	f2c0 8082 	blt.w	8027ada <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 80279d6:	45a1      	cmp	r9, r4
 80279d8:	dd7f      	ble.n	8027ada <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 80279da:	2800      	cmp	r0, #0
 80279dc:	db7d      	blt.n	8027ada <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 80279de:	4580      	cmp	r8, r0
 80279e0:	dd7b      	ble.n	8027ada <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 80279e2:	eb03 0b0e 	add.w	fp, r3, lr
 80279e6:	ea4f 045b 	mov.w	r4, fp, lsr #1
 80279ea:	f01b 0f01 	tst.w	fp, #1
 80279ee:	5d14      	ldrb	r4, [r2, r4]
 80279f0:	bf0c      	ite	eq
 80279f2:	f004 040f 	andeq.w	r4, r4, #15
 80279f6:	1124      	asrne	r4, r4, #4
 80279f8:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 80279fc:	b2e4      	uxtb	r4, r4
 80279fe:	f1ba 0f00 	cmp.w	sl, #0
 8027a02:	db6f      	blt.n	8027ae4 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8027a04:	45d1      	cmp	r9, sl
 8027a06:	dd6d      	ble.n	8027ae4 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8027a08:	2800      	cmp	r0, #0
 8027a0a:	db6b      	blt.n	8027ae4 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8027a0c:	4580      	cmp	r8, r0
 8027a0e:	dd69      	ble.n	8027ae4 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8027a10:	2f00      	cmp	r7, #0
 8027a12:	d069      	beq.n	8027ae8 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ac>
 8027a14:	3301      	adds	r3, #1
 8027a16:	449e      	add	lr, r3
 8027a18:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8027a1c:	f01e 0f01 	tst.w	lr, #1
 8027a20:	5cd0      	ldrb	r0, [r2, r3]
 8027a22:	bf0c      	ite	eq
 8027a24:	f000 000f 	andeq.w	r0, r0, #15
 8027a28:	1100      	asrne	r0, r0, #4
 8027a2a:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8027a2e:	b2c3      	uxtb	r3, r0
 8027a30:	b2ba      	uxth	r2, r7
 8027a32:	fa1f fc8c 	uxth.w	ip, ip
 8027a36:	fb02 f00c 	mul.w	r0, r2, ip
 8027a3a:	0112      	lsls	r2, r2, #4
 8027a3c:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 8027a40:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 8027a44:	1a12      	subs	r2, r2, r0
 8027a46:	fa1f fc8c 	uxth.w	ip, ip
 8027a4a:	b292      	uxth	r2, r2
 8027a4c:	eba7 070c 	sub.w	r7, r7, ip
 8027a50:	436a      	muls	r2, r5
 8027a52:	b2bf      	uxth	r7, r7
 8027a54:	fb06 2207 	mla	r2, r6, r7, r2
 8027a58:	fb0c 2404 	mla	r4, ip, r4, r2
 8027a5c:	fb00 4303 	mla	r3, r0, r3, r4
 8027a60:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8027a64:	b38b      	cbz	r3, 8027aca <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x18e>
 8027a66:	4a21      	ldr	r2, [pc, #132]	; (8027aec <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b0>)
 8027a68:	6814      	ldr	r4, [r2, #0]
 8027a6a:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 8027a6e:	b2e5      	uxtb	r5, r4
 8027a70:	4353      	muls	r3, r2
 8027a72:	1c5a      	adds	r2, r3, #1
 8027a74:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8027a78:	1212      	asrs	r2, r2, #8
 8027a7a:	b290      	uxth	r0, r2
 8027a7c:	43d2      	mvns	r2, r2
 8027a7e:	fb15 f500 	smulbb	r5, r5, r0
 8027a82:	b2d3      	uxtb	r3, r2
 8027a84:	780a      	ldrb	r2, [r1, #0]
 8027a86:	fb02 5203 	mla	r2, r2, r3, r5
 8027a8a:	b292      	uxth	r2, r2
 8027a8c:	1c55      	adds	r5, r2, #1
 8027a8e:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8027a92:	784d      	ldrb	r5, [r1, #1]
 8027a94:	fb15 f503 	smulbb	r5, r5, r3
 8027a98:	1212      	asrs	r2, r2, #8
 8027a9a:	700a      	strb	r2, [r1, #0]
 8027a9c:	f3c4 2207 	ubfx	r2, r4, #8, #8
 8027aa0:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8027aa4:	fb02 5200 	mla	r2, r2, r0, r5
 8027aa8:	b292      	uxth	r2, r2
 8027aaa:	1c55      	adds	r5, r2, #1
 8027aac:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8027ab0:	1212      	asrs	r2, r2, #8
 8027ab2:	704a      	strb	r2, [r1, #1]
 8027ab4:	788a      	ldrb	r2, [r1, #2]
 8027ab6:	fb12 f303 	smulbb	r3, r2, r3
 8027aba:	fb04 3300 	mla	r3, r4, r0, r3
 8027abe:	b29b      	uxth	r3, r3
 8027ac0:	1c5a      	adds	r2, r3, #1
 8027ac2:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8027ac6:	121b      	asrs	r3, r3, #8
 8027ac8:	708b      	strb	r3, [r1, #2]
 8027aca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027ace:	2600      	movs	r6, #0
 8027ad0:	e75a      	b.n	8027988 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x4c>
 8027ad2:	2500      	movs	r5, #0
 8027ad4:	e776      	b.n	80279c4 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 8027ad6:	463d      	mov	r5, r7
 8027ad8:	e774      	b.n	80279c4 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 8027ada:	2400      	movs	r4, #0
 8027adc:	e78f      	b.n	80279fe <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xc2>
 8027ade:	4663      	mov	r3, ip
 8027ae0:	4664      	mov	r4, ip
 8027ae2:	e7a5      	b.n	8027a30 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 8027ae4:	2300      	movs	r3, #0
 8027ae6:	e7a3      	b.n	8027a30 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 8027ae8:	463b      	mov	r3, r7
 8027aea:	e7a1      	b.n	8027a30 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 8027aec:	24026248 	.word	0x24026248

08027af0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8027af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027af4:	b097      	sub	sp, #92	; 0x5c
 8027af6:	9214      	str	r2, [sp, #80]	; 0x50
 8027af8:	9309      	str	r3, [sp, #36]	; 0x24
 8027afa:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8027afc:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 8027b00:	9015      	str	r0, [sp, #84]	; 0x54
 8027b02:	910c      	str	r1, [sp, #48]	; 0x30
 8027b04:	6850      	ldr	r0, [r2, #4]
 8027b06:	930e      	str	r3, [sp, #56]	; 0x38
 8027b08:	6812      	ldr	r2, [r2, #0]
 8027b0a:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 8027b0e:	e9dd 5621 	ldrd	r5, r6, [sp, #132]	; 0x84
 8027b12:	fb00 1303 	mla	r3, r0, r3, r1
 8027b16:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8027b1a:	eb02 0a03 	add.w	sl, r2, r3
 8027b1e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8027b20:	689b      	ldr	r3, [r3, #8]
 8027b22:	3301      	adds	r3, #1
 8027b24:	f023 0301 	bic.w	r3, r3, #1
 8027b28:	930f      	str	r3, [sp, #60]	; 0x3c
 8027b2a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8027b2c:	681f      	ldr	r7, [r3, #0]
 8027b2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8027b30:	2b00      	cmp	r3, #0
 8027b32:	dc03      	bgt.n	8027b3c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8027b34:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8027b36:	2b00      	cmp	r3, #0
 8027b38:	f340 8247 	ble.w	8027fca <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 8027b3c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8027b3e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027b42:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8027b46:	1e48      	subs	r0, r1, #1
 8027b48:	f102 3cff 	add.w	ip, r2, #4294967295
 8027b4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027b4e:	2b00      	cmp	r3, #0
 8027b50:	f340 80e5 	ble.w	8027d1e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 8027b54:	ea5f 4e25 	movs.w	lr, r5, asr #16
 8027b58:	ea4f 4326 	mov.w	r3, r6, asr #16
 8027b5c:	d406      	bmi.n	8027b6c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8027b5e:	4586      	cmp	lr, r0
 8027b60:	da04      	bge.n	8027b6c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8027b62:	2b00      	cmp	r3, #0
 8027b64:	db02      	blt.n	8027b6c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8027b66:	4563      	cmp	r3, ip
 8027b68:	f2c0 80da 	blt.w	8027d20 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 8027b6c:	f11e 0e01 	adds.w	lr, lr, #1
 8027b70:	f100 80cb 	bmi.w	8027d0a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8027b74:	4571      	cmp	r1, lr
 8027b76:	f2c0 80c8 	blt.w	8027d0a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8027b7a:	3301      	adds	r3, #1
 8027b7c:	f100 80c5 	bmi.w	8027d0a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8027b80:	429a      	cmp	r2, r3
 8027b82:	f2c0 80c2 	blt.w	8027d0a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8027b86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027b88:	46d0      	mov	r8, sl
 8027b8a:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 8027b8e:	930d      	str	r3, [sp, #52]	; 0x34
 8027b90:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8027b92:	2b00      	cmp	r3, #0
 8027b94:	f340 80e3 	ble.w	8027d5e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 8027b98:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8027b9a:	1430      	asrs	r0, r6, #16
 8027b9c:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8027ba0:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8027ba4:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8027ba8:	142b      	asrs	r3, r5, #16
 8027baa:	f100 812e 	bmi.w	8027e0a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8027bae:	f10c 3bff 	add.w	fp, ip, #4294967295
 8027bb2:	455b      	cmp	r3, fp
 8027bb4:	f280 8129 	bge.w	8027e0a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8027bb8:	2800      	cmp	r0, #0
 8027bba:	f2c0 8126 	blt.w	8027e0a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8027bbe:	f10e 3bff 	add.w	fp, lr, #4294967295
 8027bc2:	4558      	cmp	r0, fp
 8027bc4:	f280 8121 	bge.w	8027e0a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8027bc8:	fb00 3309 	mla	r3, r0, r9, r3
 8027bcc:	0858      	lsrs	r0, r3, #1
 8027bce:	07dc      	lsls	r4, r3, #31
 8027bd0:	f817 c000 	ldrb.w	ip, [r7, r0]
 8027bd4:	bf54      	ite	pl
 8027bd6:	f00c 0c0f 	andpl.w	ip, ip, #15
 8027bda:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8027bde:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8027be2:	fa5f fc8c 	uxtb.w	ip, ip
 8027be6:	2a00      	cmp	r2, #0
 8027be8:	f000 80fe 	beq.w	8027de8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 8027bec:	1c58      	adds	r0, r3, #1
 8027bee:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8027bf2:	07c0      	lsls	r0, r0, #31
 8027bf4:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8027bf8:	bf54      	ite	pl
 8027bfa:	f00e 0e0f 	andpl.w	lr, lr, #15
 8027bfe:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8027c02:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8027c06:	fa5f f08e 	uxtb.w	r0, lr
 8027c0a:	9010      	str	r0, [sp, #64]	; 0x40
 8027c0c:	b1d9      	cbz	r1, 8027c46 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8027c0e:	444b      	add	r3, r9
 8027c10:	0858      	lsrs	r0, r3, #1
 8027c12:	07dc      	lsls	r4, r3, #31
 8027c14:	f103 0301 	add.w	r3, r3, #1
 8027c18:	5c38      	ldrb	r0, [r7, r0]
 8027c1a:	bf54      	ite	pl
 8027c1c:	f000 000f 	andpl.w	r0, r0, #15
 8027c20:	1100      	asrmi	r0, r0, #4
 8027c22:	07dc      	lsls	r4, r3, #31
 8027c24:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8027c28:	b2c0      	uxtb	r0, r0
 8027c2a:	900a      	str	r0, [sp, #40]	; 0x28
 8027c2c:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8027c30:	f817 e000 	ldrb.w	lr, [r7, r0]
 8027c34:	bf54      	ite	pl
 8027c36:	f00e 030f 	andpl.w	r3, lr, #15
 8027c3a:	ea4f 132e 	movmi.w	r3, lr, asr #4
 8027c3e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8027c42:	b2db      	uxtb	r3, r3
 8027c44:	9311      	str	r3, [sp, #68]	; 0x44
 8027c46:	b292      	uxth	r2, r2
 8027c48:	b289      	uxth	r1, r1
 8027c4a:	0113      	lsls	r3, r2, #4
 8027c4c:	fb02 f001 	mul.w	r0, r2, r1
 8027c50:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8027c52:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8027c56:	ebc0 1101 	rsb	r1, r0, r1, lsl #4
 8027c5a:	1a1b      	subs	r3, r3, r0
 8027c5c:	b289      	uxth	r1, r1
 8027c5e:	b29b      	uxth	r3, r3
 8027c60:	ebae 0e01 	sub.w	lr, lr, r1
 8027c64:	4353      	muls	r3, r2
 8027c66:	fa1f fe8e 	uxth.w	lr, lr
 8027c6a:	fb0c 320e 	mla	r2, ip, lr, r3
 8027c6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027c70:	fb01 2203 	mla	r2, r1, r3, r2
 8027c74:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8027c76:	fb00 2203 	mla	r2, r0, r3, r2
 8027c7a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8027c7e:	2a00      	cmp	r2, #0
 8027c80:	d039      	beq.n	8027cf6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8027c82:	4bc7      	ldr	r3, [pc, #796]	; (8027fa0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 8027c84:	6819      	ldr	r1, [r3, #0]
 8027c86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8027c88:	fa5f fc81 	uxtb.w	ip, r1
 8027c8c:	435a      	muls	r2, r3
 8027c8e:	1c53      	adds	r3, r2, #1
 8027c90:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8027c94:	1212      	asrs	r2, r2, #8
 8027c96:	b290      	uxth	r0, r2
 8027c98:	43d2      	mvns	r2, r2
 8027c9a:	fb1c fc00 	smulbb	ip, ip, r0
 8027c9e:	b2d3      	uxtb	r3, r2
 8027ca0:	f898 2000 	ldrb.w	r2, [r8]
 8027ca4:	fb02 c203 	mla	r2, r2, r3, ip
 8027ca8:	b292      	uxth	r2, r2
 8027caa:	f102 0c01 	add.w	ip, r2, #1
 8027cae:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8027cb2:	f898 c001 	ldrb.w	ip, [r8, #1]
 8027cb6:	fb1c fc03 	smulbb	ip, ip, r3
 8027cba:	1212      	asrs	r2, r2, #8
 8027cbc:	f888 2000 	strb.w	r2, [r8]
 8027cc0:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8027cc4:	f3c1 4107 	ubfx	r1, r1, #16, #8
 8027cc8:	fb02 c200 	mla	r2, r2, r0, ip
 8027ccc:	b292      	uxth	r2, r2
 8027cce:	f102 0c01 	add.w	ip, r2, #1
 8027cd2:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8027cd6:	1212      	asrs	r2, r2, #8
 8027cd8:	f888 2001 	strb.w	r2, [r8, #1]
 8027cdc:	f898 2002 	ldrb.w	r2, [r8, #2]
 8027ce0:	fb12 f303 	smulbb	r3, r2, r3
 8027ce4:	fb01 3300 	mla	r3, r1, r0, r3
 8027ce8:	b29b      	uxth	r3, r3
 8027cea:	1c5a      	adds	r2, r3, #1
 8027cec:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8027cf0:	121b      	asrs	r3, r3, #8
 8027cf2:	f888 3002 	strb.w	r3, [r8, #2]
 8027cf6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8027cf8:	f108 0803 	add.w	r8, r8, #3
 8027cfc:	441d      	add	r5, r3
 8027cfe:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8027d00:	441e      	add	r6, r3
 8027d02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8027d04:	3b01      	subs	r3, #1
 8027d06:	930d      	str	r3, [sp, #52]	; 0x34
 8027d08:	e742      	b.n	8027b90 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8027d0a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8027d0c:	f10a 0a03 	add.w	sl, sl, #3
 8027d10:	441d      	add	r5, r3
 8027d12:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8027d14:	441e      	add	r6, r3
 8027d16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027d18:	3b01      	subs	r3, #1
 8027d1a:	9309      	str	r3, [sp, #36]	; 0x24
 8027d1c:	e716      	b.n	8027b4c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8027d1e:	d024      	beq.n	8027d6a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8027d20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027d22:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8027d24:	3b01      	subs	r3, #1
 8027d26:	fb00 5003 	mla	r0, r0, r3, r5
 8027d2a:	1400      	asrs	r0, r0, #16
 8027d2c:	f53f af2b 	bmi.w	8027b86 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8027d30:	3901      	subs	r1, #1
 8027d32:	4288      	cmp	r0, r1
 8027d34:	f6bf af27 	bge.w	8027b86 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8027d38:	9924      	ldr	r1, [sp, #144]	; 0x90
 8027d3a:	fb01 6303 	mla	r3, r1, r3, r6
 8027d3e:	141b      	asrs	r3, r3, #16
 8027d40:	f53f af21 	bmi.w	8027b86 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8027d44:	3a01      	subs	r2, #1
 8027d46:	4293      	cmp	r3, r2
 8027d48:	f6bf af1d 	bge.w	8027b86 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8027d4c:	f10a 0e03 	add.w	lr, sl, #3
 8027d50:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8027d54:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 8027d58:	f1b8 0f00 	cmp.w	r8, #0
 8027d5c:	dc76      	bgt.n	8027e4c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35c>
 8027d5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027d60:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8027d64:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8027d68:	44a2      	add	sl, r4
 8027d6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8027d6c:	2b00      	cmp	r3, #0
 8027d6e:	f340 812c 	ble.w	8027fca <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 8027d72:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8027d76:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8027d78:	ee30 0a04 	vadd.f32	s0, s0, s8
 8027d7c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8027d80:	eef0 6a62 	vmov.f32	s13, s5
 8027d84:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8027d88:	ee31 1a05 	vadd.f32	s2, s2, s10
 8027d8c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027d90:	ee16 5a90 	vmov	r5, s13
 8027d94:	eef0 6a43 	vmov.f32	s13, s6
 8027d98:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027d9c:	ee16 6a90 	vmov	r6, s13
 8027da0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8027da4:	ee61 7a27 	vmul.f32	s15, s2, s15
 8027da8:	ee77 2a62 	vsub.f32	s5, s14, s5
 8027dac:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8027db0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8027db4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8027db8:	ee12 2a90 	vmov	r2, s5
 8027dbc:	eef0 2a47 	vmov.f32	s5, s14
 8027dc0:	fb92 f3f3 	sdiv	r3, r2, r3
 8027dc4:	ee13 2a10 	vmov	r2, s6
 8027dc8:	9323      	str	r3, [sp, #140]	; 0x8c
 8027dca:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8027dcc:	eeb0 3a67 	vmov.f32	s6, s15
 8027dd0:	fb92 f3f3 	sdiv	r3, r2, r3
 8027dd4:	9324      	str	r3, [sp, #144]	; 0x90
 8027dd6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8027dd8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8027dda:	3b01      	subs	r3, #1
 8027ddc:	930c      	str	r3, [sp, #48]	; 0x30
 8027dde:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8027de0:	bf08      	it	eq
 8027de2:	4613      	moveq	r3, r2
 8027de4:	9309      	str	r3, [sp, #36]	; 0x24
 8027de6:	e6a2      	b.n	8027b2e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8027de8:	2900      	cmp	r1, #0
 8027dea:	f43f af2c 	beq.w	8027c46 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8027dee:	eb09 0003 	add.w	r0, r9, r3
 8027df2:	0843      	lsrs	r3, r0, #1
 8027df4:	07c0      	lsls	r0, r0, #31
 8027df6:	5cfb      	ldrb	r3, [r7, r3]
 8027df8:	bf54      	ite	pl
 8027dfa:	f003 030f 	andpl.w	r3, r3, #15
 8027dfe:	111b      	asrmi	r3, r3, #4
 8027e00:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8027e04:	b2db      	uxtb	r3, r3
 8027e06:	930a      	str	r3, [sp, #40]	; 0x28
 8027e08:	e71d      	b.n	8027c46 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8027e0a:	f113 0b01 	adds.w	fp, r3, #1
 8027e0e:	f53f af72 	bmi.w	8027cf6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8027e12:	45dc      	cmp	ip, fp
 8027e14:	f6ff af6f 	blt.w	8027cf6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8027e18:	f110 0b01 	adds.w	fp, r0, #1
 8027e1c:	f53f af6b 	bmi.w	8027cf6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8027e20:	45de      	cmp	lr, fp
 8027e22:	f6ff af68 	blt.w	8027cf6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8027e26:	9302      	str	r3, [sp, #8]
 8027e28:	fa0f f38e 	sxth.w	r3, lr
 8027e2c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8027e2e:	9301      	str	r3, [sp, #4]
 8027e30:	fa0f f38c 	sxth.w	r3, ip
 8027e34:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8027e38:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8027e3c:	9300      	str	r3, [sp, #0]
 8027e3e:	463a      	mov	r2, r7
 8027e40:	464b      	mov	r3, r9
 8027e42:	4641      	mov	r1, r8
 8027e44:	9815      	ldr	r0, [sp, #84]	; 0x54
 8027e46:	f7ff fd79 	bl	802793c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 8027e4a:	e754      	b.n	8027cf6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8027e4c:	142a      	asrs	r2, r5, #16
 8027e4e:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8027e52:	1433      	asrs	r3, r6, #16
 8027e54:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8027e58:	fb09 2303 	mla	r3, r9, r3, r2
 8027e5c:	085a      	lsrs	r2, r3, #1
 8027e5e:	07dc      	lsls	r4, r3, #31
 8027e60:	5cba      	ldrb	r2, [r7, r2]
 8027e62:	bf54      	ite	pl
 8027e64:	f002 020f 	andpl.w	r2, r2, #15
 8027e68:	1112      	asrmi	r2, r2, #4
 8027e6a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8027e6e:	b2d2      	uxtb	r2, r2
 8027e70:	2900      	cmp	r1, #0
 8027e72:	f000 8097 	beq.w	8027fa4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8027e76:	f103 0b01 	add.w	fp, r3, #1
 8027e7a:	ea4f 0c5b 	mov.w	ip, fp, lsr #1
 8027e7e:	f01b 0f01 	tst.w	fp, #1
 8027e82:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8027e86:	bf0c      	ite	eq
 8027e88:	f00c 0c0f 	andeq.w	ip, ip, #15
 8027e8c:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8027e90:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8027e94:	fa5f f48c 	uxtb.w	r4, ip
 8027e98:	9412      	str	r4, [sp, #72]	; 0x48
 8027e9a:	b300      	cbz	r0, 8027ede <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8027e9c:	444b      	add	r3, r9
 8027e9e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8027ea2:	07dc      	lsls	r4, r3, #31
 8027ea4:	f103 0301 	add.w	r3, r3, #1
 8027ea8:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8027eac:	bf54      	ite	pl
 8027eae:	f00c 0c0f 	andpl.w	ip, ip, #15
 8027eb2:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8027eb6:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8027eba:	fa5f f48c 	uxtb.w	r4, ip
 8027ebe:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8027ec2:	940b      	str	r4, [sp, #44]	; 0x2c
 8027ec4:	07dc      	lsls	r4, r3, #31
 8027ec6:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8027eca:	bf54      	ite	pl
 8027ecc:	f00c 0c0f 	andpl.w	ip, ip, #15
 8027ed0:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8027ed4:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8027ed8:	fa5f f38c 	uxtb.w	r3, ip
 8027edc:	9313      	str	r3, [sp, #76]	; 0x4c
 8027ede:	b289      	uxth	r1, r1
 8027ee0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8027ee2:	b280      	uxth	r0, r0
 8027ee4:	fb01 f300 	mul.w	r3, r1, r0
 8027ee8:	0109      	lsls	r1, r1, #4
 8027eea:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 8027eee:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 8027ef2:	1ac9      	subs	r1, r1, r3
 8027ef4:	b280      	uxth	r0, r0
 8027ef6:	b289      	uxth	r1, r1
 8027ef8:	ebac 0c00 	sub.w	ip, ip, r0
 8027efc:	4361      	muls	r1, r4
 8027efe:	fa1f fc8c 	uxth.w	ip, ip
 8027f02:	fb02 120c 	mla	r2, r2, ip, r1
 8027f06:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8027f08:	fb00 2001 	mla	r0, r0, r1, r2
 8027f0c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8027f0e:	fb03 0302 	mla	r3, r3, r2, r0
 8027f12:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8027f16:	2b00      	cmp	r3, #0
 8027f18:	d039      	beq.n	8027f8e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8027f1a:	4a21      	ldr	r2, [pc, #132]	; (8027fa0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 8027f1c:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 8027f20:	6810      	ldr	r0, [r2, #0]
 8027f22:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8027f24:	fa5f fc80 	uxtb.w	ip, r0
 8027f28:	4353      	muls	r3, r2
 8027f2a:	1c5a      	adds	r2, r3, #1
 8027f2c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8027f30:	121b      	asrs	r3, r3, #8
 8027f32:	b29a      	uxth	r2, r3
 8027f34:	43db      	mvns	r3, r3
 8027f36:	fb1c fc02 	smulbb	ip, ip, r2
 8027f3a:	b2db      	uxtb	r3, r3
 8027f3c:	fb01 c103 	mla	r1, r1, r3, ip
 8027f40:	b289      	uxth	r1, r1
 8027f42:	f101 0c01 	add.w	ip, r1, #1
 8027f46:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 8027f4a:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 8027f4e:	fb1c fc03 	smulbb	ip, ip, r3
 8027f52:	1209      	asrs	r1, r1, #8
 8027f54:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8027f58:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8027f5c:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8027f60:	fb01 c102 	mla	r1, r1, r2, ip
 8027f64:	b289      	uxth	r1, r1
 8027f66:	f101 0c01 	add.w	ip, r1, #1
 8027f6a:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 8027f6e:	1209      	asrs	r1, r1, #8
 8027f70:	f80e 1c02 	strb.w	r1, [lr, #-2]
 8027f74:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 8027f78:	fb11 f303 	smulbb	r3, r1, r3
 8027f7c:	fb00 3002 	mla	r0, r0, r2, r3
 8027f80:	b280      	uxth	r0, r0
 8027f82:	1c42      	adds	r2, r0, #1
 8027f84:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8027f88:	1200      	asrs	r0, r0, #8
 8027f8a:	f80e 0c01 	strb.w	r0, [lr, #-1]
 8027f8e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8027f90:	f10e 0e03 	add.w	lr, lr, #3
 8027f94:	f108 38ff 	add.w	r8, r8, #4294967295
 8027f98:	441d      	add	r5, r3
 8027f9a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8027f9c:	441e      	add	r6, r3
 8027f9e:	e6db      	b.n	8027d58 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 8027fa0:	24026248 	.word	0x24026248
 8027fa4:	2800      	cmp	r0, #0
 8027fa6:	d09a      	beq.n	8027ede <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8027fa8:	444b      	add	r3, r9
 8027faa:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8027fae:	07db      	lsls	r3, r3, #31
 8027fb0:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8027fb4:	bf54      	ite	pl
 8027fb6:	f00c 0c0f 	andpl.w	ip, ip, #15
 8027fba:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8027fbe:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8027fc2:	fa5f f38c 	uxtb.w	r3, ip
 8027fc6:	930b      	str	r3, [sp, #44]	; 0x2c
 8027fc8:	e789      	b.n	8027ede <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8027fca:	b017      	add	sp, #92	; 0x5c
 8027fcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08027fd0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 8027fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027fd4:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
 8027fd8:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8027fdc:	2d00      	cmp	r5, #0
 8027fde:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8027fe2:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
 8027fe6:	fb04 5e03 	mla	lr, r4, r3, r5
 8027fea:	f89d c038 	ldrb.w	ip, [sp, #56]	; 0x38
 8027fee:	f2c0 80b1 	blt.w	8028154 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8027ff2:	45a9      	cmp	r9, r5
 8027ff4:	f340 80ae 	ble.w	8028154 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8027ff8:	2c00      	cmp	r4, #0
 8027ffa:	f2c0 80ab 	blt.w	8028154 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8027ffe:	45a0      	cmp	r8, r4
 8028000:	f340 80a8 	ble.w	8028154 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8028004:	ea4f 065e 	mov.w	r6, lr, lsr #1
 8028008:	f01e 0f01 	tst.w	lr, #1
 802800c:	5d97      	ldrb	r7, [r2, r6]
 802800e:	bf0c      	ite	eq
 8028010:	f007 070f 	andeq.w	r7, r7, #15
 8028014:	113f      	asrne	r7, r7, #4
 8028016:	eb07 1707 	add.w	r7, r7, r7, lsl #4
 802801a:	b2ff      	uxtb	r7, r7
 802801c:	f115 0a01 	adds.w	sl, r5, #1
 8028020:	f100 809a 	bmi.w	8028158 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8028024:	45d1      	cmp	r9, sl
 8028026:	f340 8097 	ble.w	8028158 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 802802a:	2c00      	cmp	r4, #0
 802802c:	f2c0 8094 	blt.w	8028158 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8028030:	45a0      	cmp	r8, r4
 8028032:	f340 8091 	ble.w	8028158 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8028036:	2800      	cmp	r0, #0
 8028038:	f000 8090 	beq.w	802815c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x18c>
 802803c:	f10e 0b01 	add.w	fp, lr, #1
 8028040:	ea4f 065b 	mov.w	r6, fp, lsr #1
 8028044:	f01b 0f01 	tst.w	fp, #1
 8028048:	5d96      	ldrb	r6, [r2, r6]
 802804a:	bf0c      	ite	eq
 802804c:	f006 060f 	andeq.w	r6, r6, #15
 8028050:	1136      	asrne	r6, r6, #4
 8028052:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8028056:	b2f6      	uxtb	r6, r6
 8028058:	f1bc 0f00 	cmp.w	ip, #0
 802805c:	f000 8082 	beq.w	8028164 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x194>
 8028060:	2d00      	cmp	r5, #0
 8028062:	f104 0401 	add.w	r4, r4, #1
 8028066:	db7b      	blt.n	8028160 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8028068:	45a9      	cmp	r9, r5
 802806a:	dd79      	ble.n	8028160 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 802806c:	2c00      	cmp	r4, #0
 802806e:	db77      	blt.n	8028160 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8028070:	45a0      	cmp	r8, r4
 8028072:	dd75      	ble.n	8028160 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8028074:	eb03 0b0e 	add.w	fp, r3, lr
 8028078:	ea4f 055b 	mov.w	r5, fp, lsr #1
 802807c:	f01b 0f01 	tst.w	fp, #1
 8028080:	5d55      	ldrb	r5, [r2, r5]
 8028082:	bf0c      	ite	eq
 8028084:	f005 050f 	andeq.w	r5, r5, #15
 8028088:	112d      	asrne	r5, r5, #4
 802808a:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 802808e:	b2ed      	uxtb	r5, r5
 8028090:	f1ba 0f00 	cmp.w	sl, #0
 8028094:	db69      	blt.n	802816a <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 8028096:	45d1      	cmp	r9, sl
 8028098:	dd67      	ble.n	802816a <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 802809a:	2c00      	cmp	r4, #0
 802809c:	db65      	blt.n	802816a <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 802809e:	45a0      	cmp	r8, r4
 80280a0:	dd63      	ble.n	802816a <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 80280a2:	2800      	cmp	r0, #0
 80280a4:	d063      	beq.n	802816e <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19e>
 80280a6:	3301      	adds	r3, #1
 80280a8:	449e      	add	lr, r3
 80280aa:	ea4f 035e 	mov.w	r3, lr, lsr #1
 80280ae:	f01e 0f01 	tst.w	lr, #1
 80280b2:	5cd4      	ldrb	r4, [r2, r3]
 80280b4:	bf0c      	ite	eq
 80280b6:	f004 040f 	andeq.w	r4, r4, #15
 80280ba:	1124      	asrne	r4, r4, #4
 80280bc:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 80280c0:	b2e3      	uxtb	r3, r4
 80280c2:	b282      	uxth	r2, r0
 80280c4:	fa1f fc8c 	uxth.w	ip, ip
 80280c8:	fb02 f40c 	mul.w	r4, r2, ip
 80280cc:	0112      	lsls	r2, r2, #4
 80280ce:	ebc4 1c0c 	rsb	ip, r4, ip, lsl #4
 80280d2:	fa1f f08c 	uxth.w	r0, ip
 80280d6:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
 80280da:	1b12      	subs	r2, r2, r4
 80280dc:	ebac 0c00 	sub.w	ip, ip, r0
 80280e0:	b292      	uxth	r2, r2
 80280e2:	fa1f fc8c 	uxth.w	ip, ip
 80280e6:	4372      	muls	r2, r6
 80280e8:	fb07 220c 	mla	r2, r7, ip, r2
 80280ec:	fb00 2005 	mla	r0, r0, r5, r2
 80280f0:	fb04 0303 	mla	r3, r4, r3, r0
 80280f4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80280f8:	b353      	cbz	r3, 8028150 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x180>
 80280fa:	4a1e      	ldr	r2, [pc, #120]	; (8028174 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>)
 80280fc:	7808      	ldrb	r0, [r1, #0]
 80280fe:	6814      	ldr	r4, [r2, #0]
 8028100:	b29a      	uxth	r2, r3
 8028102:	43db      	mvns	r3, r3
 8028104:	b2e5      	uxtb	r5, r4
 8028106:	b2db      	uxtb	r3, r3
 8028108:	fb15 f502 	smulbb	r5, r5, r2
 802810c:	fb00 5003 	mla	r0, r0, r3, r5
 8028110:	b280      	uxth	r0, r0
 8028112:	1c45      	adds	r5, r0, #1
 8028114:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8028118:	784d      	ldrb	r5, [r1, #1]
 802811a:	fb15 f503 	smulbb	r5, r5, r3
 802811e:	1200      	asrs	r0, r0, #8
 8028120:	7008      	strb	r0, [r1, #0]
 8028122:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8028126:	f3c4 4407 	ubfx	r4, r4, #16, #8
 802812a:	fb00 5002 	mla	r0, r0, r2, r5
 802812e:	b280      	uxth	r0, r0
 8028130:	1c45      	adds	r5, r0, #1
 8028132:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8028136:	1200      	asrs	r0, r0, #8
 8028138:	7048      	strb	r0, [r1, #1]
 802813a:	7888      	ldrb	r0, [r1, #2]
 802813c:	fb10 f303 	smulbb	r3, r0, r3
 8028140:	fb04 3202 	mla	r2, r4, r2, r3
 8028144:	b292      	uxth	r2, r2
 8028146:	1c53      	adds	r3, r2, #1
 8028148:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 802814c:	1212      	asrs	r2, r2, #8
 802814e:	708a      	strb	r2, [r1, #2]
 8028150:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028154:	2700      	movs	r7, #0
 8028156:	e761      	b.n	802801c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x4c>
 8028158:	2600      	movs	r6, #0
 802815a:	e77d      	b.n	8028058 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 802815c:	4606      	mov	r6, r0
 802815e:	e77b      	b.n	8028058 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 8028160:	2500      	movs	r5, #0
 8028162:	e795      	b.n	8028090 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xc0>
 8028164:	4663      	mov	r3, ip
 8028166:	4665      	mov	r5, ip
 8028168:	e7ab      	b.n	80280c2 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 802816a:	2300      	movs	r3, #0
 802816c:	e7a9      	b.n	80280c2 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 802816e:	4603      	mov	r3, r0
 8028170:	e7a7      	b.n	80280c2 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 8028172:	bf00      	nop
 8028174:	24026248 	.word	0x24026248

08028178 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8028178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802817c:	b093      	sub	sp, #76	; 0x4c
 802817e:	461c      	mov	r4, r3
 8028180:	920c      	str	r2, [sp, #48]	; 0x30
 8028182:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8028184:	9011      	str	r0, [sp, #68]	; 0x44
 8028186:	9107      	str	r1, [sp, #28]
 8028188:	6850      	ldr	r0, [r2, #4]
 802818a:	6812      	ldr	r2, [r2, #0]
 802818c:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 8028190:	e9dd 561d 	ldrd	r5, r6, [sp, #116]	; 0x74
 8028194:	fb00 1303 	mla	r3, r0, r3, r1
 8028198:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802819c:	eb02 0b03 	add.w	fp, r2, r3
 80281a0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80281a2:	689b      	ldr	r3, [r3, #8]
 80281a4:	3301      	adds	r3, #1
 80281a6:	f023 0301 	bic.w	r3, r3, #1
 80281aa:	9309      	str	r3, [sp, #36]	; 0x24
 80281ac:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80281ae:	f8d3 8000 	ldr.w	r8, [r3]
 80281b2:	9b07      	ldr	r3, [sp, #28]
 80281b4:	2b00      	cmp	r3, #0
 80281b6:	dc03      	bgt.n	80281c0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80281b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80281ba:	2b00      	cmp	r3, #0
 80281bc:	f340 822b 	ble.w	8028616 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 80281c0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80281c2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80281c6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80281ca:	1e48      	subs	r0, r1, #1
 80281cc:	1e57      	subs	r7, r2, #1
 80281ce:	2c00      	cmp	r4, #0
 80281d0:	f340 80d7 	ble.w	8028382 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 80281d4:	ea5f 4c25 	movs.w	ip, r5, asr #16
 80281d8:	ea4f 4326 	mov.w	r3, r6, asr #16
 80281dc:	d406      	bmi.n	80281ec <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80281de:	4584      	cmp	ip, r0
 80281e0:	da04      	bge.n	80281ec <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80281e2:	2b00      	cmp	r3, #0
 80281e4:	db02      	blt.n	80281ec <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80281e6:	42bb      	cmp	r3, r7
 80281e8:	f2c0 80cc 	blt.w	8028384 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 80281ec:	f11c 0c01 	adds.w	ip, ip, #1
 80281f0:	f100 80bf 	bmi.w	8028372 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 80281f4:	4561      	cmp	r1, ip
 80281f6:	f2c0 80bc 	blt.w	8028372 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 80281fa:	3301      	adds	r3, #1
 80281fc:	f100 80b9 	bmi.w	8028372 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8028200:	429a      	cmp	r2, r3
 8028202:	f2c0 80b6 	blt.w	8028372 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8028206:	46a2      	mov	sl, r4
 8028208:	465f      	mov	r7, fp
 802820a:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 802820e:	f1ba 0f00 	cmp.w	sl, #0
 8028212:	f340 80d4 	ble.w	80283be <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 8028216:	f3c5 3303 	ubfx	r3, r5, #12, #4
 802821a:	1430      	asrs	r0, r6, #16
 802821c:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8028220:	9308      	str	r3, [sp, #32]
 8028222:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8028224:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8028228:	142b      	asrs	r3, r5, #16
 802822a:	f100 8124 	bmi.w	8028476 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 802822e:	f10c 32ff 	add.w	r2, ip, #4294967295
 8028232:	4293      	cmp	r3, r2
 8028234:	f280 811f 	bge.w	8028476 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8028238:	2800      	cmp	r0, #0
 802823a:	f2c0 811c 	blt.w	8028476 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 802823e:	f10e 32ff 	add.w	r2, lr, #4294967295
 8028242:	4290      	cmp	r0, r2
 8028244:	f280 8117 	bge.w	8028476 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8028248:	fb00 3309 	mla	r3, r0, r9, r3
 802824c:	0858      	lsrs	r0, r3, #1
 802824e:	07da      	lsls	r2, r3, #31
 8028250:	9a08      	ldr	r2, [sp, #32]
 8028252:	f818 c000 	ldrb.w	ip, [r8, r0]
 8028256:	bf54      	ite	pl
 8028258:	f00c 0c0f 	andpl.w	ip, ip, #15
 802825c:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8028260:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8028264:	fa5f fc8c 	uxtb.w	ip, ip
 8028268:	2a00      	cmp	r2, #0
 802826a:	f000 80ed 	beq.w	8028448 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d0>
 802826e:	1c58      	adds	r0, r3, #1
 8028270:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8028274:	07c0      	lsls	r0, r0, #31
 8028276:	f818 e00e 	ldrb.w	lr, [r8, lr]
 802827a:	bf54      	ite	pl
 802827c:	f00e 0e0f 	andpl.w	lr, lr, #15
 8028280:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8028284:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8028288:	fa5f fe8e 	uxtb.w	lr, lr
 802828c:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 8028290:	b1c9      	cbz	r1, 80282c6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8028292:	444b      	add	r3, r9
 8028294:	0858      	lsrs	r0, r3, #1
 8028296:	07da      	lsls	r2, r3, #31
 8028298:	f818 0000 	ldrb.w	r0, [r8, r0]
 802829c:	bf54      	ite	pl
 802829e:	f000 000f 	andpl.w	r0, r0, #15
 80282a2:	1100      	asrmi	r0, r0, #4
 80282a4:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80282a8:	b2c0      	uxtb	r0, r0
 80282aa:	900a      	str	r0, [sp, #40]	; 0x28
 80282ac:	1c58      	adds	r0, r3, #1
 80282ae:	0843      	lsrs	r3, r0, #1
 80282b0:	07c2      	lsls	r2, r0, #31
 80282b2:	f818 3003 	ldrb.w	r3, [r8, r3]
 80282b6:	bf54      	ite	pl
 80282b8:	f003 030f 	andpl.w	r3, r3, #15
 80282bc:	111b      	asrmi	r3, r3, #4
 80282be:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80282c2:	b2db      	uxtb	r3, r3
 80282c4:	930e      	str	r3, [sp, #56]	; 0x38
 80282c6:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80282ca:	b289      	uxth	r1, r1
 80282cc:	fb02 f301 	mul.w	r3, r2, r1
 80282d0:	0112      	lsls	r2, r2, #4
 80282d2:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 80282d6:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 80282da:	1ad2      	subs	r2, r2, r3
 80282dc:	b289      	uxth	r1, r1
 80282de:	b292      	uxth	r2, r2
 80282e0:	1a40      	subs	r0, r0, r1
 80282e2:	fa1f fe80 	uxth.w	lr, r0
 80282e6:	980d      	ldr	r0, [sp, #52]	; 0x34
 80282e8:	4342      	muls	r2, r0
 80282ea:	fb0c 2c0e 	mla	ip, ip, lr, r2
 80282ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80282f0:	fb01 c102 	mla	r1, r1, r2, ip
 80282f4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80282f6:	fb03 1302 	mla	r3, r3, r2, r1
 80282fa:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80282fe:	b383      	cbz	r3, 8028362 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8028300:	4ac6      	ldr	r2, [pc, #792]	; (802861c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 8028302:	2bff      	cmp	r3, #255	; 0xff
 8028304:	6812      	ldr	r2, [r2, #0]
 8028306:	f3c2 4e07 	ubfx	lr, r2, #16, #8
 802830a:	f3c2 2007 	ubfx	r0, r2, #8, #8
 802830e:	b2d2      	uxtb	r2, r2
 8028310:	f000 80ac 	beq.w	802846c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8028314:	b299      	uxth	r1, r3
 8028316:	43db      	mvns	r3, r3
 8028318:	f897 c000 	ldrb.w	ip, [r7]
 802831c:	fb12 f201 	smulbb	r2, r2, r1
 8028320:	b2db      	uxtb	r3, r3
 8028322:	fb10 f001 	smulbb	r0, r0, r1
 8028326:	fb0c 2203 	mla	r2, ip, r3, r2
 802832a:	fb1e f101 	smulbb	r1, lr, r1
 802832e:	b292      	uxth	r2, r2
 8028330:	f102 0c01 	add.w	ip, r2, #1
 8028334:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8028338:	1212      	asrs	r2, r2, #8
 802833a:	703a      	strb	r2, [r7, #0]
 802833c:	787a      	ldrb	r2, [r7, #1]
 802833e:	fb02 0003 	mla	r0, r2, r3, r0
 8028342:	b280      	uxth	r0, r0
 8028344:	1c42      	adds	r2, r0, #1
 8028346:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802834a:	78ba      	ldrb	r2, [r7, #2]
 802834c:	fb02 1303 	mla	r3, r2, r3, r1
 8028350:	1200      	asrs	r0, r0, #8
 8028352:	b29b      	uxth	r3, r3
 8028354:	7078      	strb	r0, [r7, #1]
 8028356:	f103 0e01 	add.w	lr, r3, #1
 802835a:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 802835e:	121b      	asrs	r3, r3, #8
 8028360:	70bb      	strb	r3, [r7, #2]
 8028362:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8028364:	3703      	adds	r7, #3
 8028366:	f10a 3aff 	add.w	sl, sl, #4294967295
 802836a:	441d      	add	r5, r3
 802836c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802836e:	441e      	add	r6, r3
 8028370:	e74d      	b.n	802820e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8028372:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8028374:	3c01      	subs	r4, #1
 8028376:	f10b 0b03 	add.w	fp, fp, #3
 802837a:	441d      	add	r5, r3
 802837c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802837e:	441e      	add	r6, r3
 8028380:	e725      	b.n	80281ce <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8028382:	d021      	beq.n	80283c8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 8028384:	1e63      	subs	r3, r4, #1
 8028386:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8028388:	fb00 5003 	mla	r0, r0, r3, r5
 802838c:	1400      	asrs	r0, r0, #16
 802838e:	f53f af3a 	bmi.w	8028206 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8028392:	3901      	subs	r1, #1
 8028394:	4288      	cmp	r0, r1
 8028396:	f6bf af36 	bge.w	8028206 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802839a:	9920      	ldr	r1, [sp, #128]	; 0x80
 802839c:	fb01 6303 	mla	r3, r1, r3, r6
 80283a0:	141b      	asrs	r3, r3, #16
 80283a2:	f53f af30 	bmi.w	8028206 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80283a6:	3a01      	subs	r2, #1
 80283a8:	4293      	cmp	r3, r2
 80283aa:	f6bf af2c 	bge.w	8028206 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80283ae:	f10b 0c03 	add.w	ip, fp, #3
 80283b2:	46a6      	mov	lr, r4
 80283b4:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 80283b8:	f1be 0f00 	cmp.w	lr, #0
 80283bc:	dc79      	bgt.n	80284b2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 80283be:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80283c2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80283c6:	44a3      	add	fp, r4
 80283c8:	9b07      	ldr	r3, [sp, #28]
 80283ca:	2b00      	cmp	r3, #0
 80283cc:	f340 8123 	ble.w	8028616 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 80283d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80283d4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80283d6:	ee30 0a04 	vadd.f32	s0, s0, s8
 80283da:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80283de:	eef0 6a62 	vmov.f32	s13, s5
 80283e2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80283e6:	ee31 1a05 	vadd.f32	s2, s2, s10
 80283ea:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80283ee:	ee16 5a90 	vmov	r5, s13
 80283f2:	eef0 6a43 	vmov.f32	s13, s6
 80283f6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80283fa:	ee16 6a90 	vmov	r6, s13
 80283fe:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8028402:	ee61 7a27 	vmul.f32	s15, s2, s15
 8028406:	ee77 2a62 	vsub.f32	s5, s14, s5
 802840a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802840e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8028412:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8028416:	ee12 2a90 	vmov	r2, s5
 802841a:	eef0 2a47 	vmov.f32	s5, s14
 802841e:	fb92 f3f3 	sdiv	r3, r2, r3
 8028422:	ee13 2a10 	vmov	r2, s6
 8028426:	931f      	str	r3, [sp, #124]	; 0x7c
 8028428:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802842a:	eeb0 3a67 	vmov.f32	s6, s15
 802842e:	fb92 f3f3 	sdiv	r3, r2, r3
 8028432:	9320      	str	r3, [sp, #128]	; 0x80
 8028434:	9b07      	ldr	r3, [sp, #28]
 8028436:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8028438:	3b01      	subs	r3, #1
 802843a:	9307      	str	r3, [sp, #28]
 802843c:	bf08      	it	eq
 802843e:	4614      	moveq	r4, r2
 8028440:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8028442:	bf18      	it	ne
 8028444:	461c      	movne	r4, r3
 8028446:	e6b4      	b.n	80281b2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8028448:	2900      	cmp	r1, #0
 802844a:	f43f af3c 	beq.w	80282c6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 802844e:	eb09 0003 	add.w	r0, r9, r3
 8028452:	0843      	lsrs	r3, r0, #1
 8028454:	07c0      	lsls	r0, r0, #31
 8028456:	f818 3003 	ldrb.w	r3, [r8, r3]
 802845a:	bf54      	ite	pl
 802845c:	f003 030f 	andpl.w	r3, r3, #15
 8028460:	111b      	asrmi	r3, r3, #4
 8028462:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8028466:	b2db      	uxtb	r3, r3
 8028468:	930a      	str	r3, [sp, #40]	; 0x28
 802846a:	e72c      	b.n	80282c6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 802846c:	703a      	strb	r2, [r7, #0]
 802846e:	7078      	strb	r0, [r7, #1]
 8028470:	f887 e002 	strb.w	lr, [r7, #2]
 8028474:	e775      	b.n	8028362 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8028476:	1c5a      	adds	r2, r3, #1
 8028478:	f53f af73 	bmi.w	8028362 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 802847c:	4594      	cmp	ip, r2
 802847e:	f6ff af70 	blt.w	8028362 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8028482:	1c42      	adds	r2, r0, #1
 8028484:	f53f af6d 	bmi.w	8028362 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8028488:	4596      	cmp	lr, r2
 802848a:	f6ff af6a 	blt.w	8028362 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 802848e:	9302      	str	r3, [sp, #8]
 8028490:	fa0f f38e 	sxth.w	r3, lr
 8028494:	9a08      	ldr	r2, [sp, #32]
 8028496:	9301      	str	r3, [sp, #4]
 8028498:	fa0f f38c 	sxth.w	r3, ip
 802849c:	9105      	str	r1, [sp, #20]
 802849e:	4639      	mov	r1, r7
 80284a0:	9300      	str	r3, [sp, #0]
 80284a2:	464b      	mov	r3, r9
 80284a4:	e9cd 0203 	strd	r0, r2, [sp, #12]
 80284a8:	4642      	mov	r2, r8
 80284aa:	9811      	ldr	r0, [sp, #68]	; 0x44
 80284ac:	f7ff fd90 	bl	8027fd0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 80284b0:	e757      	b.n	8028362 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80284b2:	142a      	asrs	r2, r5, #16
 80284b4:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80284b8:	1433      	asrs	r3, r6, #16
 80284ba:	f3c6 3703 	ubfx	r7, r6, #12, #4
 80284be:	fb09 2303 	mla	r3, r9, r3, r2
 80284c2:	085a      	lsrs	r2, r3, #1
 80284c4:	07d9      	lsls	r1, r3, #31
 80284c6:	f818 2002 	ldrb.w	r2, [r8, r2]
 80284ca:	bf54      	ite	pl
 80284cc:	f002 020f 	andpl.w	r2, r2, #15
 80284d0:	1112      	asrmi	r2, r2, #4
 80284d2:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80284d6:	b2d2      	uxtb	r2, r2
 80284d8:	2800      	cmp	r0, #0
 80284da:	f000 8085 	beq.w	80285e8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 80284de:	f103 0a01 	add.w	sl, r3, #1
 80284e2:	ea4f 015a 	mov.w	r1, sl, lsr #1
 80284e6:	f01a 0f01 	tst.w	sl, #1
 80284ea:	f818 1001 	ldrb.w	r1, [r8, r1]
 80284ee:	bf0c      	ite	eq
 80284f0:	f001 010f 	andeq.w	r1, r1, #15
 80284f4:	1109      	asrne	r1, r1, #4
 80284f6:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80284fa:	b2c9      	uxtb	r1, r1
 80284fc:	910f      	str	r1, [sp, #60]	; 0x3c
 80284fe:	b1df      	cbz	r7, 8028538 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8028500:	444b      	add	r3, r9
 8028502:	0859      	lsrs	r1, r3, #1
 8028504:	f013 0f01 	tst.w	r3, #1
 8028508:	f103 0301 	add.w	r3, r3, #1
 802850c:	f818 1001 	ldrb.w	r1, [r8, r1]
 8028510:	bf0c      	ite	eq
 8028512:	f001 010f 	andeq.w	r1, r1, #15
 8028516:	1109      	asrne	r1, r1, #4
 8028518:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802851c:	b2c9      	uxtb	r1, r1
 802851e:	910b      	str	r1, [sp, #44]	; 0x2c
 8028520:	0859      	lsrs	r1, r3, #1
 8028522:	07db      	lsls	r3, r3, #31
 8028524:	f818 1001 	ldrb.w	r1, [r8, r1]
 8028528:	bf54      	ite	pl
 802852a:	f001 010f 	andpl.w	r1, r1, #15
 802852e:	1109      	asrmi	r1, r1, #4
 8028530:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8028534:	b2c9      	uxtb	r1, r1
 8028536:	9110      	str	r1, [sp, #64]	; 0x40
 8028538:	b280      	uxth	r0, r0
 802853a:	b2bf      	uxth	r7, r7
 802853c:	fb00 f307 	mul.w	r3, r0, r7
 8028540:	0100      	lsls	r0, r0, #4
 8028542:	ebc3 1707 	rsb	r7, r3, r7, lsl #4
 8028546:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 802854a:	1ac0      	subs	r0, r0, r3
 802854c:	b2bf      	uxth	r7, r7
 802854e:	b280      	uxth	r0, r0
 8028550:	1bc9      	subs	r1, r1, r7
 8028552:	fa1f fa81 	uxth.w	sl, r1
 8028556:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8028558:	4348      	muls	r0, r1
 802855a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 802855c:	fb02 020a 	mla	r2, r2, sl, r0
 8028560:	fb07 2701 	mla	r7, r7, r1, r2
 8028564:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8028566:	fb03 7302 	mla	r3, r3, r2, r7
 802856a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802856e:	b393      	cbz	r3, 80285d6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8028570:	4a2a      	ldr	r2, [pc, #168]	; (802861c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 8028572:	2bff      	cmp	r3, #255	; 0xff
 8028574:	6811      	ldr	r1, [r2, #0]
 8028576:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 802857a:	f3c1 2707 	ubfx	r7, r1, #8, #8
 802857e:	b2c9      	uxtb	r1, r1
 8028580:	d042      	beq.n	8028608 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 8028582:	b298      	uxth	r0, r3
 8028584:	43db      	mvns	r3, r3
 8028586:	f81c 2c03 	ldrb.w	r2, [ip, #-3]
 802858a:	fb11 f100 	smulbb	r1, r1, r0
 802858e:	b2db      	uxtb	r3, r3
 8028590:	fb17 f700 	smulbb	r7, r7, r0
 8028594:	fb02 1103 	mla	r1, r2, r3, r1
 8028598:	fb1a f000 	smulbb	r0, sl, r0
 802859c:	b289      	uxth	r1, r1
 802859e:	1c4a      	adds	r2, r1, #1
 80285a0:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80285a4:	f81c 2c02 	ldrb.w	r2, [ip, #-2]
 80285a8:	fb02 7703 	mla	r7, r2, r3, r7
 80285ac:	1209      	asrs	r1, r1, #8
 80285ae:	b2bf      	uxth	r7, r7
 80285b0:	f80c 1c03 	strb.w	r1, [ip, #-3]
 80285b4:	1c7a      	adds	r2, r7, #1
 80285b6:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 80285ba:	f81c 2c01 	ldrb.w	r2, [ip, #-1]
 80285be:	fb02 0303 	mla	r3, r2, r3, r0
 80285c2:	123f      	asrs	r7, r7, #8
 80285c4:	b29b      	uxth	r3, r3
 80285c6:	f80c 7c02 	strb.w	r7, [ip, #-2]
 80285ca:	1c5a      	adds	r2, r3, #1
 80285cc:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80285d0:	121b      	asrs	r3, r3, #8
 80285d2:	f80c 3c01 	strb.w	r3, [ip, #-1]
 80285d6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80285d8:	f10c 0c03 	add.w	ip, ip, #3
 80285dc:	f10e 3eff 	add.w	lr, lr, #4294967295
 80285e0:	441d      	add	r5, r3
 80285e2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80285e4:	441e      	add	r6, r3
 80285e6:	e6e7      	b.n	80283b8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 80285e8:	2f00      	cmp	r7, #0
 80285ea:	d0a5      	beq.n	8028538 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 80285ec:	444b      	add	r3, r9
 80285ee:	0859      	lsrs	r1, r3, #1
 80285f0:	07db      	lsls	r3, r3, #31
 80285f2:	f818 1001 	ldrb.w	r1, [r8, r1]
 80285f6:	bf54      	ite	pl
 80285f8:	f001 010f 	andpl.w	r1, r1, #15
 80285fc:	1109      	asrmi	r1, r1, #4
 80285fe:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8028602:	b2c9      	uxtb	r1, r1
 8028604:	910b      	str	r1, [sp, #44]	; 0x2c
 8028606:	e797      	b.n	8028538 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8028608:	f80c 1c03 	strb.w	r1, [ip, #-3]
 802860c:	f80c 7c02 	strb.w	r7, [ip, #-2]
 8028610:	f80c ac01 	strb.w	sl, [ip, #-1]
 8028614:	e7df      	b.n	80285d6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8028616:	b013      	add	sp, #76	; 0x4c
 8028618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802861c:	24026248 	.word	0x24026248

08028620 <CRC_Lock>:
 8028620:	4a20      	ldr	r2, [pc, #128]	; (80286a4 <CRC_Lock+0x84>)
 8028622:	b530      	push	{r4, r5, lr}
 8028624:	6813      	ldr	r3, [r2, #0]
 8028626:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 802862a:	f24c 2540 	movw	r5, #49728	; 0xc240
 802862e:	f023 0301 	bic.w	r3, r3, #1
 8028632:	6013      	str	r3, [r2, #0]
 8028634:	4b1c      	ldr	r3, [pc, #112]	; (80286a8 <CRC_Lock+0x88>)
 8028636:	681a      	ldr	r2, [r3, #0]
 8028638:	4022      	ands	r2, r4
 802863a:	42aa      	cmp	r2, r5
 802863c:	d005      	beq.n	802864a <CRC_Lock+0x2a>
 802863e:	681b      	ldr	r3, [r3, #0]
 8028640:	f24c 2270 	movw	r2, #49776	; 0xc270
 8028644:	4023      	ands	r3, r4
 8028646:	4293      	cmp	r3, r2
 8028648:	d124      	bne.n	8028694 <CRC_Lock+0x74>
 802864a:	4b18      	ldr	r3, [pc, #96]	; (80286ac <CRC_Lock+0x8c>)
 802864c:	681b      	ldr	r3, [r3, #0]
 802864e:	bb0b      	cbnz	r3, 8028694 <CRC_Lock+0x74>
 8028650:	4b17      	ldr	r3, [pc, #92]	; (80286b0 <CRC_Lock+0x90>)
 8028652:	681a      	ldr	r2, [r3, #0]
 8028654:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8028658:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 802865c:	d00d      	beq.n	802867a <CRC_Lock+0x5a>
 802865e:	681a      	ldr	r2, [r3, #0]
 8028660:	f240 4483 	movw	r4, #1155	; 0x483
 8028664:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8028668:	42a2      	cmp	r2, r4
 802866a:	d006      	beq.n	802867a <CRC_Lock+0x5a>
 802866c:	681b      	ldr	r3, [r3, #0]
 802866e:	f240 4285 	movw	r2, #1157	; 0x485
 8028672:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8028676:	4293      	cmp	r3, r2
 8028678:	d10c      	bne.n	8028694 <CRC_Lock+0x74>
 802867a:	4b0e      	ldr	r3, [pc, #56]	; (80286b4 <CRC_Lock+0x94>)
 802867c:	2201      	movs	r2, #1
 802867e:	601a      	str	r2, [r3, #0]
 8028680:	681a      	ldr	r2, [r3, #0]
 8028682:	2a00      	cmp	r2, #0
 8028684:	d1fc      	bne.n	8028680 <CRC_Lock+0x60>
 8028686:	4b0c      	ldr	r3, [pc, #48]	; (80286b8 <CRC_Lock+0x98>)
 8028688:	6018      	str	r0, [r3, #0]
 802868a:	6818      	ldr	r0, [r3, #0]
 802868c:	1a43      	subs	r3, r0, r1
 802868e:	4258      	negs	r0, r3
 8028690:	4158      	adcs	r0, r3
 8028692:	bd30      	pop	{r4, r5, pc}
 8028694:	4b09      	ldr	r3, [pc, #36]	; (80286bc <CRC_Lock+0x9c>)
 8028696:	2201      	movs	r2, #1
 8028698:	601a      	str	r2, [r3, #0]
 802869a:	681a      	ldr	r2, [r3, #0]
 802869c:	2a00      	cmp	r2, #0
 802869e:	d1fc      	bne.n	802869a <CRC_Lock+0x7a>
 80286a0:	4b07      	ldr	r3, [pc, #28]	; (80286c0 <CRC_Lock+0xa0>)
 80286a2:	e7f1      	b.n	8028688 <CRC_Lock+0x68>
 80286a4:	e0002000 	.word	0xe0002000
 80286a8:	e000ed00 	.word	0xe000ed00
 80286ac:	e0042000 	.word	0xe0042000
 80286b0:	5c001000 	.word	0x5c001000
 80286b4:	58024c08 	.word	0x58024c08
 80286b8:	58024c00 	.word	0x58024c00
 80286bc:	40023008 	.word	0x40023008
 80286c0:	40023000 	.word	0x40023000

080286c4 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 80286c4:	6101      	str	r1, [r0, #16]
 80286c6:	4770      	bx	lr

080286c8 <_ZN8touchgfx8Gestures4tickEv>:
 80286c8:	7b83      	ldrb	r3, [r0, #14]
 80286ca:	b14b      	cbz	r3, 80286e0 <_ZN8touchgfx8Gestures4tickEv+0x18>
 80286cc:	8903      	ldrh	r3, [r0, #8]
 80286ce:	3301      	adds	r3, #1
 80286d0:	b29b      	uxth	r3, r3
 80286d2:	2b07      	cmp	r3, #7
 80286d4:	8103      	strh	r3, [r0, #8]
 80286d6:	bf81      	itttt	hi
 80286d8:	2300      	movhi	r3, #0
 80286da:	8143      	strhhi	r3, [r0, #10]
 80286dc:	8183      	strhhi	r3, [r0, #12]
 80286de:	7383      	strbhi	r3, [r0, #14]
 80286e0:	4770      	bx	lr
	...

080286e4 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 80286e4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80286e8:	4698      	mov	r8, r3
 80286ea:	8883      	ldrh	r3, [r0, #4]
 80286ec:	4604      	mov	r4, r0
 80286ee:	4617      	mov	r7, r2
 80286f0:	f8ad 3006 	strh.w	r3, [sp, #6]
 80286f4:	eba8 0303 	sub.w	r3, r8, r3
 80286f8:	4a19      	ldr	r2, [pc, #100]	; (8028760 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 80286fa:	460e      	mov	r6, r1
 80286fc:	b21b      	sxth	r3, r3
 80286fe:	88c1      	ldrh	r1, [r0, #6]
 8028700:	9200      	str	r2, [sp, #0]
 8028702:	2000      	movs	r0, #0
 8028704:	2b00      	cmp	r3, #0
 8028706:	8aa2      	ldrh	r2, [r4, #20]
 8028708:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 802870c:	bfb8      	it	lt
 802870e:	425b      	neglt	r3, r3
 8028710:	f88d 0004 	strb.w	r0, [sp, #4]
 8028714:	f8ad 1008 	strh.w	r1, [sp, #8]
 8028718:	b21b      	sxth	r3, r3
 802871a:	f8ad 800a 	strh.w	r8, [sp, #10]
 802871e:	f8ad 500c 	strh.w	r5, [sp, #12]
 8028722:	4293      	cmp	r3, r2
 8028724:	dc07      	bgt.n	8028736 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 8028726:	1a69      	subs	r1, r5, r1
 8028728:	b209      	sxth	r1, r1
 802872a:	2900      	cmp	r1, #0
 802872c:	bfb8      	it	lt
 802872e:	4249      	neglt	r1, r1
 8028730:	b209      	sxth	r1, r1
 8028732:	428a      	cmp	r2, r1
 8028734:	da10      	bge.n	8028758 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 8028736:	6920      	ldr	r0, [r4, #16]
 8028738:	4669      	mov	r1, sp
 802873a:	eba8 0606 	sub.w	r6, r8, r6
 802873e:	1bef      	subs	r7, r5, r7
 8028740:	6803      	ldr	r3, [r0, #0]
 8028742:	685b      	ldr	r3, [r3, #4]
 8028744:	4798      	blx	r3
 8028746:	2300      	movs	r3, #0
 8028748:	2001      	movs	r0, #1
 802874a:	8166      	strh	r6, [r4, #10]
 802874c:	8123      	strh	r3, [r4, #8]
 802874e:	81a7      	strh	r7, [r4, #12]
 8028750:	f8a4 8004 	strh.w	r8, [r4, #4]
 8028754:	80e5      	strh	r5, [r4, #6]
 8028756:	73a0      	strb	r0, [r4, #14]
 8028758:	b004      	add	sp, #16
 802875a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802875e:	bf00      	nop
 8028760:	0802d774 	.word	0x0802d774

08028764 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8028764:	b5f0      	push	{r4, r5, r6, r7, lr}
 8028766:	461e      	mov	r6, r3
 8028768:	1e4b      	subs	r3, r1, #1
 802876a:	b085      	sub	sp, #20
 802876c:	4604      	mov	r4, r0
 802876e:	2b01      	cmp	r3, #1
 8028770:	460d      	mov	r5, r1
 8028772:	4617      	mov	r7, r2
 8028774:	d84b      	bhi.n	802880e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 8028776:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 802877a:	1cd3      	adds	r3, r2, #3
 802877c:	b29b      	uxth	r3, r3
 802877e:	2b06      	cmp	r3, #6
 8028780:	d916      	bls.n	80287b0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8028782:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 8028824 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8028786:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802878a:	f8cd c004 	str.w	ip, [sp, #4]
 802878e:	f04f 0c00 	mov.w	ip, #0
 8028792:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8028796:	6900      	ldr	r0, [r0, #16]
 8028798:	f8ad 100c 	strh.w	r1, [sp, #12]
 802879c:	a901      	add	r1, sp, #4
 802879e:	f88d c008 	strb.w	ip, [sp, #8]
 80287a2:	f8ad 200a 	strh.w	r2, [sp, #10]
 80287a6:	f8ad 300e 	strh.w	r3, [sp, #14]
 80287aa:	6803      	ldr	r3, [r0, #0]
 80287ac:	689b      	ldr	r3, [r3, #8]
 80287ae:	4798      	blx	r3
 80287b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80287b4:	1cd3      	adds	r3, r2, #3
 80287b6:	b29b      	uxth	r3, r3
 80287b8:	2b06      	cmp	r3, #6
 80287ba:	d916      	bls.n	80287ea <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80287bc:	f8df c064 	ldr.w	ip, [pc, #100]	; 8028824 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 80287c0:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80287c4:	f8cd c004 	str.w	ip, [sp, #4]
 80287c8:	f04f 0c01 	mov.w	ip, #1
 80287cc:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80287d0:	6920      	ldr	r0, [r4, #16]
 80287d2:	f8ad 100c 	strh.w	r1, [sp, #12]
 80287d6:	a901      	add	r1, sp, #4
 80287d8:	f88d c008 	strb.w	ip, [sp, #8]
 80287dc:	f8ad 200a 	strh.w	r2, [sp, #10]
 80287e0:	f8ad 300e 	strh.w	r3, [sp, #14]
 80287e4:	6803      	ldr	r3, [r0, #0]
 80287e6:	689b      	ldr	r3, [r3, #8]
 80287e8:	4798      	blx	r3
 80287ea:	4b0d      	ldr	r3, [pc, #52]	; (8028820 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 80287ec:	a901      	add	r1, sp, #4
 80287ee:	6920      	ldr	r0, [r4, #16]
 80287f0:	9301      	str	r3, [sp, #4]
 80287f2:	2300      	movs	r3, #0
 80287f4:	f88d 5008 	strb.w	r5, [sp, #8]
 80287f8:	f8ad 700a 	strh.w	r7, [sp, #10]
 80287fc:	f8ad 600c 	strh.w	r6, [sp, #12]
 8028800:	f8ad 300e 	strh.w	r3, [sp, #14]
 8028804:	6803      	ldr	r3, [r0, #0]
 8028806:	681b      	ldr	r3, [r3, #0]
 8028808:	4798      	blx	r3
 802880a:	b005      	add	sp, #20
 802880c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802880e:	2900      	cmp	r1, #0
 8028810:	d1eb      	bne.n	80287ea <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8028812:	80a2      	strh	r2, [r4, #4]
 8028814:	80c6      	strh	r6, [r0, #6]
 8028816:	60a1      	str	r1, [r4, #8]
 8028818:	81a1      	strh	r1, [r4, #12]
 802881a:	73a1      	strb	r1, [r4, #14]
 802881c:	e7e5      	b.n	80287ea <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802881e:	bf00      	nop
 8028820:	0802d760 	.word	0x0802d760
 8028824:	0802d788 	.word	0x0802d788

08028828 <__aeabi_atexit>:
 8028828:	460b      	mov	r3, r1
 802882a:	4601      	mov	r1, r0
 802882c:	4618      	mov	r0, r3
 802882e:	f000 b853 	b.w	80288d8 <__cxa_atexit>

08028832 <_ZdlPvj>:
 8028832:	f000 b812 	b.w	802885a <_ZdlPv>

08028836 <__cxa_guard_acquire>:
 8028836:	6803      	ldr	r3, [r0, #0]
 8028838:	07db      	lsls	r3, r3, #31
 802883a:	d406      	bmi.n	802884a <__cxa_guard_acquire+0x14>
 802883c:	7843      	ldrb	r3, [r0, #1]
 802883e:	b103      	cbz	r3, 8028842 <__cxa_guard_acquire+0xc>
 8028840:	deff      	udf	#255	; 0xff
 8028842:	2301      	movs	r3, #1
 8028844:	7043      	strb	r3, [r0, #1]
 8028846:	4618      	mov	r0, r3
 8028848:	4770      	bx	lr
 802884a:	2000      	movs	r0, #0
 802884c:	4770      	bx	lr

0802884e <__cxa_guard_release>:
 802884e:	2301      	movs	r3, #1
 8028850:	6003      	str	r3, [r0, #0]
 8028852:	4770      	bx	lr

08028854 <__cxa_pure_virtual>:
 8028854:	b508      	push	{r3, lr}
 8028856:	f000 f80f 	bl	8028878 <_ZSt9terminatev>

0802885a <_ZdlPv>:
 802885a:	f000 b893 	b.w	8028984 <free>

0802885e <_ZN10__cxxabiv111__terminateEPFvvE>:
 802885e:	b508      	push	{r3, lr}
 8028860:	4780      	blx	r0
 8028862:	f000 f80e 	bl	8028882 <abort>
	...

08028868 <_ZSt13get_terminatev>:
 8028868:	4b02      	ldr	r3, [pc, #8]	; (8028874 <_ZSt13get_terminatev+0xc>)
 802886a:	6818      	ldr	r0, [r3, #0]
 802886c:	f3bf 8f5b 	dmb	ish
 8028870:	4770      	bx	lr
 8028872:	bf00      	nop
 8028874:	240000bc 	.word	0x240000bc

08028878 <_ZSt9terminatev>:
 8028878:	b508      	push	{r3, lr}
 802887a:	f7ff fff5 	bl	8028868 <_ZSt13get_terminatev>
 802887e:	f7ff ffee 	bl	802885e <_ZN10__cxxabiv111__terminateEPFvvE>

08028882 <abort>:
 8028882:	b508      	push	{r3, lr}
 8028884:	2006      	movs	r0, #6
 8028886:	f000 fca1 	bl	80291cc <raise>
 802888a:	2001      	movs	r0, #1
 802888c:	f7d9 f834 	bl	80018f8 <_exit>

08028890 <__assert_func>:
 8028890:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8028892:	4614      	mov	r4, r2
 8028894:	461a      	mov	r2, r3
 8028896:	4b09      	ldr	r3, [pc, #36]	; (80288bc <__assert_func+0x2c>)
 8028898:	681b      	ldr	r3, [r3, #0]
 802889a:	4605      	mov	r5, r0
 802889c:	68d8      	ldr	r0, [r3, #12]
 802889e:	b14c      	cbz	r4, 80288b4 <__assert_func+0x24>
 80288a0:	4b07      	ldr	r3, [pc, #28]	; (80288c0 <__assert_func+0x30>)
 80288a2:	9100      	str	r1, [sp, #0]
 80288a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80288a8:	4906      	ldr	r1, [pc, #24]	; (80288c4 <__assert_func+0x34>)
 80288aa:	462b      	mov	r3, r5
 80288ac:	f000 f828 	bl	8028900 <fiprintf>
 80288b0:	f7ff ffe7 	bl	8028882 <abort>
 80288b4:	4b04      	ldr	r3, [pc, #16]	; (80288c8 <__assert_func+0x38>)
 80288b6:	461c      	mov	r4, r3
 80288b8:	e7f3      	b.n	80288a2 <__assert_func+0x12>
 80288ba:	bf00      	nop
 80288bc:	240000c0 	.word	0x240000c0
 80288c0:	0802d9b0 	.word	0x0802d9b0
 80288c4:	0802d9bd 	.word	0x0802d9bd
 80288c8:	0802d9eb 	.word	0x0802d9eb

080288cc <atexit>:
 80288cc:	2300      	movs	r3, #0
 80288ce:	4601      	mov	r1, r0
 80288d0:	461a      	mov	r2, r3
 80288d2:	4618      	mov	r0, r3
 80288d4:	f000 bd6a 	b.w	80293ac <__register_exitproc>

080288d8 <__cxa_atexit>:
 80288d8:	b510      	push	{r4, lr}
 80288da:	4c05      	ldr	r4, [pc, #20]	; (80288f0 <__cxa_atexit+0x18>)
 80288dc:	4613      	mov	r3, r2
 80288de:	b12c      	cbz	r4, 80288ec <__cxa_atexit+0x14>
 80288e0:	460a      	mov	r2, r1
 80288e2:	4601      	mov	r1, r0
 80288e4:	2002      	movs	r0, #2
 80288e6:	f000 fd61 	bl	80293ac <__register_exitproc>
 80288ea:	bd10      	pop	{r4, pc}
 80288ec:	4620      	mov	r0, r4
 80288ee:	e7fc      	b.n	80288ea <__cxa_atexit+0x12>
 80288f0:	080293ad 	.word	0x080293ad

080288f4 <__errno>:
 80288f4:	4b01      	ldr	r3, [pc, #4]	; (80288fc <__errno+0x8>)
 80288f6:	6818      	ldr	r0, [r3, #0]
 80288f8:	4770      	bx	lr
 80288fa:	bf00      	nop
 80288fc:	240000c0 	.word	0x240000c0

08028900 <fiprintf>:
 8028900:	b40e      	push	{r1, r2, r3}
 8028902:	b503      	push	{r0, r1, lr}
 8028904:	4601      	mov	r1, r0
 8028906:	ab03      	add	r3, sp, #12
 8028908:	4805      	ldr	r0, [pc, #20]	; (8028920 <fiprintf+0x20>)
 802890a:	f853 2b04 	ldr.w	r2, [r3], #4
 802890e:	6800      	ldr	r0, [r0, #0]
 8028910:	9301      	str	r3, [sp, #4]
 8028912:	f000 f95f 	bl	8028bd4 <_vfiprintf_r>
 8028916:	b002      	add	sp, #8
 8028918:	f85d eb04 	ldr.w	lr, [sp], #4
 802891c:	b003      	add	sp, #12
 802891e:	4770      	bx	lr
 8028920:	240000c0 	.word	0x240000c0

08028924 <__libc_init_array>:
 8028924:	b570      	push	{r4, r5, r6, lr}
 8028926:	4d0d      	ldr	r5, [pc, #52]	; (802895c <__libc_init_array+0x38>)
 8028928:	4c0d      	ldr	r4, [pc, #52]	; (8028960 <__libc_init_array+0x3c>)
 802892a:	1b64      	subs	r4, r4, r5
 802892c:	10a4      	asrs	r4, r4, #2
 802892e:	2600      	movs	r6, #0
 8028930:	42a6      	cmp	r6, r4
 8028932:	d109      	bne.n	8028948 <__libc_init_array+0x24>
 8028934:	4d0b      	ldr	r5, [pc, #44]	; (8028964 <__libc_init_array+0x40>)
 8028936:	4c0c      	ldr	r4, [pc, #48]	; (8028968 <__libc_init_array+0x44>)
 8028938:	f001 f86e 	bl	8029a18 <_init>
 802893c:	1b64      	subs	r4, r4, r5
 802893e:	10a4      	asrs	r4, r4, #2
 8028940:	2600      	movs	r6, #0
 8028942:	42a6      	cmp	r6, r4
 8028944:	d105      	bne.n	8028952 <__libc_init_array+0x2e>
 8028946:	bd70      	pop	{r4, r5, r6, pc}
 8028948:	f855 3b04 	ldr.w	r3, [r5], #4
 802894c:	4798      	blx	r3
 802894e:	3601      	adds	r6, #1
 8028950:	e7ee      	b.n	8028930 <__libc_init_array+0xc>
 8028952:	f855 3b04 	ldr.w	r3, [r5], #4
 8028956:	4798      	blx	r3
 8028958:	3601      	adds	r6, #1
 802895a:	e7f2      	b.n	8028942 <__libc_init_array+0x1e>
 802895c:	0802daa0 	.word	0x0802daa0
 8028960:	0802daa0 	.word	0x0802daa0
 8028964:	0802daa0 	.word	0x0802daa0
 8028968:	0802dac0 	.word	0x0802dac0

0802896c <__retarget_lock_init_recursive>:
 802896c:	4770      	bx	lr

0802896e <__retarget_lock_acquire_recursive>:
 802896e:	4770      	bx	lr

08028970 <__retarget_lock_release>:
 8028970:	4770      	bx	lr

08028972 <__retarget_lock_release_recursive>:
 8028972:	4770      	bx	lr

08028974 <malloc>:
 8028974:	4b02      	ldr	r3, [pc, #8]	; (8028980 <malloc+0xc>)
 8028976:	4601      	mov	r1, r0
 8028978:	6818      	ldr	r0, [r3, #0]
 802897a:	f000 b88d 	b.w	8028a98 <_malloc_r>
 802897e:	bf00      	nop
 8028980:	240000c0 	.word	0x240000c0

08028984 <free>:
 8028984:	4b02      	ldr	r3, [pc, #8]	; (8028990 <free+0xc>)
 8028986:	4601      	mov	r1, r0
 8028988:	6818      	ldr	r0, [r3, #0]
 802898a:	f000 b819 	b.w	80289c0 <_free_r>
 802898e:	bf00      	nop
 8028990:	240000c0 	.word	0x240000c0

08028994 <memcpy>:
 8028994:	440a      	add	r2, r1
 8028996:	4291      	cmp	r1, r2
 8028998:	f100 33ff 	add.w	r3, r0, #4294967295
 802899c:	d100      	bne.n	80289a0 <memcpy+0xc>
 802899e:	4770      	bx	lr
 80289a0:	b510      	push	{r4, lr}
 80289a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80289a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80289aa:	4291      	cmp	r1, r2
 80289ac:	d1f9      	bne.n	80289a2 <memcpy+0xe>
 80289ae:	bd10      	pop	{r4, pc}

080289b0 <memset>:
 80289b0:	4402      	add	r2, r0
 80289b2:	4603      	mov	r3, r0
 80289b4:	4293      	cmp	r3, r2
 80289b6:	d100      	bne.n	80289ba <memset+0xa>
 80289b8:	4770      	bx	lr
 80289ba:	f803 1b01 	strb.w	r1, [r3], #1
 80289be:	e7f9      	b.n	80289b4 <memset+0x4>

080289c0 <_free_r>:
 80289c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80289c2:	2900      	cmp	r1, #0
 80289c4:	d044      	beq.n	8028a50 <_free_r+0x90>
 80289c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80289ca:	9001      	str	r0, [sp, #4]
 80289cc:	2b00      	cmp	r3, #0
 80289ce:	f1a1 0404 	sub.w	r4, r1, #4
 80289d2:	bfb8      	it	lt
 80289d4:	18e4      	addlt	r4, r4, r3
 80289d6:	f000 ff67 	bl	80298a8 <__malloc_lock>
 80289da:	4a1e      	ldr	r2, [pc, #120]	; (8028a54 <_free_r+0x94>)
 80289dc:	9801      	ldr	r0, [sp, #4]
 80289de:	6813      	ldr	r3, [r2, #0]
 80289e0:	b933      	cbnz	r3, 80289f0 <_free_r+0x30>
 80289e2:	6063      	str	r3, [r4, #4]
 80289e4:	6014      	str	r4, [r2, #0]
 80289e6:	b003      	add	sp, #12
 80289e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80289ec:	f000 bf62 	b.w	80298b4 <__malloc_unlock>
 80289f0:	42a3      	cmp	r3, r4
 80289f2:	d908      	bls.n	8028a06 <_free_r+0x46>
 80289f4:	6825      	ldr	r5, [r4, #0]
 80289f6:	1961      	adds	r1, r4, r5
 80289f8:	428b      	cmp	r3, r1
 80289fa:	bf01      	itttt	eq
 80289fc:	6819      	ldreq	r1, [r3, #0]
 80289fe:	685b      	ldreq	r3, [r3, #4]
 8028a00:	1949      	addeq	r1, r1, r5
 8028a02:	6021      	streq	r1, [r4, #0]
 8028a04:	e7ed      	b.n	80289e2 <_free_r+0x22>
 8028a06:	461a      	mov	r2, r3
 8028a08:	685b      	ldr	r3, [r3, #4]
 8028a0a:	b10b      	cbz	r3, 8028a10 <_free_r+0x50>
 8028a0c:	42a3      	cmp	r3, r4
 8028a0e:	d9fa      	bls.n	8028a06 <_free_r+0x46>
 8028a10:	6811      	ldr	r1, [r2, #0]
 8028a12:	1855      	adds	r5, r2, r1
 8028a14:	42a5      	cmp	r5, r4
 8028a16:	d10b      	bne.n	8028a30 <_free_r+0x70>
 8028a18:	6824      	ldr	r4, [r4, #0]
 8028a1a:	4421      	add	r1, r4
 8028a1c:	1854      	adds	r4, r2, r1
 8028a1e:	42a3      	cmp	r3, r4
 8028a20:	6011      	str	r1, [r2, #0]
 8028a22:	d1e0      	bne.n	80289e6 <_free_r+0x26>
 8028a24:	681c      	ldr	r4, [r3, #0]
 8028a26:	685b      	ldr	r3, [r3, #4]
 8028a28:	6053      	str	r3, [r2, #4]
 8028a2a:	4421      	add	r1, r4
 8028a2c:	6011      	str	r1, [r2, #0]
 8028a2e:	e7da      	b.n	80289e6 <_free_r+0x26>
 8028a30:	d902      	bls.n	8028a38 <_free_r+0x78>
 8028a32:	230c      	movs	r3, #12
 8028a34:	6003      	str	r3, [r0, #0]
 8028a36:	e7d6      	b.n	80289e6 <_free_r+0x26>
 8028a38:	6825      	ldr	r5, [r4, #0]
 8028a3a:	1961      	adds	r1, r4, r5
 8028a3c:	428b      	cmp	r3, r1
 8028a3e:	bf04      	itt	eq
 8028a40:	6819      	ldreq	r1, [r3, #0]
 8028a42:	685b      	ldreq	r3, [r3, #4]
 8028a44:	6063      	str	r3, [r4, #4]
 8028a46:	bf04      	itt	eq
 8028a48:	1949      	addeq	r1, r1, r5
 8028a4a:	6021      	streq	r1, [r4, #0]
 8028a4c:	6054      	str	r4, [r2, #4]
 8028a4e:	e7ca      	b.n	80289e6 <_free_r+0x26>
 8028a50:	b003      	add	sp, #12
 8028a52:	bd30      	pop	{r4, r5, pc}
 8028a54:	24026320 	.word	0x24026320

08028a58 <sbrk_aligned>:
 8028a58:	b570      	push	{r4, r5, r6, lr}
 8028a5a:	4e0e      	ldr	r6, [pc, #56]	; (8028a94 <sbrk_aligned+0x3c>)
 8028a5c:	460c      	mov	r4, r1
 8028a5e:	6831      	ldr	r1, [r6, #0]
 8028a60:	4605      	mov	r5, r0
 8028a62:	b911      	cbnz	r1, 8028a6a <sbrk_aligned+0x12>
 8028a64:	f000 fb7a 	bl	802915c <_sbrk_r>
 8028a68:	6030      	str	r0, [r6, #0]
 8028a6a:	4621      	mov	r1, r4
 8028a6c:	4628      	mov	r0, r5
 8028a6e:	f000 fb75 	bl	802915c <_sbrk_r>
 8028a72:	1c43      	adds	r3, r0, #1
 8028a74:	d00a      	beq.n	8028a8c <sbrk_aligned+0x34>
 8028a76:	1cc4      	adds	r4, r0, #3
 8028a78:	f024 0403 	bic.w	r4, r4, #3
 8028a7c:	42a0      	cmp	r0, r4
 8028a7e:	d007      	beq.n	8028a90 <sbrk_aligned+0x38>
 8028a80:	1a21      	subs	r1, r4, r0
 8028a82:	4628      	mov	r0, r5
 8028a84:	f000 fb6a 	bl	802915c <_sbrk_r>
 8028a88:	3001      	adds	r0, #1
 8028a8a:	d101      	bne.n	8028a90 <sbrk_aligned+0x38>
 8028a8c:	f04f 34ff 	mov.w	r4, #4294967295
 8028a90:	4620      	mov	r0, r4
 8028a92:	bd70      	pop	{r4, r5, r6, pc}
 8028a94:	24026324 	.word	0x24026324

08028a98 <_malloc_r>:
 8028a98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028a9c:	1ccd      	adds	r5, r1, #3
 8028a9e:	f025 0503 	bic.w	r5, r5, #3
 8028aa2:	3508      	adds	r5, #8
 8028aa4:	2d0c      	cmp	r5, #12
 8028aa6:	bf38      	it	cc
 8028aa8:	250c      	movcc	r5, #12
 8028aaa:	2d00      	cmp	r5, #0
 8028aac:	4607      	mov	r7, r0
 8028aae:	db01      	blt.n	8028ab4 <_malloc_r+0x1c>
 8028ab0:	42a9      	cmp	r1, r5
 8028ab2:	d905      	bls.n	8028ac0 <_malloc_r+0x28>
 8028ab4:	230c      	movs	r3, #12
 8028ab6:	603b      	str	r3, [r7, #0]
 8028ab8:	2600      	movs	r6, #0
 8028aba:	4630      	mov	r0, r6
 8028abc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8028ac0:	4e2e      	ldr	r6, [pc, #184]	; (8028b7c <_malloc_r+0xe4>)
 8028ac2:	f000 fef1 	bl	80298a8 <__malloc_lock>
 8028ac6:	6833      	ldr	r3, [r6, #0]
 8028ac8:	461c      	mov	r4, r3
 8028aca:	bb34      	cbnz	r4, 8028b1a <_malloc_r+0x82>
 8028acc:	4629      	mov	r1, r5
 8028ace:	4638      	mov	r0, r7
 8028ad0:	f7ff ffc2 	bl	8028a58 <sbrk_aligned>
 8028ad4:	1c43      	adds	r3, r0, #1
 8028ad6:	4604      	mov	r4, r0
 8028ad8:	d14d      	bne.n	8028b76 <_malloc_r+0xde>
 8028ada:	6834      	ldr	r4, [r6, #0]
 8028adc:	4626      	mov	r6, r4
 8028ade:	2e00      	cmp	r6, #0
 8028ae0:	d140      	bne.n	8028b64 <_malloc_r+0xcc>
 8028ae2:	6823      	ldr	r3, [r4, #0]
 8028ae4:	4631      	mov	r1, r6
 8028ae6:	4638      	mov	r0, r7
 8028ae8:	eb04 0803 	add.w	r8, r4, r3
 8028aec:	f000 fb36 	bl	802915c <_sbrk_r>
 8028af0:	4580      	cmp	r8, r0
 8028af2:	d13a      	bne.n	8028b6a <_malloc_r+0xd2>
 8028af4:	6821      	ldr	r1, [r4, #0]
 8028af6:	3503      	adds	r5, #3
 8028af8:	1a6d      	subs	r5, r5, r1
 8028afa:	f025 0503 	bic.w	r5, r5, #3
 8028afe:	3508      	adds	r5, #8
 8028b00:	2d0c      	cmp	r5, #12
 8028b02:	bf38      	it	cc
 8028b04:	250c      	movcc	r5, #12
 8028b06:	4629      	mov	r1, r5
 8028b08:	4638      	mov	r0, r7
 8028b0a:	f7ff ffa5 	bl	8028a58 <sbrk_aligned>
 8028b0e:	3001      	adds	r0, #1
 8028b10:	d02b      	beq.n	8028b6a <_malloc_r+0xd2>
 8028b12:	6823      	ldr	r3, [r4, #0]
 8028b14:	442b      	add	r3, r5
 8028b16:	6023      	str	r3, [r4, #0]
 8028b18:	e00e      	b.n	8028b38 <_malloc_r+0xa0>
 8028b1a:	6822      	ldr	r2, [r4, #0]
 8028b1c:	1b52      	subs	r2, r2, r5
 8028b1e:	d41e      	bmi.n	8028b5e <_malloc_r+0xc6>
 8028b20:	2a0b      	cmp	r2, #11
 8028b22:	d916      	bls.n	8028b52 <_malloc_r+0xba>
 8028b24:	1961      	adds	r1, r4, r5
 8028b26:	42a3      	cmp	r3, r4
 8028b28:	6025      	str	r5, [r4, #0]
 8028b2a:	bf18      	it	ne
 8028b2c:	6059      	strne	r1, [r3, #4]
 8028b2e:	6863      	ldr	r3, [r4, #4]
 8028b30:	bf08      	it	eq
 8028b32:	6031      	streq	r1, [r6, #0]
 8028b34:	5162      	str	r2, [r4, r5]
 8028b36:	604b      	str	r3, [r1, #4]
 8028b38:	4638      	mov	r0, r7
 8028b3a:	f104 060b 	add.w	r6, r4, #11
 8028b3e:	f000 feb9 	bl	80298b4 <__malloc_unlock>
 8028b42:	f026 0607 	bic.w	r6, r6, #7
 8028b46:	1d23      	adds	r3, r4, #4
 8028b48:	1af2      	subs	r2, r6, r3
 8028b4a:	d0b6      	beq.n	8028aba <_malloc_r+0x22>
 8028b4c:	1b9b      	subs	r3, r3, r6
 8028b4e:	50a3      	str	r3, [r4, r2]
 8028b50:	e7b3      	b.n	8028aba <_malloc_r+0x22>
 8028b52:	6862      	ldr	r2, [r4, #4]
 8028b54:	42a3      	cmp	r3, r4
 8028b56:	bf0c      	ite	eq
 8028b58:	6032      	streq	r2, [r6, #0]
 8028b5a:	605a      	strne	r2, [r3, #4]
 8028b5c:	e7ec      	b.n	8028b38 <_malloc_r+0xa0>
 8028b5e:	4623      	mov	r3, r4
 8028b60:	6864      	ldr	r4, [r4, #4]
 8028b62:	e7b2      	b.n	8028aca <_malloc_r+0x32>
 8028b64:	4634      	mov	r4, r6
 8028b66:	6876      	ldr	r6, [r6, #4]
 8028b68:	e7b9      	b.n	8028ade <_malloc_r+0x46>
 8028b6a:	230c      	movs	r3, #12
 8028b6c:	603b      	str	r3, [r7, #0]
 8028b6e:	4638      	mov	r0, r7
 8028b70:	f000 fea0 	bl	80298b4 <__malloc_unlock>
 8028b74:	e7a1      	b.n	8028aba <_malloc_r+0x22>
 8028b76:	6025      	str	r5, [r4, #0]
 8028b78:	e7de      	b.n	8028b38 <_malloc_r+0xa0>
 8028b7a:	bf00      	nop
 8028b7c:	24026320 	.word	0x24026320

08028b80 <__sfputc_r>:
 8028b80:	6893      	ldr	r3, [r2, #8]
 8028b82:	3b01      	subs	r3, #1
 8028b84:	2b00      	cmp	r3, #0
 8028b86:	b410      	push	{r4}
 8028b88:	6093      	str	r3, [r2, #8]
 8028b8a:	da08      	bge.n	8028b9e <__sfputc_r+0x1e>
 8028b8c:	6994      	ldr	r4, [r2, #24]
 8028b8e:	42a3      	cmp	r3, r4
 8028b90:	db01      	blt.n	8028b96 <__sfputc_r+0x16>
 8028b92:	290a      	cmp	r1, #10
 8028b94:	d103      	bne.n	8028b9e <__sfputc_r+0x1e>
 8028b96:	f85d 4b04 	ldr.w	r4, [sp], #4
 8028b9a:	f000 bb47 	b.w	802922c <__swbuf_r>
 8028b9e:	6813      	ldr	r3, [r2, #0]
 8028ba0:	1c58      	adds	r0, r3, #1
 8028ba2:	6010      	str	r0, [r2, #0]
 8028ba4:	7019      	strb	r1, [r3, #0]
 8028ba6:	4608      	mov	r0, r1
 8028ba8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8028bac:	4770      	bx	lr

08028bae <__sfputs_r>:
 8028bae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028bb0:	4606      	mov	r6, r0
 8028bb2:	460f      	mov	r7, r1
 8028bb4:	4614      	mov	r4, r2
 8028bb6:	18d5      	adds	r5, r2, r3
 8028bb8:	42ac      	cmp	r4, r5
 8028bba:	d101      	bne.n	8028bc0 <__sfputs_r+0x12>
 8028bbc:	2000      	movs	r0, #0
 8028bbe:	e007      	b.n	8028bd0 <__sfputs_r+0x22>
 8028bc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8028bc4:	463a      	mov	r2, r7
 8028bc6:	4630      	mov	r0, r6
 8028bc8:	f7ff ffda 	bl	8028b80 <__sfputc_r>
 8028bcc:	1c43      	adds	r3, r0, #1
 8028bce:	d1f3      	bne.n	8028bb8 <__sfputs_r+0xa>
 8028bd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08028bd4 <_vfiprintf_r>:
 8028bd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028bd8:	460d      	mov	r5, r1
 8028bda:	b09d      	sub	sp, #116	; 0x74
 8028bdc:	4614      	mov	r4, r2
 8028bde:	4698      	mov	r8, r3
 8028be0:	4606      	mov	r6, r0
 8028be2:	b118      	cbz	r0, 8028bec <_vfiprintf_r+0x18>
 8028be4:	6983      	ldr	r3, [r0, #24]
 8028be6:	b90b      	cbnz	r3, 8028bec <_vfiprintf_r+0x18>
 8028be8:	f000 fd5c 	bl	80296a4 <__sinit>
 8028bec:	4b89      	ldr	r3, [pc, #548]	; (8028e14 <_vfiprintf_r+0x240>)
 8028bee:	429d      	cmp	r5, r3
 8028bf0:	d11b      	bne.n	8028c2a <_vfiprintf_r+0x56>
 8028bf2:	6875      	ldr	r5, [r6, #4]
 8028bf4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8028bf6:	07d9      	lsls	r1, r3, #31
 8028bf8:	d405      	bmi.n	8028c06 <_vfiprintf_r+0x32>
 8028bfa:	89ab      	ldrh	r3, [r5, #12]
 8028bfc:	059a      	lsls	r2, r3, #22
 8028bfe:	d402      	bmi.n	8028c06 <_vfiprintf_r+0x32>
 8028c00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8028c02:	f7ff feb4 	bl	802896e <__retarget_lock_acquire_recursive>
 8028c06:	89ab      	ldrh	r3, [r5, #12]
 8028c08:	071b      	lsls	r3, r3, #28
 8028c0a:	d501      	bpl.n	8028c10 <_vfiprintf_r+0x3c>
 8028c0c:	692b      	ldr	r3, [r5, #16]
 8028c0e:	b9eb      	cbnz	r3, 8028c4c <_vfiprintf_r+0x78>
 8028c10:	4629      	mov	r1, r5
 8028c12:	4630      	mov	r0, r6
 8028c14:	f000 fb5c 	bl	80292d0 <__swsetup_r>
 8028c18:	b1c0      	cbz	r0, 8028c4c <_vfiprintf_r+0x78>
 8028c1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8028c1c:	07dc      	lsls	r4, r3, #31
 8028c1e:	d50e      	bpl.n	8028c3e <_vfiprintf_r+0x6a>
 8028c20:	f04f 30ff 	mov.w	r0, #4294967295
 8028c24:	b01d      	add	sp, #116	; 0x74
 8028c26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028c2a:	4b7b      	ldr	r3, [pc, #492]	; (8028e18 <_vfiprintf_r+0x244>)
 8028c2c:	429d      	cmp	r5, r3
 8028c2e:	d101      	bne.n	8028c34 <_vfiprintf_r+0x60>
 8028c30:	68b5      	ldr	r5, [r6, #8]
 8028c32:	e7df      	b.n	8028bf4 <_vfiprintf_r+0x20>
 8028c34:	4b79      	ldr	r3, [pc, #484]	; (8028e1c <_vfiprintf_r+0x248>)
 8028c36:	429d      	cmp	r5, r3
 8028c38:	bf08      	it	eq
 8028c3a:	68f5      	ldreq	r5, [r6, #12]
 8028c3c:	e7da      	b.n	8028bf4 <_vfiprintf_r+0x20>
 8028c3e:	89ab      	ldrh	r3, [r5, #12]
 8028c40:	0598      	lsls	r0, r3, #22
 8028c42:	d4ed      	bmi.n	8028c20 <_vfiprintf_r+0x4c>
 8028c44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8028c46:	f7ff fe94 	bl	8028972 <__retarget_lock_release_recursive>
 8028c4a:	e7e9      	b.n	8028c20 <_vfiprintf_r+0x4c>
 8028c4c:	2300      	movs	r3, #0
 8028c4e:	9309      	str	r3, [sp, #36]	; 0x24
 8028c50:	2320      	movs	r3, #32
 8028c52:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8028c56:	f8cd 800c 	str.w	r8, [sp, #12]
 8028c5a:	2330      	movs	r3, #48	; 0x30
 8028c5c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8028e20 <_vfiprintf_r+0x24c>
 8028c60:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8028c64:	f04f 0901 	mov.w	r9, #1
 8028c68:	4623      	mov	r3, r4
 8028c6a:	469a      	mov	sl, r3
 8028c6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8028c70:	b10a      	cbz	r2, 8028c76 <_vfiprintf_r+0xa2>
 8028c72:	2a25      	cmp	r2, #37	; 0x25
 8028c74:	d1f9      	bne.n	8028c6a <_vfiprintf_r+0x96>
 8028c76:	ebba 0b04 	subs.w	fp, sl, r4
 8028c7a:	d00b      	beq.n	8028c94 <_vfiprintf_r+0xc0>
 8028c7c:	465b      	mov	r3, fp
 8028c7e:	4622      	mov	r2, r4
 8028c80:	4629      	mov	r1, r5
 8028c82:	4630      	mov	r0, r6
 8028c84:	f7ff ff93 	bl	8028bae <__sfputs_r>
 8028c88:	3001      	adds	r0, #1
 8028c8a:	f000 80aa 	beq.w	8028de2 <_vfiprintf_r+0x20e>
 8028c8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8028c90:	445a      	add	r2, fp
 8028c92:	9209      	str	r2, [sp, #36]	; 0x24
 8028c94:	f89a 3000 	ldrb.w	r3, [sl]
 8028c98:	2b00      	cmp	r3, #0
 8028c9a:	f000 80a2 	beq.w	8028de2 <_vfiprintf_r+0x20e>
 8028c9e:	2300      	movs	r3, #0
 8028ca0:	f04f 32ff 	mov.w	r2, #4294967295
 8028ca4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8028ca8:	f10a 0a01 	add.w	sl, sl, #1
 8028cac:	9304      	str	r3, [sp, #16]
 8028cae:	9307      	str	r3, [sp, #28]
 8028cb0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8028cb4:	931a      	str	r3, [sp, #104]	; 0x68
 8028cb6:	4654      	mov	r4, sl
 8028cb8:	2205      	movs	r2, #5
 8028cba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8028cbe:	4858      	ldr	r0, [pc, #352]	; (8028e20 <_vfiprintf_r+0x24c>)
 8028cc0:	f7d7 fb16 	bl	80002f0 <memchr>
 8028cc4:	9a04      	ldr	r2, [sp, #16]
 8028cc6:	b9d8      	cbnz	r0, 8028d00 <_vfiprintf_r+0x12c>
 8028cc8:	06d1      	lsls	r1, r2, #27
 8028cca:	bf44      	itt	mi
 8028ccc:	2320      	movmi	r3, #32
 8028cce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8028cd2:	0713      	lsls	r3, r2, #28
 8028cd4:	bf44      	itt	mi
 8028cd6:	232b      	movmi	r3, #43	; 0x2b
 8028cd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8028cdc:	f89a 3000 	ldrb.w	r3, [sl]
 8028ce0:	2b2a      	cmp	r3, #42	; 0x2a
 8028ce2:	d015      	beq.n	8028d10 <_vfiprintf_r+0x13c>
 8028ce4:	9a07      	ldr	r2, [sp, #28]
 8028ce6:	4654      	mov	r4, sl
 8028ce8:	2000      	movs	r0, #0
 8028cea:	f04f 0c0a 	mov.w	ip, #10
 8028cee:	4621      	mov	r1, r4
 8028cf0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8028cf4:	3b30      	subs	r3, #48	; 0x30
 8028cf6:	2b09      	cmp	r3, #9
 8028cf8:	d94e      	bls.n	8028d98 <_vfiprintf_r+0x1c4>
 8028cfa:	b1b0      	cbz	r0, 8028d2a <_vfiprintf_r+0x156>
 8028cfc:	9207      	str	r2, [sp, #28]
 8028cfe:	e014      	b.n	8028d2a <_vfiprintf_r+0x156>
 8028d00:	eba0 0308 	sub.w	r3, r0, r8
 8028d04:	fa09 f303 	lsl.w	r3, r9, r3
 8028d08:	4313      	orrs	r3, r2
 8028d0a:	9304      	str	r3, [sp, #16]
 8028d0c:	46a2      	mov	sl, r4
 8028d0e:	e7d2      	b.n	8028cb6 <_vfiprintf_r+0xe2>
 8028d10:	9b03      	ldr	r3, [sp, #12]
 8028d12:	1d19      	adds	r1, r3, #4
 8028d14:	681b      	ldr	r3, [r3, #0]
 8028d16:	9103      	str	r1, [sp, #12]
 8028d18:	2b00      	cmp	r3, #0
 8028d1a:	bfbb      	ittet	lt
 8028d1c:	425b      	neglt	r3, r3
 8028d1e:	f042 0202 	orrlt.w	r2, r2, #2
 8028d22:	9307      	strge	r3, [sp, #28]
 8028d24:	9307      	strlt	r3, [sp, #28]
 8028d26:	bfb8      	it	lt
 8028d28:	9204      	strlt	r2, [sp, #16]
 8028d2a:	7823      	ldrb	r3, [r4, #0]
 8028d2c:	2b2e      	cmp	r3, #46	; 0x2e
 8028d2e:	d10c      	bne.n	8028d4a <_vfiprintf_r+0x176>
 8028d30:	7863      	ldrb	r3, [r4, #1]
 8028d32:	2b2a      	cmp	r3, #42	; 0x2a
 8028d34:	d135      	bne.n	8028da2 <_vfiprintf_r+0x1ce>
 8028d36:	9b03      	ldr	r3, [sp, #12]
 8028d38:	1d1a      	adds	r2, r3, #4
 8028d3a:	681b      	ldr	r3, [r3, #0]
 8028d3c:	9203      	str	r2, [sp, #12]
 8028d3e:	2b00      	cmp	r3, #0
 8028d40:	bfb8      	it	lt
 8028d42:	f04f 33ff 	movlt.w	r3, #4294967295
 8028d46:	3402      	adds	r4, #2
 8028d48:	9305      	str	r3, [sp, #20]
 8028d4a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8028e30 <_vfiprintf_r+0x25c>
 8028d4e:	7821      	ldrb	r1, [r4, #0]
 8028d50:	2203      	movs	r2, #3
 8028d52:	4650      	mov	r0, sl
 8028d54:	f7d7 facc 	bl	80002f0 <memchr>
 8028d58:	b140      	cbz	r0, 8028d6c <_vfiprintf_r+0x198>
 8028d5a:	2340      	movs	r3, #64	; 0x40
 8028d5c:	eba0 000a 	sub.w	r0, r0, sl
 8028d60:	fa03 f000 	lsl.w	r0, r3, r0
 8028d64:	9b04      	ldr	r3, [sp, #16]
 8028d66:	4303      	orrs	r3, r0
 8028d68:	3401      	adds	r4, #1
 8028d6a:	9304      	str	r3, [sp, #16]
 8028d6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8028d70:	482c      	ldr	r0, [pc, #176]	; (8028e24 <_vfiprintf_r+0x250>)
 8028d72:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8028d76:	2206      	movs	r2, #6
 8028d78:	f7d7 faba 	bl	80002f0 <memchr>
 8028d7c:	2800      	cmp	r0, #0
 8028d7e:	d03f      	beq.n	8028e00 <_vfiprintf_r+0x22c>
 8028d80:	4b29      	ldr	r3, [pc, #164]	; (8028e28 <_vfiprintf_r+0x254>)
 8028d82:	bb1b      	cbnz	r3, 8028dcc <_vfiprintf_r+0x1f8>
 8028d84:	9b03      	ldr	r3, [sp, #12]
 8028d86:	3307      	adds	r3, #7
 8028d88:	f023 0307 	bic.w	r3, r3, #7
 8028d8c:	3308      	adds	r3, #8
 8028d8e:	9303      	str	r3, [sp, #12]
 8028d90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028d92:	443b      	add	r3, r7
 8028d94:	9309      	str	r3, [sp, #36]	; 0x24
 8028d96:	e767      	b.n	8028c68 <_vfiprintf_r+0x94>
 8028d98:	fb0c 3202 	mla	r2, ip, r2, r3
 8028d9c:	460c      	mov	r4, r1
 8028d9e:	2001      	movs	r0, #1
 8028da0:	e7a5      	b.n	8028cee <_vfiprintf_r+0x11a>
 8028da2:	2300      	movs	r3, #0
 8028da4:	3401      	adds	r4, #1
 8028da6:	9305      	str	r3, [sp, #20]
 8028da8:	4619      	mov	r1, r3
 8028daa:	f04f 0c0a 	mov.w	ip, #10
 8028dae:	4620      	mov	r0, r4
 8028db0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8028db4:	3a30      	subs	r2, #48	; 0x30
 8028db6:	2a09      	cmp	r2, #9
 8028db8:	d903      	bls.n	8028dc2 <_vfiprintf_r+0x1ee>
 8028dba:	2b00      	cmp	r3, #0
 8028dbc:	d0c5      	beq.n	8028d4a <_vfiprintf_r+0x176>
 8028dbe:	9105      	str	r1, [sp, #20]
 8028dc0:	e7c3      	b.n	8028d4a <_vfiprintf_r+0x176>
 8028dc2:	fb0c 2101 	mla	r1, ip, r1, r2
 8028dc6:	4604      	mov	r4, r0
 8028dc8:	2301      	movs	r3, #1
 8028dca:	e7f0      	b.n	8028dae <_vfiprintf_r+0x1da>
 8028dcc:	ab03      	add	r3, sp, #12
 8028dce:	9300      	str	r3, [sp, #0]
 8028dd0:	462a      	mov	r2, r5
 8028dd2:	4b16      	ldr	r3, [pc, #88]	; (8028e2c <_vfiprintf_r+0x258>)
 8028dd4:	a904      	add	r1, sp, #16
 8028dd6:	4630      	mov	r0, r6
 8028dd8:	f3af 8000 	nop.w
 8028ddc:	4607      	mov	r7, r0
 8028dde:	1c78      	adds	r0, r7, #1
 8028de0:	d1d6      	bne.n	8028d90 <_vfiprintf_r+0x1bc>
 8028de2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8028de4:	07d9      	lsls	r1, r3, #31
 8028de6:	d405      	bmi.n	8028df4 <_vfiprintf_r+0x220>
 8028de8:	89ab      	ldrh	r3, [r5, #12]
 8028dea:	059a      	lsls	r2, r3, #22
 8028dec:	d402      	bmi.n	8028df4 <_vfiprintf_r+0x220>
 8028dee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8028df0:	f7ff fdbf 	bl	8028972 <__retarget_lock_release_recursive>
 8028df4:	89ab      	ldrh	r3, [r5, #12]
 8028df6:	065b      	lsls	r3, r3, #25
 8028df8:	f53f af12 	bmi.w	8028c20 <_vfiprintf_r+0x4c>
 8028dfc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8028dfe:	e711      	b.n	8028c24 <_vfiprintf_r+0x50>
 8028e00:	ab03      	add	r3, sp, #12
 8028e02:	9300      	str	r3, [sp, #0]
 8028e04:	462a      	mov	r2, r5
 8028e06:	4b09      	ldr	r3, [pc, #36]	; (8028e2c <_vfiprintf_r+0x258>)
 8028e08:	a904      	add	r1, sp, #16
 8028e0a:	4630      	mov	r0, r6
 8028e0c:	f000 f880 	bl	8028f10 <_printf_i>
 8028e10:	e7e4      	b.n	8028ddc <_vfiprintf_r+0x208>
 8028e12:	bf00      	nop
 8028e14:	0802da48 	.word	0x0802da48
 8028e18:	0802da68 	.word	0x0802da68
 8028e1c:	0802da28 	.word	0x0802da28
 8028e20:	0802d9f0 	.word	0x0802d9f0
 8028e24:	0802d9fa 	.word	0x0802d9fa
 8028e28:	00000000 	.word	0x00000000
 8028e2c:	08028baf 	.word	0x08028baf
 8028e30:	0802d9f6 	.word	0x0802d9f6

08028e34 <_printf_common>:
 8028e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8028e38:	4616      	mov	r6, r2
 8028e3a:	4699      	mov	r9, r3
 8028e3c:	688a      	ldr	r2, [r1, #8]
 8028e3e:	690b      	ldr	r3, [r1, #16]
 8028e40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8028e44:	4293      	cmp	r3, r2
 8028e46:	bfb8      	it	lt
 8028e48:	4613      	movlt	r3, r2
 8028e4a:	6033      	str	r3, [r6, #0]
 8028e4c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8028e50:	4607      	mov	r7, r0
 8028e52:	460c      	mov	r4, r1
 8028e54:	b10a      	cbz	r2, 8028e5a <_printf_common+0x26>
 8028e56:	3301      	adds	r3, #1
 8028e58:	6033      	str	r3, [r6, #0]
 8028e5a:	6823      	ldr	r3, [r4, #0]
 8028e5c:	0699      	lsls	r1, r3, #26
 8028e5e:	bf42      	ittt	mi
 8028e60:	6833      	ldrmi	r3, [r6, #0]
 8028e62:	3302      	addmi	r3, #2
 8028e64:	6033      	strmi	r3, [r6, #0]
 8028e66:	6825      	ldr	r5, [r4, #0]
 8028e68:	f015 0506 	ands.w	r5, r5, #6
 8028e6c:	d106      	bne.n	8028e7c <_printf_common+0x48>
 8028e6e:	f104 0a19 	add.w	sl, r4, #25
 8028e72:	68e3      	ldr	r3, [r4, #12]
 8028e74:	6832      	ldr	r2, [r6, #0]
 8028e76:	1a9b      	subs	r3, r3, r2
 8028e78:	42ab      	cmp	r3, r5
 8028e7a:	dc26      	bgt.n	8028eca <_printf_common+0x96>
 8028e7c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8028e80:	1e13      	subs	r3, r2, #0
 8028e82:	6822      	ldr	r2, [r4, #0]
 8028e84:	bf18      	it	ne
 8028e86:	2301      	movne	r3, #1
 8028e88:	0692      	lsls	r2, r2, #26
 8028e8a:	d42b      	bmi.n	8028ee4 <_printf_common+0xb0>
 8028e8c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8028e90:	4649      	mov	r1, r9
 8028e92:	4638      	mov	r0, r7
 8028e94:	47c0      	blx	r8
 8028e96:	3001      	adds	r0, #1
 8028e98:	d01e      	beq.n	8028ed8 <_printf_common+0xa4>
 8028e9a:	6823      	ldr	r3, [r4, #0]
 8028e9c:	68e5      	ldr	r5, [r4, #12]
 8028e9e:	6832      	ldr	r2, [r6, #0]
 8028ea0:	f003 0306 	and.w	r3, r3, #6
 8028ea4:	2b04      	cmp	r3, #4
 8028ea6:	bf08      	it	eq
 8028ea8:	1aad      	subeq	r5, r5, r2
 8028eaa:	68a3      	ldr	r3, [r4, #8]
 8028eac:	6922      	ldr	r2, [r4, #16]
 8028eae:	bf0c      	ite	eq
 8028eb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8028eb4:	2500      	movne	r5, #0
 8028eb6:	4293      	cmp	r3, r2
 8028eb8:	bfc4      	itt	gt
 8028eba:	1a9b      	subgt	r3, r3, r2
 8028ebc:	18ed      	addgt	r5, r5, r3
 8028ebe:	2600      	movs	r6, #0
 8028ec0:	341a      	adds	r4, #26
 8028ec2:	42b5      	cmp	r5, r6
 8028ec4:	d11a      	bne.n	8028efc <_printf_common+0xc8>
 8028ec6:	2000      	movs	r0, #0
 8028ec8:	e008      	b.n	8028edc <_printf_common+0xa8>
 8028eca:	2301      	movs	r3, #1
 8028ecc:	4652      	mov	r2, sl
 8028ece:	4649      	mov	r1, r9
 8028ed0:	4638      	mov	r0, r7
 8028ed2:	47c0      	blx	r8
 8028ed4:	3001      	adds	r0, #1
 8028ed6:	d103      	bne.n	8028ee0 <_printf_common+0xac>
 8028ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8028edc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8028ee0:	3501      	adds	r5, #1
 8028ee2:	e7c6      	b.n	8028e72 <_printf_common+0x3e>
 8028ee4:	18e1      	adds	r1, r4, r3
 8028ee6:	1c5a      	adds	r2, r3, #1
 8028ee8:	2030      	movs	r0, #48	; 0x30
 8028eea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8028eee:	4422      	add	r2, r4
 8028ef0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8028ef4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8028ef8:	3302      	adds	r3, #2
 8028efa:	e7c7      	b.n	8028e8c <_printf_common+0x58>
 8028efc:	2301      	movs	r3, #1
 8028efe:	4622      	mov	r2, r4
 8028f00:	4649      	mov	r1, r9
 8028f02:	4638      	mov	r0, r7
 8028f04:	47c0      	blx	r8
 8028f06:	3001      	adds	r0, #1
 8028f08:	d0e6      	beq.n	8028ed8 <_printf_common+0xa4>
 8028f0a:	3601      	adds	r6, #1
 8028f0c:	e7d9      	b.n	8028ec2 <_printf_common+0x8e>
	...

08028f10 <_printf_i>:
 8028f10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8028f14:	7e0f      	ldrb	r7, [r1, #24]
 8028f16:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8028f18:	2f78      	cmp	r7, #120	; 0x78
 8028f1a:	4691      	mov	r9, r2
 8028f1c:	4680      	mov	r8, r0
 8028f1e:	460c      	mov	r4, r1
 8028f20:	469a      	mov	sl, r3
 8028f22:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8028f26:	d807      	bhi.n	8028f38 <_printf_i+0x28>
 8028f28:	2f62      	cmp	r7, #98	; 0x62
 8028f2a:	d80a      	bhi.n	8028f42 <_printf_i+0x32>
 8028f2c:	2f00      	cmp	r7, #0
 8028f2e:	f000 80d8 	beq.w	80290e2 <_printf_i+0x1d2>
 8028f32:	2f58      	cmp	r7, #88	; 0x58
 8028f34:	f000 80a3 	beq.w	802907e <_printf_i+0x16e>
 8028f38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8028f3c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8028f40:	e03a      	b.n	8028fb8 <_printf_i+0xa8>
 8028f42:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8028f46:	2b15      	cmp	r3, #21
 8028f48:	d8f6      	bhi.n	8028f38 <_printf_i+0x28>
 8028f4a:	a101      	add	r1, pc, #4	; (adr r1, 8028f50 <_printf_i+0x40>)
 8028f4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8028f50:	08028fa9 	.word	0x08028fa9
 8028f54:	08028fbd 	.word	0x08028fbd
 8028f58:	08028f39 	.word	0x08028f39
 8028f5c:	08028f39 	.word	0x08028f39
 8028f60:	08028f39 	.word	0x08028f39
 8028f64:	08028f39 	.word	0x08028f39
 8028f68:	08028fbd 	.word	0x08028fbd
 8028f6c:	08028f39 	.word	0x08028f39
 8028f70:	08028f39 	.word	0x08028f39
 8028f74:	08028f39 	.word	0x08028f39
 8028f78:	08028f39 	.word	0x08028f39
 8028f7c:	080290c9 	.word	0x080290c9
 8028f80:	08028fed 	.word	0x08028fed
 8028f84:	080290ab 	.word	0x080290ab
 8028f88:	08028f39 	.word	0x08028f39
 8028f8c:	08028f39 	.word	0x08028f39
 8028f90:	080290eb 	.word	0x080290eb
 8028f94:	08028f39 	.word	0x08028f39
 8028f98:	08028fed 	.word	0x08028fed
 8028f9c:	08028f39 	.word	0x08028f39
 8028fa0:	08028f39 	.word	0x08028f39
 8028fa4:	080290b3 	.word	0x080290b3
 8028fa8:	682b      	ldr	r3, [r5, #0]
 8028faa:	1d1a      	adds	r2, r3, #4
 8028fac:	681b      	ldr	r3, [r3, #0]
 8028fae:	602a      	str	r2, [r5, #0]
 8028fb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8028fb4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8028fb8:	2301      	movs	r3, #1
 8028fba:	e0a3      	b.n	8029104 <_printf_i+0x1f4>
 8028fbc:	6820      	ldr	r0, [r4, #0]
 8028fbe:	6829      	ldr	r1, [r5, #0]
 8028fc0:	0606      	lsls	r6, r0, #24
 8028fc2:	f101 0304 	add.w	r3, r1, #4
 8028fc6:	d50a      	bpl.n	8028fde <_printf_i+0xce>
 8028fc8:	680e      	ldr	r6, [r1, #0]
 8028fca:	602b      	str	r3, [r5, #0]
 8028fcc:	2e00      	cmp	r6, #0
 8028fce:	da03      	bge.n	8028fd8 <_printf_i+0xc8>
 8028fd0:	232d      	movs	r3, #45	; 0x2d
 8028fd2:	4276      	negs	r6, r6
 8028fd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8028fd8:	485e      	ldr	r0, [pc, #376]	; (8029154 <_printf_i+0x244>)
 8028fda:	230a      	movs	r3, #10
 8028fdc:	e019      	b.n	8029012 <_printf_i+0x102>
 8028fde:	680e      	ldr	r6, [r1, #0]
 8028fe0:	602b      	str	r3, [r5, #0]
 8028fe2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8028fe6:	bf18      	it	ne
 8028fe8:	b236      	sxthne	r6, r6
 8028fea:	e7ef      	b.n	8028fcc <_printf_i+0xbc>
 8028fec:	682b      	ldr	r3, [r5, #0]
 8028fee:	6820      	ldr	r0, [r4, #0]
 8028ff0:	1d19      	adds	r1, r3, #4
 8028ff2:	6029      	str	r1, [r5, #0]
 8028ff4:	0601      	lsls	r1, r0, #24
 8028ff6:	d501      	bpl.n	8028ffc <_printf_i+0xec>
 8028ff8:	681e      	ldr	r6, [r3, #0]
 8028ffa:	e002      	b.n	8029002 <_printf_i+0xf2>
 8028ffc:	0646      	lsls	r6, r0, #25
 8028ffe:	d5fb      	bpl.n	8028ff8 <_printf_i+0xe8>
 8029000:	881e      	ldrh	r6, [r3, #0]
 8029002:	4854      	ldr	r0, [pc, #336]	; (8029154 <_printf_i+0x244>)
 8029004:	2f6f      	cmp	r7, #111	; 0x6f
 8029006:	bf0c      	ite	eq
 8029008:	2308      	moveq	r3, #8
 802900a:	230a      	movne	r3, #10
 802900c:	2100      	movs	r1, #0
 802900e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8029012:	6865      	ldr	r5, [r4, #4]
 8029014:	60a5      	str	r5, [r4, #8]
 8029016:	2d00      	cmp	r5, #0
 8029018:	bfa2      	ittt	ge
 802901a:	6821      	ldrge	r1, [r4, #0]
 802901c:	f021 0104 	bicge.w	r1, r1, #4
 8029020:	6021      	strge	r1, [r4, #0]
 8029022:	b90e      	cbnz	r6, 8029028 <_printf_i+0x118>
 8029024:	2d00      	cmp	r5, #0
 8029026:	d04d      	beq.n	80290c4 <_printf_i+0x1b4>
 8029028:	4615      	mov	r5, r2
 802902a:	fbb6 f1f3 	udiv	r1, r6, r3
 802902e:	fb03 6711 	mls	r7, r3, r1, r6
 8029032:	5dc7      	ldrb	r7, [r0, r7]
 8029034:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8029038:	4637      	mov	r7, r6
 802903a:	42bb      	cmp	r3, r7
 802903c:	460e      	mov	r6, r1
 802903e:	d9f4      	bls.n	802902a <_printf_i+0x11a>
 8029040:	2b08      	cmp	r3, #8
 8029042:	d10b      	bne.n	802905c <_printf_i+0x14c>
 8029044:	6823      	ldr	r3, [r4, #0]
 8029046:	07de      	lsls	r6, r3, #31
 8029048:	d508      	bpl.n	802905c <_printf_i+0x14c>
 802904a:	6923      	ldr	r3, [r4, #16]
 802904c:	6861      	ldr	r1, [r4, #4]
 802904e:	4299      	cmp	r1, r3
 8029050:	bfde      	ittt	le
 8029052:	2330      	movle	r3, #48	; 0x30
 8029054:	f805 3c01 	strble.w	r3, [r5, #-1]
 8029058:	f105 35ff 	addle.w	r5, r5, #4294967295
 802905c:	1b52      	subs	r2, r2, r5
 802905e:	6122      	str	r2, [r4, #16]
 8029060:	f8cd a000 	str.w	sl, [sp]
 8029064:	464b      	mov	r3, r9
 8029066:	aa03      	add	r2, sp, #12
 8029068:	4621      	mov	r1, r4
 802906a:	4640      	mov	r0, r8
 802906c:	f7ff fee2 	bl	8028e34 <_printf_common>
 8029070:	3001      	adds	r0, #1
 8029072:	d14c      	bne.n	802910e <_printf_i+0x1fe>
 8029074:	f04f 30ff 	mov.w	r0, #4294967295
 8029078:	b004      	add	sp, #16
 802907a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802907e:	4835      	ldr	r0, [pc, #212]	; (8029154 <_printf_i+0x244>)
 8029080:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8029084:	6829      	ldr	r1, [r5, #0]
 8029086:	6823      	ldr	r3, [r4, #0]
 8029088:	f851 6b04 	ldr.w	r6, [r1], #4
 802908c:	6029      	str	r1, [r5, #0]
 802908e:	061d      	lsls	r5, r3, #24
 8029090:	d514      	bpl.n	80290bc <_printf_i+0x1ac>
 8029092:	07df      	lsls	r7, r3, #31
 8029094:	bf44      	itt	mi
 8029096:	f043 0320 	orrmi.w	r3, r3, #32
 802909a:	6023      	strmi	r3, [r4, #0]
 802909c:	b91e      	cbnz	r6, 80290a6 <_printf_i+0x196>
 802909e:	6823      	ldr	r3, [r4, #0]
 80290a0:	f023 0320 	bic.w	r3, r3, #32
 80290a4:	6023      	str	r3, [r4, #0]
 80290a6:	2310      	movs	r3, #16
 80290a8:	e7b0      	b.n	802900c <_printf_i+0xfc>
 80290aa:	6823      	ldr	r3, [r4, #0]
 80290ac:	f043 0320 	orr.w	r3, r3, #32
 80290b0:	6023      	str	r3, [r4, #0]
 80290b2:	2378      	movs	r3, #120	; 0x78
 80290b4:	4828      	ldr	r0, [pc, #160]	; (8029158 <_printf_i+0x248>)
 80290b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80290ba:	e7e3      	b.n	8029084 <_printf_i+0x174>
 80290bc:	0659      	lsls	r1, r3, #25
 80290be:	bf48      	it	mi
 80290c0:	b2b6      	uxthmi	r6, r6
 80290c2:	e7e6      	b.n	8029092 <_printf_i+0x182>
 80290c4:	4615      	mov	r5, r2
 80290c6:	e7bb      	b.n	8029040 <_printf_i+0x130>
 80290c8:	682b      	ldr	r3, [r5, #0]
 80290ca:	6826      	ldr	r6, [r4, #0]
 80290cc:	6961      	ldr	r1, [r4, #20]
 80290ce:	1d18      	adds	r0, r3, #4
 80290d0:	6028      	str	r0, [r5, #0]
 80290d2:	0635      	lsls	r5, r6, #24
 80290d4:	681b      	ldr	r3, [r3, #0]
 80290d6:	d501      	bpl.n	80290dc <_printf_i+0x1cc>
 80290d8:	6019      	str	r1, [r3, #0]
 80290da:	e002      	b.n	80290e2 <_printf_i+0x1d2>
 80290dc:	0670      	lsls	r0, r6, #25
 80290de:	d5fb      	bpl.n	80290d8 <_printf_i+0x1c8>
 80290e0:	8019      	strh	r1, [r3, #0]
 80290e2:	2300      	movs	r3, #0
 80290e4:	6123      	str	r3, [r4, #16]
 80290e6:	4615      	mov	r5, r2
 80290e8:	e7ba      	b.n	8029060 <_printf_i+0x150>
 80290ea:	682b      	ldr	r3, [r5, #0]
 80290ec:	1d1a      	adds	r2, r3, #4
 80290ee:	602a      	str	r2, [r5, #0]
 80290f0:	681d      	ldr	r5, [r3, #0]
 80290f2:	6862      	ldr	r2, [r4, #4]
 80290f4:	2100      	movs	r1, #0
 80290f6:	4628      	mov	r0, r5
 80290f8:	f7d7 f8fa 	bl	80002f0 <memchr>
 80290fc:	b108      	cbz	r0, 8029102 <_printf_i+0x1f2>
 80290fe:	1b40      	subs	r0, r0, r5
 8029100:	6060      	str	r0, [r4, #4]
 8029102:	6863      	ldr	r3, [r4, #4]
 8029104:	6123      	str	r3, [r4, #16]
 8029106:	2300      	movs	r3, #0
 8029108:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802910c:	e7a8      	b.n	8029060 <_printf_i+0x150>
 802910e:	6923      	ldr	r3, [r4, #16]
 8029110:	462a      	mov	r2, r5
 8029112:	4649      	mov	r1, r9
 8029114:	4640      	mov	r0, r8
 8029116:	47d0      	blx	sl
 8029118:	3001      	adds	r0, #1
 802911a:	d0ab      	beq.n	8029074 <_printf_i+0x164>
 802911c:	6823      	ldr	r3, [r4, #0]
 802911e:	079b      	lsls	r3, r3, #30
 8029120:	d413      	bmi.n	802914a <_printf_i+0x23a>
 8029122:	68e0      	ldr	r0, [r4, #12]
 8029124:	9b03      	ldr	r3, [sp, #12]
 8029126:	4298      	cmp	r0, r3
 8029128:	bfb8      	it	lt
 802912a:	4618      	movlt	r0, r3
 802912c:	e7a4      	b.n	8029078 <_printf_i+0x168>
 802912e:	2301      	movs	r3, #1
 8029130:	4632      	mov	r2, r6
 8029132:	4649      	mov	r1, r9
 8029134:	4640      	mov	r0, r8
 8029136:	47d0      	blx	sl
 8029138:	3001      	adds	r0, #1
 802913a:	d09b      	beq.n	8029074 <_printf_i+0x164>
 802913c:	3501      	adds	r5, #1
 802913e:	68e3      	ldr	r3, [r4, #12]
 8029140:	9903      	ldr	r1, [sp, #12]
 8029142:	1a5b      	subs	r3, r3, r1
 8029144:	42ab      	cmp	r3, r5
 8029146:	dcf2      	bgt.n	802912e <_printf_i+0x21e>
 8029148:	e7eb      	b.n	8029122 <_printf_i+0x212>
 802914a:	2500      	movs	r5, #0
 802914c:	f104 0619 	add.w	r6, r4, #25
 8029150:	e7f5      	b.n	802913e <_printf_i+0x22e>
 8029152:	bf00      	nop
 8029154:	0802da01 	.word	0x0802da01
 8029158:	0802da12 	.word	0x0802da12

0802915c <_sbrk_r>:
 802915c:	b538      	push	{r3, r4, r5, lr}
 802915e:	4d06      	ldr	r5, [pc, #24]	; (8029178 <_sbrk_r+0x1c>)
 8029160:	2300      	movs	r3, #0
 8029162:	4604      	mov	r4, r0
 8029164:	4608      	mov	r0, r1
 8029166:	602b      	str	r3, [r5, #0]
 8029168:	f7d8 fc3e 	bl	80019e8 <_sbrk>
 802916c:	1c43      	adds	r3, r0, #1
 802916e:	d102      	bne.n	8029176 <_sbrk_r+0x1a>
 8029170:	682b      	ldr	r3, [r5, #0]
 8029172:	b103      	cbz	r3, 8029176 <_sbrk_r+0x1a>
 8029174:	6023      	str	r3, [r4, #0]
 8029176:	bd38      	pop	{r3, r4, r5, pc}
 8029178:	240264c0 	.word	0x240264c0

0802917c <_raise_r>:
 802917c:	291f      	cmp	r1, #31
 802917e:	b538      	push	{r3, r4, r5, lr}
 8029180:	4604      	mov	r4, r0
 8029182:	460d      	mov	r5, r1
 8029184:	d904      	bls.n	8029190 <_raise_r+0x14>
 8029186:	2316      	movs	r3, #22
 8029188:	6003      	str	r3, [r0, #0]
 802918a:	f04f 30ff 	mov.w	r0, #4294967295
 802918e:	bd38      	pop	{r3, r4, r5, pc}
 8029190:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8029192:	b112      	cbz	r2, 802919a <_raise_r+0x1e>
 8029194:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8029198:	b94b      	cbnz	r3, 80291ae <_raise_r+0x32>
 802919a:	4620      	mov	r0, r4
 802919c:	f000 f830 	bl	8029200 <_getpid_r>
 80291a0:	462a      	mov	r2, r5
 80291a2:	4601      	mov	r1, r0
 80291a4:	4620      	mov	r0, r4
 80291a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80291aa:	f000 b817 	b.w	80291dc <_kill_r>
 80291ae:	2b01      	cmp	r3, #1
 80291b0:	d00a      	beq.n	80291c8 <_raise_r+0x4c>
 80291b2:	1c59      	adds	r1, r3, #1
 80291b4:	d103      	bne.n	80291be <_raise_r+0x42>
 80291b6:	2316      	movs	r3, #22
 80291b8:	6003      	str	r3, [r0, #0]
 80291ba:	2001      	movs	r0, #1
 80291bc:	e7e7      	b.n	802918e <_raise_r+0x12>
 80291be:	2400      	movs	r4, #0
 80291c0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80291c4:	4628      	mov	r0, r5
 80291c6:	4798      	blx	r3
 80291c8:	2000      	movs	r0, #0
 80291ca:	e7e0      	b.n	802918e <_raise_r+0x12>

080291cc <raise>:
 80291cc:	4b02      	ldr	r3, [pc, #8]	; (80291d8 <raise+0xc>)
 80291ce:	4601      	mov	r1, r0
 80291d0:	6818      	ldr	r0, [r3, #0]
 80291d2:	f7ff bfd3 	b.w	802917c <_raise_r>
 80291d6:	bf00      	nop
 80291d8:	240000c0 	.word	0x240000c0

080291dc <_kill_r>:
 80291dc:	b538      	push	{r3, r4, r5, lr}
 80291de:	4d07      	ldr	r5, [pc, #28]	; (80291fc <_kill_r+0x20>)
 80291e0:	2300      	movs	r3, #0
 80291e2:	4604      	mov	r4, r0
 80291e4:	4608      	mov	r0, r1
 80291e6:	4611      	mov	r1, r2
 80291e8:	602b      	str	r3, [r5, #0]
 80291ea:	f7d8 fb75 	bl	80018d8 <_kill>
 80291ee:	1c43      	adds	r3, r0, #1
 80291f0:	d102      	bne.n	80291f8 <_kill_r+0x1c>
 80291f2:	682b      	ldr	r3, [r5, #0]
 80291f4:	b103      	cbz	r3, 80291f8 <_kill_r+0x1c>
 80291f6:	6023      	str	r3, [r4, #0]
 80291f8:	bd38      	pop	{r3, r4, r5, pc}
 80291fa:	bf00      	nop
 80291fc:	240264c0 	.word	0x240264c0

08029200 <_getpid_r>:
 8029200:	f7d8 bb62 	b.w	80018c8 <_getpid>

08029204 <strncmp>:
 8029204:	b510      	push	{r4, lr}
 8029206:	b17a      	cbz	r2, 8029228 <strncmp+0x24>
 8029208:	4603      	mov	r3, r0
 802920a:	3901      	subs	r1, #1
 802920c:	1884      	adds	r4, r0, r2
 802920e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8029212:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8029216:	4290      	cmp	r0, r2
 8029218:	d101      	bne.n	802921e <strncmp+0x1a>
 802921a:	42a3      	cmp	r3, r4
 802921c:	d101      	bne.n	8029222 <strncmp+0x1e>
 802921e:	1a80      	subs	r0, r0, r2
 8029220:	bd10      	pop	{r4, pc}
 8029222:	2800      	cmp	r0, #0
 8029224:	d1f3      	bne.n	802920e <strncmp+0xa>
 8029226:	e7fa      	b.n	802921e <strncmp+0x1a>
 8029228:	4610      	mov	r0, r2
 802922a:	e7f9      	b.n	8029220 <strncmp+0x1c>

0802922c <__swbuf_r>:
 802922c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802922e:	460e      	mov	r6, r1
 8029230:	4614      	mov	r4, r2
 8029232:	4605      	mov	r5, r0
 8029234:	b118      	cbz	r0, 802923e <__swbuf_r+0x12>
 8029236:	6983      	ldr	r3, [r0, #24]
 8029238:	b90b      	cbnz	r3, 802923e <__swbuf_r+0x12>
 802923a:	f000 fa33 	bl	80296a4 <__sinit>
 802923e:	4b21      	ldr	r3, [pc, #132]	; (80292c4 <__swbuf_r+0x98>)
 8029240:	429c      	cmp	r4, r3
 8029242:	d12b      	bne.n	802929c <__swbuf_r+0x70>
 8029244:	686c      	ldr	r4, [r5, #4]
 8029246:	69a3      	ldr	r3, [r4, #24]
 8029248:	60a3      	str	r3, [r4, #8]
 802924a:	89a3      	ldrh	r3, [r4, #12]
 802924c:	071a      	lsls	r2, r3, #28
 802924e:	d52f      	bpl.n	80292b0 <__swbuf_r+0x84>
 8029250:	6923      	ldr	r3, [r4, #16]
 8029252:	b36b      	cbz	r3, 80292b0 <__swbuf_r+0x84>
 8029254:	6923      	ldr	r3, [r4, #16]
 8029256:	6820      	ldr	r0, [r4, #0]
 8029258:	1ac0      	subs	r0, r0, r3
 802925a:	6963      	ldr	r3, [r4, #20]
 802925c:	b2f6      	uxtb	r6, r6
 802925e:	4283      	cmp	r3, r0
 8029260:	4637      	mov	r7, r6
 8029262:	dc04      	bgt.n	802926e <__swbuf_r+0x42>
 8029264:	4621      	mov	r1, r4
 8029266:	4628      	mov	r0, r5
 8029268:	f000 f988 	bl	802957c <_fflush_r>
 802926c:	bb30      	cbnz	r0, 80292bc <__swbuf_r+0x90>
 802926e:	68a3      	ldr	r3, [r4, #8]
 8029270:	3b01      	subs	r3, #1
 8029272:	60a3      	str	r3, [r4, #8]
 8029274:	6823      	ldr	r3, [r4, #0]
 8029276:	1c5a      	adds	r2, r3, #1
 8029278:	6022      	str	r2, [r4, #0]
 802927a:	701e      	strb	r6, [r3, #0]
 802927c:	6963      	ldr	r3, [r4, #20]
 802927e:	3001      	adds	r0, #1
 8029280:	4283      	cmp	r3, r0
 8029282:	d004      	beq.n	802928e <__swbuf_r+0x62>
 8029284:	89a3      	ldrh	r3, [r4, #12]
 8029286:	07db      	lsls	r3, r3, #31
 8029288:	d506      	bpl.n	8029298 <__swbuf_r+0x6c>
 802928a:	2e0a      	cmp	r6, #10
 802928c:	d104      	bne.n	8029298 <__swbuf_r+0x6c>
 802928e:	4621      	mov	r1, r4
 8029290:	4628      	mov	r0, r5
 8029292:	f000 f973 	bl	802957c <_fflush_r>
 8029296:	b988      	cbnz	r0, 80292bc <__swbuf_r+0x90>
 8029298:	4638      	mov	r0, r7
 802929a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802929c:	4b0a      	ldr	r3, [pc, #40]	; (80292c8 <__swbuf_r+0x9c>)
 802929e:	429c      	cmp	r4, r3
 80292a0:	d101      	bne.n	80292a6 <__swbuf_r+0x7a>
 80292a2:	68ac      	ldr	r4, [r5, #8]
 80292a4:	e7cf      	b.n	8029246 <__swbuf_r+0x1a>
 80292a6:	4b09      	ldr	r3, [pc, #36]	; (80292cc <__swbuf_r+0xa0>)
 80292a8:	429c      	cmp	r4, r3
 80292aa:	bf08      	it	eq
 80292ac:	68ec      	ldreq	r4, [r5, #12]
 80292ae:	e7ca      	b.n	8029246 <__swbuf_r+0x1a>
 80292b0:	4621      	mov	r1, r4
 80292b2:	4628      	mov	r0, r5
 80292b4:	f000 f80c 	bl	80292d0 <__swsetup_r>
 80292b8:	2800      	cmp	r0, #0
 80292ba:	d0cb      	beq.n	8029254 <__swbuf_r+0x28>
 80292bc:	f04f 37ff 	mov.w	r7, #4294967295
 80292c0:	e7ea      	b.n	8029298 <__swbuf_r+0x6c>
 80292c2:	bf00      	nop
 80292c4:	0802da48 	.word	0x0802da48
 80292c8:	0802da68 	.word	0x0802da68
 80292cc:	0802da28 	.word	0x0802da28

080292d0 <__swsetup_r>:
 80292d0:	4b32      	ldr	r3, [pc, #200]	; (802939c <__swsetup_r+0xcc>)
 80292d2:	b570      	push	{r4, r5, r6, lr}
 80292d4:	681d      	ldr	r5, [r3, #0]
 80292d6:	4606      	mov	r6, r0
 80292d8:	460c      	mov	r4, r1
 80292da:	b125      	cbz	r5, 80292e6 <__swsetup_r+0x16>
 80292dc:	69ab      	ldr	r3, [r5, #24]
 80292de:	b913      	cbnz	r3, 80292e6 <__swsetup_r+0x16>
 80292e0:	4628      	mov	r0, r5
 80292e2:	f000 f9df 	bl	80296a4 <__sinit>
 80292e6:	4b2e      	ldr	r3, [pc, #184]	; (80293a0 <__swsetup_r+0xd0>)
 80292e8:	429c      	cmp	r4, r3
 80292ea:	d10f      	bne.n	802930c <__swsetup_r+0x3c>
 80292ec:	686c      	ldr	r4, [r5, #4]
 80292ee:	89a3      	ldrh	r3, [r4, #12]
 80292f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80292f4:	0719      	lsls	r1, r3, #28
 80292f6:	d42c      	bmi.n	8029352 <__swsetup_r+0x82>
 80292f8:	06dd      	lsls	r5, r3, #27
 80292fa:	d411      	bmi.n	8029320 <__swsetup_r+0x50>
 80292fc:	2309      	movs	r3, #9
 80292fe:	6033      	str	r3, [r6, #0]
 8029300:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8029304:	81a3      	strh	r3, [r4, #12]
 8029306:	f04f 30ff 	mov.w	r0, #4294967295
 802930a:	e03e      	b.n	802938a <__swsetup_r+0xba>
 802930c:	4b25      	ldr	r3, [pc, #148]	; (80293a4 <__swsetup_r+0xd4>)
 802930e:	429c      	cmp	r4, r3
 8029310:	d101      	bne.n	8029316 <__swsetup_r+0x46>
 8029312:	68ac      	ldr	r4, [r5, #8]
 8029314:	e7eb      	b.n	80292ee <__swsetup_r+0x1e>
 8029316:	4b24      	ldr	r3, [pc, #144]	; (80293a8 <__swsetup_r+0xd8>)
 8029318:	429c      	cmp	r4, r3
 802931a:	bf08      	it	eq
 802931c:	68ec      	ldreq	r4, [r5, #12]
 802931e:	e7e6      	b.n	80292ee <__swsetup_r+0x1e>
 8029320:	0758      	lsls	r0, r3, #29
 8029322:	d512      	bpl.n	802934a <__swsetup_r+0x7a>
 8029324:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8029326:	b141      	cbz	r1, 802933a <__swsetup_r+0x6a>
 8029328:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802932c:	4299      	cmp	r1, r3
 802932e:	d002      	beq.n	8029336 <__swsetup_r+0x66>
 8029330:	4630      	mov	r0, r6
 8029332:	f7ff fb45 	bl	80289c0 <_free_r>
 8029336:	2300      	movs	r3, #0
 8029338:	6363      	str	r3, [r4, #52]	; 0x34
 802933a:	89a3      	ldrh	r3, [r4, #12]
 802933c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8029340:	81a3      	strh	r3, [r4, #12]
 8029342:	2300      	movs	r3, #0
 8029344:	6063      	str	r3, [r4, #4]
 8029346:	6923      	ldr	r3, [r4, #16]
 8029348:	6023      	str	r3, [r4, #0]
 802934a:	89a3      	ldrh	r3, [r4, #12]
 802934c:	f043 0308 	orr.w	r3, r3, #8
 8029350:	81a3      	strh	r3, [r4, #12]
 8029352:	6923      	ldr	r3, [r4, #16]
 8029354:	b94b      	cbnz	r3, 802936a <__swsetup_r+0x9a>
 8029356:	89a3      	ldrh	r3, [r4, #12]
 8029358:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802935c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8029360:	d003      	beq.n	802936a <__swsetup_r+0x9a>
 8029362:	4621      	mov	r1, r4
 8029364:	4630      	mov	r0, r6
 8029366:	f000 fa5f 	bl	8029828 <__smakebuf_r>
 802936a:	89a0      	ldrh	r0, [r4, #12]
 802936c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8029370:	f010 0301 	ands.w	r3, r0, #1
 8029374:	d00a      	beq.n	802938c <__swsetup_r+0xbc>
 8029376:	2300      	movs	r3, #0
 8029378:	60a3      	str	r3, [r4, #8]
 802937a:	6963      	ldr	r3, [r4, #20]
 802937c:	425b      	negs	r3, r3
 802937e:	61a3      	str	r3, [r4, #24]
 8029380:	6923      	ldr	r3, [r4, #16]
 8029382:	b943      	cbnz	r3, 8029396 <__swsetup_r+0xc6>
 8029384:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8029388:	d1ba      	bne.n	8029300 <__swsetup_r+0x30>
 802938a:	bd70      	pop	{r4, r5, r6, pc}
 802938c:	0781      	lsls	r1, r0, #30
 802938e:	bf58      	it	pl
 8029390:	6963      	ldrpl	r3, [r4, #20]
 8029392:	60a3      	str	r3, [r4, #8]
 8029394:	e7f4      	b.n	8029380 <__swsetup_r+0xb0>
 8029396:	2000      	movs	r0, #0
 8029398:	e7f7      	b.n	802938a <__swsetup_r+0xba>
 802939a:	bf00      	nop
 802939c:	240000c0 	.word	0x240000c0
 80293a0:	0802da48 	.word	0x0802da48
 80293a4:	0802da68 	.word	0x0802da68
 80293a8:	0802da28 	.word	0x0802da28

080293ac <__register_exitproc>:
 80293ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80293b0:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 802946c <__register_exitproc+0xc0>
 80293b4:	4606      	mov	r6, r0
 80293b6:	f8d8 0000 	ldr.w	r0, [r8]
 80293ba:	461f      	mov	r7, r3
 80293bc:	460d      	mov	r5, r1
 80293be:	4691      	mov	r9, r2
 80293c0:	f7ff fad5 	bl	802896e <__retarget_lock_acquire_recursive>
 80293c4:	4b25      	ldr	r3, [pc, #148]	; (802945c <__register_exitproc+0xb0>)
 80293c6:	681c      	ldr	r4, [r3, #0]
 80293c8:	b934      	cbnz	r4, 80293d8 <__register_exitproc+0x2c>
 80293ca:	4c25      	ldr	r4, [pc, #148]	; (8029460 <__register_exitproc+0xb4>)
 80293cc:	601c      	str	r4, [r3, #0]
 80293ce:	4b25      	ldr	r3, [pc, #148]	; (8029464 <__register_exitproc+0xb8>)
 80293d0:	b113      	cbz	r3, 80293d8 <__register_exitproc+0x2c>
 80293d2:	681b      	ldr	r3, [r3, #0]
 80293d4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80293d8:	6863      	ldr	r3, [r4, #4]
 80293da:	2b1f      	cmp	r3, #31
 80293dc:	dd07      	ble.n	80293ee <__register_exitproc+0x42>
 80293de:	f8d8 0000 	ldr.w	r0, [r8]
 80293e2:	f7ff fac6 	bl	8028972 <__retarget_lock_release_recursive>
 80293e6:	f04f 30ff 	mov.w	r0, #4294967295
 80293ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80293ee:	b34e      	cbz	r6, 8029444 <__register_exitproc+0x98>
 80293f0:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80293f4:	b988      	cbnz	r0, 802941a <__register_exitproc+0x6e>
 80293f6:	4b1c      	ldr	r3, [pc, #112]	; (8029468 <__register_exitproc+0xbc>)
 80293f8:	b923      	cbnz	r3, 8029404 <__register_exitproc+0x58>
 80293fa:	f8d8 0000 	ldr.w	r0, [r8]
 80293fe:	f7ff fab7 	bl	8028970 <__retarget_lock_release>
 8029402:	e7f0      	b.n	80293e6 <__register_exitproc+0x3a>
 8029404:	f44f 7084 	mov.w	r0, #264	; 0x108
 8029408:	f7ff fab4 	bl	8028974 <malloc>
 802940c:	2800      	cmp	r0, #0
 802940e:	d0f4      	beq.n	80293fa <__register_exitproc+0x4e>
 8029410:	2300      	movs	r3, #0
 8029412:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8029416:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 802941a:	6863      	ldr	r3, [r4, #4]
 802941c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8029420:	2201      	movs	r2, #1
 8029422:	409a      	lsls	r2, r3
 8029424:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8029428:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 802942c:	4313      	orrs	r3, r2
 802942e:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8029432:	2e02      	cmp	r6, #2
 8029434:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8029438:	bf02      	ittt	eq
 802943a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 802943e:	4313      	orreq	r3, r2
 8029440:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 8029444:	6863      	ldr	r3, [r4, #4]
 8029446:	f8d8 0000 	ldr.w	r0, [r8]
 802944a:	1c5a      	adds	r2, r3, #1
 802944c:	3302      	adds	r3, #2
 802944e:	6062      	str	r2, [r4, #4]
 8029450:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8029454:	f7ff fa8d 	bl	8028972 <__retarget_lock_release_recursive>
 8029458:	2000      	movs	r0, #0
 802945a:	e7c6      	b.n	80293ea <__register_exitproc+0x3e>
 802945c:	240264bc 	.word	0x240264bc
 8029460:	24026430 	.word	0x24026430
 8029464:	0802da24 	.word	0x0802da24
 8029468:	08028975 	.word	0x08028975
 802946c:	24000124 	.word	0x24000124

08029470 <__sflush_r>:
 8029470:	898a      	ldrh	r2, [r1, #12]
 8029472:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8029476:	4605      	mov	r5, r0
 8029478:	0710      	lsls	r0, r2, #28
 802947a:	460c      	mov	r4, r1
 802947c:	d458      	bmi.n	8029530 <__sflush_r+0xc0>
 802947e:	684b      	ldr	r3, [r1, #4]
 8029480:	2b00      	cmp	r3, #0
 8029482:	dc05      	bgt.n	8029490 <__sflush_r+0x20>
 8029484:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8029486:	2b00      	cmp	r3, #0
 8029488:	dc02      	bgt.n	8029490 <__sflush_r+0x20>
 802948a:	2000      	movs	r0, #0
 802948c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8029490:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8029492:	2e00      	cmp	r6, #0
 8029494:	d0f9      	beq.n	802948a <__sflush_r+0x1a>
 8029496:	2300      	movs	r3, #0
 8029498:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 802949c:	682f      	ldr	r7, [r5, #0]
 802949e:	602b      	str	r3, [r5, #0]
 80294a0:	d032      	beq.n	8029508 <__sflush_r+0x98>
 80294a2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80294a4:	89a3      	ldrh	r3, [r4, #12]
 80294a6:	075a      	lsls	r2, r3, #29
 80294a8:	d505      	bpl.n	80294b6 <__sflush_r+0x46>
 80294aa:	6863      	ldr	r3, [r4, #4]
 80294ac:	1ac0      	subs	r0, r0, r3
 80294ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80294b0:	b10b      	cbz	r3, 80294b6 <__sflush_r+0x46>
 80294b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80294b4:	1ac0      	subs	r0, r0, r3
 80294b6:	2300      	movs	r3, #0
 80294b8:	4602      	mov	r2, r0
 80294ba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80294bc:	6a21      	ldr	r1, [r4, #32]
 80294be:	4628      	mov	r0, r5
 80294c0:	47b0      	blx	r6
 80294c2:	1c43      	adds	r3, r0, #1
 80294c4:	89a3      	ldrh	r3, [r4, #12]
 80294c6:	d106      	bne.n	80294d6 <__sflush_r+0x66>
 80294c8:	6829      	ldr	r1, [r5, #0]
 80294ca:	291d      	cmp	r1, #29
 80294cc:	d82c      	bhi.n	8029528 <__sflush_r+0xb8>
 80294ce:	4a2a      	ldr	r2, [pc, #168]	; (8029578 <__sflush_r+0x108>)
 80294d0:	40ca      	lsrs	r2, r1
 80294d2:	07d6      	lsls	r6, r2, #31
 80294d4:	d528      	bpl.n	8029528 <__sflush_r+0xb8>
 80294d6:	2200      	movs	r2, #0
 80294d8:	6062      	str	r2, [r4, #4]
 80294da:	04d9      	lsls	r1, r3, #19
 80294dc:	6922      	ldr	r2, [r4, #16]
 80294de:	6022      	str	r2, [r4, #0]
 80294e0:	d504      	bpl.n	80294ec <__sflush_r+0x7c>
 80294e2:	1c42      	adds	r2, r0, #1
 80294e4:	d101      	bne.n	80294ea <__sflush_r+0x7a>
 80294e6:	682b      	ldr	r3, [r5, #0]
 80294e8:	b903      	cbnz	r3, 80294ec <__sflush_r+0x7c>
 80294ea:	6560      	str	r0, [r4, #84]	; 0x54
 80294ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80294ee:	602f      	str	r7, [r5, #0]
 80294f0:	2900      	cmp	r1, #0
 80294f2:	d0ca      	beq.n	802948a <__sflush_r+0x1a>
 80294f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80294f8:	4299      	cmp	r1, r3
 80294fa:	d002      	beq.n	8029502 <__sflush_r+0x92>
 80294fc:	4628      	mov	r0, r5
 80294fe:	f7ff fa5f 	bl	80289c0 <_free_r>
 8029502:	2000      	movs	r0, #0
 8029504:	6360      	str	r0, [r4, #52]	; 0x34
 8029506:	e7c1      	b.n	802948c <__sflush_r+0x1c>
 8029508:	6a21      	ldr	r1, [r4, #32]
 802950a:	2301      	movs	r3, #1
 802950c:	4628      	mov	r0, r5
 802950e:	47b0      	blx	r6
 8029510:	1c41      	adds	r1, r0, #1
 8029512:	d1c7      	bne.n	80294a4 <__sflush_r+0x34>
 8029514:	682b      	ldr	r3, [r5, #0]
 8029516:	2b00      	cmp	r3, #0
 8029518:	d0c4      	beq.n	80294a4 <__sflush_r+0x34>
 802951a:	2b1d      	cmp	r3, #29
 802951c:	d001      	beq.n	8029522 <__sflush_r+0xb2>
 802951e:	2b16      	cmp	r3, #22
 8029520:	d101      	bne.n	8029526 <__sflush_r+0xb6>
 8029522:	602f      	str	r7, [r5, #0]
 8029524:	e7b1      	b.n	802948a <__sflush_r+0x1a>
 8029526:	89a3      	ldrh	r3, [r4, #12]
 8029528:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802952c:	81a3      	strh	r3, [r4, #12]
 802952e:	e7ad      	b.n	802948c <__sflush_r+0x1c>
 8029530:	690f      	ldr	r7, [r1, #16]
 8029532:	2f00      	cmp	r7, #0
 8029534:	d0a9      	beq.n	802948a <__sflush_r+0x1a>
 8029536:	0793      	lsls	r3, r2, #30
 8029538:	680e      	ldr	r6, [r1, #0]
 802953a:	bf08      	it	eq
 802953c:	694b      	ldreq	r3, [r1, #20]
 802953e:	600f      	str	r7, [r1, #0]
 8029540:	bf18      	it	ne
 8029542:	2300      	movne	r3, #0
 8029544:	eba6 0807 	sub.w	r8, r6, r7
 8029548:	608b      	str	r3, [r1, #8]
 802954a:	f1b8 0f00 	cmp.w	r8, #0
 802954e:	dd9c      	ble.n	802948a <__sflush_r+0x1a>
 8029550:	6a21      	ldr	r1, [r4, #32]
 8029552:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8029554:	4643      	mov	r3, r8
 8029556:	463a      	mov	r2, r7
 8029558:	4628      	mov	r0, r5
 802955a:	47b0      	blx	r6
 802955c:	2800      	cmp	r0, #0
 802955e:	dc06      	bgt.n	802956e <__sflush_r+0xfe>
 8029560:	89a3      	ldrh	r3, [r4, #12]
 8029562:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8029566:	81a3      	strh	r3, [r4, #12]
 8029568:	f04f 30ff 	mov.w	r0, #4294967295
 802956c:	e78e      	b.n	802948c <__sflush_r+0x1c>
 802956e:	4407      	add	r7, r0
 8029570:	eba8 0800 	sub.w	r8, r8, r0
 8029574:	e7e9      	b.n	802954a <__sflush_r+0xda>
 8029576:	bf00      	nop
 8029578:	20400001 	.word	0x20400001

0802957c <_fflush_r>:
 802957c:	b538      	push	{r3, r4, r5, lr}
 802957e:	690b      	ldr	r3, [r1, #16]
 8029580:	4605      	mov	r5, r0
 8029582:	460c      	mov	r4, r1
 8029584:	b913      	cbnz	r3, 802958c <_fflush_r+0x10>
 8029586:	2500      	movs	r5, #0
 8029588:	4628      	mov	r0, r5
 802958a:	bd38      	pop	{r3, r4, r5, pc}
 802958c:	b118      	cbz	r0, 8029596 <_fflush_r+0x1a>
 802958e:	6983      	ldr	r3, [r0, #24]
 8029590:	b90b      	cbnz	r3, 8029596 <_fflush_r+0x1a>
 8029592:	f000 f887 	bl	80296a4 <__sinit>
 8029596:	4b14      	ldr	r3, [pc, #80]	; (80295e8 <_fflush_r+0x6c>)
 8029598:	429c      	cmp	r4, r3
 802959a:	d11b      	bne.n	80295d4 <_fflush_r+0x58>
 802959c:	686c      	ldr	r4, [r5, #4]
 802959e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80295a2:	2b00      	cmp	r3, #0
 80295a4:	d0ef      	beq.n	8029586 <_fflush_r+0xa>
 80295a6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80295a8:	07d0      	lsls	r0, r2, #31
 80295aa:	d404      	bmi.n	80295b6 <_fflush_r+0x3a>
 80295ac:	0599      	lsls	r1, r3, #22
 80295ae:	d402      	bmi.n	80295b6 <_fflush_r+0x3a>
 80295b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80295b2:	f7ff f9dc 	bl	802896e <__retarget_lock_acquire_recursive>
 80295b6:	4628      	mov	r0, r5
 80295b8:	4621      	mov	r1, r4
 80295ba:	f7ff ff59 	bl	8029470 <__sflush_r>
 80295be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80295c0:	07da      	lsls	r2, r3, #31
 80295c2:	4605      	mov	r5, r0
 80295c4:	d4e0      	bmi.n	8029588 <_fflush_r+0xc>
 80295c6:	89a3      	ldrh	r3, [r4, #12]
 80295c8:	059b      	lsls	r3, r3, #22
 80295ca:	d4dd      	bmi.n	8029588 <_fflush_r+0xc>
 80295cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80295ce:	f7ff f9d0 	bl	8028972 <__retarget_lock_release_recursive>
 80295d2:	e7d9      	b.n	8029588 <_fflush_r+0xc>
 80295d4:	4b05      	ldr	r3, [pc, #20]	; (80295ec <_fflush_r+0x70>)
 80295d6:	429c      	cmp	r4, r3
 80295d8:	d101      	bne.n	80295de <_fflush_r+0x62>
 80295da:	68ac      	ldr	r4, [r5, #8]
 80295dc:	e7df      	b.n	802959e <_fflush_r+0x22>
 80295de:	4b04      	ldr	r3, [pc, #16]	; (80295f0 <_fflush_r+0x74>)
 80295e0:	429c      	cmp	r4, r3
 80295e2:	bf08      	it	eq
 80295e4:	68ec      	ldreq	r4, [r5, #12]
 80295e6:	e7da      	b.n	802959e <_fflush_r+0x22>
 80295e8:	0802da48 	.word	0x0802da48
 80295ec:	0802da68 	.word	0x0802da68
 80295f0:	0802da28 	.word	0x0802da28

080295f4 <std>:
 80295f4:	2300      	movs	r3, #0
 80295f6:	b510      	push	{r4, lr}
 80295f8:	4604      	mov	r4, r0
 80295fa:	e9c0 3300 	strd	r3, r3, [r0]
 80295fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8029602:	6083      	str	r3, [r0, #8]
 8029604:	8181      	strh	r1, [r0, #12]
 8029606:	6643      	str	r3, [r0, #100]	; 0x64
 8029608:	81c2      	strh	r2, [r0, #14]
 802960a:	6183      	str	r3, [r0, #24]
 802960c:	4619      	mov	r1, r3
 802960e:	2208      	movs	r2, #8
 8029610:	305c      	adds	r0, #92	; 0x5c
 8029612:	f7ff f9cd 	bl	80289b0 <memset>
 8029616:	4b05      	ldr	r3, [pc, #20]	; (802962c <std+0x38>)
 8029618:	6263      	str	r3, [r4, #36]	; 0x24
 802961a:	4b05      	ldr	r3, [pc, #20]	; (8029630 <std+0x3c>)
 802961c:	62a3      	str	r3, [r4, #40]	; 0x28
 802961e:	4b05      	ldr	r3, [pc, #20]	; (8029634 <std+0x40>)
 8029620:	62e3      	str	r3, [r4, #44]	; 0x2c
 8029622:	4b05      	ldr	r3, [pc, #20]	; (8029638 <std+0x44>)
 8029624:	6224      	str	r4, [r4, #32]
 8029626:	6323      	str	r3, [r4, #48]	; 0x30
 8029628:	bd10      	pop	{r4, pc}
 802962a:	bf00      	nop
 802962c:	080298c1 	.word	0x080298c1
 8029630:	080298e3 	.word	0x080298e3
 8029634:	0802991b 	.word	0x0802991b
 8029638:	0802993f 	.word	0x0802993f

0802963c <_cleanup_r>:
 802963c:	4901      	ldr	r1, [pc, #4]	; (8029644 <_cleanup_r+0x8>)
 802963e:	f000 b8af 	b.w	80297a0 <_fwalk_reent>
 8029642:	bf00      	nop
 8029644:	0802957d 	.word	0x0802957d

08029648 <__sfmoreglue>:
 8029648:	b570      	push	{r4, r5, r6, lr}
 802964a:	2268      	movs	r2, #104	; 0x68
 802964c:	1e4d      	subs	r5, r1, #1
 802964e:	4355      	muls	r5, r2
 8029650:	460e      	mov	r6, r1
 8029652:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8029656:	f7ff fa1f 	bl	8028a98 <_malloc_r>
 802965a:	4604      	mov	r4, r0
 802965c:	b140      	cbz	r0, 8029670 <__sfmoreglue+0x28>
 802965e:	2100      	movs	r1, #0
 8029660:	e9c0 1600 	strd	r1, r6, [r0]
 8029664:	300c      	adds	r0, #12
 8029666:	60a0      	str	r0, [r4, #8]
 8029668:	f105 0268 	add.w	r2, r5, #104	; 0x68
 802966c:	f7ff f9a0 	bl	80289b0 <memset>
 8029670:	4620      	mov	r0, r4
 8029672:	bd70      	pop	{r4, r5, r6, pc}

08029674 <__sfp_lock_acquire>:
 8029674:	4801      	ldr	r0, [pc, #4]	; (802967c <__sfp_lock_acquire+0x8>)
 8029676:	f7ff b97a 	b.w	802896e <__retarget_lock_acquire_recursive>
 802967a:	bf00      	nop
 802967c:	2402631e 	.word	0x2402631e

08029680 <__sfp_lock_release>:
 8029680:	4801      	ldr	r0, [pc, #4]	; (8029688 <__sfp_lock_release+0x8>)
 8029682:	f7ff b976 	b.w	8028972 <__retarget_lock_release_recursive>
 8029686:	bf00      	nop
 8029688:	2402631e 	.word	0x2402631e

0802968c <__sinit_lock_acquire>:
 802968c:	4801      	ldr	r0, [pc, #4]	; (8029694 <__sinit_lock_acquire+0x8>)
 802968e:	f7ff b96e 	b.w	802896e <__retarget_lock_acquire_recursive>
 8029692:	bf00      	nop
 8029694:	2402631f 	.word	0x2402631f

08029698 <__sinit_lock_release>:
 8029698:	4801      	ldr	r0, [pc, #4]	; (80296a0 <__sinit_lock_release+0x8>)
 802969a:	f7ff b96a 	b.w	8028972 <__retarget_lock_release_recursive>
 802969e:	bf00      	nop
 80296a0:	2402631f 	.word	0x2402631f

080296a4 <__sinit>:
 80296a4:	b510      	push	{r4, lr}
 80296a6:	4604      	mov	r4, r0
 80296a8:	f7ff fff0 	bl	802968c <__sinit_lock_acquire>
 80296ac:	69a3      	ldr	r3, [r4, #24]
 80296ae:	b11b      	cbz	r3, 80296b8 <__sinit+0x14>
 80296b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80296b4:	f7ff bff0 	b.w	8029698 <__sinit_lock_release>
 80296b8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80296bc:	6523      	str	r3, [r4, #80]	; 0x50
 80296be:	4b13      	ldr	r3, [pc, #76]	; (802970c <__sinit+0x68>)
 80296c0:	4a13      	ldr	r2, [pc, #76]	; (8029710 <__sinit+0x6c>)
 80296c2:	681b      	ldr	r3, [r3, #0]
 80296c4:	62a2      	str	r2, [r4, #40]	; 0x28
 80296c6:	42a3      	cmp	r3, r4
 80296c8:	bf04      	itt	eq
 80296ca:	2301      	moveq	r3, #1
 80296cc:	61a3      	streq	r3, [r4, #24]
 80296ce:	4620      	mov	r0, r4
 80296d0:	f000 f820 	bl	8029714 <__sfp>
 80296d4:	6060      	str	r0, [r4, #4]
 80296d6:	4620      	mov	r0, r4
 80296d8:	f000 f81c 	bl	8029714 <__sfp>
 80296dc:	60a0      	str	r0, [r4, #8]
 80296de:	4620      	mov	r0, r4
 80296e0:	f000 f818 	bl	8029714 <__sfp>
 80296e4:	2200      	movs	r2, #0
 80296e6:	60e0      	str	r0, [r4, #12]
 80296e8:	2104      	movs	r1, #4
 80296ea:	6860      	ldr	r0, [r4, #4]
 80296ec:	f7ff ff82 	bl	80295f4 <std>
 80296f0:	68a0      	ldr	r0, [r4, #8]
 80296f2:	2201      	movs	r2, #1
 80296f4:	2109      	movs	r1, #9
 80296f6:	f7ff ff7d 	bl	80295f4 <std>
 80296fa:	68e0      	ldr	r0, [r4, #12]
 80296fc:	2202      	movs	r2, #2
 80296fe:	2112      	movs	r1, #18
 8029700:	f7ff ff78 	bl	80295f4 <std>
 8029704:	2301      	movs	r3, #1
 8029706:	61a3      	str	r3, [r4, #24]
 8029708:	e7d2      	b.n	80296b0 <__sinit+0xc>
 802970a:	bf00      	nop
 802970c:	0802d9ec 	.word	0x0802d9ec
 8029710:	0802963d 	.word	0x0802963d

08029714 <__sfp>:
 8029714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8029716:	4607      	mov	r7, r0
 8029718:	f7ff ffac 	bl	8029674 <__sfp_lock_acquire>
 802971c:	4b1e      	ldr	r3, [pc, #120]	; (8029798 <__sfp+0x84>)
 802971e:	681e      	ldr	r6, [r3, #0]
 8029720:	69b3      	ldr	r3, [r6, #24]
 8029722:	b913      	cbnz	r3, 802972a <__sfp+0x16>
 8029724:	4630      	mov	r0, r6
 8029726:	f7ff ffbd 	bl	80296a4 <__sinit>
 802972a:	3648      	adds	r6, #72	; 0x48
 802972c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8029730:	3b01      	subs	r3, #1
 8029732:	d503      	bpl.n	802973c <__sfp+0x28>
 8029734:	6833      	ldr	r3, [r6, #0]
 8029736:	b30b      	cbz	r3, 802977c <__sfp+0x68>
 8029738:	6836      	ldr	r6, [r6, #0]
 802973a:	e7f7      	b.n	802972c <__sfp+0x18>
 802973c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8029740:	b9d5      	cbnz	r5, 8029778 <__sfp+0x64>
 8029742:	4b16      	ldr	r3, [pc, #88]	; (802979c <__sfp+0x88>)
 8029744:	60e3      	str	r3, [r4, #12]
 8029746:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802974a:	6665      	str	r5, [r4, #100]	; 0x64
 802974c:	f7ff f90e 	bl	802896c <__retarget_lock_init_recursive>
 8029750:	f7ff ff96 	bl	8029680 <__sfp_lock_release>
 8029754:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8029758:	e9c4 5504 	strd	r5, r5, [r4, #16]
 802975c:	6025      	str	r5, [r4, #0]
 802975e:	61a5      	str	r5, [r4, #24]
 8029760:	2208      	movs	r2, #8
 8029762:	4629      	mov	r1, r5
 8029764:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8029768:	f7ff f922 	bl	80289b0 <memset>
 802976c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8029770:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8029774:	4620      	mov	r0, r4
 8029776:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8029778:	3468      	adds	r4, #104	; 0x68
 802977a:	e7d9      	b.n	8029730 <__sfp+0x1c>
 802977c:	2104      	movs	r1, #4
 802977e:	4638      	mov	r0, r7
 8029780:	f7ff ff62 	bl	8029648 <__sfmoreglue>
 8029784:	4604      	mov	r4, r0
 8029786:	6030      	str	r0, [r6, #0]
 8029788:	2800      	cmp	r0, #0
 802978a:	d1d5      	bne.n	8029738 <__sfp+0x24>
 802978c:	f7ff ff78 	bl	8029680 <__sfp_lock_release>
 8029790:	230c      	movs	r3, #12
 8029792:	603b      	str	r3, [r7, #0]
 8029794:	e7ee      	b.n	8029774 <__sfp+0x60>
 8029796:	bf00      	nop
 8029798:	0802d9ec 	.word	0x0802d9ec
 802979c:	ffff0001 	.word	0xffff0001

080297a0 <_fwalk_reent>:
 80297a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80297a4:	4606      	mov	r6, r0
 80297a6:	4688      	mov	r8, r1
 80297a8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80297ac:	2700      	movs	r7, #0
 80297ae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80297b2:	f1b9 0901 	subs.w	r9, r9, #1
 80297b6:	d505      	bpl.n	80297c4 <_fwalk_reent+0x24>
 80297b8:	6824      	ldr	r4, [r4, #0]
 80297ba:	2c00      	cmp	r4, #0
 80297bc:	d1f7      	bne.n	80297ae <_fwalk_reent+0xe>
 80297be:	4638      	mov	r0, r7
 80297c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80297c4:	89ab      	ldrh	r3, [r5, #12]
 80297c6:	2b01      	cmp	r3, #1
 80297c8:	d907      	bls.n	80297da <_fwalk_reent+0x3a>
 80297ca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80297ce:	3301      	adds	r3, #1
 80297d0:	d003      	beq.n	80297da <_fwalk_reent+0x3a>
 80297d2:	4629      	mov	r1, r5
 80297d4:	4630      	mov	r0, r6
 80297d6:	47c0      	blx	r8
 80297d8:	4307      	orrs	r7, r0
 80297da:	3568      	adds	r5, #104	; 0x68
 80297dc:	e7e9      	b.n	80297b2 <_fwalk_reent+0x12>

080297de <__swhatbuf_r>:
 80297de:	b570      	push	{r4, r5, r6, lr}
 80297e0:	460e      	mov	r6, r1
 80297e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80297e6:	2900      	cmp	r1, #0
 80297e8:	b096      	sub	sp, #88	; 0x58
 80297ea:	4614      	mov	r4, r2
 80297ec:	461d      	mov	r5, r3
 80297ee:	da08      	bge.n	8029802 <__swhatbuf_r+0x24>
 80297f0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80297f4:	2200      	movs	r2, #0
 80297f6:	602a      	str	r2, [r5, #0]
 80297f8:	061a      	lsls	r2, r3, #24
 80297fa:	d410      	bmi.n	802981e <__swhatbuf_r+0x40>
 80297fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8029800:	e00e      	b.n	8029820 <__swhatbuf_r+0x42>
 8029802:	466a      	mov	r2, sp
 8029804:	f000 f8c2 	bl	802998c <_fstat_r>
 8029808:	2800      	cmp	r0, #0
 802980a:	dbf1      	blt.n	80297f0 <__swhatbuf_r+0x12>
 802980c:	9a01      	ldr	r2, [sp, #4]
 802980e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8029812:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8029816:	425a      	negs	r2, r3
 8029818:	415a      	adcs	r2, r3
 802981a:	602a      	str	r2, [r5, #0]
 802981c:	e7ee      	b.n	80297fc <__swhatbuf_r+0x1e>
 802981e:	2340      	movs	r3, #64	; 0x40
 8029820:	2000      	movs	r0, #0
 8029822:	6023      	str	r3, [r4, #0]
 8029824:	b016      	add	sp, #88	; 0x58
 8029826:	bd70      	pop	{r4, r5, r6, pc}

08029828 <__smakebuf_r>:
 8029828:	898b      	ldrh	r3, [r1, #12]
 802982a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802982c:	079d      	lsls	r5, r3, #30
 802982e:	4606      	mov	r6, r0
 8029830:	460c      	mov	r4, r1
 8029832:	d507      	bpl.n	8029844 <__smakebuf_r+0x1c>
 8029834:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8029838:	6023      	str	r3, [r4, #0]
 802983a:	6123      	str	r3, [r4, #16]
 802983c:	2301      	movs	r3, #1
 802983e:	6163      	str	r3, [r4, #20]
 8029840:	b002      	add	sp, #8
 8029842:	bd70      	pop	{r4, r5, r6, pc}
 8029844:	ab01      	add	r3, sp, #4
 8029846:	466a      	mov	r2, sp
 8029848:	f7ff ffc9 	bl	80297de <__swhatbuf_r>
 802984c:	9900      	ldr	r1, [sp, #0]
 802984e:	4605      	mov	r5, r0
 8029850:	4630      	mov	r0, r6
 8029852:	f7ff f921 	bl	8028a98 <_malloc_r>
 8029856:	b948      	cbnz	r0, 802986c <__smakebuf_r+0x44>
 8029858:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802985c:	059a      	lsls	r2, r3, #22
 802985e:	d4ef      	bmi.n	8029840 <__smakebuf_r+0x18>
 8029860:	f023 0303 	bic.w	r3, r3, #3
 8029864:	f043 0302 	orr.w	r3, r3, #2
 8029868:	81a3      	strh	r3, [r4, #12]
 802986a:	e7e3      	b.n	8029834 <__smakebuf_r+0xc>
 802986c:	4b0d      	ldr	r3, [pc, #52]	; (80298a4 <__smakebuf_r+0x7c>)
 802986e:	62b3      	str	r3, [r6, #40]	; 0x28
 8029870:	89a3      	ldrh	r3, [r4, #12]
 8029872:	6020      	str	r0, [r4, #0]
 8029874:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8029878:	81a3      	strh	r3, [r4, #12]
 802987a:	9b00      	ldr	r3, [sp, #0]
 802987c:	6163      	str	r3, [r4, #20]
 802987e:	9b01      	ldr	r3, [sp, #4]
 8029880:	6120      	str	r0, [r4, #16]
 8029882:	b15b      	cbz	r3, 802989c <__smakebuf_r+0x74>
 8029884:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8029888:	4630      	mov	r0, r6
 802988a:	f000 f891 	bl	80299b0 <_isatty_r>
 802988e:	b128      	cbz	r0, 802989c <__smakebuf_r+0x74>
 8029890:	89a3      	ldrh	r3, [r4, #12]
 8029892:	f023 0303 	bic.w	r3, r3, #3
 8029896:	f043 0301 	orr.w	r3, r3, #1
 802989a:	81a3      	strh	r3, [r4, #12]
 802989c:	89a0      	ldrh	r0, [r4, #12]
 802989e:	4305      	orrs	r5, r0
 80298a0:	81a5      	strh	r5, [r4, #12]
 80298a2:	e7cd      	b.n	8029840 <__smakebuf_r+0x18>
 80298a4:	0802963d 	.word	0x0802963d

080298a8 <__malloc_lock>:
 80298a8:	4801      	ldr	r0, [pc, #4]	; (80298b0 <__malloc_lock+0x8>)
 80298aa:	f7ff b860 	b.w	802896e <__retarget_lock_acquire_recursive>
 80298ae:	bf00      	nop
 80298b0:	2402631d 	.word	0x2402631d

080298b4 <__malloc_unlock>:
 80298b4:	4801      	ldr	r0, [pc, #4]	; (80298bc <__malloc_unlock+0x8>)
 80298b6:	f7ff b85c 	b.w	8028972 <__retarget_lock_release_recursive>
 80298ba:	bf00      	nop
 80298bc:	2402631d 	.word	0x2402631d

080298c0 <__sread>:
 80298c0:	b510      	push	{r4, lr}
 80298c2:	460c      	mov	r4, r1
 80298c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80298c8:	f000 f894 	bl	80299f4 <_read_r>
 80298cc:	2800      	cmp	r0, #0
 80298ce:	bfab      	itete	ge
 80298d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80298d2:	89a3      	ldrhlt	r3, [r4, #12]
 80298d4:	181b      	addge	r3, r3, r0
 80298d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80298da:	bfac      	ite	ge
 80298dc:	6563      	strge	r3, [r4, #84]	; 0x54
 80298de:	81a3      	strhlt	r3, [r4, #12]
 80298e0:	bd10      	pop	{r4, pc}

080298e2 <__swrite>:
 80298e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80298e6:	461f      	mov	r7, r3
 80298e8:	898b      	ldrh	r3, [r1, #12]
 80298ea:	05db      	lsls	r3, r3, #23
 80298ec:	4605      	mov	r5, r0
 80298ee:	460c      	mov	r4, r1
 80298f0:	4616      	mov	r6, r2
 80298f2:	d505      	bpl.n	8029900 <__swrite+0x1e>
 80298f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80298f8:	2302      	movs	r3, #2
 80298fa:	2200      	movs	r2, #0
 80298fc:	f000 f868 	bl	80299d0 <_lseek_r>
 8029900:	89a3      	ldrh	r3, [r4, #12]
 8029902:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8029906:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802990a:	81a3      	strh	r3, [r4, #12]
 802990c:	4632      	mov	r2, r6
 802990e:	463b      	mov	r3, r7
 8029910:	4628      	mov	r0, r5
 8029912:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8029916:	f000 b817 	b.w	8029948 <_write_r>

0802991a <__sseek>:
 802991a:	b510      	push	{r4, lr}
 802991c:	460c      	mov	r4, r1
 802991e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8029922:	f000 f855 	bl	80299d0 <_lseek_r>
 8029926:	1c43      	adds	r3, r0, #1
 8029928:	89a3      	ldrh	r3, [r4, #12]
 802992a:	bf15      	itete	ne
 802992c:	6560      	strne	r0, [r4, #84]	; 0x54
 802992e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8029932:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8029936:	81a3      	strheq	r3, [r4, #12]
 8029938:	bf18      	it	ne
 802993a:	81a3      	strhne	r3, [r4, #12]
 802993c:	bd10      	pop	{r4, pc}

0802993e <__sclose>:
 802993e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8029942:	f000 b813 	b.w	802996c <_close_r>
	...

08029948 <_write_r>:
 8029948:	b538      	push	{r3, r4, r5, lr}
 802994a:	4d07      	ldr	r5, [pc, #28]	; (8029968 <_write_r+0x20>)
 802994c:	4604      	mov	r4, r0
 802994e:	4608      	mov	r0, r1
 8029950:	4611      	mov	r1, r2
 8029952:	2200      	movs	r2, #0
 8029954:	602a      	str	r2, [r5, #0]
 8029956:	461a      	mov	r2, r3
 8029958:	f7d7 fff5 	bl	8001946 <_write>
 802995c:	1c43      	adds	r3, r0, #1
 802995e:	d102      	bne.n	8029966 <_write_r+0x1e>
 8029960:	682b      	ldr	r3, [r5, #0]
 8029962:	b103      	cbz	r3, 8029966 <_write_r+0x1e>
 8029964:	6023      	str	r3, [r4, #0]
 8029966:	bd38      	pop	{r3, r4, r5, pc}
 8029968:	240264c0 	.word	0x240264c0

0802996c <_close_r>:
 802996c:	b538      	push	{r3, r4, r5, lr}
 802996e:	4d06      	ldr	r5, [pc, #24]	; (8029988 <_close_r+0x1c>)
 8029970:	2300      	movs	r3, #0
 8029972:	4604      	mov	r4, r0
 8029974:	4608      	mov	r0, r1
 8029976:	602b      	str	r3, [r5, #0]
 8029978:	f7d8 f801 	bl	800197e <_close>
 802997c:	1c43      	adds	r3, r0, #1
 802997e:	d102      	bne.n	8029986 <_close_r+0x1a>
 8029980:	682b      	ldr	r3, [r5, #0]
 8029982:	b103      	cbz	r3, 8029986 <_close_r+0x1a>
 8029984:	6023      	str	r3, [r4, #0]
 8029986:	bd38      	pop	{r3, r4, r5, pc}
 8029988:	240264c0 	.word	0x240264c0

0802998c <_fstat_r>:
 802998c:	b538      	push	{r3, r4, r5, lr}
 802998e:	4d07      	ldr	r5, [pc, #28]	; (80299ac <_fstat_r+0x20>)
 8029990:	2300      	movs	r3, #0
 8029992:	4604      	mov	r4, r0
 8029994:	4608      	mov	r0, r1
 8029996:	4611      	mov	r1, r2
 8029998:	602b      	str	r3, [r5, #0]
 802999a:	f7d7 fffc 	bl	8001996 <_fstat>
 802999e:	1c43      	adds	r3, r0, #1
 80299a0:	d102      	bne.n	80299a8 <_fstat_r+0x1c>
 80299a2:	682b      	ldr	r3, [r5, #0]
 80299a4:	b103      	cbz	r3, 80299a8 <_fstat_r+0x1c>
 80299a6:	6023      	str	r3, [r4, #0]
 80299a8:	bd38      	pop	{r3, r4, r5, pc}
 80299aa:	bf00      	nop
 80299ac:	240264c0 	.word	0x240264c0

080299b0 <_isatty_r>:
 80299b0:	b538      	push	{r3, r4, r5, lr}
 80299b2:	4d06      	ldr	r5, [pc, #24]	; (80299cc <_isatty_r+0x1c>)
 80299b4:	2300      	movs	r3, #0
 80299b6:	4604      	mov	r4, r0
 80299b8:	4608      	mov	r0, r1
 80299ba:	602b      	str	r3, [r5, #0]
 80299bc:	f7d7 fffb 	bl	80019b6 <_isatty>
 80299c0:	1c43      	adds	r3, r0, #1
 80299c2:	d102      	bne.n	80299ca <_isatty_r+0x1a>
 80299c4:	682b      	ldr	r3, [r5, #0]
 80299c6:	b103      	cbz	r3, 80299ca <_isatty_r+0x1a>
 80299c8:	6023      	str	r3, [r4, #0]
 80299ca:	bd38      	pop	{r3, r4, r5, pc}
 80299cc:	240264c0 	.word	0x240264c0

080299d0 <_lseek_r>:
 80299d0:	b538      	push	{r3, r4, r5, lr}
 80299d2:	4d07      	ldr	r5, [pc, #28]	; (80299f0 <_lseek_r+0x20>)
 80299d4:	4604      	mov	r4, r0
 80299d6:	4608      	mov	r0, r1
 80299d8:	4611      	mov	r1, r2
 80299da:	2200      	movs	r2, #0
 80299dc:	602a      	str	r2, [r5, #0]
 80299de:	461a      	mov	r2, r3
 80299e0:	f7d7 fff4 	bl	80019cc <_lseek>
 80299e4:	1c43      	adds	r3, r0, #1
 80299e6:	d102      	bne.n	80299ee <_lseek_r+0x1e>
 80299e8:	682b      	ldr	r3, [r5, #0]
 80299ea:	b103      	cbz	r3, 80299ee <_lseek_r+0x1e>
 80299ec:	6023      	str	r3, [r4, #0]
 80299ee:	bd38      	pop	{r3, r4, r5, pc}
 80299f0:	240264c0 	.word	0x240264c0

080299f4 <_read_r>:
 80299f4:	b538      	push	{r3, r4, r5, lr}
 80299f6:	4d07      	ldr	r5, [pc, #28]	; (8029a14 <_read_r+0x20>)
 80299f8:	4604      	mov	r4, r0
 80299fa:	4608      	mov	r0, r1
 80299fc:	4611      	mov	r1, r2
 80299fe:	2200      	movs	r2, #0
 8029a00:	602a      	str	r2, [r5, #0]
 8029a02:	461a      	mov	r2, r3
 8029a04:	f7d7 ff82 	bl	800190c <_read>
 8029a08:	1c43      	adds	r3, r0, #1
 8029a0a:	d102      	bne.n	8029a12 <_read_r+0x1e>
 8029a0c:	682b      	ldr	r3, [r5, #0]
 8029a0e:	b103      	cbz	r3, 8029a12 <_read_r+0x1e>
 8029a10:	6023      	str	r3, [r4, #0]
 8029a12:	bd38      	pop	{r3, r4, r5, pc}
 8029a14:	240264c0 	.word	0x240264c0

08029a18 <_init>:
 8029a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8029a1a:	bf00      	nop
 8029a1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8029a1e:	bc08      	pop	{r3}
 8029a20:	469e      	mov	lr, r3
 8029a22:	4770      	bx	lr

08029a24 <_fini>:
 8029a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8029a26:	bf00      	nop
 8029a28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8029a2a:	bc08      	pop	{r3}
 8029a2c:	469e      	mov	lr, r3
 8029a2e:	4770      	bx	lr
