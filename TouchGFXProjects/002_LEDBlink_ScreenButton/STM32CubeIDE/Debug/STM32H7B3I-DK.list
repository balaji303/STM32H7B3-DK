
STM32H7B3I-DK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002724c  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003d94  080274fc  080274fc  000374fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontSearchFlashSection 00000018  0802b290  0802b290  0003b290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0802b2a8  0802b2a8  000bd358  2**0
                  CONTENTS
  5 .ARM          00000000  0802b2a8  0802b2a8  000bd358  2**0
                  CONTENTS
  6 .preinit_array 00000000  0802b2a8  0802b2a8  000bd358  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   0000001c  0802b2a8  0802b2a8  0003b2a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   0000000c  0802b2c4  0802b2c4  0003b2c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000128  24000000  0802b2d0  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 CCMRAM        00005a00  24000128  0802b3f8  00040128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000208d8  24005b28  08030df8  00045b28  2**2
                  ALLOC
 12 ._user_heap_stack 00002000  24026400  08030df8  00046400  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000bd358  2**0
                  CONTENTS, READONLY
 14 FramebufferSection 000bf400  24040000  24040000  00050000  2**2
                  ALLOC
 15 FontFlashSection 000001a8  90000000  90000000  00050000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 TextFlashSection 00000010  900001a8  900001a8  000501a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 17 ExtFlashSection 0006d1a0  900001b8  900001b8  000501b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 18 Video_RGB_Buffer 0005fa00  d0000000  d0000000  000c0000  2**2
                  ALLOC
 19 .debug_line   000525bc  00000000  00000000  000bd386  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_info   000a2448  00000000  00000000  0010f942  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_abbrev 0001176e  00000000  00000000  001b1d8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_aranges 000042b8  00000000  00000000  001c34f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    0017c62b  00000000  00000000  001c77b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_ranges 00003dc8  00000000  00000000  00343de0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_macro  00042df1  00000000  00000000  00347ba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .comment      000000cf  00000000  00000000  0038a999  2**0
                  CONTENTS, READONLY
 27 .debug_frame  00012420  00000000  00000000  0038aa68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24005b28 	.word	0x24005b28
 80002cc:	00000000 	.word	0x00000000
 80002d0:	080274e4 	.word	0x080274e4

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24005b2c 	.word	0x24005b2c
 80002ec:	080274e4 	.word	0x080274e4

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000390:	f8df d034 	ldr.w	sp, [pc, #52]	; 80003c8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8000394:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000396:	e003      	b.n	80003a0 <LoopCopyDataInit>

08000398 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000398:	4b0c      	ldr	r3, [pc, #48]	; (80003cc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800039a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800039c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800039e:	3104      	adds	r1, #4

080003a0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80003a0:	480b      	ldr	r0, [pc, #44]	; (80003d0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80003a2:	4b0c      	ldr	r3, [pc, #48]	; (80003d4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80003a4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80003a6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80003a8:	d3f6      	bcc.n	8000398 <CopyDataInit>
  ldr  r2, =_sbss
 80003aa:	4a0b      	ldr	r2, [pc, #44]	; (80003d8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80003ac:	e002      	b.n	80003b4 <LoopFillZerobss>

080003ae <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80003ae:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80003b0:	f842 3b04 	str.w	r3, [r2], #4

080003b4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80003b4:	4b09      	ldr	r3, [pc, #36]	; (80003dc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80003b6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80003b8:	d3f9      	bcc.n	80003ae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80003ba:	f00b fb1f 	bl	800b9fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80003be:	f026 f817 	bl	80263f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80003c2:	f005 fd3f 	bl	8005e44 <main>
  bx  lr
 80003c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80003c8:	24040000 	.word	0x24040000
  ldr  r3, =_sidata
 80003cc:	0802b2d0 	.word	0x0802b2d0
  ldr  r0, =_sdata
 80003d0:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 80003d4:	24000128 	.word	0x24000128
  ldr  r2, =_sbss
 80003d8:	24005b28 	.word	0x24005b28
  ldr  r3, = _ebss
 80003dc:	24026400 	.word	0x24026400

080003e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80003e0:	e7fe      	b.n	80003e0 <ADC_IRQHandler>

080003e2 <MX_LIBJPEG_Init>:
/* USER CODE BEGIN 2 */
/* USER CODE END 2 */

/* LIBJPEG init function */
void MX_LIBJPEG_Init(void)
{
 80003e2:	b480      	push	{r7}
 80003e4:	af00      	add	r7, sp, #0
  */

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 80003e6:	bf00      	nop
 80003e8:	46bd      	mov	sp, r7
 80003ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ee:	4770      	bx	lr

080003f0 <MX_TouchGFX_PreOSInit>:

/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
 80003f0:	b480      	push	{r7}
 80003f2:	af00      	add	r7, sp, #0
}
 80003f4:	bf00      	nop
 80003f6:	46bd      	mov	sp, r7
 80003f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fc:	4770      	bx	lr

080003fe <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 80003fe:	b580      	push	{r7, lr}
 8000400:	af00      	add	r7, sp, #0
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_components_init();
 8000402:	f003 f9d3 	bl	80037ac <touchgfx_components_init>
  touchgfx_init();
 8000406:	f003 f9a7 	bl	8003758 <touchgfx_init>
}
 800040a:	bf00      	nop
 800040c:	bd80      	pop	{r7, pc}

0800040e <TouchGFX_Task>:

/**
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
 800040e:	b580      	push	{r7, lr}
 8000410:	b082      	sub	sp, #8
 8000412:	af00      	add	r7, sp, #0
 8000414:	6078      	str	r0, [r7, #4]
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 8000416:	f003 f9d1 	bl	80037bc <touchgfx_taskEntry>
}
 800041a:	bf00      	nop
 800041c:	3708      	adds	r7, #8
 800041e:	46bd      	mov	sp, r7
 8000420:	bd80      	pop	{r7, pc}
	...

08000424 <_ZN8touchgfx18MCUInstrumentationD1Ev>:

    /** Initialize. */
    virtual void init() = 0;

    /** Finalizes an instance of the MCUInstrumentation class. */
    virtual ~MCUInstrumentation()
 8000424:	b480      	push	{r7}
 8000426:	b083      	sub	sp, #12
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
    {
 800042c:	4a04      	ldr	r2, [pc, #16]	; (8000440 <_ZN8touchgfx18MCUInstrumentationD1Ev+0x1c>)
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	601a      	str	r2, [r3, #0]
    }
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	4618      	mov	r0, r3
 8000436:	370c      	adds	r7, #12
 8000438:	46bd      	mov	sp, r7
 800043a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043e:	4770      	bx	lr
 8000440:	08029760 	.word	0x08029760

08000444 <_ZN8touchgfx18MCUInstrumentationD0Ev>:
    virtual ~MCUInstrumentation()
 8000444:	b580      	push	{r7, lr}
 8000446:	b082      	sub	sp, #8
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
    }
 800044c:	6878      	ldr	r0, [r7, #4]
 800044e:	f7ff ffe9 	bl	8000424 <_ZN8touchgfx18MCUInstrumentationD1Ev>
 8000452:	210c      	movs	r1, #12
 8000454:	6878      	ldr	r0, [r7, #4]
 8000456:	f025 ff52 	bl	80262fe <_ZdlPvj>
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	4618      	mov	r0, r3
 800045e:	3708      	adds	r7, #8
 8000460:	46bd      	mov	sp, r7
 8000462:	bd80      	pop	{r7, pc}

08000464 <_ZN8touchgfx18MCUInstrumentation12setMCUActiveEb>:
    /**
     * Sets MCU activity high.
     *
     * @param  active if True, inactive otherwise.
     */
    virtual void setMCUActive(bool active)
 8000464:	b580      	push	{r7, lr}
 8000466:	b084      	sub	sp, #16
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
 800046c:	460b      	mov	r3, r1
 800046e:	70fb      	strb	r3, [r7, #3]
    {
        if (active) // Idle task sched out
 8000470:	78fb      	ldrb	r3, [r7, #3]
 8000472:	2b00      	cmp	r3, #0
 8000474:	d011      	beq.n	800049a <_ZN8touchgfx18MCUInstrumentation12setMCUActiveEb+0x36>
        {
            uint32_t cc_temp = getCPUCycles() - cc_in;
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	3310      	adds	r3, #16
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	6878      	ldr	r0, [r7, #4]
 8000480:	4798      	blx	r3
 8000482:	4602      	mov	r2, r0
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	689b      	ldr	r3, [r3, #8]
 8000488:	1ad3      	subs	r3, r2, r3
 800048a:	60fb      	str	r3, [r7, #12]
            cc_consumed += cc_temp;
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	685a      	ldr	r2, [r3, #4]
 8000490:	68fb      	ldr	r3, [r7, #12]
 8000492:	441a      	add	r2, r3
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	605a      	str	r2, [r3, #4]
        }
        else // Idle task sched in
        {
            cc_in = getCPUCycles();
        }
    }
 8000498:	e008      	b.n	80004ac <_ZN8touchgfx18MCUInstrumentation12setMCUActiveEb+0x48>
            cc_in = getCPUCycles();
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	3310      	adds	r3, #16
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	6878      	ldr	r0, [r7, #4]
 80004a4:	4798      	blx	r3
 80004a6:	4602      	mov	r2, r0
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	609a      	str	r2, [r3, #8]
    }
 80004ac:	bf00      	nop
 80004ae:	3710      	adds	r7, #16
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bd80      	pop	{r7, pc}

080004b4 <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
    /**
     * Gets number of consumed clock cycles.
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
 80004b4:	b480      	push	{r7}
 80004b6:	b083      	sub	sp, #12
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
    {
        return cc_consumed;
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	685b      	ldr	r3, [r3, #4]
    }
 80004c0:	4618      	mov	r0, r3
 80004c2:	370c      	adds	r7, #12
 80004c4:	46bd      	mov	sp, r7
 80004c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ca:	4770      	bx	lr

080004cc <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
    /**
     * Sets number of consumed clock cycles.
     *
     * @param  val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
 80004cc:	b480      	push	{r7}
 80004ce:	b083      	sub	sp, #12
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
 80004d4:	6039      	str	r1, [r7, #0]
    {
        cc_consumed = val;
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	683a      	ldr	r2, [r7, #0]
 80004da:	605a      	str	r2, [r3, #4]
    }
 80004dc:	bf00      	nop
 80004de:	370c      	adds	r7, #12
 80004e0:	46bd      	mov	sp, r7
 80004e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e6:	4770      	bx	lr

080004e8 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>:
#include <touchgfx/hal/HAL.hpp>

namespace touchgfx
{
void CortexMMCUInstrumentation::init()
{
 80004e8:	b480      	push	{r7}
 80004ea:	b083      	sub	sp, #12
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
    //                                    Embedded Trace Macrocell (ETM)
    //                                    Trace Port Interface Unit (TPIU).
    //                                    This enables control of power usage unless tracing is required. The application can enable this, for ITM use, or use by a debugger.

    // Enable Debug Exception and Monitor Control Register
    *((volatile unsigned int*)0xE000EDFC) |= 0x01000000;
 80004f0:	4b0b      	ldr	r3, [pc, #44]	; (8000520 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x38>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4a0a      	ldr	r2, [pc, #40]	; (8000520 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x38>)
 80004f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80004fa:	6013      	str	r3, [r2, #0]
    // Enable Lock Access Register
    *((volatile unsigned int*)0xE0001FB0) |= 0xC5ACCE55;
 80004fc:	4b09      	ldr	r3, [pc, #36]	; (8000524 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x3c>)
 80004fe:	681a      	ldr	r2, [r3, #0]
 8000500:	4908      	ldr	r1, [pc, #32]	; (8000524 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x3c>)
 8000502:	4b09      	ldr	r3, [pc, #36]	; (8000528 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x40>)
 8000504:	4313      	orrs	r3, r2
 8000506:	600b      	str	r3, [r1, #0]
    // Enable Data Watchpoint and Trace Control Register
    *((volatile unsigned int*)0xE0001000) |= 1;
 8000508:	4b08      	ldr	r3, [pc, #32]	; (800052c <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x44>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4a07      	ldr	r2, [pc, #28]	; (800052c <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x44>)
 800050e:	f043 0301 	orr.w	r3, r3, #1
 8000512:	6013      	str	r3, [r2, #0]
}
 8000514:	bf00      	nop
 8000516:	370c      	adds	r7, #12
 8000518:	46bd      	mov	sp, r7
 800051a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051e:	4770      	bx	lr
 8000520:	e000edfc 	.word	0xe000edfc
 8000524:	e0001fb0 	.word	0xe0001fb0
 8000528:	c5acce55 	.word	0xc5acce55
 800052c:	e0001000 	.word	0xe0001000

08000530 <_ZN8touchgfx25CortexMMCUInstrumentation12getElapsedUSEjjj>:

//Board specific clockfrequency
unsigned int CortexMMCUInstrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
 8000530:	b480      	push	{r7}
 8000532:	b085      	sub	sp, #20
 8000534:	af00      	add	r7, sp, #0
 8000536:	60f8      	str	r0, [r7, #12]
 8000538:	60b9      	str	r1, [r7, #8]
 800053a:	607a      	str	r2, [r7, #4]
 800053c:	603b      	str	r3, [r7, #0]
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
 800053e:	687a      	ldr	r2, [r7, #4]
 8000540:	68bb      	ldr	r3, [r7, #8]
 8000542:	1ad2      	subs	r2, r2, r3
 8000544:	683b      	ldr	r3, [r7, #0]
 8000546:	085b      	lsrs	r3, r3, #1
 8000548:	441a      	add	r2, r3
 800054a:	683b      	ldr	r3, [r7, #0]
 800054c:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8000550:	4618      	mov	r0, r3
 8000552:	3714      	adds	r7, #20
 8000554:	46bd      	mov	sp, r7
 8000556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055a:	4770      	bx	lr

0800055c <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv>:

unsigned int CortexMMCUInstrumentation::getCPUCycles()
{
 800055c:	b480      	push	{r7}
 800055e:	b083      	sub	sp, #12
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
    return *((volatile unsigned int*)0xE0001004);
 8000564:	4b03      	ldr	r3, [pc, #12]	; (8000574 <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv+0x18>)
 8000566:	681b      	ldr	r3, [r3, #0]
}
 8000568:	4618      	mov	r0, r3
 800056a:	370c      	adds	r7, #12
 800056c:	46bd      	mov	sp, r7
 800056e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000572:	4770      	bx	lr
 8000574:	e0001004 	.word	0xe0001004

08000578 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb>:

void CortexMMCUInstrumentation::setMCUActive(bool active)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b084      	sub	sp, #16
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
 8000580:	460b      	mov	r3, r1
 8000582:	70fb      	strb	r3, [r7, #3]
    if (active) //idle task sched out
 8000584:	78fb      	ldrb	r3, [r7, #3]
 8000586:	2b00      	cmp	r3, #0
 8000588:	d011      	beq.n	80005ae <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x36>
    {
        uint32_t cc_temp = getCPUCycles() - cc_in;
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	3310      	adds	r3, #16
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	6878      	ldr	r0, [r7, #4]
 8000594:	4798      	blx	r3
 8000596:	4602      	mov	r2, r0
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	689b      	ldr	r3, [r3, #8]
 800059c:	1ad3      	subs	r3, r2, r3
 800059e:	60fb      	str	r3, [r7, #12]
        cc_consumed += cc_temp;
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	685a      	ldr	r2, [r3, #4]
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	441a      	add	r2, r3
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	605a      	str	r2, [r3, #4]
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
    }
}
 80005ac:	e008      	b.n	80005c0 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x48>
        cc_in = getCPUCycles();
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	3310      	adds	r3, #16
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	6878      	ldr	r0, [r7, #4]
 80005b8:	4798      	blx	r3
 80005ba:	4602      	mov	r2, r0
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	609a      	str	r2, [r3, #8]
}
 80005c0:	bf00      	nop
 80005c2:	3710      	adds	r7, #16
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}

080005c8 <_ZN8touchgfx25CortexMMCUInstrumentationD1Ev>:
 *        Interface for instrumenting Cortex-M processors to measure MCU load via measured CPU
 *        cycles.
 *
 * @sa MCUInstrumentation
 */
class CortexMMCUInstrumentation : public MCUInstrumentation
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
 80005d0:	4a05      	ldr	r2, [pc, #20]	; (80005e8 <_ZN8touchgfx25CortexMMCUInstrumentationD1Ev+0x20>)
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	601a      	str	r2, [r3, #0]
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	4618      	mov	r0, r3
 80005da:	f7ff ff23 	bl	8000424 <_ZN8touchgfx18MCUInstrumentationD1Ev>
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	4618      	mov	r0, r3
 80005e2:	3708      	adds	r7, #8
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	08029738 	.word	0x08029738

080005ec <_ZN8touchgfx25CortexMMCUInstrumentationD0Ev>:
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
 80005f4:	6878      	ldr	r0, [r7, #4]
 80005f6:	f7ff ffe7 	bl	80005c8 <_ZN8touchgfx25CortexMMCUInstrumentationD1Ev>
 80005fa:	210c      	movs	r1, #12
 80005fc:	6878      	ldr	r0, [r7, #4]
 80005fe:	f025 fe7e 	bl	80262fe <_ZdlPvj>
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	4618      	mov	r0, r3
 8000606:	3708      	adds	r7, #8
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}

0800060c <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 800060c:	b480      	push	{r7}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
    {
 8000614:	4a04      	ldr	r2, [pc, #16]	; (8000628 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	601a      	str	r2, [r3, #0]
    }
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	4618      	mov	r0, r3
 800061e:	370c      	adds	r7, #12
 8000620:	46bd      	mov	sp, r7
 8000622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000626:	4770      	bx	lr
 8000628:	080297a0 	.word	0x080297a0

0800062c <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
    }
 8000634:	6878      	ldr	r0, [r7, #4]
 8000636:	f7ff ffe9 	bl	800060c <_ZN8touchgfx15TouchControllerD1Ev>
 800063a:	2104      	movs	r1, #4
 800063c:	6878      	ldr	r0, [r7, #4]
 800063e:	f025 fe5e 	bl	80262fe <_ZdlPvj>
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	4618      	mov	r0, r3
 8000646:	3708      	adds	r7, #8
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}

0800064c <_ZN20STM32TouchController4initEv>:
#include <stm32h7b3i_discovery_ts.h>
#include <TouchGFXHAL.hpp>
#include <cmsis_os.h>

void STM32TouchController::init()
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b086      	sub	sp, #24
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
    TS_Init_t hTS;

    hTS.Orientation = TS_SWAP_XY;
 8000654:	2308      	movs	r3, #8
 8000656:	613b      	str	r3, [r7, #16]
    hTS.Accuracy = 0;
 8000658:	2300      	movs	r3, #0
 800065a:	617b      	str	r3, [r7, #20]
    hTS.Width = touchgfx::HAL::FRAME_BUFFER_WIDTH;
 800065c:	4b07      	ldr	r3, [pc, #28]	; (800067c <_ZN20STM32TouchController4initEv+0x30>)
 800065e:	881b      	ldrh	r3, [r3, #0]
 8000660:	60bb      	str	r3, [r7, #8]
    hTS.Height = touchgfx::HAL::FRAME_BUFFER_HEIGHT;
 8000662:	4b07      	ldr	r3, [pc, #28]	; (8000680 <_ZN20STM32TouchController4initEv+0x34>)
 8000664:	881b      	ldrh	r3, [r3, #0]
 8000666:	60fb      	str	r3, [r7, #12]
    BSP_TS_Init(0, &hTS);
 8000668:	f107 0308 	add.w	r3, r7, #8
 800066c:	4619      	mov	r1, r3
 800066e:	2000      	movs	r0, #0
 8000670:	f00a ffa6 	bl	800b5c0 <BSP_TS_Init>
}
 8000674:	bf00      	nop
 8000676:	3718      	adds	r7, #24
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	24026176 	.word	0x24026176
 8000680:	24026178 	.word	0x24026178

08000684 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b088      	sub	sp, #32
 8000688:	af00      	add	r7, sp, #0
 800068a:	60f8      	str	r0, [r7, #12]
 800068c:	60b9      	str	r1, [r7, #8]
 800068e:	607a      	str	r2, [r7, #4]
    TS_State_t TS_State = { 0 };
 8000690:	f107 0310 	add.w	r3, r7, #16
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]

    /* This should never fail !! */
    if (BSP_TS_GetState(0, &TS_State) != BSP_ERROR_NONE)
 800069c:	f107 0310 	add.w	r3, r7, #16
 80006a0:	4619      	mov	r1, r3
 80006a2:	2000      	movs	r0, #0
 80006a4:	f00b f832 	bl	800b70c <BSP_TS_GetState>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	bf14      	ite	ne
 80006ae:	2301      	movne	r3, #1
 80006b0:	2300      	moveq	r3, #0
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d00a      	beq.n	80006ce <_ZN20STM32TouchController11sampleTouchERlS0_+0x4a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80006b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006bc:	f383 8811 	msr	BASEPRI, r3
 80006c0:	f3bf 8f6f 	isb	sy
 80006c4:	f3bf 8f4f 	dsb	sy
 80006c8:	61fb      	str	r3, [r7, #28]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80006ca:	bf00      	nop
    {
        configASSERT(0);
 80006cc:	e7fe      	b.n	80006cc <_ZN20STM32TouchController11sampleTouchERlS0_+0x48>
    }

    if (TS_State.TouchDetected)
 80006ce:	693b      	ldr	r3, [r7, #16]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d009      	beq.n	80006e8 <_ZN20STM32TouchController11sampleTouchERlS0_+0x64>
    {
        x = TS_State.TouchX;
 80006d4:	697b      	ldr	r3, [r7, #20]
 80006d6:	461a      	mov	r2, r3
 80006d8:	68bb      	ldr	r3, [r7, #8]
 80006da:	601a      	str	r2, [r3, #0]
        y = TS_State.TouchY;
 80006dc:	69bb      	ldr	r3, [r7, #24]
 80006de:	461a      	mov	r2, r3
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	601a      	str	r2, [r3, #0]

        return true;
 80006e4:	2301      	movs	r3, #1
 80006e6:	e000      	b.n	80006ea <_ZN20STM32TouchController11sampleTouchERlS0_+0x66>
    }

    return false;
 80006e8:	2300      	movs	r3, #0
}
 80006ea:	4618      	mov	r0, r3
 80006ec:	3720      	adds	r7, #32
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
	...

080006f4 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
 80006fc:	4a05      	ldr	r2, [pc, #20]	; (8000714 <_ZN20STM32TouchControllerD1Ev+0x20>)
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	4618      	mov	r0, r3
 8000706:	f7ff ff81 	bl	800060c <_ZN8touchgfx15TouchControllerD1Ev>
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	4618      	mov	r0, r3
 800070e:	3708      	adds	r7, #8
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	08029788 	.word	0x08029788

08000718 <_ZN20STM32TouchControllerD0Ev>:
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
 8000720:	6878      	ldr	r0, [r7, #4]
 8000722:	f7ff ffe7 	bl	80006f4 <_ZN20STM32TouchControllerD1Ev>
 8000726:	2104      	movs	r1, #4
 8000728:	6878      	ldr	r0, [r7, #4]
 800072a:	f025 fde8 	bl	80262fe <_ZdlPvj>
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	4618      	mov	r0, r3
 8000732:	3708      	adds	r7, #8
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}

08000738 <_ZN8touchgfx4GPIO4initEv>:

/*
 * Perform configuration of IO pins.
 */
void GPIO::init()
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
    for (int id = 0; id <= 4; id++)
 800073e:	2300      	movs	r3, #0
 8000740:	607b      	str	r3, [r7, #4]
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	2b04      	cmp	r3, #4
 8000746:	dc16      	bgt.n	8000776 <_ZN8touchgfx4GPIO4initEv+0x3e>
    {
        if (GPIO::get(static_cast<GPIO_ID>(id)))
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	b2db      	uxtb	r3, r3
 800074c:	4618      	mov	r0, r3
 800074e:	f000 f909 	bl	8000964 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d00a      	beq.n	800076e <_ZN8touchgfx4GPIO4initEv+0x36>
        {
            if (GPIO_InvertedLevels[id] != 1)
 8000758:	4a09      	ldr	r2, [pc, #36]	; (8000780 <_ZN8touchgfx4GPIO4initEv+0x48>)
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000760:	2b01      	cmp	r3, #1
 8000762:	d004      	beq.n	800076e <_ZN8touchgfx4GPIO4initEv+0x36>
            {
                GPIO_InvertedLevels[id] = 1;
 8000764:	4a06      	ldr	r2, [pc, #24]	; (8000780 <_ZN8touchgfx4GPIO4initEv+0x48>)
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	2101      	movs	r1, #1
 800076a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int id = 0; id <= 4; id++)
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	3301      	adds	r3, #1
 8000772:	607b      	str	r3, [r7, #4]
 8000774:	e7e5      	b.n	8000742 <_ZN8touchgfx4GPIO4initEv+0xa>
            }
        }
    }
}
 8000776:	bf00      	nop
 8000778:	3708      	adds	r7, #8
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	24005b44 	.word	0x24005b44

08000784 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	4603      	mov	r3, r0
 800078c:	71fb      	strb	r3, [r7, #7]
    switch (id)
 800078e:	79fb      	ldrb	r3, [r7, #7]
 8000790:	2b03      	cmp	r3, #3
 8000792:	d84b      	bhi.n	800082c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xa8>
 8000794:	a201      	add	r2, pc, #4	; (adr r2, 800079c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>)
 8000796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800079a:	bf00      	nop
 800079c:	080007ad 	.word	0x080007ad
 80007a0:	080007cd 	.word	0x080007cd
 80007a4:	080007ed 	.word	0x080007ed
 80007a8:	0800080d 	.word	0x0800080d
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
 80007ac:	79fb      	ldrb	r3, [r7, #7]
 80007ae:	4a21      	ldr	r2, [pc, #132]	; (8000834 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xb0>)
 80007b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	bf0c      	ite	eq
 80007b8:	2301      	moveq	r3, #1
 80007ba:	2300      	movne	r3, #0
 80007bc:	b2db      	uxtb	r3, r3
 80007be:	461a      	mov	r2, r3
 80007c0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007c4:	481c      	ldr	r0, [pc, #112]	; (8000838 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xb4>)
 80007c6:	f00c f96f 	bl	800caa8 <HAL_GPIO_WritePin>
#endif
        break;
 80007ca:	e02f      	b.n	800082c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xa8>
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 80007cc:	79fb      	ldrb	r3, [r7, #7]
 80007ce:	4a19      	ldr	r2, [pc, #100]	; (8000834 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xb0>)
 80007d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	bf0c      	ite	eq
 80007d8:	2301      	moveq	r3, #1
 80007da:	2300      	movne	r3, #0
 80007dc:	b2db      	uxtb	r3, r3
 80007de:	461a      	mov	r2, r3
 80007e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007e4:	4814      	ldr	r0, [pc, #80]	; (8000838 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xb4>)
 80007e6:	f00c f95f 	bl	800caa8 <HAL_GPIO_WritePin>
#endif
        break;
 80007ea:	e01f      	b.n	800082c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xa8>
    case GPIO::FRAME_RATE:
#if defined(FRAME_RATE_GPIO_Port) && defined(FRAME_RATE_Pin)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
 80007ec:	79fb      	ldrb	r3, [r7, #7]
 80007ee:	4a11      	ldr	r2, [pc, #68]	; (8000834 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xb0>)
 80007f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	bf0c      	ite	eq
 80007f8:	2301      	moveq	r3, #1
 80007fa:	2300      	movne	r3, #0
 80007fc:	b2db      	uxtb	r3, r3
 80007fe:	461a      	mov	r2, r3
 8000800:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000804:	480d      	ldr	r0, [pc, #52]	; (800083c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xb8>)
 8000806:	f00c f94f 	bl	800caa8 <HAL_GPIO_WritePin>
#endif
        break;
 800080a:	e00f      	b.n	800082c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xa8>
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 800080c:	79fb      	ldrb	r3, [r7, #7]
 800080e:	4a09      	ldr	r2, [pc, #36]	; (8000834 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xb0>)
 8000810:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000814:	2b00      	cmp	r3, #0
 8000816:	bf0c      	ite	eq
 8000818:	2301      	moveq	r3, #1
 800081a:	2300      	movne	r3, #0
 800081c:	b2db      	uxtb	r3, r3
 800081e:	461a      	mov	r2, r3
 8000820:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000824:	4804      	ldr	r0, [pc, #16]	; (8000838 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xb4>)
 8000826:	f00c f93f 	bl	800caa8 <HAL_GPIO_WritePin>
#endif
        break;
 800082a:	bf00      	nop
    }
}
 800082c:	bf00      	nop
 800082e:	3708      	adds	r7, #8
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	24005b44 	.word	0x24005b44
 8000838:	58021c00 	.word	0x58021c00
 800083c:	58022000 	.word	0x58022000

08000840 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	4603      	mov	r3, r0
 8000848:	71fb      	strb	r3, [r7, #7]
    switch (id)
 800084a:	79fb      	ldrb	r3, [r7, #7]
 800084c:	2b03      	cmp	r3, #3
 800084e:	d84b      	bhi.n	80008e8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xa8>
 8000850:	a201      	add	r2, pc, #4	; (adr r2, 8000858 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>)
 8000852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000856:	bf00      	nop
 8000858:	08000869 	.word	0x08000869
 800085c:	08000889 	.word	0x08000889
 8000860:	080008a9 	.word	0x080008a9
 8000864:	080008c9 	.word	0x080008c9
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
 8000868:	79fb      	ldrb	r3, [r7, #7]
 800086a:	4a21      	ldr	r2, [pc, #132]	; (80008f0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xb0>)
 800086c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x38>
 8000874:	2301      	movs	r3, #1
 8000876:	e000      	b.n	800087a <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x3a>
 8000878:	2300      	movs	r3, #0
 800087a:	461a      	mov	r2, r3
 800087c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000880:	481c      	ldr	r0, [pc, #112]	; (80008f4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xb4>)
 8000882:	f00c f911 	bl	800caa8 <HAL_GPIO_WritePin>
#endif
        break;
 8000886:	e02f      	b.n	80008e8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xa8>
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 8000888:	79fb      	ldrb	r3, [r7, #7]
 800088a:	4a19      	ldr	r2, [pc, #100]	; (80008f0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xb0>)
 800088c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>
 8000894:	2301      	movs	r3, #1
 8000896:	e000      	b.n	800089a <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x5a>
 8000898:	2300      	movs	r3, #0
 800089a:	461a      	mov	r2, r3
 800089c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008a0:	4814      	ldr	r0, [pc, #80]	; (80008f4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xb4>)
 80008a2:	f00c f901 	bl	800caa8 <HAL_GPIO_WritePin>
#endif
        break;
 80008a6:	e01f      	b.n	80008e8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xa8>
    case GPIO::FRAME_RATE:
#if defined(FRAME_RATE_GPIO_Port) && defined(FRAME_RATE_Pin)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
 80008a8:	79fb      	ldrb	r3, [r7, #7]
 80008aa:	4a11      	ldr	r2, [pc, #68]	; (80008f0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xb0>)
 80008ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x78>
 80008b4:	2301      	movs	r3, #1
 80008b6:	e000      	b.n	80008ba <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x7a>
 80008b8:	2300      	movs	r3, #0
 80008ba:	461a      	mov	r2, r3
 80008bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008c0:	480d      	ldr	r0, [pc, #52]	; (80008f8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xb8>)
 80008c2:	f00c f8f1 	bl	800caa8 <HAL_GPIO_WritePin>
#endif
        break;
 80008c6:	e00f      	b.n	80008e8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xa8>
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 80008c8:	79fb      	ldrb	r3, [r7, #7]
 80008ca:	4a09      	ldr	r2, [pc, #36]	; (80008f0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xb0>)
 80008cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x98>
 80008d4:	2301      	movs	r3, #1
 80008d6:	e000      	b.n	80008da <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x9a>
 80008d8:	2300      	movs	r3, #0
 80008da:	461a      	mov	r2, r3
 80008dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008e0:	4804      	ldr	r0, [pc, #16]	; (80008f4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xb4>)
 80008e2:	f00c f8e1 	bl	800caa8 <HAL_GPIO_WritePin>
#endif
        break;
 80008e6:	bf00      	nop
    }
}
 80008e8:	bf00      	nop
 80008ea:	3708      	adds	r7, #8
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	24005b44 	.word	0x24005b44
 80008f4:	58021c00 	.word	0x58021c00
 80008f8:	58022000 	.word	0x58022000

080008fc <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	4603      	mov	r3, r0
 8000904:	71fb      	strb	r3, [r7, #7]
    switch (id)
 8000906:	79fb      	ldrb	r3, [r7, #7]
 8000908:	2b03      	cmp	r3, #3
 800090a:	d823      	bhi.n	8000954 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x58>
 800090c:	a201      	add	r2, pc, #4	; (adr r2, 8000914 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>)
 800090e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000912:	bf00      	nop
 8000914:	08000925 	.word	0x08000925
 8000918:	08000931 	.word	0x08000931
 800091c:	0800093d 	.word	0x0800093d
 8000920:	08000949 	.word	0x08000949
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8000924:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000928:	480c      	ldr	r0, [pc, #48]	; (800095c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x60>)
 800092a:	f00c f8d6 	bl	800cada <HAL_GPIO_TogglePin>
#endif
        break;
 800092e:	e011      	b.n	8000954 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x58>
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8000930:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000934:	4809      	ldr	r0, [pc, #36]	; (800095c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x60>)
 8000936:	f00c f8d0 	bl	800cada <HAL_GPIO_TogglePin>
#endif
        break;
 800093a:	e00b      	b.n	8000954 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x58>
    case GPIO::FRAME_RATE:
#if defined(FRAME_RATE_GPIO_Port) && defined(FRAME_RATE_Pin)
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 800093c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000940:	4807      	ldr	r0, [pc, #28]	; (8000960 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x64>)
 8000942:	f00c f8ca 	bl	800cada <HAL_GPIO_TogglePin>
#endif
        break;
 8000946:	e005      	b.n	8000954 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x58>
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8000948:	f44f 7100 	mov.w	r1, #512	; 0x200
 800094c:	4803      	ldr	r0, [pc, #12]	; (800095c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x60>)
 800094e:	f00c f8c4 	bl	800cada <HAL_GPIO_TogglePin>
#endif
        break;
 8000952:	bf00      	nop
    }
}
 8000954:	bf00      	nop
 8000956:	3708      	adds	r7, #8
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	58021c00 	.word	0x58021c00
 8000960:	58022000 	.word	0x58022000

08000964 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>:

/*
 * Gets the state of a pin.
 */
bool GPIO::get(GPIO_ID id)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b084      	sub	sp, #16
 8000968:	af00      	add	r7, sp, #0
 800096a:	4603      	mov	r3, r0
 800096c:	71fb      	strb	r3, [r7, #7]
    GPIO_PinState bitstatus = GPIO_PIN_RESET;
 800096e:	2300      	movs	r3, #0
 8000970:	73fb      	strb	r3, [r7, #15]
    switch (id)
 8000972:	79fb      	ldrb	r3, [r7, #7]
 8000974:	2b03      	cmp	r3, #3
 8000976:	d82b      	bhi.n	80009d0 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x6c>
 8000978:	a201      	add	r2, pc, #4	; (adr r2, 8000980 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x1c>)
 800097a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800097e:	bf00      	nop
 8000980:	08000991 	.word	0x08000991
 8000984:	080009a1 	.word	0x080009a1
 8000988:	080009b1 	.word	0x080009b1
 800098c:	080009c1 	.word	0x080009c1
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        bitstatus = HAL_GPIO_ReadPin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8000990:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000994:	4813      	ldr	r0, [pc, #76]	; (80009e4 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x80>)
 8000996:	f00c f86f 	bl	800ca78 <HAL_GPIO_ReadPin>
 800099a:	4603      	mov	r3, r0
 800099c:	73fb      	strb	r3, [r7, #15]
#endif
        break;
 800099e:	e017      	b.n	80009d0 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x6c>
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 80009a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009a4:	480f      	ldr	r0, [pc, #60]	; (80009e4 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x80>)
 80009a6:	f00c f867 	bl	800ca78 <HAL_GPIO_ReadPin>
 80009aa:	4603      	mov	r3, r0
 80009ac:	73fb      	strb	r3, [r7, #15]
#endif
        break;
 80009ae:	e00f      	b.n	80009d0 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x6c>
    case GPIO::FRAME_RATE:
#if defined(FRAME_RATE_GPIO_Port) && defined(FRAME_RATE_Pin)
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 80009b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009b4:	480c      	ldr	r0, [pc, #48]	; (80009e8 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x84>)
 80009b6:	f00c f85f 	bl	800ca78 <HAL_GPIO_ReadPin>
 80009ba:	4603      	mov	r3, r0
 80009bc:	73fb      	strb	r3, [r7, #15]
#endif
        break;
 80009be:	e007      	b.n	80009d0 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x6c>
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 80009c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009c4:	4807      	ldr	r0, [pc, #28]	; (80009e4 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x80>)
 80009c6:	f00c f857 	bl	800ca78 <HAL_GPIO_ReadPin>
 80009ca:	4603      	mov	r3, r0
 80009cc:	73fb      	strb	r3, [r7, #15]
#endif
        break;
 80009ce:	bf00      	nop
    }
    return (bitstatus == GPIO_PIN_SET);
 80009d0:	7bfb      	ldrb	r3, [r7, #15]
 80009d2:	2b01      	cmp	r3, #1
 80009d4:	bf0c      	ite	eq
 80009d6:	2301      	moveq	r3, #1
 80009d8:	2300      	movne	r3, #0
 80009da:	b2db      	uxtb	r3, r3
}
 80009dc:	4618      	mov	r0, r3
 80009de:	3710      	adds	r7, #16
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	58021c00 	.word	0x58021c00
 80009e8:	58022000 	.word	0x58022000

080009ec <_ZN8touchgfx3HALD1Ev>:
        DISPLAY_ROTATION = rotate0;
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
    }

    /** Finalizes an instance of the HAL class. */
    virtual ~HAL()
 80009ec:	b480      	push	{r7}
 80009ee:	b083      	sub	sp, #12
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
    {
 80009f4:	4a04      	ldr	r2, [pc, #16]	; (8000a08 <_ZN8touchgfx3HALD1Ev+0x1c>)
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	601a      	str	r2, [r3, #0]
    }
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	4618      	mov	r0, r3
 80009fe:	370c      	adds	r7, #12
 8000a00:	46bd      	mov	sp, r7
 8000a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a06:	4770      	bx	lr
 8000a08:	0802aa10 	.word	0x0802aa10

08000a0c <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
    }
 8000a14:	6878      	ldr	r0, [r7, #4]
 8000a16:	f7ff ffe9 	bl	80009ec <_ZN8touchgfx3HALD1Ev>
 8000a1a:	217c      	movs	r1, #124	; 0x7c
 8000a1c:	6878      	ldr	r0, [r7, #4]
 8000a1e:	f025 fc6e 	bl	80262fe <_ZdlPvj>
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	4618      	mov	r0, r3
 8000a26:	3708      	adds	r7, #8
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}

08000a2c <_ZN8touchgfx3HAL11getInstanceEv>:
    /**
     * Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
    {
        return instance;
 8000a30:	4b03      	ldr	r3, [pc, #12]	; (8000a40 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 8000a32:	681b      	ldr	r3, [r3, #0]
    }
 8000a34:	4618      	mov	r0, r3
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	2402617c 	.word	0x2402617c

08000a44 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     *
     * @param  orientation The desired display orientation.
     *
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 8000a44:	b480      	push	{r7}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
 8000a4c:	460b      	mov	r3, r1
 8000a4e:	70fb      	strb	r3, [r7, #3]
    {
        requestedOrientation = orientation;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	78fa      	ldrb	r2, [r7, #3]
 8000a54:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 8000a60:	bf00      	nop
 8000a62:	370c      	adds	r7, #12
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr

08000a6c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
     * @param   width   The width of the framebuffer.
     * @param   height  The height of the framebuffer.
     *
     * @see touchgfx_generic_init
     */
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
 8000a74:	460b      	mov	r3, r1
 8000a76:	807b      	strh	r3, [r7, #2]
 8000a78:	4613      	mov	r3, r2
 8000a7a:	803b      	strh	r3, [r7, #0]
    {
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8000a7c:	4b0c      	ldr	r3, [pc, #48]	; (8000ab0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x44>)
 8000a7e:	881b      	ldrh	r3, [r3, #0]
 8000a80:	887a      	ldrh	r2, [r7, #2]
 8000a82:	429a      	cmp	r2, r3
 8000a84:	d304      	bcc.n	8000a90 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x24>
 8000a86:	4b0b      	ldr	r3, [pc, #44]	; (8000ab4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x48>)
 8000a88:	881b      	ldrh	r3, [r3, #0]
 8000a8a:	883a      	ldrh	r2, [r7, #0]
 8000a8c:	429a      	cmp	r2, r3
 8000a8e:	d205      	bcs.n	8000a9c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>
 8000a90:	4b09      	ldr	r3, [pc, #36]	; (8000ab8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x4c>)
 8000a92:	4a0a      	ldr	r2, [pc, #40]	; (8000abc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x50>)
 8000a94:	219e      	movs	r1, #158	; 0x9e
 8000a96:	480a      	ldr	r0, [pc, #40]	; (8000ac0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x54>)
 8000a98:	f025 fc60 	bl	802635c <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8000a9c:	4a09      	ldr	r2, [pc, #36]	; (8000ac4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x58>)
 8000a9e:	887b      	ldrh	r3, [r7, #2]
 8000aa0:	8013      	strh	r3, [r2, #0]
        FRAME_BUFFER_HEIGHT = height;
 8000aa2:	4a09      	ldr	r2, [pc, #36]	; (8000ac8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x5c>)
 8000aa4:	883b      	ldrh	r3, [r7, #0]
 8000aa6:	8013      	strh	r3, [r2, #0]
    }
 8000aa8:	bf00      	nop
 8000aaa:	3708      	adds	r7, #8
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	24026170 	.word	0x24026170
 8000ab4:	24026172 	.word	0x24026172
 8000ab8:	080274fc 	.word	0x080274fc
 8000abc:	08027560 	.word	0x08027560
 8000ac0:	080275a4 	.word	0x080275a4
 8000ac4:	24026176 	.word	0x24026176
 8000ac8:	24026178 	.word	0x24026178

08000acc <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
    {
        if (useDMAAcceleration)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d009      	beq.n	8000af2 <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
        {
            return dma.getBlitCaps();
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	685a      	ldr	r2, [r3, #4]
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	685b      	ldr	r3, [r3, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4610      	mov	r0, r2
 8000aec:	4798      	blx	r3
 8000aee:	4603      	mov	r3, r0
 8000af0:	e000      	b.n	8000af4 <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        }
        return static_cast<BlitOperations>(0);
 8000af2:	2300      	movs	r3, #0
    }
 8000af4:	4618      	mov	r0, r3
 8000af6:	3708      	adds	r7, #8
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}

08000afc <_ZN8touchgfx3HAL15backPorchExitedEv>:
    /**
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     */
    virtual void backPorchExited()
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 8000b04:	6878      	ldr	r0, [r7, #4]
 8000b06:	f019 f88d 	bl	8019c24 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	33ac      	adds	r3, #172	; 0xac
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	6878      	ldr	r0, [r7, #4]
 8000b14:	4798      	blx	r3
    }
 8000b16:	bf00      	nop
 8000b18:	3708      	adds	r7, #8
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}

08000b1e <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 8000b1e:	b480      	push	{r7}
 8000b20:	b083      	sub	sp, #12
 8000b22:	af00      	add	r7, sp, #0
 8000b24:	6078      	str	r0, [r7, #4]
 8000b26:	6039      	str	r1, [r7, #0]
    {
        (void)key; // Unused variable
        return false;
 8000b28:	2300      	movs	r3, #0
    }
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	370c      	adds	r7, #12
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
	...

08000b38 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     *
     * @see setAnimationStorage
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b084      	sub	sp, #16
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	60f8      	str	r0, [r7, #12]
 8000b40:	60b9      	str	r1, [r7, #8]
 8000b42:	607a      	str	r2, [r7, #4]
 8000b44:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8000b46:	68bb      	ldr	r3, [r7, #8]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d106      	bne.n	8000b5a <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 8000b4c:	4b0f      	ldr	r3, [pc, #60]	; (8000b8c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x54>)
 8000b4e:	4a10      	ldr	r2, [pc, #64]	; (8000b90 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x58>)
 8000b50:	f240 21d2 	movw	r1, #722	; 0x2d2
 8000b54:	480f      	ldr	r0, [pc, #60]	; (8000b94 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 8000b56:	f025 fc01 	bl	802635c <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	68ba      	ldr	r2, [r7, #8]
 8000b5e:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	687a      	ldr	r2, [r7, #4]
 8000b64:	641a      	str	r2, [r3, #64]	; 0x40
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	bf14      	ite	ne
 8000b6c:	2301      	movne	r3, #1
 8000b6e:	2300      	moveq	r3, #0
 8000b70:	b2da      	uxtb	r2, r3
 8000b72:	4b09      	ldr	r3, [pc, #36]	; (8000b98 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 8000b74:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	338c      	adds	r3, #140	; 0x8c
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	6839      	ldr	r1, [r7, #0]
 8000b80:	68f8      	ldr	r0, [r7, #12]
 8000b82:	4798      	blx	r3
    }
 8000b84:	bf00      	nop
 8000b86:	3710      	adds	r7, #16
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	080275ec 	.word	0x080275ec
 8000b90:	08027624 	.word	0x08027624
 8000b94:	080275a4 	.word	0x080275a4
 8000b98:	2402617a 	.word	0x2402617a

08000b9c <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
 8000ba4:	6039      	str	r1, [r7, #0]
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	683a      	ldr	r2, [r7, #0]
 8000baa:	645a      	str	r2, [r3, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	bf14      	ite	ne
 8000bb2:	2301      	movne	r3, #1
 8000bb4:	2300      	moveq	r3, #0
 8000bb6:	b2da      	uxtb	r2, r3
 8000bb8:	4b03      	ldr	r3, [pc, #12]	; (8000bc8 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x2c>)
 8000bba:	701a      	strb	r2, [r3, #0]
    }
 8000bbc:	bf00      	nop
 8000bbe:	370c      	adds	r7, #12
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr
 8000bc8:	2402617b 	.word	0x2402617b

08000bcc <_ZN8touchgfx3HAL21setMCUInstrumentationEPNS_18MCUInstrumentationE>:
    /**
     * Stores a pointer to an instance of an MCU specific instrumentation class.
     *
     * @param [in] mcuInstr pointer to MCU instrumentation.
     */
    void setMCUInstrumentation(MCUInstrumentation* mcuInstr)
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
 8000bd4:	6039      	str	r1, [r7, #0]
    {
        mcuInstrumentation = mcuInstr;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	683a      	ldr	r2, [r7, #0]
 8000bda:	611a      	str	r2, [r3, #16]
    }
 8000bdc:	bf00      	nop
 8000bde:	370c      	adds	r7, #12
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr

08000be8 <_ZN8touchgfx3HAL24enableMCULoadCalculationEb>:
     * This method sets a flag that determines if generic HAL should calculate MCU load
     * based on concrete MCU instrumentation.
     *
     * @param  enabled If true, set flag to update MCU load.
     */
    void enableMCULoadCalculation(bool enabled)
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
 8000bf0:	460b      	mov	r3, r1
 8000bf2:	70fb      	strb	r3, [r7, #3]
    {
        updateMCULoad = enabled;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	78fa      	ldrb	r2, [r7, #3]
 8000bf8:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
    }
 8000bfc:	bf00      	nop
 8000bfe:	370c      	adds	r7, #12
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr

08000c08 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * Gets the flash data reader. This method must be implemented in
     * subclasses that uses a FlashDataReader object.
     *
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8000c10:	2300      	movs	r3, #0
    }
 8000c12:	4618      	mov	r0, r3
 8000c14:	370c      	adds	r7, #12
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr

08000c1e <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 8000c1e:	b580      	push	{r7, lr}
 8000c20:	b082      	sub	sp, #8
 8000c22:	af00      	add	r7, sp, #0
 8000c24:	6078      	str	r0, [r7, #4]
 8000c26:	460b      	mov	r3, r1
 8000c28:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d004      	beq.n	8000c3c <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c36:	887a      	ldrh	r2, [r7, #2]
 8000c38:	4610      	mov	r0, r2
 8000c3a:	4798      	blx	r3
        }
    }
 8000c3c:	bf00      	nop
 8000c3e:	3708      	adds	r7, #8
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}

08000c44 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     * getTFTCurrentLine function is never called and can be disregarded.
     *
     * @return In this default implementation, 0xFFFF is returned to signify "not
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
    {
        return 0xFFFFu;
 8000c4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    }
 8000c50:	4618      	mov	r0, r3
 8000c52:	370c      	adds	r7, #12
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr

08000c5c <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	685a      	ldr	r2, [r3, #4]
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	3318      	adds	r3, #24
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4610      	mov	r0, r2
 8000c74:	4798      	blx	r3
 8000c76:	4603      	mov	r3, r0
    }
 8000c78:	4618      	mov	r0, r3
 8000c7a:	3708      	adds	r7, #8
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}

08000c80 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 8000c80:	b480      	push	{r7}
 8000c82:	b085      	sub	sp, #20
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000c94:	429a      	cmp	r2, r3
 8000c96:	d011      	beq.n	8000cbc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>
        {
            if (DISPLAY_ROTATION == rotate0)
 8000c98:	4b14      	ldr	r3, [pc, #80]	; (8000cec <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d11e      	bne.n	8000cde <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 8000ca0:	4b13      	ldr	r3, [pc, #76]	; (8000cf0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8000ca2:	881b      	ldrh	r3, [r3, #0]
 8000ca4:	81bb      	strh	r3, [r7, #12]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8000ca6:	4b13      	ldr	r3, [pc, #76]	; (8000cf4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8000ca8:	881a      	ldrh	r2, [r3, #0]
 8000caa:	4b11      	ldr	r3, [pc, #68]	; (8000cf0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8000cac:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = tmp;
 8000cae:	4a11      	ldr	r2, [pc, #68]	; (8000cf4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8000cb0:	89bb      	ldrh	r3, [r7, #12]
 8000cb2:	8013      	strh	r3, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 8000cb4:	4b0d      	ldr	r3, [pc, #52]	; (8000cec <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	701a      	strb	r2, [r3, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
        }
    }
 8000cba:	e010      	b.n	8000cde <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
        else if (DISPLAY_ROTATION != rotate0)
 8000cbc:	4b0b      	ldr	r3, [pc, #44]	; (8000cec <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d00c      	beq.n	8000cde <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            const uint16_t tmp = DISPLAY_HEIGHT;
 8000cc4:	4b0a      	ldr	r3, [pc, #40]	; (8000cf0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8000cc6:	881b      	ldrh	r3, [r3, #0]
 8000cc8:	81fb      	strh	r3, [r7, #14]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8000cca:	4b0a      	ldr	r3, [pc, #40]	; (8000cf4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8000ccc:	881a      	ldrh	r2, [r3, #0]
 8000cce:	4b08      	ldr	r3, [pc, #32]	; (8000cf0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8000cd0:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = tmp;
 8000cd2:	4a08      	ldr	r2, [pc, #32]	; (8000cf4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8000cd4:	89fb      	ldrh	r3, [r7, #14]
 8000cd6:	8013      	strh	r3, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 8000cd8:	4b04      	ldr	r3, [pc, #16]	; (8000cec <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	701a      	strb	r2, [r3, #0]
    }
 8000cde:	bf00      	nop
 8000ce0:	3714      	adds	r7, #20
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	24026174 	.word	0x24026174
 8000cf0:	24026172 	.word	0x24026172
 8000cf4:	24026170 	.word	0x24026170

08000cf8 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	4618      	mov	r0, r3
 8000d04:	f018 f9f2 	bl	80190ec <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 8000d08:	bf00      	nop
 8000d0a:	3708      	adds	r7, #8
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	4a05      	ldr	r2, [pc, #20]	; (8000d30 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	601a      	str	r2, [r3, #0]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	4618      	mov	r0, r3
 8000d22:	f7ff fe63 	bl	80009ec <_ZN8touchgfx3HALD1Ev>
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	4618      	mov	r0, r3
 8000d2a:	3708      	adds	r7, #8
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	08029c90 	.word	0x08029c90

08000d34 <_ZN20TouchGFXGeneratedHALD0Ev>:
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
 8000d3c:	6878      	ldr	r0, [r7, #4]
 8000d3e:	f7ff ffe7 	bl	8000d10 <_ZN20TouchGFXGeneratedHALD1Ev>
 8000d42:	217c      	movs	r1, #124	; 0x7c
 8000d44:	6878      	ldr	r0, [r7, #4]
 8000d46:	f025 fada 	bl	80262fe <_ZdlPvj>
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	3708      	adds	r7, #8
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f7ff ffca 	bl	8000cf8 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 8000d64:	bf00      	nop
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <_ZN11TouchGFXHAL10initializeEv>:


using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	4618      	mov	r0, r3
 8000d78:	f003 f9fa 	bl	8004170 <_ZN20TouchGFXGeneratedHAL10initializeEv>
    instrumentation.init();
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	337c      	adds	r3, #124	; 0x7c
 8000d80:	4618      	mov	r0, r3
 8000d82:	f7ff fbb1 	bl	80004e8 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>
    setMCUInstrumentation(&instrumentation);
 8000d86:	687a      	ldr	r2, [r7, #4]
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	337c      	adds	r3, #124	; 0x7c
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	4610      	mov	r0, r2
 8000d90:	f7ff ff1c 	bl	8000bcc <_ZN8touchgfx3HAL21setMCUInstrumentationEPNS_18MCUInstrumentationE>
    enableMCULoadCalculation(true);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	2101      	movs	r1, #1
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff ff25 	bl	8000be8 <_ZN8touchgfx3HAL24enableMCULoadCalculationEb>
}
 8000d9e:	bf00      	nop
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
	...

08000da8 <_ZN11TouchGFXHAL9taskEntryEv>:

void TouchGFXHAL::taskEntry()
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
    enableLCDControllerInterrupt();
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	3380      	adds	r3, #128	; 0x80
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	6878      	ldr	r0, [r7, #4]
 8000dba:	4798      	blx	r3
    enableInterrupts();
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	3378      	adds	r3, #120	; 0x78
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	6878      	ldr	r0, [r7, #4]
 8000dc6:	4798      	blx	r3

    OSWrappers::waitForVSync();
 8000dc8:	f001 fadc 	bl	8002384 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
 8000dcc:	687a      	ldr	r2, [r7, #4]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	3370      	adds	r3, #112	; 0x70
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4610      	mov	r0, r2
 8000dd8:	4798      	blx	r3

    // Turning on display after first frame is rendered
    HAL_GPIO_WritePin(GPIOK, GPIO_PIN_7, GPIO_PIN_RESET);
 8000dda:	2200      	movs	r2, #0
 8000ddc:	2180      	movs	r1, #128	; 0x80
 8000dde:	480b      	ldr	r0, [pc, #44]	; (8000e0c <_ZN11TouchGFXHAL9taskEntryEv+0x64>)
 8000de0:	f00b fe62 	bl	800caa8 <HAL_GPIO_WritePin>
    /* Assert display enable LCD_DISP_CTRL pin */
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8000de4:	2201      	movs	r2, #1
 8000de6:	2104      	movs	r1, #4
 8000de8:	4809      	ldr	r0, [pc, #36]	; (8000e10 <_ZN11TouchGFXHAL9taskEntryEv+0x68>)
 8000dea:	f00b fe5d 	bl	800caa8 <HAL_GPIO_WritePin>
    /* Assert back light LCD_BL_CTRL pin */
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000dee:	2201      	movs	r2, #1
 8000df0:	2102      	movs	r1, #2
 8000df2:	4807      	ldr	r0, [pc, #28]	; (8000e10 <_ZN11TouchGFXHAL9taskEntryEv+0x68>)
 8000df4:	f00b fe58 	bl	800caa8 <HAL_GPIO_WritePin>

    for (;;)
    {
        OSWrappers::waitForVSync();
 8000df8:	f001 fac4 	bl	8002384 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
 8000dfc:	687a      	ldr	r2, [r7, #4]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	3370      	adds	r3, #112	; 0x70
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4610      	mov	r0, r2
 8000e08:	4798      	blx	r3
        OSWrappers::waitForVSync();
 8000e0a:	e7f5      	b.n	8000df8 <_ZN11TouchGFXHAL9taskEntryEv+0x50>
 8000e0c:	58022800 	.word	0x58022800
 8000e10:	58020000 	.word	0x58020000

08000e14 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f003 fa66 	bl	80042f0 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 8000e24:	4603      	mov	r3, r0
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3708      	adds	r7, #8
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}

08000e2e <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	b082      	sub	sp, #8
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	6078      	str	r0, [r7, #4]
 8000e36:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	6839      	ldr	r1, [r7, #0]
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f003 fa65 	bl	800430c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 8000e42:	bf00      	nop
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
	...

08000e4c <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b086      	sub	sp, #24
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
 8000e54:	6039      	str	r1, [r7, #0]
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6839      	ldr	r1, [r7, #0]
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f003 fa6c 	bl	8004338 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000e60:	4b20      	ldr	r3, [pc, #128]	; (8000ee4 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x98>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000e68:	f3bf 8f4f 	dsb	sy
}
 8000e6c:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000e6e:	4b1d      	ldr	r3, [pc, #116]	; (8000ee4 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x98>)
 8000e70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000e74:	617b      	str	r3, [r7, #20]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	0b5b      	lsrs	r3, r3, #13
 8000e7a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000e7e:	613b      	str	r3, [r7, #16]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	08db      	lsrs	r3, r3, #3
 8000e84:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000e88:	60fb      	str	r3, [r7, #12]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8000e8a:	693b      	ldr	r3, [r7, #16]
 8000e8c:	015a      	lsls	r2, r3, #5
 8000e8e:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000e92:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8000e94:	68fa      	ldr	r2, [r7, #12]
 8000e96:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8000e98:	4912      	ldr	r1, [pc, #72]	; (8000ee4 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x98>)
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	1e5a      	subs	r2, r3, #1
 8000ea4:	60fa      	str	r2, [r7, #12]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	bf14      	ite	ne
 8000eaa:	2301      	movne	r3, #1
 8000eac:	2300      	moveq	r3, #0
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d000      	beq.n	8000eb6 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x6a>
      do {
 8000eb4:	e7e9      	b.n	8000e8a <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x3e>
    } while(sets-- != 0U);
 8000eb6:	693b      	ldr	r3, [r7, #16]
 8000eb8:	1e5a      	subs	r2, r3, #1
 8000eba:	613a      	str	r2, [r7, #16]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	bf14      	ite	ne
 8000ec0:	2301      	movne	r3, #1
 8000ec2:	2300      	moveq	r3, #0
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d000      	beq.n	8000ecc <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x80>
    do {
 8000eca:	e7d9      	b.n	8000e80 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x34>
  __ASM volatile ("dsb 0xF":::"memory");
 8000ecc:	f3bf 8f4f 	dsb	sy
}
 8000ed0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000ed2:	f3bf 8f6f 	isb	sy
}
 8000ed6:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000ed8:	bf00      	nop
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache to make sure framebuffer is correct in RAM. That's done
    // using SCB_CleanInvalidateDCache().

    SCB_CleanInvalidateDCache();
}
 8000eda:	bf00      	nop
 8000edc:	3718      	adds	r7, #24
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	e000ed00 	.word	0xe000ed00

08000ee8 <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f003 f978 	bl	80041e8 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 8000ef8:	bf00      	nop
 8000efa:	3708      	adds	r7, #8
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f003 f97c 	bl	8004208 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 8000f10:	bf00      	nop
 8000f12:	3708      	adds	r7, #8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	4618      	mov	r0, r3
 8000f24:	f003 f97e 	bl	8004224 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 8000f28:	bf00      	nop
 8000f2a:	3708      	adds	r7, #8
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f003 f980 	bl	8004240 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 8000f40:	bf00      	nop
 8000f42:	3708      	adds	r7, #8
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <IdleTaskHook>:

/* USER CODE BEGIN extern C functions */
extern "C"
{
    portBASE_TYPE IdleTaskHook(void* p)
    {
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
        if ((int)p) //idle task sched out
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d007      	beq.n	8000f66 <IdleTaskHook+0x1e>
        {
            touchgfx::HAL::getInstance()->setMCUActive(true);
 8000f56:	f7ff fd69 	bl	8000a2c <_ZN8touchgfx3HAL11getInstanceEv>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2101      	movs	r1, #1
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f018 fe7a 	bl	8019c58 <_ZN8touchgfx3HAL12setMCUActiveEb>
 8000f64:	e006      	b.n	8000f74 <IdleTaskHook+0x2c>
        }
        else //idle task sched in
        {
            touchgfx::HAL::getInstance()->setMCUActive(false);
 8000f66:	f7ff fd61 	bl	8000a2c <_ZN8touchgfx3HAL11getInstanceEv>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f018 fe72 	bl	8019c58 <_ZN8touchgfx3HAL12setMCUActiveEb>
        }
        return pdTRUE;
 8000f74:	2301      	movs	r3, #1
    }
 8000f76:	4618      	mov	r0, r3
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
	...

08000f80 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	4a08      	ldr	r2, [pc, #32]	; (8000fac <_ZN11TouchGFXHALD1Ev+0x2c>)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	601a      	str	r2, [r3, #0]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	337c      	adds	r3, #124	; 0x7c
 8000f92:	4618      	mov	r0, r3
 8000f94:	f7ff fb18 	bl	80005c8 <_ZN8touchgfx25CortexMMCUInstrumentationD1Ev>
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f7ff feb8 	bl	8000d10 <_ZN20TouchGFXGeneratedHALD1Ev>
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	080297b8 	.word	0x080297b8

08000fb0 <_ZN11TouchGFXHALD0Ev>:
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	6878      	ldr	r0, [r7, #4]
 8000fba:	f7ff ffe1 	bl	8000f80 <_ZN11TouchGFXHALD1Ev>
 8000fbe:	2188      	movs	r1, #136	; 0x88
 8000fc0:	6878      	ldr	r0, [r7, #4]
 8000fc2:	f025 f99c 	bl	80262fe <_ZdlPvj>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <_ZN12MJPEGDecoderD1Ev>:
#include <touchgfx/hal/VideoController.hpp>

class MJPEGDecoder
{
public:
    virtual ~MJPEGDecoder()
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
    {
 8000fd8:	4a04      	ldr	r2, [pc, #16]	; (8000fec <_ZN12MJPEGDecoderD1Ev+0x1c>)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	601a      	str	r2, [r3, #0]
    }
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr
 8000fec:	080298d4 	.word	0x080298d4

08000ff0 <_ZN12MJPEGDecoderD0Ev>:
    virtual ~MJPEGDecoder()
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
    }
 8000ff8:	6878      	ldr	r0, [r7, #4]
 8000ffa:	f7ff ffe9 	bl	8000fd0 <_ZN12MJPEGDecoderD1Ev>
 8000ffe:	2104      	movs	r1, #4
 8001000:	6878      	ldr	r0, [r7, #4]
 8001002:	f025 f97c 	bl	80262fe <_ZdlPvj>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4618      	mov	r0, r3
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}

08001010 <_ZNK20HardwareMJPEGDecoder21getCurrentFrameNumberEv>:
    virtual bool gotoNextFrame();
    //Decode part of the current frame
    virtual bool decodeFrame(const touchgfx::Rect& area, uint8_t* frameBuffer, uint32_t framebuffer_width);
    virtual bool decodeThumbnail(uint32_t frameno, uint8_t* buffer, uint16_t width, uint16_t height);
    virtual void gotoFrame(uint32_t frameno);
    virtual uint32_t getCurrentFrameNumber() const
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
    {
        return frameNumber;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	695b      	ldr	r3, [r3, #20]
    }
 800101c:	4618      	mov	r0, r3
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr

08001028 <_ZN20HardwareMJPEGDecoder12getLastErrorEv>:
    void setAVIFileBuffer(uint8_t* buffer, uint32_t size)
    {
        aviBuffer = buffer, aviBufferLength = size;
    }

    virtual AVIErrors getLastError()
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
    {
        return lastError;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
    }
 8001036:	4618      	mov	r0, r3
 8001038:	370c      	adds	r7, #12
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
	...

08001044 <_ZN12MJPEGDecoderC1Ev>:
class MJPEGDecoder
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	4a04      	ldr	r2, [pc, #16]	; (8001060 <_ZN12MJPEGDecoderC1Ev+0x1c>)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	601a      	str	r2, [r3, #0]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4618      	mov	r0, r3
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr
 8001060:	080298d4 	.word	0x080298d4

08001064 <_ZN20HardwareMJPEGDecoderC1Ev>:
    uint32_t LastLineHeight;
    uint32_t MCU_pr_line;
    uint32_t bytes_pr_pixel;
} JPEG_ConvertorParams;

HardwareMJPEGDecoder::HardwareMJPEGDecoder()
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
    : frameNumber(0), currentMovieOffset(0), indexOffset(0), firstFrameOffset(0), lastFrameEnd(0), movieLength(0), movieData(0),
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	4618      	mov	r0, r3
 8001070:	f7ff ffe8 	bl	8001044 <_ZN12MJPEGDecoderC1Ev>
 8001074:	4a21      	ldr	r2, [pc, #132]	; (80010fc <_ZN20HardwareMJPEGDecoderC1Ev+0x98>)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	601a      	str	r2, [r3, #0]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2200      	movs	r2, #0
 800107e:	615a      	str	r2, [r3, #20]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2200      	movs	r2, #0
 8001084:	619a      	str	r2, [r3, #24]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2200      	movs	r2, #0
 800108a:	61da      	str	r2, [r3, #28]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2200      	movs	r2, #0
 8001090:	621a      	str	r2, [r3, #32]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2200      	movs	r2, #0
 8001096:	625a      	str	r2, [r3, #36]	; 0x24
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2200      	movs	r2, #0
 800109c:	629a      	str	r2, [r3, #40]	; 0x28
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2200      	movs	r2, #0
 80010a2:	62da      	str	r2, [r3, #44]	; 0x2c
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2200      	movs	r2, #0
 80010a8:	631a      	str	r2, [r3, #48]	; 0x30
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2200      	movs	r2, #0
 80010ae:	635a      	str	r2, [r3, #52]	; 0x34
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2200      	movs	r2, #0
 80010b4:	639a      	str	r2, [r3, #56]	; 0x38
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2200      	movs	r2, #0
 80010ba:	63da      	str	r2, [r3, #60]	; 0x3c
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2200      	movs	r2, #0
 80010c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
{
    //Clear video info
    videoInfo.frame_height = 0;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2200      	movs	r2, #0
 80010c8:	611a      	str	r2, [r3, #16]
    videoInfo.frame_width = 0;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2200      	movs	r2, #0
 80010ce:	60da      	str	r2, [r3, #12]
    videoInfo.ms_between_frames = 0;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2200      	movs	r2, #0
 80010d4:	605a      	str	r2, [r3, #4]
    videoInfo.number_of_frames = 0;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2200      	movs	r2, #0
 80010da:	609a      	str	r2, [r3, #8]

    //Init color tables
    TGFX_JPEG_InitColorTables();
 80010dc:	f004 fd0e 	bl	8005afc <TGFX_JPEG_InitColorTables>

    //Create decoding semaphore
    semDecodingDone = SEM_CREATE();
 80010e0:	2200      	movs	r2, #0
 80010e2:	2100      	movs	r1, #0
 80010e4:	2001      	movs	r0, #1
 80010e6:	f013 fc2e 	bl	8014946 <osSemaphoreNew>
 80010ea:	4603      	mov	r3, r0
 80010ec:	4a04      	ldr	r2, [pc, #16]	; (8001100 <_ZN20HardwareMJPEGDecoderC1Ev+0x9c>)
 80010ee:	6013      	str	r3, [r2, #0]
}
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	4618      	mov	r0, r3
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	08029890 	.word	0x08029890
 8001100:	24005b8c 	.word	0x24005b8c

08001104 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>:

int HardwareMJPEGDecoder::compare(const uint32_t offset, const char* str, uint32_t num)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b086      	sub	sp, #24
 8001108:	af00      	add	r7, sp, #0
 800110a:	60f8      	str	r0, [r7, #12]
 800110c:	60b9      	str	r1, [r7, #8]
 800110e:	607a      	str	r2, [r7, #4]
 8001110:	603b      	str	r3, [r7, #0]
    const char* src;
    if (reader != 0)
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	2b00      	cmp	r3, #0
 8001118:	d008      	beq.n	800112c <_ZN20HardwareMJPEGDecoder7compareEmPKcm+0x28>
    {
        // Assuming data is in buffer!
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001122:	68b9      	ldr	r1, [r7, #8]
 8001124:	1acb      	subs	r3, r1, r3
 8001126:	4413      	add	r3, r2
 8001128:	617b      	str	r3, [r7, #20]
 800112a:	e004      	b.n	8001136 <_ZN20HardwareMJPEGDecoder7compareEmPKcm+0x32>
    }
    else
    {
        src = (const char*)movieData + offset;
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	4413      	add	r3, r2
 8001134:	617b      	str	r3, [r7, #20]
    }
    return strncmp(src, str, num);
 8001136:	683a      	ldr	r2, [r7, #0]
 8001138:	6879      	ldr	r1, [r7, #4]
 800113a:	6978      	ldr	r0, [r7, #20]
 800113c:	f025 fdc8 	bl	8026cd0 <strncmp>
 8001140:	4603      	mov	r3, r0
}
 8001142:	4618      	mov	r0, r3
 8001144:	3718      	adds	r7, #24
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}

0800114a <_ZN20HardwareMJPEGDecoder6getU32Em>:

inline uint32_t HardwareMJPEGDecoder::getU32(const uint32_t offset)
{
 800114a:	b480      	push	{r7}
 800114c:	b085      	sub	sp, #20
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
 8001152:	6039      	str	r1, [r7, #0]
    if (reader != 0)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001158:	2b00      	cmp	r3, #0
 800115a:	d024      	beq.n	80011a6 <_ZN20HardwareMJPEGDecoder6getU32Em+0x5c>
    {
        // Assuming data is in buffer!
        const uint32_t index = offset - aviBufferStartOffset;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001160:	683a      	ldr	r2, [r7, #0]
 8001162:	1ad3      	subs	r3, r2, r3
 8001164:	60bb      	str	r3, [r7, #8]
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	4413      	add	r3, r2
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	4619      	mov	r1, r3
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	3301      	adds	r3, #1
 800117a:	4413      	add	r3, r2
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	021b      	lsls	r3, r3, #8
 8001180:	ea41 0203 	orr.w	r2, r1, r3
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	3302      	adds	r3, #2
 800118c:	440b      	add	r3, r1
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	041b      	lsls	r3, r3, #16
 8001192:	431a      	orrs	r2, r3
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	3303      	adds	r3, #3
 800119c:	440b      	add	r3, r1
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	061b      	lsls	r3, r3, #24
 80011a2:	4313      	orrs	r3, r2
 80011a4:	e016      	b.n	80011d4 <_ZN20HardwareMJPEGDecoder6getU32Em+0x8a>
    }
    else
    {
        const uint8_t* const d = movieData + offset;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	4413      	add	r3, r2
 80011ae:	60fb      	str	r3, [r7, #12]
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	461a      	mov	r2, r3
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	3301      	adds	r3, #1
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	021b      	lsls	r3, r3, #8
 80011be:	431a      	orrs	r2, r3
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	3302      	adds	r3, #2
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	041b      	lsls	r3, r3, #16
 80011c8:	431a      	orrs	r2, r3
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	3303      	adds	r3, #3
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	061b      	lsls	r3, r3, #24
 80011d2:	4313      	orrs	r3, r2
    }
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	3714      	adds	r7, #20
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr

080011e0 <_ZN20HardwareMJPEGDecoder6getU16Em>:

inline uint32_t HardwareMJPEGDecoder::getU16(const uint32_t offset)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b085      	sub	sp, #20
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	6039      	str	r1, [r7, #0]
    if (reader != 0)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d013      	beq.n	800121a <_ZN20HardwareMJPEGDecoder6getU16Em+0x3a>
    {
        // Assuming data is in buffer!
        const uint32_t index = offset - aviBufferStartOffset;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011f6:	683a      	ldr	r2, [r7, #0]
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	60bb      	str	r3, [r7, #8]
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	4413      	add	r3, r2
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	4619      	mov	r1, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	3301      	adds	r3, #1
 8001210:	4413      	add	r3, r2
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	021b      	lsls	r3, r3, #8
 8001216:	430b      	orrs	r3, r1
 8001218:	e00c      	b.n	8001234 <_ZN20HardwareMJPEGDecoder6getU16Em+0x54>
    }
    else
    {
        const uint8_t* const d = movieData + offset;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	4413      	add	r3, r2
 8001222:	60fb      	str	r3, [r7, #12]
        return d[0] | (d[1] << 8);
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	461a      	mov	r2, r3
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	3301      	adds	r3, #1
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	021b      	lsls	r3, r3, #8
 8001232:	4313      	orrs	r3, r2
    }
}
 8001234:	4618      	mov	r0, r3
 8001236:	3714      	adds	r7, #20
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr

08001240 <_ZN20HardwareMJPEGDecoder8readDataEmm>:

const uint8_t* HardwareMJPEGDecoder::readData(uint32_t offset, uint32_t length)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	60f8      	str	r0, [r7, #12]
 8001248:	60b9      	str	r1, [r7, #8]
 800124a:	607a      	str	r2, [r7, #4]
    if (reader != 0)
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001250:	2b00      	cmp	r3, #0
 8001252:	d033      	beq.n	80012bc <_ZN20HardwareMJPEGDecoder8readDataEmm+0x7c>
    {
        if (length > aviBufferLength)
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001258:	687a      	ldr	r2, [r7, #4]
 800125a:	429a      	cmp	r2, r3
 800125c:	d909      	bls.n	8001272 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x32>
        {
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	2209      	movs	r2, #9
 8001262:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            assert(!"Buffer to small");
 8001266:	4b19      	ldr	r3, [pc, #100]	; (80012cc <_ZN20HardwareMJPEGDecoder8readDataEmm+0x8c>)
 8001268:	4a19      	ldr	r2, [pc, #100]	; (80012d0 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x90>)
 800126a:	21a7      	movs	r1, #167	; 0xa7
 800126c:	4819      	ldr	r0, [pc, #100]	; (80012d4 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x94>)
 800126e:	f025 f875 	bl	802635c <__assert_func>
        }

        reader->seek(offset);
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	330c      	adds	r3, #12
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	68b9      	ldr	r1, [r7, #8]
 8001282:	4610      	mov	r0, r2
 8001284:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	3310      	adds	r3, #16
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	68fa      	ldr	r2, [r7, #12]
 8001296:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8001298:	687a      	ldr	r2, [r7, #4]
 800129a:	4798      	blx	r3
 800129c:	4603      	mov	r3, r0
 800129e:	f083 0301 	eor.w	r3, r3, #1
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d003      	beq.n	80012b0 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x70>
        {
            lastError = AVI_ERROR_EOF_REACHED;
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	220d      	movs	r2, #13
 80012ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        }

        aviBufferStartOffset = offset;
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	68ba      	ldr	r2, [r7, #8]
 80012b4:	63da      	str	r2, [r3, #60]	; 0x3c
        return aviBuffer;
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012ba:	e003      	b.n	80012c4 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x84>
    }

    return movieData + offset;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	4413      	add	r3, r2
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3710      	adds	r7, #16
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	08027674 	.word	0x08027674
 80012d0:	08027688 	.word	0x08027688
 80012d4:	080276cc 	.word	0x080276cc

080012d8 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm>:

bool HardwareMJPEGDecoder::decodeNextFrame(uint8_t* buffer, uint16_t buffer_width, uint16_t buffer_height, uint32_t buffer_stride)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b08e      	sub	sp, #56	; 0x38
 80012dc:	af04      	add	r7, sp, #16
 80012de:	60f8      	str	r0, [r7, #12]
 80012e0:	60b9      	str	r1, [r7, #8]
 80012e2:	4611      	mov	r1, r2
 80012e4:	461a      	mov	r2, r3
 80012e6:	460b      	mov	r3, r1
 80012e8:	80fb      	strh	r3, [r7, #6]
 80012ea:	4613      	mov	r3, r2
 80012ec:	80bb      	strh	r3, [r7, #4]
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	695b      	ldr	r3, [r3, #20]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d105      	bne.n	8001302 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x2a>
 80012f6:	4b4e      	ldr	r3, [pc, #312]	; (8001430 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x158>)
 80012f8:	4a4e      	ldr	r2, [pc, #312]	; (8001434 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x15c>)
 80012fa:	21b9      	movs	r1, #185	; 0xb9
 80012fc:	484e      	ldr	r0, [pc, #312]	; (8001438 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x160>)
 80012fe:	f025 f82d 	bl	802635c <__assert_func>

    //find next frame and decode it
    readData(currentMovieOffset, 8);
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	699b      	ldr	r3, [r3, #24]
 8001306:	2208      	movs	r2, #8
 8001308:	4619      	mov	r1, r3
 800130a:	68f8      	ldr	r0, [r7, #12]
 800130c:	f7ff ff98 	bl	8001240 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    uint32_t streamNo  = getU16(currentMovieOffset);
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	699b      	ldr	r3, [r3, #24]
 8001314:	4619      	mov	r1, r3
 8001316:	68f8      	ldr	r0, [r7, #12]
 8001318:	f7ff ff62 	bl	80011e0 <_ZN20HardwareMJPEGDecoder6getU16Em>
 800131c:	6238      	str	r0, [r7, #32]
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	699b      	ldr	r3, [r3, #24]
 8001322:	3302      	adds	r3, #2
 8001324:	4619      	mov	r1, r3
 8001326:	68f8      	ldr	r0, [r7, #12]
 8001328:	f7ff ff5a 	bl	80011e0 <_ZN20HardwareMJPEGDecoder6getU16Em>
 800132c:	61f8      	str	r0, [r7, #28]
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	699b      	ldr	r3, [r3, #24]
 8001332:	3304      	adds	r3, #4
 8001334:	4619      	mov	r1, r3
 8001336:	68f8      	ldr	r0, [r7, #12]
 8001338:	f7ff ff07 	bl	800114a <_ZN20HardwareMJPEGDecoder6getU32Em>
 800133c:	61b8      	str	r0, [r7, #24]

    const uint16_t STREAM0 = 0x3030;
 800133e:	f243 0330 	movw	r3, #12336	; 0x3030
 8001342:	82fb      	strh	r3, [r7, #22]
    const uint16_t TYPEDC  = 0x6364;
 8001344:	f246 3364 	movw	r3, #25444	; 0x6364
 8001348:	82bb      	strh	r3, [r7, #20]

    bool isCurrentFrameLast;
    //play frame if we have it all
    if (currentMovieOffset + 8 + chunkSize < movieLength)
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	699a      	ldr	r2, [r3, #24]
 800134e:	69bb      	ldr	r3, [r7, #24]
 8001350:	4413      	add	r3, r2
 8001352:	f103 0208 	add.w	r2, r3, #8
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800135a:	429a      	cmp	r2, r3
 800135c:	d255      	bcs.n	800140a <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x132>
    {
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 800135e:	6a3b      	ldr	r3, [r7, #32]
 8001360:	f243 0230 	movw	r2, #12336	; 0x3030
 8001364:	4293      	cmp	r3, r2
 8001366:	d126      	bne.n	80013b6 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xde>
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	f246 3264 	movw	r2, #25444	; 0x6364
 800136e:	4293      	cmp	r3, r2
 8001370:	d121      	bne.n	80013b6 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xde>
 8001372:	69bb      	ldr	r3, [r7, #24]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d01e      	beq.n	80013b6 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xde>
        {
            currentMovieOffset += 8;
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	699b      	ldr	r3, [r3, #24]
 800137c:	f103 0208 	add.w	r2, r3, #8
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	619a      	str	r2, [r3, #24]
            //decode frame
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	699b      	ldr	r3, [r3, #24]
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	4619      	mov	r1, r3
 800138c:	68f8      	ldr	r0, [r7, #12]
 800138e:	f7ff ff57 	bl	8001240 <_ZN20HardwareMJPEGDecoder8readDataEmm>
 8001392:	6138      	str	r0, [r7, #16]
            decodeMJPEGFrame(chunk, chunkSize, buffer, buffer_width, buffer_height, buffer_stride);
 8001394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001396:	9302      	str	r3, [sp, #8]
 8001398:	88bb      	ldrh	r3, [r7, #4]
 800139a:	9301      	str	r3, [sp, #4]
 800139c:	88fb      	ldrh	r3, [r7, #6]
 800139e:	9300      	str	r3, [sp, #0]
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	69ba      	ldr	r2, [r7, #24]
 80013a4:	6939      	ldr	r1, [r7, #16]
 80013a6:	68f8      	ldr	r0, [r7, #12]
 80013a8:	f000 fa8e 	bl	80018c8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>
            frameNumber++;
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	695b      	ldr	r3, [r3, #20]
 80013b0:	1c5a      	adds	r2, r3, #1
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	615a      	str	r2, [r3, #20]
        }

        isCurrentFrameLast = false;
 80013b6:	2300      	movs	r3, #0
 80013b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        // Advance to next frame
        currentMovieOffset += chunkSize;
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	699a      	ldr	r2, [r3, #24]
 80013c0:	69bb      	ldr	r3, [r7, #24]
 80013c2:	441a      	add	r2, r3
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	619a      	str	r2, [r3, #24]
        if (chunkSize == 0) // Empty frame - Skip
 80013c8:	69bb      	ldr	r3, [r7, #24]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d105      	bne.n	80013da <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x102>
        {
            currentMovieOffset += 8;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	699b      	ldr	r3, [r3, #24]
 80013d2:	f103 0208 	add.w	r2, r3, #8
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	619a      	str	r2, [r3, #24]
        }
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	699b      	ldr	r3, [r3, #24]
 80013de:	3301      	adds	r3, #1
 80013e0:	f023 0201 	bic.w	r2, r3, #1
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	619a      	str	r2, [r3, #24]

        if (currentMovieOffset == lastFrameEnd)
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	699a      	ldr	r2, [r3, #24]
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d114      	bne.n	800141e <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x146>
        {
            frameNumber = 1;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	2201      	movs	r2, #1
 80013f8:	615a      	str	r2, [r3, #20]
            currentMovieOffset = firstFrameOffset; //start over
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	6a1a      	ldr	r2, [r3, #32]
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	619a      	str	r2, [r3, #24]
            isCurrentFrameLast = true;
 8001402:	2301      	movs	r3, #1
 8001404:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001408:	e009      	b.n	800141e <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x146>
        }
    }
    else
    {
        frameNumber = 1;
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	2201      	movs	r2, #1
 800140e:	615a      	str	r2, [r3, #20]
        currentMovieOffset = firstFrameOffset; //start over
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	6a1a      	ldr	r2, [r3, #32]
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	619a      	str	r2, [r3, #24]
        isCurrentFrameLast = true;
 8001418:	2301      	movs	r3, #1
 800141a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    return !isCurrentFrameLast;
 800141e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001422:	f083 0301 	eor.w	r3, r3, #1
 8001426:	b2db      	uxtb	r3, r3
}
 8001428:	4618      	mov	r0, r3
 800142a:	3728      	adds	r7, #40	; 0x28
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	08027744 	.word	0x08027744
 8001434:	08027790 	.word	0x08027790
 8001438:	080276cc 	.word	0x080276cc

0800143c <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv>:

bool HardwareMJPEGDecoder::gotoNextFrame()
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b086      	sub	sp, #24
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	695b      	ldr	r3, [r3, #20]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d105      	bne.n	8001458 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x1c>
 800144c:	4b37      	ldr	r3, [pc, #220]	; (800152c <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0xf0>)
 800144e:	4a38      	ldr	r2, [pc, #224]	; (8001530 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0xf4>)
 8001450:	21ed      	movs	r1, #237	; 0xed
 8001452:	4838      	ldr	r0, [pc, #224]	; (8001534 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0xf8>)
 8001454:	f024 ff82 	bl	802635c <__assert_func>

    readData(currentMovieOffset, 8);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	699b      	ldr	r3, [r3, #24]
 800145c:	2208      	movs	r2, #8
 800145e:	4619      	mov	r1, r3
 8001460:	6878      	ldr	r0, [r7, #4]
 8001462:	f7ff feed 	bl	8001240 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	699b      	ldr	r3, [r3, #24]
 800146a:	3304      	adds	r3, #4
 800146c:	4619      	mov	r1, r3
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f7ff fe6b 	bl	800114a <_ZN20HardwareMJPEGDecoder6getU32Em>
 8001474:	6178      	str	r0, [r7, #20]

    //increment until next video frame
    while (currentMovieOffset + 8 + chunkSize < movieLength)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	699a      	ldr	r2, [r3, #24]
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	4413      	add	r3, r2
 800147e:	f103 0208 	add.w	r2, r3, #8
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001486:	429a      	cmp	r2, r3
 8001488:	d243      	bcs.n	8001512 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0xd6>
    {
        //increment one frame
        currentMovieOffset += chunkSize + 8;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	699a      	ldr	r2, [r3, #24]
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	4413      	add	r3, r2
 8001492:	f103 0208 	add.w	r2, r3, #8
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	619a      	str	r2, [r3, #24]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	699b      	ldr	r3, [r3, #24]
 800149e:	3301      	adds	r3, #1
 80014a0:	f023 0201 	bic.w	r2, r3, #1
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	619a      	str	r2, [r3, #24]
        frameNumber++;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	695b      	ldr	r3, [r3, #20]
 80014ac:	1c5a      	adds	r2, r3, #1
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	615a      	str	r2, [r3, #20]

        //next chunk
        readData(currentMovieOffset, 8);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	699b      	ldr	r3, [r3, #24]
 80014b6:	2208      	movs	r2, #8
 80014b8:	4619      	mov	r1, r3
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f7ff fec0 	bl	8001240 <_ZN20HardwareMJPEGDecoder8readDataEmm>
        //check it is a video frame
        uint32_t streamNo  = getU16(currentMovieOffset);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	699b      	ldr	r3, [r3, #24]
 80014c4:	4619      	mov	r1, r3
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	f7ff fe8a 	bl	80011e0 <_ZN20HardwareMJPEGDecoder6getU16Em>
 80014cc:	6138      	str	r0, [r7, #16]
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	699b      	ldr	r3, [r3, #24]
 80014d2:	3302      	adds	r3, #2
 80014d4:	4619      	mov	r1, r3
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	f7ff fe82 	bl	80011e0 <_ZN20HardwareMJPEGDecoder6getU16Em>
 80014dc:	60f8      	str	r0, [r7, #12]
        chunkSize = getU32(currentMovieOffset + 4);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	699b      	ldr	r3, [r3, #24]
 80014e2:	3304      	adds	r3, #4
 80014e4:	4619      	mov	r1, r3
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	f7ff fe2f 	bl	800114a <_ZN20HardwareMJPEGDecoder6getU32Em>
 80014ec:	6178      	str	r0, [r7, #20]
        const uint16_t STREAM0 = 0x3030;
 80014ee:	f243 0330 	movw	r3, #12336	; 0x3030
 80014f2:	817b      	strh	r3, [r7, #10]
        const uint16_t TYPEDC  = 0x6364;
 80014f4:	f246 3364 	movw	r3, #25444	; 0x6364
 80014f8:	813b      	strh	r3, [r7, #8]

        if (streamNo == STREAM0 && chunkType == TYPEDC)
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	f243 0230 	movw	r2, #12336	; 0x3030
 8001500:	4293      	cmp	r3, r2
 8001502:	d1b8      	bne.n	8001476 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x3a>
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	f246 3264 	movw	r2, #25444	; 0x6364
 800150a:	4293      	cmp	r3, r2
 800150c:	d1b3      	bne.n	8001476 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x3a>
        {
            // Found next frame
            return true;
 800150e:	2301      	movs	r3, #1
 8001510:	e007      	b.n	8001522 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0xe6>
        }
    }

    //skip back to first frame
    frameNumber = 1;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2201      	movs	r2, #1
 8001516:	615a      	str	r2, [r3, #20]
    currentMovieOffset = firstFrameOffset; //start over
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6a1a      	ldr	r2, [r3, #32]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	619a      	str	r2, [r3, #24]
    return false;
 8001520:	2300      	movs	r3, #0
}
 8001522:	4618      	mov	r0, r3
 8001524:	3718      	adds	r7, #24
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	08027744 	.word	0x08027744
 8001530:	080277ec 	.word	0x080277ec
 8001534:	080276cc 	.word	0x080276cc

08001538 <_ZN20HardwareMJPEGDecoder12setVideoDataEPKhm>:

void HardwareMJPEGDecoder::setVideoData(const uint8_t* movie, const uint32_t length)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	60f8      	str	r0, [r7, #12]
 8001540:	60b9      	str	r1, [r7, #8]
 8001542:	607a      	str	r2, [r7, #4]
    movieData = movie;
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	68ba      	ldr	r2, [r7, #8]
 8001548:	62da      	str	r2, [r3, #44]	; 0x2c
    movieLength = length;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	687a      	ldr	r2, [r7, #4]
 800154e:	629a      	str	r2, [r3, #40]	; 0x28
    reader = 0; //not using reader
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	2200      	movs	r2, #0
 8001554:	631a      	str	r2, [r3, #48]	; 0x30

    readVideoHeader();
 8001556:	68f8      	ldr	r0, [r7, #12]
 8001558:	f000 f834 	bl	80015c4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>
}
 800155c:	bf00      	nop
 800155e:	3710      	adds	r7, #16
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}

08001564 <_ZN20HardwareMJPEGDecoder12setVideoDataERN8touchgfx15VideoDataReaderE>:

void HardwareMJPEGDecoder::setVideoData(touchgfx::VideoDataReader& reader)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	6039      	str	r1, [r7, #0]
    this->reader = &reader;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	683a      	ldr	r2, [r7, #0]
 8001572:	631a      	str	r2, [r3, #48]	; 0x30
    movieData = 0;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2200      	movs	r2, #0
 8001578:	62da      	str	r2, [r3, #44]	; 0x2c
    movieLength = reader.getDataLength();
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	3308      	adds	r3, #8
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	6838      	ldr	r0, [r7, #0]
 8001584:	4798      	blx	r3
 8001586:	4602      	mov	r2, r0
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	629a      	str	r2, [r3, #40]	; 0x28

    readVideoHeader();
 800158c:	6878      	ldr	r0, [r7, #4]
 800158e:	f000 f819 	bl	80015c4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>
}
 8001592:	bf00      	nop
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}

0800159a <_ZN20HardwareMJPEGDecoder8hasVideoEv>:

bool HardwareMJPEGDecoder::hasVideo()
{
 800159a:	b480      	push	{r7}
 800159c:	b083      	sub	sp, #12
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]
    return (reader != 0) || (movieData != 0);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d103      	bne.n	80015b2 <_ZN20HardwareMJPEGDecoder8hasVideoEv+0x18>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <_ZN20HardwareMJPEGDecoder8hasVideoEv+0x1c>
 80015b2:	2301      	movs	r3, #1
 80015b4:	e000      	b.n	80015b8 <_ZN20HardwareMJPEGDecoder8hasVideoEv+0x1e>
 80015b6:	2300      	movs	r3, #0
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr

080015c4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>:

void HardwareMJPEGDecoder::readVideoHeader()
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b08a      	sub	sp, #40	; 0x28
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
    // Start from the start
    currentMovieOffset = 0;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2200      	movs	r2, #0
 80015d0:	619a      	str	r2, [r3, #24]
    lastError = AVI_NO_ERROR;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2200      	movs	r2, #0
 80015d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    // Make header available in buffer
    readData(0, 72);
 80015da:	2248      	movs	r2, #72	; 0x48
 80015dc:	2100      	movs	r1, #0
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	f7ff fe2e 	bl	8001240 <_ZN20HardwareMJPEGDecoder8readDataEmm>

    // Decode the movie header to find first frame
    // Must be RIFF file
    if (compare(currentMovieOffset, "RIFF", 4))
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6999      	ldr	r1, [r3, #24]
 80015e8:	2304      	movs	r3, #4
 80015ea:	4aa5      	ldr	r2, [pc, #660]	; (8001880 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2bc>)
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	f7ff fd89 	bl	8001104 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	bf14      	ite	ne
 80015f8:	2301      	movne	r3, #1
 80015fa:	2300      	moveq	r3, #0
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d00a      	beq.n	8001618 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x54>
    {
        lastError = AVI_ERROR_NOT_RIFF;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2203      	movs	r2, #3
 8001606:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        assert(!"RIFF header not found");
 800160a:	4b9e      	ldr	r3, [pc, #632]	; (8001884 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c0>)
 800160c:	4a9e      	ldr	r2, [pc, #632]	; (8001888 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c4>)
 800160e:	f240 1135 	movw	r1, #309	; 0x135
 8001612:	489e      	ldr	r0, [pc, #632]	; (800188c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c8>)
 8001614:	f024 fea2 	bl	802635c <__assert_func>
    }

    //skip fourcc and length
    currentMovieOffset += 8;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	699b      	ldr	r3, [r3, #24]
 800161c:	f103 0208 	add.w	r2, r3, #8
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	619a      	str	r2, [r3, #24]
    if (compare(currentMovieOffset, "AVI ", 4))
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6999      	ldr	r1, [r3, #24]
 8001628:	2304      	movs	r3, #4
 800162a:	4a99      	ldr	r2, [pc, #612]	; (8001890 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2cc>)
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	f7ff fd69 	bl	8001104 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	bf14      	ite	ne
 8001638:	2301      	movne	r3, #1
 800163a:	2300      	moveq	r3, #0
 800163c:	b2db      	uxtb	r3, r3
 800163e:	2b00      	cmp	r3, #0
 8001640:	d00a      	beq.n	8001658 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x94>
    {
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2204      	movs	r2, #4
 8001646:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        assert(!"AVI header not found");
 800164a:	4b92      	ldr	r3, [pc, #584]	; (8001894 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2d0>)
 800164c:	4a8e      	ldr	r2, [pc, #568]	; (8001888 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c4>)
 800164e:	f240 113d 	movw	r1, #317	; 0x13d
 8001652:	488e      	ldr	r0, [pc, #568]	; (800188c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c8>)
 8001654:	f024 fe82 	bl	802635c <__assert_func>
    }

    currentMovieOffset += 4;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	699b      	ldr	r3, [r3, #24]
 800165c:	1d1a      	adds	r2, r3, #4
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	619a      	str	r2, [r3, #24]
    if (compare(currentMovieOffset, "LIST", 4))
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6999      	ldr	r1, [r3, #24]
 8001666:	2304      	movs	r3, #4
 8001668:	4a8b      	ldr	r2, [pc, #556]	; (8001898 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2d4>)
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f7ff fd4a 	bl	8001104 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	bf14      	ite	ne
 8001676:	2301      	movne	r3, #1
 8001678:	2300      	moveq	r3, #0
 800167a:	b2db      	uxtb	r3, r3
 800167c:	2b00      	cmp	r3, #0
 800167e:	d00a      	beq.n	8001696 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xd2>
    {
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2205      	movs	r2, #5
 8001684:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        assert(!"AVI LIST not found");
 8001688:	4b84      	ldr	r3, [pc, #528]	; (800189c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2d8>)
 800168a:	4a7f      	ldr	r2, [pc, #508]	; (8001888 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c4>)
 800168c:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8001690:	487e      	ldr	r0, [pc, #504]	; (800188c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c8>)
 8001692:	f024 fe63 	bl	802635c <__assert_func>
    }

    //save AVI List info
    const uint32_t aviListSize = getU32(currentMovieOffset + 4);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	699b      	ldr	r3, [r3, #24]
 800169a:	3304      	adds	r3, #4
 800169c:	4619      	mov	r1, r3
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f7ff fd53 	bl	800114a <_ZN20HardwareMJPEGDecoder6getU32Em>
 80016a4:	61f8      	str	r0, [r7, #28]
    const uint32_t aviListOffset = currentMovieOffset;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	699b      	ldr	r3, [r3, #24]
 80016aa:	61bb      	str	r3, [r7, #24]
    assert(aviListSize);
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d106      	bne.n	80016c0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xfc>
 80016b2:	4b7b      	ldr	r3, [pc, #492]	; (80018a0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2dc>)
 80016b4:	4a74      	ldr	r2, [pc, #464]	; (8001888 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c4>)
 80016b6:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 80016ba:	4874      	ldr	r0, [pc, #464]	; (800188c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c8>)
 80016bc:	f024 fe4e 	bl	802635c <__assert_func>

    //look into header to find frame rate
    bool foundFrame = true;
 80016c0:	2301      	movs	r3, #1
 80016c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint32_t offset =  currentMovieOffset + 8;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	699b      	ldr	r3, [r3, #24]
 80016ca:	3308      	adds	r3, #8
 80016cc:	617b      	str	r3, [r7, #20]
    if (compare(offset, "hdrl", 4))
 80016ce:	2304      	movs	r3, #4
 80016d0:	4a74      	ldr	r2, [pc, #464]	; (80018a4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2e0>)
 80016d2:	6979      	ldr	r1, [r7, #20]
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f7ff fd15 	bl	8001104 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	bf14      	ite	ne
 80016e0:	2301      	movne	r3, #1
 80016e2:	2300      	moveq	r3, #0
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d006      	beq.n	80016f8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x134>
    {
        lastError = AVI_ERROR_AVI_HDRL_NOT_FOUND;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2206      	movs	r2, #6
 80016ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        foundFrame = false;
 80016f2:	2300      	movs	r3, #0
 80016f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    offset += 4;
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	3304      	adds	r3, #4
 80016fc:	617b      	str	r3, [r7, #20]
    if (compare(offset, "avih", 4))
 80016fe:	2304      	movs	r3, #4
 8001700:	4a69      	ldr	r2, [pc, #420]	; (80018a8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2e4>)
 8001702:	6979      	ldr	r1, [r7, #20]
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f7ff fcfd 	bl	8001104 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	bf14      	ite	ne
 8001710:	2301      	movne	r3, #1
 8001712:	2300      	moveq	r3, #0
 8001714:	b2db      	uxtb	r3, r3
 8001716:	2b00      	cmp	r3, #0
 8001718:	d006      	beq.n	8001728 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x164>
    {
        lastError = AVI_ERROR_AVI_AVIH_NOT_FOUND;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2207      	movs	r2, #7
 800171e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        foundFrame = false;
 8001722:	2300      	movs	r3, #0
 8001724:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if (foundFrame)
 8001728:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800172c:	2b00      	cmp	r3, #0
 800172e:	d028      	beq.n	8001782 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1be>
    {
        offset += 8; //skip fourcc and cb in AVIMAINHEADER
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	3308      	adds	r3, #8
 8001734:	617b      	str	r3, [r7, #20]
        videoInfo.ms_between_frames = getU32(offset) / 1000;
 8001736:	6979      	ldr	r1, [r7, #20]
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f7ff fd06 	bl	800114a <_ZN20HardwareMJPEGDecoder6getU32Em>
 800173e:	4603      	mov	r3, r0
 8001740:	4a5a      	ldr	r2, [pc, #360]	; (80018ac <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2e8>)
 8001742:	fba2 2303 	umull	r2, r3, r2, r3
 8001746:	099a      	lsrs	r2, r3, #6
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	605a      	str	r2, [r3, #4]
        videoInfo.number_of_frames = getU32(offset + 16);
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	3310      	adds	r3, #16
 8001750:	4619      	mov	r1, r3
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f7ff fcf9 	bl	800114a <_ZN20HardwareMJPEGDecoder6getU32Em>
 8001758:	4602      	mov	r2, r0
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	609a      	str	r2, [r3, #8]
        videoInfo.frame_width = getU32(offset + 32);
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	3320      	adds	r3, #32
 8001762:	4619      	mov	r1, r3
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	f7ff fcf0 	bl	800114a <_ZN20HardwareMJPEGDecoder6getU32Em>
 800176a:	4602      	mov	r2, r0
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	60da      	str	r2, [r3, #12]
        videoInfo.frame_height = getU32(offset + 36);
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	3324      	adds	r3, #36	; 0x24
 8001774:	4619      	mov	r1, r3
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f7ff fce7 	bl	800114a <_ZN20HardwareMJPEGDecoder6getU32Em>
 800177c:	4602      	mov	r2, r0
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	611a      	str	r2, [r3, #16]
    }
    //skip rest of AVI header, start from end of AVI List

    //look for list with 'movi' header
    uint32_t listOffset = aviListOffset + aviListSize + 8;
 8001782:	69ba      	ldr	r2, [r7, #24]
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	4413      	add	r3, r2
 8001788:	3308      	adds	r3, #8
 800178a:	623b      	str	r3, [r7, #32]
    readData(listOffset, 12);
 800178c:	220c      	movs	r2, #12
 800178e:	6a39      	ldr	r1, [r7, #32]
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f7ff fd55 	bl	8001240 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 8001796:	6a3b      	ldr	r3, [r7, #32]
 8001798:	f103 0108 	add.w	r1, r3, #8
 800179c:	2304      	movs	r3, #4
 800179e:	4a44      	ldr	r2, [pc, #272]	; (80018b0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2ec>)
 80017a0:	6878      	ldr	r0, [r7, #4]
 80017a2:	f7ff fcaf 	bl	8001104 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d00b      	beq.n	80017c4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x200>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d106      	bne.n	80017c4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x200>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ba:	6a3a      	ldr	r2, [r7, #32]
 80017bc:	429a      	cmp	r2, r3
 80017be:	d201      	bcs.n	80017c4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x200>
 80017c0:	2301      	movs	r3, #1
 80017c2:	e000      	b.n	80017c6 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x202>
 80017c4:	2300      	movs	r3, #0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d012      	beq.n	80017f0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x22c>
    {
        const uint32_t listSize = getU32(listOffset + 4) + 8;
 80017ca:	6a3b      	ldr	r3, [r7, #32]
 80017cc:	3304      	adds	r3, #4
 80017ce:	4619      	mov	r1, r3
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f7ff fcba 	bl	800114a <_ZN20HardwareMJPEGDecoder6getU32Em>
 80017d6:	4603      	mov	r3, r0
 80017d8:	3308      	adds	r3, #8
 80017da:	60fb      	str	r3, [r7, #12]
        listOffset += listSize;
 80017dc:	6a3a      	ldr	r2, [r7, #32]
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	4413      	add	r3, r2
 80017e2:	623b      	str	r3, [r7, #32]
        readData(listOffset, 12);
 80017e4:	220c      	movs	r2, #12
 80017e6:	6a39      	ldr	r1, [r7, #32]
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	f7ff fd29 	bl	8001240 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 80017ee:	e7d2      	b.n	8001796 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d2>
    }

    if (lastError != AVI_NO_ERROR)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d004      	beq.n	8001804 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x240>
    {
        lastError = AVI_ERROR_MOVI_NOT_FOUND;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	220a      	movs	r2, #10
 80017fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return;
 8001802:	e05e      	b.n	80018c2 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2fe>
    }

    //save first frame and end of last frame
    currentMovieOffset = listOffset + 8 + 4; //skip LIST and 'movi'
 8001804:	6a3b      	ldr	r3, [r7, #32]
 8001806:	f103 020c 	add.w	r2, r3, #12
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	619a      	str	r2, [r3, #24]
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 800180e:	6a3b      	ldr	r3, [r7, #32]
 8001810:	3304      	adds	r3, #4
 8001812:	4619      	mov	r1, r3
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f7ff fc98 	bl	800114a <_ZN20HardwareMJPEGDecoder6getU32Em>
 800181a:	4602      	mov	r2, r0
 800181c:	6a3b      	ldr	r3, [r7, #32]
 800181e:	4413      	add	r3, r2
 8001820:	f103 0208 	add.w	r2, r3, #8
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	625a      	str	r2, [r3, #36]	; 0x24

    //find idx
    const uint32_t listSize = getU32(listOffset + 4) + 8;
 8001828:	6a3b      	ldr	r3, [r7, #32]
 800182a:	3304      	adds	r3, #4
 800182c:	4619      	mov	r1, r3
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f7ff fc8b 	bl	800114a <_ZN20HardwareMJPEGDecoder6getU32Em>
 8001834:	4603      	mov	r3, r0
 8001836:	3308      	adds	r3, #8
 8001838:	613b      	str	r3, [r7, #16]
    listOffset += listSize;
 800183a:	6a3a      	ldr	r2, [r7, #32]
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	4413      	add	r3, r2
 8001840:	623b      	str	r3, [r7, #32]
    readData(listOffset, 4);
 8001842:	2204      	movs	r2, #4
 8001844:	6a39      	ldr	r1, [r7, #32]
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f7ff fcfa 	bl	8001240 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    if (!compare(listOffset, "idx1", 4))
 800184c:	2304      	movs	r3, #4
 800184e:	4a19      	ldr	r2, [pc, #100]	; (80018b4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2f0>)
 8001850:	6a39      	ldr	r1, [r7, #32]
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f7ff fc56 	bl	8001104 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	bf0c      	ite	eq
 800185e:	2301      	moveq	r3, #1
 8001860:	2300      	movne	r3, #0
 8001862:	b2db      	uxtb	r3, r3
 8001864:	2b00      	cmp	r3, #0
 8001866:	d027      	beq.n	80018b8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2f4>
    {
        indexOffset = listOffset;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6a3a      	ldr	r2, [r7, #32]
 800186c:	61da      	str	r2, [r3, #28]
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
        return;
    }

    //start on first frame
    frameNumber = 1; //next frame number is 1
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2201      	movs	r2, #1
 8001872:	615a      	str	r2, [r3, #20]
    firstFrameOffset = currentMovieOffset;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	699a      	ldr	r2, [r3, #24]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	621a      	str	r2, [r3, #32]
 800187c:	e021      	b.n	80018c2 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2fe>
 800187e:	bf00      	nop
 8001880:	08027820 	.word	0x08027820
 8001884:	08027828 	.word	0x08027828
 8001888:	08027844 	.word	0x08027844
 800188c:	080276cc 	.word	0x080276cc
 8001890:	08027874 	.word	0x08027874
 8001894:	0802787c 	.word	0x0802787c
 8001898:	08027894 	.word	0x08027894
 800189c:	0802789c 	.word	0x0802789c
 80018a0:	080278b4 	.word	0x080278b4
 80018a4:	080278c0 	.word	0x080278c0
 80018a8:	080278c8 	.word	0x080278c8
 80018ac:	10624dd3 	.word	0x10624dd3
 80018b0:	080278d0 	.word	0x080278d0
 80018b4:	080278d8 	.word	0x080278d8
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	220b      	movs	r2, #11
 80018bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return;
 80018c0:	bf00      	nop
}
 80018c2:	3728      	adds	r7, #40	; 0x28
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>:

void HardwareMJPEGDecoder::decodeMJPEGFrame(const uint8_t* const mjpgdata, const uint32_t length, uint8_t* outputBuffer, uint16_t bufferWidth, uint16_t bufferHeight, uint32_t bufferStride)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	60f8      	str	r0, [r7, #12]
 80018d0:	60b9      	str	r1, [r7, #8]
 80018d2:	607a      	str	r2, [r7, #4]
 80018d4:	603b      	str	r3, [r7, #0]
    if (length == 0)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d05f      	beq.n	800199c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xd4>
    {
        return;
    }

    if (outputBuffer) //only decode if buffers are assigned.
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d05d      	beq.n	800199e <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xd6>
    {
        // Update JPEG conversion parameters
        JPEG_ConvertorParams.bytes_pr_pixel = 3;
 80018e2:	4b30      	ldr	r3, [pc, #192]	; (80019a4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xdc>)
 80018e4:	2203      	movs	r2, #3
 80018e6:	611a      	str	r2, [r3, #16]
        JPEG_ConvertorParams.WidthExtend = videoInfo.frame_width;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	4a2d      	ldr	r2, [pc, #180]	; (80019a4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xdc>)
 80018ee:	6013      	str	r3, [r2, #0]
        if ((JPEG_ConvertorParams.WidthExtend % 16) != 0)
 80018f0:	4b2c      	ldr	r3, [pc, #176]	; (80019a4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xdc>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 030f 	and.w	r3, r3, #15
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d006      	beq.n	800190a <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x42>
        {
            JPEG_ConvertorParams.WidthExtend += 16 - (JPEG_ConvertorParams.WidthExtend % 16);
 80018fc:	4b29      	ldr	r3, [pc, #164]	; (80019a4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xdc>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f023 030f 	bic.w	r3, r3, #15
 8001904:	3310      	adds	r3, #16
 8001906:	4a27      	ldr	r2, [pc, #156]	; (80019a4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xdc>)
 8001908:	6013      	str	r3, [r2, #0]
        }
        JPEG_ConvertorParams.ScaledWidth = 480 * JPEG_ConvertorParams.bytes_pr_pixel;
 800190a:	4b26      	ldr	r3, [pc, #152]	; (80019a4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xdc>)
 800190c:	691a      	ldr	r2, [r3, #16]
 800190e:	4613      	mov	r3, r2
 8001910:	011b      	lsls	r3, r3, #4
 8001912:	1a9b      	subs	r3, r3, r2
 8001914:	015b      	lsls	r3, r3, #5
 8001916:	461a      	mov	r2, r3
 8001918:	4b22      	ldr	r3, [pc, #136]	; (80019a4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xdc>)
 800191a:	605a      	str	r2, [r3, #4]
        JPEG_ConvertorParams.MCU_pr_line = JPEG_ConvertorParams.WidthExtend / MCU_WIDTH_PIXELS;
 800191c:	4b21      	ldr	r3, [pc, #132]	; (80019a4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xdc>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	091b      	lsrs	r3, r3, #4
 8001922:	4a20      	ldr	r2, [pc, #128]	; (80019a4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xdc>)
 8001924:	60d3      	str	r3, [r2, #12]
        JPEG_ConvertorParams.LastLineHeight = 16 - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	691b      	ldr	r3, [r3, #16]
 800192a:	f003 030f 	and.w	r3, r3, #15
 800192e:	f1c3 0310 	rsb	r3, r3, #16
 8001932:	4a1c      	ldr	r2, [pc, #112]	; (80019a4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xdc>)
 8001934:	6093      	str	r3, [r2, #8]

        JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, outputBuffer);
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	687a      	ldr	r2, [r7, #4]
 800193a:	68b9      	ldr	r1, [r7, #8]
 800193c:	481a      	ldr	r0, [pc, #104]	; (80019a8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xe0>)
 800193e:	f000 f901 	bl	8001b44 <JPEG_Decode_DMA>
        do
        {
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg, *pDma);
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001946:	4619      	mov	r1, r3
 8001948:	4817      	ldr	r0, [pc, #92]	; (80019a8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xe0>)
 800194a:	f000 fab5 	bl	8001eb8 <JPEG_OutputHandler>
 800194e:	4603      	mov	r3, r0
 8001950:	4a16      	ldr	r2, [pc, #88]	; (80019ac <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xe4>)
 8001952:	6013      	str	r3, [r2, #0]

            //If nothing to do, allow other tasks
            if (JpegProcessing_End == 2)
 8001954:	4b15      	ldr	r3, [pc, #84]	; (80019ac <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xe4>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2b02      	cmp	r3, #2
 800195a:	bf0c      	ite	eq
 800195c:	2301      	moveq	r3, #1
 800195e:	2300      	movne	r3, #0
 8001960:	b2db      	uxtb	r3, r3
 8001962:	2b00      	cmp	r3, #0
 8001964:	d006      	beq.n	8001974 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xac>
            {
                SEM_WAIT(semDecodingDone);
 8001966:	4b12      	ldr	r3, [pc, #72]	; (80019b0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xe8>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f04f 31ff 	mov.w	r1, #4294967295
 800196e:	4618      	mov	r0, r3
 8001970:	f013 f872 	bl	8014a58 <osSemaphoreAcquire>
            }
        } while (JpegProcessing_End != 1);
 8001974:	4b0d      	ldr	r3, [pc, #52]	; (80019ac <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xe4>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	2b01      	cmp	r3, #1
 800197a:	bf14      	ite	ne
 800197c:	2301      	movne	r3, #1
 800197e:	2300      	moveq	r3, #0
 8001980:	b2db      	uxtb	r3, r3
 8001982:	2b00      	cmp	r3, #0
 8001984:	d000      	beq.n	8001988 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xc0>
        do
 8001986:	e7dc      	b.n	8001942 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x7a>

        // reset job queue and flags after frame is decoded
        external_queue.reset();
 8001988:	480a      	ldr	r0, [pc, #40]	; (80019b4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xec>)
 800198a:	f000 fc07 	bl	800219c <_ZN20ExternalDMAJob_QueueILm2EE5resetEv>
        Jpeg_HWDecodingEnd = 0;
 800198e:	4b0a      	ldr	r3, [pc, #40]	; (80019b8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xf0>)
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]
        DMA2D_CopyBufferEnd = 0;
 8001994:	4b09      	ldr	r3, [pc, #36]	; (80019bc <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xf4>)
 8001996:	2200      	movs	r2, #0
 8001998:	601a      	str	r2, [r3, #0]
 800199a:	e000      	b.n	800199e <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xd6>
        return;
 800199c:	bf00      	nop
    }
}
 800199e:	3710      	adds	r7, #16
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	24005bb0 	.word	0x24005bb0
 80019a8:	2400aea0 	.word	0x2400aea0
 80019ac:	24005b7c 	.word	0x24005b7c
 80019b0:	24005b8c 	.word	0x24005b8c
 80019b4:	24005b90 	.word	0x24005b90
 80019b8:	24005b64 	.word	0x24005b64
 80019bc:	24005b74 	.word	0x24005b74

080019c0 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm>:

bool HardwareMJPEGDecoder::decodeFrame(const touchgfx::Rect& area, uint8_t* frameBuffer, uint32_t framebuffer_width)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b086      	sub	sp, #24
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	60f8      	str	r0, [r7, #12]
 80019c8:	60b9      	str	r1, [r7, #8]
 80019ca:	607a      	str	r2, [r7, #4]
 80019cc:	603b      	str	r3, [r7, #0]
    // Assuming that chunk is available and streamNo and chunkType is correct.
    // Check by gotoNextFrame

    readData(currentMovieOffset, 8);
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	699b      	ldr	r3, [r3, #24]
 80019d2:	2208      	movs	r2, #8
 80019d4:	4619      	mov	r1, r3
 80019d6:	68f8      	ldr	r0, [r7, #12]
 80019d8:	f7ff fc32 	bl	8001240 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    const uint32_t length = getU32(currentMovieOffset + 4);
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	699b      	ldr	r3, [r3, #24]
 80019e0:	3304      	adds	r3, #4
 80019e2:	4619      	mov	r1, r3
 80019e4:	68f8      	ldr	r0, [r7, #12]
 80019e6:	f7ff fbb0 	bl	800114a <_ZN20HardwareMJPEGDecoder6getU32Em>
 80019ea:	6178      	str	r0, [r7, #20]

    // Ensure whole frame is read
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	699b      	ldr	r3, [r3, #24]
 80019f0:	3308      	adds	r3, #8
 80019f2:	697a      	ldr	r2, [r7, #20]
 80019f4:	4619      	mov	r1, r3
 80019f6:	68f8      	ldr	r0, [r7, #12]
 80019f8:	f7ff fc22 	bl	8001240 <_ZN20HardwareMJPEGDecoder8readDataEmm>
 80019fc:	6138      	str	r0, [r7, #16]

    if (frameBuffer) //only decode if buffers are assigned.
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d018      	beq.n	8001a36 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x76>
    {
        JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, frameBuffer);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	697a      	ldr	r2, [r7, #20]
 8001a08:	6939      	ldr	r1, [r7, #16]
 8001a0a:	480d      	ldr	r0, [pc, #52]	; (8001a40 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x80>)
 8001a0c:	f000 f89a 	bl	8001b44 <JPEG_Decode_DMA>

        do
        {
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg, *pDma);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a14:	4619      	mov	r1, r3
 8001a16:	480a      	ldr	r0, [pc, #40]	; (8001a40 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x80>)
 8001a18:	f000 fa4e 	bl	8001eb8 <JPEG_OutputHandler>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	4a09      	ldr	r2, [pc, #36]	; (8001a44 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x84>)
 8001a20:	6013      	str	r3, [r2, #0]
        } while (JpegProcessing_End == 0);
 8001a22:	4b08      	ldr	r3, [pc, #32]	; (8001a44 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x84>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	bf0c      	ite	eq
 8001a2a:	2301      	moveq	r3, #1
 8001a2c:	2300      	movne	r3, #0
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d000      	beq.n	8001a36 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x76>
        do
 8001a34:	e7ec      	b.n	8001a10 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x50>

    }
    return true;
 8001a36:	2301      	movs	r3, #1
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3718      	adds	r7, #24
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	2400aea0 	.word	0x2400aea0
 8001a44:	24005b7c 	.word	0x24005b7c

08001a48 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt>:

bool HardwareMJPEGDecoder::decodeThumbnail(uint32_t frameno, uint8_t* buffer, uint16_t width, uint16_t height)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b084      	sub	sp, #16
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	60f8      	str	r0, [r7, #12]
 8001a50:	60b9      	str	r1, [r7, #8]
 8001a52:	607a      	str	r2, [r7, #4]
 8001a54:	807b      	strh	r3, [r7, #2]
    assert(0);
 8001a56:	4b03      	ldr	r3, [pc, #12]	; (8001a64 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x1c>)
 8001a58:	4a03      	ldr	r2, [pc, #12]	; (8001a68 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x20>)
 8001a5a:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
 8001a5e:	4803      	ldr	r0, [pc, #12]	; (8001a6c <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x24>)
 8001a60:	f024 fc7c 	bl	802635c <__assert_func>
 8001a64:	080278e0 	.word	0x080278e0
 8001a68:	080278e4 	.word	0x080278e4
 8001a6c:	080276cc 	.word	0x080276cc

08001a70 <_ZN20HardwareMJPEGDecoder9gotoFrameEm>:
    return false;
}

void HardwareMJPEGDecoder::gotoFrame(uint32_t frameNumber)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
    if (frameNumber == 0)
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d101      	bne.n	8001a84 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x14>
    {
        frameNumber = 1;
 8001a80:	2301      	movs	r3, #1
 8001a82:	603b      	str	r3, [r7, #0]
    }

    if (frameNumber > getNumberOfFrames())
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	332c      	adds	r3, #44	; 0x2c
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	4798      	blx	r3
 8001a90:	4602      	mov	r2, r0
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	4293      	cmp	r3, r2
 8001a96:	bf8c      	ite	hi
 8001a98:	2301      	movhi	r3, #1
 8001a9a:	2300      	movls	r3, #0
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d006      	beq.n	8001ab0 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x40>
    {
        frameNumber = getNumberOfFrames();
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	332c      	adds	r3, #44	; 0x2c
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	4798      	blx	r3
 8001aae:	6038      	str	r0, [r7, #0]
    }

    uint32_t offset = indexOffset + 8 + (frameNumber - 1) * 16;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	69da      	ldr	r2, [r3, #28]
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	3b01      	subs	r3, #1
 8001ab8:	011b      	lsls	r3, r3, #4
 8001aba:	4413      	add	r3, r2
 8001abc:	3308      	adds	r3, #8
 8001abe:	60fb      	str	r3, [r7, #12]

    readData(offset, 16);
 8001ac0:	2210      	movs	r2, #16
 8001ac2:	68f9      	ldr	r1, [r7, #12]
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	f7ff fbbb 	bl	8001240 <_ZN20HardwareMJPEGDecoder8readDataEmm>

    currentMovieOffset = getU32(offset + 8) + firstFrameOffset - 4;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	3308      	adds	r3, #8
 8001ace:	4619      	mov	r1, r3
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f7ff fb3a 	bl	800114a <_ZN20HardwareMJPEGDecoder6getU32Em>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6a1b      	ldr	r3, [r3, #32]
 8001adc:	4413      	add	r3, r2
 8001ade:	1f1a      	subs	r2, r3, #4
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	619a      	str	r2, [r3, #24]
    this->frameNumber = frameNumber;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	683a      	ldr	r2, [r7, #0]
 8001ae8:	615a      	str	r2, [r3, #20]
}
 8001aea:	bf00      	nop
 8001aec:	3710      	adds	r7, #16
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <_ZN20HardwareMJPEGDecoder17getNumberOfFramesEv>:

uint32_t HardwareMJPEGDecoder::getNumberOfFrames()
{
 8001af2:	b480      	push	{r7}
 8001af4:	b083      	sub	sp, #12
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	6078      	str	r0, [r7, #4]
    return videoInfo.number_of_frames;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	689b      	ldr	r3, [r3, #8]
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	370c      	adds	r7, #12
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr

08001b0a <_ZN20HardwareMJPEGDecoder14setRepeatVideoEb>:

void HardwareMJPEGDecoder::setRepeatVideo(bool repeat)
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	b083      	sub	sp, #12
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
 8001b12:	460b      	mov	r3, r1
 8001b14:	70fb      	strb	r3, [r7, #3]

}
 8001b16:	bf00      	nop
 8001b18:	370c      	adds	r7, #12
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr

08001b22 <_ZN20HardwareMJPEGDecoder12getVideoInfoEPN8touchgfx16VideoInformationE>:

void HardwareMJPEGDecoder::getVideoInfo(touchgfx::VideoInformation* data)
{
 8001b22:	b490      	push	{r4, r7}
 8001b24:	b082      	sub	sp, #8
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	6078      	str	r0, [r7, #4]
 8001b2a:	6039      	str	r1, [r7, #0]
    *data = videoInfo;
 8001b2c:	683a      	ldr	r2, [r7, #0]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4614      	mov	r4, r2
 8001b32:	3304      	adds	r3, #4
 8001b34:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b36:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001b3a:	bf00      	nop
 8001b3c:	3708      	adds	r7, #8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bc90      	pop	{r4, r7}
 8001b42:	4770      	bx	lr

08001b44 <JPEG_Decode_DMA>:
      * @param  JPEGImageSize_Bytes    : jpg image size in bytes.
      * @param  DestAddress : ARGB8888 destination Frame Buffer Address.
      * @retval None
      */
    uint32_t JPEG_Decode_DMA(JPEG_HandleTypeDef* hjpeg, uint8_t* input, uint32_t chunkSizeIn /* length */, uint8_t* output)
    {
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b088      	sub	sp, #32
 8001b48:	af02      	add	r7, sp, #8
 8001b4a:	60f8      	str	r0, [r7, #12]
 8001b4c:	60b9      	str	r1, [r7, #8]
 8001b4e:	607a      	str	r2, [r7, #4]
 8001b50:	603b      	str	r3, [r7, #0]
        FrameBufferAddress = output;
 8001b52:	4a2a      	ldr	r2, [pc, #168]	; (8001bfc <JPEG_Decode_DMA+0xb8>)
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	6013      	str	r3, [r2, #0]
        Output_Is_Paused = 0;
 8001b58:	4b29      	ldr	r3, [pc, #164]	; (8001c00 <JPEG_Decode_DMA+0xbc>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	601a      	str	r2, [r3, #0]
        JPEG_OUT_Read_BufferIndex = 0;
 8001b5e:	4b29      	ldr	r3, [pc, #164]	; (8001c04 <JPEG_Decode_DMA+0xc0>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]
        JPEG_OUT_Write_BufferIndex = 0;
 8001b64:	4b28      	ldr	r3, [pc, #160]	; (8001c08 <JPEG_Decode_DMA+0xc4>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	601a      	str	r2, [r3, #0]
        JPEG_InputImageIndex = 0;
 8001b6a:	4b28      	ldr	r3, [pc, #160]	; (8001c0c <JPEG_Decode_DMA+0xc8>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	601a      	str	r2, [r3, #0]
        JPEG_InputImageAddress = (uint32_t)input;
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	4a27      	ldr	r2, [pc, #156]	; (8001c10 <JPEG_Decode_DMA+0xcc>)
 8001b74:	6013      	str	r3, [r2, #0]
        JPEG_InputImageSize_Bytes = chunkSizeIn;
 8001b76:	4a27      	ldr	r2, [pc, #156]	; (8001c14 <JPEG_Decode_DMA+0xd0>)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6013      	str	r3, [r2, #0]
        MCU_BlockIndex = 0;
 8001b7c:	4b26      	ldr	r3, [pc, #152]	; (8001c18 <JPEG_Decode_DMA+0xd4>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	601a      	str	r2, [r3, #0]
        DMA2D_output_Is_Paused = 1;
 8001b82:	4b26      	ldr	r3, [pc, #152]	; (8001c1c <JPEG_Decode_DMA+0xd8>)
 8001b84:	2201      	movs	r2, #1
 8001b86:	601a      	str	r2, [r3, #0]

        //Init buffers
        for (uint32_t i = 0; i < NB_OUTPUT_DATA_BUFFERS; ++i)
 8001b88:	2300      	movs	r3, #0
 8001b8a:	617b      	str	r3, [r7, #20]
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d816      	bhi.n	8001bc0 <JPEG_Decode_DMA+0x7c>
        {
            Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
 8001b92:	4923      	ldr	r1, [pc, #140]	; (8001c20 <JPEG_Decode_DMA+0xdc>)
 8001b94:	697a      	ldr	r2, [r7, #20]
 8001b96:	4613      	mov	r3, r2
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	4413      	add	r3, r2
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	440b      	add	r3, r1
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	701a      	strb	r2, [r3, #0]
            Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
 8001ba4:	491e      	ldr	r1, [pc, #120]	; (8001c20 <JPEG_Decode_DMA+0xdc>)
 8001ba6:	697a      	ldr	r2, [r7, #20]
 8001ba8:	4613      	mov	r3, r2
 8001baa:	005b      	lsls	r3, r3, #1
 8001bac:	4413      	add	r3, r2
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	440b      	add	r3, r1
 8001bb2:	3308      	adds	r3, #8
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	601a      	str	r2, [r3, #0]
        for (uint32_t i = 0; i < NB_OUTPUT_DATA_BUFFERS; ++i)
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	3301      	adds	r3, #1
 8001bbc:	617b      	str	r3, [r7, #20]
 8001bbe:	e7e5      	b.n	8001b8c <JPEG_Decode_DMA+0x48>
        }

        //Do not return from this function until done with decoding all chunks.
        HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 8001bc0:	4b11      	ldr	r3, [pc, #68]	; (8001c08 <JPEG_Decode_DMA+0xc4>)
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	4916      	ldr	r1, [pc, #88]	; (8001c20 <JPEG_Decode_DMA+0xdc>)
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	4413      	add	r3, r2
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	440b      	add	r3, r1
 8001bd0:	3304      	adds	r3, #4
 8001bd2:	6819      	ldr	r1, [r3, #0]
 8001bd4:	4b13      	ldr	r3, [pc, #76]	; (8001c24 <JPEG_Decode_DMA+0xe0>)
 8001bd6:	68da      	ldr	r2, [r3, #12]
 8001bd8:	4613      	mov	r3, r2
 8001bda:	005b      	lsls	r3, r3, #1
 8001bdc:	4413      	add	r3, r2
 8001bde:	01db      	lsls	r3, r3, #7
 8001be0:	9300      	str	r3, [sp, #0]
 8001be2:	460b      	mov	r3, r1
 8001be4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001be8:	68b9      	ldr	r1, [r7, #8]
 8001bea:	68f8      	ldr	r0, [r7, #12]
 8001bec:	f00b ff23 	bl	800da36 <HAL_JPEG_Decode_DMA>

        return 0;
 8001bf0:	2300      	movs	r3, #0
    }
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3718      	adds	r7, #24
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	24005b54 	.word	0x24005b54
 8001c00:	24005b70 	.word	0x24005b70
 8001c04:	24005b68 	.word	0x24005b68
 8001c08:	24005b6c 	.word	0x24005b6c
 8001c0c:	24005b58 	.word	0x24005b58
 8001c10:	24005b60 	.word	0x24005b60
 8001c14:	24005b5c 	.word	0x24005b5c
 8001c18:	24005b88 	.word	0x24005b88
 8001c1c:	24005b78 	.word	0x24005b78
 8001c20:	24000004 	.word	0x24000004
 8001c24:	24005bb0 	.word	0x24005bb0

08001c28 <HAL_JPEG_InfoReadyCallback>:
      * @param hjpeg: JPEG handle pointer
      * @param pInfo: JPEG Info Struct pointer
      * @retval None
      */
    void HAL_JPEG_InfoReadyCallback(JPEG_HandleTypeDef* hjpeg, JPEG_ConfTypeDef* pInfo)
    {
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b084      	sub	sp, #16
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	6039      	str	r1, [r7, #0]
        if (pInfo->ChromaSubsampling == JPEG_420_SUBSAMPLING)
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d12f      	bne.n	8001c9a <HAL_JPEG_InfoReadyCallback+0x72>
        {
            if ((pInfo->ImageWidth % 16) != 0)
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	68db      	ldr	r3, [r3, #12]
 8001c3e:	f003 030f 	and.w	r3, r3, #15
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d007      	beq.n	8001c56 <HAL_JPEG_InfoReadyCallback+0x2e>
            {
                pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	68db      	ldr	r3, [r3, #12]
 8001c4a:	f023 030f 	bic.w	r3, r3, #15
 8001c4e:	f103 0210 	add.w	r2, r3, #16
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	60da      	str	r2, [r3, #12]
            }

            if ((pInfo->ImageHeight % 16) != 0)
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	f003 030f 	and.w	r3, r3, #15
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d007      	beq.n	8001c72 <HAL_JPEG_InfoReadyCallback+0x4a>
            {
                pInfo->ImageHeight += (16 - (pInfo->ImageHeight % 16));
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	f023 030f 	bic.w	r3, r3, #15
 8001c6a:	f103 0210 	add.w	r2, r3, #16
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	609a      	str	r2, [r3, #8]
            }

            HAL_StatusTypeDef status = TGFX_JPEG_GetDecodeColorConvertFunc(pInfo, &pConvert_Function, &MCU_TotalNb);
 8001c72:	4a36      	ldr	r2, [pc, #216]	; (8001d4c <HAL_JPEG_InfoReadyCallback+0x124>)
 8001c74:	4936      	ldr	r1, [pc, #216]	; (8001d50 <HAL_JPEG_InfoReadyCallback+0x128>)
 8001c76:	6838      	ldr	r0, [r7, #0]
 8001c78:	f003 fde6 	bl	8005848 <TGFX_JPEG_GetDecodeColorConvertFunc>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	73bb      	strb	r3, [r7, #14]
            if (status != HAL_OK)
 8001c80:	7bbb      	ldrb	r3, [r7, #14]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d05d      	beq.n	8001d42 <HAL_JPEG_InfoReadyCallback+0x11a>
            {
                assert(status == HAL_OK);
 8001c86:	7bbb      	ldrb	r3, [r7, #14]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d05a      	beq.n	8001d42 <HAL_JPEG_InfoReadyCallback+0x11a>
 8001c8c:	4b31      	ldr	r3, [pc, #196]	; (8001d54 <HAL_JPEG_InfoReadyCallback+0x12c>)
 8001c8e:	4a32      	ldr	r2, [pc, #200]	; (8001d58 <HAL_JPEG_InfoReadyCallback+0x130>)
 8001c90:	f240 2131 	movw	r1, #561	; 0x231
 8001c94:	4831      	ldr	r0, [pc, #196]	; (8001d5c <HAL_JPEG_InfoReadyCallback+0x134>)
 8001c96:	f024 fb61 	bl	802635c <__assert_func>
            }
        }
        else
        {
            if (pInfo->ChromaSubsampling == JPEG_422_SUBSAMPLING)
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d11b      	bne.n	8001cda <HAL_JPEG_InfoReadyCallback+0xb2>
            {
                if ((pInfo->ImageWidth % 16) != 0)
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	68db      	ldr	r3, [r3, #12]
 8001ca6:	f003 030f 	and.w	r3, r3, #15
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d007      	beq.n	8001cbe <HAL_JPEG_InfoReadyCallback+0x96>
                {
                    pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	68db      	ldr	r3, [r3, #12]
 8001cb2:	f023 030f 	bic.w	r3, r3, #15
 8001cb6:	f103 0210 	add.w	r2, r3, #16
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	60da      	str	r2, [r3, #12]
                }

                if ((pInfo->ImageHeight % 8) != 0)
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	f003 0307 	and.w	r3, r3, #7
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d007      	beq.n	8001cda <HAL_JPEG_InfoReadyCallback+0xb2>
                {
                    pInfo->ImageHeight += (8 - (pInfo->ImageHeight % 8));
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	f023 0307 	bic.w	r3, r3, #7
 8001cd2:	f103 0208 	add.w	r2, r3, #8
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	609a      	str	r2, [r3, #8]
                }
            }

            if (pInfo->ChromaSubsampling == JPEG_444_SUBSAMPLING)
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d11b      	bne.n	8001d1a <HAL_JPEG_InfoReadyCallback+0xf2>
            {
                if ((pInfo->ImageWidth % 8) != 0)
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	68db      	ldr	r3, [r3, #12]
 8001ce6:	f003 0307 	and.w	r3, r3, #7
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d007      	beq.n	8001cfe <HAL_JPEG_InfoReadyCallback+0xd6>
                {
                    pInfo->ImageWidth += (8 - (pInfo->ImageWidth % 8));
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	68db      	ldr	r3, [r3, #12]
 8001cf2:	f023 0307 	bic.w	r3, r3, #7
 8001cf6:	f103 0208 	add.w	r2, r3, #8
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	60da      	str	r2, [r3, #12]
                }

                if ((pInfo->ImageHeight % 8) != 0)
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	f003 0307 	and.w	r3, r3, #7
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d007      	beq.n	8001d1a <HAL_JPEG_InfoReadyCallback+0xf2>
                {
                    pInfo->ImageHeight += (8 - (pInfo->ImageHeight % 8));
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	f023 0307 	bic.w	r3, r3, #7
 8001d12:	f103 0208 	add.w	r2, r3, #8
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	609a      	str	r2, [r3, #8]
                }
            }

            HAL_StatusTypeDef status = JPEG_GetDecodeColorConvertFunc(pInfo, &pConvert_Function, &MCU_TotalNb);
 8001d1a:	4a0c      	ldr	r2, [pc, #48]	; (8001d4c <HAL_JPEG_InfoReadyCallback+0x124>)
 8001d1c:	490c      	ldr	r1, [pc, #48]	; (8001d50 <HAL_JPEG_InfoReadyCallback+0x128>)
 8001d1e:	6838      	ldr	r0, [r7, #0]
 8001d20:	f016 fe10 	bl	8018944 <JPEG_GetDecodeColorConvertFunc>
 8001d24:	4603      	mov	r3, r0
 8001d26:	73fb      	strb	r3, [r7, #15]
            if (status != HAL_OK)
 8001d28:	7bfb      	ldrb	r3, [r7, #15]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d009      	beq.n	8001d42 <HAL_JPEG_InfoReadyCallback+0x11a>
            {
                assert(status == HAL_OK);
 8001d2e:	7bfb      	ldrb	r3, [r7, #15]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d006      	beq.n	8001d42 <HAL_JPEG_InfoReadyCallback+0x11a>
 8001d34:	4b07      	ldr	r3, [pc, #28]	; (8001d54 <HAL_JPEG_InfoReadyCallback+0x12c>)
 8001d36:	4a08      	ldr	r2, [pc, #32]	; (8001d58 <HAL_JPEG_InfoReadyCallback+0x130>)
 8001d38:	f240 2153 	movw	r1, #595	; 0x253
 8001d3c:	4807      	ldr	r0, [pc, #28]	; (8001d5c <HAL_JPEG_InfoReadyCallback+0x134>)
 8001d3e:	f024 fb0d 	bl	802635c <__assert_func>
            }
        }
    }
 8001d42:	bf00      	nop
 8001d44:	3710      	adds	r7, #16
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	24005b80 	.word	0x24005b80
 8001d50:	24005b84 	.word	0x24005b84
 8001d54:	08027940 	.word	0x08027940
 8001d58:	08027954 	.word	0x08027954
 8001d5c:	080276cc 	.word	0x080276cc

08001d60 <HAL_JPEG_GetDataCallback>:
      * @param hjpeg: JPEG handle pointer
      * @param NbDecodedData: Number of decoded (consummed) bytes from input buffer
      * @retval None
      */
    void HAL_JPEG_GetDataCallback(JPEG_HandleTypeDef* hjpeg, uint32_t NbDecodedData)
    {
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	6039      	str	r1, [r7, #0]
        //Input buffer has been consumed by the peripheral and to ask for a new data chunk if the operation (encoding/decoding) has not been complete yet.
        JPEG_InputImageIndex += NbDecodedData;
 8001d6a:	4b14      	ldr	r3, [pc, #80]	; (8001dbc <HAL_JPEG_GetDataCallback+0x5c>)
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	4413      	add	r3, r2
 8001d72:	4a12      	ldr	r2, [pc, #72]	; (8001dbc <HAL_JPEG_GetDataCallback+0x5c>)
 8001d74:	6013      	str	r3, [r2, #0]
        if (JPEG_InputImageIndex < JPEG_InputImageSize_Bytes)
 8001d76:	4b11      	ldr	r3, [pc, #68]	; (8001dbc <HAL_JPEG_GetDataCallback+0x5c>)
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	4b11      	ldr	r3, [pc, #68]	; (8001dc0 <HAL_JPEG_GetDataCallback+0x60>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d218      	bcs.n	8001db4 <HAL_JPEG_GetDataCallback+0x54>
        {
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 8001d82:	4b10      	ldr	r3, [pc, #64]	; (8001dc4 <HAL_JPEG_GetDataCallback+0x64>)
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	4413      	add	r3, r2
 8001d8a:	4a0e      	ldr	r2, [pc, #56]	; (8001dc4 <HAL_JPEG_GetDataCallback+0x64>)
 8001d8c:	6013      	str	r3, [r2, #0]
            uint32_t inDataLength = JPEG_InputImageSize_Bytes - JPEG_InputImageIndex;
 8001d8e:	4b0c      	ldr	r3, [pc, #48]	; (8001dc0 <HAL_JPEG_GetDataCallback+0x60>)
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	4b0a      	ldr	r3, [pc, #40]	; (8001dbc <HAL_JPEG_GetDataCallback+0x5c>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	60fb      	str	r3, [r7, #12]
            HAL_JPEG_ConfigInputBuffer(hjpeg, (uint8_t*)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 8001d9a:	4b0a      	ldr	r3, [pc, #40]	; (8001dc4 <HAL_JPEG_GetDataCallback+0x64>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4619      	mov	r1, r3
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001da6:	bf28      	it	cs
 8001da8:	f44f 3380 	movcs.w	r3, #65536	; 0x10000
 8001dac:	461a      	mov	r2, r3
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f00b ffe7 	bl	800dd82 <HAL_JPEG_ConfigInputBuffer>
        }
    }
 8001db4:	bf00      	nop
 8001db6:	3710      	adds	r7, #16
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	24005b58 	.word	0x24005b58
 8001dc0:	24005b5c 	.word	0x24005b5c
 8001dc4:	24005b60 	.word	0x24005b60

08001dc8 <HAL_JPEG_DataReadyCallback>:
      * @param pDataOut: pointer to the output data buffer
      * @param OutDataLength: length of output buffer in bytes
      * @retval None
      */
    void HAL_JPEG_DataReadyCallback(JPEG_HandleTypeDef* hjpeg, uint8_t* pDataOut, uint32_t OutDataLength)
    {
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b084      	sub	sp, #16
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	60f8      	str	r0, [r7, #12]
 8001dd0:	60b9      	str	r1, [r7, #8]
 8001dd2:	607a      	str	r2, [r7, #4]
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
 8001dd4:	4b27      	ldr	r3, [pc, #156]	; (8001e74 <HAL_JPEG_DataReadyCallback+0xac>)
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	4927      	ldr	r1, [pc, #156]	; (8001e78 <HAL_JPEG_DataReadyCallback+0xb0>)
 8001dda:	4613      	mov	r3, r2
 8001ddc:	005b      	lsls	r3, r3, #1
 8001dde:	4413      	add	r3, r2
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	440b      	add	r3, r1
 8001de4:	2201      	movs	r2, #1
 8001de6:	701a      	strb	r2, [r3, #0]
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBufferSize = OutDataLength;
 8001de8:	4b22      	ldr	r3, [pc, #136]	; (8001e74 <HAL_JPEG_DataReadyCallback+0xac>)
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	4922      	ldr	r1, [pc, #136]	; (8001e78 <HAL_JPEG_DataReadyCallback+0xb0>)
 8001dee:	4613      	mov	r3, r2
 8001df0:	005b      	lsls	r3, r3, #1
 8001df2:	4413      	add	r3, r2
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	440b      	add	r3, r1
 8001df8:	3308      	adds	r3, #8
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	601a      	str	r2, [r3, #0]

        JPEG_OUT_Write_BufferIndex++;
 8001dfe:	4b1d      	ldr	r3, [pc, #116]	; (8001e74 <HAL_JPEG_DataReadyCallback+0xac>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	3301      	adds	r3, #1
 8001e04:	4a1b      	ldr	r2, [pc, #108]	; (8001e74 <HAL_JPEG_DataReadyCallback+0xac>)
 8001e06:	6013      	str	r3, [r2, #0]
        if (JPEG_OUT_Write_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
 8001e08:	4b1a      	ldr	r3, [pc, #104]	; (8001e74 <HAL_JPEG_DataReadyCallback+0xac>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d902      	bls.n	8001e16 <HAL_JPEG_DataReadyCallback+0x4e>
        {
            JPEG_OUT_Write_BufferIndex = 0;
 8001e10:	4b18      	ldr	r3, [pc, #96]	; (8001e74 <HAL_JPEG_DataReadyCallback+0xac>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	601a      	str	r2, [r3, #0]
        }

        //if the other buffer is full, then ui thread might be converting it
        if (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State != JPEG_BUFFER_EMPTY)
 8001e16:	4b17      	ldr	r3, [pc, #92]	; (8001e74 <HAL_JPEG_DataReadyCallback+0xac>)
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	4917      	ldr	r1, [pc, #92]	; (8001e78 <HAL_JPEG_DataReadyCallback+0xb0>)
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	005b      	lsls	r3, r3, #1
 8001e20:	4413      	add	r3, r2
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	440b      	add	r3, r1
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d006      	beq.n	8001e3a <HAL_JPEG_DataReadyCallback+0x72>
        {
            HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 8001e2c:	2102      	movs	r1, #2
 8001e2e:	68f8      	ldr	r0, [r7, #12]
 8001e30:	f00b fe64 	bl	800dafc <HAL_JPEG_Pause>
            Output_Is_Paused = 1;
 8001e34:	4b11      	ldr	r3, [pc, #68]	; (8001e7c <HAL_JPEG_DataReadyCallback+0xb4>)
 8001e36:	2201      	movs	r2, #1
 8001e38:	601a      	str	r2, [r3, #0]
        }
        HAL_JPEG_ConfigOutputBuffer(hjpeg, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 8001e3a:	4b0e      	ldr	r3, [pc, #56]	; (8001e74 <HAL_JPEG_DataReadyCallback+0xac>)
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	490e      	ldr	r1, [pc, #56]	; (8001e78 <HAL_JPEG_DataReadyCallback+0xb0>)
 8001e40:	4613      	mov	r3, r2
 8001e42:	005b      	lsls	r3, r3, #1
 8001e44:	4413      	add	r3, r2
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	440b      	add	r3, r1
 8001e4a:	3304      	adds	r3, #4
 8001e4c:	6819      	ldr	r1, [r3, #0]
 8001e4e:	4b0c      	ldr	r3, [pc, #48]	; (8001e80 <HAL_JPEG_DataReadyCallback+0xb8>)
 8001e50:	68da      	ldr	r2, [r3, #12]
 8001e52:	4613      	mov	r3, r2
 8001e54:	005b      	lsls	r3, r3, #1
 8001e56:	4413      	add	r3, r2
 8001e58:	01db      	lsls	r3, r3, #7
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	68f8      	ldr	r0, [r7, #12]
 8001e5e:	f00b ffa2 	bl	800dda6 <HAL_JPEG_ConfigOutputBuffer>

        // Signal Hardware Decoding to wake up
        SEM_POST(semDecodingDone);
 8001e62:	4b08      	ldr	r3, [pc, #32]	; (8001e84 <HAL_JPEG_DataReadyCallback+0xbc>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4618      	mov	r0, r3
 8001e68:	f012 fe48 	bl	8014afc <osSemaphoreRelease>
    }
 8001e6c:	bf00      	nop
 8001e6e:	3710      	adds	r7, #16
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	24005b6c 	.word	0x24005b6c
 8001e78:	24000004 	.word	0x24000004
 8001e7c:	24005b70 	.word	0x24005b70
 8001e80:	24005bb0 	.word	0x24005bb0
 8001e84:	24005b8c 	.word	0x24005b8c

08001e88 <HAL_JPEG_ErrorCallback>:
      * @brief  JPEG Error callback
      * @param hjpeg: JPEG handle pointer
      * @retval None
      */
    void HAL_JPEG_ErrorCallback(JPEG_HandleTypeDef* hjpeg)
    {
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8001e90:	b672      	cpsid	i
}
 8001e92:	bf00      	nop
        __disable_irq();
        while (1)
 8001e94:	e7fe      	b.n	8001e94 <HAL_JPEG_ErrorCallback+0xc>
	...

08001e98 <HAL_JPEG_DecodeCpltCallback>:
      * @brief  JPEG Decode complete callback
      * @param hjpeg: JPEG handle pointer
      * @retval None
      */
    void HAL_JPEG_DecodeCpltCallback(JPEG_HandleTypeDef* hjpeg)
    {
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
        Jpeg_HWDecodingEnd = 1;
 8001ea0:	4b04      	ldr	r3, [pc, #16]	; (8001eb4 <HAL_JPEG_DecodeCpltCallback+0x1c>)
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	601a      	str	r2, [r3, #0]
    }
 8001ea6:	bf00      	nop
 8001ea8:	370c      	adds	r7, #12
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	24005b64 	.word	0x24005b64

08001eb8 <JPEG_OutputHandler>:
  * @param hjpeg: JPEG handle pointer
  * @param dma: DMA2D reference
  * @retval 1 : if JPEG processing has finished, 0 : if JPEG processing still ongoing
  */
uint32_t JPEG_OutputHandler(JPEG_HandleTypeDef* hjpeg, touchgfx::DMA_Interface& dma)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	6039      	str	r1, [r7, #0]
    if (Jpeg_HWDecodingEnd && DMA2D_CopyBufferEnd) // decode completed
 8001ec2:	4b45      	ldr	r3, [pc, #276]	; (8001fd8 <JPEG_OutputHandler+0x120>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d005      	beq.n	8001ed6 <JPEG_OutputHandler+0x1e>
 8001eca:	4b44      	ldr	r3, [pc, #272]	; (8001fdc <JPEG_OutputHandler+0x124>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <JPEG_OutputHandler+0x1e>
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e000      	b.n	8001ed8 <JPEG_OutputHandler+0x20>
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <JPEG_OutputHandler+0x28>
    {
        return 1;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e077      	b.n	8001fd0 <JPEG_OutputHandler+0x118>
    }

    // Add job to DMA2D if ready and JPEG buffer is full
    if ((Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && (DMA2D_output_Is_Paused == 1))
 8001ee0:	4b3f      	ldr	r3, [pc, #252]	; (8001fe0 <JPEG_OutputHandler+0x128>)
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	493f      	ldr	r1, [pc, #252]	; (8001fe4 <JPEG_OutputHandler+0x12c>)
 8001ee6:	4613      	mov	r3, r2
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	4413      	add	r3, r2
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	440b      	add	r3, r1
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d105      	bne.n	8001f02 <JPEG_OutputHandler+0x4a>
 8001ef6:	4b3c      	ldr	r3, [pc, #240]	; (8001fe8 <JPEG_OutputHandler+0x130>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d101      	bne.n	8001f02 <JPEG_OutputHandler+0x4a>
 8001efe:	2301      	movs	r3, #1
 8001f00:	e000      	b.n	8001f04 <JPEG_OutputHandler+0x4c>
 8001f02:	2300      	movs	r3, #0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d02d      	beq.n	8001f64 <JPEG_OutputHandler+0xac>
    {
        External_DMA2D_JobTypeDef new_job =
        {
            MCU_BlockIndex,
            &Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]
        };
 8001f08:	4b38      	ldr	r3, [pc, #224]	; (8001fec <JPEG_OutputHandler+0x134>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	60bb      	str	r3, [r7, #8]
            &Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]
 8001f0e:	4b34      	ldr	r3, [pc, #208]	; (8001fe0 <JPEG_OutputHandler+0x128>)
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	4613      	mov	r3, r2
 8001f14:	005b      	lsls	r3, r3, #1
 8001f16:	4413      	add	r3, r2
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	4a32      	ldr	r2, [pc, #200]	; (8001fe4 <JPEG_OutputHandler+0x12c>)
 8001f1c:	4413      	add	r3, r2
        };
 8001f1e:	60fb      	str	r3, [r7, #12]

        external_queue.push(new_job);
 8001f20:	f107 0308 	add.w	r3, r7, #8
 8001f24:	4619      	mov	r1, r3
 8001f26:	4832      	ldr	r0, [pc, #200]	; (8001ff0 <JPEG_OutputHandler+0x138>)
 8001f28:	f000 f94d 	bl	80021c6 <_ZN20ExternalDMAJob_QueueILm2EE4pushERK25External_DMA2D_JobTypeDef>

        MCU_BlockIndex += JPEG_ConvertorParams.MCU_pr_line;
 8001f2c:	4b31      	ldr	r3, [pc, #196]	; (8001ff4 <JPEG_OutputHandler+0x13c>)
 8001f2e:	68da      	ldr	r2, [r3, #12]
 8001f30:	4b2e      	ldr	r3, [pc, #184]	; (8001fec <JPEG_OutputHandler+0x134>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4413      	add	r3, r2
 8001f36:	4a2d      	ldr	r2, [pc, #180]	; (8001fec <JPEG_OutputHandler+0x134>)
 8001f38:	6013      	str	r3, [r2, #0]

        JPEG_OUT_Read_BufferIndex++;
 8001f3a:	4b29      	ldr	r3, [pc, #164]	; (8001fe0 <JPEG_OutputHandler+0x128>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	3301      	adds	r3, #1
 8001f40:	4a27      	ldr	r2, [pc, #156]	; (8001fe0 <JPEG_OutputHandler+0x128>)
 8001f42:	6013      	str	r3, [r2, #0]
        if (JPEG_OUT_Read_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
 8001f44:	4b26      	ldr	r3, [pc, #152]	; (8001fe0 <JPEG_OutputHandler+0x128>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d902      	bls.n	8001f52 <JPEG_OutputHandler+0x9a>
        {
            JPEG_OUT_Read_BufferIndex = 0;
 8001f4c:	4b24      	ldr	r3, [pc, #144]	; (8001fe0 <JPEG_OutputHandler+0x128>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	601a      	str	r2, [r3, #0]
        }

        DMA2D_output_Is_Paused = 0;
 8001f52:	4b25      	ldr	r3, [pc, #148]	; (8001fe8 <JPEG_OutputHandler+0x130>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	601a      	str	r2, [r3, #0]

        // Try to start DMA2D
        dma.start();
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	3310      	adds	r3, #16
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	6838      	ldr	r0, [r7, #0]
 8001f62:	4798      	blx	r3
    }

    // Start JPEG IP if paused and next buffer is empty
    if ((Output_Is_Paused == 1) && \
 8001f64:	4b24      	ldr	r3, [pc, #144]	; (8001ff8 <JPEG_OutputHandler+0x140>)
 8001f66:	681b      	ldr	r3, [r3, #0]
            (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) && \
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d117      	bne.n	8001f9c <JPEG_OutputHandler+0xe4>
 8001f6c:	4b23      	ldr	r3, [pc, #140]	; (8001ffc <JPEG_OutputHandler+0x144>)
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	491c      	ldr	r1, [pc, #112]	; (8001fe4 <JPEG_OutputHandler+0x12c>)
 8001f72:	4613      	mov	r3, r2
 8001f74:	005b      	lsls	r3, r3, #1
 8001f76:	4413      	add	r3, r2
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	440b      	add	r3, r1
 8001f7c:	781b      	ldrb	r3, [r3, #0]
    if ((Output_Is_Paused == 1) && \
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d10c      	bne.n	8001f9c <JPEG_OutputHandler+0xe4>
            (Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_EMPTY))
 8001f82:	4b17      	ldr	r3, [pc, #92]	; (8001fe0 <JPEG_OutputHandler+0x128>)
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	4917      	ldr	r1, [pc, #92]	; (8001fe4 <JPEG_OutputHandler+0x12c>)
 8001f88:	4613      	mov	r3, r2
 8001f8a:	005b      	lsls	r3, r3, #1
 8001f8c:	4413      	add	r3, r2
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	440b      	add	r3, r1
 8001f92:	781b      	ldrb	r3, [r3, #0]
            (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) && \
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d101      	bne.n	8001f9c <JPEG_OutputHandler+0xe4>
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e000      	b.n	8001f9e <JPEG_OutputHandler+0xe6>
 8001f9c:	2300      	movs	r3, #0
    if ((Output_Is_Paused == 1) && \
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d006      	beq.n	8001fb0 <JPEG_OutputHandler+0xf8>
    {
        Output_Is_Paused = 0;
 8001fa2:	4b15      	ldr	r3, [pc, #84]	; (8001ff8 <JPEG_OutputHandler+0x140>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	601a      	str	r2, [r3, #0]
        HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 8001fa8:	2102      	movs	r1, #2
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f00b fdfe 	bl	800dbac <HAL_JPEG_Resume>
    }

    if ((Output_Is_Paused == 0) && (DMA2D_output_Is_Paused == 0))
 8001fb0:	4b11      	ldr	r3, [pc, #68]	; (8001ff8 <JPEG_OutputHandler+0x140>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d105      	bne.n	8001fc4 <JPEG_OutputHandler+0x10c>
 8001fb8:	4b0b      	ldr	r3, [pc, #44]	; (8001fe8 <JPEG_OutputHandler+0x130>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d101      	bne.n	8001fc4 <JPEG_OutputHandler+0x10c>
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e000      	b.n	8001fc6 <JPEG_OutputHandler+0x10e>
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d001      	beq.n	8001fce <JPEG_OutputHandler+0x116>
    {
        return 2;
 8001fca:	2302      	movs	r3, #2
 8001fcc:	e000      	b.n	8001fd0 <JPEG_OutputHandler+0x118>
    }

    return 0;
 8001fce:	2300      	movs	r3, #0
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3710      	adds	r7, #16
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	24005b64 	.word	0x24005b64
 8001fdc:	24005b74 	.word	0x24005b74
 8001fe0:	24005b68 	.word	0x24005b68
 8001fe4:	24000004 	.word	0x24000004
 8001fe8:	24005b78 	.word	0x24005b78
 8001fec:	24005b88 	.word	0x24005b88
 8001ff0:	24005b90 	.word	0x24005b90
 8001ff4:	24005bb0 	.word	0x24005bb0
 8001ff8:	24005b70 	.word	0x24005b70
 8001ffc:	24005b6c 	.word	0x24005b6c

08002000 <DMA2D_CopyBuffer>:
  * @brief  Configures external DMA2D job to copy YCbCr data to RGB buffer(s)
  * @param job: External job reference
  * @retval None
  */
void DMA2D_CopyBuffer(External_DMA2D_JobTypeDef& job)
{
 8002000:	b480      	push	{r7}
 8002002:	b087      	sub	sp, #28
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
    uint32_t xRef, yRef, refline;

    xRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	011a      	lsls	r2, r3, #4
 800200e:	4b2e      	ldr	r3, [pc, #184]	; (80020c8 <DMA2D_CopyBuffer+0xc8>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	fbb2 f3f3 	udiv	r3, r2, r3
 8002016:	011b      	lsls	r3, r3, #4
 8002018:	617b      	str	r3, [r7, #20]
    yRef = ((job.MCU_index * MCU_WIDTH_PIXELS) % JPEG_ConvertorParams.WidthExtend);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	011b      	lsls	r3, r3, #4
 8002020:	4a29      	ldr	r2, [pc, #164]	; (80020c8 <DMA2D_CopyBuffer+0xc8>)
 8002022:	6812      	ldr	r2, [r2, #0]
 8002024:	fbb3 f1f2 	udiv	r1, r3, r2
 8002028:	fb01 f202 	mul.w	r2, r1, r2
 800202c:	1a9b      	subs	r3, r3, r2
 800202e:	613b      	str	r3, [r7, #16]

    refline = (JPEG_ConvertorParams.ScaledWidth) * xRef + (JPEG_ConvertorParams.bytes_pr_pixel * yRef);
 8002030:	4b25      	ldr	r3, [pc, #148]	; (80020c8 <DMA2D_CopyBuffer+0xc8>)
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	697a      	ldr	r2, [r7, #20]
 8002036:	fb03 f202 	mul.w	r2, r3, r2
 800203a:	4b23      	ldr	r3, [pc, #140]	; (80020c8 <DMA2D_CopyBuffer+0xc8>)
 800203c:	691b      	ldr	r3, [r3, #16]
 800203e:	6939      	ldr	r1, [r7, #16]
 8002040:	fb01 f303 	mul.w	r3, r1, r3
 8002044:	4413      	add	r3, r2
 8002046:	60fb      	str	r3, [r7, #12]

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8002048:	4b20      	ldr	r3, [pc, #128]	; (80020cc <DMA2D_CopyBuffer+0xcc>)
 800204a:	2201      	movs	r2, #1
 800204c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Configure DMA2D data size */
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line)) // Last line of frame
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	4b1f      	ldr	r3, [pc, #124]	; (80020d0 <DMA2D_CopyBuffer+0xd0>)
 8002054:	6819      	ldr	r1, [r3, #0]
 8002056:	4b1c      	ldr	r3, [pc, #112]	; (80020c8 <DMA2D_CopyBuffer+0xc8>)
 8002058:	68db      	ldr	r3, [r3, #12]
 800205a:	1acb      	subs	r3, r1, r3
 800205c:	429a      	cmp	r2, r3
 800205e:	d309      	bcc.n	8002074 <DMA2D_CopyBuffer+0x74>
    {
        WRITE_REG(DMA2D->NLR, (JPEG_ConvertorParams.LastLineHeight | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
 8002060:	4b19      	ldr	r3, [pc, #100]	; (80020c8 <DMA2D_CopyBuffer+0xc8>)
 8002062:	689a      	ldr	r2, [r3, #8]
 8002064:	4b18      	ldr	r3, [pc, #96]	; (80020c8 <DMA2D_CopyBuffer+0xc8>)
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	011b      	lsls	r3, r3, #4
 800206a:	041b      	lsls	r3, r3, #16
 800206c:	4917      	ldr	r1, [pc, #92]	; (80020cc <DMA2D_CopyBuffer+0xcc>)
 800206e:	4313      	orrs	r3, r2
 8002070:	644b      	str	r3, [r1, #68]	; 0x44
 8002072:	e007      	b.n	8002084 <DMA2D_CopyBuffer+0x84>
    }
    else
    {
        WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
 8002074:	4b14      	ldr	r3, [pc, #80]	; (80020c8 <DMA2D_CopyBuffer+0xc8>)
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	011b      	lsls	r3, r3, #4
 800207a:	041b      	lsls	r3, r3, #16
 800207c:	4a13      	ldr	r2, [pc, #76]	; (80020cc <DMA2D_CopyBuffer+0xcc>)
 800207e:	f043 0310 	orr.w	r3, r3, #16
 8002082:	6453      	str	r3, [r2, #68]	; 0x44
    }

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress) + refline));
 8002084:	4b13      	ldr	r3, [pc, #76]	; (80020d4 <DMA2D_CopyBuffer+0xd4>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4619      	mov	r1, r3
 800208a:	4a10      	ldr	r2, [pc, #64]	; (80020cc <DMA2D_CopyBuffer+0xcc>)
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	440b      	add	r3, r1
 8002090:	63d3      	str	r3, [r2, #60]	; 0x3c

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, 480 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
 8002092:	4b0d      	ldr	r3, [pc, #52]	; (80020c8 <DMA2D_CopyBuffer+0xc8>)
 8002094:	68db      	ldr	r3, [r3, #12]
 8002096:	f1c3 031e 	rsb	r3, r3, #30
 800209a:	4a0c      	ldr	r2, [pc, #48]	; (80020cc <DMA2D_CopyBuffer+0xcc>)
 800209c:	011b      	lsls	r3, r3, #4
 800209e:	6413      	str	r3, [r2, #64]	; 0x40

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->FGOR, 0);
 80020a0:	4b0a      	ldr	r3, [pc, #40]	; (80020cc <DMA2D_CopyBuffer+0xcc>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	611a      	str	r2, [r3, #16]

    /* DMA2D FGPFCCR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_YCBCR | (DMA2D_CSS_420 << DMA2D_FGPFCCR_CSS_Pos) | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (0xFFU << DMA2D_FGPFCCR_ALPHA_Pos));
 80020a6:	4b09      	ldr	r3, [pc, #36]	; (80020cc <DMA2D_CopyBuffer+0xcc>)
 80020a8:	4a0b      	ldr	r2, [pc, #44]	; (80020d8 <DMA2D_CopyBuffer+0xd8>)
 80020aa:	61da      	str	r2, [r3, #28]

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(job.jpeg_buffer->DataBuffer));
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	685a      	ldr	r2, [r3, #4]
 80020b2:	4b06      	ldr	r3, [pc, #24]	; (80020cc <DMA2D_CopyBuffer+0xcc>)
 80020b4:	60da      	str	r2, [r3, #12]

    /* Configure DMA2D contol register */
    WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 80020b6:	4b05      	ldr	r3, [pc, #20]	; (80020cc <DMA2D_CopyBuffer+0xcc>)
 80020b8:	4a08      	ldr	r2, [pc, #32]	; (80020dc <DMA2D_CopyBuffer+0xdc>)
 80020ba:	601a      	str	r2, [r3, #0]
}
 80020bc:	bf00      	nop
 80020be:	371c      	adds	r7, #28
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr
 80020c8:	24005bb0 	.word	0x24005bb0
 80020cc:	52001000 	.word	0x52001000
 80020d0:	24005b80 	.word	0x24005b80
 80020d4:	24005b54 	.word	0x24005b54
 80020d8:	ff09000b 	.word	0xff09000b
 80020dc:	00010201 	.word	0x00010201

080020e0 <DMA2D_ExternalJobCompleted>:
  * @brief  External DMA2D job complete callback
  * @param job: External job reference
  * @retval None
  */
void DMA2D_ExternalJobCompleted(External_DMA2D_JobTypeDef& job)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
    // Mark ycbcr empty
    job.jpeg_buffer->State = JPEG_BUFFER_EMPTY;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	701a      	strb	r2, [r3, #0]
    job.jpeg_buffer->DataBufferSize = 0;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	2200      	movs	r2, #0
 80020f6:	609a      	str	r2, [r3, #8]

    // Mark dma paused if queue is empty
    if (external_queue.is_empty())
 80020f8:	480e      	ldr	r0, [pc, #56]	; (8002134 <DMA2D_ExternalJobCompleted+0x54>)
 80020fa:	f000 f827 	bl	800214c <_ZN20ExternalDMAJob_QueueILm2EE8is_emptyEv>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d002      	beq.n	800210a <DMA2D_ExternalJobCompleted+0x2a>
    {
        DMA2D_output_Is_Paused = 1;
 8002104:	4b0c      	ldr	r3, [pc, #48]	; (8002138 <DMA2D_ExternalJobCompleted+0x58>)
 8002106:	2201      	movs	r2, #1
 8002108:	601a      	str	r2, [r3, #0]
    }

    // Check if last line
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	4b0b      	ldr	r3, [pc, #44]	; (800213c <DMA2D_ExternalJobCompleted+0x5c>)
 8002110:	6819      	ldr	r1, [r3, #0]
 8002112:	4b0b      	ldr	r3, [pc, #44]	; (8002140 <DMA2D_ExternalJobCompleted+0x60>)
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	1acb      	subs	r3, r1, r3
 8002118:	429a      	cmp	r2, r3
 800211a:	d302      	bcc.n	8002122 <DMA2D_ExternalJobCompleted+0x42>
    {
        DMA2D_CopyBufferEnd = 1;
 800211c:	4b09      	ldr	r3, [pc, #36]	; (8002144 <DMA2D_ExternalJobCompleted+0x64>)
 800211e:	2201      	movs	r2, #1
 8002120:	601a      	str	r2, [r3, #0]
    }

    // Signal Hardware Decoding to wake up
    SEM_POST(semDecodingDone);
 8002122:	4b09      	ldr	r3, [pc, #36]	; (8002148 <DMA2D_ExternalJobCompleted+0x68>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4618      	mov	r0, r3
 8002128:	f012 fce8 	bl	8014afc <osSemaphoreRelease>
}
 800212c:	bf00      	nop
 800212e:	3708      	adds	r7, #8
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	24005b90 	.word	0x24005b90
 8002138:	24005b78 	.word	0x24005b78
 800213c:	24005b80 	.word	0x24005b80
 8002140:	24005bb0 	.word	0x24005bb0
 8002144:	24005b74 	.word	0x24005b74
 8002148:	24005b8c 	.word	0x24005b8c

0800214c <_ZN20ExternalDMAJob_QueueILm2EE8is_emptyEv>:
    }
    External_DMA2D_JobTypeDef& front()
    {
        return buffer_[head_];
    }
    bool is_empty()
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
    {
        return count_ == 0;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	2b00      	cmp	r3, #0
 800215a:	bf0c      	ite	eq
 800215c:	2301      	moveq	r3, #1
 800215e:	2300      	movne	r3, #0
 8002160:	b2db      	uxtb	r3, r3
    }
 8002162:	4618      	mov	r0, r3
 8002164:	370c      	adds	r7, #12
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr

0800216e <_ZN20ExternalDMAJob_QueueILm2EEC1Ev>:
    ExternalDMAJob_Queue()
 800216e:	b480      	push	{r7}
 8002170:	b083      	sub	sp, #12
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]
        : max_size_(Size), head_(0), tail_(0), count_(0)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2202      	movs	r2, #2
 800217a:	601a      	str	r2, [r3, #0]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2200      	movs	r2, #0
 8002180:	605a      	str	r2, [r3, #4]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	609a      	str	r2, [r3, #8]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2200      	movs	r2, #0
 800218c:	60da      	str	r2, [r3, #12]
    {}
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4618      	mov	r0, r3
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr

0800219c <_ZN20ExternalDMAJob_QueueILm2EE5resetEv>:
    bool is_full()
    {
        return count_ == max_size_;
    }
    void reset()
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
    {
        head_ = tail_ = count_ = 0;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2200      	movs	r2, #0
 80021a8:	60da      	str	r2, [r3, #12]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	68da      	ldr	r2, [r3, #12]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	609a      	str	r2, [r3, #8]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	689a      	ldr	r2, [r3, #8]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	605a      	str	r2, [r3, #4]
    }
 80021ba:	bf00      	nop
 80021bc:	370c      	adds	r7, #12
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr

080021c6 <_ZN20ExternalDMAJob_QueueILm2EE4pushERK25External_DMA2D_JobTypeDef>:
    void push(const External_DMA2D_JobTypeDef& job)
 80021c6:	b480      	push	{r7}
 80021c8:	b083      	sub	sp, #12
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
 80021ce:	6039      	str	r1, [r7, #0]
        buffer_[tail_] = job;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	687a      	ldr	r2, [r7, #4]
 80021d6:	3302      	adds	r3, #2
 80021d8:	6839      	ldr	r1, [r7, #0]
 80021da:	00db      	lsls	r3, r3, #3
 80021dc:	4413      	add	r3, r2
 80021de:	460a      	mov	r2, r1
 80021e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80021e4:	e883 0003 	stmia.w	r3, {r0, r1}
        tail_ = (tail_ + 1) % max_size_;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	3301      	adds	r3, #1
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	6812      	ldr	r2, [r2, #0]
 80021f2:	fbb3 f1f2 	udiv	r1, r3, r2
 80021f6:	fb01 f202 	mul.w	r2, r1, r2
 80021fa:	1a9a      	subs	r2, r3, r2
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	609a      	str	r2, [r3, #8]
        count_++;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	1c5a      	adds	r2, r3, #1
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	60da      	str	r2, [r3, #12]
    }
 800220a:	bf00      	nop
 800220c:	370c      	adds	r7, #12
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
	...

08002218 <_ZN20HardwareMJPEGDecoderD1Ev>:
class HardwareMJPEGDecoder : public MJPEGDecoder
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	4a05      	ldr	r2, [pc, #20]	; (8002238 <_ZN20HardwareMJPEGDecoderD1Ev+0x20>)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	601a      	str	r2, [r3, #0]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4618      	mov	r0, r3
 800222a:	f7fe fed1 	bl	8000fd0 <_ZN12MJPEGDecoderD1Ev>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4618      	mov	r0, r3
 8002232:	3708      	adds	r7, #8
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	08029890 	.word	0x08029890

0800223c <_ZN20HardwareMJPEGDecoderD0Ev>:
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f7ff ffe7 	bl	8002218 <_ZN20HardwareMJPEGDecoderD1Ev>
 800224a:	2148      	movs	r1, #72	; 0x48
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f024 f856 	bl	80262fe <_ZdlPvj>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4618      	mov	r0, r3
 8002256:	3708      	adds	r7, #8
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}

0800225c <_Z41__static_initialization_and_destruction_0ii>:
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	6039      	str	r1, [r7, #0]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2b01      	cmp	r3, #1
 800226a:	d107      	bne.n	800227c <_Z41__static_initialization_and_destruction_0ii+0x20>
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002272:	4293      	cmp	r3, r2
 8002274:	d102      	bne.n	800227c <_Z41__static_initialization_and_destruction_0ii+0x20>
ExternalDMAJob_Queue<EXT_DMA2D_QUEUE_SIZE> external_queue;
 8002276:	4803      	ldr	r0, [pc, #12]	; (8002284 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8002278:	f7ff ff79 	bl	800216e <_ZN20ExternalDMAJob_QueueILm2EEC1Ev>
}
 800227c:	bf00      	nop
 800227e:	3708      	adds	r7, #8
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	24005b90 	.word	0x24005b90

08002288 <_GLOBAL__sub_I_FrameBufferAddress>:
 8002288:	b580      	push	{r7, lr}
 800228a:	af00      	add	r7, sp, #0
 800228c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002290:	2001      	movs	r0, #1
 8002292:	f7ff ffe3 	bl	800225c <_Z41__static_initialization_and_destruction_0ii>
 8002296:	bd80      	pop	{r7, pc}

08002298 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 800229c:	2200      	movs	r2, #0
 800229e:	2101      	movs	r1, #1
 80022a0:	2001      	movs	r0, #1
 80022a2:	f012 fb50 	bl	8014946 <osSemaphoreNew>
 80022a6:	4603      	mov	r3, r0
 80022a8:	4a0f      	ldr	r2, [pc, #60]	; (80022e8 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 80022aa:	6013      	str	r3, [r2, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 80022ac:	4b0e      	ldr	r3, [pc, #56]	; (80022e8 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d105      	bne.n	80022c0 <_ZN8touchgfx10OSWrappers10initializeEv+0x28>
 80022b4:	4b0d      	ldr	r3, [pc, #52]	; (80022ec <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 80022b6:	4a0e      	ldr	r2, [pc, #56]	; (80022f0 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 80022b8:	2128      	movs	r1, #40	; 0x28
 80022ba:	480e      	ldr	r0, [pc, #56]	; (80022f4 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 80022bc:	f024 f84e 	bl	802635c <__assert_func>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 80022c0:	2200      	movs	r2, #0
 80022c2:	2104      	movs	r1, #4
 80022c4:	2001      	movs	r0, #1
 80022c6:	f012 fc5d 	bl	8014b84 <osMessageQueueNew>
 80022ca:	4603      	mov	r3, r0
 80022cc:	4a0a      	ldr	r2, [pc, #40]	; (80022f8 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 80022ce:	6013      	str	r3, [r2, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 80022d0:	4b09      	ldr	r3, [pc, #36]	; (80022f8 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d105      	bne.n	80022e4 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>
 80022d8:	4b08      	ldr	r3, [pc, #32]	; (80022fc <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 80022da:	4a05      	ldr	r2, [pc, #20]	; (80022f0 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 80022dc:	212c      	movs	r1, #44	; 0x2c
 80022de:	4805      	ldr	r0, [pc, #20]	; (80022f4 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 80022e0:	f024 f83c 	bl	802635c <__assert_func>
}
 80022e4:	bf00      	nop
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	24005bc4 	.word	0x24005bc4
 80022ec:	0802799c 	.word	0x0802799c
 80022f0:	080279e8 	.word	0x080279e8
 80022f4:	08027a18 	.word	0x08027a18
 80022f8:	24005bc8 	.word	0x24005bc8
 80022fc:	08027a84 	.word	0x08027a84

08002300 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 8002300:	b580      	push	{r7, lr}
 8002302:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8002304:	4b04      	ldr	r3, [pc, #16]	; (8002318 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f04f 31ff 	mov.w	r1, #4294967295
 800230c:	4618      	mov	r0, r3
 800230e:	f012 fba3 	bl	8014a58 <osSemaphoreAcquire>
}
 8002312:	bf00      	nop
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	24005bc4 	.word	0x24005bc4

0800231c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8002320:	4b03      	ldr	r3, [pc, #12]	; (8002330 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4618      	mov	r0, r3
 8002326:	f012 fbe9 	bl	8014afc <osSemaphoreRelease>
}
 800232a:	bf00      	nop
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	24005bc4 	.word	0x24005bc4

08002334 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 8002334:	b580      	push	{r7, lr}
 8002336:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8002338:	4b03      	ldr	r3, [pc, #12]	; (8002348 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	2100      	movs	r1, #0
 800233e:	4618      	mov	r0, r3
 8002340:	f012 fb8a 	bl	8014a58 <osSemaphoreAcquire>
}
 8002344:	bf00      	nop
 8002346:	bd80      	pop	{r7, pc}
 8002348:	24005bc4 	.word	0x24005bc4

0800234c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 800234c:	b580      	push	{r7, lr}
 800234e:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8002350:	4b03      	ldr	r3, [pc, #12]	; (8002360 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4618      	mov	r0, r3
 8002356:	f012 fbd1 	bl	8014afc <osSemaphoreRelease>
}
 800235a:	bf00      	nop
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	24005bc4 	.word	0x24005bc4

08002364 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 8002364:	b580      	push	{r7, lr}
 8002366:	af00      	add	r7, sp, #0
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8002368:	4b04      	ldr	r3, [pc, #16]	; (800237c <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x18>)
 800236a:	6818      	ldr	r0, [r3, #0]
 800236c:	2300      	movs	r3, #0
 800236e:	2200      	movs	r2, #0
 8002370:	4903      	ldr	r1, [pc, #12]	; (8002380 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x1c>)
 8002372:	f012 fc7b 	bl	8014c6c <osMessageQueuePut>
}
 8002376:	bf00      	nop
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	24005bc8 	.word	0x24005bc8
 8002380:	2400001c 	.word	0x2400001c

08002384 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 800238a:	4b09      	ldr	r3, [pc, #36]	; (80023b0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 800238c:	6818      	ldr	r0, [r3, #0]
 800238e:	1d39      	adds	r1, r7, #4
 8002390:	2300      	movs	r3, #0
 8002392:	2200      	movs	r2, #0
 8002394:	f012 fcca 	bl	8014d2c <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8002398:	4b05      	ldr	r3, [pc, #20]	; (80023b0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 800239a:	6818      	ldr	r0, [r3, #0]
 800239c:	1d39      	adds	r1, r7, #4
 800239e:	f04f 33ff 	mov.w	r3, #4294967295
 80023a2:	2200      	movs	r2, #0
 80023a4:	f012 fcc2 	bl	8014d2c <osMessageQueueGet>
}
 80023a8:	bf00      	nop
 80023aa:	3708      	adds	r7, #8
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	24005bc8 	.word	0x24005bc8

080023b4 <__NVIC_EnableIRQ>:
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	4603      	mov	r3, r0
 80023bc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80023be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	db0b      	blt.n	80023de <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023c6:	88fb      	ldrh	r3, [r7, #6]
 80023c8:	f003 021f 	and.w	r2, r3, #31
 80023cc:	4907      	ldr	r1, [pc, #28]	; (80023ec <__NVIC_EnableIRQ+0x38>)
 80023ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023d2:	095b      	lsrs	r3, r3, #5
 80023d4:	2001      	movs	r0, #1
 80023d6:	fa00 f202 	lsl.w	r2, r0, r2
 80023da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80023de:	bf00      	nop
 80023e0:	370c      	adds	r7, #12
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	e000e100 	.word	0xe000e100

080023f0 <__NVIC_DisableIRQ>:
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	4603      	mov	r3, r0
 80023f8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80023fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	db12      	blt.n	8002428 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002402:	88fb      	ldrh	r3, [r7, #6]
 8002404:	f003 021f 	and.w	r2, r3, #31
 8002408:	490a      	ldr	r1, [pc, #40]	; (8002434 <__NVIC_DisableIRQ+0x44>)
 800240a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800240e:	095b      	lsrs	r3, r3, #5
 8002410:	2001      	movs	r0, #1
 8002412:	fa00 f202 	lsl.w	r2, r0, r2
 8002416:	3320      	adds	r3, #32
 8002418:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800241c:	f3bf 8f4f 	dsb	sy
}
 8002420:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002422:	f3bf 8f6f 	isb	sy
}
 8002426:	bf00      	nop
}
 8002428:	bf00      	nop
 800242a:	370c      	adds	r7, #12
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr
 8002434:	e000e100 	.word	0xe000e100

08002438 <_ZN8touchgfx9colortypeC1Ev>:
 * extract a 24/32-bit color from this type, use the getColor32 function.
 */
struct colortype
{
    /** Default constructor. Creates a black (0) color. */
    colortype()
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
        : color(0)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	601a      	str	r2, [r3, #0]
    {
    }
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4618      	mov	r0, r3
 800244a:	370c      	adds	r7, #12
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr

08002454 <_ZNK8touchgfx9colortypecvmEv>:
    /**
     * Cast that converts the given colortype to an uint32_t.
     *
     * @return The result of the operation.
     */
    operator uint32_t() const
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
    {
        return color;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
    }
 8002460:	4618      	mov	r0, r3
 8002462:	370c      	adds	r7, #12
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr

0800246c <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
    {
 8002474:	4a04      	ldr	r2, [pc, #16]	; (8002488 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	601a      	str	r2, [r3, #0]
    }
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4618      	mov	r0, r3
 800247e:	370c      	adds	r7, #12
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr
 8002488:	08029964 	.word	0x08029964

0800248c <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
    }
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f7ff ffe9 	bl	800246c <_ZN8touchgfx9DMA_QueueD1Ev>
 800249a:	2104      	movs	r1, #4
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f023 ff2e 	bl	80262fe <_ZdlPvj>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4618      	mov	r0, r3
 80024a6:	3708      	adds	r7, #8
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}

080024ac <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	3344      	adds	r3, #68	; 0x44
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	4798      	blx	r3
    }
 80024c0:	bf00      	nop
 80024c2:	3708      	adds	r7, #8
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}

080024c8 <_ZN8touchgfx13DMA_InterfaceD1Ev>:
    {
        return DMA_TYPE_GENERIC;
    }

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
    {
 80024d0:	4a04      	ldr	r2, [pc, #16]	; (80024e4 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	601a      	str	r2, [r3, #0]
    }
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4618      	mov	r0, r3
 80024da:	370c      	adds	r7, #12
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr
 80024e4:	0802aae8 	.word	0x0802aae8

080024e8 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
    }
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f7ff ffe9 	bl	80024c8 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 80024f6:	210c      	movs	r1, #12
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	f023 ff00 	bl	80262fe <_ZdlPvj>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4618      	mov	r0, r3
 8002502:	3708      	adds	r7, #8
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}

08002508 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8002512:	4a09      	ldr	r2, [pc, #36]	; (8002538 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	601a      	str	r2, [r3, #0]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	683a      	ldr	r2, [r7, #0]
 800251c:	605a      	str	r2, [r3, #4]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2200      	movs	r2, #0
 8002522:	721a      	strb	r2, [r3, #8]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2200      	movs	r2, #0
 8002528:	725a      	strb	r2, [r3, #9]
    {
    }
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4618      	mov	r0, r3
 800252e:	370c      	adds	r7, #12
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr
 8002538:	0802aae8 	.word	0x0802aae8

0800253c <_ZN8STM32DMA10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_CHROMART type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
    {
        return touchgfx::DMA_TYPE_CHROMART;
 8002544:	2301      	movs	r3, #1
    }
 8002546:	4618      	mov	r0, r3
 8002548:	370c      	adds	r7, #12
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
	...

08002554 <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
    {
        if (started_by_external_job)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f893 3da0 	ldrb.w	r3, [r3, #3488]	; 0xda0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d003      	beq.n	800256e <_ZN8STM32DMA18signalDMAInterruptEv+0x1a>
        {
            externalJobCompleted();
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f000 f88a 	bl	8002680 <_ZN8STM32DMA20externalJobCompletedEv>
            {
                started_by_external_job = true;
                externalJobExecute();
            }
        }
    }
 800256c:	e022      	b.n	80025b4 <_ZN8STM32DMA18signalDMAInterruptEv+0x60>
            executeCompleted();
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	3328      	adds	r3, #40	; 0x28
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4610      	mov	r0, r2
 800257a:	4798      	blx	r3
            if (!external_queue.is_empty() && !isRunning)
 800257c:	480f      	ldr	r0, [pc, #60]	; (80025bc <_ZN8STM32DMA18signalDMAInterruptEv+0x68>)
 800257e:	f7ff fde5 	bl	800214c <_ZN20ExternalDMAJob_QueueILm2EE8is_emptyEv>
 8002582:	4603      	mov	r3, r0
 8002584:	f083 0301 	eor.w	r3, r3, #1
 8002588:	b2db      	uxtb	r3, r3
 800258a:	2b00      	cmp	r3, #0
 800258c:	d008      	beq.n	80025a0 <_ZN8STM32DMA18signalDMAInterruptEv+0x4c>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	7a1b      	ldrb	r3, [r3, #8]
 8002592:	f083 0301 	eor.w	r3, r3, #1
 8002596:	b2db      	uxtb	r3, r3
 8002598:	2b00      	cmp	r3, #0
 800259a:	d001      	beq.n	80025a0 <_ZN8STM32DMA18signalDMAInterruptEv+0x4c>
 800259c:	2301      	movs	r3, #1
 800259e:	e000      	b.n	80025a2 <_ZN8STM32DMA18signalDMAInterruptEv+0x4e>
 80025a0:	2300      	movs	r3, #0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d006      	beq.n	80025b4 <_ZN8STM32DMA18signalDMAInterruptEv+0x60>
                started_by_external_job = true;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2201      	movs	r2, #1
 80025aa:	f883 2da0 	strb.w	r2, [r3, #3488]	; 0xda0
                externalJobExecute();
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f000 f890 	bl	80026d4 <_ZN8STM32DMA18externalJobExecuteEv>
    }
 80025b4:	bf00      	nop
 80025b6:	3708      	adds	r7, #8
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	24005b90 	.word	0x24005b90

080025c0 <_ZN8STM32DMA5startEv>:

    virtual void start()
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
    {
        MUTEX_LOCK(mutexIsRunning);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	f8d3 3da4 	ldr.w	r3, [r3, #3492]	; 0xda4
 80025ce:	f04f 31ff 	mov.w	r1, #4294967295
 80025d2:	4618      	mov	r0, r3
 80025d4:	f012 f92f 	bl	8014836 <osMutexAcquire>
        if (!queue.isEmpty() && isAllowed && !isRunning)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	685a      	ldr	r2, [r3, #4]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4610      	mov	r0, r2
 80025e6:	4798      	blx	r3
 80025e8:	4603      	mov	r3, r0
 80025ea:	f083 0301 	eor.w	r3, r3, #1
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d00d      	beq.n	8002610 <_ZN8STM32DMA5startEv+0x50>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	7a5b      	ldrb	r3, [r3, #9]
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d008      	beq.n	8002610 <_ZN8STM32DMA5startEv+0x50>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	7a1b      	ldrb	r3, [r3, #8]
 8002602:	f083 0301 	eor.w	r3, r3, #1
 8002606:	b2db      	uxtb	r3, r3
 8002608:	2b00      	cmp	r3, #0
 800260a:	d001      	beq.n	8002610 <_ZN8STM32DMA5startEv+0x50>
 800260c:	2301      	movs	r3, #1
 800260e:	e000      	b.n	8002612 <_ZN8STM32DMA5startEv+0x52>
 8002610:	2300      	movs	r3, #0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d00b      	beq.n	800262e <_ZN8STM32DMA5startEv+0x6e>
        {
            started_by_external_job = false;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2200      	movs	r2, #0
 800261a:	f883 2da0 	strb.w	r2, [r3, #3488]	; 0xda0
            execute();
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	3324      	adds	r3, #36	; 0x24
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4610      	mov	r0, r2
 800262a:	4798      	blx	r3
 800262c:	e01b      	b.n	8002666 <_ZN8STM32DMA5startEv+0xa6>
        }
        else if (!external_queue.is_empty() && !isRunning)
 800262e:	4813      	ldr	r0, [pc, #76]	; (800267c <_ZN8STM32DMA5startEv+0xbc>)
 8002630:	f7ff fd8c 	bl	800214c <_ZN20ExternalDMAJob_QueueILm2EE8is_emptyEv>
 8002634:	4603      	mov	r3, r0
 8002636:	f083 0301 	eor.w	r3, r3, #1
 800263a:	b2db      	uxtb	r3, r3
 800263c:	2b00      	cmp	r3, #0
 800263e:	d008      	beq.n	8002652 <_ZN8STM32DMA5startEv+0x92>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	7a1b      	ldrb	r3, [r3, #8]
 8002644:	f083 0301 	eor.w	r3, r3, #1
 8002648:	b2db      	uxtb	r3, r3
 800264a:	2b00      	cmp	r3, #0
 800264c:	d001      	beq.n	8002652 <_ZN8STM32DMA5startEv+0x92>
 800264e:	2301      	movs	r3, #1
 8002650:	e000      	b.n	8002654 <_ZN8STM32DMA5startEv+0x94>
 8002652:	2300      	movs	r3, #0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d006      	beq.n	8002666 <_ZN8STM32DMA5startEv+0xa6>
        {
            started_by_external_job = true;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2201      	movs	r2, #1
 800265c:	f883 2da0 	strb.w	r2, [r3, #3488]	; 0xda0
            externalJobExecute();
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	f000 f837 	bl	80026d4 <_ZN8STM32DMA18externalJobExecuteEv>
        }
        MUTEX_UNLOCK(mutexIsRunning);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	f8d3 3da4 	ldr.w	r3, [r3, #3492]	; 0xda4
 800266c:	4618      	mov	r0, r3
 800266e:	f012 f92d 	bl	80148cc <osMutexRelease>
    }
 8002672:	bf00      	nop
 8002674:	3708      	adds	r7, #8
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	24005b90 	.word	0x24005b90

08002680 <_ZN8STM32DMA20externalJobCompletedEv>:
     *
     * @brief Handle DMA2D when an external job has been executed
     *
     * @param None
     */
    void externalJobCompleted()
 8002680:	b580      	push	{r7, lr}
 8002682:	b084      	sub	sp, #16
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
    {
        if (!external_queue.is_empty() && isRunning)
 8002688:	4811      	ldr	r0, [pc, #68]	; (80026d0 <_ZN8STM32DMA20externalJobCompletedEv+0x50>)
 800268a:	f7ff fd5f 	bl	800214c <_ZN20ExternalDMAJob_QueueILm2EE8is_emptyEv>
 800268e:	4603      	mov	r3, r0
 8002690:	f083 0301 	eor.w	r3, r3, #1
 8002694:	b2db      	uxtb	r3, r3
 8002696:	2b00      	cmp	r3, #0
 8002698:	d005      	beq.n	80026a6 <_ZN8STM32DMA20externalJobCompletedEv+0x26>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	7a1b      	ldrb	r3, [r3, #8]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <_ZN8STM32DMA20externalJobCompletedEv+0x26>
 80026a2:	2301      	movs	r3, #1
 80026a4:	e000      	b.n	80026a8 <_ZN8STM32DMA20externalJobCompletedEv+0x28>
 80026a6:	2300      	movs	r3, #0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d00c      	beq.n	80026c6 <_ZN8STM32DMA20externalJobCompletedEv+0x46>
        {
            isRunning = false;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2200      	movs	r2, #0
 80026b0:	721a      	strb	r2, [r3, #8]
            External_DMA2D_JobTypeDef& completed_job = external_queue.front();
 80026b2:	4807      	ldr	r0, [pc, #28]	; (80026d0 <_ZN8STM32DMA20externalJobCompletedEv+0x50>)
 80026b4:	f000 fb4c 	bl	8002d50 <_ZN20ExternalDMAJob_QueueILm2EE5frontEv>
 80026b8:	60f8      	str	r0, [r7, #12]
            external_queue.pop();
 80026ba:	4805      	ldr	r0, [pc, #20]	; (80026d0 <_ZN8STM32DMA20externalJobCompletedEv+0x50>)
 80026bc:	f000 fb58 	bl	8002d70 <_ZN20ExternalDMAJob_QueueILm2EE3popEv>
            DMA2D_ExternalJobCompleted(completed_job);
 80026c0:	68f8      	ldr	r0, [r7, #12]
 80026c2:	f7ff fd0d 	bl	80020e0 <DMA2D_ExternalJobCompleted>
        }
    }
 80026c6:	bf00      	nop
 80026c8:	3710      	adds	r7, #16
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	24005b90 	.word	0x24005b90

080026d4 <_ZN8STM32DMA18externalJobExecuteEv>:
     *
     * @brief Executes an external DMA2D job
     *
     * @param None
     */
    void externalJobExecute()
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
    {
        isRunning = true;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2201      	movs	r2, #1
 80026e0:	721a      	strb	r2, [r3, #8]
        External_DMA2D_JobTypeDef& job = external_queue.front();
 80026e2:	4805      	ldr	r0, [pc, #20]	; (80026f8 <_ZN8STM32DMA18externalJobExecuteEv+0x24>)
 80026e4:	f000 fb34 	bl	8002d50 <_ZN20ExternalDMAJob_QueueILm2EE5frontEv>
 80026e8:	60f8      	str	r0, [r7, #12]
        DMA2D_CopyBuffer(job);
 80026ea:	68f8      	ldr	r0, [r7, #12]
 80026ec:	f7ff fc88 	bl	8002000 <DMA2D_CopyBuffer>
    }
 80026f0:	bf00      	nop
 80026f2:	3710      	adds	r7, #16
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	24005b90 	.word	0x24005b90

080026fc <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b082      	sub	sp, #8
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	685a      	ldr	r2, [r3, #4]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	3314      	adds	r3, #20
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4610      	mov	r0, r2
 8002714:	4798      	blx	r3
    }
 8002716:	bf00      	nop
 8002718:	3708      	adds	r7, #8
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}

0800271e <DMA2D_XferCpltCallback>:

extern "C" DMA2D_HandleTypeDef hdma2d;

extern "C" {
    static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
    {
 800271e:	b580      	push	{r7, lr}
 8002720:	b082      	sub	sp, #8
 8002722:	af00      	add	r7, sp, #0
 8002724:	6078      	str	r0, [r7, #4]
        (void)handle; // Unused argument
        HAL::getInstance()->signalDMAInterrupt();
 8002726:	f7fe f981 	bl	8000a2c <_ZN8touchgfx3HAL11getInstanceEv>
 800272a:	4603      	mov	r3, r0
 800272c:	4618      	mov	r0, r3
 800272e:	f7ff ffe5 	bl	80026fc <_ZN8touchgfx3HAL18signalDMAInterruptEv>
    }
 8002732:	bf00      	nop
 8002734:	3708      	adds	r7, #8
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}

0800273a <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 800273a:	b580      	push	{r7, lr}
 800273c:	b082      	sub	sp, #8
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	330c      	adds	r3, #12
 8002746:	4618      	mov	r0, r3
 8002748:	f7ff fe76 	bl	8002438 <_ZN8touchgfx9colortypeC1Ev>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	4618      	mov	r0, r3
 8002750:	3708      	adds	r7, #8
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
	...

08002758 <_ZN8STM32DMAC1Ev>:
}

STM32DMA::STM32DMA()
 8002758:	b5b0      	push	{r4, r5, r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0])), started_by_external_job(false), mutexIsRunning(0)
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	330c      	adds	r3, #12
 8002766:	4619      	mov	r1, r3
 8002768:	4610      	mov	r0, r2
 800276a:	f7ff fecd 	bl	8002508 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 800276e:	4a16      	ldr	r2, [pc, #88]	; (80027c8 <_ZN8STM32DMAC1Ev+0x70>)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	601a      	str	r2, [r3, #0]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f103 000c 	add.w	r0, r3, #12
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	3320      	adds	r3, #32
 800277e:	2260      	movs	r2, #96	; 0x60
 8002780:	4619      	mov	r1, r3
 8002782:	f017 fba1 	bl	8019ec8 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	3320      	adds	r3, #32
 800278a:	245f      	movs	r4, #95	; 0x5f
 800278c:	461d      	mov	r5, r3
 800278e:	2c00      	cmp	r4, #0
 8002790:	db05      	blt.n	800279e <_ZN8STM32DMAC1Ev+0x46>
 8002792:	4628      	mov	r0, r5
 8002794:	f7ff ffd1 	bl	800273a <_ZN8touchgfx6BlitOpC1Ev>
 8002798:	3524      	adds	r5, #36	; 0x24
 800279a:	3c01      	subs	r4, #1
 800279c:	e7f7      	b.n	800278e <_ZN8STM32DMAC1Ev+0x36>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	f883 2da0 	strb.w	r2, [r3, #3488]	; 0xda0
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	f8c3 2da4 	str.w	r2, [r3, #3492]	; 0xda4
{
    mutexIsRunning = MUTEX_CREATE();
 80027ae:	2000      	movs	r0, #0
 80027b0:	f011 ffbb 	bl	801472a <osMutexNew>
 80027b4:	4602      	mov	r2, r0
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	f8c3 2da4 	str.w	r2, [r3, #3492]	; 0xda4
}
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	4618      	mov	r0, r3
 80027c0:	3708      	adds	r7, #8
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bdb0      	pop	{r4, r5, r7, pc}
 80027c6:	bf00      	nop
 80027c8:	08029914 	.word	0x08029914

080027cc <_ZN8STM32DMAD1Ev>:

STM32DMA::~STM32DMA()
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b082      	sub	sp, #8
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	4a09      	ldr	r2, [pc, #36]	; (80027fc <_ZN8STM32DMAD1Ev+0x30>)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	601a      	str	r2, [r3, #0]
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
 80027da:	205a      	movs	r0, #90	; 0x5a
 80027dc:	f7ff fe08 	bl	80023f0 <__NVIC_DisableIRQ>
STM32DMA::~STM32DMA()
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	330c      	adds	r3, #12
 80027e4:	4618      	mov	r0, r3
 80027e6:	f000 fadf 	bl	8002da8 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7ff fe6b 	bl	80024c8 <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4618      	mov	r0, r3
 80027f6:	3708      	adds	r7, #8
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	08029914 	.word	0x08029914

08002800 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8002800:	b580      	push	{r7, lr}
 8002802:	b082      	sub	sp, #8
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
}
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f7ff ffdf 	bl	80027cc <_ZN8STM32DMAD1Ev>
 800280e:	f640 51a8 	movw	r1, #3496	; 0xda8
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f023 fd73 	bl	80262fe <_ZdlPvj>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	4618      	mov	r0, r3
 800281c:	3708      	adds	r7, #8
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
	...

08002824 <_ZN8STM32DMA10initializeEv>:

void STM32DMA::initialize()
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b084      	sub	sp, #16
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800282c:	4b12      	ldr	r3, [pc, #72]	; (8002878 <_ZN8STM32DMA10initializeEv+0x54>)
 800282e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8002832:	4a11      	ldr	r2, [pc, #68]	; (8002878 <_ZN8STM32DMA10initializeEv+0x54>)
 8002834:	f043 0310 	orr.w	r3, r3, #16
 8002838:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 800283c:	4b0e      	ldr	r3, [pc, #56]	; (8002878 <_ZN8STM32DMA10initializeEv+0x54>)
 800283e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8002842:	f003 0310 	and.w	r3, r3, #16
 8002846:	60fb      	str	r3, [r7, #12]
 8002848:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DMA2D_FORCE_RESET();
 800284a:	4b0b      	ldr	r3, [pc, #44]	; (8002878 <_ZN8STM32DMA10initializeEv+0x54>)
 800284c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800284e:	4a0a      	ldr	r2, [pc, #40]	; (8002878 <_ZN8STM32DMA10initializeEv+0x54>)
 8002850:	f043 0310 	orr.w	r3, r3, #16
 8002854:	67d3      	str	r3, [r2, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8002856:	4b08      	ldr	r3, [pc, #32]	; (8002878 <_ZN8STM32DMA10initializeEv+0x54>)
 8002858:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800285a:	4a07      	ldr	r2, [pc, #28]	; (8002878 <_ZN8STM32DMA10initializeEv+0x54>)
 800285c:	f023 0310 	bic.w	r3, r3, #16
 8002860:	67d3      	str	r3, [r2, #124]	; 0x7c

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8002862:	4b06      	ldr	r3, [pc, #24]	; (800287c <_ZN8STM32DMA10initializeEv+0x58>)
 8002864:	4a06      	ldr	r2, [pc, #24]	; (8002880 <_ZN8STM32DMA10initializeEv+0x5c>)
 8002866:	621a      	str	r2, [r3, #32]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
 8002868:	205a      	movs	r0, #90	; 0x5a
 800286a:	f7ff fda3 	bl	80023b4 <__NVIC_EnableIRQ>
}
 800286e:	bf00      	nop
 8002870:	3710      	adds	r7, #16
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	58024400 	.word	0x58024400
 800287c:	2400ade4 	.word	0x2400ade4
 8002880:	0800271f 	.word	0x0800271f

08002884 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	460b      	mov	r3, r1
 800288e:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8002890:	2300      	movs	r3, #0
 8002892:	60fb      	str	r3, [r7, #12]

    switch (format)
 8002894:	78fb      	ldrb	r3, [r7, #3]
 8002896:	2b0b      	cmp	r3, #11
 8002898:	d826      	bhi.n	80028e8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x64>
 800289a:	a201      	add	r2, pc, #4	; (adr r2, 80028a0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 800289c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028a0:	080028dd 	.word	0x080028dd
 80028a4:	080028d7 	.word	0x080028d7
 80028a8:	080028d1 	.word	0x080028d1
 80028ac:	080028e9 	.word	0x080028e9
 80028b0:	080028e9 	.word	0x080028e9
 80028b4:	080028e9 	.word	0x080028e9
 80028b8:	080028e9 	.word	0x080028e9
 80028bc:	080028e3 	.word	0x080028e3
 80028c0:	080028e3 	.word	0x080028e3
 80028c4:	080028e3 	.word	0x080028e3
 80028c8:	080028e3 	.word	0x080028e3
 80028cc:	080028e3 	.word	0x080028e3
    {
    case Bitmap::ARGB8888: /* DMA2D input mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 80028d0:	2300      	movs	r3, #0
 80028d2:	60fb      	str	r3, [r7, #12]
        break;
 80028d4:	e00e      	b.n	80028f4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB888: /* DMA2D input mode set to 24bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB888;
 80028d6:	2301      	movs	r3, #1
 80028d8:	60fb      	str	r3, [r7, #12]
        break;
 80028da:	e00b      	b.n	80028f4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB565: /* DMA2D input mode set to 16bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB565;
 80028dc:	2302      	movs	r3, #2
 80028de:	60fb      	str	r3, [r7, #12]
        break;
 80028e0:	e008      	b.n	80028f4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* Fall through */
    case Bitmap::L8:       /* DMA2D input mode set to 8bit Color Look up table*/
        dma2dColorMode = DMA2D_INPUT_L8;
 80028e2:	2305      	movs	r3, #5
 80028e4:	60fb      	str	r3, [r7, #12]
        break;
 80028e6:	e005      	b.n	80028f4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported input format for DMA2D */
        assert(0 && "Unsupported Format!");
 80028e8:	4b05      	ldr	r3, [pc, #20]	; (8002900 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x7c>)
 80028ea:	4a06      	ldr	r2, [pc, #24]	; (8002904 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x80>)
 80028ec:	2167      	movs	r1, #103	; 0x67
 80028ee:	4806      	ldr	r0, [pc, #24]	; (8002908 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x84>)
 80028f0:	f023 fd34 	bl	802635c <__assert_func>
        break;
    }

    return dma2dColorMode;
 80028f4:	68fb      	ldr	r3, [r7, #12]
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3710      	adds	r7, #16
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	08027ac8 	.word	0x08027ac8
 8002904:	08027ae4 	.word	0x08027ae4
 8002908:	08027b30 	.word	0x08027b30

0800290c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b084      	sub	sp, #16
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	460b      	mov	r3, r1
 8002916:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8002918:	2300      	movs	r3, #0
 800291a:	60fb      	str	r3, [r7, #12]

    switch (format)
 800291c:	78fb      	ldrb	r3, [r7, #3]
 800291e:	2b0a      	cmp	r3, #10
 8002920:	d821      	bhi.n	8002966 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x5a>
 8002922:	a201      	add	r2, pc, #4	; (adr r2, 8002928 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 8002924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002928:	08002961 	.word	0x08002961
 800292c:	0800295b 	.word	0x0800295b
 8002930:	08002955 	.word	0x08002955
 8002934:	08002967 	.word	0x08002967
 8002938:	08002967 	.word	0x08002967
 800293c:	08002967 	.word	0x08002967
 8002940:	08002967 	.word	0x08002967
 8002944:	0800295b 	.word	0x0800295b
 8002948:	0800295b 	.word	0x0800295b
 800294c:	0800295b 	.word	0x0800295b
 8002950:	0800295b 	.word	0x0800295b
    {
    case Bitmap::ARGB8888: /* DMA2D output mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8002954:	2300      	movs	r3, #0
 8002956:	60fb      	str	r3, [r7, #12]
        break;
 8002958:	e00b      	b.n	8002972 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB888:   /* Fall through */
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* DMA2D output mode set to 24bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 800295a:	2301      	movs	r3, #1
 800295c:	60fb      	str	r3, [r7, #12]
        break;
 800295e:	e008      	b.n	8002972 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB565: /* DMA2D output mode set to 16bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8002960:	2302      	movs	r3, #2
 8002962:	60fb      	str	r3, [r7, #12]
        break;
 8002964:	e005      	b.n	8002972 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported output format for DMA2D */
        assert(0 && "Unsupported Format!");
 8002966:	4b05      	ldr	r3, [pc, #20]	; (800297c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>)
 8002968:	4a05      	ldr	r2, [pc, #20]	; (8002980 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x74>)
 800296a:	2188      	movs	r1, #136	; 0x88
 800296c:	4805      	ldr	r0, [pc, #20]	; (8002984 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x78>)
 800296e:	f023 fcf5 	bl	802635c <__assert_func>
        break;
    }

    return dma2dColorMode;
 8002972:	68fb      	ldr	r3, [r7, #12]
}
 8002974:	4618      	mov	r0, r3
 8002976:	3710      	adds	r7, #16
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}
 800297c:	08027ac8 	.word	0x08027ac8
 8002980:	08027b9c 	.word	0x08027b9c
 8002984:	08027b30 	.word	0x08027b30

08002988 <_ZN8STM32DMA11getBlitCapsEv>:

BlitOperations STM32DMA::getBlitCaps()
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
                                       | BLIT_OP_COPY_L8
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
 8002990:	f240 33ef 	movw	r3, #1007	; 0x3ef
}
 8002994:	4618      	mov	r0, r3
 8002996:	370c      	adds	r7, #12
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr

080029a0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 80029a0:	b590      	push	{r4, r7, lr}
 80029a2:	b089      	sub	sp, #36	; 0x24
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	6039      	str	r1, [r7, #0]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	7f5b      	ldrb	r3, [r3, #29]
 80029ae:	4619      	mov	r1, r3
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	f7ff ff67 	bl	8002884 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 80029b6:	61b8      	str	r0, [r7, #24]
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	7f9b      	ldrb	r3, [r3, #30]
 80029bc:	4619      	mov	r1, r3
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f7ff ff60 	bl	8002884 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 80029c4:	6178      	str	r0, [r7, #20]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	7f9b      	ldrb	r3, [r3, #30]
 80029ca:	4619      	mov	r1, r3
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f7ff ff9d 	bl	800290c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 80029d2:	6138      	str	r0, [r7, #16]

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	8b5b      	ldrh	r3, [r3, #26]
 80029d8:	461a      	mov	r2, r3
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	8a9b      	ldrh	r3, [r3, #20]
 80029de:	1ad2      	subs	r2, r2, r3
 80029e0:	4b92      	ldr	r3, [pc, #584]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80029e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration */
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	8b5b      	ldrh	r3, [r3, #26]
 80029e8:	461a      	mov	r2, r3
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	8a9b      	ldrh	r3, [r3, #20]
 80029ee:	1ad2      	subs	r2, r2, r3
 80029f0:	4b8e      	ldr	r3, [pc, #568]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80029f2:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration */
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	8b1b      	ldrh	r3, [r3, #24]
 80029f8:	461a      	mov	r2, r3
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	8a9b      	ldrh	r3, [r3, #20]
 80029fe:	1ad2      	subs	r2, r2, r3
 8002a00:	4b8a      	ldr	r3, [pc, #552]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002a02:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002a04:	4a89      	ldr	r2, [pc, #548]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	8adb      	ldrh	r3, [r3, #22]
 8002a0e:	461a      	mov	r2, r3
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	8a9b      	ldrh	r3, [r3, #20]
 8002a14:	041b      	lsls	r3, r3, #16
 8002a16:	431a      	orrs	r2, r3
 8002a18:	4b84      	ldr	r3, [pc, #528]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002a1a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	691a      	ldr	r2, [r3, #16]
 8002a20:	4b82      	ldr	r3, [pc, #520]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002a22:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	685a      	ldr	r2, [r3, #4]
 8002a28:	4b80      	ldr	r3, [pc, #512]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002a2a:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a34:	d037      	beq.n	8002aa6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
 8002a36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a3a:	f200 80e3 	bhi.w	8002c04 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x264>
 8002a3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a42:	d015      	beq.n	8002a70 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 8002a44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a48:	f200 80dc 	bhi.w	8002c04 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x264>
 8002a4c:	2b80      	cmp	r3, #128	; 0x80
 8002a4e:	d045      	beq.n	8002adc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13c>
 8002a50:	2b80      	cmp	r3, #128	; 0x80
 8002a52:	f200 80d7 	bhi.w	8002c04 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x264>
 8002a56:	2b40      	cmp	r3, #64	; 0x40
 8002a58:	f000 80bf 	beq.w	8002bda <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x23a>
 8002a5c:	2b40      	cmp	r3, #64	; 0x40
 8002a5e:	f200 80d1 	bhi.w	8002c04 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x264>
 8002a62:	2b04      	cmp	r3, #4
 8002a64:	f000 80a4 	beq.w	8002bb0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x210>
 8002a68:	2b20      	cmp	r3, #32
 8002a6a:	f000 80b6 	beq.w	8002bda <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x23a>
 8002a6e:	e0c9      	b.n	8002c04 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x264>
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	7f1b      	ldrb	r3, [r3, #28]
 8002a74:	061b      	lsls	r3, r3, #24
 8002a76:	4619      	mov	r1, r3
 8002a78:	4a6c      	ldr	r2, [pc, #432]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002a7a:	4b6d      	ldr	r3, [pc, #436]	; (8002c30 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8002a7c:	430b      	orrs	r3, r1
 8002a7e:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	330c      	adds	r3, #12
 8002a84:	4c69      	ldr	r4, [pc, #420]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002a86:	4618      	mov	r0, r3
 8002a88:	f7ff fce4 	bl	8002454 <_ZNK8touchgfx9colortypecvmEv>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002a90:	4a66      	ldr	r2, [pc, #408]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	691a      	ldr	r2, [r3, #16]
 8002a9a:	4b64      	ldr	r3, [pc, #400]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002a9c:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8002a9e:	4b63      	ldr	r3, [pc, #396]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002aa0:	4a64      	ldr	r2, [pc, #400]	; (8002c34 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8002aa2:	601a      	str	r2, [r3, #0]
        break;
 8002aa4:	e0d9      	b.n	8002c5a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_A8:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	7f1b      	ldrb	r3, [r3, #28]
 8002aaa:	061b      	lsls	r3, r3, #24
 8002aac:	4619      	mov	r1, r3
 8002aae:	4a5f      	ldr	r2, [pc, #380]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002ab0:	4b61      	ldr	r3, [pc, #388]	; (8002c38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8002ab2:	430b      	orrs	r3, r1
 8002ab4:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	330c      	adds	r3, #12
 8002aba:	4c5c      	ldr	r4, [pc, #368]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002abc:	4618      	mov	r0, r3
 8002abe:	f7ff fcc9 	bl	8002454 <_ZNK8touchgfx9colortypecvmEv>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	6223      	str	r3, [r4, #32]
        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002ac6:	4a59      	ldr	r2, [pc, #356]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	691a      	ldr	r2, [r3, #16]
 8002ad0:	4b56      	ldr	r3, [pc, #344]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002ad2:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8002ad4:	4b55      	ldr	r3, [pc, #340]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002ad6:	4a57      	ldr	r2, [pc, #348]	; (8002c34 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8002ad8:	601a      	str	r2, [r3, #0]
        break;
 8002ada:	e0be      	b.n	8002c5a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_L8:
        {
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	60fb      	str	r3, [r7, #12]
            bool blend = true;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	77fb      	strb	r3, [r7, #31]

            /* Set DMA2D color mode and alpha mode */
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	7f1b      	ldrb	r3, [r3, #28]
 8002aea:	061b      	lsls	r3, r3, #24
 8002aec:	461a      	mov	r2, r3
 8002aee:	69bb      	ldr	r3, [r7, #24]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	4a4e      	ldr	r2, [pc, #312]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002af4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002af8:	61d3      	str	r3, [r2, #28]

            /* Write DMA2D BGPFCCR register */
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002afa:	4a4c      	ldr	r2, [pc, #304]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	6253      	str	r3, [r2, #36]	; 0x24

            /* Configure DMA2D Stream source2 address */
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	691a      	ldr	r2, [r3, #16]
 8002b04:	4b49      	ldr	r3, [pc, #292]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002b06:	615a      	str	r2, [r3, #20]

            /* Write foreground CLUT memory address */
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	1d1a      	adds	r2, r3, #4
 8002b0c:	4b47      	ldr	r3, [pc, #284]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002b0e:	62da      	str	r2, [r3, #44]	; 0x2c

            switch ((Bitmap::ClutFormat)palette->format)
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	881b      	ldrh	r3, [r3, #0]
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d002      	beq.n	8002b20 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x180>
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d00d      	beq.n	8002b3a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x19a>
 8002b1e:	e020      	b.n	8002b62 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c2>
            {
            case Bitmap::CLUT_FORMAT_L8_ARGB8888:
                /* Write foreground CLUT size and CLUT color mode */
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002b20:	4b42      	ldr	r3, [pc, #264]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002b22:	69da      	ldr	r2, [r3, #28]
 8002b24:	4b45      	ldr	r3, [pc, #276]	; (8002c3c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002b26:	4013      	ands	r3, r2
 8002b28:	68fa      	ldr	r2, [r7, #12]
 8002b2a:	8852      	ldrh	r2, [r2, #2]
 8002b2c:	3a01      	subs	r2, #1
 8002b2e:	0212      	lsls	r2, r2, #8
 8002b30:	4611      	mov	r1, r2
 8002b32:	4a3e      	ldr	r2, [pc, #248]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002b34:	430b      	orrs	r3, r1
 8002b36:	61d3      	str	r3, [r2, #28]
                break;
 8002b38:	e01a      	b.n	8002b70 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d0>
            case Bitmap::CLUT_FORMAT_L8_RGB888:
                if (blitOp.alpha == 255)
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	7f1b      	ldrb	r3, [r3, #28]
 8002b3e:	2bff      	cmp	r3, #255	; 0xff
 8002b40:	d101      	bne.n	8002b46 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a6>
                {
                    blend = false;
 8002b42:	2300      	movs	r3, #0
 8002b44:	77fb      	strb	r3, [r7, #31]
                }
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002b46:	4b39      	ldr	r3, [pc, #228]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002b48:	69da      	ldr	r2, [r3, #28]
 8002b4a:	4b3c      	ldr	r3, [pc, #240]	; (8002c3c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	68fa      	ldr	r2, [r7, #12]
 8002b50:	8852      	ldrh	r2, [r2, #2]
 8002b52:	3a01      	subs	r2, #1
 8002b54:	0212      	lsls	r2, r2, #8
 8002b56:	4313      	orrs	r3, r2
 8002b58:	4a34      	ldr	r2, [pc, #208]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002b5a:	f043 0310 	orr.w	r3, r3, #16
 8002b5e:	61d3      	str	r3, [r2, #28]
                break;
 8002b60:	e006      	b.n	8002b70 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d0>
            case Bitmap::CLUT_FORMAT_L8_RGB565:
            default:
                assert(0 && "Unsupported format");
 8002b62:	4b37      	ldr	r3, [pc, #220]	; (8002c40 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002b64:	4a37      	ldr	r2, [pc, #220]	; (8002c44 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8002b66:	f44f 7181 	mov.w	r1, #258	; 0x102
 8002b6a:	4837      	ldr	r0, [pc, #220]	; (8002c48 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8002b6c:	f023 fbf6 	bl	802635c <__assert_func>
                break;
            }

            /* Enable the CLUT loading for the foreground */
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8002b70:	4b2e      	ldr	r3, [pc, #184]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002b72:	69db      	ldr	r3, [r3, #28]
 8002b74:	4a2d      	ldr	r2, [pc, #180]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002b76:	f043 0320 	orr.w	r3, r3, #32
 8002b7a:	61d3      	str	r3, [r2, #28]

            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8002b7c:	4b2b      	ldr	r3, [pc, #172]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002b7e:	69db      	ldr	r3, [r3, #28]
 8002b80:	f003 0320 	and.w	r3, r3, #32
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	bf14      	ite	ne
 8002b88:	2301      	movne	r3, #1
 8002b8a:	2300      	moveq	r3, #0
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d000      	beq.n	8002b94 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f4>
 8002b92:	e7f3      	b.n	8002b7c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1dc>
            {
            }
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8002b94:	4b25      	ldr	r3, [pc, #148]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002b96:	2210      	movs	r2, #16
 8002b98:	609a      	str	r2, [r3, #8]

            /* Set DMA2D mode */
            if (blend)
 8002b9a:	7ffb      	ldrb	r3, [r7, #31]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d003      	beq.n	8002ba8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x208>
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8002ba0:	4b22      	ldr	r3, [pc, #136]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002ba2:	4a24      	ldr	r2, [pc, #144]	; (8002c34 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8002ba4:	601a      	str	r2, [r3, #0]
            else
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
            }
        }
        break;
 8002ba6:	e058      	b.n	8002c5a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8002ba8:	4b20      	ldr	r3, [pc, #128]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002baa:	4a28      	ldr	r2, [pc, #160]	; (8002c4c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 8002bac:	601a      	str	r2, [r3, #0]
        break;
 8002bae:	e054      	b.n	8002c5a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	7f1b      	ldrb	r3, [r3, #28]
 8002bb4:	061b      	lsls	r3, r3, #24
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	69bb      	ldr	r3, [r7, #24]
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	4a1b      	ldr	r2, [pc, #108]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002bbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bc2:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002bc4:	4a19      	ldr	r2, [pc, #100]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	691a      	ldr	r2, [r3, #16]
 8002bce:	4b17      	ldr	r3, [pc, #92]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002bd0:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8002bd2:	4b16      	ldr	r3, [pc, #88]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002bd4:	4a17      	ldr	r2, [pc, #92]	; (8002c34 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8002bd6:	601a      	str	r2, [r3, #0]
        break;
 8002bd8:	e03f      	b.n	8002c5a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	7f1b      	ldrb	r3, [r3, #28]
 8002bde:	061b      	lsls	r3, r3, #24
 8002be0:	461a      	mov	r2, r3
 8002be2:	69bb      	ldr	r3, [r7, #24]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	4a11      	ldr	r2, [pc, #68]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002be8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bec:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002bee:	4a0f      	ldr	r2, [pc, #60]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	691a      	ldr	r2, [r3, #16]
 8002bf8:	4b0c      	ldr	r3, [pc, #48]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002bfa:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8002bfc:	4b0b      	ldr	r3, [pc, #44]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002bfe:	4a0d      	ldr	r2, [pc, #52]	; (8002c34 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8002c00:	601a      	str	r2, [r3, #0]
        break;
 8002c02:	e02a      	b.n	8002c5a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	7f1b      	ldrb	r3, [r3, #28]
 8002c08:	061b      	lsls	r3, r3, #24
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	69bb      	ldr	r3, [r7, #24]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	4a06      	ldr	r2, [pc, #24]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002c12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c16:	61d3      	str	r3, [r2, #28]

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	7f5a      	ldrb	r2, [r3, #29]
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	7f9b      	ldrb	r3, [r3, #30]
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d015      	beq.n	8002c50 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b0>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8002c24:	4b01      	ldr	r3, [pc, #4]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002c26:	4a09      	ldr	r2, [pc, #36]	; (8002c4c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 8002c28:	601a      	str	r2, [r3, #0]
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
        }

        break;
 8002c2a:	e015      	b.n	8002c58 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b8>
 8002c2c:	52001000 	.word	0x52001000
 8002c30:	0002000a 	.word	0x0002000a
 8002c34:	00020201 	.word	0x00020201
 8002c38:	00020009 	.word	0x00020009
 8002c3c:	ffff00ef 	.word	0xffff00ef
 8002c40:	08027be8 	.word	0x08027be8
 8002c44:	08027c04 	.word	0x08027c04
 8002c48:	08027b30 	.word	0x08027b30
 8002c4c:	00010201 	.word	0x00010201
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8002c50:	4b04      	ldr	r3, [pc, #16]	; (8002c64 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c4>)
 8002c52:	f240 2201 	movw	r2, #513	; 0x201
 8002c56:	601a      	str	r2, [r3, #0]
        break;
 8002c58:	bf00      	nop
    }
}
 8002c5a:	bf00      	nop
 8002c5c:	3724      	adds	r7, #36	; 0x24
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd90      	pop	{r4, r7, pc}
 8002c62:	bf00      	nop
 8002c64:	52001000 	.word	0x52001000

08002c68 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8002c68:	b590      	push	{r4, r7, lr}
 8002c6a:	b085      	sub	sp, #20
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	6039      	str	r1, [r7, #0]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	7f9b      	ldrb	r3, [r3, #30]
 8002c76:	4619      	mov	r1, r3
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	f7ff fe47 	bl	800290c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8002c7e:	60f8      	str	r0, [r7, #12]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002c80:	4a2f      	ldr	r2, [pc, #188]	; (8002d40 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	8adb      	ldrh	r3, [r3, #22]
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	8a9b      	ldrh	r3, [r3, #20]
 8002c90:	041b      	lsls	r3, r3, #16
 8002c92:	431a      	orrs	r2, r3
 8002c94:	4b2a      	ldr	r3, [pc, #168]	; (8002d40 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8002c96:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	691a      	ldr	r2, [r3, #16]
 8002c9c:	4b28      	ldr	r3, [pc, #160]	; (8002d40 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8002c9e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	8b5b      	ldrh	r3, [r3, #26]
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	8a9b      	ldrh	r3, [r3, #20]
 8002caa:	1ad2      	subs	r2, r2, r3
 8002cac:	4b24      	ldr	r3, [pc, #144]	; (8002d40 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8002cae:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	2b08      	cmp	r3, #8
 8002cb6:	d12e      	bne.n	8002d16 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xae>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	8b5b      	ldrh	r3, [r3, #26]
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	8a9b      	ldrh	r3, [r3, #20]
 8002cc2:	1ad2      	subs	r2, r2, r3
 8002cc4:	4b1e      	ldr	r3, [pc, #120]	; (8002d40 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8002cc6:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	8b5b      	ldrh	r3, [r3, #26]
 8002ccc:	461a      	mov	r2, r3
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	8a9b      	ldrh	r3, [r3, #20]
 8002cd2:	1ad2      	subs	r2, r2, r3
 8002cd4:	4b1a      	ldr	r3, [pc, #104]	; (8002d40 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8002cd6:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002cd8:	4a19      	ldr	r2, [pc, #100]	; (8002d40 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	6253      	str	r3, [r2, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	7f1b      	ldrb	r3, [r3, #28]
 8002ce2:	061b      	lsls	r3, r3, #24
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	4a16      	ldr	r2, [pc, #88]	; (8002d40 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8002ce8:	4b16      	ldr	r3, [pc, #88]	; (8002d44 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xdc>)
 8002cea:	430b      	orrs	r3, r1
 8002cec:	61d3      	str	r3, [r2, #28]

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	330c      	adds	r3, #12
 8002cf2:	4c13      	ldr	r4, [pc, #76]	; (8002d40 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f7ff fbad 	bl	8002454 <_ZNK8touchgfx9colortypecvmEv>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	6223      	str	r3, [r4, #32]

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	691a      	ldr	r2, [r3, #16]
 8002d02:	4b0f      	ldr	r3, [pc, #60]	; (8002d40 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8002d04:	615a      	str	r2, [r3, #20]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	691a      	ldr	r2, [r3, #16]
 8002d0a:	4b0d      	ldr	r3, [pc, #52]	; (8002d40 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8002d0c:	60da      	str	r2, [r3, #12]

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 8002d0e:	4b0c      	ldr	r3, [pc, #48]	; (8002d40 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8002d10:	4a0d      	ldr	r2, [pc, #52]	; (8002d48 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe0>)
 8002d12:	601a      	str	r2, [r3, #0]
        WRITE_REG(DMA2D->OCOLR, blitOp.color);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
    }
}
 8002d14:	e010      	b.n	8002d38 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd0>
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8002d16:	4a0a      	ldr	r2, [pc, #40]	; (8002d40 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 8002d1c:	4b08      	ldr	r3, [pc, #32]	; (8002d40 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->OCOLR, blitOp.color);
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	330c      	adds	r3, #12
 8002d26:	4c06      	ldr	r4, [pc, #24]	; (8002d40 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f7ff fb93 	bl	8002454 <_ZNK8touchgfx9colortypecvmEv>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	63a3      	str	r3, [r4, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8002d32:	4b03      	ldr	r3, [pc, #12]	; (8002d40 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8002d34:	4a05      	ldr	r2, [pc, #20]	; (8002d4c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe4>)
 8002d36:	601a      	str	r2, [r3, #0]
}
 8002d38:	bf00      	nop
 8002d3a:	3714      	adds	r7, #20
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd90      	pop	{r4, r7, pc}
 8002d40:	52001000 	.word	0x52001000
 8002d44:	00010009 	.word	0x00010009
 8002d48:	00020201 	.word	0x00020201
 8002d4c:	00030201 	.word	0x00030201

08002d50 <_ZN20ExternalDMAJob_QueueILm2EE5frontEv>:
    External_DMA2D_JobTypeDef& front()
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
        return buffer_[head_];
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	3302      	adds	r3, #2
 8002d5e:	00db      	lsls	r3, r3, #3
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	4413      	add	r3, r2
    }
 8002d64:	4618      	mov	r0, r3
 8002d66:	370c      	adds	r7, #12
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr

08002d70 <_ZN20ExternalDMAJob_QueueILm2EE3popEv>:
    void pop()
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
        head_ = (head_ + 1) % max_size_;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	6812      	ldr	r2, [r2, #0]
 8002d82:	fbb3 f1f2 	udiv	r1, r3, r2
 8002d86:	fb01 f202 	mul.w	r2, r1, r2
 8002d8a:	1a9a      	subs	r2, r3, r2
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	605a      	str	r2, [r3, #4]
        count_--;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	1e5a      	subs	r2, r3, #1
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	60da      	str	r2, [r3, #12]
    }
 8002d9a:	bf00      	nop
 8002d9c:	370c      	adds	r7, #12
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr
	...

08002da8 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b082      	sub	sp, #8
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	4a05      	ldr	r2, [pc, #20]	; (8002dc8 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	601a      	str	r2, [r3, #0]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4618      	mov	r0, r3
 8002dba:	f7ff fb57 	bl	800246c <_ZN8touchgfx9DMA_QueueD1Ev>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3708      	adds	r7, #8
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	0802ab38 	.word	0x0802ab38

08002dcc <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f7ff ffe7 	bl	8002da8 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8002dda:	2114      	movs	r1, #20
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f023 fa8e 	bl	80262fe <_ZdlPvj>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4618      	mov	r0, r3
 8002de6:	3708      	adds	r7, #8
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}

08002dec <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
        : x(0), y(0), width(0), height(0)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2200      	movs	r2, #0
 8002df8:	801a      	strh	r2, [r3, #0]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	805a      	strh	r2, [r3, #2]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2200      	movs	r2, #0
 8002e04:	809a      	strh	r2, [r3, #4]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	80da      	strh	r2, [r3, #6]
    {
    }
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	4618      	mov	r0, r3
 8002e10:	370c      	adds	r7, #12
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr
	...

08002e1c <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
     * Registers an array of texts. This function is called automatically from
     * touchgfx_generic_init(). Should not be called under normal circumstances.
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
    {
        texts = t;
 8002e24:	4a04      	ldr	r2, [pc, #16]	; (8002e38 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6013      	str	r3, [r2, #0]
    }
 8002e2a:	bf00      	nop
 8002e2c:	370c      	adds	r7, #12
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr
 8002e36:	bf00      	nop
 8002e38:	240261d8 	.word	0x240261d8

08002e3c <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
    {
 8002e44:	4a04      	ldr	r2, [pc, #16]	; (8002e58 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	601a      	str	r2, [r3, #0]
    }
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	370c      	adds	r7, #12
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr
 8002e58:	08029b98 	.word	0x08029b98

08002e5c <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
    }
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	f7ff ffe9 	bl	8002e3c <_ZN8touchgfx12FontProviderD1Ev>
 8002e6a:	2104      	movs	r1, #4
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f023 fa46 	bl	80262fe <_ZdlPvj>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4618      	mov	r0, r3
 8002e76:	3708      	adds	r7, #8
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 8002e7c:	b480      	push	{r7}
 8002e7e:	b085      	sub	sp, #20
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	60b9      	str	r1, [r7, #8]
 8002e86:	607a      	str	r2, [r7, #4]
 8002e88:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 8002e8a:	4a0b      	ldr	r2, [pc, #44]	; (8002eb8 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	601a      	str	r2, [r3, #0]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	68ba      	ldr	r2, [r7, #8]
 8002e94:	605a      	str	r2, [r3, #4]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	609a      	str	r2, [r3, #8]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	683a      	ldr	r2, [r7, #0]
 8002ea0:	60da      	str	r2, [r3, #12]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	69ba      	ldr	r2, [r7, #24]
 8002ea6:	611a      	str	r2, [r3, #16]
    {
    }
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3714      	adds	r7, #20
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr
 8002eb6:	bf00      	nop
 8002eb8:	08029b88 	.word	0x08029b88

08002ebc <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 8002ebc:	b480      	push	{r7}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
    {
 8002ec4:	4a04      	ldr	r2, [pc, #16]	; (8002ed8 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	601a      	str	r2, [r3, #0]
    }
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4618      	mov	r0, r3
 8002ece:	370c      	adds	r7, #12
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr
 8002ed8:	08029b88 	.word	0x08029b88

08002edc <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b082      	sub	sp, #8
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
    }
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	f7ff ffe9 	bl	8002ebc <_ZN8touchgfx7MVPHeapD1Ev>
 8002eea:	2114      	movs	r1, #20
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f023 fa06 	bl	80262fe <_ZdlPvj>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3708      	adds	r7, #8
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}

08002efc <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8002efc:	b480      	push	{r7}
 8002efe:	b083      	sub	sp, #12
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8002f06:	bf00      	nop
 8002f08:	370c      	adds	r7, #12
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr

08002f12 <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 8002f12:	b480      	push	{r7}
 8002f14:	b083      	sub	sp, #12
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]
 8002f1a:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8002f1c:	bf00      	nop
 8002f1e:	370c      	adds	r7, #12
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr

08002f28 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8002f32:	bf00      	nop
 8002f34:	370c      	adds	r7, #12
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr

08002f3e <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 8002f3e:	b480      	push	{r7}
 8002f40:	b083      	sub	sp, #12
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	6078      	str	r0, [r7, #4]
 8002f46:	460b      	mov	r3, r1
 8002f48:	70fb      	strb	r3, [r7, #3]
    {
        (void)c; // Unused variable
    }
 8002f4a:	bf00      	nop
 8002f4c:	370c      	adds	r7, #12
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr

08002f56 <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 8002f56:	b480      	push	{r7}
 8002f58:	b083      	sub	sp, #12
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	6078      	str	r0, [r7, #4]
    {
    }
 8002f5e:	bf00      	nop
 8002f60:	370c      	adds	r7, #12
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr

08002f6a <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 8002f6a:	b480      	push	{r7}
 8002f6c:	b083      	sub	sp, #12
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
    {
    }
 8002f72:	bf00      	nop
 8002f74:	370c      	adds	r7, #12
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr
	...

08002f80 <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
    {
 8002f88:	4a04      	ldr	r2, [pc, #16]	; (8002f9c <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	601a      	str	r2, [r3, #0]
    }
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4618      	mov	r0, r3
 8002f92:	370c      	adds	r7, #12
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr
 8002f9c:	08029b60 	.word	0x08029b60

08002fa0 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b082      	sub	sp, #8
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
    }
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	f7ff ffe9 	bl	8002f80 <_ZN8touchgfx15UIEventListenerD1Ev>
 8002fae:	2104      	movs	r1, #4
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f023 f9a4 	bl	80262fe <_ZdlPvj>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3708      	adds	r7, #8
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <_ZN8touchgfx3LCDD1Ev>:
        : textureMapperClass(0)
    {
    }

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
    {
 8002fc8:	4a04      	ldr	r2, [pc, #16]	; (8002fdc <_ZN8touchgfx3LCDD1Ev+0x1c>)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	601a      	str	r2, [r3, #0]
    }
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	370c      	adds	r7, #12
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr
 8002fdc:	0802adfc 	.word	0x0802adfc

08002fe0 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b082      	sub	sp, #8
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
    }
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	f7ff ffe9 	bl	8002fc0 <_ZN8touchgfx3LCDD1Ev>
 8002fee:	2108      	movs	r1, #8
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f023 f984 	bl	80262fe <_ZdlPvj>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3708      	adds	r7, #8
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <_ZN8touchgfx11Application19changeToStartScreenEv>:
     * @note The application will not make a complete restart - if
     *       your Model contains data, this will not be reset, unless
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
    {
    }
 8003008:	bf00      	nop
 800300a:	370c      	adds	r7, #12
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr

08003014 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	460b      	mov	r3, r1
 800301e:	70fb      	strb	r3, [r7, #3]
    {
        (void)screenId; // Unused variable
    }
 8003020:	bf00      	nop
 8003022:	370c      	adds	r7, #12
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr

0800302c <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	683a      	ldr	r2, [r7, #0]
 800303a:	f503 7398 	add.w	r3, r3, #304	; 0x130
 800303e:	6810      	ldr	r0, [r2, #0]
 8003040:	6851      	ldr	r1, [r2, #4]
 8003042:	c303      	stmia	r3!, {r0, r1}
    }
 8003044:	bf00      	nop
 8003046:	370c      	adds	r7, #12
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr

08003050 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
    {
 8003058:	4a04      	ldr	r2, [pc, #16]	; (800306c <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	601a      	str	r2, [r3, #0]
    }
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4618      	mov	r0, r3
 8003062:	370c      	adds	r7, #12
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr
 800306c:	08029b48 	.word	0x08029b48

08003070 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 8003070:	b580      	push	{r7, lr}
 8003072:	b082      	sub	sp, #8
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
    }
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	f7ff ffe9 	bl	8003050 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800307e:	2104      	movs	r1, #4
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	f023 f93c 	bl	80262fe <_ZdlPvj>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4618      	mov	r0, r3
 800308a:	3708      	adds	r7, #8
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}

08003090 <_ZN8touchgfx18MCUInstrumentationC1Ev>:
    MCUInstrumentation()
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
          cc_in(0)
 8003098:	4a07      	ldr	r2, [pc, #28]	; (80030b8 <_ZN8touchgfx18MCUInstrumentationC1Ev+0x28>)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	601a      	str	r2, [r3, #0]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	605a      	str	r2, [r3, #4]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2200      	movs	r2, #0
 80030a8:	609a      	str	r2, [r3, #8]
    }
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4618      	mov	r0, r3
 80030ae:	370c      	adds	r7, #12
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr
 80030b8:	08029760 	.word	0x08029760

080030bc <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 80030bc:	b480      	push	{r7}
 80030be:	b083      	sub	sp, #12
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	801a      	strh	r2, [r3, #0]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	805a      	strh	r2, [r3, #2]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	809a      	strh	r2, [r3, #4]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2200      	movs	r2, #0
 80030da:	80da      	strh	r2, [r3, #6]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2200      	movs	r2, #0
 80030e0:	811a      	strh	r2, [r3, #8]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2200      	movs	r2, #0
 80030e6:	815a      	strh	r2, [r3, #10]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2200      	movs	r2, #0
 80030ec:	819a      	strh	r2, [r3, #12]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	739a      	strb	r2, [r3, #14]
        {
        }
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	4618      	mov	r0, r3
 80030f8:	370c      	adds	r7, #12
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr

08003102 <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 8003102:	b580      	push	{r7, lr}
 8003104:	b082      	sub	sp, #8
 8003106:	af00      	add	r7, sp, #0
 8003108:	6078      	str	r0, [r7, #4]
        : drag(), listener(0), dragThresholdValue(0)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4618      	mov	r0, r3
 800310e:	f7ff ffd5 	bl	80030bc <_ZN8touchgfx8Gestures9DragStateC1Ev>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	611a      	str	r2, [r3, #16]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2200      	movs	r2, #0
 800311c:	829a      	strh	r2, [r3, #20]
    {
    }
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4618      	mov	r0, r3
 8003122:	3708      	adds	r7, #8
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 8003128:	b580      	push	{r7, lr}
 800312a:	b084      	sub	sp, #16
 800312c:	af00      	add	r7, sp, #0
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	607a      	str	r2, [r7, #4]
 8003134:	603b      	str	r3, [r7, #0]
          lastRenderMethod(HARDWARE)
 8003136:	4a55      	ldr	r2, [pc, #340]	; (800328c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x164>)
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	601a      	str	r2, [r3, #0]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	68ba      	ldr	r2, [r7, #8]
 8003140:	605a      	str	r2, [r3, #4]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	609a      	str	r2, [r3, #8]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	683a      	ldr	r2, [r7, #0]
 800314c:	60da      	str	r2, [r3, #12]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2200      	movs	r2, #0
 8003152:	611a      	str	r2, [r3, #16]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2200      	movs	r2, #0
 8003158:	615a      	str	r2, [r3, #20]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2200      	movs	r2, #0
 800315e:	619a      	str	r2, [r3, #24]
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	331c      	adds	r3, #28
 8003164:	4618      	mov	r0, r3
 8003166:	f7ff ffcc 	bl	8003102 <_ZN8touchgfx8GesturesC1Ev>
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2200      	movs	r2, #0
 800316e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2200      	movs	r2, #0
 8003176:	639a      	str	r2, [r3, #56]	; 0x38
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2200      	movs	r2, #0
 800317c:	63da      	str	r2, [r3, #60]	; 0x3c
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2200      	movs	r2, #0
 8003182:	641a      	str	r2, [r3, #64]	; 0x40
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2200      	movs	r2, #0
 8003188:	645a      	str	r2, [r3, #68]	; 0x44
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2200      	movs	r2, #0
 800318e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2201      	movs	r2, #1
 8003196:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2200      	movs	r2, #0
 800319e:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2200      	movs	r2, #0
 80031a6:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2200      	movs	r2, #0
 80031ae:	64da      	str	r2, [r3, #76]	; 0x4c
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	3350      	adds	r3, #80	; 0x50
 80031b4:	4618      	mov	r0, r3
 80031b6:	f7ff fe19 	bl	8002dec <_ZN8touchgfx4RectC1Ev>
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2200      	movs	r2, #0
 80031be:	659a      	str	r2, [r3, #88]	; 0x58
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2200      	movs	r2, #0
 80031c4:	65da      	str	r2, [r3, #92]	; 0x5c
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2200      	movs	r2, #0
 80031ca:	661a      	str	r2, [r3, #96]	; 0x60
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2200      	movs	r2, #0
 80031d8:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2200      	movs	r2, #0
 80031e0:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2200      	movs	r2, #0
 80031f0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2200      	movs	r2, #0
 80031f8:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2200      	movs	r2, #0
 8003200:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2200      	movs	r2, #0
 8003208:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2200      	movs	r2, #0
 8003210:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2200      	movs	r2, #0
 8003218:	671a      	str	r2, [r3, #112]	; 0x70
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2200      	movs	r2, #0
 800321e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2200      	movs	r2, #0
 8003226:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2200      	movs	r2, #0
 800322e:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2201      	movs	r2, #1
 8003236:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2201      	movs	r2, #1
 800323e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        instance = this;
 8003242:	4a13      	ldr	r2, [pc, #76]	; (8003290 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x168>)
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6013      	str	r3, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8003248:	4a12      	ldr	r2, [pc, #72]	; (8003294 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 800324a:	8b3b      	ldrh	r3, [r7, #24]
 800324c:	8013      	strh	r3, [r2, #0]
 800324e:	4b11      	ldr	r3, [pc, #68]	; (8003294 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 8003250:	881a      	ldrh	r2, [r3, #0]
 8003252:	4b11      	ldr	r3, [pc, #68]	; (8003298 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x170>)
 8003254:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8003256:	4a11      	ldr	r2, [pc, #68]	; (800329c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 8003258:	8bbb      	ldrh	r3, [r7, #28]
 800325a:	8013      	strh	r3, [r2, #0]
 800325c:	4b0f      	ldr	r3, [pc, #60]	; (800329c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 800325e:	881a      	ldrh	r2, [r3, #0]
 8003260:	4b0f      	ldr	r3, [pc, #60]	; (80032a0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x178>)
 8003262:	801a      	strh	r2, [r3, #0]
        DISPLAY_ROTATION = rotate0;
 8003264:	4b0f      	ldr	r3, [pc, #60]	; (80032a4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x17c>)
 8003266:	2200      	movs	r2, #0
 8003268:	701a      	strb	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 800326a:	8b3a      	ldrh	r2, [r7, #24]
 800326c:	8bbb      	ldrh	r3, [r7, #28]
 800326e:	429a      	cmp	r2, r3
 8003270:	bf34      	ite	cc
 8003272:	2301      	movcc	r3, #1
 8003274:	2300      	movcs	r3, #0
 8003276:	b2db      	uxtb	r3, r3
 8003278:	461a      	mov	r2, r3
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	4618      	mov	r0, r3
 8003284:	3710      	adds	r7, #16
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	0802aa10 	.word	0x0802aa10
 8003290:	2402617c 	.word	0x2402617c
 8003294:	24026170 	.word	0x24026170
 8003298:	24026176 	.word	0x24026176
 800329c:	24026172 	.word	0x24026172
 80032a0:	24026178 	.word	0x24026178
 80032a4:	24026174 	.word	0x24026174

080032a8 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b082      	sub	sp, #8
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	4a05      	ldr	r2, [pc, #20]	; (80032c8 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	601a      	str	r2, [r3, #0]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4618      	mov	r0, r3
 80032ba:	f7ff fe61 	bl	8002f80 <_ZN8touchgfx15UIEventListenerD1Ev>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4618      	mov	r0, r3
 80032c2:	3708      	adds	r7, #8
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	0802ae54 	.word	0x0802ae54

080032cc <_ZN8touchgfx11ApplicationD0Ev>:
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b082      	sub	sp, #8
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	f7ff ffe7 	bl	80032a8 <_ZN8touchgfx11ApplicationD1Ev>
 80032da:	f44f 719e 	mov.w	r1, #316	; 0x13c
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f023 f80d 	bl	80262fe <_ZdlPvj>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	4618      	mov	r0, r3
 80032e8:	3708      	adds	r7, #8
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}

080032ee <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 80032ee:	b580      	push	{r7, lr}
 80032f0:	b082      	sub	sp, #8
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f000 f804 	bl	8003304 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 80032fc:	bf00      	nop
 80032fe:	3708      	adds	r7, #8
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}

08003304 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 8003304:	b580      	push	{r7, lr}
 8003306:	b082      	sub	sp, #8
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003312:	2b00      	cmp	r3, #0
 8003314:	d00f      	beq.n	8003336 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	330c      	adds	r3, #12
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4610      	mov	r0, r2
 800332a:	4798      	blx	r3
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d001      	beq.n	8003336 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8003332:	2301      	movs	r3, #1
 8003334:	e000      	b.n	8003338 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 8003336:	2300      	movs	r3, #0
 8003338:	2b00      	cmp	r3, #0
 800333a:	d00e      	beq.n	800335a <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	3308      	adds	r3, #8
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4610      	mov	r0, r2
 8003350:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
        }
    }
 800335a:	bf00      	nop
 800335c:	3708      	adds	r7, #8
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
	...

08003364 <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 8003364:	b580      	push	{r7, lr}
 8003366:	b082      	sub	sp, #8
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	4a05      	ldr	r2, [pc, #20]	; (8003384 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	601a      	str	r2, [r3, #0]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4618      	mov	r0, r3
 8003376:	f7ff ff97 	bl	80032a8 <_ZN8touchgfx11ApplicationD1Ev>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4618      	mov	r0, r3
 800337e:	3708      	adds	r7, #8
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}
 8003384:	08029afc 	.word	0x08029afc

08003388 <_ZN8touchgfx14MVPApplicationD0Ev>:
 8003388:	b580      	push	{r7, lr}
 800338a:	b082      	sub	sp, #8
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f7ff ffe7 	bl	8003364 <_ZN8touchgfx14MVPApplicationD1Ev>
 8003396:	f44f 71a2 	mov.w	r1, #324	; 0x144
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f022 ffaf 	bl	80262fe <_ZdlPvj>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	4618      	mov	r0, r3
 80033a4:	3708      	adds	r7, #8
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
	...

080033ac <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b082      	sub	sp, #8
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	4a08      	ldr	r2, [pc, #32]	; (80033d8 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	601a      	str	r2, [r3, #0]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80033c0:	4618      	mov	r0, r3
 80033c2:	f000 fb31 	bl	8003a28 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4618      	mov	r0, r3
 80033ca:	f7ff ffcb 	bl	8003364 <_ZN8touchgfx14MVPApplicationD1Ev>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4618      	mov	r0, r3
 80033d2:	3708      	adds	r7, #8
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}
 80033d8:	08029a98 	.word	0x08029a98

080033dc <_ZN23FrontendApplicationBaseD0Ev>:
 80033dc:	b580      	push	{r7, lr}
 80033de:	b082      	sub	sp, #8
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f7ff ffe1 	bl	80033ac <_ZN23FrontendApplicationBaseD1Ev>
 80033ea:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f022 ff85 	bl	80262fe <_ZdlPvj>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	4618      	mov	r0, r3
 80033f8:	3708      	adds	r7, #8
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}

080033fe <_ZN23FrontendApplicationBase19changeToStartScreenEv>:

    virtual void changeToStartScreen()
 80033fe:	b580      	push	{r7, lr}
 8003400:	b082      	sub	sp, #8
 8003402:	af00      	add	r7, sp, #0
 8003404:	6078      	str	r0, [r7, #4]
    {
        gotoMainScreenScreenNoTransition();
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f004 f9ce 	bl	80077a8 <_ZN23FrontendApplicationBase32gotoMainScreenScreenNoTransitionEv>
    }
 800340c:	bf00      	nop
 800340e:	3708      	adds	r7, #8
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}

08003414 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8003414:	b580      	push	{r7, lr}
 8003416:	b082      	sub	sp, #8
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	4a05      	ldr	r2, [pc, #20]	; (8003434 <_ZN19FrontendApplicationD1Ev+0x20>)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	601a      	str	r2, [r3, #0]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4618      	mov	r0, r3
 8003426:	f7ff ffc1 	bl	80033ac <_ZN23FrontendApplicationBaseD1Ev>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4618      	mov	r0, r3
 800342e:	3708      	adds	r7, #8
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}
 8003434:	08029a4c 	.word	0x08029a4c

08003438 <_ZN19FrontendApplicationD0Ev>:
 8003438:	b580      	push	{r7, lr}
 800343a:	b082      	sub	sp, #8
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f7ff ffe7 	bl	8003414 <_ZN19FrontendApplicationD1Ev>
 8003446:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f022 ff57 	bl	80262fe <_ZdlPvj>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	4618      	mov	r0, r3
 8003454:	3708      	adds	r7, #8
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}

0800345a <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 800345a:	b580      	push	{r7, lr}
 800345c:	b082      	sub	sp, #8
 800345e:	af00      	add	r7, sp, #0
 8003460:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8003468:	4618      	mov	r0, r3
 800346a:	f005 fdcb 	bl	8009004 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4618      	mov	r0, r3
 8003472:	f018 f9a7 	bl	801b7c4 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 8003476:	bf00      	nop
 8003478:	3708      	adds	r7, #8
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}

0800347e <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 800347e:	b580      	push	{r7, lr}
 8003480:	b082      	sub	sp, #8
 8003482:	af00      	add	r7, sp, #0
 8003484:	6078      	str	r0, [r7, #4]
 8003486:	6039      	str	r1, [r7, #0]
    {
        app.gotoMainScreenScreenNoTransition();
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	4618      	mov	r0, r3
 800348c:	f004 f98c 	bl	80077a8 <_ZN23FrontendApplicationBase32gotoMainScreenScreenNoTransitionEv>
    }
 8003490:	bf00      	nop
 8003492:	3708      	adds	r7, #8
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}

08003498 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 8003498:	b580      	push	{r7, lr}
 800349a:	b086      	sub	sp, #24
 800349c:	af02      	add	r7, sp, #8
 800349e:	60f8      	str	r0, [r7, #12]
 80034a0:	60b9      	str	r1, [r7, #8]
 80034a2:	607a      	str	r2, [r7, #4]
 80034a4:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 80034a6:	68f8      	ldr	r0, [r7, #12]
 80034a8:	69bb      	ldr	r3, [r7, #24]
 80034aa:	9300      	str	r3, [sp, #0]
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	68b9      	ldr	r1, [r7, #8]
 80034b2:	f7ff fce3 	bl	8002e7c <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 80034b6:	4a04      	ldr	r2, [pc, #16]	; (80034c8 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	601a      	str	r2, [r3, #0]
    {

    }
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	4618      	mov	r0, r3
 80034c0:	3710      	adds	r7, #16
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	08029a38 	.word	0x08029a38

080034cc <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 80034cc:	b580      	push	{r7, lr}
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	4801      	ldr	r0, [pc, #4]	; (80034d8 <__tcf_0+0xc>)
 80034d2:	f000 f97d 	bl	80037d0 <_ZN12FrontendHeapD1Ev>
 80034d6:	bd80      	pop	{r7, pc}
 80034d8:	24005bcc 	.word	0x24005bcc

080034dc <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 80034dc:	b580      	push	{r7, lr}
 80034de:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 80034e0:	4b12      	ldr	r3, [pc, #72]	; (800352c <_ZN12FrontendHeap11getInstanceEv+0x50>)
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	f3bf 8f5b 	dmb	ish
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	f003 0301 	and.w	r3, r3, #1
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	bf0c      	ite	eq
 80034f2:	2301      	moveq	r3, #1
 80034f4:	2300      	movne	r3, #0
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d013      	beq.n	8003524 <_ZN12FrontendHeap11getInstanceEv+0x48>
 80034fc:	480b      	ldr	r0, [pc, #44]	; (800352c <_ZN12FrontendHeap11getInstanceEv+0x50>)
 80034fe:	f022 ff00 	bl	8026302 <__cxa_guard_acquire>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	bf14      	ite	ne
 8003508:	2301      	movne	r3, #1
 800350a:	2300      	moveq	r3, #0
 800350c:	b2db      	uxtb	r3, r3
 800350e:	2b00      	cmp	r3, #0
 8003510:	d008      	beq.n	8003524 <_ZN12FrontendHeap11getInstanceEv+0x48>
 8003512:	4807      	ldr	r0, [pc, #28]	; (8003530 <_ZN12FrontendHeap11getInstanceEv+0x54>)
 8003514:	f000 f868 	bl	80035e8 <_ZN12FrontendHeapC1Ev>
 8003518:	4806      	ldr	r0, [pc, #24]	; (8003534 <_ZN12FrontendHeap11getInstanceEv+0x58>)
 800351a:	f022 ff3d 	bl	8026398 <atexit>
 800351e:	4803      	ldr	r0, [pc, #12]	; (800352c <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8003520:	f022 fefb 	bl	802631a <__cxa_guard_release>
        return instance;
 8003524:	4b02      	ldr	r3, [pc, #8]	; (8003530 <_ZN12FrontendHeap11getInstanceEv+0x54>)
    }
 8003526:	4618      	mov	r0, r3
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	24005e54 	.word	0x24005e54
 8003530:	24005bcc 	.word	0x24005bcc
 8003534:	080034cd 	.word	0x080034cd

08003538 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 8003538:	b580      	push	{r7, lr}
 800353a:	b082      	sub	sp, #8
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	4a05      	ldr	r2, [pc, #20]	; (8003558 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	601a      	str	r2, [r3, #0]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4618      	mov	r0, r3
 800354a:	f7ff fcb7 	bl	8002ebc <_ZN8touchgfx7MVPHeapD1Ev>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4618      	mov	r0, r3
 8003552:	3708      	adds	r7, #8
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}
 8003558:	08029a38 	.word	0x08029a38

0800355c <_ZN16FrontendHeapBaseD0Ev>:
 800355c:	b580      	push	{r7, lr}
 800355e:	b082      	sub	sp, #8
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f7ff ffe7 	bl	8003538 <_ZN16FrontendHeapBaseD1Ev>
 800356a:	2114      	movs	r1, #20
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f022 fec6 	bl	80262fe <_ZdlPvj>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4618      	mov	r0, r3
 8003576:	3708      	adds	r7, #8
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}

0800357c <_ZN8touchgfx9PartitionINS_4meta8TypeListI19MainScreenPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 800357c:	b580      	push	{r7, lr}
 800357e:	b082      	sub	sp, #8
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	4618      	mov	r0, r3
 8003588:	f015 fb0e 	bl	8018ba8 <_ZN8touchgfx17AbstractPartitionC1Ev>
 800358c:	4a03      	ldr	r2, [pc, #12]	; (800359c <_ZN8touchgfx9PartitionINS_4meta8TypeListI19MainScreenPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	601a      	str	r2, [r3, #0]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4618      	mov	r0, r3
 8003596:	3708      	adds	r7, #8
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}
 800359c:	08029a04 	.word	0x08029a04

080035a0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14MainScreenViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b082      	sub	sp, #8
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	4618      	mov	r0, r3
 80035ac:	f015 fafc 	bl	8018ba8 <_ZN8touchgfx17AbstractPartitionC1Ev>
 80035b0:	4a03      	ldr	r2, [pc, #12]	; (80035c0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14MainScreenViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	601a      	str	r2, [r3, #0]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4618      	mov	r0, r3
 80035ba:	3708      	adds	r7, #8
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}
 80035c0:	080299d0 	.word	0x080299d0

080035c4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b082      	sub	sp, #8
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	4618      	mov	r0, r3
 80035d0:	f015 faea 	bl	8018ba8 <_ZN8touchgfx17AbstractPartitionC1Ev>
 80035d4:	4a03      	ldr	r2, [pc, #12]	; (80035e4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	601a      	str	r2, [r3, #0]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4618      	mov	r0, r3
 80035de:	3708      	adds	r7, #8
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	0802999c 	.word	0x0802999c

080035e8 <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 80035e8:	b590      	push	{r4, r7, lr}
 80035ea:	b085      	sub	sp, #20
 80035ec:	af02      	add	r7, sp, #8
 80035ee:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	f103 0114 	add.w	r1, r3, #20
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f503 748a 	add.w	r4, r3, #276	; 0x114
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	f503 7396 	add.w	r3, r3, #300	; 0x12c
                     app(model, *this)
 800360a:	9300      	str	r3, [sp, #0]
 800360c:	4623      	mov	r3, r4
 800360e:	f7ff ff43 	bl	8003498 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 8003612:	4a18      	ldr	r2, [pc, #96]	; (8003674 <_ZN12FrontendHeapC1Ev+0x8c>)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	601a      	str	r2, [r3, #0]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	3314      	adds	r3, #20
 800361c:	4618      	mov	r0, r3
 800361e:	f7ff ffad 	bl	800357c <_ZN8touchgfx9PartitionINS_4meta8TypeListI19MainScreenPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	332c      	adds	r3, #44	; 0x2c
 8003626:	4618      	mov	r0, r3
 8003628:	f7ff ffba 	bl	80035a0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14MainScreenViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8003632:	4618      	mov	r0, r3
 8003634:	f7ff ffc6 	bl	80035c4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800363e:	4618      	mov	r0, r3
 8003640:	f005 fcd2 	bl	8008fe8 <_ZN5ModelC1Ev>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f503 7096 	add.w	r0, r3, #300	; 0x12c
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	4619      	mov	r1, r3
 8003654:	f005 fb30 	bl	8008cb8 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
    {
        gotoStartScreen(app);
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8003660:	4619      	mov	r1, r3
 8003662:	4610      	mov	r0, r2
 8003664:	f7ff ff0b 	bl	800347e <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	4618      	mov	r0, r3
 800366c:	370c      	adds	r7, #12
 800366e:	46bd      	mov	sp, r7
 8003670:	bd90      	pop	{r4, r7, pc}
 8003672:	bf00      	nop
 8003674:	08029988 	.word	0x08029988

08003678 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 8003678:	b580      	push	{r7, lr}
 800367a:	b086      	sub	sp, #24
 800367c:	af02      	add	r7, sp, #8
 800367e:	60f8      	str	r0, [r7, #12]
 8003680:	60b9      	str	r1, [r7, #8]
 8003682:	607a      	str	r2, [r7, #4]
 8003684:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 8003686:	68f8      	ldr	r0, [r7, #12]
 8003688:	8bbb      	ldrh	r3, [r7, #28]
 800368a:	9301      	str	r3, [sp, #4]
 800368c:	8b3b      	ldrh	r3, [r7, #24]
 800368e:	9300      	str	r3, [sp, #0]
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	687a      	ldr	r2, [r7, #4]
 8003694:	68b9      	ldr	r1, [r7, #8]
 8003696:	f7ff fd47 	bl	8003128 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 800369a:	4a04      	ldr	r2, [pc, #16]	; (80036ac <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	601a      	str	r2, [r3, #0]
    }
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	4618      	mov	r0, r3
 80036a4:	3710      	adds	r7, #16
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	bf00      	nop
 80036ac:	08029c90 	.word	0x08029c90

080036b0 <_ZN8touchgfx25CortexMMCUInstrumentationC1Ev>:
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b082      	sub	sp, #8
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	4618      	mov	r0, r3
 80036bc:	f7ff fce8 	bl	8003090 <_ZN8touchgfx18MCUInstrumentationC1Ev>
 80036c0:	4a03      	ldr	r2, [pc, #12]	; (80036d0 <_ZN8touchgfx25CortexMMCUInstrumentationC1Ev+0x20>)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	601a      	str	r2, [r3, #0]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4618      	mov	r0, r3
 80036ca:	3708      	adds	r7, #8
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}
 80036d0:	08029738 	.word	0x08029738

080036d4 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b086      	sub	sp, #24
 80036d8:	af02      	add	r7, sp, #8
 80036da:	60f8      	str	r0, [r7, #12]
 80036dc:	60b9      	str	r1, [r7, #8]
 80036de:	607a      	str	r2, [r7, #4]
 80036e0:	603b      	str	r3, [r7, #0]
 80036e2:	68f8      	ldr	r0, [r7, #12]
 80036e4:	8bbb      	ldrh	r3, [r7, #28]
 80036e6:	9301      	str	r3, [sp, #4]
 80036e8:	8b3b      	ldrh	r3, [r7, #24]
 80036ea:	9300      	str	r3, [sp, #0]
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	68b9      	ldr	r1, [r7, #8]
 80036f2:	f7ff ffc1 	bl	8003678 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 80036f6:	4a06      	ldr	r2, [pc, #24]	; (8003710 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x3c>)
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	601a      	str	r2, [r3, #0]
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	337c      	adds	r3, #124	; 0x7c
 8003700:	4618      	mov	r0, r3
 8003702:	f7ff ffd5 	bl	80036b0 <_ZN8touchgfx25CortexMMCUInstrumentationC1Ev>
    }
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	4618      	mov	r0, r3
 800370a:	3710      	adds	r7, #16
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}
 8003710:	080297b8 	.word	0x080297b8

08003714 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 8003714:	b480      	push	{r7}
 8003716:	b083      	sub	sp, #12
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	4a04      	ldr	r2, [pc, #16]	; (8003730 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	601a      	str	r2, [r3, #0]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	4618      	mov	r0, r3
 8003726:	370c      	adds	r7, #12
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr
 8003730:	080297a0 	.word	0x080297a0

08003734 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 8003734:	b580      	push	{r7, lr}
 8003736:	b082      	sub	sp, #8
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	4618      	mov	r0, r3
 8003740:	f7ff ffe8 	bl	8003714 <_ZN8touchgfx15TouchControllerC1Ev>
 8003744:	4a03      	ldr	r2, [pc, #12]	; (8003754 <_ZN20STM32TouchControllerC1Ev+0x20>)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	601a      	str	r2, [r3, #0]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4618      	mov	r0, r3
 800374e:	3708      	adds	r7, #8
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}
 8003754:	08029788 	.word	0x08029788

08003758 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 8003758:	b590      	push	{r4, r7, lr}
 800375a:	b085      	sub	sp, #20
 800375c:	af02      	add	r7, sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 800375e:	f003 fe11 	bl	8007384 <_ZN14BitmapDatabase11getInstanceEv>
 8003762:	4604      	mov	r4, r0
 8003764:	f003 fe18 	bl	8007398 <_ZN14BitmapDatabase15getInstanceSizeEv>
 8003768:	4603      	mov	r3, r0
 800376a:	4619      	mov	r1, r3
 800376c:	2300      	movs	r3, #0
 800376e:	9300      	str	r3, [sp, #0]
 8003770:	2300      	movs	r3, #0
 8003772:	2200      	movs	r2, #0
 8003774:	4620      	mov	r0, r4
 8003776:	f01a fca5 	bl	801e0c4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
    TypedText::registerTexts(&texts);
 800377a:	4809      	ldr	r0, [pc, #36]	; (80037a0 <touchgfx_init+0x48>)
 800377c:	f7ff fb4e 	bl	8002e1c <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
    Texts::setLanguage(0);
 8003780:	2000      	movs	r0, #0
 8003782:	f005 fa07 	bl	8008b94 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 8003786:	4807      	ldr	r0, [pc, #28]	; (80037a4 <touchgfx_init+0x4c>)
 8003788:	f01a fb54 	bl	801de34 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

    FrontendHeap& heap = FrontendHeap::getInstance();
 800378c:	f7ff fea6 	bl	80034dc <_ZN12FrontendHeap11getInstanceEv>
 8003790:	6078      	str	r0, [r7, #4]
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 8003792:	4805      	ldr	r0, [pc, #20]	; (80037a8 <touchgfx_init+0x50>)
 8003794:	f7fd faea 	bl	8000d6c <_ZN11TouchGFXHAL10initializeEv>
}
 8003798:	bf00      	nop
 800379a:	370c      	adds	r7, #12
 800379c:	46bd      	mov	sp, r7
 800379e:	bd90      	pop	{r4, r7, pc}
 80037a0:	24006c5c 	.word	0x24006c5c
 80037a4:	24000020 	.word	0x24000020
 80037a8:	24006c60 	.word	0x24006c60

080037ac <touchgfx_components_init>:

void touchgfx_components_init()
{
 80037ac:	b480      	push	{r7}
 80037ae:	af00      	add	r7, sp, #0
}
 80037b0:	bf00      	nop
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr
	...

080037bc <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	af00      	add	r7, sp, #0
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 80037c0:	4802      	ldr	r0, [pc, #8]	; (80037cc <touchgfx_taskEntry+0x10>)
 80037c2:	f7fd faf1 	bl	8000da8 <_ZN11TouchGFXHAL9taskEntryEv>
}
 80037c6:	bf00      	nop
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop
 80037cc:	24006c60 	.word	0x24006c60

080037d0 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b082      	sub	sp, #8
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	4a10      	ldr	r2, [pc, #64]	; (800381c <_ZN12FrontendHeapD1Ev+0x4c>)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	601a      	str	r2, [r3, #0]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 80037e4:	4618      	mov	r0, r3
 80037e6:	f7ff fe15 	bl	8003414 <_ZN19FrontendApplicationD1Ev>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f503 738a 	add.w	r3, r3, #276	; 0x114
 80037f0:	4618      	mov	r0, r3
 80037f2:	f000 f827 	bl	8003844 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	332c      	adds	r3, #44	; 0x2c
 80037fa:	4618      	mov	r0, r3
 80037fc:	f000 f844 	bl	8003888 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14MainScreenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	3314      	adds	r3, #20
 8003804:	4618      	mov	r0, r3
 8003806:	f000 f861 	bl	80038cc <_ZN8touchgfx9PartitionINS_4meta8TypeListI19MainScreenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	4618      	mov	r0, r3
 800380e:	f7ff fe93 	bl	8003538 <_ZN16FrontendHeapBaseD1Ev>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4618      	mov	r0, r3
 8003816:	3708      	adds	r7, #8
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}
 800381c:	08029988 	.word	0x08029988

08003820 <_ZN12FrontendHeapD0Ev>:
 8003820:	b580      	push	{r7, lr}
 8003822:	b082      	sub	sp, #8
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f7ff ffd1 	bl	80037d0 <_ZN12FrontendHeapD1Ev>
 800382e:	f44f 7122 	mov.w	r1, #648	; 0x288
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f022 fd63 	bl	80262fe <_ZdlPvj>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	4618      	mov	r0, r3
 800383c:	3708      	adds	r7, #8
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}
	...

08003844 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8003844:	b580      	push	{r7, lr}
 8003846:	b082      	sub	sp, #8
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	4a05      	ldr	r2, [pc, #20]	; (8003864 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	601a      	str	r2, [r3, #0]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4618      	mov	r0, r3
 8003856:	f015 f9a6 	bl	8018ba6 <_ZN8touchgfx17AbstractPartitionD1Ev>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4618      	mov	r0, r3
 800385e:	3708      	adds	r7, #8
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}
 8003864:	0802999c 	.word	0x0802999c

08003868 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8003868:	b580      	push	{r7, lr}
 800386a:	b082      	sub	sp, #8
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f7ff ffe7 	bl	8003844 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003876:	2114      	movs	r1, #20
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f022 fd40 	bl	80262fe <_ZdlPvj>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4618      	mov	r0, r3
 8003882:	3708      	adds	r7, #8
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}

08003888 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14MainScreenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	4a05      	ldr	r2, [pc, #20]	; (80038a8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14MainScreenViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	601a      	str	r2, [r3, #0]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4618      	mov	r0, r3
 800389a:	f015 f984 	bl	8018ba6 <_ZN8touchgfx17AbstractPartitionD1Ev>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4618      	mov	r0, r3
 80038a2:	3708      	adds	r7, #8
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}
 80038a8:	080299d0 	.word	0x080299d0

080038ac <_ZN8touchgfx9PartitionINS_4meta8TypeListI14MainScreenViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b082      	sub	sp, #8
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f7ff ffe7 	bl	8003888 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14MainScreenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80038ba:	21e8      	movs	r1, #232	; 0xe8
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f022 fd1e 	bl	80262fe <_ZdlPvj>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4618      	mov	r0, r3
 80038c6:	3708      	adds	r7, #8
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}

080038cc <_ZN8touchgfx9PartitionINS_4meta8TypeListI19MainScreenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b082      	sub	sp, #8
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	4a05      	ldr	r2, [pc, #20]	; (80038ec <_ZN8touchgfx9PartitionINS_4meta8TypeListI19MainScreenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	601a      	str	r2, [r3, #0]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4618      	mov	r0, r3
 80038de:	f015 f962 	bl	8018ba6 <_ZN8touchgfx17AbstractPartitionD1Ev>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4618      	mov	r0, r3
 80038e6:	3708      	adds	r7, #8
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}
 80038ec:	08029a04 	.word	0x08029a04

080038f0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19MainScreenPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b082      	sub	sp, #8
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f7ff ffe7 	bl	80038cc <_ZN8touchgfx9PartitionINS_4meta8TypeListI19MainScreenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80038fe:	2118      	movs	r1, #24
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f022 fcfc 	bl	80262fe <_ZdlPvj>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4618      	mov	r0, r3
 800390a:	3708      	adds	r7, #8
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}

08003910 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8003910:	b580      	push	{r7, lr}
 8003912:	b082      	sub	sp, #8
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	4a05      	ldr	r2, [pc, #20]	; (8003930 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	601a      	str	r2, [r3, #0]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4618      	mov	r0, r3
 8003922:	f7ff fa8b 	bl	8002e3c <_ZN8touchgfx12FontProviderD1Ev>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4618      	mov	r0, r3
 800392a:	3708      	adds	r7, #8
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}
 8003930:	0802a0d4 	.word	0x0802a0d4

08003934 <_ZN23ApplicationFontProviderD0Ev>:
 8003934:	b580      	push	{r7, lr}
 8003936:	b082      	sub	sp, #8
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f7ff ffe7 	bl	8003910 <_ZN23ApplicationFontProviderD1Ev>
 8003942:	2104      	movs	r1, #4
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f022 fcda 	bl	80262fe <_ZdlPvj>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	4618      	mov	r0, r3
 800394e:	3708      	adds	r7, #8
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}

08003954 <_ZN8touchgfx8LCD24bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD24bpp : public LCD
 8003954:	b580      	push	{r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
 800395c:	4a05      	ldr	r2, [pc, #20]	; (8003974 <_ZN8touchgfx8LCD24bppD1Ev+0x20>)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	601a      	str	r2, [r3, #0]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	4618      	mov	r0, r3
 8003966:	f7ff fb2b 	bl	8002fc0 <_ZN8touchgfx3LCDD1Ev>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	4618      	mov	r0, r3
 800396e:	3708      	adds	r7, #8
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}
 8003974:	0802b168 	.word	0x0802b168

08003978 <_ZN8touchgfx8LCD24bppD0Ev>:
 8003978:	b580      	push	{r7, lr}
 800397a:	b082      	sub	sp, #8
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	f7ff ffe7 	bl	8003954 <_ZN8touchgfx8LCD24bppD1Ev>
 8003986:	2158      	movs	r1, #88	; 0x58
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f022 fcb8 	bl	80262fe <_ZdlPvj>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	4618      	mov	r0, r3
 8003992:	3708      	adds	r7, #8
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}

08003998 <_Z41__static_initialization_and_destruction_0ii>:
 8003998:	b580      	push	{r7, lr}
 800399a:	b084      	sub	sp, #16
 800399c:	af02      	add	r7, sp, #8
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	6039      	str	r1, [r7, #0]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d119      	bne.n	80039dc <_Z41__static_initialization_and_destruction_0ii+0x44>
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d114      	bne.n	80039dc <_Z41__static_initialization_and_destruction_0ii+0x44>
static STM32TouchController tc;
 80039b2:	4818      	ldr	r0, [pc, #96]	; (8003a14 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80039b4:	f7ff febe 	bl	8003734 <_ZN20STM32TouchControllerC1Ev>
static STM32DMA dma;
 80039b8:	4817      	ldr	r0, [pc, #92]	; (8003a18 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80039ba:	f7fe fecd 	bl	8002758 <_ZN8STM32DMAC1Ev>
static LCD24bpp display;
 80039be:	4817      	ldr	r0, [pc, #92]	; (8003a1c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80039c0:	f01c fdc8 	bl	8020554 <_ZN8touchgfx8LCD24bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 480, 272);
 80039c4:	f44f 7388 	mov.w	r3, #272	; 0x110
 80039c8:	9301      	str	r3, [sp, #4]
 80039ca:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80039ce:	9300      	str	r3, [sp, #0]
 80039d0:	4b10      	ldr	r3, [pc, #64]	; (8003a14 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80039d2:	4a12      	ldr	r2, [pc, #72]	; (8003a1c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80039d4:	4910      	ldr	r1, [pc, #64]	; (8003a18 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80039d6:	4812      	ldr	r0, [pc, #72]	; (8003a20 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80039d8:	f7ff fe7c 	bl	80036d4 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d113      	bne.n	8003a0a <_Z41__static_initialization_and_destruction_0ii+0x72>
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d10e      	bne.n	8003a0a <_Z41__static_initialization_and_destruction_0ii+0x72>
 80039ec:	480c      	ldr	r0, [pc, #48]	; (8003a20 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80039ee:	f7fd fac7 	bl	8000f80 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 80039f2:	480c      	ldr	r0, [pc, #48]	; (8003a24 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80039f4:	f7ff ff8c 	bl	8003910 <_ZN23ApplicationFontProviderD1Ev>
static LCD24bpp display;
 80039f8:	4808      	ldr	r0, [pc, #32]	; (8003a1c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80039fa:	f7ff ffab 	bl	8003954 <_ZN8touchgfx8LCD24bppD1Ev>
static STM32DMA dma;
 80039fe:	4806      	ldr	r0, [pc, #24]	; (8003a18 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8003a00:	f7fe fee4 	bl	80027cc <_ZN8STM32DMAD1Ev>
static STM32TouchController tc;
 8003a04:	4803      	ldr	r0, [pc, #12]	; (8003a14 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8003a06:	f7fc fe75 	bl	80006f4 <_ZN20STM32TouchControllerD1Ev>
}
 8003a0a:	bf00      	nop
 8003a0c:	3708      	adds	r7, #8
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	24005e58 	.word	0x24005e58
 8003a18:	24005e5c 	.word	0x24005e5c
 8003a1c:	24006c04 	.word	0x24006c04
 8003a20:	24006c60 	.word	0x24006c60
 8003a24:	24000020 	.word	0x24000020

08003a28 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b082      	sub	sp, #8
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	4a05      	ldr	r2, [pc, #20]	; (8003a48 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	601a      	str	r2, [r3, #0]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f7ff fb09 	bl	8003050 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4618      	mov	r0, r3
 8003a42:	3708      	adds	r7, #8
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	08029ae4 	.word	0x08029ae4

08003a4c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b082      	sub	sp, #8
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f7ff ffe7 	bl	8003a28 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8003a5a:	2110      	movs	r1, #16
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f022 fc4e 	bl	80262fe <_ZdlPvj>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4618      	mov	r0, r3
 8003a66:	3708      	adds	r7, #8
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}

08003a6c <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    {
        INTS_PR_ELEMENT = (sizeof(typename meta::select_type_maxsize<SupportedTypesList>::type) + sizeof(int) - 1) / sizeof(int),
        SIZE_OF_ELEMENT = INTS_PR_ELEMENT * sizeof(int)
    };

    virtual uint16_t capacity() const
 8003a6c:	b480      	push	{r7}
 8003a6e:	b083      	sub	sp, #12
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 8003a74:	2301      	movs	r3, #1
    }
 8003a76:	4618      	mov	r0, r3
 8003a78:	370c      	adds	r7, #12
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr

08003a82 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
 8003a82:	b480      	push	{r7}
 8003a84:	b083      	sub	sp, #12
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 8003a8a:	230c      	movs	r3, #12
    }
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	370c      	adds	r7, #12
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr

08003a98 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	460b      	mov	r3, r1
 8003aa2:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8003aa4:	887a      	ldrh	r2, [r7, #2]
 8003aa6:	4613      	mov	r3, r2
 8003aa8:	005b      	lsls	r3, r3, #1
 8003aaa:	4413      	add	r3, r2
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	3308      	adds	r3, #8
 8003ab0:	687a      	ldr	r2, [r7, #4]
 8003ab2:	4413      	add	r3, r2
    }
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	370c      	adds	r7, #12
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr

08003ac0 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
 8003ac0:	b480      	push	{r7}
 8003ac2:	b083      	sub	sp, #12
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	460b      	mov	r3, r1
 8003aca:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8003acc:	887a      	ldrh	r2, [r7, #2]
 8003ace:	4613      	mov	r3, r2
 8003ad0:	005b      	lsls	r3, r3, #1
 8003ad2:	4413      	add	r3, r2
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	3308      	adds	r3, #8
 8003ad8:	687a      	ldr	r2, [r7, #4]
 8003ada:	4413      	add	r3, r2
    }
 8003adc:	4618      	mov	r0, r3
 8003ade:	370c      	adds	r7, #12
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr

08003ae8 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI14MainScreenViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8003ae8:	b480      	push	{r7}
 8003aea:	b083      	sub	sp, #12
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8003af0:	2301      	movs	r3, #1
    }
 8003af2:	4618      	mov	r0, r3
 8003af4:	370c      	adds	r7, #12
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr

08003afe <_ZN8touchgfx9PartitionINS_4meta8TypeListI14MainScreenViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8003afe:	b480      	push	{r7}
 8003b00:	b083      	sub	sp, #12
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8003b06:	23e0      	movs	r3, #224	; 0xe0
    }
 8003b08:	4618      	mov	r0, r3
 8003b0a:	370c      	adds	r7, #12
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr

08003b14 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14MainScreenViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8003b14:	b480      	push	{r7}
 8003b16:	b083      	sub	sp, #12
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	460b      	mov	r3, r1
 8003b1e:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8003b20:	887a      	ldrh	r2, [r7, #2]
 8003b22:	4613      	mov	r3, r2
 8003b24:	00db      	lsls	r3, r3, #3
 8003b26:	1a9b      	subs	r3, r3, r2
 8003b28:	015b      	lsls	r3, r3, #5
 8003b2a:	3308      	adds	r3, #8
 8003b2c:	687a      	ldr	r2, [r7, #4]
 8003b2e:	4413      	add	r3, r2
    }
 8003b30:	4618      	mov	r0, r3
 8003b32:	370c      	adds	r7, #12
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr

08003b3c <_ZNK8touchgfx9PartitionINS_4meta8TypeListI14MainScreenViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8003b3c:	b480      	push	{r7}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	460b      	mov	r3, r1
 8003b46:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8003b48:	887a      	ldrh	r2, [r7, #2]
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	00db      	lsls	r3, r3, #3
 8003b4e:	1a9b      	subs	r3, r3, r2
 8003b50:	015b      	lsls	r3, r3, #5
 8003b52:	3308      	adds	r3, #8
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	4413      	add	r3, r2
    }
 8003b58:	4618      	mov	r0, r3
 8003b5a:	370c      	adds	r7, #12
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr

08003b64 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI19MainScreenPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8003b64:	b480      	push	{r7}
 8003b66:	b083      	sub	sp, #12
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8003b6c:	2301      	movs	r3, #1
    }
 8003b6e:	4618      	mov	r0, r3
 8003b70:	370c      	adds	r7, #12
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr

08003b7a <_ZN8touchgfx9PartitionINS_4meta8TypeListI19MainScreenPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8003b7a:	b480      	push	{r7}
 8003b7c:	b083      	sub	sp, #12
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8003b82:	2310      	movs	r3, #16
    }
 8003b84:	4618      	mov	r0, r3
 8003b86:	370c      	adds	r7, #12
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr

08003b90 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19MainScreenPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8003b90:	b480      	push	{r7}
 8003b92:	b083      	sub	sp, #12
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	460b      	mov	r3, r1
 8003b9a:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8003b9c:	887b      	ldrh	r3, [r7, #2]
 8003b9e:	011b      	lsls	r3, r3, #4
 8003ba0:	3308      	adds	r3, #8
 8003ba2:	687a      	ldr	r2, [r7, #4]
 8003ba4:	4413      	add	r3, r2
    }
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	370c      	adds	r7, #12
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr

08003bb2 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI19MainScreenPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8003bb2:	b480      	push	{r7}
 8003bb4:	b083      	sub	sp, #12
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	6078      	str	r0, [r7, #4]
 8003bba:	460b      	mov	r3, r1
 8003bbc:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8003bbe:	887b      	ldrh	r3, [r7, #2]
 8003bc0:	011b      	lsls	r3, r3, #4
 8003bc2:	3308      	adds	r3, #8
 8003bc4:	687a      	ldr	r2, [r7, #4]
 8003bc6:	4413      	add	r3, r2
    }
 8003bc8:	4618      	mov	r0, r3
 8003bca:	370c      	adds	r7, #12
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr

08003bd4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun)();
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	687a      	ldr	r2, [r7, #4]
 8003be2:	68d2      	ldr	r2, [r2, #12]
 8003be4:	1052      	asrs	r2, r2, #1
 8003be6:	1899      	adds	r1, r3, r2
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	f003 0301 	and.w	r3, r3, #1
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d102      	bne.n	8003bfa <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	e00a      	b.n	8003c10 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	687a      	ldr	r2, [r7, #4]
 8003c00:	68d2      	ldr	r2, [r2, #12]
 8003c02:	1052      	asrs	r2, r2, #1
 8003c04:	4413      	add	r3, r2
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	6892      	ldr	r2, [r2, #8]
 8003c0c:	4413      	add	r3, r2
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4608      	mov	r0, r1
 8003c12:	4798      	blx	r3
    }
 8003c14:	bf00      	nop
 8003c16:	3708      	adds	r7, #8
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}

08003c1c <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 8003c1c:	b480      	push	{r7}
 8003c1e:	b083      	sub	sp, #12
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun != 0);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d010      	beq.n	8003c4e <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d107      	bne.n	8003c44 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	f003 0301 	and.w	r3, r3, #1
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d101      	bne.n	8003c44 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8003c40:	2301      	movs	r3, #1
 8003c42:	e000      	b.n	8003c46 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 8003c44:	2300      	movs	r3, #0
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d001      	beq.n	8003c4e <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e000      	b.n	8003c50 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 8003c4e:	2300      	movs	r3, #0
    }
 8003c50:	4618      	mov	r0, r3
 8003c52:	370c      	adds	r7, #12
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr

08003c5c <_GLOBAL__sub_I_touchgfx_init>:
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003c64:	2001      	movs	r0, #1
 8003c66:	f7ff fe97 	bl	8003998 <_Z41__static_initialization_and_destruction_0ii>
 8003c6a:	bd80      	pop	{r7, pc}

08003c6c <_GLOBAL__sub_D_touchgfx_init>:
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	af00      	add	r7, sp, #0
 8003c70:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003c74:	2000      	movs	r0, #0
 8003c76:	f7ff fe8f 	bl	8003998 <_Z41__static_initialization_and_destruction_0ii>
 8003c7a:	bd80      	pop	{r7, pc}

08003c7c <_ZN8touchgfx9colortypeC1Em>:
    colortype(uint32_t col)
 8003c7c:	b480      	push	{r7}
 8003c7e:	b083      	sub	sp, #12
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	6039      	str	r1, [r7, #0]
        : color(col)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	683a      	ldr	r2, [r7, #0]
 8003c8a:	601a      	str	r2, [r3, #0]
    }
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	4618      	mov	r0, r3
 8003c90:	370c      	adds	r7, #12
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr
	...

08003c9c <_ZN8touchgfx8DrawableD1Ev>:
          visible(true)
    {
    }

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 8003c9c:	b480      	push	{r7}
 8003c9e:	b083      	sub	sp, #12
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
    {
 8003ca4:	4a04      	ldr	r2, [pc, #16]	; (8003cb8 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	601a      	str	r2, [r3, #0]
    }
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4618      	mov	r0, r3
 8003cae:	370c      	adds	r7, #12
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr
 8003cb8:	0802aea0 	.word	0x0802aea0

08003cbc <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b082      	sub	sp, #8
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
    }
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f7ff ffe9 	bl	8003c9c <_ZN8touchgfx8DrawableD1Ev>
 8003cca:	2128      	movs	r1, #40	; 0x28
 8003ccc:	6878      	ldr	r0, [r7, #4]
 8003cce:	f022 fb16 	bl	80262fe <_ZdlPvj>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3708      	adds	r7, #8
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}

08003cdc <_ZNK8touchgfx8Drawable17invalidateContentEv>:
     * Tell the framework that the contents of the Drawable needs to be redrawn. If the Drawable is
     * invisible, nothing happens. Subclasses of Drawable are encouraged to implement this function
     * and invalidate as little as possible, i.e. the smallest rectangle covering the visual element(s)
     * drawn by the widget.
     */
    virtual void invalidateContent() const
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b082      	sub	sp, #8
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
    {
        // Consider checking if *this is in the draw chain
        if (visible)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d005      	beq.n	8003cfa <_ZNK8touchgfx8Drawable17invalidateContentEv+0x1e>
        {
            invalidate();
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	3314      	adds	r3, #20
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	4798      	blx	r3
        }
    }
 8003cfa:	bf00      	nop
 8003cfc:	3708      	adds	r7, #8
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}

08003d02 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * Function for obtaining the first child of this drawable if any.
     *
     * @return A pointer on the first child drawable if any.
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
 8003d02:	b480      	push	{r7}
 8003d04:	b083      	sub	sp, #12
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8003d0a:	2300      	movs	r3, #0
    }
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	370c      	adds	r7, #12
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr

08003d18 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 8003d18:	b480      	push	{r7}
 8003d1a:	b083      	sub	sp, #12
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	460b      	mov	r3, r1
 8003d22:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	887a      	ldrh	r2, [r7, #2]
 8003d28:	809a      	strh	r2, [r3, #4]
    }
 8003d2a:	bf00      	nop
 8003d2c:	370c      	adds	r7, #12
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr

08003d36 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 8003d36:	b480      	push	{r7}
 8003d38:	b083      	sub	sp, #12
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	6078      	str	r0, [r7, #4]
 8003d3e:	460b      	mov	r3, r1
 8003d40:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	887a      	ldrh	r2, [r7, #2]
 8003d46:	80da      	strh	r2, [r3, #6]
    }
 8003d48:	bf00      	nop
 8003d4a:	370c      	adds	r7, #12
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr

08003d54 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 8003d54:	b480      	push	{r7}
 8003d56:	b083      	sub	sp, #12
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	460b      	mov	r3, r1
 8003d5e:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	887a      	ldrh	r2, [r7, #2]
 8003d64:	811a      	strh	r2, [r3, #8]
    }
 8003d66:	bf00      	nop
 8003d68:	370c      	adds	r7, #12
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr

08003d72 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 8003d72:	b480      	push	{r7}
 8003d74:	b083      	sub	sp, #12
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	6078      	str	r0, [r7, #4]
 8003d7a:	460b      	mov	r3, r1
 8003d7c:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	887a      	ldrh	r2, [r7, #2]
 8003d82:	815a      	strh	r2, [r3, #10]
    }
 8003d84:	bf00      	nop
 8003d86:	370c      	adds	r7, #12
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr

08003d90 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 8003d90:	b480      	push	{r7}
 8003d92:	b083      	sub	sp, #12
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
    {
    }
 8003d98:	bf00      	nop
 8003d9a:	370c      	adds	r7, #12
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr

08003da4 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8003da4:	b480      	push	{r7}
 8003da6:	b083      	sub	sp, #12
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8003dae:	bf00      	nop
 8003db0:	370c      	adds	r7, #12
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr

08003dba <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 8003dba:	b480      	push	{r7}
 8003dbc:	b083      	sub	sp, #12
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	6078      	str	r0, [r7, #4]
 8003dc2:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8003dc4:	bf00      	nop
 8003dc6:	370c      	adds	r7, #12
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr

08003dd0 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * ignores the event. The event is only received if the drawable is touchable and
     * visible.
     *
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
 8003dd0:	b480      	push	{r7}
 8003dd2:	b083      	sub	sp, #12
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8003dda:	bf00      	nop
 8003ddc:	370c      	adds	r7, #12
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr

08003de6 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 8003de6:	b480      	push	{r7}
 8003de8:	b083      	sub	sp, #12
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	6078      	str	r0, [r7, #4]
    {
    }
 8003dee:	bf00      	nop
 8003df0:	370c      	adds	r7, #12
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr

08003dfa <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 8003dfa:	b480      	push	{r7}
 8003dfc:	b083      	sub	sp, #12
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	6078      	str	r0, [r7, #4]
    {
        return visible;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 8003e08:	4618      	mov	r0, r3
 8003e0a:	370c      	adds	r7, #12
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr

08003e14 <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 8003e14:	b480      	push	{r7}
 8003e16:	b083      	sub	sp, #12
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 8003e22:	4618      	mov	r0, r3
 8003e24:	370c      	adds	r7, #12
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr

08003e2e <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 8003e2e:	b580      	push	{r7, lr}
 8003e30:	b082      	sub	sp, #8
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	6078      	str	r0, [r7, #4]
 8003e36:	460b      	mov	r3, r1
 8003e38:	807b      	strh	r3, [r7, #2]
 8003e3a:	4613      	mov	r3, r2
 8003e3c:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	3354      	adds	r3, #84	; 0x54
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	8879      	ldrh	r1, [r7, #2]
 8003e48:	687a      	ldr	r2, [r7, #4]
 8003e4a:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8003e4e:	b292      	uxth	r2, r2
 8003e50:	1a8a      	subs	r2, r1, r2
 8003e52:	b292      	uxth	r2, r2
 8003e54:	b210      	sxth	r0, r2
 8003e56:	8839      	ldrh	r1, [r7, #0]
 8003e58:	687a      	ldr	r2, [r7, #4]
 8003e5a:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8003e5e:	b292      	uxth	r2, r2
 8003e60:	1a8a      	subs	r2, r1, r2
 8003e62:	b292      	uxth	r2, r2
 8003e64:	b212      	sxth	r2, r2
 8003e66:	4601      	mov	r1, r0
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	4798      	blx	r3
    }
 8003e6c:	bf00      	nop
 8003e6e:	3708      	adds	r7, #8
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}

08003e74 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e82:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e8a:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e92:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 8003e94:	bf00      	nop
 8003e96:	370c      	adds	r7, #12
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr

08003ea0 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b084      	sub	sp, #16
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	60f8      	str	r0, [r7, #12]
 8003ea8:	60b9      	str	r1, [r7, #8]
 8003eaa:	607a      	str	r2, [r7, #4]
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
 8003eac:	68f8      	ldr	r0, [r7, #12]
 8003eae:	f7ff ffe1 	bl	8003e74 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	68fa      	ldr	r2, [r7, #12]
 8003ebe:	601a      	str	r2, [r3, #0]
    }
 8003ec0:	bf00      	nop
 8003ec2:	3710      	adds	r7, #16
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}

08003ec8 <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b082      	sub	sp, #8
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	3320      	adds	r3, #32
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	4798      	blx	r3
    }
 8003edc:	bf00      	nop
 8003ede:	3708      	adds	r7, #8
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}

08003ee4 <_ZN8touchgfx3HAL3lcdEv>:
    static LCD& lcd()
 8003ee4:	b480      	push	{r7}
 8003ee6:	af00      	add	r7, sp, #0
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8003ee8:	4b0b      	ldr	r3, [pc, #44]	; (8003f18 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d008      	beq.n	8003f06 <_ZN8touchgfx3HAL3lcdEv+0x22>
 8003ef4:	4b08      	ldr	r3, [pc, #32]	; (8003f18 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d003      	beq.n	8003f06 <_ZN8touchgfx3HAL3lcdEv+0x22>
            return *instance->auxiliaryLCD;
 8003efe:	4b06      	ldr	r3, [pc, #24]	; (8003f18 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f04:	e002      	b.n	8003f0c <_ZN8touchgfx3HAL3lcdEv+0x28>
        return instance->lcdRef;
 8003f06:	4b04      	ldr	r3, [pc, #16]	; (8003f18 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	689b      	ldr	r3, [r3, #8]
    }
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr
 8003f16:	bf00      	nop
 8003f18:	2402617c 	.word	0x2402617c

08003f1c <_ZN8touchgfx3HAL18getLCDRefreshCountEv>:
    uint32_t getLCDRefreshCount()
 8003f1c:	b480      	push	{r7}
 8003f1e:	b083      	sub	sp, #12
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
        return vSyncForFrame;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
    }
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	370c      	adds	r7, #12
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f34:	4770      	bx	lr

08003f36 <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 8003f36:	b480      	push	{r7}
 8003f38:	b083      	sub	sp, #12
 8003f3a:	af00      	add	r7, sp, #0
 8003f3c:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8003f44:	3301      	adds	r3, #1
 8003f46:	b2da      	uxtb	r2, r3
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 8003f4e:	bf00      	nop
 8003f50:	370c      	adds	r7, #12
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr

08003f5a <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     * Since a Widget is only one Drawable, Widget::getLastChild simply yields itself as
     * result, but only if the Widget isVisible and isTouchable.
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
 8003f5a:	b580      	push	{r7, lr}
 8003f5c:	b084      	sub	sp, #16
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	60f8      	str	r0, [r7, #12]
 8003f62:	607b      	str	r3, [r7, #4]
 8003f64:	460b      	mov	r3, r1
 8003f66:	817b      	strh	r3, [r7, #10]
 8003f68:	4613      	mov	r3, r2
 8003f6a:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f7ff ff43 	bl	8003dfa <_ZNK8touchgfx8Drawable9isVisibleEv>
 8003f74:	4603      	mov	r3, r0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d008      	beq.n	8003f8c <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f7ff ff49 	bl	8003e14 <_ZNK8touchgfx8Drawable11isTouchableEv>
 8003f82:	4603      	mov	r3, r0
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d001      	beq.n	8003f8c <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e000      	b.n	8003f8e <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d002      	beq.n	8003f98 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 8003f92:	68fa      	ldr	r2, [r7, #12]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	601a      	str	r2, [r3, #0]
        }
    }
 8003f98:	bf00      	nop
 8003f9a:	3710      	adds	r7, #16
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}

08003fa0 <_ZN8touchgfx6WidgetD1Ev>:
class Widget : public Drawable
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b082      	sub	sp, #8
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	4a05      	ldr	r2, [pc, #20]	; (8003fc0 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	601a      	str	r2, [r3, #0]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f7ff fe73 	bl	8003c9c <_ZN8touchgfx8DrawableD1Ev>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	4618      	mov	r0, r3
 8003fba:	3708      	adds	r7, #8
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}
 8003fc0:	08029c28 	.word	0x08029c28

08003fc4 <_ZN8touchgfx6WidgetD0Ev>:
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b082      	sub	sp, #8
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	f7ff ffe7 	bl	8003fa0 <_ZN8touchgfx6WidgetD1Ev>
 8003fd2:	2128      	movs	r1, #40	; 0x28
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	f022 f992 	bl	80262fe <_ZdlPvj>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3708      	adds	r7, #8
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}

08003fe4 <_ZN8touchgfx15VideoControllerD1Ev>:
        STOP,      ///< Stop the video
        SET_REPEAT ///< Set repeat mode
    };

    /** Virtual destructor. */
    virtual ~VideoController()
 8003fe4:	b480      	push	{r7}
 8003fe6:	b083      	sub	sp, #12
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
    {
 8003fec:	4a04      	ldr	r2, [pc, #16]	; (8004000 <_ZN8touchgfx15VideoControllerD1Ev+0x1c>)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	601a      	str	r2, [r3, #0]
    }
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	370c      	adds	r7, #12
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr
 8004000:	08029bec 	.word	0x08029bec

08004004 <_ZN8touchgfx15VideoControllerD0Ev>:
    virtual ~VideoController()
 8004004:	b580      	push	{r7, lr}
 8004006:	b082      	sub	sp, #8
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
    }
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f7ff ffe9 	bl	8003fe4 <_ZN8touchgfx15VideoControllerD1Ev>
 8004012:	2104      	movs	r1, #4
 8004014:	6878      	ldr	r0, [r7, #4]
 8004016:	f022 f972 	bl	80262fe <_ZdlPvj>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	4618      	mov	r0, r3
 800401e:	3708      	adds	r7, #8
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}

08004024 <_ZN20HardwareMJPEGDecoder6addDMAERN8touchgfx13DMA_InterfaceE>:
    void addDMA(touchgfx::DMA_Interface& dma)
 8004024:	b480      	push	{r7}
 8004026:	b083      	sub	sp, #12
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
 800402c:	6039      	str	r1, [r7, #0]
    {
        pDma = &dma;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	683a      	ldr	r2, [r7, #0]
 8004032:	645a      	str	r2, [r3, #68]	; 0x44
    }
 8004034:	bf00      	nop
 8004036:	370c      	adds	r7, #12
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr

08004040 <_ZN8touchgfx11VideoWidget14setVideoBufferEPh>:
     * Set video buffer data.
     * Only used when video frames are decoded to a buffer and not directly to the framebuffer.
     *
     * @param [in] videoBuffer Video buffer.
     */
    void setVideoBuffer(uint8_t* const videoBuffer)
 8004040:	b480      	push	{r7}
 8004042:	b083      	sub	sp, #12
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	6039      	str	r1, [r7, #0]
    {
        buffer = videoBuffer;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	683a      	ldr	r2, [r7, #0]
 800404e:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8004050:	bf00      	nop
 8004052:	370c      	adds	r7, #12
 8004054:	46bd      	mov	sp, r7
 8004056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405a:	4770      	bx	lr

0800405c <_ZN8touchgfx11VideoWidget20setVideoBufferFormatENS_6Bitmap12BitmapFormatEss>:
     *
     * @param bufferFormat Format of the videoBuffer (RGB565 or RGB888)
     * @param width  Width of the videoBuffer in pixels
     * @param height Height of the videoBuffer in pixels
     */
    void setVideoBufferFormat(Bitmap::BitmapFormat bufferFormat, int16_t width, int16_t height)
 800405c:	b480      	push	{r7}
 800405e:	b085      	sub	sp, #20
 8004060:	af00      	add	r7, sp, #0
 8004062:	60f8      	str	r0, [r7, #12]
 8004064:	4608      	mov	r0, r1
 8004066:	4611      	mov	r1, r2
 8004068:	461a      	mov	r2, r3
 800406a:	4603      	mov	r3, r0
 800406c:	72fb      	strb	r3, [r7, #11]
 800406e:	460b      	mov	r3, r1
 8004070:	813b      	strh	r3, [r7, #8]
 8004072:	4613      	mov	r3, r2
 8004074:	80fb      	strh	r3, [r7, #6]
    {
        format = bufferFormat;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	7afa      	ldrb	r2, [r7, #11]
 800407a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        bufferWidth = width;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	893a      	ldrh	r2, [r7, #8]
 8004082:	86da      	strh	r2, [r3, #54]	; 0x36
        bufferHeight = height;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	88fa      	ldrh	r2, [r7, #6]
 8004088:	871a      	strh	r2, [r3, #56]	; 0x38
    }
 800408a:	bf00      	nop
 800408c:	3714      	adds	r7, #20
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr
	...

08004098 <__NVIC_EnableIRQ>:
{
 8004098:	b480      	push	{r7}
 800409a:	b083      	sub	sp, #12
 800409c:	af00      	add	r7, sp, #0
 800409e:	4603      	mov	r3, r0
 80040a0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80040a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	db0b      	blt.n	80040c2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80040aa:	88fb      	ldrh	r3, [r7, #6]
 80040ac:	f003 021f 	and.w	r2, r3, #31
 80040b0:	4907      	ldr	r1, [pc, #28]	; (80040d0 <__NVIC_EnableIRQ+0x38>)
 80040b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80040b6:	095b      	lsrs	r3, r3, #5
 80040b8:	2001      	movs	r0, #1
 80040ba:	fa00 f202 	lsl.w	r2, r0, r2
 80040be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80040c2:	bf00      	nop
 80040c4:	370c      	adds	r7, #12
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr
 80040ce:	bf00      	nop
 80040d0:	e000e100 	.word	0xe000e100

080040d4 <__NVIC_DisableIRQ>:
{
 80040d4:	b480      	push	{r7}
 80040d6:	b083      	sub	sp, #12
 80040d8:	af00      	add	r7, sp, #0
 80040da:	4603      	mov	r3, r0
 80040dc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80040de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	db12      	blt.n	800410c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80040e6:	88fb      	ldrh	r3, [r7, #6]
 80040e8:	f003 021f 	and.w	r2, r3, #31
 80040ec:	490a      	ldr	r1, [pc, #40]	; (8004118 <__NVIC_DisableIRQ+0x44>)
 80040ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80040f2:	095b      	lsrs	r3, r3, #5
 80040f4:	2001      	movs	r0, #1
 80040f6:	fa00 f202 	lsl.w	r2, r0, r2
 80040fa:	3320      	adds	r3, #32
 80040fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004100:	f3bf 8f4f 	dsb	sy
}
 8004104:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004106:	f3bf 8f6f 	isb	sy
}
 800410a:	bf00      	nop
}
 800410c:	bf00      	nop
 800410e:	370c      	adds	r7, #12
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr
 8004118:	e000e100 	.word	0xe000e100

0800411c <__NVIC_SetPriority>:
{
 800411c:	b480      	push	{r7}
 800411e:	b083      	sub	sp, #12
 8004120:	af00      	add	r7, sp, #0
 8004122:	4603      	mov	r3, r0
 8004124:	6039      	str	r1, [r7, #0]
 8004126:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004128:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800412c:	2b00      	cmp	r3, #0
 800412e:	db0a      	blt.n	8004146 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	b2da      	uxtb	r2, r3
 8004134:	490c      	ldr	r1, [pc, #48]	; (8004168 <__NVIC_SetPriority+0x4c>)
 8004136:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800413a:	0112      	lsls	r2, r2, #4
 800413c:	b2d2      	uxtb	r2, r2
 800413e:	440b      	add	r3, r1
 8004140:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004144:	e00a      	b.n	800415c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	b2da      	uxtb	r2, r3
 800414a:	4908      	ldr	r1, [pc, #32]	; (800416c <__NVIC_SetPriority+0x50>)
 800414c:	88fb      	ldrh	r3, [r7, #6]
 800414e:	f003 030f 	and.w	r3, r3, #15
 8004152:	3b04      	subs	r3, #4
 8004154:	0112      	lsls	r2, r2, #4
 8004156:	b2d2      	uxtb	r2, r2
 8004158:	440b      	add	r3, r1
 800415a:	761a      	strb	r2, [r3, #24]
}
 800415c:	bf00      	nop
 800415e:	370c      	adds	r7, #12
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr
 8004168:	e000e100 	.word	0xe000e100
 800416c:	e000ed00 	.word	0xe000ed00

08004170 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
static uint16_t lcd_int_active_line;
static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 8004170:	b5b0      	push	{r4, r5, r7, lr}
 8004172:	b082      	sub	sp, #8
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	4618      	mov	r0, r3
 800417c:	f015 f80b 	bl	8019196 <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8004180:	687d      	ldr	r5, [r7, #4]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	3364      	adds	r3, #100	; 0x64
 8004188:	681c      	ldr	r4, [r3, #0]
 800418a:	f017 fa99 	bl	801b6c0 <_ZN8touchgfx11Application11getInstanceEv>
 800418e:	4603      	mov	r3, r0
 8004190:	4619      	mov	r1, r3
 8004192:	4628      	mov	r0, r5
 8004194:	47a0      	blx	r4
    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	3388      	adds	r3, #136	; 0x88
 800419e:	681c      	ldr	r4, [r3, #0]
 80041a0:	4a0b      	ldr	r2, [pc, #44]	; (80041d0 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x60>)
 80041a2:	2300      	movs	r3, #0
 80041a4:	490b      	ldr	r1, [pc, #44]	; (80041d4 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x64>)
 80041a6:	47a0      	blx	r4

    /*
     * Add DMA2D to hardware decoder
     */
    mjpegdecoder1.addDMA(dma);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	4619      	mov	r1, r3
 80041ae:	480a      	ldr	r0, [pc, #40]	; (80041d8 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x68>)
 80041b0:	f7ff ff38 	bl	8004024 <_ZN20HardwareMJPEGDecoder6addDMAERN8touchgfx13DMA_InterfaceE>

    /*
     * Add hardware decoder to video controller
     */
    videoController.addDecoder(mjpegdecoder1, 0);
 80041b4:	2200      	movs	r2, #0
 80041b6:	4908      	ldr	r1, [pc, #32]	; (80041d8 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x68>)
 80041b8:	4808      	ldr	r0, [pc, #32]	; (80041dc <_ZN20TouchGFXGeneratedHAL10initializeEv+0x6c>)
 80041ba:	f000 fa45 	bl	8004648 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10addDecoderER12MJPEGDecoderm>
    videoController.setRGBBuffer((uint8_t*)videoRGBBuffer, sizeof(videoRGBBuffer));
 80041be:	4a08      	ldr	r2, [pc, #32]	; (80041e0 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x70>)
 80041c0:	4908      	ldr	r1, [pc, #32]	; (80041e4 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x74>)
 80041c2:	4806      	ldr	r0, [pc, #24]	; (80041dc <_ZN20TouchGFXGeneratedHAL10initializeEv+0x6c>)
 80041c4:	f000 fa60 	bl	8004688 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12setRGBBufferEPhj>
}
 80041c8:	bf00      	nop
 80041ca:	3708      	adds	r7, #8
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bdb0      	pop	{r4, r5, r7, pc}
 80041d0:	2409fa00 	.word	0x2409fa00
 80041d4:	24040000 	.word	0x24040000
 80041d8:	24006ce8 	.word	0x24006ce8
 80041dc:	24006d30 	.word	0x24006d30
 80041e0:	0005fa00 	.word	0x0005fa00
 80041e4:	d0000000 	.word	0xd0000000

080041e8 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b082      	sub	sp, #8
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 80041f0:	2109      	movs	r1, #9
 80041f2:	205a      	movs	r0, #90	; 0x5a
 80041f4:	f7ff ff92 	bl	800411c <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 80041f8:	2109      	movs	r1, #9
 80041fa:	2058      	movs	r0, #88	; 0x58
 80041fc:	f7ff ff8e 	bl	800411c <__NVIC_SetPriority>
}
 8004200:	bf00      	nop
 8004202:	3708      	adds	r7, #8
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}

08004208 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b082      	sub	sp, #8
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 8004210:	205a      	movs	r0, #90	; 0x5a
 8004212:	f7ff ff41 	bl	8004098 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 8004216:	2058      	movs	r0, #88	; 0x58
 8004218:	f7ff ff3e 	bl	8004098 <__NVIC_EnableIRQ>
}
 800421c:	bf00      	nop
 800421e:	3708      	adds	r7, #8
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}

08004224 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b082      	sub	sp, #8
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 800422c:	205a      	movs	r0, #90	; 0x5a
 800422e:	f7ff ff51 	bl	80040d4 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 8004232:	2058      	movs	r0, #88	; 0x58
 8004234:	f7ff ff4e 	bl	80040d4 <__NVIC_DisableIRQ>
}
 8004238:	bf00      	nop
 800423a:	3708      	adds	r7, #8
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}

08004240 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 8004240:	b480      	push	{r7}
 8004242:	b083      	sub	sp, #12
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8004248:	4b11      	ldr	r3, [pc, #68]	; (8004290 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	b29b      	uxth	r3, r3
 800424e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004252:	b29b      	uxth	r3, r3
 8004254:	3b01      	subs	r3, #1
 8004256:	b29a      	uxth	r2, r3
 8004258:	4b0e      	ldr	r3, [pc, #56]	; (8004294 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 800425a:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 800425c:	4b0c      	ldr	r3, [pc, #48]	; (8004290 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800425e:	691b      	ldr	r3, [r3, #16]
 8004260:	b29b      	uxth	r3, r3
 8004262:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004266:	b29b      	uxth	r3, r3
 8004268:	3b01      	subs	r3, #1
 800426a:	b29a      	uxth	r2, r3
 800426c:	4b0a      	ldr	r3, [pc, #40]	; (8004298 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 800426e:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8004270:	4b08      	ldr	r3, [pc, #32]	; (8004294 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8004272:	881a      	ldrh	r2, [r3, #0]
 8004274:	4b06      	ldr	r3, [pc, #24]	; (8004290 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8004276:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8004278:	4b05      	ldr	r3, [pc, #20]	; (8004290 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800427a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800427c:	4a04      	ldr	r2, [pc, #16]	; (8004290 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800427e:	f043 0301 	orr.w	r3, r3, #1
 8004282:	6353      	str	r3, [r2, #52]	; 0x34
}
 8004284:	bf00      	nop
 8004286:	370c      	adds	r7, #12
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr
 8004290:	50001000 	.word	0x50001000
 8004294:	24006d7a 	.word	0x24006d7a
 8004298:	24006d7c 	.word	0x24006d7c

0800429c <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:

bool TouchGFXGeneratedHAL::beginFrame()
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b082      	sub	sp, #8
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
    return HAL::beginFrame();
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	4618      	mov	r0, r3
 80042a8:	f014 ff5c 	bl	8019164 <_ZN8touchgfx3HAL10beginFrameEv>
 80042ac:	4603      	mov	r3, r0
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3708      	adds	r7, #8
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
	...

080042b8 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:

void TouchGFXGeneratedHAL::endFrame()
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b082      	sub	sp, #8
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
    if (frameBufferUpdatedThisFrame)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d002      	beq.n	80042d0 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x18>
    {
        refreshRequested = true;
 80042ca:	4b07      	ldr	r3, [pc, #28]	; (80042e8 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x30>)
 80042cc:	2201      	movs	r2, #1
 80042ce:	701a      	strb	r2, [r3, #0]
    }
    HAL::endFrame();
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	4618      	mov	r0, r3
 80042d4:	f014 ff52 	bl	801917c <_ZN8touchgfx3HAL8endFrameEv>
    videoController.endFrame();
 80042d8:	4804      	ldr	r0, [pc, #16]	; (80042ec <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x34>)
 80042da:	f000 f9eb 	bl	80046b4 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE8endFrameEv>
}
 80042de:	bf00      	nop
 80042e0:	3708      	adds	r7, #8
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}
 80042e6:	bf00      	nop
 80042e8:	24006d78 	.word	0x24006d78
 80042ec:	24006d30 	.word	0x24006d30

080042f0 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 80042f0:	b480      	push	{r7}
 80042f2:	b083      	sub	sp, #12
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 80042f8:	4b03      	ldr	r3, [pc, #12]	; (8004308 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 80042fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	370c      	adds	r7, #12
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr
 8004308:	50001084 	.word	0x50001084

0800430c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 800430c:	b480      	push	{r7}
 800430e:	b083      	sub	sp, #12
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8004316:	4a06      	ldr	r2, [pc, #24]	; (8004330 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 800431c:	4b05      	ldr	r3, [pc, #20]	; (8004334 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 800431e:	2201      	movs	r2, #1
 8004320:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004322:	bf00      	nop
 8004324:	370c      	adds	r7, #12
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr
 800432e:	bf00      	nop
 8004330:	50001084 	.word	0x50001084
 8004334:	50001000 	.word	0x50001000

08004338 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b082      	sub	sp, #8
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6839      	ldr	r1, [r7, #0]
 8004346:	4618      	mov	r0, r3
 8004348:	f014 fed6 	bl	80190f8 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 800434c:	bf00      	nop
 800434e:	3708      	adds	r7, #8
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}

08004354 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b084      	sub	sp, #16
 8004358:	af00      	add	r7, sp, #0
 800435a:	60f8      	str	r0, [r7, #12]
 800435c:	60b9      	str	r1, [r7, #8]
 800435e:	607a      	str	r2, [r7, #4]
 8004360:	603b      	str	r3, [r7, #0]
    return HAL::blockCopy(dest, src, numBytes);
 8004362:	68f8      	ldr	r0, [r7, #12]
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	687a      	ldr	r2, [r7, #4]
 8004368:	68b9      	ldr	r1, [r7, #8]
 800436a:	f015 f830 	bl	80193ce <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 800436e:	4603      	mov	r3, r0
}
 8004370:	4618      	mov	r0, r3
 8004372:	3710      	adds	r7, #16
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}

08004378 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv>:

void TouchGFXGeneratedHAL::InvalidateCache()
{
 8004378:	b480      	push	{r7}
 800437a:	b087      	sub	sp, #28
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8004380:	4b26      	ldr	r3, [pc, #152]	; (800441c <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa4>)
 8004382:	695b      	ldr	r3, [r3, #20]
 8004384:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004388:	2b00      	cmp	r3, #0
 800438a:	bf14      	ite	ne
 800438c:	2301      	movne	r3, #1
 800438e:	2300      	moveq	r3, #0
 8004390:	b2db      	uxtb	r3, r3
 8004392:	2b00      	cmp	r3, #0
 8004394:	d03c      	beq.n	8004410 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x98>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8004396:	4b21      	ldr	r3, [pc, #132]	; (800441c <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa4>)
 8004398:	2200      	movs	r2, #0
 800439a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800439e:	f3bf 8f4f 	dsb	sy
}
 80043a2:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 80043a4:	4b1d      	ldr	r3, [pc, #116]	; (800441c <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa4>)
 80043a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043aa:	617b      	str	r3, [r7, #20]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	0b5b      	lsrs	r3, r3, #13
 80043b0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80043b4:	613b      	str	r3, [r7, #16]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	08db      	lsrs	r3, r3, #3
 80043ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043be:	60fb      	str	r3, [r7, #12]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	015a      	lsls	r2, r3, #5
 80043c4:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80043c8:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 80043ca:	68fa      	ldr	r2, [r7, #12]
 80043cc:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80043ce:	4913      	ldr	r1, [pc, #76]	; (800441c <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa4>)
 80043d0:	4313      	orrs	r3, r2
 80043d2:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	1e5a      	subs	r2, r3, #1
 80043da:	60fa      	str	r2, [r7, #12]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	bf14      	ite	ne
 80043e0:	2301      	movne	r3, #1
 80043e2:	2300      	moveq	r3, #0
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d000      	beq.n	80043ec <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x74>
      do {
 80043ea:	e7e9      	b.n	80043c0 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x48>
    } while(sets-- != 0U);
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	1e5a      	subs	r2, r3, #1
 80043f0:	613a      	str	r2, [r7, #16]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	bf14      	ite	ne
 80043f6:	2301      	movne	r3, #1
 80043f8:	2300      	moveq	r3, #0
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d000      	beq.n	8004402 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x8a>
    do {
 8004400:	e7d9      	b.n	80043b6 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x3e>
  __ASM volatile ("dsb 0xF":::"memory");
 8004402:	f3bf 8f4f 	dsb	sy
}
 8004406:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004408:	f3bf 8f6f 	isb	sy
}
 800440c:	bf00      	nop
}
 800440e:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 8004410:	bf00      	nop
 8004412:	371c      	adds	r7, #28
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr
 800441c:	e000ed00 	.word	0xe000ed00

08004420 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:

void TouchGFXGeneratedHAL::FlushCache()
{
 8004420:	b480      	push	{r7}
 8004422:	b087      	sub	sp, #28
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8004428:	4b26      	ldr	r3, [pc, #152]	; (80044c4 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa4>)
 800442a:	695b      	ldr	r3, [r3, #20]
 800442c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004430:	2b00      	cmp	r3, #0
 8004432:	bf14      	ite	ne
 8004434:	2301      	movne	r3, #1
 8004436:	2300      	moveq	r3, #0
 8004438:	b2db      	uxtb	r3, r3
 800443a:	2b00      	cmp	r3, #0
 800443c:	d03c      	beq.n	80044b8 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x98>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800443e:	4b21      	ldr	r3, [pc, #132]	; (80044c4 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa4>)
 8004440:	2200      	movs	r2, #0
 8004442:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8004446:	f3bf 8f4f 	dsb	sy
}
 800444a:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 800444c:	4b1d      	ldr	r3, [pc, #116]	; (80044c4 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa4>)
 800444e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004452:	617b      	str	r3, [r7, #20]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	0b5b      	lsrs	r3, r3, #13
 8004458:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800445c:	613b      	str	r3, [r7, #16]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	08db      	lsrs	r3, r3, #3
 8004462:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004466:	60fb      	str	r3, [r7, #12]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	015a      	lsls	r2, r3, #5
 800446c:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8004470:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8004472:	68fa      	ldr	r2, [r7, #12]
 8004474:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8004476:	4913      	ldr	r1, [pc, #76]	; (80044c4 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa4>)
 8004478:	4313      	orrs	r3, r2
 800447a:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	1e5a      	subs	r2, r3, #1
 8004482:	60fa      	str	r2, [r7, #12]
 8004484:	2b00      	cmp	r3, #0
 8004486:	bf14      	ite	ne
 8004488:	2301      	movne	r3, #1
 800448a:	2300      	moveq	r3, #0
 800448c:	b2db      	uxtb	r3, r3
 800448e:	2b00      	cmp	r3, #0
 8004490:	d000      	beq.n	8004494 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x74>
      do {
 8004492:	e7e9      	b.n	8004468 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x48>
    } while(sets-- != 0U);
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	1e5a      	subs	r2, r3, #1
 8004498:	613a      	str	r2, [r7, #16]
 800449a:	2b00      	cmp	r3, #0
 800449c:	bf14      	ite	ne
 800449e:	2301      	movne	r3, #1
 80044a0:	2300      	moveq	r3, #0
 80044a2:	b2db      	uxtb	r3, r3
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d000      	beq.n	80044aa <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x8a>
    do {
 80044a8:	e7d9      	b.n	800445e <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x3e>
  __ASM volatile ("dsb 0xF":::"memory");
 80044aa:	f3bf 8f4f 	dsb	sy
}
 80044ae:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80044b0:	f3bf 8f6f 	isb	sy
}
 80044b4:	bf00      	nop
}
 80044b6:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 80044b8:	bf00      	nop
 80044ba:	371c      	adds	r7, #28
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr
 80044c4:	e000ed00 	.word	0xe000ed00

080044c8 <videoTaskFunc>:

extern "C" void videoTaskFunc(void* argument)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b082      	sub	sp, #8
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
    videoController.decoderTaskEntry();
 80044d0:	4803      	ldr	r0, [pc, #12]	; (80044e0 <videoTaskFunc+0x18>)
 80044d2:	f000 f934 	bl	800473e <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv>
}
 80044d6:	bf00      	nop
 80044d8:	3708      	adds	r7, #8
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	bf00      	nop
 80044e0:	24006d30 	.word	0x24006d30

080044e4 <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b082      	sub	sp, #8
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
        if (!HAL::getInstance())
 80044ec:	f7fc fa9e 	bl	8000a2c <_ZN8touchgfx3HAL11getInstanceEv>
 80044f0:	4603      	mov	r3, r0
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	bf0c      	ite	eq
 80044f6:	2301      	moveq	r3, #1
 80044f8:	2300      	movne	r3, #0
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d132      	bne.n	8004566 <HAL_LTDC_LineEventCallback+0x82>
        {
            return;
        }

        if (LTDC->LIPCR == lcd_int_active_line)
 8004500:	4b1b      	ldr	r3, [pc, #108]	; (8004570 <HAL_LTDC_LineEventCallback+0x8c>)
 8004502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004504:	4a1b      	ldr	r2, [pc, #108]	; (8004574 <HAL_LTDC_LineEventCallback+0x90>)
 8004506:	8812      	ldrh	r2, [r2, #0]
 8004508:	4293      	cmp	r3, r2
 800450a:	bf0c      	ite	eq
 800450c:	2301      	moveq	r3, #1
 800450e:	2300      	movne	r3, #0
 8004510:	b2db      	uxtb	r3, r3
 8004512:	2b00      	cmp	r3, #0
 8004514:	d017      	beq.n	8004546 <HAL_LTDC_LineEventCallback+0x62>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 8004516:	4b18      	ldr	r3, [pc, #96]	; (8004578 <HAL_LTDC_LineEventCallback+0x94>)
 8004518:	881b      	ldrh	r3, [r3, #0]
 800451a:	4619      	mov	r1, r3
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f00b faa9 	bl	800fa74 <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 8004522:	f7fc fa83 	bl	8000a2c <_ZN8touchgfx3HAL11getInstanceEv>
 8004526:	4603      	mov	r3, r0
 8004528:	4618      	mov	r0, r3
 800452a:	f7ff fd04 	bl	8003f36 <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 800452e:	f7fd ff19 	bl	8002364 <_ZN8touchgfx10OSWrappers11signalVSyncEv>

            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 8004532:	f7fc fa7b 	bl	8000a2c <_ZN8touchgfx3HAL11getInstanceEv>
 8004536:	4603      	mov	r3, r0
 8004538:	4618      	mov	r0, r3
 800453a:	f015 fb73 	bl	8019c24 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 800453e:	2000      	movs	r0, #0
 8004540:	f7fc f920 	bl	8000784 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8004544:	e010      	b.n	8004568 <HAL_LTDC_LineEventCallback+0x84>
        }
        else
        {
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8004546:	4b0b      	ldr	r3, [pc, #44]	; (8004574 <HAL_LTDC_LineEventCallback+0x90>)
 8004548:	881b      	ldrh	r3, [r3, #0]
 800454a:	4619      	mov	r1, r3
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f00b fa91 	bl	800fa74 <HAL_LTDC_ProgramLineEvent>

            // Signal to the framework that display update has finished.
            HAL::getInstance()->frontPorchEntered();
 8004552:	f7fc fa6b 	bl	8000a2c <_ZN8touchgfx3HAL11getInstanceEv>
 8004556:	4603      	mov	r3, r0
 8004558:	4618      	mov	r0, r3
 800455a:	f7ff fcb5 	bl	8003ec8 <_ZN8touchgfx3HAL17frontPorchEnteredEv>
            GPIO::clear(GPIO::VSYNC_FREQ);
 800455e:	2000      	movs	r0, #0
 8004560:	f7fc f96e 	bl	8000840 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8004564:	e000      	b.n	8004568 <HAL_LTDC_LineEventCallback+0x84>
            return;
 8004566:	bf00      	nop
        }
    }
 8004568:	3708      	adds	r7, #8
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}
 800456e:	bf00      	nop
 8004570:	50001000 	.word	0x50001000
 8004574:	24006d7a 	.word	0x24006d7a
 8004578:	24006d7c 	.word	0x24006d7c

0800457c <_ZN8touchgfx15VideoControllerC1Ev>:
class VideoController
 800457c:	b480      	push	{r7}
 800457e:	b083      	sub	sp, #12
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	4a04      	ldr	r2, [pc, #16]	; (8004598 <_ZN8touchgfx15VideoControllerC1Ev+0x1c>)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	601a      	str	r2, [r3, #0]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	4618      	mov	r0, r3
 800458e:	370c      	adds	r7, #12
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr
 8004598:	08029bec 	.word	0x08029bec

0800459c <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EEC1Ev>:

template <uint32_t no_streams, uint32_t width, uint32_t height, uint32_t stride, touchgfx::Bitmap::BitmapFormat output_format>
class DedicatedBufferController : public touchgfx::VideoController
{
public:
    DedicatedBufferController()
 800459c:	b5b0      	push	{r4, r5, r7, lr}
 800459e:	b082      	sub	sp, #8
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	4618      	mov	r0, r3
 80045a8:	f7ff ffe8 	bl	800457c <_ZN8touchgfx15VideoControllerC1Ev>
 80045ac:	4a25      	ldr	r2, [pc, #148]	; (8004644 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EEC1Ev+0xa8>)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	601a      	str	r2, [r3, #0]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	330c      	adds	r3, #12
 80045b6:	2400      	movs	r4, #0
 80045b8:	461d      	mov	r5, r3
 80045ba:	2c00      	cmp	r4, #0
 80045bc:	db05      	blt.n	80045ca <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EEC1Ev+0x2e>
 80045be:	4628      	mov	r0, r5
 80045c0:	f000 f971 	bl	80048a6 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE6StreamC1Ev>
 80045c4:	3524      	adds	r5, #36	; 0x24
 80045c6:	3c01      	subs	r4, #1
 80045c8:	e7f7      	b.n	80045ba <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EEC1Ev+0x1e>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2200      	movs	r2, #0
 80045ce:	631a      	str	r2, [r3, #48]	; 0x30
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2200      	movs	r2, #0
 80045d4:	635a      	str	r2, [r3, #52]	; 0x34
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2200      	movs	r2, #0
 80045da:	639a      	str	r2, [r3, #56]	; 0x38
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2201      	movs	r2, #1
 80045e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2200      	movs	r2, #0
 80045f8:	641a      	str	r2, [r3, #64]	; 0x40
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2200      	movs	r2, #0
 80045fe:	645a      	str	r2, [r3, #68]	; 0x44
    {
        assert((no_streams > 0) && "Video: Number of streams zero!");

        // Clear arrays
        memset(decodeBuffers, 0, sizeof(decodeBuffers));
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	3308      	adds	r3, #8
 8004604:	2204      	movs	r2, #4
 8004606:	2100      	movs	r1, #0
 8004608:	4618      	mov	r0, r3
 800460a:	f021 ff37 	bl	802647c <memset>
        memset(mjpegDecoders, 0, sizeof(mjpegDecoders));
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	3304      	adds	r3, #4
 8004612:	2204      	movs	r2, #4
 8004614:	2100      	movs	r1, #0
 8004616:	4618      	mov	r0, r3
 8004618:	f021 ff30 	bl	802647c <memset>

        // Initialize synchronization primitives
        semDecode = SEM_CREATE(); // Binary semaphore
 800461c:	2200      	movs	r2, #0
 800461e:	2100      	movs	r1, #0
 8004620:	2001      	movs	r0, #1
 8004622:	f010 f990 	bl	8014946 <osSemaphoreNew>
 8004626:	4602      	mov	r2, r0
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	641a      	str	r2, [r3, #64]	; 0x40
        mutexBuffers = MUTEX_CREATE();
 800462c:	2000      	movs	r0, #0
 800462e:	f010 f87c 	bl	801472a <osMutexNew>
 8004632:	4602      	mov	r2, r0
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	645a      	str	r2, [r3, #68]	; 0x44
    }
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	4618      	mov	r0, r3
 800463c:	3708      	adds	r7, #8
 800463e:	46bd      	mov	sp, r7
 8004640:	bdb0      	pop	{r4, r5, r7, pc}
 8004642:	bf00      	nop
 8004644:	08029bac 	.word	0x08029bac

08004648 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10addDecoderER12MJPEGDecoderm>:
        bufferRGB = buffer;
        topBufferRGB = bufferRGB;
        sizeBufferRGB = sizeOfBuffer;
    }

    void addDecoder(MJPEGDecoder& decoder, uint32_t index)
 8004648:	b580      	push	{r7, lr}
 800464a:	b084      	sub	sp, #16
 800464c:	af00      	add	r7, sp, #0
 800464e:	60f8      	str	r0, [r7, #12]
 8004650:	60b9      	str	r1, [r7, #8]
 8004652:	607a      	str	r2, [r7, #4]
    {
        // Running in UI thread / main

        assert(index < no_streams);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d006      	beq.n	8004668 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10addDecoderER12MJPEGDecoderm+0x20>
 800465a:	4b08      	ldr	r3, [pc, #32]	; (800467c <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10addDecoderER12MJPEGDecoderm+0x34>)
 800465c:	4a08      	ldr	r2, [pc, #32]	; (8004680 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10addDecoderER12MJPEGDecoderm+0x38>)
 800465e:	f240 1103 	movw	r1, #259	; 0x103
 8004662:	4808      	ldr	r0, [pc, #32]	; (8004684 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10addDecoderER12MJPEGDecoderm+0x3c>)
 8004664:	f021 fe7a 	bl	802635c <__assert_func>
        mjpegDecoders[index] = &decoder;
 8004668:	68fa      	ldr	r2, [r7, #12]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	009b      	lsls	r3, r3, #2
 800466e:	4413      	add	r3, r2
 8004670:	68ba      	ldr	r2, [r7, #8]
 8004672:	605a      	str	r2, [r3, #4]
    }
 8004674:	bf00      	nop
 8004676:	3710      	adds	r7, #16
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}
 800467c:	08027ebc 	.word	0x08027ebc
 8004680:	08027ed0 	.word	0x08027ed0
 8004684:	08028038 	.word	0x08028038

08004688 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12setRGBBufferEPhj>:
    virtual void setRGBBuffer(uint8_t* buffer, size_t sizeOfBuffer)
 8004688:	b480      	push	{r7}
 800468a:	b085      	sub	sp, #20
 800468c:	af00      	add	r7, sp, #0
 800468e:	60f8      	str	r0, [r7, #12]
 8004690:	60b9      	str	r1, [r7, #8]
 8004692:	607a      	str	r2, [r7, #4]
        bufferRGB = buffer;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	68ba      	ldr	r2, [r7, #8]
 8004698:	631a      	str	r2, [r3, #48]	; 0x30
        topBufferRGB = bufferRGB;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	639a      	str	r2, [r3, #56]	; 0x38
        sizeBufferRGB = sizeOfBuffer;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	687a      	ldr	r2, [r7, #4]
 80046a6:	635a      	str	r2, [r3, #52]	; 0x34
    }
 80046a8:	bf00      	nop
 80046aa:	3714      	adds	r7, #20
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr

080046b4 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE8endFrameEv>:

    void endFrame()
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b084      	sub	sp, #16
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
    {
        // Running in UI thread

        // Check if we should invalidate in next frame
        for (uint32_t i = 0; i < no_streams; i++)
 80046bc:	2300      	movs	r3, #0
 80046be:	60fb      	str	r3, [r7, #12]
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d120      	bne.n	8004708 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE8endFrameEv+0x54>
        {
            Stream& stream = streams[i];
 80046c6:	68fa      	ldr	r2, [r7, #12]
 80046c8:	4613      	mov	r3, r2
 80046ca:	00db      	lsls	r3, r3, #3
 80046cc:	4413      	add	r3, r2
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	3308      	adds	r3, #8
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	4413      	add	r3, r2
 80046d6:	3304      	adds	r3, #4
 80046d8:	60bb      	str	r3, [r7, #8]
            if (stream.isPlaying || stream.isShowingOneFrame)
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	7f5b      	ldrb	r3, [r3, #29]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d103      	bne.n	80046ea <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE8endFrameEv+0x36>
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	7f9b      	ldrb	r3, [r3, #30]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d00a      	beq.n	8004700 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE8endFrameEv+0x4c>
            {
                if (decodeForNextTick(stream))
 80046ea:	68b9      	ldr	r1, [r7, #8]
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f000 f912 	bl	8004916 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE17decodeForNextTickERNS3_6StreamE>
 80046f2:	4603      	mov	r3, r0
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d003      	beq.n	8004700 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE8endFrameEv+0x4c>
                {
                    stream.doDecode = true;
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	2201      	movs	r2, #1
 80046fc:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
        for (uint32_t i = 0; i < no_streams; i++)
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	3301      	adds	r3, #1
 8004704:	60fb      	str	r3, [r7, #12]
 8004706:	e7db      	b.n	80046c0 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE8endFrameEv+0xc>
                }
            }
        }

        // Mark next draw as first
        firstDrawThisFrame = true;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2201      	movs	r2, #1
 800470c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        // Signal decoder thread to wake up
        SEM_POST(semDecode);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004714:	4618      	mov	r0, r3
 8004716:	f010 f9f1 	bl	8014afc <osSemaphoreRelease>
        // Unlock the buffer mutex. FreeRTOS does not allow unlocking a mutex you did not lock
        if (uiHasMutex)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004720:	2b00      	cmp	r3, #0
 8004722:	d008      	beq.n	8004736 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE8endFrameEv+0x82>
        {
            MUTEX_UNLOCK(mutexBuffers);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004728:	4618      	mov	r0, r3
 800472a:	f010 f8cf 	bl	80148cc <osMutexRelease>
            uiHasMutex = false;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2200      	movs	r2, #0
 8004732:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        }
    }
 8004736:	bf00      	nop
 8004738:	3710      	adds	r7, #16
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}

0800473e <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv>:

    void decoderTaskEntry()
 800473e:	b590      	push	{r4, r7, lr}
 8004740:	b08b      	sub	sp, #44	; 0x2c
 8004742:	af02      	add	r7, sp, #8
 8004744:	6078      	str	r0, [r7, #4]
        // Running in Decoder thread!!

        while (1)
        {
            // Wait for synchronisation signal from UI thread
            SEM_WAIT(semDecode);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800474a:	f04f 31ff 	mov.w	r1, #4294967295
 800474e:	4618      	mov	r0, r3
 8004750:	f010 f982 	bl	8014a58 <osSemaphoreAcquire>

            // Lock out the UI by taking the mutex
            MUTEX_LOCK(mutexBuffers);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004758:	f04f 31ff 	mov.w	r1, #4294967295
 800475c:	4618      	mov	r0, r3
 800475e:	f010 f86a 	bl	8014836 <osMutexAcquire>

            // Update stream flags
            for (uint32_t i = 0; i < no_streams; i++)
 8004762:	2300      	movs	r3, #0
 8004764:	61fb      	str	r3, [r7, #28]
 8004766:	69fb      	ldr	r3, [r7, #28]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d115      	bne.n	8004798 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x5a>
            {
                Stream& stream = streams[i];
 800476c:	69fa      	ldr	r2, [r7, #28]
 800476e:	4613      	mov	r3, r2
 8004770:	00db      	lsls	r3, r3, #3
 8004772:	4413      	add	r3, r2
 8004774:	009b      	lsls	r3, r3, #2
 8004776:	3308      	adds	r3, #8
 8004778:	687a      	ldr	r2, [r7, #4]
 800477a:	4413      	add	r3, r2
 800477c:	3304      	adds	r3, #4
 800477e:	617b      	str	r3, [r7, #20]
                if (stream.doDecode)
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8004786:	2b00      	cmp	r3, #0
 8004788:	d002      	beq.n	8004790 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x52>
                {
                    stream.doInvalidateOnNextTick = true;
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	2201      	movs	r2, #1
 800478e:	77da      	strb	r2, [r3, #31]
            for (uint32_t i = 0; i < no_streams; i++)
 8004790:	69fb      	ldr	r3, [r7, #28]
 8004792:	3301      	adds	r3, #1
 8004794:	61fb      	str	r3, [r7, #28]
 8004796:	e7e6      	b.n	8004766 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x28>
                }
            }

            // Now decode all streams marked for invalidation in next tick
            for (uint32_t i = 0; i < no_streams; i++)
 8004798:	2300      	movs	r3, #0
 800479a:	61bb      	str	r3, [r7, #24]
 800479c:	69bb      	ldr	r3, [r7, #24]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d17b      	bne.n	800489a <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x15c>
            {
                Stream& stream = streams[i];
 80047a2:	69ba      	ldr	r2, [r7, #24]
 80047a4:	4613      	mov	r3, r2
 80047a6:	00db      	lsls	r3, r3, #3
 80047a8:	4413      	add	r3, r2
 80047aa:	009b      	lsls	r3, r3, #2
 80047ac:	3308      	adds	r3, #8
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	4413      	add	r3, r2
 80047b2:	3304      	adds	r3, #4
 80047b4:	613b      	str	r3, [r7, #16]
                if (stream.doDecode)
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d068      	beq.n	8004892 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x154>
                {
                    MJPEGDecoder* const decoder = mjpegDecoders[i];
 80047c0:	687a      	ldr	r2, [r7, #4]
 80047c2:	69bb      	ldr	r3, [r7, #24]
 80047c4:	009b      	lsls	r3, r3, #2
 80047c6:	4413      	add	r3, r2
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	60fb      	str	r3, [r7, #12]
                    // Seek or increment video frame
                    if (stream.seek_to_frame > 0)
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	695b      	ldr	r3, [r3, #20]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d00c      	beq.n	80047ee <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0xb0>
                    {
                        decoder->gotoFrame(stream.seek_to_frame);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	3324      	adds	r3, #36	; 0x24
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	693a      	ldr	r2, [r7, #16]
 80047de:	6952      	ldr	r2, [r2, #20]
 80047e0:	4611      	mov	r1, r2
 80047e2:	68f8      	ldr	r0, [r7, #12]
 80047e4:	4798      	blx	r3
                        stream.seek_to_frame = 0;
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	2200      	movs	r2, #0
 80047ea:	615a      	str	r2, [r3, #20]
 80047ec:	e01e      	b.n	800482c <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0xee>
                    }
                    else
                    {
                        if (stream.skip_frames > 0)
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	699b      	ldr	r3, [r3, #24]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d01a      	beq.n	800482c <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0xee>
                        {
                            decoder->gotoFrame(decoder->getCurrentFrameNumber() + stream.skip_frames);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	3324      	adds	r3, #36	; 0x24
 80047fc:	681c      	ldr	r4, [r3, #0]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	3328      	adds	r3, #40	; 0x28
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	68f8      	ldr	r0, [r7, #12]
 8004808:	4798      	blx	r3
 800480a:	4602      	mov	r2, r0
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	699b      	ldr	r3, [r3, #24]
 8004810:	4413      	add	r3, r2
 8004812:	4619      	mov	r1, r3
 8004814:	68f8      	ldr	r0, [r7, #12]
 8004816:	47a0      	blx	r4
                            stream.frameCount += stream.skip_frames;
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	685a      	ldr	r2, [r3, #4]
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	699b      	ldr	r3, [r3, #24]
 8004820:	441a      	add	r2, r3
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	605a      	str	r2, [r3, #4]
                            stream.skip_frames = 0;
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	2200      	movs	r2, #0
 800482a:	619a      	str	r2, [r3, #24]
                        }
                    }

                    // Decode frame
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	3314      	adds	r3, #20
 8004832:	681c      	ldr	r4, [r3, #0]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	69ba      	ldr	r2, [r7, #24]
 8004838:	3202      	adds	r2, #2
 800483a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800483e:	f44f 63b4 	mov.w	r3, #1440	; 0x5a0
 8004842:	9300      	str	r3, [sp, #0]
 8004844:	f44f 7388 	mov.w	r3, #272	; 0x110
 8004848:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800484c:	68f8      	ldr	r0, [r7, #12]
 800484e:	47a0      	blx	r4
 8004850:	4603      	mov	r3, r0
 8004852:	461a      	mov	r2, r3
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	f883 2020 	strb.w	r2, [r3, #32]
                    stream.frameCount++;
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	1c5a      	adds	r2, r3, #1
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	605a      	str	r2, [r3, #4]

                    // Update frame number
                    if (stream.hasMoreFrames)
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	f893 3020 	ldrb.w	r3, [r3, #32]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d00a      	beq.n	8004884 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x146>
                    {
                        stream.frameNumber = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	3328      	adds	r3, #40	; 0x28
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	68f8      	ldr	r0, [r7, #12]
 8004878:	4798      	blx	r3
 800487a:	4603      	mov	r3, r0
 800487c:	1e5a      	subs	r2, r3, #1
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	601a      	str	r2, [r3, #0]
 8004882:	e002      	b.n	800488a <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x14c>
                    }
                    else
                    {
                        stream.frameNumber = 1;
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	2201      	movs	r2, #1
 8004888:	601a      	str	r2, [r3, #0]
                    }
                    stream.doDecode = false;
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	2200      	movs	r2, #0
 800488e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
            for (uint32_t i = 0; i < no_streams; i++)
 8004892:	69bb      	ldr	r3, [r7, #24]
 8004894:	3301      	adds	r3, #1
 8004896:	61bb      	str	r3, [r7, #24]
 8004898:	e780      	b.n	800479c <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x5e>
                }
            }

            // Release the stream and decode buffer and let UI continue
            MUTEX_UNLOCK(mutexBuffers);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800489e:	4618      	mov	r0, r3
 80048a0:	f010 f814 	bl	80148cc <osMutexRelease>
        while (1)
 80048a4:	e74f      	b.n	8004746 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x8>

080048a6 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE6StreamC1Ev>:

private:
    class Stream
    {
    public:
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 80048a6:	b480      	push	{r7}
 80048a8:	b083      	sub	sp, #12
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	6078      	str	r0, [r7, #4]
            seek_to_frame(0), skip_frames(0),
            isActive(false), isPlaying(false), isShowingOneFrame(false),
            doInvalidateOnNextTick(false), hasMoreFrames(false), repeat(true), doDecode(false) {}
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2200      	movs	r2, #0
 80048b2:	601a      	str	r2, [r3, #0]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2200      	movs	r2, #0
 80048b8:	605a      	str	r2, [r3, #4]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2200      	movs	r2, #0
 80048be:	609a      	str	r2, [r3, #8]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2200      	movs	r2, #0
 80048c4:	60da      	str	r2, [r3, #12]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2200      	movs	r2, #0
 80048ca:	611a      	str	r2, [r3, #16]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2200      	movs	r2, #0
 80048d0:	615a      	str	r2, [r3, #20]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2200      	movs	r2, #0
 80048d6:	619a      	str	r2, [r3, #24]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2200      	movs	r2, #0
 80048dc:	771a      	strb	r2, [r3, #28]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2200      	movs	r2, #0
 80048e2:	775a      	strb	r2, [r3, #29]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2200      	movs	r2, #0
 80048e8:	779a      	strb	r2, [r3, #30]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	77da      	strb	r2, [r3, #31]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2200      	movs	r2, #0
 80048f4:	f883 2020 	strb.w	r2, [r3, #32]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2201      	movs	r2, #1
 80048fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2200      	movs	r2, #0
 8004904:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	4618      	mov	r0, r3
 800490c:	370c      	adds	r7, #12
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr

08004916 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE17decodeForNextTickERNS3_6StreamE>:
    MUTEX_TYPE mutexBuffers;     // Mutual exclusion of the video buffers and stream data

    /**
     * Return true, if new video frame should be decoded for the next tick (keep video decode framerate low)
     */
    bool decodeForNextTick(Stream& stream)
 8004916:	b480      	push	{r7}
 8004918:	b083      	sub	sp, #12
 800491a:	af00      	add	r7, sp, #0
 800491c:	6078      	str	r0, [r7, #4]
 800491e:	6039      	str	r1, [r7, #0]
    {
        // Running in UI thread

        // Compare tickCount/frameCount to frame_rate_ticks/frame_rate_video
        if ((stream.tickCount * stream.frame_rate_video) >= (stream.frame_rate_ticks * stream.frameCount))
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	683a      	ldr	r2, [r7, #0]
 8004926:	68d2      	ldr	r2, [r2, #12]
 8004928:	fb03 f202 	mul.w	r2, r3, r2
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	691b      	ldr	r3, [r3, #16]
 8004930:	6839      	ldr	r1, [r7, #0]
 8004932:	6849      	ldr	r1, [r1, #4]
 8004934:	fb01 f303 	mul.w	r3, r1, r3
 8004938:	429a      	cmp	r2, r3
 800493a:	d322      	bcc.n	8004982 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE17decodeForNextTickERNS3_6StreamE+0x6c>
        {
            if (allowSkipFrames)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004942:	2b00      	cmp	r3, #0
 8004944:	d01b      	beq.n	800497e <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE17decodeForNextTickERNS3_6StreamE+0x68>
            {
                stream.skip_frames = (stream.tickCount * stream.frame_rate_video - stream.frame_rate_ticks * stream.frameCount) / stream.frame_rate_ticks;
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	683a      	ldr	r2, [r7, #0]
 800494c:	68d2      	ldr	r2, [r2, #12]
 800494e:	fb03 f202 	mul.w	r2, r3, r2
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	691b      	ldr	r3, [r3, #16]
 8004956:	6839      	ldr	r1, [r7, #0]
 8004958:	6849      	ldr	r1, [r1, #4]
 800495a:	fb01 f303 	mul.w	r3, r1, r3
 800495e:	1ad2      	subs	r2, r2, r3
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	691b      	ldr	r3, [r3, #16]
 8004964:	fbb2 f2f3 	udiv	r2, r2, r3
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	619a      	str	r2, [r3, #24]
                if (stream.skip_frames > 0)
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	699b      	ldr	r3, [r3, #24]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d004      	beq.n	800497e <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE17decodeForNextTickERNS3_6StreamE+0x68>
                {
                    stream.skip_frames--;
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	699b      	ldr	r3, [r3, #24]
 8004978:	1e5a      	subs	r2, r3, #1
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	619a      	str	r2, [r3, #24]
                }
            }
            return true;
 800497e:	2301      	movs	r3, #1
 8004980:	e000      	b.n	8004984 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE17decodeForNextTickERNS3_6StreamE+0x6e>
        }
        return false;
 8004982:	2300      	movs	r3, #0
    }
 8004984:	4618      	mov	r0, r3
 8004986:	370c      	adds	r7, #12
 8004988:	46bd      	mov	sp, r7
 800498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498e:	4770      	bx	lr

08004990 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EED1Ev>:
class DedicatedBufferController : public touchgfx::VideoController
 8004990:	b580      	push	{r7, lr}
 8004992:	b082      	sub	sp, #8
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
 8004998:	4a05      	ldr	r2, [pc, #20]	; (80049b0 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EED1Ev+0x20>)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	601a      	str	r2, [r3, #0]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4618      	mov	r0, r3
 80049a2:	f7ff fb1f 	bl	8003fe4 <_ZN8touchgfx15VideoControllerD1Ev>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4618      	mov	r0, r3
 80049aa:	3708      	adds	r7, #8
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}
 80049b0:	08029bac 	.word	0x08029bac

080049b4 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EED0Ev>:
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b082      	sub	sp, #8
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	f7ff ffe7 	bl	8004990 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EED1Ev>
 80049c2:	2148      	movs	r1, #72	; 0x48
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	f021 fc9a 	bl	80262fe <_ZdlPvj>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	4618      	mov	r0, r3
 80049ce:	3708      	adds	r7, #8
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}

080049d4 <_Z41__static_initialization_and_destruction_0ii>:
}
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b082      	sub	sp, #8
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	6039      	str	r1, [r7, #0]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d10a      	bne.n	80049fa <_Z41__static_initialization_and_destruction_0ii+0x26>
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d105      	bne.n	80049fa <_Z41__static_initialization_and_destruction_0ii+0x26>
HardwareMJPEGDecoder mjpegdecoder1;
 80049ee:	480c      	ldr	r0, [pc, #48]	; (8004a20 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80049f0:	f7fc fb38 	bl	8001064 <_ZN20HardwareMJPEGDecoderC1Ev>
DedicatedBufferController<1, 480, 272, 480 * 3U, Bitmap::RGB888> videoController;
 80049f4:	480b      	ldr	r0, [pc, #44]	; (8004a24 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80049f6:	f7ff fdd1 	bl	800459c <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EEC1Ev>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d10a      	bne.n	8004a16 <_Z41__static_initialization_and_destruction_0ii+0x42>
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d105      	bne.n	8004a16 <_Z41__static_initialization_and_destruction_0ii+0x42>
 8004a0a:	4806      	ldr	r0, [pc, #24]	; (8004a24 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8004a0c:	f7ff ffc0 	bl	8004990 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EED1Ev>
HardwareMJPEGDecoder mjpegdecoder1;
 8004a10:	4803      	ldr	r0, [pc, #12]	; (8004a20 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8004a12:	f7fd fc01 	bl	8002218 <_ZN20HardwareMJPEGDecoderD1Ev>
}
 8004a16:	bf00      	nop
 8004a18:	3708      	adds	r7, #8
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}
 8004a1e:	bf00      	nop
 8004a20:	24006ce8 	.word	0x24006ce8
 8004a24:	24006d30 	.word	0x24006d30

08004a28 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE>:
    virtual Handle registerVideoWidget(touchgfx::VideoWidget& widget)
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b084      	sub	sp, #16
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	6039      	str	r1, [r7, #0]
        const uint32_t sizeOfOneDecodeBuffer = height * stride;
 8004a32:	4b1f      	ldr	r3, [pc, #124]	; (8004ab0 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x88>)
 8004a34:	60fb      	str	r3, [r7, #12]
        Handle handle = getFreeHandle();
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f000 fa82 	bl	8004f40 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE13getFreeHandleEv>
 8004a3c:	60b8      	str	r0, [r7, #8]
        streams[handle].isActive = true;
 8004a3e:	6879      	ldr	r1, [r7, #4]
 8004a40:	68ba      	ldr	r2, [r7, #8]
 8004a42:	4613      	mov	r3, r2
 8004a44:	00db      	lsls	r3, r3, #3
 8004a46:	4413      	add	r3, r2
 8004a48:	009b      	lsls	r3, r3, #2
 8004a4a:	440b      	add	r3, r1
 8004a4c:	3328      	adds	r3, #40	; 0x28
 8004a4e:	2201      	movs	r2, #1
 8004a50:	701a      	strb	r2, [r3, #0]
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a56:	4b16      	ldr	r3, [pc, #88]	; (8004ab0 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x88>)
 8004a58:	4413      	add	r3, r2
 8004a5a:	687a      	ldr	r2, [r7, #4]
 8004a5c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004a62:	440a      	add	r2, r1
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d905      	bls.n	8004a74 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x4c>
            assert(0 && "registerVideoWidget: Unable to allocate RGB buffer!");
 8004a68:	4b12      	ldr	r3, [pc, #72]	; (8004ab4 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x8c>)
 8004a6a:	4a13      	ldr	r2, [pc, #76]	; (8004ab8 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x90>)
 8004a6c:	2152      	movs	r1, #82	; 0x52
 8004a6e:	4813      	ldr	r0, [pc, #76]	; (8004abc <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x94>)
 8004a70:	f021 fc74 	bl	802635c <__assert_func>
        decodeBuffers[handle] = (uint32_t*)topBufferRGB;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	68ba      	ldr	r2, [r7, #8]
 8004a7c:	3202      	adds	r2, #2
 8004a7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        topBufferRGB += sizeOfOneDecodeBuffer;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a86:	4b0a      	ldr	r3, [pc, #40]	; (8004ab0 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x88>)
 8004a88:	4413      	add	r3, r2
 8004a8a:	687a      	ldr	r2, [r7, #4]
 8004a8c:	6393      	str	r3, [r2, #56]	; 0x38
        widget.setVideoBufferFormat(output_format, width, height);
 8004a8e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8004a92:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004a96:	2101      	movs	r1, #1
 8004a98:	6838      	ldr	r0, [r7, #0]
 8004a9a:	f7ff fadf 	bl	800405c <_ZN8touchgfx11VideoWidget20setVideoBufferFormatENS_6Bitmap12BitmapFormatEss>
        widget.setVideoBuffer((uint8_t*)0);
 8004a9e:	2100      	movs	r1, #0
 8004aa0:	6838      	ldr	r0, [r7, #0]
 8004aa2:	f7ff facd 	bl	8004040 <_ZN8touchgfx11VideoWidget14setVideoBufferEPh>
        return handle;
 8004aa6:	68bb      	ldr	r3, [r7, #8]
    }
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3710      	adds	r7, #16
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}
 8004ab0:	0005fa00 	.word	0x0005fa00
 8004ab4:	0802807c 	.word	0x0802807c
 8004ab8:	080280b8 	.word	0x080280b8
 8004abc:	08028038 	.word	0x08028038

08004ac0 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE21unregisterVideoWidgetEm>:
    virtual void unregisterVideoWidget(const Handle handle)
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b084      	sub	sp, #16
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
 8004ac8:	6039      	str	r1, [r7, #0]
        MUTEX_LOCK(mutexBuffers);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ace:	f04f 31ff 	mov.w	r1, #4294967295
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f00f feaf 	bl	8014836 <osMutexAcquire>
        MUTEX_UNLOCK(mutexBuffers);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004adc:	4618      	mov	r0, r3
 8004ade:	f00f fef5 	bl	80148cc <osMutexRelease>
        streams[handle].isActive = false;
 8004ae2:	6879      	ldr	r1, [r7, #4]
 8004ae4:	683a      	ldr	r2, [r7, #0]
 8004ae6:	4613      	mov	r3, r2
 8004ae8:	00db      	lsls	r3, r3, #3
 8004aea:	4413      	add	r3, r2
 8004aec:	009b      	lsls	r3, r3, #2
 8004aee:	440b      	add	r3, r1
 8004af0:	3328      	adds	r3, #40	; 0x28
 8004af2:	2200      	movs	r2, #0
 8004af4:	701a      	strb	r2, [r3, #0]
        bool oneIsActive = false;
 8004af6:	2300      	movs	r3, #0
 8004af8:	73fb      	strb	r3, [r7, #15]
        for (uint32_t i = 0; i < no_streams; i++)
 8004afa:	2300      	movs	r3, #0
 8004afc:	60bb      	str	r3, [r7, #8]
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d114      	bne.n	8004b2e <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE21unregisterVideoWidgetEm+0x6e>
            oneIsActive |= streams[i].isActive;
 8004b04:	6879      	ldr	r1, [r7, #4]
 8004b06:	68ba      	ldr	r2, [r7, #8]
 8004b08:	4613      	mov	r3, r2
 8004b0a:	00db      	lsls	r3, r3, #3
 8004b0c:	4413      	add	r3, r2
 8004b0e:	009b      	lsls	r3, r3, #2
 8004b10:	440b      	add	r3, r1
 8004b12:	3328      	adds	r3, #40	; 0x28
 8004b14:	781a      	ldrb	r2, [r3, #0]
 8004b16:	7bfb      	ldrb	r3, [r7, #15]
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	b2db      	uxtb	r3, r3
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	bf14      	ite	ne
 8004b20:	2301      	movne	r3, #1
 8004b22:	2300      	moveq	r3, #0
 8004b24:	73fb      	strb	r3, [r7, #15]
        for (uint32_t i = 0; i < no_streams; i++)
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	3301      	adds	r3, #1
 8004b2a:	60bb      	str	r3, [r7, #8]
 8004b2c:	e7e7      	b.n	8004afe <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE21unregisterVideoWidgetEm+0x3e>
        if (oneIsActive == false)
 8004b2e:	7bfb      	ldrb	r3, [r7, #15]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d103      	bne.n	8004b3c <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE21unregisterVideoWidgetEm+0x7c>
            topBufferRGB = bufferRGB;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	639a      	str	r2, [r3, #56]	; 0x38
    }
 8004b3c:	bf00      	nop
 8004b3e:	3710      	adds	r7, #16
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}

08004b44 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm>:
    virtual void setFrameRate(const Handle handle, uint32_t ui_frames, uint32_t video_frames)
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b086      	sub	sp, #24
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	60f8      	str	r0, [r7, #12]
 8004b4c:	60b9      	str	r1, [r7, #8]
 8004b4e:	607a      	str	r2, [r7, #4]
 8004b50:	603b      	str	r3, [r7, #0]
        assert(handle < no_streams);
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d005      	beq.n	8004b64 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x20>
 8004b58:	4b0f      	ldr	r3, [pc, #60]	; (8004b98 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x54>)
 8004b5a:	4a10      	ldr	r2, [pc, #64]	; (8004b9c <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x58>)
 8004b5c:	2182      	movs	r1, #130	; 0x82
 8004b5e:	4810      	ldr	r0, [pc, #64]	; (8004ba0 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x5c>)
 8004b60:	f021 fbfc 	bl	802635c <__assert_func>
        Stream& stream = streams[handle];
 8004b64:	68ba      	ldr	r2, [r7, #8]
 8004b66:	4613      	mov	r3, r2
 8004b68:	00db      	lsls	r3, r3, #3
 8004b6a:	4413      	add	r3, r2
 8004b6c:	009b      	lsls	r3, r3, #2
 8004b6e:	3308      	adds	r3, #8
 8004b70:	68fa      	ldr	r2, [r7, #12]
 8004b72:	4413      	add	r3, r2
 8004b74:	3304      	adds	r3, #4
 8004b76:	617b      	str	r3, [r7, #20]
        stream.frameCount = 0;
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	605a      	str	r2, [r3, #4]
        stream.tickCount = 0;
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	2200      	movs	r2, #0
 8004b82:	609a      	str	r2, [r3, #8]
        stream.frame_rate_ticks = ui_frames;
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	611a      	str	r2, [r3, #16]
        stream.frame_rate_video = video_frames;
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	683a      	ldr	r2, [r7, #0]
 8004b8e:	60da      	str	r2, [r3, #12]
    }
 8004b90:	bf00      	nop
 8004b92:	3718      	adds	r7, #24
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}
 8004b98:	0802825c 	.word	0x0802825c
 8004b9c:	08028270 	.word	0x08028270
 8004ba0:	08028038 	.word	0x08028038

08004ba4 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE>:
    virtual bool updateFrame(const Handle handle, touchgfx::VideoWidget& widget)
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b086      	sub	sp, #24
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	60f8      	str	r0, [r7, #12]
 8004bac:	60b9      	str	r1, [r7, #8]
 8004bae:	607a      	str	r2, [r7, #4]
        assert(handle < no_streams);
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d005      	beq.n	8004bc2 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x1e>
 8004bb6:	4b29      	ldr	r3, [pc, #164]	; (8004c5c <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0xb8>)
 8004bb8:	4a29      	ldr	r2, [pc, #164]	; (8004c60 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0xbc>)
 8004bba:	21d0      	movs	r1, #208	; 0xd0
 8004bbc:	4829      	ldr	r0, [pc, #164]	; (8004c64 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0xc0>)
 8004bbe:	f021 fbcd 	bl	802635c <__assert_func>
        Stream& stream = streams[handle];
 8004bc2:	68ba      	ldr	r2, [r7, #8]
 8004bc4:	4613      	mov	r3, r2
 8004bc6:	00db      	lsls	r3, r3, #3
 8004bc8:	4413      	add	r3, r2
 8004bca:	009b      	lsls	r3, r3, #2
 8004bcc:	3308      	adds	r3, #8
 8004bce:	68fa      	ldr	r2, [r7, #12]
 8004bd0:	4413      	add	r3, r2
 8004bd2:	3304      	adds	r3, #4
 8004bd4:	617b      	str	r3, [r7, #20]
        if (stream.isPlaying)
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	7f5b      	ldrb	r3, [r3, #29]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d00b      	beq.n	8004bf6 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x52>
            stream.tickCount += HAL::getInstance()->getLCDRefreshCount();
 8004bde:	f7fb ff25 	bl	8000a2c <_ZN8touchgfx3HAL11getInstanceEv>
 8004be2:	4603      	mov	r3, r0
 8004be4:	4618      	mov	r0, r3
 8004be6:	f7ff f999 	bl	8003f1c <_ZN8touchgfx3HAL18getLCDRefreshCountEv>
 8004bea:	4602      	mov	r2, r0
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	441a      	add	r2, r3
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	609a      	str	r2, [r3, #8]
        if (stream.doInvalidateOnNextTick)
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	7fdb      	ldrb	r3, [r3, #31]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d029      	beq.n	8004c52 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0xae>
            widget.setVideoBuffer((uint8_t*)decodeBuffers[handle]);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	68ba      	ldr	r2, [r7, #8]
 8004c02:	3202      	adds	r2, #2
 8004c04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c08:	4619      	mov	r1, r3
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f7ff fa18 	bl	8004040 <_ZN8touchgfx11VideoWidget14setVideoBufferEPh>
            widget.invalidate();
 8004c10:	687a      	ldr	r2, [r7, #4]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	3314      	adds	r3, #20
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4610      	mov	r0, r2
 8004c1c:	4798      	blx	r3
            stream.doInvalidateOnNextTick = false;
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	2200      	movs	r2, #0
 8004c22:	77da      	strb	r2, [r3, #31]
            if (!stream.hasMoreFrames && !stream.repeat)
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c2a:	f083 0301 	eor.w	r3, r3, #1
 8004c2e:	b2db      	uxtb	r3, r3
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d00a      	beq.n	8004c4a <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0xa6>
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004c3a:	f083 0301 	eor.w	r3, r3, #1
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d002      	beq.n	8004c4a <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0xa6>
                stream.isPlaying = false;
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	2200      	movs	r2, #0
 8004c48:	775a      	strb	r2, [r3, #29]
            return stream.hasMoreFrames;
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c50:	e000      	b.n	8004c54 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0xb0>
        return true;
 8004c52:	2301      	movs	r3, #1
    }
 8004c54:	4618      	mov	r0, r3
 8004c56:	3718      	adds	r7, #24
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}
 8004c5c:	0802825c 	.word	0x0802825c
 8004c60:	0802842c 	.word	0x0802842c
 8004c64:	08028038 	.word	0x08028038

08004c68 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE>:
    virtual void draw(const Handle handle, const touchgfx::Rect& invalidatedArea, const touchgfx::VideoWidget& widget)
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b084      	sub	sp, #16
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	60f8      	str	r0, [r7, #12]
 8004c70:	60b9      	str	r1, [r7, #8]
 8004c72:	607a      	str	r2, [r7, #4]
 8004c74:	603b      	str	r3, [r7, #0]
        if (firstDrawThisFrame)
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d00e      	beq.n	8004c9e <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE+0x36>
            MUTEX_LOCK(mutexBuffers);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c84:	f04f 31ff 	mov.w	r1, #4294967295
 8004c88:	4618      	mov	r0, r3
 8004c8a:	f00f fdd4 	bl	8014836 <osMutexAcquire>
            firstDrawThisFrame = false;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2200      	movs	r2, #0
 8004c92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
            uiHasMutex = true;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2201      	movs	r2, #1
 8004c9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
 8004c9e:	bf00      	nop
 8004ca0:	3710      	adds	r7, #16
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}
	...

08004ca8 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm>:
    virtual void setVideoData(const Handle handle, const uint8_t* movie, const uint32_t length)
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b086      	sub	sp, #24
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	60f8      	str	r0, [r7, #12]
 8004cb0:	60b9      	str	r1, [r7, #8]
 8004cb2:	607a      	str	r2, [r7, #4]
 8004cb4:	603b      	str	r3, [r7, #0]
        assert(handle < no_streams);
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d005      	beq.n	8004cc8 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x20>
 8004cbc:	4b13      	ldr	r3, [pc, #76]	; (8004d0c <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x64>)
 8004cbe:	4a14      	ldr	r2, [pc, #80]	; (8004d10 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x68>)
 8004cc0:	2190      	movs	r1, #144	; 0x90
 8004cc2:	4814      	ldr	r0, [pc, #80]	; (8004d14 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x6c>)
 8004cc4:	f021 fb4a 	bl	802635c <__assert_func>
        Stream& stream = streams[handle];
 8004cc8:	68ba      	ldr	r2, [r7, #8]
 8004cca:	4613      	mov	r3, r2
 8004ccc:	00db      	lsls	r3, r3, #3
 8004cce:	4413      	add	r3, r2
 8004cd0:	009b      	lsls	r3, r3, #2
 8004cd2:	3308      	adds	r3, #8
 8004cd4:	68fa      	ldr	r2, [r7, #12]
 8004cd6:	4413      	add	r3, r2
 8004cd8:	3304      	adds	r3, #4
 8004cda:	617b      	str	r3, [r7, #20]
        stream.frameNumber = 0;
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	601a      	str	r2, [r3, #0]
        mjpegDecoders[handle]->setVideoData(movie, length);
 8004ce2:	68fa      	ldr	r2, [r7, #12]
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	009b      	lsls	r3, r3, #2
 8004ce8:	4413      	add	r3, r2
 8004cea:	6858      	ldr	r0, [r3, #4]
 8004cec:	68fa      	ldr	r2, [r7, #12]
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	009b      	lsls	r3, r3, #2
 8004cf2:	4413      	add	r3, r2
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	3308      	adds	r3, #8
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	683a      	ldr	r2, [r7, #0]
 8004cfe:	6879      	ldr	r1, [r7, #4]
 8004d00:	4798      	blx	r3
    }
 8004d02:	bf00      	nop
 8004d04:	3718      	adds	r7, #24
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}
 8004d0a:	bf00      	nop
 8004d0c:	0802825c 	.word	0x0802825c
 8004d10:	080285d0 	.word	0x080285d0
 8004d14:	08028038 	.word	0x08028038

08004d18 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmRNS0_15VideoDataReaderE>:
    virtual void setVideoData(const Handle handle, VideoDataReader& reader)
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b084      	sub	sp, #16
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	60f8      	str	r0, [r7, #12]
 8004d20:	60b9      	str	r1, [r7, #8]
 8004d22:	607a      	str	r2, [r7, #4]
        mjpegDecoders[handle]->setVideoData(reader);
 8004d24:	68fa      	ldr	r2, [r7, #12]
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	4413      	add	r3, r2
 8004d2c:	6858      	ldr	r0, [r3, #4]
 8004d2e:	68fa      	ldr	r2, [r7, #12]
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	4413      	add	r3, r2
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	330c      	adds	r3, #12
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	6879      	ldr	r1, [r7, #4]
 8004d40:	4798      	blx	r3
    }
 8004d42:	bf00      	nop
 8004d44:	3710      	adds	r7, #16
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
	...

08004d4c <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm>:
    virtual void setCommand(const Handle handle, Command cmd, uint32_t param)
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b086      	sub	sp, #24
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	60f8      	str	r0, [r7, #12]
 8004d54:	60b9      	str	r1, [r7, #8]
 8004d56:	603b      	str	r3, [r7, #0]
 8004d58:	4613      	mov	r3, r2
 8004d5a:	71fb      	strb	r3, [r7, #7]
        assert(handle < no_streams);
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d005      	beq.n	8004d6e <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x22>
 8004d62:	4b3a      	ldr	r3, [pc, #232]	; (8004e4c <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x100>)
 8004d64:	4a3a      	ldr	r2, [pc, #232]	; (8004e50 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x104>)
 8004d66:	21a2      	movs	r1, #162	; 0xa2
 8004d68:	483a      	ldr	r0, [pc, #232]	; (8004e54 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x108>)
 8004d6a:	f021 faf7 	bl	802635c <__assert_func>
        Stream& stream = streams[handle];
 8004d6e:	68ba      	ldr	r2, [r7, #8]
 8004d70:	4613      	mov	r3, r2
 8004d72:	00db      	lsls	r3, r3, #3
 8004d74:	4413      	add	r3, r2
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	3308      	adds	r3, #8
 8004d7a:	68fa      	ldr	r2, [r7, #12]
 8004d7c:	4413      	add	r3, r2
 8004d7e:	3304      	adds	r3, #4
 8004d80:	617b      	str	r3, [r7, #20]
        switch (cmd)
 8004d82:	79fb      	ldrb	r3, [r7, #7]
 8004d84:	2b05      	cmp	r3, #5
 8004d86:	d85c      	bhi.n	8004e42 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0xf6>
 8004d88:	a201      	add	r2, pc, #4	; (adr r2, 8004d90 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x44>)
 8004d8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d8e:	bf00      	nop
 8004d90:	08004da9 	.word	0x08004da9
 8004d94:	08004de9 	.word	0x08004de9
 8004d98:	08004df1 	.word	0x08004df1
 8004d9c:	08004e05 	.word	0x08004e05
 8004da0:	08004e1f 	.word	0x08004e1f
 8004da4:	08004e2d 	.word	0x08004e2d
            if (mjpegDecoders[handle]->hasVideo())
 8004da8:	68fa      	ldr	r2, [r7, #12]
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	009b      	lsls	r3, r3, #2
 8004dae:	4413      	add	r3, r2
 8004db0:	6859      	ldr	r1, [r3, #4]
 8004db2:	68fa      	ldr	r2, [r7, #12]
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	009b      	lsls	r3, r3, #2
 8004db8:	4413      	add	r3, r2
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	3310      	adds	r3, #16
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4608      	mov	r0, r1
 8004dc4:	4798      	blx	r3
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d039      	beq.n	8004e40 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0xf4>
                stream.isPlaying = true;
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	775a      	strb	r2, [r3, #29]
                stream.hasMoreFrames = true; // Assume more frames, lowered on end
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	f883 2020 	strb.w	r2, [r3, #32]
                stream.frameCount = 0;
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	605a      	str	r2, [r3, #4]
                stream.tickCount = 0;
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	2200      	movs	r2, #0
 8004de4:	609a      	str	r2, [r3, #8]
            break;
 8004de6:	e02b      	b.n	8004e40 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0xf4>
            stream.isPlaying = false;
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	2200      	movs	r2, #0
 8004dec:	775a      	strb	r2, [r3, #29]
            break;
 8004dee:	e028      	b.n	8004e42 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0xf6>
            stream.seek_to_frame = param;
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	683a      	ldr	r2, [r7, #0]
 8004df4:	615a      	str	r2, [r3, #20]
            stream.frameCount = 0;
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	605a      	str	r2, [r3, #4]
            stream.tickCount = 0;
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	609a      	str	r2, [r3, #8]
            break;
 8004e02:	e01e      	b.n	8004e42 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0xf6>
            stream.seek_to_frame = param;
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	683a      	ldr	r2, [r7, #0]
 8004e08:	615a      	str	r2, [r3, #20]
            stream.isShowingOneFrame = true;
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	779a      	strb	r2, [r3, #30]
            stream.frameCount = 0;
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	2200      	movs	r2, #0
 8004e14:	605a      	str	r2, [r3, #4]
            stream.tickCount = 0;
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	609a      	str	r2, [r3, #8]
            break;
 8004e1c:	e011      	b.n	8004e42 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0xf6>
            stream.isPlaying = false;
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	2200      	movs	r2, #0
 8004e22:	775a      	strb	r2, [r3, #29]
            stream.seek_to_frame = 1;
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	2201      	movs	r2, #1
 8004e28:	615a      	str	r2, [r3, #20]
            break;
 8004e2a:	e00a      	b.n	8004e42 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0xf6>
            stream.repeat = (param > 0);
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	bf14      	ite	ne
 8004e32:	2301      	movne	r3, #1
 8004e34:	2300      	moveq	r3, #0
 8004e36:	b2da      	uxtb	r2, r3
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            break;
 8004e3e:	e000      	b.n	8004e42 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0xf6>
            break;
 8004e40:	bf00      	nop
    }
 8004e42:	bf00      	nop
 8004e44:	3718      	adds	r7, #24
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}
 8004e4a:	bf00      	nop
 8004e4c:	0802825c 	.word	0x0802825c
 8004e50:	080287ac 	.word	0x080287ac
 8004e54:	08028038 	.word	0x08028038

08004e58 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm>:
    virtual uint32_t getCurrentFrameNumber(const Handle handle)
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b084      	sub	sp, #16
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
 8004e60:	6039      	str	r1, [r7, #0]
        assert(handle < no_streams);
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d005      	beq.n	8004e74 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x1c>
 8004e68:	4b0a      	ldr	r3, [pc, #40]	; (8004e94 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x3c>)
 8004e6a:	4a0b      	ldr	r2, [pc, #44]	; (8004e98 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x40>)
 8004e6c:	2179      	movs	r1, #121	; 0x79
 8004e6e:	480b      	ldr	r0, [pc, #44]	; (8004e9c <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x44>)
 8004e70:	f021 fa74 	bl	802635c <__assert_func>
        const Stream& stream = streams[handle];
 8004e74:	683a      	ldr	r2, [r7, #0]
 8004e76:	4613      	mov	r3, r2
 8004e78:	00db      	lsls	r3, r3, #3
 8004e7a:	4413      	add	r3, r2
 8004e7c:	009b      	lsls	r3, r3, #2
 8004e7e:	3308      	adds	r3, #8
 8004e80:	687a      	ldr	r2, [r7, #4]
 8004e82:	4413      	add	r3, r2
 8004e84:	3304      	adds	r3, #4
 8004e86:	60fb      	str	r3, [r7, #12]
        return stream.frameNumber;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
    }
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3710      	adds	r7, #16
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}
 8004e94:	0802825c 	.word	0x0802825c
 8004e98:	08028980 	.word	0x08028980
 8004e9c:	08028038 	.word	0x08028038

08004ea0 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE>:
    virtual void getVideoInformation(const Handle handle, touchgfx::VideoInformation* data)
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b084      	sub	sp, #16
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	60f8      	str	r0, [r7, #12]
 8004ea8:	60b9      	str	r1, [r7, #8]
 8004eaa:	607a      	str	r2, [r7, #4]
        assert(handle < no_streams);
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d006      	beq.n	8004ec0 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x20>
 8004eb2:	4b0d      	ldr	r3, [pc, #52]	; (8004ee8 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x48>)
 8004eb4:	4a0d      	ldr	r2, [pc, #52]	; (8004eec <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x4c>)
 8004eb6:	f44f 71b5 	mov.w	r1, #362	; 0x16a
 8004eba:	480d      	ldr	r0, [pc, #52]	; (8004ef0 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x50>)
 8004ebc:	f021 fa4e 	bl	802635c <__assert_func>
        mjpegDecoders[handle]->getVideoInfo(data);
 8004ec0:	68fa      	ldr	r2, [r7, #12]
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	009b      	lsls	r3, r3, #2
 8004ec6:	4413      	add	r3, r2
 8004ec8:	6858      	ldr	r0, [r3, #4]
 8004eca:	68fa      	ldr	r2, [r7, #12]
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	009b      	lsls	r3, r3, #2
 8004ed0:	4413      	add	r3, r2
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	3330      	adds	r3, #48	; 0x30
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	6879      	ldr	r1, [r7, #4]
 8004edc:	4798      	blx	r3
    }
 8004ede:	bf00      	nop
 8004ee0:	3710      	adds	r7, #16
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}
 8004ee6:	bf00      	nop
 8004ee8:	0802825c 	.word	0x0802825c
 8004eec:	08028b38 	.word	0x08028b38
 8004ef0:	08028038 	.word	0x08028038

08004ef4 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm>:
    virtual bool getIsPlaying(const Handle handle)
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b084      	sub	sp, #16
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
 8004efc:	6039      	str	r1, [r7, #0]
        assert(handle < no_streams);
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d006      	beq.n	8004f12 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x1e>
 8004f04:	4b0b      	ldr	r3, [pc, #44]	; (8004f34 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x40>)
 8004f06:	4a0c      	ldr	r2, [pc, #48]	; (8004f38 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x44>)
 8004f08:	f44f 71b8 	mov.w	r1, #368	; 0x170
 8004f0c:	480b      	ldr	r0, [pc, #44]	; (8004f3c <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x48>)
 8004f0e:	f021 fa25 	bl	802635c <__assert_func>
        Stream& stream = streams[handle];
 8004f12:	683a      	ldr	r2, [r7, #0]
 8004f14:	4613      	mov	r3, r2
 8004f16:	00db      	lsls	r3, r3, #3
 8004f18:	4413      	add	r3, r2
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	3308      	adds	r3, #8
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	4413      	add	r3, r2
 8004f22:	3304      	adds	r3, #4
 8004f24:	60fb      	str	r3, [r7, #12]
        return stream.isPlaying;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	7f5b      	ldrb	r3, [r3, #29]
    }
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3710      	adds	r7, #16
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}
 8004f32:	bf00      	nop
 8004f34:	0802825c 	.word	0x0802825c
 8004f38:	08028ce8 	.word	0x08028ce8
 8004f3c:	08028038 	.word	0x08028038

08004f40 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE13getFreeHandleEv>:

    Handle getFreeHandle()
 8004f40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f42:	b08d      	sub	sp, #52	; 0x34
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
    {
        // Running in UI thread

        for (uint32_t i = 0; i < no_streams; i++)
 8004f48:	2300      	movs	r3, #0
 8004f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d135      	bne.n	8004fbe <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE13getFreeHandleEv+0x7e>
        {
            if (streams[i].isActive == false)
 8004f52:	6879      	ldr	r1, [r7, #4]
 8004f54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f56:	4613      	mov	r3, r2
 8004f58:	00db      	lsls	r3, r3, #3
 8004f5a:	4413      	add	r3, r2
 8004f5c:	009b      	lsls	r3, r3, #2
 8004f5e:	440b      	add	r3, r1
 8004f60:	3328      	adds	r3, #40	; 0x28
 8004f62:	781b      	ldrb	r3, [r3, #0]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d126      	bne.n	8004fb6 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE13getFreeHandleEv+0x76>
            {
                // Reset stream parameters
                streams[i] = Stream();
 8004f68:	f107 0308 	add.w	r3, r7, #8
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f7ff fc9a 	bl	80048a6 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE6StreamC1Ev>
 8004f72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f74:	4613      	mov	r3, r2
 8004f76:	00db      	lsls	r3, r3, #3
 8004f78:	4413      	add	r3, r2
 8004f7a:	009b      	lsls	r3, r3, #2
 8004f7c:	3308      	adds	r3, #8
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	4413      	add	r3, r2
 8004f82:	3304      	adds	r3, #4
 8004f84:	f107 0408 	add.w	r4, r7, #8
 8004f88:	469c      	mov	ip, r3
 8004f8a:	f104 0e20 	add.w	lr, r4, #32
 8004f8e:	4665      	mov	r5, ip
 8004f90:	4626      	mov	r6, r4
 8004f92:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8004f94:	6028      	str	r0, [r5, #0]
 8004f96:	6069      	str	r1, [r5, #4]
 8004f98:	60aa      	str	r2, [r5, #8]
 8004f9a:	60eb      	str	r3, [r5, #12]
 8004f9c:	3410      	adds	r4, #16
 8004f9e:	f10c 0c10 	add.w	ip, ip, #16
 8004fa2:	4574      	cmp	r4, lr
 8004fa4:	d1f3      	bne.n	8004f8e <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE13getFreeHandleEv+0x4e>
 8004fa6:	4663      	mov	r3, ip
 8004fa8:	4622      	mov	r2, r4
 8004faa:	8811      	ldrh	r1, [r2, #0]
 8004fac:	7892      	ldrb	r2, [r2, #2]
 8004fae:	8019      	strh	r1, [r3, #0]
 8004fb0:	709a      	strb	r2, [r3, #2]

                return static_cast<VideoController::Handle>(i);
 8004fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fb4:	e00a      	b.n	8004fcc <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE13getFreeHandleEv+0x8c>
        for (uint32_t i = 0; i < no_streams; i++)
 8004fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fb8:	3301      	adds	r3, #1
 8004fba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fbc:	e7c6      	b.n	8004f4c <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE13getFreeHandleEv+0xc>
            }
        }

        assert(0 && "Unable to find free video stream handle!");
 8004fbe:	4b05      	ldr	r3, [pc, #20]	; (8004fd4 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE13getFreeHandleEv+0x94>)
 8004fc0:	4a05      	ldr	r2, [pc, #20]	; (8004fd8 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE13getFreeHandleEv+0x98>)
 8004fc2:	f240 11c5 	movw	r1, #453	; 0x1c5
 8004fc6:	4805      	ldr	r0, [pc, #20]	; (8004fdc <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE13getFreeHandleEv+0x9c>)
 8004fc8:	f021 f9c8 	bl	802635c <__assert_func>
        return static_cast<VideoController::Handle>(0);
    }
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3734      	adds	r7, #52	; 0x34
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004fd4:	08028e74 	.word	0x08028e74
 8004fd8:	08028ea4 	.word	0x08028ea4
 8004fdc:	08028038 	.word	0x08028038

08004fe0 <_GLOBAL__sub_I_mjpegdecoder1>:
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	af00      	add	r7, sp, #0
 8004fe4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004fe8:	2001      	movs	r0, #1
 8004fea:	f7ff fcf3 	bl	80049d4 <_Z41__static_initialization_and_destruction_0ii>
 8004fee:	bd80      	pop	{r7, pc}

08004ff0 <_GLOBAL__sub_D_mjpegdecoder1>:
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	af00      	add	r7, sp, #0
 8004ff4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004ff8:	2000      	movs	r0, #0
 8004ffa:	f7ff fceb 	bl	80049d4 <_Z41__static_initialization_and_destruction_0ii>
 8004ffe:	bd80      	pop	{r7, pc}

08005000 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks>:
static uint32_t TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
 8005000:	b480      	push	{r7}
 8005002:	b097      	sub	sp, #92	; 0x5c
 8005004:	af00      	add	r7, sp, #0
 8005006:	60f8      	str	r0, [r7, #12]
 8005008:	60b9      	str	r1, [r7, #8]
 800500a:	607a      	str	r2, [r7, #4]
 800500c:	603b      	str	r3, [r7, #0]
  int32_t c_red, c_blue, c_green;

  uint8_t *pOutAddr, *pOutAddr2;
  uint8_t *pChrom, *pLum;

  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	4a9e      	ldr	r2, [pc, #632]	; (800528c <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x28c>)
 8005012:	fba2 2303 	umull	r2, r3, r2, r3
 8005016:	0a1b      	lsrs	r3, r3, #8
 8005018:	633b      	str	r3, [r7, #48]	; 0x30
  currentMCU = BlockIndex;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	64bb      	str	r3, [r7, #72]	; 0x48

  while(currentMCU < (numberMCU + BlockIndex))
 800501e:	e127      	b.n	8005270 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x270>
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
 8005020:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005022:	011a      	lsls	r2, r3, #4
 8005024:	4b9a      	ldr	r3, [pc, #616]	; (8005290 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x290>)
 8005026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005028:	fbb2 f3f3 	udiv	r3, r2, r3
 800502c:	011b      	lsls	r3, r3, #4
 800502e:	62fb      	str	r3, [r7, #44]	; 0x2c

    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
 8005030:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005032:	011b      	lsls	r3, r3, #4
 8005034:	4a96      	ldr	r2, [pc, #600]	; (8005290 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x290>)
 8005036:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005038:	fbb3 f1f2 	udiv	r1, r3, r2
 800503c:	fb01 f202 	mul.w	r2, r1, r2
 8005040:	1a9b      	subs	r3, r3, r2
 8005042:	62bb      	str	r3, [r7, #40]	; 0x28

    //tgfx: Set stride to the full width of the RGB Buffer, and not the video itself.
    JPEG_ConvertorParams.ScaledWidth = 480 * 3;
 8005044:	4b92      	ldr	r3, [pc, #584]	; (8005290 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x290>)
 8005046:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 800504a:	629a      	str	r2, [r3, #40]	; 0x28

    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800504c:	4b90      	ldr	r3, [pc, #576]	; (8005290 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x290>)
 800504e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005050:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005052:	fb02 f103 	mul.w	r1, r2, r3
 8005056:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005058:	4613      	mov	r3, r2
 800505a:	005b      	lsls	r3, r3, #1
 800505c:	4413      	add	r3, r2
 800505e:	440b      	add	r3, r1
 8005060:	647b      	str	r3, [r7, #68]	; 0x44

    currentMCU++;
 8005062:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005064:	3301      	adds	r3, #1
 8005066:	64bb      	str	r3, [r7, #72]	; 0x48

    pChrom = pInBuffer + 256; /* pChroma = pInBuffer + 4*64 */
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800506e:	63bb      	str	r3, [r7, #56]	; 0x38

    pLum = pInBuffer;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	637b      	str	r3, [r7, #52]	; 0x34

    for(i= 0; i <  16; i+=2)
 8005074:	2300      	movs	r3, #0
 8005076:	657b      	str	r3, [r7, #84]	; 0x54
 8005078:	e0f2      	b.n	8005260 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x260>
    {
      if(i == 8)
 800507a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800507c:	2b08      	cmp	r3, #8
 800507e:	d102      	bne.n	8005086 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x86>
      {
        pLum = pInBuffer + 128;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	3380      	adds	r3, #128	; 0x80
 8005084:	637b      	str	r3, [r7, #52]	; 0x34
      }

      if(refline < JPEG_ConvertorParams.ScaledWidth * 272)
 8005086:	4b82      	ldr	r3, [pc, #520]	; (8005290 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x290>)
 8005088:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800508a:	4613      	mov	r3, r2
 800508c:	011b      	lsls	r3, r3, #4
 800508e:	4413      	add	r3, r2
 8005090:	011b      	lsls	r3, r3, #4
 8005092:	461a      	mov	r2, r3
 8005094:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005096:	4293      	cmp	r3, r2
 8005098:	f080 80df 	bcs.w	800525a <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x25a>
      {
        pOutAddr = pOutBuffer + refline;
 800509c:	68ba      	ldr	r2, [r7, #8]
 800509e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050a0:	4413      	add	r3, r2
 80050a2:	643b      	str	r3, [r7, #64]	; 0x40
        pOutAddr2 = pOutAddr + JPEG_ConvertorParams.ScaledWidth;
 80050a4:	4b7a      	ldr	r3, [pc, #488]	; (8005290 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x290>)
 80050a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80050aa:	4413      	add	r3, r2
 80050ac:	63fb      	str	r3, [r7, #60]	; 0x3c

        for(k= 0; k<2; k++)
 80050ae:	2300      	movs	r3, #0
 80050b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050b2:	e0c5      	b.n	8005240 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x240>
        {
          for(j=0; j < 8; j+=2)
 80050b4:	2300      	movs	r3, #0
 80050b6:	653b      	str	r3, [r7, #80]	; 0x50
 80050b8:	e0b8      	b.n	800522c <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x22c>
          {
            cbcomp = (int32_t)(*(pChrom));
 80050ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050bc:	781b      	ldrb	r3, [r3, #0]
 80050be:	627b      	str	r3, [r7, #36]	; 0x24
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 80050c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c2:	009b      	lsls	r3, r3, #2
 80050c4:	4a73      	ldr	r2, [pc, #460]	; (8005294 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x294>)
 80050c6:	4413      	add	r3, r2
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	623b      	str	r3, [r7, #32]

            crcomp = (int32_t)(*(pChrom + 64));
 80050cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050ce:	3340      	adds	r3, #64	; 0x40
 80050d0:	781b      	ldrb	r3, [r3, #0]
 80050d2:	61fb      	str	r3, [r7, #28]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
 80050d4:	69fb      	ldr	r3, [r7, #28]
 80050d6:	009b      	lsls	r3, r3, #2
 80050d8:	4a6f      	ldr	r2, [pc, #444]	; (8005298 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x298>)
 80050da:	4413      	add	r3, r2
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	61bb      	str	r3, [r7, #24]

            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
 80050e0:	69fb      	ldr	r3, [r7, #28]
 80050e2:	009b      	lsls	r3, r3, #2
 80050e4:	4a6d      	ldr	r2, [pc, #436]	; (800529c <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x29c>)
 80050e6:	4413      	add	r3, r2
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ec:	009b      	lsls	r3, r3, #2
 80050ee:	496c      	ldr	r1, [pc, #432]	; (80052a0 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2a0>)
 80050f0:	440b      	add	r3, r1
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4413      	add	r3, r2
 80050f6:	141b      	asrs	r3, r3, #16
 80050f8:	617b      	str	r3, [r7, #20]
              (CLAMP( ycomp + c_green) << JPEG_GREEN_OFFSET) | \
              (CLAMP(ycomp + c_blue) << JPEG_BLUE_OFFSET);

#elif (JPEG_RGB_FORMAT == JPEG_RGB888)

           ycomp = (int32_t)(*(pLum +j));
 80050fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80050fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050fe:	4413      	add	r3, r2
 8005100:	781b      	ldrb	r3, [r3, #0]
 8005102:	613b      	str	r3, [r7, #16]

            pOutAddr[JPEG_RED_OFFSET/8] = CLAMP(ycomp + c_red);
 8005104:	693a      	ldr	r2, [r7, #16]
 8005106:	69bb      	ldr	r3, [r7, #24]
 8005108:	4413      	add	r3, r2
 800510a:	f503 7280 	add.w	r2, r3, #256	; 0x100
 800510e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005110:	3302      	adds	r3, #2
 8005112:	4964      	ldr	r1, [pc, #400]	; (80052a4 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2a4>)
 8005114:	5c8a      	ldrb	r2, [r1, r2]
 8005116:	701a      	strb	r2, [r3, #0]
            pOutAddr[JPEG_GREEN_OFFSET/8] = CLAMP(ycomp + c_green);
 8005118:	693a      	ldr	r2, [r7, #16]
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	4413      	add	r3, r2
 800511e:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8005122:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005124:	3301      	adds	r3, #1
 8005126:	495f      	ldr	r1, [pc, #380]	; (80052a4 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2a4>)
 8005128:	5c8a      	ldrb	r2, [r1, r2]
 800512a:	701a      	strb	r2, [r3, #0]
            pOutAddr[JPEG_BLUE_OFFSET/8] = CLAMP(ycomp + c_blue);
 800512c:	693a      	ldr	r2, [r7, #16]
 800512e:	6a3b      	ldr	r3, [r7, #32]
 8005130:	4413      	add	r3, r2
 8005132:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005136:	4a5b      	ldr	r2, [pc, #364]	; (80052a4 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2a4>)
 8005138:	5cd2      	ldrb	r2, [r2, r3]
 800513a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800513c:	701a      	strb	r2, [r3, #0]

            /**********/
            ycomp = (int32_t)(*(pLum +j +1));
 800513e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005140:	3301      	adds	r3, #1
 8005142:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005144:	4413      	add	r3, r2
 8005146:	781b      	ldrb	r3, [r3, #0]
 8005148:	613b      	str	r3, [r7, #16]

            pOutAddr[3 + JPEG_RED_OFFSET/8] = CLAMP(ycomp + c_red);
 800514a:	693a      	ldr	r2, [r7, #16]
 800514c:	69bb      	ldr	r3, [r7, #24]
 800514e:	4413      	add	r3, r2
 8005150:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8005154:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005156:	3305      	adds	r3, #5
 8005158:	4952      	ldr	r1, [pc, #328]	; (80052a4 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2a4>)
 800515a:	5c8a      	ldrb	r2, [r1, r2]
 800515c:	701a      	strb	r2, [r3, #0]
            pOutAddr[3 + JPEG_GREEN_OFFSET/8] = CLAMP(ycomp + c_green);
 800515e:	693a      	ldr	r2, [r7, #16]
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	4413      	add	r3, r2
 8005164:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8005168:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800516a:	3304      	adds	r3, #4
 800516c:	494d      	ldr	r1, [pc, #308]	; (80052a4 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2a4>)
 800516e:	5c8a      	ldrb	r2, [r1, r2]
 8005170:	701a      	strb	r2, [r3, #0]
            pOutAddr[3 + JPEG_BLUE_OFFSET/8] = CLAMP(ycomp + c_blue);
 8005172:	693a      	ldr	r2, [r7, #16]
 8005174:	6a3b      	ldr	r3, [r7, #32]
 8005176:	4413      	add	r3, r2
 8005178:	f503 7280 	add.w	r2, r3, #256	; 0x100
 800517c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800517e:	3303      	adds	r3, #3
 8005180:	4948      	ldr	r1, [pc, #288]	; (80052a4 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2a4>)
 8005182:	5c8a      	ldrb	r2, [r1, r2]
 8005184:	701a      	strb	r2, [r3, #0]

            /**********/
            ycomp = (int32_t)(*(pLum +j +8));
 8005186:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005188:	3308      	adds	r3, #8
 800518a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800518c:	4413      	add	r3, r2
 800518e:	781b      	ldrb	r3, [r3, #0]
 8005190:	613b      	str	r3, [r7, #16]

            pOutAddr2[JPEG_RED_OFFSET/8] = CLAMP(ycomp + c_red);
 8005192:	693a      	ldr	r2, [r7, #16]
 8005194:	69bb      	ldr	r3, [r7, #24]
 8005196:	4413      	add	r3, r2
 8005198:	f503 7280 	add.w	r2, r3, #256	; 0x100
 800519c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800519e:	3302      	adds	r3, #2
 80051a0:	4940      	ldr	r1, [pc, #256]	; (80052a4 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2a4>)
 80051a2:	5c8a      	ldrb	r2, [r1, r2]
 80051a4:	701a      	strb	r2, [r3, #0]
            pOutAddr2[JPEG_GREEN_OFFSET/8] = CLAMP(ycomp + c_green);
 80051a6:	693a      	ldr	r2, [r7, #16]
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	4413      	add	r3, r2
 80051ac:	f503 7280 	add.w	r2, r3, #256	; 0x100
 80051b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051b2:	3301      	adds	r3, #1
 80051b4:	493b      	ldr	r1, [pc, #236]	; (80052a4 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2a4>)
 80051b6:	5c8a      	ldrb	r2, [r1, r2]
 80051b8:	701a      	strb	r2, [r3, #0]
            pOutAddr2[JPEG_BLUE_OFFSET/8] = CLAMP(ycomp + c_blue);
 80051ba:	693a      	ldr	r2, [r7, #16]
 80051bc:	6a3b      	ldr	r3, [r7, #32]
 80051be:	4413      	add	r3, r2
 80051c0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80051c4:	4a37      	ldr	r2, [pc, #220]	; (80052a4 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2a4>)
 80051c6:	5cd2      	ldrb	r2, [r2, r3]
 80051c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051ca:	701a      	strb	r2, [r3, #0]

            /**********/
            ycomp = (int32_t)(*(pLum +j +8 +1));
 80051cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051ce:	3309      	adds	r3, #9
 80051d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80051d2:	4413      	add	r3, r2
 80051d4:	781b      	ldrb	r3, [r3, #0]
 80051d6:	613b      	str	r3, [r7, #16]

            pOutAddr2[3+ JPEG_RED_OFFSET/8] = CLAMP(ycomp + c_red);
 80051d8:	693a      	ldr	r2, [r7, #16]
 80051da:	69bb      	ldr	r3, [r7, #24]
 80051dc:	4413      	add	r3, r2
 80051de:	f503 7280 	add.w	r2, r3, #256	; 0x100
 80051e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051e4:	3305      	adds	r3, #5
 80051e6:	492f      	ldr	r1, [pc, #188]	; (80052a4 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2a4>)
 80051e8:	5c8a      	ldrb	r2, [r1, r2]
 80051ea:	701a      	strb	r2, [r3, #0]
            pOutAddr2[3 + JPEG_GREEN_OFFSET/8] = CLAMP(ycomp + c_green);
 80051ec:	693a      	ldr	r2, [r7, #16]
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	4413      	add	r3, r2
 80051f2:	f503 7280 	add.w	r2, r3, #256	; 0x100
 80051f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051f8:	3304      	adds	r3, #4
 80051fa:	492a      	ldr	r1, [pc, #168]	; (80052a4 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2a4>)
 80051fc:	5c8a      	ldrb	r2, [r1, r2]
 80051fe:	701a      	strb	r2, [r3, #0]
            pOutAddr2[3 + JPEG_BLUE_OFFSET/8] = CLAMP(ycomp + c_blue);
 8005200:	693a      	ldr	r2, [r7, #16]
 8005202:	6a3b      	ldr	r3, [r7, #32]
 8005204:	4413      	add	r3, r2
 8005206:	f503 7280 	add.w	r2, r3, #256	; 0x100
 800520a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800520c:	3303      	adds	r3, #3
 800520e:	4925      	ldr	r1, [pc, #148]	; (80052a4 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2a4>)
 8005210:	5c8a      	ldrb	r2, [r1, r2]
 8005212:	701a      	strb	r2, [r3, #0]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
#endif /* JPEG_RGB_FORMAT */

            pOutAddr += JPEG_BYTES_PER_PIXEL * 2;
 8005214:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005216:	3306      	adds	r3, #6
 8005218:	643b      	str	r3, [r7, #64]	; 0x40
            pOutAddr2 += JPEG_BYTES_PER_PIXEL * 2;
 800521a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800521c:	3306      	adds	r3, #6
 800521e:	63fb      	str	r3, [r7, #60]	; 0x3c

            pChrom++;
 8005220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005222:	3301      	adds	r3, #1
 8005224:	63bb      	str	r3, [r7, #56]	; 0x38
          for(j=0; j < 8; j+=2)
 8005226:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005228:	3302      	adds	r3, #2
 800522a:	653b      	str	r3, [r7, #80]	; 0x50
 800522c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800522e:	2b07      	cmp	r3, #7
 8005230:	f67f af43 	bls.w	80050ba <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xba>
          }
          pLum += 64;
 8005234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005236:	3340      	adds	r3, #64	; 0x40
 8005238:	637b      	str	r3, [r7, #52]	; 0x34
        for(k= 0; k<2; k++)
 800523a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800523c:	3301      	adds	r3, #1
 800523e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005240:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005242:	2b01      	cmp	r3, #1
 8005244:	f67f af36 	bls.w	80050b4 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xb4>
        }

        pLum = pLum - 128 + 16;
 8005248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800524a:	3b70      	subs	r3, #112	; 0x70
 800524c:	637b      	str	r3, [r7, #52]	; 0x34

        refline += 2*JPEG_ConvertorParams.ScaledWidth;
 800524e:	4b10      	ldr	r3, [pc, #64]	; (8005290 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x290>)
 8005250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005252:	005b      	lsls	r3, r3, #1
 8005254:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005256:	4413      	add	r3, r2
 8005258:	647b      	str	r3, [r7, #68]	; 0x44
    for(i= 0; i <  16; i+=2)
 800525a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800525c:	3302      	adds	r3, #2
 800525e:	657b      	str	r3, [r7, #84]	; 0x54
 8005260:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005262:	2b0f      	cmp	r3, #15
 8005264:	f67f af09 	bls.w	800507a <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x7a>
      }
    }

    pInBuffer +=  YCBCR_420_BLOCK_SIZE;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800526e:	60fb      	str	r3, [r7, #12]
  while(currentMCU < (numberMCU + BlockIndex))
 8005270:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	4413      	add	r3, r2
 8005276:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005278:	429a      	cmp	r2, r3
 800527a:	f4ff aed1 	bcc.w	8005020 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x20>
  }
  return numberMCU;
 800527e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8005280:	4618      	mov	r0, r3
 8005282:	375c      	adds	r7, #92	; 0x5c
 8005284:	46bd      	mov	sp, r7
 8005286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528a:	4770      	bx	lr
 800528c:	aaaaaaab 	.word	0xaaaaaaab
 8005290:	24006d80 	.word	0x24006d80
 8005294:	240071c0 	.word	0x240071c0
 8005298:	24006dc0 	.word	0x24006dc0
 800529c:	240075c0 	.word	0x240075c0
 80052a0:	240079c0 	.word	0x240079c0
 80052a4:	08029d60 	.word	0x08029d60

080052a8 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr422_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b097      	sub	sp, #92	; 0x5c
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	60f8      	str	r0, [r7, #12]
 80052b0:	60b9      	str	r1, [r7, #8]
 80052b2:	607a      	str	r2, [r7, #4]
 80052b4:	603b      	str	r3, [r7, #0]
  int32_t c_red, c_blue, c_green;

  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;

  numberMCU = DataCount / YCBCR_422_BLOCK_SIZE;
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	0a1b      	lsrs	r3, r3, #8
 80052ba:	637b      	str	r3, [r7, #52]	; 0x34
  currentMCU = BlockIndex;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	64bb      	str	r3, [r7, #72]	; 0x48

  while(currentMCU < (numberMCU + BlockIndex))
 80052c0:	e0c5      	b.n	800544e <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1a6>
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
 80052c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052c4:	011a      	lsls	r2, r3, #4
 80052c6:	4b69      	ldr	r3, [pc, #420]	; (800546c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1c4>)
 80052c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80052ce:	00db      	lsls	r3, r3, #3
 80052d0:	633b      	str	r3, [r7, #48]	; 0x30

    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
 80052d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052d4:	011b      	lsls	r3, r3, #4
 80052d6:	4a65      	ldr	r2, [pc, #404]	; (800546c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1c4>)
 80052d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80052da:	fbb3 f1f2 	udiv	r1, r3, r2
 80052de:	fb01 f202 	mul.w	r2, r1, r2
 80052e2:	1a9b      	subs	r3, r3, r2
 80052e4:	62fb      	str	r3, [r7, #44]	; 0x2c

    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 80052e6:	4b61      	ldr	r3, [pc, #388]	; (800546c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1c4>)
 80052e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052ec:	fb02 f103 	mul.w	r1, r2, r3
 80052f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052f2:	4613      	mov	r3, r2
 80052f4:	005b      	lsls	r3, r3, #1
 80052f6:	4413      	add	r3, r2
 80052f8:	440b      	add	r3, r1
 80052fa:	647b      	str	r3, [r7, #68]	; 0x44

    currentMCU++;
 80052fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052fe:	3301      	adds	r3, #1
 8005300:	64bb      	str	r3, [r7, #72]	; 0x48

    pChrom = pInBuffer + 128; /* pChroma = pInBuffer + 2*64 */
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	3380      	adds	r3, #128	; 0x80
 8005306:	63fb      	str	r3, [r7, #60]	; 0x3c

    pLum = pInBuffer;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	63bb      	str	r3, [r7, #56]	; 0x38

    for(i= 0; i <  8; i++)
 800530c:	2300      	movs	r3, #0
 800530e:	657b      	str	r3, [r7, #84]	; 0x54
 8005310:	e095      	b.n	800543e <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x196>
    {
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8005312:	4b56      	ldr	r3, [pc, #344]	; (800546c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1c4>)
 8005314:	691b      	ldr	r3, [r3, #16]
 8005316:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005318:	429a      	cmp	r2, r3
 800531a:	f080 808d 	bcs.w	8005438 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x190>
      {
        pOutAddr = pOutBuffer + refline;
 800531e:	68ba      	ldr	r2, [r7, #8]
 8005320:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005322:	4413      	add	r3, r2
 8005324:	643b      	str	r3, [r7, #64]	; 0x40

        for(k= 0; k<2; k++)
 8005326:	2300      	movs	r3, #0
 8005328:	64fb      	str	r3, [r7, #76]	; 0x4c
 800532a:	e07a      	b.n	8005422 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x17a>
        {
          for(j=0; j < 8; j+=2)
 800532c:	2300      	movs	r3, #0
 800532e:	653b      	str	r3, [r7, #80]	; 0x50
 8005330:	e06e      	b.n	8005410 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x168>
          {
            cbcomp = (int32_t)(*(pChrom));
 8005332:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005334:	781b      	ldrb	r3, [r3, #0]
 8005336:	62bb      	str	r3, [r7, #40]	; 0x28
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 8005338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800533a:	009b      	lsls	r3, r3, #2
 800533c:	4a4c      	ldr	r2, [pc, #304]	; (8005470 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1c8>)
 800533e:	4413      	add	r3, r2
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	627b      	str	r3, [r7, #36]	; 0x24

            crcomp = (int32_t)(*(pChrom + 64));
 8005344:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005346:	3340      	adds	r3, #64	; 0x40
 8005348:	781b      	ldrb	r3, [r3, #0]
 800534a:	623b      	str	r3, [r7, #32]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
 800534c:	6a3b      	ldr	r3, [r7, #32]
 800534e:	009b      	lsls	r3, r3, #2
 8005350:	4a48      	ldr	r2, [pc, #288]	; (8005474 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1cc>)
 8005352:	4413      	add	r3, r2
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	61fb      	str	r3, [r7, #28]

            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
 8005358:	6a3b      	ldr	r3, [r7, #32]
 800535a:	009b      	lsls	r3, r3, #2
 800535c:	4a46      	ldr	r2, [pc, #280]	; (8005478 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1d0>)
 800535e:	4413      	add	r3, r2
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005364:	009b      	lsls	r3, r3, #2
 8005366:	4945      	ldr	r1, [pc, #276]	; (800547c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1d4>)
 8005368:	440b      	add	r3, r1
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4413      	add	r3, r2
 800536e:	141b      	asrs	r3, r3, #16
 8005370:	61bb      	str	r3, [r7, #24]
              (CLAMP( ycomp + c_green) << JPEG_GREEN_OFFSET) | \
              (CLAMP(ycomp + c_blue) << JPEG_BLUE_OFFSET);

#elif (JPEG_RGB_FORMAT == JPEG_RGB888)

           ycomp = (int32_t)(*(pLum +j));
 8005372:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005374:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005376:	4413      	add	r3, r2
 8005378:	781b      	ldrb	r3, [r3, #0]
 800537a:	617b      	str	r3, [r7, #20]

            pOutAddr[JPEG_RED_OFFSET/8] = CLAMP(ycomp + c_red);
 800537c:	697a      	ldr	r2, [r7, #20]
 800537e:	69fb      	ldr	r3, [r7, #28]
 8005380:	4413      	add	r3, r2
 8005382:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8005386:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005388:	3302      	adds	r3, #2
 800538a:	493d      	ldr	r1, [pc, #244]	; (8005480 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1d8>)
 800538c:	5c8a      	ldrb	r2, [r1, r2]
 800538e:	701a      	strb	r2, [r3, #0]
            pOutAddr[JPEG_GREEN_OFFSET/8] = CLAMP(ycomp + c_green);
 8005390:	697a      	ldr	r2, [r7, #20]
 8005392:	69bb      	ldr	r3, [r7, #24]
 8005394:	4413      	add	r3, r2
 8005396:	f503 7280 	add.w	r2, r3, #256	; 0x100
 800539a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800539c:	3301      	adds	r3, #1
 800539e:	4938      	ldr	r1, [pc, #224]	; (8005480 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1d8>)
 80053a0:	5c8a      	ldrb	r2, [r1, r2]
 80053a2:	701a      	strb	r2, [r3, #0]
            pOutAddr[JPEG_BLUE_OFFSET/8] = CLAMP(ycomp + c_blue);
 80053a4:	697a      	ldr	r2, [r7, #20]
 80053a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a8:	4413      	add	r3, r2
 80053aa:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80053ae:	4a34      	ldr	r2, [pc, #208]	; (8005480 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1d8>)
 80053b0:	5cd2      	ldrb	r2, [r2, r3]
 80053b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053b4:	701a      	strb	r2, [r3, #0]

            /**********/
            ycomp = (int32_t)(*(pLum +j +1));
 80053b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053b8:	3301      	adds	r3, #1
 80053ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80053bc:	4413      	add	r3, r2
 80053be:	781b      	ldrb	r3, [r3, #0]
 80053c0:	617b      	str	r3, [r7, #20]

            pOutAddr[3 + JPEG_RED_OFFSET/8] = CLAMP(ycomp + c_red);
 80053c2:	697a      	ldr	r2, [r7, #20]
 80053c4:	69fb      	ldr	r3, [r7, #28]
 80053c6:	4413      	add	r3, r2
 80053c8:	f503 7280 	add.w	r2, r3, #256	; 0x100
 80053cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053ce:	3305      	adds	r3, #5
 80053d0:	492b      	ldr	r1, [pc, #172]	; (8005480 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1d8>)
 80053d2:	5c8a      	ldrb	r2, [r1, r2]
 80053d4:	701a      	strb	r2, [r3, #0]
            pOutAddr[3 + JPEG_GREEN_OFFSET/8] = CLAMP(ycomp + c_green);
 80053d6:	697a      	ldr	r2, [r7, #20]
 80053d8:	69bb      	ldr	r3, [r7, #24]
 80053da:	4413      	add	r3, r2
 80053dc:	f503 7280 	add.w	r2, r3, #256	; 0x100
 80053e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053e2:	3304      	adds	r3, #4
 80053e4:	4926      	ldr	r1, [pc, #152]	; (8005480 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1d8>)
 80053e6:	5c8a      	ldrb	r2, [r1, r2]
 80053e8:	701a      	strb	r2, [r3, #0]
            pOutAddr[3 + JPEG_BLUE_OFFSET/8] = CLAMP(ycomp + c_blue);
 80053ea:	697a      	ldr	r2, [r7, #20]
 80053ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ee:	4413      	add	r3, r2
 80053f0:	f503 7280 	add.w	r2, r3, #256	; 0x100
 80053f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053f6:	3303      	adds	r3, #3
 80053f8:	4921      	ldr	r1, [pc, #132]	; (8005480 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1d8>)
 80053fa:	5c8a      	ldrb	r2, [r1, r2]
 80053fc:	701a      	strb	r2, [r3, #0]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);

#endif /* JPEG_RGB_FORMAT*/

            pOutAddr += JPEG_BYTES_PER_PIXEL * 2;
 80053fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005400:	3306      	adds	r3, #6
 8005402:	643b      	str	r3, [r7, #64]	; 0x40

            pChrom++;
 8005404:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005406:	3301      	adds	r3, #1
 8005408:	63fb      	str	r3, [r7, #60]	; 0x3c
          for(j=0; j < 8; j+=2)
 800540a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800540c:	3302      	adds	r3, #2
 800540e:	653b      	str	r3, [r7, #80]	; 0x50
 8005410:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005412:	2b07      	cmp	r3, #7
 8005414:	d98d      	bls.n	8005332 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x8a>
          }
          pLum += 64;
 8005416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005418:	3340      	adds	r3, #64	; 0x40
 800541a:	63bb      	str	r3, [r7, #56]	; 0x38
        for(k= 0; k<2; k++)
 800541c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800541e:	3301      	adds	r3, #1
 8005420:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005422:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005424:	2b01      	cmp	r3, #1
 8005426:	d981      	bls.n	800532c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x84>
        }

        pLum = pLum - 128 + 8;
 8005428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800542a:	3b78      	subs	r3, #120	; 0x78
 800542c:	63bb      	str	r3, [r7, #56]	; 0x38

        refline += JPEG_ConvertorParams.ScaledWidth;
 800542e:	4b0f      	ldr	r3, [pc, #60]	; (800546c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1c4>)
 8005430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005432:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005434:	4413      	add	r3, r2
 8005436:	647b      	str	r3, [r7, #68]	; 0x44
    for(i= 0; i <  8; i++)
 8005438:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800543a:	3301      	adds	r3, #1
 800543c:	657b      	str	r3, [r7, #84]	; 0x54
 800543e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005440:	2b07      	cmp	r3, #7
 8005442:	f67f af66 	bls.w	8005312 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x6a>
      }
    }

    pInBuffer +=  YCBCR_422_BLOCK_SIZE;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800544c:	60fb      	str	r3, [r7, #12]
  while(currentMCU < (numberMCU + BlockIndex))
 800544e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	4413      	add	r3, r2
 8005454:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005456:	429a      	cmp	r2, r3
 8005458:	f4ff af33 	bcc.w	80052c2 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1a>
  }
  return numberMCU;
 800545c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800545e:	4618      	mov	r0, r3
 8005460:	375c      	adds	r7, #92	; 0x5c
 8005462:	46bd      	mov	sp, r7
 8005464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005468:	4770      	bx	lr
 800546a:	bf00      	nop
 800546c:	24006d80 	.word	0x24006d80
 8005470:	240071c0 	.word	0x240071c0
 8005474:	24006dc0 	.word	0x24006dc0
 8005478:	240075c0 	.word	0x240075c0
 800547c:	240079c0 	.word	0x240079c0
 8005480:	08029d60 	.word	0x08029d60

08005484 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr444_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
 8005484:	b480      	push	{r7}
 8005486:	b095      	sub	sp, #84	; 0x54
 8005488:	af00      	add	r7, sp, #0
 800548a:	60f8      	str	r0, [r7, #12]
 800548c:	60b9      	str	r1, [r7, #8]
 800548e:	607a      	str	r2, [r7, #4]
 8005490:	603b      	str	r3, [r7, #0]
  int32_t c_red, c_blue, c_green;

  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;

  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	4a54      	ldr	r2, [pc, #336]	; (80055e8 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x164>)
 8005496:	fba2 2303 	umull	r2, r3, r2, r3
 800549a:	09db      	lsrs	r3, r3, #7
 800549c:	633b      	str	r3, [r7, #48]	; 0x30
  currentMCU = BlockIndex;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	647b      	str	r3, [r7, #68]	; 0x44

  while(currentMCU < (numberMCU + BlockIndex))
 80054a2:	e092      	b.n	80055ca <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x146>
  {

    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 80054a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054a6:	00da      	lsls	r2, r3, #3
 80054a8:	4b50      	ldr	r3, [pc, #320]	; (80055ec <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x168>)
 80054aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80054b0:	00db      	lsls	r3, r3, #3
 80054b2:	62fb      	str	r3, [r7, #44]	; 0x2c

    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 80054b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054b6:	00db      	lsls	r3, r3, #3
 80054b8:	4a4c      	ldr	r2, [pc, #304]	; (80055ec <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x168>)
 80054ba:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80054bc:	fbb3 f1f2 	udiv	r1, r3, r2
 80054c0:	fb01 f202 	mul.w	r2, r1, r2
 80054c4:	1a9b      	subs	r3, r3, r2
 80054c6:	62bb      	str	r3, [r7, #40]	; 0x28

    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 80054c8:	4b48      	ldr	r3, [pc, #288]	; (80055ec <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x168>)
 80054ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054ce:	fb02 f103 	mul.w	r1, r2, r3
 80054d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054d4:	4613      	mov	r3, r2
 80054d6:	005b      	lsls	r3, r3, #1
 80054d8:	4413      	add	r3, r2
 80054da:	440b      	add	r3, r1
 80054dc:	643b      	str	r3, [r7, #64]	; 0x40

    currentMCU++;
 80054de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054e0:	3301      	adds	r3, #1
 80054e2:	647b      	str	r3, [r7, #68]	; 0x44

    pChrom = pInBuffer + 64; /* pChroma = pInBuffer + 4*64 */
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	3340      	adds	r3, #64	; 0x40
 80054e8:	63bb      	str	r3, [r7, #56]	; 0x38

    pLum = pInBuffer;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	637b      	str	r3, [r7, #52]	; 0x34

    for(i= 0; i <  8; i++)
 80054ee:	2300      	movs	r3, #0
 80054f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054f2:	e064      	b.n	80055be <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x13a>
    {
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 80054f4:	4b3d      	ldr	r3, [pc, #244]	; (80055ec <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x168>)
 80054f6:	691b      	ldr	r3, [r3, #16]
 80054f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80054fa:	429a      	cmp	r2, r3
 80054fc:	d25c      	bcs.n	80055b8 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x134>
      {
        pOutAddr = pOutBuffer+ refline;
 80054fe:	68ba      	ldr	r2, [r7, #8]
 8005500:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005502:	4413      	add	r3, r2
 8005504:	63fb      	str	r3, [r7, #60]	; 0x3c

          for(j=0; j < 8; j++)
 8005506:	2300      	movs	r3, #0
 8005508:	64bb      	str	r3, [r7, #72]	; 0x48
 800550a:	e04a      	b.n	80055a2 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x11e>
          {
            cbcomp = (int32_t)(*pChrom);
 800550c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800550e:	781b      	ldrb	r3, [r3, #0]
 8005510:	627b      	str	r3, [r7, #36]	; 0x24
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 8005512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005514:	009b      	lsls	r3, r3, #2
 8005516:	4a36      	ldr	r2, [pc, #216]	; (80055f0 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x16c>)
 8005518:	4413      	add	r3, r2
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	623b      	str	r3, [r7, #32]

            crcomp = (int32_t)(*(pChrom + 64));
 800551e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005520:	3340      	adds	r3, #64	; 0x40
 8005522:	781b      	ldrb	r3, [r3, #0]
 8005524:	61fb      	str	r3, [r7, #28]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
 8005526:	69fb      	ldr	r3, [r7, #28]
 8005528:	009b      	lsls	r3, r3, #2
 800552a:	4a32      	ldr	r2, [pc, #200]	; (80055f4 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x170>)
 800552c:	4413      	add	r3, r2
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	61bb      	str	r3, [r7, #24]

            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
 8005532:	69fb      	ldr	r3, [r7, #28]
 8005534:	009b      	lsls	r3, r3, #2
 8005536:	4a30      	ldr	r2, [pc, #192]	; (80055f8 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x174>)
 8005538:	4413      	add	r3, r2
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800553e:	009b      	lsls	r3, r3, #2
 8005540:	492e      	ldr	r1, [pc, #184]	; (80055fc <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x178>)
 8005542:	440b      	add	r3, r1
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4413      	add	r3, r2
 8005548:	141b      	asrs	r3, r3, #16
 800554a:	617b      	str	r3, [r7, #20]
              (CLAMP( ycomp + c_green) << JPEG_GREEN_OFFSET) | \
              (CLAMP(ycomp + c_blue) << JPEG_BLUE_OFFSET);

#elif (JPEG_RGB_FORMAT == JPEG_RGB888)

            ycomp = (int32_t)(*(pLum +j));
 800554c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800554e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005550:	4413      	add	r3, r2
 8005552:	781b      	ldrb	r3, [r3, #0]
 8005554:	613b      	str	r3, [r7, #16]

            pOutAddr[JPEG_RED_OFFSET/8] = CLAMP(ycomp + c_red);
 8005556:	693a      	ldr	r2, [r7, #16]
 8005558:	69bb      	ldr	r3, [r7, #24]
 800555a:	4413      	add	r3, r2
 800555c:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8005560:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005562:	3302      	adds	r3, #2
 8005564:	4926      	ldr	r1, [pc, #152]	; (8005600 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x17c>)
 8005566:	5c8a      	ldrb	r2, [r1, r2]
 8005568:	701a      	strb	r2, [r3, #0]
            pOutAddr[JPEG_GREEN_OFFSET/8] = CLAMP(ycomp + c_green);
 800556a:	693a      	ldr	r2, [r7, #16]
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	4413      	add	r3, r2
 8005570:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8005574:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005576:	3301      	adds	r3, #1
 8005578:	4921      	ldr	r1, [pc, #132]	; (8005600 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x17c>)
 800557a:	5c8a      	ldrb	r2, [r1, r2]
 800557c:	701a      	strb	r2, [r3, #0]
            pOutAddr[JPEG_BLUE_OFFSET/8] = CLAMP(ycomp + c_blue);
 800557e:	693a      	ldr	r2, [r7, #16]
 8005580:	6a3b      	ldr	r3, [r7, #32]
 8005582:	4413      	add	r3, r2
 8005584:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005588:	4a1d      	ldr	r2, [pc, #116]	; (8005600 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x17c>)
 800558a:	5cd2      	ldrb	r2, [r2, r3]
 800558c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800558e:	701a      	strb	r2, [r3, #0]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);

#endif /* JPEG_RGB_FORMAT */

            pOutAddr += JPEG_BYTES_PER_PIXEL;
 8005590:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005592:	3303      	adds	r3, #3
 8005594:	63fb      	str	r3, [r7, #60]	; 0x3c

            pChrom++;
 8005596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005598:	3301      	adds	r3, #1
 800559a:	63bb      	str	r3, [r7, #56]	; 0x38
          for(j=0; j < 8; j++)
 800559c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800559e:	3301      	adds	r3, #1
 80055a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80055a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055a4:	2b07      	cmp	r3, #7
 80055a6:	d9b1      	bls.n	800550c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x88>
          }
          pLum += 8;
 80055a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055aa:	3308      	adds	r3, #8
 80055ac:	637b      	str	r3, [r7, #52]	; 0x34

        refline += JPEG_ConvertorParams.ScaledWidth;
 80055ae:	4b0f      	ldr	r3, [pc, #60]	; (80055ec <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x168>)
 80055b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80055b4:	4413      	add	r3, r2
 80055b6:	643b      	str	r3, [r7, #64]	; 0x40
    for(i= 0; i <  8; i++)
 80055b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055ba:	3301      	adds	r3, #1
 80055bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055c0:	2b07      	cmp	r3, #7
 80055c2:	d997      	bls.n	80054f4 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x70>
      }
    }

    pInBuffer +=  YCBCR_444_BLOCK_SIZE;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	33c0      	adds	r3, #192	; 0xc0
 80055c8:	60fb      	str	r3, [r7, #12]
  while(currentMCU < (numberMCU + BlockIndex))
 80055ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	4413      	add	r3, r2
 80055d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80055d2:	429a      	cmp	r2, r3
 80055d4:	f4ff af66 	bcc.w	80054a4 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x20>
  }
  return numberMCU;
 80055d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3754      	adds	r7, #84	; 0x54
 80055de:	46bd      	mov	sp, r7
 80055e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e4:	4770      	bx	lr
 80055e6:	bf00      	nop
 80055e8:	aaaaaaab 	.word	0xaaaaaaab
 80055ec:	24006d80 	.word	0x24006d80
 80055f0:	240071c0 	.word	0x240071c0
 80055f4:	24006dc0 	.word	0x24006dc0
 80055f8:	240075c0 	.word	0x240075c0
 80055fc:	240079c0 	.word	0x240079c0
 8005600:	08029d60 	.word	0x08029d60

08005604 <JPEG_MCU_Gray_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_Gray_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
 8005604:	b480      	push	{r7}
 8005606:	b08f      	sub	sp, #60	; 0x3c
 8005608:	af00      	add	r7, sp, #0
 800560a:	60f8      	str	r0, [r7, #12]
 800560c:	60b9      	str	r1, [r7, #8]
 800560e:	607a      	str	r2, [r7, #4]
 8005610:	603b      	str	r3, [r7, #0]
  uint32_t refline;

  uint32_t i,j, ySample;
  uint8_t *pOutAddr,  *pLum;

  numberMCU = DataCount / GRAY_444_BLOCK_SIZE;
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	099b      	lsrs	r3, r3, #6
 8005616:	61fb      	str	r3, [r7, #28]
  currentMCU = BlockIndex;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	637b      	str	r3, [r7, #52]	; 0x34

  while(currentMCU < (numberMCU + BlockIndex))
 800561c:	e05b      	b.n	80056d6 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xd2>
  {
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 800561e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005620:	00da      	lsls	r2, r3, #3
 8005622:	4b33      	ldr	r3, [pc, #204]	; (80056f0 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xec>)
 8005624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005626:	fbb2 f3f3 	udiv	r3, r2, r3
 800562a:	00db      	lsls	r3, r3, #3
 800562c:	61bb      	str	r3, [r7, #24]

    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 800562e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005630:	00db      	lsls	r3, r3, #3
 8005632:	4a2f      	ldr	r2, [pc, #188]	; (80056f0 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xec>)
 8005634:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005636:	fbb3 f1f2 	udiv	r1, r3, r2
 800563a:	fb01 f202 	mul.w	r2, r1, r2
 800563e:	1a9b      	subs	r3, r3, r2
 8005640:	617b      	str	r3, [r7, #20]

    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8005642:	4b2b      	ldr	r3, [pc, #172]	; (80056f0 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xec>)
 8005644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005646:	69ba      	ldr	r2, [r7, #24]
 8005648:	fb02 f103 	mul.w	r1, r2, r3
 800564c:	697a      	ldr	r2, [r7, #20]
 800564e:	4613      	mov	r3, r2
 8005650:	005b      	lsls	r3, r3, #1
 8005652:	4413      	add	r3, r2
 8005654:	440b      	add	r3, r1
 8005656:	633b      	str	r3, [r7, #48]	; 0x30

    currentMCU++;
 8005658:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800565a:	3301      	adds	r3, #1
 800565c:	637b      	str	r3, [r7, #52]	; 0x34

    pLum = pInBuffer;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	623b      	str	r3, [r7, #32]

    for(i= 0; i <  8; i++)
 8005662:	2300      	movs	r3, #0
 8005664:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005666:	e030      	b.n	80056ca <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xc6>
    {
      pOutAddr = pOutBuffer + refline;
 8005668:	68ba      	ldr	r2, [r7, #8]
 800566a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800566c:	4413      	add	r3, r2
 800566e:	627b      	str	r3, [r7, #36]	; 0x24
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8005670:	4b1f      	ldr	r3, [pc, #124]	; (80056f0 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xec>)
 8005672:	691b      	ldr	r3, [r3, #16]
 8005674:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005676:	429a      	cmp	r2, r3
 8005678:	d224      	bcs.n	80056c4 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xc0>
      {
        for(j=0; j < 8; j++)
 800567a:	2300      	movs	r3, #0
 800567c:	62bb      	str	r3, [r7, #40]	; 0x28
 800567e:	e019      	b.n	80056b4 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xb0>
        {
          ySample =   (uint32_t)(*pLum);
 8005680:	6a3b      	ldr	r3, [r7, #32]
 8005682:	781b      	ldrb	r3, [r3, #0]
 8005684:	613b      	str	r3, [r7, #16]

          *(__IO uint32_t *)pOutAddr = ySample |  (ySample << 8) | (ySample << 16);

#elif (JPEG_RGB_FORMAT == JPEG_RGB888)

          pOutAddr[0] =  ySample;
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	b2da      	uxtb	r2, r3
 800568a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800568c:	701a      	strb	r2, [r3, #0]
          pOutAddr[1] =  ySample;
 800568e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005690:	3301      	adds	r3, #1
 8005692:	693a      	ldr	r2, [r7, #16]
 8005694:	b2d2      	uxtb	r2, r2
 8005696:	701a      	strb	r2, [r3, #0]
          pOutAddr[2] =  ySample;
 8005698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800569a:	3302      	adds	r3, #2
 800569c:	693a      	ldr	r2, [r7, #16]
 800569e:	b2d2      	uxtb	r2, r2
 80056a0:	701a      	strb	r2, [r3, #0]

          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);

#endif /* JPEG_RGB_FORMAT */

          pOutAddr += JPEG_BYTES_PER_PIXEL;
 80056a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a4:	3303      	adds	r3, #3
 80056a6:	627b      	str	r3, [r7, #36]	; 0x24
          pLum++;
 80056a8:	6a3b      	ldr	r3, [r7, #32]
 80056aa:	3301      	adds	r3, #1
 80056ac:	623b      	str	r3, [r7, #32]
        for(j=0; j < 8; j++)
 80056ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056b0:	3301      	adds	r3, #1
 80056b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80056b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056b6:	2b07      	cmp	r3, #7
 80056b8:	d9e2      	bls.n	8005680 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x7c>
        }

        refline += JPEG_ConvertorParams.ScaledWidth;
 80056ba:	4b0d      	ldr	r3, [pc, #52]	; (80056f0 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xec>)
 80056bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056c0:	4413      	add	r3, r2
 80056c2:	633b      	str	r3, [r7, #48]	; 0x30
    for(i= 0; i <  8; i++)
 80056c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056c6:	3301      	adds	r3, #1
 80056c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056cc:	2b07      	cmp	r3, #7
 80056ce:	d9cb      	bls.n	8005668 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x64>
      }
    }

    pInBuffer +=  GRAY_444_BLOCK_SIZE;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	3340      	adds	r3, #64	; 0x40
 80056d4:	60fb      	str	r3, [r7, #12]
  while(currentMCU < (numberMCU + BlockIndex))
 80056d6:	69fa      	ldr	r2, [r7, #28]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	4413      	add	r3, r2
 80056dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056de:	429a      	cmp	r2, r3
 80056e0:	d39d      	bcc.n	800561e <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x1a>
  }
  return numberMCU;
 80056e2:	69fb      	ldr	r3, [r7, #28]
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	373c      	adds	r7, #60	; 0x3c
 80056e8:	46bd      	mov	sp, r7
 80056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ee:	4770      	bx	lr
 80056f0:	24006d80 	.word	0x24006d80

080056f4 <JPEG_MCU_YCCK_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCCK_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b093      	sub	sp, #76	; 0x4c
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	60f8      	str	r0, [r7, #12]
 80056fc:	60b9      	str	r1, [r7, #8]
 80056fe:	607a      	str	r2, [r7, #4]
 8005700:	603b      	str	r3, [r7, #0]

  int32_t c_red, c_blue, c_green;

  uint8_t *pOutAddr, *pChrom;

  numberMCU = DataCount / CMYK_444_BLOCK_SIZE;
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	0a1b      	lsrs	r3, r3, #8
 8005706:	62fb      	str	r3, [r7, #44]	; 0x2c
  currentMCU = BlockIndex;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	63fb      	str	r3, [r7, #60]	; 0x3c

  while(currentMCU < (numberMCU + BlockIndex))
 800570c:	e089      	b.n	8005822 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x12e>
  {

    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 800570e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005710:	00da      	lsls	r2, r3, #3
 8005712:	4b4b      	ldr	r3, [pc, #300]	; (8005840 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x14c>)
 8005714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005716:	fbb2 f3f3 	udiv	r3, r2, r3
 800571a:	00db      	lsls	r3, r3, #3
 800571c:	62bb      	str	r3, [r7, #40]	; 0x28

    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 800571e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005720:	00db      	lsls	r3, r3, #3
 8005722:	4a47      	ldr	r2, [pc, #284]	; (8005840 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x14c>)
 8005724:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005726:	fbb3 f1f2 	udiv	r1, r3, r2
 800572a:	fb01 f202 	mul.w	r2, r1, r2
 800572e:	1a9b      	subs	r3, r3, r2
 8005730:	627b      	str	r3, [r7, #36]	; 0x24

    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8005732:	4b43      	ldr	r3, [pc, #268]	; (8005840 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x14c>)
 8005734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005736:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005738:	fb02 f103 	mul.w	r1, r2, r3
 800573c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800573e:	4613      	mov	r3, r2
 8005740:	005b      	lsls	r3, r3, #1
 8005742:	4413      	add	r3, r2
 8005744:	440b      	add	r3, r1
 8005746:	63bb      	str	r3, [r7, #56]	; 0x38

    currentMCU++;
 8005748:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800574a:	3301      	adds	r3, #1
 800574c:	63fb      	str	r3, [r7, #60]	; 0x3c

    pChrom = pInBuffer;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	633b      	str	r3, [r7, #48]	; 0x30

    for(i= 0; i <  8; i++)
 8005752:	2300      	movs	r3, #0
 8005754:	647b      	str	r3, [r7, #68]	; 0x44
 8005756:	e05d      	b.n	8005814 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x120>
    {
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8005758:	4b39      	ldr	r3, [pc, #228]	; (8005840 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x14c>)
 800575a:	691b      	ldr	r3, [r3, #16]
 800575c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800575e:	429a      	cmp	r2, r3
 8005760:	d255      	bcs.n	800580e <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x11a>
      {
        pOutAddr = pOutBuffer+ refline;
 8005762:	68ba      	ldr	r2, [r7, #8]
 8005764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005766:	4413      	add	r3, r2
 8005768:	637b      	str	r3, [r7, #52]	; 0x34

          for(j=0; j < 8; j++)
 800576a:	2300      	movs	r3, #0
 800576c:	643b      	str	r3, [r7, #64]	; 0x40
 800576e:	e046      	b.n	80057fe <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x10a>
          {
            color_k = (int32_t)(*(pChrom + 192));
 8005770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005772:	33c0      	adds	r3, #192	; 0xc0
 8005774:	781b      	ldrb	r3, [r3, #0]
 8005776:	623b      	str	r3, [r7, #32]
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
 8005778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800577a:	781b      	ldrb	r3, [r3, #0]
 800577c:	461a      	mov	r2, r3
 800577e:	6a3b      	ldr	r3, [r7, #32]
 8005780:	fb02 f303 	mul.w	r3, r2, r3
 8005784:	4a2f      	ldr	r2, [pc, #188]	; (8005844 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x150>)
 8005786:	fb82 1203 	smull	r1, r2, r2, r3
 800578a:	441a      	add	r2, r3
 800578c:	11d2      	asrs	r2, r2, #7
 800578e:	17db      	asrs	r3, r3, #31
 8005790:	1ad3      	subs	r3, r2, r3
 8005792:	61fb      	str	r3, [r7, #28]

            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
 8005794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005796:	3340      	adds	r3, #64	; 0x40
 8005798:	781b      	ldrb	r3, [r3, #0]
 800579a:	461a      	mov	r2, r3
 800579c:	6a3b      	ldr	r3, [r7, #32]
 800579e:	fb02 f303 	mul.w	r3, r2, r3
 80057a2:	4a28      	ldr	r2, [pc, #160]	; (8005844 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x150>)
 80057a4:	fb82 1203 	smull	r1, r2, r2, r3
 80057a8:	441a      	add	r2, r3
 80057aa:	11d2      	asrs	r2, r2, #7
 80057ac:	17db      	asrs	r3, r3, #31
 80057ae:	1ad3      	subs	r3, r2, r3
 80057b0:	61bb      	str	r3, [r7, #24]

            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
 80057b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057b4:	3380      	adds	r3, #128	; 0x80
 80057b6:	781b      	ldrb	r3, [r3, #0]
 80057b8:	461a      	mov	r2, r3
 80057ba:	6a3b      	ldr	r3, [r7, #32]
 80057bc:	fb02 f303 	mul.w	r3, r2, r3
 80057c0:	4a20      	ldr	r2, [pc, #128]	; (8005844 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x150>)
 80057c2:	fb82 1203 	smull	r1, r2, r2, r3
 80057c6:	441a      	add	r2, r3
 80057c8:	11d2      	asrs	r2, r2, #7
 80057ca:	17db      	asrs	r3, r3, #31
 80057cc:	1ad3      	subs	r3, r2, r3
 80057ce:	617b      	str	r3, [r7, #20]
            (c_green << JPEG_GREEN_OFFSET) | \
            (c_blue << JPEG_BLUE_OFFSET);

#elif (JPEG_RGB_FORMAT == JPEG_RGB888)

          pOutAddr[JPEG_RED_OFFSET/8]   =  c_red;
 80057d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057d2:	3302      	adds	r3, #2
 80057d4:	69fa      	ldr	r2, [r7, #28]
 80057d6:	b2d2      	uxtb	r2, r2
 80057d8:	701a      	strb	r2, [r3, #0]
          pOutAddr[JPEG_GREEN_OFFSET/8] =  c_green;
 80057da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057dc:	3301      	adds	r3, #1
 80057de:	69ba      	ldr	r2, [r7, #24]
 80057e0:	b2d2      	uxtb	r2, r2
 80057e2:	701a      	strb	r2, [r3, #0]
          pOutAddr[JPEG_BLUE_OFFSET/8]  =  c_blue;
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	b2da      	uxtb	r2, r3
 80057e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057ea:	701a      	strb	r2, [r3, #0]
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
            ((c_blue >> 3) << JPEG_BLUE_OFFSET);

#endif /* JPEG_RGB_FORMAT */

            pOutAddr += JPEG_BYTES_PER_PIXEL;
 80057ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057ee:	3303      	adds	r3, #3
 80057f0:	637b      	str	r3, [r7, #52]	; 0x34

            pChrom++;
 80057f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057f4:	3301      	adds	r3, #1
 80057f6:	633b      	str	r3, [r7, #48]	; 0x30
          for(j=0; j < 8; j++)
 80057f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057fa:	3301      	adds	r3, #1
 80057fc:	643b      	str	r3, [r7, #64]	; 0x40
 80057fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005800:	2b07      	cmp	r3, #7
 8005802:	d9b5      	bls.n	8005770 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x7c>
          }

        refline += JPEG_ConvertorParams.ScaledWidth;
 8005804:	4b0e      	ldr	r3, [pc, #56]	; (8005840 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x14c>)
 8005806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005808:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800580a:	4413      	add	r3, r2
 800580c:	63bb      	str	r3, [r7, #56]	; 0x38
    for(i= 0; i <  8; i++)
 800580e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005810:	3301      	adds	r3, #1
 8005812:	647b      	str	r3, [r7, #68]	; 0x44
 8005814:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005816:	2b07      	cmp	r3, #7
 8005818:	d99e      	bls.n	8005758 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x64>
      }
    }

    pInBuffer +=  CMYK_444_BLOCK_SIZE;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005820:	60fb      	str	r3, [r7, #12]
  while(currentMCU < (numberMCU + BlockIndex))
 8005822:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	4413      	add	r3, r2
 8005828:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800582a:	429a      	cmp	r2, r3
 800582c:	f4ff af6f 	bcc.w	800570e <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x1a>
  }
  return numberMCU;
 8005830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005832:	4618      	mov	r0, r3
 8005834:	374c      	adds	r7, #76	; 0x4c
 8005836:	46bd      	mov	sp, r7
 8005838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583c:	4770      	bx	lr
 800583e:	bf00      	nop
 8005840:	24006d80 	.word	0x24006d80
 8005844:	80808081 	.word	0x80808081

08005848 <TGFX_JPEG_GetDecodeColorConvertFunc>:
  *                      depending of the jpeg image color space and chroma sampling info.
  * @param ImageNbMCUs : pointer to uint32_t, used to retrive the total number of MCU blocks in the jpeg image.
  * @retval HAL status : HAL_OK or HAL_ERROR.
  */
HAL_StatusTypeDef TGFX_JPEG_GetDecodeColorConvertFunc(JPEG_ConfTypeDef *pJpegInfo, JPEG_YCbCrToRGB_Convert_Function *pFunction, uint32_t *ImageNbMCUs)
{
 8005848:	b480      	push	{r7}
 800584a:	b087      	sub	sp, #28
 800584c:	af00      	add	r7, sp, #0
 800584e:	60f8      	str	r0, [r7, #12]
 8005850:	60b9      	str	r1, [r7, #8]
 8005852:	607a      	str	r2, [r7, #4]
  uint32_t hMCU, vMCU;

  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a7c      	ldr	r2, [pc, #496]	; (8005a4c <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 800585a:	6013      	str	r3, [r2, #0]
  JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	68db      	ldr	r3, [r3, #12]
 8005860:	4a7a      	ldr	r2, [pc, #488]	; (8005a4c <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8005862:	6093      	str	r3, [r2, #8]
  JPEG_ConvertorParams.ImageHeight = pJpegInfo->ImageHeight;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	4a78      	ldr	r2, [pc, #480]	; (8005a4c <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 800586a:	60d3      	str	r3, [r2, #12]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	68db      	ldr	r3, [r3, #12]
 8005870:	68fa      	ldr	r2, [r7, #12]
 8005872:	6892      	ldr	r2, [r2, #8]
 8005874:	fb03 f202 	mul.w	r2, r3, r2
 8005878:	4613      	mov	r3, r2
 800587a:	005b      	lsls	r3, r3, #1
 800587c:	4413      	add	r3, r2
 800587e:	4a73      	ldr	r2, [pc, #460]	; (8005a4c <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8005880:	6113      	str	r3, [r2, #16]

  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	4a71      	ldr	r2, [pc, #452]	; (8005a4c <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8005888:	6053      	str	r3, [r2, #4]
  if(JPEG_ConvertorParams.ColorSpace == JPEG_YCBCR_COLORSPACE)
 800588a:	4b70      	ldr	r3, [pc, #448]	; (8005a4c <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	2b10      	cmp	r3, #16
 8005890:	d155      	bne.n	800593e <TGFX_JPEG_GetDecodeColorConvertFunc+0xf6>
  {
    if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_420_SUBSAMPLING)
 8005892:	4b6e      	ldr	r3, [pc, #440]	; (8005a4c <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	2b01      	cmp	r3, #1
 8005898:	d119      	bne.n	80058ce <TGFX_JPEG_GetDecodeColorConvertFunc+0x86>
    {
      *pFunction = TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks;
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	4a6c      	ldr	r2, [pc, #432]	; (8005a50 <TGFX_JPEG_GetDecodeColorConvertFunc+0x208>)
 800589e:	601a      	str	r2, [r3, #0]

      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
 80058a0:	4b6a      	ldr	r3, [pc, #424]	; (8005a4c <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	f003 030f 	and.w	r3, r3, #15
 80058a8:	4a68      	ldr	r2, [pc, #416]	; (8005a4c <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80058aa:	6153      	str	r3, [r2, #20]

      if(JPEG_ConvertorParams.LineOffset != 0)
 80058ac:	4b67      	ldr	r3, [pc, #412]	; (8005a4c <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80058ae:	695b      	ldr	r3, [r3, #20]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d005      	beq.n	80058c0 <TGFX_JPEG_GetDecodeColorConvertFunc+0x78>
      {
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;
 80058b4:	4b65      	ldr	r3, [pc, #404]	; (8005a4c <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80058b6:	695b      	ldr	r3, [r3, #20]
 80058b8:	f1c3 0310 	rsb	r3, r3, #16
 80058bc:	4a63      	ldr	r2, [pc, #396]	; (8005a4c <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80058be:	6153      	str	r3, [r2, #20]
      }
      JPEG_ConvertorParams.H_factor = 16;
 80058c0:	4b62      	ldr	r3, [pc, #392]	; (8005a4c <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80058c2:	2210      	movs	r2, #16
 80058c4:	61da      	str	r2, [r3, #28]
      JPEG_ConvertorParams.V_factor  = 16;
 80058c6:	4b61      	ldr	r3, [pc, #388]	; (8005a4c <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80058c8:	2210      	movs	r2, #16
 80058ca:	621a      	str	r2, [r3, #32]
 80058cc:	e075      	b.n	80059ba <TGFX_JPEG_GetDecodeColorConvertFunc+0x172>
    }
    else if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_422_SUBSAMPLING)
 80058ce:	4b5f      	ldr	r3, [pc, #380]	; (8005a4c <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	2b02      	cmp	r3, #2
 80058d4:	d119      	bne.n	800590a <TGFX_JPEG_GetDecodeColorConvertFunc+0xc2>
    {
      *pFunction =  JPEG_MCU_YCbCr422_ARGB_ConvertBlocks;
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	4a5e      	ldr	r2, [pc, #376]	; (8005a54 <TGFX_JPEG_GetDecodeColorConvertFunc+0x20c>)
 80058da:	601a      	str	r2, [r3, #0]

      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
 80058dc:	4b5b      	ldr	r3, [pc, #364]	; (8005a4c <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	f003 030f 	and.w	r3, r3, #15
 80058e4:	4a59      	ldr	r2, [pc, #356]	; (8005a4c <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80058e6:	6153      	str	r3, [r2, #20]

      if(JPEG_ConvertorParams.LineOffset != 0)
 80058e8:	4b58      	ldr	r3, [pc, #352]	; (8005a4c <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80058ea:	695b      	ldr	r3, [r3, #20]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d005      	beq.n	80058fc <TGFX_JPEG_GetDecodeColorConvertFunc+0xb4>
      {
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;
 80058f0:	4b56      	ldr	r3, [pc, #344]	; (8005a4c <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80058f2:	695b      	ldr	r3, [r3, #20]
 80058f4:	f1c3 0310 	rsb	r3, r3, #16
 80058f8:	4a54      	ldr	r2, [pc, #336]	; (8005a4c <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80058fa:	6153      	str	r3, [r2, #20]
      }
      JPEG_ConvertorParams.H_factor = 16;
 80058fc:	4b53      	ldr	r3, [pc, #332]	; (8005a4c <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80058fe:	2210      	movs	r2, #16
 8005900:	61da      	str	r2, [r3, #28]
      JPEG_ConvertorParams.V_factor  = 8;
 8005902:	4b52      	ldr	r3, [pc, #328]	; (8005a4c <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8005904:	2208      	movs	r2, #8
 8005906:	621a      	str	r2, [r3, #32]
 8005908:	e057      	b.n	80059ba <TGFX_JPEG_GetDecodeColorConvertFunc+0x172>
    }
    else /*4:4:4*/
    {
      *pFunction =  JPEG_MCU_YCbCr444_ARGB_ConvertBlocks;
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	4a52      	ldr	r2, [pc, #328]	; (8005a58 <TGFX_JPEG_GetDecodeColorConvertFunc+0x210>)
 800590e:	601a      	str	r2, [r3, #0]

      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
 8005910:	4b4e      	ldr	r3, [pc, #312]	; (8005a4c <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8005912:	689b      	ldr	r3, [r3, #8]
 8005914:	f003 0307 	and.w	r3, r3, #7
 8005918:	4a4c      	ldr	r2, [pc, #304]	; (8005a4c <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 800591a:	6153      	str	r3, [r2, #20]

      if(JPEG_ConvertorParams.LineOffset != 0)
 800591c:	4b4b      	ldr	r3, [pc, #300]	; (8005a4c <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 800591e:	695b      	ldr	r3, [r3, #20]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d005      	beq.n	8005930 <TGFX_JPEG_GetDecodeColorConvertFunc+0xe8>
      {
        JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;
 8005924:	4b49      	ldr	r3, [pc, #292]	; (8005a4c <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8005926:	695b      	ldr	r3, [r3, #20]
 8005928:	f1c3 0308 	rsb	r3, r3, #8
 800592c:	4a47      	ldr	r2, [pc, #284]	; (8005a4c <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 800592e:	6153      	str	r3, [r2, #20]
      }
      JPEG_ConvertorParams.H_factor = 8;
 8005930:	4b46      	ldr	r3, [pc, #280]	; (8005a4c <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8005932:	2208      	movs	r2, #8
 8005934:	61da      	str	r2, [r3, #28]
      JPEG_ConvertorParams.V_factor  = 8;
 8005936:	4b45      	ldr	r3, [pc, #276]	; (8005a4c <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8005938:	2208      	movs	r2, #8
 800593a:	621a      	str	r2, [r3, #32]
 800593c:	e03d      	b.n	80059ba <TGFX_JPEG_GetDecodeColorConvertFunc+0x172>
    }
  }
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_GRAYSCALE_COLORSPACE)
 800593e:	4b43      	ldr	r3, [pc, #268]	; (8005a4c <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d119      	bne.n	800597a <TGFX_JPEG_GetDecodeColorConvertFunc+0x132>
  {
    *pFunction =  JPEG_MCU_Gray_ARGB_ConvertBlocks;
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	4a44      	ldr	r2, [pc, #272]	; (8005a5c <TGFX_JPEG_GetDecodeColorConvertFunc+0x214>)
 800594a:	601a      	str	r2, [r3, #0]

    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
 800594c:	4b3f      	ldr	r3, [pc, #252]	; (8005a4c <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 800594e:	689b      	ldr	r3, [r3, #8]
 8005950:	f003 0307 	and.w	r3, r3, #7
 8005954:	4a3d      	ldr	r2, [pc, #244]	; (8005a4c <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8005956:	6153      	str	r3, [r2, #20]

    if(JPEG_ConvertorParams.LineOffset != 0)
 8005958:	4b3c      	ldr	r3, [pc, #240]	; (8005a4c <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 800595a:	695b      	ldr	r3, [r3, #20]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d005      	beq.n	800596c <TGFX_JPEG_GetDecodeColorConvertFunc+0x124>
    {
      JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;
 8005960:	4b3a      	ldr	r3, [pc, #232]	; (8005a4c <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8005962:	695b      	ldr	r3, [r3, #20]
 8005964:	f1c3 0308 	rsb	r3, r3, #8
 8005968:	4a38      	ldr	r2, [pc, #224]	; (8005a4c <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 800596a:	6153      	str	r3, [r2, #20]
    }
    JPEG_ConvertorParams.H_factor = 8;
 800596c:	4b37      	ldr	r3, [pc, #220]	; (8005a4c <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 800596e:	2208      	movs	r2, #8
 8005970:	61da      	str	r2, [r3, #28]
    JPEG_ConvertorParams.V_factor  = 8;
 8005972:	4b36      	ldr	r3, [pc, #216]	; (8005a4c <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8005974:	2208      	movs	r2, #8
 8005976:	621a      	str	r2, [r3, #32]
 8005978:	e01f      	b.n	80059ba <TGFX_JPEG_GetDecodeColorConvertFunc+0x172>
  }
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_CMYK_COLORSPACE)
 800597a:	4b34      	ldr	r3, [pc, #208]	; (8005a4c <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	2b30      	cmp	r3, #48	; 0x30
 8005980:	d119      	bne.n	80059b6 <TGFX_JPEG_GetDecodeColorConvertFunc+0x16e>
  {
    *pFunction =  JPEG_MCU_YCCK_ARGB_ConvertBlocks;
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	4a36      	ldr	r2, [pc, #216]	; (8005a60 <TGFX_JPEG_GetDecodeColorConvertFunc+0x218>)
 8005986:	601a      	str	r2, [r3, #0]

    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
 8005988:	4b30      	ldr	r3, [pc, #192]	; (8005a4c <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 800598a:	689b      	ldr	r3, [r3, #8]
 800598c:	f003 0307 	and.w	r3, r3, #7
 8005990:	4a2e      	ldr	r2, [pc, #184]	; (8005a4c <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8005992:	6153      	str	r3, [r2, #20]

    if(JPEG_ConvertorParams.LineOffset != 0)
 8005994:	4b2d      	ldr	r3, [pc, #180]	; (8005a4c <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8005996:	695b      	ldr	r3, [r3, #20]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d005      	beq.n	80059a8 <TGFX_JPEG_GetDecodeColorConvertFunc+0x160>
    {
      JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;
 800599c:	4b2b      	ldr	r3, [pc, #172]	; (8005a4c <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 800599e:	695b      	ldr	r3, [r3, #20]
 80059a0:	f1c3 0308 	rsb	r3, r3, #8
 80059a4:	4a29      	ldr	r2, [pc, #164]	; (8005a4c <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80059a6:	6153      	str	r3, [r2, #20]
    }
    JPEG_ConvertorParams.H_factor = 8;
 80059a8:	4b28      	ldr	r3, [pc, #160]	; (8005a4c <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80059aa:	2208      	movs	r2, #8
 80059ac:	61da      	str	r2, [r3, #28]
    JPEG_ConvertorParams.V_factor  = 8;
 80059ae:	4b27      	ldr	r3, [pc, #156]	; (8005a4c <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80059b0:	2208      	movs	r2, #8
 80059b2:	621a      	str	r2, [r3, #32]
 80059b4:	e001      	b.n	80059ba <TGFX_JPEG_GetDecodeColorConvertFunc+0x172>
  }
  else
  {
    return HAL_ERROR; /* Color space Not supported*/
 80059b6:	2301      	movs	r3, #1
 80059b8:	e042      	b.n	8005a40 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1f8>
  }

  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
 80059ba:	4b24      	ldr	r3, [pc, #144]	; (8005a4c <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80059bc:	689a      	ldr	r2, [r3, #8]
 80059be:	4b23      	ldr	r3, [pc, #140]	; (8005a4c <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80059c0:	695b      	ldr	r3, [r3, #20]
 80059c2:	4413      	add	r3, r2
 80059c4:	4a21      	ldr	r2, [pc, #132]	; (8005a4c <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80059c6:	6253      	str	r3, [r2, #36]	; 0x24
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
 80059c8:	4b20      	ldr	r3, [pc, #128]	; (8005a4c <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80059ca:	689a      	ldr	r2, [r3, #8]
 80059cc:	4613      	mov	r3, r2
 80059ce:	005b      	lsls	r3, r3, #1
 80059d0:	4413      	add	r3, r2
 80059d2:	4a1e      	ldr	r2, [pc, #120]	; (8005a4c <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80059d4:	6293      	str	r3, [r2, #40]	; 0x28

  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
 80059d6:	4b1d      	ldr	r3, [pc, #116]	; (8005a4c <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80059d8:	689a      	ldr	r2, [r3, #8]
 80059da:	4b1c      	ldr	r3, [pc, #112]	; (8005a4c <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80059dc:	69db      	ldr	r3, [r3, #28]
 80059de:	fbb2 f3f3 	udiv	r3, r2, r3
 80059e2:	617b      	str	r3, [r7, #20]
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
 80059e4:	4b19      	ldr	r3, [pc, #100]	; (8005a4c <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80059e6:	689b      	ldr	r3, [r3, #8]
 80059e8:	4a18      	ldr	r2, [pc, #96]	; (8005a4c <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80059ea:	69d2      	ldr	r2, [r2, #28]
 80059ec:	fbb3 f1f2 	udiv	r1, r3, r2
 80059f0:	fb01 f202 	mul.w	r2, r1, r2
 80059f4:	1a9b      	subs	r3, r3, r2
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d002      	beq.n	8005a00 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1b8>
  {
    hMCU++; /*+1 for horizenatl incomplete MCU */
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	3301      	adds	r3, #1
 80059fe:	617b      	str	r3, [r7, #20]
  }

  vMCU = (JPEG_ConvertorParams.ImageHeight / JPEG_ConvertorParams.V_factor);
 8005a00:	4b12      	ldr	r3, [pc, #72]	; (8005a4c <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8005a02:	68da      	ldr	r2, [r3, #12]
 8005a04:	4b11      	ldr	r3, [pc, #68]	; (8005a4c <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8005a06:	6a1b      	ldr	r3, [r3, #32]
 8005a08:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a0c:	613b      	str	r3, [r7, #16]
  if((JPEG_ConvertorParams.ImageHeight % JPEG_ConvertorParams.V_factor) != 0)
 8005a0e:	4b0f      	ldr	r3, [pc, #60]	; (8005a4c <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8005a10:	68db      	ldr	r3, [r3, #12]
 8005a12:	4a0e      	ldr	r2, [pc, #56]	; (8005a4c <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8005a14:	6a12      	ldr	r2, [r2, #32]
 8005a16:	fbb3 f1f2 	udiv	r1, r3, r2
 8005a1a:	fb01 f202 	mul.w	r2, r1, r2
 8005a1e:	1a9b      	subs	r3, r3, r2
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d002      	beq.n	8005a2a <TGFX_JPEG_GetDecodeColorConvertFunc+0x1e2>
  {
    vMCU++; /*+1 for vertical incomplete MCU */
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	3301      	adds	r3, #1
 8005a28:	613b      	str	r3, [r7, #16]
  }
  JPEG_ConvertorParams.MCU_Total_Nb = (hMCU * vMCU);
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	693a      	ldr	r2, [r7, #16]
 8005a2e:	fb02 f303 	mul.w	r3, r2, r3
 8005a32:	4a06      	ldr	r2, [pc, #24]	; (8005a4c <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8005a34:	62d3      	str	r3, [r2, #44]	; 0x2c
  *ImageNbMCUs = JPEG_ConvertorParams.MCU_Total_Nb;
 8005a36:	4b05      	ldr	r3, [pc, #20]	; (8005a4c <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8005a38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005a3e:	2300      	movs	r3, #0
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	371c      	adds	r7, #28
 8005a44:	46bd      	mov	sp, r7
 8005a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4a:	4770      	bx	lr
 8005a4c:	24006d80 	.word	0x24006d80
 8005a50:	08005001 	.word	0x08005001
 8005a54:	080052a9 	.word	0x080052a9
 8005a58:	08005485 	.word	0x08005485
 8005a5c:	08005605 	.word	0x08005605
 8005a60:	080056f5 	.word	0x080056f5

08005a64 <TGFX_JPEG_InitPostProcColorTables>:
  * @brief  Initializes the YCbCr -> RGB colors conversion Look Up Tables
  * @param  None
  * @retval None
  */
void TGFX_JPEG_InitPostProcColorTables(void)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b083      	sub	sp, #12
 8005a68:	af00      	add	r7, sp, #0
  int32_t index, i;

  for (i = 0; i <= 255; i++)
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	607b      	str	r3, [r7, #4]
 8005a6e:	e02e      	b.n	8005ace <TGFX_JPEG_InitPostProcColorTables+0x6a>
  {
    index = (i * 2) - 256;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	3b80      	subs	r3, #128	; 0x80
 8005a74:	005b      	lsls	r3, r3, #1
 8005a76:	603b      	str	r3, [r7, #0]
    CR_RED_LUT[i] = ( (((int32_t) ((1.40200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	f24b 3274 	movw	r2, #45940	; 0xb374
 8005a7e:	fb02 f303 	mul.w	r3, r2, r3
 8005a82:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8005a86:	141a      	asrs	r2, r3, #16
 8005a88:	4916      	ldr	r1, [pc, #88]	; (8005ae4 <TGFX_JPEG_InitPostProcColorTables+0x80>)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    CB_BLUE_LUT[i] = ( (((int32_t) ((1.77200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	f24e 22d0 	movw	r2, #58064	; 0xe2d0
 8005a96:	fb02 f303 	mul.w	r3, r2, r3
 8005a9a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8005a9e:	141a      	asrs	r2, r3, #16
 8005aa0:	4911      	ldr	r1, [pc, #68]	; (8005ae8 <TGFX_JPEG_InitPostProcColorTables+0x84>)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    CR_GREEN_LUT[i] = (-((int32_t) ((0.71414 / 2) * (1L << 16)))) * index;
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	4a10      	ldr	r2, [pc, #64]	; (8005aec <TGFX_JPEG_InitPostProcColorTables+0x88>)
 8005aac:	fb03 f202 	mul.w	r2, r3, r2
 8005ab0:	490f      	ldr	r1, [pc, #60]	; (8005af0 <TGFX_JPEG_InitPostProcColorTables+0x8c>)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    CB_GREEN_LUT[i] = (-((int32_t) ((0.34414 / 2) * (1L << 16)))) * index;
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	4a0e      	ldr	r2, [pc, #56]	; (8005af4 <TGFX_JPEG_InitPostProcColorTables+0x90>)
 8005abc:	fb03 f202 	mul.w	r2, r3, r2
 8005ac0:	490d      	ldr	r1, [pc, #52]	; (8005af8 <TGFX_JPEG_InitPostProcColorTables+0x94>)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (i = 0; i <= 255; i++)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	3301      	adds	r3, #1
 8005acc:	607b      	str	r3, [r7, #4]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2bff      	cmp	r3, #255	; 0xff
 8005ad2:	ddcd      	ble.n	8005a70 <TGFX_JPEG_InitPostProcColorTables+0xc>
  }
}
 8005ad4:	bf00      	nop
 8005ad6:	bf00      	nop
 8005ad8:	370c      	adds	r7, #12
 8005ada:	46bd      	mov	sp, r7
 8005adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae0:	4770      	bx	lr
 8005ae2:	bf00      	nop
 8005ae4:	24006dc0 	.word	0x24006dc0
 8005ae8:	240071c0 	.word	0x240071c0
 8005aec:	ffffa498 	.word	0xffffa498
 8005af0:	240075c0 	.word	0x240075c0
 8005af4:	ffffd3f4 	.word	0xffffd3f4
 8005af8:	240079c0 	.word	0x240079c0

08005afc <TGFX_JPEG_InitColorTables>:
  * @brief  Initializes the colors conversion Look Up Tables
  * @param  None
  * @retval None
  */
void TGFX_JPEG_InitColorTables(void)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	af00      	add	r7, sp, #0

#if (USE_JPEG_ENCODER == 1)
  TGFX_JPEG_InitPreProcColorTables();
 8005b00:	f000 f806 	bl	8005b10 <TGFX_JPEG_InitPreProcColorTables>
  TGFX_JPEG_Init_MCU_LUT();
 8005b04:	f000 f888 	bl	8005c18 <TGFX_JPEG_Init_MCU_LUT>
#endif

#if (USE_JPEG_DECODER == 1)
  TGFX_JPEG_InitPostProcColorTables();
 8005b08:	f7ff ffac 	bl	8005a64 <TGFX_JPEG_InitPostProcColorTables>
#endif

}
 8005b0c:	bf00      	nop
 8005b0e:	bd80      	pop	{r7, pc}

08005b10 <TGFX_JPEG_InitPreProcColorTables>:
  * @brief  Initializes the RGB -> YCbCr colors conversion Look Up Tables
  * @param  None
  * @retval None
  */
void TGFX_JPEG_InitPreProcColorTables(void)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b083      	sub	sp, #12
 8005b14:	af00      	add	r7, sp, #0
  int32_t i;

  for (i = 0; i <= 255; i++)
 8005b16:	2300      	movs	r3, #0
 8005b18:	607b      	str	r3, [r7, #4]
 8005b1a:	e05a      	b.n	8005bd2 <TGFX_JPEG_InitPreProcColorTables+0xc2>
  {
    RED_Y_LUT[i]           = ((  ((int32_t) ((0.299 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	f644 428b 	movw	r2, #19595	; 0x4c8b
 8005b22:	fb02 f303 	mul.w	r3, r2, r3
 8005b26:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8005b2a:	141a      	asrs	r2, r3, #16
 8005b2c:	492e      	ldr	r1, [pc, #184]	; (8005be8 <TGFX_JPEG_InitPreProcColorTables+0xd8>)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    GREEN_Y_LUT[i]         = ((  ((int32_t) ((0.587 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	f249 6245 	movw	r2, #38469	; 0x9645
 8005b3a:	fb02 f303 	mul.w	r3, r2, r3
 8005b3e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8005b42:	141a      	asrs	r2, r3, #16
 8005b44:	4929      	ldr	r1, [pc, #164]	; (8005bec <TGFX_JPEG_InitPreProcColorTables+0xdc>)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    BLUE_Y_LUT[i]          = ((  ((int32_t) ((0.114 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	f641 522f 	movw	r2, #7471	; 0x1d2f
 8005b52:	fb02 f303 	mul.w	r3, r2, r3
 8005b56:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8005b5a:	141a      	asrs	r2, r3, #16
 8005b5c:	4924      	ldr	r1, [pc, #144]	; (8005bf0 <TGFX_JPEG_InitPreProcColorTables+0xe0>)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    RED_CB_LUT[i]          = (((-((int32_t) ((0.1687 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	4a23      	ldr	r2, [pc, #140]	; (8005bf4 <TGFX_JPEG_InitPreProcColorTables+0xe4>)
 8005b68:	fb02 f303 	mul.w	r3, r2, r3
 8005b6c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8005b70:	141a      	asrs	r2, r3, #16
 8005b72:	4921      	ldr	r1, [pc, #132]	; (8005bf8 <TGFX_JPEG_InitPreProcColorTables+0xe8>)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    GREEN_CB_LUT[i]        = (((-((int32_t) ((0.3313 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	4a1f      	ldr	r2, [pc, #124]	; (8005bfc <TGFX_JPEG_InitPreProcColorTables+0xec>)
 8005b7e:	fb02 f303 	mul.w	r3, r2, r3
 8005b82:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8005b86:	141a      	asrs	r2, r3, #16
 8005b88:	491d      	ldr	r1, [pc, #116]	; (8005c00 <TGFX_JPEG_InitPreProcColorTables+0xf0>)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    /* BLUE_CB_LUT and RED_CR_LUT are identical */
    BLUE_CB_RED_CR_LUT[i]  = ((  ((int32_t) ((0.5 )    * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	3301      	adds	r3, #1
 8005b94:	03db      	lsls	r3, r3, #15
 8005b96:	141a      	asrs	r2, r3, #16
 8005b98:	491a      	ldr	r1, [pc, #104]	; (8005c04 <TGFX_JPEG_InitPreProcColorTables+0xf4>)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    GREEN_CR_LUT[i]        = (((-((int32_t) ((0.4187 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	4a19      	ldr	r2, [pc, #100]	; (8005c08 <TGFX_JPEG_InitPreProcColorTables+0xf8>)
 8005ba4:	fb02 f303 	mul.w	r3, r2, r3
 8005ba8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8005bac:	141a      	asrs	r2, r3, #16
 8005bae:	4917      	ldr	r1, [pc, #92]	; (8005c0c <TGFX_JPEG_InitPreProcColorTables+0xfc>)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    BLUE_CR_LUT[i]         = (((-((int32_t) ((0.0813 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	4a15      	ldr	r2, [pc, #84]	; (8005c10 <TGFX_JPEG_InitPreProcColorTables+0x100>)
 8005bba:	fb02 f303 	mul.w	r3, r2, r3
 8005bbe:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8005bc2:	141a      	asrs	r2, r3, #16
 8005bc4:	4913      	ldr	r1, [pc, #76]	; (8005c14 <TGFX_JPEG_InitPreProcColorTables+0x104>)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (i = 0; i <= 255; i++)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	3301      	adds	r3, #1
 8005bd0:	607b      	str	r3, [r7, #4]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2bff      	cmp	r3, #255	; 0xff
 8005bd6:	dda1      	ble.n	8005b1c <TGFX_JPEG_InitPreProcColorTables+0xc>
  }
}
 8005bd8:	bf00      	nop
 8005bda:	bf00      	nop
 8005bdc:	370c      	adds	r7, #12
 8005bde:	46bd      	mov	sp, r7
 8005be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be4:	4770      	bx	lr
 8005be6:	bf00      	nop
 8005be8:	24007dc0 	.word	0x24007dc0
 8005bec:	240089c0 	.word	0x240089c0
 8005bf0:	240095c0 	.word	0x240095c0
 8005bf4:	ffffd4d1 	.word	0xffffd4d1
 8005bf8:	240081c0 	.word	0x240081c0
 8005bfc:	ffffab30 	.word	0xffffab30
 8005c00:	240091c0 	.word	0x240091c0
 8005c04:	240085c0 	.word	0x240085c0
 8005c08:	ffff94d1 	.word	0xffff94d1
 8005c0c:	24008dc0 	.word	0x24008dc0
 8005c10:	ffffeb30 	.word	0xffffeb30
 8005c14:	240099c0 	.word	0x240099c0

08005c18 <TGFX_JPEG_Init_MCU_LUT>:
  * @brief  Initializes the MCU Look Up Tables
  * @param  None
  * @retval None
  */
void TGFX_JPEG_Init_MCU_LUT(void)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b085      	sub	sp, #20
 8005c1c:	af00      	add	r7, sp, #0
  uint32_t i, j, offset;

  /*Y LUT */
  for(i = 0; i < 16; i++)
 8005c1e:	2300      	movs	r3, #0
 8005c20:	60fb      	str	r3, [r7, #12]
 8005c22:	e036      	b.n	8005c92 <TGFX_JPEG_Init_MCU_LUT+0x7a>
  {
    for(j = 0; j < 16; j++)
 8005c24:	2300      	movs	r3, #0
 8005c26:	60bb      	str	r3, [r7, #8]
 8005c28:	e02d      	b.n	8005c86 <TGFX_JPEG_Init_MCU_LUT+0x6e>
    {
      offset =  j + (i*8);
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	00db      	lsls	r3, r3, #3
 8005c2e:	68ba      	ldr	r2, [r7, #8]
 8005c30:	4413      	add	r3, r2
 8005c32:	607b      	str	r3, [r7, #4]
      if((j>=8) && (i>=8)) offset+= 120;
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	2b07      	cmp	r3, #7
 8005c38:	d906      	bls.n	8005c48 <TGFX_JPEG_Init_MCU_LUT+0x30>
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2b07      	cmp	r3, #7
 8005c3e:	d903      	bls.n	8005c48 <TGFX_JPEG_Init_MCU_LUT+0x30>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	3378      	adds	r3, #120	; 0x78
 8005c44:	607b      	str	r3, [r7, #4]
 8005c46:	e012      	b.n	8005c6e <TGFX_JPEG_Init_MCU_LUT+0x56>
      else  if((j>=8) && (i<8)) offset+= 56;
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	2b07      	cmp	r3, #7
 8005c4c:	d906      	bls.n	8005c5c <TGFX_JPEG_Init_MCU_LUT+0x44>
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2b07      	cmp	r3, #7
 8005c52:	d803      	bhi.n	8005c5c <TGFX_JPEG_Init_MCU_LUT+0x44>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	3338      	adds	r3, #56	; 0x38
 8005c58:	607b      	str	r3, [r7, #4]
 8005c5a:	e008      	b.n	8005c6e <TGFX_JPEG_Init_MCU_LUT+0x56>
      else  if((j<8) && (i>=8)) offset+= 64;
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	2b07      	cmp	r3, #7
 8005c60:	d805      	bhi.n	8005c6e <TGFX_JPEG_Init_MCU_LUT+0x56>
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2b07      	cmp	r3, #7
 8005c66:	d902      	bls.n	8005c6e <TGFX_JPEG_Init_MCU_LUT+0x56>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	3340      	adds	r3, #64	; 0x40
 8005c6c:	607b      	str	r3, [r7, #4]

      JPEG_Y_MCU_LUT[i*16 + j] = offset;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	011a      	lsls	r2, r3, #4
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	4413      	add	r3, r2
 8005c76:	687a      	ldr	r2, [r7, #4]
 8005c78:	b291      	uxth	r1, r2
 8005c7a:	4a62      	ldr	r2, [pc, #392]	; (8005e04 <TGFX_JPEG_Init_MCU_LUT+0x1ec>)
 8005c7c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(j = 0; j < 16; j++)
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	3301      	adds	r3, #1
 8005c84:	60bb      	str	r3, [r7, #8]
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	2b0f      	cmp	r3, #15
 8005c8a:	d9ce      	bls.n	8005c2a <TGFX_JPEG_Init_MCU_LUT+0x12>
  for(i = 0; i < 16; i++)
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	3301      	adds	r3, #1
 8005c90:	60fb      	str	r3, [r7, #12]
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2b0f      	cmp	r3, #15
 8005c96:	d9c5      	bls.n	8005c24 <TGFX_JPEG_Init_MCU_LUT+0xc>
    }
  }

  /*Cb Cr K LUT*/
  for(i = 0; i < 16; i++)
 8005c98:	2300      	movs	r3, #0
 8005c9a:	60fb      	str	r3, [r7, #12]
 8005c9c:	e072      	b.n	8005d84 <TGFX_JPEG_Init_MCU_LUT+0x16c>
  {
    for(j = 0; j < 16; j++)
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	60bb      	str	r3, [r7, #8]
 8005ca2:	e069      	b.n	8005d78 <TGFX_JPEG_Init_MCU_LUT+0x160>
    {
      offset = i*16 + j;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	011b      	lsls	r3, r3, #4
 8005ca8:	68ba      	ldr	r2, [r7, #8]
 8005caa:	4413      	add	r3, r2
 8005cac:	607b      	str	r3, [r7, #4]

      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	085b      	lsrs	r3, r3, #1
 8005cb2:	b29a      	uxth	r2, r3
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	085b      	lsrs	r3, r3, #1
 8005cb8:	b29b      	uxth	r3, r3
 8005cba:	00db      	lsls	r3, r3, #3
 8005cbc:	b29b      	uxth	r3, r3
 8005cbe:	4413      	add	r3, r2
 8005cc0:	b29b      	uxth	r3, r3
 8005cc2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005cc6:	b299      	uxth	r1, r3
 8005cc8:	4a4f      	ldr	r2, [pc, #316]	; (8005e08 <TGFX_JPEG_Init_MCU_LUT+0x1f0>)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	085b      	lsrs	r3, r3, #1
 8005cd4:	b29a      	uxth	r2, r3
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	b29b      	uxth	r3, r3
 8005cda:	00db      	lsls	r3, r3, #3
 8005cdc:	b29b      	uxth	r3, r3
 8005cde:	4413      	add	r3, r2
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	3380      	adds	r3, #128	; 0x80
 8005ce4:	b299      	uxth	r1, r3
 8005ce6:	4a49      	ldr	r2, [pc, #292]	; (8005e0c <TGFX_JPEG_Init_MCU_LUT+0x1f4>)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	085b      	lsrs	r3, r3, #1
 8005cf2:	b29a      	uxth	r2, r3
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	085b      	lsrs	r3, r3, #1
 8005cf8:	b29b      	uxth	r3, r3
 8005cfa:	00db      	lsls	r3, r3, #3
 8005cfc:	b29b      	uxth	r3, r3
 8005cfe:	4413      	add	r3, r2
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8005d06:	b299      	uxth	r1, r3
 8005d08:	4a41      	ldr	r2, [pc, #260]	; (8005e10 <TGFX_JPEG_Init_MCU_LUT+0x1f8>)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	085b      	lsrs	r3, r3, #1
 8005d14:	b29a      	uxth	r2, r3
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	b29b      	uxth	r3, r3
 8005d1a:	00db      	lsls	r3, r3, #3
 8005d1c:	b29b      	uxth	r3, r3
 8005d1e:	4413      	add	r3, r2
 8005d20:	b29b      	uxth	r3, r3
 8005d22:	33c0      	adds	r3, #192	; 0xc0
 8005d24:	b299      	uxth	r1, r3
 8005d26:	4a3b      	ldr	r2, [pc, #236]	; (8005e14 <TGFX_JPEG_Init_MCU_LUT+0x1fc>)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	085b      	lsrs	r3, r3, #1
 8005d32:	b29a      	uxth	r2, r3
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	085b      	lsrs	r3, r3, #1
 8005d38:	b29b      	uxth	r3, r3
 8005d3a:	00db      	lsls	r3, r3, #3
 8005d3c:	b29b      	uxth	r3, r3
 8005d3e:	4413      	add	r3, r2
 8005d40:	b29b      	uxth	r3, r3
 8005d42:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8005d46:	b299      	uxth	r1, r3
 8005d48:	4a33      	ldr	r2, [pc, #204]	; (8005e18 <TGFX_JPEG_Init_MCU_LUT+0x200>)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_K_MCU_422_LUT[offset] = (j/2) + ((i/2)*8) + 256;
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	085b      	lsrs	r3, r3, #1
 8005d54:	b29a      	uxth	r2, r3
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	085b      	lsrs	r3, r3, #1
 8005d5a:	b29b      	uxth	r3, r3
 8005d5c:	00db      	lsls	r3, r3, #3
 8005d5e:	b29b      	uxth	r3, r3
 8005d60:	4413      	add	r3, r2
 8005d62:	b29b      	uxth	r3, r3
 8005d64:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005d68:	b299      	uxth	r1, r3
 8005d6a:	4a2c      	ldr	r2, [pc, #176]	; (8005e1c <TGFX_JPEG_Init_MCU_LUT+0x204>)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(j = 0; j < 16; j++)
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	3301      	adds	r3, #1
 8005d76:	60bb      	str	r3, [r7, #8]
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	2b0f      	cmp	r3, #15
 8005d7c:	d992      	bls.n	8005ca4 <TGFX_JPEG_Init_MCU_LUT+0x8c>
  for(i = 0; i < 16; i++)
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	3301      	adds	r3, #1
 8005d82:	60fb      	str	r3, [r7, #12]
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2b0f      	cmp	r3, #15
 8005d88:	d989      	bls.n	8005c9e <TGFX_JPEG_Init_MCU_LUT+0x86>
    }
  }

  for(i = 0; i < 8; i++)
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	60fb      	str	r3, [r7, #12]
 8005d8e:	e02e      	b.n	8005dee <TGFX_JPEG_Init_MCU_LUT+0x1d6>
  {
    for(j = 0; j < 8; j++)
 8005d90:	2300      	movs	r3, #0
 8005d92:	60bb      	str	r3, [r7, #8]
 8005d94:	e025      	b.n	8005de2 <TGFX_JPEG_Init_MCU_LUT+0x1ca>
    {
      offset = i*8 + j;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	00db      	lsls	r3, r3, #3
 8005d9a:	68ba      	ldr	r2, [r7, #8]
 8005d9c:	4413      	add	r3, r2
 8005d9e:	607b      	str	r3, [r7, #4]

      JPEG_Y_MCU_444_LUT[offset]  = offset;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	b299      	uxth	r1, r3
 8005da4:	4a1e      	ldr	r2, [pc, #120]	; (8005e20 <TGFX_JPEG_Init_MCU_LUT+0x208>)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_Cb_MCU_444_LUT[offset] = offset + 64 ;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	b29b      	uxth	r3, r3
 8005db0:	3340      	adds	r3, #64	; 0x40
 8005db2:	b299      	uxth	r1, r3
 8005db4:	4a1b      	ldr	r2, [pc, #108]	; (8005e24 <TGFX_JPEG_Init_MCU_LUT+0x20c>)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_Cr_MCU_444_LUT[offset] = offset + 128 ;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	b29b      	uxth	r3, r3
 8005dc0:	3380      	adds	r3, #128	; 0x80
 8005dc2:	b299      	uxth	r1, r3
 8005dc4:	4a18      	ldr	r2, [pc, #96]	; (8005e28 <TGFX_JPEG_Init_MCU_LUT+0x210>)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_K_MCU_444_LUT[offset]  = offset + 192 ;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	b29b      	uxth	r3, r3
 8005dd0:	33c0      	adds	r3, #192	; 0xc0
 8005dd2:	b299      	uxth	r1, r3
 8005dd4:	4a15      	ldr	r2, [pc, #84]	; (8005e2c <TGFX_JPEG_Init_MCU_LUT+0x214>)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(j = 0; j < 8; j++)
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	3301      	adds	r3, #1
 8005de0:	60bb      	str	r3, [r7, #8]
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	2b07      	cmp	r3, #7
 8005de6:	d9d6      	bls.n	8005d96 <TGFX_JPEG_Init_MCU_LUT+0x17e>
  for(i = 0; i < 8; i++)
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	3301      	adds	r3, #1
 8005dec:	60fb      	str	r3, [r7, #12]
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2b07      	cmp	r3, #7
 8005df2:	d9cd      	bls.n	8005d90 <TGFX_JPEG_Init_MCU_LUT+0x178>
    }
  }
}
 8005df4:	bf00      	nop
 8005df6:	bf00      	nop
 8005df8:	3714      	adds	r7, #20
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e00:	4770      	bx	lr
 8005e02:	bf00      	nop
 8005e04:	24009dc0 	.word	0x24009dc0
 8005e08:	2400a040 	.word	0x2400a040
 8005e0c:	2400a240 	.word	0x2400a240
 8005e10:	2400a4c0 	.word	0x2400a4c0
 8005e14:	2400a6c0 	.word	0x2400a6c0
 8005e18:	2400a940 	.word	0x2400a940
 8005e1c:	2400ab40 	.word	0x2400ab40
 8005e20:	24009fc0 	.word	0x24009fc0
 8005e24:	2400a440 	.word	0x2400a440
 8005e28:	2400a8c0 	.word	0x2400a8c0
 8005e2c:	2400ad40 	.word	0x2400ad40

08005e30 <vApplicationIdleHook>:
/* Hook prototypes */
void vApplicationIdleHook(void);

/* USER CODE BEGIN 2 */
void vApplicationIdleHook(void)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	af00      	add	r7, sp, #0
    vTaskDelete() API function (as this demo application does) then it is also
    important that vApplicationIdleHook() is permitted to return to its calling
    function, because it is the responsibility of the idle task to clean up
    memory allocated by the kernel to any task that has since been deleted. */

    vTaskSetApplicationTaskTag(NULL, IdleTaskHook);
 8005e34:	4902      	ldr	r1, [pc, #8]	; (8005e40 <vApplicationIdleHook+0x10>)
 8005e36:	2000      	movs	r0, #0
 8005e38:	f011 f976 	bl	8017128 <vTaskSetApplicationTaskTag>
}
 8005e3c:	bf00      	nop
 8005e3e:	bd80      	pop	{r7, pc}
 8005e40:	08000f49 	.word	0x08000f49

08005e44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b084      	sub	sp, #16
 8005e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8005e4a:	f000 fcb1 	bl	80067b0 <MPU_Config>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8005e4e:	4b52      	ldr	r3, [pc, #328]	; (8005f98 <main+0x154>)
 8005e50:	695b      	ldr	r3, [r3, #20]
 8005e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d11b      	bne.n	8005e92 <main+0x4e>
  __ASM volatile ("dsb 0xF":::"memory");
 8005e5a:	f3bf 8f4f 	dsb	sy
}
 8005e5e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005e60:	f3bf 8f6f 	isb	sy
}
 8005e64:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8005e66:	4b4c      	ldr	r3, [pc, #304]	; (8005f98 <main+0x154>)
 8005e68:	2200      	movs	r2, #0
 8005e6a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8005e6e:	f3bf 8f4f 	dsb	sy
}
 8005e72:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005e74:	f3bf 8f6f 	isb	sy
}
 8005e78:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8005e7a:	4b47      	ldr	r3, [pc, #284]	; (8005f98 <main+0x154>)
 8005e7c:	695b      	ldr	r3, [r3, #20]
 8005e7e:	4a46      	ldr	r2, [pc, #280]	; (8005f98 <main+0x154>)
 8005e80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e84:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8005e86:	f3bf 8f4f 	dsb	sy
}
 8005e8a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005e8c:	f3bf 8f6f 	isb	sy
}
 8005e90:	e000      	b.n	8005e94 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8005e92:	bf00      	nop
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8005e94:	4b40      	ldr	r3, [pc, #256]	; (8005f98 <main+0x154>)
 8005e96:	695b      	ldr	r3, [r3, #20]
 8005e98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d138      	bne.n	8005f12 <main+0xce>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8005ea0:	4b3d      	ldr	r3, [pc, #244]	; (8005f98 <main+0x154>)
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8005ea8:	f3bf 8f4f 	dsb	sy
}
 8005eac:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8005eae:	4b3a      	ldr	r3, [pc, #232]	; (8005f98 <main+0x154>)
 8005eb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005eb4:	60fb      	str	r3, [r7, #12]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	0b5b      	lsrs	r3, r3, #13
 8005eba:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8005ebe:	60bb      	str	r3, [r7, #8]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	08db      	lsrs	r3, r3, #3
 8005ec4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ec8:	607b      	str	r3, [r7, #4]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	015a      	lsls	r2, r3, #5
 8005ece:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8005ed2:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8005ed4:	687a      	ldr	r2, [r7, #4]
 8005ed6:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8005ed8:	492f      	ldr	r1, [pc, #188]	; (8005f98 <main+0x154>)
 8005eda:	4313      	orrs	r3, r2
 8005edc:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	1e5a      	subs	r2, r3, #1
 8005ee4:	607a      	str	r2, [r7, #4]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d1ef      	bne.n	8005eca <main+0x86>
    } while(sets-- != 0U);
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	1e5a      	subs	r2, r3, #1
 8005eee:	60ba      	str	r2, [r7, #8]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d1e5      	bne.n	8005ec0 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8005ef4:	f3bf 8f4f 	dsb	sy
}
 8005ef8:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8005efa:	4b27      	ldr	r3, [pc, #156]	; (8005f98 <main+0x154>)
 8005efc:	695b      	ldr	r3, [r3, #20]
 8005efe:	4a26      	ldr	r2, [pc, #152]	; (8005f98 <main+0x154>)
 8005f00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f04:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8005f06:	f3bf 8f4f 	dsb	sy
}
 8005f0a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005f0c:	f3bf 8f6f 	isb	sy
}
 8005f10:	e000      	b.n	8005f14 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8005f12:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005f14:	f005 fdd4 	bl	800bac0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005f18:	f000 f858 	bl	8005fcc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005f1c:	f000 facc 	bl	80064b8 <MX_GPIO_Init>
  MX_MDMA_Init();
 8005f20:	f000 fa58 	bl	80063d4 <MX_MDMA_Init>
  MX_DMA2D_Init();
 8005f24:	f000 f8e8 	bl	80060f8 <MX_DMA2D_Init>
  MX_LTDC_Init();
 8005f28:	f000 f974 	bl	8006214 <MX_LTDC_Init>
  MX_I2C4_Init();
 8005f2c:	f000 f91e 	bl	800616c <MX_I2C4_Init>
  MX_OCTOSPI1_Init();
 8005f30:	f000 f9f2 	bl	8006318 <MX_OCTOSPI1_Init>
  MX_FMC_Init();
 8005f34:	f000 fa6e 	bl	8006414 <MX_FMC_Init>
  MX_CRC_Init();
 8005f38:	f000 f8bc 	bl	80060b4 <MX_CRC_Init>
  MX_JPEG_Init();
 8005f3c:	f000 f956 	bl	80061ec <MX_JPEG_Init>
  MX_LIBJPEG_Init();
 8005f40:	f7fa fa4f 	bl	80003e2 <MX_LIBJPEG_Init>
  MX_TouchGFX_Init();
 8005f44:	f7fa fa5b 	bl	80003fe <MX_TouchGFX_Init>
  /* Call PreOsInit function */
  MX_TouchGFX_PreOSInit();
 8005f48:	f7fa fa52 	bl	80003f0 <MX_TouchGFX_PreOSInit>
  /* USER CODE BEGIN 2 */
  SDRAM_Initialization_Sequence(&hsdram1, &command);
 8005f4c:	4913      	ldr	r1, [pc, #76]	; (8005f9c <main+0x158>)
 8005f4e:	4814      	ldr	r0, [pc, #80]	; (8005fa0 <main+0x15c>)
 8005f50:	f000 fbc8 	bl	80066e4 <SDRAM_Initialization_Sequence>
  
  *(__IO uint32_t*)(0xD0000000) = 0x11111122;
 8005f54:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8005f58:	4a12      	ldr	r2, [pc, #72]	; (8005fa4 <main+0x160>)
 8005f5a:	601a      	str	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8005f5c:	f00e faee 	bl	801453c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8005f60:	4a11      	ldr	r2, [pc, #68]	; (8005fa8 <main+0x164>)
 8005f62:	2100      	movs	r1, #0
 8005f64:	4811      	ldr	r0, [pc, #68]	; (8005fac <main+0x168>)
 8005f66:	f00e fb33 	bl	80145d0 <osThreadNew>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	4a10      	ldr	r2, [pc, #64]	; (8005fb0 <main+0x16c>)
 8005f6e:	6013      	str	r3, [r2, #0]

  /* creation of GUI_Task */
  GUI_TaskHandle = osThreadNew(TouchGFX_Task, NULL, &GUI_Task_attributes);
 8005f70:	4a10      	ldr	r2, [pc, #64]	; (8005fb4 <main+0x170>)
 8005f72:	2100      	movs	r1, #0
 8005f74:	4810      	ldr	r0, [pc, #64]	; (8005fb8 <main+0x174>)
 8005f76:	f00e fb2b 	bl	80145d0 <osThreadNew>
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	4a0f      	ldr	r2, [pc, #60]	; (8005fbc <main+0x178>)
 8005f7e:	6013      	str	r3, [r2, #0]

  /* creation of videoTask */
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
 8005f80:	4a0f      	ldr	r2, [pc, #60]	; (8005fc0 <main+0x17c>)
 8005f82:	2100      	movs	r1, #0
 8005f84:	480f      	ldr	r0, [pc, #60]	; (8005fc4 <main+0x180>)
 8005f86:	f00e fb23 	bl	80145d0 <osThreadNew>
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	4a0e      	ldr	r2, [pc, #56]	; (8005fc8 <main+0x184>)
 8005f8e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8005f90:	f00e faf8 	bl	8014584 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8005f94:	e7fe      	b.n	8005f94 <main+0x150>
 8005f96:	bf00      	nop
 8005f98:	e000ed00 	.word	0xe000ed00
 8005f9c:	2400b114 	.word	0x2400b114
 8005fa0:	2400b0d4 	.word	0x2400b0d4
 8005fa4:	11111122 	.word	0x11111122
 8005fa8:	0802a060 	.word	0x0802a060
 8005fac:	080067a1 	.word	0x080067a1
 8005fb0:	2400b108 	.word	0x2400b108
 8005fb4:	0802a084 	.word	0x0802a084
 8005fb8:	0800040f 	.word	0x0800040f
 8005fbc:	2400b10c 	.word	0x2400b10c
 8005fc0:	0802a0a8 	.word	0x0802a0a8
 8005fc4:	080044c9 	.word	0x080044c9
 8005fc8:	2400b110 	.word	0x2400b110

08005fcc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b09c      	sub	sp, #112	; 0x70
 8005fd0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005fd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005fd6:	224c      	movs	r2, #76	; 0x4c
 8005fd8:	2100      	movs	r1, #0
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f020 fa4e 	bl	802647c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005fe0:	1d3b      	adds	r3, r7, #4
 8005fe2:	2220      	movs	r2, #32
 8005fe4:	2100      	movs	r1, #0
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f020 fa48 	bl	802647c <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8005fec:	4b2f      	ldr	r3, [pc, #188]	; (80060ac <SystemClock_Config+0xe0>)
 8005fee:	f04f 32ff 	mov.w	r2, #4294967295
 8005ff2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8005ff6:	2004      	movs	r0, #4
 8005ff8:	f00b fa6c 	bl	80114d4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	603b      	str	r3, [r7, #0]
 8006000:	4b2b      	ldr	r3, [pc, #172]	; (80060b0 <SystemClock_Config+0xe4>)
 8006002:	699b      	ldr	r3, [r3, #24]
 8006004:	4a2a      	ldr	r2, [pc, #168]	; (80060b0 <SystemClock_Config+0xe4>)
 8006006:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800600a:	6193      	str	r3, [r2, #24]
 800600c:	4b28      	ldr	r3, [pc, #160]	; (80060b0 <SystemClock_Config+0xe4>)
 800600e:	699b      	ldr	r3, [r3, #24]
 8006010:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006014:	603b      	str	r3, [r7, #0]
 8006016:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8006018:	bf00      	nop
 800601a:	4b25      	ldr	r3, [pc, #148]	; (80060b0 <SystemClock_Config+0xe4>)
 800601c:	699b      	ldr	r3, [r3, #24]
 800601e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006022:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006026:	d1f8      	bne.n	800601a <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006028:	2301      	movs	r3, #1
 800602a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800602c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006030:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006032:	2302      	movs	r3, #2
 8006034:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006036:	2302      	movs	r3, #2
 8006038:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 12;
 800603a:	230c      	movs	r3, #12
 800603c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 280;
 800603e:	f44f 738c 	mov.w	r3, #280	; 0x118
 8006042:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8006044:	2302      	movs	r3, #2
 8006046:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8006048:	2302      	movs	r3, #2
 800604a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800604c:	2302      	movs	r3, #2
 800604e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8006050:	2304      	movs	r3, #4
 8006052:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8006054:	2300      	movs	r3, #0
 8006056:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8006058:	2300      	movs	r3, #0
 800605a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800605c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006060:	4618      	mov	r0, r3
 8006062:	f00b fa91 	bl	8011588 <HAL_RCC_OscConfig>
 8006066:	4603      	mov	r3, r0
 8006068:	2b00      	cmp	r3, #0
 800606a:	d001      	beq.n	8006070 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 800606c:	f000 fc00 	bl	8006870 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006070:	233f      	movs	r3, #63	; 0x3f
 8006072:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006074:	2303      	movs	r3, #3
 8006076:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8006078:	2300      	movs	r3, #0
 800607a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800607c:	2308      	movs	r3, #8
 800607e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8006080:	2300      	movs	r3, #0
 8006082:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8006084:	2300      	movs	r3, #0
 8006086:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8006088:	2300      	movs	r3, #0
 800608a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800608c:	2300      	movs	r3, #0
 800608e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8006090:	1d3b      	adds	r3, r7, #4
 8006092:	2103      	movs	r1, #3
 8006094:	4618      	mov	r0, r3
 8006096:	f00b fea9 	bl	8011dec <HAL_RCC_ClockConfig>
 800609a:	4603      	mov	r3, r0
 800609c:	2b00      	cmp	r3, #0
 800609e:	d001      	beq.n	80060a4 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 80060a0:	f000 fbe6 	bl	8006870 <Error_Handler>
  }
}
 80060a4:	bf00      	nop
 80060a6:	3770      	adds	r7, #112	; 0x70
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd80      	pop	{r7, pc}
 80060ac:	58024400 	.word	0x58024400
 80060b0:	58024800 	.word	0x58024800

080060b4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80060b8:	4b0d      	ldr	r3, [pc, #52]	; (80060f0 <MX_CRC_Init+0x3c>)
 80060ba:	4a0e      	ldr	r2, [pc, #56]	; (80060f4 <MX_CRC_Init+0x40>)
 80060bc:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80060be:	4b0c      	ldr	r3, [pc, #48]	; (80060f0 <MX_CRC_Init+0x3c>)
 80060c0:	2200      	movs	r2, #0
 80060c2:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80060c4:	4b0a      	ldr	r3, [pc, #40]	; (80060f0 <MX_CRC_Init+0x3c>)
 80060c6:	2200      	movs	r2, #0
 80060c8:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80060ca:	4b09      	ldr	r3, [pc, #36]	; (80060f0 <MX_CRC_Init+0x3c>)
 80060cc:	2200      	movs	r2, #0
 80060ce:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80060d0:	4b07      	ldr	r3, [pc, #28]	; (80060f0 <MX_CRC_Init+0x3c>)
 80060d2:	2200      	movs	r2, #0
 80060d4:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80060d6:	4b06      	ldr	r3, [pc, #24]	; (80060f0 <MX_CRC_Init+0x3c>)
 80060d8:	2201      	movs	r2, #1
 80060da:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80060dc:	4804      	ldr	r0, [pc, #16]	; (80060f0 <MX_CRC_Init+0x3c>)
 80060de:	f005 fefd 	bl	800bedc <HAL_CRC_Init>
 80060e2:	4603      	mov	r3, r0
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d001      	beq.n	80060ec <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80060e8:	f000 fbc2 	bl	8006870 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80060ec:	bf00      	nop
 80060ee:	bd80      	pop	{r7, pc}
 80060f0:	2400adc0 	.word	0x2400adc0
 80060f4:	40023000 	.word	0x40023000

080060f8 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80060fc:	4b19      	ldr	r3, [pc, #100]	; (8006164 <MX_DMA2D_Init+0x6c>)
 80060fe:	4a1a      	ldr	r2, [pc, #104]	; (8006168 <MX_DMA2D_Init+0x70>)
 8006100:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8006102:	4b18      	ldr	r3, [pc, #96]	; (8006164 <MX_DMA2D_Init+0x6c>)
 8006104:	2200      	movs	r2, #0
 8006106:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 8006108:	4b16      	ldr	r3, [pc, #88]	; (8006164 <MX_DMA2D_Init+0x6c>)
 800610a:	2202      	movs	r2, #2
 800610c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800610e:	4b15      	ldr	r3, [pc, #84]	; (8006164 <MX_DMA2D_Init+0x6c>)
 8006110:	2200      	movs	r2, #0
 8006112:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8006114:	4b13      	ldr	r3, [pc, #76]	; (8006164 <MX_DMA2D_Init+0x6c>)
 8006116:	2200      	movs	r2, #0
 8006118:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 800611a:	4b12      	ldr	r3, [pc, #72]	; (8006164 <MX_DMA2D_Init+0x6c>)
 800611c:	2202      	movs	r2, #2
 800611e:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8006120:	4b10      	ldr	r3, [pc, #64]	; (8006164 <MX_DMA2D_Init+0x6c>)
 8006122:	2200      	movs	r2, #0
 8006124:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8006126:	4b0f      	ldr	r3, [pc, #60]	; (8006164 <MX_DMA2D_Init+0x6c>)
 8006128:	2200      	movs	r2, #0
 800612a:	651a      	str	r2, [r3, #80]	; 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 800612c:	4b0d      	ldr	r3, [pc, #52]	; (8006164 <MX_DMA2D_Init+0x6c>)
 800612e:	2200      	movs	r2, #0
 8006130:	655a      	str	r2, [r3, #84]	; 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8006132:	4b0c      	ldr	r3, [pc, #48]	; (8006164 <MX_DMA2D_Init+0x6c>)
 8006134:	2200      	movs	r2, #0
 8006136:	659a      	str	r2, [r3, #88]	; 0x58
  hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
 8006138:	4b0a      	ldr	r3, [pc, #40]	; (8006164 <MX_DMA2D_Init+0x6c>)
 800613a:	2200      	movs	r2, #0
 800613c:	65da      	str	r2, [r3, #92]	; 0x5c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800613e:	4809      	ldr	r0, [pc, #36]	; (8006164 <MX_DMA2D_Init+0x6c>)
 8006140:	f005 ffbe 	bl	800c0c0 <HAL_DMA2D_Init>
 8006144:	4603      	mov	r3, r0
 8006146:	2b00      	cmp	r3, #0
 8006148:	d001      	beq.n	800614e <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800614a:	f000 fb91 	bl	8006870 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800614e:	2101      	movs	r1, #1
 8006150:	4804      	ldr	r0, [pc, #16]	; (8006164 <MX_DMA2D_Init+0x6c>)
 8006152:	f006 f929 	bl	800c3a8 <HAL_DMA2D_ConfigLayer>
 8006156:	4603      	mov	r3, r0
 8006158:	2b00      	cmp	r3, #0
 800615a:	d001      	beq.n	8006160 <MX_DMA2D_Init+0x68>
  {
    Error_Handler();
 800615c:	f000 fb88 	bl	8006870 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8006160:	bf00      	nop
 8006162:	bd80      	pop	{r7, pc}
 8006164:	2400ade4 	.word	0x2400ade4
 8006168:	52001000 	.word	0x52001000

0800616c <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8006170:	4b1b      	ldr	r3, [pc, #108]	; (80061e0 <MX_I2C4_Init+0x74>)
 8006172:	4a1c      	ldr	r2, [pc, #112]	; (80061e4 <MX_I2C4_Init+0x78>)
 8006174:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x30808BD0;
 8006176:	4b1a      	ldr	r3, [pc, #104]	; (80061e0 <MX_I2C4_Init+0x74>)
 8006178:	4a1b      	ldr	r2, [pc, #108]	; (80061e8 <MX_I2C4_Init+0x7c>)
 800617a:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 800617c:	4b18      	ldr	r3, [pc, #96]	; (80061e0 <MX_I2C4_Init+0x74>)
 800617e:	2200      	movs	r2, #0
 8006180:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006182:	4b17      	ldr	r3, [pc, #92]	; (80061e0 <MX_I2C4_Init+0x74>)
 8006184:	2201      	movs	r2, #1
 8006186:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006188:	4b15      	ldr	r3, [pc, #84]	; (80061e0 <MX_I2C4_Init+0x74>)
 800618a:	2200      	movs	r2, #0
 800618c:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 800618e:	4b14      	ldr	r3, [pc, #80]	; (80061e0 <MX_I2C4_Init+0x74>)
 8006190:	2200      	movs	r2, #0
 8006192:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8006194:	4b12      	ldr	r3, [pc, #72]	; (80061e0 <MX_I2C4_Init+0x74>)
 8006196:	2200      	movs	r2, #0
 8006198:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800619a:	4b11      	ldr	r3, [pc, #68]	; (80061e0 <MX_I2C4_Init+0x74>)
 800619c:	2200      	movs	r2, #0
 800619e:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80061a0:	4b0f      	ldr	r3, [pc, #60]	; (80061e0 <MX_I2C4_Init+0x74>)
 80061a2:	2200      	movs	r2, #0
 80061a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80061a6:	480e      	ldr	r0, [pc, #56]	; (80061e0 <MX_I2C4_Init+0x74>)
 80061a8:	f006 fcd6 	bl	800cb58 <HAL_I2C_Init>
 80061ac:	4603      	mov	r3, r0
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d001      	beq.n	80061b6 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 80061b2:	f000 fb5d 	bl	8006870 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 80061b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80061ba:	4809      	ldr	r0, [pc, #36]	; (80061e0 <MX_I2C4_Init+0x74>)
 80061bc:	f007 fa8c 	bl	800d6d8 <HAL_I2CEx_ConfigAnalogFilter>
 80061c0:	4603      	mov	r3, r0
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d001      	beq.n	80061ca <MX_I2C4_Init+0x5e>
  {
    Error_Handler();
 80061c6:	f000 fb53 	bl	8006870 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 80061ca:	2100      	movs	r1, #0
 80061cc:	4804      	ldr	r0, [pc, #16]	; (80061e0 <MX_I2C4_Init+0x74>)
 80061ce:	f007 face 	bl	800d76e <HAL_I2CEx_ConfigDigitalFilter>
 80061d2:	4603      	mov	r3, r0
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d001      	beq.n	80061dc <MX_I2C4_Init+0x70>
  {
    Error_Handler();
 80061d8:	f000 fb4a 	bl	8006870 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 80061dc:	bf00      	nop
 80061de:	bd80      	pop	{r7, pc}
 80061e0:	2400ae4c 	.word	0x2400ae4c
 80061e4:	58001c00 	.word	0x58001c00
 80061e8:	30808bd0 	.word	0x30808bd0

080061ec <MX_JPEG_Init>:
  * @brief JPEG Initialization Function
  * @param None
  * @retval None
  */
static void MX_JPEG_Init(void)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	af00      	add	r7, sp, #0
  /* USER CODE END JPEG_Init 0 */

  /* USER CODE BEGIN JPEG_Init 1 */

  /* USER CODE END JPEG_Init 1 */
  hjpeg.Instance = JPEG;
 80061f0:	4b06      	ldr	r3, [pc, #24]	; (800620c <MX_JPEG_Init+0x20>)
 80061f2:	4a07      	ldr	r2, [pc, #28]	; (8006210 <MX_JPEG_Init+0x24>)
 80061f4:	601a      	str	r2, [r3, #0]
  if (HAL_JPEG_Init(&hjpeg) != HAL_OK)
 80061f6:	4805      	ldr	r0, [pc, #20]	; (800620c <MX_JPEG_Init+0x20>)
 80061f8:	f007 fb06 	bl	800d808 <HAL_JPEG_Init>
 80061fc:	4603      	mov	r3, r0
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d001      	beq.n	8006206 <MX_JPEG_Init+0x1a>
  {
    Error_Handler();
 8006202:	f000 fb35 	bl	8006870 <Error_Handler>
  }
  /* USER CODE BEGIN JPEG_Init 2 */

  /* USER CODE END JPEG_Init 2 */

}
 8006206:	bf00      	nop
 8006208:	bd80      	pop	{r7, pc}
 800620a:	bf00      	nop
 800620c:	2400aea0 	.word	0x2400aea0
 8006210:	52003000 	.word	0x52003000

08006214 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b08e      	sub	sp, #56	; 0x38
 8006218:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800621a:	1d3b      	adds	r3, r7, #4
 800621c:	2234      	movs	r2, #52	; 0x34
 800621e:	2100      	movs	r1, #0
 8006220:	4618      	mov	r0, r3
 8006222:	f020 f92b 	bl	802647c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8006226:	4b3a      	ldr	r3, [pc, #232]	; (8006310 <MX_LTDC_Init+0xfc>)
 8006228:	4a3a      	ldr	r2, [pc, #232]	; (8006314 <MX_LTDC_Init+0x100>)
 800622a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800622c:	4b38      	ldr	r3, [pc, #224]	; (8006310 <MX_LTDC_Init+0xfc>)
 800622e:	2200      	movs	r2, #0
 8006230:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8006232:	4b37      	ldr	r3, [pc, #220]	; (8006310 <MX_LTDC_Init+0xfc>)
 8006234:	2200      	movs	r2, #0
 8006236:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8006238:	4b35      	ldr	r3, [pc, #212]	; (8006310 <MX_LTDC_Init+0xfc>)
 800623a:	2200      	movs	r2, #0
 800623c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800623e:	4b34      	ldr	r3, [pc, #208]	; (8006310 <MX_LTDC_Init+0xfc>)
 8006240:	2200      	movs	r2, #0
 8006242:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8006244:	4b32      	ldr	r3, [pc, #200]	; (8006310 <MX_LTDC_Init+0xfc>)
 8006246:	2228      	movs	r2, #40	; 0x28
 8006248:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 800624a:	4b31      	ldr	r3, [pc, #196]	; (8006310 <MX_LTDC_Init+0xfc>)
 800624c:	2209      	movs	r2, #9
 800624e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 42;
 8006250:	4b2f      	ldr	r3, [pc, #188]	; (8006310 <MX_LTDC_Init+0xfc>)
 8006252:	222a      	movs	r2, #42	; 0x2a
 8006254:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8006256:	4b2e      	ldr	r3, [pc, #184]	; (8006310 <MX_LTDC_Init+0xfc>)
 8006258:	220b      	movs	r2, #11
 800625a:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 522;
 800625c:	4b2c      	ldr	r3, [pc, #176]	; (8006310 <MX_LTDC_Init+0xfc>)
 800625e:	f240 220a 	movw	r2, #522	; 0x20a
 8006262:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8006264:	4b2a      	ldr	r3, [pc, #168]	; (8006310 <MX_LTDC_Init+0xfc>)
 8006266:	f240 121b 	movw	r2, #283	; 0x11b
 800626a:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 554;
 800626c:	4b28      	ldr	r3, [pc, #160]	; (8006310 <MX_LTDC_Init+0xfc>)
 800626e:	f240 222a 	movw	r2, #554	; 0x22a
 8006272:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8006274:	4b26      	ldr	r3, [pc, #152]	; (8006310 <MX_LTDC_Init+0xfc>)
 8006276:	f240 121d 	movw	r2, #285	; 0x11d
 800627a:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800627c:	4b24      	ldr	r3, [pc, #144]	; (8006310 <MX_LTDC_Init+0xfc>)
 800627e:	2200      	movs	r2, #0
 8006280:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8006284:	4b22      	ldr	r3, [pc, #136]	; (8006310 <MX_LTDC_Init+0xfc>)
 8006286:	2200      	movs	r2, #0
 8006288:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800628c:	4b20      	ldr	r3, [pc, #128]	; (8006310 <MX_LTDC_Init+0xfc>)
 800628e:	2200      	movs	r2, #0
 8006290:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8006294:	481e      	ldr	r0, [pc, #120]	; (8006310 <MX_LTDC_Init+0xfc>)
 8006296:	f009 fa27 	bl	800f6e8 <HAL_LTDC_Init>
 800629a:	4603      	mov	r3, r0
 800629c:	2b00      	cmp	r3, #0
 800629e:	d001      	beq.n	80062a4 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80062a0:	f000 fae6 	bl	8006870 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80062a4:	2300      	movs	r3, #0
 80062a6:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 80062a8:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80062ac:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80062ae:	2300      	movs	r3, #0
 80062b0:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 80062b2:	f44f 7388 	mov.w	r3, #272	; 0x110
 80062b6:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 80062b8:	2301      	movs	r3, #1
 80062ba:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80062bc:	23ff      	movs	r3, #255	; 0xff
 80062be:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80062c0:	2300      	movs	r3, #0
 80062c2:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80062c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80062c8:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80062ca:	2305      	movs	r3, #5
 80062cc:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 80062ce:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 80062d2:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 80062d4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80062d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 80062da:	f44f 7388 	mov.w	r3, #272	; 0x110
 80062de:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 255;
 80062e0:	23ff      	movs	r3, #255	; 0xff
 80062e2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 80062e6:	2300      	movs	r3, #0
 80062e8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 80062ec:	2300      	movs	r3, #0
 80062ee:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80062f2:	1d3b      	adds	r3, r7, #4
 80062f4:	2200      	movs	r2, #0
 80062f6:	4619      	mov	r1, r3
 80062f8:	4805      	ldr	r0, [pc, #20]	; (8006310 <MX_LTDC_Init+0xfc>)
 80062fa:	f009 fb7d 	bl	800f9f8 <HAL_LTDC_ConfigLayer>
 80062fe:	4603      	mov	r3, r0
 8006300:	2b00      	cmp	r3, #0
 8006302:	d001      	beq.n	8006308 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8006304:	f000 fab4 	bl	8006870 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8006308:	bf00      	nop
 800630a:	3738      	adds	r7, #56	; 0x38
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}
 8006310:	2400afd0 	.word	0x2400afd0
 8006314:	50001000 	.word	0x50001000

08006318 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b082      	sub	sp, #8
 800631c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 800631e:	4b2b      	ldr	r3, [pc, #172]	; (80063cc <MX_OCTOSPI1_Init+0xb4>)
 8006320:	4a2b      	ldr	r2, [pc, #172]	; (80063d0 <MX_OCTOSPI1_Init+0xb8>)
 8006322:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 8006324:	4b29      	ldr	r3, [pc, #164]	; (80063cc <MX_OCTOSPI1_Init+0xb4>)
 8006326:	2201      	movs	r2, #1
 8006328:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 800632a:	4b28      	ldr	r3, [pc, #160]	; (80063cc <MX_OCTOSPI1_Init+0xb4>)
 800632c:	2200      	movs	r2, #0
 800632e:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MICRON;
 8006330:	4b26      	ldr	r3, [pc, #152]	; (80063cc <MX_OCTOSPI1_Init+0xb4>)
 8006332:	2200      	movs	r2, #0
 8006334:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 26;
 8006336:	4b25      	ldr	r3, [pc, #148]	; (80063cc <MX_OCTOSPI1_Init+0xb4>)
 8006338:	221a      	movs	r2, #26
 800633a:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 2;
 800633c:	4b23      	ldr	r3, [pc, #140]	; (80063cc <MX_OCTOSPI1_Init+0xb4>)
 800633e:	2202      	movs	r2, #2
 8006340:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8006342:	4b22      	ldr	r3, [pc, #136]	; (80063cc <MX_OCTOSPI1_Init+0xb4>)
 8006344:	2200      	movs	r2, #0
 8006346:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8006348:	4b20      	ldr	r3, [pc, #128]	; (80063cc <MX_OCTOSPI1_Init+0xb4>)
 800634a:	2200      	movs	r2, #0
 800634c:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 800634e:	4b1f      	ldr	r3, [pc, #124]	; (80063cc <MX_OCTOSPI1_Init+0xb4>)
 8006350:	2200      	movs	r2, #0
 8006352:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 3;
 8006354:	4b1d      	ldr	r3, [pc, #116]	; (80063cc <MX_OCTOSPI1_Init+0xb4>)
 8006356:	2203      	movs	r2, #3
 8006358:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 800635a:	4b1c      	ldr	r3, [pc, #112]	; (80063cc <MX_OCTOSPI1_Init+0xb4>)
 800635c:	2200      	movs	r2, #0
 800635e:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8006360:	4b1a      	ldr	r3, [pc, #104]	; (80063cc <MX_OCTOSPI1_Init+0xb4>)
 8006362:	2200      	movs	r2, #0
 8006364:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 8006366:	4b19      	ldr	r3, [pc, #100]	; (80063cc <MX_OCTOSPI1_Init+0xb4>)
 8006368:	2200      	movs	r2, #0
 800636a:	631a      	str	r2, [r3, #48]	; 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 800636c:	4b17      	ldr	r3, [pc, #92]	; (80063cc <MX_OCTOSPI1_Init+0xb4>)
 800636e:	2208      	movs	r2, #8
 8006370:	635a      	str	r2, [r3, #52]	; 0x34
  hospi1.Init.MaxTran = 0;
 8006372:	4b16      	ldr	r3, [pc, #88]	; (80063cc <MX_OCTOSPI1_Init+0xb4>)
 8006374:	2200      	movs	r2, #0
 8006376:	639a      	str	r2, [r3, #56]	; 0x38
  hospi1.Init.Refresh = 0;
 8006378:	4b14      	ldr	r3, [pc, #80]	; (80063cc <MX_OCTOSPI1_Init+0xb4>)
 800637a:	2200      	movs	r2, #0
 800637c:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 800637e:	4813      	ldr	r0, [pc, #76]	; (80063cc <MX_OCTOSPI1_Init+0xb4>)
 8006380:	f00a f948 	bl	8010614 <HAL_OSPI_Init>
 8006384:	4603      	mov	r3, r0
 8006386:	2b00      	cmp	r3, #0
 8006388:	d001      	beq.n	800638e <MX_OCTOSPI1_Init+0x76>
  {
    Error_Handler();
 800638a:	f000 fa71 	bl	8006870 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */
  BSP_OSPI_NOR_Init_t Flash;
  Flash.InterfaceMode = BSP_OSPI_NOR_OPI_MODE;
 800638e:	2301      	movs	r3, #1
 8006390:	703b      	strb	r3, [r7, #0]
  Flash.TransferRate  = BSP_OSPI_NOR_DTR_TRANSFER;
 8006392:	2301      	movs	r3, #1
 8006394:	707b      	strb	r3, [r7, #1]
  BSP_OSPI_NOR_DeInit(0);
 8006396:	2000      	movs	r0, #0
 8006398:	f004 fb1e 	bl	800a9d8 <BSP_OSPI_NOR_DeInit>
  int32_t RetVal = BSP_OSPI_NOR_Init(0, &Flash);
 800639c:	463b      	mov	r3, r7
 800639e:	4619      	mov	r1, r3
 80063a0:	2000      	movs	r0, #0
 80063a2:	f004 fa8f 	bl	800a8c4 <BSP_OSPI_NOR_Init>
 80063a6:	6078      	str	r0, [r7, #4]
  if(RetVal != BSP_ERROR_NONE)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d001      	beq.n	80063b2 <MX_OCTOSPI1_Init+0x9a>
  {
    Error_Handler();
 80063ae:	f000 fa5f 	bl	8006870 <Error_Handler>
  }
  RetVal = BSP_OSPI_NOR_EnableMemoryMappedMode(0);
 80063b2:	2000      	movs	r0, #0
 80063b4:	f004 fbac 	bl	800ab10 <BSP_OSPI_NOR_EnableMemoryMappedMode>
 80063b8:	6078      	str	r0, [r7, #4]
  if(RetVal != BSP_ERROR_NONE)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d001      	beq.n	80063c4 <MX_OCTOSPI1_Init+0xac>
  {
    Error_Handler();
 80063c0:	f000 fa56 	bl	8006870 <Error_Handler>
  }
  /* USER CODE END OCTOSPI1_Init 2 */

}
 80063c4:	bf00      	nop
 80063c6:	3708      	adds	r7, #8
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}
 80063cc:	2400b078 	.word	0x2400b078
 80063d0:	52005000 	.word	0x52005000

080063d4 <MX_MDMA_Init>:

/**
  * Enable MDMA controller clock
  */
static void MX_MDMA_Init(void)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b082      	sub	sp, #8
 80063d8:	af00      	add	r7, sp, #0

  /* MDMA controller clock enable */
  __HAL_RCC_MDMA_CLK_ENABLE();
 80063da:	4b0d      	ldr	r3, [pc, #52]	; (8006410 <MX_MDMA_Init+0x3c>)
 80063dc:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80063e0:	4a0b      	ldr	r2, [pc, #44]	; (8006410 <MX_MDMA_Init+0x3c>)
 80063e2:	f043 0301 	orr.w	r3, r3, #1
 80063e6:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 80063ea:	4b09      	ldr	r3, [pc, #36]	; (8006410 <MX_MDMA_Init+0x3c>)
 80063ec:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80063f0:	f003 0301 	and.w	r3, r3, #1
 80063f4:	607b      	str	r3, [r7, #4]
 80063f6:	687b      	ldr	r3, [r7, #4]
  /* Local variables */

  /* MDMA interrupt initialization */
  /* MDMA_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
 80063f8:	2200      	movs	r2, #0
 80063fa:	2105      	movs	r1, #5
 80063fc:	207a      	movs	r0, #122	; 0x7a
 80063fe:	f005 fcbb 	bl	800bd78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 8006402:	207a      	movs	r0, #122	; 0x7a
 8006404:	f005 fcd2 	bl	800bdac <HAL_NVIC_EnableIRQ>

}
 8006408:	bf00      	nop
 800640a:	3708      	adds	r7, #8
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}
 8006410:	58024400 	.word	0x58024400

08006414 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b088      	sub	sp, #32
 8006418:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800641a:	1d3b      	adds	r3, r7, #4
 800641c:	2200      	movs	r2, #0
 800641e:	601a      	str	r2, [r3, #0]
 8006420:	605a      	str	r2, [r3, #4]
 8006422:	609a      	str	r2, [r3, #8]
 8006424:	60da      	str	r2, [r3, #12]
 8006426:	611a      	str	r2, [r3, #16]
 8006428:	615a      	str	r2, [r3, #20]
 800642a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800642c:	4b20      	ldr	r3, [pc, #128]	; (80064b0 <MX_FMC_Init+0x9c>)
 800642e:	4a21      	ldr	r2, [pc, #132]	; (80064b4 <MX_FMC_Init+0xa0>)
 8006430:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8006432:	4b1f      	ldr	r3, [pc, #124]	; (80064b0 <MX_FMC_Init+0x9c>)
 8006434:	2201      	movs	r2, #1
 8006436:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8006438:	4b1d      	ldr	r3, [pc, #116]	; (80064b0 <MX_FMC_Init+0x9c>)
 800643a:	2201      	movs	r2, #1
 800643c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800643e:	4b1c      	ldr	r3, [pc, #112]	; (80064b0 <MX_FMC_Init+0x9c>)
 8006440:	2204      	movs	r2, #4
 8006442:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8006444:	4b1a      	ldr	r3, [pc, #104]	; (80064b0 <MX_FMC_Init+0x9c>)
 8006446:	2210      	movs	r2, #16
 8006448:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800644a:	4b19      	ldr	r3, [pc, #100]	; (80064b0 <MX_FMC_Init+0x9c>)
 800644c:	2240      	movs	r2, #64	; 0x40
 800644e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8006450:	4b17      	ldr	r3, [pc, #92]	; (80064b0 <MX_FMC_Init+0x9c>)
 8006452:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006456:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8006458:	4b15      	ldr	r3, [pc, #84]	; (80064b0 <MX_FMC_Init+0x9c>)
 800645a:	2200      	movs	r2, #0
 800645c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_3;
 800645e:	4b14      	ldr	r3, [pc, #80]	; (80064b0 <MX_FMC_Init+0x9c>)
 8006460:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8006464:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8006466:	4b12      	ldr	r3, [pc, #72]	; (80064b0 <MX_FMC_Init+0x9c>)
 8006468:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800646c:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_2;
 800646e:	4b10      	ldr	r3, [pc, #64]	; (80064b0 <MX_FMC_Init+0x9c>)
 8006470:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006474:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8006476:	2302      	movs	r3, #2
 8006478:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 800647a:	2307      	movs	r3, #7
 800647c:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 800647e:	2304      	movs	r3, #4
 8006480:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8006482:	2307      	movs	r3, #7
 8006484:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8006486:	2303      	movs	r3, #3
 8006488:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 800648a:	2302      	movs	r3, #2
 800648c:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 800648e:	2302      	movs	r3, #2
 8006490:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8006492:	1d3b      	adds	r3, r7, #4
 8006494:	4619      	mov	r1, r3
 8006496:	4806      	ldr	r0, [pc, #24]	; (80064b0 <MX_FMC_Init+0x9c>)
 8006498:	f00d fb98 	bl	8013bcc <HAL_SDRAM_Init>
 800649c:	4603      	mov	r3, r0
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d001      	beq.n	80064a6 <MX_FMC_Init+0x92>
  {
    Error_Handler( );
 80064a2:	f000 f9e5 	bl	8006870 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80064a6:	bf00      	nop
 80064a8:	3720      	adds	r7, #32
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}
 80064ae:	bf00      	nop
 80064b0:	2400b0d4 	.word	0x2400b0d4
 80064b4:	52004140 	.word	0x52004140

080064b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b08e      	sub	sp, #56	; 0x38
 80064bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80064be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80064c2:	2200      	movs	r2, #0
 80064c4:	601a      	str	r2, [r3, #0]
 80064c6:	605a      	str	r2, [r3, #4]
 80064c8:	609a      	str	r2, [r3, #8]
 80064ca:	60da      	str	r2, [r3, #12]
 80064cc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80064ce:	4b80      	ldr	r3, [pc, #512]	; (80066d0 <MX_GPIO_Init+0x218>)
 80064d0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80064d4:	4a7e      	ldr	r2, [pc, #504]	; (80066d0 <MX_GPIO_Init+0x218>)
 80064d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064da:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80064de:	4b7c      	ldr	r3, [pc, #496]	; (80066d0 <MX_GPIO_Init+0x218>)
 80064e0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80064e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064e8:	623b      	str	r3, [r7, #32]
 80064ea:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80064ec:	4b78      	ldr	r3, [pc, #480]	; (80066d0 <MX_GPIO_Init+0x218>)
 80064ee:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80064f2:	4a77      	ldr	r2, [pc, #476]	; (80066d0 <MX_GPIO_Init+0x218>)
 80064f4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80064f8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80064fc:	4b74      	ldr	r3, [pc, #464]	; (80066d0 <MX_GPIO_Init+0x218>)
 80064fe:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006502:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006506:	61fb      	str	r3, [r7, #28]
 8006508:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800650a:	4b71      	ldr	r3, [pc, #452]	; (80066d0 <MX_GPIO_Init+0x218>)
 800650c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006510:	4a6f      	ldr	r2, [pc, #444]	; (80066d0 <MX_GPIO_Init+0x218>)
 8006512:	f043 0308 	orr.w	r3, r3, #8
 8006516:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800651a:	4b6d      	ldr	r3, [pc, #436]	; (80066d0 <MX_GPIO_Init+0x218>)
 800651c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006520:	f003 0308 	and.w	r3, r3, #8
 8006524:	61bb      	str	r3, [r7, #24]
 8006526:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006528:	4b69      	ldr	r3, [pc, #420]	; (80066d0 <MX_GPIO_Init+0x218>)
 800652a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800652e:	4a68      	ldr	r2, [pc, #416]	; (80066d0 <MX_GPIO_Init+0x218>)
 8006530:	f043 0310 	orr.w	r3, r3, #16
 8006534:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8006538:	4b65      	ldr	r3, [pc, #404]	; (80066d0 <MX_GPIO_Init+0x218>)
 800653a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800653e:	f003 0310 	and.w	r3, r3, #16
 8006542:	617b      	str	r3, [r7, #20]
 8006544:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8006546:	4b62      	ldr	r3, [pc, #392]	; (80066d0 <MX_GPIO_Init+0x218>)
 8006548:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800654c:	4a60      	ldr	r2, [pc, #384]	; (80066d0 <MX_GPIO_Init+0x218>)
 800654e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006552:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8006556:	4b5e      	ldr	r3, [pc, #376]	; (80066d0 <MX_GPIO_Init+0x218>)
 8006558:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800655c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006560:	613b      	str	r3, [r7, #16]
 8006562:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006564:	4b5a      	ldr	r3, [pc, #360]	; (80066d0 <MX_GPIO_Init+0x218>)
 8006566:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800656a:	4a59      	ldr	r2, [pc, #356]	; (80066d0 <MX_GPIO_Init+0x218>)
 800656c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006570:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8006574:	4b56      	ldr	r3, [pc, #344]	; (80066d0 <MX_GPIO_Init+0x218>)
 8006576:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800657a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800657e:	60fb      	str	r3, [r7, #12]
 8006580:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8006582:	4b53      	ldr	r3, [pc, #332]	; (80066d0 <MX_GPIO_Init+0x218>)
 8006584:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006588:	4a51      	ldr	r2, [pc, #324]	; (80066d0 <MX_GPIO_Init+0x218>)
 800658a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800658e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8006592:	4b4f      	ldr	r3, [pc, #316]	; (80066d0 <MX_GPIO_Init+0x218>)
 8006594:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006598:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800659c:	60bb      	str	r3, [r7, #8]
 800659e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80065a0:	4b4b      	ldr	r3, [pc, #300]	; (80066d0 <MX_GPIO_Init+0x218>)
 80065a2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80065a6:	4a4a      	ldr	r2, [pc, #296]	; (80066d0 <MX_GPIO_Init+0x218>)
 80065a8:	f043 0320 	orr.w	r3, r3, #32
 80065ac:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80065b0:	4b47      	ldr	r3, [pc, #284]	; (80066d0 <MX_GPIO_Init+0x218>)
 80065b2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80065b6:	f003 0320 	and.w	r3, r3, #32
 80065ba:	607b      	str	r3, [r7, #4]
 80065bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80065be:	4b44      	ldr	r3, [pc, #272]	; (80066d0 <MX_GPIO_Init+0x218>)
 80065c0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80065c4:	4a42      	ldr	r2, [pc, #264]	; (80066d0 <MX_GPIO_Init+0x218>)
 80065c6:	f043 0301 	orr.w	r3, r3, #1
 80065ca:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80065ce:	4b40      	ldr	r3, [pc, #256]	; (80066d0 <MX_GPIO_Init+0x218>)
 80065d0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80065d4:	f003 0301 	and.w	r3, r3, #1
 80065d8:	603b      	str	r3, [r7, #0]
 80065da:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LED3_Pin|LED2_Pin, GPIO_PIN_SET);
 80065dc:	2201      	movs	r2, #1
 80065de:	f640 0104 	movw	r1, #2052	; 0x804
 80065e2:	483c      	ldr	r0, [pc, #240]	; (80066d4 <MX_GPIO_Init+0x21c>)
 80065e4:	f006 fa60 	bl	800caa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, VSYNC_FREQ_Pin|RENDER_TIME_Pin|MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 80065e8:	2200      	movs	r2, #0
 80065ea:	f44f 41c4 	mov.w	r1, #25088	; 0x6200
 80065ee:	483a      	ldr	r0, [pc, #232]	; (80066d8 <MX_GPIO_Init+0x220>)
 80065f0:	f006 fa5a 	bl	800caa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, GPIO_PIN_RESET);
 80065f4:	2200      	movs	r2, #0
 80065f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80065fa:	4838      	ldr	r0, [pc, #224]	; (80066dc <MX_GPIO_Init+0x224>)
 80065fc:	f006 fa54 	bl	800caa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_BL_CTRL_Pin|LCD_ON_OFF_Pin, GPIO_PIN_RESET);
 8006600:	2200      	movs	r2, #0
 8006602:	2106      	movs	r1, #6
 8006604:	4836      	ldr	r0, [pc, #216]	; (80066e0 <MX_GPIO_Init+0x228>)
 8006606:	f006 fa4f 	bl	800caa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED3_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin;
 800660a:	f640 0304 	movw	r3, #2052	; 0x804
 800660e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006610:	2301      	movs	r3, #1
 8006612:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006614:	2300      	movs	r3, #0
 8006616:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006618:	2300      	movs	r3, #0
 800661a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800661c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006620:	4619      	mov	r1, r3
 8006622:	482c      	ldr	r0, [pc, #176]	; (80066d4 <MX_GPIO_Init+0x21c>)
 8006624:	f005 ff6e 	bl	800c504 <HAL_GPIO_Init>

  /*Configure GPIO pins : VSYNC_FREQ_Pin RENDER_TIME_Pin MCU_ACTIVE_Pin */
  GPIO_InitStruct.Pin = VSYNC_FREQ_Pin|RENDER_TIME_Pin|MCU_ACTIVE_Pin;
 8006628:	f44f 43c4 	mov.w	r3, #25088	; 0x6200
 800662c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800662e:	2301      	movs	r3, #1
 8006630:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006632:	2300      	movs	r3, #0
 8006634:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006636:	2303      	movs	r3, #3
 8006638:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800663a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800663e:	4619      	mov	r1, r3
 8006640:	4825      	ldr	r0, [pc, #148]	; (80066d8 <MX_GPIO_Init+0x220>)
 8006642:	f005 ff5f 	bl	800c504 <HAL_GPIO_Init>

  /*Configure GPIO pin : FRAME_RATE_Pin */
  GPIO_InitStruct.Pin = FRAME_RATE_Pin;
 8006646:	f44f 7300 	mov.w	r3, #512	; 0x200
 800664a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800664c:	2301      	movs	r3, #1
 800664e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006650:	2300      	movs	r3, #0
 8006652:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006654:	2303      	movs	r3, #3
 8006656:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(FRAME_RATE_GPIO_Port, &GPIO_InitStruct);
 8006658:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800665c:	4619      	mov	r1, r3
 800665e:	481f      	ldr	r0, [pc, #124]	; (80066dc <MX_GPIO_Init+0x224>)
 8006660:	f005 ff50 	bl	800c504 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8006664:	2304      	movs	r3, #4
 8006666:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006668:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800666c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800666e:	2301      	movs	r3, #1
 8006670:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8006672:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006676:	4619      	mov	r1, r3
 8006678:	4817      	ldr	r0, [pc, #92]	; (80066d8 <MX_GPIO_Init+0x220>)
 800667a:	f005 ff43 	bl	800c504 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 800667e:	2302      	movs	r3, #2
 8006680:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006682:	2301      	movs	r3, #1
 8006684:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006686:	2300      	movs	r3, #0
 8006688:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800668a:	2300      	movs	r3, #0
 800668c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800668e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006692:	4619      	mov	r1, r3
 8006694:	4812      	ldr	r0, [pc, #72]	; (80066e0 <MX_GPIO_Init+0x228>)
 8006696:	f005 ff35 	bl	800c504 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_ON_OFF_Pin */
  GPIO_InitStruct.Pin = LCD_ON_OFF_Pin;
 800669a:	2304      	movs	r3, #4
 800669c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800669e:	2301      	movs	r3, #1
 80066a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80066a2:	2301      	movs	r3, #1
 80066a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80066a6:	2300      	movs	r3, #0
 80066a8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_ON_OFF_GPIO_Port, &GPIO_InitStruct);
 80066aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80066ae:	4619      	mov	r1, r3
 80066b0:	480b      	ldr	r0, [pc, #44]	; (80066e0 <MX_GPIO_Init+0x228>)
 80066b2:	f005 ff27 	bl	800c504 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 80066b6:	2200      	movs	r2, #0
 80066b8:	2105      	movs	r1, #5
 80066ba:	2008      	movs	r0, #8
 80066bc:	f005 fb5c 	bl	800bd78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80066c0:	2008      	movs	r0, #8
 80066c2:	f005 fb73 	bl	800bdac <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80066c6:	bf00      	nop
 80066c8:	3738      	adds	r7, #56	; 0x38
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}
 80066ce:	bf00      	nop
 80066d0:	58024400 	.word	0x58024400
 80066d4:	58021800 	.word	0x58021800
 80066d8:	58021c00 	.word	0x58021c00
 80066dc:	58022000 	.word	0x58022000
 80066e0:	58020000 	.word	0x58020000

080066e4 <SDRAM_Initialization_Sequence>:

/* USER CODE BEGIN 4 */
static void SDRAM_Initialization_Sequence(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b084      	sub	sp, #16
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
 80066ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmpmrd =0;
 80066ee:	2300      	movs	r3, #0
 80066f0:	60fb      	str	r3, [r7, #12]
  /* Step 1:  Configure a clock configuration enable command */
  Command->CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	2201      	movs	r2, #1
 80066f6:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	2208      	movs	r2, #8
 80066fc:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 1;
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	2201      	movs	r2, #1
 8006702:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = 0;
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	2200      	movs	r2, #0
 8006708:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 800670a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800670e:	6839      	ldr	r1, [r7, #0]
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f00d fa97 	bl	8013c44 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8006716:	2001      	movs	r0, #1
 8006718:	f005 fa2e 	bl	800bb78 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */
  Command->CommandMode = FMC_SDRAM_CMD_PALL;
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	2202      	movs	r2, #2
 8006720:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	2208      	movs	r2, #8
 8006726:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 1;
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	2201      	movs	r2, #1
 800672c:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = 0;
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	2200      	movs	r2, #0
 8006732:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8006734:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006738:	6839      	ldr	r1, [r7, #0]
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f00d fa82 	bl	8013c44 <HAL_SDRAM_SendCommand>

  /* Step 4 : Configure a Auto-Refresh command */
  Command->CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	2203      	movs	r2, #3
 8006744:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	2208      	movs	r2, #8
 800674a:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 8;
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	2208      	movs	r2, #8
 8006750:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = 0;
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	2200      	movs	r2, #0
 8006756:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8006758:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800675c:	6839      	ldr	r1, [r7, #0]
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f00d fa70 	bl	8013c44 <HAL_SDRAM_SendCommand>

  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8006764:	f44f 7308 	mov.w	r3, #544	; 0x220
 8006768:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_2           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command->CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	2204      	movs	r2, #4
 800676e:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	2208      	movs	r2, #8
 8006774:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 1;
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	2201      	movs	r2, #1
 800677a:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = tmpmrd;
 800677c:	68fa      	ldr	r2, [r7, #12]
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8006782:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006786:	6839      	ldr	r1, [r7, #0]
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	f00d fa5b 	bl	8013c44 <HAL_SDRAM_SendCommand>

  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(hsdram, REFRESH_COUNT); 
 800678e:	f240 6103 	movw	r1, #1539	; 0x603
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f00d fa8b 	bl	8013cae <HAL_SDRAM_ProgramRefreshRate>

}
 8006798:	bf00      	nop
 800679a:	3710      	adds	r7, #16
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}

080067a0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b082      	sub	sp, #8
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
 80067a8:	2064      	movs	r0, #100	; 0x64
 80067aa:	f00d ffa3 	bl	80146f4 <osDelay>
 80067ae:	e7fb      	b.n	80067a8 <StartDefaultTask+0x8>

080067b0 <MPU_Config>:
}

/* MPU Configuration */

void MPU_Config(void)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b084      	sub	sp, #16
 80067b4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80067b6:	463b      	mov	r3, r7
 80067b8:	2200      	movs	r2, #0
 80067ba:	601a      	str	r2, [r3, #0]
 80067bc:	605a      	str	r2, [r3, #4]
 80067be:	609a      	str	r2, [r3, #8]
 80067c0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80067c2:	f005 fb0f 	bl	800bde4 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80067c6:	2301      	movs	r3, #1
 80067c8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80067ca:	2300      	movs	r3, #0
 80067cc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x90000000;
 80067ce:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 80067d2:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 80067d4:	231b      	movs	r3, #27
 80067d6:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 80067d8:	2300      	movs	r3, #0
 80067da:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80067dc:	2300      	movs	r3, #0
 80067de:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80067e0:	2300      	movs	r3, #0
 80067e2:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80067e4:	2301      	movs	r3, #1
 80067e6:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 80067e8:	2300      	movs	r3, #0
 80067ea:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80067ec:	2300      	movs	r3, #0
 80067ee:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80067f0:	2300      	movs	r3, #0
 80067f2:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80067f4:	463b      	mov	r3, r7
 80067f6:	4618      	mov	r0, r3
 80067f8:	f005 fb2c 	bl	800be54 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 80067fc:	2301      	movs	r3, #1
 80067fe:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
 8006800:	2319      	movs	r3, #25
 8006802:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8006804:	2303      	movs	r3, #3
 8006806:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8006808:	2301      	movs	r3, #1
 800680a:	73bb      	strb	r3, [r7, #14]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800680c:	463b      	mov	r3, r7
 800680e:	4618      	mov	r0, r3
 8006810:	f005 fb20 	bl	800be54 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8006814:	2302      	movs	r3, #2
 8006816:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x24000000;
 8006818:	f04f 5310 	mov.w	r3, #603979776	; 0x24000000
 800681c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_1MB;
 800681e:	2313      	movs	r3, #19
 8006820:	723b      	strb	r3, [r7, #8]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8006822:	463b      	mov	r3, r7
 8006824:	4618      	mov	r0, r3
 8006826:	f005 fb15 	bl	800be54 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 800682a:	2303      	movs	r3, #3
 800682c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 800682e:	2311      	movs	r3, #17
 8006830:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8006832:	2301      	movs	r3, #1
 8006834:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8006836:	463b      	mov	r3, r7
 8006838:	4618      	mov	r0, r3
 800683a:	f005 fb0b 	bl	800be54 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800683e:	2004      	movs	r0, #4
 8006840:	f005 fae8 	bl	800be14 <HAL_MPU_Enable>

}
 8006844:	bf00      	nop
 8006846:	3710      	adds	r7, #16
 8006848:	46bd      	mov	sp, r7
 800684a:	bd80      	pop	{r7, pc}

0800684c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b082      	sub	sp, #8
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4a04      	ldr	r2, [pc, #16]	; (800686c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d101      	bne.n	8006862 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800685e:	f005 f96b 	bl	800bb38 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8006862:	bf00      	nop
 8006864:	3708      	adds	r7, #8
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}
 800686a:	bf00      	nop
 800686c:	40001000 	.word	0x40001000

08006870 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006870:	b480      	push	{r7}
 8006872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8006874:	bf00      	nop
 8006876:	46bd      	mov	sp, r7
 8006878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687c:	4770      	bx	lr
	...

08006880 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b082      	sub	sp, #8
 8006884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006886:	4b0c      	ldr	r3, [pc, #48]	; (80068b8 <HAL_MspInit+0x38>)
 8006888:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800688c:	4a0a      	ldr	r2, [pc, #40]	; (80068b8 <HAL_MspInit+0x38>)
 800688e:	f043 0302 	orr.w	r3, r3, #2
 8006892:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8006896:	4b08      	ldr	r3, [pc, #32]	; (80068b8 <HAL_MspInit+0x38>)
 8006898:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800689c:	f003 0302 	and.w	r3, r3, #2
 80068a0:	607b      	str	r3, [r7, #4]
 80068a2:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80068a4:	2200      	movs	r2, #0
 80068a6:	210f      	movs	r1, #15
 80068a8:	f06f 0001 	mvn.w	r0, #1
 80068ac:	f005 fa64 	bl	800bd78 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80068b0:	bf00      	nop
 80068b2:	3708      	adds	r7, #8
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bd80      	pop	{r7, pc}
 80068b8:	58024400 	.word	0x58024400

080068bc <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80068bc:	b480      	push	{r7}
 80068be:	b085      	sub	sp, #20
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a0b      	ldr	r2, [pc, #44]	; (80068f8 <HAL_CRC_MspInit+0x3c>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d10e      	bne.n	80068ec <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80068ce:	4b0b      	ldr	r3, [pc, #44]	; (80068fc <HAL_CRC_MspInit+0x40>)
 80068d0:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80068d4:	4a09      	ldr	r2, [pc, #36]	; (80068fc <HAL_CRC_MspInit+0x40>)
 80068d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80068da:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 80068de:	4b07      	ldr	r3, [pc, #28]	; (80068fc <HAL_CRC_MspInit+0x40>)
 80068e0:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80068e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80068e8:	60fb      	str	r3, [r7, #12]
 80068ea:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80068ec:	bf00      	nop
 80068ee:	3714      	adds	r7, #20
 80068f0:	46bd      	mov	sp, r7
 80068f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f6:	4770      	bx	lr
 80068f8:	40023000 	.word	0x40023000
 80068fc:	58024400 	.word	0x58024400

08006900 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b084      	sub	sp, #16
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4a0e      	ldr	r2, [pc, #56]	; (8006948 <HAL_DMA2D_MspInit+0x48>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d116      	bne.n	8006940 <HAL_DMA2D_MspInit+0x40>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8006912:	4b0e      	ldr	r3, [pc, #56]	; (800694c <HAL_DMA2D_MspInit+0x4c>)
 8006914:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8006918:	4a0c      	ldr	r2, [pc, #48]	; (800694c <HAL_DMA2D_MspInit+0x4c>)
 800691a:	f043 0310 	orr.w	r3, r3, #16
 800691e:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 8006922:	4b0a      	ldr	r3, [pc, #40]	; (800694c <HAL_DMA2D_MspInit+0x4c>)
 8006924:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8006928:	f003 0310 	and.w	r3, r3, #16
 800692c:	60fb      	str	r3, [r7, #12]
 800692e:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8006930:	2200      	movs	r2, #0
 8006932:	2105      	movs	r1, #5
 8006934:	205a      	movs	r0, #90	; 0x5a
 8006936:	f005 fa1f 	bl	800bd78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800693a:	205a      	movs	r0, #90	; 0x5a
 800693c:	f005 fa36 	bl	800bdac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8006940:	bf00      	nop
 8006942:	3710      	adds	r7, #16
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}
 8006948:	52001000 	.word	0x52001000
 800694c:	58024400 	.word	0x58024400

08006950 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b0ba      	sub	sp, #232	; 0xe8
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006958:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800695c:	2200      	movs	r2, #0
 800695e:	601a      	str	r2, [r3, #0]
 8006960:	605a      	str	r2, [r3, #4]
 8006962:	609a      	str	r2, [r3, #8]
 8006964:	60da      	str	r2, [r3, #12]
 8006966:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006968:	f107 0310 	add.w	r3, r7, #16
 800696c:	22c0      	movs	r2, #192	; 0xc0
 800696e:	2100      	movs	r1, #0
 8006970:	4618      	mov	r0, r3
 8006972:	f01f fd83 	bl	802647c <memset>
  if(hi2c->Instance==I2C4)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4a27      	ldr	r2, [pc, #156]	; (8006a18 <HAL_I2C_MspInit+0xc8>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d146      	bne.n	8006a0e <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8006980:	f04f 0210 	mov.w	r2, #16
 8006984:	f04f 0300 	mov.w	r3, #0
 8006988:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 800698c:	2300      	movs	r3, #0
 800698e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006992:	f107 0310 	add.w	r3, r7, #16
 8006996:	4618      	mov	r0, r3
 8006998:	f00b fdf6 	bl	8012588 <HAL_RCCEx_PeriphCLKConfig>
 800699c:	4603      	mov	r3, r0
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d001      	beq.n	80069a6 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80069a2:	f7ff ff65 	bl	8006870 <Error_Handler>
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80069a6:	4b1d      	ldr	r3, [pc, #116]	; (8006a1c <HAL_I2C_MspInit+0xcc>)
 80069a8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80069ac:	4a1b      	ldr	r2, [pc, #108]	; (8006a1c <HAL_I2C_MspInit+0xcc>)
 80069ae:	f043 0308 	orr.w	r3, r3, #8
 80069b2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80069b6:	4b19      	ldr	r3, [pc, #100]	; (8006a1c <HAL_I2C_MspInit+0xcc>)
 80069b8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80069bc:	f003 0308 	and.w	r3, r3, #8
 80069c0:	60fb      	str	r3, [r7, #12]
 80069c2:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PD13     ------> I2C4_SDA
    PD12     ------> I2C4_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12;
 80069c4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80069c8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80069cc:	2312      	movs	r3, #18
 80069ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80069d2:	2301      	movs	r3, #1
 80069d4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80069d8:	2302      	movs	r3, #2
 80069da:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80069de:	2304      	movs	r3, #4
 80069e0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80069e4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80069e8:	4619      	mov	r1, r3
 80069ea:	480d      	ldr	r0, [pc, #52]	; (8006a20 <HAL_I2C_MspInit+0xd0>)
 80069ec:	f005 fd8a 	bl	800c504 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 80069f0:	4b0a      	ldr	r3, [pc, #40]	; (8006a1c <HAL_I2C_MspInit+0xcc>)
 80069f2:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80069f6:	4a09      	ldr	r2, [pc, #36]	; (8006a1c <HAL_I2C_MspInit+0xcc>)
 80069f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069fc:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8006a00:	4b06      	ldr	r3, [pc, #24]	; (8006a1c <HAL_I2C_MspInit+0xcc>)
 8006a02:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8006a06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a0a:	60bb      	str	r3, [r7, #8]
 8006a0c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8006a0e:	bf00      	nop
 8006a10:	37e8      	adds	r7, #232	; 0xe8
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}
 8006a16:	bf00      	nop
 8006a18:	58001c00 	.word	0x58001c00
 8006a1c:	58024400 	.word	0x58024400
 8006a20:	58020c00 	.word	0x58020c00

08006a24 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b082      	sub	sp, #8
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C4)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a0c      	ldr	r2, [pc, #48]	; (8006a64 <HAL_I2C_MspDeInit+0x40>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d111      	bne.n	8006a5a <HAL_I2C_MspDeInit+0x36>
  {
  /* USER CODE BEGIN I2C4_MspDeInit 0 */

  /* USER CODE END I2C4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C4_CLK_DISABLE();
 8006a36:	4b0c      	ldr	r3, [pc, #48]	; (8006a68 <HAL_I2C_MspDeInit+0x44>)
 8006a38:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8006a3c:	4a0a      	ldr	r2, [pc, #40]	; (8006a68 <HAL_I2C_MspDeInit+0x44>)
 8006a3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a42:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154

    /**I2C4 GPIO Configuration
    PD13     ------> I2C4_SDA
    PD12     ------> I2C4_SCL
    */
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_13);
 8006a46:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006a4a:	4808      	ldr	r0, [pc, #32]	; (8006a6c <HAL_I2C_MspDeInit+0x48>)
 8006a4c:	f005 ff0a 	bl	800c864 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_12);
 8006a50:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006a54:	4805      	ldr	r0, [pc, #20]	; (8006a6c <HAL_I2C_MspDeInit+0x48>)
 8006a56:	f005 ff05 	bl	800c864 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C4_MspDeInit 1 */

  /* USER CODE END I2C4_MspDeInit 1 */
  }

}
 8006a5a:	bf00      	nop
 8006a5c:	3708      	adds	r7, #8
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}
 8006a62:	bf00      	nop
 8006a64:	58001c00 	.word	0x58001c00
 8006a68:	58024400 	.word	0x58024400
 8006a6c:	58020c00 	.word	0x58020c00

08006a70 <HAL_JPEG_MspInit>:
* This function configures the hardware resources used in this example
* @param hjpeg: JPEG handle pointer
* @retval None
*/
void HAL_JPEG_MspInit(JPEG_HandleTypeDef* hjpeg)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b084      	sub	sp, #16
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
  if(hjpeg->Instance==JPEG)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a57      	ldr	r2, [pc, #348]	; (8006bdc <HAL_JPEG_MspInit+0x16c>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	f040 80a7 	bne.w	8006bd2 <HAL_JPEG_MspInit+0x162>
  {
  /* USER CODE BEGIN JPEG_MspInit 0 */

  /* USER CODE END JPEG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
 8006a84:	4b56      	ldr	r3, [pc, #344]	; (8006be0 <HAL_JPEG_MspInit+0x170>)
 8006a86:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8006a8a:	4a55      	ldr	r2, [pc, #340]	; (8006be0 <HAL_JPEG_MspInit+0x170>)
 8006a8c:	f043 0320 	orr.w	r3, r3, #32
 8006a90:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 8006a94:	4b52      	ldr	r3, [pc, #328]	; (8006be0 <HAL_JPEG_MspInit+0x170>)
 8006a96:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8006a9a:	f003 0320 	and.w	r3, r3, #32
 8006a9e:	60fb      	str	r3, [r7, #12]
 8006aa0:	68fb      	ldr	r3, [r7, #12]

    /* JPEG MDMA Init */
    /* JPEG_INFIFO_TH Init */
    hmdma_jpeg_infifo_th.Instance = MDMA_Channel7;
 8006aa2:	4b50      	ldr	r3, [pc, #320]	; (8006be4 <HAL_JPEG_MspInit+0x174>)
 8006aa4:	4a50      	ldr	r2, [pc, #320]	; (8006be8 <HAL_JPEG_MspInit+0x178>)
 8006aa6:	601a      	str	r2, [r3, #0]
    hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
 8006aa8:	4b4e      	ldr	r3, [pc, #312]	; (8006be4 <HAL_JPEG_MspInit+0x174>)
 8006aaa:	2211      	movs	r2, #17
 8006aac:	605a      	str	r2, [r3, #4]
    hmdma_jpeg_infifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 8006aae:	4b4d      	ldr	r3, [pc, #308]	; (8006be4 <HAL_JPEG_MspInit+0x174>)
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	609a      	str	r2, [r3, #8]
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_HIGH;
 8006ab4:	4b4b      	ldr	r3, [pc, #300]	; (8006be4 <HAL_JPEG_MspInit+0x174>)
 8006ab6:	2280      	movs	r2, #128	; 0x80
 8006ab8:	60da      	str	r2, [r3, #12]
    hmdma_jpeg_infifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8006aba:	4b4a      	ldr	r3, [pc, #296]	; (8006be4 <HAL_JPEG_MspInit+0x174>)
 8006abc:	2200      	movs	r2, #0
 8006abe:	611a      	str	r2, [r3, #16]
    hmdma_jpeg_infifo_th.Init.SourceInc = MDMA_SRC_INC_BYTE;
 8006ac0:	4b48      	ldr	r3, [pc, #288]	; (8006be4 <HAL_JPEG_MspInit+0x174>)
 8006ac2:	2202      	movs	r2, #2
 8006ac4:	615a      	str	r2, [r3, #20]
    hmdma_jpeg_infifo_th.Init.DestinationInc = MDMA_DEST_INC_DISABLE;
 8006ac6:	4b47      	ldr	r3, [pc, #284]	; (8006be4 <HAL_JPEG_MspInit+0x174>)
 8006ac8:	2200      	movs	r2, #0
 8006aca:	619a      	str	r2, [r3, #24]
    hmdma_jpeg_infifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_BYTE;
 8006acc:	4b45      	ldr	r3, [pc, #276]	; (8006be4 <HAL_JPEG_MspInit+0x174>)
 8006ace:	2200      	movs	r2, #0
 8006ad0:	61da      	str	r2, [r3, #28]
    hmdma_jpeg_infifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
 8006ad2:	4b44      	ldr	r3, [pc, #272]	; (8006be4 <HAL_JPEG_MspInit+0x174>)
 8006ad4:	2280      	movs	r2, #128	; 0x80
 8006ad6:	621a      	str	r2, [r3, #32]
    hmdma_jpeg_infifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8006ad8:	4b42      	ldr	r3, [pc, #264]	; (8006be4 <HAL_JPEG_MspInit+0x174>)
 8006ada:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006ade:	625a      	str	r2, [r3, #36]	; 0x24
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
 8006ae0:	4b40      	ldr	r3, [pc, #256]	; (8006be4 <HAL_JPEG_MspInit+0x174>)
 8006ae2:	2220      	movs	r2, #32
 8006ae4:	629a      	str	r2, [r3, #40]	; 0x28
    hmdma_jpeg_infifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_32BEATS;
 8006ae6:	4b3f      	ldr	r3, [pc, #252]	; (8006be4 <HAL_JPEG_MspInit+0x174>)
 8006ae8:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 8006aec:	62da      	str	r2, [r3, #44]	; 0x2c
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_16BEATS;
 8006aee:	4b3d      	ldr	r3, [pc, #244]	; (8006be4 <HAL_JPEG_MspInit+0x174>)
 8006af0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006af4:	631a      	str	r2, [r3, #48]	; 0x30
    hmdma_jpeg_infifo_th.Init.SourceBlockAddressOffset = 0;
 8006af6:	4b3b      	ldr	r3, [pc, #236]	; (8006be4 <HAL_JPEG_MspInit+0x174>)
 8006af8:	2200      	movs	r2, #0
 8006afa:	635a      	str	r2, [r3, #52]	; 0x34
    hmdma_jpeg_infifo_th.Init.DestBlockAddressOffset = 0;
 8006afc:	4b39      	ldr	r3, [pc, #228]	; (8006be4 <HAL_JPEG_MspInit+0x174>)
 8006afe:	2200      	movs	r2, #0
 8006b00:	639a      	str	r2, [r3, #56]	; 0x38
    if (HAL_MDMA_Init(&hmdma_jpeg_infifo_th) != HAL_OK)
 8006b02:	4838      	ldr	r0, [pc, #224]	; (8006be4 <HAL_JPEG_MspInit+0x174>)
 8006b04:	f009 f988 	bl	800fe18 <HAL_MDMA_Init>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d001      	beq.n	8006b12 <HAL_JPEG_MspInit+0xa2>
    {
      Error_Handler();
 8006b0e:	f7ff feaf 	bl	8006870 <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_infifo_th, 0, 0) != HAL_OK)
 8006b12:	2200      	movs	r2, #0
 8006b14:	2100      	movs	r1, #0
 8006b16:	4833      	ldr	r0, [pc, #204]	; (8006be4 <HAL_JPEG_MspInit+0x174>)
 8006b18:	f009 f9ca 	bl	800feb0 <HAL_MDMA_ConfigPostRequestMask>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d001      	beq.n	8006b26 <HAL_JPEG_MspInit+0xb6>
    {
      Error_Handler();
 8006b22:	f7ff fea5 	bl	8006870 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmain,hmdma_jpeg_infifo_th);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	4a2e      	ldr	r2, [pc, #184]	; (8006be4 <HAL_JPEG_MspInit+0x174>)
 8006b2a:	631a      	str	r2, [r3, #48]	; 0x30
 8006b2c:	4a2d      	ldr	r2, [pc, #180]	; (8006be4 <HAL_JPEG_MspInit+0x174>)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6413      	str	r3, [r2, #64]	; 0x40

    /* JPEG_OUTFIFO_TH Init */
    hmdma_jpeg_outfifo_th.Instance = MDMA_Channel6;
 8006b32:	4b2e      	ldr	r3, [pc, #184]	; (8006bec <HAL_JPEG_MspInit+0x17c>)
 8006b34:	4a2e      	ldr	r2, [pc, #184]	; (8006bf0 <HAL_JPEG_MspInit+0x180>)
 8006b36:	601a      	str	r2, [r3, #0]
    hmdma_jpeg_outfifo_th.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_TH;
 8006b38:	4b2c      	ldr	r3, [pc, #176]	; (8006bec <HAL_JPEG_MspInit+0x17c>)
 8006b3a:	2213      	movs	r2, #19
 8006b3c:	605a      	str	r2, [r3, #4]
    hmdma_jpeg_outfifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 8006b3e:	4b2b      	ldr	r3, [pc, #172]	; (8006bec <HAL_JPEG_MspInit+0x17c>)
 8006b40:	2200      	movs	r2, #0
 8006b42:	609a      	str	r2, [r3, #8]
    hmdma_jpeg_outfifo_th.Init.Priority = MDMA_PRIORITY_VERY_HIGH;
 8006b44:	4b29      	ldr	r3, [pc, #164]	; (8006bec <HAL_JPEG_MspInit+0x17c>)
 8006b46:	22c0      	movs	r2, #192	; 0xc0
 8006b48:	60da      	str	r2, [r3, #12]
    hmdma_jpeg_outfifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8006b4a:	4b28      	ldr	r3, [pc, #160]	; (8006bec <HAL_JPEG_MspInit+0x17c>)
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	611a      	str	r2, [r3, #16]
    hmdma_jpeg_outfifo_th.Init.SourceInc = MDMA_SRC_INC_DISABLE;
 8006b50:	4b26      	ldr	r3, [pc, #152]	; (8006bec <HAL_JPEG_MspInit+0x17c>)
 8006b52:	2200      	movs	r2, #0
 8006b54:	615a      	str	r2, [r3, #20]
    hmdma_jpeg_outfifo_th.Init.DestinationInc = MDMA_DEST_INC_BYTE;
 8006b56:	4b25      	ldr	r3, [pc, #148]	; (8006bec <HAL_JPEG_MspInit+0x17c>)
 8006b58:	2208      	movs	r2, #8
 8006b5a:	619a      	str	r2, [r3, #24]
    hmdma_jpeg_outfifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 8006b5c:	4b23      	ldr	r3, [pc, #140]	; (8006bec <HAL_JPEG_MspInit+0x17c>)
 8006b5e:	2220      	movs	r2, #32
 8006b60:	61da      	str	r2, [r3, #28]
    hmdma_jpeg_outfifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
 8006b62:	4b22      	ldr	r3, [pc, #136]	; (8006bec <HAL_JPEG_MspInit+0x17c>)
 8006b64:	2200      	movs	r2, #0
 8006b66:	621a      	str	r2, [r3, #32]
    hmdma_jpeg_outfifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8006b68:	4b20      	ldr	r3, [pc, #128]	; (8006bec <HAL_JPEG_MspInit+0x17c>)
 8006b6a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006b6e:	625a      	str	r2, [r3, #36]	; 0x24
    hmdma_jpeg_outfifo_th.Init.BufferTransferLength = 32;
 8006b70:	4b1e      	ldr	r3, [pc, #120]	; (8006bec <HAL_JPEG_MspInit+0x17c>)
 8006b72:	2220      	movs	r2, #32
 8006b74:	629a      	str	r2, [r3, #40]	; 0x28
    hmdma_jpeg_outfifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_32BEATS;
 8006b76:	4b1d      	ldr	r3, [pc, #116]	; (8006bec <HAL_JPEG_MspInit+0x17c>)
 8006b78:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 8006b7c:	62da      	str	r2, [r3, #44]	; 0x2c
    hmdma_jpeg_outfifo_th.Init.DestBurst = MDMA_DEST_BURST_32BEATS;
 8006b7e:	4b1b      	ldr	r3, [pc, #108]	; (8006bec <HAL_JPEG_MspInit+0x17c>)
 8006b80:	f44f 3220 	mov.w	r2, #163840	; 0x28000
 8006b84:	631a      	str	r2, [r3, #48]	; 0x30
    hmdma_jpeg_outfifo_th.Init.SourceBlockAddressOffset = 0;
 8006b86:	4b19      	ldr	r3, [pc, #100]	; (8006bec <HAL_JPEG_MspInit+0x17c>)
 8006b88:	2200      	movs	r2, #0
 8006b8a:	635a      	str	r2, [r3, #52]	; 0x34
    hmdma_jpeg_outfifo_th.Init.DestBlockAddressOffset = 0;
 8006b8c:	4b17      	ldr	r3, [pc, #92]	; (8006bec <HAL_JPEG_MspInit+0x17c>)
 8006b8e:	2200      	movs	r2, #0
 8006b90:	639a      	str	r2, [r3, #56]	; 0x38
    if (HAL_MDMA_Init(&hmdma_jpeg_outfifo_th) != HAL_OK)
 8006b92:	4816      	ldr	r0, [pc, #88]	; (8006bec <HAL_JPEG_MspInit+0x17c>)
 8006b94:	f009 f940 	bl	800fe18 <HAL_MDMA_Init>
 8006b98:	4603      	mov	r3, r0
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d001      	beq.n	8006ba2 <HAL_JPEG_MspInit+0x132>
    {
      Error_Handler();
 8006b9e:	f7ff fe67 	bl	8006870 <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_outfifo_th, 0, 0) != HAL_OK)
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	2100      	movs	r1, #0
 8006ba6:	4811      	ldr	r0, [pc, #68]	; (8006bec <HAL_JPEG_MspInit+0x17c>)
 8006ba8:	f009 f982 	bl	800feb0 <HAL_MDMA_ConfigPostRequestMask>
 8006bac:	4603      	mov	r3, r0
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d001      	beq.n	8006bb6 <HAL_JPEG_MspInit+0x146>
    {
      Error_Handler();
 8006bb2:	f7ff fe5d 	bl	8006870 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmaout,hmdma_jpeg_outfifo_th);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	4a0c      	ldr	r2, [pc, #48]	; (8006bec <HAL_JPEG_MspInit+0x17c>)
 8006bba:	635a      	str	r2, [r3, #52]	; 0x34
 8006bbc:	4a0b      	ldr	r2, [pc, #44]	; (8006bec <HAL_JPEG_MspInit+0x17c>)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6413      	str	r3, [r2, #64]	; 0x40

    /* JPEG interrupt Init */
    HAL_NVIC_SetPriority(JPEG_IRQn, 5, 0);
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	2105      	movs	r1, #5
 8006bc6:	2079      	movs	r0, #121	; 0x79
 8006bc8:	f005 f8d6 	bl	800bd78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
 8006bcc:	2079      	movs	r0, #121	; 0x79
 8006bce:	f005 f8ed 	bl	800bdac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN JPEG_MspInit 1 */

  /* USER CODE END JPEG_MspInit 1 */
  }

}
 8006bd2:	bf00      	nop
 8006bd4:	3710      	adds	r7, #16
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}
 8006bda:	bf00      	nop
 8006bdc:	52003000 	.word	0x52003000
 8006be0:	58024400 	.word	0x58024400
 8006be4:	2400aef8 	.word	0x2400aef8
 8006be8:	52000200 	.word	0x52000200
 8006bec:	2400af64 	.word	0x2400af64
 8006bf0:	520001c0 	.word	0x520001c0

08006bf4 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b0bc      	sub	sp, #240	; 0xf0
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006bfc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8006c00:	2200      	movs	r2, #0
 8006c02:	601a      	str	r2, [r3, #0]
 8006c04:	605a      	str	r2, [r3, #4]
 8006c06:	609a      	str	r2, [r3, #8]
 8006c08:	60da      	str	r2, [r3, #12]
 8006c0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006c0c:	f107 0318 	add.w	r3, r7, #24
 8006c10:	22c0      	movs	r2, #192	; 0xc0
 8006c12:	2100      	movs	r1, #0
 8006c14:	4618      	mov	r0, r3
 8006c16:	f01f fc31 	bl	802647c <memset>
  if(hltdc->Instance==LTDC)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a57      	ldr	r2, [pc, #348]	; (8006d7c <HAL_LTDC_MspInit+0x188>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	f040 80a6 	bne.w	8006d72 <HAL_LTDC_MspInit+0x17e>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8006c26:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8006c2a:	f04f 0300 	mov.w	r3, #0
 8006c2e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL3.PLL3M = 24;
 8006c32:	2318      	movs	r3, #24
 8006c34:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3N = 201;
 8006c36:	23c9      	movs	r3, #201	; 0xc9
 8006c38:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8006c3a:	2302      	movs	r3, #2
 8006c3c:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8006c3e:	2302      	movs	r3, #2
 8006c40:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3R = 21;
 8006c42:	2315      	movs	r3, #21
 8006c44:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 8006c46:	2300      	movs	r3, #0
 8006c48:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3FRACN = 5462;
 8006c4e:	f241 5356 	movw	r3, #5462	; 0x1556
 8006c52:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006c54:	f107 0318 	add.w	r3, r7, #24
 8006c58:	4618      	mov	r0, r3
 8006c5a:	f00b fc95 	bl	8012588 <HAL_RCCEx_PeriphCLKConfig>
 8006c5e:	4603      	mov	r3, r0
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d001      	beq.n	8006c68 <HAL_LTDC_MspInit+0x74>
    {
      Error_Handler();
 8006c64:	f7ff fe04 	bl	8006870 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8006c68:	4b45      	ldr	r3, [pc, #276]	; (8006d80 <HAL_LTDC_MspInit+0x18c>)
 8006c6a:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8006c6e:	4a44      	ldr	r2, [pc, #272]	; (8006d80 <HAL_LTDC_MspInit+0x18c>)
 8006c70:	f043 0308 	orr.w	r3, r3, #8
 8006c74:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144
 8006c78:	4b41      	ldr	r3, [pc, #260]	; (8006d80 <HAL_LTDC_MspInit+0x18c>)
 8006c7a:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8006c7e:	f003 0308 	and.w	r3, r3, #8
 8006c82:	617b      	str	r3, [r7, #20]
 8006c84:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 8006c86:	4b3e      	ldr	r3, [pc, #248]	; (8006d80 <HAL_LTDC_MspInit+0x18c>)
 8006c88:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006c8c:	4a3c      	ldr	r2, [pc, #240]	; (8006d80 <HAL_LTDC_MspInit+0x18c>)
 8006c8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006c92:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8006c96:	4b3a      	ldr	r3, [pc, #232]	; (8006d80 <HAL_LTDC_MspInit+0x18c>)
 8006c98:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006c9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ca0:	613b      	str	r3, [r7, #16]
 8006ca2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8006ca4:	4b36      	ldr	r3, [pc, #216]	; (8006d80 <HAL_LTDC_MspInit+0x18c>)
 8006ca6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006caa:	4a35      	ldr	r2, [pc, #212]	; (8006d80 <HAL_LTDC_MspInit+0x18c>)
 8006cac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006cb0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8006cb4:	4b32      	ldr	r3, [pc, #200]	; (8006d80 <HAL_LTDC_MspInit+0x18c>)
 8006cb6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006cba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006cbe:	60fb      	str	r3, [r7, #12]
 8006cc0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8006cc2:	4b2f      	ldr	r3, [pc, #188]	; (8006d80 <HAL_LTDC_MspInit+0x18c>)
 8006cc4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006cc8:	4a2d      	ldr	r2, [pc, #180]	; (8006d80 <HAL_LTDC_MspInit+0x18c>)
 8006cca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006cce:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8006cd2:	4b2b      	ldr	r3, [pc, #172]	; (8006d80 <HAL_LTDC_MspInit+0x18c>)
 8006cd4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006cd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cdc:	60bb      	str	r3, [r7, #8]
 8006cde:	68bb      	ldr	r3, [r7, #8]
    PJ1     ------> LTDC_R2
    PJ4     ------> LTDC_R5
    PJ2     ------> LTDC_R3
    PJ3     ------> LTDC_R4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_3|GPIO_PIN_4
 8006ce0:	23ff      	movs	r3, #255	; 0xff
 8006ce2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_7|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ce6:	2302      	movs	r3, #2
 8006ce8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cec:	2300      	movs	r3, #0
 8006cee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8006cf8:	230e      	movs	r3, #14
 8006cfa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8006cfe:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8006d02:	4619      	mov	r1, r3
 8006d04:	481f      	ldr	r0, [pc, #124]	; (8006d84 <HAL_LTDC_MspInit+0x190>)
 8006d06:	f005 fbfd 	bl	800c504 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12
 8006d0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006d0e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_0|GPIO_PIN_5
                          |GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d12:	2302      	movs	r3, #2
 8006d14:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d18:	2300      	movs	r3, #0
 8006d1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8006d24:	230e      	movs	r3, #14
 8006d26:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8006d2a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8006d2e:	4619      	mov	r1, r3
 8006d30:	4815      	ldr	r0, [pc, #84]	; (8006d88 <HAL_LTDC_MspInit+0x194>)
 8006d32:	f005 fbe7 	bl	800c504 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_15;
 8006d36:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8006d3a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d3e:	2302      	movs	r3, #2
 8006d40:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d44:	2300      	movs	r3, #0
 8006d46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8006d50:	230e      	movs	r3, #14
 8006d52:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8006d56:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8006d5a:	4619      	mov	r1, r3
 8006d5c:	480b      	ldr	r0, [pc, #44]	; (8006d8c <HAL_LTDC_MspInit+0x198>)
 8006d5e:	f005 fbd1 	bl	800c504 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8006d62:	2200      	movs	r2, #0
 8006d64:	2105      	movs	r1, #5
 8006d66:	2058      	movs	r0, #88	; 0x58
 8006d68:	f005 f806 	bl	800bd78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8006d6c:	2058      	movs	r0, #88	; 0x58
 8006d6e:	f005 f81d 	bl	800bdac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8006d72:	bf00      	nop
 8006d74:	37f0      	adds	r7, #240	; 0xf0
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}
 8006d7a:	bf00      	nop
 8006d7c:	50001000 	.word	0x50001000
 8006d80:	58024400 	.word	0x58024400
 8006d84:	58022800 	.word	0x58022800
 8006d88:	58022400 	.word	0x58022400
 8006d8c:	58022000 	.word	0x58022000

08006d90 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b0b4      	sub	sp, #208	; 0xd0
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006d98:	f107 0310 	add.w	r3, r7, #16
 8006d9c:	22c0      	movs	r2, #192	; 0xc0
 8006d9e:	2100      	movs	r1, #0
 8006da0:	4618      	mov	r0, r3
 8006da2:	f01f fb6b 	bl	802647c <memset>
  if(hospi->Instance==OCTOSPI1)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4a28      	ldr	r2, [pc, #160]	; (8006e4c <HAL_OSPI_MspInit+0xbc>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d148      	bne.n	8006e42 <HAL_OSPI_MspInit+0xb2>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8006db0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006db4:	f04f 0300 	mov.w	r3, #0
 8006db8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 24;
 8006dbc:	2318      	movs	r3, #24
 8006dbe:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 266;
 8006dc0:	f44f 7385 	mov.w	r3, #266	; 0x10a
 8006dc4:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8006dc6:	2302      	movs	r3, #2
 8006dc8:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8006dca:	2302      	movs	r3, #2
 8006dcc:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8006dce:	2302      	movs	r3, #2
 8006dd0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_PLL2;
 8006dde:	2320      	movs	r3, #32
 8006de0:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006de2:	f107 0310 	add.w	r3, r7, #16
 8006de6:	4618      	mov	r0, r3
 8006de8:	f00b fbce 	bl	8012588 <HAL_RCCEx_PeriphCLKConfig>
 8006dec:	4603      	mov	r3, r0
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d001      	beq.n	8006df6 <HAL_OSPI_MspInit+0x66>
    {
      Error_Handler();
 8006df2:	f7ff fd3d 	bl	8006870 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 8006df6:	4b16      	ldr	r3, [pc, #88]	; (8006e50 <HAL_OSPI_MspInit+0xc0>)
 8006df8:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8006dfc:	4a14      	ldr	r2, [pc, #80]	; (8006e50 <HAL_OSPI_MspInit+0xc0>)
 8006dfe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006e02:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 8006e06:	4b12      	ldr	r3, [pc, #72]	; (8006e50 <HAL_OSPI_MspInit+0xc0>)
 8006e08:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8006e0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006e10:	60fb      	str	r3, [r7, #12]
 8006e12:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8006e14:	4b0e      	ldr	r3, [pc, #56]	; (8006e50 <HAL_OSPI_MspInit+0xc0>)
 8006e16:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8006e1a:	4a0d      	ldr	r2, [pc, #52]	; (8006e50 <HAL_OSPI_MspInit+0xc0>)
 8006e1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006e20:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 8006e24:	4b0a      	ldr	r3, [pc, #40]	; (8006e50 <HAL_OSPI_MspInit+0xc0>)
 8006e26:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8006e2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e2e:	60bb      	str	r3, [r7, #8]
 8006e30:	68bb      	ldr	r3, [r7, #8]
    /* OCTOSPI1 interrupt Init */
    HAL_NVIC_SetPriority(OCTOSPI1_IRQn, 5, 0);
 8006e32:	2200      	movs	r2, #0
 8006e34:	2105      	movs	r1, #5
 8006e36:	205c      	movs	r0, #92	; 0x5c
 8006e38:	f004 ff9e 	bl	800bd78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OCTOSPI1_IRQn);
 8006e3c:	205c      	movs	r0, #92	; 0x5c
 8006e3e:	f004 ffb5 	bl	800bdac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 8006e42:	bf00      	nop
 8006e44:	37d0      	adds	r7, #208	; 0xd0
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}
 8006e4a:	bf00      	nop
 8006e4c:	52005000 	.word	0x52005000
 8006e50:	58024400 	.word	0x58024400

08006e54 <HAL_OSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspDeInit(OSPI_HandleTypeDef* hospi)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b082      	sub	sp, #8
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  if(hospi->Instance==OCTOSPI1)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4a0c      	ldr	r2, [pc, #48]	; (8006e94 <HAL_OSPI_MspDeInit+0x40>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d112      	bne.n	8006e8c <HAL_OSPI_MspDeInit+0x38>
  {
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 0 */

  /* USER CODE END OCTOSPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_OCTOSPIM_CLK_DISABLE();
 8006e66:	4b0c      	ldr	r3, [pc, #48]	; (8006e98 <HAL_OSPI_MspDeInit+0x44>)
 8006e68:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8006e6c:	4a0a      	ldr	r2, [pc, #40]	; (8006e98 <HAL_OSPI_MspDeInit+0x44>)
 8006e6e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006e72:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
    __HAL_RCC_OSPI1_CLK_DISABLE();
 8006e76:	4b08      	ldr	r3, [pc, #32]	; (8006e98 <HAL_OSPI_MspDeInit+0x44>)
 8006e78:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8006e7c:	4a06      	ldr	r2, [pc, #24]	; (8006e98 <HAL_OSPI_MspDeInit+0x44>)
 8006e7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e82:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134

    /* OCTOSPI1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(OCTOSPI1_IRQn);
 8006e86:	205c      	movs	r0, #92	; 0x5c
 8006e88:	f004 ff9e 	bl	800bdc8 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 1 */

  /* USER CODE END OCTOSPI1_MspDeInit 1 */
  }

}
 8006e8c:	bf00      	nop
 8006e8e:	3708      	adds	r7, #8
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd80      	pop	{r7, pc}
 8006e94:	52005000 	.word	0x52005000
 8006e98:	58024400 	.word	0x58024400

08006e9c <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b0b8      	sub	sp, #224	; 0xe0
 8006ea0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8006ea2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	601a      	str	r2, [r3, #0]
 8006eaa:	605a      	str	r2, [r3, #4]
 8006eac:	609a      	str	r2, [r3, #8]
 8006eae:	60da      	str	r2, [r3, #12]
 8006eb0:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8006eb2:	4b51      	ldr	r3, [pc, #324]	; (8006ff8 <HAL_FMC_MspInit+0x15c>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	f040 8099 	bne.w	8006fee <HAL_FMC_MspInit+0x152>
    return;
  }
  FMC_Initialized = 1;
 8006ebc:	4b4e      	ldr	r3, [pc, #312]	; (8006ff8 <HAL_FMC_MspInit+0x15c>)
 8006ebe:	2201      	movs	r2, #1
 8006ec0:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006ec2:	f107 0308 	add.w	r3, r7, #8
 8006ec6:	22c0      	movs	r2, #192	; 0xc0
 8006ec8:	2100      	movs	r1, #0
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f01f fad6 	bl	802647c <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8006ed0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006ed4:	f04f 0300 	mov.w	r3, #0
 8006ed8:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 8006edc:	2300      	movs	r3, #0
 8006ede:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006ee0:	f107 0308 	add.w	r3, r7, #8
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	f00b fb4f 	bl	8012588 <HAL_RCCEx_PeriphCLKConfig>
 8006eea:	4603      	mov	r3, r0
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d001      	beq.n	8006ef4 <HAL_FMC_MspInit+0x58>
    {
      Error_Handler();
 8006ef0:	f7ff fcbe 	bl	8006870 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8006ef4:	4b41      	ldr	r3, [pc, #260]	; (8006ffc <HAL_FMC_MspInit+0x160>)
 8006ef6:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8006efa:	4a40      	ldr	r2, [pc, #256]	; (8006ffc <HAL_FMC_MspInit+0x160>)
 8006efc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006f00:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 8006f04:	4b3d      	ldr	r3, [pc, #244]	; (8006ffc <HAL_FMC_MspInit+0x160>)
 8006f06:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8006f0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006f0e:	607b      	str	r3, [r7, #4]
 8006f10:	687b      	ldr	r3, [r7, #4]
  PG0   ------> FMC_A10
  PE8   ------> FMC_D5
  PE11   ------> FMC_D8
  PH7   ------> FMC_SDCKE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 8006f12:	f248 1333 	movw	r3, #33075	; 0x8133
 8006f16:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_1|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f1a:	2302      	movs	r3, #2
 8006f1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f20:	2300      	movs	r3, #0
 8006f22:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006f26:	2303      	movs	r3, #3
 8006f28:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8006f2c:	230c      	movs	r3, #12
 8006f2e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006f32:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8006f36:	4619      	mov	r1, r3
 8006f38:	4831      	ldr	r0, [pc, #196]	; (8007000 <HAL_FMC_MspInit+0x164>)
 8006f3a:	f005 fae3 	bl	800c504 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_15
 8006f3e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8006f42:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f46:	2302      	movs	r3, #2
 8006f48:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006f52:	2303      	movs	r3, #3
 8006f54:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8006f58:	230c      	movs	r3, #12
 8006f5a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006f5e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8006f62:	4619      	mov	r1, r3
 8006f64:	4827      	ldr	r0, [pc, #156]	; (8007004 <HAL_FMC_MspInit+0x168>)
 8006f66:	f005 facd 	bl	800c504 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_12|GPIO_PIN_7
 8006f6a:	f64f 7383 	movw	r3, #65411	; 0xff83
 8006f6e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_10|GPIO_PIN_9
                          |GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f72:	2302      	movs	r3, #2
 8006f74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f78:	2300      	movs	r3, #0
 8006f7a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006f7e:	2303      	movs	r3, #3
 8006f80:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8006f84:	230c      	movs	r3, #12
 8006f86:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006f8a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8006f8e:	4619      	mov	r1, r3
 8006f90:	481d      	ldr	r0, [pc, #116]	; (8007008 <HAL_FMC_MspInit+0x16c>)
 8006f92:	f005 fab7 	bl	800c504 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_4
 8006f96:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8006f9a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_13|GPIO_PIN_11
                          |GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f9e:	2302      	movs	r3, #2
 8006fa0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006faa:	2303      	movs	r3, #3
 8006fac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8006fb0:	230c      	movs	r3, #12
 8006fb2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006fb6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8006fba:	4619      	mov	r1, r3
 8006fbc:	4813      	ldr	r0, [pc, #76]	; (800700c <HAL_FMC_MspInit+0x170>)
 8006fbe:	f005 faa1 	bl	800c504 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_7;
 8006fc2:	23e0      	movs	r3, #224	; 0xe0
 8006fc4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006fc8:	2302      	movs	r3, #2
 8006fca:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006fd4:	2303      	movs	r3, #3
 8006fd6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8006fda:	230c      	movs	r3, #12
 8006fdc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8006fe0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8006fe4:	4619      	mov	r1, r3
 8006fe6:	480a      	ldr	r0, [pc, #40]	; (8007010 <HAL_FMC_MspInit+0x174>)
 8006fe8:	f005 fa8c 	bl	800c504 <HAL_GPIO_Init>
 8006fec:	e000      	b.n	8006ff0 <HAL_FMC_MspInit+0x154>
    return;
 8006fee:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8006ff0:	37e0      	adds	r7, #224	; 0xe0
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}
 8006ff6:	bf00      	nop
 8006ff8:	2400b124 	.word	0x2400b124
 8006ffc:	58024400 	.word	0x58024400
 8007000:	58021800 	.word	0x58021800
 8007004:	58020c00 	.word	0x58020c00
 8007008:	58021000 	.word	0x58021000
 800700c:	58021400 	.word	0x58021400
 8007010:	58021c00 	.word	0x58021c00

08007014 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8007014:	b580      	push	{r7, lr}
 8007016:	b082      	sub	sp, #8
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800701c:	f7ff ff3e 	bl	8006e9c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8007020:	bf00      	nop
 8007022:	3708      	adds	r7, #8
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}

08007028 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b090      	sub	sp, #64	; 0x40
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2b0f      	cmp	r3, #15
 8007034:	d827      	bhi.n	8007086 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8007036:	2200      	movs	r2, #0
 8007038:	6879      	ldr	r1, [r7, #4]
 800703a:	2036      	movs	r0, #54	; 0x36
 800703c:	f004 fe9c 	bl	800bd78 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8007040:	2036      	movs	r0, #54	; 0x36
 8007042:	f004 feb3 	bl	800bdac <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8007046:	4a29      	ldr	r2, [pc, #164]	; (80070ec <HAL_InitTick+0xc4>)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800704c:	4b28      	ldr	r3, [pc, #160]	; (80070f0 <HAL_InitTick+0xc8>)
 800704e:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8007052:	4a27      	ldr	r2, [pc, #156]	; (80070f0 <HAL_InitTick+0xc8>)
 8007054:	f043 0310 	orr.w	r3, r3, #16
 8007058:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 800705c:	4b24      	ldr	r3, [pc, #144]	; (80070f0 <HAL_InitTick+0xc8>)
 800705e:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8007062:	f003 0310 	and.w	r3, r3, #16
 8007066:	60fb      	str	r3, [r7, #12]
 8007068:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800706a:	f107 0210 	add.w	r2, r7, #16
 800706e:	f107 0314 	add.w	r3, r7, #20
 8007072:	4611      	mov	r1, r2
 8007074:	4618      	mov	r0, r3
 8007076:	f00b fa45 	bl	8012504 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800707a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800707c:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800707e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007080:	2b00      	cmp	r3, #0
 8007082:	d106      	bne.n	8007092 <HAL_InitTick+0x6a>
 8007084:	e001      	b.n	800708a <HAL_InitTick+0x62>
    return HAL_ERROR;
 8007086:	2301      	movs	r3, #1
 8007088:	e02b      	b.n	80070e2 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800708a:	f00b fa0f 	bl	80124ac <HAL_RCC_GetPCLK1Freq>
 800708e:	63f8      	str	r0, [r7, #60]	; 0x3c
 8007090:	e004      	b.n	800709c <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8007092:	f00b fa0b 	bl	80124ac <HAL_RCC_GetPCLK1Freq>
 8007096:	4603      	mov	r3, r0
 8007098:	005b      	lsls	r3, r3, #1
 800709a:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800709c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800709e:	4a15      	ldr	r2, [pc, #84]	; (80070f4 <HAL_InitTick+0xcc>)
 80070a0:	fba2 2303 	umull	r2, r3, r2, r3
 80070a4:	0c9b      	lsrs	r3, r3, #18
 80070a6:	3b01      	subs	r3, #1
 80070a8:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80070aa:	4b13      	ldr	r3, [pc, #76]	; (80070f8 <HAL_InitTick+0xd0>)
 80070ac:	4a13      	ldr	r2, [pc, #76]	; (80070fc <HAL_InitTick+0xd4>)
 80070ae:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80070b0:	4b11      	ldr	r3, [pc, #68]	; (80070f8 <HAL_InitTick+0xd0>)
 80070b2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80070b6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80070b8:	4a0f      	ldr	r2, [pc, #60]	; (80070f8 <HAL_InitTick+0xd0>)
 80070ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070bc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80070be:	4b0e      	ldr	r3, [pc, #56]	; (80070f8 <HAL_InitTick+0xd0>)
 80070c0:	2200      	movs	r2, #0
 80070c2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80070c4:	4b0c      	ldr	r3, [pc, #48]	; (80070f8 <HAL_InitTick+0xd0>)
 80070c6:	2200      	movs	r2, #0
 80070c8:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80070ca:	480b      	ldr	r0, [pc, #44]	; (80070f8 <HAL_InitTick+0xd0>)
 80070cc:	f00c fe17 	bl	8013cfe <HAL_TIM_Base_Init>
 80070d0:	4603      	mov	r3, r0
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d104      	bne.n	80070e0 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80070d6:	4808      	ldr	r0, [pc, #32]	; (80070f8 <HAL_InitTick+0xd0>)
 80070d8:	f00c fe72 	bl	8013dc0 <HAL_TIM_Base_Start_IT>
 80070dc:	4603      	mov	r3, r0
 80070de:	e000      	b.n	80070e2 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80070e0:	2301      	movs	r3, #1
}
 80070e2:	4618      	mov	r0, r3
 80070e4:	3740      	adds	r7, #64	; 0x40
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}
 80070ea:	bf00      	nop
 80070ec:	2400005c 	.word	0x2400005c
 80070f0:	58024400 	.word	0x58024400
 80070f4:	431bde83 	.word	0x431bde83
 80070f8:	2400b128 	.word	0x2400b128
 80070fc:	40001000 	.word	0x40001000

08007100 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007100:	b480      	push	{r7}
 8007102:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007104:	bf00      	nop
 8007106:	46bd      	mov	sp, r7
 8007108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710c:	4770      	bx	lr

0800710e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800710e:	b480      	push	{r7}
 8007110:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007112:	e7fe      	b.n	8007112 <HardFault_Handler+0x4>

08007114 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007114:	b480      	push	{r7}
 8007116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007118:	e7fe      	b.n	8007118 <MemManage_Handler+0x4>

0800711a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800711a:	b480      	push	{r7}
 800711c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800711e:	e7fe      	b.n	800711e <BusFault_Handler+0x4>

08007120 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007120:	b480      	push	{r7}
 8007122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007124:	e7fe      	b.n	8007124 <UsageFault_Handler+0x4>

08007126 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007126:	b480      	push	{r7}
 8007128:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800712a:	bf00      	nop
 800712c:	46bd      	mov	sp, r7
 800712e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007132:	4770      	bx	lr

08007134 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LCD_INT_Pin);
 8007138:	2004      	movs	r0, #4
 800713a:	f005 fce8 	bl	800cb0e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800713e:	bf00      	nop
 8007140:	bd80      	pop	{r7, pc}
	...

08007144 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8007148:	4802      	ldr	r0, [pc, #8]	; (8007154 <TIM6_DAC_IRQHandler+0x10>)
 800714a:	f00c feb1 	bl	8013eb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800714e:	bf00      	nop
 8007150:	bd80      	pop	{r7, pc}
 8007152:	bf00      	nop
 8007154:	2400b128 	.word	0x2400b128

08007158 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800715c:	4802      	ldr	r0, [pc, #8]	; (8007168 <LTDC_IRQHandler+0x10>)
 800715e:	f008 fb93 	bl	800f888 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8007162:	bf00      	nop
 8007164:	bd80      	pop	{r7, pc}
 8007166:	bf00      	nop
 8007168:	2400afd0 	.word	0x2400afd0

0800716c <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8007170:	4802      	ldr	r0, [pc, #8]	; (800717c <DMA2D_IRQHandler+0x10>)
 8007172:	f005 f809 	bl	800c188 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8007176:	bf00      	nop
 8007178:	bd80      	pop	{r7, pc}
 800717a:	bf00      	nop
 800717c:	2400ade4 	.word	0x2400ade4

08007180 <OCTOSPI1_IRQHandler>:

/**
  * @brief This function handles OCTOSPI1 global interrupt.
  */
void OCTOSPI1_IRQHandler(void)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OCTOSPI1_IRQn 0 */

  /* USER CODE END OCTOSPI1_IRQn 0 */
  HAL_OSPI_IRQHandler(&hospi1);
 8007184:	4802      	ldr	r0, [pc, #8]	; (8007190 <OCTOSPI1_IRQHandler+0x10>)
 8007186:	f009 fb29 	bl	80107dc <HAL_OSPI_IRQHandler>
  /* USER CODE BEGIN OCTOSPI1_IRQn 1 */

  /* USER CODE END OCTOSPI1_IRQn 1 */
}
 800718a:	bf00      	nop
 800718c:	bd80      	pop	{r7, pc}
 800718e:	bf00      	nop
 8007190:	2400b078 	.word	0x2400b078

08007194 <JPEG_IRQHandler>:

/**
  * @brief This function handles JPEG global interrupt.
  */
void JPEG_IRQHandler(void)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN JPEG_IRQn 0 */

  /* USER CODE END JPEG_IRQn 0 */
  HAL_JPEG_IRQHandler(&hjpeg);
 8007198:	4802      	ldr	r0, [pc, #8]	; (80071a4 <JPEG_IRQHandler+0x10>)
 800719a:	f006 fe20 	bl	800ddde <HAL_JPEG_IRQHandler>
  /* USER CODE BEGIN JPEG_IRQn 1 */

  /* USER CODE END JPEG_IRQn 1 */
}
 800719e:	bf00      	nop
 80071a0:	bd80      	pop	{r7, pc}
 80071a2:	bf00      	nop
 80071a4:	2400aea0 	.word	0x2400aea0

080071a8 <MDMA_IRQHandler>:

/**
  * @brief This function handles MDMA global interrupt.
  */
void MDMA_IRQHandler(void)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MDMA_IRQn 0 */

  /* USER CODE END MDMA_IRQn 0 */
  HAL_MDMA_IRQHandler(&hmdma_jpeg_outfifo_th);
 80071ac:	4803      	ldr	r0, [pc, #12]	; (80071bc <MDMA_IRQHandler+0x14>)
 80071ae:	f008 ffd5 	bl	801015c <HAL_MDMA_IRQHandler>
  HAL_MDMA_IRQHandler(&hmdma_jpeg_infifo_th);
 80071b2:	4803      	ldr	r0, [pc, #12]	; (80071c0 <MDMA_IRQHandler+0x18>)
 80071b4:	f008 ffd2 	bl	801015c <HAL_MDMA_IRQHandler>
  /* USER CODE BEGIN MDMA_IRQn 1 */

  /* USER CODE END MDMA_IRQn 1 */
}
 80071b8:	bf00      	nop
 80071ba:	bd80      	pop	{r7, pc}
 80071bc:	2400af64 	.word	0x2400af64
 80071c0:	2400aef8 	.word	0x2400aef8

080071c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80071c4:	b480      	push	{r7}
 80071c6:	af00      	add	r7, sp, #0
	return 1;
 80071c8:	2301      	movs	r3, #1
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	46bd      	mov	sp, r7
 80071ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d2:	4770      	bx	lr

080071d4 <_kill>:

int _kill(int pid, int sig)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b082      	sub	sp, #8
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
 80071dc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80071de:	f01f f8ef 	bl	80263c0 <__errno>
 80071e2:	4603      	mov	r3, r0
 80071e4:	2216      	movs	r2, #22
 80071e6:	601a      	str	r2, [r3, #0]
	return -1;
 80071e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	3708      	adds	r7, #8
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}

080071f4 <_exit>:

void _exit (int status)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b082      	sub	sp, #8
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80071fc:	f04f 31ff 	mov.w	r1, #4294967295
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f7ff ffe7 	bl	80071d4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8007206:	e7fe      	b.n	8007206 <_exit+0x12>

08007208 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b086      	sub	sp, #24
 800720c:	af00      	add	r7, sp, #0
 800720e:	60f8      	str	r0, [r7, #12]
 8007210:	60b9      	str	r1, [r7, #8]
 8007212:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007214:	2300      	movs	r3, #0
 8007216:	617b      	str	r3, [r7, #20]
 8007218:	e00a      	b.n	8007230 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800721a:	f3af 8000 	nop.w
 800721e:	4601      	mov	r1, r0
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	1c5a      	adds	r2, r3, #1
 8007224:	60ba      	str	r2, [r7, #8]
 8007226:	b2ca      	uxtb	r2, r1
 8007228:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800722a:	697b      	ldr	r3, [r7, #20]
 800722c:	3301      	adds	r3, #1
 800722e:	617b      	str	r3, [r7, #20]
 8007230:	697a      	ldr	r2, [r7, #20]
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	429a      	cmp	r2, r3
 8007236:	dbf0      	blt.n	800721a <_read+0x12>
	}

return len;
 8007238:	687b      	ldr	r3, [r7, #4]
}
 800723a:	4618      	mov	r0, r3
 800723c:	3718      	adds	r7, #24
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}

08007242 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8007242:	b580      	push	{r7, lr}
 8007244:	b086      	sub	sp, #24
 8007246:	af00      	add	r7, sp, #0
 8007248:	60f8      	str	r0, [r7, #12]
 800724a:	60b9      	str	r1, [r7, #8]
 800724c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800724e:	2300      	movs	r3, #0
 8007250:	617b      	str	r3, [r7, #20]
 8007252:	e009      	b.n	8007268 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	1c5a      	adds	r2, r3, #1
 8007258:	60ba      	str	r2, [r7, #8]
 800725a:	781b      	ldrb	r3, [r3, #0]
 800725c:	4618      	mov	r0, r3
 800725e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	3301      	adds	r3, #1
 8007266:	617b      	str	r3, [r7, #20]
 8007268:	697a      	ldr	r2, [r7, #20]
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	429a      	cmp	r2, r3
 800726e:	dbf1      	blt.n	8007254 <_write+0x12>
	}
	return len;
 8007270:	687b      	ldr	r3, [r7, #4]
}
 8007272:	4618      	mov	r0, r3
 8007274:	3718      	adds	r7, #24
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}

0800727a <_close>:

int _close(int file)
{
 800727a:	b480      	push	{r7}
 800727c:	b083      	sub	sp, #12
 800727e:	af00      	add	r7, sp, #0
 8007280:	6078      	str	r0, [r7, #4]
	return -1;
 8007282:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007286:	4618      	mov	r0, r3
 8007288:	370c      	adds	r7, #12
 800728a:	46bd      	mov	sp, r7
 800728c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007290:	4770      	bx	lr

08007292 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8007292:	b480      	push	{r7}
 8007294:	b083      	sub	sp, #12
 8007296:	af00      	add	r7, sp, #0
 8007298:	6078      	str	r0, [r7, #4]
 800729a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80072a2:	605a      	str	r2, [r3, #4]
	return 0;
 80072a4:	2300      	movs	r3, #0
}
 80072a6:	4618      	mov	r0, r3
 80072a8:	370c      	adds	r7, #12
 80072aa:	46bd      	mov	sp, r7
 80072ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b0:	4770      	bx	lr

080072b2 <_isatty>:

int _isatty(int file)
{
 80072b2:	b480      	push	{r7}
 80072b4:	b083      	sub	sp, #12
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	6078      	str	r0, [r7, #4]
	return 1;
 80072ba:	2301      	movs	r3, #1
}
 80072bc:	4618      	mov	r0, r3
 80072be:	370c      	adds	r7, #12
 80072c0:	46bd      	mov	sp, r7
 80072c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c6:	4770      	bx	lr

080072c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80072c8:	b480      	push	{r7}
 80072ca:	b085      	sub	sp, #20
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	60f8      	str	r0, [r7, #12]
 80072d0:	60b9      	str	r1, [r7, #8]
 80072d2:	607a      	str	r2, [r7, #4]
	return 0;
 80072d4:	2300      	movs	r3, #0
}
 80072d6:	4618      	mov	r0, r3
 80072d8:	3714      	adds	r7, #20
 80072da:	46bd      	mov	sp, r7
 80072dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e0:	4770      	bx	lr
	...

080072e4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b084      	sub	sp, #16
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80072ec:	4b11      	ldr	r3, [pc, #68]	; (8007334 <_sbrk+0x50>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d102      	bne.n	80072fa <_sbrk+0x16>
		heap_end = &end;
 80072f4:	4b0f      	ldr	r3, [pc, #60]	; (8007334 <_sbrk+0x50>)
 80072f6:	4a10      	ldr	r2, [pc, #64]	; (8007338 <_sbrk+0x54>)
 80072f8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80072fa:	4b0e      	ldr	r3, [pc, #56]	; (8007334 <_sbrk+0x50>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8007300:	4b0c      	ldr	r3, [pc, #48]	; (8007334 <_sbrk+0x50>)
 8007302:	681a      	ldr	r2, [r3, #0]
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	4413      	add	r3, r2
 8007308:	466a      	mov	r2, sp
 800730a:	4293      	cmp	r3, r2
 800730c:	d907      	bls.n	800731e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800730e:	f01f f857 	bl	80263c0 <__errno>
 8007312:	4603      	mov	r3, r0
 8007314:	220c      	movs	r2, #12
 8007316:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8007318:	f04f 33ff 	mov.w	r3, #4294967295
 800731c:	e006      	b.n	800732c <_sbrk+0x48>
	}

	heap_end += incr;
 800731e:	4b05      	ldr	r3, [pc, #20]	; (8007334 <_sbrk+0x50>)
 8007320:	681a      	ldr	r2, [r3, #0]
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	4413      	add	r3, r2
 8007326:	4a03      	ldr	r2, [pc, #12]	; (8007334 <_sbrk+0x50>)
 8007328:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800732a:	68fb      	ldr	r3, [r7, #12]
}
 800732c:	4618      	mov	r0, r3
 800732e:	3710      	adds	r7, #16
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}
 8007334:	2400b174 	.word	0x2400b174
 8007338:	24026400 	.word	0x24026400

0800733c <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b082      	sub	sp, #8
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
 8007344:	460b      	mov	r3, r1
 8007346:	807b      	strh	r3, [r7, #2]
    switch (typography)
 8007348:	887b      	ldrh	r3, [r7, #2]
 800734a:	2b02      	cmp	r3, #2
 800734c:	d010      	beq.n	8007370 <_ZN23ApplicationFontProvider7getFontEt+0x34>
 800734e:	2b02      	cmp	r3, #2
 8007350:	dc13      	bgt.n	800737a <_ZN23ApplicationFontProvider7getFontEt+0x3e>
 8007352:	2b00      	cmp	r3, #0
 8007354:	d002      	beq.n	800735c <_ZN23ApplicationFontProvider7getFontEt+0x20>
 8007356:	2b01      	cmp	r3, #1
 8007358:	d005      	beq.n	8007366 <_ZN23ApplicationFontProvider7getFontEt+0x2a>
 800735a:	e00e      	b.n	800737a <_ZN23ApplicationFontProvider7getFontEt+0x3e>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 800735c:	f001 fc78 	bl	8008c50 <_ZN17TypedTextDatabase8getFontsEv>
 8007360:	4603      	mov	r3, r0
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	e00a      	b.n	800737c <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 8007366:	f001 fc73 	bl	8008c50 <_ZN17TypedTextDatabase8getFontsEv>
 800736a:	4603      	mov	r3, r0
 800736c:	685b      	ldr	r3, [r3, #4]
 800736e:	e005      	b.n	800737c <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 8007370:	f001 fc6e 	bl	8008c50 <_ZN17TypedTextDatabase8getFontsEv>
 8007374:	4603      	mov	r3, r0
 8007376:	689b      	ldr	r3, [r3, #8]
 8007378:	e000      	b.n	800737c <_ZN23ApplicationFontProvider7getFontEt+0x40>
    default:
        return 0;
 800737a:	2300      	movs	r3, #0
    }
}
 800737c:	4618      	mov	r0, r3
 800737e:	3708      	adds	r7, #8
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}

08007384 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 8007384:	b480      	push	{r7}
 8007386:	af00      	add	r7, sp, #0
    return bitmap_database;
 8007388:	4b02      	ldr	r3, [pc, #8]	; (8007394 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 800738a:	4618      	mov	r0, r3
 800738c:	46bd      	mov	sp, r7
 800738e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007392:	4770      	bx	lr
 8007394:	0802a0e0 	.word	0x0802a0e0

08007398 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 8007398:	b480      	push	{r7}
 800739a:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 800739c:	2303      	movs	r3, #3
}
 800739e:	4618      	mov	r0, r3
 80073a0:	46bd      	mov	sp, r7
 80073a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a6:	4770      	bx	lr

080073a8 <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 80073a8:	b480      	push	{r7}
 80073aa:	b083      	sub	sp, #12
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
    {
 80073b0:	4a04      	ldr	r2, [pc, #16]	; (80073c4 <_ZN8touchgfx4FontD1Ev+0x1c>)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	601a      	str	r2, [r3, #0]
    }
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	4618      	mov	r0, r3
 80073ba:	370c      	adds	r7, #12
 80073bc:	46bd      	mov	sp, r7
 80073be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c2:	4770      	bx	lr
 80073c4:	0802a268 	.word	0x0802a268

080073c8 <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b082      	sub	sp, #8
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
    }
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f7ff ffe9 	bl	80073a8 <_ZN8touchgfx4FontD1Ev>
 80073d6:	2114      	movs	r1, #20
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	f01e ff90 	bl	80262fe <_ZdlPvj>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	4618      	mov	r0, r3
 80073e2:	3708      	adds	r7, #8
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}

080073e8 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 80073e8:	b590      	push	{r4, r7, lr}
 80073ea:	b087      	sub	sp, #28
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
 80073f0:	460b      	mov	r3, r1
 80073f2:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 80073f4:	887b      	ldrh	r3, [r7, #2]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d101      	bne.n	80073fe <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 80073fa:	2300      	movs	r3, #0
 80073fc:	e010      	b.n	8007420 <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 80073fe:	2300      	movs	r3, #0
 8007400:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 8007402:	2300      	movs	r3, #0
 8007404:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	3308      	adds	r3, #8
 800740c:	681c      	ldr	r4, [r3, #0]
 800740e:	f107 030f 	add.w	r3, r7, #15
 8007412:	f107 0210 	add.w	r2, r7, #16
 8007416:	8879      	ldrh	r1, [r7, #2]
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	47a0      	blx	r4
 800741c:	6178      	str	r0, [r7, #20]
        return glyph;
 800741e:	697b      	ldr	r3, [r7, #20]
    }
 8007420:	4618      	mov	r0, r3
 8007422:	371c      	adds	r7, #28
 8007424:	46bd      	mov	sp, r7
 8007426:	bd90      	pop	{r4, r7, pc}

08007428 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 8007428:	b480      	push	{r7}
 800742a:	b083      	sub	sp, #12
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	89db      	ldrh	r3, [r3, #14]
    }
 8007434:	4618      	mov	r0, r3
 8007436:	370c      	adds	r7, #12
 8007438:	46bd      	mov	sp, r7
 800743a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743e:	4770      	bx	lr

08007440 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 8007440:	b480      	push	{r7}
 8007442:	b083      	sub	sp, #12
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	8a1b      	ldrh	r3, [r3, #16]
    }
 800744c:	4618      	mov	r0, r3
 800744e:	370c      	adds	r7, #12
 8007450:	46bd      	mov	sp, r7
 8007452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007456:	4770      	bx	lr

08007458 <_ZNK8touchgfx4Font11getBaselineEv>:
     * @return The height in pixels of this font.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
 8007458:	b480      	push	{r7}
 800745a:	b083      	sub	sp, #12
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
    {
        return baselineHeight;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	88db      	ldrh	r3, [r3, #6]
    }
 8007464:	4618      	mov	r0, r3
 8007466:	370c      	adds	r7, #12
 8007468:	46bd      	mov	sp, r7
 800746a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746e:	4770      	bx	lr

08007470 <_ZNK8touchgfx4Font9getHeightEv>:
     * Returns the height of a font. The font may exceed the top by getPixelsAboveTop() or the
     * bottom by getPixelsBelowBottom.
     *
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
 8007470:	b480      	push	{r7}
 8007472:	b083      	sub	sp, #12
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	889b      	ldrh	r3, [r3, #4]
    }
 800747c:	4618      	mov	r0, r3
 800747e:	370c      	adds	r7, #12
 8007480:	46bd      	mov	sp, r7
 8007482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007486:	4770      	bx	lr

08007488 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 8007488:	b480      	push	{r7}
 800748a:	b083      	sub	sp, #12
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	7a9b      	ldrb	r3, [r3, #10]
 8007494:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8007498:	b2db      	uxtb	r3, r3
    }
 800749a:	4618      	mov	r0, r3
 800749c:	370c      	adds	r7, #12
 800749e:	46bd      	mov	sp, r7
 80074a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a4:	4770      	bx	lr

080074a6 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 80074a6:	b480      	push	{r7}
 80074a8:	b083      	sub	sp, #12
 80074aa:	af00      	add	r7, sp, #0
 80074ac:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	7a9b      	ldrb	r3, [r3, #10]
 80074b2:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80074b6:	b2db      	uxtb	r3, r3
    }
 80074b8:	4618      	mov	r0, r3
 80074ba:	370c      	adds	r7, #12
 80074bc:	46bd      	mov	sp, r7
 80074be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c2:	4770      	bx	lr

080074c4 <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b082      	sub	sp, #8
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
 80074cc:	4a05      	ldr	r2, [pc, #20]	; (80074e4 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	601a      	str	r2, [r3, #0]
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	4618      	mov	r0, r3
 80074d6:	f7ff ff67 	bl	80073a8 <_ZN8touchgfx4FontD1Ev>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	4618      	mov	r0, r3
 80074de:	3708      	adds	r7, #8
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd80      	pop	{r7, pc}
 80074e4:	0802af08 	.word	0x0802af08

080074e8 <_ZN8touchgfx9ConstFontD0Ev>:
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b082      	sub	sp, #8
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f7ff ffe7 	bl	80074c4 <_ZN8touchgfx9ConstFontD1Ev>
 80074f6:	211c      	movs	r1, #28
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f01e ff00 	bl	80262fe <_ZdlPvj>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	4618      	mov	r0, r3
 8007502:	3708      	adds	r7, #8
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}

08007508 <_ZN8touchgfx13GeneratedFontD1Ev>:

#include <touchgfx/ConstFont.hpp>

namespace touchgfx
{
class GeneratedFont : public ConstFont
 8007508:	b580      	push	{r7, lr}
 800750a:	b082      	sub	sp, #8
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
 8007510:	4a05      	ldr	r2, [pc, #20]	; (8007528 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	601a      	str	r2, [r3, #0]
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	4618      	mov	r0, r3
 800751a:	f7ff ffd3 	bl	80074c4 <_ZN8touchgfx9ConstFontD1Ev>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	4618      	mov	r0, r3
 8007522:	3708      	adds	r7, #8
 8007524:	46bd      	mov	sp, r7
 8007526:	bd80      	pop	{r7, pc}
 8007528:	0802a16c 	.word	0x0802a16c

0800752c <_ZN8touchgfx13GeneratedFontD0Ev>:
 800752c:	b580      	push	{r7, lr}
 800752e:	b082      	sub	sp, #8
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f7ff ffe7 	bl	8007508 <_ZN8touchgfx13GeneratedFontD1Ev>
 800753a:	212c      	movs	r1, #44	; 0x2c
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f01e fede 	bl	80262fe <_ZdlPvj>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	4618      	mov	r0, r3
 8007546:	3708      	adds	r7, #8
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}

0800754c <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800754c:	b480      	push	{r7}
 800754e:	b083      	sub	sp, #12
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
 8007554:	6039      	str	r1, [r7, #0]
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	4618      	mov	r0, r3
 800755a:	370c      	adds	r7, #12
 800755c:	46bd      	mov	sp, r7
 800755e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007562:	4770      	bx	lr

08007564 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
        timerWidgets.add(w);
    }

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
 8007564:	b580      	push	{r7, lr}
 8007566:	b082      	sub	sp, #8
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
    {
        timerWidgets.clear();
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	3304      	adds	r3, #4
 8007570:	4618      	mov	r0, r3
 8007572:	f014 f8ca 	bl	801b70a <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    }
 8007576:	bf00      	nop
 8007578:	3708      	adds	r7, #8
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}
	...

08007580 <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 8007580:	b480      	push	{r7}
 8007582:	b083      	sub	sp, #12
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 8007588:	4a07      	ldr	r2, [pc, #28]	; (80075a8 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	601a      	str	r2, [r3, #0]
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2200      	movs	r2, #0
 8007592:	605a      	str	r2, [r3, #4]
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2200      	movs	r2, #0
 8007598:	721a      	strb	r2, [r3, #8]
    {
    }
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	4618      	mov	r0, r3
 800759e:	370c      	adds	r7, #12
 80075a0:	46bd      	mov	sp, r7
 80075a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a6:	4770      	bx	lr
 80075a8:	0802a148 	.word	0x0802a148

080075ac <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 80075ac:	b480      	push	{r7}
 80075ae:	b083      	sub	sp, #12
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
    {
 80075b4:	4a04      	ldr	r2, [pc, #16]	; (80075c8 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	601a      	str	r2, [r3, #0]
    }
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	4618      	mov	r0, r3
 80075be:	370c      	adds	r7, #12
 80075c0:	46bd      	mov	sp, r7
 80075c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c6:	4770      	bx	lr
 80075c8:	0802a148 	.word	0x0802a148

080075cc <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b082      	sub	sp, #8
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
    }
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	f7ff ffe9 	bl	80075ac <_ZN8touchgfx10TransitionD1Ev>
 80075da:	210c      	movs	r1, #12
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f01e fe8e 	bl	80262fe <_ZdlPvj>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	4618      	mov	r0, r3
 80075e6:	3708      	adds	r7, #8
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bd80      	pop	{r7, pc}

080075ec <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 80075ec:	b480      	push	{r7}
 80075ee:	b083      	sub	sp, #12
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
    {
    }
 80075f4:	bf00      	nop
 80075f6:	370c      	adds	r7, #12
 80075f8:	46bd      	mov	sp, r7
 80075fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fe:	4770      	bx	lr

08007600 <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 8007600:	b480      	push	{r7}
 8007602:	b083      	sub	sp, #12
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
    {
    }
 8007608:	bf00      	nop
 800760a:	370c      	adds	r7, #12
 800760c:	46bd      	mov	sp, r7
 800760e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007612:	4770      	bx	lr

08007614 <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 8007614:	b480      	push	{r7}
 8007616:	b083      	sub	sp, #12
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
    {
    }
 800761c:	bf00      	nop
 800761e:	370c      	adds	r7, #12
 8007620:	46bd      	mov	sp, r7
 8007622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007626:	4770      	bx	lr

08007628 <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 8007628:	b580      	push	{r7, lr}
 800762a:	b082      	sub	sp, #8
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->invalidate();
 8007630:	f014 f846 	bl	801b6c0 <_ZN8touchgfx11Application11getInstanceEv>
 8007634:	4603      	mov	r3, r0
 8007636:	4618      	mov	r0, r3
 8007638:	f014 fc8c 	bl	801bf54 <_ZN8touchgfx11Application10invalidateEv>
    }
 800763c:	bf00      	nop
 800763e:	3708      	adds	r7, #8
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}

08007644 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 8007644:	b480      	push	{r7}
 8007646:	b083      	sub	sp, #12
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
 800764c:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	683a      	ldr	r2, [r7, #0]
 8007652:	605a      	str	r2, [r3, #4]
    }
 8007654:	bf00      	nop
 8007656:	370c      	adds	r7, #12
 8007658:	46bd      	mov	sp, r7
 800765a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765e:	4770      	bx	lr

08007660 <_ZN8touchgfx14MVPApplicationC1Ev>:
    MVPApplication()
 8007660:	b580      	push	{r7, lr}
 8007662:	b082      	sub	sp, #8
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
          pendingScreenTransitionCallback(0)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	4618      	mov	r0, r3
 800766c:	f014 f8ee 	bl	801b84c <_ZN8touchgfx11ApplicationC1Ev>
 8007670:	4a09      	ldr	r2, [pc, #36]	; (8007698 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	601a      	str	r2, [r3, #0]
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2200      	movs	r2, #0
 800767a:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2200      	movs	r2, #0
 8007682:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
        instance = this;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	4a04      	ldr	r2, [pc, #16]	; (800769c <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 800768a:	6013      	str	r3, [r2, #0]
    }
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	4618      	mov	r0, r3
 8007690:	3708      	adds	r7, #8
 8007692:	46bd      	mov	sp, r7
 8007694:	bd80      	pop	{r7, pc}
 8007696:	bf00      	nop
 8007698:	08029afc 	.word	0x08029afc
 800769c:	240261c8 	.word	0x240261c8

080076a0 <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 80076a0:	b480      	push	{r7}
 80076a2:	b083      	sub	sp, #12
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
 80076a8:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	683a      	ldr	r2, [r7, #0]
 80076ae:	601a      	str	r2, [r3, #0]
    }
 80076b0:	bf00      	nop
 80076b2:	370c      	adds	r7, #12
 80076b4:	46bd      	mov	sp, r7
 80076b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ba:	4770      	bx	lr

080076bc <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 80076bc:	b480      	push	{r7}
 80076be:	b083      	sub	sp, #12
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
    {
        done = true;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2201      	movs	r2, #1
 80076c8:	721a      	strb	r2, [r3, #8]
    }
 80076ca:	bf00      	nop
 80076cc:	370c      	adds	r7, #12
 80076ce:	46bd      	mov	sp, r7
 80076d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d4:	4770      	bx	lr

080076d6 <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 80076d6:	b480      	push	{r7}
 80076d8:	b083      	sub	sp, #12
 80076da:	af00      	add	r7, sp, #0
 80076dc:	6078      	str	r0, [r7, #4]
 80076de:	6039      	str	r1, [r7, #0]
    {
        model = m;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	683a      	ldr	r2, [r7, #0]
 80076e4:	605a      	str	r2, [r3, #4]
    }
 80076e6:	bf00      	nop
 80076e8:	370c      	adds	r7, #12
 80076ea:	46bd      	mov	sp, r7
 80076ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f0:	4770      	bx	lr
	...

080076f4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/mainscreen_screen/MainScreenView.hpp>
#include <gui/mainscreen_screen/MainScreenPresenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b084      	sub	sp, #16
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	60f8      	str	r0, [r7, #12]
 80076fc:	60b9      	str	r1, [r7, #8]
 80076fe:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	4618      	mov	r0, r3
 8007704:	f7ff ffac 	bl	8007660 <_ZN8touchgfx14MVPApplicationC1Ev>
 8007708:	4a12      	ldr	r2, [pc, #72]	; (8007754 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x60>)
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	601a      	str	r2, [r3, #0]
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8007714:	4618      	mov	r0, r3
 8007716:	f000 f89d 	bl	8007854 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	687a      	ldr	r2, [r7, #4]
 800771e:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	68ba      	ldr	r2, [r7, #8]
 8007726:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 800772a:	f7f9 f97f 	bl	8000a2c <_ZN8touchgfx3HAL11getInstanceEv>
 800772e:	4603      	mov	r3, r0
 8007730:	681a      	ldr	r2, [r3, #0]
 8007732:	3208      	adds	r2, #8
 8007734:	6812      	ldr	r2, [r2, #0]
 8007736:	2100      	movs	r1, #0
 8007738:	4618      	mov	r0, r3
 800773a:	4790      	blx	r2
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 800773c:	f7fc fbd2 	bl	8003ee4 <_ZN8touchgfx3HAL3lcdEv>
 8007740:	4603      	mov	r3, r0
 8007742:	4618      	mov	r0, r3
 8007744:	f019 ffb7 	bl	80216b6 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
}
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	4618      	mov	r0, r3
 800774c:	3710      	adds	r7, #16
 800774e:	46bd      	mov	sp, r7
 8007750:	bd80      	pop	{r7, pc}
 8007752:	bf00      	nop
 8007754:	08029a98 	.word	0x08029a98

08007758 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 8007758:	b480      	push	{r7}
 800775a:	b083      	sub	sp, #12
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
 8007760:	6039      	str	r1, [r7, #0]
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	4618      	mov	r0, r3
 8007766:	370c      	adds	r7, #12
 8007768:	46bd      	mov	sp, r7
 800776a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776e:	4770      	bx	lr

08007770 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8007770:	b580      	push	{r7, lr}
 8007772:	b082      	sub	sp, #8
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
 8007778:	6039      	str	r1, [r7, #0]
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	683a      	ldr	r2, [r7, #0]
 800777e:	4611      	mov	r1, r2
 8007780:	4618      	mov	r0, r3
 8007782:	f7ff ffe9 	bl	8007758 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	685a      	ldr	r2, [r3, #4]
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	605a      	str	r2, [r3, #4]
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	683a      	ldr	r2, [r7, #0]
 8007792:	3308      	adds	r3, #8
 8007794:	3208      	adds	r2, #8
 8007796:	e892 0003 	ldmia.w	r2, {r0, r1}
 800779a:	e883 0003 	stmia.w	r3, {r0, r1}
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	4618      	mov	r0, r3
 80077a2:	3708      	adds	r7, #8
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bd80      	pop	{r7, pc}

080077a8 <_ZN23FrontendApplicationBase32gotoMainScreenScreenNoTransitionEv>:
 */

// MainScreen

void FrontendApplicationBase::gotoMainScreenScreenNoTransition()
{
 80077a8:	b590      	push	{r4, r7, lr}
 80077aa:	b089      	sub	sp, #36	; 0x24
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoMainScreenScreenNoTransitionImpl);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f503 74a2 	add.w	r4, r3, #324	; 0x144
 80077b6:	4b10      	ldr	r3, [pc, #64]	; (80077f8 <_ZN23FrontendApplicationBase32gotoMainScreenScreenNoTransitionEv+0x50>)
 80077b8:	61bb      	str	r3, [r7, #24]
 80077ba:	2300      	movs	r3, #0
 80077bc:	61fb      	str	r3, [r7, #28]
 80077be:	f107 0008 	add.w	r0, r7, #8
 80077c2:	f107 0318 	add.w	r3, r7, #24
 80077c6:	cb0c      	ldmia	r3, {r2, r3}
 80077c8:	6879      	ldr	r1, [r7, #4]
 80077ca:	f000 f85f 	bl	800788c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 80077ce:	f107 0308 	add.w	r3, r7, #8
 80077d2:	4619      	mov	r1, r3
 80077d4:	4620      	mov	r0, r4
 80077d6:	f7ff ffcb 	bl	8007770 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 80077da:	f107 0308 	add.w	r3, r7, #8
 80077de:	4618      	mov	r0, r3
 80077e0:	f7fc f922 	bl	8003a28 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f503 72a2 	add.w	r2, r3, #324	; 0x144
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
}
 80077f0:	bf00      	nop
 80077f2:	3724      	adds	r7, #36	; 0x24
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bd90      	pop	{r4, r7, pc}
 80077f8:	080077fd 	.word	0x080077fd

080077fc <_ZN23FrontendApplicationBase36gotoMainScreenScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoMainScreenScreenNoTransitionImpl()
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b084      	sub	sp, #16
 8007800:	af02      	add	r7, sp, #8
 8007802:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<MainScreenView, MainScreenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f503 719e 	add.w	r1, r3, #316	; 0x13c
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8007810:	461a      	mov	r2, r3
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8007818:	9300      	str	r3, [sp, #0]
 800781a:	4b04      	ldr	r3, [pc, #16]	; (800782c <_ZN23FrontendApplicationBase36gotoMainScreenScreenNoTransitionImplEv+0x30>)
 800781c:	4804      	ldr	r0, [pc, #16]	; (8007830 <_ZN23FrontendApplicationBase36gotoMainScreenScreenNoTransitionImplEv+0x34>)
 800781e:	f000 f867 	bl	80078f0 <_ZN8touchgfx14makeTransitionI14MainScreenView19MainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8007822:	bf00      	nop
 8007824:	3708      	adds	r7, #8
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}
 800782a:	bf00      	nop
 800782c:	240261bc 	.word	0x240261bc
 8007830:	240261b8 	.word	0x240261b8

08007834 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 8007834:	b480      	push	{r7}
 8007836:	b083      	sub	sp, #12
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
 800783c:	4a04      	ldr	r2, [pc, #16]	; (8007850 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	601a      	str	r2, [r3, #0]
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	4618      	mov	r0, r3
 8007846:	370c      	adds	r7, #12
 8007848:	46bd      	mov	sp, r7
 800784a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784e:	4770      	bx	lr
 8007850:	08029b48 	.word	0x08029b48

08007854 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
    Callback()
 8007854:	b580      	push	{r7, lr}
 8007856:	b082      	sub	sp, #8
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun(0)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	4618      	mov	r0, r3
 8007860:	f7ff ffe8 	bl	8007834 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 8007864:	4a08      	ldr	r2, [pc, #32]	; (8007888 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	601a      	str	r2, [r3, #0]
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2200      	movs	r2, #0
 800786e:	605a      	str	r2, [r3, #4]
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2200      	movs	r2, #0
 8007874:	609a      	str	r2, [r3, #8]
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2200      	movs	r2, #0
 800787a:	60da      	str	r2, [r3, #12]
    }
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	4618      	mov	r0, r3
 8007880:	3708      	adds	r7, #8
 8007882:	46bd      	mov	sp, r7
 8007884:	bd80      	pop	{r7, pc}
 8007886:	bf00      	nop
 8007888:	08029ae4 	.word	0x08029ae4

0800788c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
    Callback(dest_type* pObject, void (dest_type::*pmemfun_0)())
 800788c:	b580      	push	{r7, lr}
 800788e:	b084      	sub	sp, #16
 8007890:	af00      	add	r7, sp, #0
 8007892:	60f8      	str	r0, [r7, #12]
 8007894:	60b9      	str	r1, [r7, #8]
 8007896:	4639      	mov	r1, r7
 8007898:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_0)
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	4618      	mov	r0, r3
 80078a0:	f7ff ffc8 	bl	8007834 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 80078a4:	4a08      	ldr	r2, [pc, #32]	; (80078c8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	601a      	str	r2, [r3, #0]
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	68ba      	ldr	r2, [r7, #8]
 80078ae:	605a      	str	r2, [r3, #4]
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	3308      	adds	r3, #8
 80078b4:	463a      	mov	r2, r7
 80078b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80078ba:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	4618      	mov	r0, r3
 80078c2:	3710      	adds	r7, #16
 80078c4:	46bd      	mov	sp, r7
 80078c6:	bd80      	pop	{r7, pc}
 80078c8:	08029ae4 	.word	0x08029ae4

080078cc <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b082      	sub	sp, #8
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	4618      	mov	r0, r3
 80078d8:	f7ff fe52 	bl	8007580 <_ZN8touchgfx10TransitionC1Ev>
 80078dc:	4a03      	ldr	r2, [pc, #12]	; (80078ec <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	601a      	str	r2, [r3, #0]
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	4618      	mov	r0, r3
 80078e6:	3708      	adds	r7, #8
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}
 80078ec:	0802a124 	.word	0x0802a124

080078f0 <_ZN8touchgfx14makeTransitionI14MainScreenView19MainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 80078f0:	b590      	push	{r4, r7, lr}
 80078f2:	b08f      	sub	sp, #60	; 0x3c
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	60f8      	str	r0, [r7, #12]
 80078f8:	60b9      	str	r1, [r7, #8]
 80078fa:	607a      	str	r2, [r7, #4]
 80078fc:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	689a      	ldr	r2, [r3, #8]
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	689b      	ldr	r3, [r3, #8]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	3320      	adds	r3, #32
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	4610      	mov	r0, r2
 800790e:	4798      	blx	r3
 8007910:	4603      	mov	r3, r0
 8007912:	2bdf      	cmp	r3, #223	; 0xdf
 8007914:	d805      	bhi.n	8007922 <_ZN8touchgfx14makeTransitionI14MainScreenView19MainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x32>
 8007916:	4b7e      	ldr	r3, [pc, #504]	; (8007b10 <_ZN8touchgfx14makeTransitionI14MainScreenView19MainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x220>)
 8007918:	4a7e      	ldr	r2, [pc, #504]	; (8007b14 <_ZN8touchgfx14makeTransitionI14MainScreenView19MainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800791a:	21a3      	movs	r1, #163	; 0xa3
 800791c:	487e      	ldr	r0, [pc, #504]	; (8007b18 <_ZN8touchgfx14makeTransitionI14MainScreenView19MainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800791e:	f01e fd1d 	bl	802635c <__assert_func>
 8007922:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	685a      	ldr	r2, [r3, #4]
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	685b      	ldr	r3, [r3, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	3320      	adds	r3, #32
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	4610      	mov	r0, r2
 8007934:	4798      	blx	r3
 8007936:	4603      	mov	r3, r0
 8007938:	2b0f      	cmp	r3, #15
 800793a:	d805      	bhi.n	8007948 <_ZN8touchgfx14makeTransitionI14MainScreenView19MainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x58>
 800793c:	4b77      	ldr	r3, [pc, #476]	; (8007b1c <_ZN8touchgfx14makeTransitionI14MainScreenView19MainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800793e:	4a75      	ldr	r2, [pc, #468]	; (8007b14 <_ZN8touchgfx14makeTransitionI14MainScreenView19MainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 8007940:	21a4      	movs	r1, #164	; 0xa4
 8007942:	4875      	ldr	r0, [pc, #468]	; (8007b18 <_ZN8touchgfx14makeTransitionI14MainScreenView19MainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8007944:	f01e fd0a 	bl	802635c <__assert_func>
 8007948:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	68da      	ldr	r2, [r3, #12]
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	68db      	ldr	r3, [r3, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	3320      	adds	r3, #32
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	4610      	mov	r0, r2
 800795a:	4798      	blx	r3
 800795c:	4603      	mov	r3, r0
 800795e:	2b0b      	cmp	r3, #11
 8007960:	d805      	bhi.n	800796e <_ZN8touchgfx14makeTransitionI14MainScreenView19MainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7e>
 8007962:	4b6f      	ldr	r3, [pc, #444]	; (8007b20 <_ZN8touchgfx14makeTransitionI14MainScreenView19MainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 8007964:	4a6b      	ldr	r2, [pc, #428]	; (8007b14 <_ZN8touchgfx14makeTransitionI14MainScreenView19MainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 8007966:	21a5      	movs	r1, #165	; 0xa5
 8007968:	486b      	ldr	r0, [pc, #428]	; (8007b18 <_ZN8touchgfx14makeTransitionI14MainScreenView19MainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800796a:	f01e fcf7 	bl	802635c <__assert_func>
 800796e:	bf00      	nop
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	62bb      	str	r3, [r7, #40]	; 0x28
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	627b      	str	r3, [r7, #36]	; 0x24
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800797c:	f013 fea0 	bl	801b6c0 <_ZN8touchgfx11Application11getInstanceEv>
 8007980:	4603      	mov	r3, r0
 8007982:	4618      	mov	r0, r3
 8007984:	f7ff fdee 	bl	8007564 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 8007988:	6a3b      	ldr	r3, [r7, #32]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d008      	beq.n	80079a2 <_ZN8touchgfx14makeTransitionI14MainScreenView19MainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb2>
        (*currentTrans)->tearDown();
 8007990:	6a3b      	ldr	r3, [r7, #32]
 8007992:	681a      	ldr	r2, [r3, #0]
 8007994:	6a3b      	ldr	r3, [r7, #32]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	330c      	adds	r3, #12
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	4610      	mov	r0, r2
 80079a0:	4798      	blx	r3
    if (*currentTrans)
 80079a2:	6a3b      	ldr	r3, [r7, #32]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d007      	beq.n	80079ba <_ZN8touchgfx14makeTransitionI14MainScreenView19MainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xca>
        (*currentTrans)->~Transition();
 80079aa:	6a3b      	ldr	r3, [r7, #32]
 80079ac:	681a      	ldr	r2, [r3, #0]
 80079ae:	6a3b      	ldr	r3, [r7, #32]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	4610      	mov	r0, r2
 80079b8:	4798      	blx	r3
    if (*currentScreen)
 80079ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d008      	beq.n	80079d4 <_ZN8touchgfx14makeTransitionI14MainScreenView19MainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe4>
        (*currentScreen)->tearDownScreen();
 80079c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079c4:	681a      	ldr	r2, [r3, #0]
 80079c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	3314      	adds	r3, #20
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	4610      	mov	r0, r2
 80079d2:	4798      	blx	r3
    if (*currentPresenter)
 80079d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d008      	beq.n	80079ee <_ZN8touchgfx14makeTransitionI14MainScreenView19MainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xfe>
        (*currentPresenter)->deactivate();
 80079dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079de:	681a      	ldr	r2, [r3, #0]
 80079e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	3304      	adds	r3, #4
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	4610      	mov	r0, r2
 80079ec:	4798      	blx	r3
    if (*currentScreen)
 80079ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d007      	beq.n	8007a06 <_ZN8touchgfx14makeTransitionI14MainScreenView19MainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x116>
        (*currentScreen)->~Screen();
 80079f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079f8:	681a      	ldr	r2, [r3, #0]
 80079fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	4610      	mov	r0, r2
 8007a04:	4798      	blx	r3
    if (*currentPresenter)
 8007a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d008      	beq.n	8007a20 <_ZN8touchgfx14makeTransitionI14MainScreenView19MainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x130>
        (*currentPresenter)->~Presenter();
 8007a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a10:	681a      	ldr	r2, [r3, #0]
 8007a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	3308      	adds	r3, #8
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	4610      	mov	r0, r2
 8007a1e:	4798      	blx	r3
}
 8007a20:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	68db      	ldr	r3, [r3, #12]
 8007a26:	2100      	movs	r1, #0
 8007a28:	4618      	mov	r0, r3
 8007a2a:	f000 f87b 	bl	8007b24 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 8007a2e:	4603      	mov	r3, r0
 8007a30:	4619      	mov	r1, r3
 8007a32:	200c      	movs	r0, #12
 8007a34:	f7ff fd8a 	bl	800754c <_ZnwjPv>
 8007a38:	4604      	mov	r4, r0
 8007a3a:	4620      	mov	r0, r4
 8007a3c:	f7ff ff46 	bl	80078cc <_ZN8touchgfx12NoTransitionC1Ev>
 8007a40:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	689b      	ldr	r3, [r3, #8]
 8007a46:	2100      	movs	r1, #0
 8007a48:	4618      	mov	r0, r3
 8007a4a:	f000 f87e 	bl	8007b4a <_ZN8touchgfx17AbstractPartition2atI14MainScreenViewEERT_t>
 8007a4e:	4603      	mov	r3, r0
 8007a50:	4619      	mov	r1, r3
 8007a52:	20e0      	movs	r0, #224	; 0xe0
 8007a54:	f7ff fd7a 	bl	800754c <_ZnwjPv>
 8007a58:	4604      	mov	r4, r0
 8007a5a:	4620      	mov	r0, r4
 8007a5c:	f001 fa7a 	bl	8008f54 <_ZN14MainScreenViewC1Ev>
 8007a60:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	685b      	ldr	r3, [r3, #4]
 8007a66:	2100      	movs	r1, #0
 8007a68:	4618      	mov	r0, r3
 8007a6a:	f000 f881 	bl	8007b70 <_ZN8touchgfx17AbstractPartition2atI19MainScreenPresenterEERT_t>
 8007a6e:	4603      	mov	r3, r0
 8007a70:	4619      	mov	r1, r3
 8007a72:	2010      	movs	r0, #16
 8007a74:	f7ff fd6a 	bl	800754c <_ZnwjPv>
 8007a78:	4604      	mov	r4, r0
 8007a7a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007a7c:	4620      	mov	r0, r4
 8007a7e:	f001 f9dd 	bl	8008e3c <_ZN19MainScreenPresenterC1ER14MainScreenView>
 8007a82:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a88:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a8e:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a94:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 8007a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d002      	beq.n	8007aa2 <_ZN8touchgfx14makeTransitionI14MainScreenView19MainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 8007a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a9e:	3304      	adds	r3, #4
 8007aa0:	e000      	b.n	8007aa4 <_ZN8touchgfx14makeTransitionI14MainScreenView19MainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b4>
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	4619      	mov	r1, r3
 8007aa6:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8007aa8:	f7ff fdfa 	bl	80076a0 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8007aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aae:	3304      	adds	r3, #4
 8007ab0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	f7ff fe0f 	bl	80076d6 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 8007ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007abc:	4618      	mov	r0, r3
 8007abe:	f000 f86a 	bl	8007b96 <_ZN8touchgfx4ViewI19MainScreenPresenterE4bindERS1_>
 8007ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ac4:	61fb      	str	r3, [r7, #28]
 8007ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ac8:	61bb      	str	r3, [r7, #24]
 8007aca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007acc:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 8007ace:	69fb      	ldr	r3, [r7, #28]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	330c      	adds	r3, #12
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	69f8      	ldr	r0, [r7, #28]
 8007ad8:	4798      	blx	r3
    newPresenter->activate();
 8007ada:	69bb      	ldr	r3, [r7, #24]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	69b8      	ldr	r0, [r7, #24]
 8007ae2:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8007ae4:	6979      	ldr	r1, [r7, #20]
 8007ae6:	69f8      	ldr	r0, [r7, #28]
 8007ae8:	f015 fa9c 	bl	801d024 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8007aec:	697b      	ldr	r3, [r7, #20]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	3310      	adds	r3, #16
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	6978      	ldr	r0, [r7, #20]
 8007af6:	4798      	blx	r3
    newTransition->invalidate();
 8007af8:	697b      	ldr	r3, [r7, #20]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	3314      	adds	r3, #20
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	6978      	ldr	r0, [r7, #20]
 8007b02:	4798      	blx	r3
}
 8007b04:	bf00      	nop

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 8007b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8007b08:	4618      	mov	r0, r3
 8007b0a:	373c      	adds	r7, #60	; 0x3c
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bd90      	pop	{r4, r7, pc}
 8007b10:	08029050 	.word	0x08029050
 8007b14:	080290e0 	.word	0x080290e0
 8007b18:	080291ec 	.word	0x080291ec
 8007b1c:	08029234 	.word	0x08029234
 8007b20:	080292d8 	.word	0x080292d8

08007b24 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b082      	sub	sp, #8
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
 8007b2c:	460b      	mov	r3, r1
 8007b2e:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	3324      	adds	r3, #36	; 0x24
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	887a      	ldrh	r2, [r7, #2]
 8007b3a:	4611      	mov	r1, r2
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	4798      	blx	r3
 8007b40:	4603      	mov	r3, r0
    }
 8007b42:	4618      	mov	r0, r3
 8007b44:	3708      	adds	r7, #8
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}

08007b4a <_ZN8touchgfx17AbstractPartition2atI14MainScreenViewEERT_t>:
    T& at(const uint16_t index)
 8007b4a:	b580      	push	{r7, lr}
 8007b4c:	b082      	sub	sp, #8
 8007b4e:	af00      	add	r7, sp, #0
 8007b50:	6078      	str	r0, [r7, #4]
 8007b52:	460b      	mov	r3, r1
 8007b54:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	3324      	adds	r3, #36	; 0x24
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	887a      	ldrh	r2, [r7, #2]
 8007b60:	4611      	mov	r1, r2
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	4798      	blx	r3
 8007b66:	4603      	mov	r3, r0
    }
 8007b68:	4618      	mov	r0, r3
 8007b6a:	3708      	adds	r7, #8
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd80      	pop	{r7, pc}

08007b70 <_ZN8touchgfx17AbstractPartition2atI19MainScreenPresenterEERT_t>:
    T& at(const uint16_t index)
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b082      	sub	sp, #8
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
 8007b78:	460b      	mov	r3, r1
 8007b7a:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	3324      	adds	r3, #36	; 0x24
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	887a      	ldrh	r2, [r7, #2]
 8007b86:	4611      	mov	r1, r2
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	4798      	blx	r3
 8007b8c:	4603      	mov	r3, r0
    }
 8007b8e:	4618      	mov	r0, r3
 8007b90:	3708      	adds	r7, #8
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bd80      	pop	{r7, pc}

08007b96 <_ZN8touchgfx4ViewI19MainScreenPresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This function
     * is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
 8007b96:	b480      	push	{r7}
 8007b98:	b083      	sub	sp, #12
 8007b9a:	af00      	add	r7, sp, #0
 8007b9c:	6078      	str	r0, [r7, #4]
 8007b9e:	6039      	str	r1, [r7, #0]
    {
        presenter = &newPresenter;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	683a      	ldr	r2, [r7, #0]
 8007ba4:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8007ba6:	bf00      	nop
 8007ba8:	370c      	adds	r7, #12
 8007baa:	46bd      	mov	sp, r7
 8007bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb0:	4770      	bx	lr
	...

08007bb4 <_ZN8touchgfx12NoTransitionD1Ev>:
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b082      	sub	sp, #8
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
 8007bbc:	4a05      	ldr	r2, [pc, #20]	; (8007bd4 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	601a      	str	r2, [r3, #0]
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	f7ff fcf1 	bl	80075ac <_ZN8touchgfx10TransitionD1Ev>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	4618      	mov	r0, r3
 8007bce:	3708      	adds	r7, #8
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd80      	pop	{r7, pc}
 8007bd4:	0802a124 	.word	0x0802a124

08007bd8 <_ZN8touchgfx12NoTransitionD0Ev>:
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b082      	sub	sp, #8
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f7ff ffe7 	bl	8007bb4 <_ZN8touchgfx12NoTransitionD1Ev>
 8007be6:	210c      	movs	r1, #12
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f01e fb88 	bl	80262fe <_ZdlPvj>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	3708      	adds	r7, #8
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}

08007bf8 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:

    virtual const uint8_t* getPixelData(const GlyphNode* glyph) const;

    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
 8007bf8:	b480      	push	{r7}
 8007bfa:	b083      	sub	sp, #12
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    }
 8007c04:	4618      	mov	r0, r3
 8007c06:	370c      	adds	r7, #12
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0e:	4770      	bx	lr

08007c10 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
 8007c10:	b480      	push	{r7}
 8007c12:	b083      	sub	sp, #12
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
    {
        return arabicTable;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    }
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	370c      	adds	r7, #12
 8007c20:	46bd      	mov	sp, r7
 8007c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c26:	4770      	bx	lr

08007c28 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b08e      	sub	sp, #56	; 0x38
 8007c2c:	af0a      	add	r7, sp, #40	; 0x28
 8007c2e:	60f8      	str	r0, [r7, #12]
 8007c30:	60b9      	str	r1, [r7, #8]
 8007c32:	4611      	mov	r1, r2
 8007c34:	461a      	mov	r2, r3
 8007c36:	460b      	mov	r3, r1
 8007c38:	80fb      	strh	r3, [r7, #6]
 8007c3a:	4613      	mov	r3, r2
 8007c3c:	80bb      	strh	r3, [r7, #4]
    : ConstFont(glyphs, numGlyphs, height, baseline, pixAboveTop, pixBelowBottom, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
      glyphData(glyphDataInternalFlash),
      kerningData(kerningList),
      gsubTable(gsubData),
      arabicTable(formsTable)
 8007c3e:	68f8      	ldr	r0, [r7, #12]
 8007c40:	88b9      	ldrh	r1, [r7, #4]
 8007c42:	88fa      	ldrh	r2, [r7, #6]
 8007c44:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007c48:	9308      	str	r3, [sp, #32]
 8007c4a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007c4c:	9307      	str	r3, [sp, #28]
 8007c4e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8007c52:	9306      	str	r3, [sp, #24]
 8007c54:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007c58:	9305      	str	r3, [sp, #20]
 8007c5a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007c5e:	9304      	str	r3, [sp, #16]
 8007c60:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007c64:	9303      	str	r3, [sp, #12]
 8007c66:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007c6a:	9302      	str	r3, [sp, #8]
 8007c6c:	7f3b      	ldrb	r3, [r7, #28]
 8007c6e:	9301      	str	r3, [sp, #4]
 8007c70:	8b3b      	ldrh	r3, [r7, #24]
 8007c72:	9300      	str	r3, [sp, #0]
 8007c74:	460b      	mov	r3, r1
 8007c76:	68b9      	ldr	r1, [r7, #8]
 8007c78:	f014 fe14 	bl	801c8a4 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 8007c7c:	4a09      	ldr	r2, [pc, #36]	; (8007ca4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x7c>)
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	601a      	str	r2, [r3, #0]
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c86:	61da      	str	r2, [r3, #28]
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c8c:	621a      	str	r2, [r3, #32]
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007c92:	625a      	str	r2, [r3, #36]	; 0x24
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c98:	629a      	str	r2, [r3, #40]	; 0x28
{
}
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	3710      	adds	r7, #16
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	bd80      	pop	{r7, pc}
 8007ca4:	0802a16c 	.word	0x0802a16c

08007ca8 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 8007ca8:	b480      	push	{r7}
 8007caa:	b085      	sub	sp, #20
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
 8007cb0:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	69db      	ldr	r3, [r3, #28]
 8007cb6:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	889b      	ldrh	r3, [r3, #4]
 8007cbc:	0adb      	lsrs	r3, r3, #11
 8007cbe:	b29b      	uxth	r3, r3
 8007cc0:	009b      	lsls	r3, r3, #2
 8007cc2:	68fa      	ldr	r2, [r7, #12]
 8007cc4:	4413      	add	r3, r2
 8007cc6:	681a      	ldr	r2, [r3, #0]
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	4413      	add	r3, r2
}
 8007cce:	4618      	mov	r0, r3
 8007cd0:	3714      	adds	r7, #20
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd8:	4770      	bx	lr

08007cda <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 8007cda:	b480      	push	{r7}
 8007cdc:	b089      	sub	sp, #36	; 0x24
 8007cde:	af00      	add	r7, sp, #0
 8007ce0:	60f8      	str	r0, [r7, #12]
 8007ce2:	460b      	mov	r3, r1
 8007ce4:	607a      	str	r2, [r7, #4]
 8007ce6:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d003      	beq.n	8007cf6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	7b1b      	ldrb	r3, [r3, #12]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d101      	bne.n	8007cfa <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	e030      	b.n	8007d5c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	6a1a      	ldr	r2, [r3, #32]
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 8007d02:	697b      	ldr	r3, [r7, #20]
 8007d04:	7b5b      	ldrb	r3, [r3, #13]
 8007d06:	021b      	lsls	r3, r3, #8
 8007d08:	b21b      	sxth	r3, r3
 8007d0a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007d0e:	b219      	sxth	r1, r3
 8007d10:	697b      	ldr	r3, [r7, #20]
 8007d12:	7adb      	ldrb	r3, [r3, #11]
 8007d14:	b21b      	sxth	r3, r3
 8007d16:	430b      	orrs	r3, r1
 8007d18:	b21b      	sxth	r3, r3
 8007d1a:	b29b      	uxth	r3, r3
 8007d1c:	009b      	lsls	r3, r3, #2
 8007d1e:	4413      	add	r3, r2
 8007d20:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	7b1b      	ldrb	r3, [r3, #12]
 8007d26:	837b      	strh	r3, [r7, #26]
 8007d28:	8b7b      	ldrh	r3, [r7, #26]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d015      	beq.n	8007d5a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    {
        if (prevChar == kerndata->unicodePrevChar)
 8007d2e:	69fb      	ldr	r3, [r7, #28]
 8007d30:	881b      	ldrh	r3, [r3, #0]
 8007d32:	897a      	ldrh	r2, [r7, #10]
 8007d34:	429a      	cmp	r2, r3
 8007d36:	d103      	bne.n	8007d40 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
        {
            return kerndata->distance;
 8007d38:	69fb      	ldr	r3, [r7, #28]
 8007d3a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8007d3e:	e00d      	b.n	8007d5c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        }
        if (prevChar < kerndata->unicodePrevChar)
 8007d40:	69fb      	ldr	r3, [r7, #28]
 8007d42:	881b      	ldrh	r3, [r3, #0]
 8007d44:	897a      	ldrh	r2, [r7, #10]
 8007d46:	429a      	cmp	r2, r3
 8007d48:	d306      	bcc.n	8007d58 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x7e>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8007d4a:	8b7b      	ldrh	r3, [r7, #26]
 8007d4c:	3b01      	subs	r3, #1
 8007d4e:	837b      	strh	r3, [r7, #26]
 8007d50:	69fb      	ldr	r3, [r7, #28]
 8007d52:	3304      	adds	r3, #4
 8007d54:	61fb      	str	r3, [r7, #28]
 8007d56:	e7e7      	b.n	8007d28 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x4e>
        {
            break;
 8007d58:	bf00      	nop
        }
    }
    return 0;
 8007d5a:	2300      	movs	r3, #0
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	3724      	adds	r7, #36	; 0x24
 8007d60:	46bd      	mov	sp, r7
 8007d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d66:	4770      	bx	lr

08007d68 <_ZN8touchgfx6BitmapC1Et>:
     * Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
 8007d68:	b480      	push	{r7}
 8007d6a:	b083      	sub	sp, #12
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
 8007d70:	460b      	mov	r3, r1
 8007d72:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	887a      	ldrh	r2, [r7, #2]
 8007d78:	801a      	strh	r2, [r3, #0]
    {
    }
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	370c      	adds	r7, #12
 8007d80:	46bd      	mov	sp, r7
 8007d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d86:	4770      	bx	lr

08007d88 <_ZN8touchgfx8DrawableC1Ev>:
    Drawable()
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b082      	sub	sp, #8
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
          visible(true)
 8007d90:	4a14      	ldr	r2, [pc, #80]	; (8007de4 <_ZN8touchgfx8DrawableC1Ev+0x5c>)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	601a      	str	r2, [r3, #0]
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	3304      	adds	r3, #4
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	f7fb f826 	bl	8002dec <_ZN8touchgfx4RectC1Ev>
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	330c      	adds	r3, #12
 8007da4:	4618      	mov	r0, r3
 8007da6:	f7fb f821 	bl	8002dec <_ZN8touchgfx4RectC1Ev>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2200      	movs	r2, #0
 8007dae:	615a      	str	r2, [r3, #20]
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2200      	movs	r2, #0
 8007db4:	619a      	str	r2, [r3, #24]
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2200      	movs	r2, #0
 8007dba:	61da      	str	r2, [r3, #28]
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	841a      	strh	r2, [r3, #32]
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	845a      	strh	r2, [r3, #34]	; 0x22
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2200      	movs	r2, #0
 8007dcc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2201      	movs	r2, #1
 8007dd4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	4618      	mov	r0, r3
 8007ddc:	3708      	adds	r7, #8
 8007dde:	46bd      	mov	sp, r7
 8007de0:	bd80      	pop	{r7, pc}
 8007de2:	bf00      	nop
 8007de4:	0802aea0 	.word	0x0802aea0

08007de8 <_ZN8touchgfx8Drawable11setPositionEssss>:
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b084      	sub	sp, #16
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	60f8      	str	r0, [r7, #12]
 8007df0:	4608      	mov	r0, r1
 8007df2:	4611      	mov	r1, r2
 8007df4:	461a      	mov	r2, r3
 8007df6:	4603      	mov	r3, r0
 8007df8:	817b      	strh	r3, [r7, #10]
 8007dfa:	460b      	mov	r3, r1
 8007dfc:	813b      	strh	r3, [r7, #8]
 8007dfe:	4613      	mov	r3, r2
 8007e00:	80fb      	strh	r3, [r7, #6]
        setXY(x, y);
 8007e02:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8007e06:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007e0a:	4619      	mov	r1, r3
 8007e0c:	68f8      	ldr	r0, [r7, #12]
 8007e0e:	f000 f80c 	bl	8007e2a <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 8007e12:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8007e16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007e1a:	4619      	mov	r1, r3
 8007e1c:	68f8      	ldr	r0, [r7, #12]
 8007e1e:	f000 f822 	bl	8007e66 <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 8007e22:	bf00      	nop
 8007e24:	3710      	adds	r7, #16
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bd80      	pop	{r7, pc}

08007e2a <_ZN8touchgfx8Drawable5setXYEss>:
    void setXY(int16_t x, int16_t y)
 8007e2a:	b580      	push	{r7, lr}
 8007e2c:	b082      	sub	sp, #8
 8007e2e:	af00      	add	r7, sp, #0
 8007e30:	6078      	str	r0, [r7, #4]
 8007e32:	460b      	mov	r3, r1
 8007e34:	807b      	strh	r3, [r7, #2]
 8007e36:	4613      	mov	r3, r2
 8007e38:	803b      	strh	r3, [r7, #0]
        setX(x);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	3330      	adds	r3, #48	; 0x30
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8007e46:	4611      	mov	r1, r2
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	4798      	blx	r3
        setY(y);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	3334      	adds	r3, #52	; 0x34
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f9b7 2000 	ldrsh.w	r2, [r7]
 8007e58:	4611      	mov	r1, r2
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	4798      	blx	r3
    }
 8007e5e:	bf00      	nop
 8007e60:	3708      	adds	r7, #8
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bd80      	pop	{r7, pc}

08007e66 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
    void setWidthHeight(int16_t width, int16_t height)
 8007e66:	b580      	push	{r7, lr}
 8007e68:	b082      	sub	sp, #8
 8007e6a:	af00      	add	r7, sp, #0
 8007e6c:	6078      	str	r0, [r7, #4]
 8007e6e:	460b      	mov	r3, r1
 8007e70:	807b      	strh	r3, [r7, #2]
 8007e72:	4613      	mov	r3, r2
 8007e74:	803b      	strh	r3, [r7, #0]
        setWidth(width);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	3338      	adds	r3, #56	; 0x38
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8007e82:	4611      	mov	r1, r2
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	4798      	blx	r3
        setHeight(height);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	333c      	adds	r3, #60	; 0x3c
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f9b7 2000 	ldrsh.w	r2, [r7]
 8007e94:	4611      	mov	r1, r2
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	4798      	blx	r3
    }
 8007e9a:	bf00      	nop
 8007e9c:	3708      	adds	r7, #8
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bd80      	pop	{r7, pc}

08007ea2 <_ZN8touchgfx8Drawable12setTouchableEb>:
    void setTouchable(bool touch)
 8007ea2:	b480      	push	{r7}
 8007ea4:	b083      	sub	sp, #12
 8007ea6:	af00      	add	r7, sp, #0
 8007ea8:	6078      	str	r0, [r7, #4]
 8007eaa:	460b      	mov	r3, r1
 8007eac:	70fb      	strb	r3, [r7, #3]
        touchable = touch;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	78fa      	ldrb	r2, [r7, #3]
 8007eb2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
 8007eb6:	bf00      	nop
 8007eb8:	370c      	adds	r7, #12
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec0:	4770      	bx	lr
	...

08007ec4 <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b082      	sub	sp, #8
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
    {
 8007ecc:	4a06      	ldr	r2, [pc, #24]	; (8007ee8 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	601a      	str	r2, [r3, #0]
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	3304      	adds	r3, #4
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	f000 fb3a 	bl	8008550 <_ZN8touchgfx9ContainerD1Ev>
    }
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	4618      	mov	r0, r3
 8007ee0:	3708      	adds	r7, #8
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bd80      	pop	{r7, pc}
 8007ee6:	bf00      	nop
 8007ee8:	0802afa4 	.word	0x0802afa4

08007eec <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b082      	sub	sp, #8
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
    }
 8007ef4:	6878      	ldr	r0, [r7, #4]
 8007ef6:	f7ff ffe5 	bl	8007ec4 <_ZN8touchgfx6ScreenD1Ev>
 8007efa:	213c      	movs	r1, #60	; 0x3c
 8007efc:	6878      	ldr	r0, [r7, #4]
 8007efe:	f01e f9fe 	bl	80262fe <_ZdlPvj>
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	4618      	mov	r0, r3
 8007f06:	3708      	adds	r7, #8
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	bd80      	pop	{r7, pc}

08007f0c <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 8007f0c:	b480      	push	{r7}
 8007f0e:	b083      	sub	sp, #12
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
    {
    }
 8007f14:	bf00      	nop
 8007f16:	370c      	adds	r7, #12
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1e:	4770      	bx	lr

08007f20 <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 8007f20:	b480      	push	{r7}
 8007f22:	b083      	sub	sp, #12
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
    {
    }
 8007f28:	bf00      	nop
 8007f2a:	370c      	adds	r7, #12
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f32:	4770      	bx	lr

08007f34 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
 8007f34:	b480      	push	{r7}
 8007f36:	b083      	sub	sp, #12
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
    {
    }
 8007f3c:	bf00      	nop
 8007f3e:	370c      	adds	r7, #12
 8007f40:	46bd      	mov	sp, r7
 8007f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f46:	4770      	bx	lr

08007f48 <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 8007f48:	b480      	push	{r7}
 8007f4a:	b083      	sub	sp, #12
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
    {
    }
 8007f50:	bf00      	nop
 8007f52:	370c      	adds	r7, #12
 8007f54:	46bd      	mov	sp, r7
 8007f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5a:	4770      	bx	lr

08007f5c <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 8007f5c:	b480      	push	{r7}
 8007f5e:	b083      	sub	sp, #12
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
 8007f64:	460b      	mov	r3, r1
 8007f66:	70fb      	strb	r3, [r7, #3]
    {
        (void)key; // Unused variable
    }
 8007f68:	bf00      	nop
 8007f6a:	370c      	adds	r7, #12
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f72:	4770      	bx	lr

08007f74 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b082      	sub	sp, #8
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
 8007f7c:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	3304      	adds	r3, #4
 8007f82:	6839      	ldr	r1, [r7, #0]
 8007f84:	4618      	mov	r0, r3
 8007f86:	f010 fe23 	bl	8018bd0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 8007f8a:	bf00      	nop
 8007f8c:	3708      	adds	r7, #8
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	bd80      	pop	{r7, pc}
	...

08007f94 <_ZN8touchgfx6WidgetC1Ev>:
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b082      	sub	sp, #8
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	f7ff fef2 	bl	8007d88 <_ZN8touchgfx8DrawableC1Ev>
 8007fa4:	4a03      	ldr	r2, [pc, #12]	; (8007fb4 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	601a      	str	r2, [r3, #0]
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	4618      	mov	r0, r3
 8007fae:	3708      	adds	r7, #8
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bd80      	pop	{r7, pc}
 8007fb4:	08029c28 	.word	0x08029c28

08007fb8 <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b082      	sub	sp, #8
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	2326      	movs	r3, #38	; 0x26
 8007fc6:	461a      	mov	r2, r3
 8007fc8:	2100      	movs	r1, #0
 8007fca:	f01e fa57 	bl	802647c <memset>
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	f7ff ffdf 	bl	8007f94 <_ZN8touchgfx6WidgetC1Ev>
 8007fd6:	4a09      	ldr	r2, [pc, #36]	; (8007ffc <_ZN8touchgfx3BoxC1Ev+0x44>)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	601a      	str	r2, [r3, #0]
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	22ff      	movs	r2, #255	; 0xff
 8007fe0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	3328      	adds	r3, #40	; 0x28
 8007fe8:	2100      	movs	r1, #0
 8007fea:	4618      	mov	r0, r3
 8007fec:	f7fb fe46 	bl	8003c7c <_ZN8touchgfx9colortypeC1Em>
    {
    }
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	3708      	adds	r7, #8
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}
 8007ffa:	bf00      	nop
 8007ffc:	0802acb4 	.word	0x0802acb4

08008000 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  newColor The color of the box.
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
 8008000:	b480      	push	{r7}
 8008002:	b083      	sub	sp, #12
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
 8008008:	6039      	str	r1, [r7, #0]
    {
        color = newColor;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	683a      	ldr	r2, [r7, #0]
 800800e:	629a      	str	r2, [r3, #40]	; 0x28
    }
 8008010:	bf00      	nop
 8008012:	370c      	adds	r7, #12
 8008014:	46bd      	mov	sp, r7
 8008016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801a:	4770      	bx	lr

0800801c <_ZN8touchgfx14AbstractButtonC1Ev>:
 */
class AbstractButton : public Widget
{
public:
    /** Sets this Widget touchable so the user can interact with buttons. */
    AbstractButton()
 800801c:	b580      	push	{r7, lr}
 800801e:	b082      	sub	sp, #8
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
        : Widget(), action(), pressed(false)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	4618      	mov	r0, r3
 8008028:	2326      	movs	r3, #38	; 0x26
 800802a:	461a      	mov	r2, r3
 800802c:	2100      	movs	r1, #0
 800802e:	f01e fa25 	bl	802647c <memset>
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	4618      	mov	r0, r3
 8008036:	f7ff ffad 	bl	8007f94 <_ZN8touchgfx6WidgetC1Ev>
 800803a:	4a0a      	ldr	r2, [pc, #40]	; (8008064 <_ZN8touchgfx14AbstractButtonC1Ev+0x48>)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	601a      	str	r2, [r3, #0]
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2200      	movs	r2, #0
 8008044:	629a      	str	r2, [r3, #40]	; 0x28
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2200      	movs	r2, #0
 800804a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    {
        setTouchable(true);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2101      	movs	r1, #1
 8008052:	4618      	mov	r0, r3
 8008054:	f7ff ff25 	bl	8007ea2 <_ZN8touchgfx8Drawable12setTouchableEb>
    }
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	4618      	mov	r0, r3
 800805c:	3708      	adds	r7, #8
 800805e:	46bd      	mov	sp, r7
 8008060:	bd80      	pop	{r7, pc}
 8008062:	bf00      	nop
 8008064:	0802ab5c 	.word	0x0802ab5c

08008068 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>:
     * @param  callback The callback to be executed. The callback will be executed with a
     *                  reference to the AbstractButton.
     *
     * @see GenericCallback, handleClickEvent, ClickEvent
     */
    void setAction(GenericCallback<const AbstractButton&>& callback)
 8008068:	b480      	push	{r7}
 800806a:	b083      	sub	sp, #12
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
 8008070:	6039      	str	r1, [r7, #0]
    {
        action = &callback;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	683a      	ldr	r2, [r7, #0]
 8008076:	629a      	str	r2, [r3, #40]	; 0x28
    }
 8008078:	bf00      	nop
 800807a:	370c      	adds	r7, #12
 800807c:	46bd      	mov	sp, r7
 800807e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008082:	4770      	bx	lr

08008084 <_ZN8touchgfx14AbstractButtonD1Ev>:
class AbstractButton : public Widget
 8008084:	b580      	push	{r7, lr}
 8008086:	b082      	sub	sp, #8
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
 800808c:	4a05      	ldr	r2, [pc, #20]	; (80080a4 <_ZN8touchgfx14AbstractButtonD1Ev+0x20>)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	601a      	str	r2, [r3, #0]
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	4618      	mov	r0, r3
 8008096:	f7fb ff83 	bl	8003fa0 <_ZN8touchgfx6WidgetD1Ev>
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	4618      	mov	r0, r3
 800809e:	3708      	adds	r7, #8
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}
 80080a4:	0802ab5c 	.word	0x0802ab5c

080080a8 <_ZN8touchgfx14AbstractButtonD0Ev>:
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b082      	sub	sp, #8
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	f7ff ffe7 	bl	8008084 <_ZN8touchgfx14AbstractButtonD1Ev>
 80080b6:	2130      	movs	r1, #48	; 0x30
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	f01e f920 	bl	80262fe <_ZdlPvj>
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	4618      	mov	r0, r3
 80080c2:	3708      	adds	r7, #8
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd80      	pop	{r7, pc}

080080c8 <_ZN8touchgfx6ButtonC1Ev>:
 * pressed state.
 */
class Button : public AbstractButton
{
public:
    Button()
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b082      	sub	sp, #8
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
        : AbstractButton(), up(), down(), alpha(255)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	4618      	mov	r0, r3
 80080d4:	f7ff ffa2 	bl	800801c <_ZN8touchgfx14AbstractButtonC1Ev>
 80080d8:	4a0c      	ldr	r2, [pc, #48]	; (800810c <_ZN8touchgfx6ButtonC1Ev+0x44>)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	601a      	str	r2, [r3, #0]
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	332e      	adds	r3, #46	; 0x2e
 80080e2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80080e6:	4618      	mov	r0, r3
 80080e8:	f7ff fe3e 	bl	8007d68 <_ZN8touchgfx6BitmapC1Et>
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	3330      	adds	r3, #48	; 0x30
 80080f0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80080f4:	4618      	mov	r0, r3
 80080f6:	f7ff fe37 	bl	8007d68 <_ZN8touchgfx6BitmapC1Et>
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	22ff      	movs	r2, #255	; 0xff
 80080fe:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    {
    }
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	4618      	mov	r0, r3
 8008106:	3708      	adds	r7, #8
 8008108:	46bd      	mov	sp, r7
 800810a:	bd80      	pop	{r7, pc}
 800810c:	0802ad1c 	.word	0x0802ad1c

08008110 <_ZN8touchgfx12ToggleButton10setBitmapsERKNS_6BitmapES3_>:
 * when it is subsequently pressed, it will pop back out.
 */
class ToggleButton : public Button
{
public:
    virtual void setBitmaps(const Bitmap& bitmapReleased, const Bitmap& bitmapPressed)
 8008110:	b580      	push	{r7, lr}
 8008112:	b084      	sub	sp, #16
 8008114:	af00      	add	r7, sp, #0
 8008116:	60f8      	str	r0, [r7, #12]
 8008118:	60b9      	str	r1, [r7, #8]
 800811a:	607a      	str	r2, [r7, #4]
    {
        originalPressed = bitmapPressed;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	687a      	ldr	r2, [r7, #4]
 8008120:	8812      	ldrh	r2, [r2, #0]
 8008122:	869a      	strh	r2, [r3, #52]	; 0x34
        Button::setBitmaps(bitmapReleased, bitmapPressed);
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	687a      	ldr	r2, [r7, #4]
 8008128:	68b9      	ldr	r1, [r7, #8]
 800812a:	4618      	mov	r0, r3
 800812c:	f012 f984 	bl	801a438 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    }
 8008130:	bf00      	nop
 8008132:	3710      	adds	r7, #16
 8008134:	46bd      	mov	sp, r7
 8008136:	bd80      	pop	{r7, pc}

08008138 <_ZN18MainScreenViewBase14ToggleUserLED1Ev>:
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void ToggleUserLED1()
 8008138:	b480      	push	{r7}
 800813a:	b083      	sub	sp, #12
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in MainScreen
    }
 8008140:	bf00      	nop
 8008142:	370c      	adds	r7, #12
 8008144:	46bd      	mov	sp, r7
 8008146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814a:	4770      	bx	lr

0800814c <_ZN8touchgfx4ViewI19MainScreenPresenterED1Ev>:
class View : public Screen
 800814c:	b580      	push	{r7, lr}
 800814e:	b082      	sub	sp, #8
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
 8008154:	4a05      	ldr	r2, [pc, #20]	; (800816c <_ZN8touchgfx4ViewI19MainScreenPresenterED1Ev+0x20>)
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	601a      	str	r2, [r3, #0]
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	4618      	mov	r0, r3
 800815e:	f7ff feb1 	bl	8007ec4 <_ZN8touchgfx6ScreenD1Ev>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	4618      	mov	r0, r3
 8008166:	3708      	adds	r7, #8
 8008168:	46bd      	mov	sp, r7
 800816a:	bd80      	pop	{r7, pc}
 800816c:	0802a21c 	.word	0x0802a21c

08008170 <_ZN8touchgfx4ViewI19MainScreenPresenterED0Ev>:
 8008170:	b580      	push	{r7, lr}
 8008172:	b082      	sub	sp, #8
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
 8008178:	6878      	ldr	r0, [r7, #4]
 800817a:	f7ff ffe7 	bl	800814c <_ZN8touchgfx4ViewI19MainScreenPresenterED1Ev>
 800817e:	2140      	movs	r1, #64	; 0x40
 8008180:	6878      	ldr	r0, [r7, #4]
 8008182:	f01e f8bc 	bl	80262fe <_ZdlPvj>
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	4618      	mov	r0, r3
 800818a:	3708      	adds	r7, #8
 800818c:	46bd      	mov	sp, r7
 800818e:	bd80      	pop	{r7, pc}

08008190 <_ZN8touchgfx6ButtonD1Ev>:
class Button : public AbstractButton
 8008190:	b580      	push	{r7, lr}
 8008192:	b082      	sub	sp, #8
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
 8008198:	4a05      	ldr	r2, [pc, #20]	; (80081b0 <_ZN8touchgfx6ButtonD1Ev+0x20>)
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	601a      	str	r2, [r3, #0]
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	4618      	mov	r0, r3
 80081a2:	f7ff ff6f 	bl	8008084 <_ZN8touchgfx14AbstractButtonD1Ev>
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	4618      	mov	r0, r3
 80081aa:	3708      	adds	r7, #8
 80081ac:	46bd      	mov	sp, r7
 80081ae:	bd80      	pop	{r7, pc}
 80081b0:	0802ad1c 	.word	0x0802ad1c

080081b4 <_ZN8touchgfx6ButtonD0Ev>:
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b082      	sub	sp, #8
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	f7ff ffe7 	bl	8008190 <_ZN8touchgfx6ButtonD1Ev>
 80081c2:	2134      	movs	r1, #52	; 0x34
 80081c4:	6878      	ldr	r0, [r7, #4]
 80081c6:	f01e f89a 	bl	80262fe <_ZdlPvj>
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	4618      	mov	r0, r3
 80081ce:	3708      	adds	r7, #8
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd80      	pop	{r7, pc}

080081d4 <_ZN8touchgfx12ToggleButtonC1Ev>:
class ToggleButton : public Button
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b082      	sub	sp, #8
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	4618      	mov	r0, r3
 80081e0:	f7ff ff72 	bl	80080c8 <_ZN8touchgfx6ButtonC1Ev>
 80081e4:	4a07      	ldr	r2, [pc, #28]	; (8008204 <_ZN8touchgfx12ToggleButtonC1Ev+0x30>)
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	601a      	str	r2, [r3, #0]
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	3334      	adds	r3, #52	; 0x34
 80081ee:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80081f2:	4618      	mov	r0, r3
 80081f4:	f7ff fdb8 	bl	8007d68 <_ZN8touchgfx6BitmapC1Et>
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	4618      	mov	r0, r3
 80081fc:	3708      	adds	r7, #8
 80081fe:	46bd      	mov	sp, r7
 8008200:	bd80      	pop	{r7, pc}
 8008202:	bf00      	nop
 8008204:	0802abcc 	.word	0x0802abcc

08008208 <_ZN18MainScreenViewBaseC1Ev>:
/*********************************************************************************/
#include <gui_generated/mainscreen_screen/MainScreenViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>

MainScreenViewBase::MainScreenViewBase() :
 8008208:	b590      	push	{r4, r7, lr}
 800820a:	b08d      	sub	sp, #52	; 0x34
 800820c:	af02      	add	r7, sp, #8
 800820e:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &MainScreenViewBase::buttonCallbackHandler)
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	4618      	mov	r0, r3
 8008214:	f000 f914 	bl	8008440 <_ZN8touchgfx4ViewI19MainScreenPresenterEC1Ev>
 8008218:	4a5d      	ldr	r2, [pc, #372]	; (8008390 <_ZN18MainScreenViewBaseC1Ev+0x188>)
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	601a      	str	r2, [r3, #0]
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	3340      	adds	r3, #64	; 0x40
 8008222:	4618      	mov	r0, r3
 8008224:	f7ff fec8 	bl	8007fb8 <_ZN8touchgfx3BoxC1Ev>
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 800822e:	f107 0308 	add.w	r3, r7, #8
 8008232:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008236:	4618      	mov	r0, r3
 8008238:	f7ff fd96 	bl	8007d68 <_ZN8touchgfx6BitmapC1Et>
 800823c:	f107 0308 	add.w	r3, r7, #8
 8008240:	4619      	mov	r1, r3
 8008242:	4620      	mov	r0, r4
 8008244:	f011 fed0 	bl	8019fe8 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	3398      	adds	r3, #152	; 0x98
 800824c:	4618      	mov	r0, r3
 800824e:	f7ff ffc1 	bl	80081d4 <_ZN8touchgfx12ToggleButtonC1Ev>
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	f103 00d0 	add.w	r0, r3, #208	; 0xd0
 8008258:	4b4e      	ldr	r3, [pc, #312]	; (8008394 <_ZN18MainScreenViewBaseC1Ev+0x18c>)
 800825a:	60fb      	str	r3, [r7, #12]
 800825c:	2300      	movs	r3, #0
 800825e:	613b      	str	r3, [r7, #16]
 8008260:	f107 030c 	add.w	r3, r7, #12
 8008264:	cb0c      	ldmia	r3, {r2, r3}
 8008266:	6879      	ldr	r1, [r7, #4]
 8008268:	f000 f910 	bl	800848c <_ZN8touchgfx8CallbackI18MainScreenViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{
    __background.setPosition(0, 0, 480, 272);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8008272:	f44f 7388 	mov.w	r3, #272	; 0x110
 8008276:	9300      	str	r3, [sp, #0]
 8008278:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800827c:	2200      	movs	r2, #0
 800827e:	2100      	movs	r1, #0
 8008280:	f7ff fdb2 	bl	8007de8 <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800828a:	2300      	movs	r3, #0
 800828c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008290:	2300      	movs	r3, #0
 8008292:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008296:	2300      	movs	r3, #0
 8008298:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
     *
     * @return The color representation depending on LCD color format.
     */
    FORCE_INLINE_FUNCTION static colortype getColorFromRGB(uint8_t red, uint8_t green, uint8_t blue)
    {
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800829c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80082a0:	041b      	lsls	r3, r3, #16
 80082a2:	461a      	mov	r2, r3
 80082a4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80082a8:	021b      	lsls	r3, r3, #8
 80082aa:	431a      	orrs	r2, r3
 80082ac:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80082b0:	4313      	orrs	r3, r2
 80082b2:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80082b6:	f107 0320 	add.w	r3, r7, #32
 80082ba:	4611      	mov	r1, r2
 80082bc:	4618      	mov	r0, r3
 80082be:	f7fb fcdd 	bl	8003c7c <_ZN8touchgfx9colortypeC1Em>
 80082c2:	6a3b      	ldr	r3, [r7, #32]
 80082c4:	4619      	mov	r1, r3
 80082c6:	4620      	mov	r0, r4
 80082c8:	f7ff fe9a 	bl	8008000 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    add(__background);
 80082cc:	687a      	ldr	r2, [r7, #4]
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	3340      	adds	r3, #64	; 0x40
 80082d2:	4619      	mov	r1, r3
 80082d4:	4610      	mov	r0, r2
 80082d6:	f7ff fe4d 	bl	8007f74 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    BGImage.setBitmap(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_BACKGROUNDS_480X272_GRADIENT_DARK_ID));
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 80082e0:	f107 0314 	add.w	r3, r7, #20
 80082e4:	2100      	movs	r1, #0
 80082e6:	4618      	mov	r0, r3
 80082e8:	f7ff fd3e 	bl	8007d68 <_ZN8touchgfx6BitmapC1Et>
 80082ec:	f107 0314 	add.w	r3, r7, #20
 80082f0:	4619      	mov	r1, r3
 80082f2:	4620      	mov	r0, r4
 80082f4:	f012 f94a 	bl	801a58c <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    BGImage.setPosition(0, 0, 480, 272);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 80082fe:	f44f 7388 	mov.w	r3, #272	; 0x110
 8008302:	9300      	str	r3, [sp, #0]
 8008304:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8008308:	2200      	movs	r2, #0
 800830a:	2100      	movs	r1, #0
 800830c:	f7ff fd6c 	bl	8007de8 <_ZN8touchgfx8Drawable11setPositionEssss>
    BGImage.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	336c      	adds	r3, #108	; 0x6c
 8008314:	2100      	movs	r1, #0
 8008316:	4618      	mov	r0, r3
 8008318:	f011 fe35 	bl	8019f86 <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>
    add(BGImage);
 800831c:	687a      	ldr	r2, [r7, #4]
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	336c      	adds	r3, #108	; 0x6c
 8008322:	4619      	mov	r1, r3
 8008324:	4610      	mov	r0, r2
 8008326:	f7ff fe25 	bl	8007f74 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    LEDtoggleButton.setXY(171, 111);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	3398      	adds	r3, #152	; 0x98
 800832e:	226f      	movs	r2, #111	; 0x6f
 8008330:	21ab      	movs	r1, #171	; 0xab
 8008332:	4618      	mov	r0, r3
 8008334:	f7ff fd79 	bl	8007e2a <_ZN8touchgfx8Drawable5setXYEss>
    LEDtoggleButton.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_TOGGLEBUTTON_MEDIUM_ROUND_TEXT_ON_ACTIVE_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_TOGGLEBUTTON_MEDIUM_ROUND_TEXT_OFF_NORMAL_ID));
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f103 0498 	add.w	r4, r3, #152	; 0x98
 800833e:	f107 0318 	add.w	r3, r7, #24
 8008342:	2102      	movs	r1, #2
 8008344:	4618      	mov	r0, r3
 8008346:	f7ff fd0f 	bl	8007d68 <_ZN8touchgfx6BitmapC1Et>
 800834a:	f107 031c 	add.w	r3, r7, #28
 800834e:	2101      	movs	r1, #1
 8008350:	4618      	mov	r0, r3
 8008352:	f7ff fd09 	bl	8007d68 <_ZN8touchgfx6BitmapC1Et>
 8008356:	f107 021c 	add.w	r2, r7, #28
 800835a:	f107 0318 	add.w	r3, r7, #24
 800835e:	4619      	mov	r1, r3
 8008360:	4620      	mov	r0, r4
 8008362:	f7ff fed5 	bl	8008110 <_ZN8touchgfx12ToggleButton10setBitmapsERKNS_6BitmapES3_>
    LEDtoggleButton.setAction(buttonCallback);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	f103 0298 	add.w	r2, r3, #152	; 0x98
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	33d0      	adds	r3, #208	; 0xd0
 8008370:	4619      	mov	r1, r3
 8008372:	4610      	mov	r0, r2
 8008374:	f7ff fe78 	bl	8008068 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>
    add(LEDtoggleButton);
 8008378:	687a      	ldr	r2, [r7, #4]
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	3398      	adds	r3, #152	; 0x98
 800837e:	4619      	mov	r1, r3
 8008380:	4610      	mov	r0, r2
 8008382:	f7ff fdf7 	bl	8007f74 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	4618      	mov	r0, r3
 800838a:	372c      	adds	r7, #44	; 0x2c
 800838c:	46bd      	mov	sp, r7
 800838e:	bd90      	pop	{r4, r7, pc}
 8008390:	0802a1cc 	.word	0x0802a1cc
 8008394:	08008419 	.word	0x08008419

08008398 <_ZN18MainScreenViewBaseD1Ev>:

MainScreenViewBase::~MainScreenViewBase()
 8008398:	b580      	push	{r7, lr}
 800839a:	b082      	sub	sp, #8
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
 80083a0:	4a0f      	ldr	r2, [pc, #60]	; (80083e0 <_ZN18MainScreenViewBaseD1Ev+0x48>)
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	601a      	str	r2, [r3, #0]
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	33d0      	adds	r3, #208	; 0xd0
 80083aa:	4618      	mov	r0, r3
 80083ac:	f000 f8ae 	bl	800850c <_ZN8touchgfx8CallbackI18MainScreenViewBaseRKNS_14AbstractButtonEvvED1Ev>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	3398      	adds	r3, #152	; 0x98
 80083b4:	4618      	mov	r0, r3
 80083b6:	f000 f953 	bl	8008660 <_ZN8touchgfx12ToggleButtonD1Ev>
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	336c      	adds	r3, #108	; 0x6c
 80083be:	4618      	mov	r0, r3
 80083c0:	f000 f92c 	bl	800861c <_ZN8touchgfx13ScalableImageD1Ev>
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	3340      	adds	r3, #64	; 0x40
 80083c8:	4618      	mov	r0, r3
 80083ca:	f000 f8e3 	bl	8008594 <_ZN8touchgfx3BoxD1Ev>
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	4618      	mov	r0, r3
 80083d2:	f7ff febb 	bl	800814c <_ZN8touchgfx4ViewI19MainScreenPresenterED1Ev>
{

}
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	4618      	mov	r0, r3
 80083da:	3708      	adds	r7, #8
 80083dc:	46bd      	mov	sp, r7
 80083de:	bd80      	pop	{r7, pc}
 80083e0:	0802a1cc 	.word	0x0802a1cc

080083e4 <_ZN18MainScreenViewBaseD0Ev>:
MainScreenViewBase::~MainScreenViewBase()
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b082      	sub	sp, #8
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
}
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f7ff ffd3 	bl	8008398 <_ZN18MainScreenViewBaseD1Ev>
 80083f2:	21e0      	movs	r1, #224	; 0xe0
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	f01d ff82 	bl	80262fe <_ZdlPvj>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	4618      	mov	r0, r3
 80083fe:	3708      	adds	r7, #8
 8008400:	46bd      	mov	sp, r7
 8008402:	bd80      	pop	{r7, pc}

08008404 <_ZN18MainScreenViewBase11setupScreenEv>:

void MainScreenViewBase::setupScreen()
{
 8008404:	b480      	push	{r7}
 8008406:	b083      	sub	sp, #12
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]

}
 800840c:	bf00      	nop
 800840e:	370c      	adds	r7, #12
 8008410:	46bd      	mov	sp, r7
 8008412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008416:	4770      	bx	lr

08008418 <_ZN18MainScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void MainScreenViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b082      	sub	sp, #8
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
 8008420:	6039      	str	r1, [r7, #0]
    if (&src == &LEDtoggleButton)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	3398      	adds	r3, #152	; 0x98
 8008426:	683a      	ldr	r2, [r7, #0]
 8008428:	429a      	cmp	r2, r3
 800842a:	d105      	bne.n	8008438 <_ZN18MainScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x20>
    {
        //Interaction1
        //When LEDtoggleButton clicked call virtual function
        //Call ToggleUserLED1
        ToggleUserLED1();
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	332c      	adds	r3, #44	; 0x2c
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	4798      	blx	r3
    }
}
 8008438:	bf00      	nop
 800843a:	3708      	adds	r7, #8
 800843c:	46bd      	mov	sp, r7
 800843e:	bd80      	pop	{r7, pc}

08008440 <_ZN8touchgfx4ViewI19MainScreenPresenterEC1Ev>:
    View()
 8008440:	b580      	push	{r7, lr}
 8008442:	b082      	sub	sp, #8
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
        : presenter(0)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	4618      	mov	r0, r3
 800844c:	f014 fc3e 	bl	801cccc <_ZN8touchgfx6ScreenC1Ev>
 8008450:	4a05      	ldr	r2, [pc, #20]	; (8008468 <_ZN8touchgfx4ViewI19MainScreenPresenterEC1Ev+0x28>)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	601a      	str	r2, [r3, #0]
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2200      	movs	r2, #0
 800845a:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	4618      	mov	r0, r3
 8008460:	3708      	adds	r7, #8
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}
 8008466:	bf00      	nop
 8008468:	0802a21c 	.word	0x0802a21c

0800846c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>:
class GenericCallback<T1, void, void>
 800846c:	b480      	push	{r7}
 800846e:	b083      	sub	sp, #12
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
 8008474:	4a04      	ldr	r2, [pc, #16]	; (8008488 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev+0x1c>)
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	601a      	str	r2, [r3, #0]
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	4618      	mov	r0, r3
 800847e:	370c      	adds	r7, #12
 8008480:	46bd      	mov	sp, r7
 8008482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008486:	4770      	bx	lr
 8008488:	0802a250 	.word	0x0802a250

0800848c <_ZN8touchgfx8CallbackI18MainScreenViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pObject, void (dest_type::*pmemfun_1)(T1))
 800848c:	b580      	push	{r7, lr}
 800848e:	b084      	sub	sp, #16
 8008490:	af00      	add	r7, sp, #0
 8008492:	60f8      	str	r0, [r7, #12]
 8008494:	60b9      	str	r1, [r7, #8]
 8008496:	4639      	mov	r1, r7
 8008498:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_1)
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	4618      	mov	r0, r3
 80084a0:	f7ff ffe4 	bl	800846c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 80084a4:	4a08      	ldr	r2, [pc, #32]	; (80084c8 <_ZN8touchgfx8CallbackI18MainScreenViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	601a      	str	r2, [r3, #0]
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	68ba      	ldr	r2, [r7, #8]
 80084ae:	605a      	str	r2, [r3, #4]
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	3308      	adds	r3, #8
 80084b4:	463a      	mov	r2, r7
 80084b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80084ba:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	4618      	mov	r0, r3
 80084c2:	3710      	adds	r7, #16
 80084c4:	46bd      	mov	sp, r7
 80084c6:	bd80      	pop	{r7, pc}
 80084c8:	0802a204 	.word	0x0802a204

080084cc <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>:
    virtual ~GenericCallback()
 80084cc:	b480      	push	{r7}
 80084ce:	b083      	sub	sp, #12
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
    }
 80084d4:	4a04      	ldr	r2, [pc, #16]	; (80084e8 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev+0x1c>)
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	601a      	str	r2, [r3, #0]
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	4618      	mov	r0, r3
 80084de:	370c      	adds	r7, #12
 80084e0:	46bd      	mov	sp, r7
 80084e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e6:	4770      	bx	lr
 80084e8:	0802a250 	.word	0x0802a250

080084ec <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED0Ev>:
    virtual ~GenericCallback()
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b082      	sub	sp, #8
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
    }
 80084f4:	6878      	ldr	r0, [r7, #4]
 80084f6:	f7ff ffe9 	bl	80084cc <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 80084fa:	2104      	movs	r1, #4
 80084fc:	6878      	ldr	r0, [r7, #4]
 80084fe:	f01d fefe 	bl	80262fe <_ZdlPvj>
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	4618      	mov	r0, r3
 8008506:	3708      	adds	r7, #8
 8008508:	46bd      	mov	sp, r7
 800850a:	bd80      	pop	{r7, pc}

0800850c <_ZN8touchgfx8CallbackI18MainScreenViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800850c:	b580      	push	{r7, lr}
 800850e:	b082      	sub	sp, #8
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
 8008514:	4a05      	ldr	r2, [pc, #20]	; (800852c <_ZN8touchgfx8CallbackI18MainScreenViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	601a      	str	r2, [r3, #0]
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	4618      	mov	r0, r3
 800851e:	f7ff ffd5 	bl	80084cc <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	4618      	mov	r0, r3
 8008526:	3708      	adds	r7, #8
 8008528:	46bd      	mov	sp, r7
 800852a:	bd80      	pop	{r7, pc}
 800852c:	0802a204 	.word	0x0802a204

08008530 <_ZN8touchgfx8CallbackI18MainScreenViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 8008530:	b580      	push	{r7, lr}
 8008532:	b082      	sub	sp, #8
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
 8008538:	6878      	ldr	r0, [r7, #4]
 800853a:	f7ff ffe7 	bl	800850c <_ZN8touchgfx8CallbackI18MainScreenViewBaseRKNS_14AbstractButtonEvvED1Ev>
 800853e:	2110      	movs	r1, #16
 8008540:	6878      	ldr	r0, [r7, #4]
 8008542:	f01d fedc 	bl	80262fe <_ZdlPvj>
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	4618      	mov	r0, r3
 800854a:	3708      	adds	r7, #8
 800854c:	46bd      	mov	sp, r7
 800854e:	bd80      	pop	{r7, pc}

08008550 <_ZN8touchgfx9ContainerD1Ev>:
 * intersect with the geometry of the container will be visible (e.g. setting a
 * container's width to 0 will render all children invisible).
 *
 * @see Drawable
 */
class Container : public Drawable
 8008550:	b580      	push	{r7, lr}
 8008552:	b082      	sub	sp, #8
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
 8008558:	4a05      	ldr	r2, [pc, #20]	; (8008570 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	601a      	str	r2, [r3, #0]
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	4618      	mov	r0, r3
 8008562:	f7fb fb9b 	bl	8003c9c <_ZN8touchgfx8DrawableD1Ev>
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	4618      	mov	r0, r3
 800856a:	3708      	adds	r7, #8
 800856c:	46bd      	mov	sp, r7
 800856e:	bd80      	pop	{r7, pc}
 8008570:	0802a974 	.word	0x0802a974

08008574 <_ZN8touchgfx9ContainerD0Ev>:
 8008574:	b580      	push	{r7, lr}
 8008576:	b082      	sub	sp, #8
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
 800857c:	6878      	ldr	r0, [r7, #4]
 800857e:	f7ff ffe7 	bl	8008550 <_ZN8touchgfx9ContainerD1Ev>
 8008582:	212c      	movs	r1, #44	; 0x2c
 8008584:	6878      	ldr	r0, [r7, #4]
 8008586:	f01d feba 	bl	80262fe <_ZdlPvj>
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	4618      	mov	r0, r3
 800858e:	3708      	adds	r7, #8
 8008590:	46bd      	mov	sp, r7
 8008592:	bd80      	pop	{r7, pc}

08008594 <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 8008594:	b580      	push	{r7, lr}
 8008596:	b082      	sub	sp, #8
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
 800859c:	4a05      	ldr	r2, [pc, #20]	; (80085b4 <_ZN8touchgfx3BoxD1Ev+0x20>)
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	601a      	str	r2, [r3, #0]
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	4618      	mov	r0, r3
 80085a6:	f7fb fcfb 	bl	8003fa0 <_ZN8touchgfx6WidgetD1Ev>
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	4618      	mov	r0, r3
 80085ae:	3708      	adds	r7, #8
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bd80      	pop	{r7, pc}
 80085b4:	0802acb4 	.word	0x0802acb4

080085b8 <_ZN8touchgfx3BoxD0Ev>:
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b082      	sub	sp, #8
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
 80085c0:	6878      	ldr	r0, [r7, #4]
 80085c2:	f7ff ffe7 	bl	8008594 <_ZN8touchgfx3BoxD1Ev>
 80085c6:	212c      	movs	r1, #44	; 0x2c
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	f01d fe98 	bl	80262fe <_ZdlPvj>
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	4618      	mov	r0, r3
 80085d2:	3708      	adds	r7, #8
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bd80      	pop	{r7, pc}

080085d8 <_ZN8touchgfx5ImageD1Ev>:
 * is handled by the Image Converter as part of compiling the project. Each image is
 * assigned a unique BITMAP identifier which.
 *
 * @see Bitmap
 */
class Image : public Widget
 80085d8:	b580      	push	{r7, lr}
 80085da:	b082      	sub	sp, #8
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
 80085e0:	4a05      	ldr	r2, [pc, #20]	; (80085f8 <_ZN8touchgfx5ImageD1Ev+0x20>)
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	601a      	str	r2, [r3, #0]
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	4618      	mov	r0, r3
 80085ea:	f7fb fcd9 	bl	8003fa0 <_ZN8touchgfx6WidgetD1Ev>
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	4618      	mov	r0, r3
 80085f2:	3708      	adds	r7, #8
 80085f4:	46bd      	mov	sp, r7
 80085f6:	bd80      	pop	{r7, pc}
 80085f8:	0802ad90 	.word	0x0802ad90

080085fc <_ZN8touchgfx5ImageD0Ev>:
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b082      	sub	sp, #8
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
 8008604:	6878      	ldr	r0, [r7, #4]
 8008606:	f7ff ffe7 	bl	80085d8 <_ZN8touchgfx5ImageD1Ev>
 800860a:	212c      	movs	r1, #44	; 0x2c
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	f01d fe76 	bl	80262fe <_ZdlPvj>
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	4618      	mov	r0, r3
 8008616:	3708      	adds	r7, #8
 8008618:	46bd      	mov	sp, r7
 800861a:	bd80      	pop	{r7, pc}

0800861c <_ZN8touchgfx13ScalableImageD1Ev>:
 * algorithm used. The rendering algorithm can be changed dynamically. Please note that
 * scaling images is done at runtime and may require a lot of calculations.
 *
 * @note Note that this widget does not support 1 bit per pixel color depth.
 */
class ScalableImage : public Image
 800861c:	b580      	push	{r7, lr}
 800861e:	b082      	sub	sp, #8
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
 8008624:	4a05      	ldr	r2, [pc, #20]	; (800863c <_ZN8touchgfx13ScalableImageD1Ev+0x20>)
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	601a      	str	r2, [r3, #0]
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	4618      	mov	r0, r3
 800862e:	f7ff ffd3 	bl	80085d8 <_ZN8touchgfx5ImageD1Ev>
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	4618      	mov	r0, r3
 8008636:	3708      	adds	r7, #8
 8008638:	46bd      	mov	sp, r7
 800863a:	bd80      	pop	{r7, pc}
 800863c:	0802ac40 	.word	0x0802ac40

08008640 <_ZN8touchgfx13ScalableImageD0Ev>:
 8008640:	b580      	push	{r7, lr}
 8008642:	b082      	sub	sp, #8
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
 8008648:	6878      	ldr	r0, [r7, #4]
 800864a:	f7ff ffe7 	bl	800861c <_ZN8touchgfx13ScalableImageD1Ev>
 800864e:	212c      	movs	r1, #44	; 0x2c
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	f01d fe54 	bl	80262fe <_ZdlPvj>
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	4618      	mov	r0, r3
 800865a:	3708      	adds	r7, #8
 800865c:	46bd      	mov	sp, r7
 800865e:	bd80      	pop	{r7, pc}

08008660 <_ZN8touchgfx12ToggleButtonD1Ev>:
 8008660:	b580      	push	{r7, lr}
 8008662:	b082      	sub	sp, #8
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
 8008668:	4a05      	ldr	r2, [pc, #20]	; (8008680 <_ZN8touchgfx12ToggleButtonD1Ev+0x20>)
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	601a      	str	r2, [r3, #0]
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	4618      	mov	r0, r3
 8008672:	f7ff fd8d 	bl	8008190 <_ZN8touchgfx6ButtonD1Ev>
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	4618      	mov	r0, r3
 800867a:	3708      	adds	r7, #8
 800867c:	46bd      	mov	sp, r7
 800867e:	bd80      	pop	{r7, pc}
 8008680:	0802abcc 	.word	0x0802abcc

08008684 <_ZN8touchgfx12ToggleButtonD0Ev>:
 8008684:	b580      	push	{r7, lr}
 8008686:	b082      	sub	sp, #8
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	f7ff ffe7 	bl	8008660 <_ZN8touchgfx12ToggleButtonD1Ev>
 8008692:	2138      	movs	r1, #56	; 0x38
 8008694:	6878      	ldr	r0, [r7, #4]
 8008696:	f01d fe32 	bl	80262fe <_ZdlPvj>
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	4618      	mov	r0, r3
 800869e:	3708      	adds	r7, #8
 80086a0:	46bd      	mov	sp, r7
 80086a2:	bd80      	pop	{r7, pc}

080086a4 <_ZN8touchgfx8CallbackI18MainScreenViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b082      	sub	sp, #8
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
 80086ac:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun)(t1);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	685b      	ldr	r3, [r3, #4]
 80086b2:	687a      	ldr	r2, [r7, #4]
 80086b4:	68d2      	ldr	r2, [r2, #12]
 80086b6:	1052      	asrs	r2, r2, #1
 80086b8:	1898      	adds	r0, r3, r2
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	68db      	ldr	r3, [r3, #12]
 80086be:	f003 0301 	and.w	r3, r3, #1
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d102      	bne.n	80086cc <_ZN8touchgfx8CallbackI18MainScreenViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	689b      	ldr	r3, [r3, #8]
 80086ca:	e00a      	b.n	80086e2 <_ZN8touchgfx8CallbackI18MainScreenViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	685b      	ldr	r3, [r3, #4]
 80086d0:	687a      	ldr	r2, [r7, #4]
 80086d2:	68d2      	ldr	r2, [r2, #12]
 80086d4:	1052      	asrs	r2, r2, #1
 80086d6:	4413      	add	r3, r2
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	687a      	ldr	r2, [r7, #4]
 80086dc:	6892      	ldr	r2, [r2, #8]
 80086de:	4413      	add	r3, r2
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	6839      	ldr	r1, [r7, #0]
 80086e4:	4798      	blx	r3
    }
 80086e6:	bf00      	nop
 80086e8:	3708      	adds	r7, #8
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bd80      	pop	{r7, pc}

080086ee <_ZNK8touchgfx8CallbackI18MainScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 80086ee:	b480      	push	{r7}
 80086f0:	b083      	sub	sp, #12
 80086f2:	af00      	add	r7, sp, #0
 80086f4:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun != 0);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	685b      	ldr	r3, [r3, #4]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d010      	beq.n	8008720 <_ZNK8touchgfx8CallbackI18MainScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	689b      	ldr	r3, [r3, #8]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d107      	bne.n	8008716 <_ZNK8touchgfx8CallbackI18MainScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	68db      	ldr	r3, [r3, #12]
 800870a:	f003 0301 	and.w	r3, r3, #1
 800870e:	2b00      	cmp	r3, #0
 8008710:	d101      	bne.n	8008716 <_ZNK8touchgfx8CallbackI18MainScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8008712:	2301      	movs	r3, #1
 8008714:	e000      	b.n	8008718 <_ZNK8touchgfx8CallbackI18MainScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 8008716:	2300      	movs	r3, #0
 8008718:	2b01      	cmp	r3, #1
 800871a:	d001      	beq.n	8008720 <_ZNK8touchgfx8CallbackI18MainScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 800871c:	2301      	movs	r3, #1
 800871e:	e000      	b.n	8008722 <_ZNK8touchgfx8CallbackI18MainScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 8008720:	2300      	movs	r3, #0
    }
 8008722:	4618      	mov	r0, r3
 8008724:	370c      	adds	r7, #12
 8008726:	46bd      	mov	sp, r7
 8008728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872c:	4770      	bx	lr
	...

08008730 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8008730:	b580      	push	{r7, lr}
 8008732:	af00      	add	r7, sp, #0
 8008734:	4801      	ldr	r0, [pc, #4]	; (800873c <__tcf_0+0xc>)
 8008736:	f7fe fee7 	bl	8007508 <_ZN8touchgfx13GeneratedFontD1Ev>
 800873a:	bd80      	pop	{r7, pc}
 800873c:	2400b178 	.word	0x2400b178

08008740 <_Z23getFont_verdana_10_4bppv>:
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b08e      	sub	sp, #56	; 0x38
 8008744:	af0e      	add	r7, sp, #56	; 0x38
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8008746:	4b21      	ldr	r3, [pc, #132]	; (80087cc <_Z23getFont_verdana_10_4bppv+0x8c>)
 8008748:	781b      	ldrb	r3, [r3, #0]
 800874a:	f3bf 8f5b 	dmb	ish
 800874e:	b2db      	uxtb	r3, r3
 8008750:	f003 0301 	and.w	r3, r3, #1
 8008754:	2b00      	cmp	r3, #0
 8008756:	bf0c      	ite	eq
 8008758:	2301      	moveq	r3, #1
 800875a:	2300      	movne	r3, #0
 800875c:	b2db      	uxtb	r3, r3
 800875e:	2b00      	cmp	r3, #0
 8008760:	d030      	beq.n	80087c4 <_Z23getFont_verdana_10_4bppv+0x84>
 8008762:	481a      	ldr	r0, [pc, #104]	; (80087cc <_Z23getFont_verdana_10_4bppv+0x8c>)
 8008764:	f01d fdcd 	bl	8026302 <__cxa_guard_acquire>
 8008768:	4603      	mov	r3, r0
 800876a:	2b00      	cmp	r3, #0
 800876c:	bf14      	ite	ne
 800876e:	2301      	movne	r3, #1
 8008770:	2300      	moveq	r3, #0
 8008772:	b2db      	uxtb	r3, r3
 8008774:	2b00      	cmp	r3, #0
 8008776:	d025      	beq.n	80087c4 <_Z23getFont_verdana_10_4bppv+0x84>
 8008778:	2300      	movs	r3, #0
 800877a:	930c      	str	r3, [sp, #48]	; 0x30
 800877c:	2300      	movs	r3, #0
 800877e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008780:	2300      	movs	r3, #0
 8008782:	930a      	str	r3, [sp, #40]	; 0x28
 8008784:	233f      	movs	r3, #63	; 0x3f
 8008786:	9309      	str	r3, [sp, #36]	; 0x24
 8008788:	4b11      	ldr	r3, [pc, #68]	; (80087d0 <_Z23getFont_verdana_10_4bppv+0x90>)
 800878a:	9308      	str	r3, [sp, #32]
 800878c:	4b11      	ldr	r3, [pc, #68]	; (80087d4 <_Z23getFont_verdana_10_4bppv+0x94>)
 800878e:	9307      	str	r3, [sp, #28]
 8008790:	2300      	movs	r3, #0
 8008792:	9306      	str	r3, [sp, #24]
 8008794:	2300      	movs	r3, #0
 8008796:	9305      	str	r3, [sp, #20]
 8008798:	2301      	movs	r3, #1
 800879a:	9304      	str	r3, [sp, #16]
 800879c:	2304      	movs	r3, #4
 800879e:	9303      	str	r3, [sp, #12]
 80087a0:	2300      	movs	r3, #0
 80087a2:	9302      	str	r3, [sp, #8]
 80087a4:	2300      	movs	r3, #0
 80087a6:	9301      	str	r3, [sp, #4]
 80087a8:	230a      	movs	r3, #10
 80087aa:	9300      	str	r3, [sp, #0]
 80087ac:	230a      	movs	r3, #10
 80087ae:	2201      	movs	r2, #1
 80087b0:	4909      	ldr	r1, [pc, #36]	; (80087d8 <_Z23getFont_verdana_10_4bppv+0x98>)
 80087b2:	480a      	ldr	r0, [pc, #40]	; (80087dc <_Z23getFont_verdana_10_4bppv+0x9c>)
 80087b4:	f7ff fa38 	bl	8007c28 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80087b8:	4809      	ldr	r0, [pc, #36]	; (80087e0 <_Z23getFont_verdana_10_4bppv+0xa0>)
 80087ba:	f01d fded 	bl	8026398 <atexit>
 80087be:	4803      	ldr	r0, [pc, #12]	; (80087cc <_Z23getFont_verdana_10_4bppv+0x8c>)
 80087c0:	f01d fdab 	bl	802631a <__cxa_guard_release>
    return verdana_10_4bpp;
 80087c4:	4b05      	ldr	r3, [pc, #20]	; (80087dc <_Z23getFont_verdana_10_4bppv+0x9c>)
}
 80087c6:	4618      	mov	r0, r3
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bd80      	pop	{r7, pc}
 80087cc:	2400b1a4 	.word	0x2400b1a4
 80087d0:	0802b290 	.word	0x0802b290
 80087d4:	0802b29c 	.word	0x0802b29c
 80087d8:	90000178 	.word	0x90000178
 80087dc:	2400b178 	.word	0x2400b178
 80087e0:	08008731 	.word	0x08008731

080087e4 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 80087e4:	b580      	push	{r7, lr}
 80087e6:	af00      	add	r7, sp, #0
 80087e8:	4801      	ldr	r0, [pc, #4]	; (80087f0 <__tcf_0+0xc>)
 80087ea:	f7fe fe8d 	bl	8007508 <_ZN8touchgfx13GeneratedFontD1Ev>
 80087ee:	bd80      	pop	{r7, pc}
 80087f0:	2400b1a8 	.word	0x2400b1a8

080087f4 <_Z23getFont_verdana_20_4bppv>:
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b08e      	sub	sp, #56	; 0x38
 80087f8:	af0e      	add	r7, sp, #56	; 0x38
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 80087fa:	4b21      	ldr	r3, [pc, #132]	; (8008880 <_Z23getFont_verdana_20_4bppv+0x8c>)
 80087fc:	781b      	ldrb	r3, [r3, #0]
 80087fe:	f3bf 8f5b 	dmb	ish
 8008802:	b2db      	uxtb	r3, r3
 8008804:	f003 0301 	and.w	r3, r3, #1
 8008808:	2b00      	cmp	r3, #0
 800880a:	bf0c      	ite	eq
 800880c:	2301      	moveq	r3, #1
 800880e:	2300      	movne	r3, #0
 8008810:	b2db      	uxtb	r3, r3
 8008812:	2b00      	cmp	r3, #0
 8008814:	d030      	beq.n	8008878 <_Z23getFont_verdana_20_4bppv+0x84>
 8008816:	481a      	ldr	r0, [pc, #104]	; (8008880 <_Z23getFont_verdana_20_4bppv+0x8c>)
 8008818:	f01d fd73 	bl	8026302 <__cxa_guard_acquire>
 800881c:	4603      	mov	r3, r0
 800881e:	2b00      	cmp	r3, #0
 8008820:	bf14      	ite	ne
 8008822:	2301      	movne	r3, #1
 8008824:	2300      	moveq	r3, #0
 8008826:	b2db      	uxtb	r3, r3
 8008828:	2b00      	cmp	r3, #0
 800882a:	d025      	beq.n	8008878 <_Z23getFont_verdana_20_4bppv+0x84>
 800882c:	2300      	movs	r3, #0
 800882e:	930c      	str	r3, [sp, #48]	; 0x30
 8008830:	2300      	movs	r3, #0
 8008832:	930b      	str	r3, [sp, #44]	; 0x2c
 8008834:	2300      	movs	r3, #0
 8008836:	930a      	str	r3, [sp, #40]	; 0x28
 8008838:	233f      	movs	r3, #63	; 0x3f
 800883a:	9309      	str	r3, [sp, #36]	; 0x24
 800883c:	4b11      	ldr	r3, [pc, #68]	; (8008884 <_Z23getFont_verdana_20_4bppv+0x90>)
 800883e:	9308      	str	r3, [sp, #32]
 8008840:	4b11      	ldr	r3, [pc, #68]	; (8008888 <_Z23getFont_verdana_20_4bppv+0x94>)
 8008842:	9307      	str	r3, [sp, #28]
 8008844:	2300      	movs	r3, #0
 8008846:	9306      	str	r3, [sp, #24]
 8008848:	2300      	movs	r3, #0
 800884a:	9305      	str	r3, [sp, #20]
 800884c:	2301      	movs	r3, #1
 800884e:	9304      	str	r3, [sp, #16]
 8008850:	2304      	movs	r3, #4
 8008852:	9303      	str	r3, [sp, #12]
 8008854:	2300      	movs	r3, #0
 8008856:	9302      	str	r3, [sp, #8]
 8008858:	2300      	movs	r3, #0
 800885a:	9301      	str	r3, [sp, #4]
 800885c:	2314      	movs	r3, #20
 800885e:	9300      	str	r3, [sp, #0]
 8008860:	2314      	movs	r3, #20
 8008862:	2201      	movs	r2, #1
 8008864:	4909      	ldr	r1, [pc, #36]	; (800888c <_Z23getFont_verdana_20_4bppv+0x98>)
 8008866:	480a      	ldr	r0, [pc, #40]	; (8008890 <_Z23getFont_verdana_20_4bppv+0x9c>)
 8008868:	f7ff f9de 	bl	8007c28 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800886c:	4809      	ldr	r0, [pc, #36]	; (8008894 <_Z23getFont_verdana_20_4bppv+0xa0>)
 800886e:	f01d fd93 	bl	8026398 <atexit>
 8008872:	4803      	ldr	r0, [pc, #12]	; (8008880 <_Z23getFont_verdana_20_4bppv+0x8c>)
 8008874:	f01d fd51 	bl	802631a <__cxa_guard_release>
    return verdana_20_4bpp;
 8008878:	4b05      	ldr	r3, [pc, #20]	; (8008890 <_Z23getFont_verdana_20_4bppv+0x9c>)
}
 800887a:	4618      	mov	r0, r3
 800887c:	46bd      	mov	sp, r7
 800887e:	bd80      	pop	{r7, pc}
 8008880:	2400b1d4 	.word	0x2400b1d4
 8008884:	0802b294 	.word	0x0802b294
 8008888:	0802b2a0 	.word	0x0802b2a0
 800888c:	90000188 	.word	0x90000188
 8008890:	2400b1a8 	.word	0x2400b1a8
 8008894:	080087e5 	.word	0x080087e5

08008898 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8008898:	b580      	push	{r7, lr}
 800889a:	af00      	add	r7, sp, #0
 800889c:	4801      	ldr	r0, [pc, #4]	; (80088a4 <__tcf_0+0xc>)
 800889e:	f7fe fe33 	bl	8007508 <_ZN8touchgfx13GeneratedFontD1Ev>
 80088a2:	bd80      	pop	{r7, pc}
 80088a4:	2400b1d8 	.word	0x2400b1d8

080088a8 <_Z23getFont_verdana_40_4bppv>:
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b08e      	sub	sp, #56	; 0x38
 80088ac:	af0e      	add	r7, sp, #56	; 0x38
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 80088ae:	4b21      	ldr	r3, [pc, #132]	; (8008934 <_Z23getFont_verdana_40_4bppv+0x8c>)
 80088b0:	781b      	ldrb	r3, [r3, #0]
 80088b2:	f3bf 8f5b 	dmb	ish
 80088b6:	b2db      	uxtb	r3, r3
 80088b8:	f003 0301 	and.w	r3, r3, #1
 80088bc:	2b00      	cmp	r3, #0
 80088be:	bf0c      	ite	eq
 80088c0:	2301      	moveq	r3, #1
 80088c2:	2300      	movne	r3, #0
 80088c4:	b2db      	uxtb	r3, r3
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d030      	beq.n	800892c <_Z23getFont_verdana_40_4bppv+0x84>
 80088ca:	481a      	ldr	r0, [pc, #104]	; (8008934 <_Z23getFont_verdana_40_4bppv+0x8c>)
 80088cc:	f01d fd19 	bl	8026302 <__cxa_guard_acquire>
 80088d0:	4603      	mov	r3, r0
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	bf14      	ite	ne
 80088d6:	2301      	movne	r3, #1
 80088d8:	2300      	moveq	r3, #0
 80088da:	b2db      	uxtb	r3, r3
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d025      	beq.n	800892c <_Z23getFont_verdana_40_4bppv+0x84>
 80088e0:	2300      	movs	r3, #0
 80088e2:	930c      	str	r3, [sp, #48]	; 0x30
 80088e4:	2300      	movs	r3, #0
 80088e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80088e8:	2300      	movs	r3, #0
 80088ea:	930a      	str	r3, [sp, #40]	; 0x28
 80088ec:	233f      	movs	r3, #63	; 0x3f
 80088ee:	9309      	str	r3, [sp, #36]	; 0x24
 80088f0:	4b11      	ldr	r3, [pc, #68]	; (8008938 <_Z23getFont_verdana_40_4bppv+0x90>)
 80088f2:	9308      	str	r3, [sp, #32]
 80088f4:	4b11      	ldr	r3, [pc, #68]	; (800893c <_Z23getFont_verdana_40_4bppv+0x94>)
 80088f6:	9307      	str	r3, [sp, #28]
 80088f8:	2300      	movs	r3, #0
 80088fa:	9306      	str	r3, [sp, #24]
 80088fc:	2300      	movs	r3, #0
 80088fe:	9305      	str	r3, [sp, #20]
 8008900:	2301      	movs	r3, #1
 8008902:	9304      	str	r3, [sp, #16]
 8008904:	2304      	movs	r3, #4
 8008906:	9303      	str	r3, [sp, #12]
 8008908:	2300      	movs	r3, #0
 800890a:	9302      	str	r3, [sp, #8]
 800890c:	2300      	movs	r3, #0
 800890e:	9301      	str	r3, [sp, #4]
 8008910:	2328      	movs	r3, #40	; 0x28
 8008912:	9300      	str	r3, [sp, #0]
 8008914:	2328      	movs	r3, #40	; 0x28
 8008916:	2201      	movs	r2, #1
 8008918:	4909      	ldr	r1, [pc, #36]	; (8008940 <_Z23getFont_verdana_40_4bppv+0x98>)
 800891a:	480a      	ldr	r0, [pc, #40]	; (8008944 <_Z23getFont_verdana_40_4bppv+0x9c>)
 800891c:	f7ff f984 	bl	8007c28 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8008920:	4809      	ldr	r0, [pc, #36]	; (8008948 <_Z23getFont_verdana_40_4bppv+0xa0>)
 8008922:	f01d fd39 	bl	8026398 <atexit>
 8008926:	4803      	ldr	r0, [pc, #12]	; (8008934 <_Z23getFont_verdana_40_4bppv+0x8c>)
 8008928:	f01d fcf7 	bl	802631a <__cxa_guard_release>
    return verdana_40_4bpp;
 800892c:	4b05      	ldr	r3, [pc, #20]	; (8008944 <_Z23getFont_verdana_40_4bppv+0x9c>)
}
 800892e:	4618      	mov	r0, r3
 8008930:	46bd      	mov	sp, r7
 8008932:	bd80      	pop	{r7, pc}
 8008934:	2400b204 	.word	0x2400b204
 8008938:	0802b298 	.word	0x0802b298
 800893c:	0802b2a4 	.word	0x0802b2a4
 8008940:	90000198 	.word	0x90000198
 8008944:	2400b1d8 	.word	0x2400b1d8
 8008948:	08008899 	.word	0x08008899

0800894c <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
     * @param  prevChar The Unicode value of the previous character.
     * @param  glyph    the glyph object for the current character.
     *
     * @return The kerning distance between prevChar and glyph char.
     */
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 800894c:	b480      	push	{r7}
 800894e:	b085      	sub	sp, #20
 8008950:	af00      	add	r7, sp, #0
 8008952:	60f8      	str	r0, [r7, #12]
 8008954:	460b      	mov	r3, r1
 8008956:	607a      	str	r2, [r7, #4]
 8008958:	817b      	strh	r3, [r7, #10]
    {
        (void)prevChar; // Unused variable
        (void)glyph;    // Unused variable
        return 0;
 800895a:	2300      	movs	r3, #0
    }
 800895c:	4618      	mov	r0, r3
 800895e:	3714      	adds	r7, #20
 8008960:	46bd      	mov	sp, r7
 8008962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008966:	4770      	bx	lr

08008968 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    /**
     * Gets GSUB table. Currently only used for Devanagari fonts.
     *
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
 8008968:	b480      	push	{r7}
 800896a:	b083      	sub	sp, #12
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8008970:	2300      	movs	r3, #0
    }
 8008972:	4618      	mov	r0, r3
 8008974:	370c      	adds	r7, #12
 8008976:	46bd      	mov	sp, r7
 8008978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897c:	4770      	bx	lr

0800897e <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 800897e:	b480      	push	{r7}
 8008980:	b083      	sub	sp, #12
 8008982:	af00      	add	r7, sp, #0
 8008984:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8008986:	2300      	movs	r3, #0
    }
 8008988:	4618      	mov	r0, r3
 800898a:	370c      	adds	r7, #12
 800898c:	46bd      	mov	sp, r7
 800898e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008992:	4770      	bx	lr

08008994 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 8008994:	b480      	push	{r7}
 8008996:	b085      	sub	sp, #20
 8008998:	af00      	add	r7, sp, #0
 800899a:	60f8      	str	r0, [r7, #12]
 800899c:	60b9      	str	r1, [r7, #8]
 800899e:	4613      	mov	r3, r2
 80089a0:	80fb      	strh	r3, [r7, #6]
        typedTexts = data;
 80089a2:	4a07      	ldr	r2, [pc, #28]	; (80089c0 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	6013      	str	r3, [r2, #0]
        fonts = f;
 80089a8:	4a06      	ldr	r2, [pc, #24]	; (80089c4 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 80089aa:	68bb      	ldr	r3, [r7, #8]
 80089ac:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 80089ae:	4a06      	ldr	r2, [pc, #24]	; (80089c8 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 80089b0:	88fb      	ldrh	r3, [r7, #6]
 80089b2:	8013      	strh	r3, [r2, #0]
    }
 80089b4:	bf00      	nop
 80089b6:	3714      	adds	r7, #20
 80089b8:	46bd      	mov	sp, r7
 80089ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089be:	4770      	bx	lr
 80089c0:	240261cc 	.word	0x240261cc
 80089c4:	240261d4 	.word	0x240261d4
 80089c8:	240261d0 	.word	0x240261d0

080089cc <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 80089cc:	b40e      	push	{r1, r2, r3}
 80089ce:	b580      	push	{r7, lr}
 80089d0:	b085      	sub	sp, #20
 80089d2:	af00      	add	r7, sp, #0
 80089d4:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 80089d6:	f107 0320 	add.w	r3, r7, #32
 80089da:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	69fa      	ldr	r2, [r7, #28]
 80089e0:	2100      	movs	r1, #0
 80089e2:	6878      	ldr	r0, [r7, #4]
 80089e4:	f013 fd86 	bl	801c4f4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 80089e8:	4603      	mov	r3, r0
 80089ea:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 80089ec:	89fb      	ldrh	r3, [r7, #14]
}
 80089ee:	4618      	mov	r0, r3
 80089f0:	3714      	adds	r7, #20
 80089f2:	46bd      	mov	sp, r7
 80089f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80089f8:	b003      	add	sp, #12
 80089fa:	4770      	bx	lr

080089fc <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 80089fc:	b40c      	push	{r2, r3}
 80089fe:	b580      	push	{r7, lr}
 8008a00:	b084      	sub	sp, #16
 8008a02:	af00      	add	r7, sp, #0
 8008a04:	6078      	str	r0, [r7, #4]
 8008a06:	460b      	mov	r3, r1
 8008a08:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 8008a0a:	f107 031c 	add.w	r3, r7, #28
 8008a0e:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8008a10:	78f9      	ldrb	r1, [r7, #3]
 8008a12:	68bb      	ldr	r3, [r7, #8]
 8008a14:	69ba      	ldr	r2, [r7, #24]
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	f013 fd6c 	bl	801c4f4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8008a20:	89fb      	ldrh	r3, [r7, #14]
}
 8008a22:	4618      	mov	r0, r3
 8008a24:	3710      	adds	r7, #16
 8008a26:	46bd      	mov	sp, r7
 8008a28:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008a2c:	b002      	add	sp, #8
 8008a2e:	4770      	bx	lr

08008a30 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b08a      	sub	sp, #40	; 0x28
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
 8008a38:	460b      	mov	r3, r1
 8008a3a:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d016      	beq.n	8008a72 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	3322      	adds	r3, #34	; 0x22
 8008a48:	627b      	str	r3, [r7, #36]	; 0x24
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8008a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a4c:	8adb      	ldrh	r3, [r3, #22]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d105      	bne.n	8008a5e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 8008a52:	4b43      	ldr	r3, [pc, #268]	; (8008b60 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8008a54:	4a43      	ldr	r2, [pc, #268]	; (8008b64 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8008a56:	21c5      	movs	r1, #197	; 0xc5
 8008a58:	4843      	ldr	r0, [pc, #268]	; (8008b68 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8008a5a:	f01d fc7f 	bl	802635c <__assert_func>
            return buffer[pos];
 8008a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a60:	8a9b      	ldrh	r3, [r3, #20]
 8008a62:	461a      	mov	r2, r3
 8008a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a66:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d001      	beq.n	8008a72 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8008a6e:	2301      	movs	r3, #1
 8008a70:	e000      	b.n	8008a74 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 8008a72:	2300      	movs	r3, #0
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d06a      	beq.n	8008b4e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 8008a78:	6878      	ldr	r0, [r7, #4]
 8008a7a:	f014 ff9f 	bl	801d9bc <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	3322      	adds	r3, #34	; 0x22
 8008a82:	623b      	str	r3, [r7, #32]
 8008a84:	2301      	movs	r3, #1
 8008a86:	83fb      	strh	r3, [r7, #30]
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8008a88:	6a3b      	ldr	r3, [r7, #32]
 8008a8a:	8adb      	ldrh	r3, [r3, #22]
 8008a8c:	8bfa      	ldrh	r2, [r7, #30]
 8008a8e:	429a      	cmp	r2, r3
 8008a90:	d305      	bcc.n	8008a9e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 8008a92:	4b36      	ldr	r3, [pc, #216]	; (8008b6c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 8008a94:	4a36      	ldr	r2, [pc, #216]	; (8008b70 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 8008a96:	21cb      	movs	r1, #203	; 0xcb
 8008a98:	4833      	ldr	r0, [pc, #204]	; (8008b68 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8008a9a:	f01d fc5f 	bl	802635c <__assert_func>
            const uint16_t index = pos + offset;
 8008a9e:	6a3b      	ldr	r3, [r7, #32]
 8008aa0:	8a9a      	ldrh	r2, [r3, #20]
 8008aa2:	8bfb      	ldrh	r3, [r7, #30]
 8008aa4:	4413      	add	r3, r2
 8008aa6:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 8008aa8:	8bbb      	ldrh	r3, [r7, #28]
 8008aaa:	2b09      	cmp	r3, #9
 8008aac:	d801      	bhi.n	8008ab2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 8008aae:	8bbb      	ldrh	r3, [r7, #28]
 8008ab0:	e001      	b.n	8008ab6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 8008ab2:	8bbb      	ldrh	r3, [r7, #28]
 8008ab4:	3b0a      	subs	r3, #10
 8008ab6:	6a3a      	ldr	r2, [r7, #32]
 8008ab8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008abc:	f640 123f 	movw	r2, #2367	; 0x93f
 8008ac0:	4293      	cmp	r3, r2
 8008ac2:	bf0c      	ite	eq
 8008ac4:	2301      	moveq	r3, #1
 8008ac6:	2300      	movne	r3, #0
 8008ac8:	b2db      	uxtb	r3, r3
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d03f      	beq.n	8008b4e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	3322      	adds	r3, #34	; 0x22
 8008ad2:	687a      	ldr	r2, [r7, #4]
 8008ad4:	3222      	adds	r2, #34	; 0x22
 8008ad6:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 8008ad8:	68ba      	ldr	r2, [r7, #8]
 8008ada:	8ad2      	ldrh	r2, [r2, #22]
 8008adc:	2a00      	cmp	r2, #0
 8008ade:	d105      	bne.n	8008aec <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 8008ae0:	4b1f      	ldr	r3, [pc, #124]	; (8008b60 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8008ae2:	4a20      	ldr	r2, [pc, #128]	; (8008b64 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8008ae4:	21c5      	movs	r1, #197	; 0xc5
 8008ae6:	4820      	ldr	r0, [pc, #128]	; (8008b68 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8008ae8:	f01d fc38 	bl	802635c <__assert_func>
            return buffer[pos];
 8008aec:	68ba      	ldr	r2, [r7, #8]
 8008aee:	8a92      	ldrh	r2, [r2, #20]
 8008af0:	4611      	mov	r1, r2
 8008af2:	68ba      	ldr	r2, [r7, #8]
 8008af4:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8008af8:	613b      	str	r3, [r7, #16]
 8008afa:	4613      	mov	r3, r2
 8008afc:	81fb      	strh	r3, [r7, #14]
            buffer[pos] = newChar;
        }

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 8008afe:	693b      	ldr	r3, [r7, #16]
 8008b00:	8adb      	ldrh	r3, [r3, #22]
 8008b02:	2b01      	cmp	r3, #1
 8008b04:	d806      	bhi.n	8008b14 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 8008b06:	4b1b      	ldr	r3, [pc, #108]	; (8008b74 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 8008b08:	4a1b      	ldr	r2, [pc, #108]	; (8008b78 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 8008b0a:	f44f 718e 	mov.w	r1, #284	; 0x11c
 8008b0e:	4816      	ldr	r0, [pc, #88]	; (8008b68 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8008b10:	f01d fc24 	bl	802635c <__assert_func>
            const uint16_t index = pos + 1;
 8008b14:	693b      	ldr	r3, [r7, #16]
 8008b16:	8a9b      	ldrh	r3, [r3, #20]
 8008b18:	3301      	adds	r3, #1
 8008b1a:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 8008b1c:	89bb      	ldrh	r3, [r7, #12]
 8008b1e:	2b09      	cmp	r3, #9
 8008b20:	d801      	bhi.n	8008b26 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 8008b22:	89bb      	ldrh	r3, [r7, #12]
 8008b24:	e000      	b.n	8008b28 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 8008b26:	2300      	movs	r3, #0
 8008b28:	693a      	ldr	r2, [r7, #16]
 8008b2a:	89f9      	ldrh	r1, [r7, #14]
 8008b2c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 8008b30:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	3322      	adds	r3, #34	; 0x22
 8008b36:	61bb      	str	r3, [r7, #24]
 8008b38:	f640 133f 	movw	r3, #2367	; 0x93f
 8008b3c:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 8008b3e:	69bb      	ldr	r3, [r7, #24]
 8008b40:	8a9b      	ldrh	r3, [r3, #20]
 8008b42:	4619      	mov	r1, r3
 8008b44:	69bb      	ldr	r3, [r7, #24]
 8008b46:	8afa      	ldrh	r2, [r7, #22]
 8008b48:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 8008b4c:	bf00      	nop
        }
    }
    return getNextChar();
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	f014 fe36 	bl	801d7c0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8008b54:	4603      	mov	r3, r0
}
 8008b56:	4618      	mov	r0, r3
 8008b58:	3728      	adds	r7, #40	; 0x28
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	bd80      	pop	{r7, pc}
 8008b5e:	bf00      	nop
 8008b60:	0802937c 	.word	0x0802937c
 8008b64:	08029388 	.word	0x08029388
 8008b68:	08029434 	.word	0x08029434
 8008b6c:	08029480 	.word	0x08029480
 8008b70:	08029490 	.word	0x08029490
 8008b74:	08029564 	.word	0x08029564
 8008b78:	08029570 	.word	0x08029570

08008b7c <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b082      	sub	sp, #8
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 8008b84:	6878      	ldr	r0, [r7, #4]
 8008b86:	f014 fde4 	bl	801d752 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 8008b8a:	bf00      	nop
 8008b8c:	3708      	adds	r7, #8
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bd80      	pop	{r7, pc}
	...

08008b94 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8008b94:	b590      	push	{r4, r7, lr}
 8008b96:	b085      	sub	sp, #20
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	4603      	mov	r3, r0
 8008b9c:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 8008ba2:	88fb      	ldrh	r3, [r7, #6]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d127      	bne.n	8008bf8 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 8008ba8:	88fb      	ldrh	r3, [r7, #6]
 8008baa:	4a1e      	ldr	r2, [pc, #120]	; (8008c24 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8008bac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d016      	beq.n	8008be2 <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 8008bb4:	88fb      	ldrh	r3, [r7, #6]
 8008bb6:	4a1b      	ldr	r2, [pc, #108]	; (8008c24 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8008bb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008bbc:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8008bbe:	68bb      	ldr	r3, [r7, #8]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	68ba      	ldr	r2, [r7, #8]
 8008bc4:	4413      	add	r3, r2
 8008bc6:	4a18      	ldr	r2, [pc, #96]	; (8008c28 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8008bc8:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8008bca:	68bb      	ldr	r3, [r7, #8]
 8008bcc:	685b      	ldr	r3, [r3, #4]
 8008bce:	68ba      	ldr	r2, [r7, #8]
 8008bd0:	4413      	add	r3, r2
 8008bd2:	4a16      	ldr	r2, [pc, #88]	; (8008c2c <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8008bd4:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8008bd6:	68bb      	ldr	r3, [r7, #8]
 8008bd8:	689b      	ldr	r3, [r3, #8]
 8008bda:	68ba      	ldr	r2, [r7, #8]
 8008bdc:	4413      	add	r3, r2
 8008bde:	60fb      	str	r3, [r7, #12]
 8008be0:	e00a      	b.n	8008bf8 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            // Compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 8008be2:	4b11      	ldr	r3, [pc, #68]	; (8008c28 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8008be4:	4a12      	ldr	r2, [pc, #72]	; (8008c30 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 8008be6:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8008be8:	4a12      	ldr	r2, [pc, #72]	; (8008c34 <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 8008bea:	4b10      	ldr	r3, [pc, #64]	; (8008c2c <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8008bec:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8008bee:	88fb      	ldrh	r3, [r7, #6]
 8008bf0:	4a11      	ldr	r2, [pc, #68]	; (8008c38 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 8008bf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008bf6:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d00d      	beq.n	8008c1a <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 8008bfe:	4a0f      	ldr	r2, [pc, #60]	; (8008c3c <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 8008c00:	88fb      	ldrh	r3, [r7, #6]
 8008c02:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8008c04:	f000 f824 	bl	8008c50 <_ZN17TypedTextDatabase8getFontsEv>
 8008c08:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8008c0a:	f000 f819 	bl	8008c40 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 8008c0e:	4603      	mov	r3, r0
 8008c10:	461a      	mov	r2, r3
 8008c12:	4621      	mov	r1, r4
 8008c14:	68f8      	ldr	r0, [r7, #12]
 8008c16:	f7ff febd 	bl	8008994 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 8008c1a:	bf00      	nop
 8008c1c:	3714      	adds	r7, #20
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	bd90      	pop	{r4, r7, pc}
 8008c22:	bf00      	nop
 8008c24:	2400b208 	.word	0x2400b208
 8008c28:	2400b210 	.word	0x2400b210
 8008c2c:	2400b214 	.word	0x2400b214
 8008c30:	900001ac 	.word	0x900001ac
 8008c34:	900001a8 	.word	0x900001a8
 8008c38:	900001b4 	.word	0x900001b4
 8008c3c:	2400b20c 	.word	0x2400b20c

08008c40 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 8008c40:	b480      	push	{r7}
 8008c42:	af00      	add	r7, sp, #0
    return 0;
 8008c44:	2300      	movs	r3, #0
}
 8008c46:	4618      	mov	r0, r3
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4e:	4770      	bx	lr

08008c50 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 8008c50:	b480      	push	{r7}
 8008c52:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 8008c54:	4b02      	ldr	r3, [pc, #8]	; (8008c60 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 8008c56:	4618      	mov	r0, r3
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5e:	4770      	bx	lr
 8008c60:	2400b218 	.word	0x2400b218

08008c64 <_Z41__static_initialization_and_destruction_0ii>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b082      	sub	sp, #8
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
 8008c6c:	6039      	str	r1, [r7, #0]
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	2b01      	cmp	r3, #1
 8008c72:	d113      	bne.n	8008c9c <_Z41__static_initialization_and_destruction_0ii+0x38>
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008c7a:	4293      	cmp	r3, r2
 8008c7c:	d10e      	bne.n	8008c9c <_Z41__static_initialization_and_destruction_0ii+0x38>
    &(getFont_verdana_20_4bpp()),
 8008c7e:	f7ff fdb9 	bl	80087f4 <_Z23getFont_verdana_20_4bppv>
 8008c82:	4603      	mov	r3, r0
};
 8008c84:	4a07      	ldr	r2, [pc, #28]	; (8008ca4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8008c86:	6013      	str	r3, [r2, #0]
    &(getFont_verdana_40_4bpp()),
 8008c88:	f7ff fe0e 	bl	80088a8 <_Z23getFont_verdana_40_4bppv>
 8008c8c:	4603      	mov	r3, r0
};
 8008c8e:	4a05      	ldr	r2, [pc, #20]	; (8008ca4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8008c90:	6053      	str	r3, [r2, #4]
    &(getFont_verdana_10_4bpp())
 8008c92:	f7ff fd55 	bl	8008740 <_Z23getFont_verdana_10_4bppv>
 8008c96:	4603      	mov	r3, r0
};
 8008c98:	4a02      	ldr	r2, [pc, #8]	; (8008ca4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8008c9a:	6093      	str	r3, [r2, #8]
} // namespace TypedTextDatabase
 8008c9c:	bf00      	nop
 8008c9e:	3708      	adds	r7, #8
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	bd80      	pop	{r7, pc}
 8008ca4:	2400b218 	.word	0x2400b218

08008ca8 <_GLOBAL__sub_I_touchgfx_fonts>:
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	af00      	add	r7, sp, #0
 8008cac:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008cb0:	2001      	movs	r0, #1
 8008cb2:	f7ff ffd7 	bl	8008c64 <_Z41__static_initialization_and_destruction_0ii>
 8008cb6:	bd80      	pop	{r7, pc}

08008cb8 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b084      	sub	sp, #16
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	60f8      	str	r0, [r7, #12]
 8008cc0:	60b9      	str	r1, [r7, #8]
 8008cc2:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	687a      	ldr	r2, [r7, #4]
 8008cc8:	68b9      	ldr	r1, [r7, #8]
 8008cca:	4618      	mov	r0, r3
 8008ccc:	f7fe fd12 	bl	80076f4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8008cd0:	4a03      	ldr	r2, [pc, #12]	; (8008ce0 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	601a      	str	r2, [r3, #0]
{

}
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	4618      	mov	r0, r3
 8008cda:	3710      	adds	r7, #16
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	bd80      	pop	{r7, pc}
 8008ce0:	08029a4c 	.word	0x08029a4c

08008ce4 <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 8008ce4:	b480      	push	{r7}
 8008ce6:	b083      	sub	sp, #12
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
    {
    }
 8008cec:	bf00      	nop
 8008cee:	370c      	adds	r7, #12
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf6:	4770      	bx	lr

08008cf8 <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 8008cf8:	b480      	push	{r7}
 8008cfa:	b083      	sub	sp, #12
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
    {
    }
 8008d00:	bf00      	nop
 8008d02:	370c      	adds	r7, #12
 8008d04:	46bd      	mov	sp, r7
 8008d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0a:	4770      	bx	lr

08008d0c <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 8008d0c:	b480      	push	{r7}
 8008d0e:	b083      	sub	sp, #12
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
    {
 8008d14:	4a04      	ldr	r2, [pc, #16]	; (8008d28 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	601a      	str	r2, [r3, #0]
    }
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	370c      	adds	r7, #12
 8008d20:	46bd      	mov	sp, r7
 8008d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d26:	4770      	bx	lr
 8008d28:	0802a2fc 	.word	0x0802a2fc

08008d2c <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b082      	sub	sp, #8
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
    }
 8008d34:	6878      	ldr	r0, [r7, #4]
 8008d36:	f7ff ffe9 	bl	8008d0c <_ZN8touchgfx9PresenterD1Ev>
 8008d3a:	2104      	movs	r1, #4
 8008d3c:	6878      	ldr	r0, [r7, #4]
 8008d3e:	f01d fade 	bl	80262fe <_ZdlPvj>
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	4618      	mov	r0, r3
 8008d46:	3708      	adds	r7, #8
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	bd80      	pop	{r7, pc}

08008d4c <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 8008d4c:	b480      	push	{r7}
 8008d4e:	b083      	sub	sp, #12
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
    {
 8008d54:	4a04      	ldr	r2, [pc, #16]	; (8008d68 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	601a      	str	r2, [r3, #0]
    }
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	370c      	adds	r7, #12
 8008d60:	46bd      	mov	sp, r7
 8008d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d66:	4770      	bx	lr
 8008d68:	0802a2fc 	.word	0x0802a2fc

08008d6c <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 8008d6c:	b480      	push	{r7}
 8008d6e:	b083      	sub	sp, #12
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
 8008d74:	4a06      	ldr	r2, [pc, #24]	; (8008d90 <_ZN13ModelListenerC1Ev+0x24>)
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	601a      	str	r2, [r3, #0]
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	605a      	str	r2, [r3, #4]
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	4618      	mov	r0, r3
 8008d84:	370c      	adds	r7, #12
 8008d86:	46bd      	mov	sp, r7
 8008d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8c:	4770      	bx	lr
 8008d8e:	bf00      	nop
 8008d90:	0802a2ec 	.word	0x0802a2ec

08008d94 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 8008d94:	b480      	push	{r7}
 8008d96:	b083      	sub	sp, #12
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
 8008d9c:	4a04      	ldr	r2, [pc, #16]	; (8008db0 <_ZN13ModelListenerD1Ev+0x1c>)
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	601a      	str	r2, [r3, #0]
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	4618      	mov	r0, r3
 8008da6:	370c      	adds	r7, #12
 8008da8:	46bd      	mov	sp, r7
 8008daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dae:	4770      	bx	lr
 8008db0:	0802a2ec 	.word	0x0802a2ec

08008db4 <_ZN13ModelListenerD0Ev>:
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b082      	sub	sp, #8
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	f7ff ffe9 	bl	8008d94 <_ZN13ModelListenerD1Ev>
 8008dc2:	2108      	movs	r1, #8
 8008dc4:	6878      	ldr	r0, [r7, #4]
 8008dc6:	f01d fa9a 	bl	80262fe <_ZdlPvj>
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	4618      	mov	r0, r3
 8008dce:	3708      	adds	r7, #8
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bd80      	pop	{r7, pc}

08008dd4 <_ZN19MainScreenPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~MainScreenPresenter() {};
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b082      	sub	sp, #8
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
 8008ddc:	4a09      	ldr	r2, [pc, #36]	; (8008e04 <_ZN19MainScreenPresenterD1Ev+0x30>)
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	601a      	str	r2, [r3, #0]
 8008de2:	4a09      	ldr	r2, [pc, #36]	; (8008e08 <_ZN19MainScreenPresenterD1Ev+0x34>)
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	605a      	str	r2, [r3, #4]
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	3304      	adds	r3, #4
 8008dec:	4618      	mov	r0, r3
 8008dee:	f7ff ffd1 	bl	8008d94 <_ZN13ModelListenerD1Ev>
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	4618      	mov	r0, r3
 8008df6:	f7ff ff89 	bl	8008d0c <_ZN8touchgfx9PresenterD1Ev>
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	3708      	adds	r7, #8
 8008e00:	46bd      	mov	sp, r7
 8008e02:	bd80      	pop	{r7, pc}
 8008e04:	0802a2c4 	.word	0x0802a2c4
 8008e08:	0802a2dc 	.word	0x0802a2dc

08008e0c <_ZThn4_N19MainScreenPresenterD1Ev>:
 8008e0c:	f1a0 0004 	sub.w	r0, r0, #4
 8008e10:	e7e0      	b.n	8008dd4 <_ZN19MainScreenPresenterD1Ev>
 8008e12:	bf00      	nop

08008e14 <_ZN19MainScreenPresenterD0Ev>:
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b082      	sub	sp, #8
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
 8008e1c:	6878      	ldr	r0, [r7, #4]
 8008e1e:	f7ff ffd9 	bl	8008dd4 <_ZN19MainScreenPresenterD1Ev>
 8008e22:	2110      	movs	r1, #16
 8008e24:	6878      	ldr	r0, [r7, #4]
 8008e26:	f01d fa6a 	bl	80262fe <_ZdlPvj>
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	3708      	adds	r7, #8
 8008e30:	46bd      	mov	sp, r7
 8008e32:	bd80      	pop	{r7, pc}

08008e34 <_ZThn4_N19MainScreenPresenterD0Ev>:
 8008e34:	f1a0 0004 	sub.w	r0, r0, #4
 8008e38:	e7ec      	b.n	8008e14 <_ZN19MainScreenPresenterD0Ev>
	...

08008e3c <_ZN19MainScreenPresenterC1ER14MainScreenView>:
#include <gui/mainscreen_screen/MainScreenView.hpp>
#include <gui/mainscreen_screen/MainScreenPresenter.hpp>

MainScreenPresenter::MainScreenPresenter(MainScreenView& v)
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b082      	sub	sp, #8
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
 8008e44:	6039      	str	r1, [r7, #0]
    : view(v)
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	4618      	mov	r0, r3
 8008e4a:	f7ff ff7f 	bl	8008d4c <_ZN8touchgfx9PresenterC1Ev>
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	3304      	adds	r3, #4
 8008e52:	4618      	mov	r0, r3
 8008e54:	f7ff ff8a 	bl	8008d6c <_ZN13ModelListenerC1Ev>
 8008e58:	4a06      	ldr	r2, [pc, #24]	; (8008e74 <_ZN19MainScreenPresenterC1ER14MainScreenView+0x38>)
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	601a      	str	r2, [r3, #0]
 8008e5e:	4a06      	ldr	r2, [pc, #24]	; (8008e78 <_ZN19MainScreenPresenterC1ER14MainScreenView+0x3c>)
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	605a      	str	r2, [r3, #4]
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	683a      	ldr	r2, [r7, #0]
 8008e68:	60da      	str	r2, [r3, #12]
{

}
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	3708      	adds	r7, #8
 8008e70:	46bd      	mov	sp, r7
 8008e72:	bd80      	pop	{r7, pc}
 8008e74:	0802a2c4 	.word	0x0802a2c4
 8008e78:	0802a2dc 	.word	0x0802a2dc

08008e7c <_ZN19MainScreenPresenter8activateEv>:

void MainScreenPresenter::activate()
{
 8008e7c:	b480      	push	{r7}
 8008e7e:	b083      	sub	sp, #12
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]

}
 8008e84:	bf00      	nop
 8008e86:	370c      	adds	r7, #12
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8e:	4770      	bx	lr

08008e90 <_ZN19MainScreenPresenter10deactivateEv>:

void MainScreenPresenter::deactivate()
{
 8008e90:	b480      	push	{r7}
 8008e92:	b083      	sub	sp, #12
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]

}
 8008e98:	bf00      	nop
 8008e9a:	370c      	adds	r7, #12
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea2:	4770      	bx	lr

08008ea4 <_ZNK8touchgfx6Bitmap5getIdEv>:
    /**
     * Gets the id of this Bitmap.
     *
     * @return The id of this Bitmap.
     */
    BitmapId getId() const
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b082      	sub	sp, #8
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
    {
        assert(bitmaps != 0 && "Bitmap database has not been initialized.");
 8008eac:	4b07      	ldr	r3, [pc, #28]	; (8008ecc <_ZNK8touchgfx6Bitmap5getIdEv+0x28>)
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d105      	bne.n	8008ec0 <_ZNK8touchgfx6Bitmap5getIdEv+0x1c>
 8008eb4:	4b06      	ldr	r3, [pc, #24]	; (8008ed0 <_ZNK8touchgfx6Bitmap5getIdEv+0x2c>)
 8008eb6:	4a07      	ldr	r2, [pc, #28]	; (8008ed4 <_ZNK8touchgfx6Bitmap5getIdEv+0x30>)
 8008eb8:	2187      	movs	r1, #135	; 0x87
 8008eba:	4807      	ldr	r0, [pc, #28]	; (8008ed8 <_ZNK8touchgfx6Bitmap5getIdEv+0x34>)
 8008ebc:	f01d fa4e 	bl	802635c <__assert_func>
        return bitmapId;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	881b      	ldrh	r3, [r3, #0]
    }
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	3708      	adds	r7, #8
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	bd80      	pop	{r7, pc}
 8008ecc:	24026204 	.word	0x24026204
 8008ed0:	08029624 	.word	0x08029624
 8008ed4:	08029660 	.word	0x08029660
 8008ed8:	08029694 	.word	0x08029694

08008edc <_ZNK8touchgfx12ToggleButton8getStateEv>:
     * Gets the state of the ToggleButton as set with forceState.
     *
     * @return True if the button has been toggled, i.e. the pressed state is shown when the
     *         button is not pressed.
     */
    bool getState() const
 8008edc:	b590      	push	{r4, r7, lr}
 8008ede:	b083      	sub	sp, #12
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
    {
        return up.getId() == originalPressed.getId();
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	332e      	adds	r3, #46	; 0x2e
 8008ee8:	4618      	mov	r0, r3
 8008eea:	f7ff ffdb 	bl	8008ea4 <_ZNK8touchgfx6Bitmap5getIdEv>
 8008eee:	4603      	mov	r3, r0
 8008ef0:	461c      	mov	r4, r3
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	3334      	adds	r3, #52	; 0x34
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	f7ff ffd4 	bl	8008ea4 <_ZNK8touchgfx6Bitmap5getIdEv>
 8008efc:	4603      	mov	r3, r0
 8008efe:	429c      	cmp	r4, r3
 8008f00:	bf0c      	ite	eq
 8008f02:	2301      	moveq	r3, #1
 8008f04:	2300      	movne	r3, #0
 8008f06:	b2db      	uxtb	r3, r3
    }
 8008f08:	4618      	mov	r0, r3
 8008f0a:	370c      	adds	r7, #12
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	bd90      	pop	{r4, r7, pc}

08008f10 <_ZN14MainScreenViewD1Ev>:

class MainScreenView : public MainScreenViewBase
{
public:
    MainScreenView();
    virtual ~MainScreenView() {}
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b082      	sub	sp, #8
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
 8008f18:	4a05      	ldr	r2, [pc, #20]	; (8008f30 <_ZN14MainScreenViewD1Ev+0x20>)
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	601a      	str	r2, [r3, #0]
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	4618      	mov	r0, r3
 8008f22:	f7ff fa39 	bl	8008398 <_ZN18MainScreenViewBaseD1Ev>
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	4618      	mov	r0, r3
 8008f2a:	3708      	adds	r7, #8
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	bd80      	pop	{r7, pc}
 8008f30:	0802a314 	.word	0x0802a314

08008f34 <_ZN14MainScreenViewD0Ev>:
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b082      	sub	sp, #8
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
 8008f3c:	6878      	ldr	r0, [r7, #4]
 8008f3e:	f7ff ffe7 	bl	8008f10 <_ZN14MainScreenViewD1Ev>
 8008f42:	21e0      	movs	r1, #224	; 0xe0
 8008f44:	6878      	ldr	r0, [r7, #4]
 8008f46:	f01d f9da 	bl	80262fe <_ZdlPvj>
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	3708      	adds	r7, #8
 8008f50:	46bd      	mov	sp, r7
 8008f52:	bd80      	pop	{r7, pc}

08008f54 <_ZN14MainScreenViewC1Ev>:
#include "main.h"
#include <gui/mainscreen_screen/MainScreenView.hpp>

MainScreenView::MainScreenView()
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b082      	sub	sp, #8
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	4618      	mov	r0, r3
 8008f60:	f7ff f952 	bl	8008208 <_ZN18MainScreenViewBaseC1Ev>
 8008f64:	4a03      	ldr	r2, [pc, #12]	; (8008f74 <_ZN14MainScreenViewC1Ev+0x20>)
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	601a      	str	r2, [r3, #0]
{

}
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	3708      	adds	r7, #8
 8008f70:	46bd      	mov	sp, r7
 8008f72:	bd80      	pop	{r7, pc}
 8008f74:	0802a314 	.word	0x0802a314

08008f78 <_ZN14MainScreenView11setupScreenEv>:

void MainScreenView::setupScreen()
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b082      	sub	sp, #8
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
    MainScreenViewBase::setupScreen();
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	4618      	mov	r0, r3
 8008f84:	f7ff fa3e 	bl	8008404 <_ZN18MainScreenViewBase11setupScreenEv>
}
 8008f88:	bf00      	nop
 8008f8a:	3708      	adds	r7, #8
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	bd80      	pop	{r7, pc}

08008f90 <_ZN14MainScreenView14tearDownScreenEv>:

void MainScreenView::tearDownScreen()
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b082      	sub	sp, #8
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
    MainScreenViewBase::tearDownScreen();
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	f7fe ffca 	bl	8007f34 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8008fa0:	bf00      	nop
 8008fa2:	3708      	adds	r7, #8
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	bd80      	pop	{r7, pc}

08008fa8 <_ZN14MainScreenView14ToggleUserLED1Ev>:

// LED Toggle function
void MainScreenView::ToggleUserLED1()
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b082      	sub	sp, #8
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
	if (LEDtoggleButton.getState())
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	3398      	adds	r3, #152	; 0x98
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	f7ff ff91 	bl	8008edc <_ZNK8touchgfx12ToggleButton8getStateEv>
 8008fba:	4603      	mov	r3, r0
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d006      	beq.n	8008fce <_ZN14MainScreenView14ToggleUserLED1Ev+0x26>
	{
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_11, GPIO_PIN_SET);
 8008fc0:	2201      	movs	r2, #1
 8008fc2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008fc6:	4807      	ldr	r0, [pc, #28]	; (8008fe4 <_ZN14MainScreenView14ToggleUserLED1Ev+0x3c>)
 8008fc8:	f003 fd6e 	bl	800caa8 <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_11, GPIO_PIN_RESET);
	}
}
 8008fcc:	e005      	b.n	8008fda <_ZN14MainScreenView14ToggleUserLED1Ev+0x32>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_11, GPIO_PIN_RESET);
 8008fce:	2200      	movs	r2, #0
 8008fd0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008fd4:	4803      	ldr	r0, [pc, #12]	; (8008fe4 <_ZN14MainScreenView14ToggleUserLED1Ev+0x3c>)
 8008fd6:	f003 fd67 	bl	800caa8 <HAL_GPIO_WritePin>
}
 8008fda:	bf00      	nop
 8008fdc:	3708      	adds	r7, #8
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	bd80      	pop	{r7, pc}
 8008fe2:	bf00      	nop
 8008fe4:	58021800 	.word	0x58021800

08008fe8 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 8008fe8:	b480      	push	{r7}
 8008fea:	b083      	sub	sp, #12
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	601a      	str	r2, [r3, #0]
{

}
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	370c      	adds	r7, #12
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009002:	4770      	bx	lr

08009004 <_ZN5Model4tickEv>:

void Model::tick()
{
 8009004:	b480      	push	{r7}
 8009006:	b083      	sub	sp, #12
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]

}
 800900c:	bf00      	nop
 800900e:	370c      	adds	r7, #12
 8009010:	46bd      	mov	sp, r7
 8009012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009016:	4770      	bx	lr

08009018 <FT5336_RegisterBusIO>:
  * @brief  Register IO bus to component object
  * @param  Component object pointer
  * @retval error status
  */
int32_t FT5336_RegisterBusIO (FT5336_Object_t *pObj, FT5336_IO_t *pIO)
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b084      	sub	sp, #16
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
 8009020:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d103      	bne.n	8009030 <FT5336_RegisterBusIO+0x18>
  {
    ret = FT5336_ERROR;
 8009028:	f04f 33ff 	mov.w	r3, #4294967295
 800902c:	60fb      	str	r3, [r7, #12]
 800902e:	e02c      	b.n	800908a <FT5336_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8009030:	683b      	ldr	r3, [r7, #0]
 8009032:	681a      	ldr	r2, [r3, #0]
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	685a      	ldr	r2, [r3, #4]
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	891a      	ldrh	r2, [r3, #8]
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	68da      	ldr	r2, [r3, #12]
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8009050:	683b      	ldr	r3, [r7, #0]
 8009052:	691a      	ldr	r2, [r3, #16]
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	695a      	ldr	r2, [r3, #20]
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = ReadRegWrap;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	4a0c      	ldr	r2, [pc, #48]	; (8009094 <FT5336_RegisterBusIO+0x7c>)
 8009064:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	4a0b      	ldr	r2, [pc, #44]	; (8009098 <FT5336_RegisterBusIO+0x80>)
 800906a:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	687a      	ldr	r2, [r7, #4]
 8009070:	621a      	str	r2, [r3, #32]

    if(pObj->IO.Init != NULL)
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d004      	beq.n	8009084 <FT5336_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	4798      	blx	r3
 8009080:	60f8      	str	r0, [r7, #12]
 8009082:	e002      	b.n	800908a <FT5336_RegisterBusIO+0x72>
    }
    else
    {
      ret = FT5336_ERROR;
 8009084:	f04f 33ff 	mov.w	r3, #4294967295
 8009088:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800908a:	68fb      	ldr	r3, [r7, #12]
}
 800908c:	4618      	mov	r0, r3
 800908e:	3710      	adds	r7, #16
 8009090:	46bd      	mov	sp, r7
 8009092:	bd80      	pop	{r7, pc}
 8009094:	08009491 	.word	0x08009491
 8009098:	080094c5 	.word	0x080094c5

0800909c <FT5336_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to FT5336 sensor capabilities
  * @retval Component status
  */
int32_t FT5336_GetCapabilities(FT5336_Object_t *pObj, FT5336_Capabilities_t *Capabilities)
{
 800909c:	b480      	push	{r7}
 800909e:	b083      	sub	sp, #12
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
 80090a4:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	2201      	movs	r2, #1
 80090aa:	701a      	strb	r2, [r3, #0]
  Capabilities->Gesture    = 1;
 80090ac:	683b      	ldr	r3, [r7, #0]
 80090ae:	2201      	movs	r2, #1
 80090b0:	705a      	strb	r2, [r3, #1]
  Capabilities->MaxTouch   = FT5336_MAX_NB_TOUCH;
 80090b2:	683b      	ldr	r3, [r7, #0]
 80090b4:	2205      	movs	r2, #5
 80090b6:	709a      	strb	r2, [r3, #2]
  Capabilities->MaxXl      = FT5336_MAX_X_LENGTH;
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80090be:	605a      	str	r2, [r3, #4]
  Capabilities->MaxYl      = FT5336_MAX_Y_LENGTH;
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	f44f 7288 	mov.w	r2, #272	; 0x110
 80090c6:	609a      	str	r2, [r3, #8]

  return FT5336_OK;
 80090c8:	2300      	movs	r3, #0
}
 80090ca:	4618      	mov	r0, r3
 80090cc:	370c      	adds	r7, #12
 80090ce:	46bd      	mov	sp, r7
 80090d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d4:	4770      	bx	lr

080090d6 <FT5336_Init>:
  * @param  pObj Component object pointer
  * @param  GestureInit: Gesture init structure
  * @retval FT5336_OK
  */
int32_t FT5336_Init(FT5336_Object_t *pObj)
{
 80090d6:	b580      	push	{r7, lr}
 80090d8:	b084      	sub	sp, #16
 80090da:	af00      	add	r7, sp, #0
 80090dc:	6078      	str	r0, [r7, #4]
  int32_t ret = FT5336_OK;
 80090de:	2300      	movs	r3, #0
 80090e0:	60fb      	str	r3, [r7, #12]

  if(pObj->IsInitialized == 0U)
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d10d      	bne.n	8009108 <FT5336_Init+0x32>
  {
    /* Initialize IO BUS layer */
    pObj->IO.Init();
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	4798      	blx	r3
    /* This is called internal calibration of the touch screen                 */
    ret += FT5336_TS_Calibration(pObj);
#endif /* (FT5336_AUTO_CALIBRATION_ENABLED == 1) */
    /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
    /* Note TS_INT is active low                                                                      */
    ret += FT5336_DisableIT(pObj);
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	f000 f987 	bl	8009406 <FT5336_DisableIT>
 80090f8:	4602      	mov	r2, r0
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	4413      	add	r3, r2
 80090fe:	60fb      	str	r3, [r7, #12]

    pObj->IsInitialized = 1;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2201      	movs	r2, #1
 8009104:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  if(ret != FT5336_OK)
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d002      	beq.n	8009114 <FT5336_Init+0x3e>
  {
    ret = FT5336_ERROR;
 800910e:	f04f 33ff 	mov.w	r3, #4294967295
 8009112:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8009114:	68fb      	ldr	r3, [r7, #12]
}
 8009116:	4618      	mov	r0, r3
 8009118:	3710      	adds	r7, #16
 800911a:	46bd      	mov	sp, r7
 800911c:	bd80      	pop	{r7, pc}

0800911e <FT5336_DeInit>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  pObj Component object pointer
  * @retval FT5336_OK
  */
int32_t FT5336_DeInit(FT5336_Object_t *pObj)
{
 800911e:	b480      	push	{r7}
 8009120:	b085      	sub	sp, #20
 8009122:	af00      	add	r7, sp, #0
 8009124:	6078      	str	r0, [r7, #4]
  int32_t ret = FT5336_OK;
 8009126:	2300      	movs	r3, #0
 8009128:	60fb      	str	r3, [r7, #12]

  if(pObj->IsInitialized == 1U)
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009130:	2b01      	cmp	r3, #1
 8009132:	d103      	bne.n	800913c <FT5336_DeInit+0x1e>
  {
    pObj->IsInitialized = 0;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2200      	movs	r2, #0
 8009138:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return ret;
 800913c:	68fb      	ldr	r3, [r7, #12]
}
 800913e:	4618      	mov	r0, r3
 8009140:	3714      	adds	r7, #20
 8009142:	46bd      	mov	sp, r7
 8009144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009148:	4770      	bx	lr

0800914a <FT5336_GestureConfig>:
  * @param  pObj  Component object pointer
  * @param  GestureInit Gesture init structure
  * @retval FT5336_OK
  */
int32_t FT5336_GestureConfig(FT5336_Object_t *pObj, FT5336_Gesture_Init_t *GestureInit)
{
 800914a:	b580      	push	{r7, lr}
 800914c:	b084      	sub	sp, #16
 800914e:	af00      	add	r7, sp, #0
 8009150:	6078      	str	r0, [r7, #4]
 8009152:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = ft5336_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	f103 0218 	add.w	r2, r3, #24
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	b2db      	uxtb	r3, r3
 8009160:	4619      	mov	r1, r3
 8009162:	4610      	mov	r0, r2
 8009164:	f000 fa25 	bl	80095b2 <ft5336_radian_value>
 8009168:	60f8      	str	r0, [r7, #12]
  ret += ft5336_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	f103 0218 	add.w	r2, r3, #24
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	685b      	ldr	r3, [r3, #4]
 8009174:	b2db      	uxtb	r3, r3
 8009176:	4619      	mov	r1, r3
 8009178:	4610      	mov	r0, r2
 800917a:	f000 fa2b 	bl	80095d4 <ft5336_offset_left_right>
 800917e:	4602      	mov	r2, r0
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	4413      	add	r3, r2
 8009184:	60fb      	str	r3, [r7, #12]
  ret += ft5336_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	f103 0218 	add.w	r2, r3, #24
 800918c:	683b      	ldr	r3, [r7, #0]
 800918e:	689b      	ldr	r3, [r3, #8]
 8009190:	b2db      	uxtb	r3, r3
 8009192:	4619      	mov	r1, r3
 8009194:	4610      	mov	r0, r2
 8009196:	f000 fa2e 	bl	80095f6 <ft5336_offset_up_down>
 800919a:	4602      	mov	r2, r0
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	4413      	add	r3, r2
 80091a0:	60fb      	str	r3, [r7, #12]
  ret += ft5336_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	f103 0218 	add.w	r2, r3, #24
 80091a8:	683b      	ldr	r3, [r7, #0]
 80091aa:	68db      	ldr	r3, [r3, #12]
 80091ac:	b2db      	uxtb	r3, r3
 80091ae:	4619      	mov	r1, r3
 80091b0:	4610      	mov	r0, r2
 80091b2:	f000 fa31 	bl	8009618 <ft5336_disatnce_left_right>
 80091b6:	4602      	mov	r2, r0
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	4413      	add	r3, r2
 80091bc:	60fb      	str	r3, [r7, #12]
  ret += ft5336_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	f103 0218 	add.w	r2, r3, #24
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	691b      	ldr	r3, [r3, #16]
 80091c8:	b2db      	uxtb	r3, r3
 80091ca:	4619      	mov	r1, r3
 80091cc:	4610      	mov	r0, r2
 80091ce:	f000 fa34 	bl	800963a <ft5336_distance_up_down>
 80091d2:	4602      	mov	r2, r0
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	4413      	add	r3, r2
 80091d8:	60fb      	str	r3, [r7, #12]
  ret += ft5336_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	f103 0218 	add.w	r2, r3, #24
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	695b      	ldr	r3, [r3, #20]
 80091e4:	b2db      	uxtb	r3, r3
 80091e6:	4619      	mov	r1, r3
 80091e8:	4610      	mov	r0, r2
 80091ea:	f000 fa37 	bl	800965c <ft5336_distance_zoom>
 80091ee:	4602      	mov	r2, r0
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	4413      	add	r3, r2
 80091f4:	60fb      	str	r3, [r7, #12]

  if(ret != FT5336_OK)
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d002      	beq.n	8009202 <FT5336_GestureConfig+0xb8>
  {
    ret = FT5336_ERROR;
 80091fc:	f04f 33ff 	mov.w	r3, #4294967295
 8009200:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8009202:	68fb      	ldr	r3, [r7, #12]
}
 8009204:	4618      	mov	r0, r3
 8009206:	3710      	adds	r7, #16
 8009208:	46bd      	mov	sp, r7
 800920a:	bd80      	pop	{r7, pc}

0800920c <FT5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  pObj Component object pointer
  * @retval The Device ID (two bytes).
  */
int32_t FT5336_ReadID(FT5336_Object_t *pObj, uint32_t *Id)
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b082      	sub	sp, #8
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
 8009214:	6039      	str	r1, [r7, #0]
  return ft5336_chip_id(&pObj->Ctx, (uint8_t *)Id);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	3318      	adds	r3, #24
 800921a:	6839      	ldr	r1, [r7, #0]
 800921c:	4618      	mov	r0, r3
 800921e:	f000 fa3f 	bl	80096a0 <ft5336_chip_id>
 8009222:	4603      	mov	r3, r0
}
 8009224:	4618      	mov	r0, r3
 8009226:	3708      	adds	r7, #8
 8009228:	46bd      	mov	sp, r7
 800922a:	bd80      	pop	{r7, pc}

0800922c <FT5336_GetState>:
  * @param  pObj Component object pointer
  * @param  State: Single Touch stucture pointer
  * @retval FT5336_OK.
  */
int32_t FT5336_GetState(FT5336_Object_t *pObj, FT5336_State_t *State)
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b084      	sub	sp, #16
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
 8009234:	6039      	str	r1, [r7, #0]
  int32_t ret = FT5336_OK;
 8009236:	2300      	movs	r3, #0
 8009238:	60fb      	str	r3, [r7, #12]
  uint8_t  data[4];

  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 800923a:	6878      	ldr	r0, [r7, #4]
 800923c:	f000 f908 	bl	8009450 <FT5336_DetectTouch>
 8009240:	4603      	mov	r3, r0
 8009242:	461a      	mov	r2, r3
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	601a      	str	r2, [r3, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f103 0018 	add.w	r0, r3, #24
 800924e:	f107 0208 	add.w	r2, r7, #8
 8009252:	2304      	movs	r3, #4
 8009254:	2103      	movs	r1, #3
 8009256:	f000 f94f 	bl	80094f8 <ft5336_read_reg>
 800925a:	4603      	mov	r3, r0
 800925c:	2b00      	cmp	r3, #0
 800925e:	d003      	beq.n	8009268 <FT5336_GetState+0x3c>
  {
    ret = FT5336_ERROR;
 8009260:	f04f 33ff 	mov.w	r3, #4294967295
 8009264:	60fb      	str	r3, [r7, #12]
 8009266:	e00f      	b.n	8009288 <FT5336_GetState+0x5c>
  }
  else
  {
    /* Send back first ready X position to caller */
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
 8009268:	7a3b      	ldrb	r3, [r7, #8]
 800926a:	021b      	lsls	r3, r3, #8
 800926c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8009270:	7a7a      	ldrb	r2, [r7, #9]
 8009272:	431a      	orrs	r2, r3
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	605a      	str	r2, [r3, #4]
    /* Send back first ready Y position to caller */
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
 8009278:	7abb      	ldrb	r3, [r7, #10]
 800927a:	021b      	lsls	r3, r3, #8
 800927c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8009280:	7afa      	ldrb	r2, [r7, #11]
 8009282:	431a      	orrs	r2, r3
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009288:	68fb      	ldr	r3, [r7, #12]
}
 800928a:	4618      	mov	r0, r3
 800928c:	3710      	adds	r7, #16
 800928e:	46bd      	mov	sp, r7
 8009290:	bd80      	pop	{r7, pc}

08009292 <FT5336_GetMultiTouchState>:
  * @param  pObj Component object pointer
  * @param  State Multi Touch structure pointer
  * @retval FT5336_OK.
  */
int32_t FT5336_GetMultiTouchState(FT5336_Object_t *pObj, FT5336_MultiTouch_State_t *State)
{
 8009292:	b580      	push	{r7, lr}
 8009294:	b08c      	sub	sp, #48	; 0x30
 8009296:	af00      	add	r7, sp, #0
 8009298:	6078      	str	r0, [r7, #4]
 800929a:	6039      	str	r1, [r7, #0]
  int32_t ret = FT5336_OK;
 800929c:	2300      	movs	r3, #0
 800929e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint8_t  data[30];
  uint32_t i;

  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 80092a0:	6878      	ldr	r0, [r7, #4]
 80092a2:	f000 f8d5 	bl	8009450 <FT5336_DetectTouch>
 80092a6:	4603      	mov	r3, r0
 80092a8:	461a      	mov	r2, r3
 80092aa:	683b      	ldr	r3, [r7, #0]
 80092ac:	601a      	str	r2, [r3, #0]

  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	f103 0018 	add.w	r0, r3, #24
 80092b4:	f107 0208 	add.w	r2, r7, #8
 80092b8:	231e      	movs	r3, #30
 80092ba:	2103      	movs	r1, #3
 80092bc:	f000 f91c 	bl	80094f8 <ft5336_read_reg>
 80092c0:	4603      	mov	r3, r0
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d003      	beq.n	80092ce <FT5336_GetMultiTouchState+0x3c>
  {
    ret = FT5336_ERROR;
 80092c6:	f04f 33ff 	mov.w	r3, #4294967295
 80092ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80092cc:	e077      	b.n	80093be <FT5336_GetMultiTouchState+0x12c>
  }
  else
  {
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 80092ce:	2300      	movs	r3, #0
 80092d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80092d2:	e071      	b.n	80093b8 <FT5336_GetMultiTouchState+0x126>
    {
    /* Send back first ready X position to caller */
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 80092d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80092d6:	4613      	mov	r3, r2
 80092d8:	005b      	lsls	r3, r3, #1
 80092da:	4413      	add	r3, r2
 80092dc:	005b      	lsls	r3, r3, #1
 80092de:	3330      	adds	r3, #48	; 0x30
 80092e0:	443b      	add	r3, r7
 80092e2:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80092e6:	021b      	lsls	r3, r3, #8
 80092e8:	f403 6170 	and.w	r1, r3, #3840	; 0xf00
 80092ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80092ee:	4613      	mov	r3, r2
 80092f0:	005b      	lsls	r3, r3, #1
 80092f2:	4413      	add	r3, r2
 80092f4:	005b      	lsls	r3, r3, #1
 80092f6:	3301      	adds	r3, #1
 80092f8:	3330      	adds	r3, #48	; 0x30
 80092fa:	443b      	add	r3, r7
 80092fc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8009300:	ea41 0203 	orr.w	r2, r1, r3
 8009304:	6839      	ldr	r1, [r7, #0]
 8009306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009308:	009b      	lsls	r3, r3, #2
 800930a:	440b      	add	r3, r1
 800930c:	605a      	str	r2, [r3, #4]
    /* Send back first ready Y position to caller */
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 800930e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009310:	4613      	mov	r3, r2
 8009312:	005b      	lsls	r3, r3, #1
 8009314:	4413      	add	r3, r2
 8009316:	005b      	lsls	r3, r3, #1
 8009318:	3302      	adds	r3, #2
 800931a:	3330      	adds	r3, #48	; 0x30
 800931c:	443b      	add	r3, r7
 800931e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8009322:	021b      	lsls	r3, r3, #8
 8009324:	f403 6170 	and.w	r1, r3, #3840	; 0xf00
 8009328:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800932a:	4613      	mov	r3, r2
 800932c:	005b      	lsls	r3, r3, #1
 800932e:	4413      	add	r3, r2
 8009330:	005b      	lsls	r3, r3, #1
 8009332:	3303      	adds	r3, #3
 8009334:	3330      	adds	r3, #48	; 0x30
 8009336:	443b      	add	r3, r7
 8009338:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800933c:	4319      	orrs	r1, r3
 800933e:	683b      	ldr	r3, [r7, #0]
 8009340:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009342:	3206      	adds	r2, #6
 8009344:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Send back first ready Event to caller */
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
 8009348:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800934a:	4613      	mov	r3, r2
 800934c:	005b      	lsls	r3, r3, #1
 800934e:	4413      	add	r3, r2
 8009350:	005b      	lsls	r3, r3, #1
 8009352:	3330      	adds	r3, #48	; 0x30
 8009354:	443b      	add	r3, r7
 8009356:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800935a:	099b      	lsrs	r3, r3, #6
 800935c:	b2db      	uxtb	r3, r3
 800935e:	4619      	mov	r1, r3
 8009360:	683b      	ldr	r3, [r7, #0]
 8009362:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009364:	3210      	adds	r2, #16
 8009366:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Send back first ready Weight to caller */
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
 800936a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800936c:	4613      	mov	r3, r2
 800936e:	005b      	lsls	r3, r3, #1
 8009370:	4413      	add	r3, r2
 8009372:	005b      	lsls	r3, r3, #1
 8009374:	3304      	adds	r3, #4
 8009376:	3330      	adds	r3, #48	; 0x30
 8009378:	443b      	add	r3, r7
 800937a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800937e:	4619      	mov	r1, r3
 8009380:	683a      	ldr	r2, [r7, #0]
 8009382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009384:	330a      	adds	r3, #10
 8009386:	009b      	lsls	r3, r3, #2
 8009388:	4413      	add	r3, r2
 800938a:	6059      	str	r1, [r3, #4]
    /* Send back first ready Area to caller */
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
 800938c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800938e:	4613      	mov	r3, r2
 8009390:	005b      	lsls	r3, r3, #1
 8009392:	4413      	add	r3, r2
 8009394:	005b      	lsls	r3, r3, #1
 8009396:	3305      	adds	r3, #5
 8009398:	3330      	adds	r3, #48	; 0x30
 800939a:	443b      	add	r3, r7
 800939c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80093a0:	091b      	lsrs	r3, r3, #4
 80093a2:	b2db      	uxtb	r3, r3
 80093a4:	4619      	mov	r1, r3
 80093a6:	683a      	ldr	r2, [r7, #0]
 80093a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093aa:	3314      	adds	r3, #20
 80093ac:	009b      	lsls	r3, r3, #2
 80093ae:	4413      	add	r3, r2
 80093b0:	6059      	str	r1, [r3, #4]
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 80093b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093b4:	3301      	adds	r3, #1
 80093b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80093b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093ba:	2b04      	cmp	r3, #4
 80093bc:	d98a      	bls.n	80092d4 <FT5336_GetMultiTouchState+0x42>
    }
  }

  return ret;
 80093be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80093c0:	4618      	mov	r0, r3
 80093c2:	3730      	adds	r7, #48	; 0x30
 80093c4:	46bd      	mov	sp, r7
 80093c6:	bd80      	pop	{r7, pc}

080093c8 <FT5336_GetGesture>:
  * @param  pObj Component object pointer
  * @param  GestureId: gesture ID
  * @retval Gesture ID.
  */
int32_t FT5336_GetGesture(FT5336_Object_t *pObj, uint8_t *GestureId)
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b082      	sub	sp, #8
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
 80093d0:	6039      	str	r1, [r7, #0]
  return ft5336_gest_id(&pObj->Ctx, GestureId);
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	3318      	adds	r3, #24
 80093d6:	6839      	ldr	r1, [r7, #0]
 80093d8:	4618      	mov	r0, r3
 80093da:	f000 f8bb 	bl	8009554 <ft5336_gest_id>
 80093de:	4603      	mov	r3, r0
}
 80093e0:	4618      	mov	r0, r3
 80093e2:	3708      	adds	r7, #8
 80093e4:	46bd      	mov	sp, r7
 80093e6:	bd80      	pop	{r7, pc}

080093e8 <FT5336_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_EnableIT(FT5336_Object_t *pObj)
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b082      	sub	sp, #8
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_TRIGGER);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	3318      	adds	r3, #24
 80093f4:	2101      	movs	r1, #1
 80093f6:	4618      	mov	r0, r3
 80093f8:	f000 f941 	bl	800967e <ft5336_g_mode>
 80093fc:	4603      	mov	r3, r0
}
 80093fe:	4618      	mov	r0, r3
 8009400:	3708      	adds	r7, #8
 8009402:	46bd      	mov	sp, r7
 8009404:	bd80      	pop	{r7, pc}

08009406 <FT5336_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_DisableIT(FT5336_Object_t *pObj)
{
 8009406:	b580      	push	{r7, lr}
 8009408:	b082      	sub	sp, #8
 800940a:	af00      	add	r7, sp, #0
 800940c:	6078      	str	r0, [r7, #4]
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_POLLING);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	3318      	adds	r3, #24
 8009412:	2100      	movs	r1, #0
 8009414:	4618      	mov	r0, r3
 8009416:	f000 f932 	bl	800967e <ft5336_g_mode>
 800941a:	4603      	mov	r3, r0
}
 800941c:	4618      	mov	r0, r3
 800941e:	3708      	adds	r7, #8
 8009420:	46bd      	mov	sp, r7
 8009422:	bd80      	pop	{r7, pc}

08009424 <FT5336_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  pObj Component object pointer
  * @retval TS interrupts status : always return 0 here
  */
int32_t FT5336_ITStatus(FT5336_Object_t *pObj)
{
 8009424:	b480      	push	{r7}
 8009426:	b083      	sub	sp, #12
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
 800942c:	2300      	movs	r3, #0
}
 800942e:	4618      	mov	r0, r3
 8009430:	370c      	adds	r7, #12
 8009432:	46bd      	mov	sp, r7
 8009434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009438:	4770      	bx	lr

0800943a <FT5336_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_ClearIT(FT5336_Object_t *pObj)
{
 800943a:	b480      	push	{r7}
 800943c:	b083      	sub	sp, #12
 800943e:	af00      	add	r7, sp, #0
 8009440:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
 8009442:	2300      	movs	r3, #0
}
 8009444:	4618      	mov	r0, r3
 8009446:	370c      	adds	r7, #12
 8009448:	46bd      	mov	sp, r7
 800944a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944e:	4770      	bx	lr

08009450 <FT5336_DetectTouch>:
  * @param  pObj Component object pointer
  * @retval Number of active touches detected (can be 0, 1 or 2) or FT5336_ERROR
  *         in case of error
  */
static int32_t FT5336_DetectTouch(FT5336_Object_t *pObj)
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b084      	sub	sp, #16
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t nb_touch;

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	3318      	adds	r3, #24
 800945c:	f107 020b 	add.w	r2, r7, #11
 8009460:	4611      	mov	r1, r2
 8009462:	4618      	mov	r0, r3
 8009464:	f000 f886 	bl	8009574 <ft5336_td_status>
 8009468:	4603      	mov	r3, r0
 800946a:	2b00      	cmp	r3, #0
 800946c:	d003      	beq.n	8009476 <FT5336_DetectTouch+0x26>
  {
    ret = FT5336_ERROR;
 800946e:	f04f 33ff 	mov.w	r3, #4294967295
 8009472:	60fb      	str	r3, [r7, #12]
 8009474:	e007      	b.n	8009486 <FT5336_DetectTouch+0x36>
  }
  else
  {
    if(nb_touch > FT5336_MAX_NB_TOUCH)
 8009476:	7afb      	ldrb	r3, [r7, #11]
 8009478:	2b05      	cmp	r3, #5
 800947a:	d902      	bls.n	8009482 <FT5336_DetectTouch+0x32>
    {
      /* If invalid number of touch detected, set it to zero */
      ret = 0;
 800947c:	2300      	movs	r3, #0
 800947e:	60fb      	str	r3, [r7, #12]
 8009480:	e001      	b.n	8009486 <FT5336_DetectTouch+0x36>
    }
    else
    {
      ret = (int32_t)nb_touch;
 8009482:	7afb      	ldrb	r3, [r7, #11]
 8009484:	60fb      	str	r3, [r7, #12]
    }
  }
  return ret;
 8009486:	68fb      	ldr	r3, [r7, #12]
}
 8009488:	4618      	mov	r0, r3
 800948a:	3710      	adds	r7, #16
 800948c:	46bd      	mov	sp, r7
 800948e:	bd80      	pop	{r7, pc}

08009490 <ReadRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8009490:	b590      	push	{r4, r7, lr}
 8009492:	b087      	sub	sp, #28
 8009494:	af00      	add	r7, sp, #0
 8009496:	60f8      	str	r0, [r7, #12]
 8009498:	607a      	str	r2, [r7, #4]
 800949a:	461a      	mov	r2, r3
 800949c:	460b      	mov	r3, r1
 800949e:	72fb      	strb	r3, [r7, #11]
 80094a0:	4613      	mov	r3, r2
 80094a2:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80094a8:	697b      	ldr	r3, [r7, #20]
 80094aa:	691c      	ldr	r4, [r3, #16]
 80094ac:	697b      	ldr	r3, [r7, #20]
 80094ae:	8918      	ldrh	r0, [r3, #8]
 80094b0:	7afb      	ldrb	r3, [r7, #11]
 80094b2:	b299      	uxth	r1, r3
 80094b4:	893b      	ldrh	r3, [r7, #8]
 80094b6:	687a      	ldr	r2, [r7, #4]
 80094b8:	47a0      	blx	r4
 80094ba:	4603      	mov	r3, r0
}
 80094bc:	4618      	mov	r0, r3
 80094be:	371c      	adds	r7, #28
 80094c0:	46bd      	mov	sp, r7
 80094c2:	bd90      	pop	{r4, r7, pc}

080094c4 <WriteRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 80094c4:	b590      	push	{r4, r7, lr}
 80094c6:	b087      	sub	sp, #28
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	60f8      	str	r0, [r7, #12]
 80094cc:	607a      	str	r2, [r7, #4]
 80094ce:	461a      	mov	r2, r3
 80094d0:	460b      	mov	r3, r1
 80094d2:	72fb      	strb	r3, [r7, #11]
 80094d4:	4613      	mov	r3, r2
 80094d6:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80094dc:	697b      	ldr	r3, [r7, #20]
 80094de:	68dc      	ldr	r4, [r3, #12]
 80094e0:	697b      	ldr	r3, [r7, #20]
 80094e2:	8918      	ldrh	r0, [r3, #8]
 80094e4:	7afb      	ldrb	r3, [r7, #11]
 80094e6:	b299      	uxth	r1, r3
 80094e8:	893b      	ldrh	r3, [r7, #8]
 80094ea:	687a      	ldr	r2, [r7, #4]
 80094ec:	47a0      	blx	r4
 80094ee:	4603      	mov	r3, r0
}
 80094f0:	4618      	mov	r0, r3
 80094f2:	371c      	adds	r7, #28
 80094f4:	46bd      	mov	sp, r7
 80094f6:	bd90      	pop	{r4, r7, pc}

080094f8 <ft5336_read_reg>:
  * @param  pdata pointer to data to be read
  * @param  length Length of data to read   
  * @retval Component status
  */
int32_t ft5336_read_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 80094f8:	b590      	push	{r4, r7, lr}
 80094fa:	b085      	sub	sp, #20
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	60f8      	str	r0, [r7, #12]
 8009500:	607a      	str	r2, [r7, #4]
 8009502:	461a      	mov	r2, r3
 8009504:	460b      	mov	r3, r1
 8009506:	72fb      	strb	r3, [r7, #11]
 8009508:	4613      	mov	r3, r2
 800950a:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	685c      	ldr	r4, [r3, #4]
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	6898      	ldr	r0, [r3, #8]
 8009514:	893b      	ldrh	r3, [r7, #8]
 8009516:	7af9      	ldrb	r1, [r7, #11]
 8009518:	687a      	ldr	r2, [r7, #4]
 800951a:	47a0      	blx	r4
 800951c:	4603      	mov	r3, r0
}
 800951e:	4618      	mov	r0, r3
 8009520:	3714      	adds	r7, #20
 8009522:	46bd      	mov	sp, r7
 8009524:	bd90      	pop	{r4, r7, pc}

08009526 <ft5336_write_reg>:
  * @param  pdata pointer to data to be written
  * @param  length Length of data to write   
  * @retval Component status
  */
int32_t ft5336_write_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
 8009526:	b590      	push	{r4, r7, lr}
 8009528:	b085      	sub	sp, #20
 800952a:	af00      	add	r7, sp, #0
 800952c:	60f8      	str	r0, [r7, #12]
 800952e:	607a      	str	r2, [r7, #4]
 8009530:	461a      	mov	r2, r3
 8009532:	460b      	mov	r3, r1
 8009534:	72fb      	strb	r3, [r7, #11]
 8009536:	4613      	mov	r3, r2
 8009538:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	681c      	ldr	r4, [r3, #0]
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	6898      	ldr	r0, [r3, #8]
 8009542:	893b      	ldrh	r3, [r7, #8]
 8009544:	7af9      	ldrb	r1, [r7, #11]
 8009546:	687a      	ldr	r2, [r7, #4]
 8009548:	47a0      	blx	r4
 800954a:	4603      	mov	r3, r0
}
 800954c:	4618      	mov	r0, r3
 800954e:	3714      	adds	r7, #20
 8009550:	46bd      	mov	sp, r7
 8009552:	bd90      	pop	{r4, r7, pc}

08009554 <ft5336_gest_id>:
  * @param  ctx Component context 
  * @param  value pointer to the value of FT5336_GEST_ID_REG register
  * @retval Component status
  */
int32_t  ft5336_gest_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b082      	sub	sp, #8
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
 800955c:	6039      	str	r1, [r7, #0]
  return ft5336_read_reg(ctx, FT5336_GEST_ID_REG, (uint8_t *)value, 1);
 800955e:	2301      	movs	r3, #1
 8009560:	683a      	ldr	r2, [r7, #0]
 8009562:	2101      	movs	r1, #1
 8009564:	6878      	ldr	r0, [r7, #4]
 8009566:	f7ff ffc7 	bl	80094f8 <ft5336_read_reg>
 800956a:	4603      	mov	r3, r0
}
 800956c:	4618      	mov	r0, r3
 800956e:	3708      	adds	r7, #8
 8009570:	46bd      	mov	sp, r7
 8009572:	bd80      	pop	{r7, pc}

08009574 <ft5336_td_status>:
  * @param  ctx Component context 
  * @param  value pointer to the value of Touch Data Status register
  * @retval Component status
  */
int32_t  ft5336_td_status(ft5336_ctx_t *ctx, uint8_t *value)
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b084      	sub	sp, #16
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
 800957c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_TD_STAT_REG, (uint8_t *)value, 1);
 800957e:	2301      	movs	r3, #1
 8009580:	683a      	ldr	r2, [r7, #0]
 8009582:	2102      	movs	r1, #2
 8009584:	6878      	ldr	r0, [r7, #4]
 8009586:	f7ff ffb7 	bl	80094f8 <ft5336_read_reg>
 800958a:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d10a      	bne.n	80095a8 <ft5336_td_status+0x34>
  {
    *value &= FT5336_TD_STATUS_BIT_MASK; 
 8009592:	683b      	ldr	r3, [r7, #0]
 8009594:	781b      	ldrb	r3, [r3, #0]
 8009596:	f003 030f 	and.w	r3, r3, #15
 800959a:	b2da      	uxtb	r2, r3
 800959c:	683b      	ldr	r3, [r7, #0]
 800959e:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_TD_STATUS_BIT_POSITION; 
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	781a      	ldrb	r2, [r3, #0]
 80095a4:	683b      	ldr	r3, [r7, #0]
 80095a6:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 80095a8:	68fb      	ldr	r3, [r7, #12]
}
 80095aa:	4618      	mov	r0, r3
 80095ac:	3710      	adds	r7, #16
 80095ae:	46bd      	mov	sp, r7
 80095b0:	bd80      	pop	{r7, pc}

080095b2 <ft5336_radian_value>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_RADIAN_VALUE_REG register
  * @retval Component status
  */
int32_t  ft5336_radian_value(ft5336_ctx_t *ctx, uint8_t value)
{
 80095b2:	b580      	push	{r7, lr}
 80095b4:	b082      	sub	sp, #8
 80095b6:	af00      	add	r7, sp, #0
 80095b8:	6078      	str	r0, [r7, #4]
 80095ba:	460b      	mov	r3, r1
 80095bc:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_RADIAN_VALUE_REG, &value, 1);
 80095be:	1cfa      	adds	r2, r7, #3
 80095c0:	2301      	movs	r3, #1
 80095c2:	2191      	movs	r1, #145	; 0x91
 80095c4:	6878      	ldr	r0, [r7, #4]
 80095c6:	f7ff ffae 	bl	8009526 <ft5336_write_reg>
 80095ca:	4603      	mov	r3, r0
}
 80095cc:	4618      	mov	r0, r3
 80095ce:	3708      	adds	r7, #8
 80095d0:	46bd      	mov	sp, r7
 80095d2:	bd80      	pop	{r7, pc}

080095d4 <ft5336_offset_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b082      	sub	sp, #8
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
 80095dc:	460b      	mov	r3, r1
 80095de:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_OFFSET_LR_REG, &value, 1);
 80095e0:	1cfa      	adds	r2, r7, #3
 80095e2:	2301      	movs	r3, #1
 80095e4:	2192      	movs	r1, #146	; 0x92
 80095e6:	6878      	ldr	r0, [r7, #4]
 80095e8:	f7ff ff9d 	bl	8009526 <ft5336_write_reg>
 80095ec:	4603      	mov	r3, r0
}
 80095ee:	4618      	mov	r0, r3
 80095f0:	3708      	adds	r7, #8
 80095f2:	46bd      	mov	sp, r7
 80095f4:	bd80      	pop	{r7, pc}

080095f6 <ft5336_offset_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 80095f6:	b580      	push	{r7, lr}
 80095f8:	b082      	sub	sp, #8
 80095fa:	af00      	add	r7, sp, #0
 80095fc:	6078      	str	r0, [r7, #4]
 80095fe:	460b      	mov	r3, r1
 8009600:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_OFFSET_UD_REG, &value, 1);
 8009602:	1cfa      	adds	r2, r7, #3
 8009604:	2301      	movs	r3, #1
 8009606:	2193      	movs	r1, #147	; 0x93
 8009608:	6878      	ldr	r0, [r7, #4]
 800960a:	f7ff ff8c 	bl	8009526 <ft5336_write_reg>
 800960e:	4603      	mov	r3, r0
}
 8009610:	4618      	mov	r0, r3
 8009612:	3708      	adds	r7, #8
 8009614:	46bd      	mov	sp, r7
 8009616:	bd80      	pop	{r7, pc}

08009618 <ft5336_disatnce_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_disatnce_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b082      	sub	sp, #8
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
 8009620:	460b      	mov	r3, r1
 8009622:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_LR_REG, &value, 1);
 8009624:	1cfa      	adds	r2, r7, #3
 8009626:	2301      	movs	r3, #1
 8009628:	2194      	movs	r1, #148	; 0x94
 800962a:	6878      	ldr	r0, [r7, #4]
 800962c:	f7ff ff7b 	bl	8009526 <ft5336_write_reg>
 8009630:	4603      	mov	r3, r0
}
 8009632:	4618      	mov	r0, r3
 8009634:	3708      	adds	r7, #8
 8009636:	46bd      	mov	sp, r7
 8009638:	bd80      	pop	{r7, pc}

0800963a <ft5336_distance_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 800963a:	b580      	push	{r7, lr}
 800963c:	b082      	sub	sp, #8
 800963e:	af00      	add	r7, sp, #0
 8009640:	6078      	str	r0, [r7, #4]
 8009642:	460b      	mov	r3, r1
 8009644:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_UD_REG, &value, 1);
 8009646:	1cfa      	adds	r2, r7, #3
 8009648:	2301      	movs	r3, #1
 800964a:	2195      	movs	r1, #149	; 0x95
 800964c:	6878      	ldr	r0, [r7, #4]
 800964e:	f7ff ff6a 	bl	8009526 <ft5336_write_reg>
 8009652:	4603      	mov	r3, r0
}
 8009654:	4618      	mov	r0, r3
 8009656:	3708      	adds	r7, #8
 8009658:	46bd      	mov	sp, r7
 800965a:	bd80      	pop	{r7, pc}

0800965c <ft5336_distance_zoom>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_ZOOM_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_zoom(ft5336_ctx_t *ctx, uint8_t value)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b082      	sub	sp, #8
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
 8009664:	460b      	mov	r3, r1
 8009666:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_ZOOM_REG, &value, 1);
 8009668:	1cfa      	adds	r2, r7, #3
 800966a:	2301      	movs	r3, #1
 800966c:	2196      	movs	r1, #150	; 0x96
 800966e:	6878      	ldr	r0, [r7, #4]
 8009670:	f7ff ff59 	bl	8009526 <ft5336_write_reg>
 8009674:	4603      	mov	r3, r0
}
 8009676:	4618      	mov	r0, r3
 8009678:	3708      	adds	r7, #8
 800967a:	46bd      	mov	sp, r7
 800967c:	bd80      	pop	{r7, pc}

0800967e <ft5336_g_mode>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_GMODE_REG register
  * @retval Component status
  */
int32_t  ft5336_g_mode(ft5336_ctx_t *ctx, uint8_t value)
{
 800967e:	b580      	push	{r7, lr}
 8009680:	b082      	sub	sp, #8
 8009682:	af00      	add	r7, sp, #0
 8009684:	6078      	str	r0, [r7, #4]
 8009686:	460b      	mov	r3, r1
 8009688:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_GMODE_REG, &value, 1);
 800968a:	1cfa      	adds	r2, r7, #3
 800968c:	2301      	movs	r3, #1
 800968e:	21a4      	movs	r1, #164	; 0xa4
 8009690:	6878      	ldr	r0, [r7, #4]
 8009692:	f7ff ff48 	bl	8009526 <ft5336_write_reg>
 8009696:	4603      	mov	r3, r0
}
 8009698:	4618      	mov	r0, r3
 800969a:	3708      	adds	r7, #8
 800969c:	46bd      	mov	sp, r7
 800969e:	bd80      	pop	{r7, pc}

080096a0 <ft5336_chip_id>:
  * @param  ctx Component context 
  * @param  value Pointer to FT5336_CHIP_ID_REG register value
  * @retval Component status
  */
int32_t  ft5336_chip_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b084      	sub	sp, #16
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
 80096a8:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_CHIP_ID_REG, (uint8_t *)value, 1);
 80096aa:	2301      	movs	r3, #1
 80096ac:	683a      	ldr	r2, [r7, #0]
 80096ae:	21a8      	movs	r1, #168	; 0xa8
 80096b0:	6878      	ldr	r0, [r7, #4]
 80096b2:	f7ff ff21 	bl	80094f8 <ft5336_read_reg>
 80096b6:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d107      	bne.n	80096ce <ft5336_chip_id+0x2e>
  {
    *value &= FT5336_CHIP_ID_BIT_MASK; 
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	781a      	ldrb	r2, [r3, #0]
 80096c2:	683b      	ldr	r3, [r7, #0]
 80096c4:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_CHIP_ID_BIT_POSITION; 
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	781a      	ldrb	r2, [r3, #0]
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 80096ce:	68fb      	ldr	r3, [r7, #12]
}
 80096d0:	4618      	mov	r0, r3
 80096d2:	3710      	adds	r7, #16
 80096d4:	46bd      	mov	sp, r7
 80096d6:	bd80      	pop	{r7, pc}

080096d8 <MX25LM51245G_GetFlashInfo>:
  * @brief  Get Flash information
  * @param  pInfo pointer to information structure
  * @retval error status
  */
int32_t MX25LM51245G_GetFlashInfo(MX25LM51245G_Info_t *pInfo)
{
 80096d8:	b480      	push	{r7}
 80096da:	b083      	sub	sp, #12
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
  /* Configure the structure with the memory configuration */
  pInfo->FlashSize              = MX25LM51245G_FLASH_SIZE;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80096e6:	601a      	str	r2, [r3, #0]
  pInfo->EraseSectorSize        = MX25LM51245G_SECTOR_64K;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80096ee:	605a      	str	r2, [r3, #4]
  pInfo->EraseSectorsNumber     = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SECTOR_64K);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80096f6:	609a      	str	r2, [r3, #8]
  pInfo->EraseSubSectorSize     = MX25LM51245G_SUBSECTOR_4K;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80096fe:	60da      	str	r2, [r3, #12]
  pInfo->EraseSubSectorNumber   = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SUBSECTOR_4K);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009706:	611a      	str	r2, [r3, #16]
  pInfo->EraseSubSector1Size    = MX25LM51245G_SUBSECTOR_4K;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800970e:	615a      	str	r2, [r3, #20]
  pInfo->EraseSubSector1Number  = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SUBSECTOR_4K);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009716:	619a      	str	r2, [r3, #24]
  pInfo->ProgPageSize           = MX25LM51245G_PAGE_SIZE;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800971e:	61da      	str	r2, [r3, #28]
  pInfo->ProgPagesNumber        = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_PAGE_SIZE);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8009726:	621a      	str	r2, [r3, #32]

  return MX25LM51245G_OK;
 8009728:	2300      	movs	r3, #0
};
 800972a:	4618      	mov	r0, r3
 800972c:	370c      	adds	r7, #12
 800972e:	46bd      	mov	sp, r7
 8009730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009734:	4770      	bx	lr

08009736 <MX25LM51245G_AutoPollingMemReady>:
  * @param  Mode Interface mode
  * @param  Rate Transfer rate
  * @retval error status
  */
int32_t MX25LM51245G_AutoPollingMemReady(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 8009736:	b580      	push	{r7, lr}
 8009738:	b09c      	sub	sp, #112	; 0x70
 800973a:	af00      	add	r7, sp, #0
 800973c:	6078      	str	r0, [r7, #4]
 800973e:	460b      	mov	r3, r1
 8009740:	70fb      	strb	r3, [r7, #3]
 8009742:	4613      	mov	r3, r2
 8009744:	70bb      	strb	r3, [r7, #2]
  OSPI_RegularCmdTypeDef  s_command = {0};
 8009746:	f107 0320 	add.w	r3, r7, #32
 800974a:	2250      	movs	r2, #80	; 0x50
 800974c:	2100      	movs	r1, #0
 800974e:	4618      	mov	r0, r3
 8009750:	f01c fe94 	bl	802647c <memset>
  OSPI_AutoPollingTypeDef s_config = {0};
 8009754:	f107 030c 	add.w	r3, r7, #12
 8009758:	2200      	movs	r2, #0
 800975a:	601a      	str	r2, [r3, #0]
 800975c:	605a      	str	r2, [r3, #4]
 800975e:	609a      	str	r2, [r3, #8]
 8009760:	60da      	str	r2, [r3, #12]
 8009762:	611a      	str	r2, [r3, #16]

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8009764:	78fb      	ldrb	r3, [r7, #3]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d105      	bne.n	8009776 <MX25LM51245G_AutoPollingMemReady+0x40>
 800976a:	78bb      	ldrb	r3, [r7, #2]
 800976c:	2b01      	cmp	r3, #1
 800976e:	d102      	bne.n	8009776 <MX25LM51245G_AutoPollingMemReady+0x40>
  {
    return MX25LM51245G_ERROR;
 8009770:	f04f 33ff 	mov.w	r3, #4294967295
 8009774:	e088      	b.n	8009888 <MX25LM51245G_AutoPollingMemReady+0x152>
  }

  /* Configure automatic polling mode to wait for memory ready */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8009776:	2300      	movs	r3, #0
 8009778:	623b      	str	r3, [r7, #32]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 800977a:	2300      	movs	r3, #0
 800977c:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800977e:	78fb      	ldrb	r3, [r7, #3]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d101      	bne.n	8009788 <MX25LM51245G_AutoPollingMemReady+0x52>
 8009784:	2301      	movs	r3, #1
 8009786:	e000      	b.n	800978a <MX25LM51245G_AutoPollingMemReady+0x54>
 8009788:	2304      	movs	r3, #4
 800978a:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800978c:	78bb      	ldrb	r3, [r7, #2]
 800978e:	2b01      	cmp	r3, #1
 8009790:	d101      	bne.n	8009796 <MX25LM51245G_AutoPollingMemReady+0x60>
 8009792:	2308      	movs	r3, #8
 8009794:	e000      	b.n	8009798 <MX25LM51245G_AutoPollingMemReady+0x62>
 8009796:	2300      	movs	r3, #0
 8009798:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800979a:	78fb      	ldrb	r3, [r7, #3]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d101      	bne.n	80097a4 <MX25LM51245G_AutoPollingMemReady+0x6e>
 80097a0:	2300      	movs	r3, #0
 80097a2:	e000      	b.n	80097a6 <MX25LM51245G_AutoPollingMemReady+0x70>
 80097a4:	2310      	movs	r3, #16
 80097a6:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 80097a8:	78fb      	ldrb	r3, [r7, #3]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d101      	bne.n	80097b2 <MX25LM51245G_AutoPollingMemReady+0x7c>
 80097ae:	2305      	movs	r3, #5
 80097b0:	e001      	b.n	80097b6 <MX25LM51245G_AutoPollingMemReady+0x80>
 80097b2:	f240 53fa 	movw	r3, #1530	; 0x5fa
 80097b6:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 80097b8:	78fb      	ldrb	r3, [r7, #3]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d101      	bne.n	80097c2 <MX25LM51245G_AutoPollingMemReady+0x8c>
 80097be:	2300      	movs	r3, #0
 80097c0:	e001      	b.n	80097c6 <MX25LM51245G_AutoPollingMemReady+0x90>
 80097c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80097c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 80097c8:	78bb      	ldrb	r3, [r7, #2]
 80097ca:	2b01      	cmp	r3, #1
 80097cc:	d102      	bne.n	80097d4 <MX25LM51245G_AutoPollingMemReady+0x9e>
 80097ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80097d2:	e000      	b.n	80097d6 <MX25LM51245G_AutoPollingMemReady+0xa0>
 80097d4:	2300      	movs	r3, #0
 80097d6:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 80097d8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80097dc:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Address            = 0U;
 80097de:	2300      	movs	r3, #0
 80097e0:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 80097e2:	2300      	movs	r3, #0
 80097e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 80097e6:	78fb      	ldrb	r3, [r7, #3]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d102      	bne.n	80097f2 <MX25LM51245G_AutoPollingMemReady+0xbc>
 80097ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80097f0:	e001      	b.n	80097f6 <MX25LM51245G_AutoPollingMemReady+0xc0>
 80097f2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80097f6:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 80097f8:	78bb      	ldrb	r3, [r7, #2]
 80097fa:	2b01      	cmp	r3, #1
 80097fc:	d102      	bne.n	8009804 <MX25LM51245G_AutoPollingMemReady+0xce>
 80097fe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009802:	e000      	b.n	8009806 <MX25LM51245G_AutoPollingMemReady+0xd0>
 8009804:	2300      	movs	r3, #0
 8009806:	663b      	str	r3, [r7, #96]	; 0x60
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 8009808:	78fb      	ldrb	r3, [r7, #3]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d101      	bne.n	8009812 <MX25LM51245G_AutoPollingMemReady+0xdc>
 800980e:	2300      	movs	r3, #0
 8009810:	e000      	b.n	8009814 <MX25LM51245G_AutoPollingMemReady+0xde>
 8009812:	2305      	movs	r3, #5
 8009814:	667b      	str	r3, [r7, #100]	; 0x64
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 8009816:	78bb      	ldrb	r3, [r7, #2]
 8009818:	2b01      	cmp	r3, #1
 800981a:	d101      	bne.n	8009820 <MX25LM51245G_AutoPollingMemReady+0xea>
 800981c:	2302      	movs	r3, #2
 800981e:	e000      	b.n	8009822 <MX25LM51245G_AutoPollingMemReady+0xec>
 8009820:	2301      	movs	r3, #1
 8009822:	65fb      	str	r3, [r7, #92]	; 0x5c
  s_command.DQSMode            = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 8009824:	78bb      	ldrb	r3, [r7, #2]
 8009826:	2b01      	cmp	r3, #1
 8009828:	d102      	bne.n	8009830 <MX25LM51245G_AutoPollingMemReady+0xfa>
 800982a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800982e:	e000      	b.n	8009832 <MX25LM51245G_AutoPollingMemReady+0xfc>
 8009830:	2300      	movs	r3, #0
 8009832:	66bb      	str	r3, [r7, #104]	; 0x68
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8009834:	2300      	movs	r3, #0
 8009836:	66fb      	str	r3, [r7, #108]	; 0x6c

  s_config.Match         = 0U;
 8009838:	2300      	movs	r3, #0
 800983a:	60fb      	str	r3, [r7, #12]
  s_config.Mask          = MX25LM51245G_SR_WIP;
 800983c:	2301      	movs	r3, #1
 800983e:	613b      	str	r3, [r7, #16]
  s_config.MatchMode     = HAL_OSPI_MATCH_MODE_AND;
 8009840:	2300      	movs	r3, #0
 8009842:	617b      	str	r3, [r7, #20]
  s_config.Interval      = MX25LM51245G_AUTOPOLLING_INTERVAL_TIME;
 8009844:	2310      	movs	r3, #16
 8009846:	61fb      	str	r3, [r7, #28]
  s_config.AutomaticStop = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 8009848:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800984c:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800984e:	f107 0320 	add.w	r3, r7, #32
 8009852:	f241 3288 	movw	r2, #5000	; 0x1388
 8009856:	4619      	mov	r1, r3
 8009858:	6878      	ldr	r0, [r7, #4]
 800985a:	f007 f901 	bl	8010a60 <HAL_OSPI_Command>
 800985e:	4603      	mov	r3, r0
 8009860:	2b00      	cmp	r3, #0
 8009862:	d002      	beq.n	800986a <MX25LM51245G_AutoPollingMemReady+0x134>
  {
    return MX25LM51245G_ERROR;
 8009864:	f04f 33ff 	mov.w	r3, #4294967295
 8009868:	e00e      	b.n	8009888 <MX25LM51245G_AutoPollingMemReady+0x152>
  }

  if (HAL_OSPI_AutoPolling(Ctx, &s_config, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800986a:	f107 030c 	add.w	r3, r7, #12
 800986e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009872:	4619      	mov	r1, r3
 8009874:	6878      	ldr	r0, [r7, #4]
 8009876:	f007 fa96 	bl	8010da6 <HAL_OSPI_AutoPolling>
 800987a:	4603      	mov	r3, r0
 800987c:	2b00      	cmp	r3, #0
 800987e:	d002      	beq.n	8009886 <MX25LM51245G_AutoPollingMemReady+0x150>
  {
    return MX25LM51245G_ERROR;
 8009880:	f04f 33ff 	mov.w	r3, #4294967295
 8009884:	e000      	b.n	8009888 <MX25LM51245G_AutoPollingMemReady+0x152>
  }

  return MX25LM51245G_OK;
 8009886:	2300      	movs	r3, #0
}
 8009888:	4618      	mov	r0, r3
 800988a:	3770      	adds	r7, #112	; 0x70
 800988c:	46bd      	mov	sp, r7
 800988e:	bd80      	pop	{r7, pc}

08009890 <MX25LM51245G_EnableMemoryMappedModeSTR>:
  * @param  Mode Interface mode
  * @param  AddressSize Address size
  * @retval OSPI memory status
  */
int32_t MX25LM51245G_EnableMemoryMappedModeSTR(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_AddressSize_t AddressSize)
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b098      	sub	sp, #96	; 0x60
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
 8009898:	460b      	mov	r3, r1
 800989a:	70fb      	strb	r3, [r7, #3]
 800989c:	4613      	mov	r3, r2
 800989e:	70bb      	strb	r3, [r7, #2]
  OSPI_RegularCmdTypeDef      s_command = {0};
 80098a0:	f107 0310 	add.w	r3, r7, #16
 80098a4:	2250      	movs	r2, #80	; 0x50
 80098a6:	2100      	movs	r1, #0
 80098a8:	4618      	mov	r0, r3
 80098aa:	f01c fde7 	bl	802647c <memset>
  OSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 80098ae:	f107 0308 	add.w	r3, r7, #8
 80098b2:	2200      	movs	r2, #0
 80098b4:	601a      	str	r2, [r3, #0]
 80098b6:	605a      	str	r2, [r3, #4]

  /* OPI mode and 3-bytes address size not supported by memory */
  if ((Mode == MX25LM51245G_OPI_MODE) && (AddressSize == MX25LM51245G_3BYTES_SIZE))
 80098b8:	78fb      	ldrb	r3, [r7, #3]
 80098ba:	2b01      	cmp	r3, #1
 80098bc:	d105      	bne.n	80098ca <MX25LM51245G_EnableMemoryMappedModeSTR+0x3a>
 80098be:	78bb      	ldrb	r3, [r7, #2]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d102      	bne.n	80098ca <MX25LM51245G_EnableMemoryMappedModeSTR+0x3a>
  {
    return MX25LM51245G_ERROR;
 80098c4:	f04f 33ff 	mov.w	r3, #4294967295
 80098c8:	e088      	b.n	80099dc <MX25LM51245G_EnableMemoryMappedModeSTR+0x14c>
  }

  /* Initialize the read command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_READ_CFG;
 80098ca:	2301      	movs	r3, #1
 80098cc:	613b      	str	r3, [r7, #16]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 80098ce:	2300      	movs	r3, #0
 80098d0:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80098d2:	78fb      	ldrb	r3, [r7, #3]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d101      	bne.n	80098dc <MX25LM51245G_EnableMemoryMappedModeSTR+0x4c>
 80098d8:	2301      	movs	r3, #1
 80098da:	e000      	b.n	80098de <MX25LM51245G_EnableMemoryMappedModeSTR+0x4e>
 80098dc:	2304      	movs	r3, #4
 80098de:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80098e0:	2300      	movs	r3, #0
 80098e2:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80098e4:	78fb      	ldrb	r3, [r7, #3]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d101      	bne.n	80098ee <MX25LM51245G_EnableMemoryMappedModeSTR+0x5e>
 80098ea:	2300      	movs	r3, #0
 80098ec:	e000      	b.n	80098f0 <MX25LM51245G_EnableMemoryMappedModeSTR+0x60>
 80098ee:	2310      	movs	r3, #16
 80098f0:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_FAST_READ_CMD : MX25LM51245G_4_BYTE_ADDR_FAST_READ_CMD) : MX25LM51245G_OCTA_READ_CMD;
 80098f2:	78fb      	ldrb	r3, [r7, #3]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d106      	bne.n	8009906 <MX25LM51245G_EnableMemoryMappedModeSTR+0x76>
 80098f8:	78bb      	ldrb	r3, [r7, #2]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d101      	bne.n	8009902 <MX25LM51245G_EnableMemoryMappedModeSTR+0x72>
 80098fe:	230b      	movs	r3, #11
 8009900:	e003      	b.n	800990a <MX25LM51245G_EnableMemoryMappedModeSTR+0x7a>
 8009902:	230c      	movs	r3, #12
 8009904:	e001      	b.n	800990a <MX25LM51245G_EnableMemoryMappedModeSTR+0x7a>
 8009906:	f64e 4313 	movw	r3, #60435	; 0xec13
 800990a:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 800990c:	78fb      	ldrb	r3, [r7, #3]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d102      	bne.n	8009918 <MX25LM51245G_EnableMemoryMappedModeSTR+0x88>
 8009912:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009916:	e001      	b.n	800991c <MX25LM51245G_EnableMemoryMappedModeSTR+0x8c>
 8009918:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800991c:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
 800991e:	2300      	movs	r3, #0
 8009920:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.AddressSize        = (AddressSize == MX25LM51245G_3BYTES_SIZE) ? HAL_OSPI_ADDRESS_24_BITS : HAL_OSPI_ADDRESS_32_BITS;
 8009922:	78bb      	ldrb	r3, [r7, #2]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d102      	bne.n	800992e <MX25LM51245G_EnableMemoryMappedModeSTR+0x9e>
 8009928:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800992c:	e001      	b.n	8009932 <MX25LM51245G_EnableMemoryMappedModeSTR+0xa2>
 800992e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8009932:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8009934:	2300      	movs	r3, #0
 8009936:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8009938:	78fb      	ldrb	r3, [r7, #3]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d102      	bne.n	8009944 <MX25LM51245G_EnableMemoryMappedModeSTR+0xb4>
 800993e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009942:	e001      	b.n	8009948 <MX25LM51245G_EnableMemoryMappedModeSTR+0xb8>
 8009944:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009948:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 800994a:	2300      	movs	r3, #0
 800994c:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? DUMMY_CYCLES_READ : DUMMY_CYCLES_READ_OCTAL;
 800994e:	78fb      	ldrb	r3, [r7, #3]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d101      	bne.n	8009958 <MX25LM51245G_EnableMemoryMappedModeSTR+0xc8>
 8009954:	2308      	movs	r3, #8
 8009956:	e000      	b.n	800995a <MX25LM51245G_EnableMemoryMappedModeSTR+0xca>
 8009958:	2306      	movs	r3, #6
 800995a:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 800995c:	2300      	movs	r3, #0
 800995e:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8009960:	2300      	movs	r3, #0
 8009962:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Send the read command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009964:	f107 0310 	add.w	r3, r7, #16
 8009968:	f241 3288 	movw	r2, #5000	; 0x1388
 800996c:	4619      	mov	r1, r3
 800996e:	6878      	ldr	r0, [r7, #4]
 8009970:	f007 f876 	bl	8010a60 <HAL_OSPI_Command>
 8009974:	4603      	mov	r3, r0
 8009976:	2b00      	cmp	r3, #0
 8009978:	d002      	beq.n	8009980 <MX25LM51245G_EnableMemoryMappedModeSTR+0xf0>
  {
    return MX25LM51245G_ERROR;
 800997a:	f04f 33ff 	mov.w	r3, #4294967295
 800997e:	e02d      	b.n	80099dc <MX25LM51245G_EnableMemoryMappedModeSTR+0x14c>
  }

  /* Initialize the program command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_WRITE_CFG;
 8009980:	2302      	movs	r3, #2
 8009982:	613b      	str	r3, [r7, #16]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_PAGE_PROG_CMD : MX25LM51245G_4_BYTE_PAGE_PROG_CMD) : MX25LM51245G_OCTA_PAGE_PROG_CMD;
 8009984:	78fb      	ldrb	r3, [r7, #3]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d106      	bne.n	8009998 <MX25LM51245G_EnableMemoryMappedModeSTR+0x108>
 800998a:	78bb      	ldrb	r3, [r7, #2]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d101      	bne.n	8009994 <MX25LM51245G_EnableMemoryMappedModeSTR+0x104>
 8009990:	2302      	movs	r3, #2
 8009992:	e003      	b.n	800999c <MX25LM51245G_EnableMemoryMappedModeSTR+0x10c>
 8009994:	2312      	movs	r3, #18
 8009996:	e001      	b.n	800999c <MX25LM51245G_EnableMemoryMappedModeSTR+0x10c>
 8009998:	f241 23ed 	movw	r3, #4845	; 0x12ed
 800999c:	61bb      	str	r3, [r7, #24]
  s_command.DummyCycles        = 0U;
 800999e:	2300      	movs	r3, #0
 80099a0:	657b      	str	r3, [r7, #84]	; 0x54

  /* Send the write command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80099a2:	f107 0310 	add.w	r3, r7, #16
 80099a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80099aa:	4619      	mov	r1, r3
 80099ac:	6878      	ldr	r0, [r7, #4]
 80099ae:	f007 f857 	bl	8010a60 <HAL_OSPI_Command>
 80099b2:	4603      	mov	r3, r0
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d002      	beq.n	80099be <MX25LM51245G_EnableMemoryMappedModeSTR+0x12e>
  {
    return MX25LM51245G_ERROR;
 80099b8:	f04f 33ff 	mov.w	r3, #4294967295
 80099bc:	e00e      	b.n	80099dc <MX25LM51245G_EnableMemoryMappedModeSTR+0x14c>
  }

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
 80099be:	2300      	movs	r3, #0
 80099c0:	60bb      	str	r3, [r7, #8]

  if (HAL_OSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
 80099c2:	f107 0308 	add.w	r3, r7, #8
 80099c6:	4619      	mov	r1, r3
 80099c8:	6878      	ldr	r0, [r7, #4]
 80099ca:	f007 fa73 	bl	8010eb4 <HAL_OSPI_MemoryMapped>
 80099ce:	4603      	mov	r3, r0
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d002      	beq.n	80099da <MX25LM51245G_EnableMemoryMappedModeSTR+0x14a>
  {
    return MX25LM51245G_ERROR;
 80099d4:	f04f 33ff 	mov.w	r3, #4294967295
 80099d8:	e000      	b.n	80099dc <MX25LM51245G_EnableMemoryMappedModeSTR+0x14c>
  }

  return MX25LM51245G_OK;
 80099da:	2300      	movs	r3, #0
}
 80099dc:	4618      	mov	r0, r3
 80099de:	3760      	adds	r7, #96	; 0x60
 80099e0:	46bd      	mov	sp, r7
 80099e2:	bd80      	pop	{r7, pc}

080099e4 <MX25LM51245G_EnableMemoryMappedModeDTR>:
  * @param  AddressSize Address size
  * @note   Only OPI mode support DTR transfer rate
  * @retval OSPI memory status
  */
int32_t MX25LM51245G_EnableMemoryMappedModeDTR(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode)
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b098      	sub	sp, #96	; 0x60
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
 80099ec:	460b      	mov	r3, r1
 80099ee:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Mode);

  OSPI_RegularCmdTypeDef      s_command = {0};
 80099f0:	f107 0310 	add.w	r3, r7, #16
 80099f4:	2250      	movs	r2, #80	; 0x50
 80099f6:	2100      	movs	r1, #0
 80099f8:	4618      	mov	r0, r3
 80099fa:	f01c fd3f 	bl	802647c <memset>
  OSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 80099fe:	f107 0308 	add.w	r3, r7, #8
 8009a02:	2200      	movs	r2, #0
 8009a04:	601a      	str	r2, [r3, #0]
 8009a06:	605a      	str	r2, [r3, #4]

  /* Initialize the read command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_READ_CFG;
 8009a08:	2301      	movs	r3, #1
 8009a0a:	613b      	str	r3, [r7, #16]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = HAL_OSPI_INSTRUCTION_8_LINES;
 8009a10:	2304      	movs	r3, #4
 8009a12:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_ENABLE;
 8009a14:	2308      	movs	r3, #8
 8009a16:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionSize    = HAL_OSPI_INSTRUCTION_16_BITS;
 8009a18:	2310      	movs	r3, #16
 8009a1a:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = MX25LM51245G_OCTA_READ_DTR_CMD;
 8009a1c:	f64e 6311 	movw	r3, #60945	; 0xee11
 8009a20:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = HAL_OSPI_ADDRESS_8_LINES;
 8009a22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a26:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_ENABLE;
 8009a28:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009a2c:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 8009a2e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8009a32:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8009a34:	2300      	movs	r3, #0
 8009a36:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DataMode           = HAL_OSPI_DATA_8_LINES;
 8009a38:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009a3c:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataDtrMode        = HAL_OSPI_DATA_DTR_ENABLE;
 8009a3e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009a42:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DummyCycles        = DUMMY_CYCLES_READ_OCTAL_DTR;
 8009a44:	2306      	movs	r3, #6
 8009a46:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DQSMode            = HAL_OSPI_DQS_ENABLE;
 8009a48:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8009a4c:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8009a4e:	2300      	movs	r3, #0
 8009a50:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009a52:	f107 0310 	add.w	r3, r7, #16
 8009a56:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a5a:	4619      	mov	r1, r3
 8009a5c:	6878      	ldr	r0, [r7, #4]
 8009a5e:	f006 ffff 	bl	8010a60 <HAL_OSPI_Command>
 8009a62:	4603      	mov	r3, r0
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d002      	beq.n	8009a6e <MX25LM51245G_EnableMemoryMappedModeDTR+0x8a>
  {
    return MX25LM51245G_ERROR;
 8009a68:	f04f 33ff 	mov.w	r3, #4294967295
 8009a6c:	e025      	b.n	8009aba <MX25LM51245G_EnableMemoryMappedModeDTR+0xd6>
  }

  /* Initialize the program command */
  s_command.OperationType = HAL_OSPI_OPTYPE_WRITE_CFG;
 8009a6e:	2302      	movs	r3, #2
 8009a70:	613b      	str	r3, [r7, #16]
  s_command.Instruction   = MX25LM51245G_OCTA_PAGE_PROG_CMD;
 8009a72:	f241 23ed 	movw	r3, #4845	; 0x12ed
 8009a76:	61bb      	str	r3, [r7, #24]
  s_command.DummyCycles   = 0U;
 8009a78:	2300      	movs	r3, #0
 8009a7a:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DQSMode       = HAL_OSPI_DQS_DISABLE;
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	65bb      	str	r3, [r7, #88]	; 0x58

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009a80:	f107 0310 	add.w	r3, r7, #16
 8009a84:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a88:	4619      	mov	r1, r3
 8009a8a:	6878      	ldr	r0, [r7, #4]
 8009a8c:	f006 ffe8 	bl	8010a60 <HAL_OSPI_Command>
 8009a90:	4603      	mov	r3, r0
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d002      	beq.n	8009a9c <MX25LM51245G_EnableMemoryMappedModeDTR+0xb8>
  {
    return MX25LM51245G_ERROR;
 8009a96:	f04f 33ff 	mov.w	r3, #4294967295
 8009a9a:	e00e      	b.n	8009aba <MX25LM51245G_EnableMemoryMappedModeDTR+0xd6>
  }
  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	60bb      	str	r3, [r7, #8]

  if (HAL_OSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
 8009aa0:	f107 0308 	add.w	r3, r7, #8
 8009aa4:	4619      	mov	r1, r3
 8009aa6:	6878      	ldr	r0, [r7, #4]
 8009aa8:	f007 fa04 	bl	8010eb4 <HAL_OSPI_MemoryMapped>
 8009aac:	4603      	mov	r3, r0
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d002      	beq.n	8009ab8 <MX25LM51245G_EnableMemoryMappedModeDTR+0xd4>
  {
    return MX25LM51245G_ERROR;
 8009ab2:	f04f 33ff 	mov.w	r3, #4294967295
 8009ab6:	e000      	b.n	8009aba <MX25LM51245G_EnableMemoryMappedModeDTR+0xd6>
  }

  return MX25LM51245G_OK;
 8009ab8:	2300      	movs	r3, #0
}
 8009aba:	4618      	mov	r0, r3
 8009abc:	3760      	adds	r7, #96	; 0x60
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	bd80      	pop	{r7, pc}

08009ac2 <MX25LM51245G_WriteEnable>:
  * @param  Mode Interface mode
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_WriteEnable(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 8009ac2:	b580      	push	{r7, lr}
 8009ac4:	b09c      	sub	sp, #112	; 0x70
 8009ac6:	af00      	add	r7, sp, #0
 8009ac8:	6078      	str	r0, [r7, #4]
 8009aca:	460b      	mov	r3, r1
 8009acc:	70fb      	strb	r3, [r7, #3]
 8009ace:	4613      	mov	r3, r2
 8009ad0:	70bb      	strb	r3, [r7, #2]
  OSPI_RegularCmdTypeDef     s_command = {0};
 8009ad2:	f107 0320 	add.w	r3, r7, #32
 8009ad6:	2250      	movs	r2, #80	; 0x50
 8009ad8:	2100      	movs	r1, #0
 8009ada:	4618      	mov	r0, r3
 8009adc:	f01c fcce 	bl	802647c <memset>
  OSPI_AutoPollingTypeDef s_config = {0};
 8009ae0:	f107 030c 	add.w	r3, r7, #12
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	601a      	str	r2, [r3, #0]
 8009ae8:	605a      	str	r2, [r3, #4]
 8009aea:	609a      	str	r2, [r3, #8]
 8009aec:	60da      	str	r2, [r3, #12]
 8009aee:	611a      	str	r2, [r3, #16]

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8009af0:	78fb      	ldrb	r3, [r7, #3]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d105      	bne.n	8009b02 <MX25LM51245G_WriteEnable+0x40>
 8009af6:	78bb      	ldrb	r3, [r7, #2]
 8009af8:	2b01      	cmp	r3, #1
 8009afa:	d102      	bne.n	8009b02 <MX25LM51245G_WriteEnable+0x40>
  {
    return MX25LM51245G_ERROR;
 8009afc:	f04f 33ff 	mov.w	r3, #4294967295
 8009b00:	e0a6      	b.n	8009c50 <MX25LM51245G_WriteEnable+0x18e>
  }

  /* Initialize the write enable command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8009b02:	2300      	movs	r3, #0
 8009b04:	623b      	str	r3, [r7, #32]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 8009b06:	2300      	movs	r3, #0
 8009b08:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8009b0a:	78fb      	ldrb	r3, [r7, #3]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d101      	bne.n	8009b14 <MX25LM51245G_WriteEnable+0x52>
 8009b10:	2301      	movs	r3, #1
 8009b12:	e000      	b.n	8009b16 <MX25LM51245G_WriteEnable+0x54>
 8009b14:	2304      	movs	r3, #4
 8009b16:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8009b18:	78bb      	ldrb	r3, [r7, #2]
 8009b1a:	2b01      	cmp	r3, #1
 8009b1c:	d101      	bne.n	8009b22 <MX25LM51245G_WriteEnable+0x60>
 8009b1e:	2308      	movs	r3, #8
 8009b20:	e000      	b.n	8009b24 <MX25LM51245G_WriteEnable+0x62>
 8009b22:	2300      	movs	r3, #0
 8009b24:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8009b26:	78fb      	ldrb	r3, [r7, #3]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d101      	bne.n	8009b30 <MX25LM51245G_WriteEnable+0x6e>
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	e000      	b.n	8009b32 <MX25LM51245G_WriteEnable+0x70>
 8009b30:	2310      	movs	r3, #16
 8009b32:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_WRITE_ENABLE_CMD : MX25LM51245G_OCTA_WRITE_ENABLE_CMD;
 8009b34:	78fb      	ldrb	r3, [r7, #3]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d101      	bne.n	8009b3e <MX25LM51245G_WriteEnable+0x7c>
 8009b3a:	2306      	movs	r3, #6
 8009b3c:	e001      	b.n	8009b42 <MX25LM51245G_WriteEnable+0x80>
 8009b3e:	f240 63f9 	movw	r3, #1785	; 0x6f9
 8009b42:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 8009b44:	2300      	movs	r3, #0
 8009b46:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8009b48:	2300      	movs	r3, #0
 8009b4a:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DataMode           = HAL_OSPI_DATA_NONE;
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.DummyCycles        = 0U;
 8009b50:	2300      	movs	r3, #0
 8009b52:	667b      	str	r3, [r7, #100]	; 0x64
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8009b54:	2300      	movs	r3, #0
 8009b56:	66bb      	str	r3, [r7, #104]	; 0x68
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8009b58:	2300      	movs	r3, #0
 8009b5a:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009b5c:	f107 0320 	add.w	r3, r7, #32
 8009b60:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b64:	4619      	mov	r1, r3
 8009b66:	6878      	ldr	r0, [r7, #4]
 8009b68:	f006 ff7a 	bl	8010a60 <HAL_OSPI_Command>
 8009b6c:	4603      	mov	r3, r0
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d002      	beq.n	8009b78 <MX25LM51245G_WriteEnable+0xb6>
  {
    return MX25LM51245G_ERROR;
 8009b72:	f04f 33ff 	mov.w	r3, #4294967295
 8009b76:	e06b      	b.n	8009c50 <MX25LM51245G_WriteEnable+0x18e>
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_command.Instruction    = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 8009b78:	78fb      	ldrb	r3, [r7, #3]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d101      	bne.n	8009b82 <MX25LM51245G_WriteEnable+0xc0>
 8009b7e:	2305      	movs	r3, #5
 8009b80:	e001      	b.n	8009b86 <MX25LM51245G_WriteEnable+0xc4>
 8009b82:	f240 53fa 	movw	r3, #1530	; 0x5fa
 8009b86:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 8009b88:	78fb      	ldrb	r3, [r7, #3]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d101      	bne.n	8009b92 <MX25LM51245G_WriteEnable+0xd0>
 8009b8e:	2300      	movs	r3, #0
 8009b90:	e001      	b.n	8009b96 <MX25LM51245G_WriteEnable+0xd4>
 8009b92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b96:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AddressDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8009b98:	78bb      	ldrb	r3, [r7, #2]
 8009b9a:	2b01      	cmp	r3, #1
 8009b9c:	d102      	bne.n	8009ba4 <MX25LM51245G_WriteEnable+0xe2>
 8009b9e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009ba2:	e000      	b.n	8009ba6 <MX25LM51245G_WriteEnable+0xe4>
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.AddressSize    = HAL_OSPI_ADDRESS_32_BITS;
 8009ba8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8009bac:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Address        = 0U;
 8009bae:	2300      	movs	r3, #0
 8009bb0:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DataMode       = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8009bb2:	78fb      	ldrb	r3, [r7, #3]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d102      	bne.n	8009bbe <MX25LM51245G_WriteEnable+0xfc>
 8009bb8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009bbc:	e001      	b.n	8009bc2 <MX25LM51245G_WriteEnable+0x100>
 8009bbe:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009bc2:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.DataDtrMode    = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8009bc4:	78bb      	ldrb	r3, [r7, #2]
 8009bc6:	2b01      	cmp	r3, #1
 8009bc8:	d102      	bne.n	8009bd0 <MX25LM51245G_WriteEnable+0x10e>
 8009bca:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009bce:	e000      	b.n	8009bd2 <MX25LM51245G_WriteEnable+0x110>
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	663b      	str	r3, [r7, #96]	; 0x60
  s_command.DummyCycles    = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 8009bd4:	78fb      	ldrb	r3, [r7, #3]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d101      	bne.n	8009bde <MX25LM51245G_WriteEnable+0x11c>
 8009bda:	2300      	movs	r3, #0
 8009bdc:	e000      	b.n	8009be0 <MX25LM51245G_WriteEnable+0x11e>
 8009bde:	2305      	movs	r3, #5
 8009be0:	667b      	str	r3, [r7, #100]	; 0x64
  s_command.NbData         = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 8009be2:	78bb      	ldrb	r3, [r7, #2]
 8009be4:	2b01      	cmp	r3, #1
 8009be6:	d101      	bne.n	8009bec <MX25LM51245G_WriteEnable+0x12a>
 8009be8:	2302      	movs	r3, #2
 8009bea:	e000      	b.n	8009bee <MX25LM51245G_WriteEnable+0x12c>
 8009bec:	2301      	movs	r3, #1
 8009bee:	65fb      	str	r3, [r7, #92]	; 0x5c
  s_command.DQSMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 8009bf0:	78bb      	ldrb	r3, [r7, #2]
 8009bf2:	2b01      	cmp	r3, #1
 8009bf4:	d102      	bne.n	8009bfc <MX25LM51245G_WriteEnable+0x13a>
 8009bf6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8009bfa:	e000      	b.n	8009bfe <MX25LM51245G_WriteEnable+0x13c>
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009c00:	f107 0320 	add.w	r3, r7, #32
 8009c04:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c08:	4619      	mov	r1, r3
 8009c0a:	6878      	ldr	r0, [r7, #4]
 8009c0c:	f006 ff28 	bl	8010a60 <HAL_OSPI_Command>
 8009c10:	4603      	mov	r3, r0
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d002      	beq.n	8009c1c <MX25LM51245G_WriteEnable+0x15a>
  {
    return MX25LM51245G_ERROR;
 8009c16:	f04f 33ff 	mov.w	r3, #4294967295
 8009c1a:	e019      	b.n	8009c50 <MX25LM51245G_WriteEnable+0x18e>
  }

  s_config.Match           = 2U;
 8009c1c:	2302      	movs	r3, #2
 8009c1e:	60fb      	str	r3, [r7, #12]
  s_config.Mask            = 2U;
 8009c20:	2302      	movs	r3, #2
 8009c22:	613b      	str	r3, [r7, #16]
  s_config.MatchMode       = HAL_OSPI_MATCH_MODE_AND;
 8009c24:	2300      	movs	r3, #0
 8009c26:	617b      	str	r3, [r7, #20]
  s_config.Interval        = MX25LM51245G_AUTOPOLLING_INTERVAL_TIME;
 8009c28:	2310      	movs	r3, #16
 8009c2a:	61fb      	str	r3, [r7, #28]
  s_config.AutomaticStop   = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 8009c2c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009c30:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_AutoPolling(Ctx, &s_config, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009c32:	f107 030c 	add.w	r3, r7, #12
 8009c36:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c3a:	4619      	mov	r1, r3
 8009c3c:	6878      	ldr	r0, [r7, #4]
 8009c3e:	f007 f8b2 	bl	8010da6 <HAL_OSPI_AutoPolling>
 8009c42:	4603      	mov	r3, r0
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d002      	beq.n	8009c4e <MX25LM51245G_WriteEnable+0x18c>
  {
    return MX25LM51245G_ERROR;
 8009c48:	f04f 33ff 	mov.w	r3, #4294967295
 8009c4c:	e000      	b.n	8009c50 <MX25LM51245G_WriteEnable+0x18e>
  }

  return MX25LM51245G_OK;
 8009c4e:	2300      	movs	r3, #0
}
 8009c50:	4618      	mov	r0, r3
 8009c52:	3770      	adds	r7, #112	; 0x70
 8009c54:	46bd      	mov	sp, r7
 8009c56:	bd80      	pop	{r7, pc}

08009c58 <MX25LM51245G_WriteCfg2Register>:
  * @param  Rate Transfer rate STR or DTR
  * @param  Value Value to write to configuration register
  * @retval error status
  */
int32_t MX25LM51245G_WriteCfg2Register(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate, uint32_t WriteAddr, uint8_t Value)
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b098      	sub	sp, #96	; 0x60
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	60f8      	str	r0, [r7, #12]
 8009c60:	607b      	str	r3, [r7, #4]
 8009c62:	460b      	mov	r3, r1
 8009c64:	72fb      	strb	r3, [r7, #11]
 8009c66:	4613      	mov	r3, r2
 8009c68:	72bb      	strb	r3, [r7, #10]
  OSPI_RegularCmdTypeDef s_command = {0};
 8009c6a:	f107 0310 	add.w	r3, r7, #16
 8009c6e:	2250      	movs	r2, #80	; 0x50
 8009c70:	2100      	movs	r1, #0
 8009c72:	4618      	mov	r0, r3
 8009c74:	f01c fc02 	bl	802647c <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8009c78:	7afb      	ldrb	r3, [r7, #11]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d105      	bne.n	8009c8a <MX25LM51245G_WriteCfg2Register+0x32>
 8009c7e:	7abb      	ldrb	r3, [r7, #10]
 8009c80:	2b01      	cmp	r3, #1
 8009c82:	d102      	bne.n	8009c8a <MX25LM51245G_WriteCfg2Register+0x32>
  {
    return MX25LM51245G_ERROR;
 8009c84:	f04f 33ff 	mov.w	r3, #4294967295
 8009c88:	e077      	b.n	8009d7a <MX25LM51245G_WriteCfg2Register+0x122>
  }

  /* Initialize the writing of configuration register 2 */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	613b      	str	r3, [r7, #16]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 8009c8e:	2300      	movs	r3, #0
 8009c90:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8009c92:	7afb      	ldrb	r3, [r7, #11]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d101      	bne.n	8009c9c <MX25LM51245G_WriteCfg2Register+0x44>
 8009c98:	2301      	movs	r3, #1
 8009c9a:	e000      	b.n	8009c9e <MX25LM51245G_WriteCfg2Register+0x46>
 8009c9c:	2304      	movs	r3, #4
 8009c9e:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8009ca0:	7abb      	ldrb	r3, [r7, #10]
 8009ca2:	2b01      	cmp	r3, #1
 8009ca4:	d101      	bne.n	8009caa <MX25LM51245G_WriteCfg2Register+0x52>
 8009ca6:	2308      	movs	r3, #8
 8009ca8:	e000      	b.n	8009cac <MX25LM51245G_WriteCfg2Register+0x54>
 8009caa:	2300      	movs	r3, #0
 8009cac:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8009cae:	7afb      	ldrb	r3, [r7, #11]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d101      	bne.n	8009cb8 <MX25LM51245G_WriteCfg2Register+0x60>
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	e000      	b.n	8009cba <MX25LM51245G_WriteCfg2Register+0x62>
 8009cb8:	2310      	movs	r3, #16
 8009cba:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_WRITE_CFG_REG2_CMD : MX25LM51245G_OCTA_WRITE_CFG_REG2_CMD;
 8009cbc:	7afb      	ldrb	r3, [r7, #11]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d101      	bne.n	8009cc6 <MX25LM51245G_WriteCfg2Register+0x6e>
 8009cc2:	2372      	movs	r3, #114	; 0x72
 8009cc4:	e001      	b.n	8009cca <MX25LM51245G_WriteCfg2Register+0x72>
 8009cc6:	f247 238d 	movw	r3, #29325	; 0x728d
 8009cca:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 8009ccc:	7afb      	ldrb	r3, [r7, #11]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d102      	bne.n	8009cd8 <MX25LM51245G_WriteCfg2Register+0x80>
 8009cd2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009cd6:	e001      	b.n	8009cdc <MX25LM51245G_WriteCfg2Register+0x84>
 8009cd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8009cde:	7abb      	ldrb	r3, [r7, #10]
 8009ce0:	2b01      	cmp	r3, #1
 8009ce2:	d102      	bne.n	8009cea <MX25LM51245G_WriteCfg2Register+0x92>
 8009ce4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009ce8:	e000      	b.n	8009cec <MX25LM51245G_WriteCfg2Register+0x94>
 8009cea:	2300      	movs	r3, #0
 8009cec:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 8009cee:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8009cf2:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.Address            = WriteAddr;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8009cfc:	7afb      	ldrb	r3, [r7, #11]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d102      	bne.n	8009d08 <MX25LM51245G_WriteCfg2Register+0xb0>
 8009d02:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009d06:	e001      	b.n	8009d0c <MX25LM51245G_WriteCfg2Register+0xb4>
 8009d08:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009d0c:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8009d0e:	7abb      	ldrb	r3, [r7, #10]
 8009d10:	2b01      	cmp	r3, #1
 8009d12:	d102      	bne.n	8009d1a <MX25LM51245G_WriteCfg2Register+0xc2>
 8009d14:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009d18:	e000      	b.n	8009d1c <MX25LM51245G_WriteCfg2Register+0xc4>
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DummyCycles        = 0U;
 8009d1e:	2300      	movs	r3, #0
 8009d20:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.NbData             = (Mode == MX25LM51245G_SPI_MODE) ? 1U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U);
 8009d22:	7afb      	ldrb	r3, [r7, #11]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d006      	beq.n	8009d36 <MX25LM51245G_WriteCfg2Register+0xde>
 8009d28:	7abb      	ldrb	r3, [r7, #10]
 8009d2a:	2b01      	cmp	r3, #1
 8009d2c:	d101      	bne.n	8009d32 <MX25LM51245G_WriteCfg2Register+0xda>
 8009d2e:	2302      	movs	r3, #2
 8009d30:	e002      	b.n	8009d38 <MX25LM51245G_WriteCfg2Register+0xe0>
 8009d32:	2301      	movs	r3, #1
 8009d34:	e000      	b.n	8009d38 <MX25LM51245G_WriteCfg2Register+0xe0>
 8009d36:	2301      	movs	r3, #1
 8009d38:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8009d3e:	2300      	movs	r3, #0
 8009d40:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009d42:	f107 0310 	add.w	r3, r7, #16
 8009d46:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d4a:	4619      	mov	r1, r3
 8009d4c:	68f8      	ldr	r0, [r7, #12]
 8009d4e:	f006 fe87 	bl	8010a60 <HAL_OSPI_Command>
 8009d52:	4603      	mov	r3, r0
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d002      	beq.n	8009d5e <MX25LM51245G_WriteCfg2Register+0x106>
  {
    return MX25LM51245G_ERROR;
 8009d58:	f04f 33ff 	mov.w	r3, #4294967295
 8009d5c:	e00d      	b.n	8009d7a <MX25LM51245G_WriteCfg2Register+0x122>
  }

  if (HAL_OSPI_Transmit(Ctx, &Value, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009d5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d62:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8009d66:	68f8      	ldr	r0, [r7, #12]
 8009d68:	f006 ff07 	bl	8010b7a <HAL_OSPI_Transmit>
 8009d6c:	4603      	mov	r3, r0
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d002      	beq.n	8009d78 <MX25LM51245G_WriteCfg2Register+0x120>
  {
    return MX25LM51245G_ERROR;
 8009d72:	f04f 33ff 	mov.w	r3, #4294967295
 8009d76:	e000      	b.n	8009d7a <MX25LM51245G_WriteCfg2Register+0x122>
  }

  return MX25LM51245G_OK;
 8009d78:	2300      	movs	r3, #0
}
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	3760      	adds	r7, #96	; 0x60
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	bd80      	pop	{r7, pc}

08009d82 <MX25LM51245G_ReadCfg2Register>:
  * @param  Rate Transfer rate STR or DTR
  * @param  Value configuration register 2 value pointer
  * @retval error status
  */
int32_t MX25LM51245G_ReadCfg2Register(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate, uint32_t ReadAddr, uint8_t *Value)
{
 8009d82:	b580      	push	{r7, lr}
 8009d84:	b098      	sub	sp, #96	; 0x60
 8009d86:	af00      	add	r7, sp, #0
 8009d88:	60f8      	str	r0, [r7, #12]
 8009d8a:	607b      	str	r3, [r7, #4]
 8009d8c:	460b      	mov	r3, r1
 8009d8e:	72fb      	strb	r3, [r7, #11]
 8009d90:	4613      	mov	r3, r2
 8009d92:	72bb      	strb	r3, [r7, #10]
  OSPI_RegularCmdTypeDef s_command = {0};
 8009d94:	f107 0310 	add.w	r3, r7, #16
 8009d98:	2250      	movs	r2, #80	; 0x50
 8009d9a:	2100      	movs	r1, #0
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	f01c fb6d 	bl	802647c <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8009da2:	7afb      	ldrb	r3, [r7, #11]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d105      	bne.n	8009db4 <MX25LM51245G_ReadCfg2Register+0x32>
 8009da8:	7abb      	ldrb	r3, [r7, #10]
 8009daa:	2b01      	cmp	r3, #1
 8009dac:	d102      	bne.n	8009db4 <MX25LM51245G_ReadCfg2Register+0x32>
  {
    return MX25LM51245G_ERROR;
 8009dae:	f04f 33ff 	mov.w	r3, #4294967295
 8009db2:	e07c      	b.n	8009eae <MX25LM51245G_ReadCfg2Register+0x12c>
  }

  /* Initialize the reading of status register */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8009db4:	2300      	movs	r3, #0
 8009db6:	613b      	str	r3, [r7, #16]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 8009db8:	2300      	movs	r3, #0
 8009dba:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8009dbc:	7afb      	ldrb	r3, [r7, #11]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d101      	bne.n	8009dc6 <MX25LM51245G_ReadCfg2Register+0x44>
 8009dc2:	2301      	movs	r3, #1
 8009dc4:	e000      	b.n	8009dc8 <MX25LM51245G_ReadCfg2Register+0x46>
 8009dc6:	2304      	movs	r3, #4
 8009dc8:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8009dca:	7abb      	ldrb	r3, [r7, #10]
 8009dcc:	2b01      	cmp	r3, #1
 8009dce:	d101      	bne.n	8009dd4 <MX25LM51245G_ReadCfg2Register+0x52>
 8009dd0:	2308      	movs	r3, #8
 8009dd2:	e000      	b.n	8009dd6 <MX25LM51245G_ReadCfg2Register+0x54>
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8009dd8:	7afb      	ldrb	r3, [r7, #11]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d101      	bne.n	8009de2 <MX25LM51245G_ReadCfg2Register+0x60>
 8009dde:	2300      	movs	r3, #0
 8009de0:	e000      	b.n	8009de4 <MX25LM51245G_ReadCfg2Register+0x62>
 8009de2:	2310      	movs	r3, #16
 8009de4:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_CFG_REG2_CMD : MX25LM51245G_OCTA_READ_CFG_REG2_CMD;
 8009de6:	7afb      	ldrb	r3, [r7, #11]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d101      	bne.n	8009df0 <MX25LM51245G_ReadCfg2Register+0x6e>
 8009dec:	2371      	movs	r3, #113	; 0x71
 8009dee:	e001      	b.n	8009df4 <MX25LM51245G_ReadCfg2Register+0x72>
 8009df0:	f247 138e 	movw	r3, #29070	; 0x718e
 8009df4:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 8009df6:	7afb      	ldrb	r3, [r7, #11]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d102      	bne.n	8009e02 <MX25LM51245G_ReadCfg2Register+0x80>
 8009dfc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009e00:	e001      	b.n	8009e06 <MX25LM51245G_ReadCfg2Register+0x84>
 8009e02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009e06:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8009e08:	7abb      	ldrb	r3, [r7, #10]
 8009e0a:	2b01      	cmp	r3, #1
 8009e0c:	d102      	bne.n	8009e14 <MX25LM51245G_ReadCfg2Register+0x92>
 8009e0e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009e12:	e000      	b.n	8009e16 <MX25LM51245G_ReadCfg2Register+0x94>
 8009e14:	2300      	movs	r3, #0
 8009e16:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 8009e18:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8009e1c:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.Address            = ReadAddr;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8009e22:	2300      	movs	r3, #0
 8009e24:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8009e26:	7afb      	ldrb	r3, [r7, #11]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d102      	bne.n	8009e32 <MX25LM51245G_ReadCfg2Register+0xb0>
 8009e2c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009e30:	e001      	b.n	8009e36 <MX25LM51245G_ReadCfg2Register+0xb4>
 8009e32:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009e36:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8009e38:	7abb      	ldrb	r3, [r7, #10]
 8009e3a:	2b01      	cmp	r3, #1
 8009e3c:	d102      	bne.n	8009e44 <MX25LM51245G_ReadCfg2Register+0xc2>
 8009e3e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009e42:	e000      	b.n	8009e46 <MX25LM51245G_ReadCfg2Register+0xc4>
 8009e44:	2300      	movs	r3, #0
 8009e46:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 8009e48:	7afb      	ldrb	r3, [r7, #11]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d101      	bne.n	8009e52 <MX25LM51245G_ReadCfg2Register+0xd0>
 8009e4e:	2300      	movs	r3, #0
 8009e50:	e000      	b.n	8009e54 <MX25LM51245G_ReadCfg2Register+0xd2>
 8009e52:	2305      	movs	r3, #5
 8009e54:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 8009e56:	7abb      	ldrb	r3, [r7, #10]
 8009e58:	2b01      	cmp	r3, #1
 8009e5a:	d101      	bne.n	8009e60 <MX25LM51245G_ReadCfg2Register+0xde>
 8009e5c:	2302      	movs	r3, #2
 8009e5e:	e000      	b.n	8009e62 <MX25LM51245G_ReadCfg2Register+0xe0>
 8009e60:	2301      	movs	r3, #1
 8009e62:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DQSMode            = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 8009e64:	7abb      	ldrb	r3, [r7, #10]
 8009e66:	2b01      	cmp	r3, #1
 8009e68:	d102      	bne.n	8009e70 <MX25LM51245G_ReadCfg2Register+0xee>
 8009e6a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8009e6e:	e000      	b.n	8009e72 <MX25LM51245G_ReadCfg2Register+0xf0>
 8009e70:	2300      	movs	r3, #0
 8009e72:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8009e74:	2300      	movs	r3, #0
 8009e76:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009e78:	f107 0310 	add.w	r3, r7, #16
 8009e7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e80:	4619      	mov	r1, r3
 8009e82:	68f8      	ldr	r0, [r7, #12]
 8009e84:	f006 fdec 	bl	8010a60 <HAL_OSPI_Command>
 8009e88:	4603      	mov	r3, r0
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d002      	beq.n	8009e94 <MX25LM51245G_ReadCfg2Register+0x112>
  {
    return MX25LM51245G_ERROR;
 8009e8e:	f04f 33ff 	mov.w	r3, #4294967295
 8009e92:	e00c      	b.n	8009eae <MX25LM51245G_ReadCfg2Register+0x12c>
  }

  /* Reception of the data */
  if (HAL_OSPI_Receive(Ctx, Value, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009e94:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e98:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009e9a:	68f8      	ldr	r0, [r7, #12]
 8009e9c:	f006 fee0 	bl	8010c60 <HAL_OSPI_Receive>
 8009ea0:	4603      	mov	r3, r0
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d002      	beq.n	8009eac <MX25LM51245G_ReadCfg2Register+0x12a>
  {
    return MX25LM51245G_ERROR;
 8009ea6:	f04f 33ff 	mov.w	r3, #4294967295
 8009eaa:	e000      	b.n	8009eae <MX25LM51245G_ReadCfg2Register+0x12c>
  }

  return MX25LM51245G_OK;
 8009eac:	2300      	movs	r3, #0
}
 8009eae:	4618      	mov	r0, r3
 8009eb0:	3760      	adds	r7, #96	; 0x60
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	bd80      	pop	{r7, pc}

08009eb6 <MX25LM51245G_ResetEnable>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_ResetEnable(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 8009eb6:	b580      	push	{r7, lr}
 8009eb8:	b096      	sub	sp, #88	; 0x58
 8009eba:	af00      	add	r7, sp, #0
 8009ebc:	6078      	str	r0, [r7, #4]
 8009ebe:	460b      	mov	r3, r1
 8009ec0:	70fb      	strb	r3, [r7, #3]
 8009ec2:	4613      	mov	r3, r2
 8009ec4:	70bb      	strb	r3, [r7, #2]
  OSPI_RegularCmdTypeDef s_command = {0};
 8009ec6:	f107 0308 	add.w	r3, r7, #8
 8009eca:	2250      	movs	r2, #80	; 0x50
 8009ecc:	2100      	movs	r1, #0
 8009ece:	4618      	mov	r0, r3
 8009ed0:	f01c fad4 	bl	802647c <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8009ed4:	78fb      	ldrb	r3, [r7, #3]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d105      	bne.n	8009ee6 <MX25LM51245G_ResetEnable+0x30>
 8009eda:	78bb      	ldrb	r3, [r7, #2]
 8009edc:	2b01      	cmp	r3, #1
 8009ede:	d102      	bne.n	8009ee6 <MX25LM51245G_ResetEnable+0x30>
  {
    return MX25LM51245G_ERROR;
 8009ee0:	f04f 33ff 	mov.w	r3, #4294967295
 8009ee4:	e03b      	b.n	8009f5e <MX25LM51245G_ResetEnable+0xa8>
  }

  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	60bb      	str	r3, [r7, #8]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 8009eea:	2300      	movs	r3, #0
 8009eec:	60fb      	str	r3, [r7, #12]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8009eee:	78fb      	ldrb	r3, [r7, #3]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d101      	bne.n	8009ef8 <MX25LM51245G_ResetEnable+0x42>
 8009ef4:	2301      	movs	r3, #1
 8009ef6:	e000      	b.n	8009efa <MX25LM51245G_ResetEnable+0x44>
 8009ef8:	2304      	movs	r3, #4
 8009efa:	617b      	str	r3, [r7, #20]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8009efc:	78bb      	ldrb	r3, [r7, #2]
 8009efe:	2b01      	cmp	r3, #1
 8009f00:	d101      	bne.n	8009f06 <MX25LM51245G_ResetEnable+0x50>
 8009f02:	2308      	movs	r3, #8
 8009f04:	e000      	b.n	8009f08 <MX25LM51245G_ResetEnable+0x52>
 8009f06:	2300      	movs	r3, #0
 8009f08:	61fb      	str	r3, [r7, #28]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8009f0a:	78fb      	ldrb	r3, [r7, #3]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d101      	bne.n	8009f14 <MX25LM51245G_ResetEnable+0x5e>
 8009f10:	2300      	movs	r3, #0
 8009f12:	e000      	b.n	8009f16 <MX25LM51245G_ResetEnable+0x60>
 8009f14:	2310      	movs	r3, #16
 8009f16:	61bb      	str	r3, [r7, #24]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_RESET_ENABLE_CMD : MX25LM51245G_OCTA_RESET_ENABLE_CMD;
 8009f18:	78fb      	ldrb	r3, [r7, #3]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d101      	bne.n	8009f22 <MX25LM51245G_ResetEnable+0x6c>
 8009f1e:	2366      	movs	r3, #102	; 0x66
 8009f20:	e001      	b.n	8009f26 <MX25LM51245G_ResetEnable+0x70>
 8009f22:	f246 6399 	movw	r3, #26265	; 0x6699
 8009f26:	613b      	str	r3, [r7, #16]
  s_command.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 8009f28:	2300      	movs	r3, #0
 8009f2a:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DataMode           = HAL_OSPI_DATA_NONE;
 8009f30:	2300      	movs	r3, #0
 8009f32:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DummyCycles        = 0U;
 8009f34:	2300      	movs	r3, #0
 8009f36:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8009f38:	2300      	movs	r3, #0
 8009f3a:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	657b      	str	r3, [r7, #84]	; 0x54

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009f40:	f107 0308 	add.w	r3, r7, #8
 8009f44:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f48:	4619      	mov	r1, r3
 8009f4a:	6878      	ldr	r0, [r7, #4]
 8009f4c:	f006 fd88 	bl	8010a60 <HAL_OSPI_Command>
 8009f50:	4603      	mov	r3, r0
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d002      	beq.n	8009f5c <MX25LM51245G_ResetEnable+0xa6>
  {
    return MX25LM51245G_ERROR;
 8009f56:	f04f 33ff 	mov.w	r3, #4294967295
 8009f5a:	e000      	b.n	8009f5e <MX25LM51245G_ResetEnable+0xa8>
  }

  return MX25LM51245G_OK;
 8009f5c:	2300      	movs	r3, #0
}
 8009f5e:	4618      	mov	r0, r3
 8009f60:	3758      	adds	r7, #88	; 0x58
 8009f62:	46bd      	mov	sp, r7
 8009f64:	bd80      	pop	{r7, pc}

08009f66 <MX25LM51245G_ResetMemory>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_ResetMemory(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 8009f66:	b580      	push	{r7, lr}
 8009f68:	b096      	sub	sp, #88	; 0x58
 8009f6a:	af00      	add	r7, sp, #0
 8009f6c:	6078      	str	r0, [r7, #4]
 8009f6e:	460b      	mov	r3, r1
 8009f70:	70fb      	strb	r3, [r7, #3]
 8009f72:	4613      	mov	r3, r2
 8009f74:	70bb      	strb	r3, [r7, #2]
  OSPI_RegularCmdTypeDef s_command = {0};
 8009f76:	f107 0308 	add.w	r3, r7, #8
 8009f7a:	2250      	movs	r2, #80	; 0x50
 8009f7c:	2100      	movs	r1, #0
 8009f7e:	4618      	mov	r0, r3
 8009f80:	f01c fa7c 	bl	802647c <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8009f84:	78fb      	ldrb	r3, [r7, #3]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d105      	bne.n	8009f96 <MX25LM51245G_ResetMemory+0x30>
 8009f8a:	78bb      	ldrb	r3, [r7, #2]
 8009f8c:	2b01      	cmp	r3, #1
 8009f8e:	d102      	bne.n	8009f96 <MX25LM51245G_ResetMemory+0x30>
  {
    return MX25LM51245G_ERROR;
 8009f90:	f04f 33ff 	mov.w	r3, #4294967295
 8009f94:	e03b      	b.n	800a00e <MX25LM51245G_ResetMemory+0xa8>
  }

  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8009f96:	2300      	movs	r3, #0
 8009f98:	60bb      	str	r3, [r7, #8]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	60fb      	str	r3, [r7, #12]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8009f9e:	78fb      	ldrb	r3, [r7, #3]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d101      	bne.n	8009fa8 <MX25LM51245G_ResetMemory+0x42>
 8009fa4:	2301      	movs	r3, #1
 8009fa6:	e000      	b.n	8009faa <MX25LM51245G_ResetMemory+0x44>
 8009fa8:	2304      	movs	r3, #4
 8009faa:	617b      	str	r3, [r7, #20]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8009fac:	78bb      	ldrb	r3, [r7, #2]
 8009fae:	2b01      	cmp	r3, #1
 8009fb0:	d101      	bne.n	8009fb6 <MX25LM51245G_ResetMemory+0x50>
 8009fb2:	2308      	movs	r3, #8
 8009fb4:	e000      	b.n	8009fb8 <MX25LM51245G_ResetMemory+0x52>
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	61fb      	str	r3, [r7, #28]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8009fba:	78fb      	ldrb	r3, [r7, #3]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d101      	bne.n	8009fc4 <MX25LM51245G_ResetMemory+0x5e>
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	e000      	b.n	8009fc6 <MX25LM51245G_ResetMemory+0x60>
 8009fc4:	2310      	movs	r3, #16
 8009fc6:	61bb      	str	r3, [r7, #24]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_RESET_MEMORY_CMD : MX25LM51245G_OCTA_RESET_MEMORY_CMD;
 8009fc8:	78fb      	ldrb	r3, [r7, #3]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d101      	bne.n	8009fd2 <MX25LM51245G_ResetMemory+0x6c>
 8009fce:	2399      	movs	r3, #153	; 0x99
 8009fd0:	e001      	b.n	8009fd6 <MX25LM51245G_ResetMemory+0x70>
 8009fd2:	f649 1366 	movw	r3, #39270	; 0x9966
 8009fd6:	613b      	str	r3, [r7, #16]
  s_command.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 8009fd8:	2300      	movs	r3, #0
 8009fda:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8009fdc:	2300      	movs	r3, #0
 8009fde:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DataMode           = HAL_OSPI_DATA_NONE;
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DummyCycles        = 0U;
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8009fe8:	2300      	movs	r3, #0
 8009fea:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8009fec:	2300      	movs	r3, #0
 8009fee:	657b      	str	r3, [r7, #84]	; 0x54

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009ff0:	f107 0308 	add.w	r3, r7, #8
 8009ff4:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ff8:	4619      	mov	r1, r3
 8009ffa:	6878      	ldr	r0, [r7, #4]
 8009ffc:	f006 fd30 	bl	8010a60 <HAL_OSPI_Command>
 800a000:	4603      	mov	r3, r0
 800a002:	2b00      	cmp	r3, #0
 800a004:	d002      	beq.n	800a00c <MX25LM51245G_ResetMemory+0xa6>
  {
    return MX25LM51245G_ERROR;
 800a006:	f04f 33ff 	mov.w	r3, #4294967295
 800a00a:	e000      	b.n	800a00e <MX25LM51245G_ResetMemory+0xa8>
  }

  return MX25LM51245G_OK;
 800a00c:	2300      	movs	r3, #0
}
 800a00e:	4618      	mov	r0, r3
 800a010:	3758      	adds	r7, #88	; 0x58
 800a012:	46bd      	mov	sp, r7
 800a014:	bd80      	pop	{r7, pc}
	...

0800a018 <BSP_I2C4_Init>:
/**
  * @brief  Initializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_Init(void)
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b082      	sub	sp, #8
 800a01c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800a01e:	2300      	movs	r3, #0
 800a020:	607b      	str	r3, [r7, #4]

  hbus_i2c4.Instance = BUS_I2C4;
 800a022:	4b16      	ldr	r3, [pc, #88]	; (800a07c <BSP_I2C4_Init+0x64>)
 800a024:	4a16      	ldr	r2, [pc, #88]	; (800a080 <BSP_I2C4_Init+0x68>)
 800a026:	601a      	str	r2, [r3, #0]

  if (I2c4InitCounter == 0U)
 800a028:	4b16      	ldr	r3, [pc, #88]	; (800a084 <BSP_I2C4_Init+0x6c>)
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d11f      	bne.n	800a070 <BSP_I2C4_Init+0x58>
  {
    I2c4InitCounter++;
 800a030:	4b14      	ldr	r3, [pc, #80]	; (800a084 <BSP_I2C4_Init+0x6c>)
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	3301      	adds	r3, #1
 800a036:	4a13      	ldr	r2, [pc, #76]	; (800a084 <BSP_I2C4_Init+0x6c>)
 800a038:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 800a03a:	4810      	ldr	r0, [pc, #64]	; (800a07c <BSP_I2C4_Init+0x64>)
 800a03c:	f003 f87a 	bl	800d134 <HAL_I2C_GetState>
 800a040:	4603      	mov	r3, r0
 800a042:	2b00      	cmp	r3, #0
 800a044:	d114      	bne.n	800a070 <BSP_I2C4_Init+0x58>
    {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C4 Msp */
      I2C4_MspInit(&hbus_i2c4);
 800a046:	480d      	ldr	r0, [pc, #52]	; (800a07c <BSP_I2C4_Init+0x64>)
 800a048:	f000 fb60 	bl	800a70c <I2C4_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 800a04c:	f008 fa44 	bl	80124d8 <HAL_RCC_GetPCLK2Freq>
 800a050:	4603      	mov	r3, r0
 800a052:	490d      	ldr	r1, [pc, #52]	; (800a088 <BSP_I2C4_Init+0x70>)
 800a054:	4618      	mov	r0, r3
 800a056:	f000 f8e3 	bl	800a220 <I2C_GetTiming>
 800a05a:	4603      	mov	r3, r0
 800a05c:	4619      	mov	r1, r3
 800a05e:	4807      	ldr	r0, [pc, #28]	; (800a07c <BSP_I2C4_Init+0x64>)
 800a060:	f000 f838 	bl	800a0d4 <MX_I2C4_Init>
 800a064:	4603      	mov	r3, r0
 800a066:	2b00      	cmp	r3, #0
 800a068:	d002      	beq.n	800a070 <BSP_I2C4_Init+0x58>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 800a06a:	f06f 0307 	mvn.w	r3, #7
 800a06e:	607b      	str	r3, [r7, #4]
      }
#endif
    }
  }

  return ret;
 800a070:	687b      	ldr	r3, [r7, #4]
}
 800a072:	4618      	mov	r0, r3
 800a074:	3708      	adds	r7, #8
 800a076:	46bd      	mov	sp, r7
 800a078:	bd80      	pop	{r7, pc}
 800a07a:	bf00      	nop
 800a07c:	2400bc2c 	.word	0x2400bc2c
 800a080:	58001c00 	.word	0x58001c00
 800a084:	2400b224 	.word	0x2400b224
 800a088:	00061a80 	.word	0x00061a80

0800a08c <BSP_I2C4_DeInit>:
/**
  * @brief  DeInitializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_DeInit(void)
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b082      	sub	sp, #8
 800a090:	af00      	add	r7, sp, #0
  int32_t ret  = BSP_ERROR_NONE;
 800a092:	2300      	movs	r3, #0
 800a094:	607b      	str	r3, [r7, #4]

  I2c4InitCounter--;
 800a096:	4b0d      	ldr	r3, [pc, #52]	; (800a0cc <BSP_I2C4_DeInit+0x40>)
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	3b01      	subs	r3, #1
 800a09c:	4a0b      	ldr	r2, [pc, #44]	; (800a0cc <BSP_I2C4_DeInit+0x40>)
 800a09e:	6013      	str	r3, [r2, #0]

  if (I2c4InitCounter == 0U)
 800a0a0:	4b0a      	ldr	r3, [pc, #40]	; (800a0cc <BSP_I2C4_DeInit+0x40>)
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d10b      	bne.n	800a0c0 <BSP_I2C4_DeInit+0x34>
  {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    I2C4_MspDeInit(&hbus_i2c4);
 800a0a8:	4809      	ldr	r0, [pc, #36]	; (800a0d0 <BSP_I2C4_DeInit+0x44>)
 800a0aa:	f000 fb9b 	bl	800a7e4 <I2C4_MspDeInit>
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */

    /* Init the I2C */
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 800a0ae:	4808      	ldr	r0, [pc, #32]	; (800a0d0 <BSP_I2C4_DeInit+0x44>)
 800a0b0:	f002 fde2 	bl	800cc78 <HAL_I2C_DeInit>
 800a0b4:	4603      	mov	r3, r0
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d002      	beq.n	800a0c0 <BSP_I2C4_DeInit+0x34>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 800a0ba:	f06f 0307 	mvn.w	r3, #7
 800a0be:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
 800a0c0:	687b      	ldr	r3, [r7, #4]
}
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	3708      	adds	r7, #8
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	bd80      	pop	{r7, pc}
 800a0ca:	bf00      	nop
 800a0cc:	2400b224 	.word	0x2400b224
 800a0d0:	2400bc2c 	.word	0x2400bc2c

0800a0d4 <MX_I2C4_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C4_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b084      	sub	sp, #16
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]
 800a0dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a0de:	2300      	movs	r3, #0
 800a0e0:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	683a      	ldr	r2, [r7, #0]
 800a0e6:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	2201      	movs	r2, #1
 800a0f2:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	2200      	movs	r2, #0
 800a104:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	2200      	movs	r2, #0
 800a10a:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	2200      	movs	r2, #0
 800a110:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
 800a112:	6878      	ldr	r0, [r7, #4]
 800a114:	f002 fd20 	bl	800cb58 <HAL_I2C_Init>
 800a118:	4603      	mov	r3, r0
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d002      	beq.n	800a124 <MX_I2C4_Init+0x50>
  {
    status = HAL_ERROR;
 800a11e:	2301      	movs	r3, #1
 800a120:	73fb      	strb	r3, [r7, #15]
 800a122:	e014      	b.n	800a14e <MX_I2C4_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = I2C_ANALOGFILTER_ENABLE;
 800a124:	2300      	movs	r3, #0
 800a126:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 800a128:	68b9      	ldr	r1, [r7, #8]
 800a12a:	6878      	ldr	r0, [r7, #4]
 800a12c:	f003 fad4 	bl	800d6d8 <HAL_I2CEx_ConfigAnalogFilter>
 800a130:	4603      	mov	r3, r0
 800a132:	2b00      	cmp	r3, #0
 800a134:	d002      	beq.n	800a13c <MX_I2C4_Init+0x68>
    {
      status = HAL_ERROR;
 800a136:	2301      	movs	r3, #1
 800a138:	73fb      	strb	r3, [r7, #15]
 800a13a:	e008      	b.n	800a14e <MX_I2C4_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 800a13c:	2100      	movs	r1, #0
 800a13e:	6878      	ldr	r0, [r7, #4]
 800a140:	f003 fb15 	bl	800d76e <HAL_I2CEx_ConfigDigitalFilter>
 800a144:	4603      	mov	r3, r0
 800a146:	2b00      	cmp	r3, #0
 800a148:	d001      	beq.n	800a14e <MX_I2C4_Init+0x7a>
      {
        status = HAL_ERROR;
 800a14a:	2301      	movs	r3, #1
 800a14c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
 800a14e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a150:	4618      	mov	r0, r3
 800a152:	3710      	adds	r7, #16
 800a154:	46bd      	mov	sp, r7
 800a156:	bd80      	pop	{r7, pc}

0800a158 <BSP_I2C4_WriteReg>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	b088      	sub	sp, #32
 800a15c:	af02      	add	r7, sp, #8
 800a15e:	60ba      	str	r2, [r7, #8]
 800a160:	461a      	mov	r2, r3
 800a162:	4603      	mov	r3, r0
 800a164:	81fb      	strh	r3, [r7, #14]
 800a166:	460b      	mov	r3, r1
 800a168:	81bb      	strh	r3, [r7, #12]
 800a16a:	4613      	mov	r3, r2
 800a16c:	80fb      	strh	r3, [r7, #6]
  int32_t ret;

  if(I2C4_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 800a16e:	89b9      	ldrh	r1, [r7, #12]
 800a170:	89f8      	ldrh	r0, [r7, #14]
 800a172:	88fb      	ldrh	r3, [r7, #6]
 800a174:	9300      	str	r3, [sp, #0]
 800a176:	68bb      	ldr	r3, [r7, #8]
 800a178:	2201      	movs	r2, #1
 800a17a:	f000 fb57 	bl	800a82c <I2C4_WriteReg>
 800a17e:	4603      	mov	r3, r0
 800a180:	2b00      	cmp	r3, #0
 800a182:	d102      	bne.n	800a18a <BSP_I2C4_WriteReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 800a184:	2300      	movs	r3, #0
 800a186:	617b      	str	r3, [r7, #20]
 800a188:	e00c      	b.n	800a1a4 <BSP_I2C4_WriteReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800a18a:	4809      	ldr	r0, [pc, #36]	; (800a1b0 <BSP_I2C4_WriteReg+0x58>)
 800a18c:	f002 ffe0 	bl	800d150 <HAL_I2C_GetError>
 800a190:	4603      	mov	r3, r0
 800a192:	2b04      	cmp	r3, #4
 800a194:	d103      	bne.n	800a19e <BSP_I2C4_WriteReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800a196:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800a19a:	617b      	str	r3, [r7, #20]
 800a19c:	e002      	b.n	800a1a4 <BSP_I2C4_WriteReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800a19e:	f06f 0303 	mvn.w	r3, #3
 800a1a2:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800a1a4:	697b      	ldr	r3, [r7, #20]
}
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	3718      	adds	r7, #24
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	bd80      	pop	{r7, pc}
 800a1ae:	bf00      	nop
 800a1b0:	2400bc2c 	.word	0x2400bc2c

0800a1b4 <BSP_I2C4_ReadReg>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	b088      	sub	sp, #32
 800a1b8:	af02      	add	r7, sp, #8
 800a1ba:	60ba      	str	r2, [r7, #8]
 800a1bc:	461a      	mov	r2, r3
 800a1be:	4603      	mov	r3, r0
 800a1c0:	81fb      	strh	r3, [r7, #14]
 800a1c2:	460b      	mov	r3, r1
 800a1c4:	81bb      	strh	r3, [r7, #12]
 800a1c6:	4613      	mov	r3, r2
 800a1c8:	80fb      	strh	r3, [r7, #6]
  int32_t ret;

  if(I2C4_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 800a1ca:	89b9      	ldrh	r1, [r7, #12]
 800a1cc:	89f8      	ldrh	r0, [r7, #14]
 800a1ce:	88fb      	ldrh	r3, [r7, #6]
 800a1d0:	9300      	str	r3, [sp, #0]
 800a1d2:	68bb      	ldr	r3, [r7, #8]
 800a1d4:	2201      	movs	r2, #1
 800a1d6:	f000 fb4f 	bl	800a878 <I2C4_ReadReg>
 800a1da:	4603      	mov	r3, r0
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d102      	bne.n	800a1e6 <BSP_I2C4_ReadReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	617b      	str	r3, [r7, #20]
 800a1e4:	e00c      	b.n	800a200 <BSP_I2C4_ReadReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800a1e6:	4809      	ldr	r0, [pc, #36]	; (800a20c <BSP_I2C4_ReadReg+0x58>)
 800a1e8:	f002 ffb2 	bl	800d150 <HAL_I2C_GetError>
 800a1ec:	4603      	mov	r3, r0
 800a1ee:	2b04      	cmp	r3, #4
 800a1f0:	d103      	bne.n	800a1fa <BSP_I2C4_ReadReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800a1f2:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800a1f6:	617b      	str	r3, [r7, #20]
 800a1f8:	e002      	b.n	800a200 <BSP_I2C4_ReadReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800a1fa:	f06f 0303 	mvn.w	r3, #3
 800a1fe:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800a200:	697b      	ldr	r3, [r7, #20]
}
 800a202:	4618      	mov	r0, r3
 800a204:	3718      	adds	r7, #24
 800a206:	46bd      	mov	sp, r7
 800a208:	bd80      	pop	{r7, pc}
 800a20a:	bf00      	nop
 800a20c:	2400bc2c 	.word	0x2400bc2c

0800a210 <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
 800a210:	b580      	push	{r7, lr}
 800a212:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
 800a214:	f001 fca4 	bl	800bb60 <HAL_GetTick>
 800a218:	4603      	mov	r3, r0
}
 800a21a:	4618      	mov	r0, r3
 800a21c:	bd80      	pop	{r7, pc}
	...

0800a220 <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
 800a220:	b580      	push	{r7, lr}
 800a222:	b086      	sub	sp, #24
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
 800a228:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 800a22a:	2300      	movs	r3, #0
 800a22c:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d06b      	beq.n	800a30c <I2C_GetTiming+0xec>
 800a234:	683b      	ldr	r3, [r7, #0]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d068      	beq.n	800a30c <I2C_GetTiming+0xec>
  {
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 800a23a:	2300      	movs	r3, #0
 800a23c:	613b      	str	r3, [r7, #16]
 800a23e:	e060      	b.n	800a302 <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 800a240:	4a35      	ldr	r2, [pc, #212]	; (800a318 <I2C_GetTiming+0xf8>)
 800a242:	693b      	ldr	r3, [r7, #16]
 800a244:	212c      	movs	r1, #44	; 0x2c
 800a246:	fb01 f303 	mul.w	r3, r1, r3
 800a24a:	4413      	add	r3, r2
 800a24c:	3304      	adds	r3, #4
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	683a      	ldr	r2, [r7, #0]
 800a252:	429a      	cmp	r2, r3
 800a254:	d352      	bcc.n	800a2fc <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 800a256:	4a30      	ldr	r2, [pc, #192]	; (800a318 <I2C_GetTiming+0xf8>)
 800a258:	693b      	ldr	r3, [r7, #16]
 800a25a:	212c      	movs	r1, #44	; 0x2c
 800a25c:	fb01 f303 	mul.w	r3, r1, r3
 800a260:	4413      	add	r3, r2
 800a262:	3308      	adds	r3, #8
 800a264:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 800a266:	683a      	ldr	r2, [r7, #0]
 800a268:	429a      	cmp	r2, r3
 800a26a:	d847      	bhi.n	800a2fc <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 800a26c:	6939      	ldr	r1, [r7, #16]
 800a26e:	6878      	ldr	r0, [r7, #4]
 800a270:	f000 f856 	bl	800a320 <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 800a274:	6939      	ldr	r1, [r7, #16]
 800a276:	6878      	ldr	r0, [r7, #4]
 800a278:	f000 f940 	bl	800a4fc <I2C_Compute_SCLL_SCLH>
 800a27c:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	2b7f      	cmp	r3, #127	; 0x7f
 800a282:	d842      	bhi.n	800a30a <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800a284:	4925      	ldr	r1, [pc, #148]	; (800a31c <I2C_GetTiming+0xfc>)
 800a286:	68fa      	ldr	r2, [r7, #12]
 800a288:	4613      	mov	r3, r2
 800a28a:	009b      	lsls	r3, r3, #2
 800a28c:	4413      	add	r3, r2
 800a28e:	009b      	lsls	r3, r3, #2
 800a290:	440b      	add	r3, r1
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 800a296:	4821      	ldr	r0, [pc, #132]	; (800a31c <I2C_GetTiming+0xfc>)
 800a298:	68fa      	ldr	r2, [r7, #12]
 800a29a:	4613      	mov	r3, r2
 800a29c:	009b      	lsls	r3, r3, #2
 800a29e:	4413      	add	r3, r2
 800a2a0:	009b      	lsls	r3, r3, #2
 800a2a2:	4403      	add	r3, r0
 800a2a4:	3304      	adds	r3, #4
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	051b      	lsls	r3, r3, #20
 800a2aa:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800a2ae:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 800a2b0:	481a      	ldr	r0, [pc, #104]	; (800a31c <I2C_GetTiming+0xfc>)
 800a2b2:	68fa      	ldr	r2, [r7, #12]
 800a2b4:	4613      	mov	r3, r2
 800a2b6:	009b      	lsls	r3, r3, #2
 800a2b8:	4413      	add	r3, r2
 800a2ba:	009b      	lsls	r3, r3, #2
 800a2bc:	4403      	add	r3, r0
 800a2be:	3308      	adds	r3, #8
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	041b      	lsls	r3, r3, #16
 800a2c4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 800a2c8:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 800a2ca:	4814      	ldr	r0, [pc, #80]	; (800a31c <I2C_GetTiming+0xfc>)
 800a2cc:	68fa      	ldr	r2, [r7, #12]
 800a2ce:	4613      	mov	r3, r2
 800a2d0:	009b      	lsls	r3, r3, #2
 800a2d2:	4413      	add	r3, r2
 800a2d4:	009b      	lsls	r3, r3, #2
 800a2d6:	4403      	add	r3, r0
 800a2d8:	330c      	adds	r3, #12
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	021b      	lsls	r3, r3, #8
 800a2de:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 800a2e0:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 800a2e2:	480e      	ldr	r0, [pc, #56]	; (800a31c <I2C_GetTiming+0xfc>)
 800a2e4:	68fa      	ldr	r2, [r7, #12]
 800a2e6:	4613      	mov	r3, r2
 800a2e8:	009b      	lsls	r3, r3, #2
 800a2ea:	4413      	add	r3, r2
 800a2ec:	009b      	lsls	r3, r3, #2
 800a2ee:	4403      	add	r3, r0
 800a2f0:	3310      	adds	r3, #16
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800a2f6:	430b      	orrs	r3, r1
 800a2f8:	617b      	str	r3, [r7, #20]
        }
        break;
 800a2fa:	e006      	b.n	800a30a <I2C_GetTiming+0xea>
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 800a2fc:	693b      	ldr	r3, [r7, #16]
 800a2fe:	3301      	adds	r3, #1
 800a300:	613b      	str	r3, [r7, #16]
 800a302:	693b      	ldr	r3, [r7, #16]
 800a304:	2b02      	cmp	r3, #2
 800a306:	d99b      	bls.n	800a240 <I2C_GetTiming+0x20>
 800a308:	e000      	b.n	800a30c <I2C_GetTiming+0xec>
        break;
 800a30a:	bf00      	nop
      }
    }
  }

  return ret;
 800a30c:	697b      	ldr	r3, [r7, #20]
}
 800a30e:	4618      	mov	r0, r3
 800a310:	3718      	adds	r7, #24
 800a312:	46bd      	mov	sp, r7
 800a314:	bd80      	pop	{r7, pc}
 800a316:	bf00      	nop
 800a318:	0802a344 	.word	0x0802a344
 800a31c:	2400b228 	.word	0x2400b228

0800a320 <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 800a320:	b480      	push	{r7}
 800a322:	b08f      	sub	sp, #60	; 0x3c
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
 800a328:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 800a32a:	2310      	movs	r3, #16
 800a32c:	637b      	str	r3, [r7, #52]	; 0x34
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	085a      	lsrs	r2, r3, #1
 800a332:	4b6e      	ldr	r3, [pc, #440]	; (800a4ec <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
 800a334:	4413      	add	r3, r2
 800a336:	687a      	ldr	r2, [r7, #4]
 800a338:	fbb3 f3f2 	udiv	r3, r3, r2
 800a33c:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 800a33e:	2332      	movs	r3, #50	; 0x32
 800a340:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
 800a342:	f44f 7382 	mov.w	r3, #260	; 0x104
 800a346:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800a348:	4a69      	ldr	r2, [pc, #420]	; (800a4f0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800a34a:	683b      	ldr	r3, [r7, #0]
 800a34c:	212c      	movs	r1, #44	; 0x2c
 800a34e:	fb01 f303 	mul.w	r3, r1, r3
 800a352:	4413      	add	r3, r2
 800a354:	3324      	adds	r3, #36	; 0x24
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	4618      	mov	r0, r3
 800a35a:	4a65      	ldr	r2, [pc, #404]	; (800a4f0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	212c      	movs	r1, #44	; 0x2c
 800a360:	fb01 f303 	mul.w	r3, r1, r3
 800a364:	4413      	add	r3, r2
 800a366:	330c      	adds	r3, #12
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	18c2      	adds	r2, r0, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 800a36c:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800a36e:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 800a370:	495f      	ldr	r1, [pc, #380]	; (800a4f0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800a372:	683b      	ldr	r3, [r7, #0]
 800a374:	202c      	movs	r0, #44	; 0x2c
 800a376:	fb00 f303 	mul.w	r3, r0, r3
 800a37a:	440b      	add	r3, r1
 800a37c:	3328      	adds	r3, #40	; 0x28
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	3303      	adds	r3, #3
 800a382:	69f9      	ldr	r1, [r7, #28]
 800a384:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800a388:	1ad3      	subs	r3, r2, r3
 800a38a:	633b      	str	r3, [r7, #48]	; 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800a38c:	4a58      	ldr	r2, [pc, #352]	; (800a4f0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800a38e:	683b      	ldr	r3, [r7, #0]
 800a390:	212c      	movs	r1, #44	; 0x2c
 800a392:	fb01 f303 	mul.w	r3, r1, r3
 800a396:	4413      	add	r3, r2
 800a398:	3310      	adds	r3, #16
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	4618      	mov	r0, r3
 800a39e:	4a54      	ldr	r2, [pc, #336]	; (800a4f0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800a3a0:	683b      	ldr	r3, [r7, #0]
 800a3a2:	212c      	movs	r1, #44	; 0x2c
 800a3a4:	fb01 f303 	mul.w	r3, r1, r3
 800a3a8:	4413      	add	r3, r2
 800a3aa:	3320      	adds	r3, #32
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	1ac2      	subs	r2, r0, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 800a3b0:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800a3b2:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 800a3b4:	494e      	ldr	r1, [pc, #312]	; (800a4f0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800a3b6:	683b      	ldr	r3, [r7, #0]
 800a3b8:	202c      	movs	r0, #44	; 0x2c
 800a3ba:	fb00 f303 	mul.w	r3, r0, r3
 800a3be:	440b      	add	r3, r1
 800a3c0:	3328      	adds	r3, #40	; 0x28
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	3304      	adds	r3, #4
 800a3c6:	69f9      	ldr	r1, [r7, #28]
 800a3c8:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800a3cc:	1ad3      	subs	r3, r2, r3
 800a3ce:	62fb      	str	r3, [r7, #44]	; 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 800a3d0:	4a47      	ldr	r2, [pc, #284]	; (800a4f0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800a3d2:	683b      	ldr	r3, [r7, #0]
 800a3d4:	212c      	movs	r1, #44	; 0x2c
 800a3d6:	fb01 f303 	mul.w	r3, r1, r3
 800a3da:	4413      	add	r3, r2
 800a3dc:	3320      	adds	r3, #32
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	4a43      	ldr	r2, [pc, #268]	; (800a4f0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800a3e4:	683b      	ldr	r3, [r7, #0]
 800a3e6:	212c      	movs	r1, #44	; 0x2c
 800a3e8:	fb01 f303 	mul.w	r3, r1, r3
 800a3ec:	4413      	add	r3, r2
 800a3ee:	3314      	adds	r3, #20
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	4403      	add	r3, r0
 800a3f4:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
 800a3f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	dc01      	bgt.n	800a400 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	633b      	str	r3, [r7, #48]	; 0x30
  }

  if (tsdadel_max <= 0)
 800a400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a402:	2b00      	cmp	r3, #0
 800a404:	dc01      	bgt.n	800a40a <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
 800a406:	2300      	movs	r3, #0
 800a408:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 800a40a:	2300      	movs	r3, #0
 800a40c:	62bb      	str	r3, [r7, #40]	; 0x28
 800a40e:	e062      	b.n	800a4d6 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 800a410:	2300      	movs	r3, #0
 800a412:	627b      	str	r3, [r7, #36]	; 0x24
 800a414:	e059      	b.n	800a4ca <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 800a416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a418:	3301      	adds	r3, #1
 800a41a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a41c:	3201      	adds	r2, #1
 800a41e:	fb03 f202 	mul.w	r2, r3, r2
 800a422:	69fb      	ldr	r3, [r7, #28]
 800a424:	fb02 f303 	mul.w	r3, r2, r3
 800a428:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
 800a42a:	693b      	ldr	r3, [r7, #16]
 800a42c:	68fa      	ldr	r2, [r7, #12]
 800a42e:	429a      	cmp	r2, r3
 800a430:	d348      	bcc.n	800a4c4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 800a432:	2300      	movs	r3, #0
 800a434:	623b      	str	r3, [r7, #32]
 800a436:	e042      	b.n	800a4be <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 800a438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a43a:	3301      	adds	r3, #1
 800a43c:	6a3a      	ldr	r2, [r7, #32]
 800a43e:	fb03 f202 	mul.w	r2, r3, r2
 800a442:	69fb      	ldr	r3, [r7, #28]
 800a444:	fb02 f303 	mul.w	r3, r2, r3
 800a448:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 800a44a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a44c:	68ba      	ldr	r2, [r7, #8]
 800a44e:	429a      	cmp	r2, r3
 800a450:	d332      	bcc.n	800a4b8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
 800a452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a454:	68ba      	ldr	r2, [r7, #8]
 800a456:	429a      	cmp	r2, r3
 800a458:	d82e      	bhi.n	800a4b8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if(presc != prev_presc)
 800a45a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a45c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a45e:	429a      	cmp	r2, r3
 800a460:	d02a      	beq.n	800a4b8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800a462:	4b24      	ldr	r3, [pc, #144]	; (800a4f4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800a464:	681a      	ldr	r2, [r3, #0]
 800a466:	4924      	ldr	r1, [pc, #144]	; (800a4f8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 800a468:	4613      	mov	r3, r2
 800a46a:	009b      	lsls	r3, r3, #2
 800a46c:	4413      	add	r3, r2
 800a46e:	009b      	lsls	r3, r3, #2
 800a470:	440b      	add	r3, r1
 800a472:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a474:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 800a476:	4b1f      	ldr	r3, [pc, #124]	; (800a4f4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800a478:	681a      	ldr	r2, [r3, #0]
 800a47a:	491f      	ldr	r1, [pc, #124]	; (800a4f8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 800a47c:	4613      	mov	r3, r2
 800a47e:	009b      	lsls	r3, r3, #2
 800a480:	4413      	add	r3, r2
 800a482:	009b      	lsls	r3, r3, #2
 800a484:	440b      	add	r3, r1
 800a486:	3304      	adds	r3, #4
 800a488:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a48a:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800a48c:	4b19      	ldr	r3, [pc, #100]	; (800a4f4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800a48e:	681a      	ldr	r2, [r3, #0]
 800a490:	4919      	ldr	r1, [pc, #100]	; (800a4f8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 800a492:	4613      	mov	r3, r2
 800a494:	009b      	lsls	r3, r3, #2
 800a496:	4413      	add	r3, r2
 800a498:	009b      	lsls	r3, r3, #2
 800a49a:	440b      	add	r3, r1
 800a49c:	3308      	adds	r3, #8
 800a49e:	6a3a      	ldr	r2, [r7, #32]
 800a4a0:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
 800a4a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4a4:	637b      	str	r3, [r7, #52]	; 0x34
              I2c_valid_timing_nbr ++;
 800a4a6:	4b13      	ldr	r3, [pc, #76]	; (800a4f4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	3301      	adds	r3, #1
 800a4ac:	4a11      	ldr	r2, [pc, #68]	; (800a4f4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800a4ae:	6013      	str	r3, [r2, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800a4b0:	4b10      	ldr	r3, [pc, #64]	; (800a4f4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	2b7f      	cmp	r3, #127	; 0x7f
 800a4b6:	d812      	bhi.n	800a4de <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 800a4b8:	6a3b      	ldr	r3, [r7, #32]
 800a4ba:	3301      	adds	r3, #1
 800a4bc:	623b      	str	r3, [r7, #32]
 800a4be:	6a3b      	ldr	r3, [r7, #32]
 800a4c0:	2b0f      	cmp	r3, #15
 800a4c2:	d9b9      	bls.n	800a438 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 800a4c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4c6:	3301      	adds	r3, #1
 800a4c8:	627b      	str	r3, [r7, #36]	; 0x24
 800a4ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4cc:	2b0f      	cmp	r3, #15
 800a4ce:	d9a2      	bls.n	800a416 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 800a4d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4d2:	3301      	adds	r3, #1
 800a4d4:	62bb      	str	r3, [r7, #40]	; 0x28
 800a4d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4d8:	2b0f      	cmp	r3, #15
 800a4da:	d999      	bls.n	800a410 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
 800a4dc:	e000      	b.n	800a4e0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
 800a4de:	bf00      	nop
          }
        }
      }
    }
  }
}
 800a4e0:	373c      	adds	r7, #60	; 0x3c
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e8:	4770      	bx	lr
 800a4ea:	bf00      	nop
 800a4ec:	3b9aca00 	.word	0x3b9aca00
 800a4f0:	0802a344 	.word	0x0802a344
 800a4f4:	2400bc28 	.word	0x2400bc28
 800a4f8:	2400b228 	.word	0x2400b228

0800a4fc <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
 800a4fc:	b480      	push	{r7}
 800a4fe:	b093      	sub	sp, #76	; 0x4c
 800a500:	af00      	add	r7, sp, #0
 800a502:	6078      	str	r0, [r7, #4]
 800a504:	6039      	str	r1, [r7, #0]
 uint32_t ret = 0xFFFFFFFFU;
 800a506:	f04f 33ff 	mov.w	r3, #4294967295
 800a50a:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	085a      	lsrs	r2, r3, #1
 800a510:	4b7a      	ldr	r3, [pc, #488]	; (800a6fc <I2C_Compute_SCLL_SCLH+0x200>)
 800a512:	4413      	add	r3, r2
 800a514:	687a      	ldr	r2, [r7, #4]
 800a516:	fbb3 f3f2 	udiv	r3, r3, r2
 800a51a:	62fb      	str	r3, [r7, #44]	; 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
 800a51c:	4a78      	ldr	r2, [pc, #480]	; (800a700 <I2C_Compute_SCLL_SCLH+0x204>)
 800a51e:	683b      	ldr	r3, [r7, #0]
 800a520:	212c      	movs	r1, #44	; 0x2c
 800a522:	fb01 f303 	mul.w	r3, r1, r3
 800a526:	4413      	add	r3, r2
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	085a      	lsrs	r2, r3, #1
 800a52c:	4b73      	ldr	r3, [pc, #460]	; (800a6fc <I2C_Compute_SCLL_SCLH+0x200>)
 800a52e:	4413      	add	r3, r2
 800a530:	4973      	ldr	r1, [pc, #460]	; (800a700 <I2C_Compute_SCLL_SCLH+0x204>)
 800a532:	683a      	ldr	r2, [r7, #0]
 800a534:	202c      	movs	r0, #44	; 0x2c
 800a536:	fb00 f202 	mul.w	r2, r0, r2
 800a53a:	440a      	add	r2, r1
 800a53c:	6812      	ldr	r2, [r2, #0]
 800a53e:	fbb3 f3f2 	udiv	r3, r3, r2
 800a542:	62bb      	str	r3, [r7, #40]	; 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 800a544:	2332      	movs	r3, #50	; 0x32
 800a546:	627b      	str	r3, [r7, #36]	; 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 800a548:	4a6d      	ldr	r2, [pc, #436]	; (800a700 <I2C_Compute_SCLL_SCLH+0x204>)
 800a54a:	683b      	ldr	r3, [r7, #0]
 800a54c:	212c      	movs	r1, #44	; 0x2c
 800a54e:	fb01 f303 	mul.w	r3, r1, r3
 800a552:	4413      	add	r3, r2
 800a554:	3328      	adds	r3, #40	; 0x28
 800a556:	681a      	ldr	r2, [r3, #0]
 800a558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a55a:	fb02 f303 	mul.w	r3, r2, r3
 800a55e:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 800a560:	4a67      	ldr	r2, [pc, #412]	; (800a700 <I2C_Compute_SCLL_SCLH+0x204>)
 800a562:	683b      	ldr	r3, [r7, #0]
 800a564:	212c      	movs	r1, #44	; 0x2c
 800a566:	fb01 f303 	mul.w	r3, r1, r3
 800a56a:	4413      	add	r3, r2
 800a56c:	3304      	adds	r3, #4
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	4a62      	ldr	r2, [pc, #392]	; (800a6fc <I2C_Compute_SCLL_SCLH+0x200>)
 800a572:	fbb2 f3f3 	udiv	r3, r2, r3
 800a576:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 800a578:	4a61      	ldr	r2, [pc, #388]	; (800a700 <I2C_Compute_SCLL_SCLH+0x204>)
 800a57a:	683b      	ldr	r3, [r7, #0]
 800a57c:	212c      	movs	r1, #44	; 0x2c
 800a57e:	fb01 f303 	mul.w	r3, r1, r3
 800a582:	4413      	add	r3, r2
 800a584:	3308      	adds	r3, #8
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	4a5c      	ldr	r2, [pc, #368]	; (800a6fc <I2C_Compute_SCLL_SCLH+0x200>)
 800a58a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a58e:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
 800a590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a592:	643b      	str	r3, [r7, #64]	; 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800a594:	2300      	movs	r3, #0
 800a596:	637b      	str	r3, [r7, #52]	; 0x34
 800a598:	e0a3      	b.n	800a6e2 <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 800a59a:	495a      	ldr	r1, [pc, #360]	; (800a704 <I2C_Compute_SCLL_SCLH+0x208>)
 800a59c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a59e:	4613      	mov	r3, r2
 800a5a0:	009b      	lsls	r3, r3, #2
 800a5a2:	4413      	add	r3, r2
 800a5a4:	009b      	lsls	r3, r3, #2
 800a5a6:	440b      	add	r3, r1
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	1c5a      	adds	r2, r3, #1
 800a5ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5ae:	fb02 f303 	mul.w	r3, r2, r3
 800a5b2:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a5b8:	e08c      	b.n	800a6d4 <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 800a5ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5bc:	6a3b      	ldr	r3, [r7, #32]
 800a5be:	441a      	add	r2, r3
 800a5c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5c2:	3301      	adds	r3, #1
 800a5c4:	6979      	ldr	r1, [r7, #20]
 800a5c6:	fb03 f101 	mul.w	r1, r3, r1
 800a5ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5cc:	005b      	lsls	r3, r3, #1
 800a5ce:	440b      	add	r3, r1
 800a5d0:	4413      	add	r3, r2
 800a5d2:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 800a5d4:	4a4a      	ldr	r2, [pc, #296]	; (800a700 <I2C_Compute_SCLL_SCLH+0x204>)
 800a5d6:	683b      	ldr	r3, [r7, #0]
 800a5d8:	212c      	movs	r1, #44	; 0x2c
 800a5da:	fb01 f303 	mul.w	r3, r1, r3
 800a5de:	4413      	add	r3, r2
 800a5e0:	3318      	adds	r3, #24
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	693a      	ldr	r2, [r7, #16]
 800a5e6:	429a      	cmp	r2, r3
 800a5e8:	d971      	bls.n	800a6ce <I2C_Compute_SCLL_SCLH+0x1d2>
 800a5ea:	693a      	ldr	r2, [r7, #16]
 800a5ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ee:	1ad2      	subs	r2, r2, r3
 800a5f0:	6a3b      	ldr	r3, [r7, #32]
 800a5f2:	1ad3      	subs	r3, r2, r3
 800a5f4:	089b      	lsrs	r3, r3, #2
 800a5f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a5f8:	429a      	cmp	r2, r3
 800a5fa:	d268      	bcs.n	800a6ce <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	63bb      	str	r3, [r7, #56]	; 0x38
 800a600:	e062      	b.n	800a6c8 <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 800a602:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a604:	6a3b      	ldr	r3, [r7, #32]
 800a606:	441a      	add	r2, r3
 800a608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a60a:	3301      	adds	r3, #1
 800a60c:	6979      	ldr	r1, [r7, #20]
 800a60e:	fb03 f101 	mul.w	r1, r3, r1
 800a612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a614:	005b      	lsls	r3, r3, #1
 800a616:	440b      	add	r3, r1
 800a618:	4413      	add	r3, r2
 800a61a:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 800a61c:	693a      	ldr	r2, [r7, #16]
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	441a      	add	r2, r3
 800a622:	4937      	ldr	r1, [pc, #220]	; (800a700 <I2C_Compute_SCLL_SCLH+0x204>)
 800a624:	683b      	ldr	r3, [r7, #0]
 800a626:	202c      	movs	r0, #44	; 0x2c
 800a628:	fb00 f303 	mul.w	r3, r0, r3
 800a62c:	440b      	add	r3, r1
 800a62e:	3320      	adds	r3, #32
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	441a      	add	r2, r3
 800a634:	4932      	ldr	r1, [pc, #200]	; (800a700 <I2C_Compute_SCLL_SCLH+0x204>)
 800a636:	683b      	ldr	r3, [r7, #0]
 800a638:	202c      	movs	r0, #44	; 0x2c
 800a63a:	fb00 f303 	mul.w	r3, r0, r3
 800a63e:	440b      	add	r3, r1
 800a640:	3324      	adds	r3, #36	; 0x24
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	4413      	add	r3, r2
 800a646:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 800a648:	68ba      	ldr	r2, [r7, #8]
 800a64a:	69bb      	ldr	r3, [r7, #24]
 800a64c:	429a      	cmp	r2, r3
 800a64e:	d338      	bcc.n	800a6c2 <I2C_Compute_SCLL_SCLH+0x1c6>
 800a650:	68ba      	ldr	r2, [r7, #8]
 800a652:	69fb      	ldr	r3, [r7, #28]
 800a654:	429a      	cmp	r2, r3
 800a656:	d834      	bhi.n	800a6c2 <I2C_Compute_SCLL_SCLH+0x1c6>
 800a658:	4a29      	ldr	r2, [pc, #164]	; (800a700 <I2C_Compute_SCLL_SCLH+0x204>)
 800a65a:	683b      	ldr	r3, [r7, #0]
 800a65c:	212c      	movs	r1, #44	; 0x2c
 800a65e:	fb01 f303 	mul.w	r3, r1, r3
 800a662:	4413      	add	r3, r2
 800a664:	331c      	adds	r3, #28
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	68fa      	ldr	r2, [r7, #12]
 800a66a:	429a      	cmp	r2, r3
 800a66c:	d329      	bcc.n	800a6c2 <I2C_Compute_SCLL_SCLH+0x1c6>
 800a66e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	429a      	cmp	r2, r3
 800a674:	d225      	bcs.n	800a6c2 <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
 800a676:	68ba      	ldr	r2, [r7, #8]
 800a678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a67a:	1ad3      	subs	r3, r2, r3
 800a67c:	633b      	str	r3, [r7, #48]	; 0x30

            if (error < 0)
 800a67e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a680:	2b00      	cmp	r3, #0
 800a682:	da02      	bge.n	800a68a <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
 800a684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a686:	425b      	negs	r3, r3
 800a688:	633b      	str	r3, [r7, #48]	; 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
 800a68a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a68c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a68e:	429a      	cmp	r2, r3
 800a690:	d917      	bls.n	800a6c2 <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
 800a692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a694:	643b      	str	r3, [r7, #64]	; 0x40
              I2c_valid_timing[count].scll = scll;
 800a696:	491b      	ldr	r1, [pc, #108]	; (800a704 <I2C_Compute_SCLL_SCLH+0x208>)
 800a698:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a69a:	4613      	mov	r3, r2
 800a69c:	009b      	lsls	r3, r3, #2
 800a69e:	4413      	add	r3, r2
 800a6a0:	009b      	lsls	r3, r3, #2
 800a6a2:	440b      	add	r3, r1
 800a6a4:	3310      	adds	r3, #16
 800a6a6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a6a8:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
 800a6aa:	4916      	ldr	r1, [pc, #88]	; (800a704 <I2C_Compute_SCLL_SCLH+0x208>)
 800a6ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a6ae:	4613      	mov	r3, r2
 800a6b0:	009b      	lsls	r3, r3, #2
 800a6b2:	4413      	add	r3, r2
 800a6b4:	009b      	lsls	r3, r3, #2
 800a6b6:	440b      	add	r3, r1
 800a6b8:	330c      	adds	r3, #12
 800a6ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a6bc:	601a      	str	r2, [r3, #0]
              ret = count;
 800a6be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6c0:	647b      	str	r3, [r7, #68]	; 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800a6c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6c4:	3301      	adds	r3, #1
 800a6c6:	63bb      	str	r3, [r7, #56]	; 0x38
 800a6c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6ca:	2bff      	cmp	r3, #255	; 0xff
 800a6cc:	d999      	bls.n	800a602 <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800a6ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a6d0:	3301      	adds	r3, #1
 800a6d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a6d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a6d6:	2bff      	cmp	r3, #255	; 0xff
 800a6d8:	f67f af6f 	bls.w	800a5ba <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800a6dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6de:	3301      	adds	r3, #1
 800a6e0:	637b      	str	r3, [r7, #52]	; 0x34
 800a6e2:	4b09      	ldr	r3, [pc, #36]	; (800a708 <I2C_Compute_SCLL_SCLH+0x20c>)
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a6e8:	429a      	cmp	r2, r3
 800a6ea:	f4ff af56 	bcc.w	800a59a <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
 800a6ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	374c      	adds	r7, #76	; 0x4c
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fa:	4770      	bx	lr
 800a6fc:	3b9aca00 	.word	0x3b9aca00
 800a700:	0802a344 	.word	0x0802a344
 800a704:	2400b228 	.word	0x2400b228
 800a708:	2400bc28 	.word	0x2400bc28

0800a70c <I2C4_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspInit(I2C_HandleTypeDef *phi2c)
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b08a      	sub	sp, #40	; 0x28
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 800a714:	4b31      	ldr	r3, [pc, #196]	; (800a7dc <I2C4_MspInit+0xd0>)
 800a716:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800a71a:	4a30      	ldr	r2, [pc, #192]	; (800a7dc <I2C4_MspInit+0xd0>)
 800a71c:	f043 0308 	orr.w	r3, r3, #8
 800a720:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800a724:	4b2d      	ldr	r3, [pc, #180]	; (800a7dc <I2C4_MspInit+0xd0>)
 800a726:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800a72a:	f003 0308 	and.w	r3, r3, #8
 800a72e:	613b      	str	r3, [r7, #16]
 800a730:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 800a732:	4b2a      	ldr	r3, [pc, #168]	; (800a7dc <I2C4_MspInit+0xd0>)
 800a734:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800a738:	4a28      	ldr	r2, [pc, #160]	; (800a7dc <I2C4_MspInit+0xd0>)
 800a73a:	f043 0308 	orr.w	r3, r3, #8
 800a73e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800a742:	4b26      	ldr	r3, [pc, #152]	; (800a7dc <I2C4_MspInit+0xd0>)
 800a744:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800a748:	f003 0308 	and.w	r3, r3, #8
 800a74c:	60fb      	str	r3, [r7, #12]
 800a74e:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 800a750:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a754:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 800a756:	2312      	movs	r3, #18
 800a758:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800a75a:	2300      	movs	r3, #0
 800a75c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed 	= GPIO_SPEED_FREQ_HIGH;
 800a75e:	2302      	movs	r3, #2
 800a760:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 800a762:	2304      	movs	r3, #4
 800a764:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 800a766:	f107 0314 	add.w	r3, r7, #20
 800a76a:	4619      	mov	r1, r3
 800a76c:	481c      	ldr	r0, [pc, #112]	; (800a7e0 <I2C4_MspInit+0xd4>)
 800a76e:	f001 fec9 	bl	800c504 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 800a772:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a776:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 800a778:	2312      	movs	r3, #18
 800a77a:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800a77c:	2300      	movs	r3, #0
 800a77e:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed 	= GPIO_SPEED_FREQ_HIGH;
 800a780:	2302      	movs	r3, #2
 800a782:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 800a784:	2304      	movs	r3, #4
 800a786:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 800a788:	f107 0314 	add.w	r3, r7, #20
 800a78c:	4619      	mov	r1, r3
 800a78e:	4814      	ldr	r0, [pc, #80]	; (800a7e0 <I2C4_MspInit+0xd4>)
 800a790:	f001 feb8 	bl	800c504 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C4_CLK_ENABLE();
 800a794:	4b11      	ldr	r3, [pc, #68]	; (800a7dc <I2C4_MspInit+0xd0>)
 800a796:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800a79a:	4a10      	ldr	r2, [pc, #64]	; (800a7dc <I2C4_MspInit+0xd0>)
 800a79c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a7a0:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 800a7a4:	4b0d      	ldr	r3, [pc, #52]	; (800a7dc <I2C4_MspInit+0xd0>)
 800a7a6:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800a7aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7ae:	60bb      	str	r3, [r7, #8]
 800a7b0:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C4_FORCE_RESET();
 800a7b2:	4b0a      	ldr	r3, [pc, #40]	; (800a7dc <I2C4_MspInit+0xd0>)
 800a7b4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a7b8:	4a08      	ldr	r2, [pc, #32]	; (800a7dc <I2C4_MspInit+0xd0>)
 800a7ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a7be:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

  /* Release the I2C peripheral clock reset */
  BUS_I2C4_RELEASE_RESET();
 800a7c2:	4b06      	ldr	r3, [pc, #24]	; (800a7dc <I2C4_MspInit+0xd0>)
 800a7c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a7c8:	4a04      	ldr	r2, [pc, #16]	; (800a7dc <I2C4_MspInit+0xd0>)
 800a7ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a7ce:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
}
 800a7d2:	bf00      	nop
 800a7d4:	3728      	adds	r7, #40	; 0x28
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	bd80      	pop	{r7, pc}
 800a7da:	bf00      	nop
 800a7dc:	58024400 	.word	0x58024400
 800a7e0:	58020c00 	.word	0x58020c00

0800a7e4 <I2C4_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspDeInit(I2C_HandleTypeDef *phi2c)
{
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	b088      	sub	sp, #32
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
 800a7ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a7f0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	4619      	mov	r1, r3
 800a7f6:	480b      	ldr	r0, [pc, #44]	; (800a824 <I2C4_MspDeInit+0x40>)
 800a7f8:	f002 f834 	bl	800c864 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
 800a7fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a800:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	4619      	mov	r1, r3
 800a806:	4807      	ldr	r0, [pc, #28]	; (800a824 <I2C4_MspDeInit+0x40>)
 800a808:	f002 f82c 	bl	800c864 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 800a80c:	4b06      	ldr	r3, [pc, #24]	; (800a828 <I2C4_MspDeInit+0x44>)
 800a80e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800a812:	4a05      	ldr	r2, [pc, #20]	; (800a828 <I2C4_MspDeInit+0x44>)
 800a814:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a818:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
}
 800a81c:	bf00      	nop
 800a81e:	3720      	adds	r7, #32
 800a820:	46bd      	mov	sp, r7
 800a822:	bd80      	pop	{r7, pc}
 800a824:	58020c00 	.word	0x58020c00
 800a828:	58024400 	.word	0x58024400

0800a82c <I2C4_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b088      	sub	sp, #32
 800a830:	af04      	add	r7, sp, #16
 800a832:	607b      	str	r3, [r7, #4]
 800a834:	4603      	mov	r3, r0
 800a836:	81fb      	strh	r3, [r7, #14]
 800a838:	460b      	mov	r3, r1
 800a83a:	81bb      	strh	r3, [r7, #12]
 800a83c:	4613      	mov	r3, r2
 800a83e:	817b      	strh	r3, [r7, #10]
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 800a840:	8978      	ldrh	r0, [r7, #10]
 800a842:	89ba      	ldrh	r2, [r7, #12]
 800a844:	89f9      	ldrh	r1, [r7, #14]
 800a846:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a84a:	9302      	str	r3, [sp, #8]
 800a84c:	8b3b      	ldrh	r3, [r7, #24]
 800a84e:	9301      	str	r3, [sp, #4]
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	9300      	str	r3, [sp, #0]
 800a854:	4603      	mov	r3, r0
 800a856:	4807      	ldr	r0, [pc, #28]	; (800a874 <I2C4_WriteReg+0x48>)
 800a858:	f002 fa3e 	bl	800ccd8 <HAL_I2C_Mem_Write>
 800a85c:	4603      	mov	r3, r0
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d101      	bne.n	800a866 <I2C4_WriteReg+0x3a>
  {
    return BSP_ERROR_NONE;
 800a862:	2300      	movs	r3, #0
 800a864:	e001      	b.n	800a86a <I2C4_WriteReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 800a866:	f06f 0307 	mvn.w	r3, #7
}
 800a86a:	4618      	mov	r0, r3
 800a86c:	3710      	adds	r7, #16
 800a86e:	46bd      	mov	sp, r7
 800a870:	bd80      	pop	{r7, pc}
 800a872:	bf00      	nop
 800a874:	2400bc2c 	.word	0x2400bc2c

0800a878 <I2C4_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	b088      	sub	sp, #32
 800a87c:	af04      	add	r7, sp, #16
 800a87e:	607b      	str	r3, [r7, #4]
 800a880:	4603      	mov	r3, r0
 800a882:	81fb      	strh	r3, [r7, #14]
 800a884:	460b      	mov	r3, r1
 800a886:	81bb      	strh	r3, [r7, #12]
 800a888:	4613      	mov	r3, r2
 800a88a:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 800a88c:	8978      	ldrh	r0, [r7, #10]
 800a88e:	89ba      	ldrh	r2, [r7, #12]
 800a890:	89f9      	ldrh	r1, [r7, #14]
 800a892:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a896:	9302      	str	r3, [sp, #8]
 800a898:	8b3b      	ldrh	r3, [r7, #24]
 800a89a:	9301      	str	r3, [sp, #4]
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	9300      	str	r3, [sp, #0]
 800a8a0:	4603      	mov	r3, r0
 800a8a2:	4807      	ldr	r0, [pc, #28]	; (800a8c0 <I2C4_ReadReg+0x48>)
 800a8a4:	f002 fb2c 	bl	800cf00 <HAL_I2C_Mem_Read>
 800a8a8:	4603      	mov	r3, r0
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d101      	bne.n	800a8b2 <I2C4_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	e001      	b.n	800a8b6 <I2C4_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 800a8b2:	f06f 0307 	mvn.w	r3, #7
}
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	3710      	adds	r7, #16
 800a8ba:	46bd      	mov	sp, r7
 800a8bc:	bd80      	pop	{r7, pc}
 800a8be:	bf00      	nop
 800a8c0:	2400bc2c 	.word	0x2400bc2c

0800a8c4 <BSP_OSPI_NOR_Init>:
  * @param  Instance   OSPI Instance
  * @param  Init       OSPI Init structure
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_Init(uint32_t Instance, BSP_OSPI_NOR_Init_t *Init)
{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b094      	sub	sp, #80	; 0x50
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
 800a8cc:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  BSP_OSPI_NOR_Info_t pInfo;
  MX_OSPI_Config ospi_config;

  /* Check if the instance is supported */
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d003      	beq.n	800a8e0 <BSP_OSPI_NOR_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800a8d8:	f06f 0301 	mvn.w	r3, #1
 800a8dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a8de:	e071      	b.n	800a9c4 <BSP_OSPI_NOR_Init+0x100>
  }
  else
  {
    /* Check if the instance is already initialized */
    if (Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_NONE)
 800a8e0:	4a3b      	ldr	r2, [pc, #236]	; (800a9d0 <BSP_OSPI_NOR_Init+0x10c>)
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d16b      	bne.n	800a9c4 <BSP_OSPI_NOR_Init+0x100>
    {
#if (USE_HAL_OSPI_REGISTER_CALLBACKS == 0)
      /* Msp OSPI initialization */
      OSPI_NOR_MspInit(&hospi_nor[Instance]);
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	225c      	movs	r2, #92	; 0x5c
 800a8f0:	fb02 f303 	mul.w	r3, r2, r3
 800a8f4:	4a37      	ldr	r2, [pc, #220]	; (800a9d4 <BSP_OSPI_NOR_Init+0x110>)
 800a8f6:	4413      	add	r3, r2
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	f000 fa09 	bl	800ad10 <OSPI_NOR_MspInit>
      if(ret == BSP_ERROR_NONE)
      {
#endif /* USE_HAL_OSPI_REGISTER_CALLBACKS */

        /* Get Flash informations of one memory */
        (void)MX25LM51245G_GetFlashInfo(&pInfo);
 800a8fe:	f107 031c 	add.w	r3, r7, #28
 800a902:	4618      	mov	r0, r3
 800a904:	f7fe fee8 	bl	80096d8 <MX25LM51245G_GetFlashInfo>

        /* Fill config structure */
        ospi_config.ClockPrescaler = 3U;
 800a908:	2303      	movs	r3, #3
 800a90a:	613b      	str	r3, [r7, #16]
        ospi_config.MemorySize     = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize);
 800a90c:	69fb      	ldr	r3, [r7, #28]
 800a90e:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a910:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a912:	fa93 f3a3 	rbit	r3, r3
 800a916:	643b      	str	r3, [r7, #64]	; 0x40
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800a918:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a91a:	64bb      	str	r3, [r7, #72]	; 0x48
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800a91c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d101      	bne.n	800a926 <BSP_OSPI_NOR_Init+0x62>
  {
    return 32U;
 800a922:	2320      	movs	r3, #32
 800a924:	e003      	b.n	800a92e <BSP_OSPI_NOR_Init+0x6a>
  }
  return __builtin_clz(value);
 800a926:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a928:	fab3 f383 	clz	r3, r3
 800a92c:	b2db      	uxtb	r3, r3
 800a92e:	60fb      	str	r3, [r7, #12]
        ospi_config.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 800a930:	2300      	movs	r3, #0
 800a932:	617b      	str	r3, [r7, #20]
        ospi_config.TransferRate   = (uint32_t)Init->TransferRate;
 800a934:	683b      	ldr	r3, [r7, #0]
 800a936:	785b      	ldrb	r3, [r3, #1]
 800a938:	61bb      	str	r3, [r7, #24]

        /* STM32 OSPI interface initialization */
        if (MX_OSPI_NOR_Init(&hospi_nor[Instance], &ospi_config) != HAL_OK)
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	225c      	movs	r2, #92	; 0x5c
 800a93e:	fb02 f303 	mul.w	r3, r2, r3
 800a942:	4a24      	ldr	r2, [pc, #144]	; (800a9d4 <BSP_OSPI_NOR_Init+0x110>)
 800a944:	4413      	add	r3, r2
 800a946:	f107 020c 	add.w	r2, r7, #12
 800a94a:	4611      	mov	r1, r2
 800a94c:	4618      	mov	r0, r3
 800a94e:	f000 f895 	bl	800aa7c <MX_OSPI_NOR_Init>
 800a952:	4603      	mov	r3, r0
 800a954:	2b00      	cmp	r3, #0
 800a956:	d003      	beq.n	800a960 <BSP_OSPI_NOR_Init+0x9c>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 800a958:	f06f 0303 	mvn.w	r3, #3
 800a95c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a95e:	e031      	b.n	800a9c4 <BSP_OSPI_NOR_Init+0x100>
        }
        /* OSPI memory reset */
        else if (OSPI_NOR_ResetMemory(Instance) != BSP_ERROR_NONE)
 800a960:	6878      	ldr	r0, [r7, #4]
 800a962:	f000 fb7f 	bl	800b064 <OSPI_NOR_ResetMemory>
 800a966:	4603      	mov	r3, r0
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d003      	beq.n	800a974 <BSP_OSPI_NOR_Init+0xb0>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800a96c:	f06f 0304 	mvn.w	r3, #4
 800a970:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a972:	e027      	b.n	800a9c4 <BSP_OSPI_NOR_Init+0x100>
        }
        /* Check if memory is ready */
        else if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	225c      	movs	r2, #92	; 0x5c
 800a978:	fb02 f303 	mul.w	r3, r2, r3
 800a97c:	4a15      	ldr	r2, [pc, #84]	; (800a9d4 <BSP_OSPI_NOR_Init+0x110>)
 800a97e:	1898      	adds	r0, r3, r2
 800a980:	4a13      	ldr	r2, [pc, #76]	; (800a9d0 <BSP_OSPI_NOR_Init+0x10c>)
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	00db      	lsls	r3, r3, #3
 800a986:	4413      	add	r3, r2
 800a988:	7859      	ldrb	r1, [r3, #1]
 800a98a:	4a11      	ldr	r2, [pc, #68]	; (800a9d0 <BSP_OSPI_NOR_Init+0x10c>)
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	00db      	lsls	r3, r3, #3
 800a990:	4413      	add	r3, r2
 800a992:	789b      	ldrb	r3, [r3, #2]
 800a994:	461a      	mov	r2, r3
 800a996:	f7fe fece 	bl	8009736 <MX25LM51245G_AutoPollingMemReady>
 800a99a:	4603      	mov	r3, r0
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d003      	beq.n	800a9a8 <BSP_OSPI_NOR_Init+0xe4>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800a9a0:	f06f 0304 	mvn.w	r3, #4
 800a9a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a9a6:	e00d      	b.n	800a9c4 <BSP_OSPI_NOR_Init+0x100>
        }
        else
        {
          /* Configure the memory */
          if (BSP_OSPI_NOR_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 800a9a8:	683b      	ldr	r3, [r7, #0]
 800a9aa:	7819      	ldrb	r1, [r3, #0]
 800a9ac:	683b      	ldr	r3, [r7, #0]
 800a9ae:	785b      	ldrb	r3, [r3, #1]
 800a9b0:	461a      	mov	r2, r3
 800a9b2:	6878      	ldr	r0, [r7, #4]
 800a9b4:	f000 f936 	bl	800ac24 <BSP_OSPI_NOR_ConfigFlash>
 800a9b8:	4603      	mov	r3, r0
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d002      	beq.n	800a9c4 <BSP_OSPI_NOR_Init+0x100>
          {
            ret = BSP_ERROR_COMPONENT_FAILURE;
 800a9be:	f06f 0304 	mvn.w	r3, #4
 800a9c2:	64fb      	str	r3, [r7, #76]	; 0x4c
#endif
    }
  }

  /* Return BSP status */
  return ret;
 800a9c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	3750      	adds	r7, #80	; 0x50
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	bd80      	pop	{r7, pc}
 800a9ce:	bf00      	nop
 800a9d0:	2400bcdc 	.word	0x2400bcdc
 800a9d4:	2400bc80 	.word	0x2400bc80

0800a9d8 <BSP_OSPI_NOR_DeInit>:
  * @brief  De-Initializes the OSPI interface.
  * @param  Instance   OSPI Instance
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_DeInit(uint32_t Instance)
{
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	b084      	sub	sp, #16
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d003      	beq.n	800a9f2 <BSP_OSPI_NOR_DeInit+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800a9ea:	f06f 0301 	mvn.w	r3, #1
 800a9ee:	60fb      	str	r3, [r7, #12]
 800a9f0:	e03a      	b.n	800aa68 <BSP_OSPI_NOR_DeInit+0x90>
  }
  else
  {
    /* Disable Memory mapped mode */
    if(Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_MMP)
 800a9f2:	4a20      	ldr	r2, [pc, #128]	; (800aa74 <BSP_OSPI_NOR_DeInit+0x9c>)
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800a9fa:	2b02      	cmp	r3, #2
 800a9fc:	d108      	bne.n	800aa10 <BSP_OSPI_NOR_DeInit+0x38>
    {
      if(BSP_OSPI_NOR_DisableMemoryMappedMode(Instance) != BSP_ERROR_NONE)
 800a9fe:	6878      	ldr	r0, [r7, #4]
 800aa00:	f000 f8da 	bl	800abb8 <BSP_OSPI_NOR_DisableMemoryMappedMode>
 800aa04:	4603      	mov	r3, r0
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d002      	beq.n	800aa10 <BSP_OSPI_NOR_DeInit+0x38>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800aa0a:	f06f 0304 	mvn.w	r3, #4
 800aa0e:	60fb      	str	r3, [r7, #12]
      }
    }

    if(ret == BSP_ERROR_NONE)
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d128      	bne.n	800aa68 <BSP_OSPI_NOR_DeInit+0x90>
    {
      /* Set default Ospi_Nor_Ctx values */
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_NONE;
 800aa16:	4a17      	ldr	r2, [pc, #92]	; (800aa74 <BSP_OSPI_NOR_DeInit+0x9c>)
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	2100      	movs	r1, #0
 800aa1c:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
      Ospi_Nor_Ctx[Instance].InterfaceMode = BSP_OSPI_NOR_SPI_MODE;
 800aa20:	4a14      	ldr	r2, [pc, #80]	; (800aa74 <BSP_OSPI_NOR_DeInit+0x9c>)
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	00db      	lsls	r3, r3, #3
 800aa26:	4413      	add	r3, r2
 800aa28:	2200      	movs	r2, #0
 800aa2a:	705a      	strb	r2, [r3, #1]
      Ospi_Nor_Ctx[Instance].TransferRate  = BSP_OSPI_NOR_STR_TRANSFER;
 800aa2c:	4a11      	ldr	r2, [pc, #68]	; (800aa74 <BSP_OSPI_NOR_DeInit+0x9c>)
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	00db      	lsls	r3, r3, #3
 800aa32:	4413      	add	r3, r2
 800aa34:	2200      	movs	r2, #0
 800aa36:	709a      	strb	r2, [r3, #2]

#if (USE_HAL_OSPI_REGISTER_CALLBACKS == 0)
      OSPI_NOR_MspDeInit(&hospi_nor[Instance]);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	225c      	movs	r2, #92	; 0x5c
 800aa3c:	fb02 f303 	mul.w	r3, r2, r3
 800aa40:	4a0d      	ldr	r2, [pc, #52]	; (800aa78 <BSP_OSPI_NOR_DeInit+0xa0>)
 800aa42:	4413      	add	r3, r2
 800aa44:	4618      	mov	r0, r3
 800aa46:	f000 fab3 	bl	800afb0 <OSPI_NOR_MspDeInit>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS == 0) */

      /* Call the DeInit function to reset the driver */
      if (HAL_OSPI_DeInit(&hospi_nor[Instance]) != HAL_OK)
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	225c      	movs	r2, #92	; 0x5c
 800aa4e:	fb02 f303 	mul.w	r3, r2, r3
 800aa52:	4a09      	ldr	r2, [pc, #36]	; (800aa78 <BSP_OSPI_NOR_DeInit+0xa0>)
 800aa54:	4413      	add	r3, r2
 800aa56:	4618      	mov	r0, r3
 800aa58:	f005 fe98 	bl	801078c <HAL_OSPI_DeInit>
 800aa5c:	4603      	mov	r3, r0
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d002      	beq.n	800aa68 <BSP_OSPI_NOR_DeInit+0x90>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 800aa62:	f06f 0303 	mvn.w	r3, #3
 800aa66:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Return BSP status */
  return ret;
 800aa68:	68fb      	ldr	r3, [r7, #12]
}
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	3710      	adds	r7, #16
 800aa6e:	46bd      	mov	sp, r7
 800aa70:	bd80      	pop	{r7, pc}
 800aa72:	bf00      	nop
 800aa74:	2400bcdc 	.word	0x2400bcdc
 800aa78:	2400bc80 	.word	0x2400bc80

0800aa7c <MX_OSPI_NOR_Init>:
  * @param  hospi          OSPI handle
  * @param  Config         OSPI config structure
  * @retval BSP status
  */
__weak HAL_StatusTypeDef MX_OSPI_NOR_Init(OSPI_HandleTypeDef *hospi, MX_OSPI_Config *Config)
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b082      	sub	sp, #8
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
 800aa84:	6039      	str	r1, [r7, #0]
    /* OctoSPI initialization */
  hospi->Instance = OCTOSPI1;
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	4a20      	ldr	r2, [pc, #128]	; (800ab0c <MX_OSPI_NOR_Init+0x90>)
 800aa8a:	601a      	str	r2, [r3, #0]

  hospi->Init.FifoThreshold      = 4;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	2204      	movs	r2, #4
 800aa90:	605a      	str	r2, [r3, #4]
  hospi->Init.DualQuad           = HAL_OSPI_DUALQUAD_DISABLE;
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	2200      	movs	r2, #0
 800aa96:	609a      	str	r2, [r3, #8]
  hospi->Init.DeviceSize         = Config->MemorySize; /* 512 MBits */
 800aa98:	683b      	ldr	r3, [r7, #0]
 800aa9a:	681a      	ldr	r2, [r3, #0]
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	611a      	str	r2, [r3, #16]
  hospi->Init.ChipSelectHighTime = 2;
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	2202      	movs	r2, #2
 800aaa4:	615a      	str	r2, [r3, #20]
  hospi->Init.FreeRunningClock   = HAL_OSPI_FREERUNCLK_DISABLE;
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	2200      	movs	r2, #0
 800aaaa:	619a      	str	r2, [r3, #24]
  hospi->Init.ClockMode          = HAL_OSPI_CLOCK_MODE_0;
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	2200      	movs	r2, #0
 800aab0:	61da      	str	r2, [r3, #28]
  hospi->Init.WrapSize           = HAL_OSPI_WRAP_NOT_SUPPORTED;
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	2200      	movs	r2, #0
 800aab6:	621a      	str	r2, [r3, #32]
  hospi->Init.ClockPrescaler     = Config->ClockPrescaler;
 800aab8:	683b      	ldr	r3, [r7, #0]
 800aaba:	685a      	ldr	r2, [r3, #4]
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	625a      	str	r2, [r3, #36]	; 0x24
  hospi->Init.SampleShifting     = Config->SampleShifting;
 800aac0:	683b      	ldr	r3, [r7, #0]
 800aac2:	689a      	ldr	r2, [r3, #8]
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	629a      	str	r2, [r3, #40]	; 0x28
  hospi->Init.ChipSelectBoundary = 0;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	2200      	movs	r2, #0
 800aacc:	631a      	str	r2, [r3, #48]	; 0x30
  hospi->Init.DelayBlockBypass   = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	2208      	movs	r2, #8
 800aad2:	635a      	str	r2, [r3, #52]	; 0x34

  if (Config->TransferRate == (uint32_t)BSP_OSPI_NOR_DTR_TRANSFER)
 800aad4:	683b      	ldr	r3, [r7, #0]
 800aad6:	68db      	ldr	r3, [r3, #12]
 800aad8:	2b01      	cmp	r3, #1
 800aada:	d108      	bne.n	800aaee <MX_OSPI_NOR_Init+0x72>
  {
    hospi->Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800aae2:	60da      	str	r2, [r3, #12]
    hospi->Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aaea:	62da      	str	r2, [r3, #44]	; 0x2c
 800aaec:	e005      	b.n	800aafa <MX_OSPI_NOR_Init+0x7e>
  }
  else
  {
    hospi->Init.MemoryType            = HAL_OSPI_MEMTYPE_MICRON;
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	60da      	str	r2, [r3, #12]
    hospi->Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  return HAL_OSPI_Init(hospi);
 800aafa:	6878      	ldr	r0, [r7, #4]
 800aafc:	f005 fd8a 	bl	8010614 <HAL_OSPI_Init>
 800ab00:	4603      	mov	r3, r0
}
 800ab02:	4618      	mov	r0, r3
 800ab04:	3708      	adds	r7, #8
 800ab06:	46bd      	mov	sp, r7
 800ab08:	bd80      	pop	{r7, pc}
 800ab0a:	bf00      	nop
 800ab0c:	52005000 	.word	0x52005000

0800ab10 <BSP_OSPI_NOR_EnableMemoryMappedMode>:
  * @brief  Configure the OSPI in memory-mapped mode
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_EnableMemoryMappedMode(uint32_t Instance)
{
 800ab10:	b580      	push	{r7, lr}
 800ab12:	b084      	sub	sp, #16
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800ab18:	2300      	movs	r3, #0
 800ab1a:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d003      	beq.n	800ab2a <BSP_OSPI_NOR_EnableMemoryMappedMode+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800ab22:	f06f 0301 	mvn.w	r3, #1
 800ab26:	60fb      	str	r3, [r7, #12]
 800ab28:	e03d      	b.n	800aba6 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x96>
  }
  else if(Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_STR_TRANSFER)
 800ab2a:	4a21      	ldr	r2, [pc, #132]	; (800abb0 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa0>)
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	00db      	lsls	r3, r3, #3
 800ab30:	4413      	add	r3, r2
 800ab32:	789b      	ldrb	r3, [r3, #2]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d11b      	bne.n	800ab70 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x60>
  {
    if(MX25LM51245G_EnableMemoryMappedModeSTR(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, MX25LM51245G_4BYTES_SIZE) != MX25LM51245G_OK)
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	225c      	movs	r2, #92	; 0x5c
 800ab3c:	fb02 f303 	mul.w	r3, r2, r3
 800ab40:	4a1c      	ldr	r2, [pc, #112]	; (800abb4 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa4>)
 800ab42:	1898      	adds	r0, r3, r2
 800ab44:	4a1a      	ldr	r2, [pc, #104]	; (800abb0 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa0>)
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	00db      	lsls	r3, r3, #3
 800ab4a:	4413      	add	r3, r2
 800ab4c:	785b      	ldrb	r3, [r3, #1]
 800ab4e:	2201      	movs	r2, #1
 800ab50:	4619      	mov	r1, r3
 800ab52:	f7fe fe9d 	bl	8009890 <MX25LM51245G_EnableMemoryMappedModeSTR>
 800ab56:	4603      	mov	r3, r0
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d003      	beq.n	800ab64 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x54>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800ab5c:	f06f 0304 	mvn.w	r3, #4
 800ab60:	60fb      	str	r3, [r7, #12]
 800ab62:	e020      	b.n	800aba6 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x96>
    }
    else /* Update OSPI context if all operations are well done */
    {
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_MMP;
 800ab64:	4a12      	ldr	r2, [pc, #72]	; (800abb0 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa0>)
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	2102      	movs	r1, #2
 800ab6a:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
 800ab6e:	e01a      	b.n	800aba6 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x96>
    }
  }
  else
  {
    if(MX25LM51245G_EnableMemoryMappedModeDTR(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode) != MX25LM51245G_OK)
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	225c      	movs	r2, #92	; 0x5c
 800ab74:	fb02 f303 	mul.w	r3, r2, r3
 800ab78:	4a0e      	ldr	r2, [pc, #56]	; (800abb4 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa4>)
 800ab7a:	441a      	add	r2, r3
 800ab7c:	490c      	ldr	r1, [pc, #48]	; (800abb0 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa0>)
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	00db      	lsls	r3, r3, #3
 800ab82:	440b      	add	r3, r1
 800ab84:	785b      	ldrb	r3, [r3, #1]
 800ab86:	4619      	mov	r1, r3
 800ab88:	4610      	mov	r0, r2
 800ab8a:	f7fe ff2b 	bl	80099e4 <MX25LM51245G_EnableMemoryMappedModeDTR>
 800ab8e:	4603      	mov	r3, r0
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d003      	beq.n	800ab9c <BSP_OSPI_NOR_EnableMemoryMappedMode+0x8c>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800ab94:	f06f 0304 	mvn.w	r3, #4
 800ab98:	60fb      	str	r3, [r7, #12]
 800ab9a:	e004      	b.n	800aba6 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x96>
    }
    else /* Update OSPI context if all operations are well done */
    {
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_MMP;
 800ab9c:	4a04      	ldr	r2, [pc, #16]	; (800abb0 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa0>)
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	2102      	movs	r1, #2
 800aba2:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
    }
  }

  /* Return BSP status */
  return ret;
 800aba6:	68fb      	ldr	r3, [r7, #12]
}
 800aba8:	4618      	mov	r0, r3
 800abaa:	3710      	adds	r7, #16
 800abac:	46bd      	mov	sp, r7
 800abae:	bd80      	pop	{r7, pc}
 800abb0:	2400bcdc 	.word	0x2400bcdc
 800abb4:	2400bc80 	.word	0x2400bc80

0800abb8 <BSP_OSPI_NOR_DisableMemoryMappedMode>:
  *         Only 1 Instance can running MMP mode. And it will lock system at this mode.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_DisableMemoryMappedMode(uint32_t Instance)
{
 800abb8:	b580      	push	{r7, lr}
 800abba:	b084      	sub	sp, #16
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800abc0:	2300      	movs	r3, #0
 800abc2:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d003      	beq.n	800abd2 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800abca:	f06f 0301 	mvn.w	r3, #1
 800abce:	60fb      	str	r3, [r7, #12]
 800abd0:	e01e      	b.n	800ac10 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x58>
  }
  else if(Ospi_Nor_Ctx[Instance].IsInitialized != OSPI_ACCESS_MMP)
 800abd2:	4a12      	ldr	r2, [pc, #72]	; (800ac1c <BSP_OSPI_NOR_DisableMemoryMappedMode+0x64>)
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800abda:	2b02      	cmp	r3, #2
 800abdc:	d003      	beq.n	800abe6 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x2e>
  {
    ret = BSP_ERROR_OSPI_MMP_UNLOCK_FAILURE;
 800abde:	f06f 031a 	mvn.w	r3, #26
 800abe2:	60fb      	str	r3, [r7, #12]
 800abe4:	e014      	b.n	800ac10 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x58>
  }/* Abort MMP back to indirect mode */
  else if(HAL_OSPI_Abort(&hospi_nor[Instance]) != HAL_OK)
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	225c      	movs	r2, #92	; 0x5c
 800abea:	fb02 f303 	mul.w	r3, r2, r3
 800abee:	4a0c      	ldr	r2, [pc, #48]	; (800ac20 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x68>)
 800abf0:	4413      	add	r3, r2
 800abf2:	4618      	mov	r0, r3
 800abf4:	f006 f9fc 	bl	8010ff0 <HAL_OSPI_Abort>
 800abf8:	4603      	mov	r3, r0
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d003      	beq.n	800ac06 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x4e>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 800abfe:	f06f 0303 	mvn.w	r3, #3
 800ac02:	60fb      	str	r3, [r7, #12]
 800ac04:	e004      	b.n	800ac10 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x58>
  }
  else
  {
    /* Update OSPI context if all operations are well done */
    Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;
 800ac06:	4a05      	ldr	r2, [pc, #20]	; (800ac1c <BSP_OSPI_NOR_DisableMemoryMappedMode+0x64>)
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	2101      	movs	r1, #1
 800ac0c:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
  }

  /* Return BSP status */
  return ret;
 800ac10:	68fb      	ldr	r3, [r7, #12]
}
 800ac12:	4618      	mov	r0, r3
 800ac14:	3710      	adds	r7, #16
 800ac16:	46bd      	mov	sp, r7
 800ac18:	bd80      	pop	{r7, pc}
 800ac1a:	bf00      	nop
 800ac1c:	2400bcdc 	.word	0x2400bcdc
 800ac20:	2400bc80 	.word	0x2400bc80

0800ac24 <BSP_OSPI_NOR_ConfigFlash>:
  * @param  Mode      OSPI mode
  * @param  Rate      OSPI transfer rate
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_ConfigFlash(uint32_t Instance, BSP_OSPI_NOR_Interface_t Mode, BSP_OSPI_NOR_Transfer_t Rate)
{
 800ac24:	b580      	push	{r7, lr}
 800ac26:	b084      	sub	sp, #16
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	6078      	str	r0, [r7, #4]
 800ac2c:	460b      	mov	r3, r1
 800ac2e:	70fb      	strb	r3, [r7, #3]
 800ac30:	4613      	mov	r3, r2
 800ac32:	70bb      	strb	r3, [r7, #2]
  int32_t ret = BSP_ERROR_NONE;
 800ac34:	2300      	movs	r3, #0
 800ac36:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d003      	beq.n	800ac46 <BSP_OSPI_NOR_ConfigFlash+0x22>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800ac3e:	f06f 0301 	mvn.w	r3, #1
 800ac42:	60fb      	str	r3, [r7, #12]
 800ac44:	e05d      	b.n	800ad02 <BSP_OSPI_NOR_ConfigFlash+0xde>
  }/* Check if MMP mode locked ************************************************/
  else if(Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_MMP)
 800ac46:	4a31      	ldr	r2, [pc, #196]	; (800ad0c <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800ac4e:	2b02      	cmp	r3, #2
 800ac50:	d103      	bne.n	800ac5a <BSP_OSPI_NOR_ConfigFlash+0x36>
  {
    ret = BSP_ERROR_OSPI_MMP_LOCK_FAILURE;
 800ac52:	f06f 0319 	mvn.w	r3, #25
 800ac56:	60fb      	str	r3, [r7, #12]
 800ac58:	e053      	b.n	800ad02 <BSP_OSPI_NOR_ConfigFlash+0xde>
  }
  else
  {
    /* Setup Flash interface ***************************************************/
    switch(Ospi_Nor_Ctx[Instance].InterfaceMode)
 800ac5a:	4a2c      	ldr	r2, [pc, #176]	; (800ad0c <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	00db      	lsls	r3, r3, #3
 800ac60:	4413      	add	r3, r2
 800ac62:	785b      	ldrb	r3, [r3, #1]
 800ac64:	2b01      	cmp	r3, #1
 800ac66:	d125      	bne.n	800acb4 <BSP_OSPI_NOR_ConfigFlash+0x90>
    {
    case BSP_OSPI_NOR_OPI_MODE :  /* 8-8-8 commands */
      if((Mode != BSP_OSPI_NOR_OPI_MODE) || (Rate != Ospi_Nor_Ctx[Instance].TransferRate))
 800ac68:	78fb      	ldrb	r3, [r7, #3]
 800ac6a:	2b01      	cmp	r3, #1
 800ac6c:	d107      	bne.n	800ac7e <BSP_OSPI_NOR_ConfigFlash+0x5a>
 800ac6e:	4a27      	ldr	r2, [pc, #156]	; (800ad0c <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	00db      	lsls	r3, r3, #3
 800ac74:	4413      	add	r3, r2
 800ac76:	789b      	ldrb	r3, [r3, #2]
 800ac78:	78ba      	ldrb	r2, [r7, #2]
 800ac7a:	429a      	cmp	r2, r3
 800ac7c:	d02a      	beq.n	800acd4 <BSP_OSPI_NOR_ConfigFlash+0xb0>
      {
        /* Exit OPI mode */
        ret = OSPI_NOR_ExitOPIMode(Instance);
 800ac7e:	6878      	ldr	r0, [r7, #4]
 800ac80:	f000 fbfc 	bl	800b47c <OSPI_NOR_ExitOPIMode>
 800ac84:	60f8      	str	r0, [r7, #12]

        if ((ret == BSP_ERROR_NONE) && (Mode == BSP_OSPI_NOR_OPI_MODE))
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d123      	bne.n	800acd4 <BSP_OSPI_NOR_ConfigFlash+0xb0>
 800ac8c:	78fb      	ldrb	r3, [r7, #3]
 800ac8e:	2b01      	cmp	r3, #1
 800ac90:	d120      	bne.n	800acd4 <BSP_OSPI_NOR_ConfigFlash+0xb0>
        {

          if (Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_STR_TRANSFER)
 800ac92:	4a1e      	ldr	r2, [pc, #120]	; (800ad0c <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	00db      	lsls	r3, r3, #3
 800ac98:	4413      	add	r3, r2
 800ac9a:	789b      	ldrb	r3, [r3, #2]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d104      	bne.n	800acaa <BSP_OSPI_NOR_ConfigFlash+0x86>
          {
            /* Enter DTR OPI mode */
            ret = OSPI_NOR_EnterDOPIMode(Instance);
 800aca0:	6878      	ldr	r0, [r7, #4]
 800aca2:	f000 fa6f 	bl	800b184 <OSPI_NOR_EnterDOPIMode>
 800aca6:	60f8      	str	r0, [r7, #12]
            /* Enter STR OPI mode */
            ret = OSPI_NOR_EnterSOPIMode(Instance);
          }
        }
      }
      break;
 800aca8:	e014      	b.n	800acd4 <BSP_OSPI_NOR_ConfigFlash+0xb0>
            ret = OSPI_NOR_EnterSOPIMode(Instance);
 800acaa:	6878      	ldr	r0, [r7, #4]
 800acac:	f000 fb3a 	bl	800b324 <OSPI_NOR_EnterSOPIMode>
 800acb0:	60f8      	str	r0, [r7, #12]
      break;
 800acb2:	e00f      	b.n	800acd4 <BSP_OSPI_NOR_ConfigFlash+0xb0>

    case BSP_OSPI_NOR_SPI_MODE :  /* 1-1-1 commands, Power on H/W default setting */
    default :
      if(Mode == BSP_OSPI_NOR_OPI_MODE)
 800acb4:	78fb      	ldrb	r3, [r7, #3]
 800acb6:	2b01      	cmp	r3, #1
 800acb8:	d10e      	bne.n	800acd8 <BSP_OSPI_NOR_ConfigFlash+0xb4>
      {
        if(Rate == BSP_OSPI_NOR_STR_TRANSFER)
 800acba:	78bb      	ldrb	r3, [r7, #2]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d104      	bne.n	800acca <BSP_OSPI_NOR_ConfigFlash+0xa6>
        {
          /* Enter STR OPI mode */
          ret = OSPI_NOR_EnterSOPIMode(Instance);
 800acc0:	6878      	ldr	r0, [r7, #4]
 800acc2:	f000 fb2f 	bl	800b324 <OSPI_NOR_EnterSOPIMode>
 800acc6:	60f8      	str	r0, [r7, #12]
        {
          /* Enter DTR OPI mode */
          ret = OSPI_NOR_EnterDOPIMode(Instance);
        }
      }
      break;
 800acc8:	e006      	b.n	800acd8 <BSP_OSPI_NOR_ConfigFlash+0xb4>
          ret = OSPI_NOR_EnterDOPIMode(Instance);
 800acca:	6878      	ldr	r0, [r7, #4]
 800accc:	f000 fa5a 	bl	800b184 <OSPI_NOR_EnterDOPIMode>
 800acd0:	60f8      	str	r0, [r7, #12]
      break;
 800acd2:	e001      	b.n	800acd8 <BSP_OSPI_NOR_ConfigFlash+0xb4>
      break;
 800acd4:	bf00      	nop
 800acd6:	e000      	b.n	800acda <BSP_OSPI_NOR_ConfigFlash+0xb6>
      break;
 800acd8:	bf00      	nop
    }

    /* Update OSPI context if all operations are well done */
    if(ret == BSP_ERROR_NONE)
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d110      	bne.n	800ad02 <BSP_OSPI_NOR_ConfigFlash+0xde>
    {
      /* Update current status parameter *****************************************/
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;
 800ace0:	4a0a      	ldr	r2, [pc, #40]	; (800ad0c <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	2101      	movs	r1, #1
 800ace6:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
      Ospi_Nor_Ctx[Instance].InterfaceMode = Mode;
 800acea:	4a08      	ldr	r2, [pc, #32]	; (800ad0c <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	00db      	lsls	r3, r3, #3
 800acf0:	4413      	add	r3, r2
 800acf2:	78fa      	ldrb	r2, [r7, #3]
 800acf4:	705a      	strb	r2, [r3, #1]
      Ospi_Nor_Ctx[Instance].TransferRate  = Rate;
 800acf6:	4a05      	ldr	r2, [pc, #20]	; (800ad0c <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	00db      	lsls	r3, r3, #3
 800acfc:	4413      	add	r3, r2
 800acfe:	78ba      	ldrb	r2, [r7, #2]
 800ad00:	709a      	strb	r2, [r3, #2]
    }
  }

  /* Return BSP status */
  return ret;
 800ad02:	68fb      	ldr	r3, [r7, #12]
}
 800ad04:	4618      	mov	r0, r3
 800ad06:	3710      	adds	r7, #16
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	bd80      	pop	{r7, pc}
 800ad0c:	2400bcdc 	.word	0x2400bcdc

0800ad10 <OSPI_NOR_MspInit>:
  * @brief  Initializes the OSPI MSP.
  * @param  hospi OSPI handle
  * @retval None
  */
static void OSPI_NOR_MspInit(OSPI_HandleTypeDef *hospi)
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b094      	sub	sp, #80	; 0x50
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]

  /* hospi unused argument(s) compilation warning */
  UNUSED(hospi);

  /* Enable the OctoSPI memory interface clock */
  OSPI_CLK_ENABLE();
 800ad18:	4b9e      	ldr	r3, [pc, #632]	; (800af94 <OSPI_NOR_MspInit+0x284>)
 800ad1a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800ad1e:	4a9d      	ldr	r2, [pc, #628]	; (800af94 <OSPI_NOR_MspInit+0x284>)
 800ad20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ad24:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 800ad28:	4b9a      	ldr	r3, [pc, #616]	; (800af94 <OSPI_NOR_MspInit+0x284>)
 800ad2a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800ad2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ad32:	63bb      	str	r3, [r7, #56]	; 0x38
 800ad34:	6bbb      	ldr	r3, [r7, #56]	; 0x38

  /* Reset the OctoSPI memory interface */
  OSPI_FORCE_RESET();
 800ad36:	4b97      	ldr	r3, [pc, #604]	; (800af94 <OSPI_NOR_MspInit+0x284>)
 800ad38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ad3a:	4a96      	ldr	r2, [pc, #600]	; (800af94 <OSPI_NOR_MspInit+0x284>)
 800ad3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ad40:	67d3      	str	r3, [r2, #124]	; 0x7c
  OSPI_RELEASE_RESET();
 800ad42:	4b94      	ldr	r3, [pc, #592]	; (800af94 <OSPI_NOR_MspInit+0x284>)
 800ad44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ad46:	4a93      	ldr	r2, [pc, #588]	; (800af94 <OSPI_NOR_MspInit+0x284>)
 800ad48:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ad4c:	67d3      	str	r3, [r2, #124]	; 0x7c

  /* Enable GPIO clocks */
  OSPI_CLK_GPIO_CLK_ENABLE();
 800ad4e:	4b91      	ldr	r3, [pc, #580]	; (800af94 <OSPI_NOR_MspInit+0x284>)
 800ad50:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800ad54:	4a8f      	ldr	r2, [pc, #572]	; (800af94 <OSPI_NOR_MspInit+0x284>)
 800ad56:	f043 0302 	orr.w	r3, r3, #2
 800ad5a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800ad5e:	4b8d      	ldr	r3, [pc, #564]	; (800af94 <OSPI_NOR_MspInit+0x284>)
 800ad60:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800ad64:	f003 0302 	and.w	r3, r3, #2
 800ad68:	637b      	str	r3, [r7, #52]	; 0x34
 800ad6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  OSPI_DQS_GPIO_CLK_ENABLE();
 800ad6c:	4b89      	ldr	r3, [pc, #548]	; (800af94 <OSPI_NOR_MspInit+0x284>)
 800ad6e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800ad72:	4a88      	ldr	r2, [pc, #544]	; (800af94 <OSPI_NOR_MspInit+0x284>)
 800ad74:	f043 0304 	orr.w	r3, r3, #4
 800ad78:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800ad7c:	4b85      	ldr	r3, [pc, #532]	; (800af94 <OSPI_NOR_MspInit+0x284>)
 800ad7e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800ad82:	f003 0304 	and.w	r3, r3, #4
 800ad86:	633b      	str	r3, [r7, #48]	; 0x30
 800ad88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  OSPI_CS_GPIO_CLK_ENABLE();
 800ad8a:	4b82      	ldr	r3, [pc, #520]	; (800af94 <OSPI_NOR_MspInit+0x284>)
 800ad8c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800ad90:	4a80      	ldr	r2, [pc, #512]	; (800af94 <OSPI_NOR_MspInit+0x284>)
 800ad92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad96:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800ad9a:	4b7e      	ldr	r3, [pc, #504]	; (800af94 <OSPI_NOR_MspInit+0x284>)
 800ad9c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800ada0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ada4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ada6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  OSPI_D0_GPIO_CLK_ENABLE();
 800ada8:	4b7a      	ldr	r3, [pc, #488]	; (800af94 <OSPI_NOR_MspInit+0x284>)
 800adaa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800adae:	4a79      	ldr	r2, [pc, #484]	; (800af94 <OSPI_NOR_MspInit+0x284>)
 800adb0:	f043 0308 	orr.w	r3, r3, #8
 800adb4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800adb8:	4b76      	ldr	r3, [pc, #472]	; (800af94 <OSPI_NOR_MspInit+0x284>)
 800adba:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800adbe:	f003 0308 	and.w	r3, r3, #8
 800adc2:	62bb      	str	r3, [r7, #40]	; 0x28
 800adc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
  OSPI_D1_GPIO_CLK_ENABLE();
 800adc6:	4b73      	ldr	r3, [pc, #460]	; (800af94 <OSPI_NOR_MspInit+0x284>)
 800adc8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800adcc:	4a71      	ldr	r2, [pc, #452]	; (800af94 <OSPI_NOR_MspInit+0x284>)
 800adce:	f043 0320 	orr.w	r3, r3, #32
 800add2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800add6:	4b6f      	ldr	r3, [pc, #444]	; (800af94 <OSPI_NOR_MspInit+0x284>)
 800add8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800addc:	f003 0320 	and.w	r3, r3, #32
 800ade0:	627b      	str	r3, [r7, #36]	; 0x24
 800ade2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  OSPI_D2_GPIO_CLK_ENABLE();
 800ade4:	4b6b      	ldr	r3, [pc, #428]	; (800af94 <OSPI_NOR_MspInit+0x284>)
 800ade6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800adea:	4a6a      	ldr	r2, [pc, #424]	; (800af94 <OSPI_NOR_MspInit+0x284>)
 800adec:	f043 0320 	orr.w	r3, r3, #32
 800adf0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800adf4:	4b67      	ldr	r3, [pc, #412]	; (800af94 <OSPI_NOR_MspInit+0x284>)
 800adf6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800adfa:	f003 0320 	and.w	r3, r3, #32
 800adfe:	623b      	str	r3, [r7, #32]
 800ae00:	6a3b      	ldr	r3, [r7, #32]
  OSPI_D3_GPIO_CLK_ENABLE();
 800ae02:	4b64      	ldr	r3, [pc, #400]	; (800af94 <OSPI_NOR_MspInit+0x284>)
 800ae04:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800ae08:	4a62      	ldr	r2, [pc, #392]	; (800af94 <OSPI_NOR_MspInit+0x284>)
 800ae0a:	f043 0320 	orr.w	r3, r3, #32
 800ae0e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800ae12:	4b60      	ldr	r3, [pc, #384]	; (800af94 <OSPI_NOR_MspInit+0x284>)
 800ae14:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800ae18:	f003 0320 	and.w	r3, r3, #32
 800ae1c:	61fb      	str	r3, [r7, #28]
 800ae1e:	69fb      	ldr	r3, [r7, #28]
  OSPI_D4_GPIO_CLK_ENABLE();
 800ae20:	4b5c      	ldr	r3, [pc, #368]	; (800af94 <OSPI_NOR_MspInit+0x284>)
 800ae22:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800ae26:	4a5b      	ldr	r2, [pc, #364]	; (800af94 <OSPI_NOR_MspInit+0x284>)
 800ae28:	f043 0304 	orr.w	r3, r3, #4
 800ae2c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800ae30:	4b58      	ldr	r3, [pc, #352]	; (800af94 <OSPI_NOR_MspInit+0x284>)
 800ae32:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800ae36:	f003 0304 	and.w	r3, r3, #4
 800ae3a:	61bb      	str	r3, [r7, #24]
 800ae3c:	69bb      	ldr	r3, [r7, #24]
  OSPI_D5_GPIO_CLK_ENABLE();
 800ae3e:	4b55      	ldr	r3, [pc, #340]	; (800af94 <OSPI_NOR_MspInit+0x284>)
 800ae40:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800ae44:	4a53      	ldr	r2, [pc, #332]	; (800af94 <OSPI_NOR_MspInit+0x284>)
 800ae46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae4a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800ae4e:	4b51      	ldr	r3, [pc, #324]	; (800af94 <OSPI_NOR_MspInit+0x284>)
 800ae50:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800ae54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae58:	617b      	str	r3, [r7, #20]
 800ae5a:	697b      	ldr	r3, [r7, #20]
  OSPI_D6_GPIO_CLK_ENABLE();
 800ae5c:	4b4d      	ldr	r3, [pc, #308]	; (800af94 <OSPI_NOR_MspInit+0x284>)
 800ae5e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800ae62:	4a4c      	ldr	r2, [pc, #304]	; (800af94 <OSPI_NOR_MspInit+0x284>)
 800ae64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae68:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800ae6c:	4b49      	ldr	r3, [pc, #292]	; (800af94 <OSPI_NOR_MspInit+0x284>)
 800ae6e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800ae72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae76:	613b      	str	r3, [r7, #16]
 800ae78:	693b      	ldr	r3, [r7, #16]
  OSPI_D7_GPIO_CLK_ENABLE();
 800ae7a:	4b46      	ldr	r3, [pc, #280]	; (800af94 <OSPI_NOR_MspInit+0x284>)
 800ae7c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800ae80:	4a44      	ldr	r2, [pc, #272]	; (800af94 <OSPI_NOR_MspInit+0x284>)
 800ae82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae86:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800ae8a:	4b42      	ldr	r3, [pc, #264]	; (800af94 <OSPI_NOR_MspInit+0x284>)
 800ae8c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800ae90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae94:	60fb      	str	r3, [r7, #12]
 800ae96:	68fb      	ldr	r3, [r7, #12]

  /* OctoSPI CS GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_CS_PIN;
 800ae98:	2340      	movs	r3, #64	; 0x40
 800ae9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 800ae9c:	2302      	movs	r3, #2
 800ae9e:	643b      	str	r3, [r7, #64]	; 0x40
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 800aea0:	2301      	movs	r3, #1
 800aea2:	647b      	str	r3, [r7, #68]	; 0x44
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800aea4:	2303      	movs	r3, #3
 800aea6:	64bb      	str	r3, [r7, #72]	; 0x48
  GPIO_InitStruct.Alternate = OSPI_CS_PIN_AF;
 800aea8:	230a      	movs	r3, #10
 800aeaa:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_CS_GPIO_PORT, &GPIO_InitStruct);
 800aeac:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800aeb0:	4619      	mov	r1, r3
 800aeb2:	4839      	ldr	r0, [pc, #228]	; (800af98 <OSPI_NOR_MspInit+0x288>)
 800aeb4:	f001 fb26 	bl	800c504 <HAL_GPIO_Init>

  /* OctoSPI DQS GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_DQS_PIN;
 800aeb8:	2320      	movs	r3, #32
 800aeba:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_DQS_PIN_AF;
 800aebc:	230a      	movs	r3, #10
 800aebe:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_DQS_GPIO_PORT, &GPIO_InitStruct);
 800aec0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800aec4:	4619      	mov	r1, r3
 800aec6:	4835      	ldr	r0, [pc, #212]	; (800af9c <OSPI_NOR_MspInit+0x28c>)
 800aec8:	f001 fb1c 	bl	800c504 <HAL_GPIO_Init>

  /* OctoSPI CLK GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_CLK_PIN;
 800aecc:	2304      	movs	r3, #4
 800aece:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 800aed0:	2300      	movs	r3, #0
 800aed2:	647b      	str	r3, [r7, #68]	; 0x44
  GPIO_InitStruct.Alternate = OSPI_CLK_PIN_AF;
 800aed4:	2309      	movs	r3, #9
 800aed6:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_CLK_GPIO_PORT, &GPIO_InitStruct);
 800aed8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800aedc:	4619      	mov	r1, r3
 800aede:	4830      	ldr	r0, [pc, #192]	; (800afa0 <OSPI_NOR_MspInit+0x290>)
 800aee0:	f001 fb10 	bl	800c504 <HAL_GPIO_Init>

  /* OctoSPI D0 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D0_PIN;
 800aee4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800aee8:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D0_PIN_AF;
 800aeea:	2309      	movs	r3, #9
 800aeec:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D0_GPIO_PORT, &GPIO_InitStruct);
 800aeee:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800aef2:	4619      	mov	r1, r3
 800aef4:	482b      	ldr	r0, [pc, #172]	; (800afa4 <OSPI_NOR_MspInit+0x294>)
 800aef6:	f001 fb05 	bl	800c504 <HAL_GPIO_Init>

  /* OctoSPI D1 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D1_PIN;
 800aefa:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aefe:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D1_PIN_AF;
 800af00:	230a      	movs	r3, #10
 800af02:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D1_GPIO_PORT, &GPIO_InitStruct);
 800af04:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800af08:	4619      	mov	r1, r3
 800af0a:	4827      	ldr	r0, [pc, #156]	; (800afa8 <OSPI_NOR_MspInit+0x298>)
 800af0c:	f001 fafa 	bl	800c504 <HAL_GPIO_Init>

  /* OctoSPI D2 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D2_PIN;
 800af10:	2380      	movs	r3, #128	; 0x80
 800af12:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D2_PIN_AF;
 800af14:	230a      	movs	r3, #10
 800af16:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D2_GPIO_PORT, &GPIO_InitStruct);
 800af18:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800af1c:	4619      	mov	r1, r3
 800af1e:	4822      	ldr	r0, [pc, #136]	; (800afa8 <OSPI_NOR_MspInit+0x298>)
 800af20:	f001 faf0 	bl	800c504 <HAL_GPIO_Init>

  /* OctoSPI D3 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D3_PIN;
 800af24:	2340      	movs	r3, #64	; 0x40
 800af26:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D3_PIN_AF;
 800af28:	230a      	movs	r3, #10
 800af2a:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D3_GPIO_PORT, &GPIO_InitStruct);
 800af2c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800af30:	4619      	mov	r1, r3
 800af32:	481d      	ldr	r0, [pc, #116]	; (800afa8 <OSPI_NOR_MspInit+0x298>)
 800af34:	f001 fae6 	bl	800c504 <HAL_GPIO_Init>

  /* OctoSPI D4 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D4_PIN;
 800af38:	2302      	movs	r3, #2
 800af3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D4_PIN_AF;
 800af3c:	230a      	movs	r3, #10
 800af3e:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D4_GPIO_PORT, &GPIO_InitStruct);
 800af40:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800af44:	4619      	mov	r1, r3
 800af46:	4815      	ldr	r0, [pc, #84]	; (800af9c <OSPI_NOR_MspInit+0x28c>)
 800af48:	f001 fadc 	bl	800c504 <HAL_GPIO_Init>

  /* OctoSPI D5 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D5_PIN;
 800af4c:	2308      	movs	r3, #8
 800af4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D5_PIN_AF;
 800af50:	2309      	movs	r3, #9
 800af52:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D5_GPIO_PORT, &GPIO_InitStruct);
 800af54:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800af58:	4619      	mov	r1, r3
 800af5a:	4814      	ldr	r0, [pc, #80]	; (800afac <OSPI_NOR_MspInit+0x29c>)
 800af5c:	f001 fad2 	bl	800c504 <HAL_GPIO_Init>

  /* OctoSPI D6 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D6_PIN;
 800af60:	f44f 7300 	mov.w	r3, #512	; 0x200
 800af64:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D6_PIN_AF;
 800af66:	2309      	movs	r3, #9
 800af68:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D6_GPIO_PORT, &GPIO_InitStruct);
 800af6a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800af6e:	4619      	mov	r1, r3
 800af70:	4809      	ldr	r0, [pc, #36]	; (800af98 <OSPI_NOR_MspInit+0x288>)
 800af72:	f001 fac7 	bl	800c504 <HAL_GPIO_Init>

  /* OctoSPI D7 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D7_PIN;
 800af76:	2380      	movs	r3, #128	; 0x80
 800af78:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D7_PIN_AF;
 800af7a:	230a      	movs	r3, #10
 800af7c:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D7_GPIO_PORT, &GPIO_InitStruct);
 800af7e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800af82:	4619      	mov	r1, r3
 800af84:	4807      	ldr	r0, [pc, #28]	; (800afa4 <OSPI_NOR_MspInit+0x294>)
 800af86:	f001 fabd 	bl	800c504 <HAL_GPIO_Init>
}
 800af8a:	bf00      	nop
 800af8c:	3750      	adds	r7, #80	; 0x50
 800af8e:	46bd      	mov	sp, r7
 800af90:	bd80      	pop	{r7, pc}
 800af92:	bf00      	nop
 800af94:	58024400 	.word	0x58024400
 800af98:	58021800 	.word	0x58021800
 800af9c:	58020800 	.word	0x58020800
 800afa0:	58020400 	.word	0x58020400
 800afa4:	58020c00 	.word	0x58020c00
 800afa8:	58021400 	.word	0x58021400
 800afac:	58021c00 	.word	0x58021c00

0800afb0 <OSPI_NOR_MspDeInit>:
  * @brief  De-Initializes the OSPI MSP.
  * @param  hospi OSPI handle
  * @retval None
  */
static void OSPI_NOR_MspDeInit(OSPI_HandleTypeDef *hospi)
{
 800afb0:	b580      	push	{r7, lr}
 800afb2:	b082      	sub	sp, #8
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	6078      	str	r0, [r7, #4]
  /* hospi unused argument(s) compilation warning */
  UNUSED(hospi);

  /* OctoSPI GPIO pins de-configuration  */
  HAL_GPIO_DeInit(OSPI_CLK_GPIO_PORT, OSPI_CLK_PIN);
 800afb8:	2104      	movs	r1, #4
 800afba:	4823      	ldr	r0, [pc, #140]	; (800b048 <OSPI_NOR_MspDeInit+0x98>)
 800afbc:	f001 fc52 	bl	800c864 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_DQS_GPIO_PORT, OSPI_DQS_PIN);
 800afc0:	2120      	movs	r1, #32
 800afc2:	4822      	ldr	r0, [pc, #136]	; (800b04c <OSPI_NOR_MspDeInit+0x9c>)
 800afc4:	f001 fc4e 	bl	800c864 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_CS_GPIO_PORT, OSPI_CS_PIN);
 800afc8:	2140      	movs	r1, #64	; 0x40
 800afca:	4821      	ldr	r0, [pc, #132]	; (800b050 <OSPI_NOR_MspDeInit+0xa0>)
 800afcc:	f001 fc4a 	bl	800c864 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D0_GPIO_PORT, OSPI_D0_PIN);
 800afd0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800afd4:	481f      	ldr	r0, [pc, #124]	; (800b054 <OSPI_NOR_MspDeInit+0xa4>)
 800afd6:	f001 fc45 	bl	800c864 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D1_GPIO_PORT, OSPI_D1_PIN);
 800afda:	f44f 7100 	mov.w	r1, #512	; 0x200
 800afde:	481e      	ldr	r0, [pc, #120]	; (800b058 <OSPI_NOR_MspDeInit+0xa8>)
 800afe0:	f001 fc40 	bl	800c864 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D2_GPIO_PORT, OSPI_D2_PIN);
 800afe4:	2180      	movs	r1, #128	; 0x80
 800afe6:	481c      	ldr	r0, [pc, #112]	; (800b058 <OSPI_NOR_MspDeInit+0xa8>)
 800afe8:	f001 fc3c 	bl	800c864 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D3_GPIO_PORT, OSPI_D3_PIN);
 800afec:	2140      	movs	r1, #64	; 0x40
 800afee:	481a      	ldr	r0, [pc, #104]	; (800b058 <OSPI_NOR_MspDeInit+0xa8>)
 800aff0:	f001 fc38 	bl	800c864 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D4_GPIO_PORT, OSPI_D4_PIN);
 800aff4:	2102      	movs	r1, #2
 800aff6:	4815      	ldr	r0, [pc, #84]	; (800b04c <OSPI_NOR_MspDeInit+0x9c>)
 800aff8:	f001 fc34 	bl	800c864 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D5_GPIO_PORT, OSPI_D5_PIN);
 800affc:	2108      	movs	r1, #8
 800affe:	4817      	ldr	r0, [pc, #92]	; (800b05c <OSPI_NOR_MspDeInit+0xac>)
 800b000:	f001 fc30 	bl	800c864 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D6_GPIO_PORT, OSPI_D6_PIN);
 800b004:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b008:	4811      	ldr	r0, [pc, #68]	; (800b050 <OSPI_NOR_MspDeInit+0xa0>)
 800b00a:	f001 fc2b 	bl	800c864 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D7_GPIO_PORT, OSPI_D7_PIN);
 800b00e:	2180      	movs	r1, #128	; 0x80
 800b010:	4810      	ldr	r0, [pc, #64]	; (800b054 <OSPI_NOR_MspDeInit+0xa4>)
 800b012:	f001 fc27 	bl	800c864 <HAL_GPIO_DeInit>

  /* Reset the OctoSPI memory interface */
  OSPI_FORCE_RESET();
 800b016:	4b12      	ldr	r3, [pc, #72]	; (800b060 <OSPI_NOR_MspDeInit+0xb0>)
 800b018:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b01a:	4a11      	ldr	r2, [pc, #68]	; (800b060 <OSPI_NOR_MspDeInit+0xb0>)
 800b01c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b020:	67d3      	str	r3, [r2, #124]	; 0x7c
  OSPI_RELEASE_RESET();
 800b022:	4b0f      	ldr	r3, [pc, #60]	; (800b060 <OSPI_NOR_MspDeInit+0xb0>)
 800b024:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b026:	4a0e      	ldr	r2, [pc, #56]	; (800b060 <OSPI_NOR_MspDeInit+0xb0>)
 800b028:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b02c:	67d3      	str	r3, [r2, #124]	; 0x7c

  /* Disable the OctoSPI memory interface clock */
  OSPI_CLK_DISABLE();
 800b02e:	4b0c      	ldr	r3, [pc, #48]	; (800b060 <OSPI_NOR_MspDeInit+0xb0>)
 800b030:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800b034:	4a0a      	ldr	r2, [pc, #40]	; (800b060 <OSPI_NOR_MspDeInit+0xb0>)
 800b036:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b03a:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
}
 800b03e:	bf00      	nop
 800b040:	3708      	adds	r7, #8
 800b042:	46bd      	mov	sp, r7
 800b044:	bd80      	pop	{r7, pc}
 800b046:	bf00      	nop
 800b048:	58020400 	.word	0x58020400
 800b04c:	58020800 	.word	0x58020800
 800b050:	58021800 	.word	0x58021800
 800b054:	58020c00 	.word	0x58020c00
 800b058:	58021400 	.word	0x58021400
 800b05c:	58021c00 	.word	0x58021c00
 800b060:	58024400 	.word	0x58024400

0800b064 <OSPI_NOR_ResetMemory>:
  * @brief  This function reset the OSPI memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_ResetMemory (uint32_t Instance)
{
 800b064:	b580      	push	{r7, lr}
 800b066:	b084      	sub	sp, #16
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800b06c:	2300      	movs	r3, #0
 800b06e:	60fb      	str	r3, [r7, #12]

  /* Enable write operations */
  if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	225c      	movs	r2, #92	; 0x5c
 800b074:	fb02 f303 	mul.w	r3, r2, r3
 800b078:	4a40      	ldr	r2, [pc, #256]	; (800b17c <OSPI_NOR_ResetMemory+0x118>)
 800b07a:	4413      	add	r3, r2
 800b07c:	2200      	movs	r2, #0
 800b07e:	2100      	movs	r1, #0
 800b080:	4618      	mov	r0, r3
 800b082:	f7fe ff18 	bl	8009eb6 <MX25LM51245G_ResetEnable>
 800b086:	4603      	mov	r3, r0
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d003      	beq.n	800b094 <OSPI_NOR_ResetMemory+0x30>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800b08c:	f06f 0304 	mvn.w	r3, #4
 800b090:	60fb      	str	r3, [r7, #12]
 800b092:	e06d      	b.n	800b170 <OSPI_NOR_ResetMemory+0x10c>
  }
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	225c      	movs	r2, #92	; 0x5c
 800b098:	fb02 f303 	mul.w	r3, r2, r3
 800b09c:	4a37      	ldr	r2, [pc, #220]	; (800b17c <OSPI_NOR_ResetMemory+0x118>)
 800b09e:	4413      	add	r3, r2
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	2100      	movs	r1, #0
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	f7fe ff5e 	bl	8009f66 <MX25LM51245G_ResetMemory>
 800b0aa:	4603      	mov	r3, r0
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d003      	beq.n	800b0b8 <OSPI_NOR_ResetMemory+0x54>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800b0b0:	f06f 0304 	mvn.w	r3, #4
 800b0b4:	60fb      	str	r3, [r7, #12]
 800b0b6:	e05b      	b.n	800b170 <OSPI_NOR_ResetMemory+0x10c>
  }
  else if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	225c      	movs	r2, #92	; 0x5c
 800b0bc:	fb02 f303 	mul.w	r3, r2, r3
 800b0c0:	4a2e      	ldr	r2, [pc, #184]	; (800b17c <OSPI_NOR_ResetMemory+0x118>)
 800b0c2:	4413      	add	r3, r2
 800b0c4:	2200      	movs	r2, #0
 800b0c6:	2101      	movs	r1, #1
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	f7fe fef4 	bl	8009eb6 <MX25LM51245G_ResetEnable>
 800b0ce:	4603      	mov	r3, r0
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d003      	beq.n	800b0dc <OSPI_NOR_ResetMemory+0x78>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800b0d4:	f06f 0304 	mvn.w	r3, #4
 800b0d8:	60fb      	str	r3, [r7, #12]
 800b0da:	e049      	b.n	800b170 <OSPI_NOR_ResetMemory+0x10c>
  }
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	225c      	movs	r2, #92	; 0x5c
 800b0e0:	fb02 f303 	mul.w	r3, r2, r3
 800b0e4:	4a25      	ldr	r2, [pc, #148]	; (800b17c <OSPI_NOR_ResetMemory+0x118>)
 800b0e6:	4413      	add	r3, r2
 800b0e8:	2200      	movs	r2, #0
 800b0ea:	2101      	movs	r1, #1
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	f7fe ff3a 	bl	8009f66 <MX25LM51245G_ResetMemory>
 800b0f2:	4603      	mov	r3, r0
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d003      	beq.n	800b100 <OSPI_NOR_ResetMemory+0x9c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800b0f8:	f06f 0304 	mvn.w	r3, #4
 800b0fc:	60fb      	str	r3, [r7, #12]
 800b0fe:	e037      	b.n	800b170 <OSPI_NOR_ResetMemory+0x10c>
  }
  else if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	225c      	movs	r2, #92	; 0x5c
 800b104:	fb02 f303 	mul.w	r3, r2, r3
 800b108:	4a1c      	ldr	r2, [pc, #112]	; (800b17c <OSPI_NOR_ResetMemory+0x118>)
 800b10a:	4413      	add	r3, r2
 800b10c:	2201      	movs	r2, #1
 800b10e:	2101      	movs	r1, #1
 800b110:	4618      	mov	r0, r3
 800b112:	f7fe fed0 	bl	8009eb6 <MX25LM51245G_ResetEnable>
 800b116:	4603      	mov	r3, r0
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d003      	beq.n	800b124 <OSPI_NOR_ResetMemory+0xc0>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800b11c:	f06f 0304 	mvn.w	r3, #4
 800b120:	60fb      	str	r3, [r7, #12]
 800b122:	e025      	b.n	800b170 <OSPI_NOR_ResetMemory+0x10c>
  }
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	225c      	movs	r2, #92	; 0x5c
 800b128:	fb02 f303 	mul.w	r3, r2, r3
 800b12c:	4a13      	ldr	r2, [pc, #76]	; (800b17c <OSPI_NOR_ResetMemory+0x118>)
 800b12e:	4413      	add	r3, r2
 800b130:	2201      	movs	r2, #1
 800b132:	2101      	movs	r1, #1
 800b134:	4618      	mov	r0, r3
 800b136:	f7fe ff16 	bl	8009f66 <MX25LM51245G_ResetMemory>
 800b13a:	4603      	mov	r3, r0
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d003      	beq.n	800b148 <OSPI_NOR_ResetMemory+0xe4>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800b140:	f06f 0304 	mvn.w	r3, #4
 800b144:	60fb      	str	r3, [r7, #12]
 800b146:	e013      	b.n	800b170 <OSPI_NOR_ResetMemory+0x10c>
  }
  else
  {
    Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;      /* After reset S/W setting to indirect access   */
 800b148:	4a0d      	ldr	r2, [pc, #52]	; (800b180 <OSPI_NOR_ResetMemory+0x11c>)
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	2101      	movs	r1, #1
 800b14e:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
    Ospi_Nor_Ctx[Instance].InterfaceMode = BSP_OSPI_NOR_SPI_MODE;         /* After reset H/W back to SPI mode by default  */
 800b152:	4a0b      	ldr	r2, [pc, #44]	; (800b180 <OSPI_NOR_ResetMemory+0x11c>)
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	00db      	lsls	r3, r3, #3
 800b158:	4413      	add	r3, r2
 800b15a:	2200      	movs	r2, #0
 800b15c:	705a      	strb	r2, [r3, #1]
    Ospi_Nor_Ctx[Instance].TransferRate  = BSP_OSPI_NOR_STR_TRANSFER;     /* After reset S/W setting to STR mode          */
 800b15e:	4a08      	ldr	r2, [pc, #32]	; (800b180 <OSPI_NOR_ResetMemory+0x11c>)
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	00db      	lsls	r3, r3, #3
 800b164:	4413      	add	r3, r2
 800b166:	2200      	movs	r2, #0
 800b168:	709a      	strb	r2, [r3, #2]

    /* After SWreset CMD, wait in case SWReset occurred during erase operation */
    HAL_Delay(MX25LM51245G_RESET_MAX_TIME);
 800b16a:	2064      	movs	r0, #100	; 0x64
 800b16c:	f000 fd04 	bl	800bb78 <HAL_Delay>
  }

  /* Return BSP status */
  return ret;
 800b170:	68fb      	ldr	r3, [r7, #12]
}
 800b172:	4618      	mov	r0, r3
 800b174:	3710      	adds	r7, #16
 800b176:	46bd      	mov	sp, r7
 800b178:	bd80      	pop	{r7, pc}
 800b17a:	bf00      	nop
 800b17c:	2400bc80 	.word	0x2400bc80
 800b180:	2400bcdc 	.word	0x2400bcdc

0800b184 <OSPI_NOR_EnterDOPIMode>:
  * @brief  This function enables the octal DTR mode of the memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_EnterDOPIMode(uint32_t Instance)
{
 800b184:	b580      	push	{r7, lr}
 800b186:	b086      	sub	sp, #24
 800b188:	af02      	add	r7, sp, #8
 800b18a:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800b18c:	2300      	movs	r3, #0
 800b18e:	60fb      	str	r3, [r7, #12]
  uint8_t reg[2];

  /* Enable write operations */
  if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	225c      	movs	r2, #92	; 0x5c
 800b194:	fb02 f303 	mul.w	r3, r2, r3
 800b198:	4a60      	ldr	r2, [pc, #384]	; (800b31c <OSPI_NOR_EnterDOPIMode+0x198>)
 800b19a:	1898      	adds	r0, r3, r2
 800b19c:	4a60      	ldr	r2, [pc, #384]	; (800b320 <OSPI_NOR_EnterDOPIMode+0x19c>)
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	00db      	lsls	r3, r3, #3
 800b1a2:	4413      	add	r3, r2
 800b1a4:	7859      	ldrb	r1, [r3, #1]
 800b1a6:	4a5e      	ldr	r2, [pc, #376]	; (800b320 <OSPI_NOR_EnterDOPIMode+0x19c>)
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	00db      	lsls	r3, r3, #3
 800b1ac:	4413      	add	r3, r2
 800b1ae:	789b      	ldrb	r3, [r3, #2]
 800b1b0:	461a      	mov	r2, r3
 800b1b2:	f7fe fc86 	bl	8009ac2 <MX25LM51245G_WriteEnable>
 800b1b6:	4603      	mov	r3, r0
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d003      	beq.n	800b1c4 <OSPI_NOR_EnterDOPIMode+0x40>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800b1bc:	f06f 0304 	mvn.w	r3, #4
 800b1c0:	60fb      	str	r3, [r7, #12]
 800b1c2:	e0a6      	b.n	800b312 <OSPI_NOR_EnterDOPIMode+0x18e>
  }
  /* Write Configuration register 2 (with new dummy cycles) */
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG3_ADDR, MX25LM51245G_CR2_DC_6_CYCLES) != MX25LM51245G_OK)
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	225c      	movs	r2, #92	; 0x5c
 800b1c8:	fb02 f303 	mul.w	r3, r2, r3
 800b1cc:	4a53      	ldr	r2, [pc, #332]	; (800b31c <OSPI_NOR_EnterDOPIMode+0x198>)
 800b1ce:	1898      	adds	r0, r3, r2
 800b1d0:	4a53      	ldr	r2, [pc, #332]	; (800b320 <OSPI_NOR_EnterDOPIMode+0x19c>)
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	00db      	lsls	r3, r3, #3
 800b1d6:	4413      	add	r3, r2
 800b1d8:	7859      	ldrb	r1, [r3, #1]
 800b1da:	4a51      	ldr	r2, [pc, #324]	; (800b320 <OSPI_NOR_EnterDOPIMode+0x19c>)
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	00db      	lsls	r3, r3, #3
 800b1e0:	4413      	add	r3, r2
 800b1e2:	789a      	ldrb	r2, [r3, #2]
 800b1e4:	2307      	movs	r3, #7
 800b1e6:	9300      	str	r3, [sp, #0]
 800b1e8:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b1ec:	f7fe fd34 	bl	8009c58 <MX25LM51245G_WriteCfg2Register>
 800b1f0:	4603      	mov	r3, r0
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d003      	beq.n	800b1fe <OSPI_NOR_EnterDOPIMode+0x7a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800b1f6:	f06f 0304 	mvn.w	r3, #4
 800b1fa:	60fb      	str	r3, [r7, #12]
 800b1fc:	e089      	b.n	800b312 <OSPI_NOR_EnterDOPIMode+0x18e>
  }
  /* Enable write operations */
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	225c      	movs	r2, #92	; 0x5c
 800b202:	fb02 f303 	mul.w	r3, r2, r3
 800b206:	4a45      	ldr	r2, [pc, #276]	; (800b31c <OSPI_NOR_EnterDOPIMode+0x198>)
 800b208:	1898      	adds	r0, r3, r2
 800b20a:	4a45      	ldr	r2, [pc, #276]	; (800b320 <OSPI_NOR_EnterDOPIMode+0x19c>)
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	00db      	lsls	r3, r3, #3
 800b210:	4413      	add	r3, r2
 800b212:	7859      	ldrb	r1, [r3, #1]
 800b214:	4a42      	ldr	r2, [pc, #264]	; (800b320 <OSPI_NOR_EnterDOPIMode+0x19c>)
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	00db      	lsls	r3, r3, #3
 800b21a:	4413      	add	r3, r2
 800b21c:	789b      	ldrb	r3, [r3, #2]
 800b21e:	461a      	mov	r2, r3
 800b220:	f7fe fc4f 	bl	8009ac2 <MX25LM51245G_WriteEnable>
 800b224:	4603      	mov	r3, r0
 800b226:	2b00      	cmp	r3, #0
 800b228:	d003      	beq.n	800b232 <OSPI_NOR_EnterDOPIMode+0xae>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800b22a:	f06f 0304 	mvn.w	r3, #4
 800b22e:	60fb      	str	r3, [r7, #12]
 800b230:	e06f      	b.n	800b312 <OSPI_NOR_EnterDOPIMode+0x18e>
  }
  /* Write Configuration register 2 (with Octal I/O SPI protocol) */
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, MX25LM51245G_CR2_DOPI) != MX25LM51245G_OK)
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	225c      	movs	r2, #92	; 0x5c
 800b236:	fb02 f303 	mul.w	r3, r2, r3
 800b23a:	4a38      	ldr	r2, [pc, #224]	; (800b31c <OSPI_NOR_EnterDOPIMode+0x198>)
 800b23c:	1898      	adds	r0, r3, r2
 800b23e:	4a38      	ldr	r2, [pc, #224]	; (800b320 <OSPI_NOR_EnterDOPIMode+0x19c>)
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	00db      	lsls	r3, r3, #3
 800b244:	4413      	add	r3, r2
 800b246:	7859      	ldrb	r1, [r3, #1]
 800b248:	4a35      	ldr	r2, [pc, #212]	; (800b320 <OSPI_NOR_EnterDOPIMode+0x19c>)
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	00db      	lsls	r3, r3, #3
 800b24e:	4413      	add	r3, r2
 800b250:	789a      	ldrb	r2, [r3, #2]
 800b252:	2302      	movs	r3, #2
 800b254:	9300      	str	r3, [sp, #0]
 800b256:	2300      	movs	r3, #0
 800b258:	f7fe fcfe 	bl	8009c58 <MX25LM51245G_WriteCfg2Register>
 800b25c:	4603      	mov	r3, r0
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d003      	beq.n	800b26a <OSPI_NOR_EnterDOPIMode+0xe6>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800b262:	f06f 0304 	mvn.w	r3, #4
 800b266:	60fb      	str	r3, [r7, #12]
 800b268:	e053      	b.n	800b312 <OSPI_NOR_EnterDOPIMode+0x18e>
  }
  else
  {
    /* Wait that the configuration is effective and check that memory is ready */
    HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 800b26a:	2028      	movs	r0, #40	; 0x28
 800b26c:	f000 fc84 	bl	800bb78 <HAL_Delay>

    /* Reconfigure the memory type of the peripheral */
    hospi_nor[Instance].Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 800b270:	4a2a      	ldr	r2, [pc, #168]	; (800b31c <OSPI_NOR_EnterDOPIMode+0x198>)
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	215c      	movs	r1, #92	; 0x5c
 800b276:	fb01 f303 	mul.w	r3, r1, r3
 800b27a:	4413      	add	r3, r2
 800b27c:	330c      	adds	r3, #12
 800b27e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b282:	601a      	str	r2, [r3, #0]
    hospi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 800b284:	4a25      	ldr	r2, [pc, #148]	; (800b31c <OSPI_NOR_EnterDOPIMode+0x198>)
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	215c      	movs	r1, #92	; 0x5c
 800b28a:	fb01 f303 	mul.w	r3, r1, r3
 800b28e:	4413      	add	r3, r2
 800b290:	332c      	adds	r3, #44	; 0x2c
 800b292:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b296:	601a      	str	r2, [r3, #0]
    if (HAL_OSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	225c      	movs	r2, #92	; 0x5c
 800b29c:	fb02 f303 	mul.w	r3, r2, r3
 800b2a0:	4a1e      	ldr	r2, [pc, #120]	; (800b31c <OSPI_NOR_EnterDOPIMode+0x198>)
 800b2a2:	4413      	add	r3, r2
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	f005 f9b5 	bl	8010614 <HAL_OSPI_Init>
 800b2aa:	4603      	mov	r3, r0
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d003      	beq.n	800b2b8 <OSPI_NOR_EnterDOPIMode+0x134>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800b2b0:	f06f 0303 	mvn.w	r3, #3
 800b2b4:	60fb      	str	r3, [r7, #12]
 800b2b6:	e02c      	b.n	800b312 <OSPI_NOR_EnterDOPIMode+0x18e>
    }
    /* Check Flash busy ? */
    else if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	225c      	movs	r2, #92	; 0x5c
 800b2bc:	fb02 f303 	mul.w	r3, r2, r3
 800b2c0:	4a16      	ldr	r2, [pc, #88]	; (800b31c <OSPI_NOR_EnterDOPIMode+0x198>)
 800b2c2:	4413      	add	r3, r2
 800b2c4:	2201      	movs	r2, #1
 800b2c6:	2101      	movs	r1, #1
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	f7fe fa34 	bl	8009736 <MX25LM51245G_AutoPollingMemReady>
 800b2ce:	4603      	mov	r3, r0
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d003      	beq.n	800b2dc <OSPI_NOR_EnterDOPIMode+0x158>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b2d4:	f06f 0304 	mvn.w	r3, #4
 800b2d8:	60fb      	str	r3, [r7, #12]
 800b2da:	e01a      	b.n	800b312 <OSPI_NOR_EnterDOPIMode+0x18e>
    }
    /* Check the configuration has been correctly done */
    else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	225c      	movs	r2, #92	; 0x5c
 800b2e0:	fb02 f303 	mul.w	r3, r2, r3
 800b2e4:	4a0d      	ldr	r2, [pc, #52]	; (800b31c <OSPI_NOR_EnterDOPIMode+0x198>)
 800b2e6:	1898      	adds	r0, r3, r2
 800b2e8:	f107 0308 	add.w	r3, r7, #8
 800b2ec:	9300      	str	r3, [sp, #0]
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	2201      	movs	r2, #1
 800b2f2:	2101      	movs	r1, #1
 800b2f4:	f7fe fd45 	bl	8009d82 <MX25LM51245G_ReadCfg2Register>
 800b2f8:	4603      	mov	r3, r0
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d003      	beq.n	800b306 <OSPI_NOR_EnterDOPIMode+0x182>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b2fe:	f06f 0304 	mvn.w	r3, #4
 800b302:	60fb      	str	r3, [r7, #12]
 800b304:	e005      	b.n	800b312 <OSPI_NOR_EnterDOPIMode+0x18e>
    }
    else
    {
      if (reg[0] != MX25LM51245G_CR2_DOPI)
 800b306:	7a3b      	ldrb	r3, [r7, #8]
 800b308:	2b02      	cmp	r3, #2
 800b30a:	d002      	beq.n	800b312 <OSPI_NOR_EnterDOPIMode+0x18e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b30c:	f06f 0304 	mvn.w	r3, #4
 800b310:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Return BSP status */
  return ret;
 800b312:	68fb      	ldr	r3, [r7, #12]
}
 800b314:	4618      	mov	r0, r3
 800b316:	3710      	adds	r7, #16
 800b318:	46bd      	mov	sp, r7
 800b31a:	bd80      	pop	{r7, pc}
 800b31c:	2400bc80 	.word	0x2400bc80
 800b320:	2400bcdc 	.word	0x2400bcdc

0800b324 <OSPI_NOR_EnterSOPIMode>:
  * @brief  This function enables the octal STR mode of the memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_EnterSOPIMode(uint32_t Instance)
{
 800b324:	b580      	push	{r7, lr}
 800b326:	b086      	sub	sp, #24
 800b328:	af02      	add	r7, sp, #8
 800b32a:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800b32c:	2300      	movs	r3, #0
 800b32e:	60fb      	str	r3, [r7, #12]
  uint8_t reg[2];

  /* Enable write operations */
  if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	225c      	movs	r2, #92	; 0x5c
 800b334:	fb02 f303 	mul.w	r3, r2, r3
 800b338:	4a4e      	ldr	r2, [pc, #312]	; (800b474 <OSPI_NOR_EnterSOPIMode+0x150>)
 800b33a:	1898      	adds	r0, r3, r2
 800b33c:	4a4e      	ldr	r2, [pc, #312]	; (800b478 <OSPI_NOR_EnterSOPIMode+0x154>)
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	00db      	lsls	r3, r3, #3
 800b342:	4413      	add	r3, r2
 800b344:	7859      	ldrb	r1, [r3, #1]
 800b346:	4a4c      	ldr	r2, [pc, #304]	; (800b478 <OSPI_NOR_EnterSOPIMode+0x154>)
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	00db      	lsls	r3, r3, #3
 800b34c:	4413      	add	r3, r2
 800b34e:	789b      	ldrb	r3, [r3, #2]
 800b350:	461a      	mov	r2, r3
 800b352:	f7fe fbb6 	bl	8009ac2 <MX25LM51245G_WriteEnable>
 800b356:	4603      	mov	r3, r0
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d003      	beq.n	800b364 <OSPI_NOR_EnterSOPIMode+0x40>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800b35c:	f06f 0304 	mvn.w	r3, #4
 800b360:	60fb      	str	r3, [r7, #12]
 800b362:	e082      	b.n	800b46a <OSPI_NOR_EnterSOPIMode+0x146>
  }
  /* Write Configuration register 2 (with new dummy cycles) */
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG3_ADDR, MX25LM51245G_CR2_DC_6_CYCLES) != MX25LM51245G_OK)
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	225c      	movs	r2, #92	; 0x5c
 800b368:	fb02 f303 	mul.w	r3, r2, r3
 800b36c:	4a41      	ldr	r2, [pc, #260]	; (800b474 <OSPI_NOR_EnterSOPIMode+0x150>)
 800b36e:	1898      	adds	r0, r3, r2
 800b370:	4a41      	ldr	r2, [pc, #260]	; (800b478 <OSPI_NOR_EnterSOPIMode+0x154>)
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	00db      	lsls	r3, r3, #3
 800b376:	4413      	add	r3, r2
 800b378:	7859      	ldrb	r1, [r3, #1]
 800b37a:	4a3f      	ldr	r2, [pc, #252]	; (800b478 <OSPI_NOR_EnterSOPIMode+0x154>)
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	00db      	lsls	r3, r3, #3
 800b380:	4413      	add	r3, r2
 800b382:	789a      	ldrb	r2, [r3, #2]
 800b384:	2307      	movs	r3, #7
 800b386:	9300      	str	r3, [sp, #0]
 800b388:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b38c:	f7fe fc64 	bl	8009c58 <MX25LM51245G_WriteCfg2Register>
 800b390:	4603      	mov	r3, r0
 800b392:	2b00      	cmp	r3, #0
 800b394:	d003      	beq.n	800b39e <OSPI_NOR_EnterSOPIMode+0x7a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800b396:	f06f 0304 	mvn.w	r3, #4
 800b39a:	60fb      	str	r3, [r7, #12]
 800b39c:	e065      	b.n	800b46a <OSPI_NOR_EnterSOPIMode+0x146>
  }
  /* Enable write operations */
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	225c      	movs	r2, #92	; 0x5c
 800b3a2:	fb02 f303 	mul.w	r3, r2, r3
 800b3a6:	4a33      	ldr	r2, [pc, #204]	; (800b474 <OSPI_NOR_EnterSOPIMode+0x150>)
 800b3a8:	1898      	adds	r0, r3, r2
 800b3aa:	4a33      	ldr	r2, [pc, #204]	; (800b478 <OSPI_NOR_EnterSOPIMode+0x154>)
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	00db      	lsls	r3, r3, #3
 800b3b0:	4413      	add	r3, r2
 800b3b2:	7859      	ldrb	r1, [r3, #1]
 800b3b4:	4a30      	ldr	r2, [pc, #192]	; (800b478 <OSPI_NOR_EnterSOPIMode+0x154>)
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	00db      	lsls	r3, r3, #3
 800b3ba:	4413      	add	r3, r2
 800b3bc:	789b      	ldrb	r3, [r3, #2]
 800b3be:	461a      	mov	r2, r3
 800b3c0:	f7fe fb7f 	bl	8009ac2 <MX25LM51245G_WriteEnable>
 800b3c4:	4603      	mov	r3, r0
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d003      	beq.n	800b3d2 <OSPI_NOR_EnterSOPIMode+0xae>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800b3ca:	f06f 0304 	mvn.w	r3, #4
 800b3ce:	60fb      	str	r3, [r7, #12]
 800b3d0:	e04b      	b.n	800b46a <OSPI_NOR_EnterSOPIMode+0x146>
  }
  /* Write Configuration register 2 (with Octal I/O SPI protocol) */
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, MX25LM51245G_CR2_SOPI) != MX25LM51245G_OK)
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	225c      	movs	r2, #92	; 0x5c
 800b3d6:	fb02 f303 	mul.w	r3, r2, r3
 800b3da:	4a26      	ldr	r2, [pc, #152]	; (800b474 <OSPI_NOR_EnterSOPIMode+0x150>)
 800b3dc:	1898      	adds	r0, r3, r2
 800b3de:	4a26      	ldr	r2, [pc, #152]	; (800b478 <OSPI_NOR_EnterSOPIMode+0x154>)
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	00db      	lsls	r3, r3, #3
 800b3e4:	4413      	add	r3, r2
 800b3e6:	7859      	ldrb	r1, [r3, #1]
 800b3e8:	4a23      	ldr	r2, [pc, #140]	; (800b478 <OSPI_NOR_EnterSOPIMode+0x154>)
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	00db      	lsls	r3, r3, #3
 800b3ee:	4413      	add	r3, r2
 800b3f0:	789a      	ldrb	r2, [r3, #2]
 800b3f2:	2301      	movs	r3, #1
 800b3f4:	9300      	str	r3, [sp, #0]
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	f7fe fc2e 	bl	8009c58 <MX25LM51245G_WriteCfg2Register>
 800b3fc:	4603      	mov	r3, r0
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d003      	beq.n	800b40a <OSPI_NOR_EnterSOPIMode+0xe6>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800b402:	f06f 0304 	mvn.w	r3, #4
 800b406:	60fb      	str	r3, [r7, #12]
 800b408:	e02f      	b.n	800b46a <OSPI_NOR_EnterSOPIMode+0x146>
  }
  else
  {
    /* Wait that the configuration is effective and check that memory is ready */
    HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 800b40a:	2028      	movs	r0, #40	; 0x28
 800b40c:	f000 fbb4 	bl	800bb78 <HAL_Delay>

    /* Check Flash busy ? */
    if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	225c      	movs	r2, #92	; 0x5c
 800b414:	fb02 f303 	mul.w	r3, r2, r3
 800b418:	4a16      	ldr	r2, [pc, #88]	; (800b474 <OSPI_NOR_EnterSOPIMode+0x150>)
 800b41a:	4413      	add	r3, r2
 800b41c:	2200      	movs	r2, #0
 800b41e:	2101      	movs	r1, #1
 800b420:	4618      	mov	r0, r3
 800b422:	f7fe f988 	bl	8009736 <MX25LM51245G_AutoPollingMemReady>
 800b426:	4603      	mov	r3, r0
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d003      	beq.n	800b434 <OSPI_NOR_EnterSOPIMode+0x110>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b42c:	f06f 0304 	mvn.w	r3, #4
 800b430:	60fb      	str	r3, [r7, #12]
 800b432:	e01a      	b.n	800b46a <OSPI_NOR_EnterSOPIMode+0x146>
    }
    /* Check the configuration has been correctly done */
    else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	225c      	movs	r2, #92	; 0x5c
 800b438:	fb02 f303 	mul.w	r3, r2, r3
 800b43c:	4a0d      	ldr	r2, [pc, #52]	; (800b474 <OSPI_NOR_EnterSOPIMode+0x150>)
 800b43e:	1898      	adds	r0, r3, r2
 800b440:	f107 0308 	add.w	r3, r7, #8
 800b444:	9300      	str	r3, [sp, #0]
 800b446:	2300      	movs	r3, #0
 800b448:	2200      	movs	r2, #0
 800b44a:	2101      	movs	r1, #1
 800b44c:	f7fe fc99 	bl	8009d82 <MX25LM51245G_ReadCfg2Register>
 800b450:	4603      	mov	r3, r0
 800b452:	2b00      	cmp	r3, #0
 800b454:	d003      	beq.n	800b45e <OSPI_NOR_EnterSOPIMode+0x13a>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b456:	f06f 0304 	mvn.w	r3, #4
 800b45a:	60fb      	str	r3, [r7, #12]
 800b45c:	e005      	b.n	800b46a <OSPI_NOR_EnterSOPIMode+0x146>
    }
    else
    {
      if (reg[0] != MX25LM51245G_CR2_SOPI)
 800b45e:	7a3b      	ldrb	r3, [r7, #8]
 800b460:	2b01      	cmp	r3, #1
 800b462:	d002      	beq.n	800b46a <OSPI_NOR_EnterSOPIMode+0x146>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b464:	f06f 0304 	mvn.w	r3, #4
 800b468:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Return BSP status */
  return ret;
 800b46a:	68fb      	ldr	r3, [r7, #12]
}
 800b46c:	4618      	mov	r0, r3
 800b46e:	3710      	adds	r7, #16
 800b470:	46bd      	mov	sp, r7
 800b472:	bd80      	pop	{r7, pc}
 800b474:	2400bc80 	.word	0x2400bc80
 800b478:	2400bcdc 	.word	0x2400bcdc

0800b47c <OSPI_NOR_ExitOPIMode>:
  * @brief  This function disables the octal DTR or STR mode of the memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_ExitOPIMode (uint32_t Instance)
{
 800b47c:	b580      	push	{r7, lr}
 800b47e:	b086      	sub	sp, #24
 800b480:	af02      	add	r7, sp, #8
 800b482:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800b484:	2300      	movs	r3, #0
 800b486:	60fb      	str	r3, [r7, #12]
  uint8_t reg[2];

  /* Enable write operations */
  if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	225c      	movs	r2, #92	; 0x5c
 800b48c:	fb02 f303 	mul.w	r3, r2, r3
 800b490:	4a49      	ldr	r2, [pc, #292]	; (800b5b8 <OSPI_NOR_ExitOPIMode+0x13c>)
 800b492:	1898      	adds	r0, r3, r2
 800b494:	4a49      	ldr	r2, [pc, #292]	; (800b5bc <OSPI_NOR_ExitOPIMode+0x140>)
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	00db      	lsls	r3, r3, #3
 800b49a:	4413      	add	r3, r2
 800b49c:	7859      	ldrb	r1, [r3, #1]
 800b49e:	4a47      	ldr	r2, [pc, #284]	; (800b5bc <OSPI_NOR_ExitOPIMode+0x140>)
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	00db      	lsls	r3, r3, #3
 800b4a4:	4413      	add	r3, r2
 800b4a6:	789b      	ldrb	r3, [r3, #2]
 800b4a8:	461a      	mov	r2, r3
 800b4aa:	f7fe fb0a 	bl	8009ac2 <MX25LM51245G_WriteEnable>
 800b4ae:	4603      	mov	r3, r0
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d003      	beq.n	800b4bc <OSPI_NOR_ExitOPIMode+0x40>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800b4b4:	f06f 0304 	mvn.w	r3, #4
 800b4b8:	60fb      	str	r3, [r7, #12]
 800b4ba:	e077      	b.n	800b5ac <OSPI_NOR_ExitOPIMode+0x130>
  }
  else
  {
    /* Write Configuration register 2 (with SPI protocol) */
    reg[0] = 0;
 800b4bc:	2300      	movs	r3, #0
 800b4be:	723b      	strb	r3, [r7, #8]
    reg[1] = 0;
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	727b      	strb	r3, [r7, #9]
    if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, reg[0]) != MX25LM51245G_OK)
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	225c      	movs	r2, #92	; 0x5c
 800b4c8:	fb02 f303 	mul.w	r3, r2, r3
 800b4cc:	4a3a      	ldr	r2, [pc, #232]	; (800b5b8 <OSPI_NOR_ExitOPIMode+0x13c>)
 800b4ce:	1898      	adds	r0, r3, r2
 800b4d0:	4a3a      	ldr	r2, [pc, #232]	; (800b5bc <OSPI_NOR_ExitOPIMode+0x140>)
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	00db      	lsls	r3, r3, #3
 800b4d6:	4413      	add	r3, r2
 800b4d8:	7859      	ldrb	r1, [r3, #1]
 800b4da:	4a38      	ldr	r2, [pc, #224]	; (800b5bc <OSPI_NOR_ExitOPIMode+0x140>)
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	00db      	lsls	r3, r3, #3
 800b4e0:	4413      	add	r3, r2
 800b4e2:	789a      	ldrb	r2, [r3, #2]
 800b4e4:	7a3b      	ldrb	r3, [r7, #8]
 800b4e6:	9300      	str	r3, [sp, #0]
 800b4e8:	2300      	movs	r3, #0
 800b4ea:	f7fe fbb5 	bl	8009c58 <MX25LM51245G_WriteCfg2Register>
 800b4ee:	4603      	mov	r3, r0
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d003      	beq.n	800b4fc <OSPI_NOR_ExitOPIMode+0x80>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b4f4:	f06f 0304 	mvn.w	r3, #4
 800b4f8:	60fb      	str	r3, [r7, #12]
 800b4fa:	e057      	b.n	800b5ac <OSPI_NOR_ExitOPIMode+0x130>
    }
    else
    {
      /* Wait that the configuration is effective and check that memory is ready */
      HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 800b4fc:	2028      	movs	r0, #40	; 0x28
 800b4fe:	f000 fb3b 	bl	800bb78 <HAL_Delay>

      if (Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_DTR_TRANSFER)
 800b502:	4a2e      	ldr	r2, [pc, #184]	; (800b5bc <OSPI_NOR_ExitOPIMode+0x140>)
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	00db      	lsls	r3, r3, #3
 800b508:	4413      	add	r3, r2
 800b50a:	789b      	ldrb	r3, [r3, #2]
 800b50c:	2b01      	cmp	r3, #1
 800b50e:	d120      	bne.n	800b552 <OSPI_NOR_ExitOPIMode+0xd6>
      {
        /* Reconfigure the memory type of the peripheral */
        hospi_nor[Instance].Init.MemoryType            = HAL_OSPI_MEMTYPE_MICRON;
 800b510:	4a29      	ldr	r2, [pc, #164]	; (800b5b8 <OSPI_NOR_ExitOPIMode+0x13c>)
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	215c      	movs	r1, #92	; 0x5c
 800b516:	fb01 f303 	mul.w	r3, r1, r3
 800b51a:	4413      	add	r3, r2
 800b51c:	330c      	adds	r3, #12
 800b51e:	2200      	movs	r2, #0
 800b520:	601a      	str	r2, [r3, #0]
        hospi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 800b522:	4a25      	ldr	r2, [pc, #148]	; (800b5b8 <OSPI_NOR_ExitOPIMode+0x13c>)
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	215c      	movs	r1, #92	; 0x5c
 800b528:	fb01 f303 	mul.w	r3, r1, r3
 800b52c:	4413      	add	r3, r2
 800b52e:	332c      	adds	r3, #44	; 0x2c
 800b530:	2200      	movs	r2, #0
 800b532:	601a      	str	r2, [r3, #0]
        if (HAL_OSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	225c      	movs	r2, #92	; 0x5c
 800b538:	fb02 f303 	mul.w	r3, r2, r3
 800b53c:	4a1e      	ldr	r2, [pc, #120]	; (800b5b8 <OSPI_NOR_ExitOPIMode+0x13c>)
 800b53e:	4413      	add	r3, r2
 800b540:	4618      	mov	r0, r3
 800b542:	f005 f867 	bl	8010614 <HAL_OSPI_Init>
 800b546:	4603      	mov	r3, r0
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d002      	beq.n	800b552 <OSPI_NOR_ExitOPIMode+0xd6>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 800b54c:	f06f 0303 	mvn.w	r3, #3
 800b550:	60fb      	str	r3, [r7, #12]
        }
      }

      /* Check Flash busy ? */
      if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	225c      	movs	r2, #92	; 0x5c
 800b556:	fb02 f303 	mul.w	r3, r2, r3
 800b55a:	4a17      	ldr	r2, [pc, #92]	; (800b5b8 <OSPI_NOR_ExitOPIMode+0x13c>)
 800b55c:	4413      	add	r3, r2
 800b55e:	2200      	movs	r2, #0
 800b560:	2100      	movs	r1, #0
 800b562:	4618      	mov	r0, r3
 800b564:	f7fe f8e7 	bl	8009736 <MX25LM51245G_AutoPollingMemReady>
 800b568:	4603      	mov	r3, r0
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d003      	beq.n	800b576 <OSPI_NOR_ExitOPIMode+0xfa>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b56e:	f06f 0304 	mvn.w	r3, #4
 800b572:	60fb      	str	r3, [r7, #12]
 800b574:	e01a      	b.n	800b5ac <OSPI_NOR_ExitOPIMode+0x130>
      }
      /* Check the configuration has been correctly done */
      else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	225c      	movs	r2, #92	; 0x5c
 800b57a:	fb02 f303 	mul.w	r3, r2, r3
 800b57e:	4a0e      	ldr	r2, [pc, #56]	; (800b5b8 <OSPI_NOR_ExitOPIMode+0x13c>)
 800b580:	1898      	adds	r0, r3, r2
 800b582:	f107 0308 	add.w	r3, r7, #8
 800b586:	9300      	str	r3, [sp, #0]
 800b588:	2300      	movs	r3, #0
 800b58a:	2200      	movs	r2, #0
 800b58c:	2100      	movs	r1, #0
 800b58e:	f7fe fbf8 	bl	8009d82 <MX25LM51245G_ReadCfg2Register>
 800b592:	4603      	mov	r3, r0
 800b594:	2b00      	cmp	r3, #0
 800b596:	d003      	beq.n	800b5a0 <OSPI_NOR_ExitOPIMode+0x124>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b598:	f06f 0304 	mvn.w	r3, #4
 800b59c:	60fb      	str	r3, [r7, #12]
 800b59e:	e005      	b.n	800b5ac <OSPI_NOR_ExitOPIMode+0x130>
      }
      else
      {
        if (reg[0] != 0U)
 800b5a0:	7a3b      	ldrb	r3, [r7, #8]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d002      	beq.n	800b5ac <OSPI_NOR_ExitOPIMode+0x130>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800b5a6:	f06f 0304 	mvn.w	r3, #4
 800b5aa:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Return BSP status */
  return ret;
 800b5ac:	68fb      	ldr	r3, [r7, #12]
}
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	3710      	adds	r7, #16
 800b5b2:	46bd      	mov	sp, r7
 800b5b4:	bd80      	pop	{r7, pc}
 800b5b6:	bf00      	nop
 800b5b8:	2400bc80 	.word	0x2400bc80
 800b5bc:	2400bcdc 	.word	0x2400bcdc

0800b5c0 <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
 800b5c0:	b580      	push	{r7, lr}
 800b5c2:	b088      	sub	sp, #32
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	6078      	str	r0, [r7, #4]
 800b5c8:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	61fb      	str	r3, [r7, #28]

  if((Instance >= TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d11c      	bne.n	800b60e <BSP_TS_Init+0x4e>
 800b5d4:	683b      	ldr	r3, [r7, #0]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d018      	beq.n	800b60e <BSP_TS_Init+0x4e>
 800b5dc:	683b      	ldr	r3, [r7, #0]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 800b5e4:	d813      	bhi.n	800b60e <BSP_TS_Init+0x4e>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 800b5e6:	683b      	ldr	r3, [r7, #0]
 800b5e8:	685b      	ldr	r3, [r3, #4]
  if((Instance >= TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d00f      	beq.n	800b60e <BSP_TS_Init+0x4e>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 800b5ee:	683b      	ldr	r3, [r7, #0]
 800b5f0:	685b      	ldr	r3, [r3, #4]
 800b5f2:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 800b5f6:	d80a      	bhi.n	800b60e <BSP_TS_Init+0x4e>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
 800b5f8:	683b      	ldr	r3, [r7, #0]
 800b5fa:	68da      	ldr	r2, [r3, #12]
 800b5fc:	683b      	ldr	r3, [r7, #0]
 800b5fe:	6819      	ldr	r1, [r3, #0]
 800b600:	683b      	ldr	r3, [r7, #0]
 800b602:	685b      	ldr	r3, [r3, #4]
 800b604:	428b      	cmp	r3, r1
 800b606:	bf28      	it	cs
 800b608:	460b      	movcs	r3, r1
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 800b60a:	429a      	cmp	r2, r3
 800b60c:	d903      	bls.n	800b616 <BSP_TS_Init+0x56>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800b60e:	f06f 0301 	mvn.w	r3, #1
 800b612:	61fb      	str	r3, [r7, #28]
 800b614:	e06e      	b.n	800b6f4 <BSP_TS_Init+0x134>
  }
  else
  {
    if(FT5336_Probe(Instance) != BSP_ERROR_NONE)
 800b616:	6878      	ldr	r0, [r7, #4]
 800b618:	f000 f98c 	bl	800b934 <FT5336_Probe>
 800b61c:	4603      	mov	r3, r0
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d003      	beq.n	800b62a <BSP_TS_Init+0x6a>
    {
      ret = BSP_ERROR_NO_INIT;
 800b622:	f04f 33ff 	mov.w	r3, #4294967295
 800b626:	61fb      	str	r3, [r7, #28]
 800b628:	e064      	b.n	800b6f4 <BSP_TS_Init+0x134>
    else
    {
      TS_Capabilities_t Capabilities;
      uint32_t i;
      /* Store parameters on TS context */
      Ts_Ctx[Instance].Width       = TS_Init->Width;
 800b62a:	683b      	ldr	r3, [r7, #0]
 800b62c:	681a      	ldr	r2, [r3, #0]
 800b62e:	4934      	ldr	r1, [pc, #208]	; (800b700 <BSP_TS_Init+0x140>)
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	015b      	lsls	r3, r3, #5
 800b634:	440b      	add	r3, r1
 800b636:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Height      = TS_Init->Height;
 800b638:	683b      	ldr	r3, [r7, #0]
 800b63a:	685a      	ldr	r2, [r3, #4]
 800b63c:	4930      	ldr	r1, [pc, #192]	; (800b700 <BSP_TS_Init+0x140>)
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	015b      	lsls	r3, r3, #5
 800b642:	440b      	add	r3, r1
 800b644:	3304      	adds	r3, #4
 800b646:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Orientation = TS_Init->Orientation;
 800b648:	683b      	ldr	r3, [r7, #0]
 800b64a:	689a      	ldr	r2, [r3, #8]
 800b64c:	492c      	ldr	r1, [pc, #176]	; (800b700 <BSP_TS_Init+0x140>)
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	015b      	lsls	r3, r3, #5
 800b652:	440b      	add	r3, r1
 800b654:	3308      	adds	r3, #8
 800b656:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Accuracy    = TS_Init->Accuracy;
 800b658:	683b      	ldr	r3, [r7, #0]
 800b65a:	68da      	ldr	r2, [r3, #12]
 800b65c:	4928      	ldr	r1, [pc, #160]	; (800b700 <BSP_TS_Init+0x140>)
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	015b      	lsls	r3, r3, #5
 800b662:	440b      	add	r3, r1
 800b664:	330c      	adds	r3, #12
 800b666:	601a      	str	r2, [r3, #0]
      /* Get capabilities to retrieve maximum values of X and Y */
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 800b668:	4b26      	ldr	r3, [pc, #152]	; (800b704 <BSP_TS_Init+0x144>)
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	69db      	ldr	r3, [r3, #28]
 800b66e:	4926      	ldr	r1, [pc, #152]	; (800b708 <BSP_TS_Init+0x148>)
 800b670:	687a      	ldr	r2, [r7, #4]
 800b672:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b676:	f107 010c 	add.w	r1, r7, #12
 800b67a:	4610      	mov	r0, r2
 800b67c:	4798      	blx	r3
 800b67e:	4603      	mov	r3, r0
 800b680:	2b00      	cmp	r3, #0
 800b682:	da03      	bge.n	800b68c <BSP_TS_Init+0xcc>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b684:	f06f 0304 	mvn.w	r3, #4
 800b688:	61fb      	str	r3, [r7, #28]
 800b68a:	e033      	b.n	800b6f4 <BSP_TS_Init+0x134>
      }
      else
      {
        /* Store maximum X and Y on context */
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 800b68c:	693a      	ldr	r2, [r7, #16]
 800b68e:	491c      	ldr	r1, [pc, #112]	; (800b700 <BSP_TS_Init+0x140>)
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	015b      	lsls	r3, r3, #5
 800b694:	440b      	add	r3, r1
 800b696:	3310      	adds	r3, #16
 800b698:	601a      	str	r2, [r3, #0]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 800b69a:	697a      	ldr	r2, [r7, #20]
 800b69c:	4918      	ldr	r1, [pc, #96]	; (800b700 <BSP_TS_Init+0x140>)
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	015b      	lsls	r3, r3, #5
 800b6a2:	440b      	add	r3, r1
 800b6a4:	3314      	adds	r3, #20
 800b6a6:	601a      	str	r2, [r3, #0]
        /* Initialize previous position in order to always detect first touch */
        for(i = 0; i < TS_TOUCH_NBR; i++)
 800b6a8:	2300      	movs	r3, #0
 800b6aa:	61bb      	str	r3, [r7, #24]
 800b6ac:	e01f      	b.n	800b6ee <BSP_TS_Init+0x12e>
        {
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 800b6ae:	683b      	ldr	r3, [r7, #0]
 800b6b0:	681a      	ldr	r2, [r3, #0]
 800b6b2:	683b      	ldr	r3, [r7, #0]
 800b6b4:	68db      	ldr	r3, [r3, #12]
 800b6b6:	4413      	add	r3, r2
 800b6b8:	1c5a      	adds	r2, r3, #1
 800b6ba:	4811      	ldr	r0, [pc, #68]	; (800b700 <BSP_TS_Init+0x140>)
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	00d9      	lsls	r1, r3, #3
 800b6c0:	69bb      	ldr	r3, [r7, #24]
 800b6c2:	440b      	add	r3, r1
 800b6c4:	3306      	adds	r3, #6
 800b6c6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 800b6ca:	683b      	ldr	r3, [r7, #0]
 800b6cc:	685a      	ldr	r2, [r3, #4]
 800b6ce:	683b      	ldr	r3, [r7, #0]
 800b6d0:	68db      	ldr	r3, [r3, #12]
 800b6d2:	4413      	add	r3, r2
 800b6d4:	1c5a      	adds	r2, r3, #1
 800b6d6:	480a      	ldr	r0, [pc, #40]	; (800b700 <BSP_TS_Init+0x140>)
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	00d9      	lsls	r1, r3, #3
 800b6dc:	69bb      	ldr	r3, [r7, #24]
 800b6de:	440b      	add	r3, r1
 800b6e0:	3306      	adds	r3, #6
 800b6e2:	009b      	lsls	r3, r3, #2
 800b6e4:	4403      	add	r3, r0
 800b6e6:	605a      	str	r2, [r3, #4]
        for(i = 0; i < TS_TOUCH_NBR; i++)
 800b6e8:	69bb      	ldr	r3, [r7, #24]
 800b6ea:	3301      	adds	r3, #1
 800b6ec:	61bb      	str	r3, [r7, #24]
 800b6ee:	69bb      	ldr	r3, [r7, #24]
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d0dc      	beq.n	800b6ae <BSP_TS_Init+0xee>
        }
      }
    }
  }

  return ret;
 800b6f4:	69fb      	ldr	r3, [r7, #28]
}
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	3720      	adds	r7, #32
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	bd80      	pop	{r7, pc}
 800b6fe:	bf00      	nop
 800b700:	2400bcec 	.word	0x2400bcec
 800b704:	2400bce4 	.word	0x2400bce4
 800b708:	2400bce8 	.word	0x2400bce8

0800b70c <BSP_TS_GetState>:
  * @param  Instance  TS instance. Could be only 0.
  * @param  TS_State  Pointer to touch screen current state structure
  * @retval BSP status
  */
int32_t BSP_TS_GetState(uint32_t Instance, TS_State_t *TS_State)
{
 800b70c:	b580      	push	{r7, lr}
 800b70e:	b08a      	sub	sp, #40	; 0x28
 800b710:	af00      	add	r7, sp, #0
 800b712:	6078      	str	r0, [r7, #4]
 800b714:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800b716:	2300      	movs	r3, #0
 800b718:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t x_oriented, y_oriented;
  uint32_t x_diff, y_diff;

  if(Instance >= TS_INSTANCES_NBR)
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d003      	beq.n	800b728 <BSP_TS_GetState+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800b720:	f06f 0301 	mvn.w	r3, #1
 800b724:	627b      	str	r3, [r7, #36]	; 0x24
 800b726:	e0f9      	b.n	800b91c <BSP_TS_GetState+0x210>
  else
  {
    FT5336_State_t state;

    /* Get each touch coordinates */
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
 800b728:	4b7f      	ldr	r3, [pc, #508]	; (800b928 <BSP_TS_GetState+0x21c>)
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	691b      	ldr	r3, [r3, #16]
 800b72e:	497f      	ldr	r1, [pc, #508]	; (800b92c <BSP_TS_GetState+0x220>)
 800b730:	687a      	ldr	r2, [r7, #4]
 800b732:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b736:	f107 0108 	add.w	r1, r7, #8
 800b73a:	4610      	mov	r0, r2
 800b73c:	4798      	blx	r3
 800b73e:	4603      	mov	r3, r0
 800b740:	2b00      	cmp	r3, #0
 800b742:	da03      	bge.n	800b74c <BSP_TS_GetState+0x40>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b744:	f06f 0304 	mvn.w	r3, #4
 800b748:	627b      	str	r3, [r7, #36]	; 0x24
 800b74a:	e0e7      	b.n	800b91c <BSP_TS_GetState+0x210>
    }/* Check and update the number of touches active detected */
    else if(state.TouchDetected != 0U)
 800b74c:	68bb      	ldr	r3, [r7, #8]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	f000 80d1 	beq.w	800b8f6 <BSP_TS_GetState+0x1ea>
    {
      x_oriented = state.TouchX;
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	623b      	str	r3, [r7, #32]
      y_oriented = state.TouchY;
 800b758:	693b      	ldr	r3, [r7, #16]
 800b75a:	61fb      	str	r3, [r7, #28]

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 800b75c:	4a74      	ldr	r2, [pc, #464]	; (800b930 <BSP_TS_GetState+0x224>)
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	015b      	lsls	r3, r3, #5
 800b762:	4413      	add	r3, r2
 800b764:	3308      	adds	r3, #8
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	f003 0308 	and.w	r3, r3, #8
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d003      	beq.n	800b778 <BSP_TS_GetState+0x6c>
      {
        x_oriented = state.TouchY;
 800b770:	693b      	ldr	r3, [r7, #16]
 800b772:	623b      	str	r3, [r7, #32]
        y_oriented = state.TouchX;
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	61fb      	str	r3, [r7, #28]
      }

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
 800b778:	4a6d      	ldr	r2, [pc, #436]	; (800b930 <BSP_TS_GetState+0x224>)
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	015b      	lsls	r3, r3, #5
 800b77e:	4413      	add	r3, r2
 800b780:	3308      	adds	r3, #8
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	f003 0302 	and.w	r3, r3, #2
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d009      	beq.n	800b7a0 <BSP_TS_GetState+0x94>
      {
        x_oriented = Ts_Ctx[Instance].MaxX - state.TouchX - 1UL;
 800b78c:	4a68      	ldr	r2, [pc, #416]	; (800b930 <BSP_TS_GetState+0x224>)
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	015b      	lsls	r3, r3, #5
 800b792:	4413      	add	r3, r2
 800b794:	3310      	adds	r3, #16
 800b796:	681a      	ldr	r2, [r3, #0]
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	1ad3      	subs	r3, r2, r3
 800b79c:	3b01      	subs	r3, #1
 800b79e:	623b      	str	r3, [r7, #32]
      }

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
 800b7a0:	4a63      	ldr	r2, [pc, #396]	; (800b930 <BSP_TS_GetState+0x224>)
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	015b      	lsls	r3, r3, #5
 800b7a6:	4413      	add	r3, r2
 800b7a8:	3308      	adds	r3, #8
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	f003 0304 	and.w	r3, r3, #4
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d008      	beq.n	800b7c6 <BSP_TS_GetState+0xba>
      {
        y_oriented = Ts_Ctx[Instance].MaxY - state.TouchY;
 800b7b4:	4a5e      	ldr	r2, [pc, #376]	; (800b930 <BSP_TS_GetState+0x224>)
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	015b      	lsls	r3, r3, #5
 800b7ba:	4413      	add	r3, r2
 800b7bc:	3314      	adds	r3, #20
 800b7be:	681a      	ldr	r2, [r3, #0]
 800b7c0:	693b      	ldr	r3, [r7, #16]
 800b7c2:	1ad3      	subs	r3, r2, r3
 800b7c4:	61fb      	str	r3, [r7, #28]
      }

      /* Apply boundary */
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 800b7c6:	4a5a      	ldr	r2, [pc, #360]	; (800b930 <BSP_TS_GetState+0x224>)
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	015b      	lsls	r3, r3, #5
 800b7cc:	4413      	add	r3, r2
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	6a3a      	ldr	r2, [r7, #32]
 800b7d2:	fb03 f202 	mul.w	r2, r3, r2
 800b7d6:	4956      	ldr	r1, [pc, #344]	; (800b930 <BSP_TS_GetState+0x224>)
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	015b      	lsls	r3, r3, #5
 800b7dc:	440b      	add	r3, r1
 800b7de:	3310      	adds	r3, #16
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	fbb2 f2f3 	udiv	r2, r2, r3
 800b7e6:	683b      	ldr	r3, [r7, #0]
 800b7e8:	605a      	str	r2, [r3, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 800b7ea:	4a51      	ldr	r2, [pc, #324]	; (800b930 <BSP_TS_GetState+0x224>)
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	015b      	lsls	r3, r3, #5
 800b7f0:	4413      	add	r3, r2
 800b7f2:	3304      	adds	r3, #4
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	69fa      	ldr	r2, [r7, #28]
 800b7f8:	fb03 f202 	mul.w	r2, r3, r2
 800b7fc:	494c      	ldr	r1, [pc, #304]	; (800b930 <BSP_TS_GetState+0x224>)
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	015b      	lsls	r3, r3, #5
 800b802:	440b      	add	r3, r1
 800b804:	3314      	adds	r3, #20
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	fbb2 f2f3 	udiv	r2, r2, r3
 800b80c:	683b      	ldr	r3, [r7, #0]
 800b80e:	609a      	str	r2, [r3, #8]
      /* Store Current TS state */
      TS_State->TouchDetected = state.TouchDetected;
 800b810:	68ba      	ldr	r2, [r7, #8]
 800b812:	683b      	ldr	r3, [r7, #0]
 800b814:	601a      	str	r2, [r3, #0]

      /* Check accuracy */
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 800b816:	683b      	ldr	r3, [r7, #0]
 800b818:	685a      	ldr	r2, [r3, #4]
 800b81a:	4945      	ldr	r1, [pc, #276]	; (800b930 <BSP_TS_GetState+0x224>)
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	015b      	lsls	r3, r3, #5
 800b820:	440b      	add	r3, r1
 800b822:	3318      	adds	r3, #24
 800b824:	681b      	ldr	r3, [r3, #0]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 800b826:	429a      	cmp	r2, r3
 800b828:	d909      	bls.n	800b83e <BSP_TS_GetState+0x132>
 800b82a:	683b      	ldr	r3, [r7, #0]
 800b82c:	685a      	ldr	r2, [r3, #4]
 800b82e:	4940      	ldr	r1, [pc, #256]	; (800b930 <BSP_TS_GetState+0x224>)
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	015b      	lsls	r3, r3, #5
 800b834:	440b      	add	r3, r1
 800b836:	3318      	adds	r3, #24
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	1ad3      	subs	r3, r2, r3
 800b83c:	e008      	b.n	800b850 <BSP_TS_GetState+0x144>
        (Ts_Ctx[Instance].PreviousX[0] - TS_State->TouchX);
 800b83e:	4a3c      	ldr	r2, [pc, #240]	; (800b930 <BSP_TS_GetState+0x224>)
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	015b      	lsls	r3, r3, #5
 800b844:	4413      	add	r3, r2
 800b846:	3318      	adds	r3, #24
 800b848:	681a      	ldr	r2, [r3, #0]
 800b84a:	683b      	ldr	r3, [r7, #0]
 800b84c:	685b      	ldr	r3, [r3, #4]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 800b84e:	1ad3      	subs	r3, r2, r3
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 800b850:	61bb      	str	r3, [r7, #24]

        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 800b852:	683b      	ldr	r3, [r7, #0]
 800b854:	689a      	ldr	r2, [r3, #8]
 800b856:	4936      	ldr	r1, [pc, #216]	; (800b930 <BSP_TS_GetState+0x224>)
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	015b      	lsls	r3, r3, #5
 800b85c:	440b      	add	r3, r1
 800b85e:	331c      	adds	r3, #28
 800b860:	681b      	ldr	r3, [r3, #0]
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 800b862:	429a      	cmp	r2, r3
 800b864:	d909      	bls.n	800b87a <BSP_TS_GetState+0x16e>
 800b866:	683b      	ldr	r3, [r7, #0]
 800b868:	689a      	ldr	r2, [r3, #8]
 800b86a:	4931      	ldr	r1, [pc, #196]	; (800b930 <BSP_TS_GetState+0x224>)
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	015b      	lsls	r3, r3, #5
 800b870:	440b      	add	r3, r1
 800b872:	331c      	adds	r3, #28
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	1ad3      	subs	r3, r2, r3
 800b878:	e008      	b.n	800b88c <BSP_TS_GetState+0x180>
          (Ts_Ctx[Instance].PreviousY[0] - TS_State->TouchY);
 800b87a:	4a2d      	ldr	r2, [pc, #180]	; (800b930 <BSP_TS_GetState+0x224>)
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	015b      	lsls	r3, r3, #5
 800b880:	4413      	add	r3, r2
 800b882:	331c      	adds	r3, #28
 800b884:	681a      	ldr	r2, [r3, #0]
 800b886:	683b      	ldr	r3, [r7, #0]
 800b888:	689b      	ldr	r3, [r3, #8]
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 800b88a:	1ad3      	subs	r3, r2, r3
        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 800b88c:	617b      	str	r3, [r7, #20]


          if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 800b88e:	4a28      	ldr	r2, [pc, #160]	; (800b930 <BSP_TS_GetState+0x224>)
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	015b      	lsls	r3, r3, #5
 800b894:	4413      	add	r3, r2
 800b896:	330c      	adds	r3, #12
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	69ba      	ldr	r2, [r7, #24]
 800b89c:	429a      	cmp	r2, r3
 800b89e:	d808      	bhi.n	800b8b2 <BSP_TS_GetState+0x1a6>
 800b8a0:	4a23      	ldr	r2, [pc, #140]	; (800b930 <BSP_TS_GetState+0x224>)
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	015b      	lsls	r3, r3, #5
 800b8a6:	4413      	add	r3, r2
 800b8a8:	330c      	adds	r3, #12
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	697a      	ldr	r2, [r7, #20]
 800b8ae:	429a      	cmp	r2, r3
 800b8b0:	d910      	bls.n	800b8d4 <BSP_TS_GetState+0x1c8>
          {
            /* New touch detected */
            Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
 800b8b2:	683b      	ldr	r3, [r7, #0]
 800b8b4:	685a      	ldr	r2, [r3, #4]
 800b8b6:	491e      	ldr	r1, [pc, #120]	; (800b930 <BSP_TS_GetState+0x224>)
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	015b      	lsls	r3, r3, #5
 800b8bc:	440b      	add	r3, r1
 800b8be:	3318      	adds	r3, #24
 800b8c0:	601a      	str	r2, [r3, #0]
            Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 800b8c2:	683b      	ldr	r3, [r7, #0]
 800b8c4:	689a      	ldr	r2, [r3, #8]
 800b8c6:	491a      	ldr	r1, [pc, #104]	; (800b930 <BSP_TS_GetState+0x224>)
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	015b      	lsls	r3, r3, #5
 800b8cc:	440b      	add	r3, r1
 800b8ce:	331c      	adds	r3, #28
 800b8d0:	601a      	str	r2, [r3, #0]
 800b8d2:	e023      	b.n	800b91c <BSP_TS_GetState+0x210>
          }
          else
          {
            TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 800b8d4:	4a16      	ldr	r2, [pc, #88]	; (800b930 <BSP_TS_GetState+0x224>)
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	015b      	lsls	r3, r3, #5
 800b8da:	4413      	add	r3, r2
 800b8dc:	3318      	adds	r3, #24
 800b8de:	681a      	ldr	r2, [r3, #0]
 800b8e0:	683b      	ldr	r3, [r7, #0]
 800b8e2:	605a      	str	r2, [r3, #4]
            TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 800b8e4:	4a12      	ldr	r2, [pc, #72]	; (800b930 <BSP_TS_GetState+0x224>)
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	015b      	lsls	r3, r3, #5
 800b8ea:	4413      	add	r3, r2
 800b8ec:	331c      	adds	r3, #28
 800b8ee:	681a      	ldr	r2, [r3, #0]
 800b8f0:	683b      	ldr	r3, [r7, #0]
 800b8f2:	609a      	str	r2, [r3, #8]
 800b8f4:	e012      	b.n	800b91c <BSP_TS_GetState+0x210>
          }
    }
    else
    {
      TS_State->TouchDetected = 0U;
 800b8f6:	683b      	ldr	r3, [r7, #0]
 800b8f8:	2200      	movs	r2, #0
 800b8fa:	601a      	str	r2, [r3, #0]
      TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 800b8fc:	4a0c      	ldr	r2, [pc, #48]	; (800b930 <BSP_TS_GetState+0x224>)
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	015b      	lsls	r3, r3, #5
 800b902:	4413      	add	r3, r2
 800b904:	3318      	adds	r3, #24
 800b906:	681a      	ldr	r2, [r3, #0]
 800b908:	683b      	ldr	r3, [r7, #0]
 800b90a:	605a      	str	r2, [r3, #4]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 800b90c:	4a08      	ldr	r2, [pc, #32]	; (800b930 <BSP_TS_GetState+0x224>)
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	015b      	lsls	r3, r3, #5
 800b912:	4413      	add	r3, r2
 800b914:	331c      	adds	r3, #28
 800b916:	681a      	ldr	r2, [r3, #0]
 800b918:	683b      	ldr	r3, [r7, #0]
 800b91a:	609a      	str	r2, [r3, #8]
    }
  }

  return ret;
 800b91c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b91e:	4618      	mov	r0, r3
 800b920:	3728      	adds	r7, #40	; 0x28
 800b922:	46bd      	mov	sp, r7
 800b924:	bd80      	pop	{r7, pc}
 800b926:	bf00      	nop
 800b928:	2400bce4 	.word	0x2400bce4
 800b92c:	2400bce8 	.word	0x2400bce8
 800b930:	2400bcec 	.word	0x2400bcec

0800b934 <FT5336_Probe>:
  * @brief  Register Bus IOs if component ID is OK
  * @param  Instance TS instance. Could be only 0.
  * @retval BSP status
  */
static int32_t FT5336_Probe(uint32_t Instance)
{
 800b934:	b580      	push	{r7, lr}
 800b936:	b08a      	sub	sp, #40	; 0x28
 800b938:	af00      	add	r7, sp, #0
 800b93a:	6078      	str	r0, [r7, #4]
  int32_t ret              = BSP_ERROR_NONE;
 800b93c:	2300      	movs	r3, #0
 800b93e:	627b      	str	r3, [r7, #36]	; 0x24
  FT5336_IO_t              IOCtx;
  static FT5336_Object_t   FT5336Obj;
  uint32_t ft5336_id       = 0;
 800b940:	2300      	movs	r3, #0
 800b942:	60bb      	str	r3, [r7, #8]

  /* Configure the touch screen driver */
  IOCtx.Address     = TS_I2C_ADDRESS;
 800b944:	2370      	movs	r3, #112	; 0x70
 800b946:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = BSP_I2C4_Init;
 800b948:	4b23      	ldr	r3, [pc, #140]	; (800b9d8 <FT5336_Probe+0xa4>)
 800b94a:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 800b94c:	4b23      	ldr	r3, [pc, #140]	; (800b9dc <FT5336_Probe+0xa8>)
 800b94e:	613b      	str	r3, [r7, #16]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 800b950:	4b23      	ldr	r3, [pc, #140]	; (800b9e0 <FT5336_Probe+0xac>)
 800b952:	61fb      	str	r3, [r7, #28]
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 800b954:	4b23      	ldr	r3, [pc, #140]	; (800b9e4 <FT5336_Probe+0xb0>)
 800b956:	61bb      	str	r3, [r7, #24]
  IOCtx.GetTick     = BSP_GetTick;
 800b958:	4b23      	ldr	r3, [pc, #140]	; (800b9e8 <FT5336_Probe+0xb4>)
 800b95a:	623b      	str	r3, [r7, #32]

  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
 800b95c:	f107 030c 	add.w	r3, r7, #12
 800b960:	4619      	mov	r1, r3
 800b962:	4822      	ldr	r0, [pc, #136]	; (800b9ec <FT5336_Probe+0xb8>)
 800b964:	f7fd fb58 	bl	8009018 <FT5336_RegisterBusIO>
 800b968:	4603      	mov	r3, r0
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d003      	beq.n	800b976 <FT5336_Probe+0x42>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 800b96e:	f06f 0307 	mvn.w	r3, #7
 800b972:	627b      	str	r3, [r7, #36]	; 0x24
 800b974:	e02a      	b.n	800b9cc <FT5336_Probe+0x98>
  }
  else if(FT5336_ReadID(&FT5336Obj, &ft5336_id) != FT5336_OK)
 800b976:	f107 0308 	add.w	r3, r7, #8
 800b97a:	4619      	mov	r1, r3
 800b97c:	481b      	ldr	r0, [pc, #108]	; (800b9ec <FT5336_Probe+0xb8>)
 800b97e:	f7fd fc45 	bl	800920c <FT5336_ReadID>
 800b982:	4603      	mov	r3, r0
 800b984:	2b00      	cmp	r3, #0
 800b986:	d003      	beq.n	800b990 <FT5336_Probe+0x5c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800b988:	f06f 0304 	mvn.w	r3, #4
 800b98c:	627b      	str	r3, [r7, #36]	; 0x24
 800b98e:	e01d      	b.n	800b9cc <FT5336_Probe+0x98>
  }
  else if(ft5336_id != FT5336_ID)
 800b990:	68bb      	ldr	r3, [r7, #8]
 800b992:	2b51      	cmp	r3, #81	; 0x51
 800b994:	d003      	beq.n	800b99e <FT5336_Probe+0x6a>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b996:	f06f 0306 	mvn.w	r3, #6
 800b99a:	627b      	str	r3, [r7, #36]	; 0x24
 800b99c:	e016      	b.n	800b9cc <FT5336_Probe+0x98>
  }
  else
  {
    Ts_CompObj[Instance] = &FT5336Obj;
 800b99e:	4a14      	ldr	r2, [pc, #80]	; (800b9f0 <FT5336_Probe+0xbc>)
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	4912      	ldr	r1, [pc, #72]	; (800b9ec <FT5336_Probe+0xb8>)
 800b9a4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
 800b9a8:	4b12      	ldr	r3, [pc, #72]	; (800b9f4 <FT5336_Probe+0xc0>)
 800b9aa:	4a13      	ldr	r2, [pc, #76]	; (800b9f8 <FT5336_Probe+0xc4>)
 800b9ac:	601a      	str	r2, [r3, #0]

    if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT5336_OK)
 800b9ae:	4b11      	ldr	r3, [pc, #68]	; (800b9f4 <FT5336_Probe+0xc0>)
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	490e      	ldr	r1, [pc, #56]	; (800b9f0 <FT5336_Probe+0xbc>)
 800b9b6:	687a      	ldr	r2, [r7, #4]
 800b9b8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b9bc:	4610      	mov	r0, r2
 800b9be:	4798      	blx	r3
 800b9c0:	4603      	mov	r3, r0
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d002      	beq.n	800b9cc <FT5336_Probe+0x98>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b9c6:	f06f 0304 	mvn.w	r3, #4
 800b9ca:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }

  return ret;
 800b9cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	3728      	adds	r7, #40	; 0x28
 800b9d2:	46bd      	mov	sp, r7
 800b9d4:	bd80      	pop	{r7, pc}
 800b9d6:	bf00      	nop
 800b9d8:	0800a019 	.word	0x0800a019
 800b9dc:	0800a08d 	.word	0x0800a08d
 800b9e0:	0800a1b5 	.word	0x0800a1b5
 800b9e4:	0800a159 	.word	0x0800a159
 800b9e8:	0800a211 	.word	0x0800a211
 800b9ec:	2400bd0c 	.word	0x2400bd0c
 800b9f0:	2400bce8 	.word	0x2400bce8
 800b9f4:	2400bce4 	.word	0x2400bce4
 800b9f8:	24000024 	.word	0x24000024

0800b9fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800b9fc:	b480      	push	{r7}
 800b9fe:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800ba00:	4b29      	ldr	r3, [pc, #164]	; (800baa8 <SystemInit+0xac>)
 800ba02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba06:	4a28      	ldr	r2, [pc, #160]	; (800baa8 <SystemInit+0xac>)
 800ba08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ba0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800ba10:	4b26      	ldr	r3, [pc, #152]	; (800baac <SystemInit+0xb0>)
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	4a25      	ldr	r2, [pc, #148]	; (800baac <SystemInit+0xb0>)
 800ba16:	f043 0301 	orr.w	r3, r3, #1
 800ba1a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800ba1c:	4b23      	ldr	r3, [pc, #140]	; (800baac <SystemInit+0xb0>)
 800ba1e:	2200      	movs	r2, #0
 800ba20:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800ba22:	4b22      	ldr	r3, [pc, #136]	; (800baac <SystemInit+0xb0>)
 800ba24:	681a      	ldr	r2, [r3, #0]
 800ba26:	4921      	ldr	r1, [pc, #132]	; (800baac <SystemInit+0xb0>)
 800ba28:	4b21      	ldr	r3, [pc, #132]	; (800bab0 <SystemInit+0xb4>)
 800ba2a:	4013      	ands	r3, r2
 800ba2c:	600b      	str	r3, [r1, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 800ba2e:	4b1f      	ldr	r3, [pc, #124]	; (800baac <SystemInit+0xb0>)
 800ba30:	2200      	movs	r2, #0
 800ba32:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 800ba34:	4b1d      	ldr	r3, [pc, #116]	; (800baac <SystemInit+0xb0>)
 800ba36:	2200      	movs	r2, #0
 800ba38:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 800ba3a:	4b1c      	ldr	r3, [pc, #112]	; (800baac <SystemInit+0xb0>)
 800ba3c:	2200      	movs	r2, #0
 800ba3e:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 800ba40:	4b1a      	ldr	r3, [pc, #104]	; (800baac <SystemInit+0xb0>)
 800ba42:	2200      	movs	r2, #0
 800ba44:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 800ba46:	4b19      	ldr	r3, [pc, #100]	; (800baac <SystemInit+0xb0>)
 800ba48:	2200      	movs	r2, #0
 800ba4a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 800ba4c:	4b17      	ldr	r3, [pc, #92]	; (800baac <SystemInit+0xb0>)
 800ba4e:	2200      	movs	r2, #0
 800ba50:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800ba52:	4b16      	ldr	r3, [pc, #88]	; (800baac <SystemInit+0xb0>)
 800ba54:	2200      	movs	r2, #0
 800ba56:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 800ba58:	4b14      	ldr	r3, [pc, #80]	; (800baac <SystemInit+0xb0>)
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800ba5e:	4b13      	ldr	r3, [pc, #76]	; (800baac <SystemInit+0xb0>)
 800ba60:	2200      	movs	r2, #0
 800ba62:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 800ba64:	4b11      	ldr	r3, [pc, #68]	; (800baac <SystemInit+0xb0>)
 800ba66:	2200      	movs	r2, #0
 800ba68:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800ba6a:	4b10      	ldr	r3, [pc, #64]	; (800baac <SystemInit+0xb0>)
 800ba6c:	2200      	movs	r2, #0
 800ba6e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800ba70:	4b0e      	ldr	r3, [pc, #56]	; (800baac <SystemInit+0xb0>)
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	4a0d      	ldr	r2, [pc, #52]	; (800baac <SystemInit+0xb0>)
 800ba76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ba7a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800ba7c:	4b0b      	ldr	r3, [pc, #44]	; (800baac <SystemInit+0xb0>)
 800ba7e:	2200      	movs	r2, #0
 800ba80:	661a      	str	r2, [r3, #96]	; 0x60
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800ba82:	4b0c      	ldr	r3, [pc, #48]	; (800bab4 <SystemInit+0xb8>)
 800ba84:	681a      	ldr	r2, [r3, #0]
 800ba86:	4b0c      	ldr	r3, [pc, #48]	; (800bab8 <SystemInit+0xbc>)
 800ba88:	4013      	ands	r3, r2
 800ba8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ba8e:	d202      	bcs.n	800ba96 <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800ba90:	4b0a      	ldr	r3, [pc, #40]	; (800babc <SystemInit+0xc0>)
 800ba92:	2201      	movs	r2, #1
 800ba94:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800ba96:	4b04      	ldr	r3, [pc, #16]	; (800baa8 <SystemInit+0xac>)
 800ba98:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800ba9c:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800ba9e:	bf00      	nop
 800baa0:	46bd      	mov	sp, r7
 800baa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa6:	4770      	bx	lr
 800baa8:	e000ed00 	.word	0xe000ed00
 800baac:	58024400 	.word	0x58024400
 800bab0:	eaf6ed7f 	.word	0xeaf6ed7f
 800bab4:	5c001000 	.word	0x5c001000
 800bab8:	ffff0000 	.word	0xffff0000
 800babc:	51008108 	.word	0x51008108

0800bac0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800bac0:	b580      	push	{r7, lr}
 800bac2:	b082      	sub	sp, #8
 800bac4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800bac6:	2003      	movs	r0, #3
 800bac8:	f000 f94b 	bl	800bd62 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800bacc:	f006 fb44 	bl	8012158 <HAL_RCC_GetSysClockFreq>
 800bad0:	4602      	mov	r2, r0
 800bad2:	4b15      	ldr	r3, [pc, #84]	; (800bb28 <HAL_Init+0x68>)
 800bad4:	699b      	ldr	r3, [r3, #24]
 800bad6:	0a1b      	lsrs	r3, r3, #8
 800bad8:	f003 030f 	and.w	r3, r3, #15
 800badc:	4913      	ldr	r1, [pc, #76]	; (800bb2c <HAL_Init+0x6c>)
 800bade:	5ccb      	ldrb	r3, [r1, r3]
 800bae0:	f003 031f 	and.w	r3, r3, #31
 800bae4:	fa22 f303 	lsr.w	r3, r2, r3
 800bae8:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800baea:	4b0f      	ldr	r3, [pc, #60]	; (800bb28 <HAL_Init+0x68>)
 800baec:	699b      	ldr	r3, [r3, #24]
 800baee:	f003 030f 	and.w	r3, r3, #15
 800baf2:	4a0e      	ldr	r2, [pc, #56]	; (800bb2c <HAL_Init+0x6c>)
 800baf4:	5cd3      	ldrb	r3, [r2, r3]
 800baf6:	f003 031f 	and.w	r3, r3, #31
 800bafa:	687a      	ldr	r2, [r7, #4]
 800bafc:	fa22 f303 	lsr.w	r3, r2, r3
 800bb00:	4a0b      	ldr	r2, [pc, #44]	; (800bb30 <HAL_Init+0x70>)
 800bb02:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800bb04:	4a0b      	ldr	r2, [pc, #44]	; (800bb34 <HAL_Init+0x74>)
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800bb0a:	2000      	movs	r0, #0
 800bb0c:	f7fb fa8c 	bl	8007028 <HAL_InitTick>
 800bb10:	4603      	mov	r3, r0
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d001      	beq.n	800bb1a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800bb16:	2301      	movs	r3, #1
 800bb18:	e002      	b.n	800bb20 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800bb1a:	f7fa feb1 	bl	8006880 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800bb1e:	2300      	movs	r3, #0
}
 800bb20:	4618      	mov	r0, r3
 800bb22:	3708      	adds	r7, #8
 800bb24:	46bd      	mov	sp, r7
 800bb26:	bd80      	pop	{r7, pc}
 800bb28:	58024400 	.word	0x58024400
 800bb2c:	0802a3c8 	.word	0x0802a3c8
 800bb30:	24000058 	.word	0x24000058
 800bb34:	24000054 	.word	0x24000054

0800bb38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800bb38:	b480      	push	{r7}
 800bb3a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800bb3c:	4b06      	ldr	r3, [pc, #24]	; (800bb58 <HAL_IncTick+0x20>)
 800bb3e:	781b      	ldrb	r3, [r3, #0]
 800bb40:	461a      	mov	r2, r3
 800bb42:	4b06      	ldr	r3, [pc, #24]	; (800bb5c <HAL_IncTick+0x24>)
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	4413      	add	r3, r2
 800bb48:	4a04      	ldr	r2, [pc, #16]	; (800bb5c <HAL_IncTick+0x24>)
 800bb4a:	6013      	str	r3, [r2, #0]
}
 800bb4c:	bf00      	nop
 800bb4e:	46bd      	mov	sp, r7
 800bb50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb54:	4770      	bx	lr
 800bb56:	bf00      	nop
 800bb58:	24000060 	.word	0x24000060
 800bb5c:	2400bd34 	.word	0x2400bd34

0800bb60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800bb60:	b480      	push	{r7}
 800bb62:	af00      	add	r7, sp, #0
  return uwTick;
 800bb64:	4b03      	ldr	r3, [pc, #12]	; (800bb74 <HAL_GetTick+0x14>)
 800bb66:	681b      	ldr	r3, [r3, #0]
}
 800bb68:	4618      	mov	r0, r3
 800bb6a:	46bd      	mov	sp, r7
 800bb6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb70:	4770      	bx	lr
 800bb72:	bf00      	nop
 800bb74:	2400bd34 	.word	0x2400bd34

0800bb78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800bb78:	b580      	push	{r7, lr}
 800bb7a:	b084      	sub	sp, #16
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800bb80:	f7ff ffee 	bl	800bb60 <HAL_GetTick>
 800bb84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb90:	d005      	beq.n	800bb9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800bb92:	4b0a      	ldr	r3, [pc, #40]	; (800bbbc <HAL_Delay+0x44>)
 800bb94:	781b      	ldrb	r3, [r3, #0]
 800bb96:	461a      	mov	r2, r3
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	4413      	add	r3, r2
 800bb9c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800bb9e:	bf00      	nop
 800bba0:	f7ff ffde 	bl	800bb60 <HAL_GetTick>
 800bba4:	4602      	mov	r2, r0
 800bba6:	68bb      	ldr	r3, [r7, #8]
 800bba8:	1ad3      	subs	r3, r2, r3
 800bbaa:	68fa      	ldr	r2, [r7, #12]
 800bbac:	429a      	cmp	r2, r3
 800bbae:	d8f7      	bhi.n	800bba0 <HAL_Delay+0x28>
  {
  }
}
 800bbb0:	bf00      	nop
 800bbb2:	bf00      	nop
 800bbb4:	3710      	adds	r7, #16
 800bbb6:	46bd      	mov	sp, r7
 800bbb8:	bd80      	pop	{r7, pc}
 800bbba:	bf00      	nop
 800bbbc:	24000060 	.word	0x24000060

0800bbc0 <__NVIC_SetPriorityGrouping>:
{
 800bbc0:	b480      	push	{r7}
 800bbc2:	b085      	sub	sp, #20
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	f003 0307 	and.w	r3, r3, #7
 800bbce:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800bbd0:	4b0b      	ldr	r3, [pc, #44]	; (800bc00 <__NVIC_SetPriorityGrouping+0x40>)
 800bbd2:	68db      	ldr	r3, [r3, #12]
 800bbd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800bbd6:	68ba      	ldr	r2, [r7, #8]
 800bbd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800bbdc:	4013      	ands	r3, r2
 800bbde:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800bbe4:	68bb      	ldr	r3, [r7, #8]
 800bbe6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800bbe8:	4b06      	ldr	r3, [pc, #24]	; (800bc04 <__NVIC_SetPriorityGrouping+0x44>)
 800bbea:	4313      	orrs	r3, r2
 800bbec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800bbee:	4a04      	ldr	r2, [pc, #16]	; (800bc00 <__NVIC_SetPriorityGrouping+0x40>)
 800bbf0:	68bb      	ldr	r3, [r7, #8]
 800bbf2:	60d3      	str	r3, [r2, #12]
}
 800bbf4:	bf00      	nop
 800bbf6:	3714      	adds	r7, #20
 800bbf8:	46bd      	mov	sp, r7
 800bbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfe:	4770      	bx	lr
 800bc00:	e000ed00 	.word	0xe000ed00
 800bc04:	05fa0000 	.word	0x05fa0000

0800bc08 <__NVIC_GetPriorityGrouping>:
{
 800bc08:	b480      	push	{r7}
 800bc0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800bc0c:	4b04      	ldr	r3, [pc, #16]	; (800bc20 <__NVIC_GetPriorityGrouping+0x18>)
 800bc0e:	68db      	ldr	r3, [r3, #12]
 800bc10:	0a1b      	lsrs	r3, r3, #8
 800bc12:	f003 0307 	and.w	r3, r3, #7
}
 800bc16:	4618      	mov	r0, r3
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc1e:	4770      	bx	lr
 800bc20:	e000ed00 	.word	0xe000ed00

0800bc24 <__NVIC_EnableIRQ>:
{
 800bc24:	b480      	push	{r7}
 800bc26:	b083      	sub	sp, #12
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	4603      	mov	r3, r0
 800bc2c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800bc2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	db0b      	blt.n	800bc4e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800bc36:	88fb      	ldrh	r3, [r7, #6]
 800bc38:	f003 021f 	and.w	r2, r3, #31
 800bc3c:	4907      	ldr	r1, [pc, #28]	; (800bc5c <__NVIC_EnableIRQ+0x38>)
 800bc3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bc42:	095b      	lsrs	r3, r3, #5
 800bc44:	2001      	movs	r0, #1
 800bc46:	fa00 f202 	lsl.w	r2, r0, r2
 800bc4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800bc4e:	bf00      	nop
 800bc50:	370c      	adds	r7, #12
 800bc52:	46bd      	mov	sp, r7
 800bc54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc58:	4770      	bx	lr
 800bc5a:	bf00      	nop
 800bc5c:	e000e100 	.word	0xe000e100

0800bc60 <__NVIC_DisableIRQ>:
{
 800bc60:	b480      	push	{r7}
 800bc62:	b083      	sub	sp, #12
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	4603      	mov	r3, r0
 800bc68:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800bc6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	db12      	blt.n	800bc98 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800bc72:	88fb      	ldrh	r3, [r7, #6]
 800bc74:	f003 021f 	and.w	r2, r3, #31
 800bc78:	490a      	ldr	r1, [pc, #40]	; (800bca4 <__NVIC_DisableIRQ+0x44>)
 800bc7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bc7e:	095b      	lsrs	r3, r3, #5
 800bc80:	2001      	movs	r0, #1
 800bc82:	fa00 f202 	lsl.w	r2, r0, r2
 800bc86:	3320      	adds	r3, #32
 800bc88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800bc8c:	f3bf 8f4f 	dsb	sy
}
 800bc90:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800bc92:	f3bf 8f6f 	isb	sy
}
 800bc96:	bf00      	nop
}
 800bc98:	bf00      	nop
 800bc9a:	370c      	adds	r7, #12
 800bc9c:	46bd      	mov	sp, r7
 800bc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca2:	4770      	bx	lr
 800bca4:	e000e100 	.word	0xe000e100

0800bca8 <__NVIC_SetPriority>:
{
 800bca8:	b480      	push	{r7}
 800bcaa:	b083      	sub	sp, #12
 800bcac:	af00      	add	r7, sp, #0
 800bcae:	4603      	mov	r3, r0
 800bcb0:	6039      	str	r1, [r7, #0]
 800bcb2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800bcb4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	db0a      	blt.n	800bcd2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bcbc:	683b      	ldr	r3, [r7, #0]
 800bcbe:	b2da      	uxtb	r2, r3
 800bcc0:	490c      	ldr	r1, [pc, #48]	; (800bcf4 <__NVIC_SetPriority+0x4c>)
 800bcc2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bcc6:	0112      	lsls	r2, r2, #4
 800bcc8:	b2d2      	uxtb	r2, r2
 800bcca:	440b      	add	r3, r1
 800bccc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800bcd0:	e00a      	b.n	800bce8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bcd2:	683b      	ldr	r3, [r7, #0]
 800bcd4:	b2da      	uxtb	r2, r3
 800bcd6:	4908      	ldr	r1, [pc, #32]	; (800bcf8 <__NVIC_SetPriority+0x50>)
 800bcd8:	88fb      	ldrh	r3, [r7, #6]
 800bcda:	f003 030f 	and.w	r3, r3, #15
 800bcde:	3b04      	subs	r3, #4
 800bce0:	0112      	lsls	r2, r2, #4
 800bce2:	b2d2      	uxtb	r2, r2
 800bce4:	440b      	add	r3, r1
 800bce6:	761a      	strb	r2, [r3, #24]
}
 800bce8:	bf00      	nop
 800bcea:	370c      	adds	r7, #12
 800bcec:	46bd      	mov	sp, r7
 800bcee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf2:	4770      	bx	lr
 800bcf4:	e000e100 	.word	0xe000e100
 800bcf8:	e000ed00 	.word	0xe000ed00

0800bcfc <NVIC_EncodePriority>:
{
 800bcfc:	b480      	push	{r7}
 800bcfe:	b089      	sub	sp, #36	; 0x24
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	60f8      	str	r0, [r7, #12]
 800bd04:	60b9      	str	r1, [r7, #8]
 800bd06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	f003 0307 	and.w	r3, r3, #7
 800bd0e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800bd10:	69fb      	ldr	r3, [r7, #28]
 800bd12:	f1c3 0307 	rsb	r3, r3, #7
 800bd16:	2b04      	cmp	r3, #4
 800bd18:	bf28      	it	cs
 800bd1a:	2304      	movcs	r3, #4
 800bd1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800bd1e:	69fb      	ldr	r3, [r7, #28]
 800bd20:	3304      	adds	r3, #4
 800bd22:	2b06      	cmp	r3, #6
 800bd24:	d902      	bls.n	800bd2c <NVIC_EncodePriority+0x30>
 800bd26:	69fb      	ldr	r3, [r7, #28]
 800bd28:	3b03      	subs	r3, #3
 800bd2a:	e000      	b.n	800bd2e <NVIC_EncodePriority+0x32>
 800bd2c:	2300      	movs	r3, #0
 800bd2e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800bd30:	f04f 32ff 	mov.w	r2, #4294967295
 800bd34:	69bb      	ldr	r3, [r7, #24]
 800bd36:	fa02 f303 	lsl.w	r3, r2, r3
 800bd3a:	43da      	mvns	r2, r3
 800bd3c:	68bb      	ldr	r3, [r7, #8]
 800bd3e:	401a      	ands	r2, r3
 800bd40:	697b      	ldr	r3, [r7, #20]
 800bd42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800bd44:	f04f 31ff 	mov.w	r1, #4294967295
 800bd48:	697b      	ldr	r3, [r7, #20]
 800bd4a:	fa01 f303 	lsl.w	r3, r1, r3
 800bd4e:	43d9      	mvns	r1, r3
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800bd54:	4313      	orrs	r3, r2
}
 800bd56:	4618      	mov	r0, r3
 800bd58:	3724      	adds	r7, #36	; 0x24
 800bd5a:	46bd      	mov	sp, r7
 800bd5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd60:	4770      	bx	lr

0800bd62 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800bd62:	b580      	push	{r7, lr}
 800bd64:	b082      	sub	sp, #8
 800bd66:	af00      	add	r7, sp, #0
 800bd68:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800bd6a:	6878      	ldr	r0, [r7, #4]
 800bd6c:	f7ff ff28 	bl	800bbc0 <__NVIC_SetPriorityGrouping>
}
 800bd70:	bf00      	nop
 800bd72:	3708      	adds	r7, #8
 800bd74:	46bd      	mov	sp, r7
 800bd76:	bd80      	pop	{r7, pc}

0800bd78 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800bd78:	b580      	push	{r7, lr}
 800bd7a:	b086      	sub	sp, #24
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	4603      	mov	r3, r0
 800bd80:	60b9      	str	r1, [r7, #8]
 800bd82:	607a      	str	r2, [r7, #4]
 800bd84:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800bd86:	f7ff ff3f 	bl	800bc08 <__NVIC_GetPriorityGrouping>
 800bd8a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800bd8c:	687a      	ldr	r2, [r7, #4]
 800bd8e:	68b9      	ldr	r1, [r7, #8]
 800bd90:	6978      	ldr	r0, [r7, #20]
 800bd92:	f7ff ffb3 	bl	800bcfc <NVIC_EncodePriority>
 800bd96:	4602      	mov	r2, r0
 800bd98:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800bd9c:	4611      	mov	r1, r2
 800bd9e:	4618      	mov	r0, r3
 800bda0:	f7ff ff82 	bl	800bca8 <__NVIC_SetPriority>
}
 800bda4:	bf00      	nop
 800bda6:	3718      	adds	r7, #24
 800bda8:	46bd      	mov	sp, r7
 800bdaa:	bd80      	pop	{r7, pc}

0800bdac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800bdac:	b580      	push	{r7, lr}
 800bdae:	b082      	sub	sp, #8
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	4603      	mov	r3, r0
 800bdb4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800bdb6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bdba:	4618      	mov	r0, r3
 800bdbc:	f7ff ff32 	bl	800bc24 <__NVIC_EnableIRQ>
}
 800bdc0:	bf00      	nop
 800bdc2:	3708      	adds	r7, #8
 800bdc4:	46bd      	mov	sp, r7
 800bdc6:	bd80      	pop	{r7, pc}

0800bdc8 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	b082      	sub	sp, #8
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	4603      	mov	r3, r0
 800bdd0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800bdd2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bdd6:	4618      	mov	r0, r3
 800bdd8:	f7ff ff42 	bl	800bc60 <__NVIC_DisableIRQ>
}
 800bddc:	bf00      	nop
 800bdde:	3708      	adds	r7, #8
 800bde0:	46bd      	mov	sp, r7
 800bde2:	bd80      	pop	{r7, pc}

0800bde4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800bde4:	b480      	push	{r7}
 800bde6:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 800bde8:	f3bf 8f5f 	dmb	sy
}
 800bdec:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800bdee:	4b07      	ldr	r3, [pc, #28]	; (800be0c <HAL_MPU_Disable+0x28>)
 800bdf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdf2:	4a06      	ldr	r2, [pc, #24]	; (800be0c <HAL_MPU_Disable+0x28>)
 800bdf4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bdf8:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800bdfa:	4b05      	ldr	r3, [pc, #20]	; (800be10 <HAL_MPU_Disable+0x2c>)
 800bdfc:	2200      	movs	r2, #0
 800bdfe:	605a      	str	r2, [r3, #4]
}
 800be00:	bf00      	nop
 800be02:	46bd      	mov	sp, r7
 800be04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be08:	4770      	bx	lr
 800be0a:	bf00      	nop
 800be0c:	e000ed00 	.word	0xe000ed00
 800be10:	e000ed90 	.word	0xe000ed90

0800be14 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800be14:	b480      	push	{r7}
 800be16:	b083      	sub	sp, #12
 800be18:	af00      	add	r7, sp, #0
 800be1a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800be1c:	4a0b      	ldr	r2, [pc, #44]	; (800be4c <HAL_MPU_Enable+0x38>)
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	f043 0301 	orr.w	r3, r3, #1
 800be24:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800be26:	4b0a      	ldr	r3, [pc, #40]	; (800be50 <HAL_MPU_Enable+0x3c>)
 800be28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be2a:	4a09      	ldr	r2, [pc, #36]	; (800be50 <HAL_MPU_Enable+0x3c>)
 800be2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800be30:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800be32:	f3bf 8f4f 	dsb	sy
}
 800be36:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800be38:	f3bf 8f6f 	isb	sy
}
 800be3c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800be3e:	bf00      	nop
 800be40:	370c      	adds	r7, #12
 800be42:	46bd      	mov	sp, r7
 800be44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be48:	4770      	bx	lr
 800be4a:	bf00      	nop
 800be4c:	e000ed90 	.word	0xe000ed90
 800be50:	e000ed00 	.word	0xe000ed00

0800be54 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 800be54:	b480      	push	{r7}
 800be56:	b083      	sub	sp, #12
 800be58:	af00      	add	r7, sp, #0
 800be5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	785a      	ldrb	r2, [r3, #1]
 800be60:	4b1d      	ldr	r3, [pc, #116]	; (800bed8 <HAL_MPU_ConfigRegion+0x84>)
 800be62:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	781b      	ldrb	r3, [r3, #0]
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d029      	beq.n	800bec0 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 800be6c:	4a1a      	ldr	r2, [pc, #104]	; (800bed8 <HAL_MPU_ConfigRegion+0x84>)
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	685b      	ldr	r3, [r3, #4]
 800be72:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	7b1b      	ldrb	r3, [r3, #12]
 800be78:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	7adb      	ldrb	r3, [r3, #11]
 800be7e:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800be80:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	7a9b      	ldrb	r3, [r3, #10]
 800be86:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800be88:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	7b5b      	ldrb	r3, [r3, #13]
 800be8e:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800be90:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	7b9b      	ldrb	r3, [r3, #14]
 800be96:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800be98:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	7bdb      	ldrb	r3, [r3, #15]
 800be9e:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800bea0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	7a5b      	ldrb	r3, [r3, #9]
 800bea6:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800bea8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	7a1b      	ldrb	r3, [r3, #8]
 800beae:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800beb0:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800beb2:	687a      	ldr	r2, [r7, #4]
 800beb4:	7812      	ldrb	r2, [r2, #0]
 800beb6:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800beb8:	4a07      	ldr	r2, [pc, #28]	; (800bed8 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800beba:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800bebc:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 800bebe:	e005      	b.n	800becc <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 800bec0:	4b05      	ldr	r3, [pc, #20]	; (800bed8 <HAL_MPU_ConfigRegion+0x84>)
 800bec2:	2200      	movs	r2, #0
 800bec4:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 800bec6:	4b04      	ldr	r3, [pc, #16]	; (800bed8 <HAL_MPU_ConfigRegion+0x84>)
 800bec8:	2200      	movs	r2, #0
 800beca:	611a      	str	r2, [r3, #16]
}
 800becc:	bf00      	nop
 800bece:	370c      	adds	r7, #12
 800bed0:	46bd      	mov	sp, r7
 800bed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed6:	4770      	bx	lr
 800bed8:	e000ed90 	.word	0xe000ed90

0800bedc <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800bedc:	b580      	push	{r7, lr}
 800bede:	b082      	sub	sp, #8
 800bee0:	af00      	add	r7, sp, #0
 800bee2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d101      	bne.n	800beee <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800beea:	2301      	movs	r3, #1
 800beec:	e054      	b.n	800bf98 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	7f5b      	ldrb	r3, [r3, #29]
 800bef2:	b2db      	uxtb	r3, r3
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d105      	bne.n	800bf04 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	2200      	movs	r2, #0
 800befc:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800befe:	6878      	ldr	r0, [r7, #4]
 800bf00:	f7fa fcdc 	bl	80068bc <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	2202      	movs	r2, #2
 800bf08:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	791b      	ldrb	r3, [r3, #4]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d10c      	bne.n	800bf2c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	4a22      	ldr	r2, [pc, #136]	; (800bfa0 <HAL_CRC_Init+0xc4>)
 800bf18:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	689a      	ldr	r2, [r3, #8]
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	f022 0218 	bic.w	r2, r2, #24
 800bf28:	609a      	str	r2, [r3, #8]
 800bf2a:	e00c      	b.n	800bf46 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	6899      	ldr	r1, [r3, #8]
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	68db      	ldr	r3, [r3, #12]
 800bf34:	461a      	mov	r2, r3
 800bf36:	6878      	ldr	r0, [r7, #4]
 800bf38:	f000 f834 	bl	800bfa4 <HAL_CRCEx_Polynomial_Set>
 800bf3c:	4603      	mov	r3, r0
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d001      	beq.n	800bf46 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800bf42:	2301      	movs	r3, #1
 800bf44:	e028      	b.n	800bf98 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	795b      	ldrb	r3, [r3, #5]
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d105      	bne.n	800bf5a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	f04f 32ff 	mov.w	r2, #4294967295
 800bf56:	611a      	str	r2, [r3, #16]
 800bf58:	e004      	b.n	800bf64 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	687a      	ldr	r2, [r7, #4]
 800bf60:	6912      	ldr	r2, [r2, #16]
 800bf62:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	689b      	ldr	r3, [r3, #8]
 800bf6a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	695a      	ldr	r2, [r3, #20]
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	430a      	orrs	r2, r1
 800bf78:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	689b      	ldr	r3, [r3, #8]
 800bf80:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	699a      	ldr	r2, [r3, #24]
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	430a      	orrs	r2, r1
 800bf8e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	2201      	movs	r2, #1
 800bf94:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800bf96:	2300      	movs	r3, #0
}
 800bf98:	4618      	mov	r0, r3
 800bf9a:	3708      	adds	r7, #8
 800bf9c:	46bd      	mov	sp, r7
 800bf9e:	bd80      	pop	{r7, pc}
 800bfa0:	04c11db7 	.word	0x04c11db7

0800bfa4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800bfa4:	b480      	push	{r7}
 800bfa6:	b087      	sub	sp, #28
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	60f8      	str	r0, [r7, #12]
 800bfac:	60b9      	str	r1, [r7, #8]
 800bfae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bfb0:	2300      	movs	r3, #0
 800bfb2:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800bfb4:	231f      	movs	r3, #31
 800bfb6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */ 
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 800bfb8:	68bb      	ldr	r3, [r7, #8]
 800bfba:	f003 0301 	and.w	r3, r3, #1
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d102      	bne.n	800bfc8 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 800bfc2:	2301      	movs	r3, #1
 800bfc4:	75fb      	strb	r3, [r7, #23]
 800bfc6:	e063      	b.n	800c090 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800bfc8:	bf00      	nop
 800bfca:	693b      	ldr	r3, [r7, #16]
 800bfcc:	1e5a      	subs	r2, r3, #1
 800bfce:	613a      	str	r2, [r7, #16]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d009      	beq.n	800bfe8 <HAL_CRCEx_Polynomial_Set+0x44>
 800bfd4:	693b      	ldr	r3, [r7, #16]
 800bfd6:	f003 031f 	and.w	r3, r3, #31
 800bfda:	68ba      	ldr	r2, [r7, #8]
 800bfdc:	fa22 f303 	lsr.w	r3, r2, r3
 800bfe0:	f003 0301 	and.w	r3, r3, #1
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d0f0      	beq.n	800bfca <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	2b18      	cmp	r3, #24
 800bfec:	d846      	bhi.n	800c07c <HAL_CRCEx_Polynomial_Set+0xd8>
 800bfee:	a201      	add	r2, pc, #4	; (adr r2, 800bff4 <HAL_CRCEx_Polynomial_Set+0x50>)
 800bff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bff4:	0800c083 	.word	0x0800c083
 800bff8:	0800c07d 	.word	0x0800c07d
 800bffc:	0800c07d 	.word	0x0800c07d
 800c000:	0800c07d 	.word	0x0800c07d
 800c004:	0800c07d 	.word	0x0800c07d
 800c008:	0800c07d 	.word	0x0800c07d
 800c00c:	0800c07d 	.word	0x0800c07d
 800c010:	0800c07d 	.word	0x0800c07d
 800c014:	0800c071 	.word	0x0800c071
 800c018:	0800c07d 	.word	0x0800c07d
 800c01c:	0800c07d 	.word	0x0800c07d
 800c020:	0800c07d 	.word	0x0800c07d
 800c024:	0800c07d 	.word	0x0800c07d
 800c028:	0800c07d 	.word	0x0800c07d
 800c02c:	0800c07d 	.word	0x0800c07d
 800c030:	0800c07d 	.word	0x0800c07d
 800c034:	0800c065 	.word	0x0800c065
 800c038:	0800c07d 	.word	0x0800c07d
 800c03c:	0800c07d 	.word	0x0800c07d
 800c040:	0800c07d 	.word	0x0800c07d
 800c044:	0800c07d 	.word	0x0800c07d
 800c048:	0800c07d 	.word	0x0800c07d
 800c04c:	0800c07d 	.word	0x0800c07d
 800c050:	0800c07d 	.word	0x0800c07d
 800c054:	0800c059 	.word	0x0800c059
    {
          
      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 800c058:	693b      	ldr	r3, [r7, #16]
 800c05a:	2b06      	cmp	r3, #6
 800c05c:	d913      	bls.n	800c086 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 800c05e:	2301      	movs	r3, #1
 800c060:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800c062:	e010      	b.n	800c086 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 800c064:	693b      	ldr	r3, [r7, #16]
 800c066:	2b07      	cmp	r3, #7
 800c068:	d90f      	bls.n	800c08a <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 800c06a:	2301      	movs	r3, #1
 800c06c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800c06e:	e00c      	b.n	800c08a <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 800c070:	693b      	ldr	r3, [r7, #16]
 800c072:	2b0f      	cmp	r3, #15
 800c074:	d90b      	bls.n	800c08e <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 800c076:	2301      	movs	r3, #1
 800c078:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800c07a:	e008      	b.n	800c08e <HAL_CRCEx_Polynomial_Set+0xea>
 
      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 800c07c:	2301      	movs	r3, #1
 800c07e:	75fb      	strb	r3, [r7, #23]
        break;
 800c080:	e006      	b.n	800c090 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800c082:	bf00      	nop
 800c084:	e004      	b.n	800c090 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800c086:	bf00      	nop
 800c088:	e002      	b.n	800c090 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800c08a:	bf00      	nop
 800c08c:	e000      	b.n	800c090 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800c08e:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 800c090:	7dfb      	ldrb	r3, [r7, #23]
 800c092:	2b00      	cmp	r3, #0
 800c094:	d10d      	bne.n	800c0b2 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	68ba      	ldr	r2, [r7, #8]
 800c09c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	689b      	ldr	r3, [r3, #8]
 800c0a4:	f023 0118 	bic.w	r1, r3, #24
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	687a      	ldr	r2, [r7, #4]
 800c0ae:	430a      	orrs	r2, r1
 800c0b0:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800c0b2:	7dfb      	ldrb	r3, [r7, #23]
}
 800c0b4:	4618      	mov	r0, r3
 800c0b6:	371c      	adds	r7, #28
 800c0b8:	46bd      	mov	sp, r7
 800c0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0be:	4770      	bx	lr

0800c0c0 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800c0c0:	b580      	push	{r7, lr}
 800c0c2:	b082      	sub	sp, #8
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d101      	bne.n	800c0d2 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800c0ce:	2301      	movs	r3, #1
 800c0d0:	e04f      	b.n	800c172 <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800c0d8:	b2db      	uxtb	r3, r3
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d106      	bne.n	800c0ec <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	2200      	movs	r2, #0
 800c0e2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800c0e6:	6878      	ldr	r0, [r7, #4]
 800c0e8:	f7fa fc0a 	bl	8006900 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	2202      	movs	r2, #2
 800c0f0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	681a      	ldr	r2, [r3, #0]
 800c0fa:	4b20      	ldr	r3, [pc, #128]	; (800c17c <HAL_DMA2D_Init+0xbc>)
 800c0fc:	4013      	ands	r3, r2
 800c0fe:	687a      	ldr	r2, [r7, #4]
 800c100:	6851      	ldr	r1, [r2, #4]
 800c102:	687a      	ldr	r2, [r7, #4]
 800c104:	69d2      	ldr	r2, [r2, #28]
 800c106:	4311      	orrs	r1, r2
 800c108:	687a      	ldr	r2, [r7, #4]
 800c10a:	6812      	ldr	r2, [r2, #0]
 800c10c:	430b      	orrs	r3, r1
 800c10e:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c116:	4b1a      	ldr	r3, [pc, #104]	; (800c180 <HAL_DMA2D_Init+0xc0>)
 800c118:	4013      	ands	r3, r2
 800c11a:	687a      	ldr	r2, [r7, #4]
 800c11c:	6891      	ldr	r1, [r2, #8]
 800c11e:	687a      	ldr	r2, [r7, #4]
 800c120:	6992      	ldr	r2, [r2, #24]
 800c122:	4311      	orrs	r1, r2
 800c124:	687a      	ldr	r2, [r7, #4]
 800c126:	6812      	ldr	r2, [r2, #0]
 800c128:	430b      	orrs	r3, r1
 800c12a:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c132:	4b14      	ldr	r3, [pc, #80]	; (800c184 <HAL_DMA2D_Init+0xc4>)
 800c134:	4013      	ands	r3, r2
 800c136:	687a      	ldr	r2, [r7, #4]
 800c138:	68d1      	ldr	r1, [r2, #12]
 800c13a:	687a      	ldr	r2, [r7, #4]
 800c13c:	6812      	ldr	r2, [r2, #0]
 800c13e:	430b      	orrs	r3, r1
 800c140:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c148:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	691b      	ldr	r3, [r3, #16]
 800c150:	051a      	lsls	r2, r3, #20
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	695b      	ldr	r3, [r3, #20]
 800c156:	055b      	lsls	r3, r3, #21
 800c158:	431a      	orrs	r2, r3
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	430a      	orrs	r2, r1
 800c160:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	2200      	movs	r2, #0
 800c166:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	2201      	movs	r2, #1
 800c16c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return HAL_OK;
 800c170:	2300      	movs	r3, #0
}
 800c172:	4618      	mov	r0, r3
 800c174:	3708      	adds	r7, #8
 800c176:	46bd      	mov	sp, r7
 800c178:	bd80      	pop	{r7, pc}
 800c17a:	bf00      	nop
 800c17c:	fff8ffbf 	.word	0xfff8ffbf
 800c180:	fffffef8 	.word	0xfffffef8
 800c184:	ffff0000 	.word	0xffff0000

0800c188 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 800c188:	b580      	push	{r7, lr}
 800c18a:	b084      	sub	sp, #16
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	685b      	ldr	r3, [r3, #4]
 800c196:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	f003 0301 	and.w	r3, r3, #1
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d026      	beq.n	800c1f8 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 800c1aa:	68bb      	ldr	r3, [r7, #8]
 800c1ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d021      	beq.n	800c1f8 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	681a      	ldr	r2, [r3, #0]
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c1c2:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c1c8:	f043 0201 	orr.w	r2, r3, #1
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	2201      	movs	r2, #1
 800c1d6:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	2204      	movs	r2, #4
 800c1dc:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	2200      	movs	r2, #0
 800c1e4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d003      	beq.n	800c1f8 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1f4:	6878      	ldr	r0, [r7, #4]
 800c1f6:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	f003 0320 	and.w	r3, r3, #32
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d026      	beq.n	800c250 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800c202:	68bb      	ldr	r3, [r7, #8]
 800c204:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d021      	beq.n	800c250 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	681a      	ldr	r2, [r3, #0]
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c21a:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	2220      	movs	r2, #32
 800c222:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c228:	f043 0202 	orr.w	r2, r3, #2
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	2204      	movs	r2, #4
 800c234:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	2200      	movs	r2, #0
 800c23c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c244:	2b00      	cmp	r3, #0
 800c246:	d003      	beq.n	800c250 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c24c:	6878      	ldr	r0, [r7, #4]
 800c24e:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	f003 0308 	and.w	r3, r3, #8
 800c256:	2b00      	cmp	r3, #0
 800c258:	d026      	beq.n	800c2a8 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800c25a:	68bb      	ldr	r3, [r7, #8]
 800c25c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c260:	2b00      	cmp	r3, #0
 800c262:	d021      	beq.n	800c2a8 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	681a      	ldr	r2, [r3, #0]
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c272:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	2208      	movs	r2, #8
 800c27a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c280:	f043 0204 	orr.w	r2, r3, #4
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	2204      	movs	r2, #4
 800c28c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	2200      	movs	r2, #0
 800c294:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d003      	beq.n	800c2a8 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2a4:	6878      	ldr	r0, [r7, #4]
 800c2a6:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	f003 0304 	and.w	r3, r3, #4
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d013      	beq.n	800c2da <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800c2b2:	68bb      	ldr	r3, [r7, #8]
 800c2b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d00e      	beq.n	800c2da <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	681a      	ldr	r2, [r3, #0]
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c2ca:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	2204      	movs	r2, #4
 800c2d2:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800c2d4:	6878      	ldr	r0, [r7, #4]
 800c2d6:	f000 f853 	bl	800c380 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	f003 0302 	and.w	r3, r3, #2
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d024      	beq.n	800c32e <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800c2e4:	68bb      	ldr	r3, [r7, #8]
 800c2e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d01f      	beq.n	800c32e <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	681a      	ldr	r2, [r3, #0]
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800c2fc:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	2202      	movs	r2, #2
 800c304:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	2201      	movs	r2, #1
 800c312:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	2200      	movs	r2, #0
 800c31a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferCpltCallback != NULL)
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	6a1b      	ldr	r3, [r3, #32]
 800c322:	2b00      	cmp	r3, #0
 800c324:	d003      	beq.n	800c32e <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	6a1b      	ldr	r3, [r3, #32]
 800c32a:	6878      	ldr	r0, [r7, #4]
 800c32c:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	f003 0310 	and.w	r3, r3, #16
 800c334:	2b00      	cmp	r3, #0
 800c336:	d01f      	beq.n	800c378 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800c338:	68bb      	ldr	r3, [r7, #8]
 800c33a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d01a      	beq.n	800c378 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	681a      	ldr	r2, [r3, #0]
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c350:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	2210      	movs	r2, #16
 800c358:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	2201      	movs	r2, #1
 800c366:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	2200      	movs	r2, #0
 800c36e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800c372:	6878      	ldr	r0, [r7, #4]
 800c374:	f000 f80e 	bl	800c394 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 800c378:	bf00      	nop
 800c37a:	3710      	adds	r7, #16
 800c37c:	46bd      	mov	sp, r7
 800c37e:	bd80      	pop	{r7, pc}

0800c380 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800c380:	b480      	push	{r7}
 800c382:	b083      	sub	sp, #12
 800c384:	af00      	add	r7, sp, #0
 800c386:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 800c388:	bf00      	nop
 800c38a:	370c      	adds	r7, #12
 800c38c:	46bd      	mov	sp, r7
 800c38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c392:	4770      	bx	lr

0800c394 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800c394:	b480      	push	{r7}
 800c396:	b083      	sub	sp, #12
 800c398:	af00      	add	r7, sp, #0
 800c39a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 800c39c:	bf00      	nop
 800c39e:	370c      	adds	r7, #12
 800c3a0:	46bd      	mov	sp, r7
 800c3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a6:	4770      	bx	lr

0800c3a8 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800c3a8:	b480      	push	{r7}
 800c3aa:	b087      	sub	sp, #28
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	6078      	str	r0, [r7, #4]
 800c3b0:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	685b      	ldr	r3, [r3, #4]
 800c3b6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 800c3ba:	683b      	ldr	r3, [r7, #0]
 800c3bc:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800c3c4:	2b01      	cmp	r3, #1
 800c3c6:	d101      	bne.n	800c3cc <HAL_DMA2D_ConfigLayer+0x24>
 800c3c8:	2302      	movs	r3, #2
 800c3ca:	e092      	b.n	800c4f2 <HAL_DMA2D_ConfigLayer+0x14a>
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	2201      	movs	r2, #1
 800c3d0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	2202      	movs	r2, #2
 800c3d8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800c3dc:	683a      	ldr	r2, [r7, #0]
 800c3de:	4613      	mov	r3, r2
 800c3e0:	00db      	lsls	r3, r3, #3
 800c3e2:	1a9b      	subs	r3, r3, r2
 800c3e4:	009b      	lsls	r3, r3, #2
 800c3e6:	3328      	adds	r3, #40	; 0x28
 800c3e8:	687a      	ldr	r2, [r7, #4]
 800c3ea:	4413      	add	r3, r2
 800c3ec:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	685a      	ldr	r2, [r3, #4]
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	689b      	ldr	r3, [r3, #8]
 800c3f6:	041b      	lsls	r3, r3, #16
 800c3f8:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	691b      	ldr	r3, [r3, #16]
 800c3fe:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800c400:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	695b      	ldr	r3, [r3, #20]
 800c406:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800c408:	4313      	orrs	r3, r2
 800c40a:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 800c40c:	4b3c      	ldr	r3, [pc, #240]	; (800c500 <HAL_DMA2D_ConfigLayer+0x158>)
 800c40e:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	685b      	ldr	r3, [r3, #4]
 800c414:	2b0a      	cmp	r3, #10
 800c416:	d003      	beq.n	800c420 <HAL_DMA2D_ConfigLayer+0x78>
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	685b      	ldr	r3, [r3, #4]
 800c41c:	2b09      	cmp	r3, #9
 800c41e:	d107      	bne.n	800c430 <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	68db      	ldr	r3, [r3, #12]
 800c424:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800c428:	693a      	ldr	r2, [r7, #16]
 800c42a:	4313      	orrs	r3, r2
 800c42c:	613b      	str	r3, [r7, #16]
 800c42e:	e005      	b.n	800c43c <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	68db      	ldr	r3, [r3, #12]
 800c434:	061b      	lsls	r3, r3, #24
 800c436:	693a      	ldr	r2, [r7, #16]
 800c438:	4313      	orrs	r3, r2
 800c43a:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800c43c:	683b      	ldr	r3, [r7, #0]
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d120      	bne.n	800c484 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c448:	697b      	ldr	r3, [r7, #20]
 800c44a:	43db      	mvns	r3, r3
 800c44c:	ea02 0103 	and.w	r1, r2, r3
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	693a      	ldr	r2, [r7, #16]
 800c456:	430a      	orrs	r2, r1
 800c458:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	68fa      	ldr	r2, [r7, #12]
 800c460:	6812      	ldr	r2, [r2, #0]
 800c462:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	685b      	ldr	r3, [r3, #4]
 800c468:	2b0a      	cmp	r3, #10
 800c46a:	d003      	beq.n	800c474 <HAL_DMA2D_ConfigLayer+0xcc>
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	685b      	ldr	r3, [r3, #4]
 800c470:	2b09      	cmp	r3, #9
 800c472:	d135      	bne.n	800c4e0 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	68da      	ldr	r2, [r3, #12]
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800c480:	629a      	str	r2, [r3, #40]	; 0x28
 800c482:	e02d      	b.n	800c4e0 <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	685b      	ldr	r3, [r3, #4]
 800c488:	2b0b      	cmp	r3, #11
 800c48a:	d109      	bne.n	800c4a0 <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	699b      	ldr	r3, [r3, #24]
 800c490:	049b      	lsls	r3, r3, #18
 800c492:	693a      	ldr	r2, [r7, #16]
 800c494:	4313      	orrs	r3, r2
 800c496:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 800c498:	697b      	ldr	r3, [r7, #20]
 800c49a:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 800c49e:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	69da      	ldr	r2, [r3, #28]
 800c4a6:	697b      	ldr	r3, [r7, #20]
 800c4a8:	43db      	mvns	r3, r3
 800c4aa:	ea02 0103 	and.w	r1, r2, r3
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	693a      	ldr	r2, [r7, #16]
 800c4b4:	430a      	orrs	r2, r1
 800c4b6:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	68fa      	ldr	r2, [r7, #12]
 800c4be:	6812      	ldr	r2, [r2, #0]
 800c4c0:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	685b      	ldr	r3, [r3, #4]
 800c4c6:	2b0a      	cmp	r3, #10
 800c4c8:	d003      	beq.n	800c4d2 <HAL_DMA2D_ConfigLayer+0x12a>
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	685b      	ldr	r3, [r3, #4]
 800c4ce:	2b09      	cmp	r3, #9
 800c4d0:	d106      	bne.n	800c4e0 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	68da      	ldr	r2, [r3, #12]
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800c4de:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	2201      	movs	r2, #1
 800c4e4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	2200      	movs	r2, #0
 800c4ec:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 800c4f0:	2300      	movs	r3, #0
}
 800c4f2:	4618      	mov	r0, r3
 800c4f4:	371c      	adds	r7, #28
 800c4f6:	46bd      	mov	sp, r7
 800c4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4fc:	4770      	bx	lr
 800c4fe:	bf00      	nop
 800c500:	ff33000f 	.word	0xff33000f

0800c504 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800c504:	b480      	push	{r7}
 800c506:	b089      	sub	sp, #36	; 0x24
 800c508:	af00      	add	r7, sp, #0
 800c50a:	6078      	str	r0, [r7, #4]
 800c50c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800c50e:	2300      	movs	r3, #0
 800c510:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800c512:	4b89      	ldr	r3, [pc, #548]	; (800c738 <HAL_GPIO_Init+0x234>)
 800c514:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800c516:	e194      	b.n	800c842 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800c518:	683b      	ldr	r3, [r7, #0]
 800c51a:	681a      	ldr	r2, [r3, #0]
 800c51c:	2101      	movs	r1, #1
 800c51e:	69fb      	ldr	r3, [r7, #28]
 800c520:	fa01 f303 	lsl.w	r3, r1, r3
 800c524:	4013      	ands	r3, r2
 800c526:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800c528:	693b      	ldr	r3, [r7, #16]
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	f000 8186 	beq.w	800c83c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800c530:	683b      	ldr	r3, [r7, #0]
 800c532:	685b      	ldr	r3, [r3, #4]
 800c534:	f003 0303 	and.w	r3, r3, #3
 800c538:	2b01      	cmp	r3, #1
 800c53a:	d005      	beq.n	800c548 <HAL_GPIO_Init+0x44>
 800c53c:	683b      	ldr	r3, [r7, #0]
 800c53e:	685b      	ldr	r3, [r3, #4]
 800c540:	f003 0303 	and.w	r3, r3, #3
 800c544:	2b02      	cmp	r3, #2
 800c546:	d130      	bne.n	800c5aa <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	689b      	ldr	r3, [r3, #8]
 800c54c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800c54e:	69fb      	ldr	r3, [r7, #28]
 800c550:	005b      	lsls	r3, r3, #1
 800c552:	2203      	movs	r2, #3
 800c554:	fa02 f303 	lsl.w	r3, r2, r3
 800c558:	43db      	mvns	r3, r3
 800c55a:	69ba      	ldr	r2, [r7, #24]
 800c55c:	4013      	ands	r3, r2
 800c55e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800c560:	683b      	ldr	r3, [r7, #0]
 800c562:	68da      	ldr	r2, [r3, #12]
 800c564:	69fb      	ldr	r3, [r7, #28]
 800c566:	005b      	lsls	r3, r3, #1
 800c568:	fa02 f303 	lsl.w	r3, r2, r3
 800c56c:	69ba      	ldr	r2, [r7, #24]
 800c56e:	4313      	orrs	r3, r2
 800c570:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	69ba      	ldr	r2, [r7, #24]
 800c576:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	685b      	ldr	r3, [r3, #4]
 800c57c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800c57e:	2201      	movs	r2, #1
 800c580:	69fb      	ldr	r3, [r7, #28]
 800c582:	fa02 f303 	lsl.w	r3, r2, r3
 800c586:	43db      	mvns	r3, r3
 800c588:	69ba      	ldr	r2, [r7, #24]
 800c58a:	4013      	ands	r3, r2
 800c58c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800c58e:	683b      	ldr	r3, [r7, #0]
 800c590:	685b      	ldr	r3, [r3, #4]
 800c592:	091b      	lsrs	r3, r3, #4
 800c594:	f003 0201 	and.w	r2, r3, #1
 800c598:	69fb      	ldr	r3, [r7, #28]
 800c59a:	fa02 f303 	lsl.w	r3, r2, r3
 800c59e:	69ba      	ldr	r2, [r7, #24]
 800c5a0:	4313      	orrs	r3, r2
 800c5a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	69ba      	ldr	r2, [r7, #24]
 800c5a8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800c5aa:	683b      	ldr	r3, [r7, #0]
 800c5ac:	685b      	ldr	r3, [r3, #4]
 800c5ae:	f003 0303 	and.w	r3, r3, #3
 800c5b2:	2b03      	cmp	r3, #3
 800c5b4:	d017      	beq.n	800c5e6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	68db      	ldr	r3, [r3, #12]
 800c5ba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800c5bc:	69fb      	ldr	r3, [r7, #28]
 800c5be:	005b      	lsls	r3, r3, #1
 800c5c0:	2203      	movs	r2, #3
 800c5c2:	fa02 f303 	lsl.w	r3, r2, r3
 800c5c6:	43db      	mvns	r3, r3
 800c5c8:	69ba      	ldr	r2, [r7, #24]
 800c5ca:	4013      	ands	r3, r2
 800c5cc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800c5ce:	683b      	ldr	r3, [r7, #0]
 800c5d0:	689a      	ldr	r2, [r3, #8]
 800c5d2:	69fb      	ldr	r3, [r7, #28]
 800c5d4:	005b      	lsls	r3, r3, #1
 800c5d6:	fa02 f303 	lsl.w	r3, r2, r3
 800c5da:	69ba      	ldr	r2, [r7, #24]
 800c5dc:	4313      	orrs	r3, r2
 800c5de:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	69ba      	ldr	r2, [r7, #24]
 800c5e4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800c5e6:	683b      	ldr	r3, [r7, #0]
 800c5e8:	685b      	ldr	r3, [r3, #4]
 800c5ea:	f003 0303 	and.w	r3, r3, #3
 800c5ee:	2b02      	cmp	r3, #2
 800c5f0:	d123      	bne.n	800c63a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800c5f2:	69fb      	ldr	r3, [r7, #28]
 800c5f4:	08da      	lsrs	r2, r3, #3
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	3208      	adds	r2, #8
 800c5fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800c600:	69fb      	ldr	r3, [r7, #28]
 800c602:	f003 0307 	and.w	r3, r3, #7
 800c606:	009b      	lsls	r3, r3, #2
 800c608:	220f      	movs	r2, #15
 800c60a:	fa02 f303 	lsl.w	r3, r2, r3
 800c60e:	43db      	mvns	r3, r3
 800c610:	69ba      	ldr	r2, [r7, #24]
 800c612:	4013      	ands	r3, r2
 800c614:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800c616:	683b      	ldr	r3, [r7, #0]
 800c618:	691a      	ldr	r2, [r3, #16]
 800c61a:	69fb      	ldr	r3, [r7, #28]
 800c61c:	f003 0307 	and.w	r3, r3, #7
 800c620:	009b      	lsls	r3, r3, #2
 800c622:	fa02 f303 	lsl.w	r3, r2, r3
 800c626:	69ba      	ldr	r2, [r7, #24]
 800c628:	4313      	orrs	r3, r2
 800c62a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800c62c:	69fb      	ldr	r3, [r7, #28]
 800c62e:	08da      	lsrs	r2, r3, #3
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	3208      	adds	r2, #8
 800c634:	69b9      	ldr	r1, [r7, #24]
 800c636:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800c640:	69fb      	ldr	r3, [r7, #28]
 800c642:	005b      	lsls	r3, r3, #1
 800c644:	2203      	movs	r2, #3
 800c646:	fa02 f303 	lsl.w	r3, r2, r3
 800c64a:	43db      	mvns	r3, r3
 800c64c:	69ba      	ldr	r2, [r7, #24]
 800c64e:	4013      	ands	r3, r2
 800c650:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800c652:	683b      	ldr	r3, [r7, #0]
 800c654:	685b      	ldr	r3, [r3, #4]
 800c656:	f003 0203 	and.w	r2, r3, #3
 800c65a:	69fb      	ldr	r3, [r7, #28]
 800c65c:	005b      	lsls	r3, r3, #1
 800c65e:	fa02 f303 	lsl.w	r3, r2, r3
 800c662:	69ba      	ldr	r2, [r7, #24]
 800c664:	4313      	orrs	r3, r2
 800c666:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	69ba      	ldr	r2, [r7, #24]
 800c66c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800c66e:	683b      	ldr	r3, [r7, #0]
 800c670:	685b      	ldr	r3, [r3, #4]
 800c672:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c676:	2b00      	cmp	r3, #0
 800c678:	f000 80e0 	beq.w	800c83c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c67c:	4b2f      	ldr	r3, [pc, #188]	; (800c73c <HAL_GPIO_Init+0x238>)
 800c67e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800c682:	4a2e      	ldr	r2, [pc, #184]	; (800c73c <HAL_GPIO_Init+0x238>)
 800c684:	f043 0302 	orr.w	r3, r3, #2
 800c688:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 800c68c:	4b2b      	ldr	r3, [pc, #172]	; (800c73c <HAL_GPIO_Init+0x238>)
 800c68e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800c692:	f003 0302 	and.w	r3, r3, #2
 800c696:	60fb      	str	r3, [r7, #12]
 800c698:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800c69a:	4a29      	ldr	r2, [pc, #164]	; (800c740 <HAL_GPIO_Init+0x23c>)
 800c69c:	69fb      	ldr	r3, [r7, #28]
 800c69e:	089b      	lsrs	r3, r3, #2
 800c6a0:	3302      	adds	r3, #2
 800c6a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c6a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800c6a8:	69fb      	ldr	r3, [r7, #28]
 800c6aa:	f003 0303 	and.w	r3, r3, #3
 800c6ae:	009b      	lsls	r3, r3, #2
 800c6b0:	220f      	movs	r2, #15
 800c6b2:	fa02 f303 	lsl.w	r3, r2, r3
 800c6b6:	43db      	mvns	r3, r3
 800c6b8:	69ba      	ldr	r2, [r7, #24]
 800c6ba:	4013      	ands	r3, r2
 800c6bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	4a20      	ldr	r2, [pc, #128]	; (800c744 <HAL_GPIO_Init+0x240>)
 800c6c2:	4293      	cmp	r3, r2
 800c6c4:	d052      	beq.n	800c76c <HAL_GPIO_Init+0x268>
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	4a1f      	ldr	r2, [pc, #124]	; (800c748 <HAL_GPIO_Init+0x244>)
 800c6ca:	4293      	cmp	r3, r2
 800c6cc:	d031      	beq.n	800c732 <HAL_GPIO_Init+0x22e>
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	4a1e      	ldr	r2, [pc, #120]	; (800c74c <HAL_GPIO_Init+0x248>)
 800c6d2:	4293      	cmp	r3, r2
 800c6d4:	d02b      	beq.n	800c72e <HAL_GPIO_Init+0x22a>
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	4a1d      	ldr	r2, [pc, #116]	; (800c750 <HAL_GPIO_Init+0x24c>)
 800c6da:	4293      	cmp	r3, r2
 800c6dc:	d025      	beq.n	800c72a <HAL_GPIO_Init+0x226>
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	4a1c      	ldr	r2, [pc, #112]	; (800c754 <HAL_GPIO_Init+0x250>)
 800c6e2:	4293      	cmp	r3, r2
 800c6e4:	d01f      	beq.n	800c726 <HAL_GPIO_Init+0x222>
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	4a1b      	ldr	r2, [pc, #108]	; (800c758 <HAL_GPIO_Init+0x254>)
 800c6ea:	4293      	cmp	r3, r2
 800c6ec:	d019      	beq.n	800c722 <HAL_GPIO_Init+0x21e>
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	4a1a      	ldr	r2, [pc, #104]	; (800c75c <HAL_GPIO_Init+0x258>)
 800c6f2:	4293      	cmp	r3, r2
 800c6f4:	d013      	beq.n	800c71e <HAL_GPIO_Init+0x21a>
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	4a19      	ldr	r2, [pc, #100]	; (800c760 <HAL_GPIO_Init+0x25c>)
 800c6fa:	4293      	cmp	r3, r2
 800c6fc:	d00d      	beq.n	800c71a <HAL_GPIO_Init+0x216>
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	4a18      	ldr	r2, [pc, #96]	; (800c764 <HAL_GPIO_Init+0x260>)
 800c702:	4293      	cmp	r3, r2
 800c704:	d007      	beq.n	800c716 <HAL_GPIO_Init+0x212>
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	4a17      	ldr	r2, [pc, #92]	; (800c768 <HAL_GPIO_Init+0x264>)
 800c70a:	4293      	cmp	r3, r2
 800c70c:	d101      	bne.n	800c712 <HAL_GPIO_Init+0x20e>
 800c70e:	2309      	movs	r3, #9
 800c710:	e02d      	b.n	800c76e <HAL_GPIO_Init+0x26a>
 800c712:	230a      	movs	r3, #10
 800c714:	e02b      	b.n	800c76e <HAL_GPIO_Init+0x26a>
 800c716:	2308      	movs	r3, #8
 800c718:	e029      	b.n	800c76e <HAL_GPIO_Init+0x26a>
 800c71a:	2307      	movs	r3, #7
 800c71c:	e027      	b.n	800c76e <HAL_GPIO_Init+0x26a>
 800c71e:	2306      	movs	r3, #6
 800c720:	e025      	b.n	800c76e <HAL_GPIO_Init+0x26a>
 800c722:	2305      	movs	r3, #5
 800c724:	e023      	b.n	800c76e <HAL_GPIO_Init+0x26a>
 800c726:	2304      	movs	r3, #4
 800c728:	e021      	b.n	800c76e <HAL_GPIO_Init+0x26a>
 800c72a:	2303      	movs	r3, #3
 800c72c:	e01f      	b.n	800c76e <HAL_GPIO_Init+0x26a>
 800c72e:	2302      	movs	r3, #2
 800c730:	e01d      	b.n	800c76e <HAL_GPIO_Init+0x26a>
 800c732:	2301      	movs	r3, #1
 800c734:	e01b      	b.n	800c76e <HAL_GPIO_Init+0x26a>
 800c736:	bf00      	nop
 800c738:	58000080 	.word	0x58000080
 800c73c:	58024400 	.word	0x58024400
 800c740:	58000400 	.word	0x58000400
 800c744:	58020000 	.word	0x58020000
 800c748:	58020400 	.word	0x58020400
 800c74c:	58020800 	.word	0x58020800
 800c750:	58020c00 	.word	0x58020c00
 800c754:	58021000 	.word	0x58021000
 800c758:	58021400 	.word	0x58021400
 800c75c:	58021800 	.word	0x58021800
 800c760:	58021c00 	.word	0x58021c00
 800c764:	58022000 	.word	0x58022000
 800c768:	58022400 	.word	0x58022400
 800c76c:	2300      	movs	r3, #0
 800c76e:	69fa      	ldr	r2, [r7, #28]
 800c770:	f002 0203 	and.w	r2, r2, #3
 800c774:	0092      	lsls	r2, r2, #2
 800c776:	4093      	lsls	r3, r2
 800c778:	69ba      	ldr	r2, [r7, #24]
 800c77a:	4313      	orrs	r3, r2
 800c77c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800c77e:	4938      	ldr	r1, [pc, #224]	; (800c860 <HAL_GPIO_Init+0x35c>)
 800c780:	69fb      	ldr	r3, [r7, #28]
 800c782:	089b      	lsrs	r3, r3, #2
 800c784:	3302      	adds	r3, #2
 800c786:	69ba      	ldr	r2, [r7, #24]
 800c788:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800c78c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800c794:	693b      	ldr	r3, [r7, #16]
 800c796:	43db      	mvns	r3, r3
 800c798:	69ba      	ldr	r2, [r7, #24]
 800c79a:	4013      	ands	r3, r2
 800c79c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800c79e:	683b      	ldr	r3, [r7, #0]
 800c7a0:	685b      	ldr	r3, [r3, #4]
 800c7a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d003      	beq.n	800c7b2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800c7aa:	69ba      	ldr	r2, [r7, #24]
 800c7ac:	693b      	ldr	r3, [r7, #16]
 800c7ae:	4313      	orrs	r3, r2
 800c7b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800c7b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c7b6:	69bb      	ldr	r3, [r7, #24]
 800c7b8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800c7ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c7be:	685b      	ldr	r3, [r3, #4]
 800c7c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800c7c2:	693b      	ldr	r3, [r7, #16]
 800c7c4:	43db      	mvns	r3, r3
 800c7c6:	69ba      	ldr	r2, [r7, #24]
 800c7c8:	4013      	ands	r3, r2
 800c7ca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800c7cc:	683b      	ldr	r3, [r7, #0]
 800c7ce:	685b      	ldr	r3, [r3, #4]
 800c7d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d003      	beq.n	800c7e0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800c7d8:	69ba      	ldr	r2, [r7, #24]
 800c7da:	693b      	ldr	r3, [r7, #16]
 800c7dc:	4313      	orrs	r3, r2
 800c7de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800c7e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c7e4:	69bb      	ldr	r3, [r7, #24]
 800c7e6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800c7e8:	697b      	ldr	r3, [r7, #20]
 800c7ea:	685b      	ldr	r3, [r3, #4]
 800c7ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800c7ee:	693b      	ldr	r3, [r7, #16]
 800c7f0:	43db      	mvns	r3, r3
 800c7f2:	69ba      	ldr	r2, [r7, #24]
 800c7f4:	4013      	ands	r3, r2
 800c7f6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800c7f8:	683b      	ldr	r3, [r7, #0]
 800c7fa:	685b      	ldr	r3, [r3, #4]
 800c7fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c800:	2b00      	cmp	r3, #0
 800c802:	d003      	beq.n	800c80c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800c804:	69ba      	ldr	r2, [r7, #24]
 800c806:	693b      	ldr	r3, [r7, #16]
 800c808:	4313      	orrs	r3, r2
 800c80a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800c80c:	697b      	ldr	r3, [r7, #20]
 800c80e:	69ba      	ldr	r2, [r7, #24]
 800c810:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800c812:	697b      	ldr	r3, [r7, #20]
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800c818:	693b      	ldr	r3, [r7, #16]
 800c81a:	43db      	mvns	r3, r3
 800c81c:	69ba      	ldr	r2, [r7, #24]
 800c81e:	4013      	ands	r3, r2
 800c820:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800c822:	683b      	ldr	r3, [r7, #0]
 800c824:	685b      	ldr	r3, [r3, #4]
 800c826:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d003      	beq.n	800c836 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800c82e:	69ba      	ldr	r2, [r7, #24]
 800c830:	693b      	ldr	r3, [r7, #16]
 800c832:	4313      	orrs	r3, r2
 800c834:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800c836:	697b      	ldr	r3, [r7, #20]
 800c838:	69ba      	ldr	r2, [r7, #24]
 800c83a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800c83c:	69fb      	ldr	r3, [r7, #28]
 800c83e:	3301      	adds	r3, #1
 800c840:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800c842:	683b      	ldr	r3, [r7, #0]
 800c844:	681a      	ldr	r2, [r3, #0]
 800c846:	69fb      	ldr	r3, [r7, #28]
 800c848:	fa22 f303 	lsr.w	r3, r2, r3
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	f47f ae63 	bne.w	800c518 <HAL_GPIO_Init+0x14>
  }
}
 800c852:	bf00      	nop
 800c854:	bf00      	nop
 800c856:	3724      	adds	r7, #36	; 0x24
 800c858:	46bd      	mov	sp, r7
 800c85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c85e:	4770      	bx	lr
 800c860:	58000400 	.word	0x58000400

0800c864 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800c864:	b480      	push	{r7}
 800c866:	b087      	sub	sp, #28
 800c868:	af00      	add	r7, sp, #0
 800c86a:	6078      	str	r0, [r7, #4]
 800c86c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800c86e:	2300      	movs	r3, #0
 800c870:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800c872:	4b75      	ldr	r3, [pc, #468]	; (800ca48 <HAL_GPIO_DeInit+0x1e4>)
 800c874:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 800c876:	e0d9      	b.n	800ca2c <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 800c878:	2201      	movs	r2, #1
 800c87a:	697b      	ldr	r3, [r7, #20]
 800c87c:	fa02 f303 	lsl.w	r3, r2, r3
 800c880:	683a      	ldr	r2, [r7, #0]
 800c882:	4013      	ands	r3, r2
 800c884:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	2b00      	cmp	r3, #0
 800c88a:	f000 80cc 	beq.w	800ca26 <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 800c88e:	4a6f      	ldr	r2, [pc, #444]	; (800ca4c <HAL_GPIO_DeInit+0x1e8>)
 800c890:	697b      	ldr	r3, [r7, #20]
 800c892:	089b      	lsrs	r3, r3, #2
 800c894:	3302      	adds	r3, #2
 800c896:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c89a:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800c89c:	697b      	ldr	r3, [r7, #20]
 800c89e:	f003 0303 	and.w	r3, r3, #3
 800c8a2:	009b      	lsls	r3, r3, #2
 800c8a4:	220f      	movs	r2, #15
 800c8a6:	fa02 f303 	lsl.w	r3, r2, r3
 800c8aa:	68ba      	ldr	r2, [r7, #8]
 800c8ac:	4013      	ands	r3, r2
 800c8ae:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	4a67      	ldr	r2, [pc, #412]	; (800ca50 <HAL_GPIO_DeInit+0x1ec>)
 800c8b4:	4293      	cmp	r3, r2
 800c8b6:	d037      	beq.n	800c928 <HAL_GPIO_DeInit+0xc4>
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	4a66      	ldr	r2, [pc, #408]	; (800ca54 <HAL_GPIO_DeInit+0x1f0>)
 800c8bc:	4293      	cmp	r3, r2
 800c8be:	d031      	beq.n	800c924 <HAL_GPIO_DeInit+0xc0>
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	4a65      	ldr	r2, [pc, #404]	; (800ca58 <HAL_GPIO_DeInit+0x1f4>)
 800c8c4:	4293      	cmp	r3, r2
 800c8c6:	d02b      	beq.n	800c920 <HAL_GPIO_DeInit+0xbc>
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	4a64      	ldr	r2, [pc, #400]	; (800ca5c <HAL_GPIO_DeInit+0x1f8>)
 800c8cc:	4293      	cmp	r3, r2
 800c8ce:	d025      	beq.n	800c91c <HAL_GPIO_DeInit+0xb8>
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	4a63      	ldr	r2, [pc, #396]	; (800ca60 <HAL_GPIO_DeInit+0x1fc>)
 800c8d4:	4293      	cmp	r3, r2
 800c8d6:	d01f      	beq.n	800c918 <HAL_GPIO_DeInit+0xb4>
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	4a62      	ldr	r2, [pc, #392]	; (800ca64 <HAL_GPIO_DeInit+0x200>)
 800c8dc:	4293      	cmp	r3, r2
 800c8de:	d019      	beq.n	800c914 <HAL_GPIO_DeInit+0xb0>
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	4a61      	ldr	r2, [pc, #388]	; (800ca68 <HAL_GPIO_DeInit+0x204>)
 800c8e4:	4293      	cmp	r3, r2
 800c8e6:	d013      	beq.n	800c910 <HAL_GPIO_DeInit+0xac>
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	4a60      	ldr	r2, [pc, #384]	; (800ca6c <HAL_GPIO_DeInit+0x208>)
 800c8ec:	4293      	cmp	r3, r2
 800c8ee:	d00d      	beq.n	800c90c <HAL_GPIO_DeInit+0xa8>
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	4a5f      	ldr	r2, [pc, #380]	; (800ca70 <HAL_GPIO_DeInit+0x20c>)
 800c8f4:	4293      	cmp	r3, r2
 800c8f6:	d007      	beq.n	800c908 <HAL_GPIO_DeInit+0xa4>
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	4a5e      	ldr	r2, [pc, #376]	; (800ca74 <HAL_GPIO_DeInit+0x210>)
 800c8fc:	4293      	cmp	r3, r2
 800c8fe:	d101      	bne.n	800c904 <HAL_GPIO_DeInit+0xa0>
 800c900:	2309      	movs	r3, #9
 800c902:	e012      	b.n	800c92a <HAL_GPIO_DeInit+0xc6>
 800c904:	230a      	movs	r3, #10
 800c906:	e010      	b.n	800c92a <HAL_GPIO_DeInit+0xc6>
 800c908:	2308      	movs	r3, #8
 800c90a:	e00e      	b.n	800c92a <HAL_GPIO_DeInit+0xc6>
 800c90c:	2307      	movs	r3, #7
 800c90e:	e00c      	b.n	800c92a <HAL_GPIO_DeInit+0xc6>
 800c910:	2306      	movs	r3, #6
 800c912:	e00a      	b.n	800c92a <HAL_GPIO_DeInit+0xc6>
 800c914:	2305      	movs	r3, #5
 800c916:	e008      	b.n	800c92a <HAL_GPIO_DeInit+0xc6>
 800c918:	2304      	movs	r3, #4
 800c91a:	e006      	b.n	800c92a <HAL_GPIO_DeInit+0xc6>
 800c91c:	2303      	movs	r3, #3
 800c91e:	e004      	b.n	800c92a <HAL_GPIO_DeInit+0xc6>
 800c920:	2302      	movs	r3, #2
 800c922:	e002      	b.n	800c92a <HAL_GPIO_DeInit+0xc6>
 800c924:	2301      	movs	r3, #1
 800c926:	e000      	b.n	800c92a <HAL_GPIO_DeInit+0xc6>
 800c928:	2300      	movs	r3, #0
 800c92a:	697a      	ldr	r2, [r7, #20]
 800c92c:	f002 0203 	and.w	r2, r2, #3
 800c930:	0092      	lsls	r2, r2, #2
 800c932:	4093      	lsls	r3, r2
 800c934:	68ba      	ldr	r2, [r7, #8]
 800c936:	429a      	cmp	r2, r3
 800c938:	d136      	bne.n	800c9a8 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800c93a:	693b      	ldr	r3, [r7, #16]
 800c93c:	681a      	ldr	r2, [r3, #0]
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	43db      	mvns	r3, r3
 800c942:	401a      	ands	r2, r3
 800c944:	693b      	ldr	r3, [r7, #16]
 800c946:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 800c948:	693b      	ldr	r3, [r7, #16]
 800c94a:	685a      	ldr	r2, [r3, #4]
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	43db      	mvns	r3, r3
 800c950:	401a      	ands	r2, r3
 800c952:	693b      	ldr	r3, [r7, #16]
 800c954:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800c956:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c95a:	685a      	ldr	r2, [r3, #4]
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	43db      	mvns	r3, r3
 800c960:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c964:	4013      	ands	r3, r2
 800c966:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 800c968:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c96c:	681a      	ldr	r2, [r3, #0]
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	43db      	mvns	r3, r3
 800c972:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c976:	4013      	ands	r3, r2
 800c978:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 800c97a:	697b      	ldr	r3, [r7, #20]
 800c97c:	f003 0303 	and.w	r3, r3, #3
 800c980:	009b      	lsls	r3, r3, #2
 800c982:	220f      	movs	r2, #15
 800c984:	fa02 f303 	lsl.w	r3, r2, r3
 800c988:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800c98a:	4a30      	ldr	r2, [pc, #192]	; (800ca4c <HAL_GPIO_DeInit+0x1e8>)
 800c98c:	697b      	ldr	r3, [r7, #20]
 800c98e:	089b      	lsrs	r3, r3, #2
 800c990:	3302      	adds	r3, #2
 800c992:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800c996:	68bb      	ldr	r3, [r7, #8]
 800c998:	43da      	mvns	r2, r3
 800c99a:	482c      	ldr	r0, [pc, #176]	; (800ca4c <HAL_GPIO_DeInit+0x1e8>)
 800c99c:	697b      	ldr	r3, [r7, #20]
 800c99e:	089b      	lsrs	r3, r3, #2
 800c9a0:	400a      	ands	r2, r1
 800c9a2:	3302      	adds	r3, #2
 800c9a4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	681a      	ldr	r2, [r3, #0]
 800c9ac:	697b      	ldr	r3, [r7, #20]
 800c9ae:	005b      	lsls	r3, r3, #1
 800c9b0:	2103      	movs	r1, #3
 800c9b2:	fa01 f303 	lsl.w	r3, r1, r3
 800c9b6:	431a      	orrs	r2, r3
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800c9bc:	697b      	ldr	r3, [r7, #20]
 800c9be:	08da      	lsrs	r2, r3, #3
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	3208      	adds	r2, #8
 800c9c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c9c8:	697b      	ldr	r3, [r7, #20]
 800c9ca:	f003 0307 	and.w	r3, r3, #7
 800c9ce:	009b      	lsls	r3, r3, #2
 800c9d0:	220f      	movs	r2, #15
 800c9d2:	fa02 f303 	lsl.w	r3, r2, r3
 800c9d6:	43db      	mvns	r3, r3
 800c9d8:	697a      	ldr	r2, [r7, #20]
 800c9da:	08d2      	lsrs	r2, r2, #3
 800c9dc:	4019      	ands	r1, r3
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	3208      	adds	r2, #8
 800c9e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	68da      	ldr	r2, [r3, #12]
 800c9ea:	697b      	ldr	r3, [r7, #20]
 800c9ec:	005b      	lsls	r3, r3, #1
 800c9ee:	2103      	movs	r1, #3
 800c9f0:	fa01 f303 	lsl.w	r3, r1, r3
 800c9f4:	43db      	mvns	r3, r3
 800c9f6:	401a      	ands	r2, r3
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	685a      	ldr	r2, [r3, #4]
 800ca00:	2101      	movs	r1, #1
 800ca02:	697b      	ldr	r3, [r7, #20]
 800ca04:	fa01 f303 	lsl.w	r3, r1, r3
 800ca08:	43db      	mvns	r3, r3
 800ca0a:	401a      	ands	r2, r3
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	689a      	ldr	r2, [r3, #8]
 800ca14:	697b      	ldr	r3, [r7, #20]
 800ca16:	005b      	lsls	r3, r3, #1
 800ca18:	2103      	movs	r1, #3
 800ca1a:	fa01 f303 	lsl.w	r3, r1, r3
 800ca1e:	43db      	mvns	r3, r3
 800ca20:	401a      	ands	r2, r3
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	609a      	str	r2, [r3, #8]
    }

    position++;
 800ca26:	697b      	ldr	r3, [r7, #20]
 800ca28:	3301      	adds	r3, #1
 800ca2a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 800ca2c:	683a      	ldr	r2, [r7, #0]
 800ca2e:	697b      	ldr	r3, [r7, #20]
 800ca30:	fa22 f303 	lsr.w	r3, r2, r3
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	f47f af1f 	bne.w	800c878 <HAL_GPIO_DeInit+0x14>
  }
}
 800ca3a:	bf00      	nop
 800ca3c:	bf00      	nop
 800ca3e:	371c      	adds	r7, #28
 800ca40:	46bd      	mov	sp, r7
 800ca42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca46:	4770      	bx	lr
 800ca48:	58000080 	.word	0x58000080
 800ca4c:	58000400 	.word	0x58000400
 800ca50:	58020000 	.word	0x58020000
 800ca54:	58020400 	.word	0x58020400
 800ca58:	58020800 	.word	0x58020800
 800ca5c:	58020c00 	.word	0x58020c00
 800ca60:	58021000 	.word	0x58021000
 800ca64:	58021400 	.word	0x58021400
 800ca68:	58021800 	.word	0x58021800
 800ca6c:	58021c00 	.word	0x58021c00
 800ca70:	58022000 	.word	0x58022000
 800ca74:	58022400 	.word	0x58022400

0800ca78 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800ca78:	b480      	push	{r7}
 800ca7a:	b085      	sub	sp, #20
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	6078      	str	r0, [r7, #4]
 800ca80:	460b      	mov	r3, r1
 800ca82:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	691a      	ldr	r2, [r3, #16]
 800ca88:	887b      	ldrh	r3, [r7, #2]
 800ca8a:	4013      	ands	r3, r2
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d002      	beq.n	800ca96 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800ca90:	2301      	movs	r3, #1
 800ca92:	73fb      	strb	r3, [r7, #15]
 800ca94:	e001      	b.n	800ca9a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800ca96:	2300      	movs	r3, #0
 800ca98:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800ca9a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca9c:	4618      	mov	r0, r3
 800ca9e:	3714      	adds	r7, #20
 800caa0:	46bd      	mov	sp, r7
 800caa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa6:	4770      	bx	lr

0800caa8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800caa8:	b480      	push	{r7}
 800caaa:	b083      	sub	sp, #12
 800caac:	af00      	add	r7, sp, #0
 800caae:	6078      	str	r0, [r7, #4]
 800cab0:	460b      	mov	r3, r1
 800cab2:	807b      	strh	r3, [r7, #2]
 800cab4:	4613      	mov	r3, r2
 800cab6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800cab8:	787b      	ldrb	r3, [r7, #1]
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d003      	beq.n	800cac6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800cabe:	887a      	ldrh	r2, [r7, #2]
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800cac4:	e003      	b.n	800cace <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800cac6:	887b      	ldrh	r3, [r7, #2]
 800cac8:	041a      	lsls	r2, r3, #16
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	619a      	str	r2, [r3, #24]
}
 800cace:	bf00      	nop
 800cad0:	370c      	adds	r7, #12
 800cad2:	46bd      	mov	sp, r7
 800cad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad8:	4770      	bx	lr

0800cada <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800cada:	b480      	push	{r7}
 800cadc:	b085      	sub	sp, #20
 800cade:	af00      	add	r7, sp, #0
 800cae0:	6078      	str	r0, [r7, #4]
 800cae2:	460b      	mov	r3, r1
 800cae4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	695b      	ldr	r3, [r3, #20]
 800caea:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800caec:	887a      	ldrh	r2, [r7, #2]
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	4013      	ands	r3, r2
 800caf2:	041a      	lsls	r2, r3, #16
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	43d9      	mvns	r1, r3
 800caf8:	887b      	ldrh	r3, [r7, #2]
 800cafa:	400b      	ands	r3, r1
 800cafc:	431a      	orrs	r2, r3
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	619a      	str	r2, [r3, #24]
}
 800cb02:	bf00      	nop
 800cb04:	3714      	adds	r7, #20
 800cb06:	46bd      	mov	sp, r7
 800cb08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb0c:	4770      	bx	lr

0800cb0e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800cb0e:	b580      	push	{r7, lr}
 800cb10:	b082      	sub	sp, #8
 800cb12:	af00      	add	r7, sp, #0
 800cb14:	4603      	mov	r3, r0
 800cb16:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800cb18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cb1c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800cb20:	88fb      	ldrh	r3, [r7, #6]
 800cb22:	4013      	ands	r3, r2
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d008      	beq.n	800cb3a <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800cb28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800cb2c:	88fb      	ldrh	r3, [r7, #6]
 800cb2e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800cb32:	88fb      	ldrh	r3, [r7, #6]
 800cb34:	4618      	mov	r0, r3
 800cb36:	f000 f804 	bl	800cb42 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800cb3a:	bf00      	nop
 800cb3c:	3708      	adds	r7, #8
 800cb3e:	46bd      	mov	sp, r7
 800cb40:	bd80      	pop	{r7, pc}

0800cb42 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800cb42:	b480      	push	{r7}
 800cb44:	b083      	sub	sp, #12
 800cb46:	af00      	add	r7, sp, #0
 800cb48:	4603      	mov	r3, r0
 800cb4a:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800cb4c:	bf00      	nop
 800cb4e:	370c      	adds	r7, #12
 800cb50:	46bd      	mov	sp, r7
 800cb52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb56:	4770      	bx	lr

0800cb58 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800cb58:	b580      	push	{r7, lr}
 800cb5a:	b082      	sub	sp, #8
 800cb5c:	af00      	add	r7, sp, #0
 800cb5e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d101      	bne.n	800cb6a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800cb66:	2301      	movs	r3, #1
 800cb68:	e07f      	b.n	800cc6a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cb70:	b2db      	uxtb	r3, r3
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d106      	bne.n	800cb84 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	2200      	movs	r2, #0
 800cb7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800cb7e:	6878      	ldr	r0, [r7, #4]
 800cb80:	f7f9 fee6 	bl	8006950 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	2224      	movs	r2, #36	; 0x24
 800cb88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	681a      	ldr	r2, [r3, #0]
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	f022 0201 	bic.w	r2, r2, #1
 800cb9a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	685a      	ldr	r2, [r3, #4]
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800cba8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	689a      	ldr	r2, [r3, #8]
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800cbb8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	68db      	ldr	r3, [r3, #12]
 800cbbe:	2b01      	cmp	r3, #1
 800cbc0:	d107      	bne.n	800cbd2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	689a      	ldr	r2, [r3, #8]
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cbce:	609a      	str	r2, [r3, #8]
 800cbd0:	e006      	b.n	800cbe0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	689a      	ldr	r2, [r3, #8]
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800cbde:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	68db      	ldr	r3, [r3, #12]
 800cbe4:	2b02      	cmp	r3, #2
 800cbe6:	d104      	bne.n	800cbf2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cbf0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	6859      	ldr	r1, [r3, #4]
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	681a      	ldr	r2, [r3, #0]
 800cbfc:	4b1d      	ldr	r3, [pc, #116]	; (800cc74 <HAL_I2C_Init+0x11c>)
 800cbfe:	430b      	orrs	r3, r1
 800cc00:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	68da      	ldr	r2, [r3, #12]
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800cc10:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	691a      	ldr	r2, [r3, #16]
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	695b      	ldr	r3, [r3, #20]
 800cc1a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	699b      	ldr	r3, [r3, #24]
 800cc22:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	430a      	orrs	r2, r1
 800cc2a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	69d9      	ldr	r1, [r3, #28]
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	6a1a      	ldr	r2, [r3, #32]
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	430a      	orrs	r2, r1
 800cc3a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	681a      	ldr	r2, [r3, #0]
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	f042 0201 	orr.w	r2, r2, #1
 800cc4a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	2200      	movs	r2, #0
 800cc50:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	2220      	movs	r2, #32
 800cc56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	2200      	movs	r2, #0
 800cc5e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	2200      	movs	r2, #0
 800cc64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800cc68:	2300      	movs	r3, #0
}
 800cc6a:	4618      	mov	r0, r3
 800cc6c:	3708      	adds	r7, #8
 800cc6e:	46bd      	mov	sp, r7
 800cc70:	bd80      	pop	{r7, pc}
 800cc72:	bf00      	nop
 800cc74:	02008000 	.word	0x02008000

0800cc78 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800cc78:	b580      	push	{r7, lr}
 800cc7a:	b082      	sub	sp, #8
 800cc7c:	af00      	add	r7, sp, #0
 800cc7e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d101      	bne.n	800cc8a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800cc86:	2301      	movs	r3, #1
 800cc88:	e021      	b.n	800ccce <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	2224      	movs	r2, #36	; 0x24
 800cc8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	681a      	ldr	r2, [r3, #0]
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	f022 0201 	bic.w	r2, r2, #1
 800cca0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800cca2:	6878      	ldr	r0, [r7, #4]
 800cca4:	f7f9 febe 	bl	8006a24 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	2200      	movs	r2, #0
 800ccac:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	2200      	movs	r2, #0
 800ccb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	2200      	movs	r2, #0
 800ccba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	2200      	movs	r2, #0
 800ccc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	2200      	movs	r2, #0
 800ccc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800cccc:	2300      	movs	r3, #0
}
 800ccce:	4618      	mov	r0, r3
 800ccd0:	3708      	adds	r7, #8
 800ccd2:	46bd      	mov	sp, r7
 800ccd4:	bd80      	pop	{r7, pc}
	...

0800ccd8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ccd8:	b580      	push	{r7, lr}
 800ccda:	b088      	sub	sp, #32
 800ccdc:	af02      	add	r7, sp, #8
 800ccde:	60f8      	str	r0, [r7, #12]
 800cce0:	4608      	mov	r0, r1
 800cce2:	4611      	mov	r1, r2
 800cce4:	461a      	mov	r2, r3
 800cce6:	4603      	mov	r3, r0
 800cce8:	817b      	strh	r3, [r7, #10]
 800ccea:	460b      	mov	r3, r1
 800ccec:	813b      	strh	r3, [r7, #8]
 800ccee:	4613      	mov	r3, r2
 800ccf0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ccf8:	b2db      	uxtb	r3, r3
 800ccfa:	2b20      	cmp	r3, #32
 800ccfc:	f040 80f9 	bne.w	800cef2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800cd00:	6a3b      	ldr	r3, [r7, #32]
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d002      	beq.n	800cd0c <HAL_I2C_Mem_Write+0x34>
 800cd06:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d105      	bne.n	800cd18 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cd12:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800cd14:	2301      	movs	r3, #1
 800cd16:	e0ed      	b.n	800cef4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cd1e:	2b01      	cmp	r3, #1
 800cd20:	d101      	bne.n	800cd26 <HAL_I2C_Mem_Write+0x4e>
 800cd22:	2302      	movs	r3, #2
 800cd24:	e0e6      	b.n	800cef4 <HAL_I2C_Mem_Write+0x21c>
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	2201      	movs	r2, #1
 800cd2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800cd2e:	f7fe ff17 	bl	800bb60 <HAL_GetTick>
 800cd32:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800cd34:	697b      	ldr	r3, [r7, #20]
 800cd36:	9300      	str	r3, [sp, #0]
 800cd38:	2319      	movs	r3, #25
 800cd3a:	2201      	movs	r2, #1
 800cd3c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800cd40:	68f8      	ldr	r0, [r7, #12]
 800cd42:	f000 fadd 	bl	800d300 <I2C_WaitOnFlagUntilTimeout>
 800cd46:	4603      	mov	r3, r0
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d001      	beq.n	800cd50 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800cd4c:	2301      	movs	r3, #1
 800cd4e:	e0d1      	b.n	800cef4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	2221      	movs	r2, #33	; 0x21
 800cd54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	2240      	movs	r2, #64	; 0x40
 800cd5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	2200      	movs	r2, #0
 800cd64:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	6a3a      	ldr	r2, [r7, #32]
 800cd6a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800cd70:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	2200      	movs	r2, #0
 800cd76:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800cd78:	88f8      	ldrh	r0, [r7, #6]
 800cd7a:	893a      	ldrh	r2, [r7, #8]
 800cd7c:	8979      	ldrh	r1, [r7, #10]
 800cd7e:	697b      	ldr	r3, [r7, #20]
 800cd80:	9301      	str	r3, [sp, #4]
 800cd82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd84:	9300      	str	r3, [sp, #0]
 800cd86:	4603      	mov	r3, r0
 800cd88:	68f8      	ldr	r0, [r7, #12]
 800cd8a:	f000 f9ed 	bl	800d168 <I2C_RequestMemoryWrite>
 800cd8e:	4603      	mov	r3, r0
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d005      	beq.n	800cda0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	2200      	movs	r2, #0
 800cd98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800cd9c:	2301      	movs	r3, #1
 800cd9e:	e0a9      	b.n	800cef4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cda4:	b29b      	uxth	r3, r3
 800cda6:	2bff      	cmp	r3, #255	; 0xff
 800cda8:	d90e      	bls.n	800cdc8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	22ff      	movs	r2, #255	; 0xff
 800cdae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cdb4:	b2da      	uxtb	r2, r3
 800cdb6:	8979      	ldrh	r1, [r7, #10]
 800cdb8:	2300      	movs	r3, #0
 800cdba:	9300      	str	r3, [sp, #0]
 800cdbc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800cdc0:	68f8      	ldr	r0, [r7, #12]
 800cdc2:	f000 fc57 	bl	800d674 <I2C_TransferConfig>
 800cdc6:	e00f      	b.n	800cde8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cdcc:	b29a      	uxth	r2, r3
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cdd6:	b2da      	uxtb	r2, r3
 800cdd8:	8979      	ldrh	r1, [r7, #10]
 800cdda:	2300      	movs	r3, #0
 800cddc:	9300      	str	r3, [sp, #0]
 800cdde:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800cde2:	68f8      	ldr	r0, [r7, #12]
 800cde4:	f000 fc46 	bl	800d674 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800cde8:	697a      	ldr	r2, [r7, #20]
 800cdea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cdec:	68f8      	ldr	r0, [r7, #12]
 800cdee:	f000 fad6 	bl	800d39e <I2C_WaitOnTXISFlagUntilTimeout>
 800cdf2:	4603      	mov	r3, r0
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d001      	beq.n	800cdfc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800cdf8:	2301      	movs	r3, #1
 800cdfa:	e07b      	b.n	800cef4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce00:	781a      	ldrb	r2, [r3, #0]
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce0c:	1c5a      	adds	r2, r3, #1
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ce16:	b29b      	uxth	r3, r3
 800ce18:	3b01      	subs	r3, #1
 800ce1a:	b29a      	uxth	r2, r3
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ce24:	3b01      	subs	r3, #1
 800ce26:	b29a      	uxth	r2, r3
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ce30:	b29b      	uxth	r3, r3
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d034      	beq.n	800cea0 <HAL_I2C_Mem_Write+0x1c8>
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d130      	bne.n	800cea0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800ce3e:	697b      	ldr	r3, [r7, #20]
 800ce40:	9300      	str	r3, [sp, #0]
 800ce42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce44:	2200      	movs	r2, #0
 800ce46:	2180      	movs	r1, #128	; 0x80
 800ce48:	68f8      	ldr	r0, [r7, #12]
 800ce4a:	f000 fa59 	bl	800d300 <I2C_WaitOnFlagUntilTimeout>
 800ce4e:	4603      	mov	r3, r0
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d001      	beq.n	800ce58 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800ce54:	2301      	movs	r3, #1
 800ce56:	e04d      	b.n	800cef4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ce5c:	b29b      	uxth	r3, r3
 800ce5e:	2bff      	cmp	r3, #255	; 0xff
 800ce60:	d90e      	bls.n	800ce80 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	22ff      	movs	r2, #255	; 0xff
 800ce66:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ce6c:	b2da      	uxtb	r2, r3
 800ce6e:	8979      	ldrh	r1, [r7, #10]
 800ce70:	2300      	movs	r3, #0
 800ce72:	9300      	str	r3, [sp, #0]
 800ce74:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ce78:	68f8      	ldr	r0, [r7, #12]
 800ce7a:	f000 fbfb 	bl	800d674 <I2C_TransferConfig>
 800ce7e:	e00f      	b.n	800cea0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ce84:	b29a      	uxth	r2, r3
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ce8e:	b2da      	uxtb	r2, r3
 800ce90:	8979      	ldrh	r1, [r7, #10]
 800ce92:	2300      	movs	r3, #0
 800ce94:	9300      	str	r3, [sp, #0]
 800ce96:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ce9a:	68f8      	ldr	r0, [r7, #12]
 800ce9c:	f000 fbea 	bl	800d674 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cea4:	b29b      	uxth	r3, r3
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d19e      	bne.n	800cde8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ceaa:	697a      	ldr	r2, [r7, #20]
 800ceac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ceae:	68f8      	ldr	r0, [r7, #12]
 800ceb0:	f000 fabc 	bl	800d42c <I2C_WaitOnSTOPFlagUntilTimeout>
 800ceb4:	4603      	mov	r3, r0
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d001      	beq.n	800cebe <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800ceba:	2301      	movs	r3, #1
 800cebc:	e01a      	b.n	800cef4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	2220      	movs	r2, #32
 800cec4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	6859      	ldr	r1, [r3, #4]
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	681a      	ldr	r2, [r3, #0]
 800ced0:	4b0a      	ldr	r3, [pc, #40]	; (800cefc <HAL_I2C_Mem_Write+0x224>)
 800ced2:	400b      	ands	r3, r1
 800ced4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	2220      	movs	r2, #32
 800ceda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	2200      	movs	r2, #0
 800cee2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	2200      	movs	r2, #0
 800ceea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ceee:	2300      	movs	r3, #0
 800cef0:	e000      	b.n	800cef4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800cef2:	2302      	movs	r3, #2
  }
}
 800cef4:	4618      	mov	r0, r3
 800cef6:	3718      	adds	r7, #24
 800cef8:	46bd      	mov	sp, r7
 800cefa:	bd80      	pop	{r7, pc}
 800cefc:	fe00e800 	.word	0xfe00e800

0800cf00 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cf00:	b580      	push	{r7, lr}
 800cf02:	b088      	sub	sp, #32
 800cf04:	af02      	add	r7, sp, #8
 800cf06:	60f8      	str	r0, [r7, #12]
 800cf08:	4608      	mov	r0, r1
 800cf0a:	4611      	mov	r1, r2
 800cf0c:	461a      	mov	r2, r3
 800cf0e:	4603      	mov	r3, r0
 800cf10:	817b      	strh	r3, [r7, #10]
 800cf12:	460b      	mov	r3, r1
 800cf14:	813b      	strh	r3, [r7, #8]
 800cf16:	4613      	mov	r3, r2
 800cf18:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cf20:	b2db      	uxtb	r3, r3
 800cf22:	2b20      	cmp	r3, #32
 800cf24:	f040 80fd 	bne.w	800d122 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800cf28:	6a3b      	ldr	r3, [r7, #32]
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d002      	beq.n	800cf34 <HAL_I2C_Mem_Read+0x34>
 800cf2e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d105      	bne.n	800cf40 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cf3a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800cf3c:	2301      	movs	r3, #1
 800cf3e:	e0f1      	b.n	800d124 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cf46:	2b01      	cmp	r3, #1
 800cf48:	d101      	bne.n	800cf4e <HAL_I2C_Mem_Read+0x4e>
 800cf4a:	2302      	movs	r3, #2
 800cf4c:	e0ea      	b.n	800d124 <HAL_I2C_Mem_Read+0x224>
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	2201      	movs	r2, #1
 800cf52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800cf56:	f7fe fe03 	bl	800bb60 <HAL_GetTick>
 800cf5a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800cf5c:	697b      	ldr	r3, [r7, #20]
 800cf5e:	9300      	str	r3, [sp, #0]
 800cf60:	2319      	movs	r3, #25
 800cf62:	2201      	movs	r2, #1
 800cf64:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800cf68:	68f8      	ldr	r0, [r7, #12]
 800cf6a:	f000 f9c9 	bl	800d300 <I2C_WaitOnFlagUntilTimeout>
 800cf6e:	4603      	mov	r3, r0
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d001      	beq.n	800cf78 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800cf74:	2301      	movs	r3, #1
 800cf76:	e0d5      	b.n	800d124 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	2222      	movs	r2, #34	; 0x22
 800cf7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	2240      	movs	r2, #64	; 0x40
 800cf84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	2200      	movs	r2, #0
 800cf8c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	6a3a      	ldr	r2, [r7, #32]
 800cf92:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800cf98:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	2200      	movs	r2, #0
 800cf9e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800cfa0:	88f8      	ldrh	r0, [r7, #6]
 800cfa2:	893a      	ldrh	r2, [r7, #8]
 800cfa4:	8979      	ldrh	r1, [r7, #10]
 800cfa6:	697b      	ldr	r3, [r7, #20]
 800cfa8:	9301      	str	r3, [sp, #4]
 800cfaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfac:	9300      	str	r3, [sp, #0]
 800cfae:	4603      	mov	r3, r0
 800cfb0:	68f8      	ldr	r0, [r7, #12]
 800cfb2:	f000 f92d 	bl	800d210 <I2C_RequestMemoryRead>
 800cfb6:	4603      	mov	r3, r0
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d005      	beq.n	800cfc8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	2200      	movs	r2, #0
 800cfc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800cfc4:	2301      	movs	r3, #1
 800cfc6:	e0ad      	b.n	800d124 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cfcc:	b29b      	uxth	r3, r3
 800cfce:	2bff      	cmp	r3, #255	; 0xff
 800cfd0:	d90e      	bls.n	800cff0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	22ff      	movs	r2, #255	; 0xff
 800cfd6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cfdc:	b2da      	uxtb	r2, r3
 800cfde:	8979      	ldrh	r1, [r7, #10]
 800cfe0:	4b52      	ldr	r3, [pc, #328]	; (800d12c <HAL_I2C_Mem_Read+0x22c>)
 800cfe2:	9300      	str	r3, [sp, #0]
 800cfe4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800cfe8:	68f8      	ldr	r0, [r7, #12]
 800cfea:	f000 fb43 	bl	800d674 <I2C_TransferConfig>
 800cfee:	e00f      	b.n	800d010 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cff4:	b29a      	uxth	r2, r3
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cffe:	b2da      	uxtb	r2, r3
 800d000:	8979      	ldrh	r1, [r7, #10]
 800d002:	4b4a      	ldr	r3, [pc, #296]	; (800d12c <HAL_I2C_Mem_Read+0x22c>)
 800d004:	9300      	str	r3, [sp, #0]
 800d006:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d00a:	68f8      	ldr	r0, [r7, #12]
 800d00c:	f000 fb32 	bl	800d674 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800d010:	697b      	ldr	r3, [r7, #20]
 800d012:	9300      	str	r3, [sp, #0]
 800d014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d016:	2200      	movs	r2, #0
 800d018:	2104      	movs	r1, #4
 800d01a:	68f8      	ldr	r0, [r7, #12]
 800d01c:	f000 f970 	bl	800d300 <I2C_WaitOnFlagUntilTimeout>
 800d020:	4603      	mov	r3, r0
 800d022:	2b00      	cmp	r3, #0
 800d024:	d001      	beq.n	800d02a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800d026:	2301      	movs	r3, #1
 800d028:	e07c      	b.n	800d124 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d034:	b2d2      	uxtb	r2, r2
 800d036:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d03c:	1c5a      	adds	r2, r3, #1
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d046:	3b01      	subs	r3, #1
 800d048:	b29a      	uxth	r2, r3
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d052:	b29b      	uxth	r3, r3
 800d054:	3b01      	subs	r3, #1
 800d056:	b29a      	uxth	r2, r3
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d060:	b29b      	uxth	r3, r3
 800d062:	2b00      	cmp	r3, #0
 800d064:	d034      	beq.n	800d0d0 <HAL_I2C_Mem_Read+0x1d0>
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d130      	bne.n	800d0d0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800d06e:	697b      	ldr	r3, [r7, #20]
 800d070:	9300      	str	r3, [sp, #0]
 800d072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d074:	2200      	movs	r2, #0
 800d076:	2180      	movs	r1, #128	; 0x80
 800d078:	68f8      	ldr	r0, [r7, #12]
 800d07a:	f000 f941 	bl	800d300 <I2C_WaitOnFlagUntilTimeout>
 800d07e:	4603      	mov	r3, r0
 800d080:	2b00      	cmp	r3, #0
 800d082:	d001      	beq.n	800d088 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800d084:	2301      	movs	r3, #1
 800d086:	e04d      	b.n	800d124 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d08c:	b29b      	uxth	r3, r3
 800d08e:	2bff      	cmp	r3, #255	; 0xff
 800d090:	d90e      	bls.n	800d0b0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	22ff      	movs	r2, #255	; 0xff
 800d096:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d09c:	b2da      	uxtb	r2, r3
 800d09e:	8979      	ldrh	r1, [r7, #10]
 800d0a0:	2300      	movs	r3, #0
 800d0a2:	9300      	str	r3, [sp, #0]
 800d0a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d0a8:	68f8      	ldr	r0, [r7, #12]
 800d0aa:	f000 fae3 	bl	800d674 <I2C_TransferConfig>
 800d0ae:	e00f      	b.n	800d0d0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d0b4:	b29a      	uxth	r2, r3
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d0be:	b2da      	uxtb	r2, r3
 800d0c0:	8979      	ldrh	r1, [r7, #10]
 800d0c2:	2300      	movs	r3, #0
 800d0c4:	9300      	str	r3, [sp, #0]
 800d0c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d0ca:	68f8      	ldr	r0, [r7, #12]
 800d0cc:	f000 fad2 	bl	800d674 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d0d4:	b29b      	uxth	r3, r3
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d19a      	bne.n	800d010 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d0da:	697a      	ldr	r2, [r7, #20]
 800d0dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d0de:	68f8      	ldr	r0, [r7, #12]
 800d0e0:	f000 f9a4 	bl	800d42c <I2C_WaitOnSTOPFlagUntilTimeout>
 800d0e4:	4603      	mov	r3, r0
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d001      	beq.n	800d0ee <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800d0ea:	2301      	movs	r3, #1
 800d0ec:	e01a      	b.n	800d124 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	2220      	movs	r2, #32
 800d0f4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	6859      	ldr	r1, [r3, #4]
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	681a      	ldr	r2, [r3, #0]
 800d100:	4b0b      	ldr	r3, [pc, #44]	; (800d130 <HAL_I2C_Mem_Read+0x230>)
 800d102:	400b      	ands	r3, r1
 800d104:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	2220      	movs	r2, #32
 800d10a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	2200      	movs	r2, #0
 800d112:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	2200      	movs	r2, #0
 800d11a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800d11e:	2300      	movs	r3, #0
 800d120:	e000      	b.n	800d124 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800d122:	2302      	movs	r3, #2
  }
}
 800d124:	4618      	mov	r0, r3
 800d126:	3718      	adds	r7, #24
 800d128:	46bd      	mov	sp, r7
 800d12a:	bd80      	pop	{r7, pc}
 800d12c:	80002400 	.word	0x80002400
 800d130:	fe00e800 	.word	0xfe00e800

0800d134 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800d134:	b480      	push	{r7}
 800d136:	b083      	sub	sp, #12
 800d138:	af00      	add	r7, sp, #0
 800d13a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d142:	b2db      	uxtb	r3, r3
}
 800d144:	4618      	mov	r0, r3
 800d146:	370c      	adds	r7, #12
 800d148:	46bd      	mov	sp, r7
 800d14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d14e:	4770      	bx	lr

0800d150 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800d150:	b480      	push	{r7}
 800d152:	b083      	sub	sp, #12
 800d154:	af00      	add	r7, sp, #0
 800d156:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 800d15c:	4618      	mov	r0, r3
 800d15e:	370c      	adds	r7, #12
 800d160:	46bd      	mov	sp, r7
 800d162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d166:	4770      	bx	lr

0800d168 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800d168:	b580      	push	{r7, lr}
 800d16a:	b086      	sub	sp, #24
 800d16c:	af02      	add	r7, sp, #8
 800d16e:	60f8      	str	r0, [r7, #12]
 800d170:	4608      	mov	r0, r1
 800d172:	4611      	mov	r1, r2
 800d174:	461a      	mov	r2, r3
 800d176:	4603      	mov	r3, r0
 800d178:	817b      	strh	r3, [r7, #10]
 800d17a:	460b      	mov	r3, r1
 800d17c:	813b      	strh	r3, [r7, #8]
 800d17e:	4613      	mov	r3, r2
 800d180:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800d182:	88fb      	ldrh	r3, [r7, #6]
 800d184:	b2da      	uxtb	r2, r3
 800d186:	8979      	ldrh	r1, [r7, #10]
 800d188:	4b20      	ldr	r3, [pc, #128]	; (800d20c <I2C_RequestMemoryWrite+0xa4>)
 800d18a:	9300      	str	r3, [sp, #0]
 800d18c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d190:	68f8      	ldr	r0, [r7, #12]
 800d192:	f000 fa6f 	bl	800d674 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d196:	69fa      	ldr	r2, [r7, #28]
 800d198:	69b9      	ldr	r1, [r7, #24]
 800d19a:	68f8      	ldr	r0, [r7, #12]
 800d19c:	f000 f8ff 	bl	800d39e <I2C_WaitOnTXISFlagUntilTimeout>
 800d1a0:	4603      	mov	r3, r0
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d001      	beq.n	800d1aa <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800d1a6:	2301      	movs	r3, #1
 800d1a8:	e02c      	b.n	800d204 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800d1aa:	88fb      	ldrh	r3, [r7, #6]
 800d1ac:	2b01      	cmp	r3, #1
 800d1ae:	d105      	bne.n	800d1bc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800d1b0:	893b      	ldrh	r3, [r7, #8]
 800d1b2:	b2da      	uxtb	r2, r3
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	629a      	str	r2, [r3, #40]	; 0x28
 800d1ba:	e015      	b.n	800d1e8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800d1bc:	893b      	ldrh	r3, [r7, #8]
 800d1be:	0a1b      	lsrs	r3, r3, #8
 800d1c0:	b29b      	uxth	r3, r3
 800d1c2:	b2da      	uxtb	r2, r3
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d1ca:	69fa      	ldr	r2, [r7, #28]
 800d1cc:	69b9      	ldr	r1, [r7, #24]
 800d1ce:	68f8      	ldr	r0, [r7, #12]
 800d1d0:	f000 f8e5 	bl	800d39e <I2C_WaitOnTXISFlagUntilTimeout>
 800d1d4:	4603      	mov	r3, r0
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d001      	beq.n	800d1de <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800d1da:	2301      	movs	r3, #1
 800d1dc:	e012      	b.n	800d204 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800d1de:	893b      	ldrh	r3, [r7, #8]
 800d1e0:	b2da      	uxtb	r2, r3
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800d1e8:	69fb      	ldr	r3, [r7, #28]
 800d1ea:	9300      	str	r3, [sp, #0]
 800d1ec:	69bb      	ldr	r3, [r7, #24]
 800d1ee:	2200      	movs	r2, #0
 800d1f0:	2180      	movs	r1, #128	; 0x80
 800d1f2:	68f8      	ldr	r0, [r7, #12]
 800d1f4:	f000 f884 	bl	800d300 <I2C_WaitOnFlagUntilTimeout>
 800d1f8:	4603      	mov	r3, r0
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d001      	beq.n	800d202 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800d1fe:	2301      	movs	r3, #1
 800d200:	e000      	b.n	800d204 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800d202:	2300      	movs	r3, #0
}
 800d204:	4618      	mov	r0, r3
 800d206:	3710      	adds	r7, #16
 800d208:	46bd      	mov	sp, r7
 800d20a:	bd80      	pop	{r7, pc}
 800d20c:	80002000 	.word	0x80002000

0800d210 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800d210:	b580      	push	{r7, lr}
 800d212:	b086      	sub	sp, #24
 800d214:	af02      	add	r7, sp, #8
 800d216:	60f8      	str	r0, [r7, #12]
 800d218:	4608      	mov	r0, r1
 800d21a:	4611      	mov	r1, r2
 800d21c:	461a      	mov	r2, r3
 800d21e:	4603      	mov	r3, r0
 800d220:	817b      	strh	r3, [r7, #10]
 800d222:	460b      	mov	r3, r1
 800d224:	813b      	strh	r3, [r7, #8]
 800d226:	4613      	mov	r3, r2
 800d228:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800d22a:	88fb      	ldrh	r3, [r7, #6]
 800d22c:	b2da      	uxtb	r2, r3
 800d22e:	8979      	ldrh	r1, [r7, #10]
 800d230:	4b20      	ldr	r3, [pc, #128]	; (800d2b4 <I2C_RequestMemoryRead+0xa4>)
 800d232:	9300      	str	r3, [sp, #0]
 800d234:	2300      	movs	r3, #0
 800d236:	68f8      	ldr	r0, [r7, #12]
 800d238:	f000 fa1c 	bl	800d674 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d23c:	69fa      	ldr	r2, [r7, #28]
 800d23e:	69b9      	ldr	r1, [r7, #24]
 800d240:	68f8      	ldr	r0, [r7, #12]
 800d242:	f000 f8ac 	bl	800d39e <I2C_WaitOnTXISFlagUntilTimeout>
 800d246:	4603      	mov	r3, r0
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d001      	beq.n	800d250 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800d24c:	2301      	movs	r3, #1
 800d24e:	e02c      	b.n	800d2aa <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800d250:	88fb      	ldrh	r3, [r7, #6]
 800d252:	2b01      	cmp	r3, #1
 800d254:	d105      	bne.n	800d262 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800d256:	893b      	ldrh	r3, [r7, #8]
 800d258:	b2da      	uxtb	r2, r3
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	629a      	str	r2, [r3, #40]	; 0x28
 800d260:	e015      	b.n	800d28e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800d262:	893b      	ldrh	r3, [r7, #8]
 800d264:	0a1b      	lsrs	r3, r3, #8
 800d266:	b29b      	uxth	r3, r3
 800d268:	b2da      	uxtb	r2, r3
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d270:	69fa      	ldr	r2, [r7, #28]
 800d272:	69b9      	ldr	r1, [r7, #24]
 800d274:	68f8      	ldr	r0, [r7, #12]
 800d276:	f000 f892 	bl	800d39e <I2C_WaitOnTXISFlagUntilTimeout>
 800d27a:	4603      	mov	r3, r0
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d001      	beq.n	800d284 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800d280:	2301      	movs	r3, #1
 800d282:	e012      	b.n	800d2aa <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800d284:	893b      	ldrh	r3, [r7, #8]
 800d286:	b2da      	uxtb	r2, r3
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800d28e:	69fb      	ldr	r3, [r7, #28]
 800d290:	9300      	str	r3, [sp, #0]
 800d292:	69bb      	ldr	r3, [r7, #24]
 800d294:	2200      	movs	r2, #0
 800d296:	2140      	movs	r1, #64	; 0x40
 800d298:	68f8      	ldr	r0, [r7, #12]
 800d29a:	f000 f831 	bl	800d300 <I2C_WaitOnFlagUntilTimeout>
 800d29e:	4603      	mov	r3, r0
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d001      	beq.n	800d2a8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800d2a4:	2301      	movs	r3, #1
 800d2a6:	e000      	b.n	800d2aa <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800d2a8:	2300      	movs	r3, #0
}
 800d2aa:	4618      	mov	r0, r3
 800d2ac:	3710      	adds	r7, #16
 800d2ae:	46bd      	mov	sp, r7
 800d2b0:	bd80      	pop	{r7, pc}
 800d2b2:	bf00      	nop
 800d2b4:	80002000 	.word	0x80002000

0800d2b8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800d2b8:	b480      	push	{r7}
 800d2ba:	b083      	sub	sp, #12
 800d2bc:	af00      	add	r7, sp, #0
 800d2be:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	699b      	ldr	r3, [r3, #24]
 800d2c6:	f003 0302 	and.w	r3, r3, #2
 800d2ca:	2b02      	cmp	r3, #2
 800d2cc:	d103      	bne.n	800d2d6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	2200      	movs	r2, #0
 800d2d4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	699b      	ldr	r3, [r3, #24]
 800d2dc:	f003 0301 	and.w	r3, r3, #1
 800d2e0:	2b01      	cmp	r3, #1
 800d2e2:	d007      	beq.n	800d2f4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	699a      	ldr	r2, [r3, #24]
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	f042 0201 	orr.w	r2, r2, #1
 800d2f2:	619a      	str	r2, [r3, #24]
  }
}
 800d2f4:	bf00      	nop
 800d2f6:	370c      	adds	r7, #12
 800d2f8:	46bd      	mov	sp, r7
 800d2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2fe:	4770      	bx	lr

0800d300 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800d300:	b580      	push	{r7, lr}
 800d302:	b084      	sub	sp, #16
 800d304:	af00      	add	r7, sp, #0
 800d306:	60f8      	str	r0, [r7, #12]
 800d308:	60b9      	str	r1, [r7, #8]
 800d30a:	603b      	str	r3, [r7, #0]
 800d30c:	4613      	mov	r3, r2
 800d30e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d310:	e031      	b.n	800d376 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d312:	683b      	ldr	r3, [r7, #0]
 800d314:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d318:	d02d      	beq.n	800d376 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d31a:	f7fe fc21 	bl	800bb60 <HAL_GetTick>
 800d31e:	4602      	mov	r2, r0
 800d320:	69bb      	ldr	r3, [r7, #24]
 800d322:	1ad3      	subs	r3, r2, r3
 800d324:	683a      	ldr	r2, [r7, #0]
 800d326:	429a      	cmp	r2, r3
 800d328:	d302      	bcc.n	800d330 <I2C_WaitOnFlagUntilTimeout+0x30>
 800d32a:	683b      	ldr	r3, [r7, #0]
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d122      	bne.n	800d376 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	699a      	ldr	r2, [r3, #24]
 800d336:	68bb      	ldr	r3, [r7, #8]
 800d338:	4013      	ands	r3, r2
 800d33a:	68ba      	ldr	r2, [r7, #8]
 800d33c:	429a      	cmp	r2, r3
 800d33e:	bf0c      	ite	eq
 800d340:	2301      	moveq	r3, #1
 800d342:	2300      	movne	r3, #0
 800d344:	b2db      	uxtb	r3, r3
 800d346:	461a      	mov	r2, r3
 800d348:	79fb      	ldrb	r3, [r7, #7]
 800d34a:	429a      	cmp	r2, r3
 800d34c:	d113      	bne.n	800d376 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d352:	f043 0220 	orr.w	r2, r3, #32
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	2220      	movs	r2, #32
 800d35e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	2200      	movs	r2, #0
 800d366:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	2200      	movs	r2, #0
 800d36e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800d372:	2301      	movs	r3, #1
 800d374:	e00f      	b.n	800d396 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	699a      	ldr	r2, [r3, #24]
 800d37c:	68bb      	ldr	r3, [r7, #8]
 800d37e:	4013      	ands	r3, r2
 800d380:	68ba      	ldr	r2, [r7, #8]
 800d382:	429a      	cmp	r2, r3
 800d384:	bf0c      	ite	eq
 800d386:	2301      	moveq	r3, #1
 800d388:	2300      	movne	r3, #0
 800d38a:	b2db      	uxtb	r3, r3
 800d38c:	461a      	mov	r2, r3
 800d38e:	79fb      	ldrb	r3, [r7, #7]
 800d390:	429a      	cmp	r2, r3
 800d392:	d0be      	beq.n	800d312 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d394:	2300      	movs	r3, #0
}
 800d396:	4618      	mov	r0, r3
 800d398:	3710      	adds	r7, #16
 800d39a:	46bd      	mov	sp, r7
 800d39c:	bd80      	pop	{r7, pc}

0800d39e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800d39e:	b580      	push	{r7, lr}
 800d3a0:	b084      	sub	sp, #16
 800d3a2:	af00      	add	r7, sp, #0
 800d3a4:	60f8      	str	r0, [r7, #12]
 800d3a6:	60b9      	str	r1, [r7, #8]
 800d3a8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800d3aa:	e033      	b.n	800d414 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800d3ac:	687a      	ldr	r2, [r7, #4]
 800d3ae:	68b9      	ldr	r1, [r7, #8]
 800d3b0:	68f8      	ldr	r0, [r7, #12]
 800d3b2:	f000 f87f 	bl	800d4b4 <I2C_IsErrorOccurred>
 800d3b6:	4603      	mov	r3, r0
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d001      	beq.n	800d3c0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800d3bc:	2301      	movs	r3, #1
 800d3be:	e031      	b.n	800d424 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d3c0:	68bb      	ldr	r3, [r7, #8]
 800d3c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3c6:	d025      	beq.n	800d414 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d3c8:	f7fe fbca 	bl	800bb60 <HAL_GetTick>
 800d3cc:	4602      	mov	r2, r0
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	1ad3      	subs	r3, r2, r3
 800d3d2:	68ba      	ldr	r2, [r7, #8]
 800d3d4:	429a      	cmp	r2, r3
 800d3d6:	d302      	bcc.n	800d3de <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800d3d8:	68bb      	ldr	r3, [r7, #8]
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d11a      	bne.n	800d414 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	699b      	ldr	r3, [r3, #24]
 800d3e4:	f003 0302 	and.w	r3, r3, #2
 800d3e8:	2b02      	cmp	r3, #2
 800d3ea:	d013      	beq.n	800d414 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d3f0:	f043 0220 	orr.w	r2, r3, #32
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	2220      	movs	r2, #32
 800d3fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	2200      	movs	r2, #0
 800d404:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	2200      	movs	r2, #0
 800d40c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800d410:	2301      	movs	r3, #1
 800d412:	e007      	b.n	800d424 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	699b      	ldr	r3, [r3, #24]
 800d41a:	f003 0302 	and.w	r3, r3, #2
 800d41e:	2b02      	cmp	r3, #2
 800d420:	d1c4      	bne.n	800d3ac <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800d422:	2300      	movs	r3, #0
}
 800d424:	4618      	mov	r0, r3
 800d426:	3710      	adds	r7, #16
 800d428:	46bd      	mov	sp, r7
 800d42a:	bd80      	pop	{r7, pc}

0800d42c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800d42c:	b580      	push	{r7, lr}
 800d42e:	b084      	sub	sp, #16
 800d430:	af00      	add	r7, sp, #0
 800d432:	60f8      	str	r0, [r7, #12]
 800d434:	60b9      	str	r1, [r7, #8]
 800d436:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d438:	e02f      	b.n	800d49a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800d43a:	687a      	ldr	r2, [r7, #4]
 800d43c:	68b9      	ldr	r1, [r7, #8]
 800d43e:	68f8      	ldr	r0, [r7, #12]
 800d440:	f000 f838 	bl	800d4b4 <I2C_IsErrorOccurred>
 800d444:	4603      	mov	r3, r0
 800d446:	2b00      	cmp	r3, #0
 800d448:	d001      	beq.n	800d44e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800d44a:	2301      	movs	r3, #1
 800d44c:	e02d      	b.n	800d4aa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d44e:	f7fe fb87 	bl	800bb60 <HAL_GetTick>
 800d452:	4602      	mov	r2, r0
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	1ad3      	subs	r3, r2, r3
 800d458:	68ba      	ldr	r2, [r7, #8]
 800d45a:	429a      	cmp	r2, r3
 800d45c:	d302      	bcc.n	800d464 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800d45e:	68bb      	ldr	r3, [r7, #8]
 800d460:	2b00      	cmp	r3, #0
 800d462:	d11a      	bne.n	800d49a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	699b      	ldr	r3, [r3, #24]
 800d46a:	f003 0320 	and.w	r3, r3, #32
 800d46e:	2b20      	cmp	r3, #32
 800d470:	d013      	beq.n	800d49a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d476:	f043 0220 	orr.w	r2, r3, #32
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	2220      	movs	r2, #32
 800d482:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	2200      	movs	r2, #0
 800d48a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	2200      	movs	r2, #0
 800d492:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800d496:	2301      	movs	r3, #1
 800d498:	e007      	b.n	800d4aa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	699b      	ldr	r3, [r3, #24]
 800d4a0:	f003 0320 	and.w	r3, r3, #32
 800d4a4:	2b20      	cmp	r3, #32
 800d4a6:	d1c8      	bne.n	800d43a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800d4a8:	2300      	movs	r3, #0
}
 800d4aa:	4618      	mov	r0, r3
 800d4ac:	3710      	adds	r7, #16
 800d4ae:	46bd      	mov	sp, r7
 800d4b0:	bd80      	pop	{r7, pc}
	...

0800d4b4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800d4b4:	b580      	push	{r7, lr}
 800d4b6:	b08a      	sub	sp, #40	; 0x28
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	60f8      	str	r0, [r7, #12]
 800d4bc:	60b9      	str	r1, [r7, #8]
 800d4be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d4c0:	2300      	movs	r3, #0
 800d4c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	699b      	ldr	r3, [r3, #24]
 800d4cc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800d4ce:	2300      	movs	r3, #0
 800d4d0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800d4d6:	69bb      	ldr	r3, [r7, #24]
 800d4d8:	f003 0310 	and.w	r3, r3, #16
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d068      	beq.n	800d5b2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	2210      	movs	r2, #16
 800d4e6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800d4e8:	e049      	b.n	800d57e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800d4ea:	68bb      	ldr	r3, [r7, #8]
 800d4ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4f0:	d045      	beq.n	800d57e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800d4f2:	f7fe fb35 	bl	800bb60 <HAL_GetTick>
 800d4f6:	4602      	mov	r2, r0
 800d4f8:	69fb      	ldr	r3, [r7, #28]
 800d4fa:	1ad3      	subs	r3, r2, r3
 800d4fc:	68ba      	ldr	r2, [r7, #8]
 800d4fe:	429a      	cmp	r2, r3
 800d500:	d302      	bcc.n	800d508 <I2C_IsErrorOccurred+0x54>
 800d502:	68bb      	ldr	r3, [r7, #8]
 800d504:	2b00      	cmp	r3, #0
 800d506:	d13a      	bne.n	800d57e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	685b      	ldr	r3, [r3, #4]
 800d50e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d512:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d51a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	699b      	ldr	r3, [r3, #24]
 800d522:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d526:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d52a:	d121      	bne.n	800d570 <I2C_IsErrorOccurred+0xbc>
 800d52c:	697b      	ldr	r3, [r7, #20]
 800d52e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d532:	d01d      	beq.n	800d570 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800d534:	7cfb      	ldrb	r3, [r7, #19]
 800d536:	2b20      	cmp	r3, #32
 800d538:	d01a      	beq.n	800d570 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	685a      	ldr	r2, [r3, #4]
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d548:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800d54a:	f7fe fb09 	bl	800bb60 <HAL_GetTick>
 800d54e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d550:	e00e      	b.n	800d570 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800d552:	f7fe fb05 	bl	800bb60 <HAL_GetTick>
 800d556:	4602      	mov	r2, r0
 800d558:	69fb      	ldr	r3, [r7, #28]
 800d55a:	1ad3      	subs	r3, r2, r3
 800d55c:	2b19      	cmp	r3, #25
 800d55e:	d907      	bls.n	800d570 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800d560:	6a3b      	ldr	r3, [r7, #32]
 800d562:	f043 0320 	orr.w	r3, r3, #32
 800d566:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800d568:	2301      	movs	r3, #1
 800d56a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800d56e:	e006      	b.n	800d57e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	699b      	ldr	r3, [r3, #24]
 800d576:	f003 0320 	and.w	r3, r3, #32
 800d57a:	2b20      	cmp	r3, #32
 800d57c:	d1e9      	bne.n	800d552 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	699b      	ldr	r3, [r3, #24]
 800d584:	f003 0320 	and.w	r3, r3, #32
 800d588:	2b20      	cmp	r3, #32
 800d58a:	d003      	beq.n	800d594 <I2C_IsErrorOccurred+0xe0>
 800d58c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d590:	2b00      	cmp	r3, #0
 800d592:	d0aa      	beq.n	800d4ea <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800d594:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d103      	bne.n	800d5a4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	2220      	movs	r2, #32
 800d5a2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800d5a4:	6a3b      	ldr	r3, [r7, #32]
 800d5a6:	f043 0304 	orr.w	r3, r3, #4
 800d5aa:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800d5ac:	2301      	movs	r3, #1
 800d5ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	699b      	ldr	r3, [r3, #24]
 800d5b8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800d5ba:	69bb      	ldr	r3, [r7, #24]
 800d5bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d00b      	beq.n	800d5dc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800d5c4:	6a3b      	ldr	r3, [r7, #32]
 800d5c6:	f043 0301 	orr.w	r3, r3, #1
 800d5ca:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d5d4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800d5d6:	2301      	movs	r3, #1
 800d5d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800d5dc:	69bb      	ldr	r3, [r7, #24]
 800d5de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d00b      	beq.n	800d5fe <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800d5e6:	6a3b      	ldr	r3, [r7, #32]
 800d5e8:	f043 0308 	orr.w	r3, r3, #8
 800d5ec:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d5f6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800d5f8:	2301      	movs	r3, #1
 800d5fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800d5fe:	69bb      	ldr	r3, [r7, #24]
 800d600:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d604:	2b00      	cmp	r3, #0
 800d606:	d00b      	beq.n	800d620 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800d608:	6a3b      	ldr	r3, [r7, #32]
 800d60a:	f043 0302 	orr.w	r3, r3, #2
 800d60e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d618:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800d61a:	2301      	movs	r3, #1
 800d61c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800d620:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d624:	2b00      	cmp	r3, #0
 800d626:	d01c      	beq.n	800d662 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800d628:	68f8      	ldr	r0, [r7, #12]
 800d62a:	f7ff fe45 	bl	800d2b8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	6859      	ldr	r1, [r3, #4]
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	681a      	ldr	r2, [r3, #0]
 800d638:	4b0d      	ldr	r3, [pc, #52]	; (800d670 <I2C_IsErrorOccurred+0x1bc>)
 800d63a:	400b      	ands	r3, r1
 800d63c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d642:	6a3b      	ldr	r3, [r7, #32]
 800d644:	431a      	orrs	r2, r3
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	2220      	movs	r2, #32
 800d64e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	2200      	movs	r2, #0
 800d656:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	2200      	movs	r2, #0
 800d65e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800d662:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800d666:	4618      	mov	r0, r3
 800d668:	3728      	adds	r7, #40	; 0x28
 800d66a:	46bd      	mov	sp, r7
 800d66c:	bd80      	pop	{r7, pc}
 800d66e:	bf00      	nop
 800d670:	fe00e800 	.word	0xfe00e800

0800d674 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800d674:	b480      	push	{r7}
 800d676:	b087      	sub	sp, #28
 800d678:	af00      	add	r7, sp, #0
 800d67a:	60f8      	str	r0, [r7, #12]
 800d67c:	607b      	str	r3, [r7, #4]
 800d67e:	460b      	mov	r3, r1
 800d680:	817b      	strh	r3, [r7, #10]
 800d682:	4613      	mov	r3, r2
 800d684:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d686:	897b      	ldrh	r3, [r7, #10]
 800d688:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800d68c:	7a7b      	ldrb	r3, [r7, #9]
 800d68e:	041b      	lsls	r3, r3, #16
 800d690:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d694:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d69a:	6a3b      	ldr	r3, [r7, #32]
 800d69c:	4313      	orrs	r3, r2
 800d69e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d6a2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	685a      	ldr	r2, [r3, #4]
 800d6aa:	6a3b      	ldr	r3, [r7, #32]
 800d6ac:	0d5b      	lsrs	r3, r3, #21
 800d6ae:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800d6b2:	4b08      	ldr	r3, [pc, #32]	; (800d6d4 <I2C_TransferConfig+0x60>)
 800d6b4:	430b      	orrs	r3, r1
 800d6b6:	43db      	mvns	r3, r3
 800d6b8:	ea02 0103 	and.w	r1, r2, r3
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	697a      	ldr	r2, [r7, #20]
 800d6c2:	430a      	orrs	r2, r1
 800d6c4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800d6c6:	bf00      	nop
 800d6c8:	371c      	adds	r7, #28
 800d6ca:	46bd      	mov	sp, r7
 800d6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6d0:	4770      	bx	lr
 800d6d2:	bf00      	nop
 800d6d4:	03ff63ff 	.word	0x03ff63ff

0800d6d8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800d6d8:	b480      	push	{r7}
 800d6da:	b083      	sub	sp, #12
 800d6dc:	af00      	add	r7, sp, #0
 800d6de:	6078      	str	r0, [r7, #4]
 800d6e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d6e8:	b2db      	uxtb	r3, r3
 800d6ea:	2b20      	cmp	r3, #32
 800d6ec:	d138      	bne.n	800d760 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d6f4:	2b01      	cmp	r3, #1
 800d6f6:	d101      	bne.n	800d6fc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800d6f8:	2302      	movs	r3, #2
 800d6fa:	e032      	b.n	800d762 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	2201      	movs	r2, #1
 800d700:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	2224      	movs	r2, #36	; 0x24
 800d708:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	681a      	ldr	r2, [r3, #0]
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	f022 0201 	bic.w	r2, r2, #1
 800d71a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	681a      	ldr	r2, [r3, #0]
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800d72a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	6819      	ldr	r1, [r3, #0]
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	683a      	ldr	r2, [r7, #0]
 800d738:	430a      	orrs	r2, r1
 800d73a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	681a      	ldr	r2, [r3, #0]
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	f042 0201 	orr.w	r2, r2, #1
 800d74a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	2220      	movs	r2, #32
 800d750:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	2200      	movs	r2, #0
 800d758:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800d75c:	2300      	movs	r3, #0
 800d75e:	e000      	b.n	800d762 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800d760:	2302      	movs	r3, #2
  }
}
 800d762:	4618      	mov	r0, r3
 800d764:	370c      	adds	r7, #12
 800d766:	46bd      	mov	sp, r7
 800d768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d76c:	4770      	bx	lr

0800d76e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800d76e:	b480      	push	{r7}
 800d770:	b085      	sub	sp, #20
 800d772:	af00      	add	r7, sp, #0
 800d774:	6078      	str	r0, [r7, #4]
 800d776:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d77e:	b2db      	uxtb	r3, r3
 800d780:	2b20      	cmp	r3, #32
 800d782:	d139      	bne.n	800d7f8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d78a:	2b01      	cmp	r3, #1
 800d78c:	d101      	bne.n	800d792 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800d78e:	2302      	movs	r3, #2
 800d790:	e033      	b.n	800d7fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	2201      	movs	r2, #1
 800d796:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	2224      	movs	r2, #36	; 0x24
 800d79e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	681a      	ldr	r2, [r3, #0]
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	f022 0201 	bic.w	r2, r2, #1
 800d7b0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800d7c0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800d7c2:	683b      	ldr	r3, [r7, #0]
 800d7c4:	021b      	lsls	r3, r3, #8
 800d7c6:	68fa      	ldr	r2, [r7, #12]
 800d7c8:	4313      	orrs	r3, r2
 800d7ca:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	68fa      	ldr	r2, [r7, #12]
 800d7d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	681a      	ldr	r2, [r3, #0]
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	f042 0201 	orr.w	r2, r2, #1
 800d7e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	2220      	movs	r2, #32
 800d7e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	2200      	movs	r2, #0
 800d7f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800d7f4:	2300      	movs	r3, #0
 800d7f6:	e000      	b.n	800d7fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800d7f8:	2302      	movs	r3, #2
  }
}
 800d7fa:	4618      	mov	r0, r3
 800d7fc:	3714      	adds	r7, #20
 800d7fe:	46bd      	mov	sp, r7
 800d800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d804:	4770      	bx	lr
	...

0800d808 <HAL_JPEG_Init>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_Init(JPEG_HandleTypeDef *hjpeg)
{
 800d808:	b580      	push	{r7, lr}
 800d80a:	b082      	sub	sp, #8
 800d80c:	af00      	add	r7, sp, #0
 800d80e:	6078      	str	r0, [r7, #4]
    99,  99,  99,  99,  99,  99,  99,  99,
    99,  99,  99,  99,  99,  99,  99,  99
  };

  /* Check the JPEG handle allocation */
  if (hjpeg == NULL)
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	2b00      	cmp	r3, #0
 800d814:	d101      	bne.n	800d81a <HAL_JPEG_Init+0x12>
  {
    return HAL_ERROR;
 800d816:	2301      	movs	r3, #1
 800d818:	e070      	b.n	800d8fc <HAL_JPEG_Init+0xf4>

    /* Init the low level hardware */
    hjpeg->MspInitCallback(hjpeg);
  }
#else
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800d820:	b2db      	uxtb	r3, r3
 800d822:	2b00      	cmp	r3, #0
 800d824:	d106      	bne.n	800d834 <HAL_JPEG_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hjpeg->Lock = HAL_UNLOCKED;
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	2200      	movs	r2, #0
 800d82a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_JPEG_MspInit(hjpeg);
 800d82e:	6878      	ldr	r0, [r7, #4]
 800d830:	f7f9 f91e 	bl	8006a70 <HAL_JPEG_MspInit>
  }
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	2202      	movs	r2, #2
 800d838:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Start the JPEG Core*/
  __HAL_JPEG_ENABLE(hjpeg);
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	f042 0201 	orr.w	r2, r2, #1
 800d84a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Stop the JPEG encoding/decoding process*/
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	681a      	ldr	r2, [r3, #0]
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	f022 0201 	bic.w	r2, r2, #1
 800d85a:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 800d86a:	631a      	str	r2, [r3, #48]	; 0x30


  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d87a:	631a      	str	r2, [r3, #48]	; 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d88a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800d89a:	639a      	str	r2, [r3, #56]	; 0x38

  /* init default quantization tables*/
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	4a19      	ldr	r2, [pc, #100]	; (800d904 <HAL_JPEG_Init+0xfc>)
 800d8a0:	63da      	str	r2, [r3, #60]	; 0x3c
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	4a18      	ldr	r2, [pc, #96]	; (800d908 <HAL_JPEG_Init+0x100>)
 800d8a6:	641a      	str	r2, [r3, #64]	; 0x40
  hjpeg->QuantTable2 = NULL;
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	2200      	movs	r2, #0
 800d8ac:	645a      	str	r2, [r3, #68]	; 0x44
  hjpeg->QuantTable3 = NULL;
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	2200      	movs	r2, #0
 800d8b2:	649a      	str	r2, [r3, #72]	; 0x48

  /* init the default Huffman tables*/
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 800d8b4:	6878      	ldr	r0, [r7, #4]
 800d8b6:	f000 fdc7 	bl	800e448 <JPEG_Set_HuffEnc_Mem>
 800d8ba:	4603      	mov	r3, r0
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d004      	beq.n	800d8ca <HAL_JPEG_Init+0xc2>
  {
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	2201      	movs	r2, #1
 800d8c4:	651a      	str	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 800d8c6:	2301      	movs	r3, #1
 800d8c8:	e018      	b.n	800d8fc <HAL_JPEG_Init+0xf4>
  }

  /* Enable header processing*/
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	685a      	ldr	r2, [r3, #4]
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d8d8:	605a      	str	r2, [r3, #4]

  /* Reset JpegInCount and JpegOutCount */
  hjpeg->JpegInCount = 0;
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	2200      	movs	r2, #0
 800d8de:	621a      	str	r2, [r3, #32]
  hjpeg->JpegOutCount = 0;
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	2200      	movs	r2, #0
 800d8e4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_READY;
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	2201      	movs	r2, #1
 800d8ea:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Reset the JPEG ErrorCode */
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	2200      	movs	r2, #0
 800d8f2:	651a      	str	r2, [r3, #80]	; 0x50

  /*Clear the context filelds*/
  hjpeg->Context = 0;
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	2200      	movs	r2, #0
 800d8f8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Return function status */
  return HAL_OK;
 800d8fa:	2300      	movs	r3, #0
}
 800d8fc:	4618      	mov	r0, r3
 800d8fe:	3708      	adds	r7, #8
 800d900:	46bd      	mov	sp, r7
 800d902:	bd80      	pop	{r7, pc}
 800d904:	0802a5b8 	.word	0x0802a5b8
 800d908:	0802a5f8 	.word	0x0802a5f8

0800d90c <HAL_JPEG_GetInfo>:
  * @param  pInfo pointer to a JPEG_ConfTypeDef structure that contains
  *         The JPEG decoded header information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_GetInfo(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{
 800d90c:	b580      	push	{r7, lr}
 800d90e:	b086      	sub	sp, #24
 800d910:	af00      	add	r7, sp, #0
 800d912:	6078      	str	r0, [r7, #4]
 800d914:	6039      	str	r1, [r7, #0]
  uint32_t yblockNb;
  uint32_t cBblockNb;
  uint32_t cRblockNb;

  /* Check the JPEG handle allocation */
  if ((hjpeg == NULL) || (pInfo == NULL))
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d002      	beq.n	800d922 <HAL_JPEG_GetInfo+0x16>
 800d91c:	683b      	ldr	r3, [r7, #0]
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d101      	bne.n	800d926 <HAL_JPEG_GetInfo+0x1a>
  {
    return HAL_ERROR;
 800d922:	2301      	movs	r3, #1
 800d924:	e083      	b.n	800da2e <HAL_JPEG_GetInfo+0x122>
  }

  /*Read the conf parameters */
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	685b      	ldr	r3, [r3, #4]
 800d92c:	f003 0303 	and.w	r3, r3, #3
 800d930:	2b02      	cmp	r3, #2
 800d932:	d103      	bne.n	800d93c <HAL_JPEG_GetInfo+0x30>
  {
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
 800d934:	683b      	ldr	r3, [r7, #0]
 800d936:	2210      	movs	r2, #16
 800d938:	601a      	str	r2, [r3, #0]
 800d93a:	e017      	b.n	800d96c <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	685b      	ldr	r3, [r3, #4]
 800d942:	f003 0303 	and.w	r3, r3, #3
 800d946:	2b00      	cmp	r3, #0
 800d948:	d103      	bne.n	800d952 <HAL_JPEG_GetInfo+0x46>
  {
    pInfo->ColorSpace = JPEG_GRAYSCALE_COLORSPACE;
 800d94a:	683b      	ldr	r3, [r7, #0]
 800d94c:	2200      	movs	r2, #0
 800d94e:	601a      	str	r2, [r3, #0]
 800d950:	e00c      	b.n	800d96c <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	685b      	ldr	r3, [r3, #4]
 800d958:	f003 0303 	and.w	r3, r3, #3
 800d95c:	2b03      	cmp	r3, #3
 800d95e:	d103      	bne.n	800d968 <HAL_JPEG_GetInfo+0x5c>
  {
    pInfo->ColorSpace = JPEG_CMYK_COLORSPACE;
 800d960:	683b      	ldr	r3, [r7, #0]
 800d962:	2230      	movs	r2, #48	; 0x30
 800d964:	601a      	str	r2, [r3, #0]
 800d966:	e001      	b.n	800d96c <HAL_JPEG_GetInfo+0x60>
  }
  else
  {
    return HAL_ERROR;
 800d968:	2301      	movs	r3, #1
 800d96a:	e060      	b.n	800da2e <HAL_JPEG_GetInfo+0x122>
  }

  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	685b      	ldr	r3, [r3, #4]
 800d972:	0c1b      	lsrs	r3, r3, #16
 800d974:	b29a      	uxth	r2, r3
 800d976:	683b      	ldr	r3, [r7, #0]
 800d978:	609a      	str	r2, [r3, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	68db      	ldr	r3, [r3, #12]
 800d980:	0c1b      	lsrs	r3, r3, #16
 800d982:	b29a      	uxth	r2, r3
 800d984:	683b      	ldr	r3, [r7, #0]
 800d986:	60da      	str	r2, [r3, #12]

  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 800d988:	683b      	ldr	r3, [r7, #0]
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	2b10      	cmp	r3, #16
 800d98e:	d003      	beq.n	800d998 <HAL_JPEG_GetInfo+0x8c>
 800d990:	683b      	ldr	r3, [r7, #0]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	2b30      	cmp	r3, #48	; 0x30
 800d996:	d140      	bne.n	800da1a <HAL_JPEG_GetInfo+0x10e>
  {
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	691b      	ldr	r3, [r3, #16]
 800d99e:	091b      	lsrs	r3, r3, #4
 800d9a0:	f003 030f 	and.w	r3, r3, #15
 800d9a4:	617b      	str	r3, [r7, #20]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	695b      	ldr	r3, [r3, #20]
 800d9ac:	091b      	lsrs	r3, r3, #4
 800d9ae:	f003 030f 	and.w	r3, r3, #15
 800d9b2:	613b      	str	r3, [r7, #16]
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	699b      	ldr	r3, [r3, #24]
 800d9ba:	091b      	lsrs	r3, r3, #4
 800d9bc:	f003 030f 	and.w	r3, r3, #15
 800d9c0:	60fb      	str	r3, [r7, #12]

    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800d9c2:	697b      	ldr	r3, [r7, #20]
 800d9c4:	2b01      	cmp	r3, #1
 800d9c6:	d109      	bne.n	800d9dc <HAL_JPEG_GetInfo+0xd0>
 800d9c8:	693b      	ldr	r3, [r7, #16]
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d106      	bne.n	800d9dc <HAL_JPEG_GetInfo+0xd0>
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d103      	bne.n	800d9dc <HAL_JPEG_GetInfo+0xd0>
    {
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
 800d9d4:	683b      	ldr	r3, [r7, #0]
 800d9d6:	2202      	movs	r2, #2
 800d9d8:	605a      	str	r2, [r3, #4]
 800d9da:	e01d      	b.n	800da18 <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800d9dc:	697b      	ldr	r3, [r7, #20]
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d109      	bne.n	800d9f6 <HAL_JPEG_GetInfo+0xea>
 800d9e2:	693b      	ldr	r3, [r7, #16]
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d106      	bne.n	800d9f6 <HAL_JPEG_GetInfo+0xea>
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d103      	bne.n	800d9f6 <HAL_JPEG_GetInfo+0xea>
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 800d9ee:	683b      	ldr	r3, [r7, #0]
 800d9f0:	2200      	movs	r2, #0
 800d9f2:	605a      	str	r2, [r3, #4]
 800d9f4:	e010      	b.n	800da18 <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800d9f6:	697b      	ldr	r3, [r7, #20]
 800d9f8:	2b03      	cmp	r3, #3
 800d9fa:	d109      	bne.n	800da10 <HAL_JPEG_GetInfo+0x104>
 800d9fc:	693b      	ldr	r3, [r7, #16]
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d106      	bne.n	800da10 <HAL_JPEG_GetInfo+0x104>
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	2b00      	cmp	r3, #0
 800da06:	d103      	bne.n	800da10 <HAL_JPEG_GetInfo+0x104>
    {
      pInfo->ChromaSubsampling = JPEG_420_SUBSAMPLING;
 800da08:	683b      	ldr	r3, [r7, #0]
 800da0a:	2201      	movs	r2, #1
 800da0c:	605a      	str	r2, [r3, #4]
 800da0e:	e003      	b.n	800da18 <HAL_JPEG_GetInfo+0x10c>
    }
    else /*Default is 4:4:4*/
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 800da10:	683b      	ldr	r3, [r7, #0]
 800da12:	2200      	movs	r2, #0
 800da14:	605a      	str	r2, [r3, #4]
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800da16:	e003      	b.n	800da20 <HAL_JPEG_GetInfo+0x114>
 800da18:	e002      	b.n	800da20 <HAL_JPEG_GetInfo+0x114>
    }
  }
  else
  {
    pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 800da1a:	683b      	ldr	r3, [r7, #0]
 800da1c:	2200      	movs	r2, #0
 800da1e:	605a      	str	r2, [r3, #4]
  }

  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
 800da20:	6878      	ldr	r0, [r7, #4]
 800da22:	f001 fe03 	bl	800f62c <JPEG_GetQuality>
 800da26:	4602      	mov	r2, r0
 800da28:	683b      	ldr	r3, [r7, #0]
 800da2a:	611a      	str	r2, [r3, #16]

  /* Return function status */
  return HAL_OK;
 800da2c:	2300      	movs	r3, #0
}
 800da2e:	4618      	mov	r0, r3
 800da30:	3718      	adds	r7, #24
 800da32:	46bd      	mov	sp, r7
 800da34:	bd80      	pop	{r7, pc}

0800da36 <HAL_JPEG_Decode_DMA>:
  * @param  OutDataLength size in bytes of the Output buffer
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Decode_DMA(JPEG_HandleTypeDef *hjpeg, uint8_t *pDataIn, uint32_t InDataLength,
                                       uint8_t *pDataOutMCU, uint32_t OutDataLength)
{
 800da36:	b580      	push	{r7, lr}
 800da38:	b084      	sub	sp, #16
 800da3a:	af00      	add	r7, sp, #0
 800da3c:	60f8      	str	r0, [r7, #12]
 800da3e:	60b9      	str	r1, [r7, #8]
 800da40:	607a      	str	r2, [r7, #4]
 800da42:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param((InDataLength >= 4UL));
  assert_param((OutDataLength >= 4UL));

  /* Check In/out buffer allocation and size */
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	2b00      	cmp	r3, #0
 800da48:	d005      	beq.n	800da56 <HAL_JPEG_Decode_DMA+0x20>
 800da4a:	68bb      	ldr	r3, [r7, #8]
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d002      	beq.n	800da56 <HAL_JPEG_Decode_DMA+0x20>
 800da50:	683b      	ldr	r3, [r7, #0]
 800da52:	2b00      	cmp	r3, #0
 800da54:	d101      	bne.n	800da5a <HAL_JPEG_Decode_DMA+0x24>
  {
    return HAL_ERROR;
 800da56:	2301      	movs	r3, #1
 800da58:	e04c      	b.n	800daf4 <HAL_JPEG_Decode_DMA+0xbe>
  }

  /* Process Locked */
  __HAL_LOCK(hjpeg);
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800da60:	2b01      	cmp	r3, #1
 800da62:	d101      	bne.n	800da68 <HAL_JPEG_Decode_DMA+0x32>
 800da64:	2302      	movs	r3, #2
 800da66:	e045      	b.n	800daf4 <HAL_JPEG_Decode_DMA+0xbe>
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	2201      	movs	r2, #1
 800da6c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  if (hjpeg->State == HAL_JPEG_STATE_READY)
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800da76:	b2db      	uxtb	r3, r3
 800da78:	2b01      	cmp	r3, #1
 800da7a:	d134      	bne.n	800dae6 <HAL_JPEG_Decode_DMA+0xb0>
  {
    /*Change JPEG state*/
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	2204      	movs	r2, #4
 800da80:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

    /*Set the Context to Decode with DMA*/
    hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK);
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da88:	f023 020f 	bic.w	r2, r3, #15
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	655a      	str	r2, [r3, #84]	; 0x54
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da94:	f043 020e 	orr.w	r2, r3, #14
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	655a      	str	r2, [r3, #84]	; 0x54

    /*Store In/out buffers pointers and size*/
    hjpeg->pJpegInBuffPtr = pDataIn;
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	68ba      	ldr	r2, [r7, #8]
 800daa0:	619a      	str	r2, [r3, #24]
    hjpeg->pJpegOutBuffPtr = pDataOutMCU;
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	683a      	ldr	r2, [r7, #0]
 800daa6:	61da      	str	r2, [r3, #28]
    hjpeg->InDataLength = InDataLength;
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	687a      	ldr	r2, [r7, #4]
 800daac:	629a      	str	r2, [r3, #40]	; 0x28
    hjpeg->OutDataLength = OutDataLength;
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	69ba      	ldr	r2, [r7, #24]
 800dab2:	62da      	str	r2, [r3, #44]	; 0x2c

    /*Reset In/out data counter */
    hjpeg->JpegInCount = 0;
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	2200      	movs	r2, #0
 800dab8:	621a      	str	r2, [r3, #32]
    hjpeg->JpegOutCount = 0;
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	2200      	movs	r2, #0
 800dabe:	625a      	str	r2, [r3, #36]	; 0x24

    /*Init decoding process*/
    JPEG_Init_Process(hjpeg);
 800dac0:	68f8      	ldr	r0, [r7, #12]
 800dac2:	f000 ff43 	bl	800e94c <JPEG_Init_Process>

    /* JPEG decoding process using DMA */
    if (JPEG_DMA_StartProcess(hjpeg) != HAL_OK)
 800dac6:	68f8      	ldr	r0, [r7, #12]
 800dac8:	f001 fa64 	bl	800ef94 <JPEG_DMA_StartProcess>
 800dacc:	4603      	mov	r3, r0
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d00f      	beq.n	800daf2 <HAL_JPEG_Decode_DMA+0xbc>
    {
      /* Update State */
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	2206      	movs	r2, #6
 800dad6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      /* Process Unlocked */
      __HAL_UNLOCK(hjpeg);
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	2200      	movs	r2, #0
 800dade:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      return HAL_ERROR;
 800dae2:	2301      	movs	r3, #1
 800dae4:	e006      	b.n	800daf4 <HAL_JPEG_Decode_DMA+0xbe>
    }
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	2200      	movs	r2, #0
 800daea:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    return HAL_BUSY;
 800daee:	2302      	movs	r3, #2
 800daf0:	e000      	b.n	800daf4 <HAL_JPEG_Decode_DMA+0xbe>
  }
  /* Return function status */
  return HAL_OK;
 800daf2:	2300      	movs	r3, #0
}
 800daf4:	4618      	mov	r0, r3
 800daf6:	3710      	adds	r7, #16
 800daf8:	46bd      	mov	sp, r7
 800dafa:	bd80      	pop	{r7, pc}

0800dafc <HAL_JPEG_Pause>:
  *                           JPEG_PAUSE_RESUME_OUTPUT: Pause Output processing
  *                           JPEG_PAUSE_RESUME_INPUT_OUTPUT: Pause Input and Output processing
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Pause(JPEG_HandleTypeDef *hjpeg, uint32_t XferSelection)
{
 800dafc:	b480      	push	{r7}
 800dafe:	b085      	sub	sp, #20
 800db00:	af00      	add	r7, sp, #0
 800db02:	6078      	str	r0, [r7, #4]
 800db04:	6039      	str	r1, [r7, #0]
  uint32_t mask = 0;
 800db06:	2300      	movs	r3, #0
 800db08:	60fb      	str	r3, [r7, #12]

  assert_param(IS_JPEG_PAUSE_RESUME_STATE(XferSelection));

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db0e:	f003 030c 	and.w	r3, r3, #12
 800db12:	2b0c      	cmp	r3, #12
 800db14:	d116      	bne.n	800db44 <HAL_JPEG_Pause+0x48>
  {
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800db16:	683b      	ldr	r3, [r7, #0]
 800db18:	f003 0301 	and.w	r3, r3, #1
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d005      	beq.n	800db2c <HAL_JPEG_Pause+0x30>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db24:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	655a      	str	r2, [r3, #84]	; 0x54
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800db2c:	683b      	ldr	r3, [r7, #0]
 800db2e:	f003 0302 	and.w	r3, r3, #2
 800db32:	2b00      	cmp	r3, #0
 800db34:	d033      	beq.n	800db9e <HAL_JPEG_Pause+0xa2>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db3a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	655a      	str	r2, [r3, #84]	; 0x54
 800db42:	e02c      	b.n	800db9e <HAL_JPEG_Pause+0xa2>
    }

  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db48:	f003 030c 	and.w	r3, r3, #12
 800db4c:	2b08      	cmp	r3, #8
 800db4e:	d126      	bne.n	800db9e <HAL_JPEG_Pause+0xa2>
  {

    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800db50:	683b      	ldr	r3, [r7, #0]
 800db52:	f003 0301 	and.w	r3, r3, #1
 800db56:	2b00      	cmp	r3, #0
 800db58:	d009      	beq.n	800db6e <HAL_JPEG_Pause+0x72>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db5e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	655a      	str	r2, [r3, #84]	; 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	f043 0306 	orr.w	r3, r3, #6
 800db6c:	60fb      	str	r3, [r7, #12]
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800db6e:	683b      	ldr	r3, [r7, #0]
 800db70:	f003 0302 	and.w	r3, r3, #2
 800db74:	2b00      	cmp	r3, #0
 800db76:	d009      	beq.n	800db8c <HAL_JPEG_Pause+0x90>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db7c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	655a      	str	r2, [r3, #84]	; 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 800db8a:	60fb      	str	r3, [r7, #12]
    }
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	43da      	mvns	r2, r3
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	400a      	ands	r2, r1
 800db9c:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Nothing to do */
  }

  /* Return function status */
  return HAL_OK;
 800db9e:	2300      	movs	r3, #0
}
 800dba0:	4618      	mov	r0, r3
 800dba2:	3714      	adds	r7, #20
 800dba4:	46bd      	mov	sp, r7
 800dba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbaa:	4770      	bx	lr

0800dbac <HAL_JPEG_Resume>:
  *                           JPEG_PAUSE_RESUME_OUTPUT: Resume Output processing
  *                           JPEG_PAUSE_RESUME_INPUT_OUTPUT: Resume Input and Output processing
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Resume(JPEG_HandleTypeDef *hjpeg, uint32_t XferSelection)
{
 800dbac:	b590      	push	{r4, r7, lr}
 800dbae:	b087      	sub	sp, #28
 800dbb0:	af02      	add	r7, sp, #8
 800dbb2:	6078      	str	r0, [r7, #4]
 800dbb4:	6039      	str	r1, [r7, #0]
  uint32_t mask = 0;
 800dbb6:	2300      	movs	r3, #0
 800dbb8:	60fb      	str	r3, [r7, #12]
  uint32_t xfrSize;

  assert_param(IS_JPEG_PAUSE_RESUME_STATE(XferSelection));

  if ((hjpeg->Context & (JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT)) == 0UL)
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dbbe:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d101      	bne.n	800dbca <HAL_JPEG_Resume+0x1e>
  {
    /* if nothing paused to resume return error*/
    return HAL_ERROR;
 800dbc6:	2301      	movs	r3, #1
 800dbc8:	e0d7      	b.n	800dd7a <HAL_JPEG_Resume+0x1ce>
  }

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dbce:	f003 030c 	and.w	r3, r3, #12
 800dbd2:	2b0c      	cmp	r3, #12
 800dbd4:	f040 80a4 	bne.w	800dd20 <HAL_JPEG_Resume+0x174>
  {

    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800dbd8:	683b      	ldr	r3, [r7, #0]
 800dbda:	f003 0301 	and.w	r3, r3, #1
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d049      	beq.n	800dc76 <HAL_JPEG_Resume+0xca>
    {
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dbe6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	655a      	str	r2, [r3, #84]	; 0x54
        then MDMA In buffer size is 32 bytes

        else (MDMA In is triggred with JPEG In FIFO not full flag)
        then MDMA In buffer size is 4 bytes
        */
      xfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dbf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbf4:	60bb      	str	r3, [r7, #8]

      if (xfrSize == 0UL)
 800dbf6:	68bb      	ldr	r3, [r7, #8]
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d10b      	bne.n	800dc14 <HAL_JPEG_Resume+0x68>
      {
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dc00:	f043 0204 	orr.w	r2, r3, #4
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	651a      	str	r2, [r3, #80]	; 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	2206      	movs	r2, #6
 800dc0c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        return HAL_ERROR;
 800dc10:	2301      	movs	r3, #1
 800dc12:	e0b2      	b.n	800dd7a <HAL_JPEG_Resume+0x1ce>
      }
      /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % xfrSize);
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc1c:	68b9      	ldr	r1, [r7, #8]
 800dc1e:	fbb3 f1f1 	udiv	r1, r3, r1
 800dc22:	68b8      	ldr	r0, [r7, #8]
 800dc24:	fb00 f101 	mul.w	r1, r0, r1
 800dc28:	1a5b      	subs	r3, r3, r1
 800dc2a:	1ad2      	subs	r2, r2, r3
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	629a      	str	r2, [r3, #40]	; 0x28


      if (hjpeg->InDataLength > 0UL)
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d01e      	beq.n	800dc76 <HAL_JPEG_Resume+0xca>
      {
        /* Start DMA FIFO In transfer */
        if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	699b      	ldr	r3, [r3, #24]
 800dc40:	4619      	mov	r1, r3
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	3340      	adds	r3, #64	; 0x40
 800dc48:	461c      	mov	r4, r3
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc4e:	2201      	movs	r2, #1
 800dc50:	9200      	str	r2, [sp, #0]
 800dc52:	4622      	mov	r2, r4
 800dc54:	f002 f97e 	bl	800ff54 <HAL_MDMA_Start_IT>
 800dc58:	4603      	mov	r3, r0
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d00b      	beq.n	800dc76 <HAL_JPEG_Resume+0xca>
                              hjpeg->InDataLength, 1) != HAL_OK)
        {
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dc62:	f043 0204 	orr.w	r2, r3, #4
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	651a      	str	r2, [r3, #80]	; 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	2206      	movs	r2, #6
 800dc6e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          return HAL_ERROR;
 800dc72:	2301      	movs	r3, #1
 800dc74:	e081      	b.n	800dd7a <HAL_JPEG_Resume+0x1ce>
        }
      }
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800dc76:	683b      	ldr	r3, [r7, #0]
 800dc78:	f003 0302 	and.w	r3, r3, #2
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d07b      	beq.n	800dd78 <HAL_JPEG_Resume+0x1cc>
    {
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dc84:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dc90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d003      	beq.n	800dca0 <HAL_JPEG_Resume+0xf4>
      {
        JPEG_DMA_PollResidualData(hjpeg);
 800dc98:	6878      	ldr	r0, [r7, #4]
 800dc9a:	f001 faf3 	bl	800f284 <JPEG_DMA_PollResidualData>
 800dc9e:	e06b      	b.n	800dd78 <HAL_JPEG_Resume+0x1cc>
        /*if the MDMA Out is triggred with JPEG Out FIFO Threshold flag
          then MDMA out buffer size is 32 bytes
          else (MDMA Out is triggred with JPEG Out FIFO not empty flag)
          then MDMA buffer size is 4 bytes
          */
        xfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dca6:	60bb      	str	r3, [r7, #8]

        if (xfrSize == 0UL)
 800dca8:	68bb      	ldr	r3, [r7, #8]
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d10b      	bne.n	800dcc6 <HAL_JPEG_Resume+0x11a>
        {
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dcb2:	f043 0204 	orr.w	r2, r3, #4
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	651a      	str	r2, [r3, #80]	; 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	2206      	movs	r2, #6
 800dcbe:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          return HAL_ERROR;
 800dcc2:	2301      	movs	r3, #1
 800dcc4:	e059      	b.n	800dd7a <HAL_JPEG_Resume+0x1ce>
        }
        /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcce:	68b9      	ldr	r1, [r7, #8]
 800dcd0:	fbb3 f1f1 	udiv	r1, r3, r1
 800dcd4:	68b8      	ldr	r0, [r7, #8]
 800dcd6:	fb00 f101 	mul.w	r1, r0, r1
 800dcda:	1a5b      	subs	r3, r3, r1
 800dcdc:	1ad2      	subs	r2, r2, r3
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Start DMA FIFO Out transfer */
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	3344      	adds	r3, #68	; 0x44
 800dcec:	4619      	mov	r1, r3
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	69db      	ldr	r3, [r3, #28]
 800dcf2:	461c      	mov	r4, r3
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcf8:	2201      	movs	r2, #1
 800dcfa:	9200      	str	r2, [sp, #0]
 800dcfc:	4622      	mov	r2, r4
 800dcfe:	f002 f929 	bl	800ff54 <HAL_MDMA_Start_IT>
 800dd02:	4603      	mov	r3, r0
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d037      	beq.n	800dd78 <HAL_JPEG_Resume+0x1cc>
                              hjpeg->OutDataLength, 1) != HAL_OK)
        {
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dd0c:	f043 0204 	orr.w	r2, r3, #4
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	651a      	str	r2, [r3, #80]	; 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	2206      	movs	r2, #6
 800dd18:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          return HAL_ERROR;
 800dd1c:	2301      	movs	r3, #1
 800dd1e:	e02c      	b.n	800dd7a <HAL_JPEG_Resume+0x1ce>
      }

    }

  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dd24:	f003 030c 	and.w	r3, r3, #12
 800dd28:	2b08      	cmp	r3, #8
 800dd2a:	d125      	bne.n	800dd78 <HAL_JPEG_Resume+0x1cc>
  {
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800dd2c:	683b      	ldr	r3, [r7, #0]
 800dd2e:	f003 0301 	and.w	r3, r3, #1
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d009      	beq.n	800dd4a <HAL_JPEG_Resume+0x19e>
    {
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dd3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	655a      	str	r2, [r3, #84]	; 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	f043 0306 	orr.w	r3, r3, #6
 800dd48:	60fb      	str	r3, [r7, #12]
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800dd4a:	683b      	ldr	r3, [r7, #0]
 800dd4c:	f003 0302 	and.w	r3, r3, #2
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d009      	beq.n	800dd68 <HAL_JPEG_Resume+0x1bc>
    {
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dd58:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	655a      	str	r2, [r3, #84]	; 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 800dd66:	60fb      	str	r3, [r7, #12]
    }
    __HAL_JPEG_ENABLE_IT(hjpeg, mask);
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	68fa      	ldr	r2, [r7, #12]
 800dd74:	430a      	orrs	r2, r1
 800dd76:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Nothing to do */
  }

  /* Return function status */
  return HAL_OK;
 800dd78:	2300      	movs	r3, #0
}
 800dd7a:	4618      	mov	r0, r3
 800dd7c:	3714      	adds	r7, #20
 800dd7e:	46bd      	mov	sp, r7
 800dd80:	bd90      	pop	{r4, r7, pc}

0800dd82 <HAL_JPEG_ConfigInputBuffer>:
  * @param  pNewInputBuffer Pointer to the new input data buffer
  * @param  InDataLength Size in bytes of the new Input data buffer
  * @retval HAL status
  */
void HAL_JPEG_ConfigInputBuffer(JPEG_HandleTypeDef *hjpeg, uint8_t *pNewInputBuffer, uint32_t InDataLength)
{
 800dd82:	b480      	push	{r7}
 800dd84:	b085      	sub	sp, #20
 800dd86:	af00      	add	r7, sp, #0
 800dd88:	60f8      	str	r0, [r7, #12]
 800dd8a:	60b9      	str	r1, [r7, #8]
 800dd8c:	607a      	str	r2, [r7, #4]
  hjpeg->pJpegInBuffPtr =  pNewInputBuffer;
 800dd8e:	68fb      	ldr	r3, [r7, #12]
 800dd90:	68ba      	ldr	r2, [r7, #8]
 800dd92:	619a      	str	r2, [r3, #24]
  hjpeg->InDataLength = InDataLength;
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	687a      	ldr	r2, [r7, #4]
 800dd98:	629a      	str	r2, [r3, #40]	; 0x28
}
 800dd9a:	bf00      	nop
 800dd9c:	3714      	adds	r7, #20
 800dd9e:	46bd      	mov	sp, r7
 800dda0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dda4:	4770      	bx	lr

0800dda6 <HAL_JPEG_ConfigOutputBuffer>:
  * @param  pNewOutputBuffer Pointer to the new output data buffer
  * @param  OutDataLength Size in bytes of the new Output data buffer
  * @retval HAL status
  */
void HAL_JPEG_ConfigOutputBuffer(JPEG_HandleTypeDef *hjpeg, uint8_t *pNewOutputBuffer, uint32_t OutDataLength)
{
 800dda6:	b480      	push	{r7}
 800dda8:	b085      	sub	sp, #20
 800ddaa:	af00      	add	r7, sp, #0
 800ddac:	60f8      	str	r0, [r7, #12]
 800ddae:	60b9      	str	r1, [r7, #8]
 800ddb0:	607a      	str	r2, [r7, #4]
  hjpeg->pJpegOutBuffPtr = pNewOutputBuffer;
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	68ba      	ldr	r2, [r7, #8]
 800ddb6:	61da      	str	r2, [r3, #28]
  hjpeg->OutDataLength = OutDataLength;
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	687a      	ldr	r2, [r7, #4]
 800ddbc:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800ddbe:	bf00      	nop
 800ddc0:	3714      	adds	r7, #20
 800ddc2:	46bd      	mov	sp, r7
 800ddc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddc8:	4770      	bx	lr

0800ddca <HAL_JPEG_EncodeCpltCallback>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
__weak void HAL_JPEG_EncodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{
 800ddca:	b480      	push	{r7}
 800ddcc:	b083      	sub	sp, #12
 800ddce:	af00      	add	r7, sp, #0
 800ddd0:	6078      	str	r0, [r7, #4]
  UNUSED(hjpeg);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_EncodeCpltCallback could be implemented in the user file
   */
}
 800ddd2:	bf00      	nop
 800ddd4:	370c      	adds	r7, #12
 800ddd6:	46bd      	mov	sp, r7
 800ddd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dddc:	4770      	bx	lr

0800ddde <HAL_JPEG_IRQHandler>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
void HAL_JPEG_IRQHandler(JPEG_HandleTypeDef *hjpeg)
{
 800ddde:	b580      	push	{r7, lr}
 800dde0:	b082      	sub	sp, #8
 800dde2:	af00      	add	r7, sp, #0
 800dde4:	6078      	str	r0, [r7, #4]
  switch (hjpeg->State)
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800ddec:	b2db      	uxtb	r3, r3
 800ddee:	3b03      	subs	r3, #3
 800ddf0:	2b01      	cmp	r3, #1
 800ddf2:	d813      	bhi.n	800de1c <HAL_JPEG_IRQHandler+0x3e>
  {
    case HAL_JPEG_STATE_BUSY_ENCODING:
    case HAL_JPEG_STATE_BUSY_DECODING:
      /* continue JPEG data encoding/Decoding*/
      /* JPEG data processing : In/Out FIFO transfer*/
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ddf8:	f003 030c 	and.w	r3, r3, #12
 800ddfc:	2b08      	cmp	r3, #8
 800ddfe:	d103      	bne.n	800de08 <HAL_JPEG_IRQHandler+0x2a>
      {
        (void) JPEG_Process(hjpeg);
 800de00:	6878      	ldr	r0, [r7, #4]
 800de02:	f000 fe17 	bl	800ea34 <JPEG_Process>
      }
      else
      {
        /* Nothing to do */
      }
      break;
 800de06:	e00b      	b.n	800de20 <HAL_JPEG_IRQHandler+0x42>
      else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de0c:	f003 030c 	and.w	r3, r3, #12
 800de10:	2b0c      	cmp	r3, #12
 800de12:	d105      	bne.n	800de20 <HAL_JPEG_IRQHandler+0x42>
        JPEG_DMA_ContinueProcess(hjpeg);
 800de14:	6878      	ldr	r0, [r7, #4]
 800de16:	f001 f957 	bl	800f0c8 <JPEG_DMA_ContinueProcess>
      break;
 800de1a:	e001      	b.n	800de20 <HAL_JPEG_IRQHandler+0x42>

    default:
      break;
 800de1c:	bf00      	nop
 800de1e:	e000      	b.n	800de22 <HAL_JPEG_IRQHandler+0x44>
      break;
 800de20:	bf00      	nop
  }
}
 800de22:	bf00      	nop
 800de24:	3708      	adds	r7, #8
 800de26:	46bd      	mov	sp, r7
 800de28:	bd80      	pop	{r7, pc}

0800de2a <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 800de2a:	b480      	push	{r7}
 800de2c:	b08b      	sub	sp, #44	; 0x2c
 800de2e:	af00      	add	r7, sp, #0
 800de30:	60f8      	str	r0, [r7, #12]
 800de32:	60b9      	str	r1, [r7, #8]
 800de34:	607a      	str	r2, [r7, #4]
 800de36:	603b      	str	r3, [r7, #0]
  uint32_t l;
  uint32_t code;
  uint32_t si;

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
 800de38:	2300      	movs	r3, #0
 800de3a:	623b      	str	r3, [r7, #32]
  for (l = 0; l < 16UL; l++)
 800de3c:	2300      	movs	r3, #0
 800de3e:	61fb      	str	r3, [r7, #28]
 800de40:	e020      	b.n	800de84 <JPEG_Bits_To_SizeCodes+0x5a>
  {
    i = (uint32_t)Bits[l];
 800de42:	68fa      	ldr	r2, [r7, #12]
 800de44:	69fb      	ldr	r3, [r7, #28]
 800de46:	4413      	add	r3, r2
 800de48:	781b      	ldrb	r3, [r3, #0]
 800de4a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((p + i) > 256UL)
 800de4c:	6a3a      	ldr	r2, [r7, #32]
 800de4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de50:	4413      	add	r3, r2
 800de52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800de56:	d90f      	bls.n	800de78 <JPEG_Bits_To_SizeCodes+0x4e>
    {
      /* check for table overflow */
      return HAL_ERROR;
 800de58:	2301      	movs	r3, #1
 800de5a:	e055      	b.n	800df08 <JPEG_Bits_To_SizeCodes+0xde>
    }
    while (i != 0UL)
    {
      Huffsize[p] = (uint8_t) l + 1U;
 800de5c:	69fb      	ldr	r3, [r7, #28]
 800de5e:	b2da      	uxtb	r2, r3
 800de60:	68b9      	ldr	r1, [r7, #8]
 800de62:	6a3b      	ldr	r3, [r7, #32]
 800de64:	440b      	add	r3, r1
 800de66:	3201      	adds	r2, #1
 800de68:	b2d2      	uxtb	r2, r2
 800de6a:	701a      	strb	r2, [r3, #0]
      p++;
 800de6c:	6a3b      	ldr	r3, [r7, #32]
 800de6e:	3301      	adds	r3, #1
 800de70:	623b      	str	r3, [r7, #32]
      i--;
 800de72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de74:	3b01      	subs	r3, #1
 800de76:	627b      	str	r3, [r7, #36]	; 0x24
    while (i != 0UL)
 800de78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d1ee      	bne.n	800de5c <JPEG_Bits_To_SizeCodes+0x32>
  for (l = 0; l < 16UL; l++)
 800de7e:	69fb      	ldr	r3, [r7, #28]
 800de80:	3301      	adds	r3, #1
 800de82:	61fb      	str	r3, [r7, #28]
 800de84:	69fb      	ldr	r3, [r7, #28]
 800de86:	2b0f      	cmp	r3, #15
 800de88:	d9db      	bls.n	800de42 <JPEG_Bits_To_SizeCodes+0x18>
    }
  }
  Huffsize[p] = 0;
 800de8a:	68ba      	ldr	r2, [r7, #8]
 800de8c:	6a3b      	ldr	r3, [r7, #32]
 800de8e:	4413      	add	r3, r2
 800de90:	2200      	movs	r2, #0
 800de92:	701a      	strb	r2, [r3, #0]
  *LastK = p;
 800de94:	683b      	ldr	r3, [r7, #0]
 800de96:	6a3a      	ldr	r2, [r7, #32]
 800de98:	601a      	str	r2, [r3, #0]

  /* Figure C.2: Generation of table of Huffman codes */
  code = 0;
 800de9a:	2300      	movs	r3, #0
 800de9c:	61bb      	str	r3, [r7, #24]
  si = Huffsize[0];
 800de9e:	68bb      	ldr	r3, [r7, #8]
 800dea0:	781b      	ldrb	r3, [r3, #0]
 800dea2:	617b      	str	r3, [r7, #20]
  p = 0;
 800dea4:	2300      	movs	r3, #0
 800dea6:	623b      	str	r3, [r7, #32]
  while (Huffsize[p] != 0U)
 800dea8:	e027      	b.n	800defa <JPEG_Bits_To_SizeCodes+0xd0>
  {
    while (((uint32_t) Huffsize[p]) == si)
    {
      Huffcode[p] = code;
 800deaa:	6a3b      	ldr	r3, [r7, #32]
 800deac:	009b      	lsls	r3, r3, #2
 800deae:	687a      	ldr	r2, [r7, #4]
 800deb0:	4413      	add	r3, r2
 800deb2:	69ba      	ldr	r2, [r7, #24]
 800deb4:	601a      	str	r2, [r3, #0]
      p++;
 800deb6:	6a3b      	ldr	r3, [r7, #32]
 800deb8:	3301      	adds	r3, #1
 800deba:	623b      	str	r3, [r7, #32]
      code++;
 800debc:	69bb      	ldr	r3, [r7, #24]
 800debe:	3301      	adds	r3, #1
 800dec0:	61bb      	str	r3, [r7, #24]
    while (((uint32_t) Huffsize[p]) == si)
 800dec2:	68ba      	ldr	r2, [r7, #8]
 800dec4:	6a3b      	ldr	r3, [r7, #32]
 800dec6:	4413      	add	r3, r2
 800dec8:	781b      	ldrb	r3, [r3, #0]
 800deca:	461a      	mov	r2, r3
 800decc:	697b      	ldr	r3, [r7, #20]
 800dece:	4293      	cmp	r3, r2
 800ded0:	d0eb      	beq.n	800deaa <JPEG_Bits_To_SizeCodes+0x80>
    }
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
 800ded2:	697b      	ldr	r3, [r7, #20]
 800ded4:	2b1f      	cmp	r3, #31
 800ded6:	d901      	bls.n	800dedc <JPEG_Bits_To_SizeCodes+0xb2>
    {
      return HAL_ERROR;
 800ded8:	2301      	movs	r3, #1
 800deda:	e015      	b.n	800df08 <JPEG_Bits_To_SizeCodes+0xde>
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 800dedc:	2201      	movs	r2, #1
 800dede:	697b      	ldr	r3, [r7, #20]
 800dee0:	fa02 f303 	lsl.w	r3, r2, r3
 800dee4:	69ba      	ldr	r2, [r7, #24]
 800dee6:	429a      	cmp	r2, r3
 800dee8:	d301      	bcc.n	800deee <JPEG_Bits_To_SizeCodes+0xc4>
    {
      return HAL_ERROR;
 800deea:	2301      	movs	r3, #1
 800deec:	e00c      	b.n	800df08 <JPEG_Bits_To_SizeCodes+0xde>
    }
    code <<= 1;
 800deee:	69bb      	ldr	r3, [r7, #24]
 800def0:	005b      	lsls	r3, r3, #1
 800def2:	61bb      	str	r3, [r7, #24]
    si++;
 800def4:	697b      	ldr	r3, [r7, #20]
 800def6:	3301      	adds	r3, #1
 800def8:	617b      	str	r3, [r7, #20]
  while (Huffsize[p] != 0U)
 800defa:	68ba      	ldr	r2, [r7, #8]
 800defc:	6a3b      	ldr	r3, [r7, #32]
 800defe:	4413      	add	r3, r2
 800df00:	781b      	ldrb	r3, [r3, #0]
 800df02:	2b00      	cmp	r3, #0
 800df04:	d1dd      	bne.n	800dec2 <JPEG_Bits_To_SizeCodes+0x98>
  }
  /* Return function status */
  return HAL_OK;
 800df06:	2300      	movs	r3, #0
}
 800df08:	4618      	mov	r0, r3
 800df0a:	372c      	adds	r7, #44	; 0x2c
 800df0c:	46bd      	mov	sp, r7
 800df0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df12:	4770      	bx	lr

0800df14 <JPEG_ACHuff_BitsVals_To_SizeCodes>:
  * @param  AC_SizeCodesTable pointer to AC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_ACHuff_BitsVals_To_SizeCodes(JPEG_ACHuffTableTypeDef *AC_BitsValsTable,
                                                           JPEG_AC_HuffCodeTableTypeDef *AC_SizeCodesTable)
{
 800df14:	b580      	push	{r7, lr}
 800df16:	f5ad 6da5 	sub.w	sp, sp, #1320	; 0x528
 800df1a:	af00      	add	r7, sp, #0
 800df1c:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 800df20:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 800df24:	6018      	str	r0, [r3, #0]
 800df26:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 800df2a:	f5a3 63a5 	sub.w	r3, r3, #1320	; 0x528
 800df2e:	6019      	str	r1, [r3, #0]
  uint32_t huffcode[257];
  uint32_t k;
  uint32_t l, lsb, msb;
  uint32_t lastK;

  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 800df30:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 800df34:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 800df38:	6818      	ldr	r0, [r3, #0]
 800df3a:	f107 0308 	add.w	r3, r7, #8
 800df3e:	f107 020c 	add.w	r2, r7, #12
 800df42:	f507 6182 	add.w	r1, r7, #1040	; 0x410
 800df46:	f7ff ff70 	bl	800de2a <JPEG_Bits_To_SizeCodes>
 800df4a:	4603      	mov	r3, r0
 800df4c:	f887 351f 	strb.w	r3, [r7, #1311]	; 0x51f
  if (error != HAL_OK)
 800df50:	f897 351f 	ldrb.w	r3, [r7, #1311]	; 0x51f
 800df54:	2b00      	cmp	r3, #0
 800df56:	d002      	beq.n	800df5e <JPEG_ACHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 800df58:	f897 351f 	ldrb.w	r3, [r7, #1311]	; 0x51f
 800df5c:	e075      	b.n	800e04a <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
  }

  /* Figure C.3: Ordering procedure for encoding procedure code tables */
  k = 0;
 800df5e:	2300      	movs	r3, #0
 800df60:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524

  while (k < lastK)
 800df64:	e067      	b.n	800e036 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x122>
  {
    l = AC_BitsValsTable->HuffVal[k];
 800df66:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 800df6a:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 800df6e:	681a      	ldr	r2, [r3, #0]
 800df70:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 800df74:	4413      	add	r3, r2
 800df76:	3310      	adds	r3, #16
 800df78:	781b      	ldrb	r3, [r3, #0]
 800df7a:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
    if (l == 0UL)
 800df7e:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 800df82:	2b00      	cmp	r3, #0
 800df84:	d103      	bne.n	800df8e <JPEG_ACHuff_BitsVals_To_SizeCodes+0x7a>
    {
      l = 160; /*l = 0x00 EOB code*/
 800df86:	23a0      	movs	r3, #160	; 0xa0
 800df88:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
 800df8c:	e021      	b.n	800dfd2 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 800df8e:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 800df92:	2bf0      	cmp	r3, #240	; 0xf0
 800df94:	d103      	bne.n	800df9e <JPEG_ACHuff_BitsVals_To_SizeCodes+0x8a>
    {
      l = 161;
 800df96:	23a1      	movs	r3, #161	; 0xa1
 800df98:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
 800df9c:	e019      	b.n	800dfd2 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else
    {
      msb = (l & 0xF0UL) >> 4;
 800df9e:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 800dfa2:	091b      	lsrs	r3, r3, #4
 800dfa4:	f003 030f 	and.w	r3, r3, #15
 800dfa8:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
      lsb = (l & 0x0FUL);
 800dfac:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 800dfb0:	f003 030f 	and.w	r3, r3, #15
 800dfb4:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
      l = (msb * 10UL) + lsb - 1UL;
 800dfb8:	f8d7 2518 	ldr.w	r2, [r7, #1304]	; 0x518
 800dfbc:	4613      	mov	r3, r2
 800dfbe:	009b      	lsls	r3, r3, #2
 800dfc0:	4413      	add	r3, r2
 800dfc2:	005b      	lsls	r3, r3, #1
 800dfc4:	461a      	mov	r2, r3
 800dfc6:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 800dfca:	4413      	add	r3, r2
 800dfcc:	3b01      	subs	r3, #1
 800dfce:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
    }
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 800dfd2:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 800dfd6:	2ba1      	cmp	r3, #161	; 0xa1
 800dfd8:	d901      	bls.n	800dfde <JPEG_ACHuff_BitsVals_To_SizeCodes+0xca>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 800dfda:	2301      	movs	r3, #1
 800dfdc:	e035      	b.n	800e04a <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
    }
    else
    {
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 800dfde:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 800dfe2:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 800dfe6:	f8d7 2524 	ldr.w	r2, [r7, #1316]	; 0x524
 800dfea:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800dfee:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 800dff2:	f5a3 63a5 	sub.w	r3, r3, #1320	; 0x528
 800dff6:	6819      	ldr	r1, [r3, #0]
 800dff8:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 800dffc:	3328      	adds	r3, #40	; 0x28
 800dffe:	009b      	lsls	r3, r3, #2
 800e000:	440b      	add	r3, r1
 800e002:	605a      	str	r2, [r3, #4]
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 800e004:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 800e008:	f5a3 728c 	sub.w	r2, r3, #280	; 0x118
 800e00c:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 800e010:	4413      	add	r3, r2
 800e012:	781b      	ldrb	r3, [r3, #0]
 800e014:	3b01      	subs	r3, #1
 800e016:	b2d9      	uxtb	r1, r3
 800e018:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 800e01c:	f5a3 63a5 	sub.w	r3, r3, #1320	; 0x528
 800e020:	681a      	ldr	r2, [r3, #0]
 800e022:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 800e026:	4413      	add	r3, r2
 800e028:	460a      	mov	r2, r1
 800e02a:	701a      	strb	r2, [r3, #0]
      k++;
 800e02c:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 800e030:	3301      	adds	r3, #1
 800e032:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
  while (k < lastK)
 800e036:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 800e03a:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	f8d7 2524 	ldr.w	r2, [r7, #1316]	; 0x524
 800e044:	429a      	cmp	r2, r3
 800e046:	d38e      	bcc.n	800df66 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 800e048:	2300      	movs	r3, #0
}
 800e04a:	4618      	mov	r0, r3
 800e04c:	f507 67a5 	add.w	r7, r7, #1320	; 0x528
 800e050:	46bd      	mov	sp, r7
 800e052:	bd80      	pop	{r7, pc}

0800e054 <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 800e054:	b580      	push	{r7, lr}
 800e056:	f5ad 6da4 	sub.w	sp, sp, #1312	; 0x520
 800e05a:	af00      	add	r7, sp, #0
 800e05c:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 800e060:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 800e064:	6018      	str	r0, [r3, #0]
 800e066:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 800e06a:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 800e06e:	6019      	str	r1, [r3, #0]
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 800e070:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 800e074:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 800e078:	6818      	ldr	r0, [r3, #0]
 800e07a:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 800e07e:	f107 0208 	add.w	r2, r7, #8
 800e082:	f207 410c 	addw	r1, r7, #1036	; 0x40c
 800e086:	f7ff fed0 	bl	800de2a <JPEG_Bits_To_SizeCodes>
 800e08a:	4603      	mov	r3, r0
 800e08c:	f887 351b 	strb.w	r3, [r7, #1307]	; 0x51b
  if (error != HAL_OK)
 800e090:	f897 351b 	ldrb.w	r3, [r7, #1307]	; 0x51b
 800e094:	2b00      	cmp	r3, #0
 800e096:	d002      	beq.n	800e09e <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 800e098:	f897 351b 	ldrb.w	r3, [r7, #1307]	; 0x51b
 800e09c:	e048      	b.n	800e130 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;
 800e09e:	2300      	movs	r3, #0
 800e0a0:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c

  while (k < lastK)
 800e0a4:	e03d      	b.n	800e122 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xce>
  {
    l = DC_BitsValsTable->HuffVal[k];
 800e0a6:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 800e0aa:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 800e0ae:	681a      	ldr	r2, [r3, #0]
 800e0b0:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 800e0b4:	4413      	add	r3, r2
 800e0b6:	3310      	adds	r3, #16
 800e0b8:	781b      	ldrb	r3, [r3, #0]
 800e0ba:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 800e0be:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 800e0c2:	2b0b      	cmp	r3, #11
 800e0c4:	d901      	bls.n	800e0ca <JPEG_DCHuff_BitsVals_To_SizeCodes+0x76>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 800e0c6:	2301      	movs	r3, #1
 800e0c8:	e032      	b.n	800e130 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
    }
    else
    {
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 800e0ca:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 800e0ce:	f5a3 63a3 	sub.w	r3, r3, #1304	; 0x518
 800e0d2:	f8d7 251c 	ldr.w	r2, [r7, #1308]	; 0x51c
 800e0d6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800e0da:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 800e0de:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 800e0e2:	6819      	ldr	r1, [r3, #0]
 800e0e4:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 800e0e8:	3302      	adds	r3, #2
 800e0ea:	009b      	lsls	r3, r3, #2
 800e0ec:	440b      	add	r3, r1
 800e0ee:	605a      	str	r2, [r3, #4]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 800e0f0:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 800e0f4:	f5a3 728a 	sub.w	r2, r3, #276	; 0x114
 800e0f8:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 800e0fc:	4413      	add	r3, r2
 800e0fe:	781b      	ldrb	r3, [r3, #0]
 800e100:	3b01      	subs	r3, #1
 800e102:	b2d9      	uxtb	r1, r3
 800e104:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 800e108:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 800e10c:	681a      	ldr	r2, [r3, #0]
 800e10e:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 800e112:	4413      	add	r3, r2
 800e114:	460a      	mov	r2, r1
 800e116:	701a      	strb	r2, [r3, #0]
      k++;
 800e118:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 800e11c:	3301      	adds	r3, #1
 800e11e:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c
  while (k < lastK)
 800e122:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 800e126:	f8d7 251c 	ldr.w	r2, [r7, #1308]	; 0x51c
 800e12a:	429a      	cmp	r2, r3
 800e12c:	d3bb      	bcc.n	800e0a6 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 800e12e:	2300      	movs	r3, #0
}
 800e130:	4618      	mov	r0, r3
 800e132:	f507 67a4 	add.w	r7, r7, #1312	; 0x520
 800e136:	46bd      	mov	sp, r7
 800e138:	bd80      	pop	{r7, pc}

0800e13a <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 800e13a:	b580      	push	{r7, lr}
 800e13c:	b09a      	sub	sp, #104	; 0x68
 800e13e:	af00      	add	r7, sp, #0
 800e140:	60f8      	str	r0, [r7, #12]
 800e142:	60b9      	str	r1, [r7, #8]
 800e144:	607a      	str	r2, [r7, #4]
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	f503 63f8 	add.w	r3, r3, #1984	; 0x7c0
 800e14e:	687a      	ldr	r2, [r7, #4]
 800e150:	429a      	cmp	r2, r3
 800e152:	d106      	bne.n	800e162 <JPEG_Set_HuffDC_Mem+0x28>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	f503 63f8 	add.w	r3, r3, #1984	; 0x7c0
 800e15c:	3318      	adds	r3, #24
 800e15e:	663b      	str	r3, [r7, #96]	; 0x60
 800e160:	e00f      	b.n	800e182 <JPEG_Set_HuffDC_Mem+0x48>
  }
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 800e162:	68fb      	ldr	r3, [r7, #12]
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	f503 63fc 	add.w	r3, r3, #2016	; 0x7e0
 800e16a:	687a      	ldr	r2, [r7, #4]
 800e16c:	429a      	cmp	r2, r3
 800e16e:	d106      	bne.n	800e17e <JPEG_Set_HuffDC_Mem+0x44>
  {
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	f503 63fc 	add.w	r3, r3, #2016	; 0x7e0
 800e178:	3318      	adds	r3, #24
 800e17a:	663b      	str	r3, [r7, #96]	; 0x60
 800e17c:	e001      	b.n	800e182 <JPEG_Set_HuffDC_Mem+0x48>
  }
  else
  {
    return HAL_ERROR;
 800e17e:	2301      	movs	r3, #1
 800e180:	e059      	b.n	800e236 <JPEG_Set_HuffDC_Mem+0xfc>
  }

  if (HuffTableDC != NULL)
 800e182:	68bb      	ldr	r3, [r7, #8]
 800e184:	2b00      	cmp	r3, #0
 800e186:	d055      	beq.n	800e234 <JPEG_Set_HuffDC_Mem+0xfa>
  {
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 800e188:	f107 0314 	add.w	r3, r7, #20
 800e18c:	4619      	mov	r1, r3
 800e18e:	68b8      	ldr	r0, [r7, #8]
 800e190:	f7ff ff60 	bl	800e054 <JPEG_DCHuff_BitsVals_To_SizeCodes>
 800e194:	4603      	mov	r3, r0
 800e196:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if (error != HAL_OK)
 800e19a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d002      	beq.n	800e1a8 <JPEG_Set_HuffDC_Mem+0x6e>
    {
      return  error;
 800e1a2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e1a6:	e046      	b.n	800e236 <JPEG_Set_HuffDC_Mem+0xfc>
    }
    addressDef = address;
 800e1a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e1aa:	65bb      	str	r3, [r7, #88]	; 0x58
    *addressDef = 0x0FFF0FFF;
 800e1ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e1ae:	f06f 22f0 	mvn.w	r2, #4026593280	; 0xf000f000
 800e1b2:	601a      	str	r2, [r3, #0]
    addressDef++;
 800e1b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e1b6:	3304      	adds	r3, #4
 800e1b8:	65bb      	str	r3, [r7, #88]	; 0x58
    *addressDef = 0x0FFF0FFF;
 800e1ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e1bc:	f06f 22f0 	mvn.w	r2, #4026593280	; 0xf000f000
 800e1c0:	601a      	str	r2, [r3, #0]

    i = JPEG_DC_HUFF_TABLE_SIZE;
 800e1c2:	230c      	movs	r3, #12
 800e1c4:	667b      	str	r3, [r7, #100]	; 0x64
    while (i > 1UL)
 800e1c6:	e032      	b.n	800e22e <JPEG_Set_HuffDC_Mem+0xf4>
    {
      i--;
 800e1c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e1ca:	3b01      	subs	r3, #1
 800e1cc:	667b      	str	r3, [r7, #100]	; 0x64
      address --;
 800e1ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e1d0:	3b04      	subs	r3, #4
 800e1d2:	663b      	str	r3, [r7, #96]	; 0x60
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800e1d4:	f107 0214 	add.w	r2, r7, #20
 800e1d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e1da:	4413      	add	r3, r2
 800e1dc:	781b      	ldrb	r3, [r3, #0]
 800e1de:	021b      	lsls	r3, r3, #8
 800e1e0:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800e1e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e1e6:	3302      	adds	r3, #2
 800e1e8:	009b      	lsls	r3, r3, #2
 800e1ea:	3368      	adds	r3, #104	; 0x68
 800e1ec:	443b      	add	r3, r7
 800e1ee:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800e1f2:	b2db      	uxtb	r3, r3
 800e1f4:	4313      	orrs	r3, r2
 800e1f6:	657b      	str	r3, [r7, #84]	; 0x54
                                                                                   0xFFUL);
      i--;
 800e1f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e1fa:	3b01      	subs	r3, #1
 800e1fc:	667b      	str	r3, [r7, #100]	; 0x64
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800e1fe:	f107 0214 	add.w	r2, r7, #20
 800e202:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e204:	4413      	add	r3, r2
 800e206:	781b      	ldrb	r3, [r3, #0]
 800e208:	021b      	lsls	r3, r3, #8
 800e20a:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800e20e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e210:	3302      	adds	r3, #2
 800e212:	009b      	lsls	r3, r3, #2
 800e214:	3368      	adds	r3, #104	; 0x68
 800e216:	443b      	add	r3, r7
 800e218:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800e21c:	b2db      	uxtb	r3, r3
 800e21e:	4313      	orrs	r3, r2
 800e220:	653b      	str	r3, [r7, #80]	; 0x50
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 800e222:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e224:	041a      	lsls	r2, r3, #16
 800e226:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e228:	431a      	orrs	r2, r3
 800e22a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e22c:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 800e22e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e230:	2b01      	cmp	r3, #1
 800e232:	d8c9      	bhi.n	800e1c8 <JPEG_Set_HuffDC_Mem+0x8e>
    }
  }

  /* Return function status */
  return HAL_OK;
 800e234:	2300      	movs	r3, #0
}
 800e236:	4618      	mov	r0, r3
 800e238:	3768      	adds	r7, #104	; 0x68
 800e23a:	46bd      	mov	sp, r7
 800e23c:	bd80      	pop	{r7, pc}
	...

0800e240 <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 800e240:	b580      	push	{r7, lr}
 800e242:	f5ad 7d56 	sub.w	sp, sp, #856	; 0x358
 800e246:	af00      	add	r7, sp, #0
 800e248:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800e24c:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 800e250:	6018      	str	r0, [r3, #0]
 800e252:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800e256:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 800e25a:	6019      	str	r1, [r3, #0]
 800e25c:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800e260:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 800e264:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 800e266:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800e26a:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e276:	f507 7256 	add.w	r2, r7, #856	; 0x358
 800e27a:	f5a2 7255 	sub.w	r2, r2, #852	; 0x354
 800e27e:	6812      	ldr	r2, [r2, #0]
 800e280:	429a      	cmp	r2, r3
 800e282:	d10c      	bne.n	800e29e <JPEG_Set_HuffAC_Mem+0x5e>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 800e284:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800e288:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e294:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800e298:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 800e29c:	e01d      	b.n	800e2da <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 800e29e:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800e2a2:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
 800e2ae:	f507 7256 	add.w	r2, r7, #856	; 0x358
 800e2b2:	f5a2 7255 	sub.w	r2, r2, #852	; 0x354
 800e2b6:	6812      	ldr	r2, [r2, #0]
 800e2b8:	429a      	cmp	r2, r3
 800e2ba:	d10c      	bne.n	800e2d6 <JPEG_Set_HuffAC_Mem+0x96>
  {
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 800e2bc:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800e2c0:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
 800e2cc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800e2d0:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 800e2d4:	e001      	b.n	800e2da <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else
  {
    return HAL_ERROR;
 800e2d6:	2301      	movs	r3, #1
 800e2d8:	e0a8      	b.n	800e42c <JPEG_Set_HuffAC_Mem+0x1ec>
  }

  if (HuffTableAC != NULL)
 800e2da:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800e2de:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	f000 80a0 	beq.w	800e42a <JPEG_Set_HuffAC_Mem+0x1ea>
  {
    error = JPEG_ACHuff_BitsVals_To_SizeCodes(HuffTableAC, &acSizeCodesTable);
 800e2ea:	f107 0214 	add.w	r2, r7, #20
 800e2ee:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800e2f2:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 800e2f6:	4611      	mov	r1, r2
 800e2f8:	6818      	ldr	r0, [r3, #0]
 800e2fa:	f7ff fe0b 	bl	800df14 <JPEG_ACHuff_BitsVals_To_SizeCodes>
 800e2fe:	4603      	mov	r3, r0
 800e300:	f887 334b 	strb.w	r3, [r7, #843]	; 0x34b
    if (error != HAL_OK)
 800e304:	f897 334b 	ldrb.w	r3, [r7, #843]	; 0x34b
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d002      	beq.n	800e312 <JPEG_Set_HuffAC_Mem+0xd2>
    {
      return  error;
 800e30c:	f897 334b 	ldrb.w	r3, [r7, #843]	; 0x34b
 800e310:	e08c      	b.n	800e42c <JPEG_Set_HuffAC_Mem+0x1ec>
    }
    /* Default values settings: 162:167 FFFh , 168:175 FD0h_FD7h */
    /* Locations 162:175 of each AC table contain information used internally by the core */

    addressDef = address;
 800e312:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 800e316:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    for (i = 0; i < 3UL; i++)
 800e31a:	2300      	movs	r3, #0
 800e31c:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 800e320:	e00e      	b.n	800e340 <JPEG_Set_HuffAC_Mem+0x100>
    {
      *addressDef = 0x0FFF0FFF;
 800e322:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 800e326:	f06f 22f0 	mvn.w	r2, #4026593280	; 0xf000f000
 800e32a:	601a      	str	r2, [r3, #0]
      addressDef++;
 800e32c:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 800e330:	3304      	adds	r3, #4
 800e332:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    for (i = 0; i < 3UL; i++)
 800e336:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 800e33a:	3301      	adds	r3, #1
 800e33c:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 800e340:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 800e344:	2b02      	cmp	r3, #2
 800e346:	d9ec      	bls.n	800e322 <JPEG_Set_HuffAC_Mem+0xe2>
    }
    *addressDef = 0x0FD10FD0;
 800e348:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 800e34c:	4a3a      	ldr	r2, [pc, #232]	; (800e438 <JPEG_Set_HuffAC_Mem+0x1f8>)
 800e34e:	601a      	str	r2, [r3, #0]
    addressDef++;
 800e350:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 800e354:	3304      	adds	r3, #4
 800e356:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    *addressDef = 0x0FD30FD2;
 800e35a:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 800e35e:	4a37      	ldr	r2, [pc, #220]	; (800e43c <JPEG_Set_HuffAC_Mem+0x1fc>)
 800e360:	601a      	str	r2, [r3, #0]
    addressDef++;
 800e362:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 800e366:	3304      	adds	r3, #4
 800e368:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    *addressDef = 0x0FD50FD4;
 800e36c:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 800e370:	4a33      	ldr	r2, [pc, #204]	; (800e440 <JPEG_Set_HuffAC_Mem+0x200>)
 800e372:	601a      	str	r2, [r3, #0]
    addressDef++;
 800e374:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 800e378:	3304      	adds	r3, #4
 800e37a:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    *addressDef = 0x0FD70FD6;
 800e37e:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 800e382:	4a30      	ldr	r2, [pc, #192]	; (800e444 <JPEG_Set_HuffAC_Mem+0x204>)
 800e384:	601a      	str	r2, [r3, #0]
    /* end of Locations 162:175  */


    i = JPEG_AC_HUFF_TABLE_SIZE;
 800e386:	23a2      	movs	r3, #162	; 0xa2
 800e388:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
    while (i > 1UL)
 800e38c:	e049      	b.n	800e422 <JPEG_Set_HuffAC_Mem+0x1e2>
    {
      i--;
 800e38e:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 800e392:	3b01      	subs	r3, #1
 800e394:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
      address--;
 800e398:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 800e39c:	3b04      	subs	r3, #4
 800e39e:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800e3a2:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800e3a6:	f5a3 7251 	sub.w	r2, r3, #836	; 0x344
 800e3aa:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 800e3ae:	4413      	add	r3, r2
 800e3b0:	781b      	ldrb	r3, [r3, #0]
 800e3b2:	021b      	lsls	r3, r3, #8
 800e3b4:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800e3b8:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800e3bc:	f5a3 7151 	sub.w	r1, r3, #836	; 0x344
 800e3c0:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 800e3c4:	3328      	adds	r3, #40	; 0x28
 800e3c6:	009b      	lsls	r3, r3, #2
 800e3c8:	440b      	add	r3, r1
 800e3ca:	685b      	ldr	r3, [r3, #4]
 800e3cc:	b2db      	uxtb	r3, r3
 800e3ce:	4313      	orrs	r3, r2
 800e3d0:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
                                                                                   0xFFUL);
      i--;
 800e3d4:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 800e3d8:	3b01      	subs	r3, #1
 800e3da:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800e3de:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800e3e2:	f5a3 7251 	sub.w	r2, r3, #836	; 0x344
 800e3e6:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 800e3ea:	4413      	add	r3, r2
 800e3ec:	781b      	ldrb	r3, [r3, #0]
 800e3ee:	021b      	lsls	r3, r3, #8
 800e3f0:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800e3f4:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800e3f8:	f5a3 7151 	sub.w	r1, r3, #836	; 0x344
 800e3fc:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 800e400:	3328      	adds	r3, #40	; 0x28
 800e402:	009b      	lsls	r3, r3, #2
 800e404:	440b      	add	r3, r1
 800e406:	685b      	ldr	r3, [r3, #4]
 800e408:	b2db      	uxtb	r3, r3
 800e40a:	4313      	orrs	r3, r2
 800e40c:	f8c7 3340 	str.w	r3, [r7, #832]	; 0x340
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 800e410:	f8d7 3344 	ldr.w	r3, [r7, #836]	; 0x344
 800e414:	041a      	lsls	r2, r3, #16
 800e416:	f8d7 3340 	ldr.w	r3, [r7, #832]	; 0x340
 800e41a:	431a      	orrs	r2, r3
 800e41c:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 800e420:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 800e422:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 800e426:	2b01      	cmp	r3, #1
 800e428:	d8b1      	bhi.n	800e38e <JPEG_Set_HuffAC_Mem+0x14e>
    }
  }

  /* Return function status */
  return HAL_OK;
 800e42a:	2300      	movs	r3, #0
}
 800e42c:	4618      	mov	r0, r3
 800e42e:	f507 7756 	add.w	r7, r7, #856	; 0x358
 800e432:	46bd      	mov	sp, r7
 800e434:	bd80      	pop	{r7, pc}
 800e436:	bf00      	nop
 800e438:	0fd10fd0 	.word	0x0fd10fd0
 800e43c:	0fd30fd2 	.word	0x0fd30fd2
 800e440:	0fd50fd4 	.word	0x0fd50fd4
 800e444:	0fd70fd6 	.word	0x0fd70fd6

0800e448 <JPEG_Set_HuffEnc_Mem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static HAL_StatusTypeDef JPEG_Set_HuffEnc_Mem(JPEG_HandleTypeDef *hjpeg)
{
 800e448:	b580      	push	{r7, lr}
 800e44a:	b084      	sub	sp, #16
 800e44c:	af00      	add	r7, sp, #0
 800e44e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef error;

  JPEG_Set_Huff_DHTMem(hjpeg);
 800e450:	6878      	ldr	r0, [r7, #4]
 800e452:	f000 f84d 	bl	800e4f0 <JPEG_Set_Huff_DHTMem>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC0));
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 800e45e:	461a      	mov	r2, r3
 800e460:	491f      	ldr	r1, [pc, #124]	; (800e4e0 <JPEG_Set_HuffEnc_Mem+0x98>)
 800e462:	6878      	ldr	r0, [r7, #4]
 800e464:	f7ff feec 	bl	800e240 <JPEG_Set_HuffAC_Mem>
 800e468:	4603      	mov	r3, r0
 800e46a:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 800e46c:	7bfb      	ldrb	r3, [r7, #15]
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d001      	beq.n	800e476 <JPEG_Set_HuffEnc_Mem+0x2e>
  {
    return  error;
 800e472:	7bfb      	ldrb	r3, [r7, #15]
 800e474:	e030      	b.n	800e4d8 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC1));
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 800e47e:	461a      	mov	r2, r3
 800e480:	4918      	ldr	r1, [pc, #96]	; (800e4e4 <JPEG_Set_HuffEnc_Mem+0x9c>)
 800e482:	6878      	ldr	r0, [r7, #4]
 800e484:	f7ff fedc 	bl	800e240 <JPEG_Set_HuffAC_Mem>
 800e488:	4603      	mov	r3, r0
 800e48a:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 800e48c:	7bfb      	ldrb	r3, [r7, #15]
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d001      	beq.n	800e496 <JPEG_Set_HuffEnc_Mem+0x4e>
  {
    return  error;
 800e492:	7bfb      	ldrb	r3, [r7, #15]
 800e494:	e020      	b.n	800e4d8 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC0);
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	f503 63f8 	add.w	r3, r3, #1984	; 0x7c0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 800e49e:	461a      	mov	r2, r3
 800e4a0:	4911      	ldr	r1, [pc, #68]	; (800e4e8 <JPEG_Set_HuffEnc_Mem+0xa0>)
 800e4a2:	6878      	ldr	r0, [r7, #4]
 800e4a4:	f7ff fe49 	bl	800e13a <JPEG_Set_HuffDC_Mem>
 800e4a8:	4603      	mov	r3, r0
 800e4aa:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 800e4ac:	7bfb      	ldrb	r3, [r7, #15]
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d001      	beq.n	800e4b6 <JPEG_Set_HuffEnc_Mem+0x6e>
  {
    return  error;
 800e4b2:	7bfb      	ldrb	r3, [r7, #15]
 800e4b4:	e010      	b.n	800e4d8 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC1);
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	f503 63fc 	add.w	r3, r3, #2016	; 0x7e0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 800e4be:	461a      	mov	r2, r3
 800e4c0:	490a      	ldr	r1, [pc, #40]	; (800e4ec <JPEG_Set_HuffEnc_Mem+0xa4>)
 800e4c2:	6878      	ldr	r0, [r7, #4]
 800e4c4:	f7ff fe39 	bl	800e13a <JPEG_Set_HuffDC_Mem>
 800e4c8:	4603      	mov	r3, r0
 800e4ca:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 800e4cc:	7bfb      	ldrb	r3, [r7, #15]
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d001      	beq.n	800e4d6 <JPEG_Set_HuffEnc_Mem+0x8e>
  {
    return  error;
 800e4d2:	7bfb      	ldrb	r3, [r7, #15]
 800e4d4:	e000      	b.n	800e4d8 <JPEG_Set_HuffEnc_Mem+0x90>
  }
  /* Return function status */
  return HAL_OK;
 800e4d6:	2300      	movs	r3, #0
}
 800e4d8:	4618      	mov	r0, r3
 800e4da:	3710      	adds	r7, #16
 800e4dc:	46bd      	mov	sp, r7
 800e4de:	bd80      	pop	{r7, pc}
 800e4e0:	0802a410 	.word	0x0802a410
 800e4e4:	0802a4c4 	.word	0x0802a4c4
 800e4e8:	0802a3d8 	.word	0x0802a3d8
 800e4ec:	0802a3f4 	.word	0x0802a3f4

0800e4f0 <JPEG_Set_Huff_DHTMem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Set_Huff_DHTMem(JPEG_HandleTypeDef *hjpeg)
{
 800e4f0:	b480      	push	{r7}
 800e4f2:	b08b      	sub	sp, #44	; 0x2c
 800e4f4:	af00      	add	r7, sp, #0
 800e4f6:	6078      	str	r0, [r7, #4]
  JPEG_ACHuffTableTypeDef *HuffTableAC0 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable;
 800e4f8:	4b80      	ldr	r3, [pc, #512]	; (800e6fc <JPEG_Set_Huff_DHTMem+0x20c>)
 800e4fa:	61fb      	str	r3, [r7, #28]
  JPEG_ACHuffTableTypeDef *HuffTableAC1 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable;
 800e4fc:	4b80      	ldr	r3, [pc, #512]	; (800e700 <JPEG_Set_Huff_DHTMem+0x210>)
 800e4fe:	61bb      	str	r3, [r7, #24]
  JPEG_DCHuffTableTypeDef *HuffTableDC0 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable;
 800e500:	4b80      	ldr	r3, [pc, #512]	; (800e704 <JPEG_Set_Huff_DHTMem+0x214>)
 800e502:	617b      	str	r3, [r7, #20]
  JPEG_DCHuffTableTypeDef *HuffTableDC1 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable;
 800e504:	4b80      	ldr	r3, [pc, #512]	; (800e708 <JPEG_Set_Huff_DHTMem+0x218>)
 800e506:	613b      	str	r3, [r7, #16]
  uint32_t value, index;
  __IO uint32_t *address;

  /* DC0 Huffman Table : BITS*/
  /* DC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address to DHTMEM + 3*/
  address = (hjpeg->Instance->DHTMEM + 3);
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800e510:	330c      	adds	r3, #12
 800e512:	623b      	str	r3, [r7, #32]
  index = 16;
 800e514:	2310      	movs	r3, #16
 800e516:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800e518:	e01d      	b.n	800e556 <JPEG_Set_Huff_DHTMem+0x66>
  {

    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800e51a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e51c:	3b01      	subs	r3, #1
 800e51e:	697a      	ldr	r2, [r7, #20]
 800e520:	5cd3      	ldrb	r3, [r2, r3]
 800e522:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800e524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e526:	3b02      	subs	r3, #2
 800e528:	6979      	ldr	r1, [r7, #20]
 800e52a:	5ccb      	ldrb	r3, [r1, r3]
 800e52c:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800e52e:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800e530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e532:	3b03      	subs	r3, #3
 800e534:	6979      	ldr	r1, [r7, #20]
 800e536:	5ccb      	ldrb	r3, [r1, r3]
 800e538:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800e53a:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->Bits[index - 4UL] & 0xFFUL);
 800e53c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e53e:	3a04      	subs	r2, #4
 800e540:	6979      	ldr	r1, [r7, #20]
 800e542:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800e544:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800e546:	6a3b      	ldr	r3, [r7, #32]
 800e548:	601a      	str	r2, [r3, #0]
    address--;
 800e54a:	6a3b      	ldr	r3, [r7, #32]
 800e54c:	3b04      	subs	r3, #4
 800e54e:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800e550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e552:	3b04      	subs	r3, #4
 800e554:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800e556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e558:	2b03      	cmp	r3, #3
 800e55a:	d8de      	bhi.n	800e51a <JPEG_Set_Huff_DHTMem+0x2a>

  }
  /* DC0 Huffman Table : Val*/
  /* DC0 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +4 to DHTMEM + 6 */
  address = (hjpeg->Instance->DHTMEM + 6);
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800e564:	3318      	adds	r3, #24
 800e566:	623b      	str	r3, [r7, #32]
  index = 12;
 800e568:	230c      	movs	r3, #12
 800e56a:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800e56c:	e021      	b.n	800e5b2 <JPEG_Set_Huff_DHTMem+0xc2>
  {
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800e56e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e570:	3b01      	subs	r3, #1
 800e572:	697a      	ldr	r2, [r7, #20]
 800e574:	4413      	add	r3, r2
 800e576:	7c1b      	ldrb	r3, [r3, #16]
 800e578:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800e57a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e57c:	3b02      	subs	r3, #2
 800e57e:	6979      	ldr	r1, [r7, #20]
 800e580:	440b      	add	r3, r1
 800e582:	7c1b      	ldrb	r3, [r3, #16]
 800e584:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800e586:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800e588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e58a:	3b03      	subs	r3, #3
 800e58c:	6979      	ldr	r1, [r7, #20]
 800e58e:	440b      	add	r3, r1
 800e590:	7c1b      	ldrb	r3, [r3, #16]
 800e592:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800e594:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->HuffVal[index - 4UL] & 0xFFUL);
 800e596:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e598:	3a04      	subs	r2, #4
 800e59a:	6979      	ldr	r1, [r7, #20]
 800e59c:	440a      	add	r2, r1
 800e59e:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800e5a0:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800e5a2:	6a3b      	ldr	r3, [r7, #32]
 800e5a4:	601a      	str	r2, [r3, #0]
    address--;
 800e5a6:	6a3b      	ldr	r3, [r7, #32]
 800e5a8:	3b04      	subs	r3, #4
 800e5aa:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800e5ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5ae:	3b04      	subs	r3, #4
 800e5b0:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800e5b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5b4:	2b03      	cmp	r3, #3
 800e5b6:	d8da      	bhi.n	800e56e <JPEG_Set_Huff_DHTMem+0x7e>
  }

  /* AC0 Huffman Table : BITS*/
  /* AC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 7 to DHTMEM + 10*/
  address = (hjpeg->Instance->DHTMEM + 10UL);
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800e5c0:	3328      	adds	r3, #40	; 0x28
 800e5c2:	623b      	str	r3, [r7, #32]
  index = 16;
 800e5c4:	2310      	movs	r3, #16
 800e5c6:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800e5c8:	e01d      	b.n	800e606 <JPEG_Set_Huff_DHTMem+0x116>
  {

    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800e5ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5cc:	3b01      	subs	r3, #1
 800e5ce:	69fa      	ldr	r2, [r7, #28]
 800e5d0:	5cd3      	ldrb	r3, [r2, r3]
 800e5d2:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800e5d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5d6:	3b02      	subs	r3, #2
 800e5d8:	69f9      	ldr	r1, [r7, #28]
 800e5da:	5ccb      	ldrb	r3, [r1, r3]
 800e5dc:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800e5de:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800e5e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5e2:	3b03      	subs	r3, #3
 800e5e4:	69f9      	ldr	r1, [r7, #28]
 800e5e6:	5ccb      	ldrb	r3, [r1, r3]
 800e5e8:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800e5ea:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->Bits[index - 4UL] & 0xFFUL);
 800e5ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e5ee:	3a04      	subs	r2, #4
 800e5f0:	69f9      	ldr	r1, [r7, #28]
 800e5f2:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800e5f4:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800e5f6:	6a3b      	ldr	r3, [r7, #32]
 800e5f8:	601a      	str	r2, [r3, #0]
    address--;
 800e5fa:	6a3b      	ldr	r3, [r7, #32]
 800e5fc:	3b04      	subs	r3, #4
 800e5fe:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800e600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e602:	3b04      	subs	r3, #4
 800e604:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800e606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e608:	2b03      	cmp	r3, #3
 800e60a:	d8de      	bhi.n	800e5ca <JPEG_Set_Huff_DHTMem+0xda>

  }
  /* AC0 Huffman Table : Val*/
  /* AC0 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 11 to DHTMEM + 51 */
  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 51) belong to AC0 VALS table */
  address = (hjpeg->Instance->DHTMEM + 51);
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800e614:	33cc      	adds	r3, #204	; 0xcc
 800e616:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 800e618:	6a3b      	ldr	r3, [r7, #32]
 800e61a:	681a      	ldr	r2, [r3, #0]
 800e61c:	4b3b      	ldr	r3, [pc, #236]	; (800e70c <JPEG_Set_Huff_DHTMem+0x21c>)
 800e61e:	4013      	ands	r3, r2
 800e620:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 800e622:	69fb      	ldr	r3, [r7, #28]
 800e624:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800e628:	021a      	lsls	r2, r3, #8
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	4313      	orrs	r3, r2
 800e62e:	69fa      	ldr	r2, [r7, #28]
 800e630:	f892 20b0 	ldrb.w	r2, [r2, #176]	; 0xb0
 800e634:	4313      	orrs	r3, r2
 800e636:	60fb      	str	r3, [r7, #12]
  *address = value;
 800e638:	6a3b      	ldr	r3, [r7, #32]
 800e63a:	68fa      	ldr	r2, [r7, #12]
 800e63c:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC0 huffman values */
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 800e63e:	6a3b      	ldr	r3, [r7, #32]
 800e640:	3b04      	subs	r3, #4
 800e642:	623b      	str	r3, [r7, #32]
  index = 160;
 800e644:	23a0      	movs	r3, #160	; 0xa0
 800e646:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800e648:	e021      	b.n	800e68e <JPEG_Set_Huff_DHTMem+0x19e>
  {
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800e64a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e64c:	3b01      	subs	r3, #1
 800e64e:	69fa      	ldr	r2, [r7, #28]
 800e650:	4413      	add	r3, r2
 800e652:	7c1b      	ldrb	r3, [r3, #16]
 800e654:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800e656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e658:	3b02      	subs	r3, #2
 800e65a:	69f9      	ldr	r1, [r7, #28]
 800e65c:	440b      	add	r3, r1
 800e65e:	7c1b      	ldrb	r3, [r3, #16]
 800e660:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800e662:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800e664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e666:	3b03      	subs	r3, #3
 800e668:	69f9      	ldr	r1, [r7, #28]
 800e66a:	440b      	add	r3, r1
 800e66c:	7c1b      	ldrb	r3, [r3, #16]
 800e66e:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800e670:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 800e672:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e674:	3a04      	subs	r2, #4
 800e676:	69f9      	ldr	r1, [r7, #28]
 800e678:	440a      	add	r2, r1
 800e67a:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800e67c:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800e67e:	6a3b      	ldr	r3, [r7, #32]
 800e680:	601a      	str	r2, [r3, #0]
    address--;
 800e682:	6a3b      	ldr	r3, [r7, #32]
 800e684:	3b04      	subs	r3, #4
 800e686:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800e688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e68a:	3b04      	subs	r3, #4
 800e68c:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800e68e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e690:	2b03      	cmp	r3, #3
 800e692:	d8da      	bhi.n	800e64a <JPEG_Set_Huff_DHTMem+0x15a>
  }

  /* DC1 Huffman Table : BITS*/
  /* DC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM + 51 base address to DHTMEM + 55*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 51) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 51);
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800e69c:	33cc      	adds	r3, #204	; 0xcc
 800e69e:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 800e6a0:	6a3b      	ldr	r3, [r7, #32]
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	b29b      	uxth	r3, r3
 800e6a6:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 800e6a8:	693b      	ldr	r3, [r7, #16]
 800e6aa:	785b      	ldrb	r3, [r3, #1]
 800e6ac:	061a      	lsls	r2, r3, #24
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	431a      	orrs	r2, r3
 800e6b2:	693b      	ldr	r3, [r7, #16]
 800e6b4:	781b      	ldrb	r3, [r3, #0]
 800e6b6:	041b      	lsls	r3, r3, #16
 800e6b8:	4313      	orrs	r3, r2
 800e6ba:	60fb      	str	r3, [r7, #12]
  *address = value;
 800e6bc:	6a3b      	ldr	r3, [r7, #32]
 800e6be:	68fa      	ldr	r2, [r7, #12]
 800e6c0:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 55) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 55);
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800e6ca:	33dc      	adds	r3, #220	; 0xdc
 800e6cc:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 800e6ce:	6a3b      	ldr	r3, [r7, #32]
 800e6d0:	681a      	ldr	r2, [r3, #0]
 800e6d2:	4b0e      	ldr	r3, [pc, #56]	; (800e70c <JPEG_Set_Huff_DHTMem+0x21c>)
 800e6d4:	4013      	ands	r3, r2
 800e6d6:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->Bits[14] & 0xFFUL);
 800e6d8:	693b      	ldr	r3, [r7, #16]
 800e6da:	7bdb      	ldrb	r3, [r3, #15]
 800e6dc:	021a      	lsls	r2, r3, #8
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	4313      	orrs	r3, r2
 800e6e2:	693a      	ldr	r2, [r7, #16]
 800e6e4:	7b92      	ldrb	r2, [r2, #14]
 800e6e6:	4313      	orrs	r3, r2
 800e6e8:	60fb      	str	r3, [r7, #12]
  *address = value;
 800e6ea:	6a3b      	ldr	r3, [r7, #32]
 800e6ec:	68fa      	ldr	r2, [r7, #12]
 800e6ee:	601a      	str	r2, [r3, #0]

  /*continue setting 12 DC1 huffman Bits from DHTMEM + 54 down to DHTMEM + 52*/
  address--;
 800e6f0:	6a3b      	ldr	r3, [r7, #32]
 800e6f2:	3b04      	subs	r3, #4
 800e6f4:	623b      	str	r3, [r7, #32]
  index = 12;
 800e6f6:	230c      	movs	r3, #12
 800e6f8:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800e6fa:	e027      	b.n	800e74c <JPEG_Set_Huff_DHTMem+0x25c>
 800e6fc:	0802a410 	.word	0x0802a410
 800e700:	0802a4c4 	.word	0x0802a4c4
 800e704:	0802a3d8 	.word	0x0802a3d8
 800e708:	0802a3f4 	.word	0x0802a3f4
 800e70c:	ffff0000 	.word	0xffff0000
  {

    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800e710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e712:	3301      	adds	r3, #1
 800e714:	693a      	ldr	r2, [r7, #16]
 800e716:	5cd3      	ldrb	r3, [r2, r3]
 800e718:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 800e71a:	6939      	ldr	r1, [r7, #16]
 800e71c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e71e:	440b      	add	r3, r1
 800e720:	781b      	ldrb	r3, [r3, #0]
 800e722:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800e724:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800e726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e728:	3b01      	subs	r3, #1
 800e72a:	6939      	ldr	r1, [r7, #16]
 800e72c:	5ccb      	ldrb	r3, [r1, r3]
 800e72e:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 800e730:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->Bits[index - 2UL] & 0xFFUL);
 800e732:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e734:	3a02      	subs	r2, #2
 800e736:	6939      	ldr	r1, [r7, #16]
 800e738:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800e73a:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800e73c:	6a3b      	ldr	r3, [r7, #32]
 800e73e:	601a      	str	r2, [r3, #0]
    address--;
 800e740:	6a3b      	ldr	r3, [r7, #32]
 800e742:	3b04      	subs	r3, #4
 800e744:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800e746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e748:	3b04      	subs	r3, #4
 800e74a:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800e74c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e74e:	2b03      	cmp	r3, #3
 800e750:	d8de      	bhi.n	800e710 <JPEG_Set_Huff_DHTMem+0x220>

  }
  /* DC1 Huffman Table : Val*/
  /* DC1 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +55 to DHTMEM + 58 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 55) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 55);
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800e75a:	33dc      	adds	r3, #220	; 0xdc
 800e75c:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 800e75e:	6a3b      	ldr	r3, [r7, #32]
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	b29b      	uxth	r3, r3
 800e764:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 800e766:	693b      	ldr	r3, [r7, #16]
 800e768:	7c5b      	ldrb	r3, [r3, #17]
 800e76a:	061a      	lsls	r2, r3, #24
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	431a      	orrs	r2, r3
 800e770:	693b      	ldr	r3, [r7, #16]
 800e772:	7c1b      	ldrb	r3, [r3, #16]
 800e774:	041b      	lsls	r3, r3, #16
 800e776:	4313      	orrs	r3, r2
 800e778:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 800e77a:	6a3b      	ldr	r3, [r7, #32]
 800e77c:	68fa      	ldr	r2, [r7, #12]
 800e77e:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 58) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 58);
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800e788:	33e8      	adds	r3, #232	; 0xe8
 800e78a:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000UL;
 800e78c:	6a3b      	ldr	r3, [r7, #32]
 800e78e:	681a      	ldr	r2, [r3, #0]
 800e790:	4b6d      	ldr	r3, [pc, #436]	; (800e948 <JPEG_Set_Huff_DHTMem+0x458>)
 800e792:	4013      	ands	r3, r2
 800e794:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 800e796:	693b      	ldr	r3, [r7, #16]
 800e798:	7edb      	ldrb	r3, [r3, #27]
 800e79a:	021a      	lsls	r2, r3, #8
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	4313      	orrs	r3, r2
 800e7a0:	693a      	ldr	r2, [r7, #16]
 800e7a2:	7e92      	ldrb	r2, [r2, #26]
 800e7a4:	4313      	orrs	r3, r2
 800e7a6:	60fb      	str	r3, [r7, #12]
  *address = value;
 800e7a8:	6a3b      	ldr	r3, [r7, #32]
 800e7aa:	68fa      	ldr	r2, [r7, #12]
 800e7ac:	601a      	str	r2, [r3, #0]

  /*continue setting 8 DC1 huffman val from DHTMEM + 57 down to DHTMEM + 56*/
  address--;
 800e7ae:	6a3b      	ldr	r3, [r7, #32]
 800e7b0:	3b04      	subs	r3, #4
 800e7b2:	623b      	str	r3, [r7, #32]
  index = 8;
 800e7b4:	2308      	movs	r3, #8
 800e7b6:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800e7b8:	e021      	b.n	800e7fe <JPEG_Set_Huff_DHTMem+0x30e>
  {
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800e7ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7bc:	3301      	adds	r3, #1
 800e7be:	693a      	ldr	r2, [r7, #16]
 800e7c0:	4413      	add	r3, r2
 800e7c2:	7c1b      	ldrb	r3, [r3, #16]
 800e7c4:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 800e7c6:	6939      	ldr	r1, [r7, #16]
 800e7c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7ca:	440b      	add	r3, r1
 800e7cc:	3310      	adds	r3, #16
 800e7ce:	781b      	ldrb	r3, [r3, #0]
 800e7d0:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800e7d2:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800e7d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7d6:	3b01      	subs	r3, #1
 800e7d8:	6939      	ldr	r1, [r7, #16]
 800e7da:	440b      	add	r3, r1
 800e7dc:	7c1b      	ldrb	r3, [r3, #16]
 800e7de:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 800e7e0:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->HuffVal[index - 2UL] & 0xFFUL);
 800e7e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e7e4:	3a02      	subs	r2, #2
 800e7e6:	6939      	ldr	r1, [r7, #16]
 800e7e8:	440a      	add	r2, r1
 800e7ea:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800e7ec:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800e7ee:	6a3b      	ldr	r3, [r7, #32]
 800e7f0:	601a      	str	r2, [r3, #0]
    address--;
 800e7f2:	6a3b      	ldr	r3, [r7, #32]
 800e7f4:	3b04      	subs	r3, #4
 800e7f6:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800e7f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7fa:	3b04      	subs	r3, #4
 800e7fc:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800e7fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e800:	2b03      	cmp	r3, #3
 800e802:	d8da      	bhi.n	800e7ba <JPEG_Set_Huff_DHTMem+0x2ca>
  }

  /* AC1 Huffman Table : BITS*/
  /* AC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 58 to DHTMEM + 62*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 58) belong to AC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 58);
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800e80c:	33e8      	adds	r3, #232	; 0xe8
 800e80e:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 800e810:	6a3b      	ldr	r3, [r7, #32]
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	b29b      	uxth	r3, r3
 800e816:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 800e818:	69bb      	ldr	r3, [r7, #24]
 800e81a:	785b      	ldrb	r3, [r3, #1]
 800e81c:	061a      	lsls	r2, r3, #24
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	431a      	orrs	r2, r3
 800e822:	69bb      	ldr	r3, [r7, #24]
 800e824:	781b      	ldrb	r3, [r3, #0]
 800e826:	041b      	lsls	r3, r3, #16
 800e828:	4313      	orrs	r3, r2
 800e82a:	60fb      	str	r3, [r7, #12]
  *address = value;
 800e82c:	6a3b      	ldr	r3, [r7, #32]
 800e82e:	68fa      	ldr	r2, [r7, #12]
 800e830:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 62) belong to Bits Val table */
  address = (hjpeg->Instance->DHTMEM + 62);
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800e83a:	33f8      	adds	r3, #248	; 0xf8
 800e83c:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 800e83e:	6a3b      	ldr	r3, [r7, #32]
 800e840:	681a      	ldr	r2, [r3, #0]
 800e842:	4b41      	ldr	r3, [pc, #260]	; (800e948 <JPEG_Set_Huff_DHTMem+0x458>)
 800e844:	4013      	ands	r3, r2
 800e846:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 800e848:	69bb      	ldr	r3, [r7, #24]
 800e84a:	7bdb      	ldrb	r3, [r3, #15]
 800e84c:	021a      	lsls	r2, r3, #8
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	4313      	orrs	r3, r2
 800e852:	69ba      	ldr	r2, [r7, #24]
 800e854:	7b92      	ldrb	r2, [r2, #14]
 800e856:	4313      	orrs	r3, r2
 800e858:	60fb      	str	r3, [r7, #12]
  *address = value;
 800e85a:	6a3b      	ldr	r3, [r7, #32]
 800e85c:	68fa      	ldr	r2, [r7, #12]
 800e85e:	601a      	str	r2, [r3, #0]

  /*continue setting 12 AC1 huffman Bits from DHTMEM + 61 down to DHTMEM + 59*/
  address--;
 800e860:	6a3b      	ldr	r3, [r7, #32]
 800e862:	3b04      	subs	r3, #4
 800e864:	623b      	str	r3, [r7, #32]
  index = 12;
 800e866:	230c      	movs	r3, #12
 800e868:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800e86a:	e01d      	b.n	800e8a8 <JPEG_Set_Huff_DHTMem+0x3b8>
  {

    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800e86c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e86e:	3301      	adds	r3, #1
 800e870:	69ba      	ldr	r2, [r7, #24]
 800e872:	5cd3      	ldrb	r3, [r2, r3]
 800e874:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 800e876:	69b9      	ldr	r1, [r7, #24]
 800e878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e87a:	440b      	add	r3, r1
 800e87c:	781b      	ldrb	r3, [r3, #0]
 800e87e:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800e880:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800e882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e884:	3b01      	subs	r3, #1
 800e886:	69b9      	ldr	r1, [r7, #24]
 800e888:	5ccb      	ldrb	r3, [r1, r3]
 800e88a:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 800e88c:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->Bits[index - 2UL] & 0xFFUL);
 800e88e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e890:	3a02      	subs	r2, #2
 800e892:	69b9      	ldr	r1, [r7, #24]
 800e894:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800e896:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800e898:	6a3b      	ldr	r3, [r7, #32]
 800e89a:	601a      	str	r2, [r3, #0]
    address--;
 800e89c:	6a3b      	ldr	r3, [r7, #32]
 800e89e:	3b04      	subs	r3, #4
 800e8a0:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800e8a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8a4:	3b04      	subs	r3, #4
 800e8a6:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800e8a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8aa:	2b03      	cmp	r3, #3
 800e8ac:	d8de      	bhi.n	800e86c <JPEG_Set_Huff_DHTMem+0x37c>

  }
  /* AC1 Huffman Table : Val*/
  /* AC1 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 62 to DHTMEM + 102 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 62) belong to AC1 VALS table */
  address = (hjpeg->Instance->DHTMEM + 62);
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800e8b6:	33f8      	adds	r3, #248	; 0xf8
 800e8b8:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 800e8ba:	6a3b      	ldr	r3, [r7, #32]
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	b29b      	uxth	r3, r3
 800e8c0:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 800e8c2:	69bb      	ldr	r3, [r7, #24]
 800e8c4:	7c5b      	ldrb	r3, [r3, #17]
 800e8c6:	061a      	lsls	r2, r3, #24
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	431a      	orrs	r2, r3
 800e8cc:	69bb      	ldr	r3, [r7, #24]
 800e8ce:	7c1b      	ldrb	r3, [r3, #16]
 800e8d0:	041b      	lsls	r3, r3, #16
 800e8d2:	4313      	orrs	r3, r2
 800e8d4:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 800e8d6:	6a3b      	ldr	r3, [r7, #32]
 800e8d8:	68fa      	ldr	r2, [r7, #12]
 800e8da:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC1 huffman values from DHTMEM + 63 to DHTMEM+102 */
  address = (hjpeg->Instance->DHTMEM + 102);
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800e8e4:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 800e8e8:	623b      	str	r3, [r7, #32]
  index = 160;
 800e8ea:	23a0      	movs	r3, #160	; 0xa0
 800e8ec:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800e8ee:	e021      	b.n	800e934 <JPEG_Set_Huff_DHTMem+0x444>
  {
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800e8f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8f2:	3301      	adds	r3, #1
 800e8f4:	69ba      	ldr	r2, [r7, #24]
 800e8f6:	4413      	add	r3, r2
 800e8f8:	7c1b      	ldrb	r3, [r3, #16]
 800e8fa:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 800e8fc:	69b9      	ldr	r1, [r7, #24]
 800e8fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e900:	440b      	add	r3, r1
 800e902:	3310      	adds	r3, #16
 800e904:	781b      	ldrb	r3, [r3, #0]
 800e906:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800e908:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800e90a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e90c:	3b01      	subs	r3, #1
 800e90e:	69b9      	ldr	r1, [r7, #24]
 800e910:	440b      	add	r3, r1
 800e912:	7c1b      	ldrb	r3, [r3, #16]
 800e914:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 800e916:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 800e918:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e91a:	3a02      	subs	r2, #2
 800e91c:	69b9      	ldr	r1, [r7, #24]
 800e91e:	440a      	add	r2, r1
 800e920:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800e922:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800e924:	6a3b      	ldr	r3, [r7, #32]
 800e926:	601a      	str	r2, [r3, #0]
    address--;
 800e928:	6a3b      	ldr	r3, [r7, #32]
 800e92a:	3b04      	subs	r3, #4
 800e92c:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800e92e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e930:	3b04      	subs	r3, #4
 800e932:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800e934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e936:	2b03      	cmp	r3, #3
 800e938:	d8da      	bhi.n	800e8f0 <JPEG_Set_Huff_DHTMem+0x400>
  }

}
 800e93a:	bf00      	nop
 800e93c:	bf00      	nop
 800e93e:	372c      	adds	r7, #44	; 0x2c
 800e940:	46bd      	mov	sp, r7
 800e942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e946:	4770      	bx	lr
 800e948:	ffff0000 	.word	0xffff0000

0800e94c <JPEG_Init_Process>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Init_Process(JPEG_HandleTypeDef *hjpeg)
{
 800e94c:	b480      	push	{r7}
 800e94e:	b083      	sub	sp, #12
 800e950:	af00      	add	r7, sp, #0
 800e952:	6078      	str	r0, [r7, #4]
  /*Reset pause*/
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e958:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	655a      	str	r2, [r3, #84]	; 0x54

  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e964:	f003 0303 	and.w	r3, r3, #3
 800e968:	2b02      	cmp	r3, #2
 800e96a:	d108      	bne.n	800e97e <JPEG_Init_Process+0x32>
  {
    /*Set JPEG Codec to Decoding mode */
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	685a      	ldr	r2, [r3, #4]
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	f042 0208 	orr.w	r2, r2, #8
 800e97a:	605a      	str	r2, [r3, #4]
 800e97c:	e007      	b.n	800e98e <JPEG_Init_Process+0x42>
  }
  else /* JPEG_CONTEXT_ENCODE */
  {
    /*Set JPEG Codec to Encoding mode */
    hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_DE;
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	681b      	ldr	r3, [r3, #0]
 800e982:	685a      	ldr	r2, [r3, #4]
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	f022 0208 	bic.w	r2, r2, #8
 800e98c:	605a      	str	r2, [r3, #4]
  }

  /*Stop JPEG processing */
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	681a      	ldr	r2, [r3, #0]
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	f022 0201 	bic.w	r2, r2, #1
 800e99c:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 800e9ac:	631a      	str	r2, [r3, #48]	; 0x30

  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e9bc:	631a      	str	r2, [r3, #48]	; 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e9cc:	631a      	str	r2, [r3, #48]	; 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800e9dc:	639a      	str	r2, [r3, #56]	; 0x38

  /*Start Encoding/Decoding*/
  hjpeg->Instance->CONFR0 |=  JPEG_CONFR0_START;
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	681b      	ldr	r3, [r3, #0]
 800e9e2:	681a      	ldr	r2, [r3, #0]
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	f042 0201 	orr.w	r2, r2, #1
 800e9ec:	601a      	str	r2, [r3, #0]

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e9f2:	f003 030c 	and.w	r3, r3, #12
 800e9f6:	2b08      	cmp	r3, #8
 800e9f8:	d108      	bne.n	800ea0c <JPEG_Init_Process+0xc0>
  {
    /*Enable IN/OUT, end of Conversation, and end of header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	f042 026e 	orr.w	r2, r2, #110	; 0x6e
 800ea08:	631a      	str	r2, [r3, #48]	; 0x30
  }
  else
  {
    /* Nothing to do */
  }
}
 800ea0a:	e00d      	b.n	800ea28 <JPEG_Init_Process+0xdc>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ea10:	f003 030c 	and.w	r3, r3, #12
 800ea14:	2b0c      	cmp	r3, #12
 800ea16:	d107      	bne.n	800ea28 <JPEG_Init_Process+0xdc>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	681b      	ldr	r3, [r3, #0]
 800ea22:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800ea26:	631a      	str	r2, [r3, #48]	; 0x30
}
 800ea28:	bf00      	nop
 800ea2a:	370c      	adds	r7, #12
 800ea2c:	46bd      	mov	sp, r7
 800ea2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea32:	4770      	bx	lr

0800ea34 <JPEG_Process>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if the process has ends else JPEG_PROCESS_ONGOING
  */
static uint32_t JPEG_Process(JPEG_HandleTypeDef *hjpeg)
{
 800ea34:	b580      	push	{r7, lr}
 800ea36:	b084      	sub	sp, #16
 800ea38:	af00      	add	r7, sp, #0
 800ea3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;

  /*End of header processing flag */
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ea40:	f003 0303 	and.w	r3, r3, #3
 800ea44:	2b02      	cmp	r3, #2
 800ea46:	d125      	bne.n	800ea94 <JPEG_Process+0x60>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	681b      	ldr	r3, [r3, #0]
 800ea4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d01e      	beq.n	800ea94 <JPEG_Process+0x60>
    {
      /*Call Header parsing complete callback */
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	3304      	adds	r3, #4
 800ea5a:	4619      	mov	r1, r3
 800ea5c:	6878      	ldr	r0, [r7, #4]
 800ea5e:	f7fe ff55 	bl	800d90c <HAL_JPEG_GetInfo>
      /* Reset the ImageQuality */
      hjpeg->Conf.ImageQuality = 0;
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	2200      	movs	r2, #0
 800ea66:	615a      	str	r2, [r3, #20]

      /*Call Info Ready callback */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->InfoReadyCallback(hjpeg, &hjpeg->Conf);
#else
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	3304      	adds	r3, #4
 800ea6c:	4619      	mov	r1, r3
 800ea6e:	6878      	ldr	r0, [r7, #4]
 800ea70:	f7f3 f8da 	bl	8001c28 <HAL_JPEG_InfoReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	681b      	ldr	r3, [r3, #0]
 800ea78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ea82:	631a      	str	r2, [r3, #48]	; 0x30

      /* Clear header processing done flag */
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	681b      	ldr	r3, [r3, #0]
 800ea8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ea92:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  /*Input FIFO status handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ea98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d116      	bne.n	800eace <JPEG_Process+0x9a>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eaa6:	f003 0302 	and.w	r3, r3, #2
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d004      	beq.n	800eab8 <JPEG_Process+0x84>
    {
      /*Input FIFO threshold flag */
      /*JPEG_FIFO_TH_SIZE words can be written in */
      JPEG_ReadInputData(hjpeg, JPEG_FIFO_TH_SIZE);
 800eaae:	2108      	movs	r1, #8
 800eab0:	6878      	ldr	r0, [r7, #4]
 800eab2:	f000 f988 	bl	800edc6 <JPEG_ReadInputData>
 800eab6:	e00a      	b.n	800eace <JPEG_Process+0x9a>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eabe:	f003 0304 	and.w	r3, r3, #4
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d003      	beq.n	800eace <JPEG_Process+0x9a>
    {
      /*Input FIFO Not Full flag */
      /*32-bit value can be written in */
      JPEG_ReadInputData(hjpeg, 1);
 800eac6:	2101      	movs	r1, #1
 800eac8:	6878      	ldr	r0, [r7, #4]
 800eaca:	f000 f97c 	bl	800edc6 <JPEG_ReadInputData>
    }
  }


  /*Output FIFO flag handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ead2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d116      	bne.n	800eb08 <JPEG_Process+0xd4>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eae0:	f003 0308 	and.w	r3, r3, #8
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d004      	beq.n	800eaf2 <JPEG_Process+0xbe>
    {
      /*Output FIFO threshold flag */
      /*JPEG_FIFO_TH_SIZE words can be read out */
      JPEG_StoreOutputData(hjpeg, JPEG_FIFO_TH_SIZE);
 800eae8:	2108      	movs	r1, #8
 800eaea:	6878      	ldr	r0, [r7, #4]
 800eaec:	f000 f864 	bl	800ebb8 <JPEG_StoreOutputData>
 800eaf0:	e00a      	b.n	800eb08 <JPEG_Process+0xd4>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eaf8:	f003 0310 	and.w	r3, r3, #16
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d003      	beq.n	800eb08 <JPEG_Process+0xd4>
    {
      /*Output FIFO Not Empty flag */
      /*32-bit value can be read out */
      JPEG_StoreOutputData(hjpeg, 1);
 800eb00:	2101      	movs	r1, #1
 800eb02:	6878      	ldr	r0, [r7, #4]
 800eb04:	f000 f858 	bl	800ebb8 <JPEG_StoreOutputData>
      /* Nothing to do */
    }
  }

  /*End of Conversion handling :i.e EOC flag is high and OFTF low and OFNEF low*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb0e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800eb12:	2b20      	cmp	r3, #32
 800eb14:	d14b      	bne.n	800ebae <JPEG_Process+0x17a>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	681b      	ldr	r3, [r3, #0]
 800eb1a:	681a      	ldr	r2, [r3, #0]
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	681b      	ldr	r3, [r3, #0]
 800eb20:	f022 0201 	bic.w	r2, r2, #1
 800eb24:	601a      	str	r2, [r3, #0]

    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eb2a:	f003 030c 	and.w	r3, r3, #12
 800eb2e:	2b08      	cmp	r3, #8
 800eb30:	d107      	bne.n	800eb42 <JPEG_Process+0x10e>
    {
      /* Disable All Interrupts */
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	681b      	ldr	r3, [r3, #0]
 800eb36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 800eb40:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Clear all flags */
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	681b      	ldr	r3, [r3, #0]
 800eb46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800eb50:	639a      	str	r2, [r3, #56]	; 0x38

    /*Call End of conversion callback */
    if (hjpeg->JpegOutCount > 0UL)
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d00a      	beq.n	800eb70 <JPEG_Process+0x13c>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	69d9      	ldr	r1, [r3, #28]
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb62:	461a      	mov	r2, r3
 800eb64:	6878      	ldr	r0, [r7, #4]
 800eb66:	f7f3 f92f 	bl	8001dc8 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	2200      	movs	r2, #0
 800eb6e:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /*Reset Context Operation*/
    tmpContext = hjpeg->Context;
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eb74:	60fb      	str	r3, [r7, #12]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eb7a:	f403 4282 	and.w	r2, r3, #16640	; 0x4100
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	2200      	movs	r2, #0
 800eb86:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	2201      	movs	r2, #1
 800eb8e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	f003 0303 	and.w	r3, r3, #3
 800eb98:	2b02      	cmp	r3, #2
 800eb9a:	d103      	bne.n	800eba4 <JPEG_Process+0x170>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800eb9c:	6878      	ldr	r0, [r7, #4]
 800eb9e:	f7f3 f97b 	bl	8001e98 <HAL_JPEG_DecodeCpltCallback>
 800eba2:	e002      	b.n	800ebaa <JPEG_Process+0x176>
    else /* JPEG_CONTEXT_ENCODE */
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->EncodeCpltCallback(hjpeg);
#else
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800eba4:	6878      	ldr	r0, [r7, #4]
 800eba6:	f7ff f910 	bl	800ddca <HAL_JPEG_EncodeCpltCallback>
#endif
    }

    return JPEG_PROCESS_DONE;
 800ebaa:	2301      	movs	r3, #1
 800ebac:	e000      	b.n	800ebb0 <JPEG_Process+0x17c>
  }


  return JPEG_PROCESS_ONGOING;
 800ebae:	2300      	movs	r3, #0
}
 800ebb0:	4618      	mov	r0, r3
 800ebb2:	3710      	adds	r7, #16
 800ebb4:	46bd      	mov	sp, r7
 800ebb6:	bd80      	pop	{r7, pc}

0800ebb8 <JPEG_StoreOutputData>:
  *         the configuration information for JPEG module
  * @param  nbOutputWords Number of output words (of 32 bits) ready from the JPEG peripheral
  * @retval None
  */
static void JPEG_StoreOutputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbOutputWords)
{
 800ebb8:	b580      	push	{r7, lr}
 800ebba:	b086      	sub	sp, #24
 800ebbc:	af00      	add	r7, sp, #0
 800ebbe:	6078      	str	r0, [r7, #4]
 800ebc0:	6039      	str	r1, [r7, #0]
  uint32_t index;
  uint32_t nb_words;
  uint32_t nb_bytes;
  uint32_t dataword;

  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800ebca:	683b      	ldr	r3, [r7, #0]
 800ebcc:	009b      	lsls	r3, r3, #2
 800ebce:	440b      	add	r3, r1
 800ebd0:	429a      	cmp	r2, r3
 800ebd2:	d34b      	bcc.n	800ec6c <JPEG_StoreOutputData+0xb4>
  {
    for (index = 0; index < nbOutputWords; index++)
 800ebd4:	2300      	movs	r3, #0
 800ebd6:	617b      	str	r3, [r7, #20]
 800ebd8:	e031      	b.n	800ec3e <JPEG_StoreOutputData+0x86>
    {
      /*Transfer 32 bits from the JPEG output FIFO*/
      dataword = hjpeg->Instance->DOR;
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ebe0:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	69da      	ldr	r2, [r3, #28]
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebea:	4413      	add	r3, r2
 800ebec:	68ba      	ldr	r2, [r7, #8]
 800ebee:	b2d2      	uxtb	r2, r2
 800ebf0:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 800ebf2:	68bb      	ldr	r3, [r7, #8]
 800ebf4:	0a19      	lsrs	r1, r3, #8
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	69da      	ldr	r2, [r3, #28]
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebfe:	3301      	adds	r3, #1
 800ec00:	4413      	add	r3, r2
 800ec02:	b2ca      	uxtb	r2, r1
 800ec04:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800ec06:	68bb      	ldr	r3, [r7, #8]
 800ec08:	0c19      	lsrs	r1, r3, #16
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	69da      	ldr	r2, [r3, #28]
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec12:	3302      	adds	r3, #2
 800ec14:	4413      	add	r3, r2
 800ec16:	b2ca      	uxtb	r2, r1
 800ec18:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800ec1a:	68bb      	ldr	r3, [r7, #8]
 800ec1c:	0e19      	lsrs	r1, r3, #24
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	69da      	ldr	r2, [r3, #28]
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec26:	3303      	adds	r3, #3
 800ec28:	4413      	add	r3, r2
 800ec2a:	b2ca      	uxtb	r2, r1
 800ec2c:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec32:	1d1a      	adds	r2, r3, #4
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	625a      	str	r2, [r3, #36]	; 0x24
    for (index = 0; index < nbOutputWords; index++)
 800ec38:	697b      	ldr	r3, [r7, #20]
 800ec3a:	3301      	adds	r3, #1
 800ec3c:	617b      	str	r3, [r7, #20]
 800ec3e:	697a      	ldr	r2, [r7, #20]
 800ec40:	683b      	ldr	r3, [r7, #0]
 800ec42:	429a      	cmp	r2, r3
 800ec44:	d3c9      	bcc.n	800ebda <JPEG_StoreOutputData+0x22>
    }
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec4e:	429a      	cmp	r2, r3
 800ec50:	f040 80b5 	bne.w	800edbe <JPEG_StoreOutputData+0x206>
    {
      /*Output Buffer is full, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	69d9      	ldr	r1, [r3, #28]
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec5c:	461a      	mov	r2, r3
 800ec5e:	6878      	ldr	r0, [r7, #4]
 800ec60:	f7f3 f8b2 	bl	8001dc8 <HAL_JPEG_DataReadyCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/
      hjpeg->JpegOutCount = 0;
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	2200      	movs	r2, #0
 800ec68:	625a      	str	r2, [r3, #36]	; 0x24
  }
  else
  {
    /* Nothing to do */
  }
}
 800ec6a:	e0a8      	b.n	800edbe <JPEG_StoreOutputData+0x206>
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec74:	429a      	cmp	r2, r3
 800ec76:	f240 80a2 	bls.w	800edbe <JPEG_StoreOutputData+0x206>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec82:	1ad3      	subs	r3, r2, r3
 800ec84:	089b      	lsrs	r3, r3, #2
 800ec86:	613b      	str	r3, [r7, #16]
    for (index = 0; index < nb_words; index++)
 800ec88:	2300      	movs	r3, #0
 800ec8a:	617b      	str	r3, [r7, #20]
 800ec8c:	e031      	b.n	800ecf2 <JPEG_StoreOutputData+0x13a>
      dataword = hjpeg->Instance->DOR;
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ec94:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	69da      	ldr	r2, [r3, #28]
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec9e:	4413      	add	r3, r2
 800eca0:	68ba      	ldr	r2, [r7, #8]
 800eca2:	b2d2      	uxtb	r2, r2
 800eca4:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 800eca6:	68bb      	ldr	r3, [r7, #8]
 800eca8:	0a19      	lsrs	r1, r3, #8
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	69da      	ldr	r2, [r3, #28]
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecb2:	3301      	adds	r3, #1
 800ecb4:	4413      	add	r3, r2
 800ecb6:	b2ca      	uxtb	r2, r1
 800ecb8:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800ecba:	68bb      	ldr	r3, [r7, #8]
 800ecbc:	0c19      	lsrs	r1, r3, #16
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	69da      	ldr	r2, [r3, #28]
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecc6:	3302      	adds	r3, #2
 800ecc8:	4413      	add	r3, r2
 800ecca:	b2ca      	uxtb	r2, r1
 800eccc:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800ecce:	68bb      	ldr	r3, [r7, #8]
 800ecd0:	0e19      	lsrs	r1, r3, #24
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	69da      	ldr	r2, [r3, #28]
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecda:	3303      	adds	r3, #3
 800ecdc:	4413      	add	r3, r2
 800ecde:	b2ca      	uxtb	r2, r1
 800ece0:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ece6:	1d1a      	adds	r2, r3, #4
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	625a      	str	r2, [r3, #36]	; 0x24
    for (index = 0; index < nb_words; index++)
 800ecec:	697b      	ldr	r3, [r7, #20]
 800ecee:	3301      	adds	r3, #1
 800ecf0:	617b      	str	r3, [r7, #20]
 800ecf2:	697a      	ldr	r2, [r7, #20]
 800ecf4:	693b      	ldr	r3, [r7, #16]
 800ecf6:	429a      	cmp	r2, r3
 800ecf8:	d3c9      	bcc.n	800ec8e <JPEG_StoreOutputData+0xd6>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed02:	429a      	cmp	r2, r3
 800ed04:	d10b      	bne.n	800ed1e <JPEG_StoreOutputData+0x166>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	69d9      	ldr	r1, [r3, #28]
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed0e:	461a      	mov	r2, r3
 800ed10:	6878      	ldr	r0, [r7, #4]
 800ed12:	f7f3 f859 	bl	8001dc8 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	2200      	movs	r2, #0
 800ed1a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800ed1c:	e04f      	b.n	800edbe <JPEG_StoreOutputData+0x206>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed26:	1ad3      	subs	r3, r2, r3
 800ed28:	60fb      	str	r3, [r7, #12]
      dataword = hjpeg->Instance->DOR;
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ed30:	60bb      	str	r3, [r7, #8]
      for (index = 0; index < nb_bytes; index++)
 800ed32:	2300      	movs	r3, #0
 800ed34:	617b      	str	r3, [r7, #20]
 800ed36:	e015      	b.n	800ed64 <JPEG_StoreOutputData+0x1ac>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 800ed38:	697b      	ldr	r3, [r7, #20]
 800ed3a:	f003 0303 	and.w	r3, r3, #3
 800ed3e:	00db      	lsls	r3, r3, #3
 800ed40:	68ba      	ldr	r2, [r7, #8]
 800ed42:	fa22 f103 	lsr.w	r1, r2, r3
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	69da      	ldr	r2, [r3, #28]
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed4e:	4413      	add	r3, r2
 800ed50:	b2ca      	uxtb	r2, r1
 800ed52:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed58:	1c5a      	adds	r2, r3, #1
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	625a      	str	r2, [r3, #36]	; 0x24
      for (index = 0; index < nb_bytes; index++)
 800ed5e:	697b      	ldr	r3, [r7, #20]
 800ed60:	3301      	adds	r3, #1
 800ed62:	617b      	str	r3, [r7, #20]
 800ed64:	697a      	ldr	r2, [r7, #20]
 800ed66:	68fb      	ldr	r3, [r7, #12]
 800ed68:	429a      	cmp	r2, r3
 800ed6a:	d3e5      	bcc.n	800ed38 <JPEG_StoreOutputData+0x180>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	69d9      	ldr	r1, [r3, #28]
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed74:	461a      	mov	r2, r3
 800ed76:	6878      	ldr	r0, [r7, #4]
 800ed78:	f7f3 f826 	bl	8001dc8 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	2200      	movs	r2, #0
 800ed80:	625a      	str	r2, [r3, #36]	; 0x24
      nb_bytes = 4UL - nb_bytes;
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	f1c3 0304 	rsb	r3, r3, #4
 800ed88:	60fb      	str	r3, [r7, #12]
      for (index = nb_bytes; index < 4UL; index++)
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	617b      	str	r3, [r7, #20]
 800ed8e:	e013      	b.n	800edb8 <JPEG_StoreOutputData+0x200>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 800ed90:	697b      	ldr	r3, [r7, #20]
 800ed92:	00db      	lsls	r3, r3, #3
 800ed94:	68ba      	ldr	r2, [r7, #8]
 800ed96:	fa22 f103 	lsr.w	r1, r2, r3
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	69da      	ldr	r2, [r3, #28]
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eda2:	4413      	add	r3, r2
 800eda4:	b2ca      	uxtb	r2, r1
 800eda6:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edac:	1c5a      	adds	r2, r3, #1
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	625a      	str	r2, [r3, #36]	; 0x24
      for (index = nb_bytes; index < 4UL; index++)
 800edb2:	697b      	ldr	r3, [r7, #20]
 800edb4:	3301      	adds	r3, #1
 800edb6:	617b      	str	r3, [r7, #20]
 800edb8:	697b      	ldr	r3, [r7, #20]
 800edba:	2b03      	cmp	r3, #3
 800edbc:	d9e8      	bls.n	800ed90 <JPEG_StoreOutputData+0x1d8>
}
 800edbe:	bf00      	nop
 800edc0:	3718      	adds	r7, #24
 800edc2:	46bd      	mov	sp, r7
 800edc4:	bd80      	pop	{r7, pc}

0800edc6 <JPEG_ReadInputData>:
  *         the configuration information for JPEG module
  * @param  nbRequestWords Number of input words (of 32 bits) that the JPE peripheral request
  * @retval None
  */
static void JPEG_ReadInputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbRequestWords)
{
 800edc6:	b580      	push	{r7, lr}
 800edc8:	b088      	sub	sp, #32
 800edca:	af00      	add	r7, sp, #0
 800edcc:	6078      	str	r0, [r7, #4]
 800edce:	6039      	str	r1, [r7, #0]
  uint32_t nb_bytes = 0;
 800edd0:	2300      	movs	r3, #0
 800edd2:	61fb      	str	r3, [r7, #28]
  uint32_t nb_words;
  uint32_t index;
  uint32_t dataword;
  uint32_t input_count;

  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d002      	beq.n	800ede2 <JPEG_ReadInputData+0x1c>
 800eddc:	683b      	ldr	r3, [r7, #0]
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d104      	bne.n	800edec <JPEG_ReadInputData+0x26>
  {
    /* No more Input data : nothing to do*/
    (void) HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_INPUT);
 800ede2:	2101      	movs	r1, #1
 800ede4:	6878      	ldr	r0, [r7, #4]
 800ede6:	f7fe fe89 	bl	800dafc <HAL_JPEG_Pause>
 800edea:	e028      	b.n	800ee3e <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	6a1b      	ldr	r3, [r3, #32]
 800edf4:	429a      	cmp	r2, r3
 800edf6:	d906      	bls.n	800ee06 <JPEG_ReadInputData+0x40>
  {
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	6a1b      	ldr	r3, [r3, #32]
 800ee00:	1ad3      	subs	r3, r2, r3
 800ee02:	61fb      	str	r3, [r7, #28]
 800ee04:	e01b      	b.n	800ee3e <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	6a1b      	ldr	r3, [r3, #32]
 800ee0e:	429a      	cmp	r2, r3
 800ee10:	d115      	bne.n	800ee3e <JPEG_ReadInputData+0x78>
  {
    /*Call HAL_JPEG_GetDataCallback to get new data */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->GetDataCallback(hjpeg, hjpeg->JpegInCount);
#else
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	6a1b      	ldr	r3, [r3, #32]
 800ee16:	4619      	mov	r1, r3
 800ee18:	6878      	ldr	r0, [r7, #4]
 800ee1a:	f7f2 ffa1 	bl	8001d60 <HAL_JPEG_GetDataCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/

    if (hjpeg->InDataLength > 4UL)
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee22:	2b04      	cmp	r3, #4
 800ee24:	d905      	bls.n	800ee32 <JPEG_ReadInputData+0x6c>
    {
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee2a:	f023 0203 	bic.w	r2, r3, #3
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	629a      	str	r2, [r3, #40]	; 0x28
    }
    hjpeg->JpegInCount = 0;
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	2200      	movs	r2, #0
 800ee36:	621a      	str	r2, [r3, #32]
    nb_bytes = hjpeg->InDataLength;
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee3c:	61fb      	str	r3, [r7, #28]
  }
  else
  {
    /* Nothing to do */
  }
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ee42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	f040 809f 	bne.w	800ef8a <JPEG_ReadInputData+0x1c4>
 800ee4c:	69fb      	ldr	r3, [r7, #28]
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	f000 809b 	beq.w	800ef8a <JPEG_ReadInputData+0x1c4>
  {
    nb_words = nb_bytes / 4UL;
 800ee54:	69fb      	ldr	r3, [r7, #28]
 800ee56:	089b      	lsrs	r3, r3, #2
 800ee58:	613b      	str	r3, [r7, #16]
    if (nb_words >= nbRequestWords)
 800ee5a:	693a      	ldr	r2, [r7, #16]
 800ee5c:	683b      	ldr	r3, [r7, #0]
 800ee5e:	429a      	cmp	r2, r3
 800ee60:	d335      	bcc.n	800eece <JPEG_ReadInputData+0x108>
    {
      for (index = 0; index < nbRequestWords; index++)
 800ee62:	2300      	movs	r3, #0
 800ee64:	61bb      	str	r3, [r7, #24]
 800ee66:	e02d      	b.n	800eec4 <JPEG_ReadInputData+0xfe>
      {
        input_count = hjpeg->JpegInCount;
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	6a1b      	ldr	r3, [r3, #32]
 800ee6c:	60fb      	str	r3, [r7, #12]
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	699a      	ldr	r2, [r3, #24]
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	4413      	add	r3, r2
 800ee76:	781b      	ldrb	r3, [r3, #0]
 800ee78:	4619      	mov	r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	699a      	ldr	r2, [r3, #24]
 800ee7e:	68fb      	ldr	r3, [r7, #12]
 800ee80:	3301      	adds	r3, #1
 800ee82:	4413      	add	r3, r2
 800ee84:	781b      	ldrb	r3, [r3, #0]
 800ee86:	021b      	lsls	r3, r3, #8
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800ee88:	ea41 0203 	orr.w	r2, r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	6999      	ldr	r1, [r3, #24]
 800ee90:	68fb      	ldr	r3, [r7, #12]
 800ee92:	3302      	adds	r3, #2
 800ee94:	440b      	add	r3, r1
 800ee96:	781b      	ldrb	r3, [r3, #0]
 800ee98:	041b      	lsls	r3, r3, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800ee9a:	ea42 0103 	orr.w	r1, r2, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	699a      	ldr	r2, [r3, #24]
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	3303      	adds	r3, #3
 800eea6:	4413      	add	r3, r2
 800eea8:	781b      	ldrb	r3, [r3, #0]
 800eeaa:	061a      	lsls	r2, r3, #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	681b      	ldr	r3, [r3, #0]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800eeb0:	430a      	orrs	r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800eeb2:	641a      	str	r2, [r3, #64]	; 0x40

        hjpeg->JpegInCount += 4UL;
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	6a1b      	ldr	r3, [r3, #32]
 800eeb8:	1d1a      	adds	r2, r3, #4
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	621a      	str	r2, [r3, #32]
      for (index = 0; index < nbRequestWords; index++)
 800eebe:	69bb      	ldr	r3, [r7, #24]
 800eec0:	3301      	adds	r3, #1
 800eec2:	61bb      	str	r3, [r7, #24]
 800eec4:	69ba      	ldr	r2, [r7, #24]
 800eec6:	683b      	ldr	r3, [r7, #0]
 800eec8:	429a      	cmp	r2, r3
 800eeca:	d3cd      	bcc.n	800ee68 <JPEG_ReadInputData+0xa2>
        }
        hjpeg->Instance->DIR = dataword;
      }
    }
  }
}
 800eecc:	e05d      	b.n	800ef8a <JPEG_ReadInputData+0x1c4>
      if (nb_words > 0UL)
 800eece:	693b      	ldr	r3, [r7, #16]
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d035      	beq.n	800ef40 <JPEG_ReadInputData+0x17a>
        for (index = 0; index < nb_words; index++)
 800eed4:	2300      	movs	r3, #0
 800eed6:	61bb      	str	r3, [r7, #24]
 800eed8:	e02d      	b.n	800ef36 <JPEG_ReadInputData+0x170>
          input_count = hjpeg->JpegInCount;
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	6a1b      	ldr	r3, [r3, #32]
 800eede:	60fb      	str	r3, [r7, #12]
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	699a      	ldr	r2, [r3, #24]
 800eee4:	68fb      	ldr	r3, [r7, #12]
 800eee6:	4413      	add	r3, r2
 800eee8:	781b      	ldrb	r3, [r3, #0]
 800eeea:	4619      	mov	r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	699a      	ldr	r2, [r3, #24]
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	3301      	adds	r3, #1
 800eef4:	4413      	add	r3, r2
 800eef6:	781b      	ldrb	r3, [r3, #0]
 800eef8:	021b      	lsls	r3, r3, #8
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800eefa:	ea41 0203 	orr.w	r2, r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	6999      	ldr	r1, [r3, #24]
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	3302      	adds	r3, #2
 800ef06:	440b      	add	r3, r1
 800ef08:	781b      	ldrb	r3, [r3, #0]
 800ef0a:	041b      	lsls	r3, r3, #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800ef0c:	ea42 0103 	orr.w	r1, r2, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	699a      	ldr	r2, [r3, #24]
 800ef14:	68fb      	ldr	r3, [r7, #12]
 800ef16:	3303      	adds	r3, #3
 800ef18:	4413      	add	r3, r2
 800ef1a:	781b      	ldrb	r3, [r3, #0]
 800ef1c:	061a      	lsls	r2, r3, #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	681b      	ldr	r3, [r3, #0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800ef22:	430a      	orrs	r2, r1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800ef24:	641a      	str	r2, [r3, #64]	; 0x40
          hjpeg->JpegInCount += 4UL;
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	6a1b      	ldr	r3, [r3, #32]
 800ef2a:	1d1a      	adds	r2, r3, #4
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nb_words; index++)
 800ef30:	69bb      	ldr	r3, [r7, #24]
 800ef32:	3301      	adds	r3, #1
 800ef34:	61bb      	str	r3, [r7, #24]
 800ef36:	69ba      	ldr	r2, [r7, #24]
 800ef38:	693b      	ldr	r3, [r7, #16]
 800ef3a:	429a      	cmp	r2, r3
 800ef3c:	d3cd      	bcc.n	800eeda <JPEG_ReadInputData+0x114>
}
 800ef3e:	e024      	b.n	800ef8a <JPEG_ReadInputData+0x1c4>
        dataword = 0;
 800ef40:	2300      	movs	r3, #0
 800ef42:	617b      	str	r3, [r7, #20]
        for (index = 0; index < nb_bytes; index++)
 800ef44:	2300      	movs	r3, #0
 800ef46:	61bb      	str	r3, [r7, #24]
 800ef48:	e017      	b.n	800ef7a <JPEG_ReadInputData+0x1b4>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	699a      	ldr	r2, [r3, #24]
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	6a1b      	ldr	r3, [r3, #32]
 800ef52:	4413      	add	r3, r2
 800ef54:	781b      	ldrb	r3, [r3, #0]
 800ef56:	461a      	mov	r2, r3
 800ef58:	69bb      	ldr	r3, [r7, #24]
 800ef5a:	f003 0303 	and.w	r3, r3, #3
 800ef5e:	00db      	lsls	r3, r3, #3
 800ef60:	fa02 f303 	lsl.w	r3, r2, r3
 800ef64:	697a      	ldr	r2, [r7, #20]
 800ef66:	4313      	orrs	r3, r2
 800ef68:	617b      	str	r3, [r7, #20]
          hjpeg->JpegInCount++;
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	6a1b      	ldr	r3, [r3, #32]
 800ef6e:	1c5a      	adds	r2, r3, #1
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nb_bytes; index++)
 800ef74:	69bb      	ldr	r3, [r7, #24]
 800ef76:	3301      	adds	r3, #1
 800ef78:	61bb      	str	r3, [r7, #24]
 800ef7a:	69ba      	ldr	r2, [r7, #24]
 800ef7c:	69fb      	ldr	r3, [r7, #28]
 800ef7e:	429a      	cmp	r2, r3
 800ef80:	d3e3      	bcc.n	800ef4a <JPEG_ReadInputData+0x184>
        hjpeg->Instance->DIR = dataword;
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	681b      	ldr	r3, [r3, #0]
 800ef86:	697a      	ldr	r2, [r7, #20]
 800ef88:	641a      	str	r2, [r3, #64]	; 0x40
}
 800ef8a:	bf00      	nop
 800ef8c:	3720      	adds	r7, #32
 800ef8e:	46bd      	mov	sp, r7
 800ef90:	bd80      	pop	{r7, pc}
	...

0800ef94 <JPEG_DMA_StartProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static HAL_StatusTypeDef JPEG_DMA_StartProcess(JPEG_HandleTypeDef *hjpeg)
{
 800ef94:	b590      	push	{r4, r7, lr}
 800ef96:	b087      	sub	sp, #28
 800ef98:	af02      	add	r7, sp, #8
 800ef9a:	6078      	str	r0, [r7, #4]
  /*if the MDMA In is triggred with JPEG In FIFO Threshold flag
      then MDMA In buffer size is 32 bytes
    else (MDMA In is triggred with JPEG In FIFO not full flag)
      then MDMA In buffer size is 4 bytes
    */
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800efa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800efa2:	60fb      	str	r3, [r7, #12]
  /*if the MDMA Out is triggred with JPEG Out FIFO Threshold flag
      then MDMA out buffer size is 32 bytes
    else (MDMA Out is triggred with JPEG Out FIFO not empty flag)
      then MDMA buffer size is 4 bytes
    */
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800efa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800efaa:	60bb      	str	r3, [r7, #8]

  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800efb0:	68fa      	ldr	r2, [r7, #12]
 800efb2:	429a      	cmp	r2, r3
 800efb4:	d804      	bhi.n	800efc0 <JPEG_DMA_StartProcess+0x2c>
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800efba:	68ba      	ldr	r2, [r7, #8]
 800efbc:	429a      	cmp	r2, r3
 800efbe:	d901      	bls.n	800efc4 <JPEG_DMA_StartProcess+0x30>
  {
    return HAL_ERROR;
 800efc0:	2301      	movs	r3, #1
 800efc2:	e074      	b.n	800f0ae <JPEG_DMA_StartProcess+0x11a>
  }
  /* Set the JPEG MDMA In transfer complete callback */
  hjpeg->hdmain->XferCpltCallback = JPEG_MDMAInCpltCallback;
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800efc8:	4a3b      	ldr	r2, [pc, #236]	; (800f0b8 <JPEG_DMA_StartProcess+0x124>)
 800efca:	645a      	str	r2, [r3, #68]	; 0x44
  /* Set the MDMA In error callback */
  hjpeg->hdmain->XferErrorCallback = JPEG_MDMAErrorCallback;
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800efd0:	4a3a      	ldr	r2, [pc, #232]	; (800f0bc <JPEG_DMA_StartProcess+0x128>)
 800efd2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the JPEG MDMA Out transfer complete callback */
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800efd8:	4a39      	ldr	r2, [pc, #228]	; (800f0c0 <JPEG_DMA_StartProcess+0x12c>)
 800efda:	645a      	str	r2, [r3, #68]	; 0x44
  /* Set the MDMA In error callback */
  hjpeg->hdmaout->XferErrorCallback = JPEG_MDMAErrorCallback;
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800efe0:	4a36      	ldr	r2, [pc, #216]	; (800f0bc <JPEG_DMA_StartProcess+0x128>)
 800efe2:	655a      	str	r2, [r3, #84]	; 0x54
  /* Set the MDMA Out Abort callback */
  hjpeg->hdmaout->XferAbortCallback = JPEG_MDMAOutAbortCallback;
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800efe8:	4a36      	ldr	r2, [pc, #216]	; (800f0c4 <JPEG_DMA_StartProcess+0x130>)
 800efea:	659a      	str	r2, [r3, #88]	; 0x58

  if ((inXfrSize == 0UL) || (outXfrSize == 0UL))
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d002      	beq.n	800eff8 <JPEG_DMA_StartProcess+0x64>
 800eff2:	68bb      	ldr	r3, [r7, #8]
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d107      	bne.n	800f008 <JPEG_DMA_StartProcess+0x74>
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800effc:	f043 0204 	orr.w	r2, r3, #4
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	651a      	str	r2, [r3, #80]	; 0x50
    return HAL_ERROR;
 800f004:	2301      	movs	r3, #1
 800f006:	e052      	b.n	800f0ae <JPEG_DMA_StartProcess+0x11a>
  }
  /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f010:	68f9      	ldr	r1, [r7, #12]
 800f012:	fbb3 f1f1 	udiv	r1, r3, r1
 800f016:	68f8      	ldr	r0, [r7, #12]
 800f018:	fb00 f101 	mul.w	r1, r0, r1
 800f01c:	1a5b      	subs	r3, r3, r1
 800f01e:	1ad2      	subs	r2, r2, r3
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	629a      	str	r2, [r3, #40]	; 0x28

  /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f02c:	68b9      	ldr	r1, [r7, #8]
 800f02e:	fbb3 f1f1 	udiv	r1, r3, r1
 800f032:	68b8      	ldr	r0, [r7, #8]
 800f034:	fb00 f101 	mul.w	r1, r0, r1
 800f038:	1a5b      	subs	r3, r3, r1
 800f03a:	1ad2      	subs	r2, r2, r3
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	62da      	str	r2, [r3, #44]	; 0x2c


  /* Start MDMA FIFO Out transfer */
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	3344      	adds	r3, #68	; 0x44
 800f04a:	4619      	mov	r1, r3
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	69db      	ldr	r3, [r3, #28]
 800f050:	461c      	mov	r4, r3
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f056:	2201      	movs	r2, #1
 800f058:	9200      	str	r2, [sp, #0]
 800f05a:	4622      	mov	r2, r4
 800f05c:	f000 ff7a 	bl	800ff54 <HAL_MDMA_Start_IT>
 800f060:	4603      	mov	r3, r0
 800f062:	2b00      	cmp	r3, #0
 800f064:	d007      	beq.n	800f076 <JPEG_DMA_StartProcess+0xe2>
                        hjpeg->OutDataLength, 1) != HAL_OK)
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f06a:	f043 0204 	orr.w	r2, r3, #4
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	651a      	str	r2, [r3, #80]	; 0x50
    return HAL_ERROR;
 800f072:	2301      	movs	r3, #1
 800f074:	e01b      	b.n	800f0ae <JPEG_DMA_StartProcess+0x11a>
  }
  /* Start DMA FIFO In transfer */
  if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	699b      	ldr	r3, [r3, #24]
 800f07e:	4619      	mov	r1, r3
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	3340      	adds	r3, #64	; 0x40
 800f086:	461c      	mov	r4, r3
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f08c:	2201      	movs	r2, #1
 800f08e:	9200      	str	r2, [sp, #0]
 800f090:	4622      	mov	r2, r4
 800f092:	f000 ff5f 	bl	800ff54 <HAL_MDMA_Start_IT>
 800f096:	4603      	mov	r3, r0
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d007      	beq.n	800f0ac <JPEG_DMA_StartProcess+0x118>
                        hjpeg->InDataLength, 1) != HAL_OK)
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f0a0:	f043 0204 	orr.w	r2, r3, #4
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	651a      	str	r2, [r3, #80]	; 0x50
    return HAL_ERROR;
 800f0a8:	2301      	movs	r3, #1
 800f0aa:	e000      	b.n	800f0ae <JPEG_DMA_StartProcess+0x11a>
  }

  return HAL_OK;
 800f0ac:	2300      	movs	r3, #0
}
 800f0ae:	4618      	mov	r0, r3
 800f0b0:	3714      	adds	r7, #20
 800f0b2:	46bd      	mov	sp, r7
 800f0b4:	bd90      	pop	{r4, r7, pc}
 800f0b6:	bf00      	nop
 800f0b8:	0800f3c7 	.word	0x0800f3c7
 800f0bc:	0800f5b5 	.word	0x0800f5b5
 800f0c0:	0800f4f3 	.word	0x0800f4f3
 800f0c4:	0800f605 	.word	0x0800f605

0800f0c8 <JPEG_DMA_ContinueProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static void JPEG_DMA_ContinueProcess(JPEG_HandleTypeDef *hjpeg)
{
 800f0c8:	b580      	push	{r7, lr}
 800f0ca:	b082      	sub	sp, #8
 800f0cc:	af00      	add	r7, sp, #0
 800f0ce:	6078      	str	r0, [r7, #4]
  /*End of header processing flag rises*/
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f0d4:	f003 0303 	and.w	r3, r3, #3
 800f0d8:	2b02      	cmp	r3, #2
 800f0da:	d125      	bne.n	800f128 <JPEG_DMA_ContinueProcess+0x60>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f0e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d01e      	beq.n	800f128 <JPEG_DMA_ContinueProcess+0x60>
    {
      /*Call Header parsing complete callback */
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	3304      	adds	r3, #4
 800f0ee:	4619      	mov	r1, r3
 800f0f0:	6878      	ldr	r0, [r7, #4]
 800f0f2:	f7fe fc0b 	bl	800d90c <HAL_JPEG_GetInfo>

      /* Reset the ImageQuality */
      hjpeg->Conf.ImageQuality = 0;
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	2200      	movs	r2, #0
 800f0fa:	615a      	str	r2, [r3, #20]

      /*Call Info Ready callback */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->InfoReadyCallback(hjpeg, &hjpeg->Conf);
#else
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	3304      	adds	r3, #4
 800f100:	4619      	mov	r1, r3
 800f102:	6878      	ldr	r0, [r7, #4]
 800f104:	f7f2 fd90 	bl	8001c28 <HAL_JPEG_InfoReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	681b      	ldr	r3, [r3, #0]
 800f10c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f116:	631a      	str	r2, [r3, #48]	; 0x30

      /* Clear header processing done flag */
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	681b      	ldr	r3, [r3, #0]
 800f11c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	681b      	ldr	r3, [r3, #0]
 800f122:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f126:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  /*End of Conversion handling*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) != 0UL)
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	681b      	ldr	r3, [r3, #0]
 800f12c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f12e:	f003 0320 	and.w	r3, r3, #32
 800f132:	2b00      	cmp	r3, #0
 800f134:	d039      	beq.n	800f1aa <JPEG_DMA_ContinueProcess+0xe2>
  {

    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f13a:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	655a      	str	r2, [r3, #84]	; 0x54

    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	681b      	ldr	r3, [r3, #0]
 800f146:	681a      	ldr	r2, [r3, #0]
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	f022 0201 	bic.w	r2, r2, #1
 800f150:	601a      	str	r2, [r3, #0]

    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	681b      	ldr	r3, [r3, #0]
 800f15c:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 800f160:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear all flags */
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	681b      	ldr	r3, [r3, #0]
 800f166:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	681b      	ldr	r3, [r3, #0]
 800f16c:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800f170:	639a      	str	r2, [r3, #56]	; 0x38

    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f176:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f17a:	b2db      	uxtb	r3, r3
 800f17c:	2b02      	cmp	r3, #2
 800f17e:	d104      	bne.n	800f18a <JPEG_DMA_ContinueProcess+0xc2>
    {
      /* Stop the MDMA In Xfer*/
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmain);
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f184:	4618      	mov	r0, r3
 800f186:	f000 ffc1 	bl	801010c <HAL_MDMA_Abort_IT>
    }

    if (hjpeg->hdmaout->State == HAL_MDMA_STATE_BUSY)
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f18e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f192:	b2db      	uxtb	r3, r3
 800f194:	2b02      	cmp	r3, #2
 800f196:	d105      	bne.n	800f1a4 <JPEG_DMA_ContinueProcess+0xdc>
    {
      /* Stop the MDMA out Xfer*/
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmaout);
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f19c:	4618      	mov	r0, r3
 800f19e:	f000 ffb5 	bl	801010c <HAL_MDMA_Abort_IT>
      JPEG_DMA_EndProcess(hjpeg);
    }
  }


}
 800f1a2:	e002      	b.n	800f1aa <JPEG_DMA_ContinueProcess+0xe2>
      JPEG_DMA_EndProcess(hjpeg);
 800f1a4:	6878      	ldr	r0, [r7, #4]
 800f1a6:	f000 f804 	bl	800f1b2 <JPEG_DMA_EndProcess>
}
 800f1aa:	bf00      	nop
 800f1ac:	3708      	adds	r7, #8
 800f1ae:	46bd      	mov	sp, r7
 800f1b0:	bd80      	pop	{r7, pc}

0800f1b2 <JPEG_DMA_EndProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE
  */
static void JPEG_DMA_EndProcess(JPEG_HandleTypeDef *hjpeg)
{
 800f1b2:	b580      	push	{r7, lr}
 800f1b4:	b084      	sub	sp, #16
 800f1b6:	af00      	add	r7, sp, #0
 800f1b8:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	695b      	ldr	r3, [r3, #20]
 800f1c6:	f3c3 0310 	ubfx	r3, r3, #0, #17
 800f1ca:	1ad2      	subs	r2, r2, r3
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	625a      	str	r2, [r3, #36]	; 0x24

  /*if Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1d8:	429a      	cmp	r2, r3
 800f1da:	d10a      	bne.n	800f1f2 <JPEG_DMA_EndProcess+0x40>
  {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	69d9      	ldr	r1, [r3, #28]
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1e4:	461a      	mov	r2, r3
 800f1e6:	6878      	ldr	r0, [r7, #4]
 800f1e8:	f7f2 fdee 	bl	8001dc8 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

    hjpeg->JpegOutCount = 0;
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	2200      	movs	r2, #0
 800f1f0:	625a      	str	r2, [r3, #36]	; 0x24
  }

  /*Check if remaining data in the output FIFO*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f1f8:	f003 0310 	and.w	r3, r3, #16
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	d134      	bne.n	800f26a <JPEG_DMA_EndProcess+0xb8>
  {
    if (hjpeg->JpegOutCount > 0UL)
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f204:	2b00      	cmp	r3, #0
 800f206:	d00a      	beq.n	800f21e <JPEG_DMA_EndProcess+0x6c>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	69d9      	ldr	r1, [r3, #28]
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f210:	461a      	mov	r2, r3
 800f212:	6878      	ldr	r0, [r7, #4]
 800f214:	f7f2 fdd8 	bl	8001dc8 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	2200      	movs	r2, #0
 800f21c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	681a      	ldr	r2, [r3, #0]
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	681b      	ldr	r3, [r3, #0]
 800f228:	f022 0201 	bic.w	r2, r2, #1
 800f22c:	601a      	str	r2, [r3, #0]

    tmpContext = hjpeg->Context;
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f232:	60fb      	str	r3, [r7, #12]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f238:	f403 4282 	and.w	r2, r3, #16640	; 0x4100
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	2200      	movs	r2, #0
 800f244:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	2201      	movs	r2, #1
 800f24c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800f250:	68fb      	ldr	r3, [r7, #12]
 800f252:	f003 0303 	and.w	r3, r3, #3
 800f256:	2b02      	cmp	r3, #2
 800f258:	d103      	bne.n	800f262 <JPEG_DMA_EndProcess+0xb0>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800f25a:	6878      	ldr	r0, [r7, #4]
 800f25c:	f7f2 fe1c 	bl	8001e98 <HAL_JPEG_DecodeCpltCallback>
  else
  {
    /* Nothing to do */
  }

}
 800f260:	e00c      	b.n	800f27c <JPEG_DMA_EndProcess+0xca>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800f262:	6878      	ldr	r0, [r7, #4]
 800f264:	f7fe fdb1 	bl	800ddca <HAL_JPEG_EncodeCpltCallback>
}
 800f268:	e008      	b.n	800f27c <JPEG_DMA_EndProcess+0xca>
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f26e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f272:	2b00      	cmp	r3, #0
 800f274:	d102      	bne.n	800f27c <JPEG_DMA_EndProcess+0xca>
    JPEG_DMA_PollResidualData(hjpeg);
 800f276:	6878      	ldr	r0, [r7, #4]
 800f278:	f000 f804 	bl	800f284 <JPEG_DMA_PollResidualData>
}
 800f27c:	bf00      	nop
 800f27e:	3710      	adds	r7, #16
 800f280:	46bd      	mov	sp, r7
 800f282:	bd80      	pop	{r7, pc}

0800f284 <JPEG_DMA_PollResidualData>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None.
  */
static void JPEG_DMA_PollResidualData(JPEG_HandleTypeDef *hjpeg)
{
 800f284:	b580      	push	{r7, lr}
 800f286:	b086      	sub	sp, #24
 800f288:	af00      	add	r7, sp, #0
 800f28a:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;
  uint32_t count;
  uint32_t dataOut;

  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 800f28c:	2310      	movs	r3, #16
 800f28e:	617b      	str	r3, [r7, #20]
 800f290:	e04f      	b.n	800f332 <JPEG_DMA_PollResidualData+0xae>
  {
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f296:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d146      	bne.n	800f32c <JPEG_DMA_PollResidualData+0xa8>
    {
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	681b      	ldr	r3, [r3, #0]
 800f2a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f2a4:	f003 0310 	and.w	r3, r3, #16
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d03f      	beq.n	800f32c <JPEG_DMA_PollResidualData+0xa8>
      {
        dataOut = hjpeg->Instance->DOR;
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	681b      	ldr	r3, [r3, #0]
 800f2b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f2b2:	60fb      	str	r3, [r7, #12]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	69da      	ldr	r2, [r3, #28]
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2bc:	4413      	add	r3, r2
 800f2be:	68fa      	ldr	r2, [r7, #12]
 800f2c0:	b2d2      	uxtb	r2, r2
 800f2c2:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
 800f2c4:	68fb      	ldr	r3, [r7, #12]
 800f2c6:	0a19      	lsrs	r1, r3, #8
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	69da      	ldr	r2, [r3, #28]
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2d0:	3301      	adds	r3, #1
 800f2d2:	4413      	add	r3, r2
 800f2d4:	b2ca      	uxtb	r2, r1
 800f2d6:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 800f2d8:	68fb      	ldr	r3, [r7, #12]
 800f2da:	0c19      	lsrs	r1, r3, #16
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	69da      	ldr	r2, [r3, #28]
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2e4:	3302      	adds	r3, #2
 800f2e6:	4413      	add	r3, r2
 800f2e8:	b2ca      	uxtb	r2, r1
 800f2ea:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 800f2ec:	68fb      	ldr	r3, [r7, #12]
 800f2ee:	0e19      	lsrs	r1, r3, #24
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	69da      	ldr	r2, [r3, #28]
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2f8:	3303      	adds	r3, #3
 800f2fa:	4413      	add	r3, r2
 800f2fc:	b2ca      	uxtb	r2, r1
 800f2fe:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount += 4UL;
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f304:	1d1a      	adds	r2, r3, #4
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	625a      	str	r2, [r3, #36]	; 0x24

        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f312:	429a      	cmp	r2, r3
 800f314:	d10a      	bne.n	800f32c <JPEG_DMA_PollResidualData+0xa8>
        {
          /*Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
          hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
          HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	69d9      	ldr	r1, [r3, #28]
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f31e:	461a      	mov	r2, r3
 800f320:	6878      	ldr	r0, [r7, #4]
 800f322:	f7f2 fd51 	bl	8001dc8 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

          hjpeg->JpegOutCount = 0;
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	2200      	movs	r2, #0
 800f32a:	625a      	str	r2, [r3, #36]	; 0x24
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 800f32c:	697b      	ldr	r3, [r7, #20]
 800f32e:	3b01      	subs	r3, #1
 800f330:	617b      	str	r3, [r7, #20]
 800f332:	697b      	ldr	r3, [r7, #20]
 800f334:	2b00      	cmp	r3, #0
 800f336:	d1ac      	bne.n	800f292 <JPEG_DMA_PollResidualData+0xe>

      }
    }
  }

  tmpContext = hjpeg->Context;
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f33c:	613b      	str	r3, [r7, #16]

  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f344:	f003 0310 	and.w	r3, r3, #16
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d004      	beq.n	800f356 <JPEG_DMA_PollResidualData+0xd2>
 800f34c:	693b      	ldr	r3, [r7, #16]
 800f34e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f352:	2b00      	cmp	r3, #0
 800f354:	d133      	bne.n	800f3be <JPEG_DMA_PollResidualData+0x13a>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	681b      	ldr	r3, [r3, #0]
 800f35a:	681a      	ldr	r2, [r3, #0]
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	681b      	ldr	r3, [r3, #0]
 800f360:	f022 0201 	bic.w	r2, r2, #1
 800f364:	601a      	str	r2, [r3, #0]

    if (hjpeg->JpegOutCount > 0UL)
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d00a      	beq.n	800f384 <JPEG_DMA_PollResidualData+0x100>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	69d9      	ldr	r1, [r3, #28]
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f376:	461a      	mov	r2, r3
 800f378:	6878      	ldr	r0, [r7, #4]
 800f37a:	f7f2 fd25 	bl	8001dc8 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	2200      	movs	r2, #0
 800f382:	625a      	str	r2, [r3, #36]	; 0x24
    }

    tmpContext = hjpeg->Context;
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f388:	613b      	str	r3, [r7, #16]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f38e:	f403 4282 	and.w	r2, r3, #16640	; 0x4100
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	2200      	movs	r2, #0
 800f39a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	2201      	movs	r2, #1
 800f3a2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800f3a6:	693b      	ldr	r3, [r7, #16]
 800f3a8:	f003 0303 	and.w	r3, r3, #3
 800f3ac:	2b02      	cmp	r3, #2
 800f3ae:	d103      	bne.n	800f3b8 <JPEG_DMA_PollResidualData+0x134>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800f3b0:	6878      	ldr	r0, [r7, #4]
 800f3b2:	f7f2 fd71 	bl	8001e98 <HAL_JPEG_DecodeCpltCallback>
#else
      HAL_JPEG_EncodeCpltCallback(hjpeg);
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
    }
  }
}
 800f3b6:	e002      	b.n	800f3be <JPEG_DMA_PollResidualData+0x13a>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800f3b8:	6878      	ldr	r0, [r7, #4]
 800f3ba:	f7fe fd06 	bl	800ddca <HAL_JPEG_EncodeCpltCallback>
}
 800f3be:	bf00      	nop
 800f3c0:	3718      	adds	r7, #24
 800f3c2:	46bd      	mov	sp, r7
 800f3c4:	bd80      	pop	{r7, pc}

0800f3c6 <JPEG_MDMAInCpltCallback>:
  * @brief  MDMA input transfer complete callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAInCpltCallback(MDMA_HandleTypeDef *hmdma)
{
 800f3c6:	b590      	push	{r4, r7, lr}
 800f3c8:	b087      	sub	sp, #28
 800f3ca:	af02      	add	r7, sp, #8
 800f3cc:	6078      	str	r0, [r7, #4]
  uint32_t inXfrSize;

  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3d2:	60fb      	str	r3, [r7, #12]

  /* Disable The JPEG IT so the MDMA Input Callback can not be interrupted by the JPEG EOC IT or JPEG HPD IT */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 800f3e2:	631a      	str	r2, [r3, #48]	; 0x30

  /* Check if context method is DMA and we are not in ending DMA stage */
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) == JPEG_CONTEXT_DMA)
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f3e8:	f248 030c 	movw	r3, #32780	; 0x800c
 800f3ec:	4013      	ands	r3, r2
 800f3ee:	2b0c      	cmp	r3, #12
 800f3f0:	d17c      	bne.n	800f4ec <JPEG_MDMAInCpltCallback+0x126>
    /*if the MDMA In is triggred with JPEG In FIFO Threshold flag
      then MDMA In buffer size is 32 bytes
      else (MDMA In is triggred with JPEG In FIFO not full flag)
      then MDMA In buffer size is 4 bytes
      */
    inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 800f3f2:	68fb      	ldr	r3, [r7, #12]
 800f3f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f3f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f3f8:	60bb      	str	r3, [r7, #8]

    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800f3fa:	68fb      	ldr	r3, [r7, #12]
 800f3fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	681b      	ldr	r3, [r3, #0]
 800f402:	695b      	ldr	r3, [r3, #20]
 800f404:	f3c3 0310 	ubfx	r3, r3, #0, #17
 800f408:	1ad2      	subs	r2, r2, r3
 800f40a:	68fb      	ldr	r3, [r7, #12]
 800f40c:	621a      	str	r2, [r3, #32]

    /*Call HAL_JPEG_GetDataCallback to get new data */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->GetDataCallback(hjpeg, hjpeg->JpegInCount);
#else
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800f40e:	68fb      	ldr	r3, [r7, #12]
 800f410:	6a1b      	ldr	r3, [r3, #32]
 800f412:	4619      	mov	r1, r3
 800f414:	68f8      	ldr	r0, [r7, #12]
 800f416:	f7f2 fca3 	bl	8001d60 <HAL_JPEG_GetDataCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */


    if (hjpeg->InDataLength >= inXfrSize)
 800f41a:	68fb      	ldr	r3, [r7, #12]
 800f41c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f41e:	68ba      	ldr	r2, [r7, #8]
 800f420:	429a      	cmp	r2, r3
 800f422:	d81f      	bhi.n	800f464 <JPEG_MDMAInCpltCallback+0x9e>
    {
      if (inXfrSize == 0UL)
 800f424:	68bb      	ldr	r3, [r7, #8]
 800f426:	2b00      	cmp	r3, #0
 800f428:	d10d      	bne.n	800f446 <JPEG_MDMAInCpltCallback+0x80>
      {
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f42e:	f043 0204 	orr.w	r2, r3, #4
 800f432:	68fb      	ldr	r3, [r7, #12]
 800f434:	651a      	str	r2, [r3, #80]	; 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 800f436:	68fb      	ldr	r3, [r7, #12]
 800f438:	2206      	movs	r2, #6
 800f43a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
        hjpeg->ErrorCallback(hjpeg);
#else
        HAL_JPEG_ErrorCallback(hjpeg);
 800f43e:	68f8      	ldr	r0, [r7, #12]
 800f440:	f7f2 fd22 	bl	8001e88 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
        return;
 800f444:	e052      	b.n	800f4ec <JPEG_MDMAInCpltCallback+0x126>
      }
      /*JPEG Input MDMA transfer data number must be multiple of MDMA buffer size
        as the destination is a 32 bits register */
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f44a:	68fb      	ldr	r3, [r7, #12]
 800f44c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f44e:	68b9      	ldr	r1, [r7, #8]
 800f450:	fbb3 f1f1 	udiv	r1, r3, r1
 800f454:	68b8      	ldr	r0, [r7, #8]
 800f456:	fb00 f101 	mul.w	r1, r0, r1
 800f45a:	1a5b      	subs	r3, r3, r1
 800f45c:	1ad2      	subs	r2, r2, r3
 800f45e:	68fb      	ldr	r3, [r7, #12]
 800f460:	629a      	str	r2, [r3, #40]	; 0x28
 800f462:	e010      	b.n	800f486 <JPEG_MDMAInCpltCallback+0xc0>

    }
    else if (hjpeg->InDataLength > 0UL)
 800f464:	68fb      	ldr	r3, [r7, #12]
 800f466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f468:	2b00      	cmp	r3, #0
 800f46a:	d00c      	beq.n	800f486 <JPEG_MDMAInCpltCallback+0xc0>
    {
      /* Transfer the remaining Data, must be multiple of source data size (byte) and destination data size (word) */
      if ((hjpeg->InDataLength % 4UL) != 0UL)
 800f46c:	68fb      	ldr	r3, [r7, #12]
 800f46e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f470:	f003 0303 	and.w	r3, r3, #3
 800f474:	2b00      	cmp	r3, #0
 800f476:	d006      	beq.n	800f486 <JPEG_MDMAInCpltCallback+0xc0>
      {
        hjpeg->InDataLength = ((hjpeg->InDataLength / 4UL) + 1UL) * 4UL;
 800f478:	68fb      	ldr	r3, [r7, #12]
 800f47a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f47c:	089b      	lsrs	r3, r3, #2
 800f47e:	3301      	adds	r3, #1
 800f480:	009a      	lsls	r2, r3, #2
 800f482:	68fb      	ldr	r3, [r7, #12]
 800f484:	629a      	str	r2, [r3, #40]	; 0x28
    else
    {
      /* Nothing to do */
    }

    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 800f486:	68fb      	ldr	r3, [r7, #12]
 800f488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f48a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d124      	bne.n	800f4dc <JPEG_MDMAInCpltCallback+0x116>
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f496:	2b00      	cmp	r3, #0
 800f498:	d020      	beq.n	800f4dc <JPEG_MDMAInCpltCallback+0x116>
    {
      /* Start MDMA FIFO In transfer */
      if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800f49a:	68fb      	ldr	r3, [r7, #12]
 800f49c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800f49e:	68fb      	ldr	r3, [r7, #12]
 800f4a0:	699b      	ldr	r3, [r3, #24]
 800f4a2:	4619      	mov	r1, r3
 800f4a4:	68fb      	ldr	r3, [r7, #12]
 800f4a6:	681b      	ldr	r3, [r3, #0]
 800f4a8:	3340      	adds	r3, #64	; 0x40
 800f4aa:	461c      	mov	r4, r3
 800f4ac:	68fb      	ldr	r3, [r7, #12]
 800f4ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f4b0:	2201      	movs	r2, #1
 800f4b2:	9200      	str	r2, [sp, #0]
 800f4b4:	4622      	mov	r2, r4
 800f4b6:	f000 fd4d 	bl	800ff54 <HAL_MDMA_Start_IT>
 800f4ba:	4603      	mov	r3, r0
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d00d      	beq.n	800f4dc <JPEG_MDMAInCpltCallback+0x116>
                            hjpeg->InDataLength, 1) != HAL_OK)
      {
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800f4c0:	68fb      	ldr	r3, [r7, #12]
 800f4c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f4c4:	f043 0204 	orr.w	r2, r3, #4
 800f4c8:	68fb      	ldr	r3, [r7, #12]
 800f4ca:	651a      	str	r2, [r3, #80]	; 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 800f4cc:	68fb      	ldr	r3, [r7, #12]
 800f4ce:	2206      	movs	r2, #6
 800f4d0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
        hjpeg->ErrorCallback(hjpeg);
#else
        HAL_JPEG_ErrorCallback(hjpeg);
 800f4d4:	68f8      	ldr	r0, [r7, #12]
 800f4d6:	f7f2 fcd7 	bl	8001e88 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
        return;
 800f4da:	e007      	b.n	800f4ec <JPEG_MDMAInCpltCallback+0x126>
      }
    }

    /* JPEG Conversion still on going : Enable the JPEG IT */
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800f4dc:	68fb      	ldr	r3, [r7, #12]
 800f4de:	681b      	ldr	r3, [r3, #0]
 800f4e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f4e2:	68fb      	ldr	r3, [r7, #12]
 800f4e4:	681b      	ldr	r3, [r3, #0]
 800f4e6:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800f4ea:	631a      	str	r2, [r3, #48]	; 0x30
  }
}
 800f4ec:	3714      	adds	r7, #20
 800f4ee:	46bd      	mov	sp, r7
 800f4f0:	bd90      	pop	{r4, r7, pc}

0800f4f2 <JPEG_MDMAOutCpltCallback>:
  * @brief  MDMA output transfer complete callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAOutCpltCallback(MDMA_HandleTypeDef *hmdma)
{
 800f4f2:	b590      	push	{r4, r7, lr}
 800f4f4:	b087      	sub	sp, #28
 800f4f6:	af02      	add	r7, sp, #8
 800f4f8:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f4fe:	60fb      	str	r3, [r7, #12]


  /* Disable The JPEG IT so the MDMA Output Callback can not be interrupted by the JPEG EOC IT or JPEG HPD IT */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800f500:	68fb      	ldr	r3, [r7, #12]
 800f502:	681b      	ldr	r3, [r3, #0]
 800f504:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f506:	68fb      	ldr	r3, [r7, #12]
 800f508:	681b      	ldr	r3, [r3, #0]
 800f50a:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 800f50e:	631a      	str	r2, [r3, #48]	; 0x30

  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
 800f510:	68fb      	ldr	r3, [r7, #12]
 800f512:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f514:	f248 030c 	movw	r3, #32780	; 0x800c
 800f518:	4013      	ands	r3, r2
 800f51a:	2b0c      	cmp	r3, #12
 800f51c:	d147      	bne.n	800f5ae <JPEG_MDMAOutCpltCallback+0xbc>
      JPEG_CONTEXT_DMA) /* Check if context method is DMA and we are not in ending DMA stage */
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) == 0UL)
 800f51e:	68fb      	ldr	r3, [r7, #12]
 800f520:	681b      	ldr	r3, [r3, #0]
 800f522:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f524:	f003 0320 	and.w	r3, r3, #32
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d138      	bne.n	800f59e <JPEG_MDMAOutCpltCallback+0xac>
    {
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800f52c:	68fb      	ldr	r3, [r7, #12]
 800f52e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	681b      	ldr	r3, [r3, #0]
 800f534:	695b      	ldr	r3, [r3, #20]
 800f536:	f3c3 0310 	ubfx	r3, r3, #0, #17
 800f53a:	1ad2      	subs	r2, r2, r3
 800f53c:	68fb      	ldr	r3, [r7, #12]
 800f53e:	625a      	str	r2, [r3, #36]	; 0x24

      /*Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800f540:	68fb      	ldr	r3, [r7, #12]
 800f542:	69d9      	ldr	r1, [r3, #28]
 800f544:	68fb      	ldr	r3, [r7, #12]
 800f546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f548:	461a      	mov	r2, r3
 800f54a:	68f8      	ldr	r0, [r7, #12]
 800f54c:	f7f2 fc3c 	bl	8001dc8 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800f550:	68fb      	ldr	r3, [r7, #12]
 800f552:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f554:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f558:	2b00      	cmp	r3, #0
 800f55a:	d120      	bne.n	800f59e <JPEG_MDMAOutCpltCallback+0xac>
      {
        /* Start MDMA FIFO Out transfer */
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800f55c:	68fb      	ldr	r3, [r7, #12]
 800f55e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	681b      	ldr	r3, [r3, #0]
 800f564:	3344      	adds	r3, #68	; 0x44
 800f566:	4619      	mov	r1, r3
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	69db      	ldr	r3, [r3, #28]
 800f56c:	461c      	mov	r4, r3
 800f56e:	68fb      	ldr	r3, [r7, #12]
 800f570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f572:	2201      	movs	r2, #1
 800f574:	9200      	str	r2, [sp, #0]
 800f576:	4622      	mov	r2, r4
 800f578:	f000 fcec 	bl	800ff54 <HAL_MDMA_Start_IT>
 800f57c:	4603      	mov	r3, r0
 800f57e:	2b00      	cmp	r3, #0
 800f580:	d00d      	beq.n	800f59e <JPEG_MDMAOutCpltCallback+0xac>
                              hjpeg->OutDataLength, 1) != HAL_OK)
        {
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800f582:	68fb      	ldr	r3, [r7, #12]
 800f584:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f586:	f043 0204 	orr.w	r2, r3, #4
 800f58a:	68fb      	ldr	r3, [r7, #12]
 800f58c:	651a      	str	r2, [r3, #80]	; 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 800f58e:	68fb      	ldr	r3, [r7, #12]
 800f590:	2206      	movs	r2, #6
 800f592:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
          hjpeg->ErrorCallback(hjpeg);
#else
          HAL_JPEG_ErrorCallback(hjpeg);
 800f596:	68f8      	ldr	r0, [r7, #12]
 800f598:	f7f2 fc76 	bl	8001e88 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
          return;
 800f59c:	e007      	b.n	800f5ae <JPEG_MDMAOutCpltCallback+0xbc>
        }
      }
    }

    /* JPEG Conversion still on going : Enable the JPEG IT */
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800f59e:	68fb      	ldr	r3, [r7, #12]
 800f5a0:	681b      	ldr	r3, [r3, #0]
 800f5a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f5a4:	68fb      	ldr	r3, [r7, #12]
 800f5a6:	681b      	ldr	r3, [r3, #0]
 800f5a8:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800f5ac:	631a      	str	r2, [r3, #48]	; 0x30
  }

}
 800f5ae:	3714      	adds	r7, #20
 800f5b0:	46bd      	mov	sp, r7
 800f5b2:	bd90      	pop	{r4, r7, pc}

0800f5b4 <JPEG_MDMAErrorCallback>:
  * @brief  MDMA Transfer error callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAErrorCallback(MDMA_HandleTypeDef *hmdma)
{
 800f5b4:	b580      	push	{r7, lr}
 800f5b6:	b084      	sub	sp, #16
 800f5b8:	af00      	add	r7, sp, #0
 800f5ba:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f5c0:	60fb      	str	r3, [r7, #12]

  /*Stop Encoding/Decoding*/
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800f5c2:	68fb      	ldr	r3, [r7, #12]
 800f5c4:	681b      	ldr	r3, [r3, #0]
 800f5c6:	681a      	ldr	r2, [r3, #0]
 800f5c8:	68fb      	ldr	r3, [r7, #12]
 800f5ca:	681b      	ldr	r3, [r3, #0]
 800f5cc:	f022 0201 	bic.w	r2, r2, #1
 800f5d0:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800f5d2:	68fb      	ldr	r3, [r7, #12]
 800f5d4:	681b      	ldr	r3, [r3, #0]
 800f5d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f5d8:	68fb      	ldr	r3, [r7, #12]
 800f5da:	681b      	ldr	r3, [r3, #0]
 800f5dc:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 800f5e0:	631a      	str	r2, [r3, #48]	; 0x30

  hjpeg->State = HAL_JPEG_STATE_READY;
 800f5e2:	68fb      	ldr	r3, [r7, #12]
 800f5e4:	2201      	movs	r2, #1
 800f5e6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
  hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800f5ea:	68fb      	ldr	r3, [r7, #12]
 800f5ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f5ee:	f043 0204 	orr.w	r2, r3, #4
 800f5f2:	68fb      	ldr	r3, [r7, #12]
 800f5f4:	651a      	str	r2, [r3, #80]	; 0x50

#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
  hjpeg->ErrorCallback(hjpeg);
#else
  HAL_JPEG_ErrorCallback(hjpeg);
 800f5f6:	68f8      	ldr	r0, [r7, #12]
 800f5f8:	f7f2 fc46 	bl	8001e88 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
}
 800f5fc:	bf00      	nop
 800f5fe:	3710      	adds	r7, #16
 800f600:	46bd      	mov	sp, r7
 800f602:	bd80      	pop	{r7, pc}

0800f604 <JPEG_MDMAOutAbortCallback>:
  * @brief  MDMA output Abort callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAOutAbortCallback(MDMA_HandleTypeDef *hmdma)
{
 800f604:	b580      	push	{r7, lr}
 800f606:	b084      	sub	sp, #16
 800f608:	af00      	add	r7, sp, #0
 800f60a:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f610:	60fb      	str	r3, [r7, #12]

  if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 800f612:	68fb      	ldr	r3, [r7, #12]
 800f614:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f616:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f61a:	2b00      	cmp	r3, #0
 800f61c:	d002      	beq.n	800f624 <JPEG_MDMAOutAbortCallback+0x20>
  {
    JPEG_DMA_EndProcess(hjpeg);
 800f61e:	68f8      	ldr	r0, [r7, #12]
 800f620:	f7ff fdc7 	bl	800f1b2 <JPEG_DMA_EndProcess>
  }
}
 800f624:	bf00      	nop
 800f626:	3710      	adds	r7, #16
 800f628:	46bd      	mov	sp, r7
 800f62a:	bd80      	pop	{r7, pc}

0800f62c <JPEG_GetQuality>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG image quality from 1 to 100.
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
 800f62c:	b480      	push	{r7}
 800f62e:	b08b      	sub	sp, #44	; 0x2c
 800f630:	af00      	add	r7, sp, #0
 800f632:	6078      	str	r0, [r7, #4]
  uint32_t quality = 0;
 800f634:	2300      	movs	r3, #0
 800f636:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	3350      	adds	r3, #80	; 0x50
 800f63e:	61bb      	str	r3, [r7, #24]

  i = 0;
 800f640:	2300      	movs	r3, #0
 800f642:	623b      	str	r3, [r7, #32]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 800f644:	e042      	b.n	800f6cc <JPEG_GetQuality+0xa0>
  {
    quantRow = *tableAddress;
 800f646:	69bb      	ldr	r3, [r7, #24]
 800f648:	681b      	ldr	r3, [r3, #0]
 800f64a:	617b      	str	r3, [r7, #20]
    for (j = 0; j < 4UL; j++)
 800f64c:	2300      	movs	r3, #0
 800f64e:	61fb      	str	r3, [r7, #28]
 800f650:	e033      	b.n	800f6ba <JPEG_GetQuality+0x8e>
    {
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 800f652:	69fb      	ldr	r3, [r7, #28]
 800f654:	00db      	lsls	r3, r3, #3
 800f656:	697a      	ldr	r2, [r7, #20]
 800f658:	fa22 f303 	lsr.w	r3, r2, r3
 800f65c:	b2db      	uxtb	r3, r3
 800f65e:	613b      	str	r3, [r7, #16]
      if (quantVal == 1UL)
 800f660:	693b      	ldr	r3, [r7, #16]
 800f662:	2b01      	cmp	r3, #1
 800f664:	d103      	bne.n	800f66e <JPEG_GetQuality+0x42>
      {
        /* if Quantization value = 1 then quality is 100%*/
        quality += 100UL;
 800f666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f668:	3364      	adds	r3, #100	; 0x64
 800f66a:	627b      	str	r3, [r7, #36]	; 0x24
 800f66c:	e022      	b.n	800f6b4 <JPEG_GetQuality+0x88>
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 800f66e:	693b      	ldr	r3, [r7, #16]
 800f670:	2264      	movs	r2, #100	; 0x64
 800f672:	fb02 f303 	mul.w	r3, r2, r3
 800f676:	687a      	ldr	r2, [r7, #4]
 800f678:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800f67a:	6a38      	ldr	r0, [r7, #32]
 800f67c:	69f9      	ldr	r1, [r7, #28]
 800f67e:	4401      	add	r1, r0
 800f680:	4818      	ldr	r0, [pc, #96]	; (800f6e4 <JPEG_GetQuality+0xb8>)
 800f682:	5c41      	ldrb	r1, [r0, r1]
 800f684:	440a      	add	r2, r1
 800f686:	7812      	ldrb	r2, [r2, #0]
 800f688:	fbb3 f3f2 	udiv	r3, r3, r2
 800f68c:	60fb      	str	r3, [r7, #12]

        if (scale <= 100UL)
 800f68e:	68fb      	ldr	r3, [r7, #12]
 800f690:	2b64      	cmp	r3, #100	; 0x64
 800f692:	d807      	bhi.n	800f6a4 <JPEG_GetQuality+0x78>
        {
          quality += (200UL - scale) / 2UL;
 800f694:	68fb      	ldr	r3, [r7, #12]
 800f696:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 800f69a:	085b      	lsrs	r3, r3, #1
 800f69c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f69e:	4413      	add	r3, r2
 800f6a0:	627b      	str	r3, [r7, #36]	; 0x24
 800f6a2:	e007      	b.n	800f6b4 <JPEG_GetQuality+0x88>
        }
        else
        {
          quality += 5000UL / scale;
 800f6a4:	f241 3288 	movw	r2, #5000	; 0x1388
 800f6a8:	68fb      	ldr	r3, [r7, #12]
 800f6aa:	fbb2 f3f3 	udiv	r3, r2, r3
 800f6ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f6b0:	4413      	add	r3, r2
 800f6b2:	627b      	str	r3, [r7, #36]	; 0x24
    for (j = 0; j < 4UL; j++)
 800f6b4:	69fb      	ldr	r3, [r7, #28]
 800f6b6:	3301      	adds	r3, #1
 800f6b8:	61fb      	str	r3, [r7, #28]
 800f6ba:	69fb      	ldr	r3, [r7, #28]
 800f6bc:	2b03      	cmp	r3, #3
 800f6be:	d9c8      	bls.n	800f652 <JPEG_GetQuality+0x26>
        }
      }
    }

    i += 4UL;
 800f6c0:	6a3b      	ldr	r3, [r7, #32]
 800f6c2:	3304      	adds	r3, #4
 800f6c4:	623b      	str	r3, [r7, #32]
    tableAddress ++;
 800f6c6:	69bb      	ldr	r3, [r7, #24]
 800f6c8:	3304      	adds	r3, #4
 800f6ca:	61bb      	str	r3, [r7, #24]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 800f6cc:	6a3b      	ldr	r3, [r7, #32]
 800f6ce:	2b3c      	cmp	r3, #60	; 0x3c
 800f6d0:	d9b9      	bls.n	800f646 <JPEG_GetQuality+0x1a>
  }

  return (quality / 64UL);
 800f6d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6d4:	099b      	lsrs	r3, r3, #6
}
 800f6d6:	4618      	mov	r0, r3
 800f6d8:	372c      	adds	r7, #44	; 0x2c
 800f6da:	46bd      	mov	sp, r7
 800f6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6e0:	4770      	bx	lr
 800f6e2:	bf00      	nop
 800f6e4:	0802a578 	.word	0x0802a578

0800f6e8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800f6e8:	b580      	push	{r7, lr}
 800f6ea:	b084      	sub	sp, #16
 800f6ec:	af00      	add	r7, sp, #0
 800f6ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d101      	bne.n	800f6fa <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800f6f6:	2301      	movs	r3, #1
 800f6f8:	e0bf      	b.n	800f87a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800f700:	b2db      	uxtb	r3, r3
 800f702:	2b00      	cmp	r3, #0
 800f704:	d106      	bne.n	800f714 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	2200      	movs	r2, #0
 800f70a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800f70e:	6878      	ldr	r0, [r7, #4]
 800f710:	f7f7 fa70 	bl	8006bf4 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	2202      	movs	r2, #2
 800f718:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	699a      	ldr	r2, [r3, #24]
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800f72a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	681b      	ldr	r3, [r3, #0]
 800f730:	6999      	ldr	r1, [r3, #24]
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	685a      	ldr	r2, [r3, #4]
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	689b      	ldr	r3, [r3, #8]
 800f73a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800f740:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	691b      	ldr	r3, [r3, #16]
 800f746:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	681b      	ldr	r3, [r3, #0]
 800f74c:	430a      	orrs	r2, r1
 800f74e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	681b      	ldr	r3, [r3, #0]
 800f754:	6899      	ldr	r1, [r3, #8]
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	681a      	ldr	r2, [r3, #0]
 800f75a:	4b4a      	ldr	r3, [pc, #296]	; (800f884 <HAL_LTDC_Init+0x19c>)
 800f75c:	400b      	ands	r3, r1
 800f75e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	695b      	ldr	r3, [r3, #20]
 800f764:	041b      	lsls	r3, r3, #16
 800f766:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	681b      	ldr	r3, [r3, #0]
 800f76c:	6899      	ldr	r1, [r3, #8]
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	699a      	ldr	r2, [r3, #24]
 800f772:	68fb      	ldr	r3, [r7, #12]
 800f774:	431a      	orrs	r2, r3
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	681b      	ldr	r3, [r3, #0]
 800f77a:	430a      	orrs	r2, r1
 800f77c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	681b      	ldr	r3, [r3, #0]
 800f782:	68d9      	ldr	r1, [r3, #12]
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	681a      	ldr	r2, [r3, #0]
 800f788:	4b3e      	ldr	r3, [pc, #248]	; (800f884 <HAL_LTDC_Init+0x19c>)
 800f78a:	400b      	ands	r3, r1
 800f78c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	69db      	ldr	r3, [r3, #28]
 800f792:	041b      	lsls	r3, r3, #16
 800f794:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	681b      	ldr	r3, [r3, #0]
 800f79a:	68d9      	ldr	r1, [r3, #12]
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	6a1a      	ldr	r2, [r3, #32]
 800f7a0:	68fb      	ldr	r3, [r7, #12]
 800f7a2:	431a      	orrs	r2, r3
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	681b      	ldr	r3, [r3, #0]
 800f7a8:	430a      	orrs	r2, r1
 800f7aa:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	681b      	ldr	r3, [r3, #0]
 800f7b0:	6919      	ldr	r1, [r3, #16]
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	681a      	ldr	r2, [r3, #0]
 800f7b6:	4b33      	ldr	r3, [pc, #204]	; (800f884 <HAL_LTDC_Init+0x19c>)
 800f7b8:	400b      	ands	r3, r1
 800f7ba:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7c0:	041b      	lsls	r3, r3, #16
 800f7c2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	681b      	ldr	r3, [r3, #0]
 800f7c8:	6919      	ldr	r1, [r3, #16]
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f7ce:	68fb      	ldr	r3, [r7, #12]
 800f7d0:	431a      	orrs	r2, r3
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	681b      	ldr	r3, [r3, #0]
 800f7d6:	430a      	orrs	r2, r1
 800f7d8:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	681b      	ldr	r3, [r3, #0]
 800f7de:	6959      	ldr	r1, [r3, #20]
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	681a      	ldr	r2, [r3, #0]
 800f7e4:	4b27      	ldr	r3, [pc, #156]	; (800f884 <HAL_LTDC_Init+0x19c>)
 800f7e6:	400b      	ands	r3, r1
 800f7e8:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f7ee:	041b      	lsls	r3, r3, #16
 800f7f0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	681b      	ldr	r3, [r3, #0]
 800f7f6:	6959      	ldr	r1, [r3, #20]
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f7fc:	68fb      	ldr	r3, [r7, #12]
 800f7fe:	431a      	orrs	r2, r3
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	681b      	ldr	r3, [r3, #0]
 800f804:	430a      	orrs	r2, r1
 800f806:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800f80e:	021b      	lsls	r3, r3, #8
 800f810:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800f818:	041b      	lsls	r3, r3, #16
 800f81a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	681b      	ldr	r3, [r3, #0]
 800f820:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	681b      	ldr	r3, [r3, #0]
 800f826:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800f82a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	681b      	ldr	r3, [r3, #0]
 800f830:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800f832:	68ba      	ldr	r2, [r7, #8]
 800f834:	68fb      	ldr	r3, [r7, #12]
 800f836:	4313      	orrs	r3, r2
 800f838:	687a      	ldr	r2, [r7, #4]
 800f83a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800f83e:	431a      	orrs	r2, r3
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	681b      	ldr	r3, [r3, #0]
 800f844:	430a      	orrs	r2, r1
 800f846:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	681b      	ldr	r3, [r3, #0]
 800f84c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	681b      	ldr	r3, [r3, #0]
 800f852:	f042 0206 	orr.w	r2, r2, #6
 800f856:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	681b      	ldr	r3, [r3, #0]
 800f85c:	699a      	ldr	r2, [r3, #24]
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	681b      	ldr	r3, [r3, #0]
 800f862:	f042 0201 	orr.w	r2, r2, #1
 800f866:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	2200      	movs	r2, #0
 800f86c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	2201      	movs	r2, #1
 800f874:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800f878:	2300      	movs	r3, #0
}
 800f87a:	4618      	mov	r0, r3
 800f87c:	3710      	adds	r7, #16
 800f87e:	46bd      	mov	sp, r7
 800f880:	bd80      	pop	{r7, pc}
 800f882:	bf00      	nop
 800f884:	f000f800 	.word	0xf000f800

0800f888 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800f888:	b580      	push	{r7, lr}
 800f88a:	b084      	sub	sp, #16
 800f88c:	af00      	add	r7, sp, #0
 800f88e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f896:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	681b      	ldr	r3, [r3, #0]
 800f89c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f89e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800f8a0:	68fb      	ldr	r3, [r7, #12]
 800f8a2:	f003 0304 	and.w	r3, r3, #4
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	d023      	beq.n	800f8f2 <HAL_LTDC_IRQHandler+0x6a>
 800f8aa:	68bb      	ldr	r3, [r7, #8]
 800f8ac:	f003 0304 	and.w	r3, r3, #4
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	d01e      	beq.n	800f8f2 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	681b      	ldr	r3, [r3, #0]
 800f8be:	f022 0204 	bic.w	r2, r2, #4
 800f8c2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	681b      	ldr	r3, [r3, #0]
 800f8c8:	2204      	movs	r2, #4
 800f8ca:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800f8d2:	f043 0201 	orr.w	r2, r3, #1
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	2204      	movs	r2, #4
 800f8e0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	2200      	movs	r2, #0
 800f8e8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800f8ec:	6878      	ldr	r0, [r7, #4]
 800f8ee:	f000 f86f 	bl	800f9d0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800f8f2:	68fb      	ldr	r3, [r7, #12]
 800f8f4:	f003 0302 	and.w	r3, r3, #2
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d023      	beq.n	800f944 <HAL_LTDC_IRQHandler+0xbc>
 800f8fc:	68bb      	ldr	r3, [r7, #8]
 800f8fe:	f003 0302 	and.w	r3, r3, #2
 800f902:	2b00      	cmp	r3, #0
 800f904:	d01e      	beq.n	800f944 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	681b      	ldr	r3, [r3, #0]
 800f90a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	681b      	ldr	r3, [r3, #0]
 800f910:	f022 0202 	bic.w	r2, r2, #2
 800f914:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	681b      	ldr	r3, [r3, #0]
 800f91a:	2202      	movs	r2, #2
 800f91c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800f924:	f043 0202 	orr.w	r2, r3, #2
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	2204      	movs	r2, #4
 800f932:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	2200      	movs	r2, #0
 800f93a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800f93e:	6878      	ldr	r0, [r7, #4]
 800f940:	f000 f846 	bl	800f9d0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800f944:	68fb      	ldr	r3, [r7, #12]
 800f946:	f003 0301 	and.w	r3, r3, #1
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d01b      	beq.n	800f986 <HAL_LTDC_IRQHandler+0xfe>
 800f94e:	68bb      	ldr	r3, [r7, #8]
 800f950:	f003 0301 	and.w	r3, r3, #1
 800f954:	2b00      	cmp	r3, #0
 800f956:	d016      	beq.n	800f986 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	681b      	ldr	r3, [r3, #0]
 800f95c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	681b      	ldr	r3, [r3, #0]
 800f962:	f022 0201 	bic.w	r2, r2, #1
 800f966:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	681b      	ldr	r3, [r3, #0]
 800f96c:	2201      	movs	r2, #1
 800f96e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	2201      	movs	r2, #1
 800f974:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	2200      	movs	r2, #0
 800f97c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800f980:	6878      	ldr	r0, [r7, #4]
 800f982:	f7f4 fdaf 	bl	80044e4 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800f986:	68fb      	ldr	r3, [r7, #12]
 800f988:	f003 0308 	and.w	r3, r3, #8
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	d01b      	beq.n	800f9c8 <HAL_LTDC_IRQHandler+0x140>
 800f990:	68bb      	ldr	r3, [r7, #8]
 800f992:	f003 0308 	and.w	r3, r3, #8
 800f996:	2b00      	cmp	r3, #0
 800f998:	d016      	beq.n	800f9c8 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	681b      	ldr	r3, [r3, #0]
 800f99e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	681b      	ldr	r3, [r3, #0]
 800f9a4:	f022 0208 	bic.w	r2, r2, #8
 800f9a8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	681b      	ldr	r3, [r3, #0]
 800f9ae:	2208      	movs	r2, #8
 800f9b0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	2201      	movs	r2, #1
 800f9b6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	2200      	movs	r2, #0
 800f9be:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800f9c2:	6878      	ldr	r0, [r7, #4]
 800f9c4:	f000 f80e 	bl	800f9e4 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800f9c8:	bf00      	nop
 800f9ca:	3710      	adds	r7, #16
 800f9cc:	46bd      	mov	sp, r7
 800f9ce:	bd80      	pop	{r7, pc}

0800f9d0 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800f9d0:	b480      	push	{r7}
 800f9d2:	b083      	sub	sp, #12
 800f9d4:	af00      	add	r7, sp, #0
 800f9d6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800f9d8:	bf00      	nop
 800f9da:	370c      	adds	r7, #12
 800f9dc:	46bd      	mov	sp, r7
 800f9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9e2:	4770      	bx	lr

0800f9e4 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800f9e4:	b480      	push	{r7}
 800f9e6:	b083      	sub	sp, #12
 800f9e8:	af00      	add	r7, sp, #0
 800f9ea:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800f9ec:	bf00      	nop
 800f9ee:	370c      	adds	r7, #12
 800f9f0:	46bd      	mov	sp, r7
 800f9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9f6:	4770      	bx	lr

0800f9f8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800f9f8:	b5b0      	push	{r4, r5, r7, lr}
 800f9fa:	b084      	sub	sp, #16
 800f9fc:	af00      	add	r7, sp, #0
 800f9fe:	60f8      	str	r0, [r7, #12]
 800fa00:	60b9      	str	r1, [r7, #8]
 800fa02:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800fa0a:	2b01      	cmp	r3, #1
 800fa0c:	d101      	bne.n	800fa12 <HAL_LTDC_ConfigLayer+0x1a>
 800fa0e:	2302      	movs	r3, #2
 800fa10:	e02c      	b.n	800fa6c <HAL_LTDC_ConfigLayer+0x74>
 800fa12:	68fb      	ldr	r3, [r7, #12]
 800fa14:	2201      	movs	r2, #1
 800fa16:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800fa1a:	68fb      	ldr	r3, [r7, #12]
 800fa1c:	2202      	movs	r2, #2
 800fa1e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800fa22:	68fa      	ldr	r2, [r7, #12]
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	2134      	movs	r1, #52	; 0x34
 800fa28:	fb01 f303 	mul.w	r3, r1, r3
 800fa2c:	4413      	add	r3, r2
 800fa2e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800fa32:	68bb      	ldr	r3, [r7, #8]
 800fa34:	4614      	mov	r4, r2
 800fa36:	461d      	mov	r5, r3
 800fa38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fa3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fa3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fa3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fa40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fa42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fa44:	682b      	ldr	r3, [r5, #0]
 800fa46:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800fa48:	687a      	ldr	r2, [r7, #4]
 800fa4a:	68b9      	ldr	r1, [r7, #8]
 800fa4c:	68f8      	ldr	r0, [r7, #12]
 800fa4e:	f000 f849 	bl	800fae4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800fa52:	68fb      	ldr	r3, [r7, #12]
 800fa54:	681b      	ldr	r3, [r3, #0]
 800fa56:	2201      	movs	r2, #1
 800fa58:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800fa5a:	68fb      	ldr	r3, [r7, #12]
 800fa5c:	2201      	movs	r2, #1
 800fa5e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800fa62:	68fb      	ldr	r3, [r7, #12]
 800fa64:	2200      	movs	r2, #0
 800fa66:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800fa6a:	2300      	movs	r3, #0
}
 800fa6c:	4618      	mov	r0, r3
 800fa6e:	3710      	adds	r7, #16
 800fa70:	46bd      	mov	sp, r7
 800fa72:	bdb0      	pop	{r4, r5, r7, pc}

0800fa74 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 800fa74:	b480      	push	{r7}
 800fa76:	b083      	sub	sp, #12
 800fa78:	af00      	add	r7, sp, #0
 800fa7a:	6078      	str	r0, [r7, #4]
 800fa7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800fa84:	2b01      	cmp	r3, #1
 800fa86:	d101      	bne.n	800fa8c <HAL_LTDC_ProgramLineEvent+0x18>
 800fa88:	2302      	movs	r3, #2
 800fa8a:	e023      	b.n	800fad4 <HAL_LTDC_ProgramLineEvent+0x60>
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	2201      	movs	r2, #1
 800fa90:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	2202      	movs	r2, #2
 800fa98:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	681b      	ldr	r3, [r3, #0]
 800faa0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	681b      	ldr	r3, [r3, #0]
 800faa6:	f022 0201 	bic.w	r2, r2, #1
 800faaa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 800faac:	4a0c      	ldr	r2, [pc, #48]	; (800fae0 <HAL_LTDC_ProgramLineEvent+0x6c>)
 800faae:	683b      	ldr	r3, [r7, #0]
 800fab0:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	681b      	ldr	r3, [r3, #0]
 800fab6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	f042 0201 	orr.w	r2, r2, #1
 800fac0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	2201      	movs	r2, #1
 800fac6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	2200      	movs	r2, #0
 800face:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800fad2:	2300      	movs	r3, #0
}
 800fad4:	4618      	mov	r0, r3
 800fad6:	370c      	adds	r7, #12
 800fad8:	46bd      	mov	sp, r7
 800fada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fade:	4770      	bx	lr
 800fae0:	50001000 	.word	0x50001000

0800fae4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800fae4:	b480      	push	{r7}
 800fae6:	b089      	sub	sp, #36	; 0x24
 800fae8:	af00      	add	r7, sp, #0
 800faea:	60f8      	str	r0, [r7, #12]
 800faec:	60b9      	str	r1, [r7, #8]
 800faee:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800faf0:	68bb      	ldr	r3, [r7, #8]
 800faf2:	685a      	ldr	r2, [r3, #4]
 800faf4:	68fb      	ldr	r3, [r7, #12]
 800faf6:	681b      	ldr	r3, [r3, #0]
 800faf8:	68db      	ldr	r3, [r3, #12]
 800fafa:	0c1b      	lsrs	r3, r3, #16
 800fafc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800fb00:	4413      	add	r3, r2
 800fb02:	041b      	lsls	r3, r3, #16
 800fb04:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800fb06:	68fb      	ldr	r3, [r7, #12]
 800fb08:	681b      	ldr	r3, [r3, #0]
 800fb0a:	461a      	mov	r2, r3
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	01db      	lsls	r3, r3, #7
 800fb10:	4413      	add	r3, r2
 800fb12:	3384      	adds	r3, #132	; 0x84
 800fb14:	685b      	ldr	r3, [r3, #4]
 800fb16:	68fa      	ldr	r2, [r7, #12]
 800fb18:	6812      	ldr	r2, [r2, #0]
 800fb1a:	4611      	mov	r1, r2
 800fb1c:	687a      	ldr	r2, [r7, #4]
 800fb1e:	01d2      	lsls	r2, r2, #7
 800fb20:	440a      	add	r2, r1
 800fb22:	3284      	adds	r2, #132	; 0x84
 800fb24:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800fb28:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800fb2a:	68bb      	ldr	r3, [r7, #8]
 800fb2c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800fb2e:	68fb      	ldr	r3, [r7, #12]
 800fb30:	681b      	ldr	r3, [r3, #0]
 800fb32:	68db      	ldr	r3, [r3, #12]
 800fb34:	0c1b      	lsrs	r3, r3, #16
 800fb36:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800fb3a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800fb3c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800fb3e:	68fb      	ldr	r3, [r7, #12]
 800fb40:	681b      	ldr	r3, [r3, #0]
 800fb42:	4619      	mov	r1, r3
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	01db      	lsls	r3, r3, #7
 800fb48:	440b      	add	r3, r1
 800fb4a:	3384      	adds	r3, #132	; 0x84
 800fb4c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800fb4e:	69fb      	ldr	r3, [r7, #28]
 800fb50:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800fb52:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800fb54:	68bb      	ldr	r3, [r7, #8]
 800fb56:	68da      	ldr	r2, [r3, #12]
 800fb58:	68fb      	ldr	r3, [r7, #12]
 800fb5a:	681b      	ldr	r3, [r3, #0]
 800fb5c:	68db      	ldr	r3, [r3, #12]
 800fb5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800fb62:	4413      	add	r3, r2
 800fb64:	041b      	lsls	r3, r3, #16
 800fb66:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800fb68:	68fb      	ldr	r3, [r7, #12]
 800fb6a:	681b      	ldr	r3, [r3, #0]
 800fb6c:	461a      	mov	r2, r3
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	01db      	lsls	r3, r3, #7
 800fb72:	4413      	add	r3, r2
 800fb74:	3384      	adds	r3, #132	; 0x84
 800fb76:	689b      	ldr	r3, [r3, #8]
 800fb78:	68fa      	ldr	r2, [r7, #12]
 800fb7a:	6812      	ldr	r2, [r2, #0]
 800fb7c:	4611      	mov	r1, r2
 800fb7e:	687a      	ldr	r2, [r7, #4]
 800fb80:	01d2      	lsls	r2, r2, #7
 800fb82:	440a      	add	r2, r1
 800fb84:	3284      	adds	r2, #132	; 0x84
 800fb86:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800fb8a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800fb8c:	68bb      	ldr	r3, [r7, #8]
 800fb8e:	689a      	ldr	r2, [r3, #8]
 800fb90:	68fb      	ldr	r3, [r7, #12]
 800fb92:	681b      	ldr	r3, [r3, #0]
 800fb94:	68db      	ldr	r3, [r3, #12]
 800fb96:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800fb9a:	4413      	add	r3, r2
 800fb9c:	1c5a      	adds	r2, r3, #1
 800fb9e:	68fb      	ldr	r3, [r7, #12]
 800fba0:	681b      	ldr	r3, [r3, #0]
 800fba2:	4619      	mov	r1, r3
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	01db      	lsls	r3, r3, #7
 800fba8:	440b      	add	r3, r1
 800fbaa:	3384      	adds	r3, #132	; 0x84
 800fbac:	4619      	mov	r1, r3
 800fbae:	69fb      	ldr	r3, [r7, #28]
 800fbb0:	4313      	orrs	r3, r2
 800fbb2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800fbb4:	68fb      	ldr	r3, [r7, #12]
 800fbb6:	681b      	ldr	r3, [r3, #0]
 800fbb8:	461a      	mov	r2, r3
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	01db      	lsls	r3, r3, #7
 800fbbe:	4413      	add	r3, r2
 800fbc0:	3384      	adds	r3, #132	; 0x84
 800fbc2:	691b      	ldr	r3, [r3, #16]
 800fbc4:	68fa      	ldr	r2, [r7, #12]
 800fbc6:	6812      	ldr	r2, [r2, #0]
 800fbc8:	4611      	mov	r1, r2
 800fbca:	687a      	ldr	r2, [r7, #4]
 800fbcc:	01d2      	lsls	r2, r2, #7
 800fbce:	440a      	add	r2, r1
 800fbd0:	3284      	adds	r2, #132	; 0x84
 800fbd2:	f023 0307 	bic.w	r3, r3, #7
 800fbd6:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800fbd8:	68fb      	ldr	r3, [r7, #12]
 800fbda:	681b      	ldr	r3, [r3, #0]
 800fbdc:	461a      	mov	r2, r3
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	01db      	lsls	r3, r3, #7
 800fbe2:	4413      	add	r3, r2
 800fbe4:	3384      	adds	r3, #132	; 0x84
 800fbe6:	461a      	mov	r2, r3
 800fbe8:	68bb      	ldr	r3, [r7, #8]
 800fbea:	691b      	ldr	r3, [r3, #16]
 800fbec:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800fbee:	68bb      	ldr	r3, [r7, #8]
 800fbf0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800fbf4:	021b      	lsls	r3, r3, #8
 800fbf6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800fbf8:	68bb      	ldr	r3, [r7, #8]
 800fbfa:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800fbfe:	041b      	lsls	r3, r3, #16
 800fc00:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800fc02:	68bb      	ldr	r3, [r7, #8]
 800fc04:	699b      	ldr	r3, [r3, #24]
 800fc06:	061b      	lsls	r3, r3, #24
 800fc08:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800fc0a:	68fb      	ldr	r3, [r7, #12]
 800fc0c:	681b      	ldr	r3, [r3, #0]
 800fc0e:	461a      	mov	r2, r3
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	01db      	lsls	r3, r3, #7
 800fc14:	4413      	add	r3, r2
 800fc16:	3384      	adds	r3, #132	; 0x84
 800fc18:	699b      	ldr	r3, [r3, #24]
 800fc1a:	68fb      	ldr	r3, [r7, #12]
 800fc1c:	681b      	ldr	r3, [r3, #0]
 800fc1e:	461a      	mov	r2, r3
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	01db      	lsls	r3, r3, #7
 800fc24:	4413      	add	r3, r2
 800fc26:	3384      	adds	r3, #132	; 0x84
 800fc28:	461a      	mov	r2, r3
 800fc2a:	2300      	movs	r3, #0
 800fc2c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800fc2e:	68bb      	ldr	r3, [r7, #8]
 800fc30:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fc34:	461a      	mov	r2, r3
 800fc36:	69fb      	ldr	r3, [r7, #28]
 800fc38:	431a      	orrs	r2, r3
 800fc3a:	69bb      	ldr	r3, [r7, #24]
 800fc3c:	431a      	orrs	r2, r3
 800fc3e:	68fb      	ldr	r3, [r7, #12]
 800fc40:	681b      	ldr	r3, [r3, #0]
 800fc42:	4619      	mov	r1, r3
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	01db      	lsls	r3, r3, #7
 800fc48:	440b      	add	r3, r1
 800fc4a:	3384      	adds	r3, #132	; 0x84
 800fc4c:	4619      	mov	r1, r3
 800fc4e:	697b      	ldr	r3, [r7, #20]
 800fc50:	4313      	orrs	r3, r2
 800fc52:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800fc54:	68fb      	ldr	r3, [r7, #12]
 800fc56:	681b      	ldr	r3, [r3, #0]
 800fc58:	461a      	mov	r2, r3
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	01db      	lsls	r3, r3, #7
 800fc5e:	4413      	add	r3, r2
 800fc60:	3384      	adds	r3, #132	; 0x84
 800fc62:	695b      	ldr	r3, [r3, #20]
 800fc64:	68fa      	ldr	r2, [r7, #12]
 800fc66:	6812      	ldr	r2, [r2, #0]
 800fc68:	4611      	mov	r1, r2
 800fc6a:	687a      	ldr	r2, [r7, #4]
 800fc6c:	01d2      	lsls	r2, r2, #7
 800fc6e:	440a      	add	r2, r1
 800fc70:	3284      	adds	r2, #132	; 0x84
 800fc72:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800fc76:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800fc78:	68fb      	ldr	r3, [r7, #12]
 800fc7a:	681b      	ldr	r3, [r3, #0]
 800fc7c:	461a      	mov	r2, r3
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	01db      	lsls	r3, r3, #7
 800fc82:	4413      	add	r3, r2
 800fc84:	3384      	adds	r3, #132	; 0x84
 800fc86:	461a      	mov	r2, r3
 800fc88:	68bb      	ldr	r3, [r7, #8]
 800fc8a:	695b      	ldr	r3, [r3, #20]
 800fc8c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800fc8e:	68fb      	ldr	r3, [r7, #12]
 800fc90:	681b      	ldr	r3, [r3, #0]
 800fc92:	461a      	mov	r2, r3
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	01db      	lsls	r3, r3, #7
 800fc98:	4413      	add	r3, r2
 800fc9a:	3384      	adds	r3, #132	; 0x84
 800fc9c:	69da      	ldr	r2, [r3, #28]
 800fc9e:	68fb      	ldr	r3, [r7, #12]
 800fca0:	681b      	ldr	r3, [r3, #0]
 800fca2:	4619      	mov	r1, r3
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	01db      	lsls	r3, r3, #7
 800fca8:	440b      	add	r3, r1
 800fcaa:	3384      	adds	r3, #132	; 0x84
 800fcac:	4619      	mov	r1, r3
 800fcae:	4b58      	ldr	r3, [pc, #352]	; (800fe10 <LTDC_SetConfig+0x32c>)
 800fcb0:	4013      	ands	r3, r2
 800fcb2:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800fcb4:	68bb      	ldr	r3, [r7, #8]
 800fcb6:	69da      	ldr	r2, [r3, #28]
 800fcb8:	68bb      	ldr	r3, [r7, #8]
 800fcba:	6a1b      	ldr	r3, [r3, #32]
 800fcbc:	68f9      	ldr	r1, [r7, #12]
 800fcbe:	6809      	ldr	r1, [r1, #0]
 800fcc0:	4608      	mov	r0, r1
 800fcc2:	6879      	ldr	r1, [r7, #4]
 800fcc4:	01c9      	lsls	r1, r1, #7
 800fcc6:	4401      	add	r1, r0
 800fcc8:	3184      	adds	r1, #132	; 0x84
 800fcca:	4313      	orrs	r3, r2
 800fccc:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800fcce:	68fb      	ldr	r3, [r7, #12]
 800fcd0:	681b      	ldr	r3, [r3, #0]
 800fcd2:	461a      	mov	r2, r3
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	01db      	lsls	r3, r3, #7
 800fcd8:	4413      	add	r3, r2
 800fcda:	3384      	adds	r3, #132	; 0x84
 800fcdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fcde:	68fb      	ldr	r3, [r7, #12]
 800fce0:	681b      	ldr	r3, [r3, #0]
 800fce2:	461a      	mov	r2, r3
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	01db      	lsls	r3, r3, #7
 800fce8:	4413      	add	r3, r2
 800fcea:	3384      	adds	r3, #132	; 0x84
 800fcec:	461a      	mov	r2, r3
 800fcee:	2300      	movs	r3, #0
 800fcf0:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800fcf2:	68fb      	ldr	r3, [r7, #12]
 800fcf4:	681b      	ldr	r3, [r3, #0]
 800fcf6:	461a      	mov	r2, r3
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	01db      	lsls	r3, r3, #7
 800fcfc:	4413      	add	r3, r2
 800fcfe:	3384      	adds	r3, #132	; 0x84
 800fd00:	461a      	mov	r2, r3
 800fd02:	68bb      	ldr	r3, [r7, #8]
 800fd04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd06:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800fd08:	68bb      	ldr	r3, [r7, #8]
 800fd0a:	691b      	ldr	r3, [r3, #16]
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	d102      	bne.n	800fd16 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800fd10:	2304      	movs	r3, #4
 800fd12:	61fb      	str	r3, [r7, #28]
 800fd14:	e01b      	b.n	800fd4e <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800fd16:	68bb      	ldr	r3, [r7, #8]
 800fd18:	691b      	ldr	r3, [r3, #16]
 800fd1a:	2b01      	cmp	r3, #1
 800fd1c:	d102      	bne.n	800fd24 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800fd1e:	2303      	movs	r3, #3
 800fd20:	61fb      	str	r3, [r7, #28]
 800fd22:	e014      	b.n	800fd4e <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800fd24:	68bb      	ldr	r3, [r7, #8]
 800fd26:	691b      	ldr	r3, [r3, #16]
 800fd28:	2b04      	cmp	r3, #4
 800fd2a:	d00b      	beq.n	800fd44 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800fd2c:	68bb      	ldr	r3, [r7, #8]
 800fd2e:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800fd30:	2b02      	cmp	r3, #2
 800fd32:	d007      	beq.n	800fd44 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800fd34:	68bb      	ldr	r3, [r7, #8]
 800fd36:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800fd38:	2b03      	cmp	r3, #3
 800fd3a:	d003      	beq.n	800fd44 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800fd3c:	68bb      	ldr	r3, [r7, #8]
 800fd3e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800fd40:	2b07      	cmp	r3, #7
 800fd42:	d102      	bne.n	800fd4a <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800fd44:	2302      	movs	r3, #2
 800fd46:	61fb      	str	r3, [r7, #28]
 800fd48:	e001      	b.n	800fd4e <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800fd4a:	2301      	movs	r3, #1
 800fd4c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800fd4e:	68fb      	ldr	r3, [r7, #12]
 800fd50:	681b      	ldr	r3, [r3, #0]
 800fd52:	461a      	mov	r2, r3
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	01db      	lsls	r3, r3, #7
 800fd58:	4413      	add	r3, r2
 800fd5a:	3384      	adds	r3, #132	; 0x84
 800fd5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd5e:	68fa      	ldr	r2, [r7, #12]
 800fd60:	6812      	ldr	r2, [r2, #0]
 800fd62:	4611      	mov	r1, r2
 800fd64:	687a      	ldr	r2, [r7, #4]
 800fd66:	01d2      	lsls	r2, r2, #7
 800fd68:	440a      	add	r2, r1
 800fd6a:	3284      	adds	r2, #132	; 0x84
 800fd6c:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800fd70:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800fd72:	68bb      	ldr	r3, [r7, #8]
 800fd74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fd76:	69fa      	ldr	r2, [r7, #28]
 800fd78:	fb02 f303 	mul.w	r3, r2, r3
 800fd7c:	041a      	lsls	r2, r3, #16
 800fd7e:	68bb      	ldr	r3, [r7, #8]
 800fd80:	6859      	ldr	r1, [r3, #4]
 800fd82:	68bb      	ldr	r3, [r7, #8]
 800fd84:	681b      	ldr	r3, [r3, #0]
 800fd86:	1acb      	subs	r3, r1, r3
 800fd88:	69f9      	ldr	r1, [r7, #28]
 800fd8a:	fb01 f303 	mul.w	r3, r1, r3
 800fd8e:	3307      	adds	r3, #7
 800fd90:	68f9      	ldr	r1, [r7, #12]
 800fd92:	6809      	ldr	r1, [r1, #0]
 800fd94:	4608      	mov	r0, r1
 800fd96:	6879      	ldr	r1, [r7, #4]
 800fd98:	01c9      	lsls	r1, r1, #7
 800fd9a:	4401      	add	r1, r0
 800fd9c:	3184      	adds	r1, #132	; 0x84
 800fd9e:	4313      	orrs	r3, r2
 800fda0:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800fda2:	68fb      	ldr	r3, [r7, #12]
 800fda4:	681b      	ldr	r3, [r3, #0]
 800fda6:	461a      	mov	r2, r3
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	01db      	lsls	r3, r3, #7
 800fdac:	4413      	add	r3, r2
 800fdae:	3384      	adds	r3, #132	; 0x84
 800fdb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fdb2:	68fb      	ldr	r3, [r7, #12]
 800fdb4:	681b      	ldr	r3, [r3, #0]
 800fdb6:	4619      	mov	r1, r3
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	01db      	lsls	r3, r3, #7
 800fdbc:	440b      	add	r3, r1
 800fdbe:	3384      	adds	r3, #132	; 0x84
 800fdc0:	4619      	mov	r1, r3
 800fdc2:	4b14      	ldr	r3, [pc, #80]	; (800fe14 <LTDC_SetConfig+0x330>)
 800fdc4:	4013      	ands	r3, r2
 800fdc6:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800fdc8:	68fb      	ldr	r3, [r7, #12]
 800fdca:	681b      	ldr	r3, [r3, #0]
 800fdcc:	461a      	mov	r2, r3
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	01db      	lsls	r3, r3, #7
 800fdd2:	4413      	add	r3, r2
 800fdd4:	3384      	adds	r3, #132	; 0x84
 800fdd6:	461a      	mov	r2, r3
 800fdd8:	68bb      	ldr	r3, [r7, #8]
 800fdda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fddc:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800fdde:	68fb      	ldr	r3, [r7, #12]
 800fde0:	681b      	ldr	r3, [r3, #0]
 800fde2:	461a      	mov	r2, r3
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	01db      	lsls	r3, r3, #7
 800fde8:	4413      	add	r3, r2
 800fdea:	3384      	adds	r3, #132	; 0x84
 800fdec:	681b      	ldr	r3, [r3, #0]
 800fdee:	68fa      	ldr	r2, [r7, #12]
 800fdf0:	6812      	ldr	r2, [r2, #0]
 800fdf2:	4611      	mov	r1, r2
 800fdf4:	687a      	ldr	r2, [r7, #4]
 800fdf6:	01d2      	lsls	r2, r2, #7
 800fdf8:	440a      	add	r2, r1
 800fdfa:	3284      	adds	r2, #132	; 0x84
 800fdfc:	f043 0301 	orr.w	r3, r3, #1
 800fe00:	6013      	str	r3, [r2, #0]
}
 800fe02:	bf00      	nop
 800fe04:	3724      	adds	r7, #36	; 0x24
 800fe06:	46bd      	mov	sp, r7
 800fe08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe0c:	4770      	bx	lr
 800fe0e:	bf00      	nop
 800fe10:	fffff8f8 	.word	0xfffff8f8
 800fe14:	fffff800 	.word	0xfffff800

0800fe18 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 800fe18:	b580      	push	{r7, lr}
 800fe1a:	b084      	sub	sp, #16
 800fe1c:	af00      	add	r7, sp, #0
 800fe1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800fe20:	f7fb fe9e 	bl	800bb60 <HAL_GetTick>
 800fe24:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	d101      	bne.n	800fe30 <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 800fe2c:	2301      	movs	r3, #1
 800fe2e:	e03b      	b.n	800fea8 <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	2200      	movs	r2, #0
 800fe34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	2202      	movs	r2, #2
 800fe3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	681b      	ldr	r3, [r3, #0]
 800fe44:	68da      	ldr	r2, [r3, #12]
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	681b      	ldr	r3, [r3, #0]
 800fe4a:	f022 0201 	bic.w	r2, r2, #1
 800fe4e:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800fe50:	e00f      	b.n	800fe72 <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 800fe52:	f7fb fe85 	bl	800bb60 <HAL_GetTick>
 800fe56:	4602      	mov	r2, r0
 800fe58:	68fb      	ldr	r3, [r7, #12]
 800fe5a:	1ad3      	subs	r3, r2, r3
 800fe5c:	2b05      	cmp	r3, #5
 800fe5e:	d908      	bls.n	800fe72 <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	2240      	movs	r2, #64	; 0x40
 800fe64:	669a      	str	r2, [r3, #104]	; 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	2203      	movs	r2, #3
 800fe6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      return HAL_ERROR;
 800fe6e:	2301      	movs	r3, #1
 800fe70:	e01a      	b.n	800fea8 <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	681b      	ldr	r3, [r3, #0]
 800fe76:	68db      	ldr	r3, [r3, #12]
 800fe78:	f003 0301 	and.w	r3, r3, #1
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	d1e8      	bne.n	800fe52 <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 800fe80:	6878      	ldr	r0, [r7, #4]
 800fe82:	f000 fb2f 	bl	80104e4 <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	2200      	movs	r2, #0
 800fe8a:	65da      	str	r2, [r3, #92]	; 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	2200      	movs	r2, #0
 800fe90:	661a      	str	r2, [r3, #96]	; 0x60
  hmdma->LinkedListNodeCounter  = 0;
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	2200      	movs	r2, #0
 800fe96:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	2200      	movs	r2, #0
 800fe9c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	2201      	movs	r2, #1
 800fea2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800fea6:	2300      	movs	r3, #0
}
 800fea8:	4618      	mov	r0, r3
 800feaa:	3710      	adds	r7, #16
 800feac:	46bd      	mov	sp, r7
 800feae:	bd80      	pop	{r7, pc}

0800feb0 <HAL_MDMA_ConfigPostRequestMask>:
  * @param  MaskData:    specifies the value to be written to MaskAddress after a request is served.
  *                      MaskAddress and MaskData could be used to automatically clear a peripheral flag when the request is served.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_ConfigPostRequestMask(MDMA_HandleTypeDef *hmdma, uint32_t MaskAddress, uint32_t MaskData)
{
 800feb0:	b480      	push	{r7}
 800feb2:	b087      	sub	sp, #28
 800feb4:	af00      	add	r7, sp, #0
 800feb6:	60f8      	str	r0, [r7, #12]
 800feb8:	60b9      	str	r1, [r7, #8]
 800feba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800febc:	2300      	movs	r3, #0
 800febe:	75fb      	strb	r3, [r7, #23]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800fec0:	68fb      	ldr	r3, [r7, #12]
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	d101      	bne.n	800feca <HAL_MDMA_ConfigPostRequestMask+0x1a>
  {
    return HAL_ERROR;
 800fec6:	2301      	movs	r3, #1
 800fec8:	e03e      	b.n	800ff48 <HAL_MDMA_ConfigPostRequestMask+0x98>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 800feca:	68fb      	ldr	r3, [r7, #12]
 800fecc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fed0:	2b01      	cmp	r3, #1
 800fed2:	d101      	bne.n	800fed8 <HAL_MDMA_ConfigPostRequestMask+0x28>
 800fed4:	2302      	movs	r3, #2
 800fed6:	e037      	b.n	800ff48 <HAL_MDMA_ConfigPostRequestMask+0x98>
 800fed8:	68fb      	ldr	r3, [r7, #12]
 800feda:	2201      	movs	r2, #1
 800fedc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 800fee0:	68fb      	ldr	r3, [r7, #12]
 800fee2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fee6:	b2db      	uxtb	r3, r3
 800fee8:	2b01      	cmp	r3, #1
 800feea:	d126      	bne.n	800ff3a <HAL_MDMA_ConfigPostRequestMask+0x8a>
  {
    /* if HW request set Post Request MaskAddress and MaskData,  */
    if((hmdma->Instance->CTCR & MDMA_CTCR_SWRM) == 0U)
 800feec:	68fb      	ldr	r3, [r7, #12]
 800feee:	681b      	ldr	r3, [r3, #0]
 800fef0:	691b      	ldr	r3, [r3, #16]
 800fef2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	d11c      	bne.n	800ff34 <HAL_MDMA_ConfigPostRequestMask+0x84>
    {
      /* Set the HW request clear Mask and Data */
      hmdma->Instance->CMAR = MaskAddress;
 800fefa:	68fb      	ldr	r3, [r7, #12]
 800fefc:	681b      	ldr	r3, [r3, #0]
 800fefe:	68ba      	ldr	r2, [r7, #8]
 800ff00:	631a      	str	r2, [r3, #48]	; 0x30
      hmdma->Instance->CMDR = MaskData;
 800ff02:	68fb      	ldr	r3, [r7, #12]
 800ff04:	681b      	ldr	r3, [r3, #0]
 800ff06:	687a      	ldr	r2, [r7, #4]
 800ff08:	635a      	str	r2, [r3, #52]	; 0x34
      -If the request is done by SW : BWM could be set to 1 or 0.
      -If the request is done by a peripheral :
         If mask address not set (0) => BWM must be set to 0
         If mask address set (different than 0) => BWM could be set to 1 or 0
      */
      if(MaskAddress == 0U)
 800ff0a:	68bb      	ldr	r3, [r7, #8]
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	d108      	bne.n	800ff22 <HAL_MDMA_ConfigPostRequestMask+0x72>
      {
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 800ff10:	68fb      	ldr	r3, [r7, #12]
 800ff12:	681b      	ldr	r3, [r3, #0]
 800ff14:	691a      	ldr	r2, [r3, #16]
 800ff16:	68fb      	ldr	r3, [r7, #12]
 800ff18:	681b      	ldr	r3, [r3, #0]
 800ff1a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800ff1e:	611a      	str	r2, [r3, #16]
 800ff20:	e00d      	b.n	800ff3e <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
      else
      {
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
 800ff22:	68fb      	ldr	r3, [r7, #12]
 800ff24:	681b      	ldr	r3, [r3, #0]
 800ff26:	691a      	ldr	r2, [r3, #16]
 800ff28:	68fb      	ldr	r3, [r7, #12]
 800ff2a:	681b      	ldr	r3, [r3, #0]
 800ff2c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800ff30:	611a      	str	r2, [r3, #16]
 800ff32:	e004      	b.n	800ff3e <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
    }
    else
    {
      /* Return error status */
      status =  HAL_ERROR;
 800ff34:	2301      	movs	r3, #1
 800ff36:	75fb      	strb	r3, [r7, #23]
 800ff38:	e001      	b.n	800ff3e <HAL_MDMA_ConfigPostRequestMask+0x8e>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 800ff3a:	2301      	movs	r3, #1
 800ff3c:	75fb      	strb	r3, [r7, #23]
  }
  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 800ff3e:	68fb      	ldr	r3, [r7, #12]
 800ff40:	2200      	movs	r2, #0
 800ff42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ff46:	7dfb      	ldrb	r3, [r7, #23]
}
 800ff48:	4618      	mov	r0, r3
 800ff4a:	371c      	adds	r7, #28
 800ff4c:	46bd      	mov	sp, r7
 800ff4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff52:	4770      	bx	lr

0800ff54 <HAL_MDMA_Start_IT>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount      : The number of a blocks to be transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Start_IT(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
 800ff54:	b580      	push	{r7, lr}
 800ff56:	b086      	sub	sp, #24
 800ff58:	af02      	add	r7, sp, #8
 800ff5a:	60f8      	str	r0, [r7, #12]
 800ff5c:	60b9      	str	r1, [r7, #8]
 800ff5e:	607a      	str	r2, [r7, #4]
 800ff60:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_MDMA_TRANSFER_LENGTH(BlockDataLength));
  assert_param(IS_MDMA_BLOCK_COUNT(BlockCount));

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800ff62:	68fb      	ldr	r3, [r7, #12]
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	d101      	bne.n	800ff6c <HAL_MDMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ff68:	2301      	movs	r3, #1
 800ff6a:	e070      	b.n	801004e <HAL_MDMA_Start_IT+0xfa>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 800ff6c:	68fb      	ldr	r3, [r7, #12]
 800ff6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ff72:	2b01      	cmp	r3, #1
 800ff74:	d101      	bne.n	800ff7a <HAL_MDMA_Start_IT+0x26>
 800ff76:	2302      	movs	r3, #2
 800ff78:	e069      	b.n	801004e <HAL_MDMA_Start_IT+0xfa>
 800ff7a:	68fb      	ldr	r3, [r7, #12]
 800ff7c:	2201      	movs	r2, #1
 800ff7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 800ff82:	68fb      	ldr	r3, [r7, #12]
 800ff84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ff88:	b2db      	uxtb	r3, r3
 800ff8a:	2b01      	cmp	r3, #1
 800ff8c:	d158      	bne.n	8010040 <HAL_MDMA_Start_IT+0xec>
  {
    /* Change MDMA peripheral state */
    hmdma->State = HAL_MDMA_STATE_BUSY;
 800ff8e:	68fb      	ldr	r3, [r7, #12]
 800ff90:	2202      	movs	r2, #2
 800ff92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Initialize the error code */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800ff96:	68fb      	ldr	r3, [r7, #12]
 800ff98:	2200      	movs	r2, #0
 800ff9a:	669a      	str	r2, [r3, #104]	; 0x68

    /* Disable the peripheral */
    __HAL_MDMA_DISABLE(hmdma);
 800ff9c:	68fb      	ldr	r3, [r7, #12]
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	68da      	ldr	r2, [r3, #12]
 800ffa2:	68fb      	ldr	r3, [r7, #12]
 800ffa4:	681b      	ldr	r3, [r3, #0]
 800ffa6:	f022 0201 	bic.w	r2, r2, #1
 800ffaa:	60da      	str	r2, [r3, #12]

    /* Configure the source, destination address and the data length */
    MDMA_SetConfig(hmdma, SrcAddress, DstAddress, BlockDataLength, BlockCount);
 800ffac:	69bb      	ldr	r3, [r7, #24]
 800ffae:	9300      	str	r3, [sp, #0]
 800ffb0:	683b      	ldr	r3, [r7, #0]
 800ffb2:	687a      	ldr	r2, [r7, #4]
 800ffb4:	68b9      	ldr	r1, [r7, #8]
 800ffb6:	68f8      	ldr	r0, [r7, #12]
 800ffb8:	f000 fa24 	bl	8010404 <MDMA_SetConfig>

    /* Enable Common interrupts i.e Transfer Error IT and Channel Transfer Complete IT*/
    __HAL_MDMA_ENABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC));
 800ffbc:	68fb      	ldr	r3, [r7, #12]
 800ffbe:	681b      	ldr	r3, [r3, #0]
 800ffc0:	68da      	ldr	r2, [r3, #12]
 800ffc2:	68fb      	ldr	r3, [r7, #12]
 800ffc4:	681b      	ldr	r3, [r3, #0]
 800ffc6:	f042 0206 	orr.w	r2, r2, #6
 800ffca:	60da      	str	r2, [r3, #12]

    if(hmdma->XferBlockCpltCallback != NULL)
 800ffcc:	68fb      	ldr	r3, [r7, #12]
 800ffce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	d007      	beq.n	800ffe4 <HAL_MDMA_Start_IT+0x90>
    {
      /* if Block transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BT);
 800ffd4:	68fb      	ldr	r3, [r7, #12]
 800ffd6:	681b      	ldr	r3, [r3, #0]
 800ffd8:	68da      	ldr	r2, [r3, #12]
 800ffda:	68fb      	ldr	r3, [r7, #12]
 800ffdc:	681b      	ldr	r3, [r3, #0]
 800ffde:	f042 0210 	orr.w	r2, r2, #16
 800ffe2:	60da      	str	r2, [r3, #12]
    }

    if(hmdma->XferRepeatBlockCpltCallback != NULL)
 800ffe4:	68fb      	ldr	r3, [r7, #12]
 800ffe6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	d007      	beq.n	800fffc <HAL_MDMA_Start_IT+0xa8>
    {
      /* if Repeated Block transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BRT);
 800ffec:	68fb      	ldr	r3, [r7, #12]
 800ffee:	681b      	ldr	r3, [r3, #0]
 800fff0:	68da      	ldr	r2, [r3, #12]
 800fff2:	68fb      	ldr	r3, [r7, #12]
 800fff4:	681b      	ldr	r3, [r3, #0]
 800fff6:	f042 0208 	orr.w	r2, r2, #8
 800fffa:	60da      	str	r2, [r3, #12]
    }

    if(hmdma->XferBufferCpltCallback != NULL)
 800fffc:	68fb      	ldr	r3, [r7, #12]
 800fffe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010000:	2b00      	cmp	r3, #0
 8010002:	d007      	beq.n	8010014 <HAL_MDMA_Start_IT+0xc0>
    {
      /* if buffer transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BFTC);
 8010004:	68fb      	ldr	r3, [r7, #12]
 8010006:	681b      	ldr	r3, [r3, #0]
 8010008:	68da      	ldr	r2, [r3, #12]
 801000a:	68fb      	ldr	r3, [r7, #12]
 801000c:	681b      	ldr	r3, [r3, #0]
 801000e:	f042 0220 	orr.w	r2, r2, #32
 8010012:	60da      	str	r2, [r3, #12]
    }

    /* Enable the Peripheral */
    __HAL_MDMA_ENABLE(hmdma);
 8010014:	68fb      	ldr	r3, [r7, #12]
 8010016:	681b      	ldr	r3, [r3, #0]
 8010018:	68da      	ldr	r2, [r3, #12]
 801001a:	68fb      	ldr	r3, [r7, #12]
 801001c:	681b      	ldr	r3, [r3, #0]
 801001e:	f042 0201 	orr.w	r2, r2, #1
 8010022:	60da      	str	r2, [r3, #12]

    if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8010024:	68fb      	ldr	r3, [r7, #12]
 8010026:	685b      	ldr	r3, [r3, #4]
 8010028:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801002c:	d10e      	bne.n	801004c <HAL_MDMA_Start_IT+0xf8>
    {
      /* activate If SW request mode*/
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
 801002e:	68fb      	ldr	r3, [r7, #12]
 8010030:	681b      	ldr	r3, [r3, #0]
 8010032:	68da      	ldr	r2, [r3, #12]
 8010034:	68fb      	ldr	r3, [r7, #12]
 8010036:	681b      	ldr	r3, [r3, #0]
 8010038:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 801003c:	60da      	str	r2, [r3, #12]
 801003e:	e005      	b.n	801004c <HAL_MDMA_Start_IT+0xf8>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hmdma);
 8010040:	68fb      	ldr	r3, [r7, #12]
 8010042:	2200      	movs	r2, #0
 8010044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Return error status */
    return HAL_BUSY;
 8010048:	2302      	movs	r3, #2
 801004a:	e000      	b.n	801004e <HAL_MDMA_Start_IT+0xfa>
  }

  return HAL_OK;
 801004c:	2300      	movs	r3, #0
}
 801004e:	4618      	mov	r0, r3
 8010050:	3710      	adds	r7, #16
 8010052:	46bd      	mov	sp, r7
 8010054:	bd80      	pop	{r7, pc}

08010056 <HAL_MDMA_Abort>:
  *        and the Channel will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort(MDMA_HandleTypeDef *hmdma)
{
 8010056:	b580      	push	{r7, lr}
 8010058:	b084      	sub	sp, #16
 801005a:	af00      	add	r7, sp, #0
 801005c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart =  HAL_GetTick();
 801005e:	f7fb fd7f 	bl	800bb60 <HAL_GetTick>
 8010062:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	2b00      	cmp	r3, #0
 8010068:	d101      	bne.n	801006e <HAL_MDMA_Abort+0x18>
  {
    return HAL_ERROR;
 801006a:	2301      	movs	r3, #1
 801006c:	e04a      	b.n	8010104 <HAL_MDMA_Abort+0xae>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010074:	b2db      	uxtb	r3, r3
 8010076:	2b02      	cmp	r3, #2
 8010078:	d008      	beq.n	801008c <HAL_MDMA_Abort+0x36>
  {
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	2280      	movs	r2, #128	; 0x80
 801007e:	669a      	str	r2, [r3, #104]	; 0x68

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	2200      	movs	r2, #0
 8010084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8010088:	2301      	movs	r3, #1
 801008a:	e03b      	b.n	8010104 <HAL_MDMA_Abort+0xae>
  }
  else
  {
    /* Disable all the transfer interrupts */
    __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	681b      	ldr	r3, [r3, #0]
 8010090:	68da      	ldr	r2, [r3, #12]
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	681b      	ldr	r3, [r3, #0]
 8010096:	f022 023e 	bic.w	r2, r2, #62	; 0x3e
 801009a:	60da      	str	r2, [r3, #12]

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	681b      	ldr	r3, [r3, #0]
 80100a0:	68da      	ldr	r2, [r3, #12]
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	681b      	ldr	r3, [r3, #0]
 80100a6:	f022 0201 	bic.w	r2, r2, #1
 80100aa:	60da      	str	r2, [r3, #12]

    /* Check if the MDMA Channel is effectively disabled */
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 80100ac:	e016      	b.n	80100dc <HAL_MDMA_Abort+0x86>
    {
      /* Check for the Timeout */
      if( (HAL_GetTick()  - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 80100ae:	f7fb fd57 	bl	800bb60 <HAL_GetTick>
 80100b2:	4602      	mov	r2, r0
 80100b4:	68fb      	ldr	r3, [r7, #12]
 80100b6:	1ad3      	subs	r3, r2, r3
 80100b8:	2b05      	cmp	r3, #5
 80100ba:	d90f      	bls.n	80100dc <HAL_MDMA_Abort+0x86>
      {
        /* Update error code */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_TIMEOUT;
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80100c0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	669a      	str	r2, [r3, #104]	; 0x68

        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	2200      	movs	r2, #0
 80100cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Change the MDMA state */
        hmdma->State = HAL_MDMA_STATE_ERROR;
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	2203      	movs	r2, #3
 80100d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        return HAL_ERROR;
 80100d8:	2301      	movs	r3, #1
 80100da:	e013      	b.n	8010104 <HAL_MDMA_Abort+0xae>
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	681b      	ldr	r3, [r3, #0]
 80100e0:	68db      	ldr	r3, [r3, #12]
 80100e2:	f003 0301 	and.w	r3, r3, #1
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	d1e1      	bne.n	80100ae <HAL_MDMA_Abort+0x58>
      }
    }

    /* Clear all interrupt flags */
    __HAL_MDMA_CLEAR_FLAG(hmdma, (MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BT | MDMA_FLAG_BRT | MDMA_FLAG_BFTC));
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	681b      	ldr	r3, [r3, #0]
 80100ee:	221f      	movs	r2, #31
 80100f0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	2200      	movs	r2, #0
 80100f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Change the MDMA state*/
    hmdma->State = HAL_MDMA_STATE_READY;
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	2201      	movs	r2, #1
 80100fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

  return HAL_OK;
 8010102:	2300      	movs	r3, #0
}
 8010104:	4618      	mov	r0, r3
 8010106:	3710      	adds	r7, #16
 8010108:	46bd      	mov	sp, r7
 801010a:	bd80      	pop	{r7, pc}

0801010c <HAL_MDMA_Abort_IT>:
  * @param  hmdma  : pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
 801010c:	b480      	push	{r7}
 801010e:	b083      	sub	sp, #12
 8010110:	af00      	add	r7, sp, #0
 8010112:	6078      	str	r0, [r7, #4]
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	2b00      	cmp	r3, #0
 8010118:	d101      	bne.n	801011e <HAL_MDMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 801011a:	2301      	movs	r3, #1
 801011c:	e017      	b.n	801014e <HAL_MDMA_Abort_IT+0x42>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010124:	b2db      	uxtb	r3, r3
 8010126:	2b02      	cmp	r3, #2
 8010128:	d004      	beq.n	8010134 <HAL_MDMA_Abort_IT+0x28>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	2280      	movs	r2, #128	; 0x80
 801012e:	669a      	str	r2, [r3, #104]	; 0x68

    return HAL_ERROR;
 8010130:	2301      	movs	r3, #1
 8010132:	e00c      	b.n	801014e <HAL_MDMA_Abort_IT+0x42>
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	2204      	movs	r2, #4
 8010138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	681b      	ldr	r3, [r3, #0]
 8010140:	68da      	ldr	r2, [r3, #12]
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	681b      	ldr	r3, [r3, #0]
 8010146:	f022 0201 	bic.w	r2, r2, #1
 801014a:	60da      	str	r2, [r3, #12]
  }

  return HAL_OK;
 801014c:	2300      	movs	r3, #0
}
 801014e:	4618      	mov	r0, r3
 8010150:	370c      	adds	r7, #12
 8010152:	46bd      	mov	sp, r7
 8010154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010158:	4770      	bx	lr
	...

0801015c <HAL_MDMA_IRQHandler>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval None
  */
void HAL_MDMA_IRQHandler(MDMA_HandleTypeDef *hmdma)
{
 801015c:	b580      	push	{r7, lr}
 801015e:	b086      	sub	sp, #24
 8010160:	af00      	add	r7, sp, #0
 8010162:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 8010164:	2300      	movs	r3, #0
 8010166:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8010168:	4b91      	ldr	r3, [pc, #580]	; (80103b0 <HAL_MDMA_IRQHandler+0x254>)
 801016a:	681b      	ldr	r3, [r3, #0]
 801016c:	4a91      	ldr	r2, [pc, #580]	; (80103b4 <HAL_MDMA_IRQHandler+0x258>)
 801016e:	fba2 2303 	umull	r2, r3, r2, r3
 8010172:	0a9b      	lsrs	r3, r3, #10
 8010174:	617b      	str	r3, [r7, #20]

  uint32_t generalIntFlag, errorFlag;

  /* General Interrupt Flag management ****************************************/
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	681b      	ldr	r3, [r3, #0]
 801017a:	461a      	mov	r2, r3
 801017c:	4b8e      	ldr	r3, [pc, #568]	; (80103b8 <HAL_MDMA_IRQHandler+0x25c>)
 801017e:	4413      	add	r3, r2
 8010180:	099b      	lsrs	r3, r3, #6
 8010182:	f003 031f 	and.w	r3, r3, #31
 8010186:	2201      	movs	r2, #1
 8010188:	fa02 f303 	lsl.w	r3, r2, r3
 801018c:	613b      	str	r3, [r7, #16]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 801018e:	f04f 43a4 	mov.w	r3, #1375731712	; 0x52000000
 8010192:	681a      	ldr	r2, [r3, #0]
 8010194:	693b      	ldr	r3, [r7, #16]
 8010196:	4013      	ands	r3, r2
 8010198:	2b00      	cmp	r3, #0
 801019a:	f000 812d 	beq.w	80103f8 <HAL_MDMA_IRQHandler+0x29c>
  {
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
  }

  /* Transfer Error Interrupt management ***************************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	681b      	ldr	r3, [r3, #0]
 80101a2:	681b      	ldr	r3, [r3, #0]
 80101a4:	f003 0301 	and.w	r3, r3, #1
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	d054      	beq.n	8010256 <HAL_MDMA_IRQHandler+0xfa>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	68db      	ldr	r3, [r3, #12]
 80101b2:	f003 0302 	and.w	r3, r3, #2
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d04d      	beq.n	8010256 <HAL_MDMA_IRQHandler+0xfa>
    {
      /* Disable the transfer error interrupt */
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	681b      	ldr	r3, [r3, #0]
 80101be:	68da      	ldr	r2, [r3, #12]
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	681b      	ldr	r3, [r3, #0]
 80101c4:	f022 0202 	bic.w	r2, r2, #2
 80101c8:	60da      	str	r2, [r3, #12]

      /* Get the transfer error source flag */
      errorFlag = hmdma->Instance->CESR;
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	681b      	ldr	r3, [r3, #0]
 80101ce:	689b      	ldr	r3, [r3, #8]
 80101d0:	60fb      	str	r3, [r7, #12]

      if((errorFlag & MDMA_CESR_TED) == 0U)
 80101d2:	68fb      	ldr	r3, [r7, #12]
 80101d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80101d8:	2b00      	cmp	r3, #0
 80101da:	d106      	bne.n	80101ea <HAL_MDMA_IRQHandler+0x8e>
      {
        /* Update error code : Read Transfer error  */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80101e0:	f043 0201 	orr.w	r2, r3, #1
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	669a      	str	r2, [r3, #104]	; 0x68
 80101e8:	e005      	b.n	80101f6 <HAL_MDMA_IRQHandler+0x9a>
      }
      else
      {
        /* Update error code : Write Transfer error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80101ee:	f043 0202 	orr.w	r2, r3, #2
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 80101f6:	68fb      	ldr	r3, [r7, #12]
 80101f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	d005      	beq.n	801020c <HAL_MDMA_IRQHandler+0xb0>
      {
        /* Update error code : Error Mask Data */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010204:	f043 0204 	orr.w	r2, r3, #4
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_TELD) != 0U)
 801020c:	68fb      	ldr	r3, [r7, #12]
 801020e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010212:	2b00      	cmp	r3, #0
 8010214:	d005      	beq.n	8010222 <HAL_MDMA_IRQHandler+0xc6>
      {
        /* Update error code : Error Linked list */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801021a:	f043 0208 	orr.w	r2, r3, #8
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_ASE) != 0U)
 8010222:	68fb      	ldr	r3, [r7, #12]
 8010224:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010228:	2b00      	cmp	r3, #0
 801022a:	d005      	beq.n	8010238 <HAL_MDMA_IRQHandler+0xdc>
      {
        /* Update error code : Address/Size alignment error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010230:	f043 0210 	orr.w	r2, r3, #16
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_BSE) != 0U)
 8010238:	68fb      	ldr	r3, [r7, #12]
 801023a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801023e:	2b00      	cmp	r3, #0
 8010240:	d005      	beq.n	801024e <HAL_MDMA_IRQHandler+0xf2>
      {
        /* Update error code : Block Size error error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010246:	f043 0220 	orr.w	r2, r3, #32
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	669a      	str	r2, [r3, #104]	; 0x68
      }

      /* Clear the transfer error flags */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	681b      	ldr	r3, [r3, #0]
 8010252:	2201      	movs	r2, #1
 8010254:	605a      	str	r2, [r3, #4]
    }
  }

  /* Buffer Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	681b      	ldr	r3, [r3, #0]
 801025a:	681b      	ldr	r3, [r3, #0]
 801025c:	f003 0310 	and.w	r3, r3, #16
 8010260:	2b00      	cmp	r3, #0
 8010262:	d012      	beq.n	801028a <HAL_MDMA_IRQHandler+0x12e>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	681b      	ldr	r3, [r3, #0]
 8010268:	68db      	ldr	r3, [r3, #12]
 801026a:	f003 0320 	and.w	r3, r3, #32
 801026e:	2b00      	cmp	r3, #0
 8010270:	d00b      	beq.n	801028a <HAL_MDMA_IRQHandler+0x12e>
    {
      /* Clear the buffer transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	681b      	ldr	r3, [r3, #0]
 8010276:	2210      	movs	r2, #16
 8010278:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBufferCpltCallback != NULL)
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801027e:	2b00      	cmp	r3, #0
 8010280:	d003      	beq.n	801028a <HAL_MDMA_IRQHandler+0x12e>
      {
        /* Buffer transfer callback */
        hmdma->XferBufferCpltCallback(hmdma);
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010286:	6878      	ldr	r0, [r7, #4]
 8010288:	4798      	blx	r3
      }
    }
  }

  /* Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	681b      	ldr	r3, [r3, #0]
 801028e:	681b      	ldr	r3, [r3, #0]
 8010290:	f003 0308 	and.w	r3, r3, #8
 8010294:	2b00      	cmp	r3, #0
 8010296:	d012      	beq.n	80102be <HAL_MDMA_IRQHandler+0x162>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	681b      	ldr	r3, [r3, #0]
 801029c:	68db      	ldr	r3, [r3, #12]
 801029e:	f003 0310 	and.w	r3, r3, #16
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	d00b      	beq.n	80102be <HAL_MDMA_IRQHandler+0x162>
    {
      /* Clear the block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	681b      	ldr	r3, [r3, #0]
 80102aa:	2208      	movs	r2, #8
 80102ac:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBlockCpltCallback != NULL)
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	d003      	beq.n	80102be <HAL_MDMA_IRQHandler+0x162>
      {
        /* Block transfer callback */
        hmdma->XferBlockCpltCallback(hmdma);
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80102ba:	6878      	ldr	r0, [r7, #4]
 80102bc:	4798      	blx	r3
      }
    }
  }

  /* Repeated Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	681b      	ldr	r3, [r3, #0]
 80102c2:	681b      	ldr	r3, [r3, #0]
 80102c4:	f003 0304 	and.w	r3, r3, #4
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	d012      	beq.n	80102f2 <HAL_MDMA_IRQHandler+0x196>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	681b      	ldr	r3, [r3, #0]
 80102d0:	68db      	ldr	r3, [r3, #12]
 80102d2:	f003 0308 	and.w	r3, r3, #8
 80102d6:	2b00      	cmp	r3, #0
 80102d8:	d00b      	beq.n	80102f2 <HAL_MDMA_IRQHandler+0x196>
    {
      /* Clear the repeat block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	681b      	ldr	r3, [r3, #0]
 80102de:	2204      	movs	r2, #4
 80102e0:	605a      	str	r2, [r3, #4]

      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	d003      	beq.n	80102f2 <HAL_MDMA_IRQHandler+0x196>
      {
        /* Repeated Block transfer callback */
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80102ee:	6878      	ldr	r0, [r7, #4]
 80102f0:	4798      	blx	r3
      }
    }
  }

  /* Channel Transfer Complete Interrupt management ***********************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	681b      	ldr	r3, [r3, #0]
 80102f6:	681b      	ldr	r3, [r3, #0]
 80102f8:	f003 0302 	and.w	r3, r3, #2
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	d039      	beq.n	8010374 <HAL_MDMA_IRQHandler+0x218>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	681b      	ldr	r3, [r3, #0]
 8010304:	68db      	ldr	r3, [r3, #12]
 8010306:	f003 0304 	and.w	r3, r3, #4
 801030a:	2b00      	cmp	r3, #0
 801030c:	d032      	beq.n	8010374 <HAL_MDMA_IRQHandler+0x218>
    {
      /* Disable all the transfer interrupts */
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	681b      	ldr	r3, [r3, #0]
 8010312:	68da      	ldr	r2, [r3, #12]
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	681b      	ldr	r3, [r3, #0]
 8010318:	f022 023e 	bic.w	r2, r2, #62	; 0x3e
 801031c:	60da      	str	r2, [r3, #12]

      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010324:	b2db      	uxtb	r3, r3
 8010326:	2b04      	cmp	r3, #4
 8010328:	d110      	bne.n	801034c <HAL_MDMA_IRQHandler+0x1f0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	2200      	movs	r2, #0
 801032e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Change the DMA state */
        hmdma->State = HAL_MDMA_STATE_READY;
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	2201      	movs	r2, #1
 8010336:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        if(hmdma->XferAbortCallback != NULL)
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801033e:	2b00      	cmp	r3, #0
 8010340:	d05c      	beq.n	80103fc <HAL_MDMA_IRQHandler+0x2a0>
        {
          hmdma->XferAbortCallback(hmdma);
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010346:	6878      	ldr	r0, [r7, #4]
 8010348:	4798      	blx	r3
        }
        return;
 801034a:	e057      	b.n	80103fc <HAL_MDMA_IRQHandler+0x2a0>
      }

      /* Clear the Channel Transfer Complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	681b      	ldr	r3, [r3, #0]
 8010350:	2202      	movs	r2, #2
 8010352:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hmdma);
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	2200      	movs	r2, #0
 8010358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Change MDMA peripheral state */
      hmdma->State = HAL_MDMA_STATE_READY;
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	2201      	movs	r2, #1
 8010360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if(hmdma->XferCpltCallback != NULL)
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010368:	2b00      	cmp	r3, #0
 801036a:	d003      	beq.n	8010374 <HAL_MDMA_IRQHandler+0x218>
      {
        /* Channel Transfer Complete callback */
        hmdma->XferCpltCallback(hmdma);
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010370:	6878      	ldr	r0, [r7, #4]
 8010372:	4798      	blx	r3
      }
    }
  }

  /* manage error case */
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010378:	2b00      	cmp	r3, #0
 801037a:	d040      	beq.n	80103fe <HAL_MDMA_IRQHandler+0x2a2>
  {
    hmdma->State = HAL_MDMA_STATE_ABORT;
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	2204      	movs	r2, #4
 8010380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	681b      	ldr	r3, [r3, #0]
 8010388:	68da      	ldr	r2, [r3, #12]
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	681b      	ldr	r3, [r3, #0]
 801038e:	f022 0201 	bic.w	r2, r2, #1
 8010392:	60da      	str	r2, [r3, #12]

    do
    {
      if (++count > timeout)
 8010394:	68bb      	ldr	r3, [r7, #8]
 8010396:	3301      	adds	r3, #1
 8010398:	60bb      	str	r3, [r7, #8]
 801039a:	697a      	ldr	r2, [r7, #20]
 801039c:	429a      	cmp	r2, r3
 801039e:	d30d      	bcc.n	80103bc <HAL_MDMA_IRQHandler+0x260>
      {
        break;
      }
    }
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	681b      	ldr	r3, [r3, #0]
 80103a4:	68db      	ldr	r3, [r3, #12]
 80103a6:	f003 0301 	and.w	r3, r3, #1
 80103aa:	2b00      	cmp	r3, #0
 80103ac:	d1f2      	bne.n	8010394 <HAL_MDMA_IRQHandler+0x238>
 80103ae:	e006      	b.n	80103be <HAL_MDMA_IRQHandler+0x262>
 80103b0:	24000054 	.word	0x24000054
 80103b4:	1b4e81b5 	.word	0x1b4e81b5
 80103b8:	adffffc0 	.word	0xadffffc0
        break;
 80103bc:	bf00      	nop

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	2200      	movs	r2, #0
 80103c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	681b      	ldr	r3, [r3, #0]
 80103ca:	68db      	ldr	r3, [r3, #12]
 80103cc:	f003 0301 	and.w	r3, r3, #1
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d004      	beq.n	80103de <HAL_MDMA_IRQHandler+0x282>
    {
      /* Change the MDMA state to error if MDMA disable fails */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	2203      	movs	r2, #3
 80103d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80103dc:	e003      	b.n	80103e6 <HAL_MDMA_IRQHandler+0x28a>
    }
    else
    {
      /* Change the MDMA state to Ready if MDMA disable success */
      hmdma->State = HAL_MDMA_STATE_READY;
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	2201      	movs	r2, #1
 80103e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }


    if (hmdma->XferErrorCallback != NULL)
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80103ea:	2b00      	cmp	r3, #0
 80103ec:	d007      	beq.n	80103fe <HAL_MDMA_IRQHandler+0x2a2>
    {
      /* Transfer error callback */
      hmdma->XferErrorCallback(hmdma);
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80103f2:	6878      	ldr	r0, [r7, #4]
 80103f4:	4798      	blx	r3
 80103f6:	e002      	b.n	80103fe <HAL_MDMA_IRQHandler+0x2a2>
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
 80103f8:	bf00      	nop
 80103fa:	e000      	b.n	80103fe <HAL_MDMA_IRQHandler+0x2a2>
        return;
 80103fc:	bf00      	nop
    }
  }
}
 80103fe:	3718      	adds	r7, #24
 8010400:	46bd      	mov	sp, r7
 8010402:	bd80      	pop	{r7, pc}

08010404 <MDMA_SetConfig>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount: The number of blocks to be transferred
  * @retval HAL status
  */
static void MDMA_SetConfig(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
 8010404:	b480      	push	{r7}
 8010406:	b087      	sub	sp, #28
 8010408:	af00      	add	r7, sp, #0
 801040a:	60f8      	str	r0, [r7, #12]
 801040c:	60b9      	str	r1, [r7, #8]
 801040e:	607a      	str	r2, [r7, #4]
 8010410:	603b      	str	r3, [r7, #0]
  uint32_t addressMask;

  /* Configure the MDMA Channel data length */
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 8010412:	68fb      	ldr	r3, [r7, #12]
 8010414:	681b      	ldr	r3, [r3, #0]
 8010416:	695a      	ldr	r2, [r3, #20]
 8010418:	4b31      	ldr	r3, [pc, #196]	; (80104e0 <MDMA_SetConfig+0xdc>)
 801041a:	4013      	ands	r3, r2
 801041c:	683a      	ldr	r2, [r7, #0]
 801041e:	f3c2 0110 	ubfx	r1, r2, #0, #17
 8010422:	68fa      	ldr	r2, [r7, #12]
 8010424:	6812      	ldr	r2, [r2, #0]
 8010426:	430b      	orrs	r3, r1
 8010428:	6153      	str	r3, [r2, #20]

  /* Configure the MDMA block repeat count */
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
 801042a:	68fb      	ldr	r3, [r7, #12]
 801042c:	681b      	ldr	r3, [r3, #0]
 801042e:	695b      	ldr	r3, [r3, #20]
 8010430:	f3c3 0113 	ubfx	r1, r3, #0, #20
 8010434:	6a3b      	ldr	r3, [r7, #32]
 8010436:	3b01      	subs	r3, #1
 8010438:	051a      	lsls	r2, r3, #20
 801043a:	68fb      	ldr	r3, [r7, #12]
 801043c:	681b      	ldr	r3, [r3, #0]
 801043e:	430a      	orrs	r2, r1
 8010440:	615a      	str	r2, [r3, #20]

  /* Clear all interrupt flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_CISR_BRTIF | MDMA_CISR_BTIF | MDMA_CISR_TCIF);
 8010442:	68fb      	ldr	r3, [r7, #12]
 8010444:	681b      	ldr	r3, [r3, #0]
 8010446:	221f      	movs	r2, #31
 8010448:	605a      	str	r2, [r3, #4]

  /* Configure MDMA Channel destination address */
  hmdma->Instance->CDAR = DstAddress;
 801044a:	68fb      	ldr	r3, [r7, #12]
 801044c:	681b      	ldr	r3, [r3, #0]
 801044e:	687a      	ldr	r2, [r7, #4]
 8010450:	61da      	str	r2, [r3, #28]

  /* Configure MDMA Channel Source address */
  hmdma->Instance->CSAR = SrcAddress;
 8010452:	68fb      	ldr	r3, [r7, #12]
 8010454:	681b      	ldr	r3, [r3, #0]
 8010456:	68ba      	ldr	r2, [r7, #8]
 8010458:	619a      	str	r2, [r3, #24]

  addressMask = SrcAddress & 0xFF000000U;
 801045a:	68bb      	ldr	r3, [r7, #8]
 801045c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8010460:	617b      	str	r3, [r7, #20]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 8010462:	697b      	ldr	r3, [r7, #20]
 8010464:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010468:	d002      	beq.n	8010470 <MDMA_SetConfig+0x6c>
 801046a:	697b      	ldr	r3, [r7, #20]
 801046c:	2b00      	cmp	r3, #0
 801046e:	d108      	bne.n	8010482 <MDMA_SetConfig+0x7e>
  {
    /*The AHBSbus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_SBUS;
 8010470:	68fb      	ldr	r3, [r7, #12]
 8010472:	681b      	ldr	r3, [r3, #0]
 8010474:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010476:	68fb      	ldr	r3, [r7, #12]
 8010478:	681b      	ldr	r3, [r3, #0]
 801047a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 801047e:	629a      	str	r2, [r3, #40]	; 0x28
 8010480:	e007      	b.n	8010492 <MDMA_SetConfig+0x8e>
  }
  else
  {
    /*The AXI bus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 8010482:	68fb      	ldr	r3, [r7, #12]
 8010484:	681b      	ldr	r3, [r3, #0]
 8010486:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010488:	68fb      	ldr	r3, [r7, #12]
 801048a:	681b      	ldr	r3, [r3, #0]
 801048c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8010490:	629a      	str	r2, [r3, #40]	; 0x28
  }

  addressMask = DstAddress & 0xFF000000U;
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8010498:	617b      	str	r3, [r7, #20]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 801049a:	697b      	ldr	r3, [r7, #20]
 801049c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80104a0:	d002      	beq.n	80104a8 <MDMA_SetConfig+0xa4>
 80104a2:	697b      	ldr	r3, [r7, #20]
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	d108      	bne.n	80104ba <MDMA_SetConfig+0xb6>
  {
    /*The AHB bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_DBUS;
 80104a8:	68fb      	ldr	r3, [r7, #12]
 80104aa:	681b      	ldr	r3, [r3, #0]
 80104ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80104ae:	68fb      	ldr	r3, [r7, #12]
 80104b0:	681b      	ldr	r3, [r3, #0]
 80104b2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80104b6:	629a      	str	r2, [r3, #40]	; 0x28
 80104b8:	e007      	b.n	80104ca <MDMA_SetConfig+0xc6>
  }
  else
  {
    /*The AXI bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_DBUS);
 80104ba:	68fb      	ldr	r3, [r7, #12]
 80104bc:	681b      	ldr	r3, [r3, #0]
 80104be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80104c0:	68fb      	ldr	r3, [r7, #12]
 80104c2:	681b      	ldr	r3, [r3, #0]
 80104c4:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80104c8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Set the linked list register to the first node of the list */
  hmdma->Instance->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
 80104ca:	68fb      	ldr	r3, [r7, #12]
 80104cc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80104ce:	68fb      	ldr	r3, [r7, #12]
 80104d0:	681b      	ldr	r3, [r3, #0]
 80104d2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80104d4:	bf00      	nop
 80104d6:	371c      	adds	r7, #28
 80104d8:	46bd      	mov	sp, r7
 80104da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104de:	4770      	bx	lr
 80104e0:	fffe0000 	.word	0xfffe0000

080104e4 <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 80104e4:	b480      	push	{r7}
 80104e6:	b085      	sub	sp, #20
 80104e8:	af00      	add	r7, sp, #0
 80104ea:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	68d9      	ldr	r1, [r3, #12]
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	691a      	ldr	r2, [r3, #16]
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	681b      	ldr	r3, [r3, #0]
 80104f8:	430a      	orrs	r2, r1
 80104fa:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	695a      	ldr	r2, [r3, #20]
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	699b      	ldr	r3, [r3, #24]
 8010504:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 801050a:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	6a1b      	ldr	r3, [r3, #32]
 8010510:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8010516:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801051c:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8010522:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010528:	3b01      	subs	r3, #1
 801052a:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 801052c:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8010538:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 801053a:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	685b      	ldr	r3, [r3, #4]
 8010540:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010544:	d107      	bne.n	8010556 <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	681b      	ldr	r3, [r3, #0]
 801054a:	691a      	ldr	r2, [r3, #16]
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	681b      	ldr	r3, [r3, #0]
 8010550:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 8010554:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	681b      	ldr	r3, [r3, #0]
 801055a:	2200      	movs	r2, #0
 801055c:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010562:	2b00      	cmp	r3, #0
 8010564:	da11      	bge.n	801058a <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	681b      	ldr	r3, [r3, #0]
 801056a:	695a      	ldr	r2, [r3, #20]
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	681b      	ldr	r3, [r3, #0]
 8010570:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8010574:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801057a:	425b      	negs	r3, r3
 801057c:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	681b      	ldr	r3, [r3, #0]
 8010582:	68fa      	ldr	r2, [r7, #12]
 8010584:	b292      	uxth	r2, r2
 8010586:	621a      	str	r2, [r3, #32]
 8010588:	e006      	b.n	8010598 <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801058e:	461a      	mov	r2, r3
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	681b      	ldr	r3, [r3, #0]
 8010594:	b292      	uxth	r2, r2
 8010596:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801059c:	2b00      	cmp	r3, #0
 801059e:	da15      	bge.n	80105cc <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	681b      	ldr	r3, [r3, #0]
 80105a4:	695a      	ldr	r2, [r3, #20]
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	681b      	ldr	r3, [r3, #0]
 80105aa:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80105ae:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80105b4:	425b      	negs	r3, r3
 80105b6:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	681b      	ldr	r3, [r3, #0]
 80105bc:	6a19      	ldr	r1, [r3, #32]
 80105be:	68fb      	ldr	r3, [r7, #12]
 80105c0:	041a      	lsls	r2, r3, #16
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	681b      	ldr	r3, [r3, #0]
 80105c6:	430a      	orrs	r2, r1
 80105c8:	621a      	str	r2, [r3, #32]
 80105ca:	e009      	b.n	80105e0 <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	681b      	ldr	r3, [r3, #0]
 80105d0:	6a19      	ldr	r1, [r3, #32]
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80105d6:	041a      	lsls	r2, r3, #16
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	681b      	ldr	r3, [r3, #0]
 80105dc:	430a      	orrs	r2, r1
 80105de:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	685b      	ldr	r3, [r3, #4]
 80105e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80105e8:	d006      	beq.n	80105f8 <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	685a      	ldr	r2, [r3, #4]
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	681b      	ldr	r3, [r3, #0]
 80105f2:	b2d2      	uxtb	r2, r2
 80105f4:	629a      	str	r2, [r3, #40]	; 0x28
 80105f6:	e003      	b.n	8010600 <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	681b      	ldr	r3, [r3, #0]
 80105fc:	2200      	movs	r2, #0
 80105fe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	681b      	ldr	r3, [r3, #0]
 8010604:	2200      	movs	r2, #0
 8010606:	625a      	str	r2, [r3, #36]	; 0x24
}
 8010608:	bf00      	nop
 801060a:	3714      	adds	r7, #20
 801060c:	46bd      	mov	sp, r7
 801060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010612:	4770      	bx	lr

08010614 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init (OSPI_HandleTypeDef *hospi)
{
 8010614:	b580      	push	{r7, lr}
 8010616:	b086      	sub	sp, #24
 8010618:	af02      	add	r7, sp, #8
 801061a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801061c:	2300      	movs	r3, #0
 801061e:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8010620:	f7fb fa9e 	bl	800bb60 <HAL_GetTick>
 8010624:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	2b00      	cmp	r3, #0
 801062a:	d102      	bne.n	8010632 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 801062c:	2301      	movs	r3, #1
 801062e:	73fb      	strb	r3, [r7, #15]
 8010630:	e0a5      	b.n	801077e <HAL_OSPI_Init+0x16a>
    assert_param(IS_OSPI_CS_BOUNDARY    (hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP         (hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN        (hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	2200      	movs	r2, #0
 8010636:	655a      	str	r2, [r3, #84]	; 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801063c:	2b00      	cmp	r3, #0
 801063e:	f040 809e 	bne.w	801077e <HAL_OSPI_Init+0x16a>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8010642:	6878      	ldr	r0, [r7, #4]
 8010644:	f7f6 fba4 	bl	8006d90 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8010648:	f241 3188 	movw	r1, #5000	; 0x1388
 801064c:	6878      	ldr	r0, [r7, #4]
 801064e:	f000 fd44 	bl	80110da <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	681b      	ldr	r3, [r3, #0]
 8010656:	689a      	ldr	r2, [r3, #8]
 8010658:	4b4b      	ldr	r3, [pc, #300]	; (8010788 <HAL_OSPI_Init+0x174>)
 801065a:	4013      	ands	r3, r2
 801065c:	687a      	ldr	r2, [r7, #4]
 801065e:	68d1      	ldr	r1, [r2, #12]
 8010660:	687a      	ldr	r2, [r7, #4]
 8010662:	6912      	ldr	r2, [r2, #16]
 8010664:	3a01      	subs	r2, #1
 8010666:	0412      	lsls	r2, r2, #16
 8010668:	4311      	orrs	r1, r2
 801066a:	687a      	ldr	r2, [r7, #4]
 801066c:	6952      	ldr	r2, [r2, #20]
 801066e:	3a01      	subs	r2, #1
 8010670:	0212      	lsls	r2, r2, #8
 8010672:	4311      	orrs	r1, r2
 8010674:	687a      	ldr	r2, [r7, #4]
 8010676:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8010678:	4311      	orrs	r1, r2
 801067a:	687a      	ldr	r2, [r7, #4]
 801067c:	69d2      	ldr	r2, [r2, #28]
 801067e:	4311      	orrs	r1, r2
 8010680:	687a      	ldr	r2, [r7, #4]
 8010682:	6812      	ldr	r2, [r2, #0]
 8010684:	430b      	orrs	r3, r1
 8010686:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	681b      	ldr	r3, [r3, #0]
 801068c:	68db      	ldr	r3, [r3, #12]
 801068e:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	6a1a      	ldr	r2, [r3, #32]
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	681b      	ldr	r3, [r3, #0]
 801069a:	430a      	orrs	r2, r1
 801069c:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80106a2:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	681b      	ldr	r3, [r3, #0]
 80106ac:	430a      	orrs	r2, r1
 80106ae:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	681b      	ldr	r3, [r3, #0]
 80106b4:	687a      	ldr	r2, [r7, #4]
 80106b6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80106b8:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	681b      	ldr	r3, [r3, #0]
 80106be:	681b      	ldr	r3, [r3, #0]
 80106c0:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	685b      	ldr	r3, [r3, #4]
 80106c8:	3b01      	subs	r3, #1
 80106ca:	021a      	lsls	r2, r3, #8
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	681b      	ldr	r3, [r3, #0]
 80106d0:	430a      	orrs	r2, r1
 80106d2:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80106d8:	9300      	str	r3, [sp, #0]
 80106da:	68bb      	ldr	r3, [r7, #8]
 80106dc:	2200      	movs	r2, #0
 80106de:	2120      	movs	r1, #32
 80106e0:	6878      	ldr	r0, [r7, #4]
 80106e2:	f000 fd45 	bl	8011170 <OSPI_WaitFlagStateUntilTimeout>
 80106e6:	4603      	mov	r3, r0
 80106e8:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80106ea:	7bfb      	ldrb	r3, [r7, #15]
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	d146      	bne.n	801077e <HAL_OSPI_Init+0x16a>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	681b      	ldr	r3, [r3, #0]
 80106f4:	68db      	ldr	r3, [r3, #12]
 80106f6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106fe:	1e5a      	subs	r2, r3, #1
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	681b      	ldr	r3, [r3, #0]
 8010704:	430a      	orrs	r2, r1
 8010706:	60da      	str	r2, [r3, #12]
                  ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	681b      	ldr	r3, [r3, #0]
 801070c:	681b      	ldr	r3, [r3, #0]
 801070e:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	689a      	ldr	r2, [r3, #8]
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	681b      	ldr	r3, [r3, #0]
 801071a:	430a      	orrs	r2, r1
 801071c:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	681b      	ldr	r3, [r3, #0]
 8010722:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8010726:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010732:	431a      	orrs	r2, r3
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	681b      	ldr	r3, [r3, #0]
 8010738:	430a      	orrs	r2, r1
 801073a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                  (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	681b      	ldr	r3, [r3, #0]
 8010742:	681a      	ldr	r2, [r3, #0]
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	681b      	ldr	r3, [r3, #0]
 8010748:	f042 0201 	orr.w	r2, r2, #1
 801074c:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	699b      	ldr	r3, [r3, #24]
 8010752:	2b02      	cmp	r3, #2
 8010754:	d107      	bne.n	8010766 <HAL_OSPI_Init+0x152>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	681b      	ldr	r3, [r3, #0]
 801075a:	689a      	ldr	r2, [r3, #8]
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	681b      	ldr	r3, [r3, #0]
 8010760:	f042 0202 	orr.w	r2, r2, #2
 8010764:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	68db      	ldr	r3, [r3, #12]
 801076a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801076e:	d103      	bne.n	8010778 <HAL_OSPI_Init+0x164>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	2201      	movs	r2, #1
 8010774:	651a      	str	r2, [r3, #80]	; 0x50
 8010776:	e002      	b.n	801077e <HAL_OSPI_Init+0x16a>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	2202      	movs	r2, #2
 801077c:	651a      	str	r2, [r3, #80]	; 0x50
      }
    }
  }

  /* Return function status */
  return status;
 801077e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010780:	4618      	mov	r0, r3
 8010782:	3710      	adds	r7, #16
 8010784:	46bd      	mov	sp, r7
 8010786:	bd80      	pop	{r7, pc}
 8010788:	f8e0f8f4 	.word	0xf8e0f8f4

0801078c <HAL_OSPI_DeInit>:
  * @brief  De-Initialize the OSPI peripheral.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_DeInit(OSPI_HandleTypeDef *hospi)
{
 801078c:	b580      	push	{r7, lr}
 801078e:	b084      	sub	sp, #16
 8010790:	af00      	add	r7, sp, #0
 8010792:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010794:	2300      	movs	r3, #0
 8010796:	73fb      	strb	r3, [r7, #15]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	2b00      	cmp	r3, #0
 801079c:	d102      	bne.n	80107a4 <HAL_OSPI_DeInit+0x18>
  {
    status = HAL_ERROR;
 801079e:	2301      	movs	r3, #1
 80107a0:	73fb      	strb	r3, [r7, #15]
 80107a2:	e015      	b.n	80107d0 <HAL_OSPI_DeInit+0x44>
    /* No error code can be set set as the handler is null */
  }
  else
  {
     /* Disable OctoSPI */
     __HAL_OSPI_DISABLE(hospi);
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	681b      	ldr	r3, [r3, #0]
 80107a8:	681a      	ldr	r2, [r3, #0]
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	681b      	ldr	r3, [r3, #0]
 80107ae:	f022 0201 	bic.w	r2, r2, #1
 80107b2:	601a      	str	r2, [r3, #0]

     /* Disable free running clock if needed : must be done after OSPI disable */
     CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	681b      	ldr	r3, [r3, #0]
 80107b8:	689a      	ldr	r2, [r3, #8]
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	681b      	ldr	r3, [r3, #0]
 80107be:	f022 0202 	bic.w	r2, r2, #2
 80107c2:	609a      	str	r2, [r3, #8]

     /* DeInit the low level hardware */
     hospi->MspDeInitCallback(hospi);
#else
     /* De-initialize the low-level hardware */
     HAL_OSPI_MspDeInit(hospi);
 80107c4:	6878      	ldr	r0, [r7, #4]
 80107c6:	f7f6 fb45 	bl	8006e54 <HAL_OSPI_MspDeInit>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

     /* Reset the driver state */
     hospi->State = HAL_OSPI_STATE_RESET;
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	2200      	movs	r2, #0
 80107ce:	651a      	str	r2, [r3, #80]	; 0x50
  }

  return status;
 80107d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80107d2:	4618      	mov	r0, r3
 80107d4:	3710      	adds	r7, #16
 80107d6:	46bd      	mov	sp, r7
 80107d8:	bd80      	pop	{r7, pc}
	...

080107dc <HAL_OSPI_IRQHandler>:
  * @brief  Handle OSPI interrupt request.
  * @param  hospi : OSPI handle
  * @retval None
  */
void HAL_OSPI_IRQHandler(OSPI_HandleTypeDef *hospi)
{
 80107dc:	b580      	push	{r7, lr}
 80107de:	b086      	sub	sp, #24
 80107e0:	af00      	add	r7, sp, #0
 80107e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	681b      	ldr	r3, [r3, #0]
 80107e8:	3350      	adds	r3, #80	; 0x50
 80107ea:	617b      	str	r3, [r7, #20]
  uint32_t flag           = hospi->Instance->SR;
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	681b      	ldr	r3, [r3, #0]
 80107f0:	6a1b      	ldr	r3, [r3, #32]
 80107f2:	613b      	str	r3, [r7, #16]
  uint32_t itsource       = hospi->Instance->CR;
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	681b      	ldr	r3, [r3, #0]
 80107f8:	681b      	ldr	r3, [r3, #0]
 80107fa:	60fb      	str	r3, [r7, #12]
  uint32_t currentstate   = hospi->State;
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010800:	60bb      	str	r3, [r7, #8]

  /* OctoSPI fifo threshold interrupt occurred -------------------------------*/
  if (((flag & HAL_OSPI_FLAG_FT) != 0U) && ((itsource & HAL_OSPI_IT_FT) != 0U))
 8010802:	693b      	ldr	r3, [r7, #16]
 8010804:	f003 0304 	and.w	r3, r3, #4
 8010808:	2b00      	cmp	r3, #0
 801080a:	d03a      	beq.n	8010882 <HAL_OSPI_IRQHandler+0xa6>
 801080c:	68fb      	ldr	r3, [r7, #12]
 801080e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010812:	2b00      	cmp	r3, #0
 8010814:	d035      	beq.n	8010882 <HAL_OSPI_IRQHandler+0xa6>
  {
    if (currentstate == HAL_OSPI_STATE_BUSY_TX)
 8010816:	68bb      	ldr	r3, [r7, #8]
 8010818:	2b18      	cmp	r3, #24
 801081a:	d10f      	bne.n	801083c <HAL_OSPI_IRQHandler+0x60>
    {
      /* Write a data in the fifo */
      *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010820:	781a      	ldrb	r2, [r3, #0]
 8010822:	697b      	ldr	r3, [r7, #20]
 8010824:	701a      	strb	r2, [r3, #0]
      hospi->pBuffPtr++;
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801082a:	1c5a      	adds	r2, r3, #1
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	641a      	str	r2, [r3, #64]	; 0x40
      hospi->XferCount--;
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010834:	1e5a      	subs	r2, r3, #1
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	649a      	str	r2, [r3, #72]	; 0x48
 801083a:	e012      	b.n	8010862 <HAL_OSPI_IRQHandler+0x86>
    }
    else if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 801083c:	68bb      	ldr	r3, [r7, #8]
 801083e:	2b28      	cmp	r3, #40	; 0x28
 8010840:	d10f      	bne.n	8010862 <HAL_OSPI_IRQHandler+0x86>
    {
      /* Read a data from the fifo */
      *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010846:	697a      	ldr	r2, [r7, #20]
 8010848:	7812      	ldrb	r2, [r2, #0]
 801084a:	b2d2      	uxtb	r2, r2
 801084c:	701a      	strb	r2, [r3, #0]
      hospi->pBuffPtr++;
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010852:	1c5a      	adds	r2, r3, #1
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	641a      	str	r2, [r3, #64]	; 0x40
      hospi->XferCount--;
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801085c:	1e5a      	subs	r2, r3, #1
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	649a      	str	r2, [r3, #72]	; 0x48
    else
    {
      /* Nothing to do */
    }

    if (hospi->XferCount == 0U)
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010866:	2b00      	cmp	r3, #0
 8010868:	d107      	bne.n	801087a <HAL_OSPI_IRQHandler+0x9e>
    {
      /* All data have been received or transmitted for the transfer */
      /* Disable fifo threshold interrupt */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_FT);
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	681b      	ldr	r3, [r3, #0]
 801086e:	681a      	ldr	r2, [r3, #0]
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	681b      	ldr	r3, [r3, #0]
 8010874:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8010878:	601a      	str	r2, [r3, #0]

    /* Fifo threshold callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->FifoThresholdCallback(hospi);
#else
    HAL_OSPI_FifoThresholdCallback(hospi);
 801087a:	6878      	ldr	r0, [r7, #4]
 801087c:	f000 fb7c 	bl	8010f78 <HAL_OSPI_FifoThresholdCallback>
 8010880:	e0e7      	b.n	8010a52 <HAL_OSPI_IRQHandler+0x276>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)*/
  }
  /* OctoSPI transfer complete interrupt occurred ----------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TC) != 0U) && ((itsource & HAL_OSPI_IT_TC) != 0U))
 8010882:	693b      	ldr	r3, [r7, #16]
 8010884:	f003 0302 	and.w	r3, r3, #2
 8010888:	2b00      	cmp	r3, #0
 801088a:	d067      	beq.n	801095c <HAL_OSPI_IRQHandler+0x180>
 801088c:	68fb      	ldr	r3, [r7, #12]
 801088e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010892:	2b00      	cmp	r3, #0
 8010894:	d062      	beq.n	801095c <HAL_OSPI_IRQHandler+0x180>
  {
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8010896:	68bb      	ldr	r3, [r7, #8]
 8010898:	2b28      	cmp	r3, #40	; 0x28
 801089a:	d131      	bne.n	8010900 <HAL_OSPI_IRQHandler+0x124>
    {
      if ((hospi->XferCount > 0U) && ((flag & OCTOSPI_SR_FLEVEL) != 0U))
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	d015      	beq.n	80108d0 <HAL_OSPI_IRQHandler+0xf4>
 80108a4:	693b      	ldr	r3, [r7, #16]
 80108a6:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 80108aa:	2b00      	cmp	r3, #0
 80108ac:	d010      	beq.n	80108d0 <HAL_OSPI_IRQHandler+0xf4>
      {
        /* Read the last data received in the fifo */
        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80108b2:	697a      	ldr	r2, [r7, #20]
 80108b4:	7812      	ldrb	r2, [r2, #0]
 80108b6:	b2d2      	uxtb	r2, r2
 80108b8:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80108be:	1c5a      	adds	r2, r3, #1
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	641a      	str	r2, [r3, #64]	; 0x40
        hospi->XferCount--;
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80108c8:	1e5a      	subs	r2, r3, #1
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	649a      	str	r2, [r3, #72]	; 0x48
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 80108ce:	e0bd      	b.n	8010a4c <HAL_OSPI_IRQHandler+0x270>
      }
      else if(hospi->XferCount == 0U)
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	f040 80b9 	bne.w	8010a4c <HAL_OSPI_IRQHandler+0x270>
      {
        /* Clear flag */
        hospi->Instance->FCR = HAL_OSPI_FLAG_TC;
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	681b      	ldr	r3, [r3, #0]
 80108de:	2202      	movs	r2, #2
 80108e0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Disable the interrupts */
        __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	681b      	ldr	r3, [r3, #0]
 80108e6:	681a      	ldr	r2, [r3, #0]
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	681b      	ldr	r3, [r3, #0]
 80108ec:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 80108f0:	601a      	str	r2, [r3, #0]

        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	2202      	movs	r2, #2
 80108f6:	651a      	str	r2, [r3, #80]	; 0x50

        /* RX complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->RxCpltCallback(hospi);
#else
        HAL_OSPI_RxCpltCallback(hospi);
 80108f8:	6878      	ldr	r0, [r7, #4]
 80108fa:	f000 fb51 	bl	8010fa0 <HAL_OSPI_RxCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 80108fe:	e0a5      	b.n	8010a4c <HAL_OSPI_IRQHandler+0x270>
      }
    }
    else
    {
      /* Clear flag */
      hospi->Instance->FCR = HAL_OSPI_FLAG_TC;
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	681b      	ldr	r3, [r3, #0]
 8010904:	2202      	movs	r2, #2
 8010906:	625a      	str	r2, [r3, #36]	; 0x24

      /* Disable the interrupts */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	681b      	ldr	r3, [r3, #0]
 801090c:	681a      	ldr	r2, [r3, #0]
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	681b      	ldr	r3, [r3, #0]
 8010912:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 8010916:	601a      	str	r2, [r3, #0]

      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	2202      	movs	r2, #2
 801091c:	651a      	str	r2, [r3, #80]	; 0x50

      if (currentstate == HAL_OSPI_STATE_BUSY_TX)
 801091e:	68bb      	ldr	r3, [r7, #8]
 8010920:	2b18      	cmp	r3, #24
 8010922:	d103      	bne.n	801092c <HAL_OSPI_IRQHandler+0x150>
      {
        /* TX complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->TxCpltCallback(hospi);
#else
        HAL_OSPI_TxCpltCallback(hospi);
 8010924:	6878      	ldr	r0, [r7, #4]
 8010926:	f000 fb45 	bl	8010fb4 <HAL_OSPI_TxCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 801092a:	e08f      	b.n	8010a4c <HAL_OSPI_IRQHandler+0x270>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
      }
      else if (currentstate == HAL_OSPI_STATE_BUSY_CMD)
 801092c:	68bb      	ldr	r3, [r7, #8]
 801092e:	2b08      	cmp	r3, #8
 8010930:	d103      	bne.n	801093a <HAL_OSPI_IRQHandler+0x15e>
      {
        /* Command complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->CmdCpltCallback(hospi);
#else
        HAL_OSPI_CmdCpltCallback(hospi);
 8010932:	6878      	ldr	r0, [r7, #4]
 8010934:	f000 fb2a 	bl	8010f8c <HAL_OSPI_CmdCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8010938:	e088      	b.n	8010a4c <HAL_OSPI_IRQHandler+0x270>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
      }
      else if (currentstate == HAL_OSPI_STATE_ABORT)
 801093a:	68bb      	ldr	r3, [r7, #8]
 801093c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010940:	f040 8084 	bne.w	8010a4c <HAL_OSPI_IRQHandler+0x270>
      {
        if (hospi->ErrorCode == HAL_OSPI_ERROR_NONE)
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010948:	2b00      	cmp	r3, #0
 801094a:	d103      	bne.n	8010954 <HAL_OSPI_IRQHandler+0x178>
          /* Abort called by the user */
          /* Abort complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
          hospi->AbortCpltCallback(hospi);
#else
          HAL_OSPI_AbortCpltCallback(hospi);
 801094c:	6878      	ldr	r0, [r7, #4]
 801094e:	f000 fb09 	bl	8010f64 <HAL_OSPI_AbortCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8010952:	e07b      	b.n	8010a4c <HAL_OSPI_IRQHandler+0x270>
          /* Abort due to an error (eg : DMA error) */
          /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
          hospi->ErrorCallback(hospi);
#else
          HAL_OSPI_ErrorCallback(hospi);
 8010954:	6878      	ldr	r0, [r7, #4]
 8010956:	f000 fafb 	bl	8010f50 <HAL_OSPI_ErrorCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 801095a:	e077      	b.n	8010a4c <HAL_OSPI_IRQHandler+0x270>
        /* Nothing to do */
      }
    }
  }
  /* OctoSPI status match interrupt occurred ---------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_SM) != 0U) && ((itsource & HAL_OSPI_IT_SM) != 0U))
 801095c:	693b      	ldr	r3, [r7, #16]
 801095e:	f003 0308 	and.w	r3, r3, #8
 8010962:	2b00      	cmp	r3, #0
 8010964:	d01e      	beq.n	80109a4 <HAL_OSPI_IRQHandler+0x1c8>
 8010966:	68fb      	ldr	r3, [r7, #12]
 8010968:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801096c:	2b00      	cmp	r3, #0
 801096e:	d019      	beq.n	80109a4 <HAL_OSPI_IRQHandler+0x1c8>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_SM;
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	681b      	ldr	r3, [r3, #0]
 8010974:	2208      	movs	r2, #8
 8010976:	625a      	str	r2, [r3, #36]	; 0x24

    /* Check if automatic poll mode stop is activated */
    if ((hospi->Instance->CR & OCTOSPI_CR_APMS) != 0U)
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	681b      	ldr	r3, [r3, #0]
 801097c:	681b      	ldr	r3, [r3, #0]
 801097e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010982:	2b00      	cmp	r3, #0
 8010984:	d00a      	beq.n	801099c <HAL_OSPI_IRQHandler+0x1c0>
    {
      /* Disable the interrupts */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_SM | HAL_OSPI_IT_TE);
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	681b      	ldr	r3, [r3, #0]
 801098a:	681a      	ldr	r2, [r3, #0]
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	681b      	ldr	r3, [r3, #0]
 8010990:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8010994:	601a      	str	r2, [r3, #0]

      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	2202      	movs	r2, #2
 801099a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Status match callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->StatusMatchCallback(hospi);
#else
    HAL_OSPI_StatusMatchCallback(hospi);
 801099c:	6878      	ldr	r0, [r7, #4]
 801099e:	f000 fb13 	bl	8010fc8 <HAL_OSPI_StatusMatchCallback>
 80109a2:	e056      	b.n	8010a52 <HAL_OSPI_IRQHandler+0x276>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
  }
  /* OctoSPI transfer error interrupt occurred -------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TE) != 0U) && ((itsource & HAL_OSPI_IT_TE) != 0U))
 80109a4:	693b      	ldr	r3, [r7, #16]
 80109a6:	f003 0301 	and.w	r3, r3, #1
 80109aa:	2b00      	cmp	r3, #0
 80109ac:	d03c      	beq.n	8010a28 <HAL_OSPI_IRQHandler+0x24c>
 80109ae:	68fb      	ldr	r3, [r7, #12]
 80109b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	d037      	beq.n	8010a28 <HAL_OSPI_IRQHandler+0x24c>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_TE;
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	681b      	ldr	r3, [r3, #0]
 80109bc:	2201      	movs	r2, #1
 80109be:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable all interrupts */
    __HAL_OSPI_DISABLE_IT(hospi, (HAL_OSPI_IT_TO | HAL_OSPI_IT_SM | HAL_OSPI_IT_FT | HAL_OSPI_IT_TC | HAL_OSPI_IT_TE));
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	681b      	ldr	r3, [r3, #0]
 80109c4:	681a      	ldr	r2, [r3, #0]
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	681b      	ldr	r3, [r3, #0]
 80109ca:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 80109ce:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_TRANSFER;
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	2202      	movs	r2, #2
 80109d4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Check if the DMA is enabled */
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	681b      	ldr	r3, [r3, #0]
 80109da:	681b      	ldr	r3, [r3, #0]
 80109dc:	f003 0304 	and.w	r3, r3, #4
 80109e0:	2b00      	cmp	r3, #0
 80109e2:	d01a      	beq.n	8010a1a <HAL_OSPI_IRQHandler+0x23e>
    {
      /* Disable the DMA transfer on the OctoSPI side */
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	681b      	ldr	r3, [r3, #0]
 80109e8:	681a      	ldr	r2, [r3, #0]
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	681b      	ldr	r3, [r3, #0]
 80109ee:	f022 0204 	bic.w	r2, r2, #4
 80109f2:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transfer on the DMA side */
      hospi->hmdma->XferAbortCallback = OSPI_DMAAbortCplt;
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80109f8:	4a18      	ldr	r2, [pc, #96]	; (8010a5c <HAL_OSPI_IRQHandler+0x280>)
 80109fa:	659a      	str	r2, [r3, #88]	; 0x58
      if (HAL_MDMA_Abort_IT(hospi->hmdma) != HAL_OK)
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010a00:	4618      	mov	r0, r3
 8010a02:	f7ff fb83 	bl	801010c <HAL_MDMA_Abort_IT>
 8010a06:	4603      	mov	r3, r0
 8010a08:	2b00      	cmp	r3, #0
 8010a0a:	d021      	beq.n	8010a50 <HAL_OSPI_IRQHandler+0x274>
      {
        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	2202      	movs	r2, #2
 8010a10:	651a      	str	r2, [r3, #80]	; 0x50

        /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->ErrorCallback(hospi);
#else
        HAL_OSPI_ErrorCallback(hospi);
 8010a12:	6878      	ldr	r0, [r7, #4]
 8010a14:	f000 fa9c 	bl	8010f50 <HAL_OSPI_ErrorCallback>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8010a18:	e01a      	b.n	8010a50 <HAL_OSPI_IRQHandler+0x274>
      }
    }
    else
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	2202      	movs	r2, #2
 8010a1e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
      hospi->ErrorCallback(hospi);
#else
      HAL_OSPI_ErrorCallback(hospi);
 8010a20:	6878      	ldr	r0, [r7, #4]
 8010a22:	f000 fa95 	bl	8010f50 <HAL_OSPI_ErrorCallback>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8010a26:	e013      	b.n	8010a50 <HAL_OSPI_IRQHandler+0x274>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
    }
  }
  /* OctoSPI timeout interrupt occurred --------------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TO) != 0U) && ((itsource & HAL_OSPI_IT_TO) != 0U))
 8010a28:	693b      	ldr	r3, [r7, #16]
 8010a2a:	f003 0310 	and.w	r3, r3, #16
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	d00f      	beq.n	8010a52 <HAL_OSPI_IRQHandler+0x276>
 8010a32:	68fb      	ldr	r3, [r7, #12]
 8010a34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	d00a      	beq.n	8010a52 <HAL_OSPI_IRQHandler+0x276>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_TO;
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	681b      	ldr	r3, [r3, #0]
 8010a40:	2210      	movs	r2, #16
 8010a42:	625a      	str	r2, [r3, #36]	; 0x24

    /* Timeout callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->TimeOutCallback(hospi);
#else
    HAL_OSPI_TimeOutCallback(hospi);
 8010a44:	6878      	ldr	r0, [r7, #4]
 8010a46:	f000 fac9 	bl	8010fdc <HAL_OSPI_TimeOutCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8010a4a:	e002      	b.n	8010a52 <HAL_OSPI_IRQHandler+0x276>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8010a4c:	bf00      	nop
 8010a4e:	e000      	b.n	8010a52 <HAL_OSPI_IRQHandler+0x276>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8010a50:	bf00      	nop
}
 8010a52:	bf00      	nop
 8010a54:	3718      	adds	r7, #24
 8010a56:	46bd      	mov	sp, r7
 8010a58:	bd80      	pop	{r7, pc}
 8010a5a:	bf00      	nop
 8010a5c:	080110f9 	.word	0x080110f9

08010a60 <HAL_OSPI_Command>:
  * @param  cmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Command(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd, uint32_t Timeout)
{
 8010a60:	b580      	push	{r7, lr}
 8010a62:	b08a      	sub	sp, #40	; 0x28
 8010a64:	af02      	add	r7, sp, #8
 8010a66:	60f8      	str	r0, [r7, #12]
 8010a68:	60b9      	str	r1, [r7, #8]
 8010a6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8010a6c:	f7fb f878 	bl	800bb60 <HAL_GetTick>
 8010a70:	61b8      	str	r0, [r7, #24]
    assert_param(IS_OSPI_ALT_BYTES_SIZE    (cmd->AlternateBytesSize));
    assert_param(IS_OSPI_ALT_BYTES_DTR_MODE(cmd->AlternateBytesDtrMode));
  }

  assert_param(IS_OSPI_DATA_MODE(cmd->DataMode));
  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8010a72:	68bb      	ldr	r3, [r7, #8]
 8010a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010a76:	2b00      	cmp	r3, #0

  assert_param(IS_OSPI_DQS_MODE (cmd->DQSMode));
  assert_param(IS_OSPI_SIOO_MODE(cmd->SIOOMode));

  /* Check the state of the driver */
  state = hospi->State;
 8010a78:	68fb      	ldr	r3, [r7, #12]
 8010a7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010a7c:	617b      	str	r3, [r7, #20]
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 8010a7e:	697b      	ldr	r3, [r7, #20]
 8010a80:	2b02      	cmp	r3, #2
 8010a82:	d104      	bne.n	8010a8e <HAL_OSPI_Command+0x2e>
 8010a84:	68fb      	ldr	r3, [r7, #12]
 8010a86:	68db      	ldr	r3, [r3, #12]
 8010a88:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8010a8c:	d115      	bne.n	8010aba <HAL_OSPI_Command+0x5a>
 8010a8e:	697b      	ldr	r3, [r7, #20]
 8010a90:	2b14      	cmp	r3, #20
 8010a92:	d107      	bne.n	8010aa4 <HAL_OSPI_Command+0x44>
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && ((cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 8010a94:	68bb      	ldr	r3, [r7, #8]
 8010a96:	681b      	ldr	r3, [r3, #0]
 8010a98:	2b02      	cmp	r3, #2
 8010a9a:	d00e      	beq.n	8010aba <HAL_OSPI_Command+0x5a>
                                                || (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))) ||
 8010a9c:	68bb      	ldr	r3, [r7, #8]
 8010a9e:	681b      	ldr	r3, [r3, #0]
 8010aa0:	2b03      	cmp	r3, #3
 8010aa2:	d00a      	beq.n	8010aba <HAL_OSPI_Command+0x5a>
 8010aa4:	697b      	ldr	r3, [r7, #20]
 8010aa6:	2b24      	cmp	r3, #36	; 0x24
 8010aa8:	d15b      	bne.n	8010b62 <HAL_OSPI_Command+0x102>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 8010aaa:	68bb      	ldr	r3, [r7, #8]
 8010aac:	681b      	ldr	r3, [r3, #0]
 8010aae:	2b01      	cmp	r3, #1
 8010ab0:	d003      	beq.n	8010aba <HAL_OSPI_Command+0x5a>
                                                   (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))))
 8010ab2:	68bb      	ldr	r3, [r7, #8]
 8010ab4:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 8010ab6:	2b03      	cmp	r3, #3
 8010ab8:	d153      	bne.n	8010b62 <HAL_OSPI_Command+0x102>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	9300      	str	r3, [sp, #0]
 8010abe:	69bb      	ldr	r3, [r7, #24]
 8010ac0:	2200      	movs	r2, #0
 8010ac2:	2120      	movs	r1, #32
 8010ac4:	68f8      	ldr	r0, [r7, #12]
 8010ac6:	f000 fb53 	bl	8011170 <OSPI_WaitFlagStateUntilTimeout>
 8010aca:	4603      	mov	r3, r0
 8010acc:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 8010ace:	7ffb      	ldrb	r3, [r7, #31]
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	d14c      	bne.n	8010b6e <HAL_OSPI_Command+0x10e>
    {
      /* Initialize error code */
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8010ad4:	68fb      	ldr	r3, [r7, #12]
 8010ad6:	2200      	movs	r2, #0
 8010ad8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the registers */
      status = OSPI_ConfigCmd(hospi, cmd);
 8010ada:	68b9      	ldr	r1, [r7, #8]
 8010adc:	68f8      	ldr	r0, [r7, #12]
 8010ade:	f000 fb7f 	bl	80111e0 <OSPI_ConfigCmd>
 8010ae2:	4603      	mov	r3, r0
 8010ae4:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 8010ae6:	7ffb      	ldrb	r3, [r7, #31]
 8010ae8:	2b00      	cmp	r3, #0
 8010aea:	d140      	bne.n	8010b6e <HAL_OSPI_Command+0x10e>
      {
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 8010aec:	68bb      	ldr	r3, [r7, #8]
 8010aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010af0:	2b00      	cmp	r3, #0
 8010af2:	d10e      	bne.n	8010b12 <HAL_OSPI_Command+0xb2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until TC flag is set to go back in idle state */
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	9300      	str	r3, [sp, #0]
 8010af8:	69bb      	ldr	r3, [r7, #24]
 8010afa:	2201      	movs	r2, #1
 8010afc:	2102      	movs	r1, #2
 8010afe:	68f8      	ldr	r0, [r7, #12]
 8010b00:	f000 fb36 	bl	8011170 <OSPI_WaitFlagStateUntilTimeout>
 8010b04:	4603      	mov	r3, r0
 8010b06:	77fb      	strb	r3, [r7, #31]

          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8010b08:	68fb      	ldr	r3, [r7, #12]
 8010b0a:	681b      	ldr	r3, [r3, #0]
 8010b0c:	2202      	movs	r2, #2
 8010b0e:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8010b10:	e02d      	b.n	8010b6e <HAL_OSPI_Command+0x10e>
        }
        else
        {
          /* Update the state */
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 8010b12:	68bb      	ldr	r3, [r7, #8]
 8010b14:	681b      	ldr	r3, [r3, #0]
 8010b16:	2b00      	cmp	r3, #0
 8010b18:	d103      	bne.n	8010b22 <HAL_OSPI_Command+0xc2>
          {
            hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8010b1a:	68fb      	ldr	r3, [r7, #12]
 8010b1c:	2204      	movs	r2, #4
 8010b1e:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 8010b20:	e025      	b.n	8010b6e <HAL_OSPI_Command+0x10e>
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 8010b22:	68bb      	ldr	r3, [r7, #8]
 8010b24:	681b      	ldr	r3, [r3, #0]
 8010b26:	2b01      	cmp	r3, #1
 8010b28:	d10b      	bne.n	8010b42 <HAL_OSPI_Command+0xe2>
          {
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 8010b2a:	68fb      	ldr	r3, [r7, #12]
 8010b2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010b2e:	2b24      	cmp	r3, #36	; 0x24
 8010b30:	d103      	bne.n	8010b3a <HAL_OSPI_Command+0xda>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8010b32:	68fb      	ldr	r3, [r7, #12]
 8010b34:	2204      	movs	r2, #4
 8010b36:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 8010b38:	e019      	b.n	8010b6e <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 8010b3a:	68fb      	ldr	r3, [r7, #12]
 8010b3c:	2214      	movs	r2, #20
 8010b3e:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 8010b40:	e015      	b.n	8010b6e <HAL_OSPI_Command+0x10e>
            }
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 8010b42:	68bb      	ldr	r3, [r7, #8]
 8010b44:	681b      	ldr	r3, [r3, #0]
 8010b46:	2b02      	cmp	r3, #2
 8010b48:	d111      	bne.n	8010b6e <HAL_OSPI_Command+0x10e>
          {
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 8010b4a:	68fb      	ldr	r3, [r7, #12]
 8010b4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010b4e:	2b14      	cmp	r3, #20
 8010b50:	d103      	bne.n	8010b5a <HAL_OSPI_Command+0xfa>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8010b52:	68fb      	ldr	r3, [r7, #12]
 8010b54:	2204      	movs	r2, #4
 8010b56:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 8010b58:	e009      	b.n	8010b6e <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 8010b5a:	68fb      	ldr	r3, [r7, #12]
 8010b5c:	2224      	movs	r2, #36	; 0x24
 8010b5e:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 8010b60:	e005      	b.n	8010b6e <HAL_OSPI_Command+0x10e>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 8010b62:	2301      	movs	r3, #1
 8010b64:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8010b66:	68fb      	ldr	r3, [r7, #12]
 8010b68:	2210      	movs	r2, #16
 8010b6a:	655a      	str	r2, [r3, #84]	; 0x54
 8010b6c:	e000      	b.n	8010b70 <HAL_OSPI_Command+0x110>
    if (status == HAL_OK)
 8010b6e:	bf00      	nop
  }

  /* Return function status */
  return status;
 8010b70:	7ffb      	ldrb	r3, [r7, #31]
}
 8010b72:	4618      	mov	r0, r3
 8010b74:	3720      	adds	r7, #32
 8010b76:	46bd      	mov	sp, r7
 8010b78:	bd80      	pop	{r7, pc}

08010b7a <HAL_OSPI_Transmit>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Transmit(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 8010b7a:	b580      	push	{r7, lr}
 8010b7c:	b08a      	sub	sp, #40	; 0x28
 8010b7e:	af02      	add	r7, sp, #8
 8010b80:	60f8      	str	r0, [r7, #12]
 8010b82:	60b9      	str	r1, [r7, #8]
 8010b84:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8010b86:	f7fa ffeb 	bl	800bb60 <HAL_GetTick>
 8010b8a:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8010b8c:	68fb      	ldr	r3, [r7, #12]
 8010b8e:	681b      	ldr	r3, [r3, #0]
 8010b90:	3350      	adds	r3, #80	; 0x50
 8010b92:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 8010b94:	68bb      	ldr	r3, [r7, #8]
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	d105      	bne.n	8010ba6 <HAL_OSPI_Transmit+0x2c>
  {
    status = HAL_ERROR;
 8010b9a:	2301      	movs	r3, #1
 8010b9c:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8010b9e:	68fb      	ldr	r3, [r7, #12]
 8010ba0:	2208      	movs	r2, #8
 8010ba2:	655a      	str	r2, [r3, #84]	; 0x54
 8010ba4:	e057      	b.n	8010c56 <HAL_OSPI_Transmit+0xdc>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8010ba6:	68fb      	ldr	r3, [r7, #12]
 8010ba8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010baa:	2b04      	cmp	r3, #4
 8010bac:	d14e      	bne.n	8010c4c <HAL_OSPI_Transmit+0xd2>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8010bae:	68fb      	ldr	r3, [r7, #12]
 8010bb0:	681b      	ldr	r3, [r3, #0]
 8010bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010bb4:	1c5a      	adds	r2, r3, #1
 8010bb6:	68fb      	ldr	r3, [r7, #12]
 8010bb8:	649a      	str	r2, [r3, #72]	; 0x48
      hospi->XferSize  = hospi->XferCount;
 8010bba:	68fb      	ldr	r3, [r7, #12]
 8010bbc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8010bbe:	68fb      	ldr	r3, [r7, #12]
 8010bc0:	645a      	str	r2, [r3, #68]	; 0x44
      hospi->pBuffPtr  = pData;
 8010bc2:	68fb      	ldr	r3, [r7, #12]
 8010bc4:	68ba      	ldr	r2, [r7, #8]
 8010bc6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Configure CR register with functional mode as indirect write */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8010bc8:	68fb      	ldr	r3, [r7, #12]
 8010bca:	681b      	ldr	r3, [r3, #0]
 8010bcc:	681a      	ldr	r2, [r3, #0]
 8010bce:	68fb      	ldr	r3, [r7, #12]
 8010bd0:	681b      	ldr	r3, [r3, #0]
 8010bd2:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8010bd6:	601a      	str	r2, [r3, #0]

      do
      {
        /* Wait till fifo threshold flag is set to send data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_FT, SET, tickstart, Timeout);
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	9300      	str	r3, [sp, #0]
 8010bdc:	69bb      	ldr	r3, [r7, #24]
 8010bde:	2201      	movs	r2, #1
 8010be0:	2104      	movs	r1, #4
 8010be2:	68f8      	ldr	r0, [r7, #12]
 8010be4:	f000 fac4 	bl	8011170 <OSPI_WaitFlagStateUntilTimeout>
 8010be8:	4603      	mov	r3, r0
 8010bea:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8010bec:	7ffb      	ldrb	r3, [r7, #31]
 8010bee:	2b00      	cmp	r3, #0
 8010bf0:	d113      	bne.n	8010c1a <HAL_OSPI_Transmit+0xa0>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 8010bf2:	68fb      	ldr	r3, [r7, #12]
 8010bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010bf6:	781a      	ldrb	r2, [r3, #0]
 8010bf8:	697b      	ldr	r3, [r7, #20]
 8010bfa:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 8010bfc:	68fb      	ldr	r3, [r7, #12]
 8010bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c00:	1c5a      	adds	r2, r3, #1
 8010c02:	68fb      	ldr	r3, [r7, #12]
 8010c04:	641a      	str	r2, [r3, #64]	; 0x40
        hospi->XferCount--;
 8010c06:	68fb      	ldr	r3, [r7, #12]
 8010c08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010c0a:	1e5a      	subs	r2, r3, #1
 8010c0c:	68fb      	ldr	r3, [r7, #12]
 8010c0e:	649a      	str	r2, [r3, #72]	; 0x48
      } while (hospi->XferCount > 0U);
 8010c10:	68fb      	ldr	r3, [r7, #12]
 8010c12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010c14:	2b00      	cmp	r3, #0
 8010c16:	d1df      	bne.n	8010bd8 <HAL_OSPI_Transmit+0x5e>
 8010c18:	e000      	b.n	8010c1c <HAL_OSPI_Transmit+0xa2>
          break;
 8010c1a:	bf00      	nop

      if (status == HAL_OK)
 8010c1c:	7ffb      	ldrb	r3, [r7, #31]
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	d119      	bne.n	8010c56 <HAL_OSPI_Transmit+0xdc>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	9300      	str	r3, [sp, #0]
 8010c26:	69bb      	ldr	r3, [r7, #24]
 8010c28:	2201      	movs	r2, #1
 8010c2a:	2102      	movs	r1, #2
 8010c2c:	68f8      	ldr	r0, [r7, #12]
 8010c2e:	f000 fa9f 	bl	8011170 <OSPI_WaitFlagStateUntilTimeout>
 8010c32:	4603      	mov	r3, r0
 8010c34:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8010c36:	7ffb      	ldrb	r3, [r7, #31]
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	d10c      	bne.n	8010c56 <HAL_OSPI_Transmit+0xdc>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8010c3c:	68fb      	ldr	r3, [r7, #12]
 8010c3e:	681b      	ldr	r3, [r3, #0]
 8010c40:	2202      	movs	r2, #2
 8010c42:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 8010c44:	68fb      	ldr	r3, [r7, #12]
 8010c46:	2202      	movs	r2, #2
 8010c48:	651a      	str	r2, [r3, #80]	; 0x50
 8010c4a:	e004      	b.n	8010c56 <HAL_OSPI_Transmit+0xdc>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 8010c4c:	2301      	movs	r3, #1
 8010c4e:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8010c50:	68fb      	ldr	r3, [r7, #12]
 8010c52:	2210      	movs	r2, #16
 8010c54:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }

  /* Return function status */
  return status;
 8010c56:	7ffb      	ldrb	r3, [r7, #31]
}
 8010c58:	4618      	mov	r0, r3
 8010c5a:	3720      	adds	r7, #32
 8010c5c:	46bd      	mov	sp, r7
 8010c5e:	bd80      	pop	{r7, pc}

08010c60 <HAL_OSPI_Receive>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Receive(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 8010c60:	b580      	push	{r7, lr}
 8010c62:	b08c      	sub	sp, #48	; 0x30
 8010c64:	af02      	add	r7, sp, #8
 8010c66:	60f8      	str	r0, [r7, #12]
 8010c68:	60b9      	str	r1, [r7, #8]
 8010c6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8010c6c:	f7fa ff78 	bl	800bb60 <HAL_GetTick>
 8010c70:	6238      	str	r0, [r7, #32]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8010c72:	68fb      	ldr	r3, [r7, #12]
 8010c74:	681b      	ldr	r3, [r3, #0]
 8010c76:	3350      	adds	r3, #80	; 0x50
 8010c78:	61fb      	str	r3, [r7, #28]
  uint32_t addr_reg = hospi->Instance->AR;
 8010c7a:	68fb      	ldr	r3, [r7, #12]
 8010c7c:	681b      	ldr	r3, [r3, #0]
 8010c7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010c80:	61bb      	str	r3, [r7, #24]
  uint32_t ir_reg = hospi->Instance->IR;
 8010c82:	68fb      	ldr	r3, [r7, #12]
 8010c84:	681b      	ldr	r3, [r3, #0]
 8010c86:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8010c8a:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 8010c8c:	68bb      	ldr	r3, [r7, #8]
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	d106      	bne.n	8010ca0 <HAL_OSPI_Receive+0x40>
  {
    status = HAL_ERROR;
 8010c92:	2301      	movs	r3, #1
 8010c94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8010c98:	68fb      	ldr	r3, [r7, #12]
 8010c9a:	2208      	movs	r2, #8
 8010c9c:	655a      	str	r2, [r3, #84]	; 0x54
 8010c9e:	e07c      	b.n	8010d9a <HAL_OSPI_Receive+0x13a>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8010ca0:	68fb      	ldr	r3, [r7, #12]
 8010ca2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010ca4:	2b04      	cmp	r3, #4
 8010ca6:	d172      	bne.n	8010d8e <HAL_OSPI_Receive+0x12e>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8010ca8:	68fb      	ldr	r3, [r7, #12]
 8010caa:	681b      	ldr	r3, [r3, #0]
 8010cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010cae:	1c5a      	adds	r2, r3, #1
 8010cb0:	68fb      	ldr	r3, [r7, #12]
 8010cb2:	649a      	str	r2, [r3, #72]	; 0x48
      hospi->XferSize  = hospi->XferCount;
 8010cb4:	68fb      	ldr	r3, [r7, #12]
 8010cb6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8010cb8:	68fb      	ldr	r3, [r7, #12]
 8010cba:	645a      	str	r2, [r3, #68]	; 0x44
      hospi->pBuffPtr  = pData;
 8010cbc:	68fb      	ldr	r3, [r7, #12]
 8010cbe:	68ba      	ldr	r2, [r7, #8]
 8010cc0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Configure CR register with functional mode as indirect read */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8010cc2:	68fb      	ldr	r3, [r7, #12]
 8010cc4:	681b      	ldr	r3, [r3, #0]
 8010cc6:	681b      	ldr	r3, [r3, #0]
 8010cc8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8010ccc:	68fb      	ldr	r3, [r7, #12]
 8010cce:	681b      	ldr	r3, [r3, #0]
 8010cd0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8010cd4:	601a      	str	r2, [r3, #0]

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8010cd6:	68fb      	ldr	r3, [r7, #12]
 8010cd8:	68db      	ldr	r3, [r3, #12]
 8010cda:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8010cde:	d104      	bne.n	8010cea <HAL_OSPI_Receive+0x8a>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 8010ce0:	68fb      	ldr	r3, [r7, #12]
 8010ce2:	681b      	ldr	r3, [r3, #0]
 8010ce4:	69ba      	ldr	r2, [r7, #24]
 8010ce6:	649a      	str	r2, [r3, #72]	; 0x48
 8010ce8:	e011      	b.n	8010d0e <HAL_OSPI_Receive+0xae>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 8010cea:	68fb      	ldr	r3, [r7, #12]
 8010cec:	681b      	ldr	r3, [r3, #0]
 8010cee:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8010cf2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8010cf6:	2b00      	cmp	r3, #0
 8010cf8:	d004      	beq.n	8010d04 <HAL_OSPI_Receive+0xa4>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 8010cfa:	68fb      	ldr	r3, [r7, #12]
 8010cfc:	681b      	ldr	r3, [r3, #0]
 8010cfe:	69ba      	ldr	r2, [r7, #24]
 8010d00:	649a      	str	r2, [r3, #72]	; 0x48
 8010d02:	e004      	b.n	8010d0e <HAL_OSPI_Receive+0xae>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 8010d04:	68fb      	ldr	r3, [r7, #12]
 8010d06:	681b      	ldr	r3, [r3, #0]
 8010d08:	697a      	ldr	r2, [r7, #20]
 8010d0a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
      }

      do
      {
        /* Wait till fifo threshold or transfer complete flags are set to read received data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, (HAL_OSPI_FLAG_FT | HAL_OSPI_FLAG_TC), SET, tickstart, Timeout);
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	9300      	str	r3, [sp, #0]
 8010d12:	6a3b      	ldr	r3, [r7, #32]
 8010d14:	2201      	movs	r2, #1
 8010d16:	2106      	movs	r1, #6
 8010d18:	68f8      	ldr	r0, [r7, #12]
 8010d1a:	f000 fa29 	bl	8011170 <OSPI_WaitFlagStateUntilTimeout>
 8010d1e:	4603      	mov	r3, r0
 8010d20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status != HAL_OK)
 8010d24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	d114      	bne.n	8010d56 <HAL_OSPI_Receive+0xf6>
        {
          break;
        }

        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 8010d2c:	68fb      	ldr	r3, [r7, #12]
 8010d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d30:	69fa      	ldr	r2, [r7, #28]
 8010d32:	7812      	ldrb	r2, [r2, #0]
 8010d34:	b2d2      	uxtb	r2, r2
 8010d36:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 8010d38:	68fb      	ldr	r3, [r7, #12]
 8010d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d3c:	1c5a      	adds	r2, r3, #1
 8010d3e:	68fb      	ldr	r3, [r7, #12]
 8010d40:	641a      	str	r2, [r3, #64]	; 0x40
        hospi->XferCount--;
 8010d42:	68fb      	ldr	r3, [r7, #12]
 8010d44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010d46:	1e5a      	subs	r2, r3, #1
 8010d48:	68fb      	ldr	r3, [r7, #12]
 8010d4a:	649a      	str	r2, [r3, #72]	; 0x48
      } while(hospi->XferCount > 0U);
 8010d4c:	68fb      	ldr	r3, [r7, #12]
 8010d4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010d50:	2b00      	cmp	r3, #0
 8010d52:	d1dc      	bne.n	8010d0e <HAL_OSPI_Receive+0xae>
 8010d54:	e000      	b.n	8010d58 <HAL_OSPI_Receive+0xf8>
          break;
 8010d56:	bf00      	nop

      if (status == HAL_OK)
 8010d58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	d11c      	bne.n	8010d9a <HAL_OSPI_Receive+0x13a>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	9300      	str	r3, [sp, #0]
 8010d64:	6a3b      	ldr	r3, [r7, #32]
 8010d66:	2201      	movs	r2, #1
 8010d68:	2102      	movs	r1, #2
 8010d6a:	68f8      	ldr	r0, [r7, #12]
 8010d6c:	f000 fa00 	bl	8011170 <OSPI_WaitFlagStateUntilTimeout>
 8010d70:	4603      	mov	r3, r0
 8010d72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status == HAL_OK)
 8010d76:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010d7a:	2b00      	cmp	r3, #0
 8010d7c:	d10d      	bne.n	8010d9a <HAL_OSPI_Receive+0x13a>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8010d7e:	68fb      	ldr	r3, [r7, #12]
 8010d80:	681b      	ldr	r3, [r3, #0]
 8010d82:	2202      	movs	r2, #2
 8010d84:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 8010d86:	68fb      	ldr	r3, [r7, #12]
 8010d88:	2202      	movs	r2, #2
 8010d8a:	651a      	str	r2, [r3, #80]	; 0x50
 8010d8c:	e005      	b.n	8010d9a <HAL_OSPI_Receive+0x13a>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 8010d8e:	2301      	movs	r3, #1
 8010d90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8010d94:	68fb      	ldr	r3, [r7, #12]
 8010d96:	2210      	movs	r2, #16
 8010d98:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }

  /* Return function status */
  return status;
 8010d9a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8010d9e:	4618      	mov	r0, r3
 8010da0:	3728      	adds	r7, #40	; 0x28
 8010da2:	46bd      	mov	sp, r7
 8010da4:	bd80      	pop	{r7, pc}

08010da6 <HAL_OSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_AutoPolling(OSPI_HandleTypeDef *hospi, OSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8010da6:	b580      	push	{r7, lr}
 8010da8:	b08a      	sub	sp, #40	; 0x28
 8010daa:	af02      	add	r7, sp, #8
 8010dac:	60f8      	str	r0, [r7, #12]
 8010dae:	60b9      	str	r1, [r7, #8]
 8010db0:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8010db2:	f7fa fed5 	bl	800bb60 <HAL_GetTick>
 8010db6:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = hospi->Instance->AR;
 8010db8:	68fb      	ldr	r3, [r7, #12]
 8010dba:	681b      	ldr	r3, [r3, #0]
 8010dbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010dbe:	617b      	str	r3, [r7, #20]
  uint32_t ir_reg = hospi->Instance->IR;
 8010dc0:	68fb      	ldr	r3, [r7, #12]
 8010dc2:	681b      	ldr	r3, [r3, #0]
 8010dc4:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8010dc8:	613b      	str	r3, [r7, #16]
  assert_param(IS_OSPI_AUTOMATIC_STOP   (cfg->AutomaticStop));
  assert_param(IS_OSPI_INTERVAL         (cfg->Interval));
  assert_param(IS_OSPI_STATUS_BYTES_SIZE(dlr_reg+1U));

  /* Check the state */
  if ((hospi->State == HAL_OSPI_STATE_CMD_CFG) && (cfg->AutomaticStop == HAL_OSPI_AUTOMATIC_STOP_ENABLE))
 8010dca:	68fb      	ldr	r3, [r7, #12]
 8010dcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010dce:	2b04      	cmp	r3, #4
 8010dd0:	d164      	bne.n	8010e9c <HAL_OSPI_AutoPolling+0xf6>
 8010dd2:	68bb      	ldr	r3, [r7, #8]
 8010dd4:	68db      	ldr	r3, [r3, #12]
 8010dd6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8010dda:	d15f      	bne.n	8010e9c <HAL_OSPI_AutoPolling+0xf6>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	9300      	str	r3, [sp, #0]
 8010de0:	69bb      	ldr	r3, [r7, #24]
 8010de2:	2200      	movs	r2, #0
 8010de4:	2120      	movs	r1, #32
 8010de6:	68f8      	ldr	r0, [r7, #12]
 8010de8:	f000 f9c2 	bl	8011170 <OSPI_WaitFlagStateUntilTimeout>
 8010dec:	4603      	mov	r3, r0
 8010dee:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 8010df0:	7ffb      	ldrb	r3, [r7, #31]
 8010df2:	2b00      	cmp	r3, #0
 8010df4:	d158      	bne.n	8010ea8 <HAL_OSPI_AutoPolling+0x102>
    {
      /* Configure registers */
      WRITE_REG (hospi->Instance->PSMAR, cfg->Match);
 8010df6:	68fb      	ldr	r3, [r7, #12]
 8010df8:	681b      	ldr	r3, [r3, #0]
 8010dfa:	68ba      	ldr	r2, [r7, #8]
 8010dfc:	6812      	ldr	r2, [r2, #0]
 8010dfe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      WRITE_REG (hospi->Instance->PSMKR, cfg->Mask);
 8010e02:	68fb      	ldr	r3, [r7, #12]
 8010e04:	681b      	ldr	r3, [r3, #0]
 8010e06:	68ba      	ldr	r2, [r7, #8]
 8010e08:	6852      	ldr	r2, [r2, #4]
 8010e0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      WRITE_REG (hospi->Instance->PIR,   cfg->Interval);
 8010e0e:	68fb      	ldr	r3, [r7, #12]
 8010e10:	681b      	ldr	r3, [r3, #0]
 8010e12:	68ba      	ldr	r2, [r7, #8]
 8010e14:	6912      	ldr	r2, [r2, #16]
 8010e16:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      MODIFY_REG(hospi->Instance->CR,    (OCTOSPI_CR_PMM | OCTOSPI_CR_APMS | OCTOSPI_CR_FMODE),
 8010e1a:	68fb      	ldr	r3, [r7, #12]
 8010e1c:	681b      	ldr	r3, [r3, #0]
 8010e1e:	681b      	ldr	r3, [r3, #0]
 8010e20:	f023 5243 	bic.w	r2, r3, #817889280	; 0x30c00000
 8010e24:	68bb      	ldr	r3, [r7, #8]
 8010e26:	6899      	ldr	r1, [r3, #8]
 8010e28:	68bb      	ldr	r3, [r7, #8]
 8010e2a:	68db      	ldr	r3, [r3, #12]
 8010e2c:	430b      	orrs	r3, r1
 8010e2e:	431a      	orrs	r2, r3
 8010e30:	68fb      	ldr	r3, [r7, #12]
 8010e32:	681b      	ldr	r3, [r3, #0]
 8010e34:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8010e38:	601a      	str	r2, [r3, #0]
                 (cfg->MatchMode | cfg->AutomaticStop | OSPI_FUNCTIONAL_MODE_AUTO_POLLING));

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8010e3a:	68fb      	ldr	r3, [r7, #12]
 8010e3c:	68db      	ldr	r3, [r3, #12]
 8010e3e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8010e42:	d104      	bne.n	8010e4e <HAL_OSPI_AutoPolling+0xa8>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 8010e44:	68fb      	ldr	r3, [r7, #12]
 8010e46:	681b      	ldr	r3, [r3, #0]
 8010e48:	697a      	ldr	r2, [r7, #20]
 8010e4a:	649a      	str	r2, [r3, #72]	; 0x48
 8010e4c:	e011      	b.n	8010e72 <HAL_OSPI_AutoPolling+0xcc>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 8010e4e:	68fb      	ldr	r3, [r7, #12]
 8010e50:	681b      	ldr	r3, [r3, #0]
 8010e52:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8010e56:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8010e5a:	2b00      	cmp	r3, #0
 8010e5c:	d004      	beq.n	8010e68 <HAL_OSPI_AutoPolling+0xc2>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 8010e5e:	68fb      	ldr	r3, [r7, #12]
 8010e60:	681b      	ldr	r3, [r3, #0]
 8010e62:	697a      	ldr	r2, [r7, #20]
 8010e64:	649a      	str	r2, [r3, #72]	; 0x48
 8010e66:	e004      	b.n	8010e72 <HAL_OSPI_AutoPolling+0xcc>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 8010e68:	68fb      	ldr	r3, [r7, #12]
 8010e6a:	681b      	ldr	r3, [r3, #0]
 8010e6c:	693a      	ldr	r2, [r7, #16]
 8010e6e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        }
      }

      /* Wait till status match flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_SM, SET, tickstart, Timeout);
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	9300      	str	r3, [sp, #0]
 8010e76:	69bb      	ldr	r3, [r7, #24]
 8010e78:	2201      	movs	r2, #1
 8010e7a:	2108      	movs	r1, #8
 8010e7c:	68f8      	ldr	r0, [r7, #12]
 8010e7e:	f000 f977 	bl	8011170 <OSPI_WaitFlagStateUntilTimeout>
 8010e82:	4603      	mov	r3, r0
 8010e84:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 8010e86:	7ffb      	ldrb	r3, [r7, #31]
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	d10d      	bne.n	8010ea8 <HAL_OSPI_AutoPolling+0x102>
      {
        /* Clear status match flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_SM);
 8010e8c:	68fb      	ldr	r3, [r7, #12]
 8010e8e:	681b      	ldr	r3, [r3, #0]
 8010e90:	2208      	movs	r2, #8
 8010e92:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 8010e94:	68fb      	ldr	r3, [r7, #12]
 8010e96:	2202      	movs	r2, #2
 8010e98:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 8010e9a:	e005      	b.n	8010ea8 <HAL_OSPI_AutoPolling+0x102>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 8010e9c:	2301      	movs	r3, #1
 8010e9e:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8010ea0:	68fb      	ldr	r3, [r7, #12]
 8010ea2:	2210      	movs	r2, #16
 8010ea4:	655a      	str	r2, [r3, #84]	; 0x54
 8010ea6:	e000      	b.n	8010eaa <HAL_OSPI_AutoPolling+0x104>
    if (status == HAL_OK)
 8010ea8:	bf00      	nop
  }

  /* Return function status */
  return status;
 8010eaa:	7ffb      	ldrb	r3, [r7, #31]
}
 8010eac:	4618      	mov	r0, r3
 8010eae:	3720      	adds	r7, #32
 8010eb0:	46bd      	mov	sp, r7
 8010eb2:	bd80      	pop	{r7, pc}

08010eb4 <HAL_OSPI_MemoryMapped>:
  * @param  cfg   : structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_MemoryMapped(OSPI_HandleTypeDef *hospi, OSPI_MemoryMappedTypeDef *cfg)
{
 8010eb4:	b580      	push	{r7, lr}
 8010eb6:	b086      	sub	sp, #24
 8010eb8:	af02      	add	r7, sp, #8
 8010eba:	6078      	str	r0, [r7, #4]
 8010ebc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8010ebe:	f7fa fe4f 	bl	800bb60 <HAL_GetTick>
 8010ec2:	60b8      	str	r0, [r7, #8]

  /* Check the parameters of the memory-mapped configuration structure */
  assert_param(IS_OSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Check the state */
  if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010ec8:	2b04      	cmp	r3, #4
 8010eca:	d134      	bne.n	8010f36 <HAL_OSPI_MemoryMapped+0x82>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010ed0:	9300      	str	r3, [sp, #0]
 8010ed2:	68bb      	ldr	r3, [r7, #8]
 8010ed4:	2200      	movs	r2, #0
 8010ed6:	2120      	movs	r1, #32
 8010ed8:	6878      	ldr	r0, [r7, #4]
 8010eda:	f000 f949 	bl	8011170 <OSPI_WaitFlagStateUntilTimeout>
 8010ede:	4603      	mov	r3, r0
 8010ee0:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8010ee2:	7bfb      	ldrb	r3, [r7, #15]
 8010ee4:	2b00      	cmp	r3, #0
 8010ee6:	d12b      	bne.n	8010f40 <HAL_OSPI_MemoryMapped+0x8c>
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_BUSY_MEM_MAPPED;
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	2288      	movs	r2, #136	; 0x88
 8010eec:	651a      	str	r2, [r3, #80]	; 0x50

      if (cfg->TimeOutActivation == HAL_OSPI_TIMEOUT_COUNTER_ENABLE)
 8010eee:	683b      	ldr	r3, [r7, #0]
 8010ef0:	681b      	ldr	r3, [r3, #0]
 8010ef2:	2b08      	cmp	r3, #8
 8010ef4:	d111      	bne.n	8010f1a <HAL_OSPI_MemoryMapped+0x66>
      {
        assert_param(IS_OSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure register */
        WRITE_REG(hospi->Instance->LPTR, cfg->TimeOutPeriod);
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	681b      	ldr	r3, [r3, #0]
 8010efa:	683a      	ldr	r2, [r7, #0]
 8010efc:	6852      	ldr	r2, [r2, #4]
 8010efe:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130

        /* Clear flags related to interrupt */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TO);
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	681b      	ldr	r3, [r3, #0]
 8010f06:	2210      	movs	r2, #16
 8010f08:	625a      	str	r2, [r3, #36]	; 0x24

        /* Enable the timeout interrupt */
        __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TO);
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	681b      	ldr	r3, [r3, #0]
 8010f0e:	681a      	ldr	r2, [r3, #0]
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	681b      	ldr	r3, [r3, #0]
 8010f14:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8010f18:	601a      	str	r2, [r3, #0]
      }

      /* Configure CR register with functional mode as memory-mapped */
      MODIFY_REG(hospi->Instance->CR, (OCTOSPI_CR_TCEN | OCTOSPI_CR_FMODE),
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	681b      	ldr	r3, [r3, #0]
 8010f1e:	681a      	ldr	r2, [r3, #0]
 8010f20:	4b0a      	ldr	r3, [pc, #40]	; (8010f4c <HAL_OSPI_MemoryMapped+0x98>)
 8010f22:	4013      	ands	r3, r2
 8010f24:	683a      	ldr	r2, [r7, #0]
 8010f26:	6812      	ldr	r2, [r2, #0]
 8010f28:	431a      	orrs	r2, r3
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	681b      	ldr	r3, [r3, #0]
 8010f2e:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8010f32:	601a      	str	r2, [r3, #0]
 8010f34:	e004      	b.n	8010f40 <HAL_OSPI_MemoryMapped+0x8c>
                 (cfg->TimeOutActivation | OSPI_FUNCTIONAL_MODE_MEMORY_MAPPED));
    }
  }
  else
  {
    status = HAL_ERROR;
 8010f36:	2301      	movs	r3, #1
 8010f38:	73fb      	strb	r3, [r7, #15]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	2210      	movs	r2, #16
 8010f3e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Return function status */
  return status;
 8010f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f42:	4618      	mov	r0, r3
 8010f44:	3710      	adds	r7, #16
 8010f46:	46bd      	mov	sp, r7
 8010f48:	bd80      	pop	{r7, pc}
 8010f4a:	bf00      	nop
 8010f4c:	cffffff7 	.word	0xcffffff7

08010f50 <HAL_OSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_ErrorCallback(OSPI_HandleTypeDef *hospi)
{
 8010f50:	b480      	push	{r7}
 8010f52:	b083      	sub	sp, #12
 8010f54:	af00      	add	r7, sp, #0
 8010f56:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_ErrorCallback could be implemented in the user file
   */
}
 8010f58:	bf00      	nop
 8010f5a:	370c      	adds	r7, #12
 8010f5c:	46bd      	mov	sp, r7
 8010f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f62:	4770      	bx	lr

08010f64 <HAL_OSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_AbortCpltCallback(OSPI_HandleTypeDef *hospi)
{
 8010f64:	b480      	push	{r7}
 8010f66:	b083      	sub	sp, #12
 8010f68:	af00      	add	r7, sp, #0
 8010f6a:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_AbortCpltCallback could be implemented in the user file
   */
}
 8010f6c:	bf00      	nop
 8010f6e:	370c      	adds	r7, #12
 8010f70:	46bd      	mov	sp, r7
 8010f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f76:	4770      	bx	lr

08010f78 <HAL_OSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_FifoThresholdCallback(OSPI_HandleTypeDef *hospi)
{
 8010f78:	b480      	push	{r7}
 8010f7a:	b083      	sub	sp, #12
 8010f7c:	af00      	add	r7, sp, #0
 8010f7e:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 8010f80:	bf00      	nop
 8010f82:	370c      	adds	r7, #12
 8010f84:	46bd      	mov	sp, r7
 8010f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f8a:	4770      	bx	lr

08010f8c <HAL_OSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_CmdCpltCallback(OSPI_HandleTypeDef *hospi)
{
 8010f8c:	b480      	push	{r7}
 8010f8e:	b083      	sub	sp, #12
 8010f90:	af00      	add	r7, sp, #0
 8010f92:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_CmdCpltCallback could be implemented in the user file
   */
}
 8010f94:	bf00      	nop
 8010f96:	370c      	adds	r7, #12
 8010f98:	46bd      	mov	sp, r7
 8010f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f9e:	4770      	bx	lr

08010fa0 <HAL_OSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_RxCpltCallback(OSPI_HandleTypeDef *hospi)
{
 8010fa0:	b480      	push	{r7}
 8010fa2:	b083      	sub	sp, #12
 8010fa4:	af00      	add	r7, sp, #0
 8010fa6:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_RxCpltCallback could be implemented in the user file
   */
}
 8010fa8:	bf00      	nop
 8010faa:	370c      	adds	r7, #12
 8010fac:	46bd      	mov	sp, r7
 8010fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fb2:	4770      	bx	lr

08010fb4 <HAL_OSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
 __weak void HAL_OSPI_TxCpltCallback(OSPI_HandleTypeDef *hospi)
{
 8010fb4:	b480      	push	{r7}
 8010fb6:	b083      	sub	sp, #12
 8010fb8:	af00      	add	r7, sp, #0
 8010fba:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_TxCpltCallback could be implemented in the user file
   */
}
 8010fbc:	bf00      	nop
 8010fbe:	370c      	adds	r7, #12
 8010fc0:	46bd      	mov	sp, r7
 8010fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fc6:	4770      	bx	lr

08010fc8 <HAL_OSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_StatusMatchCallback(OSPI_HandleTypeDef *hospi)
{
 8010fc8:	b480      	push	{r7}
 8010fca:	b083      	sub	sp, #12
 8010fcc:	af00      	add	r7, sp, #0
 8010fce:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_StatusMatchCallback could be implemented in the user file
   */
}
 8010fd0:	bf00      	nop
 8010fd2:	370c      	adds	r7, #12
 8010fd4:	46bd      	mov	sp, r7
 8010fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fda:	4770      	bx	lr

08010fdc <HAL_OSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_TimeOutCallback(OSPI_HandleTypeDef *hospi)
{
 8010fdc:	b480      	push	{r7}
 8010fde:	b083      	sub	sp, #12
 8010fe0:	af00      	add	r7, sp, #0
 8010fe2:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_TimeOutCallback could be implemented in the user file
   */
}
 8010fe4:	bf00      	nop
 8010fe6:	370c      	adds	r7, #12
 8010fe8:	46bd      	mov	sp, r7
 8010fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fee:	4770      	bx	lr

08010ff0 <HAL_OSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hospi : OSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_OSPI_Abort(OSPI_HandleTypeDef *hospi)
{
 8010ff0:	b580      	push	{r7, lr}
 8010ff2:	b088      	sub	sp, #32
 8010ff4:	af02      	add	r7, sp, #8
 8010ff6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010ff8:	2300      	movs	r3, #0
 8010ffa:	75fb      	strb	r3, [r7, #23]
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8010ffc:	f7fa fdb0 	bl	800bb60 <HAL_GetTick>
 8011000:	6138      	str	r0, [r7, #16]

  /* Check if the state is in one of the busy or configured states */
  state = hospi->State;
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011006:	60fb      	str	r3, [r7, #12]
  if (((state & OSPI_BUSY_STATE_MASK) != 0U) || ((state & OSPI_CFG_STATE_MASK) != 0U))
 8011008:	68fb      	ldr	r3, [r7, #12]
 801100a:	f003 0308 	and.w	r3, r3, #8
 801100e:	2b00      	cmp	r3, #0
 8011010:	d104      	bne.n	801101c <HAL_OSPI_Abort+0x2c>
 8011012:	68fb      	ldr	r3, [r7, #12]
 8011014:	f003 0304 	and.w	r3, r3, #4
 8011018:	2b00      	cmp	r3, #0
 801101a:	d052      	beq.n	80110c2 <HAL_OSPI_Abort+0xd2>
  {
    /* Check if the DMA is enabled */
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	681b      	ldr	r3, [r3, #0]
 8011020:	681b      	ldr	r3, [r3, #0]
 8011022:	f003 0304 	and.w	r3, r3, #4
 8011026:	2b00      	cmp	r3, #0
 8011028:	d014      	beq.n	8011054 <HAL_OSPI_Abort+0x64>
    {
      /* Disable the DMA transfer on the OctoSPI side */
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	681b      	ldr	r3, [r3, #0]
 801102e:	681a      	ldr	r2, [r3, #0]
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	681b      	ldr	r3, [r3, #0]
 8011034:	f022 0204 	bic.w	r2, r2, #4
 8011038:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transfer on the DMA side */
      status = HAL_MDMA_Abort(hospi->hmdma);
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801103e:	4618      	mov	r0, r3
 8011040:	f7ff f809 	bl	8010056 <HAL_MDMA_Abort>
 8011044:	4603      	mov	r3, r0
 8011046:	75fb      	strb	r3, [r7, #23]
      if (status != HAL_OK)
 8011048:	7dfb      	ldrb	r3, [r7, #23]
 801104a:	2b00      	cmp	r3, #0
 801104c:	d002      	beq.n	8011054 <HAL_OSPI_Abort+0x64>
      {
        hospi->ErrorCode = HAL_OSPI_ERROR_DMA;
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	2204      	movs	r2, #4
 8011052:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	681b      	ldr	r3, [r3, #0]
 8011058:	6a1b      	ldr	r3, [r3, #32]
 801105a:	f003 0320 	and.w	r3, r3, #32
 801105e:	2b00      	cmp	r3, #0
 8011060:	d02b      	beq.n	80110ba <HAL_OSPI_Abort+0xca>
    {
      /* Perform an abort of the OctoSPI */
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	681b      	ldr	r3, [r3, #0]
 8011066:	681a      	ldr	r2, [r3, #0]
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	681b      	ldr	r3, [r3, #0]
 801106c:	f042 0202 	orr.w	r2, r2, #2
 8011070:	601a      	str	r2, [r3, #0]

      /* Wait until the transfer complete flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, hospi->Timeout);
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011076:	9300      	str	r3, [sp, #0]
 8011078:	693b      	ldr	r3, [r7, #16]
 801107a:	2201      	movs	r2, #1
 801107c:	2102      	movs	r1, #2
 801107e:	6878      	ldr	r0, [r7, #4]
 8011080:	f000 f876 	bl	8011170 <OSPI_WaitFlagStateUntilTimeout>
 8011084:	4603      	mov	r3, r0
 8011086:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8011088:	7dfb      	ldrb	r3, [r7, #23]
 801108a:	2b00      	cmp	r3, #0
 801108c:	d11f      	bne.n	80110ce <HAL_OSPI_Abort+0xde>
      {
        /* Clear transfer complete flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	681b      	ldr	r3, [r3, #0]
 8011092:	2202      	movs	r2, #2
 8011094:	625a      	str	r2, [r3, #36]	; 0x24

        /* Wait until the busy flag is reset to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801109a:	9300      	str	r3, [sp, #0]
 801109c:	693b      	ldr	r3, [r7, #16]
 801109e:	2200      	movs	r2, #0
 80110a0:	2120      	movs	r1, #32
 80110a2:	6878      	ldr	r0, [r7, #4]
 80110a4:	f000 f864 	bl	8011170 <OSPI_WaitFlagStateUntilTimeout>
 80110a8:	4603      	mov	r3, r0
 80110aa:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 80110ac:	7dfb      	ldrb	r3, [r7, #23]
 80110ae:	2b00      	cmp	r3, #0
 80110b0:	d10d      	bne.n	80110ce <HAL_OSPI_Abort+0xde>
        {
          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	2202      	movs	r2, #2
 80110b6:	651a      	str	r2, [r3, #80]	; 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 80110b8:	e009      	b.n	80110ce <HAL_OSPI_Abort+0xde>
      }
    }
    else
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	2202      	movs	r2, #2
 80110be:	651a      	str	r2, [r3, #80]	; 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 80110c0:	e005      	b.n	80110ce <HAL_OSPI_Abort+0xde>
    }
  }
  else
  {
    status = HAL_ERROR;
 80110c2:	2301      	movs	r3, #1
 80110c4:	75fb      	strb	r3, [r7, #23]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	2210      	movs	r2, #16
 80110ca:	655a      	str	r2, [r3, #84]	; 0x54
 80110cc:	e000      	b.n	80110d0 <HAL_OSPI_Abort+0xe0>
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 80110ce:	bf00      	nop
  }

  /* Return function status */
  return status;
 80110d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80110d2:	4618      	mov	r0, r3
 80110d4:	3718      	adds	r7, #24
 80110d6:	46bd      	mov	sp, r7
 80110d8:	bd80      	pop	{r7, pc}

080110da <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 80110da:	b480      	push	{r7}
 80110dc:	b083      	sub	sp, #12
 80110de:	af00      	add	r7, sp, #0
 80110e0:	6078      	str	r0, [r7, #4]
 80110e2:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	683a      	ldr	r2, [r7, #0]
 80110e8:	659a      	str	r2, [r3, #88]	; 0x58
  return HAL_OK;
 80110ea:	2300      	movs	r3, #0
}
 80110ec:	4618      	mov	r0, r3
 80110ee:	370c      	adds	r7, #12
 80110f0:	46bd      	mov	sp, r7
 80110f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110f6:	4770      	bx	lr

080110f8 <OSPI_DMAAbortCplt>:
  * @brief  DMA OSPI abort complete callback.
  * @param  hdma : DMA handle
  * @retval None
  */
static void OSPI_DMAAbortCplt(MDMA_HandleTypeDef *hmdma)
{
 80110f8:	b580      	push	{r7, lr}
 80110fa:	b084      	sub	sp, #16
 80110fc:	af00      	add	r7, sp, #0
 80110fe:	6078      	str	r0, [r7, #4]
  OSPI_HandleTypeDef* hospi = ( OSPI_HandleTypeDef* )(hmdma->Parent);
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011104:	60fb      	str	r3, [r7, #12]
  hospi->XferCount = 0;
 8011106:	68fb      	ldr	r3, [r7, #12]
 8011108:	2200      	movs	r2, #0
 801110a:	649a      	str	r2, [r3, #72]	; 0x48

  /* Check the state */
  if (hospi->State == HAL_OSPI_STATE_ABORT)
 801110c:	68fb      	ldr	r3, [r7, #12]
 801110e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011110:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011114:	d122      	bne.n	801115c <OSPI_DMAAbortCplt+0x64>
  {
    /* DMA abort called by OctoSPI abort */
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8011116:	68fb      	ldr	r3, [r7, #12]
 8011118:	681b      	ldr	r3, [r3, #0]
 801111a:	6a1b      	ldr	r3, [r3, #32]
 801111c:	f003 0320 	and.w	r3, r3, #32
 8011120:	2b00      	cmp	r3, #0
 8011122:	d014      	beq.n	801114e <OSPI_DMAAbortCplt+0x56>
    {
      /* Clear transfer complete flag */
      __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8011124:	68fb      	ldr	r3, [r7, #12]
 8011126:	681b      	ldr	r3, [r3, #0]
 8011128:	2202      	movs	r2, #2
 801112a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enable the transfer complete interrupts */
      __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TC);
 801112c:	68fb      	ldr	r3, [r7, #12]
 801112e:	681b      	ldr	r3, [r3, #0]
 8011130:	681a      	ldr	r2, [r3, #0]
 8011132:	68fb      	ldr	r3, [r7, #12]
 8011134:	681b      	ldr	r3, [r3, #0]
 8011136:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 801113a:	601a      	str	r2, [r3, #0]

      /* Perform an abort of the OctoSPI */
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 801113c:	68fb      	ldr	r3, [r7, #12]
 801113e:	681b      	ldr	r3, [r3, #0]
 8011140:	681a      	ldr	r2, [r3, #0]
 8011142:	68fb      	ldr	r3, [r7, #12]
 8011144:	681b      	ldr	r3, [r3, #0]
 8011146:	f042 0202 	orr.w	r2, r2, #2
 801114a:	601a      	str	r2, [r3, #0]
    hospi->ErrorCallback(hospi);
#else
    HAL_OSPI_ErrorCallback(hospi);
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)*/
  }
}
 801114c:	e00c      	b.n	8011168 <OSPI_DMAAbortCplt+0x70>
      hospi->State = HAL_OSPI_STATE_READY;
 801114e:	68fb      	ldr	r3, [r7, #12]
 8011150:	2202      	movs	r2, #2
 8011152:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_OSPI_AbortCpltCallback(hospi);
 8011154:	68f8      	ldr	r0, [r7, #12]
 8011156:	f7ff ff05 	bl	8010f64 <HAL_OSPI_AbortCpltCallback>
}
 801115a:	e005      	b.n	8011168 <OSPI_DMAAbortCplt+0x70>
    hospi->State = HAL_OSPI_STATE_READY;
 801115c:	68fb      	ldr	r3, [r7, #12]
 801115e:	2202      	movs	r2, #2
 8011160:	651a      	str	r2, [r3, #80]	; 0x50
    HAL_OSPI_ErrorCallback(hospi);
 8011162:	68f8      	ldr	r0, [r7, #12]
 8011164:	f7ff fef4 	bl	8010f50 <HAL_OSPI_ErrorCallback>
}
 8011168:	bf00      	nop
 801116a:	3710      	adds	r7, #16
 801116c:	46bd      	mov	sp, r7
 801116e:	bd80      	pop	{r7, pc}

08011170 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8011170:	b580      	push	{r7, lr}
 8011172:	b084      	sub	sp, #16
 8011174:	af00      	add	r7, sp, #0
 8011176:	60f8      	str	r0, [r7, #12]
 8011178:	60b9      	str	r1, [r7, #8]
 801117a:	603b      	str	r3, [r7, #0]
 801117c:	4613      	mov	r3, r2
 801117e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8011180:	e01a      	b.n	80111b8 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011182:	69bb      	ldr	r3, [r7, #24]
 8011184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011188:	d016      	beq.n	80111b8 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801118a:	f7fa fce9 	bl	800bb60 <HAL_GetTick>
 801118e:	4602      	mov	r2, r0
 8011190:	683b      	ldr	r3, [r7, #0]
 8011192:	1ad3      	subs	r3, r2, r3
 8011194:	69ba      	ldr	r2, [r7, #24]
 8011196:	429a      	cmp	r2, r3
 8011198:	d302      	bcc.n	80111a0 <OSPI_WaitFlagStateUntilTimeout+0x30>
 801119a:	69bb      	ldr	r3, [r7, #24]
 801119c:	2b00      	cmp	r3, #0
 801119e:	d10b      	bne.n	80111b8 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 80111a0:	68fb      	ldr	r3, [r7, #12]
 80111a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80111a6:	651a      	str	r2, [r3, #80]	; 0x50
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 80111a8:	68fb      	ldr	r3, [r7, #12]
 80111aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80111ac:	f043 0201 	orr.w	r2, r3, #1
 80111b0:	68fb      	ldr	r3, [r7, #12]
 80111b2:	655a      	str	r2, [r3, #84]	; 0x54

        return HAL_ERROR;
 80111b4:	2301      	movs	r3, #1
 80111b6:	e00e      	b.n	80111d6 <OSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 80111b8:	68fb      	ldr	r3, [r7, #12]
 80111ba:	681b      	ldr	r3, [r3, #0]
 80111bc:	6a1a      	ldr	r2, [r3, #32]
 80111be:	68bb      	ldr	r3, [r7, #8]
 80111c0:	4013      	ands	r3, r2
 80111c2:	2b00      	cmp	r3, #0
 80111c4:	bf14      	ite	ne
 80111c6:	2301      	movne	r3, #1
 80111c8:	2300      	moveq	r3, #0
 80111ca:	b2db      	uxtb	r3, r3
 80111cc:	461a      	mov	r2, r3
 80111ce:	79fb      	ldrb	r3, [r7, #7]
 80111d0:	429a      	cmp	r2, r3
 80111d2:	d1d6      	bne.n	8011182 <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80111d4:	2300      	movs	r3, #0
}
 80111d6:	4618      	mov	r0, r3
 80111d8:	3710      	adds	r7, #16
 80111da:	46bd      	mov	sp, r7
 80111dc:	bd80      	pop	{r7, pc}
	...

080111e0 <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
 80111e0:	b480      	push	{r7}
 80111e2:	b089      	sub	sp, #36	; 0x24
 80111e4:	af00      	add	r7, sp, #0
 80111e6:	6078      	str	r0, [r7, #4]
 80111e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80111ea:	2300      	movs	r3, #0
 80111ec:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	681b      	ldr	r3, [r3, #0]
 80111f2:	681a      	ldr	r2, [r3, #0]
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	681b      	ldr	r3, [r3, #0]
 80111f8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80111fc:	601a      	str	r2, [r3, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	689b      	ldr	r3, [r3, #8]
 8011202:	2b00      	cmp	r3, #0
 8011204:	d10a      	bne.n	801121c <OSPI_ConfigCmd+0x3c>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FSEL, cmd->FlashId);
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	681b      	ldr	r3, [r3, #0]
 801120a:	681b      	ldr	r3, [r3, #0]
 801120c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8011210:	683b      	ldr	r3, [r7, #0]
 8011212:	685a      	ldr	r2, [r3, #4]
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	681b      	ldr	r3, [r3, #0]
 8011218:	430a      	orrs	r2, r1
 801121a:	601a      	str	r2, [r3, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 801121c:	683b      	ldr	r3, [r7, #0]
 801121e:	681b      	ldr	r3, [r3, #0]
 8011220:	2b02      	cmp	r3, #2
 8011222:	d114      	bne.n	801124e <OSPI_ConfigCmd+0x6e>
  {
    ccr_reg = &(hospi->Instance->WCCR);
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	681b      	ldr	r3, [r3, #0]
 8011228:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 801122c:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WTCR);
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	681b      	ldr	r3, [r3, #0]
 8011232:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8011236:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WIR);
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	681b      	ldr	r3, [r3, #0]
 801123c:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8011240:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WABR);
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	681b      	ldr	r3, [r3, #0]
 8011246:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 801124a:	60fb      	str	r3, [r7, #12]
 801124c:	e02c      	b.n	80112a8 <OSPI_ConfigCmd+0xc8>
  }
  else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG)
 801124e:	683b      	ldr	r3, [r7, #0]
 8011250:	681b      	ldr	r3, [r3, #0]
 8011252:	2b03      	cmp	r3, #3
 8011254:	d114      	bne.n	8011280 <OSPI_ConfigCmd+0xa0>
  {
    ccr_reg = &(hospi->Instance->WPCCR);
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	681b      	ldr	r3, [r3, #0]
 801125a:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 801125e:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WPTCR);
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	681b      	ldr	r3, [r3, #0]
 8011264:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8011268:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WPIR);
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	681b      	ldr	r3, [r3, #0]
 801126e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8011272:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WPABR);
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	681b      	ldr	r3, [r3, #0]
 8011278:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 801127c:	60fb      	str	r3, [r7, #12]
 801127e:	e013      	b.n	80112a8 <OSPI_ConfigCmd+0xc8>
  }
  else
  {
    ccr_reg = &(hospi->Instance->CCR);
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	681b      	ldr	r3, [r3, #0]
 8011284:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8011288:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->TCR);
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	681b      	ldr	r3, [r3, #0]
 801128e:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8011292:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->IR);
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	681b      	ldr	r3, [r3, #0]
 8011298:	f503 7388 	add.w	r3, r3, #272	; 0x110
 801129c:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->ABR);
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	681b      	ldr	r3, [r3, #0]
 80112a2:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80112a6:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 80112a8:	683b      	ldr	r3, [r7, #0]
 80112aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80112ac:	683b      	ldr	r3, [r7, #0]
 80112ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80112b0:	431a      	orrs	r2, r3
 80112b2:	69bb      	ldr	r3, [r7, #24]
 80112b4:	601a      	str	r2, [r3, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 80112b6:	683b      	ldr	r3, [r7, #0]
 80112b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112ba:	2b00      	cmp	r3, #0
 80112bc:	d012      	beq.n	80112e4 <OSPI_ConfigCmd+0x104>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 80112be:	683b      	ldr	r3, [r7, #0]
 80112c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80112c2:	68fb      	ldr	r3, [r7, #12]
 80112c4:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 80112c6:	69bb      	ldr	r3, [r7, #24]
 80112c8:	681b      	ldr	r3, [r3, #0]
 80112ca:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80112ce:	683b      	ldr	r3, [r7, #0]
 80112d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80112d2:	683b      	ldr	r3, [r7, #0]
 80112d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80112d6:	4319      	orrs	r1, r3
 80112d8:	683b      	ldr	r3, [r7, #0]
 80112da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80112dc:	430b      	orrs	r3, r1
 80112de:	431a      	orrs	r2, r3
 80112e0:	69bb      	ldr	r3, [r7, #24]
 80112e2:	601a      	str	r2, [r3, #0]
                           (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 80112e4:	697b      	ldr	r3, [r7, #20]
 80112e6:	681b      	ldr	r3, [r3, #0]
 80112e8:	f023 021f 	bic.w	r2, r3, #31
 80112ec:	683b      	ldr	r3, [r7, #0]
 80112ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80112f0:	431a      	orrs	r2, r3
 80112f2:	697b      	ldr	r3, [r7, #20]
 80112f4:	601a      	str	r2, [r3, #0]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 80112f6:	683b      	ldr	r3, [r7, #0]
 80112f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80112fa:	2b00      	cmp	r3, #0
 80112fc:	d009      	beq.n	8011312 <OSPI_ConfigCmd+0x132>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 80112fe:	683b      	ldr	r3, [r7, #0]
 8011300:	681b      	ldr	r3, [r3, #0]
 8011302:	2b00      	cmp	r3, #0
 8011304:	d105      	bne.n	8011312 <OSPI_ConfigCmd+0x132>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 8011306:	683b      	ldr	r3, [r7, #0]
 8011308:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	681b      	ldr	r3, [r3, #0]
 801130e:	3a01      	subs	r2, #1
 8011310:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 8011312:	683b      	ldr	r3, [r7, #0]
 8011314:	68db      	ldr	r3, [r3, #12]
 8011316:	2b00      	cmp	r3, #0
 8011318:	f000 8095 	beq.w	8011446 <OSPI_ConfigCmd+0x266>
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 801131c:	683b      	ldr	r3, [r7, #0]
 801131e:	69db      	ldr	r3, [r3, #28]
 8011320:	2b00      	cmp	r3, #0
 8011322:	d053      	beq.n	80113cc <OSPI_ConfigCmd+0x1ec>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8011324:	683b      	ldr	r3, [r7, #0]
 8011326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011328:	2b00      	cmp	r3, #0
 801132a:	d01e      	beq.n	801136a <OSPI_ConfigCmd+0x18a>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 801132c:	69bb      	ldr	r3, [r7, #24]
 801132e:	681a      	ldr	r2, [r3, #0]
 8011330:	4b64      	ldr	r3, [pc, #400]	; (80114c4 <OSPI_ConfigCmd+0x2e4>)
 8011332:	4013      	ands	r3, r2
 8011334:	683a      	ldr	r2, [r7, #0]
 8011336:	68d1      	ldr	r1, [r2, #12]
 8011338:	683a      	ldr	r2, [r7, #0]
 801133a:	6952      	ldr	r2, [r2, #20]
 801133c:	4311      	orrs	r1, r2
 801133e:	683a      	ldr	r2, [r7, #0]
 8011340:	6912      	ldr	r2, [r2, #16]
 8011342:	4311      	orrs	r1, r2
 8011344:	683a      	ldr	r2, [r7, #0]
 8011346:	69d2      	ldr	r2, [r2, #28]
 8011348:	4311      	orrs	r1, r2
 801134a:	683a      	ldr	r2, [r7, #0]
 801134c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801134e:	4311      	orrs	r1, r2
 8011350:	683a      	ldr	r2, [r7, #0]
 8011352:	6a12      	ldr	r2, [r2, #32]
 8011354:	4311      	orrs	r1, r2
 8011356:	683a      	ldr	r2, [r7, #0]
 8011358:	6b92      	ldr	r2, [r2, #56]	; 0x38
 801135a:	4311      	orrs	r1, r2
 801135c:	683a      	ldr	r2, [r7, #0]
 801135e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8011360:	430a      	orrs	r2, r1
 8011362:	431a      	orrs	r2, r3
 8011364:	69bb      	ldr	r3, [r7, #24]
 8011366:	601a      	str	r2, [r3, #0]
 8011368:	e026      	b.n	80113b8 <OSPI_ConfigCmd+0x1d8>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 801136a:	69bb      	ldr	r3, [r7, #24]
 801136c:	681a      	ldr	r2, [r3, #0]
 801136e:	4b56      	ldr	r3, [pc, #344]	; (80114c8 <OSPI_ConfigCmd+0x2e8>)
 8011370:	4013      	ands	r3, r2
 8011372:	683a      	ldr	r2, [r7, #0]
 8011374:	68d1      	ldr	r1, [r2, #12]
 8011376:	683a      	ldr	r2, [r7, #0]
 8011378:	6952      	ldr	r2, [r2, #20]
 801137a:	4311      	orrs	r1, r2
 801137c:	683a      	ldr	r2, [r7, #0]
 801137e:	6912      	ldr	r2, [r2, #16]
 8011380:	4311      	orrs	r1, r2
 8011382:	683a      	ldr	r2, [r7, #0]
 8011384:	69d2      	ldr	r2, [r2, #28]
 8011386:	4311      	orrs	r1, r2
 8011388:	683a      	ldr	r2, [r7, #0]
 801138a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801138c:	4311      	orrs	r1, r2
 801138e:	683a      	ldr	r2, [r7, #0]
 8011390:	6a12      	ldr	r2, [r2, #32]
 8011392:	430a      	orrs	r2, r1
 8011394:	431a      	orrs	r2, r3
 8011396:	69bb      	ldr	r3, [r7, #24]
 8011398:	601a      	str	r2, [r3, #0]
                                OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
                               (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize |
                                cmd->AddressMode     | cmd->AddressDtrMode     | cmd->AddressSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801139e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80113a2:	d109      	bne.n	80113b8 <OSPI_ConfigCmd+0x1d8>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 80113a4:	683b      	ldr	r3, [r7, #0]
 80113a6:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 80113a8:	2b08      	cmp	r3, #8
 80113aa:	d105      	bne.n	80113b8 <OSPI_ConfigCmd+0x1d8>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 80113ac:	69bb      	ldr	r3, [r7, #24]
 80113ae:	681b      	ldr	r3, [r3, #0]
 80113b0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80113b4:	69bb      	ldr	r3, [r7, #24]
 80113b6:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 80113b8:	683b      	ldr	r3, [r7, #0]
 80113ba:	689a      	ldr	r2, [r3, #8]
 80113bc:	693b      	ldr	r3, [r7, #16]
 80113be:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hospi->Instance->AR = cmd->Address;
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	681b      	ldr	r3, [r3, #0]
 80113c4:	683a      	ldr	r2, [r7, #0]
 80113c6:	6992      	ldr	r2, [r2, #24]
 80113c8:	649a      	str	r2, [r3, #72]	; 0x48
 80113ca:	e074      	b.n	80114b6 <OSPI_ConfigCmd+0x2d6>
    }
    else
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 80113cc:	683b      	ldr	r3, [r7, #0]
 80113ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	d015      	beq.n	8011400 <OSPI_ConfigCmd+0x220>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 80113d4:	69bb      	ldr	r3, [r7, #24]
 80113d6:	681a      	ldr	r2, [r3, #0]
 80113d8:	4b3c      	ldr	r3, [pc, #240]	; (80114cc <OSPI_ConfigCmd+0x2ec>)
 80113da:	4013      	ands	r3, r2
 80113dc:	683a      	ldr	r2, [r7, #0]
 80113de:	68d1      	ldr	r1, [r2, #12]
 80113e0:	683a      	ldr	r2, [r7, #0]
 80113e2:	6952      	ldr	r2, [r2, #20]
 80113e4:	4311      	orrs	r1, r2
 80113e6:	683a      	ldr	r2, [r7, #0]
 80113e8:	6912      	ldr	r2, [r2, #16]
 80113ea:	4311      	orrs	r1, r2
 80113ec:	683a      	ldr	r2, [r7, #0]
 80113ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80113f0:	4311      	orrs	r1, r2
 80113f2:	683a      	ldr	r2, [r7, #0]
 80113f4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80113f6:	430a      	orrs	r2, r1
 80113f8:	431a      	orrs	r2, r3
 80113fa:	69bb      	ldr	r3, [r7, #24]
 80113fc:	601a      	str	r2, [r3, #0]
 80113fe:	e01d      	b.n	801143c <OSPI_ConfigCmd+0x25c>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 8011400:	69bb      	ldr	r3, [r7, #24]
 8011402:	681b      	ldr	r3, [r3, #0]
 8011404:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8011408:	683b      	ldr	r3, [r7, #0]
 801140a:	68d9      	ldr	r1, [r3, #12]
 801140c:	683b      	ldr	r3, [r7, #0]
 801140e:	695b      	ldr	r3, [r3, #20]
 8011410:	4319      	orrs	r1, r3
 8011412:	683b      	ldr	r3, [r7, #0]
 8011414:	691b      	ldr	r3, [r3, #16]
 8011416:	430b      	orrs	r3, r1
 8011418:	431a      	orrs	r2, r3
 801141a:	69bb      	ldr	r3, [r7, #24]
 801141c:	601a      	str	r2, [r3, #0]
                               (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011422:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011426:	d109      	bne.n	801143c <OSPI_ConfigCmd+0x25c>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 8011428:	683b      	ldr	r3, [r7, #0]
 801142a:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 801142c:	2b08      	cmp	r3, #8
 801142e:	d105      	bne.n	801143c <OSPI_ConfigCmd+0x25c>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 8011430:	69bb      	ldr	r3, [r7, #24]
 8011432:	681b      	ldr	r3, [r3, #0]
 8011434:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8011438:	69bb      	ldr	r3, [r7, #24]
 801143a:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 801143c:	683b      	ldr	r3, [r7, #0]
 801143e:	689a      	ldr	r2, [r3, #8]
 8011440:	693b      	ldr	r3, [r7, #16]
 8011442:	601a      	str	r2, [r3, #0]
 8011444:	e037      	b.n	80114b6 <OSPI_ConfigCmd+0x2d6>

    }
  }
  else
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 8011446:	683b      	ldr	r3, [r7, #0]
 8011448:	69db      	ldr	r3, [r3, #28]
 801144a:	2b00      	cmp	r3, #0
 801144c:	d02e      	beq.n	80114ac <OSPI_ConfigCmd+0x2cc>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 801144e:	683b      	ldr	r3, [r7, #0]
 8011450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011452:	2b00      	cmp	r3, #0
 8011454:	d015      	beq.n	8011482 <OSPI_ConfigCmd+0x2a2>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 8011456:	69bb      	ldr	r3, [r7, #24]
 8011458:	681a      	ldr	r2, [r3, #0]
 801145a:	4b1d      	ldr	r3, [pc, #116]	; (80114d0 <OSPI_ConfigCmd+0x2f0>)
 801145c:	4013      	ands	r3, r2
 801145e:	683a      	ldr	r2, [r7, #0]
 8011460:	69d1      	ldr	r1, [r2, #28]
 8011462:	683a      	ldr	r2, [r7, #0]
 8011464:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8011466:	4311      	orrs	r1, r2
 8011468:	683a      	ldr	r2, [r7, #0]
 801146a:	6a12      	ldr	r2, [r2, #32]
 801146c:	4311      	orrs	r1, r2
 801146e:	683a      	ldr	r2, [r7, #0]
 8011470:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8011472:	4311      	orrs	r1, r2
 8011474:	683a      	ldr	r2, [r7, #0]
 8011476:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8011478:	430a      	orrs	r2, r1
 801147a:	431a      	orrs	r2, r3
 801147c:	69bb      	ldr	r3, [r7, #24]
 801147e:	601a      	str	r2, [r3, #0]
 8011480:	e00e      	b.n	80114a0 <OSPI_ConfigCmd+0x2c0>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 8011482:	69bb      	ldr	r3, [r7, #24]
 8011484:	681b      	ldr	r3, [r3, #0]
 8011486:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 801148a:	683b      	ldr	r3, [r7, #0]
 801148c:	69d9      	ldr	r1, [r3, #28]
 801148e:	683b      	ldr	r3, [r7, #0]
 8011490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011492:	4319      	orrs	r1, r3
 8011494:	683b      	ldr	r3, [r7, #0]
 8011496:	6a1b      	ldr	r3, [r3, #32]
 8011498:	430b      	orrs	r3, r1
 801149a:	431a      	orrs	r2, r3
 801149c:	69bb      	ldr	r3, [r7, #24]
 801149e:	601a      	str	r2, [r3, #0]
                               (cmd->AddressMode | cmd->AddressDtrMode | cmd->AddressSize));
      }

      /* Configure the AR register with the instruction value */
      hospi->Instance->AR = cmd->Address;
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	681b      	ldr	r3, [r3, #0]
 80114a4:	683a      	ldr	r2, [r7, #0]
 80114a6:	6992      	ldr	r2, [r2, #24]
 80114a8:	649a      	str	r2, [r3, #72]	; 0x48
 80114aa:	e004      	b.n	80114b6 <OSPI_ConfigCmd+0x2d6>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
 80114ac:	2301      	movs	r3, #1
 80114ae:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	2208      	movs	r2, #8
 80114b4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }

  /* Return function status */
  return status;
 80114b6:	7ffb      	ldrb	r3, [r7, #31]
}
 80114b8:	4618      	mov	r0, r3
 80114ba:	3724      	adds	r7, #36	; 0x24
 80114bc:	46bd      	mov	sp, r7
 80114be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114c2:	4770      	bx	lr
 80114c4:	f0ffc0c0 	.word	0xf0ffc0c0
 80114c8:	ffffc0c0 	.word	0xffffc0c0
 80114cc:	f0ffffc0 	.word	0xf0ffffc0
 80114d0:	f0ffc0ff 	.word	0xf0ffc0ff

080114d4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80114d4:	b580      	push	{r7, lr}
 80114d6:	b084      	sub	sp, #16
 80114d8:	af00      	add	r7, sp, #0
 80114da:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80114dc:	4b29      	ldr	r3, [pc, #164]	; (8011584 <HAL_PWREx_ConfigSupply+0xb0>)
 80114de:	68db      	ldr	r3, [r3, #12]
 80114e0:	f003 0307 	and.w	r3, r3, #7
 80114e4:	2b06      	cmp	r3, #6
 80114e6:	d00a      	beq.n	80114fe <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80114e8:	4b26      	ldr	r3, [pc, #152]	; (8011584 <HAL_PWREx_ConfigSupply+0xb0>)
 80114ea:	68db      	ldr	r3, [r3, #12]
 80114ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80114f0:	687a      	ldr	r2, [r7, #4]
 80114f2:	429a      	cmp	r2, r3
 80114f4:	d001      	beq.n	80114fa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80114f6:	2301      	movs	r3, #1
 80114f8:	e040      	b.n	801157c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80114fa:	2300      	movs	r3, #0
 80114fc:	e03e      	b.n	801157c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80114fe:	4b21      	ldr	r3, [pc, #132]	; (8011584 <HAL_PWREx_ConfigSupply+0xb0>)
 8011500:	68db      	ldr	r3, [r3, #12]
 8011502:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8011506:	491f      	ldr	r1, [pc, #124]	; (8011584 <HAL_PWREx_ConfigSupply+0xb0>)
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	4313      	orrs	r3, r2
 801150c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 801150e:	f7fa fb27 	bl	800bb60 <HAL_GetTick>
 8011512:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8011514:	e009      	b.n	801152a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8011516:	f7fa fb23 	bl	800bb60 <HAL_GetTick>
 801151a:	4602      	mov	r2, r0
 801151c:	68fb      	ldr	r3, [r7, #12]
 801151e:	1ad3      	subs	r3, r2, r3
 8011520:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8011524:	d901      	bls.n	801152a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8011526:	2301      	movs	r3, #1
 8011528:	e028      	b.n	801157c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 801152a:	4b16      	ldr	r3, [pc, #88]	; (8011584 <HAL_PWREx_ConfigSupply+0xb0>)
 801152c:	685b      	ldr	r3, [r3, #4]
 801152e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011532:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011536:	d1ee      	bne.n	8011516 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8011538:	687b      	ldr	r3, [r7, #4]
 801153a:	2b1e      	cmp	r3, #30
 801153c:	d008      	beq.n	8011550 <HAL_PWREx_ConfigSupply+0x7c>
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	2b2e      	cmp	r3, #46	; 0x2e
 8011542:	d005      	beq.n	8011550 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	2b1d      	cmp	r3, #29
 8011548:	d002      	beq.n	8011550 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	2b2d      	cmp	r3, #45	; 0x2d
 801154e:	d114      	bne.n	801157a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8011550:	f7fa fb06 	bl	800bb60 <HAL_GetTick>
 8011554:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8011556:	e009      	b.n	801156c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8011558:	f7fa fb02 	bl	800bb60 <HAL_GetTick>
 801155c:	4602      	mov	r2, r0
 801155e:	68fb      	ldr	r3, [r7, #12]
 8011560:	1ad3      	subs	r3, r2, r3
 8011562:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8011566:	d901      	bls.n	801156c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8011568:	2301      	movs	r3, #1
 801156a:	e007      	b.n	801157c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 801156c:	4b05      	ldr	r3, [pc, #20]	; (8011584 <HAL_PWREx_ConfigSupply+0xb0>)
 801156e:	68db      	ldr	r3, [r3, #12]
 8011570:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011574:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011578:	d1ee      	bne.n	8011558 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 801157a:	2300      	movs	r3, #0
}
 801157c:	4618      	mov	r0, r3
 801157e:	3710      	adds	r7, #16
 8011580:	46bd      	mov	sp, r7
 8011582:	bd80      	pop	{r7, pc}
 8011584:	58024800 	.word	0x58024800

08011588 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8011588:	b580      	push	{r7, lr}
 801158a:	b08c      	sub	sp, #48	; 0x30
 801158c:	af00      	add	r7, sp, #0
 801158e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	2b00      	cmp	r3, #0
 8011594:	d102      	bne.n	801159c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8011596:	2301      	movs	r3, #1
 8011598:	f000 bc1f 	b.w	8011dda <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	681b      	ldr	r3, [r3, #0]
 80115a0:	f003 0301 	and.w	r3, r3, #1
 80115a4:	2b00      	cmp	r3, #0
 80115a6:	f000 80b3 	beq.w	8011710 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80115aa:	4b95      	ldr	r3, [pc, #596]	; (8011800 <HAL_RCC_OscConfig+0x278>)
 80115ac:	691b      	ldr	r3, [r3, #16]
 80115ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80115b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80115b4:	4b92      	ldr	r3, [pc, #584]	; (8011800 <HAL_RCC_OscConfig+0x278>)
 80115b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80115b8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80115ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115bc:	2b10      	cmp	r3, #16
 80115be:	d007      	beq.n	80115d0 <HAL_RCC_OscConfig+0x48>
 80115c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115c2:	2b18      	cmp	r3, #24
 80115c4:	d112      	bne.n	80115ec <HAL_RCC_OscConfig+0x64>
 80115c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115c8:	f003 0303 	and.w	r3, r3, #3
 80115cc:	2b02      	cmp	r3, #2
 80115ce:	d10d      	bne.n	80115ec <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80115d0:	4b8b      	ldr	r3, [pc, #556]	; (8011800 <HAL_RCC_OscConfig+0x278>)
 80115d2:	681b      	ldr	r3, [r3, #0]
 80115d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80115d8:	2b00      	cmp	r3, #0
 80115da:	f000 8098 	beq.w	801170e <HAL_RCC_OscConfig+0x186>
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	685b      	ldr	r3, [r3, #4]
 80115e2:	2b00      	cmp	r3, #0
 80115e4:	f040 8093 	bne.w	801170e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80115e8:	2301      	movs	r3, #1
 80115ea:	e3f6      	b.n	8011dda <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	685b      	ldr	r3, [r3, #4]
 80115f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80115f4:	d106      	bne.n	8011604 <HAL_RCC_OscConfig+0x7c>
 80115f6:	4b82      	ldr	r3, [pc, #520]	; (8011800 <HAL_RCC_OscConfig+0x278>)
 80115f8:	681b      	ldr	r3, [r3, #0]
 80115fa:	4a81      	ldr	r2, [pc, #516]	; (8011800 <HAL_RCC_OscConfig+0x278>)
 80115fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011600:	6013      	str	r3, [r2, #0]
 8011602:	e058      	b.n	80116b6 <HAL_RCC_OscConfig+0x12e>
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	685b      	ldr	r3, [r3, #4]
 8011608:	2b00      	cmp	r3, #0
 801160a:	d112      	bne.n	8011632 <HAL_RCC_OscConfig+0xaa>
 801160c:	4b7c      	ldr	r3, [pc, #496]	; (8011800 <HAL_RCC_OscConfig+0x278>)
 801160e:	681b      	ldr	r3, [r3, #0]
 8011610:	4a7b      	ldr	r2, [pc, #492]	; (8011800 <HAL_RCC_OscConfig+0x278>)
 8011612:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011616:	6013      	str	r3, [r2, #0]
 8011618:	4b79      	ldr	r3, [pc, #484]	; (8011800 <HAL_RCC_OscConfig+0x278>)
 801161a:	681b      	ldr	r3, [r3, #0]
 801161c:	4a78      	ldr	r2, [pc, #480]	; (8011800 <HAL_RCC_OscConfig+0x278>)
 801161e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8011622:	6013      	str	r3, [r2, #0]
 8011624:	4b76      	ldr	r3, [pc, #472]	; (8011800 <HAL_RCC_OscConfig+0x278>)
 8011626:	681b      	ldr	r3, [r3, #0]
 8011628:	4a75      	ldr	r2, [pc, #468]	; (8011800 <HAL_RCC_OscConfig+0x278>)
 801162a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801162e:	6013      	str	r3, [r2, #0]
 8011630:	e041      	b.n	80116b6 <HAL_RCC_OscConfig+0x12e>
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	685b      	ldr	r3, [r3, #4]
 8011636:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801163a:	d112      	bne.n	8011662 <HAL_RCC_OscConfig+0xda>
 801163c:	4b70      	ldr	r3, [pc, #448]	; (8011800 <HAL_RCC_OscConfig+0x278>)
 801163e:	681b      	ldr	r3, [r3, #0]
 8011640:	4a6f      	ldr	r2, [pc, #444]	; (8011800 <HAL_RCC_OscConfig+0x278>)
 8011642:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8011646:	6013      	str	r3, [r2, #0]
 8011648:	4b6d      	ldr	r3, [pc, #436]	; (8011800 <HAL_RCC_OscConfig+0x278>)
 801164a:	681b      	ldr	r3, [r3, #0]
 801164c:	4a6c      	ldr	r2, [pc, #432]	; (8011800 <HAL_RCC_OscConfig+0x278>)
 801164e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8011652:	6013      	str	r3, [r2, #0]
 8011654:	4b6a      	ldr	r3, [pc, #424]	; (8011800 <HAL_RCC_OscConfig+0x278>)
 8011656:	681b      	ldr	r3, [r3, #0]
 8011658:	4a69      	ldr	r2, [pc, #420]	; (8011800 <HAL_RCC_OscConfig+0x278>)
 801165a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801165e:	6013      	str	r3, [r2, #0]
 8011660:	e029      	b.n	80116b6 <HAL_RCC_OscConfig+0x12e>
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	685b      	ldr	r3, [r3, #4]
 8011666:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 801166a:	d112      	bne.n	8011692 <HAL_RCC_OscConfig+0x10a>
 801166c:	4b64      	ldr	r3, [pc, #400]	; (8011800 <HAL_RCC_OscConfig+0x278>)
 801166e:	681b      	ldr	r3, [r3, #0]
 8011670:	4a63      	ldr	r2, [pc, #396]	; (8011800 <HAL_RCC_OscConfig+0x278>)
 8011672:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8011676:	6013      	str	r3, [r2, #0]
 8011678:	4b61      	ldr	r3, [pc, #388]	; (8011800 <HAL_RCC_OscConfig+0x278>)
 801167a:	681b      	ldr	r3, [r3, #0]
 801167c:	4a60      	ldr	r2, [pc, #384]	; (8011800 <HAL_RCC_OscConfig+0x278>)
 801167e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011682:	6013      	str	r3, [r2, #0]
 8011684:	4b5e      	ldr	r3, [pc, #376]	; (8011800 <HAL_RCC_OscConfig+0x278>)
 8011686:	681b      	ldr	r3, [r3, #0]
 8011688:	4a5d      	ldr	r2, [pc, #372]	; (8011800 <HAL_RCC_OscConfig+0x278>)
 801168a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801168e:	6013      	str	r3, [r2, #0]
 8011690:	e011      	b.n	80116b6 <HAL_RCC_OscConfig+0x12e>
 8011692:	4b5b      	ldr	r3, [pc, #364]	; (8011800 <HAL_RCC_OscConfig+0x278>)
 8011694:	681b      	ldr	r3, [r3, #0]
 8011696:	4a5a      	ldr	r2, [pc, #360]	; (8011800 <HAL_RCC_OscConfig+0x278>)
 8011698:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801169c:	6013      	str	r3, [r2, #0]
 801169e:	4b58      	ldr	r3, [pc, #352]	; (8011800 <HAL_RCC_OscConfig+0x278>)
 80116a0:	681b      	ldr	r3, [r3, #0]
 80116a2:	4a57      	ldr	r2, [pc, #348]	; (8011800 <HAL_RCC_OscConfig+0x278>)
 80116a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80116a8:	6013      	str	r3, [r2, #0]
 80116aa:	4b55      	ldr	r3, [pc, #340]	; (8011800 <HAL_RCC_OscConfig+0x278>)
 80116ac:	681b      	ldr	r3, [r3, #0]
 80116ae:	4a54      	ldr	r2, [pc, #336]	; (8011800 <HAL_RCC_OscConfig+0x278>)
 80116b0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80116b4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	685b      	ldr	r3, [r3, #4]
 80116ba:	2b00      	cmp	r3, #0
 80116bc:	d013      	beq.n	80116e6 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80116be:	f7fa fa4f 	bl	800bb60 <HAL_GetTick>
 80116c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80116c4:	e008      	b.n	80116d8 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80116c6:	f7fa fa4b 	bl	800bb60 <HAL_GetTick>
 80116ca:	4602      	mov	r2, r0
 80116cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116ce:	1ad3      	subs	r3, r2, r3
 80116d0:	2b64      	cmp	r3, #100	; 0x64
 80116d2:	d901      	bls.n	80116d8 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 80116d4:	2303      	movs	r3, #3
 80116d6:	e380      	b.n	8011dda <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80116d8:	4b49      	ldr	r3, [pc, #292]	; (8011800 <HAL_RCC_OscConfig+0x278>)
 80116da:	681b      	ldr	r3, [r3, #0]
 80116dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	d0f0      	beq.n	80116c6 <HAL_RCC_OscConfig+0x13e>
 80116e4:	e014      	b.n	8011710 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80116e6:	f7fa fa3b 	bl	800bb60 <HAL_GetTick>
 80116ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80116ec:	e008      	b.n	8011700 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80116ee:	f7fa fa37 	bl	800bb60 <HAL_GetTick>
 80116f2:	4602      	mov	r2, r0
 80116f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116f6:	1ad3      	subs	r3, r2, r3
 80116f8:	2b64      	cmp	r3, #100	; 0x64
 80116fa:	d901      	bls.n	8011700 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 80116fc:	2303      	movs	r3, #3
 80116fe:	e36c      	b.n	8011dda <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8011700:	4b3f      	ldr	r3, [pc, #252]	; (8011800 <HAL_RCC_OscConfig+0x278>)
 8011702:	681b      	ldr	r3, [r3, #0]
 8011704:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011708:	2b00      	cmp	r3, #0
 801170a:	d1f0      	bne.n	80116ee <HAL_RCC_OscConfig+0x166>
 801170c:	e000      	b.n	8011710 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801170e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	681b      	ldr	r3, [r3, #0]
 8011714:	f003 0302 	and.w	r3, r3, #2
 8011718:	2b00      	cmp	r3, #0
 801171a:	f000 808c 	beq.w	8011836 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801171e:	4b38      	ldr	r3, [pc, #224]	; (8011800 <HAL_RCC_OscConfig+0x278>)
 8011720:	691b      	ldr	r3, [r3, #16]
 8011722:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011726:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8011728:	4b35      	ldr	r3, [pc, #212]	; (8011800 <HAL_RCC_OscConfig+0x278>)
 801172a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801172c:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 801172e:	6a3b      	ldr	r3, [r7, #32]
 8011730:	2b00      	cmp	r3, #0
 8011732:	d007      	beq.n	8011744 <HAL_RCC_OscConfig+0x1bc>
 8011734:	6a3b      	ldr	r3, [r7, #32]
 8011736:	2b18      	cmp	r3, #24
 8011738:	d137      	bne.n	80117aa <HAL_RCC_OscConfig+0x222>
 801173a:	69fb      	ldr	r3, [r7, #28]
 801173c:	f003 0303 	and.w	r3, r3, #3
 8011740:	2b00      	cmp	r3, #0
 8011742:	d132      	bne.n	80117aa <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8011744:	4b2e      	ldr	r3, [pc, #184]	; (8011800 <HAL_RCC_OscConfig+0x278>)
 8011746:	681b      	ldr	r3, [r3, #0]
 8011748:	f003 0304 	and.w	r3, r3, #4
 801174c:	2b00      	cmp	r3, #0
 801174e:	d005      	beq.n	801175c <HAL_RCC_OscConfig+0x1d4>
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	68db      	ldr	r3, [r3, #12]
 8011754:	2b00      	cmp	r3, #0
 8011756:	d101      	bne.n	801175c <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8011758:	2301      	movs	r3, #1
 801175a:	e33e      	b.n	8011dda <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 801175c:	4b28      	ldr	r3, [pc, #160]	; (8011800 <HAL_RCC_OscConfig+0x278>)
 801175e:	681b      	ldr	r3, [r3, #0]
 8011760:	f023 0219 	bic.w	r2, r3, #25
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	68db      	ldr	r3, [r3, #12]
 8011768:	4925      	ldr	r1, [pc, #148]	; (8011800 <HAL_RCC_OscConfig+0x278>)
 801176a:	4313      	orrs	r3, r2
 801176c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801176e:	f7fa f9f7 	bl	800bb60 <HAL_GetTick>
 8011772:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8011774:	e008      	b.n	8011788 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8011776:	f7fa f9f3 	bl	800bb60 <HAL_GetTick>
 801177a:	4602      	mov	r2, r0
 801177c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801177e:	1ad3      	subs	r3, r2, r3
 8011780:	2b02      	cmp	r3, #2
 8011782:	d901      	bls.n	8011788 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8011784:	2303      	movs	r3, #3
 8011786:	e328      	b.n	8011dda <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8011788:	4b1d      	ldr	r3, [pc, #116]	; (8011800 <HAL_RCC_OscConfig+0x278>)
 801178a:	681b      	ldr	r3, [r3, #0]
 801178c:	f003 0304 	and.w	r3, r3, #4
 8011790:	2b00      	cmp	r3, #0
 8011792:	d0f0      	beq.n	8011776 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8011794:	4b1a      	ldr	r3, [pc, #104]	; (8011800 <HAL_RCC_OscConfig+0x278>)
 8011796:	685b      	ldr	r3, [r3, #4]
 8011798:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	691b      	ldr	r3, [r3, #16]
 80117a0:	061b      	lsls	r3, r3, #24
 80117a2:	4917      	ldr	r1, [pc, #92]	; (8011800 <HAL_RCC_OscConfig+0x278>)
 80117a4:	4313      	orrs	r3, r2
 80117a6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80117a8:	e045      	b.n	8011836 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	68db      	ldr	r3, [r3, #12]
 80117ae:	2b00      	cmp	r3, #0
 80117b0:	d028      	beq.n	8011804 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80117b2:	4b13      	ldr	r3, [pc, #76]	; (8011800 <HAL_RCC_OscConfig+0x278>)
 80117b4:	681b      	ldr	r3, [r3, #0]
 80117b6:	f023 0219 	bic.w	r2, r3, #25
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	68db      	ldr	r3, [r3, #12]
 80117be:	4910      	ldr	r1, [pc, #64]	; (8011800 <HAL_RCC_OscConfig+0x278>)
 80117c0:	4313      	orrs	r3, r2
 80117c2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80117c4:	f7fa f9cc 	bl	800bb60 <HAL_GetTick>
 80117c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80117ca:	e008      	b.n	80117de <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80117cc:	f7fa f9c8 	bl	800bb60 <HAL_GetTick>
 80117d0:	4602      	mov	r2, r0
 80117d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117d4:	1ad3      	subs	r3, r2, r3
 80117d6:	2b02      	cmp	r3, #2
 80117d8:	d901      	bls.n	80117de <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 80117da:	2303      	movs	r3, #3
 80117dc:	e2fd      	b.n	8011dda <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80117de:	4b08      	ldr	r3, [pc, #32]	; (8011800 <HAL_RCC_OscConfig+0x278>)
 80117e0:	681b      	ldr	r3, [r3, #0]
 80117e2:	f003 0304 	and.w	r3, r3, #4
 80117e6:	2b00      	cmp	r3, #0
 80117e8:	d0f0      	beq.n	80117cc <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80117ea:	4b05      	ldr	r3, [pc, #20]	; (8011800 <HAL_RCC_OscConfig+0x278>)
 80117ec:	685b      	ldr	r3, [r3, #4]
 80117ee:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	691b      	ldr	r3, [r3, #16]
 80117f6:	061b      	lsls	r3, r3, #24
 80117f8:	4901      	ldr	r1, [pc, #4]	; (8011800 <HAL_RCC_OscConfig+0x278>)
 80117fa:	4313      	orrs	r3, r2
 80117fc:	604b      	str	r3, [r1, #4]
 80117fe:	e01a      	b.n	8011836 <HAL_RCC_OscConfig+0x2ae>
 8011800:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8011804:	4b97      	ldr	r3, [pc, #604]	; (8011a64 <HAL_RCC_OscConfig+0x4dc>)
 8011806:	681b      	ldr	r3, [r3, #0]
 8011808:	4a96      	ldr	r2, [pc, #600]	; (8011a64 <HAL_RCC_OscConfig+0x4dc>)
 801180a:	f023 0301 	bic.w	r3, r3, #1
 801180e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011810:	f7fa f9a6 	bl	800bb60 <HAL_GetTick>
 8011814:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8011816:	e008      	b.n	801182a <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8011818:	f7fa f9a2 	bl	800bb60 <HAL_GetTick>
 801181c:	4602      	mov	r2, r0
 801181e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011820:	1ad3      	subs	r3, r2, r3
 8011822:	2b02      	cmp	r3, #2
 8011824:	d901      	bls.n	801182a <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8011826:	2303      	movs	r3, #3
 8011828:	e2d7      	b.n	8011dda <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801182a:	4b8e      	ldr	r3, [pc, #568]	; (8011a64 <HAL_RCC_OscConfig+0x4dc>)
 801182c:	681b      	ldr	r3, [r3, #0]
 801182e:	f003 0304 	and.w	r3, r3, #4
 8011832:	2b00      	cmp	r3, #0
 8011834:	d1f0      	bne.n	8011818 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	681b      	ldr	r3, [r3, #0]
 801183a:	f003 0310 	and.w	r3, r3, #16
 801183e:	2b00      	cmp	r3, #0
 8011840:	d06a      	beq.n	8011918 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8011842:	4b88      	ldr	r3, [pc, #544]	; (8011a64 <HAL_RCC_OscConfig+0x4dc>)
 8011844:	691b      	ldr	r3, [r3, #16]
 8011846:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801184a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801184c:	4b85      	ldr	r3, [pc, #532]	; (8011a64 <HAL_RCC_OscConfig+0x4dc>)
 801184e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011850:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8011852:	69bb      	ldr	r3, [r7, #24]
 8011854:	2b08      	cmp	r3, #8
 8011856:	d007      	beq.n	8011868 <HAL_RCC_OscConfig+0x2e0>
 8011858:	69bb      	ldr	r3, [r7, #24]
 801185a:	2b18      	cmp	r3, #24
 801185c:	d11b      	bne.n	8011896 <HAL_RCC_OscConfig+0x30e>
 801185e:	697b      	ldr	r3, [r7, #20]
 8011860:	f003 0303 	and.w	r3, r3, #3
 8011864:	2b01      	cmp	r3, #1
 8011866:	d116      	bne.n	8011896 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8011868:	4b7e      	ldr	r3, [pc, #504]	; (8011a64 <HAL_RCC_OscConfig+0x4dc>)
 801186a:	681b      	ldr	r3, [r3, #0]
 801186c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011870:	2b00      	cmp	r3, #0
 8011872:	d005      	beq.n	8011880 <HAL_RCC_OscConfig+0x2f8>
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	69db      	ldr	r3, [r3, #28]
 8011878:	2b80      	cmp	r3, #128	; 0x80
 801187a:	d001      	beq.n	8011880 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 801187c:	2301      	movs	r3, #1
 801187e:	e2ac      	b.n	8011dda <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8011880:	4b78      	ldr	r3, [pc, #480]	; (8011a64 <HAL_RCC_OscConfig+0x4dc>)
 8011882:	68db      	ldr	r3, [r3, #12]
 8011884:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	6a1b      	ldr	r3, [r3, #32]
 801188c:	061b      	lsls	r3, r3, #24
 801188e:	4975      	ldr	r1, [pc, #468]	; (8011a64 <HAL_RCC_OscConfig+0x4dc>)
 8011890:	4313      	orrs	r3, r2
 8011892:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8011894:	e040      	b.n	8011918 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	69db      	ldr	r3, [r3, #28]
 801189a:	2b00      	cmp	r3, #0
 801189c:	d023      	beq.n	80118e6 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 801189e:	4b71      	ldr	r3, [pc, #452]	; (8011a64 <HAL_RCC_OscConfig+0x4dc>)
 80118a0:	681b      	ldr	r3, [r3, #0]
 80118a2:	4a70      	ldr	r2, [pc, #448]	; (8011a64 <HAL_RCC_OscConfig+0x4dc>)
 80118a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80118a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80118aa:	f7fa f959 	bl	800bb60 <HAL_GetTick>
 80118ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80118b0:	e008      	b.n	80118c4 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80118b2:	f7fa f955 	bl	800bb60 <HAL_GetTick>
 80118b6:	4602      	mov	r2, r0
 80118b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118ba:	1ad3      	subs	r3, r2, r3
 80118bc:	2b02      	cmp	r3, #2
 80118be:	d901      	bls.n	80118c4 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 80118c0:	2303      	movs	r3, #3
 80118c2:	e28a      	b.n	8011dda <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80118c4:	4b67      	ldr	r3, [pc, #412]	; (8011a64 <HAL_RCC_OscConfig+0x4dc>)
 80118c6:	681b      	ldr	r3, [r3, #0]
 80118c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80118cc:	2b00      	cmp	r3, #0
 80118ce:	d0f0      	beq.n	80118b2 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80118d0:	4b64      	ldr	r3, [pc, #400]	; (8011a64 <HAL_RCC_OscConfig+0x4dc>)
 80118d2:	68db      	ldr	r3, [r3, #12]
 80118d4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	6a1b      	ldr	r3, [r3, #32]
 80118dc:	061b      	lsls	r3, r3, #24
 80118de:	4961      	ldr	r1, [pc, #388]	; (8011a64 <HAL_RCC_OscConfig+0x4dc>)
 80118e0:	4313      	orrs	r3, r2
 80118e2:	60cb      	str	r3, [r1, #12]
 80118e4:	e018      	b.n	8011918 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80118e6:	4b5f      	ldr	r3, [pc, #380]	; (8011a64 <HAL_RCC_OscConfig+0x4dc>)
 80118e8:	681b      	ldr	r3, [r3, #0]
 80118ea:	4a5e      	ldr	r2, [pc, #376]	; (8011a64 <HAL_RCC_OscConfig+0x4dc>)
 80118ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80118f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80118f2:	f7fa f935 	bl	800bb60 <HAL_GetTick>
 80118f6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80118f8:	e008      	b.n	801190c <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80118fa:	f7fa f931 	bl	800bb60 <HAL_GetTick>
 80118fe:	4602      	mov	r2, r0
 8011900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011902:	1ad3      	subs	r3, r2, r3
 8011904:	2b02      	cmp	r3, #2
 8011906:	d901      	bls.n	801190c <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8011908:	2303      	movs	r3, #3
 801190a:	e266      	b.n	8011dda <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 801190c:	4b55      	ldr	r3, [pc, #340]	; (8011a64 <HAL_RCC_OscConfig+0x4dc>)
 801190e:	681b      	ldr	r3, [r3, #0]
 8011910:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011914:	2b00      	cmp	r3, #0
 8011916:	d1f0      	bne.n	80118fa <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	681b      	ldr	r3, [r3, #0]
 801191c:	f003 0308 	and.w	r3, r3, #8
 8011920:	2b00      	cmp	r3, #0
 8011922:	d036      	beq.n	8011992 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	695b      	ldr	r3, [r3, #20]
 8011928:	2b00      	cmp	r3, #0
 801192a:	d019      	beq.n	8011960 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801192c:	4b4d      	ldr	r3, [pc, #308]	; (8011a64 <HAL_RCC_OscConfig+0x4dc>)
 801192e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011930:	4a4c      	ldr	r2, [pc, #304]	; (8011a64 <HAL_RCC_OscConfig+0x4dc>)
 8011932:	f043 0301 	orr.w	r3, r3, #1
 8011936:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011938:	f7fa f912 	bl	800bb60 <HAL_GetTick>
 801193c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801193e:	e008      	b.n	8011952 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8011940:	f7fa f90e 	bl	800bb60 <HAL_GetTick>
 8011944:	4602      	mov	r2, r0
 8011946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011948:	1ad3      	subs	r3, r2, r3
 801194a:	2b02      	cmp	r3, #2
 801194c:	d901      	bls.n	8011952 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 801194e:	2303      	movs	r3, #3
 8011950:	e243      	b.n	8011dda <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8011952:	4b44      	ldr	r3, [pc, #272]	; (8011a64 <HAL_RCC_OscConfig+0x4dc>)
 8011954:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011956:	f003 0302 	and.w	r3, r3, #2
 801195a:	2b00      	cmp	r3, #0
 801195c:	d0f0      	beq.n	8011940 <HAL_RCC_OscConfig+0x3b8>
 801195e:	e018      	b.n	8011992 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8011960:	4b40      	ldr	r3, [pc, #256]	; (8011a64 <HAL_RCC_OscConfig+0x4dc>)
 8011962:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011964:	4a3f      	ldr	r2, [pc, #252]	; (8011a64 <HAL_RCC_OscConfig+0x4dc>)
 8011966:	f023 0301 	bic.w	r3, r3, #1
 801196a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801196c:	f7fa f8f8 	bl	800bb60 <HAL_GetTick>
 8011970:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8011972:	e008      	b.n	8011986 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8011974:	f7fa f8f4 	bl	800bb60 <HAL_GetTick>
 8011978:	4602      	mov	r2, r0
 801197a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801197c:	1ad3      	subs	r3, r2, r3
 801197e:	2b02      	cmp	r3, #2
 8011980:	d901      	bls.n	8011986 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8011982:	2303      	movs	r3, #3
 8011984:	e229      	b.n	8011dda <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8011986:	4b37      	ldr	r3, [pc, #220]	; (8011a64 <HAL_RCC_OscConfig+0x4dc>)
 8011988:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801198a:	f003 0302 	and.w	r3, r3, #2
 801198e:	2b00      	cmp	r3, #0
 8011990:	d1f0      	bne.n	8011974 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	681b      	ldr	r3, [r3, #0]
 8011996:	f003 0320 	and.w	r3, r3, #32
 801199a:	2b00      	cmp	r3, #0
 801199c:	d036      	beq.n	8011a0c <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	699b      	ldr	r3, [r3, #24]
 80119a2:	2b00      	cmp	r3, #0
 80119a4:	d019      	beq.n	80119da <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80119a6:	4b2f      	ldr	r3, [pc, #188]	; (8011a64 <HAL_RCC_OscConfig+0x4dc>)
 80119a8:	681b      	ldr	r3, [r3, #0]
 80119aa:	4a2e      	ldr	r2, [pc, #184]	; (8011a64 <HAL_RCC_OscConfig+0x4dc>)
 80119ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80119b0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80119b2:	f7fa f8d5 	bl	800bb60 <HAL_GetTick>
 80119b6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80119b8:	e008      	b.n	80119cc <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80119ba:	f7fa f8d1 	bl	800bb60 <HAL_GetTick>
 80119be:	4602      	mov	r2, r0
 80119c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119c2:	1ad3      	subs	r3, r2, r3
 80119c4:	2b02      	cmp	r3, #2
 80119c6:	d901      	bls.n	80119cc <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80119c8:	2303      	movs	r3, #3
 80119ca:	e206      	b.n	8011dda <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80119cc:	4b25      	ldr	r3, [pc, #148]	; (8011a64 <HAL_RCC_OscConfig+0x4dc>)
 80119ce:	681b      	ldr	r3, [r3, #0]
 80119d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80119d4:	2b00      	cmp	r3, #0
 80119d6:	d0f0      	beq.n	80119ba <HAL_RCC_OscConfig+0x432>
 80119d8:	e018      	b.n	8011a0c <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80119da:	4b22      	ldr	r3, [pc, #136]	; (8011a64 <HAL_RCC_OscConfig+0x4dc>)
 80119dc:	681b      	ldr	r3, [r3, #0]
 80119de:	4a21      	ldr	r2, [pc, #132]	; (8011a64 <HAL_RCC_OscConfig+0x4dc>)
 80119e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80119e4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80119e6:	f7fa f8bb 	bl	800bb60 <HAL_GetTick>
 80119ea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80119ec:	e008      	b.n	8011a00 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80119ee:	f7fa f8b7 	bl	800bb60 <HAL_GetTick>
 80119f2:	4602      	mov	r2, r0
 80119f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119f6:	1ad3      	subs	r3, r2, r3
 80119f8:	2b02      	cmp	r3, #2
 80119fa:	d901      	bls.n	8011a00 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 80119fc:	2303      	movs	r3, #3
 80119fe:	e1ec      	b.n	8011dda <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8011a00:	4b18      	ldr	r3, [pc, #96]	; (8011a64 <HAL_RCC_OscConfig+0x4dc>)
 8011a02:	681b      	ldr	r3, [r3, #0]
 8011a04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011a08:	2b00      	cmp	r3, #0
 8011a0a:	d1f0      	bne.n	80119ee <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	681b      	ldr	r3, [r3, #0]
 8011a10:	f003 0304 	and.w	r3, r3, #4
 8011a14:	2b00      	cmp	r3, #0
 8011a16:	f000 80af 	beq.w	8011b78 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8011a1a:	4b13      	ldr	r3, [pc, #76]	; (8011a68 <HAL_RCC_OscConfig+0x4e0>)
 8011a1c:	681b      	ldr	r3, [r3, #0]
 8011a1e:	4a12      	ldr	r2, [pc, #72]	; (8011a68 <HAL_RCC_OscConfig+0x4e0>)
 8011a20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011a24:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8011a26:	f7fa f89b 	bl	800bb60 <HAL_GetTick>
 8011a2a:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8011a2c:	e008      	b.n	8011a40 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8011a2e:	f7fa f897 	bl	800bb60 <HAL_GetTick>
 8011a32:	4602      	mov	r2, r0
 8011a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a36:	1ad3      	subs	r3, r2, r3
 8011a38:	2b64      	cmp	r3, #100	; 0x64
 8011a3a:	d901      	bls.n	8011a40 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8011a3c:	2303      	movs	r3, #3
 8011a3e:	e1cc      	b.n	8011dda <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8011a40:	4b09      	ldr	r3, [pc, #36]	; (8011a68 <HAL_RCC_OscConfig+0x4e0>)
 8011a42:	681b      	ldr	r3, [r3, #0]
 8011a44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011a48:	2b00      	cmp	r3, #0
 8011a4a:	d0f0      	beq.n	8011a2e <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	689b      	ldr	r3, [r3, #8]
 8011a50:	2b01      	cmp	r3, #1
 8011a52:	d10b      	bne.n	8011a6c <HAL_RCC_OscConfig+0x4e4>
 8011a54:	4b03      	ldr	r3, [pc, #12]	; (8011a64 <HAL_RCC_OscConfig+0x4dc>)
 8011a56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011a58:	4a02      	ldr	r2, [pc, #8]	; (8011a64 <HAL_RCC_OscConfig+0x4dc>)
 8011a5a:	f043 0301 	orr.w	r3, r3, #1
 8011a5e:	6713      	str	r3, [r2, #112]	; 0x70
 8011a60:	e05b      	b.n	8011b1a <HAL_RCC_OscConfig+0x592>
 8011a62:	bf00      	nop
 8011a64:	58024400 	.word	0x58024400
 8011a68:	58024800 	.word	0x58024800
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	689b      	ldr	r3, [r3, #8]
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	d112      	bne.n	8011a9a <HAL_RCC_OscConfig+0x512>
 8011a74:	4b9d      	ldr	r3, [pc, #628]	; (8011cec <HAL_RCC_OscConfig+0x764>)
 8011a76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011a78:	4a9c      	ldr	r2, [pc, #624]	; (8011cec <HAL_RCC_OscConfig+0x764>)
 8011a7a:	f023 0301 	bic.w	r3, r3, #1
 8011a7e:	6713      	str	r3, [r2, #112]	; 0x70
 8011a80:	4b9a      	ldr	r3, [pc, #616]	; (8011cec <HAL_RCC_OscConfig+0x764>)
 8011a82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011a84:	4a99      	ldr	r2, [pc, #612]	; (8011cec <HAL_RCC_OscConfig+0x764>)
 8011a86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011a8a:	6713      	str	r3, [r2, #112]	; 0x70
 8011a8c:	4b97      	ldr	r3, [pc, #604]	; (8011cec <HAL_RCC_OscConfig+0x764>)
 8011a8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011a90:	4a96      	ldr	r2, [pc, #600]	; (8011cec <HAL_RCC_OscConfig+0x764>)
 8011a92:	f023 0304 	bic.w	r3, r3, #4
 8011a96:	6713      	str	r3, [r2, #112]	; 0x70
 8011a98:	e03f      	b.n	8011b1a <HAL_RCC_OscConfig+0x592>
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	689b      	ldr	r3, [r3, #8]
 8011a9e:	2b05      	cmp	r3, #5
 8011aa0:	d112      	bne.n	8011ac8 <HAL_RCC_OscConfig+0x540>
 8011aa2:	4b92      	ldr	r3, [pc, #584]	; (8011cec <HAL_RCC_OscConfig+0x764>)
 8011aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011aa6:	4a91      	ldr	r2, [pc, #580]	; (8011cec <HAL_RCC_OscConfig+0x764>)
 8011aa8:	f043 0304 	orr.w	r3, r3, #4
 8011aac:	6713      	str	r3, [r2, #112]	; 0x70
 8011aae:	4b8f      	ldr	r3, [pc, #572]	; (8011cec <HAL_RCC_OscConfig+0x764>)
 8011ab0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011ab2:	4a8e      	ldr	r2, [pc, #568]	; (8011cec <HAL_RCC_OscConfig+0x764>)
 8011ab4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011ab8:	6713      	str	r3, [r2, #112]	; 0x70
 8011aba:	4b8c      	ldr	r3, [pc, #560]	; (8011cec <HAL_RCC_OscConfig+0x764>)
 8011abc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011abe:	4a8b      	ldr	r2, [pc, #556]	; (8011cec <HAL_RCC_OscConfig+0x764>)
 8011ac0:	f043 0301 	orr.w	r3, r3, #1
 8011ac4:	6713      	str	r3, [r2, #112]	; 0x70
 8011ac6:	e028      	b.n	8011b1a <HAL_RCC_OscConfig+0x592>
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	689b      	ldr	r3, [r3, #8]
 8011acc:	2b85      	cmp	r3, #133	; 0x85
 8011ace:	d112      	bne.n	8011af6 <HAL_RCC_OscConfig+0x56e>
 8011ad0:	4b86      	ldr	r3, [pc, #536]	; (8011cec <HAL_RCC_OscConfig+0x764>)
 8011ad2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011ad4:	4a85      	ldr	r2, [pc, #532]	; (8011cec <HAL_RCC_OscConfig+0x764>)
 8011ad6:	f043 0304 	orr.w	r3, r3, #4
 8011ada:	6713      	str	r3, [r2, #112]	; 0x70
 8011adc:	4b83      	ldr	r3, [pc, #524]	; (8011cec <HAL_RCC_OscConfig+0x764>)
 8011ade:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011ae0:	4a82      	ldr	r2, [pc, #520]	; (8011cec <HAL_RCC_OscConfig+0x764>)
 8011ae2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011ae6:	6713      	str	r3, [r2, #112]	; 0x70
 8011ae8:	4b80      	ldr	r3, [pc, #512]	; (8011cec <HAL_RCC_OscConfig+0x764>)
 8011aea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011aec:	4a7f      	ldr	r2, [pc, #508]	; (8011cec <HAL_RCC_OscConfig+0x764>)
 8011aee:	f043 0301 	orr.w	r3, r3, #1
 8011af2:	6713      	str	r3, [r2, #112]	; 0x70
 8011af4:	e011      	b.n	8011b1a <HAL_RCC_OscConfig+0x592>
 8011af6:	4b7d      	ldr	r3, [pc, #500]	; (8011cec <HAL_RCC_OscConfig+0x764>)
 8011af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011afa:	4a7c      	ldr	r2, [pc, #496]	; (8011cec <HAL_RCC_OscConfig+0x764>)
 8011afc:	f023 0301 	bic.w	r3, r3, #1
 8011b00:	6713      	str	r3, [r2, #112]	; 0x70
 8011b02:	4b7a      	ldr	r3, [pc, #488]	; (8011cec <HAL_RCC_OscConfig+0x764>)
 8011b04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011b06:	4a79      	ldr	r2, [pc, #484]	; (8011cec <HAL_RCC_OscConfig+0x764>)
 8011b08:	f023 0304 	bic.w	r3, r3, #4
 8011b0c:	6713      	str	r3, [r2, #112]	; 0x70
 8011b0e:	4b77      	ldr	r3, [pc, #476]	; (8011cec <HAL_RCC_OscConfig+0x764>)
 8011b10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011b12:	4a76      	ldr	r2, [pc, #472]	; (8011cec <HAL_RCC_OscConfig+0x764>)
 8011b14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011b18:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	689b      	ldr	r3, [r3, #8]
 8011b1e:	2b00      	cmp	r3, #0
 8011b20:	d015      	beq.n	8011b4e <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011b22:	f7fa f81d 	bl	800bb60 <HAL_GetTick>
 8011b26:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8011b28:	e00a      	b.n	8011b40 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8011b2a:	f7fa f819 	bl	800bb60 <HAL_GetTick>
 8011b2e:	4602      	mov	r2, r0
 8011b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b32:	1ad3      	subs	r3, r2, r3
 8011b34:	f241 3288 	movw	r2, #5000	; 0x1388
 8011b38:	4293      	cmp	r3, r2
 8011b3a:	d901      	bls.n	8011b40 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8011b3c:	2303      	movs	r3, #3
 8011b3e:	e14c      	b.n	8011dda <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8011b40:	4b6a      	ldr	r3, [pc, #424]	; (8011cec <HAL_RCC_OscConfig+0x764>)
 8011b42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011b44:	f003 0302 	and.w	r3, r3, #2
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	d0ee      	beq.n	8011b2a <HAL_RCC_OscConfig+0x5a2>
 8011b4c:	e014      	b.n	8011b78 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011b4e:	f7fa f807 	bl	800bb60 <HAL_GetTick>
 8011b52:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8011b54:	e00a      	b.n	8011b6c <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8011b56:	f7fa f803 	bl	800bb60 <HAL_GetTick>
 8011b5a:	4602      	mov	r2, r0
 8011b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b5e:	1ad3      	subs	r3, r2, r3
 8011b60:	f241 3288 	movw	r2, #5000	; 0x1388
 8011b64:	4293      	cmp	r3, r2
 8011b66:	d901      	bls.n	8011b6c <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8011b68:	2303      	movs	r3, #3
 8011b6a:	e136      	b.n	8011dda <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8011b6c:	4b5f      	ldr	r3, [pc, #380]	; (8011cec <HAL_RCC_OscConfig+0x764>)
 8011b6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011b70:	f003 0302 	and.w	r3, r3, #2
 8011b74:	2b00      	cmp	r3, #0
 8011b76:	d1ee      	bne.n	8011b56 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b7c:	2b00      	cmp	r3, #0
 8011b7e:	f000 812b 	beq.w	8011dd8 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8011b82:	4b5a      	ldr	r3, [pc, #360]	; (8011cec <HAL_RCC_OscConfig+0x764>)
 8011b84:	691b      	ldr	r3, [r3, #16]
 8011b86:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011b8a:	2b18      	cmp	r3, #24
 8011b8c:	f000 80bb 	beq.w	8011d06 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b94:	2b02      	cmp	r3, #2
 8011b96:	f040 8095 	bne.w	8011cc4 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8011b9a:	4b54      	ldr	r3, [pc, #336]	; (8011cec <HAL_RCC_OscConfig+0x764>)
 8011b9c:	681b      	ldr	r3, [r3, #0]
 8011b9e:	4a53      	ldr	r2, [pc, #332]	; (8011cec <HAL_RCC_OscConfig+0x764>)
 8011ba0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8011ba4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011ba6:	f7f9 ffdb 	bl	800bb60 <HAL_GetTick>
 8011baa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8011bac:	e008      	b.n	8011bc0 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8011bae:	f7f9 ffd7 	bl	800bb60 <HAL_GetTick>
 8011bb2:	4602      	mov	r2, r0
 8011bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bb6:	1ad3      	subs	r3, r2, r3
 8011bb8:	2b02      	cmp	r3, #2
 8011bba:	d901      	bls.n	8011bc0 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8011bbc:	2303      	movs	r3, #3
 8011bbe:	e10c      	b.n	8011dda <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8011bc0:	4b4a      	ldr	r3, [pc, #296]	; (8011cec <HAL_RCC_OscConfig+0x764>)
 8011bc2:	681b      	ldr	r3, [r3, #0]
 8011bc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	d1f0      	bne.n	8011bae <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8011bcc:	4b47      	ldr	r3, [pc, #284]	; (8011cec <HAL_RCC_OscConfig+0x764>)
 8011bce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011bd0:	4b47      	ldr	r3, [pc, #284]	; (8011cf0 <HAL_RCC_OscConfig+0x768>)
 8011bd2:	4013      	ands	r3, r2
 8011bd4:	687a      	ldr	r2, [r7, #4]
 8011bd6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8011bd8:	687a      	ldr	r2, [r7, #4]
 8011bda:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8011bdc:	0112      	lsls	r2, r2, #4
 8011bde:	430a      	orrs	r2, r1
 8011be0:	4942      	ldr	r1, [pc, #264]	; (8011cec <HAL_RCC_OscConfig+0x764>)
 8011be2:	4313      	orrs	r3, r2
 8011be4:	628b      	str	r3, [r1, #40]	; 0x28
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011bea:	3b01      	subs	r3, #1
 8011bec:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011bf4:	3b01      	subs	r3, #1
 8011bf6:	025b      	lsls	r3, r3, #9
 8011bf8:	b29b      	uxth	r3, r3
 8011bfa:	431a      	orrs	r2, r3
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011c00:	3b01      	subs	r3, #1
 8011c02:	041b      	lsls	r3, r3, #16
 8011c04:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8011c08:	431a      	orrs	r2, r3
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011c0e:	3b01      	subs	r3, #1
 8011c10:	061b      	lsls	r3, r3, #24
 8011c12:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8011c16:	4935      	ldr	r1, [pc, #212]	; (8011cec <HAL_RCC_OscConfig+0x764>)
 8011c18:	4313      	orrs	r3, r2
 8011c1a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8011c1c:	4b33      	ldr	r3, [pc, #204]	; (8011cec <HAL_RCC_OscConfig+0x764>)
 8011c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c20:	4a32      	ldr	r2, [pc, #200]	; (8011cec <HAL_RCC_OscConfig+0x764>)
 8011c22:	f023 0301 	bic.w	r3, r3, #1
 8011c26:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8011c28:	4b30      	ldr	r3, [pc, #192]	; (8011cec <HAL_RCC_OscConfig+0x764>)
 8011c2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011c2c:	4b31      	ldr	r3, [pc, #196]	; (8011cf4 <HAL_RCC_OscConfig+0x76c>)
 8011c2e:	4013      	ands	r3, r2
 8011c30:	687a      	ldr	r2, [r7, #4]
 8011c32:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8011c34:	00d2      	lsls	r2, r2, #3
 8011c36:	492d      	ldr	r1, [pc, #180]	; (8011cec <HAL_RCC_OscConfig+0x764>)
 8011c38:	4313      	orrs	r3, r2
 8011c3a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8011c3c:	4b2b      	ldr	r3, [pc, #172]	; (8011cec <HAL_RCC_OscConfig+0x764>)
 8011c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c40:	f023 020c 	bic.w	r2, r3, #12
 8011c44:	687b      	ldr	r3, [r7, #4]
 8011c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011c48:	4928      	ldr	r1, [pc, #160]	; (8011cec <HAL_RCC_OscConfig+0x764>)
 8011c4a:	4313      	orrs	r3, r2
 8011c4c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8011c4e:	4b27      	ldr	r3, [pc, #156]	; (8011cec <HAL_RCC_OscConfig+0x764>)
 8011c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c52:	f023 0202 	bic.w	r2, r3, #2
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011c5a:	4924      	ldr	r1, [pc, #144]	; (8011cec <HAL_RCC_OscConfig+0x764>)
 8011c5c:	4313      	orrs	r3, r2
 8011c5e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8011c60:	4b22      	ldr	r3, [pc, #136]	; (8011cec <HAL_RCC_OscConfig+0x764>)
 8011c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c64:	4a21      	ldr	r2, [pc, #132]	; (8011cec <HAL_RCC_OscConfig+0x764>)
 8011c66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011c6a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011c6c:	4b1f      	ldr	r3, [pc, #124]	; (8011cec <HAL_RCC_OscConfig+0x764>)
 8011c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c70:	4a1e      	ldr	r2, [pc, #120]	; (8011cec <HAL_RCC_OscConfig+0x764>)
 8011c72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011c76:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8011c78:	4b1c      	ldr	r3, [pc, #112]	; (8011cec <HAL_RCC_OscConfig+0x764>)
 8011c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c7c:	4a1b      	ldr	r2, [pc, #108]	; (8011cec <HAL_RCC_OscConfig+0x764>)
 8011c7e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8011c82:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8011c84:	4b19      	ldr	r3, [pc, #100]	; (8011cec <HAL_RCC_OscConfig+0x764>)
 8011c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c88:	4a18      	ldr	r2, [pc, #96]	; (8011cec <HAL_RCC_OscConfig+0x764>)
 8011c8a:	f043 0301 	orr.w	r3, r3, #1
 8011c8e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8011c90:	4b16      	ldr	r3, [pc, #88]	; (8011cec <HAL_RCC_OscConfig+0x764>)
 8011c92:	681b      	ldr	r3, [r3, #0]
 8011c94:	4a15      	ldr	r2, [pc, #84]	; (8011cec <HAL_RCC_OscConfig+0x764>)
 8011c96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8011c9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011c9c:	f7f9 ff60 	bl	800bb60 <HAL_GetTick>
 8011ca0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8011ca2:	e008      	b.n	8011cb6 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8011ca4:	f7f9 ff5c 	bl	800bb60 <HAL_GetTick>
 8011ca8:	4602      	mov	r2, r0
 8011caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cac:	1ad3      	subs	r3, r2, r3
 8011cae:	2b02      	cmp	r3, #2
 8011cb0:	d901      	bls.n	8011cb6 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8011cb2:	2303      	movs	r3, #3
 8011cb4:	e091      	b.n	8011dda <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8011cb6:	4b0d      	ldr	r3, [pc, #52]	; (8011cec <HAL_RCC_OscConfig+0x764>)
 8011cb8:	681b      	ldr	r3, [r3, #0]
 8011cba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011cbe:	2b00      	cmp	r3, #0
 8011cc0:	d0f0      	beq.n	8011ca4 <HAL_RCC_OscConfig+0x71c>
 8011cc2:	e089      	b.n	8011dd8 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8011cc4:	4b09      	ldr	r3, [pc, #36]	; (8011cec <HAL_RCC_OscConfig+0x764>)
 8011cc6:	681b      	ldr	r3, [r3, #0]
 8011cc8:	4a08      	ldr	r2, [pc, #32]	; (8011cec <HAL_RCC_OscConfig+0x764>)
 8011cca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8011cce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011cd0:	f7f9 ff46 	bl	800bb60 <HAL_GetTick>
 8011cd4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8011cd6:	e00f      	b.n	8011cf8 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8011cd8:	f7f9 ff42 	bl	800bb60 <HAL_GetTick>
 8011cdc:	4602      	mov	r2, r0
 8011cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ce0:	1ad3      	subs	r3, r2, r3
 8011ce2:	2b02      	cmp	r3, #2
 8011ce4:	d908      	bls.n	8011cf8 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8011ce6:	2303      	movs	r3, #3
 8011ce8:	e077      	b.n	8011dda <HAL_RCC_OscConfig+0x852>
 8011cea:	bf00      	nop
 8011cec:	58024400 	.word	0x58024400
 8011cf0:	fffffc0c 	.word	0xfffffc0c
 8011cf4:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8011cf8:	4b3a      	ldr	r3, [pc, #232]	; (8011de4 <HAL_RCC_OscConfig+0x85c>)
 8011cfa:	681b      	ldr	r3, [r3, #0]
 8011cfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011d00:	2b00      	cmp	r3, #0
 8011d02:	d1e9      	bne.n	8011cd8 <HAL_RCC_OscConfig+0x750>
 8011d04:	e068      	b.n	8011dd8 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8011d06:	4b37      	ldr	r3, [pc, #220]	; (8011de4 <HAL_RCC_OscConfig+0x85c>)
 8011d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011d0a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8011d0c:	4b35      	ldr	r3, [pc, #212]	; (8011de4 <HAL_RCC_OscConfig+0x85c>)
 8011d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011d10:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d16:	2b01      	cmp	r3, #1
 8011d18:	d031      	beq.n	8011d7e <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8011d1a:	693b      	ldr	r3, [r7, #16]
 8011d1c:	f003 0203 	and.w	r2, r3, #3
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8011d24:	429a      	cmp	r2, r3
 8011d26:	d12a      	bne.n	8011d7e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8011d28:	693b      	ldr	r3, [r7, #16]
 8011d2a:	091b      	lsrs	r3, r3, #4
 8011d2c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8011d34:	429a      	cmp	r2, r3
 8011d36:	d122      	bne.n	8011d7e <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8011d38:	68fb      	ldr	r3, [r7, #12]
 8011d3a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8011d3e:	687b      	ldr	r3, [r7, #4]
 8011d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011d42:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8011d44:	429a      	cmp	r2, r3
 8011d46:	d11a      	bne.n	8011d7e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8011d48:	68fb      	ldr	r3, [r7, #12]
 8011d4a:	0a5b      	lsrs	r3, r3, #9
 8011d4c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011d54:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8011d56:	429a      	cmp	r2, r3
 8011d58:	d111      	bne.n	8011d7e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8011d5a:	68fb      	ldr	r3, [r7, #12]
 8011d5c:	0c1b      	lsrs	r3, r3, #16
 8011d5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011d66:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8011d68:	429a      	cmp	r2, r3
 8011d6a:	d108      	bne.n	8011d7e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8011d6c:	68fb      	ldr	r3, [r7, #12]
 8011d6e:	0e1b      	lsrs	r3, r3, #24
 8011d70:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011d78:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8011d7a:	429a      	cmp	r2, r3
 8011d7c:	d001      	beq.n	8011d82 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8011d7e:	2301      	movs	r3, #1
 8011d80:	e02b      	b.n	8011dda <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8011d82:	4b18      	ldr	r3, [pc, #96]	; (8011de4 <HAL_RCC_OscConfig+0x85c>)
 8011d84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011d86:	08db      	lsrs	r3, r3, #3
 8011d88:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011d8c:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011d92:	693a      	ldr	r2, [r7, #16]
 8011d94:	429a      	cmp	r2, r3
 8011d96:	d01f      	beq.n	8011dd8 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8011d98:	4b12      	ldr	r3, [pc, #72]	; (8011de4 <HAL_RCC_OscConfig+0x85c>)
 8011d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d9c:	4a11      	ldr	r2, [pc, #68]	; (8011de4 <HAL_RCC_OscConfig+0x85c>)
 8011d9e:	f023 0301 	bic.w	r3, r3, #1
 8011da2:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8011da4:	f7f9 fedc 	bl	800bb60 <HAL_GetTick>
 8011da8:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8011daa:	bf00      	nop
 8011dac:	f7f9 fed8 	bl	800bb60 <HAL_GetTick>
 8011db0:	4602      	mov	r2, r0
 8011db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011db4:	4293      	cmp	r3, r2
 8011db6:	d0f9      	beq.n	8011dac <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8011db8:	4b0a      	ldr	r3, [pc, #40]	; (8011de4 <HAL_RCC_OscConfig+0x85c>)
 8011dba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011dbc:	4b0a      	ldr	r3, [pc, #40]	; (8011de8 <HAL_RCC_OscConfig+0x860>)
 8011dbe:	4013      	ands	r3, r2
 8011dc0:	687a      	ldr	r2, [r7, #4]
 8011dc2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8011dc4:	00d2      	lsls	r2, r2, #3
 8011dc6:	4907      	ldr	r1, [pc, #28]	; (8011de4 <HAL_RCC_OscConfig+0x85c>)
 8011dc8:	4313      	orrs	r3, r2
 8011dca:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8011dcc:	4b05      	ldr	r3, [pc, #20]	; (8011de4 <HAL_RCC_OscConfig+0x85c>)
 8011dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011dd0:	4a04      	ldr	r2, [pc, #16]	; (8011de4 <HAL_RCC_OscConfig+0x85c>)
 8011dd2:	f043 0301 	orr.w	r3, r3, #1
 8011dd6:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8011dd8:	2300      	movs	r3, #0
}
 8011dda:	4618      	mov	r0, r3
 8011ddc:	3730      	adds	r7, #48	; 0x30
 8011dde:	46bd      	mov	sp, r7
 8011de0:	bd80      	pop	{r7, pc}
 8011de2:	bf00      	nop
 8011de4:	58024400 	.word	0x58024400
 8011de8:	ffff0007 	.word	0xffff0007

08011dec <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8011dec:	b580      	push	{r7, lr}
 8011dee:	b086      	sub	sp, #24
 8011df0:	af00      	add	r7, sp, #0
 8011df2:	6078      	str	r0, [r7, #4]
 8011df4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	2b00      	cmp	r3, #0
 8011dfa:	d101      	bne.n	8011e00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8011dfc:	2301      	movs	r3, #1
 8011dfe:	e19c      	b.n	801213a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8011e00:	4b8a      	ldr	r3, [pc, #552]	; (801202c <HAL_RCC_ClockConfig+0x240>)
 8011e02:	681b      	ldr	r3, [r3, #0]
 8011e04:	f003 030f 	and.w	r3, r3, #15
 8011e08:	683a      	ldr	r2, [r7, #0]
 8011e0a:	429a      	cmp	r2, r3
 8011e0c:	d910      	bls.n	8011e30 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8011e0e:	4b87      	ldr	r3, [pc, #540]	; (801202c <HAL_RCC_ClockConfig+0x240>)
 8011e10:	681b      	ldr	r3, [r3, #0]
 8011e12:	f023 020f 	bic.w	r2, r3, #15
 8011e16:	4985      	ldr	r1, [pc, #532]	; (801202c <HAL_RCC_ClockConfig+0x240>)
 8011e18:	683b      	ldr	r3, [r7, #0]
 8011e1a:	4313      	orrs	r3, r2
 8011e1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8011e1e:	4b83      	ldr	r3, [pc, #524]	; (801202c <HAL_RCC_ClockConfig+0x240>)
 8011e20:	681b      	ldr	r3, [r3, #0]
 8011e22:	f003 030f 	and.w	r3, r3, #15
 8011e26:	683a      	ldr	r2, [r7, #0]
 8011e28:	429a      	cmp	r2, r3
 8011e2a:	d001      	beq.n	8011e30 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8011e2c:	2301      	movs	r3, #1
 8011e2e:	e184      	b.n	801213a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	681b      	ldr	r3, [r3, #0]
 8011e34:	f003 0304 	and.w	r3, r3, #4
 8011e38:	2b00      	cmp	r3, #0
 8011e3a:	d010      	beq.n	8011e5e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	691a      	ldr	r2, [r3, #16]
 8011e40:	4b7b      	ldr	r3, [pc, #492]	; (8012030 <HAL_RCC_ClockConfig+0x244>)
 8011e42:	699b      	ldr	r3, [r3, #24]
 8011e44:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8011e48:	429a      	cmp	r2, r3
 8011e4a:	d908      	bls.n	8011e5e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8011e4c:	4b78      	ldr	r3, [pc, #480]	; (8012030 <HAL_RCC_ClockConfig+0x244>)
 8011e4e:	699b      	ldr	r3, [r3, #24]
 8011e50:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	691b      	ldr	r3, [r3, #16]
 8011e58:	4975      	ldr	r1, [pc, #468]	; (8012030 <HAL_RCC_ClockConfig+0x244>)
 8011e5a:	4313      	orrs	r3, r2
 8011e5c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8011e5e:	687b      	ldr	r3, [r7, #4]
 8011e60:	681b      	ldr	r3, [r3, #0]
 8011e62:	f003 0308 	and.w	r3, r3, #8
 8011e66:	2b00      	cmp	r3, #0
 8011e68:	d010      	beq.n	8011e8c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	695a      	ldr	r2, [r3, #20]
 8011e6e:	4b70      	ldr	r3, [pc, #448]	; (8012030 <HAL_RCC_ClockConfig+0x244>)
 8011e70:	69db      	ldr	r3, [r3, #28]
 8011e72:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8011e76:	429a      	cmp	r2, r3
 8011e78:	d908      	bls.n	8011e8c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8011e7a:	4b6d      	ldr	r3, [pc, #436]	; (8012030 <HAL_RCC_ClockConfig+0x244>)
 8011e7c:	69db      	ldr	r3, [r3, #28]
 8011e7e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	695b      	ldr	r3, [r3, #20]
 8011e86:	496a      	ldr	r1, [pc, #424]	; (8012030 <HAL_RCC_ClockConfig+0x244>)
 8011e88:	4313      	orrs	r3, r2
 8011e8a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	681b      	ldr	r3, [r3, #0]
 8011e90:	f003 0310 	and.w	r3, r3, #16
 8011e94:	2b00      	cmp	r3, #0
 8011e96:	d010      	beq.n	8011eba <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8011e98:	687b      	ldr	r3, [r7, #4]
 8011e9a:	699a      	ldr	r2, [r3, #24]
 8011e9c:	4b64      	ldr	r3, [pc, #400]	; (8012030 <HAL_RCC_ClockConfig+0x244>)
 8011e9e:	69db      	ldr	r3, [r3, #28]
 8011ea0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8011ea4:	429a      	cmp	r2, r3
 8011ea6:	d908      	bls.n	8011eba <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8011ea8:	4b61      	ldr	r3, [pc, #388]	; (8012030 <HAL_RCC_ClockConfig+0x244>)
 8011eaa:	69db      	ldr	r3, [r3, #28]
 8011eac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	699b      	ldr	r3, [r3, #24]
 8011eb4:	495e      	ldr	r1, [pc, #376]	; (8012030 <HAL_RCC_ClockConfig+0x244>)
 8011eb6:	4313      	orrs	r3, r2
 8011eb8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	681b      	ldr	r3, [r3, #0]
 8011ebe:	f003 0320 	and.w	r3, r3, #32
 8011ec2:	2b00      	cmp	r3, #0
 8011ec4:	d010      	beq.n	8011ee8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	69da      	ldr	r2, [r3, #28]
 8011eca:	4b59      	ldr	r3, [pc, #356]	; (8012030 <HAL_RCC_ClockConfig+0x244>)
 8011ecc:	6a1b      	ldr	r3, [r3, #32]
 8011ece:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8011ed2:	429a      	cmp	r2, r3
 8011ed4:	d908      	bls.n	8011ee8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8011ed6:	4b56      	ldr	r3, [pc, #344]	; (8012030 <HAL_RCC_ClockConfig+0x244>)
 8011ed8:	6a1b      	ldr	r3, [r3, #32]
 8011eda:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	69db      	ldr	r3, [r3, #28]
 8011ee2:	4953      	ldr	r1, [pc, #332]	; (8012030 <HAL_RCC_ClockConfig+0x244>)
 8011ee4:	4313      	orrs	r3, r2
 8011ee6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	681b      	ldr	r3, [r3, #0]
 8011eec:	f003 0302 	and.w	r3, r3, #2
 8011ef0:	2b00      	cmp	r3, #0
 8011ef2:	d010      	beq.n	8011f16 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	68da      	ldr	r2, [r3, #12]
 8011ef8:	4b4d      	ldr	r3, [pc, #308]	; (8012030 <HAL_RCC_ClockConfig+0x244>)
 8011efa:	699b      	ldr	r3, [r3, #24]
 8011efc:	f003 030f 	and.w	r3, r3, #15
 8011f00:	429a      	cmp	r2, r3
 8011f02:	d908      	bls.n	8011f16 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8011f04:	4b4a      	ldr	r3, [pc, #296]	; (8012030 <HAL_RCC_ClockConfig+0x244>)
 8011f06:	699b      	ldr	r3, [r3, #24]
 8011f08:	f023 020f 	bic.w	r2, r3, #15
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	68db      	ldr	r3, [r3, #12]
 8011f10:	4947      	ldr	r1, [pc, #284]	; (8012030 <HAL_RCC_ClockConfig+0x244>)
 8011f12:	4313      	orrs	r3, r2
 8011f14:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8011f16:	687b      	ldr	r3, [r7, #4]
 8011f18:	681b      	ldr	r3, [r3, #0]
 8011f1a:	f003 0301 	and.w	r3, r3, #1
 8011f1e:	2b00      	cmp	r3, #0
 8011f20:	d055      	beq.n	8011fce <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8011f22:	4b43      	ldr	r3, [pc, #268]	; (8012030 <HAL_RCC_ClockConfig+0x244>)
 8011f24:	699b      	ldr	r3, [r3, #24]
 8011f26:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	689b      	ldr	r3, [r3, #8]
 8011f2e:	4940      	ldr	r1, [pc, #256]	; (8012030 <HAL_RCC_ClockConfig+0x244>)
 8011f30:	4313      	orrs	r3, r2
 8011f32:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011f34:	687b      	ldr	r3, [r7, #4]
 8011f36:	685b      	ldr	r3, [r3, #4]
 8011f38:	2b02      	cmp	r3, #2
 8011f3a:	d107      	bne.n	8011f4c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8011f3c:	4b3c      	ldr	r3, [pc, #240]	; (8012030 <HAL_RCC_ClockConfig+0x244>)
 8011f3e:	681b      	ldr	r3, [r3, #0]
 8011f40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011f44:	2b00      	cmp	r3, #0
 8011f46:	d121      	bne.n	8011f8c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8011f48:	2301      	movs	r3, #1
 8011f4a:	e0f6      	b.n	801213a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8011f4c:	687b      	ldr	r3, [r7, #4]
 8011f4e:	685b      	ldr	r3, [r3, #4]
 8011f50:	2b03      	cmp	r3, #3
 8011f52:	d107      	bne.n	8011f64 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8011f54:	4b36      	ldr	r3, [pc, #216]	; (8012030 <HAL_RCC_ClockConfig+0x244>)
 8011f56:	681b      	ldr	r3, [r3, #0]
 8011f58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	d115      	bne.n	8011f8c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8011f60:	2301      	movs	r3, #1
 8011f62:	e0ea      	b.n	801213a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8011f64:	687b      	ldr	r3, [r7, #4]
 8011f66:	685b      	ldr	r3, [r3, #4]
 8011f68:	2b01      	cmp	r3, #1
 8011f6a:	d107      	bne.n	8011f7c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8011f6c:	4b30      	ldr	r3, [pc, #192]	; (8012030 <HAL_RCC_ClockConfig+0x244>)
 8011f6e:	681b      	ldr	r3, [r3, #0]
 8011f70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011f74:	2b00      	cmp	r3, #0
 8011f76:	d109      	bne.n	8011f8c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8011f78:	2301      	movs	r3, #1
 8011f7a:	e0de      	b.n	801213a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8011f7c:	4b2c      	ldr	r3, [pc, #176]	; (8012030 <HAL_RCC_ClockConfig+0x244>)
 8011f7e:	681b      	ldr	r3, [r3, #0]
 8011f80:	f003 0304 	and.w	r3, r3, #4
 8011f84:	2b00      	cmp	r3, #0
 8011f86:	d101      	bne.n	8011f8c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8011f88:	2301      	movs	r3, #1
 8011f8a:	e0d6      	b.n	801213a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8011f8c:	4b28      	ldr	r3, [pc, #160]	; (8012030 <HAL_RCC_ClockConfig+0x244>)
 8011f8e:	691b      	ldr	r3, [r3, #16]
 8011f90:	f023 0207 	bic.w	r2, r3, #7
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	685b      	ldr	r3, [r3, #4]
 8011f98:	4925      	ldr	r1, [pc, #148]	; (8012030 <HAL_RCC_ClockConfig+0x244>)
 8011f9a:	4313      	orrs	r3, r2
 8011f9c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011f9e:	f7f9 fddf 	bl	800bb60 <HAL_GetTick>
 8011fa2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8011fa4:	e00a      	b.n	8011fbc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011fa6:	f7f9 fddb 	bl	800bb60 <HAL_GetTick>
 8011faa:	4602      	mov	r2, r0
 8011fac:	697b      	ldr	r3, [r7, #20]
 8011fae:	1ad3      	subs	r3, r2, r3
 8011fb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8011fb4:	4293      	cmp	r3, r2
 8011fb6:	d901      	bls.n	8011fbc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8011fb8:	2303      	movs	r3, #3
 8011fba:	e0be      	b.n	801213a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8011fbc:	4b1c      	ldr	r3, [pc, #112]	; (8012030 <HAL_RCC_ClockConfig+0x244>)
 8011fbe:	691b      	ldr	r3, [r3, #16]
 8011fc0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	685b      	ldr	r3, [r3, #4]
 8011fc8:	00db      	lsls	r3, r3, #3
 8011fca:	429a      	cmp	r2, r3
 8011fcc:	d1eb      	bne.n	8011fa6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	681b      	ldr	r3, [r3, #0]
 8011fd2:	f003 0302 	and.w	r3, r3, #2
 8011fd6:	2b00      	cmp	r3, #0
 8011fd8:	d010      	beq.n	8011ffc <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	68da      	ldr	r2, [r3, #12]
 8011fde:	4b14      	ldr	r3, [pc, #80]	; (8012030 <HAL_RCC_ClockConfig+0x244>)
 8011fe0:	699b      	ldr	r3, [r3, #24]
 8011fe2:	f003 030f 	and.w	r3, r3, #15
 8011fe6:	429a      	cmp	r2, r3
 8011fe8:	d208      	bcs.n	8011ffc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8011fea:	4b11      	ldr	r3, [pc, #68]	; (8012030 <HAL_RCC_ClockConfig+0x244>)
 8011fec:	699b      	ldr	r3, [r3, #24]
 8011fee:	f023 020f 	bic.w	r2, r3, #15
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	68db      	ldr	r3, [r3, #12]
 8011ff6:	490e      	ldr	r1, [pc, #56]	; (8012030 <HAL_RCC_ClockConfig+0x244>)
 8011ff8:	4313      	orrs	r3, r2
 8011ffa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8011ffc:	4b0b      	ldr	r3, [pc, #44]	; (801202c <HAL_RCC_ClockConfig+0x240>)
 8011ffe:	681b      	ldr	r3, [r3, #0]
 8012000:	f003 030f 	and.w	r3, r3, #15
 8012004:	683a      	ldr	r2, [r7, #0]
 8012006:	429a      	cmp	r2, r3
 8012008:	d214      	bcs.n	8012034 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801200a:	4b08      	ldr	r3, [pc, #32]	; (801202c <HAL_RCC_ClockConfig+0x240>)
 801200c:	681b      	ldr	r3, [r3, #0]
 801200e:	f023 020f 	bic.w	r2, r3, #15
 8012012:	4906      	ldr	r1, [pc, #24]	; (801202c <HAL_RCC_ClockConfig+0x240>)
 8012014:	683b      	ldr	r3, [r7, #0]
 8012016:	4313      	orrs	r3, r2
 8012018:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801201a:	4b04      	ldr	r3, [pc, #16]	; (801202c <HAL_RCC_ClockConfig+0x240>)
 801201c:	681b      	ldr	r3, [r3, #0]
 801201e:	f003 030f 	and.w	r3, r3, #15
 8012022:	683a      	ldr	r2, [r7, #0]
 8012024:	429a      	cmp	r2, r3
 8012026:	d005      	beq.n	8012034 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8012028:	2301      	movs	r3, #1
 801202a:	e086      	b.n	801213a <HAL_RCC_ClockConfig+0x34e>
 801202c:	52002000 	.word	0x52002000
 8012030:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	681b      	ldr	r3, [r3, #0]
 8012038:	f003 0304 	and.w	r3, r3, #4
 801203c:	2b00      	cmp	r3, #0
 801203e:	d010      	beq.n	8012062 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	691a      	ldr	r2, [r3, #16]
 8012044:	4b3f      	ldr	r3, [pc, #252]	; (8012144 <HAL_RCC_ClockConfig+0x358>)
 8012046:	699b      	ldr	r3, [r3, #24]
 8012048:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801204c:	429a      	cmp	r2, r3
 801204e:	d208      	bcs.n	8012062 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8012050:	4b3c      	ldr	r3, [pc, #240]	; (8012144 <HAL_RCC_ClockConfig+0x358>)
 8012052:	699b      	ldr	r3, [r3, #24]
 8012054:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8012058:	687b      	ldr	r3, [r7, #4]
 801205a:	691b      	ldr	r3, [r3, #16]
 801205c:	4939      	ldr	r1, [pc, #228]	; (8012144 <HAL_RCC_ClockConfig+0x358>)
 801205e:	4313      	orrs	r3, r2
 8012060:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	681b      	ldr	r3, [r3, #0]
 8012066:	f003 0308 	and.w	r3, r3, #8
 801206a:	2b00      	cmp	r3, #0
 801206c:	d010      	beq.n	8012090 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 801206e:	687b      	ldr	r3, [r7, #4]
 8012070:	695a      	ldr	r2, [r3, #20]
 8012072:	4b34      	ldr	r3, [pc, #208]	; (8012144 <HAL_RCC_ClockConfig+0x358>)
 8012074:	69db      	ldr	r3, [r3, #28]
 8012076:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801207a:	429a      	cmp	r2, r3
 801207c:	d208      	bcs.n	8012090 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 801207e:	4b31      	ldr	r3, [pc, #196]	; (8012144 <HAL_RCC_ClockConfig+0x358>)
 8012080:	69db      	ldr	r3, [r3, #28]
 8012082:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	695b      	ldr	r3, [r3, #20]
 801208a:	492e      	ldr	r1, [pc, #184]	; (8012144 <HAL_RCC_ClockConfig+0x358>)
 801208c:	4313      	orrs	r3, r2
 801208e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	681b      	ldr	r3, [r3, #0]
 8012094:	f003 0310 	and.w	r3, r3, #16
 8012098:	2b00      	cmp	r3, #0
 801209a:	d010      	beq.n	80120be <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	699a      	ldr	r2, [r3, #24]
 80120a0:	4b28      	ldr	r3, [pc, #160]	; (8012144 <HAL_RCC_ClockConfig+0x358>)
 80120a2:	69db      	ldr	r3, [r3, #28]
 80120a4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80120a8:	429a      	cmp	r2, r3
 80120aa:	d208      	bcs.n	80120be <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80120ac:	4b25      	ldr	r3, [pc, #148]	; (8012144 <HAL_RCC_ClockConfig+0x358>)
 80120ae:	69db      	ldr	r3, [r3, #28]
 80120b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80120b4:	687b      	ldr	r3, [r7, #4]
 80120b6:	699b      	ldr	r3, [r3, #24]
 80120b8:	4922      	ldr	r1, [pc, #136]	; (8012144 <HAL_RCC_ClockConfig+0x358>)
 80120ba:	4313      	orrs	r3, r2
 80120bc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	681b      	ldr	r3, [r3, #0]
 80120c2:	f003 0320 	and.w	r3, r3, #32
 80120c6:	2b00      	cmp	r3, #0
 80120c8:	d010      	beq.n	80120ec <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	69da      	ldr	r2, [r3, #28]
 80120ce:	4b1d      	ldr	r3, [pc, #116]	; (8012144 <HAL_RCC_ClockConfig+0x358>)
 80120d0:	6a1b      	ldr	r3, [r3, #32]
 80120d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80120d6:	429a      	cmp	r2, r3
 80120d8:	d208      	bcs.n	80120ec <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80120da:	4b1a      	ldr	r3, [pc, #104]	; (8012144 <HAL_RCC_ClockConfig+0x358>)
 80120dc:	6a1b      	ldr	r3, [r3, #32]
 80120de:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	69db      	ldr	r3, [r3, #28]
 80120e6:	4917      	ldr	r1, [pc, #92]	; (8012144 <HAL_RCC_ClockConfig+0x358>)
 80120e8:	4313      	orrs	r3, r2
 80120ea:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80120ec:	f000 f834 	bl	8012158 <HAL_RCC_GetSysClockFreq>
 80120f0:	4602      	mov	r2, r0
 80120f2:	4b14      	ldr	r3, [pc, #80]	; (8012144 <HAL_RCC_ClockConfig+0x358>)
 80120f4:	699b      	ldr	r3, [r3, #24]
 80120f6:	0a1b      	lsrs	r3, r3, #8
 80120f8:	f003 030f 	and.w	r3, r3, #15
 80120fc:	4912      	ldr	r1, [pc, #72]	; (8012148 <HAL_RCC_ClockConfig+0x35c>)
 80120fe:	5ccb      	ldrb	r3, [r1, r3]
 8012100:	f003 031f 	and.w	r3, r3, #31
 8012104:	fa22 f303 	lsr.w	r3, r2, r3
 8012108:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 801210a:	4b0e      	ldr	r3, [pc, #56]	; (8012144 <HAL_RCC_ClockConfig+0x358>)
 801210c:	699b      	ldr	r3, [r3, #24]
 801210e:	f003 030f 	and.w	r3, r3, #15
 8012112:	4a0d      	ldr	r2, [pc, #52]	; (8012148 <HAL_RCC_ClockConfig+0x35c>)
 8012114:	5cd3      	ldrb	r3, [r2, r3]
 8012116:	f003 031f 	and.w	r3, r3, #31
 801211a:	693a      	ldr	r2, [r7, #16]
 801211c:	fa22 f303 	lsr.w	r3, r2, r3
 8012120:	4a0a      	ldr	r2, [pc, #40]	; (801214c <HAL_RCC_ClockConfig+0x360>)
 8012122:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8012124:	4a0a      	ldr	r2, [pc, #40]	; (8012150 <HAL_RCC_ClockConfig+0x364>)
 8012126:	693b      	ldr	r3, [r7, #16]
 8012128:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 801212a:	4b0a      	ldr	r3, [pc, #40]	; (8012154 <HAL_RCC_ClockConfig+0x368>)
 801212c:	681b      	ldr	r3, [r3, #0]
 801212e:	4618      	mov	r0, r3
 8012130:	f7f4 ff7a 	bl	8007028 <HAL_InitTick>
 8012134:	4603      	mov	r3, r0
 8012136:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8012138:	7bfb      	ldrb	r3, [r7, #15]
}
 801213a:	4618      	mov	r0, r3
 801213c:	3718      	adds	r7, #24
 801213e:	46bd      	mov	sp, r7
 8012140:	bd80      	pop	{r7, pc}
 8012142:	bf00      	nop
 8012144:	58024400 	.word	0x58024400
 8012148:	0802a3c8 	.word	0x0802a3c8
 801214c:	24000058 	.word	0x24000058
 8012150:	24000054 	.word	0x24000054
 8012154:	2400005c 	.word	0x2400005c

08012158 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8012158:	b480      	push	{r7}
 801215a:	b089      	sub	sp, #36	; 0x24
 801215c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 801215e:	4bb3      	ldr	r3, [pc, #716]	; (801242c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8012160:	691b      	ldr	r3, [r3, #16]
 8012162:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8012166:	2b18      	cmp	r3, #24
 8012168:	f200 8155 	bhi.w	8012416 <HAL_RCC_GetSysClockFreq+0x2be>
 801216c:	a201      	add	r2, pc, #4	; (adr r2, 8012174 <HAL_RCC_GetSysClockFreq+0x1c>)
 801216e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012172:	bf00      	nop
 8012174:	080121d9 	.word	0x080121d9
 8012178:	08012417 	.word	0x08012417
 801217c:	08012417 	.word	0x08012417
 8012180:	08012417 	.word	0x08012417
 8012184:	08012417 	.word	0x08012417
 8012188:	08012417 	.word	0x08012417
 801218c:	08012417 	.word	0x08012417
 8012190:	08012417 	.word	0x08012417
 8012194:	080121ff 	.word	0x080121ff
 8012198:	08012417 	.word	0x08012417
 801219c:	08012417 	.word	0x08012417
 80121a0:	08012417 	.word	0x08012417
 80121a4:	08012417 	.word	0x08012417
 80121a8:	08012417 	.word	0x08012417
 80121ac:	08012417 	.word	0x08012417
 80121b0:	08012417 	.word	0x08012417
 80121b4:	08012205 	.word	0x08012205
 80121b8:	08012417 	.word	0x08012417
 80121bc:	08012417 	.word	0x08012417
 80121c0:	08012417 	.word	0x08012417
 80121c4:	08012417 	.word	0x08012417
 80121c8:	08012417 	.word	0x08012417
 80121cc:	08012417 	.word	0x08012417
 80121d0:	08012417 	.word	0x08012417
 80121d4:	0801220b 	.word	0x0801220b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80121d8:	4b94      	ldr	r3, [pc, #592]	; (801242c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80121da:	681b      	ldr	r3, [r3, #0]
 80121dc:	f003 0320 	and.w	r3, r3, #32
 80121e0:	2b00      	cmp	r3, #0
 80121e2:	d009      	beq.n	80121f8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80121e4:	4b91      	ldr	r3, [pc, #580]	; (801242c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80121e6:	681b      	ldr	r3, [r3, #0]
 80121e8:	08db      	lsrs	r3, r3, #3
 80121ea:	f003 0303 	and.w	r3, r3, #3
 80121ee:	4a90      	ldr	r2, [pc, #576]	; (8012430 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80121f0:	fa22 f303 	lsr.w	r3, r2, r3
 80121f4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80121f6:	e111      	b.n	801241c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80121f8:	4b8d      	ldr	r3, [pc, #564]	; (8012430 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80121fa:	61bb      	str	r3, [r7, #24]
      break;
 80121fc:	e10e      	b.n	801241c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80121fe:	4b8d      	ldr	r3, [pc, #564]	; (8012434 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8012200:	61bb      	str	r3, [r7, #24]
      break;
 8012202:	e10b      	b.n	801241c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8012204:	4b8c      	ldr	r3, [pc, #560]	; (8012438 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8012206:	61bb      	str	r3, [r7, #24]
      break;
 8012208:	e108      	b.n	801241c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801220a:	4b88      	ldr	r3, [pc, #544]	; (801242c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801220c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801220e:	f003 0303 	and.w	r3, r3, #3
 8012212:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8012214:	4b85      	ldr	r3, [pc, #532]	; (801242c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8012216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012218:	091b      	lsrs	r3, r3, #4
 801221a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801221e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8012220:	4b82      	ldr	r3, [pc, #520]	; (801242c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8012222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012224:	f003 0301 	and.w	r3, r3, #1
 8012228:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 801222a:	4b80      	ldr	r3, [pc, #512]	; (801242c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801222c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801222e:	08db      	lsrs	r3, r3, #3
 8012230:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012234:	68fa      	ldr	r2, [r7, #12]
 8012236:	fb02 f303 	mul.w	r3, r2, r3
 801223a:	ee07 3a90 	vmov	s15, r3
 801223e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012242:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8012246:	693b      	ldr	r3, [r7, #16]
 8012248:	2b00      	cmp	r3, #0
 801224a:	f000 80e1 	beq.w	8012410 <HAL_RCC_GetSysClockFreq+0x2b8>
 801224e:	697b      	ldr	r3, [r7, #20]
 8012250:	2b02      	cmp	r3, #2
 8012252:	f000 8083 	beq.w	801235c <HAL_RCC_GetSysClockFreq+0x204>
 8012256:	697b      	ldr	r3, [r7, #20]
 8012258:	2b02      	cmp	r3, #2
 801225a:	f200 80a1 	bhi.w	80123a0 <HAL_RCC_GetSysClockFreq+0x248>
 801225e:	697b      	ldr	r3, [r7, #20]
 8012260:	2b00      	cmp	r3, #0
 8012262:	d003      	beq.n	801226c <HAL_RCC_GetSysClockFreq+0x114>
 8012264:	697b      	ldr	r3, [r7, #20]
 8012266:	2b01      	cmp	r3, #1
 8012268:	d056      	beq.n	8012318 <HAL_RCC_GetSysClockFreq+0x1c0>
 801226a:	e099      	b.n	80123a0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801226c:	4b6f      	ldr	r3, [pc, #444]	; (801242c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801226e:	681b      	ldr	r3, [r3, #0]
 8012270:	f003 0320 	and.w	r3, r3, #32
 8012274:	2b00      	cmp	r3, #0
 8012276:	d02d      	beq.n	80122d4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8012278:	4b6c      	ldr	r3, [pc, #432]	; (801242c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801227a:	681b      	ldr	r3, [r3, #0]
 801227c:	08db      	lsrs	r3, r3, #3
 801227e:	f003 0303 	and.w	r3, r3, #3
 8012282:	4a6b      	ldr	r2, [pc, #428]	; (8012430 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8012284:	fa22 f303 	lsr.w	r3, r2, r3
 8012288:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801228a:	687b      	ldr	r3, [r7, #4]
 801228c:	ee07 3a90 	vmov	s15, r3
 8012290:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012294:	693b      	ldr	r3, [r7, #16]
 8012296:	ee07 3a90 	vmov	s15, r3
 801229a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801229e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80122a2:	4b62      	ldr	r3, [pc, #392]	; (801242c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80122a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80122a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80122aa:	ee07 3a90 	vmov	s15, r3
 80122ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80122b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80122b6:	eddf 5a61 	vldr	s11, [pc, #388]	; 801243c <HAL_RCC_GetSysClockFreq+0x2e4>
 80122ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80122be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80122c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80122c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80122ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80122ce:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80122d2:	e087      	b.n	80123e4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80122d4:	693b      	ldr	r3, [r7, #16]
 80122d6:	ee07 3a90 	vmov	s15, r3
 80122da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80122de:	eddf 6a58 	vldr	s13, [pc, #352]	; 8012440 <HAL_RCC_GetSysClockFreq+0x2e8>
 80122e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80122e6:	4b51      	ldr	r3, [pc, #324]	; (801242c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80122e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80122ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80122ee:	ee07 3a90 	vmov	s15, r3
 80122f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80122f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80122fa:	eddf 5a50 	vldr	s11, [pc, #320]	; 801243c <HAL_RCC_GetSysClockFreq+0x2e4>
 80122fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012302:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012306:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801230a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801230e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012312:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8012316:	e065      	b.n	80123e4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8012318:	693b      	ldr	r3, [r7, #16]
 801231a:	ee07 3a90 	vmov	s15, r3
 801231e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012322:	eddf 6a48 	vldr	s13, [pc, #288]	; 8012444 <HAL_RCC_GetSysClockFreq+0x2ec>
 8012326:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801232a:	4b40      	ldr	r3, [pc, #256]	; (801242c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801232c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801232e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012332:	ee07 3a90 	vmov	s15, r3
 8012336:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801233a:	ed97 6a02 	vldr	s12, [r7, #8]
 801233e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 801243c <HAL_RCC_GetSysClockFreq+0x2e4>
 8012342:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012346:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801234a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801234e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012352:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012356:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801235a:	e043      	b.n	80123e4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801235c:	693b      	ldr	r3, [r7, #16]
 801235e:	ee07 3a90 	vmov	s15, r3
 8012362:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012366:	eddf 6a38 	vldr	s13, [pc, #224]	; 8012448 <HAL_RCC_GetSysClockFreq+0x2f0>
 801236a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801236e:	4b2f      	ldr	r3, [pc, #188]	; (801242c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8012370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012372:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012376:	ee07 3a90 	vmov	s15, r3
 801237a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801237e:	ed97 6a02 	vldr	s12, [r7, #8]
 8012382:	eddf 5a2e 	vldr	s11, [pc, #184]	; 801243c <HAL_RCC_GetSysClockFreq+0x2e4>
 8012386:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801238a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801238e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012392:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012396:	ee67 7a27 	vmul.f32	s15, s14, s15
 801239a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801239e:	e021      	b.n	80123e4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80123a0:	693b      	ldr	r3, [r7, #16]
 80123a2:	ee07 3a90 	vmov	s15, r3
 80123a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80123aa:	eddf 6a26 	vldr	s13, [pc, #152]	; 8012444 <HAL_RCC_GetSysClockFreq+0x2ec>
 80123ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80123b2:	4b1e      	ldr	r3, [pc, #120]	; (801242c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80123b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80123b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80123ba:	ee07 3a90 	vmov	s15, r3
 80123be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80123c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80123c6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 801243c <HAL_RCC_GetSysClockFreq+0x2e4>
 80123ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80123ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80123d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80123d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80123da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80123de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80123e2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80123e4:	4b11      	ldr	r3, [pc, #68]	; (801242c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80123e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80123e8:	0a5b      	lsrs	r3, r3, #9
 80123ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80123ee:	3301      	adds	r3, #1
 80123f0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80123f2:	683b      	ldr	r3, [r7, #0]
 80123f4:	ee07 3a90 	vmov	s15, r3
 80123f8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80123fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8012400:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012404:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012408:	ee17 3a90 	vmov	r3, s15
 801240c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 801240e:	e005      	b.n	801241c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8012410:	2300      	movs	r3, #0
 8012412:	61bb      	str	r3, [r7, #24]
      break;
 8012414:	e002      	b.n	801241c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8012416:	4b07      	ldr	r3, [pc, #28]	; (8012434 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8012418:	61bb      	str	r3, [r7, #24]
      break;
 801241a:	bf00      	nop
  }

  return sysclockfreq;
 801241c:	69bb      	ldr	r3, [r7, #24]
}
 801241e:	4618      	mov	r0, r3
 8012420:	3724      	adds	r7, #36	; 0x24
 8012422:	46bd      	mov	sp, r7
 8012424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012428:	4770      	bx	lr
 801242a:	bf00      	nop
 801242c:	58024400 	.word	0x58024400
 8012430:	03d09000 	.word	0x03d09000
 8012434:	003d0900 	.word	0x003d0900
 8012438:	016e3600 	.word	0x016e3600
 801243c:	46000000 	.word	0x46000000
 8012440:	4c742400 	.word	0x4c742400
 8012444:	4a742400 	.word	0x4a742400
 8012448:	4bb71b00 	.word	0x4bb71b00

0801244c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801244c:	b580      	push	{r7, lr}
 801244e:	b082      	sub	sp, #8
 8012450:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8012452:	f7ff fe81 	bl	8012158 <HAL_RCC_GetSysClockFreq>
 8012456:	4602      	mov	r2, r0
 8012458:	4b10      	ldr	r3, [pc, #64]	; (801249c <HAL_RCC_GetHCLKFreq+0x50>)
 801245a:	699b      	ldr	r3, [r3, #24]
 801245c:	0a1b      	lsrs	r3, r3, #8
 801245e:	f003 030f 	and.w	r3, r3, #15
 8012462:	490f      	ldr	r1, [pc, #60]	; (80124a0 <HAL_RCC_GetHCLKFreq+0x54>)
 8012464:	5ccb      	ldrb	r3, [r1, r3]
 8012466:	f003 031f 	and.w	r3, r3, #31
 801246a:	fa22 f303 	lsr.w	r3, r2, r3
 801246e:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8012470:	4b0a      	ldr	r3, [pc, #40]	; (801249c <HAL_RCC_GetHCLKFreq+0x50>)
 8012472:	699b      	ldr	r3, [r3, #24]
 8012474:	f003 030f 	and.w	r3, r3, #15
 8012478:	4a09      	ldr	r2, [pc, #36]	; (80124a0 <HAL_RCC_GetHCLKFreq+0x54>)
 801247a:	5cd3      	ldrb	r3, [r2, r3]
 801247c:	f003 031f 	and.w	r3, r3, #31
 8012480:	687a      	ldr	r2, [r7, #4]
 8012482:	fa22 f303 	lsr.w	r3, r2, r3
 8012486:	4a07      	ldr	r2, [pc, #28]	; (80124a4 <HAL_RCC_GetHCLKFreq+0x58>)
 8012488:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 801248a:	4a07      	ldr	r2, [pc, #28]	; (80124a8 <HAL_RCC_GetHCLKFreq+0x5c>)
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8012490:	4b04      	ldr	r3, [pc, #16]	; (80124a4 <HAL_RCC_GetHCLKFreq+0x58>)
 8012492:	681b      	ldr	r3, [r3, #0]
}
 8012494:	4618      	mov	r0, r3
 8012496:	3708      	adds	r7, #8
 8012498:	46bd      	mov	sp, r7
 801249a:	bd80      	pop	{r7, pc}
 801249c:	58024400 	.word	0x58024400
 80124a0:	0802a3c8 	.word	0x0802a3c8
 80124a4:	24000058 	.word	0x24000058
 80124a8:	24000054 	.word	0x24000054

080124ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80124ac:	b580      	push	{r7, lr}
 80124ae:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 80124b0:	f7ff ffcc 	bl	801244c <HAL_RCC_GetHCLKFreq>
 80124b4:	4602      	mov	r2, r0
 80124b6:	4b06      	ldr	r3, [pc, #24]	; (80124d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80124b8:	69db      	ldr	r3, [r3, #28]
 80124ba:	091b      	lsrs	r3, r3, #4
 80124bc:	f003 0307 	and.w	r3, r3, #7
 80124c0:	4904      	ldr	r1, [pc, #16]	; (80124d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80124c2:	5ccb      	ldrb	r3, [r1, r3]
 80124c4:	f003 031f 	and.w	r3, r3, #31
 80124c8:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80124cc:	4618      	mov	r0, r3
 80124ce:	bd80      	pop	{r7, pc}
 80124d0:	58024400 	.word	0x58024400
 80124d4:	0802a3c8 	.word	0x0802a3c8

080124d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80124d8:	b580      	push	{r7, lr}
 80124da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 80124dc:	f7ff ffb6 	bl	801244c <HAL_RCC_GetHCLKFreq>
 80124e0:	4602      	mov	r2, r0
 80124e2:	4b06      	ldr	r3, [pc, #24]	; (80124fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80124e4:	69db      	ldr	r3, [r3, #28]
 80124e6:	0a1b      	lsrs	r3, r3, #8
 80124e8:	f003 0307 	and.w	r3, r3, #7
 80124ec:	4904      	ldr	r1, [pc, #16]	; (8012500 <HAL_RCC_GetPCLK2Freq+0x28>)
 80124ee:	5ccb      	ldrb	r3, [r1, r3]
 80124f0:	f003 031f 	and.w	r3, r3, #31
 80124f4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80124f8:	4618      	mov	r0, r3
 80124fa:	bd80      	pop	{r7, pc}
 80124fc:	58024400 	.word	0x58024400
 8012500:	0802a3c8 	.word	0x0802a3c8

08012504 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8012504:	b480      	push	{r7}
 8012506:	b083      	sub	sp, #12
 8012508:	af00      	add	r7, sp, #0
 801250a:	6078      	str	r0, [r7, #4]
 801250c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	223f      	movs	r2, #63	; 0x3f
 8012512:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8012514:	4b1a      	ldr	r3, [pc, #104]	; (8012580 <HAL_RCC_GetClockConfig+0x7c>)
 8012516:	691b      	ldr	r3, [r3, #16]
 8012518:	f003 0207 	and.w	r2, r3, #7
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	605a      	str	r2, [r3, #4]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
#else
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE);
 8012520:	4b17      	ldr	r3, [pc, #92]	; (8012580 <HAL_RCC_GetClockConfig+0x7c>)
 8012522:	699b      	ldr	r3, [r3, #24]
 8012524:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8012528:	687b      	ldr	r3, [r7, #4]
 801252a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE);
 801252c:	4b14      	ldr	r3, [pc, #80]	; (8012580 <HAL_RCC_GetClockConfig+0x7c>)
 801252e:	699b      	ldr	r3, [r3, #24]
 8012530:	f003 020f 	and.w	r2, r3, #15
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE);
 8012538:	4b11      	ldr	r3, [pc, #68]	; (8012580 <HAL_RCC_GetClockConfig+0x7c>)
 801253a:	699b      	ldr	r3, [r3, #24]
 801253c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1);
 8012544:	4b0e      	ldr	r3, [pc, #56]	; (8012580 <HAL_RCC_GetClockConfig+0x7c>)
 8012546:	69db      	ldr	r3, [r3, #28]
 8012548:	f003 0270 	and.w	r2, r3, #112	; 0x70
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2);
 8012550:	4b0b      	ldr	r3, [pc, #44]	; (8012580 <HAL_RCC_GetClockConfig+0x7c>)
 8012552:	69db      	ldr	r3, [r3, #28]
 8012554:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8012558:	687b      	ldr	r3, [r7, #4]
 801255a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
 801255c:	4b08      	ldr	r3, [pc, #32]	; (8012580 <HAL_RCC_GetClockConfig+0x7c>)
 801255e:	6a1b      	ldr	r3, [r3, #32]
 8012560:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	61da      	str	r2, [r3, #28]
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8012568:	4b06      	ldr	r3, [pc, #24]	; (8012584 <HAL_RCC_GetClockConfig+0x80>)
 801256a:	681b      	ldr	r3, [r3, #0]
 801256c:	f003 020f 	and.w	r2, r3, #15
 8012570:	683b      	ldr	r3, [r7, #0]
 8012572:	601a      	str	r2, [r3, #0]
}
 8012574:	bf00      	nop
 8012576:	370c      	adds	r7, #12
 8012578:	46bd      	mov	sp, r7
 801257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801257e:	4770      	bx	lr
 8012580:	58024400 	.word	0x58024400
 8012584:	52002000 	.word	0x52002000

08012588 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8012588:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801258c:	b0c8      	sub	sp, #288	; 0x120
 801258e:	af00      	add	r7, sp, #0
 8012590:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8012594:	2300      	movs	r3, #0
 8012596:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 801259a:	2300      	movs	r3, #0
 801259c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80125a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80125a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125a8:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80125ac:	2500      	movs	r5, #0
 80125ae:	ea54 0305 	orrs.w	r3, r4, r5
 80125b2:	d049      	beq.n	8012648 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80125b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80125b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80125ba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80125be:	d02f      	beq.n	8012620 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80125c0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80125c4:	d828      	bhi.n	8012618 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80125c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80125ca:	d01a      	beq.n	8012602 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80125cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80125d0:	d822      	bhi.n	8012618 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80125d2:	2b00      	cmp	r3, #0
 80125d4:	d003      	beq.n	80125de <HAL_RCCEx_PeriphCLKConfig+0x56>
 80125d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80125da:	d007      	beq.n	80125ec <HAL_RCCEx_PeriphCLKConfig+0x64>
 80125dc:	e01c      	b.n	8012618 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80125de:	4ba7      	ldr	r3, [pc, #668]	; (801287c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80125e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80125e2:	4aa6      	ldr	r2, [pc, #664]	; (801287c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80125e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80125e8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80125ea:	e01a      	b.n	8012622 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80125ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80125f0:	3308      	adds	r3, #8
 80125f2:	2102      	movs	r1, #2
 80125f4:	4618      	mov	r0, r3
 80125f6:	f001 f985 	bl	8013904 <RCCEx_PLL2_Config>
 80125fa:	4603      	mov	r3, r0
 80125fc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8012600:	e00f      	b.n	8012622 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8012602:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012606:	3328      	adds	r3, #40	; 0x28
 8012608:	2102      	movs	r1, #2
 801260a:	4618      	mov	r0, r3
 801260c:	f001 fa2c 	bl	8013a68 <RCCEx_PLL3_Config>
 8012610:	4603      	mov	r3, r0
 8012612:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8012616:	e004      	b.n	8012622 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012618:	2301      	movs	r3, #1
 801261a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 801261e:	e000      	b.n	8012622 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8012620:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012622:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8012626:	2b00      	cmp	r3, #0
 8012628:	d10a      	bne.n	8012640 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 801262a:	4b94      	ldr	r3, [pc, #592]	; (801287c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 801262c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801262e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8012632:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012636:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012638:	4a90      	ldr	r2, [pc, #576]	; (801287c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 801263a:	430b      	orrs	r3, r1
 801263c:	6513      	str	r3, [r2, #80]	; 0x50
 801263e:	e003      	b.n	8012648 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012640:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8012644:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8012648:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801264c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012650:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8012654:	f04f 0900 	mov.w	r9, #0
 8012658:	ea58 0309 	orrs.w	r3, r8, r9
 801265c:	d047      	beq.n	80126ee <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 801265e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012662:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012664:	2b04      	cmp	r3, #4
 8012666:	d82a      	bhi.n	80126be <HAL_RCCEx_PeriphCLKConfig+0x136>
 8012668:	a201      	add	r2, pc, #4	; (adr r2, 8012670 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 801266a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801266e:	bf00      	nop
 8012670:	08012685 	.word	0x08012685
 8012674:	08012693 	.word	0x08012693
 8012678:	080126a9 	.word	0x080126a9
 801267c:	080126c7 	.word	0x080126c7
 8012680:	080126c7 	.word	0x080126c7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012684:	4b7d      	ldr	r3, [pc, #500]	; (801287c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8012686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012688:	4a7c      	ldr	r2, [pc, #496]	; (801287c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 801268a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801268e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8012690:	e01a      	b.n	80126c8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8012692:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012696:	3308      	adds	r3, #8
 8012698:	2100      	movs	r1, #0
 801269a:	4618      	mov	r0, r3
 801269c:	f001 f932 	bl	8013904 <RCCEx_PLL2_Config>
 80126a0:	4603      	mov	r3, r0
 80126a2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80126a6:	e00f      	b.n	80126c8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80126a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80126ac:	3328      	adds	r3, #40	; 0x28
 80126ae:	2100      	movs	r1, #0
 80126b0:	4618      	mov	r0, r3
 80126b2:	f001 f9d9 	bl	8013a68 <RCCEx_PLL3_Config>
 80126b6:	4603      	mov	r3, r0
 80126b8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80126bc:	e004      	b.n	80126c8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80126be:	2301      	movs	r3, #1
 80126c0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80126c4:	e000      	b.n	80126c8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80126c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80126c8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80126cc:	2b00      	cmp	r3, #0
 80126ce:	d10a      	bne.n	80126e6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80126d0:	4b6a      	ldr	r3, [pc, #424]	; (801287c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80126d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80126d4:	f023 0107 	bic.w	r1, r3, #7
 80126d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80126dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80126de:	4a67      	ldr	r2, [pc, #412]	; (801287c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80126e0:	430b      	orrs	r3, r1
 80126e2:	6513      	str	r3, [r2, #80]	; 0x50
 80126e4:	e003      	b.n	80126ee <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80126e6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80126ea:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 80126ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80126f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126f6:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80126fa:	f04f 0b00 	mov.w	fp, #0
 80126fe:	ea5a 030b 	orrs.w	r3, sl, fp
 8012702:	d054      	beq.n	80127ae <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8012704:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012708:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801270a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 801270e:	d036      	beq.n	801277e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8012710:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8012714:	d82f      	bhi.n	8012776 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8012716:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801271a:	d032      	beq.n	8012782 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 801271c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012720:	d829      	bhi.n	8012776 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8012722:	2bc0      	cmp	r3, #192	; 0xc0
 8012724:	d02f      	beq.n	8012786 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8012726:	2bc0      	cmp	r3, #192	; 0xc0
 8012728:	d825      	bhi.n	8012776 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 801272a:	2b80      	cmp	r3, #128	; 0x80
 801272c:	d018      	beq.n	8012760 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 801272e:	2b80      	cmp	r3, #128	; 0x80
 8012730:	d821      	bhi.n	8012776 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8012732:	2b00      	cmp	r3, #0
 8012734:	d002      	beq.n	801273c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8012736:	2b40      	cmp	r3, #64	; 0x40
 8012738:	d007      	beq.n	801274a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 801273a:	e01c      	b.n	8012776 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801273c:	4b4f      	ldr	r3, [pc, #316]	; (801287c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 801273e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012740:	4a4e      	ldr	r2, [pc, #312]	; (801287c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8012742:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8012746:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8012748:	e01e      	b.n	8012788 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801274a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801274e:	3308      	adds	r3, #8
 8012750:	2100      	movs	r1, #0
 8012752:	4618      	mov	r0, r3
 8012754:	f001 f8d6 	bl	8013904 <RCCEx_PLL2_Config>
 8012758:	4603      	mov	r3, r0
 801275a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 801275e:	e013      	b.n	8012788 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8012760:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012764:	3328      	adds	r3, #40	; 0x28
 8012766:	2100      	movs	r1, #0
 8012768:	4618      	mov	r0, r3
 801276a:	f001 f97d 	bl	8013a68 <RCCEx_PLL3_Config>
 801276e:	4603      	mov	r3, r0
 8012770:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8012774:	e008      	b.n	8012788 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012776:	2301      	movs	r3, #1
 8012778:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 801277c:	e004      	b.n	8012788 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 801277e:	bf00      	nop
 8012780:	e002      	b.n	8012788 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8012782:	bf00      	nop
 8012784:	e000      	b.n	8012788 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8012786:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012788:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 801278c:	2b00      	cmp	r3, #0
 801278e:	d10a      	bne.n	80127a6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8012790:	4b3a      	ldr	r3, [pc, #232]	; (801287c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8012792:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012794:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8012798:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801279c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801279e:	4a37      	ldr	r2, [pc, #220]	; (801287c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80127a0:	430b      	orrs	r3, r1
 80127a2:	6513      	str	r3, [r2, #80]	; 0x50
 80127a4:	e003      	b.n	80127ae <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80127a6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80127aa:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 80127ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80127b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127b6:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80127ba:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80127be:	2300      	movs	r3, #0
 80127c0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80127c4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80127c8:	460b      	mov	r3, r1
 80127ca:	4313      	orrs	r3, r2
 80127cc:	d05c      	beq.n	8012888 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 80127ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80127d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80127d4:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80127d8:	d03b      	beq.n	8012852 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80127da:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80127de:	d834      	bhi.n	801284a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80127e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80127e4:	d037      	beq.n	8012856 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 80127e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80127ea:	d82e      	bhi.n	801284a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80127ec:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80127f0:	d033      	beq.n	801285a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80127f2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80127f6:	d828      	bhi.n	801284a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80127f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80127fc:	d01a      	beq.n	8012834 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 80127fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012802:	d822      	bhi.n	801284a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8012804:	2b00      	cmp	r3, #0
 8012806:	d003      	beq.n	8012810 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8012808:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801280c:	d007      	beq.n	801281e <HAL_RCCEx_PeriphCLKConfig+0x296>
 801280e:	e01c      	b.n	801284a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012810:	4b1a      	ldr	r3, [pc, #104]	; (801287c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8012812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012814:	4a19      	ldr	r2, [pc, #100]	; (801287c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8012816:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801281a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 801281c:	e01e      	b.n	801285c <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801281e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012822:	3308      	adds	r3, #8
 8012824:	2100      	movs	r1, #0
 8012826:	4618      	mov	r0, r3
 8012828:	f001 f86c 	bl	8013904 <RCCEx_PLL2_Config>
 801282c:	4603      	mov	r3, r0
 801282e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8012832:	e013      	b.n	801285c <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8012834:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012838:	3328      	adds	r3, #40	; 0x28
 801283a:	2100      	movs	r1, #0
 801283c:	4618      	mov	r0, r3
 801283e:	f001 f913 	bl	8013a68 <RCCEx_PLL3_Config>
 8012842:	4603      	mov	r3, r0
 8012844:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8012848:	e008      	b.n	801285c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801284a:	2301      	movs	r3, #1
 801284c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8012850:	e004      	b.n	801285c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8012852:	bf00      	nop
 8012854:	e002      	b.n	801285c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8012856:	bf00      	nop
 8012858:	e000      	b.n	801285c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 801285a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801285c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8012860:	2b00      	cmp	r3, #0
 8012862:	d10d      	bne.n	8012880 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8012864:	4b05      	ldr	r3, [pc, #20]	; (801287c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8012866:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012868:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 801286c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012870:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012872:	4a02      	ldr	r2, [pc, #8]	; (801287c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8012874:	430b      	orrs	r3, r1
 8012876:	6513      	str	r3, [r2, #80]	; 0x50
 8012878:	e006      	b.n	8012888 <HAL_RCCEx_PeriphCLKConfig+0x300>
 801287a:	bf00      	nop
 801287c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012880:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8012884:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8012888:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801288c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012890:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8012894:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8012898:	2300      	movs	r3, #0
 801289a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 801289e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80128a2:	460b      	mov	r3, r1
 80128a4:	4313      	orrs	r3, r2
 80128a6:	d03a      	beq.n	801291e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80128a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80128ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80128ae:	2b30      	cmp	r3, #48	; 0x30
 80128b0:	d01f      	beq.n	80128f2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80128b2:	2b30      	cmp	r3, #48	; 0x30
 80128b4:	d819      	bhi.n	80128ea <HAL_RCCEx_PeriphCLKConfig+0x362>
 80128b6:	2b20      	cmp	r3, #32
 80128b8:	d00c      	beq.n	80128d4 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80128ba:	2b20      	cmp	r3, #32
 80128bc:	d815      	bhi.n	80128ea <HAL_RCCEx_PeriphCLKConfig+0x362>
 80128be:	2b00      	cmp	r3, #0
 80128c0:	d019      	beq.n	80128f6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80128c2:	2b10      	cmp	r3, #16
 80128c4:	d111      	bne.n	80128ea <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80128c6:	4bae      	ldr	r3, [pc, #696]	; (8012b80 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80128c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80128ca:	4aad      	ldr	r2, [pc, #692]	; (8012b80 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80128cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80128d0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80128d2:	e011      	b.n	80128f8 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80128d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80128d8:	3308      	adds	r3, #8
 80128da:	2102      	movs	r1, #2
 80128dc:	4618      	mov	r0, r3
 80128de:	f001 f811 	bl	8013904 <RCCEx_PLL2_Config>
 80128e2:	4603      	mov	r3, r0
 80128e4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80128e8:	e006      	b.n	80128f8 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80128ea:	2301      	movs	r3, #1
 80128ec:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80128f0:	e002      	b.n	80128f8 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80128f2:	bf00      	nop
 80128f4:	e000      	b.n	80128f8 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80128f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80128f8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80128fc:	2b00      	cmp	r3, #0
 80128fe:	d10a      	bne.n	8012916 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8012900:	4b9f      	ldr	r3, [pc, #636]	; (8012b80 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8012902:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012904:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8012908:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801290c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801290e:	4a9c      	ldr	r2, [pc, #624]	; (8012b80 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8012910:	430b      	orrs	r3, r1
 8012912:	64d3      	str	r3, [r2, #76]	; 0x4c
 8012914:	e003      	b.n	801291e <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012916:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 801291a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 801291e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012926:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 801292a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 801292e:	2300      	movs	r3, #0
 8012930:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8012934:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8012938:	460b      	mov	r3, r1
 801293a:	4313      	orrs	r3, r2
 801293c:	d051      	beq.n	80129e2 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 801293e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012942:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012944:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012948:	d035      	beq.n	80129b6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 801294a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801294e:	d82e      	bhi.n	80129ae <HAL_RCCEx_PeriphCLKConfig+0x426>
 8012950:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8012954:	d031      	beq.n	80129ba <HAL_RCCEx_PeriphCLKConfig+0x432>
 8012956:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 801295a:	d828      	bhi.n	80129ae <HAL_RCCEx_PeriphCLKConfig+0x426>
 801295c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8012960:	d01a      	beq.n	8012998 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8012962:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8012966:	d822      	bhi.n	80129ae <HAL_RCCEx_PeriphCLKConfig+0x426>
 8012968:	2b00      	cmp	r3, #0
 801296a:	d003      	beq.n	8012974 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 801296c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012970:	d007      	beq.n	8012982 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8012972:	e01c      	b.n	80129ae <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012974:	4b82      	ldr	r3, [pc, #520]	; (8012b80 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8012976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012978:	4a81      	ldr	r2, [pc, #516]	; (8012b80 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801297a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801297e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8012980:	e01c      	b.n	80129bc <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8012982:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012986:	3308      	adds	r3, #8
 8012988:	2100      	movs	r1, #0
 801298a:	4618      	mov	r0, r3
 801298c:	f000 ffba 	bl	8013904 <RCCEx_PLL2_Config>
 8012990:	4603      	mov	r3, r0
 8012992:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8012996:	e011      	b.n	80129bc <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8012998:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801299c:	3328      	adds	r3, #40	; 0x28
 801299e:	2100      	movs	r1, #0
 80129a0:	4618      	mov	r0, r3
 80129a2:	f001 f861 	bl	8013a68 <RCCEx_PLL3_Config>
 80129a6:	4603      	mov	r3, r0
 80129a8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80129ac:	e006      	b.n	80129bc <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80129ae:	2301      	movs	r3, #1
 80129b0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80129b4:	e002      	b.n	80129bc <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80129b6:	bf00      	nop
 80129b8:	e000      	b.n	80129bc <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80129ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80129bc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80129c0:	2b00      	cmp	r3, #0
 80129c2:	d10a      	bne.n	80129da <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80129c4:	4b6e      	ldr	r3, [pc, #440]	; (8012b80 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80129c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80129c8:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80129cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80129d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80129d2:	4a6b      	ldr	r2, [pc, #428]	; (8012b80 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80129d4:	430b      	orrs	r3, r1
 80129d6:	6513      	str	r3, [r2, #80]	; 0x50
 80129d8:	e003      	b.n	80129e2 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80129da:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80129de:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80129e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80129e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129ea:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80129ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80129f2:	2300      	movs	r3, #0
 80129f4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80129f8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80129fc:	460b      	mov	r3, r1
 80129fe:	4313      	orrs	r3, r2
 8012a00:	d053      	beq.n	8012aaa <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8012a02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012a06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012a08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8012a0c:	d033      	beq.n	8012a76 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8012a0e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8012a12:	d82c      	bhi.n	8012a6e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8012a14:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8012a18:	d02f      	beq.n	8012a7a <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8012a1a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8012a1e:	d826      	bhi.n	8012a6e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8012a20:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8012a24:	d02b      	beq.n	8012a7e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8012a26:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8012a2a:	d820      	bhi.n	8012a6e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8012a2c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8012a30:	d012      	beq.n	8012a58 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8012a32:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8012a36:	d81a      	bhi.n	8012a6e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8012a38:	2b00      	cmp	r3, #0
 8012a3a:	d022      	beq.n	8012a82 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8012a3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012a40:	d115      	bne.n	8012a6e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8012a42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012a46:	3308      	adds	r3, #8
 8012a48:	2101      	movs	r1, #1
 8012a4a:	4618      	mov	r0, r3
 8012a4c:	f000 ff5a 	bl	8013904 <RCCEx_PLL2_Config>
 8012a50:	4603      	mov	r3, r0
 8012a52:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8012a56:	e015      	b.n	8012a84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8012a58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012a5c:	3328      	adds	r3, #40	; 0x28
 8012a5e:	2101      	movs	r1, #1
 8012a60:	4618      	mov	r0, r3
 8012a62:	f001 f801 	bl	8013a68 <RCCEx_PLL3_Config>
 8012a66:	4603      	mov	r3, r0
 8012a68:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8012a6c:	e00a      	b.n	8012a84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012a6e:	2301      	movs	r3, #1
 8012a70:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8012a74:	e006      	b.n	8012a84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8012a76:	bf00      	nop
 8012a78:	e004      	b.n	8012a84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8012a7a:	bf00      	nop
 8012a7c:	e002      	b.n	8012a84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8012a7e:	bf00      	nop
 8012a80:	e000      	b.n	8012a84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8012a82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012a84:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8012a88:	2b00      	cmp	r3, #0
 8012a8a:	d10a      	bne.n	8012aa2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8012a8c:	4b3c      	ldr	r3, [pc, #240]	; (8012b80 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8012a8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012a90:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8012a94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012a98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012a9a:	4a39      	ldr	r2, [pc, #228]	; (8012b80 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8012a9c:	430b      	orrs	r3, r1
 8012a9e:	6513      	str	r3, [r2, #80]	; 0x50
 8012aa0:	e003      	b.n	8012aaa <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012aa2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8012aa6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8012aaa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ab2:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8012ab6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8012aba:	2300      	movs	r3, #0
 8012abc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8012ac0:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8012ac4:	460b      	mov	r3, r1
 8012ac6:	4313      	orrs	r3, r2
 8012ac8:	d060      	beq.n	8012b8c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8012aca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012ace:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8012ad2:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8012ad6:	d039      	beq.n	8012b4c <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8012ad8:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8012adc:	d832      	bhi.n	8012b44 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8012ade:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8012ae2:	d035      	beq.n	8012b50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8012ae4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8012ae8:	d82c      	bhi.n	8012b44 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8012aea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012aee:	d031      	beq.n	8012b54 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8012af0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012af4:	d826      	bhi.n	8012b44 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8012af6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8012afa:	d02d      	beq.n	8012b58 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8012afc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8012b00:	d820      	bhi.n	8012b44 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8012b02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8012b06:	d012      	beq.n	8012b2e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8012b08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8012b0c:	d81a      	bhi.n	8012b44 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8012b0e:	2b00      	cmp	r3, #0
 8012b10:	d024      	beq.n	8012b5c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8012b12:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8012b16:	d115      	bne.n	8012b44 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8012b18:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012b1c:	3308      	adds	r3, #8
 8012b1e:	2101      	movs	r1, #1
 8012b20:	4618      	mov	r0, r3
 8012b22:	f000 feef 	bl	8013904 <RCCEx_PLL2_Config>
 8012b26:	4603      	mov	r3, r0
 8012b28:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8012b2c:	e017      	b.n	8012b5e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8012b2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012b32:	3328      	adds	r3, #40	; 0x28
 8012b34:	2101      	movs	r1, #1
 8012b36:	4618      	mov	r0, r3
 8012b38:	f000 ff96 	bl	8013a68 <RCCEx_PLL3_Config>
 8012b3c:	4603      	mov	r3, r0
 8012b3e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8012b42:	e00c      	b.n	8012b5e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8012b44:	2301      	movs	r3, #1
 8012b46:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8012b4a:	e008      	b.n	8012b5e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8012b4c:	bf00      	nop
 8012b4e:	e006      	b.n	8012b5e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8012b50:	bf00      	nop
 8012b52:	e004      	b.n	8012b5e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8012b54:	bf00      	nop
 8012b56:	e002      	b.n	8012b5e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8012b58:	bf00      	nop
 8012b5a:	e000      	b.n	8012b5e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8012b5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012b5e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8012b62:	2b00      	cmp	r3, #0
 8012b64:	d10e      	bne.n	8012b84 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8012b66:	4b06      	ldr	r3, [pc, #24]	; (8012b80 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8012b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012b6a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8012b6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012b72:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8012b76:	4a02      	ldr	r2, [pc, #8]	; (8012b80 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8012b78:	430b      	orrs	r3, r1
 8012b7a:	6593      	str	r3, [r2, #88]	; 0x58
 8012b7c:	e006      	b.n	8012b8c <HAL_RCCEx_PeriphCLKConfig+0x604>
 8012b7e:	bf00      	nop
 8012b80:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012b84:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8012b88:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8012b8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b94:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8012b98:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8012b9c:	2300      	movs	r3, #0
 8012b9e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8012ba2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8012ba6:	460b      	mov	r3, r1
 8012ba8:	4313      	orrs	r3, r2
 8012baa:	d037      	beq.n	8012c1c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8012bac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012bb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012bb2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8012bb6:	d00e      	beq.n	8012bd6 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8012bb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8012bbc:	d816      	bhi.n	8012bec <HAL_RCCEx_PeriphCLKConfig+0x664>
 8012bbe:	2b00      	cmp	r3, #0
 8012bc0:	d018      	beq.n	8012bf4 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8012bc2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8012bc6:	d111      	bne.n	8012bec <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012bc8:	4bc4      	ldr	r3, [pc, #784]	; (8012edc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012bcc:	4ac3      	ldr	r2, [pc, #780]	; (8012edc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012bce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8012bd2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8012bd4:	e00f      	b.n	8012bf6 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8012bd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012bda:	3308      	adds	r3, #8
 8012bdc:	2101      	movs	r1, #1
 8012bde:	4618      	mov	r0, r3
 8012be0:	f000 fe90 	bl	8013904 <RCCEx_PLL2_Config>
 8012be4:	4603      	mov	r3, r0
 8012be6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8012bea:	e004      	b.n	8012bf6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012bec:	2301      	movs	r3, #1
 8012bee:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8012bf2:	e000      	b.n	8012bf6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8012bf4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012bf6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8012bfa:	2b00      	cmp	r3, #0
 8012bfc:	d10a      	bne.n	8012c14 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8012bfe:	4bb7      	ldr	r3, [pc, #732]	; (8012edc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012c00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012c02:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8012c06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012c0a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012c0c:	4ab3      	ldr	r2, [pc, #716]	; (8012edc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012c0e:	430b      	orrs	r3, r1
 8012c10:	6513      	str	r3, [r2, #80]	; 0x50
 8012c12:	e003      	b.n	8012c1c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012c14:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8012c18:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8012c1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c24:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8012c28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8012c2c:	2300      	movs	r3, #0
 8012c2e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8012c32:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8012c36:	460b      	mov	r3, r1
 8012c38:	4313      	orrs	r3, r2
 8012c3a:	d039      	beq.n	8012cb0 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8012c3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012c40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012c42:	2b03      	cmp	r3, #3
 8012c44:	d81c      	bhi.n	8012c80 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8012c46:	a201      	add	r2, pc, #4	; (adr r2, 8012c4c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8012c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012c4c:	08012c89 	.word	0x08012c89
 8012c50:	08012c5d 	.word	0x08012c5d
 8012c54:	08012c6b 	.word	0x08012c6b
 8012c58:	08012c89 	.word	0x08012c89
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012c5c:	4b9f      	ldr	r3, [pc, #636]	; (8012edc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c60:	4a9e      	ldr	r2, [pc, #632]	; (8012edc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012c62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8012c66:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8012c68:	e00f      	b.n	8012c8a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8012c6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012c6e:	3308      	adds	r3, #8
 8012c70:	2102      	movs	r1, #2
 8012c72:	4618      	mov	r0, r3
 8012c74:	f000 fe46 	bl	8013904 <RCCEx_PLL2_Config>
 8012c78:	4603      	mov	r3, r0
 8012c7a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8012c7e:	e004      	b.n	8012c8a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8012c80:	2301      	movs	r3, #1
 8012c82:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8012c86:	e000      	b.n	8012c8a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8012c88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012c8a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8012c8e:	2b00      	cmp	r3, #0
 8012c90:	d10a      	bne.n	8012ca8 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8012c92:	4b92      	ldr	r3, [pc, #584]	; (8012edc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012c96:	f023 0103 	bic.w	r1, r3, #3
 8012c9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012c9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012ca0:	4a8e      	ldr	r2, [pc, #568]	; (8012edc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012ca2:	430b      	orrs	r3, r1
 8012ca4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8012ca6:	e003      	b.n	8012cb0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012ca8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8012cac:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8012cb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cb8:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8012cbc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8012cc0:	2300      	movs	r3, #0
 8012cc2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8012cc6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8012cca:	460b      	mov	r3, r1
 8012ccc:	4313      	orrs	r3, r2
 8012cce:	f000 8099 	beq.w	8012e04 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8012cd2:	4b83      	ldr	r3, [pc, #524]	; (8012ee0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8012cd4:	681b      	ldr	r3, [r3, #0]
 8012cd6:	4a82      	ldr	r2, [pc, #520]	; (8012ee0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8012cd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012cdc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8012cde:	f7f8 ff3f 	bl	800bb60 <HAL_GetTick>
 8012ce2:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8012ce6:	e00b      	b.n	8012d00 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8012ce8:	f7f8 ff3a 	bl	800bb60 <HAL_GetTick>
 8012cec:	4602      	mov	r2, r0
 8012cee:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8012cf2:	1ad3      	subs	r3, r2, r3
 8012cf4:	2b64      	cmp	r3, #100	; 0x64
 8012cf6:	d903      	bls.n	8012d00 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8012cf8:	2303      	movs	r3, #3
 8012cfa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8012cfe:	e005      	b.n	8012d0c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8012d00:	4b77      	ldr	r3, [pc, #476]	; (8012ee0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8012d02:	681b      	ldr	r3, [r3, #0]
 8012d04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012d08:	2b00      	cmp	r3, #0
 8012d0a:	d0ed      	beq.n	8012ce8 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8012d0c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8012d10:	2b00      	cmp	r3, #0
 8012d12:	d173      	bne.n	8012dfc <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8012d14:	4b71      	ldr	r3, [pc, #452]	; (8012edc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012d16:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8012d18:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012d1c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8012d20:	4053      	eors	r3, r2
 8012d22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8012d26:	2b00      	cmp	r3, #0
 8012d28:	d015      	beq.n	8012d56 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8012d2a:	4b6c      	ldr	r3, [pc, #432]	; (8012edc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012d2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012d32:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8012d36:	4b69      	ldr	r3, [pc, #420]	; (8012edc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012d3a:	4a68      	ldr	r2, [pc, #416]	; (8012edc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012d3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8012d40:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8012d42:	4b66      	ldr	r3, [pc, #408]	; (8012edc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012d46:	4a65      	ldr	r2, [pc, #404]	; (8012edc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012d48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8012d4c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8012d4e:	4a63      	ldr	r2, [pc, #396]	; (8012edc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012d50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8012d54:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8012d56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012d5a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8012d5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012d62:	d118      	bne.n	8012d96 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012d64:	f7f8 fefc 	bl	800bb60 <HAL_GetTick>
 8012d68:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8012d6c:	e00d      	b.n	8012d8a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8012d6e:	f7f8 fef7 	bl	800bb60 <HAL_GetTick>
 8012d72:	4602      	mov	r2, r0
 8012d74:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8012d78:	1ad2      	subs	r2, r2, r3
 8012d7a:	f241 3388 	movw	r3, #5000	; 0x1388
 8012d7e:	429a      	cmp	r2, r3
 8012d80:	d903      	bls.n	8012d8a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8012d82:	2303      	movs	r3, #3
 8012d84:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 8012d88:	e005      	b.n	8012d96 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8012d8a:	4b54      	ldr	r3, [pc, #336]	; (8012edc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012d8e:	f003 0302 	and.w	r3, r3, #2
 8012d92:	2b00      	cmp	r3, #0
 8012d94:	d0eb      	beq.n	8012d6e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8012d96:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8012d9a:	2b00      	cmp	r3, #0
 8012d9c:	d129      	bne.n	8012df2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8012d9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012da2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8012da6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8012daa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8012dae:	d10e      	bne.n	8012dce <HAL_RCCEx_PeriphCLKConfig+0x846>
 8012db0:	4b4a      	ldr	r3, [pc, #296]	; (8012edc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012db2:	691b      	ldr	r3, [r3, #16]
 8012db4:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8012db8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012dbc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8012dc0:	091a      	lsrs	r2, r3, #4
 8012dc2:	4b48      	ldr	r3, [pc, #288]	; (8012ee4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8012dc4:	4013      	ands	r3, r2
 8012dc6:	4a45      	ldr	r2, [pc, #276]	; (8012edc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012dc8:	430b      	orrs	r3, r1
 8012dca:	6113      	str	r3, [r2, #16]
 8012dcc:	e005      	b.n	8012dda <HAL_RCCEx_PeriphCLKConfig+0x852>
 8012dce:	4b43      	ldr	r3, [pc, #268]	; (8012edc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012dd0:	691b      	ldr	r3, [r3, #16]
 8012dd2:	4a42      	ldr	r2, [pc, #264]	; (8012edc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012dd4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012dd8:	6113      	str	r3, [r2, #16]
 8012dda:	4b40      	ldr	r3, [pc, #256]	; (8012edc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012ddc:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8012dde:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012de2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8012de6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012dea:	4a3c      	ldr	r2, [pc, #240]	; (8012edc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012dec:	430b      	orrs	r3, r1
 8012dee:	6713      	str	r3, [r2, #112]	; 0x70
 8012df0:	e008      	b.n	8012e04 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8012df2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8012df6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8012dfa:	e003      	b.n	8012e04 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012dfc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8012e00:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8012e04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e0c:	f002 0301 	and.w	r3, r2, #1
 8012e10:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8012e14:	2300      	movs	r3, #0
 8012e16:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8012e1a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8012e1e:	460b      	mov	r3, r1
 8012e20:	4313      	orrs	r3, r2
 8012e22:	f000 8090 	beq.w	8012f46 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8012e26:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012e2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012e2e:	2b28      	cmp	r3, #40	; 0x28
 8012e30:	d870      	bhi.n	8012f14 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8012e32:	a201      	add	r2, pc, #4	; (adr r2, 8012e38 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8012e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012e38:	08012f1d 	.word	0x08012f1d
 8012e3c:	08012f15 	.word	0x08012f15
 8012e40:	08012f15 	.word	0x08012f15
 8012e44:	08012f15 	.word	0x08012f15
 8012e48:	08012f15 	.word	0x08012f15
 8012e4c:	08012f15 	.word	0x08012f15
 8012e50:	08012f15 	.word	0x08012f15
 8012e54:	08012f15 	.word	0x08012f15
 8012e58:	08012ee9 	.word	0x08012ee9
 8012e5c:	08012f15 	.word	0x08012f15
 8012e60:	08012f15 	.word	0x08012f15
 8012e64:	08012f15 	.word	0x08012f15
 8012e68:	08012f15 	.word	0x08012f15
 8012e6c:	08012f15 	.word	0x08012f15
 8012e70:	08012f15 	.word	0x08012f15
 8012e74:	08012f15 	.word	0x08012f15
 8012e78:	08012eff 	.word	0x08012eff
 8012e7c:	08012f15 	.word	0x08012f15
 8012e80:	08012f15 	.word	0x08012f15
 8012e84:	08012f15 	.word	0x08012f15
 8012e88:	08012f15 	.word	0x08012f15
 8012e8c:	08012f15 	.word	0x08012f15
 8012e90:	08012f15 	.word	0x08012f15
 8012e94:	08012f15 	.word	0x08012f15
 8012e98:	08012f1d 	.word	0x08012f1d
 8012e9c:	08012f15 	.word	0x08012f15
 8012ea0:	08012f15 	.word	0x08012f15
 8012ea4:	08012f15 	.word	0x08012f15
 8012ea8:	08012f15 	.word	0x08012f15
 8012eac:	08012f15 	.word	0x08012f15
 8012eb0:	08012f15 	.word	0x08012f15
 8012eb4:	08012f15 	.word	0x08012f15
 8012eb8:	08012f1d 	.word	0x08012f1d
 8012ebc:	08012f15 	.word	0x08012f15
 8012ec0:	08012f15 	.word	0x08012f15
 8012ec4:	08012f15 	.word	0x08012f15
 8012ec8:	08012f15 	.word	0x08012f15
 8012ecc:	08012f15 	.word	0x08012f15
 8012ed0:	08012f15 	.word	0x08012f15
 8012ed4:	08012f15 	.word	0x08012f15
 8012ed8:	08012f1d 	.word	0x08012f1d
 8012edc:	58024400 	.word	0x58024400
 8012ee0:	58024800 	.word	0x58024800
 8012ee4:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8012ee8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012eec:	3308      	adds	r3, #8
 8012eee:	2101      	movs	r1, #1
 8012ef0:	4618      	mov	r0, r3
 8012ef2:	f000 fd07 	bl	8013904 <RCCEx_PLL2_Config>
 8012ef6:	4603      	mov	r3, r0
 8012ef8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8012efc:	e00f      	b.n	8012f1e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8012efe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012f02:	3328      	adds	r3, #40	; 0x28
 8012f04:	2101      	movs	r1, #1
 8012f06:	4618      	mov	r0, r3
 8012f08:	f000 fdae 	bl	8013a68 <RCCEx_PLL3_Config>
 8012f0c:	4603      	mov	r3, r0
 8012f0e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8012f12:	e004      	b.n	8012f1e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012f14:	2301      	movs	r3, #1
 8012f16:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8012f1a:	e000      	b.n	8012f1e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8012f1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012f1e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8012f22:	2b00      	cmp	r3, #0
 8012f24:	d10b      	bne.n	8012f3e <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8012f26:	4bc0      	ldr	r3, [pc, #768]	; (8013228 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8012f28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012f2a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8012f2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012f32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012f36:	4abc      	ldr	r2, [pc, #752]	; (8013228 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8012f38:	430b      	orrs	r3, r1
 8012f3a:	6553      	str	r3, [r2, #84]	; 0x54
 8012f3c:	e003      	b.n	8012f46 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012f3e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8012f42:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8012f46:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f4e:	f002 0302 	and.w	r3, r2, #2
 8012f52:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8012f56:	2300      	movs	r3, #0
 8012f58:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8012f5c:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8012f60:	460b      	mov	r3, r1
 8012f62:	4313      	orrs	r3, r2
 8012f64:	d043      	beq.n	8012fee <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8012f66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012f6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012f6e:	2b05      	cmp	r3, #5
 8012f70:	d824      	bhi.n	8012fbc <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8012f72:	a201      	add	r2, pc, #4	; (adr r2, 8012f78 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8012f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012f78:	08012fc5 	.word	0x08012fc5
 8012f7c:	08012f91 	.word	0x08012f91
 8012f80:	08012fa7 	.word	0x08012fa7
 8012f84:	08012fc5 	.word	0x08012fc5
 8012f88:	08012fc5 	.word	0x08012fc5
 8012f8c:	08012fc5 	.word	0x08012fc5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8012f90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012f94:	3308      	adds	r3, #8
 8012f96:	2101      	movs	r1, #1
 8012f98:	4618      	mov	r0, r3
 8012f9a:	f000 fcb3 	bl	8013904 <RCCEx_PLL2_Config>
 8012f9e:	4603      	mov	r3, r0
 8012fa0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8012fa4:	e00f      	b.n	8012fc6 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8012fa6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012faa:	3328      	adds	r3, #40	; 0x28
 8012fac:	2101      	movs	r1, #1
 8012fae:	4618      	mov	r0, r3
 8012fb0:	f000 fd5a 	bl	8013a68 <RCCEx_PLL3_Config>
 8012fb4:	4603      	mov	r3, r0
 8012fb6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8012fba:	e004      	b.n	8012fc6 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012fbc:	2301      	movs	r3, #1
 8012fbe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8012fc2:	e000      	b.n	8012fc6 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8012fc4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012fc6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8012fca:	2b00      	cmp	r3, #0
 8012fcc:	d10b      	bne.n	8012fe6 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8012fce:	4b96      	ldr	r3, [pc, #600]	; (8013228 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8012fd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012fd2:	f023 0107 	bic.w	r1, r3, #7
 8012fd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012fda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012fde:	4a92      	ldr	r2, [pc, #584]	; (8013228 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8012fe0:	430b      	orrs	r3, r1
 8012fe2:	6553      	str	r3, [r2, #84]	; 0x54
 8012fe4:	e003      	b.n	8012fee <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012fe6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8012fea:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8012fee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ff6:	f002 0304 	and.w	r3, r2, #4
 8012ffa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8012ffe:	2300      	movs	r3, #0
 8013000:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8013004:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8013008:	460b      	mov	r3, r1
 801300a:	4313      	orrs	r3, r2
 801300c:	d043      	beq.n	8013096 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 801300e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013012:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8013016:	2b05      	cmp	r3, #5
 8013018:	d824      	bhi.n	8013064 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 801301a:	a201      	add	r2, pc, #4	; (adr r2, 8013020 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 801301c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013020:	0801306d 	.word	0x0801306d
 8013024:	08013039 	.word	0x08013039
 8013028:	0801304f 	.word	0x0801304f
 801302c:	0801306d 	.word	0x0801306d
 8013030:	0801306d 	.word	0x0801306d
 8013034:	0801306d 	.word	0x0801306d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8013038:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801303c:	3308      	adds	r3, #8
 801303e:	2101      	movs	r1, #1
 8013040:	4618      	mov	r0, r3
 8013042:	f000 fc5f 	bl	8013904 <RCCEx_PLL2_Config>
 8013046:	4603      	mov	r3, r0
 8013048:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 801304c:	e00f      	b.n	801306e <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801304e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013052:	3328      	adds	r3, #40	; 0x28
 8013054:	2101      	movs	r1, #1
 8013056:	4618      	mov	r0, r3
 8013058:	f000 fd06 	bl	8013a68 <RCCEx_PLL3_Config>
 801305c:	4603      	mov	r3, r0
 801305e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8013062:	e004      	b.n	801306e <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8013064:	2301      	movs	r3, #1
 8013066:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 801306a:	e000      	b.n	801306e <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 801306c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801306e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8013072:	2b00      	cmp	r3, #0
 8013074:	d10b      	bne.n	801308e <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8013076:	4b6c      	ldr	r3, [pc, #432]	; (8013228 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8013078:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801307a:	f023 0107 	bic.w	r1, r3, #7
 801307e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013082:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8013086:	4a68      	ldr	r2, [pc, #416]	; (8013228 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8013088:	430b      	orrs	r3, r1
 801308a:	6593      	str	r3, [r2, #88]	; 0x58
 801308c:	e003      	b.n	8013096 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801308e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8013092:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8013096:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801309a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801309e:	f002 0320 	and.w	r3, r2, #32
 80130a2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80130a6:	2300      	movs	r3, #0
 80130a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80130ac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80130b0:	460b      	mov	r3, r1
 80130b2:	4313      	orrs	r3, r2
 80130b4:	d055      	beq.n	8013162 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80130b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80130ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80130be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80130c2:	d033      	beq.n	801312c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80130c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80130c8:	d82c      	bhi.n	8013124 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80130ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80130ce:	d02f      	beq.n	8013130 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80130d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80130d4:	d826      	bhi.n	8013124 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80130d6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80130da:	d02b      	beq.n	8013134 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80130dc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80130e0:	d820      	bhi.n	8013124 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80130e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80130e6:	d012      	beq.n	801310e <HAL_RCCEx_PeriphCLKConfig+0xb86>
 80130e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80130ec:	d81a      	bhi.n	8013124 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80130ee:	2b00      	cmp	r3, #0
 80130f0:	d022      	beq.n	8013138 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 80130f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80130f6:	d115      	bne.n	8013124 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80130f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80130fc:	3308      	adds	r3, #8
 80130fe:	2100      	movs	r1, #0
 8013100:	4618      	mov	r0, r3
 8013102:	f000 fbff 	bl	8013904 <RCCEx_PLL2_Config>
 8013106:	4603      	mov	r3, r0
 8013108:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 801310c:	e015      	b.n	801313a <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801310e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013112:	3328      	adds	r3, #40	; 0x28
 8013114:	2102      	movs	r1, #2
 8013116:	4618      	mov	r0, r3
 8013118:	f000 fca6 	bl	8013a68 <RCCEx_PLL3_Config>
 801311c:	4603      	mov	r3, r0
 801311e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8013122:	e00a      	b.n	801313a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8013124:	2301      	movs	r3, #1
 8013126:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 801312a:	e006      	b.n	801313a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 801312c:	bf00      	nop
 801312e:	e004      	b.n	801313a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8013130:	bf00      	nop
 8013132:	e002      	b.n	801313a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8013134:	bf00      	nop
 8013136:	e000      	b.n	801313a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8013138:	bf00      	nop
    }

    if (ret == HAL_OK)
 801313a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 801313e:	2b00      	cmp	r3, #0
 8013140:	d10b      	bne.n	801315a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8013142:	4b39      	ldr	r3, [pc, #228]	; (8013228 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8013144:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013146:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 801314a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801314e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8013152:	4a35      	ldr	r2, [pc, #212]	; (8013228 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8013154:	430b      	orrs	r3, r1
 8013156:	6553      	str	r3, [r2, #84]	; 0x54
 8013158:	e003      	b.n	8013162 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801315a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 801315e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8013162:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013166:	e9d3 2300 	ldrd	r2, r3, [r3]
 801316a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 801316e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8013172:	2300      	movs	r3, #0
 8013174:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8013178:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 801317c:	460b      	mov	r3, r1
 801317e:	4313      	orrs	r3, r2
 8013180:	d058      	beq.n	8013234 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8013182:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013186:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801318a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 801318e:	d033      	beq.n	80131f8 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8013190:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8013194:	d82c      	bhi.n	80131f0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8013196:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801319a:	d02f      	beq.n	80131fc <HAL_RCCEx_PeriphCLKConfig+0xc74>
 801319c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80131a0:	d826      	bhi.n	80131f0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80131a2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80131a6:	d02b      	beq.n	8013200 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80131a8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80131ac:	d820      	bhi.n	80131f0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80131ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80131b2:	d012      	beq.n	80131da <HAL_RCCEx_PeriphCLKConfig+0xc52>
 80131b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80131b8:	d81a      	bhi.n	80131f0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80131ba:	2b00      	cmp	r3, #0
 80131bc:	d022      	beq.n	8013204 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 80131be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80131c2:	d115      	bne.n	80131f0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80131c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80131c8:	3308      	adds	r3, #8
 80131ca:	2100      	movs	r1, #0
 80131cc:	4618      	mov	r0, r3
 80131ce:	f000 fb99 	bl	8013904 <RCCEx_PLL2_Config>
 80131d2:	4603      	mov	r3, r0
 80131d4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80131d8:	e015      	b.n	8013206 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80131da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80131de:	3328      	adds	r3, #40	; 0x28
 80131e0:	2102      	movs	r1, #2
 80131e2:	4618      	mov	r0, r3
 80131e4:	f000 fc40 	bl	8013a68 <RCCEx_PLL3_Config>
 80131e8:	4603      	mov	r3, r0
 80131ea:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80131ee:	e00a      	b.n	8013206 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80131f0:	2301      	movs	r3, #1
 80131f2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80131f6:	e006      	b.n	8013206 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80131f8:	bf00      	nop
 80131fa:	e004      	b.n	8013206 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80131fc:	bf00      	nop
 80131fe:	e002      	b.n	8013206 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8013200:	bf00      	nop
 8013202:	e000      	b.n	8013206 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8013204:	bf00      	nop
    }

    if (ret == HAL_OK)
 8013206:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 801320a:	2b00      	cmp	r3, #0
 801320c:	d10e      	bne.n	801322c <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 801320e:	4b06      	ldr	r3, [pc, #24]	; (8013228 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8013210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013212:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8013216:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801321a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801321e:	4a02      	ldr	r2, [pc, #8]	; (8013228 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8013220:	430b      	orrs	r3, r1
 8013222:	6593      	str	r3, [r2, #88]	; 0x58
 8013224:	e006      	b.n	8013234 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8013226:	bf00      	nop
 8013228:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801322c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8013230:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8013234:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013238:	e9d3 2300 	ldrd	r2, r3, [r3]
 801323c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8013240:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8013244:	2300      	movs	r3, #0
 8013246:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801324a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 801324e:	460b      	mov	r3, r1
 8013250:	4313      	orrs	r3, r2
 8013252:	d055      	beq.n	8013300 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8013254:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013258:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801325c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8013260:	d033      	beq.n	80132ca <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8013262:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8013266:	d82c      	bhi.n	80132c2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8013268:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801326c:	d02f      	beq.n	80132ce <HAL_RCCEx_PeriphCLKConfig+0xd46>
 801326e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013272:	d826      	bhi.n	80132c2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8013274:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8013278:	d02b      	beq.n	80132d2 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 801327a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 801327e:	d820      	bhi.n	80132c2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8013280:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8013284:	d012      	beq.n	80132ac <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8013286:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801328a:	d81a      	bhi.n	80132c2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 801328c:	2b00      	cmp	r3, #0
 801328e:	d022      	beq.n	80132d6 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8013290:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8013294:	d115      	bne.n	80132c2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8013296:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801329a:	3308      	adds	r3, #8
 801329c:	2100      	movs	r1, #0
 801329e:	4618      	mov	r0, r3
 80132a0:	f000 fb30 	bl	8013904 <RCCEx_PLL2_Config>
 80132a4:	4603      	mov	r3, r0
 80132a6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80132aa:	e015      	b.n	80132d8 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80132ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80132b0:	3328      	adds	r3, #40	; 0x28
 80132b2:	2102      	movs	r1, #2
 80132b4:	4618      	mov	r0, r3
 80132b6:	f000 fbd7 	bl	8013a68 <RCCEx_PLL3_Config>
 80132ba:	4603      	mov	r3, r0
 80132bc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80132c0:	e00a      	b.n	80132d8 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80132c2:	2301      	movs	r3, #1
 80132c4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80132c8:	e006      	b.n	80132d8 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80132ca:	bf00      	nop
 80132cc:	e004      	b.n	80132d8 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80132ce:	bf00      	nop
 80132d0:	e002      	b.n	80132d8 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80132d2:	bf00      	nop
 80132d4:	e000      	b.n	80132d8 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80132d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80132d8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80132dc:	2b00      	cmp	r3, #0
 80132de:	d10b      	bne.n	80132f8 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80132e0:	4ba1      	ldr	r3, [pc, #644]	; (8013568 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80132e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80132e4:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80132e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80132ec:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80132f0:	4a9d      	ldr	r2, [pc, #628]	; (8013568 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80132f2:	430b      	orrs	r3, r1
 80132f4:	6593      	str	r3, [r2, #88]	; 0x58
 80132f6:	e003      	b.n	8013300 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80132f8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80132fc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8013300:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013308:	f002 0308 	and.w	r3, r2, #8
 801330c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8013310:	2300      	movs	r3, #0
 8013312:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8013316:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 801331a:	460b      	mov	r3, r1
 801331c:	4313      	orrs	r3, r2
 801331e:	d01e      	beq.n	801335e <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8013320:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013324:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013328:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801332c:	d10c      	bne.n	8013348 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 801332e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013332:	3328      	adds	r3, #40	; 0x28
 8013334:	2102      	movs	r1, #2
 8013336:	4618      	mov	r0, r3
 8013338:	f000 fb96 	bl	8013a68 <RCCEx_PLL3_Config>
 801333c:	4603      	mov	r3, r0
 801333e:	2b00      	cmp	r3, #0
 8013340:	d002      	beq.n	8013348 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8013342:	2301      	movs	r3, #1
 8013344:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8013348:	4b87      	ldr	r3, [pc, #540]	; (8013568 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 801334a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801334c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8013350:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013354:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013358:	4a83      	ldr	r2, [pc, #524]	; (8013568 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 801335a:	430b      	orrs	r3, r1
 801335c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 801335e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013366:	f002 0310 	and.w	r3, r2, #16
 801336a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801336e:	2300      	movs	r3, #0
 8013370:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8013374:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8013378:	460b      	mov	r3, r1
 801337a:	4313      	orrs	r3, r2
 801337c:	d01e      	beq.n	80133bc <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 801337e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013382:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8013386:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801338a:	d10c      	bne.n	80133a6 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 801338c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013390:	3328      	adds	r3, #40	; 0x28
 8013392:	2102      	movs	r1, #2
 8013394:	4618      	mov	r0, r3
 8013396:	f000 fb67 	bl	8013a68 <RCCEx_PLL3_Config>
 801339a:	4603      	mov	r3, r0
 801339c:	2b00      	cmp	r3, #0
 801339e:	d002      	beq.n	80133a6 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 80133a0:	2301      	movs	r3, #1
 80133a2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80133a6:	4b70      	ldr	r3, [pc, #448]	; (8013568 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80133a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80133aa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80133ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80133b2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80133b6:	4a6c      	ldr	r2, [pc, #432]	; (8013568 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80133b8:	430b      	orrs	r3, r1
 80133ba:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80133bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80133c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133c4:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80133c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80133cc:	2300      	movs	r3, #0
 80133ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80133d2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80133d6:	460b      	mov	r3, r1
 80133d8:	4313      	orrs	r3, r2
 80133da:	d03e      	beq.n	801345a <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80133dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80133e0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80133e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80133e8:	d022      	beq.n	8013430 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 80133ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80133ee:	d81b      	bhi.n	8013428 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80133f0:	2b00      	cmp	r3, #0
 80133f2:	d003      	beq.n	80133fc <HAL_RCCEx_PeriphCLKConfig+0xe74>
 80133f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80133f8:	d00b      	beq.n	8013412 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 80133fa:	e015      	b.n	8013428 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80133fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013400:	3308      	adds	r3, #8
 8013402:	2100      	movs	r1, #0
 8013404:	4618      	mov	r0, r3
 8013406:	f000 fa7d 	bl	8013904 <RCCEx_PLL2_Config>
 801340a:	4603      	mov	r3, r0
 801340c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8013410:	e00f      	b.n	8013432 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8013412:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013416:	3328      	adds	r3, #40	; 0x28
 8013418:	2102      	movs	r1, #2
 801341a:	4618      	mov	r0, r3
 801341c:	f000 fb24 	bl	8013a68 <RCCEx_PLL3_Config>
 8013420:	4603      	mov	r3, r0
 8013422:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8013426:	e004      	b.n	8013432 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8013428:	2301      	movs	r3, #1
 801342a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 801342e:	e000      	b.n	8013432 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8013430:	bf00      	nop
    }

    if (ret == HAL_OK)
 8013432:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8013436:	2b00      	cmp	r3, #0
 8013438:	d10b      	bne.n	8013452 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 801343a:	4b4b      	ldr	r3, [pc, #300]	; (8013568 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 801343c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801343e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8013442:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013446:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801344a:	4a47      	ldr	r2, [pc, #284]	; (8013568 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 801344c:	430b      	orrs	r3, r1
 801344e:	6593      	str	r3, [r2, #88]	; 0x58
 8013450:	e003      	b.n	801345a <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013452:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8013456:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 801345a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801345e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013462:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8013466:	67bb      	str	r3, [r7, #120]	; 0x78
 8013468:	2300      	movs	r3, #0
 801346a:	67fb      	str	r3, [r7, #124]	; 0x7c
 801346c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8013470:	460b      	mov	r3, r1
 8013472:	4313      	orrs	r3, r2
 8013474:	d03b      	beq.n	80134ee <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8013476:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801347a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801347e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8013482:	d01f      	beq.n	80134c4 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8013484:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8013488:	d818      	bhi.n	80134bc <HAL_RCCEx_PeriphCLKConfig+0xf34>
 801348a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801348e:	d003      	beq.n	8013498 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8013490:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8013494:	d007      	beq.n	80134a6 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8013496:	e011      	b.n	80134bc <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8013498:	4b33      	ldr	r3, [pc, #204]	; (8013568 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 801349a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801349c:	4a32      	ldr	r2, [pc, #200]	; (8013568 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 801349e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80134a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80134a4:	e00f      	b.n	80134c6 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80134a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80134aa:	3328      	adds	r3, #40	; 0x28
 80134ac:	2101      	movs	r1, #1
 80134ae:	4618      	mov	r0, r3
 80134b0:	f000 fada 	bl	8013a68 <RCCEx_PLL3_Config>
 80134b4:	4603      	mov	r3, r0
 80134b6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 80134ba:	e004      	b.n	80134c6 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80134bc:	2301      	movs	r3, #1
 80134be:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80134c2:	e000      	b.n	80134c6 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 80134c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80134c6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80134ca:	2b00      	cmp	r3, #0
 80134cc:	d10b      	bne.n	80134e6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80134ce:	4b26      	ldr	r3, [pc, #152]	; (8013568 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80134d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80134d2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80134d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80134da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80134de:	4a22      	ldr	r2, [pc, #136]	; (8013568 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80134e0:	430b      	orrs	r3, r1
 80134e2:	6553      	str	r3, [r2, #84]	; 0x54
 80134e4:	e003      	b.n	80134ee <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80134e6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80134ea:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80134ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80134f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134f6:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80134fa:	673b      	str	r3, [r7, #112]	; 0x70
 80134fc:	2300      	movs	r3, #0
 80134fe:	677b      	str	r3, [r7, #116]	; 0x74
 8013500:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8013504:	460b      	mov	r3, r1
 8013506:	4313      	orrs	r3, r2
 8013508:	d034      	beq.n	8013574 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 801350a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801350e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013510:	2b00      	cmp	r3, #0
 8013512:	d003      	beq.n	801351c <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8013514:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013518:	d007      	beq.n	801352a <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 801351a:	e011      	b.n	8013540 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801351c:	4b12      	ldr	r3, [pc, #72]	; (8013568 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 801351e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013520:	4a11      	ldr	r2, [pc, #68]	; (8013568 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8013522:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8013526:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8013528:	e00e      	b.n	8013548 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801352a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801352e:	3308      	adds	r3, #8
 8013530:	2102      	movs	r1, #2
 8013532:	4618      	mov	r0, r3
 8013534:	f000 f9e6 	bl	8013904 <RCCEx_PLL2_Config>
 8013538:	4603      	mov	r3, r0
 801353a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 801353e:	e003      	b.n	8013548 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8013540:	2301      	movs	r3, #1
 8013542:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8013546:	bf00      	nop
    }

    if (ret == HAL_OK)
 8013548:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 801354c:	2b00      	cmp	r3, #0
 801354e:	d10d      	bne.n	801356c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8013550:	4b05      	ldr	r3, [pc, #20]	; (8013568 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8013552:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013554:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8013558:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801355c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801355e:	4a02      	ldr	r2, [pc, #8]	; (8013568 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8013560:	430b      	orrs	r3, r1
 8013562:	64d3      	str	r3, [r2, #76]	; 0x4c
 8013564:	e006      	b.n	8013574 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8013566:	bf00      	nop
 8013568:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801356c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8013570:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8013574:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013578:	e9d3 2300 	ldrd	r2, r3, [r3]
 801357c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8013580:	66bb      	str	r3, [r7, #104]	; 0x68
 8013582:	2300      	movs	r3, #0
 8013584:	66fb      	str	r3, [r7, #108]	; 0x6c
 8013586:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 801358a:	460b      	mov	r3, r1
 801358c:	4313      	orrs	r3, r2
 801358e:	d00c      	beq.n	80135aa <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8013590:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013594:	3328      	adds	r3, #40	; 0x28
 8013596:	2102      	movs	r1, #2
 8013598:	4618      	mov	r0, r3
 801359a:	f000 fa65 	bl	8013a68 <RCCEx_PLL3_Config>
 801359e:	4603      	mov	r3, r0
 80135a0:	2b00      	cmp	r3, #0
 80135a2:	d002      	beq.n	80135aa <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 80135a4:	2301      	movs	r3, #1
 80135a6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80135aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80135ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135b2:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80135b6:	663b      	str	r3, [r7, #96]	; 0x60
 80135b8:	2300      	movs	r3, #0
 80135ba:	667b      	str	r3, [r7, #100]	; 0x64
 80135bc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80135c0:	460b      	mov	r3, r1
 80135c2:	4313      	orrs	r3, r2
 80135c4:	d038      	beq.n	8013638 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 80135c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80135ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80135ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80135d2:	d018      	beq.n	8013606 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 80135d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80135d8:	d811      	bhi.n	80135fe <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80135da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80135de:	d014      	beq.n	801360a <HAL_RCCEx_PeriphCLKConfig+0x1082>
 80135e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80135e4:	d80b      	bhi.n	80135fe <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80135e6:	2b00      	cmp	r3, #0
 80135e8:	d011      	beq.n	801360e <HAL_RCCEx_PeriphCLKConfig+0x1086>
 80135ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80135ee:	d106      	bne.n	80135fe <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80135f0:	4bc3      	ldr	r3, [pc, #780]	; (8013900 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80135f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80135f4:	4ac2      	ldr	r2, [pc, #776]	; (8013900 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80135f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80135fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80135fc:	e008      	b.n	8013610 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80135fe:	2301      	movs	r3, #1
 8013600:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8013604:	e004      	b.n	8013610 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8013606:	bf00      	nop
 8013608:	e002      	b.n	8013610 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 801360a:	bf00      	nop
 801360c:	e000      	b.n	8013610 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 801360e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8013610:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8013614:	2b00      	cmp	r3, #0
 8013616:	d10b      	bne.n	8013630 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8013618:	4bb9      	ldr	r3, [pc, #740]	; (8013900 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 801361a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801361c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8013620:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013624:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013628:	4ab5      	ldr	r2, [pc, #724]	; (8013900 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 801362a:	430b      	orrs	r3, r1
 801362c:	6553      	str	r3, [r2, #84]	; 0x54
 801362e:	e003      	b.n	8013638 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013630:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8013634:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8013638:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801363c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013640:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8013644:	65bb      	str	r3, [r7, #88]	; 0x58
 8013646:	2300      	movs	r3, #0
 8013648:	65fb      	str	r3, [r7, #92]	; 0x5c
 801364a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 801364e:	460b      	mov	r3, r1
 8013650:	4313      	orrs	r3, r2
 8013652:	d009      	beq.n	8013668 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8013654:	4baa      	ldr	r3, [pc, #680]	; (8013900 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8013656:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013658:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801365c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013660:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013662:	4aa7      	ldr	r2, [pc, #668]	; (8013900 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8013664:	430b      	orrs	r3, r1
 8013666:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8013668:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801366c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013670:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8013674:	653b      	str	r3, [r7, #80]	; 0x50
 8013676:	2300      	movs	r3, #0
 8013678:	657b      	str	r3, [r7, #84]	; 0x54
 801367a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 801367e:	460b      	mov	r3, r1
 8013680:	4313      	orrs	r3, r2
 8013682:	d009      	beq.n	8013698 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8013684:	4b9e      	ldr	r3, [pc, #632]	; (8013900 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8013686:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013688:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 801368c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013692:	4a9b      	ldr	r2, [pc, #620]	; (8013900 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8013694:	430b      	orrs	r3, r1
 8013696:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8013698:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801369c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136a0:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80136a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80136a6:	2300      	movs	r3, #0
 80136a8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80136aa:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80136ae:	460b      	mov	r3, r1
 80136b0:	4313      	orrs	r3, r2
 80136b2:	d009      	beq.n	80136c8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80136b4:	4b92      	ldr	r3, [pc, #584]	; (8013900 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80136b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80136b8:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 80136bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80136c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80136c2:	4a8f      	ldr	r2, [pc, #572]	; (8013900 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80136c4:	430b      	orrs	r3, r1
 80136c6:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80136c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80136cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136d0:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80136d4:	643b      	str	r3, [r7, #64]	; 0x40
 80136d6:	2300      	movs	r3, #0
 80136d8:	647b      	str	r3, [r7, #68]	; 0x44
 80136da:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80136de:	460b      	mov	r3, r1
 80136e0:	4313      	orrs	r3, r2
 80136e2:	d00e      	beq.n	8013702 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80136e4:	4b86      	ldr	r3, [pc, #536]	; (8013900 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80136e6:	691b      	ldr	r3, [r3, #16]
 80136e8:	4a85      	ldr	r2, [pc, #532]	; (8013900 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80136ea:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80136ee:	6113      	str	r3, [r2, #16]
 80136f0:	4b83      	ldr	r3, [pc, #524]	; (8013900 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80136f2:	6919      	ldr	r1, [r3, #16]
 80136f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80136f8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80136fc:	4a80      	ldr	r2, [pc, #512]	; (8013900 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80136fe:	430b      	orrs	r3, r1
 8013700:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8013702:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013706:	e9d3 2300 	ldrd	r2, r3, [r3]
 801370a:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 801370e:	63bb      	str	r3, [r7, #56]	; 0x38
 8013710:	2300      	movs	r3, #0
 8013712:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013714:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8013718:	460b      	mov	r3, r1
 801371a:	4313      	orrs	r3, r2
 801371c:	d009      	beq.n	8013732 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 801371e:	4b78      	ldr	r3, [pc, #480]	; (8013900 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8013720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013722:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8013726:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801372a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801372c:	4a74      	ldr	r2, [pc, #464]	; (8013900 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 801372e:	430b      	orrs	r3, r1
 8013730:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8013732:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013736:	e9d3 2300 	ldrd	r2, r3, [r3]
 801373a:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 801373e:	633b      	str	r3, [r7, #48]	; 0x30
 8013740:	2300      	movs	r3, #0
 8013742:	637b      	str	r3, [r7, #52]	; 0x34
 8013744:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8013748:	460b      	mov	r3, r1
 801374a:	4313      	orrs	r3, r2
 801374c:	d00a      	beq.n	8013764 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 801374e:	4b6c      	ldr	r3, [pc, #432]	; (8013900 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8013750:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013752:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8013756:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801375a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801375e:	4a68      	ldr	r2, [pc, #416]	; (8013900 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8013760:	430b      	orrs	r3, r1
 8013762:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8013764:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013768:	e9d3 2300 	ldrd	r2, r3, [r3]
 801376c:	2100      	movs	r1, #0
 801376e:	62b9      	str	r1, [r7, #40]	; 0x28
 8013770:	f003 0301 	and.w	r3, r3, #1
 8013774:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013776:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 801377a:	460b      	mov	r3, r1
 801377c:	4313      	orrs	r3, r2
 801377e:	d011      	beq.n	80137a4 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8013780:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013784:	3308      	adds	r3, #8
 8013786:	2100      	movs	r1, #0
 8013788:	4618      	mov	r0, r3
 801378a:	f000 f8bb 	bl	8013904 <RCCEx_PLL2_Config>
 801378e:	4603      	mov	r3, r0
 8013790:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8013794:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8013798:	2b00      	cmp	r3, #0
 801379a:	d003      	beq.n	80137a4 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801379c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80137a0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80137a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80137a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137ac:	2100      	movs	r1, #0
 80137ae:	6239      	str	r1, [r7, #32]
 80137b0:	f003 0302 	and.w	r3, r3, #2
 80137b4:	627b      	str	r3, [r7, #36]	; 0x24
 80137b6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80137ba:	460b      	mov	r3, r1
 80137bc:	4313      	orrs	r3, r2
 80137be:	d011      	beq.n	80137e4 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80137c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80137c4:	3308      	adds	r3, #8
 80137c6:	2101      	movs	r1, #1
 80137c8:	4618      	mov	r0, r3
 80137ca:	f000 f89b 	bl	8013904 <RCCEx_PLL2_Config>
 80137ce:	4603      	mov	r3, r0
 80137d0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80137d4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80137d8:	2b00      	cmp	r3, #0
 80137da:	d003      	beq.n	80137e4 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80137dc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80137e0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80137e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80137e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137ec:	2100      	movs	r1, #0
 80137ee:	61b9      	str	r1, [r7, #24]
 80137f0:	f003 0304 	and.w	r3, r3, #4
 80137f4:	61fb      	str	r3, [r7, #28]
 80137f6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80137fa:	460b      	mov	r3, r1
 80137fc:	4313      	orrs	r3, r2
 80137fe:	d011      	beq.n	8013824 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8013800:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013804:	3308      	adds	r3, #8
 8013806:	2102      	movs	r1, #2
 8013808:	4618      	mov	r0, r3
 801380a:	f000 f87b 	bl	8013904 <RCCEx_PLL2_Config>
 801380e:	4603      	mov	r3, r0
 8013810:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8013814:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8013818:	2b00      	cmp	r3, #0
 801381a:	d003      	beq.n	8013824 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801381c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8013820:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8013824:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013828:	e9d3 2300 	ldrd	r2, r3, [r3]
 801382c:	2100      	movs	r1, #0
 801382e:	6139      	str	r1, [r7, #16]
 8013830:	f003 0308 	and.w	r3, r3, #8
 8013834:	617b      	str	r3, [r7, #20]
 8013836:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 801383a:	460b      	mov	r3, r1
 801383c:	4313      	orrs	r3, r2
 801383e:	d011      	beq.n	8013864 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8013840:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013844:	3328      	adds	r3, #40	; 0x28
 8013846:	2100      	movs	r1, #0
 8013848:	4618      	mov	r0, r3
 801384a:	f000 f90d 	bl	8013a68 <RCCEx_PLL3_Config>
 801384e:	4603      	mov	r3, r0
 8013850:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 8013854:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8013858:	2b00      	cmp	r3, #0
 801385a:	d003      	beq.n	8013864 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801385c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8013860:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8013864:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013868:	e9d3 2300 	ldrd	r2, r3, [r3]
 801386c:	2100      	movs	r1, #0
 801386e:	60b9      	str	r1, [r7, #8]
 8013870:	f003 0310 	and.w	r3, r3, #16
 8013874:	60fb      	str	r3, [r7, #12]
 8013876:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 801387a:	460b      	mov	r3, r1
 801387c:	4313      	orrs	r3, r2
 801387e:	d011      	beq.n	80138a4 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8013880:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013884:	3328      	adds	r3, #40	; 0x28
 8013886:	2101      	movs	r1, #1
 8013888:	4618      	mov	r0, r3
 801388a:	f000 f8ed 	bl	8013a68 <RCCEx_PLL3_Config>
 801388e:	4603      	mov	r3, r0
 8013890:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8013894:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8013898:	2b00      	cmp	r3, #0
 801389a:	d003      	beq.n	80138a4 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801389c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80138a0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80138a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80138a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138ac:	2100      	movs	r1, #0
 80138ae:	6039      	str	r1, [r7, #0]
 80138b0:	f003 0320 	and.w	r3, r3, #32
 80138b4:	607b      	str	r3, [r7, #4]
 80138b6:	e9d7 1200 	ldrd	r1, r2, [r7]
 80138ba:	460b      	mov	r3, r1
 80138bc:	4313      	orrs	r3, r2
 80138be:	d011      	beq.n	80138e4 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80138c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80138c4:	3328      	adds	r3, #40	; 0x28
 80138c6:	2102      	movs	r1, #2
 80138c8:	4618      	mov	r0, r3
 80138ca:	f000 f8cd 	bl	8013a68 <RCCEx_PLL3_Config>
 80138ce:	4603      	mov	r3, r0
 80138d0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80138d4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80138d8:	2b00      	cmp	r3, #0
 80138da:	d003      	beq.n	80138e4 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80138dc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80138e0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 80138e4:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80138e8:	2b00      	cmp	r3, #0
 80138ea:	d101      	bne.n	80138f0 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 80138ec:	2300      	movs	r3, #0
 80138ee:	e000      	b.n	80138f2 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 80138f0:	2301      	movs	r3, #1
}
 80138f2:	4618      	mov	r0, r3
 80138f4:	f507 7790 	add.w	r7, r7, #288	; 0x120
 80138f8:	46bd      	mov	sp, r7
 80138fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80138fe:	bf00      	nop
 8013900:	58024400 	.word	0x58024400

08013904 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8013904:	b580      	push	{r7, lr}
 8013906:	b084      	sub	sp, #16
 8013908:	af00      	add	r7, sp, #0
 801390a:	6078      	str	r0, [r7, #4]
 801390c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801390e:	2300      	movs	r3, #0
 8013910:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8013912:	4b53      	ldr	r3, [pc, #332]	; (8013a60 <RCCEx_PLL2_Config+0x15c>)
 8013914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013916:	f003 0303 	and.w	r3, r3, #3
 801391a:	2b03      	cmp	r3, #3
 801391c:	d101      	bne.n	8013922 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 801391e:	2301      	movs	r3, #1
 8013920:	e099      	b.n	8013a56 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8013922:	4b4f      	ldr	r3, [pc, #316]	; (8013a60 <RCCEx_PLL2_Config+0x15c>)
 8013924:	681b      	ldr	r3, [r3, #0]
 8013926:	4a4e      	ldr	r2, [pc, #312]	; (8013a60 <RCCEx_PLL2_Config+0x15c>)
 8013928:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801392c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801392e:	f7f8 f917 	bl	800bb60 <HAL_GetTick>
 8013932:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8013934:	e008      	b.n	8013948 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8013936:	f7f8 f913 	bl	800bb60 <HAL_GetTick>
 801393a:	4602      	mov	r2, r0
 801393c:	68bb      	ldr	r3, [r7, #8]
 801393e:	1ad3      	subs	r3, r2, r3
 8013940:	2b02      	cmp	r3, #2
 8013942:	d901      	bls.n	8013948 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8013944:	2303      	movs	r3, #3
 8013946:	e086      	b.n	8013a56 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8013948:	4b45      	ldr	r3, [pc, #276]	; (8013a60 <RCCEx_PLL2_Config+0x15c>)
 801394a:	681b      	ldr	r3, [r3, #0]
 801394c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8013950:	2b00      	cmp	r3, #0
 8013952:	d1f0      	bne.n	8013936 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8013954:	4b42      	ldr	r3, [pc, #264]	; (8013a60 <RCCEx_PLL2_Config+0x15c>)
 8013956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013958:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 801395c:	687b      	ldr	r3, [r7, #4]
 801395e:	681b      	ldr	r3, [r3, #0]
 8013960:	031b      	lsls	r3, r3, #12
 8013962:	493f      	ldr	r1, [pc, #252]	; (8013a60 <RCCEx_PLL2_Config+0x15c>)
 8013964:	4313      	orrs	r3, r2
 8013966:	628b      	str	r3, [r1, #40]	; 0x28
 8013968:	687b      	ldr	r3, [r7, #4]
 801396a:	685b      	ldr	r3, [r3, #4]
 801396c:	3b01      	subs	r3, #1
 801396e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8013972:	687b      	ldr	r3, [r7, #4]
 8013974:	689b      	ldr	r3, [r3, #8]
 8013976:	3b01      	subs	r3, #1
 8013978:	025b      	lsls	r3, r3, #9
 801397a:	b29b      	uxth	r3, r3
 801397c:	431a      	orrs	r2, r3
 801397e:	687b      	ldr	r3, [r7, #4]
 8013980:	68db      	ldr	r3, [r3, #12]
 8013982:	3b01      	subs	r3, #1
 8013984:	041b      	lsls	r3, r3, #16
 8013986:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 801398a:	431a      	orrs	r2, r3
 801398c:	687b      	ldr	r3, [r7, #4]
 801398e:	691b      	ldr	r3, [r3, #16]
 8013990:	3b01      	subs	r3, #1
 8013992:	061b      	lsls	r3, r3, #24
 8013994:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8013998:	4931      	ldr	r1, [pc, #196]	; (8013a60 <RCCEx_PLL2_Config+0x15c>)
 801399a:	4313      	orrs	r3, r2
 801399c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 801399e:	4b30      	ldr	r3, [pc, #192]	; (8013a60 <RCCEx_PLL2_Config+0x15c>)
 80139a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80139a2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80139a6:	687b      	ldr	r3, [r7, #4]
 80139a8:	695b      	ldr	r3, [r3, #20]
 80139aa:	492d      	ldr	r1, [pc, #180]	; (8013a60 <RCCEx_PLL2_Config+0x15c>)
 80139ac:	4313      	orrs	r3, r2
 80139ae:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80139b0:	4b2b      	ldr	r3, [pc, #172]	; (8013a60 <RCCEx_PLL2_Config+0x15c>)
 80139b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80139b4:	f023 0220 	bic.w	r2, r3, #32
 80139b8:	687b      	ldr	r3, [r7, #4]
 80139ba:	699b      	ldr	r3, [r3, #24]
 80139bc:	4928      	ldr	r1, [pc, #160]	; (8013a60 <RCCEx_PLL2_Config+0x15c>)
 80139be:	4313      	orrs	r3, r2
 80139c0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80139c2:	4b27      	ldr	r3, [pc, #156]	; (8013a60 <RCCEx_PLL2_Config+0x15c>)
 80139c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80139c6:	4a26      	ldr	r2, [pc, #152]	; (8013a60 <RCCEx_PLL2_Config+0x15c>)
 80139c8:	f023 0310 	bic.w	r3, r3, #16
 80139cc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80139ce:	4b24      	ldr	r3, [pc, #144]	; (8013a60 <RCCEx_PLL2_Config+0x15c>)
 80139d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80139d2:	4b24      	ldr	r3, [pc, #144]	; (8013a64 <RCCEx_PLL2_Config+0x160>)
 80139d4:	4013      	ands	r3, r2
 80139d6:	687a      	ldr	r2, [r7, #4]
 80139d8:	69d2      	ldr	r2, [r2, #28]
 80139da:	00d2      	lsls	r2, r2, #3
 80139dc:	4920      	ldr	r1, [pc, #128]	; (8013a60 <RCCEx_PLL2_Config+0x15c>)
 80139de:	4313      	orrs	r3, r2
 80139e0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80139e2:	4b1f      	ldr	r3, [pc, #124]	; (8013a60 <RCCEx_PLL2_Config+0x15c>)
 80139e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80139e6:	4a1e      	ldr	r2, [pc, #120]	; (8013a60 <RCCEx_PLL2_Config+0x15c>)
 80139e8:	f043 0310 	orr.w	r3, r3, #16
 80139ec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80139ee:	683b      	ldr	r3, [r7, #0]
 80139f0:	2b00      	cmp	r3, #0
 80139f2:	d106      	bne.n	8013a02 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80139f4:	4b1a      	ldr	r3, [pc, #104]	; (8013a60 <RCCEx_PLL2_Config+0x15c>)
 80139f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80139f8:	4a19      	ldr	r2, [pc, #100]	; (8013a60 <RCCEx_PLL2_Config+0x15c>)
 80139fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80139fe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8013a00:	e00f      	b.n	8013a22 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8013a02:	683b      	ldr	r3, [r7, #0]
 8013a04:	2b01      	cmp	r3, #1
 8013a06:	d106      	bne.n	8013a16 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8013a08:	4b15      	ldr	r3, [pc, #84]	; (8013a60 <RCCEx_PLL2_Config+0x15c>)
 8013a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a0c:	4a14      	ldr	r2, [pc, #80]	; (8013a60 <RCCEx_PLL2_Config+0x15c>)
 8013a0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013a12:	62d3      	str	r3, [r2, #44]	; 0x2c
 8013a14:	e005      	b.n	8013a22 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8013a16:	4b12      	ldr	r3, [pc, #72]	; (8013a60 <RCCEx_PLL2_Config+0x15c>)
 8013a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a1a:	4a11      	ldr	r2, [pc, #68]	; (8013a60 <RCCEx_PLL2_Config+0x15c>)
 8013a1c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8013a20:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8013a22:	4b0f      	ldr	r3, [pc, #60]	; (8013a60 <RCCEx_PLL2_Config+0x15c>)
 8013a24:	681b      	ldr	r3, [r3, #0]
 8013a26:	4a0e      	ldr	r2, [pc, #56]	; (8013a60 <RCCEx_PLL2_Config+0x15c>)
 8013a28:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8013a2c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8013a2e:	f7f8 f897 	bl	800bb60 <HAL_GetTick>
 8013a32:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8013a34:	e008      	b.n	8013a48 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8013a36:	f7f8 f893 	bl	800bb60 <HAL_GetTick>
 8013a3a:	4602      	mov	r2, r0
 8013a3c:	68bb      	ldr	r3, [r7, #8]
 8013a3e:	1ad3      	subs	r3, r2, r3
 8013a40:	2b02      	cmp	r3, #2
 8013a42:	d901      	bls.n	8013a48 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8013a44:	2303      	movs	r3, #3
 8013a46:	e006      	b.n	8013a56 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8013a48:	4b05      	ldr	r3, [pc, #20]	; (8013a60 <RCCEx_PLL2_Config+0x15c>)
 8013a4a:	681b      	ldr	r3, [r3, #0]
 8013a4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8013a50:	2b00      	cmp	r3, #0
 8013a52:	d0f0      	beq.n	8013a36 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8013a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8013a56:	4618      	mov	r0, r3
 8013a58:	3710      	adds	r7, #16
 8013a5a:	46bd      	mov	sp, r7
 8013a5c:	bd80      	pop	{r7, pc}
 8013a5e:	bf00      	nop
 8013a60:	58024400 	.word	0x58024400
 8013a64:	ffff0007 	.word	0xffff0007

08013a68 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8013a68:	b580      	push	{r7, lr}
 8013a6a:	b084      	sub	sp, #16
 8013a6c:	af00      	add	r7, sp, #0
 8013a6e:	6078      	str	r0, [r7, #4]
 8013a70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8013a72:	2300      	movs	r3, #0
 8013a74:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8013a76:	4b53      	ldr	r3, [pc, #332]	; (8013bc4 <RCCEx_PLL3_Config+0x15c>)
 8013a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013a7a:	f003 0303 	and.w	r3, r3, #3
 8013a7e:	2b03      	cmp	r3, #3
 8013a80:	d101      	bne.n	8013a86 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8013a82:	2301      	movs	r3, #1
 8013a84:	e099      	b.n	8013bba <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8013a86:	4b4f      	ldr	r3, [pc, #316]	; (8013bc4 <RCCEx_PLL3_Config+0x15c>)
 8013a88:	681b      	ldr	r3, [r3, #0]
 8013a8a:	4a4e      	ldr	r2, [pc, #312]	; (8013bc4 <RCCEx_PLL3_Config+0x15c>)
 8013a8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8013a90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8013a92:	f7f8 f865 	bl	800bb60 <HAL_GetTick>
 8013a96:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8013a98:	e008      	b.n	8013aac <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8013a9a:	f7f8 f861 	bl	800bb60 <HAL_GetTick>
 8013a9e:	4602      	mov	r2, r0
 8013aa0:	68bb      	ldr	r3, [r7, #8]
 8013aa2:	1ad3      	subs	r3, r2, r3
 8013aa4:	2b02      	cmp	r3, #2
 8013aa6:	d901      	bls.n	8013aac <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8013aa8:	2303      	movs	r3, #3
 8013aaa:	e086      	b.n	8013bba <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8013aac:	4b45      	ldr	r3, [pc, #276]	; (8013bc4 <RCCEx_PLL3_Config+0x15c>)
 8013aae:	681b      	ldr	r3, [r3, #0]
 8013ab0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8013ab4:	2b00      	cmp	r3, #0
 8013ab6:	d1f0      	bne.n	8013a9a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8013ab8:	4b42      	ldr	r3, [pc, #264]	; (8013bc4 <RCCEx_PLL3_Config+0x15c>)
 8013aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013abc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8013ac0:	687b      	ldr	r3, [r7, #4]
 8013ac2:	681b      	ldr	r3, [r3, #0]
 8013ac4:	051b      	lsls	r3, r3, #20
 8013ac6:	493f      	ldr	r1, [pc, #252]	; (8013bc4 <RCCEx_PLL3_Config+0x15c>)
 8013ac8:	4313      	orrs	r3, r2
 8013aca:	628b      	str	r3, [r1, #40]	; 0x28
 8013acc:	687b      	ldr	r3, [r7, #4]
 8013ace:	685b      	ldr	r3, [r3, #4]
 8013ad0:	3b01      	subs	r3, #1
 8013ad2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8013ad6:	687b      	ldr	r3, [r7, #4]
 8013ad8:	689b      	ldr	r3, [r3, #8]
 8013ada:	3b01      	subs	r3, #1
 8013adc:	025b      	lsls	r3, r3, #9
 8013ade:	b29b      	uxth	r3, r3
 8013ae0:	431a      	orrs	r2, r3
 8013ae2:	687b      	ldr	r3, [r7, #4]
 8013ae4:	68db      	ldr	r3, [r3, #12]
 8013ae6:	3b01      	subs	r3, #1
 8013ae8:	041b      	lsls	r3, r3, #16
 8013aea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8013aee:	431a      	orrs	r2, r3
 8013af0:	687b      	ldr	r3, [r7, #4]
 8013af2:	691b      	ldr	r3, [r3, #16]
 8013af4:	3b01      	subs	r3, #1
 8013af6:	061b      	lsls	r3, r3, #24
 8013af8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8013afc:	4931      	ldr	r1, [pc, #196]	; (8013bc4 <RCCEx_PLL3_Config+0x15c>)
 8013afe:	4313      	orrs	r3, r2
 8013b00:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8013b02:	4b30      	ldr	r3, [pc, #192]	; (8013bc4 <RCCEx_PLL3_Config+0x15c>)
 8013b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b06:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8013b0a:	687b      	ldr	r3, [r7, #4]
 8013b0c:	695b      	ldr	r3, [r3, #20]
 8013b0e:	492d      	ldr	r1, [pc, #180]	; (8013bc4 <RCCEx_PLL3_Config+0x15c>)
 8013b10:	4313      	orrs	r3, r2
 8013b12:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8013b14:	4b2b      	ldr	r3, [pc, #172]	; (8013bc4 <RCCEx_PLL3_Config+0x15c>)
 8013b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b18:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8013b1c:	687b      	ldr	r3, [r7, #4]
 8013b1e:	699b      	ldr	r3, [r3, #24]
 8013b20:	4928      	ldr	r1, [pc, #160]	; (8013bc4 <RCCEx_PLL3_Config+0x15c>)
 8013b22:	4313      	orrs	r3, r2
 8013b24:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8013b26:	4b27      	ldr	r3, [pc, #156]	; (8013bc4 <RCCEx_PLL3_Config+0x15c>)
 8013b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b2a:	4a26      	ldr	r2, [pc, #152]	; (8013bc4 <RCCEx_PLL3_Config+0x15c>)
 8013b2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013b30:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8013b32:	4b24      	ldr	r3, [pc, #144]	; (8013bc4 <RCCEx_PLL3_Config+0x15c>)
 8013b34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013b36:	4b24      	ldr	r3, [pc, #144]	; (8013bc8 <RCCEx_PLL3_Config+0x160>)
 8013b38:	4013      	ands	r3, r2
 8013b3a:	687a      	ldr	r2, [r7, #4]
 8013b3c:	69d2      	ldr	r2, [r2, #28]
 8013b3e:	00d2      	lsls	r2, r2, #3
 8013b40:	4920      	ldr	r1, [pc, #128]	; (8013bc4 <RCCEx_PLL3_Config+0x15c>)
 8013b42:	4313      	orrs	r3, r2
 8013b44:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8013b46:	4b1f      	ldr	r3, [pc, #124]	; (8013bc4 <RCCEx_PLL3_Config+0x15c>)
 8013b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b4a:	4a1e      	ldr	r2, [pc, #120]	; (8013bc4 <RCCEx_PLL3_Config+0x15c>)
 8013b4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013b50:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8013b52:	683b      	ldr	r3, [r7, #0]
 8013b54:	2b00      	cmp	r3, #0
 8013b56:	d106      	bne.n	8013b66 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8013b58:	4b1a      	ldr	r3, [pc, #104]	; (8013bc4 <RCCEx_PLL3_Config+0x15c>)
 8013b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b5c:	4a19      	ldr	r2, [pc, #100]	; (8013bc4 <RCCEx_PLL3_Config+0x15c>)
 8013b5e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8013b62:	62d3      	str	r3, [r2, #44]	; 0x2c
 8013b64:	e00f      	b.n	8013b86 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8013b66:	683b      	ldr	r3, [r7, #0]
 8013b68:	2b01      	cmp	r3, #1
 8013b6a:	d106      	bne.n	8013b7a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8013b6c:	4b15      	ldr	r3, [pc, #84]	; (8013bc4 <RCCEx_PLL3_Config+0x15c>)
 8013b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b70:	4a14      	ldr	r2, [pc, #80]	; (8013bc4 <RCCEx_PLL3_Config+0x15c>)
 8013b72:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8013b76:	62d3      	str	r3, [r2, #44]	; 0x2c
 8013b78:	e005      	b.n	8013b86 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8013b7a:	4b12      	ldr	r3, [pc, #72]	; (8013bc4 <RCCEx_PLL3_Config+0x15c>)
 8013b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b7e:	4a11      	ldr	r2, [pc, #68]	; (8013bc4 <RCCEx_PLL3_Config+0x15c>)
 8013b80:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8013b84:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8013b86:	4b0f      	ldr	r3, [pc, #60]	; (8013bc4 <RCCEx_PLL3_Config+0x15c>)
 8013b88:	681b      	ldr	r3, [r3, #0]
 8013b8a:	4a0e      	ldr	r2, [pc, #56]	; (8013bc4 <RCCEx_PLL3_Config+0x15c>)
 8013b8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013b90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8013b92:	f7f7 ffe5 	bl	800bb60 <HAL_GetTick>
 8013b96:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8013b98:	e008      	b.n	8013bac <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8013b9a:	f7f7 ffe1 	bl	800bb60 <HAL_GetTick>
 8013b9e:	4602      	mov	r2, r0
 8013ba0:	68bb      	ldr	r3, [r7, #8]
 8013ba2:	1ad3      	subs	r3, r2, r3
 8013ba4:	2b02      	cmp	r3, #2
 8013ba6:	d901      	bls.n	8013bac <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8013ba8:	2303      	movs	r3, #3
 8013baa:	e006      	b.n	8013bba <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8013bac:	4b05      	ldr	r3, [pc, #20]	; (8013bc4 <RCCEx_PLL3_Config+0x15c>)
 8013bae:	681b      	ldr	r3, [r3, #0]
 8013bb0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8013bb4:	2b00      	cmp	r3, #0
 8013bb6:	d0f0      	beq.n	8013b9a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8013bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8013bba:	4618      	mov	r0, r3
 8013bbc:	3710      	adds	r7, #16
 8013bbe:	46bd      	mov	sp, r7
 8013bc0:	bd80      	pop	{r7, pc}
 8013bc2:	bf00      	nop
 8013bc4:	58024400 	.word	0x58024400
 8013bc8:	ffff0007 	.word	0xffff0007

08013bcc <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8013bcc:	b580      	push	{r7, lr}
 8013bce:	b082      	sub	sp, #8
 8013bd0:	af00      	add	r7, sp, #0
 8013bd2:	6078      	str	r0, [r7, #4]
 8013bd4:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8013bd6:	687b      	ldr	r3, [r7, #4]
 8013bd8:	2b00      	cmp	r3, #0
 8013bda:	d101      	bne.n	8013be0 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8013bdc:	2301      	movs	r3, #1
 8013bde:	e02b      	b.n	8013c38 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8013be0:	687b      	ldr	r3, [r7, #4]
 8013be2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013be6:	b2db      	uxtb	r3, r3
 8013be8:	2b00      	cmp	r3, #0
 8013bea:	d106      	bne.n	8013bfa <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8013bec:	687b      	ldr	r3, [r7, #4]
 8013bee:	2200      	movs	r2, #0
 8013bf0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8013bf4:	6878      	ldr	r0, [r7, #4]
 8013bf6:	f7f3 fa0d 	bl	8007014 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8013bfa:	687b      	ldr	r3, [r7, #4]
 8013bfc:	2202      	movs	r2, #2
 8013bfe:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8013c02:	687b      	ldr	r3, [r7, #4]
 8013c04:	681a      	ldr	r2, [r3, #0]
 8013c06:	687b      	ldr	r3, [r7, #4]
 8013c08:	3304      	adds	r3, #4
 8013c0a:	4619      	mov	r1, r3
 8013c0c:	4610      	mov	r0, r2
 8013c0e:	f000 fb4f 	bl	80142b0 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8013c12:	687b      	ldr	r3, [r7, #4]
 8013c14:	6818      	ldr	r0, [r3, #0]
 8013c16:	687b      	ldr	r3, [r7, #4]
 8013c18:	685b      	ldr	r3, [r3, #4]
 8013c1a:	461a      	mov	r2, r3
 8013c1c:	6839      	ldr	r1, [r7, #0]
 8013c1e:	f000 fba3 	bl	8014368 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8013c22:	4b07      	ldr	r3, [pc, #28]	; (8013c40 <HAL_SDRAM_Init+0x74>)
 8013c24:	681b      	ldr	r3, [r3, #0]
 8013c26:	4a06      	ldr	r2, [pc, #24]	; (8013c40 <HAL_SDRAM_Init+0x74>)
 8013c28:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8013c2c:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8013c2e:	687b      	ldr	r3, [r7, #4]
 8013c30:	2201      	movs	r2, #1
 8013c32:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8013c36:	2300      	movs	r3, #0
}
 8013c38:	4618      	mov	r0, r3
 8013c3a:	3708      	adds	r7, #8
 8013c3c:	46bd      	mov	sp, r7
 8013c3e:	bd80      	pop	{r7, pc}
 8013c40:	52004000 	.word	0x52004000

08013c44 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8013c44:	b580      	push	{r7, lr}
 8013c46:	b086      	sub	sp, #24
 8013c48:	af00      	add	r7, sp, #0
 8013c4a:	60f8      	str	r0, [r7, #12]
 8013c4c:	60b9      	str	r1, [r7, #8]
 8013c4e:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8013c50:	68fb      	ldr	r3, [r7, #12]
 8013c52:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013c56:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8013c58:	7dfb      	ldrb	r3, [r7, #23]
 8013c5a:	2b02      	cmp	r3, #2
 8013c5c:	d101      	bne.n	8013c62 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8013c5e:	2302      	movs	r3, #2
 8013c60:	e021      	b.n	8013ca6 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8013c62:	7dfb      	ldrb	r3, [r7, #23]
 8013c64:	2b01      	cmp	r3, #1
 8013c66:	d002      	beq.n	8013c6e <HAL_SDRAM_SendCommand+0x2a>
 8013c68:	7dfb      	ldrb	r3, [r7, #23]
 8013c6a:	2b05      	cmp	r3, #5
 8013c6c:	d118      	bne.n	8013ca0 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8013c6e:	68fb      	ldr	r3, [r7, #12]
 8013c70:	2202      	movs	r2, #2
 8013c72:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8013c76:	68fb      	ldr	r3, [r7, #12]
 8013c78:	681b      	ldr	r3, [r3, #0]
 8013c7a:	687a      	ldr	r2, [r7, #4]
 8013c7c:	68b9      	ldr	r1, [r7, #8]
 8013c7e:	4618      	mov	r0, r3
 8013c80:	f000 fbdc 	bl	801443c <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8013c84:	68bb      	ldr	r3, [r7, #8]
 8013c86:	681b      	ldr	r3, [r3, #0]
 8013c88:	2b02      	cmp	r3, #2
 8013c8a:	d104      	bne.n	8013c96 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8013c8c:	68fb      	ldr	r3, [r7, #12]
 8013c8e:	2205      	movs	r2, #5
 8013c90:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8013c94:	e006      	b.n	8013ca4 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8013c96:	68fb      	ldr	r3, [r7, #12]
 8013c98:	2201      	movs	r2, #1
 8013c9a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8013c9e:	e001      	b.n	8013ca4 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8013ca0:	2301      	movs	r3, #1
 8013ca2:	e000      	b.n	8013ca6 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8013ca4:	2300      	movs	r3, #0
}
 8013ca6:	4618      	mov	r0, r3
 8013ca8:	3718      	adds	r7, #24
 8013caa:	46bd      	mov	sp, r7
 8013cac:	bd80      	pop	{r7, pc}

08013cae <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8013cae:	b580      	push	{r7, lr}
 8013cb0:	b082      	sub	sp, #8
 8013cb2:	af00      	add	r7, sp, #0
 8013cb4:	6078      	str	r0, [r7, #4]
 8013cb6:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8013cb8:	687b      	ldr	r3, [r7, #4]
 8013cba:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013cbe:	b2db      	uxtb	r3, r3
 8013cc0:	2b02      	cmp	r3, #2
 8013cc2:	d101      	bne.n	8013cc8 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8013cc4:	2302      	movs	r3, #2
 8013cc6:	e016      	b.n	8013cf6 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8013cc8:	687b      	ldr	r3, [r7, #4]
 8013cca:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013cce:	b2db      	uxtb	r3, r3
 8013cd0:	2b01      	cmp	r3, #1
 8013cd2:	d10f      	bne.n	8013cf4 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8013cd4:	687b      	ldr	r3, [r7, #4]
 8013cd6:	2202      	movs	r2, #2
 8013cd8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8013cdc:	687b      	ldr	r3, [r7, #4]
 8013cde:	681b      	ldr	r3, [r3, #0]
 8013ce0:	6839      	ldr	r1, [r7, #0]
 8013ce2:	4618      	mov	r0, r3
 8013ce4:	f000 fbce 	bl	8014484 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8013ce8:	687b      	ldr	r3, [r7, #4]
 8013cea:	2201      	movs	r2, #1
 8013cec:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8013cf0:	2300      	movs	r3, #0
 8013cf2:	e000      	b.n	8013cf6 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8013cf4:	2301      	movs	r3, #1
}
 8013cf6:	4618      	mov	r0, r3
 8013cf8:	3708      	adds	r7, #8
 8013cfa:	46bd      	mov	sp, r7
 8013cfc:	bd80      	pop	{r7, pc}

08013cfe <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8013cfe:	b580      	push	{r7, lr}
 8013d00:	b082      	sub	sp, #8
 8013d02:	af00      	add	r7, sp, #0
 8013d04:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8013d06:	687b      	ldr	r3, [r7, #4]
 8013d08:	2b00      	cmp	r3, #0
 8013d0a:	d101      	bne.n	8013d10 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8013d0c:	2301      	movs	r3, #1
 8013d0e:	e049      	b.n	8013da4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8013d10:	687b      	ldr	r3, [r7, #4]
 8013d12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013d16:	b2db      	uxtb	r3, r3
 8013d18:	2b00      	cmp	r3, #0
 8013d1a:	d106      	bne.n	8013d2a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8013d1c:	687b      	ldr	r3, [r7, #4]
 8013d1e:	2200      	movs	r2, #0
 8013d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8013d24:	6878      	ldr	r0, [r7, #4]
 8013d26:	f000 f841 	bl	8013dac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013d2a:	687b      	ldr	r3, [r7, #4]
 8013d2c:	2202      	movs	r2, #2
 8013d2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8013d32:	687b      	ldr	r3, [r7, #4]
 8013d34:	681a      	ldr	r2, [r3, #0]
 8013d36:	687b      	ldr	r3, [r7, #4]
 8013d38:	3304      	adds	r3, #4
 8013d3a:	4619      	mov	r1, r3
 8013d3c:	4610      	mov	r0, r2
 8013d3e:	f000 f9ff 	bl	8014140 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8013d42:	687b      	ldr	r3, [r7, #4]
 8013d44:	2201      	movs	r2, #1
 8013d46:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8013d4a:	687b      	ldr	r3, [r7, #4]
 8013d4c:	2201      	movs	r2, #1
 8013d4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8013d52:	687b      	ldr	r3, [r7, #4]
 8013d54:	2201      	movs	r2, #1
 8013d56:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8013d5a:	687b      	ldr	r3, [r7, #4]
 8013d5c:	2201      	movs	r2, #1
 8013d5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8013d62:	687b      	ldr	r3, [r7, #4]
 8013d64:	2201      	movs	r2, #1
 8013d66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8013d6a:	687b      	ldr	r3, [r7, #4]
 8013d6c:	2201      	movs	r2, #1
 8013d6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8013d72:	687b      	ldr	r3, [r7, #4]
 8013d74:	2201      	movs	r2, #1
 8013d76:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8013d7a:	687b      	ldr	r3, [r7, #4]
 8013d7c:	2201      	movs	r2, #1
 8013d7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013d82:	687b      	ldr	r3, [r7, #4]
 8013d84:	2201      	movs	r2, #1
 8013d86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013d8a:	687b      	ldr	r3, [r7, #4]
 8013d8c:	2201      	movs	r2, #1
 8013d8e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8013d92:	687b      	ldr	r3, [r7, #4]
 8013d94:	2201      	movs	r2, #1
 8013d96:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8013d9a:	687b      	ldr	r3, [r7, #4]
 8013d9c:	2201      	movs	r2, #1
 8013d9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8013da2:	2300      	movs	r3, #0
}
 8013da4:	4618      	mov	r0, r3
 8013da6:	3708      	adds	r7, #8
 8013da8:	46bd      	mov	sp, r7
 8013daa:	bd80      	pop	{r7, pc}

08013dac <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8013dac:	b480      	push	{r7}
 8013dae:	b083      	sub	sp, #12
 8013db0:	af00      	add	r7, sp, #0
 8013db2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8013db4:	bf00      	nop
 8013db6:	370c      	adds	r7, #12
 8013db8:	46bd      	mov	sp, r7
 8013dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dbe:	4770      	bx	lr

08013dc0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8013dc0:	b480      	push	{r7}
 8013dc2:	b085      	sub	sp, #20
 8013dc4:	af00      	add	r7, sp, #0
 8013dc6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013dce:	b2db      	uxtb	r3, r3
 8013dd0:	2b01      	cmp	r3, #1
 8013dd2:	d001      	beq.n	8013dd8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8013dd4:	2301      	movs	r3, #1
 8013dd6:	e054      	b.n	8013e82 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013dd8:	687b      	ldr	r3, [r7, #4]
 8013dda:	2202      	movs	r2, #2
 8013ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8013de0:	687b      	ldr	r3, [r7, #4]
 8013de2:	681b      	ldr	r3, [r3, #0]
 8013de4:	68da      	ldr	r2, [r3, #12]
 8013de6:	687b      	ldr	r3, [r7, #4]
 8013de8:	681b      	ldr	r3, [r3, #0]
 8013dea:	f042 0201 	orr.w	r2, r2, #1
 8013dee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8013df0:	687b      	ldr	r3, [r7, #4]
 8013df2:	681b      	ldr	r3, [r3, #0]
 8013df4:	4a26      	ldr	r2, [pc, #152]	; (8013e90 <HAL_TIM_Base_Start_IT+0xd0>)
 8013df6:	4293      	cmp	r3, r2
 8013df8:	d022      	beq.n	8013e40 <HAL_TIM_Base_Start_IT+0x80>
 8013dfa:	687b      	ldr	r3, [r7, #4]
 8013dfc:	681b      	ldr	r3, [r3, #0]
 8013dfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013e02:	d01d      	beq.n	8013e40 <HAL_TIM_Base_Start_IT+0x80>
 8013e04:	687b      	ldr	r3, [r7, #4]
 8013e06:	681b      	ldr	r3, [r3, #0]
 8013e08:	4a22      	ldr	r2, [pc, #136]	; (8013e94 <HAL_TIM_Base_Start_IT+0xd4>)
 8013e0a:	4293      	cmp	r3, r2
 8013e0c:	d018      	beq.n	8013e40 <HAL_TIM_Base_Start_IT+0x80>
 8013e0e:	687b      	ldr	r3, [r7, #4]
 8013e10:	681b      	ldr	r3, [r3, #0]
 8013e12:	4a21      	ldr	r2, [pc, #132]	; (8013e98 <HAL_TIM_Base_Start_IT+0xd8>)
 8013e14:	4293      	cmp	r3, r2
 8013e16:	d013      	beq.n	8013e40 <HAL_TIM_Base_Start_IT+0x80>
 8013e18:	687b      	ldr	r3, [r7, #4]
 8013e1a:	681b      	ldr	r3, [r3, #0]
 8013e1c:	4a1f      	ldr	r2, [pc, #124]	; (8013e9c <HAL_TIM_Base_Start_IT+0xdc>)
 8013e1e:	4293      	cmp	r3, r2
 8013e20:	d00e      	beq.n	8013e40 <HAL_TIM_Base_Start_IT+0x80>
 8013e22:	687b      	ldr	r3, [r7, #4]
 8013e24:	681b      	ldr	r3, [r3, #0]
 8013e26:	4a1e      	ldr	r2, [pc, #120]	; (8013ea0 <HAL_TIM_Base_Start_IT+0xe0>)
 8013e28:	4293      	cmp	r3, r2
 8013e2a:	d009      	beq.n	8013e40 <HAL_TIM_Base_Start_IT+0x80>
 8013e2c:	687b      	ldr	r3, [r7, #4]
 8013e2e:	681b      	ldr	r3, [r3, #0]
 8013e30:	4a1c      	ldr	r2, [pc, #112]	; (8013ea4 <HAL_TIM_Base_Start_IT+0xe4>)
 8013e32:	4293      	cmp	r3, r2
 8013e34:	d004      	beq.n	8013e40 <HAL_TIM_Base_Start_IT+0x80>
 8013e36:	687b      	ldr	r3, [r7, #4]
 8013e38:	681b      	ldr	r3, [r3, #0]
 8013e3a:	4a1b      	ldr	r2, [pc, #108]	; (8013ea8 <HAL_TIM_Base_Start_IT+0xe8>)
 8013e3c:	4293      	cmp	r3, r2
 8013e3e:	d115      	bne.n	8013e6c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8013e40:	687b      	ldr	r3, [r7, #4]
 8013e42:	681b      	ldr	r3, [r3, #0]
 8013e44:	689a      	ldr	r2, [r3, #8]
 8013e46:	4b19      	ldr	r3, [pc, #100]	; (8013eac <HAL_TIM_Base_Start_IT+0xec>)
 8013e48:	4013      	ands	r3, r2
 8013e4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013e4c:	68fb      	ldr	r3, [r7, #12]
 8013e4e:	2b06      	cmp	r3, #6
 8013e50:	d015      	beq.n	8013e7e <HAL_TIM_Base_Start_IT+0xbe>
 8013e52:	68fb      	ldr	r3, [r7, #12]
 8013e54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013e58:	d011      	beq.n	8013e7e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8013e5a:	687b      	ldr	r3, [r7, #4]
 8013e5c:	681b      	ldr	r3, [r3, #0]
 8013e5e:	681a      	ldr	r2, [r3, #0]
 8013e60:	687b      	ldr	r3, [r7, #4]
 8013e62:	681b      	ldr	r3, [r3, #0]
 8013e64:	f042 0201 	orr.w	r2, r2, #1
 8013e68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013e6a:	e008      	b.n	8013e7e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8013e6c:	687b      	ldr	r3, [r7, #4]
 8013e6e:	681b      	ldr	r3, [r3, #0]
 8013e70:	681a      	ldr	r2, [r3, #0]
 8013e72:	687b      	ldr	r3, [r7, #4]
 8013e74:	681b      	ldr	r3, [r3, #0]
 8013e76:	f042 0201 	orr.w	r2, r2, #1
 8013e7a:	601a      	str	r2, [r3, #0]
 8013e7c:	e000      	b.n	8013e80 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013e7e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8013e80:	2300      	movs	r3, #0
}
 8013e82:	4618      	mov	r0, r3
 8013e84:	3714      	adds	r7, #20
 8013e86:	46bd      	mov	sp, r7
 8013e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e8c:	4770      	bx	lr
 8013e8e:	bf00      	nop
 8013e90:	40010000 	.word	0x40010000
 8013e94:	40000400 	.word	0x40000400
 8013e98:	40000800 	.word	0x40000800
 8013e9c:	40000c00 	.word	0x40000c00
 8013ea0:	40010400 	.word	0x40010400
 8013ea4:	40001800 	.word	0x40001800
 8013ea8:	40014000 	.word	0x40014000
 8013eac:	00010007 	.word	0x00010007

08013eb0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8013eb0:	b580      	push	{r7, lr}
 8013eb2:	b082      	sub	sp, #8
 8013eb4:	af00      	add	r7, sp, #0
 8013eb6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8013eb8:	687b      	ldr	r3, [r7, #4]
 8013eba:	681b      	ldr	r3, [r3, #0]
 8013ebc:	691b      	ldr	r3, [r3, #16]
 8013ebe:	f003 0302 	and.w	r3, r3, #2
 8013ec2:	2b02      	cmp	r3, #2
 8013ec4:	d122      	bne.n	8013f0c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8013ec6:	687b      	ldr	r3, [r7, #4]
 8013ec8:	681b      	ldr	r3, [r3, #0]
 8013eca:	68db      	ldr	r3, [r3, #12]
 8013ecc:	f003 0302 	and.w	r3, r3, #2
 8013ed0:	2b02      	cmp	r3, #2
 8013ed2:	d11b      	bne.n	8013f0c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8013ed4:	687b      	ldr	r3, [r7, #4]
 8013ed6:	681b      	ldr	r3, [r3, #0]
 8013ed8:	f06f 0202 	mvn.w	r2, #2
 8013edc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8013ede:	687b      	ldr	r3, [r7, #4]
 8013ee0:	2201      	movs	r2, #1
 8013ee2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8013ee4:	687b      	ldr	r3, [r7, #4]
 8013ee6:	681b      	ldr	r3, [r3, #0]
 8013ee8:	699b      	ldr	r3, [r3, #24]
 8013eea:	f003 0303 	and.w	r3, r3, #3
 8013eee:	2b00      	cmp	r3, #0
 8013ef0:	d003      	beq.n	8013efa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8013ef2:	6878      	ldr	r0, [r7, #4]
 8013ef4:	f000 f905 	bl	8014102 <HAL_TIM_IC_CaptureCallback>
 8013ef8:	e005      	b.n	8013f06 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8013efa:	6878      	ldr	r0, [r7, #4]
 8013efc:	f000 f8f7 	bl	80140ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8013f00:	6878      	ldr	r0, [r7, #4]
 8013f02:	f000 f908 	bl	8014116 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8013f06:	687b      	ldr	r3, [r7, #4]
 8013f08:	2200      	movs	r2, #0
 8013f0a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8013f0c:	687b      	ldr	r3, [r7, #4]
 8013f0e:	681b      	ldr	r3, [r3, #0]
 8013f10:	691b      	ldr	r3, [r3, #16]
 8013f12:	f003 0304 	and.w	r3, r3, #4
 8013f16:	2b04      	cmp	r3, #4
 8013f18:	d122      	bne.n	8013f60 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8013f1a:	687b      	ldr	r3, [r7, #4]
 8013f1c:	681b      	ldr	r3, [r3, #0]
 8013f1e:	68db      	ldr	r3, [r3, #12]
 8013f20:	f003 0304 	and.w	r3, r3, #4
 8013f24:	2b04      	cmp	r3, #4
 8013f26:	d11b      	bne.n	8013f60 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8013f28:	687b      	ldr	r3, [r7, #4]
 8013f2a:	681b      	ldr	r3, [r3, #0]
 8013f2c:	f06f 0204 	mvn.w	r2, #4
 8013f30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8013f32:	687b      	ldr	r3, [r7, #4]
 8013f34:	2202      	movs	r2, #2
 8013f36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8013f38:	687b      	ldr	r3, [r7, #4]
 8013f3a:	681b      	ldr	r3, [r3, #0]
 8013f3c:	699b      	ldr	r3, [r3, #24]
 8013f3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8013f42:	2b00      	cmp	r3, #0
 8013f44:	d003      	beq.n	8013f4e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8013f46:	6878      	ldr	r0, [r7, #4]
 8013f48:	f000 f8db 	bl	8014102 <HAL_TIM_IC_CaptureCallback>
 8013f4c:	e005      	b.n	8013f5a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8013f4e:	6878      	ldr	r0, [r7, #4]
 8013f50:	f000 f8cd 	bl	80140ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8013f54:	6878      	ldr	r0, [r7, #4]
 8013f56:	f000 f8de 	bl	8014116 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8013f5a:	687b      	ldr	r3, [r7, #4]
 8013f5c:	2200      	movs	r2, #0
 8013f5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8013f60:	687b      	ldr	r3, [r7, #4]
 8013f62:	681b      	ldr	r3, [r3, #0]
 8013f64:	691b      	ldr	r3, [r3, #16]
 8013f66:	f003 0308 	and.w	r3, r3, #8
 8013f6a:	2b08      	cmp	r3, #8
 8013f6c:	d122      	bne.n	8013fb4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8013f6e:	687b      	ldr	r3, [r7, #4]
 8013f70:	681b      	ldr	r3, [r3, #0]
 8013f72:	68db      	ldr	r3, [r3, #12]
 8013f74:	f003 0308 	and.w	r3, r3, #8
 8013f78:	2b08      	cmp	r3, #8
 8013f7a:	d11b      	bne.n	8013fb4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8013f7c:	687b      	ldr	r3, [r7, #4]
 8013f7e:	681b      	ldr	r3, [r3, #0]
 8013f80:	f06f 0208 	mvn.w	r2, #8
 8013f84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8013f86:	687b      	ldr	r3, [r7, #4]
 8013f88:	2204      	movs	r2, #4
 8013f8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8013f8c:	687b      	ldr	r3, [r7, #4]
 8013f8e:	681b      	ldr	r3, [r3, #0]
 8013f90:	69db      	ldr	r3, [r3, #28]
 8013f92:	f003 0303 	and.w	r3, r3, #3
 8013f96:	2b00      	cmp	r3, #0
 8013f98:	d003      	beq.n	8013fa2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8013f9a:	6878      	ldr	r0, [r7, #4]
 8013f9c:	f000 f8b1 	bl	8014102 <HAL_TIM_IC_CaptureCallback>
 8013fa0:	e005      	b.n	8013fae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8013fa2:	6878      	ldr	r0, [r7, #4]
 8013fa4:	f000 f8a3 	bl	80140ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8013fa8:	6878      	ldr	r0, [r7, #4]
 8013faa:	f000 f8b4 	bl	8014116 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8013fae:	687b      	ldr	r3, [r7, #4]
 8013fb0:	2200      	movs	r2, #0
 8013fb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8013fb4:	687b      	ldr	r3, [r7, #4]
 8013fb6:	681b      	ldr	r3, [r3, #0]
 8013fb8:	691b      	ldr	r3, [r3, #16]
 8013fba:	f003 0310 	and.w	r3, r3, #16
 8013fbe:	2b10      	cmp	r3, #16
 8013fc0:	d122      	bne.n	8014008 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8013fc2:	687b      	ldr	r3, [r7, #4]
 8013fc4:	681b      	ldr	r3, [r3, #0]
 8013fc6:	68db      	ldr	r3, [r3, #12]
 8013fc8:	f003 0310 	and.w	r3, r3, #16
 8013fcc:	2b10      	cmp	r3, #16
 8013fce:	d11b      	bne.n	8014008 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8013fd0:	687b      	ldr	r3, [r7, #4]
 8013fd2:	681b      	ldr	r3, [r3, #0]
 8013fd4:	f06f 0210 	mvn.w	r2, #16
 8013fd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8013fda:	687b      	ldr	r3, [r7, #4]
 8013fdc:	2208      	movs	r2, #8
 8013fde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8013fe0:	687b      	ldr	r3, [r7, #4]
 8013fe2:	681b      	ldr	r3, [r3, #0]
 8013fe4:	69db      	ldr	r3, [r3, #28]
 8013fe6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8013fea:	2b00      	cmp	r3, #0
 8013fec:	d003      	beq.n	8013ff6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8013fee:	6878      	ldr	r0, [r7, #4]
 8013ff0:	f000 f887 	bl	8014102 <HAL_TIM_IC_CaptureCallback>
 8013ff4:	e005      	b.n	8014002 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8013ff6:	6878      	ldr	r0, [r7, #4]
 8013ff8:	f000 f879 	bl	80140ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8013ffc:	6878      	ldr	r0, [r7, #4]
 8013ffe:	f000 f88a 	bl	8014116 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8014002:	687b      	ldr	r3, [r7, #4]
 8014004:	2200      	movs	r2, #0
 8014006:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8014008:	687b      	ldr	r3, [r7, #4]
 801400a:	681b      	ldr	r3, [r3, #0]
 801400c:	691b      	ldr	r3, [r3, #16]
 801400e:	f003 0301 	and.w	r3, r3, #1
 8014012:	2b01      	cmp	r3, #1
 8014014:	d10e      	bne.n	8014034 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8014016:	687b      	ldr	r3, [r7, #4]
 8014018:	681b      	ldr	r3, [r3, #0]
 801401a:	68db      	ldr	r3, [r3, #12]
 801401c:	f003 0301 	and.w	r3, r3, #1
 8014020:	2b01      	cmp	r3, #1
 8014022:	d107      	bne.n	8014034 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8014024:	687b      	ldr	r3, [r7, #4]
 8014026:	681b      	ldr	r3, [r3, #0]
 8014028:	f06f 0201 	mvn.w	r2, #1
 801402c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801402e:	6878      	ldr	r0, [r7, #4]
 8014030:	f7f2 fc0c 	bl	800684c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8014034:	687b      	ldr	r3, [r7, #4]
 8014036:	681b      	ldr	r3, [r3, #0]
 8014038:	691b      	ldr	r3, [r3, #16]
 801403a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801403e:	2b80      	cmp	r3, #128	; 0x80
 8014040:	d10e      	bne.n	8014060 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8014042:	687b      	ldr	r3, [r7, #4]
 8014044:	681b      	ldr	r3, [r3, #0]
 8014046:	68db      	ldr	r3, [r3, #12]
 8014048:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801404c:	2b80      	cmp	r3, #128	; 0x80
 801404e:	d107      	bne.n	8014060 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8014050:	687b      	ldr	r3, [r7, #4]
 8014052:	681b      	ldr	r3, [r3, #0]
 8014054:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8014058:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801405a:	6878      	ldr	r0, [r7, #4]
 801405c:	f000 f914 	bl	8014288 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8014060:	687b      	ldr	r3, [r7, #4]
 8014062:	681b      	ldr	r3, [r3, #0]
 8014064:	691b      	ldr	r3, [r3, #16]
 8014066:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801406a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801406e:	d10e      	bne.n	801408e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8014070:	687b      	ldr	r3, [r7, #4]
 8014072:	681b      	ldr	r3, [r3, #0]
 8014074:	68db      	ldr	r3, [r3, #12]
 8014076:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801407a:	2b80      	cmp	r3, #128	; 0x80
 801407c:	d107      	bne.n	801408e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 801407e:	687b      	ldr	r3, [r7, #4]
 8014080:	681b      	ldr	r3, [r3, #0]
 8014082:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8014086:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8014088:	6878      	ldr	r0, [r7, #4]
 801408a:	f000 f907 	bl	801429c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801408e:	687b      	ldr	r3, [r7, #4]
 8014090:	681b      	ldr	r3, [r3, #0]
 8014092:	691b      	ldr	r3, [r3, #16]
 8014094:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014098:	2b40      	cmp	r3, #64	; 0x40
 801409a:	d10e      	bne.n	80140ba <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801409c:	687b      	ldr	r3, [r7, #4]
 801409e:	681b      	ldr	r3, [r3, #0]
 80140a0:	68db      	ldr	r3, [r3, #12]
 80140a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80140a6:	2b40      	cmp	r3, #64	; 0x40
 80140a8:	d107      	bne.n	80140ba <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80140aa:	687b      	ldr	r3, [r7, #4]
 80140ac:	681b      	ldr	r3, [r3, #0]
 80140ae:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80140b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80140b4:	6878      	ldr	r0, [r7, #4]
 80140b6:	f000 f838 	bl	801412a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80140ba:	687b      	ldr	r3, [r7, #4]
 80140bc:	681b      	ldr	r3, [r3, #0]
 80140be:	691b      	ldr	r3, [r3, #16]
 80140c0:	f003 0320 	and.w	r3, r3, #32
 80140c4:	2b20      	cmp	r3, #32
 80140c6:	d10e      	bne.n	80140e6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80140c8:	687b      	ldr	r3, [r7, #4]
 80140ca:	681b      	ldr	r3, [r3, #0]
 80140cc:	68db      	ldr	r3, [r3, #12]
 80140ce:	f003 0320 	and.w	r3, r3, #32
 80140d2:	2b20      	cmp	r3, #32
 80140d4:	d107      	bne.n	80140e6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80140d6:	687b      	ldr	r3, [r7, #4]
 80140d8:	681b      	ldr	r3, [r3, #0]
 80140da:	f06f 0220 	mvn.w	r2, #32
 80140de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80140e0:	6878      	ldr	r0, [r7, #4]
 80140e2:	f000 f8c7 	bl	8014274 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80140e6:	bf00      	nop
 80140e8:	3708      	adds	r7, #8
 80140ea:	46bd      	mov	sp, r7
 80140ec:	bd80      	pop	{r7, pc}

080140ee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80140ee:	b480      	push	{r7}
 80140f0:	b083      	sub	sp, #12
 80140f2:	af00      	add	r7, sp, #0
 80140f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80140f6:	bf00      	nop
 80140f8:	370c      	adds	r7, #12
 80140fa:	46bd      	mov	sp, r7
 80140fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014100:	4770      	bx	lr

08014102 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8014102:	b480      	push	{r7}
 8014104:	b083      	sub	sp, #12
 8014106:	af00      	add	r7, sp, #0
 8014108:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801410a:	bf00      	nop
 801410c:	370c      	adds	r7, #12
 801410e:	46bd      	mov	sp, r7
 8014110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014114:	4770      	bx	lr

08014116 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8014116:	b480      	push	{r7}
 8014118:	b083      	sub	sp, #12
 801411a:	af00      	add	r7, sp, #0
 801411c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801411e:	bf00      	nop
 8014120:	370c      	adds	r7, #12
 8014122:	46bd      	mov	sp, r7
 8014124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014128:	4770      	bx	lr

0801412a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801412a:	b480      	push	{r7}
 801412c:	b083      	sub	sp, #12
 801412e:	af00      	add	r7, sp, #0
 8014130:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8014132:	bf00      	nop
 8014134:	370c      	adds	r7, #12
 8014136:	46bd      	mov	sp, r7
 8014138:	f85d 7b04 	ldr.w	r7, [sp], #4
 801413c:	4770      	bx	lr
	...

08014140 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8014140:	b480      	push	{r7}
 8014142:	b085      	sub	sp, #20
 8014144:	af00      	add	r7, sp, #0
 8014146:	6078      	str	r0, [r7, #4]
 8014148:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801414a:	687b      	ldr	r3, [r7, #4]
 801414c:	681b      	ldr	r3, [r3, #0]
 801414e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8014150:	687b      	ldr	r3, [r7, #4]
 8014152:	4a40      	ldr	r2, [pc, #256]	; (8014254 <TIM_Base_SetConfig+0x114>)
 8014154:	4293      	cmp	r3, r2
 8014156:	d013      	beq.n	8014180 <TIM_Base_SetConfig+0x40>
 8014158:	687b      	ldr	r3, [r7, #4]
 801415a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801415e:	d00f      	beq.n	8014180 <TIM_Base_SetConfig+0x40>
 8014160:	687b      	ldr	r3, [r7, #4]
 8014162:	4a3d      	ldr	r2, [pc, #244]	; (8014258 <TIM_Base_SetConfig+0x118>)
 8014164:	4293      	cmp	r3, r2
 8014166:	d00b      	beq.n	8014180 <TIM_Base_SetConfig+0x40>
 8014168:	687b      	ldr	r3, [r7, #4]
 801416a:	4a3c      	ldr	r2, [pc, #240]	; (801425c <TIM_Base_SetConfig+0x11c>)
 801416c:	4293      	cmp	r3, r2
 801416e:	d007      	beq.n	8014180 <TIM_Base_SetConfig+0x40>
 8014170:	687b      	ldr	r3, [r7, #4]
 8014172:	4a3b      	ldr	r2, [pc, #236]	; (8014260 <TIM_Base_SetConfig+0x120>)
 8014174:	4293      	cmp	r3, r2
 8014176:	d003      	beq.n	8014180 <TIM_Base_SetConfig+0x40>
 8014178:	687b      	ldr	r3, [r7, #4]
 801417a:	4a3a      	ldr	r2, [pc, #232]	; (8014264 <TIM_Base_SetConfig+0x124>)
 801417c:	4293      	cmp	r3, r2
 801417e:	d108      	bne.n	8014192 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8014180:	68fb      	ldr	r3, [r7, #12]
 8014182:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014186:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8014188:	683b      	ldr	r3, [r7, #0]
 801418a:	685b      	ldr	r3, [r3, #4]
 801418c:	68fa      	ldr	r2, [r7, #12]
 801418e:	4313      	orrs	r3, r2
 8014190:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8014192:	687b      	ldr	r3, [r7, #4]
 8014194:	4a2f      	ldr	r2, [pc, #188]	; (8014254 <TIM_Base_SetConfig+0x114>)
 8014196:	4293      	cmp	r3, r2
 8014198:	d01f      	beq.n	80141da <TIM_Base_SetConfig+0x9a>
 801419a:	687b      	ldr	r3, [r7, #4]
 801419c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80141a0:	d01b      	beq.n	80141da <TIM_Base_SetConfig+0x9a>
 80141a2:	687b      	ldr	r3, [r7, #4]
 80141a4:	4a2c      	ldr	r2, [pc, #176]	; (8014258 <TIM_Base_SetConfig+0x118>)
 80141a6:	4293      	cmp	r3, r2
 80141a8:	d017      	beq.n	80141da <TIM_Base_SetConfig+0x9a>
 80141aa:	687b      	ldr	r3, [r7, #4]
 80141ac:	4a2b      	ldr	r2, [pc, #172]	; (801425c <TIM_Base_SetConfig+0x11c>)
 80141ae:	4293      	cmp	r3, r2
 80141b0:	d013      	beq.n	80141da <TIM_Base_SetConfig+0x9a>
 80141b2:	687b      	ldr	r3, [r7, #4]
 80141b4:	4a2a      	ldr	r2, [pc, #168]	; (8014260 <TIM_Base_SetConfig+0x120>)
 80141b6:	4293      	cmp	r3, r2
 80141b8:	d00f      	beq.n	80141da <TIM_Base_SetConfig+0x9a>
 80141ba:	687b      	ldr	r3, [r7, #4]
 80141bc:	4a29      	ldr	r2, [pc, #164]	; (8014264 <TIM_Base_SetConfig+0x124>)
 80141be:	4293      	cmp	r3, r2
 80141c0:	d00b      	beq.n	80141da <TIM_Base_SetConfig+0x9a>
 80141c2:	687b      	ldr	r3, [r7, #4]
 80141c4:	4a28      	ldr	r2, [pc, #160]	; (8014268 <TIM_Base_SetConfig+0x128>)
 80141c6:	4293      	cmp	r3, r2
 80141c8:	d007      	beq.n	80141da <TIM_Base_SetConfig+0x9a>
 80141ca:	687b      	ldr	r3, [r7, #4]
 80141cc:	4a27      	ldr	r2, [pc, #156]	; (801426c <TIM_Base_SetConfig+0x12c>)
 80141ce:	4293      	cmp	r3, r2
 80141d0:	d003      	beq.n	80141da <TIM_Base_SetConfig+0x9a>
 80141d2:	687b      	ldr	r3, [r7, #4]
 80141d4:	4a26      	ldr	r2, [pc, #152]	; (8014270 <TIM_Base_SetConfig+0x130>)
 80141d6:	4293      	cmp	r3, r2
 80141d8:	d108      	bne.n	80141ec <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80141da:	68fb      	ldr	r3, [r7, #12]
 80141dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80141e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80141e2:	683b      	ldr	r3, [r7, #0]
 80141e4:	68db      	ldr	r3, [r3, #12]
 80141e6:	68fa      	ldr	r2, [r7, #12]
 80141e8:	4313      	orrs	r3, r2
 80141ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80141ec:	68fb      	ldr	r3, [r7, #12]
 80141ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80141f2:	683b      	ldr	r3, [r7, #0]
 80141f4:	695b      	ldr	r3, [r3, #20]
 80141f6:	4313      	orrs	r3, r2
 80141f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80141fa:	687b      	ldr	r3, [r7, #4]
 80141fc:	68fa      	ldr	r2, [r7, #12]
 80141fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8014200:	683b      	ldr	r3, [r7, #0]
 8014202:	689a      	ldr	r2, [r3, #8]
 8014204:	687b      	ldr	r3, [r7, #4]
 8014206:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8014208:	683b      	ldr	r3, [r7, #0]
 801420a:	681a      	ldr	r2, [r3, #0]
 801420c:	687b      	ldr	r3, [r7, #4]
 801420e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8014210:	687b      	ldr	r3, [r7, #4]
 8014212:	4a10      	ldr	r2, [pc, #64]	; (8014254 <TIM_Base_SetConfig+0x114>)
 8014214:	4293      	cmp	r3, r2
 8014216:	d00f      	beq.n	8014238 <TIM_Base_SetConfig+0xf8>
 8014218:	687b      	ldr	r3, [r7, #4]
 801421a:	4a12      	ldr	r2, [pc, #72]	; (8014264 <TIM_Base_SetConfig+0x124>)
 801421c:	4293      	cmp	r3, r2
 801421e:	d00b      	beq.n	8014238 <TIM_Base_SetConfig+0xf8>
 8014220:	687b      	ldr	r3, [r7, #4]
 8014222:	4a11      	ldr	r2, [pc, #68]	; (8014268 <TIM_Base_SetConfig+0x128>)
 8014224:	4293      	cmp	r3, r2
 8014226:	d007      	beq.n	8014238 <TIM_Base_SetConfig+0xf8>
 8014228:	687b      	ldr	r3, [r7, #4]
 801422a:	4a10      	ldr	r2, [pc, #64]	; (801426c <TIM_Base_SetConfig+0x12c>)
 801422c:	4293      	cmp	r3, r2
 801422e:	d003      	beq.n	8014238 <TIM_Base_SetConfig+0xf8>
 8014230:	687b      	ldr	r3, [r7, #4]
 8014232:	4a0f      	ldr	r2, [pc, #60]	; (8014270 <TIM_Base_SetConfig+0x130>)
 8014234:	4293      	cmp	r3, r2
 8014236:	d103      	bne.n	8014240 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8014238:	683b      	ldr	r3, [r7, #0]
 801423a:	691a      	ldr	r2, [r3, #16]
 801423c:	687b      	ldr	r3, [r7, #4]
 801423e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8014240:	687b      	ldr	r3, [r7, #4]
 8014242:	2201      	movs	r2, #1
 8014244:	615a      	str	r2, [r3, #20]
}
 8014246:	bf00      	nop
 8014248:	3714      	adds	r7, #20
 801424a:	46bd      	mov	sp, r7
 801424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014250:	4770      	bx	lr
 8014252:	bf00      	nop
 8014254:	40010000 	.word	0x40010000
 8014258:	40000400 	.word	0x40000400
 801425c:	40000800 	.word	0x40000800
 8014260:	40000c00 	.word	0x40000c00
 8014264:	40010400 	.word	0x40010400
 8014268:	40014000 	.word	0x40014000
 801426c:	40014400 	.word	0x40014400
 8014270:	40014800 	.word	0x40014800

08014274 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8014274:	b480      	push	{r7}
 8014276:	b083      	sub	sp, #12
 8014278:	af00      	add	r7, sp, #0
 801427a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801427c:	bf00      	nop
 801427e:	370c      	adds	r7, #12
 8014280:	46bd      	mov	sp, r7
 8014282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014286:	4770      	bx	lr

08014288 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8014288:	b480      	push	{r7}
 801428a:	b083      	sub	sp, #12
 801428c:	af00      	add	r7, sp, #0
 801428e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8014290:	bf00      	nop
 8014292:	370c      	adds	r7, #12
 8014294:	46bd      	mov	sp, r7
 8014296:	f85d 7b04 	ldr.w	r7, [sp], #4
 801429a:	4770      	bx	lr

0801429c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 801429c:	b480      	push	{r7}
 801429e:	b083      	sub	sp, #12
 80142a0:	af00      	add	r7, sp, #0
 80142a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80142a4:	bf00      	nop
 80142a6:	370c      	adds	r7, #12
 80142a8:	46bd      	mov	sp, r7
 80142aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142ae:	4770      	bx	lr

080142b0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80142b0:	b480      	push	{r7}
 80142b2:	b083      	sub	sp, #12
 80142b4:	af00      	add	r7, sp, #0
 80142b6:	6078      	str	r0, [r7, #4]
 80142b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80142ba:	683b      	ldr	r3, [r7, #0]
 80142bc:	681b      	ldr	r3, [r3, #0]
 80142be:	2b00      	cmp	r3, #0
 80142c0:	d121      	bne.n	8014306 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80142c2:	687b      	ldr	r3, [r7, #4]
 80142c4:	681a      	ldr	r2, [r3, #0]
 80142c6:	4b27      	ldr	r3, [pc, #156]	; (8014364 <FMC_SDRAM_Init+0xb4>)
 80142c8:	4013      	ands	r3, r2
 80142ca:	683a      	ldr	r2, [r7, #0]
 80142cc:	6851      	ldr	r1, [r2, #4]
 80142ce:	683a      	ldr	r2, [r7, #0]
 80142d0:	6892      	ldr	r2, [r2, #8]
 80142d2:	4311      	orrs	r1, r2
 80142d4:	683a      	ldr	r2, [r7, #0]
 80142d6:	68d2      	ldr	r2, [r2, #12]
 80142d8:	4311      	orrs	r1, r2
 80142da:	683a      	ldr	r2, [r7, #0]
 80142dc:	6912      	ldr	r2, [r2, #16]
 80142de:	4311      	orrs	r1, r2
 80142e0:	683a      	ldr	r2, [r7, #0]
 80142e2:	6952      	ldr	r2, [r2, #20]
 80142e4:	4311      	orrs	r1, r2
 80142e6:	683a      	ldr	r2, [r7, #0]
 80142e8:	6992      	ldr	r2, [r2, #24]
 80142ea:	4311      	orrs	r1, r2
 80142ec:	683a      	ldr	r2, [r7, #0]
 80142ee:	69d2      	ldr	r2, [r2, #28]
 80142f0:	4311      	orrs	r1, r2
 80142f2:	683a      	ldr	r2, [r7, #0]
 80142f4:	6a12      	ldr	r2, [r2, #32]
 80142f6:	4311      	orrs	r1, r2
 80142f8:	683a      	ldr	r2, [r7, #0]
 80142fa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80142fc:	430a      	orrs	r2, r1
 80142fe:	431a      	orrs	r2, r3
 8014300:	687b      	ldr	r3, [r7, #4]
 8014302:	601a      	str	r2, [r3, #0]
 8014304:	e026      	b.n	8014354 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8014306:	687b      	ldr	r3, [r7, #4]
 8014308:	681b      	ldr	r3, [r3, #0]
 801430a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 801430e:	683b      	ldr	r3, [r7, #0]
 8014310:	69d9      	ldr	r1, [r3, #28]
 8014312:	683b      	ldr	r3, [r7, #0]
 8014314:	6a1b      	ldr	r3, [r3, #32]
 8014316:	4319      	orrs	r1, r3
 8014318:	683b      	ldr	r3, [r7, #0]
 801431a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801431c:	430b      	orrs	r3, r1
 801431e:	431a      	orrs	r2, r3
 8014320:	687b      	ldr	r3, [r7, #4]
 8014322:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8014324:	687b      	ldr	r3, [r7, #4]
 8014326:	685a      	ldr	r2, [r3, #4]
 8014328:	4b0e      	ldr	r3, [pc, #56]	; (8014364 <FMC_SDRAM_Init+0xb4>)
 801432a:	4013      	ands	r3, r2
 801432c:	683a      	ldr	r2, [r7, #0]
 801432e:	6851      	ldr	r1, [r2, #4]
 8014330:	683a      	ldr	r2, [r7, #0]
 8014332:	6892      	ldr	r2, [r2, #8]
 8014334:	4311      	orrs	r1, r2
 8014336:	683a      	ldr	r2, [r7, #0]
 8014338:	68d2      	ldr	r2, [r2, #12]
 801433a:	4311      	orrs	r1, r2
 801433c:	683a      	ldr	r2, [r7, #0]
 801433e:	6912      	ldr	r2, [r2, #16]
 8014340:	4311      	orrs	r1, r2
 8014342:	683a      	ldr	r2, [r7, #0]
 8014344:	6952      	ldr	r2, [r2, #20]
 8014346:	4311      	orrs	r1, r2
 8014348:	683a      	ldr	r2, [r7, #0]
 801434a:	6992      	ldr	r2, [r2, #24]
 801434c:	430a      	orrs	r2, r1
 801434e:	431a      	orrs	r2, r3
 8014350:	687b      	ldr	r3, [r7, #4]
 8014352:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8014354:	2300      	movs	r3, #0
}
 8014356:	4618      	mov	r0, r3
 8014358:	370c      	adds	r7, #12
 801435a:	46bd      	mov	sp, r7
 801435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014360:	4770      	bx	lr
 8014362:	bf00      	nop
 8014364:	ffff8000 	.word	0xffff8000

08014368 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8014368:	b480      	push	{r7}
 801436a:	b085      	sub	sp, #20
 801436c:	af00      	add	r7, sp, #0
 801436e:	60f8      	str	r0, [r7, #12]
 8014370:	60b9      	str	r1, [r7, #8]
 8014372:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8014374:	687b      	ldr	r3, [r7, #4]
 8014376:	2b00      	cmp	r3, #0
 8014378:	d128      	bne.n	80143cc <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 801437a:	68fb      	ldr	r3, [r7, #12]
 801437c:	689b      	ldr	r3, [r3, #8]
 801437e:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8014382:	68bb      	ldr	r3, [r7, #8]
 8014384:	681b      	ldr	r3, [r3, #0]
 8014386:	1e59      	subs	r1, r3, #1
 8014388:	68bb      	ldr	r3, [r7, #8]
 801438a:	685b      	ldr	r3, [r3, #4]
 801438c:	3b01      	subs	r3, #1
 801438e:	011b      	lsls	r3, r3, #4
 8014390:	4319      	orrs	r1, r3
 8014392:	68bb      	ldr	r3, [r7, #8]
 8014394:	689b      	ldr	r3, [r3, #8]
 8014396:	3b01      	subs	r3, #1
 8014398:	021b      	lsls	r3, r3, #8
 801439a:	4319      	orrs	r1, r3
 801439c:	68bb      	ldr	r3, [r7, #8]
 801439e:	68db      	ldr	r3, [r3, #12]
 80143a0:	3b01      	subs	r3, #1
 80143a2:	031b      	lsls	r3, r3, #12
 80143a4:	4319      	orrs	r1, r3
 80143a6:	68bb      	ldr	r3, [r7, #8]
 80143a8:	691b      	ldr	r3, [r3, #16]
 80143aa:	3b01      	subs	r3, #1
 80143ac:	041b      	lsls	r3, r3, #16
 80143ae:	4319      	orrs	r1, r3
 80143b0:	68bb      	ldr	r3, [r7, #8]
 80143b2:	695b      	ldr	r3, [r3, #20]
 80143b4:	3b01      	subs	r3, #1
 80143b6:	051b      	lsls	r3, r3, #20
 80143b8:	4319      	orrs	r1, r3
 80143ba:	68bb      	ldr	r3, [r7, #8]
 80143bc:	699b      	ldr	r3, [r3, #24]
 80143be:	3b01      	subs	r3, #1
 80143c0:	061b      	lsls	r3, r3, #24
 80143c2:	430b      	orrs	r3, r1
 80143c4:	431a      	orrs	r2, r3
 80143c6:	68fb      	ldr	r3, [r7, #12]
 80143c8:	609a      	str	r2, [r3, #8]
 80143ca:	e02d      	b.n	8014428 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80143cc:	68fb      	ldr	r3, [r7, #12]
 80143ce:	689a      	ldr	r2, [r3, #8]
 80143d0:	4b19      	ldr	r3, [pc, #100]	; (8014438 <FMC_SDRAM_Timing_Init+0xd0>)
 80143d2:	4013      	ands	r3, r2
 80143d4:	68ba      	ldr	r2, [r7, #8]
 80143d6:	68d2      	ldr	r2, [r2, #12]
 80143d8:	3a01      	subs	r2, #1
 80143da:	0311      	lsls	r1, r2, #12
 80143dc:	68ba      	ldr	r2, [r7, #8]
 80143de:	6952      	ldr	r2, [r2, #20]
 80143e0:	3a01      	subs	r2, #1
 80143e2:	0512      	lsls	r2, r2, #20
 80143e4:	430a      	orrs	r2, r1
 80143e6:	431a      	orrs	r2, r3
 80143e8:	68fb      	ldr	r3, [r7, #12]
 80143ea:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80143ec:	68fb      	ldr	r3, [r7, #12]
 80143ee:	68db      	ldr	r3, [r3, #12]
 80143f0:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80143f4:	68bb      	ldr	r3, [r7, #8]
 80143f6:	681b      	ldr	r3, [r3, #0]
 80143f8:	1e59      	subs	r1, r3, #1
 80143fa:	68bb      	ldr	r3, [r7, #8]
 80143fc:	685b      	ldr	r3, [r3, #4]
 80143fe:	3b01      	subs	r3, #1
 8014400:	011b      	lsls	r3, r3, #4
 8014402:	4319      	orrs	r1, r3
 8014404:	68bb      	ldr	r3, [r7, #8]
 8014406:	689b      	ldr	r3, [r3, #8]
 8014408:	3b01      	subs	r3, #1
 801440a:	021b      	lsls	r3, r3, #8
 801440c:	4319      	orrs	r1, r3
 801440e:	68bb      	ldr	r3, [r7, #8]
 8014410:	691b      	ldr	r3, [r3, #16]
 8014412:	3b01      	subs	r3, #1
 8014414:	041b      	lsls	r3, r3, #16
 8014416:	4319      	orrs	r1, r3
 8014418:	68bb      	ldr	r3, [r7, #8]
 801441a:	699b      	ldr	r3, [r3, #24]
 801441c:	3b01      	subs	r3, #1
 801441e:	061b      	lsls	r3, r3, #24
 8014420:	430b      	orrs	r3, r1
 8014422:	431a      	orrs	r2, r3
 8014424:	68fb      	ldr	r3, [r7, #12]
 8014426:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 8014428:	2300      	movs	r3, #0
}
 801442a:	4618      	mov	r0, r3
 801442c:	3714      	adds	r7, #20
 801442e:	46bd      	mov	sp, r7
 8014430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014434:	4770      	bx	lr
 8014436:	bf00      	nop
 8014438:	ff0f0fff 	.word	0xff0f0fff

0801443c <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 801443c:	b480      	push	{r7}
 801443e:	b085      	sub	sp, #20
 8014440:	af00      	add	r7, sp, #0
 8014442:	60f8      	str	r0, [r7, #12]
 8014444:	60b9      	str	r1, [r7, #8]
 8014446:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8014448:	68fb      	ldr	r3, [r7, #12]
 801444a:	691a      	ldr	r2, [r3, #16]
 801444c:	4b0c      	ldr	r3, [pc, #48]	; (8014480 <FMC_SDRAM_SendCommand+0x44>)
 801444e:	4013      	ands	r3, r2
 8014450:	68ba      	ldr	r2, [r7, #8]
 8014452:	6811      	ldr	r1, [r2, #0]
 8014454:	68ba      	ldr	r2, [r7, #8]
 8014456:	6852      	ldr	r2, [r2, #4]
 8014458:	4311      	orrs	r1, r2
 801445a:	68ba      	ldr	r2, [r7, #8]
 801445c:	6892      	ldr	r2, [r2, #8]
 801445e:	3a01      	subs	r2, #1
 8014460:	0152      	lsls	r2, r2, #5
 8014462:	4311      	orrs	r1, r2
 8014464:	68ba      	ldr	r2, [r7, #8]
 8014466:	68d2      	ldr	r2, [r2, #12]
 8014468:	0252      	lsls	r2, r2, #9
 801446a:	430a      	orrs	r2, r1
 801446c:	431a      	orrs	r2, r3
 801446e:	68fb      	ldr	r3, [r7, #12]
 8014470:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 8014472:	2300      	movs	r3, #0
}
 8014474:	4618      	mov	r0, r3
 8014476:	3714      	adds	r7, #20
 8014478:	46bd      	mov	sp, r7
 801447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801447e:	4770      	bx	lr
 8014480:	ffc00000 	.word	0xffc00000

08014484 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8014484:	b480      	push	{r7}
 8014486:	b083      	sub	sp, #12
 8014488:	af00      	add	r7, sp, #0
 801448a:	6078      	str	r0, [r7, #4]
 801448c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 801448e:	687b      	ldr	r3, [r7, #4]
 8014490:	695a      	ldr	r2, [r3, #20]
 8014492:	4b07      	ldr	r3, [pc, #28]	; (80144b0 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 8014494:	4013      	ands	r3, r2
 8014496:	683a      	ldr	r2, [r7, #0]
 8014498:	0052      	lsls	r2, r2, #1
 801449a:	431a      	orrs	r2, r3
 801449c:	687b      	ldr	r3, [r7, #4]
 801449e:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80144a0:	2300      	movs	r3, #0
}
 80144a2:	4618      	mov	r0, r3
 80144a4:	370c      	adds	r7, #12
 80144a6:	46bd      	mov	sp, r7
 80144a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144ac:	4770      	bx	lr
 80144ae:	bf00      	nop
 80144b0:	ffffc001 	.word	0xffffc001

080144b4 <__NVIC_SetPriority>:
{
 80144b4:	b480      	push	{r7}
 80144b6:	b083      	sub	sp, #12
 80144b8:	af00      	add	r7, sp, #0
 80144ba:	4603      	mov	r3, r0
 80144bc:	6039      	str	r1, [r7, #0]
 80144be:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80144c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80144c4:	2b00      	cmp	r3, #0
 80144c6:	db0a      	blt.n	80144de <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80144c8:	683b      	ldr	r3, [r7, #0]
 80144ca:	b2da      	uxtb	r2, r3
 80144cc:	490c      	ldr	r1, [pc, #48]	; (8014500 <__NVIC_SetPriority+0x4c>)
 80144ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80144d2:	0112      	lsls	r2, r2, #4
 80144d4:	b2d2      	uxtb	r2, r2
 80144d6:	440b      	add	r3, r1
 80144d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80144dc:	e00a      	b.n	80144f4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80144de:	683b      	ldr	r3, [r7, #0]
 80144e0:	b2da      	uxtb	r2, r3
 80144e2:	4908      	ldr	r1, [pc, #32]	; (8014504 <__NVIC_SetPriority+0x50>)
 80144e4:	88fb      	ldrh	r3, [r7, #6]
 80144e6:	f003 030f 	and.w	r3, r3, #15
 80144ea:	3b04      	subs	r3, #4
 80144ec:	0112      	lsls	r2, r2, #4
 80144ee:	b2d2      	uxtb	r2, r2
 80144f0:	440b      	add	r3, r1
 80144f2:	761a      	strb	r2, [r3, #24]
}
 80144f4:	bf00      	nop
 80144f6:	370c      	adds	r7, #12
 80144f8:	46bd      	mov	sp, r7
 80144fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144fe:	4770      	bx	lr
 8014500:	e000e100 	.word	0xe000e100
 8014504:	e000ed00 	.word	0xe000ed00

08014508 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8014508:	b580      	push	{r7, lr}
 801450a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 801450c:	4b05      	ldr	r3, [pc, #20]	; (8014524 <SysTick_Handler+0x1c>)
 801450e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8014510:	f003 f8d0 	bl	80176b4 <xTaskGetSchedulerState>
 8014514:	4603      	mov	r3, r0
 8014516:	2b01      	cmp	r3, #1
 8014518:	d001      	beq.n	801451e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 801451a:	f001 f8f5 	bl	8015708 <xPortSysTickHandler>
  }
}
 801451e:	bf00      	nop
 8014520:	bd80      	pop	{r7, pc}
 8014522:	bf00      	nop
 8014524:	e000e010 	.word	0xe000e010

08014528 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8014528:	b580      	push	{r7, lr}
 801452a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 801452c:	2100      	movs	r1, #0
 801452e:	f06f 0004 	mvn.w	r0, #4
 8014532:	f7ff ffbf 	bl	80144b4 <__NVIC_SetPriority>
#endif
}
 8014536:	bf00      	nop
 8014538:	bd80      	pop	{r7, pc}
	...

0801453c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 801453c:	b480      	push	{r7}
 801453e:	b083      	sub	sp, #12
 8014540:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014542:	f3ef 8305 	mrs	r3, IPSR
 8014546:	603b      	str	r3, [r7, #0]
  return(result);
 8014548:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801454a:	2b00      	cmp	r3, #0
 801454c:	d003      	beq.n	8014556 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 801454e:	f06f 0305 	mvn.w	r3, #5
 8014552:	607b      	str	r3, [r7, #4]
 8014554:	e00c      	b.n	8014570 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8014556:	4b0a      	ldr	r3, [pc, #40]	; (8014580 <osKernelInitialize+0x44>)
 8014558:	681b      	ldr	r3, [r3, #0]
 801455a:	2b00      	cmp	r3, #0
 801455c:	d105      	bne.n	801456a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 801455e:	4b08      	ldr	r3, [pc, #32]	; (8014580 <osKernelInitialize+0x44>)
 8014560:	2201      	movs	r2, #1
 8014562:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8014564:	2300      	movs	r3, #0
 8014566:	607b      	str	r3, [r7, #4]
 8014568:	e002      	b.n	8014570 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 801456a:	f04f 33ff 	mov.w	r3, #4294967295
 801456e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8014570:	687b      	ldr	r3, [r7, #4]
}
 8014572:	4618      	mov	r0, r3
 8014574:	370c      	adds	r7, #12
 8014576:	46bd      	mov	sp, r7
 8014578:	f85d 7b04 	ldr.w	r7, [sp], #4
 801457c:	4770      	bx	lr
 801457e:	bf00      	nop
 8014580:	2400bd38 	.word	0x2400bd38

08014584 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8014584:	b580      	push	{r7, lr}
 8014586:	b082      	sub	sp, #8
 8014588:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801458a:	f3ef 8305 	mrs	r3, IPSR
 801458e:	603b      	str	r3, [r7, #0]
  return(result);
 8014590:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8014592:	2b00      	cmp	r3, #0
 8014594:	d003      	beq.n	801459e <osKernelStart+0x1a>
    stat = osErrorISR;
 8014596:	f06f 0305 	mvn.w	r3, #5
 801459a:	607b      	str	r3, [r7, #4]
 801459c:	e010      	b.n	80145c0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 801459e:	4b0b      	ldr	r3, [pc, #44]	; (80145cc <osKernelStart+0x48>)
 80145a0:	681b      	ldr	r3, [r3, #0]
 80145a2:	2b01      	cmp	r3, #1
 80145a4:	d109      	bne.n	80145ba <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80145a6:	f7ff ffbf 	bl	8014528 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80145aa:	4b08      	ldr	r3, [pc, #32]	; (80145cc <osKernelStart+0x48>)
 80145ac:	2202      	movs	r2, #2
 80145ae:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80145b0:	f002 fbd6 	bl	8016d60 <vTaskStartScheduler>
      stat = osOK;
 80145b4:	2300      	movs	r3, #0
 80145b6:	607b      	str	r3, [r7, #4]
 80145b8:	e002      	b.n	80145c0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80145ba:	f04f 33ff 	mov.w	r3, #4294967295
 80145be:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80145c0:	687b      	ldr	r3, [r7, #4]
}
 80145c2:	4618      	mov	r0, r3
 80145c4:	3708      	adds	r7, #8
 80145c6:	46bd      	mov	sp, r7
 80145c8:	bd80      	pop	{r7, pc}
 80145ca:	bf00      	nop
 80145cc:	2400bd38 	.word	0x2400bd38

080145d0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80145d0:	b580      	push	{r7, lr}
 80145d2:	b08e      	sub	sp, #56	; 0x38
 80145d4:	af04      	add	r7, sp, #16
 80145d6:	60f8      	str	r0, [r7, #12]
 80145d8:	60b9      	str	r1, [r7, #8]
 80145da:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80145dc:	2300      	movs	r3, #0
 80145de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80145e0:	f3ef 8305 	mrs	r3, IPSR
 80145e4:	617b      	str	r3, [r7, #20]
  return(result);
 80145e6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80145e8:	2b00      	cmp	r3, #0
 80145ea:	d17e      	bne.n	80146ea <osThreadNew+0x11a>
 80145ec:	68fb      	ldr	r3, [r7, #12]
 80145ee:	2b00      	cmp	r3, #0
 80145f0:	d07b      	beq.n	80146ea <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80145f2:	2380      	movs	r3, #128	; 0x80
 80145f4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80145f6:	2318      	movs	r3, #24
 80145f8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80145fa:	2300      	movs	r3, #0
 80145fc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80145fe:	f04f 33ff 	mov.w	r3, #4294967295
 8014602:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8014604:	687b      	ldr	r3, [r7, #4]
 8014606:	2b00      	cmp	r3, #0
 8014608:	d045      	beq.n	8014696 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 801460a:	687b      	ldr	r3, [r7, #4]
 801460c:	681b      	ldr	r3, [r3, #0]
 801460e:	2b00      	cmp	r3, #0
 8014610:	d002      	beq.n	8014618 <osThreadNew+0x48>
        name = attr->name;
 8014612:	687b      	ldr	r3, [r7, #4]
 8014614:	681b      	ldr	r3, [r3, #0]
 8014616:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8014618:	687b      	ldr	r3, [r7, #4]
 801461a:	699b      	ldr	r3, [r3, #24]
 801461c:	2b00      	cmp	r3, #0
 801461e:	d002      	beq.n	8014626 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8014620:	687b      	ldr	r3, [r7, #4]
 8014622:	699b      	ldr	r3, [r3, #24]
 8014624:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8014626:	69fb      	ldr	r3, [r7, #28]
 8014628:	2b00      	cmp	r3, #0
 801462a:	d008      	beq.n	801463e <osThreadNew+0x6e>
 801462c:	69fb      	ldr	r3, [r7, #28]
 801462e:	2b38      	cmp	r3, #56	; 0x38
 8014630:	d805      	bhi.n	801463e <osThreadNew+0x6e>
 8014632:	687b      	ldr	r3, [r7, #4]
 8014634:	685b      	ldr	r3, [r3, #4]
 8014636:	f003 0301 	and.w	r3, r3, #1
 801463a:	2b00      	cmp	r3, #0
 801463c:	d001      	beq.n	8014642 <osThreadNew+0x72>
        return (NULL);
 801463e:	2300      	movs	r3, #0
 8014640:	e054      	b.n	80146ec <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8014642:	687b      	ldr	r3, [r7, #4]
 8014644:	695b      	ldr	r3, [r3, #20]
 8014646:	2b00      	cmp	r3, #0
 8014648:	d003      	beq.n	8014652 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 801464a:	687b      	ldr	r3, [r7, #4]
 801464c:	695b      	ldr	r3, [r3, #20]
 801464e:	089b      	lsrs	r3, r3, #2
 8014650:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8014652:	687b      	ldr	r3, [r7, #4]
 8014654:	689b      	ldr	r3, [r3, #8]
 8014656:	2b00      	cmp	r3, #0
 8014658:	d00e      	beq.n	8014678 <osThreadNew+0xa8>
 801465a:	687b      	ldr	r3, [r7, #4]
 801465c:	68db      	ldr	r3, [r3, #12]
 801465e:	2b5f      	cmp	r3, #95	; 0x5f
 8014660:	d90a      	bls.n	8014678 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8014662:	687b      	ldr	r3, [r7, #4]
 8014664:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8014666:	2b00      	cmp	r3, #0
 8014668:	d006      	beq.n	8014678 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801466a:	687b      	ldr	r3, [r7, #4]
 801466c:	695b      	ldr	r3, [r3, #20]
 801466e:	2b00      	cmp	r3, #0
 8014670:	d002      	beq.n	8014678 <osThreadNew+0xa8>
        mem = 1;
 8014672:	2301      	movs	r3, #1
 8014674:	61bb      	str	r3, [r7, #24]
 8014676:	e010      	b.n	801469a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8014678:	687b      	ldr	r3, [r7, #4]
 801467a:	689b      	ldr	r3, [r3, #8]
 801467c:	2b00      	cmp	r3, #0
 801467e:	d10c      	bne.n	801469a <osThreadNew+0xca>
 8014680:	687b      	ldr	r3, [r7, #4]
 8014682:	68db      	ldr	r3, [r3, #12]
 8014684:	2b00      	cmp	r3, #0
 8014686:	d108      	bne.n	801469a <osThreadNew+0xca>
 8014688:	687b      	ldr	r3, [r7, #4]
 801468a:	691b      	ldr	r3, [r3, #16]
 801468c:	2b00      	cmp	r3, #0
 801468e:	d104      	bne.n	801469a <osThreadNew+0xca>
          mem = 0;
 8014690:	2300      	movs	r3, #0
 8014692:	61bb      	str	r3, [r7, #24]
 8014694:	e001      	b.n	801469a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8014696:	2300      	movs	r3, #0
 8014698:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 801469a:	69bb      	ldr	r3, [r7, #24]
 801469c:	2b01      	cmp	r3, #1
 801469e:	d110      	bne.n	80146c2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80146a0:	687b      	ldr	r3, [r7, #4]
 80146a2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80146a4:	687a      	ldr	r2, [r7, #4]
 80146a6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80146a8:	9202      	str	r2, [sp, #8]
 80146aa:	9301      	str	r3, [sp, #4]
 80146ac:	69fb      	ldr	r3, [r7, #28]
 80146ae:	9300      	str	r3, [sp, #0]
 80146b0:	68bb      	ldr	r3, [r7, #8]
 80146b2:	6a3a      	ldr	r2, [r7, #32]
 80146b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80146b6:	68f8      	ldr	r0, [r7, #12]
 80146b8:	f002 f97a 	bl	80169b0 <xTaskCreateStatic>
 80146bc:	4603      	mov	r3, r0
 80146be:	613b      	str	r3, [r7, #16]
 80146c0:	e013      	b.n	80146ea <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80146c2:	69bb      	ldr	r3, [r7, #24]
 80146c4:	2b00      	cmp	r3, #0
 80146c6:	d110      	bne.n	80146ea <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80146c8:	6a3b      	ldr	r3, [r7, #32]
 80146ca:	b29a      	uxth	r2, r3
 80146cc:	f107 0310 	add.w	r3, r7, #16
 80146d0:	9301      	str	r3, [sp, #4]
 80146d2:	69fb      	ldr	r3, [r7, #28]
 80146d4:	9300      	str	r3, [sp, #0]
 80146d6:	68bb      	ldr	r3, [r7, #8]
 80146d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80146da:	68f8      	ldr	r0, [r7, #12]
 80146dc:	f002 f9c5 	bl	8016a6a <xTaskCreate>
 80146e0:	4603      	mov	r3, r0
 80146e2:	2b01      	cmp	r3, #1
 80146e4:	d001      	beq.n	80146ea <osThreadNew+0x11a>
            hTask = NULL;
 80146e6:	2300      	movs	r3, #0
 80146e8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80146ea:	693b      	ldr	r3, [r7, #16]
}
 80146ec:	4618      	mov	r0, r3
 80146ee:	3728      	adds	r7, #40	; 0x28
 80146f0:	46bd      	mov	sp, r7
 80146f2:	bd80      	pop	{r7, pc}

080146f4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80146f4:	b580      	push	{r7, lr}
 80146f6:	b084      	sub	sp, #16
 80146f8:	af00      	add	r7, sp, #0
 80146fa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80146fc:	f3ef 8305 	mrs	r3, IPSR
 8014700:	60bb      	str	r3, [r7, #8]
  return(result);
 8014702:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8014704:	2b00      	cmp	r3, #0
 8014706:	d003      	beq.n	8014710 <osDelay+0x1c>
    stat = osErrorISR;
 8014708:	f06f 0305 	mvn.w	r3, #5
 801470c:	60fb      	str	r3, [r7, #12]
 801470e:	e007      	b.n	8014720 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8014710:	2300      	movs	r3, #0
 8014712:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8014714:	687b      	ldr	r3, [r7, #4]
 8014716:	2b00      	cmp	r3, #0
 8014718:	d002      	beq.n	8014720 <osDelay+0x2c>
      vTaskDelay(ticks);
 801471a:	6878      	ldr	r0, [r7, #4]
 801471c:	f002 faec 	bl	8016cf8 <vTaskDelay>
    }
  }

  return (stat);
 8014720:	68fb      	ldr	r3, [r7, #12]
}
 8014722:	4618      	mov	r0, r3
 8014724:	3710      	adds	r7, #16
 8014726:	46bd      	mov	sp, r7
 8014728:	bd80      	pop	{r7, pc}

0801472a <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 801472a:	b580      	push	{r7, lr}
 801472c:	b088      	sub	sp, #32
 801472e:	af00      	add	r7, sp, #0
 8014730:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8014732:	2300      	movs	r3, #0
 8014734:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014736:	f3ef 8305 	mrs	r3, IPSR
 801473a:	60bb      	str	r3, [r7, #8]
  return(result);
 801473c:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 801473e:	2b00      	cmp	r3, #0
 8014740:	d174      	bne.n	801482c <osMutexNew+0x102>
    if (attr != NULL) {
 8014742:	687b      	ldr	r3, [r7, #4]
 8014744:	2b00      	cmp	r3, #0
 8014746:	d003      	beq.n	8014750 <osMutexNew+0x26>
      type = attr->attr_bits;
 8014748:	687b      	ldr	r3, [r7, #4]
 801474a:	685b      	ldr	r3, [r3, #4]
 801474c:	61bb      	str	r3, [r7, #24]
 801474e:	e001      	b.n	8014754 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8014750:	2300      	movs	r3, #0
 8014752:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8014754:	69bb      	ldr	r3, [r7, #24]
 8014756:	f003 0301 	and.w	r3, r3, #1
 801475a:	2b00      	cmp	r3, #0
 801475c:	d002      	beq.n	8014764 <osMutexNew+0x3a>
      rmtx = 1U;
 801475e:	2301      	movs	r3, #1
 8014760:	617b      	str	r3, [r7, #20]
 8014762:	e001      	b.n	8014768 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8014764:	2300      	movs	r3, #0
 8014766:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8014768:	69bb      	ldr	r3, [r7, #24]
 801476a:	f003 0308 	and.w	r3, r3, #8
 801476e:	2b00      	cmp	r3, #0
 8014770:	d15c      	bne.n	801482c <osMutexNew+0x102>
      mem = -1;
 8014772:	f04f 33ff 	mov.w	r3, #4294967295
 8014776:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8014778:	687b      	ldr	r3, [r7, #4]
 801477a:	2b00      	cmp	r3, #0
 801477c:	d015      	beq.n	80147aa <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 801477e:	687b      	ldr	r3, [r7, #4]
 8014780:	689b      	ldr	r3, [r3, #8]
 8014782:	2b00      	cmp	r3, #0
 8014784:	d006      	beq.n	8014794 <osMutexNew+0x6a>
 8014786:	687b      	ldr	r3, [r7, #4]
 8014788:	68db      	ldr	r3, [r3, #12]
 801478a:	2b4f      	cmp	r3, #79	; 0x4f
 801478c:	d902      	bls.n	8014794 <osMutexNew+0x6a>
          mem = 1;
 801478e:	2301      	movs	r3, #1
 8014790:	613b      	str	r3, [r7, #16]
 8014792:	e00c      	b.n	80147ae <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8014794:	687b      	ldr	r3, [r7, #4]
 8014796:	689b      	ldr	r3, [r3, #8]
 8014798:	2b00      	cmp	r3, #0
 801479a:	d108      	bne.n	80147ae <osMutexNew+0x84>
 801479c:	687b      	ldr	r3, [r7, #4]
 801479e:	68db      	ldr	r3, [r3, #12]
 80147a0:	2b00      	cmp	r3, #0
 80147a2:	d104      	bne.n	80147ae <osMutexNew+0x84>
            mem = 0;
 80147a4:	2300      	movs	r3, #0
 80147a6:	613b      	str	r3, [r7, #16]
 80147a8:	e001      	b.n	80147ae <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 80147aa:	2300      	movs	r3, #0
 80147ac:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 80147ae:	693b      	ldr	r3, [r7, #16]
 80147b0:	2b01      	cmp	r3, #1
 80147b2:	d112      	bne.n	80147da <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80147b4:	697b      	ldr	r3, [r7, #20]
 80147b6:	2b00      	cmp	r3, #0
 80147b8:	d007      	beq.n	80147ca <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80147ba:	687b      	ldr	r3, [r7, #4]
 80147bc:	689b      	ldr	r3, [r3, #8]
 80147be:	4619      	mov	r1, r3
 80147c0:	2004      	movs	r0, #4
 80147c2:	f001 f9a0 	bl	8015b06 <xQueueCreateMutexStatic>
 80147c6:	61f8      	str	r0, [r7, #28]
 80147c8:	e016      	b.n	80147f8 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80147ca:	687b      	ldr	r3, [r7, #4]
 80147cc:	689b      	ldr	r3, [r3, #8]
 80147ce:	4619      	mov	r1, r3
 80147d0:	2001      	movs	r0, #1
 80147d2:	f001 f998 	bl	8015b06 <xQueueCreateMutexStatic>
 80147d6:	61f8      	str	r0, [r7, #28]
 80147d8:	e00e      	b.n	80147f8 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80147da:	693b      	ldr	r3, [r7, #16]
 80147dc:	2b00      	cmp	r3, #0
 80147de:	d10b      	bne.n	80147f8 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80147e0:	697b      	ldr	r3, [r7, #20]
 80147e2:	2b00      	cmp	r3, #0
 80147e4:	d004      	beq.n	80147f0 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80147e6:	2004      	movs	r0, #4
 80147e8:	f001 f975 	bl	8015ad6 <xQueueCreateMutex>
 80147ec:	61f8      	str	r0, [r7, #28]
 80147ee:	e003      	b.n	80147f8 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80147f0:	2001      	movs	r0, #1
 80147f2:	f001 f970 	bl	8015ad6 <xQueueCreateMutex>
 80147f6:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80147f8:	69fb      	ldr	r3, [r7, #28]
 80147fa:	2b00      	cmp	r3, #0
 80147fc:	d00c      	beq.n	8014818 <osMutexNew+0xee>
        if (attr != NULL) {
 80147fe:	687b      	ldr	r3, [r7, #4]
 8014800:	2b00      	cmp	r3, #0
 8014802:	d003      	beq.n	801480c <osMutexNew+0xe2>
          name = attr->name;
 8014804:	687b      	ldr	r3, [r7, #4]
 8014806:	681b      	ldr	r3, [r3, #0]
 8014808:	60fb      	str	r3, [r7, #12]
 801480a:	e001      	b.n	8014810 <osMutexNew+0xe6>
        } else {
          name = NULL;
 801480c:	2300      	movs	r3, #0
 801480e:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8014810:	68f9      	ldr	r1, [r7, #12]
 8014812:	69f8      	ldr	r0, [r7, #28]
 8014814:	f002 f844 	bl	80168a0 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8014818:	69fb      	ldr	r3, [r7, #28]
 801481a:	2b00      	cmp	r3, #0
 801481c:	d006      	beq.n	801482c <osMutexNew+0x102>
 801481e:	697b      	ldr	r3, [r7, #20]
 8014820:	2b00      	cmp	r3, #0
 8014822:	d003      	beq.n	801482c <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8014824:	69fb      	ldr	r3, [r7, #28]
 8014826:	f043 0301 	orr.w	r3, r3, #1
 801482a:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 801482c:	69fb      	ldr	r3, [r7, #28]
}
 801482e:	4618      	mov	r0, r3
 8014830:	3720      	adds	r7, #32
 8014832:	46bd      	mov	sp, r7
 8014834:	bd80      	pop	{r7, pc}

08014836 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8014836:	b580      	push	{r7, lr}
 8014838:	b086      	sub	sp, #24
 801483a:	af00      	add	r7, sp, #0
 801483c:	6078      	str	r0, [r7, #4]
 801483e:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8014840:	687b      	ldr	r3, [r7, #4]
 8014842:	f023 0301 	bic.w	r3, r3, #1
 8014846:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8014848:	687b      	ldr	r3, [r7, #4]
 801484a:	f003 0301 	and.w	r3, r3, #1
 801484e:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8014850:	2300      	movs	r3, #0
 8014852:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014854:	f3ef 8305 	mrs	r3, IPSR
 8014858:	60bb      	str	r3, [r7, #8]
  return(result);
 801485a:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 801485c:	2b00      	cmp	r3, #0
 801485e:	d003      	beq.n	8014868 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8014860:	f06f 0305 	mvn.w	r3, #5
 8014864:	617b      	str	r3, [r7, #20]
 8014866:	e02c      	b.n	80148c2 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8014868:	693b      	ldr	r3, [r7, #16]
 801486a:	2b00      	cmp	r3, #0
 801486c:	d103      	bne.n	8014876 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 801486e:	f06f 0303 	mvn.w	r3, #3
 8014872:	617b      	str	r3, [r7, #20]
 8014874:	e025      	b.n	80148c2 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8014876:	68fb      	ldr	r3, [r7, #12]
 8014878:	2b00      	cmp	r3, #0
 801487a:	d011      	beq.n	80148a0 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 801487c:	6839      	ldr	r1, [r7, #0]
 801487e:	6938      	ldr	r0, [r7, #16]
 8014880:	f001 f990 	bl	8015ba4 <xQueueTakeMutexRecursive>
 8014884:	4603      	mov	r3, r0
 8014886:	2b01      	cmp	r3, #1
 8014888:	d01b      	beq.n	80148c2 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 801488a:	683b      	ldr	r3, [r7, #0]
 801488c:	2b00      	cmp	r3, #0
 801488e:	d003      	beq.n	8014898 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8014890:	f06f 0301 	mvn.w	r3, #1
 8014894:	617b      	str	r3, [r7, #20]
 8014896:	e014      	b.n	80148c2 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8014898:	f06f 0302 	mvn.w	r3, #2
 801489c:	617b      	str	r3, [r7, #20]
 801489e:	e010      	b.n	80148c2 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80148a0:	6839      	ldr	r1, [r7, #0]
 80148a2:	6938      	ldr	r0, [r7, #16]
 80148a4:	f001 fd24 	bl	80162f0 <xQueueSemaphoreTake>
 80148a8:	4603      	mov	r3, r0
 80148aa:	2b01      	cmp	r3, #1
 80148ac:	d009      	beq.n	80148c2 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80148ae:	683b      	ldr	r3, [r7, #0]
 80148b0:	2b00      	cmp	r3, #0
 80148b2:	d003      	beq.n	80148bc <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 80148b4:	f06f 0301 	mvn.w	r3, #1
 80148b8:	617b      	str	r3, [r7, #20]
 80148ba:	e002      	b.n	80148c2 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80148bc:	f06f 0302 	mvn.w	r3, #2
 80148c0:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 80148c2:	697b      	ldr	r3, [r7, #20]
}
 80148c4:	4618      	mov	r0, r3
 80148c6:	3718      	adds	r7, #24
 80148c8:	46bd      	mov	sp, r7
 80148ca:	bd80      	pop	{r7, pc}

080148cc <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80148cc:	b580      	push	{r7, lr}
 80148ce:	b086      	sub	sp, #24
 80148d0:	af00      	add	r7, sp, #0
 80148d2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80148d4:	687b      	ldr	r3, [r7, #4]
 80148d6:	f023 0301 	bic.w	r3, r3, #1
 80148da:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80148dc:	687b      	ldr	r3, [r7, #4]
 80148de:	f003 0301 	and.w	r3, r3, #1
 80148e2:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80148e4:	2300      	movs	r3, #0
 80148e6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80148e8:	f3ef 8305 	mrs	r3, IPSR
 80148ec:	60bb      	str	r3, [r7, #8]
  return(result);
 80148ee:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80148f0:	2b00      	cmp	r3, #0
 80148f2:	d003      	beq.n	80148fc <osMutexRelease+0x30>
    stat = osErrorISR;
 80148f4:	f06f 0305 	mvn.w	r3, #5
 80148f8:	617b      	str	r3, [r7, #20]
 80148fa:	e01f      	b.n	801493c <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 80148fc:	693b      	ldr	r3, [r7, #16]
 80148fe:	2b00      	cmp	r3, #0
 8014900:	d103      	bne.n	801490a <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8014902:	f06f 0303 	mvn.w	r3, #3
 8014906:	617b      	str	r3, [r7, #20]
 8014908:	e018      	b.n	801493c <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 801490a:	68fb      	ldr	r3, [r7, #12]
 801490c:	2b00      	cmp	r3, #0
 801490e:	d009      	beq.n	8014924 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8014910:	6938      	ldr	r0, [r7, #16]
 8014912:	f001 f913 	bl	8015b3c <xQueueGiveMutexRecursive>
 8014916:	4603      	mov	r3, r0
 8014918:	2b01      	cmp	r3, #1
 801491a:	d00f      	beq.n	801493c <osMutexRelease+0x70>
        stat = osErrorResource;
 801491c:	f06f 0302 	mvn.w	r3, #2
 8014920:	617b      	str	r3, [r7, #20]
 8014922:	e00b      	b.n	801493c <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8014924:	2300      	movs	r3, #0
 8014926:	2200      	movs	r2, #0
 8014928:	2100      	movs	r1, #0
 801492a:	6938      	ldr	r0, [r7, #16]
 801492c:	f001 f9da 	bl	8015ce4 <xQueueGenericSend>
 8014930:	4603      	mov	r3, r0
 8014932:	2b01      	cmp	r3, #1
 8014934:	d002      	beq.n	801493c <osMutexRelease+0x70>
        stat = osErrorResource;
 8014936:	f06f 0302 	mvn.w	r3, #2
 801493a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 801493c:	697b      	ldr	r3, [r7, #20]
}
 801493e:	4618      	mov	r0, r3
 8014940:	3718      	adds	r7, #24
 8014942:	46bd      	mov	sp, r7
 8014944:	bd80      	pop	{r7, pc}

08014946 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8014946:	b580      	push	{r7, lr}
 8014948:	b08a      	sub	sp, #40	; 0x28
 801494a:	af02      	add	r7, sp, #8
 801494c:	60f8      	str	r0, [r7, #12]
 801494e:	60b9      	str	r1, [r7, #8]
 8014950:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8014952:	2300      	movs	r3, #0
 8014954:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014956:	f3ef 8305 	mrs	r3, IPSR
 801495a:	613b      	str	r3, [r7, #16]
  return(result);
 801495c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 801495e:	2b00      	cmp	r3, #0
 8014960:	d175      	bne.n	8014a4e <osSemaphoreNew+0x108>
 8014962:	68fb      	ldr	r3, [r7, #12]
 8014964:	2b00      	cmp	r3, #0
 8014966:	d072      	beq.n	8014a4e <osSemaphoreNew+0x108>
 8014968:	68ba      	ldr	r2, [r7, #8]
 801496a:	68fb      	ldr	r3, [r7, #12]
 801496c:	429a      	cmp	r2, r3
 801496e:	d86e      	bhi.n	8014a4e <osSemaphoreNew+0x108>
    mem = -1;
 8014970:	f04f 33ff 	mov.w	r3, #4294967295
 8014974:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8014976:	687b      	ldr	r3, [r7, #4]
 8014978:	2b00      	cmp	r3, #0
 801497a:	d015      	beq.n	80149a8 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 801497c:	687b      	ldr	r3, [r7, #4]
 801497e:	689b      	ldr	r3, [r3, #8]
 8014980:	2b00      	cmp	r3, #0
 8014982:	d006      	beq.n	8014992 <osSemaphoreNew+0x4c>
 8014984:	687b      	ldr	r3, [r7, #4]
 8014986:	68db      	ldr	r3, [r3, #12]
 8014988:	2b4f      	cmp	r3, #79	; 0x4f
 801498a:	d902      	bls.n	8014992 <osSemaphoreNew+0x4c>
        mem = 1;
 801498c:	2301      	movs	r3, #1
 801498e:	61bb      	str	r3, [r7, #24]
 8014990:	e00c      	b.n	80149ac <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8014992:	687b      	ldr	r3, [r7, #4]
 8014994:	689b      	ldr	r3, [r3, #8]
 8014996:	2b00      	cmp	r3, #0
 8014998:	d108      	bne.n	80149ac <osSemaphoreNew+0x66>
 801499a:	687b      	ldr	r3, [r7, #4]
 801499c:	68db      	ldr	r3, [r3, #12]
 801499e:	2b00      	cmp	r3, #0
 80149a0:	d104      	bne.n	80149ac <osSemaphoreNew+0x66>
          mem = 0;
 80149a2:	2300      	movs	r3, #0
 80149a4:	61bb      	str	r3, [r7, #24]
 80149a6:	e001      	b.n	80149ac <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80149a8:	2300      	movs	r3, #0
 80149aa:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80149ac:	69bb      	ldr	r3, [r7, #24]
 80149ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80149b2:	d04c      	beq.n	8014a4e <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80149b4:	68fb      	ldr	r3, [r7, #12]
 80149b6:	2b01      	cmp	r3, #1
 80149b8:	d128      	bne.n	8014a0c <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80149ba:	69bb      	ldr	r3, [r7, #24]
 80149bc:	2b01      	cmp	r3, #1
 80149be:	d10a      	bne.n	80149d6 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80149c0:	687b      	ldr	r3, [r7, #4]
 80149c2:	689b      	ldr	r3, [r3, #8]
 80149c4:	2203      	movs	r2, #3
 80149c6:	9200      	str	r2, [sp, #0]
 80149c8:	2200      	movs	r2, #0
 80149ca:	2100      	movs	r1, #0
 80149cc:	2001      	movs	r0, #1
 80149ce:	f000 ff93 	bl	80158f8 <xQueueGenericCreateStatic>
 80149d2:	61f8      	str	r0, [r7, #28]
 80149d4:	e005      	b.n	80149e2 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80149d6:	2203      	movs	r2, #3
 80149d8:	2100      	movs	r1, #0
 80149da:	2001      	movs	r0, #1
 80149dc:	f001 f804 	bl	80159e8 <xQueueGenericCreate>
 80149e0:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80149e2:	69fb      	ldr	r3, [r7, #28]
 80149e4:	2b00      	cmp	r3, #0
 80149e6:	d022      	beq.n	8014a2e <osSemaphoreNew+0xe8>
 80149e8:	68bb      	ldr	r3, [r7, #8]
 80149ea:	2b00      	cmp	r3, #0
 80149ec:	d01f      	beq.n	8014a2e <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80149ee:	2300      	movs	r3, #0
 80149f0:	2200      	movs	r2, #0
 80149f2:	2100      	movs	r1, #0
 80149f4:	69f8      	ldr	r0, [r7, #28]
 80149f6:	f001 f975 	bl	8015ce4 <xQueueGenericSend>
 80149fa:	4603      	mov	r3, r0
 80149fc:	2b01      	cmp	r3, #1
 80149fe:	d016      	beq.n	8014a2e <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8014a00:	69f8      	ldr	r0, [r7, #28]
 8014a02:	f001 fe01 	bl	8016608 <vQueueDelete>
            hSemaphore = NULL;
 8014a06:	2300      	movs	r3, #0
 8014a08:	61fb      	str	r3, [r7, #28]
 8014a0a:	e010      	b.n	8014a2e <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8014a0c:	69bb      	ldr	r3, [r7, #24]
 8014a0e:	2b01      	cmp	r3, #1
 8014a10:	d108      	bne.n	8014a24 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8014a12:	687b      	ldr	r3, [r7, #4]
 8014a14:	689b      	ldr	r3, [r3, #8]
 8014a16:	461a      	mov	r2, r3
 8014a18:	68b9      	ldr	r1, [r7, #8]
 8014a1a:	68f8      	ldr	r0, [r7, #12]
 8014a1c:	f001 f8f8 	bl	8015c10 <xQueueCreateCountingSemaphoreStatic>
 8014a20:	61f8      	str	r0, [r7, #28]
 8014a22:	e004      	b.n	8014a2e <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8014a24:	68b9      	ldr	r1, [r7, #8]
 8014a26:	68f8      	ldr	r0, [r7, #12]
 8014a28:	f001 f929 	bl	8015c7e <xQueueCreateCountingSemaphore>
 8014a2c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8014a2e:	69fb      	ldr	r3, [r7, #28]
 8014a30:	2b00      	cmp	r3, #0
 8014a32:	d00c      	beq.n	8014a4e <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8014a34:	687b      	ldr	r3, [r7, #4]
 8014a36:	2b00      	cmp	r3, #0
 8014a38:	d003      	beq.n	8014a42 <osSemaphoreNew+0xfc>
          name = attr->name;
 8014a3a:	687b      	ldr	r3, [r7, #4]
 8014a3c:	681b      	ldr	r3, [r3, #0]
 8014a3e:	617b      	str	r3, [r7, #20]
 8014a40:	e001      	b.n	8014a46 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8014a42:	2300      	movs	r3, #0
 8014a44:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8014a46:	6979      	ldr	r1, [r7, #20]
 8014a48:	69f8      	ldr	r0, [r7, #28]
 8014a4a:	f001 ff29 	bl	80168a0 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8014a4e:	69fb      	ldr	r3, [r7, #28]
}
 8014a50:	4618      	mov	r0, r3
 8014a52:	3720      	adds	r7, #32
 8014a54:	46bd      	mov	sp, r7
 8014a56:	bd80      	pop	{r7, pc}

08014a58 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8014a58:	b580      	push	{r7, lr}
 8014a5a:	b086      	sub	sp, #24
 8014a5c:	af00      	add	r7, sp, #0
 8014a5e:	6078      	str	r0, [r7, #4]
 8014a60:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8014a62:	687b      	ldr	r3, [r7, #4]
 8014a64:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8014a66:	2300      	movs	r3, #0
 8014a68:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8014a6a:	693b      	ldr	r3, [r7, #16]
 8014a6c:	2b00      	cmp	r3, #0
 8014a6e:	d103      	bne.n	8014a78 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8014a70:	f06f 0303 	mvn.w	r3, #3
 8014a74:	617b      	str	r3, [r7, #20]
 8014a76:	e039      	b.n	8014aec <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014a78:	f3ef 8305 	mrs	r3, IPSR
 8014a7c:	60fb      	str	r3, [r7, #12]
  return(result);
 8014a7e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8014a80:	2b00      	cmp	r3, #0
 8014a82:	d022      	beq.n	8014aca <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8014a84:	683b      	ldr	r3, [r7, #0]
 8014a86:	2b00      	cmp	r3, #0
 8014a88:	d003      	beq.n	8014a92 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8014a8a:	f06f 0303 	mvn.w	r3, #3
 8014a8e:	617b      	str	r3, [r7, #20]
 8014a90:	e02c      	b.n	8014aec <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8014a92:	2300      	movs	r3, #0
 8014a94:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8014a96:	f107 0308 	add.w	r3, r7, #8
 8014a9a:	461a      	mov	r2, r3
 8014a9c:	2100      	movs	r1, #0
 8014a9e:	6938      	ldr	r0, [r7, #16]
 8014aa0:	f001 fd32 	bl	8016508 <xQueueReceiveFromISR>
 8014aa4:	4603      	mov	r3, r0
 8014aa6:	2b01      	cmp	r3, #1
 8014aa8:	d003      	beq.n	8014ab2 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8014aaa:	f06f 0302 	mvn.w	r3, #2
 8014aae:	617b      	str	r3, [r7, #20]
 8014ab0:	e01c      	b.n	8014aec <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8014ab2:	68bb      	ldr	r3, [r7, #8]
 8014ab4:	2b00      	cmp	r3, #0
 8014ab6:	d019      	beq.n	8014aec <osSemaphoreAcquire+0x94>
 8014ab8:	4b0f      	ldr	r3, [pc, #60]	; (8014af8 <osSemaphoreAcquire+0xa0>)
 8014aba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014abe:	601a      	str	r2, [r3, #0]
 8014ac0:	f3bf 8f4f 	dsb	sy
 8014ac4:	f3bf 8f6f 	isb	sy
 8014ac8:	e010      	b.n	8014aec <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8014aca:	6839      	ldr	r1, [r7, #0]
 8014acc:	6938      	ldr	r0, [r7, #16]
 8014ace:	f001 fc0f 	bl	80162f0 <xQueueSemaphoreTake>
 8014ad2:	4603      	mov	r3, r0
 8014ad4:	2b01      	cmp	r3, #1
 8014ad6:	d009      	beq.n	8014aec <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8014ad8:	683b      	ldr	r3, [r7, #0]
 8014ada:	2b00      	cmp	r3, #0
 8014adc:	d003      	beq.n	8014ae6 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8014ade:	f06f 0301 	mvn.w	r3, #1
 8014ae2:	617b      	str	r3, [r7, #20]
 8014ae4:	e002      	b.n	8014aec <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8014ae6:	f06f 0302 	mvn.w	r3, #2
 8014aea:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8014aec:	697b      	ldr	r3, [r7, #20]
}
 8014aee:	4618      	mov	r0, r3
 8014af0:	3718      	adds	r7, #24
 8014af2:	46bd      	mov	sp, r7
 8014af4:	bd80      	pop	{r7, pc}
 8014af6:	bf00      	nop
 8014af8:	e000ed04 	.word	0xe000ed04

08014afc <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8014afc:	b580      	push	{r7, lr}
 8014afe:	b086      	sub	sp, #24
 8014b00:	af00      	add	r7, sp, #0
 8014b02:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8014b04:	687b      	ldr	r3, [r7, #4]
 8014b06:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8014b08:	2300      	movs	r3, #0
 8014b0a:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8014b0c:	693b      	ldr	r3, [r7, #16]
 8014b0e:	2b00      	cmp	r3, #0
 8014b10:	d103      	bne.n	8014b1a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8014b12:	f06f 0303 	mvn.w	r3, #3
 8014b16:	617b      	str	r3, [r7, #20]
 8014b18:	e02c      	b.n	8014b74 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014b1a:	f3ef 8305 	mrs	r3, IPSR
 8014b1e:	60fb      	str	r3, [r7, #12]
  return(result);
 8014b20:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8014b22:	2b00      	cmp	r3, #0
 8014b24:	d01a      	beq.n	8014b5c <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8014b26:	2300      	movs	r3, #0
 8014b28:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8014b2a:	f107 0308 	add.w	r3, r7, #8
 8014b2e:	4619      	mov	r1, r3
 8014b30:	6938      	ldr	r0, [r7, #16]
 8014b32:	f001 fa70 	bl	8016016 <xQueueGiveFromISR>
 8014b36:	4603      	mov	r3, r0
 8014b38:	2b01      	cmp	r3, #1
 8014b3a:	d003      	beq.n	8014b44 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8014b3c:	f06f 0302 	mvn.w	r3, #2
 8014b40:	617b      	str	r3, [r7, #20]
 8014b42:	e017      	b.n	8014b74 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8014b44:	68bb      	ldr	r3, [r7, #8]
 8014b46:	2b00      	cmp	r3, #0
 8014b48:	d014      	beq.n	8014b74 <osSemaphoreRelease+0x78>
 8014b4a:	4b0d      	ldr	r3, [pc, #52]	; (8014b80 <osSemaphoreRelease+0x84>)
 8014b4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014b50:	601a      	str	r2, [r3, #0]
 8014b52:	f3bf 8f4f 	dsb	sy
 8014b56:	f3bf 8f6f 	isb	sy
 8014b5a:	e00b      	b.n	8014b74 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8014b5c:	2300      	movs	r3, #0
 8014b5e:	2200      	movs	r2, #0
 8014b60:	2100      	movs	r1, #0
 8014b62:	6938      	ldr	r0, [r7, #16]
 8014b64:	f001 f8be 	bl	8015ce4 <xQueueGenericSend>
 8014b68:	4603      	mov	r3, r0
 8014b6a:	2b01      	cmp	r3, #1
 8014b6c:	d002      	beq.n	8014b74 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8014b6e:	f06f 0302 	mvn.w	r3, #2
 8014b72:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8014b74:	697b      	ldr	r3, [r7, #20]
}
 8014b76:	4618      	mov	r0, r3
 8014b78:	3718      	adds	r7, #24
 8014b7a:	46bd      	mov	sp, r7
 8014b7c:	bd80      	pop	{r7, pc}
 8014b7e:	bf00      	nop
 8014b80:	e000ed04 	.word	0xe000ed04

08014b84 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8014b84:	b580      	push	{r7, lr}
 8014b86:	b08a      	sub	sp, #40	; 0x28
 8014b88:	af02      	add	r7, sp, #8
 8014b8a:	60f8      	str	r0, [r7, #12]
 8014b8c:	60b9      	str	r1, [r7, #8]
 8014b8e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8014b90:	2300      	movs	r3, #0
 8014b92:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014b94:	f3ef 8305 	mrs	r3, IPSR
 8014b98:	613b      	str	r3, [r7, #16]
  return(result);
 8014b9a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8014b9c:	2b00      	cmp	r3, #0
 8014b9e:	d15f      	bne.n	8014c60 <osMessageQueueNew+0xdc>
 8014ba0:	68fb      	ldr	r3, [r7, #12]
 8014ba2:	2b00      	cmp	r3, #0
 8014ba4:	d05c      	beq.n	8014c60 <osMessageQueueNew+0xdc>
 8014ba6:	68bb      	ldr	r3, [r7, #8]
 8014ba8:	2b00      	cmp	r3, #0
 8014baa:	d059      	beq.n	8014c60 <osMessageQueueNew+0xdc>
    mem = -1;
 8014bac:	f04f 33ff 	mov.w	r3, #4294967295
 8014bb0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8014bb2:	687b      	ldr	r3, [r7, #4]
 8014bb4:	2b00      	cmp	r3, #0
 8014bb6:	d029      	beq.n	8014c0c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8014bb8:	687b      	ldr	r3, [r7, #4]
 8014bba:	689b      	ldr	r3, [r3, #8]
 8014bbc:	2b00      	cmp	r3, #0
 8014bbe:	d012      	beq.n	8014be6 <osMessageQueueNew+0x62>
 8014bc0:	687b      	ldr	r3, [r7, #4]
 8014bc2:	68db      	ldr	r3, [r3, #12]
 8014bc4:	2b4f      	cmp	r3, #79	; 0x4f
 8014bc6:	d90e      	bls.n	8014be6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8014bc8:	687b      	ldr	r3, [r7, #4]
 8014bca:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8014bcc:	2b00      	cmp	r3, #0
 8014bce:	d00a      	beq.n	8014be6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8014bd0:	687b      	ldr	r3, [r7, #4]
 8014bd2:	695a      	ldr	r2, [r3, #20]
 8014bd4:	68fb      	ldr	r3, [r7, #12]
 8014bd6:	68b9      	ldr	r1, [r7, #8]
 8014bd8:	fb01 f303 	mul.w	r3, r1, r3
 8014bdc:	429a      	cmp	r2, r3
 8014bde:	d302      	bcc.n	8014be6 <osMessageQueueNew+0x62>
        mem = 1;
 8014be0:	2301      	movs	r3, #1
 8014be2:	61bb      	str	r3, [r7, #24]
 8014be4:	e014      	b.n	8014c10 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8014be6:	687b      	ldr	r3, [r7, #4]
 8014be8:	689b      	ldr	r3, [r3, #8]
 8014bea:	2b00      	cmp	r3, #0
 8014bec:	d110      	bne.n	8014c10 <osMessageQueueNew+0x8c>
 8014bee:	687b      	ldr	r3, [r7, #4]
 8014bf0:	68db      	ldr	r3, [r3, #12]
 8014bf2:	2b00      	cmp	r3, #0
 8014bf4:	d10c      	bne.n	8014c10 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8014bf6:	687b      	ldr	r3, [r7, #4]
 8014bf8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8014bfa:	2b00      	cmp	r3, #0
 8014bfc:	d108      	bne.n	8014c10 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8014bfe:	687b      	ldr	r3, [r7, #4]
 8014c00:	695b      	ldr	r3, [r3, #20]
 8014c02:	2b00      	cmp	r3, #0
 8014c04:	d104      	bne.n	8014c10 <osMessageQueueNew+0x8c>
          mem = 0;
 8014c06:	2300      	movs	r3, #0
 8014c08:	61bb      	str	r3, [r7, #24]
 8014c0a:	e001      	b.n	8014c10 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8014c0c:	2300      	movs	r3, #0
 8014c0e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8014c10:	69bb      	ldr	r3, [r7, #24]
 8014c12:	2b01      	cmp	r3, #1
 8014c14:	d10b      	bne.n	8014c2e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8014c16:	687b      	ldr	r3, [r7, #4]
 8014c18:	691a      	ldr	r2, [r3, #16]
 8014c1a:	687b      	ldr	r3, [r7, #4]
 8014c1c:	689b      	ldr	r3, [r3, #8]
 8014c1e:	2100      	movs	r1, #0
 8014c20:	9100      	str	r1, [sp, #0]
 8014c22:	68b9      	ldr	r1, [r7, #8]
 8014c24:	68f8      	ldr	r0, [r7, #12]
 8014c26:	f000 fe67 	bl	80158f8 <xQueueGenericCreateStatic>
 8014c2a:	61f8      	str	r0, [r7, #28]
 8014c2c:	e008      	b.n	8014c40 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8014c2e:	69bb      	ldr	r3, [r7, #24]
 8014c30:	2b00      	cmp	r3, #0
 8014c32:	d105      	bne.n	8014c40 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8014c34:	2200      	movs	r2, #0
 8014c36:	68b9      	ldr	r1, [r7, #8]
 8014c38:	68f8      	ldr	r0, [r7, #12]
 8014c3a:	f000 fed5 	bl	80159e8 <xQueueGenericCreate>
 8014c3e:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8014c40:	69fb      	ldr	r3, [r7, #28]
 8014c42:	2b00      	cmp	r3, #0
 8014c44:	d00c      	beq.n	8014c60 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8014c46:	687b      	ldr	r3, [r7, #4]
 8014c48:	2b00      	cmp	r3, #0
 8014c4a:	d003      	beq.n	8014c54 <osMessageQueueNew+0xd0>
        name = attr->name;
 8014c4c:	687b      	ldr	r3, [r7, #4]
 8014c4e:	681b      	ldr	r3, [r3, #0]
 8014c50:	617b      	str	r3, [r7, #20]
 8014c52:	e001      	b.n	8014c58 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8014c54:	2300      	movs	r3, #0
 8014c56:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8014c58:	6979      	ldr	r1, [r7, #20]
 8014c5a:	69f8      	ldr	r0, [r7, #28]
 8014c5c:	f001 fe20 	bl	80168a0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8014c60:	69fb      	ldr	r3, [r7, #28]
}
 8014c62:	4618      	mov	r0, r3
 8014c64:	3720      	adds	r7, #32
 8014c66:	46bd      	mov	sp, r7
 8014c68:	bd80      	pop	{r7, pc}
	...

08014c6c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8014c6c:	b580      	push	{r7, lr}
 8014c6e:	b088      	sub	sp, #32
 8014c70:	af00      	add	r7, sp, #0
 8014c72:	60f8      	str	r0, [r7, #12]
 8014c74:	60b9      	str	r1, [r7, #8]
 8014c76:	603b      	str	r3, [r7, #0]
 8014c78:	4613      	mov	r3, r2
 8014c7a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8014c7c:	68fb      	ldr	r3, [r7, #12]
 8014c7e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8014c80:	2300      	movs	r3, #0
 8014c82:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014c84:	f3ef 8305 	mrs	r3, IPSR
 8014c88:	617b      	str	r3, [r7, #20]
  return(result);
 8014c8a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8014c8c:	2b00      	cmp	r3, #0
 8014c8e:	d028      	beq.n	8014ce2 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8014c90:	69bb      	ldr	r3, [r7, #24]
 8014c92:	2b00      	cmp	r3, #0
 8014c94:	d005      	beq.n	8014ca2 <osMessageQueuePut+0x36>
 8014c96:	68bb      	ldr	r3, [r7, #8]
 8014c98:	2b00      	cmp	r3, #0
 8014c9a:	d002      	beq.n	8014ca2 <osMessageQueuePut+0x36>
 8014c9c:	683b      	ldr	r3, [r7, #0]
 8014c9e:	2b00      	cmp	r3, #0
 8014ca0:	d003      	beq.n	8014caa <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8014ca2:	f06f 0303 	mvn.w	r3, #3
 8014ca6:	61fb      	str	r3, [r7, #28]
 8014ca8:	e038      	b.n	8014d1c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8014caa:	2300      	movs	r3, #0
 8014cac:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8014cae:	f107 0210 	add.w	r2, r7, #16
 8014cb2:	2300      	movs	r3, #0
 8014cb4:	68b9      	ldr	r1, [r7, #8]
 8014cb6:	69b8      	ldr	r0, [r7, #24]
 8014cb8:	f001 f912 	bl	8015ee0 <xQueueGenericSendFromISR>
 8014cbc:	4603      	mov	r3, r0
 8014cbe:	2b01      	cmp	r3, #1
 8014cc0:	d003      	beq.n	8014cca <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8014cc2:	f06f 0302 	mvn.w	r3, #2
 8014cc6:	61fb      	str	r3, [r7, #28]
 8014cc8:	e028      	b.n	8014d1c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8014cca:	693b      	ldr	r3, [r7, #16]
 8014ccc:	2b00      	cmp	r3, #0
 8014cce:	d025      	beq.n	8014d1c <osMessageQueuePut+0xb0>
 8014cd0:	4b15      	ldr	r3, [pc, #84]	; (8014d28 <osMessageQueuePut+0xbc>)
 8014cd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014cd6:	601a      	str	r2, [r3, #0]
 8014cd8:	f3bf 8f4f 	dsb	sy
 8014cdc:	f3bf 8f6f 	isb	sy
 8014ce0:	e01c      	b.n	8014d1c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8014ce2:	69bb      	ldr	r3, [r7, #24]
 8014ce4:	2b00      	cmp	r3, #0
 8014ce6:	d002      	beq.n	8014cee <osMessageQueuePut+0x82>
 8014ce8:	68bb      	ldr	r3, [r7, #8]
 8014cea:	2b00      	cmp	r3, #0
 8014cec:	d103      	bne.n	8014cf6 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8014cee:	f06f 0303 	mvn.w	r3, #3
 8014cf2:	61fb      	str	r3, [r7, #28]
 8014cf4:	e012      	b.n	8014d1c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8014cf6:	2300      	movs	r3, #0
 8014cf8:	683a      	ldr	r2, [r7, #0]
 8014cfa:	68b9      	ldr	r1, [r7, #8]
 8014cfc:	69b8      	ldr	r0, [r7, #24]
 8014cfe:	f000 fff1 	bl	8015ce4 <xQueueGenericSend>
 8014d02:	4603      	mov	r3, r0
 8014d04:	2b01      	cmp	r3, #1
 8014d06:	d009      	beq.n	8014d1c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8014d08:	683b      	ldr	r3, [r7, #0]
 8014d0a:	2b00      	cmp	r3, #0
 8014d0c:	d003      	beq.n	8014d16 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8014d0e:	f06f 0301 	mvn.w	r3, #1
 8014d12:	61fb      	str	r3, [r7, #28]
 8014d14:	e002      	b.n	8014d1c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8014d16:	f06f 0302 	mvn.w	r3, #2
 8014d1a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8014d1c:	69fb      	ldr	r3, [r7, #28]
}
 8014d1e:	4618      	mov	r0, r3
 8014d20:	3720      	adds	r7, #32
 8014d22:	46bd      	mov	sp, r7
 8014d24:	bd80      	pop	{r7, pc}
 8014d26:	bf00      	nop
 8014d28:	e000ed04 	.word	0xe000ed04

08014d2c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8014d2c:	b580      	push	{r7, lr}
 8014d2e:	b088      	sub	sp, #32
 8014d30:	af00      	add	r7, sp, #0
 8014d32:	60f8      	str	r0, [r7, #12]
 8014d34:	60b9      	str	r1, [r7, #8]
 8014d36:	607a      	str	r2, [r7, #4]
 8014d38:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8014d3a:	68fb      	ldr	r3, [r7, #12]
 8014d3c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8014d3e:	2300      	movs	r3, #0
 8014d40:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014d42:	f3ef 8305 	mrs	r3, IPSR
 8014d46:	617b      	str	r3, [r7, #20]
  return(result);
 8014d48:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8014d4a:	2b00      	cmp	r3, #0
 8014d4c:	d028      	beq.n	8014da0 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8014d4e:	69bb      	ldr	r3, [r7, #24]
 8014d50:	2b00      	cmp	r3, #0
 8014d52:	d005      	beq.n	8014d60 <osMessageQueueGet+0x34>
 8014d54:	68bb      	ldr	r3, [r7, #8]
 8014d56:	2b00      	cmp	r3, #0
 8014d58:	d002      	beq.n	8014d60 <osMessageQueueGet+0x34>
 8014d5a:	683b      	ldr	r3, [r7, #0]
 8014d5c:	2b00      	cmp	r3, #0
 8014d5e:	d003      	beq.n	8014d68 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8014d60:	f06f 0303 	mvn.w	r3, #3
 8014d64:	61fb      	str	r3, [r7, #28]
 8014d66:	e037      	b.n	8014dd8 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8014d68:	2300      	movs	r3, #0
 8014d6a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8014d6c:	f107 0310 	add.w	r3, r7, #16
 8014d70:	461a      	mov	r2, r3
 8014d72:	68b9      	ldr	r1, [r7, #8]
 8014d74:	69b8      	ldr	r0, [r7, #24]
 8014d76:	f001 fbc7 	bl	8016508 <xQueueReceiveFromISR>
 8014d7a:	4603      	mov	r3, r0
 8014d7c:	2b01      	cmp	r3, #1
 8014d7e:	d003      	beq.n	8014d88 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8014d80:	f06f 0302 	mvn.w	r3, #2
 8014d84:	61fb      	str	r3, [r7, #28]
 8014d86:	e027      	b.n	8014dd8 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8014d88:	693b      	ldr	r3, [r7, #16]
 8014d8a:	2b00      	cmp	r3, #0
 8014d8c:	d024      	beq.n	8014dd8 <osMessageQueueGet+0xac>
 8014d8e:	4b15      	ldr	r3, [pc, #84]	; (8014de4 <osMessageQueueGet+0xb8>)
 8014d90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014d94:	601a      	str	r2, [r3, #0]
 8014d96:	f3bf 8f4f 	dsb	sy
 8014d9a:	f3bf 8f6f 	isb	sy
 8014d9e:	e01b      	b.n	8014dd8 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8014da0:	69bb      	ldr	r3, [r7, #24]
 8014da2:	2b00      	cmp	r3, #0
 8014da4:	d002      	beq.n	8014dac <osMessageQueueGet+0x80>
 8014da6:	68bb      	ldr	r3, [r7, #8]
 8014da8:	2b00      	cmp	r3, #0
 8014daa:	d103      	bne.n	8014db4 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8014dac:	f06f 0303 	mvn.w	r3, #3
 8014db0:	61fb      	str	r3, [r7, #28]
 8014db2:	e011      	b.n	8014dd8 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8014db4:	683a      	ldr	r2, [r7, #0]
 8014db6:	68b9      	ldr	r1, [r7, #8]
 8014db8:	69b8      	ldr	r0, [r7, #24]
 8014dba:	f001 f9b9 	bl	8016130 <xQueueReceive>
 8014dbe:	4603      	mov	r3, r0
 8014dc0:	2b01      	cmp	r3, #1
 8014dc2:	d009      	beq.n	8014dd8 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8014dc4:	683b      	ldr	r3, [r7, #0]
 8014dc6:	2b00      	cmp	r3, #0
 8014dc8:	d003      	beq.n	8014dd2 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8014dca:	f06f 0301 	mvn.w	r3, #1
 8014dce:	61fb      	str	r3, [r7, #28]
 8014dd0:	e002      	b.n	8014dd8 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8014dd2:	f06f 0302 	mvn.w	r3, #2
 8014dd6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8014dd8:	69fb      	ldr	r3, [r7, #28]
}
 8014dda:	4618      	mov	r0, r3
 8014ddc:	3720      	adds	r7, #32
 8014dde:	46bd      	mov	sp, r7
 8014de0:	bd80      	pop	{r7, pc}
 8014de2:	bf00      	nop
 8014de4:	e000ed04 	.word	0xe000ed04

08014de8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8014de8:	b480      	push	{r7}
 8014dea:	b085      	sub	sp, #20
 8014dec:	af00      	add	r7, sp, #0
 8014dee:	60f8      	str	r0, [r7, #12]
 8014df0:	60b9      	str	r1, [r7, #8]
 8014df2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8014df4:	68fb      	ldr	r3, [r7, #12]
 8014df6:	4a07      	ldr	r2, [pc, #28]	; (8014e14 <vApplicationGetIdleTaskMemory+0x2c>)
 8014df8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8014dfa:	68bb      	ldr	r3, [r7, #8]
 8014dfc:	4a06      	ldr	r2, [pc, #24]	; (8014e18 <vApplicationGetIdleTaskMemory+0x30>)
 8014dfe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8014e00:	687b      	ldr	r3, [r7, #4]
 8014e02:	2280      	movs	r2, #128	; 0x80
 8014e04:	601a      	str	r2, [r3, #0]
}
 8014e06:	bf00      	nop
 8014e08:	3714      	adds	r7, #20
 8014e0a:	46bd      	mov	sp, r7
 8014e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e10:	4770      	bx	lr
 8014e12:	bf00      	nop
 8014e14:	2400bd3c 	.word	0x2400bd3c
 8014e18:	2400bd9c 	.word	0x2400bd9c

08014e1c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8014e1c:	b480      	push	{r7}
 8014e1e:	b085      	sub	sp, #20
 8014e20:	af00      	add	r7, sp, #0
 8014e22:	60f8      	str	r0, [r7, #12]
 8014e24:	60b9      	str	r1, [r7, #8]
 8014e26:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8014e28:	68fb      	ldr	r3, [r7, #12]
 8014e2a:	4a07      	ldr	r2, [pc, #28]	; (8014e48 <vApplicationGetTimerTaskMemory+0x2c>)
 8014e2c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8014e2e:	68bb      	ldr	r3, [r7, #8]
 8014e30:	4a06      	ldr	r2, [pc, #24]	; (8014e4c <vApplicationGetTimerTaskMemory+0x30>)
 8014e32:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8014e34:	687b      	ldr	r3, [r7, #4]
 8014e36:	f44f 7280 	mov.w	r2, #256	; 0x100
 8014e3a:	601a      	str	r2, [r3, #0]
}
 8014e3c:	bf00      	nop
 8014e3e:	3714      	adds	r7, #20
 8014e40:	46bd      	mov	sp, r7
 8014e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e46:	4770      	bx	lr
 8014e48:	2400bf9c 	.word	0x2400bf9c
 8014e4c:	2400bffc 	.word	0x2400bffc

08014e50 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8014e50:	b580      	push	{r7, lr}
 8014e52:	b08a      	sub	sp, #40	; 0x28
 8014e54:	af00      	add	r7, sp, #0
 8014e56:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8014e58:	2300      	movs	r3, #0
 8014e5a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8014e5c:	f001 ffee 	bl	8016e3c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8014e60:	4b5b      	ldr	r3, [pc, #364]	; (8014fd0 <pvPortMalloc+0x180>)
 8014e62:	681b      	ldr	r3, [r3, #0]
 8014e64:	2b00      	cmp	r3, #0
 8014e66:	d101      	bne.n	8014e6c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8014e68:	f000 f920 	bl	80150ac <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8014e6c:	4b59      	ldr	r3, [pc, #356]	; (8014fd4 <pvPortMalloc+0x184>)
 8014e6e:	681a      	ldr	r2, [r3, #0]
 8014e70:	687b      	ldr	r3, [r7, #4]
 8014e72:	4013      	ands	r3, r2
 8014e74:	2b00      	cmp	r3, #0
 8014e76:	f040 8093 	bne.w	8014fa0 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8014e7a:	687b      	ldr	r3, [r7, #4]
 8014e7c:	2b00      	cmp	r3, #0
 8014e7e:	d01d      	beq.n	8014ebc <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8014e80:	2208      	movs	r2, #8
 8014e82:	687b      	ldr	r3, [r7, #4]
 8014e84:	4413      	add	r3, r2
 8014e86:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8014e88:	687b      	ldr	r3, [r7, #4]
 8014e8a:	f003 0307 	and.w	r3, r3, #7
 8014e8e:	2b00      	cmp	r3, #0
 8014e90:	d014      	beq.n	8014ebc <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8014e92:	687b      	ldr	r3, [r7, #4]
 8014e94:	f023 0307 	bic.w	r3, r3, #7
 8014e98:	3308      	adds	r3, #8
 8014e9a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014e9c:	687b      	ldr	r3, [r7, #4]
 8014e9e:	f003 0307 	and.w	r3, r3, #7
 8014ea2:	2b00      	cmp	r3, #0
 8014ea4:	d00a      	beq.n	8014ebc <pvPortMalloc+0x6c>
	__asm volatile
 8014ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014eaa:	f383 8811 	msr	BASEPRI, r3
 8014eae:	f3bf 8f6f 	isb	sy
 8014eb2:	f3bf 8f4f 	dsb	sy
 8014eb6:	617b      	str	r3, [r7, #20]
}
 8014eb8:	bf00      	nop
 8014eba:	e7fe      	b.n	8014eba <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8014ebc:	687b      	ldr	r3, [r7, #4]
 8014ebe:	2b00      	cmp	r3, #0
 8014ec0:	d06e      	beq.n	8014fa0 <pvPortMalloc+0x150>
 8014ec2:	4b45      	ldr	r3, [pc, #276]	; (8014fd8 <pvPortMalloc+0x188>)
 8014ec4:	681b      	ldr	r3, [r3, #0]
 8014ec6:	687a      	ldr	r2, [r7, #4]
 8014ec8:	429a      	cmp	r2, r3
 8014eca:	d869      	bhi.n	8014fa0 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8014ecc:	4b43      	ldr	r3, [pc, #268]	; (8014fdc <pvPortMalloc+0x18c>)
 8014ece:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8014ed0:	4b42      	ldr	r3, [pc, #264]	; (8014fdc <pvPortMalloc+0x18c>)
 8014ed2:	681b      	ldr	r3, [r3, #0]
 8014ed4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8014ed6:	e004      	b.n	8014ee2 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8014ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014eda:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8014edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ede:	681b      	ldr	r3, [r3, #0]
 8014ee0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8014ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ee4:	685b      	ldr	r3, [r3, #4]
 8014ee6:	687a      	ldr	r2, [r7, #4]
 8014ee8:	429a      	cmp	r2, r3
 8014eea:	d903      	bls.n	8014ef4 <pvPortMalloc+0xa4>
 8014eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014eee:	681b      	ldr	r3, [r3, #0]
 8014ef0:	2b00      	cmp	r3, #0
 8014ef2:	d1f1      	bne.n	8014ed8 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8014ef4:	4b36      	ldr	r3, [pc, #216]	; (8014fd0 <pvPortMalloc+0x180>)
 8014ef6:	681b      	ldr	r3, [r3, #0]
 8014ef8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014efa:	429a      	cmp	r2, r3
 8014efc:	d050      	beq.n	8014fa0 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8014efe:	6a3b      	ldr	r3, [r7, #32]
 8014f00:	681b      	ldr	r3, [r3, #0]
 8014f02:	2208      	movs	r2, #8
 8014f04:	4413      	add	r3, r2
 8014f06:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8014f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f0a:	681a      	ldr	r2, [r3, #0]
 8014f0c:	6a3b      	ldr	r3, [r7, #32]
 8014f0e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8014f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f12:	685a      	ldr	r2, [r3, #4]
 8014f14:	687b      	ldr	r3, [r7, #4]
 8014f16:	1ad2      	subs	r2, r2, r3
 8014f18:	2308      	movs	r3, #8
 8014f1a:	005b      	lsls	r3, r3, #1
 8014f1c:	429a      	cmp	r2, r3
 8014f1e:	d91f      	bls.n	8014f60 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8014f20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014f22:	687b      	ldr	r3, [r7, #4]
 8014f24:	4413      	add	r3, r2
 8014f26:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014f28:	69bb      	ldr	r3, [r7, #24]
 8014f2a:	f003 0307 	and.w	r3, r3, #7
 8014f2e:	2b00      	cmp	r3, #0
 8014f30:	d00a      	beq.n	8014f48 <pvPortMalloc+0xf8>
	__asm volatile
 8014f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f36:	f383 8811 	msr	BASEPRI, r3
 8014f3a:	f3bf 8f6f 	isb	sy
 8014f3e:	f3bf 8f4f 	dsb	sy
 8014f42:	613b      	str	r3, [r7, #16]
}
 8014f44:	bf00      	nop
 8014f46:	e7fe      	b.n	8014f46 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8014f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f4a:	685a      	ldr	r2, [r3, #4]
 8014f4c:	687b      	ldr	r3, [r7, #4]
 8014f4e:	1ad2      	subs	r2, r2, r3
 8014f50:	69bb      	ldr	r3, [r7, #24]
 8014f52:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8014f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f56:	687a      	ldr	r2, [r7, #4]
 8014f58:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8014f5a:	69b8      	ldr	r0, [r7, #24]
 8014f5c:	f000 f90a 	bl	8015174 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8014f60:	4b1d      	ldr	r3, [pc, #116]	; (8014fd8 <pvPortMalloc+0x188>)
 8014f62:	681a      	ldr	r2, [r3, #0]
 8014f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f66:	685b      	ldr	r3, [r3, #4]
 8014f68:	1ad3      	subs	r3, r2, r3
 8014f6a:	4a1b      	ldr	r2, [pc, #108]	; (8014fd8 <pvPortMalloc+0x188>)
 8014f6c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8014f6e:	4b1a      	ldr	r3, [pc, #104]	; (8014fd8 <pvPortMalloc+0x188>)
 8014f70:	681a      	ldr	r2, [r3, #0]
 8014f72:	4b1b      	ldr	r3, [pc, #108]	; (8014fe0 <pvPortMalloc+0x190>)
 8014f74:	681b      	ldr	r3, [r3, #0]
 8014f76:	429a      	cmp	r2, r3
 8014f78:	d203      	bcs.n	8014f82 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8014f7a:	4b17      	ldr	r3, [pc, #92]	; (8014fd8 <pvPortMalloc+0x188>)
 8014f7c:	681b      	ldr	r3, [r3, #0]
 8014f7e:	4a18      	ldr	r2, [pc, #96]	; (8014fe0 <pvPortMalloc+0x190>)
 8014f80:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8014f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f84:	685a      	ldr	r2, [r3, #4]
 8014f86:	4b13      	ldr	r3, [pc, #76]	; (8014fd4 <pvPortMalloc+0x184>)
 8014f88:	681b      	ldr	r3, [r3, #0]
 8014f8a:	431a      	orrs	r2, r3
 8014f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f8e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8014f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f92:	2200      	movs	r2, #0
 8014f94:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8014f96:	4b13      	ldr	r3, [pc, #76]	; (8014fe4 <pvPortMalloc+0x194>)
 8014f98:	681b      	ldr	r3, [r3, #0]
 8014f9a:	3301      	adds	r3, #1
 8014f9c:	4a11      	ldr	r2, [pc, #68]	; (8014fe4 <pvPortMalloc+0x194>)
 8014f9e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8014fa0:	f001 ff5a 	bl	8016e58 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8014fa4:	69fb      	ldr	r3, [r7, #28]
 8014fa6:	f003 0307 	and.w	r3, r3, #7
 8014faa:	2b00      	cmp	r3, #0
 8014fac:	d00a      	beq.n	8014fc4 <pvPortMalloc+0x174>
	__asm volatile
 8014fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014fb2:	f383 8811 	msr	BASEPRI, r3
 8014fb6:	f3bf 8f6f 	isb	sy
 8014fba:	f3bf 8f4f 	dsb	sy
 8014fbe:	60fb      	str	r3, [r7, #12]
}
 8014fc0:	bf00      	nop
 8014fc2:	e7fe      	b.n	8014fc2 <pvPortMalloc+0x172>
	return pvReturn;
 8014fc4:	69fb      	ldr	r3, [r7, #28]
}
 8014fc6:	4618      	mov	r0, r3
 8014fc8:	3728      	adds	r7, #40	; 0x28
 8014fca:	46bd      	mov	sp, r7
 8014fcc:	bd80      	pop	{r7, pc}
 8014fce:	bf00      	nop
 8014fd0:	24024aa4 	.word	0x24024aa4
 8014fd4:	24024ab8 	.word	0x24024ab8
 8014fd8:	24024aa8 	.word	0x24024aa8
 8014fdc:	24024a9c 	.word	0x24024a9c
 8014fe0:	24024aac 	.word	0x24024aac
 8014fe4:	24024ab0 	.word	0x24024ab0

08014fe8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8014fe8:	b580      	push	{r7, lr}
 8014fea:	b086      	sub	sp, #24
 8014fec:	af00      	add	r7, sp, #0
 8014fee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8014ff0:	687b      	ldr	r3, [r7, #4]
 8014ff2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8014ff4:	687b      	ldr	r3, [r7, #4]
 8014ff6:	2b00      	cmp	r3, #0
 8014ff8:	d04d      	beq.n	8015096 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8014ffa:	2308      	movs	r3, #8
 8014ffc:	425b      	negs	r3, r3
 8014ffe:	697a      	ldr	r2, [r7, #20]
 8015000:	4413      	add	r3, r2
 8015002:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8015004:	697b      	ldr	r3, [r7, #20]
 8015006:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8015008:	693b      	ldr	r3, [r7, #16]
 801500a:	685a      	ldr	r2, [r3, #4]
 801500c:	4b24      	ldr	r3, [pc, #144]	; (80150a0 <vPortFree+0xb8>)
 801500e:	681b      	ldr	r3, [r3, #0]
 8015010:	4013      	ands	r3, r2
 8015012:	2b00      	cmp	r3, #0
 8015014:	d10a      	bne.n	801502c <vPortFree+0x44>
	__asm volatile
 8015016:	f04f 0350 	mov.w	r3, #80	; 0x50
 801501a:	f383 8811 	msr	BASEPRI, r3
 801501e:	f3bf 8f6f 	isb	sy
 8015022:	f3bf 8f4f 	dsb	sy
 8015026:	60fb      	str	r3, [r7, #12]
}
 8015028:	bf00      	nop
 801502a:	e7fe      	b.n	801502a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801502c:	693b      	ldr	r3, [r7, #16]
 801502e:	681b      	ldr	r3, [r3, #0]
 8015030:	2b00      	cmp	r3, #0
 8015032:	d00a      	beq.n	801504a <vPortFree+0x62>
	__asm volatile
 8015034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015038:	f383 8811 	msr	BASEPRI, r3
 801503c:	f3bf 8f6f 	isb	sy
 8015040:	f3bf 8f4f 	dsb	sy
 8015044:	60bb      	str	r3, [r7, #8]
}
 8015046:	bf00      	nop
 8015048:	e7fe      	b.n	8015048 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801504a:	693b      	ldr	r3, [r7, #16]
 801504c:	685a      	ldr	r2, [r3, #4]
 801504e:	4b14      	ldr	r3, [pc, #80]	; (80150a0 <vPortFree+0xb8>)
 8015050:	681b      	ldr	r3, [r3, #0]
 8015052:	4013      	ands	r3, r2
 8015054:	2b00      	cmp	r3, #0
 8015056:	d01e      	beq.n	8015096 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8015058:	693b      	ldr	r3, [r7, #16]
 801505a:	681b      	ldr	r3, [r3, #0]
 801505c:	2b00      	cmp	r3, #0
 801505e:	d11a      	bne.n	8015096 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8015060:	693b      	ldr	r3, [r7, #16]
 8015062:	685a      	ldr	r2, [r3, #4]
 8015064:	4b0e      	ldr	r3, [pc, #56]	; (80150a0 <vPortFree+0xb8>)
 8015066:	681b      	ldr	r3, [r3, #0]
 8015068:	43db      	mvns	r3, r3
 801506a:	401a      	ands	r2, r3
 801506c:	693b      	ldr	r3, [r7, #16]
 801506e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8015070:	f001 fee4 	bl	8016e3c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8015074:	693b      	ldr	r3, [r7, #16]
 8015076:	685a      	ldr	r2, [r3, #4]
 8015078:	4b0a      	ldr	r3, [pc, #40]	; (80150a4 <vPortFree+0xbc>)
 801507a:	681b      	ldr	r3, [r3, #0]
 801507c:	4413      	add	r3, r2
 801507e:	4a09      	ldr	r2, [pc, #36]	; (80150a4 <vPortFree+0xbc>)
 8015080:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8015082:	6938      	ldr	r0, [r7, #16]
 8015084:	f000 f876 	bl	8015174 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8015088:	4b07      	ldr	r3, [pc, #28]	; (80150a8 <vPortFree+0xc0>)
 801508a:	681b      	ldr	r3, [r3, #0]
 801508c:	3301      	adds	r3, #1
 801508e:	4a06      	ldr	r2, [pc, #24]	; (80150a8 <vPortFree+0xc0>)
 8015090:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8015092:	f001 fee1 	bl	8016e58 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8015096:	bf00      	nop
 8015098:	3718      	adds	r7, #24
 801509a:	46bd      	mov	sp, r7
 801509c:	bd80      	pop	{r7, pc}
 801509e:	bf00      	nop
 80150a0:	24024ab8 	.word	0x24024ab8
 80150a4:	24024aa8 	.word	0x24024aa8
 80150a8:	24024ab4 	.word	0x24024ab4

080150ac <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80150ac:	b480      	push	{r7}
 80150ae:	b085      	sub	sp, #20
 80150b0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80150b2:	4b29      	ldr	r3, [pc, #164]	; (8015158 <prvHeapInit+0xac>)
 80150b4:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80150b6:	4b29      	ldr	r3, [pc, #164]	; (801515c <prvHeapInit+0xb0>)
 80150b8:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80150ba:	68fb      	ldr	r3, [r7, #12]
 80150bc:	f003 0307 	and.w	r3, r3, #7
 80150c0:	2b00      	cmp	r3, #0
 80150c2:	d00c      	beq.n	80150de <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80150c4:	68fb      	ldr	r3, [r7, #12]
 80150c6:	3307      	adds	r3, #7
 80150c8:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80150ca:	68fb      	ldr	r3, [r7, #12]
 80150cc:	f023 0307 	bic.w	r3, r3, #7
 80150d0:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80150d2:	68ba      	ldr	r2, [r7, #8]
 80150d4:	68fb      	ldr	r3, [r7, #12]
 80150d6:	1ad3      	subs	r3, r2, r3
 80150d8:	4a20      	ldr	r2, [pc, #128]	; (801515c <prvHeapInit+0xb0>)
 80150da:	4413      	add	r3, r2
 80150dc:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80150de:	68fb      	ldr	r3, [r7, #12]
 80150e0:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80150e2:	4a1f      	ldr	r2, [pc, #124]	; (8015160 <prvHeapInit+0xb4>)
 80150e4:	687b      	ldr	r3, [r7, #4]
 80150e6:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80150e8:	4b1d      	ldr	r3, [pc, #116]	; (8015160 <prvHeapInit+0xb4>)
 80150ea:	2200      	movs	r2, #0
 80150ec:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80150ee:	687b      	ldr	r3, [r7, #4]
 80150f0:	68ba      	ldr	r2, [r7, #8]
 80150f2:	4413      	add	r3, r2
 80150f4:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80150f6:	2208      	movs	r2, #8
 80150f8:	68fb      	ldr	r3, [r7, #12]
 80150fa:	1a9b      	subs	r3, r3, r2
 80150fc:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80150fe:	68fb      	ldr	r3, [r7, #12]
 8015100:	f023 0307 	bic.w	r3, r3, #7
 8015104:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8015106:	68fb      	ldr	r3, [r7, #12]
 8015108:	4a16      	ldr	r2, [pc, #88]	; (8015164 <prvHeapInit+0xb8>)
 801510a:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801510c:	4b15      	ldr	r3, [pc, #84]	; (8015164 <prvHeapInit+0xb8>)
 801510e:	681b      	ldr	r3, [r3, #0]
 8015110:	2200      	movs	r2, #0
 8015112:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8015114:	4b13      	ldr	r3, [pc, #76]	; (8015164 <prvHeapInit+0xb8>)
 8015116:	681b      	ldr	r3, [r3, #0]
 8015118:	2200      	movs	r2, #0
 801511a:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801511c:	687b      	ldr	r3, [r7, #4]
 801511e:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8015120:	683b      	ldr	r3, [r7, #0]
 8015122:	68fa      	ldr	r2, [r7, #12]
 8015124:	1ad2      	subs	r2, r2, r3
 8015126:	683b      	ldr	r3, [r7, #0]
 8015128:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801512a:	4b0e      	ldr	r3, [pc, #56]	; (8015164 <prvHeapInit+0xb8>)
 801512c:	681a      	ldr	r2, [r3, #0]
 801512e:	683b      	ldr	r3, [r7, #0]
 8015130:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8015132:	683b      	ldr	r3, [r7, #0]
 8015134:	685b      	ldr	r3, [r3, #4]
 8015136:	4a0c      	ldr	r2, [pc, #48]	; (8015168 <prvHeapInit+0xbc>)
 8015138:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801513a:	683b      	ldr	r3, [r7, #0]
 801513c:	685b      	ldr	r3, [r3, #4]
 801513e:	4a0b      	ldr	r2, [pc, #44]	; (801516c <prvHeapInit+0xc0>)
 8015140:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8015142:	4b0b      	ldr	r3, [pc, #44]	; (8015170 <prvHeapInit+0xc4>)
 8015144:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8015148:	601a      	str	r2, [r3, #0]
}
 801514a:	bf00      	nop
 801514c:	3714      	adds	r7, #20
 801514e:	46bd      	mov	sp, r7
 8015150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015154:	4770      	bx	lr
 8015156:	bf00      	nop
 8015158:	000186a0 	.word	0x000186a0
 801515c:	2400c3fc 	.word	0x2400c3fc
 8015160:	24024a9c 	.word	0x24024a9c
 8015164:	24024aa4 	.word	0x24024aa4
 8015168:	24024aac 	.word	0x24024aac
 801516c:	24024aa8 	.word	0x24024aa8
 8015170:	24024ab8 	.word	0x24024ab8

08015174 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8015174:	b480      	push	{r7}
 8015176:	b085      	sub	sp, #20
 8015178:	af00      	add	r7, sp, #0
 801517a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801517c:	4b28      	ldr	r3, [pc, #160]	; (8015220 <prvInsertBlockIntoFreeList+0xac>)
 801517e:	60fb      	str	r3, [r7, #12]
 8015180:	e002      	b.n	8015188 <prvInsertBlockIntoFreeList+0x14>
 8015182:	68fb      	ldr	r3, [r7, #12]
 8015184:	681b      	ldr	r3, [r3, #0]
 8015186:	60fb      	str	r3, [r7, #12]
 8015188:	68fb      	ldr	r3, [r7, #12]
 801518a:	681b      	ldr	r3, [r3, #0]
 801518c:	687a      	ldr	r2, [r7, #4]
 801518e:	429a      	cmp	r2, r3
 8015190:	d8f7      	bhi.n	8015182 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8015192:	68fb      	ldr	r3, [r7, #12]
 8015194:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8015196:	68fb      	ldr	r3, [r7, #12]
 8015198:	685b      	ldr	r3, [r3, #4]
 801519a:	68ba      	ldr	r2, [r7, #8]
 801519c:	4413      	add	r3, r2
 801519e:	687a      	ldr	r2, [r7, #4]
 80151a0:	429a      	cmp	r2, r3
 80151a2:	d108      	bne.n	80151b6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80151a4:	68fb      	ldr	r3, [r7, #12]
 80151a6:	685a      	ldr	r2, [r3, #4]
 80151a8:	687b      	ldr	r3, [r7, #4]
 80151aa:	685b      	ldr	r3, [r3, #4]
 80151ac:	441a      	add	r2, r3
 80151ae:	68fb      	ldr	r3, [r7, #12]
 80151b0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80151b2:	68fb      	ldr	r3, [r7, #12]
 80151b4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80151b6:	687b      	ldr	r3, [r7, #4]
 80151b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80151ba:	687b      	ldr	r3, [r7, #4]
 80151bc:	685b      	ldr	r3, [r3, #4]
 80151be:	68ba      	ldr	r2, [r7, #8]
 80151c0:	441a      	add	r2, r3
 80151c2:	68fb      	ldr	r3, [r7, #12]
 80151c4:	681b      	ldr	r3, [r3, #0]
 80151c6:	429a      	cmp	r2, r3
 80151c8:	d118      	bne.n	80151fc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80151ca:	68fb      	ldr	r3, [r7, #12]
 80151cc:	681a      	ldr	r2, [r3, #0]
 80151ce:	4b15      	ldr	r3, [pc, #84]	; (8015224 <prvInsertBlockIntoFreeList+0xb0>)
 80151d0:	681b      	ldr	r3, [r3, #0]
 80151d2:	429a      	cmp	r2, r3
 80151d4:	d00d      	beq.n	80151f2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80151d6:	687b      	ldr	r3, [r7, #4]
 80151d8:	685a      	ldr	r2, [r3, #4]
 80151da:	68fb      	ldr	r3, [r7, #12]
 80151dc:	681b      	ldr	r3, [r3, #0]
 80151de:	685b      	ldr	r3, [r3, #4]
 80151e0:	441a      	add	r2, r3
 80151e2:	687b      	ldr	r3, [r7, #4]
 80151e4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80151e6:	68fb      	ldr	r3, [r7, #12]
 80151e8:	681b      	ldr	r3, [r3, #0]
 80151ea:	681a      	ldr	r2, [r3, #0]
 80151ec:	687b      	ldr	r3, [r7, #4]
 80151ee:	601a      	str	r2, [r3, #0]
 80151f0:	e008      	b.n	8015204 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80151f2:	4b0c      	ldr	r3, [pc, #48]	; (8015224 <prvInsertBlockIntoFreeList+0xb0>)
 80151f4:	681a      	ldr	r2, [r3, #0]
 80151f6:	687b      	ldr	r3, [r7, #4]
 80151f8:	601a      	str	r2, [r3, #0]
 80151fa:	e003      	b.n	8015204 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80151fc:	68fb      	ldr	r3, [r7, #12]
 80151fe:	681a      	ldr	r2, [r3, #0]
 8015200:	687b      	ldr	r3, [r7, #4]
 8015202:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8015204:	68fa      	ldr	r2, [r7, #12]
 8015206:	687b      	ldr	r3, [r7, #4]
 8015208:	429a      	cmp	r2, r3
 801520a:	d002      	beq.n	8015212 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801520c:	68fb      	ldr	r3, [r7, #12]
 801520e:	687a      	ldr	r2, [r7, #4]
 8015210:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015212:	bf00      	nop
 8015214:	3714      	adds	r7, #20
 8015216:	46bd      	mov	sp, r7
 8015218:	f85d 7b04 	ldr.w	r7, [sp], #4
 801521c:	4770      	bx	lr
 801521e:	bf00      	nop
 8015220:	24024a9c 	.word	0x24024a9c
 8015224:	24024aa4 	.word	0x24024aa4

08015228 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8015228:	b480      	push	{r7}
 801522a:	b083      	sub	sp, #12
 801522c:	af00      	add	r7, sp, #0
 801522e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8015230:	687b      	ldr	r3, [r7, #4]
 8015232:	f103 0208 	add.w	r2, r3, #8
 8015236:	687b      	ldr	r3, [r7, #4]
 8015238:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801523a:	687b      	ldr	r3, [r7, #4]
 801523c:	f04f 32ff 	mov.w	r2, #4294967295
 8015240:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8015242:	687b      	ldr	r3, [r7, #4]
 8015244:	f103 0208 	add.w	r2, r3, #8
 8015248:	687b      	ldr	r3, [r7, #4]
 801524a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801524c:	687b      	ldr	r3, [r7, #4]
 801524e:	f103 0208 	add.w	r2, r3, #8
 8015252:	687b      	ldr	r3, [r7, #4]
 8015254:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8015256:	687b      	ldr	r3, [r7, #4]
 8015258:	2200      	movs	r2, #0
 801525a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 801525c:	bf00      	nop
 801525e:	370c      	adds	r7, #12
 8015260:	46bd      	mov	sp, r7
 8015262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015266:	4770      	bx	lr

08015268 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8015268:	b480      	push	{r7}
 801526a:	b083      	sub	sp, #12
 801526c:	af00      	add	r7, sp, #0
 801526e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8015270:	687b      	ldr	r3, [r7, #4]
 8015272:	2200      	movs	r2, #0
 8015274:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8015276:	bf00      	nop
 8015278:	370c      	adds	r7, #12
 801527a:	46bd      	mov	sp, r7
 801527c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015280:	4770      	bx	lr

08015282 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8015282:	b480      	push	{r7}
 8015284:	b085      	sub	sp, #20
 8015286:	af00      	add	r7, sp, #0
 8015288:	6078      	str	r0, [r7, #4]
 801528a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 801528c:	687b      	ldr	r3, [r7, #4]
 801528e:	685b      	ldr	r3, [r3, #4]
 8015290:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8015292:	683b      	ldr	r3, [r7, #0]
 8015294:	68fa      	ldr	r2, [r7, #12]
 8015296:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8015298:	68fb      	ldr	r3, [r7, #12]
 801529a:	689a      	ldr	r2, [r3, #8]
 801529c:	683b      	ldr	r3, [r7, #0]
 801529e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80152a0:	68fb      	ldr	r3, [r7, #12]
 80152a2:	689b      	ldr	r3, [r3, #8]
 80152a4:	683a      	ldr	r2, [r7, #0]
 80152a6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80152a8:	68fb      	ldr	r3, [r7, #12]
 80152aa:	683a      	ldr	r2, [r7, #0]
 80152ac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80152ae:	683b      	ldr	r3, [r7, #0]
 80152b0:	687a      	ldr	r2, [r7, #4]
 80152b2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80152b4:	687b      	ldr	r3, [r7, #4]
 80152b6:	681b      	ldr	r3, [r3, #0]
 80152b8:	1c5a      	adds	r2, r3, #1
 80152ba:	687b      	ldr	r3, [r7, #4]
 80152bc:	601a      	str	r2, [r3, #0]
}
 80152be:	bf00      	nop
 80152c0:	3714      	adds	r7, #20
 80152c2:	46bd      	mov	sp, r7
 80152c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152c8:	4770      	bx	lr

080152ca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80152ca:	b480      	push	{r7}
 80152cc:	b085      	sub	sp, #20
 80152ce:	af00      	add	r7, sp, #0
 80152d0:	6078      	str	r0, [r7, #4]
 80152d2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80152d4:	683b      	ldr	r3, [r7, #0]
 80152d6:	681b      	ldr	r3, [r3, #0]
 80152d8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80152da:	68bb      	ldr	r3, [r7, #8]
 80152dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80152e0:	d103      	bne.n	80152ea <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80152e2:	687b      	ldr	r3, [r7, #4]
 80152e4:	691b      	ldr	r3, [r3, #16]
 80152e6:	60fb      	str	r3, [r7, #12]
 80152e8:	e00c      	b.n	8015304 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80152ea:	687b      	ldr	r3, [r7, #4]
 80152ec:	3308      	adds	r3, #8
 80152ee:	60fb      	str	r3, [r7, #12]
 80152f0:	e002      	b.n	80152f8 <vListInsert+0x2e>
 80152f2:	68fb      	ldr	r3, [r7, #12]
 80152f4:	685b      	ldr	r3, [r3, #4]
 80152f6:	60fb      	str	r3, [r7, #12]
 80152f8:	68fb      	ldr	r3, [r7, #12]
 80152fa:	685b      	ldr	r3, [r3, #4]
 80152fc:	681b      	ldr	r3, [r3, #0]
 80152fe:	68ba      	ldr	r2, [r7, #8]
 8015300:	429a      	cmp	r2, r3
 8015302:	d2f6      	bcs.n	80152f2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8015304:	68fb      	ldr	r3, [r7, #12]
 8015306:	685a      	ldr	r2, [r3, #4]
 8015308:	683b      	ldr	r3, [r7, #0]
 801530a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801530c:	683b      	ldr	r3, [r7, #0]
 801530e:	685b      	ldr	r3, [r3, #4]
 8015310:	683a      	ldr	r2, [r7, #0]
 8015312:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8015314:	683b      	ldr	r3, [r7, #0]
 8015316:	68fa      	ldr	r2, [r7, #12]
 8015318:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801531a:	68fb      	ldr	r3, [r7, #12]
 801531c:	683a      	ldr	r2, [r7, #0]
 801531e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8015320:	683b      	ldr	r3, [r7, #0]
 8015322:	687a      	ldr	r2, [r7, #4]
 8015324:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8015326:	687b      	ldr	r3, [r7, #4]
 8015328:	681b      	ldr	r3, [r3, #0]
 801532a:	1c5a      	adds	r2, r3, #1
 801532c:	687b      	ldr	r3, [r7, #4]
 801532e:	601a      	str	r2, [r3, #0]
}
 8015330:	bf00      	nop
 8015332:	3714      	adds	r7, #20
 8015334:	46bd      	mov	sp, r7
 8015336:	f85d 7b04 	ldr.w	r7, [sp], #4
 801533a:	4770      	bx	lr

0801533c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801533c:	b480      	push	{r7}
 801533e:	b085      	sub	sp, #20
 8015340:	af00      	add	r7, sp, #0
 8015342:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8015344:	687b      	ldr	r3, [r7, #4]
 8015346:	691b      	ldr	r3, [r3, #16]
 8015348:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801534a:	687b      	ldr	r3, [r7, #4]
 801534c:	685b      	ldr	r3, [r3, #4]
 801534e:	687a      	ldr	r2, [r7, #4]
 8015350:	6892      	ldr	r2, [r2, #8]
 8015352:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8015354:	687b      	ldr	r3, [r7, #4]
 8015356:	689b      	ldr	r3, [r3, #8]
 8015358:	687a      	ldr	r2, [r7, #4]
 801535a:	6852      	ldr	r2, [r2, #4]
 801535c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801535e:	68fb      	ldr	r3, [r7, #12]
 8015360:	685b      	ldr	r3, [r3, #4]
 8015362:	687a      	ldr	r2, [r7, #4]
 8015364:	429a      	cmp	r2, r3
 8015366:	d103      	bne.n	8015370 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8015368:	687b      	ldr	r3, [r7, #4]
 801536a:	689a      	ldr	r2, [r3, #8]
 801536c:	68fb      	ldr	r3, [r7, #12]
 801536e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8015370:	687b      	ldr	r3, [r7, #4]
 8015372:	2200      	movs	r2, #0
 8015374:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8015376:	68fb      	ldr	r3, [r7, #12]
 8015378:	681b      	ldr	r3, [r3, #0]
 801537a:	1e5a      	subs	r2, r3, #1
 801537c:	68fb      	ldr	r3, [r7, #12]
 801537e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8015380:	68fb      	ldr	r3, [r7, #12]
 8015382:	681b      	ldr	r3, [r3, #0]
}
 8015384:	4618      	mov	r0, r3
 8015386:	3714      	adds	r7, #20
 8015388:	46bd      	mov	sp, r7
 801538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801538e:	4770      	bx	lr

08015390 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8015390:	b480      	push	{r7}
 8015392:	b085      	sub	sp, #20
 8015394:	af00      	add	r7, sp, #0
 8015396:	60f8      	str	r0, [r7, #12]
 8015398:	60b9      	str	r1, [r7, #8]
 801539a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801539c:	68fb      	ldr	r3, [r7, #12]
 801539e:	3b04      	subs	r3, #4
 80153a0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80153a2:	68fb      	ldr	r3, [r7, #12]
 80153a4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80153a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80153aa:	68fb      	ldr	r3, [r7, #12]
 80153ac:	3b04      	subs	r3, #4
 80153ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80153b0:	68bb      	ldr	r3, [r7, #8]
 80153b2:	f023 0201 	bic.w	r2, r3, #1
 80153b6:	68fb      	ldr	r3, [r7, #12]
 80153b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80153ba:	68fb      	ldr	r3, [r7, #12]
 80153bc:	3b04      	subs	r3, #4
 80153be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80153c0:	4a0c      	ldr	r2, [pc, #48]	; (80153f4 <pxPortInitialiseStack+0x64>)
 80153c2:	68fb      	ldr	r3, [r7, #12]
 80153c4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80153c6:	68fb      	ldr	r3, [r7, #12]
 80153c8:	3b14      	subs	r3, #20
 80153ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80153cc:	687a      	ldr	r2, [r7, #4]
 80153ce:	68fb      	ldr	r3, [r7, #12]
 80153d0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80153d2:	68fb      	ldr	r3, [r7, #12]
 80153d4:	3b04      	subs	r3, #4
 80153d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80153d8:	68fb      	ldr	r3, [r7, #12]
 80153da:	f06f 0202 	mvn.w	r2, #2
 80153de:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80153e0:	68fb      	ldr	r3, [r7, #12]
 80153e2:	3b20      	subs	r3, #32
 80153e4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80153e6:	68fb      	ldr	r3, [r7, #12]
}
 80153e8:	4618      	mov	r0, r3
 80153ea:	3714      	adds	r7, #20
 80153ec:	46bd      	mov	sp, r7
 80153ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153f2:	4770      	bx	lr
 80153f4:	080153f9 	.word	0x080153f9

080153f8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80153f8:	b480      	push	{r7}
 80153fa:	b085      	sub	sp, #20
 80153fc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80153fe:	2300      	movs	r3, #0
 8015400:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8015402:	4b12      	ldr	r3, [pc, #72]	; (801544c <prvTaskExitError+0x54>)
 8015404:	681b      	ldr	r3, [r3, #0]
 8015406:	f1b3 3fff 	cmp.w	r3, #4294967295
 801540a:	d00a      	beq.n	8015422 <prvTaskExitError+0x2a>
	__asm volatile
 801540c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015410:	f383 8811 	msr	BASEPRI, r3
 8015414:	f3bf 8f6f 	isb	sy
 8015418:	f3bf 8f4f 	dsb	sy
 801541c:	60fb      	str	r3, [r7, #12]
}
 801541e:	bf00      	nop
 8015420:	e7fe      	b.n	8015420 <prvTaskExitError+0x28>
	__asm volatile
 8015422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015426:	f383 8811 	msr	BASEPRI, r3
 801542a:	f3bf 8f6f 	isb	sy
 801542e:	f3bf 8f4f 	dsb	sy
 8015432:	60bb      	str	r3, [r7, #8]
}
 8015434:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8015436:	bf00      	nop
 8015438:	687b      	ldr	r3, [r7, #4]
 801543a:	2b00      	cmp	r3, #0
 801543c:	d0fc      	beq.n	8015438 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801543e:	bf00      	nop
 8015440:	bf00      	nop
 8015442:	3714      	adds	r7, #20
 8015444:	46bd      	mov	sp, r7
 8015446:	f85d 7b04 	ldr.w	r7, [sp], #4
 801544a:	4770      	bx	lr
 801544c:	24000064 	.word	0x24000064

08015450 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8015450:	4b07      	ldr	r3, [pc, #28]	; (8015470 <pxCurrentTCBConst2>)
 8015452:	6819      	ldr	r1, [r3, #0]
 8015454:	6808      	ldr	r0, [r1, #0]
 8015456:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801545a:	f380 8809 	msr	PSP, r0
 801545e:	f3bf 8f6f 	isb	sy
 8015462:	f04f 0000 	mov.w	r0, #0
 8015466:	f380 8811 	msr	BASEPRI, r0
 801546a:	4770      	bx	lr
 801546c:	f3af 8000 	nop.w

08015470 <pxCurrentTCBConst2>:
 8015470:	24024b04 	.word	0x24024b04
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8015474:	bf00      	nop
 8015476:	bf00      	nop

08015478 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8015478:	4808      	ldr	r0, [pc, #32]	; (801549c <prvPortStartFirstTask+0x24>)
 801547a:	6800      	ldr	r0, [r0, #0]
 801547c:	6800      	ldr	r0, [r0, #0]
 801547e:	f380 8808 	msr	MSP, r0
 8015482:	f04f 0000 	mov.w	r0, #0
 8015486:	f380 8814 	msr	CONTROL, r0
 801548a:	b662      	cpsie	i
 801548c:	b661      	cpsie	f
 801548e:	f3bf 8f4f 	dsb	sy
 8015492:	f3bf 8f6f 	isb	sy
 8015496:	df00      	svc	0
 8015498:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801549a:	bf00      	nop
 801549c:	e000ed08 	.word	0xe000ed08

080154a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80154a0:	b580      	push	{r7, lr}
 80154a2:	b086      	sub	sp, #24
 80154a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80154a6:	4b46      	ldr	r3, [pc, #280]	; (80155c0 <xPortStartScheduler+0x120>)
 80154a8:	681b      	ldr	r3, [r3, #0]
 80154aa:	4a46      	ldr	r2, [pc, #280]	; (80155c4 <xPortStartScheduler+0x124>)
 80154ac:	4293      	cmp	r3, r2
 80154ae:	d10a      	bne.n	80154c6 <xPortStartScheduler+0x26>
	__asm volatile
 80154b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80154b4:	f383 8811 	msr	BASEPRI, r3
 80154b8:	f3bf 8f6f 	isb	sy
 80154bc:	f3bf 8f4f 	dsb	sy
 80154c0:	613b      	str	r3, [r7, #16]
}
 80154c2:	bf00      	nop
 80154c4:	e7fe      	b.n	80154c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80154c6:	4b3e      	ldr	r3, [pc, #248]	; (80155c0 <xPortStartScheduler+0x120>)
 80154c8:	681b      	ldr	r3, [r3, #0]
 80154ca:	4a3f      	ldr	r2, [pc, #252]	; (80155c8 <xPortStartScheduler+0x128>)
 80154cc:	4293      	cmp	r3, r2
 80154ce:	d10a      	bne.n	80154e6 <xPortStartScheduler+0x46>
	__asm volatile
 80154d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80154d4:	f383 8811 	msr	BASEPRI, r3
 80154d8:	f3bf 8f6f 	isb	sy
 80154dc:	f3bf 8f4f 	dsb	sy
 80154e0:	60fb      	str	r3, [r7, #12]
}
 80154e2:	bf00      	nop
 80154e4:	e7fe      	b.n	80154e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80154e6:	4b39      	ldr	r3, [pc, #228]	; (80155cc <xPortStartScheduler+0x12c>)
 80154e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80154ea:	697b      	ldr	r3, [r7, #20]
 80154ec:	781b      	ldrb	r3, [r3, #0]
 80154ee:	b2db      	uxtb	r3, r3
 80154f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80154f2:	697b      	ldr	r3, [r7, #20]
 80154f4:	22ff      	movs	r2, #255	; 0xff
 80154f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80154f8:	697b      	ldr	r3, [r7, #20]
 80154fa:	781b      	ldrb	r3, [r3, #0]
 80154fc:	b2db      	uxtb	r3, r3
 80154fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8015500:	78fb      	ldrb	r3, [r7, #3]
 8015502:	b2db      	uxtb	r3, r3
 8015504:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8015508:	b2da      	uxtb	r2, r3
 801550a:	4b31      	ldr	r3, [pc, #196]	; (80155d0 <xPortStartScheduler+0x130>)
 801550c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801550e:	4b31      	ldr	r3, [pc, #196]	; (80155d4 <xPortStartScheduler+0x134>)
 8015510:	2207      	movs	r2, #7
 8015512:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8015514:	e009      	b.n	801552a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8015516:	4b2f      	ldr	r3, [pc, #188]	; (80155d4 <xPortStartScheduler+0x134>)
 8015518:	681b      	ldr	r3, [r3, #0]
 801551a:	3b01      	subs	r3, #1
 801551c:	4a2d      	ldr	r2, [pc, #180]	; (80155d4 <xPortStartScheduler+0x134>)
 801551e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8015520:	78fb      	ldrb	r3, [r7, #3]
 8015522:	b2db      	uxtb	r3, r3
 8015524:	005b      	lsls	r3, r3, #1
 8015526:	b2db      	uxtb	r3, r3
 8015528:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801552a:	78fb      	ldrb	r3, [r7, #3]
 801552c:	b2db      	uxtb	r3, r3
 801552e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015532:	2b80      	cmp	r3, #128	; 0x80
 8015534:	d0ef      	beq.n	8015516 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8015536:	4b27      	ldr	r3, [pc, #156]	; (80155d4 <xPortStartScheduler+0x134>)
 8015538:	681b      	ldr	r3, [r3, #0]
 801553a:	f1c3 0307 	rsb	r3, r3, #7
 801553e:	2b04      	cmp	r3, #4
 8015540:	d00a      	beq.n	8015558 <xPortStartScheduler+0xb8>
	__asm volatile
 8015542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015546:	f383 8811 	msr	BASEPRI, r3
 801554a:	f3bf 8f6f 	isb	sy
 801554e:	f3bf 8f4f 	dsb	sy
 8015552:	60bb      	str	r3, [r7, #8]
}
 8015554:	bf00      	nop
 8015556:	e7fe      	b.n	8015556 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8015558:	4b1e      	ldr	r3, [pc, #120]	; (80155d4 <xPortStartScheduler+0x134>)
 801555a:	681b      	ldr	r3, [r3, #0]
 801555c:	021b      	lsls	r3, r3, #8
 801555e:	4a1d      	ldr	r2, [pc, #116]	; (80155d4 <xPortStartScheduler+0x134>)
 8015560:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8015562:	4b1c      	ldr	r3, [pc, #112]	; (80155d4 <xPortStartScheduler+0x134>)
 8015564:	681b      	ldr	r3, [r3, #0]
 8015566:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801556a:	4a1a      	ldr	r2, [pc, #104]	; (80155d4 <xPortStartScheduler+0x134>)
 801556c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801556e:	687b      	ldr	r3, [r7, #4]
 8015570:	b2da      	uxtb	r2, r3
 8015572:	697b      	ldr	r3, [r7, #20]
 8015574:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8015576:	4b18      	ldr	r3, [pc, #96]	; (80155d8 <xPortStartScheduler+0x138>)
 8015578:	681b      	ldr	r3, [r3, #0]
 801557a:	4a17      	ldr	r2, [pc, #92]	; (80155d8 <xPortStartScheduler+0x138>)
 801557c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8015580:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8015582:	4b15      	ldr	r3, [pc, #84]	; (80155d8 <xPortStartScheduler+0x138>)
 8015584:	681b      	ldr	r3, [r3, #0]
 8015586:	4a14      	ldr	r2, [pc, #80]	; (80155d8 <xPortStartScheduler+0x138>)
 8015588:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801558c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801558e:	f000 f8dd 	bl	801574c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8015592:	4b12      	ldr	r3, [pc, #72]	; (80155dc <xPortStartScheduler+0x13c>)
 8015594:	2200      	movs	r2, #0
 8015596:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8015598:	f000 f8fc 	bl	8015794 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801559c:	4b10      	ldr	r3, [pc, #64]	; (80155e0 <xPortStartScheduler+0x140>)
 801559e:	681b      	ldr	r3, [r3, #0]
 80155a0:	4a0f      	ldr	r2, [pc, #60]	; (80155e0 <xPortStartScheduler+0x140>)
 80155a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80155a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80155a8:	f7ff ff66 	bl	8015478 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80155ac:	f001 fdfa 	bl	80171a4 <vTaskSwitchContext>
	prvTaskExitError();
 80155b0:	f7ff ff22 	bl	80153f8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80155b4:	2300      	movs	r3, #0
}
 80155b6:	4618      	mov	r0, r3
 80155b8:	3718      	adds	r7, #24
 80155ba:	46bd      	mov	sp, r7
 80155bc:	bd80      	pop	{r7, pc}
 80155be:	bf00      	nop
 80155c0:	e000ed00 	.word	0xe000ed00
 80155c4:	410fc271 	.word	0x410fc271
 80155c8:	410fc270 	.word	0x410fc270
 80155cc:	e000e400 	.word	0xe000e400
 80155d0:	24024abc 	.word	0x24024abc
 80155d4:	24024ac0 	.word	0x24024ac0
 80155d8:	e000ed20 	.word	0xe000ed20
 80155dc:	24000064 	.word	0x24000064
 80155e0:	e000ef34 	.word	0xe000ef34

080155e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80155e4:	b480      	push	{r7}
 80155e6:	b083      	sub	sp, #12
 80155e8:	af00      	add	r7, sp, #0
	__asm volatile
 80155ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80155ee:	f383 8811 	msr	BASEPRI, r3
 80155f2:	f3bf 8f6f 	isb	sy
 80155f6:	f3bf 8f4f 	dsb	sy
 80155fa:	607b      	str	r3, [r7, #4]
}
 80155fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80155fe:	4b0f      	ldr	r3, [pc, #60]	; (801563c <vPortEnterCritical+0x58>)
 8015600:	681b      	ldr	r3, [r3, #0]
 8015602:	3301      	adds	r3, #1
 8015604:	4a0d      	ldr	r2, [pc, #52]	; (801563c <vPortEnterCritical+0x58>)
 8015606:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8015608:	4b0c      	ldr	r3, [pc, #48]	; (801563c <vPortEnterCritical+0x58>)
 801560a:	681b      	ldr	r3, [r3, #0]
 801560c:	2b01      	cmp	r3, #1
 801560e:	d10f      	bne.n	8015630 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8015610:	4b0b      	ldr	r3, [pc, #44]	; (8015640 <vPortEnterCritical+0x5c>)
 8015612:	681b      	ldr	r3, [r3, #0]
 8015614:	b2db      	uxtb	r3, r3
 8015616:	2b00      	cmp	r3, #0
 8015618:	d00a      	beq.n	8015630 <vPortEnterCritical+0x4c>
	__asm volatile
 801561a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801561e:	f383 8811 	msr	BASEPRI, r3
 8015622:	f3bf 8f6f 	isb	sy
 8015626:	f3bf 8f4f 	dsb	sy
 801562a:	603b      	str	r3, [r7, #0]
}
 801562c:	bf00      	nop
 801562e:	e7fe      	b.n	801562e <vPortEnterCritical+0x4a>
	}
}
 8015630:	bf00      	nop
 8015632:	370c      	adds	r7, #12
 8015634:	46bd      	mov	sp, r7
 8015636:	f85d 7b04 	ldr.w	r7, [sp], #4
 801563a:	4770      	bx	lr
 801563c:	24000064 	.word	0x24000064
 8015640:	e000ed04 	.word	0xe000ed04

08015644 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8015644:	b480      	push	{r7}
 8015646:	b083      	sub	sp, #12
 8015648:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801564a:	4b12      	ldr	r3, [pc, #72]	; (8015694 <vPortExitCritical+0x50>)
 801564c:	681b      	ldr	r3, [r3, #0]
 801564e:	2b00      	cmp	r3, #0
 8015650:	d10a      	bne.n	8015668 <vPortExitCritical+0x24>
	__asm volatile
 8015652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015656:	f383 8811 	msr	BASEPRI, r3
 801565a:	f3bf 8f6f 	isb	sy
 801565e:	f3bf 8f4f 	dsb	sy
 8015662:	607b      	str	r3, [r7, #4]
}
 8015664:	bf00      	nop
 8015666:	e7fe      	b.n	8015666 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8015668:	4b0a      	ldr	r3, [pc, #40]	; (8015694 <vPortExitCritical+0x50>)
 801566a:	681b      	ldr	r3, [r3, #0]
 801566c:	3b01      	subs	r3, #1
 801566e:	4a09      	ldr	r2, [pc, #36]	; (8015694 <vPortExitCritical+0x50>)
 8015670:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8015672:	4b08      	ldr	r3, [pc, #32]	; (8015694 <vPortExitCritical+0x50>)
 8015674:	681b      	ldr	r3, [r3, #0]
 8015676:	2b00      	cmp	r3, #0
 8015678:	d105      	bne.n	8015686 <vPortExitCritical+0x42>
 801567a:	2300      	movs	r3, #0
 801567c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801567e:	683b      	ldr	r3, [r7, #0]
 8015680:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8015684:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8015686:	bf00      	nop
 8015688:	370c      	adds	r7, #12
 801568a:	46bd      	mov	sp, r7
 801568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015690:	4770      	bx	lr
 8015692:	bf00      	nop
 8015694:	24000064 	.word	0x24000064
	...

080156a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80156a0:	f3ef 8009 	mrs	r0, PSP
 80156a4:	f3bf 8f6f 	isb	sy
 80156a8:	4b15      	ldr	r3, [pc, #84]	; (8015700 <pxCurrentTCBConst>)
 80156aa:	681a      	ldr	r2, [r3, #0]
 80156ac:	f01e 0f10 	tst.w	lr, #16
 80156b0:	bf08      	it	eq
 80156b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80156b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80156ba:	6010      	str	r0, [r2, #0]
 80156bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80156c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80156c4:	f380 8811 	msr	BASEPRI, r0
 80156c8:	f3bf 8f4f 	dsb	sy
 80156cc:	f3bf 8f6f 	isb	sy
 80156d0:	f001 fd68 	bl	80171a4 <vTaskSwitchContext>
 80156d4:	f04f 0000 	mov.w	r0, #0
 80156d8:	f380 8811 	msr	BASEPRI, r0
 80156dc:	bc09      	pop	{r0, r3}
 80156de:	6819      	ldr	r1, [r3, #0]
 80156e0:	6808      	ldr	r0, [r1, #0]
 80156e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80156e6:	f01e 0f10 	tst.w	lr, #16
 80156ea:	bf08      	it	eq
 80156ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80156f0:	f380 8809 	msr	PSP, r0
 80156f4:	f3bf 8f6f 	isb	sy
 80156f8:	4770      	bx	lr
 80156fa:	bf00      	nop
 80156fc:	f3af 8000 	nop.w

08015700 <pxCurrentTCBConst>:
 8015700:	24024b04 	.word	0x24024b04
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8015704:	bf00      	nop
 8015706:	bf00      	nop

08015708 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8015708:	b580      	push	{r7, lr}
 801570a:	b082      	sub	sp, #8
 801570c:	af00      	add	r7, sp, #0
	__asm volatile
 801570e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015712:	f383 8811 	msr	BASEPRI, r3
 8015716:	f3bf 8f6f 	isb	sy
 801571a:	f3bf 8f4f 	dsb	sy
 801571e:	607b      	str	r3, [r7, #4]
}
 8015720:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8015722:	f001 fc47 	bl	8016fb4 <xTaskIncrementTick>
 8015726:	4603      	mov	r3, r0
 8015728:	2b00      	cmp	r3, #0
 801572a:	d003      	beq.n	8015734 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801572c:	4b06      	ldr	r3, [pc, #24]	; (8015748 <xPortSysTickHandler+0x40>)
 801572e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015732:	601a      	str	r2, [r3, #0]
 8015734:	2300      	movs	r3, #0
 8015736:	603b      	str	r3, [r7, #0]
	__asm volatile
 8015738:	683b      	ldr	r3, [r7, #0]
 801573a:	f383 8811 	msr	BASEPRI, r3
}
 801573e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8015740:	bf00      	nop
 8015742:	3708      	adds	r7, #8
 8015744:	46bd      	mov	sp, r7
 8015746:	bd80      	pop	{r7, pc}
 8015748:	e000ed04 	.word	0xe000ed04

0801574c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801574c:	b480      	push	{r7}
 801574e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8015750:	4b0b      	ldr	r3, [pc, #44]	; (8015780 <vPortSetupTimerInterrupt+0x34>)
 8015752:	2200      	movs	r2, #0
 8015754:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8015756:	4b0b      	ldr	r3, [pc, #44]	; (8015784 <vPortSetupTimerInterrupt+0x38>)
 8015758:	2200      	movs	r2, #0
 801575a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801575c:	4b0a      	ldr	r3, [pc, #40]	; (8015788 <vPortSetupTimerInterrupt+0x3c>)
 801575e:	681b      	ldr	r3, [r3, #0]
 8015760:	4a0a      	ldr	r2, [pc, #40]	; (801578c <vPortSetupTimerInterrupt+0x40>)
 8015762:	fba2 2303 	umull	r2, r3, r2, r3
 8015766:	099b      	lsrs	r3, r3, #6
 8015768:	4a09      	ldr	r2, [pc, #36]	; (8015790 <vPortSetupTimerInterrupt+0x44>)
 801576a:	3b01      	subs	r3, #1
 801576c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801576e:	4b04      	ldr	r3, [pc, #16]	; (8015780 <vPortSetupTimerInterrupt+0x34>)
 8015770:	2207      	movs	r2, #7
 8015772:	601a      	str	r2, [r3, #0]
}
 8015774:	bf00      	nop
 8015776:	46bd      	mov	sp, r7
 8015778:	f85d 7b04 	ldr.w	r7, [sp], #4
 801577c:	4770      	bx	lr
 801577e:	bf00      	nop
 8015780:	e000e010 	.word	0xe000e010
 8015784:	e000e018 	.word	0xe000e018
 8015788:	24000054 	.word	0x24000054
 801578c:	10624dd3 	.word	0x10624dd3
 8015790:	e000e014 	.word	0xe000e014

08015794 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8015794:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80157a4 <vPortEnableVFP+0x10>
 8015798:	6801      	ldr	r1, [r0, #0]
 801579a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801579e:	6001      	str	r1, [r0, #0]
 80157a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80157a2:	bf00      	nop
 80157a4:	e000ed88 	.word	0xe000ed88

080157a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80157a8:	b480      	push	{r7}
 80157aa:	b085      	sub	sp, #20
 80157ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80157ae:	f3ef 8305 	mrs	r3, IPSR
 80157b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80157b4:	68fb      	ldr	r3, [r7, #12]
 80157b6:	2b0f      	cmp	r3, #15
 80157b8:	d914      	bls.n	80157e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80157ba:	4a17      	ldr	r2, [pc, #92]	; (8015818 <vPortValidateInterruptPriority+0x70>)
 80157bc:	68fb      	ldr	r3, [r7, #12]
 80157be:	4413      	add	r3, r2
 80157c0:	781b      	ldrb	r3, [r3, #0]
 80157c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80157c4:	4b15      	ldr	r3, [pc, #84]	; (801581c <vPortValidateInterruptPriority+0x74>)
 80157c6:	781b      	ldrb	r3, [r3, #0]
 80157c8:	7afa      	ldrb	r2, [r7, #11]
 80157ca:	429a      	cmp	r2, r3
 80157cc:	d20a      	bcs.n	80157e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80157ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80157d2:	f383 8811 	msr	BASEPRI, r3
 80157d6:	f3bf 8f6f 	isb	sy
 80157da:	f3bf 8f4f 	dsb	sy
 80157de:	607b      	str	r3, [r7, #4]
}
 80157e0:	bf00      	nop
 80157e2:	e7fe      	b.n	80157e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80157e4:	4b0e      	ldr	r3, [pc, #56]	; (8015820 <vPortValidateInterruptPriority+0x78>)
 80157e6:	681b      	ldr	r3, [r3, #0]
 80157e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80157ec:	4b0d      	ldr	r3, [pc, #52]	; (8015824 <vPortValidateInterruptPriority+0x7c>)
 80157ee:	681b      	ldr	r3, [r3, #0]
 80157f0:	429a      	cmp	r2, r3
 80157f2:	d90a      	bls.n	801580a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80157f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80157f8:	f383 8811 	msr	BASEPRI, r3
 80157fc:	f3bf 8f6f 	isb	sy
 8015800:	f3bf 8f4f 	dsb	sy
 8015804:	603b      	str	r3, [r7, #0]
}
 8015806:	bf00      	nop
 8015808:	e7fe      	b.n	8015808 <vPortValidateInterruptPriority+0x60>
	}
 801580a:	bf00      	nop
 801580c:	3714      	adds	r7, #20
 801580e:	46bd      	mov	sp, r7
 8015810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015814:	4770      	bx	lr
 8015816:	bf00      	nop
 8015818:	e000e3f0 	.word	0xe000e3f0
 801581c:	24024abc 	.word	0x24024abc
 8015820:	e000ed0c 	.word	0xe000ed0c
 8015824:	24024ac0 	.word	0x24024ac0

08015828 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8015828:	b580      	push	{r7, lr}
 801582a:	b084      	sub	sp, #16
 801582c:	af00      	add	r7, sp, #0
 801582e:	6078      	str	r0, [r7, #4]
 8015830:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8015832:	687b      	ldr	r3, [r7, #4]
 8015834:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8015836:	68fb      	ldr	r3, [r7, #12]
 8015838:	2b00      	cmp	r3, #0
 801583a:	d10a      	bne.n	8015852 <xQueueGenericReset+0x2a>
	__asm volatile
 801583c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015840:	f383 8811 	msr	BASEPRI, r3
 8015844:	f3bf 8f6f 	isb	sy
 8015848:	f3bf 8f4f 	dsb	sy
 801584c:	60bb      	str	r3, [r7, #8]
}
 801584e:	bf00      	nop
 8015850:	e7fe      	b.n	8015850 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8015852:	f7ff fec7 	bl	80155e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8015856:	68fb      	ldr	r3, [r7, #12]
 8015858:	681a      	ldr	r2, [r3, #0]
 801585a:	68fb      	ldr	r3, [r7, #12]
 801585c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801585e:	68f9      	ldr	r1, [r7, #12]
 8015860:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8015862:	fb01 f303 	mul.w	r3, r1, r3
 8015866:	441a      	add	r2, r3
 8015868:	68fb      	ldr	r3, [r7, #12]
 801586a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801586c:	68fb      	ldr	r3, [r7, #12]
 801586e:	2200      	movs	r2, #0
 8015870:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8015872:	68fb      	ldr	r3, [r7, #12]
 8015874:	681a      	ldr	r2, [r3, #0]
 8015876:	68fb      	ldr	r3, [r7, #12]
 8015878:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801587a:	68fb      	ldr	r3, [r7, #12]
 801587c:	681a      	ldr	r2, [r3, #0]
 801587e:	68fb      	ldr	r3, [r7, #12]
 8015880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015882:	3b01      	subs	r3, #1
 8015884:	68f9      	ldr	r1, [r7, #12]
 8015886:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8015888:	fb01 f303 	mul.w	r3, r1, r3
 801588c:	441a      	add	r2, r3
 801588e:	68fb      	ldr	r3, [r7, #12]
 8015890:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8015892:	68fb      	ldr	r3, [r7, #12]
 8015894:	22ff      	movs	r2, #255	; 0xff
 8015896:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801589a:	68fb      	ldr	r3, [r7, #12]
 801589c:	22ff      	movs	r2, #255	; 0xff
 801589e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80158a2:	683b      	ldr	r3, [r7, #0]
 80158a4:	2b00      	cmp	r3, #0
 80158a6:	d114      	bne.n	80158d2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80158a8:	68fb      	ldr	r3, [r7, #12]
 80158aa:	691b      	ldr	r3, [r3, #16]
 80158ac:	2b00      	cmp	r3, #0
 80158ae:	d01a      	beq.n	80158e6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80158b0:	68fb      	ldr	r3, [r7, #12]
 80158b2:	3310      	adds	r3, #16
 80158b4:	4618      	mov	r0, r3
 80158b6:	f001 fd2d 	bl	8017314 <xTaskRemoveFromEventList>
 80158ba:	4603      	mov	r3, r0
 80158bc:	2b00      	cmp	r3, #0
 80158be:	d012      	beq.n	80158e6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80158c0:	4b0c      	ldr	r3, [pc, #48]	; (80158f4 <xQueueGenericReset+0xcc>)
 80158c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80158c6:	601a      	str	r2, [r3, #0]
 80158c8:	f3bf 8f4f 	dsb	sy
 80158cc:	f3bf 8f6f 	isb	sy
 80158d0:	e009      	b.n	80158e6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80158d2:	68fb      	ldr	r3, [r7, #12]
 80158d4:	3310      	adds	r3, #16
 80158d6:	4618      	mov	r0, r3
 80158d8:	f7ff fca6 	bl	8015228 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80158dc:	68fb      	ldr	r3, [r7, #12]
 80158de:	3324      	adds	r3, #36	; 0x24
 80158e0:	4618      	mov	r0, r3
 80158e2:	f7ff fca1 	bl	8015228 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80158e6:	f7ff fead 	bl	8015644 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80158ea:	2301      	movs	r3, #1
}
 80158ec:	4618      	mov	r0, r3
 80158ee:	3710      	adds	r7, #16
 80158f0:	46bd      	mov	sp, r7
 80158f2:	bd80      	pop	{r7, pc}
 80158f4:	e000ed04 	.word	0xe000ed04

080158f8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80158f8:	b580      	push	{r7, lr}
 80158fa:	b08e      	sub	sp, #56	; 0x38
 80158fc:	af02      	add	r7, sp, #8
 80158fe:	60f8      	str	r0, [r7, #12]
 8015900:	60b9      	str	r1, [r7, #8]
 8015902:	607a      	str	r2, [r7, #4]
 8015904:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8015906:	68fb      	ldr	r3, [r7, #12]
 8015908:	2b00      	cmp	r3, #0
 801590a:	d10a      	bne.n	8015922 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 801590c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015910:	f383 8811 	msr	BASEPRI, r3
 8015914:	f3bf 8f6f 	isb	sy
 8015918:	f3bf 8f4f 	dsb	sy
 801591c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801591e:	bf00      	nop
 8015920:	e7fe      	b.n	8015920 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8015922:	683b      	ldr	r3, [r7, #0]
 8015924:	2b00      	cmp	r3, #0
 8015926:	d10a      	bne.n	801593e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8015928:	f04f 0350 	mov.w	r3, #80	; 0x50
 801592c:	f383 8811 	msr	BASEPRI, r3
 8015930:	f3bf 8f6f 	isb	sy
 8015934:	f3bf 8f4f 	dsb	sy
 8015938:	627b      	str	r3, [r7, #36]	; 0x24
}
 801593a:	bf00      	nop
 801593c:	e7fe      	b.n	801593c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801593e:	687b      	ldr	r3, [r7, #4]
 8015940:	2b00      	cmp	r3, #0
 8015942:	d002      	beq.n	801594a <xQueueGenericCreateStatic+0x52>
 8015944:	68bb      	ldr	r3, [r7, #8]
 8015946:	2b00      	cmp	r3, #0
 8015948:	d001      	beq.n	801594e <xQueueGenericCreateStatic+0x56>
 801594a:	2301      	movs	r3, #1
 801594c:	e000      	b.n	8015950 <xQueueGenericCreateStatic+0x58>
 801594e:	2300      	movs	r3, #0
 8015950:	2b00      	cmp	r3, #0
 8015952:	d10a      	bne.n	801596a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8015954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015958:	f383 8811 	msr	BASEPRI, r3
 801595c:	f3bf 8f6f 	isb	sy
 8015960:	f3bf 8f4f 	dsb	sy
 8015964:	623b      	str	r3, [r7, #32]
}
 8015966:	bf00      	nop
 8015968:	e7fe      	b.n	8015968 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801596a:	687b      	ldr	r3, [r7, #4]
 801596c:	2b00      	cmp	r3, #0
 801596e:	d102      	bne.n	8015976 <xQueueGenericCreateStatic+0x7e>
 8015970:	68bb      	ldr	r3, [r7, #8]
 8015972:	2b00      	cmp	r3, #0
 8015974:	d101      	bne.n	801597a <xQueueGenericCreateStatic+0x82>
 8015976:	2301      	movs	r3, #1
 8015978:	e000      	b.n	801597c <xQueueGenericCreateStatic+0x84>
 801597a:	2300      	movs	r3, #0
 801597c:	2b00      	cmp	r3, #0
 801597e:	d10a      	bne.n	8015996 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8015980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015984:	f383 8811 	msr	BASEPRI, r3
 8015988:	f3bf 8f6f 	isb	sy
 801598c:	f3bf 8f4f 	dsb	sy
 8015990:	61fb      	str	r3, [r7, #28]
}
 8015992:	bf00      	nop
 8015994:	e7fe      	b.n	8015994 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8015996:	2350      	movs	r3, #80	; 0x50
 8015998:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801599a:	697b      	ldr	r3, [r7, #20]
 801599c:	2b50      	cmp	r3, #80	; 0x50
 801599e:	d00a      	beq.n	80159b6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80159a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80159a4:	f383 8811 	msr	BASEPRI, r3
 80159a8:	f3bf 8f6f 	isb	sy
 80159ac:	f3bf 8f4f 	dsb	sy
 80159b0:	61bb      	str	r3, [r7, #24]
}
 80159b2:	bf00      	nop
 80159b4:	e7fe      	b.n	80159b4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80159b6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80159b8:	683b      	ldr	r3, [r7, #0]
 80159ba:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80159bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159be:	2b00      	cmp	r3, #0
 80159c0:	d00d      	beq.n	80159de <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80159c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159c4:	2201      	movs	r2, #1
 80159c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80159ca:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80159ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159d0:	9300      	str	r3, [sp, #0]
 80159d2:	4613      	mov	r3, r2
 80159d4:	687a      	ldr	r2, [r7, #4]
 80159d6:	68b9      	ldr	r1, [r7, #8]
 80159d8:	68f8      	ldr	r0, [r7, #12]
 80159da:	f000 f83f 	bl	8015a5c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80159de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80159e0:	4618      	mov	r0, r3
 80159e2:	3730      	adds	r7, #48	; 0x30
 80159e4:	46bd      	mov	sp, r7
 80159e6:	bd80      	pop	{r7, pc}

080159e8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80159e8:	b580      	push	{r7, lr}
 80159ea:	b08a      	sub	sp, #40	; 0x28
 80159ec:	af02      	add	r7, sp, #8
 80159ee:	60f8      	str	r0, [r7, #12]
 80159f0:	60b9      	str	r1, [r7, #8]
 80159f2:	4613      	mov	r3, r2
 80159f4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80159f6:	68fb      	ldr	r3, [r7, #12]
 80159f8:	2b00      	cmp	r3, #0
 80159fa:	d10a      	bne.n	8015a12 <xQueueGenericCreate+0x2a>
	__asm volatile
 80159fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a00:	f383 8811 	msr	BASEPRI, r3
 8015a04:	f3bf 8f6f 	isb	sy
 8015a08:	f3bf 8f4f 	dsb	sy
 8015a0c:	613b      	str	r3, [r7, #16]
}
 8015a0e:	bf00      	nop
 8015a10:	e7fe      	b.n	8015a10 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015a12:	68fb      	ldr	r3, [r7, #12]
 8015a14:	68ba      	ldr	r2, [r7, #8]
 8015a16:	fb02 f303 	mul.w	r3, r2, r3
 8015a1a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8015a1c:	69fb      	ldr	r3, [r7, #28]
 8015a1e:	3350      	adds	r3, #80	; 0x50
 8015a20:	4618      	mov	r0, r3
 8015a22:	f7ff fa15 	bl	8014e50 <pvPortMalloc>
 8015a26:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8015a28:	69bb      	ldr	r3, [r7, #24]
 8015a2a:	2b00      	cmp	r3, #0
 8015a2c:	d011      	beq.n	8015a52 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8015a2e:	69bb      	ldr	r3, [r7, #24]
 8015a30:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8015a32:	697b      	ldr	r3, [r7, #20]
 8015a34:	3350      	adds	r3, #80	; 0x50
 8015a36:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8015a38:	69bb      	ldr	r3, [r7, #24]
 8015a3a:	2200      	movs	r2, #0
 8015a3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8015a40:	79fa      	ldrb	r2, [r7, #7]
 8015a42:	69bb      	ldr	r3, [r7, #24]
 8015a44:	9300      	str	r3, [sp, #0]
 8015a46:	4613      	mov	r3, r2
 8015a48:	697a      	ldr	r2, [r7, #20]
 8015a4a:	68b9      	ldr	r1, [r7, #8]
 8015a4c:	68f8      	ldr	r0, [r7, #12]
 8015a4e:	f000 f805 	bl	8015a5c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8015a52:	69bb      	ldr	r3, [r7, #24]
	}
 8015a54:	4618      	mov	r0, r3
 8015a56:	3720      	adds	r7, #32
 8015a58:	46bd      	mov	sp, r7
 8015a5a:	bd80      	pop	{r7, pc}

08015a5c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8015a5c:	b580      	push	{r7, lr}
 8015a5e:	b084      	sub	sp, #16
 8015a60:	af00      	add	r7, sp, #0
 8015a62:	60f8      	str	r0, [r7, #12]
 8015a64:	60b9      	str	r1, [r7, #8]
 8015a66:	607a      	str	r2, [r7, #4]
 8015a68:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8015a6a:	68bb      	ldr	r3, [r7, #8]
 8015a6c:	2b00      	cmp	r3, #0
 8015a6e:	d103      	bne.n	8015a78 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8015a70:	69bb      	ldr	r3, [r7, #24]
 8015a72:	69ba      	ldr	r2, [r7, #24]
 8015a74:	601a      	str	r2, [r3, #0]
 8015a76:	e002      	b.n	8015a7e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8015a78:	69bb      	ldr	r3, [r7, #24]
 8015a7a:	687a      	ldr	r2, [r7, #4]
 8015a7c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8015a7e:	69bb      	ldr	r3, [r7, #24]
 8015a80:	68fa      	ldr	r2, [r7, #12]
 8015a82:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8015a84:	69bb      	ldr	r3, [r7, #24]
 8015a86:	68ba      	ldr	r2, [r7, #8]
 8015a88:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8015a8a:	2101      	movs	r1, #1
 8015a8c:	69b8      	ldr	r0, [r7, #24]
 8015a8e:	f7ff fecb 	bl	8015828 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8015a92:	69bb      	ldr	r3, [r7, #24]
 8015a94:	78fa      	ldrb	r2, [r7, #3]
 8015a96:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8015a9a:	bf00      	nop
 8015a9c:	3710      	adds	r7, #16
 8015a9e:	46bd      	mov	sp, r7
 8015aa0:	bd80      	pop	{r7, pc}

08015aa2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8015aa2:	b580      	push	{r7, lr}
 8015aa4:	b082      	sub	sp, #8
 8015aa6:	af00      	add	r7, sp, #0
 8015aa8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8015aaa:	687b      	ldr	r3, [r7, #4]
 8015aac:	2b00      	cmp	r3, #0
 8015aae:	d00e      	beq.n	8015ace <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8015ab0:	687b      	ldr	r3, [r7, #4]
 8015ab2:	2200      	movs	r2, #0
 8015ab4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8015ab6:	687b      	ldr	r3, [r7, #4]
 8015ab8:	2200      	movs	r2, #0
 8015aba:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8015abc:	687b      	ldr	r3, [r7, #4]
 8015abe:	2200      	movs	r2, #0
 8015ac0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8015ac2:	2300      	movs	r3, #0
 8015ac4:	2200      	movs	r2, #0
 8015ac6:	2100      	movs	r1, #0
 8015ac8:	6878      	ldr	r0, [r7, #4]
 8015aca:	f000 f90b 	bl	8015ce4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8015ace:	bf00      	nop
 8015ad0:	3708      	adds	r7, #8
 8015ad2:	46bd      	mov	sp, r7
 8015ad4:	bd80      	pop	{r7, pc}

08015ad6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8015ad6:	b580      	push	{r7, lr}
 8015ad8:	b086      	sub	sp, #24
 8015ada:	af00      	add	r7, sp, #0
 8015adc:	4603      	mov	r3, r0
 8015ade:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8015ae0:	2301      	movs	r3, #1
 8015ae2:	617b      	str	r3, [r7, #20]
 8015ae4:	2300      	movs	r3, #0
 8015ae6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8015ae8:	79fb      	ldrb	r3, [r7, #7]
 8015aea:	461a      	mov	r2, r3
 8015aec:	6939      	ldr	r1, [r7, #16]
 8015aee:	6978      	ldr	r0, [r7, #20]
 8015af0:	f7ff ff7a 	bl	80159e8 <xQueueGenericCreate>
 8015af4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8015af6:	68f8      	ldr	r0, [r7, #12]
 8015af8:	f7ff ffd3 	bl	8015aa2 <prvInitialiseMutex>

		return xNewQueue;
 8015afc:	68fb      	ldr	r3, [r7, #12]
	}
 8015afe:	4618      	mov	r0, r3
 8015b00:	3718      	adds	r7, #24
 8015b02:	46bd      	mov	sp, r7
 8015b04:	bd80      	pop	{r7, pc}

08015b06 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8015b06:	b580      	push	{r7, lr}
 8015b08:	b088      	sub	sp, #32
 8015b0a:	af02      	add	r7, sp, #8
 8015b0c:	4603      	mov	r3, r0
 8015b0e:	6039      	str	r1, [r7, #0]
 8015b10:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8015b12:	2301      	movs	r3, #1
 8015b14:	617b      	str	r3, [r7, #20]
 8015b16:	2300      	movs	r3, #0
 8015b18:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8015b1a:	79fb      	ldrb	r3, [r7, #7]
 8015b1c:	9300      	str	r3, [sp, #0]
 8015b1e:	683b      	ldr	r3, [r7, #0]
 8015b20:	2200      	movs	r2, #0
 8015b22:	6939      	ldr	r1, [r7, #16]
 8015b24:	6978      	ldr	r0, [r7, #20]
 8015b26:	f7ff fee7 	bl	80158f8 <xQueueGenericCreateStatic>
 8015b2a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8015b2c:	68f8      	ldr	r0, [r7, #12]
 8015b2e:	f7ff ffb8 	bl	8015aa2 <prvInitialiseMutex>

		return xNewQueue;
 8015b32:	68fb      	ldr	r3, [r7, #12]
	}
 8015b34:	4618      	mov	r0, r3
 8015b36:	3718      	adds	r7, #24
 8015b38:	46bd      	mov	sp, r7
 8015b3a:	bd80      	pop	{r7, pc}

08015b3c <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8015b3c:	b590      	push	{r4, r7, lr}
 8015b3e:	b087      	sub	sp, #28
 8015b40:	af00      	add	r7, sp, #0
 8015b42:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8015b44:	687b      	ldr	r3, [r7, #4]
 8015b46:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8015b48:	693b      	ldr	r3, [r7, #16]
 8015b4a:	2b00      	cmp	r3, #0
 8015b4c:	d10a      	bne.n	8015b64 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8015b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b52:	f383 8811 	msr	BASEPRI, r3
 8015b56:	f3bf 8f6f 	isb	sy
 8015b5a:	f3bf 8f4f 	dsb	sy
 8015b5e:	60fb      	str	r3, [r7, #12]
}
 8015b60:	bf00      	nop
 8015b62:	e7fe      	b.n	8015b62 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8015b64:	693b      	ldr	r3, [r7, #16]
 8015b66:	689c      	ldr	r4, [r3, #8]
 8015b68:	f001 fd94 	bl	8017694 <xTaskGetCurrentTaskHandle>
 8015b6c:	4603      	mov	r3, r0
 8015b6e:	429c      	cmp	r4, r3
 8015b70:	d111      	bne.n	8015b96 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8015b72:	693b      	ldr	r3, [r7, #16]
 8015b74:	68db      	ldr	r3, [r3, #12]
 8015b76:	1e5a      	subs	r2, r3, #1
 8015b78:	693b      	ldr	r3, [r7, #16]
 8015b7a:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8015b7c:	693b      	ldr	r3, [r7, #16]
 8015b7e:	68db      	ldr	r3, [r3, #12]
 8015b80:	2b00      	cmp	r3, #0
 8015b82:	d105      	bne.n	8015b90 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8015b84:	2300      	movs	r3, #0
 8015b86:	2200      	movs	r2, #0
 8015b88:	2100      	movs	r1, #0
 8015b8a:	6938      	ldr	r0, [r7, #16]
 8015b8c:	f000 f8aa 	bl	8015ce4 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8015b90:	2301      	movs	r3, #1
 8015b92:	617b      	str	r3, [r7, #20]
 8015b94:	e001      	b.n	8015b9a <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8015b96:	2300      	movs	r3, #0
 8015b98:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8015b9a:	697b      	ldr	r3, [r7, #20]
	}
 8015b9c:	4618      	mov	r0, r3
 8015b9e:	371c      	adds	r7, #28
 8015ba0:	46bd      	mov	sp, r7
 8015ba2:	bd90      	pop	{r4, r7, pc}

08015ba4 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8015ba4:	b590      	push	{r4, r7, lr}
 8015ba6:	b087      	sub	sp, #28
 8015ba8:	af00      	add	r7, sp, #0
 8015baa:	6078      	str	r0, [r7, #4]
 8015bac:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8015bae:	687b      	ldr	r3, [r7, #4]
 8015bb0:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8015bb2:	693b      	ldr	r3, [r7, #16]
 8015bb4:	2b00      	cmp	r3, #0
 8015bb6:	d10a      	bne.n	8015bce <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8015bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015bbc:	f383 8811 	msr	BASEPRI, r3
 8015bc0:	f3bf 8f6f 	isb	sy
 8015bc4:	f3bf 8f4f 	dsb	sy
 8015bc8:	60fb      	str	r3, [r7, #12]
}
 8015bca:	bf00      	nop
 8015bcc:	e7fe      	b.n	8015bcc <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8015bce:	693b      	ldr	r3, [r7, #16]
 8015bd0:	689c      	ldr	r4, [r3, #8]
 8015bd2:	f001 fd5f 	bl	8017694 <xTaskGetCurrentTaskHandle>
 8015bd6:	4603      	mov	r3, r0
 8015bd8:	429c      	cmp	r4, r3
 8015bda:	d107      	bne.n	8015bec <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8015bdc:	693b      	ldr	r3, [r7, #16]
 8015bde:	68db      	ldr	r3, [r3, #12]
 8015be0:	1c5a      	adds	r2, r3, #1
 8015be2:	693b      	ldr	r3, [r7, #16]
 8015be4:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8015be6:	2301      	movs	r3, #1
 8015be8:	617b      	str	r3, [r7, #20]
 8015bea:	e00c      	b.n	8015c06 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8015bec:	6839      	ldr	r1, [r7, #0]
 8015bee:	6938      	ldr	r0, [r7, #16]
 8015bf0:	f000 fb7e 	bl	80162f0 <xQueueSemaphoreTake>
 8015bf4:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8015bf6:	697b      	ldr	r3, [r7, #20]
 8015bf8:	2b00      	cmp	r3, #0
 8015bfa:	d004      	beq.n	8015c06 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8015bfc:	693b      	ldr	r3, [r7, #16]
 8015bfe:	68db      	ldr	r3, [r3, #12]
 8015c00:	1c5a      	adds	r2, r3, #1
 8015c02:	693b      	ldr	r3, [r7, #16]
 8015c04:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8015c06:	697b      	ldr	r3, [r7, #20]
	}
 8015c08:	4618      	mov	r0, r3
 8015c0a:	371c      	adds	r7, #28
 8015c0c:	46bd      	mov	sp, r7
 8015c0e:	bd90      	pop	{r4, r7, pc}

08015c10 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8015c10:	b580      	push	{r7, lr}
 8015c12:	b08a      	sub	sp, #40	; 0x28
 8015c14:	af02      	add	r7, sp, #8
 8015c16:	60f8      	str	r0, [r7, #12]
 8015c18:	60b9      	str	r1, [r7, #8]
 8015c1a:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8015c1c:	68fb      	ldr	r3, [r7, #12]
 8015c1e:	2b00      	cmp	r3, #0
 8015c20:	d10a      	bne.n	8015c38 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8015c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c26:	f383 8811 	msr	BASEPRI, r3
 8015c2a:	f3bf 8f6f 	isb	sy
 8015c2e:	f3bf 8f4f 	dsb	sy
 8015c32:	61bb      	str	r3, [r7, #24]
}
 8015c34:	bf00      	nop
 8015c36:	e7fe      	b.n	8015c36 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8015c38:	68ba      	ldr	r2, [r7, #8]
 8015c3a:	68fb      	ldr	r3, [r7, #12]
 8015c3c:	429a      	cmp	r2, r3
 8015c3e:	d90a      	bls.n	8015c56 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8015c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c44:	f383 8811 	msr	BASEPRI, r3
 8015c48:	f3bf 8f6f 	isb	sy
 8015c4c:	f3bf 8f4f 	dsb	sy
 8015c50:	617b      	str	r3, [r7, #20]
}
 8015c52:	bf00      	nop
 8015c54:	e7fe      	b.n	8015c54 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8015c56:	2302      	movs	r3, #2
 8015c58:	9300      	str	r3, [sp, #0]
 8015c5a:	687b      	ldr	r3, [r7, #4]
 8015c5c:	2200      	movs	r2, #0
 8015c5e:	2100      	movs	r1, #0
 8015c60:	68f8      	ldr	r0, [r7, #12]
 8015c62:	f7ff fe49 	bl	80158f8 <xQueueGenericCreateStatic>
 8015c66:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8015c68:	69fb      	ldr	r3, [r7, #28]
 8015c6a:	2b00      	cmp	r3, #0
 8015c6c:	d002      	beq.n	8015c74 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8015c6e:	69fb      	ldr	r3, [r7, #28]
 8015c70:	68ba      	ldr	r2, [r7, #8]
 8015c72:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8015c74:	69fb      	ldr	r3, [r7, #28]
	}
 8015c76:	4618      	mov	r0, r3
 8015c78:	3720      	adds	r7, #32
 8015c7a:	46bd      	mov	sp, r7
 8015c7c:	bd80      	pop	{r7, pc}

08015c7e <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8015c7e:	b580      	push	{r7, lr}
 8015c80:	b086      	sub	sp, #24
 8015c82:	af00      	add	r7, sp, #0
 8015c84:	6078      	str	r0, [r7, #4]
 8015c86:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8015c88:	687b      	ldr	r3, [r7, #4]
 8015c8a:	2b00      	cmp	r3, #0
 8015c8c:	d10a      	bne.n	8015ca4 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8015c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c92:	f383 8811 	msr	BASEPRI, r3
 8015c96:	f3bf 8f6f 	isb	sy
 8015c9a:	f3bf 8f4f 	dsb	sy
 8015c9e:	613b      	str	r3, [r7, #16]
}
 8015ca0:	bf00      	nop
 8015ca2:	e7fe      	b.n	8015ca2 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8015ca4:	683a      	ldr	r2, [r7, #0]
 8015ca6:	687b      	ldr	r3, [r7, #4]
 8015ca8:	429a      	cmp	r2, r3
 8015caa:	d90a      	bls.n	8015cc2 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8015cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015cb0:	f383 8811 	msr	BASEPRI, r3
 8015cb4:	f3bf 8f6f 	isb	sy
 8015cb8:	f3bf 8f4f 	dsb	sy
 8015cbc:	60fb      	str	r3, [r7, #12]
}
 8015cbe:	bf00      	nop
 8015cc0:	e7fe      	b.n	8015cc0 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8015cc2:	2202      	movs	r2, #2
 8015cc4:	2100      	movs	r1, #0
 8015cc6:	6878      	ldr	r0, [r7, #4]
 8015cc8:	f7ff fe8e 	bl	80159e8 <xQueueGenericCreate>
 8015ccc:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8015cce:	697b      	ldr	r3, [r7, #20]
 8015cd0:	2b00      	cmp	r3, #0
 8015cd2:	d002      	beq.n	8015cda <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8015cd4:	697b      	ldr	r3, [r7, #20]
 8015cd6:	683a      	ldr	r2, [r7, #0]
 8015cd8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8015cda:	697b      	ldr	r3, [r7, #20]
	}
 8015cdc:	4618      	mov	r0, r3
 8015cde:	3718      	adds	r7, #24
 8015ce0:	46bd      	mov	sp, r7
 8015ce2:	bd80      	pop	{r7, pc}

08015ce4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8015ce4:	b580      	push	{r7, lr}
 8015ce6:	b08e      	sub	sp, #56	; 0x38
 8015ce8:	af00      	add	r7, sp, #0
 8015cea:	60f8      	str	r0, [r7, #12]
 8015cec:	60b9      	str	r1, [r7, #8]
 8015cee:	607a      	str	r2, [r7, #4]
 8015cf0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8015cf2:	2300      	movs	r3, #0
 8015cf4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8015cf6:	68fb      	ldr	r3, [r7, #12]
 8015cf8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8015cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015cfc:	2b00      	cmp	r3, #0
 8015cfe:	d10a      	bne.n	8015d16 <xQueueGenericSend+0x32>
	__asm volatile
 8015d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d04:	f383 8811 	msr	BASEPRI, r3
 8015d08:	f3bf 8f6f 	isb	sy
 8015d0c:	f3bf 8f4f 	dsb	sy
 8015d10:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8015d12:	bf00      	nop
 8015d14:	e7fe      	b.n	8015d14 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015d16:	68bb      	ldr	r3, [r7, #8]
 8015d18:	2b00      	cmp	r3, #0
 8015d1a:	d103      	bne.n	8015d24 <xQueueGenericSend+0x40>
 8015d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015d20:	2b00      	cmp	r3, #0
 8015d22:	d101      	bne.n	8015d28 <xQueueGenericSend+0x44>
 8015d24:	2301      	movs	r3, #1
 8015d26:	e000      	b.n	8015d2a <xQueueGenericSend+0x46>
 8015d28:	2300      	movs	r3, #0
 8015d2a:	2b00      	cmp	r3, #0
 8015d2c:	d10a      	bne.n	8015d44 <xQueueGenericSend+0x60>
	__asm volatile
 8015d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d32:	f383 8811 	msr	BASEPRI, r3
 8015d36:	f3bf 8f6f 	isb	sy
 8015d3a:	f3bf 8f4f 	dsb	sy
 8015d3e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8015d40:	bf00      	nop
 8015d42:	e7fe      	b.n	8015d42 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8015d44:	683b      	ldr	r3, [r7, #0]
 8015d46:	2b02      	cmp	r3, #2
 8015d48:	d103      	bne.n	8015d52 <xQueueGenericSend+0x6e>
 8015d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015d4e:	2b01      	cmp	r3, #1
 8015d50:	d101      	bne.n	8015d56 <xQueueGenericSend+0x72>
 8015d52:	2301      	movs	r3, #1
 8015d54:	e000      	b.n	8015d58 <xQueueGenericSend+0x74>
 8015d56:	2300      	movs	r3, #0
 8015d58:	2b00      	cmp	r3, #0
 8015d5a:	d10a      	bne.n	8015d72 <xQueueGenericSend+0x8e>
	__asm volatile
 8015d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d60:	f383 8811 	msr	BASEPRI, r3
 8015d64:	f3bf 8f6f 	isb	sy
 8015d68:	f3bf 8f4f 	dsb	sy
 8015d6c:	623b      	str	r3, [r7, #32]
}
 8015d6e:	bf00      	nop
 8015d70:	e7fe      	b.n	8015d70 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015d72:	f001 fc9f 	bl	80176b4 <xTaskGetSchedulerState>
 8015d76:	4603      	mov	r3, r0
 8015d78:	2b00      	cmp	r3, #0
 8015d7a:	d102      	bne.n	8015d82 <xQueueGenericSend+0x9e>
 8015d7c:	687b      	ldr	r3, [r7, #4]
 8015d7e:	2b00      	cmp	r3, #0
 8015d80:	d101      	bne.n	8015d86 <xQueueGenericSend+0xa2>
 8015d82:	2301      	movs	r3, #1
 8015d84:	e000      	b.n	8015d88 <xQueueGenericSend+0xa4>
 8015d86:	2300      	movs	r3, #0
 8015d88:	2b00      	cmp	r3, #0
 8015d8a:	d10a      	bne.n	8015da2 <xQueueGenericSend+0xbe>
	__asm volatile
 8015d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d90:	f383 8811 	msr	BASEPRI, r3
 8015d94:	f3bf 8f6f 	isb	sy
 8015d98:	f3bf 8f4f 	dsb	sy
 8015d9c:	61fb      	str	r3, [r7, #28]
}
 8015d9e:	bf00      	nop
 8015da0:	e7fe      	b.n	8015da0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8015da2:	f7ff fc1f 	bl	80155e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8015da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015da8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015dac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015dae:	429a      	cmp	r2, r3
 8015db0:	d302      	bcc.n	8015db8 <xQueueGenericSend+0xd4>
 8015db2:	683b      	ldr	r3, [r7, #0]
 8015db4:	2b02      	cmp	r3, #2
 8015db6:	d129      	bne.n	8015e0c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8015db8:	683a      	ldr	r2, [r7, #0]
 8015dba:	68b9      	ldr	r1, [r7, #8]
 8015dbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015dbe:	f000 fc5e 	bl	801667e <prvCopyDataToQueue>
 8015dc2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015dc8:	2b00      	cmp	r3, #0
 8015dca:	d010      	beq.n	8015dee <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015dce:	3324      	adds	r3, #36	; 0x24
 8015dd0:	4618      	mov	r0, r3
 8015dd2:	f001 fa9f 	bl	8017314 <xTaskRemoveFromEventList>
 8015dd6:	4603      	mov	r3, r0
 8015dd8:	2b00      	cmp	r3, #0
 8015dda:	d013      	beq.n	8015e04 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8015ddc:	4b3f      	ldr	r3, [pc, #252]	; (8015edc <xQueueGenericSend+0x1f8>)
 8015dde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015de2:	601a      	str	r2, [r3, #0]
 8015de4:	f3bf 8f4f 	dsb	sy
 8015de8:	f3bf 8f6f 	isb	sy
 8015dec:	e00a      	b.n	8015e04 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8015dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015df0:	2b00      	cmp	r3, #0
 8015df2:	d007      	beq.n	8015e04 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8015df4:	4b39      	ldr	r3, [pc, #228]	; (8015edc <xQueueGenericSend+0x1f8>)
 8015df6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015dfa:	601a      	str	r2, [r3, #0]
 8015dfc:	f3bf 8f4f 	dsb	sy
 8015e00:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8015e04:	f7ff fc1e 	bl	8015644 <vPortExitCritical>
				return pdPASS;
 8015e08:	2301      	movs	r3, #1
 8015e0a:	e063      	b.n	8015ed4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8015e0c:	687b      	ldr	r3, [r7, #4]
 8015e0e:	2b00      	cmp	r3, #0
 8015e10:	d103      	bne.n	8015e1a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8015e12:	f7ff fc17 	bl	8015644 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8015e16:	2300      	movs	r3, #0
 8015e18:	e05c      	b.n	8015ed4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8015e1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015e1c:	2b00      	cmp	r3, #0
 8015e1e:	d106      	bne.n	8015e2e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8015e20:	f107 0314 	add.w	r3, r7, #20
 8015e24:	4618      	mov	r0, r3
 8015e26:	f001 fad9 	bl	80173dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8015e2a:	2301      	movs	r3, #1
 8015e2c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8015e2e:	f7ff fc09 	bl	8015644 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8015e32:	f001 f803 	bl	8016e3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8015e36:	f7ff fbd5 	bl	80155e4 <vPortEnterCritical>
 8015e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015e40:	b25b      	sxtb	r3, r3
 8015e42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015e46:	d103      	bne.n	8015e50 <xQueueGenericSend+0x16c>
 8015e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e4a:	2200      	movs	r2, #0
 8015e4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8015e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015e56:	b25b      	sxtb	r3, r3
 8015e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015e5c:	d103      	bne.n	8015e66 <xQueueGenericSend+0x182>
 8015e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e60:	2200      	movs	r2, #0
 8015e62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8015e66:	f7ff fbed 	bl	8015644 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015e6a:	1d3a      	adds	r2, r7, #4
 8015e6c:	f107 0314 	add.w	r3, r7, #20
 8015e70:	4611      	mov	r1, r2
 8015e72:	4618      	mov	r0, r3
 8015e74:	f001 fac8 	bl	8017408 <xTaskCheckForTimeOut>
 8015e78:	4603      	mov	r3, r0
 8015e7a:	2b00      	cmp	r3, #0
 8015e7c:	d124      	bne.n	8015ec8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8015e7e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015e80:	f000 fcf5 	bl	801686e <prvIsQueueFull>
 8015e84:	4603      	mov	r3, r0
 8015e86:	2b00      	cmp	r3, #0
 8015e88:	d018      	beq.n	8015ebc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8015e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e8c:	3310      	adds	r3, #16
 8015e8e:	687a      	ldr	r2, [r7, #4]
 8015e90:	4611      	mov	r1, r2
 8015e92:	4618      	mov	r0, r3
 8015e94:	f001 f9ee 	bl	8017274 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8015e98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015e9a:	f000 fc80 	bl	801679e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8015e9e:	f000 ffdb 	bl	8016e58 <xTaskResumeAll>
 8015ea2:	4603      	mov	r3, r0
 8015ea4:	2b00      	cmp	r3, #0
 8015ea6:	f47f af7c 	bne.w	8015da2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8015eaa:	4b0c      	ldr	r3, [pc, #48]	; (8015edc <xQueueGenericSend+0x1f8>)
 8015eac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015eb0:	601a      	str	r2, [r3, #0]
 8015eb2:	f3bf 8f4f 	dsb	sy
 8015eb6:	f3bf 8f6f 	isb	sy
 8015eba:	e772      	b.n	8015da2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8015ebc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015ebe:	f000 fc6e 	bl	801679e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8015ec2:	f000 ffc9 	bl	8016e58 <xTaskResumeAll>
 8015ec6:	e76c      	b.n	8015da2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8015ec8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015eca:	f000 fc68 	bl	801679e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8015ece:	f000 ffc3 	bl	8016e58 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8015ed2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8015ed4:	4618      	mov	r0, r3
 8015ed6:	3738      	adds	r7, #56	; 0x38
 8015ed8:	46bd      	mov	sp, r7
 8015eda:	bd80      	pop	{r7, pc}
 8015edc:	e000ed04 	.word	0xe000ed04

08015ee0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8015ee0:	b580      	push	{r7, lr}
 8015ee2:	b090      	sub	sp, #64	; 0x40
 8015ee4:	af00      	add	r7, sp, #0
 8015ee6:	60f8      	str	r0, [r7, #12]
 8015ee8:	60b9      	str	r1, [r7, #8]
 8015eea:	607a      	str	r2, [r7, #4]
 8015eec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8015eee:	68fb      	ldr	r3, [r7, #12]
 8015ef0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8015ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015ef4:	2b00      	cmp	r3, #0
 8015ef6:	d10a      	bne.n	8015f0e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8015ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015efc:	f383 8811 	msr	BASEPRI, r3
 8015f00:	f3bf 8f6f 	isb	sy
 8015f04:	f3bf 8f4f 	dsb	sy
 8015f08:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8015f0a:	bf00      	nop
 8015f0c:	e7fe      	b.n	8015f0c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015f0e:	68bb      	ldr	r3, [r7, #8]
 8015f10:	2b00      	cmp	r3, #0
 8015f12:	d103      	bne.n	8015f1c <xQueueGenericSendFromISR+0x3c>
 8015f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015f18:	2b00      	cmp	r3, #0
 8015f1a:	d101      	bne.n	8015f20 <xQueueGenericSendFromISR+0x40>
 8015f1c:	2301      	movs	r3, #1
 8015f1e:	e000      	b.n	8015f22 <xQueueGenericSendFromISR+0x42>
 8015f20:	2300      	movs	r3, #0
 8015f22:	2b00      	cmp	r3, #0
 8015f24:	d10a      	bne.n	8015f3c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8015f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f2a:	f383 8811 	msr	BASEPRI, r3
 8015f2e:	f3bf 8f6f 	isb	sy
 8015f32:	f3bf 8f4f 	dsb	sy
 8015f36:	627b      	str	r3, [r7, #36]	; 0x24
}
 8015f38:	bf00      	nop
 8015f3a:	e7fe      	b.n	8015f3a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8015f3c:	683b      	ldr	r3, [r7, #0]
 8015f3e:	2b02      	cmp	r3, #2
 8015f40:	d103      	bne.n	8015f4a <xQueueGenericSendFromISR+0x6a>
 8015f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015f44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015f46:	2b01      	cmp	r3, #1
 8015f48:	d101      	bne.n	8015f4e <xQueueGenericSendFromISR+0x6e>
 8015f4a:	2301      	movs	r3, #1
 8015f4c:	e000      	b.n	8015f50 <xQueueGenericSendFromISR+0x70>
 8015f4e:	2300      	movs	r3, #0
 8015f50:	2b00      	cmp	r3, #0
 8015f52:	d10a      	bne.n	8015f6a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8015f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f58:	f383 8811 	msr	BASEPRI, r3
 8015f5c:	f3bf 8f6f 	isb	sy
 8015f60:	f3bf 8f4f 	dsb	sy
 8015f64:	623b      	str	r3, [r7, #32]
}
 8015f66:	bf00      	nop
 8015f68:	e7fe      	b.n	8015f68 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015f6a:	f7ff fc1d 	bl	80157a8 <vPortValidateInterruptPriority>
	__asm volatile
 8015f6e:	f3ef 8211 	mrs	r2, BASEPRI
 8015f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f76:	f383 8811 	msr	BASEPRI, r3
 8015f7a:	f3bf 8f6f 	isb	sy
 8015f7e:	f3bf 8f4f 	dsb	sy
 8015f82:	61fa      	str	r2, [r7, #28]
 8015f84:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8015f86:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8015f88:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8015f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015f8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015f90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015f92:	429a      	cmp	r2, r3
 8015f94:	d302      	bcc.n	8015f9c <xQueueGenericSendFromISR+0xbc>
 8015f96:	683b      	ldr	r3, [r7, #0]
 8015f98:	2b02      	cmp	r3, #2
 8015f9a:	d12f      	bne.n	8015ffc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8015f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015f9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015fa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015faa:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8015fac:	683a      	ldr	r2, [r7, #0]
 8015fae:	68b9      	ldr	r1, [r7, #8]
 8015fb0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8015fb2:	f000 fb64 	bl	801667e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8015fb6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8015fba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015fbe:	d112      	bne.n	8015fe6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015fc4:	2b00      	cmp	r3, #0
 8015fc6:	d016      	beq.n	8015ff6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015fca:	3324      	adds	r3, #36	; 0x24
 8015fcc:	4618      	mov	r0, r3
 8015fce:	f001 f9a1 	bl	8017314 <xTaskRemoveFromEventList>
 8015fd2:	4603      	mov	r3, r0
 8015fd4:	2b00      	cmp	r3, #0
 8015fd6:	d00e      	beq.n	8015ff6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8015fd8:	687b      	ldr	r3, [r7, #4]
 8015fda:	2b00      	cmp	r3, #0
 8015fdc:	d00b      	beq.n	8015ff6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8015fde:	687b      	ldr	r3, [r7, #4]
 8015fe0:	2201      	movs	r2, #1
 8015fe2:	601a      	str	r2, [r3, #0]
 8015fe4:	e007      	b.n	8015ff6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8015fe6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8015fea:	3301      	adds	r3, #1
 8015fec:	b2db      	uxtb	r3, r3
 8015fee:	b25a      	sxtb	r2, r3
 8015ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015ff2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8015ff6:	2301      	movs	r3, #1
 8015ff8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8015ffa:	e001      	b.n	8016000 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8015ffc:	2300      	movs	r3, #0
 8015ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8016000:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016002:	617b      	str	r3, [r7, #20]
	__asm volatile
 8016004:	697b      	ldr	r3, [r7, #20]
 8016006:	f383 8811 	msr	BASEPRI, r3
}
 801600a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801600c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 801600e:	4618      	mov	r0, r3
 8016010:	3740      	adds	r7, #64	; 0x40
 8016012:	46bd      	mov	sp, r7
 8016014:	bd80      	pop	{r7, pc}

08016016 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8016016:	b580      	push	{r7, lr}
 8016018:	b08e      	sub	sp, #56	; 0x38
 801601a:	af00      	add	r7, sp, #0
 801601c:	6078      	str	r0, [r7, #4]
 801601e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8016020:	687b      	ldr	r3, [r7, #4]
 8016022:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8016024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016026:	2b00      	cmp	r3, #0
 8016028:	d10a      	bne.n	8016040 <xQueueGiveFromISR+0x2a>
	__asm volatile
 801602a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801602e:	f383 8811 	msr	BASEPRI, r3
 8016032:	f3bf 8f6f 	isb	sy
 8016036:	f3bf 8f4f 	dsb	sy
 801603a:	623b      	str	r3, [r7, #32]
}
 801603c:	bf00      	nop
 801603e:	e7fe      	b.n	801603e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8016040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016044:	2b00      	cmp	r3, #0
 8016046:	d00a      	beq.n	801605e <xQueueGiveFromISR+0x48>
	__asm volatile
 8016048:	f04f 0350 	mov.w	r3, #80	; 0x50
 801604c:	f383 8811 	msr	BASEPRI, r3
 8016050:	f3bf 8f6f 	isb	sy
 8016054:	f3bf 8f4f 	dsb	sy
 8016058:	61fb      	str	r3, [r7, #28]
}
 801605a:	bf00      	nop
 801605c:	e7fe      	b.n	801605c <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 801605e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016060:	681b      	ldr	r3, [r3, #0]
 8016062:	2b00      	cmp	r3, #0
 8016064:	d103      	bne.n	801606e <xQueueGiveFromISR+0x58>
 8016066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016068:	689b      	ldr	r3, [r3, #8]
 801606a:	2b00      	cmp	r3, #0
 801606c:	d101      	bne.n	8016072 <xQueueGiveFromISR+0x5c>
 801606e:	2301      	movs	r3, #1
 8016070:	e000      	b.n	8016074 <xQueueGiveFromISR+0x5e>
 8016072:	2300      	movs	r3, #0
 8016074:	2b00      	cmp	r3, #0
 8016076:	d10a      	bne.n	801608e <xQueueGiveFromISR+0x78>
	__asm volatile
 8016078:	f04f 0350 	mov.w	r3, #80	; 0x50
 801607c:	f383 8811 	msr	BASEPRI, r3
 8016080:	f3bf 8f6f 	isb	sy
 8016084:	f3bf 8f4f 	dsb	sy
 8016088:	61bb      	str	r3, [r7, #24]
}
 801608a:	bf00      	nop
 801608c:	e7fe      	b.n	801608c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801608e:	f7ff fb8b 	bl	80157a8 <vPortValidateInterruptPriority>
	__asm volatile
 8016092:	f3ef 8211 	mrs	r2, BASEPRI
 8016096:	f04f 0350 	mov.w	r3, #80	; 0x50
 801609a:	f383 8811 	msr	BASEPRI, r3
 801609e:	f3bf 8f6f 	isb	sy
 80160a2:	f3bf 8f4f 	dsb	sy
 80160a6:	617a      	str	r2, [r7, #20]
 80160a8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80160aa:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80160ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80160ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80160b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80160b2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80160b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80160b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80160b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80160ba:	429a      	cmp	r2, r3
 80160bc:	d22b      	bcs.n	8016116 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80160be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80160c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80160c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80160c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80160ca:	1c5a      	adds	r2, r3, #1
 80160cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80160ce:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80160d0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80160d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80160d8:	d112      	bne.n	8016100 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80160da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80160dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80160de:	2b00      	cmp	r3, #0
 80160e0:	d016      	beq.n	8016110 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80160e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80160e4:	3324      	adds	r3, #36	; 0x24
 80160e6:	4618      	mov	r0, r3
 80160e8:	f001 f914 	bl	8017314 <xTaskRemoveFromEventList>
 80160ec:	4603      	mov	r3, r0
 80160ee:	2b00      	cmp	r3, #0
 80160f0:	d00e      	beq.n	8016110 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80160f2:	683b      	ldr	r3, [r7, #0]
 80160f4:	2b00      	cmp	r3, #0
 80160f6:	d00b      	beq.n	8016110 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80160f8:	683b      	ldr	r3, [r7, #0]
 80160fa:	2201      	movs	r2, #1
 80160fc:	601a      	str	r2, [r3, #0]
 80160fe:	e007      	b.n	8016110 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8016100:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016104:	3301      	adds	r3, #1
 8016106:	b2db      	uxtb	r3, r3
 8016108:	b25a      	sxtb	r2, r3
 801610a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801610c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8016110:	2301      	movs	r3, #1
 8016112:	637b      	str	r3, [r7, #52]	; 0x34
 8016114:	e001      	b.n	801611a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8016116:	2300      	movs	r3, #0
 8016118:	637b      	str	r3, [r7, #52]	; 0x34
 801611a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801611c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 801611e:	68fb      	ldr	r3, [r7, #12]
 8016120:	f383 8811 	msr	BASEPRI, r3
}
 8016124:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8016126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8016128:	4618      	mov	r0, r3
 801612a:	3738      	adds	r7, #56	; 0x38
 801612c:	46bd      	mov	sp, r7
 801612e:	bd80      	pop	{r7, pc}

08016130 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8016130:	b580      	push	{r7, lr}
 8016132:	b08c      	sub	sp, #48	; 0x30
 8016134:	af00      	add	r7, sp, #0
 8016136:	60f8      	str	r0, [r7, #12]
 8016138:	60b9      	str	r1, [r7, #8]
 801613a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 801613c:	2300      	movs	r3, #0
 801613e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8016140:	68fb      	ldr	r3, [r7, #12]
 8016142:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8016144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016146:	2b00      	cmp	r3, #0
 8016148:	d10a      	bne.n	8016160 <xQueueReceive+0x30>
	__asm volatile
 801614a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801614e:	f383 8811 	msr	BASEPRI, r3
 8016152:	f3bf 8f6f 	isb	sy
 8016156:	f3bf 8f4f 	dsb	sy
 801615a:	623b      	str	r3, [r7, #32]
}
 801615c:	bf00      	nop
 801615e:	e7fe      	b.n	801615e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016160:	68bb      	ldr	r3, [r7, #8]
 8016162:	2b00      	cmp	r3, #0
 8016164:	d103      	bne.n	801616e <xQueueReceive+0x3e>
 8016166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801616a:	2b00      	cmp	r3, #0
 801616c:	d101      	bne.n	8016172 <xQueueReceive+0x42>
 801616e:	2301      	movs	r3, #1
 8016170:	e000      	b.n	8016174 <xQueueReceive+0x44>
 8016172:	2300      	movs	r3, #0
 8016174:	2b00      	cmp	r3, #0
 8016176:	d10a      	bne.n	801618e <xQueueReceive+0x5e>
	__asm volatile
 8016178:	f04f 0350 	mov.w	r3, #80	; 0x50
 801617c:	f383 8811 	msr	BASEPRI, r3
 8016180:	f3bf 8f6f 	isb	sy
 8016184:	f3bf 8f4f 	dsb	sy
 8016188:	61fb      	str	r3, [r7, #28]
}
 801618a:	bf00      	nop
 801618c:	e7fe      	b.n	801618c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801618e:	f001 fa91 	bl	80176b4 <xTaskGetSchedulerState>
 8016192:	4603      	mov	r3, r0
 8016194:	2b00      	cmp	r3, #0
 8016196:	d102      	bne.n	801619e <xQueueReceive+0x6e>
 8016198:	687b      	ldr	r3, [r7, #4]
 801619a:	2b00      	cmp	r3, #0
 801619c:	d101      	bne.n	80161a2 <xQueueReceive+0x72>
 801619e:	2301      	movs	r3, #1
 80161a0:	e000      	b.n	80161a4 <xQueueReceive+0x74>
 80161a2:	2300      	movs	r3, #0
 80161a4:	2b00      	cmp	r3, #0
 80161a6:	d10a      	bne.n	80161be <xQueueReceive+0x8e>
	__asm volatile
 80161a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80161ac:	f383 8811 	msr	BASEPRI, r3
 80161b0:	f3bf 8f6f 	isb	sy
 80161b4:	f3bf 8f4f 	dsb	sy
 80161b8:	61bb      	str	r3, [r7, #24]
}
 80161ba:	bf00      	nop
 80161bc:	e7fe      	b.n	80161bc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80161be:	f7ff fa11 	bl	80155e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80161c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80161c6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80161c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161ca:	2b00      	cmp	r3, #0
 80161cc:	d01f      	beq.n	801620e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80161ce:	68b9      	ldr	r1, [r7, #8]
 80161d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80161d2:	f000 fabe 	bl	8016752 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80161d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161d8:	1e5a      	subs	r2, r3, #1
 80161da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161dc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80161de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161e0:	691b      	ldr	r3, [r3, #16]
 80161e2:	2b00      	cmp	r3, #0
 80161e4:	d00f      	beq.n	8016206 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80161e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161e8:	3310      	adds	r3, #16
 80161ea:	4618      	mov	r0, r3
 80161ec:	f001 f892 	bl	8017314 <xTaskRemoveFromEventList>
 80161f0:	4603      	mov	r3, r0
 80161f2:	2b00      	cmp	r3, #0
 80161f4:	d007      	beq.n	8016206 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80161f6:	4b3d      	ldr	r3, [pc, #244]	; (80162ec <xQueueReceive+0x1bc>)
 80161f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80161fc:	601a      	str	r2, [r3, #0]
 80161fe:	f3bf 8f4f 	dsb	sy
 8016202:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8016206:	f7ff fa1d 	bl	8015644 <vPortExitCritical>
				return pdPASS;
 801620a:	2301      	movs	r3, #1
 801620c:	e069      	b.n	80162e2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801620e:	687b      	ldr	r3, [r7, #4]
 8016210:	2b00      	cmp	r3, #0
 8016212:	d103      	bne.n	801621c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8016214:	f7ff fa16 	bl	8015644 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8016218:	2300      	movs	r3, #0
 801621a:	e062      	b.n	80162e2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 801621c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801621e:	2b00      	cmp	r3, #0
 8016220:	d106      	bne.n	8016230 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8016222:	f107 0310 	add.w	r3, r7, #16
 8016226:	4618      	mov	r0, r3
 8016228:	f001 f8d8 	bl	80173dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801622c:	2301      	movs	r3, #1
 801622e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8016230:	f7ff fa08 	bl	8015644 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8016234:	f000 fe02 	bl	8016e3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8016238:	f7ff f9d4 	bl	80155e4 <vPortEnterCritical>
 801623c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801623e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016242:	b25b      	sxtb	r3, r3
 8016244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016248:	d103      	bne.n	8016252 <xQueueReceive+0x122>
 801624a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801624c:	2200      	movs	r2, #0
 801624e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8016252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016254:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016258:	b25b      	sxtb	r3, r3
 801625a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801625e:	d103      	bne.n	8016268 <xQueueReceive+0x138>
 8016260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016262:	2200      	movs	r2, #0
 8016264:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8016268:	f7ff f9ec 	bl	8015644 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801626c:	1d3a      	adds	r2, r7, #4
 801626e:	f107 0310 	add.w	r3, r7, #16
 8016272:	4611      	mov	r1, r2
 8016274:	4618      	mov	r0, r3
 8016276:	f001 f8c7 	bl	8017408 <xTaskCheckForTimeOut>
 801627a:	4603      	mov	r3, r0
 801627c:	2b00      	cmp	r3, #0
 801627e:	d123      	bne.n	80162c8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8016280:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016282:	f000 fade 	bl	8016842 <prvIsQueueEmpty>
 8016286:	4603      	mov	r3, r0
 8016288:	2b00      	cmp	r3, #0
 801628a:	d017      	beq.n	80162bc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801628c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801628e:	3324      	adds	r3, #36	; 0x24
 8016290:	687a      	ldr	r2, [r7, #4]
 8016292:	4611      	mov	r1, r2
 8016294:	4618      	mov	r0, r3
 8016296:	f000 ffed 	bl	8017274 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801629a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801629c:	f000 fa7f 	bl	801679e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80162a0:	f000 fdda 	bl	8016e58 <xTaskResumeAll>
 80162a4:	4603      	mov	r3, r0
 80162a6:	2b00      	cmp	r3, #0
 80162a8:	d189      	bne.n	80161be <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80162aa:	4b10      	ldr	r3, [pc, #64]	; (80162ec <xQueueReceive+0x1bc>)
 80162ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80162b0:	601a      	str	r2, [r3, #0]
 80162b2:	f3bf 8f4f 	dsb	sy
 80162b6:	f3bf 8f6f 	isb	sy
 80162ba:	e780      	b.n	80161be <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80162bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80162be:	f000 fa6e 	bl	801679e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80162c2:	f000 fdc9 	bl	8016e58 <xTaskResumeAll>
 80162c6:	e77a      	b.n	80161be <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80162c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80162ca:	f000 fa68 	bl	801679e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80162ce:	f000 fdc3 	bl	8016e58 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80162d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80162d4:	f000 fab5 	bl	8016842 <prvIsQueueEmpty>
 80162d8:	4603      	mov	r3, r0
 80162da:	2b00      	cmp	r3, #0
 80162dc:	f43f af6f 	beq.w	80161be <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80162e0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80162e2:	4618      	mov	r0, r3
 80162e4:	3730      	adds	r7, #48	; 0x30
 80162e6:	46bd      	mov	sp, r7
 80162e8:	bd80      	pop	{r7, pc}
 80162ea:	bf00      	nop
 80162ec:	e000ed04 	.word	0xe000ed04

080162f0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80162f0:	b580      	push	{r7, lr}
 80162f2:	b08e      	sub	sp, #56	; 0x38
 80162f4:	af00      	add	r7, sp, #0
 80162f6:	6078      	str	r0, [r7, #4]
 80162f8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80162fa:	2300      	movs	r3, #0
 80162fc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80162fe:	687b      	ldr	r3, [r7, #4]
 8016300:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8016302:	2300      	movs	r3, #0
 8016304:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8016306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016308:	2b00      	cmp	r3, #0
 801630a:	d10a      	bne.n	8016322 <xQueueSemaphoreTake+0x32>
	__asm volatile
 801630c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016310:	f383 8811 	msr	BASEPRI, r3
 8016314:	f3bf 8f6f 	isb	sy
 8016318:	f3bf 8f4f 	dsb	sy
 801631c:	623b      	str	r3, [r7, #32]
}
 801631e:	bf00      	nop
 8016320:	e7fe      	b.n	8016320 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8016322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016326:	2b00      	cmp	r3, #0
 8016328:	d00a      	beq.n	8016340 <xQueueSemaphoreTake+0x50>
	__asm volatile
 801632a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801632e:	f383 8811 	msr	BASEPRI, r3
 8016332:	f3bf 8f6f 	isb	sy
 8016336:	f3bf 8f4f 	dsb	sy
 801633a:	61fb      	str	r3, [r7, #28]
}
 801633c:	bf00      	nop
 801633e:	e7fe      	b.n	801633e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8016340:	f001 f9b8 	bl	80176b4 <xTaskGetSchedulerState>
 8016344:	4603      	mov	r3, r0
 8016346:	2b00      	cmp	r3, #0
 8016348:	d102      	bne.n	8016350 <xQueueSemaphoreTake+0x60>
 801634a:	683b      	ldr	r3, [r7, #0]
 801634c:	2b00      	cmp	r3, #0
 801634e:	d101      	bne.n	8016354 <xQueueSemaphoreTake+0x64>
 8016350:	2301      	movs	r3, #1
 8016352:	e000      	b.n	8016356 <xQueueSemaphoreTake+0x66>
 8016354:	2300      	movs	r3, #0
 8016356:	2b00      	cmp	r3, #0
 8016358:	d10a      	bne.n	8016370 <xQueueSemaphoreTake+0x80>
	__asm volatile
 801635a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801635e:	f383 8811 	msr	BASEPRI, r3
 8016362:	f3bf 8f6f 	isb	sy
 8016366:	f3bf 8f4f 	dsb	sy
 801636a:	61bb      	str	r3, [r7, #24]
}
 801636c:	bf00      	nop
 801636e:	e7fe      	b.n	801636e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8016370:	f7ff f938 	bl	80155e4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8016374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016378:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 801637a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801637c:	2b00      	cmp	r3, #0
 801637e:	d024      	beq.n	80163ca <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8016380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016382:	1e5a      	subs	r2, r3, #1
 8016384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016386:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8016388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801638a:	681b      	ldr	r3, [r3, #0]
 801638c:	2b00      	cmp	r3, #0
 801638e:	d104      	bne.n	801639a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8016390:	f001 fb06 	bl	80179a0 <pvTaskIncrementMutexHeldCount>
 8016394:	4602      	mov	r2, r0
 8016396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016398:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801639a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801639c:	691b      	ldr	r3, [r3, #16]
 801639e:	2b00      	cmp	r3, #0
 80163a0:	d00f      	beq.n	80163c2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80163a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163a4:	3310      	adds	r3, #16
 80163a6:	4618      	mov	r0, r3
 80163a8:	f000 ffb4 	bl	8017314 <xTaskRemoveFromEventList>
 80163ac:	4603      	mov	r3, r0
 80163ae:	2b00      	cmp	r3, #0
 80163b0:	d007      	beq.n	80163c2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80163b2:	4b54      	ldr	r3, [pc, #336]	; (8016504 <xQueueSemaphoreTake+0x214>)
 80163b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80163b8:	601a      	str	r2, [r3, #0]
 80163ba:	f3bf 8f4f 	dsb	sy
 80163be:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80163c2:	f7ff f93f 	bl	8015644 <vPortExitCritical>
				return pdPASS;
 80163c6:	2301      	movs	r3, #1
 80163c8:	e097      	b.n	80164fa <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80163ca:	683b      	ldr	r3, [r7, #0]
 80163cc:	2b00      	cmp	r3, #0
 80163ce:	d111      	bne.n	80163f4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80163d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163d2:	2b00      	cmp	r3, #0
 80163d4:	d00a      	beq.n	80163ec <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80163d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80163da:	f383 8811 	msr	BASEPRI, r3
 80163de:	f3bf 8f6f 	isb	sy
 80163e2:	f3bf 8f4f 	dsb	sy
 80163e6:	617b      	str	r3, [r7, #20]
}
 80163e8:	bf00      	nop
 80163ea:	e7fe      	b.n	80163ea <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80163ec:	f7ff f92a 	bl	8015644 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80163f0:	2300      	movs	r3, #0
 80163f2:	e082      	b.n	80164fa <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80163f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80163f6:	2b00      	cmp	r3, #0
 80163f8:	d106      	bne.n	8016408 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80163fa:	f107 030c 	add.w	r3, r7, #12
 80163fe:	4618      	mov	r0, r3
 8016400:	f000 ffec 	bl	80173dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8016404:	2301      	movs	r3, #1
 8016406:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8016408:	f7ff f91c 	bl	8015644 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 801640c:	f000 fd16 	bl	8016e3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8016410:	f7ff f8e8 	bl	80155e4 <vPortEnterCritical>
 8016414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016416:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801641a:	b25b      	sxtb	r3, r3
 801641c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016420:	d103      	bne.n	801642a <xQueueSemaphoreTake+0x13a>
 8016422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016424:	2200      	movs	r2, #0
 8016426:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801642a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801642c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016430:	b25b      	sxtb	r3, r3
 8016432:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016436:	d103      	bne.n	8016440 <xQueueSemaphoreTake+0x150>
 8016438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801643a:	2200      	movs	r2, #0
 801643c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8016440:	f7ff f900 	bl	8015644 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8016444:	463a      	mov	r2, r7
 8016446:	f107 030c 	add.w	r3, r7, #12
 801644a:	4611      	mov	r1, r2
 801644c:	4618      	mov	r0, r3
 801644e:	f000 ffdb 	bl	8017408 <xTaskCheckForTimeOut>
 8016452:	4603      	mov	r3, r0
 8016454:	2b00      	cmp	r3, #0
 8016456:	d132      	bne.n	80164be <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8016458:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801645a:	f000 f9f2 	bl	8016842 <prvIsQueueEmpty>
 801645e:	4603      	mov	r3, r0
 8016460:	2b00      	cmp	r3, #0
 8016462:	d026      	beq.n	80164b2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8016464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016466:	681b      	ldr	r3, [r3, #0]
 8016468:	2b00      	cmp	r3, #0
 801646a:	d109      	bne.n	8016480 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 801646c:	f7ff f8ba 	bl	80155e4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8016470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016472:	689b      	ldr	r3, [r3, #8]
 8016474:	4618      	mov	r0, r3
 8016476:	f001 f93b 	bl	80176f0 <xTaskPriorityInherit>
 801647a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 801647c:	f7ff f8e2 	bl	8015644 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8016480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016482:	3324      	adds	r3, #36	; 0x24
 8016484:	683a      	ldr	r2, [r7, #0]
 8016486:	4611      	mov	r1, r2
 8016488:	4618      	mov	r0, r3
 801648a:	f000 fef3 	bl	8017274 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801648e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016490:	f000 f985 	bl	801679e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8016494:	f000 fce0 	bl	8016e58 <xTaskResumeAll>
 8016498:	4603      	mov	r3, r0
 801649a:	2b00      	cmp	r3, #0
 801649c:	f47f af68 	bne.w	8016370 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80164a0:	4b18      	ldr	r3, [pc, #96]	; (8016504 <xQueueSemaphoreTake+0x214>)
 80164a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80164a6:	601a      	str	r2, [r3, #0]
 80164a8:	f3bf 8f4f 	dsb	sy
 80164ac:	f3bf 8f6f 	isb	sy
 80164b0:	e75e      	b.n	8016370 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80164b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80164b4:	f000 f973 	bl	801679e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80164b8:	f000 fcce 	bl	8016e58 <xTaskResumeAll>
 80164bc:	e758      	b.n	8016370 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80164be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80164c0:	f000 f96d 	bl	801679e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80164c4:	f000 fcc8 	bl	8016e58 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80164c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80164ca:	f000 f9ba 	bl	8016842 <prvIsQueueEmpty>
 80164ce:	4603      	mov	r3, r0
 80164d0:	2b00      	cmp	r3, #0
 80164d2:	f43f af4d 	beq.w	8016370 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80164d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80164d8:	2b00      	cmp	r3, #0
 80164da:	d00d      	beq.n	80164f8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80164dc:	f7ff f882 	bl	80155e4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80164e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80164e2:	f000 f8b4 	bl	801664e <prvGetDisinheritPriorityAfterTimeout>
 80164e6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80164e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164ea:	689b      	ldr	r3, [r3, #8]
 80164ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80164ee:	4618      	mov	r0, r3
 80164f0:	f001 f9d4 	bl	801789c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80164f4:	f7ff f8a6 	bl	8015644 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80164f8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80164fa:	4618      	mov	r0, r3
 80164fc:	3738      	adds	r7, #56	; 0x38
 80164fe:	46bd      	mov	sp, r7
 8016500:	bd80      	pop	{r7, pc}
 8016502:	bf00      	nop
 8016504:	e000ed04 	.word	0xe000ed04

08016508 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8016508:	b580      	push	{r7, lr}
 801650a:	b08e      	sub	sp, #56	; 0x38
 801650c:	af00      	add	r7, sp, #0
 801650e:	60f8      	str	r0, [r7, #12]
 8016510:	60b9      	str	r1, [r7, #8]
 8016512:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8016514:	68fb      	ldr	r3, [r7, #12]
 8016516:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8016518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801651a:	2b00      	cmp	r3, #0
 801651c:	d10a      	bne.n	8016534 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 801651e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016522:	f383 8811 	msr	BASEPRI, r3
 8016526:	f3bf 8f6f 	isb	sy
 801652a:	f3bf 8f4f 	dsb	sy
 801652e:	623b      	str	r3, [r7, #32]
}
 8016530:	bf00      	nop
 8016532:	e7fe      	b.n	8016532 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016534:	68bb      	ldr	r3, [r7, #8]
 8016536:	2b00      	cmp	r3, #0
 8016538:	d103      	bne.n	8016542 <xQueueReceiveFromISR+0x3a>
 801653a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801653c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801653e:	2b00      	cmp	r3, #0
 8016540:	d101      	bne.n	8016546 <xQueueReceiveFromISR+0x3e>
 8016542:	2301      	movs	r3, #1
 8016544:	e000      	b.n	8016548 <xQueueReceiveFromISR+0x40>
 8016546:	2300      	movs	r3, #0
 8016548:	2b00      	cmp	r3, #0
 801654a:	d10a      	bne.n	8016562 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 801654c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016550:	f383 8811 	msr	BASEPRI, r3
 8016554:	f3bf 8f6f 	isb	sy
 8016558:	f3bf 8f4f 	dsb	sy
 801655c:	61fb      	str	r3, [r7, #28]
}
 801655e:	bf00      	nop
 8016560:	e7fe      	b.n	8016560 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8016562:	f7ff f921 	bl	80157a8 <vPortValidateInterruptPriority>
	__asm volatile
 8016566:	f3ef 8211 	mrs	r2, BASEPRI
 801656a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801656e:	f383 8811 	msr	BASEPRI, r3
 8016572:	f3bf 8f6f 	isb	sy
 8016576:	f3bf 8f4f 	dsb	sy
 801657a:	61ba      	str	r2, [r7, #24]
 801657c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801657e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8016580:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016586:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8016588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801658a:	2b00      	cmp	r3, #0
 801658c:	d02f      	beq.n	80165ee <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801658e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016590:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016594:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8016598:	68b9      	ldr	r1, [r7, #8]
 801659a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801659c:	f000 f8d9 	bl	8016752 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80165a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80165a2:	1e5a      	subs	r2, r3, #1
 80165a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80165a6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80165a8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80165ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80165b0:	d112      	bne.n	80165d8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80165b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80165b4:	691b      	ldr	r3, [r3, #16]
 80165b6:	2b00      	cmp	r3, #0
 80165b8:	d016      	beq.n	80165e8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80165ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80165bc:	3310      	adds	r3, #16
 80165be:	4618      	mov	r0, r3
 80165c0:	f000 fea8 	bl	8017314 <xTaskRemoveFromEventList>
 80165c4:	4603      	mov	r3, r0
 80165c6:	2b00      	cmp	r3, #0
 80165c8:	d00e      	beq.n	80165e8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80165ca:	687b      	ldr	r3, [r7, #4]
 80165cc:	2b00      	cmp	r3, #0
 80165ce:	d00b      	beq.n	80165e8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80165d0:	687b      	ldr	r3, [r7, #4]
 80165d2:	2201      	movs	r2, #1
 80165d4:	601a      	str	r2, [r3, #0]
 80165d6:	e007      	b.n	80165e8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80165d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80165dc:	3301      	adds	r3, #1
 80165de:	b2db      	uxtb	r3, r3
 80165e0:	b25a      	sxtb	r2, r3
 80165e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80165e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80165e8:	2301      	movs	r3, #1
 80165ea:	637b      	str	r3, [r7, #52]	; 0x34
 80165ec:	e001      	b.n	80165f2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80165ee:	2300      	movs	r3, #0
 80165f0:	637b      	str	r3, [r7, #52]	; 0x34
 80165f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80165f4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80165f6:	693b      	ldr	r3, [r7, #16]
 80165f8:	f383 8811 	msr	BASEPRI, r3
}
 80165fc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80165fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8016600:	4618      	mov	r0, r3
 8016602:	3738      	adds	r7, #56	; 0x38
 8016604:	46bd      	mov	sp, r7
 8016606:	bd80      	pop	{r7, pc}

08016608 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8016608:	b580      	push	{r7, lr}
 801660a:	b084      	sub	sp, #16
 801660c:	af00      	add	r7, sp, #0
 801660e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8016610:	687b      	ldr	r3, [r7, #4]
 8016612:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8016614:	68fb      	ldr	r3, [r7, #12]
 8016616:	2b00      	cmp	r3, #0
 8016618:	d10a      	bne.n	8016630 <vQueueDelete+0x28>
	__asm volatile
 801661a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801661e:	f383 8811 	msr	BASEPRI, r3
 8016622:	f3bf 8f6f 	isb	sy
 8016626:	f3bf 8f4f 	dsb	sy
 801662a:	60bb      	str	r3, [r7, #8]
}
 801662c:	bf00      	nop
 801662e:	e7fe      	b.n	801662e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8016630:	68f8      	ldr	r0, [r7, #12]
 8016632:	f000 f95f 	bl	80168f4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8016636:	68fb      	ldr	r3, [r7, #12]
 8016638:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 801663c:	2b00      	cmp	r3, #0
 801663e:	d102      	bne.n	8016646 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8016640:	68f8      	ldr	r0, [r7, #12]
 8016642:	f7fe fcd1 	bl	8014fe8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8016646:	bf00      	nop
 8016648:	3710      	adds	r7, #16
 801664a:	46bd      	mov	sp, r7
 801664c:	bd80      	pop	{r7, pc}

0801664e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 801664e:	b480      	push	{r7}
 8016650:	b085      	sub	sp, #20
 8016652:	af00      	add	r7, sp, #0
 8016654:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8016656:	687b      	ldr	r3, [r7, #4]
 8016658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801665a:	2b00      	cmp	r3, #0
 801665c:	d006      	beq.n	801666c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 801665e:	687b      	ldr	r3, [r7, #4]
 8016660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016662:	681b      	ldr	r3, [r3, #0]
 8016664:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8016668:	60fb      	str	r3, [r7, #12]
 801666a:	e001      	b.n	8016670 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 801666c:	2300      	movs	r3, #0
 801666e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8016670:	68fb      	ldr	r3, [r7, #12]
	}
 8016672:	4618      	mov	r0, r3
 8016674:	3714      	adds	r7, #20
 8016676:	46bd      	mov	sp, r7
 8016678:	f85d 7b04 	ldr.w	r7, [sp], #4
 801667c:	4770      	bx	lr

0801667e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801667e:	b580      	push	{r7, lr}
 8016680:	b086      	sub	sp, #24
 8016682:	af00      	add	r7, sp, #0
 8016684:	60f8      	str	r0, [r7, #12]
 8016686:	60b9      	str	r1, [r7, #8]
 8016688:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801668a:	2300      	movs	r3, #0
 801668c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801668e:	68fb      	ldr	r3, [r7, #12]
 8016690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016692:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8016694:	68fb      	ldr	r3, [r7, #12]
 8016696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016698:	2b00      	cmp	r3, #0
 801669a:	d10d      	bne.n	80166b8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801669c:	68fb      	ldr	r3, [r7, #12]
 801669e:	681b      	ldr	r3, [r3, #0]
 80166a0:	2b00      	cmp	r3, #0
 80166a2:	d14d      	bne.n	8016740 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80166a4:	68fb      	ldr	r3, [r7, #12]
 80166a6:	689b      	ldr	r3, [r3, #8]
 80166a8:	4618      	mov	r0, r3
 80166aa:	f001 f889 	bl	80177c0 <xTaskPriorityDisinherit>
 80166ae:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80166b0:	68fb      	ldr	r3, [r7, #12]
 80166b2:	2200      	movs	r2, #0
 80166b4:	609a      	str	r2, [r3, #8]
 80166b6:	e043      	b.n	8016740 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80166b8:	687b      	ldr	r3, [r7, #4]
 80166ba:	2b00      	cmp	r3, #0
 80166bc:	d119      	bne.n	80166f2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80166be:	68fb      	ldr	r3, [r7, #12]
 80166c0:	6858      	ldr	r0, [r3, #4]
 80166c2:	68fb      	ldr	r3, [r7, #12]
 80166c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80166c6:	461a      	mov	r2, r3
 80166c8:	68b9      	ldr	r1, [r7, #8]
 80166ca:	f00f fec9 	bl	8026460 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80166ce:	68fb      	ldr	r3, [r7, #12]
 80166d0:	685a      	ldr	r2, [r3, #4]
 80166d2:	68fb      	ldr	r3, [r7, #12]
 80166d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80166d6:	441a      	add	r2, r3
 80166d8:	68fb      	ldr	r3, [r7, #12]
 80166da:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80166dc:	68fb      	ldr	r3, [r7, #12]
 80166de:	685a      	ldr	r2, [r3, #4]
 80166e0:	68fb      	ldr	r3, [r7, #12]
 80166e2:	689b      	ldr	r3, [r3, #8]
 80166e4:	429a      	cmp	r2, r3
 80166e6:	d32b      	bcc.n	8016740 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80166e8:	68fb      	ldr	r3, [r7, #12]
 80166ea:	681a      	ldr	r2, [r3, #0]
 80166ec:	68fb      	ldr	r3, [r7, #12]
 80166ee:	605a      	str	r2, [r3, #4]
 80166f0:	e026      	b.n	8016740 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80166f2:	68fb      	ldr	r3, [r7, #12]
 80166f4:	68d8      	ldr	r0, [r3, #12]
 80166f6:	68fb      	ldr	r3, [r7, #12]
 80166f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80166fa:	461a      	mov	r2, r3
 80166fc:	68b9      	ldr	r1, [r7, #8]
 80166fe:	f00f feaf 	bl	8026460 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8016702:	68fb      	ldr	r3, [r7, #12]
 8016704:	68da      	ldr	r2, [r3, #12]
 8016706:	68fb      	ldr	r3, [r7, #12]
 8016708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801670a:	425b      	negs	r3, r3
 801670c:	441a      	add	r2, r3
 801670e:	68fb      	ldr	r3, [r7, #12]
 8016710:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8016712:	68fb      	ldr	r3, [r7, #12]
 8016714:	68da      	ldr	r2, [r3, #12]
 8016716:	68fb      	ldr	r3, [r7, #12]
 8016718:	681b      	ldr	r3, [r3, #0]
 801671a:	429a      	cmp	r2, r3
 801671c:	d207      	bcs.n	801672e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801671e:	68fb      	ldr	r3, [r7, #12]
 8016720:	689a      	ldr	r2, [r3, #8]
 8016722:	68fb      	ldr	r3, [r7, #12]
 8016724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016726:	425b      	negs	r3, r3
 8016728:	441a      	add	r2, r3
 801672a:	68fb      	ldr	r3, [r7, #12]
 801672c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801672e:	687b      	ldr	r3, [r7, #4]
 8016730:	2b02      	cmp	r3, #2
 8016732:	d105      	bne.n	8016740 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8016734:	693b      	ldr	r3, [r7, #16]
 8016736:	2b00      	cmp	r3, #0
 8016738:	d002      	beq.n	8016740 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801673a:	693b      	ldr	r3, [r7, #16]
 801673c:	3b01      	subs	r3, #1
 801673e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8016740:	693b      	ldr	r3, [r7, #16]
 8016742:	1c5a      	adds	r2, r3, #1
 8016744:	68fb      	ldr	r3, [r7, #12]
 8016746:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8016748:	697b      	ldr	r3, [r7, #20]
}
 801674a:	4618      	mov	r0, r3
 801674c:	3718      	adds	r7, #24
 801674e:	46bd      	mov	sp, r7
 8016750:	bd80      	pop	{r7, pc}

08016752 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8016752:	b580      	push	{r7, lr}
 8016754:	b082      	sub	sp, #8
 8016756:	af00      	add	r7, sp, #0
 8016758:	6078      	str	r0, [r7, #4]
 801675a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801675c:	687b      	ldr	r3, [r7, #4]
 801675e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016760:	2b00      	cmp	r3, #0
 8016762:	d018      	beq.n	8016796 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8016764:	687b      	ldr	r3, [r7, #4]
 8016766:	68da      	ldr	r2, [r3, #12]
 8016768:	687b      	ldr	r3, [r7, #4]
 801676a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801676c:	441a      	add	r2, r3
 801676e:	687b      	ldr	r3, [r7, #4]
 8016770:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8016772:	687b      	ldr	r3, [r7, #4]
 8016774:	68da      	ldr	r2, [r3, #12]
 8016776:	687b      	ldr	r3, [r7, #4]
 8016778:	689b      	ldr	r3, [r3, #8]
 801677a:	429a      	cmp	r2, r3
 801677c:	d303      	bcc.n	8016786 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801677e:	687b      	ldr	r3, [r7, #4]
 8016780:	681a      	ldr	r2, [r3, #0]
 8016782:	687b      	ldr	r3, [r7, #4]
 8016784:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8016786:	687b      	ldr	r3, [r7, #4]
 8016788:	68d9      	ldr	r1, [r3, #12]
 801678a:	687b      	ldr	r3, [r7, #4]
 801678c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801678e:	461a      	mov	r2, r3
 8016790:	6838      	ldr	r0, [r7, #0]
 8016792:	f00f fe65 	bl	8026460 <memcpy>
	}
}
 8016796:	bf00      	nop
 8016798:	3708      	adds	r7, #8
 801679a:	46bd      	mov	sp, r7
 801679c:	bd80      	pop	{r7, pc}

0801679e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801679e:	b580      	push	{r7, lr}
 80167a0:	b084      	sub	sp, #16
 80167a2:	af00      	add	r7, sp, #0
 80167a4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80167a6:	f7fe ff1d 	bl	80155e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80167aa:	687b      	ldr	r3, [r7, #4]
 80167ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80167b0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80167b2:	e011      	b.n	80167d8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80167b4:	687b      	ldr	r3, [r7, #4]
 80167b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80167b8:	2b00      	cmp	r3, #0
 80167ba:	d012      	beq.n	80167e2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80167bc:	687b      	ldr	r3, [r7, #4]
 80167be:	3324      	adds	r3, #36	; 0x24
 80167c0:	4618      	mov	r0, r3
 80167c2:	f000 fda7 	bl	8017314 <xTaskRemoveFromEventList>
 80167c6:	4603      	mov	r3, r0
 80167c8:	2b00      	cmp	r3, #0
 80167ca:	d001      	beq.n	80167d0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80167cc:	f000 fe7e 	bl	80174cc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80167d0:	7bfb      	ldrb	r3, [r7, #15]
 80167d2:	3b01      	subs	r3, #1
 80167d4:	b2db      	uxtb	r3, r3
 80167d6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80167d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80167dc:	2b00      	cmp	r3, #0
 80167de:	dce9      	bgt.n	80167b4 <prvUnlockQueue+0x16>
 80167e0:	e000      	b.n	80167e4 <prvUnlockQueue+0x46>
					break;
 80167e2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80167e4:	687b      	ldr	r3, [r7, #4]
 80167e6:	22ff      	movs	r2, #255	; 0xff
 80167e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80167ec:	f7fe ff2a 	bl	8015644 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80167f0:	f7fe fef8 	bl	80155e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80167f4:	687b      	ldr	r3, [r7, #4]
 80167f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80167fa:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80167fc:	e011      	b.n	8016822 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80167fe:	687b      	ldr	r3, [r7, #4]
 8016800:	691b      	ldr	r3, [r3, #16]
 8016802:	2b00      	cmp	r3, #0
 8016804:	d012      	beq.n	801682c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016806:	687b      	ldr	r3, [r7, #4]
 8016808:	3310      	adds	r3, #16
 801680a:	4618      	mov	r0, r3
 801680c:	f000 fd82 	bl	8017314 <xTaskRemoveFromEventList>
 8016810:	4603      	mov	r3, r0
 8016812:	2b00      	cmp	r3, #0
 8016814:	d001      	beq.n	801681a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8016816:	f000 fe59 	bl	80174cc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801681a:	7bbb      	ldrb	r3, [r7, #14]
 801681c:	3b01      	subs	r3, #1
 801681e:	b2db      	uxtb	r3, r3
 8016820:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8016822:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016826:	2b00      	cmp	r3, #0
 8016828:	dce9      	bgt.n	80167fe <prvUnlockQueue+0x60>
 801682a:	e000      	b.n	801682e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801682c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801682e:	687b      	ldr	r3, [r7, #4]
 8016830:	22ff      	movs	r2, #255	; 0xff
 8016832:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8016836:	f7fe ff05 	bl	8015644 <vPortExitCritical>
}
 801683a:	bf00      	nop
 801683c:	3710      	adds	r7, #16
 801683e:	46bd      	mov	sp, r7
 8016840:	bd80      	pop	{r7, pc}

08016842 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8016842:	b580      	push	{r7, lr}
 8016844:	b084      	sub	sp, #16
 8016846:	af00      	add	r7, sp, #0
 8016848:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801684a:	f7fe fecb 	bl	80155e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801684e:	687b      	ldr	r3, [r7, #4]
 8016850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016852:	2b00      	cmp	r3, #0
 8016854:	d102      	bne.n	801685c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8016856:	2301      	movs	r3, #1
 8016858:	60fb      	str	r3, [r7, #12]
 801685a:	e001      	b.n	8016860 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801685c:	2300      	movs	r3, #0
 801685e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8016860:	f7fe fef0 	bl	8015644 <vPortExitCritical>

	return xReturn;
 8016864:	68fb      	ldr	r3, [r7, #12]
}
 8016866:	4618      	mov	r0, r3
 8016868:	3710      	adds	r7, #16
 801686a:	46bd      	mov	sp, r7
 801686c:	bd80      	pop	{r7, pc}

0801686e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801686e:	b580      	push	{r7, lr}
 8016870:	b084      	sub	sp, #16
 8016872:	af00      	add	r7, sp, #0
 8016874:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8016876:	f7fe feb5 	bl	80155e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801687a:	687b      	ldr	r3, [r7, #4]
 801687c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801687e:	687b      	ldr	r3, [r7, #4]
 8016880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016882:	429a      	cmp	r2, r3
 8016884:	d102      	bne.n	801688c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8016886:	2301      	movs	r3, #1
 8016888:	60fb      	str	r3, [r7, #12]
 801688a:	e001      	b.n	8016890 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801688c:	2300      	movs	r3, #0
 801688e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8016890:	f7fe fed8 	bl	8015644 <vPortExitCritical>

	return xReturn;
 8016894:	68fb      	ldr	r3, [r7, #12]
}
 8016896:	4618      	mov	r0, r3
 8016898:	3710      	adds	r7, #16
 801689a:	46bd      	mov	sp, r7
 801689c:	bd80      	pop	{r7, pc}
	...

080168a0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80168a0:	b480      	push	{r7}
 80168a2:	b085      	sub	sp, #20
 80168a4:	af00      	add	r7, sp, #0
 80168a6:	6078      	str	r0, [r7, #4]
 80168a8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80168aa:	2300      	movs	r3, #0
 80168ac:	60fb      	str	r3, [r7, #12]
 80168ae:	e014      	b.n	80168da <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80168b0:	4a0f      	ldr	r2, [pc, #60]	; (80168f0 <vQueueAddToRegistry+0x50>)
 80168b2:	68fb      	ldr	r3, [r7, #12]
 80168b4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80168b8:	2b00      	cmp	r3, #0
 80168ba:	d10b      	bne.n	80168d4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80168bc:	490c      	ldr	r1, [pc, #48]	; (80168f0 <vQueueAddToRegistry+0x50>)
 80168be:	68fb      	ldr	r3, [r7, #12]
 80168c0:	683a      	ldr	r2, [r7, #0]
 80168c2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80168c6:	4a0a      	ldr	r2, [pc, #40]	; (80168f0 <vQueueAddToRegistry+0x50>)
 80168c8:	68fb      	ldr	r3, [r7, #12]
 80168ca:	00db      	lsls	r3, r3, #3
 80168cc:	4413      	add	r3, r2
 80168ce:	687a      	ldr	r2, [r7, #4]
 80168d0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80168d2:	e006      	b.n	80168e2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80168d4:	68fb      	ldr	r3, [r7, #12]
 80168d6:	3301      	adds	r3, #1
 80168d8:	60fb      	str	r3, [r7, #12]
 80168da:	68fb      	ldr	r3, [r7, #12]
 80168dc:	2b07      	cmp	r3, #7
 80168de:	d9e7      	bls.n	80168b0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80168e0:	bf00      	nop
 80168e2:	bf00      	nop
 80168e4:	3714      	adds	r7, #20
 80168e6:	46bd      	mov	sp, r7
 80168e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168ec:	4770      	bx	lr
 80168ee:	bf00      	nop
 80168f0:	24024ac4 	.word	0x24024ac4

080168f4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80168f4:	b480      	push	{r7}
 80168f6:	b085      	sub	sp, #20
 80168f8:	af00      	add	r7, sp, #0
 80168fa:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80168fc:	2300      	movs	r3, #0
 80168fe:	60fb      	str	r3, [r7, #12]
 8016900:	e016      	b.n	8016930 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8016902:	4a10      	ldr	r2, [pc, #64]	; (8016944 <vQueueUnregisterQueue+0x50>)
 8016904:	68fb      	ldr	r3, [r7, #12]
 8016906:	00db      	lsls	r3, r3, #3
 8016908:	4413      	add	r3, r2
 801690a:	685b      	ldr	r3, [r3, #4]
 801690c:	687a      	ldr	r2, [r7, #4]
 801690e:	429a      	cmp	r2, r3
 8016910:	d10b      	bne.n	801692a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8016912:	4a0c      	ldr	r2, [pc, #48]	; (8016944 <vQueueUnregisterQueue+0x50>)
 8016914:	68fb      	ldr	r3, [r7, #12]
 8016916:	2100      	movs	r1, #0
 8016918:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 801691c:	4a09      	ldr	r2, [pc, #36]	; (8016944 <vQueueUnregisterQueue+0x50>)
 801691e:	68fb      	ldr	r3, [r7, #12]
 8016920:	00db      	lsls	r3, r3, #3
 8016922:	4413      	add	r3, r2
 8016924:	2200      	movs	r2, #0
 8016926:	605a      	str	r2, [r3, #4]
				break;
 8016928:	e006      	b.n	8016938 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801692a:	68fb      	ldr	r3, [r7, #12]
 801692c:	3301      	adds	r3, #1
 801692e:	60fb      	str	r3, [r7, #12]
 8016930:	68fb      	ldr	r3, [r7, #12]
 8016932:	2b07      	cmp	r3, #7
 8016934:	d9e5      	bls.n	8016902 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8016936:	bf00      	nop
 8016938:	bf00      	nop
 801693a:	3714      	adds	r7, #20
 801693c:	46bd      	mov	sp, r7
 801693e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016942:	4770      	bx	lr
 8016944:	24024ac4 	.word	0x24024ac4

08016948 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8016948:	b580      	push	{r7, lr}
 801694a:	b086      	sub	sp, #24
 801694c:	af00      	add	r7, sp, #0
 801694e:	60f8      	str	r0, [r7, #12]
 8016950:	60b9      	str	r1, [r7, #8]
 8016952:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8016954:	68fb      	ldr	r3, [r7, #12]
 8016956:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8016958:	f7fe fe44 	bl	80155e4 <vPortEnterCritical>
 801695c:	697b      	ldr	r3, [r7, #20]
 801695e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016962:	b25b      	sxtb	r3, r3
 8016964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016968:	d103      	bne.n	8016972 <vQueueWaitForMessageRestricted+0x2a>
 801696a:	697b      	ldr	r3, [r7, #20]
 801696c:	2200      	movs	r2, #0
 801696e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8016972:	697b      	ldr	r3, [r7, #20]
 8016974:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016978:	b25b      	sxtb	r3, r3
 801697a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801697e:	d103      	bne.n	8016988 <vQueueWaitForMessageRestricted+0x40>
 8016980:	697b      	ldr	r3, [r7, #20]
 8016982:	2200      	movs	r2, #0
 8016984:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8016988:	f7fe fe5c 	bl	8015644 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 801698c:	697b      	ldr	r3, [r7, #20]
 801698e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016990:	2b00      	cmp	r3, #0
 8016992:	d106      	bne.n	80169a2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8016994:	697b      	ldr	r3, [r7, #20]
 8016996:	3324      	adds	r3, #36	; 0x24
 8016998:	687a      	ldr	r2, [r7, #4]
 801699a:	68b9      	ldr	r1, [r7, #8]
 801699c:	4618      	mov	r0, r3
 801699e:	f000 fc8d 	bl	80172bc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80169a2:	6978      	ldr	r0, [r7, #20]
 80169a4:	f7ff fefb 	bl	801679e <prvUnlockQueue>
	}
 80169a8:	bf00      	nop
 80169aa:	3718      	adds	r7, #24
 80169ac:	46bd      	mov	sp, r7
 80169ae:	bd80      	pop	{r7, pc}

080169b0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80169b0:	b580      	push	{r7, lr}
 80169b2:	b08e      	sub	sp, #56	; 0x38
 80169b4:	af04      	add	r7, sp, #16
 80169b6:	60f8      	str	r0, [r7, #12]
 80169b8:	60b9      	str	r1, [r7, #8]
 80169ba:	607a      	str	r2, [r7, #4]
 80169bc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80169be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80169c0:	2b00      	cmp	r3, #0
 80169c2:	d10a      	bne.n	80169da <xTaskCreateStatic+0x2a>
	__asm volatile
 80169c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80169c8:	f383 8811 	msr	BASEPRI, r3
 80169cc:	f3bf 8f6f 	isb	sy
 80169d0:	f3bf 8f4f 	dsb	sy
 80169d4:	623b      	str	r3, [r7, #32]
}
 80169d6:	bf00      	nop
 80169d8:	e7fe      	b.n	80169d8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80169da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80169dc:	2b00      	cmp	r3, #0
 80169de:	d10a      	bne.n	80169f6 <xTaskCreateStatic+0x46>
	__asm volatile
 80169e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80169e4:	f383 8811 	msr	BASEPRI, r3
 80169e8:	f3bf 8f6f 	isb	sy
 80169ec:	f3bf 8f4f 	dsb	sy
 80169f0:	61fb      	str	r3, [r7, #28]
}
 80169f2:	bf00      	nop
 80169f4:	e7fe      	b.n	80169f4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80169f6:	2360      	movs	r3, #96	; 0x60
 80169f8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80169fa:	693b      	ldr	r3, [r7, #16]
 80169fc:	2b60      	cmp	r3, #96	; 0x60
 80169fe:	d00a      	beq.n	8016a16 <xTaskCreateStatic+0x66>
	__asm volatile
 8016a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a04:	f383 8811 	msr	BASEPRI, r3
 8016a08:	f3bf 8f6f 	isb	sy
 8016a0c:	f3bf 8f4f 	dsb	sy
 8016a10:	61bb      	str	r3, [r7, #24]
}
 8016a12:	bf00      	nop
 8016a14:	e7fe      	b.n	8016a14 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8016a16:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8016a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016a1a:	2b00      	cmp	r3, #0
 8016a1c:	d01e      	beq.n	8016a5c <xTaskCreateStatic+0xac>
 8016a1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016a20:	2b00      	cmp	r3, #0
 8016a22:	d01b      	beq.n	8016a5c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8016a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016a26:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8016a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016a2c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8016a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a30:	2202      	movs	r2, #2
 8016a32:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8016a36:	2300      	movs	r3, #0
 8016a38:	9303      	str	r3, [sp, #12]
 8016a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a3c:	9302      	str	r3, [sp, #8]
 8016a3e:	f107 0314 	add.w	r3, r7, #20
 8016a42:	9301      	str	r3, [sp, #4]
 8016a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a46:	9300      	str	r3, [sp, #0]
 8016a48:	683b      	ldr	r3, [r7, #0]
 8016a4a:	687a      	ldr	r2, [r7, #4]
 8016a4c:	68b9      	ldr	r1, [r7, #8]
 8016a4e:	68f8      	ldr	r0, [r7, #12]
 8016a50:	f000 f850 	bl	8016af4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8016a54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016a56:	f000 f8df 	bl	8016c18 <prvAddNewTaskToReadyList>
 8016a5a:	e001      	b.n	8016a60 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8016a5c:	2300      	movs	r3, #0
 8016a5e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8016a60:	697b      	ldr	r3, [r7, #20]
	}
 8016a62:	4618      	mov	r0, r3
 8016a64:	3728      	adds	r7, #40	; 0x28
 8016a66:	46bd      	mov	sp, r7
 8016a68:	bd80      	pop	{r7, pc}

08016a6a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8016a6a:	b580      	push	{r7, lr}
 8016a6c:	b08c      	sub	sp, #48	; 0x30
 8016a6e:	af04      	add	r7, sp, #16
 8016a70:	60f8      	str	r0, [r7, #12]
 8016a72:	60b9      	str	r1, [r7, #8]
 8016a74:	603b      	str	r3, [r7, #0]
 8016a76:	4613      	mov	r3, r2
 8016a78:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8016a7a:	88fb      	ldrh	r3, [r7, #6]
 8016a7c:	009b      	lsls	r3, r3, #2
 8016a7e:	4618      	mov	r0, r3
 8016a80:	f7fe f9e6 	bl	8014e50 <pvPortMalloc>
 8016a84:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8016a86:	697b      	ldr	r3, [r7, #20]
 8016a88:	2b00      	cmp	r3, #0
 8016a8a:	d00e      	beq.n	8016aaa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8016a8c:	2060      	movs	r0, #96	; 0x60
 8016a8e:	f7fe f9df 	bl	8014e50 <pvPortMalloc>
 8016a92:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8016a94:	69fb      	ldr	r3, [r7, #28]
 8016a96:	2b00      	cmp	r3, #0
 8016a98:	d003      	beq.n	8016aa2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8016a9a:	69fb      	ldr	r3, [r7, #28]
 8016a9c:	697a      	ldr	r2, [r7, #20]
 8016a9e:	631a      	str	r2, [r3, #48]	; 0x30
 8016aa0:	e005      	b.n	8016aae <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8016aa2:	6978      	ldr	r0, [r7, #20]
 8016aa4:	f7fe faa0 	bl	8014fe8 <vPortFree>
 8016aa8:	e001      	b.n	8016aae <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8016aaa:	2300      	movs	r3, #0
 8016aac:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8016aae:	69fb      	ldr	r3, [r7, #28]
 8016ab0:	2b00      	cmp	r3, #0
 8016ab2:	d017      	beq.n	8016ae4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8016ab4:	69fb      	ldr	r3, [r7, #28]
 8016ab6:	2200      	movs	r2, #0
 8016ab8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8016abc:	88fa      	ldrh	r2, [r7, #6]
 8016abe:	2300      	movs	r3, #0
 8016ac0:	9303      	str	r3, [sp, #12]
 8016ac2:	69fb      	ldr	r3, [r7, #28]
 8016ac4:	9302      	str	r3, [sp, #8]
 8016ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ac8:	9301      	str	r3, [sp, #4]
 8016aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016acc:	9300      	str	r3, [sp, #0]
 8016ace:	683b      	ldr	r3, [r7, #0]
 8016ad0:	68b9      	ldr	r1, [r7, #8]
 8016ad2:	68f8      	ldr	r0, [r7, #12]
 8016ad4:	f000 f80e 	bl	8016af4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8016ad8:	69f8      	ldr	r0, [r7, #28]
 8016ada:	f000 f89d 	bl	8016c18 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8016ade:	2301      	movs	r3, #1
 8016ae0:	61bb      	str	r3, [r7, #24]
 8016ae2:	e002      	b.n	8016aea <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8016ae4:	f04f 33ff 	mov.w	r3, #4294967295
 8016ae8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8016aea:	69bb      	ldr	r3, [r7, #24]
	}
 8016aec:	4618      	mov	r0, r3
 8016aee:	3720      	adds	r7, #32
 8016af0:	46bd      	mov	sp, r7
 8016af2:	bd80      	pop	{r7, pc}

08016af4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8016af4:	b580      	push	{r7, lr}
 8016af6:	b088      	sub	sp, #32
 8016af8:	af00      	add	r7, sp, #0
 8016afa:	60f8      	str	r0, [r7, #12]
 8016afc:	60b9      	str	r1, [r7, #8]
 8016afe:	607a      	str	r2, [r7, #4]
 8016b00:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8016b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b04:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8016b06:	687b      	ldr	r3, [r7, #4]
 8016b08:	009b      	lsls	r3, r3, #2
 8016b0a:	461a      	mov	r2, r3
 8016b0c:	21a5      	movs	r1, #165	; 0xa5
 8016b0e:	f00f fcb5 	bl	802647c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8016b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8016b16:	6879      	ldr	r1, [r7, #4]
 8016b18:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8016b1c:	440b      	add	r3, r1
 8016b1e:	009b      	lsls	r3, r3, #2
 8016b20:	4413      	add	r3, r2
 8016b22:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8016b24:	69bb      	ldr	r3, [r7, #24]
 8016b26:	f023 0307 	bic.w	r3, r3, #7
 8016b2a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8016b2c:	69bb      	ldr	r3, [r7, #24]
 8016b2e:	f003 0307 	and.w	r3, r3, #7
 8016b32:	2b00      	cmp	r3, #0
 8016b34:	d00a      	beq.n	8016b4c <prvInitialiseNewTask+0x58>
	__asm volatile
 8016b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016b3a:	f383 8811 	msr	BASEPRI, r3
 8016b3e:	f3bf 8f6f 	isb	sy
 8016b42:	f3bf 8f4f 	dsb	sy
 8016b46:	617b      	str	r3, [r7, #20]
}
 8016b48:	bf00      	nop
 8016b4a:	e7fe      	b.n	8016b4a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8016b4c:	68bb      	ldr	r3, [r7, #8]
 8016b4e:	2b00      	cmp	r3, #0
 8016b50:	d01f      	beq.n	8016b92 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8016b52:	2300      	movs	r3, #0
 8016b54:	61fb      	str	r3, [r7, #28]
 8016b56:	e012      	b.n	8016b7e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8016b58:	68ba      	ldr	r2, [r7, #8]
 8016b5a:	69fb      	ldr	r3, [r7, #28]
 8016b5c:	4413      	add	r3, r2
 8016b5e:	7819      	ldrb	r1, [r3, #0]
 8016b60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016b62:	69fb      	ldr	r3, [r7, #28]
 8016b64:	4413      	add	r3, r2
 8016b66:	3334      	adds	r3, #52	; 0x34
 8016b68:	460a      	mov	r2, r1
 8016b6a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8016b6c:	68ba      	ldr	r2, [r7, #8]
 8016b6e:	69fb      	ldr	r3, [r7, #28]
 8016b70:	4413      	add	r3, r2
 8016b72:	781b      	ldrb	r3, [r3, #0]
 8016b74:	2b00      	cmp	r3, #0
 8016b76:	d006      	beq.n	8016b86 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8016b78:	69fb      	ldr	r3, [r7, #28]
 8016b7a:	3301      	adds	r3, #1
 8016b7c:	61fb      	str	r3, [r7, #28]
 8016b7e:	69fb      	ldr	r3, [r7, #28]
 8016b80:	2b0f      	cmp	r3, #15
 8016b82:	d9e9      	bls.n	8016b58 <prvInitialiseNewTask+0x64>
 8016b84:	e000      	b.n	8016b88 <prvInitialiseNewTask+0x94>
			{
				break;
 8016b86:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8016b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b8a:	2200      	movs	r2, #0
 8016b8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8016b90:	e003      	b.n	8016b9a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8016b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b94:	2200      	movs	r2, #0
 8016b96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8016b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b9c:	2b37      	cmp	r3, #55	; 0x37
 8016b9e:	d901      	bls.n	8016ba4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8016ba0:	2337      	movs	r3, #55	; 0x37
 8016ba2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8016ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ba6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016ba8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8016baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016bac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016bae:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8016bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016bb2:	2200      	movs	r2, #0
 8016bb4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8016bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016bb8:	3304      	adds	r3, #4
 8016bba:	4618      	mov	r0, r3
 8016bbc:	f7fe fb54 	bl	8015268 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8016bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016bc2:	3318      	adds	r3, #24
 8016bc4:	4618      	mov	r0, r3
 8016bc6:	f7fe fb4f 	bl	8015268 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8016bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016bcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016bce:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016bd2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8016bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016bd8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8016bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016bdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016bde:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8016be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016be2:	2200      	movs	r2, #0
 8016be4:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8016be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016be8:	2200      	movs	r2, #0
 8016bea:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8016bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016bee:	2200      	movs	r2, #0
 8016bf0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8016bf4:	683a      	ldr	r2, [r7, #0]
 8016bf6:	68f9      	ldr	r1, [r7, #12]
 8016bf8:	69b8      	ldr	r0, [r7, #24]
 8016bfa:	f7fe fbc9 	bl	8015390 <pxPortInitialiseStack>
 8016bfe:	4602      	mov	r2, r0
 8016c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c02:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8016c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c06:	2b00      	cmp	r3, #0
 8016c08:	d002      	beq.n	8016c10 <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8016c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016c0e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016c10:	bf00      	nop
 8016c12:	3720      	adds	r7, #32
 8016c14:	46bd      	mov	sp, r7
 8016c16:	bd80      	pop	{r7, pc}

08016c18 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8016c18:	b580      	push	{r7, lr}
 8016c1a:	b082      	sub	sp, #8
 8016c1c:	af00      	add	r7, sp, #0
 8016c1e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8016c20:	f7fe fce0 	bl	80155e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8016c24:	4b2d      	ldr	r3, [pc, #180]	; (8016cdc <prvAddNewTaskToReadyList+0xc4>)
 8016c26:	681b      	ldr	r3, [r3, #0]
 8016c28:	3301      	adds	r3, #1
 8016c2a:	4a2c      	ldr	r2, [pc, #176]	; (8016cdc <prvAddNewTaskToReadyList+0xc4>)
 8016c2c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8016c2e:	4b2c      	ldr	r3, [pc, #176]	; (8016ce0 <prvAddNewTaskToReadyList+0xc8>)
 8016c30:	681b      	ldr	r3, [r3, #0]
 8016c32:	2b00      	cmp	r3, #0
 8016c34:	d109      	bne.n	8016c4a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8016c36:	4a2a      	ldr	r2, [pc, #168]	; (8016ce0 <prvAddNewTaskToReadyList+0xc8>)
 8016c38:	687b      	ldr	r3, [r7, #4]
 8016c3a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8016c3c:	4b27      	ldr	r3, [pc, #156]	; (8016cdc <prvAddNewTaskToReadyList+0xc4>)
 8016c3e:	681b      	ldr	r3, [r3, #0]
 8016c40:	2b01      	cmp	r3, #1
 8016c42:	d110      	bne.n	8016c66 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8016c44:	f000 fc68 	bl	8017518 <prvInitialiseTaskLists>
 8016c48:	e00d      	b.n	8016c66 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8016c4a:	4b26      	ldr	r3, [pc, #152]	; (8016ce4 <prvAddNewTaskToReadyList+0xcc>)
 8016c4c:	681b      	ldr	r3, [r3, #0]
 8016c4e:	2b00      	cmp	r3, #0
 8016c50:	d109      	bne.n	8016c66 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8016c52:	4b23      	ldr	r3, [pc, #140]	; (8016ce0 <prvAddNewTaskToReadyList+0xc8>)
 8016c54:	681b      	ldr	r3, [r3, #0]
 8016c56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016c58:	687b      	ldr	r3, [r7, #4]
 8016c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016c5c:	429a      	cmp	r2, r3
 8016c5e:	d802      	bhi.n	8016c66 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8016c60:	4a1f      	ldr	r2, [pc, #124]	; (8016ce0 <prvAddNewTaskToReadyList+0xc8>)
 8016c62:	687b      	ldr	r3, [r7, #4]
 8016c64:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8016c66:	4b20      	ldr	r3, [pc, #128]	; (8016ce8 <prvAddNewTaskToReadyList+0xd0>)
 8016c68:	681b      	ldr	r3, [r3, #0]
 8016c6a:	3301      	adds	r3, #1
 8016c6c:	4a1e      	ldr	r2, [pc, #120]	; (8016ce8 <prvAddNewTaskToReadyList+0xd0>)
 8016c6e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8016c70:	4b1d      	ldr	r3, [pc, #116]	; (8016ce8 <prvAddNewTaskToReadyList+0xd0>)
 8016c72:	681a      	ldr	r2, [r3, #0]
 8016c74:	687b      	ldr	r3, [r7, #4]
 8016c76:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8016c78:	687b      	ldr	r3, [r7, #4]
 8016c7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016c7c:	4b1b      	ldr	r3, [pc, #108]	; (8016cec <prvAddNewTaskToReadyList+0xd4>)
 8016c7e:	681b      	ldr	r3, [r3, #0]
 8016c80:	429a      	cmp	r2, r3
 8016c82:	d903      	bls.n	8016c8c <prvAddNewTaskToReadyList+0x74>
 8016c84:	687b      	ldr	r3, [r7, #4]
 8016c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016c88:	4a18      	ldr	r2, [pc, #96]	; (8016cec <prvAddNewTaskToReadyList+0xd4>)
 8016c8a:	6013      	str	r3, [r2, #0]
 8016c8c:	687b      	ldr	r3, [r7, #4]
 8016c8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016c90:	4613      	mov	r3, r2
 8016c92:	009b      	lsls	r3, r3, #2
 8016c94:	4413      	add	r3, r2
 8016c96:	009b      	lsls	r3, r3, #2
 8016c98:	4a15      	ldr	r2, [pc, #84]	; (8016cf0 <prvAddNewTaskToReadyList+0xd8>)
 8016c9a:	441a      	add	r2, r3
 8016c9c:	687b      	ldr	r3, [r7, #4]
 8016c9e:	3304      	adds	r3, #4
 8016ca0:	4619      	mov	r1, r3
 8016ca2:	4610      	mov	r0, r2
 8016ca4:	f7fe faed 	bl	8015282 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8016ca8:	f7fe fccc 	bl	8015644 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8016cac:	4b0d      	ldr	r3, [pc, #52]	; (8016ce4 <prvAddNewTaskToReadyList+0xcc>)
 8016cae:	681b      	ldr	r3, [r3, #0]
 8016cb0:	2b00      	cmp	r3, #0
 8016cb2:	d00e      	beq.n	8016cd2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8016cb4:	4b0a      	ldr	r3, [pc, #40]	; (8016ce0 <prvAddNewTaskToReadyList+0xc8>)
 8016cb6:	681b      	ldr	r3, [r3, #0]
 8016cb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016cba:	687b      	ldr	r3, [r7, #4]
 8016cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016cbe:	429a      	cmp	r2, r3
 8016cc0:	d207      	bcs.n	8016cd2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8016cc2:	4b0c      	ldr	r3, [pc, #48]	; (8016cf4 <prvAddNewTaskToReadyList+0xdc>)
 8016cc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016cc8:	601a      	str	r2, [r3, #0]
 8016cca:	f3bf 8f4f 	dsb	sy
 8016cce:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016cd2:	bf00      	nop
 8016cd4:	3708      	adds	r7, #8
 8016cd6:	46bd      	mov	sp, r7
 8016cd8:	bd80      	pop	{r7, pc}
 8016cda:	bf00      	nop
 8016cdc:	24024fd8 	.word	0x24024fd8
 8016ce0:	24024b04 	.word	0x24024b04
 8016ce4:	24024fe4 	.word	0x24024fe4
 8016ce8:	24024ff4 	.word	0x24024ff4
 8016cec:	24024fe0 	.word	0x24024fe0
 8016cf0:	24024b08 	.word	0x24024b08
 8016cf4:	e000ed04 	.word	0xe000ed04

08016cf8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8016cf8:	b580      	push	{r7, lr}
 8016cfa:	b084      	sub	sp, #16
 8016cfc:	af00      	add	r7, sp, #0
 8016cfe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8016d00:	2300      	movs	r3, #0
 8016d02:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8016d04:	687b      	ldr	r3, [r7, #4]
 8016d06:	2b00      	cmp	r3, #0
 8016d08:	d017      	beq.n	8016d3a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8016d0a:	4b13      	ldr	r3, [pc, #76]	; (8016d58 <vTaskDelay+0x60>)
 8016d0c:	681b      	ldr	r3, [r3, #0]
 8016d0e:	2b00      	cmp	r3, #0
 8016d10:	d00a      	beq.n	8016d28 <vTaskDelay+0x30>
	__asm volatile
 8016d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d16:	f383 8811 	msr	BASEPRI, r3
 8016d1a:	f3bf 8f6f 	isb	sy
 8016d1e:	f3bf 8f4f 	dsb	sy
 8016d22:	60bb      	str	r3, [r7, #8]
}
 8016d24:	bf00      	nop
 8016d26:	e7fe      	b.n	8016d26 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8016d28:	f000 f888 	bl	8016e3c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8016d2c:	2100      	movs	r1, #0
 8016d2e:	6878      	ldr	r0, [r7, #4]
 8016d30:	f000 fe4a 	bl	80179c8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8016d34:	f000 f890 	bl	8016e58 <xTaskResumeAll>
 8016d38:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8016d3a:	68fb      	ldr	r3, [r7, #12]
 8016d3c:	2b00      	cmp	r3, #0
 8016d3e:	d107      	bne.n	8016d50 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8016d40:	4b06      	ldr	r3, [pc, #24]	; (8016d5c <vTaskDelay+0x64>)
 8016d42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016d46:	601a      	str	r2, [r3, #0]
 8016d48:	f3bf 8f4f 	dsb	sy
 8016d4c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8016d50:	bf00      	nop
 8016d52:	3710      	adds	r7, #16
 8016d54:	46bd      	mov	sp, r7
 8016d56:	bd80      	pop	{r7, pc}
 8016d58:	24025000 	.word	0x24025000
 8016d5c:	e000ed04 	.word	0xe000ed04

08016d60 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8016d60:	b580      	push	{r7, lr}
 8016d62:	b08a      	sub	sp, #40	; 0x28
 8016d64:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8016d66:	2300      	movs	r3, #0
 8016d68:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8016d6a:	2300      	movs	r3, #0
 8016d6c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8016d6e:	463a      	mov	r2, r7
 8016d70:	1d39      	adds	r1, r7, #4
 8016d72:	f107 0308 	add.w	r3, r7, #8
 8016d76:	4618      	mov	r0, r3
 8016d78:	f7fe f836 	bl	8014de8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8016d7c:	6839      	ldr	r1, [r7, #0]
 8016d7e:	687b      	ldr	r3, [r7, #4]
 8016d80:	68ba      	ldr	r2, [r7, #8]
 8016d82:	9202      	str	r2, [sp, #8]
 8016d84:	9301      	str	r3, [sp, #4]
 8016d86:	2300      	movs	r3, #0
 8016d88:	9300      	str	r3, [sp, #0]
 8016d8a:	2300      	movs	r3, #0
 8016d8c:	460a      	mov	r2, r1
 8016d8e:	4924      	ldr	r1, [pc, #144]	; (8016e20 <vTaskStartScheduler+0xc0>)
 8016d90:	4824      	ldr	r0, [pc, #144]	; (8016e24 <vTaskStartScheduler+0xc4>)
 8016d92:	f7ff fe0d 	bl	80169b0 <xTaskCreateStatic>
 8016d96:	4603      	mov	r3, r0
 8016d98:	4a23      	ldr	r2, [pc, #140]	; (8016e28 <vTaskStartScheduler+0xc8>)
 8016d9a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8016d9c:	4b22      	ldr	r3, [pc, #136]	; (8016e28 <vTaskStartScheduler+0xc8>)
 8016d9e:	681b      	ldr	r3, [r3, #0]
 8016da0:	2b00      	cmp	r3, #0
 8016da2:	d002      	beq.n	8016daa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8016da4:	2301      	movs	r3, #1
 8016da6:	617b      	str	r3, [r7, #20]
 8016da8:	e001      	b.n	8016dae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8016daa:	2300      	movs	r3, #0
 8016dac:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8016dae:	697b      	ldr	r3, [r7, #20]
 8016db0:	2b01      	cmp	r3, #1
 8016db2:	d102      	bne.n	8016dba <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8016db4:	f000 fe5c 	bl	8017a70 <xTimerCreateTimerTask>
 8016db8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8016dba:	697b      	ldr	r3, [r7, #20]
 8016dbc:	2b01      	cmp	r3, #1
 8016dbe:	d11c      	bne.n	8016dfa <vTaskStartScheduler+0x9a>
	__asm volatile
 8016dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016dc4:	f383 8811 	msr	BASEPRI, r3
 8016dc8:	f3bf 8f6f 	isb	sy
 8016dcc:	f3bf 8f4f 	dsb	sy
 8016dd0:	613b      	str	r3, [r7, #16]
}
 8016dd2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8016dd4:	4b15      	ldr	r3, [pc, #84]	; (8016e2c <vTaskStartScheduler+0xcc>)
 8016dd6:	f04f 32ff 	mov.w	r2, #4294967295
 8016dda:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8016ddc:	4b14      	ldr	r3, [pc, #80]	; (8016e30 <vTaskStartScheduler+0xd0>)
 8016dde:	2201      	movs	r2, #1
 8016de0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8016de2:	4b14      	ldr	r3, [pc, #80]	; (8016e34 <vTaskStartScheduler+0xd4>)
 8016de4:	2200      	movs	r2, #0
 8016de6:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 8016de8:	4b13      	ldr	r3, [pc, #76]	; (8016e38 <vTaskStartScheduler+0xd8>)
 8016dea:	681b      	ldr	r3, [r3, #0]
 8016dec:	2100      	movs	r1, #0
 8016dee:	4618      	mov	r0, r3
 8016df0:	f000 f9b6 	bl	8017160 <xTaskCallApplicationTaskHook>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8016df4:	f7fe fb54 	bl	80154a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8016df8:	e00e      	b.n	8016e18 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8016dfa:	697b      	ldr	r3, [r7, #20]
 8016dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016e00:	d10a      	bne.n	8016e18 <vTaskStartScheduler+0xb8>
	__asm volatile
 8016e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e06:	f383 8811 	msr	BASEPRI, r3
 8016e0a:	f3bf 8f6f 	isb	sy
 8016e0e:	f3bf 8f4f 	dsb	sy
 8016e12:	60fb      	str	r3, [r7, #12]
}
 8016e14:	bf00      	nop
 8016e16:	e7fe      	b.n	8016e16 <vTaskStartScheduler+0xb6>
}
 8016e18:	bf00      	nop
 8016e1a:	3718      	adds	r7, #24
 8016e1c:	46bd      	mov	sp, r7
 8016e1e:	bd80      	pop	{r7, pc}
 8016e20:	080296d8 	.word	0x080296d8
 8016e24:	080174e5 	.word	0x080174e5
 8016e28:	24024ffc 	.word	0x24024ffc
 8016e2c:	24024ff8 	.word	0x24024ff8
 8016e30:	24024fe4 	.word	0x24024fe4
 8016e34:	24024fdc 	.word	0x24024fdc
 8016e38:	24024b04 	.word	0x24024b04

08016e3c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8016e3c:	b480      	push	{r7}
 8016e3e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8016e40:	4b04      	ldr	r3, [pc, #16]	; (8016e54 <vTaskSuspendAll+0x18>)
 8016e42:	681b      	ldr	r3, [r3, #0]
 8016e44:	3301      	adds	r3, #1
 8016e46:	4a03      	ldr	r2, [pc, #12]	; (8016e54 <vTaskSuspendAll+0x18>)
 8016e48:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8016e4a:	bf00      	nop
 8016e4c:	46bd      	mov	sp, r7
 8016e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e52:	4770      	bx	lr
 8016e54:	24025000 	.word	0x24025000

08016e58 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8016e58:	b580      	push	{r7, lr}
 8016e5a:	b084      	sub	sp, #16
 8016e5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8016e5e:	2300      	movs	r3, #0
 8016e60:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8016e62:	2300      	movs	r3, #0
 8016e64:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8016e66:	4b42      	ldr	r3, [pc, #264]	; (8016f70 <xTaskResumeAll+0x118>)
 8016e68:	681b      	ldr	r3, [r3, #0]
 8016e6a:	2b00      	cmp	r3, #0
 8016e6c:	d10a      	bne.n	8016e84 <xTaskResumeAll+0x2c>
	__asm volatile
 8016e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e72:	f383 8811 	msr	BASEPRI, r3
 8016e76:	f3bf 8f6f 	isb	sy
 8016e7a:	f3bf 8f4f 	dsb	sy
 8016e7e:	603b      	str	r3, [r7, #0]
}
 8016e80:	bf00      	nop
 8016e82:	e7fe      	b.n	8016e82 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8016e84:	f7fe fbae 	bl	80155e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8016e88:	4b39      	ldr	r3, [pc, #228]	; (8016f70 <xTaskResumeAll+0x118>)
 8016e8a:	681b      	ldr	r3, [r3, #0]
 8016e8c:	3b01      	subs	r3, #1
 8016e8e:	4a38      	ldr	r2, [pc, #224]	; (8016f70 <xTaskResumeAll+0x118>)
 8016e90:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016e92:	4b37      	ldr	r3, [pc, #220]	; (8016f70 <xTaskResumeAll+0x118>)
 8016e94:	681b      	ldr	r3, [r3, #0]
 8016e96:	2b00      	cmp	r3, #0
 8016e98:	d162      	bne.n	8016f60 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8016e9a:	4b36      	ldr	r3, [pc, #216]	; (8016f74 <xTaskResumeAll+0x11c>)
 8016e9c:	681b      	ldr	r3, [r3, #0]
 8016e9e:	2b00      	cmp	r3, #0
 8016ea0:	d05e      	beq.n	8016f60 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8016ea2:	e02f      	b.n	8016f04 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016ea4:	4b34      	ldr	r3, [pc, #208]	; (8016f78 <xTaskResumeAll+0x120>)
 8016ea6:	68db      	ldr	r3, [r3, #12]
 8016ea8:	68db      	ldr	r3, [r3, #12]
 8016eaa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8016eac:	68fb      	ldr	r3, [r7, #12]
 8016eae:	3318      	adds	r3, #24
 8016eb0:	4618      	mov	r0, r3
 8016eb2:	f7fe fa43 	bl	801533c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016eb6:	68fb      	ldr	r3, [r7, #12]
 8016eb8:	3304      	adds	r3, #4
 8016eba:	4618      	mov	r0, r3
 8016ebc:	f7fe fa3e 	bl	801533c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8016ec0:	68fb      	ldr	r3, [r7, #12]
 8016ec2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016ec4:	4b2d      	ldr	r3, [pc, #180]	; (8016f7c <xTaskResumeAll+0x124>)
 8016ec6:	681b      	ldr	r3, [r3, #0]
 8016ec8:	429a      	cmp	r2, r3
 8016eca:	d903      	bls.n	8016ed4 <xTaskResumeAll+0x7c>
 8016ecc:	68fb      	ldr	r3, [r7, #12]
 8016ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016ed0:	4a2a      	ldr	r2, [pc, #168]	; (8016f7c <xTaskResumeAll+0x124>)
 8016ed2:	6013      	str	r3, [r2, #0]
 8016ed4:	68fb      	ldr	r3, [r7, #12]
 8016ed6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016ed8:	4613      	mov	r3, r2
 8016eda:	009b      	lsls	r3, r3, #2
 8016edc:	4413      	add	r3, r2
 8016ede:	009b      	lsls	r3, r3, #2
 8016ee0:	4a27      	ldr	r2, [pc, #156]	; (8016f80 <xTaskResumeAll+0x128>)
 8016ee2:	441a      	add	r2, r3
 8016ee4:	68fb      	ldr	r3, [r7, #12]
 8016ee6:	3304      	adds	r3, #4
 8016ee8:	4619      	mov	r1, r3
 8016eea:	4610      	mov	r0, r2
 8016eec:	f7fe f9c9 	bl	8015282 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8016ef0:	68fb      	ldr	r3, [r7, #12]
 8016ef2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016ef4:	4b23      	ldr	r3, [pc, #140]	; (8016f84 <xTaskResumeAll+0x12c>)
 8016ef6:	681b      	ldr	r3, [r3, #0]
 8016ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016efa:	429a      	cmp	r2, r3
 8016efc:	d302      	bcc.n	8016f04 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8016efe:	4b22      	ldr	r3, [pc, #136]	; (8016f88 <xTaskResumeAll+0x130>)
 8016f00:	2201      	movs	r2, #1
 8016f02:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8016f04:	4b1c      	ldr	r3, [pc, #112]	; (8016f78 <xTaskResumeAll+0x120>)
 8016f06:	681b      	ldr	r3, [r3, #0]
 8016f08:	2b00      	cmp	r3, #0
 8016f0a:	d1cb      	bne.n	8016ea4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8016f0c:	68fb      	ldr	r3, [r7, #12]
 8016f0e:	2b00      	cmp	r3, #0
 8016f10:	d001      	beq.n	8016f16 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8016f12:	f000 fb9f 	bl	8017654 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8016f16:	4b1d      	ldr	r3, [pc, #116]	; (8016f8c <xTaskResumeAll+0x134>)
 8016f18:	681b      	ldr	r3, [r3, #0]
 8016f1a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8016f1c:	687b      	ldr	r3, [r7, #4]
 8016f1e:	2b00      	cmp	r3, #0
 8016f20:	d010      	beq.n	8016f44 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8016f22:	f000 f847 	bl	8016fb4 <xTaskIncrementTick>
 8016f26:	4603      	mov	r3, r0
 8016f28:	2b00      	cmp	r3, #0
 8016f2a:	d002      	beq.n	8016f32 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8016f2c:	4b16      	ldr	r3, [pc, #88]	; (8016f88 <xTaskResumeAll+0x130>)
 8016f2e:	2201      	movs	r2, #1
 8016f30:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8016f32:	687b      	ldr	r3, [r7, #4]
 8016f34:	3b01      	subs	r3, #1
 8016f36:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8016f38:	687b      	ldr	r3, [r7, #4]
 8016f3a:	2b00      	cmp	r3, #0
 8016f3c:	d1f1      	bne.n	8016f22 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8016f3e:	4b13      	ldr	r3, [pc, #76]	; (8016f8c <xTaskResumeAll+0x134>)
 8016f40:	2200      	movs	r2, #0
 8016f42:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8016f44:	4b10      	ldr	r3, [pc, #64]	; (8016f88 <xTaskResumeAll+0x130>)
 8016f46:	681b      	ldr	r3, [r3, #0]
 8016f48:	2b00      	cmp	r3, #0
 8016f4a:	d009      	beq.n	8016f60 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8016f4c:	2301      	movs	r3, #1
 8016f4e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8016f50:	4b0f      	ldr	r3, [pc, #60]	; (8016f90 <xTaskResumeAll+0x138>)
 8016f52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016f56:	601a      	str	r2, [r3, #0]
 8016f58:	f3bf 8f4f 	dsb	sy
 8016f5c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8016f60:	f7fe fb70 	bl	8015644 <vPortExitCritical>

	return xAlreadyYielded;
 8016f64:	68bb      	ldr	r3, [r7, #8]
}
 8016f66:	4618      	mov	r0, r3
 8016f68:	3710      	adds	r7, #16
 8016f6a:	46bd      	mov	sp, r7
 8016f6c:	bd80      	pop	{r7, pc}
 8016f6e:	bf00      	nop
 8016f70:	24025000 	.word	0x24025000
 8016f74:	24024fd8 	.word	0x24024fd8
 8016f78:	24024f98 	.word	0x24024f98
 8016f7c:	24024fe0 	.word	0x24024fe0
 8016f80:	24024b08 	.word	0x24024b08
 8016f84:	24024b04 	.word	0x24024b04
 8016f88:	24024fec 	.word	0x24024fec
 8016f8c:	24024fe8 	.word	0x24024fe8
 8016f90:	e000ed04 	.word	0xe000ed04

08016f94 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8016f94:	b480      	push	{r7}
 8016f96:	b083      	sub	sp, #12
 8016f98:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8016f9a:	4b05      	ldr	r3, [pc, #20]	; (8016fb0 <xTaskGetTickCount+0x1c>)
 8016f9c:	681b      	ldr	r3, [r3, #0]
 8016f9e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8016fa0:	687b      	ldr	r3, [r7, #4]
}
 8016fa2:	4618      	mov	r0, r3
 8016fa4:	370c      	adds	r7, #12
 8016fa6:	46bd      	mov	sp, r7
 8016fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fac:	4770      	bx	lr
 8016fae:	bf00      	nop
 8016fb0:	24024fdc 	.word	0x24024fdc

08016fb4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8016fb4:	b580      	push	{r7, lr}
 8016fb6:	b086      	sub	sp, #24
 8016fb8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8016fba:	2300      	movs	r3, #0
 8016fbc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016fbe:	4b4f      	ldr	r3, [pc, #316]	; (80170fc <xTaskIncrementTick+0x148>)
 8016fc0:	681b      	ldr	r3, [r3, #0]
 8016fc2:	2b00      	cmp	r3, #0
 8016fc4:	f040 808f 	bne.w	80170e6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8016fc8:	4b4d      	ldr	r3, [pc, #308]	; (8017100 <xTaskIncrementTick+0x14c>)
 8016fca:	681b      	ldr	r3, [r3, #0]
 8016fcc:	3301      	adds	r3, #1
 8016fce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8016fd0:	4a4b      	ldr	r2, [pc, #300]	; (8017100 <xTaskIncrementTick+0x14c>)
 8016fd2:	693b      	ldr	r3, [r7, #16]
 8016fd4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8016fd6:	693b      	ldr	r3, [r7, #16]
 8016fd8:	2b00      	cmp	r3, #0
 8016fda:	d120      	bne.n	801701e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8016fdc:	4b49      	ldr	r3, [pc, #292]	; (8017104 <xTaskIncrementTick+0x150>)
 8016fde:	681b      	ldr	r3, [r3, #0]
 8016fe0:	681b      	ldr	r3, [r3, #0]
 8016fe2:	2b00      	cmp	r3, #0
 8016fe4:	d00a      	beq.n	8016ffc <xTaskIncrementTick+0x48>
	__asm volatile
 8016fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016fea:	f383 8811 	msr	BASEPRI, r3
 8016fee:	f3bf 8f6f 	isb	sy
 8016ff2:	f3bf 8f4f 	dsb	sy
 8016ff6:	603b      	str	r3, [r7, #0]
}
 8016ff8:	bf00      	nop
 8016ffa:	e7fe      	b.n	8016ffa <xTaskIncrementTick+0x46>
 8016ffc:	4b41      	ldr	r3, [pc, #260]	; (8017104 <xTaskIncrementTick+0x150>)
 8016ffe:	681b      	ldr	r3, [r3, #0]
 8017000:	60fb      	str	r3, [r7, #12]
 8017002:	4b41      	ldr	r3, [pc, #260]	; (8017108 <xTaskIncrementTick+0x154>)
 8017004:	681b      	ldr	r3, [r3, #0]
 8017006:	4a3f      	ldr	r2, [pc, #252]	; (8017104 <xTaskIncrementTick+0x150>)
 8017008:	6013      	str	r3, [r2, #0]
 801700a:	4a3f      	ldr	r2, [pc, #252]	; (8017108 <xTaskIncrementTick+0x154>)
 801700c:	68fb      	ldr	r3, [r7, #12]
 801700e:	6013      	str	r3, [r2, #0]
 8017010:	4b3e      	ldr	r3, [pc, #248]	; (801710c <xTaskIncrementTick+0x158>)
 8017012:	681b      	ldr	r3, [r3, #0]
 8017014:	3301      	adds	r3, #1
 8017016:	4a3d      	ldr	r2, [pc, #244]	; (801710c <xTaskIncrementTick+0x158>)
 8017018:	6013      	str	r3, [r2, #0]
 801701a:	f000 fb1b 	bl	8017654 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801701e:	4b3c      	ldr	r3, [pc, #240]	; (8017110 <xTaskIncrementTick+0x15c>)
 8017020:	681b      	ldr	r3, [r3, #0]
 8017022:	693a      	ldr	r2, [r7, #16]
 8017024:	429a      	cmp	r2, r3
 8017026:	d349      	bcc.n	80170bc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8017028:	4b36      	ldr	r3, [pc, #216]	; (8017104 <xTaskIncrementTick+0x150>)
 801702a:	681b      	ldr	r3, [r3, #0]
 801702c:	681b      	ldr	r3, [r3, #0]
 801702e:	2b00      	cmp	r3, #0
 8017030:	d104      	bne.n	801703c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017032:	4b37      	ldr	r3, [pc, #220]	; (8017110 <xTaskIncrementTick+0x15c>)
 8017034:	f04f 32ff 	mov.w	r2, #4294967295
 8017038:	601a      	str	r2, [r3, #0]
					break;
 801703a:	e03f      	b.n	80170bc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801703c:	4b31      	ldr	r3, [pc, #196]	; (8017104 <xTaskIncrementTick+0x150>)
 801703e:	681b      	ldr	r3, [r3, #0]
 8017040:	68db      	ldr	r3, [r3, #12]
 8017042:	68db      	ldr	r3, [r3, #12]
 8017044:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8017046:	68bb      	ldr	r3, [r7, #8]
 8017048:	685b      	ldr	r3, [r3, #4]
 801704a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801704c:	693a      	ldr	r2, [r7, #16]
 801704e:	687b      	ldr	r3, [r7, #4]
 8017050:	429a      	cmp	r2, r3
 8017052:	d203      	bcs.n	801705c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8017054:	4a2e      	ldr	r2, [pc, #184]	; (8017110 <xTaskIncrementTick+0x15c>)
 8017056:	687b      	ldr	r3, [r7, #4]
 8017058:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801705a:	e02f      	b.n	80170bc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801705c:	68bb      	ldr	r3, [r7, #8]
 801705e:	3304      	adds	r3, #4
 8017060:	4618      	mov	r0, r3
 8017062:	f7fe f96b 	bl	801533c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8017066:	68bb      	ldr	r3, [r7, #8]
 8017068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801706a:	2b00      	cmp	r3, #0
 801706c:	d004      	beq.n	8017078 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801706e:	68bb      	ldr	r3, [r7, #8]
 8017070:	3318      	adds	r3, #24
 8017072:	4618      	mov	r0, r3
 8017074:	f7fe f962 	bl	801533c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8017078:	68bb      	ldr	r3, [r7, #8]
 801707a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801707c:	4b25      	ldr	r3, [pc, #148]	; (8017114 <xTaskIncrementTick+0x160>)
 801707e:	681b      	ldr	r3, [r3, #0]
 8017080:	429a      	cmp	r2, r3
 8017082:	d903      	bls.n	801708c <xTaskIncrementTick+0xd8>
 8017084:	68bb      	ldr	r3, [r7, #8]
 8017086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017088:	4a22      	ldr	r2, [pc, #136]	; (8017114 <xTaskIncrementTick+0x160>)
 801708a:	6013      	str	r3, [r2, #0]
 801708c:	68bb      	ldr	r3, [r7, #8]
 801708e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017090:	4613      	mov	r3, r2
 8017092:	009b      	lsls	r3, r3, #2
 8017094:	4413      	add	r3, r2
 8017096:	009b      	lsls	r3, r3, #2
 8017098:	4a1f      	ldr	r2, [pc, #124]	; (8017118 <xTaskIncrementTick+0x164>)
 801709a:	441a      	add	r2, r3
 801709c:	68bb      	ldr	r3, [r7, #8]
 801709e:	3304      	adds	r3, #4
 80170a0:	4619      	mov	r1, r3
 80170a2:	4610      	mov	r0, r2
 80170a4:	f7fe f8ed 	bl	8015282 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80170a8:	68bb      	ldr	r3, [r7, #8]
 80170aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80170ac:	4b1b      	ldr	r3, [pc, #108]	; (801711c <xTaskIncrementTick+0x168>)
 80170ae:	681b      	ldr	r3, [r3, #0]
 80170b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80170b2:	429a      	cmp	r2, r3
 80170b4:	d3b8      	bcc.n	8017028 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80170b6:	2301      	movs	r3, #1
 80170b8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80170ba:	e7b5      	b.n	8017028 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80170bc:	4b17      	ldr	r3, [pc, #92]	; (801711c <xTaskIncrementTick+0x168>)
 80170be:	681b      	ldr	r3, [r3, #0]
 80170c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80170c2:	4915      	ldr	r1, [pc, #84]	; (8017118 <xTaskIncrementTick+0x164>)
 80170c4:	4613      	mov	r3, r2
 80170c6:	009b      	lsls	r3, r3, #2
 80170c8:	4413      	add	r3, r2
 80170ca:	009b      	lsls	r3, r3, #2
 80170cc:	440b      	add	r3, r1
 80170ce:	681b      	ldr	r3, [r3, #0]
 80170d0:	2b01      	cmp	r3, #1
 80170d2:	d901      	bls.n	80170d8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80170d4:	2301      	movs	r3, #1
 80170d6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80170d8:	4b11      	ldr	r3, [pc, #68]	; (8017120 <xTaskIncrementTick+0x16c>)
 80170da:	681b      	ldr	r3, [r3, #0]
 80170dc:	2b00      	cmp	r3, #0
 80170de:	d007      	beq.n	80170f0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80170e0:	2301      	movs	r3, #1
 80170e2:	617b      	str	r3, [r7, #20]
 80170e4:	e004      	b.n	80170f0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80170e6:	4b0f      	ldr	r3, [pc, #60]	; (8017124 <xTaskIncrementTick+0x170>)
 80170e8:	681b      	ldr	r3, [r3, #0]
 80170ea:	3301      	adds	r3, #1
 80170ec:	4a0d      	ldr	r2, [pc, #52]	; (8017124 <xTaskIncrementTick+0x170>)
 80170ee:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80170f0:	697b      	ldr	r3, [r7, #20]
}
 80170f2:	4618      	mov	r0, r3
 80170f4:	3718      	adds	r7, #24
 80170f6:	46bd      	mov	sp, r7
 80170f8:	bd80      	pop	{r7, pc}
 80170fa:	bf00      	nop
 80170fc:	24025000 	.word	0x24025000
 8017100:	24024fdc 	.word	0x24024fdc
 8017104:	24024f90 	.word	0x24024f90
 8017108:	24024f94 	.word	0x24024f94
 801710c:	24024ff0 	.word	0x24024ff0
 8017110:	24024ff8 	.word	0x24024ff8
 8017114:	24024fe0 	.word	0x24024fe0
 8017118:	24024b08 	.word	0x24024b08
 801711c:	24024b04 	.word	0x24024b04
 8017120:	24024fec 	.word	0x24024fec
 8017124:	24024fe8 	.word	0x24024fe8

08017128 <vTaskSetApplicationTaskTag>:
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
	{
 8017128:	b580      	push	{r7, lr}
 801712a:	b084      	sub	sp, #16
 801712c:	af00      	add	r7, sp, #0
 801712e:	6078      	str	r0, [r7, #4]
 8017130:	6039      	str	r1, [r7, #0]
	TCB_t *xTCB;

		/* If xTask is NULL then it is the task hook of the calling task that is
		getting set. */
		if( xTask == NULL )
 8017132:	687b      	ldr	r3, [r7, #4]
 8017134:	2b00      	cmp	r3, #0
 8017136:	d103      	bne.n	8017140 <vTaskSetApplicationTaskTag+0x18>
		{
			xTCB = ( TCB_t * ) pxCurrentTCB;
 8017138:	4b08      	ldr	r3, [pc, #32]	; (801715c <vTaskSetApplicationTaskTag+0x34>)
 801713a:	681b      	ldr	r3, [r3, #0]
 801713c:	60fb      	str	r3, [r7, #12]
 801713e:	e001      	b.n	8017144 <vTaskSetApplicationTaskTag+0x1c>
		}
		else
		{
			xTCB = xTask;
 8017140:	687b      	ldr	r3, [r7, #4]
 8017142:	60fb      	str	r3, [r7, #12]
		}

		/* Save the hook function in the TCB.  A critical section is required as
		the value can be accessed from an interrupt. */
		taskENTER_CRITICAL();
 8017144:	f7fe fa4e 	bl	80155e4 <vPortEnterCritical>
		{
			xTCB->pxTaskTag = pxHookFunction;
 8017148:	68fb      	ldr	r3, [r7, #12]
 801714a:	683a      	ldr	r2, [r7, #0]
 801714c:	655a      	str	r2, [r3, #84]	; 0x54
		}
		taskEXIT_CRITICAL();
 801714e:	f7fe fa79 	bl	8015644 <vPortExitCritical>
	}
 8017152:	bf00      	nop
 8017154:	3710      	adds	r7, #16
 8017156:	46bd      	mov	sp, r7
 8017158:	bd80      	pop	{r7, pc}
 801715a:	bf00      	nop
 801715c:	24024b04 	.word	0x24024b04

08017160 <xTaskCallApplicationTaskHook>:
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
	{
 8017160:	b580      	push	{r7, lr}
 8017162:	b084      	sub	sp, #16
 8017164:	af00      	add	r7, sp, #0
 8017166:	6078      	str	r0, [r7, #4]
 8017168:	6039      	str	r1, [r7, #0]
	TCB_t *xTCB;
	BaseType_t xReturn;

		/* If xTask is NULL then we are calling our own task hook. */
		if( xTask == NULL )
 801716a:	687b      	ldr	r3, [r7, #4]
 801716c:	2b00      	cmp	r3, #0
 801716e:	d103      	bne.n	8017178 <xTaskCallApplicationTaskHook+0x18>
		{
			xTCB = pxCurrentTCB;
 8017170:	4b0b      	ldr	r3, [pc, #44]	; (80171a0 <xTaskCallApplicationTaskHook+0x40>)
 8017172:	681b      	ldr	r3, [r3, #0]
 8017174:	60fb      	str	r3, [r7, #12]
 8017176:	e001      	b.n	801717c <xTaskCallApplicationTaskHook+0x1c>
		}
		else
		{
			xTCB = xTask;
 8017178:	687b      	ldr	r3, [r7, #4]
 801717a:	60fb      	str	r3, [r7, #12]
		}

		if( xTCB->pxTaskTag != NULL )
 801717c:	68fb      	ldr	r3, [r7, #12]
 801717e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017180:	2b00      	cmp	r3, #0
 8017182:	d005      	beq.n	8017190 <xTaskCallApplicationTaskHook+0x30>
		{
			xReturn = xTCB->pxTaskTag( pvParameter );
 8017184:	68fb      	ldr	r3, [r7, #12]
 8017186:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017188:	6838      	ldr	r0, [r7, #0]
 801718a:	4798      	blx	r3
 801718c:	60b8      	str	r0, [r7, #8]
 801718e:	e001      	b.n	8017194 <xTaskCallApplicationTaskHook+0x34>
		}
		else
		{
			xReturn = pdFAIL;
 8017190:	2300      	movs	r3, #0
 8017192:	60bb      	str	r3, [r7, #8]
		}

		return xReturn;
 8017194:	68bb      	ldr	r3, [r7, #8]
	}
 8017196:	4618      	mov	r0, r3
 8017198:	3710      	adds	r7, #16
 801719a:	46bd      	mov	sp, r7
 801719c:	bd80      	pop	{r7, pc}
 801719e:	bf00      	nop
 80171a0:	24024b04 	.word	0x24024b04

080171a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80171a4:	b580      	push	{r7, lr}
 80171a6:	b084      	sub	sp, #16
 80171a8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80171aa:	4b2d      	ldr	r3, [pc, #180]	; (8017260 <vTaskSwitchContext+0xbc>)
 80171ac:	681b      	ldr	r3, [r3, #0]
 80171ae:	2b00      	cmp	r3, #0
 80171b0:	d003      	beq.n	80171ba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80171b2:	4b2c      	ldr	r3, [pc, #176]	; (8017264 <vTaskSwitchContext+0xc0>)
 80171b4:	2201      	movs	r2, #1
 80171b6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80171b8:	e04d      	b.n	8017256 <vTaskSwitchContext+0xb2>
		xYieldPending = pdFALSE;
 80171ba:	4b2a      	ldr	r3, [pc, #168]	; (8017264 <vTaskSwitchContext+0xc0>)
 80171bc:	2200      	movs	r2, #0
 80171be:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 80171c0:	4b29      	ldr	r3, [pc, #164]	; (8017268 <vTaskSwitchContext+0xc4>)
 80171c2:	681b      	ldr	r3, [r3, #0]
 80171c4:	2101      	movs	r1, #1
 80171c6:	4618      	mov	r0, r3
 80171c8:	f7ff ffca 	bl	8017160 <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80171cc:	4b27      	ldr	r3, [pc, #156]	; (801726c <vTaskSwitchContext+0xc8>)
 80171ce:	681b      	ldr	r3, [r3, #0]
 80171d0:	60fb      	str	r3, [r7, #12]
 80171d2:	e010      	b.n	80171f6 <vTaskSwitchContext+0x52>
 80171d4:	68fb      	ldr	r3, [r7, #12]
 80171d6:	2b00      	cmp	r3, #0
 80171d8:	d10a      	bne.n	80171f0 <vTaskSwitchContext+0x4c>
	__asm volatile
 80171da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80171de:	f383 8811 	msr	BASEPRI, r3
 80171e2:	f3bf 8f6f 	isb	sy
 80171e6:	f3bf 8f4f 	dsb	sy
 80171ea:	607b      	str	r3, [r7, #4]
}
 80171ec:	bf00      	nop
 80171ee:	e7fe      	b.n	80171ee <vTaskSwitchContext+0x4a>
 80171f0:	68fb      	ldr	r3, [r7, #12]
 80171f2:	3b01      	subs	r3, #1
 80171f4:	60fb      	str	r3, [r7, #12]
 80171f6:	491e      	ldr	r1, [pc, #120]	; (8017270 <vTaskSwitchContext+0xcc>)
 80171f8:	68fa      	ldr	r2, [r7, #12]
 80171fa:	4613      	mov	r3, r2
 80171fc:	009b      	lsls	r3, r3, #2
 80171fe:	4413      	add	r3, r2
 8017200:	009b      	lsls	r3, r3, #2
 8017202:	440b      	add	r3, r1
 8017204:	681b      	ldr	r3, [r3, #0]
 8017206:	2b00      	cmp	r3, #0
 8017208:	d0e4      	beq.n	80171d4 <vTaskSwitchContext+0x30>
 801720a:	68fa      	ldr	r2, [r7, #12]
 801720c:	4613      	mov	r3, r2
 801720e:	009b      	lsls	r3, r3, #2
 8017210:	4413      	add	r3, r2
 8017212:	009b      	lsls	r3, r3, #2
 8017214:	4a16      	ldr	r2, [pc, #88]	; (8017270 <vTaskSwitchContext+0xcc>)
 8017216:	4413      	add	r3, r2
 8017218:	60bb      	str	r3, [r7, #8]
 801721a:	68bb      	ldr	r3, [r7, #8]
 801721c:	685b      	ldr	r3, [r3, #4]
 801721e:	685a      	ldr	r2, [r3, #4]
 8017220:	68bb      	ldr	r3, [r7, #8]
 8017222:	605a      	str	r2, [r3, #4]
 8017224:	68bb      	ldr	r3, [r7, #8]
 8017226:	685a      	ldr	r2, [r3, #4]
 8017228:	68bb      	ldr	r3, [r7, #8]
 801722a:	3308      	adds	r3, #8
 801722c:	429a      	cmp	r2, r3
 801722e:	d104      	bne.n	801723a <vTaskSwitchContext+0x96>
 8017230:	68bb      	ldr	r3, [r7, #8]
 8017232:	685b      	ldr	r3, [r3, #4]
 8017234:	685a      	ldr	r2, [r3, #4]
 8017236:	68bb      	ldr	r3, [r7, #8]
 8017238:	605a      	str	r2, [r3, #4]
 801723a:	68bb      	ldr	r3, [r7, #8]
 801723c:	685b      	ldr	r3, [r3, #4]
 801723e:	68db      	ldr	r3, [r3, #12]
 8017240:	4a09      	ldr	r2, [pc, #36]	; (8017268 <vTaskSwitchContext+0xc4>)
 8017242:	6013      	str	r3, [r2, #0]
 8017244:	4a09      	ldr	r2, [pc, #36]	; (801726c <vTaskSwitchContext+0xc8>)
 8017246:	68fb      	ldr	r3, [r7, #12]
 8017248:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 801724a:	4b07      	ldr	r3, [pc, #28]	; (8017268 <vTaskSwitchContext+0xc4>)
 801724c:	681b      	ldr	r3, [r3, #0]
 801724e:	2100      	movs	r1, #0
 8017250:	4618      	mov	r0, r3
 8017252:	f7ff ff85 	bl	8017160 <xTaskCallApplicationTaskHook>
}
 8017256:	bf00      	nop
 8017258:	3710      	adds	r7, #16
 801725a:	46bd      	mov	sp, r7
 801725c:	bd80      	pop	{r7, pc}
 801725e:	bf00      	nop
 8017260:	24025000 	.word	0x24025000
 8017264:	24024fec 	.word	0x24024fec
 8017268:	24024b04 	.word	0x24024b04
 801726c:	24024fe0 	.word	0x24024fe0
 8017270:	24024b08 	.word	0x24024b08

08017274 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8017274:	b580      	push	{r7, lr}
 8017276:	b084      	sub	sp, #16
 8017278:	af00      	add	r7, sp, #0
 801727a:	6078      	str	r0, [r7, #4]
 801727c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801727e:	687b      	ldr	r3, [r7, #4]
 8017280:	2b00      	cmp	r3, #0
 8017282:	d10a      	bne.n	801729a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8017284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017288:	f383 8811 	msr	BASEPRI, r3
 801728c:	f3bf 8f6f 	isb	sy
 8017290:	f3bf 8f4f 	dsb	sy
 8017294:	60fb      	str	r3, [r7, #12]
}
 8017296:	bf00      	nop
 8017298:	e7fe      	b.n	8017298 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801729a:	4b07      	ldr	r3, [pc, #28]	; (80172b8 <vTaskPlaceOnEventList+0x44>)
 801729c:	681b      	ldr	r3, [r3, #0]
 801729e:	3318      	adds	r3, #24
 80172a0:	4619      	mov	r1, r3
 80172a2:	6878      	ldr	r0, [r7, #4]
 80172a4:	f7fe f811 	bl	80152ca <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80172a8:	2101      	movs	r1, #1
 80172aa:	6838      	ldr	r0, [r7, #0]
 80172ac:	f000 fb8c 	bl	80179c8 <prvAddCurrentTaskToDelayedList>
}
 80172b0:	bf00      	nop
 80172b2:	3710      	adds	r7, #16
 80172b4:	46bd      	mov	sp, r7
 80172b6:	bd80      	pop	{r7, pc}
 80172b8:	24024b04 	.word	0x24024b04

080172bc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80172bc:	b580      	push	{r7, lr}
 80172be:	b086      	sub	sp, #24
 80172c0:	af00      	add	r7, sp, #0
 80172c2:	60f8      	str	r0, [r7, #12]
 80172c4:	60b9      	str	r1, [r7, #8]
 80172c6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80172c8:	68fb      	ldr	r3, [r7, #12]
 80172ca:	2b00      	cmp	r3, #0
 80172cc:	d10a      	bne.n	80172e4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80172ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80172d2:	f383 8811 	msr	BASEPRI, r3
 80172d6:	f3bf 8f6f 	isb	sy
 80172da:	f3bf 8f4f 	dsb	sy
 80172de:	617b      	str	r3, [r7, #20]
}
 80172e0:	bf00      	nop
 80172e2:	e7fe      	b.n	80172e2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80172e4:	4b0a      	ldr	r3, [pc, #40]	; (8017310 <vTaskPlaceOnEventListRestricted+0x54>)
 80172e6:	681b      	ldr	r3, [r3, #0]
 80172e8:	3318      	adds	r3, #24
 80172ea:	4619      	mov	r1, r3
 80172ec:	68f8      	ldr	r0, [r7, #12]
 80172ee:	f7fd ffc8 	bl	8015282 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80172f2:	687b      	ldr	r3, [r7, #4]
 80172f4:	2b00      	cmp	r3, #0
 80172f6:	d002      	beq.n	80172fe <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80172f8:	f04f 33ff 	mov.w	r3, #4294967295
 80172fc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80172fe:	6879      	ldr	r1, [r7, #4]
 8017300:	68b8      	ldr	r0, [r7, #8]
 8017302:	f000 fb61 	bl	80179c8 <prvAddCurrentTaskToDelayedList>
	}
 8017306:	bf00      	nop
 8017308:	3718      	adds	r7, #24
 801730a:	46bd      	mov	sp, r7
 801730c:	bd80      	pop	{r7, pc}
 801730e:	bf00      	nop
 8017310:	24024b04 	.word	0x24024b04

08017314 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8017314:	b580      	push	{r7, lr}
 8017316:	b086      	sub	sp, #24
 8017318:	af00      	add	r7, sp, #0
 801731a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801731c:	687b      	ldr	r3, [r7, #4]
 801731e:	68db      	ldr	r3, [r3, #12]
 8017320:	68db      	ldr	r3, [r3, #12]
 8017322:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8017324:	693b      	ldr	r3, [r7, #16]
 8017326:	2b00      	cmp	r3, #0
 8017328:	d10a      	bne.n	8017340 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 801732a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801732e:	f383 8811 	msr	BASEPRI, r3
 8017332:	f3bf 8f6f 	isb	sy
 8017336:	f3bf 8f4f 	dsb	sy
 801733a:	60fb      	str	r3, [r7, #12]
}
 801733c:	bf00      	nop
 801733e:	e7fe      	b.n	801733e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8017340:	693b      	ldr	r3, [r7, #16]
 8017342:	3318      	adds	r3, #24
 8017344:	4618      	mov	r0, r3
 8017346:	f7fd fff9 	bl	801533c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801734a:	4b1e      	ldr	r3, [pc, #120]	; (80173c4 <xTaskRemoveFromEventList+0xb0>)
 801734c:	681b      	ldr	r3, [r3, #0]
 801734e:	2b00      	cmp	r3, #0
 8017350:	d11d      	bne.n	801738e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8017352:	693b      	ldr	r3, [r7, #16]
 8017354:	3304      	adds	r3, #4
 8017356:	4618      	mov	r0, r3
 8017358:	f7fd fff0 	bl	801533c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801735c:	693b      	ldr	r3, [r7, #16]
 801735e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017360:	4b19      	ldr	r3, [pc, #100]	; (80173c8 <xTaskRemoveFromEventList+0xb4>)
 8017362:	681b      	ldr	r3, [r3, #0]
 8017364:	429a      	cmp	r2, r3
 8017366:	d903      	bls.n	8017370 <xTaskRemoveFromEventList+0x5c>
 8017368:	693b      	ldr	r3, [r7, #16]
 801736a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801736c:	4a16      	ldr	r2, [pc, #88]	; (80173c8 <xTaskRemoveFromEventList+0xb4>)
 801736e:	6013      	str	r3, [r2, #0]
 8017370:	693b      	ldr	r3, [r7, #16]
 8017372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017374:	4613      	mov	r3, r2
 8017376:	009b      	lsls	r3, r3, #2
 8017378:	4413      	add	r3, r2
 801737a:	009b      	lsls	r3, r3, #2
 801737c:	4a13      	ldr	r2, [pc, #76]	; (80173cc <xTaskRemoveFromEventList+0xb8>)
 801737e:	441a      	add	r2, r3
 8017380:	693b      	ldr	r3, [r7, #16]
 8017382:	3304      	adds	r3, #4
 8017384:	4619      	mov	r1, r3
 8017386:	4610      	mov	r0, r2
 8017388:	f7fd ff7b 	bl	8015282 <vListInsertEnd>
 801738c:	e005      	b.n	801739a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801738e:	693b      	ldr	r3, [r7, #16]
 8017390:	3318      	adds	r3, #24
 8017392:	4619      	mov	r1, r3
 8017394:	480e      	ldr	r0, [pc, #56]	; (80173d0 <xTaskRemoveFromEventList+0xbc>)
 8017396:	f7fd ff74 	bl	8015282 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801739a:	693b      	ldr	r3, [r7, #16]
 801739c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801739e:	4b0d      	ldr	r3, [pc, #52]	; (80173d4 <xTaskRemoveFromEventList+0xc0>)
 80173a0:	681b      	ldr	r3, [r3, #0]
 80173a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80173a4:	429a      	cmp	r2, r3
 80173a6:	d905      	bls.n	80173b4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80173a8:	2301      	movs	r3, #1
 80173aa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80173ac:	4b0a      	ldr	r3, [pc, #40]	; (80173d8 <xTaskRemoveFromEventList+0xc4>)
 80173ae:	2201      	movs	r2, #1
 80173b0:	601a      	str	r2, [r3, #0]
 80173b2:	e001      	b.n	80173b8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80173b4:	2300      	movs	r3, #0
 80173b6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80173b8:	697b      	ldr	r3, [r7, #20]
}
 80173ba:	4618      	mov	r0, r3
 80173bc:	3718      	adds	r7, #24
 80173be:	46bd      	mov	sp, r7
 80173c0:	bd80      	pop	{r7, pc}
 80173c2:	bf00      	nop
 80173c4:	24025000 	.word	0x24025000
 80173c8:	24024fe0 	.word	0x24024fe0
 80173cc:	24024b08 	.word	0x24024b08
 80173d0:	24024f98 	.word	0x24024f98
 80173d4:	24024b04 	.word	0x24024b04
 80173d8:	24024fec 	.word	0x24024fec

080173dc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80173dc:	b480      	push	{r7}
 80173de:	b083      	sub	sp, #12
 80173e0:	af00      	add	r7, sp, #0
 80173e2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80173e4:	4b06      	ldr	r3, [pc, #24]	; (8017400 <vTaskInternalSetTimeOutState+0x24>)
 80173e6:	681a      	ldr	r2, [r3, #0]
 80173e8:	687b      	ldr	r3, [r7, #4]
 80173ea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80173ec:	4b05      	ldr	r3, [pc, #20]	; (8017404 <vTaskInternalSetTimeOutState+0x28>)
 80173ee:	681a      	ldr	r2, [r3, #0]
 80173f0:	687b      	ldr	r3, [r7, #4]
 80173f2:	605a      	str	r2, [r3, #4]
}
 80173f4:	bf00      	nop
 80173f6:	370c      	adds	r7, #12
 80173f8:	46bd      	mov	sp, r7
 80173fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173fe:	4770      	bx	lr
 8017400:	24024ff0 	.word	0x24024ff0
 8017404:	24024fdc 	.word	0x24024fdc

08017408 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8017408:	b580      	push	{r7, lr}
 801740a:	b088      	sub	sp, #32
 801740c:	af00      	add	r7, sp, #0
 801740e:	6078      	str	r0, [r7, #4]
 8017410:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8017412:	687b      	ldr	r3, [r7, #4]
 8017414:	2b00      	cmp	r3, #0
 8017416:	d10a      	bne.n	801742e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8017418:	f04f 0350 	mov.w	r3, #80	; 0x50
 801741c:	f383 8811 	msr	BASEPRI, r3
 8017420:	f3bf 8f6f 	isb	sy
 8017424:	f3bf 8f4f 	dsb	sy
 8017428:	613b      	str	r3, [r7, #16]
}
 801742a:	bf00      	nop
 801742c:	e7fe      	b.n	801742c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801742e:	683b      	ldr	r3, [r7, #0]
 8017430:	2b00      	cmp	r3, #0
 8017432:	d10a      	bne.n	801744a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8017434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017438:	f383 8811 	msr	BASEPRI, r3
 801743c:	f3bf 8f6f 	isb	sy
 8017440:	f3bf 8f4f 	dsb	sy
 8017444:	60fb      	str	r3, [r7, #12]
}
 8017446:	bf00      	nop
 8017448:	e7fe      	b.n	8017448 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 801744a:	f7fe f8cb 	bl	80155e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801744e:	4b1d      	ldr	r3, [pc, #116]	; (80174c4 <xTaskCheckForTimeOut+0xbc>)
 8017450:	681b      	ldr	r3, [r3, #0]
 8017452:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8017454:	687b      	ldr	r3, [r7, #4]
 8017456:	685b      	ldr	r3, [r3, #4]
 8017458:	69ba      	ldr	r2, [r7, #24]
 801745a:	1ad3      	subs	r3, r2, r3
 801745c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801745e:	683b      	ldr	r3, [r7, #0]
 8017460:	681b      	ldr	r3, [r3, #0]
 8017462:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017466:	d102      	bne.n	801746e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8017468:	2300      	movs	r3, #0
 801746a:	61fb      	str	r3, [r7, #28]
 801746c:	e023      	b.n	80174b6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801746e:	687b      	ldr	r3, [r7, #4]
 8017470:	681a      	ldr	r2, [r3, #0]
 8017472:	4b15      	ldr	r3, [pc, #84]	; (80174c8 <xTaskCheckForTimeOut+0xc0>)
 8017474:	681b      	ldr	r3, [r3, #0]
 8017476:	429a      	cmp	r2, r3
 8017478:	d007      	beq.n	801748a <xTaskCheckForTimeOut+0x82>
 801747a:	687b      	ldr	r3, [r7, #4]
 801747c:	685b      	ldr	r3, [r3, #4]
 801747e:	69ba      	ldr	r2, [r7, #24]
 8017480:	429a      	cmp	r2, r3
 8017482:	d302      	bcc.n	801748a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8017484:	2301      	movs	r3, #1
 8017486:	61fb      	str	r3, [r7, #28]
 8017488:	e015      	b.n	80174b6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801748a:	683b      	ldr	r3, [r7, #0]
 801748c:	681b      	ldr	r3, [r3, #0]
 801748e:	697a      	ldr	r2, [r7, #20]
 8017490:	429a      	cmp	r2, r3
 8017492:	d20b      	bcs.n	80174ac <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8017494:	683b      	ldr	r3, [r7, #0]
 8017496:	681a      	ldr	r2, [r3, #0]
 8017498:	697b      	ldr	r3, [r7, #20]
 801749a:	1ad2      	subs	r2, r2, r3
 801749c:	683b      	ldr	r3, [r7, #0]
 801749e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80174a0:	6878      	ldr	r0, [r7, #4]
 80174a2:	f7ff ff9b 	bl	80173dc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80174a6:	2300      	movs	r3, #0
 80174a8:	61fb      	str	r3, [r7, #28]
 80174aa:	e004      	b.n	80174b6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80174ac:	683b      	ldr	r3, [r7, #0]
 80174ae:	2200      	movs	r2, #0
 80174b0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80174b2:	2301      	movs	r3, #1
 80174b4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80174b6:	f7fe f8c5 	bl	8015644 <vPortExitCritical>

	return xReturn;
 80174ba:	69fb      	ldr	r3, [r7, #28]
}
 80174bc:	4618      	mov	r0, r3
 80174be:	3720      	adds	r7, #32
 80174c0:	46bd      	mov	sp, r7
 80174c2:	bd80      	pop	{r7, pc}
 80174c4:	24024fdc 	.word	0x24024fdc
 80174c8:	24024ff0 	.word	0x24024ff0

080174cc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80174cc:	b480      	push	{r7}
 80174ce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80174d0:	4b03      	ldr	r3, [pc, #12]	; (80174e0 <vTaskMissedYield+0x14>)
 80174d2:	2201      	movs	r2, #1
 80174d4:	601a      	str	r2, [r3, #0]
}
 80174d6:	bf00      	nop
 80174d8:	46bd      	mov	sp, r7
 80174da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174de:	4770      	bx	lr
 80174e0:	24024fec 	.word	0x24024fec

080174e4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80174e4:	b580      	push	{r7, lr}
 80174e6:	b082      	sub	sp, #8
 80174e8:	af00      	add	r7, sp, #0
 80174ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80174ec:	f000 f854 	bl	8017598 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80174f0:	4b07      	ldr	r3, [pc, #28]	; (8017510 <prvIdleTask+0x2c>)
 80174f2:	681b      	ldr	r3, [r3, #0]
 80174f4:	2b01      	cmp	r3, #1
 80174f6:	d907      	bls.n	8017508 <prvIdleTask+0x24>
			{
				taskYIELD();
 80174f8:	4b06      	ldr	r3, [pc, #24]	; (8017514 <prvIdleTask+0x30>)
 80174fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80174fe:	601a      	str	r2, [r3, #0]
 8017500:	f3bf 8f4f 	dsb	sy
 8017504:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8017508:	f7ee fc92 	bl	8005e30 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 801750c:	e7ee      	b.n	80174ec <prvIdleTask+0x8>
 801750e:	bf00      	nop
 8017510:	24024b08 	.word	0x24024b08
 8017514:	e000ed04 	.word	0xe000ed04

08017518 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8017518:	b580      	push	{r7, lr}
 801751a:	b082      	sub	sp, #8
 801751c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801751e:	2300      	movs	r3, #0
 8017520:	607b      	str	r3, [r7, #4]
 8017522:	e00c      	b.n	801753e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8017524:	687a      	ldr	r2, [r7, #4]
 8017526:	4613      	mov	r3, r2
 8017528:	009b      	lsls	r3, r3, #2
 801752a:	4413      	add	r3, r2
 801752c:	009b      	lsls	r3, r3, #2
 801752e:	4a12      	ldr	r2, [pc, #72]	; (8017578 <prvInitialiseTaskLists+0x60>)
 8017530:	4413      	add	r3, r2
 8017532:	4618      	mov	r0, r3
 8017534:	f7fd fe78 	bl	8015228 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8017538:	687b      	ldr	r3, [r7, #4]
 801753a:	3301      	adds	r3, #1
 801753c:	607b      	str	r3, [r7, #4]
 801753e:	687b      	ldr	r3, [r7, #4]
 8017540:	2b37      	cmp	r3, #55	; 0x37
 8017542:	d9ef      	bls.n	8017524 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8017544:	480d      	ldr	r0, [pc, #52]	; (801757c <prvInitialiseTaskLists+0x64>)
 8017546:	f7fd fe6f 	bl	8015228 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801754a:	480d      	ldr	r0, [pc, #52]	; (8017580 <prvInitialiseTaskLists+0x68>)
 801754c:	f7fd fe6c 	bl	8015228 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8017550:	480c      	ldr	r0, [pc, #48]	; (8017584 <prvInitialiseTaskLists+0x6c>)
 8017552:	f7fd fe69 	bl	8015228 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8017556:	480c      	ldr	r0, [pc, #48]	; (8017588 <prvInitialiseTaskLists+0x70>)
 8017558:	f7fd fe66 	bl	8015228 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801755c:	480b      	ldr	r0, [pc, #44]	; (801758c <prvInitialiseTaskLists+0x74>)
 801755e:	f7fd fe63 	bl	8015228 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8017562:	4b0b      	ldr	r3, [pc, #44]	; (8017590 <prvInitialiseTaskLists+0x78>)
 8017564:	4a05      	ldr	r2, [pc, #20]	; (801757c <prvInitialiseTaskLists+0x64>)
 8017566:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8017568:	4b0a      	ldr	r3, [pc, #40]	; (8017594 <prvInitialiseTaskLists+0x7c>)
 801756a:	4a05      	ldr	r2, [pc, #20]	; (8017580 <prvInitialiseTaskLists+0x68>)
 801756c:	601a      	str	r2, [r3, #0]
}
 801756e:	bf00      	nop
 8017570:	3708      	adds	r7, #8
 8017572:	46bd      	mov	sp, r7
 8017574:	bd80      	pop	{r7, pc}
 8017576:	bf00      	nop
 8017578:	24024b08 	.word	0x24024b08
 801757c:	24024f68 	.word	0x24024f68
 8017580:	24024f7c 	.word	0x24024f7c
 8017584:	24024f98 	.word	0x24024f98
 8017588:	24024fac 	.word	0x24024fac
 801758c:	24024fc4 	.word	0x24024fc4
 8017590:	24024f90 	.word	0x24024f90
 8017594:	24024f94 	.word	0x24024f94

08017598 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8017598:	b580      	push	{r7, lr}
 801759a:	b082      	sub	sp, #8
 801759c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801759e:	e019      	b.n	80175d4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80175a0:	f7fe f820 	bl	80155e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80175a4:	4b10      	ldr	r3, [pc, #64]	; (80175e8 <prvCheckTasksWaitingTermination+0x50>)
 80175a6:	68db      	ldr	r3, [r3, #12]
 80175a8:	68db      	ldr	r3, [r3, #12]
 80175aa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80175ac:	687b      	ldr	r3, [r7, #4]
 80175ae:	3304      	adds	r3, #4
 80175b0:	4618      	mov	r0, r3
 80175b2:	f7fd fec3 	bl	801533c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80175b6:	4b0d      	ldr	r3, [pc, #52]	; (80175ec <prvCheckTasksWaitingTermination+0x54>)
 80175b8:	681b      	ldr	r3, [r3, #0]
 80175ba:	3b01      	subs	r3, #1
 80175bc:	4a0b      	ldr	r2, [pc, #44]	; (80175ec <prvCheckTasksWaitingTermination+0x54>)
 80175be:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80175c0:	4b0b      	ldr	r3, [pc, #44]	; (80175f0 <prvCheckTasksWaitingTermination+0x58>)
 80175c2:	681b      	ldr	r3, [r3, #0]
 80175c4:	3b01      	subs	r3, #1
 80175c6:	4a0a      	ldr	r2, [pc, #40]	; (80175f0 <prvCheckTasksWaitingTermination+0x58>)
 80175c8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80175ca:	f7fe f83b 	bl	8015644 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80175ce:	6878      	ldr	r0, [r7, #4]
 80175d0:	f000 f810 	bl	80175f4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80175d4:	4b06      	ldr	r3, [pc, #24]	; (80175f0 <prvCheckTasksWaitingTermination+0x58>)
 80175d6:	681b      	ldr	r3, [r3, #0]
 80175d8:	2b00      	cmp	r3, #0
 80175da:	d1e1      	bne.n	80175a0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80175dc:	bf00      	nop
 80175de:	bf00      	nop
 80175e0:	3708      	adds	r7, #8
 80175e2:	46bd      	mov	sp, r7
 80175e4:	bd80      	pop	{r7, pc}
 80175e6:	bf00      	nop
 80175e8:	24024fac 	.word	0x24024fac
 80175ec:	24024fd8 	.word	0x24024fd8
 80175f0:	24024fc0 	.word	0x24024fc0

080175f4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80175f4:	b580      	push	{r7, lr}
 80175f6:	b084      	sub	sp, #16
 80175f8:	af00      	add	r7, sp, #0
 80175fa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80175fc:	687b      	ldr	r3, [r7, #4]
 80175fe:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8017602:	2b00      	cmp	r3, #0
 8017604:	d108      	bne.n	8017618 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8017606:	687b      	ldr	r3, [r7, #4]
 8017608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801760a:	4618      	mov	r0, r3
 801760c:	f7fd fcec 	bl	8014fe8 <vPortFree>
				vPortFree( pxTCB );
 8017610:	6878      	ldr	r0, [r7, #4]
 8017612:	f7fd fce9 	bl	8014fe8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8017616:	e018      	b.n	801764a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8017618:	687b      	ldr	r3, [r7, #4]
 801761a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801761e:	2b01      	cmp	r3, #1
 8017620:	d103      	bne.n	801762a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8017622:	6878      	ldr	r0, [r7, #4]
 8017624:	f7fd fce0 	bl	8014fe8 <vPortFree>
	}
 8017628:	e00f      	b.n	801764a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801762a:	687b      	ldr	r3, [r7, #4]
 801762c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8017630:	2b02      	cmp	r3, #2
 8017632:	d00a      	beq.n	801764a <prvDeleteTCB+0x56>
	__asm volatile
 8017634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017638:	f383 8811 	msr	BASEPRI, r3
 801763c:	f3bf 8f6f 	isb	sy
 8017640:	f3bf 8f4f 	dsb	sy
 8017644:	60fb      	str	r3, [r7, #12]
}
 8017646:	bf00      	nop
 8017648:	e7fe      	b.n	8017648 <prvDeleteTCB+0x54>
	}
 801764a:	bf00      	nop
 801764c:	3710      	adds	r7, #16
 801764e:	46bd      	mov	sp, r7
 8017650:	bd80      	pop	{r7, pc}
	...

08017654 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8017654:	b480      	push	{r7}
 8017656:	b083      	sub	sp, #12
 8017658:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801765a:	4b0c      	ldr	r3, [pc, #48]	; (801768c <prvResetNextTaskUnblockTime+0x38>)
 801765c:	681b      	ldr	r3, [r3, #0]
 801765e:	681b      	ldr	r3, [r3, #0]
 8017660:	2b00      	cmp	r3, #0
 8017662:	d104      	bne.n	801766e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8017664:	4b0a      	ldr	r3, [pc, #40]	; (8017690 <prvResetNextTaskUnblockTime+0x3c>)
 8017666:	f04f 32ff 	mov.w	r2, #4294967295
 801766a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801766c:	e008      	b.n	8017680 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801766e:	4b07      	ldr	r3, [pc, #28]	; (801768c <prvResetNextTaskUnblockTime+0x38>)
 8017670:	681b      	ldr	r3, [r3, #0]
 8017672:	68db      	ldr	r3, [r3, #12]
 8017674:	68db      	ldr	r3, [r3, #12]
 8017676:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8017678:	687b      	ldr	r3, [r7, #4]
 801767a:	685b      	ldr	r3, [r3, #4]
 801767c:	4a04      	ldr	r2, [pc, #16]	; (8017690 <prvResetNextTaskUnblockTime+0x3c>)
 801767e:	6013      	str	r3, [r2, #0]
}
 8017680:	bf00      	nop
 8017682:	370c      	adds	r7, #12
 8017684:	46bd      	mov	sp, r7
 8017686:	f85d 7b04 	ldr.w	r7, [sp], #4
 801768a:	4770      	bx	lr
 801768c:	24024f90 	.word	0x24024f90
 8017690:	24024ff8 	.word	0x24024ff8

08017694 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8017694:	b480      	push	{r7}
 8017696:	b083      	sub	sp, #12
 8017698:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 801769a:	4b05      	ldr	r3, [pc, #20]	; (80176b0 <xTaskGetCurrentTaskHandle+0x1c>)
 801769c:	681b      	ldr	r3, [r3, #0]
 801769e:	607b      	str	r3, [r7, #4]

		return xReturn;
 80176a0:	687b      	ldr	r3, [r7, #4]
	}
 80176a2:	4618      	mov	r0, r3
 80176a4:	370c      	adds	r7, #12
 80176a6:	46bd      	mov	sp, r7
 80176a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176ac:	4770      	bx	lr
 80176ae:	bf00      	nop
 80176b0:	24024b04 	.word	0x24024b04

080176b4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80176b4:	b480      	push	{r7}
 80176b6:	b083      	sub	sp, #12
 80176b8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80176ba:	4b0b      	ldr	r3, [pc, #44]	; (80176e8 <xTaskGetSchedulerState+0x34>)
 80176bc:	681b      	ldr	r3, [r3, #0]
 80176be:	2b00      	cmp	r3, #0
 80176c0:	d102      	bne.n	80176c8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80176c2:	2301      	movs	r3, #1
 80176c4:	607b      	str	r3, [r7, #4]
 80176c6:	e008      	b.n	80176da <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80176c8:	4b08      	ldr	r3, [pc, #32]	; (80176ec <xTaskGetSchedulerState+0x38>)
 80176ca:	681b      	ldr	r3, [r3, #0]
 80176cc:	2b00      	cmp	r3, #0
 80176ce:	d102      	bne.n	80176d6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80176d0:	2302      	movs	r3, #2
 80176d2:	607b      	str	r3, [r7, #4]
 80176d4:	e001      	b.n	80176da <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80176d6:	2300      	movs	r3, #0
 80176d8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80176da:	687b      	ldr	r3, [r7, #4]
	}
 80176dc:	4618      	mov	r0, r3
 80176de:	370c      	adds	r7, #12
 80176e0:	46bd      	mov	sp, r7
 80176e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176e6:	4770      	bx	lr
 80176e8:	24024fe4 	.word	0x24024fe4
 80176ec:	24025000 	.word	0x24025000

080176f0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80176f0:	b580      	push	{r7, lr}
 80176f2:	b084      	sub	sp, #16
 80176f4:	af00      	add	r7, sp, #0
 80176f6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80176f8:	687b      	ldr	r3, [r7, #4]
 80176fa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80176fc:	2300      	movs	r3, #0
 80176fe:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8017700:	687b      	ldr	r3, [r7, #4]
 8017702:	2b00      	cmp	r3, #0
 8017704:	d051      	beq.n	80177aa <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8017706:	68bb      	ldr	r3, [r7, #8]
 8017708:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801770a:	4b2a      	ldr	r3, [pc, #168]	; (80177b4 <xTaskPriorityInherit+0xc4>)
 801770c:	681b      	ldr	r3, [r3, #0]
 801770e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017710:	429a      	cmp	r2, r3
 8017712:	d241      	bcs.n	8017798 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8017714:	68bb      	ldr	r3, [r7, #8]
 8017716:	699b      	ldr	r3, [r3, #24]
 8017718:	2b00      	cmp	r3, #0
 801771a:	db06      	blt.n	801772a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801771c:	4b25      	ldr	r3, [pc, #148]	; (80177b4 <xTaskPriorityInherit+0xc4>)
 801771e:	681b      	ldr	r3, [r3, #0]
 8017720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017722:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8017726:	68bb      	ldr	r3, [r7, #8]
 8017728:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801772a:	68bb      	ldr	r3, [r7, #8]
 801772c:	6959      	ldr	r1, [r3, #20]
 801772e:	68bb      	ldr	r3, [r7, #8]
 8017730:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017732:	4613      	mov	r3, r2
 8017734:	009b      	lsls	r3, r3, #2
 8017736:	4413      	add	r3, r2
 8017738:	009b      	lsls	r3, r3, #2
 801773a:	4a1f      	ldr	r2, [pc, #124]	; (80177b8 <xTaskPriorityInherit+0xc8>)
 801773c:	4413      	add	r3, r2
 801773e:	4299      	cmp	r1, r3
 8017740:	d122      	bne.n	8017788 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8017742:	68bb      	ldr	r3, [r7, #8]
 8017744:	3304      	adds	r3, #4
 8017746:	4618      	mov	r0, r3
 8017748:	f7fd fdf8 	bl	801533c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801774c:	4b19      	ldr	r3, [pc, #100]	; (80177b4 <xTaskPriorityInherit+0xc4>)
 801774e:	681b      	ldr	r3, [r3, #0]
 8017750:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017752:	68bb      	ldr	r3, [r7, #8]
 8017754:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8017756:	68bb      	ldr	r3, [r7, #8]
 8017758:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801775a:	4b18      	ldr	r3, [pc, #96]	; (80177bc <xTaskPriorityInherit+0xcc>)
 801775c:	681b      	ldr	r3, [r3, #0]
 801775e:	429a      	cmp	r2, r3
 8017760:	d903      	bls.n	801776a <xTaskPriorityInherit+0x7a>
 8017762:	68bb      	ldr	r3, [r7, #8]
 8017764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017766:	4a15      	ldr	r2, [pc, #84]	; (80177bc <xTaskPriorityInherit+0xcc>)
 8017768:	6013      	str	r3, [r2, #0]
 801776a:	68bb      	ldr	r3, [r7, #8]
 801776c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801776e:	4613      	mov	r3, r2
 8017770:	009b      	lsls	r3, r3, #2
 8017772:	4413      	add	r3, r2
 8017774:	009b      	lsls	r3, r3, #2
 8017776:	4a10      	ldr	r2, [pc, #64]	; (80177b8 <xTaskPriorityInherit+0xc8>)
 8017778:	441a      	add	r2, r3
 801777a:	68bb      	ldr	r3, [r7, #8]
 801777c:	3304      	adds	r3, #4
 801777e:	4619      	mov	r1, r3
 8017780:	4610      	mov	r0, r2
 8017782:	f7fd fd7e 	bl	8015282 <vListInsertEnd>
 8017786:	e004      	b.n	8017792 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8017788:	4b0a      	ldr	r3, [pc, #40]	; (80177b4 <xTaskPriorityInherit+0xc4>)
 801778a:	681b      	ldr	r3, [r3, #0]
 801778c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801778e:	68bb      	ldr	r3, [r7, #8]
 8017790:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8017792:	2301      	movs	r3, #1
 8017794:	60fb      	str	r3, [r7, #12]
 8017796:	e008      	b.n	80177aa <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8017798:	68bb      	ldr	r3, [r7, #8]
 801779a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801779c:	4b05      	ldr	r3, [pc, #20]	; (80177b4 <xTaskPriorityInherit+0xc4>)
 801779e:	681b      	ldr	r3, [r3, #0]
 80177a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80177a2:	429a      	cmp	r2, r3
 80177a4:	d201      	bcs.n	80177aa <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80177a6:	2301      	movs	r3, #1
 80177a8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80177aa:	68fb      	ldr	r3, [r7, #12]
	}
 80177ac:	4618      	mov	r0, r3
 80177ae:	3710      	adds	r7, #16
 80177b0:	46bd      	mov	sp, r7
 80177b2:	bd80      	pop	{r7, pc}
 80177b4:	24024b04 	.word	0x24024b04
 80177b8:	24024b08 	.word	0x24024b08
 80177bc:	24024fe0 	.word	0x24024fe0

080177c0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80177c0:	b580      	push	{r7, lr}
 80177c2:	b086      	sub	sp, #24
 80177c4:	af00      	add	r7, sp, #0
 80177c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80177c8:	687b      	ldr	r3, [r7, #4]
 80177ca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80177cc:	2300      	movs	r3, #0
 80177ce:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80177d0:	687b      	ldr	r3, [r7, #4]
 80177d2:	2b00      	cmp	r3, #0
 80177d4:	d056      	beq.n	8017884 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80177d6:	4b2e      	ldr	r3, [pc, #184]	; (8017890 <xTaskPriorityDisinherit+0xd0>)
 80177d8:	681b      	ldr	r3, [r3, #0]
 80177da:	693a      	ldr	r2, [r7, #16]
 80177dc:	429a      	cmp	r2, r3
 80177de:	d00a      	beq.n	80177f6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80177e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80177e4:	f383 8811 	msr	BASEPRI, r3
 80177e8:	f3bf 8f6f 	isb	sy
 80177ec:	f3bf 8f4f 	dsb	sy
 80177f0:	60fb      	str	r3, [r7, #12]
}
 80177f2:	bf00      	nop
 80177f4:	e7fe      	b.n	80177f4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80177f6:	693b      	ldr	r3, [r7, #16]
 80177f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80177fa:	2b00      	cmp	r3, #0
 80177fc:	d10a      	bne.n	8017814 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80177fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017802:	f383 8811 	msr	BASEPRI, r3
 8017806:	f3bf 8f6f 	isb	sy
 801780a:	f3bf 8f4f 	dsb	sy
 801780e:	60bb      	str	r3, [r7, #8]
}
 8017810:	bf00      	nop
 8017812:	e7fe      	b.n	8017812 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8017814:	693b      	ldr	r3, [r7, #16]
 8017816:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017818:	1e5a      	subs	r2, r3, #1
 801781a:	693b      	ldr	r3, [r7, #16]
 801781c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801781e:	693b      	ldr	r3, [r7, #16]
 8017820:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017822:	693b      	ldr	r3, [r7, #16]
 8017824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017826:	429a      	cmp	r2, r3
 8017828:	d02c      	beq.n	8017884 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801782a:	693b      	ldr	r3, [r7, #16]
 801782c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801782e:	2b00      	cmp	r3, #0
 8017830:	d128      	bne.n	8017884 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8017832:	693b      	ldr	r3, [r7, #16]
 8017834:	3304      	adds	r3, #4
 8017836:	4618      	mov	r0, r3
 8017838:	f7fd fd80 	bl	801533c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801783c:	693b      	ldr	r3, [r7, #16]
 801783e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8017840:	693b      	ldr	r3, [r7, #16]
 8017842:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017844:	693b      	ldr	r3, [r7, #16]
 8017846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017848:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801784c:	693b      	ldr	r3, [r7, #16]
 801784e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8017850:	693b      	ldr	r3, [r7, #16]
 8017852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017854:	4b0f      	ldr	r3, [pc, #60]	; (8017894 <xTaskPriorityDisinherit+0xd4>)
 8017856:	681b      	ldr	r3, [r3, #0]
 8017858:	429a      	cmp	r2, r3
 801785a:	d903      	bls.n	8017864 <xTaskPriorityDisinherit+0xa4>
 801785c:	693b      	ldr	r3, [r7, #16]
 801785e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017860:	4a0c      	ldr	r2, [pc, #48]	; (8017894 <xTaskPriorityDisinherit+0xd4>)
 8017862:	6013      	str	r3, [r2, #0]
 8017864:	693b      	ldr	r3, [r7, #16]
 8017866:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017868:	4613      	mov	r3, r2
 801786a:	009b      	lsls	r3, r3, #2
 801786c:	4413      	add	r3, r2
 801786e:	009b      	lsls	r3, r3, #2
 8017870:	4a09      	ldr	r2, [pc, #36]	; (8017898 <xTaskPriorityDisinherit+0xd8>)
 8017872:	441a      	add	r2, r3
 8017874:	693b      	ldr	r3, [r7, #16]
 8017876:	3304      	adds	r3, #4
 8017878:	4619      	mov	r1, r3
 801787a:	4610      	mov	r0, r2
 801787c:	f7fd fd01 	bl	8015282 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8017880:	2301      	movs	r3, #1
 8017882:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8017884:	697b      	ldr	r3, [r7, #20]
	}
 8017886:	4618      	mov	r0, r3
 8017888:	3718      	adds	r7, #24
 801788a:	46bd      	mov	sp, r7
 801788c:	bd80      	pop	{r7, pc}
 801788e:	bf00      	nop
 8017890:	24024b04 	.word	0x24024b04
 8017894:	24024fe0 	.word	0x24024fe0
 8017898:	24024b08 	.word	0x24024b08

0801789c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 801789c:	b580      	push	{r7, lr}
 801789e:	b088      	sub	sp, #32
 80178a0:	af00      	add	r7, sp, #0
 80178a2:	6078      	str	r0, [r7, #4]
 80178a4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80178a6:	687b      	ldr	r3, [r7, #4]
 80178a8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80178aa:	2301      	movs	r3, #1
 80178ac:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80178ae:	687b      	ldr	r3, [r7, #4]
 80178b0:	2b00      	cmp	r3, #0
 80178b2:	d06a      	beq.n	801798a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80178b4:	69bb      	ldr	r3, [r7, #24]
 80178b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80178b8:	2b00      	cmp	r3, #0
 80178ba:	d10a      	bne.n	80178d2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80178bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80178c0:	f383 8811 	msr	BASEPRI, r3
 80178c4:	f3bf 8f6f 	isb	sy
 80178c8:	f3bf 8f4f 	dsb	sy
 80178cc:	60fb      	str	r3, [r7, #12]
}
 80178ce:	bf00      	nop
 80178d0:	e7fe      	b.n	80178d0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80178d2:	69bb      	ldr	r3, [r7, #24]
 80178d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80178d6:	683a      	ldr	r2, [r7, #0]
 80178d8:	429a      	cmp	r2, r3
 80178da:	d902      	bls.n	80178e2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80178dc:	683b      	ldr	r3, [r7, #0]
 80178de:	61fb      	str	r3, [r7, #28]
 80178e0:	e002      	b.n	80178e8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80178e2:	69bb      	ldr	r3, [r7, #24]
 80178e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80178e6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80178e8:	69bb      	ldr	r3, [r7, #24]
 80178ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80178ec:	69fa      	ldr	r2, [r7, #28]
 80178ee:	429a      	cmp	r2, r3
 80178f0:	d04b      	beq.n	801798a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80178f2:	69bb      	ldr	r3, [r7, #24]
 80178f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80178f6:	697a      	ldr	r2, [r7, #20]
 80178f8:	429a      	cmp	r2, r3
 80178fa:	d146      	bne.n	801798a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80178fc:	4b25      	ldr	r3, [pc, #148]	; (8017994 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80178fe:	681b      	ldr	r3, [r3, #0]
 8017900:	69ba      	ldr	r2, [r7, #24]
 8017902:	429a      	cmp	r2, r3
 8017904:	d10a      	bne.n	801791c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8017906:	f04f 0350 	mov.w	r3, #80	; 0x50
 801790a:	f383 8811 	msr	BASEPRI, r3
 801790e:	f3bf 8f6f 	isb	sy
 8017912:	f3bf 8f4f 	dsb	sy
 8017916:	60bb      	str	r3, [r7, #8]
}
 8017918:	bf00      	nop
 801791a:	e7fe      	b.n	801791a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 801791c:	69bb      	ldr	r3, [r7, #24]
 801791e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017920:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8017922:	69bb      	ldr	r3, [r7, #24]
 8017924:	69fa      	ldr	r2, [r7, #28]
 8017926:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8017928:	69bb      	ldr	r3, [r7, #24]
 801792a:	699b      	ldr	r3, [r3, #24]
 801792c:	2b00      	cmp	r3, #0
 801792e:	db04      	blt.n	801793a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017930:	69fb      	ldr	r3, [r7, #28]
 8017932:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8017936:	69bb      	ldr	r3, [r7, #24]
 8017938:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801793a:	69bb      	ldr	r3, [r7, #24]
 801793c:	6959      	ldr	r1, [r3, #20]
 801793e:	693a      	ldr	r2, [r7, #16]
 8017940:	4613      	mov	r3, r2
 8017942:	009b      	lsls	r3, r3, #2
 8017944:	4413      	add	r3, r2
 8017946:	009b      	lsls	r3, r3, #2
 8017948:	4a13      	ldr	r2, [pc, #76]	; (8017998 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 801794a:	4413      	add	r3, r2
 801794c:	4299      	cmp	r1, r3
 801794e:	d11c      	bne.n	801798a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8017950:	69bb      	ldr	r3, [r7, #24]
 8017952:	3304      	adds	r3, #4
 8017954:	4618      	mov	r0, r3
 8017956:	f7fd fcf1 	bl	801533c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801795a:	69bb      	ldr	r3, [r7, #24]
 801795c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801795e:	4b0f      	ldr	r3, [pc, #60]	; (801799c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8017960:	681b      	ldr	r3, [r3, #0]
 8017962:	429a      	cmp	r2, r3
 8017964:	d903      	bls.n	801796e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8017966:	69bb      	ldr	r3, [r7, #24]
 8017968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801796a:	4a0c      	ldr	r2, [pc, #48]	; (801799c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 801796c:	6013      	str	r3, [r2, #0]
 801796e:	69bb      	ldr	r3, [r7, #24]
 8017970:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017972:	4613      	mov	r3, r2
 8017974:	009b      	lsls	r3, r3, #2
 8017976:	4413      	add	r3, r2
 8017978:	009b      	lsls	r3, r3, #2
 801797a:	4a07      	ldr	r2, [pc, #28]	; (8017998 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 801797c:	441a      	add	r2, r3
 801797e:	69bb      	ldr	r3, [r7, #24]
 8017980:	3304      	adds	r3, #4
 8017982:	4619      	mov	r1, r3
 8017984:	4610      	mov	r0, r2
 8017986:	f7fd fc7c 	bl	8015282 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801798a:	bf00      	nop
 801798c:	3720      	adds	r7, #32
 801798e:	46bd      	mov	sp, r7
 8017990:	bd80      	pop	{r7, pc}
 8017992:	bf00      	nop
 8017994:	24024b04 	.word	0x24024b04
 8017998:	24024b08 	.word	0x24024b08
 801799c:	24024fe0 	.word	0x24024fe0

080179a0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80179a0:	b480      	push	{r7}
 80179a2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80179a4:	4b07      	ldr	r3, [pc, #28]	; (80179c4 <pvTaskIncrementMutexHeldCount+0x24>)
 80179a6:	681b      	ldr	r3, [r3, #0]
 80179a8:	2b00      	cmp	r3, #0
 80179aa:	d004      	beq.n	80179b6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80179ac:	4b05      	ldr	r3, [pc, #20]	; (80179c4 <pvTaskIncrementMutexHeldCount+0x24>)
 80179ae:	681b      	ldr	r3, [r3, #0]
 80179b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80179b2:	3201      	adds	r2, #1
 80179b4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80179b6:	4b03      	ldr	r3, [pc, #12]	; (80179c4 <pvTaskIncrementMutexHeldCount+0x24>)
 80179b8:	681b      	ldr	r3, [r3, #0]
	}
 80179ba:	4618      	mov	r0, r3
 80179bc:	46bd      	mov	sp, r7
 80179be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179c2:	4770      	bx	lr
 80179c4:	24024b04 	.word	0x24024b04

080179c8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80179c8:	b580      	push	{r7, lr}
 80179ca:	b084      	sub	sp, #16
 80179cc:	af00      	add	r7, sp, #0
 80179ce:	6078      	str	r0, [r7, #4]
 80179d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80179d2:	4b21      	ldr	r3, [pc, #132]	; (8017a58 <prvAddCurrentTaskToDelayedList+0x90>)
 80179d4:	681b      	ldr	r3, [r3, #0]
 80179d6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80179d8:	4b20      	ldr	r3, [pc, #128]	; (8017a5c <prvAddCurrentTaskToDelayedList+0x94>)
 80179da:	681b      	ldr	r3, [r3, #0]
 80179dc:	3304      	adds	r3, #4
 80179de:	4618      	mov	r0, r3
 80179e0:	f7fd fcac 	bl	801533c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80179e4:	687b      	ldr	r3, [r7, #4]
 80179e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80179ea:	d10a      	bne.n	8017a02 <prvAddCurrentTaskToDelayedList+0x3a>
 80179ec:	683b      	ldr	r3, [r7, #0]
 80179ee:	2b00      	cmp	r3, #0
 80179f0:	d007      	beq.n	8017a02 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80179f2:	4b1a      	ldr	r3, [pc, #104]	; (8017a5c <prvAddCurrentTaskToDelayedList+0x94>)
 80179f4:	681b      	ldr	r3, [r3, #0]
 80179f6:	3304      	adds	r3, #4
 80179f8:	4619      	mov	r1, r3
 80179fa:	4819      	ldr	r0, [pc, #100]	; (8017a60 <prvAddCurrentTaskToDelayedList+0x98>)
 80179fc:	f7fd fc41 	bl	8015282 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8017a00:	e026      	b.n	8017a50 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8017a02:	68fa      	ldr	r2, [r7, #12]
 8017a04:	687b      	ldr	r3, [r7, #4]
 8017a06:	4413      	add	r3, r2
 8017a08:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8017a0a:	4b14      	ldr	r3, [pc, #80]	; (8017a5c <prvAddCurrentTaskToDelayedList+0x94>)
 8017a0c:	681b      	ldr	r3, [r3, #0]
 8017a0e:	68ba      	ldr	r2, [r7, #8]
 8017a10:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8017a12:	68ba      	ldr	r2, [r7, #8]
 8017a14:	68fb      	ldr	r3, [r7, #12]
 8017a16:	429a      	cmp	r2, r3
 8017a18:	d209      	bcs.n	8017a2e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8017a1a:	4b12      	ldr	r3, [pc, #72]	; (8017a64 <prvAddCurrentTaskToDelayedList+0x9c>)
 8017a1c:	681a      	ldr	r2, [r3, #0]
 8017a1e:	4b0f      	ldr	r3, [pc, #60]	; (8017a5c <prvAddCurrentTaskToDelayedList+0x94>)
 8017a20:	681b      	ldr	r3, [r3, #0]
 8017a22:	3304      	adds	r3, #4
 8017a24:	4619      	mov	r1, r3
 8017a26:	4610      	mov	r0, r2
 8017a28:	f7fd fc4f 	bl	80152ca <vListInsert>
}
 8017a2c:	e010      	b.n	8017a50 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8017a2e:	4b0e      	ldr	r3, [pc, #56]	; (8017a68 <prvAddCurrentTaskToDelayedList+0xa0>)
 8017a30:	681a      	ldr	r2, [r3, #0]
 8017a32:	4b0a      	ldr	r3, [pc, #40]	; (8017a5c <prvAddCurrentTaskToDelayedList+0x94>)
 8017a34:	681b      	ldr	r3, [r3, #0]
 8017a36:	3304      	adds	r3, #4
 8017a38:	4619      	mov	r1, r3
 8017a3a:	4610      	mov	r0, r2
 8017a3c:	f7fd fc45 	bl	80152ca <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8017a40:	4b0a      	ldr	r3, [pc, #40]	; (8017a6c <prvAddCurrentTaskToDelayedList+0xa4>)
 8017a42:	681b      	ldr	r3, [r3, #0]
 8017a44:	68ba      	ldr	r2, [r7, #8]
 8017a46:	429a      	cmp	r2, r3
 8017a48:	d202      	bcs.n	8017a50 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8017a4a:	4a08      	ldr	r2, [pc, #32]	; (8017a6c <prvAddCurrentTaskToDelayedList+0xa4>)
 8017a4c:	68bb      	ldr	r3, [r7, #8]
 8017a4e:	6013      	str	r3, [r2, #0]
}
 8017a50:	bf00      	nop
 8017a52:	3710      	adds	r7, #16
 8017a54:	46bd      	mov	sp, r7
 8017a56:	bd80      	pop	{r7, pc}
 8017a58:	24024fdc 	.word	0x24024fdc
 8017a5c:	24024b04 	.word	0x24024b04
 8017a60:	24024fc4 	.word	0x24024fc4
 8017a64:	24024f94 	.word	0x24024f94
 8017a68:	24024f90 	.word	0x24024f90
 8017a6c:	24024ff8 	.word	0x24024ff8

08017a70 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8017a70:	b580      	push	{r7, lr}
 8017a72:	b08a      	sub	sp, #40	; 0x28
 8017a74:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8017a76:	2300      	movs	r3, #0
 8017a78:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8017a7a:	f000 fb07 	bl	801808c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8017a7e:	4b1c      	ldr	r3, [pc, #112]	; (8017af0 <xTimerCreateTimerTask+0x80>)
 8017a80:	681b      	ldr	r3, [r3, #0]
 8017a82:	2b00      	cmp	r3, #0
 8017a84:	d021      	beq.n	8017aca <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8017a86:	2300      	movs	r3, #0
 8017a88:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8017a8a:	2300      	movs	r3, #0
 8017a8c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8017a8e:	1d3a      	adds	r2, r7, #4
 8017a90:	f107 0108 	add.w	r1, r7, #8
 8017a94:	f107 030c 	add.w	r3, r7, #12
 8017a98:	4618      	mov	r0, r3
 8017a9a:	f7fd f9bf 	bl	8014e1c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8017a9e:	6879      	ldr	r1, [r7, #4]
 8017aa0:	68bb      	ldr	r3, [r7, #8]
 8017aa2:	68fa      	ldr	r2, [r7, #12]
 8017aa4:	9202      	str	r2, [sp, #8]
 8017aa6:	9301      	str	r3, [sp, #4]
 8017aa8:	2302      	movs	r3, #2
 8017aaa:	9300      	str	r3, [sp, #0]
 8017aac:	2300      	movs	r3, #0
 8017aae:	460a      	mov	r2, r1
 8017ab0:	4910      	ldr	r1, [pc, #64]	; (8017af4 <xTimerCreateTimerTask+0x84>)
 8017ab2:	4811      	ldr	r0, [pc, #68]	; (8017af8 <xTimerCreateTimerTask+0x88>)
 8017ab4:	f7fe ff7c 	bl	80169b0 <xTaskCreateStatic>
 8017ab8:	4603      	mov	r3, r0
 8017aba:	4a10      	ldr	r2, [pc, #64]	; (8017afc <xTimerCreateTimerTask+0x8c>)
 8017abc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8017abe:	4b0f      	ldr	r3, [pc, #60]	; (8017afc <xTimerCreateTimerTask+0x8c>)
 8017ac0:	681b      	ldr	r3, [r3, #0]
 8017ac2:	2b00      	cmp	r3, #0
 8017ac4:	d001      	beq.n	8017aca <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8017ac6:	2301      	movs	r3, #1
 8017ac8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8017aca:	697b      	ldr	r3, [r7, #20]
 8017acc:	2b00      	cmp	r3, #0
 8017ace:	d10a      	bne.n	8017ae6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8017ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017ad4:	f383 8811 	msr	BASEPRI, r3
 8017ad8:	f3bf 8f6f 	isb	sy
 8017adc:	f3bf 8f4f 	dsb	sy
 8017ae0:	613b      	str	r3, [r7, #16]
}
 8017ae2:	bf00      	nop
 8017ae4:	e7fe      	b.n	8017ae4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8017ae6:	697b      	ldr	r3, [r7, #20]
}
 8017ae8:	4618      	mov	r0, r3
 8017aea:	3718      	adds	r7, #24
 8017aec:	46bd      	mov	sp, r7
 8017aee:	bd80      	pop	{r7, pc}
 8017af0:	24025034 	.word	0x24025034
 8017af4:	080296e0 	.word	0x080296e0
 8017af8:	08017c35 	.word	0x08017c35
 8017afc:	24025038 	.word	0x24025038

08017b00 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8017b00:	b580      	push	{r7, lr}
 8017b02:	b08a      	sub	sp, #40	; 0x28
 8017b04:	af00      	add	r7, sp, #0
 8017b06:	60f8      	str	r0, [r7, #12]
 8017b08:	60b9      	str	r1, [r7, #8]
 8017b0a:	607a      	str	r2, [r7, #4]
 8017b0c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8017b0e:	2300      	movs	r3, #0
 8017b10:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8017b12:	68fb      	ldr	r3, [r7, #12]
 8017b14:	2b00      	cmp	r3, #0
 8017b16:	d10a      	bne.n	8017b2e <xTimerGenericCommand+0x2e>
	__asm volatile
 8017b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017b1c:	f383 8811 	msr	BASEPRI, r3
 8017b20:	f3bf 8f6f 	isb	sy
 8017b24:	f3bf 8f4f 	dsb	sy
 8017b28:	623b      	str	r3, [r7, #32]
}
 8017b2a:	bf00      	nop
 8017b2c:	e7fe      	b.n	8017b2c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8017b2e:	4b1a      	ldr	r3, [pc, #104]	; (8017b98 <xTimerGenericCommand+0x98>)
 8017b30:	681b      	ldr	r3, [r3, #0]
 8017b32:	2b00      	cmp	r3, #0
 8017b34:	d02a      	beq.n	8017b8c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8017b36:	68bb      	ldr	r3, [r7, #8]
 8017b38:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8017b3a:	687b      	ldr	r3, [r7, #4]
 8017b3c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8017b3e:	68fb      	ldr	r3, [r7, #12]
 8017b40:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8017b42:	68bb      	ldr	r3, [r7, #8]
 8017b44:	2b05      	cmp	r3, #5
 8017b46:	dc18      	bgt.n	8017b7a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8017b48:	f7ff fdb4 	bl	80176b4 <xTaskGetSchedulerState>
 8017b4c:	4603      	mov	r3, r0
 8017b4e:	2b02      	cmp	r3, #2
 8017b50:	d109      	bne.n	8017b66 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8017b52:	4b11      	ldr	r3, [pc, #68]	; (8017b98 <xTimerGenericCommand+0x98>)
 8017b54:	6818      	ldr	r0, [r3, #0]
 8017b56:	f107 0110 	add.w	r1, r7, #16
 8017b5a:	2300      	movs	r3, #0
 8017b5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017b5e:	f7fe f8c1 	bl	8015ce4 <xQueueGenericSend>
 8017b62:	6278      	str	r0, [r7, #36]	; 0x24
 8017b64:	e012      	b.n	8017b8c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8017b66:	4b0c      	ldr	r3, [pc, #48]	; (8017b98 <xTimerGenericCommand+0x98>)
 8017b68:	6818      	ldr	r0, [r3, #0]
 8017b6a:	f107 0110 	add.w	r1, r7, #16
 8017b6e:	2300      	movs	r3, #0
 8017b70:	2200      	movs	r2, #0
 8017b72:	f7fe f8b7 	bl	8015ce4 <xQueueGenericSend>
 8017b76:	6278      	str	r0, [r7, #36]	; 0x24
 8017b78:	e008      	b.n	8017b8c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8017b7a:	4b07      	ldr	r3, [pc, #28]	; (8017b98 <xTimerGenericCommand+0x98>)
 8017b7c:	6818      	ldr	r0, [r3, #0]
 8017b7e:	f107 0110 	add.w	r1, r7, #16
 8017b82:	2300      	movs	r3, #0
 8017b84:	683a      	ldr	r2, [r7, #0]
 8017b86:	f7fe f9ab 	bl	8015ee0 <xQueueGenericSendFromISR>
 8017b8a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8017b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8017b8e:	4618      	mov	r0, r3
 8017b90:	3728      	adds	r7, #40	; 0x28
 8017b92:	46bd      	mov	sp, r7
 8017b94:	bd80      	pop	{r7, pc}
 8017b96:	bf00      	nop
 8017b98:	24025034 	.word	0x24025034

08017b9c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8017b9c:	b580      	push	{r7, lr}
 8017b9e:	b088      	sub	sp, #32
 8017ba0:	af02      	add	r7, sp, #8
 8017ba2:	6078      	str	r0, [r7, #4]
 8017ba4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017ba6:	4b22      	ldr	r3, [pc, #136]	; (8017c30 <prvProcessExpiredTimer+0x94>)
 8017ba8:	681b      	ldr	r3, [r3, #0]
 8017baa:	68db      	ldr	r3, [r3, #12]
 8017bac:	68db      	ldr	r3, [r3, #12]
 8017bae:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8017bb0:	697b      	ldr	r3, [r7, #20]
 8017bb2:	3304      	adds	r3, #4
 8017bb4:	4618      	mov	r0, r3
 8017bb6:	f7fd fbc1 	bl	801533c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8017bba:	697b      	ldr	r3, [r7, #20]
 8017bbc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017bc0:	f003 0304 	and.w	r3, r3, #4
 8017bc4:	2b00      	cmp	r3, #0
 8017bc6:	d022      	beq.n	8017c0e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8017bc8:	697b      	ldr	r3, [r7, #20]
 8017bca:	699a      	ldr	r2, [r3, #24]
 8017bcc:	687b      	ldr	r3, [r7, #4]
 8017bce:	18d1      	adds	r1, r2, r3
 8017bd0:	687b      	ldr	r3, [r7, #4]
 8017bd2:	683a      	ldr	r2, [r7, #0]
 8017bd4:	6978      	ldr	r0, [r7, #20]
 8017bd6:	f000 f8d1 	bl	8017d7c <prvInsertTimerInActiveList>
 8017bda:	4603      	mov	r3, r0
 8017bdc:	2b00      	cmp	r3, #0
 8017bde:	d01f      	beq.n	8017c20 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8017be0:	2300      	movs	r3, #0
 8017be2:	9300      	str	r3, [sp, #0]
 8017be4:	2300      	movs	r3, #0
 8017be6:	687a      	ldr	r2, [r7, #4]
 8017be8:	2100      	movs	r1, #0
 8017bea:	6978      	ldr	r0, [r7, #20]
 8017bec:	f7ff ff88 	bl	8017b00 <xTimerGenericCommand>
 8017bf0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8017bf2:	693b      	ldr	r3, [r7, #16]
 8017bf4:	2b00      	cmp	r3, #0
 8017bf6:	d113      	bne.n	8017c20 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8017bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017bfc:	f383 8811 	msr	BASEPRI, r3
 8017c00:	f3bf 8f6f 	isb	sy
 8017c04:	f3bf 8f4f 	dsb	sy
 8017c08:	60fb      	str	r3, [r7, #12]
}
 8017c0a:	bf00      	nop
 8017c0c:	e7fe      	b.n	8017c0c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8017c0e:	697b      	ldr	r3, [r7, #20]
 8017c10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017c14:	f023 0301 	bic.w	r3, r3, #1
 8017c18:	b2da      	uxtb	r2, r3
 8017c1a:	697b      	ldr	r3, [r7, #20]
 8017c1c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8017c20:	697b      	ldr	r3, [r7, #20]
 8017c22:	6a1b      	ldr	r3, [r3, #32]
 8017c24:	6978      	ldr	r0, [r7, #20]
 8017c26:	4798      	blx	r3
}
 8017c28:	bf00      	nop
 8017c2a:	3718      	adds	r7, #24
 8017c2c:	46bd      	mov	sp, r7
 8017c2e:	bd80      	pop	{r7, pc}
 8017c30:	2402502c 	.word	0x2402502c

08017c34 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8017c34:	b580      	push	{r7, lr}
 8017c36:	b084      	sub	sp, #16
 8017c38:	af00      	add	r7, sp, #0
 8017c3a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8017c3c:	f107 0308 	add.w	r3, r7, #8
 8017c40:	4618      	mov	r0, r3
 8017c42:	f000 f857 	bl	8017cf4 <prvGetNextExpireTime>
 8017c46:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8017c48:	68bb      	ldr	r3, [r7, #8]
 8017c4a:	4619      	mov	r1, r3
 8017c4c:	68f8      	ldr	r0, [r7, #12]
 8017c4e:	f000 f803 	bl	8017c58 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8017c52:	f000 f8d5 	bl	8017e00 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8017c56:	e7f1      	b.n	8017c3c <prvTimerTask+0x8>

08017c58 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8017c58:	b580      	push	{r7, lr}
 8017c5a:	b084      	sub	sp, #16
 8017c5c:	af00      	add	r7, sp, #0
 8017c5e:	6078      	str	r0, [r7, #4]
 8017c60:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8017c62:	f7ff f8eb 	bl	8016e3c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8017c66:	f107 0308 	add.w	r3, r7, #8
 8017c6a:	4618      	mov	r0, r3
 8017c6c:	f000 f866 	bl	8017d3c <prvSampleTimeNow>
 8017c70:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8017c72:	68bb      	ldr	r3, [r7, #8]
 8017c74:	2b00      	cmp	r3, #0
 8017c76:	d130      	bne.n	8017cda <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8017c78:	683b      	ldr	r3, [r7, #0]
 8017c7a:	2b00      	cmp	r3, #0
 8017c7c:	d10a      	bne.n	8017c94 <prvProcessTimerOrBlockTask+0x3c>
 8017c7e:	687a      	ldr	r2, [r7, #4]
 8017c80:	68fb      	ldr	r3, [r7, #12]
 8017c82:	429a      	cmp	r2, r3
 8017c84:	d806      	bhi.n	8017c94 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8017c86:	f7ff f8e7 	bl	8016e58 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8017c8a:	68f9      	ldr	r1, [r7, #12]
 8017c8c:	6878      	ldr	r0, [r7, #4]
 8017c8e:	f7ff ff85 	bl	8017b9c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8017c92:	e024      	b.n	8017cde <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8017c94:	683b      	ldr	r3, [r7, #0]
 8017c96:	2b00      	cmp	r3, #0
 8017c98:	d008      	beq.n	8017cac <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8017c9a:	4b13      	ldr	r3, [pc, #76]	; (8017ce8 <prvProcessTimerOrBlockTask+0x90>)
 8017c9c:	681b      	ldr	r3, [r3, #0]
 8017c9e:	681b      	ldr	r3, [r3, #0]
 8017ca0:	2b00      	cmp	r3, #0
 8017ca2:	d101      	bne.n	8017ca8 <prvProcessTimerOrBlockTask+0x50>
 8017ca4:	2301      	movs	r3, #1
 8017ca6:	e000      	b.n	8017caa <prvProcessTimerOrBlockTask+0x52>
 8017ca8:	2300      	movs	r3, #0
 8017caa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8017cac:	4b0f      	ldr	r3, [pc, #60]	; (8017cec <prvProcessTimerOrBlockTask+0x94>)
 8017cae:	6818      	ldr	r0, [r3, #0]
 8017cb0:	687a      	ldr	r2, [r7, #4]
 8017cb2:	68fb      	ldr	r3, [r7, #12]
 8017cb4:	1ad3      	subs	r3, r2, r3
 8017cb6:	683a      	ldr	r2, [r7, #0]
 8017cb8:	4619      	mov	r1, r3
 8017cba:	f7fe fe45 	bl	8016948 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8017cbe:	f7ff f8cb 	bl	8016e58 <xTaskResumeAll>
 8017cc2:	4603      	mov	r3, r0
 8017cc4:	2b00      	cmp	r3, #0
 8017cc6:	d10a      	bne.n	8017cde <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8017cc8:	4b09      	ldr	r3, [pc, #36]	; (8017cf0 <prvProcessTimerOrBlockTask+0x98>)
 8017cca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017cce:	601a      	str	r2, [r3, #0]
 8017cd0:	f3bf 8f4f 	dsb	sy
 8017cd4:	f3bf 8f6f 	isb	sy
}
 8017cd8:	e001      	b.n	8017cde <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8017cda:	f7ff f8bd 	bl	8016e58 <xTaskResumeAll>
}
 8017cde:	bf00      	nop
 8017ce0:	3710      	adds	r7, #16
 8017ce2:	46bd      	mov	sp, r7
 8017ce4:	bd80      	pop	{r7, pc}
 8017ce6:	bf00      	nop
 8017ce8:	24025030 	.word	0x24025030
 8017cec:	24025034 	.word	0x24025034
 8017cf0:	e000ed04 	.word	0xe000ed04

08017cf4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8017cf4:	b480      	push	{r7}
 8017cf6:	b085      	sub	sp, #20
 8017cf8:	af00      	add	r7, sp, #0
 8017cfa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8017cfc:	4b0e      	ldr	r3, [pc, #56]	; (8017d38 <prvGetNextExpireTime+0x44>)
 8017cfe:	681b      	ldr	r3, [r3, #0]
 8017d00:	681b      	ldr	r3, [r3, #0]
 8017d02:	2b00      	cmp	r3, #0
 8017d04:	d101      	bne.n	8017d0a <prvGetNextExpireTime+0x16>
 8017d06:	2201      	movs	r2, #1
 8017d08:	e000      	b.n	8017d0c <prvGetNextExpireTime+0x18>
 8017d0a:	2200      	movs	r2, #0
 8017d0c:	687b      	ldr	r3, [r7, #4]
 8017d0e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8017d10:	687b      	ldr	r3, [r7, #4]
 8017d12:	681b      	ldr	r3, [r3, #0]
 8017d14:	2b00      	cmp	r3, #0
 8017d16:	d105      	bne.n	8017d24 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8017d18:	4b07      	ldr	r3, [pc, #28]	; (8017d38 <prvGetNextExpireTime+0x44>)
 8017d1a:	681b      	ldr	r3, [r3, #0]
 8017d1c:	68db      	ldr	r3, [r3, #12]
 8017d1e:	681b      	ldr	r3, [r3, #0]
 8017d20:	60fb      	str	r3, [r7, #12]
 8017d22:	e001      	b.n	8017d28 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8017d24:	2300      	movs	r3, #0
 8017d26:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8017d28:	68fb      	ldr	r3, [r7, #12]
}
 8017d2a:	4618      	mov	r0, r3
 8017d2c:	3714      	adds	r7, #20
 8017d2e:	46bd      	mov	sp, r7
 8017d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d34:	4770      	bx	lr
 8017d36:	bf00      	nop
 8017d38:	2402502c 	.word	0x2402502c

08017d3c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8017d3c:	b580      	push	{r7, lr}
 8017d3e:	b084      	sub	sp, #16
 8017d40:	af00      	add	r7, sp, #0
 8017d42:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8017d44:	f7ff f926 	bl	8016f94 <xTaskGetTickCount>
 8017d48:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8017d4a:	4b0b      	ldr	r3, [pc, #44]	; (8017d78 <prvSampleTimeNow+0x3c>)
 8017d4c:	681b      	ldr	r3, [r3, #0]
 8017d4e:	68fa      	ldr	r2, [r7, #12]
 8017d50:	429a      	cmp	r2, r3
 8017d52:	d205      	bcs.n	8017d60 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8017d54:	f000 f936 	bl	8017fc4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8017d58:	687b      	ldr	r3, [r7, #4]
 8017d5a:	2201      	movs	r2, #1
 8017d5c:	601a      	str	r2, [r3, #0]
 8017d5e:	e002      	b.n	8017d66 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8017d60:	687b      	ldr	r3, [r7, #4]
 8017d62:	2200      	movs	r2, #0
 8017d64:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8017d66:	4a04      	ldr	r2, [pc, #16]	; (8017d78 <prvSampleTimeNow+0x3c>)
 8017d68:	68fb      	ldr	r3, [r7, #12]
 8017d6a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8017d6c:	68fb      	ldr	r3, [r7, #12]
}
 8017d6e:	4618      	mov	r0, r3
 8017d70:	3710      	adds	r7, #16
 8017d72:	46bd      	mov	sp, r7
 8017d74:	bd80      	pop	{r7, pc}
 8017d76:	bf00      	nop
 8017d78:	2402503c 	.word	0x2402503c

08017d7c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8017d7c:	b580      	push	{r7, lr}
 8017d7e:	b086      	sub	sp, #24
 8017d80:	af00      	add	r7, sp, #0
 8017d82:	60f8      	str	r0, [r7, #12]
 8017d84:	60b9      	str	r1, [r7, #8]
 8017d86:	607a      	str	r2, [r7, #4]
 8017d88:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8017d8a:	2300      	movs	r3, #0
 8017d8c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8017d8e:	68fb      	ldr	r3, [r7, #12]
 8017d90:	68ba      	ldr	r2, [r7, #8]
 8017d92:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8017d94:	68fb      	ldr	r3, [r7, #12]
 8017d96:	68fa      	ldr	r2, [r7, #12]
 8017d98:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8017d9a:	68ba      	ldr	r2, [r7, #8]
 8017d9c:	687b      	ldr	r3, [r7, #4]
 8017d9e:	429a      	cmp	r2, r3
 8017da0:	d812      	bhi.n	8017dc8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017da2:	687a      	ldr	r2, [r7, #4]
 8017da4:	683b      	ldr	r3, [r7, #0]
 8017da6:	1ad2      	subs	r2, r2, r3
 8017da8:	68fb      	ldr	r3, [r7, #12]
 8017daa:	699b      	ldr	r3, [r3, #24]
 8017dac:	429a      	cmp	r2, r3
 8017dae:	d302      	bcc.n	8017db6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8017db0:	2301      	movs	r3, #1
 8017db2:	617b      	str	r3, [r7, #20]
 8017db4:	e01b      	b.n	8017dee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8017db6:	4b10      	ldr	r3, [pc, #64]	; (8017df8 <prvInsertTimerInActiveList+0x7c>)
 8017db8:	681a      	ldr	r2, [r3, #0]
 8017dba:	68fb      	ldr	r3, [r7, #12]
 8017dbc:	3304      	adds	r3, #4
 8017dbe:	4619      	mov	r1, r3
 8017dc0:	4610      	mov	r0, r2
 8017dc2:	f7fd fa82 	bl	80152ca <vListInsert>
 8017dc6:	e012      	b.n	8017dee <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8017dc8:	687a      	ldr	r2, [r7, #4]
 8017dca:	683b      	ldr	r3, [r7, #0]
 8017dcc:	429a      	cmp	r2, r3
 8017dce:	d206      	bcs.n	8017dde <prvInsertTimerInActiveList+0x62>
 8017dd0:	68ba      	ldr	r2, [r7, #8]
 8017dd2:	683b      	ldr	r3, [r7, #0]
 8017dd4:	429a      	cmp	r2, r3
 8017dd6:	d302      	bcc.n	8017dde <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8017dd8:	2301      	movs	r3, #1
 8017dda:	617b      	str	r3, [r7, #20]
 8017ddc:	e007      	b.n	8017dee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8017dde:	4b07      	ldr	r3, [pc, #28]	; (8017dfc <prvInsertTimerInActiveList+0x80>)
 8017de0:	681a      	ldr	r2, [r3, #0]
 8017de2:	68fb      	ldr	r3, [r7, #12]
 8017de4:	3304      	adds	r3, #4
 8017de6:	4619      	mov	r1, r3
 8017de8:	4610      	mov	r0, r2
 8017dea:	f7fd fa6e 	bl	80152ca <vListInsert>
		}
	}

	return xProcessTimerNow;
 8017dee:	697b      	ldr	r3, [r7, #20]
}
 8017df0:	4618      	mov	r0, r3
 8017df2:	3718      	adds	r7, #24
 8017df4:	46bd      	mov	sp, r7
 8017df6:	bd80      	pop	{r7, pc}
 8017df8:	24025030 	.word	0x24025030
 8017dfc:	2402502c 	.word	0x2402502c

08017e00 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8017e00:	b580      	push	{r7, lr}
 8017e02:	b08e      	sub	sp, #56	; 0x38
 8017e04:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8017e06:	e0ca      	b.n	8017f9e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8017e08:	687b      	ldr	r3, [r7, #4]
 8017e0a:	2b00      	cmp	r3, #0
 8017e0c:	da18      	bge.n	8017e40 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8017e0e:	1d3b      	adds	r3, r7, #4
 8017e10:	3304      	adds	r3, #4
 8017e12:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8017e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e16:	2b00      	cmp	r3, #0
 8017e18:	d10a      	bne.n	8017e30 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8017e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e1e:	f383 8811 	msr	BASEPRI, r3
 8017e22:	f3bf 8f6f 	isb	sy
 8017e26:	f3bf 8f4f 	dsb	sy
 8017e2a:	61fb      	str	r3, [r7, #28]
}
 8017e2c:	bf00      	nop
 8017e2e:	e7fe      	b.n	8017e2e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8017e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e32:	681b      	ldr	r3, [r3, #0]
 8017e34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017e36:	6850      	ldr	r0, [r2, #4]
 8017e38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017e3a:	6892      	ldr	r2, [r2, #8]
 8017e3c:	4611      	mov	r1, r2
 8017e3e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8017e40:	687b      	ldr	r3, [r7, #4]
 8017e42:	2b00      	cmp	r3, #0
 8017e44:	f2c0 80aa 	blt.w	8017f9c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8017e48:	68fb      	ldr	r3, [r7, #12]
 8017e4a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8017e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e4e:	695b      	ldr	r3, [r3, #20]
 8017e50:	2b00      	cmp	r3, #0
 8017e52:	d004      	beq.n	8017e5e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8017e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e56:	3304      	adds	r3, #4
 8017e58:	4618      	mov	r0, r3
 8017e5a:	f7fd fa6f 	bl	801533c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8017e5e:	463b      	mov	r3, r7
 8017e60:	4618      	mov	r0, r3
 8017e62:	f7ff ff6b 	bl	8017d3c <prvSampleTimeNow>
 8017e66:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8017e68:	687b      	ldr	r3, [r7, #4]
 8017e6a:	2b09      	cmp	r3, #9
 8017e6c:	f200 8097 	bhi.w	8017f9e <prvProcessReceivedCommands+0x19e>
 8017e70:	a201      	add	r2, pc, #4	; (adr r2, 8017e78 <prvProcessReceivedCommands+0x78>)
 8017e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017e76:	bf00      	nop
 8017e78:	08017ea1 	.word	0x08017ea1
 8017e7c:	08017ea1 	.word	0x08017ea1
 8017e80:	08017ea1 	.word	0x08017ea1
 8017e84:	08017f15 	.word	0x08017f15
 8017e88:	08017f29 	.word	0x08017f29
 8017e8c:	08017f73 	.word	0x08017f73
 8017e90:	08017ea1 	.word	0x08017ea1
 8017e94:	08017ea1 	.word	0x08017ea1
 8017e98:	08017f15 	.word	0x08017f15
 8017e9c:	08017f29 	.word	0x08017f29
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8017ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ea2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017ea6:	f043 0301 	orr.w	r3, r3, #1
 8017eaa:	b2da      	uxtb	r2, r3
 8017eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017eae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8017eb2:	68ba      	ldr	r2, [r7, #8]
 8017eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017eb6:	699b      	ldr	r3, [r3, #24]
 8017eb8:	18d1      	adds	r1, r2, r3
 8017eba:	68bb      	ldr	r3, [r7, #8]
 8017ebc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017ebe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017ec0:	f7ff ff5c 	bl	8017d7c <prvInsertTimerInActiveList>
 8017ec4:	4603      	mov	r3, r0
 8017ec6:	2b00      	cmp	r3, #0
 8017ec8:	d069      	beq.n	8017f9e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8017eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ecc:	6a1b      	ldr	r3, [r3, #32]
 8017ece:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017ed0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8017ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ed4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017ed8:	f003 0304 	and.w	r3, r3, #4
 8017edc:	2b00      	cmp	r3, #0
 8017ede:	d05e      	beq.n	8017f9e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8017ee0:	68ba      	ldr	r2, [r7, #8]
 8017ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ee4:	699b      	ldr	r3, [r3, #24]
 8017ee6:	441a      	add	r2, r3
 8017ee8:	2300      	movs	r3, #0
 8017eea:	9300      	str	r3, [sp, #0]
 8017eec:	2300      	movs	r3, #0
 8017eee:	2100      	movs	r1, #0
 8017ef0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017ef2:	f7ff fe05 	bl	8017b00 <xTimerGenericCommand>
 8017ef6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8017ef8:	6a3b      	ldr	r3, [r7, #32]
 8017efa:	2b00      	cmp	r3, #0
 8017efc:	d14f      	bne.n	8017f9e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8017efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017f02:	f383 8811 	msr	BASEPRI, r3
 8017f06:	f3bf 8f6f 	isb	sy
 8017f0a:	f3bf 8f4f 	dsb	sy
 8017f0e:	61bb      	str	r3, [r7, #24]
}
 8017f10:	bf00      	nop
 8017f12:	e7fe      	b.n	8017f12 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8017f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017f1a:	f023 0301 	bic.w	r3, r3, #1
 8017f1e:	b2da      	uxtb	r2, r3
 8017f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8017f26:	e03a      	b.n	8017f9e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8017f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f2a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017f2e:	f043 0301 	orr.w	r3, r3, #1
 8017f32:	b2da      	uxtb	r2, r3
 8017f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f36:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8017f3a:	68ba      	ldr	r2, [r7, #8]
 8017f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f3e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8017f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f42:	699b      	ldr	r3, [r3, #24]
 8017f44:	2b00      	cmp	r3, #0
 8017f46:	d10a      	bne.n	8017f5e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8017f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017f4c:	f383 8811 	msr	BASEPRI, r3
 8017f50:	f3bf 8f6f 	isb	sy
 8017f54:	f3bf 8f4f 	dsb	sy
 8017f58:	617b      	str	r3, [r7, #20]
}
 8017f5a:	bf00      	nop
 8017f5c:	e7fe      	b.n	8017f5c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8017f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f60:	699a      	ldr	r2, [r3, #24]
 8017f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f64:	18d1      	adds	r1, r2, r3
 8017f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017f6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017f6c:	f7ff ff06 	bl	8017d7c <prvInsertTimerInActiveList>
					break;
 8017f70:	e015      	b.n	8017f9e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8017f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017f78:	f003 0302 	and.w	r3, r3, #2
 8017f7c:	2b00      	cmp	r3, #0
 8017f7e:	d103      	bne.n	8017f88 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8017f80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017f82:	f7fd f831 	bl	8014fe8 <vPortFree>
 8017f86:	e00a      	b.n	8017f9e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8017f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f8a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017f8e:	f023 0301 	bic.w	r3, r3, #1
 8017f92:	b2da      	uxtb	r2, r3
 8017f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8017f9a:	e000      	b.n	8017f9e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8017f9c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8017f9e:	4b08      	ldr	r3, [pc, #32]	; (8017fc0 <prvProcessReceivedCommands+0x1c0>)
 8017fa0:	681b      	ldr	r3, [r3, #0]
 8017fa2:	1d39      	adds	r1, r7, #4
 8017fa4:	2200      	movs	r2, #0
 8017fa6:	4618      	mov	r0, r3
 8017fa8:	f7fe f8c2 	bl	8016130 <xQueueReceive>
 8017fac:	4603      	mov	r3, r0
 8017fae:	2b00      	cmp	r3, #0
 8017fb0:	f47f af2a 	bne.w	8017e08 <prvProcessReceivedCommands+0x8>
	}
}
 8017fb4:	bf00      	nop
 8017fb6:	bf00      	nop
 8017fb8:	3730      	adds	r7, #48	; 0x30
 8017fba:	46bd      	mov	sp, r7
 8017fbc:	bd80      	pop	{r7, pc}
 8017fbe:	bf00      	nop
 8017fc0:	24025034 	.word	0x24025034

08017fc4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8017fc4:	b580      	push	{r7, lr}
 8017fc6:	b088      	sub	sp, #32
 8017fc8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8017fca:	e048      	b.n	801805e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8017fcc:	4b2d      	ldr	r3, [pc, #180]	; (8018084 <prvSwitchTimerLists+0xc0>)
 8017fce:	681b      	ldr	r3, [r3, #0]
 8017fd0:	68db      	ldr	r3, [r3, #12]
 8017fd2:	681b      	ldr	r3, [r3, #0]
 8017fd4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017fd6:	4b2b      	ldr	r3, [pc, #172]	; (8018084 <prvSwitchTimerLists+0xc0>)
 8017fd8:	681b      	ldr	r3, [r3, #0]
 8017fda:	68db      	ldr	r3, [r3, #12]
 8017fdc:	68db      	ldr	r3, [r3, #12]
 8017fde:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8017fe0:	68fb      	ldr	r3, [r7, #12]
 8017fe2:	3304      	adds	r3, #4
 8017fe4:	4618      	mov	r0, r3
 8017fe6:	f7fd f9a9 	bl	801533c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8017fea:	68fb      	ldr	r3, [r7, #12]
 8017fec:	6a1b      	ldr	r3, [r3, #32]
 8017fee:	68f8      	ldr	r0, [r7, #12]
 8017ff0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8017ff2:	68fb      	ldr	r3, [r7, #12]
 8017ff4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017ff8:	f003 0304 	and.w	r3, r3, #4
 8017ffc:	2b00      	cmp	r3, #0
 8017ffe:	d02e      	beq.n	801805e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8018000:	68fb      	ldr	r3, [r7, #12]
 8018002:	699b      	ldr	r3, [r3, #24]
 8018004:	693a      	ldr	r2, [r7, #16]
 8018006:	4413      	add	r3, r2
 8018008:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801800a:	68ba      	ldr	r2, [r7, #8]
 801800c:	693b      	ldr	r3, [r7, #16]
 801800e:	429a      	cmp	r2, r3
 8018010:	d90e      	bls.n	8018030 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8018012:	68fb      	ldr	r3, [r7, #12]
 8018014:	68ba      	ldr	r2, [r7, #8]
 8018016:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8018018:	68fb      	ldr	r3, [r7, #12]
 801801a:	68fa      	ldr	r2, [r7, #12]
 801801c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801801e:	4b19      	ldr	r3, [pc, #100]	; (8018084 <prvSwitchTimerLists+0xc0>)
 8018020:	681a      	ldr	r2, [r3, #0]
 8018022:	68fb      	ldr	r3, [r7, #12]
 8018024:	3304      	adds	r3, #4
 8018026:	4619      	mov	r1, r3
 8018028:	4610      	mov	r0, r2
 801802a:	f7fd f94e 	bl	80152ca <vListInsert>
 801802e:	e016      	b.n	801805e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8018030:	2300      	movs	r3, #0
 8018032:	9300      	str	r3, [sp, #0]
 8018034:	2300      	movs	r3, #0
 8018036:	693a      	ldr	r2, [r7, #16]
 8018038:	2100      	movs	r1, #0
 801803a:	68f8      	ldr	r0, [r7, #12]
 801803c:	f7ff fd60 	bl	8017b00 <xTimerGenericCommand>
 8018040:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8018042:	687b      	ldr	r3, [r7, #4]
 8018044:	2b00      	cmp	r3, #0
 8018046:	d10a      	bne.n	801805e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8018048:	f04f 0350 	mov.w	r3, #80	; 0x50
 801804c:	f383 8811 	msr	BASEPRI, r3
 8018050:	f3bf 8f6f 	isb	sy
 8018054:	f3bf 8f4f 	dsb	sy
 8018058:	603b      	str	r3, [r7, #0]
}
 801805a:	bf00      	nop
 801805c:	e7fe      	b.n	801805c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801805e:	4b09      	ldr	r3, [pc, #36]	; (8018084 <prvSwitchTimerLists+0xc0>)
 8018060:	681b      	ldr	r3, [r3, #0]
 8018062:	681b      	ldr	r3, [r3, #0]
 8018064:	2b00      	cmp	r3, #0
 8018066:	d1b1      	bne.n	8017fcc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8018068:	4b06      	ldr	r3, [pc, #24]	; (8018084 <prvSwitchTimerLists+0xc0>)
 801806a:	681b      	ldr	r3, [r3, #0]
 801806c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801806e:	4b06      	ldr	r3, [pc, #24]	; (8018088 <prvSwitchTimerLists+0xc4>)
 8018070:	681b      	ldr	r3, [r3, #0]
 8018072:	4a04      	ldr	r2, [pc, #16]	; (8018084 <prvSwitchTimerLists+0xc0>)
 8018074:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8018076:	4a04      	ldr	r2, [pc, #16]	; (8018088 <prvSwitchTimerLists+0xc4>)
 8018078:	697b      	ldr	r3, [r7, #20]
 801807a:	6013      	str	r3, [r2, #0]
}
 801807c:	bf00      	nop
 801807e:	3718      	adds	r7, #24
 8018080:	46bd      	mov	sp, r7
 8018082:	bd80      	pop	{r7, pc}
 8018084:	2402502c 	.word	0x2402502c
 8018088:	24025030 	.word	0x24025030

0801808c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801808c:	b580      	push	{r7, lr}
 801808e:	b082      	sub	sp, #8
 8018090:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8018092:	f7fd faa7 	bl	80155e4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8018096:	4b15      	ldr	r3, [pc, #84]	; (80180ec <prvCheckForValidListAndQueue+0x60>)
 8018098:	681b      	ldr	r3, [r3, #0]
 801809a:	2b00      	cmp	r3, #0
 801809c:	d120      	bne.n	80180e0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801809e:	4814      	ldr	r0, [pc, #80]	; (80180f0 <prvCheckForValidListAndQueue+0x64>)
 80180a0:	f7fd f8c2 	bl	8015228 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80180a4:	4813      	ldr	r0, [pc, #76]	; (80180f4 <prvCheckForValidListAndQueue+0x68>)
 80180a6:	f7fd f8bf 	bl	8015228 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80180aa:	4b13      	ldr	r3, [pc, #76]	; (80180f8 <prvCheckForValidListAndQueue+0x6c>)
 80180ac:	4a10      	ldr	r2, [pc, #64]	; (80180f0 <prvCheckForValidListAndQueue+0x64>)
 80180ae:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80180b0:	4b12      	ldr	r3, [pc, #72]	; (80180fc <prvCheckForValidListAndQueue+0x70>)
 80180b2:	4a10      	ldr	r2, [pc, #64]	; (80180f4 <prvCheckForValidListAndQueue+0x68>)
 80180b4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80180b6:	2300      	movs	r3, #0
 80180b8:	9300      	str	r3, [sp, #0]
 80180ba:	4b11      	ldr	r3, [pc, #68]	; (8018100 <prvCheckForValidListAndQueue+0x74>)
 80180bc:	4a11      	ldr	r2, [pc, #68]	; (8018104 <prvCheckForValidListAndQueue+0x78>)
 80180be:	2110      	movs	r1, #16
 80180c0:	200a      	movs	r0, #10
 80180c2:	f7fd fc19 	bl	80158f8 <xQueueGenericCreateStatic>
 80180c6:	4603      	mov	r3, r0
 80180c8:	4a08      	ldr	r2, [pc, #32]	; (80180ec <prvCheckForValidListAndQueue+0x60>)
 80180ca:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80180cc:	4b07      	ldr	r3, [pc, #28]	; (80180ec <prvCheckForValidListAndQueue+0x60>)
 80180ce:	681b      	ldr	r3, [r3, #0]
 80180d0:	2b00      	cmp	r3, #0
 80180d2:	d005      	beq.n	80180e0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80180d4:	4b05      	ldr	r3, [pc, #20]	; (80180ec <prvCheckForValidListAndQueue+0x60>)
 80180d6:	681b      	ldr	r3, [r3, #0]
 80180d8:	490b      	ldr	r1, [pc, #44]	; (8018108 <prvCheckForValidListAndQueue+0x7c>)
 80180da:	4618      	mov	r0, r3
 80180dc:	f7fe fbe0 	bl	80168a0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80180e0:	f7fd fab0 	bl	8015644 <vPortExitCritical>
}
 80180e4:	bf00      	nop
 80180e6:	46bd      	mov	sp, r7
 80180e8:	bd80      	pop	{r7, pc}
 80180ea:	bf00      	nop
 80180ec:	24025034 	.word	0x24025034
 80180f0:	24025004 	.word	0x24025004
 80180f4:	24025018 	.word	0x24025018
 80180f8:	2402502c 	.word	0x2402502c
 80180fc:	24025030 	.word	0x24025030
 8018100:	240250e0 	.word	0x240250e0
 8018104:	24025040 	.word	0x24025040
 8018108:	080296e8 	.word	0x080296e8

0801810c <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr420_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer, 
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
 801810c:	b480      	push	{r7}
 801810e:	b097      	sub	sp, #92	; 0x5c
 8018110:	af00      	add	r7, sp, #0
 8018112:	60f8      	str	r0, [r7, #12]
 8018114:	60b9      	str	r1, [r7, #8]
 8018116:	607a      	str	r2, [r7, #4]
 8018118:	603b      	str	r3, [r7, #0]
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr, *pOutAddr2;
  uint8_t *pChrom, *pLum;
  
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
 801811a:	683b      	ldr	r3, [r7, #0]
 801811c:	4a9a      	ldr	r2, [pc, #616]	; (8018388 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x27c>)
 801811e:	fba2 2303 	umull	r2, r3, r2, r3
 8018122:	0a1b      	lsrs	r3, r3, #8
 8018124:	633b      	str	r3, [r7, #48]	; 0x30
  currentMCU = BlockIndex;
 8018126:	687b      	ldr	r3, [r7, #4]
 8018128:	64bb      	str	r3, [r7, #72]	; 0x48
  

  while(currentMCU < (numberMCU + BlockIndex))
 801812a:	e11e      	b.n	801836a <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x25e>
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
 801812c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801812e:	011a      	lsls	r2, r3, #4
 8018130:	4b96      	ldr	r3, [pc, #600]	; (801838c <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x280>)
 8018132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018134:	fbb2 f3f3 	udiv	r3, r2, r3
 8018138:	011b      	lsls	r3, r3, #4
 801813a:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
 801813c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801813e:	011b      	lsls	r3, r3, #4
 8018140:	4a92      	ldr	r2, [pc, #584]	; (801838c <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x280>)
 8018142:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8018144:	fbb3 f1f2 	udiv	r1, r3, r2
 8018148:	fb01 f202 	mul.w	r2, r1, r2
 801814c:	1a9b      	subs	r3, r3, r2
 801814e:	62bb      	str	r3, [r7, #40]	; 0x28
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8018150:	4b8e      	ldr	r3, [pc, #568]	; (801838c <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x280>)
 8018152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018154:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018156:	fb02 f103 	mul.w	r1, r2, r3
 801815a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801815c:	4613      	mov	r3, r2
 801815e:	005b      	lsls	r3, r3, #1
 8018160:	4413      	add	r3, r2
 8018162:	440b      	add	r3, r1
 8018164:	647b      	str	r3, [r7, #68]	; 0x44

    currentMCU++;
 8018166:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018168:	3301      	adds	r3, #1
 801816a:	64bb      	str	r3, [r7, #72]	; 0x48
    
    pChrom = pInBuffer + 256; /* pChroma = pInBuffer + 4*64 */
 801816c:	68fb      	ldr	r3, [r7, #12]
 801816e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8018172:	63bb      	str	r3, [r7, #56]	; 0x38
    
    pLum = pInBuffer;
 8018174:	68fb      	ldr	r3, [r7, #12]
 8018176:	637b      	str	r3, [r7, #52]	; 0x34
    
    for(i= 0; i <  16; i+=2)
 8018178:	2300      	movs	r3, #0
 801817a:	657b      	str	r3, [r7, #84]	; 0x54
 801817c:	e0ed      	b.n	801835a <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x24e>
    {
      if(i == 8)
 801817e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018180:	2b08      	cmp	r3, #8
 8018182:	d102      	bne.n	801818a <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x7e>
      {
        pLum = pInBuffer + 128;
 8018184:	68fb      	ldr	r3, [r7, #12]
 8018186:	3380      	adds	r3, #128	; 0x80
 8018188:	637b      	str	r3, [r7, #52]	; 0x34
      }
      
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 801818a:	4b80      	ldr	r3, [pc, #512]	; (801838c <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x280>)
 801818c:	691b      	ldr	r3, [r3, #16]
 801818e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8018190:	429a      	cmp	r2, r3
 8018192:	f080 80df 	bcs.w	8018354 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x248>
      {
        pOutAddr = pOutBuffer + refline;
 8018196:	68ba      	ldr	r2, [r7, #8]
 8018198:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801819a:	4413      	add	r3, r2
 801819c:	643b      	str	r3, [r7, #64]	; 0x40
        pOutAddr2 = pOutAddr + JPEG_ConvertorParams.ScaledWidth;
 801819e:	4b7b      	ldr	r3, [pc, #492]	; (801838c <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x280>)
 80181a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80181a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80181a4:	4413      	add	r3, r2
 80181a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        
        for(k= 0; k<2; k++)
 80181a8:	2300      	movs	r3, #0
 80181aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80181ac:	e0c5      	b.n	801833a <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x22e>
        {
          for(j=0; j < 8; j+=2)
 80181ae:	2300      	movs	r3, #0
 80181b0:	653b      	str	r3, [r7, #80]	; 0x50
 80181b2:	e0b8      	b.n	8018326 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x21a>
          {           
            cbcomp = (int32_t)(*(pChrom));
 80181b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80181b6:	781b      	ldrb	r3, [r3, #0]
 80181b8:	627b      	str	r3, [r7, #36]	; 0x24
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 80181ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181bc:	009b      	lsls	r3, r3, #2
 80181be:	4a74      	ldr	r2, [pc, #464]	; (8018390 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x284>)
 80181c0:	4413      	add	r3, r2
 80181c2:	681b      	ldr	r3, [r3, #0]
 80181c4:	623b      	str	r3, [r7, #32]
            
            crcomp = (int32_t)(*(pChrom + 64));
 80181c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80181c8:	3340      	adds	r3, #64	; 0x40
 80181ca:	781b      	ldrb	r3, [r3, #0]
 80181cc:	61fb      	str	r3, [r7, #28]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
 80181ce:	69fb      	ldr	r3, [r7, #28]
 80181d0:	009b      	lsls	r3, r3, #2
 80181d2:	4a70      	ldr	r2, [pc, #448]	; (8018394 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x288>)
 80181d4:	4413      	add	r3, r2
 80181d6:	681b      	ldr	r3, [r3, #0]
 80181d8:	61bb      	str	r3, [r7, #24]
            
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
 80181da:	69fb      	ldr	r3, [r7, #28]
 80181dc:	009b      	lsls	r3, r3, #2
 80181de:	4a6e      	ldr	r2, [pc, #440]	; (8018398 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x28c>)
 80181e0:	4413      	add	r3, r2
 80181e2:	681a      	ldr	r2, [r3, #0]
 80181e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181e6:	009b      	lsls	r3, r3, #2
 80181e8:	496c      	ldr	r1, [pc, #432]	; (801839c <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x290>)
 80181ea:	440b      	add	r3, r1
 80181ec:	681b      	ldr	r3, [r3, #0]
 80181ee:	4413      	add	r3, r2
 80181f0:	141b      	asrs	r3, r3, #16
 80181f2:	617b      	str	r3, [r7, #20]
              (CLAMP(ycomp + c_blue) << JPEG_BLUE_OFFSET);

            
#elif (JPEG_RGB_FORMAT == JPEG_RGB888)
          
           ycomp = (int32_t)(*(pLum +j));
 80181f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80181f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80181f8:	4413      	add	r3, r2
 80181fa:	781b      	ldrb	r3, [r3, #0]
 80181fc:	613b      	str	r3, [r7, #16]
          
            pOutAddr[JPEG_RED_OFFSET/8] = CLAMP(ycomp + c_red);
 80181fe:	693a      	ldr	r2, [r7, #16]
 8018200:	69bb      	ldr	r3, [r7, #24]
 8018202:	4413      	add	r3, r2
 8018204:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8018208:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801820a:	3302      	adds	r3, #2
 801820c:	4964      	ldr	r1, [pc, #400]	; (80183a0 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x294>)
 801820e:	5c8a      	ldrb	r2, [r1, r2]
 8018210:	701a      	strb	r2, [r3, #0]
            pOutAddr[JPEG_GREEN_OFFSET/8] = CLAMP(ycomp + c_green);
 8018212:	693a      	ldr	r2, [r7, #16]
 8018214:	697b      	ldr	r3, [r7, #20]
 8018216:	4413      	add	r3, r2
 8018218:	f503 7280 	add.w	r2, r3, #256	; 0x100
 801821c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801821e:	3301      	adds	r3, #1
 8018220:	495f      	ldr	r1, [pc, #380]	; (80183a0 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x294>)
 8018222:	5c8a      	ldrb	r2, [r1, r2]
 8018224:	701a      	strb	r2, [r3, #0]
            pOutAddr[JPEG_BLUE_OFFSET/8] = CLAMP(ycomp + c_blue);
 8018226:	693a      	ldr	r2, [r7, #16]
 8018228:	6a3b      	ldr	r3, [r7, #32]
 801822a:	4413      	add	r3, r2
 801822c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8018230:	4a5b      	ldr	r2, [pc, #364]	; (80183a0 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x294>)
 8018232:	5cd2      	ldrb	r2, [r2, r3]
 8018234:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018236:	701a      	strb	r2, [r3, #0]
            
            /**********/
            ycomp = (int32_t)(*(pLum +j +1));
 8018238:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801823a:	3301      	adds	r3, #1
 801823c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801823e:	4413      	add	r3, r2
 8018240:	781b      	ldrb	r3, [r3, #0]
 8018242:	613b      	str	r3, [r7, #16]

            pOutAddr[3 + JPEG_RED_OFFSET/8] = CLAMP(ycomp + c_red);
 8018244:	693a      	ldr	r2, [r7, #16]
 8018246:	69bb      	ldr	r3, [r7, #24]
 8018248:	4413      	add	r3, r2
 801824a:	f503 7280 	add.w	r2, r3, #256	; 0x100
 801824e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018250:	3305      	adds	r3, #5
 8018252:	4953      	ldr	r1, [pc, #332]	; (80183a0 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x294>)
 8018254:	5c8a      	ldrb	r2, [r1, r2]
 8018256:	701a      	strb	r2, [r3, #0]
            pOutAddr[3 + JPEG_GREEN_OFFSET/8] = CLAMP(ycomp + c_green);
 8018258:	693a      	ldr	r2, [r7, #16]
 801825a:	697b      	ldr	r3, [r7, #20]
 801825c:	4413      	add	r3, r2
 801825e:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8018262:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018264:	3304      	adds	r3, #4
 8018266:	494e      	ldr	r1, [pc, #312]	; (80183a0 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x294>)
 8018268:	5c8a      	ldrb	r2, [r1, r2]
 801826a:	701a      	strb	r2, [r3, #0]
            pOutAddr[3 + JPEG_BLUE_OFFSET/8] = CLAMP(ycomp + c_blue);
 801826c:	693a      	ldr	r2, [r7, #16]
 801826e:	6a3b      	ldr	r3, [r7, #32]
 8018270:	4413      	add	r3, r2
 8018272:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8018276:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018278:	3303      	adds	r3, #3
 801827a:	4949      	ldr	r1, [pc, #292]	; (80183a0 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x294>)
 801827c:	5c8a      	ldrb	r2, [r1, r2]
 801827e:	701a      	strb	r2, [r3, #0]

            /**********/            
            ycomp = (int32_t)(*(pLum +j +8));
 8018280:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018282:	3308      	adds	r3, #8
 8018284:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8018286:	4413      	add	r3, r2
 8018288:	781b      	ldrb	r3, [r3, #0]
 801828a:	613b      	str	r3, [r7, #16]

            pOutAddr2[JPEG_RED_OFFSET/8] = CLAMP(ycomp + c_red);
 801828c:	693a      	ldr	r2, [r7, #16]
 801828e:	69bb      	ldr	r3, [r7, #24]
 8018290:	4413      	add	r3, r2
 8018292:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8018296:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018298:	3302      	adds	r3, #2
 801829a:	4941      	ldr	r1, [pc, #260]	; (80183a0 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x294>)
 801829c:	5c8a      	ldrb	r2, [r1, r2]
 801829e:	701a      	strb	r2, [r3, #0]
            pOutAddr2[JPEG_GREEN_OFFSET/8] = CLAMP(ycomp + c_green);
 80182a0:	693a      	ldr	r2, [r7, #16]
 80182a2:	697b      	ldr	r3, [r7, #20]
 80182a4:	4413      	add	r3, r2
 80182a6:	f503 7280 	add.w	r2, r3, #256	; 0x100
 80182aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80182ac:	3301      	adds	r3, #1
 80182ae:	493c      	ldr	r1, [pc, #240]	; (80183a0 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x294>)
 80182b0:	5c8a      	ldrb	r2, [r1, r2]
 80182b2:	701a      	strb	r2, [r3, #0]
            pOutAddr2[JPEG_BLUE_OFFSET/8] = CLAMP(ycomp + c_blue);
 80182b4:	693a      	ldr	r2, [r7, #16]
 80182b6:	6a3b      	ldr	r3, [r7, #32]
 80182b8:	4413      	add	r3, r2
 80182ba:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80182be:	4a38      	ldr	r2, [pc, #224]	; (80183a0 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x294>)
 80182c0:	5cd2      	ldrb	r2, [r2, r3]
 80182c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80182c4:	701a      	strb	r2, [r3, #0]
            
            /**********/
            ycomp = (int32_t)(*(pLum +j +8 +1));            
 80182c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80182c8:	3309      	adds	r3, #9
 80182ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80182cc:	4413      	add	r3, r2
 80182ce:	781b      	ldrb	r3, [r3, #0]
 80182d0:	613b      	str	r3, [r7, #16]
            
            pOutAddr2[3+ JPEG_RED_OFFSET/8] = CLAMP(ycomp + c_red);
 80182d2:	693a      	ldr	r2, [r7, #16]
 80182d4:	69bb      	ldr	r3, [r7, #24]
 80182d6:	4413      	add	r3, r2
 80182d8:	f503 7280 	add.w	r2, r3, #256	; 0x100
 80182dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80182de:	3305      	adds	r3, #5
 80182e0:	492f      	ldr	r1, [pc, #188]	; (80183a0 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x294>)
 80182e2:	5c8a      	ldrb	r2, [r1, r2]
 80182e4:	701a      	strb	r2, [r3, #0]
            pOutAddr2[3 + JPEG_GREEN_OFFSET/8] = CLAMP(ycomp + c_green);
 80182e6:	693a      	ldr	r2, [r7, #16]
 80182e8:	697b      	ldr	r3, [r7, #20]
 80182ea:	4413      	add	r3, r2
 80182ec:	f503 7280 	add.w	r2, r3, #256	; 0x100
 80182f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80182f2:	3304      	adds	r3, #4
 80182f4:	492a      	ldr	r1, [pc, #168]	; (80183a0 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x294>)
 80182f6:	5c8a      	ldrb	r2, [r1, r2]
 80182f8:	701a      	strb	r2, [r3, #0]
            pOutAddr2[3 + JPEG_BLUE_OFFSET/8] = CLAMP(ycomp + c_blue);
 80182fa:	693a      	ldr	r2, [r7, #16]
 80182fc:	6a3b      	ldr	r3, [r7, #32]
 80182fe:	4413      	add	r3, r2
 8018300:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8018304:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018306:	3303      	adds	r3, #3
 8018308:	4925      	ldr	r1, [pc, #148]	; (80183a0 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x294>)
 801830a:	5c8a      	ldrb	r2, [r1, r2]
 801830c:	701a      	strb	r2, [r3, #0]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);         
#endif /* JPEG_RGB_FORMAT */          
          
            pOutAddr += JPEG_BYTES_PER_PIXEL * 2;
 801830e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018310:	3306      	adds	r3, #6
 8018312:	643b      	str	r3, [r7, #64]	; 0x40
            pOutAddr2 += JPEG_BYTES_PER_PIXEL * 2;
 8018314:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018316:	3306      	adds	r3, #6
 8018318:	63fb      	str	r3, [r7, #60]	; 0x3c
          
            pChrom++;
 801831a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801831c:	3301      	adds	r3, #1
 801831e:	63bb      	str	r3, [r7, #56]	; 0x38
          for(j=0; j < 8; j+=2)
 8018320:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018322:	3302      	adds	r3, #2
 8018324:	653b      	str	r3, [r7, #80]	; 0x50
 8018326:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018328:	2b07      	cmp	r3, #7
 801832a:	f67f af43 	bls.w	80181b4 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xa8>
          }
          pLum += 64;                      
 801832e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018330:	3340      	adds	r3, #64	; 0x40
 8018332:	637b      	str	r3, [r7, #52]	; 0x34
        for(k= 0; k<2; k++)
 8018334:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018336:	3301      	adds	r3, #1
 8018338:	64fb      	str	r3, [r7, #76]	; 0x4c
 801833a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801833c:	2b01      	cmp	r3, #1
 801833e:	f67f af36 	bls.w	80181ae <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xa2>
        }

        pLum = pLum - 128 + 16;
 8018342:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018344:	3b70      	subs	r3, #112	; 0x70
 8018346:	637b      	str	r3, [r7, #52]	; 0x34
        
        refline += 2*JPEG_ConvertorParams.ScaledWidth;          
 8018348:	4b10      	ldr	r3, [pc, #64]	; (801838c <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x280>)
 801834a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801834c:	005b      	lsls	r3, r3, #1
 801834e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8018350:	4413      	add	r3, r2
 8018352:	647b      	str	r3, [r7, #68]	; 0x44
    for(i= 0; i <  16; i+=2)
 8018354:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018356:	3302      	adds	r3, #2
 8018358:	657b      	str	r3, [r7, #84]	; 0x54
 801835a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801835c:	2b0f      	cmp	r3, #15
 801835e:	f67f af0e 	bls.w	801817e <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x72>
      }
    }   
    
    pInBuffer +=  YCBCR_420_BLOCK_SIZE;
 8018362:	68fb      	ldr	r3, [r7, #12]
 8018364:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8018368:	60fb      	str	r3, [r7, #12]
  while(currentMCU < (numberMCU + BlockIndex))
 801836a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801836c:	687b      	ldr	r3, [r7, #4]
 801836e:	4413      	add	r3, r2
 8018370:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8018372:	429a      	cmp	r2, r3
 8018374:	f4ff aeda 	bcc.w	801812c <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x20>
  }
  return numberMCU;
 8018378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 801837a:	4618      	mov	r0, r3
 801837c:	375c      	adds	r7, #92	; 0x5c
 801837e:	46bd      	mov	sp, r7
 8018380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018384:	4770      	bx	lr
 8018386:	bf00      	nop
 8018388:	aaaaaaab 	.word	0xaaaaaaab
 801838c:	24025130 	.word	0x24025130
 8018390:	24025570 	.word	0x24025570
 8018394:	24025170 	.word	0x24025170
 8018398:	24025970 	.word	0x24025970
 801839c:	24025d70 	.word	0x24025d70
 80183a0:	0802a638 	.word	0x0802a638

080183a4 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr422_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
 80183a4:	b480      	push	{r7}
 80183a6:	b097      	sub	sp, #92	; 0x5c
 80183a8:	af00      	add	r7, sp, #0
 80183aa:	60f8      	str	r0, [r7, #12]
 80183ac:	60b9      	str	r1, [r7, #8]
 80183ae:	607a      	str	r2, [r7, #4]
 80183b0:	603b      	str	r3, [r7, #0]
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;
  
  numberMCU = DataCount / YCBCR_422_BLOCK_SIZE;
 80183b2:	683b      	ldr	r3, [r7, #0]
 80183b4:	0a1b      	lsrs	r3, r3, #8
 80183b6:	637b      	str	r3, [r7, #52]	; 0x34
  currentMCU = BlockIndex;
 80183b8:	687b      	ldr	r3, [r7, #4]
 80183ba:	64bb      	str	r3, [r7, #72]	; 0x48
  

  while(currentMCU < (numberMCU + BlockIndex))
 80183bc:	e0c5      	b.n	801854a <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1a6>
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
 80183be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80183c0:	011a      	lsls	r2, r3, #4
 80183c2:	4b69      	ldr	r3, [pc, #420]	; (8018568 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1c4>)
 80183c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80183c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80183ca:	00db      	lsls	r3, r3, #3
 80183cc:	633b      	str	r3, [r7, #48]	; 0x30
    
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
 80183ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80183d0:	011b      	lsls	r3, r3, #4
 80183d2:	4a65      	ldr	r2, [pc, #404]	; (8018568 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1c4>)
 80183d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80183d6:	fbb3 f1f2 	udiv	r1, r3, r2
 80183da:	fb01 f202 	mul.w	r2, r1, r2
 80183de:	1a9b      	subs	r3, r3, r2
 80183e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 80183e2:	4b61      	ldr	r3, [pc, #388]	; (8018568 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1c4>)
 80183e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80183e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80183e8:	fb02 f103 	mul.w	r1, r2, r3
 80183ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80183ee:	4613      	mov	r3, r2
 80183f0:	005b      	lsls	r3, r3, #1
 80183f2:	4413      	add	r3, r2
 80183f4:	440b      	add	r3, r1
 80183f6:	647b      	str	r3, [r7, #68]	; 0x44

    currentMCU++;
 80183f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80183fa:	3301      	adds	r3, #1
 80183fc:	64bb      	str	r3, [r7, #72]	; 0x48
    
    pChrom = pInBuffer + 128; /* pChroma = pInBuffer + 2*64 */
 80183fe:	68fb      	ldr	r3, [r7, #12]
 8018400:	3380      	adds	r3, #128	; 0x80
 8018402:	63fb      	str	r3, [r7, #60]	; 0x3c
    
    pLum = pInBuffer;
 8018404:	68fb      	ldr	r3, [r7, #12]
 8018406:	63bb      	str	r3, [r7, #56]	; 0x38
    
    for(i= 0; i <  8; i++)
 8018408:	2300      	movs	r3, #0
 801840a:	657b      	str	r3, [r7, #84]	; 0x54
 801840c:	e095      	b.n	801853a <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x196>
    {
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 801840e:	4b56      	ldr	r3, [pc, #344]	; (8018568 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1c4>)
 8018410:	691b      	ldr	r3, [r3, #16]
 8018412:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8018414:	429a      	cmp	r2, r3
 8018416:	f080 808d 	bcs.w	8018534 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x190>
      {
        pOutAddr = pOutBuffer + refline;
 801841a:	68ba      	ldr	r2, [r7, #8]
 801841c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801841e:	4413      	add	r3, r2
 8018420:	643b      	str	r3, [r7, #64]	; 0x40
        
        for(k= 0; k<2; k++)
 8018422:	2300      	movs	r3, #0
 8018424:	64fb      	str	r3, [r7, #76]	; 0x4c
 8018426:	e07a      	b.n	801851e <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x17a>
        {
          for(j=0; j < 8; j+=2)
 8018428:	2300      	movs	r3, #0
 801842a:	653b      	str	r3, [r7, #80]	; 0x50
 801842c:	e06e      	b.n	801850c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x168>
          {           
            cbcomp = (int32_t)(*(pChrom));
 801842e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018430:	781b      	ldrb	r3, [r3, #0]
 8018432:	62bb      	str	r3, [r7, #40]	; 0x28
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 8018434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018436:	009b      	lsls	r3, r3, #2
 8018438:	4a4c      	ldr	r2, [pc, #304]	; (801856c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1c8>)
 801843a:	4413      	add	r3, r2
 801843c:	681b      	ldr	r3, [r3, #0]
 801843e:	627b      	str	r3, [r7, #36]	; 0x24
            
            crcomp = (int32_t)(*(pChrom + 64));
 8018440:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018442:	3340      	adds	r3, #64	; 0x40
 8018444:	781b      	ldrb	r3, [r3, #0]
 8018446:	623b      	str	r3, [r7, #32]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
 8018448:	6a3b      	ldr	r3, [r7, #32]
 801844a:	009b      	lsls	r3, r3, #2
 801844c:	4a48      	ldr	r2, [pc, #288]	; (8018570 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1cc>)
 801844e:	4413      	add	r3, r2
 8018450:	681b      	ldr	r3, [r3, #0]
 8018452:	61fb      	str	r3, [r7, #28]
            
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
 8018454:	6a3b      	ldr	r3, [r7, #32]
 8018456:	009b      	lsls	r3, r3, #2
 8018458:	4a46      	ldr	r2, [pc, #280]	; (8018574 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1d0>)
 801845a:	4413      	add	r3, r2
 801845c:	681a      	ldr	r2, [r3, #0]
 801845e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018460:	009b      	lsls	r3, r3, #2
 8018462:	4945      	ldr	r1, [pc, #276]	; (8018578 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1d4>)
 8018464:	440b      	add	r3, r1
 8018466:	681b      	ldr	r3, [r3, #0]
 8018468:	4413      	add	r3, r2
 801846a:	141b      	asrs	r3, r3, #16
 801846c:	61bb      	str	r3, [r7, #24]
              (CLAMP( ycomp + c_green) << JPEG_GREEN_OFFSET) | \
              (CLAMP(ycomp + c_blue) << JPEG_BLUE_OFFSET);         
            
#elif (JPEG_RGB_FORMAT == JPEG_RGB888)
          
           ycomp = (int32_t)(*(pLum +j));
 801846e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8018470:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018472:	4413      	add	r3, r2
 8018474:	781b      	ldrb	r3, [r3, #0]
 8018476:	617b      	str	r3, [r7, #20]
          
            pOutAddr[JPEG_RED_OFFSET/8] = CLAMP(ycomp + c_red);
 8018478:	697a      	ldr	r2, [r7, #20]
 801847a:	69fb      	ldr	r3, [r7, #28]
 801847c:	4413      	add	r3, r2
 801847e:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8018482:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018484:	3302      	adds	r3, #2
 8018486:	493d      	ldr	r1, [pc, #244]	; (801857c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1d8>)
 8018488:	5c8a      	ldrb	r2, [r1, r2]
 801848a:	701a      	strb	r2, [r3, #0]
            pOutAddr[JPEG_GREEN_OFFSET/8] = CLAMP(ycomp + c_green);
 801848c:	697a      	ldr	r2, [r7, #20]
 801848e:	69bb      	ldr	r3, [r7, #24]
 8018490:	4413      	add	r3, r2
 8018492:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8018496:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018498:	3301      	adds	r3, #1
 801849a:	4938      	ldr	r1, [pc, #224]	; (801857c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1d8>)
 801849c:	5c8a      	ldrb	r2, [r1, r2]
 801849e:	701a      	strb	r2, [r3, #0]
            pOutAddr[JPEG_BLUE_OFFSET/8] = CLAMP(ycomp + c_blue);
 80184a0:	697a      	ldr	r2, [r7, #20]
 80184a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80184a4:	4413      	add	r3, r2
 80184a6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80184aa:	4a34      	ldr	r2, [pc, #208]	; (801857c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1d8>)
 80184ac:	5cd2      	ldrb	r2, [r2, r3]
 80184ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80184b0:	701a      	strb	r2, [r3, #0]
            
            /**********/
            ycomp = (int32_t)(*(pLum +j +1));
 80184b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80184b4:	3301      	adds	r3, #1
 80184b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80184b8:	4413      	add	r3, r2
 80184ba:	781b      	ldrb	r3, [r3, #0]
 80184bc:	617b      	str	r3, [r7, #20]

            pOutAddr[3 + JPEG_RED_OFFSET/8] = CLAMP(ycomp + c_red);
 80184be:	697a      	ldr	r2, [r7, #20]
 80184c0:	69fb      	ldr	r3, [r7, #28]
 80184c2:	4413      	add	r3, r2
 80184c4:	f503 7280 	add.w	r2, r3, #256	; 0x100
 80184c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80184ca:	3305      	adds	r3, #5
 80184cc:	492b      	ldr	r1, [pc, #172]	; (801857c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1d8>)
 80184ce:	5c8a      	ldrb	r2, [r1, r2]
 80184d0:	701a      	strb	r2, [r3, #0]
            pOutAddr[3 + JPEG_GREEN_OFFSET/8] = CLAMP(ycomp + c_green);
 80184d2:	697a      	ldr	r2, [r7, #20]
 80184d4:	69bb      	ldr	r3, [r7, #24]
 80184d6:	4413      	add	r3, r2
 80184d8:	f503 7280 	add.w	r2, r3, #256	; 0x100
 80184dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80184de:	3304      	adds	r3, #4
 80184e0:	4926      	ldr	r1, [pc, #152]	; (801857c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1d8>)
 80184e2:	5c8a      	ldrb	r2, [r1, r2]
 80184e4:	701a      	strb	r2, [r3, #0]
            pOutAddr[3 + JPEG_BLUE_OFFSET/8] = CLAMP(ycomp + c_blue);
 80184e6:	697a      	ldr	r2, [r7, #20]
 80184e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80184ea:	4413      	add	r3, r2
 80184ec:	f503 7280 	add.w	r2, r3, #256	; 0x100
 80184f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80184f2:	3303      	adds	r3, #3
 80184f4:	4921      	ldr	r1, [pc, #132]	; (801857c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1d8>)
 80184f6:	5c8a      	ldrb	r2, [r1, r2]
 80184f8:	701a      	strb	r2, [r3, #0]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);         
          
#endif /* JPEG_RGB_FORMAT*/          
          
            pOutAddr += JPEG_BYTES_PER_PIXEL * 2;
 80184fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80184fc:	3306      	adds	r3, #6
 80184fe:	643b      	str	r3, [r7, #64]	; 0x40
          
            pChrom++;
 8018500:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018502:	3301      	adds	r3, #1
 8018504:	63fb      	str	r3, [r7, #60]	; 0x3c
          for(j=0; j < 8; j+=2)
 8018506:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018508:	3302      	adds	r3, #2
 801850a:	653b      	str	r3, [r7, #80]	; 0x50
 801850c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801850e:	2b07      	cmp	r3, #7
 8018510:	d98d      	bls.n	801842e <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x8a>
          }
          pLum += 64;                      
 8018512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018514:	3340      	adds	r3, #64	; 0x40
 8018516:	63bb      	str	r3, [r7, #56]	; 0x38
        for(k= 0; k<2; k++)
 8018518:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801851a:	3301      	adds	r3, #1
 801851c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801851e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018520:	2b01      	cmp	r3, #1
 8018522:	d981      	bls.n	8018428 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x84>
        }
        
        pLum = pLum - 128 + 8;
 8018524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018526:	3b78      	subs	r3, #120	; 0x78
 8018528:	63bb      	str	r3, [r7, #56]	; 0x38
        
        refline += JPEG_ConvertorParams.ScaledWidth;          
 801852a:	4b0f      	ldr	r3, [pc, #60]	; (8018568 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1c4>)
 801852c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801852e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8018530:	4413      	add	r3, r2
 8018532:	647b      	str	r3, [r7, #68]	; 0x44
    for(i= 0; i <  8; i++)
 8018534:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018536:	3301      	adds	r3, #1
 8018538:	657b      	str	r3, [r7, #84]	; 0x54
 801853a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801853c:	2b07      	cmp	r3, #7
 801853e:	f67f af66 	bls.w	801840e <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x6a>
      }
    }   
    
    pInBuffer +=  YCBCR_422_BLOCK_SIZE;
 8018542:	68fb      	ldr	r3, [r7, #12]
 8018544:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8018548:	60fb      	str	r3, [r7, #12]
  while(currentMCU < (numberMCU + BlockIndex))
 801854a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801854c:	687b      	ldr	r3, [r7, #4]
 801854e:	4413      	add	r3, r2
 8018550:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8018552:	429a      	cmp	r2, r3
 8018554:	f4ff af33 	bcc.w	80183be <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1a>
  }
  return numberMCU;
 8018558:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801855a:	4618      	mov	r0, r3
 801855c:	375c      	adds	r7, #92	; 0x5c
 801855e:	46bd      	mov	sp, r7
 8018560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018564:	4770      	bx	lr
 8018566:	bf00      	nop
 8018568:	24025130 	.word	0x24025130
 801856c:	24025570 	.word	0x24025570
 8018570:	24025170 	.word	0x24025170
 8018574:	24025970 	.word	0x24025970
 8018578:	24025d70 	.word	0x24025d70
 801857c:	0802a638 	.word	0x0802a638

08018580 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr444_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
 8018580:	b480      	push	{r7}
 8018582:	b095      	sub	sp, #84	; 0x54
 8018584:	af00      	add	r7, sp, #0
 8018586:	60f8      	str	r0, [r7, #12]
 8018588:	60b9      	str	r1, [r7, #8]
 801858a:	607a      	str	r2, [r7, #4]
 801858c:	603b      	str	r3, [r7, #0]
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;
  
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
 801858e:	683b      	ldr	r3, [r7, #0]
 8018590:	4a54      	ldr	r2, [pc, #336]	; (80186e4 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x164>)
 8018592:	fba2 2303 	umull	r2, r3, r2, r3
 8018596:	09db      	lsrs	r3, r3, #7
 8018598:	633b      	str	r3, [r7, #48]	; 0x30
  currentMCU = BlockIndex;
 801859a:	687b      	ldr	r3, [r7, #4]
 801859c:	647b      	str	r3, [r7, #68]	; 0x44
  

  while(currentMCU < (numberMCU + BlockIndex))
 801859e:	e092      	b.n	80186c6 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x146>
  {

    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 80185a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80185a2:	00da      	lsls	r2, r3, #3
 80185a4:	4b50      	ldr	r3, [pc, #320]	; (80186e8 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x168>)
 80185a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80185a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80185ac:	00db      	lsls	r3, r3, #3
 80185ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 80185b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80185b2:	00db      	lsls	r3, r3, #3
 80185b4:	4a4c      	ldr	r2, [pc, #304]	; (80186e8 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x168>)
 80185b6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80185b8:	fbb3 f1f2 	udiv	r1, r3, r2
 80185bc:	fb01 f202 	mul.w	r2, r1, r2
 80185c0:	1a9b      	subs	r3, r3, r2
 80185c2:	62bb      	str	r3, [r7, #40]	; 0x28
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 80185c4:	4b48      	ldr	r3, [pc, #288]	; (80186e8 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x168>)
 80185c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80185c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80185ca:	fb02 f103 	mul.w	r1, r2, r3
 80185ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80185d0:	4613      	mov	r3, r2
 80185d2:	005b      	lsls	r3, r3, #1
 80185d4:	4413      	add	r3, r2
 80185d6:	440b      	add	r3, r1
 80185d8:	643b      	str	r3, [r7, #64]	; 0x40

    currentMCU++;   
 80185da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80185dc:	3301      	adds	r3, #1
 80185de:	647b      	str	r3, [r7, #68]	; 0x44
    
    pChrom = pInBuffer + 64; /* pChroma = pInBuffer + 4*64 */
 80185e0:	68fb      	ldr	r3, [r7, #12]
 80185e2:	3340      	adds	r3, #64	; 0x40
 80185e4:	63bb      	str	r3, [r7, #56]	; 0x38
    
    pLum = pInBuffer;
 80185e6:	68fb      	ldr	r3, [r7, #12]
 80185e8:	637b      	str	r3, [r7, #52]	; 0x34
    
    for(i= 0; i <  8; i++)
 80185ea:	2300      	movs	r3, #0
 80185ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80185ee:	e064      	b.n	80186ba <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x13a>
    {
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 80185f0:	4b3d      	ldr	r3, [pc, #244]	; (80186e8 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x168>)
 80185f2:	691b      	ldr	r3, [r3, #16]
 80185f4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80185f6:	429a      	cmp	r2, r3
 80185f8:	d25c      	bcs.n	80186b4 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x134>
      {
        pOutAddr = pOutBuffer+ refline;
 80185fa:	68ba      	ldr	r2, [r7, #8]
 80185fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80185fe:	4413      	add	r3, r2
 8018600:	63fb      	str	r3, [r7, #60]	; 0x3c
        

          for(j=0; j < 8; j++)
 8018602:	2300      	movs	r3, #0
 8018604:	64bb      	str	r3, [r7, #72]	; 0x48
 8018606:	e04a      	b.n	801869e <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x11e>
          {           
            cbcomp = (int32_t)(*pChrom);
 8018608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801860a:	781b      	ldrb	r3, [r3, #0]
 801860c:	627b      	str	r3, [r7, #36]	; 0x24
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 801860e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018610:	009b      	lsls	r3, r3, #2
 8018612:	4a36      	ldr	r2, [pc, #216]	; (80186ec <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x16c>)
 8018614:	4413      	add	r3, r2
 8018616:	681b      	ldr	r3, [r3, #0]
 8018618:	623b      	str	r3, [r7, #32]
            
            crcomp = (int32_t)(*(pChrom + 64));
 801861a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801861c:	3340      	adds	r3, #64	; 0x40
 801861e:	781b      	ldrb	r3, [r3, #0]
 8018620:	61fb      	str	r3, [r7, #28]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
 8018622:	69fb      	ldr	r3, [r7, #28]
 8018624:	009b      	lsls	r3, r3, #2
 8018626:	4a32      	ldr	r2, [pc, #200]	; (80186f0 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x170>)
 8018628:	4413      	add	r3, r2
 801862a:	681b      	ldr	r3, [r3, #0]
 801862c:	61bb      	str	r3, [r7, #24]
            
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
 801862e:	69fb      	ldr	r3, [r7, #28]
 8018630:	009b      	lsls	r3, r3, #2
 8018632:	4a30      	ldr	r2, [pc, #192]	; (80186f4 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x174>)
 8018634:	4413      	add	r3, r2
 8018636:	681a      	ldr	r2, [r3, #0]
 8018638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801863a:	009b      	lsls	r3, r3, #2
 801863c:	492e      	ldr	r1, [pc, #184]	; (80186f8 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x178>)
 801863e:	440b      	add	r3, r1
 8018640:	681b      	ldr	r3, [r3, #0]
 8018642:	4413      	add	r3, r2
 8018644:	141b      	asrs	r3, r3, #16
 8018646:	617b      	str	r3, [r7, #20]
              (CLAMP( ycomp + c_green) << JPEG_GREEN_OFFSET) | \
              (CLAMP(ycomp + c_blue) << JPEG_BLUE_OFFSET);       
            
#elif (JPEG_RGB_FORMAT == JPEG_RGB888)
            
            ycomp = (int32_t)(*(pLum +j));
 8018648:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801864a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801864c:	4413      	add	r3, r2
 801864e:	781b      	ldrb	r3, [r3, #0]
 8018650:	613b      	str	r3, [r7, #16]
          
            pOutAddr[JPEG_RED_OFFSET/8] = CLAMP(ycomp + c_red);
 8018652:	693a      	ldr	r2, [r7, #16]
 8018654:	69bb      	ldr	r3, [r7, #24]
 8018656:	4413      	add	r3, r2
 8018658:	f503 7280 	add.w	r2, r3, #256	; 0x100
 801865c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801865e:	3302      	adds	r3, #2
 8018660:	4926      	ldr	r1, [pc, #152]	; (80186fc <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x17c>)
 8018662:	5c8a      	ldrb	r2, [r1, r2]
 8018664:	701a      	strb	r2, [r3, #0]
            pOutAddr[JPEG_GREEN_OFFSET/8] = CLAMP(ycomp + c_green);
 8018666:	693a      	ldr	r2, [r7, #16]
 8018668:	697b      	ldr	r3, [r7, #20]
 801866a:	4413      	add	r3, r2
 801866c:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8018670:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018672:	3301      	adds	r3, #1
 8018674:	4921      	ldr	r1, [pc, #132]	; (80186fc <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x17c>)
 8018676:	5c8a      	ldrb	r2, [r1, r2]
 8018678:	701a      	strb	r2, [r3, #0]
            pOutAddr[JPEG_BLUE_OFFSET/8] = CLAMP(ycomp + c_blue);        
 801867a:	693a      	ldr	r2, [r7, #16]
 801867c:	6a3b      	ldr	r3, [r7, #32]
 801867e:	4413      	add	r3, r2
 8018680:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8018684:	4a1d      	ldr	r2, [pc, #116]	; (80186fc <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x17c>)
 8018686:	5cd2      	ldrb	r2, [r2, r3]
 8018688:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801868a:	701a      	strb	r2, [r3, #0]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
            
#endif /* JPEG_RGB_FORMAT */          
          
            pOutAddr += JPEG_BYTES_PER_PIXEL;
 801868c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801868e:	3303      	adds	r3, #3
 8018690:	63fb      	str	r3, [r7, #60]	; 0x3c
          
            pChrom++;
 8018692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018694:	3301      	adds	r3, #1
 8018696:	63bb      	str	r3, [r7, #56]	; 0x38
          for(j=0; j < 8; j++)
 8018698:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801869a:	3301      	adds	r3, #1
 801869c:	64bb      	str	r3, [r7, #72]	; 0x48
 801869e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80186a0:	2b07      	cmp	r3, #7
 80186a2:	d9b1      	bls.n	8018608 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x88>
          }
          pLum += 8;
 80186a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80186a6:	3308      	adds	r3, #8
 80186a8:	637b      	str	r3, [r7, #52]	; 0x34

        refline += JPEG_ConvertorParams.ScaledWidth;          
 80186aa:	4b0f      	ldr	r3, [pc, #60]	; (80186e8 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x168>)
 80186ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80186ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80186b0:	4413      	add	r3, r2
 80186b2:	643b      	str	r3, [r7, #64]	; 0x40
    for(i= 0; i <  8; i++)
 80186b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80186b6:	3301      	adds	r3, #1
 80186b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80186ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80186bc:	2b07      	cmp	r3, #7
 80186be:	d997      	bls.n	80185f0 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x70>
      }
    }   
    
    pInBuffer +=  YCBCR_444_BLOCK_SIZE;
 80186c0:	68fb      	ldr	r3, [r7, #12]
 80186c2:	33c0      	adds	r3, #192	; 0xc0
 80186c4:	60fb      	str	r3, [r7, #12]
  while(currentMCU < (numberMCU + BlockIndex))
 80186c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80186c8:	687b      	ldr	r3, [r7, #4]
 80186ca:	4413      	add	r3, r2
 80186cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80186ce:	429a      	cmp	r2, r3
 80186d0:	f4ff af66 	bcc.w	80185a0 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x20>
  }
  return numberMCU;
 80186d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80186d6:	4618      	mov	r0, r3
 80186d8:	3754      	adds	r7, #84	; 0x54
 80186da:	46bd      	mov	sp, r7
 80186dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186e0:	4770      	bx	lr
 80186e2:	bf00      	nop
 80186e4:	aaaaaaab 	.word	0xaaaaaaab
 80186e8:	24025130 	.word	0x24025130
 80186ec:	24025570 	.word	0x24025570
 80186f0:	24025170 	.word	0x24025170
 80186f4:	24025970 	.word	0x24025970
 80186f8:	24025d70 	.word	0x24025d70
 80186fc:	0802a638 	.word	0x0802a638

08018700 <JPEG_MCU_Gray_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_Gray_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
 8018700:	b480      	push	{r7}
 8018702:	b08f      	sub	sp, #60	; 0x3c
 8018704:	af00      	add	r7, sp, #0
 8018706:	60f8      	str	r0, [r7, #12]
 8018708:	60b9      	str	r1, [r7, #8]
 801870a:	607a      	str	r2, [r7, #4]
 801870c:	603b      	str	r3, [r7, #0]

  uint32_t i,j, ySample;
  uint8_t *pOutAddr,  *pLum;

  
  numberMCU = DataCount / GRAY_444_BLOCK_SIZE;
 801870e:	683b      	ldr	r3, [r7, #0]
 8018710:	099b      	lsrs	r3, r3, #6
 8018712:	61fb      	str	r3, [r7, #28]
  currentMCU = BlockIndex;
 8018714:	687b      	ldr	r3, [r7, #4]
 8018716:	637b      	str	r3, [r7, #52]	; 0x34
  
  while(currentMCU < (numberMCU + BlockIndex))
 8018718:	e05b      	b.n	80187d2 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xd2>
  {
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 801871a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801871c:	00da      	lsls	r2, r3, #3
 801871e:	4b33      	ldr	r3, [pc, #204]	; (80187ec <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xec>)
 8018720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018722:	fbb2 f3f3 	udiv	r3, r2, r3
 8018726:	00db      	lsls	r3, r3, #3
 8018728:	61bb      	str	r3, [r7, #24]
    
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 801872a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801872c:	00db      	lsls	r3, r3, #3
 801872e:	4a2f      	ldr	r2, [pc, #188]	; (80187ec <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xec>)
 8018730:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8018732:	fbb3 f1f2 	udiv	r1, r3, r2
 8018736:	fb01 f202 	mul.w	r2, r1, r2
 801873a:	1a9b      	subs	r3, r3, r2
 801873c:	617b      	str	r3, [r7, #20]
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 801873e:	4b2b      	ldr	r3, [pc, #172]	; (80187ec <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xec>)
 8018740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018742:	69ba      	ldr	r2, [r7, #24]
 8018744:	fb02 f103 	mul.w	r1, r2, r3
 8018748:	697a      	ldr	r2, [r7, #20]
 801874a:	4613      	mov	r3, r2
 801874c:	005b      	lsls	r3, r3, #1
 801874e:	4413      	add	r3, r2
 8018750:	440b      	add	r3, r1
 8018752:	633b      	str	r3, [r7, #48]	; 0x30
    
    currentMCU++;
 8018754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018756:	3301      	adds	r3, #1
 8018758:	637b      	str	r3, [r7, #52]	; 0x34
  
    pLum = pInBuffer;
 801875a:	68fb      	ldr	r3, [r7, #12]
 801875c:	623b      	str	r3, [r7, #32]
    
    for(i= 0; i <  8; i++)
 801875e:	2300      	movs	r3, #0
 8018760:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018762:	e030      	b.n	80187c6 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xc6>
    { 
      pOutAddr = pOutBuffer + refline;
 8018764:	68ba      	ldr	r2, [r7, #8]
 8018766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018768:	4413      	add	r3, r2
 801876a:	627b      	str	r3, [r7, #36]	; 0x24
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 801876c:	4b1f      	ldr	r3, [pc, #124]	; (80187ec <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xec>)
 801876e:	691b      	ldr	r3, [r3, #16]
 8018770:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018772:	429a      	cmp	r2, r3
 8018774:	d224      	bcs.n	80187c0 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xc0>
      {  
        for(j=0; j < 8; j++)
 8018776:	2300      	movs	r3, #0
 8018778:	62bb      	str	r3, [r7, #40]	; 0x28
 801877a:	e019      	b.n	80187b0 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xb0>
        { 
          ySample =   (uint32_t)(*pLum);
 801877c:	6a3b      	ldr	r3, [r7, #32]
 801877e:	781b      	ldrb	r3, [r3, #0]
 8018780:	613b      	str	r3, [r7, #16]
          
          *(__IO uint32_t *)pOutAddr = ySample |  (ySample << 8) | (ySample << 16);
          
#elif (JPEG_RGB_FORMAT == JPEG_RGB888)
          
          pOutAddr[0] =  ySample;
 8018782:	693b      	ldr	r3, [r7, #16]
 8018784:	b2da      	uxtb	r2, r3
 8018786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018788:	701a      	strb	r2, [r3, #0]
          pOutAddr[1] =  ySample;
 801878a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801878c:	3301      	adds	r3, #1
 801878e:	693a      	ldr	r2, [r7, #16]
 8018790:	b2d2      	uxtb	r2, r2
 8018792:	701a      	strb	r2, [r3, #0]
          pOutAddr[2] =  ySample;     
 8018794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018796:	3302      	adds	r3, #2
 8018798:	693a      	ldr	r2, [r7, #16]
 801879a:	b2d2      	uxtb	r2, r2
 801879c:	701a      	strb	r2, [r3, #0]
            
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);     
          
#endif /* JPEG_RGB_FORMAT */          
          
          pOutAddr += JPEG_BYTES_PER_PIXEL;
 801879e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80187a0:	3303      	adds	r3, #3
 80187a2:	627b      	str	r3, [r7, #36]	; 0x24
          pLum++;
 80187a4:	6a3b      	ldr	r3, [r7, #32]
 80187a6:	3301      	adds	r3, #1
 80187a8:	623b      	str	r3, [r7, #32]
        for(j=0; j < 8; j++)
 80187aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187ac:	3301      	adds	r3, #1
 80187ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80187b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187b2:	2b07      	cmp	r3, #7
 80187b4:	d9e2      	bls.n	801877c <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x7c>
        }

        refline += JPEG_ConvertorParams.ScaledWidth;        
 80187b6:	4b0d      	ldr	r3, [pc, #52]	; (80187ec <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xec>)
 80187b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80187ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80187bc:	4413      	add	r3, r2
 80187be:	633b      	str	r3, [r7, #48]	; 0x30
    for(i= 0; i <  8; i++)
 80187c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80187c2:	3301      	adds	r3, #1
 80187c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80187c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80187c8:	2b07      	cmp	r3, #7
 80187ca:	d9cb      	bls.n	8018764 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x64>
      }
    }
    
    pInBuffer +=  GRAY_444_BLOCK_SIZE;    
 80187cc:	68fb      	ldr	r3, [r7, #12]
 80187ce:	3340      	adds	r3, #64	; 0x40
 80187d0:	60fb      	str	r3, [r7, #12]
  while(currentMCU < (numberMCU + BlockIndex))
 80187d2:	69fa      	ldr	r2, [r7, #28]
 80187d4:	687b      	ldr	r3, [r7, #4]
 80187d6:	4413      	add	r3, r2
 80187d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80187da:	429a      	cmp	r2, r3
 80187dc:	d39d      	bcc.n	801871a <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x1a>
  }
  return numberMCU;
 80187de:	69fb      	ldr	r3, [r7, #28]
}
 80187e0:	4618      	mov	r0, r3
 80187e2:	373c      	adds	r7, #60	; 0x3c
 80187e4:	46bd      	mov	sp, r7
 80187e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187ea:	4770      	bx	lr
 80187ec:	24025130 	.word	0x24025130

080187f0 <JPEG_MCU_YCCK_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCCK_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer, 
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
 80187f0:	b480      	push	{r7}
 80187f2:	b093      	sub	sp, #76	; 0x4c
 80187f4:	af00      	add	r7, sp, #0
 80187f6:	60f8      	str	r0, [r7, #12]
 80187f8:	60b9      	str	r1, [r7, #8]
 80187fa:	607a      	str	r2, [r7, #4]
 80187fc:	603b      	str	r3, [r7, #0]
  
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr, *pChrom;
  
  numberMCU = DataCount / CMYK_444_BLOCK_SIZE;
 80187fe:	683b      	ldr	r3, [r7, #0]
 8018800:	0a1b      	lsrs	r3, r3, #8
 8018802:	62fb      	str	r3, [r7, #44]	; 0x2c
  currentMCU = BlockIndex;
 8018804:	687b      	ldr	r3, [r7, #4]
 8018806:	63fb      	str	r3, [r7, #60]	; 0x3c
  

  while(currentMCU < (numberMCU + BlockIndex))
 8018808:	e089      	b.n	801891e <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x12e>
  {

    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 801880a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801880c:	00da      	lsls	r2, r3, #3
 801880e:	4b4b      	ldr	r3, [pc, #300]	; (801893c <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x14c>)
 8018810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018812:	fbb2 f3f3 	udiv	r3, r2, r3
 8018816:	00db      	lsls	r3, r3, #3
 8018818:	62bb      	str	r3, [r7, #40]	; 0x28
    
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 801881a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801881c:	00db      	lsls	r3, r3, #3
 801881e:	4a47      	ldr	r2, [pc, #284]	; (801893c <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x14c>)
 8018820:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8018822:	fbb3 f1f2 	udiv	r1, r3, r2
 8018826:	fb01 f202 	mul.w	r2, r1, r2
 801882a:	1a9b      	subs	r3, r3, r2
 801882c:	627b      	str	r3, [r7, #36]	; 0x24
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 801882e:	4b43      	ldr	r3, [pc, #268]	; (801893c <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x14c>)
 8018830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018832:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018834:	fb02 f103 	mul.w	r1, r2, r3
 8018838:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801883a:	4613      	mov	r3, r2
 801883c:	005b      	lsls	r3, r3, #1
 801883e:	4413      	add	r3, r2
 8018840:	440b      	add	r3, r1
 8018842:	63bb      	str	r3, [r7, #56]	; 0x38

    currentMCU++;
 8018844:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018846:	3301      	adds	r3, #1
 8018848:	63fb      	str	r3, [r7, #60]	; 0x3c
    
    pChrom = pInBuffer;
 801884a:	68fb      	ldr	r3, [r7, #12]
 801884c:	633b      	str	r3, [r7, #48]	; 0x30
    
    for(i= 0; i <  8; i++)
 801884e:	2300      	movs	r3, #0
 8018850:	647b      	str	r3, [r7, #68]	; 0x44
 8018852:	e05d      	b.n	8018910 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x120>
    {
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8018854:	4b39      	ldr	r3, [pc, #228]	; (801893c <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x14c>)
 8018856:	691b      	ldr	r3, [r3, #16]
 8018858:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801885a:	429a      	cmp	r2, r3
 801885c:	d255      	bcs.n	801890a <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x11a>
      {
        pOutAddr = pOutBuffer+ refline;        
 801885e:	68ba      	ldr	r2, [r7, #8]
 8018860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018862:	4413      	add	r3, r2
 8018864:	637b      	str	r3, [r7, #52]	; 0x34

          for(j=0; j < 8; j++)
 8018866:	2300      	movs	r3, #0
 8018868:	643b      	str	r3, [r7, #64]	; 0x40
 801886a:	e046      	b.n	80188fa <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x10a>
          {           
            color_k = (int32_t)(*(pChrom + 192));
 801886c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801886e:	33c0      	adds	r3, #192	; 0xc0
 8018870:	781b      	ldrb	r3, [r3, #0]
 8018872:	623b      	str	r3, [r7, #32]
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
 8018874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018876:	781b      	ldrb	r3, [r3, #0]
 8018878:	461a      	mov	r2, r3
 801887a:	6a3b      	ldr	r3, [r7, #32]
 801887c:	fb02 f303 	mul.w	r3, r2, r3
 8018880:	4a2f      	ldr	r2, [pc, #188]	; (8018940 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x150>)
 8018882:	fb82 1203 	smull	r1, r2, r2, r3
 8018886:	441a      	add	r2, r3
 8018888:	11d2      	asrs	r2, r2, #7
 801888a:	17db      	asrs	r3, r3, #31
 801888c:	1ad3      	subs	r3, r2, r3
 801888e:	61fb      	str	r3, [r7, #28]
            
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
 8018890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018892:	3340      	adds	r3, #64	; 0x40
 8018894:	781b      	ldrb	r3, [r3, #0]
 8018896:	461a      	mov	r2, r3
 8018898:	6a3b      	ldr	r3, [r7, #32]
 801889a:	fb02 f303 	mul.w	r3, r2, r3
 801889e:	4a28      	ldr	r2, [pc, #160]	; (8018940 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x150>)
 80188a0:	fb82 1203 	smull	r1, r2, r2, r3
 80188a4:	441a      	add	r2, r3
 80188a6:	11d2      	asrs	r2, r2, #7
 80188a8:	17db      	asrs	r3, r3, #31
 80188aa:	1ad3      	subs	r3, r2, r3
 80188ac:	61bb      	str	r3, [r7, #24]
            
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
 80188ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80188b0:	3380      	adds	r3, #128	; 0x80
 80188b2:	781b      	ldrb	r3, [r3, #0]
 80188b4:	461a      	mov	r2, r3
 80188b6:	6a3b      	ldr	r3, [r7, #32]
 80188b8:	fb02 f303 	mul.w	r3, r2, r3
 80188bc:	4a20      	ldr	r2, [pc, #128]	; (8018940 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x150>)
 80188be:	fb82 1203 	smull	r1, r2, r2, r3
 80188c2:	441a      	add	r2, r3
 80188c4:	11d2      	asrs	r2, r2, #7
 80188c6:	17db      	asrs	r3, r3, #31
 80188c8:	1ad3      	subs	r3, r2, r3
 80188ca:	617b      	str	r3, [r7, #20]
            (c_green << JPEG_GREEN_OFFSET) | \
            (c_blue << JPEG_BLUE_OFFSET);     
            
#elif (JPEG_RGB_FORMAT == JPEG_RGB888)
            
          pOutAddr[JPEG_RED_OFFSET/8]   =  c_red;
 80188cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80188ce:	3302      	adds	r3, #2
 80188d0:	69fa      	ldr	r2, [r7, #28]
 80188d2:	b2d2      	uxtb	r2, r2
 80188d4:	701a      	strb	r2, [r3, #0]
          pOutAddr[JPEG_GREEN_OFFSET/8] =  c_green;
 80188d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80188d8:	3301      	adds	r3, #1
 80188da:	69ba      	ldr	r2, [r7, #24]
 80188dc:	b2d2      	uxtb	r2, r2
 80188de:	701a      	strb	r2, [r3, #0]
          pOutAddr[JPEG_BLUE_OFFSET/8]  =  c_blue;
 80188e0:	697b      	ldr	r3, [r7, #20]
 80188e2:	b2da      	uxtb	r2, r3
 80188e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80188e6:	701a      	strb	r2, [r3, #0]
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
            ((c_blue >> 3) << JPEG_BLUE_OFFSET);         
            
#endif /* JPEG_RGB_FORMAT */          
          
            pOutAddr += JPEG_BYTES_PER_PIXEL;
 80188e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80188ea:	3303      	adds	r3, #3
 80188ec:	637b      	str	r3, [r7, #52]	; 0x34
          
            pChrom++;
 80188ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80188f0:	3301      	adds	r3, #1
 80188f2:	633b      	str	r3, [r7, #48]	; 0x30
          for(j=0; j < 8; j++)
 80188f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80188f6:	3301      	adds	r3, #1
 80188f8:	643b      	str	r3, [r7, #64]	; 0x40
 80188fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80188fc:	2b07      	cmp	r3, #7
 80188fe:	d9b5      	bls.n	801886c <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x7c>
          }

        refline += JPEG_ConvertorParams.ScaledWidth;          
 8018900:	4b0e      	ldr	r3, [pc, #56]	; (801893c <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x14c>)
 8018902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018904:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8018906:	4413      	add	r3, r2
 8018908:	63bb      	str	r3, [r7, #56]	; 0x38
    for(i= 0; i <  8; i++)
 801890a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801890c:	3301      	adds	r3, #1
 801890e:	647b      	str	r3, [r7, #68]	; 0x44
 8018910:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018912:	2b07      	cmp	r3, #7
 8018914:	d99e      	bls.n	8018854 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x64>
      }
    }   
    
    pInBuffer +=  CMYK_444_BLOCK_SIZE;
 8018916:	68fb      	ldr	r3, [r7, #12]
 8018918:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801891c:	60fb      	str	r3, [r7, #12]
  while(currentMCU < (numberMCU + BlockIndex))
 801891e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018920:	687b      	ldr	r3, [r7, #4]
 8018922:	4413      	add	r3, r2
 8018924:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8018926:	429a      	cmp	r2, r3
 8018928:	f4ff af6f 	bcc.w	801880a <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x1a>
  }
  return numberMCU;
 801892c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 801892e:	4618      	mov	r0, r3
 8018930:	374c      	adds	r7, #76	; 0x4c
 8018932:	46bd      	mov	sp, r7
 8018934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018938:	4770      	bx	lr
 801893a:	bf00      	nop
 801893c:	24025130 	.word	0x24025130
 8018940:	80808081 	.word	0x80808081

08018944 <JPEG_GetDecodeColorConvertFunc>:
  *                      depending of the jpeg image color space and chroma sampling info. 
  * @param ImageNbMCUs : pointer to uint32_t, used to retrive the total number of MCU blocks in the jpeg image.  
  * @retval HAL status : HAL_OK or HAL_ERROR.
  */
HAL_StatusTypeDef JPEG_GetDecodeColorConvertFunc(JPEG_ConfTypeDef *pJpegInfo, JPEG_YCbCrToRGB_Convert_Function *pFunction, uint32_t *ImageNbMCUs)
{
 8018944:	b480      	push	{r7}
 8018946:	b087      	sub	sp, #28
 8018948:	af00      	add	r7, sp, #0
 801894a:	60f8      	str	r0, [r7, #12]
 801894c:	60b9      	str	r1, [r7, #8]
 801894e:	607a      	str	r2, [r7, #4]
  uint32_t hMCU, vMCU;

  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
 8018950:	68fb      	ldr	r3, [r7, #12]
 8018952:	681b      	ldr	r3, [r3, #0]
 8018954:	4a7c      	ldr	r2, [pc, #496]	; (8018b48 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8018956:	6013      	str	r3, [r2, #0]
  JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
 8018958:	68fb      	ldr	r3, [r7, #12]
 801895a:	68db      	ldr	r3, [r3, #12]
 801895c:	4a7a      	ldr	r2, [pc, #488]	; (8018b48 <JPEG_GetDecodeColorConvertFunc+0x204>)
 801895e:	6093      	str	r3, [r2, #8]
  JPEG_ConvertorParams.ImageHeight = pJpegInfo->ImageHeight;
 8018960:	68fb      	ldr	r3, [r7, #12]
 8018962:	689b      	ldr	r3, [r3, #8]
 8018964:	4a78      	ldr	r2, [pc, #480]	; (8018b48 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8018966:	60d3      	str	r3, [r2, #12]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
 8018968:	68fb      	ldr	r3, [r7, #12]
 801896a:	68db      	ldr	r3, [r3, #12]
 801896c:	68fa      	ldr	r2, [r7, #12]
 801896e:	6892      	ldr	r2, [r2, #8]
 8018970:	fb03 f202 	mul.w	r2, r3, r2
 8018974:	4613      	mov	r3, r2
 8018976:	005b      	lsls	r3, r3, #1
 8018978:	4413      	add	r3, r2
 801897a:	4a73      	ldr	r2, [pc, #460]	; (8018b48 <JPEG_GetDecodeColorConvertFunc+0x204>)
 801897c:	6113      	str	r3, [r2, #16]
  
  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;  
 801897e:	68fb      	ldr	r3, [r7, #12]
 8018980:	685b      	ldr	r3, [r3, #4]
 8018982:	4a71      	ldr	r2, [pc, #452]	; (8018b48 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8018984:	6053      	str	r3, [r2, #4]
  if(JPEG_ConvertorParams.ColorSpace == JPEG_YCBCR_COLORSPACE)
 8018986:	4b70      	ldr	r3, [pc, #448]	; (8018b48 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8018988:	681b      	ldr	r3, [r3, #0]
 801898a:	2b10      	cmp	r3, #16
 801898c:	d155      	bne.n	8018a3a <JPEG_GetDecodeColorConvertFunc+0xf6>
  {
    if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_420_SUBSAMPLING)
 801898e:	4b6e      	ldr	r3, [pc, #440]	; (8018b48 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8018990:	685b      	ldr	r3, [r3, #4]
 8018992:	2b01      	cmp	r3, #1
 8018994:	d119      	bne.n	80189ca <JPEG_GetDecodeColorConvertFunc+0x86>
    {
      *pFunction = JPEG_MCU_YCbCr420_ARGB_ConvertBlocks;
 8018996:	68bb      	ldr	r3, [r7, #8]
 8018998:	4a6c      	ldr	r2, [pc, #432]	; (8018b4c <JPEG_GetDecodeColorConvertFunc+0x208>)
 801899a:	601a      	str	r2, [r3, #0]

      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
 801899c:	4b6a      	ldr	r3, [pc, #424]	; (8018b48 <JPEG_GetDecodeColorConvertFunc+0x204>)
 801899e:	689b      	ldr	r3, [r3, #8]
 80189a0:	f003 030f 	and.w	r3, r3, #15
 80189a4:	4a68      	ldr	r2, [pc, #416]	; (8018b48 <JPEG_GetDecodeColorConvertFunc+0x204>)
 80189a6:	6153      	str	r3, [r2, #20]
      
      if(JPEG_ConvertorParams.LineOffset != 0)
 80189a8:	4b67      	ldr	r3, [pc, #412]	; (8018b48 <JPEG_GetDecodeColorConvertFunc+0x204>)
 80189aa:	695b      	ldr	r3, [r3, #20]
 80189ac:	2b00      	cmp	r3, #0
 80189ae:	d005      	beq.n	80189bc <JPEG_GetDecodeColorConvertFunc+0x78>
      {
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;  
 80189b0:	4b65      	ldr	r3, [pc, #404]	; (8018b48 <JPEG_GetDecodeColorConvertFunc+0x204>)
 80189b2:	695b      	ldr	r3, [r3, #20]
 80189b4:	f1c3 0310 	rsb	r3, r3, #16
 80189b8:	4a63      	ldr	r2, [pc, #396]	; (8018b48 <JPEG_GetDecodeColorConvertFunc+0x204>)
 80189ba:	6153      	str	r3, [r2, #20]
      }
      JPEG_ConvertorParams.H_factor = 16;
 80189bc:	4b62      	ldr	r3, [pc, #392]	; (8018b48 <JPEG_GetDecodeColorConvertFunc+0x204>)
 80189be:	2210      	movs	r2, #16
 80189c0:	61da      	str	r2, [r3, #28]
      JPEG_ConvertorParams.V_factor  = 16;
 80189c2:	4b61      	ldr	r3, [pc, #388]	; (8018b48 <JPEG_GetDecodeColorConvertFunc+0x204>)
 80189c4:	2210      	movs	r2, #16
 80189c6:	621a      	str	r2, [r3, #32]
 80189c8:	e075      	b.n	8018ab6 <JPEG_GetDecodeColorConvertFunc+0x172>
    }
    else if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_422_SUBSAMPLING)
 80189ca:	4b5f      	ldr	r3, [pc, #380]	; (8018b48 <JPEG_GetDecodeColorConvertFunc+0x204>)
 80189cc:	685b      	ldr	r3, [r3, #4]
 80189ce:	2b02      	cmp	r3, #2
 80189d0:	d119      	bne.n	8018a06 <JPEG_GetDecodeColorConvertFunc+0xc2>
    {
      *pFunction =  JPEG_MCU_YCbCr422_ARGB_ConvertBlocks;
 80189d2:	68bb      	ldr	r3, [r7, #8]
 80189d4:	4a5e      	ldr	r2, [pc, #376]	; (8018b50 <JPEG_GetDecodeColorConvertFunc+0x20c>)
 80189d6:	601a      	str	r2, [r3, #0]

      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
 80189d8:	4b5b      	ldr	r3, [pc, #364]	; (8018b48 <JPEG_GetDecodeColorConvertFunc+0x204>)
 80189da:	689b      	ldr	r3, [r3, #8]
 80189dc:	f003 030f 	and.w	r3, r3, #15
 80189e0:	4a59      	ldr	r2, [pc, #356]	; (8018b48 <JPEG_GetDecodeColorConvertFunc+0x204>)
 80189e2:	6153      	str	r3, [r2, #20]
      
      if(JPEG_ConvertorParams.LineOffset != 0)
 80189e4:	4b58      	ldr	r3, [pc, #352]	; (8018b48 <JPEG_GetDecodeColorConvertFunc+0x204>)
 80189e6:	695b      	ldr	r3, [r3, #20]
 80189e8:	2b00      	cmp	r3, #0
 80189ea:	d005      	beq.n	80189f8 <JPEG_GetDecodeColorConvertFunc+0xb4>
      {
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;  
 80189ec:	4b56      	ldr	r3, [pc, #344]	; (8018b48 <JPEG_GetDecodeColorConvertFunc+0x204>)
 80189ee:	695b      	ldr	r3, [r3, #20]
 80189f0:	f1c3 0310 	rsb	r3, r3, #16
 80189f4:	4a54      	ldr	r2, [pc, #336]	; (8018b48 <JPEG_GetDecodeColorConvertFunc+0x204>)
 80189f6:	6153      	str	r3, [r2, #20]
      }
      JPEG_ConvertorParams.H_factor = 16;
 80189f8:	4b53      	ldr	r3, [pc, #332]	; (8018b48 <JPEG_GetDecodeColorConvertFunc+0x204>)
 80189fa:	2210      	movs	r2, #16
 80189fc:	61da      	str	r2, [r3, #28]
      JPEG_ConvertorParams.V_factor  = 8;
 80189fe:	4b52      	ldr	r3, [pc, #328]	; (8018b48 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8018a00:	2208      	movs	r2, #8
 8018a02:	621a      	str	r2, [r3, #32]
 8018a04:	e057      	b.n	8018ab6 <JPEG_GetDecodeColorConvertFunc+0x172>
    }
    else /*4:4:4*/
    {
      *pFunction =  JPEG_MCU_YCbCr444_ARGB_ConvertBlocks;
 8018a06:	68bb      	ldr	r3, [r7, #8]
 8018a08:	4a52      	ldr	r2, [pc, #328]	; (8018b54 <JPEG_GetDecodeColorConvertFunc+0x210>)
 8018a0a:	601a      	str	r2, [r3, #0]

      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
 8018a0c:	4b4e      	ldr	r3, [pc, #312]	; (8018b48 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8018a0e:	689b      	ldr	r3, [r3, #8]
 8018a10:	f003 0307 	and.w	r3, r3, #7
 8018a14:	4a4c      	ldr	r2, [pc, #304]	; (8018b48 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8018a16:	6153      	str	r3, [r2, #20]
      
      if(JPEG_ConvertorParams.LineOffset != 0)
 8018a18:	4b4b      	ldr	r3, [pc, #300]	; (8018b48 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8018a1a:	695b      	ldr	r3, [r3, #20]
 8018a1c:	2b00      	cmp	r3, #0
 8018a1e:	d005      	beq.n	8018a2c <JPEG_GetDecodeColorConvertFunc+0xe8>
      {
        JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;  
 8018a20:	4b49      	ldr	r3, [pc, #292]	; (8018b48 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8018a22:	695b      	ldr	r3, [r3, #20]
 8018a24:	f1c3 0308 	rsb	r3, r3, #8
 8018a28:	4a47      	ldr	r2, [pc, #284]	; (8018b48 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8018a2a:	6153      	str	r3, [r2, #20]
      }
      JPEG_ConvertorParams.H_factor = 8;
 8018a2c:	4b46      	ldr	r3, [pc, #280]	; (8018b48 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8018a2e:	2208      	movs	r2, #8
 8018a30:	61da      	str	r2, [r3, #28]
      JPEG_ConvertorParams.V_factor  = 8;
 8018a32:	4b45      	ldr	r3, [pc, #276]	; (8018b48 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8018a34:	2208      	movs	r2, #8
 8018a36:	621a      	str	r2, [r3, #32]
 8018a38:	e03d      	b.n	8018ab6 <JPEG_GetDecodeColorConvertFunc+0x172>
    }   
  }
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_GRAYSCALE_COLORSPACE)
 8018a3a:	4b43      	ldr	r3, [pc, #268]	; (8018b48 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8018a3c:	681b      	ldr	r3, [r3, #0]
 8018a3e:	2b00      	cmp	r3, #0
 8018a40:	d119      	bne.n	8018a76 <JPEG_GetDecodeColorConvertFunc+0x132>
  {
    *pFunction =  JPEG_MCU_Gray_ARGB_ConvertBlocks;
 8018a42:	68bb      	ldr	r3, [r7, #8]
 8018a44:	4a44      	ldr	r2, [pc, #272]	; (8018b58 <JPEG_GetDecodeColorConvertFunc+0x214>)
 8018a46:	601a      	str	r2, [r3, #0]

    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
 8018a48:	4b3f      	ldr	r3, [pc, #252]	; (8018b48 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8018a4a:	689b      	ldr	r3, [r3, #8]
 8018a4c:	f003 0307 	and.w	r3, r3, #7
 8018a50:	4a3d      	ldr	r2, [pc, #244]	; (8018b48 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8018a52:	6153      	str	r3, [r2, #20]
      
    if(JPEG_ConvertorParams.LineOffset != 0)
 8018a54:	4b3c      	ldr	r3, [pc, #240]	; (8018b48 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8018a56:	695b      	ldr	r3, [r3, #20]
 8018a58:	2b00      	cmp	r3, #0
 8018a5a:	d005      	beq.n	8018a68 <JPEG_GetDecodeColorConvertFunc+0x124>
    {
      JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;  
 8018a5c:	4b3a      	ldr	r3, [pc, #232]	; (8018b48 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8018a5e:	695b      	ldr	r3, [r3, #20]
 8018a60:	f1c3 0308 	rsb	r3, r3, #8
 8018a64:	4a38      	ldr	r2, [pc, #224]	; (8018b48 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8018a66:	6153      	str	r3, [r2, #20]
    }
    JPEG_ConvertorParams.H_factor = 8;
 8018a68:	4b37      	ldr	r3, [pc, #220]	; (8018b48 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8018a6a:	2208      	movs	r2, #8
 8018a6c:	61da      	str	r2, [r3, #28]
    JPEG_ConvertorParams.V_factor  = 8;
 8018a6e:	4b36      	ldr	r3, [pc, #216]	; (8018b48 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8018a70:	2208      	movs	r2, #8
 8018a72:	621a      	str	r2, [r3, #32]
 8018a74:	e01f      	b.n	8018ab6 <JPEG_GetDecodeColorConvertFunc+0x172>
  }
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_CMYK_COLORSPACE)
 8018a76:	4b34      	ldr	r3, [pc, #208]	; (8018b48 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8018a78:	681b      	ldr	r3, [r3, #0]
 8018a7a:	2b30      	cmp	r3, #48	; 0x30
 8018a7c:	d119      	bne.n	8018ab2 <JPEG_GetDecodeColorConvertFunc+0x16e>
  {
    *pFunction =  JPEG_MCU_YCCK_ARGB_ConvertBlocks;
 8018a7e:	68bb      	ldr	r3, [r7, #8]
 8018a80:	4a36      	ldr	r2, [pc, #216]	; (8018b5c <JPEG_GetDecodeColorConvertFunc+0x218>)
 8018a82:	601a      	str	r2, [r3, #0]

    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
 8018a84:	4b30      	ldr	r3, [pc, #192]	; (8018b48 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8018a86:	689b      	ldr	r3, [r3, #8]
 8018a88:	f003 0307 	and.w	r3, r3, #7
 8018a8c:	4a2e      	ldr	r2, [pc, #184]	; (8018b48 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8018a8e:	6153      	str	r3, [r2, #20]
      
    if(JPEG_ConvertorParams.LineOffset != 0)
 8018a90:	4b2d      	ldr	r3, [pc, #180]	; (8018b48 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8018a92:	695b      	ldr	r3, [r3, #20]
 8018a94:	2b00      	cmp	r3, #0
 8018a96:	d005      	beq.n	8018aa4 <JPEG_GetDecodeColorConvertFunc+0x160>
    {
      JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;  
 8018a98:	4b2b      	ldr	r3, [pc, #172]	; (8018b48 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8018a9a:	695b      	ldr	r3, [r3, #20]
 8018a9c:	f1c3 0308 	rsb	r3, r3, #8
 8018aa0:	4a29      	ldr	r2, [pc, #164]	; (8018b48 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8018aa2:	6153      	str	r3, [r2, #20]
    }
    JPEG_ConvertorParams.H_factor = 8;
 8018aa4:	4b28      	ldr	r3, [pc, #160]	; (8018b48 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8018aa6:	2208      	movs	r2, #8
 8018aa8:	61da      	str	r2, [r3, #28]
    JPEG_ConvertorParams.V_factor  = 8;
 8018aaa:	4b27      	ldr	r3, [pc, #156]	; (8018b48 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8018aac:	2208      	movs	r2, #8
 8018aae:	621a      	str	r2, [r3, #32]
 8018ab0:	e001      	b.n	8018ab6 <JPEG_GetDecodeColorConvertFunc+0x172>
  } 
  else
  {  
    return HAL_ERROR; /* Color space Not supported*/
 8018ab2:	2301      	movs	r3, #1
 8018ab4:	e042      	b.n	8018b3c <JPEG_GetDecodeColorConvertFunc+0x1f8>
  }
 
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
 8018ab6:	4b24      	ldr	r3, [pc, #144]	; (8018b48 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8018ab8:	689a      	ldr	r2, [r3, #8]
 8018aba:	4b23      	ldr	r3, [pc, #140]	; (8018b48 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8018abc:	695b      	ldr	r3, [r3, #20]
 8018abe:	4413      	add	r3, r2
 8018ac0:	4a21      	ldr	r2, [pc, #132]	; (8018b48 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8018ac2:	6253      	str	r3, [r2, #36]	; 0x24
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
 8018ac4:	4b20      	ldr	r3, [pc, #128]	; (8018b48 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8018ac6:	689a      	ldr	r2, [r3, #8]
 8018ac8:	4613      	mov	r3, r2
 8018aca:	005b      	lsls	r3, r3, #1
 8018acc:	4413      	add	r3, r2
 8018ace:	4a1e      	ldr	r2, [pc, #120]	; (8018b48 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8018ad0:	6293      	str	r3, [r2, #40]	; 0x28
  
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
 8018ad2:	4b1d      	ldr	r3, [pc, #116]	; (8018b48 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8018ad4:	689a      	ldr	r2, [r3, #8]
 8018ad6:	4b1c      	ldr	r3, [pc, #112]	; (8018b48 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8018ad8:	69db      	ldr	r3, [r3, #28]
 8018ada:	fbb2 f3f3 	udiv	r3, r2, r3
 8018ade:	617b      	str	r3, [r7, #20]
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
 8018ae0:	4b19      	ldr	r3, [pc, #100]	; (8018b48 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8018ae2:	689b      	ldr	r3, [r3, #8]
 8018ae4:	4a18      	ldr	r2, [pc, #96]	; (8018b48 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8018ae6:	69d2      	ldr	r2, [r2, #28]
 8018ae8:	fbb3 f1f2 	udiv	r1, r3, r2
 8018aec:	fb01 f202 	mul.w	r2, r1, r2
 8018af0:	1a9b      	subs	r3, r3, r2
 8018af2:	2b00      	cmp	r3, #0
 8018af4:	d002      	beq.n	8018afc <JPEG_GetDecodeColorConvertFunc+0x1b8>
  {
    hMCU++; /*+1 for horizenatl incomplete MCU */                
 8018af6:	697b      	ldr	r3, [r7, #20]
 8018af8:	3301      	adds	r3, #1
 8018afa:	617b      	str	r3, [r7, #20]
  }

  vMCU = (JPEG_ConvertorParams.ImageHeight / JPEG_ConvertorParams.V_factor);
 8018afc:	4b12      	ldr	r3, [pc, #72]	; (8018b48 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8018afe:	68da      	ldr	r2, [r3, #12]
 8018b00:	4b11      	ldr	r3, [pc, #68]	; (8018b48 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8018b02:	6a1b      	ldr	r3, [r3, #32]
 8018b04:	fbb2 f3f3 	udiv	r3, r2, r3
 8018b08:	613b      	str	r3, [r7, #16]
  if((JPEG_ConvertorParams.ImageHeight % JPEG_ConvertorParams.V_factor) != 0)
 8018b0a:	4b0f      	ldr	r3, [pc, #60]	; (8018b48 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8018b0c:	68db      	ldr	r3, [r3, #12]
 8018b0e:	4a0e      	ldr	r2, [pc, #56]	; (8018b48 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8018b10:	6a12      	ldr	r2, [r2, #32]
 8018b12:	fbb3 f1f2 	udiv	r1, r3, r2
 8018b16:	fb01 f202 	mul.w	r2, r1, r2
 8018b1a:	1a9b      	subs	r3, r3, r2
 8018b1c:	2b00      	cmp	r3, #0
 8018b1e:	d002      	beq.n	8018b26 <JPEG_GetDecodeColorConvertFunc+0x1e2>
  {
    vMCU++; /*+1 for vertical incomplete MCU */                
 8018b20:	693b      	ldr	r3, [r7, #16]
 8018b22:	3301      	adds	r3, #1
 8018b24:	613b      	str	r3, [r7, #16]
  }
  JPEG_ConvertorParams.MCU_Total_Nb = (hMCU * vMCU);
 8018b26:	697b      	ldr	r3, [r7, #20]
 8018b28:	693a      	ldr	r2, [r7, #16]
 8018b2a:	fb02 f303 	mul.w	r3, r2, r3
 8018b2e:	4a06      	ldr	r2, [pc, #24]	; (8018b48 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8018b30:	62d3      	str	r3, [r2, #44]	; 0x2c
  *ImageNbMCUs = JPEG_ConvertorParams.MCU_Total_Nb;
 8018b32:	4b05      	ldr	r3, [pc, #20]	; (8018b48 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8018b34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018b36:	687b      	ldr	r3, [r7, #4]
 8018b38:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8018b3a:	2300      	movs	r3, #0
}
 8018b3c:	4618      	mov	r0, r3
 8018b3e:	371c      	adds	r7, #28
 8018b40:	46bd      	mov	sp, r7
 8018b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b46:	4770      	bx	lr
 8018b48:	24025130 	.word	0x24025130
 8018b4c:	0801810d 	.word	0x0801810d
 8018b50:	080183a5 	.word	0x080183a5
 8018b54:	08018581 	.word	0x08018581
 8018b58:	08018701 	.word	0x08018701
 8018b5c:	080187f1 	.word	0x080187f1

08018b60 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8018b60:	8880      	ldrh	r0, [r0, #4]
 8018b62:	4770      	bx	lr

08018b64 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8018b64:	b570      	push	{r4, r5, r6, lr}
 8018b66:	6803      	ldr	r3, [r0, #0]
 8018b68:	460c      	mov	r4, r1
 8018b6a:	2100      	movs	r1, #0
 8018b6c:	4605      	mov	r5, r0
 8018b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018b70:	4798      	blx	r3
 8018b72:	4606      	mov	r6, r0
 8018b74:	682b      	ldr	r3, [r5, #0]
 8018b76:	4628      	mov	r0, r5
 8018b78:	1ba4      	subs	r4, r4, r6
 8018b7a:	6a1b      	ldr	r3, [r3, #32]
 8018b7c:	b2a4      	uxth	r4, r4
 8018b7e:	4798      	blx	r3
 8018b80:	fbb4 f0f0 	udiv	r0, r4, r0
 8018b84:	bd70      	pop	{r4, r5, r6, pc}

08018b86 <_ZN8touchgfx17AbstractPartition5clearEv>:
 8018b86:	2300      	movs	r3, #0
 8018b88:	8083      	strh	r3, [r0, #4]
 8018b8a:	4770      	bx	lr

08018b8c <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8018b8c:	b510      	push	{r4, lr}
 8018b8e:	6803      	ldr	r3, [r0, #0]
 8018b90:	4604      	mov	r4, r0
 8018b92:	8881      	ldrh	r1, [r0, #4]
 8018b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018b96:	4798      	blx	r3
 8018b98:	88a3      	ldrh	r3, [r4, #4]
 8018b9a:	3301      	adds	r3, #1
 8018b9c:	80a3      	strh	r3, [r4, #4]
 8018b9e:	bd10      	pop	{r4, pc}

08018ba0 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8018ba0:	6803      	ldr	r3, [r0, #0]
 8018ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018ba4:	4718      	bx	r3

08018ba6 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8018ba6:	4770      	bx	lr

08018ba8 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8018ba8:	4a02      	ldr	r2, [pc, #8]	; (8018bb4 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 8018baa:	6002      	str	r2, [r0, #0]
 8018bac:	2200      	movs	r2, #0
 8018bae:	8082      	strh	r2, [r0, #4]
 8018bb0:	4770      	bx	lr
 8018bb2:	bf00      	nop
 8018bb4:	0802a940 	.word	0x0802a940

08018bb8 <_ZN8touchgfx9Container13getFirstChildEv>:
 8018bb8:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8018bba:	4770      	bx	lr

08018bbc <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8018bbc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8018bbe:	2000      	movs	r0, #0
 8018bc0:	b12b      	cbz	r3, 8018bce <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8018bc2:	b920      	cbnz	r0, 8018bce <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8018bc4:	1a5a      	subs	r2, r3, r1
 8018bc6:	699b      	ldr	r3, [r3, #24]
 8018bc8:	4250      	negs	r0, r2
 8018bca:	4150      	adcs	r0, r2
 8018bcc:	e7f8      	b.n	8018bc0 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 8018bce:	4770      	bx	lr

08018bd0 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8018bd0:	2300      	movs	r3, #0
 8018bd2:	6148      	str	r0, [r1, #20]
 8018bd4:	618b      	str	r3, [r1, #24]
 8018bd6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8018bd8:	b913      	cbnz	r3, 8018be0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 8018bda:	6281      	str	r1, [r0, #40]	; 0x28
 8018bdc:	4770      	bx	lr
 8018bde:	4613      	mov	r3, r2
 8018be0:	699a      	ldr	r2, [r3, #24]
 8018be2:	2a00      	cmp	r2, #0
 8018be4:	d1fb      	bne.n	8018bde <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 8018be6:	6199      	str	r1, [r3, #24]
 8018be8:	4770      	bx	lr

08018bea <_ZN8touchgfx9Container9removeAllEv>:
 8018bea:	2200      	movs	r2, #0
 8018bec:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8018bee:	b123      	cbz	r3, 8018bfa <_ZN8touchgfx9Container9removeAllEv+0x10>
 8018bf0:	6999      	ldr	r1, [r3, #24]
 8018bf2:	6281      	str	r1, [r0, #40]	; 0x28
 8018bf4:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8018bf8:	e7f8      	b.n	8018bec <_ZN8touchgfx9Container9removeAllEv+0x2>
 8018bfa:	4770      	bx	lr

08018bfc <_ZN8touchgfx9Container6unlinkEv>:
 8018bfc:	2300      	movs	r3, #0
 8018bfe:	6283      	str	r3, [r0, #40]	; 0x28
 8018c00:	4770      	bx	lr

08018c02 <_ZNK8touchgfx9Container12getSolidRectEv>:
 8018c02:	2200      	movs	r2, #0
 8018c04:	8002      	strh	r2, [r0, #0]
 8018c06:	8042      	strh	r2, [r0, #2]
 8018c08:	8082      	strh	r2, [r0, #4]
 8018c0a:	80c2      	strh	r2, [r0, #6]
 8018c0c:	4770      	bx	lr

08018c0e <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8018c0e:	b570      	push	{r4, r5, r6, lr}
 8018c10:	460d      	mov	r5, r1
 8018c12:	4616      	mov	r6, r2
 8018c14:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8018c16:	b13c      	cbz	r4, 8018c28 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8018c18:	6823      	ldr	r3, [r4, #0]
 8018c1a:	4620      	mov	r0, r4
 8018c1c:	4632      	mov	r2, r6
 8018c1e:	4629      	mov	r1, r5
 8018c20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018c22:	4798      	blx	r3
 8018c24:	69a4      	ldr	r4, [r4, #24]
 8018c26:	e7f6      	b.n	8018c16 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8018c28:	bd70      	pop	{r4, r5, r6, pc}

08018c2a <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8018c2a:	b538      	push	{r3, r4, r5, lr}
 8018c2c:	460d      	mov	r5, r1
 8018c2e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8018c30:	b134      	cbz	r4, 8018c40 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8018c32:	682b      	ldr	r3, [r5, #0]
 8018c34:	4621      	mov	r1, r4
 8018c36:	4628      	mov	r0, r5
 8018c38:	689b      	ldr	r3, [r3, #8]
 8018c3a:	4798      	blx	r3
 8018c3c:	69a4      	ldr	r4, [r4, #24]
 8018c3e:	e7f7      	b.n	8018c30 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8018c40:	bd38      	pop	{r3, r4, r5, pc}

08018c42 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8018c42:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8018c44:	b19b      	cbz	r3, 8018c6e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8018c46:	428b      	cmp	r3, r1
 8018c48:	d109      	bne.n	8018c5e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8018c4a:	699a      	ldr	r2, [r3, #24]
 8018c4c:	2100      	movs	r1, #0
 8018c4e:	6159      	str	r1, [r3, #20]
 8018c50:	6282      	str	r2, [r0, #40]	; 0x28
 8018c52:	b902      	cbnz	r2, 8018c56 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8018c54:	4770      	bx	lr
 8018c56:	6199      	str	r1, [r3, #24]
 8018c58:	4770      	bx	lr
 8018c5a:	4613      	mov	r3, r2
 8018c5c:	b13a      	cbz	r2, 8018c6e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8018c5e:	699a      	ldr	r2, [r3, #24]
 8018c60:	428a      	cmp	r2, r1
 8018c62:	d1fa      	bne.n	8018c5a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8018c64:	698a      	ldr	r2, [r1, #24]
 8018c66:	619a      	str	r2, [r3, #24]
 8018c68:	2300      	movs	r3, #0
 8018c6a:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8018c6e:	4770      	bx	lr

08018c70 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8018c70:	b410      	push	{r4}
 8018c72:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8018c74:	4604      	mov	r4, r0
 8018c76:	b92b      	cbnz	r3, 8018c84 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8018c78:	6803      	ldr	r3, [r0, #0]
 8018c7a:	4611      	mov	r1, r2
 8018c7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018c80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8018c82:	4718      	bx	r3
 8018c84:	b941      	cbnz	r1, 8018c98 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8018c86:	6193      	str	r3, [r2, #24]
 8018c88:	6282      	str	r2, [r0, #40]	; 0x28
 8018c8a:	6154      	str	r4, [r2, #20]
 8018c8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018c90:	4770      	bx	lr
 8018c92:	4603      	mov	r3, r0
 8018c94:	2800      	cmp	r0, #0
 8018c96:	d0f9      	beq.n	8018c8c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8018c98:	4299      	cmp	r1, r3
 8018c9a:	6998      	ldr	r0, [r3, #24]
 8018c9c:	d1f9      	bne.n	8018c92 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 8018c9e:	6190      	str	r0, [r2, #24]
 8018ca0:	618a      	str	r2, [r1, #24]
 8018ca2:	e7f2      	b.n	8018c8a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

08018ca4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8018ca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018ca8:	461f      	mov	r7, r3
 8018caa:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8018cae:	460d      	mov	r5, r1
 8018cb0:	4616      	mov	r6, r2
 8018cb2:	b103      	cbz	r3, 8018cb6 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8018cb4:	6038      	str	r0, [r7, #0]
 8018cb6:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8018cb8:	b314      	cbz	r4, 8018d00 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8018cba:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8018cbe:	b1eb      	cbz	r3, 8018cfc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8018cc0:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8018cc4:	428d      	cmp	r5, r1
 8018cc6:	db19      	blt.n	8018cfc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8018cc8:	b289      	uxth	r1, r1
 8018cca:	8923      	ldrh	r3, [r4, #8]
 8018ccc:	440b      	add	r3, r1
 8018cce:	b21b      	sxth	r3, r3
 8018cd0:	429d      	cmp	r5, r3
 8018cd2:	da13      	bge.n	8018cfc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8018cd4:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8018cd8:	4296      	cmp	r6, r2
 8018cda:	db0f      	blt.n	8018cfc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8018cdc:	b292      	uxth	r2, r2
 8018cde:	8963      	ldrh	r3, [r4, #10]
 8018ce0:	4413      	add	r3, r2
 8018ce2:	b21b      	sxth	r3, r3
 8018ce4:	429e      	cmp	r6, r3
 8018ce6:	da09      	bge.n	8018cfc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8018ce8:	6823      	ldr	r3, [r4, #0]
 8018cea:	1ab2      	subs	r2, r6, r2
 8018cec:	1a69      	subs	r1, r5, r1
 8018cee:	4620      	mov	r0, r4
 8018cf0:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
 8018cf4:	b212      	sxth	r2, r2
 8018cf6:	463b      	mov	r3, r7
 8018cf8:	b209      	sxth	r1, r1
 8018cfa:	47c0      	blx	r8
 8018cfc:	69a4      	ldr	r4, [r4, #24]
 8018cfe:	e7db      	b.n	8018cb8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8018d00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018d04 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 8018d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018d08:	4c6d      	ldr	r4, [pc, #436]	; (8018ec0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 8018d0a:	b0a1      	sub	sp, #132	; 0x84
 8018d0c:	4606      	mov	r6, r0
 8018d0e:	6824      	ldr	r4, [r4, #0]
 8018d10:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 8018d12:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 8018d16:	2400      	movs	r4, #0
 8018d18:	9303      	str	r3, [sp, #12]
 8018d1a:	802c      	strh	r4, [r5, #0]
 8018d1c:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 8018d1e:	802c      	strh	r4, [r5, #0]
 8018d20:	601c      	str	r4, [r3, #0]
 8018d22:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8018d26:	f7ff ffbd 	bl	8018ca4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8018d2a:	f1b9 0f03 	cmp.w	r9, #3
 8018d2e:	f340 80c1 	ble.w	8018eb4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 8018d32:	4631      	mov	r1, r6
 8018d34:	a80c      	add	r0, sp, #48	; 0x30
 8018d36:	f003 fda3 	bl	801c880 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018d3a:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8018d3e:	9306      	str	r3, [sp, #24]
 8018d40:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8018d44:	9307      	str	r3, [sp, #28]
 8018d46:	9b03      	ldr	r3, [sp, #12]
 8018d48:	f8d3 a000 	ldr.w	sl, [r3]
 8018d4c:	f1ba 0f00 	cmp.w	sl, #0
 8018d50:	f000 80b3 	beq.w	8018eba <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 8018d54:	4651      	mov	r1, sl
 8018d56:	a810      	add	r0, sp, #64	; 0x40
 8018d58:	f003 fd92 	bl	801c880 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018d5c:	2002      	movs	r0, #2
 8018d5e:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 8018d62:	9b01      	ldr	r3, [sp, #4]
 8018d64:	9a06      	ldr	r2, [sp, #24]
 8018d66:	fb91 f1f0 	sdiv	r1, r1, r0
 8018d6a:	189d      	adds	r5, r3, r2
 8018d6c:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 8018d70:	9a07      	ldr	r2, [sp, #28]
 8018d72:	4419      	add	r1, r3
 8018d74:	9b02      	ldr	r3, [sp, #8]
 8018d76:	4413      	add	r3, r2
 8018d78:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 8018d7c:	1a6d      	subs	r5, r5, r1
 8018d7e:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 8018d82:	fb92 f2f0 	sdiv	r2, r2, r0
 8018d86:	440a      	add	r2, r1
 8018d88:	1a9b      	subs	r3, r3, r2
 8018d8a:	435b      	muls	r3, r3
 8018d8c:	fb05 3505 	mla	r5, r5, r5, r3
 8018d90:	4f4c      	ldr	r7, [pc, #304]	; (8018ec4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 8018d92:	ac10      	add	r4, sp, #64	; 0x40
 8018d94:	f1b9 0f0c 	cmp.w	r9, #12
 8018d98:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8018d9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018d9c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8018d9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018da0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8018da2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018da4:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8018da8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8018dac:	f04f 0303 	mov.w	r3, #3
 8018db0:	bfd8      	it	le
 8018db2:	f109 32ff 	addle.w	r2, r9, #4294967295
 8018db6:	f04f 0400 	mov.w	r4, #0
 8018dba:	f8cd 9000 	str.w	r9, [sp]
 8018dbe:	bfcc      	ite	gt
 8018dc0:	4698      	movgt	r8, r3
 8018dc2:	fb92 f8f3 	sdivle	r8, r2, r3
 8018dc6:	1c63      	adds	r3, r4, #1
 8018dc8:	aa10      	add	r2, sp, #64	; 0x40
 8018dca:	f004 0401 	and.w	r4, r4, #1
 8018dce:	f04f 0b00 	mov.w	fp, #0
 8018dd2:	9308      	str	r3, [sp, #32]
 8018dd4:	9b00      	ldr	r3, [sp, #0]
 8018dd6:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 8018dda:	fb93 f3f8 	sdiv	r3, r3, r8
 8018dde:	3404      	adds	r4, #4
 8018de0:	b29b      	uxth	r3, r3
 8018de2:	9304      	str	r3, [sp, #16]
 8018de4:	9a04      	ldr	r2, [sp, #16]
 8018de6:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8018dea:	fb13 f302 	smulbb	r3, r3, r2
 8018dee:	9a01      	ldr	r2, [sp, #4]
 8018df0:	b29b      	uxth	r3, r3
 8018df2:	1899      	adds	r1, r3, r2
 8018df4:	9305      	str	r3, [sp, #20]
 8018df6:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8018dfa:	b209      	sxth	r1, r1
 8018dfc:	4299      	cmp	r1, r3
 8018dfe:	db4d      	blt.n	8018e9c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8018e00:	8932      	ldrh	r2, [r6, #8]
 8018e02:	4413      	add	r3, r2
 8018e04:	b21b      	sxth	r3, r3
 8018e06:	4299      	cmp	r1, r3
 8018e08:	da48      	bge.n	8018e9c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8018e0a:	9b04      	ldr	r3, [sp, #16]
 8018e0c:	6827      	ldr	r7, [r4, #0]
 8018e0e:	fb17 f703 	smulbb	r7, r7, r3
 8018e12:	9b02      	ldr	r3, [sp, #8]
 8018e14:	b2bf      	uxth	r7, r7
 8018e16:	18fa      	adds	r2, r7, r3
 8018e18:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8018e1c:	b212      	sxth	r2, r2
 8018e1e:	429a      	cmp	r2, r3
 8018e20:	db3c      	blt.n	8018e9c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8018e22:	8970      	ldrh	r0, [r6, #10]
 8018e24:	4403      	add	r3, r0
 8018e26:	b21b      	sxth	r3, r3
 8018e28:	429a      	cmp	r2, r3
 8018e2a:	da37      	bge.n	8018e9c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8018e2c:	2300      	movs	r3, #0
 8018e2e:	4630      	mov	r0, r6
 8018e30:	930b      	str	r3, [sp, #44]	; 0x2c
 8018e32:	ab0b      	add	r3, sp, #44	; 0x2c
 8018e34:	f7ff ff36 	bl	8018ca4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8018e38:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8018e3a:	b37a      	cbz	r2, 8018e9c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8018e3c:	4552      	cmp	r2, sl
 8018e3e:	d02d      	beq.n	8018e9c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8018e40:	4611      	mov	r1, r2
 8018e42:	a80e      	add	r0, sp, #56	; 0x38
 8018e44:	9209      	str	r2, [sp, #36]	; 0x24
 8018e46:	f003 fd1b 	bl	801c880 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018e4a:	f04f 0e02 	mov.w	lr, #2
 8018e4e:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 8018e52:	9a06      	ldr	r2, [sp, #24]
 8018e54:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 8018e58:	9b01      	ldr	r3, [sp, #4]
 8018e5a:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 8018e5e:	4413      	add	r3, r2
 8018e60:	9a07      	ldr	r2, [sp, #28]
 8018e62:	fb91 f1fe 	sdiv	r1, r1, lr
 8018e66:	fb9c fcfe 	sdiv	ip, ip, lr
 8018e6a:	4401      	add	r1, r0
 8018e6c:	1a58      	subs	r0, r3, r1
 8018e6e:	9b02      	ldr	r3, [sp, #8]
 8018e70:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 8018e74:	4413      	add	r3, r2
 8018e76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018e78:	448c      	add	ip, r1
 8018e7a:	eba3 030c 	sub.w	r3, r3, ip
 8018e7e:	435b      	muls	r3, r3
 8018e80:	fb00 3300 	mla	r3, r0, r0, r3
 8018e84:	42ab      	cmp	r3, r5
 8018e86:	d208      	bcs.n	8018e9a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 8018e88:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8018e8a:	461d      	mov	r5, r3
 8018e8c:	9803      	ldr	r0, [sp, #12]
 8018e8e:	6001      	str	r1, [r0, #0]
 8018e90:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8018e92:	9805      	ldr	r0, [sp, #20]
 8018e94:	8008      	strh	r0, [r1, #0]
 8018e96:	992b      	ldr	r1, [sp, #172]	; 0xac
 8018e98:	800f      	strh	r7, [r1, #0]
 8018e9a:	4692      	mov	sl, r2
 8018e9c:	f10b 0b01 	add.w	fp, fp, #1
 8018ea0:	3408      	adds	r4, #8
 8018ea2:	f1bb 0f04 	cmp.w	fp, #4
 8018ea6:	d19d      	bne.n	8018de4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 8018ea8:	9b00      	ldr	r3, [sp, #0]
 8018eaa:	9c08      	ldr	r4, [sp, #32]
 8018eac:	444b      	add	r3, r9
 8018eae:	4544      	cmp	r4, r8
 8018eb0:	9300      	str	r3, [sp, #0]
 8018eb2:	d188      	bne.n	8018dc6 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 8018eb4:	b021      	add	sp, #132	; 0x84
 8018eb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018eba:	f04f 35ff 	mov.w	r5, #4294967295
 8018ebe:	e767      	b.n	8018d90 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 8018ec0:	2402617c 	.word	0x2402617c
 8018ec4:	080296f0 	.word	0x080296f0

08018ec8 <_ZN8touchgfx4RectaNERKS0_>:
 8018ec8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018ecc:	f9b1 7000 	ldrsh.w	r7, [r1]
 8018ed0:	888c      	ldrh	r4, [r1, #4]
 8018ed2:	f9b0 9000 	ldrsh.w	r9, [r0]
 8018ed6:	443c      	add	r4, r7
 8018ed8:	b2a4      	uxth	r4, r4
 8018eda:	fa0f f884 	sxth.w	r8, r4
 8018ede:	45c1      	cmp	r9, r8
 8018ee0:	da2f      	bge.n	8018f42 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8018ee2:	8882      	ldrh	r2, [r0, #4]
 8018ee4:	444a      	add	r2, r9
 8018ee6:	b292      	uxth	r2, r2
 8018ee8:	fa0f fe82 	sxth.w	lr, r2
 8018eec:	4577      	cmp	r7, lr
 8018eee:	da28      	bge.n	8018f42 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8018ef0:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8018ef4:	88cb      	ldrh	r3, [r1, #6]
 8018ef6:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8018efa:	442b      	add	r3, r5
 8018efc:	b21b      	sxth	r3, r3
 8018efe:	429e      	cmp	r6, r3
 8018f00:	da1f      	bge.n	8018f42 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8018f02:	88c3      	ldrh	r3, [r0, #6]
 8018f04:	4433      	add	r3, r6
 8018f06:	b29b      	uxth	r3, r3
 8018f08:	fa0f fc83 	sxth.w	ip, r3
 8018f0c:	4565      	cmp	r5, ip
 8018f0e:	da18      	bge.n	8018f42 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8018f10:	454f      	cmp	r7, r9
 8018f12:	bfb8      	it	lt
 8018f14:	464f      	movlt	r7, r9
 8018f16:	42b5      	cmp	r5, r6
 8018f18:	bfb8      	it	lt
 8018f1a:	4635      	movlt	r5, r6
 8018f1c:	45f0      	cmp	r8, lr
 8018f1e:	bfd8      	it	le
 8018f20:	4622      	movle	r2, r4
 8018f22:	1bd2      	subs	r2, r2, r7
 8018f24:	8082      	strh	r2, [r0, #4]
 8018f26:	884a      	ldrh	r2, [r1, #2]
 8018f28:	88c9      	ldrh	r1, [r1, #6]
 8018f2a:	8007      	strh	r7, [r0, #0]
 8018f2c:	440a      	add	r2, r1
 8018f2e:	8045      	strh	r5, [r0, #2]
 8018f30:	b292      	uxth	r2, r2
 8018f32:	b211      	sxth	r1, r2
 8018f34:	458c      	cmp	ip, r1
 8018f36:	bfa8      	it	ge
 8018f38:	4613      	movge	r3, r2
 8018f3a:	1b5b      	subs	r3, r3, r5
 8018f3c:	80c3      	strh	r3, [r0, #6]
 8018f3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018f42:	2300      	movs	r3, #0
 8018f44:	8003      	strh	r3, [r0, #0]
 8018f46:	8043      	strh	r3, [r0, #2]
 8018f48:	8083      	strh	r3, [r0, #4]
 8018f4a:	80c3      	strh	r3, [r0, #6]
 8018f4c:	e7f7      	b.n	8018f3e <_ZN8touchgfx4RectaNERKS0_+0x76>

08018f4e <_ZNK8touchgfx4Rect7isEmptyEv>:
 8018f4e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8018f52:	2b00      	cmp	r3, #0
 8018f54:	dd06      	ble.n	8018f64 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 8018f56:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8018f5a:	2800      	cmp	r0, #0
 8018f5c:	bfcc      	ite	gt
 8018f5e:	2000      	movgt	r0, #0
 8018f60:	2001      	movle	r0, #1
 8018f62:	4770      	bx	lr
 8018f64:	2001      	movs	r0, #1
 8018f66:	4770      	bx	lr

08018f68 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8018f68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018f6c:	2300      	movs	r3, #0
 8018f6e:	4604      	mov	r4, r0
 8018f70:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8018f72:	8003      	strh	r3, [r0, #0]
 8018f74:	8043      	strh	r3, [r0, #2]
 8018f76:	8083      	strh	r3, [r0, #4]
 8018f78:	80c3      	strh	r3, [r0, #6]
 8018f7a:	2d00      	cmp	r5, #0
 8018f7c:	d040      	beq.n	8019000 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 8018f7e:	1d28      	adds	r0, r5, #4
 8018f80:	f7ff ffe5 	bl	8018f4e <_ZNK8touchgfx4Rect7isEmptyEv>
 8018f84:	b988      	cbnz	r0, 8018faa <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8018f86:	4620      	mov	r0, r4
 8018f88:	f7ff ffe1 	bl	8018f4e <_ZNK8touchgfx4Rect7isEmptyEv>
 8018f8c:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8018f90:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8018f94:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8018f98:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8018f9c:	b138      	cbz	r0, 8018fae <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 8018f9e:	8022      	strh	r2, [r4, #0]
 8018fa0:	8063      	strh	r3, [r4, #2]
 8018fa2:	f8a4 e004 	strh.w	lr, [r4, #4]
 8018fa6:	f8a4 c006 	strh.w	ip, [r4, #6]
 8018faa:	69ad      	ldr	r5, [r5, #24]
 8018fac:	e7e5      	b.n	8018f7a <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 8018fae:	f9b4 0000 	ldrsh.w	r0, [r4]
 8018fb2:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8018fb6:	4290      	cmp	r0, r2
 8018fb8:	4607      	mov	r7, r0
 8018fba:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 8018fbe:	460e      	mov	r6, r1
 8018fc0:	bfa8      	it	ge
 8018fc2:	4617      	movge	r7, r2
 8018fc4:	4299      	cmp	r1, r3
 8018fc6:	4472      	add	r2, lr
 8018fc8:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8018fcc:	bfa8      	it	ge
 8018fce:	461e      	movge	r6, r3
 8018fd0:	4440      	add	r0, r8
 8018fd2:	4471      	add	r1, lr
 8018fd4:	4463      	add	r3, ip
 8018fd6:	b200      	sxth	r0, r0
 8018fd8:	8027      	strh	r7, [r4, #0]
 8018fda:	b212      	sxth	r2, r2
 8018fdc:	8066      	strh	r6, [r4, #2]
 8018fde:	b209      	sxth	r1, r1
 8018fe0:	b21b      	sxth	r3, r3
 8018fe2:	4290      	cmp	r0, r2
 8018fe4:	bfac      	ite	ge
 8018fe6:	ebc7 0200 	rsbge	r2, r7, r0
 8018fea:	ebc7 0202 	rsblt	r2, r7, r2
 8018fee:	4299      	cmp	r1, r3
 8018ff0:	bfac      	ite	ge
 8018ff2:	ebc6 0301 	rsbge	r3, r6, r1
 8018ff6:	ebc6 0303 	rsblt	r3, r6, r3
 8018ffa:	80a2      	strh	r2, [r4, #4]
 8018ffc:	80e3      	strh	r3, [r4, #6]
 8018ffe:	e7d4      	b.n	8018faa <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8019000:	4620      	mov	r0, r4
 8019002:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019006 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 8019006:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801900a:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 801900e:	b383      	cbz	r3, 8019072 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8019010:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8019012:	b374      	cbz	r4, 8019072 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8019014:	f9b1 5000 	ldrsh.w	r5, [r1]
 8019018:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 801901c:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8019020:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8019024:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8019028:	b303      	cbz	r3, 801906c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 801902a:	4668      	mov	r0, sp
 801902c:	1d21      	adds	r1, r4, #4
 801902e:	f8ad 5000 	strh.w	r5, [sp]
 8019032:	f8ad 6002 	strh.w	r6, [sp, #2]
 8019036:	f8ad 7004 	strh.w	r7, [sp, #4]
 801903a:	f8ad 8006 	strh.w	r8, [sp, #6]
 801903e:	f7ff ff43 	bl	8018ec8 <_ZN8touchgfx4RectaNERKS0_>
 8019042:	4668      	mov	r0, sp
 8019044:	f7ff ff83 	bl	8018f4e <_ZNK8touchgfx4Rect7isEmptyEv>
 8019048:	b980      	cbnz	r0, 801906c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 801904a:	f8bd 3000 	ldrh.w	r3, [sp]
 801904e:	4669      	mov	r1, sp
 8019050:	88a2      	ldrh	r2, [r4, #4]
 8019052:	4620      	mov	r0, r4
 8019054:	1a9b      	subs	r3, r3, r2
 8019056:	88e2      	ldrh	r2, [r4, #6]
 8019058:	f8ad 3000 	strh.w	r3, [sp]
 801905c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8019060:	1a9b      	subs	r3, r3, r2
 8019062:	f8ad 3002 	strh.w	r3, [sp, #2]
 8019066:	6823      	ldr	r3, [r4, #0]
 8019068:	689b      	ldr	r3, [r3, #8]
 801906a:	4798      	blx	r3
 801906c:	69a4      	ldr	r4, [r4, #24]
 801906e:	2c00      	cmp	r4, #0
 8019070:	d1d8      	bne.n	8019024 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 8019072:	b002      	add	sp, #8
 8019074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019078 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8019078:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801907a:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 801907e:	460d      	mov	r5, r1
 8019080:	4616      	mov	r6, r2
 8019082:	b323      	cbz	r3, 80190ce <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8019084:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8019086:	b314      	cbz	r4, 80190ce <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8019088:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 801908c:	b1eb      	cbz	r3, 80190ca <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 801908e:	6828      	ldr	r0, [r5, #0]
 8019090:	466b      	mov	r3, sp
 8019092:	6869      	ldr	r1, [r5, #4]
 8019094:	c303      	stmia	r3!, {r0, r1}
 8019096:	4668      	mov	r0, sp
 8019098:	1d21      	adds	r1, r4, #4
 801909a:	f7ff ff15 	bl	8018ec8 <_ZN8touchgfx4RectaNERKS0_>
 801909e:	4668      	mov	r0, sp
 80190a0:	f7ff ff55 	bl	8018f4e <_ZNK8touchgfx4Rect7isEmptyEv>
 80190a4:	b988      	cbnz	r0, 80190ca <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 80190a6:	f8bd 3000 	ldrh.w	r3, [sp]
 80190aa:	4669      	mov	r1, sp
 80190ac:	88a2      	ldrh	r2, [r4, #4]
 80190ae:	4620      	mov	r0, r4
 80190b0:	1a9b      	subs	r3, r3, r2
 80190b2:	88e2      	ldrh	r2, [r4, #6]
 80190b4:	f8ad 3000 	strh.w	r3, [sp]
 80190b8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80190bc:	1a9b      	subs	r3, r3, r2
 80190be:	4632      	mov	r2, r6
 80190c0:	f8ad 3002 	strh.w	r3, [sp, #2]
 80190c4:	6823      	ldr	r3, [r4, #0]
 80190c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80190c8:	4798      	blx	r3
 80190ca:	69a4      	ldr	r4, [r4, #24]
 80190cc:	e7db      	b.n	8019086 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 80190ce:	b002      	add	sp, #8
 80190d0:	bd70      	pop	{r4, r5, r6, pc}

080190d2 <_ZN8touchgfx3HAL15InvalidateCacheEv>:
 80190d2:	4770      	bx	lr

080190d4 <_ZN8touchgfx3HAL10FlushCacheEv>:
 80190d4:	4770      	bx	lr

080190d6 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 80190d6:	6803      	ldr	r3, [r0, #0]
 80190d8:	b513      	push	{r0, r1, r4, lr}
 80190da:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
 80190de:	2300      	movs	r3, #0
 80190e0:	e9cd 3300 	strd	r3, r3, [sp]
 80190e4:	466b      	mov	r3, sp
 80190e6:	47a0      	blx	r4
 80190e8:	b002      	add	sp, #8
 80190ea:	bd10      	pop	{r4, pc}

080190ec <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 80190ec:	2301      	movs	r3, #1
 80190ee:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 80190f2:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 80190f6:	4770      	bx	lr

080190f8 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 80190f8:	2301      	movs	r3, #1
 80190fa:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 80190fe:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8019102:	4770      	bx	lr

08019104 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8019104:	6843      	ldr	r3, [r0, #4]
 8019106:	2201      	movs	r2, #1
 8019108:	725a      	strb	r2, [r3, #9]
 801910a:	6840      	ldr	r0, [r0, #4]
 801910c:	6803      	ldr	r3, [r0, #0]
 801910e:	691b      	ldr	r3, [r3, #16]
 8019110:	4718      	bx	r3

08019112 <_ZN8touchgfx3HAL8flushDMAEv>:
 8019112:	6840      	ldr	r0, [r0, #4]
 8019114:	6803      	ldr	r3, [r0, #0]
 8019116:	689b      	ldr	r3, [r3, #8]
 8019118:	4718      	bx	r3

0801911a <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 801911a:	b530      	push	{r4, r5, lr}
 801911c:	b08b      	sub	sp, #44	; 0x2c
 801911e:	6804      	ldr	r4, [r0, #0]
 8019120:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 8019124:	9509      	str	r5, [sp, #36]	; 0x24
 8019126:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 801912a:	9508      	str	r5, [sp, #32]
 801912c:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 8019130:	9507      	str	r5, [sp, #28]
 8019132:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 8019136:	9506      	str	r5, [sp, #24]
 8019138:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 801913c:	9505      	str	r5, [sp, #20]
 801913e:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8019142:	9504      	str	r5, [sp, #16]
 8019144:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 8019148:	9503      	str	r5, [sp, #12]
 801914a:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 801914e:	9502      	str	r5, [sp, #8]
 8019150:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8019154:	e9cd 3500 	strd	r3, r5, [sp]
 8019158:	4613      	mov	r3, r2
 801915a:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 801915c:	2200      	movs	r2, #0
 801915e:	47a0      	blx	r4
 8019160:	b00b      	add	sp, #44	; 0x2c
 8019162:	bd30      	pop	{r4, r5, pc}

08019164 <_ZN8touchgfx3HAL10beginFrameEv>:
 8019164:	4b04      	ldr	r3, [pc, #16]	; (8019178 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8019166:	781b      	ldrb	r3, [r3, #0]
 8019168:	b123      	cbz	r3, 8019174 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 801916a:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 801916e:	f080 0001 	eor.w	r0, r0, #1
 8019172:	4770      	bx	lr
 8019174:	2001      	movs	r0, #1
 8019176:	4770      	bx	lr
 8019178:	2402617a 	.word	0x2402617a

0801917c <_ZN8touchgfx3HAL8endFrameEv>:
 801917c:	b510      	push	{r4, lr}
 801917e:	4604      	mov	r4, r0
 8019180:	6840      	ldr	r0, [r0, #4]
 8019182:	6803      	ldr	r3, [r0, #0]
 8019184:	689b      	ldr	r3, [r3, #8]
 8019186:	4798      	blx	r3
 8019188:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 801918c:	b113      	cbz	r3, 8019194 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 801918e:	2301      	movs	r3, #1
 8019190:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8019194:	bd10      	pop	{r4, pc}

08019196 <_ZN8touchgfx3HAL10initializeEv>:
 8019196:	b510      	push	{r4, lr}
 8019198:	4604      	mov	r4, r0
 801919a:	f7e9 f87d 	bl	8002298 <_ZN8touchgfx10OSWrappers10initializeEv>
 801919e:	f7e7 facb 	bl	8000738 <_ZN8touchgfx4GPIO4initEv>
 80191a2:	6860      	ldr	r0, [r4, #4]
 80191a4:	6803      	ldr	r3, [r0, #0]
 80191a6:	68db      	ldr	r3, [r3, #12]
 80191a8:	4798      	blx	r3
 80191aa:	68e0      	ldr	r0, [r4, #12]
 80191ac:	6803      	ldr	r3, [r0, #0]
 80191ae:	689b      	ldr	r3, [r3, #8]
 80191b0:	4798      	blx	r3
 80191b2:	6823      	ldr	r3, [r4, #0]
 80191b4:	4620      	mov	r0, r4
 80191b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80191b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80191bc:	4718      	bx	r3

080191be <_ZN8touchgfx3HAL9taskEntryEv>:
 80191be:	b508      	push	{r3, lr}
 80191c0:	6803      	ldr	r3, [r0, #0]
 80191c2:	4604      	mov	r4, r0
 80191c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80191c8:	4798      	blx	r3
 80191ca:	6823      	ldr	r3, [r4, #0]
 80191cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80191ce:	4620      	mov	r0, r4
 80191d0:	4798      	blx	r3
 80191d2:	f7e9 f8d7 	bl	8002384 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 80191d6:	6823      	ldr	r3, [r4, #0]
 80191d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80191da:	e7f8      	b.n	80191ce <_ZN8touchgfx3HAL9taskEntryEv+0x10>

080191dc <_ZN8touchgfx3HAL4tickEv>:
 80191dc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80191de:	6803      	ldr	r3, [r0, #0]
 80191e0:	4604      	mov	r4, r0
 80191e2:	4d5b      	ldr	r5, [pc, #364]	; (8019350 <_ZN8touchgfx3HAL4tickEv+0x174>)
 80191e4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80191e8:	4798      	blx	r3
 80191ea:	2800      	cmp	r0, #0
 80191ec:	f000 8095 	beq.w	801931a <_ZN8touchgfx3HAL4tickEv+0x13e>
 80191f0:	2001      	movs	r0, #1
 80191f2:	2600      	movs	r6, #0
 80191f4:	f7e7 fac6 	bl	8000784 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 80191f8:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 80191fc:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 8019200:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8019204:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 8019208:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 801920c:	b133      	cbz	r3, 801921c <_ZN8touchgfx3HAL4tickEv+0x40>
 801920e:	6823      	ldr	r3, [r4, #0]
 8019210:	4620      	mov	r0, r4
 8019212:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8019216:	4798      	blx	r3
 8019218:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 801921c:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8019220:	2601      	movs	r6, #1
 8019222:	6862      	ldr	r2, [r4, #4]
 8019224:	f083 0301 	eor.w	r3, r3, #1
 8019228:	702e      	strb	r6, [r5, #0]
 801922a:	7253      	strb	r3, [r2, #9]
 801922c:	f002 fa48 	bl	801b6c0 <_ZN8touchgfx11Application11getInstanceEv>
 8019230:	6803      	ldr	r3, [r0, #0]
 8019232:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019234:	4798      	blx	r3
 8019236:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 801923a:	b90b      	cbnz	r3, 8019240 <_ZN8touchgfx3HAL4tickEv+0x64>
 801923c:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 8019240:	f002 fa3e 	bl	801b6c0 <_ZN8touchgfx11Application11getInstanceEv>
 8019244:	6803      	ldr	r3, [r0, #0]
 8019246:	695b      	ldr	r3, [r3, #20]
 8019248:	4798      	blx	r3
 801924a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801924c:	6803      	ldr	r3, [r0, #0]
 801924e:	691b      	ldr	r3, [r3, #16]
 8019250:	4798      	blx	r3
 8019252:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8019256:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 801925a:	3b01      	subs	r3, #1
 801925c:	b2db      	uxtb	r3, r3
 801925e:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8019262:	b10a      	cbz	r2, 8019268 <_ZN8touchgfx3HAL4tickEv+0x8c>
 8019264:	2b00      	cmp	r3, #0
 8019266:	d1eb      	bne.n	8019240 <_ZN8touchgfx3HAL4tickEv+0x64>
 8019268:	4a3a      	ldr	r2, [pc, #232]	; (8019354 <_ZN8touchgfx3HAL4tickEv+0x178>)
 801926a:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 801926e:	7813      	ldrb	r3, [r2, #0]
 8019270:	3301      	adds	r3, #1
 8019272:	b25b      	sxtb	r3, r3
 8019274:	4299      	cmp	r1, r3
 8019276:	7013      	strb	r3, [r2, #0]
 8019278:	dc10      	bgt.n	801929c <_ZN8touchgfx3HAL4tickEv+0xc0>
 801927a:	2300      	movs	r3, #0
 801927c:	68e0      	ldr	r0, [r4, #12]
 801927e:	a902      	add	r1, sp, #8
 8019280:	7013      	strb	r3, [r2, #0]
 8019282:	aa03      	add	r2, sp, #12
 8019284:	6803      	ldr	r3, [r0, #0]
 8019286:	68db      	ldr	r3, [r3, #12]
 8019288:	4798      	blx	r3
 801928a:	6823      	ldr	r3, [r4, #0]
 801928c:	2800      	cmp	r0, #0
 801928e:	d050      	beq.n	8019332 <_ZN8touchgfx3HAL4tickEv+0x156>
 8019290:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8019294:	4620      	mov	r0, r4
 8019296:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801929a:	4798      	blx	r3
 801929c:	2300      	movs	r3, #0
 801929e:	6960      	ldr	r0, [r4, #20]
 80192a0:	f88d 3007 	strb.w	r3, [sp, #7]
 80192a4:	b158      	cbz	r0, 80192be <_ZN8touchgfx3HAL4tickEv+0xe2>
 80192a6:	6803      	ldr	r3, [r0, #0]
 80192a8:	f10d 0107 	add.w	r1, sp, #7
 80192ac:	68db      	ldr	r3, [r3, #12]
 80192ae:	4798      	blx	r3
 80192b0:	b128      	cbz	r0, 80192be <_ZN8touchgfx3HAL4tickEv+0xe2>
 80192b2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80192b4:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80192b8:	6803      	ldr	r3, [r0, #0]
 80192ba:	68db      	ldr	r3, [r3, #12]
 80192bc:	4798      	blx	r3
 80192be:	f104 001c 	add.w	r0, r4, #28
 80192c2:	f00c ff67 	bl	8026194 <_ZN8touchgfx8Gestures4tickEv>
 80192c6:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 80192ca:	b30b      	cbz	r3, 8019310 <_ZN8touchgfx3HAL4tickEv+0x134>
 80192cc:	6920      	ldr	r0, [r4, #16]
 80192ce:	6803      	ldr	r3, [r0, #0]
 80192d0:	691b      	ldr	r3, [r3, #16]
 80192d2:	4798      	blx	r3
 80192d4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80192d6:	4606      	mov	r6, r0
 80192d8:	b903      	cbnz	r3, 80192dc <_ZN8touchgfx3HAL4tickEv+0x100>
 80192da:	6720      	str	r0, [r4, #112]	; 0x70
 80192dc:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80192de:	4a1e      	ldr	r2, [pc, #120]	; (8019358 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 80192e0:	1af3      	subs	r3, r6, r3
 80192e2:	4293      	cmp	r3, r2
 80192e4:	d914      	bls.n	8019310 <_ZN8touchgfx3HAL4tickEv+0x134>
 80192e6:	6920      	ldr	r0, [r4, #16]
 80192e8:	6803      	ldr	r3, [r0, #0]
 80192ea:	699b      	ldr	r3, [r3, #24]
 80192ec:	4798      	blx	r3
 80192ee:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80192f0:	2264      	movs	r2, #100	; 0x64
 80192f2:	1af3      	subs	r3, r6, r3
 80192f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80192f8:	fbb0 f0f3 	udiv	r0, r0, r3
 80192fc:	2800      	cmp	r0, #0
 80192fe:	dc1d      	bgt.n	801933c <_ZN8touchgfx3HAL4tickEv+0x160>
 8019300:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 8019304:	6920      	ldr	r0, [r4, #16]
 8019306:	2100      	movs	r1, #0
 8019308:	6803      	ldr	r3, [r0, #0]
 801930a:	69db      	ldr	r3, [r3, #28]
 801930c:	4798      	blx	r3
 801930e:	6726      	str	r6, [r4, #112]	; 0x70
 8019310:	f002 f9d6 	bl	801b6c0 <_ZN8touchgfx11Application11getInstanceEv>
 8019314:	6803      	ldr	r3, [r0, #0]
 8019316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019318:	4798      	blx	r3
 801931a:	6823      	ldr	r3, [r4, #0]
 801931c:	4620      	mov	r0, r4
 801931e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8019322:	4798      	blx	r3
 8019324:	2001      	movs	r0, #1
 8019326:	f7e7 fa8b 	bl	8000840 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 801932a:	2300      	movs	r3, #0
 801932c:	702b      	strb	r3, [r5, #0]
 801932e:	b004      	add	sp, #16
 8019330:	bd70      	pop	{r4, r5, r6, pc}
 8019332:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8019336:	4620      	mov	r0, r4
 8019338:	4798      	blx	r3
 801933a:	e7af      	b.n	801929c <_ZN8touchgfx3HAL4tickEv+0xc0>
 801933c:	2863      	cmp	r0, #99	; 0x63
 801933e:	bfcb      	itete	gt
 8019340:	2300      	movgt	r3, #0
 8019342:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 8019346:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 801934a:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 801934e:	e7d9      	b.n	8019304 <_ZN8touchgfx3HAL4tickEv+0x128>
 8019350:	24026180 	.word	0x24026180
 8019354:	24026181 	.word	0x24026181
 8019358:	05f5e100 	.word	0x05f5e100

0801935c <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 801935c:	f7e8 bfde 	b.w	800231c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08019360 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8019360:	6581      	str	r1, [r0, #88]	; 0x58
 8019362:	301c      	adds	r0, #28
 8019364:	f00c bf14 	b.w	8026190 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08019368 <_ZN8touchgfx3HAL5touchEll>:
 8019368:	b530      	push	{r4, r5, lr}
 801936a:	b087      	sub	sp, #28
 801936c:	4604      	mov	r4, r0
 801936e:	a804      	add	r0, sp, #16
 8019370:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8019374:	f001 ff92 	bl	801b29c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8019378:	9b04      	ldr	r3, [sp, #16]
 801937a:	a906      	add	r1, sp, #24
 801937c:	a803      	add	r0, sp, #12
 801937e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8019382:	9b05      	ldr	r3, [sp, #20]
 8019384:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8019388:	f001 ffda 	bl	801b340 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 801938c:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 8019390:	f104 001c 	add.w	r0, r4, #28
 8019394:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8019398:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 801939c:	b189      	cbz	r1, 80193c2 <_ZN8touchgfx3HAL5touchEll+0x5a>
 801939e:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 80193a2:	9300      	str	r3, [sp, #0]
 80193a4:	4613      	mov	r3, r2
 80193a6:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80193aa:	462a      	mov	r2, r5
 80193ac:	f00c ff00 	bl	80261b0 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 80193b0:	b128      	cbz	r0, 80193be <_ZN8touchgfx3HAL5touchEll+0x56>
 80193b2:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80193b6:	65e3      	str	r3, [r4, #92]	; 0x5c
 80193b8:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80193bc:	6623      	str	r3, [r4, #96]	; 0x60
 80193be:	b007      	add	sp, #28
 80193c0:	bd30      	pop	{r4, r5, pc}
 80193c2:	f00c ff35 	bl	8026230 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80193c6:	2301      	movs	r3, #1
 80193c8:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 80193cc:	e7f1      	b.n	80193b2 <_ZN8touchgfx3HAL5touchEll+0x4a>

080193ce <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 80193ce:	b510      	push	{r4, lr}
 80193d0:	2b00      	cmp	r3, #0
 80193d2:	d046      	beq.n	8019462 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 80193d4:	ea81 0002 	eor.w	r0, r1, r2
 80193d8:	07c4      	lsls	r4, r0, #31
 80193da:	d508      	bpl.n	80193ee <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 80193dc:	440b      	add	r3, r1
 80193de:	3a01      	subs	r2, #1
 80193e0:	428b      	cmp	r3, r1
 80193e2:	d93e      	bls.n	8019462 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 80193e4:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80193e8:	f801 0b01 	strb.w	r0, [r1], #1
 80193ec:	e7f8      	b.n	80193e0 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 80193ee:	07d0      	lsls	r0, r2, #31
 80193f0:	bf42      	ittt	mi
 80193f2:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 80193f6:	f103 33ff 	addmi.w	r3, r3, #4294967295
 80193fa:	f801 0b01 	strbmi.w	r0, [r1], #1
 80193fe:	2b01      	cmp	r3, #1
 8019400:	d911      	bls.n	8019426 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8019402:	ea81 0402 	eor.w	r4, r1, r2
 8019406:	4610      	mov	r0, r2
 8019408:	07a4      	lsls	r4, r4, #30
 801940a:	d022      	beq.n	8019452 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 801940c:	f023 0401 	bic.w	r4, r3, #1
 8019410:	440c      	add	r4, r1
 8019412:	428c      	cmp	r4, r1
 8019414:	4602      	mov	r2, r0
 8019416:	d904      	bls.n	8019422 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 8019418:	8812      	ldrh	r2, [r2, #0]
 801941a:	3002      	adds	r0, #2
 801941c:	f821 2b02 	strh.w	r2, [r1], #2
 8019420:	e7f7      	b.n	8019412 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 8019422:	f003 0301 	and.w	r3, r3, #1
 8019426:	f023 0003 	bic.w	r0, r3, #3
 801942a:	4408      	add	r0, r1
 801942c:	4288      	cmp	r0, r1
 801942e:	4614      	mov	r4, r2
 8019430:	d904      	bls.n	801943c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 8019432:	6824      	ldr	r4, [r4, #0]
 8019434:	3204      	adds	r2, #4
 8019436:	f841 4b04 	str.w	r4, [r1], #4
 801943a:	e7f7      	b.n	801942c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 801943c:	f003 0303 	and.w	r3, r3, #3
 8019440:	3a01      	subs	r2, #1
 8019442:	440b      	add	r3, r1
 8019444:	428b      	cmp	r3, r1
 8019446:	d90c      	bls.n	8019462 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8019448:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 801944c:	f801 0b01 	strb.w	r0, [r1], #1
 8019450:	e7f8      	b.n	8019444 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 8019452:	0790      	lsls	r0, r2, #30
 8019454:	d0e7      	beq.n	8019426 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8019456:	f832 0b02 	ldrh.w	r0, [r2], #2
 801945a:	3b02      	subs	r3, #2
 801945c:	f821 0b02 	strh.w	r0, [r1], #2
 8019460:	e7e1      	b.n	8019426 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8019462:	2001      	movs	r0, #1
 8019464:	bd10      	pop	{r4, pc}

08019466 <_ZN8touchgfx3HAL7noTouchEv>:
 8019466:	b510      	push	{r4, lr}
 8019468:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 801946c:	4604      	mov	r4, r0
 801946e:	b153      	cbz	r3, 8019486 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8019470:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 8019474:	2101      	movs	r1, #1
 8019476:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 801947a:	301c      	adds	r0, #28
 801947c:	f00c fed8 	bl	8026230 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8019480:	2300      	movs	r3, #0
 8019482:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8019486:	bd10      	pop	{r4, pc}

08019488 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8019488:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801948c:	b085      	sub	sp, #20
 801948e:	4604      	mov	r4, r0
 8019490:	2000      	movs	r0, #0
 8019492:	4699      	mov	r9, r3
 8019494:	ad04      	add	r5, sp, #16
 8019496:	460f      	mov	r7, r1
 8019498:	4690      	mov	r8, r2
 801949a:	f845 0d04 	str.w	r0, [r5, #-4]!
 801949e:	69a0      	ldr	r0, [r4, #24]
 80194a0:	6806      	ldr	r6, [r0, #0]
 80194a2:	9501      	str	r5, [sp, #4]
 80194a4:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 80194a8:	9500      	str	r5, [sp, #0]
 80194aa:	6835      	ldr	r5, [r6, #0]
 80194ac:	47a8      	blx	r5
 80194ae:	4d10      	ldr	r5, [pc, #64]	; (80194f0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 80194b0:	4606      	mov	r6, r0
 80194b2:	f8a5 9000 	strh.w	r9, [r5]
 80194b6:	f7ea fd15 	bl	8003ee4 <_ZN8touchgfx3HAL3lcdEv>
 80194ba:	6803      	ldr	r3, [r0, #0]
 80194bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80194be:	4798      	blx	r3
 80194c0:	b128      	cbz	r0, 80194ce <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 80194c2:	2801      	cmp	r0, #1
 80194c4:	d00b      	beq.n	80194de <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 80194c6:	4630      	mov	r0, r6
 80194c8:	b005      	add	sp, #20
 80194ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80194ce:	882b      	ldrh	r3, [r5, #0]
 80194d0:	fb08 7203 	mla	r2, r8, r3, r7
 80194d4:	9b03      	ldr	r3, [sp, #12]
 80194d6:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 80194da:	63e3      	str	r3, [r4, #60]	; 0x3c
 80194dc:	e7f3      	b.n	80194c6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 80194de:	882a      	ldrh	r2, [r5, #0]
 80194e0:	9b03      	ldr	r3, [sp, #12]
 80194e2:	fb08 7202 	mla	r2, r8, r2, r7
 80194e6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80194ea:	1a9a      	subs	r2, r3, r2
 80194ec:	63e2      	str	r2, [r4, #60]	; 0x3c
 80194ee:	e7ea      	b.n	80194c6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 80194f0:	24026176 	.word	0x24026176

080194f4 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 80194f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80194f6:	b08b      	sub	sp, #44	; 0x2c
 80194f8:	4617      	mov	r7, r2
 80194fa:	4604      	mov	r4, r0
 80194fc:	460e      	mov	r6, r1
 80194fe:	461d      	mov	r5, r3
 8019500:	f7ea fcf0 	bl	8003ee4 <_ZN8touchgfx3HAL3lcdEv>
 8019504:	6803      	ldr	r3, [r0, #0]
 8019506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019508:	4798      	blx	r3
 801950a:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 801950e:	9007      	str	r0, [sp, #28]
 8019510:	4631      	mov	r1, r6
 8019512:	6822      	ldr	r2, [r4, #0]
 8019514:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8019518:	4b0c      	ldr	r3, [pc, #48]	; (801954c <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 801951a:	4620      	mov	r0, r4
 801951c:	881b      	ldrh	r3, [r3, #0]
 801951e:	9306      	str	r3, [sp, #24]
 8019520:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8019524:	9305      	str	r3, [sp, #20]
 8019526:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 801952a:	9304      	str	r3, [sp, #16]
 801952c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8019530:	9303      	str	r3, [sp, #12]
 8019532:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8019536:	9302      	str	r3, [sp, #8]
 8019538:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801953c:	e9cd 5300 	strd	r5, r3, [sp]
 8019540:	463b      	mov	r3, r7
 8019542:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 8019544:	2200      	movs	r2, #0
 8019546:	47a8      	blx	r5
 8019548:	b00b      	add	sp, #44	; 0x2c
 801954a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801954c:	24026176 	.word	0x24026176

08019550 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 8019550:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019554:	4698      	mov	r8, r3
 8019556:	6803      	ldr	r3, [r0, #0]
 8019558:	b08b      	sub	sp, #44	; 0x2c
 801955a:	4617      	mov	r7, r2
 801955c:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 801955e:	460e      	mov	r6, r1
 8019560:	4b13      	ldr	r3, [pc, #76]	; (80195b0 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 8019562:	4604      	mov	r4, r0
 8019564:	f8b3 9000 	ldrh.w	r9, [r3]
 8019568:	f7ea fcbc 	bl	8003ee4 <_ZN8touchgfx3HAL3lcdEv>
 801956c:	6803      	ldr	r3, [r0, #0]
 801956e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019570:	4798      	blx	r3
 8019572:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8019576:	2200      	movs	r2, #0
 8019578:	4631      	mov	r1, r6
 801957a:	e9cd 0308 	strd	r0, r3, [sp, #32]
 801957e:	2302      	movs	r3, #2
 8019580:	4620      	mov	r0, r4
 8019582:	e9cd 9306 	strd	r9, r3, [sp, #24]
 8019586:	2301      	movs	r3, #1
 8019588:	9305      	str	r3, [sp, #20]
 801958a:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 801958e:	9304      	str	r3, [sp, #16]
 8019590:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8019594:	9303      	str	r3, [sp, #12]
 8019596:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 801959a:	9302      	str	r3, [sp, #8]
 801959c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80195a0:	e9cd 8300 	strd	r8, r3, [sp]
 80195a4:	463b      	mov	r3, r7
 80195a6:	47a8      	blx	r5
 80195a8:	b00b      	add	sp, #44	; 0x2c
 80195aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80195ae:	bf00      	nop
 80195b0:	24026176 	.word	0x24026176

080195b4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 80195b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80195b8:	4698      	mov	r8, r3
 80195ba:	6803      	ldr	r3, [r0, #0]
 80195bc:	b087      	sub	sp, #28
 80195be:	460e      	mov	r6, r1
 80195c0:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 80195c2:	4617      	mov	r7, r2
 80195c4:	4b0f      	ldr	r3, [pc, #60]	; (8019604 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 80195c6:	4604      	mov	r4, r0
 80195c8:	f8b3 9000 	ldrh.w	r9, [r3]
 80195cc:	f7ea fc8a 	bl	8003ee4 <_ZN8touchgfx3HAL3lcdEv>
 80195d0:	6803      	ldr	r3, [r0, #0]
 80195d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80195d4:	4798      	blx	r3
 80195d6:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 80195da:	463a      	mov	r2, r7
 80195dc:	4631      	mov	r1, r6
 80195de:	f8cd 900c 	str.w	r9, [sp, #12]
 80195e2:	e9cd 0304 	strd	r0, r3, [sp, #16]
 80195e6:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 80195ea:	4620      	mov	r0, r4
 80195ec:	9302      	str	r3, [sp, #8]
 80195ee:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 80195f2:	9301      	str	r3, [sp, #4]
 80195f4:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80195f8:	9300      	str	r3, [sp, #0]
 80195fa:	4643      	mov	r3, r8
 80195fc:	47a8      	blx	r5
 80195fe:	b007      	add	sp, #28
 8019600:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019604:	24026176 	.word	0x24026176

08019608 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8019608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801960c:	4604      	mov	r4, r0
 801960e:	b08f      	sub	sp, #60	; 0x3c
 8019610:	4610      	mov	r0, r2
 8019612:	460d      	mov	r5, r1
 8019614:	4691      	mov	r9, r2
 8019616:	461e      	mov	r6, r3
 8019618:	f004 fc24 	bl	801de64 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 801961c:	2800      	cmp	r0, #0
 801961e:	f000 809d 	beq.w	801975c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 8019622:	6823      	ldr	r3, [r4, #0]
 8019624:	4620      	mov	r0, r4
 8019626:	f8df b198 	ldr.w	fp, [pc, #408]	; 80197c0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 801962a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 801962e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019630:	4798      	blx	r3
 8019632:	6823      	ldr	r3, [r4, #0]
 8019634:	4620      	mov	r0, r4
 8019636:	f8df a18c 	ldr.w	sl, [pc, #396]	; 80197c4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 801963a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801963c:	4798      	blx	r3
 801963e:	f8bb 3000 	ldrh.w	r3, [fp]
 8019642:	4f5c      	ldr	r7, [pc, #368]	; (80197b4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8019644:	9301      	str	r3, [sp, #4]
 8019646:	f8ba 3000 	ldrh.w	r3, [sl]
 801964a:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 801964e:	4640      	mov	r0, r8
 8019650:	9302      	str	r3, [sp, #8]
 8019652:	883b      	ldrh	r3, [r7, #0]
 8019654:	9303      	str	r3, [sp, #12]
 8019656:	4b58      	ldr	r3, [pc, #352]	; (80197b8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8019658:	881a      	ldrh	r2, [r3, #0]
 801965a:	9305      	str	r3, [sp, #20]
 801965c:	9204      	str	r2, [sp, #16]
 801965e:	f004 fd45 	bl	801e0ec <_ZNK8touchgfx6Bitmap8getWidthEv>
 8019662:	8038      	strh	r0, [r7, #0]
 8019664:	4640      	mov	r0, r8
 8019666:	f004 fd75 	bl	801e154 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801966a:	9b05      	ldr	r3, [sp, #20]
 801966c:	b280      	uxth	r0, r0
 801966e:	8018      	strh	r0, [r3, #0]
 8019670:	4b52      	ldr	r3, [pc, #328]	; (80197bc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 8019672:	781b      	ldrb	r3, [r3, #0]
 8019674:	2b00      	cmp	r3, #0
 8019676:	d174      	bne.n	8019762 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 8019678:	883b      	ldrh	r3, [r7, #0]
 801967a:	f8aa 0000 	strh.w	r0, [sl]
 801967e:	f8ab 3000 	strh.w	r3, [fp]
 8019682:	4648      	mov	r0, r9
 8019684:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 8019688:	f004 fbec 	bl	801de64 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 801968c:	2200      	movs	r2, #0
 801968e:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 8019692:	4611      	mov	r1, r2
 8019694:	4628      	mov	r0, r5
 8019696:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 801969a:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 801969e:	f7ee fbc4 	bl	8007e2a <_ZN8touchgfx8Drawable5setXYEss>
 80196a2:	2301      	movs	r3, #1
 80196a4:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 80196a8:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 80196ac:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 80196b0:	2b00      	cmp	r3, #0
 80196b2:	dd5c      	ble.n	801976e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 80196b4:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 80196b8:	2b00      	cmp	r3, #0
 80196ba:	dd58      	ble.n	801976e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 80196bc:	462a      	mov	r2, r5
 80196be:	ab0a      	add	r3, sp, #40	; 0x28
 80196c0:	f852 0f04 	ldr.w	r0, [r2, #4]!
 80196c4:	6851      	ldr	r1, [r2, #4]
 80196c6:	c303      	stmia	r3!, {r0, r1}
 80196c8:	4631      	mov	r1, r6
 80196ca:	a80a      	add	r0, sp, #40	; 0x28
 80196cc:	f7ff fbfc 	bl	8018ec8 <_ZN8touchgfx4RectaNERKS0_>
 80196d0:	4b38      	ldr	r3, [pc, #224]	; (80197b4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 80196d2:	2100      	movs	r1, #0
 80196d4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80196d8:	4b37      	ldr	r3, [pc, #220]	; (80197b8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 80196da:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 80196de:	aa0a      	add	r2, sp, #40	; 0x28
 80196e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80196e4:	910c      	str	r1, [sp, #48]	; 0x30
 80196e6:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 80196ea:	ab08      	add	r3, sp, #32
 80196ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 80196f0:	e883 0003 	stmia.w	r3, {r0, r1}
 80196f4:	4618      	mov	r0, r3
 80196f6:	a90c      	add	r1, sp, #48	; 0x30
 80196f8:	f7ff fbe6 	bl	8018ec8 <_ZN8touchgfx4RectaNERKS0_>
 80196fc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80196fe:	2b00      	cmp	r3, #0
 8019700:	d13c      	bne.n	801977c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 8019702:	2000      	movs	r0, #0
 8019704:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 8019708:	2600      	movs	r6, #0
 801970a:	696b      	ldr	r3, [r5, #20]
 801970c:	a908      	add	r1, sp, #32
 801970e:	682a      	ldr	r2, [r5, #0]
 8019710:	4628      	mov	r0, r5
 8019712:	9305      	str	r3, [sp, #20]
 8019714:	616e      	str	r6, [r5, #20]
 8019716:	6892      	ldr	r2, [r2, #8]
 8019718:	4790      	blx	r2
 801971a:	9b05      	ldr	r3, [sp, #20]
 801971c:	4652      	mov	r2, sl
 801971e:	4649      	mov	r1, r9
 8019720:	616b      	str	r3, [r5, #20]
 8019722:	4628      	mov	r0, r5
 8019724:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 8019728:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 801972c:	f7ee fb7d 	bl	8007e2a <_ZN8touchgfx8Drawable5setXYEss>
 8019730:	9a01      	ldr	r2, [sp, #4]
 8019732:	4b23      	ldr	r3, [pc, #140]	; (80197c0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 8019734:	4620      	mov	r0, r4
 8019736:	801a      	strh	r2, [r3, #0]
 8019738:	9a02      	ldr	r2, [sp, #8]
 801973a:	4b22      	ldr	r3, [pc, #136]	; (80197c4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 801973c:	801a      	strh	r2, [r3, #0]
 801973e:	9a03      	ldr	r2, [sp, #12]
 8019740:	4b1c      	ldr	r3, [pc, #112]	; (80197b4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8019742:	801a      	strh	r2, [r3, #0]
 8019744:	4b1c      	ldr	r3, [pc, #112]	; (80197b8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8019746:	9a04      	ldr	r2, [sp, #16]
 8019748:	801a      	strh	r2, [r3, #0]
 801974a:	6823      	ldr	r3, [r4, #0]
 801974c:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 8019750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019752:	4798      	blx	r3
 8019754:	6823      	ldr	r3, [r4, #0]
 8019756:	4620      	mov	r0, r4
 8019758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801975a:	4798      	blx	r3
 801975c:	b00f      	add	sp, #60	; 0x3c
 801975e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019762:	883b      	ldrh	r3, [r7, #0]
 8019764:	f8ab 0000 	strh.w	r0, [fp]
 8019768:	f8aa 3000 	strh.w	r3, [sl]
 801976c:	e789      	b.n	8019682 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 801976e:	462a      	mov	r2, r5
 8019770:	ab0a      	add	r3, sp, #40	; 0x28
 8019772:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8019776:	6851      	ldr	r1, [r2, #4]
 8019778:	c303      	stmia	r3!, {r0, r1}
 801977a:	e7a9      	b.n	80196d0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 801977c:	a807      	add	r0, sp, #28
 801977e:	f004 fe25 	bl	801e3cc <_ZNK8touchgfx6Bitmap9getFormatEv>
 8019782:	4606      	mov	r6, r0
 8019784:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8019786:	6803      	ldr	r3, [r0, #0]
 8019788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801978a:	4798      	blx	r3
 801978c:	4286      	cmp	r6, r0
 801978e:	d1b8      	bne.n	8019702 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 8019790:	f7ea fba8 	bl	8003ee4 <_ZN8touchgfx3HAL3lcdEv>
 8019794:	6803      	ldr	r3, [r0, #0]
 8019796:	4606      	mov	r6, r0
 8019798:	a807      	add	r0, sp, #28
 801979a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801979c:	9305      	str	r3, [sp, #20]
 801979e:	f004 fe15 	bl	801e3cc <_ZNK8touchgfx6Bitmap9getFormatEv>
 80197a2:	9b05      	ldr	r3, [sp, #20]
 80197a4:	4601      	mov	r1, r0
 80197a6:	4630      	mov	r0, r6
 80197a8:	4798      	blx	r3
 80197aa:	f080 0001 	eor.w	r0, r0, #1
 80197ae:	b2c0      	uxtb	r0, r0
 80197b0:	e7a8      	b.n	8019704 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 80197b2:	bf00      	nop
 80197b4:	24026170 	.word	0x24026170
 80197b8:	24026172 	.word	0x24026172
 80197bc:	24026174 	.word	0x24026174
 80197c0:	24026176 	.word	0x24026176
 80197c4:	24026178 	.word	0x24026178

080197c8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 80197c8:	4b07      	ldr	r3, [pc, #28]	; (80197e8 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 80197ca:	b510      	push	{r4, lr}
 80197cc:	781b      	ldrb	r3, [r3, #0]
 80197ce:	4604      	mov	r4, r0
 80197d0:	b13b      	cbz	r3, 80197e2 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 80197d2:	6803      	ldr	r3, [r0, #0]
 80197d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80197d6:	4798      	blx	r3
 80197d8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80197da:	4283      	cmp	r3, r0
 80197dc:	d101      	bne.n	80197e2 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 80197de:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80197e0:	bd10      	pop	{r4, pc}
 80197e2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80197e4:	e7fc      	b.n	80197e0 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 80197e6:	bf00      	nop
 80197e8:	2402617a 	.word	0x2402617a

080197ec <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 80197ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80197f0:	461d      	mov	r5, r3
 80197f2:	b08a      	sub	sp, #40	; 0x28
 80197f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80197f8:	4690      	mov	r8, r2
 80197fa:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 80197fe:	2400      	movs	r4, #0
 8019800:	4607      	mov	r7, r0
 8019802:	fb06 8505 	mla	r5, r6, r5, r8
 8019806:	9404      	str	r4, [sp, #16]
 8019808:	f88d 4020 	strb.w	r4, [sp, #32]
 801980c:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8019810:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8019814:	f8ad 3018 	strh.w	r3, [sp, #24]
 8019818:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801981c:	f8ad 301a 	strh.w	r3, [sp, #26]
 8019820:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8019824:	f8ad 301c 	strh.w	r3, [sp, #28]
 8019828:	f7ff ffce 	bl	80197c8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801982c:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8019830:	6878      	ldr	r0, [r7, #4]
 8019832:	f8ad 601e 	strh.w	r6, [sp, #30]
 8019836:	a901      	add	r1, sp, #4
 8019838:	9505      	str	r5, [sp, #20]
 801983a:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 801983e:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 8019842:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 8019846:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 801984a:	6803      	ldr	r3, [r0, #0]
 801984c:	685b      	ldr	r3, [r3, #4]
 801984e:	4798      	blx	r3
 8019850:	b00a      	add	sp, #40	; 0x28
 8019852:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019856 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 8019856:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801985a:	b08b      	sub	sp, #44	; 0x2c
 801985c:	2400      	movs	r4, #0
 801985e:	4691      	mov	r9, r2
 8019860:	461d      	mov	r5, r3
 8019862:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 8019866:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801986a:	4688      	mov	r8, r1
 801986c:	4607      	mov	r7, r0
 801986e:	9404      	str	r4, [sp, #16]
 8019870:	fb06 9505 	mla	r5, r6, r5, r9
 8019874:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8019878:	f7ff ffa6 	bl	80197c8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801987c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8019880:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8019884:	6878      	ldr	r0, [r7, #4]
 8019886:	f8ad 3018 	strh.w	r3, [sp, #24]
 801988a:	a901      	add	r1, sp, #4
 801988c:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8019890:	9505      	str	r5, [sp, #20]
 8019892:	f8ad 301a 	strh.w	r3, [sp, #26]
 8019896:	f8ad 401c 	strh.w	r4, [sp, #28]
 801989a:	f8ad 601e 	strh.w	r6, [sp, #30]
 801989e:	f8cd 8010 	str.w	r8, [sp, #16]
 80198a2:	f8ad 4020 	strh.w	r4, [sp, #32]
 80198a6:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 80198aa:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 80198ae:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 80198b2:	6803      	ldr	r3, [r0, #0]
 80198b4:	685b      	ldr	r3, [r3, #4]
 80198b6:	4798      	blx	r3
 80198b8:	b00b      	add	sp, #44	; 0x2c
 80198ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

080198c0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 80198c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80198c4:	b08a      	sub	sp, #40	; 0x28
 80198c6:	4698      	mov	r8, r3
 80198c8:	2300      	movs	r3, #0
 80198ca:	4606      	mov	r6, r0
 80198cc:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 80198d0:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 80198d4:	2d0b      	cmp	r5, #11
 80198d6:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 80198da:	f8bd 7058 	ldrh.w	r7, [sp, #88]	; 0x58
 80198de:	f89d 4060 	ldrb.w	r4, [sp, #96]	; 0x60
 80198e2:	9304      	str	r3, [sp, #16]
 80198e4:	d137      	bne.n	8019956 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 80198e6:	2380      	movs	r3, #128	; 0x80
 80198e8:	f88d 0020 	strb.w	r0, [sp, #32]
 80198ec:	4630      	mov	r0, r6
 80198ee:	9203      	str	r2, [sp, #12]
 80198f0:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80198f4:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 80198f8:	f8ad 3018 	strh.w	r3, [sp, #24]
 80198fc:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8019900:	f8ad 301a 	strh.w	r3, [sp, #26]
 8019904:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8019908:	f8ad 301c 	strh.w	r3, [sp, #28]
 801990c:	f7ff ff5c 	bl	80197c8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8019910:	2c0b      	cmp	r4, #11
 8019912:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8019916:	f8ad 701e 	strh.w	r7, [sp, #30]
 801991a:	bf94      	ite	ls
 801991c:	4b19      	ldrls	r3, [pc, #100]	; (8019984 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 801991e:	2100      	movhi	r1, #0
 8019920:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 8019924:	bf98      	it	ls
 8019926:	5d19      	ldrbls	r1, [r3, r4]
 8019928:	fb02 8307 	mla	r3, r2, r7, r8
 801992c:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8019930:	10c9      	asrs	r1, r1, #3
 8019932:	fb01 0003 	mla	r0, r1, r3, r0
 8019936:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 801993a:	a901      	add	r1, sp, #4
 801993c:	9005      	str	r0, [sp, #20]
 801993e:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 8019942:	2300      	movs	r3, #0
 8019944:	6870      	ldr	r0, [r6, #4]
 8019946:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 801994a:	6803      	ldr	r3, [r0, #0]
 801994c:	685b      	ldr	r3, [r3, #4]
 801994e:	4798      	blx	r3
 8019950:	b00a      	add	sp, #40	; 0x28
 8019952:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019956:	2d02      	cmp	r5, #2
 8019958:	d109      	bne.n	801996e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 801995a:	28ff      	cmp	r0, #255	; 0xff
 801995c:	d105      	bne.n	801996a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 801995e:	f1bc 0f00 	cmp.w	ip, #0
 8019962:	bf14      	ite	ne
 8019964:	2340      	movne	r3, #64	; 0x40
 8019966:	2320      	moveq	r3, #32
 8019968:	e7be      	b.n	80198e8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 801996a:	2340      	movs	r3, #64	; 0x40
 801996c:	e7bc      	b.n	80198e8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 801996e:	28ff      	cmp	r0, #255	; 0xff
 8019970:	d105      	bne.n	801997e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 8019972:	f1bc 0f00 	cmp.w	ip, #0
 8019976:	bf14      	ite	ne
 8019978:	2304      	movne	r3, #4
 801997a:	2301      	moveq	r3, #1
 801997c:	e7b4      	b.n	80198e8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 801997e:	2304      	movs	r3, #4
 8019980:	e7b2      	b.n	80198e8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8019982:	bf00      	nop
 8019984:	0802a9fc 	.word	0x0802a9fc

08019988 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 8019988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801998c:	b08b      	sub	sp, #44	; 0x2c
 801998e:	461d      	mov	r5, r3
 8019990:	2400      	movs	r4, #0
 8019992:	4688      	mov	r8, r1
 8019994:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
 8019998:	4693      	mov	fp, r2
 801999a:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
 801999e:	4607      	mov	r7, r0
 80199a0:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80199a4:	f8bd a05c 	ldrh.w	sl, [sp, #92]	; 0x5c
 80199a8:	9404      	str	r4, [sp, #16]
 80199aa:	bf14      	ite	ne
 80199ac:	2308      	movne	r3, #8
 80199ae:	2302      	moveq	r3, #2
 80199b0:	fb05 b50a 	mla	r5, r5, sl, fp
 80199b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80199b8:	f7ff ff06 	bl	80197c8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80199bc:	2e0b      	cmp	r6, #11
 80199be:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 80199c2:	a901      	add	r1, sp, #4
 80199c4:	bf98      	it	ls
 80199c6:	4b13      	ldrls	r3, [pc, #76]	; (8019a14 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 80199c8:	f8ad a01e 	strh.w	sl, [sp, #30]
 80199cc:	bf98      	it	ls
 80199ce:	5d9c      	ldrbls	r4, [r3, r6]
 80199d0:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 80199d4:	10e4      	asrs	r4, r4, #3
 80199d6:	f8cd 8010 	str.w	r8, [sp, #16]
 80199da:	f8ad 3018 	strh.w	r3, [sp, #24]
 80199de:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 80199e2:	fb04 0405 	mla	r4, r4, r5, r0
 80199e6:	6878      	ldr	r0, [r7, #4]
 80199e8:	f8ad 301a 	strh.w	r3, [sp, #26]
 80199ec:	2300      	movs	r3, #0
 80199ee:	9405      	str	r4, [sp, #20]
 80199f0:	f8ad 301c 	strh.w	r3, [sp, #28]
 80199f4:	f88d 9020 	strb.w	r9, [sp, #32]
 80199f8:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
 80199fc:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8019a00:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
 8019a04:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
 8019a08:	6803      	ldr	r3, [r0, #0]
 8019a0a:	685b      	ldr	r3, [r3, #4]
 8019a0c:	4798      	blx	r3
 8019a0e:	b00b      	add	sp, #44	; 0x2c
 8019a10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019a14:	0802a9fc 	.word	0x0802a9fc

08019a18 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8019a18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019a1c:	461e      	mov	r6, r3
 8019a1e:	4b0a      	ldr	r3, [pc, #40]	; (8019a48 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 8019a20:	460f      	mov	r7, r1
 8019a22:	4690      	mov	r8, r2
 8019a24:	881d      	ldrh	r5, [r3, #0]
 8019a26:	f7ea fa5d 	bl	8003ee4 <_ZN8touchgfx3HAL3lcdEv>
 8019a2a:	6803      	ldr	r3, [r0, #0]
 8019a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019a2e:	4798      	blx	r3
 8019a30:	280b      	cmp	r0, #11
 8019a32:	bf96      	itet	ls
 8019a34:	4b05      	ldrls	r3, [pc, #20]	; (8019a4c <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8019a36:	2400      	movhi	r4, #0
 8019a38:	5c1c      	ldrbls	r4, [r3, r0]
 8019a3a:	fb08 7005 	mla	r0, r8, r5, r7
 8019a3e:	10e4      	asrs	r4, r4, #3
 8019a40:	fb04 6000 	mla	r0, r4, r0, r6
 8019a44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019a48:	24026176 	.word	0x24026176
 8019a4c:	0802a9fc 	.word	0x0802a9fc

08019a50 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 8019a50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019a52:	b08b      	sub	sp, #44	; 0x2c
 8019a54:	461f      	mov	r7, r3
 8019a56:	4604      	mov	r4, r0
 8019a58:	4616      	mov	r6, r2
 8019a5a:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8019a5e:	2500      	movs	r5, #0
 8019a60:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8019a64:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8019a68:	9504      	str	r5, [sp, #16]
 8019a6a:	f8ad 3018 	strh.w	r3, [sp, #24]
 8019a6e:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8019a72:	f8ad 301a 	strh.w	r3, [sp, #26]
 8019a76:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8019a7a:	f8ad 301c 	strh.w	r3, [sp, #28]
 8019a7e:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8019a82:	f88d 3020 	strb.w	r3, [sp, #32]
 8019a86:	f7ff fe9f 	bl	80197c8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8019a8a:	463a      	mov	r2, r7
 8019a8c:	4631      	mov	r1, r6
 8019a8e:	4603      	mov	r3, r0
 8019a90:	4620      	mov	r0, r4
 8019a92:	f7ff ffc1 	bl	8019a18 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8019a96:	4b0e      	ldr	r3, [pc, #56]	; (8019ad0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 8019a98:	9005      	str	r0, [sp, #20]
 8019a9a:	881b      	ldrh	r3, [r3, #0]
 8019a9c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8019aa0:	f7ea fa20 	bl	8003ee4 <_ZN8touchgfx3HAL3lcdEv>
 8019aa4:	6803      	ldr	r3, [r0, #0]
 8019aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019aa8:	4798      	blx	r3
 8019aaa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8019aac:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 8019ab0:	a901      	add	r1, sp, #4
 8019ab2:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8019ab6:	9304      	str	r3, [sp, #16]
 8019ab8:	6860      	ldr	r0, [r4, #4]
 8019aba:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8019abe:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 8019ac2:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 8019ac6:	6803      	ldr	r3, [r0, #0]
 8019ac8:	685b      	ldr	r3, [r3, #4]
 8019aca:	4798      	blx	r3
 8019acc:	b00b      	add	sp, #44	; 0x2c
 8019ace:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019ad0:	24026176 	.word	0x24026176

08019ad4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8019ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019ad6:	b08d      	sub	sp, #52	; 0x34
 8019ad8:	2501      	movs	r5, #1
 8019ada:	4604      	mov	r4, r0
 8019adc:	466b      	mov	r3, sp
 8019ade:	9503      	str	r5, [sp, #12]
 8019ae0:	e883 0006 	stmia.w	r3, {r1, r2}
 8019ae4:	2300      	movs	r3, #0
 8019ae6:	f8bd 6000 	ldrh.w	r6, [sp]
 8019aea:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8019aee:	9306      	str	r3, [sp, #24]
 8019af0:	6803      	ldr	r3, [r0, #0]
 8019af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019af4:	4798      	blx	r3
 8019af6:	463a      	mov	r2, r7
 8019af8:	4631      	mov	r1, r6
 8019afa:	4603      	mov	r3, r0
 8019afc:	4620      	mov	r0, r4
 8019afe:	f7ff ff8b 	bl	8019a18 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8019b02:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8019b04:	9004      	str	r0, [sp, #16]
 8019b06:	9307      	str	r3, [sp, #28]
 8019b08:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8019b0c:	f8ad 3020 	strh.w	r3, [sp, #32]
 8019b10:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8019b14:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8019b18:	4b0e      	ldr	r3, [pc, #56]	; (8019b54 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 8019b1a:	881b      	ldrh	r3, [r3, #0]
 8019b1c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8019b20:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8019b24:	f7ea f9de 	bl	8003ee4 <_ZN8touchgfx3HAL3lcdEv>
 8019b28:	6803      	ldr	r3, [r0, #0]
 8019b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019b2c:	4798      	blx	r3
 8019b2e:	23ff      	movs	r3, #255	; 0xff
 8019b30:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 8019b34:	a903      	add	r1, sp, #12
 8019b36:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 8019b3a:	6860      	ldr	r0, [r4, #4]
 8019b3c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8019b40:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8019b44:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 8019b48:	6803      	ldr	r3, [r0, #0]
 8019b4a:	685b      	ldr	r3, [r3, #4]
 8019b4c:	4798      	blx	r3
 8019b4e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8019b50:	b00d      	add	sp, #52	; 0x34
 8019b52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019b54:	24026176 	.word	0x24026176

08019b58 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8019b58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019b5c:	b08c      	sub	sp, #48	; 0x30
 8019b5e:	461e      	mov	r6, r3
 8019b60:	2300      	movs	r3, #0
 8019b62:	4604      	mov	r4, r0
 8019b64:	466d      	mov	r5, sp
 8019b66:	9306      	str	r3, [sp, #24]
 8019b68:	6803      	ldr	r3, [r0, #0]
 8019b6a:	e885 0006 	stmia.w	r5, {r1, r2}
 8019b6e:	2501      	movs	r5, #1
 8019b70:	f8bd 7000 	ldrh.w	r7, [sp]
 8019b74:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 8019b78:	9503      	str	r5, [sp, #12]
 8019b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019b7c:	4798      	blx	r3
 8019b7e:	4642      	mov	r2, r8
 8019b80:	4639      	mov	r1, r7
 8019b82:	4603      	mov	r3, r0
 8019b84:	4620      	mov	r0, r4
 8019b86:	f7ff ff47 	bl	8019a18 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8019b8a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8019b8e:	9004      	str	r0, [sp, #16]
 8019b90:	f8ad 3020 	strh.w	r3, [sp, #32]
 8019b94:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8019b98:	9607      	str	r6, [sp, #28]
 8019b9a:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8019b9e:	4b10      	ldr	r3, [pc, #64]	; (8019be0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 8019ba0:	881b      	ldrh	r3, [r3, #0]
 8019ba2:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8019ba6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8019ba8:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8019bac:	f7ea f99a 	bl	8003ee4 <_ZN8touchgfx3HAL3lcdEv>
 8019bb0:	6803      	ldr	r3, [r0, #0]
 8019bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019bb4:	4798      	blx	r3
 8019bb6:	23ff      	movs	r3, #255	; 0xff
 8019bb8:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 8019bbc:	a903      	add	r1, sp, #12
 8019bbe:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 8019bc2:	6860      	ldr	r0, [r4, #4]
 8019bc4:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8019bc8:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8019bcc:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 8019bd0:	6803      	ldr	r3, [r0, #0]
 8019bd2:	685b      	ldr	r3, [r3, #4]
 8019bd4:	4798      	blx	r3
 8019bd6:	4630      	mov	r0, r6
 8019bd8:	b00c      	add	sp, #48	; 0x30
 8019bda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019bde:	bf00      	nop
 8019be0:	24026176 	.word	0x24026176

08019be4 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 8019be4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019be6:	b085      	sub	sp, #20
 8019be8:	4605      	mov	r5, r0
 8019bea:	ac02      	add	r4, sp, #8
 8019bec:	e884 0006 	stmia.w	r4, {r1, r2}
 8019bf0:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 8019bf4:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 8019bf8:	f7ff fde6 	bl	80197c8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8019bfc:	4631      	mov	r1, r6
 8019bfe:	4603      	mov	r3, r0
 8019c00:	463a      	mov	r2, r7
 8019c02:	4628      	mov	r0, r5
 8019c04:	f7ff ff08 	bl	8019a18 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8019c08:	4a05      	ldr	r2, [pc, #20]	; (8019c20 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 8019c0a:	682b      	ldr	r3, [r5, #0]
 8019c0c:	8812      	ldrh	r2, [r2, #0]
 8019c0e:	9200      	str	r2, [sp, #0]
 8019c10:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 8019c12:	4603      	mov	r3, r0
 8019c14:	4628      	mov	r0, r5
 8019c16:	e894 0006 	ldmia.w	r4, {r1, r2}
 8019c1a:	47b0      	blx	r6
 8019c1c:	b005      	add	sp, #20
 8019c1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019c20:	24026176 	.word	0x24026176

08019c24 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8019c24:	b570      	push	{r4, r5, r6, lr}
 8019c26:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8019c2a:	4604      	mov	r4, r0
 8019c2c:	b19b      	cbz	r3, 8019c56 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8019c2e:	2002      	movs	r0, #2
 8019c30:	f7e6 fe64 	bl	80008fc <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8019c34:	2300      	movs	r3, #0
 8019c36:	4620      	mov	r0, r4
 8019c38:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8019c3c:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 8019c40:	6823      	ldr	r3, [r4, #0]
 8019c42:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
 8019c46:	f7ff fdbf 	bl	80197c8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8019c4a:	4601      	mov	r1, r0
 8019c4c:	4620      	mov	r0, r4
 8019c4e:	462b      	mov	r3, r5
 8019c50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019c54:	4718      	bx	r3
 8019c56:	bd70      	pop	{r4, r5, r6, pc}

08019c58 <_ZN8touchgfx3HAL12setMCUActiveEb>:
 8019c58:	b570      	push	{r4, r5, r6, lr}
 8019c5a:	4605      	mov	r5, r0
 8019c5c:	460c      	mov	r4, r1
 8019c5e:	2003      	movs	r0, #3
 8019c60:	b149      	cbz	r1, 8019c76 <_ZN8touchgfx3HAL12setMCUActiveEb+0x1e>
 8019c62:	f7e6 fd8f 	bl	8000784 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8019c66:	6928      	ldr	r0, [r5, #16]
 8019c68:	b168      	cbz	r0, 8019c86 <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 8019c6a:	6803      	ldr	r3, [r0, #0]
 8019c6c:	2101      	movs	r1, #1
 8019c6e:	695b      	ldr	r3, [r3, #20]
 8019c70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019c74:	4718      	bx	r3
 8019c76:	f7e6 fde3 	bl	8000840 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8019c7a:	6928      	ldr	r0, [r5, #16]
 8019c7c:	b118      	cbz	r0, 8019c86 <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 8019c7e:	6803      	ldr	r3, [r0, #0]
 8019c80:	4621      	mov	r1, r4
 8019c82:	695b      	ldr	r3, [r3, #20]
 8019c84:	e7f4      	b.n	8019c70 <_ZN8touchgfx3HAL12setMCUActiveEb+0x18>
 8019c86:	bd70      	pop	{r4, r5, r6, pc}

08019c88 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 8019c88:	b538      	push	{r3, r4, r5, lr}
 8019c8a:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
 8019c8e:	4604      	mov	r4, r0
 8019c90:	460d      	mov	r5, r1
 8019c92:	428b      	cmp	r3, r1
 8019c94:	d006      	beq.n	8019ca4 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 8019c96:	6803      	ldr	r3, [r0, #0]
 8019c98:	b929      	cbnz	r1, 8019ca6 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 8019c9a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8019c9e:	4798      	blx	r3
 8019ca0:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 8019ca4:	bd38      	pop	{r3, r4, r5, pc}
 8019ca6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8019caa:	e7f8      	b.n	8019c9e <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

08019cac <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8019cac:	4b0d      	ldr	r3, [pc, #52]	; (8019ce4 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 8019cae:	b510      	push	{r4, lr}
 8019cb0:	781b      	ldrb	r3, [r3, #0]
 8019cb2:	4604      	mov	r4, r0
 8019cb4:	b95b      	cbnz	r3, 8019cce <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8019cb6:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8019cba:	2b02      	cmp	r3, #2
 8019cbc:	d007      	beq.n	8019cce <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8019cbe:	6840      	ldr	r0, [r0, #4]
 8019cc0:	f000 f90e 	bl	8019ee0 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8019cc4:	b118      	cbz	r0, 8019cce <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8019cc6:	6862      	ldr	r2, [r4, #4]
 8019cc8:	7a53      	ldrb	r3, [r2, #9]
 8019cca:	2b00      	cmp	r3, #0
 8019ccc:	d0fc      	beq.n	8019cc8 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8019cce:	f7e8 fb17 	bl	8002300 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8019cd2:	4620      	mov	r0, r4
 8019cd4:	2100      	movs	r1, #0
 8019cd6:	f7ff ffd7 	bl	8019c88 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8019cda:	4620      	mov	r0, r4
 8019cdc:	f7ff fd74 	bl	80197c8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8019ce0:	bd10      	pop	{r4, pc}
 8019ce2:	bf00      	nop
 8019ce4:	2402617a 	.word	0x2402617a

08019ce8 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 8019ce8:	4770      	bx	lr

08019cea <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 8019cea:	2000      	movs	r0, #0
 8019cec:	4770      	bx	lr

08019cee <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8019cee:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8019cf2:	1a13      	subs	r3, r2, r0
 8019cf4:	4258      	negs	r0, r3
 8019cf6:	4158      	adcs	r0, r3
 8019cf8:	4770      	bx	lr

08019cfa <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8019cfa:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8019cfe:	1a9b      	subs	r3, r3, r2
 8019d00:	2b00      	cmp	r3, #0
 8019d02:	bfdc      	itt	le
 8019d04:	6882      	ldrle	r2, [r0, #8]
 8019d06:	189b      	addle	r3, r3, r2
 8019d08:	2b01      	cmp	r3, #1
 8019d0a:	bfcc      	ite	gt
 8019d0c:	2000      	movgt	r0, #0
 8019d0e:	2001      	movle	r0, #1
 8019d10:	4770      	bx	lr

08019d12 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8019d12:	6902      	ldr	r2, [r0, #16]
 8019d14:	6843      	ldr	r3, [r0, #4]
 8019d16:	2024      	movs	r0, #36	; 0x24
 8019d18:	fb00 3002 	mla	r0, r0, r2, r3
 8019d1c:	4770      	bx	lr

08019d1e <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8019d1e:	6803      	ldr	r3, [r0, #0]
 8019d20:	691b      	ldr	r3, [r3, #16]
 8019d22:	4718      	bx	r3

08019d24 <_ZN8touchgfx13DMA_Interface7executeEv>:
 8019d24:	2301      	movs	r3, #1
 8019d26:	b570      	push	{r4, r5, r6, lr}
 8019d28:	7203      	strb	r3, [r0, #8]
 8019d2a:	4604      	mov	r4, r0
 8019d2c:	6840      	ldr	r0, [r0, #4]
 8019d2e:	6803      	ldr	r3, [r0, #0]
 8019d30:	699b      	ldr	r3, [r3, #24]
 8019d32:	4798      	blx	r3
 8019d34:	6803      	ldr	r3, [r0, #0]
 8019d36:	4605      	mov	r5, r0
 8019d38:	2b40      	cmp	r3, #64	; 0x40
 8019d3a:	d00c      	beq.n	8019d56 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8019d3c:	d810      	bhi.n	8019d60 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 8019d3e:	2b04      	cmp	r3, #4
 8019d40:	d01d      	beq.n	8019d7e <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 8019d42:	d804      	bhi.n	8019d4e <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 8019d44:	2b01      	cmp	r3, #1
 8019d46:	d006      	beq.n	8019d56 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8019d48:	2b02      	cmp	r3, #2
 8019d4a:	d02c      	beq.n	8019da6 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 8019d4c:	bd70      	pop	{r4, r5, r6, pc}
 8019d4e:	2b08      	cmp	r3, #8
 8019d50:	d01d      	beq.n	8019d8e <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 8019d52:	2b20      	cmp	r3, #32
 8019d54:	d1fa      	bne.n	8019d4c <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 8019d56:	6823      	ldr	r3, [r4, #0]
 8019d58:	4620      	mov	r0, r4
 8019d5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019d5c:	4798      	blx	r3
 8019d5e:	e013      	b.n	8019d88 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8019d60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019d64:	d0f7      	beq.n	8019d56 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8019d66:	d804      	bhi.n	8019d72 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 8019d68:	2b80      	cmp	r3, #128	; 0x80
 8019d6a:	d0f4      	beq.n	8019d56 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8019d6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8019d70:	e7f0      	b.n	8019d54 <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 8019d72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8019d76:	d0ee      	beq.n	8019d56 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8019d78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8019d7c:	e7e5      	b.n	8019d4a <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 8019d7e:	6823      	ldr	r3, [r4, #0]
 8019d80:	7f01      	ldrb	r1, [r0, #28]
 8019d82:	4620      	mov	r0, r4
 8019d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019d86:	4798      	blx	r3
 8019d88:	6823      	ldr	r3, [r4, #0]
 8019d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019d8c:	e006      	b.n	8019d9c <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8019d8e:	6823      	ldr	r3, [r4, #0]
 8019d90:	7f01      	ldrb	r1, [r0, #28]
 8019d92:	4620      	mov	r0, r4
 8019d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019d96:	4798      	blx	r3
 8019d98:	6823      	ldr	r3, [r4, #0]
 8019d9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019d9c:	4629      	mov	r1, r5
 8019d9e:	4620      	mov	r0, r4
 8019da0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019da4:	4718      	bx	r3
 8019da6:	6823      	ldr	r3, [r4, #0]
 8019da8:	4620      	mov	r0, r4
 8019daa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019dac:	4798      	blx	r3
 8019dae:	e7f3      	b.n	8019d98 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

08019db0 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8019db0:	4770      	bx	lr

08019db2 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8019db2:	4770      	bx	lr

08019db4 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8019db4:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 8019db8:	b510      	push	{r4, lr}
 8019dba:	1ad2      	subs	r2, r2, r3
 8019dbc:	2a00      	cmp	r2, #0
 8019dbe:	bfdc      	itt	le
 8019dc0:	6884      	ldrle	r4, [r0, #8]
 8019dc2:	1912      	addle	r2, r2, r4
 8019dc4:	2a01      	cmp	r2, #1
 8019dc6:	dd16      	ble.n	8019df6 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 8019dc8:	6842      	ldr	r2, [r0, #4]
 8019dca:	2424      	movs	r4, #36	; 0x24
 8019dcc:	fb04 2303 	mla	r3, r4, r3, r2
 8019dd0:	f101 0220 	add.w	r2, r1, #32
 8019dd4:	f851 4b04 	ldr.w	r4, [r1], #4
 8019dd8:	4291      	cmp	r1, r2
 8019dda:	f843 4b04 	str.w	r4, [r3], #4
 8019dde:	d1f9      	bne.n	8019dd4 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 8019de0:	780a      	ldrb	r2, [r1, #0]
 8019de2:	701a      	strb	r2, [r3, #0]
 8019de4:	68c3      	ldr	r3, [r0, #12]
 8019de6:	6882      	ldr	r2, [r0, #8]
 8019de8:	f3bf 8f5b 	dmb	ish
 8019dec:	3301      	adds	r3, #1
 8019dee:	429a      	cmp	r2, r3
 8019df0:	bfd8      	it	le
 8019df2:	1a9b      	suble	r3, r3, r2
 8019df4:	60c3      	str	r3, [r0, #12]
 8019df6:	bd10      	pop	{r4, pc}

08019df8 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8019df8:	6903      	ldr	r3, [r0, #16]
 8019dfa:	6882      	ldr	r2, [r0, #8]
 8019dfc:	f3bf 8f5b 	dmb	ish
 8019e00:	3301      	adds	r3, #1
 8019e02:	429a      	cmp	r2, r3
 8019e04:	bfd8      	it	le
 8019e06:	1a9b      	suble	r3, r3, r2
 8019e08:	6103      	str	r3, [r0, #16]
 8019e0a:	4770      	bx	lr

08019e0c <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8019e0c:	b570      	push	{r4, r5, r6, lr}
 8019e0e:	4604      	mov	r4, r0
 8019e10:	460e      	mov	r6, r1
 8019e12:	6860      	ldr	r0, [r4, #4]
 8019e14:	6803      	ldr	r3, [r0, #0]
 8019e16:	685b      	ldr	r3, [r3, #4]
 8019e18:	4798      	blx	r3
 8019e1a:	2800      	cmp	r0, #0
 8019e1c:	d1f9      	bne.n	8019e12 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 8019e1e:	4d0d      	ldr	r5, [pc, #52]	; (8019e54 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 8019e20:	6828      	ldr	r0, [r5, #0]
 8019e22:	6803      	ldr	r3, [r0, #0]
 8019e24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8019e26:	4798      	blx	r3
 8019e28:	f7e8 fa84 	bl	8002334 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8019e2c:	6828      	ldr	r0, [r5, #0]
 8019e2e:	2101      	movs	r1, #1
 8019e30:	f7ff ff2a 	bl	8019c88 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8019e34:	6860      	ldr	r0, [r4, #4]
 8019e36:	4631      	mov	r1, r6
 8019e38:	6803      	ldr	r3, [r0, #0]
 8019e3a:	689b      	ldr	r3, [r3, #8]
 8019e3c:	4798      	blx	r3
 8019e3e:	6823      	ldr	r3, [r4, #0]
 8019e40:	4620      	mov	r0, r4
 8019e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019e44:	4798      	blx	r3
 8019e46:	6828      	ldr	r0, [r5, #0]
 8019e48:	6803      	ldr	r3, [r0, #0]
 8019e4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019e4e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8019e50:	4718      	bx	r3
 8019e52:	bf00      	nop
 8019e54:	2402617c 	.word	0x2402617c

08019e58 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8019e58:	b508      	push	{r3, lr}
 8019e5a:	f7e8 fa51 	bl	8002300 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8019e5e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8019e62:	f7e8 ba5b 	b.w	800231c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08019e66 <_ZN8touchgfx13DMA_Interface5startEv>:
 8019e66:	b510      	push	{r4, lr}
 8019e68:	4604      	mov	r4, r0
 8019e6a:	6840      	ldr	r0, [r0, #4]
 8019e6c:	6803      	ldr	r3, [r0, #0]
 8019e6e:	681b      	ldr	r3, [r3, #0]
 8019e70:	4798      	blx	r3
 8019e72:	b948      	cbnz	r0, 8019e88 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8019e74:	7a63      	ldrb	r3, [r4, #9]
 8019e76:	b13b      	cbz	r3, 8019e88 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8019e78:	7a23      	ldrb	r3, [r4, #8]
 8019e7a:	b92b      	cbnz	r3, 8019e88 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8019e7c:	6823      	ldr	r3, [r4, #0]
 8019e7e:	4620      	mov	r0, r4
 8019e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019e82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019e86:	4718      	bx	r3
 8019e88:	bd10      	pop	{r4, pc}

08019e8a <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8019e8a:	b570      	push	{r4, r5, r6, lr}
 8019e8c:	4604      	mov	r4, r0
 8019e8e:	6840      	ldr	r0, [r0, #4]
 8019e90:	6803      	ldr	r3, [r0, #0]
 8019e92:	681b      	ldr	r3, [r3, #0]
 8019e94:	4798      	blx	r3
 8019e96:	4605      	mov	r5, r0
 8019e98:	b930      	cbnz	r0, 8019ea8 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8019e9a:	7a23      	ldrb	r3, [r4, #8]
 8019e9c:	b123      	cbz	r3, 8019ea8 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8019e9e:	6860      	ldr	r0, [r4, #4]
 8019ea0:	6803      	ldr	r3, [r0, #0]
 8019ea2:	695b      	ldr	r3, [r3, #20]
 8019ea4:	4798      	blx	r3
 8019ea6:	7225      	strb	r5, [r4, #8]
 8019ea8:	6860      	ldr	r0, [r4, #4]
 8019eaa:	6803      	ldr	r3, [r0, #0]
 8019eac:	681b      	ldr	r3, [r3, #0]
 8019eae:	4798      	blx	r3
 8019eb0:	b928      	cbnz	r0, 8019ebe <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8019eb2:	6823      	ldr	r3, [r4, #0]
 8019eb4:	4620      	mov	r0, r4
 8019eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019eb8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019ebc:	4718      	bx	r3
 8019ebe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019ec2:	f7e8 ba43 	b.w	800234c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>
	...

08019ec8 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8019ec8:	b510      	push	{r4, lr}
 8019eca:	6082      	str	r2, [r0, #8]
 8019ecc:	2200      	movs	r2, #0
 8019ece:	4c03      	ldr	r4, [pc, #12]	; (8019edc <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8019ed0:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8019ed4:	e9c0 4100 	strd	r4, r1, [r0]
 8019ed8:	bd10      	pop	{r4, pc}
 8019eda:	bf00      	nop
 8019edc:	0802ab38 	.word	0x0802ab38

08019ee0 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8019ee0:	6840      	ldr	r0, [r0, #4]
 8019ee2:	6803      	ldr	r3, [r0, #0]
 8019ee4:	681b      	ldr	r3, [r3, #0]
 8019ee6:	4718      	bx	r3

08019ee8 <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 8019ee8:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 8019eec:	4770      	bx	lr

08019eee <_ZN8touchgfx14AbstractButton13executeActionEv>:
 8019eee:	b510      	push	{r4, lr}
 8019ef0:	4604      	mov	r4, r0
 8019ef2:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8019ef4:	b150      	cbz	r0, 8019f0c <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 8019ef6:	6803      	ldr	r3, [r0, #0]
 8019ef8:	68db      	ldr	r3, [r3, #12]
 8019efa:	4798      	blx	r3
 8019efc:	b130      	cbz	r0, 8019f0c <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 8019efe:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8019f00:	4621      	mov	r1, r4
 8019f02:	6803      	ldr	r3, [r0, #0]
 8019f04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019f08:	689b      	ldr	r3, [r3, #8]
 8019f0a:	4718      	bx	r3
 8019f0c:	bd10      	pop	{r4, pc}

08019f0e <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 8019f0e:	790b      	ldrb	r3, [r1, #4]
 8019f10:	2b00      	cmp	r3, #0
 8019f12:	bf0c      	ite	eq
 8019f14:	2301      	moveq	r3, #1
 8019f16:	2300      	movne	r3, #0
 8019f18:	b570      	push	{r4, r5, r6, lr}
 8019f1a:	4604      	mov	r4, r0
 8019f1c:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 8019f20:	460e      	mov	r6, r1
 8019f22:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 8019f26:	d109      	bne.n	8019f3c <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
 8019f28:	b14d      	cbz	r5, 8019f3e <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x30>
 8019f2a:	7933      	ldrb	r3, [r6, #4]
 8019f2c:	2b01      	cmp	r3, #1
 8019f2e:	d10c      	bne.n	8019f4a <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8019f30:	6823      	ldr	r3, [r4, #0]
 8019f32:	4620      	mov	r0, r4
 8019f34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019f36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019f3a:	4718      	bx	r3
 8019f3c:	b12d      	cbz	r5, 8019f4a <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8019f3e:	6823      	ldr	r3, [r4, #0]
 8019f40:	4620      	mov	r0, r4
 8019f42:	695b      	ldr	r3, [r3, #20]
 8019f44:	4798      	blx	r3
 8019f46:	2d00      	cmp	r5, #0
 8019f48:	d1ef      	bne.n	8019f2a <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 8019f4a:	bd70      	pop	{r4, r5, r6, pc}

08019f4c <_ZN8touchgfx12ToggleButton16handleClickEventERKNS_10ClickEventE>:
 8019f4c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8019f50:	b133      	cbz	r3, 8019f60 <_ZN8touchgfx12ToggleButton16handleClickEventERKNS_10ClickEventE+0x14>
 8019f52:	790b      	ldrb	r3, [r1, #4]
 8019f54:	2b01      	cmp	r3, #1
 8019f56:	bf01      	itttt	eq
 8019f58:	8dc3      	ldrheq	r3, [r0, #46]	; 0x2e
 8019f5a:	8e02      	ldrheq	r2, [r0, #48]	; 0x30
 8019f5c:	8603      	strheq	r3, [r0, #48]	; 0x30
 8019f5e:	85c2      	strheq	r2, [r0, #46]	; 0x2e
 8019f60:	f7ff bfd5 	b.w	8019f0e <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>

08019f64 <_ZNK8touchgfx6Button17invalidateContentEv>:
 8019f64:	f890 2032 	ldrb.w	r2, [r0, #50]	; 0x32
 8019f68:	b12a      	cbz	r2, 8019f76 <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 8019f6a:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8019f6e:	b112      	cbz	r2, 8019f76 <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 8019f70:	6803      	ldr	r3, [r0, #0]
 8019f72:	695b      	ldr	r3, [r3, #20]
 8019f74:	4718      	bx	r3
 8019f76:	4770      	bx	lr

08019f78 <_ZNK8touchgfx5Image17invalidateContentEv>:
 8019f78:	b508      	push	{r3, lr}
 8019f7a:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8019f7e:	b10b      	cbz	r3, 8019f84 <_ZNK8touchgfx5Image17invalidateContentEv+0xc>
 8019f80:	f7e9 feac 	bl	8003cdc <_ZNK8touchgfx8Drawable17invalidateContentEv>
 8019f84:	bd08      	pop	{r3, pc}

08019f86 <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>:
 8019f86:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 8019f8a:	4770      	bx	lr

08019f8c <_ZN8touchgfx13ScalableImage19getScalingAlgorithmEv>:
 8019f8c:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
 8019f90:	4770      	bx	lr

08019f92 <_ZNK8touchgfx13ScalableImage12getSolidRectEv>:
 8019f92:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8019f94:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8019f98:	4605      	mov	r5, r0
 8019f9a:	2bff      	cmp	r3, #255	; 0xff
 8019f9c:	d11e      	bne.n	8019fdc <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x4a>
 8019f9e:	f101 0426 	add.w	r4, r1, #38	; 0x26
 8019fa2:	4668      	mov	r0, sp
 8019fa4:	4621      	mov	r1, r4
 8019fa6:	f004 f909 	bl	801e1bc <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8019faa:	f9bd 6004 	ldrsh.w	r6, [sp, #4]
 8019fae:	4620      	mov	r0, r4
 8019fb0:	f004 f89c 	bl	801e0ec <_ZNK8touchgfx6Bitmap8getWidthEv>
 8019fb4:	4286      	cmp	r6, r0
 8019fb6:	d111      	bne.n	8019fdc <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x4a>
 8019fb8:	4621      	mov	r1, r4
 8019fba:	a802      	add	r0, sp, #8
 8019fbc:	f004 f8fe 	bl	801e1bc <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8019fc0:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 8019fc4:	4620      	mov	r0, r4
 8019fc6:	f004 f8c5 	bl	801e154 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8019fca:	4286      	cmp	r6, r0
 8019fcc:	d106      	bne.n	8019fdc <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x4a>
 8019fce:	4621      	mov	r1, r4
 8019fd0:	4628      	mov	r0, r5
 8019fd2:	f004 f8f3 	bl	801e1bc <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8019fd6:	4628      	mov	r0, r5
 8019fd8:	b004      	add	sp, #16
 8019fda:	bd70      	pop	{r4, r5, r6, pc}
 8019fdc:	2300      	movs	r3, #0
 8019fde:	802b      	strh	r3, [r5, #0]
 8019fe0:	806b      	strh	r3, [r5, #2]
 8019fe2:	80ab      	strh	r3, [r5, #4]
 8019fe4:	80eb      	strh	r3, [r5, #6]
 8019fe6:	e7f6      	b.n	8019fd6 <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x44>

08019fe8 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>:
 8019fe8:	b538      	push	{r3, r4, r5, lr}
 8019fea:	2300      	movs	r3, #0
 8019fec:	2501      	movs	r5, #1
 8019fee:	4604      	mov	r4, r0
 8019ff0:	8083      	strh	r3, [r0, #4]
 8019ff2:	80c3      	strh	r3, [r0, #6]
 8019ff4:	8103      	strh	r3, [r0, #8]
 8019ff6:	8143      	strh	r3, [r0, #10]
 8019ff8:	8183      	strh	r3, [r0, #12]
 8019ffa:	81c3      	strh	r3, [r0, #14]
 8019ffc:	8203      	strh	r3, [r0, #16]
 8019ffe:	8243      	strh	r3, [r0, #18]
 801a000:	61c3      	str	r3, [r0, #28]
 801a002:	8403      	strh	r3, [r0, #32]
 801a004:	8443      	strh	r3, [r0, #34]	; 0x22
 801a006:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
 801a00a:	f880 5025 	strb.w	r5, [r0, #37]	; 0x25
 801a00e:	e9c0 3305 	strd	r3, r3, [r0, #20]
 801a012:	4b07      	ldr	r3, [pc, #28]	; (801a030 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE+0x48>)
 801a014:	6003      	str	r3, [r0, #0]
 801a016:	880b      	ldrh	r3, [r1, #0]
 801a018:	84c3      	strh	r3, [r0, #38]	; 0x26
 801a01a:	23ff      	movs	r3, #255	; 0xff
 801a01c:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 801a020:	f000 fab4 	bl	801a58c <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 801a024:	4b03      	ldr	r3, [pc, #12]	; (801a034 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE+0x4c>)
 801a026:	f884 5029 	strb.w	r5, [r4, #41]	; 0x29
 801a02a:	4620      	mov	r0, r4
 801a02c:	6023      	str	r3, [r4, #0]
 801a02e:	bd38      	pop	{r3, r4, r5, pc}
 801a030:	0802ad90 	.word	0x0802ad90
 801a034:	0802ac40 	.word	0x0802ac40

0801a038 <_ZNK8touchgfx13ScalableImage19lookupRenderVariantEv>:
 801a038:	4603      	mov	r3, r0
 801a03a:	3026      	adds	r0, #38	; 0x26
 801a03c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 801a040:	b90b      	cbnz	r3, 801a046 <_ZNK8touchgfx13ScalableImage19lookupRenderVariantEv+0xe>
 801a042:	f002 bcc1 	b.w	801c9c8 <_ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE>
 801a046:	f002 bccf 	b.w	801c9e8 <_ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE>
	...

0801a04c <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_>:
 801a04c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a050:	4604      	mov	r4, r0
 801a052:	469b      	mov	fp, r3
 801a054:	f9b0 c008 	ldrsh.w	ip, [r0, #8]
 801a058:	b0b3      	sub	sp, #204	; 0xcc
 801a05a:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801a05e:	f9b1 6000 	ldrsh.w	r6, [r1]
 801a062:	8888      	ldrh	r0, [r1, #4]
 801a064:	9206      	str	r2, [sp, #24]
 801a066:	2200      	movs	r2, #0
 801a068:	4430      	add	r0, r6
 801a06a:	9211      	str	r2, [sp, #68]	; 0x44
 801a06c:	b280      	uxth	r0, r0
 801a06e:	fa0f fe80 	sxth.w	lr, r0
 801a072:	4596      	cmp	lr, r2
 801a074:	e9dd a93c 	ldrd	sl, r9, [sp, #240]	; 0xf0
 801a078:	e9dd 873e 	ldrd	r8, r7, [sp, #248]	; 0xf8
 801a07c:	f340 811a 	ble.w	801a2b4 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x268>
 801a080:	45b4      	cmp	ip, r6
 801a082:	f340 8117 	ble.w	801a2b4 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x268>
 801a086:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 801a08a:	88ca      	ldrh	r2, [r1, #6]
 801a08c:	442a      	add	r2, r5
 801a08e:	b292      	uxth	r2, r2
 801a090:	b211      	sxth	r1, r2
 801a092:	2900      	cmp	r1, #0
 801a094:	f340 810e 	ble.w	801a2b4 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x268>
 801a098:	42ab      	cmp	r3, r5
 801a09a:	f340 810b 	ble.w	801a2b4 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x268>
 801a09e:	45f4      	cmp	ip, lr
 801a0a0:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 801a0a4:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 801a0a8:	bfb8      	it	lt
 801a0aa:	fa1f f08c 	uxthlt.w	r0, ip
 801a0ae:	428b      	cmp	r3, r1
 801a0b0:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
 801a0b4:	bfb8      	it	lt
 801a0b6:	b29a      	uxthlt	r2, r3
 801a0b8:	1b80      	subs	r0, r0, r6
 801a0ba:	f8ad 5046 	strh.w	r5, [sp, #70]	; 0x46
 801a0be:	1b52      	subs	r2, r2, r5
 801a0c0:	f8ad 0048 	strh.w	r0, [sp, #72]	; 0x48
 801a0c4:	f8ad 204a 	strh.w	r2, [sp, #74]	; 0x4a
 801a0c8:	ab11      	add	r3, sp, #68	; 0x44
 801a0ca:	ad13      	add	r5, sp, #76	; 0x4c
 801a0cc:	6822      	ldr	r2, [r4, #0]
 801a0ce:	1d26      	adds	r6, r4, #4
 801a0d0:	9307      	str	r3, [sp, #28]
 801a0d2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 801a0d4:	e893 0003 	ldmia.w	r3, {r0, r1}
 801a0d8:	e885 0003 	stmia.w	r5, {r0, r1}
 801a0dc:	4629      	mov	r1, r5
 801a0de:	4620      	mov	r0, r4
 801a0e0:	4790      	blx	r2
 801a0e2:	4621      	mov	r1, r4
 801a0e4:	a815      	add	r0, sp, #84	; 0x54
 801a0e6:	f002 fbcb 	bl	801c880 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a0ea:	a815      	add	r0, sp, #84	; 0x54
 801a0ec:	f001 f956 	bl	801b39c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a0f0:	9b07      	ldr	r3, [sp, #28]
 801a0f2:	4631      	mov	r1, r6
 801a0f4:	4618      	mov	r0, r3
 801a0f6:	f001 f995 	bl	801b424 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801a0fa:	4628      	mov	r0, r5
 801a0fc:	f104 0526 	add.w	r5, r4, #38	; 0x26
 801a100:	f001 f94c 	bl	801b39c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a104:	4628      	mov	r0, r5
 801a106:	f004 f8dd 	bl	801e2c4 <_ZNK8touchgfx6Bitmap7getDataEv>
 801a10a:	9007      	str	r0, [sp, #28]
 801a10c:	2800      	cmp	r0, #0
 801a10e:	f000 80ce 	beq.w	801a2ae <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x262>
 801a112:	f8db 2000 	ldr.w	r2, [fp]
 801a116:	a90d      	add	r1, sp, #52	; 0x34
 801a118:	a809      	add	r0, sp, #36	; 0x24
 801a11a:	9209      	str	r2, [sp, #36]	; 0x24
 801a11c:	f8db 2004 	ldr.w	r2, [fp, #4]
 801a120:	920a      	str	r2, [sp, #40]	; 0x28
 801a122:	f8db 2008 	ldr.w	r2, [fp, #8]
 801a126:	920b      	str	r2, [sp, #44]	; 0x2c
 801a128:	f8db 200c 	ldr.w	r2, [fp, #12]
 801a12c:	920c      	str	r2, [sp, #48]	; 0x30
 801a12e:	f8da 2000 	ldr.w	r2, [sl]
 801a132:	920d      	str	r2, [sp, #52]	; 0x34
 801a134:	f8da 2004 	ldr.w	r2, [sl, #4]
 801a138:	920e      	str	r2, [sp, #56]	; 0x38
 801a13a:	f8da 2008 	ldr.w	r2, [sl, #8]
 801a13e:	920f      	str	r2, [sp, #60]	; 0x3c
 801a140:	f8da 200c 	ldr.w	r2, [sl, #12]
 801a144:	9210      	str	r2, [sp, #64]	; 0x40
 801a146:	4632      	mov	r2, r6
 801a148:	f001 f950 	bl	801b3ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 801a14c:	4632      	mov	r2, r6
 801a14e:	a90e      	add	r1, sp, #56	; 0x38
 801a150:	a80a      	add	r0, sp, #40	; 0x28
 801a152:	f001 f94b 	bl	801b3ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 801a156:	4632      	mov	r2, r6
 801a158:	a90f      	add	r1, sp, #60	; 0x3c
 801a15a:	a80b      	add	r0, sp, #44	; 0x2c
 801a15c:	f001 f946 	bl	801b3ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 801a160:	4632      	mov	r2, r6
 801a162:	a910      	add	r1, sp, #64	; 0x40
 801a164:	a80c      	add	r0, sp, #48	; 0x30
 801a166:	f001 f941 	bl	801b3ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 801a16a:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 801a16e:	edd7 3a00 	vldr	s7, [r7]
 801a172:	eef0 6a67 	vmov.f32	s13, s15
 801a176:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 801a17a:	ed97 5a01 	vldr	s10, [r7, #4]
 801a17e:	eeb0 7a67 	vmov.f32	s14, s15
 801a182:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 801a186:	eefe 6ace 	vcvt.s32.f32	s13, s13, #4
 801a18a:	edd9 2a00 	vldr	s5, [r9]
 801a18e:	eeb0 6a67 	vmov.f32	s12, s15
 801a192:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
 801a196:	eebe 7ace 	vcvt.s32.f32	s14, s14, #4
 801a19a:	ed98 3a00 	vldr	s6, [r8]
 801a19e:	ed99 4a01 	vldr	s8, [r9, #4]
 801a1a2:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 801a1a6:	edd8 4a01 	vldr	s9, [r8, #4]
 801a1aa:	edd9 5a02 	vldr	s11, [r9, #8]
 801a1ae:	f8d9 e00c 	ldr.w	lr, [r9, #12]
 801a1b2:	ee16 6a10 	vmov	r6, s12
 801a1b6:	eeb0 6a67 	vmov.f32	s12, s15
 801a1ba:	eddd 7a0f 	vldr	s15, [sp, #60]	; 0x3c
 801a1be:	f8d8 c00c 	ldr.w	ip, [r8, #12]
 801a1c2:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 801a1c6:	edcd 6a1f 	vstr	s13, [sp, #124]	; 0x7c
 801a1ca:	edcd 2a20 	vstr	s5, [sp, #128]	; 0x80
 801a1ce:	ed8d 3a21 	vstr	s6, [sp, #132]	; 0x84
 801a1d2:	ee16 0a10 	vmov	r0, s12
 801a1d6:	eeb0 6a67 	vmov.f32	s12, s15
 801a1da:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
 801a1de:	edcd 3a22 	vstr	s7, [sp, #136]	; 0x88
 801a1e2:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 801a1e6:	ed8d 7a23 	vstr	s14, [sp, #140]	; 0x8c
 801a1ea:	ed8d 4a25 	vstr	s8, [sp, #148]	; 0x94
 801a1ee:	edcd 4a26 	vstr	s9, [sp, #152]	; 0x98
 801a1f2:	ee16 1a10 	vmov	r1, s12
 801a1f6:	eeb0 6a67 	vmov.f32	s12, s15
 801a1fa:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
 801a1fe:	ed8d 5a27 	vstr	s10, [sp, #156]	; 0x9c
 801a202:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 801a206:	f8d7 a008 	ldr.w	sl, [r7, #8]
 801a20a:	f8d8 b008 	ldr.w	fp, [r8, #8]
 801a20e:	eefe 7ace 	vcvt.s32.f32	s15, s15, #4
 801a212:	68ff      	ldr	r7, [r7, #12]
 801a214:	ee16 2a10 	vmov	r2, s12
 801a218:	ed9d 6a09 	vldr	s12, [sp, #36]	; 0x24
 801a21c:	9624      	str	r6, [sp, #144]	; 0x90
 801a21e:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 801a222:	e9cd 0128 	strd	r0, r1, [sp, #160]	; 0xa0
 801a226:	ed8d 6a1e 	vstr	s12, [sp, #120]	; 0x78
 801a22a:	4628      	mov	r0, r5
 801a22c:	edcd 5a2a 	vstr	s11, [sp, #168]	; 0xa8
 801a230:	9b06      	ldr	r3, [sp, #24]
 801a232:	922d      	str	r2, [sp, #180]	; 0xb4
 801a234:	4a21      	ldr	r2, [pc, #132]	; (801a2bc <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x270>)
 801a236:	9317      	str	r3, [sp, #92]	; 0x5c
 801a238:	8812      	ldrh	r2, [r2, #0]
 801a23a:	9b07      	ldr	r3, [sp, #28]
 801a23c:	9218      	str	r2, [sp, #96]	; 0x60
 801a23e:	9319      	str	r3, [sp, #100]	; 0x64
 801a240:	edcd 7a2e 	vstr	s15, [sp, #184]	; 0xb8
 801a244:	f8cd e0bc 	str.w	lr, [sp, #188]	; 0xbc
 801a248:	f8cd c0c0 	str.w	ip, [sp, #192]	; 0xc0
 801a24c:	f8cd b0ac 	str.w	fp, [sp, #172]	; 0xac
 801a250:	f8cd a0b0 	str.w	sl, [sp, #176]	; 0xb0
 801a254:	9731      	str	r7, [sp, #196]	; 0xc4
 801a256:	f004 f865 	bl	801e324 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801a25a:	901a      	str	r0, [sp, #104]	; 0x68
 801a25c:	4628      	mov	r0, r5
 801a25e:	f003 ff45 	bl	801e0ec <_ZNK8touchgfx6Bitmap8getWidthEv>
 801a262:	901b      	str	r0, [sp, #108]	; 0x6c
 801a264:	4628      	mov	r0, r5
 801a266:	f003 ff75 	bl	801e154 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801a26a:	901c      	str	r0, [sp, #112]	; 0x70
 801a26c:	4628      	mov	r0, r5
 801a26e:	f003 ff3d 	bl	801e0ec <_ZNK8touchgfx6Bitmap8getWidthEv>
 801a272:	4b13      	ldr	r3, [pc, #76]	; (801a2c0 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x274>)
 801a274:	901d      	str	r0, [sp, #116]	; 0x74
 801a276:	681b      	ldr	r3, [r3, #0]
 801a278:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801a27c:	b10a      	cbz	r2, 801a282 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x236>
 801a27e:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
 801a280:	b905      	cbnz	r5, 801a284 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x238>
 801a282:	689d      	ldr	r5, [r3, #8]
 801a284:	682b      	ldr	r3, [r5, #0]
 801a286:	4620      	mov	r0, r4
 801a288:	6c1e      	ldr	r6, [r3, #64]	; 0x40
 801a28a:	f7ff fed5 	bl	801a038 <_ZNK8touchgfx13ScalableImage19lookupRenderVariantEv>
 801a28e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a292:	aa1e      	add	r2, sp, #120	; 0x78
 801a294:	a917      	add	r1, sp, #92	; 0x5c
 801a296:	9304      	str	r3, [sp, #16]
 801a298:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 801a29c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 801a2a0:	ab13      	add	r3, sp, #76	; 0x4c
 801a2a2:	4628      	mov	r0, r5
 801a2a4:	9301      	str	r3, [sp, #4]
 801a2a6:	ab15      	add	r3, sp, #84	; 0x54
 801a2a8:	9300      	str	r3, [sp, #0]
 801a2aa:	ab19      	add	r3, sp, #100	; 0x64
 801a2ac:	47b0      	blx	r6
 801a2ae:	b033      	add	sp, #204	; 0xcc
 801a2b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a2b4:	2300      	movs	r3, #0
 801a2b6:	9312      	str	r3, [sp, #72]	; 0x48
 801a2b8:	e706      	b.n	801a0c8 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x7c>
 801a2ba:	bf00      	nop
 801a2bc:	24026176 	.word	0x24026176
 801a2c0:	2402617c 	.word	0x2402617c

0801a2c4 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE>:
 801a2c4:	b570      	push	{r4, r5, r6, lr}
 801a2c6:	ed2d 8b04 	vpush	{d8-d9}
 801a2ca:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 801a2ce:	b098      	sub	sp, #96	; 0x60
 801a2d0:	4604      	mov	r4, r0
 801a2d2:	460e      	mov	r6, r1
 801a2d4:	2b00      	cmp	r3, #0
 801a2d6:	d065      	beq.n	801a3a4 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0xe0>
 801a2d8:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 801a2dc:	f100 0526 	add.w	r5, r0, #38	; 0x26
 801a2e0:	ed9f 8a37 	vldr	s16, [pc, #220]	; 801a3c0 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0xfc>
 801a2e4:	ee09 3a10 	vmov	s18, r3
 801a2e8:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801a2ec:	4628      	mov	r0, r5
 801a2ee:	ee08 3a90 	vmov	s17, r3
 801a2f2:	4b34      	ldr	r3, [pc, #208]	; (801a3c4 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x100>)
 801a2f4:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
 801a2f8:	930c      	str	r3, [sp, #48]	; 0x30
 801a2fa:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 801a2fe:	930d      	str	r3, [sp, #52]	; 0x34
 801a300:	930e      	str	r3, [sp, #56]	; 0x38
 801a302:	ee39 9a08 	vadd.f32	s18, s18, s16
 801a306:	930f      	str	r3, [sp, #60]	; 0x3c
 801a308:	f003 fef0 	bl	801e0ec <_ZNK8touchgfx6Bitmap8getWidthEv>
 801a30c:	ee07 0a90 	vmov	s15, r0
 801a310:	4628      	mov	r0, r5
 801a312:	ee78 8a88 	vadd.f32	s17, s17, s16
 801a316:	eef8 9ae7 	vcvt.f32.s32	s19, s15
 801a31a:	f003 ff1b 	bl	801e154 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801a31e:	4b2a      	ldr	r3, [pc, #168]	; (801a3c8 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x104>)
 801a320:	ee07 0a90 	vmov	s15, r0
 801a324:	781b      	ldrb	r3, [r3, #0]
 801a326:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801a32a:	eef0 7a48 	vmov.f32	s15, s16
 801a32e:	2b01      	cmp	r3, #1
 801a330:	d13c      	bne.n	801a3ac <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0xe8>
 801a332:	eef0 6a69 	vmov.f32	s13, s19
 801a336:	ee19 3a90 	vmov	r3, s19
 801a33a:	eeb0 6a47 	vmov.f32	s12, s14
 801a33e:	eef0 5a47 	vmov.f32	s11, s14
 801a342:	eef0 9a48 	vmov.f32	s19, s16
 801a346:	eeb0 7a48 	vmov.f32	s14, s16
 801a34a:	9314      	str	r3, [sp, #80]	; 0x50
 801a34c:	ab14      	add	r3, sp, #80	; 0x50
 801a34e:	2200      	movs	r2, #0
 801a350:	4631      	mov	r1, r6
 801a352:	9303      	str	r3, [sp, #12]
 801a354:	ab10      	add	r3, sp, #64	; 0x40
 801a356:	4620      	mov	r0, r4
 801a358:	edcd 7a04 	vstr	s15, [sp, #16]
 801a35c:	9302      	str	r3, [sp, #8]
 801a35e:	ab0c      	add	r3, sp, #48	; 0x30
 801a360:	ed8d 9a05 	vstr	s18, [sp, #20]
 801a364:	9301      	str	r3, [sp, #4]
 801a366:	ab08      	add	r3, sp, #32
 801a368:	ed8d 9a06 	vstr	s18, [sp, #24]
 801a36c:	9300      	str	r3, [sp, #0]
 801a36e:	ab04      	add	r3, sp, #16
 801a370:	edcd 7a07 	vstr	s15, [sp, #28]
 801a374:	edcd 7a08 	vstr	s15, [sp, #32]
 801a378:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
 801a37c:	edcd 8a0a 	vstr	s17, [sp, #40]	; 0x28
 801a380:	edcd 8a0b 	vstr	s17, [sp, #44]	; 0x2c
 801a384:	edcd 7a10 	vstr	s15, [sp, #64]	; 0x40
 801a388:	edcd 9a11 	vstr	s19, [sp, #68]	; 0x44
 801a38c:	edcd 5a12 	vstr	s11, [sp, #72]	; 0x48
 801a390:	ed8d 6a13 	vstr	s12, [sp, #76]	; 0x4c
 801a394:	edcd 7a15 	vstr	s15, [sp, #84]	; 0x54
 801a398:	ed8d 7a16 	vstr	s14, [sp, #88]	; 0x58
 801a39c:	edcd 6a17 	vstr	s13, [sp, #92]	; 0x5c
 801a3a0:	f7ff fe54 	bl	801a04c <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_>
 801a3a4:	b018      	add	sp, #96	; 0x60
 801a3a6:	ecbd 8b04 	vpop	{d8-d9}
 801a3aa:	bd70      	pop	{r4, r5, r6, pc}
 801a3ac:	eef0 6a47 	vmov.f32	s13, s14
 801a3b0:	ee18 3a10 	vmov	r3, s16
 801a3b4:	eef0 5a69 	vmov.f32	s11, s19
 801a3b8:	eeb0 6a48 	vmov.f32	s12, s16
 801a3bc:	e7c5      	b.n	801a34a <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x86>
 801a3be:	bf00      	nop
 801a3c0:	00000000 	.word	0x00000000
 801a3c4:	42c80000 	.word	0x42c80000
 801a3c8:	24026174 	.word	0x24026174

0801a3cc <_ZNK8touchgfx3Box12getSolidRectEv>:
 801a3cc:	2300      	movs	r3, #0
 801a3ce:	8083      	strh	r3, [r0, #4]
 801a3d0:	80c3      	strh	r3, [r0, #6]
 801a3d2:	8003      	strh	r3, [r0, #0]
 801a3d4:	8043      	strh	r3, [r0, #2]
 801a3d6:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 801a3da:	2bff      	cmp	r3, #255	; 0xff
 801a3dc:	bf01      	itttt	eq
 801a3de:	890b      	ldrheq	r3, [r1, #8]
 801a3e0:	8083      	strheq	r3, [r0, #4]
 801a3e2:	894b      	ldrheq	r3, [r1, #10]
 801a3e4:	80c3      	strheq	r3, [r0, #6]
 801a3e6:	4770      	bx	lr

0801a3e8 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 801a3e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a3ea:	4604      	mov	r4, r0
 801a3ec:	466b      	mov	r3, sp
 801a3ee:	6808      	ldr	r0, [r1, #0]
 801a3f0:	6849      	ldr	r1, [r1, #4]
 801a3f2:	c303      	stmia	r3!, {r0, r1}
 801a3f4:	6823      	ldr	r3, [r4, #0]
 801a3f6:	4669      	mov	r1, sp
 801a3f8:	4620      	mov	r0, r4
 801a3fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a3fc:	4798      	blx	r3
 801a3fe:	4b08      	ldr	r3, [pc, #32]	; (801a420 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 801a400:	681b      	ldr	r3, [r3, #0]
 801a402:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801a406:	b10a      	cbz	r2, 801a40c <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 801a408:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801a40a:	b900      	cbnz	r0, 801a40e <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 801a40c:	6898      	ldr	r0, [r3, #8]
 801a40e:	6803      	ldr	r3, [r0, #0]
 801a410:	4669      	mov	r1, sp
 801a412:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 801a414:	6a1d      	ldr	r5, [r3, #32]
 801a416:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 801a41a:	47a8      	blx	r5
 801a41c:	b003      	add	sp, #12
 801a41e:	bd30      	pop	{r4, r5, pc}
 801a420:	2402617c 	.word	0x2402617c

0801a424 <_ZNK8touchgfx3Box17invalidateContentEv>:
 801a424:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 801a428:	b12a      	cbz	r2, 801a436 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 801a42a:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 801a42e:	b112      	cbz	r2, 801a436 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 801a430:	6803      	ldr	r3, [r0, #0]
 801a432:	695b      	ldr	r3, [r3, #20]
 801a434:	4718      	bx	r3
 801a436:	4770      	bx	lr

0801a438 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 801a438:	b570      	push	{r4, r5, r6, lr}
 801a43a:	880b      	ldrh	r3, [r1, #0]
 801a43c:	4605      	mov	r5, r0
 801a43e:	4604      	mov	r4, r0
 801a440:	85c3      	strh	r3, [r0, #46]	; 0x2e
 801a442:	8813      	ldrh	r3, [r2, #0]
 801a444:	f825 3f30 	strh.w	r3, [r5, #48]!
 801a448:	4628      	mov	r0, r5
 801a44a:	f003 fe4f 	bl	801e0ec <_ZNK8touchgfx6Bitmap8getWidthEv>
 801a44e:	4606      	mov	r6, r0
 801a450:	4628      	mov	r0, r5
 801a452:	f003 fe7f 	bl	801e154 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801a456:	6823      	ldr	r3, [r4, #0]
 801a458:	4605      	mov	r5, r0
 801a45a:	4631      	mov	r1, r6
 801a45c:	4620      	mov	r0, r4
 801a45e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a460:	4798      	blx	r3
 801a462:	6823      	ldr	r3, [r4, #0]
 801a464:	4629      	mov	r1, r5
 801a466:	4620      	mov	r0, r4
 801a468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a46a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a46e:	4718      	bx	r3

0801a470 <_ZNK8touchgfx6Button12getSolidRectEv>:
 801a470:	b510      	push	{r4, lr}
 801a472:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 801a476:	4604      	mov	r4, r0
 801a478:	2bff      	cmp	r3, #255	; 0xff
 801a47a:	d006      	beq.n	801a48a <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 801a47c:	2300      	movs	r3, #0
 801a47e:	8003      	strh	r3, [r0, #0]
 801a480:	8043      	strh	r3, [r0, #2]
 801a482:	8083      	strh	r3, [r0, #4]
 801a484:	80c3      	strh	r3, [r0, #6]
 801a486:	4620      	mov	r0, r4
 801a488:	bd10      	pop	{r4, pc}
 801a48a:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 801a48e:	b11b      	cbz	r3, 801a498 <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 801a490:	3130      	adds	r1, #48	; 0x30
 801a492:	f003 fe93 	bl	801e1bc <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801a496:	e7f6      	b.n	801a486 <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 801a498:	312e      	adds	r1, #46	; 0x2e
 801a49a:	e7fa      	b.n	801a492 <_ZNK8touchgfx6Button12getSolidRectEv+0x22>

0801a49c <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 801a49c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a4a0:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 801a4a4:	b08a      	sub	sp, #40	; 0x28
 801a4a6:	4604      	mov	r4, r0
 801a4a8:	4688      	mov	r8, r1
 801a4aa:	2b00      	cmp	r3, #0
 801a4ac:	d066      	beq.n	801a57c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 801a4ae:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 801a4b0:	a805      	add	r0, sp, #20
 801a4b2:	f8ad 3014 	strh.w	r3, [sp, #20]
 801a4b6:	f003 fe19 	bl	801e0ec <_ZNK8touchgfx6Bitmap8getWidthEv>
 801a4ba:	4607      	mov	r7, r0
 801a4bc:	a805      	add	r0, sp, #20
 801a4be:	f003 fe49 	bl	801e154 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801a4c2:	f9b8 6000 	ldrsh.w	r6, [r8]
 801a4c6:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 801a4ca:	2300      	movs	r3, #0
 801a4cc:	4432      	add	r2, r6
 801a4ce:	9306      	str	r3, [sp, #24]
 801a4d0:	b292      	uxth	r2, r2
 801a4d2:	fa0f fc82 	sxth.w	ip, r2
 801a4d6:	459c      	cmp	ip, r3
 801a4d8:	dd52      	ble.n	801a580 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 801a4da:	42b7      	cmp	r7, r6
 801a4dc:	dd50      	ble.n	801a580 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 801a4de:	f9b8 5002 	ldrsh.w	r5, [r8, #2]
 801a4e2:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 801a4e6:	442b      	add	r3, r5
 801a4e8:	b29b      	uxth	r3, r3
 801a4ea:	b219      	sxth	r1, r3
 801a4ec:	2900      	cmp	r1, #0
 801a4ee:	dd47      	ble.n	801a580 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 801a4f0:	42a8      	cmp	r0, r5
 801a4f2:	dd45      	ble.n	801a580 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 801a4f4:	4567      	cmp	r7, ip
 801a4f6:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 801a4fa:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 801a4fe:	bfb8      	it	lt
 801a500:	b2ba      	uxthlt	r2, r7
 801a502:	4288      	cmp	r0, r1
 801a504:	f8ad 6018 	strh.w	r6, [sp, #24]
 801a508:	bfb8      	it	lt
 801a50a:	b283      	uxthlt	r3, r0
 801a50c:	1b92      	subs	r2, r2, r6
 801a50e:	f8ad 501a 	strh.w	r5, [sp, #26]
 801a512:	1b5b      	subs	r3, r3, r5
 801a514:	f8ad 201c 	strh.w	r2, [sp, #28]
 801a518:	f8ad 301e 	strh.w	r3, [sp, #30]
 801a51c:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801a520:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a524:	429a      	cmp	r2, r3
 801a526:	d026      	beq.n	801a576 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 801a528:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801a52c:	2b00      	cmp	r3, #0
 801a52e:	dd22      	ble.n	801a576 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 801a530:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 801a534:	2b00      	cmp	r3, #0
 801a536:	dd1e      	ble.n	801a576 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 801a538:	2300      	movs	r3, #0
 801a53a:	a908      	add	r1, sp, #32
 801a53c:	4620      	mov	r0, r4
 801a53e:	e9cd 3308 	strd	r3, r3, [sp, #32]
 801a542:	6823      	ldr	r3, [r4, #0]
 801a544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a546:	4798      	blx	r3
 801a548:	4b0f      	ldr	r3, [pc, #60]	; (801a588 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xec>)
 801a54a:	681b      	ldr	r3, [r3, #0]
 801a54c:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801a550:	b10a      	cbz	r2, 801a556 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xba>
 801a552:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801a554:	b900      	cbnz	r0, 801a558 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xbc>
 801a556:	6898      	ldr	r0, [r3, #8]
 801a558:	2501      	movs	r5, #1
 801a55a:	6801      	ldr	r1, [r0, #0]
 801a55c:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801a560:	9502      	str	r5, [sp, #8]
 801a562:	f894 4032 	ldrb.w	r4, [r4, #50]	; 0x32
 801a566:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801a56a:	9401      	str	r4, [sp, #4]
 801a56c:	ac06      	add	r4, sp, #24
 801a56e:	9400      	str	r4, [sp, #0]
 801a570:	688c      	ldr	r4, [r1, #8]
 801a572:	a905      	add	r1, sp, #20
 801a574:	47a0      	blx	r4
 801a576:	b00a      	add	sp, #40	; 0x28
 801a578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a57c:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801a57e:	e797      	b.n	801a4b0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 801a580:	2300      	movs	r3, #0
 801a582:	9307      	str	r3, [sp, #28]
 801a584:	e7ca      	b.n	801a51c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x80>
 801a586:	bf00      	nop
 801a588:	2402617c 	.word	0x2402617c

0801a58c <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 801a58c:	b570      	push	{r4, r5, r6, lr}
 801a58e:	880b      	ldrh	r3, [r1, #0]
 801a590:	460d      	mov	r5, r1
 801a592:	4604      	mov	r4, r0
 801a594:	84c3      	strh	r3, [r0, #38]	; 0x26
 801a596:	4608      	mov	r0, r1
 801a598:	f003 fda8 	bl	801e0ec <_ZNK8touchgfx6Bitmap8getWidthEv>
 801a59c:	4606      	mov	r6, r0
 801a59e:	4628      	mov	r0, r5
 801a5a0:	f003 fdd8 	bl	801e154 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801a5a4:	6823      	ldr	r3, [r4, #0]
 801a5a6:	4605      	mov	r5, r0
 801a5a8:	4631      	mov	r1, r6
 801a5aa:	4620      	mov	r0, r4
 801a5ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a5ae:	4798      	blx	r3
 801a5b0:	6823      	ldr	r3, [r4, #0]
 801a5b2:	4629      	mov	r1, r5
 801a5b4:	4620      	mov	r0, r4
 801a5b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a5b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a5bc:	4718      	bx	r3

0801a5be <_ZNK8touchgfx5Image12getSolidRectEv>:
 801a5be:	b510      	push	{r4, lr}
 801a5c0:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 801a5c4:	4604      	mov	r4, r0
 801a5c6:	2bff      	cmp	r3, #255	; 0xff
 801a5c8:	d006      	beq.n	801a5d8 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 801a5ca:	2300      	movs	r3, #0
 801a5cc:	8003      	strh	r3, [r0, #0]
 801a5ce:	8043      	strh	r3, [r0, #2]
 801a5d0:	8083      	strh	r3, [r0, #4]
 801a5d2:	80c3      	strh	r3, [r0, #6]
 801a5d4:	4620      	mov	r0, r4
 801a5d6:	bd10      	pop	{r4, pc}
 801a5d8:	3126      	adds	r1, #38	; 0x26
 801a5da:	f003 fdef 	bl	801e1bc <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801a5de:	e7f9      	b.n	801a5d4 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

0801a5e0 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 801a5e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a5e4:	4604      	mov	r4, r0
 801a5e6:	b088      	sub	sp, #32
 801a5e8:	2500      	movs	r5, #0
 801a5ea:	460f      	mov	r7, r1
 801a5ec:	f854 3b26 	ldr.w	r3, [r4], #38
 801a5f0:	a904      	add	r1, sp, #16
 801a5f2:	4606      	mov	r6, r0
 801a5f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a5f6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801a5fa:	4798      	blx	r3
 801a5fc:	4620      	mov	r0, r4
 801a5fe:	f003 fd75 	bl	801e0ec <_ZNK8touchgfx6Bitmap8getWidthEv>
 801a602:	4680      	mov	r8, r0
 801a604:	4620      	mov	r0, r4
 801a606:	f003 fda5 	bl	801e154 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801a60a:	9506      	str	r5, [sp, #24]
 801a60c:	ad06      	add	r5, sp, #24
 801a60e:	f8ad 001e 	strh.w	r0, [sp, #30]
 801a612:	4639      	mov	r1, r7
 801a614:	f8ad 801c 	strh.w	r8, [sp, #28]
 801a618:	4628      	mov	r0, r5
 801a61a:	f7fe fc55 	bl	8018ec8 <_ZN8touchgfx4RectaNERKS0_>
 801a61e:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801a622:	2b00      	cmp	r3, #0
 801a624:	dd19      	ble.n	801a65a <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 801a626:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 801a62a:	2b00      	cmp	r3, #0
 801a62c:	dd15      	ble.n	801a65a <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 801a62e:	4b0c      	ldr	r3, [pc, #48]	; (801a660 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 801a630:	681b      	ldr	r3, [r3, #0]
 801a632:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801a636:	b10a      	cbz	r2, 801a63c <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 801a638:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801a63a:	b900      	cbnz	r0, 801a63e <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 801a63c:	6898      	ldr	r0, [r3, #8]
 801a63e:	2701      	movs	r7, #1
 801a640:	6801      	ldr	r1, [r0, #0]
 801a642:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801a646:	9702      	str	r7, [sp, #8]
 801a648:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 801a64c:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801a650:	e9cd 5600 	strd	r5, r6, [sp]
 801a654:	688d      	ldr	r5, [r1, #8]
 801a656:	4621      	mov	r1, r4
 801a658:	47a8      	blx	r5
 801a65a:	b008      	add	sp, #32
 801a65c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a660:	2402617c 	.word	0x2402617c

0801a664 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 801a664:	b510      	push	{r4, lr}
 801a666:	6803      	ldr	r3, [r0, #0]
 801a668:	460c      	mov	r4, r1
 801a66a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a66c:	4798      	blx	r3
 801a66e:	1b03      	subs	r3, r0, r4
 801a670:	4258      	negs	r0, r3
 801a672:	4158      	adcs	r0, r3
 801a674:	bd10      	pop	{r4, pc}
	...

0801a678 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 801a678:	4b01      	ldr	r3, [pc, #4]	; (801a680 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 801a67a:	6019      	str	r1, [r3, #0]
 801a67c:	4770      	bx	lr
 801a67e:	bf00      	nop
 801a680:	24026184 	.word	0x24026184

0801a684 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 801a684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a688:	4696      	mov	lr, r2
 801a68a:	b097      	sub	sp, #92	; 0x5c
 801a68c:	4605      	mov	r5, r0
 801a68e:	4614      	mov	r4, r2
 801a690:	460e      	mov	r6, r1
 801a692:	461f      	mov	r7, r3
 801a694:	f10d 0c1c 	add.w	ip, sp, #28
 801a698:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 801a69c:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 801a6a0:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 801a6a4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801a6a8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a6ac:	f8de 3000 	ldr.w	r3, [lr]
 801a6b0:	f104 0e14 	add.w	lr, r4, #20
 801a6b4:	f8cc 3000 	str.w	r3, [ip]
 801a6b8:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801a6bc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801a6c0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a6c4:	f8de 3000 	ldr.w	r3, [lr]
 801a6c8:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 801a6cc:	f8cc 3000 	str.w	r3, [ip]
 801a6d0:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 801a6d4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801a6d8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a6dc:	f8de 3000 	ldr.w	r3, [lr]
 801a6e0:	4631      	mov	r1, r6
 801a6e2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801a6e4:	4628      	mov	r0, r5
 801a6e6:	f8cc 3000 	str.w	r3, [ip]
 801a6ea:	682b      	ldr	r3, [r5, #0]
 801a6ec:	9201      	str	r2, [sp, #4]
 801a6ee:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801a6f0:	f8cd 8008 	str.w	r8, [sp, #8]
 801a6f4:	9200      	str	r2, [sp, #0]
 801a6f6:	aa07      	add	r2, sp, #28
 801a6f8:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801a6fc:	f8d3 b03c 	ldr.w	fp, [r3, #60]	; 0x3c
 801a700:	463b      	mov	r3, r7
 801a702:	47d8      	blx	fp
 801a704:	46a6      	mov	lr, r4
 801a706:	f10d 0c1c 	add.w	ip, sp, #28
 801a70a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801a70e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a712:	f8de 3000 	ldr.w	r3, [lr]
 801a716:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 801a71a:	343c      	adds	r4, #60	; 0x3c
 801a71c:	f8cc 3000 	str.w	r3, [ip]
 801a720:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801a724:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801a728:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a72c:	f8de 3000 	ldr.w	r3, [lr]
 801a730:	f8cc 3000 	str.w	r3, [ip]
 801a734:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 801a738:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a73a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a73e:	6823      	ldr	r3, [r4, #0]
 801a740:	4631      	mov	r1, r6
 801a742:	4628      	mov	r0, r5
 801a744:	f8cc 3000 	str.w	r3, [ip]
 801a748:	682b      	ldr	r3, [r5, #0]
 801a74a:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801a74e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801a750:	f8cd 8008 	str.w	r8, [sp, #8]
 801a754:	9201      	str	r2, [sp, #4]
 801a756:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801a758:	9200      	str	r2, [sp, #0]
 801a75a:	aa07      	add	r2, sp, #28
 801a75c:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 801a75e:	463b      	mov	r3, r7
 801a760:	47a0      	blx	r4
 801a762:	b017      	add	sp, #92	; 0x5c
 801a764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a768 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801a768:	2000      	movs	r0, #0
 801a76a:	4770      	bx	lr

0801a76c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 801a76c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a770:	b08d      	sub	sp, #52	; 0x34
 801a772:	4688      	mov	r8, r1
 801a774:	f8d3 c000 	ldr.w	ip, [r3]
 801a778:	9916      	ldr	r1, [sp, #88]	; 0x58
 801a77a:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 801a77e:	680f      	ldr	r7, [r1, #0]
 801a780:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 801a784:	eba7 070c 	sub.w	r7, r7, ip
 801a788:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 801a78c:	edd3 6a07 	vldr	s13, [r3, #28]
 801a790:	42bc      	cmp	r4, r7
 801a792:	9918      	ldr	r1, [sp, #96]	; 0x60
 801a794:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 801a798:	bfa8      	it	ge
 801a79a:	463c      	movge	r4, r7
 801a79c:	f9b1 9000 	ldrsh.w	r9, [r1]
 801a7a0:	f9ba 1000 	ldrsh.w	r1, [sl]
 801a7a4:	ee07 4a90 	vmov	s15, r4
 801a7a8:	eb09 0e0c 	add.w	lr, r9, ip
 801a7ac:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 801a7b0:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 801a7b4:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 801a7b8:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 801a7bc:	4571      	cmp	r1, lr
 801a7be:	ee25 4a04 	vmul.f32	s8, s10, s8
 801a7c2:	ee65 4a24 	vmul.f32	s9, s10, s9
 801a7c6:	ee25 5a27 	vmul.f32	s10, s10, s15
 801a7ca:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801a7ce:	ee71 0aa4 	vadd.f32	s1, s3, s9
 801a7d2:	ee32 1a05 	vadd.f32	s2, s4, s10
 801a7d6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801a7da:	ee36 0a84 	vadd.f32	s0, s13, s8
 801a7de:	ee61 1a87 	vmul.f32	s3, s3, s14
 801a7e2:	ee22 2a07 	vmul.f32	s4, s4, s14
 801a7e6:	f340 808c 	ble.w	801a902 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 801a7ea:	eba1 060e 	sub.w	r6, r1, lr
 801a7ee:	fb96 f5f4 	sdiv	r5, r6, r4
 801a7f2:	ee07 5a10 	vmov	s14, r5
 801a7f6:	2d00      	cmp	r5, #0
 801a7f8:	fb04 6615 	mls	r6, r4, r5, r6
 801a7fc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a800:	eea7 0a04 	vfma.f32	s0, s14, s8
 801a804:	eee7 0a24 	vfma.f32	s1, s14, s9
 801a808:	eea7 1a05 	vfma.f32	s2, s14, s10
 801a80c:	dd12      	ble.n	801a834 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 801a80e:	ee70 6a44 	vsub.f32	s13, s0, s8
 801a812:	ee70 1ae4 	vsub.f32	s3, s1, s9
 801a816:	ee31 2a45 	vsub.f32	s4, s2, s10
 801a81a:	eef5 6a40 	vcmp.f32	s13, #0.0
 801a81e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a822:	bf14      	ite	ne
 801a824:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 801a828:	eeb0 7a67 	vmoveq.f32	s14, s15
 801a82c:	ee61 1a87 	vmul.f32	s3, s3, s14
 801a830:	ee22 2a07 	vmul.f32	s4, s4, s14
 801a834:	fb05 f204 	mul.w	r2, r5, r4
 801a838:	1abf      	subs	r7, r7, r2
 801a83a:	4494      	add	ip, r2
 801a83c:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 801a840:	4411      	add	r1, r2
 801a842:	eb09 020c 	add.w	r2, r9, ip
 801a846:	b209      	sxth	r1, r1
 801a848:	443a      	add	r2, r7
 801a84a:	428a      	cmp	r2, r1
 801a84c:	bfc4      	itt	gt
 801a84e:	eba1 0209 	subgt.w	r2, r1, r9
 801a852:	eba2 070c 	subgt.w	r7, r2, ip
 801a856:	2f00      	cmp	r7, #0
 801a858:	dd50      	ble.n	801a8fc <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 801a85a:	fb97 f1f4 	sdiv	r1, r7, r4
 801a85e:	fb04 7211 	mls	r2, r4, r1, r7
 801a862:	b90a      	cbnz	r2, 801a868 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 801a864:	3901      	subs	r1, #1
 801a866:	4622      	mov	r2, r4
 801a868:	eec7 3a80 	vdiv.f32	s7, s15, s0
 801a86c:	6840      	ldr	r0, [r0, #4]
 801a86e:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 801a872:	44b6      	add	lr, r6
 801a874:	f8d0 a000 	ldr.w	sl, [r0]
 801a878:	2900      	cmp	r1, #0
 801a87a:	bfcc      	ite	gt
 801a87c:	46a1      	movgt	r9, r4
 801a87e:	4691      	movle	r9, r2
 801a880:	900b      	str	r0, [sp, #44]	; 0x2c
 801a882:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801a884:	fb04 e505 	mla	r5, r4, r5, lr
 801a888:	eef0 6a42 	vmov.f32	s13, s4
 801a88c:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 801a890:	9008      	str	r0, [sp, #32]
 801a892:	eeb0 7a61 	vmov.f32	s14, s3
 801a896:	9818      	ldr	r0, [sp, #96]	; 0x60
 801a898:	695b      	ldr	r3, [r3, #20]
 801a89a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a89e:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 801a8a2:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801a8a6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801a8a8:	445b      	add	r3, fp
 801a8aa:	9307      	str	r3, [sp, #28]
 801a8ac:	ee16 3a90 	vmov	r3, s13
 801a8b0:	e9cd 8505 	strd	r8, r5, [sp, #20]
 801a8b4:	ee60 2aa3 	vmul.f32	s5, s1, s7
 801a8b8:	ee21 3a23 	vmul.f32	s6, s2, s7
 801a8bc:	ee72 7ae1 	vsub.f32	s15, s5, s3
 801a8c0:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801a8c4:	ee17 7a90 	vmov	r7, s15
 801a8c8:	ee73 7a42 	vsub.f32	s15, s6, s4
 801a8cc:	fb97 f7f4 	sdiv	r7, r7, r4
 801a8d0:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801a8d4:	ee17 ca90 	vmov	ip, s15
 801a8d8:	fb9c fcf4 	sdiv	ip, ip, r4
 801a8dc:	fb0c 3306 	mla	r3, ip, r6, r3
 801a8e0:	9302      	str	r3, [sp, #8]
 801a8e2:	ee17 3a10 	vmov	r3, s14
 801a8e6:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 801a8ea:	fb07 3706 	mla	r7, r7, r6, r3
 801a8ee:	eba9 0306 	sub.w	r3, r9, r6
 801a8f2:	e9cd 4700 	strd	r4, r7, [sp]
 801a8f6:	f8da 4008 	ldr.w	r4, [sl, #8]
 801a8fa:	47a0      	blx	r4
 801a8fc:	b00d      	add	sp, #52	; 0x34
 801a8fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a902:	2500      	movs	r5, #0
 801a904:	462e      	mov	r6, r5
 801a906:	e799      	b.n	801a83c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

0801a908 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 801a908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a90c:	b0db      	sub	sp, #364	; 0x16c
 801a90e:	461d      	mov	r5, r3
 801a910:	4614      	mov	r4, r2
 801a912:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 801a916:	910f      	str	r1, [sp, #60]	; 0x3c
 801a918:	4629      	mov	r1, r5
 801a91a:	930a      	str	r3, [sp, #40]	; 0x28
 801a91c:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 801a920:	9009      	str	r0, [sp, #36]	; 0x24
 801a922:	930b      	str	r3, [sp, #44]	; 0x2c
 801a924:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 801a928:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 801a92c:	9310      	str	r3, [sp, #64]	; 0x40
 801a92e:	6803      	ldr	r3, [r0, #0]
 801a930:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 801a932:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801a936:	47b8      	blx	r7
 801a938:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a93a:	6058      	str	r0, [r3, #4]
 801a93c:	2800      	cmp	r0, #0
 801a93e:	f000 83a1 	beq.w	801b084 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a942:	682b      	ldr	r3, [r5, #0]
 801a944:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 801a948:	ed94 7a02 	vldr	s14, [r4, #8]
 801a94c:	9314      	str	r3, [sp, #80]	; 0x50
 801a94e:	686b      	ldr	r3, [r5, #4]
 801a950:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801a954:	9315      	str	r3, [sp, #84]	; 0x54
 801a956:	4bc1      	ldr	r3, [pc, #772]	; (801ac5c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 801a958:	7819      	ldrb	r1, [r3, #0]
 801a95a:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 801a95e:	2900      	cmp	r1, #0
 801a960:	bf16      	itet	ne
 801a962:	4619      	movne	r1, r3
 801a964:	4611      	moveq	r1, r2
 801a966:	4613      	movne	r3, r2
 801a968:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a96c:	9116      	str	r1, [sp, #88]	; 0x58
 801a96e:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 801a972:	f240 8387 	bls.w	801b084 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a976:	ed94 7a07 	vldr	s14, [r4, #28]
 801a97a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801a97e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a982:	f240 837f 	bls.w	801b084 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a986:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 801a98a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801a98e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a992:	f240 8377 	bls.w	801b084 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a996:	6822      	ldr	r2, [r4, #0]
 801a998:	4bb1      	ldr	r3, [pc, #708]	; (801ac60 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 801a99a:	429a      	cmp	r2, r3
 801a99c:	f2c0 8372 	blt.w	801b084 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a9a0:	49b0      	ldr	r1, [pc, #704]	; (801ac64 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 801a9a2:	6963      	ldr	r3, [r4, #20]
 801a9a4:	428a      	cmp	r2, r1
 801a9a6:	f300 836d 	bgt.w	801b084 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a9aa:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 801a9ae:	48ae      	ldr	r0, [pc, #696]	; (801ac68 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 801a9b0:	33ff      	adds	r3, #255	; 0xff
 801a9b2:	4283      	cmp	r3, r0
 801a9b4:	f200 8366 	bhi.w	801b084 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a9b8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801a9ba:	4dac      	ldr	r5, [pc, #688]	; (801ac6c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 801a9bc:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 801a9c0:	33ff      	adds	r3, #255	; 0xff
 801a9c2:	42ab      	cmp	r3, r5
 801a9c4:	f200 835e 	bhi.w	801b084 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a9c8:	6862      	ldr	r2, [r4, #4]
 801a9ca:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 801a9ce:	33ff      	adds	r3, #255	; 0xff
 801a9d0:	4283      	cmp	r3, r0
 801a9d2:	f200 8357 	bhi.w	801b084 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a9d6:	69a1      	ldr	r1, [r4, #24]
 801a9d8:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 801a9dc:	33ff      	adds	r3, #255	; 0xff
 801a9de:	4283      	cmp	r3, r0
 801a9e0:	f200 8350 	bhi.w	801b084 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a9e4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801a9e6:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 801a9ea:	30ff      	adds	r0, #255	; 0xff
 801a9ec:	42a8      	cmp	r0, r5
 801a9ee:	f200 8349 	bhi.w	801b084 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a9f2:	428a      	cmp	r2, r1
 801a9f4:	f280 8110 	bge.w	801ac18 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 801a9f8:	429a      	cmp	r2, r3
 801a9fa:	f300 8119 	bgt.w	801ac30 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 801a9fe:	4299      	cmp	r1, r3
 801aa00:	f280 811d 	bge.w	801ac3e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 801aa04:	2502      	movs	r5, #2
 801aa06:	2701      	movs	r7, #1
 801aa08:	46a9      	mov	r9, r5
 801aa0a:	46b8      	mov	r8, r7
 801aa0c:	f04f 0a00 	mov.w	sl, #0
 801aa10:	4621      	mov	r1, r4
 801aa12:	a849      	add	r0, sp, #292	; 0x124
 801aa14:	f002 fff2 	bl	801d9fc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 801aa18:	4622      	mov	r2, r4
 801aa1a:	4653      	mov	r3, sl
 801aa1c:	a949      	add	r1, sp, #292	; 0x124
 801aa1e:	f8cd 9000 	str.w	r9, [sp]
 801aa22:	a819      	add	r0, sp, #100	; 0x64
 801aa24:	f003 f91a 	bl	801dc5c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801aa28:	4622      	mov	r2, r4
 801aa2a:	4653      	mov	r3, sl
 801aa2c:	a949      	add	r1, sp, #292	; 0x124
 801aa2e:	f8cd 8000 	str.w	r8, [sp]
 801aa32:	a829      	add	r0, sp, #164	; 0xa4
 801aa34:	f003 f912 	bl	801dc5c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801aa38:	4643      	mov	r3, r8
 801aa3a:	4622      	mov	r2, r4
 801aa3c:	a949      	add	r1, sp, #292	; 0x124
 801aa3e:	f8cd 9000 	str.w	r9, [sp]
 801aa42:	a839      	add	r0, sp, #228	; 0xe4
 801aa44:	f003 f90a 	bl	801dc5c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801aa48:	42af      	cmp	r7, r5
 801aa4a:	af12      	add	r7, sp, #72	; 0x48
 801aa4c:	bfb7      	itett	lt
 801aa4e:	2300      	movlt	r3, #0
 801aa50:	2301      	movge	r3, #1
 801aa52:	ad29      	addlt	r5, sp, #164	; 0xa4
 801aa54:	ac19      	addlt	r4, sp, #100	; 0x64
 801aa56:	bfb1      	iteee	lt
 801aa58:	930e      	strlt	r3, [sp, #56]	; 0x38
 801aa5a:	ad19      	addge	r5, sp, #100	; 0x64
 801aa5c:	930e      	strge	r3, [sp, #56]	; 0x38
 801aa5e:	ac29      	addge	r4, sp, #164	; 0xa4
 801aa60:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801aa62:	e893 0003 	ldmia.w	r3, {r0, r1}
 801aa66:	e887 0003 	stmia.w	r7, {r0, r1}
 801aa6a:	b928      	cbnz	r0, 801aa78 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 801aa6c:	4b80      	ldr	r3, [pc, #512]	; (801ac70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 801aa6e:	6818      	ldr	r0, [r3, #0]
 801aa70:	6803      	ldr	r3, [r0, #0]
 801aa72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801aa74:	4798      	blx	r3
 801aa76:	6038      	str	r0, [r7, #0]
 801aa78:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801aa7a:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801aa7e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801aa82:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801aa84:	930c      	str	r3, [sp, #48]	; 0x30
 801aa86:	990c      	ldr	r1, [sp, #48]	; 0x30
 801aa88:	6963      	ldr	r3, [r4, #20]
 801aa8a:	440b      	add	r3, r1
 801aa8c:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801aa90:	4408      	add	r0, r1
 801aa92:	b200      	sxth	r0, r0
 801aa94:	4283      	cmp	r3, r0
 801aa96:	900d      	str	r0, [sp, #52]	; 0x34
 801aa98:	f280 80dd 	bge.w	801ac56 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 801aa9c:	428b      	cmp	r3, r1
 801aa9e:	da08      	bge.n	801aab2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801aaa0:	2a00      	cmp	r2, #0
 801aaa2:	dd06      	ble.n	801aab2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801aaa4:	1acb      	subs	r3, r1, r3
 801aaa6:	429a      	cmp	r2, r3
 801aaa8:	f2c0 80e4 	blt.w	801ac74 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 801aaac:	2b00      	cmp	r3, #0
 801aaae:	f300 80e2 	bgt.w	801ac76 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 801aab2:	6967      	ldr	r7, [r4, #20]
 801aab4:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 801aab8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801aaba:	443b      	add	r3, r7
 801aabc:	461f      	mov	r7, r3
 801aabe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801aac0:	1bdf      	subs	r7, r3, r7
 801aac2:	4297      	cmp	r7, r2
 801aac4:	bfa8      	it	ge
 801aac6:	4617      	movge	r7, r2
 801aac8:	2f00      	cmp	r7, #0
 801aaca:	f340 8166 	ble.w	801ad9a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 801aace:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801aad0:	6829      	ldr	r1, [r5, #0]
 801aad2:	f9b3 2000 	ldrsh.w	r2, [r3]
 801aad6:	f9bb 3000 	ldrsh.w	r3, [fp]
 801aada:	4411      	add	r1, r2
 801aadc:	6820      	ldr	r0, [r4, #0]
 801aade:	4299      	cmp	r1, r3
 801aae0:	dd1a      	ble.n	801ab18 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 801aae2:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 801aae6:	4402      	add	r2, r0
 801aae8:	440b      	add	r3, r1
 801aaea:	b21b      	sxth	r3, r3
 801aaec:	429a      	cmp	r2, r3
 801aaee:	dc13      	bgt.n	801ab18 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 801aaf0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801aaf2:	a912      	add	r1, sp, #72	; 0x48
 801aaf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801aaf6:	9809      	ldr	r0, [sp, #36]	; 0x24
 801aaf8:	681b      	ldr	r3, [r3, #0]
 801aafa:	9206      	str	r2, [sp, #24]
 801aafc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801aafe:	9500      	str	r5, [sp, #0]
 801ab00:	9205      	str	r2, [sp, #20]
 801ab02:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ab04:	e9cd b203 	strd	fp, r2, [sp, #12]
 801ab08:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801ab0a:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801ab0e:	aa49      	add	r2, sp, #292	; 0x124
 801ab10:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 801ab14:	4623      	mov	r3, r4
 801ab16:	47c8      	blx	r9
 801ab18:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 801ab1c:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 801ab20:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 801ab24:	ee37 7a27 	vadd.f32	s14, s14, s15
 801ab28:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 801ab2c:	68a1      	ldr	r1, [r4, #8]
 801ab2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801ab32:	ed94 6a08 	vldr	s12, [r4, #32]
 801ab36:	edd4 6a07 	vldr	s13, [r4, #28]
 801ab3a:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801ab3e:	ee76 6a86 	vadd.f32	s13, s13, s12
 801ab42:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801ab46:	e9d4 2300 	ldrd	r2, r3, [r4]
 801ab4a:	edc4 6a07 	vstr	s13, [r4, #28]
 801ab4e:	441a      	add	r2, r3
 801ab50:	6963      	ldr	r3, [r4, #20]
 801ab52:	3301      	adds	r3, #1
 801ab54:	6022      	str	r2, [r4, #0]
 801ab56:	6163      	str	r3, [r4, #20]
 801ab58:	69a3      	ldr	r3, [r4, #24]
 801ab5a:	3b01      	subs	r3, #1
 801ab5c:	61a3      	str	r3, [r4, #24]
 801ab5e:	6923      	ldr	r3, [r4, #16]
 801ab60:	440b      	add	r3, r1
 801ab62:	68e1      	ldr	r1, [r4, #12]
 801ab64:	428b      	cmp	r3, r1
 801ab66:	6123      	str	r3, [r4, #16]
 801ab68:	db15      	blt.n	801ab96 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 801ab6a:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 801ab6e:	3201      	adds	r2, #1
 801ab70:	1a5b      	subs	r3, r3, r1
 801ab72:	ee76 6a26 	vadd.f32	s13, s12, s13
 801ab76:	6022      	str	r2, [r4, #0]
 801ab78:	6123      	str	r3, [r4, #16]
 801ab7a:	edc4 6a07 	vstr	s13, [r4, #28]
 801ab7e:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 801ab82:	ee36 7a87 	vadd.f32	s14, s13, s14
 801ab86:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801ab8a:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 801ab8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 801ab92:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801ab96:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 801ab9a:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 801ab9e:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 801aba2:	ee37 7a27 	vadd.f32	s14, s14, s15
 801aba6:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 801abaa:	68a9      	ldr	r1, [r5, #8]
 801abac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801abb0:	ed95 6a08 	vldr	s12, [r5, #32]
 801abb4:	edd5 6a07 	vldr	s13, [r5, #28]
 801abb8:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801abbc:	ee76 6a86 	vadd.f32	s13, s13, s12
 801abc0:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801abc4:	e9d5 2300 	ldrd	r2, r3, [r5]
 801abc8:	edc5 6a07 	vstr	s13, [r5, #28]
 801abcc:	441a      	add	r2, r3
 801abce:	696b      	ldr	r3, [r5, #20]
 801abd0:	3301      	adds	r3, #1
 801abd2:	602a      	str	r2, [r5, #0]
 801abd4:	616b      	str	r3, [r5, #20]
 801abd6:	69ab      	ldr	r3, [r5, #24]
 801abd8:	3b01      	subs	r3, #1
 801abda:	61ab      	str	r3, [r5, #24]
 801abdc:	692b      	ldr	r3, [r5, #16]
 801abde:	440b      	add	r3, r1
 801abe0:	68e9      	ldr	r1, [r5, #12]
 801abe2:	428b      	cmp	r3, r1
 801abe4:	612b      	str	r3, [r5, #16]
 801abe6:	db15      	blt.n	801ac14 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 801abe8:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801abec:	3201      	adds	r2, #1
 801abee:	1a5b      	subs	r3, r3, r1
 801abf0:	ee76 6a26 	vadd.f32	s13, s12, s13
 801abf4:	602a      	str	r2, [r5, #0]
 801abf6:	612b      	str	r3, [r5, #16]
 801abf8:	edc5 6a07 	vstr	s13, [r5, #28]
 801abfc:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 801ac00:	ee36 7a87 	vadd.f32	s14, s13, s14
 801ac04:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801ac08:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 801ac0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 801ac10:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801ac14:	3f01      	subs	r7, #1
 801ac16:	e757      	b.n	801aac8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 801ac18:	4299      	cmp	r1, r3
 801ac1a:	dc13      	bgt.n	801ac44 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 801ac1c:	429a      	cmp	r2, r3
 801ac1e:	da14      	bge.n	801ac4a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 801ac20:	2502      	movs	r5, #2
 801ac22:	2703      	movs	r7, #3
 801ac24:	f04f 0800 	mov.w	r8, #0
 801ac28:	46a9      	mov	r9, r5
 801ac2a:	f04f 0a01 	mov.w	sl, #1
 801ac2e:	e6ef      	b.n	801aa10 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 801ac30:	2501      	movs	r5, #1
 801ac32:	2700      	movs	r7, #0
 801ac34:	46a9      	mov	r9, r5
 801ac36:	46b8      	mov	r8, r7
 801ac38:	f04f 0a02 	mov.w	sl, #2
 801ac3c:	e6e8      	b.n	801aa10 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 801ac3e:	2501      	movs	r5, #1
 801ac40:	2702      	movs	r7, #2
 801ac42:	e6e1      	b.n	801aa08 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 801ac44:	2500      	movs	r5, #0
 801ac46:	2701      	movs	r7, #1
 801ac48:	e7f4      	b.n	801ac34 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 801ac4a:	2702      	movs	r7, #2
 801ac4c:	2503      	movs	r5, #3
 801ac4e:	f04f 0900 	mov.w	r9, #0
 801ac52:	46b8      	mov	r8, r7
 801ac54:	e7e9      	b.n	801ac2a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 801ac56:	4613      	mov	r3, r2
 801ac58:	e728      	b.n	801aaac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 801ac5a:	bf00      	nop
 801ac5c:	24026174 	.word	0x24026174
 801ac60:	fffd8f01 	.word	0xfffd8f01
 801ac64:	00027100 	.word	0x00027100
 801ac68:	0004e1ff 	.word	0x0004e1ff
 801ac6c:	0004e1fe 	.word	0x0004e1fe
 801ac70:	2402617c 	.word	0x2402617c
 801ac74:	4613      	mov	r3, r2
 801ac76:	992b      	ldr	r1, [sp, #172]	; 0xac
 801ac78:	469e      	mov	lr, r3
 801ac7a:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 801ac7c:	469c      	mov	ip, r3
 801ac7e:	9111      	str	r1, [sp, #68]	; 0x44
 801ac80:	f04f 0900 	mov.w	r9, #0
 801ac84:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 801ac88:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 801ac8c:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 801ac90:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 801ac94:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 801ac98:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 801ac9c:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 801aca0:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 801aca4:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 801aca8:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 801acac:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 801acb0:	f1bc 0f00 	cmp.w	ip, #0
 801acb4:	d147      	bne.n	801ad46 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 801acb6:	eb03 0c07 	add.w	ip, r3, r7
 801acba:	1ad7      	subs	r7, r2, r3
 801acbc:	f1b9 0f00 	cmp.w	r9, #0
 801acc0:	d009      	beq.n	801acd6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 801acc2:	9029      	str	r0, [sp, #164]	; 0xa4
 801acc4:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 801acc8:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 801accc:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 801acd0:	912d      	str	r1, [sp, #180]	; 0xb4
 801acd2:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 801acd6:	991b      	ldr	r1, [sp, #108]	; 0x6c
 801acd8:	f04f 0800 	mov.w	r8, #0
 801acdc:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 801ace0:	9111      	str	r1, [sp, #68]	; 0x44
 801ace2:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 801ace6:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 801acea:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801acee:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 801acf2:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 801acf6:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 801acfa:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 801acfe:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 801ad02:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 801ad06:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 801ad0a:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 801ad0e:	f1be 0f00 	cmp.w	lr, #0
 801ad12:	d031      	beq.n	801ad78 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 801ad14:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801ad16:	4450      	add	r0, sl
 801ad18:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801ad1c:	4431      	add	r1, r6
 801ad1e:	ee37 7a04 	vadd.f32	s14, s14, s8
 801ad22:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801ad26:	4549      	cmp	r1, r9
 801ad28:	db08      	blt.n	801ad3c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 801ad2a:	ee77 7a85 	vadd.f32	s15, s15, s10
 801ad2e:	3001      	adds	r0, #1
 801ad30:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801ad34:	eba1 0109 	sub.w	r1, r1, r9
 801ad38:	ee37 7a06 	vadd.f32	s14, s14, s12
 801ad3c:	f10e 3eff 	add.w	lr, lr, #4294967295
 801ad40:	f04f 0801 	mov.w	r8, #1
 801ad44:	e7e3      	b.n	801ad0e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 801ad46:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801ad48:	4450      	add	r0, sl
 801ad4a:	ee37 7a24 	vadd.f32	s14, s14, s9
 801ad4e:	4431      	add	r1, r6
 801ad50:	ee77 7a84 	vadd.f32	s15, s15, s8
 801ad54:	ee76 6aa3 	vadd.f32	s13, s13, s7
 801ad58:	4541      	cmp	r1, r8
 801ad5a:	db08      	blt.n	801ad6e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 801ad5c:	ee76 6a85 	vadd.f32	s13, s13, s10
 801ad60:	3001      	adds	r0, #1
 801ad62:	ee37 7a25 	vadd.f32	s14, s14, s11
 801ad66:	eba1 0108 	sub.w	r1, r1, r8
 801ad6a:	ee77 7a86 	vadd.f32	s15, s15, s12
 801ad6e:	f10c 3cff 	add.w	ip, ip, #4294967295
 801ad72:	f04f 0901 	mov.w	r9, #1
 801ad76:	e79b      	b.n	801acb0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 801ad78:	449c      	add	ip, r3
 801ad7a:	1aff      	subs	r7, r7, r3
 801ad7c:	f1b8 0f00 	cmp.w	r8, #0
 801ad80:	d009      	beq.n	801ad96 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 801ad82:	9019      	str	r0, [sp, #100]	; 0x64
 801ad84:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 801ad88:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 801ad8c:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 801ad90:	911d      	str	r1, [sp, #116]	; 0x74
 801ad92:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 801ad96:	1ad2      	subs	r2, r2, r3
 801ad98:	e68b      	b.n	801aab2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801ad9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ad9c:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 801ad9e:	2b00      	cmp	r3, #0
 801ada0:	f000 80d1 	beq.w	801af46 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 801ada4:	ad19      	add	r5, sp, #100	; 0x64
 801ada6:	ac39      	add	r4, sp, #228	; 0xe4
 801ada8:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801adaa:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801adae:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801adb2:	930c      	str	r3, [sp, #48]	; 0x30
 801adb4:	990c      	ldr	r1, [sp, #48]	; 0x30
 801adb6:	6963      	ldr	r3, [r4, #20]
 801adb8:	440b      	add	r3, r1
 801adba:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801adbe:	4408      	add	r0, r1
 801adc0:	b200      	sxth	r0, r0
 801adc2:	4283      	cmp	r3, r0
 801adc4:	900d      	str	r0, [sp, #52]	; 0x34
 801adc6:	f280 80c1 	bge.w	801af4c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 801adca:	428b      	cmp	r3, r1
 801adcc:	da08      	bge.n	801ade0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801adce:	2a00      	cmp	r2, #0
 801add0:	dd06      	ble.n	801ade0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801add2:	1acb      	subs	r3, r1, r3
 801add4:	429a      	cmp	r2, r3
 801add6:	f2c0 80bb 	blt.w	801af50 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 801adda:	2b00      	cmp	r3, #0
 801addc:	f300 80b9 	bgt.w	801af52 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 801ade0:	6967      	ldr	r7, [r4, #20]
 801ade2:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 801ade6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ade8:	443b      	add	r3, r7
 801adea:	461f      	mov	r7, r3
 801adec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801adee:	1bdf      	subs	r7, r3, r7
 801adf0:	4297      	cmp	r7, r2
 801adf2:	bfa8      	it	ge
 801adf4:	4617      	movge	r7, r2
 801adf6:	2f00      	cmp	r7, #0
 801adf8:	f340 813c 	ble.w	801b074 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 801adfc:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801adfe:	6829      	ldr	r1, [r5, #0]
 801ae00:	f9b3 2000 	ldrsh.w	r2, [r3]
 801ae04:	f9bb 3000 	ldrsh.w	r3, [fp]
 801ae08:	4411      	add	r1, r2
 801ae0a:	6820      	ldr	r0, [r4, #0]
 801ae0c:	4299      	cmp	r1, r3
 801ae0e:	dd1a      	ble.n	801ae46 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801ae10:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 801ae14:	4402      	add	r2, r0
 801ae16:	440b      	add	r3, r1
 801ae18:	b21b      	sxth	r3, r3
 801ae1a:	429a      	cmp	r2, r3
 801ae1c:	dc13      	bgt.n	801ae46 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801ae1e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801ae20:	a912      	add	r1, sp, #72	; 0x48
 801ae22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ae24:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ae26:	681b      	ldr	r3, [r3, #0]
 801ae28:	9206      	str	r2, [sp, #24]
 801ae2a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801ae2c:	9500      	str	r5, [sp, #0]
 801ae2e:	9205      	str	r2, [sp, #20]
 801ae30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ae32:	e9cd b203 	strd	fp, r2, [sp, #12]
 801ae36:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801ae38:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801ae3c:	aa49      	add	r2, sp, #292	; 0x124
 801ae3e:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 801ae42:	4623      	mov	r3, r4
 801ae44:	47c8      	blx	r9
 801ae46:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 801ae4a:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 801ae4e:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 801ae52:	ee37 7a27 	vadd.f32	s14, s14, s15
 801ae56:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 801ae5a:	68a1      	ldr	r1, [r4, #8]
 801ae5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801ae60:	ed94 6a08 	vldr	s12, [r4, #32]
 801ae64:	edd4 6a07 	vldr	s13, [r4, #28]
 801ae68:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801ae6c:	ee76 6a86 	vadd.f32	s13, s13, s12
 801ae70:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801ae74:	e9d4 2300 	ldrd	r2, r3, [r4]
 801ae78:	edc4 6a07 	vstr	s13, [r4, #28]
 801ae7c:	441a      	add	r2, r3
 801ae7e:	6963      	ldr	r3, [r4, #20]
 801ae80:	3301      	adds	r3, #1
 801ae82:	6022      	str	r2, [r4, #0]
 801ae84:	6163      	str	r3, [r4, #20]
 801ae86:	69a3      	ldr	r3, [r4, #24]
 801ae88:	3b01      	subs	r3, #1
 801ae8a:	61a3      	str	r3, [r4, #24]
 801ae8c:	6923      	ldr	r3, [r4, #16]
 801ae8e:	440b      	add	r3, r1
 801ae90:	68e1      	ldr	r1, [r4, #12]
 801ae92:	428b      	cmp	r3, r1
 801ae94:	6123      	str	r3, [r4, #16]
 801ae96:	db15      	blt.n	801aec4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 801ae98:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 801ae9c:	3201      	adds	r2, #1
 801ae9e:	1a5b      	subs	r3, r3, r1
 801aea0:	ee76 6a26 	vadd.f32	s13, s12, s13
 801aea4:	6022      	str	r2, [r4, #0]
 801aea6:	6123      	str	r3, [r4, #16]
 801aea8:	edc4 6a07 	vstr	s13, [r4, #28]
 801aeac:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 801aeb0:	ee36 7a87 	vadd.f32	s14, s13, s14
 801aeb4:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801aeb8:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 801aebc:	ee77 7a27 	vadd.f32	s15, s14, s15
 801aec0:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801aec4:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 801aec8:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 801aecc:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 801aed0:	ee37 7a27 	vadd.f32	s14, s14, s15
 801aed4:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 801aed8:	68a9      	ldr	r1, [r5, #8]
 801aeda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801aede:	ed95 6a08 	vldr	s12, [r5, #32]
 801aee2:	edd5 6a07 	vldr	s13, [r5, #28]
 801aee6:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801aeea:	ee76 6a86 	vadd.f32	s13, s13, s12
 801aeee:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801aef2:	e9d5 2300 	ldrd	r2, r3, [r5]
 801aef6:	edc5 6a07 	vstr	s13, [r5, #28]
 801aefa:	441a      	add	r2, r3
 801aefc:	696b      	ldr	r3, [r5, #20]
 801aefe:	3301      	adds	r3, #1
 801af00:	602a      	str	r2, [r5, #0]
 801af02:	616b      	str	r3, [r5, #20]
 801af04:	69ab      	ldr	r3, [r5, #24]
 801af06:	3b01      	subs	r3, #1
 801af08:	61ab      	str	r3, [r5, #24]
 801af0a:	692b      	ldr	r3, [r5, #16]
 801af0c:	440b      	add	r3, r1
 801af0e:	68e9      	ldr	r1, [r5, #12]
 801af10:	428b      	cmp	r3, r1
 801af12:	612b      	str	r3, [r5, #16]
 801af14:	db15      	blt.n	801af42 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 801af16:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801af1a:	3201      	adds	r2, #1
 801af1c:	1a5b      	subs	r3, r3, r1
 801af1e:	ee76 6a26 	vadd.f32	s13, s12, s13
 801af22:	602a      	str	r2, [r5, #0]
 801af24:	612b      	str	r3, [r5, #16]
 801af26:	edc5 6a07 	vstr	s13, [r5, #28]
 801af2a:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 801af2e:	ee36 7a87 	vadd.f32	s14, s13, s14
 801af32:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801af36:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 801af3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801af3e:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801af42:	3f01      	subs	r7, #1
 801af44:	e757      	b.n	801adf6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 801af46:	ad39      	add	r5, sp, #228	; 0xe4
 801af48:	ac19      	add	r4, sp, #100	; 0x64
 801af4a:	e72d      	b.n	801ada8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 801af4c:	4613      	mov	r3, r2
 801af4e:	e744      	b.n	801adda <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 801af50:	4613      	mov	r3, r2
 801af52:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 801af54:	469e      	mov	lr, r3
 801af56:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 801af5a:	461f      	mov	r7, r3
 801af5c:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 801af60:	f04f 0900 	mov.w	r9, #0
 801af64:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 801af68:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 801af6c:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 801af70:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 801af74:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 801af78:	993d      	ldr	r1, [sp, #244]	; 0xf4
 801af7a:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 801af7e:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 801af82:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 801af86:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 801af8a:	960e      	str	r6, [sp, #56]	; 0x38
 801af8c:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 801af90:	2f00      	cmp	r7, #0
 801af92:	d146      	bne.n	801b022 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 801af94:	449c      	add	ip, r3
 801af96:	1ad7      	subs	r7, r2, r3
 801af98:	f1b9 0f00 	cmp.w	r9, #0
 801af9c:	d009      	beq.n	801afb2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 801af9e:	9039      	str	r0, [sp, #228]	; 0xe4
 801afa0:	913d      	str	r1, [sp, #244]	; 0xf4
 801afa2:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 801afa6:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 801afaa:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 801afae:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 801afb2:	991b      	ldr	r1, [sp, #108]	; 0x6c
 801afb4:	f04f 0800 	mov.w	r8, #0
 801afb8:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 801afbc:	910e      	str	r1, [sp, #56]	; 0x38
 801afbe:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 801afc2:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 801afc6:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801afca:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 801afce:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 801afd2:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 801afd6:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 801afda:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 801afde:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 801afe2:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 801afe6:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 801afea:	f1be 0f00 	cmp.w	lr, #0
 801afee:	d030      	beq.n	801b052 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 801aff0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801aff2:	4450      	add	r0, sl
 801aff4:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801aff8:	4431      	add	r1, r6
 801affa:	ee37 7a04 	vadd.f32	s14, s14, s8
 801affe:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801b002:	4549      	cmp	r1, r9
 801b004:	db08      	blt.n	801b018 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 801b006:	ee77 7a85 	vadd.f32	s15, s15, s10
 801b00a:	3001      	adds	r0, #1
 801b00c:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801b010:	eba1 0109 	sub.w	r1, r1, r9
 801b014:	ee37 7a06 	vadd.f32	s14, s14, s12
 801b018:	f10e 3eff 	add.w	lr, lr, #4294967295
 801b01c:	f04f 0801 	mov.w	r8, #1
 801b020:	e7e3      	b.n	801afea <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 801b022:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801b024:	4450      	add	r0, sl
 801b026:	ee37 7a24 	vadd.f32	s14, s14, s9
 801b02a:	4431      	add	r1, r6
 801b02c:	ee77 7a84 	vadd.f32	s15, s15, s8
 801b030:	ee76 6aa3 	vadd.f32	s13, s13, s7
 801b034:	4541      	cmp	r1, r8
 801b036:	db08      	blt.n	801b04a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 801b038:	ee76 6a85 	vadd.f32	s13, s13, s10
 801b03c:	3001      	adds	r0, #1
 801b03e:	ee37 7a25 	vadd.f32	s14, s14, s11
 801b042:	eba1 0108 	sub.w	r1, r1, r8
 801b046:	ee77 7a86 	vadd.f32	s15, s15, s12
 801b04a:	3f01      	subs	r7, #1
 801b04c:	f04f 0901 	mov.w	r9, #1
 801b050:	e79e      	b.n	801af90 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 801b052:	449c      	add	ip, r3
 801b054:	1aff      	subs	r7, r7, r3
 801b056:	f1b8 0f00 	cmp.w	r8, #0
 801b05a:	d009      	beq.n	801b070 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 801b05c:	9019      	str	r0, [sp, #100]	; 0x64
 801b05e:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 801b062:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 801b066:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 801b06a:	911d      	str	r1, [sp, #116]	; 0x74
 801b06c:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 801b070:	1ad2      	subs	r2, r2, r3
 801b072:	e6b5      	b.n	801ade0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801b074:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b076:	681b      	ldr	r3, [r3, #0]
 801b078:	b923      	cbnz	r3, 801b084 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801b07a:	4b04      	ldr	r3, [pc, #16]	; (801b08c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 801b07c:	6818      	ldr	r0, [r3, #0]
 801b07e:	6803      	ldr	r3, [r0, #0]
 801b080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b082:	4798      	blx	r3
 801b084:	b05b      	add	sp, #364	; 0x16c
 801b086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b08a:	bf00      	nop
 801b08c:	2402617c 	.word	0x2402617c

0801b090 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 801b090:	2b03      	cmp	r3, #3
 801b092:	d818      	bhi.n	801b0c6 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 801b094:	e8df f003 	tbb	[pc, r3]
 801b098:	130d0602 	.word	0x130d0602
 801b09c:	f9b0 2000 	ldrsh.w	r2, [r0]
 801b0a0:	1850      	adds	r0, r2, r1
 801b0a2:	4770      	bx	lr
 801b0a4:	8803      	ldrh	r3, [r0, #0]
 801b0a6:	8880      	ldrh	r0, [r0, #4]
 801b0a8:	4418      	add	r0, r3
 801b0aa:	b200      	sxth	r0, r0
 801b0ac:	1a80      	subs	r0, r0, r2
 801b0ae:	3801      	subs	r0, #1
 801b0b0:	4770      	bx	lr
 801b0b2:	8803      	ldrh	r3, [r0, #0]
 801b0b4:	8880      	ldrh	r0, [r0, #4]
 801b0b6:	4418      	add	r0, r3
 801b0b8:	b200      	sxth	r0, r0
 801b0ba:	1a40      	subs	r0, r0, r1
 801b0bc:	e7f7      	b.n	801b0ae <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 801b0be:	f9b0 0000 	ldrsh.w	r0, [r0]
 801b0c2:	4410      	add	r0, r2
 801b0c4:	4770      	bx	lr
 801b0c6:	2000      	movs	r0, #0
 801b0c8:	4770      	bx	lr

0801b0ca <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 801b0ca:	2b03      	cmp	r3, #3
 801b0cc:	d817      	bhi.n	801b0fe <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 801b0ce:	e8df f003 	tbb	[pc, r3]
 801b0d2:	0602      	.short	0x0602
 801b0d4:	1009      	.short	0x1009
 801b0d6:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 801b0da:	1850      	adds	r0, r2, r1
 801b0dc:	4770      	bx	lr
 801b0de:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801b0e2:	e7fa      	b.n	801b0da <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 801b0e4:	8843      	ldrh	r3, [r0, #2]
 801b0e6:	88c0      	ldrh	r0, [r0, #6]
 801b0e8:	4418      	add	r0, r3
 801b0ea:	b200      	sxth	r0, r0
 801b0ec:	1a80      	subs	r0, r0, r2
 801b0ee:	3801      	subs	r0, #1
 801b0f0:	4770      	bx	lr
 801b0f2:	8843      	ldrh	r3, [r0, #2]
 801b0f4:	88c0      	ldrh	r0, [r0, #6]
 801b0f6:	4418      	add	r0, r3
 801b0f8:	b200      	sxth	r0, r0
 801b0fa:	1a40      	subs	r0, r0, r1
 801b0fc:	e7f7      	b.n	801b0ee <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 801b0fe:	2000      	movs	r0, #0
 801b100:	4770      	bx	lr
	...

0801b104 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 801b104:	4b01      	ldr	r3, [pc, #4]	; (801b10c <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 801b106:	2200      	movs	r2, #0
 801b108:	601a      	str	r2, [r3, #0]
 801b10a:	4770      	bx	lr
 801b10c:	24026184 	.word	0x24026184

0801b110 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 801b110:	4603      	mov	r3, r0
 801b112:	b1c8      	cbz	r0, 801b148 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 801b114:	0c02      	lsrs	r2, r0, #16
 801b116:	0412      	lsls	r2, r2, #16
 801b118:	b9a2      	cbnz	r2, 801b144 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 801b11a:	0403      	lsls	r3, r0, #16
 801b11c:	2010      	movs	r0, #16
 801b11e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801b122:	bf04      	itt	eq
 801b124:	021b      	lsleq	r3, r3, #8
 801b126:	3008      	addeq	r0, #8
 801b128:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801b12c:	bf04      	itt	eq
 801b12e:	011b      	lsleq	r3, r3, #4
 801b130:	3004      	addeq	r0, #4
 801b132:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801b136:	bf04      	itt	eq
 801b138:	009b      	lsleq	r3, r3, #2
 801b13a:	3002      	addeq	r0, #2
 801b13c:	2b00      	cmp	r3, #0
 801b13e:	db04      	blt.n	801b14a <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 801b140:	3001      	adds	r0, #1
 801b142:	4770      	bx	lr
 801b144:	2000      	movs	r0, #0
 801b146:	e7ea      	b.n	801b11e <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 801b148:	2020      	movs	r0, #32
 801b14a:	4770      	bx	lr

0801b14c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 801b14c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b150:	b087      	sub	sp, #28
 801b152:	4681      	mov	r9, r0
 801b154:	4698      	mov	r8, r3
 801b156:	4610      	mov	r0, r2
 801b158:	460d      	mov	r5, r1
 801b15a:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 801b15e:	b981      	cbnz	r1, 801b182 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 801b160:	b14b      	cbz	r3, 801b176 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 801b162:	460b      	mov	r3, r1
 801b164:	464a      	mov	r2, r9
 801b166:	4641      	mov	r1, r8
 801b168:	e9cd 4700 	strd	r4, r7, [sp]
 801b16c:	f7ff ffee 	bl	801b14c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801b170:	b007      	add	sp, #28
 801b172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b176:	f04f 33ff 	mov.w	r3, #4294967295
 801b17a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801b17e:	603b      	str	r3, [r7, #0]
 801b180:	e7f6      	b.n	801b170 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 801b182:	fa32 fa01 	lsrs.w	sl, r2, r1
 801b186:	d107      	bne.n	801b198 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 801b188:	fb09 f602 	mul.w	r6, r9, r2
 801b18c:	fbb6 f0f4 	udiv	r0, r6, r4
 801b190:	fb04 6610 	mls	r6, r4, r0, r6
 801b194:	603e      	str	r6, [r7, #0]
 801b196:	e7eb      	b.n	801b170 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 801b198:	2601      	movs	r6, #1
 801b19a:	fa09 fb01 	lsl.w	fp, r9, r1
 801b19e:	408e      	lsls	r6, r1
 801b1a0:	fbbb f3f4 	udiv	r3, fp, r4
 801b1a4:	3e01      	subs	r6, #1
 801b1a6:	9302      	str	r3, [sp, #8]
 801b1a8:	fb0a f303 	mul.w	r3, sl, r3
 801b1ac:	4016      	ands	r6, r2
 801b1ae:	9303      	str	r3, [sp, #12]
 801b1b0:	4630      	mov	r0, r6
 801b1b2:	f7ff ffad 	bl	801b110 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801b1b6:	464a      	mov	r2, r9
 801b1b8:	460b      	mov	r3, r1
 801b1ba:	4601      	mov	r1, r0
 801b1bc:	4630      	mov	r0, r6
 801b1be:	e9cd 4700 	strd	r4, r7, [sp]
 801b1c2:	f7ff ffc3 	bl	801b14c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801b1c6:	9b02      	ldr	r3, [sp, #8]
 801b1c8:	4606      	mov	r6, r0
 801b1ca:	eb05 0108 	add.w	r1, r5, r8
 801b1ce:	fb04 bb13 	mls	fp, r4, r3, fp
 801b1d2:	4658      	mov	r0, fp
 801b1d4:	f7ff ff9c 	bl	801b110 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801b1d8:	ab05      	add	r3, sp, #20
 801b1da:	465a      	mov	r2, fp
 801b1dc:	e9cd 4300 	strd	r4, r3, [sp]
 801b1e0:	4603      	mov	r3, r0
 801b1e2:	4650      	mov	r0, sl
 801b1e4:	f7ff ffb2 	bl	801b14c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801b1e8:	6839      	ldr	r1, [r7, #0]
 801b1ea:	9a05      	ldr	r2, [sp, #20]
 801b1ec:	9b03      	ldr	r3, [sp, #12]
 801b1ee:	4411      	add	r1, r2
 801b1f0:	fbb1 f2f4 	udiv	r2, r1, r4
 801b1f4:	18d3      	adds	r3, r2, r3
 801b1f6:	fb04 1412 	mls	r4, r4, r2, r1
 801b1fa:	441e      	add	r6, r3
 801b1fc:	603c      	str	r4, [r7, #0]
 801b1fe:	4430      	add	r0, r6
 801b200:	e7b6      	b.n	801b170 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

0801b202 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 801b202:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b206:	b085      	sub	sp, #20
 801b208:	f1b0 0900 	subs.w	r9, r0, #0
 801b20c:	461d      	mov	r5, r3
 801b20e:	4617      	mov	r7, r2
 801b210:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801b212:	bfbb      	ittet	lt
 801b214:	f1c9 0900 	rsblt	r9, r9, #0
 801b218:	f04f 36ff 	movlt.w	r6, #4294967295
 801b21c:	2601      	movge	r6, #1
 801b21e:	6823      	ldrlt	r3, [r4, #0]
 801b220:	bfbc      	itt	lt
 801b222:	425b      	neglt	r3, r3
 801b224:	6023      	strlt	r3, [r4, #0]
 801b226:	2a00      	cmp	r2, #0
 801b228:	da04      	bge.n	801b234 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 801b22a:	6823      	ldr	r3, [r4, #0]
 801b22c:	4257      	negs	r7, r2
 801b22e:	4276      	negs	r6, r6
 801b230:	425b      	negs	r3, r3
 801b232:	6023      	str	r3, [r4, #0]
 801b234:	2d00      	cmp	r5, #0
 801b236:	4638      	mov	r0, r7
 801b238:	bfba      	itte	lt
 801b23a:	426d      	neglt	r5, r5
 801b23c:	f04f 38ff 	movlt.w	r8, #4294967295
 801b240:	f04f 0801 	movge.w	r8, #1
 801b244:	f7ff ff64 	bl	801b110 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801b248:	ab03      	add	r3, sp, #12
 801b24a:	463a      	mov	r2, r7
 801b24c:	e9cd 5300 	strd	r5, r3, [sp]
 801b250:	4603      	mov	r3, r0
 801b252:	4648      	mov	r0, r9
 801b254:	f7ff ff7a 	bl	801b14c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801b258:	6823      	ldr	r3, [r4, #0]
 801b25a:	9a03      	ldr	r2, [sp, #12]
 801b25c:	4546      	cmp	r6, r8
 801b25e:	441a      	add	r2, r3
 801b260:	fb92 f3f5 	sdiv	r3, r2, r5
 801b264:	4418      	add	r0, r3
 801b266:	fb05 2313 	mls	r3, r5, r3, r2
 801b26a:	bf18      	it	ne
 801b26c:	4240      	negne	r0, r0
 801b26e:	1c72      	adds	r2, r6, #1
 801b270:	6023      	str	r3, [r4, #0]
 801b272:	d105      	bne.n	801b280 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 801b274:	2b00      	cmp	r3, #0
 801b276:	f1c3 0200 	rsb	r2, r3, #0
 801b27a:	db0b      	blt.n	801b294 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 801b27c:	6022      	str	r2, [r4, #0]
 801b27e:	e006      	b.n	801b28e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801b280:	2e01      	cmp	r6, #1
 801b282:	d104      	bne.n	801b28e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801b284:	2b00      	cmp	r3, #0
 801b286:	da02      	bge.n	801b28e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801b288:	442b      	add	r3, r5
 801b28a:	3801      	subs	r0, #1
 801b28c:	6023      	str	r3, [r4, #0]
 801b28e:	b005      	add	sp, #20
 801b290:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b294:	3801      	subs	r0, #1
 801b296:	1b52      	subs	r2, r2, r5
 801b298:	e7f0      	b.n	801b27c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

0801b29c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 801b29c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801b2a0:	4c1c      	ldr	r4, [pc, #112]	; (801b314 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 801b2a2:	4605      	mov	r5, r0
 801b2a4:	6807      	ldr	r7, [r0, #0]
 801b2a6:	69a3      	ldr	r3, [r4, #24]
 801b2a8:	b92b      	cbnz	r3, 801b2b6 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 801b2aa:	6840      	ldr	r0, [r0, #4]
 801b2ac:	e9c5 7000 	strd	r7, r0, [r5]
 801b2b0:	b004      	add	sp, #16
 801b2b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b2b6:	f04f 0802 	mov.w	r8, #2
 801b2ba:	68a2      	ldr	r2, [r4, #8]
 801b2bc:	ae04      	add	r6, sp, #16
 801b2be:	6820      	ldr	r0, [r4, #0]
 801b2c0:	fb93 f1f8 	sdiv	r1, r3, r8
 801b2c4:	440a      	add	r2, r1
 801b2c6:	69e1      	ldr	r1, [r4, #28]
 801b2c8:	f846 2d04 	str.w	r2, [r6, #-4]!
 801b2cc:	463a      	mov	r2, r7
 801b2ce:	9600      	str	r6, [sp, #0]
 801b2d0:	f7ff ff97 	bl	801b202 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801b2d4:	69a3      	ldr	r3, [r4, #24]
 801b2d6:	4607      	mov	r7, r0
 801b2d8:	686a      	ldr	r2, [r5, #4]
 801b2da:	6a21      	ldr	r1, [r4, #32]
 801b2dc:	9600      	str	r6, [sp, #0]
 801b2de:	6860      	ldr	r0, [r4, #4]
 801b2e0:	f7ff ff8f 	bl	801b202 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801b2e4:	69a3      	ldr	r3, [r4, #24]
 801b2e6:	6962      	ldr	r2, [r4, #20]
 801b2e8:	4407      	add	r7, r0
 801b2ea:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801b2ec:	9600      	str	r6, [sp, #0]
 801b2ee:	68e0      	ldr	r0, [r4, #12]
 801b2f0:	fb93 f8f8 	sdiv	r8, r3, r8
 801b2f4:	4442      	add	r2, r8
 801b2f6:	9203      	str	r2, [sp, #12]
 801b2f8:	682a      	ldr	r2, [r5, #0]
 801b2fa:	f7ff ff82 	bl	801b202 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801b2fe:	4680      	mov	r8, r0
 801b300:	9600      	str	r6, [sp, #0]
 801b302:	69a3      	ldr	r3, [r4, #24]
 801b304:	686a      	ldr	r2, [r5, #4]
 801b306:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801b308:	6920      	ldr	r0, [r4, #16]
 801b30a:	f7ff ff7a 	bl	801b202 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801b30e:	4440      	add	r0, r8
 801b310:	e7cc      	b.n	801b2ac <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 801b312:	bf00      	nop
 801b314:	24026188 	.word	0x24026188

0801b318 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 801b318:	4b07      	ldr	r3, [pc, #28]	; (801b338 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 801b31a:	781b      	ldrb	r3, [r3, #0]
 801b31c:	2b01      	cmp	r3, #1
 801b31e:	d109      	bne.n	801b334 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 801b320:	f9b1 3000 	ldrsh.w	r3, [r1]
 801b324:	f9b0 2000 	ldrsh.w	r2, [r0]
 801b328:	8003      	strh	r3, [r0, #0]
 801b32a:	4b04      	ldr	r3, [pc, #16]	; (801b33c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 801b32c:	881b      	ldrh	r3, [r3, #0]
 801b32e:	3b01      	subs	r3, #1
 801b330:	1a9b      	subs	r3, r3, r2
 801b332:	800b      	strh	r3, [r1, #0]
 801b334:	4770      	bx	lr
 801b336:	bf00      	nop
 801b338:	24026174 	.word	0x24026174
 801b33c:	24026170 	.word	0x24026170

0801b340 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 801b340:	4b07      	ldr	r3, [pc, #28]	; (801b360 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 801b342:	b510      	push	{r4, lr}
 801b344:	781b      	ldrb	r3, [r3, #0]
 801b346:	2b01      	cmp	r3, #1
 801b348:	d108      	bne.n	801b35c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801b34a:	4b06      	ldr	r3, [pc, #24]	; (801b364 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 801b34c:	880c      	ldrh	r4, [r1, #0]
 801b34e:	881b      	ldrh	r3, [r3, #0]
 801b350:	f9b0 2000 	ldrsh.w	r2, [r0]
 801b354:	3b01      	subs	r3, #1
 801b356:	1b1b      	subs	r3, r3, r4
 801b358:	8003      	strh	r3, [r0, #0]
 801b35a:	800a      	strh	r2, [r1, #0]
 801b35c:	bd10      	pop	{r4, pc}
 801b35e:	bf00      	nop
 801b360:	24026174 	.word	0x24026174
 801b364:	24026170 	.word	0x24026170

0801b368 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 801b368:	4b0a      	ldr	r3, [pc, #40]	; (801b394 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 801b36a:	b510      	push	{r4, lr}
 801b36c:	781b      	ldrb	r3, [r3, #0]
 801b36e:	2b01      	cmp	r3, #1
 801b370:	d10e      	bne.n	801b390 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 801b372:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801b376:	8843      	ldrh	r3, [r0, #2]
 801b378:	f9b0 4000 	ldrsh.w	r4, [r0]
 801b37c:	18ca      	adds	r2, r1, r3
 801b37e:	4b06      	ldr	r3, [pc, #24]	; (801b398 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 801b380:	8044      	strh	r4, [r0, #2]
 801b382:	881b      	ldrh	r3, [r3, #0]
 801b384:	1a9b      	subs	r3, r3, r2
 801b386:	8003      	strh	r3, [r0, #0]
 801b388:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801b38c:	8081      	strh	r1, [r0, #4]
 801b38e:	80c3      	strh	r3, [r0, #6]
 801b390:	bd10      	pop	{r4, pc}
 801b392:	bf00      	nop
 801b394:	24026174 	.word	0x24026174
 801b398:	24026170 	.word	0x24026170

0801b39c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 801b39c:	4b08      	ldr	r3, [pc, #32]	; (801b3c0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 801b39e:	781b      	ldrb	r3, [r3, #0]
 801b3a0:	2b01      	cmp	r3, #1
 801b3a2:	d10c      	bne.n	801b3be <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 801b3a4:	8803      	ldrh	r3, [r0, #0]
 801b3a6:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 801b3aa:	8842      	ldrh	r2, [r0, #2]
 801b3ac:	8002      	strh	r2, [r0, #0]
 801b3ae:	185a      	adds	r2, r3, r1
 801b3b0:	4b04      	ldr	r3, [pc, #16]	; (801b3c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 801b3b2:	881b      	ldrh	r3, [r3, #0]
 801b3b4:	1a9b      	subs	r3, r3, r2
 801b3b6:	8043      	strh	r3, [r0, #2]
 801b3b8:	88c3      	ldrh	r3, [r0, #6]
 801b3ba:	80c1      	strh	r1, [r0, #6]
 801b3bc:	8083      	strh	r3, [r0, #4]
 801b3be:	4770      	bx	lr
 801b3c0:	24026174 	.word	0x24026174
 801b3c4:	24026170 	.word	0x24026170

0801b3c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 801b3c8:	4b07      	ldr	r3, [pc, #28]	; (801b3e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 801b3ca:	b510      	push	{r4, lr}
 801b3cc:	781b      	ldrb	r3, [r3, #0]
 801b3ce:	2b01      	cmp	r3, #1
 801b3d0:	d108      	bne.n	801b3e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 801b3d2:	f9b1 3000 	ldrsh.w	r3, [r1]
 801b3d6:	f9b0 4000 	ldrsh.w	r4, [r0]
 801b3da:	8003      	strh	r3, [r0, #0]
 801b3dc:	8893      	ldrh	r3, [r2, #4]
 801b3de:	3b01      	subs	r3, #1
 801b3e0:	1b1b      	subs	r3, r3, r4
 801b3e2:	800b      	strh	r3, [r1, #0]
 801b3e4:	bd10      	pop	{r4, pc}
 801b3e6:	bf00      	nop
 801b3e8:	24026174 	.word	0x24026174

0801b3ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>:
 801b3ec:	4b0b      	ldr	r3, [pc, #44]	; (801b41c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x30>)
 801b3ee:	781b      	ldrb	r3, [r3, #0]
 801b3f0:	2b01      	cmp	r3, #1
 801b3f2:	d111      	bne.n	801b418 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x2c>
 801b3f4:	680b      	ldr	r3, [r1, #0]
 801b3f6:	ed90 7a00 	vldr	s14, [r0]
 801b3fa:	6003      	str	r3, [r0, #0]
 801b3fc:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 801b400:	eddf 6a07 	vldr	s13, [pc, #28]	; 801b420 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x34>
 801b404:	ee07 3a90 	vmov	s15, r3
 801b408:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b40c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801b410:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801b414:	edc1 7a00 	vstr	s15, [r1]
 801b418:	4770      	bx	lr
 801b41a:	bf00      	nop
 801b41c:	24026174 	.word	0x24026174
 801b420:	38d1b717 	.word	0x38d1b717

0801b424 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 801b424:	4b0a      	ldr	r3, [pc, #40]	; (801b450 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 801b426:	460a      	mov	r2, r1
 801b428:	b510      	push	{r4, lr}
 801b42a:	781b      	ldrb	r3, [r3, #0]
 801b42c:	2b01      	cmp	r3, #1
 801b42e:	d10d      	bne.n	801b44c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 801b430:	8881      	ldrh	r1, [r0, #4]
 801b432:	8803      	ldrh	r3, [r0, #0]
 801b434:	440b      	add	r3, r1
 801b436:	4601      	mov	r1, r0
 801b438:	3b01      	subs	r3, #1
 801b43a:	f821 3b02 	strh.w	r3, [r1], #2
 801b43e:	f7ff ffc3 	bl	801b3c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801b442:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801b446:	88c2      	ldrh	r2, [r0, #6]
 801b448:	80c3      	strh	r3, [r0, #6]
 801b44a:	8082      	strh	r2, [r0, #4]
 801b44c:	bd10      	pop	{r4, pc}
 801b44e:	bf00      	nop
 801b450:	24026174 	.word	0x24026174

0801b454 <_ZN8touchgfx11Application13requestRedrawEv>:
 801b454:	4b06      	ldr	r3, [pc, #24]	; (801b470 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 801b456:	2100      	movs	r1, #0
 801b458:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b45c:	4b05      	ldr	r3, [pc, #20]	; (801b474 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 801b45e:	f8c0 1130 	str.w	r1, [r0, #304]	; 0x130
 801b462:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b466:	f8a0 2134 	strh.w	r2, [r0, #308]	; 0x134
 801b46a:	f8a0 3136 	strh.w	r3, [r0, #310]	; 0x136
 801b46e:	4770      	bx	lr
 801b470:	24026170 	.word	0x24026170
 801b474:	24026172 	.word	0x24026172

0801b478 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 801b478:	4b03      	ldr	r3, [pc, #12]	; (801b488 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801b47a:	6818      	ldr	r0, [r3, #0]
 801b47c:	b110      	cbz	r0, 801b484 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 801b47e:	6803      	ldr	r3, [r0, #0]
 801b480:	699b      	ldr	r3, [r3, #24]
 801b482:	4718      	bx	r3
 801b484:	4770      	bx	lr
 801b486:	bf00      	nop
 801b488:	240261b8 	.word	0x240261b8

0801b48c <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 801b48c:	4770      	bx	lr
	...

0801b490 <_ZN8touchgfx11Application4drawEv>:
 801b490:	4b09      	ldr	r3, [pc, #36]	; (801b4b8 <_ZN8touchgfx11Application4drawEv+0x28>)
 801b492:	b507      	push	{r0, r1, r2, lr}
 801b494:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b498:	2100      	movs	r1, #0
 801b49a:	4b08      	ldr	r3, [pc, #32]	; (801b4bc <_ZN8touchgfx11Application4drawEv+0x2c>)
 801b49c:	9100      	str	r1, [sp, #0]
 801b49e:	4669      	mov	r1, sp
 801b4a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b4a4:	f8ad 2004 	strh.w	r2, [sp, #4]
 801b4a8:	f8ad 3006 	strh.w	r3, [sp, #6]
 801b4ac:	6803      	ldr	r3, [r0, #0]
 801b4ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b4b0:	4798      	blx	r3
 801b4b2:	b003      	add	sp, #12
 801b4b4:	f85d fb04 	ldr.w	pc, [sp], #4
 801b4b8:	24026170 	.word	0x24026170
 801b4bc:	24026172 	.word	0x24026172

0801b4c0 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 801b4c0:	4b03      	ldr	r3, [pc, #12]	; (801b4d0 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 801b4c2:	6818      	ldr	r0, [r3, #0]
 801b4c4:	b110      	cbz	r0, 801b4cc <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801b4c6:	6803      	ldr	r3, [r0, #0]
 801b4c8:	69db      	ldr	r3, [r3, #28]
 801b4ca:	4718      	bx	r3
 801b4cc:	4770      	bx	lr
 801b4ce:	bf00      	nop
 801b4d0:	240261b8 	.word	0x240261b8

0801b4d4 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 801b4d4:	4b03      	ldr	r3, [pc, #12]	; (801b4e4 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801b4d6:	6818      	ldr	r0, [r3, #0]
 801b4d8:	b110      	cbz	r0, 801b4e0 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801b4da:	6803      	ldr	r3, [r0, #0]
 801b4dc:	6a1b      	ldr	r3, [r3, #32]
 801b4de:	4718      	bx	r3
 801b4e0:	4770      	bx	lr
 801b4e2:	bf00      	nop
 801b4e4:	240261b8 	.word	0x240261b8

0801b4e8 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 801b4e8:	2300      	movs	r3, #0
 801b4ea:	f8a0 30ec 	strh.w	r3, [r0, #236]	; 0xec
 801b4ee:	4770      	bx	lr

0801b4f0 <_ZN8touchgfx11Application14handleKeyEventEh>:
 801b4f0:	4b03      	ldr	r3, [pc, #12]	; (801b500 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 801b4f2:	6818      	ldr	r0, [r3, #0]
 801b4f4:	b110      	cbz	r0, 801b4fc <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 801b4f6:	6803      	ldr	r3, [r0, #0]
 801b4f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b4fa:	4718      	bx	r3
 801b4fc:	4770      	bx	lr
 801b4fe:	bf00      	nop
 801b500:	240261b8 	.word	0x240261b8

0801b504 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 801b504:	b510      	push	{r4, lr}
 801b506:	f9b1 4000 	ldrsh.w	r4, [r1]
 801b50a:	888a      	ldrh	r2, [r1, #4]
 801b50c:	f9b0 3000 	ldrsh.w	r3, [r0]
 801b510:	4422      	add	r2, r4
 801b512:	b212      	sxth	r2, r2
 801b514:	4293      	cmp	r3, r2
 801b516:	da15      	bge.n	801b544 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801b518:	8882      	ldrh	r2, [r0, #4]
 801b51a:	4413      	add	r3, r2
 801b51c:	b21b      	sxth	r3, r3
 801b51e:	429c      	cmp	r4, r3
 801b520:	da10      	bge.n	801b544 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801b522:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801b526:	88c9      	ldrh	r1, [r1, #6]
 801b528:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801b52c:	4419      	add	r1, r3
 801b52e:	b209      	sxth	r1, r1
 801b530:	428a      	cmp	r2, r1
 801b532:	da07      	bge.n	801b544 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801b534:	88c0      	ldrh	r0, [r0, #6]
 801b536:	4410      	add	r0, r2
 801b538:	b200      	sxth	r0, r0
 801b53a:	4283      	cmp	r3, r0
 801b53c:	bfac      	ite	ge
 801b53e:	2000      	movge	r0, #0
 801b540:	2001      	movlt	r0, #1
 801b542:	bd10      	pop	{r4, pc}
 801b544:	2000      	movs	r0, #0
 801b546:	e7fc      	b.n	801b542 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0801b548 <_ZN8touchgfx4Rect10restrictToEss>:
 801b548:	f9b0 3000 	ldrsh.w	r3, [r0]
 801b54c:	2b00      	cmp	r3, #0
 801b54e:	b510      	push	{r4, lr}
 801b550:	da04      	bge.n	801b55c <_ZN8touchgfx4Rect10restrictToEss+0x14>
 801b552:	8884      	ldrh	r4, [r0, #4]
 801b554:	4423      	add	r3, r4
 801b556:	8083      	strh	r3, [r0, #4]
 801b558:	2300      	movs	r3, #0
 801b55a:	8003      	strh	r3, [r0, #0]
 801b55c:	f9b0 4000 	ldrsh.w	r4, [r0]
 801b560:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801b564:	1b09      	subs	r1, r1, r4
 801b566:	428b      	cmp	r3, r1
 801b568:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801b56c:	bfc8      	it	gt
 801b56e:	8081      	strhgt	r1, [r0, #4]
 801b570:	2b00      	cmp	r3, #0
 801b572:	da04      	bge.n	801b57e <_ZN8touchgfx4Rect10restrictToEss+0x36>
 801b574:	88c1      	ldrh	r1, [r0, #6]
 801b576:	440b      	add	r3, r1
 801b578:	80c3      	strh	r3, [r0, #6]
 801b57a:	2300      	movs	r3, #0
 801b57c:	8043      	strh	r3, [r0, #2]
 801b57e:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 801b582:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 801b586:	1a52      	subs	r2, r2, r1
 801b588:	4293      	cmp	r3, r2
 801b58a:	bfc8      	it	gt
 801b58c:	80c2      	strhgt	r2, [r0, #6]
 801b58e:	bd10      	pop	{r4, pc}

0801b590 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 801b590:	4b10      	ldr	r3, [pc, #64]	; (801b5d4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 801b592:	b510      	push	{r4, lr}
 801b594:	460c      	mov	r4, r1
 801b596:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b59a:	4b0f      	ldr	r3, [pc, #60]	; (801b5d8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 801b59c:	4620      	mov	r0, r4
 801b59e:	f9b3 1000 	ldrsh.w	r1, [r3]
 801b5a2:	f7ff ffd1 	bl	801b548 <_ZN8touchgfx4Rect10restrictToEss>
 801b5a6:	4b0d      	ldr	r3, [pc, #52]	; (801b5dc <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 801b5a8:	6818      	ldr	r0, [r3, #0]
 801b5aa:	b190      	cbz	r0, 801b5d2 <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 801b5ac:	6803      	ldr	r3, [r0, #0]
 801b5ae:	4621      	mov	r1, r4
 801b5b0:	689b      	ldr	r3, [r3, #8]
 801b5b2:	4798      	blx	r3
 801b5b4:	4b0a      	ldr	r3, [pc, #40]	; (801b5e0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 801b5b6:	6818      	ldr	r0, [r3, #0]
 801b5b8:	b118      	cbz	r0, 801b5c2 <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 801b5ba:	6803      	ldr	r3, [r0, #0]
 801b5bc:	4621      	mov	r1, r4
 801b5be:	689b      	ldr	r3, [r3, #8]
 801b5c0:	4798      	blx	r3
 801b5c2:	4b08      	ldr	r3, [pc, #32]	; (801b5e4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 801b5c4:	4621      	mov	r1, r4
 801b5c6:	6818      	ldr	r0, [r3, #0]
 801b5c8:	6803      	ldr	r3, [r0, #0]
 801b5ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b5ce:	69db      	ldr	r3, [r3, #28]
 801b5d0:	4718      	bx	r3
 801b5d2:	bd10      	pop	{r4, pc}
 801b5d4:	24026172 	.word	0x24026172
 801b5d8:	24026170 	.word	0x24026170
 801b5dc:	240261b8 	.word	0x240261b8
 801b5e0:	240261b4 	.word	0x240261b4
 801b5e4:	2402617c 	.word	0x2402617c

0801b5e8 <_ZNK8touchgfx4Rect8includesERKS0_>:
 801b5e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b5ea:	4606      	mov	r6, r0
 801b5ec:	4608      	mov	r0, r1
 801b5ee:	460f      	mov	r7, r1
 801b5f0:	f7fd fcad 	bl	8018f4e <_ZNK8touchgfx4Rect7isEmptyEv>
 801b5f4:	b9e8      	cbnz	r0, 801b632 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801b5f6:	f9b7 5000 	ldrsh.w	r5, [r7]
 801b5fa:	f9b6 4000 	ldrsh.w	r4, [r6]
 801b5fe:	42a5      	cmp	r5, r4
 801b600:	db17      	blt.n	801b632 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801b602:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801b606:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 801b60a:	429a      	cmp	r2, r3
 801b60c:	db11      	blt.n	801b632 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801b60e:	88b9      	ldrh	r1, [r7, #4]
 801b610:	440d      	add	r5, r1
 801b612:	88b1      	ldrh	r1, [r6, #4]
 801b614:	440c      	add	r4, r1
 801b616:	b22d      	sxth	r5, r5
 801b618:	b224      	sxth	r4, r4
 801b61a:	42a5      	cmp	r5, r4
 801b61c:	dc09      	bgt.n	801b632 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801b61e:	88f8      	ldrh	r0, [r7, #6]
 801b620:	4410      	add	r0, r2
 801b622:	88f2      	ldrh	r2, [r6, #6]
 801b624:	4413      	add	r3, r2
 801b626:	b200      	sxth	r0, r0
 801b628:	b21b      	sxth	r3, r3
 801b62a:	4298      	cmp	r0, r3
 801b62c:	bfcc      	ite	gt
 801b62e:	2000      	movgt	r0, #0
 801b630:	2001      	movle	r0, #1
 801b632:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801b634 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 801b634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b636:	4604      	mov	r4, r0
 801b638:	4608      	mov	r0, r1
 801b63a:	460d      	mov	r5, r1
 801b63c:	f7fd fc87 	bl	8018f4e <_ZNK8touchgfx4Rect7isEmptyEv>
 801b640:	b978      	cbnz	r0, 801b662 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 801b642:	4620      	mov	r0, r4
 801b644:	f7fd fc83 	bl	8018f4e <_ZNK8touchgfx4Rect7isEmptyEv>
 801b648:	f9b5 6000 	ldrsh.w	r6, [r5]
 801b64c:	b150      	cbz	r0, 801b664 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 801b64e:	8026      	strh	r6, [r4, #0]
 801b650:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801b654:	8063      	strh	r3, [r4, #2]
 801b656:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 801b65a:	80a3      	strh	r3, [r4, #4]
 801b65c:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801b660:	80e3      	strh	r3, [r4, #6]
 801b662:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b664:	f9b4 1000 	ldrsh.w	r1, [r4]
 801b668:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801b66c:	42b1      	cmp	r1, r6
 801b66e:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 801b672:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 801b676:	460f      	mov	r7, r1
 801b678:	88ed      	ldrh	r5, [r5, #6]
 801b67a:	bfa8      	it	ge
 801b67c:	4637      	movge	r7, r6
 801b67e:	4293      	cmp	r3, r2
 801b680:	4618      	mov	r0, r3
 801b682:	4466      	add	r6, ip
 801b684:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 801b688:	bfa8      	it	ge
 801b68a:	4610      	movge	r0, r2
 801b68c:	442a      	add	r2, r5
 801b68e:	88e5      	ldrh	r5, [r4, #6]
 801b690:	4461      	add	r1, ip
 801b692:	b236      	sxth	r6, r6
 801b694:	8027      	strh	r7, [r4, #0]
 801b696:	442b      	add	r3, r5
 801b698:	b209      	sxth	r1, r1
 801b69a:	b212      	sxth	r2, r2
 801b69c:	8060      	strh	r0, [r4, #2]
 801b69e:	b21b      	sxth	r3, r3
 801b6a0:	428e      	cmp	r6, r1
 801b6a2:	bfac      	ite	ge
 801b6a4:	ebc7 0106 	rsbge	r1, r7, r6
 801b6a8:	ebc7 0101 	rsblt	r1, r7, r1
 801b6ac:	429a      	cmp	r2, r3
 801b6ae:	bfac      	ite	ge
 801b6b0:	ebc0 0202 	rsbge	r2, r0, r2
 801b6b4:	ebc0 0203 	rsblt	r2, r0, r3
 801b6b8:	80a1      	strh	r1, [r4, #4]
 801b6ba:	80e2      	strh	r2, [r4, #6]
 801b6bc:	e7d1      	b.n	801b662 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

0801b6c0 <_ZN8touchgfx11Application11getInstanceEv>:
 801b6c0:	4b01      	ldr	r3, [pc, #4]	; (801b6c8 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801b6c2:	6818      	ldr	r0, [r3, #0]
 801b6c4:	4770      	bx	lr
 801b6c6:	bf00      	nop
 801b6c8:	240261c8 	.word	0x240261c8

0801b6cc <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 801b6cc:	2300      	movs	r3, #0
 801b6ce:	b510      	push	{r4, lr}
 801b6d0:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
 801b6d4:	4604      	mov	r4, r0
 801b6d6:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
 801b6da:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
 801b6de:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 801b6e2:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	; 0xa6
 801b6e6:	429a      	cmp	r2, r3
 801b6e8:	d90e      	bls.n	801b708 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 801b6ea:	18e2      	adds	r2, r4, r3
 801b6ec:	f892 2084 	ldrb.w	r2, [r2, #132]	; 0x84
 801b6f0:	b122      	cbz	r2, 801b6fc <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 801b6f2:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 801b6f6:	6803      	ldr	r3, [r0, #0]
 801b6f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b6fa:	4798      	blx	r3
 801b6fc:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 801b700:	3301      	adds	r3, #1
 801b702:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 801b706:	e7ea      	b.n	801b6de <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 801b708:	bd10      	pop	{r4, pc}

0801b70a <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 801b70a:	2300      	movs	r3, #0
 801b70c:	f100 0284 	add.w	r2, r0, #132	; 0x84
 801b710:	30a4      	adds	r0, #164	; 0xa4
 801b712:	f820 3c24 	strh.w	r3, [r0, #-36]
 801b716:	f802 3b01 	strb.w	r3, [r2], #1
 801b71a:	4282      	cmp	r2, r0
 801b71c:	d1fb      	bne.n	801b716 <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 801b71e:	4770      	bx	lr

0801b720 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 801b720:	b570      	push	{r4, r5, r6, lr}
 801b722:	4c0b      	ldr	r4, [pc, #44]	; (801b750 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 801b724:	4605      	mov	r5, r0
 801b726:	460e      	mov	r6, r1
 801b728:	6820      	ldr	r0, [r4, #0]
 801b72a:	b110      	cbz	r0, 801b732 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 801b72c:	6803      	ldr	r3, [r0, #0]
 801b72e:	695b      	ldr	r3, [r3, #20]
 801b730:	4798      	blx	r3
 801b732:	1d28      	adds	r0, r5, #4
 801b734:	f7ff ffe9 	bl	801b70a <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 801b738:	6026      	str	r6, [r4, #0]
 801b73a:	6833      	ldr	r3, [r6, #0]
 801b73c:	4630      	mov	r0, r6
 801b73e:	68db      	ldr	r3, [r3, #12]
 801b740:	4798      	blx	r3
 801b742:	682b      	ldr	r3, [r5, #0]
 801b744:	4628      	mov	r0, r5
 801b746:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b748:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b74c:	4718      	bx	r3
 801b74e:	bf00      	nop
 801b750:	240261b8 	.word	0x240261b8

0801b754 <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 801b754:	2300      	movs	r3, #0
 801b756:	f8b0 c080 	ldrh.w	ip, [r0, #128]	; 0x80
 801b75a:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	; 0xa4
 801b75e:	461a      	mov	r2, r3
 801b760:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b762:	461c      	mov	r4, r3
 801b764:	461d      	mov	r5, r3
 801b766:	459c      	cmp	ip, r3
 801b768:	dd1a      	ble.n	801b7a0 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 801b76a:	18c6      	adds	r6, r0, r3
 801b76c:	f896 6084 	ldrb.w	r6, [r6, #132]	; 0x84
 801b770:	b16e      	cbz	r6, 801b78e <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 801b772:	429a      	cmp	r2, r3
 801b774:	d008      	beq.n	801b788 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 801b776:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 801b77a:	fa1f fe82 	uxth.w	lr, r2
 801b77e:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 801b782:	1887      	adds	r7, r0, r2
 801b784:	f887 6084 	strb.w	r6, [r7, #132]	; 0x84
 801b788:	3201      	adds	r2, #1
 801b78a:	3301      	adds	r3, #1
 801b78c:	e7eb      	b.n	801b766 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 801b78e:	4299      	cmp	r1, r3
 801b790:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	; 0xa6
 801b794:	bfa8      	it	ge
 801b796:	3501      	addge	r5, #1
 801b798:	429e      	cmp	r6, r3
 801b79a:	bfc8      	it	gt
 801b79c:	3401      	addgt	r4, #1
 801b79e:	e7f4      	b.n	801b78a <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 801b7a0:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
 801b7a4:	1b49      	subs	r1, r1, r5
 801b7a6:	1b1b      	subs	r3, r3, r4
 801b7a8:	f8a0 10a4 	strh.w	r1, [r0, #164]	; 0xa4
 801b7ac:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
 801b7b0:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
 801b7b4:	4293      	cmp	r3, r2
 801b7b6:	dd03      	ble.n	801b7c0 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 801b7b8:	3b01      	subs	r3, #1
 801b7ba:	f8a0 3080 	strh.w	r3, [r0, #128]	; 0x80
 801b7be:	e7f7      	b.n	801b7b0 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 801b7c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0801b7c4 <_ZN8touchgfx11Application15handleTickEventEv>:
 801b7c4:	b570      	push	{r4, r5, r6, lr}
 801b7c6:	4d16      	ldr	r5, [pc, #88]	; (801b820 <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 801b7c8:	4604      	mov	r4, r0
 801b7ca:	6828      	ldr	r0, [r5, #0]
 801b7cc:	b140      	cbz	r0, 801b7e0 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801b7ce:	7a03      	ldrb	r3, [r0, #8]
 801b7d0:	b933      	cbnz	r3, 801b7e0 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801b7d2:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 801b7d6:	6803      	ldr	r3, [r0, #0]
 801b7d8:	689b      	ldr	r3, [r3, #8]
 801b7da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b7de:	4718      	bx	r3
 801b7e0:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
 801b7e4:	4e0f      	ldr	r6, [pc, #60]	; (801b824 <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 801b7e6:	b973      	cbnz	r3, 801b806 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801b7e8:	b168      	cbz	r0, 801b806 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801b7ea:	7a03      	ldrb	r3, [r0, #8]
 801b7ec:	b15b      	cbz	r3, 801b806 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801b7ee:	6830      	ldr	r0, [r6, #0]
 801b7f0:	b110      	cbz	r0, 801b7f8 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 801b7f2:	6803      	ldr	r3, [r0, #0]
 801b7f4:	691b      	ldr	r3, [r3, #16]
 801b7f6:	4798      	blx	r3
 801b7f8:	6828      	ldr	r0, [r5, #0]
 801b7fa:	6803      	ldr	r3, [r0, #0]
 801b7fc:	68db      	ldr	r3, [r3, #12]
 801b7fe:	4798      	blx	r3
 801b800:	2301      	movs	r3, #1
 801b802:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 801b806:	3404      	adds	r4, #4
 801b808:	4620      	mov	r0, r4
 801b80a:	f7ff ff5f 	bl	801b6cc <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 801b80e:	4620      	mov	r0, r4
 801b810:	f7ff ffa0 	bl	801b754 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 801b814:	6830      	ldr	r0, [r6, #0]
 801b816:	b110      	cbz	r0, 801b81e <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 801b818:	6803      	ldr	r3, [r0, #0]
 801b81a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b81c:	e7dd      	b.n	801b7da <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 801b81e:	bd70      	pop	{r4, r5, r6, pc}
 801b820:	240261bc 	.word	0x240261bc
 801b824:	240261b8 	.word	0x240261b8

0801b828 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 801b828:	4603      	mov	r3, r0
 801b82a:	f100 0140 	add.w	r1, r0, #64	; 0x40
 801b82e:	2200      	movs	r2, #0
 801b830:	801a      	strh	r2, [r3, #0]
 801b832:	3308      	adds	r3, #8
 801b834:	f823 2c06 	strh.w	r2, [r3, #-6]
 801b838:	f823 2c04 	strh.w	r2, [r3, #-4]
 801b83c:	f823 2c02 	strh.w	r2, [r3, #-2]
 801b840:	428b      	cmp	r3, r1
 801b842:	d1f5      	bne.n	801b830 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 801b844:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 801b848:	4770      	bx	lr
	...

0801b84c <_ZN8touchgfx11ApplicationC1Ev>:
 801b84c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b84e:	4b1d      	ldr	r3, [pc, #116]	; (801b8c4 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 801b850:	4606      	mov	r6, r0
 801b852:	4604      	mov	r4, r0
 801b854:	2500      	movs	r5, #0
 801b856:	f846 3b04 	str.w	r3, [r6], #4
 801b85a:	22a8      	movs	r2, #168	; 0xa8
 801b85c:	2100      	movs	r1, #0
 801b85e:	4630      	mov	r0, r6
 801b860:	f00a fe0c 	bl	802647c <memset>
 801b864:	f8a4 5084 	strh.w	r5, [r4, #132]	; 0x84
 801b868:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 801b86c:	4f16      	ldr	r7, [pc, #88]	; (801b8c8 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 801b86e:	f7ff ffdb 	bl	801b828 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801b872:	f104 00ee 	add.w	r0, r4, #238	; 0xee
 801b876:	f7ff ffd7 	bl	801b828 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801b87a:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 801b87e:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 801b882:	f8a4 5134 	strh.w	r5, [r4, #308]	; 0x134
 801b886:	f8a4 5136 	strh.w	r5, [r4, #310]	; 0x136
 801b88a:	f884 5138 	strb.w	r5, [r4, #312]	; 0x138
 801b88e:	490f      	ldr	r1, [pc, #60]	; (801b8cc <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 801b890:	480f      	ldr	r0, [pc, #60]	; (801b8d0 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 801b892:	f00a fc2b 	bl	80260ec <CRC_Lock>
 801b896:	4b0f      	ldr	r3, [pc, #60]	; (801b8d4 <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 801b898:	b158      	cbz	r0, 801b8b2 <_ZN8touchgfx11ApplicationC1Ev+0x66>
 801b89a:	801d      	strh	r5, [r3, #0]
 801b89c:	2300      	movs	r3, #0
 801b89e:	4a0e      	ldr	r2, [pc, #56]	; (801b8d8 <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 801b8a0:	4630      	mov	r0, r6
 801b8a2:	6013      	str	r3, [r2, #0]
 801b8a4:	4a0d      	ldr	r2, [pc, #52]	; (801b8dc <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 801b8a6:	603b      	str	r3, [r7, #0]
 801b8a8:	6013      	str	r3, [r2, #0]
 801b8aa:	f7ff ff2e 	bl	801b70a <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 801b8ae:	4620      	mov	r0, r4
 801b8b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b8b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801b8b6:	2002      	movs	r0, #2
 801b8b8:	801a      	strh	r2, [r3, #0]
 801b8ba:	6038      	str	r0, [r7, #0]
 801b8bc:	f001 fa3e 	bl	801cd3c <_ZN8touchgfx6Screen4drawEv>
 801b8c0:	e7ec      	b.n	801b89c <_ZN8touchgfx11ApplicationC1Ev+0x50>
 801b8c2:	bf00      	nop
 801b8c4:	0802ae54 	.word	0x0802ae54
 801b8c8:	240261b8 	.word	0x240261b8
 801b8cc:	b5e8b5cd 	.word	0xb5e8b5cd
 801b8d0:	f407a5c2 	.word	0xf407a5c2
 801b8d4:	24000068 	.word	0x24000068
 801b8d8:	240261c8 	.word	0x240261c8
 801b8dc:	240261bc 	.word	0x240261bc

0801b8e0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 801b8e0:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 801b8e4:	3b01      	subs	r3, #1
 801b8e6:	b29b      	uxth	r3, r3
 801b8e8:	428b      	cmp	r3, r1
 801b8ea:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 801b8ee:	b510      	push	{r4, lr}
 801b8f0:	d908      	bls.n	801b904 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 801b8f2:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 801b8f6:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 801b8fa:	681a      	ldr	r2, [r3, #0]
 801b8fc:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 801b900:	685a      	ldr	r2, [r3, #4]
 801b902:	6062      	str	r2, [r4, #4]
 801b904:	bd10      	pop	{r4, pc}
	...

0801b908 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 801b908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b90c:	b08f      	sub	sp, #60	; 0x3c
 801b90e:	4b8f      	ldr	r3, [pc, #572]	; (801bb4c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x244>)
 801b910:	4683      	mov	fp, r0
 801b912:	ac0a      	add	r4, sp, #40	; 0x28
 801b914:	e884 0006 	stmia.w	r4, {r1, r2}
 801b918:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b91c:	4620      	mov	r0, r4
 801b91e:	4b8c      	ldr	r3, [pc, #560]	; (801bb50 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x248>)
 801b920:	f9b3 1000 	ldrsh.w	r1, [r3]
 801b924:	f7ff fe10 	bl	801b548 <_ZN8touchgfx4Rect10restrictToEss>
 801b928:	4620      	mov	r0, r4
 801b92a:	f7fd fb10 	bl	8018f4e <_ZNK8touchgfx4Rect7isEmptyEv>
 801b92e:	2800      	cmp	r0, #0
 801b930:	d16a      	bne.n	801ba08 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801b932:	9403      	str	r4, [sp, #12]
 801b934:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	; 0xec
 801b938:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
 801b93c:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 801b940:	9301      	str	r3, [sp, #4]
 801b942:	35a4      	adds	r5, #164	; 0xa4
 801b944:	b15c      	cbz	r4, 801b95e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 801b946:	4629      	mov	r1, r5
 801b948:	9803      	ldr	r0, [sp, #12]
 801b94a:	f7ff fe4d 	bl	801b5e8 <_ZNK8touchgfx4Rect8includesERKS0_>
 801b94e:	3c01      	subs	r4, #1
 801b950:	b118      	cbz	r0, 801b95a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52>
 801b952:	b2a1      	uxth	r1, r4
 801b954:	9801      	ldr	r0, [sp, #4]
 801b956:	f7ff ffc3 	bl	801b8e0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801b95a:	3d08      	subs	r5, #8
 801b95c:	e7f2      	b.n	801b944 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c>
 801b95e:	f8bb 80ec 	ldrh.w	r8, [fp, #236]	; 0xec
 801b962:	f108 33ff 	add.w	r3, r8, #4294967295
 801b966:	f8cd 8010 	str.w	r8, [sp, #16]
 801b96a:	9302      	str	r3, [sp, #8]
 801b96c:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 801b970:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 801b974:	9306      	str	r3, [sp, #24]
 801b976:	445c      	add	r4, fp
 801b978:	2500      	movs	r5, #0
 801b97a:	4626      	mov	r6, r4
 801b97c:	f8cd 8014 	str.w	r8, [sp, #20]
 801b980:	462f      	mov	r7, r5
 801b982:	9b05      	ldr	r3, [sp, #20]
 801b984:	2b00      	cmp	r3, #0
 801b986:	d073      	beq.n	801ba70 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 801b988:	9903      	ldr	r1, [sp, #12]
 801b98a:	4630      	mov	r0, r6
 801b98c:	f7ff fdba 	bl	801b504 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801b990:	b350      	cbz	r0, 801b9e8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 801b992:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 801b996:	f9b6 c000 	ldrsh.w	ip, [r6]
 801b99a:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	; 0x2a
 801b99e:	45e6      	cmp	lr, ip
 801b9a0:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 801b9a4:	db33      	blt.n	801ba0e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 801b9a6:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 801b9aa:	88b3      	ldrh	r3, [r6, #4]
 801b9ac:	4472      	add	r2, lr
 801b9ae:	4463      	add	r3, ip
 801b9b0:	b212      	sxth	r2, r2
 801b9b2:	b21b      	sxth	r3, r3
 801b9b4:	429a      	cmp	r2, r3
 801b9b6:	dc2a      	bgt.n	801ba0e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 801b9b8:	fa1f f289 	uxth.w	r2, r9
 801b9bc:	88f3      	ldrh	r3, [r6, #6]
 801b9be:	45ca      	cmp	sl, r9
 801b9c0:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 801b9c4:	4413      	add	r3, r2
 801b9c6:	fa1f fc8a 	uxth.w	ip, sl
 801b9ca:	b29b      	uxth	r3, r3
 801b9cc:	fa0f fe83 	sxth.w	lr, r3
 801b9d0:	db0f      	blt.n	801b9f2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 801b9d2:	eba3 030c 	sub.w	r3, r3, ip
 801b9d6:	1ac9      	subs	r1, r1, r3
 801b9d8:	b209      	sxth	r1, r1
 801b9da:	2900      	cmp	r1, #0
 801b9dc:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801b9e0:	dd12      	ble.n	801ba08 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801b9e2:	f8ad e02a 	strh.w	lr, [sp, #42]	; 0x2a
 801b9e6:	4605      	mov	r5, r0
 801b9e8:	9b05      	ldr	r3, [sp, #20]
 801b9ea:	3e08      	subs	r6, #8
 801b9ec:	3b01      	subs	r3, #1
 801b9ee:	9305      	str	r3, [sp, #20]
 801b9f0:	e7c7      	b.n	801b982 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 801b9f2:	4461      	add	r1, ip
 801b9f4:	b209      	sxth	r1, r1
 801b9f6:	4571      	cmp	r1, lr
 801b9f8:	dc38      	bgt.n	801ba6c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801b9fa:	eba2 020c 	sub.w	r2, r2, ip
 801b9fe:	b212      	sxth	r2, r2
 801ba00:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 801ba04:	2a00      	cmp	r2, #0
 801ba06:	dcee      	bgt.n	801b9e6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 801ba08:	b00f      	add	sp, #60	; 0x3c
 801ba0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ba0e:	45ca      	cmp	sl, r9
 801ba10:	db2c      	blt.n	801ba6c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801ba12:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 801ba16:	449a      	add	sl, r3
 801ba18:	88f3      	ldrh	r3, [r6, #6]
 801ba1a:	4499      	add	r9, r3
 801ba1c:	fa0f fa8a 	sxth.w	sl, sl
 801ba20:	fa0f f989 	sxth.w	r9, r9
 801ba24:	45ca      	cmp	sl, r9
 801ba26:	dc21      	bgt.n	801ba6c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801ba28:	fa1f f28c 	uxth.w	r2, ip
 801ba2c:	88b3      	ldrh	r3, [r6, #4]
 801ba2e:	45e6      	cmp	lr, ip
 801ba30:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801ba34:	4413      	add	r3, r2
 801ba36:	fa1f f98e 	uxth.w	r9, lr
 801ba3a:	b29b      	uxth	r3, r3
 801ba3c:	fa0f fa83 	sxth.w	sl, r3
 801ba40:	db0a      	blt.n	801ba58 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x150>
 801ba42:	eba3 0309 	sub.w	r3, r3, r9
 801ba46:	1ac9      	subs	r1, r1, r3
 801ba48:	b209      	sxth	r1, r1
 801ba4a:	2900      	cmp	r1, #0
 801ba4c:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 801ba50:	ddda      	ble.n	801ba08 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801ba52:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 801ba56:	e7c6      	b.n	801b9e6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 801ba58:	4449      	add	r1, r9
 801ba5a:	b209      	sxth	r1, r1
 801ba5c:	4551      	cmp	r1, sl
 801ba5e:	dc05      	bgt.n	801ba6c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801ba60:	eba2 0209 	sub.w	r2, r2, r9
 801ba64:	b212      	sxth	r2, r2
 801ba66:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 801ba6a:	e7cb      	b.n	801ba04 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 801ba6c:	4607      	mov	r7, r0
 801ba6e:	e7bb      	b.n	801b9e8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 801ba70:	2d00      	cmp	r5, #0
 801ba72:	d181      	bne.n	801b978 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x70>
 801ba74:	2f00      	cmp	r7, #0
 801ba76:	f000 81dd 	beq.w	801be34 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 801ba7a:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
 801ba7e:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	; 0x2a
 801ba82:	b2b3      	uxth	r3, r6
 801ba84:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 801ba88:	b2b9      	uxth	r1, r7
 801ba8a:	f8bd a02e 	ldrh.w	sl, [sp, #46]	; 0x2e
 801ba8e:	441a      	add	r2, r3
 801ba90:	448a      	add	sl, r1
 801ba92:	9105      	str	r1, [sp, #20]
 801ba94:	b292      	uxth	r2, r2
 801ba96:	fa1f fa8a 	uxth.w	sl, sl
 801ba9a:	fa0f f882 	sxth.w	r8, r2
 801ba9e:	fa0f f98a 	sxth.w	r9, sl
 801baa2:	e9cd 2307 	strd	r2, r3, [sp, #28]
 801baa6:	9b04      	ldr	r3, [sp, #16]
 801baa8:	2b00      	cmp	r3, #0
 801baaa:	d053      	beq.n	801bb54 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 801baac:	9903      	ldr	r1, [sp, #12]
 801baae:	4620      	mov	r0, r4
 801bab0:	f7ff fd28 	bl	801b504 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801bab4:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801bab8:	b1c0      	cbz	r0, 801baec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801baba:	f9b4 e000 	ldrsh.w	lr, [r4]
 801babe:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801bac2:	4576      	cmp	r6, lr
 801bac4:	dc23      	bgt.n	801bb0e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801bac6:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 801baca:	44f4      	add	ip, lr
 801bacc:	fa0f fc8c 	sxth.w	ip, ip
 801bad0:	45e0      	cmp	r8, ip
 801bad2:	db1c      	blt.n	801bb0e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801bad4:	428f      	cmp	r7, r1
 801bad6:	fa1f fc81 	uxth.w	ip, r1
 801bada:	88e1      	ldrh	r1, [r4, #6]
 801badc:	dc0d      	bgt.n	801bafa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 801bade:	ebaa 0c0c 	sub.w	ip, sl, ip
 801bae2:	f8a4 9002 	strh.w	r9, [r4, #2]
 801bae6:	eba1 010c 	sub.w	r1, r1, ip
 801baea:	80e1      	strh	r1, [r4, #6]
 801baec:	4628      	mov	r0, r5
 801baee:	9904      	ldr	r1, [sp, #16]
 801baf0:	3c08      	subs	r4, #8
 801baf2:	4605      	mov	r5, r0
 801baf4:	3901      	subs	r1, #1
 801baf6:	9104      	str	r1, [sp, #16]
 801baf8:	e7d3      	b.n	801baa2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x19a>
 801bafa:	4461      	add	r1, ip
 801bafc:	b209      	sxth	r1, r1
 801bafe:	4549      	cmp	r1, r9
 801bb00:	dcf5      	bgt.n	801baee <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801bb02:	9905      	ldr	r1, [sp, #20]
 801bb04:	eba1 0c0c 	sub.w	ip, r1, ip
 801bb08:	f8a4 c006 	strh.w	ip, [r4, #6]
 801bb0c:	e7ee      	b.n	801baec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801bb0e:	428f      	cmp	r7, r1
 801bb10:	dced      	bgt.n	801baee <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801bb12:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 801bb16:	4461      	add	r1, ip
 801bb18:	b209      	sxth	r1, r1
 801bb1a:	4589      	cmp	r9, r1
 801bb1c:	dbe7      	blt.n	801baee <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801bb1e:	4576      	cmp	r6, lr
 801bb20:	fa1f fc8e 	uxth.w	ip, lr
 801bb24:	88a1      	ldrh	r1, [r4, #4]
 801bb26:	dc07      	bgt.n	801bb38 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x230>
 801bb28:	eba2 0c0c 	sub.w	ip, r2, ip
 801bb2c:	f8a4 8000 	strh.w	r8, [r4]
 801bb30:	eba1 010c 	sub.w	r1, r1, ip
 801bb34:	80a1      	strh	r1, [r4, #4]
 801bb36:	e7d9      	b.n	801baec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801bb38:	4461      	add	r1, ip
 801bb3a:	b209      	sxth	r1, r1
 801bb3c:	4588      	cmp	r8, r1
 801bb3e:	dbd6      	blt.n	801baee <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801bb40:	eba3 0c0c 	sub.w	ip, r3, ip
 801bb44:	f8a4 c004 	strh.w	ip, [r4, #4]
 801bb48:	e7d0      	b.n	801baec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801bb4a:	bf00      	nop
 801bb4c:	24026172 	.word	0x24026172
 801bb50:	24026170 	.word	0x24026170
 801bb54:	2d00      	cmp	r5, #0
 801bb56:	f000 816d 	beq.w	801be34 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 801bb5a:	9b06      	ldr	r3, [sp, #24]
 801bb5c:	445b      	add	r3, fp
 801bb5e:	461c      	mov	r4, r3
 801bb60:	9b02      	ldr	r3, [sp, #8]
 801bb62:	3301      	adds	r3, #1
 801bb64:	f000 8166 	beq.w	801be34 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 801bb68:	f104 05a4 	add.w	r5, r4, #164	; 0xa4
 801bb6c:	9803      	ldr	r0, [sp, #12]
 801bb6e:	4629      	mov	r1, r5
 801bb70:	f7ff fd3a 	bl	801b5e8 <_ZNK8touchgfx4Rect8includesERKS0_>
 801bb74:	b120      	cbz	r0, 801bb80 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x278>
 801bb76:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801bb7a:	9801      	ldr	r0, [sp, #4]
 801bb7c:	f7ff feb0 	bl	801b8e0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801bb80:	9903      	ldr	r1, [sp, #12]
 801bb82:	4628      	mov	r0, r5
 801bb84:	f7ff fcbe 	bl	801b504 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801bb88:	2800      	cmp	r0, #0
 801bb8a:	f000 809c 	beq.w	801bcc6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 801bb8e:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	; 0xa4
 801bb92:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 801bb96:	fa1f f189 	uxth.w	r1, r9
 801bb9a:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 801bb9e:	9309      	str	r3, [sp, #36]	; 0x24
 801bba0:	eb01 0c03 	add.w	ip, r1, r3
 801bba4:	b283      	uxth	r3, r0
 801bba6:	4548      	cmp	r0, r9
 801bba8:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	; 0x2a
 801bbac:	fa1f fa8c 	uxth.w	sl, ip
 801bbb0:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 801bbb4:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	; 0xa6
 801bbb8:	eb03 050c 	add.w	r5, r3, ip
 801bbbc:	b2ad      	uxth	r5, r5
 801bbbe:	9505      	str	r5, [sp, #20]
 801bbc0:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 801bbc4:	9504      	str	r5, [sp, #16]
 801bbc6:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	; 0xec
 801bbca:	f340 8099 	ble.w	801bd00 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3f8>
 801bbce:	1a5b      	subs	r3, r3, r1
 801bbd0:	4596      	cmp	lr, r2
 801bbd2:	fa0f f08a 	sxth.w	r0, sl
 801bbd6:	b29b      	uxth	r3, r3
 801bbd8:	b21e      	sxth	r6, r3
 801bbda:	dd2e      	ble.n	801bc3a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x332>
 801bbdc:	9f02      	ldr	r7, [sp, #8]
 801bbde:	fa1f fe8e 	uxth.w	lr, lr
 801bbe2:	b292      	uxth	r2, r2
 801bbe4:	f8bd 402e 	ldrh.w	r4, [sp, #46]	; 0x2e
 801bbe8:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 801bbec:	9f04      	ldr	r7, [sp, #16]
 801bbee:	ebae 0102 	sub.w	r1, lr, r2
 801bbf2:	44a6      	add	lr, r4
 801bbf4:	1a3f      	subs	r7, r7, r0
 801bbf6:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	; 0xb2
 801bbfa:	b289      	uxth	r1, r1
 801bbfc:	4402      	add	r2, r0
 801bbfe:	fa0f fe8e 	sxth.w	lr, lr
 801bc02:	b20d      	sxth	r5, r1
 801bc04:	b212      	sxth	r2, r2
 801bc06:	436f      	muls	r7, r5
 801bc08:	ebae 0202 	sub.w	r2, lr, r2
 801bc0c:	4372      	muls	r2, r6
 801bc0e:	4297      	cmp	r7, r2
 801bc10:	db09      	blt.n	801bc26 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 801bc12:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	; 0xac
 801bc16:	f8a8 50b2 	strh.w	r5, [r8, #178]	; 0xb2
 801bc1a:	449c      	add	ip, r3
 801bc1c:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801bc20:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 801bc24:	e686      	b.n	801b934 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801bc26:	4421      	add	r1, r4
 801bc28:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	; 0xae
 801bc2c:	f8a8 60b0 	strh.w	r6, [r8, #176]	; 0xb0
 801bc30:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801bc34:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801bc38:	e67c      	b.n	801b934 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801bc3a:	9f04      	ldr	r7, [sp, #16]
 801bc3c:	42b8      	cmp	r0, r7
 801bc3e:	da27      	bge.n	801bc90 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 801bc40:	9902      	ldr	r1, [sp, #8]
 801bc42:	1a3f      	subs	r7, r7, r0
 801bc44:	f8bd 502e 	ldrh.w	r5, [sp, #46]	; 0x2e
 801bc48:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 801bc4c:	eb05 010e 	add.w	r1, r5, lr
 801bc50:	fa1f f881 	uxth.w	r8, r1
 801bc54:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	; 0xb2
 801bc58:	4411      	add	r1, r2
 801bc5a:	fa0f f988 	sxth.w	r9, r8
 801bc5e:	eba2 020e 	sub.w	r2, r2, lr
 801bc62:	eba1 0108 	sub.w	r1, r1, r8
 801bc66:	4372      	muls	r2, r6
 801bc68:	b289      	uxth	r1, r1
 801bc6a:	fa0f f881 	sxth.w	r8, r1
 801bc6e:	fb08 f707 	mul.w	r7, r8, r7
 801bc72:	42ba      	cmp	r2, r7
 801bc74:	dc06      	bgt.n	801bc84 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37c>
 801bc76:	f8a4 90ae 	strh.w	r9, [r4, #174]	; 0xae
 801bc7a:	f8a4 80b2 	strh.w	r8, [r4, #178]	; 0xb2
 801bc7e:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
 801bc82:	e7ca      	b.n	801bc1a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x312>
 801bc84:	4429      	add	r1, r5
 801bc86:	f8a4 60b0 	strh.w	r6, [r4, #176]	; 0xb0
 801bc8a:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801bc8e:	e651      	b.n	801b934 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801bc90:	9805      	ldr	r0, [sp, #20]
 801bc92:	2d06      	cmp	r5, #6
 801bc94:	ebaa 0000 	sub.w	r0, sl, r0
 801bc98:	b280      	uxth	r0, r0
 801bc9a:	fa0f fe80 	sxth.w	lr, r0
 801bc9e:	d817      	bhi.n	801bcd0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c8>
 801bca0:	9b04      	ldr	r3, [sp, #16]
 801bca2:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	; 0xaa
 801bca6:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 801bcaa:	1c6b      	adds	r3, r5, #1
 801bcac:	f8a4 e0a8 	strh.w	lr, [r4, #168]	; 0xa8
 801bcb0:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
 801bcb4:	9b01      	ldr	r3, [sp, #4]
 801bcb6:	9801      	ldr	r0, [sp, #4]
 801bcb8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801bcbc:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 801bcc0:	805a      	strh	r2, [r3, #2]
 801bcc2:	809e      	strh	r6, [r3, #4]
 801bcc4:	80d9      	strh	r1, [r3, #6]
 801bcc6:	9b02      	ldr	r3, [sp, #8]
 801bcc8:	3c08      	subs	r4, #8
 801bcca:	3b01      	subs	r3, #1
 801bccc:	9302      	str	r3, [sp, #8]
 801bcce:	e747      	b.n	801bb60 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>
 801bcd0:	9a02      	ldr	r2, [sp, #8]
 801bcd2:	45b6      	cmp	lr, r6
 801bcd4:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801bcd8:	db0d      	blt.n	801bcf6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 801bcda:	449c      	add	ip, r3
 801bcdc:	445a      	add	r2, fp
 801bcde:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
 801bce2:	fa1f fc8c 	uxth.w	ip, ip
 801bce6:	f8a2 e0b0 	strh.w	lr, [r2, #176]	; 0xb0
 801bcea:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 801bcee:	448c      	add	ip, r1
 801bcf0:	f8a2 c0ac 	strh.w	ip, [r2, #172]	; 0xac
 801bcf4:	e61e      	b.n	801b934 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801bcf6:	445a      	add	r2, fp
 801bcf8:	4484      	add	ip, r0
 801bcfa:	f8a2 60b0 	strh.w	r6, [r2, #176]	; 0xb0
 801bcfe:	e78f      	b.n	801bc20 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 801bd00:	fa1f f18e 	uxth.w	r1, lr
 801bd04:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
 801bd08:	b293      	uxth	r3, r2
 801bd0a:	4596      	cmp	lr, r2
 801bd0c:	eb01 0806 	add.w	r8, r1, r6
 801bd10:	9306      	str	r3, [sp, #24]
 801bd12:	fa1f f888 	uxth.w	r8, r8
 801bd16:	9f06      	ldr	r7, [sp, #24]
 801bd18:	fa0f f388 	sxth.w	r3, r8
 801bd1c:	9307      	str	r3, [sp, #28]
 801bd1e:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
 801bd22:	443b      	add	r3, r7
 801bd24:	b29b      	uxth	r3, r3
 801bd26:	9308      	str	r3, [sp, #32]
 801bd28:	da24      	bge.n	801bd74 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46c>
 801bd2a:	9905      	ldr	r1, [sp, #20]
 801bd2c:	eba3 0308 	sub.w	r3, r3, r8
 801bd30:	eba2 020e 	sub.w	r2, r2, lr
 801bd34:	eba9 0000 	sub.w	r0, r9, r0
 801bd38:	ebaa 0401 	sub.w	r4, sl, r1
 801bd3c:	b29b      	uxth	r3, r3
 801bd3e:	b2a4      	uxth	r4, r4
 801bd40:	b219      	sxth	r1, r3
 801bd42:	b225      	sxth	r5, r4
 801bd44:	4348      	muls	r0, r1
 801bd46:	436a      	muls	r2, r5
 801bd48:	4282      	cmp	r2, r0
 801bd4a:	9a02      	ldr	r2, [sp, #8]
 801bd4c:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801bd50:	445a      	add	r2, fp
 801bd52:	dc06      	bgt.n	801bd62 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45a>
 801bd54:	9b07      	ldr	r3, [sp, #28]
 801bd56:	44a4      	add	ip, r4
 801bd58:	f8a2 10b2 	strh.w	r1, [r2, #178]	; 0xb2
 801bd5c:	f8a2 30ae 	strh.w	r3, [r2, #174]	; 0xae
 801bd60:	e75e      	b.n	801bc20 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 801bd62:	9904      	ldr	r1, [sp, #16]
 801bd64:	f8a2 50b0 	strh.w	r5, [r2, #176]	; 0xb0
 801bd68:	f8a2 10ac 	strh.w	r1, [r2, #172]	; 0xac
 801bd6c:	4433      	add	r3, r6
 801bd6e:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801bd72:	e5df      	b.n	801b934 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801bd74:	9f06      	ldr	r7, [sp, #24]
 801bd76:	9b04      	ldr	r3, [sp, #16]
 801bd78:	1bc9      	subs	r1, r1, r7
 801bd7a:	fa0f f78a 	sxth.w	r7, sl
 801bd7e:	b289      	uxth	r1, r1
 801bd80:	429f      	cmp	r7, r3
 801bd82:	fa0f fe81 	sxth.w	lr, r1
 801bd86:	dd23      	ble.n	801bdd0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c8>
 801bd88:	9a05      	ldr	r2, [sp, #20]
 801bd8a:	eba9 0000 	sub.w	r0, r9, r0
 801bd8e:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801bd92:	ebaa 0202 	sub.w	r2, sl, r2
 801bd96:	9d07      	ldr	r5, [sp, #28]
 801bd98:	fb0e f000 	mul.w	r0, lr, r0
 801bd9c:	b292      	uxth	r2, r2
 801bd9e:	eba5 0a03 	sub.w	sl, r5, r3
 801bda2:	9b02      	ldr	r3, [sp, #8]
 801bda4:	b214      	sxth	r4, r2
 801bda6:	00db      	lsls	r3, r3, #3
 801bda8:	fb04 fa0a 	mul.w	sl, r4, sl
 801bdac:	445b      	add	r3, fp
 801bdae:	4550      	cmp	r0, sl
 801bdb0:	db03      	blt.n	801bdba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4b2>
 801bdb2:	f8a3 e0b2 	strh.w	lr, [r3, #178]	; 0xb2
 801bdb6:	4494      	add	ip, r2
 801bdb8:	e732      	b.n	801bc20 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 801bdba:	9a04      	ldr	r2, [sp, #16]
 801bdbc:	4431      	add	r1, r6
 801bdbe:	f8a3 40b0 	strh.w	r4, [r3, #176]	; 0xb0
 801bdc2:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 801bdc6:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
 801bdca:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801bdce:	e75c      	b.n	801bc8a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x382>
 801bdd0:	9b08      	ldr	r3, [sp, #32]
 801bdd2:	2d06      	cmp	r5, #6
 801bdd4:	eba3 0308 	sub.w	r3, r3, r8
 801bdd8:	b29b      	uxth	r3, r3
 801bdda:	b218      	sxth	r0, r3
 801bddc:	d813      	bhi.n	801be06 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4fe>
 801bdde:	9b07      	ldr	r3, [sp, #28]
 801bde0:	f8a4 00aa 	strh.w	r0, [r4, #170]	; 0xaa
 801bde4:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
 801bde8:	1c6b      	adds	r3, r5, #1
 801bdea:	9901      	ldr	r1, [sp, #4]
 801bdec:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
 801bdf0:	9b01      	ldr	r3, [sp, #4]
 801bdf2:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 801bdf6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801bdfa:	805a      	strh	r2, [r3, #2]
 801bdfc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801bdfe:	f8a3 e006 	strh.w	lr, [r3, #6]
 801be02:	809a      	strh	r2, [r3, #4]
 801be04:	e75f      	b.n	801bcc6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 801be06:	9c02      	ldr	r4, [sp, #8]
 801be08:	4570      	cmp	r0, lr
 801be0a:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 801be0e:	db0d      	blt.n	801be2c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x524>
 801be10:	4431      	add	r1, r6
 801be12:	9b06      	ldr	r3, [sp, #24]
 801be14:	445c      	add	r4, fp
 801be16:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 801be1a:	b289      	uxth	r1, r1
 801be1c:	f8a4 00b2 	strh.w	r0, [r4, #178]	; 0xb2
 801be20:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801be24:	4419      	add	r1, r3
 801be26:	f8a4 10ae 	strh.w	r1, [r4, #174]	; 0xae
 801be2a:	e583      	b.n	801b934 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801be2c:	445c      	add	r4, fp
 801be2e:	f8a4 e0b2 	strh.w	lr, [r4, #178]	; 0xb2
 801be32:	e79b      	b.n	801bd6c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x464>
 801be34:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	; 0xec
 801be38:	2e07      	cmp	r6, #7
 801be3a:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 801be3e:	d812      	bhi.n	801be66 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x55e>
 801be40:	1c75      	adds	r5, r6, #1
 801be42:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 801be46:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 801be4a:	f8ab 50ec 	strh.w	r5, [fp, #236]	; 0xec
 801be4e:	9d01      	ldr	r5, [sp, #4]
 801be50:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 801be54:	442c      	add	r4, r5
 801be56:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 801be5a:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 801be5e:	8061      	strh	r1, [r4, #2]
 801be60:	80a2      	strh	r2, [r4, #4]
 801be62:	80e3      	strh	r3, [r4, #6]
 801be64:	e5d0      	b.n	801ba08 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801be66:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
 801be6a:	3e01      	subs	r6, #1
 801be6c:	445c      	add	r4, fp
 801be6e:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 801be72:	f04f 37ff 	mov.w	r7, #4294967295
 801be76:	2500      	movs	r5, #0
 801be78:	9305      	str	r3, [sp, #20]
 801be7a:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 801be7e:	1e72      	subs	r2, r6, #1
 801be80:	9302      	str	r3, [sp, #8]
 801be82:	4691      	mov	r9, r2
 801be84:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	; 0xaa
 801be88:	9304      	str	r3, [sp, #16]
 801be8a:	f104 03a4 	add.w	r3, r4, #164	; 0xa4
 801be8e:	f1b9 3fff 	cmp.w	r9, #4294967295
 801be92:	6818      	ldr	r0, [r3, #0]
 801be94:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801be98:	9207      	str	r2, [sp, #28]
 801be9a:	bf16      	itet	ne
 801be9c:	9905      	ldrne	r1, [sp, #20]
 801be9e:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 801bea2:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 801bea6:	9306      	str	r3, [sp, #24]
 801bea8:	f8be 1006 	ldrh.w	r1, [lr, #6]
 801beac:	f8be 8004 	ldrh.w	r8, [lr, #4]
 801beb0:	fb18 f801 	smulbb	r8, r8, r1
 801beb4:	6859      	ldr	r1, [r3, #4]
 801beb6:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801beba:	4671      	mov	r1, lr
 801bebc:	a80c      	add	r0, sp, #48	; 0x30
 801bebe:	f7ff fbb9 	bl	801b634 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801bec2:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 801bec6:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 801beca:	f04f 0c08 	mov.w	ip, #8
 801bece:	9b04      	ldr	r3, [sp, #16]
 801bed0:	9a02      	ldr	r2, [sp, #8]
 801bed2:	fb10 f001 	smulbb	r0, r0, r1
 801bed6:	fb02 8803 	mla	r8, r2, r3, r8
 801beda:	eba0 0108 	sub.w	r1, r0, r8
 801bede:	fb90 f0fc 	sdiv	r0, r0, ip
 801bee2:	4288      	cmp	r0, r1
 801bee4:	dc20      	bgt.n	801bf28 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x620>
 801bee6:	4551      	cmp	r1, sl
 801bee8:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801beec:	da03      	bge.n	801bef6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ee>
 801beee:	b1d9      	cbz	r1, 801bf28 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x620>
 801bef0:	468a      	mov	sl, r1
 801bef2:	464f      	mov	r7, r9
 801bef4:	4635      	mov	r5, r6
 801bef6:	f109 39ff 	add.w	r9, r9, #4294967295
 801befa:	f119 0f02 	cmn.w	r9, #2
 801befe:	d1c6      	bne.n	801be8e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x586>
 801bf00:	4616      	mov	r6, r2
 801bf02:	3201      	adds	r2, #1
 801bf04:	f1a4 0408 	sub.w	r4, r4, #8
 801bf08:	d1b7      	bne.n	801be7a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x572>
 801bf0a:	9b01      	ldr	r3, [sp, #4]
 801bf0c:	b2ac      	uxth	r4, r5
 801bf0e:	00ed      	lsls	r5, r5, #3
 801bf10:	1958      	adds	r0, r3, r5
 801bf12:	1c7b      	adds	r3, r7, #1
 801bf14:	d10b      	bne.n	801bf2e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x626>
 801bf16:	4601      	mov	r1, r0
 801bf18:	9803      	ldr	r0, [sp, #12]
 801bf1a:	f7ff fb8b 	bl	801b634 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801bf1e:	4621      	mov	r1, r4
 801bf20:	9801      	ldr	r0, [sp, #4]
 801bf22:	f7ff fcdd 	bl	801b8e0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801bf26:	e505      	b.n	801b934 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801bf28:	464f      	mov	r7, r9
 801bf2a:	4635      	mov	r5, r6
 801bf2c:	e7ed      	b.n	801bf0a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x602>
 801bf2e:	9b01      	ldr	r3, [sp, #4]
 801bf30:	00ff      	lsls	r7, r7, #3
 801bf32:	445d      	add	r5, fp
 801bf34:	19d9      	adds	r1, r3, r7
 801bf36:	445f      	add	r7, fp
 801bf38:	f7ff fb7c 	bl	801b634 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801bf3c:	9b03      	ldr	r3, [sp, #12]
 801bf3e:	cb03      	ldmia	r3!, {r0, r1}
 801bf40:	9b03      	ldr	r3, [sp, #12]
 801bf42:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
 801bf46:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 801bf4a:	f855 0fac 	ldr.w	r0, [r5, #172]!
 801bf4e:	6869      	ldr	r1, [r5, #4]
 801bf50:	c303      	stmia	r3!, {r0, r1}
 801bf52:	e7e4      	b.n	801bf1e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x616>

0801bf54 <_ZN8touchgfx11Application10invalidateEv>:
 801bf54:	4b09      	ldr	r3, [pc, #36]	; (801bf7c <_ZN8touchgfx11Application10invalidateEv+0x28>)
 801bf56:	b082      	sub	sp, #8
 801bf58:	2100      	movs	r1, #0
 801bf5a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801bf5e:	4b08      	ldr	r3, [pc, #32]	; (801bf80 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 801bf60:	9100      	str	r1, [sp, #0]
 801bf62:	f9b3 3000 	ldrsh.w	r3, [r3]
 801bf66:	f8ad 2004 	strh.w	r2, [sp, #4]
 801bf6a:	f8ad 3006 	strh.w	r3, [sp, #6]
 801bf6e:	ab02      	add	r3, sp, #8
 801bf70:	e913 0006 	ldmdb	r3, {r1, r2}
 801bf74:	b002      	add	sp, #8
 801bf76:	f7ff bcc7 	b.w	801b908 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801bf7a:	bf00      	nop
 801bf7c:	24026170 	.word	0x24026170
 801bf80:	24026172 	.word	0x24026172

0801bf84 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 801bf84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bf88:	f500 7698 	add.w	r6, r0, #304	; 0x130
 801bf8c:	b09b      	sub	sp, #108	; 0x6c
 801bf8e:	4604      	mov	r4, r0
 801bf90:	4630      	mov	r0, r6
 801bf92:	f7fc ffdc 	bl	8018f4e <_ZNK8touchgfx4Rect7isEmptyEv>
 801bf96:	4605      	mov	r5, r0
 801bf98:	b940      	cbnz	r0, 801bfac <_ZN8touchgfx11Application15drawCachedAreasEv+0x28>
 801bf9a:	4620      	mov	r0, r4
 801bf9c:	e896 0006 	ldmia.w	r6, {r1, r2}
 801bfa0:	f7ff fcb2 	bl	801b908 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801bfa4:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 801bfa8:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
 801bfac:	4bc8      	ldr	r3, [pc, #800]	; (801c2d0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 801bfae:	681b      	ldr	r3, [r3, #0]
 801bfb0:	2b00      	cmp	r3, #0
 801bfb2:	d03e      	beq.n	801c032 <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 801bfb4:	4dc7      	ldr	r5, [pc, #796]	; (801c2d4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 801bfb6:	4628      	mov	r0, r5
 801bfb8:	f7fc ffc9 	bl	8018f4e <_ZNK8touchgfx4Rect7isEmptyEv>
 801bfbc:	4606      	mov	r6, r0
 801bfbe:	2800      	cmp	r0, #0
 801bfc0:	d137      	bne.n	801c032 <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 801bfc2:	4628      	mov	r0, r5
 801bfc4:	f7ff f9d0 	bl	801b368 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801bfc8:	6829      	ldr	r1, [r5, #0]
 801bfca:	686a      	ldr	r2, [r5, #4]
 801bfcc:	4620      	mov	r0, r4
 801bfce:	f7ff fc9b 	bl	801b908 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801bfd2:	802e      	strh	r6, [r5, #0]
 801bfd4:	806e      	strh	r6, [r5, #2]
 801bfd6:	80ae      	strh	r6, [r5, #4]
 801bfd8:	80ee      	strh	r6, [r5, #6]
 801bfda:	ae09      	add	r6, sp, #36	; 0x24
 801bfdc:	4630      	mov	r0, r6
 801bfde:	f7ff fc23 	bl	801b828 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801bfe2:	4abd      	ldr	r2, [pc, #756]	; (801c2d8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 801bfe4:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
 801bfe8:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 801bfec:	8815      	ldrh	r5, [r2, #0]
 801bfee:	9202      	str	r2, [sp, #8]
 801bff0:	462b      	mov	r3, r5
 801bff2:	429f      	cmp	r7, r3
 801bff4:	d924      	bls.n	801c040 <_ZN8touchgfx11Application15drawCachedAreasEv+0xbc>
 801bff6:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 801bffa:	2907      	cmp	r1, #7
 801bffc:	d816      	bhi.n	801c02c <_ZN8touchgfx11Application15drawCachedAreasEv+0xa8>
 801bffe:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 801c002:	f930 8033 	ldrsh.w	r8, [r0, r3, lsl #3]
 801c006:	f9b2 9002 	ldrsh.w	r9, [r2, #2]
 801c00a:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 801c00e:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 801c012:	1c4a      	adds	r2, r1, #1
 801c014:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
 801c018:	eb06 02c1 	add.w	r2, r6, r1, lsl #3
 801c01c:	f826 8031 	strh.w	r8, [r6, r1, lsl #3]
 801c020:	f8a2 9002 	strh.w	r9, [r2, #2]
 801c024:	f8a2 e004 	strh.w	lr, [r2, #4]
 801c028:	f8a2 c006 	strh.w	ip, [r2, #6]
 801c02c:	3301      	adds	r3, #1
 801c02e:	b29b      	uxth	r3, r3
 801c030:	e7df      	b.n	801bff2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x6e>
 801c032:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 801c036:	2b00      	cmp	r3, #0
 801c038:	d1cf      	bne.n	801bfda <_ZN8touchgfx11Application15drawCachedAreasEv+0x56>
 801c03a:	b01b      	add	sp, #108	; 0x6c
 801c03c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c040:	462f      	mov	r7, r5
 801c042:	f8b4 312e 	ldrh.w	r3, [r4, #302]	; 0x12e
 801c046:	42bb      	cmp	r3, r7
 801c048:	d90b      	bls.n	801c062 <_ZN8touchgfx11Application15drawCachedAreasEv+0xde>
 801c04a:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
 801c04e:	3701      	adds	r7, #1
 801c050:	4620      	mov	r0, r4
 801c052:	f8d3 10ee 	ldr.w	r1, [r3, #238]	; 0xee
 801c056:	b2bf      	uxth	r7, r7
 801c058:	f8d3 20f2 	ldr.w	r2, [r3, #242]	; 0xf2
 801c05c:	f7ff fc54 	bl	801b908 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801c060:	e7ef      	b.n	801c042 <_ZN8touchgfx11Application15drawCachedAreasEv+0xbe>
 801c062:	4a9e      	ldr	r2, [pc, #632]	; (801c2dc <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 801c064:	6813      	ldr	r3, [r2, #0]
 801c066:	4690      	mov	r8, r2
 801c068:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801c06c:	2b01      	cmp	r3, #1
 801c06e:	f040 80e4 	bne.w	801c23a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b6>
 801c072:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 801c076:	4629      	mov	r1, r5
 801c078:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
 801c07c:	2500      	movs	r5, #0
 801c07e:	33ae      	adds	r3, #174	; 0xae
 801c080:	428f      	cmp	r7, r1
 801c082:	f103 0308 	add.w	r3, r3, #8
 801c086:	dd0a      	ble.n	801c09e <_ZN8touchgfx11Application15drawCachedAreasEv+0x11a>
 801c088:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 801c08c:	3101      	adds	r1, #1
 801c08e:	f833 0c04 	ldrh.w	r0, [r3, #-4]
 801c092:	4402      	add	r2, r0
 801c094:	b212      	sxth	r2, r2
 801c096:	4295      	cmp	r5, r2
 801c098:	bfb8      	it	lt
 801c09a:	4615      	movlt	r5, r2
 801c09c:	e7f0      	b.n	801c080 <_ZN8touchgfx11Application15drawCachedAreasEv+0xfc>
 801c09e:	4b90      	ldr	r3, [pc, #576]	; (801c2e0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 801c0a0:	f8df b238 	ldr.w	fp, [pc, #568]	; 801c2dc <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>
 801c0a4:	881b      	ldrh	r3, [r3, #0]
 801c0a6:	46d8      	mov	r8, fp
 801c0a8:	2b0f      	cmp	r3, #15
 801c0aa:	bf8c      	ite	hi
 801c0ac:	ea4f 0ad3 	movhi.w	sl, r3, lsr #3
 801c0b0:	f04f 0a01 	movls.w	sl, #1
 801c0b4:	2300      	movs	r3, #0
 801c0b6:	e9cd 3305 	strd	r3, r3, [sp, #20]
 801c0ba:	f8bd 701a 	ldrh.w	r7, [sp, #26]
 801c0be:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 801c0c2:	4438      	add	r0, r7
 801c0c4:	b207      	sxth	r7, r0
 801c0c6:	f8db 0000 	ldr.w	r0, [fp]
 801c0ca:	42bd      	cmp	r5, r7
 801c0cc:	6803      	ldr	r3, [r0, #0]
 801c0ce:	f340 8084 	ble.w	801c1da <_ZN8touchgfx11Application15drawCachedAreasEv+0x256>
 801c0d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801c0d6:	4798      	blx	r3
 801c0d8:	eb07 030a 	add.w	r3, r7, sl
 801c0dc:	4298      	cmp	r0, r3
 801c0de:	da07      	bge.n	801c0f0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 801c0e0:	4285      	cmp	r5, r0
 801c0e2:	dd05      	ble.n	801c0f0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 801c0e4:	4287      	cmp	r7, r0
 801c0e6:	dd6d      	ble.n	801c1c4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 801c0e8:	2f00      	cmp	r7, #0
 801c0ea:	dd6b      	ble.n	801c1c4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 801c0ec:	4628      	mov	r0, r5
 801c0ee:	e004      	b.n	801c0fa <_ZN8touchgfx11Application15drawCachedAreasEv+0x176>
 801c0f0:	4287      	cmp	r7, r0
 801c0f2:	dcfb      	bgt.n	801c0ec <_ZN8touchgfx11Application15drawCachedAreasEv+0x168>
 801c0f4:	42a8      	cmp	r0, r5
 801c0f6:	bfa8      	it	ge
 801c0f8:	4628      	movge	r0, r5
 801c0fa:	4b7a      	ldr	r3, [pc, #488]	; (801c2e4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>)
 801c0fc:	1bc0      	subs	r0, r0, r7
 801c0fe:	2200      	movs	r2, #0
 801c100:	f8ad 7016 	strh.w	r7, [sp, #22]
 801c104:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c108:	f8ad 2014 	strh.w	r2, [sp, #20]
 801c10c:	f8ad 3018 	strh.w	r3, [sp, #24]
 801c110:	9b02      	ldr	r3, [sp, #8]
 801c112:	f8ad 001a 	strh.w	r0, [sp, #26]
 801c116:	881f      	ldrh	r7, [r3, #0]
 801c118:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 801c11c:	42bb      	cmp	r3, r7
 801c11e:	d9cc      	bls.n	801c0ba <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
 801c120:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 801c124:	ab07      	add	r3, sp, #28
 801c126:	f852 0fac 	ldr.w	r0, [r2, #172]!
 801c12a:	6851      	ldr	r1, [r2, #4]
 801c12c:	c303      	stmia	r3!, {r0, r1}
 801c12e:	a905      	add	r1, sp, #20
 801c130:	a807      	add	r0, sp, #28
 801c132:	f7ff f9e7 	bl	801b504 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801c136:	2800      	cmp	r0, #0
 801c138:	d04c      	beq.n	801c1d4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x250>
 801c13a:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 801c13e:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 801c142:	f8bd 9020 	ldrh.w	r9, [sp, #32]
 801c146:	4686      	mov	lr, r0
 801c148:	4290      	cmp	r0, r2
 801c14a:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 801c14e:	4448      	add	r0, r9
 801c150:	f8bd 9018 	ldrh.w	r9, [sp, #24]
 801c154:	bfb8      	it	lt
 801c156:	4696      	movlt	lr, r2
 801c158:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801c15c:	444a      	add	r2, r9
 801c15e:	b280      	uxth	r0, r0
 801c160:	4299      	cmp	r1, r3
 801c162:	468c      	mov	ip, r1
 801c164:	b292      	uxth	r2, r2
 801c166:	9303      	str	r3, [sp, #12]
 801c168:	bfb8      	it	lt
 801c16a:	469c      	movlt	ip, r3
 801c16c:	b203      	sxth	r3, r0
 801c16e:	fa0f f982 	sxth.w	r9, r2
 801c172:	f8ad e01c 	strh.w	lr, [sp, #28]
 801c176:	f8ad c01e 	strh.w	ip, [sp, #30]
 801c17a:	454b      	cmp	r3, r9
 801c17c:	bfb8      	it	lt
 801c17e:	4602      	movlt	r2, r0
 801c180:	9b03      	ldr	r3, [sp, #12]
 801c182:	eba2 020e 	sub.w	r2, r2, lr
 801c186:	f8ad 2020 	strh.w	r2, [sp, #32]
 801c18a:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801c18e:	4411      	add	r1, r2
 801c190:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801c194:	4413      	add	r3, r2
 801c196:	b289      	uxth	r1, r1
 801c198:	b29b      	uxth	r3, r3
 801c19a:	b208      	sxth	r0, r1
 801c19c:	b21a      	sxth	r2, r3
 801c19e:	4290      	cmp	r0, r2
 801c1a0:	bfb8      	it	lt
 801c1a2:	460b      	movlt	r3, r1
 801c1a4:	eba3 030c 	sub.w	r3, r3, ip
 801c1a8:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801c1ac:	a807      	add	r0, sp, #28
 801c1ae:	f7fc fece 	bl	8018f4e <_ZNK8touchgfx4Rect7isEmptyEv>
 801c1b2:	b920      	cbnz	r0, 801c1be <_ZN8touchgfx11Application15drawCachedAreasEv+0x23a>
 801c1b4:	6823      	ldr	r3, [r4, #0]
 801c1b6:	a907      	add	r1, sp, #28
 801c1b8:	4620      	mov	r0, r4
 801c1ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c1bc:	4798      	blx	r3
 801c1be:	3701      	adds	r7, #1
 801c1c0:	b2bf      	uxth	r7, r7
 801c1c2:	e7a9      	b.n	801c118 <_ZN8touchgfx11Application15drawCachedAreasEv+0x194>
 801c1c4:	f8d8 0000 	ldr.w	r0, [r8]
 801c1c8:	2101      	movs	r1, #1
 801c1ca:	6803      	ldr	r3, [r0, #0]
 801c1cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801c1d0:	4798      	blx	r3
 801c1d2:	e772      	b.n	801c0ba <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
 801c1d4:	e9cd 0007 	strd	r0, r0, [sp, #28]
 801c1d8:	e7e8      	b.n	801c1ac <_ZN8touchgfx11Application15drawCachedAreasEv+0x228>
 801c1da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c1dc:	4798      	blx	r3
 801c1de:	4b42      	ldr	r3, [pc, #264]	; (801c2e8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x364>)
 801c1e0:	781b      	ldrb	r3, [r3, #0]
 801c1e2:	2b00      	cmp	r3, #0
 801c1e4:	f43f af29 	beq.w	801c03a <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 801c1e8:	2300      	movs	r3, #0
 801c1ea:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 801c1ee:	f104 00ee 	add.w	r0, r4, #238	; 0xee
 801c1f2:	f8a4 312e 	strh.w	r3, [r4, #302]	; 0x12e
 801c1f6:	9b02      	ldr	r3, [sp, #8]
 801c1f8:	881b      	ldrh	r3, [r3, #0]
 801c1fa:	429d      	cmp	r5, r3
 801c1fc:	f67f af1d 	bls.w	801c03a <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 801c200:	f8b4 112e 	ldrh.w	r1, [r4, #302]	; 0x12e
 801c204:	2907      	cmp	r1, #7
 801c206:	d815      	bhi.n	801c234 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b0>
 801c208:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 801c20c:	f936 8033 	ldrsh.w	r8, [r6, r3, lsl #3]
 801c210:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 801c214:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
 801c218:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
 801c21c:	1c4a      	adds	r2, r1, #1
 801c21e:	f8a4 212e 	strh.w	r2, [r4, #302]	; 0x12e
 801c222:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 801c226:	f820 8031 	strh.w	r8, [r0, r1, lsl #3]
 801c22a:	f8a2 e002 	strh.w	lr, [r2, #2]
 801c22e:	f8a2 c004 	strh.w	ip, [r2, #4]
 801c232:	80d7      	strh	r7, [r2, #6]
 801c234:	3301      	adds	r3, #1
 801c236:	b29b      	uxth	r3, r3
 801c238:	e7df      	b.n	801c1fa <_ZN8touchgfx11Application15drawCachedAreasEv+0x276>
 801c23a:	2b02      	cmp	r3, #2
 801c23c:	f040 8135 	bne.w	801c4aa <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
 801c240:	4b2a      	ldr	r3, [pc, #168]	; (801c2ec <_ZN8touchgfx11Application15drawCachedAreasEv+0x368>)
 801c242:	f104 09ac 	add.w	r9, r4, #172	; 0xac
 801c246:	781b      	ldrb	r3, [r3, #0]
 801c248:	2b01      	cmp	r3, #1
 801c24a:	f000 809c 	beq.w	801c386 <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 801c24e:	9b02      	ldr	r3, [sp, #8]
 801c250:	f8b4 20ec 	ldrh.w	r2, [r4, #236]	; 0xec
 801c254:	f8b3 b000 	ldrh.w	fp, [r3]
 801c258:	f10b 0b01 	add.w	fp, fp, #1
 801c25c:	fa1f fb8b 	uxth.w	fp, fp
 801c260:	2a00      	cmp	r2, #0
 801c262:	d0bc      	beq.n	801c1de <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801c264:	f8b4 50ae 	ldrh.w	r5, [r4, #174]	; 0xae
 801c268:	4659      	mov	r1, fp
 801c26a:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	; 0xb2
 801c26e:	f04f 0800 	mov.w	r8, #0
 801c272:	441d      	add	r5, r3
 801c274:	b22d      	sxth	r5, r5
 801c276:	b28b      	uxth	r3, r1
 801c278:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 801c27c:	429a      	cmp	r2, r3
 801c27e:	f240 80c0 	bls.w	801c402 <_ZN8touchgfx11Application15drawCachedAreasEv+0x47e>
 801c282:	4427      	add	r7, r4
 801c284:	eb04 0ec1 	add.w	lr, r4, r1, lsl #3
 801c288:	4608      	mov	r0, r1
 801c28a:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	; 0xae
 801c28e:	f9be c0ae 	ldrsh.w	ip, [lr, #174]	; 0xae
 801c292:	4563      	cmp	r3, ip
 801c294:	f340 80a2 	ble.w	801c3dc <_ZN8touchgfx11Application15drawCachedAreasEv+0x458>
 801c298:	f8be 50b2 	ldrh.w	r5, [lr, #178]	; 0xb2
 801c29c:	4465      	add	r5, ip
 801c29e:	b22d      	sxth	r5, r5
 801c2a0:	429d      	cmp	r5, r3
 801c2a2:	bfa8      	it	ge
 801c2a4:	461d      	movge	r5, r3
 801c2a6:	3101      	adds	r1, #1
 801c2a8:	4680      	mov	r8, r0
 801c2aa:	e7e4      	b.n	801c276 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f2>
 801c2ac:	d10b      	bne.n	801c2c6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x342>
 801c2ae:	f9b5 c0b2 	ldrsh.w	ip, [r5, #178]	; 0xb2
 801c2b2:	f9ba 10b2 	ldrsh.w	r1, [sl, #178]	; 0xb2
 801c2b6:	458c      	cmp	ip, r1
 801c2b8:	bfb4      	ite	lt
 801c2ba:	469c      	movlt	ip, r3
 801c2bc:	46bc      	movge	ip, r7
 801c2be:	4572      	cmp	r2, lr
 801c2c0:	bfb8      	it	lt
 801c2c2:	4672      	movlt	r2, lr
 801c2c4:	e087      	b.n	801c3d6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
 801c2c6:	428a      	cmp	r2, r1
 801c2c8:	46bc      	mov	ip, r7
 801c2ca:	bfb8      	it	lt
 801c2cc:	460a      	movlt	r2, r1
 801c2ce:	e082      	b.n	801c3d6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
 801c2d0:	240261b4 	.word	0x240261b4
 801c2d4:	240261c0 	.word	0x240261c0
 801c2d8:	24000068 	.word	0x24000068
 801c2dc:	2402617c 	.word	0x2402617c
 801c2e0:	24026172 	.word	0x24026172
 801c2e4:	24026170 	.word	0x24026170
 801c2e8:	2402617a 	.word	0x2402617a
 801c2ec:	24026174 	.word	0x24026174
 801c2f0:	1961      	adds	r1, r4, r5
 801c2f2:	ab07      	add	r3, sp, #28
 801c2f4:	f851 0fac 	ldr.w	r0, [r1, #172]!
 801c2f8:	6849      	ldr	r1, [r1, #4]
 801c2fa:	c303      	stmia	r3!, {r0, r1}
 801c2fc:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801c300:	a807      	add	r0, sp, #28
 801c302:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801c306:	2b13      	cmp	r3, #19
 801c308:	440b      	add	r3, r1
 801c30a:	bfd8      	it	le
 801c30c:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 801c310:	1a9b      	subs	r3, r3, r2
 801c312:	f8ad 201c 	strh.w	r2, [sp, #28]
 801c316:	f8ad 3020 	strh.w	r3, [sp, #32]
 801c31a:	f7ff f83f 	bl	801b39c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c31e:	a807      	add	r0, sp, #28
 801c320:	f7fc fe15 	bl	8018f4e <_ZNK8touchgfx4Rect7isEmptyEv>
 801c324:	bb78      	cbnz	r0, 801c386 <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 801c326:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 801c32a:	4425      	add	r5, r4
 801c32c:	f8d8 0000 	ldr.w	r0, [r8]
 801c330:	f1bc 0f14 	cmp.w	ip, #20
 801c334:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801c338:	f8d0 e000 	ldr.w	lr, [r0]
 801c33c:	bfa8      	it	ge
 801c33e:	f04f 0c14 	movge.w	ip, #20
 801c342:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801c346:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801c34a:	fa1f fc8c 	uxth.w	ip, ip
 801c34e:	f8cd c000 	str.w	ip, [sp]
 801c352:	f8de a090 	ldr.w	sl, [lr, #144]	; 0x90
 801c356:	47d0      	blx	sl
 801c358:	4682      	mov	sl, r0
 801c35a:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801c35e:	a807      	add	r0, sp, #28
 801c360:	f7ff f802 	bl	801b368 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801c364:	6823      	ldr	r3, [r4, #0]
 801c366:	4620      	mov	r0, r4
 801c368:	a907      	add	r1, sp, #28
 801c36a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c36c:	4798      	blx	r3
 801c36e:	f8b5 00b0 	ldrh.w	r0, [r5, #176]	; 0xb0
 801c372:	eba0 000a 	sub.w	r0, r0, sl
 801c376:	b200      	sxth	r0, r0
 801c378:	f8a5 00b0 	strh.w	r0, [r5, #176]	; 0xb0
 801c37c:	b918      	cbnz	r0, 801c386 <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 801c37e:	b2b9      	uxth	r1, r7
 801c380:	4648      	mov	r0, r9
 801c382:	f7ff faad 	bl	801b8e0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801c386:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	; 0xec
 801c38a:	f1bb 0f00 	cmp.w	fp, #0
 801c38e:	f43f af26 	beq.w	801c1de <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801c392:	9b02      	ldr	r3, [sp, #8]
 801c394:	2700      	movs	r7, #0
 801c396:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	; 0xac
 801c39a:	881b      	ldrh	r3, [r3, #0]
 801c39c:	3301      	adds	r3, #1
 801c39e:	b29b      	uxth	r3, r3
 801c3a0:	b299      	uxth	r1, r3
 801c3a2:	00fd      	lsls	r5, r7, #3
 801c3a4:	458b      	cmp	fp, r1
 801c3a6:	d9a3      	bls.n	801c2f0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x36c>
 801c3a8:	4425      	add	r5, r4
 801c3aa:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 801c3ae:	469c      	mov	ip, r3
 801c3b0:	f8b5 10b0 	ldrh.w	r1, [r5, #176]	; 0xb0
 801c3b4:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 801c3b8:	f9ba e0ac 	ldrsh.w	lr, [sl, #172]	; 0xac
 801c3bc:	4408      	add	r0, r1
 801c3be:	f8ba 10b0 	ldrh.w	r1, [sl, #176]	; 0xb0
 801c3c2:	4471      	add	r1, lr
 801c3c4:	b200      	sxth	r0, r0
 801c3c6:	b209      	sxth	r1, r1
 801c3c8:	4288      	cmp	r0, r1
 801c3ca:	f6bf af6f 	bge.w	801c2ac <_ZN8touchgfx11Application15drawCachedAreasEv+0x328>
 801c3ce:	4586      	cmp	lr, r0
 801c3d0:	4672      	mov	r2, lr
 801c3d2:	bfb8      	it	lt
 801c3d4:	4602      	movlt	r2, r0
 801c3d6:	3301      	adds	r3, #1
 801c3d8:	4667      	mov	r7, ip
 801c3da:	e7e1      	b.n	801c3a0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x41c>
 801c3dc:	d10c      	bne.n	801c3f8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x474>
 801c3de:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	; 0xb0
 801c3e2:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	; 0xb0
 801c3e6:	4287      	cmp	r7, r0
 801c3e8:	bfb4      	ite	lt
 801c3ea:	4608      	movlt	r0, r1
 801c3ec:	4640      	movge	r0, r8
 801c3ee:	f8be 70b2 	ldrh.w	r7, [lr, #178]	; 0xb2
 801c3f2:	443b      	add	r3, r7
 801c3f4:	b21b      	sxth	r3, r3
 801c3f6:	e753      	b.n	801c2a0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x31c>
 801c3f8:	4565      	cmp	r5, ip
 801c3fa:	4640      	mov	r0, r8
 801c3fc:	bfa8      	it	ge
 801c3fe:	4665      	movge	r5, ip
 801c400:	e751      	b.n	801c2a6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x322>
 801c402:	eb09 0007 	add.w	r0, r9, r7
 801c406:	4427      	add	r7, r4
 801c408:	9203      	str	r2, [sp, #12]
 801c40a:	f9b7 a0b2 	ldrsh.w	sl, [r7, #178]	; 0xb2
 801c40e:	f1ba 0f13 	cmp.w	sl, #19
 801c412:	bfde      	ittt	le
 801c414:	f8b7 50ae 	ldrhle.w	r5, [r7, #174]	; 0xae
 801c418:	4455      	addle	r5, sl
 801c41a:	b22d      	sxthle	r5, r5
 801c41c:	f7fc fd97 	bl	8018f4e <_ZNK8touchgfx4Rect7isEmptyEv>
 801c420:	9a03      	ldr	r2, [sp, #12]
 801c422:	2800      	cmp	r0, #0
 801c424:	f47f af1c 	bne.w	801c260 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2dc>
 801c428:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	; 0xae
 801c42c:	fa1f fa8a 	uxth.w	sl, sl
 801c430:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801c434:	1aad      	subs	r5, r5, r2
 801c436:	4829      	ldr	r0, [pc, #164]	; (801c4dc <_ZN8touchgfx11Application15drawCachedAreasEv+0x558>)
 801c438:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	; 0xac
 801c43c:	2d14      	cmp	r5, #20
 801c43e:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	; 0xb0
 801c442:	6800      	ldr	r0, [r0, #0]
 801c444:	bfa8      	it	ge
 801c446:	2514      	movge	r5, #20
 801c448:	f8ad 101c 	strh.w	r1, [sp, #28]
 801c44c:	f8ad 201e 	strh.w	r2, [sp, #30]
 801c450:	b289      	uxth	r1, r1
 801c452:	f8ad 3020 	strh.w	r3, [sp, #32]
 801c456:	b2ad      	uxth	r5, r5
 801c458:	f8d0 c000 	ldr.w	ip, [r0]
 801c45c:	b292      	uxth	r2, r2
 801c45e:	4555      	cmp	r5, sl
 801c460:	bf94      	ite	ls
 801c462:	9500      	strls	r5, [sp, #0]
 801c464:	f8cd a000 	strhi.w	sl, [sp]
 801c468:	b29b      	uxth	r3, r3
 801c46a:	f8dc 5090 	ldr.w	r5, [ip, #144]	; 0x90
 801c46e:	47a8      	blx	r5
 801c470:	6823      	ldr	r3, [r4, #0]
 801c472:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801c476:	a907      	add	r1, sp, #28
 801c478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c47a:	4620      	mov	r0, r4
 801c47c:	4798      	blx	r3
 801c47e:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 801c482:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801c486:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
 801c48a:	1a5b      	subs	r3, r3, r1
 801c48c:	440a      	add	r2, r1
 801c48e:	b21b      	sxth	r3, r3
 801c490:	f8a7 20ae 	strh.w	r2, [r7, #174]	; 0xae
 801c494:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801c498:	2b00      	cmp	r3, #0
 801c49a:	f47f aed8 	bne.w	801c24e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 801c49e:	fa1f f188 	uxth.w	r1, r8
 801c4a2:	4648      	mov	r0, r9
 801c4a4:	f7ff fa1c 	bl	801b8e0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801c4a8:	e6d1      	b.n	801c24e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 801c4aa:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 801c4ae:	42ab      	cmp	r3, r5
 801c4b0:	f67f ae95 	bls.w	801c1de <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801c4b4:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 801c4b8:	ab07      	add	r3, sp, #28
 801c4ba:	f852 0fac 	ldr.w	r0, [r2, #172]!
 801c4be:	6851      	ldr	r1, [r2, #4]
 801c4c0:	c303      	stmia	r3!, {r0, r1}
 801c4c2:	a807      	add	r0, sp, #28
 801c4c4:	f7fc fd43 	bl	8018f4e <_ZNK8touchgfx4Rect7isEmptyEv>
 801c4c8:	b920      	cbnz	r0, 801c4d4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x550>
 801c4ca:	6823      	ldr	r3, [r4, #0]
 801c4cc:	a907      	add	r1, sp, #28
 801c4ce:	4620      	mov	r0, r4
 801c4d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c4d2:	4798      	blx	r3
 801c4d4:	3501      	adds	r5, #1
 801c4d6:	b2ad      	uxth	r5, r5
 801c4d8:	e7e7      	b.n	801c4aa <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
 801c4da:	bf00      	nop
 801c4dc:	2402617c 	.word	0x2402617c

0801c4e0 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 801c4e0:	4b03      	ldr	r3, [pc, #12]	; (801c4f0 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 801c4e2:	2200      	movs	r2, #0
 801c4e4:	801a      	strh	r2, [r3, #0]
 801c4e6:	805a      	strh	r2, [r3, #2]
 801c4e8:	809a      	strh	r2, [r3, #4]
 801c4ea:	80da      	strh	r2, [r3, #6]
 801c4ec:	4770      	bx	lr
 801c4ee:	bf00      	nop
 801c4f0:	240261c0 	.word	0x240261c0

0801c4f4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 801c4f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c4f8:	b09d      	sub	sp, #116	; 0x74
 801c4fa:	4606      	mov	r6, r0
 801c4fc:	4614      	mov	r4, r2
 801c4fe:	468a      	mov	sl, r1
 801c500:	a803      	add	r0, sp, #12
 801c502:	461d      	mov	r5, r3
 801c504:	f000 fd94 	bl	801d030 <_ZN8touchgfx12TextProviderC1Ev>
 801c508:	6833      	ldr	r3, [r6, #0]
 801c50a:	4630      	mov	r0, r6
 801c50c:	f242 0b0b 	movw	fp, #8203	; 0x200b
 801c510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801c512:	4798      	blx	r3
 801c514:	6833      	ldr	r3, [r6, #0]
 801c516:	4607      	mov	r7, r0
 801c518:	4630      	mov	r0, r6
 801c51a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801c51c:	4798      	blx	r3
 801c51e:	462a      	mov	r2, r5
 801c520:	2500      	movs	r5, #0
 801c522:	4621      	mov	r1, r4
 801c524:	9000      	str	r0, [sp, #0]
 801c526:	463b      	mov	r3, r7
 801c528:	462c      	mov	r4, r5
 801c52a:	46a9      	mov	r9, r5
 801c52c:	46a8      	mov	r8, r5
 801c52e:	a803      	add	r0, sp, #12
 801c530:	f000 fdd1 	bl	801d0d6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801c534:	2300      	movs	r3, #0
 801c536:	9302      	str	r3, [sp, #8]
 801c538:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801c53c:	429c      	cmp	r4, r3
 801c53e:	d002      	beq.n	801c546 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 801c540:	455c      	cmp	r4, fp
 801c542:	bf18      	it	ne
 801c544:	4625      	movne	r5, r4
 801c546:	ab02      	add	r3, sp, #8
 801c548:	4632      	mov	r2, r6
 801c54a:	4651      	mov	r1, sl
 801c54c:	a803      	add	r0, sp, #12
 801c54e:	f001 f8b7 	bl	801d6c0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801c552:	4604      	mov	r4, r0
 801c554:	b108      	cbz	r0, 801c55a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 801c556:	280a      	cmp	r0, #10
 801c558:	d10a      	bne.n	801c570 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 801c55a:	45c1      	cmp	r9, r8
 801c55c:	bf38      	it	cc
 801c55e:	46c1      	movcc	r9, r8
 801c560:	f04f 0800 	mov.w	r8, #0
 801c564:	2c00      	cmp	r4, #0
 801c566:	d1e5      	bne.n	801c534 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801c568:	4648      	mov	r0, r9
 801c56a:	b01d      	add	sp, #116	; 0x74
 801c56c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c570:	9a02      	ldr	r2, [sp, #8]
 801c572:	2a00      	cmp	r2, #0
 801c574:	d0de      	beq.n	801c534 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801c576:	7b57      	ldrb	r7, [r2, #13]
 801c578:	4629      	mov	r1, r5
 801c57a:	6833      	ldr	r3, [r6, #0]
 801c57c:	007f      	lsls	r7, r7, #1
 801c57e:	8894      	ldrh	r4, [r2, #4]
 801c580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c582:	f407 7080 	and.w	r0, r7, #256	; 0x100
 801c586:	7a97      	ldrb	r7, [r2, #10]
 801c588:	4307      	orrs	r7, r0
 801c58a:	4630      	mov	r0, r6
 801c58c:	4798      	blx	r3
 801c58e:	4438      	add	r0, r7
 801c590:	4480      	add	r8, r0
 801c592:	fa1f f888 	uxth.w	r8, r8
 801c596:	e7e5      	b.n	801c564 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

0801c598 <_ZNK8touchgfx4Font12getCharWidthEt>:
 801c598:	b508      	push	{r3, lr}
 801c59a:	6803      	ldr	r3, [r0, #0]
 801c59c:	68db      	ldr	r3, [r3, #12]
 801c59e:	4798      	blx	r3
 801c5a0:	b128      	cbz	r0, 801c5ae <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 801c5a2:	7b43      	ldrb	r3, [r0, #13]
 801c5a4:	7a80      	ldrb	r0, [r0, #10]
 801c5a6:	005b      	lsls	r3, r3, #1
 801c5a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c5ac:	4318      	orrs	r0, r3
 801c5ae:	bd08      	pop	{r3, pc}

0801c5b0 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 801c5b0:	b40e      	push	{r1, r2, r3}
 801c5b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c5b4:	b09e      	sub	sp, #120	; 0x78
 801c5b6:	4605      	mov	r5, r0
 801c5b8:	ab23      	add	r3, sp, #140	; 0x8c
 801c5ba:	a805      	add	r0, sp, #20
 801c5bc:	f853 4b04 	ldr.w	r4, [r3], #4
 801c5c0:	9303      	str	r3, [sp, #12]
 801c5c2:	f000 fd35 	bl	801d030 <_ZN8touchgfx12TextProviderC1Ev>
 801c5c6:	682b      	ldr	r3, [r5, #0]
 801c5c8:	4628      	mov	r0, r5
 801c5ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801c5cc:	4798      	blx	r3
 801c5ce:	682b      	ldr	r3, [r5, #0]
 801c5d0:	4606      	mov	r6, r0
 801c5d2:	4628      	mov	r0, r5
 801c5d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801c5d6:	4798      	blx	r3
 801c5d8:	4633      	mov	r3, r6
 801c5da:	4621      	mov	r1, r4
 801c5dc:	ae1e      	add	r6, sp, #120	; 0x78
 801c5de:	2400      	movs	r4, #0
 801c5e0:	9000      	str	r0, [sp, #0]
 801c5e2:	9a03      	ldr	r2, [sp, #12]
 801c5e4:	a805      	add	r0, sp, #20
 801c5e6:	f000 fd76 	bl	801d0d6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801c5ea:	f846 4d68 	str.w	r4, [r6, #-104]!
 801c5ee:	462a      	mov	r2, r5
 801c5f0:	4633      	mov	r3, r6
 801c5f2:	4621      	mov	r1, r4
 801c5f4:	a805      	add	r0, sp, #20
 801c5f6:	f001 f863 	bl	801d6c0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801c5fa:	b300      	cbz	r0, 801c63e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 801c5fc:	280a      	cmp	r0, #10
 801c5fe:	d01a      	beq.n	801c636 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801c600:	9f04      	ldr	r7, [sp, #16]
 801c602:	b1c7      	cbz	r7, 801c636 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801c604:	7b78      	ldrb	r0, [r7, #13]
 801c606:	7a3b      	ldrb	r3, [r7, #8]
 801c608:	00c1      	lsls	r1, r0, #3
 801c60a:	88ea      	ldrh	r2, [r5, #6]
 801c60c:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801c610:	4319      	orrs	r1, r3
 801c612:	0643      	lsls	r3, r0, #25
 801c614:	ea4f 1000 	mov.w	r0, r0, lsl #4
 801c618:	bf48      	it	mi
 801c61a:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 801c61e:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801c622:	bf48      	it	mi
 801c624:	b219      	sxthmi	r1, r3
 801c626:	79fb      	ldrb	r3, [r7, #7]
 801c628:	4303      	orrs	r3, r0
 801c62a:	4413      	add	r3, r2
 801c62c:	1a5b      	subs	r3, r3, r1
 801c62e:	b21b      	sxth	r3, r3
 801c630:	429c      	cmp	r4, r3
 801c632:	bfb8      	it	lt
 801c634:	461c      	movlt	r4, r3
 801c636:	4633      	mov	r3, r6
 801c638:	462a      	mov	r2, r5
 801c63a:	2100      	movs	r1, #0
 801c63c:	e7da      	b.n	801c5f4 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 801c63e:	b2a0      	uxth	r0, r4
 801c640:	b01e      	add	sp, #120	; 0x78
 801c642:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801c646:	b003      	add	sp, #12
 801c648:	4770      	bx	lr

0801c64a <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 801c64a:	7a43      	ldrb	r3, [r0, #9]
 801c64c:	8880      	ldrh	r0, [r0, #4]
 801c64e:	4418      	add	r0, r3
 801c650:	b280      	uxth	r0, r0
 801c652:	4770      	bx	lr

0801c654 <_ZNK8touchgfx4Font13getFontHeightEv>:
 801c654:	6803      	ldr	r3, [r0, #0]
 801c656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c658:	4718      	bx	r3

0801c65a <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801c65a:	b40e      	push	{r1, r2, r3}
 801c65c:	b570      	push	{r4, r5, r6, lr}
 801c65e:	b09d      	sub	sp, #116	; 0x74
 801c660:	4604      	mov	r4, r0
 801c662:	ab21      	add	r3, sp, #132	; 0x84
 801c664:	a803      	add	r0, sp, #12
 801c666:	f853 5b04 	ldr.w	r5, [r3], #4
 801c66a:	9302      	str	r3, [sp, #8]
 801c66c:	f000 fce0 	bl	801d030 <_ZN8touchgfx12TextProviderC1Ev>
 801c670:	6823      	ldr	r3, [r4, #0]
 801c672:	4620      	mov	r0, r4
 801c674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801c676:	4798      	blx	r3
 801c678:	6823      	ldr	r3, [r4, #0]
 801c67a:	4606      	mov	r6, r0
 801c67c:	4620      	mov	r0, r4
 801c67e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801c680:	2401      	movs	r4, #1
 801c682:	4798      	blx	r3
 801c684:	4633      	mov	r3, r6
 801c686:	9000      	str	r0, [sp, #0]
 801c688:	4629      	mov	r1, r5
 801c68a:	9a02      	ldr	r2, [sp, #8]
 801c68c:	a803      	add	r0, sp, #12
 801c68e:	f000 fd22 	bl	801d0d6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801c692:	a803      	add	r0, sp, #12
 801c694:	f001 f894 	bl	801d7c0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801c698:	b2a3      	uxth	r3, r4
 801c69a:	b138      	cbz	r0, 801c6ac <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 801c69c:	280a      	cmp	r0, #10
 801c69e:	a803      	add	r0, sp, #12
 801c6a0:	bf04      	itt	eq
 801c6a2:	3301      	addeq	r3, #1
 801c6a4:	b21c      	sxtheq	r4, r3
 801c6a6:	f001 f88b 	bl	801d7c0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801c6aa:	e7f5      	b.n	801c698 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 801c6ac:	4618      	mov	r0, r3
 801c6ae:	b01d      	add	sp, #116	; 0x74
 801c6b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c6b4:	b003      	add	sp, #12
 801c6b6:	4770      	bx	lr

0801c6b8 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801c6b8:	b40e      	push	{r1, r2, r3}
 801c6ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c6bc:	b09e      	sub	sp, #120	; 0x78
 801c6be:	4604      	mov	r4, r0
 801c6c0:	ab23      	add	r3, sp, #140	; 0x8c
 801c6c2:	a805      	add	r0, sp, #20
 801c6c4:	f853 5b04 	ldr.w	r5, [r3], #4
 801c6c8:	9303      	str	r3, [sp, #12]
 801c6ca:	f000 fcb1 	bl	801d030 <_ZN8touchgfx12TextProviderC1Ev>
 801c6ce:	6823      	ldr	r3, [r4, #0]
 801c6d0:	4620      	mov	r0, r4
 801c6d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801c6d4:	4798      	blx	r3
 801c6d6:	6823      	ldr	r3, [r4, #0]
 801c6d8:	4606      	mov	r6, r0
 801c6da:	4620      	mov	r0, r4
 801c6dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801c6de:	4798      	blx	r3
 801c6e0:	4633      	mov	r3, r6
 801c6e2:	4629      	mov	r1, r5
 801c6e4:	9000      	str	r0, [sp, #0]
 801c6e6:	9a03      	ldr	r2, [sp, #12]
 801c6e8:	a805      	add	r0, sp, #20
 801c6ea:	f000 fcf4 	bl	801d0d6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801c6ee:	ad1e      	add	r5, sp, #120	; 0x78
 801c6f0:	2100      	movs	r1, #0
 801c6f2:	f647 76ff 	movw	r6, #32767	; 0x7fff
 801c6f6:	4622      	mov	r2, r4
 801c6f8:	a805      	add	r0, sp, #20
 801c6fa:	f845 1d68 	str.w	r1, [r5, #-104]!
 801c6fe:	462b      	mov	r3, r5
 801c700:	f000 ffde 	bl	801d6c0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801c704:	b1d8      	cbz	r0, 801c73e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 801c706:	280a      	cmp	r0, #10
 801c708:	d012      	beq.n	801c730 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 801c70a:	9804      	ldr	r0, [sp, #16]
 801c70c:	b180      	cbz	r0, 801c730 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 801c70e:	7b47      	ldrb	r7, [r0, #13]
 801c710:	88e2      	ldrh	r2, [r4, #6]
 801c712:	00fb      	lsls	r3, r7, #3
 801c714:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801c718:	7a03      	ldrb	r3, [r0, #8]
 801c71a:	430b      	orrs	r3, r1
 801c71c:	0679      	lsls	r1, r7, #25
 801c71e:	bf44      	itt	mi
 801c720:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801c724:	b21b      	sxthmi	r3, r3
 801c726:	1ad3      	subs	r3, r2, r3
 801c728:	b21b      	sxth	r3, r3
 801c72a:	429e      	cmp	r6, r3
 801c72c:	bfa8      	it	ge
 801c72e:	461e      	movge	r6, r3
 801c730:	462b      	mov	r3, r5
 801c732:	4622      	mov	r2, r4
 801c734:	2100      	movs	r1, #0
 801c736:	a805      	add	r0, sp, #20
 801c738:	f000 ffc2 	bl	801d6c0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801c73c:	e7e2      	b.n	801c704 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 801c73e:	4630      	mov	r0, r6
 801c740:	b01e      	add	sp, #120	; 0x78
 801c742:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801c746:	b003      	add	sp, #12
 801c748:	4770      	bx	lr

0801c74a <_ZNK8touchgfx8Drawable10invalidateEv>:
 801c74a:	b513      	push	{r0, r1, r4, lr}
 801c74c:	6803      	ldr	r3, [r0, #0]
 801c74e:	2400      	movs	r4, #0
 801c750:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801c754:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801c758:	f8ad 1004 	strh.w	r1, [sp, #4]
 801c75c:	4669      	mov	r1, sp
 801c75e:	691b      	ldr	r3, [r3, #16]
 801c760:	9400      	str	r4, [sp, #0]
 801c762:	f8ad 2006 	strh.w	r2, [sp, #6]
 801c766:	4798      	blx	r3
 801c768:	b002      	add	sp, #8
 801c76a:	bd10      	pop	{r4, pc}

0801c76c <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801c76c:	b538      	push	{r3, r4, r5, lr}
 801c76e:	680b      	ldr	r3, [r1, #0]
 801c770:	460c      	mov	r4, r1
 801c772:	4605      	mov	r5, r0
 801c774:	68db      	ldr	r3, [r3, #12]
 801c776:	4798      	blx	r3
 801c778:	6823      	ldr	r3, [r4, #0]
 801c77a:	4620      	mov	r0, r4
 801c77c:	4629      	mov	r1, r5
 801c77e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c780:	4798      	blx	r3
 801c782:	4628      	mov	r0, r5
 801c784:	bd38      	pop	{r3, r4, r5, pc}

0801c786 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801c786:	b410      	push	{r4}
 801c788:	880a      	ldrh	r2, [r1, #0]
 801c78a:	8884      	ldrh	r4, [r0, #4]
 801c78c:	4422      	add	r2, r4
 801c78e:	800a      	strh	r2, [r1, #0]
 801c790:	884a      	ldrh	r2, [r1, #2]
 801c792:	88c4      	ldrh	r4, [r0, #6]
 801c794:	4422      	add	r2, r4
 801c796:	804a      	strh	r2, [r1, #2]
 801c798:	6940      	ldr	r0, [r0, #20]
 801c79a:	b120      	cbz	r0, 801c7a6 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801c79c:	6803      	ldr	r3, [r0, #0]
 801c79e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c7a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c7a4:	4718      	bx	r3
 801c7a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c7aa:	4770      	bx	lr

0801c7ac <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801c7ac:	b570      	push	{r4, r5, r6, lr}
 801c7ae:	8882      	ldrh	r2, [r0, #4]
 801c7b0:	460c      	mov	r4, r1
 801c7b2:	880b      	ldrh	r3, [r1, #0]
 801c7b4:	4605      	mov	r5, r0
 801c7b6:	4413      	add	r3, r2
 801c7b8:	800b      	strh	r3, [r1, #0]
 801c7ba:	884b      	ldrh	r3, [r1, #2]
 801c7bc:	88c2      	ldrh	r2, [r0, #6]
 801c7be:	4413      	add	r3, r2
 801c7c0:	804b      	strh	r3, [r1, #2]
 801c7c2:	1d01      	adds	r1, r0, #4
 801c7c4:	4620      	mov	r0, r4
 801c7c6:	f7fc fb7f 	bl	8018ec8 <_ZN8touchgfx4RectaNERKS0_>
 801c7ca:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801c7ce:	2b00      	cmp	r3, #0
 801c7d0:	dd0b      	ble.n	801c7ea <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801c7d2:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801c7d6:	2b00      	cmp	r3, #0
 801c7d8:	dd07      	ble.n	801c7ea <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801c7da:	6968      	ldr	r0, [r5, #20]
 801c7dc:	b128      	cbz	r0, 801c7ea <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801c7de:	6803      	ldr	r3, [r0, #0]
 801c7e0:	4621      	mov	r1, r4
 801c7e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c7e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c7e8:	4718      	bx	r3
 801c7ea:	bd70      	pop	{r4, r5, r6, pc}

0801c7ec <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801c7ec:	b570      	push	{r4, r5, r6, lr}
 801c7ee:	8882      	ldrh	r2, [r0, #4]
 801c7f0:	460c      	mov	r4, r1
 801c7f2:	880b      	ldrh	r3, [r1, #0]
 801c7f4:	4605      	mov	r5, r0
 801c7f6:	4413      	add	r3, r2
 801c7f8:	800b      	strh	r3, [r1, #0]
 801c7fa:	884b      	ldrh	r3, [r1, #2]
 801c7fc:	88c2      	ldrh	r2, [r0, #6]
 801c7fe:	4413      	add	r3, r2
 801c800:	804b      	strh	r3, [r1, #2]
 801c802:	1d01      	adds	r1, r0, #4
 801c804:	4620      	mov	r0, r4
 801c806:	f7fc fb5f 	bl	8018ec8 <_ZN8touchgfx4RectaNERKS0_>
 801c80a:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801c80e:	2b00      	cmp	r3, #0
 801c810:	dd18      	ble.n	801c844 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 801c812:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801c816:	2b00      	cmp	r3, #0
 801c818:	dd14      	ble.n	801c844 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 801c81a:	6968      	ldr	r0, [r5, #20]
 801c81c:	b128      	cbz	r0, 801c82a <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 801c81e:	6803      	ldr	r3, [r0, #0]
 801c820:	4621      	mov	r1, r4
 801c822:	691b      	ldr	r3, [r3, #16]
 801c824:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c828:	4718      	bx	r3
 801c82a:	4b07      	ldr	r3, [pc, #28]	; (801c848 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 801c82c:	681b      	ldr	r3, [r3, #0]
 801c82e:	3304      	adds	r3, #4
 801c830:	429d      	cmp	r5, r3
 801c832:	d107      	bne.n	801c844 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 801c834:	f7fe ff44 	bl	801b6c0 <_ZN8touchgfx11Application11getInstanceEv>
 801c838:	6821      	ldr	r1, [r4, #0]
 801c83a:	6862      	ldr	r2, [r4, #4]
 801c83c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c840:	f7ff b862 	b.w	801b908 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801c844:	bd70      	pop	{r4, r5, r6, pc}
 801c846:	bf00      	nop
 801c848:	240261b8 	.word	0x240261b8

0801c84c <_ZN8touchgfx8Drawable12moveRelativeEss>:
 801c84c:	b570      	push	{r4, r5, r6, lr}
 801c84e:	4604      	mov	r4, r0
 801c850:	4616      	mov	r6, r2
 801c852:	460d      	mov	r5, r1
 801c854:	b901      	cbnz	r1, 801c858 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801c856:	b192      	cbz	r2, 801c87e <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 801c858:	6823      	ldr	r3, [r4, #0]
 801c85a:	4620      	mov	r0, r4
 801c85c:	699b      	ldr	r3, [r3, #24]
 801c85e:	4798      	blx	r3
 801c860:	88e2      	ldrh	r2, [r4, #6]
 801c862:	88a1      	ldrh	r1, [r4, #4]
 801c864:	4620      	mov	r0, r4
 801c866:	4432      	add	r2, r6
 801c868:	4429      	add	r1, r5
 801c86a:	b212      	sxth	r2, r2
 801c86c:	b209      	sxth	r1, r1
 801c86e:	f7eb fadc 	bl	8007e2a <_ZN8touchgfx8Drawable5setXYEss>
 801c872:	6823      	ldr	r3, [r4, #0]
 801c874:	4620      	mov	r0, r4
 801c876:	699b      	ldr	r3, [r3, #24]
 801c878:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c87c:	4718      	bx	r3
 801c87e:	bd70      	pop	{r4, r5, r6, pc}

0801c880 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801c880:	b510      	push	{r4, lr}
 801c882:	2300      	movs	r3, #0
 801c884:	4604      	mov	r4, r0
 801c886:	4608      	mov	r0, r1
 801c888:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801c88c:	8023      	strh	r3, [r4, #0]
 801c88e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801c892:	8063      	strh	r3, [r4, #2]
 801c894:	6803      	ldr	r3, [r0, #0]
 801c896:	80a1      	strh	r1, [r4, #4]
 801c898:	4621      	mov	r1, r4
 801c89a:	80e2      	strh	r2, [r4, #6]
 801c89c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c89e:	4798      	blx	r3
 801c8a0:	4620      	mov	r0, r4
 801c8a2:	bd10      	pop	{r4, pc}

0801c8a4 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 801c8a4:	b530      	push	{r4, r5, lr}
 801c8a6:	8083      	strh	r3, [r0, #4]
 801c8a8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801c8ac:	f89d 5018 	ldrb.w	r5, [sp, #24]
 801c8b0:	80c3      	strh	r3, [r0, #6]
 801c8b2:	f89d 3010 	ldrb.w	r3, [sp, #16]
 801c8b6:	6141      	str	r1, [r0, #20]
 801c8b8:	7203      	strb	r3, [r0, #8]
 801c8ba:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801c8be:	8302      	strh	r2, [r0, #24]
 801c8c0:	7243      	strb	r3, [r0, #9]
 801c8c2:	7a83      	ldrb	r3, [r0, #10]
 801c8c4:	f365 0306 	bfi	r3, r5, #0, #7
 801c8c8:	f89d 501c 	ldrb.w	r5, [sp, #28]
 801c8cc:	f365 13c7 	bfi	r3, r5, #7, #1
 801c8d0:	7283      	strb	r3, [r0, #10]
 801c8d2:	f89d 3020 	ldrb.w	r3, [sp, #32]
 801c8d6:	72c3      	strb	r3, [r0, #11]
 801c8d8:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 801c8dc:	7303      	strb	r3, [r0, #12]
 801c8de:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 801c8e2:	81c3      	strh	r3, [r0, #14]
 801c8e4:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 801c8e8:	8203      	strh	r3, [r0, #16]
 801c8ea:	4b01      	ldr	r3, [pc, #4]	; (801c8f0 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 801c8ec:	6003      	str	r3, [r0, #0]
 801c8ee:	bd30      	pop	{r4, r5, pc}
 801c8f0:	0802af08 	.word	0x0802af08

0801c8f4 <_ZNK8touchgfx9ConstFont4findEt>:
 801c8f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c8f6:	6944      	ldr	r4, [r0, #20]
 801c8f8:	b3bc      	cbz	r4, 801c96a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801c8fa:	88a3      	ldrh	r3, [r4, #4]
 801c8fc:	8b02      	ldrh	r2, [r0, #24]
 801c8fe:	1acb      	subs	r3, r1, r3
 801c900:	f102 32ff 	add.w	r2, r2, #4294967295
 801c904:	d431      	bmi.n	801c96a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801c906:	4293      	cmp	r3, r2
 801c908:	dd0c      	ble.n	801c924 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801c90a:	230e      	movs	r3, #14
 801c90c:	fb03 4302 	mla	r3, r3, r2, r4
 801c910:	889b      	ldrh	r3, [r3, #4]
 801c912:	1a5b      	subs	r3, r3, r1
 801c914:	1ad3      	subs	r3, r2, r3
 801c916:	429a      	cmp	r2, r3
 801c918:	db27      	blt.n	801c96a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801c91a:	2b00      	cmp	r3, #0
 801c91c:	bfbc      	itt	lt
 801c91e:	2302      	movlt	r3, #2
 801c920:	fb92 f3f3 	sdivlt	r3, r2, r3
 801c924:	2500      	movs	r5, #0
 801c926:	260e      	movs	r6, #14
 801c928:	4295      	cmp	r5, r2
 801c92a:	dc1e      	bgt.n	801c96a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801c92c:	fb06 4003 	mla	r0, r6, r3, r4
 801c930:	8887      	ldrh	r7, [r0, #4]
 801c932:	42b9      	cmp	r1, r7
 801c934:	d01a      	beq.n	801c96c <_ZNK8touchgfx9ConstFont4findEt+0x78>
 801c936:	d20d      	bcs.n	801c954 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 801c938:	1e5a      	subs	r2, r3, #1
 801c93a:	4295      	cmp	r5, r2
 801c93c:	dc15      	bgt.n	801c96a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801c93e:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 801c942:	1a5b      	subs	r3, r3, r1
 801c944:	1ad3      	subs	r3, r2, r3
 801c946:	429a      	cmp	r2, r3
 801c948:	db0f      	blt.n	801c96a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801c94a:	429d      	cmp	r5, r3
 801c94c:	ddec      	ble.n	801c928 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801c94e:	1953      	adds	r3, r2, r5
 801c950:	105b      	asrs	r3, r3, #1
 801c952:	e7e9      	b.n	801c928 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801c954:	1c5d      	adds	r5, r3, #1
 801c956:	42aa      	cmp	r2, r5
 801c958:	db07      	blt.n	801c96a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801c95a:	8a43      	ldrh	r3, [r0, #18]
 801c95c:	1acb      	subs	r3, r1, r3
 801c95e:	442b      	add	r3, r5
 801c960:	429d      	cmp	r5, r3
 801c962:	dc02      	bgt.n	801c96a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801c964:	429a      	cmp	r2, r3
 801c966:	dadf      	bge.n	801c928 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801c968:	e7f1      	b.n	801c94e <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 801c96a:	2000      	movs	r0, #0
 801c96c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c96e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801c96e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c970:	4604      	mov	r4, r0
 801c972:	4617      	mov	r7, r2
 801c974:	461e      	mov	r6, r3
 801c976:	b911      	cbnz	r1, 801c97e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801c978:	2500      	movs	r5, #0
 801c97a:	4628      	mov	r0, r5
 801c97c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c97e:	290a      	cmp	r1, #10
 801c980:	d0fa      	beq.n	801c978 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801c982:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801c986:	4291      	cmp	r1, r2
 801c988:	d0f6      	beq.n	801c978 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801c98a:	f242 020b 	movw	r2, #8203	; 0x200b
 801c98e:	4291      	cmp	r1, r2
 801c990:	d0f2      	beq.n	801c978 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801c992:	f7ff ffaf 	bl	801c8f4 <_ZNK8touchgfx9ConstFont4findEt>
 801c996:	4605      	mov	r5, r0
 801c998:	b950      	cbnz	r0, 801c9b0 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 801c99a:	6823      	ldr	r3, [r4, #0]
 801c99c:	4620      	mov	r0, r4
 801c99e:	691b      	ldr	r3, [r3, #16]
 801c9a0:	4798      	blx	r3
 801c9a2:	4601      	mov	r1, r0
 801c9a4:	4620      	mov	r0, r4
 801c9a6:	f7ff ffa5 	bl	801c8f4 <_ZNK8touchgfx9ConstFont4findEt>
 801c9aa:	4605      	mov	r5, r0
 801c9ac:	2800      	cmp	r0, #0
 801c9ae:	d0e3      	beq.n	801c978 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801c9b0:	6823      	ldr	r3, [r4, #0]
 801c9b2:	4629      	mov	r1, r5
 801c9b4:	4620      	mov	r0, r4
 801c9b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c9b8:	4798      	blx	r3
 801c9ba:	6038      	str	r0, [r7, #0]
 801c9bc:	6823      	ldr	r3, [r4, #0]
 801c9be:	4620      	mov	r0, r4
 801c9c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801c9c2:	4798      	blx	r3
 801c9c4:	7030      	strb	r0, [r6, #0]
 801c9c6:	e7d8      	b.n	801c97a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0801c9c8 <_ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE>:
 801c9c8:	b538      	push	{r3, r4, r5, lr}
 801c9ca:	4605      	mov	r5, r0
 801c9cc:	f001 fcfe 	bl	801e3cc <_ZNK8touchgfx6Bitmap9getFormatEv>
 801c9d0:	4604      	mov	r4, r0
 801c9d2:	4628      	mov	r0, r5
 801c9d4:	f001 fc3e 	bl	801e254 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801c9d8:	2800      	cmp	r0, #0
 801c9da:	bf14      	ite	ne
 801c9dc:	2002      	movne	r0, #2
 801c9de:	2000      	moveq	r0, #0
 801c9e0:	ea40 0084 	orr.w	r0, r0, r4, lsl #2
 801c9e4:	b280      	uxth	r0, r0
 801c9e6:	bd38      	pop	{r3, r4, r5, pc}

0801c9e8 <_ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE>:
 801c9e8:	b538      	push	{r3, r4, r5, lr}
 801c9ea:	4605      	mov	r5, r0
 801c9ec:	f001 fcee 	bl	801e3cc <_ZNK8touchgfx6Bitmap9getFormatEv>
 801c9f0:	4604      	mov	r4, r0
 801c9f2:	4628      	mov	r0, r5
 801c9f4:	f001 fc2e 	bl	801e254 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801c9f8:	2800      	cmp	r0, #0
 801c9fa:	bf14      	ite	ne
 801c9fc:	2002      	movne	r0, #2
 801c9fe:	2000      	moveq	r0, #0
 801ca00:	ea40 0084 	orr.w	r0, r0, r4, lsl #2
 801ca04:	f040 0001 	orr.w	r0, r0, #1
 801ca08:	b280      	uxth	r0, r0
 801ca0a:	bd38      	pop	{r3, r4, r5, pc}

0801ca0c <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 801ca0c:	2000      	movs	r0, #0
 801ca0e:	4770      	bx	lr

0801ca10 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 801ca10:	2001      	movs	r0, #1
 801ca12:	4770      	bx	lr

0801ca14 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 801ca14:	2002      	movs	r0, #2
 801ca16:	4770      	bx	lr

0801ca18 <_ZN8touchgfx12GestureEventD1Ev>:
 801ca18:	4770      	bx	lr

0801ca1a <_ZN8touchgfx9DragEventD1Ev>:
 801ca1a:	4770      	bx	lr

0801ca1c <_ZN8touchgfx10ClickEventD1Ev>:
 801ca1c:	4770      	bx	lr

0801ca1e <_ZN8touchgfx10ClickEventD0Ev>:
 801ca1e:	b510      	push	{r4, lr}
 801ca20:	4604      	mov	r4, r0
 801ca22:	210c      	movs	r1, #12
 801ca24:	f009 fc6b 	bl	80262fe <_ZdlPvj>
 801ca28:	4620      	mov	r0, r4
 801ca2a:	bd10      	pop	{r4, pc}

0801ca2c <_ZN8touchgfx9DragEventD0Ev>:
 801ca2c:	b510      	push	{r4, lr}
 801ca2e:	4604      	mov	r4, r0
 801ca30:	2110      	movs	r1, #16
 801ca32:	f009 fc64 	bl	80262fe <_ZdlPvj>
 801ca36:	4620      	mov	r0, r4
 801ca38:	bd10      	pop	{r4, pc}

0801ca3a <_ZN8touchgfx12GestureEventD0Ev>:
 801ca3a:	b510      	push	{r4, lr}
 801ca3c:	4604      	mov	r4, r0
 801ca3e:	210c      	movs	r1, #12
 801ca40:	f009 fc5d 	bl	80262fe <_ZdlPvj>
 801ca44:	4620      	mov	r0, r4
 801ca46:	bd10      	pop	{r4, pc}

0801ca48 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 801ca48:	b530      	push	{r4, r5, lr}
 801ca4a:	460d      	mov	r5, r1
 801ca4c:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801ca4e:	b087      	sub	sp, #28
 801ca50:	4604      	mov	r4, r0
 801ca52:	b301      	cbz	r1, 801ca96 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801ca54:	a801      	add	r0, sp, #4
 801ca56:	f7ff ff13 	bl	801c880 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801ca5a:	892a      	ldrh	r2, [r5, #8]
 801ca5c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801ca60:	7928      	ldrb	r0, [r5, #4]
 801ca62:	1ad2      	subs	r2, r2, r3
 801ca64:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801ca66:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801ca6a:	441a      	add	r2, r3
 801ca6c:	896b      	ldrh	r3, [r5, #10]
 801ca6e:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801ca72:	f88d 0010 	strb.w	r0, [sp, #16]
 801ca76:	1b5b      	subs	r3, r3, r5
 801ca78:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 801ca7a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801ca7c:	442b      	add	r3, r5
 801ca7e:	4d07      	ldr	r5, [pc, #28]	; (801ca9c <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801ca80:	f8ad 1012 	strh.w	r1, [sp, #18]
 801ca84:	a903      	add	r1, sp, #12
 801ca86:	9503      	str	r5, [sp, #12]
 801ca88:	f8ad 2014 	strh.w	r2, [sp, #20]
 801ca8c:	f8ad 3016 	strh.w	r3, [sp, #22]
 801ca90:	6803      	ldr	r3, [r0, #0]
 801ca92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801ca94:	4798      	blx	r3
 801ca96:	b007      	add	sp, #28
 801ca98:	bd30      	pop	{r4, r5, pc}
 801ca9a:	bf00      	nop
 801ca9c:	0802af90 	.word	0x0802af90

0801caa0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801caa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801caa4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801caa6:	b08a      	sub	sp, #40	; 0x28
 801caa8:	4604      	mov	r4, r0
 801caaa:	460d      	mov	r5, r1
 801caac:	b113      	cbz	r3, 801cab4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 801caae:	790b      	ldrb	r3, [r1, #4]
 801cab0:	2b00      	cmp	r3, #0
 801cab2:	d044      	beq.n	801cb3e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801cab4:	f104 0804 	add.w	r8, r4, #4
 801cab8:	a803      	add	r0, sp, #12
 801caba:	4641      	mov	r1, r8
 801cabc:	f7ff fee0 	bl	801c880 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801cac0:	792b      	ldrb	r3, [r5, #4]
 801cac2:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801cac6:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 801caca:	b983      	cbnz	r3, 801caee <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 801cacc:	f104 0336 	add.w	r3, r4, #54	; 0x36
 801cad0:	892a      	ldrh	r2, [r5, #8]
 801cad2:	88e9      	ldrh	r1, [r5, #6]
 801cad4:	4640      	mov	r0, r8
 801cad6:	1b92      	subs	r2, r2, r6
 801cad8:	9301      	str	r3, [sp, #4]
 801cada:	1bc9      	subs	r1, r1, r7
 801cadc:	f104 0334 	add.w	r3, r4, #52	; 0x34
 801cae0:	b212      	sxth	r2, r2
 801cae2:	9300      	str	r3, [sp, #0]
 801cae4:	b209      	sxth	r1, r1
 801cae6:	f104 0330 	add.w	r3, r4, #48	; 0x30
 801caea:	f7fc f90b 	bl	8018d04 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 801caee:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801caf0:	b329      	cbz	r1, 801cb3e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801caf2:	a805      	add	r0, sp, #20
 801caf4:	f7ff fec4 	bl	801c880 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801caf8:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801cafc:	792b      	ldrb	r3, [r5, #4]
 801cafe:	a907      	add	r1, sp, #28
 801cb00:	1abf      	subs	r7, r7, r2
 801cb02:	88ea      	ldrh	r2, [r5, #6]
 801cb04:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801cb06:	4417      	add	r7, r2
 801cb08:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 801cb0a:	f88d 3020 	strb.w	r3, [sp, #32]
 801cb0e:	4417      	add	r7, r2
 801cb10:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801cb14:	1ab6      	subs	r6, r6, r2
 801cb16:	892a      	ldrh	r2, [r5, #8]
 801cb18:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 801cb1c:	4416      	add	r6, r2
 801cb1e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801cb20:	4416      	add	r6, r2
 801cb22:	4a08      	ldr	r2, [pc, #32]	; (801cb44 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 801cb24:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 801cb28:	2600      	movs	r6, #0
 801cb2a:	9207      	str	r2, [sp, #28]
 801cb2c:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 801cb30:	6803      	ldr	r3, [r0, #0]
 801cb32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801cb34:	4798      	blx	r3
 801cb36:	792b      	ldrb	r3, [r5, #4]
 801cb38:	b10b      	cbz	r3, 801cb3e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801cb3a:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 801cb3e:	b00a      	add	sp, #40	; 0x28
 801cb40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cb44:	0802af68 	.word	0x0802af68

0801cb48 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801cb48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cb4c:	460c      	mov	r4, r1
 801cb4e:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801cb50:	b088      	sub	sp, #32
 801cb52:	4605      	mov	r5, r0
 801cb54:	2900      	cmp	r1, #0
 801cb56:	d06d      	beq.n	801cc34 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 801cb58:	4668      	mov	r0, sp
 801cb5a:	f7ff fe91 	bl	801c880 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801cb5e:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 801cb60:	88e3      	ldrh	r3, [r4, #6]
 801cb62:	f9bd 8000 	ldrsh.w	r8, [sp]
 801cb66:	440b      	add	r3, r1
 801cb68:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 801cb6c:	b21b      	sxth	r3, r3
 801cb6e:	4543      	cmp	r3, r8
 801cb70:	db31      	blt.n	801cbd6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801cb72:	f8bd c004 	ldrh.w	ip, [sp, #4]
 801cb76:	44c4      	add	ip, r8
 801cb78:	fa0f fc8c 	sxth.w	ip, ip
 801cb7c:	4563      	cmp	r3, ip
 801cb7e:	da2a      	bge.n	801cbd6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801cb80:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 801cb82:	8926      	ldrh	r6, [r4, #8]
 801cb84:	4416      	add	r6, r2
 801cb86:	b236      	sxth	r6, r6
 801cb88:	42be      	cmp	r6, r7
 801cb8a:	db24      	blt.n	801cbd6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801cb8c:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801cb90:	4438      	add	r0, r7
 801cb92:	b200      	sxth	r0, r0
 801cb94:	4286      	cmp	r6, r0
 801cb96:	da1e      	bge.n	801cbd6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801cb98:	8963      	ldrh	r3, [r4, #10]
 801cb9a:	4419      	add	r1, r3
 801cb9c:	b209      	sxth	r1, r1
 801cb9e:	4541      	cmp	r1, r8
 801cba0:	db08      	blt.n	801cbb4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801cba2:	4561      	cmp	r1, ip
 801cba4:	da06      	bge.n	801cbb4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801cba6:	89a3      	ldrh	r3, [r4, #12]
 801cba8:	441a      	add	r2, r3
 801cbaa:	b212      	sxth	r2, r2
 801cbac:	42ba      	cmp	r2, r7
 801cbae:	db01      	blt.n	801cbb4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801cbb0:	4282      	cmp	r2, r0
 801cbb2:	db10      	blt.n	801cbd6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801cbb4:	4b21      	ldr	r3, [pc, #132]	; (801cc3c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 801cbb6:	a904      	add	r1, sp, #16
 801cbb8:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801cbba:	9304      	str	r3, [sp, #16]
 801cbbc:	2302      	movs	r3, #2
 801cbbe:	f88d 3014 	strb.w	r3, [sp, #20]
 801cbc2:	2300      	movs	r3, #0
 801cbc4:	f8ad 3016 	strh.w	r3, [sp, #22]
 801cbc8:	f8ad 3018 	strh.w	r3, [sp, #24]
 801cbcc:	f8ad 301a 	strh.w	r3, [sp, #26]
 801cbd0:	6803      	ldr	r3, [r0, #0]
 801cbd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801cbd4:	4798      	blx	r3
 801cbd6:	1d29      	adds	r1, r5, #4
 801cbd8:	a802      	add	r0, sp, #8
 801cbda:	f7ff fe51 	bl	801c880 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801cbde:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801cbe2:	88e0      	ldrh	r0, [r4, #6]
 801cbe4:	eba3 0808 	sub.w	r8, r3, r8
 801cbe8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801cbec:	7921      	ldrb	r1, [r4, #4]
 801cbee:	fa1f f888 	uxth.w	r8, r8
 801cbf2:	1bdf      	subs	r7, r3, r7
 801cbf4:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 801cbf8:	b2bb      	uxth	r3, r7
 801cbfa:	4440      	add	r0, r8
 801cbfc:	8922      	ldrh	r2, [r4, #8]
 801cbfe:	8967      	ldrh	r7, [r4, #10]
 801cc00:	4460      	add	r0, ip
 801cc02:	89a4      	ldrh	r4, [r4, #12]
 801cc04:	441a      	add	r2, r3
 801cc06:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 801cc08:	44b8      	add	r8, r7
 801cc0a:	4423      	add	r3, r4
 801cc0c:	f8ad 0016 	strh.w	r0, [sp, #22]
 801cc10:	4432      	add	r2, r6
 801cc12:	44e0      	add	r8, ip
 801cc14:	4433      	add	r3, r6
 801cc16:	4c0a      	ldr	r4, [pc, #40]	; (801cc40 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 801cc18:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801cc1a:	f88d 1014 	strb.w	r1, [sp, #20]
 801cc1e:	a904      	add	r1, sp, #16
 801cc20:	9404      	str	r4, [sp, #16]
 801cc22:	f8ad 2018 	strh.w	r2, [sp, #24]
 801cc26:	f8ad 801a 	strh.w	r8, [sp, #26]
 801cc2a:	f8ad 301c 	strh.w	r3, [sp, #28]
 801cc2e:	6803      	ldr	r3, [r0, #0]
 801cc30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801cc32:	4798      	blx	r3
 801cc34:	b008      	add	sp, #32
 801cc36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cc3a:	bf00      	nop
 801cc3c:	0802af68 	.word	0x0802af68
 801cc40:	0802af7c 	.word	0x0802af7c

0801cc44 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801cc44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801cc46:	4604      	mov	r4, r0
 801cc48:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801cc4c:	3201      	adds	r2, #1
 801cc4e:	d112      	bne.n	801cc76 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 801cc50:	2500      	movs	r5, #0
 801cc52:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801cc56:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801cc5a:	6803      	ldr	r3, [r0, #0]
 801cc5c:	9500      	str	r5, [sp, #0]
 801cc5e:	466d      	mov	r5, sp
 801cc60:	f8ad 1004 	strh.w	r1, [sp, #4]
 801cc64:	f8ad 2006 	strh.w	r2, [sp, #6]
 801cc68:	4629      	mov	r1, r5
 801cc6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cc6c:	4798      	blx	r3
 801cc6e:	e895 0003 	ldmia.w	r5, {r0, r1}
 801cc72:	e884 0003 	stmia.w	r4, {r0, r1}
 801cc76:	4620      	mov	r0, r4
 801cc78:	b003      	add	sp, #12
 801cc7a:	bd30      	pop	{r4, r5, pc}

0801cc7c <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801cc7c:	b513      	push	{r0, r1, r4, lr}
 801cc7e:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801cc82:	4604      	mov	r4, r0
 801cc84:	3301      	adds	r3, #1
 801cc86:	d109      	bne.n	801cc9c <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801cc88:	4601      	mov	r1, r0
 801cc8a:	4668      	mov	r0, sp
 801cc8c:	f7ff fdf8 	bl	801c880 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801cc90:	f8bd 3000 	ldrh.w	r3, [sp]
 801cc94:	8423      	strh	r3, [r4, #32]
 801cc96:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801cc9a:	8463      	strh	r3, [r4, #34]	; 0x22
 801cc9c:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801cca0:	b002      	add	sp, #8
 801cca2:	bd10      	pop	{r4, pc}

0801cca4 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801cca4:	b513      	push	{r0, r1, r4, lr}
 801cca6:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 801ccaa:	4604      	mov	r4, r0
 801ccac:	3301      	adds	r3, #1
 801ccae:	d109      	bne.n	801ccc4 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801ccb0:	4601      	mov	r1, r0
 801ccb2:	4668      	mov	r0, sp
 801ccb4:	f7ff fde4 	bl	801c880 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801ccb8:	f8bd 3000 	ldrh.w	r3, [sp]
 801ccbc:	8423      	strh	r3, [r4, #32]
 801ccbe:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801ccc2:	8463      	strh	r3, [r4, #34]	; 0x22
 801ccc4:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 801ccc8:	b002      	add	sp, #8
 801ccca:	bd10      	pop	{r4, pc}

0801cccc <_ZN8touchgfx6ScreenC1Ev>:
 801cccc:	b570      	push	{r4, r5, r6, lr}
 801ccce:	4b17      	ldr	r3, [pc, #92]	; (801cd2c <_ZN8touchgfx6ScreenC1Ev+0x60>)
 801ccd0:	4605      	mov	r5, r0
 801ccd2:	4a17      	ldr	r2, [pc, #92]	; (801cd30 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 801ccd4:	2101      	movs	r1, #1
 801ccd6:	f845 3b04 	str.w	r3, [r5], #4
 801ccda:	2300      	movs	r3, #0
 801ccdc:	6042      	str	r2, [r0, #4]
 801ccde:	4604      	mov	r4, r0
 801cce0:	8103      	strh	r3, [r0, #8]
 801cce2:	8143      	strh	r3, [r0, #10]
 801cce4:	8183      	strh	r3, [r0, #12]
 801cce6:	81c3      	strh	r3, [r0, #14]
 801cce8:	8203      	strh	r3, [r0, #16]
 801ccea:	8243      	strh	r3, [r0, #18]
 801ccec:	8283      	strh	r3, [r0, #20]
 801ccee:	82c3      	strh	r3, [r0, #22]
 801ccf0:	6203      	str	r3, [r0, #32]
 801ccf2:	8483      	strh	r3, [r0, #36]	; 0x24
 801ccf4:	84c3      	strh	r3, [r0, #38]	; 0x26
 801ccf6:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 801ccfa:	6343      	str	r3, [r0, #52]	; 0x34
 801ccfc:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 801cd00:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 801cd04:	e9c0 3306 	strd	r3, r3, [r0, #24]
 801cd08:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 801cd0c:	4b09      	ldr	r3, [pc, #36]	; (801cd34 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801cd0e:	4628      	mov	r0, r5
 801cd10:	f9b3 6000 	ldrsh.w	r6, [r3]
 801cd14:	6b93      	ldr	r3, [r2, #56]	; 0x38
 801cd16:	4a08      	ldr	r2, [pc, #32]	; (801cd38 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801cd18:	f9b2 1000 	ldrsh.w	r1, [r2]
 801cd1c:	4798      	blx	r3
 801cd1e:	6863      	ldr	r3, [r4, #4]
 801cd20:	4628      	mov	r0, r5
 801cd22:	4631      	mov	r1, r6
 801cd24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801cd26:	4798      	blx	r3
 801cd28:	4620      	mov	r0, r4
 801cd2a:	bd70      	pop	{r4, r5, r6, pc}
 801cd2c:	0802afa4 	.word	0x0802afa4
 801cd30:	0802a974 	.word	0x0802a974
 801cd34:	24026172 	.word	0x24026172
 801cd38:	24026170 	.word	0x24026170

0801cd3c <_ZN8touchgfx6Screen4drawEv>:
 801cd3c:	4b09      	ldr	r3, [pc, #36]	; (801cd64 <_ZN8touchgfx6Screen4drawEv+0x28>)
 801cd3e:	b507      	push	{r0, r1, r2, lr}
 801cd40:	f9b3 2000 	ldrsh.w	r2, [r3]
 801cd44:	2100      	movs	r1, #0
 801cd46:	4b08      	ldr	r3, [pc, #32]	; (801cd68 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801cd48:	9100      	str	r1, [sp, #0]
 801cd4a:	4669      	mov	r1, sp
 801cd4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801cd50:	f8ad 2004 	strh.w	r2, [sp, #4]
 801cd54:	f8ad 3006 	strh.w	r3, [sp, #6]
 801cd58:	6803      	ldr	r3, [r0, #0]
 801cd5a:	689b      	ldr	r3, [r3, #8]
 801cd5c:	4798      	blx	r3
 801cd5e:	b003      	add	sp, #12
 801cd60:	f85d fb04 	ldr.w	pc, [sp], #4
 801cd64:	24026170 	.word	0x24026170
 801cd68:	24026172 	.word	0x24026172

0801cd6c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801cd6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cd70:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801cd74:	b089      	sub	sp, #36	; 0x24
 801cd76:	4680      	mov	r8, r0
 801cd78:	460c      	mov	r4, r1
 801cd7a:	2b00      	cmp	r3, #0
 801cd7c:	4615      	mov	r5, r2
 801cd7e:	dd0e      	ble.n	801cd9e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801cd80:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801cd84:	2b00      	cmp	r3, #0
 801cd86:	dd0a      	ble.n	801cd9e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801cd88:	4628      	mov	r0, r5
 801cd8a:	f7ff ff5b 	bl	801cc44 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801cd8e:	4621      	mov	r1, r4
 801cd90:	f7fe fbb8 	bl	801b504 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801cd94:	69eb      	ldr	r3, [r5, #28]
 801cd96:	b928      	cbnz	r0, 801cda4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 801cd98:	461d      	mov	r5, r3
 801cd9a:	2b00      	cmp	r3, #0
 801cd9c:	d1f4      	bne.n	801cd88 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 801cd9e:	b009      	add	sp, #36	; 0x24
 801cda0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cda4:	ae04      	add	r6, sp, #16
 801cda6:	2b00      	cmp	r3, #0
 801cda8:	f000 80b5 	beq.w	801cf16 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801cdac:	682b      	ldr	r3, [r5, #0]
 801cdae:	4629      	mov	r1, r5
 801cdb0:	a802      	add	r0, sp, #8
 801cdb2:	68db      	ldr	r3, [r3, #12]
 801cdb4:	4798      	blx	r3
 801cdb6:	4628      	mov	r0, r5
 801cdb8:	f7ff ff60 	bl	801cc7c <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801cdbc:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801cdc0:	4407      	add	r7, r0
 801cdc2:	4628      	mov	r0, r5
 801cdc4:	f7ff ff6e 	bl	801cca4 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801cdc8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801cdcc:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801cdd0:	b23f      	sxth	r7, r7
 801cdd2:	4418      	add	r0, r3
 801cdd4:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801cdd8:	4621      	mov	r1, r4
 801cdda:	f8ad 2014 	strh.w	r2, [sp, #20]
 801cdde:	f8ad 0012 	strh.w	r0, [sp, #18]
 801cde2:	4630      	mov	r0, r6
 801cde4:	f8ad 3016 	strh.w	r3, [sp, #22]
 801cde8:	f8ad 7010 	strh.w	r7, [sp, #16]
 801cdec:	f7fc f86c 	bl	8018ec8 <_ZN8touchgfx4RectaNERKS0_>
 801cdf0:	4628      	mov	r0, r5
 801cdf2:	f7ff ff27 	bl	801cc44 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801cdf6:	ab06      	add	r3, sp, #24
 801cdf8:	4602      	mov	r2, r0
 801cdfa:	e896 0003 	ldmia.w	r6, {r0, r1}
 801cdfe:	e883 0003 	stmia.w	r3, {r0, r1}
 801ce02:	4611      	mov	r1, r2
 801ce04:	4618      	mov	r0, r3
 801ce06:	f7fc f85f 	bl	8018ec8 <_ZN8touchgfx4RectaNERKS0_>
 801ce0a:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801ce0e:	f9b4 1000 	ldrsh.w	r1, [r4]
 801ce12:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801ce16:	4299      	cmp	r1, r3
 801ce18:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 801ce1c:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801ce20:	d10b      	bne.n	801ce3a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801ce22:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801ce26:	4552      	cmp	r2, sl
 801ce28:	d107      	bne.n	801ce3a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801ce2a:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801ce2e:	455a      	cmp	r2, fp
 801ce30:	d103      	bne.n	801ce3a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801ce32:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801ce36:	454a      	cmp	r2, r9
 801ce38:	d06d      	beq.n	801cf16 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801ce3a:	f1bb 0f00 	cmp.w	fp, #0
 801ce3e:	dd65      	ble.n	801cf0c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801ce40:	f1b9 0f00 	cmp.w	r9, #0
 801ce44:	dd62      	ble.n	801cf0c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801ce46:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801ce4a:	fa1f f08a 	uxth.w	r0, sl
 801ce4e:	4552      	cmp	r2, sl
 801ce50:	9000      	str	r0, [sp, #0]
 801ce52:	da12      	bge.n	801ce7a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 801ce54:	9301      	str	r3, [sp, #4]
 801ce56:	9b00      	ldr	r3, [sp, #0]
 801ce58:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801ce5c:	f8ad 2012 	strh.w	r2, [sp, #18]
 801ce60:	1a9a      	subs	r2, r3, r2
 801ce62:	f8ad 1010 	strh.w	r1, [sp, #16]
 801ce66:	4631      	mov	r1, r6
 801ce68:	f8ad 0014 	strh.w	r0, [sp, #20]
 801ce6c:	4640      	mov	r0, r8
 801ce6e:	f8ad 2016 	strh.w	r2, [sp, #22]
 801ce72:	69ea      	ldr	r2, [r5, #28]
 801ce74:	f7ff ff7a 	bl	801cd6c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801ce78:	9b01      	ldr	r3, [sp, #4]
 801ce7a:	f9b4 2000 	ldrsh.w	r2, [r4]
 801ce7e:	b29f      	uxth	r7, r3
 801ce80:	429a      	cmp	r2, r3
 801ce82:	da0d      	bge.n	801cea0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 801ce84:	f8ad 2010 	strh.w	r2, [sp, #16]
 801ce88:	1aba      	subs	r2, r7, r2
 801ce8a:	f8ad a012 	strh.w	sl, [sp, #18]
 801ce8e:	4631      	mov	r1, r6
 801ce90:	f8ad 2014 	strh.w	r2, [sp, #20]
 801ce94:	4640      	mov	r0, r8
 801ce96:	f8ad 9016 	strh.w	r9, [sp, #22]
 801ce9a:	69ea      	ldr	r2, [r5, #28]
 801ce9c:	f7ff ff66 	bl	801cd6c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801cea0:	8822      	ldrh	r2, [r4, #0]
 801cea2:	445f      	add	r7, fp
 801cea4:	88a3      	ldrh	r3, [r4, #4]
 801cea6:	b2bf      	uxth	r7, r7
 801cea8:	4413      	add	r3, r2
 801ceaa:	b23a      	sxth	r2, r7
 801ceac:	b29b      	uxth	r3, r3
 801ceae:	b219      	sxth	r1, r3
 801ceb0:	4291      	cmp	r1, r2
 801ceb2:	dd0d      	ble.n	801ced0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 801ceb4:	1bdb      	subs	r3, r3, r7
 801ceb6:	f8ad 2010 	strh.w	r2, [sp, #16]
 801ceba:	f8ad a012 	strh.w	sl, [sp, #18]
 801cebe:	4631      	mov	r1, r6
 801cec0:	f8ad 3014 	strh.w	r3, [sp, #20]
 801cec4:	4640      	mov	r0, r8
 801cec6:	f8ad 9016 	strh.w	r9, [sp, #22]
 801ceca:	69ea      	ldr	r2, [r5, #28]
 801cecc:	f7ff ff4e 	bl	801cd6c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801ced0:	88e2      	ldrh	r2, [r4, #6]
 801ced2:	8863      	ldrh	r3, [r4, #2]
 801ced4:	4413      	add	r3, r2
 801ced6:	9a00      	ldr	r2, [sp, #0]
 801ced8:	444a      	add	r2, r9
 801ceda:	b29b      	uxth	r3, r3
 801cedc:	fa1f f982 	uxth.w	r9, r2
 801cee0:	b219      	sxth	r1, r3
 801cee2:	fa0f f289 	sxth.w	r2, r9
 801cee6:	428a      	cmp	r2, r1
 801cee8:	da15      	bge.n	801cf16 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801ceea:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801ceee:	eba3 0309 	sub.w	r3, r3, r9
 801cef2:	f9b4 0000 	ldrsh.w	r0, [r4]
 801cef6:	f8ad 1014 	strh.w	r1, [sp, #20]
 801cefa:	4631      	mov	r1, r6
 801cefc:	f8ad 0010 	strh.w	r0, [sp, #16]
 801cf00:	f8ad 2012 	strh.w	r2, [sp, #18]
 801cf04:	f8ad 3016 	strh.w	r3, [sp, #22]
 801cf08:	69ea      	ldr	r2, [r5, #28]
 801cf0a:	e001      	b.n	801cf10 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 801cf0c:	69ea      	ldr	r2, [r5, #28]
 801cf0e:	4621      	mov	r1, r4
 801cf10:	4640      	mov	r0, r8
 801cf12:	f7ff ff2b 	bl	801cd6c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801cf16:	4628      	mov	r0, r5
 801cf18:	f7ff fe94 	bl	801cc44 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801cf1c:	6861      	ldr	r1, [r4, #4]
 801cf1e:	4602      	mov	r2, r0
 801cf20:	4633      	mov	r3, r6
 801cf22:	6820      	ldr	r0, [r4, #0]
 801cf24:	c303      	stmia	r3!, {r0, r1}
 801cf26:	4611      	mov	r1, r2
 801cf28:	4630      	mov	r0, r6
 801cf2a:	f7fb ffcd 	bl	8018ec8 <_ZN8touchgfx4RectaNERKS0_>
 801cf2e:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801cf32:	2b00      	cmp	r3, #0
 801cf34:	f77f af33 	ble.w	801cd9e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801cf38:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801cf3c:	2b00      	cmp	r3, #0
 801cf3e:	f77f af2e 	ble.w	801cd9e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801cf42:	4628      	mov	r0, r5
 801cf44:	f7ff fe9a 	bl	801cc7c <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801cf48:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801cf4c:	1a18      	subs	r0, r3, r0
 801cf4e:	f8ad 0010 	strh.w	r0, [sp, #16]
 801cf52:	4628      	mov	r0, r5
 801cf54:	f7ff fea6 	bl	801cca4 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801cf58:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801cf5c:	4631      	mov	r1, r6
 801cf5e:	1a18      	subs	r0, r3, r0
 801cf60:	f8ad 0012 	strh.w	r0, [sp, #18]
 801cf64:	4628      	mov	r0, r5
 801cf66:	682b      	ldr	r3, [r5, #0]
 801cf68:	689b      	ldr	r3, [r3, #8]
 801cf6a:	4798      	blx	r3
 801cf6c:	e717      	b.n	801cd9e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0801cf6e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801cf6e:	b570      	push	{r4, r5, r6, lr}
 801cf70:	1d06      	adds	r6, r0, #4
 801cf72:	b086      	sub	sp, #24
 801cf74:	460c      	mov	r4, r1
 801cf76:	2300      	movs	r3, #0
 801cf78:	4631      	mov	r1, r6
 801cf7a:	4605      	mov	r5, r0
 801cf7c:	a802      	add	r0, sp, #8
 801cf7e:	9301      	str	r3, [sp, #4]
 801cf80:	f7ff fc7e 	bl	801c880 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801cf84:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801cf88:	8822      	ldrh	r2, [r4, #0]
 801cf8a:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 801cf8e:	1ad2      	subs	r2, r2, r3
 801cf90:	8863      	ldrh	r3, [r4, #2]
 801cf92:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801cf96:	1a5b      	subs	r3, r3, r1
 801cf98:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801cf9c:	f8ad 2010 	strh.w	r2, [sp, #16]
 801cfa0:	aa01      	add	r2, sp, #4
 801cfa2:	f8ad 0014 	strh.w	r0, [sp, #20]
 801cfa6:	4630      	mov	r0, r6
 801cfa8:	f8ad 1016 	strh.w	r1, [sp, #22]
 801cfac:	a904      	add	r1, sp, #16
 801cfae:	f8ad 3012 	strh.w	r3, [sp, #18]
 801cfb2:	f7fc f861 	bl	8019078 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801cfb6:	9a01      	ldr	r2, [sp, #4]
 801cfb8:	b11a      	cbz	r2, 801cfc2 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 801cfba:	4621      	mov	r1, r4
 801cfbc:	4628      	mov	r0, r5
 801cfbe:	f7ff fed5 	bl	801cd6c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801cfc2:	b006      	add	sp, #24
 801cfc4:	bd70      	pop	{r4, r5, r6, pc}

0801cfc6 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801cfc6:	4602      	mov	r2, r0
 801cfc8:	b530      	push	{r4, r5, lr}
 801cfca:	4604      	mov	r4, r0
 801cfcc:	b085      	sub	sp, #20
 801cfce:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801cfd2:	460d      	mov	r5, r1
 801cfd4:	466b      	mov	r3, sp
 801cfd6:	6851      	ldr	r1, [r2, #4]
 801cfd8:	c303      	stmia	r3!, {r0, r1}
 801cfda:	4629      	mov	r1, r5
 801cfdc:	4668      	mov	r0, sp
 801cfde:	f7fb ff73 	bl	8018ec8 <_ZN8touchgfx4RectaNERKS0_>
 801cfe2:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801cfe6:	b12b      	cbz	r3, 801cff4 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 801cfe8:	4669      	mov	r1, sp
 801cfea:	4620      	mov	r0, r4
 801cfec:	f7ff ffbf 	bl	801cf6e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801cff0:	b005      	add	sp, #20
 801cff2:	bd30      	pop	{r4, r5, pc}
 801cff4:	3404      	adds	r4, #4
 801cff6:	a802      	add	r0, sp, #8
 801cff8:	4621      	mov	r1, r4
 801cffa:	f7ff fc41 	bl	801c880 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801cffe:	f8bd 3000 	ldrh.w	r3, [sp]
 801d002:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801d006:	4669      	mov	r1, sp
 801d008:	4620      	mov	r0, r4
 801d00a:	1a9b      	subs	r3, r3, r2
 801d00c:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801d010:	f8ad 3000 	strh.w	r3, [sp]
 801d014:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801d018:	1a9b      	subs	r3, r3, r2
 801d01a:	f8ad 3002 	strh.w	r3, [sp, #2]
 801d01e:	f7fb fff2 	bl	8019006 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801d022:	e7e5      	b.n	801cff0 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

0801d024 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801d024:	460b      	mov	r3, r1
 801d026:	680a      	ldr	r2, [r1, #0]
 801d028:	1d01      	adds	r1, r0, #4
 801d02a:	6992      	ldr	r2, [r2, #24]
 801d02c:	4618      	mov	r0, r3
 801d02e:	4710      	bx	r2

0801d030 <_ZN8touchgfx12TextProviderC1Ev>:
 801d030:	b538      	push	{r3, r4, r5, lr}
 801d032:	2500      	movs	r5, #0
 801d034:	2302      	movs	r3, #2
 801d036:	4604      	mov	r4, r0
 801d038:	220e      	movs	r2, #14
 801d03a:	7403      	strb	r3, [r0, #16]
 801d03c:	4629      	mov	r1, r5
 801d03e:	6145      	str	r5, [r0, #20]
 801d040:	7605      	strb	r5, [r0, #24]
 801d042:	83c5      	strh	r5, [r0, #30]
 801d044:	8405      	strh	r5, [r0, #32]
 801d046:	86c5      	strh	r5, [r0, #54]	; 0x36
 801d048:	8705      	strh	r5, [r0, #56]	; 0x38
 801d04a:	87c5      	strh	r5, [r0, #62]	; 0x3e
 801d04c:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 801d050:	e9c0 5500 	strd	r5, r5, [r0]
 801d054:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 801d058:	304c      	adds	r0, #76	; 0x4c
 801d05a:	f009 fa0f 	bl	802647c <memset>
 801d05e:	2301      	movs	r3, #1
 801d060:	4620      	mov	r0, r4
 801d062:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 801d066:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801d06a:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 801d06e:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 801d072:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 801d076:	f7eb fd81 	bl	8008b7c <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801d07a:	4620      	mov	r0, r4
 801d07c:	bd38      	pop	{r3, r4, r5, pc}

0801d07e <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801d07e:	b530      	push	{r4, r5, lr}
 801d080:	2500      	movs	r5, #0
 801d082:	2401      	movs	r4, #1
 801d084:	6843      	ldr	r3, [r0, #4]
 801d086:	b913      	cbnz	r3, 801d08e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801d088:	6803      	ldr	r3, [r0, #0]
 801d08a:	b313      	cbz	r3, 801d0d2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801d08c:	6043      	str	r3, [r0, #4]
 801d08e:	7e03      	ldrb	r3, [r0, #24]
 801d090:	b143      	cbz	r3, 801d0a4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801d092:	6943      	ldr	r3, [r0, #20]
 801d094:	b12b      	cbz	r3, 801d0a2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801d096:	881a      	ldrh	r2, [r3, #0]
 801d098:	b11a      	cbz	r2, 801d0a2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801d09a:	1c9a      	adds	r2, r3, #2
 801d09c:	6142      	str	r2, [r0, #20]
 801d09e:	8818      	ldrh	r0, [r3, #0]
 801d0a0:	bd30      	pop	{r4, r5, pc}
 801d0a2:	7605      	strb	r5, [r0, #24]
 801d0a4:	6843      	ldr	r3, [r0, #4]
 801d0a6:	8819      	ldrh	r1, [r3, #0]
 801d0a8:	b199      	cbz	r1, 801d0d2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801d0aa:	1c9a      	adds	r2, r3, #2
 801d0ac:	2902      	cmp	r1, #2
 801d0ae:	6042      	str	r2, [r0, #4]
 801d0b0:	d1f5      	bne.n	801d09e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801d0b2:	7c03      	ldrb	r3, [r0, #16]
 801d0b4:	2b01      	cmp	r3, #1
 801d0b6:	d8e5      	bhi.n	801d084 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801d0b8:	1c5a      	adds	r2, r3, #1
 801d0ba:	3302      	adds	r3, #2
 801d0bc:	7402      	strb	r2, [r0, #16]
 801d0be:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801d0c2:	6143      	str	r3, [r0, #20]
 801d0c4:	2b00      	cmp	r3, #0
 801d0c6:	d0dd      	beq.n	801d084 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801d0c8:	881b      	ldrh	r3, [r3, #0]
 801d0ca:	2b00      	cmp	r3, #0
 801d0cc:	d0da      	beq.n	801d084 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801d0ce:	7604      	strb	r4, [r0, #24]
 801d0d0:	e7d8      	b.n	801d084 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801d0d2:	2000      	movs	r0, #0
 801d0d4:	e7e4      	b.n	801d0a0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801d0d6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 801d0d6:	6001      	str	r1, [r0, #0]
 801d0d8:	2100      	movs	r1, #0
 801d0da:	b430      	push	{r4, r5}
 801d0dc:	6041      	str	r1, [r0, #4]
 801d0de:	6815      	ldr	r5, [r2, #0]
 801d0e0:	6085      	str	r5, [r0, #8]
 801d0e2:	6852      	ldr	r2, [r2, #4]
 801d0e4:	6443      	str	r3, [r0, #68]	; 0x44
 801d0e6:	9b02      	ldr	r3, [sp, #8]
 801d0e8:	60c2      	str	r2, [r0, #12]
 801d0ea:	7401      	strb	r1, [r0, #16]
 801d0ec:	6141      	str	r1, [r0, #20]
 801d0ee:	7601      	strb	r1, [r0, #24]
 801d0f0:	8701      	strh	r1, [r0, #56]	; 0x38
 801d0f2:	8401      	strh	r1, [r0, #32]
 801d0f4:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 801d0f8:	6483      	str	r3, [r0, #72]	; 0x48
 801d0fa:	bc30      	pop	{r4, r5}
 801d0fc:	f7eb bd3e 	b.w	8008b7c <_ZN8touchgfx12TextProvider18initializeInternalEv>

0801d100 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801d100:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d102:	4605      	mov	r5, r0
 801d104:	4608      	mov	r0, r1
 801d106:	b1f1      	cbz	r1, 801d146 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 801d108:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 801d10c:	460b      	mov	r3, r1
 801d10e:	f101 0708 	add.w	r7, r1, #8
 801d112:	4622      	mov	r2, r4
 801d114:	6818      	ldr	r0, [r3, #0]
 801d116:	3308      	adds	r3, #8
 801d118:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801d11c:	4626      	mov	r6, r4
 801d11e:	42bb      	cmp	r3, r7
 801d120:	c603      	stmia	r6!, {r0, r1}
 801d122:	4634      	mov	r4, r6
 801d124:	d1f6      	bne.n	801d114 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801d126:	6818      	ldr	r0, [r3, #0]
 801d128:	6030      	str	r0, [r6, #0]
 801d12a:	4610      	mov	r0, r2
 801d12c:	889b      	ldrh	r3, [r3, #4]
 801d12e:	80b3      	strh	r3, [r6, #4]
 801d130:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 801d134:	015b      	lsls	r3, r3, #5
 801d136:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801d13a:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 801d13e:	430b      	orrs	r3, r1
 801d140:	425b      	negs	r3, r3
 801d142:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 801d146:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d148 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801d148:	b538      	push	{r3, r4, r5, lr}
 801d14a:	460c      	mov	r4, r1
 801d14c:	6811      	ldr	r1, [r2, #0]
 801d14e:	4610      	mov	r0, r2
 801d150:	68cd      	ldr	r5, [r1, #12]
 801d152:	4619      	mov	r1, r3
 801d154:	47a8      	blx	r5
 801d156:	2800      	cmp	r0, #0
 801d158:	bf08      	it	eq
 801d15a:	4620      	moveq	r0, r4
 801d15c:	bd38      	pop	{r3, r4, r5, pc}
	...

0801d160 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801d160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d162:	4604      	mov	r4, r0
 801d164:	4615      	mov	r5, r2
 801d166:	4608      	mov	r0, r1
 801d168:	b93a      	cbnz	r2, 801d17a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801d16a:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801d16e:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 801d172:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 801d176:	4628      	mov	r0, r5
 801d178:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d17a:	f892 c00d 	ldrb.w	ip, [r2, #13]
 801d17e:	f46f 6763 	mvn.w	r7, #3632	; 0xe30
 801d182:	8893      	ldrh	r3, [r2, #4]
 801d184:	ea4f 160c 	mov.w	r6, ip, lsl #4
 801d188:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801d18c:	79ee      	ldrb	r6, [r5, #7]
 801d18e:	4316      	orrs	r6, r2
 801d190:	19da      	adds	r2, r3, r7
 801d192:	b291      	uxth	r1, r2
 801d194:	b2b7      	uxth	r7, r6
 801d196:	291d      	cmp	r1, #29
 801d198:	d87b      	bhi.n	801d292 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 801d19a:	2201      	movs	r2, #1
 801d19c:	10f6      	asrs	r6, r6, #3
 801d19e:	408a      	lsls	r2, r1
 801d1a0:	4974      	ldr	r1, [pc, #464]	; (801d374 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
 801d1a2:	420a      	tst	r2, r1
 801d1a4:	d12e      	bne.n	801d204 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 801d1a6:	f412 7f60 	tst.w	r2, #896	; 0x380
 801d1aa:	d072      	beq.n	801d292 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 801d1ac:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 801d1b0:	462b      	mov	r3, r5
 801d1b2:	f105 0e08 	add.w	lr, r5, #8
 801d1b6:	4615      	mov	r5, r2
 801d1b8:	6818      	ldr	r0, [r3, #0]
 801d1ba:	3308      	adds	r3, #8
 801d1bc:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801d1c0:	4694      	mov	ip, r2
 801d1c2:	4573      	cmp	r3, lr
 801d1c4:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801d1c8:	4662      	mov	r2, ip
 801d1ca:	d1f5      	bne.n	801d1b8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 801d1cc:	6818      	ldr	r0, [r3, #0]
 801d1ce:	f8cc 0000 	str.w	r0, [ip]
 801d1d2:	889b      	ldrh	r3, [r3, #4]
 801d1d4:	f8ac 3004 	strh.w	r3, [ip, #4]
 801d1d8:	b2b3      	uxth	r3, r6
 801d1da:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 801d1de:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 801d1e2:	1aca      	subs	r2, r1, r3
 801d1e4:	1bcf      	subs	r7, r1, r7
 801d1e6:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 801d1ea:	b292      	uxth	r2, r2
 801d1ec:	1afb      	subs	r3, r7, r3
 801d1ee:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 801d1f2:	10d2      	asrs	r2, r2, #3
 801d1f4:	f002 0260 	and.w	r2, r2, #96	; 0x60
 801d1f8:	4302      	orrs	r2, r0
 801d1fa:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 801d1fe:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 801d202:	e7b8      	b.n	801d176 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801d204:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801d206:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801d20a:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 801d20c:	f640 6333 	movw	r3, #3635	; 0xe33
 801d210:	4299      	cmp	r1, r3
 801d212:	d110      	bne.n	801d236 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd6>
 801d214:	6803      	ldr	r3, [r0, #0]
 801d216:	68db      	ldr	r3, [r3, #12]
 801d218:	4798      	blx	r3
 801d21a:	7b41      	ldrb	r1, [r0, #13]
 801d21c:	00cb      	lsls	r3, r1, #3
 801d21e:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801d222:	7a03      	ldrb	r3, [r0, #8]
 801d224:	0648      	lsls	r0, r1, #25
 801d226:	ea43 0302 	orr.w	r3, r3, r2
 801d22a:	bf44      	itt	mi
 801d22c:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801d230:	b21b      	sxthmi	r3, r3
 801d232:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801d236:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 801d23a:	462a      	mov	r2, r5
 801d23c:	f105 0c08 	add.w	ip, r5, #8
 801d240:	443b      	add	r3, r7
 801d242:	4433      	add	r3, r6
 801d244:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 801d248:	b29b      	uxth	r3, r3
 801d24a:	4635      	mov	r5, r6
 801d24c:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801d250:	6810      	ldr	r0, [r2, #0]
 801d252:	3208      	adds	r2, #8
 801d254:	f852 1c04 	ldr.w	r1, [r2, #-4]
 801d258:	4637      	mov	r7, r6
 801d25a:	4562      	cmp	r2, ip
 801d25c:	c703      	stmia	r7!, {r0, r1}
 801d25e:	463e      	mov	r6, r7
 801d260:	d1f6      	bne.n	801d250 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf0>
 801d262:	6810      	ldr	r0, [r2, #0]
 801d264:	6038      	str	r0, [r7, #0]
 801d266:	8892      	ldrh	r2, [r2, #4]
 801d268:	80ba      	strh	r2, [r7, #4]
 801d26a:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801d26e:	10db      	asrs	r3, r3, #3
 801d270:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801d274:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801d278:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801d27c:	4313      	orrs	r3, r2
 801d27e:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 801d282:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801d286:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 801d28a:	1a9b      	subs	r3, r3, r2
 801d28c:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 801d290:	e771      	b.n	801d176 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801d292:	f023 0204 	bic.w	r2, r3, #4
 801d296:	f640 611b 	movw	r1, #3611	; 0xe1b
 801d29a:	428a      	cmp	r2, r1
 801d29c:	d003      	beq.n	801d2a6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x146>
 801d29e:	f640 621d 	movw	r2, #3613	; 0xe1d
 801d2a2:	4293      	cmp	r3, r2
 801d2a4:	d120      	bne.n	801d2e8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x188>
 801d2a6:	3b01      	subs	r3, #1
 801d2a8:	4602      	mov	r2, r0
 801d2aa:	4629      	mov	r1, r5
 801d2ac:	4620      	mov	r0, r4
 801d2ae:	b29b      	uxth	r3, r3
 801d2b0:	f7ff ff4a 	bl	801d148 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801d2b4:	7b41      	ldrb	r1, [r0, #13]
 801d2b6:	00cb      	lsls	r3, r1, #3
 801d2b8:	0649      	lsls	r1, r1, #25
 801d2ba:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801d2be:	7a03      	ldrb	r3, [r0, #8]
 801d2c0:	ea43 0302 	orr.w	r3, r3, r2
 801d2c4:	bf44      	itt	mi
 801d2c6:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801d2ca:	b21b      	sxthmi	r3, r3
 801d2cc:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801d2d0:	7b6b      	ldrb	r3, [r5, #13]
 801d2d2:	7aaa      	ldrb	r2, [r5, #10]
 801d2d4:	005b      	lsls	r3, r3, #1
 801d2d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d2da:	4313      	orrs	r3, r2
 801d2dc:	115a      	asrs	r2, r3, #5
 801d2de:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801d2e2:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 801d2e6:	e035      	b.n	801d354 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f4>
 801d2e8:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 801d2ec:	f01c 0f40 	tst.w	ip, #64	; 0x40
 801d2f0:	f402 7180 	and.w	r1, r2, #256	; 0x100
 801d2f4:	7a2a      	ldrb	r2, [r5, #8]
 801d2f6:	ea42 0201 	orr.w	r2, r2, r1
 801d2fa:	f640 6109 	movw	r1, #3593	; 0xe09
 801d2fe:	bf1c      	itt	ne
 801d300:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 801d304:	b212      	sxthne	r2, r2
 801d306:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801d30a:	f023 0210 	bic.w	r2, r3, #16
 801d30e:	428a      	cmp	r2, r1
 801d310:	d003      	beq.n	801d31a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
 801d312:	f640 6213 	movw	r2, #3603	; 0xe13
 801d316:	4293      	cmp	r3, r2
 801d318:	d129      	bne.n	801d36e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20e>
 801d31a:	7b6e      	ldrb	r6, [r5, #13]
 801d31c:	4629      	mov	r1, r5
 801d31e:	0076      	lsls	r6, r6, #1
 801d320:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801d324:	7aae      	ldrb	r6, [r5, #10]
 801d326:	4316      	orrs	r6, r2
 801d328:	f640 6213 	movw	r2, #3603	; 0xe13
 801d32c:	4293      	cmp	r3, r2
 801d32e:	4602      	mov	r2, r0
 801d330:	4620      	mov	r0, r4
 801d332:	bf16      	itet	ne
 801d334:	f103 33ff 	addne.w	r3, r3, #4294967295
 801d338:	f640 630c 	movweq	r3, #3596	; 0xe0c
 801d33c:	b29b      	uxthne	r3, r3
 801d33e:	f7ff ff03 	bl	801d148 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801d342:	7b43      	ldrb	r3, [r0, #13]
 801d344:	7a82      	ldrb	r2, [r0, #10]
 801d346:	005b      	lsls	r3, r3, #1
 801d348:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d34c:	4313      	orrs	r3, r2
 801d34e:	1af6      	subs	r6, r6, r3
 801d350:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 801d354:	7b69      	ldrb	r1, [r5, #13]
 801d356:	00cb      	lsls	r3, r1, #3
 801d358:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801d35c:	7a2b      	ldrb	r3, [r5, #8]
 801d35e:	4313      	orrs	r3, r2
 801d360:	064a      	lsls	r2, r1, #25
 801d362:	bf44      	itt	mi
 801d364:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801d368:	b21b      	sxthmi	r3, r3
 801d36a:	1bdb      	subs	r3, r3, r7
 801d36c:	e747      	b.n	801d1fe <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 801d36e:	2300      	movs	r3, #0
 801d370:	e7b7      	b.n	801d2e2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x182>
 801d372:	bf00      	nop
 801d374:	3fc00079 	.word	0x3fc00079

0801d378 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 801d378:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d37c:	4604      	mov	r4, r0
 801d37e:	b942      	cbnz	r2, 801d392 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 801d380:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801d384:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 801d388:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 801d38c:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 801d390:	e047      	b.n	801d422 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801d392:	7b51      	ldrb	r1, [r2, #13]
 801d394:	8893      	ldrh	r3, [r2, #4]
 801d396:	010d      	lsls	r5, r1, #4
 801d398:	f405 7080 	and.w	r0, r5, #256	; 0x100
 801d39c:	79d5      	ldrb	r5, [r2, #7]
 801d39e:	4305      	orrs	r5, r0
 801d3a0:	2d04      	cmp	r5, #4
 801d3a2:	bfcc      	ite	gt
 801d3a4:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 801d3a8:	f04f 0e01 	movle.w	lr, #1
 801d3ac:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 801d3b0:	f200 80ab 	bhi.w	801d50a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 801d3b4:	f240 60e7 	movw	r0, #1767	; 0x6e7
 801d3b8:	4283      	cmp	r3, r0
 801d3ba:	d216      	bcs.n	801d3ea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d3bc:	f240 605b 	movw	r0, #1627	; 0x65b
 801d3c0:	4283      	cmp	r3, r0
 801d3c2:	d859      	bhi.n	801d478 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 801d3c4:	f240 6057 	movw	r0, #1623	; 0x657
 801d3c8:	4283      	cmp	r3, r0
 801d3ca:	d20e      	bcs.n	801d3ea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d3cc:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801d3d0:	d24a      	bcs.n	801d468 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 801d3d2:	f240 604e 	movw	r0, #1614	; 0x64e
 801d3d6:	4283      	cmp	r3, r0
 801d3d8:	d207      	bcs.n	801d3ea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d3da:	f240 601a 	movw	r0, #1562	; 0x61a
 801d3de:	4283      	cmp	r3, r0
 801d3e0:	d02a      	beq.n	801d438 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801d3e2:	d821      	bhi.n	801d428 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 801d3e4:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 801d3e8:	d35b      	bcc.n	801d4a2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801d3ea:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 801d3ee:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801d3f2:	f040 80d0 	bne.w	801d596 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801d3f6:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 801d3fa:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801d3fe:	f040 80ca 	bne.w	801d596 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801d402:	00cb      	lsls	r3, r1, #3
 801d404:	0649      	lsls	r1, r1, #25
 801d406:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801d40a:	7a13      	ldrb	r3, [r2, #8]
 801d40c:	ea43 0300 	orr.w	r3, r3, r0
 801d410:	bf44      	itt	mi
 801d412:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801d416:	b21b      	sxthmi	r3, r3
 801d418:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801d41c:	1b5d      	subs	r5, r3, r5
 801d41e:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801d422:	4610      	mov	r0, r2
 801d424:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d428:	f240 604b 	movw	r0, #1611	; 0x64b
 801d42c:	4283      	cmp	r3, r0
 801d42e:	d338      	bcc.n	801d4a2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801d430:	f240 604c 	movw	r0, #1612	; 0x64c
 801d434:	4283      	cmp	r3, r0
 801d436:	d9d8      	bls.n	801d3ea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d438:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 801d43c:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 801d440:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801d444:	f040 80f3 	bne.w	801d62e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 801d448:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801d44c:	f040 80ef 	bne.w	801d62e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 801d450:	00cb      	lsls	r3, r1, #3
 801d452:	064e      	lsls	r6, r1, #25
 801d454:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801d458:	7a13      	ldrb	r3, [r2, #8]
 801d45a:	ea43 0300 	orr.w	r3, r3, r0
 801d45e:	bf44      	itt	mi
 801d460:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801d464:	b21b      	sxthmi	r3, r3
 801d466:	e7d9      	b.n	801d41c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 801d468:	f240 6054 	movw	r0, #1620	; 0x654
 801d46c:	4283      	cmp	r3, r0
 801d46e:	d8e3      	bhi.n	801d438 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801d470:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801d474:	d9e0      	bls.n	801d438 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801d476:	e7b8      	b.n	801d3ea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d478:	f240 6074 	movw	r0, #1652	; 0x674
 801d47c:	4283      	cmp	r3, r0
 801d47e:	d0b4      	beq.n	801d3ea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d480:	d82d      	bhi.n	801d4de <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 801d482:	f240 605e 	movw	r0, #1630	; 0x65e
 801d486:	4283      	cmp	r3, r0
 801d488:	d804      	bhi.n	801d494 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 801d48a:	f240 605d 	movw	r0, #1629	; 0x65d
 801d48e:	4283      	cmp	r3, r0
 801d490:	d3d2      	bcc.n	801d438 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801d492:	e7aa      	b.n	801d3ea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d494:	f240 605f 	movw	r0, #1631	; 0x65f
 801d498:	4283      	cmp	r3, r0
 801d49a:	d0cd      	beq.n	801d438 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801d49c:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 801d4a0:	d0a3      	beq.n	801d3ea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d4a2:	00cb      	lsls	r3, r1, #3
 801d4a4:	0649      	lsls	r1, r1, #25
 801d4a6:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801d4aa:	7a13      	ldrb	r3, [r2, #8]
 801d4ac:	ea43 0300 	orr.w	r3, r3, r0
 801d4b0:	bf44      	itt	mi
 801d4b2:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801d4b6:	b21b      	sxthmi	r3, r3
 801d4b8:	1b5d      	subs	r5, r3, r5
 801d4ba:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801d4be:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801d4c2:	7b53      	ldrb	r3, [r2, #13]
 801d4c4:	015b      	lsls	r3, r3, #5
 801d4c6:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801d4ca:	7993      	ldrb	r3, [r2, #6]
 801d4cc:	430b      	orrs	r3, r1
 801d4ce:	2105      	movs	r1, #5
 801d4d0:	005b      	lsls	r3, r3, #1
 801d4d2:	fb93 f3f1 	sdiv	r3, r3, r1
 801d4d6:	f992 1009 	ldrsb.w	r1, [r2, #9]
 801d4da:	440b      	add	r3, r1
 801d4dc:	e756      	b.n	801d38c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 801d4de:	f240 60e2 	movw	r0, #1762	; 0x6e2
 801d4e2:	4283      	cmp	r3, r0
 801d4e4:	d809      	bhi.n	801d4fa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 801d4e6:	f240 60df 	movw	r0, #1759	; 0x6df
 801d4ea:	4283      	cmp	r3, r0
 801d4ec:	f4bf af7d 	bcs.w	801d3ea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d4f0:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 801d4f4:	2b05      	cmp	r3, #5
 801d4f6:	d8d4      	bhi.n	801d4a2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801d4f8:	e777      	b.n	801d3ea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d4fa:	f240 60e3 	movw	r0, #1763	; 0x6e3
 801d4fe:	4283      	cmp	r3, r0
 801d500:	d09a      	beq.n	801d438 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801d502:	f240 60e4 	movw	r0, #1764	; 0x6e4
 801d506:	4283      	cmp	r3, r0
 801d508:	e7ca      	b.n	801d4a0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801d50a:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 801d50e:	d22b      	bcs.n	801d568 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 801d510:	f640 00ed 	movw	r0, #2285	; 0x8ed
 801d514:	4283      	cmp	r3, r0
 801d516:	d28f      	bcs.n	801d438 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801d518:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801d51c:	4283      	cmp	r3, r0
 801d51e:	d816      	bhi.n	801d54e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 801d520:	f640 00e4 	movw	r0, #2276	; 0x8e4
 801d524:	4283      	cmp	r3, r0
 801d526:	f4bf af60 	bcs.w	801d3ea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d52a:	f240 60ec 	movw	r0, #1772	; 0x6ec
 801d52e:	4283      	cmp	r3, r0
 801d530:	d80a      	bhi.n	801d548 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 801d532:	f240 60eb 	movw	r0, #1771	; 0x6eb
 801d536:	4283      	cmp	r3, r0
 801d538:	f4bf af57 	bcs.w	801d3ea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d53c:	f240 60ea 	movw	r0, #1770	; 0x6ea
 801d540:	4283      	cmp	r3, r0
 801d542:	f43f af79 	beq.w	801d438 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801d546:	e7ac      	b.n	801d4a2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801d548:	f240 60ed 	movw	r0, #1773	; 0x6ed
 801d54c:	e7f8      	b.n	801d540 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 801d54e:	f640 00e8 	movw	r0, #2280	; 0x8e8
 801d552:	4283      	cmp	r3, r0
 801d554:	d802      	bhi.n	801d55c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 801d556:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801d55a:	e798      	b.n	801d48e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 801d55c:	f640 00e9 	movw	r0, #2281	; 0x8e9
 801d560:	4283      	cmp	r3, r0
 801d562:	f47f af42 	bne.w	801d3ea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d566:	e767      	b.n	801d438 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801d568:	f640 00f6 	movw	r0, #2294	; 0x8f6
 801d56c:	4283      	cmp	r3, r0
 801d56e:	f43f af63 	beq.w	801d438 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801d572:	d802      	bhi.n	801d57a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 801d574:	f640 00f2 	movw	r0, #2290	; 0x8f2
 801d578:	e7f2      	b.n	801d560 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 801d57a:	f640 00fa 	movw	r0, #2298	; 0x8fa
 801d57e:	4283      	cmp	r3, r0
 801d580:	d805      	bhi.n	801d58e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 801d582:	f640 00f9 	movw	r0, #2297	; 0x8f9
 801d586:	4283      	cmp	r3, r0
 801d588:	f4ff af2f 	bcc.w	801d3ea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d58c:	e754      	b.n	801d438 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801d58e:	f640 00fe 	movw	r0, #2302	; 0x8fe
 801d592:	4283      	cmp	r3, r0
 801d594:	e7af      	b.n	801d4f6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 801d596:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 801d59a:	4617      	mov	r7, r2
 801d59c:	f102 0808 	add.w	r8, r2, #8
 801d5a0:	4666      	mov	r6, ip
 801d5a2:	6838      	ldr	r0, [r7, #0]
 801d5a4:	3708      	adds	r7, #8
 801d5a6:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801d5aa:	46e6      	mov	lr, ip
 801d5ac:	4547      	cmp	r7, r8
 801d5ae:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801d5b2:	46f4      	mov	ip, lr
 801d5b4:	d1f5      	bne.n	801d5a2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 801d5b6:	6838      	ldr	r0, [r7, #0]
 801d5b8:	f8ce 0000 	str.w	r0, [lr]
 801d5bc:	88b9      	ldrh	r1, [r7, #4]
 801d5be:	f8ae 1004 	strh.w	r1, [lr, #4]
 801d5c2:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 801d5c6:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801d5ca:	d009      	beq.n	801d5e0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
 801d5cc:	7b51      	ldrb	r1, [r2, #13]
 801d5ce:	7992      	ldrb	r2, [r2, #6]
 801d5d0:	0149      	lsls	r1, r1, #5
 801d5d2:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801d5d6:	4311      	orrs	r1, r2
 801d5d8:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801d5dc:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 801d5e0:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801d5e4:	b2ad      	uxth	r5, r5
 801d5e6:	d00d      	beq.n	801d604 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
 801d5e8:	442b      	add	r3, r5
 801d5ea:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801d5ee:	b29b      	uxth	r3, r3
 801d5f0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801d5f4:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801d5f8:	10db      	asrs	r3, r3, #3
 801d5fa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801d5fe:	4313      	orrs	r3, r2
 801d600:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801d604:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 801d608:	00cb      	lsls	r3, r1, #3
 801d60a:	064f      	lsls	r7, r1, #25
 801d60c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801d610:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801d614:	ea43 0302 	orr.w	r3, r3, r2
 801d618:	bf44      	itt	mi
 801d61a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801d61e:	b21b      	sxthmi	r3, r3
 801d620:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801d624:	1b5b      	subs	r3, r3, r5
 801d626:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 801d62a:	4632      	mov	r2, r6
 801d62c:	e6f9      	b.n	801d422 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801d62e:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 801d632:	4617      	mov	r7, r2
 801d634:	f102 0908 	add.w	r9, r2, #8
 801d638:	4666      	mov	r6, ip
 801d63a:	6838      	ldr	r0, [r7, #0]
 801d63c:	3708      	adds	r7, #8
 801d63e:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801d642:	46e0      	mov	r8, ip
 801d644:	454f      	cmp	r7, r9
 801d646:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801d64a:	46c4      	mov	ip, r8
 801d64c:	d1f5      	bne.n	801d63a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
 801d64e:	6838      	ldr	r0, [r7, #0]
 801d650:	f8c8 0000 	str.w	r0, [r8]
 801d654:	88b9      	ldrh	r1, [r7, #4]
 801d656:	f8a8 1004 	strh.w	r1, [r8, #4]
 801d65a:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 801d65e:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801d662:	d009      	beq.n	801d678 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
 801d664:	7b51      	ldrb	r1, [r2, #13]
 801d666:	7992      	ldrb	r2, [r2, #6]
 801d668:	0149      	lsls	r1, r1, #5
 801d66a:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801d66e:	4311      	orrs	r1, r2
 801d670:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801d674:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 801d678:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801d67c:	d00e      	beq.n	801d69c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 801d67e:	eba3 030e 	sub.w	r3, r3, lr
 801d682:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801d686:	b29b      	uxth	r3, r3
 801d688:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801d68c:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801d690:	10db      	asrs	r3, r3, #3
 801d692:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801d696:	4313      	orrs	r3, r2
 801d698:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801d69c:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 801d6a0:	00cb      	lsls	r3, r1, #3
 801d6a2:	0648      	lsls	r0, r1, #25
 801d6a4:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801d6a8:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801d6ac:	ea43 0302 	orr.w	r3, r3, r2
 801d6b0:	bf44      	itt	mi
 801d6b2:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801d6b6:	b21b      	sxthmi	r3, r3
 801d6b8:	1b5d      	subs	r5, r3, r5
 801d6ba:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801d6be:	e7b4      	b.n	801d62a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

0801d6c0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801d6c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d6c4:	461e      	mov	r6, r3
 801d6c6:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801d6c8:	4604      	mov	r4, r0
 801d6ca:	4617      	mov	r7, r2
 801d6cc:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801d6d0:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801d6d4:	f7eb f9ac 	bl	8008a30 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801d6d8:	4605      	mov	r5, r0
 801d6da:	b918      	cbnz	r0, 801d6e4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 801d6dc:	6030      	str	r0, [r6, #0]
 801d6de:	4628      	mov	r0, r5
 801d6e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d6e4:	683b      	ldr	r3, [r7, #0]
 801d6e6:	4601      	mov	r1, r0
 801d6e8:	4638      	mov	r0, r7
 801d6ea:	68db      	ldr	r3, [r3, #12]
 801d6ec:	4798      	blx	r3
 801d6ee:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801d6f2:	4602      	mov	r2, r0
 801d6f4:	6030      	str	r0, [r6, #0]
 801d6f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801d6fa:	d213      	bcs.n	801d724 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 801d6fc:	4643      	mov	r3, r8
 801d6fe:	4639      	mov	r1, r7
 801d700:	4620      	mov	r0, r4
 801d702:	f7ff fe39 	bl	801d378 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801d706:	6030      	str	r0, [r6, #0]
 801d708:	6833      	ldr	r3, [r6, #0]
 801d70a:	b143      	cbz	r3, 801d71e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 801d70c:	7b5a      	ldrb	r2, [r3, #13]
 801d70e:	7a9b      	ldrb	r3, [r3, #10]
 801d710:	0052      	lsls	r2, r2, #1
 801d712:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801d716:	4313      	orrs	r3, r2
 801d718:	bf0c      	ite	eq
 801d71a:	2301      	moveq	r3, #1
 801d71c:	2300      	movne	r3, #0
 801d71e:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 801d722:	e7dc      	b.n	801d6de <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 801d724:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801d728:	b29b      	uxth	r3, r3
 801d72a:	2b7f      	cmp	r3, #127	; 0x7f
 801d72c:	d804      	bhi.n	801d738 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 801d72e:	4639      	mov	r1, r7
 801d730:	4620      	mov	r0, r4
 801d732:	f7ff fd15 	bl	801d160 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801d736:	e7e6      	b.n	801d706 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 801d738:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 801d73c:	2b00      	cmp	r3, #0
 801d73e:	d0e3      	beq.n	801d708 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801d740:	f640 1302 	movw	r3, #2306	; 0x902
 801d744:	429d      	cmp	r5, r3
 801d746:	d1df      	bne.n	801d708 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801d748:	4601      	mov	r1, r0
 801d74a:	4620      	mov	r0, r4
 801d74c:	f7ff fcd8 	bl	801d100 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801d750:	e7d9      	b.n	801d706 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

0801d752 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801d752:	b510      	push	{r4, lr}
 801d754:	4604      	mov	r4, r0
 801d756:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 801d75a:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801d75c:	b1e1      	cbz	r1, 801d798 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 801d75e:	2b0a      	cmp	r3, #10
 801d760:	d02d      	beq.n	801d7be <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 801d762:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 801d764:	3901      	subs	r1, #1
 801d766:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801d76a:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 801d76c:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 801d770:	1c51      	adds	r1, r2, #1
 801d772:	b289      	uxth	r1, r1
 801d774:	2901      	cmp	r1, #1
 801d776:	bf8a      	itet	hi
 801d778:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801d77c:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 801d77e:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 801d780:	1c5a      	adds	r2, r3, #1
 801d782:	8722      	strh	r2, [r4, #56]	; 0x38
 801d784:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801d786:	4413      	add	r3, r2
 801d788:	b29b      	uxth	r3, r3
 801d78a:	2b09      	cmp	r3, #9
 801d78c:	bf88      	it	hi
 801d78e:	3b0a      	subhi	r3, #10
 801d790:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801d794:	8458      	strh	r0, [r3, #34]	; 0x22
 801d796:	e7de      	b.n	801d756 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 801d798:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801d79a:	2b0a      	cmp	r3, #10
 801d79c:	d00f      	beq.n	801d7be <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 801d79e:	4620      	mov	r0, r4
 801d7a0:	f7ff fc6d 	bl	801d07e <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801d7a4:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801d7a6:	1c5a      	adds	r2, r3, #1
 801d7a8:	8722      	strh	r2, [r4, #56]	; 0x38
 801d7aa:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801d7ac:	4413      	add	r3, r2
 801d7ae:	b29b      	uxth	r3, r3
 801d7b0:	2b09      	cmp	r3, #9
 801d7b2:	bf88      	it	hi
 801d7b4:	3b0a      	subhi	r3, #10
 801d7b6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801d7ba:	8458      	strh	r0, [r3, #34]	; 0x22
 801d7bc:	e7ec      	b.n	801d798 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 801d7be:	bd10      	pop	{r4, pc}

0801d7c0 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801d7c0:	b538      	push	{r3, r4, r5, lr}
 801d7c2:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801d7c4:	4604      	mov	r4, r0
 801d7c6:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 801d7ca:	8c55      	ldrh	r5, [r2, #34]	; 0x22
 801d7cc:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 801d7ce:	3a01      	subs	r2, #1
 801d7d0:	8702      	strh	r2, [r0, #56]	; 0x38
 801d7d2:	1c5a      	adds	r2, r3, #1
 801d7d4:	b292      	uxth	r2, r2
 801d7d6:	2a09      	cmp	r2, #9
 801d7d8:	bf8a      	itet	hi
 801d7da:	3b09      	subhi	r3, #9
 801d7dc:	86c2      	strhls	r2, [r0, #54]	; 0x36
 801d7de:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 801d7e0:	f7ff ffb7 	bl	801d752 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801d7e4:	8c23      	ldrh	r3, [r4, #32]
 801d7e6:	2b01      	cmp	r3, #1
 801d7e8:	bf9c      	itt	ls
 801d7ea:	3301      	addls	r3, #1
 801d7ec:	8423      	strhls	r3, [r4, #32]
 801d7ee:	8be3      	ldrh	r3, [r4, #30]
 801d7f0:	b90b      	cbnz	r3, 801d7f6 <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 801d7f2:	2302      	movs	r3, #2
 801d7f4:	83e3      	strh	r3, [r4, #30]
 801d7f6:	8be3      	ldrh	r3, [r4, #30]
 801d7f8:	4628      	mov	r0, r5
 801d7fa:	3b01      	subs	r3, #1
 801d7fc:	b29b      	uxth	r3, r3
 801d7fe:	83e3      	strh	r3, [r4, #30]
 801d800:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801d804:	8365      	strh	r5, [r4, #26]
 801d806:	bd38      	pop	{r3, r4, r5, pc}

0801d808 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801d808:	428a      	cmp	r2, r1
 801d80a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d80e:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
 801d810:	d932      	bls.n	801d878 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
 801d812:	8f05      	ldrh	r5, [r0, #56]	; 0x38
 801d814:	1a54      	subs	r4, r2, r1
 801d816:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
 801d81a:	19ee      	adds	r6, r5, r7
 801d81c:	fa1f fe84 	uxth.w	lr, r4
 801d820:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	; 0x3e
 801d824:	3e01      	subs	r6, #1
 801d826:	b2b4      	uxth	r4, r6
 801d828:	eba4 090e 	sub.w	r9, r4, lr
 801d82c:	fa1f f989 	uxth.w	r9, r9
 801d830:	2c09      	cmp	r4, #9
 801d832:	4626      	mov	r6, r4
 801d834:	bf88      	it	hi
 801d836:	f1a4 060a 	subhi.w	r6, r4, #10
 801d83a:	f1bc 0f00 	cmp.w	ip, #0
 801d83e:	f104 34ff 	add.w	r4, r4, #4294967295
 801d842:	bf08      	it	eq
 801d844:	f04f 0c02 	moveq.w	ip, #2
 801d848:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801d84c:	b2a4      	uxth	r4, r4
 801d84e:	f10c 3cff 	add.w	ip, ip, #4294967295
 801d852:	f8b6 a022 	ldrh.w	sl, [r6, #34]	; 0x22
 801d856:	454c      	cmp	r4, r9
 801d858:	fa1f fc8c 	uxth.w	ip, ip
 801d85c:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 801d860:	f8a6 a03a 	strh.w	sl, [r6, #58]	; 0x3a
 801d864:	d1e4      	bne.n	801d830 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 801d866:	eba5 050e 	sub.w	r5, r5, lr
 801d86a:	eb0e 0408 	add.w	r4, lr, r8
 801d86e:	f8a0 c03e 	strh.w	ip, [r0, #62]	; 0x3e
 801d872:	8705      	strh	r5, [r0, #56]	; 0x38
 801d874:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
 801d878:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 801d87a:	250a      	movs	r5, #10
 801d87c:	1a64      	subs	r4, r4, r1
 801d87e:	4439      	add	r1, r7
 801d880:	b289      	uxth	r1, r1
 801d882:	8704      	strh	r4, [r0, #56]	; 0x38
 801d884:	2909      	cmp	r1, #9
 801d886:	bf88      	it	hi
 801d888:	390a      	subhi	r1, #10
 801d88a:	86c1      	strh	r1, [r0, #54]	; 0x36
 801d88c:	b18a      	cbz	r2, 801d8b2 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 801d88e:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 801d890:	3a01      	subs	r2, #1
 801d892:	3101      	adds	r1, #1
 801d894:	b292      	uxth	r2, r2
 801d896:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 801d89a:	8701      	strh	r1, [r0, #56]	; 0x38
 801d89c:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 801d89e:	b901      	cbnz	r1, 801d8a2 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
 801d8a0:	86c5      	strh	r5, [r0, #54]	; 0x36
 801d8a2:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 801d8a4:	3901      	subs	r1, #1
 801d8a6:	b289      	uxth	r1, r1
 801d8a8:	86c1      	strh	r1, [r0, #54]	; 0x36
 801d8aa:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801d8ae:	844c      	strh	r4, [r1, #34]	; 0x22
 801d8b0:	e7ec      	b.n	801d88c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
 801d8b2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d8b6:	f7ff bf4c 	b.w	801d752 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

0801d8ba <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801d8ba:	b570      	push	{r4, r5, r6, lr}
 801d8bc:	2500      	movs	r5, #0
 801d8be:	4295      	cmp	r5, r2
 801d8c0:	d011      	beq.n	801d8e6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 801d8c2:	8bc4      	ldrh	r4, [r0, #30]
 801d8c4:	f831 6b02 	ldrh.w	r6, [r1], #2
 801d8c8:	4414      	add	r4, r2
 801d8ca:	3c01      	subs	r4, #1
 801d8cc:	1b64      	subs	r4, r4, r5
 801d8ce:	b2a4      	uxth	r4, r4
 801d8d0:	2c01      	cmp	r4, #1
 801d8d2:	bf88      	it	hi
 801d8d4:	3c02      	subhi	r4, #2
 801d8d6:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801d8da:	8b64      	ldrh	r4, [r4, #26]
 801d8dc:	42b4      	cmp	r4, r6
 801d8de:	d117      	bne.n	801d910 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 801d8e0:	3501      	adds	r5, #1
 801d8e2:	b2ad      	uxth	r5, r5
 801d8e4:	e7eb      	b.n	801d8be <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 801d8e6:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801d8ea:	2400      	movs	r4, #0
 801d8ec:	4413      	add	r3, r2
 801d8ee:	b2a2      	uxth	r2, r4
 801d8f0:	429a      	cmp	r2, r3
 801d8f2:	da0f      	bge.n	801d914 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 801d8f4:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 801d8f6:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801d8fa:	3401      	adds	r4, #1
 801d8fc:	4432      	add	r2, r6
 801d8fe:	b292      	uxth	r2, r2
 801d900:	2a09      	cmp	r2, #9
 801d902:	bf88      	it	hi
 801d904:	3a0a      	subhi	r2, #10
 801d906:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801d90a:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 801d90c:	42aa      	cmp	r2, r5
 801d90e:	d0ee      	beq.n	801d8ee <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 801d910:	2000      	movs	r0, #0
 801d912:	bd70      	pop	{r4, r5, r6, pc}
 801d914:	2001      	movs	r0, #1
 801d916:	e7fc      	b.n	801d912 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

0801d918 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801d918:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d91c:	4605      	mov	r5, r0
 801d91e:	4616      	mov	r6, r2
 801d920:	1c8c      	adds	r4, r1, #2
 801d922:	8809      	ldrh	r1, [r1, #0]
 801d924:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801d928:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801d92c:	42b3      	cmp	r3, r6
 801d92e:	d124      	bne.n	801d97a <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801d930:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801d934:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801d938:	f001 070f 	and.w	r7, r1, #15
 801d93c:	4652      	mov	r2, sl
 801d93e:	f8cd 8000 	str.w	r8, [sp]
 801d942:	464b      	mov	r3, r9
 801d944:	4621      	mov	r1, r4
 801d946:	4628      	mov	r0, r5
 801d948:	f7ff ffb7 	bl	801d8ba <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801d94c:	4683      	mov	fp, r0
 801d94e:	b168      	cbz	r0, 801d96c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801d950:	eb0a 0109 	add.w	r1, sl, r9
 801d954:	463a      	mov	r2, r7
 801d956:	4628      	mov	r0, r5
 801d958:	4441      	add	r1, r8
 801d95a:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801d95e:	4649      	mov	r1, r9
 801d960:	f7ff ff52 	bl	801d808 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801d964:	4658      	mov	r0, fp
 801d966:	b003      	add	sp, #12
 801d968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d96c:	eb07 010a 	add.w	r1, r7, sl
 801d970:	4449      	add	r1, r9
 801d972:	4441      	add	r1, r8
 801d974:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801d978:	e7d2      	b.n	801d920 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801d97a:	f04f 0b00 	mov.w	fp, #0
 801d97e:	e7f1      	b.n	801d964 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801d980 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801d980:	b570      	push	{r4, r5, r6, lr}
 801d982:	8810      	ldrh	r0, [r2, #0]
 801d984:	4298      	cmp	r0, r3
 801d986:	d817      	bhi.n	801d9b8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801d988:	1e48      	subs	r0, r1, #1
 801d98a:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801d98e:	4298      	cmp	r0, r3
 801d990:	d312      	bcc.n	801d9b8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801d992:	2400      	movs	r4, #0
 801d994:	428c      	cmp	r4, r1
 801d996:	d20f      	bcs.n	801d9b8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801d998:	1860      	adds	r0, r4, r1
 801d99a:	1040      	asrs	r0, r0, #1
 801d99c:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801d9a0:	0085      	lsls	r5, r0, #2
 801d9a2:	42b3      	cmp	r3, r6
 801d9a4:	d902      	bls.n	801d9ac <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801d9a6:	3001      	adds	r0, #1
 801d9a8:	b284      	uxth	r4, r0
 801d9aa:	e7f3      	b.n	801d994 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801d9ac:	d201      	bcs.n	801d9b2 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801d9ae:	b281      	uxth	r1, r0
 801d9b0:	e7f0      	b.n	801d994 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801d9b2:	442a      	add	r2, r5
 801d9b4:	8850      	ldrh	r0, [r2, #2]
 801d9b6:	bd70      	pop	{r4, r5, r6, pc}
 801d9b8:	2000      	movs	r0, #0
 801d9ba:	e7fc      	b.n	801d9b6 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0801d9bc <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801d9bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d9c0:	6c45      	ldr	r5, [r0, #68]	; 0x44
 801d9c2:	4604      	mov	r4, r0
 801d9c4:	260b      	movs	r6, #11
 801d9c6:	886f      	ldrh	r7, [r5, #2]
 801d9c8:	087f      	lsrs	r7, r7, #1
 801d9ca:	3e01      	subs	r6, #1
 801d9cc:	d013      	beq.n	801d9f6 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801d9ce:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801d9d0:	462a      	mov	r2, r5
 801d9d2:	4639      	mov	r1, r7
 801d9d4:	4620      	mov	r0, r4
 801d9d6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801d9da:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801d9de:	4643      	mov	r3, r8
 801d9e0:	f7ff ffce 	bl	801d980 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801d9e4:	b138      	cbz	r0, 801d9f6 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801d9e6:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801d9ea:	4642      	mov	r2, r8
 801d9ec:	4620      	mov	r0, r4
 801d9ee:	f7ff ff93 	bl	801d918 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801d9f2:	2800      	cmp	r0, #0
 801d9f4:	d1e9      	bne.n	801d9ca <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801d9f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0801d9fc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 801d9fc:	b570      	push	{r4, r5, r6, lr}
 801d9fe:	694a      	ldr	r2, [r1, #20]
 801da00:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 801da02:	684b      	ldr	r3, [r1, #4]
 801da04:	1b54      	subs	r4, r2, r5
 801da06:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 801da08:	f000 8106 	beq.w	801dc18 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 801da0c:	1b9b      	subs	r3, r3, r6
 801da0e:	d003      	beq.n	801da18 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801da10:	4363      	muls	r3, r4
 801da12:	2210      	movs	r2, #16
 801da14:	fb93 f3f2 	sdiv	r3, r3, r2
 801da18:	680c      	ldr	r4, [r1, #0]
 801da1a:	698a      	ldr	r2, [r1, #24]
 801da1c:	1b65      	subs	r5, r4, r5
 801da1e:	f000 80fd 	beq.w	801dc1c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 801da22:	1b92      	subs	r2, r2, r6
 801da24:	d003      	beq.n	801da2e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801da26:	436a      	muls	r2, r5
 801da28:	2410      	movs	r4, #16
 801da2a:	fb92 f2f4 	sdiv	r2, r2, r4
 801da2e:	1a9b      	subs	r3, r3, r2
 801da30:	ed9f 4a89 	vldr	s8, [pc, #548]	; 801dc58 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 801da34:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801da38:	460a      	mov	r2, r1
 801da3a:	ee07 3a90 	vmov	s15, r3
 801da3e:	f100 040c 	add.w	r4, r0, #12
 801da42:	4603      	mov	r3, r0
 801da44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801da48:	ee67 7a84 	vmul.f32	s15, s15, s8
 801da4c:	ee87 3a27 	vdiv.f32	s6, s14, s15
 801da50:	eeb1 6a43 	vneg.f32	s12, s6
 801da54:	edd2 7a02 	vldr	s15, [r2, #8]
 801da58:	3214      	adds	r2, #20
 801da5a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801da5e:	ece3 6a01 	vstmia	r3!, {s13}
 801da62:	429c      	cmp	r4, r3
 801da64:	ed52 7a02 	vldr	s15, [r2, #-8]
 801da68:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801da6c:	edc3 7a02 	vstr	s15, [r3, #8]
 801da70:	ed52 7a01 	vldr	s15, [r2, #-4]
 801da74:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801da78:	edc3 7a05 	vstr	s15, [r3, #20]
 801da7c:	d1ea      	bne.n	801da54 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 801da7e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801da80:	698b      	ldr	r3, [r1, #24]
 801da82:	edd0 4a02 	vldr	s9, [r0, #8]
 801da86:	1a9b      	subs	r3, r3, r2
 801da88:	edd0 3a00 	vldr	s7, [r0]
 801da8c:	edd0 6a01 	vldr	s13, [r0, #4]
 801da90:	ee07 3a90 	vmov	s15, r3
 801da94:	684b      	ldr	r3, [r1, #4]
 801da96:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801da9a:	ed90 5a05 	vldr	s10, [r0, #20]
 801da9e:	1a9b      	subs	r3, r3, r2
 801daa0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801daa4:	ee73 4ae4 	vsub.f32	s9, s7, s9
 801daa8:	ed90 2a03 	vldr	s4, [r0, #12]
 801daac:	ee07 3a10 	vmov	s14, r3
 801dab0:	edd0 5a04 	vldr	s11, [r0, #16]
 801dab4:	ee67 7a84 	vmul.f32	s15, s15, s8
 801dab8:	ed90 1a07 	vldr	s2, [r0, #28]
 801dabc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801dac0:	edd0 2a06 	vldr	s5, [r0, #24]
 801dac4:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801dac8:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 801dacc:	ee27 7a04 	vmul.f32	s14, s14, s8
 801dad0:	ee32 5a45 	vsub.f32	s10, s4, s10
 801dad4:	eee6 7a87 	vfma.f32	s15, s13, s14
 801dad8:	ee67 7a83 	vmul.f32	s15, s15, s6
 801dadc:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 801dae0:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801dae2:	694a      	ldr	r2, [r1, #20]
 801dae4:	1b13      	subs	r3, r2, r4
 801dae6:	ee07 3a10 	vmov	s14, r3
 801daea:	680b      	ldr	r3, [r1, #0]
 801daec:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801daf0:	1b1b      	subs	r3, r3, r4
 801daf2:	ee27 7a04 	vmul.f32	s14, s14, s8
 801daf6:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801dafa:	ee07 3a10 	vmov	s14, r3
 801dafe:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801db02:	ee27 7a04 	vmul.f32	s14, s14, s8
 801db06:	eee6 4a87 	vfma.f32	s9, s13, s14
 801db0a:	ee64 4a86 	vmul.f32	s9, s9, s12
 801db0e:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 801db12:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801db14:	698b      	ldr	r3, [r1, #24]
 801db16:	1a9b      	subs	r3, r3, r2
 801db18:	ee06 3a90 	vmov	s13, r3
 801db1c:	684b      	ldr	r3, [r1, #4]
 801db1e:	1a9b      	subs	r3, r3, r2
 801db20:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801db24:	ee07 3a10 	vmov	s14, r3
 801db28:	ee66 6a84 	vmul.f32	s13, s13, s8
 801db2c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801db30:	ee65 6a66 	vnmul.f32	s13, s10, s13
 801db34:	ee27 7a04 	vmul.f32	s14, s14, s8
 801db38:	eee5 6a87 	vfma.f32	s13, s11, s14
 801db3c:	ee66 6a83 	vmul.f32	s13, s13, s6
 801db40:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 801db44:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801db46:	694a      	ldr	r2, [r1, #20]
 801db48:	1b13      	subs	r3, r2, r4
 801db4a:	ee07 3a10 	vmov	s14, r3
 801db4e:	680b      	ldr	r3, [r1, #0]
 801db50:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801db54:	1b1b      	subs	r3, r3, r4
 801db56:	ee27 7a04 	vmul.f32	s14, s14, s8
 801db5a:	ee25 5a47 	vnmul.f32	s10, s10, s14
 801db5e:	ee07 3a10 	vmov	s14, r3
 801db62:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801db66:	ee27 7a04 	vmul.f32	s14, s14, s8
 801db6a:	eea5 5a87 	vfma.f32	s10, s11, s14
 801db6e:	edd0 5a08 	vldr	s11, [r0, #32]
 801db72:	ee31 1a65 	vsub.f32	s2, s2, s11
 801db76:	ee72 5ae5 	vsub.f32	s11, s5, s11
 801db7a:	ee25 5a06 	vmul.f32	s10, s10, s12
 801db7e:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 801db82:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801db84:	698b      	ldr	r3, [r1, #24]
 801db86:	1a9b      	subs	r3, r3, r2
 801db88:	ee07 3a10 	vmov	s14, r3
 801db8c:	684b      	ldr	r3, [r1, #4]
 801db8e:	1a9b      	subs	r3, r3, r2
 801db90:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801db94:	ee01 3a90 	vmov	s3, r3
 801db98:	ee27 7a04 	vmul.f32	s14, s14, s8
 801db9c:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801dba0:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 801dba4:	ee61 1a84 	vmul.f32	s3, s3, s8
 801dba8:	eea1 7a21 	vfma.f32	s14, s2, s3
 801dbac:	ee27 7a03 	vmul.f32	s14, s14, s6
 801dbb0:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801dbb4:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801dbb6:	694a      	ldr	r2, [r1, #20]
 801dbb8:	1b13      	subs	r3, r2, r4
 801dbba:	ee03 3a10 	vmov	s6, r3
 801dbbe:	680b      	ldr	r3, [r1, #0]
 801dbc0:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801dbc4:	1b1b      	subs	r3, r3, r4
 801dbc6:	ee23 3a04 	vmul.f32	s6, s6, s8
 801dbca:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 801dbce:	ee03 3a10 	vmov	s6, r3
 801dbd2:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801dbd6:	ee23 4a04 	vmul.f32	s8, s6, s8
 801dbda:	eee1 5a04 	vfma.f32	s11, s2, s8
 801dbde:	ee25 6a86 	vmul.f32	s12, s11, s12
 801dbe2:	ee62 5a67 	vnmul.f32	s11, s4, s15
 801dbe6:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 801dbea:	eee3 5aa6 	vfma.f32	s11, s7, s13
 801dbee:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801dbf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dbf6:	dd13      	ble.n	801dc20 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 801dbf8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801dbfc:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 801dc00:	63c3      	str	r3, [r0, #60]	; 0x3c
 801dc02:	eee3 7a87 	vfma.f32	s15, s7, s14
 801dc06:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801dc0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dc0e:	dd15      	ble.n	801dc3c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 801dc10:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801dc14:	6403      	str	r3, [r0, #64]	; 0x40
 801dc16:	bd70      	pop	{r4, r5, r6, pc}
 801dc18:	4623      	mov	r3, r4
 801dc1a:	e6fd      	b.n	801da18 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801dc1c:	462a      	mov	r2, r5
 801dc1e:	e706      	b.n	801da2e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801dc20:	d502      	bpl.n	801dc28 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 801dc22:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801dc26:	e7e9      	b.n	801dbfc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 801dc28:	ee22 2a64 	vnmul.f32	s4, s4, s9
 801dc2c:	eea3 2a85 	vfma.f32	s4, s7, s10
 801dc30:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 801dc34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dc38:	dade      	bge.n	801dbf8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 801dc3a:	e7f2      	b.n	801dc22 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 801dc3c:	d502      	bpl.n	801dc44 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 801dc3e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801dc42:	e7e7      	b.n	801dc14 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 801dc44:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 801dc48:	eee3 4a86 	vfma.f32	s9, s7, s12
 801dc4c:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 801dc50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dc54:	dadc      	bge.n	801dc10 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 801dc56:	e7f2      	b.n	801dc3e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 801dc58:	3d800000 	.word	0x3d800000

0801dc5c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 801dc5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801dc60:	2714      	movs	r7, #20
 801dc62:	435f      	muls	r7, r3
 801dc64:	eb02 0c07 	add.w	ip, r2, r7
 801dc68:	f8dc 5004 	ldr.w	r5, [ip, #4]
 801dc6c:	f115 0e0f 	adds.w	lr, r5, #15
 801dc70:	f100 80a2 	bmi.w	801ddb8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 801dc74:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 801dc78:	9c08      	ldr	r4, [sp, #32]
 801dc7a:	2614      	movs	r6, #20
 801dc7c:	f8c0 e014 	str.w	lr, [r0, #20]
 801dc80:	4366      	muls	r6, r4
 801dc82:	eb02 0806 	add.w	r8, r2, r6
 801dc86:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801dc8a:	f115 040f 	adds.w	r4, r5, #15
 801dc8e:	f100 809f 	bmi.w	801ddd0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 801dc92:	1124      	asrs	r4, r4, #4
 801dc94:	eba4 040e 	sub.w	r4, r4, lr
 801dc98:	6184      	str	r4, [r0, #24]
 801dc9a:	2c00      	cmp	r4, #0
 801dc9c:	f000 808a 	beq.w	801ddb4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 801dca0:	f8dc 9004 	ldr.w	r9, [ip, #4]
 801dca4:	f8d8 4004 	ldr.w	r4, [r8, #4]
 801dca8:	5995      	ldr	r5, [r2, r6]
 801dcaa:	eba4 0809 	sub.w	r8, r4, r9
 801dcae:	59d4      	ldr	r4, [r2, r7]
 801dcb0:	eba5 0a04 	sub.w	sl, r5, r4
 801dcb4:	ea4f 1608 	mov.w	r6, r8, lsl #4
 801dcb8:	ea4f 150a 	mov.w	r5, sl, lsl #4
 801dcbc:	fb0e fe05 	mul.w	lr, lr, r5
 801dcc0:	fb0a ee19 	mls	lr, sl, r9, lr
 801dcc4:	fb08 e404 	mla	r4, r8, r4, lr
 801dcc8:	3c01      	subs	r4, #1
 801dcca:	19a4      	adds	r4, r4, r6
 801dccc:	f100 808c 	bmi.w	801dde8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 801dcd0:	fb94 fef6 	sdiv	lr, r4, r6
 801dcd4:	fb06 441e 	mls	r4, r6, lr, r4
 801dcd8:	f8c0 e000 	str.w	lr, [r0]
 801dcdc:	6104      	str	r4, [r0, #16]
 801dcde:	2d00      	cmp	r5, #0
 801dce0:	f2c0 8095 	blt.w	801de0e <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 801dce4:	fb95 f4f6 	sdiv	r4, r5, r6
 801dce8:	fb06 5514 	mls	r5, r6, r4, r5
 801dcec:	6044      	str	r4, [r0, #4]
 801dcee:	6085      	str	r5, [r0, #8]
 801dcf0:	60c6      	str	r6, [r0, #12]
 801dcf2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801dcf6:	f8dc 4004 	ldr.w	r4, [ip, #4]
 801dcfa:	6945      	ldr	r5, [r0, #20]
 801dcfc:	59d2      	ldr	r2, [r2, r7]
 801dcfe:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 801dd02:	eddf 6a4b 	vldr	s13, [pc, #300]	; 801de30 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 801dd06:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 801dd0a:	ee07 4a10 	vmov	s14, r4
 801dd0e:	6804      	ldr	r4, [r0, #0]
 801dd10:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 801dd14:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801dd18:	ee07 2a90 	vmov	s15, r2
 801dd1c:	ee27 7a26 	vmul.f32	s14, s14, s13
 801dd20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801dd24:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801dd28:	edd3 6a00 	vldr	s13, [r3]
 801dd2c:	eee6 6a07 	vfma.f32	s13, s12, s14
 801dd30:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 801dd34:	eee6 6a27 	vfma.f32	s13, s12, s15
 801dd38:	edc0 6a07 	vstr	s13, [r0, #28]
 801dd3c:	edd0 6a01 	vldr	s13, [r0, #4]
 801dd40:	edd1 5a09 	vldr	s11, [r1, #36]	; 0x24
 801dd44:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801dd48:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 801dd4c:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801dd50:	ed80 6a08 	vstr	s12, [r0, #32]
 801dd54:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 801dd56:	6242      	str	r2, [r0, #36]	; 0x24
 801dd58:	edd1 5a0c 	vldr	s11, [r1, #48]	; 0x30
 801dd5c:	ed93 6a03 	vldr	s12, [r3, #12]
 801dd60:	eea5 6a87 	vfma.f32	s12, s11, s14
 801dd64:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 801dd68:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801dd6c:	ed80 6a0a 	vstr	s12, [r0, #40]	; 0x28
 801dd70:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 801dd74:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 801dd78:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801dd7c:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
 801dd80:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801dd82:	6302      	str	r2, [r0, #48]	; 0x30
 801dd84:	ed93 6a06 	vldr	s12, [r3, #24]
 801dd88:	edd1 5a0e 	vldr	s11, [r1, #56]	; 0x38
 801dd8c:	eea5 6a87 	vfma.f32	s12, s11, s14
 801dd90:	eeb0 7a46 	vmov.f32	s14, s12
 801dd94:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 801dd98:	eea6 7a27 	vfma.f32	s14, s12, s15
 801dd9c:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801dda0:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 801dda4:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 801dda8:	eee6 7a87 	vfma.f32	s15, s13, s14
 801ddac:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
 801ddb0:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 801ddb2:	63c3      	str	r3, [r0, #60]	; 0x3c
 801ddb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ddb8:	2410      	movs	r4, #16
 801ddba:	f1c5 0501 	rsb	r5, r5, #1
 801ddbe:	fb9e fef4 	sdiv	lr, lr, r4
 801ddc2:	f015 050f 	ands.w	r5, r5, #15
 801ddc6:	bf18      	it	ne
 801ddc8:	2501      	movne	r5, #1
 801ddca:	ebae 0e05 	sub.w	lr, lr, r5
 801ddce:	e753      	b.n	801dc78 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 801ddd0:	f04f 0910 	mov.w	r9, #16
 801ddd4:	f1c5 0501 	rsb	r5, r5, #1
 801ddd8:	fb94 f4f9 	sdiv	r4, r4, r9
 801dddc:	f015 050f 	ands.w	r5, r5, #15
 801dde0:	bf18      	it	ne
 801dde2:	2501      	movne	r5, #1
 801dde4:	1b64      	subs	r4, r4, r5
 801dde6:	e755      	b.n	801dc94 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 801dde8:	4264      	negs	r4, r4
 801ddea:	fb94 fef6 	sdiv	lr, r4, r6
 801ddee:	f1ce 0800 	rsb	r8, lr, #0
 801ddf2:	fb06 441e 	mls	r4, r6, lr, r4
 801ddf6:	f8c0 8000 	str.w	r8, [r0]
 801ddfa:	6104      	str	r4, [r0, #16]
 801ddfc:	2c00      	cmp	r4, #0
 801ddfe:	f43f af6e 	beq.w	801dcde <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 801de02:	ea6f 0e0e 	mvn.w	lr, lr
 801de06:	1b34      	subs	r4, r6, r4
 801de08:	f8c0 e000 	str.w	lr, [r0]
 801de0c:	e766      	b.n	801dcdc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 801de0e:	426d      	negs	r5, r5
 801de10:	fb95 f4f6 	sdiv	r4, r5, r6
 801de14:	f1c4 0e00 	rsb	lr, r4, #0
 801de18:	fb06 5514 	mls	r5, r6, r4, r5
 801de1c:	f8c0 e004 	str.w	lr, [r0, #4]
 801de20:	6085      	str	r5, [r0, #8]
 801de22:	2d00      	cmp	r5, #0
 801de24:	f43f af64 	beq.w	801dcf0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 801de28:	43e4      	mvns	r4, r4
 801de2a:	1b75      	subs	r5, r6, r5
 801de2c:	6044      	str	r4, [r0, #4]
 801de2e:	e75e      	b.n	801dcee <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 801de30:	3d800000 	.word	0x3d800000

0801de34 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801de34:	4b01      	ldr	r3, [pc, #4]	; (801de3c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801de36:	6018      	str	r0, [r3, #0]
 801de38:	4770      	bx	lr
 801de3a:	bf00      	nop
 801de3c:	240261dc 	.word	0x240261dc

0801de40 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 801de40:	4b06      	ldr	r3, [pc, #24]	; (801de5c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801de42:	881a      	ldrh	r2, [r3, #0]
 801de44:	4282      	cmp	r2, r0
 801de46:	d807      	bhi.n	801de58 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 801de48:	4b05      	ldr	r3, [pc, #20]	; (801de60 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801de4a:	881b      	ldrh	r3, [r3, #0]
 801de4c:	4413      	add	r3, r2
 801de4e:	4298      	cmp	r0, r3
 801de50:	bfac      	ite	ge
 801de52:	2000      	movge	r0, #0
 801de54:	2001      	movlt	r0, #1
 801de56:	4770      	bx	lr
 801de58:	2000      	movs	r0, #0
 801de5a:	4770      	bx	lr
 801de5c:	240261fc 	.word	0x240261fc
 801de60:	24026200 	.word	0x24026200

0801de64 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801de64:	b508      	push	{r3, lr}
 801de66:	4601      	mov	r1, r0
 801de68:	f7ff ffea 	bl	801de40 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801de6c:	b118      	cbz	r0, 801de76 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801de6e:	4b02      	ldr	r3, [pc, #8]	; (801de78 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 801de70:	681b      	ldr	r3, [r3, #0]
 801de72:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801de76:	bd08      	pop	{r3, pc}
 801de78:	240261e0 	.word	0x240261e0

0801de7c <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>:
 801de7c:	b538      	push	{r3, r4, r5, lr}
 801de7e:	4604      	mov	r4, r0
 801de80:	f7ff ffde 	bl	801de40 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801de84:	b188      	cbz	r0, 801deaa <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x2e>
 801de86:	4b09      	ldr	r3, [pc, #36]	; (801deac <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x30>)
 801de88:	881a      	ldrh	r2, [r3, #0]
 801de8a:	4b09      	ldr	r3, [pc, #36]	; (801deb0 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x34>)
 801de8c:	1aa4      	subs	r4, r4, r2
 801de8e:	220e      	movs	r2, #14
 801de90:	681d      	ldr	r5, [r3, #0]
 801de92:	4362      	muls	r2, r4
 801de94:	18ac      	adds	r4, r5, r2
 801de96:	7b23      	ldrb	r3, [r4, #12]
 801de98:	f013 0320 	ands.w	r3, r3, #32
 801de9c:	bf17      	itett	ne
 801de9e:	680b      	ldrne	r3, [r1, #0]
 801dea0:	4618      	moveq	r0, r3
 801dea2:	50ab      	strne	r3, [r5, r2]
 801dea4:	684b      	ldrne	r3, [r1, #4]
 801dea6:	bf18      	it	ne
 801dea8:	6063      	strne	r3, [r4, #4]
 801deaa:	bd38      	pop	{r3, r4, r5, pc}
 801deac:	240261fc 	.word	0x240261fc
 801deb0:	240261e4 	.word	0x240261e4

0801deb4 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>:
 801deb4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801deb8:	4606      	mov	r6, r0
 801deba:	460c      	mov	r4, r1
 801debc:	f7ff ffc0 	bl	801de40 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801dec0:	b918      	cbnz	r0, 801deca <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x16>
 801dec2:	2000      	movs	r0, #0
 801dec4:	b002      	add	sp, #8
 801dec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801deca:	4608      	mov	r0, r1
 801decc:	f7fb f83f 	bl	8018f4e <_ZNK8touchgfx4Rect7isEmptyEv>
 801ded0:	2800      	cmp	r0, #0
 801ded2:	d1f6      	bne.n	801dec2 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801ded4:	4b3f      	ldr	r3, [pc, #252]	; (801dfd4 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x120>)
 801ded6:	f8df 9100 	ldr.w	r9, [pc, #256]	; 801dfd8 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x124>
 801deda:	881d      	ldrh	r5, [r3, #0]
 801dedc:	f8d9 a000 	ldr.w	sl, [r9]
 801dee0:	46c8      	mov	r8, r9
 801dee2:	1b73      	subs	r3, r6, r5
 801dee4:	250e      	movs	r5, #14
 801dee6:	435d      	muls	r5, r3
 801dee8:	eb0a 0705 	add.w	r7, sl, r5
 801deec:	7b3b      	ldrb	r3, [r7, #12]
 801deee:	f013 0f20 	tst.w	r3, #32
 801def2:	d0e6      	beq.n	801dec2 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801def4:	4621      	mov	r1, r4
 801def6:	4638      	mov	r0, r7
 801def8:	f7fd fb76 	bl	801b5e8 <_ZNK8touchgfx4Rect8includesERKS0_>
 801defc:	2800      	cmp	r0, #0
 801defe:	d1e1      	bne.n	801dec4 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 801df00:	4639      	mov	r1, r7
 801df02:	4620      	mov	r0, r4
 801df04:	f7fd fb70 	bl	801b5e8 <_ZNK8touchgfx4Rect8includesERKS0_>
 801df08:	b108      	cbz	r0, 801df0e <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x5a>
 801df0a:	4621      	mov	r1, r4
 801df0c:	e020      	b.n	801df50 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9c>
 801df0e:	f9b4 2000 	ldrsh.w	r2, [r4]
 801df12:	f93a 3005 	ldrsh.w	r3, [sl, r5]
 801df16:	429a      	cmp	r2, r3
 801df18:	d11e      	bne.n	801df58 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801df1a:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801df1e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801df22:	429a      	cmp	r2, r3
 801df24:	d118      	bne.n	801df58 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801df26:	6820      	ldr	r0, [r4, #0]
 801df28:	466b      	mov	r3, sp
 801df2a:	6861      	ldr	r1, [r4, #4]
 801df2c:	c303      	stmia	r3!, {r0, r1}
 801df2e:	4639      	mov	r1, r7
 801df30:	4668      	mov	r0, sp
 801df32:	f7fd fb7f 	bl	801b634 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801df36:	f8d9 3000 	ldr.w	r3, [r9]
 801df3a:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801df3e:	442b      	add	r3, r5
 801df40:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801df44:	4413      	add	r3, r2
 801df46:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 801df4a:	4293      	cmp	r3, r2
 801df4c:	dc04      	bgt.n	801df58 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801df4e:	4669      	mov	r1, sp
 801df50:	4630      	mov	r0, r6
 801df52:	f7ff ff93 	bl	801de7c <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>
 801df56:	e7b5      	b.n	801dec4 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 801df58:	f8d8 3000 	ldr.w	r3, [r8]
 801df5c:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801df60:	442b      	add	r3, r5
 801df62:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801df66:	4291      	cmp	r1, r2
 801df68:	d119      	bne.n	801df9e <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 801df6a:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801df6e:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 801df72:	4291      	cmp	r1, r2
 801df74:	d113      	bne.n	801df9e <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 801df76:	6820      	ldr	r0, [r4, #0]
 801df78:	466a      	mov	r2, sp
 801df7a:	6861      	ldr	r1, [r4, #4]
 801df7c:	c203      	stmia	r2!, {r0, r1}
 801df7e:	4619      	mov	r1, r3
 801df80:	4668      	mov	r0, sp
 801df82:	f7fd fb57 	bl	801b634 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801df86:	f8d8 3000 	ldr.w	r3, [r8]
 801df8a:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801df8e:	442b      	add	r3, r5
 801df90:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801df94:	4413      	add	r3, r2
 801df96:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 801df9a:	4293      	cmp	r3, r2
 801df9c:	ddd7      	ble.n	801df4e <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9a>
 801df9e:	4620      	mov	r0, r4
 801dfa0:	f7fa ffd5 	bl	8018f4e <_ZNK8touchgfx4Rect7isEmptyEv>
 801dfa4:	b990      	cbnz	r0, 801dfcc <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x118>
 801dfa6:	88a7      	ldrh	r7, [r4, #4]
 801dfa8:	88e3      	ldrh	r3, [r4, #6]
 801dfaa:	fb17 f703 	smulbb	r7, r7, r3
 801dfae:	f8d8 3000 	ldr.w	r3, [r8]
 801dfb2:	441d      	add	r5, r3
 801dfb4:	4628      	mov	r0, r5
 801dfb6:	f7fa ffca 	bl	8018f4e <_ZNK8touchgfx4Rect7isEmptyEv>
 801dfba:	b948      	cbnz	r0, 801dfd0 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x11c>
 801dfbc:	88ab      	ldrh	r3, [r5, #4]
 801dfbe:	88ea      	ldrh	r2, [r5, #6]
 801dfc0:	fb13 f302 	smulbb	r3, r3, r2
 801dfc4:	42bb      	cmp	r3, r7
 801dfc6:	f6bf af7c 	bge.w	801dec2 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801dfca:	e79e      	b.n	801df0a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x56>
 801dfcc:	2700      	movs	r7, #0
 801dfce:	e7ee      	b.n	801dfae <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xfa>
 801dfd0:	2300      	movs	r3, #0
 801dfd2:	e7f7      	b.n	801dfc4 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x110>
 801dfd4:	240261fc 	.word	0x240261fc
 801dfd8:	240261e4 	.word	0x240261e4

0801dfdc <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801dfdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dfde:	4c24      	ldr	r4, [pc, #144]	; (801e070 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 801dfe0:	6823      	ldr	r3, [r4, #0]
 801dfe2:	2b00      	cmp	r3, #0
 801dfe4:	d042      	beq.n	801e06c <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801dfe6:	4a23      	ldr	r2, [pc, #140]	; (801e074 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 801dfe8:	4d23      	ldr	r5, [pc, #140]	; (801e078 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 801dfea:	8811      	ldrh	r1, [r2, #0]
 801dfec:	f8b5 c000 	ldrh.w	ip, [r5]
 801dff0:	4822      	ldr	r0, [pc, #136]	; (801e07c <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801dff2:	4461      	add	r1, ip
 801dff4:	1c4a      	adds	r2, r1, #1
 801dff6:	008f      	lsls	r7, r1, #2
 801dff8:	f022 0201 	bic.w	r2, r2, #1
 801dffc:	19de      	adds	r6, r3, r7
 801dffe:	0412      	lsls	r2, r2, #16
 801e000:	6006      	str	r6, [r0, #0]
 801e002:	4e1f      	ldr	r6, [pc, #124]	; (801e080 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 801e004:	0c12      	lsrs	r2, r2, #16
 801e006:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 801e00a:	19da      	adds	r2, r3, r7
 801e00c:	6032      	str	r2, [r6, #0]
 801e00e:	220e      	movs	r2, #14
 801e010:	fb02 f20c 	mul.w	r2, r2, ip
 801e014:	3203      	adds	r2, #3
 801e016:	f022 0203 	bic.w	r2, r2, #3
 801e01a:	443a      	add	r2, r7
 801e01c:	4f19      	ldr	r7, [pc, #100]	; (801e084 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801e01e:	4413      	add	r3, r2
 801e020:	603b      	str	r3, [r7, #0]
 801e022:	2300      	movs	r3, #0
 801e024:	4f18      	ldr	r7, [pc, #96]	; (801e088 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801e026:	469c      	mov	ip, r3
 801e028:	803b      	strh	r3, [r7, #0]
 801e02a:	4f18      	ldr	r7, [pc, #96]	; (801e08c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801e02c:	683f      	ldr	r7, [r7, #0]
 801e02e:	1aba      	subs	r2, r7, r2
 801e030:	4f17      	ldr	r7, [pc, #92]	; (801e090 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801e032:	603a      	str	r2, [r7, #0]
 801e034:	f64f 77ff 	movw	r7, #65535	; 0xffff
 801e038:	4a16      	ldr	r2, [pc, #88]	; (801e094 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801e03a:	8013      	strh	r3, [r2, #0]
 801e03c:	428b      	cmp	r3, r1
 801e03e:	d10d      	bne.n	801e05c <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 801e040:	882d      	ldrh	r5, [r5, #0]
 801e042:	2300      	movs	r3, #0
 801e044:	6830      	ldr	r0, [r6, #0]
 801e046:	240e      	movs	r4, #14
 801e048:	429d      	cmp	r5, r3
 801e04a:	d90f      	bls.n	801e06c <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801e04c:	fb04 0203 	mla	r2, r4, r3, r0
 801e050:	3301      	adds	r3, #1
 801e052:	7b11      	ldrb	r1, [r2, #12]
 801e054:	f36f 1145 	bfc	r1, #5, #1
 801e058:	7311      	strb	r1, [r2, #12]
 801e05a:	e7f5      	b.n	801e048 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 801e05c:	6822      	ldr	r2, [r4, #0]
 801e05e:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801e062:	6802      	ldr	r2, [r0, #0]
 801e064:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 801e068:	3301      	adds	r3, #1
 801e06a:	e7e7      	b.n	801e03c <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 801e06c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e06e:	bf00      	nop
 801e070:	240261e0 	.word	0x240261e0
 801e074:	240261fc 	.word	0x240261fc
 801e078:	24026200 	.word	0x24026200
 801e07c:	240261f4 	.word	0x240261f4
 801e080:	240261e4 	.word	0x240261e4
 801e084:	240261ec 	.word	0x240261ec
 801e088:	240261fe 	.word	0x240261fe
 801e08c:	240261e8 	.word	0x240261e8
 801e090:	240261f8 	.word	0x240261f8
 801e094:	240261f0 	.word	0x240261f0

0801e098 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801e098:	4b06      	ldr	r3, [pc, #24]	; (801e0b4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 801e09a:	681b      	ldr	r3, [r3, #0]
 801e09c:	b943      	cbnz	r3, 801e0b0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801e09e:	b139      	cbz	r1, 801e0b0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801e0a0:	4b05      	ldr	r3, [pc, #20]	; (801e0b8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 801e0a2:	801a      	strh	r2, [r3, #0]
 801e0a4:	4b05      	ldr	r3, [pc, #20]	; (801e0bc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 801e0a6:	6019      	str	r1, [r3, #0]
 801e0a8:	4b05      	ldr	r3, [pc, #20]	; (801e0c0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 801e0aa:	6018      	str	r0, [r3, #0]
 801e0ac:	f7ff bf96 	b.w	801dfdc <_ZN8touchgfx6Bitmap10clearCacheEv>
 801e0b0:	4770      	bx	lr
 801e0b2:	bf00      	nop
 801e0b4:	240261ec 	.word	0x240261ec
 801e0b8:	24026200 	.word	0x24026200
 801e0bc:	240261e8 	.word	0x240261e8
 801e0c0:	240261e0 	.word	0x240261e0

0801e0c4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801e0c4:	b470      	push	{r4, r5, r6}
 801e0c6:	4c07      	ldr	r4, [pc, #28]	; (801e0e4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801e0c8:	4605      	mov	r5, r0
 801e0ca:	4610      	mov	r0, r2
 801e0cc:	9a03      	ldr	r2, [sp, #12]
 801e0ce:	6826      	ldr	r6, [r4, #0]
 801e0d0:	b936      	cbnz	r6, 801e0e0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801e0d2:	6025      	str	r5, [r4, #0]
 801e0d4:	4c04      	ldr	r4, [pc, #16]	; (801e0e8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801e0d6:	8021      	strh	r1, [r4, #0]
 801e0d8:	4619      	mov	r1, r3
 801e0da:	bc70      	pop	{r4, r5, r6}
 801e0dc:	f7ff bfdc 	b.w	801e098 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801e0e0:	bc70      	pop	{r4, r5, r6}
 801e0e2:	4770      	bx	lr
 801e0e4:	24026204 	.word	0x24026204
 801e0e8:	240261fc 	.word	0x240261fc

0801e0ec <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801e0ec:	4a12      	ldr	r2, [pc, #72]	; (801e138 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 801e0ee:	8803      	ldrh	r3, [r0, #0]
 801e0f0:	8812      	ldrh	r2, [r2, #0]
 801e0f2:	4293      	cmp	r3, r2
 801e0f4:	d207      	bcs.n	801e106 <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 801e0f6:	4a11      	ldr	r2, [pc, #68]	; (801e13c <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 801e0f8:	2114      	movs	r1, #20
 801e0fa:	6812      	ldr	r2, [r2, #0]
 801e0fc:	fb01 2303 	mla	r3, r1, r3, r2
 801e100:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 801e104:	4770      	bx	lr
 801e106:	490e      	ldr	r1, [pc, #56]	; (801e140 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801e108:	8809      	ldrh	r1, [r1, #0]
 801e10a:	4411      	add	r1, r2
 801e10c:	428b      	cmp	r3, r1
 801e10e:	da04      	bge.n	801e11a <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 801e110:	1a9b      	subs	r3, r3, r2
 801e112:	4a0c      	ldr	r2, [pc, #48]	; (801e144 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801e114:	210e      	movs	r1, #14
 801e116:	6812      	ldr	r2, [r2, #0]
 801e118:	e7f0      	b.n	801e0fc <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 801e11a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801e11e:	4293      	cmp	r3, r2
 801e120:	d108      	bne.n	801e134 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 801e122:	4b09      	ldr	r3, [pc, #36]	; (801e148 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801e124:	781b      	ldrb	r3, [r3, #0]
 801e126:	b91b      	cbnz	r3, 801e130 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 801e128:	4b08      	ldr	r3, [pc, #32]	; (801e14c <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801e12a:	f9b3 0000 	ldrsh.w	r0, [r3]
 801e12e:	4770      	bx	lr
 801e130:	4b07      	ldr	r3, [pc, #28]	; (801e150 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801e132:	e7fa      	b.n	801e12a <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 801e134:	2000      	movs	r0, #0
 801e136:	4770      	bx	lr
 801e138:	240261fc 	.word	0x240261fc
 801e13c:	24026204 	.word	0x24026204
 801e140:	24026200 	.word	0x24026200
 801e144:	240261e4 	.word	0x240261e4
 801e148:	24026174 	.word	0x24026174
 801e14c:	24026176 	.word	0x24026176
 801e150:	24026178 	.word	0x24026178

0801e154 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801e154:	4a12      	ldr	r2, [pc, #72]	; (801e1a0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 801e156:	8803      	ldrh	r3, [r0, #0]
 801e158:	8812      	ldrh	r2, [r2, #0]
 801e15a:	4293      	cmp	r3, r2
 801e15c:	d207      	bcs.n	801e16e <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 801e15e:	4a11      	ldr	r2, [pc, #68]	; (801e1a4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 801e160:	2114      	movs	r1, #20
 801e162:	6812      	ldr	r2, [r2, #0]
 801e164:	fb01 2303 	mla	r3, r1, r3, r2
 801e168:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 801e16c:	4770      	bx	lr
 801e16e:	490e      	ldr	r1, [pc, #56]	; (801e1a8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801e170:	8809      	ldrh	r1, [r1, #0]
 801e172:	4411      	add	r1, r2
 801e174:	428b      	cmp	r3, r1
 801e176:	da04      	bge.n	801e182 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 801e178:	1a9b      	subs	r3, r3, r2
 801e17a:	4a0c      	ldr	r2, [pc, #48]	; (801e1ac <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801e17c:	210e      	movs	r1, #14
 801e17e:	6812      	ldr	r2, [r2, #0]
 801e180:	e7f0      	b.n	801e164 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 801e182:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801e186:	4293      	cmp	r3, r2
 801e188:	d108      	bne.n	801e19c <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 801e18a:	4b09      	ldr	r3, [pc, #36]	; (801e1b0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801e18c:	781b      	ldrb	r3, [r3, #0]
 801e18e:	b91b      	cbnz	r3, 801e198 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 801e190:	4b08      	ldr	r3, [pc, #32]	; (801e1b4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801e192:	f9b3 0000 	ldrsh.w	r0, [r3]
 801e196:	4770      	bx	lr
 801e198:	4b07      	ldr	r3, [pc, #28]	; (801e1b8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801e19a:	e7fa      	b.n	801e192 <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 801e19c:	2000      	movs	r0, #0
 801e19e:	4770      	bx	lr
 801e1a0:	240261fc 	.word	0x240261fc
 801e1a4:	24026204 	.word	0x24026204
 801e1a8:	24026200 	.word	0x24026200
 801e1ac:	240261e4 	.word	0x240261e4
 801e1b0:	24026174 	.word	0x24026174
 801e1b4:	24026178 	.word	0x24026178
 801e1b8:	24026176 	.word	0x24026176

0801e1bc <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801e1bc:	4a1f      	ldr	r2, [pc, #124]	; (801e23c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>)
 801e1be:	b510      	push	{r4, lr}
 801e1c0:	880b      	ldrh	r3, [r1, #0]
 801e1c2:	8812      	ldrh	r2, [r2, #0]
 801e1c4:	4293      	cmp	r3, r2
 801e1c6:	d213      	bcs.n	801e1f0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 801e1c8:	4a1d      	ldr	r2, [pc, #116]	; (801e240 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>)
 801e1ca:	2114      	movs	r1, #20
 801e1cc:	6812      	ldr	r2, [r2, #0]
 801e1ce:	fb01 2303 	mla	r3, r1, r3, r2
 801e1d2:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801e1d6:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801e1da:	8a1a      	ldrh	r2, [r3, #16]
 801e1dc:	8a5b      	ldrh	r3, [r3, #18]
 801e1de:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801e1e2:	8004      	strh	r4, [r0, #0]
 801e1e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801e1e8:	8041      	strh	r1, [r0, #2]
 801e1ea:	8082      	strh	r2, [r0, #4]
 801e1ec:	80c3      	strh	r3, [r0, #6]
 801e1ee:	e00e      	b.n	801e20e <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 801e1f0:	4914      	ldr	r1, [pc, #80]	; (801e244 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x88>)
 801e1f2:	8809      	ldrh	r1, [r1, #0]
 801e1f4:	4411      	add	r1, r2
 801e1f6:	428b      	cmp	r3, r1
 801e1f8:	da0a      	bge.n	801e210 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x54>
 801e1fa:	1a9b      	subs	r3, r3, r2
 801e1fc:	4a12      	ldr	r2, [pc, #72]	; (801e248 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 801e1fe:	210e      	movs	r1, #14
 801e200:	6812      	ldr	r2, [r2, #0]
 801e202:	fb01 2303 	mla	r3, r1, r3, r2
 801e206:	681a      	ldr	r2, [r3, #0]
 801e208:	6002      	str	r2, [r0, #0]
 801e20a:	685a      	ldr	r2, [r3, #4]
 801e20c:	6042      	str	r2, [r0, #4]
 801e20e:	bd10      	pop	{r4, pc}
 801e210:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801e214:	4293      	cmp	r3, r2
 801e216:	d10b      	bne.n	801e230 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x74>
 801e218:	4b0c      	ldr	r3, [pc, #48]	; (801e24c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801e21a:	f9b3 1000 	ldrsh.w	r1, [r3]
 801e21e:	4b0c      	ldr	r3, [pc, #48]	; (801e250 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801e220:	8081      	strh	r1, [r0, #4]
 801e222:	f9b3 2000 	ldrsh.w	r2, [r3]
 801e226:	2300      	movs	r3, #0
 801e228:	80c2      	strh	r2, [r0, #6]
 801e22a:	8003      	strh	r3, [r0, #0]
 801e22c:	8043      	strh	r3, [r0, #2]
 801e22e:	e7ee      	b.n	801e20e <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 801e230:	2300      	movs	r3, #0
 801e232:	8003      	strh	r3, [r0, #0]
 801e234:	8043      	strh	r3, [r0, #2]
 801e236:	8083      	strh	r3, [r0, #4]
 801e238:	e7d8      	b.n	801e1ec <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 801e23a:	bf00      	nop
 801e23c:	240261fc 	.word	0x240261fc
 801e240:	24026204 	.word	0x24026204
 801e244:	24026200 	.word	0x24026200
 801e248:	240261e4 	.word	0x240261e4
 801e24c:	24026170 	.word	0x24026170
 801e250:	24026172 	.word	0x24026172

0801e254 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 801e254:	4a17      	ldr	r2, [pc, #92]	; (801e2b4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
 801e256:	8803      	ldrh	r3, [r0, #0]
 801e258:	8812      	ldrh	r2, [r2, #0]
 801e25a:	4293      	cmp	r3, r2
 801e25c:	d213      	bcs.n	801e286 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
 801e25e:	4a16      	ldr	r2, [pc, #88]	; (801e2b8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 801e260:	2114      	movs	r1, #20
 801e262:	6812      	ldr	r2, [r2, #0]
 801e264:	fb01 2303 	mla	r3, r1, r3, r2
 801e268:	8a1a      	ldrh	r2, [r3, #16]
 801e26a:	8919      	ldrh	r1, [r3, #8]
 801e26c:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801e270:	428a      	cmp	r2, r1
 801e272:	db1d      	blt.n	801e2b0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 801e274:	8a58      	ldrh	r0, [r3, #18]
 801e276:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801e27a:	895b      	ldrh	r3, [r3, #10]
 801e27c:	4298      	cmp	r0, r3
 801e27e:	bfac      	ite	ge
 801e280:	2000      	movge	r0, #0
 801e282:	2001      	movlt	r0, #1
 801e284:	4770      	bx	lr
 801e286:	490d      	ldr	r1, [pc, #52]	; (801e2bc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 801e288:	8809      	ldrh	r1, [r1, #0]
 801e28a:	4411      	add	r1, r2
 801e28c:	428b      	cmp	r3, r1
 801e28e:	da0d      	bge.n	801e2ac <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 801e290:	1a9b      	subs	r3, r3, r2
 801e292:	4a0b      	ldr	r2, [pc, #44]	; (801e2c0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 801e294:	210e      	movs	r1, #14
 801e296:	6812      	ldr	r2, [r2, #0]
 801e298:	fb01 2303 	mla	r3, r1, r3, r2
 801e29c:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801e2a0:	891a      	ldrh	r2, [r3, #8]
 801e2a2:	4291      	cmp	r1, r2
 801e2a4:	db04      	blt.n	801e2b0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 801e2a6:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801e2aa:	e7e6      	b.n	801e27a <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x26>
 801e2ac:	2000      	movs	r0, #0
 801e2ae:	4770      	bx	lr
 801e2b0:	2001      	movs	r0, #1
 801e2b2:	4770      	bx	lr
 801e2b4:	240261fc 	.word	0x240261fc
 801e2b8:	24026204 	.word	0x24026204
 801e2bc:	24026200 	.word	0x24026200
 801e2c0:	240261e4 	.word	0x240261e4

0801e2c4 <_ZNK8touchgfx6Bitmap7getDataEv>:
 801e2c4:	4a12      	ldr	r2, [pc, #72]	; (801e310 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801e2c6:	8803      	ldrh	r3, [r0, #0]
 801e2c8:	8811      	ldrh	r1, [r2, #0]
 801e2ca:	428b      	cmp	r3, r1
 801e2cc:	d20b      	bcs.n	801e2e6 <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 801e2ce:	4a11      	ldr	r2, [pc, #68]	; (801e314 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801e2d0:	6812      	ldr	r2, [r2, #0]
 801e2d2:	b112      	cbz	r2, 801e2da <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801e2d4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801e2d8:	b9c0      	cbnz	r0, 801e30c <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 801e2da:	4a0f      	ldr	r2, [pc, #60]	; (801e318 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801e2dc:	6811      	ldr	r1, [r2, #0]
 801e2de:	2214      	movs	r2, #20
 801e2e0:	4353      	muls	r3, r2
 801e2e2:	58c8      	ldr	r0, [r1, r3]
 801e2e4:	4770      	bx	lr
 801e2e6:	4a0d      	ldr	r2, [pc, #52]	; (801e31c <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801e2e8:	8812      	ldrh	r2, [r2, #0]
 801e2ea:	440a      	add	r2, r1
 801e2ec:	4293      	cmp	r3, r2
 801e2ee:	da04      	bge.n	801e2fa <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 801e2f0:	4a08      	ldr	r2, [pc, #32]	; (801e314 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801e2f2:	6812      	ldr	r2, [r2, #0]
 801e2f4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801e2f8:	4770      	bx	lr
 801e2fa:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801e2fe:	4293      	cmp	r3, r2
 801e300:	d103      	bne.n	801e30a <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801e302:	4b07      	ldr	r3, [pc, #28]	; (801e320 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801e304:	681b      	ldr	r3, [r3, #0]
 801e306:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801e308:	4770      	bx	lr
 801e30a:	2000      	movs	r0, #0
 801e30c:	4770      	bx	lr
 801e30e:	bf00      	nop
 801e310:	240261fc 	.word	0x240261fc
 801e314:	240261e0 	.word	0x240261e0
 801e318:	24026204 	.word	0x24026204
 801e31c:	24026200 	.word	0x24026200
 801e320:	2402617c 	.word	0x2402617c

0801e324 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801e324:	4b24      	ldr	r3, [pc, #144]	; (801e3b8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801e326:	8802      	ldrh	r2, [r0, #0]
 801e328:	8818      	ldrh	r0, [r3, #0]
 801e32a:	4282      	cmp	r2, r0
 801e32c:	d221      	bcs.n	801e372 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 801e32e:	4b23      	ldr	r3, [pc, #140]	; (801e3bc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801e330:	6819      	ldr	r1, [r3, #0]
 801e332:	2314      	movs	r3, #20
 801e334:	fb03 1302 	mla	r3, r3, r2, r1
 801e338:	6858      	ldr	r0, [r3, #4]
 801e33a:	2800      	cmp	r0, #0
 801e33c:	d03a      	beq.n	801e3b4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801e33e:	4920      	ldr	r1, [pc, #128]	; (801e3c0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801e340:	6809      	ldr	r1, [r1, #0]
 801e342:	2900      	cmp	r1, #0
 801e344:	d036      	beq.n	801e3b4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801e346:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801e34a:	2900      	cmp	r1, #0
 801e34c:	d032      	beq.n	801e3b4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801e34e:	891a      	ldrh	r2, [r3, #8]
 801e350:	8958      	ldrh	r0, [r3, #10]
 801e352:	4350      	muls	r0, r2
 801e354:	7c5a      	ldrb	r2, [r3, #17]
 801e356:	7cdb      	ldrb	r3, [r3, #19]
 801e358:	0952      	lsrs	r2, r2, #5
 801e35a:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801e35e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801e362:	2b0b      	cmp	r3, #11
 801e364:	bf18      	it	ne
 801e366:	0040      	lslne	r0, r0, #1
 801e368:	3003      	adds	r0, #3
 801e36a:	f020 0003 	bic.w	r0, r0, #3
 801e36e:	4408      	add	r0, r1
 801e370:	4770      	bx	lr
 801e372:	4b14      	ldr	r3, [pc, #80]	; (801e3c4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801e374:	881b      	ldrh	r3, [r3, #0]
 801e376:	4403      	add	r3, r0
 801e378:	429a      	cmp	r2, r3
 801e37a:	da1a      	bge.n	801e3b2 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801e37c:	4b12      	ldr	r3, [pc, #72]	; (801e3c8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801e37e:	1a10      	subs	r0, r2, r0
 801e380:	210e      	movs	r1, #14
 801e382:	681b      	ldr	r3, [r3, #0]
 801e384:	fb01 3000 	mla	r0, r1, r0, r3
 801e388:	7b03      	ldrb	r3, [r0, #12]
 801e38a:	f003 031f 	and.w	r3, r3, #31
 801e38e:	2b0b      	cmp	r3, #11
 801e390:	d10b      	bne.n	801e3aa <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 801e392:	8903      	ldrh	r3, [r0, #8]
 801e394:	8940      	ldrh	r0, [r0, #10]
 801e396:	4358      	muls	r0, r3
 801e398:	4b09      	ldr	r3, [pc, #36]	; (801e3c0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801e39a:	3003      	adds	r0, #3
 801e39c:	6819      	ldr	r1, [r3, #0]
 801e39e:	f020 0303 	bic.w	r3, r0, #3
 801e3a2:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801e3a6:	4418      	add	r0, r3
 801e3a8:	4770      	bx	lr
 801e3aa:	2b0d      	cmp	r3, #13
 801e3ac:	d101      	bne.n	801e3b2 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801e3ae:	300d      	adds	r0, #13
 801e3b0:	4770      	bx	lr
 801e3b2:	2000      	movs	r0, #0
 801e3b4:	4770      	bx	lr
 801e3b6:	bf00      	nop
 801e3b8:	240261fc 	.word	0x240261fc
 801e3bc:	24026204 	.word	0x24026204
 801e3c0:	240261e0 	.word	0x240261e0
 801e3c4:	24026200 	.word	0x24026200
 801e3c8:	240261e4 	.word	0x240261e4

0801e3cc <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801e3cc:	4a17      	ldr	r2, [pc, #92]	; (801e42c <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 801e3ce:	b510      	push	{r4, lr}
 801e3d0:	8803      	ldrh	r3, [r0, #0]
 801e3d2:	8812      	ldrh	r2, [r2, #0]
 801e3d4:	4293      	cmp	r3, r2
 801e3d6:	d20c      	bcs.n	801e3f2 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801e3d8:	4a15      	ldr	r2, [pc, #84]	; (801e430 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 801e3da:	2114      	movs	r1, #20
 801e3dc:	6812      	ldr	r2, [r2, #0]
 801e3de:	fb01 2303 	mla	r3, r1, r3, r2
 801e3e2:	7c58      	ldrb	r0, [r3, #17]
 801e3e4:	0942      	lsrs	r2, r0, #5
 801e3e6:	7cd8      	ldrb	r0, [r3, #19]
 801e3e8:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801e3ec:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801e3f0:	bd10      	pop	{r4, pc}
 801e3f2:	4910      	ldr	r1, [pc, #64]	; (801e434 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801e3f4:	8809      	ldrh	r1, [r1, #0]
 801e3f6:	4411      	add	r1, r2
 801e3f8:	428b      	cmp	r3, r1
 801e3fa:	da09      	bge.n	801e410 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801e3fc:	1a9b      	subs	r3, r3, r2
 801e3fe:	4a0e      	ldr	r2, [pc, #56]	; (801e438 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801e400:	210e      	movs	r1, #14
 801e402:	6812      	ldr	r2, [r2, #0]
 801e404:	fb01 2303 	mla	r3, r1, r3, r2
 801e408:	7b18      	ldrb	r0, [r3, #12]
 801e40a:	f000 001f 	and.w	r0, r0, #31
 801e40e:	e7ef      	b.n	801e3f0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 801e410:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801e414:	4293      	cmp	r3, r2
 801e416:	d106      	bne.n	801e426 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 801e418:	f7e5 fd64 	bl	8003ee4 <_ZN8touchgfx3HAL3lcdEv>
 801e41c:	6803      	ldr	r3, [r0, #0]
 801e41e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e424:	4718      	bx	r3
 801e426:	2000      	movs	r0, #0
 801e428:	e7e2      	b.n	801e3f0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 801e42a:	bf00      	nop
 801e42c:	240261fc 	.word	0x240261fc
 801e430:	24026204 	.word	0x24026204
 801e434:	24026200 	.word	0x24026200
 801e438:	240261e4 	.word	0x240261e4

0801e43c <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 801e43c:	2018      	movs	r0, #24
 801e43e:	4770      	bx	lr

0801e440 <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 801e440:	2001      	movs	r0, #1
 801e442:	4770      	bx	lr

0801e444 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 801e444:	4b02      	ldr	r3, [pc, #8]	; (801e450 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0xc>)
 801e446:	8818      	ldrh	r0, [r3, #0]
 801e448:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801e44c:	b280      	uxth	r0, r0
 801e44e:	4770      	bx	lr
 801e450:	24026176 	.word	0x24026176

0801e454 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801e454:	2bff      	cmp	r3, #255	; 0xff
 801e456:	d040      	beq.n	801e4da <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x86>
 801e458:	2a2c      	cmp	r2, #44	; 0x2c
 801e45a:	d02a      	beq.n	801e4b2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5e>
 801e45c:	d80f      	bhi.n	801e47e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2a>
 801e45e:	2a08      	cmp	r2, #8
 801e460:	d037      	beq.n	801e4d2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801e462:	d805      	bhi.n	801e470 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1c>
 801e464:	2a04      	cmp	r2, #4
 801e466:	d032      	beq.n	801e4ce <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7a>
 801e468:	2a05      	cmp	r2, #5
 801e46a:	d02e      	beq.n	801e4ca <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 801e46c:	2000      	movs	r0, #0
 801e46e:	4770      	bx	lr
 801e470:	2a0a      	cmp	r2, #10
 801e472:	d02e      	beq.n	801e4d2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801e474:	d301      	bcc.n	801e47a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x26>
 801e476:	2a0b      	cmp	r2, #11
 801e478:	d1f8      	bne.n	801e46c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801e47a:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801e47c:	4770      	bx	lr
 801e47e:	2a30      	cmp	r2, #48	; 0x30
 801e480:	d029      	beq.n	801e4d6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 801e482:	d808      	bhi.n	801e496 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x42>
 801e484:	2a2e      	cmp	r2, #46	; 0x2e
 801e486:	684b      	ldr	r3, [r1, #4]
 801e488:	d01a      	beq.n	801e4c0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 801e48a:	d90b      	bls.n	801e4a4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x50>
 801e48c:	781b      	ldrb	r3, [r3, #0]
 801e48e:	2b00      	cmp	r3, #0
 801e490:	d1ec      	bne.n	801e46c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801e492:	6a00      	ldr	r0, [r0, #32]
 801e494:	4770      	bx	lr
 801e496:	2a32      	cmp	r2, #50	; 0x32
 801e498:	d01d      	beq.n	801e4d6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 801e49a:	d301      	bcc.n	801e4a0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4c>
 801e49c:	2a33      	cmp	r2, #51	; 0x33
 801e49e:	d1e5      	bne.n	801e46c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801e4a0:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801e4a2:	4770      	bx	lr
 801e4a4:	781b      	ldrb	r3, [r3, #0]
 801e4a6:	2b00      	cmp	r3, #0
 801e4a8:	d0f3      	beq.n	801e492 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x3e>
 801e4aa:	2b01      	cmp	r3, #1
 801e4ac:	d1de      	bne.n	801e46c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801e4ae:	6900      	ldr	r0, [r0, #16]
 801e4b0:	4770      	bx	lr
 801e4b2:	684b      	ldr	r3, [r1, #4]
 801e4b4:	781b      	ldrb	r3, [r3, #0]
 801e4b6:	b133      	cbz	r3, 801e4c6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 801e4b8:	2b01      	cmp	r3, #1
 801e4ba:	d1d7      	bne.n	801e46c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801e4bc:	6880      	ldr	r0, [r0, #8]
 801e4be:	4770      	bx	lr
 801e4c0:	781b      	ldrb	r3, [r3, #0]
 801e4c2:	2b00      	cmp	r3, #0
 801e4c4:	d1d2      	bne.n	801e46c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801e4c6:	6980      	ldr	r0, [r0, #24]
 801e4c8:	4770      	bx	lr
 801e4ca:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801e4cc:	4770      	bx	lr
 801e4ce:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801e4d0:	4770      	bx	lr
 801e4d2:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801e4d4:	4770      	bx	lr
 801e4d6:	6c80      	ldr	r0, [r0, #72]	; 0x48
 801e4d8:	4770      	bx	lr
 801e4da:	2a2c      	cmp	r2, #44	; 0x2c
 801e4dc:	d02a      	beq.n	801e534 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe0>
 801e4de:	d80f      	bhi.n	801e500 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xac>
 801e4e0:	2a08      	cmp	r2, #8
 801e4e2:	d035      	beq.n	801e550 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfc>
 801e4e4:	d805      	bhi.n	801e4f2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801e4e6:	2a04      	cmp	r2, #4
 801e4e8:	d030      	beq.n	801e54c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf8>
 801e4ea:	2a05      	cmp	r2, #5
 801e4ec:	d1be      	bne.n	801e46c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801e4ee:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801e4f0:	4770      	bx	lr
 801e4f2:	2a0a      	cmp	r2, #10
 801e4f4:	d02c      	beq.n	801e550 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfc>
 801e4f6:	d301      	bcc.n	801e4fc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa8>
 801e4f8:	2a0b      	cmp	r2, #11
 801e4fa:	d1b7      	bne.n	801e46c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801e4fc:	6c40      	ldr	r0, [r0, #68]	; 0x44
 801e4fe:	4770      	bx	lr
 801e500:	2a30      	cmp	r2, #48	; 0x30
 801e502:	d027      	beq.n	801e554 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x100>
 801e504:	d808      	bhi.n	801e518 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc4>
 801e506:	2a2e      	cmp	r2, #46	; 0x2e
 801e508:	684b      	ldr	r3, [r1, #4]
 801e50a:	d01a      	beq.n	801e542 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xee>
 801e50c:	d90b      	bls.n	801e526 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xd2>
 801e50e:	781b      	ldrb	r3, [r3, #0]
 801e510:	2b00      	cmp	r3, #0
 801e512:	d1ab      	bne.n	801e46c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801e514:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801e516:	4770      	bx	lr
 801e518:	2a32      	cmp	r2, #50	; 0x32
 801e51a:	d01b      	beq.n	801e554 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x100>
 801e51c:	d301      	bcc.n	801e522 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xce>
 801e51e:	2a33      	cmp	r2, #51	; 0x33
 801e520:	d1a4      	bne.n	801e46c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801e522:	6d40      	ldr	r0, [r0, #84]	; 0x54
 801e524:	4770      	bx	lr
 801e526:	781b      	ldrb	r3, [r3, #0]
 801e528:	2b00      	cmp	r3, #0
 801e52a:	d0f3      	beq.n	801e514 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc0>
 801e52c:	2b01      	cmp	r3, #1
 801e52e:	d19d      	bne.n	801e46c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801e530:	6940      	ldr	r0, [r0, #20]
 801e532:	4770      	bx	lr
 801e534:	684b      	ldr	r3, [r1, #4]
 801e536:	781b      	ldrb	r3, [r3, #0]
 801e538:	b133      	cbz	r3, 801e548 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf4>
 801e53a:	2b01      	cmp	r3, #1
 801e53c:	d196      	bne.n	801e46c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801e53e:	68c0      	ldr	r0, [r0, #12]
 801e540:	4770      	bx	lr
 801e542:	781b      	ldrb	r3, [r3, #0]
 801e544:	2b00      	cmp	r3, #0
 801e546:	d191      	bne.n	801e46c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801e548:	69c0      	ldr	r0, [r0, #28]
 801e54a:	4770      	bx	lr
 801e54c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801e54e:	4770      	bx	lr
 801e550:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801e552:	4770      	bx	lr
 801e554:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 801e556:	4770      	bx	lr

0801e558 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e55c:	b085      	sub	sp, #20
 801e55e:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801e560:	9203      	str	r2, [sp, #12]
 801e562:	6870      	ldr	r0, [r6, #4]
 801e564:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801e568:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 801e56c:	9101      	str	r1, [sp, #4]
 801e56e:	fa1f f885 	uxth.w	r8, r5
 801e572:	43ed      	mvns	r5, r5
 801e574:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801e578:	b2ed      	uxtb	r5, r5
 801e57a:	fb00 2404 	mla	r4, r0, r4, r2
 801e57e:	6832      	ldr	r2, [r6, #0]
 801e580:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801e584:	4414      	add	r4, r2
 801e586:	f8dc 2000 	ldr.w	r2, [ip]
 801e58a:	9202      	str	r2, [sp, #8]
 801e58c:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801e590:	f102 0e04 	add.w	lr, r2, #4
 801e594:	9a01      	ldr	r2, [sp, #4]
 801e596:	2a00      	cmp	r2, #0
 801e598:	dc03      	bgt.n	801e5a2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801e59a:	9a03      	ldr	r2, [sp, #12]
 801e59c:	2a00      	cmp	r2, #0
 801e59e:	f340 8116 	ble.w	801e7ce <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801e5a2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e5a4:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 801e5a8:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801e5ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801e5ae:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 801e5b2:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801e5b6:	2b00      	cmp	r3, #0
 801e5b8:	dd0e      	ble.n	801e5d8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801e5ba:	1406      	asrs	r6, r0, #16
 801e5bc:	d405      	bmi.n	801e5ca <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e5be:	4556      	cmp	r6, sl
 801e5c0:	da03      	bge.n	801e5ca <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e5c2:	1416      	asrs	r6, r2, #16
 801e5c4:	d401      	bmi.n	801e5ca <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e5c6:	454e      	cmp	r6, r9
 801e5c8:	db07      	blt.n	801e5da <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801e5ca:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801e5cc:	3b01      	subs	r3, #1
 801e5ce:	3403      	adds	r4, #3
 801e5d0:	4430      	add	r0, r6
 801e5d2:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801e5d4:	4432      	add	r2, r6
 801e5d6:	e7ee      	b.n	801e5b6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801e5d8:	d063      	beq.n	801e6a2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801e5da:	1e5e      	subs	r6, r3, #1
 801e5dc:	9f11      	ldr	r7, [sp, #68]	; 0x44
 801e5de:	fb07 0706 	mla	r7, r7, r6, r0
 801e5e2:	143f      	asrs	r7, r7, #16
 801e5e4:	d454      	bmi.n	801e690 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801e5e6:	4557      	cmp	r7, sl
 801e5e8:	da52      	bge.n	801e690 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801e5ea:	9f12      	ldr	r7, [sp, #72]	; 0x48
 801e5ec:	fb07 2606 	mla	r6, r7, r6, r2
 801e5f0:	1436      	asrs	r6, r6, #16
 801e5f2:	d44d      	bmi.n	801e690 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801e5f4:	454e      	cmp	r6, r9
 801e5f6:	da4b      	bge.n	801e690 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801e5f8:	1ce6      	adds	r6, r4, #3
 801e5fa:	4699      	mov	r9, r3
 801e5fc:	f1b9 0f00 	cmp.w	r9, #0
 801e600:	f106 0603 	add.w	r6, r6, #3
 801e604:	dd48      	ble.n	801e698 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 801e606:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 801e60a:	1417      	asrs	r7, r2, #16
 801e60c:	9902      	ldr	r1, [sp, #8]
 801e60e:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801e612:	f109 39ff 	add.w	r9, r9, #4294967295
 801e616:	fb0b 1707 	mla	r7, fp, r7, r1
 801e61a:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801e61e:	9911      	ldr	r1, [sp, #68]	; 0x44
 801e620:	f817 700a 	ldrb.w	r7, [r7, sl]
 801e624:	fb1b fb05 	smulbb	fp, fp, r5
 801e628:	4408      	add	r0, r1
 801e62a:	9912      	ldr	r1, [sp, #72]	; 0x48
 801e62c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801e630:	440a      	add	r2, r1
 801e632:	eb0e 0a07 	add.w	sl, lr, r7
 801e636:	f81e 7007 	ldrb.w	r7, [lr, r7]
 801e63a:	fb07 b708 	mla	r7, r7, r8, fp
 801e63e:	b2bf      	uxth	r7, r7
 801e640:	f107 0b01 	add.w	fp, r7, #1
 801e644:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801e648:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801e64c:	fb1b fb05 	smulbb	fp, fp, r5
 801e650:	123f      	asrs	r7, r7, #8
 801e652:	f806 7c06 	strb.w	r7, [r6, #-6]
 801e656:	f89a 7001 	ldrb.w	r7, [sl, #1]
 801e65a:	fb07 b708 	mla	r7, r7, r8, fp
 801e65e:	b2bf      	uxth	r7, r7
 801e660:	f107 0b01 	add.w	fp, r7, #1
 801e664:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801e668:	123f      	asrs	r7, r7, #8
 801e66a:	f806 7c05 	strb.w	r7, [r6, #-5]
 801e66e:	f89a 7002 	ldrb.w	r7, [sl, #2]
 801e672:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801e676:	fb1a fa05 	smulbb	sl, sl, r5
 801e67a:	fb07 a708 	mla	r7, r7, r8, sl
 801e67e:	b2bf      	uxth	r7, r7
 801e680:	f107 0a01 	add.w	sl, r7, #1
 801e684:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801e688:	123f      	asrs	r7, r7, #8
 801e68a:	f806 7c04 	strb.w	r7, [r6, #-4]
 801e68e:	e7b5      	b.n	801e5fc <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 801e690:	2700      	movs	r7, #0
 801e692:	1bde      	subs	r6, r3, r7
 801e694:	2e00      	cmp	r6, #0
 801e696:	dc42      	bgt.n	801e71e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 801e698:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e69c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e6a0:	441c      	add	r4, r3
 801e6a2:	9b01      	ldr	r3, [sp, #4]
 801e6a4:	2b00      	cmp	r3, #0
 801e6a6:	f340 8092 	ble.w	801e7ce <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801e6aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e6ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e6b0:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e6b4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e6b8:	eef0 6a62 	vmov.f32	s13, s5
 801e6bc:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e6c0:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e6c4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e6c8:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 801e6cc:	eef0 6a43 	vmov.f32	s13, s6
 801e6d0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e6d4:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 801e6d8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e6dc:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e6e0:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e6e4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e6e8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e6ec:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e6f0:	ee12 2a90 	vmov	r2, s5
 801e6f4:	eef0 2a47 	vmov.f32	s5, s14
 801e6f8:	fb92 f3f3 	sdiv	r3, r2, r3
 801e6fc:	ee13 2a10 	vmov	r2, s6
 801e700:	9311      	str	r3, [sp, #68]	; 0x44
 801e702:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e704:	eeb0 3a67 	vmov.f32	s6, s15
 801e708:	fb92 f3f3 	sdiv	r3, r2, r3
 801e70c:	9312      	str	r3, [sp, #72]	; 0x48
 801e70e:	9b01      	ldr	r3, [sp, #4]
 801e710:	9a03      	ldr	r2, [sp, #12]
 801e712:	3b01      	subs	r3, #1
 801e714:	9301      	str	r3, [sp, #4]
 801e716:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e718:	bf08      	it	eq
 801e71a:	4613      	moveq	r3, r2
 801e71c:	e73a      	b.n	801e594 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801e71e:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801e722:	d44e      	bmi.n	801e7c2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801e724:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801e728:	4556      	cmp	r6, sl
 801e72a:	dd4a      	ble.n	801e7c2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801e72c:	ea5f 4b22 	movs.w	fp, r2, asr #16
 801e730:	d447      	bmi.n	801e7c2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801e732:	f8dc 100c 	ldr.w	r1, [ip, #12]
 801e736:	4559      	cmp	r1, fp
 801e738:	dd43      	ble.n	801e7c2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801e73a:	fa0f f986 	sxth.w	r9, r6
 801e73e:	9902      	ldr	r1, [sp, #8]
 801e740:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801e744:	fb0b 1909 	mla	r9, fp, r9, r1
 801e748:	f814 b006 	ldrb.w	fp, [r4, r6]
 801e74c:	f819 900a 	ldrb.w	r9, [r9, sl]
 801e750:	fb1b fb05 	smulbb	fp, fp, r5
 801e754:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801e758:	eb0e 0a09 	add.w	sl, lr, r9
 801e75c:	f81e 9009 	ldrb.w	r9, [lr, r9]
 801e760:	fb09 b908 	mla	r9, r9, r8, fp
 801e764:	fa1f f989 	uxth.w	r9, r9
 801e768:	f109 0b01 	add.w	fp, r9, #1
 801e76c:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801e770:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e774:	f804 9006 	strb.w	r9, [r4, r6]
 801e778:	4426      	add	r6, r4
 801e77a:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801e77e:	f896 b001 	ldrb.w	fp, [r6, #1]
 801e782:	fb1b fb05 	smulbb	fp, fp, r5
 801e786:	fb09 b908 	mla	r9, r9, r8, fp
 801e78a:	fa1f f989 	uxth.w	r9, r9
 801e78e:	f109 0b01 	add.w	fp, r9, #1
 801e792:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801e796:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e79a:	f886 9001 	strb.w	r9, [r6, #1]
 801e79e:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801e7a2:	f896 a002 	ldrb.w	sl, [r6, #2]
 801e7a6:	fb1a fa05 	smulbb	sl, sl, r5
 801e7aa:	fb09 a908 	mla	r9, r9, r8, sl
 801e7ae:	fa1f f989 	uxth.w	r9, r9
 801e7b2:	f109 0a01 	add.w	sl, r9, #1
 801e7b6:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801e7ba:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e7be:	f886 9002 	strb.w	r9, [r6, #2]
 801e7c2:	9911      	ldr	r1, [sp, #68]	; 0x44
 801e7c4:	3701      	adds	r7, #1
 801e7c6:	4408      	add	r0, r1
 801e7c8:	9912      	ldr	r1, [sp, #72]	; 0x48
 801e7ca:	440a      	add	r2, r1
 801e7cc:	e761      	b.n	801e692 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801e7ce:	b005      	add	sp, #20
 801e7d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e7d4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e7d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e7d8:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801e7da:	4693      	mov	fp, r2
 801e7dc:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801e7de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e7e2:	6868      	ldr	r0, [r5, #4]
 801e7e4:	6877      	ldr	r7, [r6, #4]
 801e7e6:	9100      	str	r1, [sp, #0]
 801e7e8:	3704      	adds	r7, #4
 801e7ea:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801e7ee:	e9dd 8e0f 	ldrd	r8, lr, [sp, #60]	; 0x3c
 801e7f2:	fb00 2404 	mla	r4, r0, r4, r2
 801e7f6:	682a      	ldr	r2, [r5, #0]
 801e7f8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801e7fc:	4414      	add	r4, r2
 801e7fe:	6832      	ldr	r2, [r6, #0]
 801e800:	9201      	str	r2, [sp, #4]
 801e802:	9a00      	ldr	r2, [sp, #0]
 801e804:	2a00      	cmp	r2, #0
 801e806:	dc03      	bgt.n	801e810 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801e808:	f1bb 0f00 	cmp.w	fp, #0
 801e80c:	f340 80bc 	ble.w	801e988 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801e810:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801e812:	f9b6 a008 	ldrsh.w	sl, [r6, #8]
 801e816:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801e81a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e81c:	f9b6 900c 	ldrsh.w	r9, [r6, #12]
 801e820:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801e824:	2b00      	cmp	r3, #0
 801e826:	dd0c      	ble.n	801e842 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801e828:	1405      	asrs	r5, r0, #16
 801e82a:	d405      	bmi.n	801e838 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801e82c:	4555      	cmp	r5, sl
 801e82e:	da03      	bge.n	801e838 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801e830:	1415      	asrs	r5, r2, #16
 801e832:	d401      	bmi.n	801e838 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801e834:	454d      	cmp	r5, r9
 801e836:	db05      	blt.n	801e844 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801e838:	4440      	add	r0, r8
 801e83a:	4472      	add	r2, lr
 801e83c:	3b01      	subs	r3, #1
 801e83e:	3403      	adds	r4, #3
 801e840:	e7f0      	b.n	801e824 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801e842:	d03f      	beq.n	801e8c4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf0>
 801e844:	1e5d      	subs	r5, r3, #1
 801e846:	fb08 0c05 	mla	ip, r8, r5, r0
 801e84a:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 801e84e:	d42e      	bmi.n	801e8ae <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801e850:	45d4      	cmp	ip, sl
 801e852:	da2c      	bge.n	801e8ae <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801e854:	fb0e 2505 	mla	r5, lr, r5, r2
 801e858:	142d      	asrs	r5, r5, #16
 801e85a:	d428      	bmi.n	801e8ae <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801e85c:	454d      	cmp	r5, r9
 801e85e:	da26      	bge.n	801e8ae <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801e860:	1ce5      	adds	r5, r4, #3
 801e862:	469c      	mov	ip, r3
 801e864:	f1bc 0f00 	cmp.w	ip, #0
 801e868:	f105 0503 	add.w	r5, r5, #3
 801e86c:	dd25      	ble.n	801e8ba <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 801e86e:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 801e872:	ea4f 4922 	mov.w	r9, r2, asr #16
 801e876:	f10c 3cff 	add.w	ip, ip, #4294967295
 801e87a:	4472      	add	r2, lr
 801e87c:	468a      	mov	sl, r1
 801e87e:	9901      	ldr	r1, [sp, #4]
 801e880:	fb0a 1909 	mla	r9, sl, r9, r1
 801e884:	1401      	asrs	r1, r0, #16
 801e886:	4440      	add	r0, r8
 801e888:	f819 9001 	ldrb.w	r9, [r9, r1]
 801e88c:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801e890:	eb07 0a09 	add.w	sl, r7, r9
 801e894:	f817 9009 	ldrb.w	r9, [r7, r9]
 801e898:	f805 9c06 	strb.w	r9, [r5, #-6]
 801e89c:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801e8a0:	f805 9c05 	strb.w	r9, [r5, #-5]
 801e8a4:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801e8a8:	f805 9c04 	strb.w	r9, [r5, #-4]
 801e8ac:	e7da      	b.n	801e864 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801e8ae:	2500      	movs	r5, #0
 801e8b0:	eba3 0c05 	sub.w	ip, r3, r5
 801e8b4:	f1bc 0f00 	cmp.w	ip, #0
 801e8b8:	dc3b      	bgt.n	801e932 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801e8ba:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e8be:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e8c2:	441c      	add	r4, r3
 801e8c4:	9b00      	ldr	r3, [sp, #0]
 801e8c6:	2b00      	cmp	r3, #0
 801e8c8:	dd5e      	ble.n	801e988 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801e8ca:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e8ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e8d0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e8d4:	eeb0 6a62 	vmov.f32	s12, s5
 801e8d8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e8dc:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e8e0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e8e4:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801e8e8:	eeb0 6a43 	vmov.f32	s12, s6
 801e8ec:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e8f0:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 801e8f4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e8f8:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e8fc:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e900:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e904:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e908:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e90c:	ee12 2a90 	vmov	r2, s5
 801e910:	eef0 2a47 	vmov.f32	s5, s14
 801e914:	fb92 f8f3 	sdiv	r8, r2, r3
 801e918:	ee13 2a10 	vmov	r2, s6
 801e91c:	eeb0 3a67 	vmov.f32	s6, s15
 801e920:	fb92 fef3 	sdiv	lr, r2, r3
 801e924:	9b00      	ldr	r3, [sp, #0]
 801e926:	3b01      	subs	r3, #1
 801e928:	9300      	str	r3, [sp, #0]
 801e92a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e92c:	bf08      	it	eq
 801e92e:	465b      	moveq	r3, fp
 801e930:	e767      	b.n	801e802 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801e932:	ea5f 4920 	movs.w	r9, r0, asr #16
 801e936:	d423      	bmi.n	801e980 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801e938:	f8d6 c008 	ldr.w	ip, [r6, #8]
 801e93c:	45cc      	cmp	ip, r9
 801e93e:	dd1f      	ble.n	801e980 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801e940:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801e944:	d41c      	bmi.n	801e980 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801e946:	68f1      	ldr	r1, [r6, #12]
 801e948:	4551      	cmp	r1, sl
 801e94a:	dd19      	ble.n	801e980 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801e94c:	fa0f fc8c 	sxth.w	ip, ip
 801e950:	9901      	ldr	r1, [sp, #4]
 801e952:	fb0a 1c0c 	mla	ip, sl, ip, r1
 801e956:	f81c c009 	ldrb.w	ip, [ip, r9]
 801e95a:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801e95e:	f817 a00c 	ldrb.w	sl, [r7, ip]
 801e962:	eb07 090c 	add.w	r9, r7, ip
 801e966:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 801e96a:	f804 a00c 	strb.w	sl, [r4, ip]
 801e96e:	44a4      	add	ip, r4
 801e970:	f899 a001 	ldrb.w	sl, [r9, #1]
 801e974:	f88c a001 	strb.w	sl, [ip, #1]
 801e978:	f899 9002 	ldrb.w	r9, [r9, #2]
 801e97c:	f88c 9002 	strb.w	r9, [ip, #2]
 801e980:	4440      	add	r0, r8
 801e982:	4472      	add	r2, lr
 801e984:	3501      	adds	r5, #1
 801e986:	e793      	b.n	801e8b0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xdc>
 801e988:	b003      	add	sp, #12
 801e98a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e98e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e98e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e992:	b085      	sub	sp, #20
 801e994:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e998:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801e99a:	9202      	str	r2, [sp, #8]
 801e99c:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801e9a0:	6860      	ldr	r0, [r4, #4]
 801e9a2:	9203      	str	r2, [sp, #12]
 801e9a4:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801e9a8:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 801e9ac:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801e9b0:	fb00 2505 	mla	r5, r0, r5, r2
 801e9b4:	6822      	ldr	r2, [r4, #0]
 801e9b6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e9ba:	4415      	add	r5, r2
 801e9bc:	f8dc 2000 	ldr.w	r2, [ip]
 801e9c0:	9200      	str	r2, [sp, #0]
 801e9c2:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801e9c6:	3204      	adds	r2, #4
 801e9c8:	9201      	str	r2, [sp, #4]
 801e9ca:	2900      	cmp	r1, #0
 801e9cc:	dc03      	bgt.n	801e9d6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801e9ce:	9a02      	ldr	r2, [sp, #8]
 801e9d0:	2a00      	cmp	r2, #0
 801e9d2:	f340 8127 	ble.w	801ec24 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801e9d6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e9d8:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801e9dc:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801e9e0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801e9e2:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801e9e6:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801e9ea:	2b00      	cmp	r3, #0
 801e9ec:	dd0d      	ble.n	801ea0a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801e9ee:	1422      	asrs	r2, r4, #16
 801e9f0:	d405      	bmi.n	801e9fe <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801e9f2:	4542      	cmp	r2, r8
 801e9f4:	da03      	bge.n	801e9fe <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801e9f6:	1402      	asrs	r2, r0, #16
 801e9f8:	d401      	bmi.n	801e9fe <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801e9fa:	42ba      	cmp	r2, r7
 801e9fc:	db06      	blt.n	801ea0c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801e9fe:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ea00:	4474      	add	r4, lr
 801ea02:	3b01      	subs	r3, #1
 801ea04:	3503      	adds	r5, #3
 801ea06:	4410      	add	r0, r2
 801ea08:	e7ef      	b.n	801e9ea <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801ea0a:	d075      	beq.n	801eaf8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 801ea0c:	1e5a      	subs	r2, r3, #1
 801ea0e:	fb0e 4602 	mla	r6, lr, r2, r4
 801ea12:	1436      	asrs	r6, r6, #16
 801ea14:	d465      	bmi.n	801eae2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801ea16:	4546      	cmp	r6, r8
 801ea18:	da63      	bge.n	801eae2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801ea1a:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801ea1c:	fb06 0202 	mla	r2, r6, r2, r0
 801ea20:	1412      	asrs	r2, r2, #16
 801ea22:	d45e      	bmi.n	801eae2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801ea24:	42ba      	cmp	r2, r7
 801ea26:	da5c      	bge.n	801eae2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801ea28:	1cef      	adds	r7, r5, #3
 801ea2a:	4699      	mov	r9, r3
 801ea2c:	f1b9 0f00 	cmp.w	r9, #0
 801ea30:	dd5d      	ble.n	801eaee <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 801ea32:	1402      	asrs	r2, r0, #16
 801ea34:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801ea38:	1426      	asrs	r6, r4, #16
 801ea3a:	4692      	mov	sl, r2
 801ea3c:	9a00      	ldr	r2, [sp, #0]
 801ea3e:	fb08 220a 	mla	r2, r8, sl, r2
 801ea42:	5d92      	ldrb	r2, [r2, r6]
 801ea44:	9e01      	ldr	r6, [sp, #4]
 801ea46:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 801ea4a:	ea5f 6816 	movs.w	r8, r6, lsr #24
 801ea4e:	d041      	beq.n	801ead4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801ea50:	9a03      	ldr	r2, [sp, #12]
 801ea52:	fa5f fb86 	uxtb.w	fp, r6
 801ea56:	fb02 f808 	mul.w	r8, r2, r8
 801ea5a:	f108 0201 	add.w	r2, r8, #1
 801ea5e:	eb02 2228 	add.w	r2, r2, r8, asr #8
 801ea62:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 801ea66:	1212      	asrs	r2, r2, #8
 801ea68:	fa1f fa82 	uxth.w	sl, r2
 801ea6c:	43d2      	mvns	r2, r2
 801ea6e:	fb1b fb0a 	smulbb	fp, fp, sl
 801ea72:	b2d2      	uxtb	r2, r2
 801ea74:	fb08 b802 	mla	r8, r8, r2, fp
 801ea78:	fa1f f888 	uxth.w	r8, r8
 801ea7c:	f108 0b01 	add.w	fp, r8, #1
 801ea80:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801ea84:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801ea88:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801ea8c:	fb1b fb0a 	smulbb	fp, fp, sl
 801ea90:	ea4f 2828 	mov.w	r8, r8, asr #8
 801ea94:	fb16 fa0a 	smulbb	sl, r6, sl
 801ea98:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801ea9c:	f807 8c03 	strb.w	r8, [r7, #-3]
 801eaa0:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 801eaa4:	fb06 aa02 	mla	sl, r6, r2, sl
 801eaa8:	fb08 b802 	mla	r8, r8, r2, fp
 801eaac:	fa1f fa8a 	uxth.w	sl, sl
 801eab0:	fa1f f888 	uxth.w	r8, r8
 801eab4:	f10a 0601 	add.w	r6, sl, #1
 801eab8:	f108 0b01 	add.w	fp, r8, #1
 801eabc:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801eac0:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801eac4:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801eac8:	ea4f 2828 	mov.w	r8, r8, asr #8
 801eacc:	f807 ac01 	strb.w	sl, [r7, #-1]
 801ead0:	f807 8c02 	strb.w	r8, [r7, #-2]
 801ead4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ead6:	4474      	add	r4, lr
 801ead8:	3703      	adds	r7, #3
 801eada:	f109 39ff 	add.w	r9, r9, #4294967295
 801eade:	4410      	add	r0, r2
 801eae0:	e7a4      	b.n	801ea2c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801eae2:	f04f 0800 	mov.w	r8, #0
 801eae6:	eba3 0208 	sub.w	r2, r3, r8
 801eaea:	2a00      	cmp	r2, #0
 801eaec:	dc3b      	bgt.n	801eb66 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 801eaee:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801eaf2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801eaf6:	441d      	add	r5, r3
 801eaf8:	2900      	cmp	r1, #0
 801eafa:	f340 8093 	ble.w	801ec24 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801eafe:	ee30 0a04 	vadd.f32	s0, s0, s8
 801eb02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801eb04:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801eb08:	3901      	subs	r1, #1
 801eb0a:	eeb0 6a62 	vmov.f32	s12, s5
 801eb0e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801eb12:	ee31 1a05 	vadd.f32	s2, s2, s10
 801eb16:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801eb1a:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801eb1e:	eeb0 6a43 	vmov.f32	s12, s6
 801eb22:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801eb26:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801eb2a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801eb2e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801eb32:	ee77 2a62 	vsub.f32	s5, s14, s5
 801eb36:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801eb3a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801eb3e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801eb42:	ee12 2a90 	vmov	r2, s5
 801eb46:	eef0 2a47 	vmov.f32	s5, s14
 801eb4a:	fb92 fef3 	sdiv	lr, r2, r3
 801eb4e:	ee13 2a10 	vmov	r2, s6
 801eb52:	eeb0 3a67 	vmov.f32	s6, s15
 801eb56:	fb92 f3f3 	sdiv	r3, r2, r3
 801eb5a:	9a02      	ldr	r2, [sp, #8]
 801eb5c:	9312      	str	r3, [sp, #72]	; 0x48
 801eb5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801eb60:	bf08      	it	eq
 801eb62:	4613      	moveq	r3, r2
 801eb64:	e731      	b.n	801e9ca <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801eb66:	1427      	asrs	r7, r4, #16
 801eb68:	d456      	bmi.n	801ec18 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801eb6a:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801eb6e:	42be      	cmp	r6, r7
 801eb70:	dd52      	ble.n	801ec18 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801eb72:	ea5f 4920 	movs.w	r9, r0, asr #16
 801eb76:	d44f      	bmi.n	801ec18 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801eb78:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801eb7c:	454a      	cmp	r2, r9
 801eb7e:	dd4b      	ble.n	801ec18 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801eb80:	9a00      	ldr	r2, [sp, #0]
 801eb82:	b236      	sxth	r6, r6
 801eb84:	fb09 2606 	mla	r6, r9, r6, r2
 801eb88:	5df2      	ldrb	r2, [r6, r7]
 801eb8a:	9e01      	ldr	r6, [sp, #4]
 801eb8c:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 801eb90:	0e3a      	lsrs	r2, r7, #24
 801eb92:	d041      	beq.n	801ec18 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801eb94:	9e03      	ldr	r6, [sp, #12]
 801eb96:	fa5f fb87 	uxtb.w	fp, r7
 801eb9a:	4372      	muls	r2, r6
 801eb9c:	1c56      	adds	r6, r2, #1
 801eb9e:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801eba2:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 801eba6:	1212      	asrs	r2, r2, #8
 801eba8:	f815 9006 	ldrb.w	r9, [r5, r6]
 801ebac:	fa1f fa82 	uxth.w	sl, r2
 801ebb0:	43d2      	mvns	r2, r2
 801ebb2:	fb1b fb0a 	smulbb	fp, fp, sl
 801ebb6:	b2d2      	uxtb	r2, r2
 801ebb8:	fb09 b902 	mla	r9, r9, r2, fp
 801ebbc:	fa1f f989 	uxth.w	r9, r9
 801ebc0:	f109 0b01 	add.w	fp, r9, #1
 801ebc4:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801ebc8:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801ebcc:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801ebd0:	fb1b fb0a 	smulbb	fp, fp, sl
 801ebd4:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ebd8:	fb17 fa0a 	smulbb	sl, r7, sl
 801ebdc:	f805 9006 	strb.w	r9, [r5, r6]
 801ebe0:	442e      	add	r6, r5
 801ebe2:	78b7      	ldrb	r7, [r6, #2]
 801ebe4:	f896 9001 	ldrb.w	r9, [r6, #1]
 801ebe8:	fb07 aa02 	mla	sl, r7, r2, sl
 801ebec:	fb09 b902 	mla	r9, r9, r2, fp
 801ebf0:	fa1f fa8a 	uxth.w	sl, sl
 801ebf4:	fa1f f989 	uxth.w	r9, r9
 801ebf8:	f10a 0701 	add.w	r7, sl, #1
 801ebfc:	f109 0b01 	add.w	fp, r9, #1
 801ec00:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801ec04:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801ec08:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801ec0c:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ec10:	f886 a002 	strb.w	sl, [r6, #2]
 801ec14:	f886 9001 	strb.w	r9, [r6, #1]
 801ec18:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ec1a:	4474      	add	r4, lr
 801ec1c:	f108 0801 	add.w	r8, r8, #1
 801ec20:	4410      	add	r0, r2
 801ec22:	e760      	b.n	801eae6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x158>
 801ec24:	b005      	add	sp, #20
 801ec26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ec2a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ec2a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ec2e:	b085      	sub	sp, #20
 801ec30:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ec34:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801ec36:	9203      	str	r2, [sp, #12]
 801ec38:	6868      	ldr	r0, [r5, #4]
 801ec3a:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801ec3e:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 801ec42:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801ec46:	fb00 2404 	mla	r4, r0, r4, r2
 801ec4a:	682a      	ldr	r2, [r5, #0]
 801ec4c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801ec50:	4414      	add	r4, r2
 801ec52:	f8dc 2000 	ldr.w	r2, [ip]
 801ec56:	9201      	str	r2, [sp, #4]
 801ec58:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801ec5c:	3204      	adds	r2, #4
 801ec5e:	9202      	str	r2, [sp, #8]
 801ec60:	2900      	cmp	r1, #0
 801ec62:	dc03      	bgt.n	801ec6c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801ec64:	9a03      	ldr	r2, [sp, #12]
 801ec66:	2a00      	cmp	r2, #0
 801ec68:	f340 8137 	ble.w	801eeda <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801ec6c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ec6e:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801ec72:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801ec76:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801ec78:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801ec7c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801ec80:	2b00      	cmp	r3, #0
 801ec82:	dd0d      	ble.n	801eca0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801ec84:	1405      	asrs	r5, r0, #16
 801ec86:	d405      	bmi.n	801ec94 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801ec88:	4545      	cmp	r5, r8
 801ec8a:	da03      	bge.n	801ec94 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801ec8c:	1415      	asrs	r5, r2, #16
 801ec8e:	d401      	bmi.n	801ec94 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801ec90:	42bd      	cmp	r5, r7
 801ec92:	db06      	blt.n	801eca2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801ec94:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801ec96:	4470      	add	r0, lr
 801ec98:	3b01      	subs	r3, #1
 801ec9a:	3403      	adds	r4, #3
 801ec9c:	442a      	add	r2, r5
 801ec9e:	e7ef      	b.n	801ec80 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801eca0:	d070      	beq.n	801ed84 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 801eca2:	1e5d      	subs	r5, r3, #1
 801eca4:	fb0e 0605 	mla	r6, lr, r5, r0
 801eca8:	1436      	asrs	r6, r6, #16
 801ecaa:	d462      	bmi.n	801ed72 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801ecac:	4546      	cmp	r6, r8
 801ecae:	da60      	bge.n	801ed72 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801ecb0:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801ecb2:	fb06 2505 	mla	r5, r6, r5, r2
 801ecb6:	142d      	asrs	r5, r5, #16
 801ecb8:	d45b      	bmi.n	801ed72 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801ecba:	42bd      	cmp	r5, r7
 801ecbc:	da59      	bge.n	801ed72 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801ecbe:	1ce5      	adds	r5, r4, #3
 801ecc0:	469a      	mov	sl, r3
 801ecc2:	f1ba 0f00 	cmp.w	sl, #0
 801ecc6:	dd58      	ble.n	801ed7a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 801ecc8:	1416      	asrs	r6, r2, #16
 801ecca:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801ecce:	1407      	asrs	r7, r0, #16
 801ecd0:	46b1      	mov	r9, r6
 801ecd2:	9e01      	ldr	r6, [sp, #4]
 801ecd4:	fb08 6609 	mla	r6, r8, r9, r6
 801ecd8:	5df6      	ldrb	r6, [r6, r7]
 801ecda:	9f02      	ldr	r7, [sp, #8]
 801ecdc:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 801ece0:	0e37      	lsrs	r7, r6, #24
 801ece2:	2fff      	cmp	r7, #255	; 0xff
 801ece4:	f000 80f0 	beq.w	801eec8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 801ece8:	fa5f f887 	uxtb.w	r8, r7
 801ecec:	b3d7      	cbz	r7, 801ed64 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801ecee:	fa1f f788 	uxth.w	r7, r8
 801ecf2:	ea6f 0808 	mvn.w	r8, r8
 801ecf6:	fa5f fb86 	uxtb.w	fp, r6
 801ecfa:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 801ecfe:	fa5f f888 	uxtb.w	r8, r8
 801ed02:	fb1b fb07 	smulbb	fp, fp, r7
 801ed06:	fb09 b908 	mla	r9, r9, r8, fp
 801ed0a:	fa1f f989 	uxth.w	r9, r9
 801ed0e:	f109 0b01 	add.w	fp, r9, #1
 801ed12:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801ed16:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 801ed1a:	fb1b fb08 	smulbb	fp, fp, r8
 801ed1e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ed22:	f805 9c03 	strb.w	r9, [r5, #-3]
 801ed26:	f3c6 2907 	ubfx	r9, r6, #8, #8
 801ed2a:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801ed2e:	fb09 b907 	mla	r9, r9, r7, fp
 801ed32:	fa1f f989 	uxth.w	r9, r9
 801ed36:	f109 0b01 	add.w	fp, r9, #1
 801ed3a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801ed3e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ed42:	f805 9c02 	strb.w	r9, [r5, #-2]
 801ed46:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 801ed4a:	fb19 f808 	smulbb	r8, r9, r8
 801ed4e:	fb06 8607 	mla	r6, r6, r7, r8
 801ed52:	b2b6      	uxth	r6, r6
 801ed54:	f106 0801 	add.w	r8, r6, #1
 801ed58:	eb08 2816 	add.w	r8, r8, r6, lsr #8
 801ed5c:	ea4f 2828 	mov.w	r8, r8, asr #8
 801ed60:	f805 8c01 	strb.w	r8, [r5, #-1]
 801ed64:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801ed66:	4470      	add	r0, lr
 801ed68:	3503      	adds	r5, #3
 801ed6a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801ed6e:	4432      	add	r2, r6
 801ed70:	e7a7      	b.n	801ecc2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801ed72:	2600      	movs	r6, #0
 801ed74:	1b9d      	subs	r5, r3, r6
 801ed76:	2d00      	cmp	r5, #0
 801ed78:	dc3b      	bgt.n	801edf2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801ed7a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ed7e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ed82:	441c      	add	r4, r3
 801ed84:	2900      	cmp	r1, #0
 801ed86:	f340 80a8 	ble.w	801eeda <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801ed8a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ed8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ed90:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ed94:	3901      	subs	r1, #1
 801ed96:	eeb0 6a62 	vmov.f32	s12, s5
 801ed9a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ed9e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801eda2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801eda6:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801edaa:	eeb0 6a43 	vmov.f32	s12, s6
 801edae:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801edb2:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801edb6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801edba:	ee61 7a27 	vmul.f32	s15, s2, s15
 801edbe:	ee77 2a62 	vsub.f32	s5, s14, s5
 801edc2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801edc6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801edca:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801edce:	ee12 2a90 	vmov	r2, s5
 801edd2:	eef0 2a47 	vmov.f32	s5, s14
 801edd6:	fb92 fef3 	sdiv	lr, r2, r3
 801edda:	ee13 2a10 	vmov	r2, s6
 801edde:	eeb0 3a67 	vmov.f32	s6, s15
 801ede2:	fb92 f3f3 	sdiv	r3, r2, r3
 801ede6:	9a03      	ldr	r2, [sp, #12]
 801ede8:	9312      	str	r3, [sp, #72]	; 0x48
 801edea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801edec:	bf08      	it	eq
 801edee:	4613      	moveq	r3, r2
 801edf0:	e736      	b.n	801ec60 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801edf2:	ea5f 4820 	movs.w	r8, r0, asr #16
 801edf6:	d457      	bmi.n	801eea8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801edf8:	f8dc 7008 	ldr.w	r7, [ip, #8]
 801edfc:	4547      	cmp	r7, r8
 801edfe:	dd53      	ble.n	801eea8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801ee00:	ea5f 4922 	movs.w	r9, r2, asr #16
 801ee04:	d450      	bmi.n	801eea8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801ee06:	f8dc 500c 	ldr.w	r5, [ip, #12]
 801ee0a:	454d      	cmp	r5, r9
 801ee0c:	dd4c      	ble.n	801eea8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801ee0e:	9d01      	ldr	r5, [sp, #4]
 801ee10:	b23f      	sxth	r7, r7
 801ee12:	fb09 5707 	mla	r7, r9, r7, r5
 801ee16:	f817 5008 	ldrb.w	r5, [r7, r8]
 801ee1a:	9f02      	ldr	r7, [sp, #8]
 801ee1c:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 801ee20:	0e2f      	lsrs	r7, r5, #24
 801ee22:	2fff      	cmp	r7, #255	; 0xff
 801ee24:	d045      	beq.n	801eeb2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801ee26:	fa5f f987 	uxtb.w	r9, r7
 801ee2a:	b3ef      	cbz	r7, 801eea8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801ee2c:	fa1f f889 	uxth.w	r8, r9
 801ee30:	ea6f 0909 	mvn.w	r9, r9
 801ee34:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801ee38:	fa5f fb85 	uxtb.w	fp, r5
 801ee3c:	f814 a007 	ldrb.w	sl, [r4, r7]
 801ee40:	fa5f f989 	uxtb.w	r9, r9
 801ee44:	fb1b fb08 	smulbb	fp, fp, r8
 801ee48:	fb0a ba09 	mla	sl, sl, r9, fp
 801ee4c:	fa1f fa8a 	uxth.w	sl, sl
 801ee50:	f10a 0b01 	add.w	fp, sl, #1
 801ee54:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801ee58:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801ee5c:	f804 a007 	strb.w	sl, [r4, r7]
 801ee60:	4427      	add	r7, r4
 801ee62:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801ee66:	f3c5 4507 	ubfx	r5, r5, #16, #8
 801ee6a:	f897 b001 	ldrb.w	fp, [r7, #1]
 801ee6e:	fb1b fb09 	smulbb	fp, fp, r9
 801ee72:	fb0a ba08 	mla	sl, sl, r8, fp
 801ee76:	fa1f fa8a 	uxth.w	sl, sl
 801ee7a:	f10a 0b01 	add.w	fp, sl, #1
 801ee7e:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801ee82:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801ee86:	f887 a001 	strb.w	sl, [r7, #1]
 801ee8a:	f897 a002 	ldrb.w	sl, [r7, #2]
 801ee8e:	fb1a f909 	smulbb	r9, sl, r9
 801ee92:	fb05 9508 	mla	r5, r5, r8, r9
 801ee96:	b2ad      	uxth	r5, r5
 801ee98:	f105 0901 	add.w	r9, r5, #1
 801ee9c:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 801eea0:	ea4f 2929 	mov.w	r9, r9, asr #8
 801eea4:	f887 9002 	strb.w	r9, [r7, #2]
 801eea8:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801eeaa:	4470      	add	r0, lr
 801eeac:	3601      	adds	r6, #1
 801eeae:	442a      	add	r2, r5
 801eeb0:	e760      	b.n	801ed74 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801eeb2:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801eeb6:	ea4f 2815 	mov.w	r8, r5, lsr #8
 801eeba:	55e5      	strb	r5, [r4, r7]
 801eebc:	4427      	add	r7, r4
 801eebe:	0c2d      	lsrs	r5, r5, #16
 801eec0:	f887 8001 	strb.w	r8, [r7, #1]
 801eec4:	70bd      	strb	r5, [r7, #2]
 801eec6:	e7ef      	b.n	801eea8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801eec8:	0a37      	lsrs	r7, r6, #8
 801eeca:	f805 6c03 	strb.w	r6, [r5, #-3]
 801eece:	0c36      	lsrs	r6, r6, #16
 801eed0:	f805 7c02 	strb.w	r7, [r5, #-2]
 801eed4:	f805 6c01 	strb.w	r6, [r5, #-1]
 801eed8:	e744      	b.n	801ed64 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801eeda:	b005      	add	sp, #20
 801eedc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801eee0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801eee0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eee4:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801eee6:	9201      	str	r2, [sp, #4]
 801eee8:	6870      	ldr	r0, [r6, #4]
 801eeea:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 801eeee:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 801eef2:	fa1f fe85 	uxth.w	lr, r5
 801eef6:	43ed      	mvns	r5, r5
 801eef8:	f8dc 8000 	ldr.w	r8, [ip]
 801eefc:	b2ed      	uxtb	r5, r5
 801eefe:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801ef02:	fb00 2404 	mla	r4, r0, r4, r2
 801ef06:	6832      	ldr	r2, [r6, #0]
 801ef08:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801ef0c:	4414      	add	r4, r2
 801ef0e:	2900      	cmp	r1, #0
 801ef10:	dc03      	bgt.n	801ef1a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801ef12:	9a01      	ldr	r2, [sp, #4]
 801ef14:	2a00      	cmp	r2, #0
 801ef16:	f340 810d 	ble.w	801f134 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801ef1a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ef1c:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 801ef20:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801ef24:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ef26:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 801ef2a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801ef2e:	2b00      	cmp	r3, #0
 801ef30:	dd0e      	ble.n	801ef50 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801ef32:	1406      	asrs	r6, r0, #16
 801ef34:	d405      	bmi.n	801ef42 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801ef36:	4556      	cmp	r6, sl
 801ef38:	da03      	bge.n	801ef42 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801ef3a:	1416      	asrs	r6, r2, #16
 801ef3c:	d401      	bmi.n	801ef42 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801ef3e:	454e      	cmp	r6, r9
 801ef40:	db07      	blt.n	801ef52 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801ef42:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801ef44:	3b01      	subs	r3, #1
 801ef46:	3403      	adds	r4, #3
 801ef48:	4430      	add	r0, r6
 801ef4a:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801ef4c:	4432      	add	r2, r6
 801ef4e:	e7ee      	b.n	801ef2e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 801ef50:	d060      	beq.n	801f014 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 801ef52:	1e5e      	subs	r6, r3, #1
 801ef54:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801ef56:	fb07 0706 	mla	r7, r7, r6, r0
 801ef5a:	143f      	asrs	r7, r7, #16
 801ef5c:	d451      	bmi.n	801f002 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801ef5e:	4557      	cmp	r7, sl
 801ef60:	da4f      	bge.n	801f002 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801ef62:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801ef64:	fb07 2606 	mla	r6, r7, r6, r2
 801ef68:	1436      	asrs	r6, r6, #16
 801ef6a:	d44a      	bmi.n	801f002 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801ef6c:	454e      	cmp	r6, r9
 801ef6e:	da48      	bge.n	801f002 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801ef70:	1ce6      	adds	r6, r4, #3
 801ef72:	4699      	mov	r9, r3
 801ef74:	f1b9 0f00 	cmp.w	r9, #0
 801ef78:	f106 0603 	add.w	r6, r6, #3
 801ef7c:	dd45      	ble.n	801f00a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 801ef7e:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 801ef82:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801ef86:	1417      	asrs	r7, r2, #16
 801ef88:	f109 39ff 	add.w	r9, r9, #4294967295
 801ef8c:	fb0b a707 	mla	r7, fp, r7, sl
 801ef90:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801ef94:	fb1b fb05 	smulbb	fp, fp, r5
 801ef98:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801ef9c:	eb08 0a07 	add.w	sl, r8, r7
 801efa0:	f818 7007 	ldrb.w	r7, [r8, r7]
 801efa4:	fb07 b70e 	mla	r7, r7, lr, fp
 801efa8:	b2bf      	uxth	r7, r7
 801efaa:	f107 0b01 	add.w	fp, r7, #1
 801efae:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801efb2:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801efb6:	fb1b fb05 	smulbb	fp, fp, r5
 801efba:	123f      	asrs	r7, r7, #8
 801efbc:	f806 7c06 	strb.w	r7, [r6, #-6]
 801efc0:	f89a 7001 	ldrb.w	r7, [sl, #1]
 801efc4:	fb07 b70e 	mla	r7, r7, lr, fp
 801efc8:	b2bf      	uxth	r7, r7
 801efca:	f107 0b01 	add.w	fp, r7, #1
 801efce:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801efd2:	123f      	asrs	r7, r7, #8
 801efd4:	f806 7c05 	strb.w	r7, [r6, #-5]
 801efd8:	f89a 7002 	ldrb.w	r7, [sl, #2]
 801efdc:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801efe0:	fb1a fa05 	smulbb	sl, sl, r5
 801efe4:	fb07 a70e 	mla	r7, r7, lr, sl
 801efe8:	b2bf      	uxth	r7, r7
 801efea:	f107 0a01 	add.w	sl, r7, #1
 801efee:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801eff2:	123f      	asrs	r7, r7, #8
 801eff4:	f806 7c04 	strb.w	r7, [r6, #-4]
 801eff8:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801effa:	4438      	add	r0, r7
 801effc:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801effe:	443a      	add	r2, r7
 801f000:	e7b8      	b.n	801ef74 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801f002:	2700      	movs	r7, #0
 801f004:	1bde      	subs	r6, r3, r7
 801f006:	2e00      	cmp	r6, #0
 801f008:	dc3f      	bgt.n	801f08a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 801f00a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f00e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f012:	441c      	add	r4, r3
 801f014:	2900      	cmp	r1, #0
 801f016:	f340 808d 	ble.w	801f134 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801f01a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f01e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f020:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f024:	3901      	subs	r1, #1
 801f026:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f02a:	eef0 6a62 	vmov.f32	s13, s5
 801f02e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801f032:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f036:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f03a:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 801f03e:	eef0 6a43 	vmov.f32	s13, s6
 801f042:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f046:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 801f04a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f04e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f052:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f056:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f05a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f05e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f062:	ee12 2a90 	vmov	r2, s5
 801f066:	eef0 2a47 	vmov.f32	s5, s14
 801f06a:	fb92 f3f3 	sdiv	r3, r2, r3
 801f06e:	ee13 2a10 	vmov	r2, s6
 801f072:	930f      	str	r3, [sp, #60]	; 0x3c
 801f074:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f076:	eeb0 3a67 	vmov.f32	s6, s15
 801f07a:	fb92 f3f3 	sdiv	r3, r2, r3
 801f07e:	9a01      	ldr	r2, [sp, #4]
 801f080:	9310      	str	r3, [sp, #64]	; 0x40
 801f082:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f084:	bf08      	it	eq
 801f086:	4613      	moveq	r3, r2
 801f088:	e741      	b.n	801ef0e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801f08a:	ea5f 4920 	movs.w	r9, r0, asr #16
 801f08e:	d44b      	bmi.n	801f128 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801f090:	f8dc b008 	ldr.w	fp, [ip, #8]
 801f094:	45cb      	cmp	fp, r9
 801f096:	dd47      	ble.n	801f128 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801f098:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801f09c:	d444      	bmi.n	801f128 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801f09e:	f8dc 600c 	ldr.w	r6, [ip, #12]
 801f0a2:	4556      	cmp	r6, sl
 801f0a4:	dd40      	ble.n	801f128 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801f0a6:	fa0f f68b 	sxth.w	r6, fp
 801f0aa:	fb0a 9906 	mla	r9, sl, r6, r9
 801f0ae:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801f0b2:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801f0b6:	f814 b006 	ldrb.w	fp, [r4, r6]
 801f0ba:	fb1b fb05 	smulbb	fp, fp, r5
 801f0be:	eb08 0a09 	add.w	sl, r8, r9
 801f0c2:	f818 9009 	ldrb.w	r9, [r8, r9]
 801f0c6:	fb09 b90e 	mla	r9, r9, lr, fp
 801f0ca:	fa1f f989 	uxth.w	r9, r9
 801f0ce:	f109 0b01 	add.w	fp, r9, #1
 801f0d2:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801f0d6:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f0da:	f804 9006 	strb.w	r9, [r4, r6]
 801f0de:	4426      	add	r6, r4
 801f0e0:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801f0e4:	f896 b001 	ldrb.w	fp, [r6, #1]
 801f0e8:	fb1b fb05 	smulbb	fp, fp, r5
 801f0ec:	fb09 b90e 	mla	r9, r9, lr, fp
 801f0f0:	fa1f f989 	uxth.w	r9, r9
 801f0f4:	f109 0b01 	add.w	fp, r9, #1
 801f0f8:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801f0fc:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f100:	f886 9001 	strb.w	r9, [r6, #1]
 801f104:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801f108:	f896 a002 	ldrb.w	sl, [r6, #2]
 801f10c:	fb1a fa05 	smulbb	sl, sl, r5
 801f110:	fb09 a90e 	mla	r9, r9, lr, sl
 801f114:	fa1f f989 	uxth.w	r9, r9
 801f118:	f109 0a01 	add.w	sl, r9, #1
 801f11c:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801f120:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f124:	f886 9002 	strb.w	r9, [r6, #2]
 801f128:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801f12a:	3701      	adds	r7, #1
 801f12c:	4430      	add	r0, r6
 801f12e:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801f130:	4432      	add	r2, r6
 801f132:	e767      	b.n	801f004 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 801f134:	b003      	add	sp, #12
 801f136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f13a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f13a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f13e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801f140:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f144:	9201      	str	r2, [sp, #4]
 801f146:	6868      	ldr	r0, [r5, #4]
 801f148:	9f14      	ldr	r7, [sp, #80]	; 0x50
 801f14a:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801f14e:	e9dd ec0f 	ldrd	lr, ip, [sp, #60]	; 0x3c
 801f152:	fb00 2404 	mla	r4, r0, r4, r2
 801f156:	682a      	ldr	r2, [r5, #0]
 801f158:	f8d7 8000 	ldr.w	r8, [r7]
 801f15c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801f160:	4414      	add	r4, r2
 801f162:	2900      	cmp	r1, #0
 801f164:	dc03      	bgt.n	801f16e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801f166:	9a01      	ldr	r2, [sp, #4]
 801f168:	2a00      	cmp	r2, #0
 801f16a:	f340 80af 	ble.w	801f2cc <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801f16e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801f170:	f9b7 a008 	ldrsh.w	sl, [r7, #8]
 801f174:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801f178:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f17a:	f9b7 900c 	ldrsh.w	r9, [r7, #12]
 801f17e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801f182:	2b00      	cmp	r3, #0
 801f184:	dd0c      	ble.n	801f1a0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801f186:	1405      	asrs	r5, r0, #16
 801f188:	d405      	bmi.n	801f196 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801f18a:	4555      	cmp	r5, sl
 801f18c:	da03      	bge.n	801f196 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801f18e:	1415      	asrs	r5, r2, #16
 801f190:	d401      	bmi.n	801f196 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801f192:	454d      	cmp	r5, r9
 801f194:	db05      	blt.n	801f1a2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801f196:	4470      	add	r0, lr
 801f198:	4462      	add	r2, ip
 801f19a:	3b01      	subs	r3, #1
 801f19c:	3403      	adds	r4, #3
 801f19e:	e7f0      	b.n	801f182 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801f1a0:	d038      	beq.n	801f214 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801f1a2:	1e5d      	subs	r5, r3, #1
 801f1a4:	fb0e 0605 	mla	r6, lr, r5, r0
 801f1a8:	1436      	asrs	r6, r6, #16
 801f1aa:	d42a      	bmi.n	801f202 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801f1ac:	4556      	cmp	r6, sl
 801f1ae:	da28      	bge.n	801f202 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801f1b0:	fb0c 2505 	mla	r5, ip, r5, r2
 801f1b4:	142d      	asrs	r5, r5, #16
 801f1b6:	d424      	bmi.n	801f202 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801f1b8:	454d      	cmp	r5, r9
 801f1ba:	da22      	bge.n	801f202 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801f1bc:	1ce6      	adds	r6, r4, #3
 801f1be:	4699      	mov	r9, r3
 801f1c0:	f1b9 0f00 	cmp.w	r9, #0
 801f1c4:	f106 0603 	add.w	r6, r6, #3
 801f1c8:	dd1f      	ble.n	801f20a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 801f1ca:	f9b7 b008 	ldrsh.w	fp, [r7, #8]
 801f1ce:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801f1d2:	1415      	asrs	r5, r2, #16
 801f1d4:	4470      	add	r0, lr
 801f1d6:	4462      	add	r2, ip
 801f1d8:	f109 39ff 	add.w	r9, r9, #4294967295
 801f1dc:	fb0b a505 	mla	r5, fp, r5, sl
 801f1e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f1e4:	eb08 0a05 	add.w	sl, r8, r5
 801f1e8:	f818 5005 	ldrb.w	r5, [r8, r5]
 801f1ec:	f806 5c06 	strb.w	r5, [r6, #-6]
 801f1f0:	f89a 5001 	ldrb.w	r5, [sl, #1]
 801f1f4:	f806 5c05 	strb.w	r5, [r6, #-5]
 801f1f8:	f89a 5002 	ldrb.w	r5, [sl, #2]
 801f1fc:	f806 5c04 	strb.w	r5, [r6, #-4]
 801f200:	e7de      	b.n	801f1c0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801f202:	2600      	movs	r6, #0
 801f204:	1b9d      	subs	r5, r3, r6
 801f206:	2d00      	cmp	r5, #0
 801f208:	dc38      	bgt.n	801f27c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801f20a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f20e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f212:	441c      	add	r4, r3
 801f214:	2900      	cmp	r1, #0
 801f216:	dd59      	ble.n	801f2cc <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801f218:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f21c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f21e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f222:	3901      	subs	r1, #1
 801f224:	eeb0 6a62 	vmov.f32	s12, s5
 801f228:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f22c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f230:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f234:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801f238:	eeb0 6a43 	vmov.f32	s12, s6
 801f23c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f240:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 801f244:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f248:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f24c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f250:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f254:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f258:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f25c:	ee12 2a90 	vmov	r2, s5
 801f260:	eef0 2a47 	vmov.f32	s5, s14
 801f264:	fb92 fef3 	sdiv	lr, r2, r3
 801f268:	ee13 2a10 	vmov	r2, s6
 801f26c:	eeb0 3a67 	vmov.f32	s6, s15
 801f270:	fb92 fcf3 	sdiv	ip, r2, r3
 801f274:	9a01      	ldr	r2, [sp, #4]
 801f276:	bf08      	it	eq
 801f278:	4613      	moveq	r3, r2
 801f27a:	e772      	b.n	801f162 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 801f27c:	ea5f 4920 	movs.w	r9, r0, asr #16
 801f280:	d420      	bmi.n	801f2c4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801f282:	f8d7 b008 	ldr.w	fp, [r7, #8]
 801f286:	45cb      	cmp	fp, r9
 801f288:	dd1c      	ble.n	801f2c4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801f28a:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801f28e:	d419      	bmi.n	801f2c4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801f290:	68fd      	ldr	r5, [r7, #12]
 801f292:	4555      	cmp	r5, sl
 801f294:	dd16      	ble.n	801f2c4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801f296:	fa0f f58b 	sxth.w	r5, fp
 801f29a:	fb0a 9505 	mla	r5, sl, r5, r9
 801f29e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f2a2:	f818 9005 	ldrb.w	r9, [r8, r5]
 801f2a6:	eb08 0b05 	add.w	fp, r8, r5
 801f2aa:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 801f2ae:	f804 9005 	strb.w	r9, [r4, r5]
 801f2b2:	4425      	add	r5, r4
 801f2b4:	f89b 9001 	ldrb.w	r9, [fp, #1]
 801f2b8:	f885 9001 	strb.w	r9, [r5, #1]
 801f2bc:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801f2c0:	f885 9002 	strb.w	r9, [r5, #2]
 801f2c4:	4470      	add	r0, lr
 801f2c6:	4462      	add	r2, ip
 801f2c8:	3601      	adds	r6, #1
 801f2ca:	e79b      	b.n	801f204 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 801f2cc:	b003      	add	sp, #12
 801f2ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f2d2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f2d2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f2d6:	b085      	sub	sp, #20
 801f2d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f2dc:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f2de:	9202      	str	r2, [sp, #8]
 801f2e0:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801f2e4:	6860      	ldr	r0, [r4, #4]
 801f2e6:	9203      	str	r2, [sp, #12]
 801f2e8:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801f2ec:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 801f2f0:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801f2f4:	fb00 2505 	mla	r5, r0, r5, r2
 801f2f8:	6822      	ldr	r2, [r4, #0]
 801f2fa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f2fe:	4415      	add	r5, r2
 801f300:	f8dc 2000 	ldr.w	r2, [ip]
 801f304:	9201      	str	r2, [sp, #4]
 801f306:	2900      	cmp	r1, #0
 801f308:	dc03      	bgt.n	801f312 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801f30a:	9a02      	ldr	r2, [sp, #8]
 801f30c:	2a00      	cmp	r2, #0
 801f30e:	f340 8122 	ble.w	801f556 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801f312:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801f314:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801f318:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801f31c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f31e:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801f322:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801f326:	2b00      	cmp	r3, #0
 801f328:	dd0d      	ble.n	801f346 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801f32a:	1422      	asrs	r2, r4, #16
 801f32c:	d405      	bmi.n	801f33a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801f32e:	4542      	cmp	r2, r8
 801f330:	da03      	bge.n	801f33a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801f332:	1402      	asrs	r2, r0, #16
 801f334:	d401      	bmi.n	801f33a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801f336:	42ba      	cmp	r2, r7
 801f338:	db06      	blt.n	801f348 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801f33a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801f33c:	4474      	add	r4, lr
 801f33e:	3b01      	subs	r3, #1
 801f340:	3503      	adds	r5, #3
 801f342:	4410      	add	r0, r2
 801f344:	e7ef      	b.n	801f326 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801f346:	d072      	beq.n	801f42e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 801f348:	1e5a      	subs	r2, r3, #1
 801f34a:	fb0e 4602 	mla	r6, lr, r2, r4
 801f34e:	1436      	asrs	r6, r6, #16
 801f350:	d462      	bmi.n	801f418 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801f352:	4546      	cmp	r6, r8
 801f354:	da60      	bge.n	801f418 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801f356:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801f358:	fb06 0202 	mla	r2, r6, r2, r0
 801f35c:	1412      	asrs	r2, r2, #16
 801f35e:	d45b      	bmi.n	801f418 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801f360:	42ba      	cmp	r2, r7
 801f362:	da59      	bge.n	801f418 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801f364:	1cef      	adds	r7, r5, #3
 801f366:	4699      	mov	r9, r3
 801f368:	f1b9 0f00 	cmp.w	r9, #0
 801f36c:	dd5a      	ble.n	801f424 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801f36e:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801f372:	1426      	asrs	r6, r4, #16
 801f374:	1402      	asrs	r2, r0, #16
 801f376:	fb08 6202 	mla	r2, r8, r2, r6
 801f37a:	9e01      	ldr	r6, [sp, #4]
 801f37c:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 801f380:	ea5f 6816 	movs.w	r8, r6, lsr #24
 801f384:	d041      	beq.n	801f40a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801f386:	9a03      	ldr	r2, [sp, #12]
 801f388:	fa5f fb86 	uxtb.w	fp, r6
 801f38c:	fb02 f808 	mul.w	r8, r2, r8
 801f390:	f108 0201 	add.w	r2, r8, #1
 801f394:	eb02 2228 	add.w	r2, r2, r8, asr #8
 801f398:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 801f39c:	1212      	asrs	r2, r2, #8
 801f39e:	fa1f fa82 	uxth.w	sl, r2
 801f3a2:	43d2      	mvns	r2, r2
 801f3a4:	fb1b fb0a 	smulbb	fp, fp, sl
 801f3a8:	b2d2      	uxtb	r2, r2
 801f3aa:	fb08 b802 	mla	r8, r8, r2, fp
 801f3ae:	fa1f f888 	uxth.w	r8, r8
 801f3b2:	f108 0b01 	add.w	fp, r8, #1
 801f3b6:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801f3ba:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801f3be:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801f3c2:	fb1b fb0a 	smulbb	fp, fp, sl
 801f3c6:	ea4f 2828 	mov.w	r8, r8, asr #8
 801f3ca:	fb16 fa0a 	smulbb	sl, r6, sl
 801f3ce:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801f3d2:	f807 8c03 	strb.w	r8, [r7, #-3]
 801f3d6:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 801f3da:	fb06 aa02 	mla	sl, r6, r2, sl
 801f3de:	fb08 b802 	mla	r8, r8, r2, fp
 801f3e2:	fa1f fa8a 	uxth.w	sl, sl
 801f3e6:	fa1f f888 	uxth.w	r8, r8
 801f3ea:	f10a 0601 	add.w	r6, sl, #1
 801f3ee:	f108 0b01 	add.w	fp, r8, #1
 801f3f2:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801f3f6:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801f3fa:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801f3fe:	ea4f 2828 	mov.w	r8, r8, asr #8
 801f402:	f807 ac01 	strb.w	sl, [r7, #-1]
 801f406:	f807 8c02 	strb.w	r8, [r7, #-2]
 801f40a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801f40c:	4474      	add	r4, lr
 801f40e:	3703      	adds	r7, #3
 801f410:	f109 39ff 	add.w	r9, r9, #4294967295
 801f414:	4410      	add	r0, r2
 801f416:	e7a7      	b.n	801f368 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801f418:	f04f 0800 	mov.w	r8, #0
 801f41c:	eba3 0208 	sub.w	r2, r3, r8
 801f420:	2a00      	cmp	r2, #0
 801f422:	dc3b      	bgt.n	801f49c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 801f424:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f428:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f42c:	441d      	add	r5, r3
 801f42e:	2900      	cmp	r1, #0
 801f430:	f340 8091 	ble.w	801f556 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801f434:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f438:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f43a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f43e:	3901      	subs	r1, #1
 801f440:	eeb0 6a62 	vmov.f32	s12, s5
 801f444:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f448:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f44c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f450:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801f454:	eeb0 6a43 	vmov.f32	s12, s6
 801f458:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f45c:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801f460:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f464:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f468:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f46c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f470:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f474:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f478:	ee12 2a90 	vmov	r2, s5
 801f47c:	eef0 2a47 	vmov.f32	s5, s14
 801f480:	fb92 fef3 	sdiv	lr, r2, r3
 801f484:	ee13 2a10 	vmov	r2, s6
 801f488:	eeb0 3a67 	vmov.f32	s6, s15
 801f48c:	fb92 f3f3 	sdiv	r3, r2, r3
 801f490:	9a02      	ldr	r2, [sp, #8]
 801f492:	9312      	str	r3, [sp, #72]	; 0x48
 801f494:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f496:	bf08      	it	eq
 801f498:	4613      	moveq	r3, r2
 801f49a:	e734      	b.n	801f306 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801f49c:	1427      	asrs	r7, r4, #16
 801f49e:	d454      	bmi.n	801f54a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801f4a0:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801f4a4:	42be      	cmp	r6, r7
 801f4a6:	dd50      	ble.n	801f54a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801f4a8:	ea5f 4920 	movs.w	r9, r0, asr #16
 801f4ac:	d44d      	bmi.n	801f54a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801f4ae:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801f4b2:	454a      	cmp	r2, r9
 801f4b4:	dd49      	ble.n	801f54a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801f4b6:	b236      	sxth	r6, r6
 801f4b8:	9a01      	ldr	r2, [sp, #4]
 801f4ba:	fb09 7606 	mla	r6, r9, r6, r7
 801f4be:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 801f4c2:	0e3a      	lsrs	r2, r7, #24
 801f4c4:	d041      	beq.n	801f54a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801f4c6:	9e03      	ldr	r6, [sp, #12]
 801f4c8:	fa5f fb87 	uxtb.w	fp, r7
 801f4cc:	4372      	muls	r2, r6
 801f4ce:	1c56      	adds	r6, r2, #1
 801f4d0:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801f4d4:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 801f4d8:	1212      	asrs	r2, r2, #8
 801f4da:	f815 9006 	ldrb.w	r9, [r5, r6]
 801f4de:	fa1f fa82 	uxth.w	sl, r2
 801f4e2:	43d2      	mvns	r2, r2
 801f4e4:	fb1b fb0a 	smulbb	fp, fp, sl
 801f4e8:	b2d2      	uxtb	r2, r2
 801f4ea:	fb09 b902 	mla	r9, r9, r2, fp
 801f4ee:	fa1f f989 	uxth.w	r9, r9
 801f4f2:	f109 0b01 	add.w	fp, r9, #1
 801f4f6:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801f4fa:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801f4fe:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801f502:	fb1b fb0a 	smulbb	fp, fp, sl
 801f506:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f50a:	fb17 fa0a 	smulbb	sl, r7, sl
 801f50e:	f805 9006 	strb.w	r9, [r5, r6]
 801f512:	442e      	add	r6, r5
 801f514:	78b7      	ldrb	r7, [r6, #2]
 801f516:	f896 9001 	ldrb.w	r9, [r6, #1]
 801f51a:	fb07 aa02 	mla	sl, r7, r2, sl
 801f51e:	fb09 b902 	mla	r9, r9, r2, fp
 801f522:	fa1f fa8a 	uxth.w	sl, sl
 801f526:	fa1f f989 	uxth.w	r9, r9
 801f52a:	f10a 0701 	add.w	r7, sl, #1
 801f52e:	f109 0b01 	add.w	fp, r9, #1
 801f532:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801f536:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801f53a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801f53e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f542:	f886 a002 	strb.w	sl, [r6, #2]
 801f546:	f886 9001 	strb.w	r9, [r6, #1]
 801f54a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801f54c:	4474      	add	r4, lr
 801f54e:	f108 0801 	add.w	r8, r8, #1
 801f552:	4410      	add	r0, r2
 801f554:	e762      	b.n	801f41c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801f556:	b005      	add	sp, #20
 801f558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f55c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f55c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f560:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801f562:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f566:	9201      	str	r2, [sp, #4]
 801f568:	6860      	ldr	r0, [r4, #4]
 801f56a:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 801f56e:	e9dd 2512 	ldrd	r2, r5, [sp, #72]	; 0x48
 801f572:	fb00 2505 	mla	r5, r0, r5, r2
 801f576:	6822      	ldr	r2, [r4, #0]
 801f578:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f57c:	4415      	add	r5, r2
 801f57e:	f8dc 2000 	ldr.w	r2, [ip]
 801f582:	9200      	str	r2, [sp, #0]
 801f584:	2900      	cmp	r1, #0
 801f586:	dc03      	bgt.n	801f590 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801f588:	9a01      	ldr	r2, [sp, #4]
 801f58a:	2a00      	cmp	r2, #0
 801f58c:	f340 812b 	ble.w	801f7e6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801f590:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801f592:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801f596:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801f59a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f59c:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801f5a0:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801f5a4:	2b00      	cmp	r3, #0
 801f5a6:	dd0e      	ble.n	801f5c6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801f5a8:	1422      	asrs	r2, r4, #16
 801f5aa:	d405      	bmi.n	801f5b8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801f5ac:	4572      	cmp	r2, lr
 801f5ae:	da03      	bge.n	801f5b8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801f5b0:	1402      	asrs	r2, r0, #16
 801f5b2:	d401      	bmi.n	801f5b8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801f5b4:	42ba      	cmp	r2, r7
 801f5b6:	db07      	blt.n	801f5c8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801f5b8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801f5ba:	3b01      	subs	r3, #1
 801f5bc:	3503      	adds	r5, #3
 801f5be:	4414      	add	r4, r2
 801f5c0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f5c2:	4410      	add	r0, r2
 801f5c4:	e7ee      	b.n	801f5a4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801f5c6:	d06f      	beq.n	801f6a8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801f5c8:	1e5a      	subs	r2, r3, #1
 801f5ca:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801f5cc:	fb06 4602 	mla	r6, r6, r2, r4
 801f5d0:	1436      	asrs	r6, r6, #16
 801f5d2:	d45e      	bmi.n	801f692 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801f5d4:	4576      	cmp	r6, lr
 801f5d6:	da5c      	bge.n	801f692 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801f5d8:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801f5da:	fb06 0202 	mla	r2, r6, r2, r0
 801f5de:	1412      	asrs	r2, r2, #16
 801f5e0:	d457      	bmi.n	801f692 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801f5e2:	42ba      	cmp	r2, r7
 801f5e4:	da55      	bge.n	801f692 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801f5e6:	1cee      	adds	r6, r5, #3
 801f5e8:	469a      	mov	sl, r3
 801f5ea:	f1ba 0f00 	cmp.w	sl, #0
 801f5ee:	dd56      	ble.n	801f69e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801f5f0:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801f5f4:	1427      	asrs	r7, r4, #16
 801f5f6:	1402      	asrs	r2, r0, #16
 801f5f8:	fb0e 7202 	mla	r2, lr, r2, r7
 801f5fc:	9f00      	ldr	r7, [sp, #0]
 801f5fe:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 801f602:	ea5f 6e17 	movs.w	lr, r7, lsr #24
 801f606:	d03c      	beq.n	801f682 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801f608:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801f60c:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801f610:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801f614:	fa5f f28e 	uxtb.w	r2, lr
 801f618:	b2ff      	uxtb	r7, r7
 801f61a:	f000 80dd 	beq.w	801f7d8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801f61e:	fa1f f882 	uxth.w	r8, r2
 801f622:	43d2      	mvns	r2, r2
 801f624:	f816 ec03 	ldrb.w	lr, [r6, #-3]
 801f628:	fb17 f708 	smulbb	r7, r7, r8
 801f62c:	b2d2      	uxtb	r2, r2
 801f62e:	fb19 f908 	smulbb	r9, r9, r8
 801f632:	fb0e 7702 	mla	r7, lr, r2, r7
 801f636:	fb1b f808 	smulbb	r8, fp, r8
 801f63a:	b2bf      	uxth	r7, r7
 801f63c:	f107 0e01 	add.w	lr, r7, #1
 801f640:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 801f644:	123f      	asrs	r7, r7, #8
 801f646:	f806 7c03 	strb.w	r7, [r6, #-3]
 801f64a:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 801f64e:	fb07 9902 	mla	r9, r7, r2, r9
 801f652:	fa1f f989 	uxth.w	r9, r9
 801f656:	f109 0701 	add.w	r7, r9, #1
 801f65a:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801f65e:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801f662:	fb07 8802 	mla	r8, r7, r2, r8
 801f666:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f66a:	fa1f f888 	uxth.w	r8, r8
 801f66e:	f806 9c02 	strb.w	r9, [r6, #-2]
 801f672:	f108 0201 	add.w	r2, r8, #1
 801f676:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801f67a:	ea4f 2828 	mov.w	r8, r8, asr #8
 801f67e:	f806 8c01 	strb.w	r8, [r6, #-1]
 801f682:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801f684:	3603      	adds	r6, #3
 801f686:	f10a 3aff 	add.w	sl, sl, #4294967295
 801f68a:	4414      	add	r4, r2
 801f68c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f68e:	4410      	add	r0, r2
 801f690:	e7ab      	b.n	801f5ea <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801f692:	f04f 0e00 	mov.w	lr, #0
 801f696:	eba3 020e 	sub.w	r2, r3, lr
 801f69a:	2a00      	cmp	r2, #0
 801f69c:	dc3d      	bgt.n	801f71a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 801f69e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f6a2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f6a6:	441d      	add	r5, r3
 801f6a8:	2900      	cmp	r1, #0
 801f6aa:	f340 809c 	ble.w	801f7e6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801f6ae:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f6b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f6b4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f6b8:	3901      	subs	r1, #1
 801f6ba:	eeb0 6a62 	vmov.f32	s12, s5
 801f6be:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f6c2:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f6c6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f6ca:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801f6ce:	eeb0 6a43 	vmov.f32	s12, s6
 801f6d2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f6d6:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 801f6da:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f6de:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f6e2:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f6e6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f6ea:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f6ee:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f6f2:	ee12 2a90 	vmov	r2, s5
 801f6f6:	eef0 2a47 	vmov.f32	s5, s14
 801f6fa:	fb92 f3f3 	sdiv	r3, r2, r3
 801f6fe:	ee13 2a10 	vmov	r2, s6
 801f702:	930f      	str	r3, [sp, #60]	; 0x3c
 801f704:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f706:	eeb0 3a67 	vmov.f32	s6, s15
 801f70a:	fb92 f3f3 	sdiv	r3, r2, r3
 801f70e:	9a01      	ldr	r2, [sp, #4]
 801f710:	9310      	str	r3, [sp, #64]	; 0x40
 801f712:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f714:	bf08      	it	eq
 801f716:	4613      	moveq	r3, r2
 801f718:	e734      	b.n	801f584 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 801f71a:	1427      	asrs	r7, r4, #16
 801f71c:	d44d      	bmi.n	801f7ba <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801f71e:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801f722:	42be      	cmp	r6, r7
 801f724:	dd49      	ble.n	801f7ba <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801f726:	ea5f 4820 	movs.w	r8, r0, asr #16
 801f72a:	d446      	bmi.n	801f7ba <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801f72c:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801f730:	4542      	cmp	r2, r8
 801f732:	dd42      	ble.n	801f7ba <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801f734:	b236      	sxth	r6, r6
 801f736:	9a00      	ldr	r2, [sp, #0]
 801f738:	fb08 7606 	mla	r6, r8, r6, r7
 801f73c:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 801f740:	0e3a      	lsrs	r2, r7, #24
 801f742:	d03a      	beq.n	801f7ba <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801f744:	2aff      	cmp	r2, #255	; 0xff
 801f746:	b2d6      	uxtb	r6, r2
 801f748:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801f74c:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 801f750:	ea4f 024e 	mov.w	r2, lr, lsl #1
 801f754:	b2ff      	uxtb	r7, r7
 801f756:	d037      	beq.n	801f7c8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 801f758:	fa1f f986 	uxth.w	r9, r6
 801f75c:	4472      	add	r2, lr
 801f75e:	43f6      	mvns	r6, r6
 801f760:	f815 8002 	ldrb.w	r8, [r5, r2]
 801f764:	fb17 f709 	smulbb	r7, r7, r9
 801f768:	fb1a fa09 	smulbb	sl, sl, r9
 801f76c:	b2f6      	uxtb	r6, r6
 801f76e:	fb1b f909 	smulbb	r9, fp, r9
 801f772:	fb08 7706 	mla	r7, r8, r6, r7
 801f776:	b2bf      	uxth	r7, r7
 801f778:	f107 0801 	add.w	r8, r7, #1
 801f77c:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 801f780:	123f      	asrs	r7, r7, #8
 801f782:	54af      	strb	r7, [r5, r2]
 801f784:	442a      	add	r2, r5
 801f786:	7857      	ldrb	r7, [r2, #1]
 801f788:	fb07 aa06 	mla	sl, r7, r6, sl
 801f78c:	fa1f fa8a 	uxth.w	sl, sl
 801f790:	f10a 0701 	add.w	r7, sl, #1
 801f794:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801f798:	7897      	ldrb	r7, [r2, #2]
 801f79a:	fb07 9906 	mla	r9, r7, r6, r9
 801f79e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801f7a2:	fa1f f989 	uxth.w	r9, r9
 801f7a6:	f882 a001 	strb.w	sl, [r2, #1]
 801f7aa:	f109 0601 	add.w	r6, r9, #1
 801f7ae:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 801f7b2:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f7b6:	f882 9002 	strb.w	r9, [r2, #2]
 801f7ba:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801f7bc:	f10e 0e01 	add.w	lr, lr, #1
 801f7c0:	4414      	add	r4, r2
 801f7c2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f7c4:	4410      	add	r0, r2
 801f7c6:	e766      	b.n	801f696 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801f7c8:	4472      	add	r2, lr
 801f7ca:	54af      	strb	r7, [r5, r2]
 801f7cc:	442a      	add	r2, r5
 801f7ce:	f882 a001 	strb.w	sl, [r2, #1]
 801f7d2:	f882 b002 	strb.w	fp, [r2, #2]
 801f7d6:	e7f0      	b.n	801f7ba <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801f7d8:	f806 7c03 	strb.w	r7, [r6, #-3]
 801f7dc:	f806 9c02 	strb.w	r9, [r6, #-2]
 801f7e0:	f806 bc01 	strb.w	fp, [r6, #-1]
 801f7e4:	e74d      	b.n	801f682 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801f7e6:	b003      	add	sp, #12
 801f7e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f7ec <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f7ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f7f0:	b087      	sub	sp, #28
 801f7f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f7f6:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801f7f8:	9204      	str	r2, [sp, #16]
 801f7fa:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801f7fe:	6860      	ldr	r0, [r4, #4]
 801f800:	9205      	str	r2, [sp, #20]
 801f802:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801f806:	f8dd e04c 	ldr.w	lr, [sp, #76]	; 0x4c
 801f80a:	9101      	str	r1, [sp, #4]
 801f80c:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801f810:	fb00 2505 	mla	r5, r0, r5, r2
 801f814:	6822      	ldr	r2, [r4, #0]
 801f816:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f81a:	4415      	add	r5, r2
 801f81c:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801f820:	3201      	adds	r2, #1
 801f822:	f022 0201 	bic.w	r2, r2, #1
 801f826:	9202      	str	r2, [sp, #8]
 801f828:	f8dc 2000 	ldr.w	r2, [ip]
 801f82c:	9203      	str	r2, [sp, #12]
 801f82e:	9a01      	ldr	r2, [sp, #4]
 801f830:	2a00      	cmp	r2, #0
 801f832:	dc03      	bgt.n	801f83c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801f834:	9a04      	ldr	r2, [sp, #16]
 801f836:	2a00      	cmp	r2, #0
 801f838:	f340 8135 	ble.w	801faa6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801f83c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801f83e:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801f842:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801f846:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801f848:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801f84c:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801f850:	2b00      	cmp	r3, #0
 801f852:	dd0d      	ble.n	801f870 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801f854:	1422      	asrs	r2, r4, #16
 801f856:	d405      	bmi.n	801f864 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801f858:	4542      	cmp	r2, r8
 801f85a:	da03      	bge.n	801f864 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801f85c:	1402      	asrs	r2, r0, #16
 801f85e:	d401      	bmi.n	801f864 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801f860:	42ba      	cmp	r2, r7
 801f862:	db06      	blt.n	801f872 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801f864:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801f866:	4474      	add	r4, lr
 801f868:	3b01      	subs	r3, #1
 801f86a:	3503      	adds	r5, #3
 801f86c:	4410      	add	r0, r2
 801f86e:	e7ef      	b.n	801f850 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801f870:	d077      	beq.n	801f962 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 801f872:	1e5a      	subs	r2, r3, #1
 801f874:	fb0e 4602 	mla	r6, lr, r2, r4
 801f878:	1436      	asrs	r6, r6, #16
 801f87a:	d469      	bmi.n	801f950 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801f87c:	4546      	cmp	r6, r8
 801f87e:	da67      	bge.n	801f950 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801f880:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801f882:	fb06 0202 	mla	r2, r6, r2, r0
 801f886:	1412      	asrs	r2, r2, #16
 801f888:	d462      	bmi.n	801f950 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801f88a:	42ba      	cmp	r2, r7
 801f88c:	da60      	bge.n	801f950 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801f88e:	1cee      	adds	r6, r5, #3
 801f890:	4699      	mov	r9, r3
 801f892:	f1b9 0f00 	cmp.w	r9, #0
 801f896:	dd5f      	ble.n	801f958 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801f898:	1422      	asrs	r2, r4, #16
 801f89a:	9902      	ldr	r1, [sp, #8]
 801f89c:	1407      	asrs	r7, r0, #16
 801f89e:	fb01 2707 	mla	r7, r1, r7, r2
 801f8a2:	9903      	ldr	r1, [sp, #12]
 801f8a4:	087a      	lsrs	r2, r7, #1
 801f8a6:	5c8a      	ldrb	r2, [r1, r2]
 801f8a8:	07f9      	lsls	r1, r7, #31
 801f8aa:	bf54      	ite	pl
 801f8ac:	f002 020f 	andpl.w	r2, r2, #15
 801f8b0:	1112      	asrmi	r2, r2, #4
 801f8b2:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801f8b6:	b2d2      	uxtb	r2, r2
 801f8b8:	2a00      	cmp	r2, #0
 801f8ba:	d042      	beq.n	801f942 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801f8bc:	497b      	ldr	r1, [pc, #492]	; (801faac <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 801f8be:	680f      	ldr	r7, [r1, #0]
 801f8c0:	9905      	ldr	r1, [sp, #20]
 801f8c2:	fa5f fb87 	uxtb.w	fp, r7
 801f8c6:	434a      	muls	r2, r1
 801f8c8:	f102 0801 	add.w	r8, r2, #1
 801f8cc:	eb08 2222 	add.w	r2, r8, r2, asr #8
 801f8d0:	f816 8c03 	ldrb.w	r8, [r6, #-3]
 801f8d4:	1212      	asrs	r2, r2, #8
 801f8d6:	fa1f fa82 	uxth.w	sl, r2
 801f8da:	43d2      	mvns	r2, r2
 801f8dc:	fb1b fb0a 	smulbb	fp, fp, sl
 801f8e0:	b2d2      	uxtb	r2, r2
 801f8e2:	fb08 b802 	mla	r8, r8, r2, fp
 801f8e6:	fa1f f888 	uxth.w	r8, r8
 801f8ea:	f108 0b01 	add.w	fp, r8, #1
 801f8ee:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801f8f2:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801f8f6:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801f8fa:	fb1b fb0a 	smulbb	fp, fp, sl
 801f8fe:	ea4f 2828 	mov.w	r8, r8, asr #8
 801f902:	fb17 fa0a 	smulbb	sl, r7, sl
 801f906:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801f90a:	f806 8c03 	strb.w	r8, [r6, #-3]
 801f90e:	f816 8c02 	ldrb.w	r8, [r6, #-2]
 801f912:	fb07 aa02 	mla	sl, r7, r2, sl
 801f916:	fb08 b802 	mla	r8, r8, r2, fp
 801f91a:	fa1f fa8a 	uxth.w	sl, sl
 801f91e:	fa1f f888 	uxth.w	r8, r8
 801f922:	f10a 0701 	add.w	r7, sl, #1
 801f926:	f108 0b01 	add.w	fp, r8, #1
 801f92a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801f92e:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801f932:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801f936:	ea4f 2828 	mov.w	r8, r8, asr #8
 801f93a:	f806 ac01 	strb.w	sl, [r6, #-1]
 801f93e:	f806 8c02 	strb.w	r8, [r6, #-2]
 801f942:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801f944:	4474      	add	r4, lr
 801f946:	3603      	adds	r6, #3
 801f948:	f109 39ff 	add.w	r9, r9, #4294967295
 801f94c:	4410      	add	r0, r2
 801f94e:	e7a0      	b.n	801f892 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801f950:	2700      	movs	r7, #0
 801f952:	1bda      	subs	r2, r3, r7
 801f954:	2a00      	cmp	r2, #0
 801f956:	dc3e      	bgt.n	801f9d6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801f958:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f95c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f960:	441d      	add	r5, r3
 801f962:	9b01      	ldr	r3, [sp, #4]
 801f964:	2b00      	cmp	r3, #0
 801f966:	f340 809e 	ble.w	801faa6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801f96a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f96e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f970:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f974:	eeb0 6a62 	vmov.f32	s12, s5
 801f978:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f97c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f980:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f984:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801f988:	eeb0 6a43 	vmov.f32	s12, s6
 801f98c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f990:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801f994:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f998:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f99c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f9a0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f9a4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f9a8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f9ac:	ee12 2a90 	vmov	r2, s5
 801f9b0:	eef0 2a47 	vmov.f32	s5, s14
 801f9b4:	fb92 fef3 	sdiv	lr, r2, r3
 801f9b8:	ee13 2a10 	vmov	r2, s6
 801f9bc:	eeb0 3a67 	vmov.f32	s6, s15
 801f9c0:	fb92 f3f3 	sdiv	r3, r2, r3
 801f9c4:	9314      	str	r3, [sp, #80]	; 0x50
 801f9c6:	9b01      	ldr	r3, [sp, #4]
 801f9c8:	9a04      	ldr	r2, [sp, #16]
 801f9ca:	3b01      	subs	r3, #1
 801f9cc:	9301      	str	r3, [sp, #4]
 801f9ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f9d0:	bf08      	it	eq
 801f9d2:	4613      	moveq	r3, r2
 801f9d4:	e72b      	b.n	801f82e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801f9d6:	1426      	asrs	r6, r4, #16
 801f9d8:	d460      	bmi.n	801fa9c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801f9da:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801f9de:	42b2      	cmp	r2, r6
 801f9e0:	dd5c      	ble.n	801fa9c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801f9e2:	ea5f 4820 	movs.w	r8, r0, asr #16
 801f9e6:	d459      	bmi.n	801fa9c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801f9e8:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801f9ec:	4542      	cmp	r2, r8
 801f9ee:	dd55      	ble.n	801fa9c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801f9f0:	9a02      	ldr	r2, [sp, #8]
 801f9f2:	9903      	ldr	r1, [sp, #12]
 801f9f4:	fb08 6602 	mla	r6, r8, r2, r6
 801f9f8:	0872      	lsrs	r2, r6, #1
 801f9fa:	07f6      	lsls	r6, r6, #31
 801f9fc:	5c8a      	ldrb	r2, [r1, r2]
 801f9fe:	bf54      	ite	pl
 801fa00:	f002 020f 	andpl.w	r2, r2, #15
 801fa04:	1112      	asrmi	r2, r2, #4
 801fa06:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801fa0a:	b2d2      	uxtb	r2, r2
 801fa0c:	2a00      	cmp	r2, #0
 801fa0e:	d045      	beq.n	801fa9c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801fa10:	4926      	ldr	r1, [pc, #152]	; (801faac <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 801fa12:	f8d1 8000 	ldr.w	r8, [r1]
 801fa16:	9905      	ldr	r1, [sp, #20]
 801fa18:	fa5f fb88 	uxtb.w	fp, r8
 801fa1c:	434a      	muls	r2, r1
 801fa1e:	1c56      	adds	r6, r2, #1
 801fa20:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801fa24:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801fa28:	1212      	asrs	r2, r2, #8
 801fa2a:	f815 9006 	ldrb.w	r9, [r5, r6]
 801fa2e:	fa1f fa82 	uxth.w	sl, r2
 801fa32:	43d2      	mvns	r2, r2
 801fa34:	fb1b fb0a 	smulbb	fp, fp, sl
 801fa38:	b2d2      	uxtb	r2, r2
 801fa3a:	fb09 b902 	mla	r9, r9, r2, fp
 801fa3e:	fa1f f989 	uxth.w	r9, r9
 801fa42:	f109 0b01 	add.w	fp, r9, #1
 801fa46:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801fa4a:	f3c8 2b07 	ubfx	fp, r8, #8, #8
 801fa4e:	f3c8 4807 	ubfx	r8, r8, #16, #8
 801fa52:	fb1b fb0a 	smulbb	fp, fp, sl
 801fa56:	ea4f 2929 	mov.w	r9, r9, asr #8
 801fa5a:	fb18 fa0a 	smulbb	sl, r8, sl
 801fa5e:	f805 9006 	strb.w	r9, [r5, r6]
 801fa62:	442e      	add	r6, r5
 801fa64:	f896 8002 	ldrb.w	r8, [r6, #2]
 801fa68:	f896 9001 	ldrb.w	r9, [r6, #1]
 801fa6c:	fb08 aa02 	mla	sl, r8, r2, sl
 801fa70:	fb09 b902 	mla	r9, r9, r2, fp
 801fa74:	fa1f fa8a 	uxth.w	sl, sl
 801fa78:	fa1f f989 	uxth.w	r9, r9
 801fa7c:	f10a 0801 	add.w	r8, sl, #1
 801fa80:	f109 0b01 	add.w	fp, r9, #1
 801fa84:	eb08 2a1a 	add.w	sl, r8, sl, lsr #8
 801fa88:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801fa8c:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801fa90:	ea4f 2929 	mov.w	r9, r9, asr #8
 801fa94:	f886 a002 	strb.w	sl, [r6, #2]
 801fa98:	f886 9001 	strb.w	r9, [r6, #1]
 801fa9c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801fa9e:	4474      	add	r4, lr
 801faa0:	3701      	adds	r7, #1
 801faa2:	4410      	add	r0, r2
 801faa4:	e755      	b.n	801f952 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x166>
 801faa6:	b007      	add	sp, #28
 801faa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801faac:	24026184 	.word	0x24026184

0801fab0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fab4:	b085      	sub	sp, #20
 801fab6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801faba:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801fabc:	9203      	str	r2, [sp, #12]
 801fabe:	6860      	ldr	r0, [r4, #4]
 801fac0:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801fac4:	9100      	str	r1, [sp, #0]
 801fac6:	e9dd 2614 	ldrd	r2, r6, [sp, #80]	; 0x50
 801faca:	fb00 2606 	mla	r6, r0, r6, r2
 801face:	6822      	ldr	r2, [r4, #0]
 801fad0:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801fad4:	4416      	add	r6, r2
 801fad6:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801fada:	3201      	adds	r2, #1
 801fadc:	f022 0201 	bic.w	r2, r2, #1
 801fae0:	9201      	str	r2, [sp, #4]
 801fae2:	f8dc 2000 	ldr.w	r2, [ip]
 801fae6:	9202      	str	r2, [sp, #8]
 801fae8:	9a00      	ldr	r2, [sp, #0]
 801faea:	2a00      	cmp	r2, #0
 801faec:	dc03      	bgt.n	801faf6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801faee:	9a03      	ldr	r2, [sp, #12]
 801faf0:	2a00      	cmp	r2, #0
 801faf2:	f340 8140 	ble.w	801fd76 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 801faf6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801faf8:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801fafc:	f502 4500 	add.w	r5, r2, #32768	; 0x8000
 801fb00:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801fb02:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801fb06:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801fb0a:	2b00      	cmp	r3, #0
 801fb0c:	dd0e      	ble.n	801fb2c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801fb0e:	142a      	asrs	r2, r5, #16
 801fb10:	d405      	bmi.n	801fb1e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801fb12:	4572      	cmp	r2, lr
 801fb14:	da03      	bge.n	801fb1e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801fb16:	1422      	asrs	r2, r4, #16
 801fb18:	d401      	bmi.n	801fb1e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801fb1a:	42ba      	cmp	r2, r7
 801fb1c:	db07      	blt.n	801fb2e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801fb1e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801fb20:	3b01      	subs	r3, #1
 801fb22:	3603      	adds	r6, #3
 801fb24:	4415      	add	r5, r2
 801fb26:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801fb28:	4414      	add	r4, r2
 801fb2a:	e7ee      	b.n	801fb0a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801fb2c:	d072      	beq.n	801fc14 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801fb2e:	1e5a      	subs	r2, r3, #1
 801fb30:	9811      	ldr	r0, [sp, #68]	; 0x44
 801fb32:	fb00 5002 	mla	r0, r0, r2, r5
 801fb36:	1400      	asrs	r0, r0, #16
 801fb38:	d463      	bmi.n	801fc02 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801fb3a:	4570      	cmp	r0, lr
 801fb3c:	da61      	bge.n	801fc02 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801fb3e:	9812      	ldr	r0, [sp, #72]	; 0x48
 801fb40:	fb00 4202 	mla	r2, r0, r2, r4
 801fb44:	1412      	asrs	r2, r2, #16
 801fb46:	d45c      	bmi.n	801fc02 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801fb48:	42ba      	cmp	r2, r7
 801fb4a:	da5a      	bge.n	801fc02 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801fb4c:	1cf0      	adds	r0, r6, #3
 801fb4e:	469a      	mov	sl, r3
 801fb50:	f1ba 0f00 	cmp.w	sl, #0
 801fb54:	dd59      	ble.n	801fc0a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 801fb56:	142a      	asrs	r2, r5, #16
 801fb58:	9901      	ldr	r1, [sp, #4]
 801fb5a:	1427      	asrs	r7, r4, #16
 801fb5c:	fb01 2707 	mla	r7, r1, r7, r2
 801fb60:	9902      	ldr	r1, [sp, #8]
 801fb62:	087a      	lsrs	r2, r7, #1
 801fb64:	5c8a      	ldrb	r2, [r1, r2]
 801fb66:	07f9      	lsls	r1, r7, #31
 801fb68:	bf54      	ite	pl
 801fb6a:	f002 020f 	andpl.w	r2, r2, #15
 801fb6e:	1112      	asrmi	r2, r2, #4
 801fb70:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801fb74:	b2d2      	uxtb	r2, r2
 801fb76:	2a00      	cmp	r2, #0
 801fb78:	d03b      	beq.n	801fbf2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801fb7a:	4980      	ldr	r1, [pc, #512]	; (801fd7c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 801fb7c:	2aff      	cmp	r2, #255	; 0xff
 801fb7e:	680f      	ldr	r7, [r1, #0]
 801fb80:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801fb84:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801fb88:	b2ff      	uxtb	r7, r7
 801fb8a:	f000 80ed 	beq.w	801fd68 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b8>
 801fb8e:	fa1f f882 	uxth.w	r8, r2
 801fb92:	43d2      	mvns	r2, r2
 801fb94:	f810 ec03 	ldrb.w	lr, [r0, #-3]
 801fb98:	fb17 f708 	smulbb	r7, r7, r8
 801fb9c:	b2d2      	uxtb	r2, r2
 801fb9e:	fb19 f908 	smulbb	r9, r9, r8
 801fba2:	fb0e 7702 	mla	r7, lr, r2, r7
 801fba6:	fb1b f808 	smulbb	r8, fp, r8
 801fbaa:	b2bf      	uxth	r7, r7
 801fbac:	f107 0e01 	add.w	lr, r7, #1
 801fbb0:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 801fbb4:	123f      	asrs	r7, r7, #8
 801fbb6:	f800 7c03 	strb.w	r7, [r0, #-3]
 801fbba:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 801fbbe:	fb07 9902 	mla	r9, r7, r2, r9
 801fbc2:	fa1f f989 	uxth.w	r9, r9
 801fbc6:	f109 0701 	add.w	r7, r9, #1
 801fbca:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801fbce:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 801fbd2:	fb07 8802 	mla	r8, r7, r2, r8
 801fbd6:	ea4f 2929 	mov.w	r9, r9, asr #8
 801fbda:	fa1f f888 	uxth.w	r8, r8
 801fbde:	f800 9c02 	strb.w	r9, [r0, #-2]
 801fbe2:	f108 0201 	add.w	r2, r8, #1
 801fbe6:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801fbea:	ea4f 2828 	mov.w	r8, r8, asr #8
 801fbee:	f800 8c01 	strb.w	r8, [r0, #-1]
 801fbf2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801fbf4:	3003      	adds	r0, #3
 801fbf6:	f10a 3aff 	add.w	sl, sl, #4294967295
 801fbfa:	4415      	add	r5, r2
 801fbfc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801fbfe:	4414      	add	r4, r2
 801fc00:	e7a6      	b.n	801fb50 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801fc02:	2700      	movs	r7, #0
 801fc04:	1bda      	subs	r2, r3, r7
 801fc06:	2a00      	cmp	r2, #0
 801fc08:	dc40      	bgt.n	801fc8c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801fc0a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801fc0e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801fc12:	441e      	add	r6, r3
 801fc14:	9b00      	ldr	r3, [sp, #0]
 801fc16:	2b00      	cmp	r3, #0
 801fc18:	f340 80ad 	ble.w	801fd76 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 801fc1c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fc20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fc22:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801fc26:	eeb0 6a62 	vmov.f32	s12, s5
 801fc2a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801fc2e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fc32:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fc36:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801fc3a:	eeb0 6a43 	vmov.f32	s12, s6
 801fc3e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fc42:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801fc46:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801fc4a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801fc4e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801fc52:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801fc56:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801fc5a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801fc5e:	ee12 2a90 	vmov	r2, s5
 801fc62:	eef0 2a47 	vmov.f32	s5, s14
 801fc66:	fb92 f3f3 	sdiv	r3, r2, r3
 801fc6a:	ee13 2a10 	vmov	r2, s6
 801fc6e:	9311      	str	r3, [sp, #68]	; 0x44
 801fc70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fc72:	eeb0 3a67 	vmov.f32	s6, s15
 801fc76:	fb92 f3f3 	sdiv	r3, r2, r3
 801fc7a:	9312      	str	r3, [sp, #72]	; 0x48
 801fc7c:	9b00      	ldr	r3, [sp, #0]
 801fc7e:	9a03      	ldr	r2, [sp, #12]
 801fc80:	3b01      	subs	r3, #1
 801fc82:	9300      	str	r3, [sp, #0]
 801fc84:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fc86:	bf08      	it	eq
 801fc88:	4613      	moveq	r3, r2
 801fc8a:	e72d      	b.n	801fae8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801fc8c:	1428      	asrs	r0, r5, #16
 801fc8e:	d45c      	bmi.n	801fd4a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801fc90:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801fc94:	4282      	cmp	r2, r0
 801fc96:	dd58      	ble.n	801fd4a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801fc98:	ea5f 4e24 	movs.w	lr, r4, asr #16
 801fc9c:	d455      	bmi.n	801fd4a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801fc9e:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801fca2:	4572      	cmp	r2, lr
 801fca4:	dd51      	ble.n	801fd4a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801fca6:	9a01      	ldr	r2, [sp, #4]
 801fca8:	9902      	ldr	r1, [sp, #8]
 801fcaa:	fb0e 0002 	mla	r0, lr, r2, r0
 801fcae:	0842      	lsrs	r2, r0, #1
 801fcb0:	07c0      	lsls	r0, r0, #31
 801fcb2:	5c8a      	ldrb	r2, [r1, r2]
 801fcb4:	bf54      	ite	pl
 801fcb6:	f002 020f 	andpl.w	r2, r2, #15
 801fcba:	1112      	asrmi	r2, r2, #4
 801fcbc:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801fcc0:	b2d2      	uxtb	r2, r2
 801fcc2:	2a00      	cmp	r2, #0
 801fcc4:	d041      	beq.n	801fd4a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801fcc6:	492d      	ldr	r1, [pc, #180]	; (801fd7c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 801fcc8:	2aff      	cmp	r2, #255	; 0xff
 801fcca:	6808      	ldr	r0, [r1, #0]
 801fccc:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 801fcd0:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801fcd4:	fa5f fe80 	uxtb.w	lr, r0
 801fcd8:	ea4f 0047 	mov.w	r0, r7, lsl #1
 801fcdc:	d03b      	beq.n	801fd56 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801fcde:	fa1f f982 	uxth.w	r9, r2
 801fce2:	4438      	add	r0, r7
 801fce4:	43d2      	mvns	r2, r2
 801fce6:	f816 8000 	ldrb.w	r8, [r6, r0]
 801fcea:	fb1e fe09 	smulbb	lr, lr, r9
 801fcee:	fb1a fa09 	smulbb	sl, sl, r9
 801fcf2:	b2d2      	uxtb	r2, r2
 801fcf4:	fb1b f909 	smulbb	r9, fp, r9
 801fcf8:	fb08 ee02 	mla	lr, r8, r2, lr
 801fcfc:	fa1f fe8e 	uxth.w	lr, lr
 801fd00:	f10e 0801 	add.w	r8, lr, #1
 801fd04:	eb08 2e1e 	add.w	lr, r8, lr, lsr #8
 801fd08:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801fd0c:	f806 e000 	strb.w	lr, [r6, r0]
 801fd10:	4430      	add	r0, r6
 801fd12:	f890 e001 	ldrb.w	lr, [r0, #1]
 801fd16:	fb0e aa02 	mla	sl, lr, r2, sl
 801fd1a:	fa1f fa8a 	uxth.w	sl, sl
 801fd1e:	f10a 0e01 	add.w	lr, sl, #1
 801fd22:	eb0e 2a1a 	add.w	sl, lr, sl, lsr #8
 801fd26:	f890 e002 	ldrb.w	lr, [r0, #2]
 801fd2a:	fb0e 9902 	mla	r9, lr, r2, r9
 801fd2e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801fd32:	fa1f f989 	uxth.w	r9, r9
 801fd36:	f880 a001 	strb.w	sl, [r0, #1]
 801fd3a:	f109 0201 	add.w	r2, r9, #1
 801fd3e:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 801fd42:	ea4f 2929 	mov.w	r9, r9, asr #8
 801fd46:	f880 9002 	strb.w	r9, [r0, #2]
 801fd4a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801fd4c:	3701      	adds	r7, #1
 801fd4e:	4415      	add	r5, r2
 801fd50:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801fd52:	4414      	add	r4, r2
 801fd54:	e756      	b.n	801fc04 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801fd56:	4438      	add	r0, r7
 801fd58:	f806 e000 	strb.w	lr, [r6, r0]
 801fd5c:	4430      	add	r0, r6
 801fd5e:	f880 a001 	strb.w	sl, [r0, #1]
 801fd62:	f880 b002 	strb.w	fp, [r0, #2]
 801fd66:	e7f0      	b.n	801fd4a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801fd68:	f800 7c03 	strb.w	r7, [r0, #-3]
 801fd6c:	f800 9c02 	strb.w	r9, [r0, #-2]
 801fd70:	f800 bc01 	strb.w	fp, [r0, #-1]
 801fd74:	e73d      	b.n	801fbf2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801fd76:	b005      	add	sp, #20
 801fd78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fd7c:	24026184 	.word	0x24026184

0801fd80 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801fd80:	4770      	bx	lr

0801fd82 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801fd82:	4770      	bx	lr

0801fd84 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801fd84:	4770      	bx	lr

0801fd86 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801fd86:	4770      	bx	lr

0801fd88 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801fd88:	4770      	bx	lr

0801fd8a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801fd8a:	4770      	bx	lr

0801fd8c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801fd8c:	4770      	bx	lr

0801fd8e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801fd8e:	4770      	bx	lr

0801fd90 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801fd90:	4770      	bx	lr

0801fd92 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801fd92:	4770      	bx	lr

0801fd94 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801fd94:	4770      	bx	lr

0801fd96 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801fd96:	4770      	bx	lr

0801fd98 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801fd98:	4770      	bx	lr

0801fd9a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801fd9a:	4770      	bx	lr

0801fd9c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801fd9c:	4770      	bx	lr

0801fd9e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801fd9e:	4770      	bx	lr

0801fda0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801fda0:	4770      	bx	lr

0801fda2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801fda2:	4770      	bx	lr

0801fda4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801fda4:	4770      	bx	lr

0801fda6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801fda6:	4770      	bx	lr

0801fda8 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801fda8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fdaa:	4606      	mov	r6, r0
 801fdac:	b087      	sub	sp, #28
 801fdae:	4615      	mov	r5, r2
 801fdb0:	461f      	mov	r7, r3
 801fdb2:	b353      	cbz	r3, 801fe0a <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801fdb4:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801fdb8:	2b00      	cmp	r3, #0
 801fdba:	dd26      	ble.n	801fe0a <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801fdbc:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801fdc0:	2b00      	cmp	r3, #0
 801fdc2:	dd22      	ble.n	801fe0a <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801fdc4:	6808      	ldr	r0, [r1, #0]
 801fdc6:	aa04      	add	r2, sp, #16
 801fdc8:	6849      	ldr	r1, [r1, #4]
 801fdca:	4c1b      	ldr	r4, [pc, #108]	; (801fe38 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 801fdcc:	c203      	stmia	r2!, {r0, r1}
 801fdce:	a804      	add	r0, sp, #16
 801fdd0:	f7fb fae4 	bl	801b39c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801fdd4:	6820      	ldr	r0, [r4, #0]
 801fdd6:	6803      	ldr	r3, [r0, #0]
 801fdd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801fdda:	4798      	blx	r3
 801fddc:	2fff      	cmp	r7, #255	; 0xff
 801fdde:	d016      	beq.n	801fe0e <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 801fde0:	f010 0f08 	tst.w	r0, #8
 801fde4:	6820      	ldr	r0, [r4, #0]
 801fde6:	d015      	beq.n	801fe14 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x6c>
 801fde8:	2400      	movs	r4, #0
 801fdea:	6801      	ldr	r1, [r0, #0]
 801fdec:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801fdf0:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801fdf4:	e9cd 7402 	strd	r7, r4, [sp, #8]
 801fdf8:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 801fdfc:	9401      	str	r4, [sp, #4]
 801fdfe:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801fe02:	9400      	str	r4, [sp, #0]
 801fe04:	6e0c      	ldr	r4, [r1, #96]	; 0x60
 801fe06:	4629      	mov	r1, r5
 801fe08:	47a0      	blx	r4
 801fe0a:	b007      	add	sp, #28
 801fe0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fe0e:	f010 0f02 	tst.w	r0, #2
 801fe12:	e7e7      	b.n	801fde4 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3c>
 801fe14:	6803      	ldr	r3, [r0, #0]
 801fe16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801fe18:	4798      	blx	r3
 801fe1a:	4b08      	ldr	r3, [pc, #32]	; (801fe3c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x94>)
 801fe1c:	4601      	mov	r1, r0
 801fe1e:	4630      	mov	r0, r6
 801fe20:	881a      	ldrh	r2, [r3, #0]
 801fe22:	6833      	ldr	r3, [r6, #0]
 801fe24:	e9cd 5700 	strd	r5, r7, [sp]
 801fe28:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 801fe2a:	ab04      	add	r3, sp, #16
 801fe2c:	47a8      	blx	r5
 801fe2e:	6820      	ldr	r0, [r4, #0]
 801fe30:	6803      	ldr	r3, [r0, #0]
 801fe32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801fe34:	4798      	blx	r3
 801fe36:	e7e8      	b.n	801fe0a <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801fe38:	2402617c 	.word	0x2402617c
 801fe3c:	24026176 	.word	0x24026176

0801fe40 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801fe40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801fe44:	b08b      	sub	sp, #44	; 0x2c
 801fe46:	460d      	mov	r5, r1
 801fe48:	4616      	mov	r6, r2
 801fe4a:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
 801fe4e:	f1b8 0f00 	cmp.w	r8, #0
 801fe52:	d047      	beq.n	801fee4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 801fe54:	6810      	ldr	r0, [r2, #0]
 801fe56:	ac06      	add	r4, sp, #24
 801fe58:	6851      	ldr	r1, [r2, #4]
 801fe5a:	4f51      	ldr	r7, [pc, #324]	; (801ffa0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>)
 801fe5c:	c403      	stmia	r4!, {r0, r1}
 801fe5e:	6818      	ldr	r0, [r3, #0]
 801fe60:	ac08      	add	r4, sp, #32
 801fe62:	6859      	ldr	r1, [r3, #4]
 801fe64:	c403      	stmia	r4!, {r0, r1}
 801fe66:	a806      	add	r0, sp, #24
 801fe68:	f7fb fa98 	bl	801b39c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801fe6c:	4631      	mov	r1, r6
 801fe6e:	a808      	add	r0, sp, #32
 801fe70:	f7fb fad8 	bl	801b424 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801fe74:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801fe78:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801fe7c:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801fe80:	6838      	ldr	r0, [r7, #0]
 801fe82:	fb11 2103 	smlabb	r1, r1, r3, r2
 801fe86:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	; 0x24
 801fe8a:	f9bd 4026 	ldrsh.w	r4, [sp, #38]	; 0x26
 801fe8e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801fe92:	440d      	add	r5, r1
 801fe94:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801fe98:	440a      	add	r2, r1
 801fe9a:	f8ad 2020 	strh.w	r2, [sp, #32]
 801fe9e:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801fea2:	4413      	add	r3, r2
 801fea4:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801fea8:	6803      	ldr	r3, [r0, #0]
 801feaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801feac:	4798      	blx	r3
 801feae:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801feb2:	d01a      	beq.n	801feea <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xaa>
 801feb4:	f010 0f04 	tst.w	r0, #4
 801feb8:	6838      	ldr	r0, [r7, #0]
 801feba:	d019      	beq.n	801fef0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb0>
 801febc:	2100      	movs	r1, #0
 801febe:	6807      	ldr	r7, [r0, #0]
 801fec0:	b2a4      	uxth	r4, r4
 801fec2:	f8cd 800c 	str.w	r8, [sp, #12]
 801fec6:	b2b6      	uxth	r6, r6
 801fec8:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801fecc:	9401      	str	r4, [sp, #4]
 801fece:	9600      	str	r6, [sp, #0]
 801fed0:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801fed4:	e9cd 1104 	strd	r1, r1, [sp, #16]
 801fed8:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801fedc:	9102      	str	r1, [sp, #8]
 801fede:	4629      	mov	r1, r5
 801fee0:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 801fee2:	47a0      	blx	r4
 801fee4:	b00b      	add	sp, #44	; 0x2c
 801fee6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801feea:	f010 0f01 	tst.w	r0, #1
 801feee:	e7e3      	b.n	801feb8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x78>
 801fef0:	6803      	ldr	r3, [r0, #0]
 801fef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801fef4:	4798      	blx	r3
 801fef6:	4a2b      	ldr	r2, [pc, #172]	; (801ffa4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x164>)
 801fef8:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 801fefc:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801ff00:	8813      	ldrh	r3, [r2, #0]
 801ff02:	f9bd c020 	ldrsh.w	ip, [sp, #32]
 801ff06:	fb03 f404 	mul.w	r4, r3, r4
 801ff0a:	fb03 c101 	mla	r1, r3, r1, ip
 801ff0e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801ff12:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801ff16:	4408      	add	r0, r1
 801ff18:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 801ff1c:	4404      	add	r4, r0
 801ff1e:	d02e      	beq.n	801ff7e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 801ff20:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 801ff24:	1b9b      	subs	r3, r3, r6
 801ff26:	f1c8 0cff 	rsb	ip, r8, #255	; 0xff
 801ff2a:	1b96      	subs	r6, r2, r6
 801ff2c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ff30:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801ff34:	42a0      	cmp	r0, r4
 801ff36:	d22d      	bcs.n	801ff94 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 801ff38:	eb00 0e01 	add.w	lr, r0, r1
 801ff3c:	4570      	cmp	r0, lr
 801ff3e:	d210      	bcs.n	801ff62 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x122>
 801ff40:	f890 9000 	ldrb.w	r9, [r0]
 801ff44:	f815 2b01 	ldrb.w	r2, [r5], #1
 801ff48:	fb19 f90c 	smulbb	r9, r9, ip
 801ff4c:	fb02 9208 	mla	r2, r2, r8, r9
 801ff50:	b292      	uxth	r2, r2
 801ff52:	f102 0901 	add.w	r9, r2, #1
 801ff56:	eb09 2212 	add.w	r2, r9, r2, lsr #8
 801ff5a:	1212      	asrs	r2, r2, #8
 801ff5c:	f800 2b01 	strb.w	r2, [r0], #1
 801ff60:	e7ec      	b.n	801ff3c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfc>
 801ff62:	4418      	add	r0, r3
 801ff64:	4435      	add	r5, r6
 801ff66:	e7e5      	b.n	801ff34 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf4>
 801ff68:	8813      	ldrh	r3, [r2, #0]
 801ff6a:	1b9b      	subs	r3, r3, r6
 801ff6c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ff70:	4418      	add	r0, r3
 801ff72:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801ff76:	1b9b      	subs	r3, r3, r6
 801ff78:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ff7c:	441d      	add	r5, r3
 801ff7e:	42a0      	cmp	r0, r4
 801ff80:	d208      	bcs.n	801ff94 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 801ff82:	eb00 0c01 	add.w	ip, r0, r1
 801ff86:	4560      	cmp	r0, ip
 801ff88:	d2ee      	bcs.n	801ff68 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x128>
 801ff8a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801ff8e:	f800 3b01 	strb.w	r3, [r0], #1
 801ff92:	e7f8      	b.n	801ff86 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x146>
 801ff94:	6838      	ldr	r0, [r7, #0]
 801ff96:	6803      	ldr	r3, [r0, #0]
 801ff98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ff9a:	4798      	blx	r3
 801ff9c:	e7a2      	b.n	801fee4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 801ff9e:	bf00      	nop
 801ffa0:	2402617c 	.word	0x2402617c
 801ffa4:	24026176 	.word	0x24026176

0801ffa8 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 801ffa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ffaa:	2300      	movs	r3, #0
 801ffac:	b085      	sub	sp, #20
 801ffae:	9300      	str	r3, [sp, #0]
 801ffb0:	4b41      	ldr	r3, [pc, #260]	; (80200b8 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x110>)
 801ffb2:	781b      	ldrb	r3, [r3, #0]
 801ffb4:	2b00      	cmp	r3, #0
 801ffb6:	d136      	bne.n	8020026 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7e>
 801ffb8:	4a40      	ldr	r2, [pc, #256]	; (80200bc <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 801ffba:	f9b2 2000 	ldrsh.w	r2, [r2]
 801ffbe:	f8ad 2004 	strh.w	r2, [sp, #4]
 801ffc2:	2b00      	cmp	r3, #0
 801ffc4:	d131      	bne.n	802002a <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x82>
 801ffc6:	4b3e      	ldr	r3, [pc, #248]	; (80200c0 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 801ffc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ffcc:	ac02      	add	r4, sp, #8
 801ffce:	6808      	ldr	r0, [r1, #0]
 801ffd0:	f8ad 3006 	strh.w	r3, [sp, #6]
 801ffd4:	ab02      	add	r3, sp, #8
 801ffd6:	6849      	ldr	r1, [r1, #4]
 801ffd8:	4d3a      	ldr	r5, [pc, #232]	; (80200c4 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x11c>)
 801ffda:	c303      	stmia	r3!, {r0, r1}
 801ffdc:	4669      	mov	r1, sp
 801ffde:	4620      	mov	r0, r4
 801ffe0:	f7fb fa20 	bl	801b424 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801ffe4:	4668      	mov	r0, sp
 801ffe6:	f7fb f9d9 	bl	801b39c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ffea:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801ffee:	f8bd 2000 	ldrh.w	r2, [sp]
 801fff2:	462e      	mov	r6, r5
 801fff4:	6828      	ldr	r0, [r5, #0]
 801fff6:	4413      	add	r3, r2
 801fff8:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801fffc:	f8ad 3008 	strh.w	r3, [sp, #8]
 8020000:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8020004:	4413      	add	r3, r2
 8020006:	f8ad 300a 	strh.w	r3, [sp, #10]
 802000a:	6803      	ldr	r3, [r0, #0]
 802000c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802000e:	4798      	blx	r3
 8020010:	f010 0f01 	tst.w	r0, #1
 8020014:	d00b      	beq.n	802002e <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x86>
 8020016:	6828      	ldr	r0, [r5, #0]
 8020018:	6803      	ldr	r3, [r0, #0]
 802001a:	e894 0006 	ldmia.w	r4, {r1, r2}
 802001e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8020020:	4798      	blx	r3
 8020022:	b005      	add	sp, #20
 8020024:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020026:	4a26      	ldr	r2, [pc, #152]	; (80200c0 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 8020028:	e7c7      	b.n	801ffba <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 802002a:	4b24      	ldr	r3, [pc, #144]	; (80200bc <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 802002c:	e7cc      	b.n	801ffc8 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 802002e:	6830      	ldr	r0, [r6, #0]
 8020030:	f9bd 700e 	ldrsh.w	r7, [sp, #14]
 8020034:	6803      	ldr	r3, [r0, #0]
 8020036:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 802003a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802003c:	4798      	blx	r3
 802003e:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8020042:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8020046:	f8bd 4004 	ldrh.w	r4, [sp, #4]
 802004a:	fb14 3402 	smlabb	r4, r4, r2, r3
 802004e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8020052:	4404      	add	r4, r0
 8020054:	6830      	ldr	r0, [r6, #0]
 8020056:	6803      	ldr	r3, [r0, #0]
 8020058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802005a:	4798      	blx	r3
 802005c:	4917      	ldr	r1, [pc, #92]	; (80200bc <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 802005e:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 8020062:	880b      	ldrh	r3, [r1, #0]
 8020064:	f9bd c008 	ldrsh.w	ip, [sp, #8]
 8020068:	fb03 c202 	mla	r2, r3, r2, ip
 802006c:	437b      	muls	r3, r7
 802006e:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 8020072:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020076:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802007a:	4410      	add	r0, r2
 802007c:	18c2      	adds	r2, r0, r3
 802007e:	4290      	cmp	r0, r2
 8020080:	d214      	bcs.n	80200ac <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>
 8020082:	eb00 0c07 	add.w	ip, r0, r7
 8020086:	4560      	cmp	r0, ip
 8020088:	d204      	bcs.n	8020094 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xec>
 802008a:	f814 3b01 	ldrb.w	r3, [r4], #1
 802008e:	f800 3b01 	strb.w	r3, [r0], #1
 8020092:	e7f8      	b.n	8020086 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xde>
 8020094:	880b      	ldrh	r3, [r1, #0]
 8020096:	1b5b      	subs	r3, r3, r5
 8020098:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802009c:	4418      	add	r0, r3
 802009e:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80200a2:	1b5b      	subs	r3, r3, r5
 80200a4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80200a8:	441c      	add	r4, r3
 80200aa:	e7e8      	b.n	802007e <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd6>
 80200ac:	6830      	ldr	r0, [r6, #0]
 80200ae:	6803      	ldr	r3, [r0, #0]
 80200b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80200b2:	4798      	blx	r3
 80200b4:	e7b5      	b.n	8020022 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 80200b6:	bf00      	nop
 80200b8:	24026174 	.word	0x24026174
 80200bc:	24026176 	.word	0x24026176
 80200c0:	24026178 	.word	0x24026178
 80200c4:	2402617c 	.word	0x2402617c

080200c8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 80200c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80200cc:	b089      	sub	sp, #36	; 0x24
 80200ce:	4607      	mov	r7, r0
 80200d0:	4689      	mov	r9, r1
 80200d2:	4692      	mov	sl, r2
 80200d4:	ac08      	add	r4, sp, #32
 80200d6:	461e      	mov	r6, r3
 80200d8:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 80200dc:	4620      	mov	r0, r4
 80200de:	f7fe f8f1 	bl	801e2c4 <_ZNK8touchgfx6Bitmap7getDataEv>
 80200e2:	683b      	ldr	r3, [r7, #0]
 80200e4:	4605      	mov	r5, r0
 80200e6:	4620      	mov	r0, r4
 80200e8:	f8d3 8018 	ldr.w	r8, [r3, #24]
 80200ec:	f7fd fffe 	bl	801e0ec <_ZNK8touchgfx6Bitmap8getWidthEv>
 80200f0:	4683      	mov	fp, r0
 80200f2:	4620      	mov	r0, r4
 80200f4:	f7fe f82e 	bl	801e154 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80200f8:	4653      	mov	r3, sl
 80200fa:	464a      	mov	r2, r9
 80200fc:	4639      	mov	r1, r7
 80200fe:	9500      	str	r5, [sp, #0]
 8020100:	e9cd b001 	strd	fp, r0, [sp, #4]
 8020104:	a806      	add	r0, sp, #24
 8020106:	47c0      	blx	r8
 8020108:	a906      	add	r1, sp, #24
 802010a:	4630      	mov	r0, r6
 802010c:	f7fd fed2 	bl	801deb4 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>
 8020110:	4628      	mov	r0, r5
 8020112:	b009      	add	sp, #36	; 0x24
 8020114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020118 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8020118:	b510      	push	{r4, lr}
 802011a:	4604      	mov	r4, r0
 802011c:	2104      	movs	r1, #4
 802011e:	f006 f8ee 	bl	80262fe <_ZdlPvj>
 8020122:	4620      	mov	r0, r4
 8020124:	bd10      	pop	{r4, pc}

08020126 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8020126:	b510      	push	{r4, lr}
 8020128:	4604      	mov	r4, r0
 802012a:	2104      	movs	r1, #4
 802012c:	f006 f8e7 	bl	80262fe <_ZdlPvj>
 8020130:	4620      	mov	r0, r4
 8020132:	bd10      	pop	{r4, pc}

08020134 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8020134:	b510      	push	{r4, lr}
 8020136:	4604      	mov	r4, r0
 8020138:	2104      	movs	r1, #4
 802013a:	f006 f8e0 	bl	80262fe <_ZdlPvj>
 802013e:	4620      	mov	r0, r4
 8020140:	bd10      	pop	{r4, pc}

08020142 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8020142:	b510      	push	{r4, lr}
 8020144:	4604      	mov	r4, r0
 8020146:	2104      	movs	r1, #4
 8020148:	f006 f8d9 	bl	80262fe <_ZdlPvj>
 802014c:	4620      	mov	r0, r4
 802014e:	bd10      	pop	{r4, pc}

08020150 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8020150:	b510      	push	{r4, lr}
 8020152:	4604      	mov	r4, r0
 8020154:	2104      	movs	r1, #4
 8020156:	f006 f8d2 	bl	80262fe <_ZdlPvj>
 802015a:	4620      	mov	r0, r4
 802015c:	bd10      	pop	{r4, pc}

0802015e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 802015e:	b510      	push	{r4, lr}
 8020160:	4604      	mov	r4, r0
 8020162:	2104      	movs	r1, #4
 8020164:	f006 f8cb 	bl	80262fe <_ZdlPvj>
 8020168:	4620      	mov	r0, r4
 802016a:	bd10      	pop	{r4, pc}

0802016c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 802016c:	b510      	push	{r4, lr}
 802016e:	4604      	mov	r4, r0
 8020170:	2104      	movs	r1, #4
 8020172:	f006 f8c4 	bl	80262fe <_ZdlPvj>
 8020176:	4620      	mov	r0, r4
 8020178:	bd10      	pop	{r4, pc}

0802017a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 802017a:	b510      	push	{r4, lr}
 802017c:	4604      	mov	r4, r0
 802017e:	2104      	movs	r1, #4
 8020180:	f006 f8bd 	bl	80262fe <_ZdlPvj>
 8020184:	4620      	mov	r0, r4
 8020186:	bd10      	pop	{r4, pc}

08020188 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8020188:	b510      	push	{r4, lr}
 802018a:	4604      	mov	r4, r0
 802018c:	2104      	movs	r1, #4
 802018e:	f006 f8b6 	bl	80262fe <_ZdlPvj>
 8020192:	4620      	mov	r0, r4
 8020194:	bd10      	pop	{r4, pc}

08020196 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8020196:	b510      	push	{r4, lr}
 8020198:	4604      	mov	r4, r0
 802019a:	2104      	movs	r1, #4
 802019c:	f006 f8af 	bl	80262fe <_ZdlPvj>
 80201a0:	4620      	mov	r0, r4
 80201a2:	bd10      	pop	{r4, pc}

080201a4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 80201a4:	b510      	push	{r4, lr}
 80201a6:	4604      	mov	r4, r0
 80201a8:	2104      	movs	r1, #4
 80201aa:	f006 f8a8 	bl	80262fe <_ZdlPvj>
 80201ae:	4620      	mov	r0, r4
 80201b0:	bd10      	pop	{r4, pc}

080201b2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 80201b2:	b510      	push	{r4, lr}
 80201b4:	4604      	mov	r4, r0
 80201b6:	2104      	movs	r1, #4
 80201b8:	f006 f8a1 	bl	80262fe <_ZdlPvj>
 80201bc:	4620      	mov	r0, r4
 80201be:	bd10      	pop	{r4, pc}

080201c0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 80201c0:	b510      	push	{r4, lr}
 80201c2:	4604      	mov	r4, r0
 80201c4:	2104      	movs	r1, #4
 80201c6:	f006 f89a 	bl	80262fe <_ZdlPvj>
 80201ca:	4620      	mov	r0, r4
 80201cc:	bd10      	pop	{r4, pc}

080201ce <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 80201ce:	b510      	push	{r4, lr}
 80201d0:	4604      	mov	r4, r0
 80201d2:	2104      	movs	r1, #4
 80201d4:	f006 f893 	bl	80262fe <_ZdlPvj>
 80201d8:	4620      	mov	r0, r4
 80201da:	bd10      	pop	{r4, pc}

080201dc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 80201dc:	b510      	push	{r4, lr}
 80201de:	4604      	mov	r4, r0
 80201e0:	2104      	movs	r1, #4
 80201e2:	f006 f88c 	bl	80262fe <_ZdlPvj>
 80201e6:	4620      	mov	r0, r4
 80201e8:	bd10      	pop	{r4, pc}

080201ea <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 80201ea:	b510      	push	{r4, lr}
 80201ec:	4604      	mov	r4, r0
 80201ee:	2104      	movs	r1, #4
 80201f0:	f006 f885 	bl	80262fe <_ZdlPvj>
 80201f4:	4620      	mov	r0, r4
 80201f6:	bd10      	pop	{r4, pc}

080201f8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 80201f8:	b510      	push	{r4, lr}
 80201fa:	4604      	mov	r4, r0
 80201fc:	2104      	movs	r1, #4
 80201fe:	f006 f87e 	bl	80262fe <_ZdlPvj>
 8020202:	4620      	mov	r0, r4
 8020204:	bd10      	pop	{r4, pc}

08020206 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 8020206:	b510      	push	{r4, lr}
 8020208:	4604      	mov	r4, r0
 802020a:	2104      	movs	r1, #4
 802020c:	f006 f877 	bl	80262fe <_ZdlPvj>
 8020210:	4620      	mov	r0, r4
 8020212:	bd10      	pop	{r4, pc}

08020214 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 8020214:	b510      	push	{r4, lr}
 8020216:	4604      	mov	r4, r0
 8020218:	2104      	movs	r1, #4
 802021a:	f006 f870 	bl	80262fe <_ZdlPvj>
 802021e:	4620      	mov	r0, r4
 8020220:	bd10      	pop	{r4, pc}

08020222 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 8020222:	b510      	push	{r4, lr}
 8020224:	4604      	mov	r4, r0
 8020226:	2104      	movs	r1, #4
 8020228:	f006 f869 	bl	80262fe <_ZdlPvj>
 802022c:	4620      	mov	r0, r4
 802022e:	bd10      	pop	{r4, pc}

08020230 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 8020230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020234:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8020238:	9c06      	ldr	r4, [sp, #24]
 802023a:	2800      	cmp	r0, #0
 802023c:	d06e      	beq.n	802031c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 802023e:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 8020242:	2d00      	cmp	r5, #0
 8020244:	dd6a      	ble.n	802031c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8020246:	f9b3 c006 	ldrsh.w	ip, [r3, #6]
 802024a:	f1bc 0f00 	cmp.w	ip, #0
 802024e:	dd65      	ble.n	802031c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8020250:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
 8020254:	28ff      	cmp	r0, #255	; 0xff
 8020256:	f9b3 3000 	ldrsh.w	r3, [r3]
 802025a:	f3c4 2707 	ubfx	r7, r4, #8, #8
 802025e:	fb02 3306 	mla	r3, r2, r6, r3
 8020262:	f3c4 4607 	ubfx	r6, r4, #16, #8
 8020266:	b2e4      	uxtb	r4, r4
 8020268:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802026c:	4419      	add	r1, r3
 802026e:	fb02 f30c 	mul.w	r3, r2, ip
 8020272:	eba2 0205 	sub.w	r2, r2, r5
 8020276:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802027a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802027e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020282:	440b      	add	r3, r1
 8020284:	d03e      	beq.n	8020304 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd4>
 8020286:	fa1f fc80 	uxth.w	ip, r0
 802028a:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 802028e:	fb06 f60c 	mul.w	r6, r6, ip
 8020292:	b280      	uxth	r0, r0
 8020294:	fb07 f70c 	mul.w	r7, r7, ip
 8020298:	fb04 f40c 	mul.w	r4, r4, ip
 802029c:	4299      	cmp	r1, r3
 802029e:	d23d      	bcs.n	802031c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 80202a0:	eb01 0c05 	add.w	ip, r1, r5
 80202a4:	458c      	cmp	ip, r1
 80202a6:	f101 0e03 	add.w	lr, r1, #3
 80202aa:	d928      	bls.n	80202fe <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xce>
 80202ac:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 80202b0:	fb11 f100 	smulbb	r1, r1, r0
 80202b4:	4421      	add	r1, r4
 80202b6:	b289      	uxth	r1, r1
 80202b8:	f101 0801 	add.w	r8, r1, #1
 80202bc:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 80202c0:	1209      	asrs	r1, r1, #8
 80202c2:	f80e 1c03 	strb.w	r1, [lr, #-3]
 80202c6:	f81e 1c02 	ldrb.w	r1, [lr, #-2]
 80202ca:	fb11 f100 	smulbb	r1, r1, r0
 80202ce:	4439      	add	r1, r7
 80202d0:	b289      	uxth	r1, r1
 80202d2:	f101 0801 	add.w	r8, r1, #1
 80202d6:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 80202da:	1209      	asrs	r1, r1, #8
 80202dc:	f80e 1c02 	strb.w	r1, [lr, #-2]
 80202e0:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 80202e4:	fb11 f100 	smulbb	r1, r1, r0
 80202e8:	4431      	add	r1, r6
 80202ea:	b289      	uxth	r1, r1
 80202ec:	f101 0801 	add.w	r8, r1, #1
 80202f0:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 80202f4:	1209      	asrs	r1, r1, #8
 80202f6:	f80e 1c01 	strb.w	r1, [lr, #-1]
 80202fa:	4671      	mov	r1, lr
 80202fc:	e7d2      	b.n	80202a4 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x74>
 80202fe:	4411      	add	r1, r2
 8020300:	e7cc      	b.n	802029c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6c>
 8020302:	4411      	add	r1, r2
 8020304:	4299      	cmp	r1, r3
 8020306:	d209      	bcs.n	802031c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8020308:	1948      	adds	r0, r1, r5
 802030a:	4281      	cmp	r1, r0
 802030c:	d2f9      	bcs.n	8020302 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd2>
 802030e:	700c      	strb	r4, [r1, #0]
 8020310:	3103      	adds	r1, #3
 8020312:	f801 7c02 	strb.w	r7, [r1, #-2]
 8020316:	f801 6c01 	strb.w	r6, [r1, #-1]
 802031a:	e7f6      	b.n	802030a <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xda>
 802031c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08020320 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 8020320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020324:	b093      	sub	sp, #76	; 0x4c
 8020326:	4699      	mov	r9, r3
 8020328:	4617      	mov	r7, r2
 802032a:	f9b3 2000 	ldrsh.w	r2, [r3]
 802032e:	f9bd 8074 	ldrsh.w	r8, [sp, #116]	; 0x74
 8020332:	4604      	mov	r4, r0
 8020334:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8020338:	a80c      	add	r0, sp, #48	; 0x30
 802033a:	f9bd 6078 	ldrsh.w	r6, [sp, #120]	; 0x78
 802033e:	460d      	mov	r5, r1
 8020340:	4649      	mov	r1, r9
 8020342:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 8020346:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 802034a:	f8ad 8034 	strh.w	r8, [sp, #52]	; 0x34
 802034e:	f8ad 6036 	strh.w	r6, [sp, #54]	; 0x36
 8020352:	f7f8 fdb9 	bl	8018ec8 <_ZN8touchgfx4RectaNERKS0_>
 8020356:	4639      	mov	r1, r7
 8020358:	a80c      	add	r0, sp, #48	; 0x30
 802035a:	f7f8 fdb5 	bl	8018ec8 <_ZN8touchgfx4RectaNERKS0_>
 802035e:	4b78      	ldr	r3, [pc, #480]	; (8020540 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 8020360:	8818      	ldrh	r0, [r3, #0]
 8020362:	4b78      	ldr	r3, [pc, #480]	; (8020544 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>)
 8020364:	b202      	sxth	r2, r0
 8020366:	8819      	ldrh	r1, [r3, #0]
 8020368:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 802036c:	b20f      	sxth	r7, r1
 802036e:	2b00      	cmp	r3, #0
 8020370:	da07      	bge.n	8020382 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x62>
 8020372:	f8bd c034 	ldrh.w	ip, [sp, #52]	; 0x34
 8020376:	4463      	add	r3, ip
 8020378:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 802037c:	2300      	movs	r3, #0
 802037e:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 8020382:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8020386:	f9bd c034 	ldrsh.w	ip, [sp, #52]	; 0x34
 802038a:	1ad2      	subs	r2, r2, r3
 802038c:	4594      	cmp	ip, r2
 802038e:	bfc4      	itt	gt
 8020390:	1ac2      	subgt	r2, r0, r3
 8020392:	f8ad 2034 	strhgt.w	r2, [sp, #52]	; 0x34
 8020396:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 802039a:	2a00      	cmp	r2, #0
 802039c:	da07      	bge.n	80203ae <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x8e>
 802039e:	f8bd c036 	ldrh.w	ip, [sp, #54]	; 0x36
 80203a2:	4462      	add	r2, ip
 80203a4:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
 80203a8:	2200      	movs	r2, #0
 80203aa:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 80203ae:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 80203b2:	f9bd c036 	ldrsh.w	ip, [sp, #54]	; 0x36
 80203b6:	1abf      	subs	r7, r7, r2
 80203b8:	45bc      	cmp	ip, r7
 80203ba:	f8df c190 	ldr.w	ip, [pc, #400]	; 802054c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x22c>
 80203be:	bfc8      	it	gt
 80203c0:	1a8f      	subgt	r7, r1, r2
 80203c2:	f89c c000 	ldrb.w	ip, [ip]
 80203c6:	bfc8      	it	gt
 80203c8:	f8ad 7036 	strhgt.w	r7, [sp, #54]	; 0x36
 80203cc:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
 80203d0:	f1bc 0f00 	cmp.w	ip, #0
 80203d4:	d176      	bne.n	80204c4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a4>
 80203d6:	4287      	cmp	r7, r0
 80203d8:	bf14      	ite	ne
 80203da:	2100      	movne	r1, #0
 80203dc:	2101      	moveq	r1, #1
 80203de:	2f00      	cmp	r7, #0
 80203e0:	9107      	str	r1, [sp, #28]
 80203e2:	dd73      	ble.n	80204cc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 80203e4:	f9bd 1036 	ldrsh.w	r1, [sp, #54]	; 0x36
 80203e8:	2900      	cmp	r1, #0
 80203ea:	9104      	str	r1, [sp, #16]
 80203ec:	dd6e      	ble.n	80204cc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 80203ee:	f8b9 1000 	ldrh.w	r1, [r9]
 80203f2:	a80e      	add	r0, sp, #56	; 0x38
 80203f4:	f8ad 8044 	strh.w	r8, [sp, #68]	; 0x44
 80203f8:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 80203fc:	1a5b      	subs	r3, r3, r1
 80203fe:	a910      	add	r1, sp, #64	; 0x40
 8020400:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
 8020404:	b21b      	sxth	r3, r3
 8020406:	f8ad 703c 	strh.w	r7, [sp, #60]	; 0x3c
 802040a:	f8df a144 	ldr.w	sl, [pc, #324]	; 8020550 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 802040e:	9305      	str	r3, [sp, #20]
 8020410:	f8b9 3002 	ldrh.w	r3, [r9, #2]
 8020414:	1ad2      	subs	r2, r2, r3
 8020416:	b213      	sxth	r3, r2
 8020418:	9306      	str	r3, [sp, #24]
 802041a:	9b05      	ldr	r3, [sp, #20]
 802041c:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 8020420:	9b06      	ldr	r3, [sp, #24]
 8020422:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8020426:	9b04      	ldr	r3, [sp, #16]
 8020428:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 802042c:	2300      	movs	r3, #0
 802042e:	9310      	str	r3, [sp, #64]	; 0x40
 8020430:	f7fa fff8 	bl	801b424 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020434:	4640      	mov	r0, r8
 8020436:	f7fa ffb1 	bl	801b39c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802043a:	a810      	add	r0, sp, #64	; 0x40
 802043c:	f7fa ffae 	bl	801b39c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020440:	4b41      	ldr	r3, [pc, #260]	; (8020548 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x228>)
 8020442:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 8020446:	4628      	mov	r0, r5
 8020448:	881b      	ldrh	r3, [r3, #0]
 802044a:	9308      	str	r3, [sp, #32]
 802044c:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 8020450:	b21b      	sxth	r3, r3
 8020452:	9303      	str	r3, [sp, #12]
 8020454:	682b      	ldr	r3, [r5, #0]
 8020456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020458:	4798      	blx	r3
 802045a:	9a03      	ldr	r2, [sp, #12]
 802045c:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8020460:	4681      	mov	r9, r0
 8020462:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8020466:	fb13 f302 	smulbb	r3, r3, r2
 802046a:	2203      	movs	r2, #3
 802046c:	f8da 0000 	ldr.w	r0, [sl]
 8020470:	fb15 3302 	smlabb	r3, r5, r2, r3
 8020474:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8020476:	920b      	str	r2, [sp, #44]	; 0x2c
 8020478:	441d      	add	r5, r3
 802047a:	6803      	ldr	r3, [r0, #0]
 802047c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802047e:	4798      	blx	r3
 8020480:	9009      	str	r0, [sp, #36]	; 0x24
 8020482:	f8da 0000 	ldr.w	r0, [sl]
 8020486:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 802048a:	6803      	ldr	r3, [r0, #0]
 802048c:	910a      	str	r1, [sp, #40]	; 0x28
 802048e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020490:	f9bd 6032 	ldrsh.w	r6, [sp, #50]	; 0x32
 8020494:	4798      	blx	r3
 8020496:	f010 0f01 	tst.w	r0, #1
 802049a:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 802049e:	d01e      	beq.n	80204de <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1be>
 80204a0:	f8da 0000 	ldr.w	r0, [sl]
 80204a4:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 80204a8:	6803      	ldr	r3, [r0, #0]
 80204aa:	9200      	str	r2, [sp, #0]
 80204ac:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 80204ae:	462b      	mov	r3, r5
 80204b0:	e898 0006 	ldmia.w	r8, {r1, r2}
 80204b4:	47b0      	blx	r6
 80204b6:	9b05      	ldr	r3, [sp, #20]
 80204b8:	80a7      	strh	r7, [r4, #4]
 80204ba:	8023      	strh	r3, [r4, #0]
 80204bc:	9b06      	ldr	r3, [sp, #24]
 80204be:	8063      	strh	r3, [r4, #2]
 80204c0:	9b04      	ldr	r3, [sp, #16]
 80204c2:	e007      	b.n	80204d4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b4>
 80204c4:	f9bd 0036 	ldrsh.w	r0, [sp, #54]	; 0x36
 80204c8:	4288      	cmp	r0, r1
 80204ca:	e785      	b.n	80203d8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb8>
 80204cc:	2300      	movs	r3, #0
 80204ce:	8023      	strh	r3, [r4, #0]
 80204d0:	8063      	strh	r3, [r4, #2]
 80204d2:	80a3      	strh	r3, [r4, #4]
 80204d4:	4620      	mov	r0, r4
 80204d6:	80e3      	strh	r3, [r4, #6]
 80204d8:	b013      	add	sp, #76	; 0x4c
 80204da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80204de:	fb09 f606 	mul.w	r6, r9, r6
 80204e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80204e4:	fb11 6602 	smlabb	r6, r1, r2, r6
 80204e8:	9a07      	ldr	r2, [sp, #28]
 80204ea:	4433      	add	r3, r6
 80204ec:	461e      	mov	r6, r3
 80204ee:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 80204f2:	b16a      	cbz	r2, 8020510 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 80204f4:	9a08      	ldr	r2, [sp, #32]
 80204f6:	4593      	cmp	fp, r2
 80204f8:	d10a      	bne.n	8020510 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 80204fa:	f8da 0000 	ldr.w	r0, [sl]
 80204fe:	fb09 f303 	mul.w	r3, r9, r3
 8020502:	4629      	mov	r1, r5
 8020504:	6802      	ldr	r2, [r0, #0]
 8020506:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 802050a:	4632      	mov	r2, r6
 802050c:	47d0      	blx	sl
 802050e:	e7d2      	b.n	80204b6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 8020510:	9a03      	ldr	r2, [sp, #12]
 8020512:	f8df b03c 	ldr.w	fp, [pc, #60]	; 8020550 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 8020516:	fb02 5803 	mla	r8, r2, r3, r5
 802051a:	4545      	cmp	r5, r8
 802051c:	d2cb      	bcs.n	80204b6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 802051e:	f8db 0000 	ldr.w	r0, [fp]
 8020522:	4629      	mov	r1, r5
 8020524:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 8020528:	6802      	ldr	r2, [r0, #0]
 802052a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802052e:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 8020532:	4632      	mov	r2, r6
 8020534:	47d0      	blx	sl
 8020536:	9b03      	ldr	r3, [sp, #12]
 8020538:	444e      	add	r6, r9
 802053a:	441d      	add	r5, r3
 802053c:	e7ed      	b.n	802051a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1fa>
 802053e:	bf00      	nop
 8020540:	24026170 	.word	0x24026170
 8020544:	24026172 	.word	0x24026172
 8020548:	24026176 	.word	0x24026176
 802054c:	24026174 	.word	0x24026174
 8020550:	2402617c 	.word	0x2402617c

08020554 <_ZN8touchgfx8LCD24bppC1Ev>:
 8020554:	2200      	movs	r2, #0
 8020556:	490c      	ldr	r1, [pc, #48]	; (8020588 <_ZN8touchgfx8LCD24bppC1Ev+0x34>)
 8020558:	6042      	str	r2, [r0, #4]
 802055a:	6001      	str	r1, [r0, #0]
 802055c:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8020560:	e9c0 2204 	strd	r2, r2, [r0, #16]
 8020564:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8020568:	e9c0 2208 	strd	r2, r2, [r0, #32]
 802056c:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 8020570:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 8020574:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 8020578:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 802057c:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 8020580:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 8020584:	4770      	bx	lr
 8020586:	bf00      	nop
 8020588:	0802b168 	.word	0x0802b168

0802058c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 802058c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020590:	b091      	sub	sp, #68	; 0x44
 8020592:	4607      	mov	r7, r0
 8020594:	4688      	mov	r8, r1
 8020596:	6810      	ldr	r0, [r2, #0]
 8020598:	6851      	ldr	r1, [r2, #4]
 802059a:	ac0c      	add	r4, sp, #48	; 0x30
 802059c:	4616      	mov	r6, r2
 802059e:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 80205a2:	4d64      	ldr	r5, [pc, #400]	; (8020734 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 80205a4:	f8df a190 	ldr.w	sl, [pc, #400]	; 8020738 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 80205a8:	c403      	stmia	r4!, {r0, r1}
 80205aa:	6818      	ldr	r0, [r3, #0]
 80205ac:	ac0e      	add	r4, sp, #56	; 0x38
 80205ae:	6859      	ldr	r1, [r3, #4]
 80205b0:	c403      	stmia	r4!, {r0, r1}
 80205b2:	a80c      	add	r0, sp, #48	; 0x30
 80205b4:	f7fa fef2 	bl	801b39c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80205b8:	4631      	mov	r1, r6
 80205ba:	a80e      	add	r0, sp, #56	; 0x38
 80205bc:	f7fa ff32 	bl	801b424 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80205c0:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 80205c4:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 80205c8:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 80205cc:	6828      	ldr	r0, [r5, #0]
 80205ce:	fb11 2103 	smlabb	r1, r1, r3, r2
 80205d2:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	; 0x3c
 80205d6:	f9bd 603e 	ldrsh.w	r6, [sp, #62]	; 0x3e
 80205da:	440f      	add	r7, r1
 80205dc:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 80205e0:	440a      	add	r2, r1
 80205e2:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 80205e6:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 80205ea:	4413      	add	r3, r2
 80205ec:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 80205f0:	6803      	ldr	r3, [r0, #0]
 80205f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80205f4:	4798      	blx	r3
 80205f6:	f010 0f80 	tst.w	r0, #128	; 0x80
 80205fa:	6828      	ldr	r0, [r5, #0]
 80205fc:	d01f      	beq.n	802063e <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xb2>
 80205fe:	2201      	movs	r2, #1
 8020600:	2500      	movs	r5, #0
 8020602:	6801      	ldr	r1, [r0, #0]
 8020604:	b2a4      	uxth	r4, r4
 8020606:	b2b6      	uxth	r6, r6
 8020608:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 802060c:	e9cd 2508 	strd	r2, r5, [sp, #32]
 8020610:	250b      	movs	r5, #11
 8020612:	9507      	str	r5, [sp, #28]
 8020614:	f8ba 5000 	ldrh.w	r5, [sl]
 8020618:	f8cd 9010 	str.w	r9, [sp, #16]
 802061c:	9602      	str	r6, [sp, #8]
 802061e:	9401      	str	r4, [sp, #4]
 8020620:	e9cd 2505 	strd	r2, r5, [sp, #20]
 8020624:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8020628:	9203      	str	r2, [sp, #12]
 802062a:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 802062e:	9200      	str	r2, [sp, #0]
 8020630:	4642      	mov	r2, r8
 8020632:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 8020634:	4639      	mov	r1, r7
 8020636:	47a0      	blx	r4
 8020638:	b011      	add	sp, #68	; 0x44
 802063a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802063e:	6803      	ldr	r3, [r0, #0]
 8020640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020642:	4798      	blx	r3
 8020644:	f8ba 5000 	ldrh.w	r5, [sl]
 8020648:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 802064c:	f04f 0e04 	mov.w	lr, #4
 8020650:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8020654:	436e      	muls	r6, r5
 8020656:	fb05 2303 	mla	r3, r5, r3, r2
 802065a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 802065e:	1b2d      	subs	r5, r5, r4
 8020660:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020664:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8020668:	4418      	add	r0, r3
 802066a:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 802066e:	1982      	adds	r2, r0, r6
 8020670:	1b1b      	subs	r3, r3, r4
 8020672:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8020676:	930b      	str	r3, [sp, #44]	; 0x2c
 8020678:	4290      	cmp	r0, r2
 802067a:	d254      	bcs.n	8020726 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x19a>
 802067c:	eb00 0a04 	add.w	sl, r0, r4
 8020680:	4550      	cmp	r0, sl
 8020682:	d24c      	bcs.n	802071e <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x192>
 8020684:	f817 1b01 	ldrb.w	r1, [r7], #1
 8020688:	fb1e e101 	smlabb	r1, lr, r1, lr
 802068c:	eb08 0c01 	add.w	ip, r8, r1
 8020690:	f89c 3003 	ldrb.w	r3, [ip, #3]
 8020694:	b173      	cbz	r3, 80206b4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 8020696:	2bff      	cmp	r3, #255	; 0xff
 8020698:	f818 b001 	ldrb.w	fp, [r8, r1]
 802069c:	d10c      	bne.n	80206b8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 802069e:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80206a2:	d109      	bne.n	80206b8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 80206a4:	f880 b000 	strb.w	fp, [r0]
 80206a8:	f89c 3001 	ldrb.w	r3, [ip, #1]
 80206ac:	7043      	strb	r3, [r0, #1]
 80206ae:	f89c 3002 	ldrb.w	r3, [ip, #2]
 80206b2:	7083      	strb	r3, [r0, #2]
 80206b4:	3003      	adds	r0, #3
 80206b6:	e7e3      	b.n	8020680 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf4>
 80206b8:	fb09 f103 	mul.w	r1, r9, r3
 80206bc:	1c4b      	adds	r3, r1, #1
 80206be:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 80206c2:	7801      	ldrb	r1, [r0, #0]
 80206c4:	121b      	asrs	r3, r3, #8
 80206c6:	b29e      	uxth	r6, r3
 80206c8:	43db      	mvns	r3, r3
 80206ca:	fb1b fb06 	smulbb	fp, fp, r6
 80206ce:	b2db      	uxtb	r3, r3
 80206d0:	fb01 b103 	mla	r1, r1, r3, fp
 80206d4:	b289      	uxth	r1, r1
 80206d6:	f101 0b01 	add.w	fp, r1, #1
 80206da:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 80206de:	f890 b001 	ldrb.w	fp, [r0, #1]
 80206e2:	fb1b fb03 	smulbb	fp, fp, r3
 80206e6:	1209      	asrs	r1, r1, #8
 80206e8:	7001      	strb	r1, [r0, #0]
 80206ea:	f89c 1001 	ldrb.w	r1, [ip, #1]
 80206ee:	fb01 b106 	mla	r1, r1, r6, fp
 80206f2:	b289      	uxth	r1, r1
 80206f4:	f101 0b01 	add.w	fp, r1, #1
 80206f8:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 80206fc:	1209      	asrs	r1, r1, #8
 80206fe:	7041      	strb	r1, [r0, #1]
 8020700:	f89c 1002 	ldrb.w	r1, [ip, #2]
 8020704:	f890 c002 	ldrb.w	ip, [r0, #2]
 8020708:	fb1c f303 	smulbb	r3, ip, r3
 802070c:	fb01 3606 	mla	r6, r1, r6, r3
 8020710:	b2b6      	uxth	r6, r6
 8020712:	1c73      	adds	r3, r6, #1
 8020714:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8020718:	1236      	asrs	r6, r6, #8
 802071a:	7086      	strb	r6, [r0, #2]
 802071c:	e7ca      	b.n	80206b4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 802071e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020720:	4428      	add	r0, r5
 8020722:	441f      	add	r7, r3
 8020724:	e7a8      	b.n	8020678 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xec>
 8020726:	4b03      	ldr	r3, [pc, #12]	; (8020734 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 8020728:	6818      	ldr	r0, [r3, #0]
 802072a:	6803      	ldr	r3, [r0, #0]
 802072c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802072e:	4798      	blx	r3
 8020730:	e782      	b.n	8020638 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 8020732:	bf00      	nop
 8020734:	2402617c 	.word	0x2402617c
 8020738:	24026176 	.word	0x24026176

0802073c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 802073c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020740:	b091      	sub	sp, #68	; 0x44
 8020742:	4680      	mov	r8, r0
 8020744:	460e      	mov	r6, r1
 8020746:	6810      	ldr	r0, [r2, #0]
 8020748:	6851      	ldr	r1, [r2, #4]
 802074a:	ad0c      	add	r5, sp, #48	; 0x30
 802074c:	4614      	mov	r4, r2
 802074e:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 8020752:	f8df 9198 	ldr.w	r9, [pc, #408]	; 80208ec <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>
 8020756:	f8df a198 	ldr.w	sl, [pc, #408]	; 80208f0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 802075a:	c503      	stmia	r5!, {r0, r1}
 802075c:	6818      	ldr	r0, [r3, #0]
 802075e:	ad0e      	add	r5, sp, #56	; 0x38
 8020760:	6859      	ldr	r1, [r3, #4]
 8020762:	c503      	stmia	r5!, {r0, r1}
 8020764:	a80c      	add	r0, sp, #48	; 0x30
 8020766:	f7fa fe19 	bl	801b39c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802076a:	4621      	mov	r1, r4
 802076c:	a80e      	add	r0, sp, #56	; 0x38
 802076e:	f7fa fe59 	bl	801b424 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020772:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8020776:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 802077a:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 802077e:	f8d9 0000 	ldr.w	r0, [r9]
 8020782:	fb11 2103 	smlabb	r1, r1, r3, r2
 8020786:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	; 0x3e
 802078a:	eb08 0401 	add.w	r4, r8, r1
 802078e:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8020792:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 8020796:	440a      	add	r2, r1
 8020798:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 802079c:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 80207a0:	4413      	add	r3, r2
 80207a2:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 80207a6:	6803      	ldr	r3, [r0, #0]
 80207a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80207aa:	4798      	blx	r3
 80207ac:	f010 0f80 	tst.w	r0, #128	; 0x80
 80207b0:	f8d9 0000 	ldr.w	r0, [r9]
 80207b4:	d022      	beq.n	80207fc <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 80207b6:	2200      	movs	r2, #0
 80207b8:	f04f 0c01 	mov.w	ip, #1
 80207bc:	6801      	ldr	r1, [r0, #0]
 80207be:	b2ad      	uxth	r5, r5
 80207c0:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80207c4:	e9cd c208 	strd	ip, r2, [sp, #32]
 80207c8:	f04f 0c0b 	mov.w	ip, #11
 80207cc:	f8cd c01c 	str.w	ip, [sp, #28]
 80207d0:	f8ba c000 	ldrh.w	ip, [sl]
 80207d4:	9704      	str	r7, [sp, #16]
 80207d6:	9502      	str	r5, [sp, #8]
 80207d8:	e9cd 2c05 	strd	r2, ip, [sp, #20]
 80207dc:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 80207e0:	9203      	str	r2, [sp, #12]
 80207e2:	fa1f f288 	uxth.w	r2, r8
 80207e6:	9201      	str	r2, [sp, #4]
 80207e8:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 80207ec:	9200      	str	r2, [sp, #0]
 80207ee:	4632      	mov	r2, r6
 80207f0:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 80207f2:	4621      	mov	r1, r4
 80207f4:	47a8      	blx	r5
 80207f6:	b011      	add	sp, #68	; 0x44
 80207f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80207fc:	6803      	ldr	r3, [r0, #0]
 80207fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020800:	4798      	blx	r3
 8020802:	f8ba 2000 	ldrh.w	r2, [sl]
 8020806:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 802080a:	f04f 0e03 	mov.w	lr, #3
 802080e:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 8020812:	4355      	muls	r5, r2
 8020814:	fa1f fc87 	uxth.w	ip, r7
 8020818:	fb02 1303 	mla	r3, r2, r3, r1
 802081c:	eba2 0208 	sub.w	r2, r2, r8
 8020820:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8020824:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020828:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802082c:	4418      	add	r0, r3
 802082e:	920b      	str	r2, [sp, #44]	; 0x2c
 8020830:	1943      	adds	r3, r0, r5
 8020832:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 8020836:	f1c7 05ff 	rsb	r5, r7, #255	; 0xff
 802083a:	eba2 0208 	sub.w	r2, r2, r8
 802083e:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8020842:	b2ad      	uxth	r5, r5
 8020844:	4298      	cmp	r0, r3
 8020846:	d24a      	bcs.n	80208de <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a2>
 8020848:	eb00 0908 	add.w	r9, r0, r8
 802084c:	4621      	mov	r1, r4
 802084e:	4548      	cmp	r0, r9
 8020850:	460c      	mov	r4, r1
 8020852:	d240      	bcs.n	80208d6 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x19a>
 8020854:	f04f 0a04 	mov.w	sl, #4
 8020858:	7824      	ldrb	r4, [r4, #0]
 802085a:	2fff      	cmp	r7, #255	; 0xff
 802085c:	f101 0101 	add.w	r1, r1, #1
 8020860:	fb1e a404 	smlabb	r4, lr, r4, sl
 8020864:	eb06 0a04 	add.w	sl, r6, r4
 8020868:	f816 b004 	ldrb.w	fp, [r6, r4]
 802086c:	d02b      	beq.n	80208c6 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x18a>
 802086e:	7804      	ldrb	r4, [r0, #0]
 8020870:	fb14 f405 	smulbb	r4, r4, r5
 8020874:	fb0b 440c 	mla	r4, fp, ip, r4
 8020878:	b2a4      	uxth	r4, r4
 802087a:	f104 0b01 	add.w	fp, r4, #1
 802087e:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 8020882:	f890 b001 	ldrb.w	fp, [r0, #1]
 8020886:	fb1b fb05 	smulbb	fp, fp, r5
 802088a:	1224      	asrs	r4, r4, #8
 802088c:	7004      	strb	r4, [r0, #0]
 802088e:	f89a 4001 	ldrb.w	r4, [sl, #1]
 8020892:	fb04 b40c 	mla	r4, r4, ip, fp
 8020896:	b2a4      	uxth	r4, r4
 8020898:	f104 0b01 	add.w	fp, r4, #1
 802089c:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 80208a0:	1224      	asrs	r4, r4, #8
 80208a2:	7044      	strb	r4, [r0, #1]
 80208a4:	f89a 4002 	ldrb.w	r4, [sl, #2]
 80208a8:	f890 a002 	ldrb.w	sl, [r0, #2]
 80208ac:	fb1a fa05 	smulbb	sl, sl, r5
 80208b0:	fb04 a40c 	mla	r4, r4, ip, sl
 80208b4:	b2a4      	uxth	r4, r4
 80208b6:	f104 0a01 	add.w	sl, r4, #1
 80208ba:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 80208be:	1224      	asrs	r4, r4, #8
 80208c0:	7084      	strb	r4, [r0, #2]
 80208c2:	3003      	adds	r0, #3
 80208c4:	e7c3      	b.n	802084e <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x112>
 80208c6:	f880 b000 	strb.w	fp, [r0]
 80208ca:	f89a 4001 	ldrb.w	r4, [sl, #1]
 80208ce:	7044      	strb	r4, [r0, #1]
 80208d0:	f89a 4002 	ldrb.w	r4, [sl, #2]
 80208d4:	e7f4      	b.n	80208c0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x184>
 80208d6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80208d8:	4420      	add	r0, r4
 80208da:	188c      	adds	r4, r1, r2
 80208dc:	e7b2      	b.n	8020844 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x108>
 80208de:	4b03      	ldr	r3, [pc, #12]	; (80208ec <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>)
 80208e0:	6818      	ldr	r0, [r3, #0]
 80208e2:	6803      	ldr	r3, [r0, #0]
 80208e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80208e6:	4798      	blx	r3
 80208e8:	e785      	b.n	80207f6 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xba>
 80208ea:	bf00      	nop
 80208ec:	2402617c 	.word	0x2402617c
 80208f0:	24026176 	.word	0x24026176

080208f4 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 80208f4:	b430      	push	{r4, r5}
 80208f6:	780d      	ldrb	r5, [r1, #0]
 80208f8:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80208fc:	b11d      	cbz	r5, 8020906 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x12>
 80208fe:	2d01      	cmp	r5, #1
 8020900:	d005      	beq.n	802090e <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 8020902:	bc30      	pop	{r4, r5}
 8020904:	4770      	bx	lr
 8020906:	9402      	str	r4, [sp, #8]
 8020908:	bc30      	pop	{r4, r5}
 802090a:	f7ff be3f 	b.w	802058c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 802090e:	9402      	str	r4, [sp, #8]
 8020910:	bc30      	pop	{r4, r5}
 8020912:	f7ff bf13 	b.w	802073c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
	...

08020918 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>:
 8020918:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802091c:	4605      	mov	r5, r0
 802091e:	b08f      	sub	sp, #60	; 0x3c
 8020920:	460c      	mov	r4, r1
 8020922:	461f      	mov	r7, r3
 8020924:	2b00      	cmp	r3, #0
 8020926:	d052      	beq.n	80209ce <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 8020928:	6808      	ldr	r0, [r1, #0]
 802092a:	ab0a      	add	r3, sp, #40	; 0x28
 802092c:	6849      	ldr	r1, [r1, #4]
 802092e:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 8020af8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>
 8020932:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 8020afc <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e4>
 8020936:	c303      	stmia	r3!, {r0, r1}
 8020938:	6810      	ldr	r0, [r2, #0]
 802093a:	ab0c      	add	r3, sp, #48	; 0x30
 802093c:	6851      	ldr	r1, [r2, #4]
 802093e:	c303      	stmia	r3!, {r0, r1}
 8020940:	a80a      	add	r0, sp, #40	; 0x28
 8020942:	f7fa fd2b 	bl	801b39c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020946:	4621      	mov	r1, r4
 8020948:	a80c      	add	r0, sp, #48	; 0x30
 802094a:	f7fa fd6b 	bl	801b424 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802094e:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 8020952:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8020956:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 802095a:	f8d8 0000 	ldr.w	r0, [r8]
 802095e:	fb11 2103 	smlabb	r1, r1, r3, r2
 8020962:	f9bd 6034 	ldrsh.w	r6, [sp, #52]	; 0x34
 8020966:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	; 0x36
 802096a:	eb05 0541 	add.w	r5, r5, r1, lsl #1
 802096e:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 8020972:	440a      	add	r2, r1
 8020974:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 8020978:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 802097c:	4413      	add	r3, r2
 802097e:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8020982:	6803      	ldr	r3, [r0, #0]
 8020984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020986:	4798      	blx	r3
 8020988:	2fff      	cmp	r7, #255	; 0xff
 802098a:	d023      	beq.n	80209d4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xbc>
 802098c:	f010 0f04 	tst.w	r0, #4
 8020990:	f8d8 0000 	ldr.w	r0, [r8]
 8020994:	d021      	beq.n	80209da <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xc2>
 8020996:	2100      	movs	r1, #0
 8020998:	f04f 0e01 	mov.w	lr, #1
 802099c:	f8d0 c000 	ldr.w	ip, [r0]
 80209a0:	b2a4      	uxth	r4, r4
 80209a2:	9106      	str	r1, [sp, #24]
 80209a4:	b2b6      	uxth	r6, r6
 80209a6:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 80209aa:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 80209ae:	e9cd e107 	strd	lr, r1, [sp, #28]
 80209b2:	f8b9 e000 	ldrh.w	lr, [r9]
 80209b6:	9703      	str	r7, [sp, #12]
 80209b8:	9401      	str	r4, [sp, #4]
 80209ba:	9600      	str	r6, [sp, #0]
 80209bc:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 80209c0:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 80209c4:	9102      	str	r1, [sp, #8]
 80209c6:	4629      	mov	r1, r5
 80209c8:	f8dc 4040 	ldr.w	r4, [ip, #64]	; 0x40
 80209cc:	47a0      	blx	r4
 80209ce:	b00f      	add	sp, #60	; 0x3c
 80209d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80209d4:	f010 0f01 	tst.w	r0, #1
 80209d8:	e7da      	b.n	8020990 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x78>
 80209da:	6803      	ldr	r3, [r0, #0]
 80209dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80209de:	4798      	blx	r3
 80209e0:	f8b9 1000 	ldrh.w	r1, [r9]
 80209e4:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 80209e8:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 80209ec:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 80209f0:	434c      	muls	r4, r1
 80209f2:	2fff      	cmp	r7, #255	; 0xff
 80209f4:	fb01 2303 	mla	r3, r1, r3, r2
 80209f8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80209fc:	eba1 0106 	sub.w	r1, r1, r6
 8020a00:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020a04:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8020a08:	4418      	add	r0, r3
 8020a0a:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 8020a0e:	eba3 0606 	sub.w	r6, r3, r6
 8020a12:	4404      	add	r4, r0
 8020a14:	ea4f 0646 	mov.w	r6, r6, lsl #1
 8020a18:	d04a      	beq.n	8020ab0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x198>
 8020a1a:	43fa      	mvns	r2, r7
 8020a1c:	b2bb      	uxth	r3, r7
 8020a1e:	b2d7      	uxtb	r7, r2
 8020a20:	42a0      	cmp	r0, r4
 8020a22:	d263      	bcs.n	8020aec <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 8020a24:	eb00 0e0c 	add.w	lr, r0, ip
 8020a28:	4586      	cmp	lr, r0
 8020a2a:	f100 0803 	add.w	r8, r0, #3
 8020a2e:	d93a      	bls.n	8020aa6 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x18e>
 8020a30:	f835 2b02 	ldrh.w	r2, [r5], #2
 8020a34:	f818 9c03 	ldrb.w	r9, [r8, #-3]
 8020a38:	00d0      	lsls	r0, r2, #3
 8020a3a:	fb19 f907 	smulbb	r9, r9, r7
 8020a3e:	b2c0      	uxtb	r0, r0
 8020a40:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 8020a44:	fb00 9003 	mla	r0, r0, r3, r9
 8020a48:	b280      	uxth	r0, r0
 8020a4a:	f100 0901 	add.w	r9, r0, #1
 8020a4e:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 8020a52:	f818 9c02 	ldrb.w	r9, [r8, #-2]
 8020a56:	fb19 f907 	smulbb	r9, r9, r7
 8020a5a:	1200      	asrs	r0, r0, #8
 8020a5c:	f808 0c03 	strb.w	r0, [r8, #-3]
 8020a60:	10d0      	asrs	r0, r2, #3
 8020a62:	1212      	asrs	r2, r2, #8
 8020a64:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8020a68:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8020a6c:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 8020a70:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8020a74:	fb00 9003 	mla	r0, r0, r3, r9
 8020a78:	b280      	uxth	r0, r0
 8020a7a:	f100 0901 	add.w	r9, r0, #1
 8020a7e:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 8020a82:	1200      	asrs	r0, r0, #8
 8020a84:	f808 0c02 	strb.w	r0, [r8, #-2]
 8020a88:	f818 0c01 	ldrb.w	r0, [r8, #-1]
 8020a8c:	fb10 f007 	smulbb	r0, r0, r7
 8020a90:	fb02 0203 	mla	r2, r2, r3, r0
 8020a94:	b292      	uxth	r2, r2
 8020a96:	1c50      	adds	r0, r2, #1
 8020a98:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8020a9c:	4640      	mov	r0, r8
 8020a9e:	1212      	asrs	r2, r2, #8
 8020aa0:	f808 2c01 	strb.w	r2, [r8, #-1]
 8020aa4:	e7c0      	b.n	8020a28 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x110>
 8020aa6:	4408      	add	r0, r1
 8020aa8:	4435      	add	r5, r6
 8020aaa:	e7b9      	b.n	8020a20 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x108>
 8020aac:	4408      	add	r0, r1
 8020aae:	4435      	add	r5, r6
 8020ab0:	42a0      	cmp	r0, r4
 8020ab2:	d21b      	bcs.n	8020aec <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 8020ab4:	eb00 070c 	add.w	r7, r0, ip
 8020ab8:	42b8      	cmp	r0, r7
 8020aba:	d2f7      	bcs.n	8020aac <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x194>
 8020abc:	f835 3b02 	ldrh.w	r3, [r5], #2
 8020ac0:	3003      	adds	r0, #3
 8020ac2:	00da      	lsls	r2, r3, #3
 8020ac4:	b2d2      	uxtb	r2, r2
 8020ac6:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8020aca:	f800 2c03 	strb.w	r2, [r0, #-3]
 8020ace:	10da      	asrs	r2, r3, #3
 8020ad0:	121b      	asrs	r3, r3, #8
 8020ad2:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8020ad6:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8020ada:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 8020ade:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 8020ae2:	f800 2c02 	strb.w	r2, [r0, #-2]
 8020ae6:	f800 3c01 	strb.w	r3, [r0, #-1]
 8020aea:	e7e5      	b.n	8020ab8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1a0>
 8020aec:	4b02      	ldr	r3, [pc, #8]	; (8020af8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>)
 8020aee:	6818      	ldr	r0, [r3, #0]
 8020af0:	6803      	ldr	r3, [r0, #0]
 8020af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020af4:	4798      	blx	r3
 8020af6:	e76a      	b.n	80209ce <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 8020af8:	2402617c 	.word	0x2402617c
 8020afc:	24026176 	.word	0x24026176

08020b00 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 8020b00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020b04:	b08a      	sub	sp, #40	; 0x28
 8020b06:	460d      	mov	r5, r1
 8020b08:	4604      	mov	r4, r0
 8020b0a:	461e      	mov	r6, r3
 8020b0c:	6808      	ldr	r0, [r1, #0]
 8020b0e:	ab06      	add	r3, sp, #24
 8020b10:	6849      	ldr	r1, [r1, #4]
 8020b12:	4f5d      	ldr	r7, [pc, #372]	; (8020c88 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x188>)
 8020b14:	c303      	stmia	r3!, {r0, r1}
 8020b16:	6810      	ldr	r0, [r2, #0]
 8020b18:	ab08      	add	r3, sp, #32
 8020b1a:	6851      	ldr	r1, [r2, #4]
 8020b1c:	c303      	stmia	r3!, {r0, r1}
 8020b1e:	a806      	add	r0, sp, #24
 8020b20:	f7fa fc3c 	bl	801b39c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020b24:	4629      	mov	r1, r5
 8020b26:	a808      	add	r0, sp, #32
 8020b28:	f7fa fc7c 	bl	801b424 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020b2c:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8020b30:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8020b34:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8020b38:	6838      	ldr	r0, [r7, #0]
 8020b3a:	fb11 2103 	smlabb	r1, r1, r3, r2
 8020b3e:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 8020b42:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 8020b46:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8020b4a:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8020b4e:	440a      	add	r2, r1
 8020b50:	f8ad 2020 	strh.w	r2, [sp, #32]
 8020b54:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8020b58:	4413      	add	r3, r2
 8020b5a:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8020b5e:	6803      	ldr	r3, [r0, #0]
 8020b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020b62:	4798      	blx	r3
 8020b64:	2eff      	cmp	r6, #255	; 0xff
 8020b66:	d119      	bne.n	8020b9c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 8020b68:	f010 0f20 	tst.w	r0, #32
 8020b6c:	6838      	ldr	r0, [r7, #0]
 8020b6e:	d018      	beq.n	8020ba2 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 8020b70:	b2ad      	uxth	r5, r5
 8020b72:	2700      	movs	r7, #0
 8020b74:	6801      	ldr	r1, [r0, #0]
 8020b76:	9501      	str	r5, [sp, #4]
 8020b78:	fa1f f588 	uxth.w	r5, r8
 8020b7c:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8020b80:	9500      	str	r5, [sp, #0]
 8020b82:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8020b86:	e9cd 6703 	strd	r6, r7, [sp, #12]
 8020b8a:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 8020b8e:	9602      	str	r6, [sp, #8]
 8020b90:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 8020b92:	4621      	mov	r1, r4
 8020b94:	47a8      	blx	r5
 8020b96:	b00a      	add	sp, #40	; 0x28
 8020b98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020b9c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8020ba0:	e7e4      	b.n	8020b6c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6c>
 8020ba2:	6803      	ldr	r3, [r0, #0]
 8020ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020ba6:	4798      	blx	r3
 8020ba8:	4b38      	ldr	r3, [pc, #224]	; (8020c8c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x18c>)
 8020baa:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8020bae:	f8b3 c000 	ldrh.w	ip, [r3]
 8020bb2:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8020bb6:	fb0c f505 	mul.w	r5, ip, r5
 8020bba:	f9bd e01c 	ldrsh.w	lr, [sp, #28]
 8020bbe:	fb0c 2303 	mla	r3, ip, r3, r2
 8020bc2:	ebac 0c08 	sub.w	ip, ip, r8
 8020bc6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8020bca:	ebae 0e08 	sub.w	lr, lr, r8
 8020bce:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020bd2:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8020bd6:	4418      	add	r0, r3
 8020bd8:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8020bdc:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 8020be0:	4405      	add	r5, r0
 8020be2:	42a8      	cmp	r0, r5
 8020be4:	d24a      	bcs.n	8020c7c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17c>
 8020be6:	eb00 0803 	add.w	r8, r0, r3
 8020bea:	4540      	cmp	r0, r8
 8020bec:	d243      	bcs.n	8020c76 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x176>
 8020bee:	78e2      	ldrb	r2, [r4, #3]
 8020bf0:	b15a      	cbz	r2, 8020c0a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 8020bf2:	2aff      	cmp	r2, #255	; 0xff
 8020bf4:	f894 9000 	ldrb.w	r9, [r4]
 8020bf8:	d10a      	bne.n	8020c10 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 8020bfa:	2eff      	cmp	r6, #255	; 0xff
 8020bfc:	d108      	bne.n	8020c10 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 8020bfe:	f880 9000 	strb.w	r9, [r0]
 8020c02:	7862      	ldrb	r2, [r4, #1]
 8020c04:	7042      	strb	r2, [r0, #1]
 8020c06:	78a2      	ldrb	r2, [r4, #2]
 8020c08:	7082      	strb	r2, [r0, #2]
 8020c0a:	3003      	adds	r0, #3
 8020c0c:	3404      	adds	r4, #4
 8020c0e:	e7ec      	b.n	8020bea <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xea>
 8020c10:	4372      	muls	r2, r6
 8020c12:	1c51      	adds	r1, r2, #1
 8020c14:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 8020c18:	1209      	asrs	r1, r1, #8
 8020c1a:	fa1f fa81 	uxth.w	sl, r1
 8020c1e:	43c9      	mvns	r1, r1
 8020c20:	fb19 f90a 	smulbb	r9, r9, sl
 8020c24:	b2ca      	uxtb	r2, r1
 8020c26:	7801      	ldrb	r1, [r0, #0]
 8020c28:	fb01 9902 	mla	r9, r1, r2, r9
 8020c2c:	fa1f f989 	uxth.w	r9, r9
 8020c30:	f109 0101 	add.w	r1, r9, #1
 8020c34:	eb01 2919 	add.w	r9, r1, r9, lsr #8
 8020c38:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020c3c:	f880 9000 	strb.w	r9, [r0]
 8020c40:	f890 9001 	ldrb.w	r9, [r0, #1]
 8020c44:	7861      	ldrb	r1, [r4, #1]
 8020c46:	fb19 f902 	smulbb	r9, r9, r2
 8020c4a:	fb01 910a 	mla	r1, r1, sl, r9
 8020c4e:	b289      	uxth	r1, r1
 8020c50:	f101 0901 	add.w	r9, r1, #1
 8020c54:	eb09 2111 	add.w	r1, r9, r1, lsr #8
 8020c58:	1209      	asrs	r1, r1, #8
 8020c5a:	7041      	strb	r1, [r0, #1]
 8020c5c:	7881      	ldrb	r1, [r0, #2]
 8020c5e:	f894 9002 	ldrb.w	r9, [r4, #2]
 8020c62:	fb11 f202 	smulbb	r2, r1, r2
 8020c66:	fb09 220a 	mla	r2, r9, sl, r2
 8020c6a:	b292      	uxth	r2, r2
 8020c6c:	1c51      	adds	r1, r2, #1
 8020c6e:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8020c72:	1212      	asrs	r2, r2, #8
 8020c74:	e7c8      	b.n	8020c08 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x108>
 8020c76:	4460      	add	r0, ip
 8020c78:	4474      	add	r4, lr
 8020c7a:	e7b2      	b.n	8020be2 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xe2>
 8020c7c:	6838      	ldr	r0, [r7, #0]
 8020c7e:	6803      	ldr	r3, [r0, #0]
 8020c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020c82:	4798      	blx	r3
 8020c84:	e787      	b.n	8020b96 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 8020c86:	bf00      	nop
 8020c88:	2402617c 	.word	0x2402617c
 8020c8c:	24026176 	.word	0x24026176

08020c90 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 8020c90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8020c94:	b085      	sub	sp, #20
 8020c96:	4606      	mov	r6, r0
 8020c98:	460c      	mov	r4, r1
 8020c9a:	4691      	mov	r9, r2
 8020c9c:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 8020ca0:	4698      	mov	r8, r3
 8020ca2:	b31d      	cbz	r5, 8020cec <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8020ca4:	4608      	mov	r0, r1
 8020ca6:	f7fd fa21 	bl	801e0ec <_ZNK8touchgfx6Bitmap8getWidthEv>
 8020caa:	4607      	mov	r7, r0
 8020cac:	4620      	mov	r0, r4
 8020cae:	f7fd fa51 	bl	801e154 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8020cb2:	f8ad 000e 	strh.w	r0, [sp, #14]
 8020cb6:	4620      	mov	r0, r4
 8020cb8:	f8ad 9008 	strh.w	r9, [sp, #8]
 8020cbc:	f8ad 800a 	strh.w	r8, [sp, #10]
 8020cc0:	f8ad 700c 	strh.w	r7, [sp, #12]
 8020cc4:	f7fd fb82 	bl	801e3cc <_ZNK8touchgfx6Bitmap9getFormatEv>
 8020cc8:	280b      	cmp	r0, #11
 8020cca:	d80f      	bhi.n	8020cec <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8020ccc:	e8df f000 	tbb	[pc, r0]
 8020cd0:	0e062920 	.word	0x0e062920
 8020cd4:	0e0e0e0e 	.word	0x0e0e0e0e
 8020cd8:	110e0e0e 	.word	0x110e0e0e
 8020cdc:	4620      	mov	r0, r4
 8020cde:	f7fd faf1 	bl	801e2c4 <_ZNK8touchgfx6Bitmap7getDataEv>
 8020ce2:	462b      	mov	r3, r5
 8020ce4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020ce6:	a902      	add	r1, sp, #8
 8020ce8:	f7ff ff0a 	bl	8020b00 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8020cec:	b005      	add	sp, #20
 8020cee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020cf2:	4620      	mov	r0, r4
 8020cf4:	f7fd fae6 	bl	801e2c4 <_ZNK8touchgfx6Bitmap7getDataEv>
 8020cf8:	4606      	mov	r6, r0
 8020cfa:	4620      	mov	r0, r4
 8020cfc:	f7fd fb12 	bl	801e324 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8020d00:	9500      	str	r5, [sp, #0]
 8020d02:	4601      	mov	r1, r0
 8020d04:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020d06:	aa02      	add	r2, sp, #8
 8020d08:	4630      	mov	r0, r6
 8020d0a:	f7ff fdf3 	bl	80208f4 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 8020d0e:	e7ed      	b.n	8020cec <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8020d10:	4620      	mov	r0, r4
 8020d12:	f7fd fad7 	bl	801e2c4 <_ZNK8touchgfx6Bitmap7getDataEv>
 8020d16:	462b      	mov	r3, r5
 8020d18:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020d1a:	a902      	add	r1, sp, #8
 8020d1c:	f7ff fdfc 	bl	8020918 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 8020d20:	e7e4      	b.n	8020cec <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8020d22:	6833      	ldr	r3, [r6, #0]
 8020d24:	4620      	mov	r0, r4
 8020d26:	68df      	ldr	r7, [r3, #12]
 8020d28:	f7fd facc 	bl	801e2c4 <_ZNK8touchgfx6Bitmap7getDataEv>
 8020d2c:	2300      	movs	r3, #0
 8020d2e:	4601      	mov	r1, r0
 8020d30:	aa02      	add	r2, sp, #8
 8020d32:	4630      	mov	r0, r6
 8020d34:	e9cd 5300 	strd	r5, r3, [sp]
 8020d38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020d3a:	47b8      	blx	r7
 8020d3c:	e7d6      	b.n	8020cec <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>

08020d3e <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 8020d3e:	b4f0      	push	{r4, r5, r6, r7}
 8020d40:	4616      	mov	r6, r2
 8020d42:	461c      	mov	r4, r3
 8020d44:	460d      	mov	r5, r1
 8020d46:	9a04      	ldr	r2, [sp, #16]
 8020d48:	2e01      	cmp	r6, #1
 8020d4a:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8020d4e:	d00e      	beq.n	8020d6e <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x30>
 8020d50:	d303      	bcc.n	8020d5a <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x1c>
 8020d52:	2e02      	cmp	r6, #2
 8020d54:	d006      	beq.n	8020d64 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x26>
 8020d56:	bcf0      	pop	{r4, r5, r6, r7}
 8020d58:	4770      	bx	lr
 8020d5a:	4621      	mov	r1, r4
 8020d5c:	4628      	mov	r0, r5
 8020d5e:	bcf0      	pop	{r4, r5, r6, r7}
 8020d60:	f7ff bdda 	b.w	8020918 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 8020d64:	4621      	mov	r1, r4
 8020d66:	4628      	mov	r0, r5
 8020d68:	bcf0      	pop	{r4, r5, r6, r7}
 8020d6a:	f7ff bec9 	b.w	8020b00 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8020d6e:	6805      	ldr	r5, [r0, #0]
 8020d70:	2600      	movs	r6, #0
 8020d72:	e9cd 3604 	strd	r3, r6, [sp, #16]
 8020d76:	68ed      	ldr	r5, [r5, #12]
 8020d78:	4613      	mov	r3, r2
 8020d7a:	4622      	mov	r2, r4
 8020d7c:	46ac      	mov	ip, r5
 8020d7e:	bcf0      	pop	{r4, r5, r6, r7}
 8020d80:	4760      	bx	ip
	...

08020d84 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 8020d84:	b160      	cbz	r0, 8020da0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1c>
 8020d86:	2903      	cmp	r1, #3
 8020d88:	d818      	bhi.n	8020dbc <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 8020d8a:	e8df f001 	tbb	[pc, r1]
 8020d8e:	1902      	.short	0x1902
 8020d90:	1b06      	.short	0x1b06
 8020d92:	4b0e      	ldr	r3, [pc, #56]	; (8020dcc <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 8020d94:	8818      	ldrh	r0, [r3, #0]
 8020d96:	4240      	negs	r0, r0
 8020d98:	4770      	bx	lr
 8020d9a:	4b0c      	ldr	r3, [pc, #48]	; (8020dcc <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 8020d9c:	8818      	ldrh	r0, [r3, #0]
 8020d9e:	4770      	bx	lr
 8020da0:	2903      	cmp	r1, #3
 8020da2:	d80b      	bhi.n	8020dbc <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 8020da4:	a301      	add	r3, pc, #4	; (adr r3, 8020dac <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x28>)
 8020da6:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8020daa:	bf00      	nop
 8020dac:	08020dc1 	.word	0x08020dc1
 8020db0:	08020d9b 	.word	0x08020d9b
 8020db4:	08020dc5 	.word	0x08020dc5
 8020db8:	08020d93 	.word	0x08020d93
 8020dbc:	2000      	movs	r0, #0
 8020dbe:	4770      	bx	lr
 8020dc0:	2001      	movs	r0, #1
 8020dc2:	4770      	bx	lr
 8020dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8020dc8:	4770      	bx	lr
 8020dca:	bf00      	nop
 8020dcc:	24026176 	.word	0x24026176

08020dd0 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 8020dd0:	b160      	cbz	r0, 8020dec <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x1c>
 8020dd2:	2903      	cmp	r1, #3
 8020dd4:	d818      	bhi.n	8020e08 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 8020dd6:	e8df f001 	tbb	[pc, r1]
 8020dda:	0219      	.short	0x0219
 8020ddc:	051b      	.short	0x051b
 8020dde:	4b0e      	ldr	r3, [pc, #56]	; (8020e18 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 8020de0:	8818      	ldrh	r0, [r3, #0]
 8020de2:	4770      	bx	lr
 8020de4:	4b0c      	ldr	r3, [pc, #48]	; (8020e18 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 8020de6:	8818      	ldrh	r0, [r3, #0]
 8020de8:	4240      	negs	r0, r0
 8020dea:	4770      	bx	lr
 8020dec:	2903      	cmp	r1, #3
 8020dee:	d80b      	bhi.n	8020e08 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 8020df0:	a301      	add	r3, pc, #4	; (adr r3, 8020df8 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x28>)
 8020df2:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8020df6:	bf00      	nop
 8020df8:	08020ddf 	.word	0x08020ddf
 8020dfc:	08020e11 	.word	0x08020e11
 8020e00:	08020de5 	.word	0x08020de5
 8020e04:	08020e0d 	.word	0x08020e0d
 8020e08:	2000      	movs	r0, #0
 8020e0a:	4770      	bx	lr
 8020e0c:	2001      	movs	r0, #1
 8020e0e:	4770      	bx	lr
 8020e10:	f04f 30ff 	mov.w	r0, #4294967295
 8020e14:	4770      	bx	lr
 8020e16:	bf00      	nop
 8020e18:	24026176 	.word	0x24026176

08020e1c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 8020e1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020e20:	b097      	sub	sp, #92	; 0x5c
 8020e22:	910b      	str	r1, [sp, #44]	; 0x2c
 8020e24:	a912      	add	r1, sp, #72	; 0x48
 8020e26:	f9bd 6080 	ldrsh.w	r6, [sp, #128]	; 0x80
 8020e2a:	f8bd 7088 	ldrh.w	r7, [sp, #136]	; 0x88
 8020e2e:	f8bd 408c 	ldrh.w	r4, [sp, #140]	; 0x8c
 8020e32:	f89d 80a4 	ldrb.w	r8, [sp, #164]	; 0xa4
 8020e36:	f89d 90ac 	ldrb.w	r9, [sp, #172]	; 0xac
 8020e3a:	e881 000c 	stmia.w	r1, {r2, r3}
 8020e3e:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	; 0x84
 8020e42:	930a      	str	r3, [sp, #40]	; 0x28
 8020e44:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 8020e48:	e9dd 2124 	ldrd	r2, r1, [sp, #144]	; 0x90
 8020e4c:	9311      	str	r3, [sp, #68]	; 0x44
 8020e4e:	f89d 30a8 	ldrb.w	r3, [sp, #168]	; 0xa8
 8020e52:	798d      	ldrb	r5, [r1, #6]
 8020e54:	930c      	str	r3, [sp, #48]	; 0x30
 8020e56:	7b4b      	ldrb	r3, [r1, #13]
 8020e58:	0158      	lsls	r0, r3, #5
 8020e5a:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8020e5e:	4328      	orrs	r0, r5
 8020e60:	9009      	str	r0, [sp, #36]	; 0x24
 8020e62:	f000 817c 	beq.w	802115e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8020e66:	011b      	lsls	r3, r3, #4
 8020e68:	79c8      	ldrb	r0, [r1, #7]
 8020e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8020e6e:	4303      	orrs	r3, r0
 8020e70:	930e      	str	r3, [sp, #56]	; 0x38
 8020e72:	f000 8174 	beq.w	802115e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8020e76:	f991 3009 	ldrsb.w	r3, [r1, #9]
 8020e7a:	b29b      	uxth	r3, r3
 8020e7c:	2f00      	cmp	r7, #0
 8020e7e:	f000 8116 	beq.w	80210ae <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x292>
 8020e82:	1aff      	subs	r7, r7, r3
 8020e84:	b2bf      	uxth	r7, r7
 8020e86:	043b      	lsls	r3, r7, #16
 8020e88:	d502      	bpl.n	8020e90 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 8020e8a:	1bf6      	subs	r6, r6, r7
 8020e8c:	2700      	movs	r7, #0
 8020e8e:	b236      	sxth	r6, r6
 8020e90:	f9b2 1000 	ldrsh.w	r1, [r2]
 8020e94:	a812      	add	r0, sp, #72	; 0x48
 8020e96:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 8020e9a:	428e      	cmp	r6, r1
 8020e9c:	b28b      	uxth	r3, r1
 8020e9e:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 8020ea2:	bfbf      	itttt	lt
 8020ea4:	18ff      	addlt	r7, r7, r3
 8020ea6:	1bbe      	sublt	r6, r7, r6
 8020ea8:	b2b7      	uxthlt	r7, r6
 8020eaa:	460e      	movlt	r6, r1
 8020eac:	8891      	ldrh	r1, [r2, #4]
 8020eae:	440b      	add	r3, r1
 8020eb0:	4631      	mov	r1, r6
 8020eb2:	b21b      	sxth	r3, r3
 8020eb4:	9310      	str	r3, [sp, #64]	; 0x40
 8020eb6:	88d3      	ldrh	r3, [r2, #6]
 8020eb8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020eba:	449a      	add	sl, r3
 8020ebc:	fa0f f38a 	sxth.w	r3, sl
 8020ec0:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 8020ec4:	930f      	str	r3, [sp, #60]	; 0x3c
 8020ec6:	4bb5      	ldr	r3, [pc, #724]	; (802119c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>)
 8020ec8:	f893 b000 	ldrb.w	fp, [r3]
 8020ecc:	f10b 3cff 	add.w	ip, fp, #4294967295
 8020ed0:	f1dc 0300 	rsbs	r3, ip, #0
 8020ed4:	eb43 030c 	adc.w	r3, r3, ip
 8020ed8:	930d      	str	r3, [sp, #52]	; 0x34
 8020eda:	464b      	mov	r3, r9
 8020edc:	f7fa f8d8 	bl	801b090 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 8020ee0:	4631      	mov	r1, r6
 8020ee2:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
 8020ee6:	464b      	mov	r3, r9
 8020ee8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020eea:	a812      	add	r0, sp, #72	; 0x48
 8020eec:	f7fa f8ed 	bl	801b0ca <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 8020ef0:	a916      	add	r1, sp, #88	; 0x58
 8020ef2:	f821 0d02 	strh.w	r0, [r1, #-2]!
 8020ef6:	a815      	add	r0, sp, #84	; 0x54
 8020ef8:	f7fa fa0e 	bl	801b318 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 8020efc:	f1b9 0f00 	cmp.w	r9, #0
 8020f00:	f040 80d8 	bne.w	80210b4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x298>
 8020f04:	f1bb 0f01 	cmp.w	fp, #1
 8020f08:	f040 80dc 	bne.w	80210c4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 8020f0c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8020f0e:	b153      	cbz	r3, 8020f26 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10a>
 8020f10:	2508      	movs	r5, #8
 8020f12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020f14:	fb95 f3f8 	sdiv	r3, r5, r8
 8020f18:	1e5d      	subs	r5, r3, #1
 8020f1a:	4415      	add	r5, r2
 8020f1c:	fb95 f5f3 	sdiv	r5, r5, r3
 8020f20:	fb15 f503 	smulbb	r5, r5, r3
 8020f24:	b2ad      	uxth	r5, r5
 8020f26:	b907      	cbnz	r7, 8020f2a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 8020f28:	b16c      	cbz	r4, 8020f46 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12a>
 8020f2a:	fb04 7305 	mla	r3, r4, r5, r7
 8020f2e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8020f30:	ebaa 0a04 	sub.w	sl, sl, r4
 8020f34:	fb08 f303 	mul.w	r3, r8, r3
 8020f38:	fa1f fa8a 	uxth.w	sl, sl
 8020f3c:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 8020f40:	f003 0407 	and.w	r4, r3, #7
 8020f44:	9226      	str	r2, [sp, #152]	; 0x98
 8020f46:	4649      	mov	r1, r9
 8020f48:	980d      	ldr	r0, [sp, #52]	; 0x34
 8020f4a:	f7ff ff1b 	bl	8020d84 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 8020f4e:	4683      	mov	fp, r0
 8020f50:	980d      	ldr	r0, [sp, #52]	; 0x34
 8020f52:	f7ff ff3d 	bl	8020dd0 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 8020f56:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8020f58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020f5a:	4681      	mov	r9, r0
 8020f5c:	1a9b      	subs	r3, r3, r2
 8020f5e:	459a      	cmp	sl, r3
 8020f60:	bfa8      	it	ge
 8020f62:	469a      	movge	sl, r3
 8020f64:	f1ba 0f00 	cmp.w	sl, #0
 8020f68:	f340 80f9 	ble.w	802115e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8020f6c:	1bf6      	subs	r6, r6, r7
 8020f6e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020f70:	1b9e      	subs	r6, r3, r6
 8020f72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020f74:	429e      	cmp	r6, r3
 8020f76:	bfd4      	ite	le
 8020f78:	ebc7 0706 	rsble	r7, r7, r6
 8020f7c:	ebc7 0703 	rsbgt	r7, r7, r3
 8020f80:	2f00      	cmp	r7, #0
 8020f82:	f340 80ec 	ble.w	802115e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8020f86:	1bed      	subs	r5, r5, r7
 8020f88:	fb08 f305 	mul.w	r3, r8, r5
 8020f8c:	930d      	str	r3, [sp, #52]	; 0x34
 8020f8e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020f90:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8020f94:	930e      	str	r3, [sp, #56]	; 0x38
 8020f96:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020f98:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8020f9c:	930f      	str	r3, [sp, #60]	; 0x3c
 8020f9e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020fa0:	b2db      	uxtb	r3, r3
 8020fa2:	9310      	str	r3, [sp, #64]	; 0x40
 8020fa4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020fa6:	2b00      	cmp	r3, #0
 8020fa8:	f040 80de 	bne.w	8021168 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x34c>
 8020fac:	4b7c      	ldr	r3, [pc, #496]	; (80211a0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>)
 8020fae:	6818      	ldr	r0, [r3, #0]
 8020fb0:	6803      	ldr	r3, [r0, #0]
 8020fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020fb4:	4798      	blx	r3
 8020fb6:	2301      	movs	r3, #1
 8020fb8:	4a7a      	ldr	r2, [pc, #488]	; (80211a4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>)
 8020fba:	eb0b 064b 	add.w	r6, fp, fp, lsl #1
 8020fbe:	fb07 9b1b 	mls	fp, r7, fp, r9
 8020fc2:	fa03 f308 	lsl.w	r3, r3, r8
 8020fc6:	8811      	ldrh	r1, [r2, #0]
 8020fc8:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 8020fcc:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 8020fd0:	3b01      	subs	r3, #1
 8020fd2:	fb06 bb07 	mla	fp, r6, r7, fp
 8020fd6:	b2db      	uxtb	r3, r3
 8020fd8:	930a      	str	r3, [sp, #40]	; 0x28
 8020fda:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 8020fde:	fb01 2303 	mla	r3, r1, r3, r2
 8020fe2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020fe6:	18c3      	adds	r3, r0, r3
 8020fe8:	9309      	str	r3, [sp, #36]	; 0x24
 8020fea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8020fec:	781a      	ldrb	r2, [r3, #0]
 8020fee:	4122      	asrs	r2, r4
 8020ff0:	b2d2      	uxtb	r2, r2
 8020ff2:	f11a 3aff 	adds.w	sl, sl, #4294967295
 8020ff6:	f0c0 80d7 	bcc.w	80211a8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>
 8020ffa:	46be      	mov	lr, r7
 8020ffc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8020ffe:	f11e 3eff 	adds.w	lr, lr, #4294967295
 8021002:	f0c0 80ba 	bcc.w	802117a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x35e>
 8021006:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021008:	4013      	ands	r3, r2
 802100a:	d041      	beq.n	8021090 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 802100c:	20ff      	movs	r0, #255	; 0xff
 802100e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8021010:	fb90 f5f5 	sdiv	r5, r0, r5
 8021014:	436b      	muls	r3, r5
 8021016:	2bfe      	cmp	r3, #254	; 0xfe
 8021018:	dd03      	ble.n	8021022 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x206>
 802101a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802101c:	4285      	cmp	r5, r0
 802101e:	f000 80a5 	beq.w	802116c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x350>
 8021022:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8021024:	9810      	ldr	r0, [sp, #64]	; 0x40
 8021026:	fb15 f303 	smulbb	r3, r5, r3
 802102a:	b29b      	uxth	r3, r3
 802102c:	1c5d      	adds	r5, r3, #1
 802102e:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 8021032:	780d      	ldrb	r5, [r1, #0]
 8021034:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021038:	fa1f fc83 	uxth.w	ip, r3
 802103c:	43db      	mvns	r3, r3
 802103e:	fb10 f90c 	smulbb	r9, r0, ip
 8021042:	b2db      	uxtb	r3, r3
 8021044:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8021046:	fb05 9503 	mla	r5, r5, r3, r9
 802104a:	b2ad      	uxth	r5, r5
 802104c:	f105 0901 	add.w	r9, r5, #1
 8021050:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 8021054:	fb10 f90c 	smulbb	r9, r0, ip
 8021058:	980e      	ldr	r0, [sp, #56]	; 0x38
 802105a:	122d      	asrs	r5, r5, #8
 802105c:	fb10 fc0c 	smulbb	ip, r0, ip
 8021060:	700d      	strb	r5, [r1, #0]
 8021062:	784d      	ldrb	r5, [r1, #1]
 8021064:	fb05 9503 	mla	r5, r5, r3, r9
 8021068:	b2ad      	uxth	r5, r5
 802106a:	f105 0901 	add.w	r9, r5, #1
 802106e:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 8021072:	122d      	asrs	r5, r5, #8
 8021074:	704d      	strb	r5, [r1, #1]
 8021076:	788d      	ldrb	r5, [r1, #2]
 8021078:	fb05 cc03 	mla	ip, r5, r3, ip
 802107c:	fa1f fc8c 	uxth.w	ip, ip
 8021080:	f10c 0301 	add.w	r3, ip, #1
 8021084:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8021088:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 802108c:	f881 c002 	strb.w	ip, [r1, #2]
 8021090:	4444      	add	r4, r8
 8021092:	4431      	add	r1, r6
 8021094:	b2a4      	uxth	r4, r4
 8021096:	2c07      	cmp	r4, #7
 8021098:	bf89      	itett	hi
 802109a:	9b26      	ldrhi	r3, [sp, #152]	; 0x98
 802109c:	fa42 f208 	asrls.w	r2, r2, r8
 80210a0:	2400      	movhi	r4, #0
 80210a2:	785a      	ldrbhi	r2, [r3, #1]
 80210a4:	bf8a      	itet	hi
 80210a6:	3301      	addhi	r3, #1
 80210a8:	b2d2      	uxtbls	r2, r2
 80210aa:	9326      	strhi	r3, [sp, #152]	; 0x98
 80210ac:	e7a7      	b.n	8020ffe <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e2>
 80210ae:	441e      	add	r6, r3
 80210b0:	b236      	sxth	r6, r6
 80210b2:	e6ed      	b.n	8020e90 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 80210b4:	f1b9 0f01 	cmp.w	r9, #1
 80210b8:	f47f af28 	bne.w	8020f0c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80210bc:	f1bb 0f01 	cmp.w	fp, #1
 80210c0:	f47f af24 	bne.w	8020f0c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80210c4:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 80211a0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>
 80210c8:	f8db 0000 	ldr.w	r0, [fp]
 80210cc:	6803      	ldr	r3, [r0, #0]
 80210ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80210d0:	4798      	blx	r3
 80210d2:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 80210d6:	465a      	mov	r2, fp
 80210d8:	d006      	beq.n	80210e8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 80210da:	f1b8 0f04 	cmp.w	r8, #4
 80210de:	d141      	bne.n	8021164 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x348>
 80210e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80210e2:	3300      	adds	r3, #0
 80210e4:	bf18      	it	ne
 80210e6:	2301      	movne	r3, #1
 80210e8:	0580      	lsls	r0, r0, #22
 80210ea:	d566      	bpl.n	80211ba <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 80210ec:	f1b8 0f08 	cmp.w	r8, #8
 80210f0:	d163      	bne.n	80211ba <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 80210f2:	2b00      	cmp	r3, #0
 80210f4:	bf0c      	ite	eq
 80210f6:	f44f 7100 	moveq.w	r1, #512	; 0x200
 80210fa:	f44f 7180 	movne.w	r1, #256	; 0x100
 80210fe:	2f00      	cmp	r7, #0
 8021100:	f47f af04 	bne.w	8020f0c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8021104:	2c00      	cmp	r4, #0
 8021106:	f47f af01 	bne.w	8020f0c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 802110a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802110c:	9810      	ldr	r0, [sp, #64]	; 0x40
 802110e:	18f3      	adds	r3, r6, r3
 8021110:	4283      	cmp	r3, r0
 8021112:	f73f aefb 	bgt.w	8020f0c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8021116:	980a      	ldr	r0, [sp, #40]	; 0x28
 8021118:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802111a:	4403      	add	r3, r0
 802111c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 802111e:	4283      	cmp	r3, r0
 8021120:	f73f aef4 	bgt.w	8020f0c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8021124:	f1b8 0f08 	cmp.w	r8, #8
 8021128:	6810      	ldr	r0, [r2, #0]
 802112a:	f04f 0600 	mov.w	r6, #0
 802112e:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 8021132:	bf18      	it	ne
 8021134:	3501      	addne	r5, #1
 8021136:	6804      	ldr	r4, [r0, #0]
 8021138:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 802113c:	bf18      	it	ne
 802113e:	f025 0501 	bicne.w	r5, r5, #1
 8021142:	e9cd 1605 	strd	r1, r6, [sp, #20]
 8021146:	990c      	ldr	r1, [sp, #48]	; 0x30
 8021148:	bf18      	it	ne
 802114a:	b2ad      	uxthne	r5, r5
 802114c:	9104      	str	r1, [sp, #16]
 802114e:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8021150:	e9cd 5a00 	strd	r5, sl, [sp]
 8021154:	e9cd 5102 	strd	r5, r1, [sp, #8]
 8021158:	9926      	ldr	r1, [sp, #152]	; 0x98
 802115a:	6d64      	ldr	r4, [r4, #84]	; 0x54
 802115c:	47a0      	blx	r4
 802115e:	b017      	add	sp, #92	; 0x5c
 8021160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021164:	2300      	movs	r3, #0
 8021166:	e7bf      	b.n	80210e8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 8021168:	980b      	ldr	r0, [sp, #44]	; 0x2c
 802116a:	e724      	b.n	8020fb6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x19a>
 802116c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802116e:	700b      	strb	r3, [r1, #0]
 8021170:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8021172:	704b      	strb	r3, [r1, #1]
 8021174:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021176:	708b      	strb	r3, [r1, #2]
 8021178:	e78a      	b.n	8021090 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 802117a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802117c:	b153      	cbz	r3, 8021194 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 802117e:	441c      	add	r4, r3
 8021180:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8021182:	b2a4      	uxth	r4, r4
 8021184:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 8021188:	f004 0407 	and.w	r4, r4, #7
 802118c:	781a      	ldrb	r2, [r3, #0]
 802118e:	9326      	str	r3, [sp, #152]	; 0x98
 8021190:	4122      	asrs	r2, r4
 8021192:	b2d2      	uxtb	r2, r2
 8021194:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021196:	445b      	add	r3, fp
 8021198:	9309      	str	r3, [sp, #36]	; 0x24
 802119a:	e72a      	b.n	8020ff2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d6>
 802119c:	24026174 	.word	0x24026174
 80211a0:	2402617c 	.word	0x2402617c
 80211a4:	24026176 	.word	0x24026176
 80211a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80211aa:	2b00      	cmp	r3, #0
 80211ac:	d1d7      	bne.n	802115e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 80211ae:	4b06      	ldr	r3, [pc, #24]	; (80211c8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 80211b0:	6818      	ldr	r0, [r3, #0]
 80211b2:	6803      	ldr	r3, [r0, #0]
 80211b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80211b6:	4798      	blx	r3
 80211b8:	e7d1      	b.n	802115e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 80211ba:	2b00      	cmp	r3, #0
 80211bc:	f43f aea6 	beq.w	8020f0c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80211c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80211c4:	e79b      	b.n	80210fe <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e2>
 80211c6:	bf00      	nop
 80211c8:	2402617c 	.word	0x2402617c

080211cc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 80211cc:	b538      	push	{r3, r4, r5, lr}
 80211ce:	4c15      	ldr	r4, [pc, #84]	; (8021224 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 80211d0:	4605      	mov	r5, r0
 80211d2:	7823      	ldrb	r3, [r4, #0]
 80211d4:	f3bf 8f5b 	dmb	ish
 80211d8:	07da      	lsls	r2, r3, #31
 80211da:	d40b      	bmi.n	80211f4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 80211dc:	4620      	mov	r0, r4
 80211de:	f005 f890 	bl	8026302 <__cxa_guard_acquire>
 80211e2:	b138      	cbz	r0, 80211f4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 80211e4:	4620      	mov	r0, r4
 80211e6:	f005 f898 	bl	802631a <__cxa_guard_release>
 80211ea:	4a0f      	ldr	r2, [pc, #60]	; (8021228 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 80211ec:	490f      	ldr	r1, [pc, #60]	; (802122c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 80211ee:	4810      	ldr	r0, [pc, #64]	; (8021230 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 80211f0:	f005 f880 	bl	80262f4 <__aeabi_atexit>
 80211f4:	4c0f      	ldr	r4, [pc, #60]	; (8021234 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 80211f6:	7823      	ldrb	r3, [r4, #0]
 80211f8:	f3bf 8f5b 	dmb	ish
 80211fc:	07db      	lsls	r3, r3, #31
 80211fe:	d40b      	bmi.n	8021218 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8021200:	4620      	mov	r0, r4
 8021202:	f005 f87e 	bl	8026302 <__cxa_guard_acquire>
 8021206:	b138      	cbz	r0, 8021218 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8021208:	4620      	mov	r0, r4
 802120a:	f005 f886 	bl	802631a <__cxa_guard_release>
 802120e:	4a06      	ldr	r2, [pc, #24]	; (8021228 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8021210:	4909      	ldr	r1, [pc, #36]	; (8021238 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 8021212:	480a      	ldr	r0, [pc, #40]	; (802123c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8021214:	f005 f86e 	bl	80262f4 <__aeabi_atexit>
 8021218:	4b05      	ldr	r3, [pc, #20]	; (8021230 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 802121a:	612b      	str	r3, [r5, #16]
 802121c:	4b07      	ldr	r3, [pc, #28]	; (802123c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 802121e:	616b      	str	r3, [r5, #20]
 8021220:	bd38      	pop	{r3, r4, r5, pc}
 8021222:	bf00      	nop
 8021224:	24026248 	.word	0x24026248
 8021228:	24000000 	.word	0x24000000
 802122c:	0801fda3 	.word	0x0801fda3
 8021230:	240000ac 	.word	0x240000ac
 8021234:	2402624c 	.word	0x2402624c
 8021238:	0801fda1 	.word	0x0801fda1
 802123c:	240000b0 	.word	0x240000b0

08021240 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 8021240:	b538      	push	{r3, r4, r5, lr}
 8021242:	4c15      	ldr	r4, [pc, #84]	; (8021298 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 8021244:	4605      	mov	r5, r0
 8021246:	7823      	ldrb	r3, [r4, #0]
 8021248:	f3bf 8f5b 	dmb	ish
 802124c:	07da      	lsls	r2, r3, #31
 802124e:	d40b      	bmi.n	8021268 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8021250:	4620      	mov	r0, r4
 8021252:	f005 f856 	bl	8026302 <__cxa_guard_acquire>
 8021256:	b138      	cbz	r0, 8021268 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8021258:	4620      	mov	r0, r4
 802125a:	f005 f85e 	bl	802631a <__cxa_guard_release>
 802125e:	4a0f      	ldr	r2, [pc, #60]	; (802129c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8021260:	490f      	ldr	r1, [pc, #60]	; (80212a0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 8021262:	4810      	ldr	r0, [pc, #64]	; (80212a4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8021264:	f005 f846 	bl	80262f4 <__aeabi_atexit>
 8021268:	4c0f      	ldr	r4, [pc, #60]	; (80212a8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 802126a:	7823      	ldrb	r3, [r4, #0]
 802126c:	f3bf 8f5b 	dmb	ish
 8021270:	07db      	lsls	r3, r3, #31
 8021272:	d40b      	bmi.n	802128c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8021274:	4620      	mov	r0, r4
 8021276:	f005 f844 	bl	8026302 <__cxa_guard_acquire>
 802127a:	b138      	cbz	r0, 802128c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 802127c:	4620      	mov	r0, r4
 802127e:	f005 f84c 	bl	802631a <__cxa_guard_release>
 8021282:	4a06      	ldr	r2, [pc, #24]	; (802129c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8021284:	4909      	ldr	r1, [pc, #36]	; (80212ac <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 8021286:	480a      	ldr	r0, [pc, #40]	; (80212b0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8021288:	f005 f834 	bl	80262f4 <__aeabi_atexit>
 802128c:	4b05      	ldr	r3, [pc, #20]	; (80212a4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 802128e:	60ab      	str	r3, [r5, #8]
 8021290:	4b07      	ldr	r3, [pc, #28]	; (80212b0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8021292:	60eb      	str	r3, [r5, #12]
 8021294:	bd38      	pop	{r3, r4, r5, pc}
 8021296:	bf00      	nop
 8021298:	24026228 	.word	0x24026228
 802129c:	24000000 	.word	0x24000000
 80212a0:	0801fda7 	.word	0x0801fda7
 80212a4:	2400008c 	.word	0x2400008c
 80212a8:	2402622c 	.word	0x2402622c
 80212ac:	0801fda5 	.word	0x0801fda5
 80212b0:	24000090 	.word	0x24000090

080212b4 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 80212b4:	b510      	push	{r4, lr}
 80212b6:	4604      	mov	r4, r0
 80212b8:	f7ff ff88 	bl	80211cc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 80212bc:	4620      	mov	r0, r4
 80212be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80212c2:	f7ff bfbd 	b.w	8021240 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

080212c8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 80212c8:	b538      	push	{r3, r4, r5, lr}
 80212ca:	4c15      	ldr	r4, [pc, #84]	; (8021320 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 80212cc:	4605      	mov	r5, r0
 80212ce:	7823      	ldrb	r3, [r4, #0]
 80212d0:	f3bf 8f5b 	dmb	ish
 80212d4:	07da      	lsls	r2, r3, #31
 80212d6:	d40b      	bmi.n	80212f0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 80212d8:	4620      	mov	r0, r4
 80212da:	f005 f812 	bl	8026302 <__cxa_guard_acquire>
 80212de:	b138      	cbz	r0, 80212f0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 80212e0:	4620      	mov	r0, r4
 80212e2:	f005 f81a 	bl	802631a <__cxa_guard_release>
 80212e6:	4a0f      	ldr	r2, [pc, #60]	; (8021324 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 80212e8:	490f      	ldr	r1, [pc, #60]	; (8021328 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 80212ea:	4810      	ldr	r0, [pc, #64]	; (802132c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 80212ec:	f005 f802 	bl	80262f4 <__aeabi_atexit>
 80212f0:	4c0f      	ldr	r4, [pc, #60]	; (8021330 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 80212f2:	7823      	ldrb	r3, [r4, #0]
 80212f4:	f3bf 8f5b 	dmb	ish
 80212f8:	07db      	lsls	r3, r3, #31
 80212fa:	d40b      	bmi.n	8021314 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 80212fc:	4620      	mov	r0, r4
 80212fe:	f005 f800 	bl	8026302 <__cxa_guard_acquire>
 8021302:	b138      	cbz	r0, 8021314 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8021304:	4620      	mov	r0, r4
 8021306:	f005 f808 	bl	802631a <__cxa_guard_release>
 802130a:	4a06      	ldr	r2, [pc, #24]	; (8021324 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 802130c:	4909      	ldr	r1, [pc, #36]	; (8021334 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 802130e:	480a      	ldr	r0, [pc, #40]	; (8021338 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8021310:	f004 fff0 	bl	80262f4 <__aeabi_atexit>
 8021314:	4b05      	ldr	r3, [pc, #20]	; (802132c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8021316:	622b      	str	r3, [r5, #32]
 8021318:	4b07      	ldr	r3, [pc, #28]	; (8021338 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 802131a:	626b      	str	r3, [r5, #36]	; 0x24
 802131c:	bd38      	pop	{r3, r4, r5, pc}
 802131e:	bf00      	nop
 8021320:	24026250 	.word	0x24026250
 8021324:	24000000 	.word	0x24000000
 8021328:	0801fd9b 	.word	0x0801fd9b
 802132c:	240000b4 	.word	0x240000b4
 8021330:	24026254 	.word	0x24026254
 8021334:	0801fd99 	.word	0x0801fd99
 8021338:	240000b8 	.word	0x240000b8

0802133c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 802133c:	b538      	push	{r3, r4, r5, lr}
 802133e:	4c15      	ldr	r4, [pc, #84]	; (8021394 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 8021340:	4605      	mov	r5, r0
 8021342:	7823      	ldrb	r3, [r4, #0]
 8021344:	f3bf 8f5b 	dmb	ish
 8021348:	07da      	lsls	r2, r3, #31
 802134a:	d40b      	bmi.n	8021364 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 802134c:	4620      	mov	r0, r4
 802134e:	f004 ffd8 	bl	8026302 <__cxa_guard_acquire>
 8021352:	b138      	cbz	r0, 8021364 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8021354:	4620      	mov	r0, r4
 8021356:	f004 ffe0 	bl	802631a <__cxa_guard_release>
 802135a:	4a0f      	ldr	r2, [pc, #60]	; (8021398 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 802135c:	490f      	ldr	r1, [pc, #60]	; (802139c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 802135e:	4810      	ldr	r0, [pc, #64]	; (80213a0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8021360:	f004 ffc8 	bl	80262f4 <__aeabi_atexit>
 8021364:	4c0f      	ldr	r4, [pc, #60]	; (80213a4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 8021366:	7823      	ldrb	r3, [r4, #0]
 8021368:	f3bf 8f5b 	dmb	ish
 802136c:	07db      	lsls	r3, r3, #31
 802136e:	d40b      	bmi.n	8021388 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8021370:	4620      	mov	r0, r4
 8021372:	f004 ffc6 	bl	8026302 <__cxa_guard_acquire>
 8021376:	b138      	cbz	r0, 8021388 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8021378:	4620      	mov	r0, r4
 802137a:	f004 ffce 	bl	802631a <__cxa_guard_release>
 802137e:	4a06      	ldr	r2, [pc, #24]	; (8021398 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8021380:	4909      	ldr	r1, [pc, #36]	; (80213a8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 8021382:	480a      	ldr	r0, [pc, #40]	; (80213ac <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8021384:	f004 ffb6 	bl	80262f4 <__aeabi_atexit>
 8021388:	4b05      	ldr	r3, [pc, #20]	; (80213a0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 802138a:	61ab      	str	r3, [r5, #24]
 802138c:	4b07      	ldr	r3, [pc, #28]	; (80213ac <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 802138e:	61eb      	str	r3, [r5, #28]
 8021390:	bd38      	pop	{r3, r4, r5, pc}
 8021392:	bf00      	nop
 8021394:	24026230 	.word	0x24026230
 8021398:	24000000 	.word	0x24000000
 802139c:	0801fd9f 	.word	0x0801fd9f
 80213a0:	24000094 	.word	0x24000094
 80213a4:	24026234 	.word	0x24026234
 80213a8:	0801fd9d 	.word	0x0801fd9d
 80213ac:	24000098 	.word	0x24000098

080213b0 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 80213b0:	b510      	push	{r4, lr}
 80213b2:	4604      	mov	r4, r0
 80213b4:	f7ff ff88 	bl	80212c8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 80213b8:	4620      	mov	r0, r4
 80213ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80213be:	f7ff bfbd 	b.w	802133c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

080213c4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 80213c4:	b538      	push	{r3, r4, r5, lr}
 80213c6:	4c15      	ldr	r4, [pc, #84]	; (802141c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 80213c8:	4605      	mov	r5, r0
 80213ca:	7823      	ldrb	r3, [r4, #0]
 80213cc:	f3bf 8f5b 	dmb	ish
 80213d0:	07da      	lsls	r2, r3, #31
 80213d2:	d40b      	bmi.n	80213ec <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 80213d4:	4620      	mov	r0, r4
 80213d6:	f004 ff94 	bl	8026302 <__cxa_guard_acquire>
 80213da:	b138      	cbz	r0, 80213ec <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 80213dc:	4620      	mov	r0, r4
 80213de:	f004 ff9c 	bl	802631a <__cxa_guard_release>
 80213e2:	4a0f      	ldr	r2, [pc, #60]	; (8021420 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 80213e4:	490f      	ldr	r1, [pc, #60]	; (8021424 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 80213e6:	4810      	ldr	r0, [pc, #64]	; (8021428 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 80213e8:	f004 ff84 	bl	80262f4 <__aeabi_atexit>
 80213ec:	4c0f      	ldr	r4, [pc, #60]	; (802142c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 80213ee:	7823      	ldrb	r3, [r4, #0]
 80213f0:	f3bf 8f5b 	dmb	ish
 80213f4:	07db      	lsls	r3, r3, #31
 80213f6:	d40b      	bmi.n	8021410 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 80213f8:	4620      	mov	r0, r4
 80213fa:	f004 ff82 	bl	8026302 <__cxa_guard_acquire>
 80213fe:	b138      	cbz	r0, 8021410 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 8021400:	4620      	mov	r0, r4
 8021402:	f004 ff8a 	bl	802631a <__cxa_guard_release>
 8021406:	4a06      	ldr	r2, [pc, #24]	; (8021420 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 8021408:	4909      	ldr	r1, [pc, #36]	; (8021430 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 802140a:	480a      	ldr	r0, [pc, #40]	; (8021434 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 802140c:	f004 ff72 	bl	80262f4 <__aeabi_atexit>
 8021410:	4b05      	ldr	r3, [pc, #20]	; (8021428 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 8021412:	632b      	str	r3, [r5, #48]	; 0x30
 8021414:	4b07      	ldr	r3, [pc, #28]	; (8021434 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 8021416:	636b      	str	r3, [r5, #52]	; 0x34
 8021418:	bd38      	pop	{r3, r4, r5, pc}
 802141a:	bf00      	nop
 802141c:	24026238 	.word	0x24026238
 8021420:	24000000 	.word	0x24000000
 8021424:	0801fd93 	.word	0x0801fd93
 8021428:	2400009c 	.word	0x2400009c
 802142c:	2402623c 	.word	0x2402623c
 8021430:	0801fd91 	.word	0x0801fd91
 8021434:	240000a0 	.word	0x240000a0

08021438 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 8021438:	b538      	push	{r3, r4, r5, lr}
 802143a:	4c15      	ldr	r4, [pc, #84]	; (8021490 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 802143c:	4605      	mov	r5, r0
 802143e:	7823      	ldrb	r3, [r4, #0]
 8021440:	f3bf 8f5b 	dmb	ish
 8021444:	07da      	lsls	r2, r3, #31
 8021446:	d40b      	bmi.n	8021460 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8021448:	4620      	mov	r0, r4
 802144a:	f004 ff5a 	bl	8026302 <__cxa_guard_acquire>
 802144e:	b138      	cbz	r0, 8021460 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8021450:	4620      	mov	r0, r4
 8021452:	f004 ff62 	bl	802631a <__cxa_guard_release>
 8021456:	4a0f      	ldr	r2, [pc, #60]	; (8021494 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8021458:	490f      	ldr	r1, [pc, #60]	; (8021498 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 802145a:	4810      	ldr	r0, [pc, #64]	; (802149c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 802145c:	f004 ff4a 	bl	80262f4 <__aeabi_atexit>
 8021460:	4c0f      	ldr	r4, [pc, #60]	; (80214a0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 8021462:	7823      	ldrb	r3, [r4, #0]
 8021464:	f3bf 8f5b 	dmb	ish
 8021468:	07db      	lsls	r3, r3, #31
 802146a:	d40b      	bmi.n	8021484 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 802146c:	4620      	mov	r0, r4
 802146e:	f004 ff48 	bl	8026302 <__cxa_guard_acquire>
 8021472:	b138      	cbz	r0, 8021484 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 8021474:	4620      	mov	r0, r4
 8021476:	f004 ff50 	bl	802631a <__cxa_guard_release>
 802147a:	4a06      	ldr	r2, [pc, #24]	; (8021494 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 802147c:	4909      	ldr	r1, [pc, #36]	; (80214a4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 802147e:	480a      	ldr	r0, [pc, #40]	; (80214a8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 8021480:	f004 ff38 	bl	80262f4 <__aeabi_atexit>
 8021484:	4b05      	ldr	r3, [pc, #20]	; (802149c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 8021486:	62ab      	str	r3, [r5, #40]	; 0x28
 8021488:	4b07      	ldr	r3, [pc, #28]	; (80214a8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 802148a:	62eb      	str	r3, [r5, #44]	; 0x2c
 802148c:	bd38      	pop	{r3, r4, r5, pc}
 802148e:	bf00      	nop
 8021490:	24026210 	.word	0x24026210
 8021494:	24000000 	.word	0x24000000
 8021498:	0801fd97 	.word	0x0801fd97
 802149c:	24000074 	.word	0x24000074
 80214a0:	24026214 	.word	0x24026214
 80214a4:	0801fd95 	.word	0x0801fd95
 80214a8:	24000078 	.word	0x24000078

080214ac <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 80214ac:	b510      	push	{r4, lr}
 80214ae:	4604      	mov	r4, r0
 80214b0:	f7ff ff88 	bl	80213c4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 80214b4:	4620      	mov	r0, r4
 80214b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80214ba:	f7ff bfbd 	b.w	8021438 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

080214c0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 80214c0:	b538      	push	{r3, r4, r5, lr}
 80214c2:	4c15      	ldr	r4, [pc, #84]	; (8021518 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 80214c4:	4605      	mov	r5, r0
 80214c6:	7823      	ldrb	r3, [r4, #0]
 80214c8:	f3bf 8f5b 	dmb	ish
 80214cc:	07da      	lsls	r2, r3, #31
 80214ce:	d40b      	bmi.n	80214e8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 80214d0:	4620      	mov	r0, r4
 80214d2:	f004 ff16 	bl	8026302 <__cxa_guard_acquire>
 80214d6:	b138      	cbz	r0, 80214e8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 80214d8:	4620      	mov	r0, r4
 80214da:	f004 ff1e 	bl	802631a <__cxa_guard_release>
 80214de:	4a0f      	ldr	r2, [pc, #60]	; (802151c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 80214e0:	490f      	ldr	r1, [pc, #60]	; (8021520 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 80214e2:	4810      	ldr	r0, [pc, #64]	; (8021524 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 80214e4:	f004 ff06 	bl	80262f4 <__aeabi_atexit>
 80214e8:	4c0f      	ldr	r4, [pc, #60]	; (8021528 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 80214ea:	7823      	ldrb	r3, [r4, #0]
 80214ec:	f3bf 8f5b 	dmb	ish
 80214f0:	07db      	lsls	r3, r3, #31
 80214f2:	d40b      	bmi.n	802150c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 80214f4:	4620      	mov	r0, r4
 80214f6:	f004 ff04 	bl	8026302 <__cxa_guard_acquire>
 80214fa:	b138      	cbz	r0, 802150c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 80214fc:	4620      	mov	r0, r4
 80214fe:	f004 ff0c 	bl	802631a <__cxa_guard_release>
 8021502:	4a06      	ldr	r2, [pc, #24]	; (802151c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8021504:	4909      	ldr	r1, [pc, #36]	; (802152c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 8021506:	480a      	ldr	r0, [pc, #40]	; (8021530 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8021508:	f004 fef4 	bl	80262f4 <__aeabi_atexit>
 802150c:	4b05      	ldr	r3, [pc, #20]	; (8021524 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 802150e:	642b      	str	r3, [r5, #64]	; 0x40
 8021510:	4b07      	ldr	r3, [pc, #28]	; (8021530 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8021512:	646b      	str	r3, [r5, #68]	; 0x44
 8021514:	bd38      	pop	{r3, r4, r5, pc}
 8021516:	bf00      	nop
 8021518:	24026240 	.word	0x24026240
 802151c:	24000000 	.word	0x24000000
 8021520:	0801fd8b 	.word	0x0801fd8b
 8021524:	240000a4 	.word	0x240000a4
 8021528:	24026244 	.word	0x24026244
 802152c:	0801fd89 	.word	0x0801fd89
 8021530:	240000a8 	.word	0x240000a8

08021534 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 8021534:	b538      	push	{r3, r4, r5, lr}
 8021536:	4c15      	ldr	r4, [pc, #84]	; (802158c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 8021538:	4605      	mov	r5, r0
 802153a:	7823      	ldrb	r3, [r4, #0]
 802153c:	f3bf 8f5b 	dmb	ish
 8021540:	07da      	lsls	r2, r3, #31
 8021542:	d40b      	bmi.n	802155c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8021544:	4620      	mov	r0, r4
 8021546:	f004 fedc 	bl	8026302 <__cxa_guard_acquire>
 802154a:	b138      	cbz	r0, 802155c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 802154c:	4620      	mov	r0, r4
 802154e:	f004 fee4 	bl	802631a <__cxa_guard_release>
 8021552:	4a0f      	ldr	r2, [pc, #60]	; (8021590 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8021554:	490f      	ldr	r1, [pc, #60]	; (8021594 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 8021556:	4810      	ldr	r0, [pc, #64]	; (8021598 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8021558:	f004 fecc 	bl	80262f4 <__aeabi_atexit>
 802155c:	4c0f      	ldr	r4, [pc, #60]	; (802159c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 802155e:	7823      	ldrb	r3, [r4, #0]
 8021560:	f3bf 8f5b 	dmb	ish
 8021564:	07db      	lsls	r3, r3, #31
 8021566:	d40b      	bmi.n	8021580 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8021568:	4620      	mov	r0, r4
 802156a:	f004 feca 	bl	8026302 <__cxa_guard_acquire>
 802156e:	b138      	cbz	r0, 8021580 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8021570:	4620      	mov	r0, r4
 8021572:	f004 fed2 	bl	802631a <__cxa_guard_release>
 8021576:	4a06      	ldr	r2, [pc, #24]	; (8021590 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8021578:	4909      	ldr	r1, [pc, #36]	; (80215a0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 802157a:	480a      	ldr	r0, [pc, #40]	; (80215a4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 802157c:	f004 feba 	bl	80262f4 <__aeabi_atexit>
 8021580:	4b05      	ldr	r3, [pc, #20]	; (8021598 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8021582:	63ab      	str	r3, [r5, #56]	; 0x38
 8021584:	4b07      	ldr	r3, [pc, #28]	; (80215a4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8021586:	63eb      	str	r3, [r5, #60]	; 0x3c
 8021588:	bd38      	pop	{r3, r4, r5, pc}
 802158a:	bf00      	nop
 802158c:	24026220 	.word	0x24026220
 8021590:	24000000 	.word	0x24000000
 8021594:	0801fd8f 	.word	0x0801fd8f
 8021598:	24000084 	.word	0x24000084
 802159c:	24026224 	.word	0x24026224
 80215a0:	0801fd8d 	.word	0x0801fd8d
 80215a4:	24000088 	.word	0x24000088

080215a8 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 80215a8:	b510      	push	{r4, lr}
 80215aa:	4604      	mov	r4, r0
 80215ac:	f7ff ff88 	bl	80214c0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 80215b0:	4620      	mov	r0, r4
 80215b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80215b6:	f7ff bfbd 	b.w	8021534 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

080215bc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 80215bc:	b538      	push	{r3, r4, r5, lr}
 80215be:	4c15      	ldr	r4, [pc, #84]	; (8021614 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 80215c0:	4605      	mov	r5, r0
 80215c2:	7823      	ldrb	r3, [r4, #0]
 80215c4:	f3bf 8f5b 	dmb	ish
 80215c8:	07da      	lsls	r2, r3, #31
 80215ca:	d40b      	bmi.n	80215e4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 80215cc:	4620      	mov	r0, r4
 80215ce:	f004 fe98 	bl	8026302 <__cxa_guard_acquire>
 80215d2:	b138      	cbz	r0, 80215e4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 80215d4:	4620      	mov	r0, r4
 80215d6:	f004 fea0 	bl	802631a <__cxa_guard_release>
 80215da:	4a0f      	ldr	r2, [pc, #60]	; (8021618 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 80215dc:	490f      	ldr	r1, [pc, #60]	; (802161c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 80215de:	4810      	ldr	r0, [pc, #64]	; (8021620 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 80215e0:	f004 fe88 	bl	80262f4 <__aeabi_atexit>
 80215e4:	4c0f      	ldr	r4, [pc, #60]	; (8021624 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 80215e6:	7823      	ldrb	r3, [r4, #0]
 80215e8:	f3bf 8f5b 	dmb	ish
 80215ec:	07db      	lsls	r3, r3, #31
 80215ee:	d40b      	bmi.n	8021608 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 80215f0:	4620      	mov	r0, r4
 80215f2:	f004 fe86 	bl	8026302 <__cxa_guard_acquire>
 80215f6:	b138      	cbz	r0, 8021608 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 80215f8:	4620      	mov	r0, r4
 80215fa:	f004 fe8e 	bl	802631a <__cxa_guard_release>
 80215fe:	4a06      	ldr	r2, [pc, #24]	; (8021618 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8021600:	4909      	ldr	r1, [pc, #36]	; (8021628 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 8021602:	480a      	ldr	r0, [pc, #40]	; (802162c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8021604:	f004 fe76 	bl	80262f4 <__aeabi_atexit>
 8021608:	4b05      	ldr	r3, [pc, #20]	; (8021620 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 802160a:	652b      	str	r3, [r5, #80]	; 0x50
 802160c:	4b07      	ldr	r3, [pc, #28]	; (802162c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 802160e:	656b      	str	r3, [r5, #84]	; 0x54
 8021610:	bd38      	pop	{r3, r4, r5, pc}
 8021612:	bf00      	nop
 8021614:	24026218 	.word	0x24026218
 8021618:	24000000 	.word	0x24000000
 802161c:	0801fd83 	.word	0x0801fd83
 8021620:	2400007c 	.word	0x2400007c
 8021624:	2402621c 	.word	0x2402621c
 8021628:	0801fd81 	.word	0x0801fd81
 802162c:	24000080 	.word	0x24000080

08021630 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 8021630:	b538      	push	{r3, r4, r5, lr}
 8021632:	4c15      	ldr	r4, [pc, #84]	; (8021688 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 8021634:	4605      	mov	r5, r0
 8021636:	7823      	ldrb	r3, [r4, #0]
 8021638:	f3bf 8f5b 	dmb	ish
 802163c:	07da      	lsls	r2, r3, #31
 802163e:	d40b      	bmi.n	8021658 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8021640:	4620      	mov	r0, r4
 8021642:	f004 fe5e 	bl	8026302 <__cxa_guard_acquire>
 8021646:	b138      	cbz	r0, 8021658 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8021648:	4620      	mov	r0, r4
 802164a:	f004 fe66 	bl	802631a <__cxa_guard_release>
 802164e:	4a0f      	ldr	r2, [pc, #60]	; (802168c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8021650:	490f      	ldr	r1, [pc, #60]	; (8021690 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 8021652:	4810      	ldr	r0, [pc, #64]	; (8021694 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8021654:	f004 fe4e 	bl	80262f4 <__aeabi_atexit>
 8021658:	4c0f      	ldr	r4, [pc, #60]	; (8021698 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 802165a:	7823      	ldrb	r3, [r4, #0]
 802165c:	f3bf 8f5b 	dmb	ish
 8021660:	07db      	lsls	r3, r3, #31
 8021662:	d40b      	bmi.n	802167c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8021664:	4620      	mov	r0, r4
 8021666:	f004 fe4c 	bl	8026302 <__cxa_guard_acquire>
 802166a:	b138      	cbz	r0, 802167c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 802166c:	4620      	mov	r0, r4
 802166e:	f004 fe54 	bl	802631a <__cxa_guard_release>
 8021672:	4a06      	ldr	r2, [pc, #24]	; (802168c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8021674:	4909      	ldr	r1, [pc, #36]	; (802169c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 8021676:	480a      	ldr	r0, [pc, #40]	; (80216a0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8021678:	f004 fe3c 	bl	80262f4 <__aeabi_atexit>
 802167c:	4b05      	ldr	r3, [pc, #20]	; (8021694 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 802167e:	64ab      	str	r3, [r5, #72]	; 0x48
 8021680:	4b07      	ldr	r3, [pc, #28]	; (80216a0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8021682:	64eb      	str	r3, [r5, #76]	; 0x4c
 8021684:	bd38      	pop	{r3, r4, r5, pc}
 8021686:	bf00      	nop
 8021688:	24026208 	.word	0x24026208
 802168c:	24000000 	.word	0x24000000
 8021690:	0801fd87 	.word	0x0801fd87
 8021694:	2400006c 	.word	0x2400006c
 8021698:	2402620c 	.word	0x2402620c
 802169c:	0801fd85 	.word	0x0801fd85
 80216a0:	24000070 	.word	0x24000070

080216a4 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 80216a4:	b510      	push	{r4, lr}
 80216a6:	4604      	mov	r4, r0
 80216a8:	f7ff ff88 	bl	80215bc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 80216ac:	4620      	mov	r0, r4
 80216ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80216b2:	f7ff bfbd 	b.w	8021630 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

080216b6 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 80216b6:	b510      	push	{r4, lr}
 80216b8:	4604      	mov	r4, r0
 80216ba:	f7ff fff3 	bl	80216a4 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 80216be:	4620      	mov	r0, r4
 80216c0:	f7ff ff72 	bl	80215a8 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 80216c4:	4620      	mov	r0, r4
 80216c6:	f7ff fe73 	bl	80213b0 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 80216ca:	4620      	mov	r0, r4
 80216cc:	f7ff fdf2 	bl	80212b4 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 80216d0:	4620      	mov	r0, r4
 80216d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80216d6:	f7ff bee9 	b.w	80214ac <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>

080216da <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 80216da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80216de:	b087      	sub	sp, #28
 80216e0:	788d      	ldrb	r5, [r1, #2]
 80216e2:	f891 9000 	ldrb.w	r9, [r1]
 80216e6:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 80216ea:	9501      	str	r5, [sp, #4]
 80216ec:	784d      	ldrb	r5, [r1, #1]
 80216ee:	9203      	str	r2, [sp, #12]
 80216f0:	9502      	str	r5, [sp, #8]
 80216f2:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 80216f6:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
 80216fa:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 80216fe:	f89d e058 	ldrb.w	lr, [sp, #88]	; 0x58
 8021702:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	; 0x48
 8021706:	fb06 0708 	mla	r7, r6, r8, r0
 802170a:	2e00      	cmp	r6, #0
 802170c:	eb02 0a07 	add.w	sl, r2, r7
 8021710:	ea4f 2205 	mov.w	r2, r5, lsl #8
 8021714:	9d01      	ldr	r5, [sp, #4]
 8021716:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 802171a:	ea45 0509 	orr.w	r5, r5, r9
 802171e:	9505      	str	r5, [sp, #20]
 8021720:	f2c0 80b2 	blt.w	8021888 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 8021724:	45b3      	cmp	fp, r6
 8021726:	f340 80af 	ble.w	8021888 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 802172a:	2800      	cmp	r0, #0
 802172c:	f2c0 80aa 	blt.w	8021884 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 8021730:	4580      	cmp	r8, r0
 8021732:	f340 80a7 	ble.w	8021884 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 8021736:	9a03      	ldr	r2, [sp, #12]
 8021738:	5dd7      	ldrb	r7, [r2, r7]
 802173a:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 802173e:	441f      	add	r7, r3
 8021740:	1c42      	adds	r2, r0, #1
 8021742:	f100 80a4 	bmi.w	802188e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 8021746:	4590      	cmp	r8, r2
 8021748:	f340 80a1 	ble.w	802188e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 802174c:	2c00      	cmp	r4, #0
 802174e:	f000 809e 	beq.w	802188e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 8021752:	f89a 5001 	ldrb.w	r5, [sl, #1]
 8021756:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802175a:	441d      	add	r5, r3
 802175c:	3601      	adds	r6, #1
 802175e:	f100 809a 	bmi.w	8021896 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 8021762:	45b3      	cmp	fp, r6
 8021764:	f340 8097 	ble.w	8021896 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 8021768:	f1bc 0f00 	cmp.w	ip, #0
 802176c:	f000 8093 	beq.w	8021896 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 8021770:	2800      	cmp	r0, #0
 8021772:	f2c0 808e 	blt.w	8021892 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 8021776:	4580      	cmp	r8, r0
 8021778:	f340 808b 	ble.w	8021892 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 802177c:	f81a 6008 	ldrb.w	r6, [sl, r8]
 8021780:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8021784:	441e      	add	r6, r3
 8021786:	3001      	adds	r0, #1
 8021788:	f100 8088 	bmi.w	802189c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 802178c:	4580      	cmp	r8, r0
 802178e:	f340 8085 	ble.w	802189c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 8021792:	2c00      	cmp	r4, #0
 8021794:	f000 8082 	beq.w	802189c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 8021798:	44d0      	add	r8, sl
 802179a:	f898 2001 	ldrb.w	r2, [r8, #1]
 802179e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80217a2:	4413      	add	r3, r2
 80217a4:	b2a4      	uxth	r4, r4
 80217a6:	f895 a000 	ldrb.w	sl, [r5]
 80217aa:	fa1f fc8c 	uxth.w	ip, ip
 80217ae:	fb04 fb0c 	mul.w	fp, r4, ip
 80217b2:	0124      	lsls	r4, r4, #4
 80217b4:	ebcb 1c0c 	rsb	ip, fp, ip, lsl #4
 80217b8:	f5c4 7880 	rsb	r8, r4, #256	; 0x100
 80217bc:	eba4 040b 	sub.w	r4, r4, fp
 80217c0:	fa1f f08c 	uxth.w	r0, ip
 80217c4:	b2a2      	uxth	r2, r4
 80217c6:	783c      	ldrb	r4, [r7, #0]
 80217c8:	eba8 0800 	sub.w	r8, r8, r0
 80217cc:	fa1f fc8e 	uxth.w	ip, lr
 80217d0:	fb02 fa0a 	mul.w	sl, r2, sl
 80217d4:	ea6f 0e0e 	mvn.w	lr, lr
 80217d8:	fa1f f888 	uxth.w	r8, r8
 80217dc:	fa5f fe8e 	uxtb.w	lr, lr
 80217e0:	fb08 aa04 	mla	sl, r8, r4, sl
 80217e4:	7834      	ldrb	r4, [r6, #0]
 80217e6:	fb19 f90e 	smulbb	r9, r9, lr
 80217ea:	fb00 aa04 	mla	sl, r0, r4, sl
 80217ee:	781c      	ldrb	r4, [r3, #0]
 80217f0:	fb0b a404 	mla	r4, fp, r4, sl
 80217f4:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80217f8:	fb04 990c 	mla	r9, r4, ip, r9
 80217fc:	fa1f f989 	uxth.w	r9, r9
 8021800:	f109 0401 	add.w	r4, r9, #1
 8021804:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8021808:	ea4f 2929 	mov.w	r9, r9, asr #8
 802180c:	f881 9000 	strb.w	r9, [r1]
 8021810:	f895 9001 	ldrb.w	r9, [r5, #1]
 8021814:	787c      	ldrb	r4, [r7, #1]
 8021816:	fb02 f909 	mul.w	r9, r2, r9
 802181a:	fb08 9904 	mla	r9, r8, r4, r9
 802181e:	7874      	ldrb	r4, [r6, #1]
 8021820:	fb00 9904 	mla	r9, r0, r4, r9
 8021824:	785c      	ldrb	r4, [r3, #1]
 8021826:	fb0b 9404 	mla	r4, fp, r4, r9
 802182a:	f3c4 2a07 	ubfx	sl, r4, #8, #8
 802182e:	9c02      	ldr	r4, [sp, #8]
 8021830:	fb14 f90e 	smulbb	r9, r4, lr
 8021834:	fb0a 940c 	mla	r4, sl, ip, r9
 8021838:	b2a4      	uxth	r4, r4
 802183a:	f104 0901 	add.w	r9, r4, #1
 802183e:	eb09 2414 	add.w	r4, r9, r4, lsr #8
 8021842:	1224      	asrs	r4, r4, #8
 8021844:	704c      	strb	r4, [r1, #1]
 8021846:	78ad      	ldrb	r5, [r5, #2]
 8021848:	78bc      	ldrb	r4, [r7, #2]
 802184a:	436a      	muls	r2, r5
 802184c:	789b      	ldrb	r3, [r3, #2]
 802184e:	fb08 2204 	mla	r2, r8, r4, r2
 8021852:	78b4      	ldrb	r4, [r6, #2]
 8021854:	fb00 2004 	mla	r0, r0, r4, r2
 8021858:	fb0b 0b03 	mla	fp, fp, r3, r0
 802185c:	9b01      	ldr	r3, [sp, #4]
 802185e:	fb13 fe0e 	smulbb	lr, r3, lr
 8021862:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 8021866:	fb0b ec0c 	mla	ip, fp, ip, lr
 802186a:	fa1f fc8c 	uxth.w	ip, ip
 802186e:	f10c 0e01 	add.w	lr, ip, #1
 8021872:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 8021876:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 802187a:	f881 c002 	strb.w	ip, [r1, #2]
 802187e:	b007      	add	sp, #28
 8021880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021884:	af05      	add	r7, sp, #20
 8021886:	e75b      	b.n	8021740 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x66>
 8021888:	ad05      	add	r5, sp, #20
 802188a:	462f      	mov	r7, r5
 802188c:	e766      	b.n	802175c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 802188e:	ad05      	add	r5, sp, #20
 8021890:	e764      	b.n	802175c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 8021892:	ae05      	add	r6, sp, #20
 8021894:	e777      	b.n	8021786 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xac>
 8021896:	ab05      	add	r3, sp, #20
 8021898:	461e      	mov	r6, r3
 802189a:	e783      	b.n	80217a4 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>
 802189c:	ab05      	add	r3, sp, #20
 802189e:	e781      	b.n	80217a4 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>

080218a0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80218a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80218a4:	b093      	sub	sp, #76	; 0x4c
 80218a6:	9210      	str	r2, [sp, #64]	; 0x40
 80218a8:	9309      	str	r3, [sp, #36]	; 0x24
 80218aa:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80218ac:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 80218b0:	9011      	str	r0, [sp, #68]	; 0x44
 80218b2:	930e      	str	r3, [sp, #56]	; 0x38
 80218b4:	6850      	ldr	r0, [r2, #4]
 80218b6:	910d      	str	r1, [sp, #52]	; 0x34
 80218b8:	6812      	ldr	r2, [r2, #0]
 80218ba:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 80218be:	fb00 1303 	mla	r3, r0, r3, r1
 80218c2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80218c6:	18d3      	adds	r3, r2, r3
 80218c8:	930a      	str	r3, [sp, #40]	; 0x28
 80218ca:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80218cc:	681b      	ldr	r3, [r3, #0]
 80218ce:	930c      	str	r3, [sp, #48]	; 0x30
 80218d0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80218d2:	685c      	ldr	r4, [r3, #4]
 80218d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80218d6:	3404      	adds	r4, #4
 80218d8:	43db      	mvns	r3, r3
 80218da:	b2db      	uxtb	r3, r3
 80218dc:	930b      	str	r3, [sp, #44]	; 0x2c
 80218de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80218e0:	2b00      	cmp	r3, #0
 80218e2:	dc03      	bgt.n	80218ec <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 80218e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80218e6:	2b00      	cmp	r3, #0
 80218e8:	f340 8250 	ble.w	8021d8c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 80218ec:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80218ee:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80218f2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80218f6:	1e48      	subs	r0, r1, #1
 80218f8:	1e55      	subs	r5, r2, #1
 80218fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80218fc:	2b00      	cmp	r3, #0
 80218fe:	f340 80ee 	ble.w	8021ade <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 8021902:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8021904:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8021906:	1436      	asrs	r6, r6, #16
 8021908:	ea4f 4323 	mov.w	r3, r3, asr #16
 802190c:	d406      	bmi.n	802191c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802190e:	4286      	cmp	r6, r0
 8021910:	da04      	bge.n	802191c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8021912:	2b00      	cmp	r3, #0
 8021914:	db02      	blt.n	802191c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8021916:	42ab      	cmp	r3, r5
 8021918:	f2c0 80e2 	blt.w	8021ae0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 802191c:	3601      	adds	r6, #1
 802191e:	f100 80cf 	bmi.w	8021ac0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 8021922:	42b1      	cmp	r1, r6
 8021924:	f2c0 80cc 	blt.w	8021ac0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 8021928:	3301      	adds	r3, #1
 802192a:	f100 80c9 	bmi.w	8021ac0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 802192e:	429a      	cmp	r2, r3
 8021930:	f2c0 80c6 	blt.w	8021ac0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 8021934:	e9dd b609 	ldrd	fp, r6, [sp, #36]	; 0x24
 8021938:	f1bb 0f00 	cmp.w	fp, #0
 802193c:	f340 80f1 	ble.w	8021b22 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 8021940:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8021942:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8021944:	9824      	ldr	r0, [sp, #144]	; 0x90
 8021946:	141d      	asrs	r5, r3, #16
 8021948:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802194a:	f3c2 3103 	ubfx	r1, r2, #12, #4
 802194e:	68c7      	ldr	r7, [r0, #12]
 8021950:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8021952:	1418      	asrs	r0, r3, #16
 8021954:	f3c3 3803 	ubfx	r8, r3, #12, #4
 8021958:	6892      	ldr	r2, [r2, #8]
 802195a:	f100 8137 	bmi.w	8021bcc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 802195e:	f102 3cff 	add.w	ip, r2, #4294967295
 8021962:	4560      	cmp	r0, ip
 8021964:	f280 8132 	bge.w	8021bcc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8021968:	2d00      	cmp	r5, #0
 802196a:	f2c0 812f 	blt.w	8021bcc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 802196e:	f107 3cff 	add.w	ip, r7, #4294967295
 8021972:	4565      	cmp	r5, ip
 8021974:	f280 812a 	bge.w	8021bcc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8021978:	b212      	sxth	r2, r2
 802197a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 802197c:	fb05 0002 	mla	r0, r5, r2, r0
 8021980:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8021982:	f817 c000 	ldrb.w	ip, [r7, r0]
 8021986:	4405      	add	r5, r0
 8021988:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 802198c:	eb04 0e0c 	add.w	lr, r4, ip
 8021990:	f1b8 0f00 	cmp.w	r8, #0
 8021994:	f000 810c 	beq.w	8021bb0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
 8021998:	786f      	ldrb	r7, [r5, #1]
 802199a:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 802199e:	4427      	add	r7, r4
 80219a0:	2900      	cmp	r1, #0
 80219a2:	f000 810d 	beq.w	8021bc0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 80219a6:	18a8      	adds	r0, r5, r2
 80219a8:	5caa      	ldrb	r2, [r5, r2]
 80219aa:	7840      	ldrb	r0, [r0, #1]
 80219ac:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80219b0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80219b4:	4422      	add	r2, r4
 80219b6:	4420      	add	r0, r4
 80219b8:	fa1f f388 	uxth.w	r3, r8
 80219bc:	f814 a00c 	ldrb.w	sl, [r4, ip]
 80219c0:	b289      	uxth	r1, r1
 80219c2:	f897 c000 	ldrb.w	ip, [r7]
 80219c6:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 80219ca:	fb03 f901 	mul.w	r9, r3, r1
 80219ce:	011b      	lsls	r3, r3, #4
 80219d0:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80219d4:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 80219d8:	eba3 0309 	sub.w	r3, r3, r9
 80219dc:	b289      	uxth	r1, r1
 80219de:	b29b      	uxth	r3, r3
 80219e0:	eba8 0801 	sub.w	r8, r8, r1
 80219e4:	fb03 fc0c 	mul.w	ip, r3, ip
 80219e8:	fa1f f888 	uxth.w	r8, r8
 80219ec:	930f      	str	r3, [sp, #60]	; 0x3c
 80219ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80219f0:	fb08 cc0a 	mla	ip, r8, sl, ip
 80219f4:	f892 a000 	ldrb.w	sl, [r2]
 80219f8:	fb01 cc0a 	mla	ip, r1, sl, ip
 80219fc:	f890 a000 	ldrb.w	sl, [r0]
 8021a00:	fb09 cc0a 	mla	ip, r9, sl, ip
 8021a04:	f896 a000 	ldrb.w	sl, [r6]
 8021a08:	fb1a fa03 	smulbb	sl, sl, r3
 8021a0c:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8021a10:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8021a12:	fb0c ac05 	mla	ip, ip, r5, sl
 8021a16:	fa1f fc8c 	uxth.w	ip, ip
 8021a1a:	f10c 0a01 	add.w	sl, ip, #1
 8021a1e:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 8021a22:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8021a26:	f886 a000 	strb.w	sl, [r6]
 8021a2a:	f897 c001 	ldrb.w	ip, [r7, #1]
 8021a2e:	f89e a001 	ldrb.w	sl, [lr, #1]
 8021a32:	fb03 fc0c 	mul.w	ip, r3, ip
 8021a36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021a38:	fb08 cc0a 	mla	ip, r8, sl, ip
 8021a3c:	f892 a001 	ldrb.w	sl, [r2, #1]
 8021a40:	fb01 cc0a 	mla	ip, r1, sl, ip
 8021a44:	f890 a001 	ldrb.w	sl, [r0, #1]
 8021a48:	fb09 cc0a 	mla	ip, r9, sl, ip
 8021a4c:	f896 a001 	ldrb.w	sl, [r6, #1]
 8021a50:	fb1a fa03 	smulbb	sl, sl, r3
 8021a54:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8021a58:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8021a5a:	fb0c ac05 	mla	ip, ip, r5, sl
 8021a5e:	fa1f fc8c 	uxth.w	ip, ip
 8021a62:	f10c 0a01 	add.w	sl, ip, #1
 8021a66:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
 8021a6a:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8021a6e:	f886 c001 	strb.w	ip, [r6, #1]
 8021a72:	78bf      	ldrb	r7, [r7, #2]
 8021a74:	f89e c002 	ldrb.w	ip, [lr, #2]
 8021a78:	437b      	muls	r3, r7
 8021a7a:	fb08 330c 	mla	r3, r8, ip, r3
 8021a7e:	f892 c002 	ldrb.w	ip, [r2, #2]
 8021a82:	7882      	ldrb	r2, [r0, #2]
 8021a84:	fb01 310c 	mla	r1, r1, ip, r3
 8021a88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021a8a:	fb09 1902 	mla	r9, r9, r2, r1
 8021a8e:	78b1      	ldrb	r1, [r6, #2]
 8021a90:	fb11 f103 	smulbb	r1, r1, r3
 8021a94:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8021a98:	fb09 1505 	mla	r5, r9, r5, r1
 8021a9c:	b2ad      	uxth	r5, r5
 8021a9e:	1c6b      	adds	r3, r5, #1
 8021aa0:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8021aa4:	122d      	asrs	r5, r5, #8
 8021aa6:	70b5      	strb	r5, [r6, #2]
 8021aa8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8021aaa:	3603      	adds	r6, #3
 8021aac:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8021aae:	f10b 3bff 	add.w	fp, fp, #4294967295
 8021ab2:	4413      	add	r3, r2
 8021ab4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8021ab6:	931d      	str	r3, [sp, #116]	; 0x74
 8021ab8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8021aba:	4413      	add	r3, r2
 8021abc:	931e      	str	r3, [sp, #120]	; 0x78
 8021abe:	e73b      	b.n	8021938 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8021ac0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8021ac2:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 8021ac4:	4433      	add	r3, r6
 8021ac6:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8021ac8:	931d      	str	r3, [sp, #116]	; 0x74
 8021aca:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8021acc:	4433      	add	r3, r6
 8021ace:	931e      	str	r3, [sp, #120]	; 0x78
 8021ad0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021ad2:	3b01      	subs	r3, #1
 8021ad4:	9309      	str	r3, [sp, #36]	; 0x24
 8021ad6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021ad8:	3303      	adds	r3, #3
 8021ada:	930a      	str	r3, [sp, #40]	; 0x28
 8021adc:	e70d      	b.n	80218fa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8021ade:	d028      	beq.n	8021b32 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 8021ae0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021ae2:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8021ae4:	3b01      	subs	r3, #1
 8021ae6:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8021ae8:	fb00 5003 	mla	r0, r0, r3, r5
 8021aec:	1400      	asrs	r0, r0, #16
 8021aee:	f53f af21 	bmi.w	8021934 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8021af2:	3901      	subs	r1, #1
 8021af4:	4288      	cmp	r0, r1
 8021af6:	f6bf af1d 	bge.w	8021934 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8021afa:	9920      	ldr	r1, [sp, #128]	; 0x80
 8021afc:	981e      	ldr	r0, [sp, #120]	; 0x78
 8021afe:	fb01 0303 	mla	r3, r1, r3, r0
 8021b02:	141b      	asrs	r3, r3, #16
 8021b04:	f53f af16 	bmi.w	8021934 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8021b08:	3a01      	subs	r2, #1
 8021b0a:	4293      	cmp	r3, r2
 8021b0c:	f6bf af12 	bge.w	8021934 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8021b10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021b12:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8021b16:	1cdf      	adds	r7, r3, #3
 8021b18:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 8021b1c:	f1b9 0f00 	cmp.w	r9, #0
 8021b20:	dc73      	bgt.n	8021c0a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 8021b22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021b24:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021b26:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8021b2a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021b2e:	441a      	add	r2, r3
 8021b30:	920a      	str	r2, [sp, #40]	; 0x28
 8021b32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021b34:	2b00      	cmp	r3, #0
 8021b36:	f340 8129 	ble.w	8021d8c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 8021b3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8021b3e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8021b40:	ee30 0a04 	vadd.f32	s0, s0, s8
 8021b44:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021b48:	eef0 6a62 	vmov.f32	s13, s5
 8021b4c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8021b50:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021b54:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021b58:	edcd 6a1d 	vstr	s13, [sp, #116]	; 0x74
 8021b5c:	eef0 6a43 	vmov.f32	s13, s6
 8021b60:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021b64:	edcd 6a1e 	vstr	s13, [sp, #120]	; 0x78
 8021b68:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021b6c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8021b70:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021b74:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8021b78:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8021b7c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8021b80:	ee12 2a90 	vmov	r2, s5
 8021b84:	eef0 2a47 	vmov.f32	s5, s14
 8021b88:	fb92 f3f3 	sdiv	r3, r2, r3
 8021b8c:	ee13 2a10 	vmov	r2, s6
 8021b90:	931f      	str	r3, [sp, #124]	; 0x7c
 8021b92:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8021b94:	eeb0 3a67 	vmov.f32	s6, s15
 8021b98:	fb92 f3f3 	sdiv	r3, r2, r3
 8021b9c:	9320      	str	r3, [sp, #128]	; 0x80
 8021b9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021ba0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8021ba2:	3b01      	subs	r3, #1
 8021ba4:	930d      	str	r3, [sp, #52]	; 0x34
 8021ba6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8021ba8:	bf08      	it	eq
 8021baa:	4613      	moveq	r3, r2
 8021bac:	9309      	str	r3, [sp, #36]	; 0x24
 8021bae:	e696      	b.n	80218de <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8021bb0:	b149      	cbz	r1, 8021bc6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 8021bb2:	5caa      	ldrb	r2, [r5, r2]
 8021bb4:	4670      	mov	r0, lr
 8021bb6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8021bba:	4422      	add	r2, r4
 8021bbc:	4677      	mov	r7, lr
 8021bbe:	e6fb      	b.n	80219b8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 8021bc0:	4670      	mov	r0, lr
 8021bc2:	4672      	mov	r2, lr
 8021bc4:	e6f8      	b.n	80219b8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 8021bc6:	4670      	mov	r0, lr
 8021bc8:	4672      	mov	r2, lr
 8021bca:	e7f7      	b.n	8021bbc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 8021bcc:	f110 0c01 	adds.w	ip, r0, #1
 8021bd0:	f53f af6a 	bmi.w	8021aa8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8021bd4:	4562      	cmp	r2, ip
 8021bd6:	f6ff af67 	blt.w	8021aa8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8021bda:	f115 0c01 	adds.w	ip, r5, #1
 8021bde:	f53f af63 	bmi.w	8021aa8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8021be2:	4567      	cmp	r7, ip
 8021be4:	f6ff af60 	blt.w	8021aa8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8021be8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021bea:	b23f      	sxth	r7, r7
 8021bec:	b212      	sxth	r2, r2
 8021bee:	9002      	str	r0, [sp, #8]
 8021bf0:	9701      	str	r7, [sp, #4]
 8021bf2:	9200      	str	r2, [sp, #0]
 8021bf4:	9811      	ldr	r0, [sp, #68]	; 0x44
 8021bf6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8021bf8:	e9cd 1305 	strd	r1, r3, [sp, #20]
 8021bfc:	e9cd 5803 	strd	r5, r8, [sp, #12]
 8021c00:	4623      	mov	r3, r4
 8021c02:	4631      	mov	r1, r6
 8021c04:	f7ff fd69 	bl	80216da <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 8021c08:	e74e      	b.n	8021aa8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8021c0a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8021c0c:	981e      	ldr	r0, [sp, #120]	; 0x78
 8021c0e:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8021c12:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8021c14:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8021c16:	1400      	asrs	r0, r0, #16
 8021c18:	142d      	asrs	r5, r5, #16
 8021c1a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8021c1c:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8021c20:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8021c24:	fb02 5000 	mla	r0, r2, r0, r5
 8021c28:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8021c2a:	f815 e000 	ldrb.w	lr, [r5, r0]
 8021c2e:	eb05 0c00 	add.w	ip, r5, r0
 8021c32:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8021c36:	eb04 060e 	add.w	r6, r4, lr
 8021c3a:	2b00      	cmp	r3, #0
 8021c3c:	f000 8097 	beq.w	8021d6e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
 8021c40:	f89c 5001 	ldrb.w	r5, [ip, #1]
 8021c44:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8021c48:	4425      	add	r5, r4
 8021c4a:	2900      	cmp	r1, #0
 8021c4c:	f000 8098 	beq.w	8021d80 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e0>
 8021c50:	eb0c 0002 	add.w	r0, ip, r2
 8021c54:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8021c58:	7840      	ldrb	r0, [r0, #1]
 8021c5a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8021c5e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8021c62:	4422      	add	r2, r4
 8021c64:	4420      	add	r0, r4
 8021c66:	b29b      	uxth	r3, r3
 8021c68:	f814 b00e 	ldrb.w	fp, [r4, lr]
 8021c6c:	b289      	uxth	r1, r1
 8021c6e:	f895 e000 	ldrb.w	lr, [r5]
 8021c72:	3703      	adds	r7, #3
 8021c74:	f109 39ff 	add.w	r9, r9, #4294967295
 8021c78:	fb03 f801 	mul.w	r8, r3, r1
 8021c7c:	011b      	lsls	r3, r3, #4
 8021c7e:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 8021c82:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 8021c86:	eba3 0308 	sub.w	r3, r3, r8
 8021c8a:	b289      	uxth	r1, r1
 8021c8c:	b29b      	uxth	r3, r3
 8021c8e:	ebac 0c01 	sub.w	ip, ip, r1
 8021c92:	fb03 fe0e 	mul.w	lr, r3, lr
 8021c96:	fa1f fc8c 	uxth.w	ip, ip
 8021c9a:	930f      	str	r3, [sp, #60]	; 0x3c
 8021c9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021c9e:	fb0c ee0b 	mla	lr, ip, fp, lr
 8021ca2:	f892 b000 	ldrb.w	fp, [r2]
 8021ca6:	fb01 ee0b 	mla	lr, r1, fp, lr
 8021caa:	f890 b000 	ldrb.w	fp, [r0]
 8021cae:	fb08 ee0b 	mla	lr, r8, fp, lr
 8021cb2:	f817 bc06 	ldrb.w	fp, [r7, #-6]
 8021cb6:	fb1b fb03 	smulbb	fp, fp, r3
 8021cba:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 8021cbe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8021cc0:	fb0e be0a 	mla	lr, lr, sl, fp
 8021cc4:	fa1f fe8e 	uxth.w	lr, lr
 8021cc8:	f10e 0b01 	add.w	fp, lr, #1
 8021ccc:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 8021cd0:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8021cd4:	f807 ec06 	strb.w	lr, [r7, #-6]
 8021cd8:	f895 e001 	ldrb.w	lr, [r5, #1]
 8021cdc:	f896 b001 	ldrb.w	fp, [r6, #1]
 8021ce0:	fb03 fe0e 	mul.w	lr, r3, lr
 8021ce4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021ce6:	fb0c ee0b 	mla	lr, ip, fp, lr
 8021cea:	f892 b001 	ldrb.w	fp, [r2, #1]
 8021cee:	fb01 ee0b 	mla	lr, r1, fp, lr
 8021cf2:	f890 b001 	ldrb.w	fp, [r0, #1]
 8021cf6:	fb08 ee0b 	mla	lr, r8, fp, lr
 8021cfa:	f817 bc05 	ldrb.w	fp, [r7, #-5]
 8021cfe:	fb1b fb03 	smulbb	fp, fp, r3
 8021d02:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 8021d06:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8021d08:	fb0e be0a 	mla	lr, lr, sl, fp
 8021d0c:	fa1f fe8e 	uxth.w	lr, lr
 8021d10:	f10e 0b01 	add.w	fp, lr, #1
 8021d14:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 8021d18:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8021d1c:	f807 ec05 	strb.w	lr, [r7, #-5]
 8021d20:	78ad      	ldrb	r5, [r5, #2]
 8021d22:	78b6      	ldrb	r6, [r6, #2]
 8021d24:	436b      	muls	r3, r5
 8021d26:	7895      	ldrb	r5, [r2, #2]
 8021d28:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8021d2a:	fb0c 3306 	mla	r3, ip, r6, r3
 8021d2e:	fb01 3305 	mla	r3, r1, r5, r3
 8021d32:	7885      	ldrb	r5, [r0, #2]
 8021d34:	fb08 3805 	mla	r8, r8, r5, r3
 8021d38:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 8021d3c:	fb13 f302 	smulbb	r3, r3, r2
 8021d40:	f3c8 2807 	ubfx	r8, r8, #8, #8
 8021d44:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8021d46:	fb08 380a 	mla	r8, r8, sl, r3
 8021d4a:	fa1f f888 	uxth.w	r8, r8
 8021d4e:	f108 0301 	add.w	r3, r8, #1
 8021d52:	eb03 2818 	add.w	r8, r3, r8, lsr #8
 8021d56:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8021d58:	4413      	add	r3, r2
 8021d5a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8021d5c:	ea4f 2828 	mov.w	r8, r8, asr #8
 8021d60:	931d      	str	r3, [sp, #116]	; 0x74
 8021d62:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8021d64:	f807 8c04 	strb.w	r8, [r7, #-4]
 8021d68:	4413      	add	r3, r2
 8021d6a:	931e      	str	r3, [sp, #120]	; 0x78
 8021d6c:	e6d6      	b.n	8021b1c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8021d6e:	b151      	cbz	r1, 8021d86 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 8021d70:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8021d74:	4630      	mov	r0, r6
 8021d76:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8021d7a:	4422      	add	r2, r4
 8021d7c:	4635      	mov	r5, r6
 8021d7e:	e772      	b.n	8021c66 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 8021d80:	4630      	mov	r0, r6
 8021d82:	4632      	mov	r2, r6
 8021d84:	e76f      	b.n	8021c66 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 8021d86:	4630      	mov	r0, r6
 8021d88:	4632      	mov	r2, r6
 8021d8a:	e7f7      	b.n	8021d7c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 8021d8c:	b013      	add	sp, #76	; 0x4c
 8021d8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021d92 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 8021d92:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8021d96:	784c      	ldrb	r4, [r1, #1]
 8021d98:	f891 a002 	ldrb.w	sl, [r1, #2]
 8021d9c:	0224      	lsls	r4, r4, #8
 8021d9e:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 8021da2:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 8021da6:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8021daa:	f891 a000 	ldrb.w	sl, [r1]
 8021dae:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
 8021db2:	ea44 040a 	orr.w	r4, r4, sl
 8021db6:	f89d 603c 	ldrb.w	r6, [sp, #60]	; 0x3c
 8021dba:	e9dd c50c 	ldrd	ip, r5, [sp, #48]	; 0x30
 8021dbe:	9401      	str	r4, [sp, #4]
 8021dc0:	fb05 c70e 	mla	r7, r5, lr, ip
 8021dc4:	2d00      	cmp	r5, #0
 8021dc6:	eb02 0807 	add.w	r8, r2, r7
 8021dca:	db72      	blt.n	8021eb2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 8021dcc:	45a9      	cmp	r9, r5
 8021dce:	dd70      	ble.n	8021eb2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 8021dd0:	f1bc 0f00 	cmp.w	ip, #0
 8021dd4:	db6b      	blt.n	8021eae <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 8021dd6:	45e6      	cmp	lr, ip
 8021dd8:	dd69      	ble.n	8021eae <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 8021dda:	5dd7      	ldrb	r7, [r2, r7]
 8021ddc:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8021de0:	441f      	add	r7, r3
 8021de2:	f11c 0201 	adds.w	r2, ip, #1
 8021de6:	d467      	bmi.n	8021eb8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 8021de8:	4596      	cmp	lr, r2
 8021dea:	dd65      	ble.n	8021eb8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 8021dec:	2800      	cmp	r0, #0
 8021dee:	d063      	beq.n	8021eb8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 8021df0:	f898 4001 	ldrb.w	r4, [r8, #1]
 8021df4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8021df8:	441c      	add	r4, r3
 8021dfa:	3501      	adds	r5, #1
 8021dfc:	d460      	bmi.n	8021ec0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 8021dfe:	45a9      	cmp	r9, r5
 8021e00:	dd5e      	ble.n	8021ec0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 8021e02:	2e00      	cmp	r6, #0
 8021e04:	d05c      	beq.n	8021ec0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 8021e06:	f1bc 0f00 	cmp.w	ip, #0
 8021e0a:	db57      	blt.n	8021ebc <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 8021e0c:	45e6      	cmp	lr, ip
 8021e0e:	dd55      	ble.n	8021ebc <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 8021e10:	f818 500e 	ldrb.w	r5, [r8, lr]
 8021e14:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8021e18:	441d      	add	r5, r3
 8021e1a:	f11c 0201 	adds.w	r2, ip, #1
 8021e1e:	d452      	bmi.n	8021ec6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 8021e20:	4596      	cmp	lr, r2
 8021e22:	dd50      	ble.n	8021ec6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 8021e24:	2800      	cmp	r0, #0
 8021e26:	d04e      	beq.n	8021ec6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 8021e28:	44c6      	add	lr, r8
 8021e2a:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8021e2e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8021e32:	4413      	add	r3, r2
 8021e34:	b280      	uxth	r0, r0
 8021e36:	f897 8000 	ldrb.w	r8, [r7]
 8021e3a:	b2b2      	uxth	r2, r6
 8021e3c:	fb00 f602 	mul.w	r6, r0, r2
 8021e40:	0100      	lsls	r0, r0, #4
 8021e42:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 8021e46:	f5c0 7e80 	rsb	lr, r0, #256	; 0x100
 8021e4a:	1b80      	subs	r0, r0, r6
 8021e4c:	fa1f fc82 	uxth.w	ip, r2
 8021e50:	b282      	uxth	r2, r0
 8021e52:	7820      	ldrb	r0, [r4, #0]
 8021e54:	ebae 0e0c 	sub.w	lr, lr, ip
 8021e58:	4350      	muls	r0, r2
 8021e5a:	fa1f fe8e 	uxth.w	lr, lr
 8021e5e:	fb0e 0808 	mla	r8, lr, r8, r0
 8021e62:	7828      	ldrb	r0, [r5, #0]
 8021e64:	fb0c 8800 	mla	r8, ip, r0, r8
 8021e68:	7818      	ldrb	r0, [r3, #0]
 8021e6a:	fb06 8000 	mla	r0, r6, r0, r8
 8021e6e:	1200      	asrs	r0, r0, #8
 8021e70:	7008      	strb	r0, [r1, #0]
 8021e72:	7860      	ldrb	r0, [r4, #1]
 8021e74:	f897 8001 	ldrb.w	r8, [r7, #1]
 8021e78:	4350      	muls	r0, r2
 8021e7a:	fb0e 0808 	mla	r8, lr, r8, r0
 8021e7e:	7868      	ldrb	r0, [r5, #1]
 8021e80:	fb0c 8800 	mla	r8, ip, r0, r8
 8021e84:	7858      	ldrb	r0, [r3, #1]
 8021e86:	fb06 8000 	mla	r0, r6, r0, r8
 8021e8a:	1200      	asrs	r0, r0, #8
 8021e8c:	7048      	strb	r0, [r1, #1]
 8021e8e:	78a0      	ldrb	r0, [r4, #2]
 8021e90:	78bf      	ldrb	r7, [r7, #2]
 8021e92:	4350      	muls	r0, r2
 8021e94:	78aa      	ldrb	r2, [r5, #2]
 8021e96:	fb0e 0007 	mla	r0, lr, r7, r0
 8021e9a:	fb0c 0c02 	mla	ip, ip, r2, r0
 8021e9e:	789a      	ldrb	r2, [r3, #2]
 8021ea0:	fb06 c202 	mla	r2, r6, r2, ip
 8021ea4:	1212      	asrs	r2, r2, #8
 8021ea6:	708a      	strb	r2, [r1, #2]
 8021ea8:	b002      	add	sp, #8
 8021eaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021eae:	af01      	add	r7, sp, #4
 8021eb0:	e797      	b.n	8021de2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x50>
 8021eb2:	ac01      	add	r4, sp, #4
 8021eb4:	4627      	mov	r7, r4
 8021eb6:	e7a0      	b.n	8021dfa <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 8021eb8:	ac01      	add	r4, sp, #4
 8021eba:	e79e      	b.n	8021dfa <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 8021ebc:	ad01      	add	r5, sp, #4
 8021ebe:	e7ac      	b.n	8021e1a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x88>
 8021ec0:	ab01      	add	r3, sp, #4
 8021ec2:	461d      	mov	r5, r3
 8021ec4:	e7b6      	b.n	8021e34 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>
 8021ec6:	ab01      	add	r3, sp, #4
 8021ec8:	e7b4      	b.n	8021e34 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>

08021eca <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021eca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021ece:	b08d      	sub	sp, #52	; 0x34
 8021ed0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8021ed4:	e9cd 1209 	strd	r1, r2, [sp, #36]	; 0x24
 8021ed8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8021eda:	900b      	str	r0, [sp, #44]	; 0x2c
 8021edc:	9306      	str	r3, [sp, #24]
 8021ede:	6850      	ldr	r0, [r2, #4]
 8021ee0:	6812      	ldr	r2, [r2, #0]
 8021ee2:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8021ee4:	e9dd 131c 	ldrd	r1, r3, [sp, #112]	; 0x70
 8021ee8:	fb00 1303 	mla	r3, r0, r3, r1
 8021eec:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021ef0:	18d3      	adds	r3, r2, r3
 8021ef2:	9307      	str	r3, [sp, #28]
 8021ef4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8021ef6:	681b      	ldr	r3, [r3, #0]
 8021ef8:	9308      	str	r3, [sp, #32]
 8021efa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8021efc:	685d      	ldr	r5, [r3, #4]
 8021efe:	3504      	adds	r5, #4
 8021f00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021f02:	2b00      	cmp	r3, #0
 8021f04:	dc03      	bgt.n	8021f0e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 8021f06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021f08:	2b00      	cmp	r3, #0
 8021f0a:	f340 81e6 	ble.w	80222da <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 8021f0e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8021f10:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8021f14:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8021f18:	1e48      	subs	r0, r1, #1
 8021f1a:	1e56      	subs	r6, r2, #1
 8021f1c:	9b06      	ldr	r3, [sp, #24]
 8021f1e:	2b00      	cmp	r3, #0
 8021f20:	f340 80bd 	ble.w	802209e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8021f24:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8021f26:	1427      	asrs	r7, r4, #16
 8021f28:	ea4f 4323 	mov.w	r3, r3, asr #16
 8021f2c:	d406      	bmi.n	8021f3c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8021f2e:	4287      	cmp	r7, r0
 8021f30:	da04      	bge.n	8021f3c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8021f32:	2b00      	cmp	r3, #0
 8021f34:	db02      	blt.n	8021f3c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8021f36:	42b3      	cmp	r3, r6
 8021f38:	f2c0 80b2 	blt.w	80220a0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 8021f3c:	3701      	adds	r7, #1
 8021f3e:	f100 80a1 	bmi.w	8022084 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8021f42:	42b9      	cmp	r1, r7
 8021f44:	f2c0 809e 	blt.w	8022084 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8021f48:	3301      	adds	r3, #1
 8021f4a:	f100 809b 	bmi.w	8022084 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8021f4e:	429a      	cmp	r2, r3
 8021f50:	f2c0 8098 	blt.w	8022084 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8021f54:	e9dd b606 	ldrd	fp, r6, [sp, #24]
 8021f58:	f1bb 0f00 	cmp.w	fp, #0
 8021f5c:	f340 80bf 	ble.w	80220de <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8021f60:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8021f62:	981e      	ldr	r0, [sp, #120]	; 0x78
 8021f64:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8021f66:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8021f6a:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 8021f6e:	1420      	asrs	r0, r4, #16
 8021f70:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8021f72:	ea4f 4723 	mov.w	r7, r3, asr #16
 8021f76:	f3c4 3303 	ubfx	r3, r4, #12, #4
 8021f7a:	6892      	ldr	r2, [r2, #8]
 8021f7c:	f100 8103 	bmi.w	8022186 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 8021f80:	f102 3eff 	add.w	lr, r2, #4294967295
 8021f84:	4570      	cmp	r0, lr
 8021f86:	f280 80fe 	bge.w	8022186 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 8021f8a:	2f00      	cmp	r7, #0
 8021f8c:	f2c0 80fb 	blt.w	8022186 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 8021f90:	f10c 3eff 	add.w	lr, ip, #4294967295
 8021f94:	4577      	cmp	r7, lr
 8021f96:	f280 80f6 	bge.w	8022186 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 8021f9a:	b212      	sxth	r2, r2
 8021f9c:	fb07 0002 	mla	r0, r7, r2, r0
 8021fa0:	9f08      	ldr	r7, [sp, #32]
 8021fa2:	f817 8000 	ldrb.w	r8, [r7, r0]
 8021fa6:	eb07 0e00 	add.w	lr, r7, r0
 8021faa:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8021fae:	eb05 0c08 	add.w	ip, r5, r8
 8021fb2:	2b00      	cmp	r3, #0
 8021fb4:	f000 80d8 	beq.w	8022168 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 8021fb8:	f89e 7001 	ldrb.w	r7, [lr, #1]
 8021fbc:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8021fc0:	442f      	add	r7, r5
 8021fc2:	2900      	cmp	r1, #0
 8021fc4:	f000 80d9 	beq.w	802217a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8021fc8:	eb0e 0002 	add.w	r0, lr, r2
 8021fcc:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8021fd0:	7840      	ldrb	r0, [r0, #1]
 8021fd2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8021fd6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8021fda:	442a      	add	r2, r5
 8021fdc:	4428      	add	r0, r5
 8021fde:	b29b      	uxth	r3, r3
 8021fe0:	f815 a008 	ldrb.w	sl, [r5, r8]
 8021fe4:	b289      	uxth	r1, r1
 8021fe6:	f897 8000 	ldrb.w	r8, [r7]
 8021fea:	fb03 f901 	mul.w	r9, r3, r1
 8021fee:	011b      	lsls	r3, r3, #4
 8021ff0:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8021ff4:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8021ff8:	eba3 0309 	sub.w	r3, r3, r9
 8021ffc:	b289      	uxth	r1, r1
 8021ffe:	b29b      	uxth	r3, r3
 8022000:	ebae 0e01 	sub.w	lr, lr, r1
 8022004:	fb03 f808 	mul.w	r8, r3, r8
 8022008:	fa1f fe8e 	uxth.w	lr, lr
 802200c:	fb0e 880a 	mla	r8, lr, sl, r8
 8022010:	f892 a000 	ldrb.w	sl, [r2]
 8022014:	fb01 880a 	mla	r8, r1, sl, r8
 8022018:	f890 a000 	ldrb.w	sl, [r0]
 802201c:	fb09 880a 	mla	r8, r9, sl, r8
 8022020:	ea4f 2828 	mov.w	r8, r8, asr #8
 8022024:	f886 8000 	strb.w	r8, [r6]
 8022028:	f897 8001 	ldrb.w	r8, [r7, #1]
 802202c:	f89c a001 	ldrb.w	sl, [ip, #1]
 8022030:	fb03 f808 	mul.w	r8, r3, r8
 8022034:	fb0e 880a 	mla	r8, lr, sl, r8
 8022038:	f892 a001 	ldrb.w	sl, [r2, #1]
 802203c:	fb01 880a 	mla	r8, r1, sl, r8
 8022040:	f890 a001 	ldrb.w	sl, [r0, #1]
 8022044:	fb09 880a 	mla	r8, r9, sl, r8
 8022048:	ea4f 2828 	mov.w	r8, r8, asr #8
 802204c:	f886 8001 	strb.w	r8, [r6, #1]
 8022050:	78bf      	ldrb	r7, [r7, #2]
 8022052:	f89c c002 	ldrb.w	ip, [ip, #2]
 8022056:	437b      	muls	r3, r7
 8022058:	7892      	ldrb	r2, [r2, #2]
 802205a:	fb0e 330c 	mla	r3, lr, ip, r3
 802205e:	fb01 3102 	mla	r1, r1, r2, r3
 8022062:	7882      	ldrb	r2, [r0, #2]
 8022064:	fb09 1902 	mla	r9, r9, r2, r1
 8022068:	ea4f 2929 	mov.w	r9, r9, asr #8
 802206c:	f886 9002 	strb.w	r9, [r6, #2]
 8022070:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8022072:	3603      	adds	r6, #3
 8022074:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8022076:	f10b 3bff 	add.w	fp, fp, #4294967295
 802207a:	441c      	add	r4, r3
 802207c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802207e:	4413      	add	r3, r2
 8022080:	9318      	str	r3, [sp, #96]	; 0x60
 8022082:	e769      	b.n	8021f58 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8022084:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8022086:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8022088:	441c      	add	r4, r3
 802208a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802208c:	443b      	add	r3, r7
 802208e:	9318      	str	r3, [sp, #96]	; 0x60
 8022090:	9b06      	ldr	r3, [sp, #24]
 8022092:	3b01      	subs	r3, #1
 8022094:	9306      	str	r3, [sp, #24]
 8022096:	9b07      	ldr	r3, [sp, #28]
 8022098:	3303      	adds	r3, #3
 802209a:	9307      	str	r3, [sp, #28]
 802209c:	e73e      	b.n	8021f1c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 802209e:	d026      	beq.n	80220ee <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 80220a0:	9b06      	ldr	r3, [sp, #24]
 80220a2:	9819      	ldr	r0, [sp, #100]	; 0x64
 80220a4:	3b01      	subs	r3, #1
 80220a6:	fb00 4003 	mla	r0, r0, r3, r4
 80220aa:	1400      	asrs	r0, r0, #16
 80220ac:	f53f af52 	bmi.w	8021f54 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80220b0:	3901      	subs	r1, #1
 80220b2:	4288      	cmp	r0, r1
 80220b4:	f6bf af4e 	bge.w	8021f54 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80220b8:	991a      	ldr	r1, [sp, #104]	; 0x68
 80220ba:	9818      	ldr	r0, [sp, #96]	; 0x60
 80220bc:	fb01 0303 	mla	r3, r1, r3, r0
 80220c0:	141b      	asrs	r3, r3, #16
 80220c2:	f53f af47 	bmi.w	8021f54 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80220c6:	3a01      	subs	r2, #1
 80220c8:	4293      	cmp	r3, r2
 80220ca:	f6bf af43 	bge.w	8021f54 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80220ce:	9b07      	ldr	r3, [sp, #28]
 80220d0:	f8dd a018 	ldr.w	sl, [sp, #24]
 80220d4:	f103 0803 	add.w	r8, r3, #3
 80220d8:	f1ba 0f00 	cmp.w	sl, #0
 80220dc:	dc71      	bgt.n	80221c2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 80220de:	9b06      	ldr	r3, [sp, #24]
 80220e0:	9a07      	ldr	r2, [sp, #28]
 80220e2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80220e6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80220ea:	441a      	add	r2, r3
 80220ec:	9207      	str	r2, [sp, #28]
 80220ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80220f0:	2b00      	cmp	r3, #0
 80220f2:	f340 80f2 	ble.w	80222da <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 80220f6:	ee30 0a04 	vadd.f32	s0, s0, s8
 80220fa:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80220fc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022100:	eeb0 6a62 	vmov.f32	s12, s5
 8022104:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8022108:	ee31 1a05 	vadd.f32	s2, s2, s10
 802210c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8022110:	ee16 4a10 	vmov	r4, s12
 8022114:	eeb0 6a43 	vmov.f32	s12, s6
 8022118:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802211c:	ed8d 6a18 	vstr	s12, [sp, #96]	; 0x60
 8022120:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022124:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022128:	ee77 2a62 	vsub.f32	s5, s14, s5
 802212c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022130:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022134:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8022138:	ee12 2a90 	vmov	r2, s5
 802213c:	eef0 2a47 	vmov.f32	s5, s14
 8022140:	fb92 f3f3 	sdiv	r3, r2, r3
 8022144:	ee13 2a10 	vmov	r2, s6
 8022148:	9319      	str	r3, [sp, #100]	; 0x64
 802214a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802214c:	eeb0 3a67 	vmov.f32	s6, s15
 8022150:	fb92 f3f3 	sdiv	r3, r2, r3
 8022154:	931a      	str	r3, [sp, #104]	; 0x68
 8022156:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022158:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802215a:	3b01      	subs	r3, #1
 802215c:	9309      	str	r3, [sp, #36]	; 0x24
 802215e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8022160:	bf08      	it	eq
 8022162:	4613      	moveq	r3, r2
 8022164:	9306      	str	r3, [sp, #24]
 8022166:	e6cb      	b.n	8021f00 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8022168:	b151      	cbz	r1, 8022180 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 802216a:	f81e 2002 	ldrb.w	r2, [lr, r2]
 802216e:	4660      	mov	r0, ip
 8022170:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022174:	442a      	add	r2, r5
 8022176:	4667      	mov	r7, ip
 8022178:	e731      	b.n	8021fde <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 802217a:	4660      	mov	r0, ip
 802217c:	4662      	mov	r2, ip
 802217e:	e72e      	b.n	8021fde <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 8022180:	4660      	mov	r0, ip
 8022182:	4662      	mov	r2, ip
 8022184:	e7f7      	b.n	8022176 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ac>
 8022186:	f110 0e01 	adds.w	lr, r0, #1
 802218a:	f53f af71 	bmi.w	8022070 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 802218e:	4572      	cmp	r2, lr
 8022190:	f6ff af6e 	blt.w	8022070 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8022194:	f117 0e01 	adds.w	lr, r7, #1
 8022198:	f53f af6a 	bmi.w	8022070 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 802219c:	45f4      	cmp	ip, lr
 802219e:	f6ff af67 	blt.w	8022070 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 80221a2:	b212      	sxth	r2, r2
 80221a4:	e9cd 3104 	strd	r3, r1, [sp, #16]
 80221a8:	fa0f f38c 	sxth.w	r3, ip
 80221ac:	9200      	str	r2, [sp, #0]
 80221ae:	4631      	mov	r1, r6
 80221b0:	9a08      	ldr	r2, [sp, #32]
 80221b2:	9301      	str	r3, [sp, #4]
 80221b4:	462b      	mov	r3, r5
 80221b6:	e9cd 0702 	strd	r0, r7, [sp, #8]
 80221ba:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80221bc:	f7ff fde9 	bl	8021d92 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 80221c0:	e756      	b.n	8022070 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 80221c2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80221c4:	1426      	asrs	r6, r4, #16
 80221c6:	9818      	ldr	r0, [sp, #96]	; 0x60
 80221c8:	f3c4 3303 	ubfx	r3, r4, #12, #4
 80221cc:	f3c2 3103 	ubfx	r1, r2, #12, #4
 80221d0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80221d2:	1400      	asrs	r0, r0, #16
 80221d4:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80221d8:	fb02 6000 	mla	r0, r2, r0, r6
 80221dc:	9e08      	ldr	r6, [sp, #32]
 80221de:	f816 e000 	ldrb.w	lr, [r6, r0]
 80221e2:	eb06 0c00 	add.w	ip, r6, r0
 80221e6:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80221ea:	eb05 070e 	add.w	r7, r5, lr
 80221ee:	2b00      	cmp	r3, #0
 80221f0:	d064      	beq.n	80222bc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 80221f2:	f89c 6001 	ldrb.w	r6, [ip, #1]
 80221f6:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80221fa:	442e      	add	r6, r5
 80221fc:	2900      	cmp	r1, #0
 80221fe:	d066      	beq.n	80222ce <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x404>
 8022200:	eb0c 0002 	add.w	r0, ip, r2
 8022204:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8022208:	7840      	ldrb	r0, [r0, #1]
 802220a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802220e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8022212:	442a      	add	r2, r5
 8022214:	4428      	add	r0, r5
 8022216:	b29b      	uxth	r3, r3
 8022218:	f815 b00e 	ldrb.w	fp, [r5, lr]
 802221c:	b289      	uxth	r1, r1
 802221e:	f896 e000 	ldrb.w	lr, [r6]
 8022222:	f108 0803 	add.w	r8, r8, #3
 8022226:	f10a 3aff 	add.w	sl, sl, #4294967295
 802222a:	fb03 f901 	mul.w	r9, r3, r1
 802222e:	011b      	lsls	r3, r3, #4
 8022230:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8022234:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 8022238:	eba3 0309 	sub.w	r3, r3, r9
 802223c:	b289      	uxth	r1, r1
 802223e:	b29b      	uxth	r3, r3
 8022240:	ebac 0c01 	sub.w	ip, ip, r1
 8022244:	fb03 fe0e 	mul.w	lr, r3, lr
 8022248:	fa1f fc8c 	uxth.w	ip, ip
 802224c:	fb0c ee0b 	mla	lr, ip, fp, lr
 8022250:	f892 b000 	ldrb.w	fp, [r2]
 8022254:	fb01 ee0b 	mla	lr, r1, fp, lr
 8022258:	f890 b000 	ldrb.w	fp, [r0]
 802225c:	fb09 ee0b 	mla	lr, r9, fp, lr
 8022260:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8022264:	f808 ec06 	strb.w	lr, [r8, #-6]
 8022268:	f896 e001 	ldrb.w	lr, [r6, #1]
 802226c:	f897 b001 	ldrb.w	fp, [r7, #1]
 8022270:	fb03 fe0e 	mul.w	lr, r3, lr
 8022274:	fb0c ee0b 	mla	lr, ip, fp, lr
 8022278:	f892 b001 	ldrb.w	fp, [r2, #1]
 802227c:	fb01 ee0b 	mla	lr, r1, fp, lr
 8022280:	f890 b001 	ldrb.w	fp, [r0, #1]
 8022284:	fb09 ee0b 	mla	lr, r9, fp, lr
 8022288:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 802228c:	f808 ec05 	strb.w	lr, [r8, #-5]
 8022290:	78b6      	ldrb	r6, [r6, #2]
 8022292:	78bf      	ldrb	r7, [r7, #2]
 8022294:	4373      	muls	r3, r6
 8022296:	7896      	ldrb	r6, [r2, #2]
 8022298:	7882      	ldrb	r2, [r0, #2]
 802229a:	fb0c 3307 	mla	r3, ip, r7, r3
 802229e:	fb01 3306 	mla	r3, r1, r6, r3
 80222a2:	fb09 3902 	mla	r9, r9, r2, r3
 80222a6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80222a8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80222aa:	441c      	add	r4, r3
 80222ac:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80222ae:	ea4f 2929 	mov.w	r9, r9, asr #8
 80222b2:	4413      	add	r3, r2
 80222b4:	f808 9c04 	strb.w	r9, [r8, #-4]
 80222b8:	9318      	str	r3, [sp, #96]	; 0x60
 80222ba:	e70d      	b.n	80220d8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 80222bc:	b151      	cbz	r1, 80222d4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 80222be:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80222c2:	4638      	mov	r0, r7
 80222c4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80222c8:	442a      	add	r2, r5
 80222ca:	463e      	mov	r6, r7
 80222cc:	e7a3      	b.n	8022216 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 80222ce:	4638      	mov	r0, r7
 80222d0:	463a      	mov	r2, r7
 80222d2:	e7a0      	b.n	8022216 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 80222d4:	4638      	mov	r0, r7
 80222d6:	463a      	mov	r2, r7
 80222d8:	e7f7      	b.n	80222ca <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x400>
 80222da:	b00d      	add	sp, #52	; 0x34
 80222dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080222e0 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 80222e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80222e4:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	; 0x38
 80222e8:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 80222ec:	2d00      	cmp	r5, #0
 80222ee:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 80222f2:	fb05 700c 	mla	r0, r5, ip, r7
 80222f6:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 80222fa:	f89d e044 	ldrb.w	lr, [sp, #68]	; 0x44
 80222fe:	eb02 0800 	add.w	r8, r2, r0
 8022302:	f2c0 8118 	blt.w	8022536 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 8022306:	45a9      	cmp	r9, r5
 8022308:	f340 8115 	ble.w	8022536 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 802230c:	2f00      	cmp	r7, #0
 802230e:	f2c0 8110 	blt.w	8022532 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 8022312:	45bc      	cmp	ip, r7
 8022314:	f340 810d 	ble.w	8022532 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 8022318:	5c12      	ldrb	r2, [r2, r0]
 802231a:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 802231e:	1c7a      	adds	r2, r7, #1
 8022320:	f100 810c 	bmi.w	802253c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 8022324:	4594      	cmp	ip, r2
 8022326:	f340 8109 	ble.w	802253c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 802232a:	2c00      	cmp	r4, #0
 802232c:	f000 8108 	beq.w	8022540 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x260>
 8022330:	f898 2001 	ldrb.w	r2, [r8, #1]
 8022334:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8022338:	3501      	adds	r5, #1
 802233a:	f100 8105 	bmi.w	8022548 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 802233e:	45a9      	cmp	r9, r5
 8022340:	f340 8102 	ble.w	8022548 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 8022344:	f1be 0f00 	cmp.w	lr, #0
 8022348:	f000 8101 	beq.w	802254e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x26e>
 802234c:	2f00      	cmp	r7, #0
 802234e:	f2c0 80f9 	blt.w	8022544 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 8022352:	45bc      	cmp	ip, r7
 8022354:	f340 80f6 	ble.w	8022544 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 8022358:	f818 200c 	ldrb.w	r2, [r8, ip]
 802235c:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8022360:	3701      	adds	r7, #1
 8022362:	f100 80f7 	bmi.w	8022554 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 8022366:	45bc      	cmp	ip, r7
 8022368:	f340 80f4 	ble.w	8022554 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 802236c:	2c00      	cmp	r4, #0
 802236e:	f000 80f3 	beq.w	8022558 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x278>
 8022372:	44c4      	add	ip, r8
 8022374:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8022378:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 802237c:	fa1f fc84 	uxth.w	ip, r4
 8022380:	fa1f f48e 	uxth.w	r4, lr
 8022384:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 8022388:	fb04 fe0c 	mul.w	lr, r4, ip
 802238c:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8022390:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8022394:	ebce 1404 	rsb	r4, lr, r4, lsl #4
 8022398:	ebac 070e 	sub.w	r7, ip, lr
 802239c:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 80223a0:	ea4f 6915 	mov.w	r9, r5, lsr #24
 80223a4:	b2a4      	uxth	r4, r4
 80223a6:	b2bf      	uxth	r7, r7
 80223a8:	1b1b      	subs	r3, r3, r4
 80223aa:	ea4f 6812 	mov.w	r8, r2, lsr #24
 80223ae:	fb07 fc0a 	mul.w	ip, r7, sl
 80223b2:	b29b      	uxth	r3, r3
 80223b4:	fb03 cc0b 	mla	ip, r3, fp, ip
 80223b8:	9300      	str	r3, [sp, #0]
 80223ba:	fb04 cc09 	mla	ip, r4, r9, ip
 80223be:	fb0e cc08 	mla	ip, lr, r8, ip
 80223c2:	f3cc 2307 	ubfx	r3, ip, #8, #8
 80223c6:	9301      	str	r3, [sp, #4]
 80223c8:	2b00      	cmp	r3, #0
 80223ca:	f000 80af 	beq.w	802252c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x24c>
 80223ce:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 80223d2:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80223d6:	fb0b fc0c 	mul.w	ip, fp, ip
 80223da:	fb0b f606 	mul.w	r6, fp, r6
 80223de:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 80223e2:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80223e6:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 80223ea:	44dc      	add	ip, fp
 80223ec:	f000 1bff 	and.w	fp, r0, #16711935	; 0xff00ff
 80223f0:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80223f4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80223f8:	fb0a fb0b 	mul.w	fp, sl, fp
 80223fc:	fb0a fa00 	mul.w	sl, sl, r0
 8022400:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 8022404:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 8022408:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 802240c:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8022410:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8022414:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8022418:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 802241c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022420:	0a36      	lsrs	r6, r6, #8
 8022422:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022426:	44dc      	add	ip, fp
 8022428:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 802242c:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8022430:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8022434:	fb09 fb0b 	mul.w	fp, r9, fp
 8022438:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802243c:	fb09 f905 	mul.w	r9, r9, r5
 8022440:	ea4f 201b 	mov.w	r0, fp, lsr #8
 8022444:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022448:	f509 7580 	add.w	r5, r9, #256	; 0x100
 802244c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8022450:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8022454:	fb0c fc07 	mul.w	ip, ip, r7
 8022458:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 802245c:	f002 15ff 	and.w	r5, r2, #16711935	; 0xff00ff
 8022460:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8022464:	4458      	add	r0, fp
 8022466:	fb08 f505 	mul.w	r5, r8, r5
 802246a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802246e:	fb08 f802 	mul.w	r8, r8, r2
 8022472:	0a00      	lsrs	r0, r0, #8
 8022474:	0a2a      	lsrs	r2, r5, #8
 8022476:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 802247a:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 802247e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8022482:	4415      	add	r5, r2
 8022484:	f508 7280 	add.w	r2, r8, #256	; 0x100
 8022488:	0a2d      	lsrs	r5, r5, #8
 802248a:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 802248e:	9a00      	ldr	r2, [sp, #0]
 8022490:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8022494:	fb03 cc02 	mla	ip, r3, r2, ip
 8022498:	ea4f 2818 	mov.w	r8, r8, lsr #8
 802249c:	9b01      	ldr	r3, [sp, #4]
 802249e:	fb05 c50e 	mla	r5, r5, lr, ip
 80224a2:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 80224a6:	fb00 5004 	mla	r0, r0, r4, r5
 80224aa:	0a00      	lsrs	r0, r0, #8
 80224ac:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 80224b0:	f40a 407f 	and.w	r0, sl, #65280	; 0xff00
 80224b4:	4378      	muls	r0, r7
 80224b6:	fb02 0006 	mla	r0, r2, r6, r0
 80224ba:	fb0e 0e08 	mla	lr, lr, r8, r0
 80224be:	f409 407f 	and.w	r0, r9, #65280	; 0xff00
 80224c2:	fb04 e000 	mla	r0, r4, r0, lr
 80224c6:	0a00      	lsrs	r0, r0, #8
 80224c8:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80224cc:	4328      	orrs	r0, r5
 80224ce:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 80224d2:	b2ad      	uxth	r5, r5
 80224d4:	b2c4      	uxtb	r4, r0
 80224d6:	436b      	muls	r3, r5
 80224d8:	fb14 f405 	smulbb	r4, r4, r5
 80224dc:	1c5a      	adds	r2, r3, #1
 80224de:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80224e2:	780b      	ldrb	r3, [r1, #0]
 80224e4:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 80224e8:	b2d2      	uxtb	r2, r2
 80224ea:	fb03 4302 	mla	r3, r3, r2, r4
 80224ee:	b29b      	uxth	r3, r3
 80224f0:	1c5c      	adds	r4, r3, #1
 80224f2:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 80224f6:	784c      	ldrb	r4, [r1, #1]
 80224f8:	fb14 f402 	smulbb	r4, r4, r2
 80224fc:	121b      	asrs	r3, r3, #8
 80224fe:	700b      	strb	r3, [r1, #0]
 8022500:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8022504:	fb03 4305 	mla	r3, r3, r5, r4
 8022508:	b29b      	uxth	r3, r3
 802250a:	1c5c      	adds	r4, r3, #1
 802250c:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 8022510:	0c04      	lsrs	r4, r0, #16
 8022512:	7888      	ldrb	r0, [r1, #2]
 8022514:	121b      	asrs	r3, r3, #8
 8022516:	fb10 f002 	smulbb	r0, r0, r2
 802251a:	704b      	strb	r3, [r1, #1]
 802251c:	fb04 0005 	mla	r0, r4, r5, r0
 8022520:	b280      	uxth	r0, r0
 8022522:	1c43      	adds	r3, r0, #1
 8022524:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8022528:	1200      	asrs	r0, r0, #8
 802252a:	7088      	strb	r0, [r1, #2]
 802252c:	b003      	add	sp, #12
 802252e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022532:	2600      	movs	r6, #0
 8022534:	e6f3      	b.n	802231e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x3e>
 8022536:	2000      	movs	r0, #0
 8022538:	4606      	mov	r6, r0
 802253a:	e6fd      	b.n	8022338 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 802253c:	2000      	movs	r0, #0
 802253e:	e6fb      	b.n	8022338 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 8022540:	4620      	mov	r0, r4
 8022542:	e6f9      	b.n	8022338 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 8022544:	2500      	movs	r5, #0
 8022546:	e70b      	b.n	8022360 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x80>
 8022548:	2200      	movs	r2, #0
 802254a:	4615      	mov	r5, r2
 802254c:	e716      	b.n	802237c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 802254e:	4672      	mov	r2, lr
 8022550:	4675      	mov	r5, lr
 8022552:	e713      	b.n	802237c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 8022554:	2200      	movs	r2, #0
 8022556:	e711      	b.n	802237c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 8022558:	4622      	mov	r2, r4
 802255a:	e70f      	b.n	802237c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>

0802255c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802255c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022560:	b09f      	sub	sp, #124	; 0x7c
 8022562:	921b      	str	r2, [sp, #108]	; 0x6c
 8022564:	9309      	str	r3, [sp, #36]	; 0x24
 8022566:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8022568:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 802256c:	901d      	str	r0, [sp, #116]	; 0x74
 802256e:	931c      	str	r3, [sp, #112]	; 0x70
 8022570:	6850      	ldr	r0, [r2, #4]
 8022572:	9119      	str	r1, [sp, #100]	; 0x64
 8022574:	6812      	ldr	r2, [r2, #0]
 8022576:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 8022578:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 802257c:	fb00 1303 	mla	r3, r0, r3, r1
 8022580:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022584:	18d3      	adds	r3, r2, r3
 8022586:	930c      	str	r3, [sp, #48]	; 0x30
 8022588:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802258a:	681b      	ldr	r3, [r3, #0]
 802258c:	9312      	str	r3, [sp, #72]	; 0x48
 802258e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8022590:	685e      	ldr	r6, [r3, #4]
 8022592:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 8022596:	3604      	adds	r6, #4
 8022598:	930d      	str	r3, [sp, #52]	; 0x34
 802259a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 802259c:	2b00      	cmp	r3, #0
 802259e:	dc03      	bgt.n	80225a8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 80225a0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80225a2:	2b00      	cmp	r3, #0
 80225a4:	f340 8378 	ble.w	8022c98 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 80225a8:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80225aa:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80225ae:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80225b2:	1e48      	subs	r0, r1, #1
 80225b4:	1e57      	subs	r7, r2, #1
 80225b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80225b8:	2b00      	cmp	r3, #0
 80225ba:	f340 818c 	ble.w	80228d6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 80225be:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80225c0:	142b      	asrs	r3, r5, #16
 80225c2:	ea5f 4c24 	movs.w	ip, r4, asr #16
 80225c6:	d406      	bmi.n	80225d6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 80225c8:	4584      	cmp	ip, r0
 80225ca:	da04      	bge.n	80225d6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 80225cc:	2b00      	cmp	r3, #0
 80225ce:	db02      	blt.n	80225d6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 80225d0:	42bb      	cmp	r3, r7
 80225d2:	f2c0 8181 	blt.w	80228d8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 80225d6:	f11c 0c01 	adds.w	ip, ip, #1
 80225da:	f100 816f 	bmi.w	80228bc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 80225de:	4561      	cmp	r1, ip
 80225e0:	f2c0 816c 	blt.w	80228bc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 80225e4:	3301      	adds	r3, #1
 80225e6:	f100 8169 	bmi.w	80228bc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 80225ea:	429a      	cmp	r2, r3
 80225ec:	f2c0 8166 	blt.w	80228bc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 80225f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80225f2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80225f4:	931a      	str	r3, [sp, #104]	; 0x68
 80225f6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80225f8:	2b00      	cmp	r3, #0
 80225fa:	f340 818c 	ble.w	8022916 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 80225fe:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8022600:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8022604:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8022608:	f3c3 3203 	ubfx	r2, r3, #12, #4
 802260c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802260e:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 8022612:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8022614:	141b      	asrs	r3, r3, #16
 8022616:	f100 81d0 	bmi.w	80229ba <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 802261a:	f100 38ff 	add.w	r8, r0, #4294967295
 802261e:	4543      	cmp	r3, r8
 8022620:	f280 81cb 	bge.w	80229ba <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8022624:	f1bc 0f00 	cmp.w	ip, #0
 8022628:	f2c0 81c7 	blt.w	80229ba <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 802262c:	f10e 38ff 	add.w	r8, lr, #4294967295
 8022630:	45c4      	cmp	ip, r8
 8022632:	f280 81c2 	bge.w	80229ba <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8022636:	b200      	sxth	r0, r0
 8022638:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802263a:	fb0c 3300 	mla	r3, ip, r0, r3
 802263e:	eb04 0803 	add.w	r8, r4, r3
 8022642:	5ce3      	ldrb	r3, [r4, r3]
 8022644:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8022648:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 802264c:	2a00      	cmp	r2, #0
 802264e:	f000 81a9 	beq.w	80229a4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x448>
 8022652:	f898 c001 	ldrb.w	ip, [r8, #1]
 8022656:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 802265a:	940e      	str	r4, [sp, #56]	; 0x38
 802265c:	0e24      	lsrs	r4, r4, #24
 802265e:	9415      	str	r4, [sp, #84]	; 0x54
 8022660:	b179      	cbz	r1, 8022682 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8022662:	eb08 0c00 	add.w	ip, r8, r0
 8022666:	f818 0000 	ldrb.w	r0, [r8, r0]
 802266a:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 802266e:	900a      	str	r0, [sp, #40]	; 0x28
 8022670:	0e00      	lsrs	r0, r0, #24
 8022672:	9013      	str	r0, [sp, #76]	; 0x4c
 8022674:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8022678:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 802267c:	900f      	str	r0, [sp, #60]	; 0x3c
 802267e:	0e00      	lsrs	r0, r0, #24
 8022680:	9016      	str	r0, [sp, #88]	; 0x58
 8022682:	b292      	uxth	r2, r2
 8022684:	9815      	ldr	r0, [sp, #84]	; 0x54
 8022686:	b289      	uxth	r1, r1
 8022688:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802268a:	fb02 f901 	mul.w	r9, r2, r1
 802268e:	0112      	lsls	r2, r2, #4
 8022690:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8022694:	eba2 0809 	sub.w	r8, r2, r9
 8022698:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 802269c:	b289      	uxth	r1, r1
 802269e:	fa1f f888 	uxth.w	r8, r8
 80226a2:	1a52      	subs	r2, r2, r1
 80226a4:	fb08 f000 	mul.w	r0, r8, r0
 80226a8:	b292      	uxth	r2, r2
 80226aa:	fb02 000e 	mla	r0, r2, lr, r0
 80226ae:	fb01 0004 	mla	r0, r1, r4, r0
 80226b2:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80226b4:	fb09 0004 	mla	r0, r9, r4, r0
 80226b8:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80226bc:	2800      	cmp	r0, #0
 80226be:	f000 80f2 	beq.w	80228a6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 80226c2:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80226c6:	d01b      	beq.n	8022700 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 80226c8:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80226cc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80226d0:	fb0e fa0a 	mul.w	sl, lr, sl
 80226d4:	fb0e fe03 	mul.w	lr, lr, r3
 80226d8:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80226dc:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80226e0:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 80226e4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80226e8:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80226ec:	4453      	add	r3, sl
 80226ee:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80226f2:	0a1b      	lsrs	r3, r3, #8
 80226f4:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80226f8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80226fc:	ea43 030c 	orr.w	r3, r3, ip
 8022700:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8022702:	2cff      	cmp	r4, #255	; 0xff
 8022704:	d021      	beq.n	802274a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8022706:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8022708:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 802270c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 802270e:	fb04 fb0b 	mul.w	fp, r4, fp
 8022712:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8022714:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8022718:	9c15      	ldr	r4, [sp, #84]	; 0x54
 802271a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802271e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8022722:	fb04 fa0a 	mul.w	sl, r4, sl
 8022726:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802272a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802272e:	44de      	add	lr, fp
 8022730:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8022734:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022738:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802273c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022740:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022744:	ea4e 040a 	orr.w	r4, lr, sl
 8022748:	940e      	str	r4, [sp, #56]	; 0x38
 802274a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802274c:	2cff      	cmp	r4, #255	; 0xff
 802274e:	d021      	beq.n	8022794 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 8022750:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8022752:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8022756:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8022758:	fb04 fb0b 	mul.w	fp, r4, fp
 802275c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802275e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8022762:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8022764:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8022768:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802276c:	fb04 fa0a 	mul.w	sl, r4, sl
 8022770:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022774:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8022778:	44de      	add	lr, fp
 802277a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802277e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022782:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022786:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802278a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802278e:	ea4e 040a 	orr.w	r4, lr, sl
 8022792:	940a      	str	r4, [sp, #40]	; 0x28
 8022794:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8022796:	2cff      	cmp	r4, #255	; 0xff
 8022798:	d021      	beq.n	80227de <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 802279a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 802279c:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80227a0:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80227a2:	fb04 fb0b 	mul.w	fp, r4, fp
 80227a6:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80227a8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80227ac:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80227ae:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80227b2:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80227b6:	fb04 fa0a 	mul.w	sl, r4, sl
 80227ba:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80227be:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80227c2:	44de      	add	lr, fp
 80227c4:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80227c8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80227cc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80227d0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80227d4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80227d8:	ea4e 040a 	orr.w	r4, lr, sl
 80227dc:	940f      	str	r4, [sp, #60]	; 0x3c
 80227de:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80227e0:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 80227e4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80227e8:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80227ec:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80227ee:	fb08 fc0c 	mul.w	ip, r8, ip
 80227f2:	fb02 cc0e 	mla	ip, r2, lr, ip
 80227f6:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80227fa:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80227fc:	fb01 cc0e 	mla	ip, r1, lr, ip
 8022800:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8022804:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8022806:	fb09 cc0e 	mla	ip, r9, lr, ip
 802280a:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 802280e:	fb08 f80e 	mul.w	r8, r8, lr
 8022812:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022816:	fb02 8303 	mla	r3, r2, r3, r8
 802281a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802281c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022820:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8022824:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8022826:	fb01 330a 	mla	r3, r1, sl, r3
 802282a:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 802282e:	fb09 3901 	mla	r9, r9, r1, r3
 8022832:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022834:	990d      	ldr	r1, [sp, #52]	; 0x34
 8022836:	4343      	muls	r3, r0
 8022838:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802283c:	1c58      	adds	r0, r3, #1
 802283e:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8022842:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8022846:	ea4c 0c09 	orr.w	ip, ip, r9
 802284a:	783b      	ldrb	r3, [r7, #0]
 802284c:	fa5f f28c 	uxtb.w	r2, ip
 8022850:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8022854:	fb12 f201 	smulbb	r2, r2, r1
 8022858:	b2c0      	uxtb	r0, r0
 802285a:	fb03 2300 	mla	r3, r3, r0, r2
 802285e:	b29b      	uxth	r3, r3
 8022860:	1c5a      	adds	r2, r3, #1
 8022862:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022866:	787a      	ldrb	r2, [r7, #1]
 8022868:	fb12 f200 	smulbb	r2, r2, r0
 802286c:	121b      	asrs	r3, r3, #8
 802286e:	703b      	strb	r3, [r7, #0]
 8022870:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8022874:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8022878:	fb03 2301 	mla	r3, r3, r1, r2
 802287c:	b29b      	uxth	r3, r3
 802287e:	1c5a      	adds	r2, r3, #1
 8022880:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022884:	121b      	asrs	r3, r3, #8
 8022886:	707b      	strb	r3, [r7, #1]
 8022888:	78bb      	ldrb	r3, [r7, #2]
 802288a:	fb13 f000 	smulbb	r0, r3, r0
 802288e:	fb0c 0c01 	mla	ip, ip, r1, r0
 8022892:	fa1f fc8c 	uxth.w	ip, ip
 8022896:	f10c 0301 	add.w	r3, ip, #1
 802289a:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 802289e:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80228a2:	f887 c002 	strb.w	ip, [r7, #2]
 80228a6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80228a8:	3703      	adds	r7, #3
 80228aa:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80228ac:	441a      	add	r2, r3
 80228ae:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80228b0:	441d      	add	r5, r3
 80228b2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80228b4:	9229      	str	r2, [sp, #164]	; 0xa4
 80228b6:	3b01      	subs	r3, #1
 80228b8:	931a      	str	r3, [sp, #104]	; 0x68
 80228ba:	e69c      	b.n	80225f6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 80228bc:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80228be:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80228c0:	441c      	add	r4, r3
 80228c2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80228c4:	441d      	add	r5, r3
 80228c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80228c8:	9429      	str	r4, [sp, #164]	; 0xa4
 80228ca:	3b01      	subs	r3, #1
 80228cc:	9309      	str	r3, [sp, #36]	; 0x24
 80228ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80228d0:	3303      	adds	r3, #3
 80228d2:	930c      	str	r3, [sp, #48]	; 0x30
 80228d4:	e66f      	b.n	80225b6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 80228d6:	d026      	beq.n	8022926 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 80228d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80228da:	982b      	ldr	r0, [sp, #172]	; 0xac
 80228dc:	3b01      	subs	r3, #1
 80228de:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80228e0:	fb00 4003 	mla	r0, r0, r3, r4
 80228e4:	1400      	asrs	r0, r0, #16
 80228e6:	f53f ae83 	bmi.w	80225f0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80228ea:	3901      	subs	r1, #1
 80228ec:	4288      	cmp	r0, r1
 80228ee:	f6bf ae7f 	bge.w	80225f0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80228f2:	992c      	ldr	r1, [sp, #176]	; 0xb0
 80228f4:	fb01 5303 	mla	r3, r1, r3, r5
 80228f8:	141b      	asrs	r3, r3, #16
 80228fa:	f53f ae79 	bmi.w	80225f0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80228fe:	3a01      	subs	r2, #1
 8022900:	4293      	cmp	r3, r2
 8022902:	f6bf ae75 	bge.w	80225f0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8022906:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022908:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 802290c:	f103 0e03 	add.w	lr, r3, #3
 8022910:	f1bb 0f00 	cmp.w	fp, #0
 8022914:	dc71      	bgt.n	80229fa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8022916:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022918:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802291c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802291e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8022922:	4423      	add	r3, r4
 8022924:	930c      	str	r3, [sp, #48]	; 0x30
 8022926:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8022928:	2b00      	cmp	r3, #0
 802292a:	f340 81b5 	ble.w	8022c98 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 802292e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022932:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022934:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022938:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802293c:	eef0 6a62 	vmov.f32	s13, s5
 8022940:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8022944:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022948:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802294c:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 8022950:	eef0 6a43 	vmov.f32	s13, s6
 8022954:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022958:	ee16 5a90 	vmov	r5, s13
 802295c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022960:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022964:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022968:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802296c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022970:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8022974:	ee12 2a90 	vmov	r2, s5
 8022978:	eef0 2a47 	vmov.f32	s5, s14
 802297c:	fb92 f3f3 	sdiv	r3, r2, r3
 8022980:	ee13 2a10 	vmov	r2, s6
 8022984:	932b      	str	r3, [sp, #172]	; 0xac
 8022986:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022988:	eeb0 3a67 	vmov.f32	s6, s15
 802298c:	fb92 f3f3 	sdiv	r3, r2, r3
 8022990:	932c      	str	r3, [sp, #176]	; 0xb0
 8022992:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8022994:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8022996:	3b01      	subs	r3, #1
 8022998:	9319      	str	r3, [sp, #100]	; 0x64
 802299a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802299c:	bf08      	it	eq
 802299e:	4613      	moveq	r3, r2
 80229a0:	9309      	str	r3, [sp, #36]	; 0x24
 80229a2:	e5fa      	b.n	802259a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 80229a4:	2900      	cmp	r1, #0
 80229a6:	f43f ae6c 	beq.w	8022682 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 80229aa:	f818 0000 	ldrb.w	r0, [r8, r0]
 80229ae:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 80229b2:	900a      	str	r0, [sp, #40]	; 0x28
 80229b4:	0e00      	lsrs	r0, r0, #24
 80229b6:	9013      	str	r0, [sp, #76]	; 0x4c
 80229b8:	e663      	b.n	8022682 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 80229ba:	f113 0801 	adds.w	r8, r3, #1
 80229be:	f53f af72 	bmi.w	80228a6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 80229c2:	4540      	cmp	r0, r8
 80229c4:	f6ff af6f 	blt.w	80228a6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 80229c8:	f11c 0801 	adds.w	r8, ip, #1
 80229cc:	f53f af6b 	bmi.w	80228a6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 80229d0:	45c6      	cmp	lr, r8
 80229d2:	f6ff af68 	blt.w	80228a6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 80229d6:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80229d8:	b200      	sxth	r0, r0
 80229da:	9302      	str	r3, [sp, #8]
 80229dc:	fa0f f38e 	sxth.w	r3, lr
 80229e0:	9000      	str	r0, [sp, #0]
 80229e2:	9301      	str	r3, [sp, #4]
 80229e4:	4633      	mov	r3, r6
 80229e6:	981d      	ldr	r0, [sp, #116]	; 0x74
 80229e8:	e9cd 1405 	strd	r1, r4, [sp, #20]
 80229ec:	e9cd c203 	strd	ip, r2, [sp, #12]
 80229f0:	4639      	mov	r1, r7
 80229f2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80229f4:	f7ff fc74 	bl	80222e0 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 80229f8:	e755      	b.n	80228a6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 80229fa:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80229fc:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8022a00:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8022a02:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8022a06:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8022a08:	1427      	asrs	r7, r4, #16
 8022a0a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8022a0c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022a10:	142b      	asrs	r3, r5, #16
 8022a12:	fb01 7303 	mla	r3, r1, r3, r7
 8022a16:	18e7      	adds	r7, r4, r3
 8022a18:	5ce3      	ldrb	r3, [r4, r3]
 8022a1a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8022a1e:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8022a22:	2a00      	cmp	r2, #0
 8022a24:	f000 812e 	beq.w	8022c84 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x728>
 8022a28:	f897 8001 	ldrb.w	r8, [r7, #1]
 8022a2c:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 8022a30:	9410      	str	r4, [sp, #64]	; 0x40
 8022a32:	0e24      	lsrs	r4, r4, #24
 8022a34:	9417      	str	r4, [sp, #92]	; 0x5c
 8022a36:	b170      	cbz	r0, 8022a56 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 8022a38:	eb07 0801 	add.w	r8, r7, r1
 8022a3c:	5c79      	ldrb	r1, [r7, r1]
 8022a3e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8022a42:	910b      	str	r1, [sp, #44]	; 0x2c
 8022a44:	0e09      	lsrs	r1, r1, #24
 8022a46:	9114      	str	r1, [sp, #80]	; 0x50
 8022a48:	f898 1001 	ldrb.w	r1, [r8, #1]
 8022a4c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8022a50:	9111      	str	r1, [sp, #68]	; 0x44
 8022a52:	0e09      	lsrs	r1, r1, #24
 8022a54:	9118      	str	r1, [sp, #96]	; 0x60
 8022a56:	b292      	uxth	r2, r2
 8022a58:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8022a5a:	b280      	uxth	r0, r0
 8022a5c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8022a5e:	fb02 f900 	mul.w	r9, r2, r0
 8022a62:	0112      	lsls	r2, r2, #4
 8022a64:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8022a68:	eba2 0809 	sub.w	r8, r2, r9
 8022a6c:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8022a70:	b280      	uxth	r0, r0
 8022a72:	fa1f f888 	uxth.w	r8, r8
 8022a76:	1a12      	subs	r2, r2, r0
 8022a78:	fb08 f101 	mul.w	r1, r8, r1
 8022a7c:	b292      	uxth	r2, r2
 8022a7e:	fb02 110c 	mla	r1, r2, ip, r1
 8022a82:	fb00 1104 	mla	r1, r0, r4, r1
 8022a86:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8022a88:	fb09 1104 	mla	r1, r9, r4, r1
 8022a8c:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8022a90:	2900      	cmp	r1, #0
 8022a92:	f000 80ec 	beq.w	8022c6e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x712>
 8022a96:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8022a9a:	d019      	beq.n	8022ad0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x574>
 8022a9c:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8022aa0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022aa4:	fb0c fa0a 	mul.w	sl, ip, sl
 8022aa8:	fb0c fc03 	mul.w	ip, ip, r3
 8022aac:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8022ab0:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8022ab4:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8022ab8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022abc:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8022ac0:	4453      	add	r3, sl
 8022ac2:	0a3f      	lsrs	r7, r7, #8
 8022ac4:	0a1b      	lsrs	r3, r3, #8
 8022ac6:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8022aca:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022ace:	433b      	orrs	r3, r7
 8022ad0:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8022ad2:	2cff      	cmp	r4, #255	; 0xff
 8022ad4:	d020      	beq.n	8022b18 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5bc>
 8022ad6:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8022ad8:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8022adc:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8022ade:	4367      	muls	r7, r4
 8022ae0:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8022ae2:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8022ae6:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8022aea:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8022aec:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8022af0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022af4:	fb04 fa0a 	mul.w	sl, r4, sl
 8022af8:	44bc      	add	ip, r7
 8022afa:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8022afe:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022b02:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8022b06:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022b0a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022b0e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022b12:	ea4c 040a 	orr.w	r4, ip, sl
 8022b16:	9410      	str	r4, [sp, #64]	; 0x40
 8022b18:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8022b1a:	2cff      	cmp	r4, #255	; 0xff
 8022b1c:	d020      	beq.n	8022b60 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x604>
 8022b1e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8022b20:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8022b24:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8022b26:	4367      	muls	r7, r4
 8022b28:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8022b2a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8022b2e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8022b32:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8022b34:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8022b38:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022b3c:	fb04 fa0a 	mul.w	sl, r4, sl
 8022b40:	44bc      	add	ip, r7
 8022b42:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8022b46:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022b4a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8022b4e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022b52:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022b56:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022b5a:	ea4c 040a 	orr.w	r4, ip, sl
 8022b5e:	940b      	str	r4, [sp, #44]	; 0x2c
 8022b60:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8022b62:	2cff      	cmp	r4, #255	; 0xff
 8022b64:	d020      	beq.n	8022ba8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64c>
 8022b66:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8022b68:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8022b6c:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8022b6e:	4367      	muls	r7, r4
 8022b70:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8022b72:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8022b76:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8022b7a:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8022b7c:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8022b80:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022b84:	fb04 fa0a 	mul.w	sl, r4, sl
 8022b88:	44bc      	add	ip, r7
 8022b8a:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8022b8e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022b92:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8022b96:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022b9a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022b9e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022ba2:	ea4c 040a 	orr.w	r4, ip, sl
 8022ba6:	9411      	str	r4, [sp, #68]	; 0x44
 8022ba8:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8022baa:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8022bae:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022bb2:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8022bb6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8022bb8:	fb08 f707 	mul.w	r7, r8, r7
 8022bbc:	fb02 770c 	mla	r7, r2, ip, r7
 8022bc0:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8022bc4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8022bc6:	fb00 770c 	mla	r7, r0, ip, r7
 8022bca:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8022bce:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8022bd0:	fb09 770c 	mla	r7, r9, ip, r7
 8022bd4:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8022bd8:	fb08 f80c 	mul.w	r8, r8, ip
 8022bdc:	0a3f      	lsrs	r7, r7, #8
 8022bde:	fb02 8303 	mla	r3, r2, r3, r8
 8022be2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8022be4:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8022be8:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8022bec:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8022bee:	fb00 330a 	mla	r3, r0, sl, r3
 8022bf2:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8022bf6:	980d      	ldr	r0, [sp, #52]	; 0x34
 8022bf8:	fb09 3c0c 	mla	ip, r9, ip, r3
 8022bfc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022bfe:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022c02:	434b      	muls	r3, r1
 8022c04:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8022c08:	1c59      	adds	r1, r3, #1
 8022c0a:	ea47 070c 	orr.w	r7, r7, ip
 8022c0e:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8022c12:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8022c16:	b2fa      	uxtb	r2, r7
 8022c18:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8022c1c:	fb12 f200 	smulbb	r2, r2, r0
 8022c20:	b2c9      	uxtb	r1, r1
 8022c22:	fb03 2301 	mla	r3, r3, r1, r2
 8022c26:	b29b      	uxth	r3, r3
 8022c28:	1c5a      	adds	r2, r3, #1
 8022c2a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022c2e:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8022c32:	fb12 f201 	smulbb	r2, r2, r1
 8022c36:	121b      	asrs	r3, r3, #8
 8022c38:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8022c3c:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8022c40:	0c3f      	lsrs	r7, r7, #16
 8022c42:	fb03 2300 	mla	r3, r3, r0, r2
 8022c46:	b29b      	uxth	r3, r3
 8022c48:	1c5a      	adds	r2, r3, #1
 8022c4a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022c4e:	121b      	asrs	r3, r3, #8
 8022c50:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8022c54:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8022c58:	fb13 f101 	smulbb	r1, r3, r1
 8022c5c:	fb07 1700 	mla	r7, r7, r0, r1
 8022c60:	b2bf      	uxth	r7, r7
 8022c62:	1c7b      	adds	r3, r7, #1
 8022c64:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 8022c68:	123f      	asrs	r7, r7, #8
 8022c6a:	f80e 7c01 	strb.w	r7, [lr, #-1]
 8022c6e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8022c70:	f10e 0e03 	add.w	lr, lr, #3
 8022c74:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8022c76:	f10b 3bff 	add.w	fp, fp, #4294967295
 8022c7a:	441a      	add	r2, r3
 8022c7c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022c7e:	9229      	str	r2, [sp, #164]	; 0xa4
 8022c80:	441d      	add	r5, r3
 8022c82:	e645      	b.n	8022910 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 8022c84:	2800      	cmp	r0, #0
 8022c86:	f43f aee6 	beq.w	8022a56 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 8022c8a:	5c79      	ldrb	r1, [r7, r1]
 8022c8c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8022c90:	910b      	str	r1, [sp, #44]	; 0x2c
 8022c92:	0e09      	lsrs	r1, r1, #24
 8022c94:	9114      	str	r1, [sp, #80]	; 0x50
 8022c96:	e6de      	b.n	8022a56 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 8022c98:	b01f      	add	sp, #124	; 0x7c
 8022c9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022c9e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 8022c9e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022ca2:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	; 0x38
 8022ca6:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 8022caa:	2d00      	cmp	r5, #0
 8022cac:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 8022cb0:	fb05 700e 	mla	r0, r5, lr, r7
 8022cb4:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 8022cb8:	f89d c044 	ldrb.w	ip, [sp, #68]	; 0x44
 8022cbc:	eb02 0800 	add.w	r8, r2, r0
 8022cc0:	f2c0 8105 	blt.w	8022ece <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 8022cc4:	45a9      	cmp	r9, r5
 8022cc6:	f340 8102 	ble.w	8022ece <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 8022cca:	2f00      	cmp	r7, #0
 8022ccc:	f2c0 80fd 	blt.w	8022eca <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 8022cd0:	45be      	cmp	lr, r7
 8022cd2:	f340 80fa 	ble.w	8022eca <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 8022cd6:	5c12      	ldrb	r2, [r2, r0]
 8022cd8:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8022cdc:	1c7a      	adds	r2, r7, #1
 8022cde:	f100 80f9 	bmi.w	8022ed4 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 8022ce2:	4596      	cmp	lr, r2
 8022ce4:	f340 80f6 	ble.w	8022ed4 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 8022ce8:	2c00      	cmp	r4, #0
 8022cea:	f000 80f5 	beq.w	8022ed8 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23a>
 8022cee:	f898 2001 	ldrb.w	r2, [r8, #1]
 8022cf2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8022cf6:	3501      	adds	r5, #1
 8022cf8:	f100 80f2 	bmi.w	8022ee0 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 8022cfc:	45a9      	cmp	r9, r5
 8022cfe:	f340 80ef 	ble.w	8022ee0 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 8022d02:	f1bc 0f00 	cmp.w	ip, #0
 8022d06:	f000 80ee 	beq.w	8022ee6 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x248>
 8022d0a:	2f00      	cmp	r7, #0
 8022d0c:	f2c0 80e6 	blt.w	8022edc <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 8022d10:	45be      	cmp	lr, r7
 8022d12:	f340 80e3 	ble.w	8022edc <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 8022d16:	f818 200e 	ldrb.w	r2, [r8, lr]
 8022d1a:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8022d1e:	3701      	adds	r7, #1
 8022d20:	f100 80e4 	bmi.w	8022eec <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 8022d24:	45be      	cmp	lr, r7
 8022d26:	f340 80e1 	ble.w	8022eec <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 8022d2a:	2c00      	cmp	r4, #0
 8022d2c:	f000 80e0 	beq.w	8022ef0 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x252>
 8022d30:	44c6      	add	lr, r8
 8022d32:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8022d36:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8022d3a:	b2a3      	uxth	r3, r4
 8022d3c:	fa1f fc8c 	uxth.w	ip, ip
 8022d40:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 8022d44:	fb0c fe03 	mul.w	lr, ip, r3
 8022d48:	011b      	lsls	r3, r3, #4
 8022d4a:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8022d4e:	ebce 1c0c 	rsb	ip, lr, ip, lsl #4
 8022d52:	eba3 070e 	sub.w	r7, r3, lr
 8022d56:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8022d5a:	ea4f 6915 	mov.w	r9, r5, lsr #24
 8022d5e:	fa1f f48c 	uxth.w	r4, ip
 8022d62:	b2bf      	uxth	r7, r7
 8022d64:	1b1b      	subs	r3, r3, r4
 8022d66:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8022d6a:	fb07 fc0a 	mul.w	ip, r7, sl
 8022d6e:	b29b      	uxth	r3, r3
 8022d70:	fb03 cc0b 	mla	ip, r3, fp, ip
 8022d74:	9300      	str	r3, [sp, #0]
 8022d76:	fb04 cc09 	mla	ip, r4, r9, ip
 8022d7a:	fb0e cc08 	mla	ip, lr, r8, ip
 8022d7e:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8022d82:	9301      	str	r3, [sp, #4]
 8022d84:	2b00      	cmp	r3, #0
 8022d86:	f000 809d 	beq.w	8022ec4 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x226>
 8022d8a:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8022d8e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8022d92:	fb0b fc0c 	mul.w	ip, fp, ip
 8022d96:	fb0b f606 	mul.w	r6, fp, r6
 8022d9a:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8022d9e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8022da2:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8022da6:	44dc      	add	ip, fp
 8022da8:	f000 1bff 	and.w	fp, r0, #16711935	; 0xff00ff
 8022dac:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8022db0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022db4:	fb0a fb0b 	mul.w	fp, sl, fp
 8022db8:	fb0a fa00 	mul.w	sl, sl, r0
 8022dbc:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 8022dc0:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 8022dc4:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8022dc8:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8022dcc:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8022dd0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8022dd4:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8022dd8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022ddc:	0a36      	lsrs	r6, r6, #8
 8022dde:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022de2:	44dc      	add	ip, fp
 8022de4:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8022de8:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8022dec:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8022df0:	fb09 fb0b 	mul.w	fp, r9, fp
 8022df4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022df8:	fb09 f905 	mul.w	r9, r9, r5
 8022dfc:	ea4f 201b 	mov.w	r0, fp, lsr #8
 8022e00:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022e04:	f509 7580 	add.w	r5, r9, #256	; 0x100
 8022e08:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8022e0c:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8022e10:	fb0c fc07 	mul.w	ip, ip, r7
 8022e14:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 8022e18:	f002 15ff 	and.w	r5, r2, #16711935	; 0xff00ff
 8022e1c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8022e20:	4458      	add	r0, fp
 8022e22:	fb08 f505 	mul.w	r5, r8, r5
 8022e26:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8022e2a:	fb08 f802 	mul.w	r8, r8, r2
 8022e2e:	0a00      	lsrs	r0, r0, #8
 8022e30:	0a2a      	lsrs	r2, r5, #8
 8022e32:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 8022e36:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8022e3a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8022e3e:	4415      	add	r5, r2
 8022e40:	f508 7280 	add.w	r2, r8, #256	; 0x100
 8022e44:	0a2d      	lsrs	r5, r5, #8
 8022e46:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8022e4a:	9a00      	ldr	r2, [sp, #0]
 8022e4c:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8022e50:	fb03 cc02 	mla	ip, r3, r2, ip
 8022e54:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8022e58:	9b01      	ldr	r3, [sp, #4]
 8022e5a:	fb05 c50e 	mla	r5, r5, lr, ip
 8022e5e:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8022e62:	43db      	mvns	r3, r3
 8022e64:	fb00 5004 	mla	r0, r0, r4, r5
 8022e68:	b2db      	uxtb	r3, r3
 8022e6a:	0a00      	lsrs	r0, r0, #8
 8022e6c:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 8022e70:	f40a 407f 	and.w	r0, sl, #65280	; 0xff00
 8022e74:	4378      	muls	r0, r7
 8022e76:	fb02 0006 	mla	r0, r2, r6, r0
 8022e7a:	780a      	ldrb	r2, [r1, #0]
 8022e7c:	fb0e 0e08 	mla	lr, lr, r8, r0
 8022e80:	f409 407f 	and.w	r0, r9, #65280	; 0xff00
 8022e84:	fb04 e000 	mla	r0, r4, r0, lr
 8022e88:	fb02 f403 	mul.w	r4, r2, r3
 8022e8c:	0a00      	lsrs	r0, r0, #8
 8022e8e:	1c62      	adds	r2, r4, #1
 8022e90:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8022e94:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8022e98:	4328      	orrs	r0, r5
 8022e9a:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8022e9e:	700a      	strb	r2, [r1, #0]
 8022ea0:	784a      	ldrb	r2, [r1, #1]
 8022ea2:	435a      	muls	r2, r3
 8022ea4:	1c54      	adds	r4, r2, #1
 8022ea6:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 8022eaa:	0a02      	lsrs	r2, r0, #8
 8022eac:	0c00      	lsrs	r0, r0, #16
 8022eae:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8022eb2:	704a      	strb	r2, [r1, #1]
 8022eb4:	788a      	ldrb	r2, [r1, #2]
 8022eb6:	4353      	muls	r3, r2
 8022eb8:	1c5a      	adds	r2, r3, #1
 8022eba:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022ebe:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8022ec2:	7088      	strb	r0, [r1, #2]
 8022ec4:	b003      	add	sp, #12
 8022ec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022eca:	2600      	movs	r6, #0
 8022ecc:	e706      	b.n	8022cdc <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x3e>
 8022ece:	2000      	movs	r0, #0
 8022ed0:	4606      	mov	r6, r0
 8022ed2:	e710      	b.n	8022cf6 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 8022ed4:	2000      	movs	r0, #0
 8022ed6:	e70e      	b.n	8022cf6 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 8022ed8:	4620      	mov	r0, r4
 8022eda:	e70c      	b.n	8022cf6 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 8022edc:	2500      	movs	r5, #0
 8022ede:	e71e      	b.n	8022d1e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x80>
 8022ee0:	2200      	movs	r2, #0
 8022ee2:	4615      	mov	r5, r2
 8022ee4:	e729      	b.n	8022d3a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 8022ee6:	4662      	mov	r2, ip
 8022ee8:	4665      	mov	r5, ip
 8022eea:	e726      	b.n	8022d3a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 8022eec:	2200      	movs	r2, #0
 8022eee:	e724      	b.n	8022d3a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 8022ef0:	4622      	mov	r2, r4
 8022ef2:	e722      	b.n	8022d3a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>

08022ef4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022ef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022ef8:	b09b      	sub	sp, #108	; 0x6c
 8022efa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8022efe:	9218      	str	r2, [sp, #96]	; 0x60
 8022f00:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8022f02:	9019      	str	r0, [sp, #100]	; 0x64
 8022f04:	9116      	str	r1, [sp, #88]	; 0x58
 8022f06:	6850      	ldr	r0, [r2, #4]
 8022f08:	9307      	str	r3, [sp, #28]
 8022f0a:	6812      	ldr	r2, [r2, #0]
 8022f0c:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8022f0e:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8022f12:	fb00 1303 	mla	r3, r0, r3, r1
 8022f16:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022f1a:	18d3      	adds	r3, r2, r3
 8022f1c:	930a      	str	r3, [sp, #40]	; 0x28
 8022f1e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022f20:	681b      	ldr	r3, [r3, #0]
 8022f22:	930f      	str	r3, [sp, #60]	; 0x3c
 8022f24:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022f26:	685e      	ldr	r6, [r3, #4]
 8022f28:	3604      	adds	r6, #4
 8022f2a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8022f2c:	2b00      	cmp	r3, #0
 8022f2e:	dc03      	bgt.n	8022f38 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 8022f30:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8022f32:	2b00      	cmp	r3, #0
 8022f34:	f340 834f 	ble.w	80235d6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 8022f38:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022f3a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022f3e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8022f42:	1e48      	subs	r0, r1, #1
 8022f44:	1e57      	subs	r7, r2, #1
 8022f46:	9b07      	ldr	r3, [sp, #28]
 8022f48:	2b00      	cmp	r3, #0
 8022f4a:	f340 8178 	ble.w	802323e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8022f4e:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8022f50:	142b      	asrs	r3, r5, #16
 8022f52:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8022f56:	d406      	bmi.n	8022f66 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8022f58:	4584      	cmp	ip, r0
 8022f5a:	da04      	bge.n	8022f66 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8022f5c:	2b00      	cmp	r3, #0
 8022f5e:	db02      	blt.n	8022f66 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8022f60:	42bb      	cmp	r3, r7
 8022f62:	f2c0 816d 	blt.w	8023240 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 8022f66:	f11c 0c01 	adds.w	ip, ip, #1
 8022f6a:	f100 815b 	bmi.w	8023224 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8022f6e:	4561      	cmp	r1, ip
 8022f70:	f2c0 8158 	blt.w	8023224 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8022f74:	3301      	adds	r3, #1
 8022f76:	f100 8155 	bmi.w	8023224 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8022f7a:	429a      	cmp	r2, r3
 8022f7c:	f2c0 8152 	blt.w	8023224 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8022f80:	9b07      	ldr	r3, [sp, #28]
 8022f82:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8022f84:	9317      	str	r3, [sp, #92]	; 0x5c
 8022f86:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8022f88:	2b00      	cmp	r3, #0
 8022f8a:	f340 8178 	ble.w	802327e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8022f8e:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8022f90:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8022f94:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8022f98:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8022f9c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022f9e:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 8022fa2:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8022fa4:	141b      	asrs	r3, r3, #16
 8022fa6:	f100 81ba 	bmi.w	802331e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8022faa:	f101 38ff 	add.w	r8, r1, #4294967295
 8022fae:	4543      	cmp	r3, r8
 8022fb0:	f280 81b5 	bge.w	802331e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8022fb4:	f1bc 0f00 	cmp.w	ip, #0
 8022fb8:	f2c0 81b1 	blt.w	802331e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8022fbc:	f10e 38ff 	add.w	r8, lr, #4294967295
 8022fc0:	45c4      	cmp	ip, r8
 8022fc2:	f280 81ac 	bge.w	802331e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8022fc6:	b209      	sxth	r1, r1
 8022fc8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8022fca:	fb0c 3301 	mla	r3, ip, r1, r3
 8022fce:	eb04 0803 	add.w	r8, r4, r3
 8022fd2:	5ce3      	ldrb	r3, [r4, r3]
 8022fd4:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8022fd8:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8022fdc:	2a00      	cmp	r2, #0
 8022fde:	f000 8193 	beq.w	8023308 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x414>
 8022fe2:	f898 c001 	ldrb.w	ip, [r8, #1]
 8022fe6:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8022fea:	940b      	str	r4, [sp, #44]	; 0x2c
 8022fec:	0e24      	lsrs	r4, r4, #24
 8022fee:	9412      	str	r4, [sp, #72]	; 0x48
 8022ff0:	b178      	cbz	r0, 8023012 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8022ff2:	eb08 0c01 	add.w	ip, r8, r1
 8022ff6:	f818 1001 	ldrb.w	r1, [r8, r1]
 8022ffa:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8022ffe:	9108      	str	r1, [sp, #32]
 8023000:	0e09      	lsrs	r1, r1, #24
 8023002:	9110      	str	r1, [sp, #64]	; 0x40
 8023004:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8023008:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802300c:	910c      	str	r1, [sp, #48]	; 0x30
 802300e:	0e09      	lsrs	r1, r1, #24
 8023010:	9113      	str	r1, [sp, #76]	; 0x4c
 8023012:	b292      	uxth	r2, r2
 8023014:	9912      	ldr	r1, [sp, #72]	; 0x48
 8023016:	b280      	uxth	r0, r0
 8023018:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802301a:	fb02 f900 	mul.w	r9, r2, r0
 802301e:	0112      	lsls	r2, r2, #4
 8023020:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8023024:	eba2 0809 	sub.w	r8, r2, r9
 8023028:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 802302c:	b280      	uxth	r0, r0
 802302e:	fa1f f888 	uxth.w	r8, r8
 8023032:	1a12      	subs	r2, r2, r0
 8023034:	fb08 f101 	mul.w	r1, r8, r1
 8023038:	b292      	uxth	r2, r2
 802303a:	fb02 110e 	mla	r1, r2, lr, r1
 802303e:	fb00 1104 	mla	r1, r0, r4, r1
 8023042:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8023044:	fb09 1104 	mla	r1, r9, r4, r1
 8023048:	f3c1 2107 	ubfx	r1, r1, #8, #8
 802304c:	2900      	cmp	r1, #0
 802304e:	f000 80de 	beq.w	802320e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8023052:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8023056:	d01b      	beq.n	8023090 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 8023058:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 802305c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023060:	fb0e fa0a 	mul.w	sl, lr, sl
 8023064:	fb0e fe03 	mul.w	lr, lr, r3
 8023068:	ea4f 231a 	mov.w	r3, sl, lsr #8
 802306c:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8023070:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8023074:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023078:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 802307c:	4453      	add	r3, sl
 802307e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023082:	0a1b      	lsrs	r3, r3, #8
 8023084:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8023088:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802308c:	ea43 030c 	orr.w	r3, r3, ip
 8023090:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8023092:	2cff      	cmp	r4, #255	; 0xff
 8023094:	d021      	beq.n	80230da <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8023096:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8023098:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 802309c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802309e:	fb04 fb0b 	mul.w	fp, r4, fp
 80230a2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80230a4:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80230a8:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80230aa:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80230ae:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80230b2:	fb04 fa0a 	mul.w	sl, r4, sl
 80230b6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80230ba:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80230be:	44de      	add	lr, fp
 80230c0:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80230c4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80230c8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80230cc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80230d0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80230d4:	ea4e 040a 	orr.w	r4, lr, sl
 80230d8:	940b      	str	r4, [sp, #44]	; 0x2c
 80230da:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80230dc:	2cff      	cmp	r4, #255	; 0xff
 80230de:	d021      	beq.n	8023124 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 80230e0:	9c08      	ldr	r4, [sp, #32]
 80230e2:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80230e6:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80230e8:	fb04 fb0b 	mul.w	fp, r4, fp
 80230ec:	9c08      	ldr	r4, [sp, #32]
 80230ee:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80230f2:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80230f4:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80230f8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80230fc:	fb04 fa0a 	mul.w	sl, r4, sl
 8023100:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023104:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8023108:	44de      	add	lr, fp
 802310a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802310e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023112:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023116:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802311a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802311e:	ea4e 040a 	orr.w	r4, lr, sl
 8023122:	9408      	str	r4, [sp, #32]
 8023124:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8023126:	2cff      	cmp	r4, #255	; 0xff
 8023128:	d021      	beq.n	802316e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 802312a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802312c:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8023130:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8023132:	fb04 fb0b 	mul.w	fp, r4, fp
 8023136:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8023138:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802313c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802313e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8023142:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8023146:	fb04 fa0a 	mul.w	sl, r4, sl
 802314a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802314e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8023152:	44de      	add	lr, fp
 8023154:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023158:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802315c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023160:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023164:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023168:	ea4e 040a 	orr.w	r4, lr, sl
 802316c:	940c      	str	r4, [sp, #48]	; 0x30
 802316e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8023170:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8023174:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023178:	43c9      	mvns	r1, r1
 802317a:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802317e:	9c08      	ldr	r4, [sp, #32]
 8023180:	b2c9      	uxtb	r1, r1
 8023182:	fb08 fc0c 	mul.w	ip, r8, ip
 8023186:	fb02 cc0e 	mla	ip, r2, lr, ip
 802318a:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 802318e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8023190:	fb00 cc0e 	mla	ip, r0, lr, ip
 8023194:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8023198:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802319a:	fb09 cc0e 	mla	ip, r9, lr, ip
 802319e:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 80231a2:	fb08 f80e 	mul.w	r8, r8, lr
 80231a6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80231aa:	fb02 8303 	mla	r3, r2, r3, r8
 80231ae:	9a08      	ldr	r2, [sp, #32]
 80231b0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80231b4:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 80231b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80231ba:	fb00 330a 	mla	r3, r0, sl, r3
 80231be:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 80231c2:	fb09 3900 	mla	r9, r9, r0, r3
 80231c6:	783b      	ldrb	r3, [r7, #0]
 80231c8:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80231cc:	fb03 f201 	mul.w	r2, r3, r1
 80231d0:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80231d4:	1c53      	adds	r3, r2, #1
 80231d6:	ea4c 0c09 	orr.w	ip, ip, r9
 80231da:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80231de:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 80231e2:	703b      	strb	r3, [r7, #0]
 80231e4:	787b      	ldrb	r3, [r7, #1]
 80231e6:	434b      	muls	r3, r1
 80231e8:	1c5a      	adds	r2, r3, #1
 80231ea:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80231ee:	ea4f 231c 	mov.w	r3, ip, lsr #8
 80231f2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80231f6:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80231fa:	707b      	strb	r3, [r7, #1]
 80231fc:	78bb      	ldrb	r3, [r7, #2]
 80231fe:	4359      	muls	r1, r3
 8023200:	1c4b      	adds	r3, r1, #1
 8023202:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8023206:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 802320a:	f887 c002 	strb.w	ip, [r7, #2]
 802320e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8023210:	3703      	adds	r7, #3
 8023212:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8023214:	441a      	add	r2, r3
 8023216:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023218:	441d      	add	r5, r3
 802321a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802321c:	9225      	str	r2, [sp, #148]	; 0x94
 802321e:	3b01      	subs	r3, #1
 8023220:	9317      	str	r3, [sp, #92]	; 0x5c
 8023222:	e6b0      	b.n	8022f86 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8023224:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8023226:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8023228:	441c      	add	r4, r3
 802322a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802322c:	441d      	add	r5, r3
 802322e:	9b07      	ldr	r3, [sp, #28]
 8023230:	9425      	str	r4, [sp, #148]	; 0x94
 8023232:	3b01      	subs	r3, #1
 8023234:	9307      	str	r3, [sp, #28]
 8023236:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023238:	3303      	adds	r3, #3
 802323a:	930a      	str	r3, [sp, #40]	; 0x28
 802323c:	e683      	b.n	8022f46 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 802323e:	d026      	beq.n	802328e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
 8023240:	9b07      	ldr	r3, [sp, #28]
 8023242:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8023244:	3b01      	subs	r3, #1
 8023246:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8023248:	fb00 4003 	mla	r0, r0, r3, r4
 802324c:	1400      	asrs	r0, r0, #16
 802324e:	f53f ae97 	bmi.w	8022f80 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8023252:	3901      	subs	r1, #1
 8023254:	4288      	cmp	r0, r1
 8023256:	f6bf ae93 	bge.w	8022f80 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 802325a:	9928      	ldr	r1, [sp, #160]	; 0xa0
 802325c:	fb01 5303 	mla	r3, r1, r3, r5
 8023260:	141b      	asrs	r3, r3, #16
 8023262:	f53f ae8d 	bmi.w	8022f80 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8023266:	3a01      	subs	r2, #1
 8023268:	4293      	cmp	r3, r2
 802326a:	f6bf ae89 	bge.w	8022f80 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 802326e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023270:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8023274:	f103 0e03 	add.w	lr, r3, #3
 8023278:	f1bb 0f00 	cmp.w	fp, #0
 802327c:	dc6d      	bgt.n	802335a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x466>
 802327e:	9b07      	ldr	r3, [sp, #28]
 8023280:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8023284:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023286:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802328a:	4423      	add	r3, r4
 802328c:	930a      	str	r3, [sp, #40]	; 0x28
 802328e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8023290:	2b00      	cmp	r3, #0
 8023292:	f340 81a0 	ble.w	80235d6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 8023296:	ee30 0a04 	vadd.f32	s0, s0, s8
 802329a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802329c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80232a0:	eeb0 6a62 	vmov.f32	s12, s5
 80232a4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80232a8:	ee31 1a05 	vadd.f32	s2, s2, s10
 80232ac:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80232b0:	ed8d 6a25 	vstr	s12, [sp, #148]	; 0x94
 80232b4:	eeb0 6a43 	vmov.f32	s12, s6
 80232b8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80232bc:	ee16 5a10 	vmov	r5, s12
 80232c0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80232c4:	ee61 7a27 	vmul.f32	s15, s2, s15
 80232c8:	ee77 2a62 	vsub.f32	s5, s14, s5
 80232cc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80232d0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80232d4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80232d8:	ee12 2a90 	vmov	r2, s5
 80232dc:	eef0 2a47 	vmov.f32	s5, s14
 80232e0:	fb92 f3f3 	sdiv	r3, r2, r3
 80232e4:	ee13 2a10 	vmov	r2, s6
 80232e8:	9327      	str	r3, [sp, #156]	; 0x9c
 80232ea:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80232ec:	eeb0 3a67 	vmov.f32	s6, s15
 80232f0:	fb92 f3f3 	sdiv	r3, r2, r3
 80232f4:	9328      	str	r3, [sp, #160]	; 0xa0
 80232f6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80232f8:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80232fa:	3b01      	subs	r3, #1
 80232fc:	9316      	str	r3, [sp, #88]	; 0x58
 80232fe:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023300:	bf08      	it	eq
 8023302:	4613      	moveq	r3, r2
 8023304:	9307      	str	r3, [sp, #28]
 8023306:	e610      	b.n	8022f2a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8023308:	2800      	cmp	r0, #0
 802330a:	f43f ae82 	beq.w	8023012 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 802330e:	f818 1001 	ldrb.w	r1, [r8, r1]
 8023312:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8023316:	9108      	str	r1, [sp, #32]
 8023318:	0e09      	lsrs	r1, r1, #24
 802331a:	9110      	str	r1, [sp, #64]	; 0x40
 802331c:	e679      	b.n	8023012 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 802331e:	f113 0801 	adds.w	r8, r3, #1
 8023322:	f53f af74 	bmi.w	802320e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8023326:	4541      	cmp	r1, r8
 8023328:	f6ff af71 	blt.w	802320e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 802332c:	f11c 0801 	adds.w	r8, ip, #1
 8023330:	f53f af6d 	bmi.w	802320e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8023334:	45c6      	cmp	lr, r8
 8023336:	f6ff af6a 	blt.w	802320e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 802333a:	b209      	sxth	r1, r1
 802333c:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8023340:	fa0f f38e 	sxth.w	r3, lr
 8023344:	9100      	str	r1, [sp, #0]
 8023346:	4639      	mov	r1, r7
 8023348:	9301      	str	r3, [sp, #4]
 802334a:	4633      	mov	r3, r6
 802334c:	e9cd 2004 	strd	r2, r0, [sp, #16]
 8023350:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8023352:	9819      	ldr	r0, [sp, #100]	; 0x64
 8023354:	f7ff fca3 	bl	8022c9e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 8023358:	e759      	b.n	802320e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 802335a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 802335c:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8023360:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8023362:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8023366:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023368:	1427      	asrs	r7, r4, #16
 802336a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 802336c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023370:	142b      	asrs	r3, r5, #16
 8023372:	fb01 7303 	mla	r3, r1, r3, r7
 8023376:	18e7      	adds	r7, r4, r3
 8023378:	5ce3      	ldrb	r3, [r4, r3]
 802337a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 802337e:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8023382:	2a00      	cmp	r2, #0
 8023384:	f000 811d 	beq.w	80235c2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ce>
 8023388:	f897 8001 	ldrb.w	r8, [r7, #1]
 802338c:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 8023390:	940d      	str	r4, [sp, #52]	; 0x34
 8023392:	0e24      	lsrs	r4, r4, #24
 8023394:	9414      	str	r4, [sp, #80]	; 0x50
 8023396:	b170      	cbz	r0, 80233b6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8023398:	eb07 0801 	add.w	r8, r7, r1
 802339c:	5c79      	ldrb	r1, [r7, r1]
 802339e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80233a2:	9109      	str	r1, [sp, #36]	; 0x24
 80233a4:	0e09      	lsrs	r1, r1, #24
 80233a6:	9111      	str	r1, [sp, #68]	; 0x44
 80233a8:	f898 1001 	ldrb.w	r1, [r8, #1]
 80233ac:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80233b0:	910e      	str	r1, [sp, #56]	; 0x38
 80233b2:	0e09      	lsrs	r1, r1, #24
 80233b4:	9115      	str	r1, [sp, #84]	; 0x54
 80233b6:	b292      	uxth	r2, r2
 80233b8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80233ba:	b280      	uxth	r0, r0
 80233bc:	fb02 f900 	mul.w	r9, r2, r0
 80233c0:	0112      	lsls	r2, r2, #4
 80233c2:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80233c6:	eba2 0809 	sub.w	r8, r2, r9
 80233ca:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 80233ce:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80233d0:	b280      	uxth	r0, r0
 80233d2:	fa1f f888 	uxth.w	r8, r8
 80233d6:	1a09      	subs	r1, r1, r0
 80233d8:	fb08 f202 	mul.w	r2, r8, r2
 80233dc:	b289      	uxth	r1, r1
 80233de:	fb01 220c 	mla	r2, r1, ip, r2
 80233e2:	fb00 2204 	mla	r2, r0, r4, r2
 80233e6:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80233e8:	fb09 2204 	mla	r2, r9, r4, r2
 80233ec:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80233f0:	2a00      	cmp	r2, #0
 80233f2:	f000 80db 	beq.w	80235ac <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 80233f6:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80233fa:	d019      	beq.n	8023430 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53c>
 80233fc:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8023400:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023404:	fb0c fa0a 	mul.w	sl, ip, sl
 8023408:	fb0c fc03 	mul.w	ip, ip, r3
 802340c:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8023410:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8023414:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8023418:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802341c:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8023420:	4453      	add	r3, sl
 8023422:	0a3f      	lsrs	r7, r7, #8
 8023424:	0a1b      	lsrs	r3, r3, #8
 8023426:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802342a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802342e:	433b      	orrs	r3, r7
 8023430:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8023432:	2cff      	cmp	r4, #255	; 0xff
 8023434:	d020      	beq.n	8023478 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x584>
 8023436:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8023438:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802343c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802343e:	4367      	muls	r7, r4
 8023440:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8023442:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8023446:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802344a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802344c:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8023450:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023454:	fb04 fa0a 	mul.w	sl, r4, sl
 8023458:	44bc      	add	ip, r7
 802345a:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802345e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023462:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8023466:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802346a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802346e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023472:	ea4c 040a 	orr.w	r4, ip, sl
 8023476:	940d      	str	r4, [sp, #52]	; 0x34
 8023478:	9c11      	ldr	r4, [sp, #68]	; 0x44
 802347a:	2cff      	cmp	r4, #255	; 0xff
 802347c:	d020      	beq.n	80234c0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5cc>
 802347e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8023480:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8023484:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8023486:	4367      	muls	r7, r4
 8023488:	9c09      	ldr	r4, [sp, #36]	; 0x24
 802348a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802348e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8023492:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8023494:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8023498:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802349c:	fb04 fa0a 	mul.w	sl, r4, sl
 80234a0:	44bc      	add	ip, r7
 80234a2:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80234a6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80234aa:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80234ae:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80234b2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80234b6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80234ba:	ea4c 040a 	orr.w	r4, ip, sl
 80234be:	9409      	str	r4, [sp, #36]	; 0x24
 80234c0:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80234c2:	2cff      	cmp	r4, #255	; 0xff
 80234c4:	d020      	beq.n	8023508 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x614>
 80234c6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80234c8:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80234cc:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80234ce:	4367      	muls	r7, r4
 80234d0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80234d2:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80234d6:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80234da:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80234dc:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80234e0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80234e4:	fb04 fa0a 	mul.w	sl, r4, sl
 80234e8:	44bc      	add	ip, r7
 80234ea:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80234ee:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80234f2:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80234f6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80234fa:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80234fe:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023502:	ea4c 040a 	orr.w	r4, ip, sl
 8023506:	940e      	str	r4, [sp, #56]	; 0x38
 8023508:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802350a:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 802350e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023512:	43d2      	mvns	r2, r2
 8023514:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8023518:	9c09      	ldr	r4, [sp, #36]	; 0x24
 802351a:	b2d2      	uxtb	r2, r2
 802351c:	fb08 f707 	mul.w	r7, r8, r7
 8023520:	fb01 770c 	mla	r7, r1, ip, r7
 8023524:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8023528:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802352a:	fb00 770c 	mla	r7, r0, ip, r7
 802352e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8023532:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8023534:	fb09 770c 	mla	r7, r9, ip, r7
 8023538:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 802353c:	fb08 f80c 	mul.w	r8, r8, ip
 8023540:	0a3f      	lsrs	r7, r7, #8
 8023542:	fb01 8303 	mla	r3, r1, r3, r8
 8023546:	9909      	ldr	r1, [sp, #36]	; 0x24
 8023548:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802354c:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8023550:	990e      	ldr	r1, [sp, #56]	; 0x38
 8023552:	fb00 330a 	mla	r3, r0, sl, r3
 8023556:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 802355a:	fb09 3c0c 	mla	ip, r9, ip, r3
 802355e:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8023562:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023566:	fb03 f102 	mul.w	r1, r3, r2
 802356a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802356e:	1c4b      	adds	r3, r1, #1
 8023570:	ea47 070c 	orr.w	r7, r7, ip
 8023574:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8023578:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 802357c:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8023580:	f81e 3c02 	ldrb.w	r3, [lr, #-2]
 8023584:	4353      	muls	r3, r2
 8023586:	1c59      	adds	r1, r3, #1
 8023588:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 802358c:	0a3b      	lsrs	r3, r7, #8
 802358e:	0c3f      	lsrs	r7, r7, #16
 8023590:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8023594:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8023598:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 802359c:	435a      	muls	r2, r3
 802359e:	1c53      	adds	r3, r2, #1
 80235a0:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 80235a4:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 80235a8:	f80e 7c01 	strb.w	r7, [lr, #-1]
 80235ac:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80235ae:	f10e 0e03 	add.w	lr, lr, #3
 80235b2:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80235b4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80235b8:	441a      	add	r2, r3
 80235ba:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80235bc:	9225      	str	r2, [sp, #148]	; 0x94
 80235be:	441d      	add	r5, r3
 80235c0:	e65a      	b.n	8023278 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 80235c2:	2800      	cmp	r0, #0
 80235c4:	f43f aef7 	beq.w	80233b6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 80235c8:	5c79      	ldrb	r1, [r7, r1]
 80235ca:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80235ce:	9109      	str	r1, [sp, #36]	; 0x24
 80235d0:	0e09      	lsrs	r1, r1, #24
 80235d2:	9111      	str	r1, [sp, #68]	; 0x44
 80235d4:	e6ef      	b.n	80233b6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 80235d6:	b01b      	add	sp, #108	; 0x6c
 80235d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080235dc <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 80235dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80235e0:	b08d      	sub	sp, #52	; 0x34
 80235e2:	468b      	mov	fp, r1
 80235e4:	e9dd 5c17 	ldrd	r5, ip, [sp, #92]	; 0x5c
 80235e8:	f89d 106c 	ldrb.w	r1, [sp, #108]	; 0x6c
 80235ec:	fb0c 5703 	mla	r7, ip, r3, r5
 80235f0:	f1bc 0f00 	cmp.w	ip, #0
 80235f4:	910b      	str	r1, [sp, #44]	; 0x2c
 80235f6:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80235fa:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 80235fe:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
 8023602:	f89d a068 	ldrb.w	sl, [sp, #104]	; 0x68
 8023606:	eb02 0607 	add.w	r6, r2, r7
 802360a:	f89b 4000 	ldrb.w	r4, [fp]
 802360e:	f89b 0001 	ldrb.w	r0, [fp, #1]
 8023612:	f89b 1002 	ldrb.w	r1, [fp, #2]
 8023616:	f2c0 80c1 	blt.w	802379c <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 802361a:	45e6      	cmp	lr, ip
 802361c:	f340 80be 	ble.w	802379c <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 8023620:	2d00      	cmp	r5, #0
 8023622:	f2c0 80b7 	blt.w	8023794 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 8023626:	42ab      	cmp	r3, r5
 8023628:	f340 80b4 	ble.w	8023794 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 802362c:	5dd2      	ldrb	r2, [r2, r7]
 802362e:	9205      	str	r2, [sp, #20]
 8023630:	7872      	ldrb	r2, [r6, #1]
 8023632:	9206      	str	r2, [sp, #24]
 8023634:	78b2      	ldrb	r2, [r6, #2]
 8023636:	9207      	str	r2, [sp, #28]
 8023638:	1c6a      	adds	r2, r5, #1
 802363a:	f100 80b6 	bmi.w	80237aa <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 802363e:	4293      	cmp	r3, r2
 8023640:	f340 80b3 	ble.w	80237aa <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 8023644:	f1b8 0f00 	cmp.w	r8, #0
 8023648:	f000 80af 	beq.w	80237aa <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 802364c:	78f2      	ldrb	r2, [r6, #3]
 802364e:	9201      	str	r2, [sp, #4]
 8023650:	7932      	ldrb	r2, [r6, #4]
 8023652:	9202      	str	r2, [sp, #8]
 8023654:	7972      	ldrb	r2, [r6, #5]
 8023656:	9203      	str	r2, [sp, #12]
 8023658:	f11c 0c01 	adds.w	ip, ip, #1
 802365c:	f100 80ad 	bmi.w	80237ba <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 8023660:	45e6      	cmp	lr, ip
 8023662:	f340 80aa 	ble.w	80237ba <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 8023666:	f1ba 0f00 	cmp.w	sl, #0
 802366a:	f000 80a6 	beq.w	80237ba <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 802366e:	2d00      	cmp	r5, #0
 8023670:	f2c0 809f 	blt.w	80237b2 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 8023674:	42ab      	cmp	r3, r5
 8023676:	f340 809c 	ble.w	80237b2 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 802367a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 802367e:	f816 9002 	ldrb.w	r9, [r6, r2]
 8023682:	2203      	movs	r2, #3
 8023684:	fb03 6c02 	mla	ip, r3, r2, r6
 8023688:	f89c 7001 	ldrb.w	r7, [ip, #1]
 802368c:	f89c e002 	ldrb.w	lr, [ip, #2]
 8023690:	9704      	str	r7, [sp, #16]
 8023692:	3501      	adds	r5, #1
 8023694:	f100 8098 	bmi.w	80237c8 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 8023698:	42ab      	cmp	r3, r5
 802369a:	f340 8095 	ble.w	80237c8 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 802369e:	f1b8 0f00 	cmp.w	r8, #0
 80236a2:	f000 8091 	beq.w	80237c8 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 80236a6:	f04f 0c03 	mov.w	ip, #3
 80236aa:	fb13 c20c 	smlabb	r2, r3, ip, ip
 80236ae:	5cb5      	ldrb	r5, [r6, r2]
 80236b0:	fb03 620c 	mla	r2, r3, ip, r6
 80236b4:	fb03 630c 	mla	r3, r3, ip, r6
 80236b8:	7912      	ldrb	r2, [r2, #4]
 80236ba:	795e      	ldrb	r6, [r3, #5]
 80236bc:	fa1f f388 	uxth.w	r3, r8
 80236c0:	fa1f fc8a 	uxth.w	ip, sl
 80236c4:	fb03 f70c 	mul.w	r7, r3, ip
 80236c8:	011b      	lsls	r3, r3, #4
 80236ca:	9708      	str	r7, [sp, #32]
 80236cc:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 80236d0:	f5c3 7a80 	rsb	sl, r3, #256	; 0x100
 80236d4:	1bdb      	subs	r3, r3, r7
 80236d6:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
 80236da:	fa1f fc8c 	uxth.w	ip, ip
 80236de:	b29b      	uxth	r3, r3
 80236e0:	9709      	str	r7, [sp, #36]	; 0x24
 80236e2:	ebaa 0a0c 	sub.w	sl, sl, ip
 80236e6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80236e8:	930a      	str	r3, [sp, #40]	; 0x28
 80236ea:	fa1f fa8a 	uxth.w	sl, sl
 80236ee:	ea6f 0807 	mvn.w	r8, r7
 80236f2:	9f01      	ldr	r7, [sp, #4]
 80236f4:	435f      	muls	r7, r3
 80236f6:	9b05      	ldr	r3, [sp, #20]
 80236f8:	fa5f f888 	uxtb.w	r8, r8
 80236fc:	fb0a 7703 	mla	r7, sl, r3, r7
 8023700:	9b08      	ldr	r3, [sp, #32]
 8023702:	fb14 f408 	smulbb	r4, r4, r8
 8023706:	fb0c 7709 	mla	r7, ip, r9, r7
 802370a:	fb10 f008 	smulbb	r0, r0, r8
 802370e:	fb11 f108 	smulbb	r1, r1, r8
 8023712:	fb03 7705 	mla	r7, r3, r5, r7
 8023716:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023718:	f3c7 2707 	ubfx	r7, r7, #8, #8
 802371c:	fb07 4703 	mla	r7, r7, r3, r4
 8023720:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023722:	b2bf      	uxth	r7, r7
 8023724:	1c7c      	adds	r4, r7, #1
 8023726:	eb04 2417 	add.w	r4, r4, r7, lsr #8
 802372a:	1224      	asrs	r4, r4, #8
 802372c:	f88b 4000 	strb.w	r4, [fp]
 8023730:	9c02      	ldr	r4, [sp, #8]
 8023732:	435c      	muls	r4, r3
 8023734:	9b06      	ldr	r3, [sp, #24]
 8023736:	fb0a 4403 	mla	r4, sl, r3, r4
 802373a:	9b04      	ldr	r3, [sp, #16]
 802373c:	fb0c 4403 	mla	r4, ip, r3, r4
 8023740:	9b08      	ldr	r3, [sp, #32]
 8023742:	fb03 4402 	mla	r4, r3, r2, r4
 8023746:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023748:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802374a:	f3c4 2407 	ubfx	r4, r4, #8, #8
 802374e:	fb04 0403 	mla	r4, r4, r3, r0
 8023752:	9b03      	ldr	r3, [sp, #12]
 8023754:	435a      	muls	r2, r3
 8023756:	b2a4      	uxth	r4, r4
 8023758:	4613      	mov	r3, r2
 802375a:	9a07      	ldr	r2, [sp, #28]
 802375c:	1c60      	adds	r0, r4, #1
 802375e:	fb0a 3a02 	mla	sl, sl, r2, r3
 8023762:	9b08      	ldr	r3, [sp, #32]
 8023764:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 8023768:	fb0c ac0e 	mla	ip, ip, lr, sl
 802376c:	1224      	asrs	r4, r4, #8
 802376e:	fb03 c606 	mla	r6, r3, r6, ip
 8023772:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023774:	f88b 4001 	strb.w	r4, [fp, #1]
 8023778:	f3c6 2607 	ubfx	r6, r6, #8, #8
 802377c:	fb06 1103 	mla	r1, r6, r3, r1
 8023780:	b289      	uxth	r1, r1
 8023782:	1c4e      	adds	r6, r1, #1
 8023784:	eb06 2111 	add.w	r1, r6, r1, lsr #8
 8023788:	1209      	asrs	r1, r1, #8
 802378a:	f88b 1002 	strb.w	r1, [fp, #2]
 802378e:	b00d      	add	sp, #52	; 0x34
 8023790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023794:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8023798:	9405      	str	r4, [sp, #20]
 802379a:	e74d      	b.n	8023638 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x5c>
 802379c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80237a0:	9401      	str	r4, [sp, #4]
 80237a2:	9405      	str	r4, [sp, #20]
 80237a4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80237a8:	e756      	b.n	8023658 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 80237aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80237ae:	9401      	str	r4, [sp, #4]
 80237b0:	e752      	b.n	8023658 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 80237b2:	468e      	mov	lr, r1
 80237b4:	9004      	str	r0, [sp, #16]
 80237b6:	46a1      	mov	r9, r4
 80237b8:	e76b      	b.n	8023692 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xb6>
 80237ba:	460e      	mov	r6, r1
 80237bc:	4602      	mov	r2, r0
 80237be:	4625      	mov	r5, r4
 80237c0:	468e      	mov	lr, r1
 80237c2:	9004      	str	r0, [sp, #16]
 80237c4:	46a1      	mov	r9, r4
 80237c6:	e779      	b.n	80236bc <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>
 80237c8:	460e      	mov	r6, r1
 80237ca:	4602      	mov	r2, r0
 80237cc:	4625      	mov	r5, r4
 80237ce:	e775      	b.n	80236bc <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>

080237d0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80237d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80237d4:	b09f      	sub	sp, #124	; 0x7c
 80237d6:	920e      	str	r2, [sp, #56]	; 0x38
 80237d8:	9307      	str	r3, [sp, #28]
 80237da:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80237dc:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 80237e0:	901d      	str	r0, [sp, #116]	; 0x74
 80237e2:	930c      	str	r3, [sp, #48]	; 0x30
 80237e4:	6850      	ldr	r0, [r2, #4]
 80237e6:	910b      	str	r1, [sp, #44]	; 0x2c
 80237e8:	6812      	ldr	r2, [r2, #0]
 80237ea:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 80237ee:	e9dd a829 	ldrd	sl, r8, [sp, #164]	; 0xa4
 80237f2:	fb00 1303 	mla	r3, r0, r3, r1
 80237f6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80237fa:	18d3      	adds	r3, r2, r3
 80237fc:	9308      	str	r3, [sp, #32]
 80237fe:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8023800:	681b      	ldr	r3, [r3, #0]
 8023802:	930a      	str	r3, [sp, #40]	; 0x28
 8023804:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023806:	43db      	mvns	r3, r3
 8023808:	b2db      	uxtb	r3, r3
 802380a:	9309      	str	r3, [sp, #36]	; 0x24
 802380c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802380e:	2b00      	cmp	r3, #0
 8023810:	dc03      	bgt.n	802381a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8023812:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023814:	2b00      	cmp	r3, #0
 8023816:	f340 81f5 	ble.w	8023c04 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 802381a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802381c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023820:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8023824:	1e48      	subs	r0, r1, #1
 8023826:	1e54      	subs	r4, r2, #1
 8023828:	9b07      	ldr	r3, [sp, #28]
 802382a:	2b00      	cmp	r3, #0
 802382c:	f340 80d5 	ble.w	80239da <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 8023830:	ea5f 452a 	movs.w	r5, sl, asr #16
 8023834:	ea4f 4328 	mov.w	r3, r8, asr #16
 8023838:	d406      	bmi.n	8023848 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802383a:	4285      	cmp	r5, r0
 802383c:	da04      	bge.n	8023848 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802383e:	2b00      	cmp	r3, #0
 8023840:	db02      	blt.n	8023848 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8023842:	42a3      	cmp	r3, r4
 8023844:	f2c0 80ca 	blt.w	80239dc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8023848:	3501      	adds	r5, #1
 802384a:	f100 80bb 	bmi.w	80239c4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 802384e:	42a9      	cmp	r1, r5
 8023850:	f2c0 80b8 	blt.w	80239c4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 8023854:	3301      	adds	r3, #1
 8023856:	f100 80b5 	bmi.w	80239c4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 802385a:	429a      	cmp	r2, r3
 802385c:	f2c0 80b2 	blt.w	80239c4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 8023860:	9b07      	ldr	r3, [sp, #28]
 8023862:	9d08      	ldr	r5, [sp, #32]
 8023864:	930d      	str	r3, [sp, #52]	; 0x34
 8023866:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023868:	2b00      	cmp	r3, #0
 802386a:	f340 80d6 	ble.w	8023a1a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24a>
 802386e:	9830      	ldr	r0, [sp, #192]	; 0xc0
 8023870:	ea4f 4428 	mov.w	r4, r8, asr #16
 8023874:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8023876:	f3ca 3203 	ubfx	r2, sl, #12, #4
 802387a:	68c6      	ldr	r6, [r0, #12]
 802387c:	ea5f 402a 	movs.w	r0, sl, asr #16
 8023880:	f3c8 3103 	ubfx	r1, r8, #12, #4
 8023884:	689b      	ldr	r3, [r3, #8]
 8023886:	f100 810f 	bmi.w	8023aa8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 802388a:	1e5f      	subs	r7, r3, #1
 802388c:	42b8      	cmp	r0, r7
 802388e:	f280 810b 	bge.w	8023aa8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8023892:	2c00      	cmp	r4, #0
 8023894:	f2c0 8108 	blt.w	8023aa8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8023898:	1e77      	subs	r7, r6, #1
 802389a:	42bc      	cmp	r4, r7
 802389c:	f280 8104 	bge.w	8023aa8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 80238a0:	b21b      	sxth	r3, r3
 80238a2:	fb04 0003 	mla	r0, r4, r3, r0
 80238a6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80238a8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80238ac:	1826      	adds	r6, r4, r0
 80238ae:	5c24      	ldrb	r4, [r4, r0]
 80238b0:	78b7      	ldrb	r7, [r6, #2]
 80238b2:	7870      	ldrb	r0, [r6, #1]
 80238b4:	970f      	str	r7, [sp, #60]	; 0x3c
 80238b6:	7977      	ldrb	r7, [r6, #5]
 80238b8:	f896 e003 	ldrb.w	lr, [r6, #3]
 80238bc:	f896 c004 	ldrb.w	ip, [r6, #4]
 80238c0:	9710      	str	r7, [sp, #64]	; 0x40
 80238c2:	b1c9      	cbz	r1, 80238f8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 80238c4:	f04f 0b03 	mov.w	fp, #3
 80238c8:	f06f 0904 	mvn.w	r9, #4
 80238cc:	3605      	adds	r6, #5
 80238ce:	fb13 930b 	smlabb	r3, r3, fp, r9
 80238d2:	eb06 0b03 	add.w	fp, r6, r3
 80238d6:	5cf3      	ldrb	r3, [r6, r3]
 80238d8:	9311      	str	r3, [sp, #68]	; 0x44
 80238da:	f89b 3001 	ldrb.w	r3, [fp, #1]
 80238de:	9313      	str	r3, [sp, #76]	; 0x4c
 80238e0:	f89b 3002 	ldrb.w	r3, [fp, #2]
 80238e4:	9315      	str	r3, [sp, #84]	; 0x54
 80238e6:	f89b 3003 	ldrb.w	r3, [fp, #3]
 80238ea:	9312      	str	r3, [sp, #72]	; 0x48
 80238ec:	f89b 3004 	ldrb.w	r3, [fp, #4]
 80238f0:	9314      	str	r3, [sp, #80]	; 0x50
 80238f2:	f89b 3005 	ldrb.w	r3, [fp, #5]
 80238f6:	9316      	str	r3, [sp, #88]	; 0x58
 80238f8:	b292      	uxth	r2, r2
 80238fa:	9f11      	ldr	r7, [sp, #68]	; 0x44
 80238fc:	b289      	uxth	r1, r1
 80238fe:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 8023902:	fb02 f601 	mul.w	r6, r2, r1
 8023906:	0112      	lsls	r2, r2, #4
 8023908:	ebc6 1101 	rsb	r1, r6, r1, lsl #4
 802390c:	f5c2 7980 	rsb	r9, r2, #256	; 0x100
 8023910:	1b92      	subs	r2, r2, r6
 8023912:	b289      	uxth	r1, r1
 8023914:	b292      	uxth	r2, r2
 8023916:	eba9 0901 	sub.w	r9, r9, r1
 802391a:	fb02 fe0e 	mul.w	lr, r2, lr
 802391e:	fa1f f989 	uxth.w	r9, r9
 8023922:	fb02 fc0c 	mul.w	ip, r2, ip
 8023926:	fb09 e404 	mla	r4, r9, r4, lr
 802392a:	f895 e000 	ldrb.w	lr, [r5]
 802392e:	fb09 c000 	mla	r0, r9, r0, ip
 8023932:	fb01 4407 	mla	r4, r1, r7, r4
 8023936:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8023938:	fb06 4407 	mla	r4, r6, r7, r4
 802393c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 802393e:	fb1e fe07 	smulbb	lr, lr, r7
 8023942:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8023946:	fb04 e403 	mla	r4, r4, r3, lr
 802394a:	b2a4      	uxth	r4, r4
 802394c:	f104 0e01 	add.w	lr, r4, #1
 8023950:	eb0e 2e14 	add.w	lr, lr, r4, lsr #8
 8023954:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8023956:	fb01 0004 	mla	r0, r1, r4, r0
 802395a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802395c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8023960:	fb06 0004 	mla	r0, r6, r4, r0
 8023964:	786c      	ldrb	r4, [r5, #1]
 8023966:	f885 e000 	strb.w	lr, [r5]
 802396a:	fb14 f407 	smulbb	r4, r4, r7
 802396e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8023972:	fb00 4003 	mla	r0, r0, r3, r4
 8023976:	b280      	uxth	r0, r0
 8023978:	1c44      	adds	r4, r0, #1
 802397a:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 802397e:	1200      	asrs	r0, r0, #8
 8023980:	7068      	strb	r0, [r5, #1]
 8023982:	9810      	ldr	r0, [sp, #64]	; 0x40
 8023984:	4342      	muls	r2, r0
 8023986:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8023988:	fb09 2200 	mla	r2, r9, r0, r2
 802398c:	9815      	ldr	r0, [sp, #84]	; 0x54
 802398e:	fb01 2100 	mla	r1, r1, r0, r2
 8023992:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8023994:	fb06 1602 	mla	r6, r6, r2, r1
 8023998:	78a9      	ldrb	r1, [r5, #2]
 802399a:	fb11 f107 	smulbb	r1, r1, r7
 802399e:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80239a2:	fb06 1303 	mla	r3, r6, r3, r1
 80239a6:	b29b      	uxth	r3, r3
 80239a8:	1c5e      	adds	r6, r3, #1
 80239aa:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 80239ae:	121b      	asrs	r3, r3, #8
 80239b0:	70ab      	strb	r3, [r5, #2]
 80239b2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80239b4:	3503      	adds	r5, #3
 80239b6:	449a      	add	sl, r3
 80239b8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80239ba:	4498      	add	r8, r3
 80239bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80239be:	3b01      	subs	r3, #1
 80239c0:	930d      	str	r3, [sp, #52]	; 0x34
 80239c2:	e750      	b.n	8023866 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80239c4:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80239c6:	449a      	add	sl, r3
 80239c8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80239ca:	4498      	add	r8, r3
 80239cc:	9b07      	ldr	r3, [sp, #28]
 80239ce:	3b01      	subs	r3, #1
 80239d0:	9307      	str	r3, [sp, #28]
 80239d2:	9b08      	ldr	r3, [sp, #32]
 80239d4:	3303      	adds	r3, #3
 80239d6:	9308      	str	r3, [sp, #32]
 80239d8:	e726      	b.n	8023828 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 80239da:	d026      	beq.n	8023a2a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 80239dc:	9b07      	ldr	r3, [sp, #28]
 80239de:	982b      	ldr	r0, [sp, #172]	; 0xac
 80239e0:	3b01      	subs	r3, #1
 80239e2:	fb00 a003 	mla	r0, r0, r3, sl
 80239e6:	1400      	asrs	r0, r0, #16
 80239e8:	f53f af3a 	bmi.w	8023860 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80239ec:	3901      	subs	r1, #1
 80239ee:	4288      	cmp	r0, r1
 80239f0:	f6bf af36 	bge.w	8023860 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80239f4:	992c      	ldr	r1, [sp, #176]	; 0xb0
 80239f6:	fb01 8303 	mla	r3, r1, r3, r8
 80239fa:	141b      	asrs	r3, r3, #16
 80239fc:	f53f af30 	bmi.w	8023860 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8023a00:	3a01      	subs	r2, #1
 8023a02:	4293      	cmp	r3, r2
 8023a04:	f6bf af2c 	bge.w	8023860 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8023a08:	9b08      	ldr	r3, [sp, #32]
 8023a0a:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8023a0e:	1cdd      	adds	r5, r3, #3
 8023a10:	f8bd e030 	ldrh.w	lr, [sp, #48]	; 0x30
 8023a14:	f1bc 0f00 	cmp.w	ip, #0
 8023a18:	dc5f      	bgt.n	8023ada <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30a>
 8023a1a:	9b07      	ldr	r3, [sp, #28]
 8023a1c:	9a08      	ldr	r2, [sp, #32]
 8023a1e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8023a22:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023a26:	441a      	add	r2, r3
 8023a28:	9208      	str	r2, [sp, #32]
 8023a2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023a2c:	2b00      	cmp	r3, #0
 8023a2e:	f340 80e9 	ble.w	8023c04 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 8023a32:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023a36:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023a38:	ee30 0a04 	vadd.f32	s0, s0, s8
 8023a3c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8023a40:	eef0 6a62 	vmov.f32	s13, s5
 8023a44:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8023a48:	ee31 1a05 	vadd.f32	s2, s2, s10
 8023a4c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023a50:	ee16 aa90 	vmov	sl, s13
 8023a54:	eef0 6a43 	vmov.f32	s13, s6
 8023a58:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023a5c:	ee16 8a90 	vmov	r8, s13
 8023a60:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8023a64:	ee61 7a27 	vmul.f32	s15, s2, s15
 8023a68:	ee77 2a62 	vsub.f32	s5, s14, s5
 8023a6c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8023a70:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8023a74:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8023a78:	ee12 2a90 	vmov	r2, s5
 8023a7c:	eef0 2a47 	vmov.f32	s5, s14
 8023a80:	fb92 f3f3 	sdiv	r3, r2, r3
 8023a84:	ee13 2a10 	vmov	r2, s6
 8023a88:	932b      	str	r3, [sp, #172]	; 0xac
 8023a8a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023a8c:	eeb0 3a67 	vmov.f32	s6, s15
 8023a90:	fb92 f3f3 	sdiv	r3, r2, r3
 8023a94:	932c      	str	r3, [sp, #176]	; 0xb0
 8023a96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023a98:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8023a9a:	3b01      	subs	r3, #1
 8023a9c:	930b      	str	r3, [sp, #44]	; 0x2c
 8023a9e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023aa0:	bf08      	it	eq
 8023aa2:	4613      	moveq	r3, r2
 8023aa4:	9307      	str	r3, [sp, #28]
 8023aa6:	e6b1      	b.n	802380c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8023aa8:	1c47      	adds	r7, r0, #1
 8023aaa:	d482      	bmi.n	80239b2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8023aac:	42bb      	cmp	r3, r7
 8023aae:	db80      	blt.n	80239b2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8023ab0:	1c67      	adds	r7, r4, #1
 8023ab2:	f53f af7e 	bmi.w	80239b2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8023ab6:	42be      	cmp	r6, r7
 8023ab8:	f6ff af7b 	blt.w	80239b2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8023abc:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8023abe:	b236      	sxth	r6, r6
 8023ac0:	9001      	str	r0, [sp, #4]
 8023ac2:	b21b      	sxth	r3, r3
 8023ac4:	9600      	str	r6, [sp, #0]
 8023ac6:	981d      	ldr	r0, [sp, #116]	; 0x74
 8023ac8:	e9cd 1704 	strd	r1, r7, [sp, #16]
 8023acc:	e9cd 4202 	strd	r4, r2, [sp, #8]
 8023ad0:	4629      	mov	r1, r5
 8023ad2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023ad4:	f7ff fd82 	bl	80235dc <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 8023ad8:	e76b      	b.n	80239b2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8023ada:	9930      	ldr	r1, [sp, #192]	; 0xc0
 8023adc:	ea4f 402a 	mov.w	r0, sl, asr #16
 8023ae0:	f3c8 3203 	ubfx	r2, r8, #12, #4
 8023ae4:	f3ca 3303 	ubfx	r3, sl, #12, #4
 8023ae8:	f9b1 7008 	ldrsh.w	r7, [r1, #8]
 8023aec:	ea4f 4128 	mov.w	r1, r8, asr #16
 8023af0:	fb07 0101 	mla	r1, r7, r1, r0
 8023af4:	980a      	ldr	r0, [sp, #40]	; 0x28
 8023af6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8023afa:	1844      	adds	r4, r0, r1
 8023afc:	5c40      	ldrb	r0, [r0, r1]
 8023afe:	78a6      	ldrb	r6, [r4, #2]
 8023b00:	7861      	ldrb	r1, [r4, #1]
 8023b02:	960f      	str	r6, [sp, #60]	; 0x3c
 8023b04:	78e6      	ldrb	r6, [r4, #3]
 8023b06:	910d      	str	r1, [sp, #52]	; 0x34
 8023b08:	9610      	str	r6, [sp, #64]	; 0x40
 8023b0a:	f894 9004 	ldrb.w	r9, [r4, #4]
 8023b0e:	f894 b005 	ldrb.w	fp, [r4, #5]
 8023b12:	b192      	cbz	r2, 8023b3a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 8023b14:	f06f 0604 	mvn.w	r6, #4
 8023b18:	2103      	movs	r1, #3
 8023b1a:	3405      	adds	r4, #5
 8023b1c:	fb17 6701 	smlabb	r7, r7, r1, r6
 8023b20:	19e6      	adds	r6, r4, r7
 8023b22:	5de4      	ldrb	r4, [r4, r7]
 8023b24:	9417      	str	r4, [sp, #92]	; 0x5c
 8023b26:	7874      	ldrb	r4, [r6, #1]
 8023b28:	9419      	str	r4, [sp, #100]	; 0x64
 8023b2a:	78b4      	ldrb	r4, [r6, #2]
 8023b2c:	941b      	str	r4, [sp, #108]	; 0x6c
 8023b2e:	78f4      	ldrb	r4, [r6, #3]
 8023b30:	9418      	str	r4, [sp, #96]	; 0x60
 8023b32:	7934      	ldrb	r4, [r6, #4]
 8023b34:	941a      	str	r4, [sp, #104]	; 0x68
 8023b36:	7974      	ldrb	r4, [r6, #5]
 8023b38:	941c      	str	r4, [sp, #112]	; 0x70
 8023b3a:	b29b      	uxth	r3, r3
 8023b3c:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8023b3e:	b292      	uxth	r2, r2
 8023b40:	9909      	ldr	r1, [sp, #36]	; 0x24
 8023b42:	3503      	adds	r5, #3
 8023b44:	f10c 3cff 	add.w	ip, ip, #4294967295
 8023b48:	fb03 f402 	mul.w	r4, r3, r2
 8023b4c:	011b      	lsls	r3, r3, #4
 8023b4e:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 8023b52:	f5c3 7680 	rsb	r6, r3, #256	; 0x100
 8023b56:	1b1b      	subs	r3, r3, r4
 8023b58:	b292      	uxth	r2, r2
 8023b5a:	b29b      	uxth	r3, r3
 8023b5c:	1ab6      	subs	r6, r6, r2
 8023b5e:	435f      	muls	r7, r3
 8023b60:	b2b6      	uxth	r6, r6
 8023b62:	fb03 f909 	mul.w	r9, r3, r9
 8023b66:	fb03 fb0b 	mul.w	fp, r3, fp
 8023b6a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8023b6c:	fb06 7000 	mla	r0, r6, r0, r7
 8023b70:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 8023b72:	fb06 bb03 	mla	fp, r6, r3, fp
 8023b76:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8023b78:	fb02 0007 	mla	r0, r2, r7, r0
 8023b7c:	9f18      	ldr	r7, [sp, #96]	; 0x60
 8023b7e:	fb02 bb03 	mla	fp, r2, r3, fp
 8023b82:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8023b84:	fb04 0007 	mla	r0, r4, r7, r0
 8023b88:	f815 7c06 	ldrb.w	r7, [r5, #-6]
 8023b8c:	fb17 f701 	smulbb	r7, r7, r1
 8023b90:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8023b94:	990d      	ldr	r1, [sp, #52]	; 0x34
 8023b96:	fb00 700e 	mla	r0, r0, lr, r7
 8023b9a:	fb06 9101 	mla	r1, r6, r1, r9
 8023b9e:	b280      	uxth	r0, r0
 8023ba0:	1c47      	adds	r7, r0, #1
 8023ba2:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 8023ba6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8023ba8:	1200      	asrs	r0, r0, #8
 8023baa:	f805 0c06 	strb.w	r0, [r5, #-6]
 8023bae:	9819      	ldr	r0, [sp, #100]	; 0x64
 8023bb0:	fb02 1100 	mla	r1, r2, r0, r1
 8023bb4:	981a      	ldr	r0, [sp, #104]	; 0x68
 8023bb6:	fb04 1100 	mla	r1, r4, r0, r1
 8023bba:	f815 0c05 	ldrb.w	r0, [r5, #-5]
 8023bbe:	fb04 b403 	mla	r4, r4, r3, fp
 8023bc2:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 8023bc6:	fb10 f007 	smulbb	r0, r0, r7
 8023bca:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8023bce:	fb13 f307 	smulbb	r3, r3, r7
 8023bd2:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8023bd6:	fb01 010e 	mla	r1, r1, lr, r0
 8023bda:	fb04 340e 	mla	r4, r4, lr, r3
 8023bde:	b289      	uxth	r1, r1
 8023be0:	b2a4      	uxth	r4, r4
 8023be2:	1c48      	adds	r0, r1, #1
 8023be4:	1c63      	adds	r3, r4, #1
 8023be6:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8023bea:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8023bee:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8023bf0:	1209      	asrs	r1, r1, #8
 8023bf2:	1224      	asrs	r4, r4, #8
 8023bf4:	449a      	add	sl, r3
 8023bf6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023bf8:	f805 1c05 	strb.w	r1, [r5, #-5]
 8023bfc:	f805 4c04 	strb.w	r4, [r5, #-4]
 8023c00:	4498      	add	r8, r3
 8023c02:	e707      	b.n	8023a14 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 8023c04:	b01f      	add	sp, #124	; 0x7c
 8023c06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08023c0a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 8023c0a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023c0e:	b087      	sub	sp, #28
 8023c10:	780d      	ldrb	r5, [r1, #0]
 8023c12:	784c      	ldrb	r4, [r1, #1]
 8023c14:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 8023c18:	f9bd 7040 	ldrsh.w	r7, [sp, #64]	; 0x40
 8023c1c:	9004      	str	r0, [sp, #16]
 8023c1e:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 8023c22:	e9dd b611 	ldrd	fp, r6, [sp, #68]	; 0x44
 8023c26:	9005      	str	r0, [sp, #20]
 8023c28:	fb06 bc03 	mla	ip, r6, r3, fp
 8023c2c:	2e00      	cmp	r6, #0
 8023c2e:	7888      	ldrb	r0, [r1, #2]
 8023c30:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8023c34:	eb02 090c 	add.w	r9, r2, ip
 8023c38:	f2c0 8084 	blt.w	8023d44 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 8023c3c:	42b7      	cmp	r7, r6
 8023c3e:	f340 8081 	ble.w	8023d44 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 8023c42:	f1bb 0f00 	cmp.w	fp, #0
 8023c46:	db79      	blt.n	8023d3c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 8023c48:	455b      	cmp	r3, fp
 8023c4a:	dd77      	ble.n	8023d3c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 8023c4c:	f812 200c 	ldrb.w	r2, [r2, ip]
 8023c50:	9201      	str	r2, [sp, #4]
 8023c52:	f899 2001 	ldrb.w	r2, [r9, #1]
 8023c56:	9202      	str	r2, [sp, #8]
 8023c58:	f899 2002 	ldrb.w	r2, [r9, #2]
 8023c5c:	9203      	str	r2, [sp, #12]
 8023c5e:	f11b 0201 	adds.w	r2, fp, #1
 8023c62:	d476      	bmi.n	8023d52 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 8023c64:	4293      	cmp	r3, r2
 8023c66:	dd74      	ble.n	8023d52 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 8023c68:	9a04      	ldr	r2, [sp, #16]
 8023c6a:	2a00      	cmp	r2, #0
 8023c6c:	d071      	beq.n	8023d52 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 8023c6e:	f899 8003 	ldrb.w	r8, [r9, #3]
 8023c72:	f899 c004 	ldrb.w	ip, [r9, #4]
 8023c76:	f899 a005 	ldrb.w	sl, [r9, #5]
 8023c7a:	3601      	adds	r6, #1
 8023c7c:	d471      	bmi.n	8023d62 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 8023c7e:	42b7      	cmp	r7, r6
 8023c80:	dd6f      	ble.n	8023d62 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 8023c82:	9a05      	ldr	r2, [sp, #20]
 8023c84:	2a00      	cmp	r2, #0
 8023c86:	d06c      	beq.n	8023d62 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 8023c88:	f1bb 0f00 	cmp.w	fp, #0
 8023c8c:	db65      	blt.n	8023d5a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 8023c8e:	455b      	cmp	r3, fp
 8023c90:	dd63      	ble.n	8023d5a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 8023c92:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8023c96:	f819 e002 	ldrb.w	lr, [r9, r2]
 8023c9a:	2203      	movs	r2, #3
 8023c9c:	fb03 9602 	mla	r6, r3, r2, r9
 8023ca0:	7877      	ldrb	r7, [r6, #1]
 8023ca2:	78b6      	ldrb	r6, [r6, #2]
 8023ca4:	f11b 0b01 	adds.w	fp, fp, #1
 8023ca8:	d40c      	bmi.n	8023cc4 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 8023caa:	455b      	cmp	r3, fp
 8023cac:	dd0a      	ble.n	8023cc4 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 8023cae:	9a04      	ldr	r2, [sp, #16]
 8023cb0:	b142      	cbz	r2, 8023cc4 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 8023cb2:	2203      	movs	r2, #3
 8023cb4:	fb13 2002 	smlabb	r0, r3, r2, r2
 8023cb8:	f819 5000 	ldrb.w	r5, [r9, r0]
 8023cbc:	fb03 9002 	mla	r0, r3, r2, r9
 8023cc0:	7904      	ldrb	r4, [r0, #4]
 8023cc2:	7940      	ldrb	r0, [r0, #5]
 8023cc4:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8023cc8:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8023ccc:	fb03 fb02 	mul.w	fp, r3, r2
 8023cd0:	011b      	lsls	r3, r3, #4
 8023cd2:	ebcb 1202 	rsb	r2, fp, r2, lsl #4
 8023cd6:	f5c3 7980 	rsb	r9, r3, #256	; 0x100
 8023cda:	eba3 030b 	sub.w	r3, r3, fp
 8023cde:	b292      	uxth	r2, r2
 8023ce0:	b29b      	uxth	r3, r3
 8023ce2:	eba9 0902 	sub.w	r9, r9, r2
 8023ce6:	9304      	str	r3, [sp, #16]
 8023ce8:	fa1f f989 	uxth.w	r9, r9
 8023cec:	fb03 f808 	mul.w	r8, r3, r8
 8023cf0:	9b01      	ldr	r3, [sp, #4]
 8023cf2:	fb09 8803 	mla	r8, r9, r3, r8
 8023cf6:	9b04      	ldr	r3, [sp, #16]
 8023cf8:	fb03 fc0c 	mul.w	ip, r3, ip
 8023cfc:	9b02      	ldr	r3, [sp, #8]
 8023cfe:	fb02 880e 	mla	r8, r2, lr, r8
 8023d02:	fb09 cc03 	mla	ip, r9, r3, ip
 8023d06:	9b04      	ldr	r3, [sp, #16]
 8023d08:	fb0b 8805 	mla	r8, fp, r5, r8
 8023d0c:	fb02 c707 	mla	r7, r2, r7, ip
 8023d10:	fb03 f30a 	mul.w	r3, r3, sl
 8023d14:	ea4f 2828 	mov.w	r8, r8, asr #8
 8023d18:	fb0b 7404 	mla	r4, fp, r4, r7
 8023d1c:	f881 8000 	strb.w	r8, [r1]
 8023d20:	1224      	asrs	r4, r4, #8
 8023d22:	704c      	strb	r4, [r1, #1]
 8023d24:	9c03      	ldr	r4, [sp, #12]
 8023d26:	fb09 3904 	mla	r9, r9, r4, r3
 8023d2a:	fb02 9206 	mla	r2, r2, r6, r9
 8023d2e:	fb0b 2000 	mla	r0, fp, r0, r2
 8023d32:	1200      	asrs	r0, r0, #8
 8023d34:	7088      	strb	r0, [r1, #2]
 8023d36:	b007      	add	sp, #28
 8023d38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023d3c:	e9cd 4002 	strd	r4, r0, [sp, #8]
 8023d40:	9501      	str	r5, [sp, #4]
 8023d42:	e78c      	b.n	8023c5e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x54>
 8023d44:	4682      	mov	sl, r0
 8023d46:	46a4      	mov	ip, r4
 8023d48:	46a8      	mov	r8, r5
 8023d4a:	9501      	str	r5, [sp, #4]
 8023d4c:	e9cd 4002 	strd	r4, r0, [sp, #8]
 8023d50:	e793      	b.n	8023c7a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 8023d52:	4682      	mov	sl, r0
 8023d54:	46a4      	mov	ip, r4
 8023d56:	46a8      	mov	r8, r5
 8023d58:	e78f      	b.n	8023c7a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 8023d5a:	4606      	mov	r6, r0
 8023d5c:	4627      	mov	r7, r4
 8023d5e:	46ae      	mov	lr, r5
 8023d60:	e7a0      	b.n	8023ca4 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 8023d62:	4606      	mov	r6, r0
 8023d64:	4627      	mov	r7, r4
 8023d66:	46ae      	mov	lr, r5
 8023d68:	e7ac      	b.n	8023cc4 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>

08023d6a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023d6a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023d6e:	b09b      	sub	sp, #108	; 0x6c
 8023d70:	920b      	str	r2, [sp, #44]	; 0x2c
 8023d72:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8023d74:	9019      	str	r0, [sp, #100]	; 0x64
 8023d76:	9109      	str	r1, [sp, #36]	; 0x24
 8023d78:	6850      	ldr	r0, [r2, #4]
 8023d7a:	9306      	str	r3, [sp, #24]
 8023d7c:	6812      	ldr	r2, [r2, #0]
 8023d7e:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8023d82:	e9dd b425 	ldrd	fp, r4, [sp, #148]	; 0x94
 8023d86:	fb00 1303 	mla	r3, r0, r3, r1
 8023d8a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023d8e:	18d3      	adds	r3, r2, r3
 8023d90:	9307      	str	r3, [sp, #28]
 8023d92:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023d94:	681b      	ldr	r3, [r3, #0]
 8023d96:	9308      	str	r3, [sp, #32]
 8023d98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023d9a:	2b00      	cmp	r3, #0
 8023d9c:	dc03      	bgt.n	8023da6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8023d9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023da0:	2b00      	cmp	r3, #0
 8023da2:	f340 81ab 	ble.w	80240fc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 8023da6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023da8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023dac:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8023db0:	1e48      	subs	r0, r1, #1
 8023db2:	1e55      	subs	r5, r2, #1
 8023db4:	9b06      	ldr	r3, [sp, #24]
 8023db6:	2b00      	cmp	r3, #0
 8023db8:	f340 80b1 	ble.w	8023f1e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8023dbc:	ea5f 462b 	movs.w	r6, fp, asr #16
 8023dc0:	ea4f 4324 	mov.w	r3, r4, asr #16
 8023dc4:	d406      	bmi.n	8023dd4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8023dc6:	4286      	cmp	r6, r0
 8023dc8:	da04      	bge.n	8023dd4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8023dca:	2b00      	cmp	r3, #0
 8023dcc:	db02      	blt.n	8023dd4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8023dce:	42ab      	cmp	r3, r5
 8023dd0:	f2c0 80a6 	blt.w	8023f20 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 8023dd4:	3601      	adds	r6, #1
 8023dd6:	f100 8097 	bmi.w	8023f08 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8023dda:	42b1      	cmp	r1, r6
 8023ddc:	f2c0 8094 	blt.w	8023f08 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8023de0:	3301      	adds	r3, #1
 8023de2:	f100 8091 	bmi.w	8023f08 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8023de6:	429a      	cmp	r2, r3
 8023de8:	f2c0 808e 	blt.w	8023f08 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8023dec:	9b06      	ldr	r3, [sp, #24]
 8023dee:	9e07      	ldr	r6, [sp, #28]
 8023df0:	930a      	str	r3, [sp, #40]	; 0x28
 8023df2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023df4:	2b00      	cmp	r3, #0
 8023df6:	f340 80b0 	ble.w	8023f5a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8023dfa:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8023dfc:	1425      	asrs	r5, r4, #16
 8023dfe:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023e00:	f3cb 3203 	ubfx	r2, fp, #12, #4
 8023e04:	68c7      	ldr	r7, [r0, #12]
 8023e06:	ea5f 402b 	movs.w	r0, fp, asr #16
 8023e0a:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8023e0e:	689b      	ldr	r3, [r3, #8]
 8023e10:	f100 80ea 	bmi.w	8023fe8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8023e14:	f103 3cff 	add.w	ip, r3, #4294967295
 8023e18:	4560      	cmp	r0, ip
 8023e1a:	f280 80e5 	bge.w	8023fe8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8023e1e:	2d00      	cmp	r5, #0
 8023e20:	f2c0 80e2 	blt.w	8023fe8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8023e24:	f107 3cff 	add.w	ip, r7, #4294967295
 8023e28:	4565      	cmp	r5, ip
 8023e2a:	f280 80dd 	bge.w	8023fe8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8023e2e:	b21b      	sxth	r3, r3
 8023e30:	fb05 0003 	mla	r0, r5, r3, r0
 8023e34:	9d08      	ldr	r5, [sp, #32]
 8023e36:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8023e3a:	182f      	adds	r7, r5, r0
 8023e3c:	5c2d      	ldrb	r5, [r5, r0]
 8023e3e:	7878      	ldrb	r0, [r7, #1]
 8023e40:	f897 e002 	ldrb.w	lr, [r7, #2]
 8023e44:	900c      	str	r0, [sp, #48]	; 0x30
 8023e46:	f897 9003 	ldrb.w	r9, [r7, #3]
 8023e4a:	f897 8004 	ldrb.w	r8, [r7, #4]
 8023e4e:	f897 a005 	ldrb.w	sl, [r7, #5]
 8023e52:	b1c9      	cbz	r1, 8023e88 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8023e54:	f04f 0c03 	mov.w	ip, #3
 8023e58:	f06f 0004 	mvn.w	r0, #4
 8023e5c:	3705      	adds	r7, #5
 8023e5e:	fb13 030c 	smlabb	r3, r3, ip, r0
 8023e62:	eb07 0c03 	add.w	ip, r7, r3
 8023e66:	5cfb      	ldrb	r3, [r7, r3]
 8023e68:	930d      	str	r3, [sp, #52]	; 0x34
 8023e6a:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8023e6e:	930f      	str	r3, [sp, #60]	; 0x3c
 8023e70:	f89c 3002 	ldrb.w	r3, [ip, #2]
 8023e74:	9311      	str	r3, [sp, #68]	; 0x44
 8023e76:	f89c 3003 	ldrb.w	r3, [ip, #3]
 8023e7a:	930e      	str	r3, [sp, #56]	; 0x38
 8023e7c:	f89c 3004 	ldrb.w	r3, [ip, #4]
 8023e80:	9310      	str	r3, [sp, #64]	; 0x40
 8023e82:	f89c 3005 	ldrb.w	r3, [ip, #5]
 8023e86:	9312      	str	r3, [sp, #72]	; 0x48
 8023e88:	b292      	uxth	r2, r2
 8023e8a:	980c      	ldr	r0, [sp, #48]	; 0x30
 8023e8c:	b289      	uxth	r1, r1
 8023e8e:	fb02 f301 	mul.w	r3, r2, r1
 8023e92:	0112      	lsls	r2, r2, #4
 8023e94:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8023e98:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 8023e9c:	1ad2      	subs	r2, r2, r3
 8023e9e:	b289      	uxth	r1, r1
 8023ea0:	b292      	uxth	r2, r2
 8023ea2:	1a7f      	subs	r7, r7, r1
 8023ea4:	fb02 f909 	mul.w	r9, r2, r9
 8023ea8:	b2bf      	uxth	r7, r7
 8023eaa:	fb02 f808 	mul.w	r8, r2, r8
 8023eae:	fb02 fa0a 	mul.w	sl, r2, sl
 8023eb2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8023eb4:	fb07 9905 	mla	r9, r7, r5, r9
 8023eb8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8023eba:	fb07 8800 	mla	r8, r7, r0, r8
 8023ebe:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8023ec0:	fb07 aa0e 	mla	sl, r7, lr, sl
 8023ec4:	fb01 9905 	mla	r9, r1, r5, r9
 8023ec8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8023eca:	fb01 8800 	mla	r8, r1, r0, r8
 8023ece:	9810      	ldr	r0, [sp, #64]	; 0x40
 8023ed0:	fb01 a102 	mla	r1, r1, r2, sl
 8023ed4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8023ed6:	fb03 9905 	mla	r9, r3, r5, r9
 8023eda:	fb03 8800 	mla	r8, r3, r0, r8
 8023ede:	fb03 1302 	mla	r3, r3, r2, r1
 8023ee2:	ea4f 2929 	mov.w	r9, r9, asr #8
 8023ee6:	ea4f 2828 	mov.w	r8, r8, asr #8
 8023eea:	121b      	asrs	r3, r3, #8
 8023eec:	f886 9000 	strb.w	r9, [r6]
 8023ef0:	f886 8001 	strb.w	r8, [r6, #1]
 8023ef4:	70b3      	strb	r3, [r6, #2]
 8023ef6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8023ef8:	3603      	adds	r6, #3
 8023efa:	449b      	add	fp, r3
 8023efc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023efe:	441c      	add	r4, r3
 8023f00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023f02:	3b01      	subs	r3, #1
 8023f04:	930a      	str	r3, [sp, #40]	; 0x28
 8023f06:	e774      	b.n	8023df2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 8023f08:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8023f0a:	449b      	add	fp, r3
 8023f0c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023f0e:	441c      	add	r4, r3
 8023f10:	9b06      	ldr	r3, [sp, #24]
 8023f12:	3b01      	subs	r3, #1
 8023f14:	9306      	str	r3, [sp, #24]
 8023f16:	9b07      	ldr	r3, [sp, #28]
 8023f18:	3303      	adds	r3, #3
 8023f1a:	9307      	str	r3, [sp, #28]
 8023f1c:	e74a      	b.n	8023db4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8023f1e:	d024      	beq.n	8023f6a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8023f20:	9b06      	ldr	r3, [sp, #24]
 8023f22:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8023f24:	3b01      	subs	r3, #1
 8023f26:	fb00 b003 	mla	r0, r0, r3, fp
 8023f2a:	1400      	asrs	r0, r0, #16
 8023f2c:	f53f af5e 	bmi.w	8023dec <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8023f30:	3901      	subs	r1, #1
 8023f32:	4288      	cmp	r0, r1
 8023f34:	f6bf af5a 	bge.w	8023dec <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8023f38:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8023f3a:	fb01 4303 	mla	r3, r1, r3, r4
 8023f3e:	141b      	asrs	r3, r3, #16
 8023f40:	f53f af54 	bmi.w	8023dec <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8023f44:	3a01      	subs	r2, #1
 8023f46:	4293      	cmp	r3, r2
 8023f48:	f6bf af50 	bge.w	8023dec <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8023f4c:	9b07      	ldr	r3, [sp, #28]
 8023f4e:	f8dd e018 	ldr.w	lr, [sp, #24]
 8023f52:	1cde      	adds	r6, r3, #3
 8023f54:	f1be 0f00 	cmp.w	lr, #0
 8023f58:	dc5f      	bgt.n	802401a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8023f5a:	9b06      	ldr	r3, [sp, #24]
 8023f5c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8023f60:	9b07      	ldr	r3, [sp, #28]
 8023f62:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8023f66:	4423      	add	r3, r4
 8023f68:	9307      	str	r3, [sp, #28]
 8023f6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023f6c:	2b00      	cmp	r3, #0
 8023f6e:	f340 80c5 	ble.w	80240fc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 8023f72:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023f76:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023f78:	ee30 0a04 	vadd.f32	s0, s0, s8
 8023f7c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8023f80:	eef0 6a62 	vmov.f32	s13, s5
 8023f84:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8023f88:	ee31 1a05 	vadd.f32	s2, s2, s10
 8023f8c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023f90:	ee16 ba90 	vmov	fp, s13
 8023f94:	eef0 6a43 	vmov.f32	s13, s6
 8023f98:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023f9c:	ee16 4a90 	vmov	r4, s13
 8023fa0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8023fa4:	ee61 7a27 	vmul.f32	s15, s2, s15
 8023fa8:	ee77 2a62 	vsub.f32	s5, s14, s5
 8023fac:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8023fb0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8023fb4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8023fb8:	ee12 2a90 	vmov	r2, s5
 8023fbc:	eef0 2a47 	vmov.f32	s5, s14
 8023fc0:	fb92 f3f3 	sdiv	r3, r2, r3
 8023fc4:	ee13 2a10 	vmov	r2, s6
 8023fc8:	9327      	str	r3, [sp, #156]	; 0x9c
 8023fca:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023fcc:	eeb0 3a67 	vmov.f32	s6, s15
 8023fd0:	fb92 f3f3 	sdiv	r3, r2, r3
 8023fd4:	9328      	str	r3, [sp, #160]	; 0xa0
 8023fd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023fd8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8023fda:	3b01      	subs	r3, #1
 8023fdc:	9309      	str	r3, [sp, #36]	; 0x24
 8023fde:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023fe0:	bf08      	it	eq
 8023fe2:	4613      	moveq	r3, r2
 8023fe4:	9306      	str	r3, [sp, #24]
 8023fe6:	e6d7      	b.n	8023d98 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8023fe8:	f110 0c01 	adds.w	ip, r0, #1
 8023fec:	d483      	bmi.n	8023ef6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8023fee:	4563      	cmp	r3, ip
 8023ff0:	db81      	blt.n	8023ef6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8023ff2:	f115 0c01 	adds.w	ip, r5, #1
 8023ff6:	f53f af7e 	bmi.w	8023ef6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8023ffa:	4567      	cmp	r7, ip
 8023ffc:	f6ff af7b 	blt.w	8023ef6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8024000:	b23f      	sxth	r7, r7
 8024002:	b21b      	sxth	r3, r3
 8024004:	9700      	str	r7, [sp, #0]
 8024006:	e9cd 2103 	strd	r2, r1, [sp, #12]
 802400a:	e9cd 0501 	strd	r0, r5, [sp, #4]
 802400e:	9a08      	ldr	r2, [sp, #32]
 8024010:	4631      	mov	r1, r6
 8024012:	9819      	ldr	r0, [sp, #100]	; 0x64
 8024014:	f7ff fdf9 	bl	8023c0a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 8024018:	e76d      	b.n	8023ef6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 802401a:	992c      	ldr	r1, [sp, #176]	; 0xb0
 802401c:	ea4f 402b 	mov.w	r0, fp, asr #16
 8024020:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8024024:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8024028:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 802402c:	1421      	asrs	r1, r4, #16
 802402e:	930a      	str	r3, [sp, #40]	; 0x28
 8024030:	fb0c 0101 	mla	r1, ip, r1, r0
 8024034:	9808      	ldr	r0, [sp, #32]
 8024036:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802403a:	1845      	adds	r5, r0, r1
 802403c:	5c40      	ldrb	r0, [r0, r1]
 802403e:	796f      	ldrb	r7, [r5, #5]
 8024040:	7869      	ldrb	r1, [r5, #1]
 8024042:	f895 8002 	ldrb.w	r8, [r5, #2]
 8024046:	f895 a003 	ldrb.w	sl, [r5, #3]
 802404a:	f895 9004 	ldrb.w	r9, [r5, #4]
 802404e:	970c      	str	r7, [sp, #48]	; 0x30
 8024050:	b1a2      	cbz	r2, 802407c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x312>
 8024052:	2703      	movs	r7, #3
 8024054:	f06f 0304 	mvn.w	r3, #4
 8024058:	3505      	adds	r5, #5
 802405a:	fb1c 3c07 	smlabb	ip, ip, r7, r3
 802405e:	eb05 070c 	add.w	r7, r5, ip
 8024062:	f815 500c 	ldrb.w	r5, [r5, ip]
 8024066:	9513      	str	r5, [sp, #76]	; 0x4c
 8024068:	787d      	ldrb	r5, [r7, #1]
 802406a:	9515      	str	r5, [sp, #84]	; 0x54
 802406c:	78bd      	ldrb	r5, [r7, #2]
 802406e:	9517      	str	r5, [sp, #92]	; 0x5c
 8024070:	78fd      	ldrb	r5, [r7, #3]
 8024072:	9514      	str	r5, [sp, #80]	; 0x50
 8024074:	793d      	ldrb	r5, [r7, #4]
 8024076:	9516      	str	r5, [sp, #88]	; 0x58
 8024078:	797d      	ldrb	r5, [r7, #5]
 802407a:	9518      	str	r5, [sp, #96]	; 0x60
 802407c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8024080:	b292      	uxth	r2, r2
 8024082:	3603      	adds	r6, #3
 8024084:	f10e 3eff 	add.w	lr, lr, #4294967295
 8024088:	fb03 f502 	mul.w	r5, r3, r2
 802408c:	011b      	lsls	r3, r3, #4
 802408e:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 8024092:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 8024096:	1b5b      	subs	r3, r3, r5
 8024098:	b292      	uxth	r2, r2
 802409a:	b29b      	uxth	r3, r3
 802409c:	1abf      	subs	r7, r7, r2
 802409e:	fb03 f909 	mul.w	r9, r3, r9
 80240a2:	b2bf      	uxth	r7, r7
 80240a4:	fb03 fa0a 	mul.w	sl, r3, sl
 80240a8:	fb07 9901 	mla	r9, r7, r1, r9
 80240ac:	9915      	ldr	r1, [sp, #84]	; 0x54
 80240ae:	fb07 aa00 	mla	sl, r7, r0, sl
 80240b2:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80240b4:	fb02 9901 	mla	r9, r2, r1, r9
 80240b8:	9916      	ldr	r1, [sp, #88]	; 0x58
 80240ba:	fb02 aa00 	mla	sl, r2, r0, sl
 80240be:	9814      	ldr	r0, [sp, #80]	; 0x50
 80240c0:	fb05 9901 	mla	r9, r5, r1, r9
 80240c4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80240c6:	fb05 aa00 	mla	sl, r5, r0, sl
 80240ca:	434b      	muls	r3, r1
 80240cc:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80240ce:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80240d2:	fb07 3308 	mla	r3, r7, r8, r3
 80240d6:	ea4f 2929 	mov.w	r9, r9, asr #8
 80240da:	f806 ac06 	strb.w	sl, [r6, #-6]
 80240de:	fb02 3201 	mla	r2, r2, r1, r3
 80240e2:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80240e4:	f806 9c05 	strb.w	r9, [r6, #-5]
 80240e8:	fb05 2503 	mla	r5, r5, r3, r2
 80240ec:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80240ee:	122d      	asrs	r5, r5, #8
 80240f0:	449b      	add	fp, r3
 80240f2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80240f4:	f806 5c04 	strb.w	r5, [r6, #-4]
 80240f8:	441c      	add	r4, r3
 80240fa:	e72b      	b.n	8023f54 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80240fc:	b01b      	add	sp, #108	; 0x6c
 80240fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08024102 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 8024102:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024106:	b087      	sub	sp, #28
 8024108:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	; 0x44
 802410c:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 8024110:	fb05 7003 	mla	r0, r5, r3, r7
 8024114:	2d00      	cmp	r5, #0
 8024116:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 802411a:	f89d e050 	ldrb.w	lr, [sp, #80]	; 0x50
 802411e:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 8024122:	f2c0 811f 	blt.w	8024364 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 8024126:	45a8      	cmp	r8, r5
 8024128:	f340 811c 	ble.w	8024364 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 802412c:	2f00      	cmp	r7, #0
 802412e:	f2c0 8117 	blt.w	8024360 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 8024132:	42bb      	cmp	r3, r7
 8024134:	f340 8114 	ble.w	8024360 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 8024138:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 802413c:	1c7a      	adds	r2, r7, #1
 802413e:	f100 8114 	bmi.w	802436a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 8024142:	4293      	cmp	r3, r2
 8024144:	f340 8111 	ble.w	802436a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 8024148:	2c00      	cmp	r4, #0
 802414a:	f000 8110 	beq.w	802436e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x26c>
 802414e:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8024152:	3501      	adds	r5, #1
 8024154:	f100 810f 	bmi.w	8024376 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 8024158:	45a8      	cmp	r8, r5
 802415a:	f340 810c 	ble.w	8024376 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 802415e:	f1be 0f00 	cmp.w	lr, #0
 8024162:	f000 810b 	beq.w	802437c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x27a>
 8024166:	2f00      	cmp	r7, #0
 8024168:	f2c0 8103 	blt.w	8024372 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 802416c:	42bb      	cmp	r3, r7
 802416e:	f340 8100 	ble.w	8024372 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 8024172:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 8024176:	3701      	adds	r7, #1
 8024178:	f100 8103 	bmi.w	8024382 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 802417c:	42bb      	cmp	r3, r7
 802417e:	f340 8100 	ble.w	8024382 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 8024182:	2c00      	cmp	r4, #0
 8024184:	f000 80ff 	beq.w	8024386 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x284>
 8024188:	3301      	adds	r3, #1
 802418a:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 802418e:	fa1f fc84 	uxth.w	ip, r4
 8024192:	fa1f fe8e 	uxth.w	lr, lr
 8024196:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 802419a:	fb0c f90e 	mul.w	r9, ip, lr
 802419e:	0e13      	lsrs	r3, r2, #24
 80241a0:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 80241a4:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 80241a8:	9302      	str	r3, [sp, #8]
 80241aa:	ebac 0709 	sub.w	r7, ip, r9
 80241ae:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 80241b2:	fa1f f48e 	uxth.w	r4, lr
 80241b6:	f006 1eff 	and.w	lr, r6, #16711935	; 0xff00ff
 80241ba:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80241be:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 80241c2:	fb0a fe0e 	mul.w	lr, sl, lr
 80241c6:	1b1b      	subs	r3, r3, r4
 80241c8:	fb0a f606 	mul.w	r6, sl, r6
 80241cc:	ea4f 6815 	mov.w	r8, r5, lsr #24
 80241d0:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 80241d4:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 80241d8:	b29b      	uxth	r3, r3
 80241da:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80241de:	b2bf      	uxth	r7, r7
 80241e0:	9301      	str	r3, [sp, #4]
 80241e2:	44e6      	add	lr, ip
 80241e4:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 80241e8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80241ec:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 80241f0:	f00e 13ff 	and.w	r3, lr, #16711935	; 0xff00ff
 80241f4:	9303      	str	r3, [sp, #12]
 80241f6:	0a33      	lsrs	r3, r6, #8
 80241f8:	f000 16ff 	and.w	r6, r0, #16711935	; 0xff00ff
 80241fc:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8024200:	9304      	str	r3, [sp, #16]
 8024202:	fb0b f606 	mul.w	r6, fp, r6
 8024206:	fb0b f000 	mul.w	r0, fp, r0
 802420a:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 802420e:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8024212:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024216:	44b6      	add	lr, r6
 8024218:	f500 7680 	add.w	r6, r0, #256	; 0x100
 802421c:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 8024220:	f005 16ff 	and.w	r6, r5, #16711935	; 0xff00ff
 8024224:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8024228:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802422c:	fb08 f606 	mul.w	r6, r8, r6
 8024230:	0a03      	lsrs	r3, r0, #8
 8024232:	fb08 f505 	mul.w	r5, r8, r5
 8024236:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802423a:	0a30      	lsrs	r0, r6, #8
 802423c:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8024240:	9305      	str	r3, [sp, #20]
 8024242:	0e13      	lsrs	r3, r2, #24
 8024244:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8024248:	fb0e fe07 	mul.w	lr, lr, r7
 802424c:	4430      	add	r0, r6
 802424e:	f505 7680 	add.w	r6, r5, #256	; 0x100
 8024252:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8024256:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 802425a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802425e:	0a00      	lsrs	r0, r0, #8
 8024260:	435e      	muls	r6, r3
 8024262:	0a2d      	lsrs	r5, r5, #8
 8024264:	435a      	muls	r2, r3
 8024266:	9b03      	ldr	r3, [sp, #12]
 8024268:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 802426c:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8024270:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8024274:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024278:	44b4      	add	ip, r6
 802427a:	f502 7680 	add.w	r6, r2, #256	; 0x100
 802427e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024282:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 8024286:	9e01      	ldr	r6, [sp, #4]
 8024288:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802428c:	fb03 ee06 	mla	lr, r3, r6, lr
 8024290:	9b04      	ldr	r3, [sp, #16]
 8024292:	0a12      	lsrs	r2, r2, #8
 8024294:	fb0c ee09 	mla	lr, ip, r9, lr
 8024298:	f403 467f 	and.w	r6, r3, #65280	; 0xff00
 802429c:	9b05      	ldr	r3, [sp, #20]
 802429e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80242a2:	fb00 ee04 	mla	lr, r0, r4, lr
 80242a6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80242aa:	f00e 10ff 	and.w	r0, lr, #16711935	; 0xff00ff
 80242ae:	f403 4e7f 	and.w	lr, r3, #65280	; 0xff00
 80242b2:	9b01      	ldr	r3, [sp, #4]
 80242b4:	fb07 fe0e 	mul.w	lr, r7, lr
 80242b8:	fb07 f70b 	mul.w	r7, r7, fp
 80242bc:	fb03 ee06 	mla	lr, r3, r6, lr
 80242c0:	fb03 730a 	mla	r3, r3, sl, r7
 80242c4:	fb09 e202 	mla	r2, r9, r2, lr
 80242c8:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 80242cc:	fb04 2e0e 	mla	lr, r4, lr, r2
 80242d0:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 80242d4:	fb04 3408 	mla	r4, r4, r8, r3
 80242d8:	9b02      	ldr	r3, [sp, #8]
 80242da:	b292      	uxth	r2, r2
 80242dc:	fb09 4903 	mla	r9, r9, r3, r4
 80242e0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80242e4:	f3c9 2907 	ubfx	r9, r9, #8, #8
 80242e8:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80242ec:	fb09 f902 	mul.w	r9, r9, r2
 80242f0:	ea40 0e0e 	orr.w	lr, r0, lr
 80242f4:	f109 0301 	add.w	r3, r9, #1
 80242f8:	fa5f f08e 	uxtb.w	r0, lr
 80242fc:	fb10 f002 	smulbb	r0, r0, r2
 8024300:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 8024304:	780b      	ldrb	r3, [r1, #0]
 8024306:	ea6f 2919 	mvn.w	r9, r9, lsr #8
 802430a:	fa5f f989 	uxtb.w	r9, r9
 802430e:	fb03 0309 	mla	r3, r3, r9, r0
 8024312:	b29b      	uxth	r3, r3
 8024314:	1c58      	adds	r0, r3, #1
 8024316:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 802431a:	7848      	ldrb	r0, [r1, #1]
 802431c:	fb10 f009 	smulbb	r0, r0, r9
 8024320:	121b      	asrs	r3, r3, #8
 8024322:	700b      	strb	r3, [r1, #0]
 8024324:	f3ce 2307 	ubfx	r3, lr, #8, #8
 8024328:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 802432c:	fb03 0302 	mla	r3, r3, r2, r0
 8024330:	b29b      	uxth	r3, r3
 8024332:	1c58      	adds	r0, r3, #1
 8024334:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8024338:	121b      	asrs	r3, r3, #8
 802433a:	704b      	strb	r3, [r1, #1]
 802433c:	788b      	ldrb	r3, [r1, #2]
 802433e:	fb13 f909 	smulbb	r9, r3, r9
 8024342:	fb0e 9e02 	mla	lr, lr, r2, r9
 8024346:	fa1f fe8e 	uxth.w	lr, lr
 802434a:	f10e 0301 	add.w	r3, lr, #1
 802434e:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 8024352:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8024356:	f881 e002 	strb.w	lr, [r1, #2]
 802435a:	b007      	add	sp, #28
 802435c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024360:	2600      	movs	r6, #0
 8024362:	e6eb      	b.n	802413c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3a>
 8024364:	2000      	movs	r0, #0
 8024366:	4606      	mov	r6, r0
 8024368:	e6f3      	b.n	8024152 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 802436a:	2000      	movs	r0, #0
 802436c:	e6f1      	b.n	8024152 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 802436e:	4620      	mov	r0, r4
 8024370:	e6ef      	b.n	8024152 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 8024372:	2500      	movs	r5, #0
 8024374:	e6ff      	b.n	8024176 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x74>
 8024376:	2200      	movs	r2, #0
 8024378:	4615      	mov	r5, r2
 802437a:	e708      	b.n	802418e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 802437c:	4672      	mov	r2, lr
 802437e:	4675      	mov	r5, lr
 8024380:	e705      	b.n	802418e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8024382:	2200      	movs	r2, #0
 8024384:	e703      	b.n	802418e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8024386:	4622      	mov	r2, r4
 8024388:	e701      	b.n	802418e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>

0802438a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802438a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802438e:	b09d      	sub	sp, #116	; 0x74
 8024390:	9219      	str	r2, [sp, #100]	; 0x64
 8024392:	9307      	str	r3, [sp, #28]
 8024394:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8024396:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
 802439a:	901b      	str	r0, [sp, #108]	; 0x6c
 802439c:	931a      	str	r3, [sp, #104]	; 0x68
 802439e:	6850      	ldr	r0, [r2, #4]
 80243a0:	9117      	str	r1, [sp, #92]	; 0x5c
 80243a2:	6812      	ldr	r2, [r2, #0]
 80243a4:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 80243a8:	e9dd 5627 	ldrd	r5, r6, [sp, #156]	; 0x9c
 80243ac:	fb00 1303 	mla	r3, r0, r3, r1
 80243b0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80243b4:	18d3      	adds	r3, r2, r3
 80243b6:	930a      	str	r3, [sp, #40]	; 0x28
 80243b8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80243ba:	681b      	ldr	r3, [r3, #0]
 80243bc:	9310      	str	r3, [sp, #64]	; 0x40
 80243be:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 80243c2:	930b      	str	r3, [sp, #44]	; 0x2c
 80243c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80243c6:	2b00      	cmp	r3, #0
 80243c8:	dc03      	bgt.n	80243d2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80243ca:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80243cc:	2b00      	cmp	r3, #0
 80243ce:	f340 8368 	ble.w	8024aa2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 80243d2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80243d4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80243d8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80243dc:	1e48      	subs	r0, r1, #1
 80243de:	1e57      	subs	r7, r2, #1
 80243e0:	9b07      	ldr	r3, [sp, #28]
 80243e2:	2b00      	cmp	r3, #0
 80243e4:	f340 8187 	ble.w	80246f6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 80243e8:	ea5f 4c25 	movs.w	ip, r5, asr #16
 80243ec:	ea4f 4326 	mov.w	r3, r6, asr #16
 80243f0:	d406      	bmi.n	8024400 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80243f2:	4584      	cmp	ip, r0
 80243f4:	da04      	bge.n	8024400 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80243f6:	2b00      	cmp	r3, #0
 80243f8:	db02      	blt.n	8024400 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80243fa:	42bb      	cmp	r3, r7
 80243fc:	f2c0 817c 	blt.w	80246f8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8024400:	f11c 0c01 	adds.w	ip, ip, #1
 8024404:	f100 816c 	bmi.w	80246e0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8024408:	4561      	cmp	r1, ip
 802440a:	f2c0 8169 	blt.w	80246e0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 802440e:	3301      	adds	r3, #1
 8024410:	f100 8166 	bmi.w	80246e0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8024414:	429a      	cmp	r2, r3
 8024416:	f2c0 8163 	blt.w	80246e0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 802441a:	9b07      	ldr	r3, [sp, #28]
 802441c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 802441e:	9318      	str	r3, [sp, #96]	; 0x60
 8024420:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8024422:	2b00      	cmp	r3, #0
 8024424:	f340 8186 	ble.w	8024734 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8024428:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802442a:	142a      	asrs	r2, r5, #16
 802442c:	ea4f 4026 	mov.w	r0, r6, asr #16
 8024430:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8024434:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8024438:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 802443c:	f100 81cb 	bmi.w	80247d6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8024440:	f10e 38ff 	add.w	r8, lr, #4294967295
 8024444:	4542      	cmp	r2, r8
 8024446:	f280 81c6 	bge.w	80247d6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 802444a:	2800      	cmp	r0, #0
 802444c:	f2c0 81c3 	blt.w	80247d6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8024450:	f103 38ff 	add.w	r8, r3, #4294967295
 8024454:	4540      	cmp	r0, r8
 8024456:	f280 81be 	bge.w	80247d6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 802445a:	fa0f f38e 	sxth.w	r3, lr
 802445e:	fb00 2203 	mla	r2, r0, r3, r2
 8024462:	9810      	ldr	r0, [sp, #64]	; 0x40
 8024464:	eb00 0882 	add.w	r8, r0, r2, lsl #2
 8024468:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 802446c:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8024470:	2900      	cmp	r1, #0
 8024472:	f000 81a6 	beq.w	80247c2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 8024476:	f8d8 0004 	ldr.w	r0, [r8, #4]
 802447a:	900c      	str	r0, [sp, #48]	; 0x30
 802447c:	0e00      	lsrs	r0, r0, #24
 802447e:	9013      	str	r0, [sp, #76]	; 0x4c
 8024480:	f1bc 0f00 	cmp.w	ip, #0
 8024484:	d00f      	beq.n	80244a6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8024486:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 802448a:	3b01      	subs	r3, #1
 802448c:	009b      	lsls	r3, r3, #2
 802448e:	3304      	adds	r3, #4
 8024490:	eb08 0003 	add.w	r0, r8, r3
 8024494:	f858 3003 	ldr.w	r3, [r8, r3]
 8024498:	9308      	str	r3, [sp, #32]
 802449a:	0e1b      	lsrs	r3, r3, #24
 802449c:	9311      	str	r3, [sp, #68]	; 0x44
 802449e:	6843      	ldr	r3, [r0, #4]
 80244a0:	930d      	str	r3, [sp, #52]	; 0x34
 80244a2:	0e1b      	lsrs	r3, r3, #24
 80244a4:	9314      	str	r3, [sp, #80]	; 0x50
 80244a6:	b289      	uxth	r1, r1
 80244a8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80244aa:	fa1f fc8c 	uxth.w	ip, ip
 80244ae:	0108      	lsls	r0, r1, #4
 80244b0:	fb01 f90c 	mul.w	r9, r1, ip
 80244b4:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 80244b8:	ebc9 1c0c 	rsb	ip, r9, ip, lsl #4
 80244bc:	eba0 0809 	sub.w	r8, r0, r9
 80244c0:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80244c2:	fa1f f18c 	uxth.w	r1, ip
 80244c6:	fa1f f888 	uxth.w	r8, r8
 80244ca:	1a5b      	subs	r3, r3, r1
 80244cc:	fb08 f000 	mul.w	r0, r8, r0
 80244d0:	b29b      	uxth	r3, r3
 80244d2:	fb03 000e 	mla	r0, r3, lr, r0
 80244d6:	fb01 0004 	mla	r0, r1, r4, r0
 80244da:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80244dc:	fb09 0004 	mla	r0, r9, r4, r0
 80244e0:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80244e4:	2800      	cmp	r0, #0
 80244e6:	f000 80f2 	beq.w	80246ce <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 80244ea:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80244ee:	d01b      	beq.n	8024528 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 80244f0:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 80244f4:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80244f8:	fb0e fa0a 	mul.w	sl, lr, sl
 80244fc:	fb0e fe02 	mul.w	lr, lr, r2
 8024500:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8024504:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8024508:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 802450c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8024510:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8024514:	4452      	add	r2, sl
 8024516:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802451a:	0a12      	lsrs	r2, r2, #8
 802451c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8024520:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8024524:	ea42 020c 	orr.w	r2, r2, ip
 8024528:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802452a:	2cff      	cmp	r4, #255	; 0xff
 802452c:	d021      	beq.n	8024572 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 802452e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8024530:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8024534:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8024536:	fb04 fb0b 	mul.w	fp, r4, fp
 802453a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802453c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8024540:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8024542:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8024546:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802454a:	fb04 fa0a 	mul.w	sl, r4, sl
 802454e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024552:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8024556:	44de      	add	lr, fp
 8024558:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802455c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024560:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024564:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024568:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802456c:	ea4e 040a 	orr.w	r4, lr, sl
 8024570:	940c      	str	r4, [sp, #48]	; 0x30
 8024572:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8024574:	2cff      	cmp	r4, #255	; 0xff
 8024576:	d021      	beq.n	80245bc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 8024578:	9c08      	ldr	r4, [sp, #32]
 802457a:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 802457e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8024580:	fb04 fb0b 	mul.w	fp, r4, fp
 8024584:	9c08      	ldr	r4, [sp, #32]
 8024586:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802458a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 802458c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8024590:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8024594:	fb04 fa0a 	mul.w	sl, r4, sl
 8024598:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802459c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80245a0:	44de      	add	lr, fp
 80245a2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80245a6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80245aa:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80245ae:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80245b2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80245b6:	ea4e 040a 	orr.w	r4, lr, sl
 80245ba:	9408      	str	r4, [sp, #32]
 80245bc:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80245be:	2cff      	cmp	r4, #255	; 0xff
 80245c0:	d021      	beq.n	8024606 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 80245c2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80245c4:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80245c8:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80245ca:	fb04 fb0b 	mul.w	fp, r4, fp
 80245ce:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80245d0:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80245d4:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80245d6:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80245da:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80245de:	fb04 fa0a 	mul.w	sl, r4, sl
 80245e2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80245e6:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80245ea:	44de      	add	lr, fp
 80245ec:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80245f0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80245f4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80245f8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80245fc:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024600:	ea4e 040a 	orr.w	r4, lr, sl
 8024604:	940d      	str	r4, [sp, #52]	; 0x34
 8024606:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8024608:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 802460c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8024610:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8024614:	9c08      	ldr	r4, [sp, #32]
 8024616:	fb08 fc0c 	mul.w	ip, r8, ip
 802461a:	fb03 cc0e 	mla	ip, r3, lr, ip
 802461e:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8024622:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8024624:	fb01 cc0e 	mla	ip, r1, lr, ip
 8024628:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 802462c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802462e:	fb09 cc0e 	mla	ip, r9, lr, ip
 8024632:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8024636:	fb08 f80e 	mul.w	r8, r8, lr
 802463a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802463e:	fb03 8202 	mla	r2, r3, r2, r8
 8024642:	9b08      	ldr	r3, [sp, #32]
 8024644:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024648:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 802464c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802464e:	fb01 220a 	mla	r2, r1, sl, r2
 8024652:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 8024656:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024658:	fb09 2901 	mla	r9, r9, r1, r2
 802465c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 802465e:	4343      	muls	r3, r0
 8024660:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8024664:	1c58      	adds	r0, r3, #1
 8024666:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 802466a:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 802466e:	783b      	ldrb	r3, [r7, #0]
 8024670:	ea4c 0c09 	orr.w	ip, ip, r9
 8024674:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8024678:	fa5f f28c 	uxtb.w	r2, ip
 802467c:	b2c0      	uxtb	r0, r0
 802467e:	fb12 f201 	smulbb	r2, r2, r1
 8024682:	fb03 2300 	mla	r3, r3, r0, r2
 8024686:	b29b      	uxth	r3, r3
 8024688:	1c5a      	adds	r2, r3, #1
 802468a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802468e:	787a      	ldrb	r2, [r7, #1]
 8024690:	fb12 f200 	smulbb	r2, r2, r0
 8024694:	121b      	asrs	r3, r3, #8
 8024696:	703b      	strb	r3, [r7, #0]
 8024698:	f3cc 2307 	ubfx	r3, ip, #8, #8
 802469c:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80246a0:	fb03 2301 	mla	r3, r3, r1, r2
 80246a4:	b29b      	uxth	r3, r3
 80246a6:	1c5a      	adds	r2, r3, #1
 80246a8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80246ac:	121b      	asrs	r3, r3, #8
 80246ae:	707b      	strb	r3, [r7, #1]
 80246b0:	78bb      	ldrb	r3, [r7, #2]
 80246b2:	fb13 f000 	smulbb	r0, r3, r0
 80246b6:	fb0c 0c01 	mla	ip, ip, r1, r0
 80246ba:	fa1f fc8c 	uxth.w	ip, ip
 80246be:	f10c 0301 	add.w	r3, ip, #1
 80246c2:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 80246c6:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80246ca:	f887 c002 	strb.w	ip, [r7, #2]
 80246ce:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80246d0:	3703      	adds	r7, #3
 80246d2:	441d      	add	r5, r3
 80246d4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80246d6:	441e      	add	r6, r3
 80246d8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80246da:	3b01      	subs	r3, #1
 80246dc:	9318      	str	r3, [sp, #96]	; 0x60
 80246de:	e69f      	b.n	8024420 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80246e0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80246e2:	441d      	add	r5, r3
 80246e4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80246e6:	441e      	add	r6, r3
 80246e8:	9b07      	ldr	r3, [sp, #28]
 80246ea:	3b01      	subs	r3, #1
 80246ec:	9307      	str	r3, [sp, #28]
 80246ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80246f0:	3303      	adds	r3, #3
 80246f2:	930a      	str	r3, [sp, #40]	; 0x28
 80246f4:	e674      	b.n	80243e0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 80246f6:	d025      	beq.n	8024744 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 80246f8:	9b07      	ldr	r3, [sp, #28]
 80246fa:	9829      	ldr	r0, [sp, #164]	; 0xa4
 80246fc:	3b01      	subs	r3, #1
 80246fe:	fb00 5003 	mla	r0, r0, r3, r5
 8024702:	1400      	asrs	r0, r0, #16
 8024704:	f53f ae89 	bmi.w	802441a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8024708:	3901      	subs	r1, #1
 802470a:	4288      	cmp	r0, r1
 802470c:	f6bf ae85 	bge.w	802441a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8024710:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8024712:	fb01 6303 	mla	r3, r1, r3, r6
 8024716:	141b      	asrs	r3, r3, #16
 8024718:	f53f ae7f 	bmi.w	802441a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802471c:	3a01      	subs	r2, #1
 802471e:	4293      	cmp	r3, r2
 8024720:	f6bf ae7b 	bge.w	802441a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8024724:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024726:	f8dd b01c 	ldr.w	fp, [sp, #28]
 802472a:	f103 0e03 	add.w	lr, r3, #3
 802472e:	f1bb 0f00 	cmp.w	fp, #0
 8024732:	dc6e      	bgt.n	8024812 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 8024734:	9b07      	ldr	r3, [sp, #28]
 8024736:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802473a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802473c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8024740:	4423      	add	r3, r4
 8024742:	930a      	str	r3, [sp, #40]	; 0x28
 8024744:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8024746:	2b00      	cmp	r3, #0
 8024748:	f340 81ab 	ble.w	8024aa2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 802474c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8024750:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8024752:	ee30 0a04 	vadd.f32	s0, s0, s8
 8024756:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802475a:	eef0 6a62 	vmov.f32	s13, s5
 802475e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8024762:	ee31 1a05 	vadd.f32	s2, s2, s10
 8024766:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802476a:	ee16 5a90 	vmov	r5, s13
 802476e:	eef0 6a43 	vmov.f32	s13, s6
 8024772:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024776:	ee16 6a90 	vmov	r6, s13
 802477a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802477e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8024782:	ee77 2a62 	vsub.f32	s5, s14, s5
 8024786:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802478a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802478e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8024792:	ee12 2a90 	vmov	r2, s5
 8024796:	eef0 2a47 	vmov.f32	s5, s14
 802479a:	fb92 f3f3 	sdiv	r3, r2, r3
 802479e:	ee13 2a10 	vmov	r2, s6
 80247a2:	9329      	str	r3, [sp, #164]	; 0xa4
 80247a4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80247a6:	eeb0 3a67 	vmov.f32	s6, s15
 80247aa:	fb92 f3f3 	sdiv	r3, r2, r3
 80247ae:	932a      	str	r3, [sp, #168]	; 0xa8
 80247b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80247b2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80247b4:	3b01      	subs	r3, #1
 80247b6:	9317      	str	r3, [sp, #92]	; 0x5c
 80247b8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80247ba:	bf08      	it	eq
 80247bc:	4613      	moveq	r3, r2
 80247be:	9307      	str	r3, [sp, #28]
 80247c0:	e600      	b.n	80243c4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 80247c2:	f1bc 0f00 	cmp.w	ip, #0
 80247c6:	f43f ae6e 	beq.w	80244a6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 80247ca:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 80247ce:	9308      	str	r3, [sp, #32]
 80247d0:	0e1b      	lsrs	r3, r3, #24
 80247d2:	9311      	str	r3, [sp, #68]	; 0x44
 80247d4:	e667      	b.n	80244a6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 80247d6:	f112 0801 	adds.w	r8, r2, #1
 80247da:	f53f af78 	bmi.w	80246ce <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 80247de:	45c6      	cmp	lr, r8
 80247e0:	f6ff af75 	blt.w	80246ce <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 80247e4:	f110 0801 	adds.w	r8, r0, #1
 80247e8:	f53f af71 	bmi.w	80246ce <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 80247ec:	4543      	cmp	r3, r8
 80247ee:	f6ff af6e 	blt.w	80246ce <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 80247f2:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 80247f4:	b21b      	sxth	r3, r3
 80247f6:	9201      	str	r2, [sp, #4]
 80247f8:	9300      	str	r3, [sp, #0]
 80247fa:	fa0f f38e 	sxth.w	r3, lr
 80247fe:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8024800:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8024804:	e9cd c404 	strd	ip, r4, [sp, #16]
 8024808:	4639      	mov	r1, r7
 802480a:	981b      	ldr	r0, [sp, #108]	; 0x6c
 802480c:	f7ff fc79 	bl	8024102 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 8024810:	e75d      	b.n	80246ce <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8024812:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8024814:	142f      	asrs	r7, r5, #16
 8024816:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8024818:	f3c5 3103 	ubfx	r1, r5, #12, #4
 802481c:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8024820:	1433      	asrs	r3, r6, #16
 8024822:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8024826:	fb02 7303 	mla	r3, r2, r3, r7
 802482a:	eb04 0783 	add.w	r7, r4, r3, lsl #2
 802482e:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8024832:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8024836:	2900      	cmp	r1, #0
 8024838:	f000 812a 	beq.w	8024a90 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 802483c:	687c      	ldr	r4, [r7, #4]
 802483e:	940e      	str	r4, [sp, #56]	; 0x38
 8024840:	0e24      	lsrs	r4, r4, #24
 8024842:	9415      	str	r4, [sp, #84]	; 0x54
 8024844:	b178      	cbz	r0, 8024866 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 8024846:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 802484a:	3a01      	subs	r2, #1
 802484c:	0092      	lsls	r2, r2, #2
 802484e:	3204      	adds	r2, #4
 8024850:	eb07 0802 	add.w	r8, r7, r2
 8024854:	58ba      	ldr	r2, [r7, r2]
 8024856:	9209      	str	r2, [sp, #36]	; 0x24
 8024858:	0e12      	lsrs	r2, r2, #24
 802485a:	9212      	str	r2, [sp, #72]	; 0x48
 802485c:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8024860:	920f      	str	r2, [sp, #60]	; 0x3c
 8024862:	0e12      	lsrs	r2, r2, #24
 8024864:	9216      	str	r2, [sp, #88]	; 0x58
 8024866:	b289      	uxth	r1, r1
 8024868:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802486a:	b280      	uxth	r0, r0
 802486c:	fb01 f900 	mul.w	r9, r1, r0
 8024870:	0109      	lsls	r1, r1, #4
 8024872:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8024876:	eba1 0809 	sub.w	r8, r1, r9
 802487a:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 802487e:	9915      	ldr	r1, [sp, #84]	; 0x54
 8024880:	b280      	uxth	r0, r0
 8024882:	fa1f f888 	uxth.w	r8, r8
 8024886:	1a12      	subs	r2, r2, r0
 8024888:	fb08 f101 	mul.w	r1, r8, r1
 802488c:	b292      	uxth	r2, r2
 802488e:	fb02 110c 	mla	r1, r2, ip, r1
 8024892:	fb00 1104 	mla	r1, r0, r4, r1
 8024896:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8024898:	fb09 1104 	mla	r1, r9, r4, r1
 802489c:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80248a0:	2900      	cmp	r1, #0
 80248a2:	f000 80ec 	beq.w	8024a7e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f4>
 80248a6:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80248aa:	d019      	beq.n	80248e0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 80248ac:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80248b0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80248b4:	fb0c fa0a 	mul.w	sl, ip, sl
 80248b8:	fb0c fc03 	mul.w	ip, ip, r3
 80248bc:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80248c0:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80248c4:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 80248c8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80248cc:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80248d0:	4453      	add	r3, sl
 80248d2:	0a3f      	lsrs	r7, r7, #8
 80248d4:	0a1b      	lsrs	r3, r3, #8
 80248d6:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80248da:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80248de:	433b      	orrs	r3, r7
 80248e0:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80248e2:	2cff      	cmp	r4, #255	; 0xff
 80248e4:	d020      	beq.n	8024928 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x59e>
 80248e6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80248e8:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80248ec:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80248ee:	4367      	muls	r7, r4
 80248f0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80248f2:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80248f6:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80248fa:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80248fc:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8024900:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024904:	fb04 fa0a 	mul.w	sl, r4, sl
 8024908:	44bc      	add	ip, r7
 802490a:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802490e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024912:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8024916:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802491a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802491e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024922:	ea4c 040a 	orr.w	r4, ip, sl
 8024926:	940e      	str	r4, [sp, #56]	; 0x38
 8024928:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802492a:	2cff      	cmp	r4, #255	; 0xff
 802492c:	d020      	beq.n	8024970 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e6>
 802492e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8024930:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8024934:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8024936:	4367      	muls	r7, r4
 8024938:	9c09      	ldr	r4, [sp, #36]	; 0x24
 802493a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802493e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8024942:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8024944:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8024948:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802494c:	fb04 fa0a 	mul.w	sl, r4, sl
 8024950:	44bc      	add	ip, r7
 8024952:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8024956:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802495a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802495e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024962:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024966:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802496a:	ea4c 040a 	orr.w	r4, ip, sl
 802496e:	9409      	str	r4, [sp, #36]	; 0x24
 8024970:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8024972:	2cff      	cmp	r4, #255	; 0xff
 8024974:	d020      	beq.n	80249b8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62e>
 8024976:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8024978:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802497c:	9c16      	ldr	r4, [sp, #88]	; 0x58
 802497e:	4367      	muls	r7, r4
 8024980:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8024982:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8024986:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802498a:	9c16      	ldr	r4, [sp, #88]	; 0x58
 802498c:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8024990:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024994:	fb04 fa0a 	mul.w	sl, r4, sl
 8024998:	44bc      	add	ip, r7
 802499a:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802499e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80249a2:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80249a6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80249aa:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80249ae:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80249b2:	ea4c 040a 	orr.w	r4, ip, sl
 80249b6:	940f      	str	r4, [sp, #60]	; 0x3c
 80249b8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80249ba:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80249be:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80249c2:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80249c6:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80249c8:	fb08 f707 	mul.w	r7, r8, r7
 80249cc:	fb02 770c 	mla	r7, r2, ip, r7
 80249d0:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80249d4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80249d6:	fb00 770c 	mla	r7, r0, ip, r7
 80249da:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80249de:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80249e0:	fb09 770c 	mla	r7, r9, ip, r7
 80249e4:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 80249e8:	fb08 f80c 	mul.w	r8, r8, ip
 80249ec:	0a3f      	lsrs	r7, r7, #8
 80249ee:	fb02 8303 	mla	r3, r2, r3, r8
 80249f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80249f4:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80249f8:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 80249fc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80249fe:	fb00 330a 	mla	r3, r0, sl, r3
 8024a02:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8024a06:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8024a08:	fb09 3c0c 	mla	ip, r9, ip, r3
 8024a0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024a0e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024a12:	434b      	muls	r3, r1
 8024a14:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8024a18:	1c59      	adds	r1, r3, #1
 8024a1a:	ea47 070c 	orr.w	r7, r7, ip
 8024a1e:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8024a22:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8024a26:	b2fa      	uxtb	r2, r7
 8024a28:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8024a2c:	fb12 f200 	smulbb	r2, r2, r0
 8024a30:	b2c9      	uxtb	r1, r1
 8024a32:	fb03 2301 	mla	r3, r3, r1, r2
 8024a36:	b29b      	uxth	r3, r3
 8024a38:	1c5a      	adds	r2, r3, #1
 8024a3a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8024a3e:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8024a42:	fb12 f201 	smulbb	r2, r2, r1
 8024a46:	121b      	asrs	r3, r3, #8
 8024a48:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8024a4c:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8024a50:	0c3f      	lsrs	r7, r7, #16
 8024a52:	fb03 2300 	mla	r3, r3, r0, r2
 8024a56:	b29b      	uxth	r3, r3
 8024a58:	1c5a      	adds	r2, r3, #1
 8024a5a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8024a5e:	121b      	asrs	r3, r3, #8
 8024a60:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8024a64:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8024a68:	fb13 f101 	smulbb	r1, r3, r1
 8024a6c:	fb07 1700 	mla	r7, r7, r0, r1
 8024a70:	b2bf      	uxth	r7, r7
 8024a72:	1c79      	adds	r1, r7, #1
 8024a74:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 8024a78:	123f      	asrs	r7, r7, #8
 8024a7a:	f80e 7c01 	strb.w	r7, [lr, #-1]
 8024a7e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8024a80:	f10e 0e03 	add.w	lr, lr, #3
 8024a84:	f10b 3bff 	add.w	fp, fp, #4294967295
 8024a88:	441d      	add	r5, r3
 8024a8a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8024a8c:	441e      	add	r6, r3
 8024a8e:	e64e      	b.n	802472e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a4>
 8024a90:	2800      	cmp	r0, #0
 8024a92:	f43f aee8 	beq.w	8024866 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 8024a96:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8024a9a:	9209      	str	r2, [sp, #36]	; 0x24
 8024a9c:	0e12      	lsrs	r2, r2, #24
 8024a9e:	9212      	str	r2, [sp, #72]	; 0x48
 8024aa0:	e6e1      	b.n	8024866 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 8024aa2:	b01d      	add	sp, #116	; 0x74
 8024aa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08024aa8 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 8024aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024aac:	b087      	sub	sp, #28
 8024aae:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	; 0x44
 8024ab2:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 8024ab6:	fb05 7003 	mla	r0, r5, r3, r7
 8024aba:	2d00      	cmp	r5, #0
 8024abc:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 8024ac0:	f89d e050 	ldrb.w	lr, [sp, #80]	; 0x50
 8024ac4:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 8024ac8:	f2c0 810a 	blt.w	8024ce0 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 8024acc:	45a8      	cmp	r8, r5
 8024ace:	f340 8107 	ble.w	8024ce0 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 8024ad2:	2f00      	cmp	r7, #0
 8024ad4:	f2c0 8102 	blt.w	8024cdc <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 8024ad8:	42bb      	cmp	r3, r7
 8024ada:	f340 80ff 	ble.w	8024cdc <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 8024ade:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 8024ae2:	1c7a      	adds	r2, r7, #1
 8024ae4:	f100 80ff 	bmi.w	8024ce6 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 8024ae8:	4293      	cmp	r3, r2
 8024aea:	f340 80fc 	ble.w	8024ce6 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 8024aee:	2c00      	cmp	r4, #0
 8024af0:	f000 80fb 	beq.w	8024cea <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x242>
 8024af4:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8024af8:	3501      	adds	r5, #1
 8024afa:	f100 80fa 	bmi.w	8024cf2 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 8024afe:	45a8      	cmp	r8, r5
 8024b00:	f340 80f7 	ble.w	8024cf2 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 8024b04:	f1be 0f00 	cmp.w	lr, #0
 8024b08:	f000 80f6 	beq.w	8024cf8 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x250>
 8024b0c:	2f00      	cmp	r7, #0
 8024b0e:	f2c0 80ee 	blt.w	8024cee <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 8024b12:	42bb      	cmp	r3, r7
 8024b14:	f340 80eb 	ble.w	8024cee <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 8024b18:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 8024b1c:	3701      	adds	r7, #1
 8024b1e:	f100 80ee 	bmi.w	8024cfe <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 8024b22:	42bb      	cmp	r3, r7
 8024b24:	f340 80eb 	ble.w	8024cfe <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 8024b28:	2c00      	cmp	r4, #0
 8024b2a:	f000 80ea 	beq.w	8024d02 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x25a>
 8024b2e:	3301      	adds	r3, #1
 8024b30:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8024b34:	fa1f fc84 	uxth.w	ip, r4
 8024b38:	fa1f fe8e 	uxth.w	lr, lr
 8024b3c:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8024b40:	fb0c f90e 	mul.w	r9, ip, lr
 8024b44:	0e13      	lsrs	r3, r2, #24
 8024b46:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8024b4a:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 8024b4e:	9302      	str	r3, [sp, #8]
 8024b50:	ebac 0709 	sub.w	r7, ip, r9
 8024b54:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 8024b58:	fa1f f48e 	uxth.w	r4, lr
 8024b5c:	f006 1eff 	and.w	lr, r6, #16711935	; 0xff00ff
 8024b60:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8024b64:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 8024b68:	fb0a fe0e 	mul.w	lr, sl, lr
 8024b6c:	1b1b      	subs	r3, r3, r4
 8024b6e:	fb0a f606 	mul.w	r6, sl, r6
 8024b72:	ea4f 6815 	mov.w	r8, r5, lsr #24
 8024b76:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8024b7a:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8024b7e:	b29b      	uxth	r3, r3
 8024b80:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024b84:	b2bf      	uxth	r7, r7
 8024b86:	9301      	str	r3, [sp, #4]
 8024b88:	44e6      	add	lr, ip
 8024b8a:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 8024b8e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024b92:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8024b96:	f00e 13ff 	and.w	r3, lr, #16711935	; 0xff00ff
 8024b9a:	9303      	str	r3, [sp, #12]
 8024b9c:	0a33      	lsrs	r3, r6, #8
 8024b9e:	f000 16ff 	and.w	r6, r0, #16711935	; 0xff00ff
 8024ba2:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8024ba6:	9304      	str	r3, [sp, #16]
 8024ba8:	fb0b f606 	mul.w	r6, fp, r6
 8024bac:	fb0b f000 	mul.w	r0, fp, r0
 8024bb0:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 8024bb4:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8024bb8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024bbc:	44b6      	add	lr, r6
 8024bbe:	f500 7680 	add.w	r6, r0, #256	; 0x100
 8024bc2:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 8024bc6:	f005 16ff 	and.w	r6, r5, #16711935	; 0xff00ff
 8024bca:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8024bce:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024bd2:	fb08 f606 	mul.w	r6, r8, r6
 8024bd6:	0a03      	lsrs	r3, r0, #8
 8024bd8:	fb08 f505 	mul.w	r5, r8, r5
 8024bdc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024be0:	0a30      	lsrs	r0, r6, #8
 8024be2:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8024be6:	9305      	str	r3, [sp, #20]
 8024be8:	0e13      	lsrs	r3, r2, #24
 8024bea:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8024bee:	fb0e fe07 	mul.w	lr, lr, r7
 8024bf2:	4430      	add	r0, r6
 8024bf4:	f505 7680 	add.w	r6, r5, #256	; 0x100
 8024bf8:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8024bfc:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 8024c00:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8024c04:	0a00      	lsrs	r0, r0, #8
 8024c06:	435e      	muls	r6, r3
 8024c08:	0a2d      	lsrs	r5, r5, #8
 8024c0a:	435a      	muls	r2, r3
 8024c0c:	9b03      	ldr	r3, [sp, #12]
 8024c0e:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 8024c12:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8024c16:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8024c1a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024c1e:	44b4      	add	ip, r6
 8024c20:	f502 7680 	add.w	r6, r2, #256	; 0x100
 8024c24:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024c28:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 8024c2c:	9e01      	ldr	r6, [sp, #4]
 8024c2e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024c32:	fb03 ee06 	mla	lr, r3, r6, lr
 8024c36:	9b04      	ldr	r3, [sp, #16]
 8024c38:	0a12      	lsrs	r2, r2, #8
 8024c3a:	fb0c ee09 	mla	lr, ip, r9, lr
 8024c3e:	f403 467f 	and.w	r6, r3, #65280	; 0xff00
 8024c42:	9b05      	ldr	r3, [sp, #20]
 8024c44:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8024c48:	fb00 ee04 	mla	lr, r0, r4, lr
 8024c4c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024c50:	f00e 10ff 	and.w	r0, lr, #16711935	; 0xff00ff
 8024c54:	f403 4e7f 	and.w	lr, r3, #65280	; 0xff00
 8024c58:	9b01      	ldr	r3, [sp, #4]
 8024c5a:	fb07 fe0e 	mul.w	lr, r7, lr
 8024c5e:	fb07 f70b 	mul.w	r7, r7, fp
 8024c62:	fb03 ee06 	mla	lr, r3, r6, lr
 8024c66:	fb03 730a 	mla	r3, r3, sl, r7
 8024c6a:	fb09 e202 	mla	r2, r9, r2, lr
 8024c6e:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8024c72:	fb04 2e0e 	mla	lr, r4, lr, r2
 8024c76:	fb04 3408 	mla	r4, r4, r8, r3
 8024c7a:	9b02      	ldr	r3, [sp, #8]
 8024c7c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024c80:	fb09 4903 	mla	r9, r9, r3, r4
 8024c84:	780b      	ldrb	r3, [r1, #0]
 8024c86:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8024c8a:	ea6f 2929 	mvn.w	r9, r9, asr #8
 8024c8e:	ea40 0e0e 	orr.w	lr, r0, lr
 8024c92:	fa5f f989 	uxtb.w	r9, r9
 8024c96:	fb03 f209 	mul.w	r2, r3, r9
 8024c9a:	1c53      	adds	r3, r2, #1
 8024c9c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8024ca0:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 8024ca4:	700b      	strb	r3, [r1, #0]
 8024ca6:	784b      	ldrb	r3, [r1, #1]
 8024ca8:	fb03 f309 	mul.w	r3, r3, r9
 8024cac:	1c5a      	adds	r2, r3, #1
 8024cae:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8024cb2:	ea4f 231e 	mov.w	r3, lr, lsr #8
 8024cb6:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8024cba:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8024cbe:	704b      	strb	r3, [r1, #1]
 8024cc0:	788b      	ldrb	r3, [r1, #2]
 8024cc2:	fb03 f909 	mul.w	r9, r3, r9
 8024cc6:	f109 0301 	add.w	r3, r9, #1
 8024cca:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 8024cce:	eb0e 2e19 	add.w	lr, lr, r9, lsr #8
 8024cd2:	f881 e002 	strb.w	lr, [r1, #2]
 8024cd6:	b007      	add	sp, #28
 8024cd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024cdc:	2600      	movs	r6, #0
 8024cde:	e700      	b.n	8024ae2 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3a>
 8024ce0:	2000      	movs	r0, #0
 8024ce2:	4606      	mov	r6, r0
 8024ce4:	e708      	b.n	8024af8 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 8024ce6:	2000      	movs	r0, #0
 8024ce8:	e706      	b.n	8024af8 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 8024cea:	4620      	mov	r0, r4
 8024cec:	e704      	b.n	8024af8 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 8024cee:	2500      	movs	r5, #0
 8024cf0:	e714      	b.n	8024b1c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x74>
 8024cf2:	2200      	movs	r2, #0
 8024cf4:	4615      	mov	r5, r2
 8024cf6:	e71d      	b.n	8024b34 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8024cf8:	4672      	mov	r2, lr
 8024cfa:	4675      	mov	r5, lr
 8024cfc:	e71a      	b.n	8024b34 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8024cfe:	2200      	movs	r2, #0
 8024d00:	e718      	b.n	8024b34 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8024d02:	4622      	mov	r2, r4
 8024d04:	e716      	b.n	8024b34 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>

08024d06 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024d06:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024d0a:	b099      	sub	sp, #100	; 0x64
 8024d0c:	e9cd 1215 	strd	r1, r2, [sp, #84]	; 0x54
 8024d10:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8024d12:	9017      	str	r0, [sp, #92]	; 0x5c
 8024d14:	9306      	str	r3, [sp, #24]
 8024d16:	6850      	ldr	r0, [r2, #4]
 8024d18:	6812      	ldr	r2, [r2, #0]
 8024d1a:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
 8024d1e:	e9dd 5623 	ldrd	r5, r6, [sp, #140]	; 0x8c
 8024d22:	fb00 1303 	mla	r3, r0, r3, r1
 8024d26:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8024d2a:	18d3      	adds	r3, r2, r3
 8024d2c:	9309      	str	r3, [sp, #36]	; 0x24
 8024d2e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8024d30:	681b      	ldr	r3, [r3, #0]
 8024d32:	930e      	str	r3, [sp, #56]	; 0x38
 8024d34:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8024d36:	2b00      	cmp	r3, #0
 8024d38:	dc03      	bgt.n	8024d42 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8024d3a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8024d3c:	2b00      	cmp	r3, #0
 8024d3e:	f340 8360 	ble.w	8025402 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 8024d42:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8024d44:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024d48:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8024d4c:	1e48      	subs	r0, r1, #1
 8024d4e:	1e57      	subs	r7, r2, #1
 8024d50:	9b06      	ldr	r3, [sp, #24]
 8024d52:	2b00      	cmp	r3, #0
 8024d54:	f340 817b 	ble.w	802504e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x348>
 8024d58:	ea5f 4c25 	movs.w	ip, r5, asr #16
 8024d5c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8024d60:	d406      	bmi.n	8024d70 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8024d62:	4584      	cmp	ip, r0
 8024d64:	da04      	bge.n	8024d70 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8024d66:	2b00      	cmp	r3, #0
 8024d68:	db02      	blt.n	8024d70 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8024d6a:	42bb      	cmp	r3, r7
 8024d6c:	f2c0 8170 	blt.w	8025050 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8024d70:	f11c 0c01 	adds.w	ip, ip, #1
 8024d74:	f100 8160 	bmi.w	8025038 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 8024d78:	4561      	cmp	r1, ip
 8024d7a:	f2c0 815d 	blt.w	8025038 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 8024d7e:	3301      	adds	r3, #1
 8024d80:	f100 815a 	bmi.w	8025038 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 8024d84:	429a      	cmp	r2, r3
 8024d86:	f2c0 8157 	blt.w	8025038 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 8024d8a:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8024d8e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8024d90:	f1b8 0f00 	cmp.w	r8, #0
 8024d94:	f340 8179 	ble.w	802508a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 8024d98:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8024d9a:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8024d9e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8024da0:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8024da4:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8024da8:	142a      	asrs	r2, r5, #16
 8024daa:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8024dae:	689b      	ldr	r3, [r3, #8]
 8024db0:	f100 81be 	bmi.w	8025130 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8024db4:	f103 39ff 	add.w	r9, r3, #4294967295
 8024db8:	454a      	cmp	r2, r9
 8024dba:	f280 81b9 	bge.w	8025130 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8024dbe:	f1bc 0f00 	cmp.w	ip, #0
 8024dc2:	f2c0 81b5 	blt.w	8025130 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8024dc6:	f10e 39ff 	add.w	r9, lr, #4294967295
 8024dca:	45cc      	cmp	ip, r9
 8024dcc:	f280 81b0 	bge.w	8025130 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8024dd0:	b21b      	sxth	r3, r3
 8024dd2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8024dd4:	fb0c 2203 	mla	r2, ip, r3, r2
 8024dd8:	eb04 0982 	add.w	r9, r4, r2, lsl #2
 8024ddc:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8024de0:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8024de4:	2900      	cmp	r1, #0
 8024de6:	f000 8197 	beq.w	8025118 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 8024dea:	f8d9 4004 	ldr.w	r4, [r9, #4]
 8024dee:	940a      	str	r4, [sp, #40]	; 0x28
 8024df0:	0e24      	lsrs	r4, r4, #24
 8024df2:	9411      	str	r4, [sp, #68]	; 0x44
 8024df4:	b180      	cbz	r0, 8024e18 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 8024df6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8024dfa:	3b01      	subs	r3, #1
 8024dfc:	009b      	lsls	r3, r3, #2
 8024dfe:	3304      	adds	r3, #4
 8024e00:	eb09 0c03 	add.w	ip, r9, r3
 8024e04:	f859 3003 	ldr.w	r3, [r9, r3]
 8024e08:	9307      	str	r3, [sp, #28]
 8024e0a:	0e1b      	lsrs	r3, r3, #24
 8024e0c:	930f      	str	r3, [sp, #60]	; 0x3c
 8024e0e:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8024e12:	930b      	str	r3, [sp, #44]	; 0x2c
 8024e14:	0e1b      	lsrs	r3, r3, #24
 8024e16:	9312      	str	r3, [sp, #72]	; 0x48
 8024e18:	b289      	uxth	r1, r1
 8024e1a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8024e1c:	b280      	uxth	r0, r0
 8024e1e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8024e20:	fb01 fa00 	mul.w	sl, r1, r0
 8024e24:	0109      	lsls	r1, r1, #4
 8024e26:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8024e2a:	eba1 090a 	sub.w	r9, r1, sl
 8024e2e:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 8024e32:	b280      	uxth	r0, r0
 8024e34:	fa1f f989 	uxth.w	r9, r9
 8024e38:	1a09      	subs	r1, r1, r0
 8024e3a:	fb09 f303 	mul.w	r3, r9, r3
 8024e3e:	b289      	uxth	r1, r1
 8024e40:	fb01 330e 	mla	r3, r1, lr, r3
 8024e44:	fb00 3304 	mla	r3, r0, r4, r3
 8024e48:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8024e4a:	fb0a 3304 	mla	r3, sl, r4, r3
 8024e4e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024e52:	2b00      	cmp	r3, #0
 8024e54:	f000 80e8 	beq.w	8025028 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8024e58:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8024e5c:	d01b      	beq.n	8024e96 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x190>
 8024e5e:	f002 1bff 	and.w	fp, r2, #16711935	; 0xff00ff
 8024e62:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8024e66:	fb0e fb0b 	mul.w	fp, lr, fp
 8024e6a:	fb0e fe02 	mul.w	lr, lr, r2
 8024e6e:	ea4f 221b 	mov.w	r2, fp, lsr #8
 8024e72:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8024e76:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8024e7a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8024e7e:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8024e82:	445a      	add	r2, fp
 8024e84:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024e88:	0a12      	lsrs	r2, r2, #8
 8024e8a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8024e8e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8024e92:	ea42 020c 	orr.w	r2, r2, ip
 8024e96:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8024e98:	2cff      	cmp	r4, #255	; 0xff
 8024e9a:	d021      	beq.n	8024ee0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 8024e9c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8024e9e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8024ea2:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8024ea4:	fb04 fc0c 	mul.w	ip, r4, ip
 8024ea8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8024eaa:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8024eae:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 8024eb2:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8024eb4:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8024eb8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024ebc:	fb04 fb0b 	mul.w	fp, r4, fp
 8024ec0:	44e6      	add	lr, ip
 8024ec2:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 8024ec6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024eca:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 8024ece:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024ed2:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8024ed6:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8024eda:	ea4e 040b 	orr.w	r4, lr, fp
 8024ede:	940a      	str	r4, [sp, #40]	; 0x28
 8024ee0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8024ee2:	2cff      	cmp	r4, #255	; 0xff
 8024ee4:	d021      	beq.n	8024f2a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8024ee6:	9c07      	ldr	r4, [sp, #28]
 8024ee8:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8024eec:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8024eee:	fb04 fc0c 	mul.w	ip, r4, ip
 8024ef2:	9c07      	ldr	r4, [sp, #28]
 8024ef4:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8024ef8:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 8024efc:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8024efe:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8024f02:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024f06:	fb04 fb0b 	mul.w	fp, r4, fp
 8024f0a:	44e6      	add	lr, ip
 8024f0c:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 8024f10:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024f14:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 8024f18:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024f1c:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8024f20:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8024f24:	ea4e 040b 	orr.w	r4, lr, fp
 8024f28:	9407      	str	r4, [sp, #28]
 8024f2a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8024f2c:	2cff      	cmp	r4, #255	; 0xff
 8024f2e:	d021      	beq.n	8024f74 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 8024f30:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8024f32:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8024f36:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8024f38:	fb04 fc0c 	mul.w	ip, r4, ip
 8024f3c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8024f3e:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8024f42:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 8024f46:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8024f48:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8024f4c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024f50:	fb04 fb0b 	mul.w	fp, r4, fp
 8024f54:	44e6      	add	lr, ip
 8024f56:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 8024f5a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024f5e:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 8024f62:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024f66:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8024f6a:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8024f6e:	ea4e 040b 	orr.w	r4, lr, fp
 8024f72:	940b      	str	r4, [sp, #44]	; 0x2c
 8024f74:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8024f76:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8024f7a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8024f7e:	2bff      	cmp	r3, #255	; 0xff
 8024f80:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8024f84:	9c07      	ldr	r4, [sp, #28]
 8024f86:	fb09 fc0c 	mul.w	ip, r9, ip
 8024f8a:	fb01 cc0e 	mla	ip, r1, lr, ip
 8024f8e:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8024f92:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8024f94:	fb00 cc0e 	mla	ip, r0, lr, ip
 8024f98:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8024f9c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8024f9e:	fb0a cc0e 	mla	ip, sl, lr, ip
 8024fa2:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8024fa6:	fb09 f90e 	mul.w	r9, r9, lr
 8024faa:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024fae:	fb01 9202 	mla	r2, r1, r2, r9
 8024fb2:	9907      	ldr	r1, [sp, #28]
 8024fb4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024fb8:	f401 4b7f 	and.w	fp, r1, #65280	; 0xff00
 8024fbc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8024fbe:	fb00 220b 	mla	r2, r0, fp, r2
 8024fc2:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 8024fc6:	fb0a 2a00 	mla	sl, sl, r0, r2
 8024fca:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024fce:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024fd2:	ea4c 0c0a 	orr.w	ip, ip, sl
 8024fd6:	fa5f f08c 	uxtb.w	r0, ip
 8024fda:	f3cc 2107 	ubfx	r1, ip, #8, #8
 8024fde:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8024fe2:	f000 80a2 	beq.w	802512a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 8024fe6:	43db      	mvns	r3, r3
 8024fe8:	783a      	ldrb	r2, [r7, #0]
 8024fea:	f897 a002 	ldrb.w	sl, [r7, #2]
 8024fee:	b2db      	uxtb	r3, r3
 8024ff0:	fb02 fe03 	mul.w	lr, r2, r3
 8024ff4:	fb0a fa03 	mul.w	sl, sl, r3
 8024ff8:	f10e 0201 	add.w	r2, lr, #1
 8024ffc:	eb02 221e 	add.w	r2, r2, lr, lsr #8
 8025000:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8025004:	703a      	strb	r2, [r7, #0]
 8025006:	787a      	ldrb	r2, [r7, #1]
 8025008:	fb02 f003 	mul.w	r0, r2, r3
 802500c:	f10a 0301 	add.w	r3, sl, #1
 8025010:	1c42      	adds	r2, r0, #1
 8025012:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8025016:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 802501a:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 802501e:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8025022:	707a      	strb	r2, [r7, #1]
 8025024:	f887 c002 	strb.w	ip, [r7, #2]
 8025028:	9b25      	ldr	r3, [sp, #148]	; 0x94
 802502a:	3703      	adds	r7, #3
 802502c:	f108 38ff 	add.w	r8, r8, #4294967295
 8025030:	441d      	add	r5, r3
 8025032:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8025034:	441e      	add	r6, r3
 8025036:	e6ab      	b.n	8024d90 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8025038:	9b25      	ldr	r3, [sp, #148]	; 0x94
 802503a:	441d      	add	r5, r3
 802503c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802503e:	441e      	add	r6, r3
 8025040:	9b06      	ldr	r3, [sp, #24]
 8025042:	3b01      	subs	r3, #1
 8025044:	9306      	str	r3, [sp, #24]
 8025046:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025048:	3303      	adds	r3, #3
 802504a:	9309      	str	r3, [sp, #36]	; 0x24
 802504c:	e680      	b.n	8024d50 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 802504e:	d024      	beq.n	802509a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8025050:	9b06      	ldr	r3, [sp, #24]
 8025052:	9825      	ldr	r0, [sp, #148]	; 0x94
 8025054:	3b01      	subs	r3, #1
 8025056:	fb00 5003 	mla	r0, r0, r3, r5
 802505a:	1400      	asrs	r0, r0, #16
 802505c:	f53f ae95 	bmi.w	8024d8a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8025060:	3901      	subs	r1, #1
 8025062:	4288      	cmp	r0, r1
 8025064:	f6bf ae91 	bge.w	8024d8a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8025068:	9926      	ldr	r1, [sp, #152]	; 0x98
 802506a:	fb01 6303 	mla	r3, r1, r3, r6
 802506e:	141b      	asrs	r3, r3, #16
 8025070:	f53f ae8b 	bmi.w	8024d8a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8025074:	3a01      	subs	r2, #1
 8025076:	4293      	cmp	r3, r2
 8025078:	f6bf ae87 	bge.w	8024d8a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 802507c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802507e:	f8dd b018 	ldr.w	fp, [sp, #24]
 8025082:	1cdf      	adds	r7, r3, #3
 8025084:	f1bb 0f00 	cmp.w	fp, #0
 8025088:	dc6e      	bgt.n	8025168 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
 802508a:	9b06      	ldr	r3, [sp, #24]
 802508c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8025090:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025092:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8025096:	4423      	add	r3, r4
 8025098:	9309      	str	r3, [sp, #36]	; 0x24
 802509a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802509c:	2b00      	cmp	r3, #0
 802509e:	f340 81b0 	ble.w	8025402 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 80250a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80250a6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80250a8:	ee30 0a04 	vadd.f32	s0, s0, s8
 80250ac:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80250b0:	eef0 6a62 	vmov.f32	s13, s5
 80250b4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80250b8:	ee31 1a05 	vadd.f32	s2, s2, s10
 80250bc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80250c0:	ee16 5a90 	vmov	r5, s13
 80250c4:	eef0 6a43 	vmov.f32	s13, s6
 80250c8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80250cc:	ee16 6a90 	vmov	r6, s13
 80250d0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80250d4:	ee61 7a27 	vmul.f32	s15, s2, s15
 80250d8:	ee77 2a62 	vsub.f32	s5, s14, s5
 80250dc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80250e0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80250e4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80250e8:	ee12 2a90 	vmov	r2, s5
 80250ec:	eef0 2a47 	vmov.f32	s5, s14
 80250f0:	fb92 f3f3 	sdiv	r3, r2, r3
 80250f4:	ee13 2a10 	vmov	r2, s6
 80250f8:	9325      	str	r3, [sp, #148]	; 0x94
 80250fa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80250fc:	eeb0 3a67 	vmov.f32	s6, s15
 8025100:	fb92 f3f3 	sdiv	r3, r2, r3
 8025104:	9326      	str	r3, [sp, #152]	; 0x98
 8025106:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8025108:	9a16      	ldr	r2, [sp, #88]	; 0x58
 802510a:	3b01      	subs	r3, #1
 802510c:	9315      	str	r3, [sp, #84]	; 0x54
 802510e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8025110:	bf08      	it	eq
 8025112:	4613      	moveq	r3, r2
 8025114:	9306      	str	r3, [sp, #24]
 8025116:	e60d      	b.n	8024d34 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8025118:	2800      	cmp	r0, #0
 802511a:	f43f ae7d 	beq.w	8024e18 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 802511e:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8025122:	9307      	str	r3, [sp, #28]
 8025124:	0e1b      	lsrs	r3, r3, #24
 8025126:	930f      	str	r3, [sp, #60]	; 0x3c
 8025128:	e676      	b.n	8024e18 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 802512a:	7038      	strb	r0, [r7, #0]
 802512c:	7079      	strb	r1, [r7, #1]
 802512e:	e779      	b.n	8025024 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 8025130:	f112 0901 	adds.w	r9, r2, #1
 8025134:	f53f af78 	bmi.w	8025028 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8025138:	454b      	cmp	r3, r9
 802513a:	f6ff af75 	blt.w	8025028 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 802513e:	f11c 0901 	adds.w	r9, ip, #1
 8025142:	f53f af71 	bmi.w	8025028 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8025146:	45ce      	cmp	lr, r9
 8025148:	f6ff af6e 	blt.w	8025028 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 802514c:	b21b      	sxth	r3, r3
 802514e:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 8025152:	fa0f f28e 	sxth.w	r2, lr
 8025156:	e9cd 1003 	strd	r1, r0, [sp, #12]
 802515a:	9200      	str	r2, [sp, #0]
 802515c:	4639      	mov	r1, r7
 802515e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8025160:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8025162:	f7ff fca1 	bl	8024aa8 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 8025166:	e75f      	b.n	8025028 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8025168:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802516a:	1429      	asrs	r1, r5, #16
 802516c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802516e:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8025172:	f9b3 c008 	ldrsh.w	ip, [r3, #8]
 8025176:	1433      	asrs	r3, r6, #16
 8025178:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802517c:	fb0c 1303 	mla	r3, ip, r3, r1
 8025180:	990e      	ldr	r1, [sp, #56]	; 0x38
 8025182:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8025186:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 802518a:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 802518e:	2a00      	cmp	r2, #0
 8025190:	f000 8129 	beq.w	80253e6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e0>
 8025194:	684c      	ldr	r4, [r1, #4]
 8025196:	940c      	str	r4, [sp, #48]	; 0x30
 8025198:	0e24      	lsrs	r4, r4, #24
 802519a:	9413      	str	r4, [sp, #76]	; 0x4c
 802519c:	b198      	cbz	r0, 80251c6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 802519e:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
 80251a2:	f10c 3cff 	add.w	ip, ip, #4294967295
 80251a6:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80251aa:	f10c 0c04 	add.w	ip, ip, #4
 80251ae:	eb01 080c 	add.w	r8, r1, ip
 80251b2:	f851 100c 	ldr.w	r1, [r1, ip]
 80251b6:	9108      	str	r1, [sp, #32]
 80251b8:	0e09      	lsrs	r1, r1, #24
 80251ba:	9110      	str	r1, [sp, #64]	; 0x40
 80251bc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80251c0:	910d      	str	r1, [sp, #52]	; 0x34
 80251c2:	0e09      	lsrs	r1, r1, #24
 80251c4:	9114      	str	r1, [sp, #80]	; 0x50
 80251c6:	b292      	uxth	r2, r2
 80251c8:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80251ca:	b280      	uxth	r0, r0
 80251cc:	fb02 f900 	mul.w	r9, r2, r0
 80251d0:	0112      	lsls	r2, r2, #4
 80251d2:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80251d6:	eba2 0809 	sub.w	r8, r2, r9
 80251da:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 80251de:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80251e0:	b280      	uxth	r0, r0
 80251e2:	fa1f f888 	uxth.w	r8, r8
 80251e6:	1a09      	subs	r1, r1, r0
 80251e8:	fb08 f202 	mul.w	r2, r8, r2
 80251ec:	b289      	uxth	r1, r1
 80251ee:	fb01 220e 	mla	r2, r1, lr, r2
 80251f2:	fb00 2204 	mla	r2, r0, r4, r2
 80251f6:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80251f8:	fb09 2204 	mla	r2, r9, r4, r2
 80251fc:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8025200:	2a00      	cmp	r2, #0
 8025202:	f000 80e8 	beq.w	80253d6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d0>
 8025206:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 802520a:	d01b      	beq.n	8025244 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53e>
 802520c:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8025210:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025214:	fb0e fa0a 	mul.w	sl, lr, sl
 8025218:	fb0e fe03 	mul.w	lr, lr, r3
 802521c:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8025220:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8025224:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8025228:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802522c:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8025230:	4453      	add	r3, sl
 8025232:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025236:	0a1b      	lsrs	r3, r3, #8
 8025238:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802523c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8025240:	ea43 030c 	orr.w	r3, r3, ip
 8025244:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8025246:	2cff      	cmp	r4, #255	; 0xff
 8025248:	d021      	beq.n	802528e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x588>
 802524a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802524c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8025250:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8025252:	fb04 fc0c 	mul.w	ip, r4, ip
 8025256:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8025258:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 802525c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8025260:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8025262:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8025266:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802526a:	fb04 fa0a 	mul.w	sl, r4, sl
 802526e:	44e6      	add	lr, ip
 8025270:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8025274:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025278:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802527c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025280:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025284:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025288:	ea4e 040a 	orr.w	r4, lr, sl
 802528c:	940c      	str	r4, [sp, #48]	; 0x30
 802528e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8025290:	2cff      	cmp	r4, #255	; 0xff
 8025292:	d021      	beq.n	80252d8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d2>
 8025294:	9c08      	ldr	r4, [sp, #32]
 8025296:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802529a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802529c:	fb04 fc0c 	mul.w	ip, r4, ip
 80252a0:	9c08      	ldr	r4, [sp, #32]
 80252a2:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 80252a6:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80252a8:	fb04 fa0e 	mul.w	sl, r4, lr
 80252ac:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80252b0:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80252b4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80252b8:	44e6      	add	lr, ip
 80252ba:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80252be:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80252c2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80252c6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80252ca:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80252ce:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80252d2:	ea4e 040a 	orr.w	r4, lr, sl
 80252d6:	9408      	str	r4, [sp, #32]
 80252d8:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80252da:	2cff      	cmp	r4, #255	; 0xff
 80252dc:	d021      	beq.n	8025322 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61c>
 80252de:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80252e0:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80252e4:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80252e6:	fb04 fc0c 	mul.w	ip, r4, ip
 80252ea:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80252ec:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80252f0:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80252f4:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80252f6:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80252fa:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80252fe:	fb04 fa0a 	mul.w	sl, r4, sl
 8025302:	44e6      	add	lr, ip
 8025304:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8025308:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802530c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8025310:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025314:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025318:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802531c:	ea4e 040a 	orr.w	r4, lr, sl
 8025320:	940d      	str	r4, [sp, #52]	; 0x34
 8025322:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8025324:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8025328:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802532c:	2aff      	cmp	r2, #255	; 0xff
 802532e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8025332:	9c08      	ldr	r4, [sp, #32]
 8025334:	fb08 fc0c 	mul.w	ip, r8, ip
 8025338:	fb01 cc0e 	mla	ip, r1, lr, ip
 802533c:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8025340:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8025342:	fb00 cc0e 	mla	ip, r0, lr, ip
 8025346:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 802534a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802534c:	fb09 cc0e 	mla	ip, r9, lr, ip
 8025350:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8025354:	fb08 f80e 	mul.w	r8, r8, lr
 8025358:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802535c:	fb01 8303 	mla	r3, r1, r3, r8
 8025360:	9908      	ldr	r1, [sp, #32]
 8025362:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025366:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 802536a:	990d      	ldr	r1, [sp, #52]	; 0x34
 802536c:	fb00 330a 	mla	r3, r0, sl, r3
 8025370:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 8025374:	fb09 3e0e 	mla	lr, r9, lr, r3
 8025378:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802537c:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8025380:	ea4c 0c0e 	orr.w	ip, ip, lr
 8025384:	fa5f f08c 	uxtb.w	r0, ip
 8025388:	f3cc 2107 	ubfx	r1, ip, #8, #8
 802538c:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8025390:	d032      	beq.n	80253f8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f2>
 8025392:	43d2      	mvns	r2, r2
 8025394:	f817 ec03 	ldrb.w	lr, [r7, #-3]
 8025398:	b2d2      	uxtb	r2, r2
 802539a:	fb0e fe02 	mul.w	lr, lr, r2
 802539e:	f10e 0301 	add.w	r3, lr, #1
 80253a2:	eb03 231e 	add.w	r3, r3, lr, lsr #8
 80253a6:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 80253aa:	f817 0c02 	ldrb.w	r0, [r7, #-2]
 80253ae:	4350      	muls	r0, r2
 80253b0:	f807 3c03 	strb.w	r3, [r7, #-3]
 80253b4:	1c43      	adds	r3, r0, #1
 80253b6:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80253ba:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80253be:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80253c2:	4353      	muls	r3, r2
 80253c4:	f807 1c02 	strb.w	r1, [r7, #-2]
 80253c8:	1c5a      	adds	r2, r3, #1
 80253ca:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80253ce:	eb0c 2c12 	add.w	ip, ip, r2, lsr #8
 80253d2:	f807 cc01 	strb.w	ip, [r7, #-1]
 80253d6:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80253d8:	3703      	adds	r7, #3
 80253da:	f10b 3bff 	add.w	fp, fp, #4294967295
 80253de:	441d      	add	r5, r3
 80253e0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80253e2:	441e      	add	r6, r3
 80253e4:	e64e      	b.n	8025084 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 80253e6:	2800      	cmp	r0, #0
 80253e8:	f43f aeed 	beq.w	80251c6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 80253ec:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 80253f0:	9108      	str	r1, [sp, #32]
 80253f2:	0e09      	lsrs	r1, r1, #24
 80253f4:	9110      	str	r1, [sp, #64]	; 0x40
 80253f6:	e6e6      	b.n	80251c6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 80253f8:	f807 0c03 	strb.w	r0, [r7, #-3]
 80253fc:	f807 1c02 	strb.w	r1, [r7, #-2]
 8025400:	e7e7      	b.n	80253d2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6cc>
 8025402:	b019      	add	sp, #100	; 0x64
 8025404:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08025408 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 8025408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802540c:	e9dd 400b 	ldrd	r4, r0, [sp, #44]	; 0x2c
 8025410:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8025414:	2c00      	cmp	r4, #0
 8025416:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 802541a:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 802541e:	fb00 4e03 	mla	lr, r0, r3, r4
 8025422:	f89d c038 	ldrb.w	ip, [sp, #56]	; 0x38
 8025426:	f2c0 80b8 	blt.w	802559a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 802542a:	45a1      	cmp	r9, r4
 802542c:	f340 80b5 	ble.w	802559a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8025430:	2800      	cmp	r0, #0
 8025432:	f2c0 80b2 	blt.w	802559a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8025436:	4580      	cmp	r8, r0
 8025438:	f340 80af 	ble.w	802559a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 802543c:	ea4f 055e 	mov.w	r5, lr, lsr #1
 8025440:	f01e 0f01 	tst.w	lr, #1
 8025444:	5d56      	ldrb	r6, [r2, r5]
 8025446:	bf0c      	ite	eq
 8025448:	f006 060f 	andeq.w	r6, r6, #15
 802544c:	1136      	asrne	r6, r6, #4
 802544e:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8025452:	b2f6      	uxtb	r6, r6
 8025454:	f114 0a01 	adds.w	sl, r4, #1
 8025458:	f100 80a1 	bmi.w	802559e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 802545c:	45d1      	cmp	r9, sl
 802545e:	f340 809e 	ble.w	802559e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 8025462:	2800      	cmp	r0, #0
 8025464:	f2c0 809b 	blt.w	802559e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 8025468:	4580      	cmp	r8, r0
 802546a:	f340 8098 	ble.w	802559e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 802546e:	2f00      	cmp	r7, #0
 8025470:	f000 8097 	beq.w	80255a2 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19a>
 8025474:	f10e 0b01 	add.w	fp, lr, #1
 8025478:	ea4f 055b 	mov.w	r5, fp, lsr #1
 802547c:	f01b 0f01 	tst.w	fp, #1
 8025480:	5d55      	ldrb	r5, [r2, r5]
 8025482:	bf0c      	ite	eq
 8025484:	f005 050f 	andeq.w	r5, r5, #15
 8025488:	112d      	asrne	r5, r5, #4
 802548a:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 802548e:	b2ed      	uxtb	r5, r5
 8025490:	f1bc 0f00 	cmp.w	ip, #0
 8025494:	f000 8089 	beq.w	80255aa <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a2>
 8025498:	2c00      	cmp	r4, #0
 802549a:	f100 0001 	add.w	r0, r0, #1
 802549e:	f2c0 8082 	blt.w	80255a6 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 80254a2:	45a1      	cmp	r9, r4
 80254a4:	dd7f      	ble.n	80255a6 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 80254a6:	2800      	cmp	r0, #0
 80254a8:	db7d      	blt.n	80255a6 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 80254aa:	4580      	cmp	r8, r0
 80254ac:	dd7b      	ble.n	80255a6 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 80254ae:	eb03 0b0e 	add.w	fp, r3, lr
 80254b2:	ea4f 045b 	mov.w	r4, fp, lsr #1
 80254b6:	f01b 0f01 	tst.w	fp, #1
 80254ba:	5d14      	ldrb	r4, [r2, r4]
 80254bc:	bf0c      	ite	eq
 80254be:	f004 040f 	andeq.w	r4, r4, #15
 80254c2:	1124      	asrne	r4, r4, #4
 80254c4:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 80254c8:	b2e4      	uxtb	r4, r4
 80254ca:	f1ba 0f00 	cmp.w	sl, #0
 80254ce:	db6f      	blt.n	80255b0 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 80254d0:	45d1      	cmp	r9, sl
 80254d2:	dd6d      	ble.n	80255b0 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 80254d4:	2800      	cmp	r0, #0
 80254d6:	db6b      	blt.n	80255b0 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 80254d8:	4580      	cmp	r8, r0
 80254da:	dd69      	ble.n	80255b0 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 80254dc:	2f00      	cmp	r7, #0
 80254de:	d069      	beq.n	80255b4 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ac>
 80254e0:	3301      	adds	r3, #1
 80254e2:	449e      	add	lr, r3
 80254e4:	ea4f 035e 	mov.w	r3, lr, lsr #1
 80254e8:	f01e 0f01 	tst.w	lr, #1
 80254ec:	5cd0      	ldrb	r0, [r2, r3]
 80254ee:	bf0c      	ite	eq
 80254f0:	f000 000f 	andeq.w	r0, r0, #15
 80254f4:	1100      	asrne	r0, r0, #4
 80254f6:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80254fa:	b2c3      	uxtb	r3, r0
 80254fc:	b2ba      	uxth	r2, r7
 80254fe:	fa1f fc8c 	uxth.w	ip, ip
 8025502:	fb02 f00c 	mul.w	r0, r2, ip
 8025506:	0112      	lsls	r2, r2, #4
 8025508:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 802550c:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 8025510:	1a12      	subs	r2, r2, r0
 8025512:	fa1f fc8c 	uxth.w	ip, ip
 8025516:	b292      	uxth	r2, r2
 8025518:	eba7 070c 	sub.w	r7, r7, ip
 802551c:	436a      	muls	r2, r5
 802551e:	b2bf      	uxth	r7, r7
 8025520:	fb06 2207 	mla	r2, r6, r7, r2
 8025524:	fb0c 2404 	mla	r4, ip, r4, r2
 8025528:	fb00 4303 	mla	r3, r0, r3, r4
 802552c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8025530:	b38b      	cbz	r3, 8025596 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x18e>
 8025532:	4a21      	ldr	r2, [pc, #132]	; (80255b8 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b0>)
 8025534:	6814      	ldr	r4, [r2, #0]
 8025536:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 802553a:	b2e5      	uxtb	r5, r4
 802553c:	4353      	muls	r3, r2
 802553e:	1c5a      	adds	r2, r3, #1
 8025540:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8025544:	1212      	asrs	r2, r2, #8
 8025546:	b290      	uxth	r0, r2
 8025548:	43d2      	mvns	r2, r2
 802554a:	fb15 f500 	smulbb	r5, r5, r0
 802554e:	b2d3      	uxtb	r3, r2
 8025550:	780a      	ldrb	r2, [r1, #0]
 8025552:	fb02 5203 	mla	r2, r2, r3, r5
 8025556:	b292      	uxth	r2, r2
 8025558:	1c55      	adds	r5, r2, #1
 802555a:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 802555e:	784d      	ldrb	r5, [r1, #1]
 8025560:	fb15 f503 	smulbb	r5, r5, r3
 8025564:	1212      	asrs	r2, r2, #8
 8025566:	700a      	strb	r2, [r1, #0]
 8025568:	f3c4 2207 	ubfx	r2, r4, #8, #8
 802556c:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8025570:	fb02 5200 	mla	r2, r2, r0, r5
 8025574:	b292      	uxth	r2, r2
 8025576:	1c55      	adds	r5, r2, #1
 8025578:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 802557c:	1212      	asrs	r2, r2, #8
 802557e:	704a      	strb	r2, [r1, #1]
 8025580:	788a      	ldrb	r2, [r1, #2]
 8025582:	fb12 f303 	smulbb	r3, r2, r3
 8025586:	fb04 3300 	mla	r3, r4, r0, r3
 802558a:	b29b      	uxth	r3, r3
 802558c:	1c5a      	adds	r2, r3, #1
 802558e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8025592:	121b      	asrs	r3, r3, #8
 8025594:	708b      	strb	r3, [r1, #2]
 8025596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802559a:	2600      	movs	r6, #0
 802559c:	e75a      	b.n	8025454 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x4c>
 802559e:	2500      	movs	r5, #0
 80255a0:	e776      	b.n	8025490 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 80255a2:	463d      	mov	r5, r7
 80255a4:	e774      	b.n	8025490 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 80255a6:	2400      	movs	r4, #0
 80255a8:	e78f      	b.n	80254ca <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xc2>
 80255aa:	4663      	mov	r3, ip
 80255ac:	4664      	mov	r4, ip
 80255ae:	e7a5      	b.n	80254fc <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 80255b0:	2300      	movs	r3, #0
 80255b2:	e7a3      	b.n	80254fc <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 80255b4:	463b      	mov	r3, r7
 80255b6:	e7a1      	b.n	80254fc <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 80255b8:	24026184 	.word	0x24026184

080255bc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80255bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80255c0:	b097      	sub	sp, #92	; 0x5c
 80255c2:	9214      	str	r2, [sp, #80]	; 0x50
 80255c4:	9309      	str	r3, [sp, #36]	; 0x24
 80255c6:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80255c8:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 80255cc:	9015      	str	r0, [sp, #84]	; 0x54
 80255ce:	910c      	str	r1, [sp, #48]	; 0x30
 80255d0:	6850      	ldr	r0, [r2, #4]
 80255d2:	930e      	str	r3, [sp, #56]	; 0x38
 80255d4:	6812      	ldr	r2, [r2, #0]
 80255d6:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 80255da:	e9dd 5621 	ldrd	r5, r6, [sp, #132]	; 0x84
 80255de:	fb00 1303 	mla	r3, r0, r3, r1
 80255e2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80255e6:	eb02 0a03 	add.w	sl, r2, r3
 80255ea:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80255ec:	689b      	ldr	r3, [r3, #8]
 80255ee:	3301      	adds	r3, #1
 80255f0:	f023 0301 	bic.w	r3, r3, #1
 80255f4:	930f      	str	r3, [sp, #60]	; 0x3c
 80255f6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80255f8:	681f      	ldr	r7, [r3, #0]
 80255fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80255fc:	2b00      	cmp	r3, #0
 80255fe:	dc03      	bgt.n	8025608 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8025600:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8025602:	2b00      	cmp	r3, #0
 8025604:	f340 8247 	ble.w	8025a96 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 8025608:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802560a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802560e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8025612:	1e48      	subs	r0, r1, #1
 8025614:	f102 3cff 	add.w	ip, r2, #4294967295
 8025618:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802561a:	2b00      	cmp	r3, #0
 802561c:	f340 80e5 	ble.w	80257ea <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 8025620:	ea5f 4e25 	movs.w	lr, r5, asr #16
 8025624:	ea4f 4326 	mov.w	r3, r6, asr #16
 8025628:	d406      	bmi.n	8025638 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802562a:	4586      	cmp	lr, r0
 802562c:	da04      	bge.n	8025638 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802562e:	2b00      	cmp	r3, #0
 8025630:	db02      	blt.n	8025638 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8025632:	4563      	cmp	r3, ip
 8025634:	f2c0 80da 	blt.w	80257ec <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 8025638:	f11e 0e01 	adds.w	lr, lr, #1
 802563c:	f100 80cb 	bmi.w	80257d6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8025640:	4571      	cmp	r1, lr
 8025642:	f2c0 80c8 	blt.w	80257d6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8025646:	3301      	adds	r3, #1
 8025648:	f100 80c5 	bmi.w	80257d6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 802564c:	429a      	cmp	r2, r3
 802564e:	f2c0 80c2 	blt.w	80257d6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8025652:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025654:	46d0      	mov	r8, sl
 8025656:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 802565a:	930d      	str	r3, [sp, #52]	; 0x34
 802565c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802565e:	2b00      	cmp	r3, #0
 8025660:	f340 80e3 	ble.w	802582a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 8025664:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025666:	1430      	asrs	r0, r6, #16
 8025668:	f3c5 3203 	ubfx	r2, r5, #12, #4
 802566c:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8025670:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8025674:	142b      	asrs	r3, r5, #16
 8025676:	f100 812e 	bmi.w	80258d6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 802567a:	f10c 3bff 	add.w	fp, ip, #4294967295
 802567e:	455b      	cmp	r3, fp
 8025680:	f280 8129 	bge.w	80258d6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8025684:	2800      	cmp	r0, #0
 8025686:	f2c0 8126 	blt.w	80258d6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 802568a:	f10e 3bff 	add.w	fp, lr, #4294967295
 802568e:	4558      	cmp	r0, fp
 8025690:	f280 8121 	bge.w	80258d6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8025694:	fb00 3309 	mla	r3, r0, r9, r3
 8025698:	0858      	lsrs	r0, r3, #1
 802569a:	07dc      	lsls	r4, r3, #31
 802569c:	f817 c000 	ldrb.w	ip, [r7, r0]
 80256a0:	bf54      	ite	pl
 80256a2:	f00c 0c0f 	andpl.w	ip, ip, #15
 80256a6:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80256aa:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80256ae:	fa5f fc8c 	uxtb.w	ip, ip
 80256b2:	2a00      	cmp	r2, #0
 80256b4:	f000 80fe 	beq.w	80258b4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 80256b8:	1c58      	adds	r0, r3, #1
 80256ba:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 80256be:	07c0      	lsls	r0, r0, #31
 80256c0:	f817 e00e 	ldrb.w	lr, [r7, lr]
 80256c4:	bf54      	ite	pl
 80256c6:	f00e 0e0f 	andpl.w	lr, lr, #15
 80256ca:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 80256ce:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 80256d2:	fa5f f08e 	uxtb.w	r0, lr
 80256d6:	9010      	str	r0, [sp, #64]	; 0x40
 80256d8:	b1d9      	cbz	r1, 8025712 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 80256da:	444b      	add	r3, r9
 80256dc:	0858      	lsrs	r0, r3, #1
 80256de:	07dc      	lsls	r4, r3, #31
 80256e0:	f103 0301 	add.w	r3, r3, #1
 80256e4:	5c38      	ldrb	r0, [r7, r0]
 80256e6:	bf54      	ite	pl
 80256e8:	f000 000f 	andpl.w	r0, r0, #15
 80256ec:	1100      	asrmi	r0, r0, #4
 80256ee:	07dc      	lsls	r4, r3, #31
 80256f0:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80256f4:	b2c0      	uxtb	r0, r0
 80256f6:	900a      	str	r0, [sp, #40]	; 0x28
 80256f8:	ea4f 0053 	mov.w	r0, r3, lsr #1
 80256fc:	f817 e000 	ldrb.w	lr, [r7, r0]
 8025700:	bf54      	ite	pl
 8025702:	f00e 030f 	andpl.w	r3, lr, #15
 8025706:	ea4f 132e 	movmi.w	r3, lr, asr #4
 802570a:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802570e:	b2db      	uxtb	r3, r3
 8025710:	9311      	str	r3, [sp, #68]	; 0x44
 8025712:	b292      	uxth	r2, r2
 8025714:	b289      	uxth	r1, r1
 8025716:	0113      	lsls	r3, r2, #4
 8025718:	fb02 f001 	mul.w	r0, r2, r1
 802571c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802571e:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8025722:	ebc0 1101 	rsb	r1, r0, r1, lsl #4
 8025726:	1a1b      	subs	r3, r3, r0
 8025728:	b289      	uxth	r1, r1
 802572a:	b29b      	uxth	r3, r3
 802572c:	ebae 0e01 	sub.w	lr, lr, r1
 8025730:	4353      	muls	r3, r2
 8025732:	fa1f fe8e 	uxth.w	lr, lr
 8025736:	fb0c 320e 	mla	r2, ip, lr, r3
 802573a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802573c:	fb01 2203 	mla	r2, r1, r3, r2
 8025740:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8025742:	fb00 2203 	mla	r2, r0, r3, r2
 8025746:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802574a:	2a00      	cmp	r2, #0
 802574c:	d039      	beq.n	80257c2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 802574e:	4bc7      	ldr	r3, [pc, #796]	; (8025a6c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 8025750:	6819      	ldr	r1, [r3, #0]
 8025752:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8025754:	fa5f fc81 	uxtb.w	ip, r1
 8025758:	435a      	muls	r2, r3
 802575a:	1c53      	adds	r3, r2, #1
 802575c:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8025760:	1212      	asrs	r2, r2, #8
 8025762:	b290      	uxth	r0, r2
 8025764:	43d2      	mvns	r2, r2
 8025766:	fb1c fc00 	smulbb	ip, ip, r0
 802576a:	b2d3      	uxtb	r3, r2
 802576c:	f898 2000 	ldrb.w	r2, [r8]
 8025770:	fb02 c203 	mla	r2, r2, r3, ip
 8025774:	b292      	uxth	r2, r2
 8025776:	f102 0c01 	add.w	ip, r2, #1
 802577a:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 802577e:	f898 c001 	ldrb.w	ip, [r8, #1]
 8025782:	fb1c fc03 	smulbb	ip, ip, r3
 8025786:	1212      	asrs	r2, r2, #8
 8025788:	f888 2000 	strb.w	r2, [r8]
 802578c:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8025790:	f3c1 4107 	ubfx	r1, r1, #16, #8
 8025794:	fb02 c200 	mla	r2, r2, r0, ip
 8025798:	b292      	uxth	r2, r2
 802579a:	f102 0c01 	add.w	ip, r2, #1
 802579e:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80257a2:	1212      	asrs	r2, r2, #8
 80257a4:	f888 2001 	strb.w	r2, [r8, #1]
 80257a8:	f898 2002 	ldrb.w	r2, [r8, #2]
 80257ac:	fb12 f303 	smulbb	r3, r2, r3
 80257b0:	fb01 3300 	mla	r3, r1, r0, r3
 80257b4:	b29b      	uxth	r3, r3
 80257b6:	1c5a      	adds	r2, r3, #1
 80257b8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80257bc:	121b      	asrs	r3, r3, #8
 80257be:	f888 3002 	strb.w	r3, [r8, #2]
 80257c2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80257c4:	f108 0803 	add.w	r8, r8, #3
 80257c8:	441d      	add	r5, r3
 80257ca:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80257cc:	441e      	add	r6, r3
 80257ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80257d0:	3b01      	subs	r3, #1
 80257d2:	930d      	str	r3, [sp, #52]	; 0x34
 80257d4:	e742      	b.n	802565c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 80257d6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80257d8:	f10a 0a03 	add.w	sl, sl, #3
 80257dc:	441d      	add	r5, r3
 80257de:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80257e0:	441e      	add	r6, r3
 80257e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80257e4:	3b01      	subs	r3, #1
 80257e6:	9309      	str	r3, [sp, #36]	; 0x24
 80257e8:	e716      	b.n	8025618 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80257ea:	d024      	beq.n	8025836 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 80257ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80257ee:	9823      	ldr	r0, [sp, #140]	; 0x8c
 80257f0:	3b01      	subs	r3, #1
 80257f2:	fb00 5003 	mla	r0, r0, r3, r5
 80257f6:	1400      	asrs	r0, r0, #16
 80257f8:	f53f af2b 	bmi.w	8025652 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80257fc:	3901      	subs	r1, #1
 80257fe:	4288      	cmp	r0, r1
 8025800:	f6bf af27 	bge.w	8025652 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8025804:	9924      	ldr	r1, [sp, #144]	; 0x90
 8025806:	fb01 6303 	mla	r3, r1, r3, r6
 802580a:	141b      	asrs	r3, r3, #16
 802580c:	f53f af21 	bmi.w	8025652 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8025810:	3a01      	subs	r2, #1
 8025812:	4293      	cmp	r3, r2
 8025814:	f6bf af1d 	bge.w	8025652 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8025818:	f10a 0e03 	add.w	lr, sl, #3
 802581c:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8025820:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 8025824:	f1b8 0f00 	cmp.w	r8, #0
 8025828:	dc76      	bgt.n	8025918 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35c>
 802582a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802582c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8025830:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8025834:	44a2      	add	sl, r4
 8025836:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8025838:	2b00      	cmp	r3, #0
 802583a:	f340 812c 	ble.w	8025a96 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 802583e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8025842:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8025844:	ee30 0a04 	vadd.f32	s0, s0, s8
 8025848:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802584c:	eef0 6a62 	vmov.f32	s13, s5
 8025850:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8025854:	ee31 1a05 	vadd.f32	s2, s2, s10
 8025858:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802585c:	ee16 5a90 	vmov	r5, s13
 8025860:	eef0 6a43 	vmov.f32	s13, s6
 8025864:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025868:	ee16 6a90 	vmov	r6, s13
 802586c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8025870:	ee61 7a27 	vmul.f32	s15, s2, s15
 8025874:	ee77 2a62 	vsub.f32	s5, s14, s5
 8025878:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802587c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8025880:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8025884:	ee12 2a90 	vmov	r2, s5
 8025888:	eef0 2a47 	vmov.f32	s5, s14
 802588c:	fb92 f3f3 	sdiv	r3, r2, r3
 8025890:	ee13 2a10 	vmov	r2, s6
 8025894:	9323      	str	r3, [sp, #140]	; 0x8c
 8025896:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8025898:	eeb0 3a67 	vmov.f32	s6, s15
 802589c:	fb92 f3f3 	sdiv	r3, r2, r3
 80258a0:	9324      	str	r3, [sp, #144]	; 0x90
 80258a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80258a4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80258a6:	3b01      	subs	r3, #1
 80258a8:	930c      	str	r3, [sp, #48]	; 0x30
 80258aa:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80258ac:	bf08      	it	eq
 80258ae:	4613      	moveq	r3, r2
 80258b0:	9309      	str	r3, [sp, #36]	; 0x24
 80258b2:	e6a2      	b.n	80255fa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 80258b4:	2900      	cmp	r1, #0
 80258b6:	f43f af2c 	beq.w	8025712 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 80258ba:	eb09 0003 	add.w	r0, r9, r3
 80258be:	0843      	lsrs	r3, r0, #1
 80258c0:	07c0      	lsls	r0, r0, #31
 80258c2:	5cfb      	ldrb	r3, [r7, r3]
 80258c4:	bf54      	ite	pl
 80258c6:	f003 030f 	andpl.w	r3, r3, #15
 80258ca:	111b      	asrmi	r3, r3, #4
 80258cc:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80258d0:	b2db      	uxtb	r3, r3
 80258d2:	930a      	str	r3, [sp, #40]	; 0x28
 80258d4:	e71d      	b.n	8025712 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 80258d6:	f113 0b01 	adds.w	fp, r3, #1
 80258da:	f53f af72 	bmi.w	80257c2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 80258de:	45dc      	cmp	ip, fp
 80258e0:	f6ff af6f 	blt.w	80257c2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 80258e4:	f110 0b01 	adds.w	fp, r0, #1
 80258e8:	f53f af6b 	bmi.w	80257c2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 80258ec:	45de      	cmp	lr, fp
 80258ee:	f6ff af68 	blt.w	80257c2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 80258f2:	9302      	str	r3, [sp, #8]
 80258f4:	fa0f f38e 	sxth.w	r3, lr
 80258f8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80258fa:	9301      	str	r3, [sp, #4]
 80258fc:	fa0f f38c 	sxth.w	r3, ip
 8025900:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8025904:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8025908:	9300      	str	r3, [sp, #0]
 802590a:	463a      	mov	r2, r7
 802590c:	464b      	mov	r3, r9
 802590e:	4641      	mov	r1, r8
 8025910:	9815      	ldr	r0, [sp, #84]	; 0x54
 8025912:	f7ff fd79 	bl	8025408 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 8025916:	e754      	b.n	80257c2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8025918:	142a      	asrs	r2, r5, #16
 802591a:	f3c5 3103 	ubfx	r1, r5, #12, #4
 802591e:	1433      	asrs	r3, r6, #16
 8025920:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8025924:	fb09 2303 	mla	r3, r9, r3, r2
 8025928:	085a      	lsrs	r2, r3, #1
 802592a:	07dc      	lsls	r4, r3, #31
 802592c:	5cba      	ldrb	r2, [r7, r2]
 802592e:	bf54      	ite	pl
 8025930:	f002 020f 	andpl.w	r2, r2, #15
 8025934:	1112      	asrmi	r2, r2, #4
 8025936:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802593a:	b2d2      	uxtb	r2, r2
 802593c:	2900      	cmp	r1, #0
 802593e:	f000 8097 	beq.w	8025a70 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8025942:	f103 0b01 	add.w	fp, r3, #1
 8025946:	ea4f 0c5b 	mov.w	ip, fp, lsr #1
 802594a:	f01b 0f01 	tst.w	fp, #1
 802594e:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8025952:	bf0c      	ite	eq
 8025954:	f00c 0c0f 	andeq.w	ip, ip, #15
 8025958:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 802595c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8025960:	fa5f f48c 	uxtb.w	r4, ip
 8025964:	9412      	str	r4, [sp, #72]	; 0x48
 8025966:	b300      	cbz	r0, 80259aa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8025968:	444b      	add	r3, r9
 802596a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802596e:	07dc      	lsls	r4, r3, #31
 8025970:	f103 0301 	add.w	r3, r3, #1
 8025974:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8025978:	bf54      	ite	pl
 802597a:	f00c 0c0f 	andpl.w	ip, ip, #15
 802597e:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8025982:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8025986:	fa5f f48c 	uxtb.w	r4, ip
 802598a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802598e:	940b      	str	r4, [sp, #44]	; 0x2c
 8025990:	07dc      	lsls	r4, r3, #31
 8025992:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8025996:	bf54      	ite	pl
 8025998:	f00c 0c0f 	andpl.w	ip, ip, #15
 802599c:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80259a0:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80259a4:	fa5f f38c 	uxtb.w	r3, ip
 80259a8:	9313      	str	r3, [sp, #76]	; 0x4c
 80259aa:	b289      	uxth	r1, r1
 80259ac:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80259ae:	b280      	uxth	r0, r0
 80259b0:	fb01 f300 	mul.w	r3, r1, r0
 80259b4:	0109      	lsls	r1, r1, #4
 80259b6:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 80259ba:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 80259be:	1ac9      	subs	r1, r1, r3
 80259c0:	b280      	uxth	r0, r0
 80259c2:	b289      	uxth	r1, r1
 80259c4:	ebac 0c00 	sub.w	ip, ip, r0
 80259c8:	4361      	muls	r1, r4
 80259ca:	fa1f fc8c 	uxth.w	ip, ip
 80259ce:	fb02 120c 	mla	r2, r2, ip, r1
 80259d2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80259d4:	fb00 2001 	mla	r0, r0, r1, r2
 80259d8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80259da:	fb03 0302 	mla	r3, r3, r2, r0
 80259de:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80259e2:	2b00      	cmp	r3, #0
 80259e4:	d039      	beq.n	8025a5a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 80259e6:	4a21      	ldr	r2, [pc, #132]	; (8025a6c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 80259e8:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 80259ec:	6810      	ldr	r0, [r2, #0]
 80259ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80259f0:	fa5f fc80 	uxtb.w	ip, r0
 80259f4:	4353      	muls	r3, r2
 80259f6:	1c5a      	adds	r2, r3, #1
 80259f8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80259fc:	121b      	asrs	r3, r3, #8
 80259fe:	b29a      	uxth	r2, r3
 8025a00:	43db      	mvns	r3, r3
 8025a02:	fb1c fc02 	smulbb	ip, ip, r2
 8025a06:	b2db      	uxtb	r3, r3
 8025a08:	fb01 c103 	mla	r1, r1, r3, ip
 8025a0c:	b289      	uxth	r1, r1
 8025a0e:	f101 0c01 	add.w	ip, r1, #1
 8025a12:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 8025a16:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 8025a1a:	fb1c fc03 	smulbb	ip, ip, r3
 8025a1e:	1209      	asrs	r1, r1, #8
 8025a20:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8025a24:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8025a28:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8025a2c:	fb01 c102 	mla	r1, r1, r2, ip
 8025a30:	b289      	uxth	r1, r1
 8025a32:	f101 0c01 	add.w	ip, r1, #1
 8025a36:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 8025a3a:	1209      	asrs	r1, r1, #8
 8025a3c:	f80e 1c02 	strb.w	r1, [lr, #-2]
 8025a40:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 8025a44:	fb11 f303 	smulbb	r3, r1, r3
 8025a48:	fb00 3002 	mla	r0, r0, r2, r3
 8025a4c:	b280      	uxth	r0, r0
 8025a4e:	1c42      	adds	r2, r0, #1
 8025a50:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8025a54:	1200      	asrs	r0, r0, #8
 8025a56:	f80e 0c01 	strb.w	r0, [lr, #-1]
 8025a5a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8025a5c:	f10e 0e03 	add.w	lr, lr, #3
 8025a60:	f108 38ff 	add.w	r8, r8, #4294967295
 8025a64:	441d      	add	r5, r3
 8025a66:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025a68:	441e      	add	r6, r3
 8025a6a:	e6db      	b.n	8025824 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 8025a6c:	24026184 	.word	0x24026184
 8025a70:	2800      	cmp	r0, #0
 8025a72:	d09a      	beq.n	80259aa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8025a74:	444b      	add	r3, r9
 8025a76:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8025a7a:	07db      	lsls	r3, r3, #31
 8025a7c:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8025a80:	bf54      	ite	pl
 8025a82:	f00c 0c0f 	andpl.w	ip, ip, #15
 8025a86:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8025a8a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8025a8e:	fa5f f38c 	uxtb.w	r3, ip
 8025a92:	930b      	str	r3, [sp, #44]	; 0x2c
 8025a94:	e789      	b.n	80259aa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8025a96:	b017      	add	sp, #92	; 0x5c
 8025a98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08025a9c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 8025a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025aa0:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
 8025aa4:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8025aa8:	2d00      	cmp	r5, #0
 8025aaa:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8025aae:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
 8025ab2:	fb04 5e03 	mla	lr, r4, r3, r5
 8025ab6:	f89d c038 	ldrb.w	ip, [sp, #56]	; 0x38
 8025aba:	f2c0 80b1 	blt.w	8025c20 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8025abe:	45a9      	cmp	r9, r5
 8025ac0:	f340 80ae 	ble.w	8025c20 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8025ac4:	2c00      	cmp	r4, #0
 8025ac6:	f2c0 80ab 	blt.w	8025c20 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8025aca:	45a0      	cmp	r8, r4
 8025acc:	f340 80a8 	ble.w	8025c20 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8025ad0:	ea4f 065e 	mov.w	r6, lr, lsr #1
 8025ad4:	f01e 0f01 	tst.w	lr, #1
 8025ad8:	5d97      	ldrb	r7, [r2, r6]
 8025ada:	bf0c      	ite	eq
 8025adc:	f007 070f 	andeq.w	r7, r7, #15
 8025ae0:	113f      	asrne	r7, r7, #4
 8025ae2:	eb07 1707 	add.w	r7, r7, r7, lsl #4
 8025ae6:	b2ff      	uxtb	r7, r7
 8025ae8:	f115 0a01 	adds.w	sl, r5, #1
 8025aec:	f100 809a 	bmi.w	8025c24 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8025af0:	45d1      	cmp	r9, sl
 8025af2:	f340 8097 	ble.w	8025c24 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8025af6:	2c00      	cmp	r4, #0
 8025af8:	f2c0 8094 	blt.w	8025c24 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8025afc:	45a0      	cmp	r8, r4
 8025afe:	f340 8091 	ble.w	8025c24 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8025b02:	2800      	cmp	r0, #0
 8025b04:	f000 8090 	beq.w	8025c28 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x18c>
 8025b08:	f10e 0b01 	add.w	fp, lr, #1
 8025b0c:	ea4f 065b 	mov.w	r6, fp, lsr #1
 8025b10:	f01b 0f01 	tst.w	fp, #1
 8025b14:	5d96      	ldrb	r6, [r2, r6]
 8025b16:	bf0c      	ite	eq
 8025b18:	f006 060f 	andeq.w	r6, r6, #15
 8025b1c:	1136      	asrne	r6, r6, #4
 8025b1e:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8025b22:	b2f6      	uxtb	r6, r6
 8025b24:	f1bc 0f00 	cmp.w	ip, #0
 8025b28:	f000 8082 	beq.w	8025c30 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x194>
 8025b2c:	2d00      	cmp	r5, #0
 8025b2e:	f104 0401 	add.w	r4, r4, #1
 8025b32:	db7b      	blt.n	8025c2c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8025b34:	45a9      	cmp	r9, r5
 8025b36:	dd79      	ble.n	8025c2c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8025b38:	2c00      	cmp	r4, #0
 8025b3a:	db77      	blt.n	8025c2c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8025b3c:	45a0      	cmp	r8, r4
 8025b3e:	dd75      	ble.n	8025c2c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8025b40:	eb03 0b0e 	add.w	fp, r3, lr
 8025b44:	ea4f 055b 	mov.w	r5, fp, lsr #1
 8025b48:	f01b 0f01 	tst.w	fp, #1
 8025b4c:	5d55      	ldrb	r5, [r2, r5]
 8025b4e:	bf0c      	ite	eq
 8025b50:	f005 050f 	andeq.w	r5, r5, #15
 8025b54:	112d      	asrne	r5, r5, #4
 8025b56:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8025b5a:	b2ed      	uxtb	r5, r5
 8025b5c:	f1ba 0f00 	cmp.w	sl, #0
 8025b60:	db69      	blt.n	8025c36 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 8025b62:	45d1      	cmp	r9, sl
 8025b64:	dd67      	ble.n	8025c36 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 8025b66:	2c00      	cmp	r4, #0
 8025b68:	db65      	blt.n	8025c36 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 8025b6a:	45a0      	cmp	r8, r4
 8025b6c:	dd63      	ble.n	8025c36 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 8025b6e:	2800      	cmp	r0, #0
 8025b70:	d063      	beq.n	8025c3a <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19e>
 8025b72:	3301      	adds	r3, #1
 8025b74:	449e      	add	lr, r3
 8025b76:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8025b7a:	f01e 0f01 	tst.w	lr, #1
 8025b7e:	5cd4      	ldrb	r4, [r2, r3]
 8025b80:	bf0c      	ite	eq
 8025b82:	f004 040f 	andeq.w	r4, r4, #15
 8025b86:	1124      	asrne	r4, r4, #4
 8025b88:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8025b8c:	b2e3      	uxtb	r3, r4
 8025b8e:	b282      	uxth	r2, r0
 8025b90:	fa1f fc8c 	uxth.w	ip, ip
 8025b94:	fb02 f40c 	mul.w	r4, r2, ip
 8025b98:	0112      	lsls	r2, r2, #4
 8025b9a:	ebc4 1c0c 	rsb	ip, r4, ip, lsl #4
 8025b9e:	fa1f f08c 	uxth.w	r0, ip
 8025ba2:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
 8025ba6:	1b12      	subs	r2, r2, r4
 8025ba8:	ebac 0c00 	sub.w	ip, ip, r0
 8025bac:	b292      	uxth	r2, r2
 8025bae:	fa1f fc8c 	uxth.w	ip, ip
 8025bb2:	4372      	muls	r2, r6
 8025bb4:	fb07 220c 	mla	r2, r7, ip, r2
 8025bb8:	fb00 2005 	mla	r0, r0, r5, r2
 8025bbc:	fb04 0303 	mla	r3, r4, r3, r0
 8025bc0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8025bc4:	b353      	cbz	r3, 8025c1c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x180>
 8025bc6:	4a1e      	ldr	r2, [pc, #120]	; (8025c40 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>)
 8025bc8:	7808      	ldrb	r0, [r1, #0]
 8025bca:	6814      	ldr	r4, [r2, #0]
 8025bcc:	b29a      	uxth	r2, r3
 8025bce:	43db      	mvns	r3, r3
 8025bd0:	b2e5      	uxtb	r5, r4
 8025bd2:	b2db      	uxtb	r3, r3
 8025bd4:	fb15 f502 	smulbb	r5, r5, r2
 8025bd8:	fb00 5003 	mla	r0, r0, r3, r5
 8025bdc:	b280      	uxth	r0, r0
 8025bde:	1c45      	adds	r5, r0, #1
 8025be0:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8025be4:	784d      	ldrb	r5, [r1, #1]
 8025be6:	fb15 f503 	smulbb	r5, r5, r3
 8025bea:	1200      	asrs	r0, r0, #8
 8025bec:	7008      	strb	r0, [r1, #0]
 8025bee:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8025bf2:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8025bf6:	fb00 5002 	mla	r0, r0, r2, r5
 8025bfa:	b280      	uxth	r0, r0
 8025bfc:	1c45      	adds	r5, r0, #1
 8025bfe:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8025c02:	1200      	asrs	r0, r0, #8
 8025c04:	7048      	strb	r0, [r1, #1]
 8025c06:	7888      	ldrb	r0, [r1, #2]
 8025c08:	fb10 f303 	smulbb	r3, r0, r3
 8025c0c:	fb04 3202 	mla	r2, r4, r2, r3
 8025c10:	b292      	uxth	r2, r2
 8025c12:	1c53      	adds	r3, r2, #1
 8025c14:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8025c18:	1212      	asrs	r2, r2, #8
 8025c1a:	708a      	strb	r2, [r1, #2]
 8025c1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025c20:	2700      	movs	r7, #0
 8025c22:	e761      	b.n	8025ae8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x4c>
 8025c24:	2600      	movs	r6, #0
 8025c26:	e77d      	b.n	8025b24 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 8025c28:	4606      	mov	r6, r0
 8025c2a:	e77b      	b.n	8025b24 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 8025c2c:	2500      	movs	r5, #0
 8025c2e:	e795      	b.n	8025b5c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xc0>
 8025c30:	4663      	mov	r3, ip
 8025c32:	4665      	mov	r5, ip
 8025c34:	e7ab      	b.n	8025b8e <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 8025c36:	2300      	movs	r3, #0
 8025c38:	e7a9      	b.n	8025b8e <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 8025c3a:	4603      	mov	r3, r0
 8025c3c:	e7a7      	b.n	8025b8e <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 8025c3e:	bf00      	nop
 8025c40:	24026184 	.word	0x24026184

08025c44 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8025c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025c48:	b093      	sub	sp, #76	; 0x4c
 8025c4a:	461c      	mov	r4, r3
 8025c4c:	920c      	str	r2, [sp, #48]	; 0x30
 8025c4e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8025c50:	9011      	str	r0, [sp, #68]	; 0x44
 8025c52:	9107      	str	r1, [sp, #28]
 8025c54:	6850      	ldr	r0, [r2, #4]
 8025c56:	6812      	ldr	r2, [r2, #0]
 8025c58:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 8025c5c:	e9dd 561d 	ldrd	r5, r6, [sp, #116]	; 0x74
 8025c60:	fb00 1303 	mla	r3, r0, r3, r1
 8025c64:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8025c68:	eb02 0b03 	add.w	fp, r2, r3
 8025c6c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025c6e:	689b      	ldr	r3, [r3, #8]
 8025c70:	3301      	adds	r3, #1
 8025c72:	f023 0301 	bic.w	r3, r3, #1
 8025c76:	9309      	str	r3, [sp, #36]	; 0x24
 8025c78:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025c7a:	f8d3 8000 	ldr.w	r8, [r3]
 8025c7e:	9b07      	ldr	r3, [sp, #28]
 8025c80:	2b00      	cmp	r3, #0
 8025c82:	dc03      	bgt.n	8025c8c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8025c84:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8025c86:	2b00      	cmp	r3, #0
 8025c88:	f340 822b 	ble.w	80260e2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8025c8c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025c8e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025c92:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8025c96:	1e48      	subs	r0, r1, #1
 8025c98:	1e57      	subs	r7, r2, #1
 8025c9a:	2c00      	cmp	r4, #0
 8025c9c:	f340 80d7 	ble.w	8025e4e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 8025ca0:	ea5f 4c25 	movs.w	ip, r5, asr #16
 8025ca4:	ea4f 4326 	mov.w	r3, r6, asr #16
 8025ca8:	d406      	bmi.n	8025cb8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8025caa:	4584      	cmp	ip, r0
 8025cac:	da04      	bge.n	8025cb8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8025cae:	2b00      	cmp	r3, #0
 8025cb0:	db02      	blt.n	8025cb8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8025cb2:	42bb      	cmp	r3, r7
 8025cb4:	f2c0 80cc 	blt.w	8025e50 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8025cb8:	f11c 0c01 	adds.w	ip, ip, #1
 8025cbc:	f100 80bf 	bmi.w	8025e3e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8025cc0:	4561      	cmp	r1, ip
 8025cc2:	f2c0 80bc 	blt.w	8025e3e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8025cc6:	3301      	adds	r3, #1
 8025cc8:	f100 80b9 	bmi.w	8025e3e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8025ccc:	429a      	cmp	r2, r3
 8025cce:	f2c0 80b6 	blt.w	8025e3e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8025cd2:	46a2      	mov	sl, r4
 8025cd4:	465f      	mov	r7, fp
 8025cd6:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8025cda:	f1ba 0f00 	cmp.w	sl, #0
 8025cde:	f340 80d4 	ble.w	8025e8a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 8025ce2:	f3c5 3303 	ubfx	r3, r5, #12, #4
 8025ce6:	1430      	asrs	r0, r6, #16
 8025ce8:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8025cec:	9308      	str	r3, [sp, #32]
 8025cee:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025cf0:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8025cf4:	142b      	asrs	r3, r5, #16
 8025cf6:	f100 8124 	bmi.w	8025f42 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8025cfa:	f10c 32ff 	add.w	r2, ip, #4294967295
 8025cfe:	4293      	cmp	r3, r2
 8025d00:	f280 811f 	bge.w	8025f42 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8025d04:	2800      	cmp	r0, #0
 8025d06:	f2c0 811c 	blt.w	8025f42 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8025d0a:	f10e 32ff 	add.w	r2, lr, #4294967295
 8025d0e:	4290      	cmp	r0, r2
 8025d10:	f280 8117 	bge.w	8025f42 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8025d14:	fb00 3309 	mla	r3, r0, r9, r3
 8025d18:	0858      	lsrs	r0, r3, #1
 8025d1a:	07da      	lsls	r2, r3, #31
 8025d1c:	9a08      	ldr	r2, [sp, #32]
 8025d1e:	f818 c000 	ldrb.w	ip, [r8, r0]
 8025d22:	bf54      	ite	pl
 8025d24:	f00c 0c0f 	andpl.w	ip, ip, #15
 8025d28:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8025d2c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8025d30:	fa5f fc8c 	uxtb.w	ip, ip
 8025d34:	2a00      	cmp	r2, #0
 8025d36:	f000 80ed 	beq.w	8025f14 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d0>
 8025d3a:	1c58      	adds	r0, r3, #1
 8025d3c:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8025d40:	07c0      	lsls	r0, r0, #31
 8025d42:	f818 e00e 	ldrb.w	lr, [r8, lr]
 8025d46:	bf54      	ite	pl
 8025d48:	f00e 0e0f 	andpl.w	lr, lr, #15
 8025d4c:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8025d50:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8025d54:	fa5f fe8e 	uxtb.w	lr, lr
 8025d58:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 8025d5c:	b1c9      	cbz	r1, 8025d92 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8025d5e:	444b      	add	r3, r9
 8025d60:	0858      	lsrs	r0, r3, #1
 8025d62:	07da      	lsls	r2, r3, #31
 8025d64:	f818 0000 	ldrb.w	r0, [r8, r0]
 8025d68:	bf54      	ite	pl
 8025d6a:	f000 000f 	andpl.w	r0, r0, #15
 8025d6e:	1100      	asrmi	r0, r0, #4
 8025d70:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8025d74:	b2c0      	uxtb	r0, r0
 8025d76:	900a      	str	r0, [sp, #40]	; 0x28
 8025d78:	1c58      	adds	r0, r3, #1
 8025d7a:	0843      	lsrs	r3, r0, #1
 8025d7c:	07c2      	lsls	r2, r0, #31
 8025d7e:	f818 3003 	ldrb.w	r3, [r8, r3]
 8025d82:	bf54      	ite	pl
 8025d84:	f003 030f 	andpl.w	r3, r3, #15
 8025d88:	111b      	asrmi	r3, r3, #4
 8025d8a:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8025d8e:	b2db      	uxtb	r3, r3
 8025d90:	930e      	str	r3, [sp, #56]	; 0x38
 8025d92:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8025d96:	b289      	uxth	r1, r1
 8025d98:	fb02 f301 	mul.w	r3, r2, r1
 8025d9c:	0112      	lsls	r2, r2, #4
 8025d9e:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8025da2:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 8025da6:	1ad2      	subs	r2, r2, r3
 8025da8:	b289      	uxth	r1, r1
 8025daa:	b292      	uxth	r2, r2
 8025dac:	1a40      	subs	r0, r0, r1
 8025dae:	fa1f fe80 	uxth.w	lr, r0
 8025db2:	980d      	ldr	r0, [sp, #52]	; 0x34
 8025db4:	4342      	muls	r2, r0
 8025db6:	fb0c 2c0e 	mla	ip, ip, lr, r2
 8025dba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8025dbc:	fb01 c102 	mla	r1, r1, r2, ip
 8025dc0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8025dc2:	fb03 1302 	mla	r3, r3, r2, r1
 8025dc6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8025dca:	b383      	cbz	r3, 8025e2e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8025dcc:	4ac6      	ldr	r2, [pc, #792]	; (80260e8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 8025dce:	2bff      	cmp	r3, #255	; 0xff
 8025dd0:	6812      	ldr	r2, [r2, #0]
 8025dd2:	f3c2 4e07 	ubfx	lr, r2, #16, #8
 8025dd6:	f3c2 2007 	ubfx	r0, r2, #8, #8
 8025dda:	b2d2      	uxtb	r2, r2
 8025ddc:	f000 80ac 	beq.w	8025f38 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8025de0:	b299      	uxth	r1, r3
 8025de2:	43db      	mvns	r3, r3
 8025de4:	f897 c000 	ldrb.w	ip, [r7]
 8025de8:	fb12 f201 	smulbb	r2, r2, r1
 8025dec:	b2db      	uxtb	r3, r3
 8025dee:	fb10 f001 	smulbb	r0, r0, r1
 8025df2:	fb0c 2203 	mla	r2, ip, r3, r2
 8025df6:	fb1e f101 	smulbb	r1, lr, r1
 8025dfa:	b292      	uxth	r2, r2
 8025dfc:	f102 0c01 	add.w	ip, r2, #1
 8025e00:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8025e04:	1212      	asrs	r2, r2, #8
 8025e06:	703a      	strb	r2, [r7, #0]
 8025e08:	787a      	ldrb	r2, [r7, #1]
 8025e0a:	fb02 0003 	mla	r0, r2, r3, r0
 8025e0e:	b280      	uxth	r0, r0
 8025e10:	1c42      	adds	r2, r0, #1
 8025e12:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8025e16:	78ba      	ldrb	r2, [r7, #2]
 8025e18:	fb02 1303 	mla	r3, r2, r3, r1
 8025e1c:	1200      	asrs	r0, r0, #8
 8025e1e:	b29b      	uxth	r3, r3
 8025e20:	7078      	strb	r0, [r7, #1]
 8025e22:	f103 0e01 	add.w	lr, r3, #1
 8025e26:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 8025e2a:	121b      	asrs	r3, r3, #8
 8025e2c:	70bb      	strb	r3, [r7, #2]
 8025e2e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8025e30:	3703      	adds	r7, #3
 8025e32:	f10a 3aff 	add.w	sl, sl, #4294967295
 8025e36:	441d      	add	r5, r3
 8025e38:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8025e3a:	441e      	add	r6, r3
 8025e3c:	e74d      	b.n	8025cda <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8025e3e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8025e40:	3c01      	subs	r4, #1
 8025e42:	f10b 0b03 	add.w	fp, fp, #3
 8025e46:	441d      	add	r5, r3
 8025e48:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8025e4a:	441e      	add	r6, r3
 8025e4c:	e725      	b.n	8025c9a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8025e4e:	d021      	beq.n	8025e94 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 8025e50:	1e63      	subs	r3, r4, #1
 8025e52:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8025e54:	fb00 5003 	mla	r0, r0, r3, r5
 8025e58:	1400      	asrs	r0, r0, #16
 8025e5a:	f53f af3a 	bmi.w	8025cd2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8025e5e:	3901      	subs	r1, #1
 8025e60:	4288      	cmp	r0, r1
 8025e62:	f6bf af36 	bge.w	8025cd2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8025e66:	9920      	ldr	r1, [sp, #128]	; 0x80
 8025e68:	fb01 6303 	mla	r3, r1, r3, r6
 8025e6c:	141b      	asrs	r3, r3, #16
 8025e6e:	f53f af30 	bmi.w	8025cd2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8025e72:	3a01      	subs	r2, #1
 8025e74:	4293      	cmp	r3, r2
 8025e76:	f6bf af2c 	bge.w	8025cd2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8025e7a:	f10b 0c03 	add.w	ip, fp, #3
 8025e7e:	46a6      	mov	lr, r4
 8025e80:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8025e84:	f1be 0f00 	cmp.w	lr, #0
 8025e88:	dc79      	bgt.n	8025f7e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 8025e8a:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8025e8e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8025e92:	44a3      	add	fp, r4
 8025e94:	9b07      	ldr	r3, [sp, #28]
 8025e96:	2b00      	cmp	r3, #0
 8025e98:	f340 8123 	ble.w	80260e2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8025e9c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8025ea0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8025ea2:	ee30 0a04 	vadd.f32	s0, s0, s8
 8025ea6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8025eaa:	eef0 6a62 	vmov.f32	s13, s5
 8025eae:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8025eb2:	ee31 1a05 	vadd.f32	s2, s2, s10
 8025eb6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025eba:	ee16 5a90 	vmov	r5, s13
 8025ebe:	eef0 6a43 	vmov.f32	s13, s6
 8025ec2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025ec6:	ee16 6a90 	vmov	r6, s13
 8025eca:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8025ece:	ee61 7a27 	vmul.f32	s15, s2, s15
 8025ed2:	ee77 2a62 	vsub.f32	s5, s14, s5
 8025ed6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8025eda:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8025ede:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8025ee2:	ee12 2a90 	vmov	r2, s5
 8025ee6:	eef0 2a47 	vmov.f32	s5, s14
 8025eea:	fb92 f3f3 	sdiv	r3, r2, r3
 8025eee:	ee13 2a10 	vmov	r2, s6
 8025ef2:	931f      	str	r3, [sp, #124]	; 0x7c
 8025ef4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8025ef6:	eeb0 3a67 	vmov.f32	s6, s15
 8025efa:	fb92 f3f3 	sdiv	r3, r2, r3
 8025efe:	9320      	str	r3, [sp, #128]	; 0x80
 8025f00:	9b07      	ldr	r3, [sp, #28]
 8025f02:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8025f04:	3b01      	subs	r3, #1
 8025f06:	9307      	str	r3, [sp, #28]
 8025f08:	bf08      	it	eq
 8025f0a:	4614      	moveq	r4, r2
 8025f0c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8025f0e:	bf18      	it	ne
 8025f10:	461c      	movne	r4, r3
 8025f12:	e6b4      	b.n	8025c7e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8025f14:	2900      	cmp	r1, #0
 8025f16:	f43f af3c 	beq.w	8025d92 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8025f1a:	eb09 0003 	add.w	r0, r9, r3
 8025f1e:	0843      	lsrs	r3, r0, #1
 8025f20:	07c0      	lsls	r0, r0, #31
 8025f22:	f818 3003 	ldrb.w	r3, [r8, r3]
 8025f26:	bf54      	ite	pl
 8025f28:	f003 030f 	andpl.w	r3, r3, #15
 8025f2c:	111b      	asrmi	r3, r3, #4
 8025f2e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8025f32:	b2db      	uxtb	r3, r3
 8025f34:	930a      	str	r3, [sp, #40]	; 0x28
 8025f36:	e72c      	b.n	8025d92 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8025f38:	703a      	strb	r2, [r7, #0]
 8025f3a:	7078      	strb	r0, [r7, #1]
 8025f3c:	f887 e002 	strb.w	lr, [r7, #2]
 8025f40:	e775      	b.n	8025e2e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8025f42:	1c5a      	adds	r2, r3, #1
 8025f44:	f53f af73 	bmi.w	8025e2e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8025f48:	4594      	cmp	ip, r2
 8025f4a:	f6ff af70 	blt.w	8025e2e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8025f4e:	1c42      	adds	r2, r0, #1
 8025f50:	f53f af6d 	bmi.w	8025e2e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8025f54:	4596      	cmp	lr, r2
 8025f56:	f6ff af6a 	blt.w	8025e2e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8025f5a:	9302      	str	r3, [sp, #8]
 8025f5c:	fa0f f38e 	sxth.w	r3, lr
 8025f60:	9a08      	ldr	r2, [sp, #32]
 8025f62:	9301      	str	r3, [sp, #4]
 8025f64:	fa0f f38c 	sxth.w	r3, ip
 8025f68:	9105      	str	r1, [sp, #20]
 8025f6a:	4639      	mov	r1, r7
 8025f6c:	9300      	str	r3, [sp, #0]
 8025f6e:	464b      	mov	r3, r9
 8025f70:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8025f74:	4642      	mov	r2, r8
 8025f76:	9811      	ldr	r0, [sp, #68]	; 0x44
 8025f78:	f7ff fd90 	bl	8025a9c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 8025f7c:	e757      	b.n	8025e2e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8025f7e:	142a      	asrs	r2, r5, #16
 8025f80:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8025f84:	1433      	asrs	r3, r6, #16
 8025f86:	f3c6 3703 	ubfx	r7, r6, #12, #4
 8025f8a:	fb09 2303 	mla	r3, r9, r3, r2
 8025f8e:	085a      	lsrs	r2, r3, #1
 8025f90:	07d9      	lsls	r1, r3, #31
 8025f92:	f818 2002 	ldrb.w	r2, [r8, r2]
 8025f96:	bf54      	ite	pl
 8025f98:	f002 020f 	andpl.w	r2, r2, #15
 8025f9c:	1112      	asrmi	r2, r2, #4
 8025f9e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8025fa2:	b2d2      	uxtb	r2, r2
 8025fa4:	2800      	cmp	r0, #0
 8025fa6:	f000 8085 	beq.w	80260b4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 8025faa:	f103 0a01 	add.w	sl, r3, #1
 8025fae:	ea4f 015a 	mov.w	r1, sl, lsr #1
 8025fb2:	f01a 0f01 	tst.w	sl, #1
 8025fb6:	f818 1001 	ldrb.w	r1, [r8, r1]
 8025fba:	bf0c      	ite	eq
 8025fbc:	f001 010f 	andeq.w	r1, r1, #15
 8025fc0:	1109      	asrne	r1, r1, #4
 8025fc2:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8025fc6:	b2c9      	uxtb	r1, r1
 8025fc8:	910f      	str	r1, [sp, #60]	; 0x3c
 8025fca:	b1df      	cbz	r7, 8026004 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8025fcc:	444b      	add	r3, r9
 8025fce:	0859      	lsrs	r1, r3, #1
 8025fd0:	f013 0f01 	tst.w	r3, #1
 8025fd4:	f103 0301 	add.w	r3, r3, #1
 8025fd8:	f818 1001 	ldrb.w	r1, [r8, r1]
 8025fdc:	bf0c      	ite	eq
 8025fde:	f001 010f 	andeq.w	r1, r1, #15
 8025fe2:	1109      	asrne	r1, r1, #4
 8025fe4:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8025fe8:	b2c9      	uxtb	r1, r1
 8025fea:	910b      	str	r1, [sp, #44]	; 0x2c
 8025fec:	0859      	lsrs	r1, r3, #1
 8025fee:	07db      	lsls	r3, r3, #31
 8025ff0:	f818 1001 	ldrb.w	r1, [r8, r1]
 8025ff4:	bf54      	ite	pl
 8025ff6:	f001 010f 	andpl.w	r1, r1, #15
 8025ffa:	1109      	asrmi	r1, r1, #4
 8025ffc:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8026000:	b2c9      	uxtb	r1, r1
 8026002:	9110      	str	r1, [sp, #64]	; 0x40
 8026004:	b280      	uxth	r0, r0
 8026006:	b2bf      	uxth	r7, r7
 8026008:	fb00 f307 	mul.w	r3, r0, r7
 802600c:	0100      	lsls	r0, r0, #4
 802600e:	ebc3 1707 	rsb	r7, r3, r7, lsl #4
 8026012:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 8026016:	1ac0      	subs	r0, r0, r3
 8026018:	b2bf      	uxth	r7, r7
 802601a:	b280      	uxth	r0, r0
 802601c:	1bc9      	subs	r1, r1, r7
 802601e:	fa1f fa81 	uxth.w	sl, r1
 8026022:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8026024:	4348      	muls	r0, r1
 8026026:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8026028:	fb02 020a 	mla	r2, r2, sl, r0
 802602c:	fb07 2701 	mla	r7, r7, r1, r2
 8026030:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8026032:	fb03 7302 	mla	r3, r3, r2, r7
 8026036:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802603a:	b393      	cbz	r3, 80260a2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 802603c:	4a2a      	ldr	r2, [pc, #168]	; (80260e8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 802603e:	2bff      	cmp	r3, #255	; 0xff
 8026040:	6811      	ldr	r1, [r2, #0]
 8026042:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 8026046:	f3c1 2707 	ubfx	r7, r1, #8, #8
 802604a:	b2c9      	uxtb	r1, r1
 802604c:	d042      	beq.n	80260d4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 802604e:	b298      	uxth	r0, r3
 8026050:	43db      	mvns	r3, r3
 8026052:	f81c 2c03 	ldrb.w	r2, [ip, #-3]
 8026056:	fb11 f100 	smulbb	r1, r1, r0
 802605a:	b2db      	uxtb	r3, r3
 802605c:	fb17 f700 	smulbb	r7, r7, r0
 8026060:	fb02 1103 	mla	r1, r2, r3, r1
 8026064:	fb1a f000 	smulbb	r0, sl, r0
 8026068:	b289      	uxth	r1, r1
 802606a:	1c4a      	adds	r2, r1, #1
 802606c:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8026070:	f81c 2c02 	ldrb.w	r2, [ip, #-2]
 8026074:	fb02 7703 	mla	r7, r2, r3, r7
 8026078:	1209      	asrs	r1, r1, #8
 802607a:	b2bf      	uxth	r7, r7
 802607c:	f80c 1c03 	strb.w	r1, [ip, #-3]
 8026080:	1c7a      	adds	r2, r7, #1
 8026082:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8026086:	f81c 2c01 	ldrb.w	r2, [ip, #-1]
 802608a:	fb02 0303 	mla	r3, r2, r3, r0
 802608e:	123f      	asrs	r7, r7, #8
 8026090:	b29b      	uxth	r3, r3
 8026092:	f80c 7c02 	strb.w	r7, [ip, #-2]
 8026096:	1c5a      	adds	r2, r3, #1
 8026098:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802609c:	121b      	asrs	r3, r3, #8
 802609e:	f80c 3c01 	strb.w	r3, [ip, #-1]
 80260a2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80260a4:	f10c 0c03 	add.w	ip, ip, #3
 80260a8:	f10e 3eff 	add.w	lr, lr, #4294967295
 80260ac:	441d      	add	r5, r3
 80260ae:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80260b0:	441e      	add	r6, r3
 80260b2:	e6e7      	b.n	8025e84 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 80260b4:	2f00      	cmp	r7, #0
 80260b6:	d0a5      	beq.n	8026004 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 80260b8:	444b      	add	r3, r9
 80260ba:	0859      	lsrs	r1, r3, #1
 80260bc:	07db      	lsls	r3, r3, #31
 80260be:	f818 1001 	ldrb.w	r1, [r8, r1]
 80260c2:	bf54      	ite	pl
 80260c4:	f001 010f 	andpl.w	r1, r1, #15
 80260c8:	1109      	asrmi	r1, r1, #4
 80260ca:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80260ce:	b2c9      	uxtb	r1, r1
 80260d0:	910b      	str	r1, [sp, #44]	; 0x2c
 80260d2:	e797      	b.n	8026004 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 80260d4:	f80c 1c03 	strb.w	r1, [ip, #-3]
 80260d8:	f80c 7c02 	strb.w	r7, [ip, #-2]
 80260dc:	f80c ac01 	strb.w	sl, [ip, #-1]
 80260e0:	e7df      	b.n	80260a2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 80260e2:	b013      	add	sp, #76	; 0x4c
 80260e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80260e8:	24026184 	.word	0x24026184

080260ec <CRC_Lock>:
 80260ec:	4a20      	ldr	r2, [pc, #128]	; (8026170 <CRC_Lock+0x84>)
 80260ee:	b530      	push	{r4, r5, lr}
 80260f0:	6813      	ldr	r3, [r2, #0]
 80260f2:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 80260f6:	f24c 2540 	movw	r5, #49728	; 0xc240
 80260fa:	f023 0301 	bic.w	r3, r3, #1
 80260fe:	6013      	str	r3, [r2, #0]
 8026100:	4b1c      	ldr	r3, [pc, #112]	; (8026174 <CRC_Lock+0x88>)
 8026102:	681a      	ldr	r2, [r3, #0]
 8026104:	4022      	ands	r2, r4
 8026106:	42aa      	cmp	r2, r5
 8026108:	d005      	beq.n	8026116 <CRC_Lock+0x2a>
 802610a:	681b      	ldr	r3, [r3, #0]
 802610c:	f24c 2270 	movw	r2, #49776	; 0xc270
 8026110:	4023      	ands	r3, r4
 8026112:	4293      	cmp	r3, r2
 8026114:	d124      	bne.n	8026160 <CRC_Lock+0x74>
 8026116:	4b18      	ldr	r3, [pc, #96]	; (8026178 <CRC_Lock+0x8c>)
 8026118:	681b      	ldr	r3, [r3, #0]
 802611a:	bb0b      	cbnz	r3, 8026160 <CRC_Lock+0x74>
 802611c:	4b17      	ldr	r3, [pc, #92]	; (802617c <CRC_Lock+0x90>)
 802611e:	681a      	ldr	r2, [r3, #0]
 8026120:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8026124:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8026128:	d00d      	beq.n	8026146 <CRC_Lock+0x5a>
 802612a:	681a      	ldr	r2, [r3, #0]
 802612c:	f240 4483 	movw	r4, #1155	; 0x483
 8026130:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8026134:	42a2      	cmp	r2, r4
 8026136:	d006      	beq.n	8026146 <CRC_Lock+0x5a>
 8026138:	681b      	ldr	r3, [r3, #0]
 802613a:	f240 4285 	movw	r2, #1157	; 0x485
 802613e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8026142:	4293      	cmp	r3, r2
 8026144:	d10c      	bne.n	8026160 <CRC_Lock+0x74>
 8026146:	4b0e      	ldr	r3, [pc, #56]	; (8026180 <CRC_Lock+0x94>)
 8026148:	2201      	movs	r2, #1
 802614a:	601a      	str	r2, [r3, #0]
 802614c:	681a      	ldr	r2, [r3, #0]
 802614e:	2a00      	cmp	r2, #0
 8026150:	d1fc      	bne.n	802614c <CRC_Lock+0x60>
 8026152:	4b0c      	ldr	r3, [pc, #48]	; (8026184 <CRC_Lock+0x98>)
 8026154:	6018      	str	r0, [r3, #0]
 8026156:	6818      	ldr	r0, [r3, #0]
 8026158:	1a43      	subs	r3, r0, r1
 802615a:	4258      	negs	r0, r3
 802615c:	4158      	adcs	r0, r3
 802615e:	bd30      	pop	{r4, r5, pc}
 8026160:	4b09      	ldr	r3, [pc, #36]	; (8026188 <CRC_Lock+0x9c>)
 8026162:	2201      	movs	r2, #1
 8026164:	601a      	str	r2, [r3, #0]
 8026166:	681a      	ldr	r2, [r3, #0]
 8026168:	2a00      	cmp	r2, #0
 802616a:	d1fc      	bne.n	8026166 <CRC_Lock+0x7a>
 802616c:	4b07      	ldr	r3, [pc, #28]	; (802618c <CRC_Lock+0xa0>)
 802616e:	e7f1      	b.n	8026154 <CRC_Lock+0x68>
 8026170:	e0002000 	.word	0xe0002000
 8026174:	e000ed00 	.word	0xe000ed00
 8026178:	e0042000 	.word	0xe0042000
 802617c:	5c001000 	.word	0x5c001000
 8026180:	58024c08 	.word	0x58024c08
 8026184:	58024c00 	.word	0x58024c00
 8026188:	40023008 	.word	0x40023008
 802618c:	40023000 	.word	0x40023000

08026190 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8026190:	6101      	str	r1, [r0, #16]
 8026192:	4770      	bx	lr

08026194 <_ZN8touchgfx8Gestures4tickEv>:
 8026194:	7b83      	ldrb	r3, [r0, #14]
 8026196:	b14b      	cbz	r3, 80261ac <_ZN8touchgfx8Gestures4tickEv+0x18>
 8026198:	8903      	ldrh	r3, [r0, #8]
 802619a:	3301      	adds	r3, #1
 802619c:	b29b      	uxth	r3, r3
 802619e:	2b07      	cmp	r3, #7
 80261a0:	8103      	strh	r3, [r0, #8]
 80261a2:	bf81      	itttt	hi
 80261a4:	2300      	movhi	r3, #0
 80261a6:	8143      	strhhi	r3, [r0, #10]
 80261a8:	8183      	strhhi	r3, [r0, #12]
 80261aa:	7383      	strbhi	r3, [r0, #14]
 80261ac:	4770      	bx	lr
	...

080261b0 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 80261b0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80261b4:	4698      	mov	r8, r3
 80261b6:	8883      	ldrh	r3, [r0, #4]
 80261b8:	4604      	mov	r4, r0
 80261ba:	4617      	mov	r7, r2
 80261bc:	f8ad 3006 	strh.w	r3, [sp, #6]
 80261c0:	eba8 0303 	sub.w	r3, r8, r3
 80261c4:	4a19      	ldr	r2, [pc, #100]	; (802622c <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 80261c6:	460e      	mov	r6, r1
 80261c8:	b21b      	sxth	r3, r3
 80261ca:	88c1      	ldrh	r1, [r0, #6]
 80261cc:	9200      	str	r2, [sp, #0]
 80261ce:	2000      	movs	r0, #0
 80261d0:	2b00      	cmp	r3, #0
 80261d2:	8aa2      	ldrh	r2, [r4, #20]
 80261d4:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 80261d8:	bfb8      	it	lt
 80261da:	425b      	neglt	r3, r3
 80261dc:	f88d 0004 	strb.w	r0, [sp, #4]
 80261e0:	f8ad 1008 	strh.w	r1, [sp, #8]
 80261e4:	b21b      	sxth	r3, r3
 80261e6:	f8ad 800a 	strh.w	r8, [sp, #10]
 80261ea:	f8ad 500c 	strh.w	r5, [sp, #12]
 80261ee:	4293      	cmp	r3, r2
 80261f0:	dc07      	bgt.n	8026202 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 80261f2:	1a69      	subs	r1, r5, r1
 80261f4:	b209      	sxth	r1, r1
 80261f6:	2900      	cmp	r1, #0
 80261f8:	bfb8      	it	lt
 80261fa:	4249      	neglt	r1, r1
 80261fc:	b209      	sxth	r1, r1
 80261fe:	428a      	cmp	r2, r1
 8026200:	da10      	bge.n	8026224 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 8026202:	6920      	ldr	r0, [r4, #16]
 8026204:	4669      	mov	r1, sp
 8026206:	eba8 0606 	sub.w	r6, r8, r6
 802620a:	1bef      	subs	r7, r5, r7
 802620c:	6803      	ldr	r3, [r0, #0]
 802620e:	685b      	ldr	r3, [r3, #4]
 8026210:	4798      	blx	r3
 8026212:	2300      	movs	r3, #0
 8026214:	2001      	movs	r0, #1
 8026216:	8166      	strh	r6, [r4, #10]
 8026218:	8123      	strh	r3, [r4, #8]
 802621a:	81a7      	strh	r7, [r4, #12]
 802621c:	f8a4 8004 	strh.w	r8, [r4, #4]
 8026220:	80e5      	strh	r5, [r4, #6]
 8026222:	73a0      	strb	r0, [r4, #14]
 8026224:	b004      	add	sp, #16
 8026226:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802622a:	bf00      	nop
 802622c:	0802af7c 	.word	0x0802af7c

08026230 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8026230:	b5f0      	push	{r4, r5, r6, r7, lr}
 8026232:	461e      	mov	r6, r3
 8026234:	1e4b      	subs	r3, r1, #1
 8026236:	b085      	sub	sp, #20
 8026238:	4604      	mov	r4, r0
 802623a:	2b01      	cmp	r3, #1
 802623c:	460d      	mov	r5, r1
 802623e:	4617      	mov	r7, r2
 8026240:	d84b      	bhi.n	80262da <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 8026242:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8026246:	1cd3      	adds	r3, r2, #3
 8026248:	b29b      	uxth	r3, r3
 802624a:	2b06      	cmp	r3, #6
 802624c:	d916      	bls.n	802627c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 802624e:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 80262f0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8026252:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8026256:	f8cd c004 	str.w	ip, [sp, #4]
 802625a:	f04f 0c00 	mov.w	ip, #0
 802625e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8026262:	6900      	ldr	r0, [r0, #16]
 8026264:	f8ad 100c 	strh.w	r1, [sp, #12]
 8026268:	a901      	add	r1, sp, #4
 802626a:	f88d c008 	strb.w	ip, [sp, #8]
 802626e:	f8ad 200a 	strh.w	r2, [sp, #10]
 8026272:	f8ad 300e 	strh.w	r3, [sp, #14]
 8026276:	6803      	ldr	r3, [r0, #0]
 8026278:	689b      	ldr	r3, [r3, #8]
 802627a:	4798      	blx	r3
 802627c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8026280:	1cd3      	adds	r3, r2, #3
 8026282:	b29b      	uxth	r3, r3
 8026284:	2b06      	cmp	r3, #6
 8026286:	d916      	bls.n	80262b6 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8026288:	f8df c064 	ldr.w	ip, [pc, #100]	; 80262f0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 802628c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8026290:	f8cd c004 	str.w	ip, [sp, #4]
 8026294:	f04f 0c01 	mov.w	ip, #1
 8026298:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802629c:	6920      	ldr	r0, [r4, #16]
 802629e:	f8ad 100c 	strh.w	r1, [sp, #12]
 80262a2:	a901      	add	r1, sp, #4
 80262a4:	f88d c008 	strb.w	ip, [sp, #8]
 80262a8:	f8ad 200a 	strh.w	r2, [sp, #10]
 80262ac:	f8ad 300e 	strh.w	r3, [sp, #14]
 80262b0:	6803      	ldr	r3, [r0, #0]
 80262b2:	689b      	ldr	r3, [r3, #8]
 80262b4:	4798      	blx	r3
 80262b6:	4b0d      	ldr	r3, [pc, #52]	; (80262ec <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 80262b8:	a901      	add	r1, sp, #4
 80262ba:	6920      	ldr	r0, [r4, #16]
 80262bc:	9301      	str	r3, [sp, #4]
 80262be:	2300      	movs	r3, #0
 80262c0:	f88d 5008 	strb.w	r5, [sp, #8]
 80262c4:	f8ad 700a 	strh.w	r7, [sp, #10]
 80262c8:	f8ad 600c 	strh.w	r6, [sp, #12]
 80262cc:	f8ad 300e 	strh.w	r3, [sp, #14]
 80262d0:	6803      	ldr	r3, [r0, #0]
 80262d2:	681b      	ldr	r3, [r3, #0]
 80262d4:	4798      	blx	r3
 80262d6:	b005      	add	sp, #20
 80262d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80262da:	2900      	cmp	r1, #0
 80262dc:	d1eb      	bne.n	80262b6 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80262de:	80a2      	strh	r2, [r4, #4]
 80262e0:	80c6      	strh	r6, [r0, #6]
 80262e2:	60a1      	str	r1, [r4, #8]
 80262e4:	81a1      	strh	r1, [r4, #12]
 80262e6:	73a1      	strb	r1, [r4, #14]
 80262e8:	e7e5      	b.n	80262b6 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80262ea:	bf00      	nop
 80262ec:	0802af68 	.word	0x0802af68
 80262f0:	0802af90 	.word	0x0802af90

080262f4 <__aeabi_atexit>:
 80262f4:	460b      	mov	r3, r1
 80262f6:	4601      	mov	r1, r0
 80262f8:	4618      	mov	r0, r3
 80262fa:	f000 b853 	b.w	80263a4 <__cxa_atexit>

080262fe <_ZdlPvj>:
 80262fe:	f000 b812 	b.w	8026326 <_ZdlPv>

08026302 <__cxa_guard_acquire>:
 8026302:	6803      	ldr	r3, [r0, #0]
 8026304:	07db      	lsls	r3, r3, #31
 8026306:	d406      	bmi.n	8026316 <__cxa_guard_acquire+0x14>
 8026308:	7843      	ldrb	r3, [r0, #1]
 802630a:	b103      	cbz	r3, 802630e <__cxa_guard_acquire+0xc>
 802630c:	deff      	udf	#255	; 0xff
 802630e:	2301      	movs	r3, #1
 8026310:	7043      	strb	r3, [r0, #1]
 8026312:	4618      	mov	r0, r3
 8026314:	4770      	bx	lr
 8026316:	2000      	movs	r0, #0
 8026318:	4770      	bx	lr

0802631a <__cxa_guard_release>:
 802631a:	2301      	movs	r3, #1
 802631c:	6003      	str	r3, [r0, #0]
 802631e:	4770      	bx	lr

08026320 <__cxa_pure_virtual>:
 8026320:	b508      	push	{r3, lr}
 8026322:	f000 f80f 	bl	8026344 <_ZSt9terminatev>

08026326 <_ZdlPv>:
 8026326:	f000 b893 	b.w	8026450 <free>

0802632a <_ZN10__cxxabiv111__terminateEPFvvE>:
 802632a:	b508      	push	{r3, lr}
 802632c:	4780      	blx	r0
 802632e:	f000 f80e 	bl	802634e <abort>
	...

08026334 <_ZSt13get_terminatev>:
 8026334:	4b02      	ldr	r3, [pc, #8]	; (8026340 <_ZSt13get_terminatev+0xc>)
 8026336:	6818      	ldr	r0, [r3, #0]
 8026338:	f3bf 8f5b 	dmb	ish
 802633c:	4770      	bx	lr
 802633e:	bf00      	nop
 8026340:	240000bc 	.word	0x240000bc

08026344 <_ZSt9terminatev>:
 8026344:	b508      	push	{r3, lr}
 8026346:	f7ff fff5 	bl	8026334 <_ZSt13get_terminatev>
 802634a:	f7ff ffee 	bl	802632a <_ZN10__cxxabiv111__terminateEPFvvE>

0802634e <abort>:
 802634e:	b508      	push	{r3, lr}
 8026350:	2006      	movs	r0, #6
 8026352:	f000 fca1 	bl	8026c98 <raise>
 8026356:	2001      	movs	r0, #1
 8026358:	f7e0 ff4c 	bl	80071f4 <_exit>

0802635c <__assert_func>:
 802635c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802635e:	4614      	mov	r4, r2
 8026360:	461a      	mov	r2, r3
 8026362:	4b09      	ldr	r3, [pc, #36]	; (8026388 <__assert_func+0x2c>)
 8026364:	681b      	ldr	r3, [r3, #0]
 8026366:	4605      	mov	r5, r0
 8026368:	68d8      	ldr	r0, [r3, #12]
 802636a:	b14c      	cbz	r4, 8026380 <__assert_func+0x24>
 802636c:	4b07      	ldr	r3, [pc, #28]	; (802638c <__assert_func+0x30>)
 802636e:	9100      	str	r1, [sp, #0]
 8026370:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8026374:	4906      	ldr	r1, [pc, #24]	; (8026390 <__assert_func+0x34>)
 8026376:	462b      	mov	r3, r5
 8026378:	f000 f828 	bl	80263cc <fiprintf>
 802637c:	f7ff ffe7 	bl	802634e <abort>
 8026380:	4b04      	ldr	r3, [pc, #16]	; (8026394 <__assert_func+0x38>)
 8026382:	461c      	mov	r4, r3
 8026384:	e7f3      	b.n	802636e <__assert_func+0x12>
 8026386:	bf00      	nop
 8026388:	240000c0 	.word	0x240000c0
 802638c:	0802b1b8 	.word	0x0802b1b8
 8026390:	0802b1c5 	.word	0x0802b1c5
 8026394:	0802b1f3 	.word	0x0802b1f3

08026398 <atexit>:
 8026398:	2300      	movs	r3, #0
 802639a:	4601      	mov	r1, r0
 802639c:	461a      	mov	r2, r3
 802639e:	4618      	mov	r0, r3
 80263a0:	f000 bd6a 	b.w	8026e78 <__register_exitproc>

080263a4 <__cxa_atexit>:
 80263a4:	b510      	push	{r4, lr}
 80263a6:	4c05      	ldr	r4, [pc, #20]	; (80263bc <__cxa_atexit+0x18>)
 80263a8:	4613      	mov	r3, r2
 80263aa:	b12c      	cbz	r4, 80263b8 <__cxa_atexit+0x14>
 80263ac:	460a      	mov	r2, r1
 80263ae:	4601      	mov	r1, r0
 80263b0:	2002      	movs	r0, #2
 80263b2:	f000 fd61 	bl	8026e78 <__register_exitproc>
 80263b6:	bd10      	pop	{r4, pc}
 80263b8:	4620      	mov	r0, r4
 80263ba:	e7fc      	b.n	80263b6 <__cxa_atexit+0x12>
 80263bc:	08026e79 	.word	0x08026e79

080263c0 <__errno>:
 80263c0:	4b01      	ldr	r3, [pc, #4]	; (80263c8 <__errno+0x8>)
 80263c2:	6818      	ldr	r0, [r3, #0]
 80263c4:	4770      	bx	lr
 80263c6:	bf00      	nop
 80263c8:	240000c0 	.word	0x240000c0

080263cc <fiprintf>:
 80263cc:	b40e      	push	{r1, r2, r3}
 80263ce:	b503      	push	{r0, r1, lr}
 80263d0:	4601      	mov	r1, r0
 80263d2:	ab03      	add	r3, sp, #12
 80263d4:	4805      	ldr	r0, [pc, #20]	; (80263ec <fiprintf+0x20>)
 80263d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80263da:	6800      	ldr	r0, [r0, #0]
 80263dc:	9301      	str	r3, [sp, #4]
 80263de:	f000 f95f 	bl	80266a0 <_vfiprintf_r>
 80263e2:	b002      	add	sp, #8
 80263e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80263e8:	b003      	add	sp, #12
 80263ea:	4770      	bx	lr
 80263ec:	240000c0 	.word	0x240000c0

080263f0 <__libc_init_array>:
 80263f0:	b570      	push	{r4, r5, r6, lr}
 80263f2:	4d0d      	ldr	r5, [pc, #52]	; (8026428 <__libc_init_array+0x38>)
 80263f4:	4c0d      	ldr	r4, [pc, #52]	; (802642c <__libc_init_array+0x3c>)
 80263f6:	1b64      	subs	r4, r4, r5
 80263f8:	10a4      	asrs	r4, r4, #2
 80263fa:	2600      	movs	r6, #0
 80263fc:	42a6      	cmp	r6, r4
 80263fe:	d109      	bne.n	8026414 <__libc_init_array+0x24>
 8026400:	4d0b      	ldr	r5, [pc, #44]	; (8026430 <__libc_init_array+0x40>)
 8026402:	4c0c      	ldr	r4, [pc, #48]	; (8026434 <__libc_init_array+0x44>)
 8026404:	f001 f86e 	bl	80274e4 <_init>
 8026408:	1b64      	subs	r4, r4, r5
 802640a:	10a4      	asrs	r4, r4, #2
 802640c:	2600      	movs	r6, #0
 802640e:	42a6      	cmp	r6, r4
 8026410:	d105      	bne.n	802641e <__libc_init_array+0x2e>
 8026412:	bd70      	pop	{r4, r5, r6, pc}
 8026414:	f855 3b04 	ldr.w	r3, [r5], #4
 8026418:	4798      	blx	r3
 802641a:	3601      	adds	r6, #1
 802641c:	e7ee      	b.n	80263fc <__libc_init_array+0xc>
 802641e:	f855 3b04 	ldr.w	r3, [r5], #4
 8026422:	4798      	blx	r3
 8026424:	3601      	adds	r6, #1
 8026426:	e7f2      	b.n	802640e <__libc_init_array+0x1e>
 8026428:	0802b2a8 	.word	0x0802b2a8
 802642c:	0802b2a8 	.word	0x0802b2a8
 8026430:	0802b2a8 	.word	0x0802b2a8
 8026434:	0802b2c4 	.word	0x0802b2c4

08026438 <__retarget_lock_init_recursive>:
 8026438:	4770      	bx	lr

0802643a <__retarget_lock_acquire_recursive>:
 802643a:	4770      	bx	lr

0802643c <__retarget_lock_release>:
 802643c:	4770      	bx	lr

0802643e <__retarget_lock_release_recursive>:
 802643e:	4770      	bx	lr

08026440 <malloc>:
 8026440:	4b02      	ldr	r3, [pc, #8]	; (802644c <malloc+0xc>)
 8026442:	4601      	mov	r1, r0
 8026444:	6818      	ldr	r0, [r3, #0]
 8026446:	f000 b88d 	b.w	8026564 <_malloc_r>
 802644a:	bf00      	nop
 802644c:	240000c0 	.word	0x240000c0

08026450 <free>:
 8026450:	4b02      	ldr	r3, [pc, #8]	; (802645c <free+0xc>)
 8026452:	4601      	mov	r1, r0
 8026454:	6818      	ldr	r0, [r3, #0]
 8026456:	f000 b819 	b.w	802648c <_free_r>
 802645a:	bf00      	nop
 802645c:	240000c0 	.word	0x240000c0

08026460 <memcpy>:
 8026460:	440a      	add	r2, r1
 8026462:	4291      	cmp	r1, r2
 8026464:	f100 33ff 	add.w	r3, r0, #4294967295
 8026468:	d100      	bne.n	802646c <memcpy+0xc>
 802646a:	4770      	bx	lr
 802646c:	b510      	push	{r4, lr}
 802646e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8026472:	f803 4f01 	strb.w	r4, [r3, #1]!
 8026476:	4291      	cmp	r1, r2
 8026478:	d1f9      	bne.n	802646e <memcpy+0xe>
 802647a:	bd10      	pop	{r4, pc}

0802647c <memset>:
 802647c:	4402      	add	r2, r0
 802647e:	4603      	mov	r3, r0
 8026480:	4293      	cmp	r3, r2
 8026482:	d100      	bne.n	8026486 <memset+0xa>
 8026484:	4770      	bx	lr
 8026486:	f803 1b01 	strb.w	r1, [r3], #1
 802648a:	e7f9      	b.n	8026480 <memset+0x4>

0802648c <_free_r>:
 802648c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802648e:	2900      	cmp	r1, #0
 8026490:	d044      	beq.n	802651c <_free_r+0x90>
 8026492:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8026496:	9001      	str	r0, [sp, #4]
 8026498:	2b00      	cmp	r3, #0
 802649a:	f1a1 0404 	sub.w	r4, r1, #4
 802649e:	bfb8      	it	lt
 80264a0:	18e4      	addlt	r4, r4, r3
 80264a2:	f000 ff67 	bl	8027374 <__malloc_lock>
 80264a6:	4a1e      	ldr	r2, [pc, #120]	; (8026520 <_free_r+0x94>)
 80264a8:	9801      	ldr	r0, [sp, #4]
 80264aa:	6813      	ldr	r3, [r2, #0]
 80264ac:	b933      	cbnz	r3, 80264bc <_free_r+0x30>
 80264ae:	6063      	str	r3, [r4, #4]
 80264b0:	6014      	str	r4, [r2, #0]
 80264b2:	b003      	add	sp, #12
 80264b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80264b8:	f000 bf62 	b.w	8027380 <__malloc_unlock>
 80264bc:	42a3      	cmp	r3, r4
 80264be:	d908      	bls.n	80264d2 <_free_r+0x46>
 80264c0:	6825      	ldr	r5, [r4, #0]
 80264c2:	1961      	adds	r1, r4, r5
 80264c4:	428b      	cmp	r3, r1
 80264c6:	bf01      	itttt	eq
 80264c8:	6819      	ldreq	r1, [r3, #0]
 80264ca:	685b      	ldreq	r3, [r3, #4]
 80264cc:	1949      	addeq	r1, r1, r5
 80264ce:	6021      	streq	r1, [r4, #0]
 80264d0:	e7ed      	b.n	80264ae <_free_r+0x22>
 80264d2:	461a      	mov	r2, r3
 80264d4:	685b      	ldr	r3, [r3, #4]
 80264d6:	b10b      	cbz	r3, 80264dc <_free_r+0x50>
 80264d8:	42a3      	cmp	r3, r4
 80264da:	d9fa      	bls.n	80264d2 <_free_r+0x46>
 80264dc:	6811      	ldr	r1, [r2, #0]
 80264de:	1855      	adds	r5, r2, r1
 80264e0:	42a5      	cmp	r5, r4
 80264e2:	d10b      	bne.n	80264fc <_free_r+0x70>
 80264e4:	6824      	ldr	r4, [r4, #0]
 80264e6:	4421      	add	r1, r4
 80264e8:	1854      	adds	r4, r2, r1
 80264ea:	42a3      	cmp	r3, r4
 80264ec:	6011      	str	r1, [r2, #0]
 80264ee:	d1e0      	bne.n	80264b2 <_free_r+0x26>
 80264f0:	681c      	ldr	r4, [r3, #0]
 80264f2:	685b      	ldr	r3, [r3, #4]
 80264f4:	6053      	str	r3, [r2, #4]
 80264f6:	4421      	add	r1, r4
 80264f8:	6011      	str	r1, [r2, #0]
 80264fa:	e7da      	b.n	80264b2 <_free_r+0x26>
 80264fc:	d902      	bls.n	8026504 <_free_r+0x78>
 80264fe:	230c      	movs	r3, #12
 8026500:	6003      	str	r3, [r0, #0]
 8026502:	e7d6      	b.n	80264b2 <_free_r+0x26>
 8026504:	6825      	ldr	r5, [r4, #0]
 8026506:	1961      	adds	r1, r4, r5
 8026508:	428b      	cmp	r3, r1
 802650a:	bf04      	itt	eq
 802650c:	6819      	ldreq	r1, [r3, #0]
 802650e:	685b      	ldreq	r3, [r3, #4]
 8026510:	6063      	str	r3, [r4, #4]
 8026512:	bf04      	itt	eq
 8026514:	1949      	addeq	r1, r1, r5
 8026516:	6021      	streq	r1, [r4, #0]
 8026518:	6054      	str	r4, [r2, #4]
 802651a:	e7ca      	b.n	80264b2 <_free_r+0x26>
 802651c:	b003      	add	sp, #12
 802651e:	bd30      	pop	{r4, r5, pc}
 8026520:	2402625c 	.word	0x2402625c

08026524 <sbrk_aligned>:
 8026524:	b570      	push	{r4, r5, r6, lr}
 8026526:	4e0e      	ldr	r6, [pc, #56]	; (8026560 <sbrk_aligned+0x3c>)
 8026528:	460c      	mov	r4, r1
 802652a:	6831      	ldr	r1, [r6, #0]
 802652c:	4605      	mov	r5, r0
 802652e:	b911      	cbnz	r1, 8026536 <sbrk_aligned+0x12>
 8026530:	f000 fb7a 	bl	8026c28 <_sbrk_r>
 8026534:	6030      	str	r0, [r6, #0]
 8026536:	4621      	mov	r1, r4
 8026538:	4628      	mov	r0, r5
 802653a:	f000 fb75 	bl	8026c28 <_sbrk_r>
 802653e:	1c43      	adds	r3, r0, #1
 8026540:	d00a      	beq.n	8026558 <sbrk_aligned+0x34>
 8026542:	1cc4      	adds	r4, r0, #3
 8026544:	f024 0403 	bic.w	r4, r4, #3
 8026548:	42a0      	cmp	r0, r4
 802654a:	d007      	beq.n	802655c <sbrk_aligned+0x38>
 802654c:	1a21      	subs	r1, r4, r0
 802654e:	4628      	mov	r0, r5
 8026550:	f000 fb6a 	bl	8026c28 <_sbrk_r>
 8026554:	3001      	adds	r0, #1
 8026556:	d101      	bne.n	802655c <sbrk_aligned+0x38>
 8026558:	f04f 34ff 	mov.w	r4, #4294967295
 802655c:	4620      	mov	r0, r4
 802655e:	bd70      	pop	{r4, r5, r6, pc}
 8026560:	24026260 	.word	0x24026260

08026564 <_malloc_r>:
 8026564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026568:	1ccd      	adds	r5, r1, #3
 802656a:	f025 0503 	bic.w	r5, r5, #3
 802656e:	3508      	adds	r5, #8
 8026570:	2d0c      	cmp	r5, #12
 8026572:	bf38      	it	cc
 8026574:	250c      	movcc	r5, #12
 8026576:	2d00      	cmp	r5, #0
 8026578:	4607      	mov	r7, r0
 802657a:	db01      	blt.n	8026580 <_malloc_r+0x1c>
 802657c:	42a9      	cmp	r1, r5
 802657e:	d905      	bls.n	802658c <_malloc_r+0x28>
 8026580:	230c      	movs	r3, #12
 8026582:	603b      	str	r3, [r7, #0]
 8026584:	2600      	movs	r6, #0
 8026586:	4630      	mov	r0, r6
 8026588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802658c:	4e2e      	ldr	r6, [pc, #184]	; (8026648 <_malloc_r+0xe4>)
 802658e:	f000 fef1 	bl	8027374 <__malloc_lock>
 8026592:	6833      	ldr	r3, [r6, #0]
 8026594:	461c      	mov	r4, r3
 8026596:	bb34      	cbnz	r4, 80265e6 <_malloc_r+0x82>
 8026598:	4629      	mov	r1, r5
 802659a:	4638      	mov	r0, r7
 802659c:	f7ff ffc2 	bl	8026524 <sbrk_aligned>
 80265a0:	1c43      	adds	r3, r0, #1
 80265a2:	4604      	mov	r4, r0
 80265a4:	d14d      	bne.n	8026642 <_malloc_r+0xde>
 80265a6:	6834      	ldr	r4, [r6, #0]
 80265a8:	4626      	mov	r6, r4
 80265aa:	2e00      	cmp	r6, #0
 80265ac:	d140      	bne.n	8026630 <_malloc_r+0xcc>
 80265ae:	6823      	ldr	r3, [r4, #0]
 80265b0:	4631      	mov	r1, r6
 80265b2:	4638      	mov	r0, r7
 80265b4:	eb04 0803 	add.w	r8, r4, r3
 80265b8:	f000 fb36 	bl	8026c28 <_sbrk_r>
 80265bc:	4580      	cmp	r8, r0
 80265be:	d13a      	bne.n	8026636 <_malloc_r+0xd2>
 80265c0:	6821      	ldr	r1, [r4, #0]
 80265c2:	3503      	adds	r5, #3
 80265c4:	1a6d      	subs	r5, r5, r1
 80265c6:	f025 0503 	bic.w	r5, r5, #3
 80265ca:	3508      	adds	r5, #8
 80265cc:	2d0c      	cmp	r5, #12
 80265ce:	bf38      	it	cc
 80265d0:	250c      	movcc	r5, #12
 80265d2:	4629      	mov	r1, r5
 80265d4:	4638      	mov	r0, r7
 80265d6:	f7ff ffa5 	bl	8026524 <sbrk_aligned>
 80265da:	3001      	adds	r0, #1
 80265dc:	d02b      	beq.n	8026636 <_malloc_r+0xd2>
 80265de:	6823      	ldr	r3, [r4, #0]
 80265e0:	442b      	add	r3, r5
 80265e2:	6023      	str	r3, [r4, #0]
 80265e4:	e00e      	b.n	8026604 <_malloc_r+0xa0>
 80265e6:	6822      	ldr	r2, [r4, #0]
 80265e8:	1b52      	subs	r2, r2, r5
 80265ea:	d41e      	bmi.n	802662a <_malloc_r+0xc6>
 80265ec:	2a0b      	cmp	r2, #11
 80265ee:	d916      	bls.n	802661e <_malloc_r+0xba>
 80265f0:	1961      	adds	r1, r4, r5
 80265f2:	42a3      	cmp	r3, r4
 80265f4:	6025      	str	r5, [r4, #0]
 80265f6:	bf18      	it	ne
 80265f8:	6059      	strne	r1, [r3, #4]
 80265fa:	6863      	ldr	r3, [r4, #4]
 80265fc:	bf08      	it	eq
 80265fe:	6031      	streq	r1, [r6, #0]
 8026600:	5162      	str	r2, [r4, r5]
 8026602:	604b      	str	r3, [r1, #4]
 8026604:	4638      	mov	r0, r7
 8026606:	f104 060b 	add.w	r6, r4, #11
 802660a:	f000 feb9 	bl	8027380 <__malloc_unlock>
 802660e:	f026 0607 	bic.w	r6, r6, #7
 8026612:	1d23      	adds	r3, r4, #4
 8026614:	1af2      	subs	r2, r6, r3
 8026616:	d0b6      	beq.n	8026586 <_malloc_r+0x22>
 8026618:	1b9b      	subs	r3, r3, r6
 802661a:	50a3      	str	r3, [r4, r2]
 802661c:	e7b3      	b.n	8026586 <_malloc_r+0x22>
 802661e:	6862      	ldr	r2, [r4, #4]
 8026620:	42a3      	cmp	r3, r4
 8026622:	bf0c      	ite	eq
 8026624:	6032      	streq	r2, [r6, #0]
 8026626:	605a      	strne	r2, [r3, #4]
 8026628:	e7ec      	b.n	8026604 <_malloc_r+0xa0>
 802662a:	4623      	mov	r3, r4
 802662c:	6864      	ldr	r4, [r4, #4]
 802662e:	e7b2      	b.n	8026596 <_malloc_r+0x32>
 8026630:	4634      	mov	r4, r6
 8026632:	6876      	ldr	r6, [r6, #4]
 8026634:	e7b9      	b.n	80265aa <_malloc_r+0x46>
 8026636:	230c      	movs	r3, #12
 8026638:	603b      	str	r3, [r7, #0]
 802663a:	4638      	mov	r0, r7
 802663c:	f000 fea0 	bl	8027380 <__malloc_unlock>
 8026640:	e7a1      	b.n	8026586 <_malloc_r+0x22>
 8026642:	6025      	str	r5, [r4, #0]
 8026644:	e7de      	b.n	8026604 <_malloc_r+0xa0>
 8026646:	bf00      	nop
 8026648:	2402625c 	.word	0x2402625c

0802664c <__sfputc_r>:
 802664c:	6893      	ldr	r3, [r2, #8]
 802664e:	3b01      	subs	r3, #1
 8026650:	2b00      	cmp	r3, #0
 8026652:	b410      	push	{r4}
 8026654:	6093      	str	r3, [r2, #8]
 8026656:	da08      	bge.n	802666a <__sfputc_r+0x1e>
 8026658:	6994      	ldr	r4, [r2, #24]
 802665a:	42a3      	cmp	r3, r4
 802665c:	db01      	blt.n	8026662 <__sfputc_r+0x16>
 802665e:	290a      	cmp	r1, #10
 8026660:	d103      	bne.n	802666a <__sfputc_r+0x1e>
 8026662:	f85d 4b04 	ldr.w	r4, [sp], #4
 8026666:	f000 bb47 	b.w	8026cf8 <__swbuf_r>
 802666a:	6813      	ldr	r3, [r2, #0]
 802666c:	1c58      	adds	r0, r3, #1
 802666e:	6010      	str	r0, [r2, #0]
 8026670:	7019      	strb	r1, [r3, #0]
 8026672:	4608      	mov	r0, r1
 8026674:	f85d 4b04 	ldr.w	r4, [sp], #4
 8026678:	4770      	bx	lr

0802667a <__sfputs_r>:
 802667a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802667c:	4606      	mov	r6, r0
 802667e:	460f      	mov	r7, r1
 8026680:	4614      	mov	r4, r2
 8026682:	18d5      	adds	r5, r2, r3
 8026684:	42ac      	cmp	r4, r5
 8026686:	d101      	bne.n	802668c <__sfputs_r+0x12>
 8026688:	2000      	movs	r0, #0
 802668a:	e007      	b.n	802669c <__sfputs_r+0x22>
 802668c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8026690:	463a      	mov	r2, r7
 8026692:	4630      	mov	r0, r6
 8026694:	f7ff ffda 	bl	802664c <__sfputc_r>
 8026698:	1c43      	adds	r3, r0, #1
 802669a:	d1f3      	bne.n	8026684 <__sfputs_r+0xa>
 802669c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080266a0 <_vfiprintf_r>:
 80266a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80266a4:	460d      	mov	r5, r1
 80266a6:	b09d      	sub	sp, #116	; 0x74
 80266a8:	4614      	mov	r4, r2
 80266aa:	4698      	mov	r8, r3
 80266ac:	4606      	mov	r6, r0
 80266ae:	b118      	cbz	r0, 80266b8 <_vfiprintf_r+0x18>
 80266b0:	6983      	ldr	r3, [r0, #24]
 80266b2:	b90b      	cbnz	r3, 80266b8 <_vfiprintf_r+0x18>
 80266b4:	f000 fd5c 	bl	8027170 <__sinit>
 80266b8:	4b89      	ldr	r3, [pc, #548]	; (80268e0 <_vfiprintf_r+0x240>)
 80266ba:	429d      	cmp	r5, r3
 80266bc:	d11b      	bne.n	80266f6 <_vfiprintf_r+0x56>
 80266be:	6875      	ldr	r5, [r6, #4]
 80266c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80266c2:	07d9      	lsls	r1, r3, #31
 80266c4:	d405      	bmi.n	80266d2 <_vfiprintf_r+0x32>
 80266c6:	89ab      	ldrh	r3, [r5, #12]
 80266c8:	059a      	lsls	r2, r3, #22
 80266ca:	d402      	bmi.n	80266d2 <_vfiprintf_r+0x32>
 80266cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80266ce:	f7ff feb4 	bl	802643a <__retarget_lock_acquire_recursive>
 80266d2:	89ab      	ldrh	r3, [r5, #12]
 80266d4:	071b      	lsls	r3, r3, #28
 80266d6:	d501      	bpl.n	80266dc <_vfiprintf_r+0x3c>
 80266d8:	692b      	ldr	r3, [r5, #16]
 80266da:	b9eb      	cbnz	r3, 8026718 <_vfiprintf_r+0x78>
 80266dc:	4629      	mov	r1, r5
 80266de:	4630      	mov	r0, r6
 80266e0:	f000 fb5c 	bl	8026d9c <__swsetup_r>
 80266e4:	b1c0      	cbz	r0, 8026718 <_vfiprintf_r+0x78>
 80266e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80266e8:	07dc      	lsls	r4, r3, #31
 80266ea:	d50e      	bpl.n	802670a <_vfiprintf_r+0x6a>
 80266ec:	f04f 30ff 	mov.w	r0, #4294967295
 80266f0:	b01d      	add	sp, #116	; 0x74
 80266f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80266f6:	4b7b      	ldr	r3, [pc, #492]	; (80268e4 <_vfiprintf_r+0x244>)
 80266f8:	429d      	cmp	r5, r3
 80266fa:	d101      	bne.n	8026700 <_vfiprintf_r+0x60>
 80266fc:	68b5      	ldr	r5, [r6, #8]
 80266fe:	e7df      	b.n	80266c0 <_vfiprintf_r+0x20>
 8026700:	4b79      	ldr	r3, [pc, #484]	; (80268e8 <_vfiprintf_r+0x248>)
 8026702:	429d      	cmp	r5, r3
 8026704:	bf08      	it	eq
 8026706:	68f5      	ldreq	r5, [r6, #12]
 8026708:	e7da      	b.n	80266c0 <_vfiprintf_r+0x20>
 802670a:	89ab      	ldrh	r3, [r5, #12]
 802670c:	0598      	lsls	r0, r3, #22
 802670e:	d4ed      	bmi.n	80266ec <_vfiprintf_r+0x4c>
 8026710:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8026712:	f7ff fe94 	bl	802643e <__retarget_lock_release_recursive>
 8026716:	e7e9      	b.n	80266ec <_vfiprintf_r+0x4c>
 8026718:	2300      	movs	r3, #0
 802671a:	9309      	str	r3, [sp, #36]	; 0x24
 802671c:	2320      	movs	r3, #32
 802671e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8026722:	f8cd 800c 	str.w	r8, [sp, #12]
 8026726:	2330      	movs	r3, #48	; 0x30
 8026728:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80268ec <_vfiprintf_r+0x24c>
 802672c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8026730:	f04f 0901 	mov.w	r9, #1
 8026734:	4623      	mov	r3, r4
 8026736:	469a      	mov	sl, r3
 8026738:	f813 2b01 	ldrb.w	r2, [r3], #1
 802673c:	b10a      	cbz	r2, 8026742 <_vfiprintf_r+0xa2>
 802673e:	2a25      	cmp	r2, #37	; 0x25
 8026740:	d1f9      	bne.n	8026736 <_vfiprintf_r+0x96>
 8026742:	ebba 0b04 	subs.w	fp, sl, r4
 8026746:	d00b      	beq.n	8026760 <_vfiprintf_r+0xc0>
 8026748:	465b      	mov	r3, fp
 802674a:	4622      	mov	r2, r4
 802674c:	4629      	mov	r1, r5
 802674e:	4630      	mov	r0, r6
 8026750:	f7ff ff93 	bl	802667a <__sfputs_r>
 8026754:	3001      	adds	r0, #1
 8026756:	f000 80aa 	beq.w	80268ae <_vfiprintf_r+0x20e>
 802675a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802675c:	445a      	add	r2, fp
 802675e:	9209      	str	r2, [sp, #36]	; 0x24
 8026760:	f89a 3000 	ldrb.w	r3, [sl]
 8026764:	2b00      	cmp	r3, #0
 8026766:	f000 80a2 	beq.w	80268ae <_vfiprintf_r+0x20e>
 802676a:	2300      	movs	r3, #0
 802676c:	f04f 32ff 	mov.w	r2, #4294967295
 8026770:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8026774:	f10a 0a01 	add.w	sl, sl, #1
 8026778:	9304      	str	r3, [sp, #16]
 802677a:	9307      	str	r3, [sp, #28]
 802677c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8026780:	931a      	str	r3, [sp, #104]	; 0x68
 8026782:	4654      	mov	r4, sl
 8026784:	2205      	movs	r2, #5
 8026786:	f814 1b01 	ldrb.w	r1, [r4], #1
 802678a:	4858      	ldr	r0, [pc, #352]	; (80268ec <_vfiprintf_r+0x24c>)
 802678c:	f7d9 fdb0 	bl	80002f0 <memchr>
 8026790:	9a04      	ldr	r2, [sp, #16]
 8026792:	b9d8      	cbnz	r0, 80267cc <_vfiprintf_r+0x12c>
 8026794:	06d1      	lsls	r1, r2, #27
 8026796:	bf44      	itt	mi
 8026798:	2320      	movmi	r3, #32
 802679a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802679e:	0713      	lsls	r3, r2, #28
 80267a0:	bf44      	itt	mi
 80267a2:	232b      	movmi	r3, #43	; 0x2b
 80267a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80267a8:	f89a 3000 	ldrb.w	r3, [sl]
 80267ac:	2b2a      	cmp	r3, #42	; 0x2a
 80267ae:	d015      	beq.n	80267dc <_vfiprintf_r+0x13c>
 80267b0:	9a07      	ldr	r2, [sp, #28]
 80267b2:	4654      	mov	r4, sl
 80267b4:	2000      	movs	r0, #0
 80267b6:	f04f 0c0a 	mov.w	ip, #10
 80267ba:	4621      	mov	r1, r4
 80267bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80267c0:	3b30      	subs	r3, #48	; 0x30
 80267c2:	2b09      	cmp	r3, #9
 80267c4:	d94e      	bls.n	8026864 <_vfiprintf_r+0x1c4>
 80267c6:	b1b0      	cbz	r0, 80267f6 <_vfiprintf_r+0x156>
 80267c8:	9207      	str	r2, [sp, #28]
 80267ca:	e014      	b.n	80267f6 <_vfiprintf_r+0x156>
 80267cc:	eba0 0308 	sub.w	r3, r0, r8
 80267d0:	fa09 f303 	lsl.w	r3, r9, r3
 80267d4:	4313      	orrs	r3, r2
 80267d6:	9304      	str	r3, [sp, #16]
 80267d8:	46a2      	mov	sl, r4
 80267da:	e7d2      	b.n	8026782 <_vfiprintf_r+0xe2>
 80267dc:	9b03      	ldr	r3, [sp, #12]
 80267de:	1d19      	adds	r1, r3, #4
 80267e0:	681b      	ldr	r3, [r3, #0]
 80267e2:	9103      	str	r1, [sp, #12]
 80267e4:	2b00      	cmp	r3, #0
 80267e6:	bfbb      	ittet	lt
 80267e8:	425b      	neglt	r3, r3
 80267ea:	f042 0202 	orrlt.w	r2, r2, #2
 80267ee:	9307      	strge	r3, [sp, #28]
 80267f0:	9307      	strlt	r3, [sp, #28]
 80267f2:	bfb8      	it	lt
 80267f4:	9204      	strlt	r2, [sp, #16]
 80267f6:	7823      	ldrb	r3, [r4, #0]
 80267f8:	2b2e      	cmp	r3, #46	; 0x2e
 80267fa:	d10c      	bne.n	8026816 <_vfiprintf_r+0x176>
 80267fc:	7863      	ldrb	r3, [r4, #1]
 80267fe:	2b2a      	cmp	r3, #42	; 0x2a
 8026800:	d135      	bne.n	802686e <_vfiprintf_r+0x1ce>
 8026802:	9b03      	ldr	r3, [sp, #12]
 8026804:	1d1a      	adds	r2, r3, #4
 8026806:	681b      	ldr	r3, [r3, #0]
 8026808:	9203      	str	r2, [sp, #12]
 802680a:	2b00      	cmp	r3, #0
 802680c:	bfb8      	it	lt
 802680e:	f04f 33ff 	movlt.w	r3, #4294967295
 8026812:	3402      	adds	r4, #2
 8026814:	9305      	str	r3, [sp, #20]
 8026816:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80268fc <_vfiprintf_r+0x25c>
 802681a:	7821      	ldrb	r1, [r4, #0]
 802681c:	2203      	movs	r2, #3
 802681e:	4650      	mov	r0, sl
 8026820:	f7d9 fd66 	bl	80002f0 <memchr>
 8026824:	b140      	cbz	r0, 8026838 <_vfiprintf_r+0x198>
 8026826:	2340      	movs	r3, #64	; 0x40
 8026828:	eba0 000a 	sub.w	r0, r0, sl
 802682c:	fa03 f000 	lsl.w	r0, r3, r0
 8026830:	9b04      	ldr	r3, [sp, #16]
 8026832:	4303      	orrs	r3, r0
 8026834:	3401      	adds	r4, #1
 8026836:	9304      	str	r3, [sp, #16]
 8026838:	f814 1b01 	ldrb.w	r1, [r4], #1
 802683c:	482c      	ldr	r0, [pc, #176]	; (80268f0 <_vfiprintf_r+0x250>)
 802683e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8026842:	2206      	movs	r2, #6
 8026844:	f7d9 fd54 	bl	80002f0 <memchr>
 8026848:	2800      	cmp	r0, #0
 802684a:	d03f      	beq.n	80268cc <_vfiprintf_r+0x22c>
 802684c:	4b29      	ldr	r3, [pc, #164]	; (80268f4 <_vfiprintf_r+0x254>)
 802684e:	bb1b      	cbnz	r3, 8026898 <_vfiprintf_r+0x1f8>
 8026850:	9b03      	ldr	r3, [sp, #12]
 8026852:	3307      	adds	r3, #7
 8026854:	f023 0307 	bic.w	r3, r3, #7
 8026858:	3308      	adds	r3, #8
 802685a:	9303      	str	r3, [sp, #12]
 802685c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802685e:	443b      	add	r3, r7
 8026860:	9309      	str	r3, [sp, #36]	; 0x24
 8026862:	e767      	b.n	8026734 <_vfiprintf_r+0x94>
 8026864:	fb0c 3202 	mla	r2, ip, r2, r3
 8026868:	460c      	mov	r4, r1
 802686a:	2001      	movs	r0, #1
 802686c:	e7a5      	b.n	80267ba <_vfiprintf_r+0x11a>
 802686e:	2300      	movs	r3, #0
 8026870:	3401      	adds	r4, #1
 8026872:	9305      	str	r3, [sp, #20]
 8026874:	4619      	mov	r1, r3
 8026876:	f04f 0c0a 	mov.w	ip, #10
 802687a:	4620      	mov	r0, r4
 802687c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8026880:	3a30      	subs	r2, #48	; 0x30
 8026882:	2a09      	cmp	r2, #9
 8026884:	d903      	bls.n	802688e <_vfiprintf_r+0x1ee>
 8026886:	2b00      	cmp	r3, #0
 8026888:	d0c5      	beq.n	8026816 <_vfiprintf_r+0x176>
 802688a:	9105      	str	r1, [sp, #20]
 802688c:	e7c3      	b.n	8026816 <_vfiprintf_r+0x176>
 802688e:	fb0c 2101 	mla	r1, ip, r1, r2
 8026892:	4604      	mov	r4, r0
 8026894:	2301      	movs	r3, #1
 8026896:	e7f0      	b.n	802687a <_vfiprintf_r+0x1da>
 8026898:	ab03      	add	r3, sp, #12
 802689a:	9300      	str	r3, [sp, #0]
 802689c:	462a      	mov	r2, r5
 802689e:	4b16      	ldr	r3, [pc, #88]	; (80268f8 <_vfiprintf_r+0x258>)
 80268a0:	a904      	add	r1, sp, #16
 80268a2:	4630      	mov	r0, r6
 80268a4:	f3af 8000 	nop.w
 80268a8:	4607      	mov	r7, r0
 80268aa:	1c78      	adds	r0, r7, #1
 80268ac:	d1d6      	bne.n	802685c <_vfiprintf_r+0x1bc>
 80268ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80268b0:	07d9      	lsls	r1, r3, #31
 80268b2:	d405      	bmi.n	80268c0 <_vfiprintf_r+0x220>
 80268b4:	89ab      	ldrh	r3, [r5, #12]
 80268b6:	059a      	lsls	r2, r3, #22
 80268b8:	d402      	bmi.n	80268c0 <_vfiprintf_r+0x220>
 80268ba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80268bc:	f7ff fdbf 	bl	802643e <__retarget_lock_release_recursive>
 80268c0:	89ab      	ldrh	r3, [r5, #12]
 80268c2:	065b      	lsls	r3, r3, #25
 80268c4:	f53f af12 	bmi.w	80266ec <_vfiprintf_r+0x4c>
 80268c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80268ca:	e711      	b.n	80266f0 <_vfiprintf_r+0x50>
 80268cc:	ab03      	add	r3, sp, #12
 80268ce:	9300      	str	r3, [sp, #0]
 80268d0:	462a      	mov	r2, r5
 80268d2:	4b09      	ldr	r3, [pc, #36]	; (80268f8 <_vfiprintf_r+0x258>)
 80268d4:	a904      	add	r1, sp, #16
 80268d6:	4630      	mov	r0, r6
 80268d8:	f000 f880 	bl	80269dc <_printf_i>
 80268dc:	e7e4      	b.n	80268a8 <_vfiprintf_r+0x208>
 80268de:	bf00      	nop
 80268e0:	0802b250 	.word	0x0802b250
 80268e4:	0802b270 	.word	0x0802b270
 80268e8:	0802b230 	.word	0x0802b230
 80268ec:	0802b1f8 	.word	0x0802b1f8
 80268f0:	0802b202 	.word	0x0802b202
 80268f4:	00000000 	.word	0x00000000
 80268f8:	0802667b 	.word	0x0802667b
 80268fc:	0802b1fe 	.word	0x0802b1fe

08026900 <_printf_common>:
 8026900:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026904:	4616      	mov	r6, r2
 8026906:	4699      	mov	r9, r3
 8026908:	688a      	ldr	r2, [r1, #8]
 802690a:	690b      	ldr	r3, [r1, #16]
 802690c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8026910:	4293      	cmp	r3, r2
 8026912:	bfb8      	it	lt
 8026914:	4613      	movlt	r3, r2
 8026916:	6033      	str	r3, [r6, #0]
 8026918:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802691c:	4607      	mov	r7, r0
 802691e:	460c      	mov	r4, r1
 8026920:	b10a      	cbz	r2, 8026926 <_printf_common+0x26>
 8026922:	3301      	adds	r3, #1
 8026924:	6033      	str	r3, [r6, #0]
 8026926:	6823      	ldr	r3, [r4, #0]
 8026928:	0699      	lsls	r1, r3, #26
 802692a:	bf42      	ittt	mi
 802692c:	6833      	ldrmi	r3, [r6, #0]
 802692e:	3302      	addmi	r3, #2
 8026930:	6033      	strmi	r3, [r6, #0]
 8026932:	6825      	ldr	r5, [r4, #0]
 8026934:	f015 0506 	ands.w	r5, r5, #6
 8026938:	d106      	bne.n	8026948 <_printf_common+0x48>
 802693a:	f104 0a19 	add.w	sl, r4, #25
 802693e:	68e3      	ldr	r3, [r4, #12]
 8026940:	6832      	ldr	r2, [r6, #0]
 8026942:	1a9b      	subs	r3, r3, r2
 8026944:	42ab      	cmp	r3, r5
 8026946:	dc26      	bgt.n	8026996 <_printf_common+0x96>
 8026948:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 802694c:	1e13      	subs	r3, r2, #0
 802694e:	6822      	ldr	r2, [r4, #0]
 8026950:	bf18      	it	ne
 8026952:	2301      	movne	r3, #1
 8026954:	0692      	lsls	r2, r2, #26
 8026956:	d42b      	bmi.n	80269b0 <_printf_common+0xb0>
 8026958:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802695c:	4649      	mov	r1, r9
 802695e:	4638      	mov	r0, r7
 8026960:	47c0      	blx	r8
 8026962:	3001      	adds	r0, #1
 8026964:	d01e      	beq.n	80269a4 <_printf_common+0xa4>
 8026966:	6823      	ldr	r3, [r4, #0]
 8026968:	68e5      	ldr	r5, [r4, #12]
 802696a:	6832      	ldr	r2, [r6, #0]
 802696c:	f003 0306 	and.w	r3, r3, #6
 8026970:	2b04      	cmp	r3, #4
 8026972:	bf08      	it	eq
 8026974:	1aad      	subeq	r5, r5, r2
 8026976:	68a3      	ldr	r3, [r4, #8]
 8026978:	6922      	ldr	r2, [r4, #16]
 802697a:	bf0c      	ite	eq
 802697c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8026980:	2500      	movne	r5, #0
 8026982:	4293      	cmp	r3, r2
 8026984:	bfc4      	itt	gt
 8026986:	1a9b      	subgt	r3, r3, r2
 8026988:	18ed      	addgt	r5, r5, r3
 802698a:	2600      	movs	r6, #0
 802698c:	341a      	adds	r4, #26
 802698e:	42b5      	cmp	r5, r6
 8026990:	d11a      	bne.n	80269c8 <_printf_common+0xc8>
 8026992:	2000      	movs	r0, #0
 8026994:	e008      	b.n	80269a8 <_printf_common+0xa8>
 8026996:	2301      	movs	r3, #1
 8026998:	4652      	mov	r2, sl
 802699a:	4649      	mov	r1, r9
 802699c:	4638      	mov	r0, r7
 802699e:	47c0      	blx	r8
 80269a0:	3001      	adds	r0, #1
 80269a2:	d103      	bne.n	80269ac <_printf_common+0xac>
 80269a4:	f04f 30ff 	mov.w	r0, #4294967295
 80269a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80269ac:	3501      	adds	r5, #1
 80269ae:	e7c6      	b.n	802693e <_printf_common+0x3e>
 80269b0:	18e1      	adds	r1, r4, r3
 80269b2:	1c5a      	adds	r2, r3, #1
 80269b4:	2030      	movs	r0, #48	; 0x30
 80269b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80269ba:	4422      	add	r2, r4
 80269bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80269c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80269c4:	3302      	adds	r3, #2
 80269c6:	e7c7      	b.n	8026958 <_printf_common+0x58>
 80269c8:	2301      	movs	r3, #1
 80269ca:	4622      	mov	r2, r4
 80269cc:	4649      	mov	r1, r9
 80269ce:	4638      	mov	r0, r7
 80269d0:	47c0      	blx	r8
 80269d2:	3001      	adds	r0, #1
 80269d4:	d0e6      	beq.n	80269a4 <_printf_common+0xa4>
 80269d6:	3601      	adds	r6, #1
 80269d8:	e7d9      	b.n	802698e <_printf_common+0x8e>
	...

080269dc <_printf_i>:
 80269dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80269e0:	7e0f      	ldrb	r7, [r1, #24]
 80269e2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80269e4:	2f78      	cmp	r7, #120	; 0x78
 80269e6:	4691      	mov	r9, r2
 80269e8:	4680      	mov	r8, r0
 80269ea:	460c      	mov	r4, r1
 80269ec:	469a      	mov	sl, r3
 80269ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80269f2:	d807      	bhi.n	8026a04 <_printf_i+0x28>
 80269f4:	2f62      	cmp	r7, #98	; 0x62
 80269f6:	d80a      	bhi.n	8026a0e <_printf_i+0x32>
 80269f8:	2f00      	cmp	r7, #0
 80269fa:	f000 80d8 	beq.w	8026bae <_printf_i+0x1d2>
 80269fe:	2f58      	cmp	r7, #88	; 0x58
 8026a00:	f000 80a3 	beq.w	8026b4a <_printf_i+0x16e>
 8026a04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8026a08:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8026a0c:	e03a      	b.n	8026a84 <_printf_i+0xa8>
 8026a0e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8026a12:	2b15      	cmp	r3, #21
 8026a14:	d8f6      	bhi.n	8026a04 <_printf_i+0x28>
 8026a16:	a101      	add	r1, pc, #4	; (adr r1, 8026a1c <_printf_i+0x40>)
 8026a18:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8026a1c:	08026a75 	.word	0x08026a75
 8026a20:	08026a89 	.word	0x08026a89
 8026a24:	08026a05 	.word	0x08026a05
 8026a28:	08026a05 	.word	0x08026a05
 8026a2c:	08026a05 	.word	0x08026a05
 8026a30:	08026a05 	.word	0x08026a05
 8026a34:	08026a89 	.word	0x08026a89
 8026a38:	08026a05 	.word	0x08026a05
 8026a3c:	08026a05 	.word	0x08026a05
 8026a40:	08026a05 	.word	0x08026a05
 8026a44:	08026a05 	.word	0x08026a05
 8026a48:	08026b95 	.word	0x08026b95
 8026a4c:	08026ab9 	.word	0x08026ab9
 8026a50:	08026b77 	.word	0x08026b77
 8026a54:	08026a05 	.word	0x08026a05
 8026a58:	08026a05 	.word	0x08026a05
 8026a5c:	08026bb7 	.word	0x08026bb7
 8026a60:	08026a05 	.word	0x08026a05
 8026a64:	08026ab9 	.word	0x08026ab9
 8026a68:	08026a05 	.word	0x08026a05
 8026a6c:	08026a05 	.word	0x08026a05
 8026a70:	08026b7f 	.word	0x08026b7f
 8026a74:	682b      	ldr	r3, [r5, #0]
 8026a76:	1d1a      	adds	r2, r3, #4
 8026a78:	681b      	ldr	r3, [r3, #0]
 8026a7a:	602a      	str	r2, [r5, #0]
 8026a7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8026a80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8026a84:	2301      	movs	r3, #1
 8026a86:	e0a3      	b.n	8026bd0 <_printf_i+0x1f4>
 8026a88:	6820      	ldr	r0, [r4, #0]
 8026a8a:	6829      	ldr	r1, [r5, #0]
 8026a8c:	0606      	lsls	r6, r0, #24
 8026a8e:	f101 0304 	add.w	r3, r1, #4
 8026a92:	d50a      	bpl.n	8026aaa <_printf_i+0xce>
 8026a94:	680e      	ldr	r6, [r1, #0]
 8026a96:	602b      	str	r3, [r5, #0]
 8026a98:	2e00      	cmp	r6, #0
 8026a9a:	da03      	bge.n	8026aa4 <_printf_i+0xc8>
 8026a9c:	232d      	movs	r3, #45	; 0x2d
 8026a9e:	4276      	negs	r6, r6
 8026aa0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8026aa4:	485e      	ldr	r0, [pc, #376]	; (8026c20 <_printf_i+0x244>)
 8026aa6:	230a      	movs	r3, #10
 8026aa8:	e019      	b.n	8026ade <_printf_i+0x102>
 8026aaa:	680e      	ldr	r6, [r1, #0]
 8026aac:	602b      	str	r3, [r5, #0]
 8026aae:	f010 0f40 	tst.w	r0, #64	; 0x40
 8026ab2:	bf18      	it	ne
 8026ab4:	b236      	sxthne	r6, r6
 8026ab6:	e7ef      	b.n	8026a98 <_printf_i+0xbc>
 8026ab8:	682b      	ldr	r3, [r5, #0]
 8026aba:	6820      	ldr	r0, [r4, #0]
 8026abc:	1d19      	adds	r1, r3, #4
 8026abe:	6029      	str	r1, [r5, #0]
 8026ac0:	0601      	lsls	r1, r0, #24
 8026ac2:	d501      	bpl.n	8026ac8 <_printf_i+0xec>
 8026ac4:	681e      	ldr	r6, [r3, #0]
 8026ac6:	e002      	b.n	8026ace <_printf_i+0xf2>
 8026ac8:	0646      	lsls	r6, r0, #25
 8026aca:	d5fb      	bpl.n	8026ac4 <_printf_i+0xe8>
 8026acc:	881e      	ldrh	r6, [r3, #0]
 8026ace:	4854      	ldr	r0, [pc, #336]	; (8026c20 <_printf_i+0x244>)
 8026ad0:	2f6f      	cmp	r7, #111	; 0x6f
 8026ad2:	bf0c      	ite	eq
 8026ad4:	2308      	moveq	r3, #8
 8026ad6:	230a      	movne	r3, #10
 8026ad8:	2100      	movs	r1, #0
 8026ada:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8026ade:	6865      	ldr	r5, [r4, #4]
 8026ae0:	60a5      	str	r5, [r4, #8]
 8026ae2:	2d00      	cmp	r5, #0
 8026ae4:	bfa2      	ittt	ge
 8026ae6:	6821      	ldrge	r1, [r4, #0]
 8026ae8:	f021 0104 	bicge.w	r1, r1, #4
 8026aec:	6021      	strge	r1, [r4, #0]
 8026aee:	b90e      	cbnz	r6, 8026af4 <_printf_i+0x118>
 8026af0:	2d00      	cmp	r5, #0
 8026af2:	d04d      	beq.n	8026b90 <_printf_i+0x1b4>
 8026af4:	4615      	mov	r5, r2
 8026af6:	fbb6 f1f3 	udiv	r1, r6, r3
 8026afa:	fb03 6711 	mls	r7, r3, r1, r6
 8026afe:	5dc7      	ldrb	r7, [r0, r7]
 8026b00:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8026b04:	4637      	mov	r7, r6
 8026b06:	42bb      	cmp	r3, r7
 8026b08:	460e      	mov	r6, r1
 8026b0a:	d9f4      	bls.n	8026af6 <_printf_i+0x11a>
 8026b0c:	2b08      	cmp	r3, #8
 8026b0e:	d10b      	bne.n	8026b28 <_printf_i+0x14c>
 8026b10:	6823      	ldr	r3, [r4, #0]
 8026b12:	07de      	lsls	r6, r3, #31
 8026b14:	d508      	bpl.n	8026b28 <_printf_i+0x14c>
 8026b16:	6923      	ldr	r3, [r4, #16]
 8026b18:	6861      	ldr	r1, [r4, #4]
 8026b1a:	4299      	cmp	r1, r3
 8026b1c:	bfde      	ittt	le
 8026b1e:	2330      	movle	r3, #48	; 0x30
 8026b20:	f805 3c01 	strble.w	r3, [r5, #-1]
 8026b24:	f105 35ff 	addle.w	r5, r5, #4294967295
 8026b28:	1b52      	subs	r2, r2, r5
 8026b2a:	6122      	str	r2, [r4, #16]
 8026b2c:	f8cd a000 	str.w	sl, [sp]
 8026b30:	464b      	mov	r3, r9
 8026b32:	aa03      	add	r2, sp, #12
 8026b34:	4621      	mov	r1, r4
 8026b36:	4640      	mov	r0, r8
 8026b38:	f7ff fee2 	bl	8026900 <_printf_common>
 8026b3c:	3001      	adds	r0, #1
 8026b3e:	d14c      	bne.n	8026bda <_printf_i+0x1fe>
 8026b40:	f04f 30ff 	mov.w	r0, #4294967295
 8026b44:	b004      	add	sp, #16
 8026b46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026b4a:	4835      	ldr	r0, [pc, #212]	; (8026c20 <_printf_i+0x244>)
 8026b4c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8026b50:	6829      	ldr	r1, [r5, #0]
 8026b52:	6823      	ldr	r3, [r4, #0]
 8026b54:	f851 6b04 	ldr.w	r6, [r1], #4
 8026b58:	6029      	str	r1, [r5, #0]
 8026b5a:	061d      	lsls	r5, r3, #24
 8026b5c:	d514      	bpl.n	8026b88 <_printf_i+0x1ac>
 8026b5e:	07df      	lsls	r7, r3, #31
 8026b60:	bf44      	itt	mi
 8026b62:	f043 0320 	orrmi.w	r3, r3, #32
 8026b66:	6023      	strmi	r3, [r4, #0]
 8026b68:	b91e      	cbnz	r6, 8026b72 <_printf_i+0x196>
 8026b6a:	6823      	ldr	r3, [r4, #0]
 8026b6c:	f023 0320 	bic.w	r3, r3, #32
 8026b70:	6023      	str	r3, [r4, #0]
 8026b72:	2310      	movs	r3, #16
 8026b74:	e7b0      	b.n	8026ad8 <_printf_i+0xfc>
 8026b76:	6823      	ldr	r3, [r4, #0]
 8026b78:	f043 0320 	orr.w	r3, r3, #32
 8026b7c:	6023      	str	r3, [r4, #0]
 8026b7e:	2378      	movs	r3, #120	; 0x78
 8026b80:	4828      	ldr	r0, [pc, #160]	; (8026c24 <_printf_i+0x248>)
 8026b82:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8026b86:	e7e3      	b.n	8026b50 <_printf_i+0x174>
 8026b88:	0659      	lsls	r1, r3, #25
 8026b8a:	bf48      	it	mi
 8026b8c:	b2b6      	uxthmi	r6, r6
 8026b8e:	e7e6      	b.n	8026b5e <_printf_i+0x182>
 8026b90:	4615      	mov	r5, r2
 8026b92:	e7bb      	b.n	8026b0c <_printf_i+0x130>
 8026b94:	682b      	ldr	r3, [r5, #0]
 8026b96:	6826      	ldr	r6, [r4, #0]
 8026b98:	6961      	ldr	r1, [r4, #20]
 8026b9a:	1d18      	adds	r0, r3, #4
 8026b9c:	6028      	str	r0, [r5, #0]
 8026b9e:	0635      	lsls	r5, r6, #24
 8026ba0:	681b      	ldr	r3, [r3, #0]
 8026ba2:	d501      	bpl.n	8026ba8 <_printf_i+0x1cc>
 8026ba4:	6019      	str	r1, [r3, #0]
 8026ba6:	e002      	b.n	8026bae <_printf_i+0x1d2>
 8026ba8:	0670      	lsls	r0, r6, #25
 8026baa:	d5fb      	bpl.n	8026ba4 <_printf_i+0x1c8>
 8026bac:	8019      	strh	r1, [r3, #0]
 8026bae:	2300      	movs	r3, #0
 8026bb0:	6123      	str	r3, [r4, #16]
 8026bb2:	4615      	mov	r5, r2
 8026bb4:	e7ba      	b.n	8026b2c <_printf_i+0x150>
 8026bb6:	682b      	ldr	r3, [r5, #0]
 8026bb8:	1d1a      	adds	r2, r3, #4
 8026bba:	602a      	str	r2, [r5, #0]
 8026bbc:	681d      	ldr	r5, [r3, #0]
 8026bbe:	6862      	ldr	r2, [r4, #4]
 8026bc0:	2100      	movs	r1, #0
 8026bc2:	4628      	mov	r0, r5
 8026bc4:	f7d9 fb94 	bl	80002f0 <memchr>
 8026bc8:	b108      	cbz	r0, 8026bce <_printf_i+0x1f2>
 8026bca:	1b40      	subs	r0, r0, r5
 8026bcc:	6060      	str	r0, [r4, #4]
 8026bce:	6863      	ldr	r3, [r4, #4]
 8026bd0:	6123      	str	r3, [r4, #16]
 8026bd2:	2300      	movs	r3, #0
 8026bd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8026bd8:	e7a8      	b.n	8026b2c <_printf_i+0x150>
 8026bda:	6923      	ldr	r3, [r4, #16]
 8026bdc:	462a      	mov	r2, r5
 8026bde:	4649      	mov	r1, r9
 8026be0:	4640      	mov	r0, r8
 8026be2:	47d0      	blx	sl
 8026be4:	3001      	adds	r0, #1
 8026be6:	d0ab      	beq.n	8026b40 <_printf_i+0x164>
 8026be8:	6823      	ldr	r3, [r4, #0]
 8026bea:	079b      	lsls	r3, r3, #30
 8026bec:	d413      	bmi.n	8026c16 <_printf_i+0x23a>
 8026bee:	68e0      	ldr	r0, [r4, #12]
 8026bf0:	9b03      	ldr	r3, [sp, #12]
 8026bf2:	4298      	cmp	r0, r3
 8026bf4:	bfb8      	it	lt
 8026bf6:	4618      	movlt	r0, r3
 8026bf8:	e7a4      	b.n	8026b44 <_printf_i+0x168>
 8026bfa:	2301      	movs	r3, #1
 8026bfc:	4632      	mov	r2, r6
 8026bfe:	4649      	mov	r1, r9
 8026c00:	4640      	mov	r0, r8
 8026c02:	47d0      	blx	sl
 8026c04:	3001      	adds	r0, #1
 8026c06:	d09b      	beq.n	8026b40 <_printf_i+0x164>
 8026c08:	3501      	adds	r5, #1
 8026c0a:	68e3      	ldr	r3, [r4, #12]
 8026c0c:	9903      	ldr	r1, [sp, #12]
 8026c0e:	1a5b      	subs	r3, r3, r1
 8026c10:	42ab      	cmp	r3, r5
 8026c12:	dcf2      	bgt.n	8026bfa <_printf_i+0x21e>
 8026c14:	e7eb      	b.n	8026bee <_printf_i+0x212>
 8026c16:	2500      	movs	r5, #0
 8026c18:	f104 0619 	add.w	r6, r4, #25
 8026c1c:	e7f5      	b.n	8026c0a <_printf_i+0x22e>
 8026c1e:	bf00      	nop
 8026c20:	0802b209 	.word	0x0802b209
 8026c24:	0802b21a 	.word	0x0802b21a

08026c28 <_sbrk_r>:
 8026c28:	b538      	push	{r3, r4, r5, lr}
 8026c2a:	4d06      	ldr	r5, [pc, #24]	; (8026c44 <_sbrk_r+0x1c>)
 8026c2c:	2300      	movs	r3, #0
 8026c2e:	4604      	mov	r4, r0
 8026c30:	4608      	mov	r0, r1
 8026c32:	602b      	str	r3, [r5, #0]
 8026c34:	f7e0 fb56 	bl	80072e4 <_sbrk>
 8026c38:	1c43      	adds	r3, r0, #1
 8026c3a:	d102      	bne.n	8026c42 <_sbrk_r+0x1a>
 8026c3c:	682b      	ldr	r3, [r5, #0]
 8026c3e:	b103      	cbz	r3, 8026c42 <_sbrk_r+0x1a>
 8026c40:	6023      	str	r3, [r4, #0]
 8026c42:	bd38      	pop	{r3, r4, r5, pc}
 8026c44:	240263fc 	.word	0x240263fc

08026c48 <_raise_r>:
 8026c48:	291f      	cmp	r1, #31
 8026c4a:	b538      	push	{r3, r4, r5, lr}
 8026c4c:	4604      	mov	r4, r0
 8026c4e:	460d      	mov	r5, r1
 8026c50:	d904      	bls.n	8026c5c <_raise_r+0x14>
 8026c52:	2316      	movs	r3, #22
 8026c54:	6003      	str	r3, [r0, #0]
 8026c56:	f04f 30ff 	mov.w	r0, #4294967295
 8026c5a:	bd38      	pop	{r3, r4, r5, pc}
 8026c5c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8026c5e:	b112      	cbz	r2, 8026c66 <_raise_r+0x1e>
 8026c60:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8026c64:	b94b      	cbnz	r3, 8026c7a <_raise_r+0x32>
 8026c66:	4620      	mov	r0, r4
 8026c68:	f000 f830 	bl	8026ccc <_getpid_r>
 8026c6c:	462a      	mov	r2, r5
 8026c6e:	4601      	mov	r1, r0
 8026c70:	4620      	mov	r0, r4
 8026c72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8026c76:	f000 b817 	b.w	8026ca8 <_kill_r>
 8026c7a:	2b01      	cmp	r3, #1
 8026c7c:	d00a      	beq.n	8026c94 <_raise_r+0x4c>
 8026c7e:	1c59      	adds	r1, r3, #1
 8026c80:	d103      	bne.n	8026c8a <_raise_r+0x42>
 8026c82:	2316      	movs	r3, #22
 8026c84:	6003      	str	r3, [r0, #0]
 8026c86:	2001      	movs	r0, #1
 8026c88:	e7e7      	b.n	8026c5a <_raise_r+0x12>
 8026c8a:	2400      	movs	r4, #0
 8026c8c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8026c90:	4628      	mov	r0, r5
 8026c92:	4798      	blx	r3
 8026c94:	2000      	movs	r0, #0
 8026c96:	e7e0      	b.n	8026c5a <_raise_r+0x12>

08026c98 <raise>:
 8026c98:	4b02      	ldr	r3, [pc, #8]	; (8026ca4 <raise+0xc>)
 8026c9a:	4601      	mov	r1, r0
 8026c9c:	6818      	ldr	r0, [r3, #0]
 8026c9e:	f7ff bfd3 	b.w	8026c48 <_raise_r>
 8026ca2:	bf00      	nop
 8026ca4:	240000c0 	.word	0x240000c0

08026ca8 <_kill_r>:
 8026ca8:	b538      	push	{r3, r4, r5, lr}
 8026caa:	4d07      	ldr	r5, [pc, #28]	; (8026cc8 <_kill_r+0x20>)
 8026cac:	2300      	movs	r3, #0
 8026cae:	4604      	mov	r4, r0
 8026cb0:	4608      	mov	r0, r1
 8026cb2:	4611      	mov	r1, r2
 8026cb4:	602b      	str	r3, [r5, #0]
 8026cb6:	f7e0 fa8d 	bl	80071d4 <_kill>
 8026cba:	1c43      	adds	r3, r0, #1
 8026cbc:	d102      	bne.n	8026cc4 <_kill_r+0x1c>
 8026cbe:	682b      	ldr	r3, [r5, #0]
 8026cc0:	b103      	cbz	r3, 8026cc4 <_kill_r+0x1c>
 8026cc2:	6023      	str	r3, [r4, #0]
 8026cc4:	bd38      	pop	{r3, r4, r5, pc}
 8026cc6:	bf00      	nop
 8026cc8:	240263fc 	.word	0x240263fc

08026ccc <_getpid_r>:
 8026ccc:	f7e0 ba7a 	b.w	80071c4 <_getpid>

08026cd0 <strncmp>:
 8026cd0:	b510      	push	{r4, lr}
 8026cd2:	b17a      	cbz	r2, 8026cf4 <strncmp+0x24>
 8026cd4:	4603      	mov	r3, r0
 8026cd6:	3901      	subs	r1, #1
 8026cd8:	1884      	adds	r4, r0, r2
 8026cda:	f813 0b01 	ldrb.w	r0, [r3], #1
 8026cde:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8026ce2:	4290      	cmp	r0, r2
 8026ce4:	d101      	bne.n	8026cea <strncmp+0x1a>
 8026ce6:	42a3      	cmp	r3, r4
 8026ce8:	d101      	bne.n	8026cee <strncmp+0x1e>
 8026cea:	1a80      	subs	r0, r0, r2
 8026cec:	bd10      	pop	{r4, pc}
 8026cee:	2800      	cmp	r0, #0
 8026cf0:	d1f3      	bne.n	8026cda <strncmp+0xa>
 8026cf2:	e7fa      	b.n	8026cea <strncmp+0x1a>
 8026cf4:	4610      	mov	r0, r2
 8026cf6:	e7f9      	b.n	8026cec <strncmp+0x1c>

08026cf8 <__swbuf_r>:
 8026cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026cfa:	460e      	mov	r6, r1
 8026cfc:	4614      	mov	r4, r2
 8026cfe:	4605      	mov	r5, r0
 8026d00:	b118      	cbz	r0, 8026d0a <__swbuf_r+0x12>
 8026d02:	6983      	ldr	r3, [r0, #24]
 8026d04:	b90b      	cbnz	r3, 8026d0a <__swbuf_r+0x12>
 8026d06:	f000 fa33 	bl	8027170 <__sinit>
 8026d0a:	4b21      	ldr	r3, [pc, #132]	; (8026d90 <__swbuf_r+0x98>)
 8026d0c:	429c      	cmp	r4, r3
 8026d0e:	d12b      	bne.n	8026d68 <__swbuf_r+0x70>
 8026d10:	686c      	ldr	r4, [r5, #4]
 8026d12:	69a3      	ldr	r3, [r4, #24]
 8026d14:	60a3      	str	r3, [r4, #8]
 8026d16:	89a3      	ldrh	r3, [r4, #12]
 8026d18:	071a      	lsls	r2, r3, #28
 8026d1a:	d52f      	bpl.n	8026d7c <__swbuf_r+0x84>
 8026d1c:	6923      	ldr	r3, [r4, #16]
 8026d1e:	b36b      	cbz	r3, 8026d7c <__swbuf_r+0x84>
 8026d20:	6923      	ldr	r3, [r4, #16]
 8026d22:	6820      	ldr	r0, [r4, #0]
 8026d24:	1ac0      	subs	r0, r0, r3
 8026d26:	6963      	ldr	r3, [r4, #20]
 8026d28:	b2f6      	uxtb	r6, r6
 8026d2a:	4283      	cmp	r3, r0
 8026d2c:	4637      	mov	r7, r6
 8026d2e:	dc04      	bgt.n	8026d3a <__swbuf_r+0x42>
 8026d30:	4621      	mov	r1, r4
 8026d32:	4628      	mov	r0, r5
 8026d34:	f000 f988 	bl	8027048 <_fflush_r>
 8026d38:	bb30      	cbnz	r0, 8026d88 <__swbuf_r+0x90>
 8026d3a:	68a3      	ldr	r3, [r4, #8]
 8026d3c:	3b01      	subs	r3, #1
 8026d3e:	60a3      	str	r3, [r4, #8]
 8026d40:	6823      	ldr	r3, [r4, #0]
 8026d42:	1c5a      	adds	r2, r3, #1
 8026d44:	6022      	str	r2, [r4, #0]
 8026d46:	701e      	strb	r6, [r3, #0]
 8026d48:	6963      	ldr	r3, [r4, #20]
 8026d4a:	3001      	adds	r0, #1
 8026d4c:	4283      	cmp	r3, r0
 8026d4e:	d004      	beq.n	8026d5a <__swbuf_r+0x62>
 8026d50:	89a3      	ldrh	r3, [r4, #12]
 8026d52:	07db      	lsls	r3, r3, #31
 8026d54:	d506      	bpl.n	8026d64 <__swbuf_r+0x6c>
 8026d56:	2e0a      	cmp	r6, #10
 8026d58:	d104      	bne.n	8026d64 <__swbuf_r+0x6c>
 8026d5a:	4621      	mov	r1, r4
 8026d5c:	4628      	mov	r0, r5
 8026d5e:	f000 f973 	bl	8027048 <_fflush_r>
 8026d62:	b988      	cbnz	r0, 8026d88 <__swbuf_r+0x90>
 8026d64:	4638      	mov	r0, r7
 8026d66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8026d68:	4b0a      	ldr	r3, [pc, #40]	; (8026d94 <__swbuf_r+0x9c>)
 8026d6a:	429c      	cmp	r4, r3
 8026d6c:	d101      	bne.n	8026d72 <__swbuf_r+0x7a>
 8026d6e:	68ac      	ldr	r4, [r5, #8]
 8026d70:	e7cf      	b.n	8026d12 <__swbuf_r+0x1a>
 8026d72:	4b09      	ldr	r3, [pc, #36]	; (8026d98 <__swbuf_r+0xa0>)
 8026d74:	429c      	cmp	r4, r3
 8026d76:	bf08      	it	eq
 8026d78:	68ec      	ldreq	r4, [r5, #12]
 8026d7a:	e7ca      	b.n	8026d12 <__swbuf_r+0x1a>
 8026d7c:	4621      	mov	r1, r4
 8026d7e:	4628      	mov	r0, r5
 8026d80:	f000 f80c 	bl	8026d9c <__swsetup_r>
 8026d84:	2800      	cmp	r0, #0
 8026d86:	d0cb      	beq.n	8026d20 <__swbuf_r+0x28>
 8026d88:	f04f 37ff 	mov.w	r7, #4294967295
 8026d8c:	e7ea      	b.n	8026d64 <__swbuf_r+0x6c>
 8026d8e:	bf00      	nop
 8026d90:	0802b250 	.word	0x0802b250
 8026d94:	0802b270 	.word	0x0802b270
 8026d98:	0802b230 	.word	0x0802b230

08026d9c <__swsetup_r>:
 8026d9c:	4b32      	ldr	r3, [pc, #200]	; (8026e68 <__swsetup_r+0xcc>)
 8026d9e:	b570      	push	{r4, r5, r6, lr}
 8026da0:	681d      	ldr	r5, [r3, #0]
 8026da2:	4606      	mov	r6, r0
 8026da4:	460c      	mov	r4, r1
 8026da6:	b125      	cbz	r5, 8026db2 <__swsetup_r+0x16>
 8026da8:	69ab      	ldr	r3, [r5, #24]
 8026daa:	b913      	cbnz	r3, 8026db2 <__swsetup_r+0x16>
 8026dac:	4628      	mov	r0, r5
 8026dae:	f000 f9df 	bl	8027170 <__sinit>
 8026db2:	4b2e      	ldr	r3, [pc, #184]	; (8026e6c <__swsetup_r+0xd0>)
 8026db4:	429c      	cmp	r4, r3
 8026db6:	d10f      	bne.n	8026dd8 <__swsetup_r+0x3c>
 8026db8:	686c      	ldr	r4, [r5, #4]
 8026dba:	89a3      	ldrh	r3, [r4, #12]
 8026dbc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8026dc0:	0719      	lsls	r1, r3, #28
 8026dc2:	d42c      	bmi.n	8026e1e <__swsetup_r+0x82>
 8026dc4:	06dd      	lsls	r5, r3, #27
 8026dc6:	d411      	bmi.n	8026dec <__swsetup_r+0x50>
 8026dc8:	2309      	movs	r3, #9
 8026dca:	6033      	str	r3, [r6, #0]
 8026dcc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8026dd0:	81a3      	strh	r3, [r4, #12]
 8026dd2:	f04f 30ff 	mov.w	r0, #4294967295
 8026dd6:	e03e      	b.n	8026e56 <__swsetup_r+0xba>
 8026dd8:	4b25      	ldr	r3, [pc, #148]	; (8026e70 <__swsetup_r+0xd4>)
 8026dda:	429c      	cmp	r4, r3
 8026ddc:	d101      	bne.n	8026de2 <__swsetup_r+0x46>
 8026dde:	68ac      	ldr	r4, [r5, #8]
 8026de0:	e7eb      	b.n	8026dba <__swsetup_r+0x1e>
 8026de2:	4b24      	ldr	r3, [pc, #144]	; (8026e74 <__swsetup_r+0xd8>)
 8026de4:	429c      	cmp	r4, r3
 8026de6:	bf08      	it	eq
 8026de8:	68ec      	ldreq	r4, [r5, #12]
 8026dea:	e7e6      	b.n	8026dba <__swsetup_r+0x1e>
 8026dec:	0758      	lsls	r0, r3, #29
 8026dee:	d512      	bpl.n	8026e16 <__swsetup_r+0x7a>
 8026df0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8026df2:	b141      	cbz	r1, 8026e06 <__swsetup_r+0x6a>
 8026df4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8026df8:	4299      	cmp	r1, r3
 8026dfa:	d002      	beq.n	8026e02 <__swsetup_r+0x66>
 8026dfc:	4630      	mov	r0, r6
 8026dfe:	f7ff fb45 	bl	802648c <_free_r>
 8026e02:	2300      	movs	r3, #0
 8026e04:	6363      	str	r3, [r4, #52]	; 0x34
 8026e06:	89a3      	ldrh	r3, [r4, #12]
 8026e08:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8026e0c:	81a3      	strh	r3, [r4, #12]
 8026e0e:	2300      	movs	r3, #0
 8026e10:	6063      	str	r3, [r4, #4]
 8026e12:	6923      	ldr	r3, [r4, #16]
 8026e14:	6023      	str	r3, [r4, #0]
 8026e16:	89a3      	ldrh	r3, [r4, #12]
 8026e18:	f043 0308 	orr.w	r3, r3, #8
 8026e1c:	81a3      	strh	r3, [r4, #12]
 8026e1e:	6923      	ldr	r3, [r4, #16]
 8026e20:	b94b      	cbnz	r3, 8026e36 <__swsetup_r+0x9a>
 8026e22:	89a3      	ldrh	r3, [r4, #12]
 8026e24:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8026e28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8026e2c:	d003      	beq.n	8026e36 <__swsetup_r+0x9a>
 8026e2e:	4621      	mov	r1, r4
 8026e30:	4630      	mov	r0, r6
 8026e32:	f000 fa5f 	bl	80272f4 <__smakebuf_r>
 8026e36:	89a0      	ldrh	r0, [r4, #12]
 8026e38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8026e3c:	f010 0301 	ands.w	r3, r0, #1
 8026e40:	d00a      	beq.n	8026e58 <__swsetup_r+0xbc>
 8026e42:	2300      	movs	r3, #0
 8026e44:	60a3      	str	r3, [r4, #8]
 8026e46:	6963      	ldr	r3, [r4, #20]
 8026e48:	425b      	negs	r3, r3
 8026e4a:	61a3      	str	r3, [r4, #24]
 8026e4c:	6923      	ldr	r3, [r4, #16]
 8026e4e:	b943      	cbnz	r3, 8026e62 <__swsetup_r+0xc6>
 8026e50:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8026e54:	d1ba      	bne.n	8026dcc <__swsetup_r+0x30>
 8026e56:	bd70      	pop	{r4, r5, r6, pc}
 8026e58:	0781      	lsls	r1, r0, #30
 8026e5a:	bf58      	it	pl
 8026e5c:	6963      	ldrpl	r3, [r4, #20]
 8026e5e:	60a3      	str	r3, [r4, #8]
 8026e60:	e7f4      	b.n	8026e4c <__swsetup_r+0xb0>
 8026e62:	2000      	movs	r0, #0
 8026e64:	e7f7      	b.n	8026e56 <__swsetup_r+0xba>
 8026e66:	bf00      	nop
 8026e68:	240000c0 	.word	0x240000c0
 8026e6c:	0802b250 	.word	0x0802b250
 8026e70:	0802b270 	.word	0x0802b270
 8026e74:	0802b230 	.word	0x0802b230

08026e78 <__register_exitproc>:
 8026e78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8026e7c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8026f38 <__register_exitproc+0xc0>
 8026e80:	4606      	mov	r6, r0
 8026e82:	f8d8 0000 	ldr.w	r0, [r8]
 8026e86:	461f      	mov	r7, r3
 8026e88:	460d      	mov	r5, r1
 8026e8a:	4691      	mov	r9, r2
 8026e8c:	f7ff fad5 	bl	802643a <__retarget_lock_acquire_recursive>
 8026e90:	4b25      	ldr	r3, [pc, #148]	; (8026f28 <__register_exitproc+0xb0>)
 8026e92:	681c      	ldr	r4, [r3, #0]
 8026e94:	b934      	cbnz	r4, 8026ea4 <__register_exitproc+0x2c>
 8026e96:	4c25      	ldr	r4, [pc, #148]	; (8026f2c <__register_exitproc+0xb4>)
 8026e98:	601c      	str	r4, [r3, #0]
 8026e9a:	4b25      	ldr	r3, [pc, #148]	; (8026f30 <__register_exitproc+0xb8>)
 8026e9c:	b113      	cbz	r3, 8026ea4 <__register_exitproc+0x2c>
 8026e9e:	681b      	ldr	r3, [r3, #0]
 8026ea0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8026ea4:	6863      	ldr	r3, [r4, #4]
 8026ea6:	2b1f      	cmp	r3, #31
 8026ea8:	dd07      	ble.n	8026eba <__register_exitproc+0x42>
 8026eaa:	f8d8 0000 	ldr.w	r0, [r8]
 8026eae:	f7ff fac6 	bl	802643e <__retarget_lock_release_recursive>
 8026eb2:	f04f 30ff 	mov.w	r0, #4294967295
 8026eb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8026eba:	b34e      	cbz	r6, 8026f10 <__register_exitproc+0x98>
 8026ebc:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8026ec0:	b988      	cbnz	r0, 8026ee6 <__register_exitproc+0x6e>
 8026ec2:	4b1c      	ldr	r3, [pc, #112]	; (8026f34 <__register_exitproc+0xbc>)
 8026ec4:	b923      	cbnz	r3, 8026ed0 <__register_exitproc+0x58>
 8026ec6:	f8d8 0000 	ldr.w	r0, [r8]
 8026eca:	f7ff fab7 	bl	802643c <__retarget_lock_release>
 8026ece:	e7f0      	b.n	8026eb2 <__register_exitproc+0x3a>
 8026ed0:	f44f 7084 	mov.w	r0, #264	; 0x108
 8026ed4:	f7ff fab4 	bl	8026440 <malloc>
 8026ed8:	2800      	cmp	r0, #0
 8026eda:	d0f4      	beq.n	8026ec6 <__register_exitproc+0x4e>
 8026edc:	2300      	movs	r3, #0
 8026ede:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8026ee2:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8026ee6:	6863      	ldr	r3, [r4, #4]
 8026ee8:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8026eec:	2201      	movs	r2, #1
 8026eee:	409a      	lsls	r2, r3
 8026ef0:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8026ef4:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8026ef8:	4313      	orrs	r3, r2
 8026efa:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8026efe:	2e02      	cmp	r6, #2
 8026f00:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8026f04:	bf02      	ittt	eq
 8026f06:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 8026f0a:	4313      	orreq	r3, r2
 8026f0c:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 8026f10:	6863      	ldr	r3, [r4, #4]
 8026f12:	f8d8 0000 	ldr.w	r0, [r8]
 8026f16:	1c5a      	adds	r2, r3, #1
 8026f18:	3302      	adds	r3, #2
 8026f1a:	6062      	str	r2, [r4, #4]
 8026f1c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8026f20:	f7ff fa8d 	bl	802643e <__retarget_lock_release_recursive>
 8026f24:	2000      	movs	r0, #0
 8026f26:	e7c6      	b.n	8026eb6 <__register_exitproc+0x3e>
 8026f28:	240263f8 	.word	0x240263f8
 8026f2c:	2402636c 	.word	0x2402636c
 8026f30:	0802b22c 	.word	0x0802b22c
 8026f34:	08026441 	.word	0x08026441
 8026f38:	24000124 	.word	0x24000124

08026f3c <__sflush_r>:
 8026f3c:	898a      	ldrh	r2, [r1, #12]
 8026f3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026f42:	4605      	mov	r5, r0
 8026f44:	0710      	lsls	r0, r2, #28
 8026f46:	460c      	mov	r4, r1
 8026f48:	d458      	bmi.n	8026ffc <__sflush_r+0xc0>
 8026f4a:	684b      	ldr	r3, [r1, #4]
 8026f4c:	2b00      	cmp	r3, #0
 8026f4e:	dc05      	bgt.n	8026f5c <__sflush_r+0x20>
 8026f50:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8026f52:	2b00      	cmp	r3, #0
 8026f54:	dc02      	bgt.n	8026f5c <__sflush_r+0x20>
 8026f56:	2000      	movs	r0, #0
 8026f58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8026f5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8026f5e:	2e00      	cmp	r6, #0
 8026f60:	d0f9      	beq.n	8026f56 <__sflush_r+0x1a>
 8026f62:	2300      	movs	r3, #0
 8026f64:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8026f68:	682f      	ldr	r7, [r5, #0]
 8026f6a:	602b      	str	r3, [r5, #0]
 8026f6c:	d032      	beq.n	8026fd4 <__sflush_r+0x98>
 8026f6e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8026f70:	89a3      	ldrh	r3, [r4, #12]
 8026f72:	075a      	lsls	r2, r3, #29
 8026f74:	d505      	bpl.n	8026f82 <__sflush_r+0x46>
 8026f76:	6863      	ldr	r3, [r4, #4]
 8026f78:	1ac0      	subs	r0, r0, r3
 8026f7a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8026f7c:	b10b      	cbz	r3, 8026f82 <__sflush_r+0x46>
 8026f7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8026f80:	1ac0      	subs	r0, r0, r3
 8026f82:	2300      	movs	r3, #0
 8026f84:	4602      	mov	r2, r0
 8026f86:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8026f88:	6a21      	ldr	r1, [r4, #32]
 8026f8a:	4628      	mov	r0, r5
 8026f8c:	47b0      	blx	r6
 8026f8e:	1c43      	adds	r3, r0, #1
 8026f90:	89a3      	ldrh	r3, [r4, #12]
 8026f92:	d106      	bne.n	8026fa2 <__sflush_r+0x66>
 8026f94:	6829      	ldr	r1, [r5, #0]
 8026f96:	291d      	cmp	r1, #29
 8026f98:	d82c      	bhi.n	8026ff4 <__sflush_r+0xb8>
 8026f9a:	4a2a      	ldr	r2, [pc, #168]	; (8027044 <__sflush_r+0x108>)
 8026f9c:	40ca      	lsrs	r2, r1
 8026f9e:	07d6      	lsls	r6, r2, #31
 8026fa0:	d528      	bpl.n	8026ff4 <__sflush_r+0xb8>
 8026fa2:	2200      	movs	r2, #0
 8026fa4:	6062      	str	r2, [r4, #4]
 8026fa6:	04d9      	lsls	r1, r3, #19
 8026fa8:	6922      	ldr	r2, [r4, #16]
 8026faa:	6022      	str	r2, [r4, #0]
 8026fac:	d504      	bpl.n	8026fb8 <__sflush_r+0x7c>
 8026fae:	1c42      	adds	r2, r0, #1
 8026fb0:	d101      	bne.n	8026fb6 <__sflush_r+0x7a>
 8026fb2:	682b      	ldr	r3, [r5, #0]
 8026fb4:	b903      	cbnz	r3, 8026fb8 <__sflush_r+0x7c>
 8026fb6:	6560      	str	r0, [r4, #84]	; 0x54
 8026fb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8026fba:	602f      	str	r7, [r5, #0]
 8026fbc:	2900      	cmp	r1, #0
 8026fbe:	d0ca      	beq.n	8026f56 <__sflush_r+0x1a>
 8026fc0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8026fc4:	4299      	cmp	r1, r3
 8026fc6:	d002      	beq.n	8026fce <__sflush_r+0x92>
 8026fc8:	4628      	mov	r0, r5
 8026fca:	f7ff fa5f 	bl	802648c <_free_r>
 8026fce:	2000      	movs	r0, #0
 8026fd0:	6360      	str	r0, [r4, #52]	; 0x34
 8026fd2:	e7c1      	b.n	8026f58 <__sflush_r+0x1c>
 8026fd4:	6a21      	ldr	r1, [r4, #32]
 8026fd6:	2301      	movs	r3, #1
 8026fd8:	4628      	mov	r0, r5
 8026fda:	47b0      	blx	r6
 8026fdc:	1c41      	adds	r1, r0, #1
 8026fde:	d1c7      	bne.n	8026f70 <__sflush_r+0x34>
 8026fe0:	682b      	ldr	r3, [r5, #0]
 8026fe2:	2b00      	cmp	r3, #0
 8026fe4:	d0c4      	beq.n	8026f70 <__sflush_r+0x34>
 8026fe6:	2b1d      	cmp	r3, #29
 8026fe8:	d001      	beq.n	8026fee <__sflush_r+0xb2>
 8026fea:	2b16      	cmp	r3, #22
 8026fec:	d101      	bne.n	8026ff2 <__sflush_r+0xb6>
 8026fee:	602f      	str	r7, [r5, #0]
 8026ff0:	e7b1      	b.n	8026f56 <__sflush_r+0x1a>
 8026ff2:	89a3      	ldrh	r3, [r4, #12]
 8026ff4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8026ff8:	81a3      	strh	r3, [r4, #12]
 8026ffa:	e7ad      	b.n	8026f58 <__sflush_r+0x1c>
 8026ffc:	690f      	ldr	r7, [r1, #16]
 8026ffe:	2f00      	cmp	r7, #0
 8027000:	d0a9      	beq.n	8026f56 <__sflush_r+0x1a>
 8027002:	0793      	lsls	r3, r2, #30
 8027004:	680e      	ldr	r6, [r1, #0]
 8027006:	bf08      	it	eq
 8027008:	694b      	ldreq	r3, [r1, #20]
 802700a:	600f      	str	r7, [r1, #0]
 802700c:	bf18      	it	ne
 802700e:	2300      	movne	r3, #0
 8027010:	eba6 0807 	sub.w	r8, r6, r7
 8027014:	608b      	str	r3, [r1, #8]
 8027016:	f1b8 0f00 	cmp.w	r8, #0
 802701a:	dd9c      	ble.n	8026f56 <__sflush_r+0x1a>
 802701c:	6a21      	ldr	r1, [r4, #32]
 802701e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8027020:	4643      	mov	r3, r8
 8027022:	463a      	mov	r2, r7
 8027024:	4628      	mov	r0, r5
 8027026:	47b0      	blx	r6
 8027028:	2800      	cmp	r0, #0
 802702a:	dc06      	bgt.n	802703a <__sflush_r+0xfe>
 802702c:	89a3      	ldrh	r3, [r4, #12]
 802702e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8027032:	81a3      	strh	r3, [r4, #12]
 8027034:	f04f 30ff 	mov.w	r0, #4294967295
 8027038:	e78e      	b.n	8026f58 <__sflush_r+0x1c>
 802703a:	4407      	add	r7, r0
 802703c:	eba8 0800 	sub.w	r8, r8, r0
 8027040:	e7e9      	b.n	8027016 <__sflush_r+0xda>
 8027042:	bf00      	nop
 8027044:	20400001 	.word	0x20400001

08027048 <_fflush_r>:
 8027048:	b538      	push	{r3, r4, r5, lr}
 802704a:	690b      	ldr	r3, [r1, #16]
 802704c:	4605      	mov	r5, r0
 802704e:	460c      	mov	r4, r1
 8027050:	b913      	cbnz	r3, 8027058 <_fflush_r+0x10>
 8027052:	2500      	movs	r5, #0
 8027054:	4628      	mov	r0, r5
 8027056:	bd38      	pop	{r3, r4, r5, pc}
 8027058:	b118      	cbz	r0, 8027062 <_fflush_r+0x1a>
 802705a:	6983      	ldr	r3, [r0, #24]
 802705c:	b90b      	cbnz	r3, 8027062 <_fflush_r+0x1a>
 802705e:	f000 f887 	bl	8027170 <__sinit>
 8027062:	4b14      	ldr	r3, [pc, #80]	; (80270b4 <_fflush_r+0x6c>)
 8027064:	429c      	cmp	r4, r3
 8027066:	d11b      	bne.n	80270a0 <_fflush_r+0x58>
 8027068:	686c      	ldr	r4, [r5, #4]
 802706a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802706e:	2b00      	cmp	r3, #0
 8027070:	d0ef      	beq.n	8027052 <_fflush_r+0xa>
 8027072:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8027074:	07d0      	lsls	r0, r2, #31
 8027076:	d404      	bmi.n	8027082 <_fflush_r+0x3a>
 8027078:	0599      	lsls	r1, r3, #22
 802707a:	d402      	bmi.n	8027082 <_fflush_r+0x3a>
 802707c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802707e:	f7ff f9dc 	bl	802643a <__retarget_lock_acquire_recursive>
 8027082:	4628      	mov	r0, r5
 8027084:	4621      	mov	r1, r4
 8027086:	f7ff ff59 	bl	8026f3c <__sflush_r>
 802708a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802708c:	07da      	lsls	r2, r3, #31
 802708e:	4605      	mov	r5, r0
 8027090:	d4e0      	bmi.n	8027054 <_fflush_r+0xc>
 8027092:	89a3      	ldrh	r3, [r4, #12]
 8027094:	059b      	lsls	r3, r3, #22
 8027096:	d4dd      	bmi.n	8027054 <_fflush_r+0xc>
 8027098:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802709a:	f7ff f9d0 	bl	802643e <__retarget_lock_release_recursive>
 802709e:	e7d9      	b.n	8027054 <_fflush_r+0xc>
 80270a0:	4b05      	ldr	r3, [pc, #20]	; (80270b8 <_fflush_r+0x70>)
 80270a2:	429c      	cmp	r4, r3
 80270a4:	d101      	bne.n	80270aa <_fflush_r+0x62>
 80270a6:	68ac      	ldr	r4, [r5, #8]
 80270a8:	e7df      	b.n	802706a <_fflush_r+0x22>
 80270aa:	4b04      	ldr	r3, [pc, #16]	; (80270bc <_fflush_r+0x74>)
 80270ac:	429c      	cmp	r4, r3
 80270ae:	bf08      	it	eq
 80270b0:	68ec      	ldreq	r4, [r5, #12]
 80270b2:	e7da      	b.n	802706a <_fflush_r+0x22>
 80270b4:	0802b250 	.word	0x0802b250
 80270b8:	0802b270 	.word	0x0802b270
 80270bc:	0802b230 	.word	0x0802b230

080270c0 <std>:
 80270c0:	2300      	movs	r3, #0
 80270c2:	b510      	push	{r4, lr}
 80270c4:	4604      	mov	r4, r0
 80270c6:	e9c0 3300 	strd	r3, r3, [r0]
 80270ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80270ce:	6083      	str	r3, [r0, #8]
 80270d0:	8181      	strh	r1, [r0, #12]
 80270d2:	6643      	str	r3, [r0, #100]	; 0x64
 80270d4:	81c2      	strh	r2, [r0, #14]
 80270d6:	6183      	str	r3, [r0, #24]
 80270d8:	4619      	mov	r1, r3
 80270da:	2208      	movs	r2, #8
 80270dc:	305c      	adds	r0, #92	; 0x5c
 80270de:	f7ff f9cd 	bl	802647c <memset>
 80270e2:	4b05      	ldr	r3, [pc, #20]	; (80270f8 <std+0x38>)
 80270e4:	6263      	str	r3, [r4, #36]	; 0x24
 80270e6:	4b05      	ldr	r3, [pc, #20]	; (80270fc <std+0x3c>)
 80270e8:	62a3      	str	r3, [r4, #40]	; 0x28
 80270ea:	4b05      	ldr	r3, [pc, #20]	; (8027100 <std+0x40>)
 80270ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 80270ee:	4b05      	ldr	r3, [pc, #20]	; (8027104 <std+0x44>)
 80270f0:	6224      	str	r4, [r4, #32]
 80270f2:	6323      	str	r3, [r4, #48]	; 0x30
 80270f4:	bd10      	pop	{r4, pc}
 80270f6:	bf00      	nop
 80270f8:	0802738d 	.word	0x0802738d
 80270fc:	080273af 	.word	0x080273af
 8027100:	080273e7 	.word	0x080273e7
 8027104:	0802740b 	.word	0x0802740b

08027108 <_cleanup_r>:
 8027108:	4901      	ldr	r1, [pc, #4]	; (8027110 <_cleanup_r+0x8>)
 802710a:	f000 b8af 	b.w	802726c <_fwalk_reent>
 802710e:	bf00      	nop
 8027110:	08027049 	.word	0x08027049

08027114 <__sfmoreglue>:
 8027114:	b570      	push	{r4, r5, r6, lr}
 8027116:	2268      	movs	r2, #104	; 0x68
 8027118:	1e4d      	subs	r5, r1, #1
 802711a:	4355      	muls	r5, r2
 802711c:	460e      	mov	r6, r1
 802711e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8027122:	f7ff fa1f 	bl	8026564 <_malloc_r>
 8027126:	4604      	mov	r4, r0
 8027128:	b140      	cbz	r0, 802713c <__sfmoreglue+0x28>
 802712a:	2100      	movs	r1, #0
 802712c:	e9c0 1600 	strd	r1, r6, [r0]
 8027130:	300c      	adds	r0, #12
 8027132:	60a0      	str	r0, [r4, #8]
 8027134:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8027138:	f7ff f9a0 	bl	802647c <memset>
 802713c:	4620      	mov	r0, r4
 802713e:	bd70      	pop	{r4, r5, r6, pc}

08027140 <__sfp_lock_acquire>:
 8027140:	4801      	ldr	r0, [pc, #4]	; (8027148 <__sfp_lock_acquire+0x8>)
 8027142:	f7ff b97a 	b.w	802643a <__retarget_lock_acquire_recursive>
 8027146:	bf00      	nop
 8027148:	2402625a 	.word	0x2402625a

0802714c <__sfp_lock_release>:
 802714c:	4801      	ldr	r0, [pc, #4]	; (8027154 <__sfp_lock_release+0x8>)
 802714e:	f7ff b976 	b.w	802643e <__retarget_lock_release_recursive>
 8027152:	bf00      	nop
 8027154:	2402625a 	.word	0x2402625a

08027158 <__sinit_lock_acquire>:
 8027158:	4801      	ldr	r0, [pc, #4]	; (8027160 <__sinit_lock_acquire+0x8>)
 802715a:	f7ff b96e 	b.w	802643a <__retarget_lock_acquire_recursive>
 802715e:	bf00      	nop
 8027160:	2402625b 	.word	0x2402625b

08027164 <__sinit_lock_release>:
 8027164:	4801      	ldr	r0, [pc, #4]	; (802716c <__sinit_lock_release+0x8>)
 8027166:	f7ff b96a 	b.w	802643e <__retarget_lock_release_recursive>
 802716a:	bf00      	nop
 802716c:	2402625b 	.word	0x2402625b

08027170 <__sinit>:
 8027170:	b510      	push	{r4, lr}
 8027172:	4604      	mov	r4, r0
 8027174:	f7ff fff0 	bl	8027158 <__sinit_lock_acquire>
 8027178:	69a3      	ldr	r3, [r4, #24]
 802717a:	b11b      	cbz	r3, 8027184 <__sinit+0x14>
 802717c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8027180:	f7ff bff0 	b.w	8027164 <__sinit_lock_release>
 8027184:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8027188:	6523      	str	r3, [r4, #80]	; 0x50
 802718a:	4b13      	ldr	r3, [pc, #76]	; (80271d8 <__sinit+0x68>)
 802718c:	4a13      	ldr	r2, [pc, #76]	; (80271dc <__sinit+0x6c>)
 802718e:	681b      	ldr	r3, [r3, #0]
 8027190:	62a2      	str	r2, [r4, #40]	; 0x28
 8027192:	42a3      	cmp	r3, r4
 8027194:	bf04      	itt	eq
 8027196:	2301      	moveq	r3, #1
 8027198:	61a3      	streq	r3, [r4, #24]
 802719a:	4620      	mov	r0, r4
 802719c:	f000 f820 	bl	80271e0 <__sfp>
 80271a0:	6060      	str	r0, [r4, #4]
 80271a2:	4620      	mov	r0, r4
 80271a4:	f000 f81c 	bl	80271e0 <__sfp>
 80271a8:	60a0      	str	r0, [r4, #8]
 80271aa:	4620      	mov	r0, r4
 80271ac:	f000 f818 	bl	80271e0 <__sfp>
 80271b0:	2200      	movs	r2, #0
 80271b2:	60e0      	str	r0, [r4, #12]
 80271b4:	2104      	movs	r1, #4
 80271b6:	6860      	ldr	r0, [r4, #4]
 80271b8:	f7ff ff82 	bl	80270c0 <std>
 80271bc:	68a0      	ldr	r0, [r4, #8]
 80271be:	2201      	movs	r2, #1
 80271c0:	2109      	movs	r1, #9
 80271c2:	f7ff ff7d 	bl	80270c0 <std>
 80271c6:	68e0      	ldr	r0, [r4, #12]
 80271c8:	2202      	movs	r2, #2
 80271ca:	2112      	movs	r1, #18
 80271cc:	f7ff ff78 	bl	80270c0 <std>
 80271d0:	2301      	movs	r3, #1
 80271d2:	61a3      	str	r3, [r4, #24]
 80271d4:	e7d2      	b.n	802717c <__sinit+0xc>
 80271d6:	bf00      	nop
 80271d8:	0802b1f4 	.word	0x0802b1f4
 80271dc:	08027109 	.word	0x08027109

080271e0 <__sfp>:
 80271e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80271e2:	4607      	mov	r7, r0
 80271e4:	f7ff ffac 	bl	8027140 <__sfp_lock_acquire>
 80271e8:	4b1e      	ldr	r3, [pc, #120]	; (8027264 <__sfp+0x84>)
 80271ea:	681e      	ldr	r6, [r3, #0]
 80271ec:	69b3      	ldr	r3, [r6, #24]
 80271ee:	b913      	cbnz	r3, 80271f6 <__sfp+0x16>
 80271f0:	4630      	mov	r0, r6
 80271f2:	f7ff ffbd 	bl	8027170 <__sinit>
 80271f6:	3648      	adds	r6, #72	; 0x48
 80271f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80271fc:	3b01      	subs	r3, #1
 80271fe:	d503      	bpl.n	8027208 <__sfp+0x28>
 8027200:	6833      	ldr	r3, [r6, #0]
 8027202:	b30b      	cbz	r3, 8027248 <__sfp+0x68>
 8027204:	6836      	ldr	r6, [r6, #0]
 8027206:	e7f7      	b.n	80271f8 <__sfp+0x18>
 8027208:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 802720c:	b9d5      	cbnz	r5, 8027244 <__sfp+0x64>
 802720e:	4b16      	ldr	r3, [pc, #88]	; (8027268 <__sfp+0x88>)
 8027210:	60e3      	str	r3, [r4, #12]
 8027212:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8027216:	6665      	str	r5, [r4, #100]	; 0x64
 8027218:	f7ff f90e 	bl	8026438 <__retarget_lock_init_recursive>
 802721c:	f7ff ff96 	bl	802714c <__sfp_lock_release>
 8027220:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8027224:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8027228:	6025      	str	r5, [r4, #0]
 802722a:	61a5      	str	r5, [r4, #24]
 802722c:	2208      	movs	r2, #8
 802722e:	4629      	mov	r1, r5
 8027230:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8027234:	f7ff f922 	bl	802647c <memset>
 8027238:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 802723c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8027240:	4620      	mov	r0, r4
 8027242:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8027244:	3468      	adds	r4, #104	; 0x68
 8027246:	e7d9      	b.n	80271fc <__sfp+0x1c>
 8027248:	2104      	movs	r1, #4
 802724a:	4638      	mov	r0, r7
 802724c:	f7ff ff62 	bl	8027114 <__sfmoreglue>
 8027250:	4604      	mov	r4, r0
 8027252:	6030      	str	r0, [r6, #0]
 8027254:	2800      	cmp	r0, #0
 8027256:	d1d5      	bne.n	8027204 <__sfp+0x24>
 8027258:	f7ff ff78 	bl	802714c <__sfp_lock_release>
 802725c:	230c      	movs	r3, #12
 802725e:	603b      	str	r3, [r7, #0]
 8027260:	e7ee      	b.n	8027240 <__sfp+0x60>
 8027262:	bf00      	nop
 8027264:	0802b1f4 	.word	0x0802b1f4
 8027268:	ffff0001 	.word	0xffff0001

0802726c <_fwalk_reent>:
 802726c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8027270:	4606      	mov	r6, r0
 8027272:	4688      	mov	r8, r1
 8027274:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8027278:	2700      	movs	r7, #0
 802727a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802727e:	f1b9 0901 	subs.w	r9, r9, #1
 8027282:	d505      	bpl.n	8027290 <_fwalk_reent+0x24>
 8027284:	6824      	ldr	r4, [r4, #0]
 8027286:	2c00      	cmp	r4, #0
 8027288:	d1f7      	bne.n	802727a <_fwalk_reent+0xe>
 802728a:	4638      	mov	r0, r7
 802728c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8027290:	89ab      	ldrh	r3, [r5, #12]
 8027292:	2b01      	cmp	r3, #1
 8027294:	d907      	bls.n	80272a6 <_fwalk_reent+0x3a>
 8027296:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802729a:	3301      	adds	r3, #1
 802729c:	d003      	beq.n	80272a6 <_fwalk_reent+0x3a>
 802729e:	4629      	mov	r1, r5
 80272a0:	4630      	mov	r0, r6
 80272a2:	47c0      	blx	r8
 80272a4:	4307      	orrs	r7, r0
 80272a6:	3568      	adds	r5, #104	; 0x68
 80272a8:	e7e9      	b.n	802727e <_fwalk_reent+0x12>

080272aa <__swhatbuf_r>:
 80272aa:	b570      	push	{r4, r5, r6, lr}
 80272ac:	460e      	mov	r6, r1
 80272ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80272b2:	2900      	cmp	r1, #0
 80272b4:	b096      	sub	sp, #88	; 0x58
 80272b6:	4614      	mov	r4, r2
 80272b8:	461d      	mov	r5, r3
 80272ba:	da08      	bge.n	80272ce <__swhatbuf_r+0x24>
 80272bc:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80272c0:	2200      	movs	r2, #0
 80272c2:	602a      	str	r2, [r5, #0]
 80272c4:	061a      	lsls	r2, r3, #24
 80272c6:	d410      	bmi.n	80272ea <__swhatbuf_r+0x40>
 80272c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80272cc:	e00e      	b.n	80272ec <__swhatbuf_r+0x42>
 80272ce:	466a      	mov	r2, sp
 80272d0:	f000 f8c2 	bl	8027458 <_fstat_r>
 80272d4:	2800      	cmp	r0, #0
 80272d6:	dbf1      	blt.n	80272bc <__swhatbuf_r+0x12>
 80272d8:	9a01      	ldr	r2, [sp, #4]
 80272da:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80272de:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80272e2:	425a      	negs	r2, r3
 80272e4:	415a      	adcs	r2, r3
 80272e6:	602a      	str	r2, [r5, #0]
 80272e8:	e7ee      	b.n	80272c8 <__swhatbuf_r+0x1e>
 80272ea:	2340      	movs	r3, #64	; 0x40
 80272ec:	2000      	movs	r0, #0
 80272ee:	6023      	str	r3, [r4, #0]
 80272f0:	b016      	add	sp, #88	; 0x58
 80272f2:	bd70      	pop	{r4, r5, r6, pc}

080272f4 <__smakebuf_r>:
 80272f4:	898b      	ldrh	r3, [r1, #12]
 80272f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80272f8:	079d      	lsls	r5, r3, #30
 80272fa:	4606      	mov	r6, r0
 80272fc:	460c      	mov	r4, r1
 80272fe:	d507      	bpl.n	8027310 <__smakebuf_r+0x1c>
 8027300:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8027304:	6023      	str	r3, [r4, #0]
 8027306:	6123      	str	r3, [r4, #16]
 8027308:	2301      	movs	r3, #1
 802730a:	6163      	str	r3, [r4, #20]
 802730c:	b002      	add	sp, #8
 802730e:	bd70      	pop	{r4, r5, r6, pc}
 8027310:	ab01      	add	r3, sp, #4
 8027312:	466a      	mov	r2, sp
 8027314:	f7ff ffc9 	bl	80272aa <__swhatbuf_r>
 8027318:	9900      	ldr	r1, [sp, #0]
 802731a:	4605      	mov	r5, r0
 802731c:	4630      	mov	r0, r6
 802731e:	f7ff f921 	bl	8026564 <_malloc_r>
 8027322:	b948      	cbnz	r0, 8027338 <__smakebuf_r+0x44>
 8027324:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8027328:	059a      	lsls	r2, r3, #22
 802732a:	d4ef      	bmi.n	802730c <__smakebuf_r+0x18>
 802732c:	f023 0303 	bic.w	r3, r3, #3
 8027330:	f043 0302 	orr.w	r3, r3, #2
 8027334:	81a3      	strh	r3, [r4, #12]
 8027336:	e7e3      	b.n	8027300 <__smakebuf_r+0xc>
 8027338:	4b0d      	ldr	r3, [pc, #52]	; (8027370 <__smakebuf_r+0x7c>)
 802733a:	62b3      	str	r3, [r6, #40]	; 0x28
 802733c:	89a3      	ldrh	r3, [r4, #12]
 802733e:	6020      	str	r0, [r4, #0]
 8027340:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8027344:	81a3      	strh	r3, [r4, #12]
 8027346:	9b00      	ldr	r3, [sp, #0]
 8027348:	6163      	str	r3, [r4, #20]
 802734a:	9b01      	ldr	r3, [sp, #4]
 802734c:	6120      	str	r0, [r4, #16]
 802734e:	b15b      	cbz	r3, 8027368 <__smakebuf_r+0x74>
 8027350:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8027354:	4630      	mov	r0, r6
 8027356:	f000 f891 	bl	802747c <_isatty_r>
 802735a:	b128      	cbz	r0, 8027368 <__smakebuf_r+0x74>
 802735c:	89a3      	ldrh	r3, [r4, #12]
 802735e:	f023 0303 	bic.w	r3, r3, #3
 8027362:	f043 0301 	orr.w	r3, r3, #1
 8027366:	81a3      	strh	r3, [r4, #12]
 8027368:	89a0      	ldrh	r0, [r4, #12]
 802736a:	4305      	orrs	r5, r0
 802736c:	81a5      	strh	r5, [r4, #12]
 802736e:	e7cd      	b.n	802730c <__smakebuf_r+0x18>
 8027370:	08027109 	.word	0x08027109

08027374 <__malloc_lock>:
 8027374:	4801      	ldr	r0, [pc, #4]	; (802737c <__malloc_lock+0x8>)
 8027376:	f7ff b860 	b.w	802643a <__retarget_lock_acquire_recursive>
 802737a:	bf00      	nop
 802737c:	24026259 	.word	0x24026259

08027380 <__malloc_unlock>:
 8027380:	4801      	ldr	r0, [pc, #4]	; (8027388 <__malloc_unlock+0x8>)
 8027382:	f7ff b85c 	b.w	802643e <__retarget_lock_release_recursive>
 8027386:	bf00      	nop
 8027388:	24026259 	.word	0x24026259

0802738c <__sread>:
 802738c:	b510      	push	{r4, lr}
 802738e:	460c      	mov	r4, r1
 8027390:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8027394:	f000 f894 	bl	80274c0 <_read_r>
 8027398:	2800      	cmp	r0, #0
 802739a:	bfab      	itete	ge
 802739c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802739e:	89a3      	ldrhlt	r3, [r4, #12]
 80273a0:	181b      	addge	r3, r3, r0
 80273a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80273a6:	bfac      	ite	ge
 80273a8:	6563      	strge	r3, [r4, #84]	; 0x54
 80273aa:	81a3      	strhlt	r3, [r4, #12]
 80273ac:	bd10      	pop	{r4, pc}

080273ae <__swrite>:
 80273ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80273b2:	461f      	mov	r7, r3
 80273b4:	898b      	ldrh	r3, [r1, #12]
 80273b6:	05db      	lsls	r3, r3, #23
 80273b8:	4605      	mov	r5, r0
 80273ba:	460c      	mov	r4, r1
 80273bc:	4616      	mov	r6, r2
 80273be:	d505      	bpl.n	80273cc <__swrite+0x1e>
 80273c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80273c4:	2302      	movs	r3, #2
 80273c6:	2200      	movs	r2, #0
 80273c8:	f000 f868 	bl	802749c <_lseek_r>
 80273cc:	89a3      	ldrh	r3, [r4, #12]
 80273ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80273d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80273d6:	81a3      	strh	r3, [r4, #12]
 80273d8:	4632      	mov	r2, r6
 80273da:	463b      	mov	r3, r7
 80273dc:	4628      	mov	r0, r5
 80273de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80273e2:	f000 b817 	b.w	8027414 <_write_r>

080273e6 <__sseek>:
 80273e6:	b510      	push	{r4, lr}
 80273e8:	460c      	mov	r4, r1
 80273ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80273ee:	f000 f855 	bl	802749c <_lseek_r>
 80273f2:	1c43      	adds	r3, r0, #1
 80273f4:	89a3      	ldrh	r3, [r4, #12]
 80273f6:	bf15      	itete	ne
 80273f8:	6560      	strne	r0, [r4, #84]	; 0x54
 80273fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80273fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8027402:	81a3      	strheq	r3, [r4, #12]
 8027404:	bf18      	it	ne
 8027406:	81a3      	strhne	r3, [r4, #12]
 8027408:	bd10      	pop	{r4, pc}

0802740a <__sclose>:
 802740a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802740e:	f000 b813 	b.w	8027438 <_close_r>
	...

08027414 <_write_r>:
 8027414:	b538      	push	{r3, r4, r5, lr}
 8027416:	4d07      	ldr	r5, [pc, #28]	; (8027434 <_write_r+0x20>)
 8027418:	4604      	mov	r4, r0
 802741a:	4608      	mov	r0, r1
 802741c:	4611      	mov	r1, r2
 802741e:	2200      	movs	r2, #0
 8027420:	602a      	str	r2, [r5, #0]
 8027422:	461a      	mov	r2, r3
 8027424:	f7df ff0d 	bl	8007242 <_write>
 8027428:	1c43      	adds	r3, r0, #1
 802742a:	d102      	bne.n	8027432 <_write_r+0x1e>
 802742c:	682b      	ldr	r3, [r5, #0]
 802742e:	b103      	cbz	r3, 8027432 <_write_r+0x1e>
 8027430:	6023      	str	r3, [r4, #0]
 8027432:	bd38      	pop	{r3, r4, r5, pc}
 8027434:	240263fc 	.word	0x240263fc

08027438 <_close_r>:
 8027438:	b538      	push	{r3, r4, r5, lr}
 802743a:	4d06      	ldr	r5, [pc, #24]	; (8027454 <_close_r+0x1c>)
 802743c:	2300      	movs	r3, #0
 802743e:	4604      	mov	r4, r0
 8027440:	4608      	mov	r0, r1
 8027442:	602b      	str	r3, [r5, #0]
 8027444:	f7df ff19 	bl	800727a <_close>
 8027448:	1c43      	adds	r3, r0, #1
 802744a:	d102      	bne.n	8027452 <_close_r+0x1a>
 802744c:	682b      	ldr	r3, [r5, #0]
 802744e:	b103      	cbz	r3, 8027452 <_close_r+0x1a>
 8027450:	6023      	str	r3, [r4, #0]
 8027452:	bd38      	pop	{r3, r4, r5, pc}
 8027454:	240263fc 	.word	0x240263fc

08027458 <_fstat_r>:
 8027458:	b538      	push	{r3, r4, r5, lr}
 802745a:	4d07      	ldr	r5, [pc, #28]	; (8027478 <_fstat_r+0x20>)
 802745c:	2300      	movs	r3, #0
 802745e:	4604      	mov	r4, r0
 8027460:	4608      	mov	r0, r1
 8027462:	4611      	mov	r1, r2
 8027464:	602b      	str	r3, [r5, #0]
 8027466:	f7df ff14 	bl	8007292 <_fstat>
 802746a:	1c43      	adds	r3, r0, #1
 802746c:	d102      	bne.n	8027474 <_fstat_r+0x1c>
 802746e:	682b      	ldr	r3, [r5, #0]
 8027470:	b103      	cbz	r3, 8027474 <_fstat_r+0x1c>
 8027472:	6023      	str	r3, [r4, #0]
 8027474:	bd38      	pop	{r3, r4, r5, pc}
 8027476:	bf00      	nop
 8027478:	240263fc 	.word	0x240263fc

0802747c <_isatty_r>:
 802747c:	b538      	push	{r3, r4, r5, lr}
 802747e:	4d06      	ldr	r5, [pc, #24]	; (8027498 <_isatty_r+0x1c>)
 8027480:	2300      	movs	r3, #0
 8027482:	4604      	mov	r4, r0
 8027484:	4608      	mov	r0, r1
 8027486:	602b      	str	r3, [r5, #0]
 8027488:	f7df ff13 	bl	80072b2 <_isatty>
 802748c:	1c43      	adds	r3, r0, #1
 802748e:	d102      	bne.n	8027496 <_isatty_r+0x1a>
 8027490:	682b      	ldr	r3, [r5, #0]
 8027492:	b103      	cbz	r3, 8027496 <_isatty_r+0x1a>
 8027494:	6023      	str	r3, [r4, #0]
 8027496:	bd38      	pop	{r3, r4, r5, pc}
 8027498:	240263fc 	.word	0x240263fc

0802749c <_lseek_r>:
 802749c:	b538      	push	{r3, r4, r5, lr}
 802749e:	4d07      	ldr	r5, [pc, #28]	; (80274bc <_lseek_r+0x20>)
 80274a0:	4604      	mov	r4, r0
 80274a2:	4608      	mov	r0, r1
 80274a4:	4611      	mov	r1, r2
 80274a6:	2200      	movs	r2, #0
 80274a8:	602a      	str	r2, [r5, #0]
 80274aa:	461a      	mov	r2, r3
 80274ac:	f7df ff0c 	bl	80072c8 <_lseek>
 80274b0:	1c43      	adds	r3, r0, #1
 80274b2:	d102      	bne.n	80274ba <_lseek_r+0x1e>
 80274b4:	682b      	ldr	r3, [r5, #0]
 80274b6:	b103      	cbz	r3, 80274ba <_lseek_r+0x1e>
 80274b8:	6023      	str	r3, [r4, #0]
 80274ba:	bd38      	pop	{r3, r4, r5, pc}
 80274bc:	240263fc 	.word	0x240263fc

080274c0 <_read_r>:
 80274c0:	b538      	push	{r3, r4, r5, lr}
 80274c2:	4d07      	ldr	r5, [pc, #28]	; (80274e0 <_read_r+0x20>)
 80274c4:	4604      	mov	r4, r0
 80274c6:	4608      	mov	r0, r1
 80274c8:	4611      	mov	r1, r2
 80274ca:	2200      	movs	r2, #0
 80274cc:	602a      	str	r2, [r5, #0]
 80274ce:	461a      	mov	r2, r3
 80274d0:	f7df fe9a 	bl	8007208 <_read>
 80274d4:	1c43      	adds	r3, r0, #1
 80274d6:	d102      	bne.n	80274de <_read_r+0x1e>
 80274d8:	682b      	ldr	r3, [r5, #0]
 80274da:	b103      	cbz	r3, 80274de <_read_r+0x1e>
 80274dc:	6023      	str	r3, [r4, #0]
 80274de:	bd38      	pop	{r3, r4, r5, pc}
 80274e0:	240263fc 	.word	0x240263fc

080274e4 <_init>:
 80274e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80274e6:	bf00      	nop
 80274e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80274ea:	bc08      	pop	{r3}
 80274ec:	469e      	mov	lr, r3
 80274ee:	4770      	bx	lr

080274f0 <_fini>:
 80274f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80274f2:	bf00      	nop
 80274f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80274f6:	bc08      	pop	{r3}
 80274f8:	469e      	mov	lr, r3
 80274fa:	4770      	bx	lr
